////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// По описателям состояния задачи (реквизитам адресации) формирует текст инфо-строки и важность сообщения
//
// Параметры
//	Исполнитель, Роль, Организация, Выполнена - реквизиты, влияющие на состояние задачи
//
// Возвращаемое значение:
//	Структура из двух строковых значений - ТекстСообщения и ВажностьСообщения
//
Функция ПолучитьОписаниеОбъекта(Исполнитель, Роль, Организация, Выполнена) Экспорт
	
	Если Выполнена Тогда
		ТекстСообщения		= "Задача выполнена";
	Иначе
		Если ЗначениеЗаполнено(Исполнитель) Тогда
			Если ТипЗнч(ОбъектЗадачи) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
				ТекстСообщения		= "Задачу может выполнить только " + Ответственный;
			Иначе
				ТекстСообщения		= "Задачу может выполнить только " + Исполнитель;
			КонецЕсли;
		Иначе
			ОписаниеРоли = "";
			Если ЗначениеЗаполнено(Роль) Тогда
				ОписаниеРоли = НРег(Строка(Роль));
			Иначе
				ОписаниеРоли = "кадровик или расчетчик";
			КонецЕсли;
			
			ОписаниеОрганизации = "";
			Если ЗначениеЗаполнено(Организация) Тогда
				ОписаниеОрганизации = " " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + " " + Строка(Организация);
			КонецЕсли;
			
			ТекстСообщения		= "Задачу может выполнить любой " + ОписаниеРоли + ОписаниеОрганизации;
			
			РеквизитыАдресации = Новый Структура;
			Для Каждого Реквизит Из Метаданные().РеквизитыАдресации Цикл
				РеквизитыАдресации.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
			КонецЦикла;
			УправлениеЗадачамиПереопределяемый.ДополнитьТекстОписанияЗадачи(ТекстСообщения, РеквизитыАдресации); 
			
		КонецЕсли;
	КонецЕсли;
	
	ВажностьСообщения	= "";
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстСообщения, ВажностьСообщения)

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередВыполнением(Отказ)
	
	//// Исполнитель берется из параметра сеанса
	//Если Исполнитель.Пустая() Тогда
	//	Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	//КонецЕсли;
	//
	//Если ТипЗнч(ОбъектЗадачи) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
	//	И ПараметрыСеанса.ТекущийПользователь <> Ответственный Тогда
	//	#Если Киент Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Выполнить задачу может только " + Ответственный);
	//	#КонецЕсли
	//	Отказ = Истина;
	//КонецЕсли;
	 
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		// Заполнение шапки
		Организация = ДанныеЗаполнения.Организация;
		ВидЗадачи = Справочники.ВидыЗадачПользователей.УточнениеПоЗаявкеНаРасходование;
		ОбъектЗадачи = ДанныеЗаполнения.Ссылка;
		Контрагент=ДанныеЗаполнения.Ссылка.Контрагент;
		Оповещение = Истина;
		СрокИсполнения = ТекущаяДата();
		СрокОповещения = ТекущаяДата();
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда	
		ОбъектЗадачи=ДанныеЗаполнения;
		Контрагент=ДанныеЗаполнения.Владелец;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Контрагенты") Тогда		
		ОбъектЗадачи=ДанныеЗаполнения;
		Контрагент=ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда		
		СрокИсполнения = ТекущаяДата();
		СрокОповещения = ТекущаяДата();
	ИначеЕсли ДанныеЗаполнения<>Неопределено Тогда
		ОбъектЗадачи = ДанныеЗаполнения.Ссылка;
		Оповещение = Истина;
		СрокИсполнения = ТекущаяДата();
		СрокОповещения = ТекущаяДата();
		
		Если ЕстьРеквизитДокумента("Контрагент",ДанныеЗаполнения.Метаданные()) Тогда
			Контрагент=ДанныеЗаполнения.Контрагент;
		КонецЕсли;	
	КонецЕсли;
	
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Попытка
		ДатаОбъектаЗадачи = ОбъектЗадачи.Дата;
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЕстьРеквизитДокумента()

Процедура ПриЗаписи(Отказ)
	Если НЕ Отказ И Выполнена Тогда
		Если Исполнитель<>Ответственный Тогда // Отправим автору письмо
			//Отправка письма
		    СписокКому=Новый СписокЗначений;
					
			Если Не ЗначениеЗаполнено(Ответственный) Тогда 
				Возврат;
			КонецЕсли;	
			Адрес=УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Ответственный);
			Если Адрес<>"" Тогда
				//СписокКому.Добавить("pozm@automacon.ru", "pozm@automacon.ru");
				СписокКому.Добавить(Адрес, Адрес);
			Иначе
				Возврат;
			КонецЕсли;	
			
			УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
			
			Почта = Новый ИнтернетПочта;
			Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
			Письмо = Новый ИнтернетПочтовоеСообщение;
			
			Почта.Подключиться(Профиль);
			Письмо.Тема = "Выполнена задача "+СокрЛП(Наименование)+" исполнителем "+Исполнитель;
			Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
			Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
			Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
			Для Каждого ПолучательЭлемент Из СписокКому Цикл
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес           = ПолучательЭлемент.Значение;
			КонецЦикла;	
			
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     = "Выполнена задача "+СокрЛП(Наименование)+" исполнителем "+Исполнитель;
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			
			//Письмо.Вложения.Добавить(ИмяФайла);
			
			Попытка
				Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
					Почта.Послать(Письмо);
				КонецЕсли;	
				Почта.Отключиться();
			Исключение
			КонецПопытки;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ Финансовый ПРОГРАММЫ
