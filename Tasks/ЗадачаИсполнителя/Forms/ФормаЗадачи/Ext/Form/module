////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// В переменной хранится текст сообщения об ошибке, который показывается,
// если реквизит "объект задачи" не заполнен
Перем мТекстОшибкиНезаполненногоОбъектаЗадачи;

Перем мЧас;
Перем мМинута;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает тип реквизита ОбъектЗадачи в зависимости от вида задачи
//
Процедура УстановитьТипОбъектаЗадачи(ПриводитьЗначение)
	
	Если Не ВидЗадачи.Пустая() Тогда
		Если ВидЗадачи = Справочники.ВидыЗадачПользователей.ДеньРождения Тогда
			ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.УточнениеПоЗаявкеНаРасходование Тогда
			ТипОбъектаЗадачи = Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеСредств");
		ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.УточнениеПоЗаявкеНаРасходование Тогда
			ТипОбъектаЗадачи = Новый ОписаниеТипов("ДокументСсылка.РасходИзБанка");			
			
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.Доначисление Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.КадровоеПеремещение Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов(
	//			"ДокументСсылка.КомандировкиОрганизаций,
	//			|ДокументСсылка.НеявкиИБолезниОрганизаций,
	//			|ДокументСсылка.ОтпускаОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ОценкаИспытательногоСрока Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.Перезаполнение Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.Перерасчет Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов(
	//			ЭлементыФормы.ОбъектЗадачи.ТипЗначения,
	//			,
	//			"СправочникСсылка.Организации,
	//			|СправочникСсылка.СотрудникиОрганизаций,
	//			|СправочникСсылка.ФизическиеЛица,
	//			|ДокументСсылка.КомандировкиОрганизаций,
	//			|ДокументСсылка.НеявкиИБолезниОрганизаций,
	//			|ДокументСсылка.ОтпускаОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ПриемНаРаботу Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетЕСН Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.Организации");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетЗарплаты Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.Организации");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетСтраховыхВзносов Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.Организации");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.Организации");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ОшибкиПриемаПоОсновномуМестуРаботы Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ОшибкиПриемаПоСовместительству Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
	//		
	//	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.СведенияОСтавкахЕСНиПФР Тогда
	//		ТипОбъектаЗадачи = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	//		
		Иначе
			ТипОбъектаЗадачи = УправлениеЗадачамиКлиентПереопределяемый.ВернутьТипОбъектаЗадачи(ВидЗадачи);
	//		
		КонецЕсли;
	Иначе
		ТипОбъектаЗадачи = Неопределено;
		
	КонецЕсли;
	
	Если ТипОбъектаЗадачи <> Неопределено Тогда
		ЭлементыФормы.ОбъектЗадачи.ОграничениеТипа	= ТипОбъектаЗадачи;
		Если ПриводитьЗначение Тогда
			ОбъектЗадачи = ТипОбъектаЗадачи.ПривестиЗначение(ОбъектЗадачи);
		КонецЕсли;
	//Иначе
	//	ЭлементыФормы.ОбъектЗадачи.ОграничениеТипа	= Новый ОписаниеТипов();
	//	Если ПриводитьЗначение Тогда
	//		ОбъектЗадачи = Неопределено;
	//	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет параметры элемента управления ОбъектЗадачи в зависимости
// от вида задачи
//
Процедура УточнитьОбъектЗадачиПоВидуЗадачи()
	
	//ЭлементыФормы.НадписьОбъектЗадачи.Видимость	= НЕ ВидЗадачи.Пустая();
	//ЭлементыФормы.ОбъектЗадачи.Видимость		= НЕ ВидЗадачи.Пустая();
	//ЭлементыФормы.ОбъектЗадачи.Доступность		= НЕ ВидЗадачи.Пустая();
	
	ОграничениеТипа = ЭлементыФормы.ОбъектЗадачи.ОграничениеТипа;
	
	Если ОграничениеТипа.Типы().Количество() > 0 Тогда
		Если ТипЗнч(ОбъектЗадачи) = Тип("СправочникСсылка.Организации") Тогда
			ЭлементыФормы.НадписьОбъектЗадачи.Заголовок	= ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
			мТекстОшибкиНезаполненногоОбъектаЗадачи = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!");
			
		ИначеЕсли ТипЗнч(ОбъектЗадачи) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			ЭлементыФормы.НадписьОбъектЗадачи.Заголовок	= "Сотрудник:";
			мТекстОшибкиНезаполненногоОбъектаЗадачи = "Не указан сотрудник!";
			
		ИначеЕсли ТипЗнч(ОбъектЗадачи) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ЭлементыФормы.НадписьОбъектЗадачи.Заголовок	= "Физическое лицо:";
			мТекстОшибкиНезаполненногоОбъектаЗадачи = "Не указано физическое лицо!";
			
		ИначеЕсли ТипЗнч(ОбъектЗадачи) = Тип("Число") Тогда
			ЭлементыФормы.НадписьОбъектЗадачи.Заголовок	= "Год:";
			мТекстОшибкиНезаполненногоОбъектаЗадачи = "Не указан год!";
			
		Иначе
			ЭлементыФормы.НадписьОбъектЗадачи.Заголовок	= "Документ:";
			мТекстОшибкиНезаполненногоОбъектаЗадачи = "Не указан документ!";
			
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.НадписьОбъектЗадачи.Заголовок	= "Объект задачи:";
		мТекстОшибкиНезаполненногоОбъектаЗадачи = "Не указан объект задачи!";
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет флажки-описатели состояния документа, формирует и показывает строку-описание
//
Процедура ОбновитьОписаниеСостоянияДокумента()

	ОписаниеСостоянияОбъекта = ПолучитьОписаниеОбъекта(Исполнитель, Роль, Организация, Выполнена);
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияОбъекта.ТекстСообщения, ОписаниеСостоянияОбъекта.ВажностьСообщения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДополнительныеДействия = Новый Соответствие;
	ДополнительныеДействия.Вставить("ТабличноеПоле", Новый Структура("Выбор", Новый Действие("ДополнительноВыбор")));
	
	УправлениеЗадачамиПереопределяемый.ФормаЗадачиПередОткрытиемДополнительно(ЭтаФорма, ЭтотОбъект, ДополнительныеДействия);
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии формы
//
Процедура ПриОткрытии()
	
	УстановитьТипОбъектаЗадачи(Ложь);
	УточнитьОбъектЗадачиПоВидуЗадачи();
	
	Если ЭтоНовый() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнойОтветственный");
		Исполнитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнойОтветственный");
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
	Если ТипЗнч(ОбъектЗадачи) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
		И ПараметрыСеанса.ТекущийПользователь <> Ответственный Тогда
		ЭлементыФормы.Выполнена.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью формы
//
Процедура ПередЗаписью(Отказ)
	
	//Если ЗначениеЗаполнено(ВидЗадачи) И Не ЗначениеЗаполнено(ОбъектЗадачи) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(мТекстОшибкиНезаполненногоОбъектаЗадачи);
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
	Если ТипЗнч(ОбъектЗадачи) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		Описание = "Контрагент: " + ОбъектЗадачи.Контрагент;
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Событие ПриИзменении у элемента ВидЗадачи
//
Процедура ВидЗадачиПриИзменении(Элемент)
	
	УстановитьТипОбъектаЗадачи(Истина);
	УточнитьОбъектЗадачиПоВидуЗадачи();
	
КонецПроцедуры

Процедура ДополнительноВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	УправлениеЗадачамиПереопределяемый.ФормаЗадачиДополнительноВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик установки-снятия флага оповещения
//
Процедура ОповещениеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры // ОповещениеПриИзменении()

// Процедура управляет доступностью кнопок формы
//
Процедура УстановитьДоступностьЭлементов()
	
	ЭлементыФормы.Наименование.ТолькоПросмотр = Выполнена ИЛИ ((НЕ Выполнена) И (Ответственный <> ПараметрыСеанса.ТекущийПользователь));
	ЭлементыФормы.Оповещение.Доступность      = НЕ Выполнена;
	ЭлементыФормы.СрокОповещения.Доступность  = Оповещение;
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры // СрокОповещенияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокОповещения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // СрокОповещенияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СрокОповещенияОбработкаВыбора()

// Процедура сохраняет значения переменных мЧас и мМинута
//
Процедура ПрисвоитьЧасМинутуИзЭлемента(Элемент)
	
	мЧас    = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Процедура присваивает дату с учетом сохраненных значений мЧас и мМинута
//
Процедура ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас             = 0;
	мМинута          = 0;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
# Если Клиент Тогда
// Функция управляет выпадающим списком полей дат
//
Функция ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, Форма) Экспорт

	СтандартнаяОбработка = Ложь;

	СписокВремен = Новый СписокЗначений;

	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = НачалоМинуты(ТекущаяДата());
	КонецЕсли;

	Если ДеньГода(Элемент.Значение) = ДеньГода(ТекущаяДата()) Тогда

		Если Минута(ТекущаяДата()) > 30 Тогда
			ВремяСписка = НачалоМинуты(КонецЧаса(ТекущаяДата()) + 60);
		Иначе
			ВремяСписка = НачалоМинуты(КонецЧаса(ТекущаяДата()) - 29*60);
		КонецЕсли;

	Иначе
		ВремяСписка = НачалоДня(Элемент.Значение);
	КонецЕсли;

	Пока НачалоЧаса(ВремяСписка) < КонецДня(Элемент.Значение) Цикл

		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		ВремяСписка = ВремяСписка + 30*60;

	КонецЦикла;

	ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, Элемент);

	Возврат ВыбранноеВремя;

КонецФункции // ВыборДатыВремениИзВыпадающегоСписка()
# КонецЕсли

Процедура ПослеЗаписи()
	Если ВидЗадачи=Справочники.ВидыЗадачПользователей.ВыдачаЗайма Тогда
		Если Не ОбъектЗадачи.ПринятоКОплате Тогда
			Заявка=ОбъектЗадачи.ПолучитьОбъект();
			Заявка.ПринятоКОплате=Истина;
			Заявка.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

Процедура ОбъектЗадачиНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОбъектЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Тип") И ЗначениеЗаполнено(Контрагент) Тогда
		Если ВыбранноеЗначение=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СтандартнаяОбработка=Ложь;
			ФормаВыбора=Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
			ФормаВыбора.Отбор.Контрагент.Значение=Контрагент;
			ФормаВыбора.Отбор.Контрагент.Использование=Истина;
			Выбор=ФормаВыбора.ОткрытьМодально();
			Если Выбор<>Неопределено Тогда
				ОбъектЗадачи=Выбор;
			КонецЕсли;	
		ИначеЕсли ВыбранноеЗначение=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СтандартнаяОбработка=Ложь;
			ФормаВыбора=Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора();
			ФормаВыбора.Отбор.Владелец.Значение=Контрагент;
			ФормаВыбора.Отбор.Владелец.Использование=Истина;
			Выбор=ФормаВыбора.ОткрытьМодально();
			Если Выбор<>Неопределено Тогда
				ОбъектЗадачи=Выбор;
			КонецЕсли;	
		ИначеЕсли ВыбранноеЗначение=Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
			СтандартнаяОбработка=Ложь;
			ФормаВыбора=Документы.АктСверкиВзаиморасчетов.ПолучитьФормуВыбора();
			ФормаВыбора.Отбор.Контрагент.Значение=Контрагент;
			ФормаВыбора.Отбор.Контрагент.Использование=Истина;
			Выбор=ФормаВыбора.ОткрытьМодально();
			Если Выбор<>Неопределено Тогда
				ОбъектЗадачи=Выбор;
			КонецЕсли;
		ИначеЕсли ВыбранноеЗначение=Тип("ДокументСсылка.РасходИзБанка") Тогда
			СтандартнаяОбработка=Ложь;
			ФормаВыбора=Документы.РасходИзБанка.ПолучитьФормуВыбора();
			ФормаВыбора.Отбор.Контрагент.Значение=Контрагент;
			ФормаВыбора.Отбор.Контрагент.Использование=Истина;
			Выбор=ФормаВыбора.ОткрытьМодально();
			Если Выбор<>Неопределено Тогда
				ОбъектЗадачи=Выбор;
			КонецЕсли;	
		ИначеЕсли ВыбранноеЗначение=Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
			СтандартнаяОбработка=Ложь;
			ФормаВыбора=Документы.ЗаявкаНаРасходованиеСредств.ПолучитьФормуВыбора();
			ФормаВыбора.Отбор.Контрагент.Значение=Контрагент;
			ФормаВыбора.Отбор.Контрагент.Использование=Истина;
			Выбор=ФормаВыбора.ОткрытьМодально();
			Если Выбор<>Неопределено Тогда
				ОбъектЗадачи=Выбор;
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
