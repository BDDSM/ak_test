////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА ПЕЧАТИ

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеСвойства(Кнопка)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ЭтаФорма, );
	Форма.ОбъектОтбораЗначений   = Ссылка;
	Форма.ОбъектОтбораНазначений = Ссылка;
	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыДействиеКатегории(Кнопка)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ЭтаФорма, );
	Форма.ОбъектОтбораКатегорий = Ссылка;
	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПРАВОЧНИКА-ОБЪЕКТА

// Процедура заполняет список интерфейсами конфигурации
//
Процедура ЗаполнитьСписокИнтерфейсовКонфигурации()

	Список = Новый СписокЗначений;
	Для каждого ЭлКоллекции Из Метаданные.Интерфейсы Цикл
		Список.Добавить(ЭлКоллекции.Имя, ЭлКоллекции.Синоним);
	КонецЦикла; 
	
	ЭлементыФормы.ОсновнойИнтерфейс.СписокВыбора = Список;
	
КонецПроцедуры // ЗаполнитьСписокИнтерфейсовКонфигурации

// Обработчик события нажатия на кнопку ДействиеПоказатьПользователейСТекущимПрофилем командной панели
// 
Процедура ДействияФормыДействиеПоказатьПользователейСТекущимПрофилем(Кнопка)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСОтбором = Справочники.Пользователи.ПолучитьФорму("ФормаСОтбором");
	ФормаСОтбором.НачальноеЗначениеВыбора = Ссылка;
	ФормаСОтбором.Открыть();
	
КонецПроцедуры // ОсновныеДействияФормыДействиеПоказатьПользователейСТекущимПрофилем

// Обработчик события нажатия на кнопку ДействиеНазначитьПрофильПользователям командной панели
// 
Процедура ДействияФормыДействиеНазначитьПрофильПользователям(Кнопка)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСвойств = Новый Структура("ПрофильПолномочийПользователя", Ссылка);
	УправлениеПользователями.ОткрытьГрупповуюОбработкуПользователей(ЗначенияСвойств);
	
КонецПроцедуры // ОсновныеДействияФормыДействиеНазначитьПрофильПользователям


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЕРЕВА ДОП ПРАВ

// Функция возвращает признак наличия роли "Полные права"
//
Функция ЕстьПолныеПрава(СоставРолей)

	ЕстьПолныеПрава = СоставРолей.Найти("ПолныеПрава", "ИмяРоли") <> Неопределено;
	
	Возврат ЕстьПолныеПрава;

КонецФункции // ДопПраваДоступны

Процедура УстановитьДоступностьДопПрав()

	ДопПраваДоступны = НЕ ЕстьПолныеПрава(СоставРолей);
	
	ЭлементыФормы.ДеревоПрав.ТолькоПросмотр = НЕ ДопПраваДоступны;
	ЭлементыФормы.КоманднаяПанельДопПрава.Доступность = ДопПраваДоступны;
	
КонецПроцедуры //
 
// Процедура сохраняет дополнительные права
//
// Параметры:
//			ПрофильПользователя	- <СправочикСсылка.ПрофилиПолномочийПользователей>, сохранить текущую настройку доп. прав
//									для данного профиля. Может отличаться от текущего профиля при копировании прав
//			ТолькоВыбранные	- <Булево>, сохраняет только выбранные права
//
Процедура СохранитьДопПрава()
	
	НаборЗаписей = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Ссылка);
	
	// Для профиля с ролю ПолныеПрава записывается пустой набор, т.к. все доп права считаются разрешенными
	Если НЕ ЕстьПолныеПрава(СоставРолей) Тогда
		
		СписокДопПрав = ДеревоПрав.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
		
		Для каждого СтрокаДерева Из СписокДопПрав Цикл
			Запись = НаборЗаписей.Добавить();
			
			Запись.Пользователь = Ссылка;
			Запись.Право        = СтрокаДерева.Право;
			Запись.Значение     = СтрокаДерева.Значение;
		КонецЦикла; 
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СохранитьДопПрава

// Процедура заполняет дерево доп прав значениям
//
// Параметры:
//		ПрофильОснование	- Ссылка на профиль пользователя, значения доп прав которого необходимо получить.
//								Если параметр не определен, то берется текущий профиль
//
Процедура ЗаполнитьДеревоДопПрав(ПрофильОснование = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ПрофильОснование <> Неопределено Тогда
		ПользовательПрав = ПрофильОснование;
	ИначеЕсли НЕ ЭтоНовый() Тогда
		ПользовательПрав = Ссылка;
	Иначе
		ПользовательПрав = Неопределено;
	КонецЕсли; 
	
	Если ПользовательПрав = Неопределено 
		// Для пользователя с полными права заполняем пустые значения
		ИЛИ ЕстьПолныеПрава(ПользовательПрав.СоставРолей) Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Права.Родитель,
			|	Права.Ссылка,
			|	Права.ЭтоГруппа КАК ЭтоГруппа,
			|	Неопределено КАК Значение 
			|ИЗ
			|	ПланВидовХарактеристик.ПраваПользователей КАК Права
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа ИЕРАРХИЯ,
			|	Права.Наименование";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Права.Родитель,
			|	Права.Ссылка,
			|	Права.ЭтоГруппа КАК ЭтоГруппа,
			|	ЗначениеПрав.Значение
			|ИЗ
			|	ПланВидовХарактеристик.ПраваПользователей КАК Права
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначениеПрав
			|		ПО (ЗначениеПрав.Право = Права.Ссылка)
			|			И (ЗначениеПрав.Пользователь = &ПользовательПрав)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа ИЕРАРХИЯ,
			|	Права.Наименование";
			
		Запрос.УстановитьПараметр("ПользовательПрав", ПользовательПрав);
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Родитель.Пустая() Тогда
			СтрокаГруппы = ДеревоПрав;
		Иначе
			СтрокаГруппы = ДеревоПрав.Строки.Найти(Выборка.Родитель, "Право", Истина);
			Если СтрокаГруппы = Неопределено Тогда
				СтрокаГруппы = ДеревоПрав.Строки.Добавить();
				СтрокаГруппы.Право = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;
		КонецЕсли;		
		
		СтрокаПрава = СтрокаГруппы.Строки.Найти(Выборка.Ссылка, "Право");
		Если СтрокаПрава = Неопределено Тогда
			СтрокаПрава = СтрокаГруппы.Строки.Добавить();
			СтрокаПрава.Право     = Выборка.Ссылка;
			СтрокаПрава.ЭтоГруппа = Выборка.ЭтоГруппа;
		КонецЕсли; 
		
		Если НЕ СтрокаПрава.ЭтоГруппа Тогда
			
			СтрокаПрава.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);					
			
		КонецЕсли; 
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьДеревоДопПрав

// Функция возвращает выбранные настройки доп прав
// Если выбрана группа доп прав, то будут обработаны ее права
// Если передан параметр ОтборПоТипуЗначения, то будут выбраны права, тип значения которых совпадает
//
Функция ПолучитьВыбранныеНастройкиДопПрав(ОтборПоТипуЗначения = Неопределено)

	СписокДопПрав = Новый Массив;
	
	ВыделенныеСтроки = ЭлементыФормы.ДеревоПрав.ВыделенныеСтроки;
	Для каждого СтрокаДерева Из ВыделенныеСтроки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			// Если выбрана группа доп прав, то будут обработаны ее права
			ПраваГруппы = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
			Для каждого ЭлКоллекции Из ПраваГруппы Цикл
				Если ОтборПоТипуЗначения <> Неопределено И ТипЗнч(ЭлКоллекции.Значение) <> ОтборПоТипуЗначения Тогда
					Продолжить;
				КонецЕсли; 
				Если СписокДопПрав.Найти(ЭлКоллекции) = Неопределено Тогда
					СписокДопПрав.Добавить(ЭлКоллекции);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если ОтборПоТипуЗначения <> Неопределено И ТипЗнч(СтрокаДерева.Значение) <> ОтборПоТипуЗначения Тогда
				Продолжить;
			КонецЕсли; 
			Если СписокДопПрав.Найти(СтрокаДерева) = Неопределено Тогда
				СписокДопПрав.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДопПрав;

КонецФункции // ПолучитьВыбранныеНастройкиДопПрав
	
// Процедура устанавливает новое значение доп прав 
// имеющих тип значения совпадающий с новым значением
//
Процедура УстановитьЗначениеДопПрава(ПравоРазрешено)
	
	ТипНовогоЗначения = Тип("Булево");
	
	// Получим доп права, которые надо обработать
	СписокДопПрав = ПолучитьВыбранныеНастройкиДопПрав(ТипНовогоЗначения);
	
	Для каждого ЭлКоллекции Из СписокДопПрав Цикл
		ЭлКоллекции.Значение = ПравоРазрешено
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры // УстановитьЗначениеДопПрава

// Процедура копирует выбранные доп. права другим профилям
//
Процедура КопироватьДопПрава()

	// ВЫБОР ПРОФИЛЕЙ
	
	ФормаВыбора = Справочники.ПрофилиПолномочийПользователей.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите профили для копирования доп.прав";
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.МножественныйВыбор = Истина;
	
	Если НЕ ЭтоНовый() Тогда		
		// Без текущего профиля
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Установить(Ссылка);
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		СписокПрофилей = РезультатВыбора;
	Иначе
		СписокПрофилей = Новый Массив;
		СписокПрофилей.Добавить(РезультатВыбора);
	КонецЕсли;
	
	
	// КОПИРОВАНИЕ
	ТекстВопроса = "Будет выполнено копирование доп.прав для выбранных профилей!";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена, "Копирование доп.прав");
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	СписокДопПрав = ПолучитьВыбранныеНастройкиДопПрав();
	
	ТаблицаДопПрав = Новый ТаблицаЗначений;
	ТаблицаДопПрав.Колонки.Добавить("Право");
	ТаблицаДопПрав.Колонки.Добавить("Значение");
	Для каждого СтрокаСпискаДопПрав Из СписокДопПрав Цикл
		СтрокаТаблицыДопПрав = ТаблицаДопПрав.Добавить();
		СтрокаТаблицыДопПрав.Право    = СтрокаСпискаДопПрав.Право;
		СтрокаТаблицыДопПрав.Значение = СтрокаСпискаДопПрав.Значение;
	КонецЦикла; 
	
	УправлениеДопПравамиПользователей.КопироватьДополнительныеПрава(ТаблицаДопПрав, СписокПрофилей);
	
КонецПроцедуры // КопироватьДопПрава
 
// Обработчик события ПриВыводеСтроки дерева прав
//
Процедура ДеревоПравПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Право.ОтображатьКартинку=Истина;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Право.ИндексКартинки=0;
		ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь
	Иначе
		ОформлениеСтроки.Ячейки.Право.ИндексКартинки=1;
		
		Если ДанныеСтроки.Право.ТипЗначения.СодержитТип(Тип("Булево"))
			И ДанныеСтроки.Право.ТипЗначения.Типы().Количество()=1 Тогда
			ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь;
			ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
			ОформлениеСтроки.Ячейки.Значение.Флажок = ДанныеСтроки.Право.ТипЗначения.ПривестиЗначение(ДанныеСтроки.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка дерева прав
//
Процедура ДеревоПравПриИзмененииФлажка(Элемент, Колонка)
	
	СтрокаДерева = ЭлементыФормы.ДеревоПрав.ТекущиеДанные;
	
	СтрокаДерева.Значение = НЕ СтрокаДерева.Право.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеУстановитьФлажки дерева прав
//
Процедура КоманднаяПанельДопПраваДействиеУстановитьФлажки(Кнопка)
	
	УстановитьЗначениеДопПрава(Истина);
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеСнятьФлажки дерева прав
//
Процедура КоманднаяПанельДопПраваДействиеСнятьФлажки(Кнопка)
	
	УстановитьЗначениеДопПрава(Ложь);
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеКопироватьПрава дерева прав
//
Процедура КоманднаяПанельДопПраваДействиеКопироватьПрава(Кнопка)
	
	КопироватьДопПрава();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСКА РОЛЕЙ

// Процедура открывает форму для побора (выбора) ролей
//
Процедура ОткрытьПодборРолей()

	УправлениеПользователямиКлиент.ОткрытьПодборРолей(СоставРолей, Наименование);
	
	УстановитьДоступностьДопПрав();
	
КонецПроцедуры // ОткрытьПодборРолей
 
// Процедура удаляет из состава профиля выбранные роли
//
Процедура УдалитьВыбранныеРоли()

	СтрокиКУдалениюСпросить = Новый Массив;
	ТекстКУдалениюСпросить = "";
	
	СтрокиКУдалению = Новый Массив;
	Для каждого РольОбъекта Из ЭлементыФормы.СоставРолей.ВыделенныеСтроки Цикл
		Если РольОбъекта.ИмяРоли = "ПолныеПрава" 
			ИЛИ РольОбъекта.ИмяРоли = "АдминистраторПользователей" Тогда
			
			СтрокиКУдалениюСпросить.Добавить(РольОбъекта);
			ТекстКУдалениюСпросить = ТекстКУдалениюСпросить + Символы.ПС + " - " + РольОбъекта.ПредставлениеРоли;
		Иначе
			СтрокиКУдалению.Добавить(РольОбъекта);
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокиКУдалениюСпросить.Количество() <> 0 Тогда
		ТекстВопроса = "Вы действительно хотите удалить роли?" + ТекстКУдалениюСпросить;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого ЭлКоллекции Из СтрокиКУдалениюСпросить Цикл
				СтрокиКУдалению.Добавить(ЭлКоллекции);
			КонецЦикла; 
		КонецЕсли;			 
	КонецЕсли; 
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		СоставРолей.Удалить(СтрокаКУдалению);	
	КонецЦикла; 
	
	УстановитьДоступностьДопПрав();
	
КонецПроцедуры // УдалитьВыбранныеРоли

// Обработчик события нажатия на кнопку ДействиеПодбор командной панели списка ролей
//
Процедура КоманднаяПанельРолиДействиеИзменить(Кнопка)
	
	ОткрытьПодборРолей();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения списка ролей 
//
Процедура СоставРолейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления списка ролей 
//
Процедура СоставРолейПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ОткрытьПодборРолей();
	
КонецПроцедуры

// Обработчик события ПередУдалением списка ролей 
//
Процедура СоставРолейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьВыбранныеРоли();
	
КонецПроцедуры

// Обработчик события формы ПриВыводеСтроки табличного поля СоставРолей
//
Процедура СоставРолейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Лев(ДанныеСтроки.ИмяРоли, 5) = "Право" Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередЗаписью(Отказ)
	
	Если ПустаяСтрока(Наименование) Тогда			
		ОбщегоНазначения.СообщитьОбОшибке("Перед записью необходимо указать наименование!", Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	СохранитьДопПрава();
	
	Если ЕстьПолныеПрава(СоставРолей) Тогда
		// Обновим значения доп.прав
		ЗаполнитьДеревоДопПрав();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьКнопкиПечати();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПрофильОснование = Неопределено;
	Если ПараметрОбъектКопирования <> Неопределено И НЕ ПараметрОбъектКопирования.ЭтоГруппа Тогда
		Ответ = Вопрос("Копировать дополнительные права?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Создание профиля");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПрофильОснование = ПараметрОбъектКопирования;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДеревоДопПрав(ПрофильОснование);
	УстановитьДоступностьДопПрав();
	
	ПараметрОбъектКопирования = Неопределено;
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	ЗаполнитьДеревоДопПрав();
	УстановитьДоступностьДопПрав();
	
КонецПроцедуры


ЗаполнитьСписокИнтерфейсовКонфигурации();

ДеревоПрав.Колонки.Добавить("ЭтоГруппа");
