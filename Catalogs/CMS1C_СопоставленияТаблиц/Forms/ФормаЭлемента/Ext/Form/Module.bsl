
//&НаКлиенте
//Процедура ПроизвольныйЗапросСайтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	Объект.ПроизвольныйЗапросСайт = СоздатьЗапросКонструкторомЗапросов(Объект.ПроизвольныйЗапросСайт);
//КонецПроцедуры

ПРоцедура ЗаполнитьПоляСайта()
	Выб = Справочники.CMS1C_ПоляТаблиц.Выбрать(,ОБъект.ТаблицаСайт);
	Пока ВЫб.Следующий() Цикл
		МасНайд = Объект.ПоляСайта.НайтиСтроки(Новый Структура("Таблица,Поле",Объект.ТаблицаСайт,Выб.Ссылка));
		Если МасНайд.Количество() = 0 Тогда
			ДобСтр = Объект.ПоляСайта.Добавить();
			ДобСтр.Таблица = ОБъект.ТаблицаСайт;
			ДобСтр.Поле = Выб.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТЧПолейСайтаНаФорме();
	
КОнецПроцедуры

Процедура ЗаполнитьТЧПолейСайтаНаФорме()
	ПоляСайта.Очистить();
	Для Каждого СтрТз из Объект.ПоляСайта Цикл
		ДобСтр = ПоляСайта.Добавить();
		ЗаполнитьЗначенияСвойств(ДобСтр,СтрТз);
		ЗаполнитьЗначенияСвойств(ДобСтр,СтрТз.Поле);
		ДобСтр.Таблица = СтрТз.Таблица;
		ДобСтр.Поле = СтрТз.ПОле;
	КонецЦикла;
	
	ПоляСайта.Сортировать("Сортировка");
КонецПроцедуры

Процедура ЗаполнитьТЧСопоставленияПолейНаФорме()
	СопоставленияПолей.Очистить();
	Об = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.CMS1C_СопоставленияТаблиц"));
	Для Каждого СтрТз из Об.СопоставленияПолей Цикл
		ДобСтр = СопоставленияПолей.Добавить();
		ЗаполнитьЗначенияСвойств(ДобСтр,СтрТз);
		ДобСтр.ОписаниеТипов = СтрТз.ХранилищеОписанияТипов.Получить();
		ЗаполнитьОтборНаФормеИзОбъекта(ДобСтр,СтрТз,"НеобходимоСверятьВыгрузкаОтбор");
		ЗаполнитьОтборНаФормеИзОбъекта(ДобСтр,СтрТз,"НеПодставлятьПриДобавленииОтбор");
		ЗаполнитьОтборНаФормеИзОбъекта(ДобСтр,СтрТз,"НеПодставлятьПриИзмененииОтбор");
		ЗаполнитьОтборНаФормеИзОбъекта(ДобСтр,СтрТз,"НеобходимоСверятьЗагрузкаОтбор");
		ЗаполнитьОтборНаФормеИзОбъекта(ДобСтр,СтрТз,"НеПодставлятьПриДобавленииВ1СОтбор");
		ЗаполнитьОтборНаФормеИзОбъекта(ДобСтр,СтрТз,"НеПодставлятьПриИзмененииВ1СОтбор");
	КонецЦикла;
	
	Для Каждого СтрТз из Об.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С Цикл
		Индекс = ОБ.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.ИНдекс(СтрТз);
		ТекущаяСтрока = Объект.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С[Индекс];
		ЗаполнитьОтборНаФормеИзОбъекта(ТекущаяСтрока,СтрТз,"ИспользованиеОтбор");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("НастройкаСайта",НастройкаСайта);
	Параметры.Свойство("НастройкаОбмена",НастройкаОбмена);
	Если НЕ ЗначениеЗаполнено(Объект.СистемаУправленияСайтом) Тогда
		Параметры.Свойство("СистемаУправленияСайтом",Объект.СистемаУправленияСайтом);
	КонецЕсли;
	
	ЗаполнитьТЧПолейСайтаНаФорме();
	ЗаполнитьТЧПолей1СНаФорме();
	ЗаполнитьСписокВЫбораТаблицы1С();
	ЗаполнитьСписокВыбораМета1С();
	ЗаполнитьТЧСопоставленияПолейНаФорме();
	ЗаполнитьОбработчикиСобытий();
	Попытка
	УстановитьИсточник();
	Исключение
	Сообщить("Не удалось установить источник");
КонецПопытки;

ЗаполнитьПереключатели();
КонецПроцедуры

&НаКлиенте
Процедура ПоляСайтаПолеПриИзменении(Элемент)
	ТекСтрока = Элементы.ПоляСайта.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекСтрока,ТекСтрока.Поле);
КонецПроцедуры

&НаКлиенте
Процедура ТипТаблицы1СПриИзменении(Элемент)
	ЗаполнитьСписокВЫбораТаблицы1С();
	ЗаполнитьСписокВЫбораМета1С();
КонецПроцедуры

Процедура ЗаполнитьСписокВЫбораТаблицы1С()
	Элементы.Таблица1С.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.ТипТаблицы1С) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЭлементМетаданных из Метаданные[Объект.ТипТаблицы1С] Цикл
		Элементы.Таблица1С.СписокВыбора.Добавить(ТекЭлементМетаданных.Имя,ТекЭлементМетаданных.Синоним);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйЗапрос1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 ТекПРоизвольныйЗапрос =  СоздатьЗапросКонструкторомЗапросов(Объект.ПроизвольныйЗапрос1С);
	Если ЗначениеЗаполнено(ТекПРоизвольныйЗапрос) Тогда
		Объект.ПроизвольныйЗапрос1С = ТекПРоизвольныйЗапрос;
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПолучитьПоля1С()
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = Объект.ПроизвольныйЗапрос1С;
	Построитель.ЗаполнитьНастройки();
	
	Объект.Поля1С.Очистить();
	Поля1С.Очистить();
	
	НС = 0;
	Для Каждого ТекДоступныеПоля из Построитель.ДоступныеПоля Цикл
		НС = НС + 1;
		ДобСтрПоле1С = Объект.Поля1С.Добавить();
		ДобСтрПоле1С.Поле = ТекДОступныеПоля.Имя;
		ДобСтрПоле1С.ПутьКДанным = ТекДоступныеПоля.ПутьКДанным;
	КонецЦикла;
	
	ЗаполнитьТЧПолей1СНаФорме();
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьЗапросКонструкторомЗапросов(ТекстЗапроса)
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Конструктор = Новый КонструкторЗапроса(ТекстЗапроса);
	Иначе
		Конструктор = Новый КонструкторЗапроса();
	КонецЕсли;
	
	Конструктор.АвтоДобавлениеПредставлений = Ложь;
	//Конструктор.РежимКомпоновкиДанных = Истина;
	Если Конструктор.ОткрытьМодально() Тогда
		Текст = Конструктор.Текст;
	КонецЕсли;
	Возврат Текст;
	
	#Иначе
		Сообщить("Мы не в толстом клиенте");
	#КонецЕсли	
КонецФункции

&НаКлиенте
Процедура КомандаПолучитьПоля1С(Команда)
	ПолучитьПоля1С();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьПоляСайтаИзЗапроса(Команда)
	ЗаполнитьПоляСайта();
КонецПроцедуры

Процедура ЗаполнитьТЧПолей1СНаФорме()
	Поля1С.Очистить();
	НС = 0;
	Для Каждого СтрТз из Объект.Поля1С Цикл
		НС = НС + 1;
		ДобСтр = Поля1С.Добавить();
		ЗаполнитьЗначенияСвойств(ДобСтр,СтрТз);
		ДобСтр.Сортировка = НС;
	КонецЦикла;
	
	Поля1С.Сортировать("Сортировка");
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСопоставленияПолей(Команда)
	ЗаполнитьСопоставленияПолейСерв();
КонецПроцедуры

Процедура ЗаполнитьСопоставленияПолейСерв()
	СопоставленияПолей.Очистить();
	Для Каждого СтрТз из Поля1С Цикл
		ДобСтр = СопоставленияПолей.Добавить();
		Если НЕ Объект.ВместоТаблицы1СТаблицаСайта Тогда
			Добстр.Колонка1С = СтрТз.Поле;
		ИНаче
			ДобСтр.Колонка1С = СтрТз.ПолеСайта;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрТз из ПоляСайта Цикл
		МасНайд = СопоставленияПолей.НайтиСтроки(Новый Структура("Колонка1С",СтрТз.Поле.Наименование));
		
		Если масНайд.Количество() = 0 Тогда
			Для Каждого СтрТзСопоставленияПолей из СопоставленияПолей ЦИкл
				Если НРЕГ(СтрТзСопоставленияПолей.Колонка1С) = НРЕГ(СтрТз.Поле.Наименование) Тогда
					МасНайд.Добавить(СтрТзСопоставленияПолей);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		Если МасНайд.КОличество() = 0 Тогда
			ДобСтр = СопоставленияПолей.Добавить();
		Иначе
			ДобСтр = МасНайд[0];
		КонецЕсли;
		ДобСтр.КолонкаСайта = СтрТз.Поле.Наименование;
		Если СтрТз.Индекс = "PRI" Тогда
			ДобСтр.КлючевоеДляСвязи = Истина;
		ИначеЕсли СтрТз.Индекс = "UNI" Тогда
			ДобСтр.УникальноеЗначение = Истина;
			ДобСтр.НеобходимоСверятьВыгрузка = Истина;
			ДобСтр.НеобходимоСверятьЗагрузка = Истина;
		Иначе
			ДобСтр.НеобходимоСверятьВыгрузка = Истина;
			ДобСтр.НеобходимоСверятьЗагрузка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрТз из СопоставленияПолей Цикл
		//ДобСтр.ИмяПоля1С = ПолучитьИмяПоля1С(СокрЛП(ДобСтр.Колонка1С));
		МасНайд = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита",СокрЛП(СтрТз.Колонка1С)));
		
		//+
		Если масНайд.Количество() = 0 Тогда
			Для Каждого СтрТзТаблицаЗагружаемыхРеквизитов из ТаблицаЗагружаемыхРеквизитов ЦИкл
				Если НРЕГ(СтрТзТаблицаЗагружаемыхРеквизитов.ИмяРеквизита) = НРЕГ(СокрЛП(СтрТз.Колонка1С)) Тогда
					МасНайд.Добавить(СтрТзТаблицаЗагружаемыхРеквизитов);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//-
		
		Если МасНайд.Количество() > 0 Тогда
			СтрокаЗагружаемыхРеквизитов = МасНайд[0];
			СтрТз.ИмяПоля1С = СокрЛП(СтрТз.Колонка1С);
			ЗаполнитьЗначенияСвойств(СтрТз,СтрокаЗагружаемыхРеквизитов);
		КонецЕсли;
	КонецЦикла;
	
конецПроцедуры

Процедура ЗаписатьПоля1СВОбъект()
	Объект.Поля1С.Очистить();
	Для Каждого СтрТз Из Поля1С Цикл
		ДобСтр = Объект.Поля1С.Добавить();
		ДобСтр.Поле = СтрТз.Поле;
		ДобСтр.ПолеСайта = Стртз.ПолеСайта;
		ДобСтр.ПутьКДанным = СтрТз.ПутьКДанным;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьПоляСайтаВОбъект()
	Объект.ПоляСайта.Очистить();
	Для Каждого СтрТз Из ПоляСайта Цикл
		ДобСтр = Объект.ПоляСайта.Добавить();
		ДобСтр.Таблица = СтрТз.Таблица;
		ДобСтр.Поле = СтрТз.Поле;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьСопоставленияПолейВОбъект()
	//Объект.СопоставленияПолей.Очистить();
	Об = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.CMS1C_СопоставленияТаблиц"));
	Об.СопоставленияПолей.Очистить();
	
	Схема = Справочники.CMS1C_СопоставленияТаблиц.ПолучитьМакет("Макет");
    Настройки = Схема.ВариантыНастроек.Основной.Настройки;
	
	Для Каждого СтрТз Из СопоставленияПолей Цикл
		ДобСтр = Об.СопоставленияПолей.Добавить();
		ЗаполнитьЗначенияСвойств(ДобСтр,СтрТз);
		//Адрес = ПоместитьВоВременноеХранилище(СтрТз.ОписаниеТипов);
		Добстр.ХранилищеОПисанияТипов = Новый ХранилищеЗначения(стрТз.ОписаниеТипов);//ПолучитьИзВременногоХранилища(Адрес);
		
		//+
		ЗаписатьВСтрокуОбъектаОтборИзФормы(ДобСтр,СтрТз,"НеобходимоСверятьВыгрузкаОтбор");
		ЗаписатьВСтрокуОбъектаОтборИзФормы(ДобСтр,СтрТз,"НеПодставлятьПриДобавленииОтбор");
		ЗаписатьВСтрокуОбъектаОтборИзФормы(ДобСтр,СтрТз,"НеПодставлятьПриИзмененииОтбор");
		ЗаписатьВСтрокуОбъектаОтборИзФормы(ДобСтр,СтрТз,"НеобходимоСверятьЗагрузкаОтбор");
		ЗаписатьВСтрокуОбъектаОтборИзФормы(ДобСтр,СтрТз,"НеПодставлятьПриДобавленииВ1СОтбор");
		ЗаписатьВСтрокуОбъектаОтборИзФормы(ДобСтр,СтрТз,"НеПодставлятьПриИзмененииВ1СОтбор");
		//-
	КонецЦикла;
	
	Для Каждого СтрТз из Объект.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С Цикл
		ДобСтр = Об.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С[Объект.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.Индекс(СтрТз)];
		ЗаписатьВСтрокуОбъектаОтборИзФормы(ДобСтр,СтрТз,"ИспользованиеОтбор");
	КонецЦикла;
	
	Об.Записать();
	ЗначениеВДанныеФормы(Об,Объект);
	
	Для Каждого СтрТз из Об.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С Цикл
		Индекс = ОБ.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.ИНдекс(СтрТз);
		ТекущаяСтрока = Объект.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С[Индекс];
		ЗаполнитьОтборНаФормеИзОбъекта(ТекущаяСтрока,СтрТз,"ИспользованиеОтбор");
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьВСтрокуОбъектаОтборИзФормы(СтрокаОбъекта,СтрокаФормы,ИмяРеквизита)
	Схема = Справочники.CMS1C_СопоставленияТаблиц.ПолучитьМакет("Макет");
	Настройки = Схема.ВариантыНастроек.Основной.Настройки;
	
	Для Каждого СтрокаОтбора из СтрокаФормы[ИмяРеквизита].Элементы Цикл
		ДобавитьОтбор(СтрокаОтбора,Настройки,Неопределено);
	КонецЦикла;
	СтрокаОбъекта[ИмяРеквизита+"Хранилище"] = Новый ХранилищеЗначения(Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаписатьПоля1СВОбъект();
	ЗаписатьПоляСайтаВОбъект();
	ЗаписатьСопоставленияПолейВОбъект();
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейКолонкаСайтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПоменятьМестамиСтроки(Элементы.СопоставленияПолей.ТекущиеДанные,ВыбранноеЗначение,,"Сайт",СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьМестамиСтроки(ТекущиеДанные,Знач НовоеЗначение=Неопределено,Знач НомерНовойСтроки=Неопределено,ЧтоПереносить,СтандартнаяОбработка)
	Если ЧтоПереносить = "Сайт" Тогда
		Переносим = "КолонкаСайта";
		Оставляем = "Колонка1С";
	Иначе
		Переносим = "Колонка1С";
		Оставляем = "КолонкаСайта";
	КонецЕсли;
	Если ТекущиеДанные[Оставляем] = "" И 
		НовоеЗначение = "" Тогда
		СтандартнаяОбработка = Ложь;
		ВОзврат;
	КонецЕсли;
	
	
	//1) Если новое и старое значения равны то не надо ничего делать
	Если ТекущиеДанные[Переносим] = НовоеЗначение Тогда
		СтандартнаяОбработка = Ложь;	
		Возврат;
	конецЕсли;	
	
	//2) Если было выбрано пустое значение -- добавляем пустую строчку
	Если НовоеЗначение="" Тогда
		ДобСтр = СопоставленияПолей.Добавить();
		Если ЧтоПереносить = "Сайт" Тогда
			ЗаполнитьЗначенияСвойств(ДобСтр,ТекущиеДанные,"КолонкаСайта,КлючевоеДляСвязи,УникальноеЗначение,НеобходимоСверятьВыгрузка,НеобходимоСверятьЗагрузка,НеПодставлятьПриДобавлении,НеПодставлятьПриИзменении");
			ТекущиеДанные.КолонкаСайта = "";
			ТекущиеДанные.КлючевоеДляСвязи = "";
			ТекущиеДанные.УникальноеЗначение = "";
			ТекущиеДанные.НеПодставлятьПриДобавлении = "";
			ТекущиеДанные.НеПодставлятьПриИзменении = "";
			ТекущиеДанные.НеобходимоСверятьВыгрузка = "";
			ТекущиеДанные.НеобходимоСверятьЗагрузка = "";
		ИначеЕсли ЧтоПереносить = "1С" Тогда
			ЗаполнитьЗначенияСвойств(ДобСтр,ТекущиеДанные,"Колонка1С,НеПодставлятьПриДобавленииВ1С,НеПодставлятьПриИзмененииВ1С");
			ТекущиеДанные.Колонка1С = "";
			ТекущиеДанные.НеПодставлятьПриДобавленииВ1С = "";
			ТекущиеДанные.НеПодставлятьПриИзмененииВ1С = "";
		конецЕсли;
		Возврат;
	КонецЕсли;
	
	//3) Ищем строчку и заменяем одно на другое
	Если НовоеЗначение = Неопределено Тогда
		НоваяСтрока = СопоставленияПолей.НайтиПоИдентификатору(НомерНовойСтроки);
		Если НоваяСтрока = Неопределено Тогда
			Возврат;
		КОнецЕСли;
	Иначе
		МасНайд = СопоставленияПолей.НайтиСтроки(Новый Структура(Переносим,НовоеЗначение));
		Если МасНайд.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		НоваяСтрока = МасНайд[0];
	КонецЕсли;
	
	//Нашли строчку. Сначала копируем все данные строки
	СтруктураБуфер = Новый Структура();
	СтруктураБуфер.Вставить("Колонка1С",ТекущиеДанные.Колонка1С);
	СтруктураБуфер.Вставить("КолонкаСайта",ТекущиеДанные.КолонкаСайта);
	СтруктураБуфер.Вставить("КлючевоеДляСвязи",ТекущиеДанные.КлючевоеДляСвязи);
	СтруктураБуфер.Вставить("УникальноеЗначение",ТекущиеДанные.УникальноеЗначение);
	СтруктураБуфер.Вставить("НеобходимоСверятьВыгрузка",ТекущиеДанные.НеобходимоСверятьВыгрузка);
	СтруктураБуфер.Вставить("НеобходимоСверятьЗагрузка",ТекущиеДанные.НеобходимоСверятьЗагрузка);
	СтруктураБуфер.Вставить("НеПодставлятьПриДобавлении",ТекущиеДанные.НеПодставлятьПриДобавлении);
	СтруктураБуфер.Вставить("НеПодставлятьПриИзменении",ТекущиеДанные.НеПодставлятьПриИзменении);
	СтруктураБуфер.Вставить("НеПодставлятьПриДобавленииВ1С",ТекущиеДанные.НеПодставлятьПриДобавленииВ1С);
	СтруктураБуфер.Вставить("НеПодставлятьПриИзмененииВ1С",ТекущиеДанные.НеПодставлятьПриИзмененииВ1С);
	//3.1 копируем в старую строчку
	Если ЧтоПереносить = "Сайт" Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,НоваяСтрока,"КолонкаСайта,КлючевоеДляСвязи,УникальноеЗначение,НеобходимоСверятьВыгрузка,НеобходимоСверятьЗагрузка,НеПодставлятьПриДобавлении,НеПодставлятьПриИзменении");
	ИначеЕсли ЧтоПереносить = "1С" Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,НоваяСтрока,"Колонка1С,НеПодставлятьПриДобавленииВ1С,НеПодставлятьПриИзмененииВ1С");
	конецЕсли;
	
	
	Если НоваяСтрока[Оставляем] = "" Тогда
		//3.2 Если "ОСТАВЛЯЕМ" пустое -- удаляем строчку
		СопоставленияПолей.Удалить(НоваяСтрока);
	Иначе
		Если ЧтоПереносить = "Сайт" Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураБуфер,"КолонкаСайта,КлючевоеДляСвязи,УникальноеЗначение,НеобходимоСверятьВыгрузка,НеобходимоСверятьЗагрузка,НеПодставлятьПриДобавлении,НеПодставлятьПриИзменении");
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураБуфер,"Колонка1С,НеПодставлятьПриДобавленииВ1С,НеПодставлятьПриИзмененииВ1С");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейКолонкаСайтаОчистка(Элемент, СтандартнаяОбработка)
	ПоменятьМестамиСтроки(Элементы.СопоставленияПолей.ТекущиеДанные,"",,"Сайт",СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейКолонкаСайтаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	НомерСтроки = Элементы.СопоставленияПолей.ТекущаяСтрока-Направление;
	ПоменятьМестамиСтроки(Элементы.СопоставленияПолей.ТекущиеДанные,,НомерСтроки,"Сайт",СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейКолонка1СНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("");
	Для Каждого стрТз из СопоставленияПолей Цикл
		Если Не ЗначениеЗаполнено(СокрЛП(СтрТз.Колонка1С)) Тогда
			Продолжить;
		КонецЕсли;
		Элемент.СписокВыбора.Добавить(СтрТз.Колонка1С);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейКолонка1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПоменятьМестамиСтроки(Элементы.СопоставленияПолей.ТекущиеДанные,ВыбранноеЗначение,,"1С",СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейКолонка1СОчистка(Элемент, СтандартнаяОбработка)
	ПоменятьМестамиСтроки(Элементы.СопоставленияПолей.ТекущиеДанные,"",,"1С",СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейКолонка1СРегулирование(Элемент, Направление, СтандартнаяОбработка)
	НомерСтроки = Элементы.СопоставленияПолей.ТекущаяСтрока-Направление;
	ПоменятьМестамиСтроки(Элементы.СопоставленияПолей.ТекущиеДанные,,НомерСтроки,"1С",СтандартнаяОбработка);
КонецПроцедуры

Процедура ЗаполнитьОбработчикиСобытий()
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемЭтапа");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияЭтапа");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемСинхронизацииТаблиц");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемЗапросаСайт");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияЗапросаСайт");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияЗапросаСайт");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПереборкаСтрокТаблицыСайт");
	
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемЗапроса1СПредварительноеСопоставление");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияЗапроса1СПредварительноеСопоставление");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияЗапроса1СПредварительноеСопоставление");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПереборкаСтрокТаблицы1СПредварительноеСопоставление");
	
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемСинхронизации1СПредварительноеСопоставление");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияСинхронизации1СПредварительноеСопоставление");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияСинхронизации1СПредварительноеСопоставление");
	
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемЗапроса1С");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияЗапроса1С");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияЗапроса1С");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПереборкаСтрокТаблицы1С");
	
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемСинхронизации1СВыгрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияПакетаЗапросовНаИзмененияТаблицНаСайтеВыгрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияСинхронизации1СВыгрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияСинхронизации1СВыгрузка");
	
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемСинхронизации1СЗагрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияСинхронизации1СЗагрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияСинхронизации1СЗагрузка");
	
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередВыполнениемСтандартнойЗагрузки");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоВыполненияСтандартнойЗагрузки");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПереборкаСтрокСтандартнойЗагрузки");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередПометкойУдаленияЭлемента1СЗагрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПередЗаписьюЭлементаИлиЗаписи1СЗагрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ВместоЗаписиЭлементаИлиЗаписи1СЗагрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеЗаписиЭлементаИлиЗаписи1СЗагрузка");
	Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора.Добавить("ПослеВыполненияСтандартнойЗагрузки");
	
	Элементы.ОбработчикиСобытийТипОбработчика.СписокВыбора.Добавить("СтандартнаяОбработка");
	Элементы.ОбработчикиСобытийТипОбработчика.СписокВыбора.Добавить("Код");
	//Элементы.ОбработчикиСобытийТипОбработчика.СписокВыбора.Добавить("");
	
	Для Каждого ЭлементСписка из Элементы.ОбработчикиСобытийИмяОбработчика.СписокВыбора Цикл
		Если Объект.ОбработчикиСобытий.НайтиСтроки(Новый Структура("ИмяОбработчика",ЭлементСписка.Значение)).Количество() = 0 Тогда
			ДобСтр = Объект.ОбработчикиСобытий.Добавить();
			ДобСтр.ИмяОбработчика = ЭлементСписка.Значение;
			ДобСтр.ТипОбработчика = "СтандартнаяОбработка";
			ДобСтр.Выгрузка = Ложь;
			ДобСтр.Загрузка = Ложь;
			ДобСтр.СопоставлениеПередОбменом = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаТестПриИзменении(Элемент)
	Если ВыгрузкаТест Тогда
		ЗагрузкаТест = Не ВыгрузкаТест;
	КонецЕСли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаТестПриИзменении(Элемент)
	Если ЗагрузкаТест Тогда
		ВыгрузкаТест = Не ЗагрузкаТест;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьТестовыйОбмен(Команда)
	Если Не ВыгрузкаТест И Не ЗагрузкаТест И НЕ ПолучитьТаблицу1С И Не ПолучитьТаблицуСайта Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОбмена.Пустая() Тогда
		Сообщить("Не указана настройка обмена");
		Возврат;
	КонецЕсли;
	
	
	ВыполнитьТестовыйОбменСерв();
КонецПроцедуры

Процедура ВыполнитьТестовыйОбменСерв()
	Если Модифицированность Тогда
		Сообщить("Модифицированность");
		Возврат;
	КонецЕслИ;
	
	Обработка = обработки.CMS1C_ОбработкаОбмена.Создать();
	Обработка.Отладка = Истина;
	ЗаполнитьЗначенияСвойств(Обработка,НастройкаСайта);
	ЗаполнитьЗначенияСвойств(Обработка,НастройкаОбмена);
	
	
	
	//Обработка.ВыполнитьОбменПоСопоставлению(Объект.ссылка);
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(Обработка, Обработка.HTTPОбменАдресСайта);
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	Если ВыгрузкаТест Тогда
		ВидОбмена = "Выгрузка";
	ИначеЕсли ЗагрузкаТест Тогда
		ВидОбмена = "Загрузка";
	Иначе
		ВидОбмена = Неопределено;
	КонецЕсли;
	
	
	СтруктураПеременных = Новый Структура();
	СтруктураПеременных.Вставить("ТаблицаНастроекДляКолонокИЗначений",ПолучитьТаблицуНастроекДляКолонокИЗначений());
	СтруктураПеременных.Вставить("ВместоТаблицы1СТаблицаСайта",Объект.ВместоТаблицы1СТаблицаСайта);
	Если Объект.ВместоТаблицы1СТаблицаСайта Тогда
		СтруктураПеременных.Вставить("ТаблицаНастроекДляКолонокИЗначений_ВместоТаблицы1СТаблицаСайта",ПолучитьТаблицуНастроекДляКолонокИЗначений_ВместоТаблицы1СТаблицаСайта());
	КонецЕсли;
	
	СтруктураПеременных.Вставить("ТаблицаСоответствийПолей",ПолучитьТаблицуСоответствийПолей(ВидОбмена));
	СтруктураПеременных.Вставить("ТаблицаСоответствийПолейСопоставлениеПередОбменом",ПолучитьТаблицуСоответствийПолей(ВидОбмена,Истина));
	СтруктураПеременных.Вставить("МассивИзмененийНоменклатуры",Неопределено);
	СтруктураПеременных.Вставить("МассивИзмененийНоменклатуры1С",Неопределено);
	СтруктураПеременных.Вставить("ВидОбмена",ВидОбмена);
	СтруктураПеременных.Вставить("ФильтрПоТаблице1С",Неопределено);
	СтруктураПеременных.Вставить("ФильтрПоТаблицеСайта",Неопределено);
	СтруктураПеременных.Вставить("ФильтрПоТаблицеСайта",Неопределено);
	Если ЗначениеЗаполнено(Объект.ПолеДляОтбораИзмененныхКатегорий) Тогда
		СтруктураПеременных.Вставить("ИмяПоляДляФильтраПоТаблицеСайта",Объект.ПолеДляОтбораИзмененныхКатегорий);
	ИначеЕсли ЗначениеЗаполнено(Объект.ПолеДляОтбораИзмененныхТоваров) Тогда
		СтруктураПеременных.Вставить("ИмяПоляДляФильтраПоТаблицеСайта",Объект.ПолеДляОтбораИзмененныхТоваров);
	Иначе
		СтруктураПеременных.Вставить("ИмяПоляДляФильтраПоТаблицеСайта","");
	КонецЕсли;
	
	СтруктураПеременных.Вставить("ЭтоПредварительнаяЗагрузка",Ложь);
	СтруктураПеременных.Вставить("ТаблицаОбработчиков",Объект.ОбработчикиСобытий.Выгрузить());
	СтруктураПеременных.Вставить("Сопоставление",Объект.Ссылка);
	СтруктураПеременных.Вставить("СопоставлениеПередОбменом",СопоставлениеПередОбменомТест);
	СтруктураПеременных.Вставить("ИмяТаблицыСайта",СокрЛП(Объект.ТаблицаСайт));
	СтруктураПеременных.Вставить("ИмяТаблицы1С",СокрЛП(Объект.Таблица1С));
	СтруктураПеременных.Вставить("ТипТаблицы1С",СокрЛП(Объект.ТипТаблицы1С));
	СтруктураПеременных.Вставить("ПолучитьТаблицу1С",ПолучитьТаблицу1С);
	СтруктураПеременных.Вставить("ПолучитьТаблицуСайта",ПолучитьТаблицуСайта);
	СтруктураПеременных.Вставить("ПолучитьТаблицуРезультатаСинхронизации",ПолучитьТаблицуРезультатаСинхронизации);
	СтруктураПеременных.Вставить("ТекстЗапросаСайта",Объект.ПроизвольныйЗапросСайт);
	СтруктураПеременных.Вставить("ТекстЗапроса1С",Объект.ПроизвольныйЗапрос1С);
	СтруктураПеременных.Вставить("ИскатьНенайденныеНаСайте",ИскатьНенайденныеНаСайтеТест);
	СтруктураПеременных.Вставить("ИскатьНенайденныеВ1С",ИскатьНенайденныеВ1СТест);
	СтруктураПеременных.Вставить("ИскатьИзмененные",ИскатьИзмененныеТест);
	СтруктураПеременных.Вставить("ИскатьНеИзмененные",ИскатьНеИзмененныеТест);
	СтруктураПеременных.Вставить("ИскатьВсе",ИскатьВсеТест);
	СтруктураПеременных.Вставить("ВыполнятьДобавленияНаСайте",ВыполнятьДобавленияНаСайтеТест);
	СтруктураПеременных.Вставить("ВыполнятьИзмененияНаСайте",ВыполнятьИзмененияНаСайтеТест);
	СтруктураПеременных.Вставить("ВыполнятьИзмененияНаСайтеДажеЕслиВсеПоляСовпадают",ВыполнятьИзмененияНаСайтеДажеЕслиВсеПоляСовпадаютТест);
	СтруктураПеременных.Вставить("ВыполнятьУдаленияНаСайте",ВыполнятьУдаленияНаСайтеТест);
	СтруктураПеременных.Вставить("ВыполнятьДобавленияВ1С",ВыполнятьДобавленияВ1СТест);
	СтруктураПеременных.Вставить("ВыполнятьИзмененияВ1С",ВыполнятьИзмененияВ1СТест);
	СтруктураПеременных.Вставить("ВыполнятьИзмененияВ1СДажеЕслиВсеПоляСовпадают",ВыполнятьИзмененияВ1СДажеЕслиВсеПоляСовпадаютТест);
	СтруктураПеременных.Вставить("ВыполнятьУдаленияВ1С",ВыполнятьУдаленияВ1СТест);
	СтруктураПеременных.Вставить("ВыполнятьУдаленияВ1СПолностью",ВыполнятьУдаленияВ1СПолностьюТест);
	СтруктураПеременных.Вставить("НазваниеПеременнойТаблица1С",Объект.ПредставлениеТаблицы1С);
	СтруктураПеременных.Вставить("НазваниеПеременнойТаблицаСайта",Объект.ПредставлениеТаблицыСайта);	 
	СтруктураПеременных.Вставить("НастройкаСайта",НастройкаСайта);
	СтруктураПеременных.Вставить("Этап","");
	СтруктураПеременных.Вставить("ТипЭтапа","Обычный");
	СтруктураПеременных.Вставить("МассивИзмененийНоменклатуры",Неопределено);
	СтруктураПеременных.Вставить("МАссивИзмененийКатегорий",Неопределено);
	СтруктураПеременных.Вставить("ВсяНоменклатура",Истина);
	СтруктураПеременных.Вставить("ВсеКатегории",Истина);
	СтруктураПеременных.Вставить("НаименованиеВалютыНаСайте",Обработка.ПолучитьНаименованиеВалютыНаСайте(Обработка.ВалютаЦен));
	СтруктураПеременных.Вставить("МассивСопоставленныхСопоставлений",Новый Массив);
	СтруктураПеременных.Вставить("ВыводитьLastID",Объект.ВыводитьLastID);
	СтруктураПеременных.Вставить("ПриУскореннойВыгрузкеИспользоватьИзмененияУзлаОбмена",Ложь);
	СтруктураПеременных.Вставить("ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С",объект.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.Выгрузить());
	
	ТаблицаОстатковПоНоменклатуре = Новый ТаблицаЗначений;
	ТаблицаОстатковПоНоменклатуре.Колонки.Добавить("НоменклатураСсылка");
	СтруктураПеременных.Вставить("ТаблицаОстатковПоНоменклатуре",ТаблицаОстатковПоНоменклатуре);
	
	ТаблицаОстатковПоНоменклатуреИХарактеристикам = Новый ТаблицаЗначений;
	ТаблицаОстатковПоНоменклатуреИХарактеристикам.Колонки.Добавить("НоменклатураСсылка");
	ТаблицаОстатковПоНоменклатуреИХарактеристикам.Колонки.Добавить("ХарактеристикаСсылка");
	СтруктураПеременных.Вставить("ТаблицаОстатковПоНоменклатуреИХарактеристикам",ТаблицаОстатковПоНоменклатуреИХарактеристикам);
	Обработка.СтруктураПеременных = СтруктураПеременных;
	Обработка.НастройкаСайтаДляОбмена = НастройкаСайта;
	Обработка.НастройкаСайтаДляПодключения = НастройкаСайта;
	
	
	
	Обработка.ЕстьОтборПоСкладу = Ложь;
	Обработка.СформироватьТаблицыЗаменСпецсимволов();
	Обработка.СтруктураПеременных.Вставить("Этап",Справочники.CMS1C_ЭтапыСхемы.ПустаяСсылка());
	Обработка.ПредварительноСопоставлятьНовыеЭлементыВ1СИНаСайте = СопоставлениеПередОбменомТест;
	Обработка.СинхронизироватьТаблицу();	
	ТекТаблица1С = Неопределено;
	Обработка.СтруктураПеременных.Свойство(Объект.ПредставлениеТаблицы1С,ТекТаблица1С);
	
	ТекТаблицаСайта = Неопределено;
	Обработка.СтруктураПеременных.Свойство(Объект.ПредставлениеТаблицыСайта,ТекТаблицаСайта);
	
	ТекТаблицаРезультатаСинхронизации = Неопределено;
	
	Обработка.СтруктураПеременных.Свойство("ТРС_"+Объект.ПредставлениеТаблицы1С+"_"+Объект.ПредставлениеТаблицыСайта,ТекТаблицаРезультатаСинхронизации);
	
	Если ТекТаблица1С <> Неопределено Тогда
		Если ТекТаблица1С.Колонки.Найти("Сортировка")<> Неопределено Тогда
			ТекТаблица1С.Колонки.Сортировка.Имя = "Сортировка_";
		КОнецЕсли;
		ВЫвестиТаблицуНаФорму(ЭтаФорма,"Таблица1С1",ТекТаблица1С);
	Иначе
		Таблица1С1.Очистить();
	КонецЕсли;
	
	Если ТекТаблицаСайта <> Неопределено Тогда
		ВЫвестиТаблицуНаФорму(ЭтаФорма,"ТаблицаСайта",ТекТаблицаСайта);
	Иначе
		ТаблицаСайта.Очистить();
	КонецЕсли;
	
	Если ТекТаблицаРезультатаСинхронизации <> Неопределено Тогда
		ВЫвестиТаблицуНаФорму(ЭтаФорма,"ТаблицаРезультатаСинхронизации",ТекТаблицаРезультатаСинхронизации);
	Иначе
		ТаблицаРезультатаСинхронизации.Очистить();
	КонецЕсли;
	
	Если Обработка.СтруктураПеременных.Свойство("ТаблицаВыводаСообщенийОРезультатеОбмена") Тогда
		ТаблицаВыводаСообщенийОРезультатеОбмена = Обработка.СтруктураПеременных.ТаблицаВыводаСообщенийОРезультатеОбмена;
		для Каждого СтрТз Из ТаблицаВыводаСообщенийОРезультатеОбмена Цикл
			Сообщить(""+СтрТз.Сообщение+": "+СтрТз.Количество);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуНаФорму(УФ,ИмяТЗНаФорме,ТЗ, ТЗОбработчиковСобытий = Неопределено) Экспорт
   
   // СОЗДАНИЕ РЕКВИЗИТОВ ФОРМЫ
   МассивДобавляемыхРеквизитов = Новый Массив; 
   
   Для Каждого Колонка Из ТЗ.Колонки Цикл
      МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,ИмяТЗНаФорме ,Колонка.Заголовок));   
   КонецЦикла; 
   
   МассивУдаляемыхРеквизитов = УФ.ПолучитьРеквизиты(ИмяТЗНаФорме);
   МассивИменУдаляемыхРеквизитов = Новый Массив;
   
   Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
      МассивИменУдаляемыхРеквизитов.Добавить(ИмяТЗНаФорме + "." + Элемент.Имя);
   КонецЦикла; 
   
   УФ.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов,МассивИменУдаляемыхРеквизитов); 
   
   // СОЗДАНИЕ ЭЛЕМЕНТОВ ФОРМЫ
   Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
	   УдаляемыйЭлемент = УФ.Элементы.Найти(ИмяТЗНаФорме + Элемент.Имя);
	   Попытка
		   УФ.Элементы.Удалить(УдаляемыйЭлемент);
	   Исключение
	   КонецПопытки;
   КонецЦикла; 
   
   Для Каждого Колонка Из ТЗ.Колонки Цикл
	   Попытка
		   НоваяКолонка = УФ.Элементы.Добавить(ИмяТЗНаФорме + Колонка.Имя, Тип("ПолеФормы"), УФ.Элементы[ИмяТЗНаФорме]); 
		   НоваяКолонка.Заголовок = Колонка.Заголовок; 
		   НоваяКолонка.ПутьКДанным = ИмяТЗНаФорме + "." + Колонка.Имя;
		   НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		   НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	   Исключение
	   КонецПопытки;
   КонецЦикла;    
   
   УФ[ИмяТЗНаФорме].Загрузить(ТЗ);
   
   // Привязка обработчиков событий
   Если ТЗОбработчиковСобытий = Неопределено Тогда
      Возврат;
   КонецЕсли;   
   
   Для Каждого Строка Из ТЗОбработчиковСобытий Цикл
      УФ.Элементы[Строка.ИмяЭлемента].УстановитьДействие(Строка.ИмяСобытия, Строка.ИмяЭлемента + Строка.ИмяСобытия); 
   КонецЦикла;   
   
КонецПроцедуры

ФУнкция ПолучитьТаблицуНастроекДляКолонокИЗначений()
	ТаблицаНастроекДляКолонокИЗначений = Новый ТаблицаЗначений();
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ИмяКолонки");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ОписаниеТипов");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("НезаполненныеЗначенияNULL",Новый ОписаниеТипов("Булево"));
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ФорматироватьНРЕГ",Новый ОписаниеТипов("Булево"));
	Для Каждого СтрТз из ПоляСайта Цикл
		ДобСтр = ТаблицаНастроекДляКолонокИЗначений.Добавить();
		ДобСтр.ИмяКолонки = СокрЛП(СтрТз.Поле);
		Если СтрТз.Тип = "Строка" Тогда
			ДобСтр.ОписаниеТипов = Новый ОписаниеТипов("Строка,NULL",,Новый КвалификаторыСтроки(СтрТз.Размерность));
		ИначеЕсли СтрТз.Тип = "Число" Тогда
			ДобСтр.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла());
		ИначеЕсли СтрТз.Тип = "Дата" Тогда
			ДобСтр.ОписаниеТипов = Новый ОписаниеТипов("Дата,NULL");
		Иначе
			Сообщить("Не знаю что за тип "+СтрТз.Тип);
			Ч = 1/0;
		КонецЕсли;
		
		Если СтрТз.ВозможенNULL Тогда
			ДобСтр.НезаполненныеЗначенияNULL = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаНастроекДляКолонокИЗначений;
КонецФУнкции

ФУнкция ПолучитьТаблицуНастроекДляКолонокИЗначений_ВместоТаблицы1СТаблицаСайта()
	ТаблицаНастроекДляКолонокИЗначений = Новый ТаблицаЗначений();
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ИмяКолонки");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ОписаниеТипов");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("НезаполненныеЗначенияNULL",Новый ОписаниеТипов("Булево"));
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ФорматироватьНРЕГ",Новый ОписаниеТипов("Булево"));
	Для Каждого СтрТз из Поля1С Цикл
		ДобСтр = ТаблицаНастроекДляКолонокИЗначений.Добавить();
		ДобСтр.ИмяКолонки = СокрЛП(СтрТз.ПолеСайта);
		Если СтрТз.ПолеСайта.Тип = "Строка" Тогда
			ДобСтр.ОписаниеТипов = Новый ОписаниеТипов("Строка,NULL",,Новый КвалификаторыСтроки(СтрТз.ПолеСайта.Размерность));
		ИначеЕсли СтрТз.ПолеСайта.Тип = "Число" Тогда
			ДобСтр.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла());
		ИначеЕсли СтрТз.ПолеСайта.Тип = "Дата" Тогда
			ДобСтр.ОписаниеТипов = Новый ОписаниеТипов("Дата,NULL");
		Иначе
			Сообщить("Не знаю что за тип "+СтрТз.Тип);
			Ч = 1/0;
		КонецЕсли;
		
		Если СтрТз.ПолеСайта.ВозможенNULL Тогда
			ДобСтр.НезаполненныеЗначенияNULL = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаНастроекДляКолонокИЗначений;
КонецФУнкции

ФУнкция ПолучитьТаблицуСоответствийПолей(ВидОбмена,ЭтоСопоставление = Ложь)
	ТаблицаСоответствийПолей = Новый ТаблицаЗначений();
	ТаблицаСоответствийПолей.Колонки.Добавить("Колонка1С",Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствийПолей.Колонки.Добавить("КолонкаСайта",Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствийПолей.Колонки.Добавить("КолонкаСайтаОтформатированная",Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствийПолей.Колонки.Добавить("КлючевоеДляСвязи",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("НеобходимоСверять",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("НеПодставлятьПриИзменении",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("НеПодставлятьПриДобавлении",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("НеПодставлятьПриИзмененииВ1С",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("НеПодставлятьПриДобавленииВ1С",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("ИмяПоля1С",Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствийПолей.Колонки.Добавить("ИспользоватьДляСтандартнойЗагрузки",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("ЕслиНеНашлиНеГрузим",Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийПолей.Колонки.Добавить("ЕслиНеНашлиБеремИзПоля",Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствийПолей.Колонки.Добавить("РежимЗагрузки");
	ТаблицаСоответствийПолей.Колонки.Добавить("ОписаниеТипов");
	ТаблицаСоответствийПолей.Колонки.Добавить("Значение");
	ТаблицаСоответствийПолей.Колонки.Добавить("Выражение");
	ТаблицаСоответствийПолей.Колонки.Добавить("ИскатьПо");
	ТаблицаСоответствийПолей.Колонки.Добавить("СвязьПоВладельцу");
	ТаблицаСоответствийПолей.Колонки.Добавить("СвязьПоТипу");
	ТаблицаСоответствийПолей.Колонки.Добавить("ЭлементСвязиПоТипу");
	ТаблицаСоответствийПолей.Колонки.Добавить("ДобавлятьВМассивИзменений");
	ТаблицаСоответствийПолей.Колонки.Добавить("ЗаписатьВИсториюОбмена");
	
	Для Каждого СтрТз из СопоставленияПолей ЦИкл
		ДобСтр = ТаблицаСоответствийПолей.Добавить();
		ДобСтр.Колонка1С = СтрТз.Колонка1С;
		ДобСтр.КолонкаСайта = СтрТз.КолонкаСайта;
		ДобСтр.КолонкаСайтаОтформатированная = УбратьСпецсимволыИзСтрокиКолонкиСайта(СтрТз.КолонкаСайта);
		ДобСтр.ИмяПоля1С = СтрТз.ИмяПоля1С;
		ДобСтр.ИспользоватьДляСтандартнойЗагрузки = СтрТз.ИспользоватьДляСтандартнойЗагрузки;
		ДобСтр.ЕслиНеНашлиНеГрузим = СтрТз.ЕслиНеНашлиНеГрузим;
		ДобСтр.ЕслиНеНашлиБеремИзПоля = СтрТз.ЕслиНеНашлиБеремИзПоля;
		Если ЭтоСопоставление Тогда
			ДобСтр.КлючевоеДляСвязи = СтрТз.КлючевоеПредварительноеСопоставление;
		Иначе
			ДобСтр.КлючевоеДляСвязи = СтрТз.КлючевоеДляСвязи;
		КонецЕсли;
		
		Если ЭтоСопоставление Тогда
			ДобСтр.НеобходимоСверять = СтрТз.НеобходимоСверятьПредварительноеСопоставление;
		ИначеЕсли ВидОбмена = "Выгрузка" Тогда
			Если ЗначениеЗаполнено(СтрТз.Колонка1С) И ЗначениеЗаполнено(СтрТз.КолонкаСайта) Тогда
				ДобСтр.НеобходимоСверять = СтрТз.НеобходимоСверятьВыгрузка;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрТз.Колонка1С) И ЗначениеЗаполнено(СтрТз.КолонкаСайта) Тогда
				ДобСтр.НеобходимоСверять = СтрТз.НеобходимоСверятьЗагрузка;
			КОнецЕсли;
		КонецЕсли;
		
		ДобСтр.НеПодставлятьПриИзменении = СтрТз.НеПодставлятьПриИзменении;
		ДобСтр.НеПодставлятьПриДобавлении = СтрТз.НеПОдставлятьПриДобавлении;
		ДобСтр.НеПодставлятьПриИзмененииВ1С = СтрТз.НеПодставлятьПриИзмененииВ1С;
		ДобСтр.НеПодставлятьПриДобавленииВ1С = СтрТз.НеПОдставлятьПриДобавленииВ1С;
		
		
		ДобСтр.РежимЗагрузки = СтрТз.РежимЗагрузки;
		ДобСтр.ОписаниеТипов = СтрТз.ОписаниеТипов;
		ДобСтр.Значение = СтрТз.Значение;
		ДобСтр.Выражение = СтрТз.Выражение;
		ДобСтр.ИскатьПо = СтрТз.ИскатьПо;
		ДобСтр.СвязьПоВладельцу = СтрТз.СвязьПоВладельцу;
		ДобСтр.СвязьПоТипу = СтрТз.СвязьПоТипу;
		ДобСтр.ЭлементСвязиПоТипу = СтрТз.ЭлементСвязиПоТипу;
	КонецЦикла;
	Возврат ТаблицаСоответствийПолей;
КонецФункции

//Функция ПолучитьИмяПоля1С(НазваниеПоля)
//	Если Не ЗначениеЗаполнено(НазваниеПоля) Тогда
//		Возврат "";
//	КонецЕсли;
//	//1) Ищем по тексту запроса
//	ТекТекст = Объект.ПроизвольныйЗапрос1С;
//	Найд = Найти(ТекТекст,"КАК "+НазваниеПоля+",");
//	Если Найд = 0 Тогда
//		Найд = Найти(ТекТекст,"КАК "+НазваниеПоля+Символы.ПС);
//	КонецЕсли;
//	
//	Если Найд = 0 Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	ТекТекст = СтрЗаменить(ТекТекст,Символы.ПС," ");
//	ТекТекст = СтрЗаменить(ТекТекст,"КАК "+НазваниеПоля+",",Символы.ПС);
//	ТекТекст = СтрЗаменить(ТекТекст,"КАК "+НазваниеПоля+Символы.ПС,Символы.ПС);
//	
//	послСтр=стрПолучитьСтроку(ТекТекст,СтрЧислоСтрок(ТекТекст)-1);
//	
//	НайдТочка = Найти(ПослСтр,".");
//	Если НайдТочка = 0 Тогда
//		Возврат "";
//	КОнецЕсли;
//	
//	ПослСтр = СтрЗаменить(ПослСтр,".",Символы.ПС);
//	
//	ТекИмяРеквизита = 
//	
//	
//	
//	
//	
//	
//	
//	
//	
//	
//КонецФункции

Процедура ЗаполнитьСписокВЫбораМета1С()
	Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.ТипТаблицы1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Таблица1С) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		ОбъектМетаданных = Метаданные[Объект.ТипТаблицы1С][Объект.Таблица1С];
		Если Объект.ТипТаблицы1С = "РегистрыСведений" Тогда
			Для каждого ТекПоле Из ОбъектМетаданных.Измерения Цикл
				Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить(ТекПоле.Имя);
			КонецЦикла;
			
			Для каждого ТекПоле Из ОбъектМетаданных.Ресурсы Цикл
				Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить(ТекПоле.Имя);
			КонецЦикла;
			
			Для каждого ТекПоле Из ОбъектМетаданных.Реквизиты Цикл
				Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить(ТекПоле.Имя);
			КонецЦикла;
		Иначе
			Если ОбъектМетаданных.ДлинаКода > 0 Тогда
				Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить("Код");
			КонецЕсли;
			
			Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
				Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить("Наименование");
			КонецЕсли;
			
			Если ОбъектМетаданных.Иерархический Тогда
				Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить("Родитель");
			КонецЕсли;
			
			Если Объект.ТипТаблицы1С = "Справочники" Тогда
				Если ОбъектМетаданных.Владельцы.Количество() > 0 Тогда
					Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить("Владелец");
				КонецЕсли;
			КонецЕсли;
			
			Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить("Ссылка");
			
			
			Для Каждого ТекЭлементМетаданных из ОбъектМетаданных.Реквизиты Цикл
				Элементы.СопоставленияПолейИмяПоля1С.СписокВыбора.Добавить(ТекЭлементМетаданных.Имя,ТекЭлементМетаданных.Синоним);
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Ошибка заполнения списков выбора");
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СПриИзменении(Элемент)
	ЗаполнитьСписокВЫбораМета1С();
	УстановитьИсточник();
КонецПроцедуры

Процедура ЗаполнитьНастройкиКолонокСправочника()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Владелец";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Владелец";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		СтрокаОписанияТипов = "";
			
		Для каждого Владелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + Владелец.ПолноеИмя();
		КонецЦикла;
			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
		
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		
	КонецЕсли;
	
	ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Ссылка";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Ссылка";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			 
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
	
КонецПроцедуры // ()

Процедура ЗаполнитьНастройкиКолонокПВХ()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		//Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		//Иначе
		//	ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		//КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		
	КонецЕсли;
	
	ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Ссылка";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Ссылка";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			 
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
	
КонецПроцедуры // ()

&НаКлиенте
Процедура СопоставленияПолейОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СопоставленияПолей.ТекущиеДанные;
	
	Описание = ТекущиеДанные.ДоступноеОписаниеТипов;
	МассивТипов = Новый Массив;
	Для Каждого Тип Из Описание.Типы() Цикл
		МассивТипов.Добавить(Тип);
	КонецЦикла;
	
	Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов, Описание.КвалификаторыЧисла, Описание.КвалификаторыСтроки, Описание.КвалификаторыДаты);
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейИмяПоля1СПриИзменении(Элемент)
	ТекНомерСтроки = Элементы.СопоставленияПолей.ТекущаяСтрока;
	ТекДанные = Элементы.СопоставленияПолей.ТекущиеДанные;
	//ДобавитьДоступноеОграничениеТиповВСтроку(ТекНомерСтроки);
	МасНайд = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый структура("ИмяРеквизита",ТекДанные.ИмяПоля1С));
	Если МасНайд.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(ТекДанные,МасНайд[0]);
	КонецЕсли;
	
	СопоставленияПолейПередНачаломИзменения(Элемент, Ложь);
КонецПроцедуры

//ПРоцедура ДобавитьДоступноеОграничениеТиповВСтроку(ТекНомерСтроки)
	//ТекСтрока = СопоставленияПолей.НайтиПоИдентификатору(ТекНомерСтроки);
	//Если Не ЗначениеЗаполнено(ТекСтрока.ИмяПоля1С) ТОгда
	//	ТекСтрока.ДоступноеОПисаниеТипов = Неопределено;
	//КонецЕсли;
	//
	//Если Объект.ТипТаблицы1С = "Справочники" Тогда
	//	МетаданныеИсточника = Метаданные.Справочники[Объект.Таблица1С];
	//	Если ТекСтрока.ИмяПоля1С = "Код" Тогда
	//		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
	//			ТекСтрока.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
	//		Иначе
	//			ТекСтрока.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
	//		КонецЕсли;
	//	ИначеЕсли ТекСтрока.ИмяПоля1С = "Наименование" Тогда
	//		ТекСтрока.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
	//	ИначеЕсли ТекСтрока.ИмяПоля1С = "Владелец" Тогда
	//		Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда
	//			СтрокаОписанияТипов = "";
	//			Для каждого Владелец Из МетаданныеИсточника.Владельцы Цикл
	//				СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + Владелец.ПолноеИмя();
	//			КонецЦикла;
	//			
	//			СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
	//			ТекСтрока.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
	//			
	//		Иначе
	//			ТекСтрока.ДоступноеОписаниеТипов = Неопределено;
	//		КонецЕсли;
	//	ИначеЕсли ТекСтрока.ИмяПоля1С = "Родитель" Тогда
	//		ТекСтрока.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	//	ИначеЕсли ТекСтрока.ИмяПоля1С = "Ссылка" Тогда
	//		ТекСтрока.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	//	Иначе
	//		ТекСтрока.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[Текстрока.ИмяПоля1С].Тип;
	//	КонецЕсли;
	//	ТекСтрока.ОписаниеТипов = ТекСтрока.ДоступноеОписаниеТипов;
	//КонецЕсли;
	//
	//СписокВыбораИскатьПо = ПолучитьСписокИменПредставлений(ТекСтрока);
	//Если СписокВыбораИскатьПо.Количество() = 0 Тогда
	//	ТекСтрока.СвязьПоТипу = "";
	//	ТекСтрока.ЭлементСвязиПоТипу = 0;
	//	ТекСтрока.ИскатьПо = "";
	//Иначе
	//	ТекСтрока.СвязьПоТипу = СписокВыбораИскатьПо[0].Значение;
	//	Если Найти(ТекСтрока.ИмяПоля1С,"3") <> 0 Тогда
	//		ТекСтрока.ЭлементСвязиПоТипу = 3;
	//	ИначеЕсли Найти(ТекСтрока.ИмяПоля1С,"2") <> 0 Тогда
	//		ТекСтрока.ЭлементСвязиПоТипу = 2;
	//	Иначе
	//		ТекСтрока.ЭлементСвязиПоТипу = 1;
	//	КонецЕсли;
	//КОнецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.СопоставленияПолей.ТекущиеДанные.Выражение = РедактироватьКодОбработчика(Элементы.СопоставленияПолей.ТекущиеДанные.Выражение,"ВычислениеПриЗагрузке");
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СопоставленияПолей.ТекущиеДанные;
	
	СвязьПоВладельцу = ТекущиеДанные.СвязьПоВладельцу;
	Если ТипЗНЧ(СвязьПоВладельцу) = Тип("Строка") Тогда
		МассивСтрокСвязиПоВладельцу = СопоставленияПолей.НайтиСтроки(Новый Структура("ИмяПоля1С",СвязьПоВладельцу));
		Если МассивСтрокСвязиПоВладельцу.Количество()>0 Тогда
			СтрокаСвязиПоВладельцу = МассивСтрокСвязиПоВладельцу[0];
			СвязьПоВладельцу = СтрокаСвязиПоВладельцу.Значение;
		Иначе
			СвязьПоВладельцу = Неопределено;
		КонецЕсли;
	КонецЕсли;
	//Элемент.ВыборПоВладельцу = СвязьПоВладельцу;
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТекущиеДанные.ОписаниеТипов,"СправочникСсылка.CMS1C_Переменные");
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВидимостьПолейСопоставленияПриИзменении(Элемент)
	Если ПереключательВидимостьПолейСопоставления = 0 Тогда
		Элементы.СопоставленияПолейГруппаМетаданные.Видимость = Истина;
		Элементы.СопоставленияПолейКолонкиСайта.Видимость = Истина;
	ИначеЕсли ПереключательВидимостьПолейСопоставления = 1 Тогда
		Элементы.СопоставленияПолейГруппаМетаданные.Видимость = Ложь;
		Элементы.СопоставленияПолейКолонкиСайта.Видимость = Истина;
	Иначе
		Элементы.СопоставленияПолейГруппаМетаданные.Видимость = Истина;
		Элементы.СопоставленияПолейКолонкиСайта.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РедактироватьКодОбработчика(ТекстОбработчика,НазваниеОбработчика)
	СтруктураПараметров = Новый структура();
	СтруктураПараметров.Вставить("НазваниеОбработчика",НазваниеОбработчика);
	Ф = ПолучитьФорму("Справочник.CMS1C_СопоставленияТаблиц.Форма.ФормаРедактированияОбработчиковСобытий",СтруктураПараметров);
	Ф.ТекстОбработчика = ТекстОбработчика;
	Результат = Ф.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат ТекстОбработчика;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизитИлиНомерстроки) Экспорт
	Если ТИпЗнч(ЗагружаемыйРеквизитИлиНомерстроки) = ТИп("Число") Тогда
		ЗагружаемыйРеквизит = СопоставленияПолей.НайтиПоИдентификатору(ЗагружаемыйРеквизитИлиНомерстроки);
	Иначе
		ЗагружаемыйРеквизит = ЗагружаемыйРеквизитИлиНомерстроки;
	КонецЕсли;
	
	
	
	
	СписокВыбора = Новый СписокЗначений;
	//Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
	
	НС = 0;
	ДЛя Каждого Стртз из ЗагружаемыйРеквизит.ОписаниеТипов.Типы() Цикл
		
		Тип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[НС];
		НС = НС + 1;
		
		МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
		ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
		Если ЭтоСправочник ИЛИ ЭтоСчет Или ЭтоВидХарактеристик Тогда
			
			ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
			ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
			
			ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
			?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
			
			Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
				
				Если ЕстьКод Тогда
					Если СписокВыбора.НайтиПоЗначению("Код") = Неопределено Тогда
						СписокВыбора.Добавить("Код", "Код");
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьИмя Тогда
					Если СписокВыбора.НайтиПоЗначению("Наименование") = Неопределено Тогда
						СписокВыбора.Добавить("Наименование", "Наименование");
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				Если ЕстьИмя Тогда
					Если СписокВыбора.НайтиПоЗначению("Наименование") = Неопределено Тогда
						СписокВыбора.Добавить("Наименование", "Наименование");
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьКод Тогда
					Если СписокВыбора.НайтиПоЗначению("Код") = Неопределено Тогда
						СписокВыбора.Добавить("Код", "Код");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
				
				Если Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
					И Реквизит.Тип.Типы().Количество() = 1
					и (Реквизит.Тип.Типы()[0] = Тип ("Строка")
					
					ИЛИ
					Реквизит.Тип.Типы()[0] = Тип ("Число"))
				Тогда
					Если СписокВыбора.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
						СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			
		Иначе
		
		КонецЕсли;
		
	//КонецЕсли;
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции // ()

&НаКлиенте
Процедура СопоставленияПолейПередНачаломИзменения(Элемент, Отказ)
	Возврат;
	ТекущиеДанные = Элементы.СопоставленияПолей.ТекущиеДанные;
	
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.ИмяПоля1С) Тогда
	//	Возврат;
	//КонецЕСли;
	
	РежимЗагрузкиИскать = ТекущиеДанные.РежимЗагрузки = "Искать";
	ТекНомерСтроки = Элементы.СопоставленияПолей.ТекущаяСтрока;
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекНомерСтроки);;
	Элементы.СопоставленияПолейИскатьПо.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейИскатьПо.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Элементы.СопоставленияПолейИскатьПо.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	////////////////////////////////////////////////////////////////
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекНомерСтроки);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоВладельцу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоВладельцу) = Неопределено Тогда
		СписокВыбора.Вставить(0,ТекущиеДанные.СвязьПоВладельцу,ТекущиеДанные.СвязьПоВладельцу);
	КонецЕсли;
	Элементы.СопоставленияПолейСвязьПоВладельцу.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейСвязьПоВладельцу.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Элементы.СопоставленияПолейСвязьПоВладельцу.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
КонецПроцедуры

Функция ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизитИлиНомерстроки) Экспорт
	
	Если ТИпЗнч(ЗагружаемыйРеквизитИлиНомерстроки) = ТИп("Число") Тогда
		ЗагружаемыйРеквизит = СопоставленияПолей.НайтиПоИдентификатору(ЗагружаемыйРеквизитИлиНомерстроки);
	Иначе
		ЗагружаемыйРеквизит = ЗагружаемыйРеквизитИлиНомерстроки;
	КонецЕсли;
	
	ЕстьТипСамогоОбъекта = Ложь;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если объект.ТипТаблицы1С = "" Тогда
		ОписаниеТиповСправочника = Неопределено;
	ИначеЕсли Объект.ТипТаблицы1С <> "РегистрыСведений" Тогда
		ОписаниеТиповСправочника = Тип(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	Иначе
		ОписаниеТиповСправочника = Неопределено;
	КонецЕсли;
	 
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	Для каждого ТипКолонки Из ЗагружаемыйРеквизит.ОписаниеТипов.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
			Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
				ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
				Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
					
					Если ТипВладельца = ОписаниеТиповСправочника Тогда
						
						ЕстьТипСамогоОбъекта = Истина;
						
					КонецЕсли;
					 
					ТипыВладельцев.Вставить(ТипВладельца, Владелец.ПолноеИмя());
					Для каждого КолонкаСвязиПоВладельцу Из ТаблицаЗагружаемыхРеквизитов Цикл
						Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца Тогда
							// Возможно надо будет по всем типам проходить
							СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
	//Если Не ТипыВладельцев.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
		СписокВыбора.Добавить("СправочникСсылка.CMS1C_Переменные","Переменные");
	//КонецЕсли;
	 
	
	Для каждого КлючИЗначение Из ТипыВладельцев Цикл
		СписокВыбора.Добавить(СтрЗаменить(КлючИЗначение.Значение, ".", "Ссылка."), "<"+КлючИЗначение.Значение+">");
	КонецЦикла;
	
	Если ЕстьТипСамогоОбъекта Тогда
		
		СписокВыбора.Вставить(0,"<Создаваемый объект>", "<Создаваемый объект>");
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ()

Функция ПолучитьМетаданныеИсточника() Экспорт
	
	Если Объект.ТипТаблицы1С = "Справочники" Тогда
		//Если Не СсылкаИсточника = Неопределено Тогда
		//	Возврат СсылкаИсточника.Метаданные();
		//КонецЕсли; 
		Возврат Метаданные.Справочники[Объект.Таблица1С];
	//ИначеЕсли РежимЗагрузки = 1 Тогда
	//	Если Не СсылкаИсточника = Неопределено и Не ТабличнаяЧастьИсточника = Неопределено Тогда
	//		Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧастьИсточника);
	//	КонецЕсли; 
	ИначеЕсли Объект.ТипТаблицы1С = "РегистрыСведений" Тогда
		Если Не ПустаяСтрока(Объект.Таблица1С) Тогда
			Возврат Метаданные.РегистрыСведений[Объект.Таблица1С];
		КонецЕсли; 
	ИначеЕсли Объект.ТипТаблицы1С = "ПланыВидовХарактеристик" Тогда
		Возврат Метаданные.ПланыВидовХарактеристик[Объект.Таблица1С];
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции // ()

Процедура УстановитьИсточник()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если МетаданныеИсточника = Неопределено Тогда
		СпискокСохраненныхНастроек = Неопределено;
		ТаблицаЗагружаемыхРеквизитов.Очистить();
	Иначе
		//СпискокСохраненныхНастроек = ВосстановитьЗначение("Обработка  Загрузка данных из табличного документа:" + МетаданныеИсточника.ПолноеИмя());
		//Настройка = ПоучитьНастройкуПоУмолчанию();
		ЗаполнитьНастройкиКолонок(Неопределено);
	КонецЕсли;
	
	//Если РежимЗагрузки = 1 И Не СсылкаИсточника = Неопределено Тогда
	//	ПрошлыйМетаданныеСсылкиИсточника = СсылкаИсточника.Метаданные();
	//КонецЕсли;
	
	//ОбновитьДанныеТабличногоДокумента(ЭлементыФормы.ТабличныйДокумент, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиКолонок(Настройки) Экспорт
	
	ПередЗаписьюОбъекта   = "";
	ПриЗаписиОбъекта      = "";
	ПослеДобавленияСтроки = "";
	
	//Если ТипЗнч(Настройки) = Тип("ТабличныйДокумент") Тогда
	//	
	//	ВерсияОбработки = СокрЛП(Настройки.Область("R1C5").Текст);
	//	Если Не ВерсияОбработки = "1.2" Тогда
	//		ВерсияОбработки = "1.1";
	//		ТекущаяСтрока = 9; //Строка с которой начинается таблица реквизитов
	//	Иначе
	//		ТекущаяСтрока = 11; //Строка с которой начинается таблица реквизитов
	//	КонецЕсли;
	//	
	//	
	//	Попытка
	//		
	//		ТекстВосстановленногоРежимаЗагрузки = СокрЛП(Настройки.Область(?(ВерсияОбработки = "1.1","R1","R2") + "C5").Текст);
	//		Если ТекстВосстановленногоРежимаЗагрузки = "в справочник" или ТекстВосстановленногоРежимаЗагрузки = "" Тогда
	//			ВосстановленныйРежимЗагрузки = 0;
	//		ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в табличную часть" или ТекстВосстановленногоРежимаЗагрузки = "Х" Тогда
	//			ВосстановленныйРежимЗагрузки = 1;
	//		ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в регистр сведений" Тогда
	//			ВосстановленныйРежимЗагрузки = 2;
	//		КонецЕсли;
	//		
	//		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройки.Область(?(ВерсияОбработки = "1.1","R2","R3") + "C5").Текст);
	//		Если МетаданныеОбъекта = Неопределено Тогда
	//			ВызватьИсключение "Неправильный формат файла";
	//		КонецЕсли;
	//		
	//		Если ВосстановленныйРежимЗагрузки = 0 Тогда
	//			ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.ПолноеИмя(),".","Ссылка."))
	//		ИначеЕсли ВосстановленныйРежимЗагрузки = 1 Тогда
	//			ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.Родитель().ПолноеИмя(),".","Ссылка."))
	//		Иначе
	//			ВосстановленныйСсылкаИсточника = Неопределено;
	//		КонецЕсли;
	//		
	//		//СсылкаИсточника = ПустаяСсылка();
	//		СтруктураУмолчаний = Новый Структура;
	//		ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
	//		ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
	//		Пока Не ПустаяСтрока(ИмяРеквизита) Цикл
	//			СтруктураУмолчанияРеквизита = Новый Структура;
	//			СтруктураУмолчанияРеквизита.Вставить("ИмяРеквизита",ИмяРеквизита);
	//			СтруктураУмолчанияРеквизита.Вставить("Пометка",Не ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C1").Текст));
	//			
	//			Типы = Новый Массив;
	//			ОписаниеТиповСтрокой = Настройки.Область(ТекущаяСтрокаОбласти + "C4").Текст;
	//			Для к = 1 По СтрЧислоСтрок(ОписаниеТиповСтрокой)  Цикл
	//				
	//				кс = Неопределено;кч = Неопределено;кд = Неопределено;
	//				МассивЧастейТипа = мРазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(СтрПолучитьСтроку(ОписаниеТиповСтрокой,к ))), ",");
	//				Если МассивЧастейТипа.Количество() = 0 Тогда
	//					Продолжить;
	//				ИначеЕсли Найти(МассивЧастейТипа[0],".") Тогда
	//					Тип = Тип(СтрЗаменить(МассивЧастейТипа[0],".","Ссылка."));
	//				ИначеЕсли МассивЧастейТипа[0] = "строка" Тогда
	//					Тип = Тип("Строка");
	//					Если МассивЧастейТипа.Количество() = 2 Тогда
	//						кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Переменная);
	//					ИначеЕсли МассивЧастейТипа.Количество() = 3 Тогда
	//						кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Фиксированная);
	//					Иначе
	//						кс = Новый КвалификаторыСтроки;
	//					КонецЕсли;
	//				ИначеЕсли МассивЧастейТипа[0] = "число" Тогда
	//					Тип = Тип("Число");
	//					кч = Новый КвалификаторыЧисла(мПривестиКЧислу(МассивЧастейТипа[1]),мПривестиКЧислу(МассивЧастейТипа[2]),?(МассивЧастейТипа.Количество() = 4, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
	//				ИначеЕсли МассивЧастейТипа[0] = "булево" Тогда
	//					Тип = Тип("Булево");
	//				ИначеЕсли МассивЧастейТипа[0] = "дата" Тогда
	//					Тип = Тип("Дата");
	//					кд = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	//				ИначеЕсли МассивЧастейТипа[0] = "время" Тогда
	//					Тип = Тип("Дата");
	//					кд = Новый КвалификаторыДаты(ЧастиДаты.Время);
	//				ИначеЕсли МассивЧастейТипа[0] = "дата и время" Тогда
	//					Тип = Тип("Дата");
	//					кд = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	//				Иначе
	//					Продолжить;
	//				КонецЕсли;
	//				Типы.Добавить(Тип);
	//			КонецЦикла;
	//			ОписаниеТипов = Новый ОписаниеТипов(Типы, кч, кс, кд);
	//			СтруктураУмолчанияРеквизита.Вставить("ОписаниеТипов",ОписаниеТипов);
	//			
	//			РежимЗагрузкиРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C5").Текст;
	//			
	//			СтруктураУмолчанияРеквизита.Вставить("РежимЗагрузки",РежимЗагрузкиРеквизита);
	//			
	//			ЗначениеПоУмолчанию = Настройки.Область(ТекущаяСтрокаОбласти + "C6").Текст;
	//			СтруктураУмолчанияРеквизита.Вставить("ЗначениеПоУмолчанию",?(ПустаяСтрока(ЗначениеПоУмолчанию), ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(ЗначениеПоУмолчанию)));
	//			
	//			Если РежимЗагрузкиРеквизита = "Вычислять" Тогда
	//				СтруктураУмолчанияРеквизита.Вставить("Выражение",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
	//			Иначе
	//				СтруктураУмолчанияРеквизита.Вставить("ИскатьПо",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
	//				
	//				СвязьПоВладельцу   = Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст;
	//				СтруктураУмолчанияРеквизита.Вставить("СвязьПоВладельцу",?(Лев(СвязьПоВладельцу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоВладельцу), СвязьПоВладельцу));
	//				
	//				СвязьПоТипу        = Настройки.Область(ТекущаяСтрокаОбласти + "C9").Текст;
	//				СтруктураУмолчанияРеквизита.Вставить("СвязьПоТипу",?(Лев(СвязьПоТипу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоТипу), СвязьПоТипу));
	//				
	//				СтруктураУмолчанияРеквизита.Вставить("ЭлементСвязиПоТипу",мПривестиКЧислу(Настройки.Область(ТекущаяСтрокаОбласти + "C10").Текст));
	//			КонецЕсли;
	//			
	//			
	//			СтруктураУмолчаний.Вставить(ИмяРеквизита,СтруктураУмолчанияРеквизита);
	//			ТекущаяСтрока = ТекущаяСтрока + 1;
	//			ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
	//			ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
	//			
	//		КонецЦикла;
	//		
	//	Исключение
	//		мСообщитьОбОшибке(ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	//	Если МетаданныеИсточника = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//
	//	РежимЗагрузки   = ВосстановленныйРежимЗагрузки;
	//	СсылкаИсточника = ВосстановленныйСсылкаИсточника;
	//	ТабличнаяЧастьИсточника = ?(ВосстановленныйРежимЗагрузки,МетаданныеОбъекта.Имя,Неопределено);
	//	НеСоздаватьНовыхЭлементов                 = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R4") + "C5").Текст);
	//	ЗамещатьСуществующиеЗаписи = ?(ВерсияОбработки = "1.1",Ложь, Не ПустаяСтрока(Настройки.Область("R5C5").Текст));
	//	РучнаяНумерацияКолонокТабличногоДокумента = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R4","R6") + "C5").Текст);
	//	ПерваяСтрокаДанныхТабличногоДокумента     = мПривестиКЧислу(Настройки.Область(?(ВерсияОбработки = "1.1","R5","R7") + "C5").Текст);
	//	
	//	ПередЗаписьюОбъекта = Настройки.Область("R" + Формат(ТекущаяСтрока + 2, "ЧГ=") + "C3").Текст;
	//	ПриЗаписиОбъекта    = Настройки.Область("R" + Формат(ТекущаяСтрока + 3, "ЧГ=") + "C3").Текст;
	//	
	//	Если РежимЗагрузки Тогда
	//		ПослеДобавленияСтроки = Настройки.Область("R" + Формат(ТекущаяСтрока + 4, "ЧГ=") + "C3").Текст;
	//	КонецЕсли;
	//	
	//	ТекущаяСтрока = ТекущаяСтрока + 1;
	//	
	//КонецЕсли;
	Оформление = Неопределено;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	ТаблицаЗагружаемыхРеквизитов.Очистить();
	
	Если Объект.ТипТаблицы1С = "Справочники" Тогда
		ЗаполнитьНастройкиКолонокСправочника();
	ИначеЕсли Объект.ТипТаблицы1С = "ПланыВидовХарактеристик" Тогда
		ЗаполнитьНастройкиКолонокПВХ();
	//ИначеЕсли РежимЗагрузки = 1 Тогда
	//	ЗаполнитьНастройкиКолонокТабличнойЧасти();
	//	
	//	ОсновнаяФормаОбъекта = МетаданныеИсточника.Родитель().ОсновнаяФормаОбъекта;
	//	Если Не ОсновнаяФормаОбъекта = Неопределено и СтруктураУмолчаний = Неопределено Тогда
	//		
	//		ИмяОсновнойФормы = ОсновнаяФормаОбъекта.Имя;
	//		Если Не ПустаяСтрока(ИмяОсновнойФормы) Тогда
	//				
	//			Менеджер = ПолучитьМенеджераПоТипу(ТипЗНЧ(Новый(СтрЗаменить(МетаданныеИсточника.Родитель().ПолноеИмя(),".","Ссылка."))));
	//			Форма = Менеджер.ПолучитьФорму(ИмяОсновнойФормы);
	//			Для каждого ЭлементФормы Из Форма.ЭлементыФормы Цикл
	//					
	//				Если ТипЗНЧ(ЭлементФормы) = Тип("ТабличноеПоле") И ЭлементФормы.Данные = МетаданныеИсточника.Имя Тогда
	//					Оформление = ЭлементФормы;
	//					Прервать;
	//				КонецЕсли;
	//					
	//			КонецЦикла;
	//				
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	ИначеЕсли Объект.ТипТаблицы1С = "РегистрыСведений" Тогда
		ЗаполнитьНастройкиКолонокРегистраСведений();
	КонецЕсли;
	
	//Если Не Оформление = Неопределено Тогда
	//	НомерКолонкиОформления = 0;
	//	НомерКолонки = 1;
	//	Для каждого Колонка Из Оформление.Колонки Цикл
	//		
	//		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.ДанныеФлажка,"ИмяРеквизита");
	//		Если Не ЗагружаемыйРеквизит = Неопределено Тогда
	//			Индекс = ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
	//			Если Индекс >= НомерКолонкиОформления  Тогда
	//				
	//				ЗагружаемыйРеквизит.ШиринаКолонки = 3;
	//				ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
	//				
	//				Если Колонка.Видимость Тогда
	//					ЗагружаемыйРеквизит.Пометка = Колонка.Видимость;
	//					ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
	//					НомерКолонки = НомерКолонки + 1;
	//				КонецЕсли;
	//				
	//				НомерКолонкиОформления = НомерКолонкиОформления + 1;
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.Данные,"ИмяРеквизита");
	//		Если Не ЗагружаемыйРеквизит = Неопределено Тогда
	//			Индекс = ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
	//			Если Индекс >= НомерКолонкиОформления Тогда
	//				ЗагружаемыйРеквизит.ШиринаКолонки = Колонка.Ширина;
	//				ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
	//				Если Колонка.Видимость Тогда
	//					ЗагружаемыйРеквизит.Пометка = Колонка.Видимость;
	//					ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
	//					НомерКолонки = НомерКолонки + 1;
	//				КонецЕсли;
	//				НомерКолонкиОформления = НомерКолонкиОформления + 1;
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//			
	//	КонецЦикла;
	//ИначеЕсли Не СтруктураУмолчаний = Неопределено Тогда
	//	
	//	НомерКолонкиОформления = 0;
	//	НомерКолонки = 1;
	//	Для каждого КлючИЗначение Из СтруктураУмолчаний Цикл
	//		Колонка = КлючИЗначение.Значение;
	//		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.ИмяРеквизита,"ИмяРеквизита");
	//		Если Не ЗагружаемыйРеквизит = Неопределено Тогда
	//			Индекс = ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
	//			Если Индекс >= НомерКолонкиОформления Тогда
	//				ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
	//				
	//				ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
	//				Если Колонка.Пометка Тогда
	//					ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
	//					НомерКолонки = НомерКолонки + 1;
	//				КонецЕсли;
	//				НомерКолонкиОформления = НомерКолонкиОформления + 1;
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//			
	//	КонецЦикла;
		
	//Иначе
	//	 
	//	
	//	НомерКолонки = 1;
	//	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
	//		
	//		ЗагружаемыйРеквизит.Пометка      = Истина;
	//		ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
	//		НомерКолонки = НомерКолонки + 1;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	
КонецПроцедуры // ()


// Заполняет настройки колонок по умолчанию для регистра сведений
//
Процедура ЗаполнитьНастройкиКолонокРегистраСведений()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МетаданныеИсточника.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Период";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Период";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			 
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
	
КонецПроцедуры // ()

Функция ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		
		ВидыСубконто = ПланСчетов.ВидыСубконто;
		
		Если ВидыСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПланСчетов.ВидыСубконто.Тип = ЗагружаемыйРеквизит.ОписаниеТипов Тогда
			
			ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя,ПланыСчетов[ПланСчетов.Имя]);
			
		КонецЕсли;
		 
	КонецЦикла;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для каждого КолонкаСвязиПоТипу Из ТаблицаЗагружаемыхРеквизитов Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
				СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита,КолонкаСвязиПоТипу.ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		СписокВыбора.Добавить("ПланСчетовСсылка."+ПланСчетов.Ключ,"<"+ПланСчетов.Ключ+">");
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции // ()

&НаКлиенте
Процедура СопоставленияПолейСвязьПоВладельцуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			//Менеджер = ПолучитьМенеджераПоТипу(ВыбранноеЗначение);
			
			//ФормаМенеджера = Менеджер.ПолучитьФормуВыбора(, ЭтаФорма, Элемент);
			
			
			
			ФОрмаМенеджера = ПолучитьФОрму(СтрЗаменить(ВыбранноеЗначение,"Ссылка","")+".ФормаВыбора",,Элемент);
			//ФормаМенеджера.НачальноеЗначениеВыбора = Элемент.Значение;
			НовоеЗначение = ФормаМенеджера.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0,НовоеЗначение,НовоеЗначение);
				КонецЕсли;
				//Элемент.Значение = НовоеЗначение;
				//ВЫбранноеЗначение = НовоеЗначение;
				Элементы.СопоставленияПолей.ТекущиеДанные.СвязьПоВладельцу = НовоеЗначение;
				
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
		Иначе
			//Элемент.Значение = ВыбранноеЗначение;
			Элементы.СопоставленияПолей.ТекущиеДанные.СвязьПоВладельцу = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМенеджераПоТипу(Знач ТипЗначения) Экспорт
	ТИпЗначения = Тип(ТипЗначения);
	
	МенеджерыОбъектовМетаданных = Новый Структура("Справочники, Перечисления, ПланыВидовХарактеристик,",
	Справочники,
	Перечисления,
	ПланыВидовХарактеристик);
	
	Если Не ТипЗначения = Неопределено Тогда
		//Менеджер = КешМенеджеровПоТипу[ТипЗначения];
		//Если Менеджер = Неопределено Тогда
			Для Каждого МенеджерОбъектаМетаданных Из МенеджерыОбъектовМетаданных Цикл
				Если МенеджерОбъектаМетаданных.Значение.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
					Менеджер = МенеджерОбъектаМетаданных.Значение[Метаданные.НайтиПоТипу(ТипЗначения).Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
			//КешМенеджеровПоТипу.Вставить(ТипЗначения, Менеджер);
		//КонецЕсли;
		Возврат Менеджер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СопоставленияПолейОписаниеТиповПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СопоставленияПолей.ТекущиеДанные;
	
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Значение);
	
	ТекСтрока = Элементы.СопоставленияПолей.ТекущаяСтрока;
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекСтрока);
	ТекущиеДанные.ИскатьПо = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	Элементы.СопоставленияПолейИскатьПо.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейИскатьПо.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Элементы.СопоставленияПолейИскатьПо.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекСтрока);
	ТекущиеДанные.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	Элементы.СопоставленияПолейСвязьПоВладельцу.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейСвязьПоВладельцу.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Элементы.СопоставленияПолейСвязьПоВладельцу.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоТипу(ТекСтрока);
	ТекущиеДанные.СвязьПоТипу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	Элементы.СопоставленияПолейСвязьПоТипу.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейСвязьПоТипу.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Элементы.СопоставленияПолейСвязьПоТипу.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	Элементы.СопоставленияПолейЗначение.КнопкаВыбора = Не ТипЗНЧ(ТекущиеДанные.Значение) = Тип("Строка");
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейПриАктивизацииСтроки(Элемент)
	Если Объект.ВместоТаблицы1СТаблицаСайта Тогда
		Возврат;
	КонецЕсли;
	
	
	
	ТекущиеДанные = Элементы.СопоставленияПолей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕСли;
	
	РежимЗагрузкиИскать = ТекущиеДанные.РежимЗагрузки = "Искать";
	ТекНомерСтроки = Элементы.СопоставленияПолей.ТекущаяСтрока;
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекНомерСтроки);;
	Элементы.СопоставленияПолейИскатьПо.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейИскатьПо.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Элементы.СопоставленияПолейИскатьПо.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	////////////////////////////////////////////////////////////////
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекНомерСтроки);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоВладельцу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоВладельцу) = Неопределено Тогда
		СписокВыбора.Вставить(0,ТекущиеДанные.СвязьПоВладельцу,ТекущиеДанные.СвязьПоВладельцу);
	КонецЕсли;
	Элементы.СопоставленияПолейСвязьПоВладельцу.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейСвязьПоВладельцу.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Элементы.СопоставленияПолейСвязьПоВладельцу.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	Элементы.СопоставленияПолейВыражение.ТолькоПросмотр = ТекущиеДанные.РежимЗагрузки <> "Вычислять";
	////////////////////////////////////////////////////////////////
	ТекСтрока = Элементы.СопоставленияПолей.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.КолонкаСайта) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СопоставленияПолейКолонкаСайта.СписокВыбора.Очистить();
	Элементы.СопоставленияПолейКолонкаСайта.СписокВыбора.Добавить("");
	Для Каждого стрТз из СопоставленияПолей Цикл
		Если Не ЗначениеЗаполнено(СокрЛП(СтрТз.КолонкаСайта)) Тогда
			Продолжить;
		КонецЕсли;
		Элементы.СопоставленияПолейКолонкаСайта.СписокВыбора.Добавить(СтрТз.КолонкаСайта);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикиСобытийЗначениеОбработчикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ОбработчикиСобытий.ТекущиеДанные.ЗначениеОбработчика = РедактироватьКодОбработчика(Элементы.ОбработчикиСобытий.ТекущиеДанные.ЗначениеОбработчика,Элементы.ОбработчикиСобытий.ТекущиеДанные.ИмяОбработчика);
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейНеобходимоСверятьВыгрузкаОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтредактироватьОтбор(СтандартнаяОбработка,"НеобходимоСверятьВыгрузкаОтбор");
КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьОтбор(СтандартнаяОбработка,ИмяРеквизита)
	СтандартнаяОбработка = Ложь;
	//Ф = ПолучитьФОрму("Справочник.CMS1C_СопоставленияТаблиц.Форма.ФормаРедактированияОтбора");
	//Ф.открыть();
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Элементы.СопоставленияПолей.ТекущиеДанные[ИмяРеквизита]);
	
	АдресХранилищаНастройкиКомпоновщика = ОткрытьФормуМодально("ОбщаяФорма.CMS1C_УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|НеНастраиватьПараметры,
			|УникальныйИдентификатор,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|Заголовок",
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			"Редактирование отборов"));
			
	Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
		ПрименитьИзмененияКСхемеКомпоновкиДанных(Адреса.СхемаКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика,Элементы.СопоставленияПолей.ТекущаяСтрока,ИмяРеквизита);
	КонецЕсли;
КонецПРоцедуры


Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Отбор)
	Схема = Справочники.CMS1C_СопоставленияТаблиц.ПолучитьМакет("Макет");
    Настройки = Схема.ВариантыНастроек.Основной.Настройки;
    //АдресСхемы = ПоместитьВоВременноеХранилище(Схема);
	//Настройки.Отбор
	
	Для Каждого СтрокаОтбора из Отбор.Элементы Цикл
		ДобавитьОтбор(СтрокаОтбора,Настройки,Неопределено);
	КонецЦикла;	
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	//Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) ИЛИ ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда
	//	СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
	//	СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	//Иначе
	//	СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	//КонецЕсли;
	//
	//Если СхемаКомпоновкиДанных = Неопределено Тогда
	//	СхемаКомпоновкиДанных = Справочники.ВидыЦен.СформироватьНовуюСхемуКомпоновкиДанных();
	//КонецЕсли;
	Уник = Неопределено;
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, Уник);
	
	// Настройки
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Уник);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных,ИдентификаторСтроки,ИмяРеквизитаОтбора)
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
	ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Исключение
	КонецПопытки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	СтрокаСопоставления = СопоставленияПолей.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
		СтрокаСопоставления[ИмяРеквизитаОтбора] = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных).Отбор;
		//СтрокаСопоставления[ИмяРеквизитаОтбора] = Схема.НастройкиПоУмолчанию.Отбор;
	Иначе
		//ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	//ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
КонецФункции

&НаСервере
Функция ПрименитьИзмененияКСхемеКомпоновкиДанных_ДополнительныеСвойства(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных,ИдентификаторСтроки,ИмяРеквизитаОтбора)
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
	ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Исключение
	КонецПопытки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	СтрокаДополнительныеСвойства = ОБъект.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
		СтрокаДополнительныеСвойства[ИмяРеквизитаОтбора] = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных).Отбор;
		//СтрокаСопоставления[ИмяРеквизитаОтбора] = Схема.НастройкиПоУмолчанию.Отбор;
	Иначе
		//ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	//ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
КонецФункции

Процедура ДобавитьОтбор(СтрокаОтбора,НастройкаИлиГруппа,ПодчиненныйЭлемент)
	Если ТипЗнч(СтрокаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Если ПодчиненныйЭлемент <> Неопределено Тогда
			РодительскаяГруппа = ПодчиненныйЭлемент;
		ИначеЕсли ТипЗнч(НастройкаИлиГруппа) = Тип("НастройкиКомпоновкиДанных") Тогда
			РодительскаяГруппа = НастройкаИлиГруппа.Отбор;
		Иначе
			РодительскаяГруппа = НастройкаИлиГруппа;
		КонецЕсли;
		
		ДобСтрОтбора = РодительскаяГруппа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ДобСтрОтбора,СтрокаОтбора);
		
		Для Каждого СтрТз из СтрокаОтбора.Элементы Цикл
			ДобавитьОтбор(СтрТз,ДобСтрОтбора,ДобСтрОтбора);
		КонецЦикла;
	Иначе
		Если ТипЗнч(НастройкаИлиГруппа) = Тип("НастройкиКомпоновкиДанных") Тогда
			ДобСтрОтбора = НастройкаИлиГруппа.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			ДобСтрОтбора = НастройкаИлиГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДобСтрОтбора,СтрокаОтбора);
	КонецЕсли;
КонецПроцедуры

Функция ЗаполнитьОтборНаФормеИзОбъекта(СтрокаФормы,СтрокаОбъекта,ИмяПоля)
	Настройка = СтрокаОбъекта[ИмяПоля+"Хранилище"].Получить();
	Если Настройка = Неопределено Тогда
		Схема = Справочники.CMS1C_СопоставленияТаблиц.ПолучитьМакет("Макет");
		Настройки = Схема.ВариантыНастроек.Основной.Настройки;    
		АдресСхемы = ПоместитьВоВременноеХранилище(Схема); 
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		СтрокаФормы[ИмяПоля] = КомпоновщикНастроек.Настройки.Отбор;
	Иначе
		СтрокаФормы[ИмяПоля] = Настройка.Отбор;
	КОнецесли;	
КонецФункции

&НаКлиенте
Процедура СопоставленияПолейНеПодставлятьПриДобавленииОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтредактироватьОтбор(СтандартнаяОбработка,"НеПодставлятьПриДобавленииОтбор");
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейНеПодставлятьПриИзмененииОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтредактироватьОтбор(СтандартнаяОбработка,"НеПодставлятьПриИзмененииОтбор");
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейНеобходимоСверятьЗагрузкаОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтредактироватьОтбор(СтандартнаяОбработка,"НеобходимоСверятьЗагрузкаОтбор");
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейНеПодставлятьПриДобавленииВ1СОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтредактироватьОтбор(СтандартнаяОбработка,"НеПодставлятьПриДобавленииВ1СОтбор");
КонецПроцедуры

&НаКлиенте
Процедура СопоставленияПолейНеПодставлятьПриИзмененииВ1СОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтредактироватьОтбор(СтандартнаяОбработка,"НеПодставлятьПриИзмененииВ1СОтбор");
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикиСобытийЗначениеОбработчикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.ОбработчикиСобытий.ТекущиеДанные;
	сп = Элементы.ОбработчикиСобытийЗначениеОбработчика.СписокВыбора;
	сп.Очистить();
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекСтрока.ИмяОбработчика = "ПередЗаписьюЭлементаИлиЗаписи1СЗагрузка" Тогда
		сп.Добавить("ЗагрузитьНоменклатуру");
		сп.Добавить("ЗагрузитьКомбинацииНоменклатуры");
		сп.Добавить("ЗагрузитьКатегории");
		сп.Добавить("ЗагрузитьИзображения");
	ИначеЕсли ТекСтрока.ИмяОбработчика = "ПередВыполнениемЭтапа" Тогда
		сп.Добавить("ДобавитьКолонки");
	ИНачеЕсли ТекСтрока.ИмяОбработчика = "ПослеВыполненияЗапросаСайт" Тогда
		сп.Добавить("ОтсортироватьПоУровню");
	ИначеЕсли ТекСтрока.ИмяОбработчика = "ПередВыполнениемСинхронизацииТаблиц" Тогда
		сп.Добавить("ПолучитьТаблицыФайловНаСайте");
		сп.Добавить("УстановитьФильтрДляПовторнойВыгрузкиТоваровСНовымиОсновнымиВариантамиИИзображениями");
	ИначеЕсли ТекСтрока.ИмяОбработчика = "ПослеВыполненияПакетаЗапросовНаИзмененияТаблицНаСайтеВыгрузка" Тогда
		сп.Добавить("ВыгрузитьИзображения");
	ИначеЕсли ТекСтрока.ИмяОбработчика = "ПослеВыполненияСтандартнойЗагрузки" Тогда
		сп.Добавить("ПроставитьОсновнуюКатегориюИРазместитьНоменклатуру");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПереключатели()
	Если Объект.ВместоТаблицы1СТаблицаСайта Тогда
		Переключатель1ССайт = 1;
	Иначе
		Переключатель1ССайт = 0;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура Переключатель1ССайтПриИзменении(Элемент)
	ЗаполнитьДанныеИзПереключателей();
КонецПроцедуры

Процедура ЗаполнитьДанныеИзПереключателей()
	Если Переключатель1ССайт = 0 Тогда
		Объект.ВместоТаблицы1СТаблицаСайта = ЛОжь;
	Иначе
		Объект.ВместоТаблицы1СТаблицаСайта = Истина;
	Конецесли;
	ЭтаФорма.Модифицированность = Истина;
	УстановитьВидимость();
КонецПроцедуры

Процедура УстановитьВидимость()
	Если НЕ Объект.ВместоТаблицы1СТаблицаСайта Тогда
		Элементы.Страницы1С.ТекущаяСтраница = Элементы.Страница1С1С;
		Элементы.Поля1СПолеСайта.Видимость = Ложь;
		Элементы.Поля1СПоле.Видимость = Истина;
	Иначе
		Элементы.Страницы1С.ТекущаяСтраница = Элементы.Страница1ССайт;
		Элементы.Поля1СПолеСайта.Видимость = Истина;
		Элементы.Поля1СПоле.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСвойстваПриЗагрузкеЭлементаВ1СИспользованиеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтредактироватьОтборДополнительныеСвойства(СтандартнаяОбработка,"ИспользованиеОтбор");
КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьОтборДополнительныеСвойства(СтандартнаяОбработка,ИмяРеквизита)
	СтандартнаяОбработка = Ложь;
	//Ф = ПолучитьФОрму("Справочник.CMS1C_СопоставленияТаблиц.Форма.ФормаРедактированияОтбора");
	//Ф.открыть();
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Элементы.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.ТекущиеДанные[ИмяРеквизита]);
	
	АдресХранилищаНастройкиКомпоновщика = ОткрытьФормуМодально("ОбщаяФорма.CMS1C_УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|НеНастраиватьПараметры,
			|УникальныйИдентификатор,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|Заголовок",
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			"Редактирование отборов"));
			
	Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
		ПрименитьИзмененияКСхемеКомпоновкиДанных_ДополнительныеСвойства(Адреса.СхемаКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика,Элементы.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.ТекущаяСтрока,ИмяРеквизита);
	КонецЕсли;
КонецПРоцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Об = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.CMS1C_СопоставленияТаблиц"));
	Для Каждого СтрТз из Об.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С Цикл
		Индекс = ОБ.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С.ИНдекс(СтрТз);
		ТекущаяСтрока = Объект.ДополнительныеСвойстваПриЗагрузкеЭлементаВ1С[Индекс];
		ЗаполнитьОтборНаФормеИзОбъекта(ТекущаяСтрока,СтрТз,"ИспользованиеОтбор");
	КонецЦикла;
КонецПроцедуры

ФУнкция УбратьСпецсимволыИзСтрокиКолонкиСайта(ТекСтрока)
	НовСтрока = СтрЗаменить(ТекСтрока,"-","_");
	Возврат НовСтрока;
 КонецФункции

&НаКлиенте
 Процедура ПриОткрытии(Отказ)
	 //Вставить содержимое обработчика
 КонецПроцедуры

&НаКлиенте
 Процедура СопоставленияПолейЕслиНеНашлиБеремИзПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("");
	Для Каждого стрТз из СопоставленияПолей Цикл
		Если Не ЗначениеЗаполнено(СокрЛП(СтрТз.Колонка1С)) Тогда
			Продолжить;
		КонецЕсли;
		Элемент.СписокВыбора.Добавить(СтрТз.Колонка1С);
	КонецЦикла;
 КонецПроцедуры