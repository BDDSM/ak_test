&НаКлиенте
Перем мПредставлениеПустогоРасписания;

&НаКлиенте
Процедура НастройкаРасписания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания();
	
	ОбновитьПредставлениеРасписания();

КонецПроцедуры


&НаСервере
Функция ИнициализироватьКомпоновкуДанных(Сброс=Ложь)

	
	СхемаКомпоновкиДанных = Обработки.CMS1C_ОбработкаОбмена.ПолучитьМакет("СхемаЗапроса");
		
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);

	НастройкиОтбора.Инициализировать(ИсточникНастроек);

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.НастройкиОтбора.Получить();
	Если ТекНастройки = Неопределено или Сброс или ТипЗнч(ТекНастройки)<>Тип("НастройкиКомпоновкиДанных")Тогда
		НастройкиОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		НастройкиОтбора.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);
	ИнициализироватьКомпоновкуДанных();
	УправлениеДоступностьюВидимостьюСервер();
	//Если ЗначениеЗаполнено(Ссылка) Тогда
	//ИсторияОбменов.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка.Владелец;
	////КонецЕсли; 
	// если РЗ не задано, то расписание = Неопределено и будет создано на клиенте в момент редактирования расписания
	РасписаниеРегламентногоЗадания = Справочники.CMS1C_НастройкиОбменаССайтом.ПолучитьРасписаниеВыполненияОбменаДанными(Объект.Ссылка);
	РасписаниеРегламентногоЗаданияЗагрузкиЗаказов = Справочники.CMS1C_НастройкиОбменаССайтом.ПолучитьРасписаниеВыполненияЗагрузкиЗаказов(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.РежимТолькоДополнять = Истина;
	КонецЕсли;
	
	
	
	//ЗаполнитьПоляДляОграничений();
	ЭтаФОрма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("СистемаУправленияСайтом",Объект.Владелец.СистемаУправленияСайтом));
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюВидимостьюСервер()
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Элементы.НастройкаРегламентныхЗаданий.Доступность = ТекОбъект.ИспользоватьРегламентныеЗадания;
	
	Элементы.НастройкаРасписанияЗагрузкиЗаказов.Доступность = Объект.ИспользоватьРегламентныеЗаданияЗагрузкиЗаказов;
	
	//Элементы.СтатусЗаказаВОбработке.Доступность = ТекОбъект.МенятьСтатусЗагруженногоЗаказа;
	
	//Элементы.НастройкиКонтаргентовОбъединяющая.Доступность = ТекОбъект.СоздаватьКонтрагентов;
КонецПроцедуры // УправлениеВидимостьюСервер()

&НаКлиенте
Процедура УправлениеДоступностьюВидимостьюКлиент()
	
	
	Элементы.НастройкаРегламентныхЗаданий.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	
	Элементы.НастройкаРасписанияЗагрузкиЗаказов.Доступность = Объект.ИспользоватьРегламентныеЗаданияЗагрузкиЗаказов;
	
	
	
	//Элементы.СтатусЗаказаВОбработке.Доступность = Объект.МенятьСтатусЗагруженногоЗаказа;
	
	//Элементы.НастройкиКонтаргентовОбъединяющая.Доступность = Объект.СоздаватьКонтрагентов;
	
	
	
КонецПроцедуры // УправлениеВидимостьюСервер()


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.НастройкиОтбора = Новый ХранилищеЗначения(НастройкиОтбора.Настройки, Новый СжатиеДанных(9));
	
	Справочники.CMS1C_НастройкиОбменаССайтом.ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, ТекущийОбъект);
	Справочники.CMS1C_НастройкиОбменаССайтом.ОбновитьДанныеРегламентногоЗаданияЗагрузкиЗаказов(Отказ, РасписаниеРегламентногоЗаданияЗагрузкиЗаказов, ТекущийОбъект);
	
КонецПроцедуры

 // События ПриИзменении
&НаКлиенте
//Процедура HTTPОбменПроксиИспользованиеПриИзменении(Элемент)
//	УправлениеДоступностьюВидимостьюКлиент();
//КонецПроцедуры


//&НаКлиенте
//Процедура ЗагрузкаПриИзменении(Элемент)
//	УправлениеДоступностьюВидимостьюКлиент();
//КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	УправлениеДоступностьюВидимостьюКлиент();
КонецПроцедуры


&НаКлиенте
//Процедура МенятьСтатусЗагруженногоЗаказаПриИзменении(Элемент)
//	УправлениеДоступностьюВидимостьюКлиент();
//КонецПроцедуры


&НаКлиенте
//Процедура СоздаватьКонтрагентовПриИзменении(Элемент)
//	УправлениеДоступностьюВидимостьюКлиент();
//КонецПроцедуры


&НаКлиенте
//Процедура УведомлятьПоПочтеПриИзменении(Элемент)
//	УправлениеДоступностьюВидимостьюКлиент();
//КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКаталогПриИзменении(Элемент)
	УправлениеДоступностьюВидимостьюКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиОтбора(Команда)
	ИнициализироватьКомпоновкуДанных(Истина);
КонецПроцедуры

//Конец События ПриИзменении

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	// если расписание не инициализировано в форме на сервере, то создаем новое
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	// открываем диалог для редактирования Расписания
	Если Диалог.ОткрытьМодально() Тогда
		
		РасписаниеРегламентногоЗадания = Диалог.Расписание;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(объект.РегламентноеЗадание) Тогда
		Объект.РегламентноеЗадание = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗагрузкиЗаказов()
	
	// если расписание не инициализировано в форме на сервере, то создаем новое
	Если РасписаниеРегламентногоЗаданияЗагрузкиЗаказов = Неопределено Тогда
		
		РасписаниеРегламентногоЗаданияЗагрузкиЗаказов = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияЗагрузкиЗаказов);
	
	// открываем диалог для редактирования Расписания
	Если Диалог.ОткрытьМодально() Тогда
		
		РасписаниеРегламентногоЗаданияЗагрузкиЗаказов = Диалог.Расписание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастройкаРасписания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписанияЗагрузкиЗаказов()
	
	ПредставлениеРасписанияЗагрузкиЗаказов = Строка(РасписаниеРегламентногоЗаданияЗагрузкиЗаказов);
	
	Если ПредставлениеРасписанияЗагрузкиЗаказов = мПредставлениеПустогоРасписания Тогда
		
		ПредставлениеРасписанияЗагрузкиЗаказов = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастройкаРасписанияЗагрузкиЗаказов.Заголовок = ПредставлениеРасписанияЗагрузкиЗаказов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	CMS1C_ПроцедурыОбменаССайтомКлиентУправляемоеПриложение.УстановитьФормуДляНужнойCMS(ЭтаФорма,ОБъект.Владелец);
	УстановитьВидимостьЭлементов();
	мПредставлениеПустогоРасписания = Строка(Новый РасписаниеРегламентногоЗадания);
	
	ОбновитьПредставлениеРасписания();
	ОбновитьПредставлениеРасписанияЗагрузкиЗаказов();
	//ПодключитьОбработчикОжидания("ОбновитьСостояние",1);
	Если Объект.Ссылка.Пустая() Тогда
		Объект.РежимТолькоДополнять = Истина;
		Объект.ПомечатьНаУдалениеЛишниеКатегории = 1;
		Объект.ОставлятьСкрыватьПерекладыватьПомеченныеУдалять = 1;
	КонецЕсли;
	УстановитьЗначенияПереключателей();
	//ЭтаФОрма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("СистемаУправленияСайтом",Объект.Владелец.СистемаУправленияСайтом));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРасписанияЗагрузкиЗаказов(Команда)
		
	РедактированиеРасписанияРегламентногоЗаданияЗагрузкиЗаказов();
	
	ОбновитьПредставлениеРасписанияЗагрузкиЗаказов();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияЗагрузкиЗаказовПриИзменении(Элемент)
	УправлениеДоступностьюВидимостьюКлиент();	
КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьМаленькуюМарку(Команда)
//	
//	Перем ВыбранноеИмя,АдресВременногоХранилища;
//	
//	
//	Если ПоместитьФайл(АдресВременногоХранилища, "", ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
//		ДлинаНаименования = СтрДлина(ВыбранноеИмя);
//		ИмяФайла = "";
//		
//		Пока ДлинаНаименования > 1 Цикл 
//			БукваСимвол = Сред(ВыбранноеИмя,ДлинаНаименования,1);
//			Если БукваСимвол = "\" Тогда 
//				Прервать;					
//			КонецЕсли;
//			ИмяФайла =БукваСимвол + ИмяФайла;
//			ДлинаНаименования = ДлинаНаименования - 1; 
//		КонецЦикла;	
//		
//		ФорматКартинкиРазрешен = ПолучитьКартинкуИзВременногоХранилища(АдресВременногоХранилища);
//		
//		Если НЕ ФорматКартинкиРазрешен Тогда
//			Сообщить("Неверный формат картинки (только GIF, JPEG, PNG)");
//			Возврат;				
//		КонецЕсли;
//		
//		Попытка
//			УстановитьМаленькуюМаркуНаСервере(АдресВременногоХранилища);
//			
//			Предупреждение("Маленькая марка установлена!");
//		Исключение
//			Сообщить(ОписаниеОшибки());	
//		КонецПопытки;
//		
//	КонецЕсли;	// Вставить содержимое обработчика.
//	
//КонецПроцедуры

&НаСервере
Процедура УстановитьМаленькуюМаркуНаСервере(АдресВременногоХранилища)
	
	НашОбъект = РеквизитФормыВЗначение("Объект");
	НашОбъект.WatermarkСред = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилища),Новый СжатиеДанных());
	//НашОбъект.WatermarkaMid = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	НашОбъект.Записать();
	ЗначениеВДанныеФормы(НашОбъект,Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
//Процедура УстановитьБольшуюМарку(Команда)
//	
//	Перем ВыбранноеИмя,АдресВременногоХранилища;
//	
//	
//	Если ПоместитьФайл(АдресВременногоХранилища, "", ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
//		ДлинаНаименования = СтрДлина(ВыбранноеИмя);
//		ИмяФайла = "";
//		
//		Пока ДлинаНаименования > 1 Цикл 
//			БукваСимвол = Сред(ВыбранноеИмя,ДлинаНаименования,1);
//			Если БукваСимвол = "\" Тогда 
//				Прервать;					
//			КонецЕсли;
//			ИмяФайла =БукваСимвол + ИмяФайла;
//			ДлинаНаименования = ДлинаНаименования - 1; 
//		КонецЦикла;	
//		
//		ФорматКартинкиРазрешен = ПолучитьКартинкуИзВременногоХранилища(АдресВременногоХранилища);
//		
//		Если НЕ ФорматКартинкиРазрешен Тогда
//			Сообщить("Неверный формат картинки (только GIF, JPEG, PNG)");
//			Возврат;				
//		КонецЕсли;
//		Попытка
//		УстановитьБольшуюМаркуНаСервере(АдресВременногоХранилища);
//		
//		Предупреждение("Большая марка установлена!");
//		Исключение
//		Сообщить(ОписаниеОшибки());	
//		КонецПопытки;
//	КонецЕсли;	// Вставить содержимое обработчика.
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьБольшуюМаркуНаСервере(АдресВременногоХранилища)
//	
//	НашОбъект = РеквизитФормыВЗначение("Объект");
//	НашОбъект.WatermarkaBig = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилища),Новый СжатиеДанных());
//	НашОбъект.Записать();
//	ЗначениеВДанныеФормы(НашОбъект,Объект);
//	Модифицированность = Истина;
//	
//КонецПроцедуры

//&НаСервере
//Функция ПолучитьКартинкуИзВременногоХранилища(АдресВременногоХранилища)
//	
//	ДвоичныеДанныеЗагружаемойКартинки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
//	
//	ВыбранноеИзображение = Новый Картинка(ДвоичныеДанныеЗагружаемойКартинки, Ложь);	
//	
//	ФорматКартинкиРазрешен = Истина;
//	ФорматКартинкиОбъекта = ВыбранноеИзображение.Формат();
//	
//	Если ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат Тогда
//		ФорматКартинкиРазрешен = Ложь;
//	Иначе
//		Если НЕ (ФорматКартинкиОбъекта = ФорматКартинки.GIF
//			ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.JPEG
//			ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.PNG) Тогда
//			Попытка
//				ФорматКартинкиОбъекта   = ВыбранноеИзображение.Преобразовать(ФорматКартинки.JPEG);
//			Исключение
//				Сообщить("Не удалось преобразовать формат картинки в JPEG. Добавляйте только .GIF,.JPEG и .PNG",СтатусСообщения.ОченьВажное);		
//				ФорматКартинкиРазрешен = Ложь;
//			КонецПопытки;
//		КонецЕсли;				
//	КонецЕсли;
//	
//	Возврат ФорматКартинкиРазрешен; 
//	
//КонецФункции	

&НаКлиенте
//Процедура ПерезаписатьНоменклатуру(Команда)
//	
//	
//	Если Не ЗначениеЗаполнено(Объект.Ссылка)Тогда
//	возврат;
//	КонецЕсли;
//	
//	Ответ = Вопрос("Значения свойств номенклатуры сайта будут заменены на значения свойств 1С, продолжить?",РежимДиалогаВопрос.ОКОтмена);
//	
//	Если Ответ=КодВозвратаДиалога.Отмена Тогда
//		возврат;
//	КонецЕсли;
//	
//	Состояние("Выполняется перезапись номенклатуры, это может занять продолжительное время...ожидайте пожалуйста.");
//	
//	ПереЗаписатьНоменклатуруНаСервере();
//	
//	Предупреждение("Завершено!");
//		
//КонецПроцедуры

//&НаСервере
//Процедура ПереЗаписатьНоменклатуруНаСервере()
//	
//	НачатьТранзакцию();
//	
//	НаборЗаписей = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.НастройкаСайта.Установить(Объект.Ссылка);
//	НаборЗаписей.Прочитать();	
//	НаборЗаписей.Очистить();
//	НаборЗаписей.Записать();
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	Номенклатура.Ссылка КАК Ссылка,
//				   |	ЕСТЬNULL(Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик, ЛОЖЬ) КАК ИспользованиеХарактеристик,
//				   |	ЕСТЬNULL(Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ) КАК ИспользоватьХарактеристики,
//				   |	Номенклатура.ЭтоГруппа
//				   |ИЗ
//				   |	Справочник.Номенклатура КАК Номенклатура";
//	
//	ВыборкаНоменклатурыВА = Запрос.Выполнить().Выбрать();	
//	Всего = ВыборкаНоменклатурыВА.Количество();
//	Кво=0;
//	ОсталосьСекунд = 0;
//	Начало = ТекущаяДата();
//	Пока ВыборкаНоменклатурыВА.Следующий() Цикл
//		//Сейчас = ТекущаяДата();
//		//Кво = Кво+1;
//		//ПрошлоСекунд = Сейчас - Начало;
//		//СекундНаЕд = ПрошлоСекунд/Кво;
//		//ЕщеНужноМинут = СекундНаЕд * (Всего-Кво)/60;                                                                                               		
//		//Состояние("Создание карточек доп описаний Web Asyst, заполнение свойств....Прошло,мин.:"+Окр(ПрошлоСекунд/60,1)+" Осталось,мин.: "+Окр(ЕщеНужноМинут,1));	
//		Попытка
//			ВыборкаНоменклатурыВА.Ссылка.ПолучитьОбъект().Записать();
//			//Если ВыборкаНоменклатурыВА.ВестиУчетПоХарактеристикам Тогда
//			//	ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(,ВыборкаНоменклатурыВА.Ссылка);
//			//	Пока ВыборкаХарактеристик.Следующий() Цикл
//			//		ВыборкаХарактеристик.Ссылка.ПолучитьОбъект().Записать();
//			//	КонецЦикла;
//			//КонецЕсли;
//			//
//			//НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
//			//НаборЗаписей.Отбор.Объект.Установить(ВыборкаНоменклатурыВА.Ссылка);
//			//НаборЗаписей.Прочитать();	
//			//НаборЗаписей.Записать();
//			
//		Исключение
//			Сообщить(ОписаниеОшибки());	
//			ОтменитьТранзакцию();
//			возврат;
//		КонецПопытки;
//		
//		Если (Не ВыборкаНоменклатурыВА.ЭтоГруппа)
//			Тогда
//			ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(,ВыборкаНоменклатурыВА.Ссылка);
//			Пока ВыборкаХарактеристик.Следующий() Цикл
//				ОбъектХАрактеристика = ВыборкаХарактеристик.ПолучитьОбъект();
//				Попытка ОбъектХАрактеристика.Записать();
//				Исключение
//					Сообщить(ОписаниеОшибки());	
//					ОтменитьТранзакцию();
//					возврат;
//				КонецПопытки;
//			КонецЦикла;
//		КонецЕсли;	
//		
//	КонецЦикла;
//	
//	ЗафиксироватьТранзакцию();
//	
//КонецПроцедуры

&НаКлиенте
//Процедура ПервоначальнаяЗагрузкаЦенИОстатков(Команда)
//	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
//		
//		Ответ = Вопрос("Для загрузки цен необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
//		
//		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
//			Возврат;
//		КонецЕсли;
//		Попытка
//		ЭтаФорма.Записать();
//		Исключение
//			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
//		КонецПопытки;
//		
//	КонецЕсли; 
//	Предупреждение("Цены будут загружены в валюте указанного типа цен, оприходование остатков будет сделано с учетом наценки в типе цен!");
//	Предупреждение("Остатки будут загружены из таблицы продуктов без разбивки по характеристикам, такой информации сайт не хранит!");
//	
//	ВидЦенДляУстановки = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
//	Если ВвестиЗначение(ВидЦенДляУстановки,"Укажите тип цен для импорта...")= Ложь Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ВидЦенДляУстановки.Пустая() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СтруктураНовыхДокументов = ЗагрузитьУстановкуЦенОстатковИВернутьНезаписанныеОбъекты(ВидЦенДляУстановки);	
//	
//	Если СтруктураНовыхДокументов = Неопределено Тогда
//		Сообщить("Документы не были созданы");
//		Возврат;
//	КонецЕсли;
//	
//	Стр = Новый Структура();
//	Стр.Вставить("Ключ",ДокументУстановкиЦен.Ссылка);
//	Стр.Вставить("Объект",ДокументУстановкиЦен.Ссылка);
//	ф = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта",Стр);
//	//КопироватьДанныеФормы(ДокументУстановкиЦен,ф.Объект);
//	ф.Открыть();
//	
//	
//	Стр = Новый Структура();
//	Стр.Вставить("Ключ",ДокументОприходование.Ссылка);
//	Стр.Вставить("Объект",ДокументОприходование.Ссылка);
//	ф = ПолучитьФорму("Документ.ОприходованиеИзлишковТоваров.ФормаОбъекта",Стр);
//	//КопироватьДанныеФормы(ДокументОприходование,ф.Объект);
//	ф.Открыть();
//	
//КонецПроцедуры

//&НаСервере
//Функция ЗагрузитьУстановкуЦенОстатковИВернутьНезаписанныеОбъекты(ВидЦенДляУстановки)
//	ОбработкаОбмена = Обработки.CMS1C_ОбработкаОбмена.Создать();
//	ОбработкаОбмена.Ссылка = Объект.Ссылка;
//	ЗаполнитьЗначенияСвойств(ОбработкаОбмена,Объект.Ссылка);
//	//Обработка.СохраненныеНастройкиПостроителя = Обработка.СохраненныеНастройкиПостроителя;
//	//Обработка.WatermarkaMid = Обработка.WatermarkaMid;
//	//Обработка.WatermarkaBig = Обработка.WatermarkaBig;
//	
//	
//	
//	СтруктураНовыхДокументов = ОбработкаОбмена.ЗагрузитьУстановкуЦенОстатковИВернутьНезаписанныеОбъекты(ВидЦенДляУстановки);
//	Если СтруктураНовыхДокументов = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	СтруктураНовыхДокументов.УстановкаЦен.Записать();
//	СтруктураНовыхДокументов.Оприходование.Записать();
//	ЗначениеВДанныеФормы(СтруктураНовыхДокументов.УстановкаЦен,ДокументУстановкиЦен);
//	ЗначениеВДанныеФормы(СтруктураНовыхДокументов.Оприходование,ДокументОприходование);
//	
//	Возврат Истина;
//КонецФункции


&НаКлиенте
Процедура ПроверитьМодифицированностьИВыполнитьОбмен(Команда)
	Если ЭтаФорма.Модифицированность
		ИЛИ ОБъект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Для проведения обмена необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ЭтаФорма.Записать();
		Исключение
			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	Состояние("Начат обмен данными с сайтом по настройке "+Объект.Ссылка+" , ожидайте....");
	ВыполнитьКомандуАвтообмена();
КонецПроцедуры

//Процедура ЗаписатьОбработкуВКаталог1С(путьКОбработке)
//	Двоичные = ПолучитьОбщийМакет("СостояниеОбмена");
//	Двоичные.Записать(ПутьКОбработке);
//КонецПроцедуры


ПРоцедура ВыполнитьКомандуАвтообмена()
	CMS1C_ПроцедурыОбменаССайтомСервер.ВызватьАвтообмен(Объект.Ссылка);
КонецПроцедуры


&НаКлиенте
Процедура НастройкиПостроителяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
//Процедура СписокСвойстваПриИзменении(Элемент)
//	этаФорма.Модифицированность = Истина;
//КонецПроцедуры


//&НаКлиенте
//Процедура СтатусыДляЗагрузкиПриИзменении(Элемент)
//	ЭтаФОрма.Модифицированность = Истина;
//КонецПроцедуры


&НаКлиенте
//Процедура ИсторияОбменовПриИзменении(Элемент)
//	ЭтаФорма.Модифицированность = Истина;
//КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьУзелПриИзменении(Элемент)
	//Если ОБъект.ВыгружатьТолькоИзменения Тогда
	//	Сообщ = Новый СообщениеПользователю();
	//	Сообщ.ПутьКДанным="Объект.УзелОбменаТоварами";
	//	Сообщ.Поле = "Элементы.УзелОбменТоварами";
	//	Сообщ.Текст = "Необходимо выбрать узел обмена";
	//	Сообщ.Сообщить();
	//КонецЕсли;
	
	//Если Объект.ВыгружатьТолькоИзменения Тогда
	//	Если ПолучитьЗначениеКонстанты("ИспользоватьОбменССайтами") = Ложь Тогда
	//		Если Вопрос("Не установлена функциональная опция ""Использовать обмен с сайтами. Установить?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
	//			УстановитьЗначениеКонстанты("ИспользоватьОбменССайтами",Истина);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
		
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	Элементы.УзелОбменаТоварами.Доступность = Объект.ВыгружатьТолькоИзменения;
	Элементы.УзелОбмена.Доступность = Объект.ВыгружатьТолькоИзменения;
КонецПроцедуры

&НаКлиенте
//ПРоцедура НамекнутьПОльзователюГдеКАкиеНастройки()
//	Предупреждение("Текущий режим обмена: "+?(Объект.ЗагрузкаДанных,"загрузка данных из сайта в 1С","выгрузка данных из 1с на сайт")+"
//	|Чтобы настроить параметры выгрузки\загрузки, перейдите на закладку ""ДополнительныеНастройки""
//	|Для отбора складов и номенклатуры используется отбор на основной закладке");
//конецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПереключателей()
	Если Объект.ЗагрузкаДанных Тогда
		ПереключательЗагрузкаДанных = 1
	ИначеЕсли ОБъект.УскореннаяВыгрузка Тогда
		ПереключательЗагрузкаДанных = 2;
	Иначе
		ПереключательЗагрузкаДанных = 0;
	КонецЕсли;
	
	Если Объект.НеСопоставлятьКатегорииСайтаСПапками1С Тогда
		ПереключательСинхронизацияПапокИКатегорий = 1;
	Иначе
		ПереключательСинхронизацияПапокИКатегорий = 0;
	КонецЕСли;
	
	Если Объект.РежимТолькоДополнять Тогда
		ПереключательРежимТолькоДополнять = 1;
	Иначе
		ПереключательРежимТолькоДополнять = 0;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	УстановитьЗначениеГалочекИзПереключателей();
КонецПроцедуры

ПРоцедура УстановитьЗначениеГалочекИзПереключателей()
	Если ПереключательЗагрузкаДанных = 1 И Объект.ЗагрузкаДанных =Ложь Тогда
		Объект.ЗагрузкаДанных = Истина;
	ИначеЕсли ПереключательЗагрузкаДанных <> 1 И ОБъект.ЗагрузкаДанных = Истина ТОгда
		Объект.ЗагрузкаДанных = ложь;
	КонецЕсли;
	
	Если ПереключательЗагрузкаДанных = 2 И Объект.УскореннаяВыгрузка = Ложь Тогда
		Объект.УскореннаяВыгрузка = Истина;
	ИначеЕСли ПереключательЗагрузкаДанных <> 2 И Объект.УскореннаяВыгрузка Тогда
		Объект.УскореннаяВыгрузка = Ложь;
	КонецЕсли;
	
	
	Если ПереключательСинхронизацияПапокИКатегорий = 1 И Объект.НеСопоставлятьКатегорииСайтаСПапками1С =Ложь Тогда
		Объект.НеСопоставлятьКатегорииСайтаСПапками1С = Истина;
	ИначеЕсли ПереключательСинхронизацияПапокИКатегорий = 0 И ОБъект.НеСопоставлятьКатегорииСайтаСПапками1С = Истина ТОгда
		Объект.НеСопоставлятьКатегорииСайтаСПапками1С = ложь;
	КонецЕсли;
	
	Если ПереключательРежимТолькоДополнять = 1 И Объект.РежимТолькоДополнять =Ложь Тогда
		Объект.РежимТолькоДополнять = Истина;
	ИначеЕсли ПереключательРежимТолькоДополнять = 0 И ОБъект.РежимТолькоДополнять = Истина ТОгда
		Объект.РежимТолькоДополнять = ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
//Процедура ПереключательПоискПоГУИДПриИзменении(Элемент)
//	ЭтаФорма.Модифицированность = Истина;
//КонецПроцедуры

&НаКлиенте
Процедура ПереключательСинхронизацияПапокИКатегорийПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимТолькоДополнятьПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
//Процедура ПереключательОсновнойРежимРедактированияОписанияПриИзменении(Элемент)
//	ЭтаФорма.Модифицированность = Истина;
//КонецПроцедуры


&НаКлиенте
Процедура СоздатьPHPФайлы(Команда)
	Если ЭтаФорма.Модифицированность
		ИЛИ Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Для проверки подключения необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ЭтаФорма.Записать();
		Исключение
			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Результат = СоздатьФайлыКлиентСервер();
	Если Результат = Неопределено Тогда
		Предупреждение("Файлы создать не удалось. Проверьте подключение по FTP");
	ИНаче
		Предупреждение(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьФайлыКлиентСервер()
	СтруктураПараметровСайта = CMS1C_ПроцедурыОбменаССайтом.ПолучитьСтруктуруПараметровДляСоединения(Объект, Объект.HTTPОбменАдресСайта);
	
	Если Не ЗначениеЗаполнено(Объект.HTTPОбменИмяХоста) Тогда
		Сообщить("Не заполнено имя хоста");
		Возврат Неопределено;
	КОнецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.HTTPОбменИмяБазы) Тогда
		Сообщить("Не заполнено имя базы");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.HTTPОбменИмяПользователя) Тогда
		Сообщить("Не заполнено имя базы");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СерверFTP=Новый FTPСоединение(СтруктураПараметровСайта.FTPОбменАдресСайта,Формат(СтруктураПараметровСайта.FTPОбменПорт,"ЧГ=0"),СтруктураПараметровСайта.FTPОбменИмяПользователя,СтруктураПараметровСайта.FTPОбменПароль,,СтруктураПараметровСайта.ПассивноеFTPСоединение);
		СтрокаВозврата = "Соединение с ftp-шлюзом выполнено успешно.";
		//СерверFTP = Неопределено;
	Исключение
		Сообщить("Соединение с FTP не установлено");
		Возврат Неопределено;
	КонецПопытки;
	
	ПутьК1СПХП = ПолучитьИмяВременногоФайла("php");
	Файл1СПХП = ПолучитьОбщийМакет("CMS1C_Zip1c");
	Файл1СПХП.Записать(ПутьК1СПХП);
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПутьК1СПХП,КодировкаТекста.Системная);
	ТекстФАйла = Текст.ПолучитьТекст();
	//Сообщить(ТекстФайла);
	ТекстФайла = СТрЗаменить(ТекстФайла,"$host=""","$host="""+Объект.HTTPОбменИмяХоста+"");
	ТекстФайла = СТрЗаменить(ТекстФайла,"$base=""","$base="""+Объект.HTTPОбменИмяБазы+"");
	Текст.УстановитьТекст(ТекстФайла);
	Текст.Записать(ПутьК1СПХП,КодировкаТекста.Системная);
	
	ПутьКЗипЛиб = ПолучитьИмяВременногоФайла("php");
	ФайлЗипЛиб = ПолучитьОбщийМакет("CMS1C_Ziplib");
	ФайлЗипЛиб.Записать(ПутьКЗипЛиб);
	Попытка
		СерверFTP.Записать(ПутьК1СПХП,"/1c.php");
	Исключение
		ТекстСообщения = "Не удалось создать файл 1c.php";
		Сообщить(ТекстСообщения+Символы.ПС+". "+ ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		СерверFTP.Записать(ПутьКЗипЛиб,"/Ziplib.php");
	Исключение
		ТекстСообщения = "Не удалось создать файл Ziplib.php";
		Сообщить(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат "php-файлы успешно помещены в корневую папку FTP. Можно проверять тестирование подключения";
КонецФункции

//Функция ПолучитьЗначениеКонстанты(ИмяКонстанты)
//	Возврат Константы[ИмяКонстанты].ПОлучить();
//КонецФУнкции

//Функция УстановитьЗначениеКонстанты(ИмяКонстанты,Значение)
//	Константы[ИмяКонстанты].Установить(Значение);
//КонецФункции

&НаКлиенте
Процедура УзелОбменаТоварамиПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.УзелОбменаТоварами) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.УзелОбменаТоварами = ПолучитьЭтотУзелПланаОбмена("ОбменССайтомТоварами") Тогда
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выберите другой узел или создайте новый.");
		Объект.УзелОбменаТоварами = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УзелОбменаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.УзелОбмена = ПолучитьЭтотУзелПланаОбмена("CMS1C_ОбменССайтом") Тогда
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выберите другой узел или создайте новый.");
		Объект.УзелОбмена = Неопределено;
	КонецЕсли;	
КонецПроцедуры

функция ПолучитьЭтотУзелПланаОбмена(НазваниеПланаОбмена)
	Возврат ПланыОбмена[НазваниеПланаОбмена].ЭтотУзел();
КонецФункции

//&НаКлиенте
//Процедура ПерезаписатьПервуюКартинку(Команда)
//	ПерезаписатьКартинкуНаСервере();
//КонецПроцедуры

//ПРоцедура ПерезаписатьКартинкуНаСервере()
//	ВыборкаКартинок = Справочники.Номенклатура.Выбрать();
//	Пока ВыборкаКартинок.Следующий() Цикл
//		
//		Если НЕ ЗначениеЗаполнено(ВыборкаКартинок.ФайлКартинки) Тогда
//			Продолжить;
//		КонецЕсли;		
//		
//		ВыборкаКартинок.ПолучитьОбъект().Записать();
//	КонецЦикла;
//КонецПроцедуры

//&НаКлиенте
//Процедура СоздатьСоответствияПапокИКатегорий(Команда)
//	Ф = ПолучитьФорму("Обработка.CMS1C_СоздатьСоответствияПапокИКатегорий.Форма.Форма");
//	Ф.Настройка = Объект.Ссылка;
//	Ф.Открыть();
//КонецПроцедуры

//Процедура ЗаполнитьПоляДляОграничений()
//	ПоляSC_Products = Объект.ПоляSC_products;
//	Выб = справочники.CMS1C_Поля.Выбрать(Справочники.CMS1C_Поля.SC_products);
//	Пока ВЫб.Следующий() Цикл
//		Если ПоляSC_products.НайтиСтроки(Новый Структура("Поле",Выб.Ссылка)).Количество()=0 Тогда
//			ДобСтр = ПоляSC_products.Добавить();
//			ДобСтр.Поле = Выб.Ссылка;
//			ДобСтр.ВыгружатьИзмененные = Истина;
//			ДобСтр.ВыгружатьНовые = Истина;
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры



//&НаКлиенте
//Процедура СоглашениеВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	Ф = ПолучитьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора",,Элемент);
//	ОтборПоТипуСоглашения = Ф.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборПоТипуСоглашения.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Типовое");
//	ОтборПоТипуСоглашения.ПравоеЗначение = Истина;
//	ОтборПоТипуСоглашения.Использование = Истина;
//	Ф.открыть();
//КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПривилегированныйРежим(Истина);
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Объект.Владелец);
КонецПроцедуры

&НаКлиенте
Процедура СхемаОбменаДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Стр = СопоставлениеНАчалоВыборкаСерв();
	Стр.Вставить("ТекущаяСтрока",Объект.СхемаОбменаДляЗагрузки);
	Ф = ПолучитьФорму("Справочник.CMS1C_СхемыОбмена.ФормаВыбора",Стр,Элемент);
	//Ф.Элементы.Список.ТекущаяСтрока = ОБъект.Сопоставление;
	//НазваниеЛевогоЗначения = ПолучитьНазваниеЛевогоЗначения("Справочники",ИмяСправочника);
	
	//Если НазваниеЛевогоЗначения <> Неопределено И ЗначениеЗаполнено(СистемаУправленияСайтом) Тогда
	Нашли = Ложь;
	ТекПоле = Новый ПолеКомпоновкиДанных("СистемаУправленияСайтом");
	Для Каждого СтрТз из ф.Список.отбор.Элементы Цикл
		Если СтрТз.ЛевоеЗначение = ТекПоле Тогда
			ДобСтр = СтрТз;
			Нашли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		ДобСтр = Ф.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Конецесли;
	
	ДобСтр.ЛевоеЗначение = ТекПоле;
	ДобСтр.ПравоеЗначение = Стр.СистемаУправленияСайтом;
	ДобСтр.ИСпользование = Истина;
	Ф.Открыть();
КонецПроцедуры


Функция СопоставлениеНачалоВыборкаСерв()
	Стр = Новый СТруктура();
	Стр.Вставить("СистемаУправленияСайтом",ОБъект.Владелец.СистемаУправленияСайтом);
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура СхемаОбменаДляВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Стр = СопоставлениеНАчалоВыборкаСерв();
	Стр.Вставить("ТекущаяСтрока",Объект.СхемаОбменаДляЗагрузки);
	Ф = ПолучитьФорму("Справочник.CMS1C_СхемыОбмена.ФормаВыбора",Стр,Элемент);
	//Ф.Элементы.Список.ТекущаяСтрока = ОБъект.Сопоставление;
	//НазваниеЛевогоЗначения = ПолучитьНазваниеЛевогоЗначения("Справочники",ИмяСправочника);
	
	//Если НазваниеЛевогоЗначения <> Неопределено И ЗначениеЗаполнено(СистемаУправленияСайтом) Тогда
	Нашли = Ложь;
	ТекПоле = Новый ПолеКомпоновкиДанных("СистемаУправленияСайтом");
	Для Каждого СтрТз из ф.Список.отбор.Элементы Цикл
		Если СтрТз.ЛевоеЗначение = ТекПоле Тогда
			ДобСтр = СтрТз;
			Нашли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		ДобСтр = Ф.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Конецесли;
	
	ДобСтр.ЛевоеЗначение = ТекПоле;
	ДобСтр.ПравоеЗначение = Стр.СистемаУправленияСайтом;
	ДобСтр.ИСпользование = Истина;
	Ф.Открыть();
КонецПроцедуры
