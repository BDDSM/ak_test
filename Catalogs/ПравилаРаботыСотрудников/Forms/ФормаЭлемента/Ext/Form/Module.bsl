
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//mika Дата: 2017.10.30 ИП-00017045
	Если Объект.ИспользоватьHTML Тогда
		
		ВременныйКаталог = Справочники.ПравилаРаботыСотрудников.ПолучитьКаталогХраненияФайловКартинок(ТекущийОбъект.ТекущаяВерсия, ЭтаФорма.УникальныйИдентификатор);
		
		Справочники.ПравилаРаботыСотрудников.ВосстановитьКартинкиHTMLТекущейВерсии(ТекущийОбъект, ТекущийОбъект.ТекущаяВерсия, ХТМЛ, ВременныйКаталог);
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаHTML;
		
		Возврат;
	КонецЕсли;
	//mika
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	ТекВерсия = ТекущийОбъект.ТекущаяВерсия;
	
	ТекстHTML = ТекущийОбъект.ТекущийТекст;
	
	Картинки = Новый Структура;
	Для Каждого ТекСтрока Из ТекущийОбъект.ТЧКартинки  Цикл
		Если ТекВерсия = ТекСтрока.Версия Тогда
			ИмяФайла = ТекСтрока.ИмяФайла;
			ПолноеИмяФайла = "" + Каталог + ИмяФайла;
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Картинка = Новый Картинка(ПолноеИмяФайла);
				Картинки.Вставить(ТекСтрока.Ключ, Картинка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	                                              
	ФД.УстановитьHTML(ТекстHTML, Картинки);
	//АК БЕЛН 12.07.2016++
	ТД=Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекущийОбъект.КодДинамическойЧасти.Получить());
	ПрограммныйКод=ТД;
	//АК БЕЛН 12.07.2016--
КонецПроцедуры	// ПриЧтенииНаСервере(ТекущийОбъект)

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Перем HTML, Картинки;
	
	//mika Дата: 2017.10.31 ИП-00017045.000.00000001
	Если Объект.ИспользоватьHTML Тогда
		Если ВерсияИзменена Тогда
			СохранитьКартинкиHTMLТекущейВерсии(ТекущийОбъект);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	//mika
	
	ФД.ПолучитьHTML(HTML, Картинки);
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	ТекВерсия = СтрЗаменить(ТекущаяДата(),":","-");
	
	Если Объект.ВерсияДанных = "" Тогда
	
		УИД = Новый УникальныйИдентификатор;
		ТекущийОбъект.УстановитьСсылкуНового(Справочники.ПравилаРаботыСотрудников.ПолучитьСсылку(УИД));
	
		Для Каждого Картинка Из Картинки Цикл
			
			НовСтрока = ТекущийОбъект.ТЧКартинки.Добавить();
			НовСтрока.Ключ = Картинка.Ключ;
			НовСтрока.Версия = ТекВерсия;
			ИмяФайла = "" + УИД + "_" + ТекВерсия + "_"  + Картинка.Ключ + ".bmp";
			ПолноеИмяФайла = "" + Каталог + ИмяФайла;
			Картинка.Значение.ПолучитьДвоичныеДанные().Записать(ПолноеИмяФайла);
			НовСтрока.ИмяФайла = ИмяФайла;
			
		КонецЦикла;
		
		НовСтрока = ТекущийОбъект.ТЧТекст.Добавить();
		НовСтрока.Версия = ТекВерсия;
		НовСтрока.ФДХранилище = Новый ХранилищеЗначения(HTML);
		
		ТекущийОбъект.ТекущаяВерсия = ТекВерсия;
		ТекущийОбъект.ТекущийТекст = HTML;
		
	Иначе
		
		НашлиСтатью = Ложь;
		НашлиТекст = Ложь;
		НашлиКартинку = Ложь;
		
		Если Картинки.Количество() = 0 Тогда
			НашлиКартинку = Истина;
		КонецЕсли;
		
		Для Каждого ТекСтрокаТекст Из ТекущийОбъект.ТЧТекст Цикл
			
			HTMLДо = ТекСтрокаТекст.ФДХранилище.Получить();
			
			Если HTMLДо = HTML Тогда
				
				НашлиТекст = Истина;
				
				Для Каждого Картинка Из Картинки Цикл
					
					КартинкаЗначение = Картинка.Значение.ПолучитьДвоичныеДанные();
					
					Для Каждого ТекСтрокаКартинка Из ТекущийОбъект.ТЧКартинки  Цикл
						
						Если ТекСтрокаТекст.Версия <> ТекСтрокаКартинка.Версия Тогда
							Продолжить;
						КонецЕсли;
						
						Если Картинка.Ключ <> ТекСтрокаКартинка.Ключ Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяФайла = ТекСтрокаКартинка.ИмяФайла;
						ПолноеИмяФайла = "" + Каталог + ИмяФайла;
						Файл = Новый Файл(ПолноеИмяФайла);
						
						Если Файл.Существует() Тогда
							
							ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
							
							Если КартинкаЗначение = ДвоичныеДанные Тогда
								НашлиКартинку = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ НашлиКартинку Тогда
						НашлиТекст = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НашлиТекст И НашлиКартинку Тогда
					НашлиСтатью = Истина;
					ВерсияСтарая = ТекСтрокаТекст.Версия;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НашлиСтатью Тогда
			
			ТекущийОбъект.ТекущаяВерсия = ВерсияСтарая;
			ТекущийОбъект.ТекущийТекст = HTMLДо;
			
		Иначе
			
			Для Каждого Картинка Из Картинки Цикл
				
				НовСтрока = ТекущийОбъект.ТЧКартинки.Добавить();
				НовСтрока.Ключ = Картинка.Ключ;
				НовСтрока.Версия = ТекВерсия;
				ИмяФайла = "" + ТекущийОбъект.Ссылка.УникальныйИдентификатор() + "_" + ТекВерсия + "_"  + Картинка.Ключ + ".bmp";
				ПолноеИмяФайла = "" + Каталог + ИмяФайла;
				Картинка.Значение.ПолучитьДвоичныеДанные().Записать(ПолноеИмяФайла);
				НовСтрока.ИмяФайла = ИмяФайла;
				
			КонецЦикла;
			
			НовСтрока = ТекущийОбъект.ТЧТекст.Добавить();
			НовСтрока.Версия = ТекВерсия;
			НовСтрока.ФДХранилище = Новый ХранилищеЗначения(HTML);
			
			ТекущийОбъект.ТекущаяВерсия = ТекВерсия;
			ТекущийОбъект.ТекущийТекст = HTML;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+++ АК Pans 20160110
	Если ТекущийОбъект.ТекущаяВерсия <> ТекущийОбъект.Ссылка.ТекущаяВерсия Тогда
		ВерсияИзменена = Истина;
	КонецЕсли;
	//--- АК Pans 20160110
	//АК БЕЛН 12.07.2016++
	ТекущийОбъект.КодДинамическойЧасти=Новый ХранилищеЗначения(ПрограммныйКод.ПолучитьТекст());
	//АК БЕЛН 12.07.2016--
КонецПроцедуры	// ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

&НаКлиенте
Процедура ТВК(Команда)
	
	СсылкаНаЭлементСправочника = Объект.Ссылка;
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаЭлементСправочника);
	ОткрытьФорму("Справочник.ПравилаРаботыСотрудников.Форма.ФормаВерсий", ПараметрыФормы);
	ЭтаФорма.Закрыть();

КонецПроцедуры	// ТВК(Команда)

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//mika Дата: 2017.10.31 ИП-00017045
	Если ВерсияИзменена И Объект.ИспользоватьHTML Тогда
		
		ВерсияИзменена = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ОтправкаПисьмаПередЗакрытиемВопросЗавершение", ЭтаФорма, Ложь);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Изменена версия! Отправить сообщение?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
		
		Возврат;
		
	КонецЕсли;
	//mika 
	
    Если ВерсияИзменена Тогда
		// запрос на формирование сообщений
		Ответ1 = Вопрос("Изменена версия! Сформировать сообщения магазинам?", РежимДиалогаВопрос.ДаНет);
		Если Ответ1 = КодВозвратаДиалога.Да Тогда
			//АК БЕЛН 12.07.2016++
			Если Найти(Объект.ТекущийТекст,"#ДинамическаяЧасть")>0 Тогда
				ОбработатьЭлементСДинамическойЧастью();
		        Возврат;
			КонецЕсли;
			//АК БЕЛН 12.07.2016--
			
			СформироватьСообщенияМагазинам();
		КонецЕсли;
		
	КонецЕсли;
	ВерсияИзменена = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЭлементСДинамическойЧастью()
	Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Объект.Ссылка);
КонецПроцедуры
 
//АК БЕЛН 12.07.2016++
&НаСервере
Функция ПолучитьТабДокумент(АдресТЗ)
	ТЗНовинки=ПолучитьИзВременногоХранилища(АдресТЗ).Получить();
	Макет=РеквизитФормыВЗначение("Объект").ПолучитьМакет("РеестрНовинок");
	ТабДок=Новый ТабличныйДокумент;
	Область=Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Область);
	ОбластьСтрока=Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	Для каждого стр Из ТЗНовинки Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,стр);
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	Возврат ТабДок;	

КонецФункции // ()

&НаКлиенте
Функция АК_ВставитьИзExcelКартинки()
	
	КодВозврата = Неопределено;
	
	ВремКаталог = КаталогВременныхФайлов();
	ИмяИспФайла = ВремКаталог + "clipboardtojpg.exe";
	ИмяФайлаКартинки = ПолучитьИмяВременногоФайла(".jpg");
	
	ЗапуститьПриложение(ИмяИспФайла + " " + ИмяФайлаКартинки, ВремКаталог, Истина, КодВозврата);
	
	ФайлКартинка = Новый Файл(ИмяФайлаКартинки);
	//Если НЕ ФайлКартинка.Существует() Тогда
	//	Предупреждение("В буфере нет картинки!");
	//	Возврат;
	//КонецЕсли;
	
	Возврат ИмяФайлаКартинки;
КонецФункции

&НаСервере
Функция СформироватьДинамическуюЧасть(Ссылка)
	//МассивКатегорийТовара=Новый Массив;
	//МассивКатегорийТовара.Добавить(Перечисления.КатегорииАссортимента.Новинки);
	//МассивКатегорийМагазинов=Новый Массив;
	//МассивКатегорийМагазинов.Добавить(Перечисления.ФорматМагазинаВВ.Флагман);
	//МассивКатегорийМагазинов.Добавить(Перечисления.ФорматМагазинаВВ.Обычный);
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТоварыНаСкладахОбороты.Номенклатура,
	//	|	ТоварыНаСкладахОбороты.Характеристика,
	//	|	ТоварыНаСкладахОбороты.Регистратор.Получатель КАК ТТ,
	//	|	МИНИМУМ(ТоварыНаСкладахОбороты.Период) КАК Период
	//	|ПОМЕСТИТЬ втРасходники
	//	|ИЗ
	//	|	РегистрНакопления.ТоварыНаСкладах.Обороты(, , Регистратор, Номенклатура.КатегорияАссортимента В (&МассивКатегорийТовара)) КАК ТоварыНаСкладахОбороты
	//	|ГДЕ
	//	|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
	//	|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	//	|	И ТоварыНаСкладахОбороты.Регистратор.Получатель.Организация = &Организация
	//	|	И ТоварыНаСкладахОбороты.Регистратор.Получатель.ФорматМагазинаВВ В(&МассивКатегорийМагазинов)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ТоварыНаСкладахОбороты.Номенклатура,
	//	|	ТоварыНаСкладахОбороты.Характеристика,
	//	|	ТоварыНаСкладахОбороты.Регистратор.Получатель
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТоварыНаСкладахОбороты.Номенклатура,
	//	|	ТоварыНаСкладахОбороты.Характеристика,
	//	|	ТоварыНаСкладахОбороты.Регистратор.Получатель КАК ТорговаяТочка,
	//	|	ТоварыНаСкладахОбороты.Период КАК Период
	//	|ИЗ
	//	|	РегистрНакопления.ТоварыНаСкладах.Обороты(, , Регистратор, Номенклатура.КатегорияАссортимента В (&МассивКатегорийТовара)) КАК ТоварыНаСкладахОбороты
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРасходники КАК втРасходники
	//	|		ПО ТоварыНаСкладахОбороты.Период = втРасходники.Период
	//	|			И ТоварыНаСкладахОбороты.Номенклатура = втРасходники.Номенклатура
	//	|			И ТоварыНаСкладахОбороты.Характеристика = втРасходники.Характеристика
	//	|			И ТоварыНаСкладахОбороты.Регистратор.Получатель = втРасходники.ТТ
	//	|ГДЕ
	//	|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
	//	|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	//	|	И ТоварыНаСкладахОбороты.Регистратор.Получатель.Организация = &Организация
	//	|	И ТоварыНаСкладахОбороты.Регистратор.Получатель.ФорматМагазинаВВ В(&МассивКатегорийМагазинов)
	//	|	И НАЧАЛОПЕРИОДА(ТоварыНаСкладахОбороты.Период, ДЕНЬ) = &Период";
	//	
	//ДатаРО=НачалоДня(ТекущаяДата())+24*60*60;
	//Запрос.УстановитьПараметр("Период",ДатаРО);
	//Запрос.УстановитьПараметр("МассивКатегорийМагазинов",МассивКатегорийМагазинов);
	//Запрос.УстановитьПараметр("МассивКатегорийТовара",МассивКатегорийТовара);
	//Запрос.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоКоду("000000006"));
	//
	//Результат = Запрос.Выполнить();

	//ТЗМагазиновИТовара = Результат.Выгрузить();


	//
	//
	//
	//АдресВХран=СформироватьДинамическуюЧастьПоПараметрам(Ссылка,ТЗМагазиновИТовара,ДатаРО);

	////_________________________________________________
	АдресВХран="";
	Попытка
		Выполнить(Ссылка.КодДинамическойЧасти.Получить());                             
	Исключение
		АдресВХран="";
	КонецПопытки; 
	Возврат АдресВХран;

КонецФункции // ()

&НаСервере
Функция СформироватьДинамическуюЧастьПоПараметрам(Ссылка,ТЗМагазиновИТовара,ДатаРО,ПовторнаяОтправка=Ложь) Экспорт
	Запрос = Новый Запрос;
	
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗМагазиновИТовара.ТорговаяТочка,
		|	ТЗМагазиновИТовара.Номенклатура
		|ПОМЕСТИТЬ ТЗМагазиновИТовара
		|ИЗ
		|	&ТЗМагазиновИТовара КАК ТЗМагазиновИТовара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.КатегорияАссортимента КАК КатегорияАссортимента,
		|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
		|	ЗначенияСвойствОбъектов.Значение КАК Страна,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Описание,
		|	ВыкладкаПланограммы.Планограмма,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ТипРозничнойТочки
		|ПОМЕСТИТЬ втНовинки
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			,
		|			(Номенклатура, ТорговаяТочка) В
		|				(ВЫБРАТЬ
		|					ТЗМагазиновИТовара.ТорговаяТочка,
		|					ТЗМагазиновИТовара.Номенклатура
		|				ИЗ
		|					ТЗМагазиновИТовара)) КАК ТоварныйАссортиментТочекСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ТоварныйАссортиментТочекСрезПоследних.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.СтранаПроисхождения))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
		|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВыкладкаПланограммы.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправкиПоНовинкам КАК ОтправкиПоНовинкам
		|		ПО ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ОтправкиПоНовинкам.Магазин
		|			И ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ОтправкиПоНовинкам.Номенклатура
		|			И ТоварныйАссортиментТочекСрезПоследних.Характеристика = ОтправкиПоНовинкам.Характеристика
		|			И (ВЫБОР
		|				КОГДА &ПовторнаяОтправка
		|					ТОГДА ОтправкиПоНовинкам.ПовторнаяОтправка
		|				ИНАЧЕ ОтправкиПоНовинкам.ПервичнаяОтправка
		|			КОНЕЦ)
		|ГДЕ
		|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
		|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
		|	И ОтправкиПоНовинкам.Номенклатура ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ТоварыНаСкладахОбороты.Период) КАК Период,
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика
		|ПОМЕСТИТЬ втПриходы
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					втновинки.Номенклатура,
		|					втновинки.Характеристика
		|				ИЗ
		|					втновинки)) КАК ТоварыНаСкладахОбороты
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОбороты.Период КАК Период,
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Регистратор.Основание.Дата,
		|	ТоварыНаСкладахОбороты.Регистратор.Склад
		|ПОМЕСТИТЬ втПриходыПервые
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					втновинки.Номенклатура,
		|					втновинки.Характеристика
		|				ИЗ
		|					втновинки)) КАК ТоварыНаСкладахОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриходы КАК втПриходы
		|		ПО ТоварыНаСкладахОбороты.Период = втПриходы.Период
		|			И ТоварыНаСкладахОбороты.Номенклатура = втПриходы.Номенклатура
		|			И ТоварыНаСкладахОбороты.Характеристика = втПриходы.Характеристика
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Регистратор.Получатель КАК ТТ,
		|	МИНИМУМ(ТоварыНаСкладахОбороты.Период) КАК Период
		|ПОМЕСТИТЬ втРасходники
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					втновинки.Номенклатура,
		|					втновинки.Характеристика
		|				ИЗ
		|					втновинки)) КАК ТоварыНаСкладахОбороты
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
		|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И (ТоварыНаСкладахОбороты.Номенклатура, ТоварыНаСкладахОбороты.Характеристика, ТоварыНаСкладахОбороты.Регистратор.Получатель) В
		|			(ВЫБРАТЬ
		|				втновинки.Номенклатура,
		|				втновинки.Характеристика,
		|				втновинки.ТорговаяТочка
		|			ИЗ
		|				втновинки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Регистратор.Получатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Регистратор.Получатель КАК ТТ,
		|	ТоварыНаСкладахОбороты.Период КАК Период
		|ПОМЕСТИТЬ втРасходникиПервые
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					втновинки.Номенклатура,
		|					втновинки.Характеристика
		|				ИЗ
		|					втновинки)) КАК ТоварыНаСкладахОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРасходники КАК втРасходники
		|		ПО ТоварыНаСкладахОбороты.Период = втРасходники.Период
		|			И ТоварыНаСкладахОбороты.Номенклатура = втРасходники.Номенклатура
		|			И ТоварыНаСкладахОбороты.Характеристика = втРасходники.Характеристика
		|			И ТоварыНаСкладахОбороты.Регистратор.Получатель = втРасходники.ТТ
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
		|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И (ТоварыНаСкладахОбороты.Номенклатура, ТоварыНаСкладахОбороты.Характеристика, ТоварыНаСкладахОбороты.Регистратор.Получатель) В
		|			(ВЫБРАТЬ
		|				втновинки.Номенклатура,
		|				втновинки.Характеристика,
		|				втновинки.ТорговаяТочка
		|			ИЗ
		|				втновинки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втНовинки.ТорговаяТочка КАК ТорговаяТочка,
		|	втНовинки.Номенклатура,
		|	втНовинки.КатегорияАссортимента,
		|	втНовинки.Характеристика,
		|	втНовинки.Страна,
		|	втНовинки.НоменклатураОписание,
		|	втНовинки.Планограмма,
		|	втНовинки.ТорговаяТочкаТипРозничнойТочки,
		|	ЕСТЬNULL(втПриходыПервые.РегистраторОснованиеДата, ""-"") КАК ДатаЗаказа,
		|	ЕСТЬNULL(втРасходникиПервые.Период, ""-"") КАК ДатаПоступления,
		|	втПриходыПервые.РегистраторСклад.ТемпературныйРежимНижняяГраница КАК НижняяГраница,
		|	втПриходыПервые.РегистраторСклад.ТемпературныйРежимВерхняяГраница КАК ВерхняяГраница
		|ИЗ
		|	втНовинки КАК втНовинки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПриходыПервые КАК втПриходыПервые
		|		ПО втНовинки.Номенклатура = втПриходыПервые.Номенклатура
		|			И втНовинки.Характеристика = втПриходыПервые.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРасходникиПервые КАК втРасходникиПервые
		|		ПО втНовинки.Номенклатура = втРасходникиПервые.Номенклатура
		|			И втНовинки.ТорговаяТочка = втРасходникиПервые.ТТ
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(втРасходникиПервые.Период, ДЕНЬ) = &ДатаРО
		|ИТОГИ ПО
		|	ТорговаяТочка";
	Запрос.УстановитьПараметр("ДатаРО",ДатаРО);
	Запрос.УстановитьПараметр("ТЗМагазиновИТовара",ТЗМагазиновИТовара);
    Запрос.УстановитьПараметр("ПовторнаяОтправка",ПовторнаяОтправка);
	
	Результат = Запрос.Выполнить();       
																			   
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);       
	СоответствиеТТ=Новый Соответствие;
	Макет=Справочники.ПравилаРаботыСотрудников.ПолучитьМакет("РеестрНовинок");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаТовары=ВыборкаДетальныеЗаписи.Выбрать();
		ТЗНовинки1=Новый ТаблицаЗначений;
		ТЗНовинки1.Колонки.Добавить("Организация");
		ТЗНовинки1.Колонки.Добавить("КатегорияТовара");
		ТЗНовинки1.Колонки.Добавить("НазваниеТовара");
		ТЗНовинки1.Колонки.Добавить("СтранаТовара");
		ТЗНовинки1.Колонки.Добавить("КраткоеОписание");
		ТЗНовинки1.Колонки.Добавить("РежимХранения");
		ТЗНовинки1.Колонки.Добавить("ПланоГрамма");
		ТЗНовинки1.Колонки.Добавить("ДатаЗаказа");
		ТЗНовинки1.Колонки.Добавить("Магазин");
		ТЗНовинки1.Колонки.Добавить("ТипМагазина");
		ТЗНовинки1.Колонки.Добавить("ДатаПоступления");
		
		Пока ВыборкаТовары.Следующий() Цикл
			СтрДоб=ТЗНовинки1.Добавить();
			СтрДоб.Организация=Строка(ВыборкаТовары.ТорговаяТочка.Организация);
			СтрДоб.КатегорияТовара=Строка(ВыборкаТовары.КатегорияАссортимента);
			СтрДоб.НазваниеТовара=Строка(ВыборкаТовары.Номенклатура);
			СтрДоб.СтранаТовара=Строка(ВыборкаТовары.Страна);
			СтрДоб.КраткоеОписание=Строка(?(ЗначениеЗаполнено(СокрЛП(ВыборкаТовары.НоменклатураОписание)),СформироватьОписание(ВыборкаТовары.НоменклатураОписание)+Символы.ПС,"-"));
			
			СтрДоб.РежимХранения=Строка(ВыборкаТовары.НижняяГраница)+" - "+Строка(ВыборкаТовары.ВерхняяГраница)+"°С";
			СтрДоб.ПланоГрамма=Строка(ВыборкаТовары.ПланоГрамма);
			СтрДоб.ДатаЗаказа=Строка(ВыборкаТовары.ДатаЗаказа);
			СтрДоб.Магазин=Строка(ВыборкаТовары.ТорговаяТочка);
			СтрДоб.ТипМагазина=Строка(ВыборкаТовары.ТорговаяТочкаТипРозничнойТочки);
			СтрДоб.ДатаПоступления=Строка(ВыборкаТовары.ДатаПоступления);
			
			Мен=РегистрыСведений.ОтправкиПоНовинкам.СоздатьМенеджерЗаписи();
			Мен.Магазин=ВыборкаТовары.ТорговаяТочка;
			Мен.Номенклатура=ВыборкаТовары.Номенклатура;
			Мен.Характеристика=ВыборкаТовары.Характеристика;
			Если ПовторнаяОтправка Тогда
				Мен.ПервичнаяОтправка=Истина;
				Мен.ПовторнаяОтправка=Истина;
			Иначе
				Мен.ПервичнаяОтправка=Истина;
			КонецЕсли; 
			Мен.Записать(Истина);
		КонецЦикла;
		Макет=Справочники.ПравилаРаботыСотрудников.ПолучитьМакет("РеестрНовинок");
		ТабДок=Новый ТабличныйДокумент;
		Область=Макет.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(Область);
		ОбластьСтрока=Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		Для каждого стр Из ТЗНовинки1 Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,стр);
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		
		СоответствиеТТ.Вставить(ВыборкаДетальныеЗаписи.ТорговаяТочка,ТабДок);
	КонецЦикла;
	Адрес=ПоместитьВоВременноеХранилище(СоответствиеТТ,Новый УникальныйИдентификатор);
	Возврат Адрес;

КонецФункции
 

&НаСервере
Функция СформироватьОписание(Описание)
	СтрокаИтог="";
	Фл=Ложь;
    Для Сч=1 По СтрДлина(Описание) Цикл
		Симв=Сред(Описание,Сч,1);
		Если Симв=">" или Симв="<" Тогда
		    Фл=Не Фл;
			Продолжить;
		КонецЕсли;
		Если Фл Тогда
			Продолжить;
		КонецЕсли; 
		//Если Найти("абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmopqrstuvwxyz1234567890-_=+""?!.,()*%#:;№",Нрег(Симв))>0 Тогда
			СтрокаИтог=СтрокаИтог+Симв;
		//Иначе	
		//	СтрокаИтог=СтрокаИтог+" ";
		//КонецЕсли; 
	КонецЦикла;
	Возврат СтрокаИтог;
КонецФункции // ()
//АК БЕЛН 12.07.2016--

&НаСервере
Процедура СформироватьСообщенияМагазинам()

	Справочники.ПравилаРаботыСотрудников.СформироватьСообщенияМагазинамОбИзмененииВерсии(Объект.Ссылка);

КонецПроцедуры


//+++ АК Pans 20160330
&НаКлиенте
Процедура ФДПриИзменении(Элемент)
	
	//ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры
//--- АК Pans 20160330

//+++ АК SHEP 20160412 №ИП-00012308.01
&НаКлиенте
Процедура СохранитьКомпонентуНаКлиенте(ИмяМакета)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + СтрЗаменить(ИмяМакета, "_", ".");
	ФайлМакета = Новый Файл(ИмяВременногоФайла);
	Если НЕ ФайлМакета.Существует() Тогда
		ПолучитьФайл(СохранитьКомпонентуНаСервере(ИмяМакета), ИмяВременногоФайла, Ложь);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СохранитьКомпонентуНаСервере(ИмяМакета)
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета));
	
КонецФункции

&НаКлиенте
Процедура АК_ВставитьИзExcel(Команда)
	
	КодВозврата = Неопределено;
	
	ВремКаталог = КаталогВременныхФайлов();
	ИмяИспФайла = ВремКаталог + "clipboardtojpg.exe";
	ИмяФайлаКартинки = ПолучитьИмяВременногоФайла(".jpg");
	
	ЗапуститьПриложение(ИмяИспФайла + " " + ИмяФайлаКартинки, ВремКаталог, Истина, КодВозврата);
	
	ФайлКартинка = Новый Файл(ИмяФайлаКартинки);
	Если НЕ ФайлКартинка.Существует() Тогда
		Предупреждение("В буфере нет картинки!");
		Возврат;
	КонецЕсли;
	
	КартинкаИзБуфера = Новый Картинка(ИмяФайлаКартинки);
	ФДДобавитьКартинкуНаСервере(КартинкаИзБуфера);
	ЭтаФорма.Модифицированность = Истина;
	ВерсияИзменена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ФДДобавитьКартинкуНаСервере(Картинка)
	ФД.Добавить(Картинка, ТипЭлементаФорматированногоДокумента.Картинка);
КонецПроцедуры
//--- АК SHEP

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+++АК SHEP 20160413
	СохранитьКомпонентуНаКлиенте("clipboardtojpg_exe");
	//+++АК SHEP 20160422
	Если ОтображатьХТМЛ Тогда
		Картинки = Новый Структура;
		ФД.ПолучитьHTML(ХТМЛ, Картинки);
		
		Для Каждого Картинка Из Картинки Цикл
			ИмяВремФайла = ПолучитьИмяВременногоФайла("");
			Картинка.Значение.Записать(ИмяВремФайла);
			ХТМЛ = СтрЗаменить(ХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
		КонецЦикла;
		
		//+++АК SHEP 20160425
		// убираем лишний "мусор", в т.ч. чтобы картинки при печати были на след. странице, а не обрезались
		ПозТела = Найти(ХТМЛ, "<body>");
		Если ПозТела <> 0 Тогда
			ХТМЛ = "<html>" + Символы.ПС + Сред(ХТМЛ, ПозТела);
		КонецЕсли;
		//---АК SHEP 20160425
	КонецЕсли;
	//---АК SHEP
	
	//mika Дата: 2017.10.25 ИП-00017045 
	ПодключитьОбработчикОжидания("УдалитьВременныеФайлыHTMLКлиентОбработчик", 10, Истина);
	//mika
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//mika Дата: 2017.10.25 ИП-00017045
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ИспользоватьHTML = Ложь;
	КонецЕсли;
	//mika
	
	//+++АК VERN 20160802 12873 Предотвращаем редактирование служебного элемента справочника
	Если Объект.Ссылка=Справочники.ПравилаРаботыСотрудников.ПоступающиеПредложения.Ссылка тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Служебный элемент справочника не редактируется");
		Возврат;
	КонецЕсли;
	//---АК VERN 

	// На тонком клиенте при запуске под веб-сервером картинки не отображались, добавил поле HTML документа
	ОтображатьХТМЛ = (Лев(ПолучитьНавигационнуюСсылкуИнформационнойБазы(), 4) = "http"); // И Документы.СообщениеМОС.ФДЗаполнен(ФД);
	Элементы.ХТМЛ.Видимость = ОтображатьХТМЛ;
	Элементы.ФормаПечатьХТМЛ.Видимость = ОтображатьХТМЛ;
	Элементы.ФормаПечатьСразуХТМЛ.Видимость = ОтображатьХТМЛ И ЗначениеЗаполнено(Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("ПечатьСразуХТМЛ"));
	Элементы.ФормаПредпросмотрХТМЛ.Видимость = ОтображатьХТМЛ;
	Элементы.ФД.Видимость = НЕ ОтображатьХТМЛ;
	Элементы.Группа2.Видимость = НЕ ОтображатьХТМЛ;
	Элементы.ФормаПечать.Видимость = НЕ ОтображатьХТМЛ;
	Элементы.ФормаПредварительныйПросмотр.Видимость = НЕ ОтображатьХТМЛ;
	
	//+++АК mika 2018.02.22 ИП-00018004
	ОбновитьВидимостьЭлементовПриИспользованииHTML();  
	//---АК mika ИП-00018004
	
КонецПроцедуры

//+++АК SHEP 20160425: команды для просмотра и печати ХТМЛ
&НаКлиенте
Процедура ПредпросмотрХТМЛ(Команда)
Перем Документ;

	Документ = Элементы.ХТМЛ.Документ;
	sExpression = "
	|printPreview();
	|
	|function printPreview() {
	|	var yourDOCTYPE = ""<!DOCTYPE html>""; // your doctype declaration
	|	var printPreview = window.open('about:blank', 'print_preview', ""resizable=yes,scrollbars=yes,status=yes"");
	|	var printDocument = printPreview.document;
	|	printDocument.open();
	|	printDocument.write(yourDOCTYPE+
	|			   ""<html>""+
	|				   document.documentElement.innerHTML+
	|			   ""</html>"");
	|	printDocument.close();
	|}";
	Документ.parentWindow.execScript(sExpression);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьХТМЛ(Команда)
Перем Документ;
	
	Документ = Элементы.ХТМЛ.Документ;
	sExpression = "
	|CallPrint();
	|
	|function CallPrint() {
	|	var yourDOCTYPE = ""<!DOCTYPE html>""; // your doctype declaration
	|	var printDocument = window.open('', '', 'width=200,height=100');
	|	var printPreview = printDocument.document;
	|	printPreview.write(yourDOCTYPE+
	|			   ""<html>""+
	|				   document.documentElement.innerHTML+
	|			   ""</html>"");
	|	printPreview.close();
	|	printDocument.focus();
	|	printDocument.print();
	|	printDocument.close();
	|}";
	Документ.parentWindow.execScript(sExpression);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСразуХТМЛ(Команда)
	Документ = Элементы.ХТМЛ.Документ;
	Если Документ.queryCommandSupported("Print") Тогда
		Документ.execCommand("Print", Ложь);
		//ЭтаФорма.Элементы.ХТМЛ.Документ.execCommand(Команда, Ложь);
	КонецЕсли;	
КонецПроцедуры

//АК БЕЛН 12.07.2016++
&НаКлиенте
Процедура ПрограммныйКодПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

//АК БЕЛН 12.07.2016++
//---АК SHEP 20160425

#Область ЗагрузкаHTMLСредствамиMSWord

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриЗакрытии()
	
	//mika Дата: 2017.10.30 ИП-00017045
	Если Объект.ИспользоватьHTML И ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьВременныеФайлыHTMLКлиент(ВременныйКаталог, Истина);
	КонецЕсли;
	//mika
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьHTMLПриИзменении(Элемент) //+++АК mika 2017.10.25 ИП-00017045
	
	Если Объект.ИспользоватьHTML Тогда
		Объект.ИспользоватьИсполняемыйКод = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ХТМЛ) И ЗначениеЗаполнено(Объект.Ссылка )> 0 Тогда  //+++АК mika 2018.02.22 ИП-00018004
			ПоказатьПредупреждение(,СтрЗаменить("Если не будет загружен новый файл перед сохранением, то ""текущая версия"" (ТекущаяВерсия) будет заменана ""новой(пустой)"" версией элемента!!!", 
						"ТекущаяВерсия", Объект.ТекущаяВерсия));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИсполняемыйКодПриИзменении(Элемент) //+++АК mika 2017.10.25 ИП-00017045
	
	Если Объект.ИспользоватьИсполняемыйКод Тогда
		Объект.ИспользоватьHTML = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзWord(Команда) //+++АК mika 2017.10.25 ИП-00017045
	
	ЗагрузитьИзWordКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПисемHTML(Команда) //+++АК mika 2017.10.25 ИП-00017045
	
	Если Объект.ИспользоватьHTML Тогда
		
		Если ЭтаФорма.Модифицированность Тогда
			
			Оповещение = Новый ОписаниеОповещения("ОтправкаПисьмаПередЗакрытиемВопросЗавершение", ЭтаФорма, Истина);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед отправкой письма данные будут сохранены. Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			
			ОткрытьФормуОтправкиПисемКлиент();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьИзWordКлиент() //+++АК mika 2017.10.25 ИП-00017045
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Документ'; en = 'Document'") + "(*.doc, *.docx)|*.doc;*.docx";
	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ОбработатьВыборФайлаЗакрытие", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтправкиПисемКлиент() //+++АК mika 2017.10.25 ИП-00017045
	
	ОткрытьФорму("Справочник.ПравилаРаботыСотрудников.Форма.ФормаОтправкиПисьма", Новый Структура("СправочникСсылка", Объект.Ссылка), ЭтаФорма, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияКонтроляКлиент() //+++АК mika 2017.10.25 ИП-00017045
	
	ОткрытьФорму("Справочник.ПравилаРаботыСотрудников.Форма.ФормаДобавленияКонтроля", Новый Структура("СправочникСсылка, ТекущаяВерсия", Объект.Ссылка, Объект.ТекущаяВерсия), ЭтаФорма, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаЗакрытие(Результат, ДополнительныеПараметры)Экспорт //+++АК mika 2017.10.25 ИП-00017045
	
	Если Результат <> Неопределено Тогда
		Для Каждого ИмяФайла Из Результат Цикл
			ОбработатьВыбранныйФайлКлиент(ИмяФайла);
		КонецЦикла;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"))
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбранныйФайлКлиент(Адрес) //+++АК mika 2017.10.25 ИП-00017045
	
	Если Лев(Адрес,5) = "e1cib" Тогда 
		Файл = ПолучитьИзВременногоХранилища(Адрес);
	Иначе
		Файл = Новый ДвоичныеДанные(Адрес);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
	КонецЕсли;
	
	//Очистка файлов текущей версии HTML
	Если ЗначениеЗаполнено(Объект.ТекущаяВерсия) Тогда
		УдалитьВременныеФайлыHTMLКлиент(ВременныйКаталог);
	КонецЕсли;
	
	//Установка новой версии HTML
	Объект.ТекущаяВерсия = СтрЗаменить(ТекущаяДата(),":","-");
    ВерсияИзменена = Истина;
	Этаформа.Модифицированность = Истина;
	
	//Получение временного каталога новой версии HTML
	Если НЕ ЗначениеЗаполнено(КаталогХраненияФайлов) Тогда
		ВременныйКаталог = ПолучитьКаталогХраненияФайловКартинок(Объект.ТекущаяВерсия, ЭтаФорма.УникальныйИдентификатор);
	Иначе
		ВременныйКаталог = КаталогХраненияФайлов + "WordToHTML\" + Объект.ТекущаяВерсия + "\";
	КонецЕсли;
	
	//Формирование имен временных файлов
	ИмяВременногоФайла = ВременныйКаталог + "temp.doc"; 
	ИмяВременногоФайлаHTML = ВременныйКаталог + "temp.HTML";
	
	//Копирование файла во временный файл (на случай если источник открыт)
	Файл.Записать(ИмяВременногоФайла);
	
	//Создание подключения 
	Попытка
		ОбъектWord = Новый COMОбъект("Word.Application");
	Исключение         
		Сообщить(НСтр("ru = 'Ошибка подключения к MS Word!'") + ОписаниеОшибки());
		УдалитьВременныеФайлыHTMLКлиент(ВременныйКаталог);
		Возврат;
	КонецПопытки;
	
	Попытка
		
		// Конвернтация файла в HTML
		ОбъектWord.Documents.Open(ИмяВременногоФайла);
		
		ТекущийДокумент = ОбъектWord.ActiveDocument();
		ТекущийДокумент.WebOptions.AllowPNG = Истина;
		//ТекущийДокумент.WebOptions.TargetBrowser = 3;
		
		//ТекущийДокумент.WebOptions.PixelsPerInch = 120;
		ТекущийДокумент.SaveAs(ИмяВременногоФайлаHTML, 8); //wdFormatHTML = 8; 
	
		ТекущийДокумент.Close(0);
		
		//Получение текста HTML 
		Файл = Новый ЧтениеТекста(ИмяВременногоФайлаHTML);
		ТекстHTML = Файл.Прочитать();
		
		//Замена места расположения картинок для отображения и отображение HTML 
		ХТМЛ = СтрЗаменить(ТекстHTML, "src=""temp.files/", "src=""" + ВременныйКаталог + "temp.files\");
		
		//+++АК mika 2017.12.28 Без задачи. Поступило обращение, что не записалась версия файла.
		//Добавлена "запись" новой версии сразу после добавления (пока все файлы доступны по временному адресу).
		Записать(); 			  
		//---АК mika
		
	Исключение
		
		УдалитьВременныеФайлыHTMLКлиент(ВременныйКаталог);

		ЗакрытьСоединениеCOM(ОбъектWord);
		
		Сообщить(СтрЗаменить(НСтр("ru = 'Ошибка конвертации файла(MS Word → HTML)! ОписаниеОшибки'"),"ОписаниеОшибки", ОписаниеОшибки()));
		
	КонецПопытки;
	
	//Закрытие подключения к MS Word
	ЗакрытьСоединениеCOM(ОбъектWord);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСоединениеCOM(ОбъектWord) //+++АК mika 2017.10.25 ИП-00017045
	
	Если ОбъектWord <> Неопределено Тогда
		
		ОбъектWord.Application.Quit();
		
		ОбъектWord = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКаталогХраненияФайловКартинок(ТекущаяВерсия, УникальныйИдентификатор) //+++АК mika 2017.10.25 ИП-00017045
	
	Возврат Справочники.ПравилаРаботыСотрудников.ПолучитьКаталогХраненияФайловКартинок(ТекущаяВерсия, УникальныйИдентификатор);
	
КонецФункции

//Процедура конвертации картинок HTML текущей версии объекта в base64
//
&НаСервере
Процедура СохранитьКартинкиHTMLТекущейВерсии(ТекущийОбъект) //+++АК mika 2017.10.25 ИП-00017045
	
    ТекущаяВерсия = Объект.ТекущаяВерсия;

	ПутьКаталогКартинок = ВременныйКаталог + "temp.files\";
	КаталогКартинок = Новый Файл(ПутьКаталогКартинок);
	
	Если КаталогКартинок.Существует() Тогда
		
		НайденныеФайлы = НайтиФайлы(ПутьКаталогКартинок,"*.*");
		
		Если НайденныеФайлы.Количество() > 0 Тогда
			
			ТекстHTML = ХТМЛ;
			
			Для каждого ФайлКартинок Из НайденныеФайлы Цикл

				ТекущаяКартинка = Новый Картинка(ФайлКартинок.ПолноеИмя);
				
				ТекстHTML = СтрЗаменить(ТекстHTML, "src=""" + ФайлКартинок.ПолноеИмя + """",
						"src=""data:image/png;base64, " + Base64Строка(ТекущаяКартинка.ПолучитьДвоичныеДанные()) + """");	
				
			КонецЦикла;	
			
			НоваяСтрока = ТекущийОбъект.ТЧТекст.Добавить();
			НоваяСтрока.Версия = ТекущаяВерсия;
			НоваяСтрока.ФДХранилище = Новый ХранилищеЗначения(ТекстHTML);
		Иначе
			Сообщить("" + ТекущаяДата() + " Не найдены файлы!!");
		КонецЕсли;

	КонецЕсли
	
КонецПроцедуры

//Процедура конвертации картинок из base64 в HTML текущей версии объекта
//
&НаСервере
Процедура ВосстановитьКартинкиHTMLТекущейВерсии_(ТекущийОбъект = Неопределено, ТекущаяВерсия = Неопределено) //+++АК mika 2017.10.25 ИП-00017045
	
	Если НЕ ЗначениеЗаполнено(ТекущаяВерсия) Тогда
		ТекущаяВерсия = ТекущийОбъект.ТекущаяВерсия;
	КонецЕсли;

	НайденныеСтроки =  ТекущийОбъект.ТЧТекст.НайтиСтроки(Новый Структура("Версия", ТекущаяВерсия));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		КаталогКартинок = Новый Файл(ВременныйКаталог);
		Если Не КаталогКартинок.Существует() Тогда
			СоздатьКаталог(ВременныйКаталог);
		КонецЕсли;
		
		ТекущийHTML = НайденныеСтроки[0].ФДХранилище.Получить();
		
		Префикс = "src=""data:image/png;base64, ";
		
		Пока Найти(ТекущийHTML, Префикс) > 0 Цикл
			
			лкНачалоКартинки = Найти(ТекущийHTML, Префикс) + СтрДлина(Префикс);
			лкBase64ДанныеКартинки = Сред(ТекущийHTML, лкНачалоКартинки);
			лкBase64ДанныеКартинки = Лев(лкBase64ДанныеКартинки, Найти(лкBase64ДанныеКартинки, """") - 1);
			
			лкКодСоответствия = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "")+ ".png";
			лкКартинка = Новый Картинка(Base64Значение(лкBase64ДанныеКартинки));
			
			лкКартинка.Записать(ВременныйКаталог + лкКодСоответствия);
			
			//лкВложения.Вставить(лкКодСоответствия, лкКартинка);
			
			ТекущийHTML = СтрЗаменить(ТекущийHTML, Префикс + лкBase64ДанныеКартинки + """",
			"src=""" + ВременныйКаталог + лкКодСоответствия + """");
			
		КонецЦикла;
		
		ХТМЛ = ТекущийHTML;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает временные файлы 
//
// Параметры:
//  ВременныйКаталог  - <Тип.Строка> - расположение файлов текущей версии объекта
//
&НаКлиенте
Процедура УдалитьВременныеФайлыHTMLКлиент(ВременныйКаталог, ОчиститьВсеВерсии = Ложь) //+++АК mika 2017.10.25 ИП-00017045
	
	Попытка
		Если ОчиститьВсеВерсии Тогда
			УдалитьФайлы(Лев(ВременныйКаталог, Найти(ВременныйКаталог,"ver")-1));
		Иначе
			УдалитьФайлы(ВременныйКаталог);
		КонецЕсли;
	Исключение
	КонецПопытки
	
КонецПроцедуры // УдалитьВременныеФайлыHTMLКлиент()

&НаКлиенте
Процедура УдалитьВременныеФайлыHTMLКлиентОбработчик() //+++АК mika 2017.10.25 ИП-00017045
	
	УдалитьВременныеФайлыHTMLКлиент(ВременныйКаталог, Истина);
	
КонецПроцедуры // УдалитьВременныеФайлыHTMLКлиент()

&НаКлиенте
Процедура ОтправкаПисьмаПередЗакрытиемВопросЗавершение(Результат, Записывать) Экспорт //+++АК mika 2017.10.25 ИП-00017045
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Записывать Тогда
			Записать();
		КонецЕсли;

		ОткрытьФормуОтправкиПисемКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеКонтроляHTML(Команда) //+++АК mika 2017.11.27 ИП-00017045
	
	Если Объект.ИспользоватьHTML Тогда
		
		Если ЭтаФорма.Модифицированность Тогда
			
			Оповещение = Новый ОписаниеОповещения("ДобавлениеКонтроляПередЗакрытиемВопросЗавершение", ЭтаФорма, Истина);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед добавлением контроля данные будут сохранены. Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			
			ОткрытьФормуДобавленияКонтроляКлиент();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеКонтроляПередЗакрытиемВопросЗавершение(Результат, Записывать) Экспорт //+++АК mika 2017.11.27 ИП-00017045
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Записывать Тогда
			Записать();
		КонецЕсли;

		ОткрытьФормуДобавленияКонтроляКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиРегистрПравилаРаботыСотрудниковКонтроль(Команда) //+++АК mika 2017.11.27 ИП-00017045
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ПравилаСсылка", Объект.Ссылка));
	
	ОткрытьФорму("РегистрСведений.ПравилаРаботыСотрудниковКонтроль.ФормаСписка", ПараметрыФормы,ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтроль(Команда) //+++АК mika 2017.12.21 ИП-00017045.01
	
	ОткрытьФорму("Отчет.ПравилаРаботыСотрудниковКонтрольВыполнения.Форма", Новый Структура("Отбор, СформироватьПриОткрытии", 
				Новый Структура("ПравилаСсылка", Объект.Ссылка), Истина)); 
	
КонецПроцедуры

Процедура ОбновитьВидимостьЭлементовПриИспользованииHTML(); //+++АК mika 2018.02.22 ИП-00018004
	
	ЧастичноеОтображение = Объект.ИспользоватьHTML И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("РедактированиеПравилРаботыСотрудниковHTML");
	
	Элементы.СтраницаОсновная.Видимость = Не ЧастичноеОтображение;
	Элементы.СтраницаДинамическая.Видимость = Не ЧастичноеОтображение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьКонтрольКруто(Команда) //+++АК mika 2018.11.13 ИП-00020366
	ОткрытьФорму("ОбщаяФорма.ИспользоватьКонтрольКрутоПриСтартеСистемы");
КонецПроцедуры

#КонецОбласти

#КонецОбласти


