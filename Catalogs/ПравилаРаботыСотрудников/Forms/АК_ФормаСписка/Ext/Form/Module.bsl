
&НаКлиенте
Процедура НайтиОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	
	Список.Отбор.Элементы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиОбработчик();
	
	//mika Дата: 2017.10.30 ИП-00017045 
	//Определение переменой (Рефакторинг кода не проводился)
	Элемент = Элементы.Список;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		//mika Дата: 2017.10.30 ИП-00017045
		//Без перехода на сервер невозможно определить тип заполнения документа
		
		Если АвтоАктивация И АвтоАктивацияСсылка = Элемент.ТекущиеДанные.Ссылка Тогда
			АвтоАктивацияСсылка = ПредопределенноеЗначение("Справочник.ПравилаРаботыСотрудников.ПустаяСсылка");
			АвтоАктивация = Ложь;
			Возврат;
		КонецЕсли;
		
		ТекущийHTML = "";
		КэшВременныйКаталог = "";
		
		Если ИспользоватьТекстHTML(Элемент.ТекущиеДанные.Ссылка, ТекущийHTML, КэшВременныйКаталог, ЭтаФорма.УникальныйИдентификатор) Тогда
			
			Элементы.ХТМЛ.Видимость = Ложь;
			
			Если Не Элементы.ХТМЛ.Видимость Тогда
				ОбновитьВидимостьЭлементовФормы(Истина);
			КонецЕсли;
			
			ХТМЛ = ТекущийHTML;
			АвтоАктивация = Истина;
			АвтоАктивацияСсылка = Элемент.ТекущиеДанные.Ссылка; 
			Возврат;
		Иначе
			ОбновитьВидимостьЭлементовФормы(Ложь);
		КонецЕсли;
		
		АвтоАктивацияСсылка = ПредопределенноеЗначение("Справочник.ПравилаРаботыСотрудников.ПустаяСсылка");
		АвтоАктивация = Ложь;
		
		//mika

		//+++АК SHEP 20161123
		///+++АК БЕЛН 20160914
		//Если Элемент.ТекущиеДанные.Ссылка=ВозвратЭлемента("000000079") и ЗначениеЗаполнено(ТорговаяТочка) Тогда
		Если ЭтоРеестрНовинок(Элемент.ТекущиеДанные.Ссылка)
				И ЗначениеЗаполнено(ТорговаяТочка) Тогда
		//---АК SHEP 20161123 
			Картинки = Новый Структура;
			ЭлементФДНовинок(ВозвратЭлемента("000000086"), Картинки);
			Элементы.ХТМЛ.Видимость = Истина;
			Элементы.ПолеФД.Видимость = Ложь;
			Элементы.ФормаПечатьХТМЛ.Видимость = Истина;
			Элементы.ФормаПечатьСразуХТМЛ.Видимость = Истина;
			Элементы.ФормаПредпросмотрХТМЛ.Видимость = Истина;
			Элементы.ФормаПечать.Видимость = Ложь;
			Элементы.ФормаПредварительныйПросмотр.Видимость = Ложь;
			Если  Картинки.Количество() > 0 Тогда
				Для Каждого Картинка Из Картинки Цикл
					ИмяВремФайла = ПолучитьИмяВременногоФайла("");
					Картинка.Значение.Записать(ИмяВремФайла);
					ХТМЛ = СтрЗаменить(ХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
				КонецЦикла;
			КонецЕсли;
			//---АК SHEP
			
			//+++АК SHEP 20160425
			// убираем лишний "мусор", в т.ч. чтобы картинки при печати были на след. странице, а не обрезались
			ПозТела = Найти(ХТМЛ, "<body>");
			Если ПозТела <> 0 Тогда
				ХТМЛ = "<html>" + Символы.ПС + Сред(ХТМЛ, ПозТела);
			КонецЕсли;
		Иначе
			Элементы.ХТМЛ.Видимость = ЭтоВебКлиент;
			Элементы.ФормаПечатьХТМЛ.Видимость = ЭтоВебКлиент;
			Элементы.ФормаПечатьСразуХТМЛ.Видимость = ЭтоВебКлиент;
			Элементы.ФормаПредпросмотрХТМЛ.Видимость = ЭтоВебКлиент;
			Элементы.ПолеФД.Видимость = НЕ ЭтоВебКлиент;
			Элементы.ФормаПечать.Видимость = НЕ ЭтоВебКлиент;
			Элементы.ФормаПредварительныйПросмотр.Видимость = НЕ ЭтоВебКлиент;

			///---АК БЕЛН 20160914
			//+++АК VERN 20160630 12873 Отражение на форме справочника "Поступающие предложения"
		
			Попытка
				ПоказатьПредложения =
					РазрешенПросмотрПредложений 
						И Элемент.ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.ПравилаРаботыСотрудников.ПоступающиеПредложения");
			Исключение
				ПоказатьПредложения = Ложь;
			КонецПопытки;
			
			Элементы.РеестрПоступающихПредложений.Видимость	= ПоказатьПредложения;
			Элементы.Группа3.Видимость 						= НЕ ПоказатьПредложения;
			//Владыченко Олег 20.12.2017 старт
			Элементы.ОтборНаправление.Видимость				= ПоказатьПредложения;
			Элементы.ГрупповоеОтображение.Видимость			= ПоказатьПредложения;

			//Владыченко Олег 20.12.2017 финиш

			
			Если НЕ ПоказатьПредложения Тогда
				Элементы.РеестрПоступающихПредложений.Видимость=Ложь;
				Элементы.Группа3.Видимость=Истина;           

				
			//---АК VERN 20160630 12873 Передаем управление исходному коду
			
				//+++АК SHEP 20160420
				// Получаем картинки и указываем локальный путь, добавил параметр "Картинки" в вызов процедур
				Картинки = Новый Структура;
				Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
					ЭлементФД(Элемент.ТекущиеДанные.Ссылка, Картинки);
				Иначе
					ГруппаФД(Элемент.ТекущиеДанные.Ссылка, Картинки);
				КонецЕсли;
				
				Если ЭтоВебКлиент И Картинки.Количество() > 0 Тогда
					Для Каждого Картинка Из Картинки Цикл
						ИмяВремФайла = ПолучитьИмяВременногоФайла("");
						Картинка.Значение.Записать(ИмяВремФайла);
						ХТМЛ = СтрЗаменить(ХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
						ХТМЛ = СтрЗаменить(ХТМЛ, "src=""" + Картинка.Ключ + """", "src=""" + ИмяВремФайла + """");
						//ХТМЛ = СтрЗаменить(ХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src='data:image/gif;base64," + Base64Строка(Картинка.Значение.ПолучитьДвоичныеДанные()) + "'");
					КонецЦикла;
				КонецЕсли;
				//---АК SHEP
				
				//+++АК SHEP 20160425
				// убираем лишний "мусор", в т.ч. чтобы картинки при печати были на след. странице, а не обрезались
				ПозТела = Найти(ХТМЛ, "<body>");
				Если ПозТела <> 0 Тогда
					ХТМЛ = "<html>" + Символы.ПС + Сред(ХТМЛ, ПозТела);
				КонецЕсли;
				//---АК SHEP 
				
			//+++АК VERN 20160630 12873	Конец передачи управления исходному коду
			Иначе 
				Элементы.Группа3.Видимость=Ложь;
				Элементы.РеестрПоступающихПредложений.Видимость=Истина;					
			КонецЕсли; 
	    //---АК VERN 20160630 12873 Передаем управление исходному коду
	КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОбработчик", 0.7, Истина);
	
КонецПроцедуры

///+++АК БЕЛН 20160914
&НаСервереБезКонтекста
Функция ВозвратЭлемента(Код)
	Возврат Справочники.ПравилаРаботыСотрудников.НайтиПоКоду(Код);	
КонецФункции // ()

&НаСервере
Процедура ЭлементФДНовинок(Ссылка, Картинки)
	
	УстановитьПривилегированныйРежим(Истина); //+++АК SHEP 20160418
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	ТекВерсия = Ссылка.ТекущаяВерсия;
	
	Картинки = Новый Структура;
	Для Каждого ТекСтрока Из Ссылка.ТЧКартинки  Цикл
		Если ТекВерсия = ТекСтрока.Версия Тогда
			ИмяФайла = ТекСтрока.ИмяФайла;
			ПолноеИмяФайла = "" + Каталог + ИмяФайла;
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Картинка = Новый Картинка(ПолноеИмяФайла);
				Картинки.Вставить(ТекСтрока.Ключ, Картинка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//+++АК SHEP 20160420
	//ФД.УстановитьHTML(Ссылка.ТекущийТекст, Картинки);
	//Если ЭтоВебКлиент Тогда
	ХТМЛ = СокрЛП(ХТМЛНовинок);
		// чтобы действовала прокрутка текста и картинок
	//	//ХТМЛ = СтрЗаменить(ХТМЛ, "body{margin:0px;padding:8px;overflow:hidden;width:100%;height:100%;}", "");
	//Иначе
	//	ФД.УстановитьHTML(Ссылка.ТекущийТекст, Картинки);
	//	Картинки.Очистить();
	//КонецЕсли;
	//---АК SHEP
	
КонецПроцедуры	// ЭлементФД(Ссылка)
///---АК БЕЛН 20160914

&НаСервере
Процедура ЭлементФД(Ссылка, Картинки)
	
	УстановитьПривилегированныйРежим(Истина); //+++АК SHEP 20160418
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	ТекВерсия = Ссылка.ТекущаяВерсия;
	
	Картинки = Новый Структура;
	Для Каждого ТекСтрока Из Ссылка.ТЧКартинки  Цикл
		Если ТекВерсия = ТекСтрока.Версия Тогда
			ИмяФайла = ТекСтрока.ИмяФайла;
			ПолноеИмяФайла = "" + Каталог + ИмяФайла;
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Картинка = Новый Картинка(ПолноеИмяФайла);
				Картинки.Вставить(ТекСтрока.Ключ, Картинка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//+++АК SHEP 20160420
	//ФД.УстановитьHTML(Ссылка.ТекущийТекст, Картинки);
	Если Ссылка.ИспользоватьИсполняемыйКод Тогда
		ТабДок = Новый ТабличныйДокумент();
		Выполнить(Ссылка.КодДинамическойЧасти.Получить());
		ВремФайл = ПолучитьИмяВременногоФайла("htm");
		ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
		
		ТекстДокумент = Новый ТекстовыйДокумент();
		ТекстДокумент.Прочитать(ВремФайл);
		УдалитьФайлы(ВремФайл);
		ТекущийТекст = ТекстДокумент.ПолучитьТекст();
	Иначе	
		ТекущийТекст = Ссылка.ТекущийТекст;
	КонецЕсли;	
	Если ЭтоВебКлиент Тогда
		ХТМЛ = СокрЛП(ТекущийТекст);
		// чтобы действовала прокрутка текста и картинок
		//ХТМЛ = СтрЗаменить(ХТМЛ, "body{margin:0px;padding:8px;overflow:hidden;width:100%;height:100%;}", "");
	Иначе
		ФД.УстановитьHTML(ТекущийТекст, Картинки);
		Картинки.Очистить();
	КонецЕсли;
	//---АК SHEP
	
КонецПроцедуры	// ЭлементФД(Ссылка)

&НаСервере
Процедура ГруппаФД(Ссылка, Картинки)
	
	ФД.Удалить();
	
	УстановитьПривилегированныйРежим(Истина); //+++АК SHEP 20160418
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Картинки = Новый Структура;
	ИндексКартинки = 0;
	
	РазмерШрифта1 = 12;
	Абзац1 = 0;
	
	ТекстДок = Новый ТекстовыйДокумент;
	
	ТекстДок.ДобавитьСтроку(
	"<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=EmulateIE7"" />
	|<style type=""text/css"">
	|</style>
	|</head>");
	
	ТекстДок.ДобавитьСтроку("<body>");
	
	РазмерШрифта1 = РазмерШрифта1 - 2;
	Абзац1 = Абзац1 + 15;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаРаботыСотрудников.Ссылка
	               |ИЗ
	               |	Справочник.ПравилаРаботыСотрудников КАК ПравилаРаботыСотрудников
	               |ГДЕ
	               |	ПравилаРаботыСотрудников.Родитель = &Ссылка
	               |	И ПравилаРаботыСотрудников.ЭтоГруппа = ИСТИНА";
				   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ТекстДок.ДобавитьСтроку("<p style='margin-left: " + Абзац1 + "pt'><span style='font-family: Arial; font-size: " + РазмерШрифта1 + "pt; background-color: #ffffff;'>" + Ссылка.Наименование + "</span></p>");
	
		СпрПравила = Справочники.ПравилаРаботыСотрудников;
		Выборка = СпрПравила.ВыбратьИерархически(Ссылка,,);
		Пока Выборка.Следующий()  Цикл
			
			//+++АК SHEP 20160425: в группе не отображаем помеченные на удаление
			Если Выборка.ПометкаУдаления Тогда Продолжить; КонецЕсли;
			//---АК SHEP 20160425
			
			Абзац = Абзац1 + 15 * Выборка.УровеньВВыборке();
			РазмерШрифта = РазмерШрифта1 - 2 * Выборка.УровеньВВыборке();
			Если РазмерШрифта < 1 Тогда
				РазмерШрифта = 1;
			КонецЕсли;
			
			Если Выборка.ЭтоГруппа Тогда
				
				ТекстДок.ДобавитьСтроку("<p style='margin-left: " + Абзац + "pt'><span style='font-family: Arial; font-size: " + РазмерШрифта + "pt; background-color: #ffffff;'><b>" + Выборка.Наименование + "</b></span></p>");
				
			Иначе
				
				//+++АК SHEP 20161123: содержимое не выводим
				ТекстДок.ДобавитьСтроку("<p style='margin-left: " + Абзац + "pt'><span style='font-family: Arial; font-size: " + РазмерШрифта + "pt; background-color: #ffffff;'>" + Выборка.Наименование + "</span></p>");
				//Продолжить; //Mind выводим, но вывод будет идти только для группы без вложенных групп
				//---АК SHEP 20161123
				
				Если Выборка.Ссылка.ИспользоватьИсполняемыйКод Тогда
					ТабДок = Новый ТабличныйДокумент();
					Выполнить(Выборка.Ссылка.КодДинамическойЧасти.Получить());
					ВремФайл = ПолучитьИмяВременногоФайла("htm");
					ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
					
					ТекстДокумент = Новый ТекстовыйДокумент();
					ТекстДокумент.Прочитать(ВремФайл);
					УдалитьФайлы(ВремФайл);
					ТекущийТекст = ТекстДокумент.ПолучитьТекст();
				Иначе
					ТекущийТекст = Выборка.ТекущийТекст;
				КонецЕсли;	
				ИндексТело = Найти(ТекущийТекст,"<body>");
				Тело = Сред(ТекущийТекст, ИндексТело);
				Тело = СтрЗаменить(Тело, "<body>", "");
				Тело = СтрЗаменить(Тело, "</body>", "");
				Тело = СтрЗаменить(Тело, "</html>", "");
				
			  //+++АК SHEP 20160804: добавил условие (на папке не печатаются картинки, глючит форматирование?)
			  Если НЕ ЭтоВебКлиент Тогда
				ИндексШрифт = Найти(Тело, "font-size:");
				Если ИндексШрифт = 0 Тогда
					ДобавитьРазмерШрифта = Истина;
				Иначе
					ДобавитьРазмерШрифта = Ложь;
				КонецЕсли;
				
				Пока ИндексШрифт > 0 Цикл
					
					ШрифтСтарый = Сред(Тело, ИндексШрифт,16);
					ШрифтНовый = "Font-size: " + РазмерШрифта + "pt;";
					Тело = СтрЗаменить(Тело, ШрифтСтарый, ШрифтНовый);
					ИндексШрифт = Найти(Тело, "font-size:");
					
				КонецЦикла;
				
				Пока Найти(Тело, "<p") > 0 Цикл
					Если ДобавитьРазмерШрифта Тогда
						//Тело = СтрЗаменить(Тело, "<p", "<P style='margin-left: " + Абзац + "pt'><span style='font-family: Arial; font-size: " + РазмерШрифта + "pt; background-color: #ffffff;'");
						Тело = СтрЗаменить(Тело, "<p", "<P style='margin-left: " + Абзац + "pt'><span style='font-family: Arial; font-size: " + РазмерШрифта + "pt'");
						Тело = СтрЗаменить(Тело, "</p>", "</span></p>");
					Иначе
						Тело = СтрЗаменить(Тело, "<p", "<P style='margin-left: " + Абзац + "pt'");
					КонецЕсли;
				КонецЦикла;
			  КонецЕсли;
				
				ТекВерсия = Выборка.ТекущаяВерсия;
				СтруктураОтбор = Новый Структура("Версия", ТекВерсия);
				МассивСтрокТекВерсии = Выборка.ТЧКартинки.НайтиСтроки(СтруктураОтбор);
				Для Каждого ТекСтрока Из МассивСтрокТекВерсии Цикл //Выборка.ТЧКартинки  Цикл
					//Если ТекВерсия = ТекСтрока.Версия Тогда
						ИмяФайла = ТекСтрока.ИмяФайла;
						ПолноеИмяФайла = "" + Каталог + ИмяФайла;
						Файл = Новый Файл(ПолноеИмяФайла);
						Если Файл.Существует() Тогда
							Картинка = Новый Картинка(ПолноеИмяФайла);
							ИндексКартинки = ИндексКартинки + 1;
							КлючСтарый = ТекСтрока.Ключ;
							КлючНовый = КлючСтарый + ИндексКартинки;
							Картинки.Вставить(КлючНовый, Картинка);
							Тело = СтрЗаменить(Тело, КлючСтарый, КлючНовый);
						КонецЕсли;
					//КонецЕсли;
				КонецЦикла;
				
				ТекстДок.ДобавитьСтроку(Тело);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
	ТекстДок.ДобавитьСтроку("<p></br></p>");
	ТекстДок.ДобавитьСтроку("</body>");
	ТекстДок.ДобавитьСтроку("</html>");
	
	//+++АК SHEP 20160420
	//ФД.УстановитьHTML(ТекстДок.ПолучитьТекст(), Картинки);
	Если ЭтоВебКлиент Тогда
		ХТМЛ = СокрЛП(ТекстДок.ПолучитьТекст());
	Иначе
		ФД.УстановитьHTML(ТекстДок.ПолучитьТекст(), Картинки);
		Картинки.Очистить();
	КонецЕсли;
	//---АК SHEP
	
КонецПроцедуры	// ГруппаФД(Ссылка)

&НаКлиенте
Процедура НайтиПриИзменении(Элемент)
	
	ФД.Удалить();
	
	Если СтрДлина(ЧтоИщем) > 0 Тогда 
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийТекст");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ЧтоИщем;
	
КонецПроцедуры	// НайтиПриИзменении(Элемент)

&НаКлиенте
Процедура ПечататьВыделенныйТекст(Команда)
	
	ВыделенныйТекст = Элементы.ПолеФД.ВыделенныйТекст;
	
КонецПроцедуры

//+++АК SHEP 20160420
// На тонком клиенте при запуске под веб-сервером картинки не отображались, добавил поле HTML документа
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоВебКлиент = (Лев(ПолучитьНавигационнуюСсылкуИнформационнойБазы(), 4) = "http");
	ЭтоВебКлиент = ЭтоВебКлиент ИЛИ ЗначениеЗаполнено(Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("ОтображатьДляФС_ПРС_ХТМЛ"));
	
	Элементы.ХТМЛ.Видимость = ЭтоВебКлиент;
	Элементы.ФормаПечатьХТМЛ.Видимость = ЭтоВебКлиент;
	Элементы.ФормаПечатьСразуХТМЛ.Видимость = ЭтоВебКлиент И ЗначениеЗаполнено(Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("ПечатьСразуХТМЛ"));
	Элементы.ФормаПредпросмотрХТМЛ.Видимость = ЭтоВебКлиент;
	Элементы.ПолеФД.Видимость = НЕ ЭтоВебКлиент;
	Элементы.ФормаПечать.Видимость = НЕ ЭтоВебКлиент;
	Элементы.ФормаПредварительныйПросмотр.Видимость = НЕ ЭтоВебКлиент;
	
	//+++АК VERN 20160630 12873 Отражение на форме справочника "Поступающие предложения"
	
	Элементы.РеестрПоступающихПредложений.Видимость=Ложь;
	
	Попытка
		РазрешенПросмотрПредложений=ПравоДоступа("Просмотр", Метаданные.Справочники.АК_ПоступающиеПредложения);
	Исключение
		РазрешенПросмотрПредложений=Ложь;
	КонецПопытки;
	Если НЕ РазрешенПросмотрПредложений Тогда
		Элементы.РеестрПоступающихПредложений.Видимость = Ложь;
	КонецЕсли; 
	//+++АК VERN 20160630 12873 Отражение на форме справочника "Поступающие предложения"
	///+++АК БЕЛН 20160914
	СформироватьХТМЛНовинок();
	///---АК БЕЛН 20160914
	
//+++АК MALV 20170522 Задача №15824
//Не даем пользователю провалиться внутр папки "Реестр новинок
	АК_РеестрНовинок = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000079", Истина, Справочники.ПравилаРаботыСотрудников.ПустаяСсылка());
//---АК MALV 20170522

	СрокОповещения = Константы.СрокОповещенияОНовыхВопросахТестированияПродавцов.Получить();	
	Если СрокОповещения>=ТекущаяДата() Тогда
		Элементы.ФормаГруппа2.Заголовок = "!!! Новые вопросы скайп-тестирования !!!";
		ЕстьНовыеВопросыТестирования = Истина;
	КонецЕсли;	
КонецПроцедуры

///+++АК БЕЛН 20160914
&НаСервере
Процедура СформироватьХТМЛНовинок()
	
	ТорговаяТочка = ?(ПараметрыСеанса.ТорговаяТочкаПоАйпи = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("999_Тест"), Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	//ТорговаяТочка=Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("669М_Головинское5");
	//ЭтоАдминистратор = Ложь;
	//РолиТекПользователя = Новый СписокЗначений;
	//МассивРолейТекПользователя = МеханизмОбменаСообщениями.ПолучитьРолиПользователяИлиФизЛица(ПараметрыСеанса.ТекущийПользователь);
	//Если МассивРолейТекПользователя <> Неопределено Тогда
	//	РолиТекПользователя.ЗагрузитьЗначения(МассивРолейТекПользователя);
	//	Если МассивРолейТекПользователя.Найти(Справочники.РолиПользователей.Администратор) <> Неопределено Тогда
	//		ЭтоАдминистратор = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		УстановитьПривилегированныйРежим(Истина); //+++АК SHEP 20160418
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтправкиПоНовинкам.Номенклатура,
			|	ОтправкиПоНовинкам.Характеристика,
			|	ОтправкиПоНовинкам.Магазин как ТорговаяТочка,"""" как Комментарий
			|ИЗ
			|	РегистрСведений.ОтправкиПоНовинкам КАК ОтправкиПоНовинкам
			|ГДЕ
			|	ОтправкиПоНовинкам.ДатаДобавления МЕЖДУ &ДатаДобавления1 И &ДатаДобавления2
			|	И ОтправкиПоНовинкам.Магазин = &Магазин 
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтправкиПоНовинкам.Номенклатура,
			|	ОтправкиПоНовинкам.Характеристика,
			|	ОтправкиПоНовинкам.Магазин";
        ДнейАкт=?(Константы.ДнейАктуальностиНовинок.Получить()=0,1,Константы.ДнейАктуальностиНовинок.Получить());
		Запрос.УстановитьПараметр("ДатаДобавления1"	, НачалоДня(ТекущаяДата() - ДнейАкт*24*60*60));
		Запрос.УстановитьПараметр("ДатаДобавления2"	, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Магазин"			, ТорговаяТочка);

		Результат = Запрос.Выполнить();

		ТЗМагазиновИТовара = Результат.Выгрузить();
		Адрес=Справочники.ПравилаРаботыСотрудников.СформироватьДинамическуюЧастьПоПараметрам(Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000086"),ТЗМагазиновИТовара,ТекущаяДата(),Ложь,Истина,Ложь);
		Если ЗначениеЗаполнено(Адрес) Тогда
			СсылкаПравила=Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000086");
			СоотТаблицы=ПолучитьИзВременногоХранилища(Адрес);
			Если СоотТаблицы.Количество()>0 Тогда
				
				ТекстХТМЛ = СсылкаПравила.ТекущийТекст;
				//ТекстХТМЛ=СтрЗаменить(ТекстХТМЛ,"#ДинамическаяЧасть",Эл.Значение);
				//Поз=Найти(ТекстХТМЛ,"#ДинамическаяЧасть");
				Эл=СоотТаблицы.Получить(ТорговаяТочка);
				Если Эл<>Неопределено Тогда
					ДинЧасть=Строка(СоотТаблицы.Получить(ТорговаяТочка).ТекстПолный);
					Поз=Найти(ДинЧасть,"<TABLE");
					ДинЧасть=Сред(ДинЧасть,Поз);
					ДинЧасть=СтрЗаменить(ДинЧасть,"</BODY>","");
					ДинЧасть=СтрЗаменить(ДинЧасть,"</HTML>","");
					//ДинЧасть=ДинЧасть+"</body>"+"</html>";
					ХТМЛНовинок=СтрЗаменить(ТекстХТМЛ,"#ДинамическаяЧасть",ДинЧасть);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
///---АК БЕЛН 20160914

&НаКлиенте
Функция СписокРассылки(Команда)
	ГруппаРассылкиНовыеПравилаРаботыСотрудников = ГруппаРассылкиНовыеПравилаРаботыСотрудниковПолучить();
	Если ЗначениеЗаполнено(ГруппаРассылкиНовыеПравилаРаботыСотрудников) Тогда
		СтруктураОтбора = Новый Структура("Группа", ГруппаРассылкиНовыеПравилаРаботыСотрудников);
		ОткрытьФорму("РегистрСведений.АК_ГруппыРассылки.ФормаСписка", Новый Структура("Отбор", СтруктураОтбора), ЭтаФорма);
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ГруппаРассылкиНовыеПравилаРаботыСотрудниковПолучить()
	Возврат Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("Новые правила работы сотр");
КонецФункции
//---АК SHEP 20160420

//+++АК SHEP 20160425: команды для просмотра и печати ХТМЛ
&НаКлиенте
Процедура ПредпросмотрХТМЛ(Команда)
Перем Документ;

	Документ = Элементы.ХТМЛ.Документ;
	sExpression = "
	|printPreview();
	|
	|function printPreview() {
	|	var yourDOCTYPE = ""<!DOCTYPE html>""; // your doctype declaration
	|	var printPreview = window.open('about:blank', 'print_preview', ""resizable=yes,scrollbars=yes,status=yes"");
	|	var printDocument = printPreview.document;
	|	printDocument.open();
	|	printDocument.write(yourDOCTYPE+
	|			   ""<html>""+
	|				   document.documentElement.innerHTML+
	|			   ""</html>"");
	|	printDocument.close();
	|}";
	Документ.parentWindow.execScript(sExpression);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьХТМЛ(Команда)
Перем Документ;

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Документ = Элементы.ХТМЛ.Документ;
	sExpression = "
	|CallPrint();
	|
	|function CallPrint() {
	|	var yourDOCTYPE = ""<!DOCTYPE html>""; // your doctype declaration
	|	var printDocument = window.open('', '', 'width=200,height=100');
	|	var printPreview = printDocument.document;
	|	printPreview.write(yourDOCTYPE+
	|			   ""<html>""+
	|				   document.documentElement.innerHTML+
	|			   ""</html>"");
	|	printPreview.close();
	|	printDocument.focus();
	|	printDocument.print();
	|	printDocument.close();
	|}";
	Документ.parentWindow.execScript(sExpression);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСразуХТМЛ(Команда)
	Документ = Элементы.ХТМЛ.Документ;
	Если Документ.queryCommandSupported("Print") Тогда
		Документ.execCommand("Print", Ложь);
		//ЭтаФорма.Элементы.ХТМЛ.Документ.execCommand(Команда, Ложь);
	КонецЕсли;	
КонецПроцедуры
//---АК SHEP 20160425


//+++АК VERN 20160725 12873 Загрузка предложений поставщиков

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ((ТипЗнч(ИсточникВыбора)=Тип("УправляемаяФорма")) и (ИсточникВыбора.ИмяФормы="Обработка.АК_ОтображениеНаКарте.Форма.Форма"))
		или (ТипЗнч(ВыбранноеЗначение.СсылкаНаОбъект)=Тип("СправочникСсылка.АК_ПоступающиеПредложения")) тогда
		
		ЗначениеОтбора=ВыбранноеЗначение.СсылкаНаОбъект;
		
		ОтображениеСписком=Элементы.РеестрПоступающихПредложений.Отображение=ОтображениеТаблицы.Список;
		Элементы.РеестрПоступающихПредложений.Отображение=ОтображениеТаблицы.Список;
		
		ЭлементОтбора = РеестрПоступающихПредложений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	    ЭлементОтбора.Использование = Истина;
	    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	    ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
		
		Элементы.РеестрПоступающихПредложенийПредложенияНаКрате.Пометка=Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаPDF(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
   	Диалог.Заголовок = "Выберите файл";
   	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "Формат PDF (*.pdf)|*.pdf;|"+
				"Изображения (*.bmp;*.jpg;*.jpeg;*.tif;*.gif;*.png;)|*.bmp;*.jpg;*.jpeg;*.tif;*.gif;*.png" ;
   	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	Если НЕ Диалог.Выбрать() Тогда
		возврат;
	КонецЕсли;
	
	Расширение=Диалог.ПолноеИмяФайла;
	Поз=Найти(Расширение,".");
	Если Поз=0 тогда
		Расширение="";
	иначе
		Пока Поз>0 цикл
			Расширение=сред(Расширение,Поз+1);
			Поз=Найти(Расширение,".");
		КонецЦикла;
		Расширение=врег(сокрлп(Расширение));
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("ИсходныйФайл", Диалог.ПолноеИмяФайла);
	ПараметрыПодбора.Вставить("Расширение", Расширение);
	
	ОткрытьФорму("Справочник.АК_ПоступающиеПредложения.Форма.ФормаЗагрузкаPDF", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаWord(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
   	Диалог.Заголовок = "Выберите файл";
   	Диалог.ПолноеИмяФайла = ""; 
   	Фильтр = "Файл Word (*.doc;*.docx)|*.doc;*.docx"; 
   	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	Если НЕ Диалог.Выбрать() Тогда
		возврат;
   	КонецЕсли;
	
	ПоказатьОповещениеПользователя("Загрузка",,"Чтение файла");
	
	СоответствиеПолей=Новый Структура;
	СоответствиеПолей.Вставить("ID","id");
	СоответствиеПолей.Вставить("manufacture_address","АдресПроизводства");
	СоответствиеПолей.Вставить("assortment","Ассортимент");
	СоответствиеПолей.Вставить("type_business","ВидБизнеса");
	СоответствиеПолей.Вставить("contact_position","ДолжностьКонтактногоЛица");
	СоответствиеПолей.Вставить("inn","ИНН");
	СоответствиеПолей.Вставить("contact","КонтактноеЛицо");
	СоответствиеПолей.Вставить("company_name","Наименование");
	СоответствиеПолей.Вставить("production_volume","ОбъемыПроизводстваРеализации");
	СоответствиеПолей.Вставить("main_clients","ОсновныеКлиенты");
	СоответствиеПолей.Вставить("company_presentation","Презентация");
	СоответствиеПолей.Вставить("product_category","ПродуктоваяКатегория");
	СоответствиеПолей.Вставить("business_region","Регион");
	СоответствиеПолей.Вставить("company_director","Руководитель");
	СоответствиеПолей.Вставить("phone","Телефон");
	СоответствиеПолей.Вставить("pack_type","ТипыИВидыУпаковки");
	СоответствиеПолей.Вставить("email","ЭлектроннаяПочта");
	СоответствиеПолей.Вставить("legal_address","ЮридическийАдрес");
	
	СоответствиеПолей2=Новый Структура;
	СоответствиеПолей2.Вставить("delivery_moscow","ДоставкаВМоскву");
	СоответствиеПолей2.Вставить("vkusvill_label","ПроизводствоПодМаркойВВ");
	//АИК 16.01.2017 старт
	СоответствиеПолей2.Вставить("change_recipe","ДоработкаРецептуры");
	//АИК 16.01.2017 финиш

	
	ПараметрыЗаполнения = Новый Структура;

	ПриложениеWord=Новый COMОбъект("Word.Application"); 
	ПриложениеWord.Documents.Open(Диалог.ПолноеИмяФайла);
	Документ = ПриложениеWord.ActiveDocument();
	
	КоличествоПолейФормы=Документ.FormFields.Count;
	
	сообщить(КоличествоПолейФормы);
	
	Если КоличествоПолейФормы=0 тогда
		
		ПоказатьОповещениеПользователя("Анализ файла",,"Анкета в старом формате");
		//форма старого образца, обрабатываем ее как текст
		ПриложениеWord.Selection.WholeStory();
		
		Текст=ПриложениеWord.Selection.Text;
		
		Документ.Close(); 
		ПриложениеWord.Quit();	
		
		Текст=СтрЗаменить(Текст,Символы.ВК," ");
		Текст=СтрЗаменить(Текст,Символы.ПС," ");
		Текст=СтрЗаменить(Текст,Символы.ВТаб," ");
		Текст=СтрЗаменить(Текст,Символы.НПП," ");
		Текст=СтрЗаменить(Текст,Символы.ПФ," ");
		Текст=СтрЗаменить(Текст,Символы.Таб," ");
		
		Текст=СтрЗаменить(Текст,"«","""");
		Текст=СтрЗаменить(Текст,"»","""");
		Текст=СтрЗаменить(Текст,"(да/нет)"," ");
		
		Поз = НайтиНедопустимыеСимволыXML(Текст);
		Пока Поз <> 0 Цикл
	  		НедопустимыйСимвол = Сред(Текст, Поз,1);
	  		Текст = СтрЗаменить(Текст, НедопустимыйСимвол, " ");
	  		Поз = НайтиНедопустимыеСимволыXML(Текст);
		КонецЦикла; 	
		
		Пока Найти(Текст,"  ")>0 Цикл
	  		Текст = СтрЗаменить(Текст, "  ", " ");
		КонецЦикла; 	

		СоответствиеПолей=Новый СписокЗначений;
		СоответствиеПолей.Добавить("Наименование","Наименование юридического лица");
		СоответствиеПолей.Добавить("ВидБизнеса","Вид бизнеса (производитель/дистрибьютор/импортер)");
		СоответствиеПолей.Добавить("ПродуктоваяКатегория","Продуктовая категория");
		СоответствиеПолей.Добавить("ОбъемыПроизводстваРеализации","Объем производства/реализации в натуральном выражении (тонны, кг, литры, штуки и т.п) в месяц");
		СоответствиеПолей.Добавить("Регион","Регион (округ, область)");
		СоответствиеПолей.Добавить("Ассортимент","Ассортимент:");
		СоответствиеПолей.Добавить("ТипыИВидыУпаковки","Типы и виды упаковки:");
		СоответствиеПолей.Добавить("АдресПроизводства","Адрес производства (если есть):");
		СоответствиеПолей.Добавить("ЮридическийАдрес","Адрес юридический:");
		СоответствиеПолей.Добавить("КонтактноеЛицо","Контактное лицо (должность, телефон, е-мейл):");
		СоответствиеПолей.Добавить("ОсновныеКлиенты","Основные клиенты (федеральные/ региональные сети, дистрибьюторы, рынки, розница)");
		СоответствиеПолей.Добавить("ДоставкаВМоскву","Существует ли возможность доставки продукции на РЦ в Москве?");	
		СоответствиеПолей.Добавить("ПроизводствоПодМаркойВВ","Готовы ли производить продукцию под торговой маркой ""ВкусВилл""?");	
		СоответствиеПолей.Добавить("Руководитель","Руководитель компании (Ф.И.О./Контакты)");
		СоответствиеПолей.Добавить("Конец","дата заполнения:");
		
		ПоляДаНет=Новый Массив;
		ПоляДаНет.Добавить("ДоставкаВМоскву");
		ПоляДаНет.Добавить("ПроизводствоПодМаркойВВ");
		//АИК 16.01.2017 старт
		ПоляДаНет.Добавить("ДоработкаРецептуры");
		//АИК 16.01.2017 финиш


		
		Для сч1=0 по СоответствиеПолей.Количество()-2 цикл
			ПолеПоиска1=СоответствиеПолей[сч1].Представление;
			ПолеЗаполнения=СоответствиеПолей[сч1].Значение;
			Если ПолеЗаполнения="Конец" тогда
				прервать;
			КонецЕсли;
			Поз=Найти(Текст,ПолеПоиска1);
			Если Поз>0 тогда
				Текст=СокрЛ(сред(Текст,Поз+СтрДлина(ПолеПоиска1)));
				ЗначениеПоля="";
				Для сч2=сч1+1 по СоответствиеПолей.Количество()-1 цикл
					ПолеПоиска2=СоответствиеПолей[сч2].Представление;
					Поз=Найти(Текст,ПолеПоиска2);
					Если Поз>0 тогда
						ЗначениеПоля=СокрЛП(лев(Текст,Поз-1));
						Текст=сред(Текст,Поз);
						прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеПоля="" тогда
					ЗначениеПоля=Текст;
					Текст="";
				КонецЕсли;
				Если Найти(ЗначениеПоля,"@")=0 тогда
					ЗначениеПоля=сокрлп(СтрЗаменить(ЗначениеПоля,"_"," "));
				КонецЕсли;
				Если ПоляДаНет.Найти(ПолеЗаполнения)=Неопределено Тогда 
					ПараметрыЗаполнения.Вставить(ПолеЗаполнения,ЗначениеПоля);
				иначе
					ПараметрыЗаполнения.Вставить(ПолеЗаполнения,врег(сокрлп(ЗначениеПоля))="ДА");
				КонецЕсли;
				Если Текст="" тогда
					Прервать;
				КонецЕсли;
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдено поле """+ПолеПоиска1+"""");
			КонецЕсли;
		КонецЦикла;		
		
	иначе
		
		ПоказатьОповещениеПользователя("Анализ файла",,"Анкета в новом формате");
	
		Для НомерПоля = 1 по КоличествоПолейФормы Цикл
			Поле=Документ.FormFields(НомерПоля);
			ИмяПоля=Поле.Name;
			ИмяРеквизита="";
			Если СоответствиеПолей.Свойство(ИмяПоля,ИмяРеквизита) Тогда
				ЗначениеПоля=Поле.Result;
			ИначеЕсли СоответствиеПолей2.Свойство(ИмяПоля,ИмяРеквизита) Тогда
				ЗначениеПоля=Поле.Result="Да";
			КонецЕсли; 
			ПараметрыЗаполнения.Вставить(ИмяРеквизита,ЗначениеПоля);
			 //старт
			//Документ.Close(); 
			//ПриложениеWord.Quit();	
			 //финиш
		КонецЦикла;
		    //старт

			Документ.Close(); 
			ПриложениеWord.Quit();	
		     //финиш

	КонецЕсли;
	
	//--- оперделение координат по адресу
	
	ПоказатьОповещениеПользователя("Анализ файла",,"Определение координат");
	
	попытка
		ПараметрыЗаполнения.Вставить("КоординатыОпределены",Ложь);
		ПараметрыЗаполнения.Вставить("СтрокаКоординат","");
		Если НЕ ПустаяСтрока(ПараметрыЗаполнения.АдресПроизводства) тогда
			Адрес=ПараметрыЗаполнения.АдресПроизводства;
		иначе
			Адрес=ПараметрыЗаполнения.ЮридическийАдрес;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Адрес) тогда
		    WinHttp = ПолучитьГеокодерЯндекс();
			ПараметрыЗаполнения.КоординатыОпределены=ПолучитьСтрокуКоординат(WinHttp,Адрес,ПараметрыЗаполнения.СтрокаКоординат);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ПоказатьОповещениеПользователя("Создание элемента справочника",,"Новый элемент");
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
 	ФормаЭлемента = ПолучитьФорму("Справочник.АК_ПоступающиеПредложения.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
 	ФормаЭлемента.Открыть();
	
	ПоказатьОповещениеПользователя("Создание элемента справочника",,"Новый элемент создан");
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьГеокодерЯндекс() экспорт
	
	Попытка
		
		Сервис = "geocode-maps.yandex.ru";
		Порт = 443;
		
	    WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	    WinHttp.Option(2,"utf-8");
	    WinHttp.Open("POST","https://geocode-maps.yandex.ru:443/1.x/",0);
	    WinHttp.SetRequestHeader("Accept-Language", "ru");
	    WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	    WinHttp.setRequestHeader("Content-Language", "ru");
	    WinHttp.setRequestHeader("Content-Charset", "utf-8");
	    WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
		
		Возврат WinHttp;
		
	Исключение	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Координаты41(СтрокаКоординат,Реверс=Ложь) экспорт
	Поз=Найти(СтрокаКоординат,",");
	Если Поз=0 тогда
		Поз=Найти(СтрокаКоординат," ");
	КонецЕсли;        		
	
	Если Поз=0 тогда
		Возврат "";
	КонецЕсли;
	
	К1=лев(сокрлп(Лев(СтрокаКоординат,Поз-1)),20);
	К2=лев(сокрлп(Сред(СтрокаКоординат,Поз+1)),20);
	
	Если Реверс тогда
		Возврат К2+","+К1;
	иначе
		Возврат К1+","+К2;
	КонецЕсли;
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуКоординат(WinHttp,Адрес,СтрокаКоординат) экспорт
    WinHttp.Send("geocode="+Адрес);
    ОтветСервера = WinHttp.ResponseText();
	п1=найти(ОтветСервера,"<pos>");
	п2=найти(ОтветСервера,"</pos>");
	Если п1>0 и п2>п1 тогда
		СтрокаКоординат=Координаты41(сред(ОтветСервера,п1+5,п2-п1-5),Истина);
	    Возврат НЕ ПустаяСтрока(СтрокаКоординат);
	иначе
		СтрокаКоординат="";
		Возврат Ложь;
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Установка порядка сортировки в списке предложений по дате
	Порядок=ЭтаФорма.РеестрПоступающихПредложений.Порядок;
	Порядок.Элементы.Очистить();
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Дата"); // Поле, по которому будет упорядочивание
	ЭлементПорядка.Использование = Истина;
	
	Если ЕстьНовыеВопросыТестирования Тогда
		Предупреждение("Обратите внимание! Есть новые вопросы для тестирования!");
	КонецЕсли;	
	
	Если ТолькоПоступающиеПредложения тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;		
		ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ПравилаРаботыСотрудников.ПоступающиеПредложения");		
	    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный; 
		ЭлементОтбора.Использование = Истина;
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(КэшВременныйКаталог) Тогда
		УдалитьВременныеФайлыHTMLКлиент(КэшВременныйКаталог, Истина);
		КэшВременныйКаталог = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменПредложениями(Команда)
	//принудительный обмен с сайтом
	РегламентныеЗаданияСервер.АК_ПолучениеПредложенийПоставщиков();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзФайлаXML(Команда)
	//загрузка предложений из файла, выгруженного с сатй
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
   	Диалог.Заголовок = "Выберите файл выгрузки";
   	Диалог.ПолноеИмяФайла = ""; 
   	Фильтр = "Файл выгрузки (*.xml)|*.xml"; 
   	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	Если НЕ Диалог.Выбрать() Тогда
		возврат;
   	КонецЕсли;
	
	ВызватьЗагрузкуИзФайлаXMLНаСервере(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла)));
	
КонецПроцедуры

&НаСервере
Процедура ВызватьЗагрузкуИзФайлаXMLНаСервере(АдресВХранилище)
	ФайлПриемник = ПолучитьИмяВременногоФайла("xml");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДанныеХранилища.Записать(ФайлПриемник);
	РегламентныеЗаданияСервер.АК_ПолучениеПредложенийПоставщиков(ФайлПриемник);
КонецПроцедуры


&НаКлиенте
Процедура ПредложенияНаКрате(Команда)
	перем о2;
	Если Элементы.РеестрПоступающихПредложенийПредложенияНаКрате.Пометка тогда
		//сбосим отбор
		
		Элементы.РеестрПоступающихПредложенийПредложенияНаКрате.Пометка=Ложь;
		
		Если НЕ ОтображениеСписком тогда
			ОтображениеСписком=Элементы.РеестрПоступающихПредложений.Отображение=ОтображениеТаблицы.ИерархическийСписок;
		КонецЕсли;
		Для Каждого ЭлементОтбора из РеестрПоступающихПредложений.Отбор.Элементы цикл
			Если ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора и ЭлементОтбора.Использование и ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
				РеестрПоступающихПредложений.Отбор.Элементы.Удалить(ЭлементОтбора);
				прервать;
			КонецЕсли;
		КонецЦикла;

	иначе
		//26.12.2016 Владыченко Олег старт
		//ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
		//ПараметрыПодбора.Вставить("Режим",					"РежимПредложенияНаКарте");
		//26.12.2016 Владыченко Олег финиш

		//ПараметрыПодбора.Вставить("Наименование",			Объект.Наименование);
		//ПараметрыПодбора.Вставить("Ссылка",					Объект.Ссылка);
		//ПараметрыПодбора.Вставить("СтрокаКоординат",		Объект.СтрокаКоординат);
		//ПараметрыПодбора.Вставить("КоординатыОпределены",	Объект.КоординатыОпределены);
		
		//Если НЕ ПустаяСтрока(Объект.АдресПроизводства) тогда
		//	ПараметрыПодбора.Вставить("Адрес", Объект.АдресПроизводства);
		//иначе
		//	ПараметрыПодбора.Вставить("Адрес", Объект.ЮридическийАдрес);
		//КонецЕсли;
		
		//26.12.2016 Владыченко Олег старт
		//о2="\\10.0.0.51\1c$\Справочник хранилище доп информации\АК_ОтображениеНаКарте.epf";
		//Файл = Новый Файл(о2); 
		//Если Файл.Существует() тогда
		//	//ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
		//	Отказ=Истина;
		//	
		//	АдресХранилища = "";
		//	Результат = ПоместитьФайл(АдресХранилища, сокрлп(о2), , Ложь);
		//	ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
		//	// Откроем форму подключенной внешней обработки
		//	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма", ПараметрыПодбора, ЭтаФорма, Ложь);
		//иначе	
		//	ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма, Ложь);
		//КонецЕсли;
		
		мМассив=Элементы.РеестрПоступающихПредложений.ВыделенныеСтроки;	
		
		ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
		ПараметрыПодбора.Вставить("Режим",					"РежимПредложенияНаКарте");
		
		//+++АК mika 2017.12.01 номера задачи нет. Исправление ошибки разработчика.
		ПараметрыПодбора.Вставить("Массив", мМассив);
		//---АК mika 
		
		ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма,Ложь);
		//26.12.2016 Владыченко Олег финиш
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)
	УстановитьПривилегированныйРежим(Истина);
    Возврат ВнешниеОбработки.Подключить(АдресХранилища);
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции 


&НаКлиенте
Процедура ЗагрузитьИзПочты(Команда)
	ПараметрыФормы = Новый Структура("", );
	ОткрытьФорму("Обработка.АК_ПредложенияПоставщиковПоПочте.Форма", ПараметрыФормы);	
КонецПроцедуры

//---АК VERN 20160725 12873 Загрузка предложений поставщиков

&НаКлиенте
Процедура КомандаСписка1(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписка2(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписка3(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

//+++АК SHEP 20160928
&НаКлиенте
Процедура ОткрытьХТМЛВБраузере(Команда)
	
	Если ПустаяСтрока(ХТМЛ) Тогда Возврат; КонецЕсли;
	
	ИмяФайлаХТМЛ = ПолучитьИмяВременногоФайла(".html");
	ТекстХТМЛ = Новый ТекстовыйДокумент;
	ТекстХТМЛ.УстановитьТекст(ХТМЛ);
	ТекстХТМЛ.Записать(ИмяФайлаХТМЛ);
	
	ЗапуститьПриложение(ИмяФайлаХТМЛ);
	
КонецПроцедуры
//---АК SHEP 20160928

//+++АК SHEP 20161119
&НаСервереБезКонтекста
Процедура ЗаписьЖурналаРегистрацииНаСервере(Ссылка, КодОшибки)
	ЗаписьЖурналаРегистрации("Справочник.ПравилаРаботыСотрудников", УровеньЖурналаРегистрации.Ошибка,, Ссылка, "Ошибка HTML2PDF: " + КодОшибки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКаталогПрограммыHTML2PDF()
	
	КаталогПрограммыHTML2PDF = РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(, "КаталогПрограммыHTML2PDF");
	Если КаталогПрограммыHTML2PDF = Неопределено Тогда
		КаталогПрограммыHTML2PDF = "\\10.0.0.90\pdf-сертификаты\HTML2PDF_Pilot\";
	ИначеЕсли Прав(КаталогПрограммыHTML2PDF, 1) <> "\" Тогда
		КаталогПрограммыHTML2PDF = КаталогПрограммыHTML2PDF + "\";
	КонецЕсли;
	
	Возврат КаталогПрограммыHTML2PDF;
КонецФункции

&НаКлиенте
Процедура КонвертироватьХТМЛвPDF(Команда)
	
	Если ПустаяСтрока(ХТМЛ) Тогда Возврат; КонецЕсли;
	
	ИмяФайлаХТМЛ = ПолучитьИмяВременногоФайла(".html");
	ТекстХТМЛ = Новый ТекстовыйДокумент;
	ТекстХТМЛ.УстановитьТекст(ХТМЛ);
	ТекстХТМЛ.Записать(ИмяФайлаХТМЛ);
	
	//+++АК SHEP 20161121: делаем через макет
	//КодОшибки = 0; ПерваяРегистрацияКомпонента = Истина;
	//КаталогПрограммыHTML2PDF = ПолучитьКаталогПрограммыHTML2PDF();
	//Пока Истина Цикл
	//	ЗапуститьПриложение(КаталогПрограммыHTML2PDF + "HTML2PDF_Pilot.exe """ + ИмяФайлаХТМЛ + """ /porient Landscape /margin-left 10 /margin-bottom 10",, Истина, КодОшибки);
	//	
	//	Если КодОшибки = 0 Тогда Прервать; КонецЕсли;
	//	
	//	КодОшибки = ?(КодОшибки < 0, КодОшибки, КодОшибки - Pow(2, 32));
	//	
	//	// регистрируем компоненту в "тихом" режиме
	//	Если КодОшибки = -9 И ПерваяРегистрацияКомпонента Тогда
	//		ЗапуститьПриложение("regsvr32.exe /s """ + КаталогПрограммыHTML2PDF + "html2pdfx.dll""",, Истина);
	//		ПерваяРегистрацияКомпонента = Ложь;
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Предупреждение("Ошибка при запуске конвертации: " + КодОшибки);
	//	ЗаписьЖурналаРегистрацииНаСервере(Элементы.Список.ТекущиеДанные.Ссылка, КодОшибки);
	//	Возврат;
	//КонецЦикла;
	
	КаталогПрограммыHTML2PDF = "";
	Если НЕ СохранитьКомпонентуНаКлиенте("wkhtmltopdf_exe", КаталогПрограммыHTML2PDF) Тогда
		Предупреждение("Ошибка при конвертации!");
		Возврат;
	КонецЕсли;
	
	Image_dpi = 600;
	Image_quality = 94;
	ПараметрКонвертацииКартинок = "--image-dpi " + Формат(Image_dpi, "ЧГ=") + " --image-quality " + Формат(Image_quality, "ЧГ=");
	ЗапуститьПриложение(КаталогПрограммыHTML2PDF + "wkhtmltopdf.exe " + ПараметрКонвертацииКартинок + " """ + ИмяФайлаХТМЛ + """ """ + ИмяФайлаХТМЛ + ".pdf""",, Истина);
	//---АК SHEP 20161121
	
	ЗапуститьПриложение(ИмяФайлаХТМЛ + ".pdf");
	
КонецПроцедуры
//---АК SHEP 20161119

//+++АК SHEP 20161121: делаем через макет
&НаКлиенте
Функция СохранитьКомпонентуНаКлиенте(ИмяМакета, Каталог)
Перем Поз, АдресВремХранилища;
	
	Поз = Найти(ИмяМакета, "_");
	Каталог = "C:\" + ?(Поз = 0, ИмяМакета, Лев(ИмяМакета, Поз - 1)) + "\";
	ФайлКаталог = Новый Файл(Каталог);
	Если НЕ ФайлКаталог.Существует() Тогда
		Попытка
			СоздатьКаталог(Каталог);
		Исключение
			Каталог = КаталогВременныхФайлов();
		КонецПопытки;
	КонецЕсли;
	
	ИмяВременногоФайла = Каталог + СтрЗаменить(ИмяМакета, "_", ".");
	ФайлМакета = Новый Файл(ИмяВременногоФайла);
	АдресВремХранилища = ПолучитьКомпонентуНаСервере(ИмяМакета, ?(ФайлМакета.Существует(), ФайлМакета.Размер(), 0));
	Если АдресВремХранилища <> Неопределено Тогда
		ПолучитьФайл(АдресВремХранилища, ИмяВременногоФайла, Ложь);
	КонецЕсли;
	
	Возврат ФайлМакета.Существует();
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомпонентуНаСервере(ИмяМакета, Размер)
Перем МакетДвоичныеДанные;
	
	МакетДвоичныеДанные = Справочники.ПравилаРаботыСотрудников.ПолучитьМакет(ИмяМакета);
	Возврат ?(МакетДвоичныеДанные.Размер() = Размер, Неопределено, ПоместитьВоВременноеХранилище(МакетДвоичныеДанные));
	
КонецФункции
 //---АК SHEP 20161121

 //Аик 20.12.2016 старт
&НаКлиенте
Процедура ОтборНаправлениеПриИзменении(Элемент)
	//ЭтаФорма.РеестрПоступающихПредложений.Отбор.Элементы.Очистить();

	//Если СокрЛП(ОтборНаправление)<>"" Тогда
	//	мОтбор=ЭтаФорма.РеестрПоступающихПредложений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	мОтбор.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ПродуктоваяКатегория"); 
	//	мОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит;
	//	мОтбор.Использование=Истина;
	//	мОтбор.ПравоеЗначение=СокрЛП(ОтборНаправление);
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПредложенийИзОтбора(мОтборНаправление)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	СправочникАК_ПоступающиеПредложения.Ссылка
		|ИЗ
		|	Справочник.АК_ПоступающиеПредложения КАК СправочникАК_ПоступающиеПредложения
		|ГДЕ
		|	СправочникАК_ПоступающиеПредложения.ПродуктоваяКатегория ПОДОБНО &ПродуктоваяКатегория";

	Запрос.УстановитьПараметр("ПродуктоваяКатегория", "%"+Строка(мОтборНаправление)+"%");

	Возврат  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
//Функция ПолучитьСписокУникальныхПредложений(мСписокПредложений)
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	СправочникАК_ПоступающиеПредложения.Ссылка
//		|ИЗ
//		|	Справочник.АК_ПоступающиеПредложения КАК СправочникАК_ПоступающиеПредложения
//		|ГДЕ
//		|	СправочникАК_ПоступающиеПредложения.Ссылка В(&ПродуктоваяКатегория)";

//	Запрос.УстановитьПараметр("ПродуктоваяКатегория", мСписокПредложений);

//	Возврат  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
//	
//КонецФункции

Функция ПолучитьСписокУникальныхПредложений(мСписокПредложений)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АК_ПоступающиеПредложенияПродуктовыеГруппы.Ссылка
		|ИЗ
		|	Справочник.АК_ПоступающиеПредложения.ПродуктовыеГруппы КАК АК_ПоступающиеПредложенияПродуктовыеГруппы
		|ГДЕ
		|	АК_ПоступающиеПредложенияПродуктовыеГруппы.ПродуктоваяГруппа В(&ПродуктоваяГруппа)";

	Запрос.УстановитьПараметр("ПродуктоваяГруппа", мСписокПредложений);

	Возврат  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


&НаКлиенте
Процедура ГрупповоеОтображение(Команда)
	Если Строка(ОтборНаправление)="" Тогда
		Сообщить("Укажите категорию");
		Возврат;
	КонецЕсли;	
	
	//МассивОсновнойОтбор=Новый Массив;
	//МассивОтбора=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОтборНаправление,",");
	//Для Каждого ТекСтрока Из МассивОтбора Цикл
	//	мМассив=ПолучитьСписокПредложенийИзОтбора(ТекСтрока);

	//		Для Каждого ТекСтрокаЗнач Из мМассив Цикл
	//			МассивОсновнойОтбор.Добавить(ТекСтрокаЗнач);
	//		КонецЦикла;	
	//		
	//КонецЦикла;	
	
	//СписокПредложенийДляПросмотра=ПолучитьСписокУникальныхПредложений(МассивОсновнойОтбор);
	СписокПредложенийДляПросмотра=ПолучитьСписокУникальныхПредложений(ОтборНаправление);
	
	//мМассив=ПолучитьСписокПредложенийИзОтбора();
	Если СписокПредложенийДляПросмотра.Количество()=0 Тогда
		Сообщить("Нет соответствий!");
		Возврат;
	КонецЕсли;	
	

	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
	ПараметрыПодбора.Вставить("Режим",					"РежимПредложенияНаКарте");
	//ПараметрыПодбора.Вставить("Массив",					мМассив);
	ПараметрыПодбора.Вставить("Массив",					СписокПредложенийДляПросмотра);
	
	//+++АК mika 2017.11.24 ИП-00017302
	ПараметрыПодбора.Вставить("ОтборНаправление", ОтборНаправление);
	//---АК

	ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭл(Команда)
	Если Элементы.Список.ТекущиеДанные<>Неопределено Тогда
		УдалитьЭлСервер(Элементы.Список.ТекущиеДанные.Ссылка);
		Элементы.Список.Обновить();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлСервер(Эл)
	Если РольДоступна("ПолныеПрава") или РольДоступна("CRM") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбЭл=Эл.ПолучитьОбъект();
		ОбЭл.Удалить();
	КонецЕсли; 
	
КонецПроцедуры
//Аик 20.12.2016 финиш

//+++АК MALV 20170522 Задача №15824
//Не даем пользователю провалиться внутр папки "Реестр новинок
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЭтоРеестрНовинок(Элемент.ТекущиеДанные.Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры //---АК MALV

//+++АК MALV 20170522 Задача №15824
//вынесем хардкод в отдельную функцию
&НаКлиенте
Функция ЭтоРеестрНовинок(мСсылка)
	Возврат мСсылка = АК_РеестрНовинок;
КонецФункции //---АК MALV 

//+++АК MALV 20170522 Задача №15824
//вынесем хардкод в отдельную функцию
&НаКлиенте
Процедура СписокПриСменеТекущегоРодителя(Элемент)
	Если ЭтоРеестрНовинок(Элементы.Список.ТекущийРодитель) Тогда
		Элементы.Список.ТекущийРодитель = Неопределено;
		Элементы.Список.ТекущаяСтрока = АК_РеестрНовинок;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //---АК MALV 

//mika Дата: 2017.10.30 ИП-00017045
  
#Область ЗагрузкаHTMLСредствамиMSWord

&НаСервереБезКонтекста
Функция ИспользоватьТекстHTML(СправочникСсылка, ТекущийHTML, КэшВременныйКаталог, УникальныйИдентификатор)
	
	Если СправочникСсылка.ЭтоГруппа ИЛИ НЕ СправочникСсылка.ИспользоватьHTML Тогда
		ИспользоватьHTML = Ложь;
	Иначе
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Справочники.ПравилаРаботыСотрудников.ВосстановитьКартинкиHTMLТекущейВерсии(СправочникОбъект, СправочникОбъект.ТекущаяВерсия, ТекущийHTML, КэшВременныйКаталог, УникальныйИдентификатор); 
		ИспользоватьHTML = Истина;
	КонецЕсли;  
	
	Возврат ИспользоватьHTML;
	 
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовФормы(ИспользоватьHTML)
	
	Элементы.ХТМЛ.Видимость = ИспользоватьHTML;
	Элементы.ПолеФД.Видимость = НЕ ИспользоватьHTML;
	Элементы.ФормаПечатьХТМЛ.Видимость = ИспользоватьHTML;
	Элементы.ФормаПечатьСразуХТМЛ.Видимость = ИспользоватьHTML;
	Элементы.ФормаПредпросмотрХТМЛ.Видимость = ИспользоватьHTML;
	Элементы.ФормаПечать.Видимость = Не ИспользоватьHTML;
	Элементы.ФормаПредварительныйПросмотр.Видимость = ИспользоватьHTML;
	
	Если ИспользоватьHTML Тогда
		
		Элементы.Группа3.Видимость = Истина;

		Элементы.РеестрПоступающихПредложений.Видимость  = Ложь;
		Элементы.ОтборНаправление.Видимость				 = Ложь;
		Элементы.ГрупповоеОтображение.Видимость			 = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныеФайлыHTMLКлиент(ВременныйКаталог, ОчиститьВсеВерсии = Ложь)
	
	Попытка
		Если ОчиститьВсеВерсии Тогда
			УдалитьФайлы(Лев(ВременныйКаталог, Найти(ВременныйКаталог,"ver")-1));
		Иначе
			УдалитьФайлы(ВременныйКаталог);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры // УдалитьВременныеФайлыHTMLКлиент()

#КонецОбласти

//mika
