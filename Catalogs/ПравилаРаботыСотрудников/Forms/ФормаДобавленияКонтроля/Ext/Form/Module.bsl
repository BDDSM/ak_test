
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Контроль выполнения должен производится со следующего дня
	ПериодС = НачалоДня(ТекущаяДата()) + 86400;
	
	Параметры.Свойство("СправочникСсылка", СправочникСсылка);
	Параметры.Свойство("ТекущаяВерсия", ТекущаяВерсия);
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДоступностьЭлементовФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьВсе(Команда)
	ЗаполнитьСписокПолучателейКлиент("Все"); 
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоУправляющим(Команда)
	ЗаполнитьСписокПолучателейКлиент("Управляющие"); 
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМагазинам(Команда)
	ЗаполнитьСписокПолучателейКлиент("Магазины"); 
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоПомощникамУправляющих(Команда)
	ЗаполнитьСписокПолучателейКлиент("ПомощникиУправляющих"); 
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьКонтроль(Команда)
	
	ДобавитьКонтрольСервер(ЭтаФорма.УникальныйИдентификатор);
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

&НаКлиенте
Процедура СписокПолучателейНаименованиеПриИзменении(Элемент)
	
	ОбновитьТипДанныхСтроки(); 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейСсылкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбновитьТипДанныхСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (Версия: " + ТекущаяВерсия + ")";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПолучателейКлиент(СпособЗаполнения)

	ЗаполнитьСписокПолучателейСервер(СпособЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолучателейСервер(СпособЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Пользователи.ФизЛицо,
	|	РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиУведомлений.Пользователи) КАК Тип
	|ПОМЕСТИТЬ ВТ_ФизическиеЛица
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|			ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
	|		ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА &Управляющие
	|						ИЛИ &Все
	|					ТОГДА РолиПользователейТипыРолей.ТипРоли.Код ПОДОБНО ""Uprav%""
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА &Помощники
	|						ИЛИ &Все
	|					ТОГДА РолиПользователейТипыРолей.ТипРоли.Код ПОДОБНО ""PomoshnikTerr%""
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	""Магазин"" КАК ФункциональнаяРоль,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиУведомлений.Магазины) КАК Тип
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Магазины
	|					ИЛИ &Все
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ФизическиеЛица.ФизЛицо,
	|	ВТ_ФизическиеЛица.ФункциональнаяРоль,
	|	Тип
	|ИЗ
	|	ВТ_ФизическиеЛица КАК ВТ_ФизическиеЛица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФункциональнаяРоль,
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Все", СпособЗаполнения = "Все");
	Запрос.УстановитьПараметр("Помощники",  СпособЗаполнения = "ПомощникиУправляющих");
	Запрос.УстановитьПараметр("Управляющие", СпособЗаполнения = "Управляющие");
	Запрос.УстановитьПараметр("Магазины", СпособЗаполнения = "Магазины");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокПолучателей.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
// Процедура формирует структуру параметров и инициирует добавление правил в регистр контроля
//
// Параметры:
//  УникальныйИдентификатор  - <Тип.УникальныйИдентификатор> - Уникальный идентификатор формы
//
Процедура ДобавитьКонтрольСервер(УникальныйИдентификатор)
	
	СтруктураПараметров = Новый Структура("Ссылка, ОбъектыКонтроля, ДатаКонтроля, ТекстСообщения, СтруктураКонтроля, Версия", 
			СправочникСсылка, СписокПолучателей.Выгрузить(), ПериодС, СокрЛП(СообщениеПользователям), Новый Структура("КонтролироватьПрочтение, КонтролироватьПечать", 
					КонтролироватьПрочтение ,КонтролироватьПечать), ТекущаяВерсия);
					
					
	РегистрыСведений.ПравилаРаботыСотрудниковКонтроль.ДобавитьЗаписьКонтроляПравилРаботы(СтруктураПараметров);
					
КонецПроцедуры // ДобавитьКонтрольСервер()

&НаСервере
// Функция формирует и возвращает массив получателей для письма
//
// Параметры:
//  ВариантОтправки  - <Тип.Число> - вариант использования адреса
//                 0 - Список адресов
//				   1 - Электронный адрес
//
Функция ПолучитьТаблицуОбъектовКонтроля()
	
	ТаблицаПолучателей = Новый ТаблицаЗначений();
	ТаблицаПолучателей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаПолучателей.Колонки.Добавить("СпособОтправки", Новый ОписаниеТипов("Перечисление.СпособыОтправкиУведомлений"));
	
	//Если ВариантОтправки = 0 Тогда
	//	Для каждого Строка Из СписокПолучателей Цикл
	//		Если ЗначениеЗаполнено(Строка.ЭлектронныйАдрес) Тогда
	//			НоваяСтрока = ТаблицаПолучателей.Добавить();
	//			НоваяСтрока.Представление = Строка.ЭлектронныйАдрес;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//Иначе
	//	НоваяСтрока = ТаблицаПолучателей.Добавить();
	//	НоваяСтрока.Представление = ЭлектронныйАдрес;
	//КонецЕсли;
	
	Возврат ТаблицаПолучателей;
	
КонецФункции// ПолучитьТаблицуПолучателей()

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовФормы()
	
	Элементы.СписокПолучателей.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьПериодПриИзменении(Элемент)
	
	УстановитьДатуКонтроля(); 
		
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьДатуКонтроля(Установить = Ложь);
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	Если ПериодС <= ТекущаяДата Тогда
		
		ПериодС = ТекущаяДата + 86400;
		
		Если Не Установить Тогда
			Сообщить(НСтр("ru = 'Правила можно можно начать контролировать только с начала ""следующего"" рабочего дня!';"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТипДанныхСтроки()
	
	ТекущиеДанные = Элементы.СписокПолучателей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.СпособыОтправкиУведомлений.Магазины");
			ТекущиеДанные.ФункциональнаяРоль = "Магазины";
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.СпособыОтправкиУведомлений.Пользователи");
			ТекущиеДанные.ФункциональнаяРоль = ПолучитьФункциональнуюРольСотрудника(ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФункциональнуюРольСотрудника(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РолиПользователейСоставРоли.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

