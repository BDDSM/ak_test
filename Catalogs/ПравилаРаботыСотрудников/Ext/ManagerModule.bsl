//+++ АК Pans 20160110
Процедура СформироватьСообщенияМагазинамОбИзмененииВерсии(Ссылка,СоотТаблицы=Неопределено) Экспорт
    Если Найти(Ссылка.ТекущийТекст,"#ДинамическаяЧасть")>0 Тогда
		СформироватьСообщенияМагазинамОбИзмененииВерсииСДинамическойЧастью(Ссылка,СоотТаблицы);
		Возврат;
	КонецЕсли; 
		
	СП1 = Новый Структура;
	СП1.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
	СП1.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.ВсеМагазины);
	СП1.Вставить("ВсемСменам", Истина);
	СП1.Вставить("Тема", "Изменение правил работы: " + СокрЛП(Ссылка.Наименование));
	
	ФД1 = Новый ФорматированныйДокумент;
	СПК = Новый Структура;
	ФД1.УстановитьHTML(Ссылка.ТекущийТекст, СПК);
	ЧистыйТекст = ФД1.ПолучитьТекст();
	
	СП1.Вставить("ТекстСообщения", "Новый текст правил: " + Символы.ПС + СокрЛП(ЧистыйТекст));

	//+++АК SHEP 20160418 ИП-00012486
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	ТекВерсия = Ссылка.ТекущаяВерсия;
	
	Для Каждого ТекСтрока Из Ссылка.ТЧКартинки  Цикл
		Если ТекВерсия = ТекСтрока.Версия Тогда
			ИмяФайла = ТекСтрока.ИмяФайла;
			ПолноеИмяФайла = "" + Каталог + ИмяФайла;
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Картинка = Новый Картинка(ПолноеИмяФайла);
				СПК.Вставить(ТекСтрока.Ключ, Картинка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстХТМЛ = СтрЗаменить(Ссылка.ТекущийТекст, "<body>", "<body><p>Новый текст правил:</p><br>");
	ФД1.УстановитьHTML(ТекстХТМЛ, СПК);
	СП1.Вставить("ФорматированиеТекста", Истина);
	СП1.Вставить("ФД", Новый ХранилищеЗначения(ФД1));
	
	ГруппаРассылкиНовыеПравилаРаботыСотрудников = Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("Новые правила работы сотр");
	Если ЗначениеЗаполнено(ГруппаРассылкиНовыеПравилаРаботыСотрудников) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	АК_ГруппыРассылки.ФизЛицо КАК СтаршийСмены,
			|	СтруктурныеЕдиницыФизлицСрезПоследних.Подразделение КАК СтруктурнаяЕдиница
			|ИЗ
			|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктурныеЕдиницыФизлиц.СрезПоследних КАК СтруктурныеЕдиницыФизлицСрезПоследних
			|		ПО АК_ГруппыРассылки.ФизЛицо = СтруктурныеЕдиницыФизлицСрезПоследних.ФизЛицо
			|ГДЕ
			|	АК_ГруппыРассылки.Группа = &Группа
			|	И АК_ГруппыРассылки.Емейл <> """"");
		Запрос.УстановитьПараметр("Группа", ГруппаРассылкиНовыеПравилаРаботыСотрудников);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Сп1.Вставить("СтруктурныеЕдиницы", Результат.Выгрузить());
		КонецЕсли;
		
		ОтправитьПочтовыеСообщения("no-reply@vkusvill.ru", Сп1.Тема, ГруппаРассылкиНовыеПравилаРаботыСотрудников, ТекстХТМЛ, СПК);
		
	КонецЕсли;
	//---АК SHEP
	
	СП1.Вставить("ОбъектИнициатор", Ссылка);
	СП1.Вставить("Отправитель", Справочники.РолиПользователей.Администратор);
	
	МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(СП1);
	
	

КонецПроцедуры
//--- АК Pans 20160110

//+++АК БЕЛН 20160714
Процедура СформироватьСообщенияМагазинамОбИзмененииВерсииСДинамическойЧастью(Ссылка,Адрес,УчитыватьДатаПоступления=Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат;	
	КонецЕсли; 
	СоотТаблицы=ПолучитьИзВременногоХранилища(Адрес);
	СоотМагазинов=Новый Соответствие;
	СоотПараметров=Новый Соответствие;
	
	Для каждого Эл Из СоотТаблицы Цикл
		ФлСовпадение=Ложь;
		Док=Неопределено;
		Для каждого Элемент Из СоотМагазинов Цикл
			ФлСовпадение=Ложь;
			НеСовпало=Ложь;
			Если УчитыватьДатаПоступления Тогда
				Для каждого Подэлемент Из Эл.Значение.ТЗТоваров Цикл
					Если Элемент.Значение.НайтиСтроки(Новый Структура("Номенклатура,ДатаПоступления",Подэлемент.Номенклатура,?(Подэлемент.ДатаПоступления="-","-",НачалоДня(Подэлемент.ДатаПоступления)))).Количество()=0 Тогда
						НеСовпало=Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			Иначе				
				Для каждого Подэлемент Из Эл.Значение.ТЗТоваров Цикл
					Если Элемент.Значение.НайтиСтроки(Новый Структура("Номенклатура",Подэлемент.Номенклатура)).Количество()=0 Тогда
						НеСовпало=Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			Если НеСовпало=Ложь Тогда
				ФлСовпадение=Эл.Значение.ТЗТоваров.Количество()=Элемент.Значение.Количество();
				Если ФлСовпадение Тогда
					Док=Элемент.Ключ;
					Прервать;                                            
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	    Если ФлСовпадение Тогда
			ОбДок=Док.ПолучитьОбъект();                         
			
			ТЗСмен = МеханизмОбменаСообщениями.ПолучитьТЗСмен(ОбДок.Дата);
			Если ОбДок.СтруктурныеЕдиницы.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница",Эл.Ключ)).Количество()=0 Тогда
				СтрокаТЧП = ОбДок.СтруктурныеЕдиницы.Добавить();
				СтрокаТЧП.СтруктурнаяЕдиница = Эл.Ключ;
				
				СО1 = Новый Структура("Магазин, ЭтоСтаршийСмены", Эл.Ключ, Истина);
				МСС1 = ТЗСмен.НайтиСтроки(СО1);
				Если МСС1.Количество() > 0 Тогда
					СтрокаТЧП.СтаршийСмены = МСС1[0].Сотрудник;
				КонецЕсли;
				ОбДок.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		СП1 = Новый Структура;
		СП1.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
		СП1.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.СписокМагазинов);
		СпМаг=Новый Массив;
		СпМаг.Добавить(Эл.Ключ);
		СП1.Вставить("СписокМагазинов", СпМаг);
		
		СП1.Вставить("ВсемСменам", Истина);
		СП1.Вставить("Тема", "Изменение правил работы: " + СокрЛП(Ссылка.Наименование));
		
		ФД1 = Новый ФорматированныйДокумент;
		СПК = Новый Структура;
		ФД1.УстановитьHTML(Ссылка.ТекущийТекст, СПК);
		ЧистыйТекст = ФД1.ПолучитьТекст();
		
		СП1.Вставить("ТекстСообщения", "Новый текст правил: " + Символы.ПС + СокрЛП(ЧистыйТекст));

		//+++АК SHEP 20160418 ИП-00012486
		Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(Каталог,1) <> "\" Тогда
			Каталог = Каталог + "\";
		КонецЕсли;
		
		ТекВерсия = Ссылка.ТекущаяВерсия;
		
		Для Каждого ТекСтрока Из Ссылка.ТЧКартинки  Цикл
			Если ТекВерсия = ТекСтрока.Версия Тогда
				ИмяФайла = ТекСтрока.ИмяФайла;
				ПолноеИмяФайла = "" + Каталог + ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);
				Если Файл.Существует() Тогда
					Картинка = Новый Картинка(ПолноеИмяФайла);
					СПК.Вставить(ТекСтрока.Ключ, Картинка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекстХТМЛ = Ссылка.ТекущийТекст;
		//АК БЕЛН 12.07.2016++
		//ТекстХТМЛ=СтрЗаменить(ТекстХТМЛ,"#ДинамическаяЧасть",Эл.Значение);
		//Поз=Найти(ТекстХТМЛ,"#ДинамическаяЧасть");
		ДинЧасть=Строка(Эл.Значение.ТекстПолный);
		
		
		ТекстХТМЛ=СтрЗаменить(ТекстХТМЛ,"#ДинамическаяЧасть",ДинЧасть);
		//АК БЕЛН 12.07.2016--
		ФД1.УстановитьHTML(ТекстХТМЛ, СПК);
		//Закл=ФД1.ПолучитьЗакладкуПоПозиции(Поз);
		//КартинкаДоб=Эл.Значение;
		//ФД1.Добавить(КартинкаДоб,ТипЭлементаФорматированногоДокумента.Картинка);
		
		СП1.Вставить("ФорматированиеТекста", Истина);
		СП1.Вставить("ФД", Новый ХранилищеЗначения(ФД1));
		
		//ГруппаРассылкиНовыеПравилаРаботыСотрудников = Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("Рассылки реестра новинок");
		//Если ЗначениеЗаполнено(ГруппаРассылкиНовыеПравилаРаботыСотрудников) Тогда
		//	//Запрос = Новый Запрос(
		//	//	"ВЫБРАТЬ
		//	//	|	АК_ГруппыРассылки.ФизЛицо КАК СтаршийСмены,
		//	//	|	СтруктурныеЕдиницыФизлицСрезПоследних.Подразделение КАК СтруктурнаяЕдиница
		//	//	|ИЗ
		//	//	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		//	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктурныеЕдиницыФизлиц.СрезПоследних КАК СтруктурныеЕдиницыФизлицСрезПоследних
		//	//	|		ПО АК_ГруппыРассылки.ФизЛицо = СтруктурныеЕдиницыФизлицСрезПоследних.ФизЛицо
		//	//	|ГДЕ
		//	//	|	АК_ГруппыРассылки.Группа = &Группа
		//	//	|	И АК_ГруппыРассылки.Емейл <> """"");
		//	//Запрос.УстановитьПараметр("Группа", ГруппаРассылкиНовыеПравилаРаботыСотрудников);
		//	//
		//	//Результат = Запрос.Выполнить();
		//	//Если НЕ Результат.Пустой() Тогда
		//	//	Сп1.Вставить("СтруктурныеЕдиницы", Результат.Выгрузить());
		//	//КонецЕсли;
		//	//
		//	
		//КонецЕсли;
		////---АК SHEP
		
		СП1.Вставить("ОбъектИнициатор", Ссылка);
		СП1.Вставить("Отправитель", Справочники.РолиПользователей.Администратор);
		СП1.Вставить("ФлХТМЛ", Истина);
		СП1.Вставить("ХТМЛТекст", ТекстХТМЛ);
		СП1.Вставить("Дата",ТекущаяДата());
		ТекОтправитель = Справочники.РолиПользователей.Администратор;
		СП1.Вставить("Отправитель", ТекОтправитель);
		
		СообщениеНов=МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(СП1,Истина);
		СоотМагазинов.Вставить(СообщениеНов,Эл.Значение.ТЗТоваров);
		СоотПараметров.Вставить(СообщениеНов,СП1);
	КонецЦикла;
	
	ТЗРассылок=Обработки.ПочтоваяРассылкаРеестраОтправок.ПостроитьСписокАдресатовНаСервере(Ссылка);
	ТЗДопСообщений=Обработки.ПочтоваяРассылкаРеестраОтправок.ПостроитьСписокАдресатовНаСервере_1С(Ссылка);
	СоотРолей=Новый Соответствие;
	Если ТипЗнч(ТЗДопСообщений)=Тип("ТаблицаЗначений") Тогда
		Для каждого Элемент Из СоотМагазинов Цикл
	    	СпРолей=Новый ТаблицаЗначений;
			СпРолей.Колонки.Добавить("Роль");
			Для каждого СтрТЗ Из ТЗДопСообщений Цикл
			    Если Элемент.Ключ.СтруктурныеЕдиницы.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница",СтрТЗ.СтруктурнаяЕдиница)).Количество()=0   Тогда
					Продолжить;	
				КонецЕсли; 
				Если СпРолей.Найти(СтрТЗ.Роль)=Неопределено Тогда
					НовСтрРоль=СпРолей.Добавить();
					НовСтрРоль.Роль=СтрТЗ.Роль;
				КонецЕсли; 
			КонецЦикла; 
			СоотРолей.Вставить(Элемент.Ключ,СпРолей);
		КонецЦикла;
	КонецЕсли; 
	
	Для каждого Элемент Из СоотМагазинов Цикл
        ТекстХТМЛ=Элемент.Ключ.ХТМЛТекст;
		СПК = Новый Структура;
		Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(Каталог,1) <> "\" Тогда
			Каталог = Каталог + "\";
		КонецЕсли;
		
		ТекВерсия = Ссылка.ТекущаяВерсия;
		
		Для Каждого ТекСтрока Из Ссылка.ТЧКартинки  Цикл
			Если ТекВерсия = ТекСтрока.Версия Тогда
				ИмяФайла = ТекСтрока.ИмяФайла;
				ПолноеИмяФайла = "" + Каталог + ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);
				Если Файл.Существует() Тогда
					Картинка = Новый Картинка(ПолноеИмяФайла);
					СПК.Вставить(ТекСтрока.Ключ, Картинка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОтправитьПочтовыеСообщенияРеестраОтправок("no-reply@vkusvill.ru", "Изменение правил работы: " + СокрЛП(Ссылка.Наименование), ТЗРассылок, ТекстХТМЛ, СПК, Элемент.Ключ,Ссылка);
		
		СпРолей=СоотРолей.Получить(Элемент.Ключ);
		СписокНастроек=СоотПараметров.Получить(Элемент.Ключ);
		Если СписокНастроек=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если СпРолей=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СписокНастроек.Удалить("СписокМагазинов");
		СписокНастроек.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.УказаннаяРоль);
		Если СпРолей.Количество()>0 Тогда
			//Для каждого ЭлСписка Из СпРолей Цикл
			СписокНастроек.Вставить("РольПолучателя", СпРолей[0].Роль);
			//КонецЦикла;
			СписокНастроек.Вставить("РолиПолучателей", СпРолей);
			МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(СписокНастроек);			
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбработатьЭлементСДинамическойЧастью(Ссылка) Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	Адрес=СформироватьДинамическуюЧасть(Ссылка);
	Если ЗначениеЗаполнено(Адрес) Тогда
		СформироватьСообщенияМагазинамОбИзмененииВерсииСДинамическойЧастью(Ссылка,Адрес);
    КонецЕсли;

КонецПроцедуры

Функция СформироватьДинамическуюЧасть(Ссылка)
	УстановитьПривилегированныйРежим(Истина);	
	//МассивКатегорийТовара=Новый Массив;
	//МассивКатегорийТовара.Добавить(Перечисления.КатегорииАссортимента.Новинки);
	//МассивКатегорийМагазинов=Новый Массив;
	//МассивКатегорийМагазинов.Добавить(Перечисления.ФорматМагазинаВВ.Флагман);
	//МассивКатегорийМагазинов.Добавить(Перечисления.ФорматМагазинаВВ.Обычный);
	//Запрос = Новый Запрос;
	////Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 10
	////			 |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	////			 |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	////			 |ИЗ
	////			 |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	////			 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправкиПоНовинкам КАК ОтправкиПоНовинкам
	////			 |		ПО ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ОтправкиПоНовинкам.Магазин
	////			 |			И ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ОтправкиПоНовинкам.Номенклатура
	////			 |			И ТоварныйАссортиментТочекСрезПоследних.Характеристика = ОтправкиПоНовинкам.Характеристика
	////			 |			И (ОтправкиПоНовинкам.ПервичнаяОтправка)
	////			 |ГДЕ
	////			 |	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	////			 |	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	////			 |	И ОтправкиПоНовинкам.Номенклатура ЕСТЬ NULL ";
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТоварыНаСкладахОбороты.Номенклатура,
	//	|	ТоварыНаСкладахОбороты.Характеристика,
	//	|	ТоварыНаСкладахОбороты.Ссылка.Получатель КАК ТорговаяТочка,
	//	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ТоварыНаСкладахОбороты.Ссылка.Дата, ДЕНЬ)) КАК Период
	//	|ИЗ
	//	|	Документ.РасходныйОрдерСклад.Товары КАК ТоварыНаСкладахОбороты
	//	|ГДЕ
	//	|	ТоварыНаСкладахОбороты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	//	|	И ТоварыНаСкладахОбороты.Ссылка.Получатель.Организация = &Организация
	//	|	И ТоварыНаСкладахОбороты.Ссылка.Получатель.ФорматМагазинаВВ В(&МассивКатегорийМагазинов)
	//	|	И ТоварыНаСкладахОбороты.Номенклатура.КатегорияАссортимента В(&МассивКатегорийТовара)
	//	|	И ТоварыНаСкладахОбороты.Ссылка.Проведен
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ТоварыНаСкладахОбороты.Номенклатура,
	//	|	ТоварыНаСкладахОбороты.Характеристика,
	//	|	ТоварыНаСкладахОбороты.Ссылка.Получатель
	//	|
	//	|ИМЕЮЩИЕ
	//	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ТоварыНаСкладахОбороты.Ссылка.Дата, ДЕНЬ)) = &Период";
	//
	//ДатаРО=НачалоДня('20160206');
	//Запрос.УстановитьПараметр("Период",ДатаРО);
	//Запрос.УстановитьПараметр("МассивКатегорийМагазинов",МассивКатегорийМагазинов);
	//Запрос.УстановитьПараметр("МассивКатегорийТовара",МассивКатегорийТовара);
	//Запрос.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоКоду("000000006"));
	//
	//Результат = Запрос.Выполнить();

	//ТЗМагазиновИТовара = Результат.Выгрузить();


	//
	//
	//
	//АдресВХран=СформироватьДинамическуюЧастьПоПараметрам(Ссылка,ТЗМагазиновИТовара,ДатаРО,Ложь,Истина);

	//////_________________________________________________
	АдресВХран="";
	//Попытка
		Выполнить(Ссылка.КодДинамическойЧасти.Получить());                             
	//Исключение
	//	АдресВХран="";
	//КонецПопытки; 
	Возврат АдресВХран;

КонецФункции // ()

Функция СформироватьДинамическуюЧастьПоПараметрам(Ссылка,ТЗМагазиновИТовара,ДатаРО,ПовторнаяОтправка=Ложь,Принудительно=Ложь,СоздаватьЗаписи=Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗМагазиновИТовара.ТорговаяТочка,
		|	ТЗМагазиновИТовара.Номенклатура
		|ПОМЕСТИТЬ ТЗМагазиновИТовара
		|ИЗ
		|	&ТЗМагазиновИТовара КАК ТЗМагазиновИТовара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗМагазиновИТовара.Номенклатура,
		|	ТЗМагазиновИТовара.ТорговаяТочка,
		|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
		|ПОМЕСТИТЬ ТЗМагазиновИТовараСХар
		|ИЗ
		|	ТЗМагазиновИТовара КАК ТЗМагазиновИТовара
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|				,
		|				(Номенклатура, ТорговаяТочка) В
		|					(ВЫБРАТЬ
		|						ТЗМагазиновИТовара.Номенклатура,
		|						ТЗМагазиновИТовара.ТорговаяТочка
		|					ИЗ
		|						ТЗМагазиновИТовара)) КАК ТоварныйАссортиментТочекСрезПоследних
		|		ПО (ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ТЗМагазиновИТовара.ТорговаяТочка)
		|			И (ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ТЗМагазиновИТовара.Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
		|	ТЗМагазиновИТовара.Номенклатура,
		|	ТЗМагазиновИТовара.ТорговаяТочка,
		|	ТЗМагазиновИТовара.Характеристика
		|ПОМЕСТИТЬ втПроизводители
		|ИЗ
		|	ТЗМагазиновИТовараСХар КАК ТЗМагазиновИТовара
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ТЗМагазиновИТовара.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.Производитель))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	1 КАК Приоритет,
		|	втПроизводители.Номенклатура,
		|	втПроизводители.ТорговаяТочка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	втПроизводители КАК втПроизводители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
		|		ПО втПроизводители.Характеристика = СоответствиеОбъектРольСрезПоследних.Объект
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	2,
		|	втПроизводители.Номенклатура,
		|	втПроизводители.ТорговаяТочка
		|ИЗ
		|	втПроизводители КАК втПроизводители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
		|		ПО втПроизводители.Производитель = СоответствиеОбъектРольСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	1 КАК Приоритет,
		|	втПроизводители.Номенклатура,
		|	втПроизводители.ТорговаяТочка
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли1) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроизводители КАК втПроизводители
		|		ПО СоответствиеОбъектРольСрезПоследних.Объект = втПроизводители.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(вт.Приоритет) КАК Приоритет,
		|	вт.Номенклатура,
		|	вт.ТорговаяТочка
		|ПОМЕСТИТЬ втМин
		|ИЗ
		|	вт КАК вт
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.Номенклатура,
		|	вт.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Номенклатура,
		|	вт.РольПользователя,
		|	вт.Приоритет,
		|	вт.ТорговаяТочка
		|ПОМЕСТИТЬ втИтог
		|ИЗ
		|	втМин КАК втМин
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО втМин.Номенклатура = вт.Номенклатура
		|			И втМин.Приоритет = вт.Приоритет
		|			И втМин.ТорговаяТочка = вт.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.РольПользователя КАК РольПользователя,
		|	вт.Номенклатура КАК Номенклатура,
		|	вт.ТорговаяТочка КАК ТорговаяТочка
		|ИЗ
		|	втИтог КАК вт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт1.РольПользователя,
		|	вт1.Номенклатура,
		|	вт1.ТорговаяТочка
		|ИЗ
		|	вт1 КАК вт1
		|
		|УПОРЯДОЧИТЬ ПО
		|	РольПользователя,
		|	ТорговаяТочка,
		|	Номенклатура
		|ИТОГИ ПО
		|	ТорговаяТочка,
		|	Номенклатура";


	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
	Запрос.УстановитьПараметр("ТипРоли1", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
	Запрос.УстановитьПараметр("ТЗМагазиновИТовара",ТЗМагазиновИТовара);
	
	Результат = Запрос.Выполнить();
	ТЗНоменклатура=Новый ТаблицаЗначений;
	ТЗНоменклатура.Колонки.Добавить("Номенклатура");
	ТЗНоменклатура.Колонки.Добавить("ТорговаяТочка");
	ТЗНоменклатура.Колонки.Добавить("Роли");
	ВыбТТ=Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыбТТ.Следующий() Цикл
		ВыбНом=ВыбТТ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбНом.Следующий() Цикл
			ВыбРоли=ВыбНом.Выбрать();
			СпБрендМенеджер=Новый СписокЗначений;
			СпТехнолог=Новый СписокЗначений;
			Пока ВыбРоли.Следующий() Цикл
				Если ВыбРоли.РольПользователя.ТипыРолей.Найти(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)<>Неопределено Тогда
					Для каждого Стр Из ВыбРоли.РольПользователя.СоставРоли Цикл
						Если СпТехнолог.НайтиПоЗначению(Стр.Сотрудник)=Неопределено Тогда
							СпТехнолог.Добавить(Стр.Сотрудник);
						КонецЕсли; 
					КонецЦикла;
				ИначеЕсли ВыбРоли.РольПользователя.ТипыРолей.Найти(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)<>Неопределено Тогда
					Для каждого Стр Из ВыбРоли.РольПользователя.СоставРоли Цикл
						Если СпБрендМенеджер.НайтиПоЗначению(Стр.Сотрудник)=Неопределено Тогда
							СпБрендМенеджер.Добавить(Стр.Сотрудник);
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
			КонецЦикла;
			//СоотНоменклатура.Вставить(ВыбНом.Номенклатура,Новый Структура("СпБрендМенеджер,СпТехнолог",СпБрендМенеджер,СпТехнолог));
			НовСтрНом=ТЗНоменклатура.Добавить();
			НовСтрНом.Номенклатура=ВыбНом.Номенклатура;
			НовСтрНом.ТорговаяТочка=ВыбНом.ТорговаяТочка;
			НовСтрНом.Роли=Новый Структура("СпБрендМенеджер,СпТехнолог",СпБрендМенеджер,СпТехнолог);
		КонецЦикла; 
	КонецЦикла; 
	
	
	
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗМагазиновИТовара.ТорговаяТочка,
		|	ТЗМагазиновИТовара.Номенклатура,
		|	ТЗМагазиновИТовара.Комментарий
		|ПОМЕСТИТЬ ТЗМагазиновИТовара
		|ИЗ
		|	&ТЗМагазиновИТовара КАК ТЗМагазиновИТовара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.КатегорияАссортимента КАК КатегорияАссортимента,
		|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
		|	ЗначенияСвойствОбъектов.Значение КАК Страна,
		|	ВыкладкаПланограммы.Планограмма,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ТипРозничнойТочки,
		|	ТЗМагазиновИТовара.Комментарий
		|ПОМЕСТИТЬ втНовинки
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			,
		|			(Номенклатура, ТорговаяТочка) В
		|				(ВЫБРАТЬ
		|					ТЗМагазиновИТовара.Номенклатура,
		|					ТЗМагазиновИТовара.ТорговаяТочка
		|				ИЗ
		|					ТЗМагазиновИТовара)) КАК ТоварныйАссортиментТочекСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ТоварныйАссортиментТочекСрезПоследних.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.СтранаПроисхождения))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
		|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВыкладкаПланограммы.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправкиПоНовинкам КАК ОтправкиПоНовинкам
		|		ПО ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ОтправкиПоНовинкам.Магазин
		|			И ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ОтправкиПоНовинкам.Номенклатура
		|			И ТоварныйАссортиментТочекСрезПоследних.Характеристика = ОтправкиПоНовинкам.Характеристика
		|			И (ВЫБОР
		|					КОГДА &ПовторнаяОтправка
		|						ТОГДА ОтправкиПоНовинкам.ПовторнаяОтправка
		|					ИНАЧЕ ОтправкиПоНовинкам.ПервичнаяОтправка
		|				КОНЕЦ
		|				ИЛИ НЕ &СоздаватьЗаписи)
		|			И (ОтправкиПоНовинкам.ВидРассылки = &ВидРассылки
		|				ИЛИ НЕ &СоздаватьЗаписи)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗМагазиновИТовара КАК ТЗМагазиновИТовара
		|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ТЗМагазиновИТовара.Номенклатура
		|			И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ТЗМагазиновИТовара.ТорговаяТочка
		|ГДЕ
		|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
		|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
		|	И (ОтправкиПоНовинкам.Номенклатура ЕСТЬ NULL 
		|			ИЛИ &Принудительно)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.КатегорияАссортимента,
		|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
		|	ЗначенияСвойствОбъектов.Значение,
		|	ВыкладкаПланограммы.Планограмма,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ТипРозничнойТочки,
		|	ТЗМагазиновИТовара.Комментарий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ТоварыНаСкладахОбороты.Период) КАК Период,
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика
		|ПОМЕСТИТЬ втПриходы
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					втновинки.Номенклатура,
		|					втновинки.Характеристика
		|				ИЗ
		|					втновинки)) КАК ТоварыНаСкладахОбороты
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
		|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.Характеристика,
		|	МИНИМУМ(ПриходныйОрдерСкладТовары.ЗаказПоставщику) КАК ЗаказПоставщику
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриходы КАК втПриходы
		|		ПО ПриходныйОрдерСкладТовары.Ссылка.Дата = втПриходы.Период
		|			И ПриходныйОрдерСкладТовары.Номенклатура = втПриходы.Номенклатура
		|			И ПриходныйОрдерСкладТовары.Характеристика = втПриходы.Характеристика
		|ГДЕ
		|	НЕ ПриходныйОрдерСкладТовары.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОбороты.Период КАК Период,
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ВЫБОР
		|		КОГДА вт.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|				ИЛИ вт.ЗаказПоставщику ЕСТЬ NULL 
		|			ТОГДА ТоварыНаСкладахОбороты.Регистратор.Основание.Дата
		|		ИНАЧЕ вт.ЗаказПоставщику.Дата
		|	КОНЕЦ КАК РегистраторОснованиеДата,
		|	ТоварыНаСкладахОбороты.Регистратор.Склад
		|ПОМЕСТИТЬ втПриходыПервые
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					втновинки.Номенклатура,
		|					втновинки.Характеристика
		|				ИЗ
		|					втновинки)) КАК ТоварыНаСкладахОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриходы КАК втПриходы
		|		ПО ТоварыНаСкладахОбороты.Период = втПриходы.Период
		|			И ТоварыНаСкладахОбороты.Номенклатура = втПриходы.Номенклатура
		|			И ТоварыНаСкладахОбороты.Характеристика = втПриходы.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО ТоварыНаСкладахОбороты.Номенклатура = вт.Номенклатура
		|			И ТоварыНаСкладахОбороты.Характеристика = вт.Характеристика
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
		|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Регистратор.Получатель КАК ТТ,
		|	МИНИМУМ(ТоварыНаСкладахОбороты.Регистратор.Дата) КАК Период
		|ПОМЕСТИТЬ втРасходникиПервые
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					втновинки.Номенклатура,
		|					втновинки.Характеристика
		|				ИЗ
		|					втновинки)) КАК ТоварыНаСкладахОбороты
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
		|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И (ТоварыНаСкладахОбороты.Номенклатура, ТоварыНаСкладахОбороты.Характеристика, ТоварыНаСкладахОбороты.Регистратор.Получатель) В
		|			(ВЫБРАТЬ
		|				втновинки.Номенклатура,
		|				втновинки.Характеристика,
		|				втновинки.ТорговаяТочка
		|			ИЗ
		|				втновинки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Регистратор.Получатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втНовинки.ТорговаяТочка КАК ТорговаяТочка,
		|	втНовинки.Номенклатура,
		|	втНовинки.КатегорияАссортимента,
		|	втНовинки.Характеристика,
		|	ЕСТЬNULL(втНовинки.Страна, ""-"") КАК Страна,
		|	втНовинки.Номенклатура.Описание как НоменклатураОписание,
		|	втНовинки.Планограмма,
		|	втНовинки.ТорговаяТочкаТипРозничнойТочки,
		|	ЕСТЬNULL(втПриходыПервые.РегистраторОснованиеДата, ""-"") КАК ДатаЗаказа,
		|	ЕСТЬNULL(втРасходникиПервые.Период, ""-"") КАК ДатаПоступления,
		|	втПриходыПервые.РегистраторСклад.ТемпературныйРежимНижняяГраница КАК НижняяГраница,
		|	втПриходыПервые.РегистраторСклад.ТемпературныйРежимВерхняяГраница КАК ВерхняяГраница,
		|	ВЫБОР
		|		КОГДА втНовинки.Комментарий = """"
		|			ТОГДА втНовинки.Номенклатура.Комментарий
		|		ИНАЧЕ втНовинки.Комментарий
		|	КОНЕЦ КАК Комментарий,
		|	втНовинки.Номенклатура.Фишка КАК Фишка
		|ИЗ
		|	втНовинки КАК втНовинки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПриходыПервые КАК втПриходыПервые
		|		ПО втНовинки.Номенклатура = втПриходыПервые.Номенклатура
		|			И втНовинки.Характеристика = втПриходыПервые.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРасходникиПервые КАК втРасходникиПервые
		|		ПО втНовинки.Номенклатура = втРасходникиПервые.Номенклатура
		|			И втНовинки.ТорговаяТочка = втРасходникиПервые.ТТ
		|ГДЕ
		|	(НАЧАЛОПЕРИОДА(втРасходникиПервые.Период, ДЕНЬ) = &ДатаРО
		|			ИЛИ &Принудительно)
		|ИТОГИ ПО
		|	ТорговаяТочка";
	Запрос.УстановитьПараметр("ДатаРО",ДатаРО);
	Запрос.УстановитьПараметр("ТЗМагазиновИТовара",ТЗМагазиновИТовара);
    Запрос.УстановитьПараметр("ПовторнаяОтправка",ПовторнаяОтправка);
    Запрос.УстановитьПараметр("ВидРассылки",Ссылка);
    Запрос.УстановитьПараметр("Принудительно",Принудительно);
	Запрос.УстановитьПараметр("СоздаватьЗаписи",СоздаватьЗаписи);

	Результат = Запрос.Выполнить();
	//Запрос.текст="выбрать * из втновинки";
	//ТЗ=запрос.Выполнить().Выгрузить();
																			   
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);       
	СоответствиеТТ=Новый Соответствие;
	Макет=Справочники.ПравилаРаботыСотрудников.ПолучитьМакет("РеестрНовинок");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаТовары=ВыборкаДетальныеЗаписи.Выбрать();
		ТЗНовинки1=Новый ТаблицаЗначений;
		ТЗНовинки1.Колонки.Добавить("Организация");
		ТЗНовинки1.Колонки.Добавить("КатегорияТовара");
		ТЗНовинки1.Колонки.Добавить("НазваниеТовара");
		ТЗНовинки1.Колонки.Добавить("СтранаТовара");
		ТЗНовинки1.Колонки.Добавить("КраткоеОписание");
		ТЗНовинки1.Колонки.Добавить("РежимХранения");
		ТЗНовинки1.Колонки.Добавить("ПланоГрамма");
		ТЗНовинки1.Колонки.Добавить("ДатаЗаказа");
		ТЗНовинки1.Колонки.Добавить("Магазин");
		ТЗНовинки1.Колонки.Добавить("ТипМагазина");
		ТЗНовинки1.Колонки.Добавить("ДатаПоступления");
		ТЗНовинки1.Колонки.Добавить("Номенклатура");
		ТЗНовинки1.Колонки.Добавить("Комментарий");
		ТЗНовинки1.Колонки.Добавить("Фишка");
		
		ТЗТоваров=Новый ТаблицаЗначений;
		ТЗТоваров.Колонки.Добавить("Номенклатура");
		ТЗТоваров.Колонки.Добавить("ДатаПоступления");
		
		Пока ВыборкаТовары.Следующий() Цикл
			СтрДоб=ТЗНовинки1.Добавить();
			СтрДоб.Организация=Строка(?(ЗначениеЗаполнено(ВыборкаТовары.ТорговаяТочка.Организация),ВыборкаТовары.ТорговаяТочка.Организация,"-"));
			СтрДоб.КатегорияТовара=Строка(ВыборкаТовары.КатегорияАссортимента);
			СтрДоб.Номенклатура=ВыборкаТовары.Номенклатура;
			СтрДоб.НазваниеТовара=Строка(ВыборкаТовары.Номенклатура);
			СтрДоб.СтранаТовара=Строка(ВыборкаТовары.Страна);
			СтрДоб.КраткоеОписание=Строка(?(ЗначениеЗаполнено(СокрЛП(ВыборкаТовары.НоменклатураОписание)),СформироватьОписание(ВыборкаТовары.НоменклатураОписание)+Символы.ПС,"-"));
			
			СтрДоб.РежимХранения=?(ВыборкаТовары.НижняяГраница=0 и ВыборкаТовары.ВерхняяГраница<0,"<"+Строка(ВыборкаТовары.ВерхняяГраница)+"°С", Строка(ВыборкаТовары.НижняяГраница)+" - "+Строка(ВыборкаТовары.ВерхняяГраница)+"°С");
			СтрДоб.ПланоГрамма=Строка(ВыборкаТовары.ПланоГрамма);
			СтрДоб.ДатаЗаказа=ВыборкаТовары.ДатаЗаказа;
			СтрДоб.Магазин=ВыборкаТовары.ТорговаяТочка;
			СтрДоб.ТипМагазина=Строка(ВыборкаТовары.ТорговаяТочкаТипРозничнойТочки);
			СтрДоб.ДатаПоступления=?(ВыборкаТовары.ДатаПоступления="-","-",НачалоДня(ВыборкаТовары.ДатаПоступления));
			СтрДоб.Фишка=?(ЗначениеЗаполнено(ВыборкаТовары.Фишка),ВыборкаТовары.Фишка,"-");
			СтрДоб.Комментарий=?(ЗначениеЗаполнено(ВыборкаТовары.Комментарий),ВыборкаТовары.Комментарий,"-");
			
			
			СтрТабНов=ТЗТоваров.Добавить();
			СтрТабНов.Номенклатура=ВыборкаТовары.Номенклатура;
			СтрТабНов.ДатаПоступления=?(ВыборкаТовары.ДатаПоступления="-","-",НачалоДня(ВыборкаТовары.ДатаПоступления));
			Если СоздаватьЗаписи Тогда
				Мен=РегистрыСведений.ОтправкиПоНовинкам.СоздатьМенеджерЗаписи();
				Мен.Магазин=ВыборкаТовары.ТорговаяТочка;
				Мен.Номенклатура=ВыборкаТовары.Номенклатура;
				Мен.Характеристика=ВыборкаТовары.Характеристика;
				Мен.ВидРассылки=Ссылка;
				Мен.ДатаДобавления=ТекущаяДата();
				Если ПовторнаяОтправка Тогда
					Мен.ПервичнаяОтправка=Истина;
					Мен.ПовторнаяОтправка=Истина;
				Иначе
					Мен.ПервичнаяОтправка=Истина;
				КонецЕсли; 
				Мен.Записать(Истина);
			КонецЕсли; 
		КонецЦикла;
		Макет=Справочники.ПравилаРаботыСотрудников.ПолучитьМакет("РеестрНовинок");
		ТабДок=Новый ТабличныйДокумент;
		Область=Макет.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(Область);
		ОбластьСтрока=Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		Для каждого стр Из ТЗНовинки1 Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,стр);
			//Струк=СоотНоменклатура.Получить(стр.Номенклатура);
			МасСтрНом=ТЗНоменклатура.НайтиСтроки(Новый Структура("Номенклатура,ТорговаяТочка",стр.Номенклатура,стр.Магазин));
			Если  МасСтрНом.Количество() >0 Тогда
				Струк=МасСтрНом[0].Роли;
				СтрБМ="";
				Для каждого ЭлСп Из Струк.СпБрендМенеджер Цикл
					СтрБМ=СтрБМ+", "+ЭлСп.Значение;
				КонецЦикла;
				СтрБМ=Прав(СтрБМ,СтрДлина(СтрБМ)-2);
				ОбластьСтрока.Параметры.ПродактМенеджер=?(ЗначениеЗаполнено(СтрБМ),СтрБМ,"-");
				СтрТех="";
				Для каждого ЭлСп Из Струк.СпТехнолог Цикл
					СтрТех=СтрТех+", "+ЭлСп.Значение;
				КонецЦикла;
				СтрТех=Прав(СтрТех,СтрДлина(СтрТех)-2);
				ОбластьСтрока.Параметры.Технолог=?(ЗначениеЗаполнено(СтрТех),СтрТех,"-");
		    Иначе
				ОбластьСтрока.Параметры.ПродактМенеджер="-";
				ОбластьСтрока.Параметры.Технолог="-";
			КонецЕсли; 
			
			
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		ВремФайл = ПолучитьИмяВременногоФайла("htm");
		ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
		
		ТекстДокумент = Новый ТекстовыйДокумент();
		ТекстДокумент.Прочитать(ВремФайл);
		
		Текст = ТекстДокумент.ПолучитьТекст();
		НачалоБлокаСтиль = Найти(Текст, "<STYLE");
		КонецБлокаСтиль = Найти(Текст, "</STYLE");
		ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
		НачалоБлокаТело = Найти(Текст, "<BODY");
		КонецБлокаТело = Найти(Текст, "</BODY");
		ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
		
		ТекстПолный = "<HTML>" + Символы.ПС +ТекстСтиль +Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
		//АК+++ MALV Заявка 15824
		//ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=1; cellpadding=5; border = 1; width=1900");
		ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=1; cellpadding=5; border = 1; width=900");
		//АК--- MALV Заявка 15824
		ТекстПолный = СтрЗаменить(ТекстПолный, "border-left-style: none", "");
		ТекстПолный = СтрЗаменить(ТекстПолный, "border-top-style: none", "");
		ДинЧасть=ТекстПолный;
		Поз=Найти(ДинЧасть,"<TABLE");
		ДинЧасть=Сред(ДинЧасть,Поз);
		ДинЧасть=СтрЗаменить(ДинЧасть,"</BODY>","");
		ДинЧасть=СтрЗаменить(ДинЧасть,"</HTML>","");
		//ДинЧасть=ДинЧасть+"</body>"+"</html>";
		//АК+++ MALV Заявка 15824
		//СтрШирины="<COL WIDTH=114>
		//		|<COL WIDTH=144>
		//		|<COL WIDTH=164>
		//		|<COL WIDTH=87>
		//		|<COL WIDTH=283>
		//		|<COL WIDTH=1884>
		//		|<COL WIDTH=87>
		//		|<COL WIDTH=133>
		//		|<COL WIDTH=154>
		//		|<COL WIDTH=152>
		//		|<COL WIDTH=174>
		//		|<COL WIDTH=162>
		//		|<COL WIDTH=289>";
		СтрШирины=  "<COL WIDTH=334>
					|<COL WIDTH=181>
					|<COL WIDTH=331>";
		//АК--- MALV Заявка 15824
		СтрШириныЗам="";
		ДинЧасть=СтрЗаменить(ДинЧасть,СтрШирины,СтрШириныЗам);
		ДинЧасть=СтрЗаменить(ДинЧасть,"style=""width:0px; height:0px; ""","");
		Сч=1;
		Пока Сч<>СтрДлина(ДинЧасть) Цикл
			Если Сред(ДинЧасть,Сч,3)="<TR" Тогда
				СчКол=0;
			КонецЕсли; 
			Если Сред(ДинЧасть,Сч,3)="<TD" Тогда
				Если Сч<>СтрДлина(ДинЧасть) и Сред(ДинЧасть,Сч+1,1)<>">" Тогда
					СтрЗам="";
					Ит=Сч;
					СчКол=СчКол+1;
					Пока Не Сред(ДинЧасть,Ит,1)=">"  Цикл
						СтрЗам=СтрЗам+Сред(ДинЧасть,Ит,1);
						Ит=Ит+1;
					КонецЦикла;
					//АК+++ MALV Заявка 15824
					//Если СчКол=6 Тогда
					//	ДинЧасть=Лев(ДинЧасть,Сч-1)+"<TD"+"               width=""699"""+Сред(ДинЧасть,Сч+СтрДлина(СтрЗам));
					//ИначеЕсли СчКол=14 Тогда
					//	ДинЧасть=Лев(ДинЧасть,Сч-1)+"<TD"+"               width=""1"""+Сред(ДинЧасть,Сч+СтрДлина(СтрЗам));
					//Иначе	
					//	ДинЧасть=Лев(ДинЧасть,Сч-1)+"<TD"+"               width=""100"""+Сред(ДинЧасть,Сч+СтрДлина(СтрЗам));
					//КонецЕсли;
					Если СчКол=1 Тогда
						ДинЧасть=Лев(ДинЧасть,Сч-1)+"<TD"+"               width=""300"""+Сред(ДинЧасть,Сч+СтрДлина(СтрЗам));
					ИначеЕсли СчКол=2 Тогда
						ДинЧасть=Лев(ДинЧасть,Сч-1)+"<TD"+"               width=""200"""+Сред(ДинЧасть,Сч+СтрДлина(СтрЗам));
					ИначеЕсли СчКол=3 Тогда	
						ДинЧасть=Лев(ДинЧасть,Сч-1)+"<TD"+"               width=""400"""+Сред(ДинЧасть,Сч+СтрДлина(СтрЗам));
					Иначе
						ДинЧасть=Лев(ДинЧасть,Сч-1)+"<TD"+"               width=""0"""+Сред(ДинЧасть,Сч+СтрДлина(СтрЗам));
					КонецЕсли;
					//АК--- MALV Заявка 15824
				КонецЕсли; 
			КонецЕсли;
			Сч=Сч+1;
		КонецЦикла; 
		
		
		СоответствиеТТ.Вставить(ВыборкаДетальныеЗаписи.ТорговаяТочка,Новый Структура("ТекстПолный,ТЗТоваров",ДинЧасть,ТЗТоваров));
	КонецЦикла;
	Адрес=ПоместитьВоВременноеХранилище(СоответствиеТТ,Новый УникальныйИдентификатор);
	Возврат Адрес;

	
	
	
КонецФункции

Функция СформироватьОписание(Описание)
	СтрокаИтог="";
	Фл=Ложь;
    Для Сч=1 По СтрДлина(Описание) Цикл
		Симв=Сред(Описание,Сч,1);
		Если Симв=">" или Симв="<" Тогда
		    Фл=Не Фл;
			Продолжить;
		КонецЕсли;
		Если Фл Тогда
			Продолжить;
		КонецЕсли; 
		//Если Найти("абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmopqrstuvwxyz1234567890-_=+""?!.,()*%#:;№",Нрег(Симв))>0 Тогда
			СтрокаИтог=СтрокаИтог+Симв;
		//Иначе	
		//	СтрокаИтог=СтрокаИтог+" ";
		//КонецЕсли; 
	КонецЦикла;
	Возврат СтрокаИтог;
КонецФункции // ()

Процедура ОтправитьПочтовыеСообщенияРеестраОтправок(АдресЭПОтправителя, Тема,ТЗРассылки, Знач ТекстХТМЛ, Картинки,ДокСообщения,Ссылка)
	УстановитьПривилегированныйРежим(Истина);	
	УчеткаДляНастройки = ПолучитьУчетнуюЗаписьПоАдресу(АдресЭПОтправителя);
	Если НЕ ЗначениеЗаполнено(УчеткаДляНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАдресовЭП = "";
	МассивАдресовЭП = Новый Массив;
	
	//Запрос = Новый Запрос(
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	АК_ГруппыРассылки.ФизЛицо КАК Сотрудник,
	//	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП
	//	|ИЗ
	//	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//	|		ПО АК_ГруппыРассылки.ФизЛицо = КонтактнаяИнформация.Объект
	//	|			И (КонтактнаяИнформация.Вид = &ВидКИ)
	//	|ГДЕ
	//	|	АК_ГруппыРассылки.Группа = &Группа");
	////Запрос.УстановитьПараметр("Группа", ГруппаРассылки);
	//Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	//
	//Рез1 = Запрос.Выполнить();
	//Выб1 = Рез1.Выбрать();
	Если Не ТипЗнч(ТЗРассылки)=Тип("ТаблицаЗначений") Тогда
		Возврат
	КонецЕсли; 
	
	Для каждого Выб1 Из ТЗРассылки Цикл
		Если ЗначениеЗаполнено(Выб1.СтруктурнаяЕдиница) Тогда
		    Если ДокСообщения.СтруктурныеЕдиницы.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница",Выб1.СтруктурнаяЕдиница)).Количество()=0   Тогда
				Продолжить;	
			КонецЕсли; 
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Выб1.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
			СтрокаАдресовЭП = СтрокаАдресовЭП + ", ";
		КонецЕсли;
		СтрокаАдресовЭП = СтрокаАдресовЭП + СокрЛП(Выб1.Адрес);
		МассивАдресовЭП.Добавить(СокрЛП(Выб1.Адрес));
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@vkusvill.ru");
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);

	
	КолАдр=МассивАдресовЭП.Количество();
	КолИтер=Цел(КолАдр/21)+1;
	
	Для Ит=1 По КолИтер Цикл
		//УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		СпАдресов=Новый СписокЗначений;
		
		Для Сч= (Ит-1)*20+1 По Мин(МассивАдресовЭП.Количество(),Ит*20) Цикл
			ЭлСп=МассивАдресовЭП[Сч-1];
			МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп,";");	
			Для каждого Эл Из МассивАдресов Цикл
				Если ЗначениеЗаполнено(Эл) Тогда
					СпАдресов.Добавить(Сокрлп(Эл));
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
			
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = Тема;
		Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
		Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
		//Письмо.Отправитель.Адрес = АдресЭПОтправителя;
		СтрАдреса="";
		Для Каждого Адрес1 Из СпАдресов Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = Адрес1;
			СтрАдреса=СтрАдреса+", "+ Адрес1;
		КонецЦикла;
		СтрАдреса=Прав(СтрАдреса,СтрДлина(СтрАдреса)-2);
			//Получатель = Письмо.Получатели.Добавить();
			//Получатель.Адрес = "kolianxxx@mail.ru";
		
		Текст1 = Письмо.Тексты.Добавить();
		Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		Заголовок=Строка(Ссылка)+" для ";
		Для каждого Стр Из ДокСообщения.СтруктурныеЕдиницы Цикл
			Заголовок=Заголовок+" "+Стр.СтруктурнаяЕдиница.Наименование+" ("+Стр.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы+"),";	
		КонецЦикла;
		Заголовок=Лев(Заголовок,СтрДлина(Заголовок)-1);
		Текст1.Текст = Заголовок;
		
		Текст1 = Письмо.Тексты.Добавить();
		Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
		Если Картинки.Количество() > 0 Тогда
			Для Каждого Картинка Из Картинки Цикл
				ИмяВремФайла = ПолучитьИмяВременногоФайла("");
				Картинка.Значение.Записать(ИмяВремФайла);
				ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
				
				//Письмо.Вложения.Добавить(Картинка.Значение.ПолучитьДвоичныеДанные(), Картинка.Ключ);
				//Письмо.Вложения.Добавить(ИмяВремФайла, Картинка.Ключ);
			КонецЦикла;
		КонецЕсли;
		Текст1.Текст = ТекстХТМЛ;
		
		//Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Попытка
			Почта.Послать(Письмо);
			Сообщить("Письма отправлены на "+СтрАдреса);
			Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
				ЗаписьЖурналаРегистрации("ПримечаниеМОС", УровеньЖурналаРегистрации.Примечание,,, "Отправка почты произведена успешно");
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
			ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
			Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
				ЗаписьЖурналаРегистрации("ОшибкаМОС", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при отправке почты");
			КонецЕсли;
			Сообщить(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	//КонецЕсли;	
	Почта.Отключиться();
	
КонецПроцедуры
///---АК БЕЛН 20160714

//+++АК SHEP 20160422:
// взял из общего модуля МеханизмОбменаСообщениями, заблокирован и функция не экспортная
Функция ПолучитьУчетнуюЗаписьПоАдресу(АдресЭлектроннойПочты)

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныеЗаписиЭлектроннойПочты.Код УБЫВ";
	
	Запрос1.УстановитьПараметр("АдресЭлектроннойПочты", СокрЛП(АдресЭлектроннойПочты));
	
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.Ссылка;
	КонецЕсли;
	
КонецФункции // ()

Процедура ОтправитьПочтовыеСообщения(АдресЭПОтправителя, Тема, ГруппаРассылки, Знач ТекстХТМЛ, Картинки)
	
	УчеткаДляНастройки = ПолучитьУчетнуюЗаписьПоАдресу(АдресЭПОтправителя);
	Если НЕ ЗначениеЗаполнено(УчеткаДляНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАдресовЭП = "";
	МассивАдресовЭП = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АК_ГруппыРассылки.ФизЛицо КАК Сотрудник,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП
		|ИЗ
		|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО АК_ГруппыРассылки.ФизЛицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = &ВидКИ)
		|			И (АК_ГруппыРассылки.Группа = &Группа)
		|			И ((ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """")
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.АдресЭлектроннойПочты
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
		|	И СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|	И СтруктурныеЕдиницы.ДатаОткрытия <= &ДатаОткрытия
		|	И СтруктурныеЕдиницы.Активное = ИСТИНА
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		|	И СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|	И СтруктурныеЕдиницы.АдресЭлектроннойПочты <> """"" );

	
	
	Запрос.УстановитьПараметр("ДатаОткрытия", НачалоДня(ТекущаяДата()) + 7*86400); 
	Запрос.УстановитьПараметр("Группа", ГруппаРассылки);
	Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	
	Рез1 = Запрос.Выполнить();
	Выб1 = Рез1.Выбрать();
	Пока Выб1.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выб1.АдресЭП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
			СтрокаАдресовЭП = СтрокаАдресовЭП + ", ";
		КонецЕсли;
		СтрокаАдресовЭП = СтрокаАдресовЭП + СокрЛП(Выб1.АдресЭП);
		МассивАдресовЭП.Добавить(СокрЛП(Выб1.АдресЭП));
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
		Возврат;
	КонецЕсли;
	
	Отправитель = "Новые правила работы сотрудников";
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчеткаДляНастройки);
	Профиль.Пользователь = АдресЭПОтправителя;
	Профиль.ПользовательSMTP = АдресЭПОтправителя;
	Почта.Подключиться(Профиль);
	
	//АК БЕЛН 28.04.2017+
	КолАдр=МассивАдресовЭП.Количество();
	КолИтер=Цел(КолАдр/21)+1;
	
	Для Ит=1 По КолИтер Цикл
		//УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		СпАдресов=Новый СписокЗначений;
		
		Для Сч= (Ит-1)*20+1 По Мин(МассивАдресовЭП.Количество(),Ит*20) Цикл
			ЭлСп=МассивАдресовЭП[Сч-1];
			МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп,";");	
			Для каждого Эл Из МассивАдресов Цикл
				Если ЗначениеЗаполнено(Эл) Тогда
					СпАдресов.Добавить(Сокрлп(Эл));
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = Тема;
		Письмо.ИмяОтправителя = Строка(Отправитель);
		Письмо.Отправитель.Адрес = АдресЭПОтправителя;
		//Письмо.Отправитель.Адрес = АдресЭПОтправителя;
		СтрАдреса="";
		Для Каждого Адрес1 Из СпАдресов Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = Адрес1;
			СтрАдреса=СтрАдреса+", "+ Адрес1;
		КонецЦикла;
		СтрАдреса=Прав(СтрАдреса,СтрДлина(СтрАдреса)-2);
		
		//Текст1 = Письмо.Тексты.Добавить();
		//Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		//Заголовок=Строка(Ссылка);
		//Текст1.Текст = Заголовок;
		//
		Текст1 = Письмо.Тексты.Добавить();
		Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
		Если Картинки.Количество() > 0 Тогда
			Для Каждого Картинка Из Картинки Цикл
				ИмяВремФайла = ПолучитьИмяВременногоФайла("");
				Картинка.Значение.Записать(ИмяВремФайла);
				ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
				ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "src=""" + Картинка.Ключ + """", "src=""" + ИмяВремФайла + """");
				
				//Письмо.Вложения.Добавить(Картинка.Значение.ПолучитьДвоичныеДанные(), Картинка.Ключ);
				//Письмо.Вложения.Добавить(ИмяВремФайла, Картинка.Ключ);
			КонецЦикла;
		КонецЕсли;
		Текст1.Текст = ТекстХТМЛ;
		
		//Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Попытка
			Почта.Послать(Письмо);
			Сообщить("Письма отправлены на "+СтрАдреса);
			Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
				ЗаписьЖурналаРегистрации("ПримечаниеМОС", УровеньЖурналаРегистрации.Примечание,,, "Отправка почты произведена успешно");
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
			ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
			Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
				ЗаписьЖурналаРегистрации("ОшибкаМОС", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при отправке почты");
			КонецЕсли;
			Сообщить(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	//КонецЕсли;	
	Почта.Отключиться();
	
	
	
	//
	//
	//Письмо = Новый ИнтернетПочтовоеСообщение;
	//Письмо.Тема = Тема;
	//Письмо.ИмяОтправителя = Строка(Отправитель);
	//Письмо.Отправитель.Адрес = АдресЭПОтправителя;
	//Для Каждого Адрес1 Из МассивАдресовЭП Цикл
	//	Получатель = Письмо.Получатели.Добавить();
	//	Получатель.Адрес = Адрес1;
	//КонецЦикла;
	//Текст1 = Письмо.Тексты.Добавить();
	//Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	//
	//Если Картинки.Количество() > 0 Тогда
	//	Для Каждого Картинка Из Картинки Цикл
	//		ИмяВремФайла = ПолучитьИмяВременногоФайла("");
	//		Картинка.Значение.Записать(ИмяВремФайла);
	//		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
	//		
	//		//Письмо.Вложения.Добавить(Картинка.Значение.ПолучитьДвоичныеДанные(), Картинка.Ключ);
	//		//Письмо.Вложения.Добавить(ИмяВремФайла, Картинка.Ключ);
	//	КонецЦикла;
	//КонецЕсли;
	//Текст1.Текст = ТекстХТМЛ;
	//
	////Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
	//	Попытка
	//		Почта.Послать(Письмо);
	//		Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
	//			ЗаписьЖурналаРегистрации("ПримечаниеМОС", УровеньЖурналаРегистрации.Примечание,,, "Отправка почты произведена успешно");
	//		КонецЕсли;
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//		ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
	//		Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
	//			ЗаписьЖурналаРегистрации("ОшибкаМОС", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при отправке почты");
	//		КонецЕсли;
	//		Сообщить(ТекстОшибки);
	//	КонецПопытки;
	////КонецЕсли;	
	//Почта.Отключиться();
	//АК БЕЛН 28.04.2017-
	
КонецПроцедуры
//---АК SHEP

//Функция

//mika Дата: 2017.10.30 ИП-00017045

#Область ЗагрузкаHTMLСредствамиMSWord

//Процедура конвертации картинок из base64 в HTML текущей версии объекта
//
Процедура ВосстановитьКартинкиHTMLТекущейВерсии(ТекущийОбъект = Неопределено, ТекущаяВерсия = "", ТекущийHTML = "", ВременныйКаталог = "", Идентификатор = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекущаяВерсия) Тогда
		ТекущаяВерсия = ТекущийОбъект.ТекущаяВерсия;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ВременныйКаталог = ПолучитьКаталогХраненияФайловКартинок(ТекущаяВерсия, Идентификатор);
	КонецЕсли;

	НайденныеСтроки =  ТекущийОбъект.ТЧТекст.НайтиСтроки(Новый Структура("Версия", ТекущаяВерсия));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		КаталогКартинок = Новый Файл(ВременныйКаталог);
		Если Не КаталогКартинок.Существует() Тогда
			СоздатьКаталог(ВременныйКаталог);
		КонецЕсли;
		
		ТекущийHTML = НайденныеСтроки[0].ФДХранилище.Получить();
		
		Префикс = "src=""data:image/png;base64, ";
		
		Пока Найти(ТекущийHTML, Префикс) > 0 Цикл
			
			лкНачалоКартинки = Найти(ТекущийHTML, Префикс) + СтрДлина(Префикс);
			лкBase64ДанныеКартинки = Сред(ТекущийHTML, лкНачалоКартинки);
			лкBase64ДанныеКартинки = Лев(лкBase64ДанныеКартинки, Найти(лкBase64ДанныеКартинки, """") - 1);
			
			лкКодСоответствия = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "")+ ".PNG";
			лкКартинка = Новый Картинка(Base64Значение(лкBase64ДанныеКартинки));
			
			Попытка
				лкКартинка.Записать(ВременныйКаталог + лкКодСоответствия);
			Исключение
			КонецПопытки;
			
			ТекущийHTML = СтрЗаменить(ТекущийHTML, Префикс + лкBase64ДанныеКартинки + """",
				"src='" + ВременныйКаталог + лкКодСоответствия + "'");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Возвращает каталог хранения картинок текущей версии объекта
//Переменные: ТекущаяВерсия - Строка
Функция ПолучитьКаталогХраненияФайловКартинок(ТекущаяВерсия, Идентификатор = "") Экспорт
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Возврат Каталог + "WordToHTML\" + ?(ЗначениеЗаполнено(Идентификатор), Строка(Идентификатор) + "_","") + "\ver_" + ТекущаяВерсия + "\";
	
КонецФункции

//Выполняет автоматическую очистку неиспользуемых файлов
//
Процедура ОчисткаВременныхФайловWordToHTML() Экспорт //+++АК mika 2018.02.26 Без задачи (оптимизация)
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог,1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(Каталог + "WordToHTML\", "*.*");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
  
//mika