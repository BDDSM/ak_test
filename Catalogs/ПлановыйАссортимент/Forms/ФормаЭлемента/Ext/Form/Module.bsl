
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если СписокДегустаций.Количество() Тогда
		СоотУИН=Новый Соответствие;
		Колонки=Объект.Ссылка.Метаданные().ТабличныеЧасти.Дегустация.Реквизиты;
		Для каждого Эл Из СписокДегустаций Цикл
			Стр=Объект.Ссылка.Дегустация.Найти(Эл.Значение);
			Если Стр<>Неопределено Тогда
				СтрукСПрежнимиДанными=Новый Структура;
				Для каждого Кол Из Колонки Цикл
					СтрукСПрежнимиДанными.Вставить(Кол.Имя,Стр[Кол.Имя]);
				КонецЦикла; 
				СоотУИН.Вставить(Эл.Значение,СтрукСПрежнимиДанными);
			Иначе
				СоотУИН.Вставить(Эл.Значение,Неопределено);
			КонецЕсли;
		КонецЦикла; 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("БылоИзменениеДегустации",СоотУИН);
	КонецЕсли; 
	
	Если СписокДегустацийПодходит.Количество() Тогда
		СоотУИН=Новый Соответствие;
		Колонки=Объект.Ссылка.Метаданные().ТабличныеЧасти.Дегустация.Реквизиты;
		Для каждого Эл Из СписокДегустацийПодходит Цикл
			Стр=Объект.Ссылка.Дегустация.Найти(Эл.Значение);
			Если Стр<>Неопределено Тогда
				СтрукСПрежнимиДанными=Новый Структура;
				Для каждого Кол Из Колонки Цикл
					СтрукСПрежнимиДанными.Вставить(Кол.Имя,Стр[Кол.Имя]);
				КонецЦикла; 
				СоотУИН.Вставить(Эл.Значение,СтрукСПрежнимиДанными);
			Иначе
				СоотУИН.Вставить(Эл.Значение,Неопределено);
			КонецЕсли;
		КонецЦикла; 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("БылоИзменениеДегустацииПодходит",СоотУИН);
	КонецЕсли; 
	
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыйАссортимент.Ссылка
	|ИЗ
	|	Справочник.ПлановыйАссортимент КАК ПлановыйАссортимент
	|ГДЕ
	|	ПлановыйАссортимент.Наименование = &Наименование
	|	И ПлановыйАссортимент.Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат; КонецЕсли;
	
	Отказ = Истина;
	Сообщить("Дубль. Товар используется в номенклатуре");
	Если Не ЗначениеЗаполнено(Объект.Родитель) Тогда
		Отказ = Истина;
		Сообщить("Не заполнена группа");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФотографииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ОтображаемоеФото = ?(ПустаяСтрока(ТекущиеДанные.ОтносительноеИмяФайла), "", ПолучитьФотоНаСервере(КаталогФотографий + ТекущиеДанные.ОтносительноеИмяФайла));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФотоНаСервере(ИмяФайла)
	
	Картинка = Новый Картинка;
	
	ФайлКартинки = Новый Файл(ИмяФайла);
	Если ФайлКартинки.Существует() Тогда
		Картинка = Новый Картинка(ИмяФайла);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Картинка);
	
КонецФункции

&НаКлиенте
Процедура ФотографииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИдентификаторФотографии = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФотографииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Перем ИдентификаторФотографии, ОтносительноеИмяФайла, Расширение;
	
	Отказ = Истина;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл с фотографией";
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = 
	"Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	+ "Формат TIFF (*.tif)|*.tif|"
	+ "Формат GIF (*.gif)|*.gif|"
	+ "Формат PNG (*.png)|*.png|"
	+ "Формат icon (*.ico)|*.ico|"
	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"; // картинки
	
	Если ДиалогОткрытияФайла.Выбрать() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ФайлКартинки = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
	ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
	ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);
	
	ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), Объект.Ссылка, ДанныеФотографии);
	Если ОтносительноеИмяФайла = Неопределено Тогда
		Предупреждение("Ошибка при добавлении фотографии!");
		Возврат;
	КонецЕсли;
	
	СтрокаФотографии = Объект.Фотографии.Добавить();
	СтрокаФотографии.ИмяФайла = ФайлКартинки.Имя;
	СтрокаФотографии.ИдентификаторФотографии = ИдентификаторФотографии;
	СтрокаФотографии.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	Элемент.ТекущаяСтрока = СтрокаФотографии.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ФотографииПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Вопрос("Удалить фотографию?", РежимДиалогаВопрос.ДаНетОтмена,,, "Плановый ассортимент") <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.ОтносительноеИмяФайла) Тогда
		УдалитьФайлНаСервере(КаталогФотографий + ТекущиеДанные.ОтносительноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьФайлНаСервере(ИмяФайла)
	Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РольТехнологаПриИзменении(Элемент)
	РольТехнологаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РольТехнологаПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ГруппаТехнологов) Тогда
		//Объект.Ответственный = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Объект.ПродактМенеджер = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	МасФЛ=Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|ГДЕ
	|	РолиПользователейСоставРоли.Ссылка В(&Ссылка)
	|	И РолиПользователейСоставРоли.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РолиПользователейСоставРоли.Сотрудник.Код <> ""0000000001""
	|	И РолиПользователейСоставРоли.Сотрудник.Активный";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ГруппаТехнологов.Технологи.ВыгрузитьКолонку("Технолог"));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасФЛ.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
	КонецЦикла;
	
	
	
	Элементы.ДегустацияТехнологФЛ.СписокВыбора.ЗагрузитьЗначения(МасФЛ);
	Элементы.АналогиНаРынкеТехнологФЛ.СписокВыбора.ЗагрузитьЗначения(МасФЛ);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоответствиеОбъектРоль.Объект,
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)) КАК СоответствиеОбъектРоль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРоль.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	СоответствиеОбъектРоль.Объект в (&РольТехнолога)");
	Запрос.УстановитьПараметр("РольТехнолога", Объект.ГруппаТехнологов.Технологи.ВыгрузитьКолонку("Технолог"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Объект.ПродактМенеджер = ВыборкаЗапроса.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ГруппаТехнологов) Тогда Возврат; КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивСотрудниковПоГруппеТехнологов(Объект.ГруппаТехнологов));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСотрудниковПоГруппеТехнологов(ГруппаТехнологов)
	МасРолей=ГруппаТехнологов.Технологи.ВыгрузитьКолонку("Технолог");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|ГДЕ
	|	РолиПользователейСоставРоли.Ссылка в (&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейСоставРоли.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", МасРолей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасСотр=Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСотр.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
	КонецЦикла;
	
	
	Возврат МасСотр;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивСотрудниковПоРолиПользователя(РольПользователя)
	Возврат РольПользователя.СоставРоли.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

&НаКлиенте
Процедура РассчитатьЗависимыеЗначения(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	Если ИмяЭлемента = "Закупка" Тогда
		Если НЕ Объект.Розница=0 И НЕ Объект.Закупка=0 Тогда
			Объект.Наценка=100*?(Объект.Закупка=0 или Объект.Розница=0,0,Объект.Розница/Объект.Закупка-1);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "Розница" Тогда
		Если НЕ Объект.Розница=0 И НЕ Объект.Закупка=0 Тогда
			Объект.Наценка=100*?(Объект.Закупка=0 или Объект.Розница=0,0,Объект.Розница/Объект.Закупка-1);
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "Наценка" Тогда
		//Если НЕ Объект.Розница=0 Тогда
		Объект.Розница=Объект.Закупка*(1+?(Объект.Наценка=-100,0,Объект.Наценка)/100);
		//КонецЕсли; 
	КонецЕсли; 
	
	Если ИмяЭлемента = "ПродажиНаМагазинВМесяцШтук" Тогда
		Объект.ПродажиНаМагазинВДеньШтук = Объект[ИмяЭлемента] / 30;
	ИначеЕсли ИмяЭлемента = "ПродажиНаМагазинВДеньШтук" Тогда
		Объект.ПродажиНаМагазинВМесяцШтук = Объект[ИмяЭлемента] * 30;
	КонецЕсли;
	
	РассчитатьЗависимыеЗначенияНаСервере();
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыПлановогоАссортимента.Идея") Тогда
		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыПлановогоАссортимента.План");
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗависимыеЗначенияНаСервере()
	Если НЕ Объект.Розница=0 И НЕ Объект.Закупка=0 Тогда
		Объект.Наценка=100*?(Объект.Закупка=0,0,Объект.Розница/Объект.Закупка-1);//Объект.Розница-Объект.Закупка;
	КонецЕсли;	
	Объект.ПродажиНаСетьМагазиновШтук = Объект.ПродажиНаМагазинВМесяцШтук * КоличествоПодразделений;
	Объект.ВыручкаВМесяцНаМагазин = Объект.Розница * Объект.ПродажиНаМагазинВМесяцШтук;
	Объект.МаржаВМесяцНаМагазин = (Объект.Розница - Объект.Закупка) * Объект.ПродажиНаМагазинВМесяцШтук;
	
	Объект.ВыручкаВДеньНаМагазин = Объект.Розница * Объект.ПродажиНаМагазинВДеньШтук;
	Объект.МаржаВДеньНаМагазин = (Объект.Розница - Объект.Закупка) * Объект.ПродажиНаМагазинВДеньШтук;
	
	
	Объект.ВыручкаНаСетьМагазинов = Объект.ВыручкаВМесяцНаМагазин * КоличествоПодразделений;
	
	// Объект.МаржаПлановые400Магазинов = Объект.МаржаВМесяцНаМагазин * 400;   - БЫЛО
	Объект.МаржаПлановые400Магазинов = Объект.МаржаВМесяцНаМагазин * КоличествоПодразделений;
	
	Объект.МаржаИзбенки200 = Объект.МаржаВМесяцНаМагазин * 200;
	Объект.МаржаВсяПлюсИзбенки = Объект.МаржаИзбенки200 + Объект.МаржаПлановые400Магазинов;
	
	Объект.ВыручкаВВ = Объект.ВыручкаВМесяцНаМагазин * 400;
	
	Объект.ВыручкаТТВВ = Объект.ВыручкаВМесяцНаМагазин * 600;
	
КонецПроцедуры


&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Перем ИдентификаторФотографии, ОтносительноеИмяФайла, Расширение;
	
	Отказ = Истина;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Все файлы (*.*)|*.*|";
	
	Если ДиалогОткрытияФайла.Выбрать() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ФайлКартинки = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
	ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
	ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);
	
	ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), Объект.Ссылка, ДанныеФотографии);
	Если ОтносительноеИмяФайла = Неопределено Тогда
		Предупреждение("Ошибка при добавлении файла!");
		Возврат;
	КонецЕсли;
	
	СтрокаФотографии = Объект.Файлы.Добавить();
	СтрокаФотографии.ИмяФайла = ФайлКартинки.Имя;
	СтрокаФотографии.ИдентификаторФотографии = ИдентификаторФотографии;
	СтрокаФотографии.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	Элемент.ТекущаяСтрока = СтрокаФотографии.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	Перем Файл, ПолноеИмяФайла;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат;
	ИначеЕсли ПустаяСтрока(ТекущиеДанные.ОтносительноеИмяФайла) Тогда Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(КаталогФотографий + ТекущиеДанные.ОтносительноеИмяФайла);
	Если Файл.Существует() Тогда
		ЗапуститьПриложение(Файл.ПолноеИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	//{[+](фрагмент добавлен), Долгих П.В. 17.03.2017
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	СтруктурныеЕдиницы.Ссылка
	//|ИЗ
	//|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	//|ГДЕ
	//|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	//|	И СтруктурныеЕдиницы.СтатусТорговойТочки = &СтатусТорговойТочки";
	//Запрос.УстановитьПараметр("СтатусТорговойТочки", Перечисления.СтатусыТорговыхТочек.Открыт);
	//рез= Запрос.Выполнить().Выгрузить();
	КоличествоПодразделений = РаботаСПлановымАссортиментом.КоличествоПодразделений();
	Элементы.ВыручкаНаСетьМагазинов.Заголовок = "На текущую сеть "+строка(КоличествоПодразделений)+" магазинов";
	Элементы.ПродажиНаСетьМагазиновШтук.Заголовок = Элементы.ВыручкаНаСетьМагазинов.Заголовок;
	Элементы.МаржаПлановые400Магазинов.Заголовок = "Маржа на текущую сеть "+строка(КоличествоПодразделений)+" магазинов";
	
	РассчитатьЗависимыеЗначенияНаСервере();
	
	//} 17.03.2017
	//АК БЕЛН 31.05.2017+
	ТекФизЛицо=ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.РолиТехнологов.Очистить();
	КонецЕсли; 
	Если Не РольДоступна("ПолныеПрава") Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ПОМЕСТИТЬ втТехнологи
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
		|ГДЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователей.Ссылка КАК РольПользователя
		|ПОМЕСТИТЬ втПомощники
		|ИЗ
		|	втТехнологи КАК втТехнологи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
		|		ПО втТехнологи.РольПользователя = РолиПользователей.Родитель
		|ГДЕ
		|	РолиПользователей.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РолиПользователей.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ПОМЕСТИТЬ втПродакты
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли1) КАК СоответствиеОбъектРольСрезПоследних
		|ГДЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Ссылка
		|ПОМЕСТИТЬ втРоли
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	(РолиПользователейСоставРоли.Ссылка В
		|				(ВЫБРАТЬ
		|					втТехнологи.РольПользователя
		|				ИЗ
		|					втТехнологи)
		|			ИЛИ РолиПользователейСоставРоли.Ссылка В
		|				(ВЫБРАТЬ
		|					втПомощники.РольПользователя
		|				ИЗ
		|					втПомощники))
		|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	РолиПользователейСоставРоли.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ЛОЖЬ КАК ЭтоПродакт,
		|	ГруппыТехнологовТехнологи.Ссылка КАК Группа
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыТехнологов.Технологи КАК ГруппыТехнологовТехнологи
		|		ПО РолиПользователейСоставРоли.Ссылка = ГруппыТехнологовТехнологи.Технолог
		|			И (ГруппыТехнологовТехнологи.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	(РолиПользователейСоставРоли.Ссылка В
		|				(ВЫБРАТЬ
		|					втТехнологи.РольПользователя
		|				ИЗ
		|					втТехнологи)
		|			ИЛИ РолиПользователейСоставРоли.Ссылка В
		|				(ВЫБРАТЬ
		|					втПомощники.РольПользователя
		|				ИЗ
		|					втПомощники))
		|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ГруппыТехнологовТехнологи.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ИСТИНА,
		|	NULL
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Ссылка В
		|			(ВЫБРАТЬ
		|				втПродакты.РольПользователя
		|			ИЗ
		|				втПродакты)
		|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	РолиПользователейСоставРоли.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	РолиПользователейСоставРоли.Ссылка
		|ИЗ
		|	втРоли КАК втРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (РолиПользователейСоставРоли.Ссылка = втРоли.Ссылка.Родитель
		|				ИЛИ РолиПользователейСоставРоли.Ссылка.Родитель = втРоли.Ссылка
		|				ИЛИ РолиПользователейСоставРоли.Ссылка = втРоли.Ссылка)";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
		Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
		Запрос.УстановитьПараметр("ТипРоли1", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыборкаДетальныеЗаписи=РезультатЗапроса[4].Выбрать();
		
		ЭтоТехнолог=Ложь;
		ЭтоПродакт=Ложь;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭтоТехнолог=НЕ ВыборкаДетальныеЗаписи.ЭтоПродакт;
			ЭтоПродакт= ВыборкаДетальныеЗаписи.ЭтоПродакт;
			Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.ГруппаТехнологов=ВыборкаДетальныеЗаписи.Группа;
			КонецЕсли;
		КонецЦикла;
		ВыборкаДетальныеЗаписи=РезультатЗапроса[5].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокТехнологов.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
		КонецЦикла;
		Элементы.ПлановаяДатаЗапуска.Доступность=(ЭтоТехнолог И (Объект.Статус=Перечисления.СтатусыПлановогоАссортимента.ЗаведенаКарточка
		ИЛИ Объект.Статус=Перечисления.СтатусыПлановогоАссортимента.ВРаботе ИЛИ ИСТИНА)) ИЛИ ЭтоПродакт;
		Элементы.Статус.Доступность= ЭтоПродакт ИЛИ РольДоступна("ПолныеПрава");
		Элементы.Группа2.Доступность=ЭтоПродакт;
		Элементы.Группа5.Доступность=ЭтоПродакт;
		Элементы.Статус.Доступность=ЭтоПродакт;
		Элементы.Группа11.Доступность=ЭтоПродакт ИЛИ ЭтоТехнолог;
		Элементы.Номенклатура.Доступность=ЭтоПродакт;
		Элементы.ГруппаДегустации.ТолькоПросмотр=НЕ (ЭтоТехнолог ИЛИ ЭтоПродакт);
		Элементы.ГруппаАналогиНаРынке.ТолькоПросмотр=НЕ (ЭтоПродакт ИЛИ ЭтоТехнолог);
		Элементы.ГруппаОтветственные.ТолькоПросмотр=НЕ (ЭтоПродакт);
		Элементы.Родитель.ТолькоПросмотр=НЕ (ЭтоПродакт ИЛИ ЭтоТехнолог);
		Если НЕ (ЭтоТехнолог ИЛИ ЭтоПродакт) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.Родитель=Справочники.ПлановыйАссортимент.НайтиПоНаименованию("Идея");
		КонецЕсли; 
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Статус=Перечисления.СтатусыПлановогоАссортимента.Идея;
		Объект.Автор=ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли; 
	
	СформироватьСписокТехнологов();
	УстановитьВидимость();
	Элементы.ДегустацияЕдиницаИзмеренияШтуки.СписокВыбора.Добавить(Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166"));
	Элементы.ДегустацияЕдиницаИзмеренияШтуки.СписокВыбора.Добавить(Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("111"));
	
	Элементы.АналогиНаРынкеЕдиницаИзмеренияШтуки.СписокВыбора.Добавить(Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166"));
	Элементы.АналогиНаРынкеЕдиницаИзмеренияШтуки.СписокВыбора.Добавить(Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("111"));
	//АК БЕЛН 31.05.2017-
КонецПроцедуры

//АК БЕЛН 31.05.2017+
&НаКлиенте
Процедура АналогиНаРынке1ЦенаЗаЕдиницуПриИзменении(Элемент)
	Элементы.АналогиНаРынке.ТекущиеДанные.ЦенаЗаКилограмм=?(Элементы.АналогиНаРынке.ТекущиеДанные.Вес=0,0,Элементы.АналогиНаРынке.ТекущиеДанные.ЦенаЗаЕдиницу/Элементы.АналогиНаРынке.ТекущиеДанные.Вес);
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынке1ЦенаЗаКилограммПриИзменении(Элемент)
	Элементы.АналогиНаРынке.ТекущиеДанные.ЦенаЗаЕдиницу= Элементы.АналогиНаРынке.ТекущиеДанные.Вес*Элементы.АналогиНаРынке.ТекущиеДанные.ЦенаЗаКилограмм;
КонецПроцедуры


&НаКлиенте
Процедура ДегустацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыПлановогоАссортимента.Идея")
		ИЛИ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыПлановогоАссортимента.План") Тогда
		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыПлановогоАссортимента.ВРаботе");
	КонецЕсли; 
	Стр = Объект.Дегустация.Добавить();
	Если Копирование И Элементы.Дегустация.ТекущиеДанные<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Стр,Элементы.Дегустация.ТекущиеДанные);
		УИН_СтрокиДо=Элементы.Дегустация.ТекущиеДанные.УИН_Строки;
	КонецЕсли; 
	Стр.УИН_Строки = Новый УникальныйИдентификатор;
	Если Копирование И Элементы.Дегустация.ТекущиеДанные<>Неопределено Тогда
		МасСтр=Объект.ФайлыДегустации.НайтиСтроки(Новый Структура("УИН_Строки",УИН_СтрокиДо));
		Для каждого Эл Из МасСтр Цикл
			НовСтр=Объект.ФайлыДегустации.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Эл);
			НовСтр.УИН_Строки=Стр.УИН_Строки;
		КонецЦикла; 
		МасСтр=Объект.СпорныеИнгредиенты.НайтиСтроки(Новый Структура("УИН_Строки",УИН_СтрокиДо));
		Для каждого Эл Из МасСтр Цикл
			НовСтр=Объект.СпорныеИнгредиенты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Эл);
			НовСтр.УИН_Строки=Стр.УИН_Строки;
		КонецЦикла; 
	КонецЕсли; 
	Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	Если Не Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыПлановогоАссортимента.Закрыт") Тогда
		Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыПлановогоАссортимента.ЗаведенаКарточка");
	КонецЕсли; 
КонецПроцедуры

Процедура СформироватьСписокТехнологов()
	//Если ЗначениеЗаполнено(Объект.Родитель) И Не Объект.ПометкаУдаления Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыйАссортимент.Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.ПлановыйАссортимент КАК ПлановыйАссортимент
	|ГДЕ
	|	ПлановыйАссортимент.Ссылка В ИЕРАРХИИ(&Родитель)
	|	И ПлановыйАссортимент.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт.Ссылка.ГруппаТехнологов КАК ГруппаТехнологов
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	вт.Ссылка.ГруппаТехнологов <> ЗНАЧЕНИЕ(Справочник.ГруппыТехнологов.Пустаяссылка)";
	
	Папка=Объект.Родитель;
	//Если ЗначениеЗаполнено(Объект.Родитель.Родитель) Тогда
	//	Папка=Объект.Родитель.Родитель;
	//КонецЕсли; 
	
	Запрос.УстановитьПараметр("Родитель", Папка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Количество()=0 И ЗначениеЗаполнено(Объект.Родитель.Родитель) Тогда
		Папка=Объект.Родитель.Родитель;
		Запрос.УстановитьПараметр("Родитель", Папка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
	КонецЕсли; 
	Мас=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ГруппаТехнологов) 
			И Мас.Найти(ВыборкаДетальныеЗаписи.ГруппаТехнологов)=Неопределено Тогда
			Мас.Добавить(ВыборкаДетальныеЗаписи.ГруппаТехнологов);
		КонецЕсли; 
	КонецЦикла;
	//КонецЕсли; 
	МасФЛ=Новый Массив;
	Если Мас.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Ссылка В(&Ссылка)
		|	И РолиПользователейСоставРоли.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И РолиПользователейСоставРоли.Сотрудник.Код <> ""0000000001""
		|	И РолиПользователейСоставРоли.Сотрудник.Активный";
		
		Запрос.УстановитьПараметр("Ссылка", Мас[0].Технологи.ВыгрузитьКолонку("Технолог"));
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МасФЛ.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
		КонецЦикла;
	КонецЕсли; 
	
	
	
	Элементы.ДегустацияТехнологФЛ.СписокВыбора.ЗагрузитьЗначения(МасФЛ);
	Элементы.АналогиНаРынкеТехнологФЛ.СписокВыбора.ЗагрузитьЗначения(МасФЛ);
	
	Если Мас.Количество() Тогда
		Если Не Объект.ГруппаТехнологов= Мас[0] И Мас.Количество()=1 ИЛИ Мас.Количество()>1 И Не ЗначениеЗаполнено(Объект.ГруппаТехнологов)
			ИЛИ  Мас.Найти(Объект.ГруппаТехнологов)=Неопределено И Мас.Количество()>0 Тогда
			Объект.ГруппаТехнологов= Мас[0];
			РольТехнологаПриИзмененииНаСервере();
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	СформироватьСписокТехнологов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДегустацияПриАктивизацииСтроки(Элемент)
	ТекДанные=Элементы.Дегустация.ТекущиеДанные;
	Если ТекДанные<>Неопределено Тогда
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("УИН_Строки", ТекДанные.УИН_Строки);
		Элементы.ФайлыДегустации.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("УИН_Строки", ТекДанные.УИН_Строки);
		Элементы.СпорныеИнгридиенты.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
		Если Штучный(ТекДанные.ЕдиницаИзмерения) Тогда
			Элементы.ДегустацияЕдиницаИзмеренияШтуки.Доступность=Истина;
		Иначе
			Элементы.ДегустацияЕдиницаИзмеренияШтуки.Доступность=Ложь;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекДанные.ТехнологФЛ) И ЭтоТехнолог И СписокТехнологов.НайтиПоЗначению(ТекДанные.ТехнологФЛ)=Неопределено Тогда
			Элементы.Дегустация.ТолькоПросмотр=Истина;
		Иначе
			Элементы.Дегустация.ТолькоПросмотр=Ложь;
		КонецЕсли; 
		ХТМЛДегустации=ПолучитьХТМЛДегустации(ТекДанные.Описание);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьХТМЛДегустации(Знач Описание)
	Длина=СтрДлина(Описание);
	МасСимв=Новый Массив;
	МасСимв.Добавить(" ");
	МасСимв.Добавить(",");
	МасСимв.Добавить(";");
	МасСимв.Добавить(Символы.ПС);
	МасСимв.Добавить(Символы.НПП);
	МасСимв.Добавить(Символы.ВК);
	МасСимв.Добавить(Символы.ВТаб);
	МасСимв.Добавить(Символы.ПФ);
	МасСимв.Добавить(Символы.Таб);
	Сч=1;
	Пока Сч<=Длина Цикл
		Если Сред(Описание,Сч,5)="http:" ИЛИ Сред(Описание,Сч,4)="www." ИЛИ Сред(Описание,Сч,4)="ftp:" Тогда
			Для Ит=Сч По Длина Цикл
				Если МасСимв.Найти(Сред(Описание,Ит,1))<>Неопределено Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			ГСсылка=Сред(Описание,Сч,Ит-Сч);
			ДопСтрока="<a name=""link"" href="""+?(Лев(ГСсылка,4)="www.",СтрЗаменить(ГСсылка,"www.","http://www."),ГСсылка)+""">"+ГСсылка+"</a>";
		    Описание=Лев(Описание,Сч-1)+ДопСтрока+Сред(Описание,Сч+СтрДлина(ГСсылка));
			Длина=СтрДлина(Описание);
			Сч=Сч+СтрДлина(ДопСтрока)-1;
		КонецЕсли; 	
		Сч=Сч+1;
	КонецЦикла; 
	
	ХТМЛ="<html>
	|<head>
	|<title>Описание</title>
	|</head>
	|<body><div>"+Описание+"</div>
	|</body>
	|</html>";
	Возврат ХТМЛ;

КонецФункции // ()


&НаКлиенте
Процедура ДегустацияПередУдалением(Элемент, Отказ)
	Если Не Отказ Тогда
		Кол=Объект.ФайлыДегустации.Количество()-1;
		Для Сч=0 По Кол Цикл
			Если Объект.ФайлыДегустации[Кол-Сч].УИН_Строки=Элементы.Дегустация.ТекущиеДанные.УИН_Строки Тогда
				ТекСтрока = Объект.ФайлыДегустации[Кол-Сч];
				Если Не Отказ Тогда
					Объект.ФайлыДегустации.Удалить(Кол-Сч);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		Кол=Объект.СпорныеИнгредиенты.Количество()-1;
		Для Сч=0 По Кол Цикл
			Если Объект.СпорныеИнгредиенты[Кол-Сч].УИН_Строки=Элементы.Дегустация.ТекущиеДанные.УИН_Строки Тогда
				ТекСтрока = Объект.СпорныеИнгредиенты[Кол-Сч];
				Если Не Отказ Тогда
					Объект.СпорныеИнгредиенты.Удалить(Кол-Сч);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДегустацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Перем ИдентификаторФотографии, ОтносительноеИмяФайла, Расширение;
	Если Элементы.Дегустация.ТекущиеДанные<>Неопределено Тогда
		//								
		
		//
		//
		//
		//
		//Отказ = Истина;
		//
		//ПараметрыОткрытия = Новый Структура;
		//
		//СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайла");
		//МассивСтруктураДвоичныеДанные = Новый Массив();
		//
		//Если СтруктураВозврат <> Неопределено
		//	И СтруктураВозврат.БылВыборФайла Тогда
		//	
		//	Для Каждого Строка Из СтруктураВозврат.ТЗ_ИмяФайла Цикл
		//		Файл = Новый Файл(Строка.ИмяФайла);
		//		Если НЕ Файл.Существует() Тогда  
		//			Продолжить;	
		//		КонецЕсли;
		//		//Если НРег(Файл.Расширение) = ".pdf" Тогда
		//		//	ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\TotalPdfConverter\PDFConverter.exe """ + Файл.ПолноеИмя + """ """ + Файл.Путь + Файл.ИмяБезРасширения + ".jpg" + """" + " -jq 1 -fo -c jpg",, Истина);
		//		//	ТекДата = ТекущаяДата();
		//		//	Пока ТекДата + 8 >= ТекущаяДата() Цикл
		//		//		Продолжить;
		//		//	КонецЦикла;	
		//		//	Строка.ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".jpg";
		//		//	Файл = Новый Файл(Строка.ИмяФайла);
		//		//КонецЕсли;
		//		//
		//		//Если НРег(Файл.Расширение) = ".jpg" Тогда
		//		//	ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\CompressJPG\AKCompressJPG.exe """ + Строка.ИмяФайла + """ """ + Строка.ИмяФайла + """",, Истина);
		//		//КонецЕсли;
		//		
		//		МассивСтруктураДвоичныеДанные.Добавить(Новый Структура("ИмяФайла, ДвоичныеДанные", Строка.ИмяФайла, Новый ДвоичныеДанные(Строка.ИмяФайла)));
		//	КонецЦикла;	
		//	
		//	ДобавитьСертификатыПродукцииНаСервере(Элементы.Дегустация.ТекущиеДанные.УИН_Строки, СтруктураВозврат.ТЗ_ИмяФайла, МассивСтруктураДвоичныеДанные);
		
		
		
		Отказ = Истина;
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Заголовок = "Выберите файл";
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
		ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
		//ДиалогОткрытияФайла.Фильтр = 
		//	"Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		//	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		//	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		//	+ "Формат TIFF (*.tif)|*.tif|"
		//	+ "Формат GIF (*.gif)|*.gif|"
		//	+ "Формат PNG (*.png)|*.png|"
		//	+ "Формат icon (*.ico)|*.ico|"
		//	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"; // картинки
		
		Если ДиалогОткрытияФайла.Выбрать() = Ложь Тогда
			Возврат;
		КонецЕсли;
		
		ФайлКартинки = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
		ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
		ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);
		
		ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), Объект.Ссылка, ДанныеФотографии);
		Если ОтносительноеИмяФайла = Неопределено Тогда
			Предупреждение("Ошибка при добавлении файла!");
			Возврат;
		КонецЕсли;
		
		СтрокаФотографии = Объект.ФайлыДегустации.Добавить();
		СтрокаФотографии.ИмяФайла = ФайлКартинки.Имя;
		СтрокаФотографии.ИдентификаторФотографии = ИдентификаторФотографии;
		СтрокаФотографии.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
		СтрокаФотографии.УИН_Строки = Элементы.Дегустация.ТекущиеДанные.УИН_Строки;
		//Элемент.ТекущаяСтрока = СтрокаФотографии.ПолучитьИдентификатор();
		Модифицированность = Истина;
		
		
		Элементы.ФайлыДегустации.Обновить();             
	КонецЕсли;   
	Отказ = Истина;
КонецПроцедуры



&НаСервере
Процедура ДобавитьСертификатыПродукцииНаСервере(УИН_Строки, ТЗ_ПолноеИмяФайла, Знач МассивСтруктураДвоичныеДанные,ТЧ="ФайлыДегустации")
	
	Если ТЗ_ПолноеИмяФайла.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТЗ_ИменаФайлов = Новый ТаблицаЗначений;
	ТЗ_ИменаФайлов.Колонки.Добавить("ИмяФайла");
	
	СтрокаИменаФайловПолное = "";
	СтрокаИменаФайлов = "";
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	//Каталог = Каталог + "Сертификаты";
	
	Для Каждого Строка Из ТЗ_ПолноеИмяФайла Цикл 
		
		Файл = Новый Файл(Строка.ИмяФайла);
		//Если НЕ Файл.Существует() Тогда  
		//	Продолжить;	
		//КонецЕсли;
		//Если НРег(Файл.Расширение) = ".pdf" Тогда
		//	ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\TotalPdfConverter\PDFConverter.exe """ + Файл.ПолноеИмя + """ """ + Файл.Путь + Файл.ИмяБезРасширения + ".jpg" + """" + " -fo -c -jpg",, Истина);
		//	Файл = Новый Файл(Файл.Путь + Файл.ИмяБезРасширения + ".jpg");
		//	Строка.ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".jpg";
		//КонецЕсли;	
		СтрокаИменаФайловПолное = СтрокаИменаФайловПолное + Файл.ПолноеИмя + "; ";
		СтрокаИменаФайлов = СтрокаИменаФайлов + Файл.Имя + "; ";
		
		СтрокаУин = Строка(Новый УникальныйИдентификатор());
		НовоеИмяФайлаСертификата = Каталог + "\" + СтрокаУин + Файл.Расширение;
		
		Для Каждого ЭлементМассива Из МассивСтруктураДвоичныеДанные Цикл
			Если Файл.ПолноеИмя = ЭлементМассива.ИмяФайла Тогда
				ЭлементМассива.ДвоичныеДанные.Записать(НовоеИмяФайлаСертификата);
			КонецЕсли;	
		КонецЦикла;	
		
		НовСтрока = Объект[ТЧ].Добавить();
		НовСтрока.УИН_Строки = УИН_Строки;
		НовСтрока.ИмяФайла = НовоеИмяФайлаСертификата;
	КонецЦикла;	
	
	
	//Для Каждого СтрокаТаб Из ТЗ_ИменаФайлов Цикл
	//	Файл = Новый Файл(СтрокаТаб.ИмяФайла);
	//	ОтнИмяФайл = Файл.ИмяБезРасширения + Файл.Расширение;
	//	Расш = СтрЗаменить(Файл.Расширение, ".", "");
	//	ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("Номенклатура, Характеристика, ТипЗаписи, ОтносительноеИмяФайла, Расширение"
	//						, Объект.Ссылка, Характеристика, Перечисления.ТипыЗаписейПриложенныхКартинок.Сертификат, ОтнИмяФайл, Расш));
	//КонецЦикла;	
	
	//НЗ.Записать(); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДегустацииКраткоеИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ЗапуститьПриложение(ПолучитьПапку() + Элементы.ФайлыДегустации.ТекущиеДанные.ОтносительноеИмяФайла);
	
КонецПроцедуры

Функция ПолучитьПапку()
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	
	Если ПустаяСтрока(КаталогФотографий) Тогда
		СтрОшибка = "Не заполнена константа КаталогХраненияФайловЗадачМП!";
		ЗаписьЖурналаРегистрации(СтрОшибка, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение(СтрОшибка);
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	Возврат КаталогФотографий
	
КонецФункции // ()


&НаКлиенте
Процедура ДегустацияЕдиницаИзмеренияПриИзменении(Элемент)
	//Если Весовой(Элементы.Дегустация.ТекущиеДанные.ЕдиницаИзмерения) Тогда
	//	Элементы.ДегустацияВесУсловнойЕдиницы.Доступность=Истина;
	//Иначе
	//	Элементы.ДегустацияВесУсловнойЕдиницы.Доступность=Ложь;
	//	Элементы.Дегустация.ТекущиеДанные.ВесУсловнойЕдиницы=Неопределено;
	//
	//КонецЕсли;
	Если Штучный(Элементы.Дегустация.ТекущиеДанные.ЕдиницаИзмерения) Тогда
		Элементы.ДегустацияЕдиницаИзмеренияШтуки.Доступность=Истина;
	Иначе
		Элементы.ДегустацияЕдиницаИзмеренияШтуки.Доступность=Ложь;
		
	КонецЕсли;
	
	Если Не Штучный(Элементы.Дегустация.ТекущиеДанные.ЕдиницаИзмерения) Тогда
		Элементы.Дегустация.ТекущиеДанные.ЕдиницаИзмеренияШтуки=Неопределено;	
	КонецЕсли;
	РассчитатьЦенуЗаКг();
КонецПроцедуры

Функция Весовой(ЕдИзм)
	Возврат ЕдИзм=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("1") ИЛИ ЕдИзм=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166") ИЛИ 
	ЕдИзм=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("168"); 	
	
КонецФункции // ()

Функция Штучный(ЕдИзм)
	Возврат ЕдИзм=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); 	
	
КонецФункции // ()

&НаКлиенте
Процедура ДегустацияЦенаЗакупочнаяПриИзменении(Элемент)
	РассчитатьЦенуЗаКг();	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦенуЗаКг(ТЧ="Дегустация")
	Если Весовой(Элементы[ТЧ].ТекущиеДанные.ЕдиницаИзмерения) Тогда
		Элементы[ТЧ].ТекущиеДанные.ЦенаЗаКилограмм=ПолучитьЦену(Элементы[ТЧ].ТекущиеДанные.ЕдиницаИзмерения,Элементы[ТЧ].ТекущиеДанные.ЦенаЗакупочная,
		Элементы[ТЧ].ТекущиеДанные.ВесУсловнойЕдиницы);	
	ИначеЕсли Штучный(Элементы[ТЧ].ТекущиеДанные.ЕдиницаИзмерения) И ЗначениеЗаполнено(Элементы[ТЧ].ТекущиеДанные.ЕдиницаИзмеренияШтуки) Тогда	
		Элементы[ТЧ].ТекущиеДанные.ЦенаЗаКилограмм=ПолучитьЦенуДляШтуки(Элементы[ТЧ].ТекущиеДанные.ЦенаЗакупочная,Элементы[ТЧ].ТекущиеДанные.ЕдиницаИзмеренияШтуки,
		Элементы[ТЧ].ТекущиеДанные.ВесУсловнойЕдиницы);	
	Иначе
		Элементы[ТЧ].ТекущиеДанные.ЦенаЗаКилограмм=0;	
	КонецЕсли; 
КонецПроцедуры


Функция ПолучитьЦену(ЕдиницаИзмерения,ЦенаЗакупочная,ВесУсловнойЕдиницы)
	Если ЕдиницаИзмерения=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("1") Тогда
		Возврат ?(ВесУсловнойЕдиницы=0,0,1000*ЦенаЗакупочная/ВесУсловнойЕдиницы);	
	ИначеЕсли ЕдиницаИзмерения=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166") Тогда
		Возврат ?(ВесУсловнойЕдиницы=0,0,ЦенаЗакупочная/ВесУсловнойЕдиницы);	
	ИначеЕсли ЕдиницаИзмерения=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("168") Тогда
		Возврат ?(ВесУсловнойЕдиницы=0,0,0.001*ЦенаЗакупочная/ВесУсловнойЕдиницы);	
	КонецЕсли; 
КонецФункции


Функция ПолучитьЦенуДляШтуки(ЦенаЗакупочная,ЕдиницаИзмеренияШтуки,ВесУсловнойЕдиницы)
	Если ЕдиницаИзмеренияШтуки=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166") Тогда
		Возврат ?(ВесУсловнойЕдиницы=0,0,ЦенаЗакупочная/ВесУсловнойЕдиницы);	
	ИначеЕсли ЕдиницаИзмеренияШтуки=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("111") Тогда
		Возврат ?(ВесУсловнойЕдиницы=0,0,1000*ЦенаЗакупочная/ВесУсловнойЕдиницы);	
	КонецЕсли; 
КонецФункции


&НаКлиенте
Процедура ДегустацияВесУсловнойЕдиницыПриИзменении(Элемент)
	РассчитатьЦенуЗаКг();
КонецПроцедуры

&НаКлиенте
Процедура СпорныеИнгридиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Дегустация.ТекущиеДанные<>Неопределено Тогда
		Стр=Объект.СпорныеИнгредиенты.Добавить();
		Стр.УИН_Строки=Элементы.Дегустация.ТекущиеДанные.УИН_Строки;
	КонецЕсли;                                       
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпорныеИнгридиентыИнгридиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Отбор=Новый Структура("ГруппаТовара",Объект.Родитель);
	Парам=Новый Структура("Отбор",Отбор);
	ОткрытьФорму("Справочник.Ингредиенты.ФормаВыбора",Парам,Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынкеПриАктивизацииСтроки(Элемент)
	ТекДанные=Элементы.АналогиНаРынке.ТекущиеДанные;
	Если ТекДанные<>Неопределено Тогда
		ОтборСтрок = Новый Структура;             
		ОтборСтрок.Вставить("УИН_Строки", ТекДанные.УИН_Строки);
		Элементы.ФайлыАналогов.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("УИН_Строки", ТекДанные.УИН_Строки);
		Элементы.СпорныеИнгредиентыАналогов.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("УИН_Строки", ТекДанные.УИН_Строки);
		Элементы.Сети.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
		Если Штучный(ТекДанные.ЕдиницаИзмерения) Тогда
			Элементы.АналогиНаРынкеЕдиницаИзмеренияШтуки.Доступность=Истина;
		Иначе
			Элементы.АналогиНаРынкеЕдиницаИзмеренияШтуки.Доступность=Ложь;
		КонецЕсли;
		ХТМЛАналоги=ПолучитьХТМЛДегустации(ТекДанные.Описание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Стр = Объект.АналогиНаРынке.Добавить();
	Если Копирование И Элементы.АналогиНаРынке.ТекущиеДанные<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Стр,Элементы.АналогиНаРынке.ТекущиеДанные);
		УИН_СтрокиДо=Элементы.АналогиНаРынке.ТекущиеДанные.УИН_Строки;
	КонецЕсли; 
	Стр.УИН_Строки = Новый УникальныйИдентификатор;
	Если Копирование И Элементы.АналогиНаРынке.ТекущиеДанные<>Неопределено Тогда
		МасСтр=Объект.ФайлыАналогов.НайтиСтроки(Новый Структура("УИН_Строки",УИН_СтрокиДо));
		Для каждого Эл Из МасСтр Цикл
			НовСтр=Объект.ФайлыАналогов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Эл);
			НовСтр.УИН_Строки=Стр.УИН_Строки;
		КонецЦикла; 
		МасСтр=Объект.СпорныеИнгредиентыАналогов.НайтиСтроки(Новый Структура("УИН_Строки",УИН_СтрокиДо));
		Для каждого Эл Из МасСтр Цикл
			НовСтр=Объект.СпорныеИнгредиентыАналогов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Эл);
			НовСтр.УИН_Строки=Стр.УИН_Строки;
		КонецЦикла; 
		МасСтр=Объект.Сети.НайтиСтроки(Новый Структура("УИН_Строки",УИН_СтрокиДо));
		Для каждого Эл Из МасСтр Цикл
			НовСтр=Объект.Сети.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Эл);
			НовСтр.УИН_Строки=Стр.УИН_Строки;
		КонецЦикла; 
	КонецЕсли; 
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынкеПередУдалением(Элемент, Отказ)
	Если Не Отказ Тогда
		Кол=Объект.ФайлыАналогов.Количество()-1;
		Для Сч=0 По Кол Цикл
			Если Объект.ФайлыАналогов[Кол-Сч].УИН_Строки=Элементы.АналогиНаРынке.ТекущиеДанные.УИН_Строки Тогда
				ТекСтрока = Объект.ФайлыАналогов[Кол-Сч];
				Если Не Отказ Тогда
					Объект.ФайлыАналогов.Удалить(Кол-Сч);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		Кол=Объект.СпорныеИнгредиентыАналогов.Количество()-1;
		Для Сч=0 По Кол Цикл
			Если Объект.СпорныеИнгредиентыАналогов[Кол-Сч].УИН_Строки=Элементы.АналогиНаРынке.ТекущиеДанные.УИН_Строки Тогда
				ТекСтрока = Объект.СпорныеИнгредиентыАналогов[Кол-Сч];
				Если Не Отказ Тогда
					Объект.СпорныеИнгредиентыАналогов.Удалить(Кол-Сч);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		Кол=Объект.Сети.Количество()-1;
		Для Сч=0 По Кол Цикл
			Если Объект.Сети[Кол-Сч].УИН_Строки=Элементы.АналогиНаРынке.ТекущиеДанные.УИН_Строки Тогда
				ТекСтрока = Объект.Сети[Кол-Сч];
				Если Не Отказ Тогда
					Объект.Сети.Удалить(Кол-Сч);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ФайлыАналоговПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.АналогиНаРынке.ТекущиеДанные<>Неопределено Тогда
		Отказ = Истина;
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Заголовок = "Выберите файл";
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
		ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
		//ДиалогОткрытияФайла.Фильтр = 
		//	"Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		//	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		//	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		//	+ "Формат TIFF (*.tif)|*.tif|"
		//	+ "Формат GIF (*.gif)|*.gif|"
		//	+ "Формат PNG (*.png)|*.png|"
		//	+ "Формат icon (*.ico)|*.ico|"
		//	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"; // картинки
		
		Если ДиалогОткрытияФайла.Выбрать() = Ложь Тогда
			Возврат;
		КонецЕсли;
		
		ФайлКартинки = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
		ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
		ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);
		
		ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), Объект.Ссылка, ДанныеФотографии);
		Если ОтносительноеИмяФайла = Неопределено Тогда
			Предупреждение("Ошибка при добавлении файла!");
			Возврат;
		КонецЕсли;
		
		СтрокаФотографии = Объект.ФайлыАналогов.Добавить();
		СтрокаФотографии.ИмяФайла = ФайлКартинки.Имя;
		СтрокаФотографии.ИдентификаторФотографии = ИдентификаторФотографии;
		СтрокаФотографии.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
		СтрокаФотографии.УИН_Строки = Элементы.АналогиНаРынке.ТекущиеДанные.УИН_Строки;
		//Элемент.ТекущаяСтрока = СтрокаФотографии.ПолучитьИдентификатор();
		Модифицированность = Истина;
		
		
		
		Элементы.ФайлыАналогов.Обновить();
	КонецЕсли;   
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыАналоговИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ЗапуститьПриложение(ПолучитьПапку()+Элементы.ФайлыАналогов.ТекущиеДанные.ОтносительноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура СпорныеИнгредиентыАналоговПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.АналогиНаРынке.ТекущиеДанные<>Неопределено Тогда
		Стр=Объект.СпорныеИнгредиентыАналогов.Добавить();
		Стр.УИН_Строки=Элементы.АналогиНаРынке.ТекущиеДанные.УИН_Строки;
	КонецЕсли;                                       
	Элементы.СпорныеИнгредиентыАналогов.Обновить();	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СетиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.АналогиНаРынке.ТекущиеДанные<>Неопределено Тогда
		Стр=Объект.Сети.Добавить();
		Стр.УИН_Строки=Элементы.АналогиНаРынке.ТекущиеДанные.УИН_Строки;
	КонецЕсли;                                       
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпорныеИнгредиентыАналоговИнгредиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Отбор=Новый Структура("ГруппаТовара",Объект.Родитель);
	Парам=Новый Структура("Отбор",Отбор);
	ОткрытьФорму("Справочник.Ингредиенты.ФормаВыбора",Парам,Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынкеЕдиницаИзмеренияПриИзменении(Элемент)
	//Если Весовой(Элементы.АналогиНаРынке.ТекущиеДанные.ЕдиницаИзмерения) Тогда
	//	Элементы.АналогиНаРынкеВесУсловнойЕдиницы.Доступность=Истина;
	//Иначе
	//	Элементы.АналогиНаРынкеВесУсловнойЕдиницы.Доступность=Ложь;
	//	Элементы.АналогиНаРынке.ТекущиеДанные.ВесУсловнойЕдиницы=Неопределено;
	//
	//КонецЕсли;
	
	Если Штучный(Элементы.АналогиНаРынке.ТекущиеДанные.ЕдиницаИзмерения) Тогда
		Элементы.АналогиНаРынкеЕдиницаИзмеренияШтуки.Доступность=Истина;
	Иначе
		Элементы.АналогиНаРынкеЕдиницаИзмеренияШтуки.Доступность=Ложь;
		
	КонецЕсли;
	
	Если Не Штучный(Элементы.АналогиНаРынке.ТекущиеДанные.ЕдиницаИзмерения) Тогда
		Элементы.АналогиНаРынке.ТекущиеДанные.ЕдиницаИзмеренияШтуки=Неопределено;	
	КонецЕсли;
	
	РассчитатьЦенуЗаКг("АналогиНаРынке");
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынкеВесУсловнойЕдиницыПриИзменении(Элемент)
	РассчитатьЦенуЗаКг("АналогиНаРынке");
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынкеЦенаЗакупочнаяПриИзменении(Элемент)
	РассчитатьЦенуЗаКг("АналогиНаРынке");
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	СтатусПриИзмененииСервер();
	
КонецПроцедуры

Процедура СтатусПриИзмененииСервер()
	Если Не ЭтоТехнолог И Не ЭтоПродакт И Не РольДоступна("ПолныеПрава") И Объект.Статус=Перечисления.СтатусыПлановогоАссортимента.Отменен Тогда
		Объект.Статус=Объект.Ссылка.Статус;
		Сообщить("Недостаточно прав");
	КонецЕсли; 
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановитьВидимость()
	//Если Объект.Статус=Перечисления.СтатусыПлановогоАссортимента.План Тогда
	//	Элементы.Дегустация.ТолькоПросмотр=Ложь;
	//	Элементы.ФайлыДегустации.ТолькоПросмотр=Ложь;
	//	Элементы.СпорныеИнгридиенты.ТолькоПросмотр=Ложь;
	//Иначе	
	//	Элементы.Дегустация.ТолькоПросмотр=Истина;
	//	Элементы.ФайлыДегустации.ТолькоПросмотр=Истина;
	//	Элементы.СпорныеИнгридиенты.ТолькоПросмотр=Истина;
	//КонецЕсли; 
	Кол=История.Отбор.Элементы.Количество();
	Для Сч=0 По Кол-1 Цикл
		История.Отбор.Элементы.Удалить(Кол-1-Сч);
	КонецЦикла; 
	
	ЭлементОтбора = История.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПлановыйАссортимент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
КонецПроцедуры

&НаКлиенте
Процедура Подходит(Команда)
	Элементы.Подходит.Пометка=Не Элементы.Подходит.Пометка;
	Если Элементы.Подходит.Пометка Тогда
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Подходит", Истина);
		Элементы.Дегустация.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	Иначе	
		Элементы.Дегустация.ОтборСтрок = Неопределено;
		
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьВидимость();
	Мен=РегистрыСведений.ИсторияСтатусовПлановогоАссортимента.СоздатьМенеджерЗаписи();
	Мен.Период=ТекущаяДата();
	Мен.ПлановыйАссортимент=Объект.Ссылка;
	Мен.Статус=Объект.Статус;
	Мен.Автор=ПараметрыСеанса.ТекущийПользователь;
	Мен.ПлановаяДатаЗапуска=Объект.ПлановаяДатаЗапуска;
	Мен.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ФайлыАналоговИмяФайлаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ЗапуститьПриложение(ПолучитьПапку()+Элементы.ФайлыАналогов.ТекущиеДанные.ОтносительноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДегустацииКраткоеИмяФайлаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ЗапуститьПриложение(ПолучитьПапку()+Элементы.ФайлыДегустации.ТекущиеДанные.ОтносительноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДегустацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ЗапуститьПриложение(ПолучитьПапку()+Элементы.ФайлыДегустации.ТекущиеДанные.ОтносительноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыАналоговОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ЗапуститьПриложение(ПолучитьПапку()+Элементы.ФайлыАналогов.ТекущиеДанные.ОтносительноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура АналогиНаРынкеЕдиницаИзмеренияШтукиПриИзменении(Элемент)
	РассчитатьЦенуЗаКг("АналогиНаРынке");	
КонецПроцедуры

&НаКлиенте
Процедура ДегустацияЕдиницаИзмеренияШтукиПриИзменении(Элемент)
	РассчитатьЦенуЗаКг();	
КонецПроцедуры


//+++АК BELN 2017.11.02 ИП-00017153
&НаКлиенте
Процедура История(Команда)
	Парам=Новый Структура("СсылкаНаОбъект,ЗаполнятьСписокВерсий",Объект.Ссылка,Истина);
	ОткрытьФорму("Отчет.ИсторияИзмененийОбъектов.Форма.ФормаОтчетаУпр",Парам);
КонецПроцедуры

//---АК BELN 2017.11.02 ИП-00017153




&НаСервере
Функция ПолучитьГруппы()
	МасНом=Новый Массив;
	МасНом.Добавить(Справочники.Номенклатура.НайтиПоКоду("000618818"));//консервация
	МасНом.Добавить(Справочники.Номенклатура.НайтиПоКоду("000618817"));//рыба
	МасНом.Добавить(Справочники.Номенклатура.НайтиПоКоду("000618819"));//кулинария
	МасНом.Добавить(Справочники.Номенклатура.НайтиПоКоду("000618811"));//мясо
	МасНом.Добавить(Справочники.Номенклатура.НайтиПоКоду("000000401"));//молоко
	МасНом.Добавить(Справочники.Номенклатура.НайтиПоКоду("000618812"));//мясная гастрономия
	МасНом.Добавить(Справочники.Номенклатура.НайтиПоКоду("000000400"));//хлеб
	Возврат МасНом	
	
КонецФункции // ()

//+++АК BELN 2017.11.02 

//---АК BELN 2017.11.02 
&НаСервере
Функция ПолучитьФЛРоли(Технолог)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|ГДЕ
	|	РолиПользователейСоставРоли.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Технолог);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	МасФЛ=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасФЛ.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
	КонецЦикла;
	
	Возврат МасФЛ
КонецФункции // ()

&НаКлиенте
Процедура ДегустацияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		Если СписокДегустаций.НайтиПоЗначению(Элементы.Дегустация.ТекущиеДанные.УИН_Строки)=Неопределено Тогда
			СписокДегустаций.Добавить(Элементы.Дегустация.ТекущиеДанные.УИН_Строки);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТехнологовПриИзменении(Элемент)
	РольТехнологаПриИзмененииНаСервере();
КонецПроцедуры
//АК БЕЛН 31.05.2017-
//+++АК BELN 2017.11.02 ИП-00017153
&НаКлиенте
Процедура ДегустацияПодходитПриИзменении(Элемент)
	Если Элементы.Дегустация.ТекущиеДанные.Подходит Тогда
		Если СписокДегустацийПодходит.НайтиПоЗначению(Элементы.Дегустация.ТекущиеДанные.УИН_Строки)=Неопределено Тогда
			СписокДегустацийПодходит.Добавить(Элементы.Дегустация.ТекущиеДанные.УИН_Строки);
		КонецЕсли;
	Иначе
		Для каждого Эл Из СписокДегустацийПодходит Цикл
			Если Эл.Значение=Элементы.Дегустация.ТекущиеДанные.УИН_Строки Тогда
				СписокДегустацийПодходит.Удалить(Эл);
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 	
КонецПроцедуры


&НаКлиенте
Процедура ДегустацияОписаниеПриИзменении(Элемент)
	ХТМЛДегустации=ПолучитьХТМЛДегустации(Элементы.Дегустация.ТекущиеДанные.Описание);
КонецПроцедуры


&НаКлиенте
Процедура ХТМЛДегустацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Попытка
		Если ДанныеСобытия.Element.name = "link" Тогда
			ЗапуститьПриложение(ДанныеСобытия.Element.href);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура АналогиНаРынкеОписаниеПриИзменении(Элемент)
	ХТМЛАналоги=ПолучитьХТМЛДегустации(Элементы.АналогиНаРынке.ТекущиеДанные.Описание);
КонецПроцедуры

&НаКлиенте
Процедура ХТМЛАналогиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Попытка
		Если ДанныеСобытия.Element.name = "link" Тогда
			ЗапуститьПриложение(ДанныеСобытия.Element.href);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

//---АК BELN 2017.11.02 ИП-00017153

&НаКлиенте
Процедура ДегустацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДегустацияПереписка" и НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Переписка = Новый ТекстовыйДокумент;
		Переписка.УстановитьТекст(Элемент.ТекущиеДанные.Переписка);
		Переписка.Показать("Переписка по образцу");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Файлы1ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ЗапуститьПриложение(ПолучитьПапку() + Элементы.Файлы1.ТекущиеДанные.ОтносительноеИмяФайла);
	
КонецПроцедуры




