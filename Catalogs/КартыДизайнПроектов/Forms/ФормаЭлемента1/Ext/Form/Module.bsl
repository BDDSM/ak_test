
// Под веб-клиентом IE, если установлено положение заголовка "Верх", выдаёт ошибку "Неизвестная ошибка: Недопустимый аргумент"

&НаСервереБезКонтекста
Функция ПолучитьПояснения(ТолькоПоля, НаименованиеПояснения = "")
	
	СтруктураПояснения = Новый Структура("Изготовитель,ЮридическийАдрес,ФактическийАдрес,Производство,Импортёр,Местонахождение,
		|ЮридическийАдресИмпортёра,
		|Наименование,НомерНормативногоДокумента,НаименованиеПродуктаПоТехническойДокументации,СоставПродуктаДляЭтикетки,
		|РыбнаяПродукцияДополнительно,
		|ЭнергетическаяЦенность,ПищевыеВолокна,ОбогащениеПродуктаМинераламиИВитаминами,СодержаниеПродуктаДополнительно,ДополнительныеУсловияХранения,
		|СрокГодности,УсловияХранения,Влажность,
		|ЗнакиСоответствия,ЗначенияПетлиМёбиуса,ЗнакВилкаРюмка,СпециальныеЗнаки,
		|МассоваяДоляОсновногоПродукта,СпособПриготовленияПрименения,УсловияХраненияПослеВскрытияУпаковки,РекомендацииПоПотреблению,
		|Аллергены,ПредупреждающиеФразы,ФразаДляБезопасностиУпотребления,
		|ПротоколИспытанийНаПоказателиПищевойЦенности,ОбразецУпаковкиЭтикетки,РабочиеФайлыУпаковкиЭтикетки,ЧертёжДляЭтикетокФлоупак,Сертификаты,
		|МестоДляПроставленияДаты,СпособПроставленияДаты,ФорматПроставленияДаты,ДатаИзготовленияРавнаДатеУпаковки,МатериалПечати,РазмерПоляДляЭтикетки,ТипНаклейкиЭтикетки,
		|ОсобенностиПродукта,ОсобенностиПроизводстваПродукта,ОсобенностиПродуктаПрочие");
	Если ТолькоПоля Тогда Возврат СтруктураПояснения; КонецЕсли;
	
	Если НЕ ПустаяСтрока(НаименованиеПояснения) Тогда Возврат РегистрыСведений.ПоясненияКартДизайнПроектов.ПолучитьПояснение(НаименованиеПояснения, 1); КонецЕсли;
	
	СтруктураПояснения.Вставить("Изготовитель", "Полное наименование, полный Юр адрес с индексом. Для импортных товаров обязательно указывать наименование и место нахождения импортера. Наименование и адрес изготовителя писать на языке страны или буквами латинского языка, но страну обязательно прописывать на русском языке");
	СтруктураПояснения.Вставить("Производство", "Полное наименование, полный Факт. адрес с индексом. (Если производитель один, а упаковывает другая компания. В данном случае необходимо прописывать информацию о том, кто упаковывает!)");
	СтруктураПояснения.Вставить("Наименование", "Указываемое наименование должно соответствовать наименованию декларации соответствия, свидетельства государственной регистрации, сертификата соответствия и т.д.(выносим на этикетку)");
	СтруктураПояснения.Вставить("НомерНормативногоДокумента", "прикрепите скан нормативного документа (в т.ч. страницы с информацией о пищевой ценности и показателях и методах контроля)");
	СтруктураПояснения.Вставить("НаименованиеПродуктаПоТехническойДокументации", "Указываемое наименование должно соответствовать наименованию в нормативно-технической документации");
	СтруктураПояснения.Вставить("СоставПродуктаДляЭтикетки", "Компоненты в составе указываются в порядке убывания их массовой доли. При наличии составного компонента, на этикетке указывается перечень всех его ингредиентов в порядке убывания их массовой доли");
	СтруктураПояснения.Вставить("ЭнергетическаяЦенность", "Если продукция не попадает под область действия ТРТС 022 (Рыбная), кДж можно не указывать");
	СтруктураПояснения.Вставить("ОбогащениеПродуктаМинераламиИВитаминами", "Если в продукт добавлены минеральные вещества или витамины, они должны быть указаны на этикетке. Если таких веществ в составе нет, напишите - НЕТ");
	СтруктураПояснения.Вставить("СодержаниеПродуктаДополнительно", "Специфическая информация, которую также нужно добавить (например, содержание молочнокислых микроорганизмов в продукте). Ароматизаторы");
	СтруктураПояснения.Вставить("СрокГодности", "Продукт со сроком хранения менее трех суток считается скоропортящимся и срок годности указывается в часах");
	СтруктураПояснения.Вставить("УсловияХранения", "Обязательно указания значения при отрицательных температурах (например: -18)");
	СтруктураПояснения.Вставить("Влажность", "Указать влажность при хранении продукта");
	СтруктураПояснения.Вставить("ЗнакиСоответствия", "РСТ действует только на категории не попадающие по ТСТР (например, рыбная продукция), и на продукцию отвечающую требованиям ТР ТС и дополнительно добровольно сертифицируемую");
	СтруктураПояснения.Вставить("ЗначенияПетлиМёбиуса", "обяз-й знак согласно ТР ТС 005/2011. В треугольнике может указываться цифра-код материала, из которого изготавливается упаковка. Если в упаковке использованы 2 и более материала, нужно указать значение для каждого из них");
	СтруктураПояснения.Вставить("ЗнакВилкаРюмка", "Если этого знака нет на таре, нужно поставить в пустое поле слово “Да”, чтобы мы указали его на этикете");
	СтруктураПояснения.Вставить("СпециальныеЗнаки", "Указать при необходимости наличие специальных знаков, например: “температурные режимы”; “защита от прямых солнечных лучей”; “не тестировано на животных”, ХАССП");
	СтруктураПояснения.Вставить("ДополнительныеУсловияХранения", "Вписать дополнительные условия хранения (например: избегать попадания прямых солнечных лучей)");
	СтруктураПояснения.Вставить("МассоваяДоляОсновногоПродукта", "Для продуктов, в которых основной компонент находится в жидкой среде (в сиропе, рассоле, во фруктовом или овощном соке, в бульоне и пр.), помимо общей массы нетто должна быть указана масса основного продукта");
	СтруктураПояснения.Вставить("СпособПриготовленияПрименения", "Для полуфабрикатов, сырых и иных продуктов, которые нельзя употреблять в том виде, в котором они продаются, указывается способ приготовления (подробно, точное время и температура), в противном случае, указывается: ПРОДУКТ ГОТОВ К УПОТРЕБЛЕНИЮ");
	СтруктураПояснения.Вставить("УсловияХраненияПослеВскрытияУпаковки", "Если после вскрытия упаковки сроки годности не меняются, напишите в колонке справа - НЕТ");
	СтруктураПояснения.Вставить("РекомендацииПоПотреблению", "Если рекомендаций по использованию/обработки/готовке нет, напишите в колонке справа - НЕТ");
	СтруктураПояснения.Вставить("ФразаДляБезопасностиУпотребления", "Напишите фразу для безопасности употребления");
	СтруктураПояснения.Вставить("ПредупреждающиеФразы", "Если в составе присутствуют эти компоненты, просьба их отметить");
	СтруктураПояснения.Вставить("Аллергены", "Диоксид серы (сульфиты), если их ≥ 10 мг/кг(л).
		|Необходимо указать аллергены в продукте, также возможно их наличие и продукты их переработки. Напротив алергенов укажите какой именно аллерген, для этого необходимо поставить следующие значения:
		|
		|ПРИСУТСТВУЕТ - в случае применения данного аллергена в продукте;
		|СЛЕДЫ - в случае остаточного явления на оборудовании;
		|ПРОДУКТ ПЕРЕРАБОТКИ - указывается в использовании полуфабрикатов, содержащих данный аллерген");
	СтруктураПояснения.Вставить("ОсобенностиПродукта", "для овощей и продуктов из овощей/фруктов - где выращивались, когда собрали урожай;
		|
		|для мяса и продуктов из мяса - чем кормили животных, выгул/выпас;
		|
		|для рыбы и рыбных продуктов - место ловли, костлявость;
		|
		|другое");
	СтруктураПояснения.Вставить("ОсобенностиПроизводстваПродукта", "для сыров и ск колбас - сроки созревания	
		|
		|для молочки - термостатный способ или обычный, содержание молочнокислых микроорганизмов в продукте (для кисломолочных продуктов), содержание бифидобактерий, содержание дрожжей в продукте на конец срока годности для кефира и т.д.
		|
		|особенности копчения, выпечки, выдержки и пр.
		|
		|другое");
	СтруктураПояснения.Вставить("ОсобенностиПродуктаПрочие", "Описание вкуса продукта	
		|
		|Содержание сахара/соли на 100 г или 1 штуку
		|
		|Если в составе отсутствуют вредные/неполезные компоненты (например, трансжиры и т.п.), которые обычно есть в составе аналогичных продуктов, укажите их");
	
	// пояснения к вложенным файлам
	СтруктураПояснения.Вставить("ПротоколИспытанийНаПоказателиПищевойЦенности", "Если это многокомпонентный продукт");
	СтруктураПояснения.Вставить("ОбразецУпаковкиЭтикетки", "При наличии прикрепить к полю");
	СтруктураПояснения.Вставить("РабочиеФайлыУпаковкиЭтикетки", "При наличии прикрепить к полю");
	СтруктураПояснения.Вставить("ЧертёжДляЭтикетокФлоупак", "При наличии прикрепить к полю");
	СтруктураПояснения.Вставить("Сертификаты", "(ИСО 9000,22000, ХАССП итд) при наличии");
	
	Если НЕ ПустаяСтрока(НаименованиеПояснения) Тогда Возврат СтруктураПояснения[НаименованиеПояснения]; КонецЕсли;
	
	Возврат СтруктураПояснения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПояснения()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	СтруктураПояснения = ПолучитьПояснения(Истина);
	Для Каждого КлючИЗначение Из СтруктураПояснения Цикл
		ИмяПоляПояснения = КлючИЗначение.Ключ;
		//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяПоляПояснения + "Пояснение", Новый ОписаниеТипов("КнопкаФормы"), "Группа" + ИмяПоляПояснения));
		НоваяКнопка = Элементы.Добавить(ИмяПоляПояснения + "Пояснение", Тип("КнопкаФормы"), Элементы["Группа" + ИмяПоляПояснения]);
		НоваяКнопка.ИмяКоманды = "ПоказатьПояснение";
		НоваяКнопка.Ширина = 3;
	КонецЦикла;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		//ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЛистыФайловДляЗагрузки(ГруппыСФайламиСтрокой = "", Знач НачНомерФайла = 0)
	
	Если ПустаяСтрока(ГруппыСФайламиСтрокой) Тогда
		ГруппыСФайламиСтрокой = "ДекларацияСоответствия,ТитульныйЛистНаПродукцию,ОбластьПрименения,АссортиментныйПеречень,ТребованияКСырью,ПодтверждениеМассы,
			|СведенияПищевойИЭнергетическойЦенности,ПротоколИспытанийНаПоказателиПищевойЦенности,
			|УсловияТранспортировкиИХраненияПродукции,ФизикоХимическиеПоказатели,
			|БезопасностьУпаковочныхМатериаловДляТары,
			|ОбразецУпаковкиЭтикетки,РабочиеФайлыУпаковкиЭтикетки,ЧертёжДляЭтикетокФлоупак,ОбразецУпаковкиДляВкусВилл,
			|ПротоколИспытанийНаКонкретныйПродукт,ПротоколПодтверждающийСрокГодности,МикробиологическиеИХимическиеПоказатели,Сертификаты";
	КонецЕсли;
	МассивГруппДляЗагрузкиФайлов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ГруппыСФайламиСтрокой, Символы.ПС, ""), ",");
	
	Если НачНомерФайла = Неопределено Тогда
		Возврат МассивГруппДляЗагрузкиФайлов;
	ИначеЕсли НачНомерФайла = -1 Тогда
		// удалили лист, нужно всё перерисовать
		ЭлементыДляУдаления = Элементы["Группа" + ГруппыСФайламиСтрокой].ПодчиненныеЭлементы;
		МассивДляУдаления = Новый Массив;
		Для Каждого ЭлементыДляУдаления Из ЭлементыДляУдаления Цикл
			МассивДляУдаления.Добавить(ЭлементыДляУдаления);
		КонецЦикла;
		Для Каждого ЭлементДляУдаления Из МассивДляУдаления Цикл
			Если Найти(ЭлементДляУдаления.Имя, "_Лист") > 0 Тогда
				Элементы.Удалить(ЭлементДляУдаления);
			КонецЕсли;
		КонецЦикла;
		НачНомерФайла = 0;
	КонецЕсли;
	
	ТекСтатус = Объект.Статус;
	
	Для Каждого ТипФайла Из МассивГруппДляЗагрузкиФайлов Цикл
		// получаем следующий номер файла
		Если НачНомерФайла = 0 Тогда
			НомерФайла = 0;
			МассивСтрокДляОтбора = Объект.Файлы.НайтиСтроки(Новый Структура("ТипФайла", ТипФайла));
			Для Каждого СтрокаТЧФайлы Из МассивСтрокДляОтбора Цикл
				НомерФайла = Макс(НомерФайла, СтрокаТЧФайлы.НомерФайла);
			КонецЦикла;
			НомерФайла = НомерФайла + 1;
			НачНомерФайла = 1;
		Иначе
			НомерФайла = НачНомерФайла + 1;
		КонецЕсли;
		
		Для Сч = НачНомерФайла По НомерФайла Цикл
			НомерЛиста = "_Лист" + Формат(Сч, "ЧГ=");
			ИмяЭлементаЛиста = ТипФайла + НомерЛиста;
			
			НоваяКнопка = Элементы.Найти(ИмяЭлементаЛиста);
			Если НоваяКнопка = Неопределено Тогда
				НоваяКнопка = Элементы.Добавить(ИмяЭлементаЛиста, Тип("КнопкаФормы"), Элементы["Группа" + ТипФайла]);
				НоваяКнопка.Ширина = 9;
			КонецЕсли;
			НоваяКнопка.Заголовок = СтрЗаменить(НомерЛиста, "_", "");
			НоваяКнопка.ИмяКоманды = ?(Сч = НомерФайла, "ДобавитьЛистФайла", "ОткрытьЛистФайла");
			
			Если Сч < НомерФайла Тогда
				Если НЕ (ЭтоАудитор И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУАудитора")) Тогда
					НоваяКнопка = Элементы.Добавить(ИмяЭлементаЛиста + "_DEL", Тип("КнопкаФормы"), Элементы["Группа" + ТипФайла]);
					НоваяКнопка.ИмяКоманды = "УдалитьЛистФайла";
					НоваяКнопка.Ширина = 2;
					// промежуток между кнопками
					НоваяКнопка = Элементы.Добавить(ИмяЭлементаЛиста + "_Надпись", Тип("ДекорацияФормы"), Элементы["Группа" + ТипФайла]);
					НоваяКнопка.Заголовок = " ";
					НоваяКнопка.Ширина = 1;
					НоваяКнопка.РастягиватьПоГоризонтали = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НачНомерФайла = 0;
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ТолькоПросмотрВсехПодчинённых(ЭлементыДляПросмотра, ЭтоАудитор = Ложь)
	Для Каждого ЭлементДляПросмотра Из ЭлементыДляПросмотра Цикл
		ТипЭлемента = Тип(ЭлементДляПросмотра);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда
			Если ЭлементДляПросмотра.ЦветТекстаЗаголовка <> ЦветаСтиля.ЦветОсобогоТекста И НЕ ЭлементДляПросмотра.ТолькоПросмотр Тогда
				ТолькоПросмотрВсехПодчинённых(ЭлементДляПросмотра.ПодчиненныеЭлементы, ЭтоАудитор);
			КонецЕсли;
		ИначеЕсли ТипЭлемента = Тип("ДекорацияФормы") Тогда
			Продолжить;
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") И ЭлементДляПросмотра.Доступность Тогда
			ИмяКомандыЭлемента = ЭлементДляПросмотра.ИмяКоманды;
			Если ИмяКомандыЭлемента <> "ПоказатьПояснение" И НЕ (ЭтоАудитор И (ИмяКомандыЭлемента = "ДобавитьЛистФайла" ИЛИ ИмяКомандыЭлемента = "ОткрытьЛистФайла")) Тогда
				ЭлементДляПросмотра.Доступность = Ложь;
			КонецЕсли;
		ИначеЕсли ЭлементДляПросмотра.ЦветФона <> ЦветаСтиля.ЦветОсобогоТекста И НЕ ЭлементДляПросмотра.ТолькоПросмотр Тогда
			ЭлементДляПросмотра.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
Перем ТекСтатус;
	
	ЭтоНовыйОбъект = НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка);
	
	Элементы.Страница0.Видимость = ЭтоНовыйОбъект;
	Если НЕ ЭтоНовыйОбъект Тогда
		Попытка
			КаталогФайлов = Справочники.КартыДизайнПроектов.ПолучитьКаталогХраненияФайлов(ТекущийОбъект.Ссылка);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЭтоНеПервоеЧтение Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЭтоПоставщик = ЗначениеЗаполнено(ПараметрыСеанса.ТекущийКонтрагент);
		ЭтоАудитор = РольДоступна("АудиторКартДизайнПроектов");
		УстановитьПривилегированныйРежим(Ложь);
		ЭтоНеПервоеЧтение = Истина;
	КонецЕсли;
	
	ТекСтатус = ТекущийОбъект.Статус;
	ТолькоПросмотр = ТолькоПросмотр ИЛИ
		(ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке")
		ИЛИ ЭтоАудитор И ТекСтатус <> ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУАудитора")
		ИЛИ НЕ ЭтоАудитор И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУАудитора")
		ИЛИ ((ЭтоАудитор ИЛИ ЭтоПоставщик) И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверкуУАудитора"))
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.Создана"));
	
	Элементы.ФормаОтправитьНаПроверку.Видимость = //ЭтоПоставщик И 
		(ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУПоставщика")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПустаяСсылка")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправлениеОтСОУ"));
	
	Элементы.ГруппаЗамечание.Видимость = (ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке")
		ИЛИ ЭтоАудитор И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУАудитора")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправлениеОтСОУ")
		ИЛИ НЕ ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверкуУАудитора"));
	Элементы.СтраницаЗамечания.Видимость = Элементы.ГруппаЗамечание.Видимость;
	
	Элементы.ФормаПроверкаПройдена.Видимость = (ЭтоАудитор И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУАудитора"));
	Элементы.ФормаОтправитьНаАудит.Видимость = (НЕ ЭтоПоставщик И НЕ Объект.ПровереноАудитором И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке"));
	Элементы.ФормаОтправитьНаИсправление.Видимость = (НЕ ЭтоПоставщик
	  И (ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверкуУАудитора")));
	
	Элементы.ФормаОтправитьДизайнеруВРаботу.Видимость =
		(НЕ ЭтоПоставщик И Объект.ПровереноАудитором И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверкуУАудитора"));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииНаСервере(РеквизитФормыВЗначение("Объект"));
	КонецЕсли;
	
	Если ЭтоПоставщик Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
			Объект.Поставщик = ПараметрыСеанса.ТекущийКонтрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
			Элементы.Владелец.ВыбиратьТип = Ложь;
			Элементы.Владелец.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыПоставщиков");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипПродукции = 0 Тогда Объект.ТипПродукции = 1; КонецЕсли;
	Элементы.Владелец.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Владелец);
	Элементы.Поставщик.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Поставщик);
	
	ПоставщикПриИзмененииНаСервере();
	
	ЗаполнитьПояснения();
	//ЕстьПравоРедактироватьПояснения = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПоясненияКартДизайнПроектов);
	ЕстьПравоРедактироватьПояснения = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПоясненияКартДизайнПроектов, ПользователиИнформационнойБазы.ТекущийПользователь());
	
	ЗаполнитьЛистыФайловДляЗагрузки();
	
	ВидСтандартаКачестваПриИзмененииНаСервере();
	
	ЭтоКопияБазы = ОбщегоНазначения.ЭтоКопияБазы();
	
	Элементы.Статус.Видимость = ЭтоКопияБазы;
	
	// ЗАМЕЧАНИЯ
	ТекСтатус = Объект.Статус;
	Если ЭтоПоставщик ИЛИ ЭтоАудитор Тогда
		СтруктураНевидимости = Новый Структура("Статус,Аудитор,НаименованиеДляЦенника");
		
		// если замечаний нет, не отображаем их
		СтруктураОтбора = Новый Структура("Исправлено", Ложь);
		МассивСтрокДляОтбора = Объект.Замечания.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокДляОтбора.Количество() > 0
		  И (ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправлениеОтСОУ")
		  	ИЛИ ЭтоАудитор И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУАудитора")) Тогда
			
			Элементы.ЗамечанияИсправлено.ТолькоПросмотр = Ложь;
			Элементы.ЗамечанияЗамечание.ТолькоПросмотр = Истина;
			
			СтруктураНевидимости.Вставить("ЗамечанияДата");
			СтруктураНевидимости.Вставить("ЗамечанияПользователь");
			СтруктураНевидимости.Вставить("ЗамечанияИмяПоля");
			
			// добавляем синонимы полей
			СтруктураПолей = Новый Структура;
			Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
				СтруктураПолей.Вставить(СтрокаТЧ.ИмяПоля);
				СтрокаТЧ.ИсправленоДляОтбора = Истина;
			КонецЦикла;
			ЗаполнитьСинонимыПолей(СтруктураПолей, ЭтаФорма);
			Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
				СтрокаТЧ.ИмяПоляСиноним = СтруктураПолей[СтрокаТЧ.ИмяПоля];
			КонецЦикла;
			
			Элементы.Замечания.ОтборСтрок = Новый ФиксированнаяСтруктура("ИсправленоДляОтбора", Истина);
			
		ИначеЕсли НЕ ЭтоАудитор Тогда
			СтруктураНевидимости.Вставить("СтраницаЗамечания");
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураНевидимости Цикл
			ЭлементНевидимости = Элементы.Найти(КлючИЗначение.Ключ);
			Если ЭлементНевидимости <> Неопределено Тогда ЭлементНевидимости.Видимость = Ложь; КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// определяем элементы для добавления и просмотра замечаний
	СтруктураРеквизитыДляЗамечаний = Новый Структура;
	Если НЕ ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке") Тогда
		СтруктураОбъект = Новый Структура("ВидСтандартаКачества,КтоОсуществляетПечать");
		ЗаполнитьЗначенияСвойств(СтруктураОбъект, Объект);
		СтруктураРеквизитыДляЗамечаний = ПолучитьРеквизитыДляЗамечаний(СтруктураОбъект);
		
	ИначеЕсли ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправлениеОтСОУ") Тогда
		// выбираем "активные" замечания
		МассивСтрокДляОтбора = Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь));
		Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
			ИмяРекъ = СтрокаТЧ.ИмяПоля;
			СтруктураРеквизитыДляЗамечаний.Вставить(ИмяРекъ);
			
			Элемент = Элементы.Найти(ИмяРекъ);
			Если Элемент <> Неопределено Тогда
				Элемент.ЦветФона = ЦветаСтиля.ЦветОсобогоТекста;
			Иначе
				Элемент = Элементы.Найти("Группа" + ИмяРекъ);
				Если Элемент <> Неопределено Тогда
					Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОсобогоТекста;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// блокировать на редактирование те поля, которые бренд-менеджер уже проверил и не отправил по ним замечания
		СтруктураОбъект = Новый Структура("ВидСтандартаКачества,КтоОсуществляетПечать");
		ЗаполнитьЗначенияСвойств(СтруктураОбъект, Объект);
		СтруктураПроверяемыеРеквизиты = ПолучитьПроверяемыеРеквизиты(СтруктураОбъект);
		
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			
			ИмяРекъ = КлючИЗначение.Ключ;
			Если ИмяРекъ = "Файлы" Тогда
				ТЧФайлы = КлючИЗначение.Значение;
				Для Каждого КлючИЗнач Из ТЧФайлы Цикл
					Элемент = Элементы.Найти("Группа" + КлючИЗнач.Ключ);
					Если Элемент <> Неопределено И Элемент.ЦветТекстаЗаголовка <> ЦветаСтиля.ЦветОсобогоТекста Тогда
						Элемент.ТолькоПросмотр = Истина;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если Элементы[ИмяРекъ].ЦветФона <> ЦветаСтиля.ЦветОсобогоТекста Тогда
				Элементы[ИмяРекъ].ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// блокируем все подчинённые элементы
		СтруктураПроверяемыеРеквизиты = Новый Структура("Страница1,Страница2,Страница3,Страница4,Страница5,Страница7,Страница10,Страница11");
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			ЭлементыДляПросмотра = Элементы[КлючИЗначение.Ключ].ПодчиненныеЭлементы;
			ТолькоПросмотрВсехПодчинённых(ЭлементыДляПросмотра);
		КонецЦикла;
		
	ИначеЕсли ЭтоАудитор И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботеУАудитора") Тогда
		СтруктураОбъект = Новый Структура("ВидСтандартаКачества,КтоОсуществляетПечать");
		ЗаполнитьЗначенияСвойств(СтруктураОбъект, Объект);
		СтруктураРеквизитыДляЗамечаний = ПолучитьРеквизитыДляЗамечаний(СтруктураОбъект);
		
		// блокируем все подчинённые элементы
		СтруктураПроверяемыеРеквизиты = Новый Структура("Страница1,Страница2,Страница3,Страница4,Страница5,Страница7,Страница10,Страница11");
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			ЭлементыДляПросмотра = Элементы[КлючИЗначение.Ключ].ПодчиненныеЭлементы;
			ТолькоПросмотрВсехПодчинённых(ЭлементыДляПросмотра, ЭтоАудитор);
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.НадписьОткрыть.Заголовок = ?(ЭтоПоставщик, "— просмотреть", "— добавить") + " замечание";
	Элементы.ЗамечанияОтвет.ТолькоПросмотр = НЕ ЭтоПоставщик;
	//Элементы.ЗамечанияИсправлено.Видимость = НЕ ЭтоПоставщик;
	//Элементы.ЗамечанияИсправленоДляОтбора.Видимость = ЭтоПоставщик;
	//Элементы.ЗамечанияЗначениеПоля.Видимость = ЭтоПоставщик;
	Элементы.Комментарий.ТолькоПросмотр = ЭтоПоставщик;
	
	// добавляем кнопку "Замечание" для добавления и просмотра замечаний
	Для Каждого КлючИЗначение Из СтруктураРеквизитыДляЗамечаний Цикл
		ИмяРекъ = КлючИЗначение.Ключ;
		
		СтруктураРеквизиты = ?(ИмяРекъ = "Файлы", КлючИЗначение.Значение, Новый Структура(ИмяРекъ));
		
		Для Каждого КлючИЗнач Из СтруктураРеквизиты Цикл
			ИмяРекъ = КлючИЗнач.Ключ;
			ЭлементЗамечания = Элементы.Найти("Группа" + ИмяРекъ);
			Если ЭлементЗамечания <> Неопределено Тогда
				НоваяКнопка = Элементы.Добавить(ИмяРекъ + "_Замечание", Тип("КнопкаФормы"), Элементы["Группа" + ИмяРекъ]);
				НоваяКнопка.ИмяКоманды = ?(ЭтоПоставщик, "ПросмотретьЗамечание", "ДобавитьЗамечание");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ТолькоПросмотр И Элементы.Аудитор.Видимость Тогда
		Элементы.Аудитор.РежимВыбораИзСписка = Истина;
		Элементы.Аудитор.СписокВыбора.ЗагрузитьЗначения(Справочники.КартыДизайнПроектов.ПолучитьМассивАудиторов());
	КонецЕсли;
	
	Если Объект.ТипПродукции = 0 Тогда Объект.ТипПродукции = 1; КонецЕсли;
	
	// подгружаем списки выбора
	СтруктураСпискиВыбора = Справочники.КартыДизайнПроектов.СтруктураСписковВыбора(Объект.ТипПродукции);
	Для Каждого КлючИЗначение Из СтруктураСпискиВыбора Цикл
		ДобавитьСписокВыбораЭлементу(Элементы[КлючИЗначение.Ключ], КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСписокВыбораЭлементу(ЭлементСоСпискомВыбора, МассивВыбора)
	ЭлементСоСпискомВыбора.КнопкаСпискаВыбора = Истина;
	ЭлементСоСпискомВыбора.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КтоОсуществляетПечатьПриИзменении(Неопределено);
	ВидТемпературыХраненияПриИзменении(Неопределено);
	РассчитатьЦенностьПоТРТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСтандартаКачестваПриИзменении(Элемент)
	
	ВидСтандартаКачестваСтр = СокрЛП(Объект.ВидСтандартаКачества);
	
	Если ЗначениеЗаполнено(ВидСтандартаКачестваСтр) Тогда
		Если Найти(Объект.НомерНормативногоДокумента, ВидСтандартаКачестваСтр) = 0 Тогда
			Объект.НомерНормативногоДокумента = "" + ВидСтандартаКачестваСтр; // + " " + Объект.НомерНормативногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ВидСтандартаКачестваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидСтандартаКачестваПриИзмененииНаСервере()
Перем ВидСтандартаКачества;
	
	ВидСтандартаКачества = Объект.ВидСтандартаКачества;
	
	// Если в графе проставляется ГОСТ то поля: 2-10, 18 неактивны.
	МассивИндексовДляНевидимостиДляГОСТ = Новый Массив;
	Для Сч = 2 По 10 Цикл МассивИндексовДляНевидимостиДляГОСТ.Добавить(Сч); КонецЦикла;
	МассивИндексовДляНевидимостиДляГОСТ.Добавить(18);
	
	МассивГруппДляНевидимостиПриГОСТ = ЗаполнитьЛистыФайловДляЗагрузки("", Неопределено);
	
	ЭтоНеГОСТ = (ВидСтандартаКачества <> ПредопределенноеЗначение("Перечисление.ВидыСтандартовКачества.ГОСТ"));
	Для Каждого Сч Из МассивИндексовДляНевидимостиДляГОСТ Цикл
		Элементы["Группа" + МассивГруппДляНевидимостиПриГОСТ[Сч-1]].Видимость = ЭтоНеГОСТ;
	КонецЦикла;
	
	ЭтоТУилиСТО = (ВидСтандартаКачества = ПредопределенноеЗначение("Перечисление.ВидыСтандартовКачества.ТУ") ИЛИ ВидСтандартаКачества = ПредопределенноеЗначение("Перечисление.ВидыСтандартовКачества.СТО"));
	Элементы["ГруппаПротоколПодтверждающийСрокГодности"].Видимость = ЭтоТУилиСТО;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПояснение(Команда)
	
	ИмяПоляПояснения = СтрЗаменить(ТекущийЭлемент.Имя, "Пояснение", "");
	ТекстПояснения = ПолучитьПояснения(Ложь, ИмяПоляПояснения);
	
	Если ЕстьПравоРедактироватьПояснения Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ОК", "ОК");
		СписокКнопок.Добавить("Редактировать", "Редактировать");
		ПоказатьВопросПользователю(ТекстПояснения, СписокКнопок,,, "Пояснение",, "ПоказатьПояснениеЗавершение(" + ИмяПоляПояснения + ")");
	Иначе
		ПоказатьПредупреждениеПользователю(ТекстПояснения,, "Пояснение");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КтоОсуществляетПечатьПриИзменении(Элемент)
Перем КтоОсуществляетПечать;
	
	КтоОсуществляетПечать = Объект.КтоОсуществляетПечать;
	Элементы.ГруппаПечатьПоставщиком.Видимость = (КтоОсуществляетПечать = 0 ИЛИ КтоОсуществляетПечать = 2);
	Элементы.ГруппаИзготовлениеВкусВиллом.Видимость = (КтоОсуществляетПечать <> 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЛистФайла(Команда)
	ОткрытьДобавитьФайл(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛистФайла(Команда)
	ОткрытьДобавитьФайл(Команда);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛистФайла(Команда)
Перем ТипФайла, НомерФайла;
	
	ПолноеНазваниеЛиста = СтрЗаменить(ТекущийЭлемент.Имя, "_DEL", "");
	Если НЕ ПолучитьТипНомерФайла(ПолноеНазваниеЛиста, ТипФайла, НомерФайла) Тогда Возврат; КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Оставить", "Оставить");
	СписокКнопок.Добавить("Удалить", "Удалить");
	ПоказатьВопросПользователю("Вы действительно желаете удалить " + ПолноеНазваниеЛиста + "?", СписокКнопок,,, ПолноеНазваниеЛиста,,
	  "УдалитьЛистФайлаЗавершение(" + ТипФайла + "," + НомерФайла + ")");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛистФайлаЗавершение(ТипФайла, НомерФайла)
	
	ТЧФайлы = Объект.Файлы;
	
	// удаляем [не]нужный лист
	МассивСтрокДляОтбора = ТЧФайлы.НайтиСтроки(Новый Структура("ТипФайла,НомерФайла", ТипФайла, НомерФайла));
	Для Каждого СтрокаТЧФайлы Из МассивСтрокДляОтбора Цикл
		ТЧФайлы.Удалить(СтрокаТЧФайлы);
	КонецЦикла;
	
	// перенумеровываем номера листов больше номера листа
	МассивСтрокДляОтбора = ТЧФайлы.НайтиСтроки(Новый Структура("ТипФайла", ТипФайла));
	Для Каждого СтрокаТЧФайлы Из МассивСтрокДляОтбора Цикл
		Если СтрокаТЧФайлы.НомерФайла > НомерФайла Тогда
			СтрокаТЧФайлы.НомерФайла = СтрокаТЧФайлы.НомерФайла - 1;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЛистыФайловДляЗагрузки(ТипФайла, -1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТипНомерФайла(ПолноеНазваниеЛиста, ТипФайла, НомерФайла)
	
	Поз = Найти(ПолноеНазваниеЛиста, "_Лист");
	Если Поз = 0 Тогда Возврат Ложь; КонецЕсли;
	ТипФайла = Лев(ПолноеНазваниеЛиста, Поз-1);
	НомерФайла = Число(Сред(ПолноеНазваниеЛиста, Поз + 5));
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДобавитьФайл(Команда)
Перем ТипФайла, НомерФайла;
	
	Если НЕ ПолучитьТипНомерФайла(ТекущийЭлемент.Имя, ТипФайла, НомерФайла) Тогда Возврат; КонецЕсли;
	
	Если ОткрытьФайл(ТипФайла, НомерФайла, Ложь) Тогда
		ОткрытьФайл(ТипФайла, НомерФайла);
	Иначе
		Если ДобавитьФайл(ТипФайла, НомерФайла) Тогда
			ЗаполнитьЛистыФайловДляЗагрузки(ТипФайла, НомерФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьФайл(ТипФайла, НомерФайла = 0)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждениеПользователю("Запишите, пожалуйста, карточку!", , "Добавление файла");
		Возврат Ложь;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Результ = ПодключитьРасширениеРаботыСФайлами();
	
	Если НЕ Результ Тогда
		УстановитьРасширениеРаботыСФайлами();
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			Сообщить("Ошибка подключения расширения работы с файлами!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	АдресВремХранилища = "";
	ВыбранноеИмяФайла = "";
	Результ = ПоместитьФайл(АдресВремХранилища,, ВыбранноеИмяФайла, Истина, УникальныйИдентификатор);
	Если НЕ Результ Тогда Возврат Ложь; КонецЕсли;
	
	Файл = Новый Файл(ВыбранноеИмяФайла);
	РасширениеФайла = Файл.Расширение;
	
	ОтносительноеИмяФайла = ЗаписатьФайлНаСервере(АдресВремХранилища, КаталогФайлов, РасширениеФайла);
	
	// получаем следующий номер файла
	Если НомерФайла = 0 Тогда
		МассивСтрокДляОтбора = Объект.Файлы.НайтиСтроки(Новый Структура("ТипФайла", ТипФайла));
		Для Каждого СтрокаТЧФайлы Из МассивСтрокДляОтбора Цикл
			НомерФайла = Макс(НомерФайла, СтрокаТЧФайлы.НомерФайла);
		КонецЦикла;
		НомерФайла = НомерФайла + 1;
	КонецЕсли;
	
	СтрокаТЧФайлы = Объект.Файлы.Добавить();
	СтрокаТЧФайлы.ТипФайла = ТипФайла;
	СтрокаТЧФайлы.НомерФайла = НомерФайла;
	СтрокаТЧФайлы.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	СтрокаТЧФайлы.ИдФайла = Строка(Новый УникальныйИдентификатор()); //+++АК SHEP 2018.10.25 ИП-00018753.05
	Модифицированность = Истина;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОткрытьФайл(ТипФайла, НомерФайла = 1, Открывать = Истина)
	
	ТЧФайлы = Объект.Файлы;
	
	МассивСтрокДляОтбора = ТЧФайлы.НайтиСтроки(Новый Структура("ТипФайла,НомерФайла", ТипФайла, НомерФайла));
	Если МассивСтрокДляОтбора.Количество() = 0 Тогда
		Если Открывать Тогда Сообщить("Файл не найден"); КонецЕсли;
		Возврат Ложь;
	ИначеЕсли НЕ Открывать Тогда
		Возврат Истина;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Результ = ПодключитьРасширениеРаботыСФайлами();
	
	Если НЕ Результ Тогда
		УстановитьРасширениеРаботыСФайлами();
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			Сообщить("Ошибка подключения расширения работы с файлами!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Для Каждого СтрокаТЧФайлы Из МассивСтрокДляОтбора Цикл
		Файл = Новый Файл(КаталогФайлов + СтрокаТЧФайлы.ОтносительноеИмяФайла);
		АдресВремХранилища = ПолучитьФайлНаСервере(Файл.ПолноеИмя, УникальныйИдентификатор);
		Если НЕ ЭтоАдресВременногоХранилища(АдресВремХранилища) Тогда Продолжить; КонецЕсли;
		
		ВыбранноеИмяФайла = ТипФайла + Формат(НомерФайла, "ЧГ=") + Файл.Расширение;
		Результ = ПолучитьФайл(АдресВремХранилища, ВыбранноеИмяФайла, Истина);
		//ЗапуститьПриложение(КаталогФайлов + СтрокаТЧФайлы.ОтносительноеИмяФайла);
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьФайлНаСервере(АдресВремХранилища, КаталогФайлов, РасширениеФайла)
	
	ИмяФайла = Строка(Новый УникальныйИдентификатор()) + РасширениеФайла;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВремХранилища);
	ДвоичныеДанные.Записать(КаталогФайлов + ИмяФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлНаСервере(ПолноеИмяФайла, УникальныйИдентификатор)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПищеваяЦенностьПриИзменении(Элемент)
	РассчитатьЦенностьПоТРТС();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦенностьПоТРТС()
Перем ПищеваяЦенность;
	
	РасчётнаяЦенностьКДж = 0;
	РасчётнаяЦенностьККал = 0;
	
	ПищеваяЦенность = Объект.ПищеваяЦенность;
	Если ПищеваяЦенность.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	КоэффициентыККал = Новый Соответствие;
	КоэффициентыККал.Вставить("Белки", 4);
	КоэффициентыККал.Вставить("Жиры", 9);
	КоэффициентыККал.Вставить("Углеводы (пищевые волокна не входят)", 4);
	
	КоэффициентыКДж = Новый Соответствие;
	КоэффициентыКДж.Вставить("Белки", 17);
	КоэффициентыКДж.Вставить("Жиры", 37);
	КоэффициентыКДж.Вставить("Углеводы (пищевые волокна не входят)", 17);
	
	Для Каждого КлючИЗначение Из КоэффициентыКДж Цикл
		ИмяПоказателя = КлючИЗначение.Ключ;
		МассивСтрок = ПищеваяЦенность.НайтиСтроки(Новый Структура("Показатель", ИмяПоказателя));
		Для Каждого СтрокаТЧ Из МассивСтрок Цикл
			РасчётнаяЦенностьКДж = РасчётнаяЦенностьКДж + СтрокаТЧ.Значение * КлючИЗначение.Значение;
			РасчётнаяЦенностьККал = РасчётнаяЦенностьККал + СтрокаТЧ.Значение * КоэффициентыККал[ИмяПоказателя];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	РезультатВыбора = Неопределено;
	
	ОповеститьОВыборе(РезультатВыбора);
	
	Если Открыта() Тогда
		Закрыть(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да", "Да");
		СписокКнопок.Добавить("Нет", "Нет");
		СписокКнопок.Добавить("Отмена", "Отмена");
		ПоказатьВопросПользователю("Данные карты дизайн-проекта были модифицированы.
			|
			|Сохранить изменения?", СписокКнопок,,,,, "ПередЗакрытиемЗавершение()");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиПояснения(СтруктураКлюча)
	Возврат ?(РегистрыСведений.ПоясненияКартДизайнПроектов.ПолучитьПояснение(СтруктураКлюча.ИмяПоля, СтруктураКлюча.ТипПродукции) = Неопределено, Неопределено,
		РегистрыСведений.ПоясненияКартДизайнПроектов.СоздатьКлючЗаписи(СтруктураКлюча));
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
Перем ОписаниеОповещения;
	ОписаниеОповещения = "";
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.Вопрос" Тогда
		
		ВыбранноеЗначение.Свойство("ОписаниеОповещения", ОписаниеОповещения);
		ВыбранноеЗначениеРезультат = Строка(ВыбранноеЗначение.Значение);
		
		Если ОписаниеОповещения = "ПередЗакрытиемЗавершение()" Тогда
			
			Если ВыбранноеЗначениеРезультат = "Да" Тогда
				Записать();
				Закрыть();
			ИначеЕсли ВыбранноеЗначениеРезультат = "Нет" Тогда
				Модифицированность = Ложь;
				Закрыть();
			КонецЕсли;
			
		ИначеЕсли Найти(ОписаниеОповещения, "ПоказатьПояснениеЗавершение") = 1 И ВыбранноеЗначениеРезультат = "Редактировать" Тогда
			
			ПараметрыФормыЗаписи = Новый Структура("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			ИмяПоляПояснения = СтрЗаменить(ОписаниеОповещения, "ПоказатьПояснениеЗавершение(", "");
			ИмяПоляПояснения = СтрЗаменить(ИмяПоляПояснения, ")", "");
			СтруктураКлючаПояснения = Новый Структура("ИмяПоля,ТипПродукции", ИмяПоляПояснения, 1);
			//ЗначениеКлючаПояснения = Новый Массив;
			//ЗначениеКлючаПояснения.Добавить(СтруктураКлючаПояснения);
			//КлючЗаписиПояснений = Новый("РегистрСведенийКлючЗаписи.ПоясненияКартДизайнПроектов", ЗначениеКлючаПояснения);
			КлючЗаписиПояснений = ПолучитьКлючЗаписиПояснения(СтруктураКлючаПояснения);
			Если КлючЗаписиПояснений = Неопределено Тогда
				ПараметрыФормыЗаписи.Вставить("ЗначенияЗаполнения", СтруктураКлючаПояснения);
			Иначе
				ПараметрыФормыЗаписи.Вставить("Ключ", КлючЗаписиПояснений);
			КонецЕсли;
			
			ОткрытьФорму("РегистрСведений.ПоясненияКартДизайнПроектов.ФормаЗаписи", ПараметрыФормыЗаписи, ЭтаФорма, УникальныйИдентификатор);
			
		ИначеЕсли Найти(ОписаниеОповещения, "УдалитьЛистФайлаЗавершение") = 1 И ВыбранноеЗначениеРезультат = "Удалить" Тогда
			
			МассивАргументов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрЗаменить(ОписаниеОповещения, "УдалитьЛистФайлаЗавершение(", ""), ")", ""), ",");
			УдалитьЛистФайлаЗавершение(МассивАргументов[0], Число(МассивАргументов[1])); // ТипФайла, НомерФайла
			
		ИначеЕсли Найти(ОписаниеОповещения, "СменитьСтатусЗавершение") = 1 Тогда
			
			МассивАргументов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрЗаменить(ОписаниеОповещения, "СменитьСтатусЗавершение(", ""), ")", ""), ",");
			СменитьСтатусЗавершение(МассивАргументов[0]);
			
		ИначеЕсли Найти(ОписаниеОповещения, "ЗамечанияИсправленоПриИзмененииЗавершение") = 1 Тогда
			
			МассивАргументов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрЗаменить(ОписаниеОповещения, "ЗамечанияИсправленоПриИзмененииЗавершение(", ""), ")", ""), ",");
			ЗамечанияИсправленоПриИзмененииЗавершение(МассивАргументов[0]);
			
		ИначеЕсли ОписаниеОповещения = "ВыгрузитьКарточкуТекстЗавершение()" Тогда
			
			Если ВыбранноеЗначениеРезультат = "Да" Тогда
				Записать();
			ИначеЕсли ВыбранноеЗначениеРезультат = "Отмена" Тогда
				Возврат;
			КонецЕсли;
			ВыгрузитьКарточкуТекстЗавершение();
			
		ИначеЕсли ОписаниеОповещения = "ВыгрузитьКарточкуТекстФайлыЗавершение()" Тогда
			
			Если ВыбранноеЗначениеРезультат = "Да" Тогда
				Записать();
			ИначеЕсли ВыбранноеЗначениеРезультат = "Отмена" Тогда
				Возврат;
			КонецЕсли;
			ВыгрузитьКарточкуТекстФайлыЗавершение();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ИсточникВыбора.ИмяФормы = "Справочник.КартыДизайнПроектов.Форма.ВводСтроки" Тогда
		
		ВыбранноеЗначениеРезультат = ВыбранноеЗначение.Значение;
		Если ВыбранноеЗначениеРезультат = Неопределено Тогда Возврат; КонецЕсли; // нажали кнопку "Отмена"
		
		ВыбранноеЗначение.Свойство("ОписаниеОповещения", ОписаниеОповещения);
		
		Если Найти(ОписаниеОповещения, "ДобавитьИсправитьЗамечаниеЗавершение") = 1 Тогда
			
			МассивАргументов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрЗаменить(ОписаниеОповещения, "ДобавитьИсправитьЗамечаниеЗавершение(", ""), ")", ""), ",");
			ДобавитьИсправитьЗамечаниеЗавершение(МассивАргументов[0], МассивАргументов[1], ВыбранноеЗначениеРезультат);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ВладелецПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитОбъект.Заполнить(Объект.Владелец);
	ЗначениеВРеквизитФормы(РеквизитОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	//МассивТехнологов = Справочники.ХарактеристикиНоменклатурыПоставщиков.ПолучитьСтруктуруТехнологовПоставщика(Объект.Поставщик).МассивТехнологов;
	МассивТехнологов = Справочники.КартыДизайнПроектов.ПолучитьМассивВсехТехнологов();
	Элементы.Технолог.СписокВыбора.ЗагрузитьЗначения(МассивТехнологов);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ПоставщикПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПользователю(ТекстПредупреждения, Таймаут = 0, Заголовок = "")
	ОбщегоНазначенияКлиент.ПоказатьПредупреждениеПользователю(ТекстПредупреждения, Таймаут, Заголовок, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", КнопкаТаймаута = Неопределено, ОписаниеОповещения = "")
	ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута, ОписаниеОповещения, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, ОписаниеОповещения = "")
	ОбщегоНазначенияКлиент.ВводСтроки(Строка, Подсказка, Длина, Многострочность, ОписаниеОповещения, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПроверку(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправлениеОтСОУ")
	  И Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь)).Количество() > 0 Тогда
		ПоказатьПредупреждениеПользователю("Не все замечания были исправлены!" + Символы.ПС + Символы.ПС + "Пожалуйста, на закладке ""Замечания"" отметьте флажками все замечания!");
		Возврат;
	КонецЕсли;
	
	СменитьСтатус("Внимание! После передачи на проверку редактирование будет запрещено!
			|Отправить на проверку?", "НаПроверке");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаИсправление(Команда)
	
	Если Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь)).Количество() = 0 Тогда
		ПоказатьПредупреждениеПользователю("Нельзя отправлять на исправление, если нет замечаний!");
		Возврат;
	КонецЕсли;
	
	СменитьСтатус("Отправить на исправление?", "НаИсправлениеОтСОУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПройдена(Команда)
	
	СменитьСтатус("Внимание! После прохождения проверки редактирование будет запрещено!
		|Продолжить?", "ПрошлаПроверкуУАудитора");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаАудит(Команда)
	
	СменитьСтатус("Отправить карточку на аудит?", "ВРаботеУАудитора");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДизайнеруВРаботу(Команда)
	
	СменитьСтатус("Отправить карточку дизайнеру в работу?", "ВРаботеУДизайнера");
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтатус(ТекстВопроса, НовыйСтатусСтр)
	
	НовыйСтатус = НовыйСтатусСтр;
	
	//Если НЕ ЭтоКопияБазы И НЕ ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
	Если НЕ ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//	ВыбранноеЗначениеРезультат = Строка(Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет));
	//	СменитьСтатусЗавершение(НовыйСтатусСтр);
	//#Иначе
		ПоказатьВопросПользователю(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет,,, "СменитьСтатусЗавершение(" + НовыйСтатусСтр + ")");
	//#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтатусЗавершение(НовыйСтатусСтр)
	
	Если ВыбранноеЗначениеРезультат <> "Да" Тогда Возврат; КонецЕсли;
	
	Объект.ДатаСтатуса = ТекущаяДата();
	Если НовыйСтатусСтр = "ПрошлаПроверкуУАудитора" Тогда Объект.ПровереноАудитором = Истина; КонецЕсли;
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков." + НовыйСтатусСтр);
	Записать();
	Закрыть();
	НовыйСтатус = "";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСинонимыПолей(СтруктураПолей, ЭтаФорма)
Перем Элемент, Элементы;
	
	Элементы = ЭтаФорма.Элементы;
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		
		СтруктураПолейТЧ = КлючИЗначение.Значение;
		Если ТипЗнч(СтруктураПолейТЧ) = Тип("Структура") Тогда
			ИмяТЧ = ?(КлючИЗначение.Ключ = "Файлы", "Группа", КлючИЗначение.Ключ);
			Для Каждого КлючИЗнач Из СтруктураПолейТЧ Цикл
				ИмяРекъ = КлючИЗнач.Ключ;
				СтруктураПолейТЧ.Вставить(ИмяРекъ, Элементы[ИмяТЧ + ИмяРекъ].Заголовок);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		ИмяРекъ = КлючИЗначение.Ключ;
		Элемент = Элементы.Найти(ИмяРекъ);
		Если Элемент <> Неопределено Тогда
			СтруктураПолей.Вставить(ИмяРекъ, Элемент.Заголовок);
		КонецЕсли;
		
		// если заголовок пустой, пытаемся получить заголовок по группе
		Если НЕ ЗначениеЗаполнено(СтруктураПолей[ИмяРекъ]) Тогда
			Элемент = Элементы.Найти("Группа" + ИмяРекъ);
			Если Элемент = Неопределено Тогда
				СтруктураПолей.Вставить(ИмяРекъ, ИмяРекъ);
			Иначе
				СтруктураПолей.Вставить(ИмяРекъ, Элемент.Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПроверяемыеРеквизиты(Объект, ПолучатьСинонимыРеквизитов = Ложь, ЭтаФорма = Неопределено)
	
	СтруктураПроверяемыеРеквизиты = Новый Структура("Наименование,Владелец,Поставщик,Технолог,
		|Изготовитель,ЮридическийАдрес,ФактическийАдрес,Производство,
		|ВидСтандартаКачества,НомерНормативногоДокумента,НаименованиеПродуктаПоТехническойДокументации,СоставПродуктаДляЭтикетки,МассаНетто,
		|ОбогащениеПродуктаМинераламиИВитаминами,СрокГодности,ТипСрокаГодности,Влажность,УсловияХраненияПослеВскрытияУпаковки");
	
	// ФАЙЛЫ
	СтруктураФайлы = Новый Структура;
	Если Объект.ВидСтандартаКачества <> ПредопределенноеЗначение("Перечисление.ВидыСтандартовКачества.ГОСТ") Тогда
		// если в графе проставляется ГОСТ то поля для загрузки: 2-10, 18 неактивны.
		СтруктураФайлы = Новый Структура(
			"ТитульныйЛистНаПродукцию,ОбластьПрименения,АссортиментныйПеречень,ТребованияКСырью,ПодтверждениеМассы,СведенияПищевойИЭнергетическойЦенности,
			|ПротоколИспытанийНаПоказателиПищевойЦенности,УсловияТранспортировкиИХраненияПродукции,ФизикоХимическиеПоказатели,МикробиологическиеИХимическиеПоказатели");
	КонецЕсли;
	СтруктураФайлы.Вставить("ДекларацияСоответствия");
	СтруктураФайлы.Вставить("БезопасностьУпаковочныхМатериаловДляТары");
	СтруктураФайлы.Вставить("ПротоколИспытанийНаКонкретныйПродукт");
	
	Если Объект.КтоОсуществляетПечать = 2 Тогда
		СтруктураФайлы.Вставить("ОбразецУпаковкиЭтикетки");
		СтруктураФайлы.Вставить("РабочиеФайлыУпаковкиЭтикетки");
		//СтруктураФайлы.Вставить("ЧертёжДляЭтикетокФлоупак");
	ИначеЕсли Объект.КтоОсуществляетПечать = 1 ИЛИ Объект.КтоОсуществляетПечать = 3 Тогда
		СтруктураФайлы.Вставить("ОбразецУпаковкиДляВкусВилл");
	КонецЕсли;
	СтруктураФайлы.Вставить("ПротоколИспытанийНаКонкретныйПродукт");
	//СтруктураФайлы.Вставить("Сертификаты"); //?
	
	СтруктураПроверяемыеРеквизиты.Вставить("Файлы", СтруктураФайлы);
	
	Если ПолучатьСинонимыРеквизитов Тогда
		ЗаполнитьСинонимыПолей(СтруктураПроверяемыеРеквизиты, ЭтаФорма);
	КонецЕсли;
	
	Возврат СтруктураПроверяемыеРеквизиты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРеквизитыДляЗамечаний(Объект, ПолучатьСинонимыРеквизитов = Ложь, ЭтаФорма = Неопределено)
	
	СтруктураРеквизитыДляЗамечаний = ПолучитьПроверяемыеРеквизиты(Объект, ПолучатьСинонимыРеквизитов, ЭтаФорма);
	
	СтруктураРеквизитыДляЗамечанийНовые = Новый Структура("Импортёр,Местонахождение,
		|ЭнергетическаяЦенность,ПищеваяЦенность,РекомендацииПоПотреблению,ЗначенияПетлиМёбиуса");
	
	Если ПолучатьСинонимыРеквизитов Тогда
		ЗаполнитьСинонимыПолей(СтруктураРеквизитыДляЗамечанийНовые, ЭтаФорма);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитыДляЗамечанийНовые Цикл
		СтруктураРеквизитыДляЗамечаний.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураРеквизитыДляЗамечаний;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИспользуемыеРеквизиты(Объект, ПолучатьСинонимыРеквизитов = Ложь, ЭтаФорма = Неопределено)
	
	//+++АК SHEP 2018.04.10 ИП-00017032: убрал ВесБрутто (после МассаНетто)
	//+++АК SHEP 2018.04.10 ИП-00017032: добавил поля СодержаниеСоли и СодержаниеСахара (после ПищевыеВолокна)
	СтруктураИспользуемыеРеквизиты = Новый Структура("Наименование,Владелец,НаименованиеДляЦенника,Поставщик,Технолог,ТипПозиционирования,ШтрихКод,
		|Изготовитель,ЮридическийАдрес,ФактическийАдрес,Производство,Импортёр,Местонахождение,
		|ВидСтандартаКачества,НомерНормативногоДокумента,НаименованиеПродуктаПоТехническойДокументации,СоставПродуктаДляЭтикетки,МассаНетто,
		|ЭнергетическаяЦенностьККал,ЭнергетическаяЦенностьКДж,ПищевыеВолокна,СодержаниеСоли,СодержаниеСахара,ОбогащениеПродуктаМинераламиИВитаминами,СодержаниеПродуктаДополнительно,
		|СрокГодности,ТипСрокаГодности,ТемператураХраненияОт,ТемператураХраненияДо,Влажность,ДополнительныеУсловияХранения,
		|МассоваяДоляОсновногоПродукта,УсловияХраненияПослеВскрытияУпаковки,СпособПриготовленияПрименения,РекомендацииПоПотреблению,
		|РСТ,ЕАС,ЗначенияПетлиМёбиуса,ЗнакВилкаРюмка,СпециальныеЗнаки,ФразаДляБезопасностиУпотребления,
		|КтоОсуществляетПечать,ПараметрыМестаДатыИзготовления,МатериалПечати,РазмерПоляДляЭтикетки,ТипНаклейкиЭтикетки,
		|ОсобенностиПродукта,ОсобенностиПроизводстваПродукта,ОсобенностиПродуктаПрочие,
		|ИсполнительДолжность,ИсполнительФИО,ИсполнительТелефон,ИсполнительЭлАдрес,ДатаЗаполнения");
	
	// ФАЙЛЫ
	//СтруктураФайлы = Новый Структура;
	//Если Объект.ВидСтандартаКачества <> ПредопределенноеЗначение("Перечисление.ВидыСтандартовКачества.ГОСТ") Тогда
	//	// если в графе проставляется ГОСТ то поля для загрузки: 2-10, 18 неактивны.
	//	СтруктураФайлы = Новый Структура(
	//		"ТитульныйЛистНаПродукцию,ОбластьПрименения,АссортиментныйПеречень,ТребованияКСырью,ПодтверждениеМассы,СведенияПищевойИЭнергетическойЦенности,
	//		|ПротоколИспытанийНаПоказателиПищевойЦенности,УсловияТранспортировкиИХраненияПродукции,ФизикоХимическиеПоказатели,МикробиологическиеИХимическиеПоказатели");
	//КонецЕсли;
	//СтруктураФайлы.Вставить("ДекларацияСоответствия");
	//СтруктураФайлы.Вставить("БезопасностьУпаковочныхМатериаловДляТары");
	//СтруктураФайлы.Вставить("ПротоколИспытанийНаКонкретныйПродукт");
	//
	//Если Объект.КтоОсуществляетПечать = 2 Тогда
	//	СтруктураФайлы.Вставить("ОбразецУпаковкиЭтикетки");
	//	СтруктураФайлы.Вставить("РабочиеФайлыУпаковкиЭтикетки");
	//	СтруктураФайлы.Вставить("ЧертёжДляЭтикетокФлоупак");
	//ИначеЕсли Объект.КтоОсуществляетПечать = 1 ИЛИ Объект.КтоОсуществляетПечать = 3 Тогда
	//	СтруктураФайлы.Вставить("ОбразецУпаковкиДляВкусВилл");
	//КонецЕсли;
	//СтруктураФайлы.Вставить("ПротоколИспытанийНаКонкретныйПродукт");
	////СтруктураФайлы.Вставить("Сертификаты"); //?
	//
	//СтруктураПроверяемыеРеквизиты.Вставить("Файлы", СтруктураФайлы);
	
	СтруктураИспользуемыеРеквизиты.Вставить("ПищеваяЦенность", Новый Структура("Показатель,Значение"));
	СтруктураИспользуемыеРеквизиты.Вставить("Аллергены", Новый Структура("Аллерген,Наличие"));
	СтруктураИспользуемыеРеквизиты.Вставить("ПредупреждающиеФразы", Новый Структура("Фраза,Нужно"));
	
	Если ПолучатьСинонимыРеквизитов Тогда
		ЗаполнитьСинонимыПолей(СтруктураИспользуемыеРеквизиты, ЭтаФорма);
	КонецЕсли;
	
	Возврат СтруктураИспользуемыеРеквизиты;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
Перем СтрокаОшибки, СтруктураОшибки;
	
	СтруктураОшибки = Новый Соответствие;
	
	Если СтруктураОшибки.Количество() = 0 Тогда
		СтруктураОбъект = Новый Структура("ВидСтандартаКачества,КтоОсуществляетПечать");
		ЗаполнитьЗначенияСвойств(СтруктураОбъект, Объект);
		СтруктураПроверяемыеРеквизиты = ПолучитьПроверяемыеРеквизиты(СтруктураОбъект, Истина, ЭтаФорма);
		
		Если НовыйСтатус = "ВРаботеУАудитора" Тогда
			СтруктураПроверяемыеРеквизиты.Вставить("Аудитор", "Аудитор");
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			
			ИмяРекъ = КлючИЗначение.Ключ;
			СтруктураПроверяемыеРеквизитыТЧ = КлючИЗначение.Значение;
			
			// проверяем заполненность табличной части
			Если ТипЗнч(СтруктураПроверяемыеРеквизитыТЧ) = Тип("Структура") Тогда
				ИмяТЧ = ИмяРекъ;
				Если ИмяТЧ = "Файлы" Тогда
					Для Каждого КлючИЗнач Из СтруктураПроверяемыеРеквизитыТЧ Цикл
						ИмяРекъ = КлючИЗнач.Ключ;
						Если Объект.Файлы.НайтиСтроки(Новый Структура("ТипФайла", ИмяРекъ)).Количество() = 0 Тогда
							СтруктураОшибки.Вставить("Элементы.Группа" + ИмяРекъ, "Не загружены файлы: '" + КлючИЗнач.Значение + "'");
							//СтруктураОшибки.Вставить("" + ИмяРекъ + "_Лист1", "Не загружены файлы: '" + КлючИЗнач.Значение + "'");
							//Прервать;
						КонецЕсли;
					КонецЦикла;
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
					Для Каждого КлючИЗнач Из СтруктураПроверяемыеРеквизитыТЧ Цикл
						ИмяРекъ = КлючИЗнач.Ключ;
						Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРекъ]) Тогда
							// Если он не заполнен, сообщим об этом пользователю
							СтруктураОшибки.Вставить("Объект." + ИмяТЧ + "[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=") + "]",
							  "Табл. часть '" + ИмяТЧ + "': в строке №" + СтрокаТЧ.НомерСтроки + " не заполнено поле '" + КлючИЗнач.Значение + "'");
							//Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект[ИмяРекъ]) Тогда
				// Если он не заполнен, сообщим об этом пользователю
				СтруктураОшибки.Вставить("Объект." + ИмяРекъ, "Не заполнено поле '" + КлючИЗначение.Значение + "'");
				//Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураОшибки Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КлючИЗначение.Значение, ЭтаФорма, КлючИЗначение.Ключ,, Отказ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗамечание(Команда)
Перем ЗамечаниеСтр;
	ЗамечаниеСтр = "";
	
	ИмяЭлемента = СтрЗаменить(ТекущийЭлемент.Имя, "_Замечание", "");
	ВводСтроки(ЗамечаниеСтр, "Введите замечание", 100, Истина, "ДобавитьИсправитьЗамечаниеЗавершение(" + ИмяЭлемента + ",-1)");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИсправитьЗамечаниеЗавершение(ИмяЭлемента, ИдСтроки, ЗамечаниеСтр)
	
	Если ИдСтроки = -1 Тогда
		СтрокаТЧ = Объект.Замечания.Добавить();
		СтрокаТЧ.Дата = ТекущаяДата();
		СтрокаТЧ.Пользователь = ТекПользователь;
		СтрокаТЧ.ИмяПоля = ИмяЭлемента;
		СтрокаТЧ.Исправлено = Ложь;
		СтрокаТЧ.ИсправленоДляОтбора = Истина;
	Иначе
		СтрокаТЧ = Объект.Замечания.НайтиПоИдентификатору(ИдСтроки);
	КонецЕсли;
	
	СтрокаТЧ.Замечание = ЗамечаниеСтр;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьЗамечание(Команда)
Перем ЗамечаниеСтр;
	
	ЗамечаниеСтр = "";
	
	ИмяПоляСиноним = "";
	ИмяЭлемента = СтрЗаменить(ТекущийЭлемент.Имя, "_Замечание", "");
	МассивСтрокДляОтбора = Объект.Замечания.НайтиСтроки(Новый Структура("ИсправленоДляОтбора,ИмяПоля", Истина, ИмяЭлемента));
	Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
		ЗамечаниеСтр = ЗамечаниеСтр + СтрокаТЧ.Замечание + Символы.ПС;
		ИмяПоляСиноним = СтрокаТЧ.ИмяПоляСиноним;
	КонецЦикла;
	ПоказатьПредупреждениеПользователю(ЗамечаниеСтр,, ИмяПоляСиноним);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗамечанияИсправлено" Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Если ЭтоПоставщик И Поле
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	//Если НЕ Копирование Тогда Отказ = Истина; КонецЕсли;
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если Найти(ИмяТекущегоЭлемента, "ЗамечанияИмяПоля") = 1 Тогда
		Отказ = Истина;
		//Если ЭтоПоставщик Тогда
			ИмяРекъ = ТекущиеДанные.ИмяПоля;
			ЭлементДляПоиска = Элементы.Найти(ИмяРекъ);
			Если ЭлементДляПоиска <> Неопределено Тогда
				ТекущийЭлемент = ЭлементДляПоиска;
			Иначе
				ЭлементДляПоиска = Элементы.Найти("Группа" + ИмяРекъ);
				Если ЭлементДляПоиска <> Неопределено Тогда
					// переходим на нужную страницу
					Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭлементДляПоиска.Родитель;
					ТекущийЭлемент = ЭлементДляПоиска;
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли;
	ИначеЕсли ИмяТекущегоЭлемента = "ЗамечанияЗамечание" Тогда
		Отказ = ТекущиеДанные.Исправлено;
	ИначеЕсли ИмяТекущегоЭлемента = "ЗамечанияЗначениеПоля" Тогда
		ТекущиеДанные.ЗначениеПоля = Объект[ТекущиеДанные.ИмяПоля];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Дата = ТекущаяДата();
		ТекущиеДанные.Пользователь = ТекПользователь;
		ТекущиеДанные.Исправлено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ЭтоПоставщик Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли ТекущиеДанные.Исправлено Тогда
		ПоказатьПредупреждениеПользователю("Исправленные замечания удалять запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияИсправленоПриИзмененииЗавершение(ИдСтроки)
	Если ВыбранноеЗначениеРезультат <> "Да" Тогда
		ТекущиеДанные = Объект.Замечания.НайтиПоИдентификатору(ИдСтроки);
		ТекущиеДанные.Исправлено = Ложь;
		//Элементы.Замечания.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияИсправленоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Замечания.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекущиеДанные.Исправлено Тогда
		ТекстВопроса = "Замечание исправлено?";
		//#Если ТолстыйКлиентОбычноеПриложение Тогда
		//	ВыбранноеЗначениеРезультат = Строка(Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет));
		//	ЗамечанияПриИзмененииЗавершение();
		//#Иначе
			ПоказатьВопросПользователю(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,,,,
			  "ЗамечанияИсправленоПриИзмененииЗавершение(" + Формат(ТекущиеДанные.ПолучитьИдентификатор(), "ЧН=; ЧГ=") + ")");
		//#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЭлементГруппу(Элементы, ИмяРекъ)
	
	Элемент = Элементы.Найти(ИмяРекъ);
	Если Элемент = Неопределено Тогда
		Элемент = Элементы.Найти("Группа" + ИмяРекъ);
	КонецЕсли;
	Возврат Элемент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьКарточкуТекстНаСервере(Объект, ТабДок)
	
	СтруктураИспользуемыеРеквизиты = ПолучитьИспользуемыеРеквизиты(Объект);
	СтруктураИспользуемыеРеквизиты.Удалить("Владелец");
	СтруктураИспользуемыеРеквизиты.Удалить("Наименование");
	СтруктураИспользуемыеРеквизиты.Удалить("ВидСтандартаКачества");
	
	СписокВывода = Новый СписокЗначений;
	СписокВывода.Добавить(Новый Структура("НаименованиеДляЦенника,Технолог,Поставщик,ТипПозиционирования,ШтрихКод"), "Общий блок");
	//+++АК SHEP 2018.04.10 ИП-00017032: убрал ВесБрутто (после МассаНетто)
	СписокВывода.Добавить(Новый Структура("Изготовитель,ЮридическийАдрес,ФактическийАдрес,Производство,Импортёр,Местонахождение,
		|НомерНормативногоДокумента,НаименованиеПродуктаПоТехническойДокументации,СоставПродуктаДляЭтикетки,МассаНетто"), "Текстовое наполнение этикетки и упаковки");
	//+++АК SHEP 2018.04.10 ИП-00017032: добавил поля СодержаниеСоли и СодержаниеСахара (после ПищевыеВолокна)
	СписокВывода.Добавить(Новый Структура("ПищеваяЦенность,ПищевыеВолокна,СодержаниеСоли,СодержаниеСахара,ЭнергетическаяЦенностьККал,ЭнергетическаяЦенностьКДж,ОбогащениеПродуктаМинераламиИВитаминами,СодержаниеПродуктаДополнительно"),
		"Пищевая и энергетическая ценность продукта");
	СписокВывода.Добавить(Новый Структура("СрокГодности,ТипСрокаГодности,ТемператураХраненияОт,ТемператураХраненияДо,Влажность,ДополнительныеУсловияХранения,МассоваяДоляОсновногоПродукта,
		|УсловияХраненияПослеВскрытияУпаковки,СпособПриготовленияПрименения,РекомендацииПоПотреблению"), "Срок годности и условия хранения");
	СписокВывода.Добавить(Новый Структура("РСТ,ЕАС,ЗначенияПетлиМёбиуса,ЗнакВилкаРюмка,СпециальныеЗнаки,ФразаДляБезопасностиУпотребления"), "Знаки маркировки товара");
	СписокВывода.Добавить(Новый Структура("Аллергены,ПредупреждающиеФразы"), "Особые надписи и предупреждения");
	СписокВывода.Добавить(Новый Структура("КтоОсуществляетПечать,ПараметрыМестаДатыИзготовления,МатериалПечати,РазмерПоляДляЭтикетки,ТипНаклейкиЭтикетки"), "Параметры этикетки и упаковки");
	СписокВывода.Добавить(Новый Структура("ОсобенностиПродукта,ОсобенностиПроизводстваПродукта,ОсобенностиПродуктаПрочие"), "Фишки продука");
	СписокВывода.Добавить(Новый Структура("ИсполнительДолжность,ИсполнительФИО,ИсполнительТелефон,ИсполнительЭлАдрес,ДатаЗаполнения"), "Информация об исполнителе");
	
	Справочники.КартыДизайнПроектов.ЗаполнитьТекстовоеНаполнениеКарточки(Объект.Ссылка, СтруктураИспользуемыеРеквизиты, ТабДок, СписокВывода);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКарточкуТекст(Команда)
	
	Если Модифицированность Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да", "Да, записать изменения");
		СписокКнопок.Добавить("Нет", "Нет, не нужно");
		СписокКнопок.Добавить("Отмена", "Отмена");
		ПоказатьВопросПользователю("
			|В карточке имеются несохранённые изменения.
			|
			|Записать изменения?
			|", СписокКнопок,,, "Карточка модифицирована",, "ВыгрузитьКарточкуТекстЗавершение()");
	Иначе
		ВыгрузитьКарточкуТекстЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКарточкуТекстЗавершение()
	
	ТабДок = Новый ТабличныйДокумент;
	
	СтруктураОбъект = Новый Структура("Ссылка,ВидСтандартаКачества,КтоОсуществляетПечать");
	ЗаполнитьЗначенияСвойств(СтруктураОбъект, Объект);
	ЗаполнитьКарточкуТекстНаСервере(СтруктураОбъект, ТабДок);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьГруппировки = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Показать("Карточка " + Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКарточкуТекстФайлы(Команда)
	
	Если Модифицированность Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да", "Да, записать изменения");
		СписокКнопок.Добавить("Нет", "Нет, не нужно");
		СписокКнопок.Добавить("Отмена", "Отмена");
		ПоказатьВопросПользователю("
			|В карточке имеются несохранённые изменения.
			|
			|Записать изменения?
			|", СписокКнопок,,, "Карточка модифицирована",, "ВыгрузитьКарточкуТекстФайлыЗавершение()");
	Иначе
		ВыгрузитьКарточкуТекстФайлыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКарточкуТекстФайлыЗавершение()
	
	ВремКаталог = КаталогВременныхФайлов();
	ВремКаталог = ВремКаталог + ?(Прав(ВремКаталог, 1) = "\", "", "\");
	
	ТабДок = Новый ТабличныйДокумент;
	
	СтруктураОбъект = Новый Структура("Ссылка,ВидСтандартаКачества,КтоОсуществляетПечать");
	ЗаполнитьЗначенияСвойств(СтруктураОбъект, Объект);
	ЗаполнитьКарточкуТекстНаСервере(СтруктураОбъект, ТабДок);
	
	ТабДок.Записать(ВремКаталог + "Текстовое наполнение.XLS", ТипФайлаТабличногоДокумента.XLS);
	
	МассивИмёнФайлов = Новый Массив;
	МассивИмёнФайлов.Добавить(ВремКаталог + "Текстовое наполнение.XLS");
	
	Для Каждого СтрокаТЧФайлы Из Объект.Файлы Цикл
		Файл = Новый Файл(КаталогФайлов + СтрокаТЧФайлы.ОтносительноеИмяФайла);
		АдресВремХранилища = ПолучитьФайлНаСервере(Файл.ПолноеИмя, УникальныйИдентификатор);
		Если НЕ ЭтоАдресВременногоХранилища(АдресВремХранилища) Тогда Продолжить; КонецЕсли;
		
		ИмяФайла = ВремКаталог + СтрокаТЧФайлы.ТипФайла + Формат(СтрокаТЧФайлы.НомерФайла, "ЧГ=") + Файл.Расширение;
		ПолучитьИзВременногоХранилища(АдресВремХранилища).Записать(ИмяФайла);
		МассивИмёнФайлов.Добавить(ИмяФайла);
	КонецЦикла;
	
	// сохраняем все файлы в архив
	АрхивZip = Новый ЗаписьZipФайла;
	Для Каждого ИмяФайла Из МассивИмёнФайлов Цикл
		АрхивZip.Добавить(ИмяФайла);
	КонецЦикла;
	
	ВыбранноеИмяФайла = СокрЛП(Объект.Технолог) + "___" + СокрЛП(Объект.Поставщик) + "___"
	+ СокрЛП(?(ЗначениеЗаполнено(Объект.НаименованиеДляЦенника), Объект.НаименованиеДляЦенника, Объект.Наименование)) + ".zip";
	АдресВремХранилища = ПоместитьВоВременноеХранилище(АрхивZip.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
	Результ = ПолучитьФайл(АдресВремХранилища, ВыбранноеИмяФайла, Истина);
	
	// не удалось записать файл или пользователь нажал отмену
	//Если Результ <> Истина Тогда Возврат; КонецЕсли;
	
	// удаляем временные файлы
	Для Каждого ИмяФайла Из МассивИмёнФайлов Цикл
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТемпературыХраненияПриИзменении(Элемент)
	Элементы.СтраницыВидТемпературыХранения.ТекущаяСтраница =
		Элементы["Страница" + ?(Объект.ВидТемпературыХранения = ПредопределенноеЗначение("Перечисление.ВидыТемпературыХранения.НеМенееНеБолее"), "НеМенееНеБолее", "ОтДо")];
КонецПроцедуры
