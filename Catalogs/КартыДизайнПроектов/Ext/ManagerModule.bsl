
Функция ПолучитьКаталогХраненияФайлов(Ссылка) Экспорт
Перем ДатаДок;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КаталогХраненияФайлов = СокрЛП(Константы.КаталогХраненияФайлов.Получить());
	КаталогХраненияФайлов = КаталогХраненияФайлов + ?(Прав(КаталогХраненияФайлов, 1) = "\", "", "\") + "КартыДизайнПроектов\" + Строка(Ссылка.УникальныйИдентификатор()) + "\";
	
	ФайлКаталогХраненияФайлов = Новый Файл(КаталогХраненияФайлов);
	Если НЕ ФайлКаталогХраненияФайлов.Существует() Тогда
		СоздатьКаталог(КаталогХраненияФайлов);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КаталогХраненияФайлов;
	
КонецФункции // ПолучитьКаталогХраненияФайлов()

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	СсылкаНаОбъект = "";
	Если ВидФормы = "ФормаОбъекта" И Параметры.Свойство("Ключ", СсылкаНаОбъект) И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ТипПродукции = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ТипПродукции");
		Если ТипПродукции <> 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаЭлемента" + ТипПродукции;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъектаИТЧ(Ссылка, Знач Реквизиты, ИмяТЧ = "") Экспорт
	
	Результат = Новый Структура;
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда Возврат Результат; КонецЕсли;
		Реквизиты = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",");
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Ключ = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		
		// табличная часть
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			Результат.Вставить(Ключ, ЗначенияРеквизитовОбъектаИТЧ(Ссылка, Значение, Ключ));
			Продолжить;
		Иначе
			Результат.Вставить(Ключ);
		КонецЕсли;
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + Ключ + " КАК " + Ключ;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + ?(ПустаяСтрока(ИмяТЧ), ИмяТЧ, "." + ИмяТЧ) + " КАК ТаблицаБД
		|ГДЕ
		|	ТаблицаБД.Ссылка = &Ссылка
		|" + ?(ПустаяСтрока(ИмяТЧ), "", "
		|УПОРЯДОЧИТЬ ПО НомерСтроки"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ПустаяСтрока(ИмяТЧ) Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаЗапроса);
	Иначе
		Результат = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТекстовоеНаполнениеКарточки(Ссылка, СтруктураРеквизиты, ТабДок, СписокВывода = Неопределено) Экспорт
Перем Ключ, Значение, Синоним;
	
	МакетДляПечати = Справочники.КартыДизайнПроектов.ПолучитьМакет("ВыводЗначенийПолей");
	ОбластьСтрока = МакетДляПечати.ПолучитьОбласть("Строка");
	ОбластьБлок = МакетДляПечати.ПолучитьОбласть("Блок");
	
	СтруктураОбъект = ЗначенияРеквизитовОбъектаИТЧ(Ссылка, СтруктураРеквизиты);
	
	Если СписокВывода = Неопределено Тогда
		СписокВывода = Новый СписокЗначений;
		СписокВывода.Добавить(СтруктураОбъект);
	КонецЕсли;
	
	Для Каждого БлокВывода Из СписокВывода Цикл
		
		//Если ТипЗнч(БлокВывода.Значение) = Тип("Структура") Тогда
			СтруктураДанные = БлокВывода.Значение;
			Если ЗначениеЗаполнено(БлокВывода.Представление) Тогда
				ОбластьБлок.Параметры.Заполнить(БлокВывода);
				ТабДок.Вывести(ОбластьБлок);
			КонецЕсли;
		//Иначе
		//	СтруктураДанные = Новый Структура(БлокВывода.Ключ);
		//КонецЕсли;
		
		Для Каждого КлючИЗнач Из СтруктураДанные Цикл
			
			Ключ = КлючИЗнач.Ключ;
			Значение = СтруктураОбъект[Ключ];
			СтруктураРеквизиты.Свойство(Ключ, Синоним);
			КлючИЗначение = Новый Структура("Ключ,Значение", Ключ, Значение);
			
			Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
				// табличная часть
				ОбластьМакета = МакетДляПечати.ПолучитьОбласть("ТЧ_Шапка");
				ОбластьМакета.Параметры.Заполнить(КлючИЗначение);
				ТабДок.Вывести(ОбластьМакета);
				
				ВывелиШапку = Ложь;
				ОбластьМакета = МакетДляПечати.ПолучитьОбласть("ТЧ_Колонки|Колонка");
				Для Каждого Колонка Из Значение.Колонки Цикл
					ОбластьМакета.Параметры.Заполнить(Колонка);
					Если ВывелиШапку Тогда
						ТабДок.Присоединить(ОбластьМакета);
					Иначе
						ТабДок.Вывести(ОбластьМакета);
						ВывелиШапку = Истина;
					КонецЕсли;
				КонецЦикла;
				
				ОбластьМакета = МакетДляПечати.ПолучитьОбласть("ТЧ_Строка|Колонка");
				КвоКолонок = Значение.Колонки.Количество() - 1;
				Для Каждого СтрокаТЧ Из Значение Цикл
					Для Сч = 0 По КвоКолонок Цикл
						ОбластьМакета.Параметры.Значение = СтрокаТЧ[Сч];
						Если Сч = 0 Тогда
							ТабДок.Вывести(ОбластьМакета);
						Иначе
							ТабДок.Присоединить(ОбластьМакета);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				ОбластьМакета.Параметры.Значение = "";
				ТабДок.Вывести(ОбластьМакета);
				
			Иначе
				ОбластьСтрока.Параметры.Заполнить(КлючИЗначение);
				Если ЗначениеЗаполнено(Синоним) Тогда
					ОбластьСтрока.Параметры.Ключ = Синоним;
				КонецЕсли;
				ТабДок.Вывести(ОбластьСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивВсехТехнологов() Экспорт
	
	МассивТехнологов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник КАК Технолог,
		|	РолиПользователейСоставРоли.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Ссылка.ТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыгрузкаЗапроса = РезультатЗапроса.Выгрузить();
		МассивТехнологов = ВыгрузкаЗапроса.ВыгрузитьКолонку("Технолог");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивТехнологов;
	
КонецФункции

Функция ПолучитьМассивИспользуемыхТехнологов() Экспорт
	
	МассивТехнологов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	РолиПользователейСоставРоли.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|				И (Объект ССЫЛКА Справочник.Контрагенты
		|					ИЛИ Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры)) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|ГДЕ
		|	НЕ СоответствиеОбъектРольСрезПоследних.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыгрузкаЗапроса = РезультатЗапроса.Выгрузить();
		МассивТехнологов = ВыгрузкаЗапроса.ВыгрузитьКолонку("Технолог");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивТехнологов;
	
КонецФункции

Процедура ЗаполнитьТЧ_ПищеваяЦенность(ЭтотОбъект) Экспорт
	
	Показатели = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок("Белки,Жиры,Углеводы (пищевые волокна не входят)", ",");
	Для Каждого Показатель Из Показатели Цикл
		НоваяСтрокаТЧ = ЭтотОбъект.ПищеваяЦенность.Добавить();
		НоваяСтрокаТЧ.Показатель = Показатель;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивАудиторов() Экспорт
	
	МассивАудиторов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоответствиеВебПользователейЛабораториям.Лаборатория КАК Аудитор
		|ИЗ
		|	РегистрСведений.СоответствиеВебПользователейЛабораториям КАК СоответствиеВебПользователейЛабораториям");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыгрузкаЗапроса = РезультатЗапроса.Выгрузить();
		МассивАудиторов = ВыгрузкаЗапроса.ВыгрузитьКолонку("Аудитор");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивАудиторов;
	
КонецФункции

//+++АК SHEP 2018.04.20 ИП-00017032
Процедура ДополнитьСтруктуруВозврата(СтруктураВозврата, Ключ, СписокВыбораСтрокой, Разделитель = ",")
	СтруктураВозврата.Вставить(Ключ, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВыбораСтрокой, Разделитель, Истина, Истина));
КонецПроцедуры

//+++АК SHEP 2018.04.20 ИП-00017032
Функция СтруктураСписковВыбора(ТипПродукции) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "ОбогащениеПродуктаМинераламиИВитаминами", "НЕТ");
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "ДополнительныеУсловияХранения", "Избегать попадания прямых солнечных лучей");
	
	Если ТипПродукции = 1 Тогда
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "СпособПриготовленияПрименения", "ПРОДУКТ ГОТОВ К УПОТРЕБЛЕНИЮ");
	КонецЕсли;
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "УсловияХраненияПослеВскрытияУпаковки", "НЕТ");
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "РекомендацииПоПотреблению", "НЕТ");
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "СпециальныеЗнаки", "Температурные режимы;Защита от прямых солнечных лучей;Не тестировано на животных", ";");
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "МатериалПечати", "картон;крафт-бумага;фольга;непосредственно печать на пластике;бумажная этикетка;плёнка", ";");
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "ТипНаклейкиЭтикетки", "автоматическая;ручная", ";");
	
	Если ТипПродукции = 1 Тогда
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "СпособПроизводстваУпаковки", "Упаковано в защитной атмосфере;Упаковано под вакуумом;Другое", ";");
	КонецЕсли;
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "СпособПроставленияДаты", "лазер,чернильный датер,стикер");
	
	//ДополнитьСтруктуруВозврата(СтруктураВозврата, "ДатаИзготовленияРавнаДатеУпаковки", "Да,Нет"); сделал булево
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "СпособПроставленияДаты", "датером вручную, лазером, печатью, выдавливанием на швах");
	
	ДополнитьСтруктуруВозврата(СтруктураВозврата, "ФорматПроставленияДаты", "ДД.ММ.ГГ, ДД.ММ.ГГГГ, ДД/ММ/ГГ, ДД/ММ/ГГГГ, ГГГГ.ММ.ДД, ММ.ГГ, ММ.ГГГГ");
	
	Возврат СтруктураВозврата;
	
КонецФункции
