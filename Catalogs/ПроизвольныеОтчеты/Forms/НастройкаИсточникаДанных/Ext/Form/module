Перем СхемаОтчета Экспорт;

Перем ПараметрыИсточниковДанныхДоЗаписи;
Перем мСписокОтчетов;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ

Функция ЗаписатьНастройкуОтчета()

	Отказ = Ложь;
	
	ЗаголовокДействия = "Запись настройки набора данных: " + НаборДанных;
	Если НЕ ЗначениеЗаполнено(НаборДанных) Тогда
		ТекстОшибки = "Не заполнено поле ""Набор данных""";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, ЗаголовокДействия); 
	Иначе
		СтрокиИсточникиДанных = ИсточникиДанных.НайтиСтроки(Новый Структура("НаборДанных", НаборДанных));
		Для каждого ЭлКоллекции Из СтрокиИсточникиДанных Цикл
			Если ЭлКоллекции.КлючИсточника <> КлючИсточника Тогда
				ТекстОшибки = "Для набора данных уже существует настройка";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, ЗаголовокДействия); 
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		НаборДанныхСхемыОтчета = ПроцедурыПроизвольныхОтчетов.НайтиНаборДанныхСхемы(НаборДанных, СхемаОтчета.НаборыДанных);
		ТипНабора = ТипЗнч(НаборДанныхСхемыОтчета);
		Если ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			Если ПустаяСтрока(НаборДанныхСхемыОтчета.ИмяОбъекта) Тогда
				ТекстОшибки = "В схеме компоновки для набора данных не указано имя объекта, содержащего данные.";
				ОбщегоНазначения.Сообщение(ТекстОшибки, СтатусСообщения.Внимание, ЗаголовокДействия);
			КонецЕсли; 
		Иначе
			ТекстОшибки = "Схема содержит несколько наборов данных с именем """ + НаборДанных + """";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, ЗаголовокДействия);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ТипИсточникаДанных.Пустая() Тогда
		ТекстОшибки = "Не заполнено поле ""Тип источника""";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, ЗаголовокДействия); 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ ПроверитьИсточникДанных() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если КлючИсточника = -1 Тогда
		СтрокаИсточникаДанных = ПроцедурыПроизвольныхОтчетов.ДобавитьИсточникДанных(ИсточникиДанных);
		КлючИсточника = СтрокаИсточникаДанных.КлючИсточника;
	Иначе
		СтрокаИсточникаДанных = ИсточникиДанных.Найти(КлючИсточника, "КлючИсточника");
	КонецЕсли;
	
	// 
	СтруктураИсточникаДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма);
	ЗаполнитьЗначенияСвойств(СтрокаИсточникаДанных, СтруктураИсточникаДанных);
	
	СтрокаИсточникаДанных.НаборДанных = НаборДанных;
	
	// Удалим существующие параметры источника
	Параметры = ПараметрыИсточниковДанных.НайтиСтроки(Новый Структура("КлючИсточника", КлючИсточника));
	Для каждого УдаляемыйПараметр Из Параметры Цикл
		ПараметрыИсточниковДанных.Удалить(УдаляемыйПараметр);
	КонецЦикла; 
	
	// Добавим новые параметры
	Для каждого Параметр Из ПараметрыИсточникаДанных Цикл
		НовыйПараметр = ПараметрыИсточниковДанных.Добавить();
	    ЗаполнитьЗначенияСвойств(НовыйПараметр, Параметр);
		НовыйПараметр.КлючИсточника = КлючИсточника;
	КонецЦикла; 
	
	ЗаполнитьПоляНабораДанных(НаборДанныхСхемыОтчета);
	ЗаполнитьПараметрыСхемыОтчета();
	
	ПараметрыИсточниковДанныхДоЗаписи = ПараметрыИсточниковДанных.Скопировать();
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции //

Процедура ЗаполнитьСписокВыбораНаборовДанных(НаборыДанных)
	
	Для каждого НаборДанныхСхемыОтчета Из НаборыДанных Цикл
		ТипНабора = ТипЗнч(НаборДанныхСхемыОтчета);
		
		Если ТипНабора = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ЗаполнитьСписокВыбораНаборовДанных(НаборДанныхСхемыОтчета.Элементы);
		ИначеЕсли ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			ЭлементыФормы.НаборДанных.СписокВыбора.Добавить(НаборДанныхСхемыОтчета.Имя);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ЗаполнитьДанныеФормы()
	
	Если КлючИсточника <> -1 Тогда
		СтрокаИсточникиДанных = ИсточникиДанных.Найти(КлючИсточника, "КлючИсточника");
	ИначеЕсли ОбъектКопирования <> Неопределено Тогда
		СтрокаИсточникиДанных = ИсточникиДанных.Найти(ОбъектКопирования.КлючИсточника, "КлючИсточника");
	КонецЕсли; 
		
	Если СтрокаИсточникиДанных <> Неопределено Тогда
		НаборДанных = СтрокаИсточникиДанных.НаборДанных;
		
		ТипИсточникаДанных = СтрокаИсточникиДанных.ТипИсточникаДанных;
		ИмяИсточника = СтрокаИсточникиДанных.ИмяИсточника;
		СохраненнаяНастройка = СтрокаИсточникиДанных.СохраненнаяНастройка;
		НаименованиеНастройкиОтчета = СтрокаИсточникиДанных.НаименованиеНастройкиОтчета;
		ПользовательНастройкиОтчета = СтрокаИсточникиДанных.ПользовательНастройкиОтчета;
		
		Параметры = ПараметрыИсточниковДанных.НайтиСтроки(Новый Структура("КлючИсточника", СтрокаИсточникиДанных.КлючИсточника));
		Для каждого ЭлКоллекции Из Параметры Цикл
			Параметр = ПараметрыИсточникаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(Параметр, ЭлКоллекции);
		КонецЦикла; 
	Иначе
		ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет;
	КонецЕсли; 
	
	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет 
		ИЛИ ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		ЗаполнитьСписокОтчетов();
	КонецЕсли; 
	
	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		ПроизвольныйОтчет = ИмяИсточника;
	ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ВнешняяОбработка Тогда
		ВнешняяОбработка = ИмяИсточника;
	КонецЕсли; 
	
	УправлениеПанельюНастроекИсточника();
	
	ОбновитьНадписи();
	
	ЗаполнитьПолеНастройкаОтчета();
	
	ПараметрыИсточниковДанныхДоЗаписи = ПараметрыИсточниковДанных.Скопировать();
	
КонецПроцедуры //

Процедура ОбновитьНадписи()
	
	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет
		ИЛИ ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		ВыборТипаИсточника = "Отчет";
	Иначе
		ВыборТипаИсточника = ТипИсточникаДанных;
	КонецЕсли; 	
	
КонецПроцедуры //


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НАСТРОЙКИ ИСТОЧНИКА ДАННЫХ

Функция ПроверитьСтруктуруНастройкиОтчета(КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных)
	
	Для каждого ГруппировкаКомпоновки Из КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных Цикл
		
		Если НЕ ГруппировкаКомпоновки.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ГруппировкаКомпоновки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПроверитьСтруктуруНастройкиОтчета(ГруппировкаКомпоновки.Структура);
		
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // 

Функция ПроверитьИсточникДанных()
	
	Отказ = Ложь;
	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет
		ИЛИ ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		СтруктураИсточникаДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма);
		
		ОтчетОбъект = ПроцедурыПроизвольныхОтчетов.ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, Истина);
		Если ОтчетОбъект = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		НастройкиКомпоновки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		Если НЕ ПроверитьСтруктуруНастройкиОтчета(НастройкиКомпоновки.Структура) Тогда
			ТекстСообщения = "В структуре отчета допускаются только группировки";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат НЕ Отказ;
		
КонецФункции // 

Процедура ВыбратьНастройкуУниверсальногоОтчета()

	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", ?(ЗначениеЗаполнено(ПользовательНастройкиОтчета), ПользовательНастройкиОтчета, глЗначениеПеременной("глТекущийПользователь")));
	СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект." + ИмяИсточника);
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(ПустаяСтрока(НаименованиеНастройкиОтчета), Неопределено, НаименованиеНастройкиОтчета));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		
		НаименованиеНастройкиОтчета = Результат.НаименованиеНастройки;
		ПользовательНастройкиОтчета = Результат.Пользователь;
		
		ЗаполнитьПолеНастройкаОтчета();
	КонецЕсли;
	
КонецПроцедуры //
 
Процедура ВыбратьНастройкуТиповогоОтчета()

	ОтчетОбъект = ПроцедурыПроизвольныхОтчетов.ПолучитьОтчетИзИсточникаДанных(ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма));
	
	НастраиваемыйОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	ФормаВыбора = Справочники.СохраненныеНастройки.ПолучитьФормуВыбора(, ЭтаФорма);
	
	ФормаВыбора.Отбор.НастраиваемыйОбъект.Установить(НастраиваемыйОбъект);
	
	ФормаВыбора.Отбор.ТипНастройки.Установить(Перечисления.ТипыНастроек.НастройкиОтчета);
	
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	СписокДоступныхВариантов = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект);
	Для каждого ДоступныйВариант Из СписокДоступныхВариантов Цикл
		Если ДоступныйВариант.Пометка Тогда
			ФормаВыбора.Отбор.Ссылка.Значение.Добавить(ДоступныйВариант.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ФормаВыбора.РежимСохраненияНастройки = Ложь;
	ФормаВыбора.ОткрытьМодально();

КонецПроцедуры

Процедура УправлениеПанельюНастроекИсточника()

	ВидимостьПанелиНастройкиИсточника = Истина;
	
	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет
		ИЛИ ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		ЭлементыФормы.ПанельНастройкиИсточника.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиИсточника.Страницы.Отчет;
		
	ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		ЭлементыФормы.ПанельНастройкиИсточника.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиИсточника.Страницы.ПроизвольныйОтчет;
		
	ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ВнешняяОбработка Тогда
		ЭлементыФормы.ПанельНастройкиИсточника.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиИсточника.Страницы.ВнешняяОбработка;
		
	Иначе
		
		ВидимостьПанелиНастройкиИсточника = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ПанельНастройкиИсточника.Видимость = ВидимостьПанелиНастройкиИсточника;
	
КонецПроцедуры //

// Вызывается из формы выбора сохраненной настройки (при выборе)
//
Процедура ПрименитьНастройку() Экспорт

	ЗаполнитьПолеНастройкаОтчета();
	
КонецПроцедуры //

Процедура ЗаполнитьПолеНастройкаОтчета()

	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
		НастройкаОтчета = НаименованиеНастройкиОтчета;
	ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда	
		НастройкаОтчета = СохраненнаяНастройка;
	Иначе
		НастройкаОтчета = "";
	КонецЕсли;	
	
КонецПроцедуры //

Процедура ЗаполнитьСписокОтчетов()
	
	Если мСписокОтчетов = Неопределено Тогда
		
		мСписокОтчетов = Новый ТаблицаЗначений;
		мСписокОтчетов.Колонки.Добавить("Имя");
		мСписокОтчетов.Колонки.Добавить("Синоним");
		мСписокОтчетов.Колонки.Добавить("ТипОтчета");
		
		Для Каждого МетаданныеОтчета Из Метаданные.Отчеты Цикл
			
			Если ПроцедурыПроизвольныхОтчетов.ЭтоТиповойОтчет(МетаданныеОтчета) Тогда
				ТипОтчета = Перечисления.ТипыИсточниковДанных.ТиповойОтчет;
			ИначеЕсли ПроцедурыПроизвольныхОтчетов.ЭтоУниверсальныйОтчет(МетаданныеОтчета) Тогда
				ТипОтчета = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет;
			Иначе
				Продолжить;
			КонецЕсли;
				
			ИмяОтчета     = МетаданныеОтчета.Имя;
			СинонимОтчета = ?(МетаданныеОтчета.Синоним="", МетаданныеОтчета.Имя, МетаданныеОтчета.Синоним);
			
			ЭлементыФормы.ИмяИсточника.СписокВыбора.Добавить(ИмяОтчета, СинонимОтчета);
			
			НовыйОтчет = мСписокОтчетов.Добавить();
			НовыйОтчет.Имя = ИмяОтчета; 
			НовыйОтчет.Синоним = СинонимОтчета; 
			НовыйОтчет.ТипОтчета = ТипОтчета; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры //

Функция ПолучитьТипВыбранногоОтчета()
	
	Если ПустаяСтрока(ИмяИсточника) Тогда
		Возврат Перечисления.ТипыИсточниковДанных.ПустаяСсылка();
	КонецЕсли;
	
	ВыбранныйОтчет = мСписокОтчетов.Найти(ИмяИсточника, "Имя");
	
	Возврат ВыбранныйОтчет.ТипОтчета;

КонецФункции //

Процедура ПроизвольныйОтчетПриИзменении(Элемент)
	
	ИмяИсточника = ПроизвольныйОтчет;
	СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	ЗаполнитьПараметрыИсточникаДанных();
	
КонецПроцедуры

Процедура ИмяИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(ИмяИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетИсточникОбъект = ПроцедурыПроизвольныхОтчетов.ПолучитьОтчетИзИсточникаДанных(ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма));
	
	ФормаОтчета = ОтчетИсточникОбъект.ПолучитьФорму();
	ФормаОтчета.Открыть();
	
	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет 
		И НЕ ПустаяСтрока(НаименованиеНастройкиОтчета) Тогда
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", ПользовательНастройкиОтчета);
		СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект." + ИмяИсточника);
		СтруктураНастройки.Вставить("НаименованиеНастройки", НаименованиеНастройкиОтчета);
		
		Если УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки) Тогда
			ПроцедурыПроизвольныхОтчетов.ВосстановитьНастройкиОтчета(ОтчетИсточникОбъект, ТипИсточникаДанных, СтруктураНастройки.СохраненнаяНастройка);	
			ОтчетИсточникОбъект.УниверсальныйОтчет.УстановитьЗаголовокФормы(ОтчетИсточникОбъект.УниверсальныйОтчет, ОтчетИсточникОбъект, ФормаОтчета);
			ФормаОтчета.ОбновитьОтчет();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяИсточникаПриИзменении(Элемент)
	
	ТипИсточникаДанных = ПолучитьТипВыбранногоОтчета();
	
	ПользовательНастройкиОтчета = Неопределено;
	НаименованиеНастройкиОтчета = "";
	СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	
	ЗаполнитьПолеНастройкаОтчета();
	
	ЗаполнитьПараметрыИсточникаДанных();
	
КонецПроцедуры

Процедура ИмяИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если мСписокОтчетов = Неопределено Тогда
		ЗаполнитьСписокОтчетов();
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаОтчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ИмяИсточника) Тогда
		Предупреждение("Необходимо выбрать отчет.");
		Возврат;
	КонецЕсли;

	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
		ВыбратьНастройкуУниверсальногоОтчета();
		
	ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		ВыбратьНастройкуТиповогоОтчета();
		
	ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		
		ОтчетОбъект = ПроцедурыПроизвольныхОтчетов.ПолучитьОтчетИзИсточникаДанных(ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма));
		СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, Элемент, ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект), Ложь);
		
	КонецЕсли; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ВыборТипаИсточникаПриИзменении(Элемент)
	
	Если ВыборТипаИсточника = "Отчет" Тогда
		ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет;
	Иначе
		ТипИсточникаДанных = ВыборТипаИсточника;
	КонецЕсли; 
	
	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		ИмяИсточника = Справочники.ПроизвольныеОтчеты.ПустаяСсылка();
	Иначе
		ИмяИсточника = Неопределено;
	КонецЕсли; 
	
	ПользовательНастройкиОтчета = Неопределено;
	НаименованиеНастройкиОтчета = "";
	СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	ОтборыХранилище = Новый ХранилищеЗначения(Неопределено);
	
	УправлениеПанельюНастроекИсточника();
	ЗаполнитьПараметрыИсточникаДанных();
	
	ОбновитьНадписи();
	
КонецПроцедуры

Процедура ВнешняяОбработкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	
	Форма = Справочники.ВнешниеОбработки.ПолучитьФормуВыбора(, Элемент);
	Форма.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОЗДАНИЯ СКД ПРОИЗВОЛЬНОГО ОТЧЕТА

Процедура ЗаполнитьПоляНабораДанных(ОсновнойНабор)
	
	ОсновнойНабор.Поля.Очистить();
	
	ПоляНабораДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьСписокПолейИсточника(ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма));
	
	Для каждого СтрокаПоляНабораДанных Из ПоляНабораДанных Цикл
		ИмяПоля = СтрокаПоляНабораДанных.Поле;
		ЗаголовокПоля = СтрокаПоляНабораДанных.Заголовок;
		ПутьКДанным = ИмяПоля;
		
		ПолеНабораДанных = ТиповыеОтчеты.ДобавитьПолеНабораДанных(ОсновнойНабор, ИмяПоля, ЗаголовокПоля, ПутьКДанным);
		Если ЗначениеЗаполнено(СтрокаПоляНабораДанных.ТипЗначения) Тогда
		    ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(СтрокаПоляНабораДанных.ТипЗначения);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ЗаполнитьПараметрыСхемыОтчета()
	
    // Удалим неиспользуемые параметры из схемы отчета
	Для каждого СтрокаПараметрыИсточника Из ПараметрыИсточниковДанныхДоЗаписи Цикл
		ПутьКДанным = СтрокаПараметрыИсточника.ПутьКДанным;
		
		Если ПараметрыИсточниковДанных.Найти(ПутьКДанным, "ПутьКДанным") <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ПараметрСхемы = СхемаОтчета.Параметры.Найти(ПутьКДанным);
		Если ПараметрСхемы <> Неопределено Тогда
			СхемаОтчета.Параметры.Удалить(ПараметрСхемы);
		КонецЕсли; 
	КонецЦикла;
	
	// Получим детальные данные о параметрах источника
	ПараметрыИсточника = ПроцедурыПроизвольныхОтчетов.ПолучитьСписокПараметровИсточника(ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма));
	
	// Заполним параметры схемы отчета
	Для каждого СтрокаПараметрыИсточника Из ПараметрыИсточникаДанных Цикл
		
		ПараметрИсточника = ПараметрыИсточника.Найти(СтрокаПараметрыИсточника.Параметр, "Имя");
		Если ПараметрИсточника = Неопределено Тогда
			// Видимо список параметров источника изменился
			Продолжить;
		КонецЕсли; 
		
		ПутьКДанным = СтрокаПараметрыИсточника.ПутьКДанным;
		ПараметрСхемы = СхемаОтчета.Параметры.Найти(ПутьКДанным);
		Если ПараметрСхемы = Неопределено Тогда
			
			ОграничениеИспользования = ПараметрИсточника.ОграничениеИспользования;
			
			ПараметрСхемы = СхемаОтчета.Параметры.Добавить();
			ПараметрСхемы.Имя = ПутьКДанным;
			ПараметрСхемы.Заголовок = ПараметрИсточника.Заголовок;
			
 			Выражение = СтрЗаменить(ПараметрИсточника.Выражение, Символы.ПС, " ");
			ПараметрСхемы.Выражение = Выражение;
			
			ПараметрСхемы.ВключатьВДоступныеПоля = Истина;
			ПараметрСхемы.ОграничениеИспользования = ОграничениеИспользования;
			ПараметрСхемы.ТипЗначения = Новый ОписаниеТипов(ПараметрИсточника.ТипЗначения);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры //


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НАСТРОЙКИ ПАРАМЕТРОВ

Процедура ЗаполнитьПараметрыИсточникаДанных()

	ПараметрыИсточникаДанных.Очистить();
	
	СтруктураИсточникаДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(ЭтаФорма);
	СписокПараметровИсточникаДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьСписокПараметровИсточника(СтруктураИсточникаДанных);
	
	Для каждого ПараметрИсточника Из СписокПараметровИсточникаДанных Цикл
		Параметр = ПараметрыИсточникаДанных.Добавить();
		Параметр.Параметр    = ПараметрИсточника.Имя;
		Параметр.ПутьКДанным = ПараметрИсточника.Имя;
	КонецЦикла; 
	
КонецПроцедуры //
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ЗаполнитьДанныеФормы();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействиеОК(Кнопка)
	
	Если ЗаписатьНастройкуОтчета() Тогда
		Закрыть(Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = "Данные были изменены. Сохранить изменения?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да, "Общая настройка отчета");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ ЗаписатьНастройкуОтчета() Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		
		Модифицированность = Ложь;
		
		Закрыть(Ответ = КодВозвратаДиалога.Да);
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораНаборовДанных(СхемаОтчета.НаборыДанных);
	
КонецПроцедуры

Процедура ВнешняяОбработкаПриИзменении(Элемент)
	
	ИмяИсточника = ВнешняяОбработка;
	ЗаполнитьПараметрыИсточникаДанных();

КонецПроцедуры


ЭлементыФормы.ВыборТипаИсточника.СписокВыбора.Добавить("Отчет");

Для каждого ЭлКоллекции Из Перечисления.ТипыИсточниковДанных Цикл
	
	Если ЭлКоллекции <> Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет 
		И ЭлКоллекции <> Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		ЭлементыФормы.ВыборТипаИсточника.СписокВыбора.Добавить(ЭлКоллекции);
	КонецЕсли; 
	
КонецЦикла; 

мСписокОтчетов = Неопределено;
