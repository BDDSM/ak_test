
Перем НеЛогироватьСменуАктивности Экспорт;
Перем мРегистрироватьИзменениеСтавкиНДС;


Процедура ПечатьФайла(пИмяФайла, пХранилище) Экспорт
	
	Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
	//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
	//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
	//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
	//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = КаталогВременныхФайлов();//"C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	#Если Клиент Тогда
		Состояние("Сохраняется файл: " + пИмяФайла);
	#КонецЕсли	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	ДвоичныеДанные = пХранилище.Получить();
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		#Если Клиент Тогда
		Состояние("Печать файла: " + пИмяФайла);
		#КонецЕсли
		ЗапуститьПриложение(пПрограмма);
	КонецЕсли;    	
		
КонецПроцедуры

Процедура АК_ИзменениеРегистраСверкиДекларацииИЭтикеток()
	
	//
	ТаблицаХарактеристик = Новый ТаблицаЗначений;
	ТаблицаХарактеристик.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Для Каждого	СтрокаТЧ из ЭтотОбъект.Этикетки Цикл
		Если Ссылка.Этикетки.Найти(СтрокаТЧ.ИмяФайла, "ИмяФайла") = Неопределено Тогда
			НоваяСтрока = ТаблицаХарактеристик.Добавить();
			НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;	
		КонецЕсли;	 
	КонецЦикла;
	
	//
	Если ТаблицаХарактеристик.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаХарактеристик", ТаблицаХарактеристик);
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаХарактеристик.Характеристика
		|ПОМЕСТИТЬ ВТ_НаборЗаписей
		|ИЗ
		|	&ТаблицаХарактеристик КАК ТаблицаХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АК_РезультатСверкиДанныхДекларацийСрезПоследних.Номенклатура,
		|	АК_РезультатСверкиДанныхДекларацийСрезПоследних.Характеристика
		|ИЗ
		|	РегистрСведений.АК_РезультатСверкиДанныхДеклараций.СрезПоследних КАК АК_РезультатСверкиДанныхДекларацийСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборЗаписей КАК ВТ_НаборЗаписей
		|		ПО АК_РезультатСверкиДанныхДекларацийСрезПоследних.Характеристика = ВТ_НаборЗаписей.Характеристика
		|ГДЕ
		|	НЕ АК_РезультатСверкиДанныхДекларацийСрезПоследних.Этикетка = ЗНАЧЕНИЕ(Перечисление.АК_ВидыСтатусовПроверкиИзображений.Проверено)
		|	И НЕ АК_РезультатСверкиДанныхДекларацийСрезПоследних.Этикетка = ЗНАЧЕНИЕ(Перечисление.АК_ВидыСтатусовПроверкиИзображений.ПустаяСсылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.АК_РезультатСверкиДанныхДеклараций.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= Выборка.Характеристика;
			Запись.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
			Запись.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтотОбъект.ЭтоГруппа Тогда
		ЭтотОбъект.id_group = 0;
	Иначе
		ЭтотОбъект.id_tov = 0;
	КонецЕсли;	
	
	//связанные реквизиты
	ЭтотОбъект.ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
	ЭтотОбъект.Картинки.Очистить();
	ЭтотОбъект.Файлы.Очистить();
	ЭтотОбъект.ПризнакиУчетаНоменклатуры.Очистить();
	ЭтотОбъект.Ярлыки.Очистить();
	
	ЭтотОбъект.УслугаАрендыПомещения 	= Ложь;
	ЭтотОбъект.ПостояннаяЧастьОплаты 	= Ложь;
	ЭтотОбъект.ФормаОплаты 				= Неопределено;
	ЭтотОбъект.ВыгружатьНаСайт 			= Ложь;
	ЭтотОбъект.БаннерНаГлавную 			= Ложь;
	ЭтотОбъект.ТребуетсяВетеринарныйСертификат = Ложь;
	ЭтотОбъект.ГруппаНоменклатуры 		= Неопределено;
	ЭтотОбъект.МассаУпаковки 	= "";
	ЭтотОбъект.ПищеваяЦенность 	= "";
	ЭтотОбъект.Состав 			= "";
	ЭтотОбъект.СрокГодности 	= "";
	ЭтотОбъект.Описание 		= "";
	ЭтотОбъект.ТехнологияПроизводства 	= "";
	ЭтотОбъект.ЧемУникально 	= "";
	ЭтотОбъект.Рецепт 			= "";
	ЭтотОбъект.НомерДляСМС 		= 0;
	
	ЭтотОбъект.КоэффициентыЗаказа 	= Справочники.КоэффициентыЗаказа.ПустаяСсылка();
	ЭтотОбъект.НаименованиеДляСМС 	= "";
	ЭтотОбъект.Фишка 				= "";
	
	ЭтотОбъект.ГруппаДоПомещенияВАрхив = Неопределено;
	
	ЭтотОбъект.ЭтоКомплект = Ложь;
	
	ЭтотОбъект.Этикетки.Очистить();
	
	ЭтотОбъект.КатегорияАссортимента 	= Перечисления.КатегорииАссортимента.Новинки;
	ЭтотОбъект.ДатаСоздания 			= Неопределено;
	
	ЭтотОбъект.Акции.Очистить();
	
	ЭтотОбъект.ГруппаНоменклатурыУРЗ 	= Неопределено;
	
	ЭтотОбъект.ОбязателенВАссортиментеМагазиновС 	= Неопределено;
	ЭтотОбъект.ОбязателенВАссортиментеМагазиновПо 	= Неопределено;
	ЭтотОбъект.СпецАссортиментМожноВывестиСМагазинов.Очистить();
	
	ЭтотОбъект.СчитатьНовинкойДоДаты 	= Неопределено;
	ЭтотОбъект.ГруппаНоменклатуры 		= Неопределено;
	ЭтотОбъект.МассаУпаковки 			= "";
	ЭтотОбъект.ЕдиницаИзмеренияДляСайта = Неопределено;
	ЭтотОбъект.ОднаУпаковкаСодержит 	= 0;
	ЭтотОбъект.ПищеваяЦенность 			= "";
	ЭтотОбъект.Состав 					= "";
	ЭтотОбъект.СрокГодности 			= "";
	ЭтотОбъект.Описание 				= "";
	ЭтотОбъект.ТехнологияПроизводства 	= "";
	ЭтотОбъект.Рецепт 					= "";
	ЭтотОбъект.СвойстваДляСайта.Очистить();
	
	ЭтотОбъект.АйдиТовараНаСайте 		= 0;
	
	ЭтотОбъект.НеВключатьАвтоматическиВАссортимент 	= Ложь;
	
	ЭтотОбъект.ДатаНачалаВыводаНаСинийЦенник = '00010101';
	ЭтотОбъект.ДатаОкончанияВыводаНаСинийЦенник = '00010101';
	ЭтотОбъект.ТекстВместоФишки = "";
	
	ЭтотОбъект.ФишкиНаЦенник.Очистить();
	
	ЭтотОбъект.ГруппаНоменклатурыУРЗ = Неопределено;
	ЭтотОбъект.НомерДляСМС = 0;
	ЭтотОбъект.ГруппаДоставкиНаТТ = Неопределено;
	ЭтотОбъект.Порядок = 0;
	ЭтотОбъект.МинимальныйОстаток = 0;
	ЭтотОбъект.ВидРекламногоМатериала = Неопределено;
	ЭтотОбъект.Фронтол_БыстрыйВыбор = Ложь;
	ЭтотОбъект.ВесИГабаритыУпаковки.Очистить();
	
	//+++АК KIRN 2018.04.19 
	ЭтотОбъект.ОсновнаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ЭтотОбъект.ТорговаяМарка = Справочники.ТорговыеМарки.ПустаяСсылка();
	ЭтотОбъект.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
	//---АК KIRN 
	
	//+++АК SHEP 2018.07.26 ИП-00019318: очищаем при копировании "Сведения об алкогольной продукции"
	ЭтотОбъект.ВидПродукции = ПредопределенноеЗначение("Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка");
	ЭтотОбъект.ВидЛицензии = ПредопределенноеЗначение("Перечисление.ВидыЛицензийНаПродажуАлкоголя.ПустаяСсылка");
	ЭтотОбъект.КоэффПересчетаДал = 0;
	//---АК SHEP 2018.07.26
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		ЭтотОбъект.КатегорияАссортимента = Перечисления.КатегорииАссортимента.Новинки;
	КонецЕсли;	
	
	//+++АК SHEP 20160523
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПлановыйАссортимент") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Наименование, Описание");
		ЭтотОбъект.Технолог = ДанныеЗаполнения.Ответственный;
	КонецЕсли;
	//---АК SHEP 20160523
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтотОбъект.ЭтоНовый());
	
	ГруппаАрхив = Справочники.Номенклатура.НайтиПоКоду("000620699");
	Если Ссылка.Родитель <> ГруппаАрхив
			И Родитель = ГруппаАрхив Тогда
		ГруппаДоПомещенияВАрхив = Ссылка.Родитель;
	КонецЕсли;
	
	Если КатегорияАссортимента = Перечисления.КатегорииАссортимента.Новинки
		И НЕ ЗначениеЗаполнено(ДатаНачалаВыводаНаСинийЦенник)
		И ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		И Родитель.АвтоматическиНеСтавитьНовинкуВСиниеЦенники = Ложь Тогда
		ДатаНачалаВыводаНаСинийЦенник = ТекущаяДата();
		ДатаОкончанияВыводаНаСинийЦенник = ДобавитьМесяц(ТекущаяДата(), 2);
		ТекстВместоФишки = "НОВИНКА!";
	КонецЕсли;
	
	//если у товара заполнен период действия синего ценника и предыдущая категория была новинка, то надо убрать период
	Если ЗначениеЗаполнено(ДатаОкончанияВыводаНаСинийЦенник)
		И Ссылка.КатегорияАссортимента = Перечисления.КатегорииАссортимента.Новинки
		И КатегорияАссортимента <> Перечисления.КатегорииАссортимента.Новинки Тогда
		ДатаОкончанияВыводаНаСинийЦенник = НачалоДня(ТекущаяДата()) - 1;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	
	//+++АК sils 18.06.2018 ИП-00018927
	Если не ЭтоГруппа Тогда
	//---АК
	//+++АК KIRN 2018.03.19 ИП-00018083       
	Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар Тогда
		Если ТипТовара <> Перечисления.ТипыТоваров.Упаковка Тогда
			Если НЕ ЗначениеЗаполнено(ТорговаяМарка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена торговая марка товара",,,, Отказ);
			КонецЕСли;
		КонецЕСли;
	КонецЕСли;
	//---АК KIRN 
	//+++АК sils 18.06.2018 ИП-00018927
	КонецЕсли;
	//---АК
	
	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		
		Для Каждого СтрокаАкция Из ЭтотОбъект.Акции Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаАкция.ДатаОкончания) Тогда
				СтрокаАкция.ДатаОкончания = '30000101';
			КонецЕсли;	
		КонецЦикла;	
		
		Если ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
				И ЭтотОбъект.ГруппаНоменклатурыУРЗ.Пустая()
				И НЕ ЭтотОбъект.Выведена
				И НЕ ЭтотОбъект.ПометкаУдаления
				И НЕ ЭтотОбъект.ОбменДанными.Загрузка Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указана группа номенклатуры УРЗ";
			СообщениеПользователю.УстановитьДанные(ЭтотОбъект.ГруппаНоменклатурыУРЗ);
			СообщениеПользователю.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
			ЭтотОбъект.ТипОборудования = Справочники.ТипыОборудования.ПустаяСсылка();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НаименованиеПолное) Тогда
			ЭтотОбъект.НаименованиеПолное = ЭтотОбъект.Наименование;
		КонецЕсли;
		Если ЭтотОбъект.ГруппаДоставкиНаТТ.Пустая() Тогда
			ЭтотОбъект.ГруппаДоставкиНаТТ = Перечисления.ГруппыДоставкиНоменклатуры.Прочее;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.id_tov) Тогда
			ЭтотОбъект.id_tov = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура", "id_tov");
		КонецЕсли;
		
		Для Каждого СтрокаАкция Из ЭтотОбъект.Акции Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаАкция.ДействуетЦена_Скидка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена цена или скидка в акциях по товару",,,, Отказ);
			КонецЕсли;	
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Элемент должен быть обязательно привязан к какой-нибудь группе (реквизит Группа)",,,, Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		СсылкаОбъект = ЭтотОбъект.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(СсылкаОбъект) Тогда
			СсылкаОбъект = Справочники.Номенклатура.ПолучитьСсылку();
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаОбъект);
		КонецЕсли;
		Если НЕ ЭтотОбъект.Родитель.Пустая() Тогда
			ЭтотОбъект.РаспределяетсяНеЦелымиКоробками = ЭтотОбъект.Родитель.РаспределяетсяНеЦелымиКоробками;
		КонецЕсли;
		ЭтотОбъект.ДатаСоздания = ТекущаяДата();
	Иначе
		СсылкаОбъект = ЭтотОбъект.Ссылка;
		
		Если ЭтоКомплект <> Ссылка.ЭтоКомплект
				И ОбменДанными.Загрузка = Ложь Тогда
			ЗапросДвижений = Новый Запрос;
			ЗапросДвижений.УстановитьПараметр("Номенклатура", СсылкаОбъект);
			ЗапросДвижений.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТоварыНаСкладах.Период
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
			|ГДЕ
			|	ТоварыНаСкладах.Номенклатура = &Номенклатура";
								   
			Результат = ЗапросДвижений.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя изменить признак ""Это комплект"", так как есть движения по товару",,,, Отказ);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЭтотОбъект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.id_group) Тогда
			ЭтотОбъект.id_group = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура", "id_group");
		КонецЕсли;
		ЭтотОбъект.ГруппаДляРасчетчика = СсылкаОбъект;
	КонецЕсли;
	
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();
	Если ЗначениеЗаполнено(КаталогКЗаписи) Тогда
		Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
			КаталогКЗаписи = КаталогКЗаписи + "\";
		КонецЕсли;	
		Для Каждого СтрокаКартинка Из ЭтотОбъект.Картинки Цикл
			Если СтрокаКартинка.ВнесеныИзменения Тогда
				ИмяФайла = Строка(СсылкаОбъект.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
				СтрокаКартинка.ХранилищеКЗаписи.Получить().Записать(КаталогКЗаписи + ИмяФайла);
				СтрокаКартинка.ХранилищеКЗаписи = Неопределено;
				СтрокаКартинка.ВнесеныИзменения = Ложь;
				ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("Номенклатура, ТипЗаписи, ОтносительноеИмяФайла, Расширение"
							, СсылкаОбъект, Перечисления.ТипыЗаписейПриложенныхКартинок.КартинкаДляСайта, ИмяФайла, СтрЗаменить(СтрокаКартинка.Расширение, ".", "")));
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если ЭтотОбъект.Картинки.Количество() > 0 Тогда
		СтрокаОсновная = ЭтотОбъект.Картинки.Найти(Истина, "ЭтоОсновноеИзображение");
		Если СтрокаОсновная = Неопределено Тогда
			ЭтотОбъект.Картинки[0].ЭтоОсновноеИзображение = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	КаталогКЗаписиФайлов = Константы.КаталогХраненияФайлов.Получить();
	Если ЗначениеЗаполнено(КаталогКЗаписиФайлов) Тогда
		Если Прав(КаталогКЗаписиФайлов, 1) <> "\" Тогда
			КаталогКЗаписиФайлов = КаталогКЗаписиФайлов + "\";
		КонецЕсли;	
		Для Каждого СтрокаФайл Из ЭтотОбъект.Файлы Цикл
			Если СтрокаФайл.ВнесеныИзменения Тогда
				ИмяФайла = Строка(СсылкаОбъект.УникальныйИдентификатор()) + "_" + Строка(СтрокаФайл.КлючСтроки) +
							?(Лев(СтрокаФайл.Расширение, 1) = ".", "", ".") + СтрокаФайл.Расширение;
				СтрокаФайл.ХранилищеКЗаписи.Получить().Записать(КаталогКЗаписиФайлов + ИмяФайла);
				СтрокаФайл.ХранилищеКЗаписи = Неопределено;
				СтрокаФайл.ВнесеныИзменения = Ложь;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если НЕ ОбменДанными.Загрузка
			И НЕ ЭтотОбъект.ЭтоНовый() Тогда
		Если ЭтотОбъект.Ссылка.НеВедетсяУчетПоХарактеристикам = Ложь
				И ЭтотОбъект.НеВедетсяУчетПоХарактеристикам Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Период"		, ДобавитьМесяц(ТекущаяДата(), -12));
			Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект.Ссылка);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ТоварыНаСкладах.Регистратор
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
			|ГДЕ
			|	ТоварыНаСкладах.Номенклатура = &Номенклатура
			|	И ТоварыНаСкладах.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|	И ТоварыНаСкладах.Период >= &Период";
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя снять признак учета у номенклатуры, у которой есть движения с характеристиками",,,, Отказ);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	
	Если НЕ ЭтоНовый()
			И НеЛогироватьСменуАктивности = Ложь Тогда
		Если НЕ ЭтотОбъект.Выведена = ЭтотОбъект.Ссылка.Выведена Тогда
			Запись = РегистрыСведений.ЛогированиеСменыСтатусовАктивности.СоздатьМенеджерЗаписи();
			Запись.Период 		= ТекущаяДата();
			Запись.Объект 		= ЭтотОбъект.Ссылка;
			Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Запись.Комментарий 	= "Смена статуса номенклатуры в элементе справочника пользователем. Установлено значение Выведена: " + Формат(Выведена, "БЛ=Нет; БИ=Да");
			Запись.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоГруппа
			И ЭтотОбъект.Выведена Тогда
		ЭтотОбъект.ВыгружатьНаСайт = Ложь;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики,
		|	ХарактеристикиНоменклатуры.Статус,
		|	ХарактеристикиНоменклатуры.ДатаВывода,
		|	ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата,
		|	ХарактеристикиНоменклатуры.Причина
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ХарОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ХарОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
			ХарОбъект.Записать();
			
			Запись = РегистрыСведений.ЛогированиеСменыСтатусовАктивности.СоздатьМенеджерЗаписи();
			Запись.Период 		= ТекущаяДата();
			Запись.Объект 		= Выборка.Ссылка;
			Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Запись.Комментарий 	= "Установлен признак Выведена у номенклатуры. Статус изменен на Неактивна";
			//+++АК BELN 2017.12.09 
			Запись.Комментарий=Запись.Комментарий+" Причина "+Выборка.Причина+" Статус "+Строка(Выборка.Статус)+" Дата вывода/приостановки "+Строка(Формат(Выборка.ДатаВывода,"ДФ=dd.MM.yy"))+" Дата ожидаемого возврата "+Строка(Формат(Выборка.ДатаОжидаемогоВозврата,"ДФ=dd.MM.yy"));
			//---АК BELN 2017.12.09 
			Запись.Статус 		= Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
			Запись.Записать();
		КонецЦикла;	
	КонецЕсли;	
	
	//+++ AK obue 20160325
	АК_ИзменениеРегистраСверкиДекларацииИЭтикеток();	
	//--- AK
	
	мРегистрироватьИзменениеСтавкиНДС = (НЕ ЭтотОбъект.ЭтоГруппа)
											И (НЕ ЭтотОбъект.СтавкаНДС = ЭтотОбъект.Ссылка.СтавкаНДС);
											
	Если ЭтотОбъект.ЭтоНовый()
			И НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетСоздаватьНовуюНоменклатуру, Ложь)
			И НЕ (УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныеПраваПоРекламнымМатериалам, Ложь)
					И ЭтотОбъект.РекламныйМатериал) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У вас нет прав создавать новые элементы номенклатуры",,,, Отказ);
	Иначе
		Если ЭтотОбъект.Ссылка.Родитель <> ЭтотОбъект.Родитель
				И НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетМенятьРодителяНоменклатуры, Ложь)
				И НЕ (УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныеПраваПоРекламнымМатериалам, Ложь)
						И ЭтотОбъект.РекламныйМатериал) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У вас нет прав переносить элементы между группами",,,, Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	//mind
	Если НЕ ЭтоГруппа Тогда
		Если ВыгружатьНаСайт
			И НЕ ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана группа для сайта",,,, Отказ);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//+++АК KIRN 2018.03.05 ИП-00018083
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	//---АК KIRN 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// проверка, чтобы товары были всегда на третьем уровне иерархии
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.Родитель.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ Номенклатура.Родитель.Родитель.Родитель ЕСТЬ NULL )
		|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
		|	И НЕ Номенклатура.ТипТовара В (ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка), ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Сырье))
		|	И Номенклатура.Ссылка = &Ссылка";
					   
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Товар должен располагаться обязательно на третьем уровне иерархии",,,, Отказ);
		КонецЕсли;	
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.Родитель.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ Номенклатура.Родитель.Родитель.Родитель ЕСТЬ NULL )
		|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
		|	И НЕ Номенклатура.ТипТовара В (ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка), ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Сырье))
		|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)";
					   
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Товары, входящие в группу, должны располагаться обязательно на третьем уровне иерархии",,,, Отказ);
		КонецЕсли;	                                                                          
	КонецЕсли;
	
	// проверка, чтобы в группе для товаров не было "не товаров"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА Номенклатура.Ссылка
	|		КОГДА Номенклатура.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА Номенклатура.Родитель
	|		КОГДА Номенклатура.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА Номенклатура.Родитель.Родитель
	|		КОГДА Номенклатура.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА Номенклатура.Родитель.Родитель.Родитель
	|	КОНЕЦ КАК ВерхнийУровень
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерхнийУровень = Выборка.ВерхнийУровень;
		Если ВерхнийУровень.ЭтоТоварнаяПапка Тогда
			Запрос.УстановитьПараметр("Ссылка", ВерхнийУровень);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
			|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)";
			Выборка	= Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В группе " + ВерхнийУровень + " не может располагаться " + Выборка.Ссылка +
																	", так как это не товар",,,, Отказ);
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	
	
	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		//Если НЕ Отказ Тогда
		//	Если ЭтотОбъект.ВыгружатьНаСайт Тогда
		//		МенеджерЗаписи = РегистрыСведений.НоменклатураВыгруженнаяНаСайт.СоздатьМенеджерЗаписи();
		//		МенеджерЗаписи.Номенклатура = ЭтотОбъект.Ссылка;
		//		МенеджерЗаписи.Записать();
		//	КонецЕсли;	
		//КонецЕсли;
		МенеджерЗаписиУИН = РегистрыСведений.УИНыДляВьюшки.СоздатьМенеджерЗаписи();
		МенеджерЗаписиУИН.Ссылка 	= ЭтотОбъект.Ссылка;
		МенеджерЗаписиУИН.id 		= ЭтотОбъект.id_tov;
		МенеджерЗаписиУИН.УИН 		= Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор());
		МенеджерЗаписиУИН.ТипЗаписи = 0;
		МенеджерЗаписиУИН.Записать();
	КонецЕсли;
	
	//+++АК РОЛИ ОТВЕТСТВЕННЫХ
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		
		//
		РольПоУмолчанию = ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер.РольПоУмолчанию;
		Если ЗначениеЗаполнено(РольПоУмолчанию) Тогда
			
			//
			МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			
			МЗ.Период 			= ТекущаяДата();
			МЗ.Объект 			= ЭтотОбъект.Ссылка;
			МЗ.ТипРоли 			= ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер;
			
			МЗ.РольПользователя = РольПоУмолчанию;
			
			МЗ.ТипРолиID 		= МЗ.ТипРоли.Код;
			
			МЗ.Записать();
		
		КонецЕсли; 
	
	КонецЕсли; 
	//---АК
	
	//+++shar
	// Регистрация изменений в плане обмена "Мобильное приложение"
	Попытка
		
		МассивУзлов = Новый Массив;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МобильноеПриложение.Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	МобильноеПриложение.Ссылка <> &ЭтотУзел
		|	И МобильноеПриложение.Профиль <> ЗНАЧЕНИЕ(Справочник.МП_ПрофилиИспользования.Строитель)";
		МассивУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если ЭтоГруппа Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ЭтотОбъект.Ссылка);
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект.Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтриховыеКоды.Номенклатура
			|ИЗ
			|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
			|ГДЕ
			|	ШтриховыеКоды.Номенклатура = &Номенклатура
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НумераторШтрихКодовКоробок.Номенклатура
			|ИЗ
			|	РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
			|ГДЕ
			|	НумераторШтрихКодовКоробок.Номенклатура = &Номенклатура";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ЭтотОбъект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	//---shar
	
	// Регистрация изменений в плане обмена "Обмен с БП"
	Если мРегистрироватьИзменениеСтавкиНДС = Истина Тогда
		Попытка
			мУзелОбмена = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");
			ПланыОбмена.ЗарегистрироватьИзменения(мУзелОбмена, ЭтотОбъект.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	//
	НаборЗаписей = РегистрыСведений.ПрикрепленныеФотоКОбъектам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.ТипЗаписи.Установить(Перечисления.ТипыЗаписейПриложенныхКартинок.МакетЭтикетки);
	Для Каждого СтрокаМакетЭтикетки Из Этикетки Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Номенклатура 			= ЭтотОбъект.Ссылка;
		Запись.Характеристика 			= СтрокаМакетЭтикетки.Характеристика;
		Запись.ТипЗаписи 				= Перечисления.ТипыЗаписейПриложенныхКартинок.МакетЭтикетки;
		Запись.ОтносительноеИмяФайла 	= СтрокаМакетЭтикетки.ИмяФайла;
		Запись.УинЗаписи 				= Строка(Новый УникальныйИдентификатор());
		Запись.ДатаДобавления 			= ТекущаяДата();
	КонецЦикла;	
	НаборЗаписей.Записать();
	
	//++ luza 06.10.2017 ИП-00015865	
	ТЗФайлов = ЭтотОбъект.Этикетки.Выгрузить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗФайлов.Файл,
	|	ТЗФайлов.Характеристика
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗФайлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.Файл,
	|	ВТ_ТЗ.Характеристика
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|		ПО ВТ_ТЗ.Файл = АК_ОчередьРаспознаванияФайлов.Файл
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.Файл ЕСТЬ NULL
	|	И НЕ ВТ_ТЗ.Файл.Ссылка ЕСТЬ NULL
	|	И НЕ ВТ_ТЗ.Характеристика.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗФайлов);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Если ЗначениеЗаполнено(Стр.Файл) = Истина И ЗначениеЗаполнено(Стр.Характеристика) Тогда
			Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
			Запись.Файл = Стр.Файл;
			Запись.ОбъектСравнения = Стр.Характеристика;
			Запись.РаспознаватьЧерезGoogleCloudVision = Истина;
			Запись.ПоворачиватьИзображение = Истина;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;	
	//-- luza 06.10.2017 ИП-00015865
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.06 ИП-00019275
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЭтоНовый() Тогда
		
		//получаю по ссылке старые значения вида, типа.
		СоответствиеНоменклатураЗначРекв = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "ВидНоменклатуры,ТипТовара,ВидМатериала");
		
		СтарыйВидНоменклатуры = СоответствиеНоменклатураЗначРекв.ВидНоменклатуры;       
		СтарыйТипНоменклатуры = СоответствиеНоменклатураЗначРекв.ТипТовара;
		
		//изменился вид или тип?
		ИзмененВидНоменклатуры = ВидНоменклатуры <> СтарыйВидНоменклатуры;
		ИзмененТипНоменклатуры = ТипТовара <> СтарыйТипНоменклатуры;
		
		Если ИзмененВидНоменклатуры Тогда
			ПроверитьОстаткиНаСчетеНоменклатуры(Отказ, ИзмененВидНоменклатуры);
		ИначеЕсли ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар И ИзмененТипНоменклатуры Тогда
			ПроверитьОстаткиНаСчетеНоменклатуры(Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.06 ИП-00019275
Процедура ПроверитьОстаткиНаСчетеНоменклатуры(Отказ, ИзмененВидНоменклатуры = Ложь)
	
	//Получим остатки, на каких счетах фигурирует номенклатура. До этого получим где должна стоять номенклатура по старым 
	//значениям реквизитов. Если есть остатки на тех счетах, значит нельзя менять вид или тип.
	СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(Ссылка);
	
	//т.к. процедура получения счетов универсальная и отталкивается от реквизитов ссылки, немного подгоняю исходные данные
	//для получения счета учета текущего объекта, а не его ссылки.
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(Ссылка);
	
	СоответствиеЗначРеквСтало = Новый Структура;
	СоответствиеЗначРеквСтало.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	СоответствиеЗначРеквСтало.Вставить("ТипТовара", ТипТовара);
	СоответствиеЗначРеквСтало.Вставить("ВидМатериала", ВидМатериала);	
	ЗначРекв = Новый Соответствие;
	ЗначРекв.Вставить(Ссылка, СоответствиеЗначРеквСтало);
	СтруктураСчетаУчетаСтало = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(СписокНоменклатуры, , ЗначРекв);
	СчетаУчетаСтало = СтруктураСчетаУчетаСтало.Получить(Ссылка);
	
	//Если при изменении реквизитов счет учета не сменился, то тогда и проверять нечего.
	Если СчетаУчета.СчетУчета = СчетаУчетаСтало.СчетУчета Тогда		
		Возврат;
	КонецЕсли;                                         
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.Счет,
	               |	ФинансовыйОстатки.Субконто1 КАК Номенклатура,
	               |	ФинансовыйОстатки.СуммаОстаток,
	               |	ФинансовыйОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(, Счет = &СчетНоменклатуры, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Материалы), Субконто1 = &Номенклатура) КАК ФинансовыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ФинансовыйОстатки.Счет,
	               |	ФинансовыйОстатки.Субконто1,
	               |	ФинансовыйОстатки.СуммаОстаток,
	               |	ФинансовыйОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(, Счет = &СчетНоменклатуры, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Товары), Субконто1 = &Номенклатура) КАК ФинансовыйОстатки";
	
	ПроверяемыйСчетУчета = СчетаУчета.СчетУчета; 
	
	Запрос.УстановитьПараметр("СчетНоменклатуры", ПроверяемыйСчетУчета);
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У номенклатуры есть остатки на счете """ + Строка(ПроверяемыйСчетУчета) + """. Изменение " + ?(ИзмененВидНоменклатуры, "вида номенклатуры", "типа товара") + " - невозможно!", Отказ);
	КонецЕсли;	
	
КонецПроцедуры


НеЛогироватьСменуАктивности = Ложь;
