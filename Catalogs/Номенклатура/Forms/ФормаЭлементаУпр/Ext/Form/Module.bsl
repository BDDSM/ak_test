Функция ПолучитьЦенуНаДату(спрНоменклатура, Дата = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", спрНоменклатура);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ТекДата,
	|			ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ПроставитьЦенуСоСкидкойПоАкции()
	
	ТабАкции = Объект.Акции.Выгрузить();
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабАкции);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Товар", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ТипСкидки,
	               |	Таб.ДействуетЦена_Скидка
	               |ПОМЕСТИТЬ ВТ_Таб
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Таб.ТипСкидки,
	               |	ВТ_Таб.ДействуетЦена_Скидка,
	               |	ВЫБОР
	               |		КОГДА ВТ_Таб.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте)
	               |			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена - ВТ_Таб.ДействуетЦена_Скидка * ЦеныНоменклатурыСрезПоследних.Цена / 100 КАК ЧИСЛО(15, 0)), 0)
	               |		ИНАЧЕ ВТ_Таб.ДействуетЦена_Скидка
	               |	КОНЕЦ КАК Цена
	               |ИЗ
	               |	ВТ_Таб КАК ВТ_Таб
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ТекущаяДата,
	               |				Номенклатура = &Товар
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО (ИСТИНА)";
				   
	//ТабЦены = Запрос.Выполнить().Выгрузить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
	//Для Каждого СтрокаЦена Из ТабЦены Цикл
		СтрокиНаФорме = Объект.Акции.НайтиСтроки(Новый Структура("ТипСкидки, ДействуетЦена_Скидка", Выборка.ТипСкидки, Выборка.ДействуетЦена_Скидка));
		Для Каждого СтрокаНаФорме Из СтрокиНаФорме Цикл
			СтрокаНаФорме.ЦенаСоСкидкой = Выборка.Цена;
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметраКомпоновкиДанных(Знач ВладелецПараметров, Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Для каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			Если Параметр.Использование И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПолноеИмяФайла(НомерСтроки)
	
	Об = РеквизитФормыВЗначение("Объект");
	ТекСтрока = Об.Файлы.Получить(НомерСтроки - 1);
	КаталогКЗаписи = Константы.КаталогХраненияФайлов.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	
	
	ИмяФайла = КаталогКЗаписи + Строка(Об.Ссылка.УникальныйИдентификатор()) + "_" + Строка(ТекСтрока.КлючСтроки) + ?(Лев(ТекСтрока.Расширение, 1) = ".", "", ".") + ТекСтрока.Расширение;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Процедура УстановитьОтбор()
	
	Производители.Параметры.УстановитьЗначениеПараметра("ТекущийЭлемент", Объект.Ссылка);
		
КонецПроцедуры

Процедура УстановитьАналог()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АналогиНоменклатурыТовары.Ссылка
	|ИЗ
	|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|ГДЕ
	|	АналогиНоменклатурыТовары.Номенклатура = &Номенклатура
	|	И НЕ АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭтаФорма.Аналог = Выборка.Ссылка;
	Иначе
		ЭтаФорма.Аналог = Справочники.АналогиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборАналоги()
	
	мПараметры = ЭтаФорма.АналогиТовара.Параметры;
	мПараметры.УстановитьЗначениеПараметра("Аналог"			, ЭтаФорма.Аналог);
	мПараметры.УстановитьЗначениеПараметра("ТекущийЭлемент"	, Объект.Ссылка);
		
КонецПроцедуры

Процедура УстановитьОтборОбращенияПокупателейНаСервере()
	
	ОбращенияПокупателей.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	
	Возврат;
	
	ЭлементОтбора = ЭтаФорма.ОбращенияПокупателей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАналоги()
	
	УстановитьАналог();
	УстановитьОтборАналоги();
	
КонецПроцедуры

Процедура УстановитьВидимостьНастроекУчета()

	Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		
		Элементы.ГруппаПараметрыУчета.Видимость = Истина;
		Элементы.ГруппаМатериал.Видимость 		= Истина;
	   	Элементы.ГруппаОборудование.Видимость 	= Ложь;
		
	ИначеЕсли  Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		
		Элементы.ГруппаПараметрыУчета.Видимость = Истина;
		Элементы.ГруппаМатериал.Видимость 		= Ложь;
	   	Элементы.ГруппаОборудование.Видимость 	= Истина;
		
	Иначе 
		Элементы.ГруппаПараметрыУчета.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.ГруппаПараметрыУчета.Видимость Тогда
		СчетУчетаОС = АК_ОсновныеСредства.ПолучитьОсновнойСчетУчета(Объект.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры



Процедура ПоменятьПроизводителяСервер(МассивСтрокТочек, ВыбХарактеристика)
	
	мСписокТочек = Новый СписокЗначений;
	Для каждого ВыделеннаяСтрока Из МассивСтрокТочек Цикл
		мСписокТочек.Добавить(ВыделеннаяСтрока.ТорговаяТочка);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ТорговаяТочка");
	
	// уже существующий ассортимент точки
	Запрос = Новый Запрос;			 
	Запрос.УстановитьПараметр("Период"				, ЭтаФорма.ДатаУстановкиИзменений);
	Запрос.УстановитьПараметр("ТекущаяНоменклатура"	, Объект.Ссылка);
	Запрос.УстановитьПараметр("СписокТочек"			, мСписокТочек);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	ТоварныйАссортиментТочек.Период = &Период
	|	И ТоварныйАссортиментТочек.ТорговаяТочка В(&СписокТочек)
	|	И ТоварныйАссортиментТочек.Номенклатура = &ТекущаяНоменклатура";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	//
	НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Для каждого ВыделеннаяСтрока Из МассивСтрокТочек Цикл
		
		СтруктураОтбора.ТорговаяТочка = ВыделеннаяСтрока.ТорговаяТочка;
		НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбщегоНазначения.Сообщение("Для позиции " + СокрЛП(ВыделеннаяСтрока.ТорговаяТочка) +
										" уже есть запись в ассортименте этой номенклатуры на " + ЭтаФорма.ДатаУстановкиИзменений +
										". Производителя нельзя изменить этой датой.", Перечисления.ВидыСообщений.ВажнаяИнформация,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		// добавление в регистр сведений "ТоварныйАссортиментТочек" записи с (Выведена = Истина)
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность		= Истина;
		НоваяЗапись.Выведена		= Ложь;
		НоваяЗапись.Номенклатура	= Объект.Ссылка;
		НоваяЗапись.Период			= ЭтаФорма.ДатаУстановкиИзменений;
		НоваяЗапись.ТорговаяТочка	= ВыделеннаяСтрока.ТорговаяТочка;
		НоваяЗапись.Характеристика	= ВыбХарактеристика;
				
	КонецЦикла;	
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьПроизводителя(Команда)
	
	ВыбНоменклатура = Объект.Ссылка;
		
	// выбор характеристики
	ПараметрыОткрытияФормыВыбора = Новый Структура;
    ПараметрыОткрытияФормыВыбора.Вставить("Отбор", Новый Структура("Владелец, Неактивная", ВыбНоменклатура, Ложь));
	ФормаВыбора = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыОткрытияФормыВыбора, ЭтаФорма);
	ВыбХарактеристика = ФормаВыбора.ОткрытьМодально();
	Если ВыбХарактеристика = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Установить для выбранных точек с " + Формат(ЭтаФорма.ДатаУстановкиИзменений, "ДЛФ=Д") + " производителя "+ ВыбХарактеристика +" ?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	ТЗ = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Производители.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Производители.ДанныеСтроки(ВыделеннаяСтрока);
				
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ТорговаяТочка"	, ТекДанные.ТорговаяТочка);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		ТЗ.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПоменятьПроизводителяСервер(ТЗ, ВыбХарактеристика);
	
	Элементы.Производители.Обновить();
	
КонецПроцедуры

Процедура УстановитьАвтоотметкуНезаполненногоУРЗ()
	
	мУстанавливать = (Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
							ИЛИ Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал)
						И НЕ Объект.Выведена
						И НЕ Объект.ПометкаУдаления;
	
	Элементы.ГруппаНоменклатурыУРЗ.АвтоОтметкаНезаполненного 	= мУстанавливать;
	Элементы.ГруппаНоменклатурыУРЗ.АвтоВыборНезаполненного 		= мУстанавливать;
	
КонецПроцедуры


&НаСервере
Процедура ОтрегулироватьФормуПоПравамСервер()
	
	ПолныеПраваНаРеквизиты = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныеПраваНаРедактированиеТовары, Ложь);
	Если Объект.РекламныйМатериал
			И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныеПраваПоРекламнымМатериалам, Ложь) Тогда
		ПолныеПраваНаРеквизиты = Истина;
	КонецЕсли;	
	Элементы.СтавкаНДС.Доступность = ПолныеПраваНаРеквизиты
										И Элементы.СтавкаНДС.Доступность;
	Если УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныеПраваПоРекламнымМатериалам, Ложь) Тогда
		Элементы.РекламныйМатериал.Доступность = Ложь;
	КонецЕсли;
	
	Если ПолныеПраваНаРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	Если (РольДоступна("Финансист")
				ИЛИ РольДоступна("Помощник"))
			И Объект.Родитель.РазрешеноРедактированиеБезКонтроляПрав Тогда
		Элементы.СтавкаНДС.Доступность = Истина;
		Возврат;
	КонецЕсли;	
	
	РедактированиеОсновныхРеквизитов = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьОсновныеРеквизитыТовары, Ложь);
	
	МассивИменаРеквизитов = Новый Массив;
	МассивИменаРеквизитов.Добавить("Наименование");
	МассивИменаРеквизитов.Добавить("Код");
	МассивИменаРеквизитов.Добавить("НаименованиеПолное");
	МассивИменаРеквизитов.Добавить("Родитель");
	МассивИменаРеквизитов.Добавить("ВосстановитьПредыдущуюГруппы");
	МассивИменаРеквизитов.Добавить("Артикул");
	МассивИменаРеквизитов.Добавить("ТипТовара");
	МассивИменаРеквизитов.Добавить("БазоваяЕдиницаИзмерения");
	МассивИменаРеквизитов.Добавить("ЕдиницаХраненияОстатков");
	МассивИменаРеквизитов.Добавить("Цена");
	МассивИменаРеквизитов.Добавить("КоэффициентыЗаказа");
	МассивИменаРеквизитов.Добавить("НаименованиеДляСМС");
	МассивИменаРеквизитов.Добавить("ВидТовара");
	МассивИменаРеквизитов.Добавить("КороткийСрокГодности");
	МассивИменаРеквизитов.Добавить("БезОстатков");
	МассивИменаРеквизитов.Добавить("Весовой");
	МассивИменаРеквизитов.Добавить("СлужебныйТовар");
	МассивИменаРеквизитов.Добавить("ТребуетсяНаличиеСертификата");
	МассивИменаРеквизитов.Добавить("КатегорияАссортимента");
	МассивИменаРеквизитов.Добавить("НеВедетсяУчетПоХарактеристикам");
	МассивИменаРеквизитов.Добавить("БезУпаковки");
	МассивИменаРеквизитов.Добавить("ХозТовар");
	МассивИменаРеквизитов.Добавить("ИспользуетсяНаНуждыМагазина");
	МассивИменаРеквизитов.Добавить("Складируемая");
	МассивИменаРеквизитов.Добавить("Фасуется");
	МассивИменаРеквизитов.Добавить("ВидСкладируемости");
	МассивИменаРеквизитов.Добавить("РекламныйМатериал");
	МассивИменаРеквизитов.Добавить("Выведена");
	МассивИменаРеквизитов.Добавить("ЭтоКомплект");
	МассивИменаРеквизитов.Добавить("ТребуетсяВетеринарныйСертификат");
	МассивИменаРеквизитов.Добавить("ЗаказДляПриходаНеобязателен");
	МассивИменаРеквизитов.Добавить("ФормироватьПлатежкуСразу");
	МассивИменаРеквизитов.Добавить("РаспределяетсяНеЦелымиКоробками");
	МассивИменаРеквизитов.Добавить("ЕИ");
	МассивИменаРеквизитов.Добавить("АналогиТовара");
	МассивИменаРеквизитов.Добавить("КнопкаСоздатьАналог");
	МассивИменаРеквизитов.Добавить("КнопкаУдалитьАналог");
	//МассивИменаРеквизитов.Добавить("КраткоеОписание");
	Для Каждого ЭлементРеквизит Из МассивИменаРеквизитов Цикл
		Элементы[ЭлементРеквизит].Доступность 			= РедактированиеОсновныхРеквизитов И Элементы[ЭлементРеквизит].Доступность;
	КонецЦикла;
	
	
	МассивИменаРеквизитов = Новый Массив;
	МассивИменаРеквизитов.Добавить("Характеристики");
	Для Каждого ЭлементРеквизит Из МассивИменаРеквизитов Цикл
		Элементы[ЭлементРеквизит].ТолькоПросмотр 		= (НЕ РедактированиеОсновныхРеквизитов) ИЛИ Элементы[ЭлементРеквизит].ТолькоПросмотр;
	КонецЦикла;
	
	//+++АК KIRN 2018.06.21 ИП-00018771.000.00000002 
	Если Объект.ТорговаяМарка = Справочники.ТорговыеМарки.ЗеленаяЛиния Тогда
		РедактированиеСертификатов = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьСертификатыТоваров		, Ложь) ИЛИ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьСертификатыТоваровЗЛ, Ложь);
	Иначе
		РедактированиеСертификатов = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьСертификатыТоваров		, Ложь);
	КонецеСли;
	//РедактированиеСертификатов = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьСертификатыТоваров		, Ложь);
	//---АК KIRN 
		
	МассивИменаРеквизитов = Новый Массив;
	МассивИменаРеквизитов.Добавить("СертификатыПродукции");
	Для Каждого ЭлементРеквизит Из МассивИменаРеквизитов Цикл
		Элементы[ЭлементРеквизит].ТолькоПросмотр 		= (НЕ РедактированиеСертификатов) ИЛИ Элементы[ЭлементРеквизит].ТолькоПросмотр;
	КонецЦикла;
	
	РедактированиеРеквизитовСайта = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьДанныеДляСайтаТовары		, Ложь);
	
	МассивИменаРеквизитов = Новый Массив;
	МассивИменаРеквизитов.Добавить("ВыгружатьНаСайт");
	МассивИменаРеквизитов.Добавить("БаннерНаГлавную");
	МассивИменаРеквизитов.Добавить("ГруппаНоменклатуры");
	МассивИменаРеквизитов.Добавить("МассаУпаковки");
	МассивИменаРеквизитов.Добавить("ЕдиницаИзмеренияДляСайта");
	МассивИменаРеквизитов.Добавить("ОднаУпаковкаСодержит");
	МассивИменаРеквизитов.Добавить("ПищеваяЦенность");
	//МассивИменаРеквизитов.Добавить("СоставHtml");
	МассивИменаРеквизитов.Добавить("Состав");
	МассивИменаРеквизитов.Добавить("СрокГодности");
	МассивИменаРеквизитов.Добавить("ОписаниеHtml");
	МассивИменаРеквизитов.Добавить("ТехнологияПроизводства");
	МассивИменаРеквизитов.Добавить("Рецепт");
	МассивИменаРеквизитов.Добавить("Картинки");
	Для Каждого ЭлементРеквизит Из МассивИменаРеквизитов Цикл
		Элементы[ЭлементРеквизит].Доступность 			= РедактированиеРеквизитовСайта И Элементы[ЭлементРеквизит].Доступность;
	КонецЦикла;
	
	РедактированиеДопДанных = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьДополнительныеДанныеТовары		, Ложь);
	МассивИменаРеквизитов = Новый Массив();
	
	//+++АК mika 2018.02.13 ИП-00016863.02
	МассивИменаРеквизитов.Добавить("ОсновнаяНоменклатура");  
	МассивИменаРеквизитов.Добавить("ТорговаяМарка");
	//---АК mika 2018.02.13 ИП-00016863.02
	
	МассивИменаРеквизитов.Добавить("ГруппаНоменклатурыУРЗ");
	МассивИменаРеквизитов.Добавить("РольОтветственныхЗаТовар");
	МассивИменаРеквизитов.Добавить("НомерДляСМС");
	МассивИменаРеквизитов.Добавить("ГруппаДоставкиНаТТ");
	МассивИменаРеквизитов.Добавить("Порядок");
	МассивИменаРеквизитов.Добавить("МинимальныйОстаток");
	МассивИменаРеквизитов.Добавить("Фронтол_БыстрыйВыбор");
	//МассивИменаРеквизитов.Добавить("ВесИГабаритыУпаковки");
	МассивИменаРеквизитов.Добавить("Фишка");
	МассивИменаРеквизитов.Добавить("ПозицияРазделителяДляЦенника");
	Для Каждого ЭлементРеквизит Из МассивИменаРеквизитов Цикл
		Элементы[ЭлементРеквизит].Доступность 			= РедактированиеДопДанных И Элементы[ЭлементРеквизит].Доступность;
	КонецЦикла;
	
	Элементы["ВесИГабаритыУпаковки"].Доступность 		= (РедактированиеДопДанных И Элементы[ЭлементРеквизит].Доступность ИЛИ РольДоступна("ОператорСклада"));
	
	РедактированиеУсловийСпецАссортимента = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьУсловияСпецАссортимента		, Ложь);
	МассивИменаРеквизитов = Новый Массив();
	МассивИменаРеквизитов.Добавить("ОбязателенВАссортиментеМагазиновС");
	МассивИменаРеквизитов.Добавить("ОбязателенВАссортиментеМагазиновПо");
	МассивИменаРеквизитов.Добавить("СпецАссортиментМожноВывестиСМагазинов");
	Для Каждого ЭлементРеквизит Из МассивИменаРеквизитов Цикл
		Элементы[ЭлементРеквизит].Доступность 			= РедактированиеУсловийСпецАссортимента И Элементы[ЭлементРеквизит].Доступность;
	КонецЦикла;
	
	РедактированиеЭтикеток = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьЭтикеткиНоменклатуры		, Ложь);
	МассивИменаРеквизитов = Новый Массив();
	МассивИменаРеквизитов.Добавить("Этикетки");
	Для Каждого ЭлементРеквизит Из МассивИменаРеквизитов Цикл
		Элементы[ЭлементРеквизит].ТолькоПросмотр 		= НЕ (РедактированиеЭтикеток И НЕ Элементы[ЭлементРеквизит].ТолькоПросмотр);
	КонецЦикла;
	//+++АК BARA 2017.12.19    17379
	Если РедактированиеЭтикеток = Ложь и РольДоступна("УправлениеГруппамиНоменклатурыДляСайта") Тогда
		Элементы.Этикетки.ТолькоПросмотр = Ложь;
		Элементы.ЭтикеткиНомерСтроки.ТолькоПросмотр = Истина;
		Элементы.ЭтикеткиНомерСтрокиКонтекстноеМеню.Доступность = Ложь;
		Элементы.ЭтикеткиХарактеристика.ТолькоПросмотр = Истина;
		Элементы.ЭтикеткиДатаИзменения.ТолькоПросмотр = Истина;	
		Элементы.ЭтикеткиКомментарий.ТолькоПросмотр = Истина;
		Элементы.ЭтикеткиИмяФайла.ТолькоПросмотр = Истина;
		//Элементы.ЭтикеткиКоманднаяПанель.ТолькоПросмотр = Истина;
		//Элементы.ЭтикеткиКоманднаяПанель.Доступность = Ложь;
		Элементы.ЭтикеткиФайл.ТолькоПросмотр = Истина;		

	КонецЕсли;
	//---АК BARA 2017.12.19    17379
	
	
	Элементы.Акции.Доступность = Элементы.Акции.Доступность И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьАкцииНаТовары, Ложь); 
	Элементы.УсловияДляПодарка.Доступность = Элементы.УсловияДляПодарка.Доступность И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьАкцииНаТовары, Ложь); 
	Элементы.Выведена.ТолькоПросмотр = НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРегулироватьГалочкуВыведенаТовара, Ложь);
	
	//++ХЖК
	Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ДоступенРеквизитТребуетсяВетеринарныйСертификат, Ложь) Тогда 
		Элементы.ТребуетсяВетеринарныйСертификат.Доступность = Ложь;
	КонецЕсли;
	//--ХЖК
	
КонецПроцедуры	

//+++АК KIRN 2018.03.05 ИП-00018058
&НаСервере
Процедура ЗаполнитьПланограммы()
	ТаблицаПланограммы.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТорговаяМарка", Объект.ТорговаяМарка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Планограммы.Ссылка КАК Планограмма,
	|	ВЗ_Выкладка.МестоВыкладки КАК МестоВыкладки,
	|	ВЗ_Выкладка.ТоварВыведен
	|ИЗ
	|	Справочник.Планограммы КАК Планограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыкладкаПланограммы КАК ВЗ_Выкладка
	|		ПО Планограммы.Ссылка = ВЗ_Выкладка.Планограмма
	|			И (ВЗ_Выкладка.Номенклатура = &Номенклатура)
	|			//И (ВЗ_Выкладка.Планограмма.ТорговаяМарка = &ТорговаяМарка)
	|ГДЕ
	|	НЕ Планограммы.НеАктуальная
	|	И Планограммы.ТорговаяМарка = &ТорговаяМарка";
				   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПланограммы.Добавить(), Выборка);
	КонецЦикла;
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаСервере
Процедура СформироватьСтраницыФишкаРазвёрнуто()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры,
		|	ХарактеристикиНоменклатуры.Представление КАК Представление,
		|	ХарактеристикиНоменклатуры.ФишкаРазвёрнуто,
		|	ЛОЖЬ КАК Модифицированность
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ");
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		//
		Если ФишкиРазвёрнутоХарактеристик.НайтиСтроки(Новый Структура("ХарактеристикаНоменклатуры", ВыборкаЗапроса.ХарактеристикаНоменклатуры)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрокаТЗн = ФишкиРазвёрнутоХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗн, ВыборкаЗапроса);
		ИмяСтраницыФишкиРазвёрнуто = СтрЗаменить(XMLСтрока(ВыборкаЗапроса.ХарактеристикаНоменклатуры), "-", "_");
		НоваяСтрокаТЗн.ИмяСтраницы = "СтраницаФишкаРазвёрнуто" + ИмяСтраницыФишкиРазвёрнуто;
		НовыйЭлементСтраница = Элементы.Добавить("СтраницаФишкаРазвёрнуто" + ИмяСтраницыФишкиРазвёрнуто, Тип("ГруппаФормы"), Элементы.СтраницыФишкаРазвёрнуто);
		НовыйЭлементСтраница.Вид = ВидГруппыФормы.Страница;
		НовыйЭлементСтраница.Заголовок = ВыборкаЗапроса.Представление;
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ФишкаРазвёрнуто" + ИмяСтраницыФишкиРазвёрнуто, Новый ОписаниеТипов("Строка"), "", "Фишка (развёрнуто)"));
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		ЭтаФорма["ФишкаРазвёрнуто" + ИмяСтраницыФишкиРазвёрнуто] = ВыборкаЗапроса.ФишкаРазвёрнуто;
		
		НовыйЭлементПолеВвода = Элементы.Добавить("ФишкаРазвёрнуто" + ИмяСтраницыФишкиРазвёрнуто, Тип("ПолеФормы"), НовыйЭлементСтраница);
		НовыйЭлементПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлементПолеВвода.ПутьКДанным = "ФишкаРазвёрнуто" + ИмяСтраницыФишкиРазвёрнуто;
		НовыйЭлементПолеВвода.МногострочныйРежим = Истина;
		НовыйЭлементПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ФишкаРазвёрнутоХарактеристикиПриИзменении");
	КонецЦикла;
	
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Процедура Подключаемый_ФишкаРазвёрнутоХарактеристикиПриИзменении(Элемент)
	
	СтраницаФишкиРазвёрнуто = Элементы.Найти("Страница" + Элемент.Имя);
	Если СтраницаФишкиРазвёрнуто <> Неопределено Тогда
		УстановитьМодифицированностьЗаголовка(СтраницаФишкиРазвёрнуто, Истина);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Процедура УстановитьМодифицированностьЗаголовка(Элемент, Модифицированность)
	
	Если Модифицированность И Найти(Элемент.Заголовок, " (*)") = 0 Тогда
		Элемент.Заголовок = Элемент.Заголовок + " (*)";
	ИначеЕсли НЕ Модифицированность И Найти(Элемент.Заголовок, " (*)") > 0 Тогда
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, " (*)", "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Характеристики.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	//Характеристики.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	
	ЭлементОтбора = Характеристики.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = ЕИ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	//??? УстановитьОтборСертификатов(Неопределено);
	
	//СтавкаНДСИзРегистра = ПолучитьСтавкуНДСНаДату(Объект.Ссылка,ТекущаяДата());
	//Если Не ЗначениеЗаполнено(ставкаНДСИзРегистра) тогда
	//	СтавкаНДСИзРегистра = Константы.ОсновнаяСтавкаНДС.Получить();
	//конецесли;
	ЦенаИзРегистра = ПолучитьЦенуНаДату(Объект.Ссылка, ТекущаяДата());
	//Если Объект.Ссылка.Пустая() Тогда
	//	Объект.БазоваяЕдиницаИзмерения = Константы.ЕдиницаШтучногоТовара.Получить();
	//КонецЕсли
	УстановитьОтбор();
	//УстановитьАвтоотметкуНезаполненногоУРЗ();
	
	//
	УстановитьАналоги();
	//УстановитьОтборОбращенияПокупателейНаСервере();
	
	ЭтаФорма.ДатаУстановкиИзменений = ТекущаяДата();
	
	//+++АК KIRN 2018.03.05 ИП-00018058 вынесла в отдельную процедуру, иногда нужно перезаполнить тч
	//+++ZEZA ЗаполнитьПланограммы();
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	//Запрос.УстановитьПараметр("ТорговаяМарка", Объект.ТорговаяМарка);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	Планограммы.Ссылка КАК Планограмма,
	//|	ВЗ_Выкладка.МестоВыкладки КАК МестоВыкладки,
	//|	ВЗ_Выкладка.ТоварВыведен
	//|ИЗ
	//|	Справочник.Планограммы КАК Планограммы
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ВыкладкаПланограммы.Планограмма КАК Планограмма,
	//|			ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки,
	//|			ВыкладкаПланограммы.ТоварВыведен КАК ТоварВыведен
	//|		ИЗ
	//|			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	//|		ГДЕ
	//|			ВыкладкаПланограммы.Номенклатура = &Номенклатура
	//|			И ВыкладкаПланограммы.Планограмма.ТорговаяМарка = &ТорговаяМарка) КАК ВЗ_Выкладка
	//|		ПО Планограммы.Ссылка = ВЗ_Выкладка.Планограмма
	//|ГДЕ
	//|	НЕ Планограммы.НеАктуальная
	//|	И Планограммы.ТорговаяМарка = &ТорговаяМарка";
	//			   
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ЗаполнитьЗначенияСвойств(ТаблицаПланограммы.Добавить(), Выборка);
	//КонецЦикла;
	//---АК KIRN 
	
	РассчитатьОбъемУпаковки();
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.ВидСкладируемости = Перечисления.ВидыСкладируемостиТовара.ПустаяСсылка() Тогда
			Объект.ВидСкладируемости = Перечисления.ВидыСкладируемостиТовара.Нескладируемый;
		КонецЕсли;
		Объект.ТребуетсяНаличиеСертификата = Истина;
		Если УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныеПраваПоРекламнымМатериалам, Ложь) Тогда
			Объект.РекламныйМатериал = Истина;
			//+++АК CISA 2018.10.31 ИП-00020203
			Если Объект.ТорговаяМарка.Пустая() Тогда
				Объект.ТорговаяМарка = Справочники.ТорговыеМарки.ВкусВилл;
			КонецЕсли;
			//---АК CISA
		КонецЕсли;
	КонецЕсли;
	
	//+++АК
	//ЗаполнитьРолиОтветственных();
	//---АК
	
	МожетУдалятьСертификаты = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетУдалятьСертификаты, Ложь);
	
	//+++ZEZA ПроставитьЦенуСоСкидкойПоАкции();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Характеристики.Отбор, "Неактивная", Ложь,,, Истина);
	
	
	
	//+++АК SHEP 20160523
	ДанныеЗаполнения = "";
	Если Параметры.Свойство("Основание", ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПлановыйАссортимент") Тогда
		КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
		Если Прав(КаталогФотографий, 1) <> "\" Тогда
			КаталогФотографий = КаталогФотографий + "\";
		КонецЕсли;
		
		Для Каждого СтрокаФотографии Из ДанныеЗаполнения.Фотографии Цикл
			
			Файл = Новый Файл(КаталогФотографий + СтрокаФотографии.ОтносительноеИмяФайла);
			Если НЕ Файл.Существует() Тогда Продолжить; КонецЕсли;
			
			СтрокаКартинки = Объект.Картинки.Добавить();
			СтрокаКартинки.ИД = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура.Картинки", "ИД") + СтрокаКартинки.НомерСтроки;
			КраткоеИмяФайла = Новый Файл(СтрокаФотографии.ИмяФайла);
			СтрокаКартинки.КраткоеИмяФайла = КраткоеИмяФайла.ИмяБезРасширения;
			СтрокаКартинки.Расширение = Файл.Расширение;
			СтрокаКартинки.ВнесеныИзменения = Истина;
			СтрокаКартинки.КлючСтроки = Строка(Новый УникальныйИдентификатор);
			СтрокаКартинки.Размер = Файл.Размер();
			
			СтрокаИзм = ТаблицаИзмененныхКартинок.Добавить();
			СтрокаИзм.КлючСтроки = СтрокаКартинки.КлючСтроки;
			СтрокаИзм.Картинка = Новый Картинка(Файл.ПолноеИмя);
			
		КонецЦикла;
		
	КонецЕсли;
	//---АК SHEP 20160523
	
	
	
	//+++АК MIND 2018.01.31 перенес в смену страницы для оптимизации открытия
	УстановитьВидимостьНастроекУчета();
	
	ОтрегулироватьФормуПоПравамСервер(); //+++АК MIND 2018.01.31 перенес из При открытии для оптимизации
	
	
	
КонецПроцедуры

//+++АК SHEP 2017.11.27 ИП-00017229
&НаСервереБезКонтекста
Функция КаталогХраненияФайлов(УИД)	
	
	КаталогХраненияФайлов = ОбщегоНазначенияПовтИсп.КаталогХраненияФайловНоменклатуры() + УИД + "\";	
	
	Возврат КаталогХраненияФайлов;
	
КонецФункции

&НаКлиенте
Процедура ОтрегулироватьФормуПоПравам()
	ОтрегулироватьФормуПоПравамСервер();
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		//
		СписокВыбора = ПолучитьСписокПодготовленныхПозиций();
		Если ЗначениеЗаполнено(СписокВыбора) Тогда
			
			//
			ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент();
			Если ВыбранныйЭлемент <> Неопределено Тогда
				Объект.Наименование = ВыбранныйЭлемент.Представление;
				СсылкаНового = ВыбранныйЭлемент.Значение;
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	//
	//ПодключитьОбработчикОжидания("ОтрегулироватьФормуПоПравам", 0.1, Истина);
	
	//
	НаименованиеДляЦенника = Объект.Наименование;  
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "   "	, " ");
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "  "	, " ");
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, " "	, Символы.ПС);
	Элементы.ПозицияРазделителяДляЦенника.МаксимальноеЗначение = СтрЧислоСтрок(НаименованиеДляЦенника);
	
	Элементы.ГруппаСертификаты.Видимость = Объект.ТребуетсяНаличиеСертификата;
	
	//+++АК POZM 2017.12.26 ИП-00017352 
	Элементы.ТипХолодильника.Видимость = Объект.ЭтоХолодильник;
	//---АК POZM 
	//+++АК SaMi 2018.10.17 ИП-00019767^01 
	Элементы.МодельХолодильника.Видимость = Объект.ЭтоХолодильник;
	//---АК SaMi  2018.10.17 
	
	ОбновитьВидимостьТорговойМаркиКлиент(); //+++АК mika 2018.02.13 ИП-00016863.02

	УстановитьОтборСертификатов(Неопределено);
	
	//УстановитьАналоги();
	Элементы.КнопкаСоздатьАналог.Доступность = НЕ ЗначениеЗаполнено(Аналог); //ЭтаФорма.Аналог.Пустая();
	Элементы.КнопкаУдалитьАналог.Доступность = ЗначениеЗаполнено(Аналог);//НЕ ЭтаФорма.Аналог.Пустая();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//+++ZEZA
	Если ЗначениеЗаполнено(СсылкаНового) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли; 
	//---ZEZA
	
	Если НЕ Объект.Выведена
		    И НЕ ЗначениеЗаполнено(Объект.ОсновнаяНоменклатура) //+++АК mika 2018.02.14 ИП-00017931 Убрать контроль для копий номенклатуры (Зеленая линия)
			И Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
			И (Объект.ТипТовара = Перечисления.ТипыТоваров.ПокупнойТовар
				ИЛИ Объект.ТипТовара = Перечисления.ТипыТоваров.Продукция) Тогда
		СтрокаНеЗаполнено = ТаблицаПланограммы.НайтиСтроки(Новый Структура("МестоВыкладки", Справочники.МестаВыкладки.ПустаяСсылка()));
		Если СтрокаНеЗаполнено.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя записать номенклатуру, не привязав места выкладки во все планограммы (закладка Планограммы)",,,, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КатегорияАссортимента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена категория ассортимента",,,, Отказ);
		КонецЕсли;	
	КонецЕсли;
	
	Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		И (НЕ ЗначениеЗаполнено(Объект.СтавкаНДС)
		ИЛИ Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
		ИЛИ Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя заводить товар с такой ставкой НДС",,,, Отказ);
	КонецЕсли;	
	
	Для Каждого СтрокаКартинка Из ТекущийОбъект.Картинки Цикл
		Если СтрокаКартинка.ВнесеныИзменения Тогда
			СтрокиИзм = ТаблицаИзмененныхКартинок.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаКартинка.КлючСтроки));
			Если СтрокиИзм.Количество() > 0 Тогда
				СтрокаКартинка.ХранилищеКЗаписи = Новый ХранилищеЗначения(СтрокиИзм[0].Картинка.ПолучитьДвоичныеДанные());
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	//проверим даты на сертификатах
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыНаПродукцию.Номенклатура,
		|	СертификатыНаПродукцию.РегистрационныйНомер
		|ИЗ
		|	РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
		|ГДЕ
		|	СертификатыНаПродукцию.Номенклатура = &Номенклатура
		|	И СертификатыНаПродукцию.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана дата окончания действия сертификата по рег. номеру " + Выборка.РегистрационныйНомер,,,, Отказ);
		КонецЦикла;	
		
		ВызватьОбработкуПоФлажкуБезОстатков = (Объект.БезОстатков <> Объект.Ссылка.БезОстатков);
	КонецЕсли;
	
	Для Каждого СтрокаТаб Из Объект.Акции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаОкончания) Тогда
			СтрокаТаб.ДатаОкончания = '30000101';
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры
//+++АК BARA ИП-00017643  2018.01.26
&НаСервере
Процедура ПрочиеФайлыПередЗаписьюВыгрузить()

	//+++АК BARA ИП-00017643  2018.01.26  
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураПрочиеФайлы.НазваниеФайла,
		|	НоменклатураПрочиеФайлы.ОтносительноеИмяФайла,
		|	НоменклатураПрочиеФайлы.ТипФайла
		|ИЗ
		|	Справочник.Номенклатура.ПрочиеФайлы КАК НоменклатураПрочиеФайлы
		|ГДЕ
		|	НоменклатураПрочиеФайлы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПрочиеФайлыПередЗаписью.Загрузить(Запрос.Выполнить().Выгрузить());
	//---
	

КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если СтавкаНДСИзРегистра.Пустая() Тогда
	//	Сообщить("Не заполнен реквизит справочника ""Ставка НДС"" (Ставка НДС)!",СтатусСообщения.Важное);								
	//	Отказ = Истина;
	//КонецЕсли;	
	//+++АК BARA ИП-00017643  2018.01.26    
	ПрочиеФайлыПередЗаписьюВыгрузить();
	//---
	//+++АК
	ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанные();
	Если НЕ ВсеОК Тогда
		Отказ = Истина;
	КонецЕсли; 
	//---АК
	
	Если СтрДлина(Элементы.ОписаниеHtml.Документ.Body.innerHTML) > 0 Тогда
		Объект.Описание = Элементы.ОписаниеHtml.Документ.Body.innerHTML;
	КонецЕсли;
	//Если СтрДлина(Элементы.СоставHtml.Документ.Body.innerHTML) > 0 Тогда
	//	Объект.Состав = Элементы.СоставHtml.Документ.Body.innerHTML;
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//
	НаборЗаписей = РегистрыСведений.ВыкладкаПланограммы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Объект.Ссылка);
	//+++АК KIRN 2018.03.07 ИП-00018051 
	НаборЗаписей.Прочитать();
	
	тзНабор = НаборЗаписей.Выгрузить();	
	//НаборЗаписей.Очистить();
	флИзмененНабор = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаПланограммы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.МестоВыкладки) Тогда
			Продолжить;
		КонецЕсли;
		мсСтроки = тзНабор.НайтиСтроки(Новый Структура("Номенклатура, Планограмма", Объект.Ссылка, СтрокаТаблицы.Планограмма));
		Если мсСтроки.Количество()>0 Тогда
			Запись = мсСтроки[0];
			Если Запись.ТоварВыведен = СтрокаТаблицы.ТоварВыведен Тогда
			Иначе
				
				флИзмененНабор = Истина;
			КонецЕСли;
		Иначе
			флИзмененНабор = Истина;
			Запись = тзНабор.Добавить();			
		КонецЕСли;
		
		Запись.Планограмма 		= СтрокаТаблицы.Планограмма;
		Запись.Номенклатура 	= Объект.Ссылка;
		Запись.МестоВыкладки 	= СтрокаТаблицы.МестоВыкладки;
		Запись.ТоварВыведен 	= СтрокаТаблицы.ТоварВыведен;
	КонецЦикла;
	Попытка
		Если флИзмененНабор Тогда
			НаборЗаписей.Загрузить(тзНабор);
			НаборЗаписей.Записать();
		КонецЕСли;
	Исключение
	КонецПопытки;
	
	//Если флИзмененНабор Тогда
	//	Почта = Новый ИнтернетПочта;
	//	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	//	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	//	Письмо = Новый ИнтернетПочтовоеСообщение;
	//	Почта.Подключиться(Профиль);
	//	Письмо.Тема = "Запись Номенклатуры интерактивно";
	//	
	//	Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	//	Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
	//	Получатель = Письмо.Получатели.Добавить();
	//	Получатель.Адрес           = "sp@vkusvill.ru";
	//	Получатель.ОтображаемоеИмя = "sp@vkusvill.ru";
	//	
	//	
	//	ТекстПолный = "Изменена номенклатура ["+Объект.Ссылка+"] пользователем "+глЗначениеПеременной("глТекущийПользователь");
	//	
	//	ТекстСообщения = Письмо.Тексты.Добавить();
	//	ТекстСообщения.Текст     = ТекстПолный;
	//	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	//	
	//	ТекстДокумент = Неопределено;
	//	Почта.Послать(Письмо);
	//	Почта.Отключиться();
	//КонецЕСли;
	
		
	Если НЕ Отказ Тогда
	
		//
		ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущийОбъект.Ссылка);
		Если НЕ ВсеОК Тогда
			Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли; 
	//---АК
	
	//МассивПараметров = Новый Массив(3);
	//МассивПараметров[0] = Неопределено;
	//МассивПараметров[1] = Объект.Ссылка;
	//МассивПараметров[2] = Неопределено;
	//Ключ = Новый УникальныйИдентификатор;
	//
	//ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ПересчитатьНеобходимостьПечатиЦенников", МассивПараметров, Ключ, "Пересчет необходимости печати ценников");
	//ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ПересчитатьНеобходимостьПечатиЦенниковТТ", МассивПараметров, Ключ, "Пересчет необходимости печати ценников ТТ");
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборОбращенияПокупателейНаСервере();
	
	Если ВызватьОбработкуПоФлажкуБезОстатков Тогда
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
		СтрЗапрос = "EXEC [SMS_REPL].[dbo].[Correct_Ost_After_BezOstFlag_Change]
					|@id_tov = " + ВнешниеДанные.ФорматПоля(Объект.id_tov) + "";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
	КонецЕсли;	
	
	//+++АК SHEP 2017.11.27 ИП-00017229
	Если НЕ ЗначениеЗаполнено(КаталогХраненияФайлов) Тогда
		КаталогХраненияФайлов = КаталогХраненияФайлов(Объект.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	//---АК SHEP 2017.11.27
	
	//+++АК BARA ИП-00017643 2018.02.09
	ТекстПисьма = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект.Владелец = &Номенклатура) КАК СоответствиеОбъектРольСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ПОМЕСТИТЬ ВТ2
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО ВТ.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление КАК Емайл
		|ИЗ
		|	ВТ2 КАК ВТ2
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ВТ2.Сотрудник = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))";
	
	Запрос.УстановитьПараметр("Номенклатура",Объект.Ссылка);
	
	КомуОтпарвитьПисьмо = Запрос.Выполнить().Выгрузить();
	
	//КомуОтпарвитьПисьмо = "bancom@yandex.ru";
	Для каждого Стр Из Объект.ПрочиеФайлы Цикл
		Если Стр.ТипФайла = "Дегустации" ИЛИ Стр.ТипФайла = "ППП" Тогда
			
			/////
			Отбор = Новый Структура();
			ТемаПисьма = "К %Наименование%, добавлен файл в %раздел%";
			ТемаПисьма = СтрЗаменить(ТемаПисьма,"%Наименование%",Объект.Наименование);
			ТемаПисьма = СтрЗаменить(ТемаПисьма,"%раздел%",Стр.ТипФайла);
			
			Отбор.Вставить("ОтносительноеИмяФайла",Стр.ОтносительноеИмяФайла);
			РезПоиска = ПрочиеФайлыПередЗаписью.НайтиСтроки(Отбор);	
			Если РезПоиска.Количество() = 0 Тогда
				ОтносительноеИмяФайла = Стр.ОтносительноеИмяФайла;
				Если НЕ ПустаяСтрока(ОтносительноеИмяФайла) Тогда
					АдресВремХранилища = ПолучитьФайлНаСервере(КаталогХраненияФайлов + ОтносительноеИмяФайла, УникальныйИдентификатор);
					Если ЗначениеЗаполнено(АдресВремХранилища) Тогда
						Файл = Новый Файл(ОтносительноеИмяФайла);
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Файл.Расширение);
						ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВремХранилища);
						ДвоичныеДанные.Записать(ИмяВременногоФайла);
					КонецЕсли;
				КонецЕсли;
				
				ОтправитьПисьмо(ТемаПисьма,ТекстПисьма,КомуОтпарвитьПисьмо,ИмяВременногоФайла,Стр.НазваниеФайла)
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
	//---АК BARA ИП-00017643
КонецПроцедуры

//+++АК BARA ИП-00017643 2018.02.09
Процедура ОтправитьПисьмо(Тема,Текст,Кому,ИмяПрикрепляемогоФайла,Названиефайла)
	
	АдресОтправки = "no-reply@vkusvill.ru";
		   	
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
	Письмо.Отправитель.Адрес = АдресОтправки;
	Письмо.Вложения.Добавить(ИмяПрикрепляемогоФайла,Названиефайла); 
	Для каждого Стр Из Кому Цикл	
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Стр.Емайл;
	КонецЦикла; 
		
	ТекстСообщения = Письмо.Тексты.Добавить(Текст);
	Попытка
		Почта.Послать(Письмо);
	Исключение
		//Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
	КонецПопытки;	
	Почта.Отключиться();	

КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//ЗаписьСтавкиНДС();
	
	//+++АК
	ЗаполнитьРолиОтветственных();
	//---АК
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("ИмяСобытия")
			И ВыбранноеЗначение.ИмяСобытия = "Отсканировано" Тогда
		
		Для Каждого ЭлементКартинка Из ВыбранноеЗначение.МассивКартинок Цикл
			СтрокаТаб = Объект.СертификатыПродукции.Добавить();
			СтрокаТаб.ИмяФайла = ЭлементКартинка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.
	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);

	// Выбор из списка и обработка выбора.
	РезультатВыбора = ВыбратьИзСписка(Список, Элементы.НаименованиеПолное);

	Если НЕ РезультатВыбора = Неопределено Тогда
		Объект.НаименованиеПолное = РезультатВыбора.Значение;
		Модифицированность = Истина;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыведенаПриИзменении(Элемент)
	
	//УстановитьАвтоотметкуНезаполненногоУРЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладируемаяПриИзменении(Элемент)

	Если Объект.Складируемая 
			И Объект.ВидСкладируемости = ПредопределенноеЗначение("Перечисление.ВидыСкладируемостиТовара.Нескладируемый") Тогда
		Объект.ВидСкладируемости = ПредопределенноеЗначение("Перечисление.ВидыСкладируемостиТовара.Складируемый");
	ИначеЕсли НЕ Объект.Складируемая 
			И НЕ Объект.ВидСкладируемости = ПредопределенноеЗначение("Перечисление.ВидыСкладируемостиТовара.Нескладируемый") Тогда
		Объект.ВидСкладируемости = ПредопределенноеЗначение("Перечисление.ВидыСкладируемостиТовара.Нескладируемый");
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере 
Функция УстановитьКартинкуИзФайла(ТекСтрока, Ссылка)
	
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	
	ИмяФайла = КаталогКЗаписи + Строка(Ссылка.УникальныйИдентификатор()) + "_" + Строка(ТекСтрока.КлючСтроки) + ?(Лев(ТекСтрока.Расширение, 1) = ".", "", ".") + ТекСтрока.Расширение;
	
	// golv 01.06.2018 ИП-00018671
	ФайлКартинки = Новый Файл(ИмяФайла);
	Если ФайлКартинки.Существует() Тогда
		ПолеКартинкиТекСтроки = "";
		Возврат Ложь;
	КонецЕсли; 
	// golv
	
	ПолеКартинкиТекСтроки = ПоместитьВоВременноеХранилище(Новый Картинка(ИмяФайла));
	
КонецФункции

&НаСервере
Функция УстановитьКартинкуИзСтроки(КлючСтроки)
	
	СтрокиСФайлом = ТаблицаИзмененныхКартинок.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	
	Если СтрокиСФайлом.Количество() > 0 Тогда                                                            
		ПолеКартинкиТекСтроки = ПоместитьВоВременноеХранилище(СтрокиСФайлом[0].Картинка);
	Иначе	
		ПолеКартинкиТекСтроки = "";
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура КартинкиПриАктивизацииСтроки(Элемент)
	
	Картинка = Новый Картинка;
	ТекСтрока = Элементы.Картинки.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ВнесеныИзменения Тогда
			УстановитьКартинкуИзСтроки(ТекСтрока.КлючСтроки);
		Иначе
			УстановитьКартинкуИзФайла(Новый Структура("КлючСтроки, Расширение", ТекСтрока.КлючСтроки, ТекСтрока.Расширение), Объект.Ссылка);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайлаКартинки");
	Если СтруктураВозврат <> Неопределено
			И СтруктураВозврат.БылВыборФайла Тогда
		Файл = Новый Файл(СтруктураВозврат.ИмяФайла);
		СтрокаДоб = Объект.Картинки.Добавить();
		СтрокаДоб.ИД = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура.Картинки", "ИД");
		СтрокаДоб.КраткоеИмяФайла = Файл.ИмяБезРасширения;
		СтрокаДоб.Расширение = Файл.Расширение;
		СтрокаДоб.ВнесеныИзменения = Истина;
		СтрокаДоб.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		//СтрокаДоб.ХранилищеКЗаписи = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураВозврат.ИмяФайла));
		СтрокаДоб.Размер = Файл.Размер();
		
		СтрокаИзм = ТаблицаИзмененныхКартинок.Добавить();
		СтрокаИзм.КлючСтроки = СтрокаДоб.КлючСтроки;
		СтрокаИзм.Картинка = Новый Картинка(СтруктураВозврат.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеремещениеФайлаВХранилище(ДвоичныеДанные,НомерСтроки)
	
	Об = РеквизитФормыВЗначение("Объект");
	СтрокаДоб = Об.Файлы.Получить(НомерСтроки - 1);
	СтрокаДоб.ИД = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура.Файлы", "ИД") + СтрокаДоб.НомерСтроки;
	СтрокаДоб.КлючСтроки = Строка(Новый УникальныйИдентификатор);
	СтрокаДоб.ХранилищеКЗаписи = Новый ХранилищеЗначения(ДвоичныеДанные);
	Об.записать();
	ЗначениеВРеквизитФормы(Об, "Объект");
	
КонецПроцедуры


&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	//СтрокаДоб = Объект.Файлы.Получить(Объект.Файлы.Количество()-1);
	Если ПодключитьРасширениеРаботыСФайлами()=Ложь Тогда
        УстановитьРасширениеРаботыСФайлами(); 
    КонецЕсли;
    ИмяФайла = ""; Адрес = "";
    ПоместитьФайл(Адрес,,ИмяФайла,,);
    Файл = Новый Файл(ИмяФайла);
    ИмяФайла=Файл.Имя;
	СтрокаДоб = Объект.Файлы.Добавить();
	СтрокаДоб.КраткоеИмяФайла = Файл.ИмяБезРасширения;
	СтрокаДоб.Расширение = Файл.Расширение;
	СтрокаДоб.ВнесеныИзменения = Истина;
	СтрокаДоб.Размер = Файл.Размер();
	
    ПеремещениеФайлаВХранилище(ПолучитьИзВременногоХранилища(Адрес),СтрокаДоб.НомерСтроки); 
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элементы.Файлы.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ВнесеныИзменения Тогда
			Предупреждение("Сначала запишите элемент, файл ещё не записан в базу.");
		Иначе
			ЗапуститьПриложение(ПолучитьПолноеИмяФайла(ТекСтрока.НомерСтроки));
		КонецЕсли;	
		
	КонецЕсли;
	Отказ=истина;
КонецПроцедуры



&НаСервере
Процедура ВыполнитьЗаписьВРегистр(Номенклатура, Характеристика, Поставщик, СтруктурнаяЕдиница)
	
	//МенеджерЗаписи = РегистрыСведений.и_ПоставщикиНоменклатурыТорговыхТочек.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Период			= НачалоДня(ТекущаяДата());
	//МенеджерЗаписи.СтруктурнаяЕдиница= СтруктурнаяЕдиница;
	//МенеджерЗаписи.Номенклатура		= Номенклатура;
	//МенеджерЗаписи.Характеристика	= Характеристика;
	//МенеджерЗаписи.Поставщик			= Поставщик;
	//МенеджерЗаписи.Активный			= Истина;
	//МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ТипТовараПриИзмененииНаСервере()
	
	//Если Объект.ТипТовара = Перечисления.ТипыТоваров.Весовой Тогда
	//	Объект.БазоваяЕдиницаИзмерения = Константы.ЕдиницаВесовогоТовара.Получить();
	//Иначе
		//Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		//	Объект.БазоваяЕдиницаИзмерения = Константы.ЕдиницаУслуги.Получить();
		//Иначе
		//	Если НЕ Объект.Весовой Тогда
		//		Объект.БазоваяЕдиницаИзмерения = Константы.ЕдиницаШтучногоТовара.Получить();
		//	Иначе
		//		Объект.БазоваяЕдиницаИзмерения = Константы.ЕдиницаВесовогоТовара.Получить();
		//	КонецЕсли;
		//КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипТовараПриИзменении(Элемент)
	
	ТипТовараПриИзмененииНаСервере();
	
КонецПроцедуры

Процедура НазначитьОсновнуюХарактеристикуНаСервере()
	//Характеристика = Элементы.Характеристики.ТекущаяСтрока;
	//Отбор = Новый Структура;
	//Отбор.Вставить("Объект",Характеристика);
	//Отбор.Вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
	//Отбор.Вставить("СтруктурнаяЕдиница",Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	//
	//Результат = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
	//Поставщик = Результат.Значение;

	//ЭтоЦентр = ОмПроцедурыСетевогоОбмена.ЭтоСтруктурнаяЕдиницаГлавногоУзла();
	//Если НЕ ЭтоЦентр Тогда
	//	ВыполнитьЗаписьВРегистр(Объект.Ссылка,Характеристика,Поставщик,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	//Иначе
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	СтруктурныеЕдиницы.Ссылка
	//				   |ИЗ
	//				   |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	//				   |ГДЕ
	//				   |	СтруктурныеЕдиницы.Формат = ЗНАЧЕНИЕ(Справочник.ФорматыМагазинов.Вкусвил)";
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока выборка.Следующий() Цикл
	//		ВыполнитьЗаписьВРегистр(Объект.Ссылка,Характеристика,Поставщик,выборка.Ссылка);
	//	КонецЦикла
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОсновнуюХарактеристику(Команда)
	
	НазначитьОсновнуюХарактеристикуНаСервере();
	
КонецПроцедуры


Функция ПолучитьСтавкуНДСНаДату(спрНоменклатура,Дата=Неопределено)
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	СтавкаНДССрезПоследних.СтавкаНДС КАК СтавкаНДС
//	|ИЗ
//	|	РегистрСведений.СтавкаНДС.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК СтавкаНДССрезПоследних");
//	Запрос.УстановитьПараметр("Дата",Дата);
//	Запрос.УстановитьПараметр("Номенклатура",спрНоменклатура);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.СтавкаНДС;
//	Иначе
//		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
//	КонецЕсли;	
КонецФункции	

Процедура ЗаписьСтавкиНДС()
//	РабочаяДата = ТекущаяДата();
//	Отбор = Новый Структура;
//	Отбор.Вставить("Номенклатура",Объект.Ссылка);
//	тзТекущаяСтавкаНДС = РегистрыСведений.СтавкаНДС.СрезПоследних(РабочаяДата,Отбор);
//	флЗаписьСтавкиНДС = Ложь;
//	Если тзТекущаяСтавкаНДС.Количество() = 0 Тогда
//		ДатаЗаписи = '2000.01.01';
//		флЗаписьСтавкиНДС = Истина;
//	Иначе
//		ТекущаяСтавкаНДС   = тзТекущаяСтавкаНДС[0].СтавкаНДС;
//		Если ТекущаяСтавкаНДС <> СтавкаНДСИзРегистра Тогда
//			ДатаЗаписи = РабочаяДата;
//			флЗаписьСтавкиНДС = Истина;
//		КонецЕсли;	
//	КонецЕсли;
//	Если флЗаписьСтавкиНДС Тогда
//		ЗаписьСтавкиНДС = РегистрыСведений.СтавкаНДС.СоздатьМенеджерЗаписи();
//		ЗаписьСтавкиНДС.Период       = ДатаЗаписи;
//		ЗаписьСтавкиНДС.Номенклатура = Объект.Ссылка;
//		ЗаписьСтавкиНДС.СтавкаНДС    = СтавкаНДСИзРегистра;
//		ЗаписьСтавкиНДС.Записать();
//	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("ПриАктивизацииСтрокиХарактеристики");
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиХарактеристики", 0.5, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиХарактеристики() Экспорт 
	ОтключитьОбработчикОжидания("ПриАктивизацииСтрокиХарактеристики");
	ТекСтрока = Элементы.Характеристики.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборСертификатов(ТекСтрока.Ссылка);
КонецПроцедуры

Процедура УстановитьОтборСпискаШК()
//		Характеристика = Элементы.Характеристики.ТекущаяСтрока;
//		
//		ШК.Отбор.Элементы.Очистить();
//		
//		ЭлементОтбора 				   = ШК.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Номенклатура");
//		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
//		ЭлементОтбора.Использование    = Истина;
//		ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
//		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
//		
//		
//		ЭлементОтбора 				   = ШК.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ХарактеристикаПартия");
//		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
//		ЭлементОтбора.Использование    = Истина;
//		ЭлементОтбора.ПравоеЗначение   = Характеристика;
//		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
КонецПроцедуры

//&НаКлиенте
Процедура Ценник(Команда)
//	СоответствиеЦветов = Новый Соответствие;
//	СоответствиеЦветов.Вставить(0,"Белый");
//	СоответствиеЦветов.Вставить(1,"Зеленый");
//	СоответствиеЦветов.Вставить(2,"Оранжевый");

//	Для Цвет = 0 по 2 Цикл
//	ТабДок = НапечататьЦенники(Цвет);
//	Если НЕ ТабДок = Неопределено Тогда
//		ТабДок.ТолькоПросмотр		= Истина;
//		ТабДок.ОтображатьСетку 		= Ложь;
//		ТабДок.ОтображатьЗаголовки 	= Ложь;
//		
//	//	ТабДок.АвтоМасштаб			= Истина;
//		ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
//		ТабДок.ЧерноБелаяПечать		= Истина;
//		ТабДок.ПолеСверху			= 0;
//		ТабДок.ПолеСлева			= 0;
//		ТабДок.ПолеСнизу			= 0;
//		ТабДок.ПолеСправа			= 0;
//		
//		ТабДок.Показать(СоответствиеЦветов.Получить(Цвет));		
//	КонецЕсли;
//		КонецЦикла
КонецПроцедуры

//&НаСервере
Функция НапечататьЦенники(Цвет) Экспорт
//	
//	//Отладка
//	//СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("187М");	
//	
//		СтоитПоказать = Ложь;			

//		СтрокиПодвала = Новый Массив;
//		Для н = 1 по 3 Цикл
//			СтрокиПодвала.Добавить("Строка "+н);
//		КонецЦикла;
//		
//			
//		
//		Запрос = НОвый Запрос;
//		
//		ЗапросТекст = "ВЫБРАТЬ
//					  |	ВложенныйЗапрос.Схема
//					  |ИЗ
//					  |	(ВЫБРАТЬ
//					  |		МАКСИМУМ(НазначениеДисконтойСхемы.Ссылка) КАК Назначение,
//					  |		ДисконтныеСхемы.Ссылка КАК Схема,
//					  |		НазначениеДисконтойСхемы.ВидНазначения КАК ВидНазначения
//					  |	ИЗ
//					  |		Справочник.ДисконтныеСхемы КАК ДисконтныеСхемы
//					  |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.НазначениеДисконтойСхемы КАК НазначениеДисконтойСхемы
//					  |			ПО (НазначениеДисконтойСхемы.ДисконтнаяСхема = ДисконтныеСхемы.Ссылка)
//					  |	
//					  |	СГРУППИРОВАТЬ ПО
//					  |		ДисконтныеСхемы.Ссылка,
//					  |		НазначениеДисконтойСхемы.ВидНазначения) КАК ВложенныйЗапрос
//					  |ГДЕ
//					  |	ВложенныйЗапрос.ВидНазначения = ЗНАЧЕНИЕ(Перечисление.ВидНазначенияДС.НазначитьДС)
//					  |;
//					  |
//					  |////////////////////////////////////////////////////////////////////////////////";
//					Если Цвет = 0 Тогда    //Белые
//					  ЗапросТекст  = ЗапросТекст  + "
//							  |ВЫБРАТЬ
//							  |	ЗНАЧЕНИЕ(Справочник.ДисконтныеСхемы.ПустаяСсылка) КАК Схема,
//							  |	СправочникНоменклатура.Ссылка КАК Номенклатура,
//							  |	0 КАК ОранжеваяЦена
//							  |ПОМЕСТИТЬ НоменклатураДляЦенников
//							  |ИЗ
//							  |	Справочник.Номенклатура КАК СправочникНоменклатура
//							  |ГДЕ НЕ СправочникНоменклатура.ЭтоГруппа И НЕ СправочникНоменклатура.Ссылка В ИЕРАРХИИ (
//							  |											ВЫБРАТЬ
//							  |												ДисконтныеСхемыТоварыСпутники.Номенклатура
//							  |											ИЗ
//							  |											 	Справочник.ДисконтныеСхемы.ТоварыСпутники КАК ДисконтныеСхемыТоварыСпутники
//							  |											ГДЕ
//							  |											 	ДисконтныеСхемыТоварыСпутники.ОранжевыйЦенник
//							  |											СГРУППИРОВАТЬ ПО
//							  |											 	ДисконтныеСхемыТоварыСпутники.Номенклатура 
//							  |											 	
//							  |											ОБЪЕДИНИТЬ ВСЕ 
//							  |											
//							  |											ВЫБРАТЬ 
//							  |												ДисконтныеСхемыТоварыСоСпецЦеной.Номенклатура 
//							  |											ИЗ Справочник.ДисконтныеСхемы.ТоварыСоСпецЦеной КАК ДисконтныеСхемыТоварыСоСпецЦеной)
//							  |;
//							  |
//							  |////////////////////////////////////////////////////////////////////////////////"
//					  ИначеЕсли Цвет = 1 Тогда //Зеленый 
//						  ЗапросТекст  = ЗапросТекст  + "
//							  |ВЫБРАТЬ
//							  |	ДисконтныеСхемыТовары.Ссылка КАК Схема,
//							  |	СправочникНоменклатура.Ссылка КАК Номенклатура,
//							  |	ДисконтныеСхемыТовары.Цена КАК ОранжеваяЦена
//							  |ПОМЕСТИТЬ НоменклатураДляЦенников
//							  |ИЗ
//							  |	Справочник.ДисконтныеСхемы.ТоварыСоСпецЦеной КАК ДисконтныеСхемыТовары
//							  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
//							  |		ПО ДисконтныеСхемыТовары.Номенклатура.Ссылка = СправочникНоменклатура.Ссылка
//							  |;
//							  |
//							  |////////////////////////////////////////////////////////////////////////////////"
//						ИначеЕсли Цвет = 2 Тогда //Оранжевый
//						  ЗапросТекст  = ЗапросТекст  + "
//							  |ВЫБРАТЬ
//							  |	ДисконтныеСхемыТовары.Ссылка КАК Схема,
//							  |	СправочникНоменклатура.Ссылка КАК Номенклатура,
//							  |	0 КАК ОранжеваяЦена
//							  |ПОМЕСТИТЬ НоменклатураДляЦенников
//							  |ИЗ
//							  |	Справочник.ДисконтныеСхемы.ТоварыСпутники КАК ДисконтныеСхемыТовары
//							  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
//							  |		ПО (ДисконтныеСхемыТовары.Номенклатура.Ссылка = СправочникНоменклатура.Ссылка
//							  |		ИЛИ ДисконтныеСхемыТовары.Номенклатура.Ссылка = СправочникНоменклатура.Ссылка.Родитель 
//							  |		ИЛИ ДисконтныеСхемыТовары.Номенклатура.Ссылка = СправочникНоменклатура.Ссылка.Родитель.Родитель) И ДисконтныеСхемыТовары.ОранжевыйЦенник
//							  |
//							  |;
//							  |
//							  |////////////////////////////////////////////////////////////////////////////////";
//						КонецЕсли;					  
//						 
//					  ЗапросТекст  = ЗапросТекст  + "
//					  |ВЫБРАТЬ
//					  |	НоменклатураДляЦенников.Схема КАК Схема,
//					  |	НоменклатураДляЦенников.Номенклатура КАК Номенклатура,
//					  |	НоменклатураДляЦенников.Номенклатура.Наименование КАК Наименование,
//					  |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
//					  |	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
//					  |	МАКСИМУМ(НоменклатураДляЦенников.ОранжеваяЦена) КАК ОранжеваяЦена,
//					  |	МАКСИМУМ(ВЫБОР
//					  |			КОГДА ЗначенияСвойствОбъектов.Свойство = &СрокГодности
//					  |				ТОГДА ЗначенияСвойствОбъектов.Значение
//					  |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗначенияСвойств.ПустаяСсылка)
//					  |		КОНЕЦ) КАК СрокГодности,
//					  |	МАКСИМУМ(ВЫБОР
//					  |			КОГДА ЗначенияСвойствОбъектов.Свойство = &УпаковкаДляЦенника
//					  |				ТОГДА ЗначенияСвойствОбъектов.Значение
//					  |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗначенияСвойств.ПустаяСсылка)
//					  |		КОНЕЦ) КАК УпаковкаДляЦенника,
//					  |	ШтриховыеКоды.ШтрихКод
//					  |ИЗ
//					  |	НоменклатураДляЦенников КАК НоменклатураДляЦенников
//					  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатурыСрезПоследних
//					  |		ПО НоменклатураДляЦенников.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
//					  |		И ЦеныНоменклатурыСрезПоследних.Характеристика	= ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
//					  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//					  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
//					  |			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
//					  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
//					  |			ПО ШтриховыеКоды.Номенклатура = ХарактеристикиНоменклатуры.Владелец
//					  |				И ШтриховыеКоды.ХарактеристикаПартия = ХарактеристикиНоменклатуры.Ссылка
//					  |		ПО НоменклатураДляЦенников.Номенклатура = ХарактеристикиНоменклатуры.Владелец
//					  |ГДЕ НоменклатураДляЦенников.Номенклатура = &Номенклатура И ХарактеристикиНоменклатуры.Ссылка = &Характеристика И ШтриховыеКоды.ШтрихКод = &ШтрихКод
//					  |СГРУППИРОВАТЬ ПО
//					  |	ШтриховыеКоды.ШтрихКод,
//					  |	НоменклатураДляЦенников.Номенклатура,
//					  |	НоменклатураДляЦенников.Схема,
//					  |	ХарактеристикиНоменклатуры.Ссылка
//					  |УПОРЯДОЧИТЬ ПО
//					  |	Номенклатура ИЕРАРХИЯ,
//					  |	Наименование";
//					   
//		Запрос.УстановитьПараметр("УпаковкаДляЦенника",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("УпаковкаДляЦенника"));
//		Запрос.УстановитьПараметр("СрокГодности",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("СрокГодности"));
//		Запрос.УстановитьПараметр("Номенклатура",Объект.Ссылка);
//		Запрос.УстановитьПараметр("Характеристика",Элементы.Характеристики.ТекущаяСтрока);
//		Запрос.УстановитьПараметр("ШтрихКод",Элементы.ШК.ТекущаяСтрока.ШтрихКод);
//		Запрос.Текст	= ЗапросТекст;
//		Результат 		= Запрос.Выполнить();
////		Результат.Выгрузить().ВыбратьСтроку();
//		Выборка = Результат.Выбрать();
//		
//		МаксК = 2;
//		МаксС = 2;
//		
//		К = 0;
//		С = 0;
//		
//		ТЧ = Новый ОписаниеТипов("Число");
//		
//		Килограмм = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(166);
//		СтрОбласть 	= Новый ТабличныйДокумент;
//		ТабДок 		= Новый ТабличныйДокумент;
//		Макет 		= ПолучитьОбщийМакет("Ценник");
//		Пока Выборка.Следующий() Цикл
//			К = К + 1;
//			Область = Макет.ПолучитьОбласть("Область"+Цвет);
//			Область.Параметры.Заполнить(Выборка);
//			
//			ШтрихКод = СокрЛП(Выборка.ШтрихКод);
//		
//			Если СтрДлина(ШтрихКод) < 13 Тогда
//				
//				КоличествоНедостающихСимволов = 12 - СтрДлина(ШтрихКод);
//				Если КоличествоНедостающихСимволов > 0  Тогда
//					ШтрихКод = ШтрихКод + Прав("00000000001",КоличествоНедостающихСимволов);
//				КонецЕсли;
//			КонецЕсли;
//			Если СтрДлина(ШтрихКод) = 12 Тогда
//				ШтрихКод = ШтрихКод+ 
//					и_ОбменСAccess.КонтрольныйСимволEAN(ШтрихКод, 13);
//			КОнецЕсли;
//			Рисунок 					= Область.Рисунки["ШК"+Цвет];
//			
//			Рисунок.Объект.ОтображатьТекст		=Истина;
//			Рисунок.Объект.СодержитКС	=Истина;
//			Рисунок.Объект.Сообщение	= ШтрихКод;
//			
//			Если ЗначениеЗаполнено(Выборка.СрокГодности) Тогда
//				Область.Параметры.ЗаголовокСрокГодности = "Срок годности:";
//			КонецЕсли;
//			
//			Коэффициент = 1;
//			Если НЕ ЗначениеЗаполнено(Выборка.УпаковкаДляЦенника) Тогда
//				УпаковкаДляЦенника = Неопределено;
//				СсылкаНаШаблоныШКВесовогоТовара = ОмШтриховыеКоды.ШаблонВесовогоШК(ШтрихКод);
//				Если НЕ СсылкаНаШаблоныШКВесовогоТовара.Пустая() Тогда
//					ДлинаКода = СсылкаНаШаблоныШКВесовогоТовара.ДлинаКода+2;
//					Вес = Сред(ШтрихКод,ДлинаКода+1,12-ДлинаКода);
//					Коэффициент = ТЧ.ПривестиЗначение(Вес)/1000;
//					Если Коэффициент = 0.001 Тогда
//						Коэффициент = 1;
//					Иначе
//						УпаковкаДляЦенника = Формат(Коэффициент*1000,"ЧДЦ=0")+" г";
//					КонецЕсли;
//				КонецЕсли;
//				
//				Если НЕ Коэффициент = 1 Тогда
//					Область.Параметры.Цена = Область.Параметры.Цена*Коэффициент;
//				КонецЕсли;
//				
//				Область.Параметры.УпаковкаДляЦенника = ?(УпаковкаДляЦенника = Неопределено,"1 кг",УпаковкаДляЦенника);
//			КонецЕсли;
//			
//			
//			Если Цвет > 0 Тогда //Не белый 
//				Если Цвет = 2 Тогда //Оранжевый
//					Область.ТекущаяОбласть.ЦветТекста = WEBЦвета.Оранжевый;
//					СтрокиПодвала[0] = "Покупая этот продукт,";
//					СтрокиПодвала[1] = "купите любой продукт";
//					СтрокиПодвала[2] = "с зеленым ценником по 2-ой цене";
//				ИначеЕсли  Цвет = 1 Тогда //Зеленый
//					Если НЕ Коэффициент = 1 Тогда
//						Область.Параметры.ОранжеваяЦена = Область.Параметры.ОранжеваяЦена*Коэффициент;
//					КонецЕсли;
//					Область.ТекущаяОбласть.ЦветТекста = WEBЦвета.ЗеленаяЛужайка;
//					Схема = Выборка.Схема;
//					ТекстДляЦенника = Схема.ТекстДляЦенника;
//					Если НЕ ЗначениеЗаполнено(ТекстДляЦенника) Тогда
//						СтрокиПодвала[0] = "При покупке мясной";
//						СтрокиПодвала[1] = "продукции или любого";
//						СтрокиПодвала[2] = "товара с оранжевым ценником";
//					Иначе
//						Для Стр = 1 по СтрЧислоСтрок(ТекстДляЦенника) Цикл
//							СтрокиПодвала[Стр-1] = СтрПолучитьСтроку(ТекстДляЦенника, Стр);
//						КонецЦикла;
//					КонецЕсли;
//				КонецЕсли;
//				
//				Область.Параметры.СтрокаПодвала1 = СтрокиПодвала[0];
//				Область.Параметры.СтрокаПодвала2 = СтрокиПодвала[1];
//				Область.Параметры.СтрокаПодвала3 = СтрокиПодвала[2];
//			КонецЕсли;
//			
//			
//			Если Цвет = 2 Тогда //Оранжевый
//				Область.ТекущаяОбласть.ЦветТекста = WEBЦвета.Оранжевый;
//			ИначеЕсли  Цвет = 1 Тогда //Зеленый
//				Область.ТекущаяОбласть.ЦветТекста = WEBЦвета.ЗеленаяЛужайка;
//			КонецЕсли;
//			
//			Если К = 1 Тогда
//				СтрОбласть.Вывести(Область);
//			Иначе
//				СтрОбласть.Присоединить(Область);
//			КонецЕсли;
//			
//			Если К = МаксК Тогда
//				С = С + 1;
//				ТабДок.Вывести(СтрОбласть);
//				К = 0;
//				СтрОбласть.Очистить();
//			КонецЕсли;
//			
//			Если С = МаксС Тогда
//				С = 0;
//				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
//			КонецЕсли;			
//			СтоитПоказать = Истина;			
//		КонецЦикла;
//		Если К < МаксК Тогда
//			С = С + 1;
//			ТабДок.Вывести(СтрОбласть);
//			К = 0;
//			СтрОбласть.Очистить();
//		КонецЕсли;
//		
//		Если  СтоитПоказать Тогда
//			Возврат ТабДок;
//		Иначе
//			Возврат Неопределено;
//		КонецЕсли;
//		
	КонецФункции
	
&НаСервере
Функция ПолучитьПримерЗаполнения(Характеристика)
	Результат = Новый ТабличныйДокумент;
	Если НовыйФормат Тогда
		Ценник = Справочники.Номенклатура.ПолучитьЦенник_80_60_(Объект.Ссылка,Характеристика, Объект.Фишка, Объект.Наименование, Объект.ПозицияРазделителяДляЦенника);
	Иначе	
		Ценник = Справочники.Номенклатура.ПолучитьЦенник_80_60(Объект.Ссылка,Характеристика, Объект.Фишка, Объект.Наименование, Объект.ПозицияРазделителяДляЦенника);
	КонецЕсли;	
	Результат.Вывести(Ценник);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПолучитьПримерЗаполненияКлиент()
	ПримерОтображения = ПолучитьПримерЗаполнения(?(НЕ Элементы.Характеристики.ТекущиеДанные = Неопределено,Элементы.Характеристики.ТекущиеДанные.Ссылка,ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")));
КонецПроцедуры

&НаКлиенте
Процедура ПозицияРазделителяДляЦенникаПриИзменении(Элемент)
	
	ПолучитьПримерЗаполненияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФишкаПриИзменении(Элемент)
	
	ПолучитьПримерЗаполненияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Группа16ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Группа21 Тогда
		ПолучитьПримерЗаполненияКлиент()
	КонецЕсли;
	
	
	Если ТекущаяСтраница = Элементы.СтраницаОтзывыПоПродукту Тогда
		УстановитьОтборОбращенияПокупателейНаСервере();
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаПланограммы Тогда
		ЗаполнитьПланограммы();
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаЭтикеткиКТовару Тогда
		ПодключитьОбработчикОжидания("ОбновитьДатыИзмененияФайлов",0.5,Истина);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаПараметрыУчета Тогда
		УстановитьВидимостьНастроекУчета();
	КонецЕсли;	
	
	Если ТекущаяСтраница = Элементы.СтраницаФишки Тогда
		СформироватьСтраницыФишкаРазвёрнуто(); //+++АК SHEP 2018.07.04 ИП-00018818
	КонецЕсли;	
	
	Если ТекущаяСтраница = Элементы.АкцииНаТовар Тогда
		ПроставитьЦенуСоСкидкойПоАкции();
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаРолиОтветственных Тогда
		ЗаполнитьРолиОтветственных();
	КонецЕсли;	
	
	Если ТекущаяСтраница = Элементы.СтраницаОтзывыПоПродукту Тогда
	
		//+++АК SHEP 2017.11.27 ИП-00017229
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			КаталогХраненияФайлов = КаталогХраненияФайлов(Объект.Ссылка.УникальныйИдентификатор());
			МассивПрочихФайлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Мониторинги,Дегустации,ППП");
			Для Каждого ИмяТЧПрочихФайлов Из МассивПрочихФайлов Цикл
				Элементы["Файлы" + ИмяТЧПрочихФайлов].ОтборСтрок = Новый ФиксированнаяСтруктура("ТипФайла", ИмяТЧПрочихФайлов);
			КонецЦикла;
			
			//+++ZEZA СформироватьСтраницыФишкаРазвёрнуто(); //+++АК SHEP 2018.07.04 ИП-00018818
		КонецЕсли;
		//---АК SHEP 2017.11.27
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура РассчитатьОбъемУпаковки()

	Для каждого СтрокаТЧ1 Из Объект.ВесИГабаритыУпаковки Цикл
		СтрокаТЧ1.Объем = Окр(СтрокаТЧ1.Длина * СтрокаТЧ1.Ширина * СтрокаТЧ1.Высота / 1000000, 3);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВесИГабаритыУпаковкиПриИзменении(Элемент)
	
	РассчитатьОбъемУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСертификатов(мХарактеристика = Неопределено)
	
	
	СертификатыПродукции.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	СертификатыПродукции.Параметры.УстановитьЗначениеПараметра("Характеристика", мХарактеристика);
	
	Возврат;
	
	
	
	СертификатыПродукции.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = СертификатыПродукции.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	
	ЭлементОтбора = СертификатыПродукции.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Характеристика");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = мХарактеристика;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяНаличиеСертификатаПриИзменении(Элемент)
	Элементы.ГруппаСертификаты.Видимость = Объект.ТребуетсяНаличиеСертификата;
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекСтрокаХарактеристики = Элементы.Характеристики.ТекущиеДанные;
	Если ТекСтрокаХарактеристики = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайла");
	МассивСтруктураДвоичныеДанные = Новый Массив();
	
	Если СтруктураВозврат <> Неопределено
		И СтруктураВозврат.БылВыборФайла Тогда
		
		Для Каждого Строка Из СтруктураВозврат.ТЗ_ИмяФайла Цикл
			Файл = Новый Файл(Строка.ИмяФайла);
			Если НЕ Файл.Существует() Тогда  
				Продолжить;	
			КонецЕсли;
			Если НРег(Файл.Расширение) = ".pdf" Тогда
				ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\TotalPdfConverter\PDFConverter.exe """ + Файл.ПолноеИмя + """ """ + Файл.Путь + Файл.ИмяБезРасширения + ".jpg" + """" + " -jq 1 -fo -c jpg",, Истина);
				ТекДата = ТекущаяДата();
				Пока ТекДата + 8 >= ТекущаяДата() Цикл
					Продолжить;
				КонецЦикла;	
				Строка.ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".jpg";
				Файл = Новый Файл(Строка.ИмяФайла);
			КонецЕсли;
			
			Если НРег(Файл.Расширение) = ".jpg" Тогда
				ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\CompressJPG\AKCompressJPG.exe """ + Строка.ИмяФайла + """ """ + Строка.ИмяФайла + """",, Истина);
			КонецЕсли;
			
			МассивСтруктураДвоичныеДанные.Добавить(Новый Структура("ИмяФайла, ДвоичныеДанные", Строка.ИмяФайла, Новый ДвоичныеДанные(Строка.ИмяФайла)));
		КонецЦикла;	
		
		ДобавитьСертификатыПродукцииНаСервере(ТекСтрокаХарактеристики.Ссылка, СтруктураВозврат.ТЗ_ИмяФайла, МассивСтруктураДвоичныеДанные);
		 
	КонецЕсли;	
	
	Элементы.СертификатыПродукции.Обновить();
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатыПродукцииНаСервере(Характеристика, ТЗ_ПолноеИмяФайла, Знач МассивСтруктураДвоичныеДанные)
	
	Если ТЗ_ПолноеИмяФайла.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТЗ_ИменаФайлов = Новый ТаблицаЗначений;
	ТЗ_ИменаФайлов.Колонки.Добавить("ИмяФайла");
	
	СтрокаИменаФайловПолное = "";
	СтрокаИменаФайлов = "";
	
	Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Каталог = Каталог + "Сертификаты";
	
	Для Каждого Строка Из ТЗ_ПолноеИмяФайла Цикл 
	
		Файл = Новый Файл(Строка.ИмяФайла);
		//Если НЕ Файл.Существует() Тогда  
		//	Продолжить;	
		//КонецЕсли;
		//Если НРег(Файл.Расширение) = ".pdf" Тогда
		//	ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\TotalPdfConverter\PDFConverter.exe """ + Файл.ПолноеИмя + """ """ + Файл.Путь + Файл.ИмяБезРасширения + ".jpg" + """" + " -fo -c -jpg",, Истина);
		//	Файл = Новый Файл(Файл.Путь + Файл.ИмяБезРасширения + ".jpg");
		//	Строка.ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".jpg";
		//КонецЕсли;	
		СтрокаИменаФайловПолное = СтрокаИменаФайловПолное + Файл.ПолноеИмя + "; ";
		СтрокаИменаФайлов = СтрокаИменаФайлов + Файл.Имя + "; ";
		
		СтрокаУин = Строка(Новый УникальныйИдентификатор());
		НовоеИмяФайлаСертификата = Каталог + "\" + СтрокаУин + Файл.Расширение;
		
		Для Каждого ЭлементМассива Из МассивСтруктураДвоичныеДанные Цикл
			Если Файл.ПолноеИмя = ЭлементМассива.ИмяФайла Тогда
				ЭлементМассива.ДвоичныеДанные.Записать(НовоеИмяФайлаСертификата);
			КонецЕсли;	
		КонецЦикла;	
		
		НовСтрока = ТЗ_ИменаФайлов.Добавить();
		НовСтрока.ИмяФайла = НовоеИмяФайлаСертификата;
	КонецЦикла;	
	
	НЗ = РегистрыСведений.СертификатыНаПродукцию.СоздатьНаборЗаписей();
	НЗ.Отбор.Номенклатура.Установить(Объект.Ссылка);
	НЗ.Отбор.Характеристика.Установить(Характеристика);
	НЗ.Прочитать();	
	
	Запись = НЗ.Добавить();
	Запись.Номенклатура = Объект.Ссылка;
	Запись.Характеристика = Характеристика;
	Запись.ИмяФайла = СтрокаИменаФайловПолное;
	Запись.РегистрационныйНомер = СтрокаИменаФайлов; 
	Запись.Период = ТекущаяДата();
	Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаДобавленияФайла = ТекущаяДата();
	Запись.ХранилищеИменФайловСертификата = Новый ХранилищеЗначения(ТЗ_ИменаФайлов);
	
	Для Каждого СтрокаТаб Из ТЗ_ИменаФайлов Цикл
		Файл = Новый Файл(СтрокаТаб.ИмяФайла);
		ОтнИмяФайл = Файл.ИмяБезРасширения + Файл.Расширение;
		Расш = СтрЗаменить(Файл.Расширение, ".", "");
		ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("Номенклатура, Характеристика, ТипЗаписи, ОтносительноеИмяФайла, Расширение"
							, Объект.Ссылка, Характеристика, Перечисления.ТипыЗаписейПриложенныхКартинок.Сертификат, ОтнИмяФайл, Расш));
	КонецЦикла;	
	
	НЗ.Записать(); 	
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкиПередНачаломИзменения(Элемент, Отказ)
	
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПродукцииПередНачаломИзменения(Элемент, Отказ)
	
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПродукцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСертификатов(Команда)
	ИменаФайлов.Очистить();	
	МассивВыделенныхСтрок = Элементы.СертификатыПродукции.ВыделенныеСтроки;
	ПолучитьИменаФайловСертификатовНаСервере(МассивВыделенныхСтрок);
	Для Каждого Строка Из ИменаФайлов Цикл			
		//ТекущийСертификатВХранилище = ХранилищеЗначенияСервер(Строка.ИмяФайла);//	
		
		ПечатьФайла(Строка.ИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИменаФайловСертификатовНаСервере(МассивСтрок) 	
		
	МассивВыделенныхСтрок = Элементы.СертификатыПродукции.ВыделенныеСтроки;
	Для Каждого Строка Из МассивВыделенныхСтрок Цикл
		НЗ = РегистрыСведений.СертификатыНаПродукцию.СоздатьНаборЗаписей();
		НЗ.Отбор.Номенклатура.Установить(Строка.Номенклатура);
		НЗ.Отбор.Характеристика.Установить(Строка.Характеристика);
		НЗ.Отбор.РегистрационныйНомер.Установить(Строка.РегистрационныйНомер);
		НЗ.Прочитать();
		Для Каждого Запись Из НЗ Цикл
			ТЗ_ИменаФайлов = Запись.ХранилищеИменФайловСертификата.Получить();
			Если ТЗ_ИменаФайлов = Неопределено ИЛИ ТЗ_ИменаФайлов.Количество() = 0 Тогда
				
				НовСтрока = ИменаФайлов.Добавить();
				НовСтрока.ИмяФайла = Запись.ИмяФайла;
			Иначе
				Для Каждого СтрокаТЗ Из ТЗ_ИменаФайлов Цикл	
					НовСтрока = ИменаФайлов.Добавить();
					НовСтрока.ИмяФайла = СтрокаТЗ.ИмяФайла;		
				КонецЦикла;
			КонецЕсли;
			//ТекущийСертификатВХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Запись.ИмяФайла));//	
			//ПечатьФайла(Запись.ИмяФайла, ТекущийСертификатВХранилище);
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрСертификата(Команда)
	
	ИменаФайлов.Очистить();	
	МассивВыделенныхСтрок = Элементы.СертификатыПродукции.ВыделенныеСтроки;
	ПолучитьИменаФайловСертификатовНаСервере(МассивВыделенныхСтрок);
	Для Каждого Строка Из ИменаФайлов Цикл			
		//ТекущийСертификатВХранилище = ХранилищеЗначенияСервер(Строка.ИмяФайла);//	
		ПечатьФайла(Строка.ИмяФайла, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьСертификатовПоНоменклатуреСервере() 	
		
	//МассивВыделенныхСтрок = Элементы.СертификатыПродукции.ВыделенныеСтроки;
	//Для Каждого Строка Из МассивВыделенныхСтрок Цикл
		НЗ = РегистрыСведений.СертификатыНаПродукцию.СоздатьНаборЗаписей();
		НЗ.Отбор.Номенклатура.Установить(Объект.Ссылка);
		//НЗ.Отбор.Характеристика.Установить(Строка.Характеристика);
		//НЗ.Отбор.РегистрационныйНомер.Установить(Строка.РегистрационныйНомер);
		НЗ.Прочитать();
		Для Каждого Запись Из НЗ Цикл
			Если ЗначениеЗаполнено(Запись.ДействуетДо) И Запись.ДействуетДо < НачалоДня(ТекущаяДата()) Тогда
				Продолжить;
			КонецЕсли;
			
			ТЗ_ИменаФайлов = Запись.ХранилищеИменФайловСертификата.Получить();
			Если ТЗ_ИменаФайлов = Неопределено ИЛИ ТЗ_ИменаФайлов.Количество() = 0 Тогда
				
				НовСтрока = ИменаФайлов.Добавить();
				НовСтрока.ИмяФайла = Запись.ИмяФайла;
			Иначе
				Для Каждого СтрокаТЗ Из ТЗ_ИменаФайлов Цикл	
					НовСтрока = ИменаФайлов.Добавить();
					НовСтрока.ИмяФайла = СтрокаТЗ.ИмяФайла;		
				КонецЦикла;
			КонецЕсли;

			//НовСтрока = ИменаФайлов.Добавить();
			//НовСтрока.ИмяФайла = Запись.ИмяФайла;
			//ТекущийСертификатВХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Запись.ИмяФайла));//	
			//ПечатьФайла(Запись.ИмяФайла, ТекущийСертификатВХранилище);
		КонецЦикла;
		
	//КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСертификатовПоНоменклатуре(Команда)
	
	ИменаФайлов.Очистить();	
	
	ПечатьСертификатовПоНоменклатуреСервере();	
	
	Для Каждого Строка Из ИменаФайлов Цикл			
		//ТекущийСертификатВХранилище = ХранилищеЗначенияСервер(Строка.ИмяФайла);//	
		ПечатьФайла(Строка.ИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьСертификатовПоГруппеСервере() 	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата"	, НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Группа"		, Объект.Родитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыНаПродукциюСрезПоследних.ИмяФайла,
	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата
	|ИЗ
	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	|			,
	|			(ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ДействуетДо >= &ТекущаяДата)
	|				И Номенклатура.Родитель = &Группа) КАК СертификатыНаПродукциюСрезПоследних";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ_ИменаФайлов = Выборка.ХранилищеИменФайловСертификата.Получить();
		Если ТЗ_ИменаФайлов = Неопределено ИЛИ ТЗ_ИменаФайлов.Количество() = 0 Тогда
			
			НовСтрока = ИменаФайлов.Добавить();
			НовСтрока.ИмяФайла = Выборка.ИмяФайла;
		Иначе
			Для Каждого СтрокаТЗ Из ТЗ_ИменаФайлов Цикл	
				НовСтрока = ИменаФайлов.Добавить();
				НовСтрока.ИмяФайла = СтрокаТЗ.ИмяФайла;		
			КонецЦикла;
		КонецЕсли;

		//НовСтрока = ИменаФайлов.Добавить();
		//НовСтрока.ИмяФайла = Выборка.ИмяФайла;	
	КонецЦикла;   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСертификатовПоГруппе(Команда)
	
	ИменаФайлов.Очистить();	
	
	ПечатьСертификатовПоГруппеСервере();
	
	Для Каждого Строка Из ИменаФайлов Цикл			
		//ТекущийСертификатВХранилище = ХранилищеЗначенияСервер(Строка.ИмяФайла);//	
		ПечатьФайла(Строка.ИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

 &НаКлиенте
Процедура ПечатьФайла(пИмяФайла, СразуПечать = Истина) Экспорт
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		//Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		//	пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		//	пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		////ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		////ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\mspaint.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\notepad.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		//	пПрограмма = """C:\Program Files (x86)\Foxit Software\Foxit PhantomPDF\Foxit PhantomPDF.exe"" ""пИмяФайла""";
		//Иначе
		//	ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;
	
	ИмяКаталога = "\\server00\Temp";//РаботаСФайлами.ПолучитьИмяКаталога(); 	
	
	
	//ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Файл.Расширение);
		
	//ДвоичныеДанные = пХранилище.Получить();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ХранилищеЗначенияСервер(пИмяФайла));
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		
		Если СразуПечать = Истина Тогда
			ЗапуститьПриложение(пПрограмма);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;    	
		
КонецПроцедуры


&НаКлиенте
Процедура Сканировать(Команда)
	
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(Объект, Объект.Ссылка.УникальныйИдентификатор(), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.СертификатыПродукции.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.СертификатыПродукции.ДанныеСтроки(Элементы.СертификатыПродукции.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.ИмяФайла);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", Новый Структура(
						"КомпонентаУстановлена, ИдентификаторКлиента",
						РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту(), ИдентификаторКлиента));
	
КонецПроцедуры

&НаСервере
Функция ХранилищеЗначенияСервер(ИмяФайла)
	
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), Новый УникальныйИдентификатор);
	
КонецФункции

// Аналоги
&НаКлиенте
Процедура СоздатьАналог(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Сначала надо записать номенклатуру!");
		Возврат;
	КонецЕсли;
	
	//
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Товар", Объект.Ссылка);
	
	ОткрытьФормуМодально("Справочник.АналогиНоменклатуры.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма.Аналог);
	
	УстановитьАналоги();
	
	Элементы.КнопкаСоздатьАналог.Доступность = НЕ ЗначениеЗаполнено(Аналог); //ЭтаФорма.Аналог.Пустая();
	Элементы.КнопкаУдалитьАналог.Доступность = ЗначениеЗаполнено(Аналог);//НЕ ЭтаФорма.Аналог.Пустая();

	
КонецПроцедуры

Процедура УдалитьАналогСервер(мАналог)
	
	ОбъектСправочника = мАналог.ПолучитьОбъект();
	
	СтруктураОтбора = Новый Структура("Номенклатура", Объект.Ссылка);
	СтрокиТЧ = ОбъектСправочника.Товары.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ОбъектСправочника.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ОбъектСправочника.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьАналог(Команда)
	
	Если ЭтаФорма.Аналог.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьАналогСервер(ЭтаФорма.Аналог);
	
	ЭтаФорма.Аналог = ПредопределенноеЗначение("Справочник.АналогиНоменклатуры.ПустаяСсылка");
	Элементы.КнопкаСоздатьАналог.Доступность = Истина;
	Элементы.КнопкаУдалитьАналог.Доступность = Ложь;
	УстановитьОтборАналоги();
	
КонецПроцедуры

&НаКлиенте
Процедура АналогОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЭтаФорма.Аналог.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Ключ", ЭтаФорма.Аналог);
	ОткрытьФормуМодально("Справочник.АналогиНоменклатуры.Форма.ФормаЭлемента", ПараметрыФормы);
	
	УстановитьАналоги();
	
	Элементы.КнопкаСоздатьАналог.Доступность = НЕ ЗначениеЗаполнено(Аналог); //ЭтаФорма.Аналог.Пустая();
	Элементы.КнопкаУдалитьАналог.Доступность = ЗначениеЗаполнено(Аналог);//НЕ ЭтаФорма.Аналог.Пустая();

	
КонецПроцедуры

//+++АК РОЛИ ОТВЕТСТВЕННЫХ

//////////////////////////////////

&НаСервере
Функция РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущаяСсылка)

	//
	ВсеОК = Истина;
	
	//
	_тзРоли = тзРоли.Выгрузить();
	_тзРоли.Сортировать("Пометка ВОЗР");
	
	//
	Для каждого СтрокаТЗ Из _тзРоли Цикл
		
		//
		Если СтрокаТЗ.Пометка Тогда
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			
			//
			МЗ.Период = ТекущаяДата();
			
			//
			МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
			МЗ.Объект = ТекущаяСсылка;
			
			//
			МЗ.РольПользователя = СтрокаТЗ.Роль;
			
			//
			МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
			
			//
			Попытка
				МЗ.Записать();
			Исключение
				ВсеОК = Ложь;
			КонецПопытки;	
			
		Иначе
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				
				//
				МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
				
				//
				МЗ.Период = ТекущаяДата();
			
				//
				МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
				МЗ.Объект = ТекущаяСсылка;
				
				//
				МЗ.РольПользователя = Неопределено;
				
				//
				МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
				
				//
				Попытка
					МЗ.Записать();
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

	//
	Возврат ВсеОК;
	
КонецФункции
 
&НаКлиенте
Функция РолиОтветственныхПроверитьИЗаписатьДанные()

	//
	ВсеОК = Истина;
	Возврат ВсеОК;
	
	//
	СП = Новый Структура;
	СП.Вставить("Пометка", Истина);
	
	//
	НайденныеСтроки = тзРоли.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		Предупреждение("Объект должен быть привязан хотя бы к одной Роли");
		Возврат Ложь;		
	
	КонецЕсли; 
	
	//
	Возврат ВсеОК;

КонецФункции

&НаСервере
Процедура ЗаполнитьРолиОтветственных()

	тзРоли.Очистить();
	
	МассивДоступныхРолей = ОбщегоНазначенияПовтИсп.МассивДоступныхРолейДляНоменклатуры();
	
	ТЗ =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	РолиПользователей.Ссылка КАК Роль,
	|	РолиПользователей.ТипРоли КАК ТипРоли,
	|	РолиПользователей.Ссылка.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка,
	|	РолиПользователей.Ссылка.ПометкаУдаления
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = &Объект)
	|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
	|ГДЕ
	|	РолиПользователей.Ссылка В(&ДоступныеРоли)
	|	И РолиПользователей.ТипРоли В(&ДоступныеТипы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Объект"			, Объект.Ссылка);
	ПЗ.Параметры.Вставить("ДоступныеРоли"	, МассивДоступныхРолей.МассивДоступныхРолей);
	ПЗ.Параметры.Вставить("ДоступныеТипы"	, МассивДоступныхРолей.МассивДоступныхТиповРолей);
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		НоваяСтрока = тзРоли.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла; 

КонецПроцедуры
 
&НаКлиенте
Процедура тзРолиПометкаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.тзРоли.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Пометка = ТекущиеДанные.Пометка;
	Если Пометка Тогда
		
		//
		Для каждого СтрокаТЗ Из тзРоли Цикл
			
			//
			Если СтрокаТЗ.Роль = ТекущиеДанные.Роль Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			Если СтрокаТЗ.ТипРоли <> ТекущиеДанные.ТипРоли Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			СтрокаТЗ.Пометка = НЕ (СтрокаТЗ.ТипРоли = ТекущиеДанные.ТипРоли);
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

//---АК

&НаКлиенте
Процедура АкцииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	//
	ТекДанные = Элементы.Акции.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		//ИЛИ Не ЗначениеЗаполнено(ТекДанные.ДатаОкончания) Тогда
		//Предупреждение("Надо обязательно указать дату начала и дату окончания акции");
		Предупреждение("Надо обязательно указать дату начала акции");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.ТипСкидки) Тогда
		ТекДанные.ТипСкидки = "При покупке нескольких штук";
	КонецЕсли;	
	
	//+++АК mika 2018.06.27 ИП-00019047
	УведомелениеПользовалю = ПроверитьПериодыУстановкиЦенНоменклатуры(Объект.Ссылка, ТекДанные.ДатаНачала, ТекДанные.ДатаОкончания, ТекДанные.ДействуетВМагазине);  
	Если ЗначениеЗаполнено(УведомелениеПользовалю) Тогда
		ПоказатьПредупреждение(,УведомелениеПользовалю);
	КонецЕсли;
	//---АК mika 
	
КонецПроцедуры

&НаКлиенте
Процедура АкцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПроставитьЦенуСоСкидкойПоАкции();
	
КонецПроцедуры


//+++ZEZA 

&НаСервере
Функция ПолучитьСписокПодготовленныхПозиций()
	
	//
	РезультатСписок = Новый СписокЗначений;
	
	//
	ТЗ =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	Таблица.Статус,
	|	Таблица.Группа,
	|	Таблица.СтавкаНДС,
	|	Таблица.Фишка,
	|	Таблица.ЦенаСреднерыночная,
	|	Таблица.ПланНаименование,
	|	Таблица.ПланЦенаЗакупкиБезНДС,
	|	Таблица.ПланЦена,
	|	Таблица.ПланЧастота,
	|	Таблица.ПланКоличествоПродажНаМагазин,
	|	Таблица.ПланДатаЗапускаПредварительная,
	|	Таблица.ПланПроцентНаценки,
	|	Таблица.ПланПроцентМаржи,
	|	Таблица.ЗапускДата,
	|	Таблица.ЗапускНаименование КАК ЗапускНаименование,
	|	Таблица.ЗапускДатаНачалаПродажПредварительная,
	|	Таблица.ЗапускВес,
	|	Таблица.ЗапускЦенаЗакупкиБезНДС,
	|	Таблица.ЗапускЦена,
	|	Таблица.ЗапускПроцентНаценки,
	|	Таблица.ЗапускСтоимостьУпаковки,
	|	Таблица.ЗапускСтоимостьДоставки,
	|	Таблица.Технолог,
	|	Таблица.Автор,
	|	Таблица.ПризнакЗапуск,
	|	Таблица.ПризнакАнализПланФакт,
	|	Таблица.ПризнакАнализПрогнозФакт
	|ИЗ
	|	РегистрСведений.УЕК_РеестрЗаводимыхПозицийНоменклатуры КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.УЕК_СтатусыНоменклатуры.Подготовлена)
	|	И Таблица.Группа = &Группа
	|	И Таблица.ЗапускНаименование <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапускНаименование";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Группа", Объект.Родитель);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		РезультатСписок.Добавить(Выборка.Номенклатура, Выборка.ЗапускНаименование);	
	КонецЦикла; 
	
	//
	Возврат РезультатСписок;

КонецФункции

//---ZEZA 

&НаКлиенте
Процедура ОписаниеHtmlДокументСформирован(Элемент)
	
	Элемент.Документ.Body.ContentEditable 	= "true";
	Элемент.Документ.body.scroll 			= "yes";
	Если СтрДлина(Объект.Описание) > 0 Тогда		
		Элементы.ОписаниеHtml.Документ.Body.innerHTML = Объект.Описание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРежимыКнопокОписание()
	
	Для каждого Кнопка Из Элементы.ГруппаКоманднаяПанельОписание.ПодчиненныеЭлементы Цикл
		//Для каждого Кнопка Из Группа.ПодчиненныеЭлементы Цикл
        Если ТипЗнч(Кнопка) = тип("КнопкаФормы") Тогда
			Команда = Сред(Кнопка.Имя, 8);
			Если Элементы.ОписаниеHtml.Документ.queryCommandSupported(Команда) Тогда
				Попытка
					Кнопка.Пометка = Элементы.ОписаниеHtml.Документ.queryCommandState(Команда);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		//КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHtmlПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПоказатьРежимыКнопокОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Кнопка)
	
	Команда = Сред(Кнопка.Имя, 8);
	Если Элементы.ОписаниеHtml.Документ.queryCommandSupported(Команда) Тогда
		Элементы.ОписаниеHtml.Документ.execCommand(Команда, Ложь);
		ПоказатьРежимыКнопокОписание();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуСостав(Кнопка)
	
	//Команда = Сред(Кнопка.Имя, 9);
	//Если Элементы.ОписаниеHtml.Документ.queryCommandSupported(Команда) Тогда
	//	Элементы.СоставHtml.Документ.execCommand(Команда, Ложь);
	//	ПоказатьРежимыКнопокСостав();
	//КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРежимыКнопокСостав()
	
	//Для каждого Кнопка Из Элементы.ГруппаКоманднаяПанельСостав.ПодчиненныеЭлементы Цикл
	//	//Для каждого Кнопка Из Группа.ПодчиненныеЭлементы Цикл
	//		Если ТипЗнч(Кнопка) = тип("КнопкаФормы") Тогда
	//			Команда = Сред(Кнопка.Имя, 9);
	//			Если Элементы.СоставHtml.Документ.queryCommandSupported(Команда) Тогда
	//				Попытка
	//					Кнопка.Пометка = Элементы.СоставHtml.Документ.queryCommandState(Команда);
	//				Исключение
	//				КонецПопытки;
	//			КонецЕсли;
	//		КонецЕсли;
	//	//КонецЦикла;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставHtmlДокументСформирован(Элемент)
	
	//Элемент.Документ.Body.ContentEditable = "true";
	//Элемент.Документ.body.scroll = "yes";
	//Если СтрДлина(Объект.Состав) > 0 Тогда		
	//	Элементы.СоставHtml.Документ.Body.innerHTML = Объект.Состав;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставHtmlПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	//ПоказатьРежимыКнопокСостав();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элементы.Этикетки.ТекущиеДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если ДиалогВыбора.Выбрать() Тогда
		Элементы.Этикетки.ТекущиеДанные.ИмяФайла = ДиалогВыбора.ПолноеИмяФайла;
		
		//++ luza 05.10.2017 ИП-00015865		
		ВыбФайл = Новый Файл(ДиалогВыбора.ПолноеИмяФайла);			
		Если ВыбФайл.Существует() Тогда
			Элементы.Этикетки.ТекущиеДанные.Файл = СоздатьФайлХранения(Элементы.Этикетки.ТекущиеДанные.Файл, Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ДиалогВыбора.ПолноеИмяФайла)), ВыбФайл.Расширение);
		КонецЕсли;	
		//-- luza 05.10.2017 ИП-00015865
	КонецЕсли; 		
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеХарактеристики(Команда)
	
	Элементы.ХарактеристикиПоказатьВсеХарактеристики.Пометка = НЕ Элементы.ХарактеристикиПоказатьВсеХарактеристики.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Характеристики.Отбор, "Неактивная", Ложь,,, НЕ Элементы.ХарактеристикиПоказатьВсеХарактеристики.Пометка);
	
КонецПроцедуры

Процедура ОсвободитьНомерПоНумераторуНаСервере(Характеристика)
	
	Справочники.Номенклатура.ОсвободитьНомерПоНумератору(Объект.Ссылка, Характеристика);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОсвободитьНомерПоНумератору(Команда)
	
	ТекДанные = Элементы.Характеристики.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Ответ = Вопрос("Вы уверены, что хотите освободить номер?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ОсвободитьНомерПоНумераторуНаСервере(ТекДанные.Ссылка);
		Элементы.Характеристики.Обновить();
	КонецЕсли;
	
КонецПроцедуры

Процедура НазначитьНомерПоНумераторуСервер(Характеристика)
	
	Справочники.Номенклатура.УстановитьНомерПоНумератору(Объект.Ссылка, Характеристика);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьНомерПоНумератору(Команда)
	
	ТекДанные = Элементы.Характеристики.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		НазначитьНомерПоНумераторуСервер(ТекДанные.Ссылка);
		Элементы.Характеристики.Обновить();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредыдущуюГруппу(Ссылка, ТекущаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииОбъектов.НомерВерсии,
	|	ВерсииОбъектов.ВерсияОбъекта,
	|	ВерсииОбъектов.ДатаВерсии КАК ДатаВерсии,
	|	ВерсииОбъектов.СохраненоВФайл
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВерсии УБЫВ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СохраненоВФайл Тогда
			ВерсияОбъекта = Неопределено;
			ИмяФайл = Строка(Ссылка.УникальныйИдентификатор()) + "_" + Формат(Число(Выборка.НомерВерсии), "ЧГ=0") + ".his";
			Каталог = Константы.КаталогФайловИстории.Получить();
			Каталог = Каталог + ?(Прав(Каталог, 1) <> "\", "\", "");
			КаталогДляСохранения = Каталог + "Справочники\";
			КаталогДляСохранения = КаталогДляСохранения + Формат(Выборка.ДатаВерсии, "ДФ=yyyyMM") + "\" + Формат(Выборка.ДатаВерсии, "ДФ=dd") + "\";
			МассивФайлов = НайтиФайлы(КаталогДляСохранения, ИмяФайл);
			Если МассивФайлов.Количество() > 0 Тогда
				ВерсияОбъекта = ЗначениеИзФайла(МассивФайлов[0].ПолноеИмя).Получить();
			КонецЕсли;	
		Иначе	
			ВерсияОбъекта = Выборка.ВерсияОбъекта.Получить();
		КонецЕсли;	
		
		Если ВерсияОбъекта = Неопределено Тогда
			Продолжить;
		Иначе
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			ВерсияОбъекта.Записать(ИмяВременногоФайла);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			УдалитьФайлы(ИмяВременногоФайла);
			
			СтрокаXML = ВРег(СтрЗаменить(СтрокаXML, Символы.ПС, ""));
			СтрокаXML = СтрЗаменить(СтрокаXML, "<PARENT>", Символы.ПС);
			Если СтрЧислоСтрок(СтрокаXML) > 1 Тогда
				СтрокаУин = СтрЗаменить(СтрПолучитьСтроку(СтрокаXML, 2), "</PARENT>", Символы.ПС);
				СтрокаУин = СтрПолучитьСтроку(СтрокаУин, 1);
				Попытка
					Группа = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУин));
					Если Группа <> ТекущаяГруппа Тогда
						Возврат Группа;
					КонецЕсли;	
				Исключение
				КонецПопытки;	
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ВосстановитьПредыдущуюГруппу(Команда)
	
	//ГруппаПред = ПолучитьПредыдущуюГруппу(Объект.Ссылка, Объект.Родитель);
	//Если ГруппаПред <> Неопределено Тогда
	//	Объект.Родитель = ГруппаПред;
	//КонецЕсли;
	Объект.Родитель = Объект.ГруппаДоПомещенияВАрхив;
	
КонецПроцедуры


&НаКлиенте
Процедура УсловияДляПодаркаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если НЕ ЗначениеЗаполнено(Элементы.УсловияДляПодарка.ТекущиеДанные.ДатаНачала)
			ИЛИ НЕ ЗначениеЗаполнено(Элементы.УсловияДляПодарка.ТекущиеДанные.ДатаОкончания) Тогда
		Предупреждение("Надо обязательно указать дату начала и дату окончания акции");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьДатыИзмененияФайлов()
	
	Для Каждого Стр из Объект.Этикетки Цикл
		Файл = Новый Файл(Стр.ИмяФайла);
		Попытка
			Стр.ДатаИзменения = Файл.ПолучитьВремяИзменения();	
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДатыИзмененияФайлов", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиРазмещенаНаСайтеПриИзменении(Элемент)
	
	Если Элементы.Этикетки.ТекущиеДанные.РазмещенаНаСайте Тогда
		Для Каждого СтрокаТаб Из Объект.Этикетки Цикл
			Если СтрокаТаб.НомерСтроки <> Элементы.Этикетки.ТекущиеДанные.НомерСтроки
					И СтрокаТаб.РазмещенаНаСайте Тогда
				СтрокаТаб.РазмещенаНаСайте = Ложь;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПродукцииПередУдалением(Элемент, Отказ)
	
	Если НЕ МожетУдалятьСертификаты Тогда
		Сообщить("Вам запрещено удалять сертификаты");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПоставщиков(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Номенклатура", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.ЦеныПоставщиков.Форма.ФормаСписка1", СтруктураПараметров, ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрЭтикетки(Команда)
	
	Если Элементы.Этикетки.ТекущиеДанные <> Неопределено Тогда
		ЗапуститьПриложение(Элементы.Этикетки.ТекущиеДанные.ИмяФайла);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТовараПриИзменении(Элемент)
	
	УстановитьВидимостьНастроекУчета();
	
	ОбновитьВидимостьТорговойМаркиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура БезОстатковПриИзменении(Элемент)
	
	Предупреждение("При записи этого товара будет вызвана процедура удаления/возврата остатков на всех магазинах. Надеемся вы уверены в своих действиях");
	
КонецПроцедуры

&НаКлиенте
Процедура АкцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//mind 
	ДатаНачВрем = Элементы.Акции.ТекущиеДанные.ДатаНачала;
	ДатаКонВрем = Элементы.Акции.ТекущиеДанные.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура АкцииДатаНачалаПриИзменении(Элемент)
	
	//mind 
	Если ЗначениеЗаполнено(ДатаНачВрем)
		И ДатаНачВрем <> Элементы.Акции.ТекущиеДанные.ДатаНачала
		И ДатаНачВрем < НачалоДня(ТекущаяДата()) Тогда
		Элементы.Акции.ТекущиеДанные.ДатаНачала = ДатаНачВрем;
		Сообщить("Нельзя редактировать дату начала, так как она меньше, чем текущая дата");
	Иначе
		Если Элементы.Акции.ТекущиеДанные.ДатаНачала < НачалоДня(ТекущаяДата())
			И ДатаНачВрем <> Элементы.Акции.ТекущиеДанные.ДатаНачала Тогда
			Элементы.Акции.ТекущиеДанные.ДатаНачала = ТекущаяДата();
			Сообщить("Нельзя установить дату ранее, чем сегодня");
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АкцииПередУдалением(Элемент, Отказ)
	
	//mind 
	Если Элементы.Акции.ТекущиеДанные.ДатаНачала < НачалоДня(ТекущаяДата()) Тогда
		Отказ = Истина;
		Сообщить("Нельзя удалить строку, так как дата начала меньше текущей даты");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АкцииДатаОкончанияПриИзменении(Элемент)
	
	//mind
	Если ЗначениеЗаполнено(ДатаКонВрем)
		И ДатаКонВрем <> Элементы.Акции.ТекущиеДанные.ДатаОкончания
		И ДатаКонВрем < НачалоДня(ТекущаяДата()) Тогда
		Элементы.Акции.ТекущиеДанные.ДатаОкончания = ДатаКонВрем;
		//+++АК mika 2018.06.28 ИП-00019122
		//Сообщить("Нельзя редактировать дату окончания, так как она меньше, чем текущая дата");
        ПоказатьПредупреждение(,"Нельзя редактировать дату окончания, так как она меньше, чем текущая дата  
								|Примечание: Дата окончания - это последний день срока действия акции (включительно)");
		//---АК mika 
	Иначе
		Если Элементы.Акции.ТекущиеДанные.ДатаОкончания < НачалоДня(ТекущаяДата())
			И ДатаКонВрем <> Элементы.Акции.ТекущиеДанные.ДатаОкончания Тогда
			Элементы.Акции.ТекущиеДанные.ДатаОкончания = ТекущаяДата();
			//+++АК mika 2018.06.28 ИП-00019122
			//Сообщить("Нельзя установить дату ранее, чем сегодня");
       	    ПоказатьПредупреждение(,"Нельзя установить дату ранее, чем сегодня
								    |Примечание: Дата окончания - это последний день срока действия акции (включительно)");
			//---АК mika
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйФорматПриИзменении(Элемент)
	
	ПолучитьПримерЗаполненияКлиент();
	
КонецПроцедуры


//++ luza 05.10.2017 ИП-00015865
&НаСервере
Функция СоздатьФайлХранения(Файл, СтрокаТаблицы, РасширениеРезультата)
	
	Если ЗначениеЗаполнено(Файл) = Истина Тогда		
		СпрОбъект = Файл.ПолучитьОбъект();
	Иначе
		СпрОбъект = Справочники.Файлы.СоздатьЭлемент();	
		СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
		СпрОбъект.Расширение 	= РасширениеРезультата;
	КонецЕсли;
	
	Если Лев(НРег(РасширениеРезультата),4)=".doc" Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтрокаТаблицы.ДанныеКартинки));
	Иначе	
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	КонецЕсли;		
	СпрОбъект.Записать();	
	Возврат СпрОбъект.Ссылка;	
	
КонецФункции


&НаКлиенте
Процедура ЭтикеткиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Копирование Тогда
		 Элементы.Этикетки.ТекущиеДанные.Файл = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка");
	КонецЕсли;	
КонецПроцедуры
//-- luza 05.10.2017 ИП-00015865

//+++АК SHEP 2017.11.27 ИП-00017229
&НаСервереБезКонтекста
Функция ЗаписатьФайлНаСервере(АдресВременногоХранилища, КаталогХраненияФайлов, ИмяФайла)
Перем Файл, ДвоичныеДанные;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Файл = Новый Файл(ИмяФайла);
	ОтносительноеИмяФайла = Строка(Новый УникальныйИдентификатор) + Файл.Расширение;
	
	Попытка
		ДвоичныеДанные.Записать(КаталогХраненияФайлов + ОтносительноеИмяФайла);
	Исключение
		Сообщить("Не удалось добавить файл.");
		Возврат "";
	КонецПопытки;
	
	Возврат ОтносительноеИмяФайла;
КонецФункции

//+++АК SHEP 2017.11.27 ИП-00017229
&НаКлиенте
Процедура ПрочиеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
Перем Файл, ОтносительноеИмяФайла;
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Вопрос("Справочник сначала нужно записать.
		|
		|Записать данные?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записать();
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Все файлы (*.*)|*.*|";
	
	Если ДиалогОткрытияФайла.Выбрать() = Ложь Тогда
	    Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
	ОтносительноеИмяФайла = ЗаписатьФайлНаСервере(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя)), КаталогХраненияФайлов, Файл.Имя);
	Если НЕ ЗначениеЗаполнено(ОтносительноеИмяФайла) Тогда
		Предупреждение("Ошибка при добавлении файла!");
		Возврат;
	КонецЕсли;
	
	СтрокаПрочиеФайлы = Объект.ПрочиеФайлы.Добавить();
	СтрокаПрочиеФайлы.НазваниеФайла = Файл.Имя;
	СтрокаПрочиеФайлы.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	СтрокаПрочиеФайлы.ТипФайла = СтрЗаменить(Элемент.Имя, "Файлы", "");
	Элемент.ТекущаяСтрока = СтрокаПрочиеФайлы.ПолучитьИдентификатор();
	Модифицированность = Истина;

КонецПроцедуры

//+++АК SHEP 2017.11.27 ИП-00017229
&НаКлиенте
Процедура ПрочиеФайлыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Вопрос("Удалить файл?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.ОтносительноеИмяФайла) Тогда
		УдалитьФайлНаСервере(КаталогХраненияФайлов + ТекущиеДанные.ОтносительноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.27 ИП-00017229
&НаСервереБезКонтекста
Процедура УдалитьФайлНаСервере(ИмяФайла)
Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.27 ИП-00017229
&НаСервереБезКонтекста
Функция ПолучитьФайлНаСервере(ИмяФайла, УникальныйИдентификатор)
Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

//+++АК SHEP 2017.11.27 ИП-00017229
&НаКлиенте
Процедура ПрочиеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
Перем Файл, ОтносительноеИмяФайла;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ОтносительноеИмяФайла = ТекущиеДанные.ОтносительноеИмяФайла;
	Если НЕ ПустаяСтрока(ОтносительноеИмяФайла) Тогда
		АдресВремХранилища = ПолучитьФайлНаСервере(КаталогХраненияФайлов + ОтносительноеИмяФайла, УникальныйИдентификатор);
		Если ЗначениеЗаполнено(АдресВремХранилища) Тогда
			Файл = Новый Файл(ОтносительноеИмяФайла);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Файл.Расширение);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВремХранилища);
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.27 ИП-00017229
&НаКлиенте
Процедура ПрочиеФайлыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПолеКартинкиТекСтроки = ?(ТекущиеДанные = Неопределено, "", ПолучитьФайлНаСервере(КаталогХраненияФайлов + ТекущиеДанные.ОтносительноеИмяФайла, УникальныйИдентификатор));
	
КонецПроцедуры

//+++АК SHEP 2017.11.27 ИП-00017229
&НаКлиенте
Процедура СтраницыОтзывыПоПродуктуПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекСтраницаИмя = ТекущаяСтраница.Имя;
	Если Найти(ТекСтраницаИмя, "СтраницаФайлы") = 1 Тогда
		ПрочиеФайлыПриАктивизацииСтроки(Элементы[СтрЗаменить(ТекСтраницаИмя, "СтраницаФайлы", "Файлы")]);
	ИначеЕсли ТекСтраницаИмя = "СтраницаРейтинги" И ТЗ_Рейтинги.Количество() = 0 Тогда
		ЗаполнитьРейтингиТовараНаСервере();
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.27 ИП-00017229
&НаСервере
Процедура ЗаполнитьРейтингиТовараНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.id_tov) Тогда Возврат; КонецЕсли;
	
	ТекстЗапросаSQL = "SET NOCOUNT ON -- чтобы не возвращало несколько RecordSet'ов
		|if OBJECT_ID('tempdb..#rr') is not null drop table #rr
		|
		|create table #rr (id_tov int, id_kontr int, колво int,
		|reiting_avg real, reiting real, Доля5 int , Доля12 int, ДоляПост int, date_min date , date_max date, date_r date)
		|
		|declare @date1 date, @date2 date, @currdate date = GETDATE()
		|select @date2 = dateadd(DAY, -1, @currdate)
		|select @date1 = dateadd(WEEK, -1, @currdate)
		|
		|insert into #rr (id_tov, id_kontr, колво,
		|				reiting_avg, reiting, Доля5, Доля12, ДоляПост, date_min, date_max)
		|exec SMS_REPL..reiting @date1, null, " + ВнешниеДанные.ФорматПоля(Объект.id_tov) + "
		|
		|select  
		|	t.Name_tov [Товар],
		|	k.Name_Har [Характеристика],
		|	r.reiting [Рейтинг]
		|from #rr r
		|inner join M2..Tovari t on t.id_tov = r.id_tov
		|left join M2..Tovar_Har k on k.id_tov = r.id_tov and k.id_kontr = r.id_kontr";
	
	МассивПолейДляПолучения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товар,Характеристика,Рейтинг");
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ВыборкаSQL = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка	
		ВыборкаSQL.MoveFirst();
		Пока НЕ ВыборкаSQL.EOF() Цикл
			СтрокаДоб = ТЗ_Рейтинги.Добавить();
			
			Для Каждого ПолеДляПолучения Из МассивПолейДляПолучения Цикл
				СтрокаДоб[ПолеДляПолучения] = ВыборкаSQL.Fields(ПолеДляПолучения).Value;
			КонецЦикла;
			
			ВыборкаSQL.MoveNext();
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	//+++АК BARA 2017.12.19    17379
	ПВХ_МожетРедактироватьЭтикеткиНоменклатуры = ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.МожетРедактироватьЭтикеткиНоменклатуры");
	РедактированиеЭтикеток = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПВХ_МожетРедактироватьЭтикеткиНоменклатуры, Ложь);
	Если РедактированиеЭтикеток = Ложь и РольДоступнаСервер("УправлениеГруппамиНоменклатурыДляСайта") Тогда
		Отказ = Истина;
	КонецЕсли;
	//---АК BARA 2017.12.19    17379
КонецПроцедуры

//+++АК BARA 2017.12.19    17379
Функция РольДоступнаСервер(ИмяРоли)

	
Возврат РольДоступна(ИмяРоли);
КонецФункции // ()


&НаКлиенте
Процедура ЭтикеткиПередУдалением(Элемент, Отказ)
	
	//+++АК BARA 2017.12.19    17379
	ПВХ_МожетРедактироватьЭтикеткиНоменклатуры = ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.МожетРедактироватьЭтикеткиНоменклатуры");

	РедактированиеЭтикеток = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПВХ_МожетРедактироватьЭтикеткиНоменклатуры	, Ложь);
	Если РедактированиеЭтикеток = Ложь и РольДоступнаСервер("УправлениеГруппамиНоменклатурыДляСайта") Тогда
		Отказ = Истина;
	КонецЕсли;
	//---АК BARA 2017.12.19    17379

КонецПроцедуры

//+++АК POZM 2017.12.26 ИП-00017352 
&НаКлиенте
Процедура ЭтоХолодильникПриИзменении(Элемент)
	Элементы.ТипХолодильника.Видимость = Объект.ЭтоХолодильник;
	//+++АК SaMi 2018.10.17 ИП-00019767^01 
	Элементы.МодельХолодильника.Видимость = Объект.ЭтоХолодильник;
	//---АК SaMi  2018.10.17 
КонецПроцедуры
//---АК POZM 

&НаКлиенте
Процедура ОбновитьВидимостьТорговойМаркиКлиент() //+++АК mika 2018.02.13 ИП-00016863.02
	
	Если Объект.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар") Тогда
		Элементы.ТорговаяМарка.Видимость = Истина;
	//+++АК CISA 2018.10.31 ИП-00020203
	//Иначе
	//	Элементы.ТорговаяМарка.Видимость = Ложь;
	//	Если ЗначениеЗаполнено(Объект.ТорговаяМарка) Тогда
	//		Объект.ТорговаяМарка = ПредопределенноеЗначение("Справочник.ТорговыеМарки.ПустаяСсылка");
	//	КонецЕсли;
	//---АК CISA
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяМаркаПриИзменении(Элемент)
	Если Объект.ТорговаяМарка = ПредопределенноеЗначение("Справочник.ТорговыеМарки.Избенка") ТОгда
		Сообщить("Работа с торговой маркой ""Избенка"" не предусмотрена");
	КонецЕСли;
		
	ЗаполнитьПланограммы();
КонецПроцедуры

//+++АК LAGP 2018.04.26 ИП-00018145.02 Поиск в макете по полному коду
&НаСервереБезКонтекста
Функция ПоискТНВЭДВМакетеПоКоду(Текст)
	
	ТаблицаПоказателей = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();	
	
	НайденнаяСтрокаВКлассификаторе = ТаблицаПоказателей.Найти(Текст, "Код");
	
	Если НЕ НайденнаяСтрокаВКлассификаторе = Неопределено Тогда
		СтруктураНайденной = Новый Структура;
		СтруктураНайденной.Вставить("Код", НайденнаяСтрокаВКлассификаторе.Код);
		СтруктураНайденной.Вставить("Наименование", НайденнаяСтрокаВКлассификаторе.Наименование);
		СтруктураНайденной.Вставить("ЕдиницаИзмерения", НайденнаяСтрокаВКлассификаторе.ЕдиницаИзмерения);
		Возврат СтруктураНайденной;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

//+++АК LAGP 2018.04.26 ИП-00018145.02 
// Добавляет новый элемент в классификатор
// Параметры:
// - ВыбраннаяСтрока - Строка таблицы, источник данных для заполнения реквизитов классификатораъ
// 		Если в строке присутсвуют данные о единице измерения, 
//		запускается поиск и добавление единицы измерения
&НаСервере
Функция ДобавитьЭлементКлассификатора(ВыбраннаяСтрока)
	
	ЭлементКлассификатора = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ЭлементКлассификатора, ВыбраннаяСтрока);
	ЭлементКлассификатора.НаименованиеПолное = ВыбраннаяСтрока.Наименование;
	ЭлементКлассификатора.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(
		ВыбраннаяСтрока.ЕдиницаИзмерения);
	
	//МетаданныеСправочник = Метаданные.Справочники.КлассификаторТНВЭД;
	
	ЭлементКлассификатора.Записать();
	Возврат ЭлементКлассификатора.Ссылка;
	
КонецФункции

//+++АК LAGP 2018.04.26 ИП-00018145.02 Поиск в макете по полному коду
&НаКлиенте
Процедура КодТНВЭДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) = 10 И ДанныеВыбора = Неопределено Тогда	
		НайденнаяСтрокаВКлассификаторе = ПоискТНВЭДВМакетеПоКоду(Текст);
		
		Если НЕ НайденнаяСтрокаВКлассификаторе = Неопределено Тогда  //Если понадобится задать вопрос, то здесь
			НовыйЭлемент = ДобавитьЭлементКлассификатора(НайденнаяСтрокаВКлассификаторе);
			Объект.КодТНВЭД = НовыйЭлемент;
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
// Функция проверяет наличие установленных цен за последние 2 дня //+++АК mika 2018.06.27 ИП-00019047
// перед началом акции, а также в "период действия акции". 
//
// Параметры:
//  Номенклатура  - <Тип.СправочникСсылкаНоменклатура> - Контролируемый товар
//  ДатаНачала    - <Тип.Дата> - Дата начала акции
//  ДатаОкончания  - <Тип.Дата> - Дата окончания акции
//  ДействуетВМагазине - <Тип.СправочникСсылкаСтруктурныеЕдиницы> - Контролируемый магазин
//
// Возвращаемое значение:
//   <Тип.Строка>   - Текст уведомления
//
Функция ПроверитьПериодыУстановкиЦенНоменклатуры(Номенклатура, ДатаНачала, ДатаОкончания, ТорговаяТочка)
	
	ТекстУведомления = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры.Период КАК Период,
	|	ЦеныНоменклатуры.ТипЦен,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ""Все магазины""
	|		ИНАЧЕ ЦеныНоменклатуры.ТорговаяТочка
	|	КОНЕЦ КАК ТорговаяТочка,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена КАК ЦенаПозиции,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ), ДЕНЬ, -2) И &ДатаНачала
	|			ТОГДА ""Перед началом акции: ""
	|		КОГДА ЦеныНоменклатуры.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ТОГДА ""В период акции: ""
	|		КОГДА ЦеныНоменклатуры.Период > &ДатаОкончания
	|			ТОГДА ""После окончания акции: ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПериодУстановки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Период >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ), ДЕНЬ, -2)
	|	И ЦеныНоменклатуры.Номенклатура = &Номенклатура
	|	И (ЦеныНоменклатуры.ТорговаяТочка = &ТорговаяТочка
	|			ИЛИ ЦеныНоменклатуры.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	ПериодУстановки";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТекстУведомления = ТекстУведомления + СтрЗаменить("ВНИМАНИЕ: Проверьте условия акции! 
		                                                  |По номенклатуре Номенклатура есть недавно установленные цены:", "Номенклатура", Номенклатура)+ Символы.ПС+ Символы.ПС;  
		
		ВыборкаПериодУстановки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПериодУстановки.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПериодУстановки.ПериодУстановки) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстУведомления = ТекстУведомления + ВыборкаПериодУстановки.ПериодУстановки + Символы.ПС; 
			
			ВыборкаДетальныеЗаписи = ВыборкаПериодУстановки.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ШаблонУведомлния = "    Дата: Период, Тип цен: ТипЦен, Цена: ЦенаПозиции;" + Символы.ПС;
				Для каждого Колонка из РезультатЗапроса.Колонки Цикл
					ШаблонУведомлния = СтрЗаменить(ШаблонУведомлния, Колонка.Имя , ?(Колонка.Имя = "Период",Формат(ВыборкаДетальныеЗаписи[Колонка.Имя], "ДФ=dd.MM.yyyy"),ВыборкаДетальныеЗаписи[Колонка.Имя]));        
				КонецЦикла;
				ТекстУведомления = ТекстУведомления + ШаблонУведомлния;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат ТекстУведомления;
	
КонецФункции // ПроверитьПериодыУстановкиЦенНоменклатуры()

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Процедура УстановитьТекстВБуферОбмена(Текст)
    ОбъектHTMLFile = Новый COMОбъект("htmlfile");
    ОбъектHTMLFile.ParentWindow.ClipboardData.Setdata("Text", Текст);
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Функция ПолучитьТекстИзБуфераОбмена()
    ОбъектHTMLFile = Новый COMОбъект("htmlfile");
    Возврат ОбъектHTMLFile.ParentWindow.ClipboardData.Getdata("Text");
КонецФункции

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Процедура СкопироватьТекстВБуферОбмена(Команда)
	
	ИмяСтраницыФишкиРазвёрнуто = Элементы.СтраницыФишкаРазвёрнуто.ТекущаяСтраница.Имя;
	ТекИмяЭлемента = Сред(ИмяСтраницыФишкиРазвёрнуто, СтрДлина("Страница") + 1);
	ТекстФишкиРазвёрнуто = ?(Элементы.Найти(ТекИмяЭлемента) = Неопределено, Объект.ФишкаРазвёрнуто, ЭтаФорма[ТекИмяЭлемента]);
	УстановитьТекстВБуферОбмена(ТекстФишкиРазвёрнуто);
	
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Процедура ВставитьТекстИзБуфераОбмена(Команда)
	
	ТекстФишкиРазвёрнуто = ПолучитьТекстИзБуфераОбмена();
	ИмяСтраницыФишкиРазвёрнуто = Элементы.СтраницыФишкаРазвёрнуто.ТекущаяСтраница.Имя;
	ТекИмяЭлемента = Сред(ИмяСтраницыФишкиРазвёрнуто, СтрДлина("Страница") + 1);
	Если Элементы.Найти(ТекИмяЭлемента) = Неопределено Тогда
		Объект.ФишкаРазвёрнуто = ТекстФишкиРазвёрнуто;
	Иначе
		ЭтаФорма[ТекИмяЭлемента] = ТекстФишкиРазвёрнуто;
		Подключаемый_ФишкаРазвёрнутоХарактеристикиПриИзменении(Элементы[ТекИмяЭлемента]);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Процедура СтраницыФишкаРазвёрнутоПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Элементы.ЗаписатьИзмененияХарактеристики.Доступность = (ТекущаяСтраница <> Элементы.ФишкаРазвёрнутоНоменклатуры);
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаКлиенте
Процедура ЗаписатьИзмененияХарактеристики(Команда)
	
	СтраницаФишкиРазвёрнуто = Элементы.СтраницыФишкаРазвёрнуто.ТекущаяСтраница;
	ТекИмяЭлемента = Сред(СтраницаФишкиРазвёрнуто.Имя, СтрДлина("Страница") + 1);
	Если Элементы.Найти(ТекИмяЭлемента) = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекстФишкиРазвёрнуто = ЭтаФорма[ТекИмяЭлемента];
	
	ЗаписатьИзмененияХарактеристикиНаСервере(СтраницаФишкиРазвёрнуто.Имя, ТекстФишкиРазвёрнуто);
	УстановитьМодифицированностьЗаголовка(СтраницаФишкиРазвёрнуто, Ложь);
	
КонецПроцедуры

//+++АК SHEP 2018.07.04 ИП-00018818
&НаСервере
Процедура ЗаписатьИзмененияХарактеристикиНаСервере(ИмяСтраницы, ФишкаРазвёрнуто)
	
	МассивСтрокТЗн = ФишкиРазвёрнутоХарактеристик.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	Если МассивСтрокТЗн.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		СпрХарактеристикиНоменклатурыОбъект = МассивСтрокТЗн[0].ХарактеристикаНоменклатуры.ПолучитьОбъект();
		СпрХарактеристикиНоменклатурыОбъект.ФишкаРазвёрнуто = ФишкаРазвёрнуто;
		СпрХарактеристикиНоменклатурыОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		МассивСтрокТЗн[0].Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//+++АК mika 2018.07.27 ИП-00018955
&НаКлиенте
Процедура КомандаОпросыПокупателейТелеграм(Команда) 
	ОткрытьФорму("Отчет.ОпросыПокупателей.Форма.ФормаОтчета", Новый Структура("Номенклатура, ВидОтчета, СформироватьПриОткрытии", Объект.Ссылка, "Телеграм", Истина));
КонецПроцедуры

//+++АК mika 2018.07.27 ИП-00018955
&НаКлиенте
Процедура КомандаОпросыПокупателейУстные(Команда) 
	ОткрытьФорму("Отчет.ОпросыПокупателей.Форма.ФормаОтчета", Новый Структура("Номенклатура, ВидОтчета, СформироватьПриОткрытии", Объект.Ссылка, "Устный опрос", Истина));
КонецПроцедуры

//+++АК CISA 2018.10.31 ИП-00020203
&НаКлиенте
Процедура РекламныйМатериалПриИзменении(Элемент)	
	Если Объект.РекламныйМатериал Тогда
		Если УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.ПолныеПраваПоРекламнымМатериалам"), Ложь) Тогда
			Если Объект.ТорговаяМарка.Пустая() Тогда
				Объект.ТорговаяМарка = ПредопределенноеЗначение("Справочник.ТорговыеМарки.ВкусВилл");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//+++АК CISA 2018.11.20 ИП-00020432
&НаСервереБезКонтекста
Функция ВернутьУровеньЭлемента(ГруппаНоменклатурыУРЗ)
	
	Если НЕ ГруппаНоменклатурыУРЗ.Пустая() Тогда
		Возврат ГруппаНоменклатурыУРЗ.Уровень();
	КонецЕсли;
	
КонецФункции
	
//+++АК CISA 2018.11.20 ИП-00020432
&НаКлиенте
Процедура ГруппаНоменклатурыУРЗПриИзменении(Элемент)
	
	Уровень = ВернутьУровеньЭлемента(Объект.ГруппаНоменклатурыУРЗ);
	Если Уровень > 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Доступен выбор только элементов первого уровня!";
		Сообщение.Поле = "Объект.ГруппаНоменклатурыУРЗ";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Объект.ГруппаНоменклатурыУРЗ = ПредопределенноеЗначение("Справочник.ГруппыНоменклатурыУРЗ.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры


