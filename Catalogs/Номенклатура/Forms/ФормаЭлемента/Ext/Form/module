
Перем мЕдиницаИзмеренияВеса;


// Функция возвращает значения констант, имена которых переданы в структуре.
//
// Параметры:
//  СтруктураКонстант - структура с именами нужных констант.
//
// Возвращаемое значение:
//  Выборка из результата запроса по константам.
//
Функция ПолучитьКонстанты(СтруктураКонстант)

	Запрос = Новый Запрос;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|";

	Для Каждого ТекКонстанта Из СтруктураКонстант Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаКонстант." + ТекКонстанта.Ключ + ",";
	КонецЦикла;

	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);

	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Константы КАК ТаблицаКонстант
	|";

	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка;

КонецФункции // ПолучитьКонстанты()

Функция ПолучитьПолноеИмяФайла(ТекСтрока)
	
	КаталогКЗаписи = Константы.КаталогХраненияФайлов.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	
	
	ИмяФайла = КаталогКЗаписи + Строка(Ссылка.УникальныйИдентификатор()) + "_" + Строка(ТекСтрока.КлючСтроки) + ?(Лев(ТекСтрока.Расширение, 1) = ".", "", ".") + ТекСтрока.Расширение;
	
	Возврат ИмяФайла;
	
КонецФункции

// Процедура записывает единицу хранения остатков номенклатуры.
//
Процедура ПроверитьЕдиницуХраненияОстатков(Отказ)

	Если ЗначениеЗаполнено(ЕдиницаХраненияОстатков) Тогда
		Возврат;
	КонецЕсли;

	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, Ссылка);
	Если ВыборкаЕдиниц.Следующий() Тогда
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
	Иначе
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НайденнаяЕдиницаОбъект.Наименование            = БазоваяЕдиницаИзмерения.Наименование;
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = Ссылка;

		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать единицу хранения остатков: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецПопытки;

		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
	КонецЕсли;

	ЕдиницаХраненияОстатков = НайденнаяЕдиница;

	Попытка
		ЗаписатьВФорме();
	Исключение
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ПроверитьЕдиницуХраненияОстатков()

// Процедура заполняет реквизиты значениями по умолчанию.
//
Процедура ЗаполнитьРеквизитыПоУмолчанию()

	Если НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
		БазоваяЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		Если ЗначениеЗаполнено(Родитель.ВидНоменклатуры) Тогда
			ВидНоменклатуры = Родитель.ВидНоменклатуры;
		Иначе
			ВидНоменклатуры = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойВидНоменклатуры");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыПоУмолчанию()

Процедура УстановитьВидимость()
	
	ЭлементыФормы.НадписьТипОборудования.Видимость 	= (ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование);
	ЭлементыФормы.ТипОборудования.Видимость 		= (ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование);
	
КонецПроцедуры

Процедура УстановитьВидимостьПриОткрытии()

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	Если НЕ ЗначениеЗаполнено(мЕдиницаИзмеренияВеса) Тогда
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Вес.ТекстШапки = "Вес (не назначена единица измерения)";
	Иначе
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Вес.ТекстШапки = "Вес (" + мЕдиницаИзмеренияВеса.Наименование + ")";
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьПриОткрытии()

Процедура УстановитьАвтоотметкуНезаполненногоУРЗ()
	
	мУстанавливать = (ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
							ИЛИ ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал)
						И НЕ ЭтотОбъект.Выведена;
	
	ЭлементыФормы.ГруппаНоменклатурыУРЗ.АвтоОтметкаНезаполненного 	= мУстанавливать;
	ЭлементыФормы.ГруппаНоменклатурыУРЗ.АвтоВыборНезаполненного 	= мУстанавливать;
	
КонецПроцедуры


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Для нового элемента заполним пустые реквизиты значениями по умолчанию.
	Если ЭтоНовый() Тогда
		ЗаполнитьРеквизитыПоУмолчанию();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Планограммы.Ссылка КАК Планограмма,
	               |	ВЗ_Выкладка.МестоВыкладки КАК МестоВыкладки
	               |ИЗ
	               |	Справочник.Планограммы КАК Планограммы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВыкладкаПланограммы.Планограмма КАК Планограмма,
	               |			ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки
	               |		ИЗ
	               |			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	               |		ГДЕ
	               |			ВыкладкаПланограммы.Номенклатура = &Номенклатура) КАК ВЗ_Выкладка
	               |		ПО Планограммы.Ссылка = ВЗ_Выкладка.Планограмма
	               |ГДЕ
	               |	Планограммы.НеАктуальная = ЛОЖЬ";
				   
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПланограммы.Добавить(), Выборка);
	КонецЦикла;	
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные;
	КонецЕсли;
	
	УстановитьВидимостьПриОткрытии();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
	УстановитьВидимость();
	//УстановитьАвтоотметкуНезаполненногоУРЗ();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЭтотОбъект.Выведена
		И ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		И (ЭтотОбъект.ТипТовара = Перечисления.ТипыТоваров.ПокупнойТовар
			ИЛИ ЭтотОбъект.ТипТовара = Перечисления.ТипыТоваров.Продукция) Тогда
		СтрокаНеЗаполнено = ТаблицаПланограммы.Найти(Справочники.МестаВыкладки.ПустаяСсылка(), "МестоВыкладки");
		Если НЕ СтрокаНеЗаполнено = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя записать номенклатуру не привязав места выкладки во все планограммы (закладка Планограммы)",,,, Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Перед записью необходимо определить базовую единицу измерения!", Отказ);
	Иначе
		ПроверитьЕдиницуХраненияОстатков(Отказ);
	КонецЕсли;

	Если ПустаяСтрока(ЕдиницаХраненияОстатков) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Перед записью необходимо определить единицу хранения остатков!", Отказ);
	КонецЕсли;
	
	Набор = РегистрыСведений.ВыкладкаПланограммы.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(Ссылка);
	Для Каждого СтрокаТаб Из ТаблицаПланограммы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаб.МестоВыкладки) Тогда
			Продолжить;
		КонецЕсли;	
		Запись = Набор.Добавить();
		Запись.Планограмма = СтрокаТаб.Планограмма;
		Запись.Номенклатура = Ссылка;
		Запись.МестоВыкладки = СтрокаТаб.МестоВыкладки;
	КонецЦикла;
	Набор.Записать();
	
КонецПроцедуры


// Обработчик события элемента КоманднаяПанельФормы.Файлы.
//
Процедура ДействияФормыФайлы(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений 			= Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов 	= Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);

	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры // ДействияФормыФайлы()

Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = Ссылка;
	
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	УстановитьВидимость();
	//УстановитьАвтоотметкуНезаполненногоУРЗ();
	
КонецПроцедуры

Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное = РезультатВыбора.Значение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыведенаПриИзменении(Элемент)
	
	//УстановитьАвтоотметкуНезаполненногоУРЗ();
	
КонецПроцедуры



Процедура КартинкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайлаКартинки");
	Если СтруктураВозврат <> Неопределено
		И СтруктураВозврат.БылВыборФайла Тогда
		Файл = Новый Файл(СтруктураВозврат.ИмяФайла);
		СтрокаДоб = Картинки.Добавить();
		СтрокаДоб.ИД = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура.Картинки", "ИД") + СтрокаДоб.НомерСтроки;
		СтрокаДоб.КраткоеИмяФайла = Файл.ИмяБезРасширения;
		СтрокаДоб.Расширение = Файл.Расширение;
		СтрокаДоб.ВнесеныИзменения = Истина;
		СтрокаДоб.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		СтрокаДоб.ХранилищеКЗаписи = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураВозврат.ИмяФайла));
		СтрокаДоб.Размер = Файл.Размер();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКартинкуИзФайла(ТекСтрока)
	
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	
	ИмяФайла = КаталогКЗаписи + Строка(Ссылка.УникальныйИдентификатор()) + "_" + Строка(ТекСтрока.КлючСтроки) + ?(Лев(ТекСтрока.Расширение, 1) = ".", "", ".") + ТекСтрока.Расширение;
	
	Возврат Новый Картинка(ИмяФайла);
	
КонецФункции	

Процедура КартинкиПриАктивизацииСтроки(Элемент)
	
	Картинка = Новый Картинка;
	ТекСтрока = ЭлементыФормы.Картинки.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ВнесеныИзменения Тогда
			Картинка = Новый Картинка(ТекСтрока.ХранилищеКЗаписи.Получить());
		Иначе
			Картинка = ПолучитьКартинкуИзФайла(ТекСтрока);
		КонецЕсли;	
	КонецЕсли;
	
	ЭлементыФормы.ПолеКартинкиТекСтроки.Картинка = Картинка;
	
КонецПроцедуры

Процедура КартинкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЭтоОсновноеИзображение Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанель2УстановитьОсновным(Кнопка)
	
	ТекДанные = ЭлементыФормы.Картинки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаТаб Из Картинки Цикл
		Если СтрокаТаб.НомерСтроки = ТекДанные.НомерСтроки Тогда
			СтрокаТаб.ЭтоОсновноеИзображение = Истина;
			Продолжить;
		КонецЕсли;	
		СтрокаТаб.ЭтоОсновноеИзображение = Ложь;
	КонецЦикла;	
	
КонецПроцедуры


Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = ЭлементыФормы.Файлы.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ВнесеныИзменения Тогда
			Предупреждение("Сначала запишите элемент, файл ещё не записан в базу.");
		Иначе
			ЗапуститьПриложение(ПолучитьПолноеИмяФайла(ТекСтрока));
		КонецЕсли;	
		
	КонецЕсли;
	Отказ=истина;
КонецПроцедуры

Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайла");
	Если СтруктураВозврат <> Неопределено
		И СтруктураВозврат.БылВыборФайла Тогда
		Файл = Новый Файл(СтруктураВозврат.ИмяФайла);
		СтрокаДоб = Файлы.Добавить();
		СтрокаДоб.ИД = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура.Файлы", "ИД") + СтрокаДоб.НомерСтроки;
		СтрокаДоб.КраткоеИмяФайла = Файл.ИмяБезРасширения;
		СтрокаДоб.Расширение = Файл.Расширение;
		СтрокаДоб.ВнесеныИзменения = Истина;
		СтрокаДоб.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		СтрокаДоб.ХранилищеКЗаписи = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураВозврат.ИмяФайла));
		СтрокаДоб.Размер = Файл.Размер();
	КонецЕсли;

КонецПроцедуры

//+++АК susk

Функция ПолучитьЕдиницуИзмеренияНоменклатуры(НомСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, НомСсылка.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, НомСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЕдиницаИзмерения;
	КонецЕсли;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции 

Процедура КомплектующиеНоменклатураПриИзменении(Элемент)
	
	ТекСтр = ЭлементыФормы.Комплектующие.ТекущаяСтрока;
	
	текСтр.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(ТекСтр.Номенклатура);	
	
КонецПроцедуры

//---АК susk

СтруктураКонстант = Новый Структура;
СтруктураКонстант.Вставить("ЕдиницаИзмеренияВеса");

мКонстанты = ПолучитьКонстанты(СтруктураКонстант);
мЕдиницаИзмеренияВеса           = мКонстанты.ЕдиницаИзмеренияВеса;
