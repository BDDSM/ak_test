///////////////////////////////////

&НаСервере
Процедура _НастроитьСхемуКомпоновкиДанных(БазаДанных)
	
	//
	ТекстЗапроса = "";
	
	//
	РеквизитыТаблицы = ПолучитьРеквизиты("СводнаяТаблица");
	
	//
	Для Каждого СтрокаТЗ Из СводнаяТаблица Цикл
		
		//
		ТаблицаВнешнейБД = Справочники.АК_ТаблицыВнешнейБазыДанных.НайтиПоКоду(СтрокаТЗ.ИмяТаблицы,,, БазаДанных);
		
		//
		ТЗ_ОписаниеПолей = ТаблицаВнешнейБД.Поля.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеПолей Цикл
			_СтрокаТЗ.Имя = ВРЕГ(_СтрокаТЗ.Имя);
		КонецЦикла;	
		
		//
		ТЗ_ОписаниеСвязей = ТаблицаВнешнейБД.ОписаниеСвязей.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеСвязей Цикл
			_СтрокаТЗ.ВнешняяБД_Имя = ВРЕГ(_СтрокаТЗ.ВнешняяБД_Имя);
		КонецЦикла;	
		
		//
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ " + Символы.ПС;
		КонецЕсли;	
		
		//
		МассивОписанийПолей = Новый Массив;
		
		//
		Для Каждого _СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ _СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			стрОписаниеПоля = "";
			
			//
			ИмяРеквизита 		= _СтрокаТЗ.ИмяПоля;
			ЗначениеРеквизита 	= _СтрокаТЗ[СтрокаТЗ.ИмяТаблицы];
			
			//
			Если ЗначениеЗаполнено(_СтрокаТЗ.Формула) Тогда
				ЗначениеРеквизита = "(" + СокрЛП(_СтрокаТЗ.Формула) + ")";
			КонецЕсли; 
			
			//
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				стрОписаниеПоля = "NULL";
			Иначе
				
				//
				стрОписаниеПоля = ""; //тут нужно находить связь с ИБ 1С и типизировать
				
				//
				СтруктураПоиска = Новый Структура("ВнешняяБД_Имя", ИмяРеквизита);
				
				//
				НайденныеСтроки =  ТЗ_ОписаниеСвязей.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					//
					НайденнаяСтрока = НайденныеСтроки[0];
					Если ЗначениеЗаполнено(НайденнаяСтрока.ИБ1С_ПолноеИмяОбъектаМетаданных) Тогда
						стрОписаниеПоля = "ЗНАЧЕНИЕ(" + СокрЛП(НайденнаяСтрока.ИБ1С_ПолноеИмяОбъектаМетаданных) + ".ПустаяСсылка)"; //тут нужно находить связь с ИБ 1С и типизировать
					КонецЕсли;	
					
				КонецЕсли;	
				
				//
				СтруктураПоиска = Новый Структура("Имя", ИмяРеквизита);
				
				//
				НайденныеСтроки =  ТЗ_ОписаниеПолей.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					//
					НайденнаяСтрока = НайденныеСтроки[0];
					Если ЗначениеЗаполнено(НайденнаяСтрока.Тип) Тогда
						
						//
						Если Найти(ВРЕГ(НайденнаяСтрока.Тип), "DATE") > 0 Тогда
							стрОписаниеПоля = "ДатаВремя(1,1,1)";
						ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "BIT") > 0 Тогда							
							стрОписаниеПоля = "Ложь";
						ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "INT") > 0 Тогда							
							стрОписаниеПоля = "0";	
						Иначе
							стрОписаниеПоля = """""";	
						КонецЕсли;	
						
					Иначе
						стрОписаниеПоля = "NULL";
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;
			
			//
			Если ЛОЖЬ И ЗначениеЗаполнено(_СтрокаТЗ.Функция) Тогда
				стрОписаниеПоля = _СтрокаТЗ.Функция + "(" + стрОписаниеПоля + ")";
			КонецЕсли;	
			
			//
			стрОписаниеПоля = стрОписаниеПоля + " КАК " + ИмяРеквизита;
			
			//
			МассивОписанийПолей.Добавить(стрОписаниеПоля);
			
		КонецЦикла;	
		
		//
		Если МассивОписанийПолей.Количество() > 0 Тогда
		
			//
			СтрокаТекстЗапроса = "";
			Для Каждого ЭлементМассива Из МассивОписанийПолей Цикл
				СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
			КонецЦикла;	
			
			//
			СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);
			
			//
			СтрокаТекстЗапроса = "ВЫБРАТЬ " + Символы.ПС + СтрокаТекстЗапроса + Символы.ПС;
			
			//
			ТекстЗапроса = ТекстЗапроса + СтрокаТекстЗапроса;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
	
		//
		МакетСхемыКомпоновкиДанных = Справочники.АК_ВнешниеБазыДанных.ПолучитьМакет("МакетСхемыКомпоновкиДанных");
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Запрос = ТекстЗапроса;
		
		//
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.АвтоЗаполнениеДоступныхПолей = Истина;
			
		//
		Для Каждого СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
				
			//
			ИмяРеквизита 	= СтрокаТЗ.ИмяПоля;
			Заголовок 		= СтрокаТЗ.ПредставлениеПоля;
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле 			= ИмяРеквизита;
			Поле.ПутьКДанным 	= ИмяРеквизита;
			Поле.Заголовок 		= Заголовок;
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
				
				//
				ПолеИтога = МакетСхемыКомпоновкиДанных.ПоляИтога.Добавить();
				ПолеИтога.Выражение 	= "СУММА(" + ИмяРеквизита + ")";
				ПолеИтога.ПутьКДанным 	= ИмяРеквизита;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		URLСхемы = ПоместитьВоВременноеХранилище(МакетСхемыКомпоновкиДанных, Новый УникальныйИдентификатор());
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
	КонецЕсли;	

КонецПроцедуры

///////////////////////////////////

&НаСервере
Процедура НастроитьСхемуКомпоновкиДанных(БазаДанных)
	
	//
	ТекстЗапроса = "";
	
	//
	РеквизитыТаблицы = ПолучитьРеквизиты("СводнаяТаблица");
	
	//
	Для Каждого СтрокаТЗ Из СводнаяТаблица Цикл
		
		//
		ТаблицаВнешнейБД = Справочники.АК_ТаблицыВнешнейБазыДанных.НайтиПоКоду(СтрокаТЗ.ИмяТаблицы,,, БазаДанных);
		
		//
		ТЗ_ОписаниеПолей = ТаблицаВнешнейБД.Поля.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеПолей Цикл
			_СтрокаТЗ.Имя = ВРЕГ(_СтрокаТЗ.Имя);
		КонецЦикла;	
		
		//
		ТЗ_ОписаниеСвязей = ТаблицаВнешнейБД.ОписаниеСвязей.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеСвязей Цикл
			_СтрокаТЗ.ВнешняяБД_Имя = ВРЕГ(_СтрокаТЗ.ВнешняяБД_Имя);
		КонецЦикла;	
		
		//
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ " + Символы.ПС;
		КонецЕсли;	
		
		//
		МассивОписанийПолей = Новый Массив;
		
		//
		МассивПолейСТипомДата = Новый Массив;
		
		//
		Для Каждого _СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ _СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			стрОписаниеПоля = "";
			
			//
			ИмяРеквизита 		= _СтрокаТЗ.ИмяПоля;
			ЗначениеРеквизита 	= _СтрокаТЗ[СтрокаТЗ.ИмяТаблицы];
			
			//
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				стрОписаниеПоля = "NULL";
			Иначе
				
				//
				стрОписаниеПоля = ""; //тут нужно находить связь с ИБ 1С и типизировать
				
				//
				Если ЗначениеЗаполнено(_СтрокаТЗ.ОбъектМетаданных) Тогда
					
					//
					стрОписаниеПоля = "ЗНАЧЕНИЕ(" + СокрЛП(_СтрокаТЗ.ОбъектМетаданных) + ".ПустаяСсылка)"; //тут нужно находить связь с ИБ 1С и типизировать
					
				Иначе	
				
					//
					СтруктураПоиска = Новый Структура("Имя", ЗначениеРеквизита);
					
					//
					НайденныеСтроки =  ТЗ_ОписаниеПолей.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						//
						НайденнаяСтрока = НайденныеСтроки[0];
						Если ЗначениеЗаполнено(НайденнаяСтрока.Тип) Тогда
							
							//
							Если Найти(ВРЕГ(НайденнаяСтрока.Тип), "DATE") > 0 Тогда
								
								//
								стрОписаниеПоля = "ДатаВремя(1,1,1)";
								
								//
								МассивПолейСТипомДата.Добавить(ИмяРеквизита);
								
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "BIT") > 0 Тогда							
								стрОписаниеПоля = "Ложь";
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "INT") > 0 Тогда							
								стрОписаниеПоля = "0";	
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "REAL") > 0 Тогда							
								стрОписаниеПоля = "0";		
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "FLOAT") > 0 Тогда							
								стрОписаниеПоля = "0";			
							Иначе
								стрОписаниеПоля = """""";	
							КонецЕсли;	
						
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЕсли;
				
				//
				Если Не ЗначениеЗаполнено(стрОписаниеПоля) Тогда
					стрОписаниеПоля = "NULL";
				КонецЕсли;	
				
			КонецЕсли;
			
			//
			Если ЛОЖЬ И ЗначениеЗаполнено(_СтрокаТЗ.Функция) Тогда
				стрОписаниеПоля = _СтрокаТЗ.Функция + "(" + стрОписаниеПоля + ")";
			КонецЕсли;	
			
			//
			стрОписаниеПоля = стрОписаниеПоля + " КАК " + ИмяРеквизита;
			МассивОписанийПолей.Добавить(стрОписаниеПоля);
			
			//
			Если Найти(стрОписаниеПоля, "ДатаВремя") > 0 Тогда
				
				//
				//стрОписаниеПоля = "0 КАК " + ИмяРеквизита + "Week";
				//МассивОписанийПолей.Добавить(стрОписаниеПоля);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		Если МассивОписанийПолей.Количество() > 0 Тогда
		
			//
			СтрокаТекстЗапроса = "";
			Для Каждого ЭлементМассива Из МассивОписанийПолей Цикл
				СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
			КонецЦикла;	
			
			//
			СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);
			
			//
			СтрокаТекстЗапроса = "ВЫБРАТЬ " + Символы.ПС + СтрокаТекстЗапроса + Символы.ПС;
			
			//
			ТекстЗапроса = ТекстЗапроса + СтрокаТекстЗапроса;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		//
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "
		|{ХАРАКТЕРИСТИКИ
		|ТИП(Справочник.Номенклатура)
		|ВИДЫХАРАКТЕРИСТИК ПланВидовХарактеристик.СвойстваОбъектов
		|ПОЛЕКЛЮЧА Ссылка
		|ПОЛЕИМЕНИ Представление
		|ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.ЗначенияСвойствОбъектов
		|ПОЛЕОБЪЕКТА Объект
		|ПОЛЕВИДА Свойство
		|ПОЛЕЗНАЧЕНИЯ Значение }";
		
		//
		МакетСхемыКомпоновкиДанных = Справочники.АК_ВнешниеБазыДанных.ПолучитьМакет("МакетСхемыКомпоновкиДанных");
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Запрос = ТекстЗапроса;
		
		//
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.АвтоЗаполнениеДоступныхПолей = Истина;
			
		//
		Для Каждого СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
				
			//
			ИмяРеквизита = СтрокаТЗ.ИмяПоля;
			Заголовок = СтрокаТЗ.ПредставлениеПоля;
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяРеквизита;
			Поле.ПутьКДанным = ИмяРеквизита;
			Поле.Заголовок = Заголовок;
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.Тип) Тогда
				Поле.ТипЗначения = СтрокаТЗ.Тип;
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
				
				//
				ПолеИтога = МакетСхемыКомпоновкиДанных.ПоляИтога.Добавить();
				ПолеИтога.Выражение = "СУММА(" + ИмяРеквизита + ")";
				ПолеИтога.ПутьКДанным = ИмяРеквизита;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		Для Каждого ИмяРеквизита Из МассивПолейСТипомДата Цикл
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяРеквизита;
			Поле.ПутьКДанным = ИмяРеквизита + "." + ИмяРеквизита + "Week";
			Поле.Заголовок = "№ недели";
			
			//
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			
			//
			Поле.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяРеквизита;
			Поле.ПутьКДанным = ИмяРеквизита + "." + ИмяРеквизита + "Period";
			Поле.Заголовок = "Периодичность";
			
		КонецЦикла;	
		
		//
		URLСхемы = ПоместитьВоВременноеХранилище(МакетСхемыКомпоновкиДанных, Новый УникальныйИдентификатор());
		
		//
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
	КонецЕсли;	

КонецПроцедуры

///////////////////////////////////

&НаСервере
Функция ПолучитьМассивПолейТаблицыВнешнейБазыДанных(ТаблицаВнешнейБД)
	
	//
	РезультатМассив = Новый Массив;
	
	//
	ТЗ_Поля = ТаблицаВнешнейБД.Поля.Выгрузить();
	
	//
	Для Каждого СтрокаТЗ Из ТЗ_Поля Цикл
		СтрокаТЗ.Имя = ВРЕГ(СтрокаТЗ.Имя);
	КонецЦикла;	
	
	//
	ТЗ_Поля.Сортировать("Имя");
	
	//
	РезультатМассив = ТЗ_Поля.ВыгрузитьКолонку("Имя"); 
	
	//
	Возврат РезультатМассив;
	
КонецФункции

///////////////////////////////////

&НаКлиенте
Процедура БазаДанныхПриИзменении(Элемент)
	
	//
	СписокТаблицыВнешнейБазыДанных.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.ВнешняяБазаДанных);
	
КонецПроцедуры

///////////////////////////////////

&НаКлиенте
Процедура ТаблицаВыбранныхПолейПредставлениеПоляПриИзменении(Элемент)
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхПолейПометкаПриИзменении(Элемент)
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхПолейФункцияПриИзменении(Элемент)
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

///////////////////////////////////

&НаСервере
Функция ДобавитьТаблицуНаСервере(ТаблицаВнешнейБД)
	
	//
	СтруктураПоиска = Новый Структура("ИмяТаблицы", ТаблицаВнешнейБД.Код);
	
	//
	//НайденныеСтроки = СводнаяТаблица.НайтиСтроки(СтруктураПоиска);
	//Если НайденныеСтроки.Количество() > 0 Тогда
	//	//Возврат Ложь;
	//КонецЕсли;
	
	//
	МассивПолейТаблицы = ПолучитьМассивПолейТаблицыВнешнейБазыДанных(ТаблицаВнешнейБД);
	
	//
	Для Каждого ЭлементМассива Из МассивПолейТаблицы Цикл
		
		//
		ИмяРеквизита = ЭлементМассива;
		ПутьКДанным = "СводнаяТаблица."+ ИмяРеквизита;
		
		//
		ДобавляемыеРеквизиты = Новый Массив;
		
		//
		ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"), "СводнаяТаблица", ИмяРеквизита); 
		ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
		
		//
		Попытка
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);	
		Исключение
		КонецПопытки;	
		
		//
		Попытка
			
			//
			НовыйЭлемент = Элементы.Добавить("СводнаяТаблица" + ДобавляемыйРеквизит.Имя, Тип("ПолеФормы"), Элементы.СводнаяТаблица);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = ПутьКДанным;
			НовыйЭлемент.Заголовок = ДобавляемыйРеквизит.Заголовок;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Видимость = Истина;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
	//
	НоваяСтрока = СводнаяТаблица.Добавить();
	НоваяСтрока.ИмяТаблицы = ТаблицаВнешнейБД.Код;
	
	//
	Для Каждого ЭлементМассива Из МассивПолейТаблицы Цикл
		
		//
		НоваяСтрока[ЭлементМассива] = ЭлементМассива;
		
	КонецЦикла;	
	
	//ТРАНСПОНИРУЕМ
	
	//
	ДобавляемыеРеквизиты = Новый Массив;
		
	//
	ДобавляемыйРеквизит = Новый РеквизитФормы(ТаблицаВнешнейБД.Код, Новый ОписаниеТипов("Строка"), "ТаблицаВыбранныхПолей", ТаблицаВнешнейБД.Код); 
	ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
	
	//
	Попытка
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);	
	Исключение
	КонецПопытки;
	
	//
	Попытка
		
		//
		НовыйЭлемент = Элементы.Добавить("ТаблицаВыбранныхПолей" + ТаблицаВнешнейБД.Код, Тип("ПолеФормы"), Элементы.ТаблицаВыбранныхПолей);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаВыбранныхПолей."+ ТаблицаВнешнейБД.Код;
		НовыйЭлемент.Заголовок = ТаблицаВнешнейБД.Код;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.Видимость = Истина;
		
	Исключение
	КонецПопытки;
	
	//
	Сч = 0;
	
	//
	Реквизиты = ПолучитьРеквизиты("ТаблицаВыбранныхПолей");
	
	//
	Для Каждого ЭлементМассива Из МассивПолейТаблицы Цикл
		
		//
		СтрокаТЗ = Неопределено;
		
		//
		Для Каждого Реквизит Из Реквизиты Цикл
			
			//
			СтруктураПоиска = Новый Структура(Реквизит.Имя, ЭлементМассива);
			
			//
			НайденныеСтроки = ТаблицаВыбранныхПолей.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаТЗ = НайденныеСтроки[0];
				Прервать;
			КонецЕсли;
			
		КонецЦикла;	
		
		//
		Если СтрокаТЗ = Неопределено Тогда
			СтрокаТЗ = ТаблицаВыбранныхПолей.Добавить();
		КонецЕсли;	
		
		//
		СтрокаТЗ.ИмяПоля = ЭлементМассива;
		СтрокаТЗ.ПредставлениеПоля = ЭлементМассива;
		СтрокаТЗ[ТаблицаВнешнейБД.Код] = ЭлементМассива;
		
		//
		Сч = Сч + 1;
		
	КонецЦикла;	
	
КонецФункции

&НаКлиенте
Процедура ДобавитьТаблицу(Команда)
	
	//
	ТекущаяСтрока = Элементы.СписокТаблицыВнешнейБазыДанных.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//
	ДобавитьТаблицуНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

///////////////////////////////////

&НаСервере
Функция ВыполнитьЗапросыНаСервере()
	
	//
	ТаблицаРезультатов.Очистить();
	
	//
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.ТаблицаРезультатов.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;	
	
	//
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;	
	
	//
	ТЗ_СводнаяТаблица = ДанныеФормыВЗначение(СводнаяТаблица, Тип("ТаблицаЗначений"));
	ТЗ_ТаблицаВыбранныхПолей = ДанныеФормыВЗначение(ТаблицаВыбранныхПолей, Тип("ТаблицаЗначений"));
	
	//
	ТЗ = Справочники.АК_ВнешниеБазыДанных.ПолучитьТаблицуСРезультатомВыполненияЗапросовКВнешнейБазеДанных(Объект.ВнешняяБазаДанных, ТЗ_СводнаяТаблица, ТЗ_ТаблицаВыбранныхПолей, КомпоновщикНастроек);
	
	//
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		
		//
		ДобавляемыеРеквизиты = Новый Массив;
		
		//
		ДобавляемыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка"), "ТаблицаРезультатов", Колонка.Имя); 
		ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
		
		//
		Попытка
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);	
		Исключение
		КонецПопытки;
		
		//
		Попытка
			
			//
			НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатов" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаРезультатов);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ТаблицаРезультатов." + Колонка.Имя;
			НовыйЭлемент.Заголовок = Колонка.Имя;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Видимость = Истина;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
	//
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		//
		НоваяСтрока = ТаблицаРезультатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
	КонецЦикла;	
	
КонецФункции	

&НаКлиенте
Процедура ВыполнитьЗапросы(Команда)
	
	//
	ВыполнитьЗапросыНаСервере();	
	
КонецПроцедуры

///////////////////////////////////

&НаСервере
Функция СкомпоноватьРезультатНаСервере()
	
	//
	ТЗ_ТаблицаВыбранныхПолей = ДанныеФормыВЗначение(ТаблицаВыбранныхПолей, Тип("ТаблицаЗначений"));
		
	//
	Справочники.АК_ОтчетыПоДаннымВнешнихИсточников.Сформировать(Результат, Объект.ВнешняяБазаДанных, ТЗ_ТаблицаВыбранныхПолей, КомпоновщикНастроек);
	
КонецФункции	

&НаКлиенте
Процедура СкомпоноватьРезультат(Команда)
	
	//
	Параметр = Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок");
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Параметр);
	Параметр.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
	Параметр.Использование = Истина;
	
	//
	Параметр = Новый ПараметрКомпоновкиДанных("Заголовок");
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Параметр);
	Параметр.Значение = Элементы.ТаблицаВариантовНастроек.ТекущиеДанные.Имя;
	Параметр.Использование = Истина;

	//
	СкомпоноватьРезультатНаСервере();
	
КонецПроцедуры

///////////////////////////////////

&НаКлиенте
Процедура СписокТаблицыВнешнейБазыДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	ДобавитьТаблицуНаСервере(ВыбраннаяСтрока);
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

///////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	СписокТаблицыВнешнейБазыДанных.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.ВнешняяБазаДанных);
	
	//
	Если СоответствиеНастроек = Неопределено Тогда
		СоответствиеНастроек = Новый Структура;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//
	ТЗ_СводнаяТаблица = ДанныеФормыВЗначение(СводнаяТаблица, Тип("ТаблицаЗначений"));
	ТЗ_ТаблицаВыбранныхПолей = ДанныеФормыВЗначение(ТаблицаВыбранныхПолей, Тип("ТаблицаЗначений"));
	
	//
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СводнаяТаблица", ТЗ_СводнаяТаблица);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаВыбранныхПолей", ТЗ_ТаблицаВыбранныхПолей);
	
	//
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НастройкиСКД", СоответствиеНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//
	ТЗ_СводнаяТаблица = Неопределено;
	ТЗ_ТаблицаВыбранныхПолей = Неопределено;
		
	//
	ТекущийОбъект.ДополнительныеСвойства.Свойство("СводнаяТаблица", ТЗ_СводнаяТаблица);
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ТаблицаВыбранныхПолей", ТЗ_ТаблицаВыбранныхПолей);
	
	//
	СоответствиеНастроек = Новый Структура;
	
	//
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("НастройкиСКД") Тогда
		Для Каждого ЭлементСтруктуры Из ТекущийОбъект.ДополнительныеСвойства.НастройкиСКД Цикл
			СоответствиеНастроек.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	//
	Если ТЗ_СводнаяТаблица <> Неопределено Тогда
		
		//
		Для Каждого Колонка Из ТЗ_СводнаяТаблица.Колонки Цикл
			
			//
			ДобавляемыеРеквизиты = Новый Массив;
			
			//
			ДобавляемыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка"), "СводнаяТаблица", Колонка.Имя); 
			ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
			
			//
			Попытка
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);	
			Исключение
			КонецПопытки;
			
			//
			Попытка
				
				//
				НовыйЭлемент = Элементы.Добавить("СводнаяТаблица" + Колонка.Имя, Тип("ПолеФормы"), Элементы.СводнаяТаблица);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ПутьКДанным = "СводнаяТаблица." + Колонка.Имя;
				НовыйЭлемент.Заголовок = Колонка.Имя;
				НовыйЭлемент.ТолькоПросмотр = Истина;
				НовыйЭлемент.Видимость = Истина;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;	
		
		//
		Для Каждого СтрокаТЗ Из ТЗ_СводнаяТаблица Цикл
			
			//
			НоваяСтрока = СводнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	//
	Если ТЗ_ТаблицаВыбранныхПолей <> Неопределено Тогда
		
		//
		Для Каждого Колонка Из ТЗ_ТаблицаВыбранныхПолей.Колонки Цикл
			
			//
			ДобавляемыеРеквизиты = Новый Массив;
			
			//
			ДобавляемыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка"), "ТаблицаВыбранныхПолей", Колонка.Имя); 
			ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
			
			//
			Попытка
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);	
			Исключение
			КонецПопытки;
			
			//
			Попытка
				
				//
				НовыйЭлемент = Элементы.Добавить("ТаблицаВыбранныхПолей" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаВыбранныхПолей);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ПутьКДанным = "ТаблицаВыбранныхПолей." + Колонка.Имя;
				НовыйЭлемент.Заголовок = Колонка.Имя;
				НовыйЭлемент.ТолькоПросмотр = Истина;
				НовыйЭлемент.Видимость = Истина;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;	
		
		//
		Для Каждого СтрокаТЗ Из ТЗ_ТаблицаВыбранныхПолей Цикл
			
			//
			НоваяСтрока = ТаблицаВыбранныхПолей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторНастроек(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

////////////////////////////////////

&НаСервере
Функция ПолучитьСписокВыбораОбъектаМетаданныхНаСервере()
	
	//
	РезультаСписокВыбора = Новый СписокЗначений;
	
	//
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		РезультаСписокВыбора.Добавить(Справочник.ПолноеИмя(), Справочник.Синоним,,БиблиотекаКартинок.Справочник);
	КонецЦикла;	
	
	//
	РезультаСписокВыбора.СортироватьПоПредставлению();
	
	//
	Возврат РезультаСписокВыбора;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокВыбораРеквизитаОбъектаМетаданныхНаСервере(ИмяОбъектаМетаданных)
	
	//
	РезультаСписокВыбора = Новый СписокЗначений;
	
	//
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	//
	Попытка
		РезультаСписокВыбора.Добавить(ОбъектМетаданных.СтандартныеРеквизиты["Код"].Имя, "Код");
	Исключение	
	КонецПопытки;	
	
	//
	Попытка
		РезультаСписокВыбора.Добавить(ОбъектМетаданных.СтандартныеРеквизиты["Наименование"].Имя, "Наименование");
	Исключение	
	КонецПопытки;	
	
	//
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		РезультаСписокВыбора.Добавить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;	
	
	//
	РезультаСписокВыбора.СортироватьПоПредставлению();
	
	//
	Возврат РезультаСписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаВыбранныхПолейОбъектМетаданныхНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//
	Элемент.СписокВыбора.Очистить();
	
	//
	Список = ПолучитьСписокВыбораОбъектаМетаданныхНаСервере();
	Для Каждого ЭлементСписка Из Список Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,,ЭлементСписка.Картинка);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхПолейПолеСвязиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//
	Элемент.СписокВыбора.Очистить();
	
	//
	Список = ПолучитьСписокВыбораРеквизитаОбъектаМетаданныхНаСервере(Элементы.ТаблицаВыбранныхПолей.ТекущиеДанные.ОбъектМетаданных);
	Для Каждого ЭлементСписка Из Список Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,,ЭлементСписка.Картинка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхПолейОбъектМетаданныхОчистка(Элемент, СтандартнаяОбработка)
	
	//
	Элементы.ТаблицаВыбранныхПолей.ТекущиеДанные.ПолеСвязи = "";
	
КонецПроцедуры

////////////////////////////////////

&НаСервере
Процедура ОбработатьУдалениеСтрокиНаСервере()
	
	//
	Реквизиты = ПолучитьРеквизиты("ТаблицаВыбранныхПолей");
	Для Каждого Реквизит Из Реквизиты Цикл
		
		//
		Если Реквизит.Имя = "Пометка"
			ИЛИ Реквизит.Имя = "ИмяПоля"
			ИЛИ Реквизит.Имя = "ПредставлениеПоля"
			ИЛИ Реквизит.Имя = "ОбъектМетаданных"
			ИЛИ Реквизит.Имя = "ПолеСвязи"
			ИЛИ Реквизит.Имя = "Функция" 
			ИЛИ Реквизит.Имя = "Формула" Тогда
			
			//
			Продолжить;
			
		КонецЕсли;
		
		//
		ТаблицаИспользуется = Ложь;
		Для Каждого СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			ТаблицаИспользуется = ТаблицаИспользуется ИЛИ ЗначениеЗаполнено(СтрокаТЗ[Реквизит.Имя]);
		КонецЦикла;	
		
		//
		Если НЕ ТаблицаИспользуется Тогда
			
			//
			СтруктураПоиска = Новый Структура("ИмяТаблицы", Реквизит.Имя);
			
			//
			НайденныеСтроки = СводнаяТаблица.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СводнаяТаблица.Удалить(НайденнаяСтрока);
			КонецЦикла;	
			
			//
			УдаляемыеЭлементы = Новый Массив;
			Для Каждого Элемент Из Элементы.ТаблицаВыбранныхПолей.ПодчиненныеЭлементы Цикл
				
				//
				Если Элемент.Имя = Реквизит.Имя Тогда
					УдаляемыеЭлементы.Добавить(Элемент);
				КонецЕсли;
				
			КонецЦикла;	
			
			//
			Для Каждого Элемент Из УдаляемыеЭлементы Цикл
				Элементы.Удалить(Элемент);
			КонецЦикла;
			
			//
			УдаляемыеРеквизиты  = Новый Массив;
			УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
			
			//
			ИзменитьРеквизиты(, УдаляемыеРеквизиты);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаВариантовНастроекПриАктивизацииСтроки(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТаблицаВариантовНастроек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	//
	ТекущаяСтрока = Элементы.ТаблицаВариантовНастроек.ТекущиеДанные.ID;
	Если ТекущаяСтрока = ТекущаяСтрокаТаблицыВариантовНастроек Тогда
		Возврат;
	КонецЕсли;	
		
	//
	Если ТекущаяСтрокаТаблицыВариантовНастроек <> Неопределено Тогда
		СоответствиеНастроек.Вставить("Настройка" + Формат(ТекущаяСтрокаТаблицыВариантовНастроек, "ЧН=0; ЧГ="), КомпоновщикНастроек.Настройки);
	КонецЕсли;	
	
	//
	ТекущаяСтрокаТаблицыВариантовНастроек = ТекущиеДанные.ID;
	
	//
	Если СоответствиеНастроек.Свойство("Настройка" + Формат(ТекущаяСтрока, "ЧН=0; ЧГ=")) Тогда
		Настройки = СоответствиеНастроек["Настройка" + Формат(ТекущаяСтрока, "ЧН=0; ЧГ=")];
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	КонецЕсли;	
	
	//
	Если Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока <> Неопределено Тогда
		Элементы.КомпоновщикНастроекНастройки.Развернуть(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВариантовНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//
	Отказ = Истина;
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	Если ТекущаяСтрокаТаблицыВариантовНастроек <> Неопределено Тогда
		СоответствиеНастроек.Вставить("Настройка" + Формат(ТекущаяСтрокаТаблицыВариантовНастроек, "ЧН=0; ЧГ="), КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	//
	НоваяСтрока = Объект.ВариантыНастроек.Добавить();
	НоваяСтрока.ID = НоваяСтрока.ПолучитьИдентификатор();
	
	//
	Если Копирование Тогда
		
		//
		НоваяСтрока.Имя = Элемент.ТекущиеДанные.Имя;
		
		//
		СоответствиеНастроек.Вставить("Настройка" + Формат(НоваяСтрока.ID, "ЧН=0; ЧГ="), Настройки);
		
	КонецЕсли;	
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхПолейПередУдалением(Элемент, Отказ)
	
	//
	Отказ = Истина;
	
	//
	ТекущиеДанные = Элементы.ТаблицаВыбранныхПолей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//
	ТаблицаВыбранныхПолей.Удалить(ТаблицаВыбранныхПолей.Индекс(Элементы.ТаблицаВыбранныхПолей.ТекущиеДанные));
	
	//
	ОбработатьУдалениеСтрокиНаСервере();
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

////////////////////////////////////

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//
	Если ТекущаяСтрокаТаблицыВариантовНастроек <> Неопределено Тогда
		СоответствиеНастроек.Вставить("Настройка" + Формат(ТекущаяСтрокаТаблицыВариантовНастроек, "ЧН=0; ЧГ="), КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиТаблицуВнешнейБД(БазаДанных, ИмяТаблицы)
	
	//
	ТаблицаВнешнейБД = Справочники.АК_ТаблицыВнешнейБазыДанных.НайтиПоКоду(ИмяТаблицы,,, БазаДанных);
	
	//
	Возврат ТаблицаВнешнейБД;
	
КонецФункции	

&НаКлиенте
Процедура ТаблицаВыбранныхПолейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	Если Поле.Имя = "Пометка"
		ИЛИ Поле.Имя = "ИмяПоля"
		ИЛИ Поле.Имя = "ПредставлениеПоля"
		ИЛИ Поле.Имя = "ОбъектМетаданных"
		ИЛИ Поле.Имя = "ПолеСвязи"
		ИЛИ Поле.Имя = "Функция" Тогда
		
		//
		Возврат;
		
	КонецЕсли; 
	
	//
	ТаблицаВнешнейБД = НайтиТаблицуВнешнейБД(Объект.ВнешняяБазаДанных, Поле.Заголовок);
	Если НЕ ЗначениеЗаполнено(ТаблицаВнешнейБД) Тогда
		Возврат;
	КонецЕсли;	
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("", "");
	
	//
	МассивПолейТаблицы = ПолучитьМассивПолейТаблицыВнешнейБазыДанных(ТаблицаВнешнейБД);
	Для Каждого ЭлементМассива Из МассивПолейТаблицы Цикл
		
		//
		НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(ВРЕГ(ЭлементМассива));
		Если НайденныйЭлемент = Неопределено Тогда
			
			//
			СписокВыбора.Добавить(ВРЕГ(ЭлементМассива));
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	СписокВыбора.СортироватьПоЗначению();
	
	//
	ВыбранныйЭлемент = ВыбратьИзМеню(СписокВыбора);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		//
		Элементы.ТаблицаВыбранныхПолей.ТекущиеДанные[Поле.Заголовок] = ВыбранныйЭлемент.Значение;
		
		//
		СтруктураПоиска = Новый Структура("ИмяТаблицы", Поле.Заголовок);
		
		//
		НайденныеСтроки = СводнаяТаблица.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока[Элементы.ТаблицаВыбранныхПолей.ТекущиеДанные.ИмяПоля] = ВыбранныйЭлемент.Значение;
		КонецЦикла;	
		
	КонецЕсли;	
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхПолейФорматПриИзменении(Элемент)
	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	
	//
	НастроитьСхемуКомпоновкиДанных(Объект.ВнешняяБазаДанных);
	
	//
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

