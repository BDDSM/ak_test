
//////////////////////////////////////////////////////////////

//
//
Функция ПолучитьНомерНедели(Дата)
	
	//
	РезультатНомерНедели = 0;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СоответствиеДатДнямНедели.Дата,
	               |	СоответствиеДатДнямНедели.НомерНедели
	               |ИЗ
	               |	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	               |ГДЕ
	               |	СоответствиеДатДнямНедели.Дата = &Дата";	
				   
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТекстЗапроса;
	ПЗ.Параметры.Вставить("Дата", Дата);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатНомерНедели = Выборка.НомерНедели;
	КонецЕсли;	
				   
	//
	Возврат РезультатНомерНедели;
	
КонецФункции	

//////////////////////////////////////////////////////////////
//ADO

//
//
Функция ADO_ExecuteByReader(ADOСоединение, ТекстЗапроса) Экспорт
	
	//
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = ADOСоединение;
	Command.CommandText = ТекстЗапроса;			
	
	//
	Reader = Command.ExecuteReader();		
	Возврат Reader;
	
	//
	Попытка
		ADORecordSet = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ADORecordSet = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADORecordSet;
	
КонецФункции	

//
//
Функция ADO_Execute(ADOСоединение, ТекстЗапроса) Экспорт
	
	//
	Попытка
		ADORecordSet = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ADORecordSet = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADORecordSet;
	
КонецФункции	

//
//
Функция ADO_Connection(СтрокаПоключения) Экспорт
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = СтрокаПоключения;
	
	//
	Попытка
		ADOСоединение.Open();
	Исключение
		ADOСоединение = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADOСоединение;
	
КонецФункции

//////////////////////////////////////////////////////////////
//ADO->1C

Функция ПреобразоватьРезультатВТаблицуЗначений(rsTABLE) Экспорт
	КоличествоПолейТаблица=rsTABLE.fields.Count-1;
    ТаблицаПоискаТаблица = Новый массив;
    Если (НЕ rsTABLE.EOF) Тогда
        ТаблицаПоискаТаблица = rsTABLE.GetRows().Выгрузить();
	КонецЕсли;
	
	тзРезультат = Новый ТаблицаЗначений;
	
	Если ТаблицаПоискаТаблица.Количество() = 0 Тогда
		Возврат ТзРезультат;
	КонецЕсли;
	
	Для сч = 0 По КоличествоПолейТаблица Цикл
		массив = Новый Массив;
		
		флНайденТип = Ложь;
		
		Для к = 0 По ТаблицаПоискаТаблица.Количество() - 1 Цикл
			Если ТипЗнч(ТаблицаПоискаТаблица[к][сч]) <> Тип("Null") Тогда
				массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[к][сч]));
				флНайденТип = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ флНайденТип Тогда
			массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[0][сч]));
		КонецЕсли;
		
        тзРезультат.Колонки.Добавить(rsTABLE.fields.item(сч).name,Новый ОписаниеТипов(массив));
    КонецЦикла;

    Для Каждого стрТаблица Из ТаблицаПоискаТаблица Цикл
        стр=тзРезультат.Добавить();
        Для сч = 0 По КоличествоПолейТаблица Цикл
			попытка
				стр[сч] = СокрЛП(стрТаблица[сч]);				
            исключение
               	сообщить(ОписаниеОшибки());
			конецпопытки;			
        КонецЦикла;
	КонецЦикла;
	Возврат тзРезультат;
КонецФункции


//
//
Функция RecordSet_в_ТаблицуЗначений(RecordSet, ОписаниеИсточникаДанных, Периодичность = Неопределено) Экспорт 
	
	//
	РезультатТЗ = Новый ТаблицаЗначений;
	
	//
	Для Каждого Field Из RecordSet.Fields Цикл
		
		//
		Тип = Неопределено;
		
		//
		НайденнаяСтрока = ОписаниеИсточникаДанных.Найти(Field.Name, "ИмяПоля");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			//
			Попытка
				Тип = НайденнаяСтрока.Тип;
			Исключение
			КонецПопытки;
			
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(Тип) Тогда
			РезультатТЗ.Колонки.Добавить(Field.Name, Тип);	
		Иначе	
			РезультатТЗ.Колонки.Добавить(Field.Name);
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	стСоответствиеДатИНомеровНедель = Новый Соответствие;
	
	//
	Если НЕ RecordSet.BOF Тогда
		RecordSet.MoveFirst();
	КонецЕсли;	
	
	//
	ПоляADO = RecordSet.Fields;
	КоличествоПолей = ПоляADO.Count();
	
	//
	//Для Каждого Field Из ПоляADO Цикл
	//	
	//	
	//	FieldName = Field.Name;
	//	РезультатТЗ.Колонки.Добавить(FieldName);
	//	
	//КонецЦикла;	
	
	//
	Пока НЕ RecordSet.EOF Цикл
		
		//
		НоваяСтрока = РезультатТЗ.Добавить();
		
		//
		Индекс = 0;
		Для Каждого Field Из ПоляADO Цикл
			
			//
			FieldName = Field.Name;
			
			
			//
			Значение = Field.Value;
			
			//
			Если Field.Type = 202 Тогда
				
				//
				_Значение = СтрЗаменить(Значение, "-", "");
				_Значение = СтрЗаменить(_Значение, "  ", "");
				_Значение = СтрЗаменить(_Значение, " ", "");
				_Значение = СтрЗаменить(_Значение, ":", "");
				
				//
				Попытка
					
					//
					_Значение = Дата(_Значение);
					
					//
					НоваяСтрока[Индекс] = _Значение;
					Если ТипЗнч(_Значение) = Тип("Дата") Тогда
						
						//
						Если РезультатТЗ.Колонки.Найти(FieldName) = Неопределено Тогда
							РезультатТЗ.Колонки.Добавить(FieldName, Новый ОписаниеТипов("Дата"));
						КонецЕсли;	
						
						//
						ИмяКолонки = FieldName + "Week";
						Если РезультатТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
							РезультатТЗ.Колонки.Добавить(ИмяКолонки);
						КонецЕсли; 
						
						//
						НомерНедели = стСоответствиеДатИНомеровНедель.Получить(_Значение);
						
						//
						Если НЕ ЗначениеЗаполнено(НомерНедели) Тогда
							
							//
							НомерНедели = ПолучитьНомерНедели(_Значение);
							Если ЗначениеЗаполнено(НомерНедели) Тогда
								стСоответствиеДатИНомеровНедель.Вставить(_Значение, НомерНедели);
							КонецЕсли;
							
						КонецЕсли;
						
						//
						НоваяСтрока[ИмяКолонки] = НомерНедели;
						
						//
						ИмяКолонки = FieldName + "Period";
						Если РезультатТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
							РезультатТЗ.Колонки.Добавить(ИмяКолонки);
						КонецЕсли;
						
						//по умолчанию - ДЕНЬ
						НоваяСтрока[ИмяКолонки] = _Значение;
						Если ЗначениеЗаполнено(Периодичность) Тогда
							
							//
							Если Периодичность = "НачалоДня" Тогда
								НоваяСтрока[ИмяКолонки] = НачалоДня(_Значение);
							ИначеЕсли Периодичность = "НачалоНедели" Тогда
								НоваяСтрока[ИмяКолонки] = НачалоНедели(_Значение);
							ИначеЕсли Периодичность = "НачалоМесяца" Тогда	
								НоваяСтрока[ИмяКолонки] = НачалоМесяца(_Значение);
							ИначеЕсли Периодичность = "НачалоКвартала" Тогда	
								НоваяСтрока[ИмяКолонки] = НачалоКвартала(_Значение);
							ИначеЕсли Периодичность = "НачалоГода" Тогда		
								НоваяСтрока[ИмяКолонки] = НачалоГода(_Значение);
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЕсли;	
					
				Исключение
					
					////
					//Если РезультатТЗ.Колонки.Найти(FieldName) = Неопределено Тогда
					//	РезультатТЗ.Колонки.Добавить(FieldName);
					//КонецЕсли;	
					
					//
					НоваяСтрока[FieldName] = Значение;
					
				КонецПопытки;
				
			Иначе
				
				////
				//Если РезультатТЗ.Колонки.Найти(FieldName) = Неопределено Тогда
				//	РезультатТЗ.Колонки.Добавить(FieldName);
				//КонецЕсли;
				
				//
				НоваяСтрока[FieldName] = Значение;
				
			КонецЕсли;	
			
			//
			Индекс = Индекс + 1;
			
		КонецЦикла;	
		
		//
		Если НЕ RecordSet.EOF Тогда 
			RecordSet.MoveNext();
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Возврат РезультатТЗ;
	
КонецФункции	

///////////

//
//
Функция ПолучитьПустоеЗначениеПоляSQL(БазаДанных, ИмяТаблицы, ИмяПоля)
	
	//
	Результат = "''";
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	АК_ТаблицыВнешнейБазыДанныхПоля.Ссылка,
	               |	АК_ТаблицыВнешнейБазыДанныхПоля.НомерСтроки,
	               |	АК_ТаблицыВнешнейБазыДанныхПоля.Имя,
	               |	АК_ТаблицыВнешнейБазыДанныхПоля.Тип
	               |ИЗ
	               |	Справочник.АК_ТаблицыВнешнейБазыДанных.Поля КАК АК_ТаблицыВнешнейБазыДанныхПоля
	               |ГДЕ
	               |	АК_ТаблицыВнешнейБазыДанныхПоля.Ссылка.Владелец = &Владелец
	               |	И АК_ТаблицыВнешнейБазыДанныхПоля.Ссылка.Код ПОДОБНО &ИмяТаблицы
	               |	И АК_ТаблицыВнешнейБазыДанныхПоля.Имя ПОДОБНО &ИмяПоля
	               |	И АК_ТаблицыВнешнейБазыДанныхПоля.Тип <> """"";
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("Владелец", БазаДанных);
	ПостроительЗапроса.Параметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	ПостроительЗапроса.Параметры.Вставить("ИмяПоля", ИмяПоля);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = "CAST(NULL as " + Выборка.Тип + ")";
	Иначе
		Результат = "0";
	КонецЕсли;	
	
	//
	Возврат Результат;
	
КонецФункции	


//
//
Функция ПолучитьСсылку1С(ПолноеИмяОбъектаМетаданных, ПолеПоиска, ЗначениеДляПоиска)
	
	//
	РезультатCсылка = Неопределено;
	
	////
	//ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	//Если ОбъектМетаданных = Неопределено Тогда
	//	Возврат РезультатCсылка;
	//КонецЕсли;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ Таблица.Ссылка, Таблица.Код ИЗ Справочник.Номенклатура КАК Таблица";
	
	//
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Номенклатура", ПолноеИмяОбъектаМетаданных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Код", "Таблица." + ПолеПоиска);
	
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	//
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ПолеПоиска);
	ЭлементОтбора.Установить(ЗначениеДляПоиска);
	
	//
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ПолеПоиска);
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатCсылка = Выборка.Ссылка;
	КонецЕсли;
	
	//
	Возврат РезультатCсылка;
	
КонецФункции	

//
//
Функция НайтиПолеВСтруктуреКД(Структура, ИмяПоля)
	
	//
	Результат = Ложь;
	
	//
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ПолеКД = ИмяПоля;
	
	//
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			//
			Результат = Результат ИЛИ НайтиПолеВСтруктуреКД(ЭлементСтруктуры.Структура, ИмяПоля);
			
			//
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				
				//
				Если Найти(ВРЕГ(ПолеГруппировки.Поле), ВРЕГ(ПолеКД)) > 0 Тогда
					Результат = Результат ИЛИ ПолеГруппировки.Использование;
				КонецЕсли;
				
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			//
			Результат = Результат ИЛИ НайтиПолеВСтруктуреКД(ЭлементСтруктуры.Структура, ИмяПоля);	
			
			//
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				
				Если Найти(ВРЕГ(ПолеГруппировки.Поле), ВРЕГ(ПолеКД)) > 0 Тогда
					Результат = Результат ИЛИ ПолеГруппировки.Использование;
				КонецЕсли;
				
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			//
			Если НайтиПолеВСтруктуреКД(ЭлементСтруктуры.Строки, ИмяПоля) Тогда
				Возврат Истина;
			КонецЕсли;	
			
			//
			Если НайтиПолеВСтруктуреКД(ЭлементСтруктуры.Колонки, ИмяПоля) Тогда
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция НайтиПолеВОтбореКД(Отбор, ИмяПоля)
	
	//
	Результат = Ложь;
	
	//
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	//
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		//
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
						
			//
			Результат = НайтиПолеВОтбореКД(ЭлементОтбора, ИмяПоля);
			
		КонецЕсли;	
		
		//
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКД 
			ИЛИ ЭлементОтбора.ПравоеЗначение = ПолеКД Тогда
			
			//
			Возврат ЭлементОтбора.Использование;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьОператорСравненияSQL(ВидСравнения)
	
	//
	Результат = "";
	
	//
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Результат = "=";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Результат = "<";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Результат = "<=";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Результат = ">=";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		Результат = ">";
	КонецЕсли;	
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьСтрокуОписанияЭлементаОтбора(БазаДанных, ИмяТаблицы, ОписаниеИсточникаДанных, ЭлементОтбора)
	
	//
	Результат = "";
	
	//???
	стрЛевоеЗначение = Строка(ЭлементОтбора.ЛевоеЗначение);
	Если Найти(стрЛевоеЗначение, ".") Тогда
		Возврат Результат;
	КонецЕсли;	
	
	//
	ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
	_ВидСравнения = ЭлементОтбора.ВидСравнения;
	ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
	
	//
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат Результат;
	КонецЕсли;	
	
	//
	Если НЕ ЗначениеЗаполнено(СокрЛП(ЛевоеЗначение)) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	//ВИД СРАВНЕНИЯ
	стрВиСравнения = ПолучитьОператорСравненияSQL(_ВидСравнения);
	Если НЕ ЗначениеЗаполнено(стрВиСравнения) Тогда
		Возврат ""; //отсутствует интерпритация
	КонецЕсли;	
	
	//ЛЕВОЕ ЗНАЧЕНИЕ
	Если ТипЗнч(ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
		
		//
		стрЛевоеЗначение = СтрЗаменить(ЛевоеЗначение, "DATE.", "");
		
		//
		Если стрЛевоеЗначение = "DATEWeek" ИЛИ стрЛевоеЗначение = "DATEPeriod" Тогда
		Иначе
		
			//
			СтрокаОписанияИсточникаДанных = ОписаниеИсточникаДанных.Найти(СокрЛП(стрЛевоеЗначение), "ИмяПоля");
			Если СтрокаОписанияИсточникаДанных <> Неопределено Тогда
				
				//
				ЗначениеВТаблицеОписаниеИсточникаДанных = СтрокаОписанияИсточникаДанных[ИмяТаблицы];
				Если НЕ ЗначениеЗаполнено(ЗначениеВТаблицеОписаниеИсточникаДанных) Тогда
					Возврат "1 = 0";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//
		Результат = СокрЛП(стрЛевоеЗначение); 
		
	Иначе	
		Возврат Результат; //???
	КонецЕсли;	
	
	//
	Результат = Результат + " " + стрВиСравнения + " ";
	
	//
	//ПРАВОЕ ЗНАЧЕНИЕ
	Если ТипЗнч(ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
		
		//
		Результат = Результат + СокрЛП(ПравоеЗначение) 
		
	ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Дата") Тогда	
		
		//
		Результат = Результат + "'" + Формат(ПравоеЗначение, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'") + "'";
		
	ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда	
		
		//
		Результат = Результат + "'" + Формат(ПравоеЗначение.Дата, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'") + "'";	
		
	ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Число") Тогда		
		
		//
		Результат = Результат + ПравоеЗначение;
		
	ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Строка") Тогда		
		
		//
		Результат = Результат + "'" + ПравоеЗначение + "'";
		
	ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Булево") Тогда			
		
		//
		Результат = Результат + Формат(ПравоеЗначение, "БЛ=false; БИ=true");
		
	ИначеЕсли Метаданные.НайтиПоТипу(ТипЗнч(ПравоеЗначение)) <> Неопределено Тогда
		
		//	пока ПУСТО
		Результат = "";
		
		
	Иначе	
		
	КонецЕсли;	
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьСтрокуОписанияОтбора(БазаДанных, ИмяТаблицы, ОписаниеИсточникаДанных, ОтборКД, ПараметрыКД, Знач ЛогОператор = "AND")
	
	//
	РезультатОтбор = "";
	
	//
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		
		//
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;	
		
		//
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			//
			Если ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				_ЛогОператор = "AND";
			ИначеЕсли ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				_ЛогОператор = "OR";	
			ИначеЕсли ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				_ЛогОператор = "NOT";		
			КонецЕсли;	
			
			//
			Если _ЛогОператор = "NOT" Тогда
				
				//
				стрЭлементОтбора = ПолучитьСтрокуОписанияОтбора(БазаДанных, ИмяТаблицы, ОписаниеИсточникаДанных, ЭлементОтбора, "AND"); 
				
				//
				Если ЗначениеЗаполнено(стрЭлементОтбора) Тогда
					стрЭлементОтбора = "NOT (" + стрЭлементОтбора + ")";
				КонецЕсли;	
				
			Иначе	
				
				//
				стрЭлементОтбора = ПолучитьСтрокуОписанияОтбора(БазаДанных, ИмяТаблицы, ОписаниеИсточникаДанных, ЭлементОтбора, _ЛогОператор);
				
				//
				Если ЗначениеЗаполнено(стрЭлементОтбора) Тогда
					стрЭлементОтбора = "(" + стрЭлементОтбора + ")";
				КонецЕсли;
				
			КонецЕсли;	
			
		Иначе	
			
			//
			стрЭлементОтбора = ПолучитьСтрокуОписанияЭлементаОтбора(БазаДанных, ИмяТаблицы, ОписаниеИсточникаДанных, ЭлементОтбора);
			
			//
			Если ЗначениеЗаполнено(стрЭлементОтбора) Тогда
				стрЭлементОтбора = "(" + стрЭлементОтбора + ")";
			КонецЕсли;	
			
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(стрЭлементОтбора) Тогда
		
			//
			Если НЕ ЗначениеЗаполнено(РезультатОтбор) Тогда
				
				//
				РезультатОтбор = РезультатОтбор + СокрЛП(стрЭлементОтбора);
				
			Иначе
				
				//
				РезультатОтбор = РезультатОтбор + " " + ЛогОператор + " " + СокрЛП(стрЭлементОтбора);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПризнакОтборПоПериоду", Истина);
	
	//
	НайденныеСтроки = ОписаниеИсточникаДанных.НайтиСтроки(СтруктураПоиска);	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		//
		Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
		Параметр = ПараметрыКД.НайтиЗначениеПараметра(Параметр);
		
		//
		Если Параметр <> Неопределено Тогда
			
			Если Параметр.Использование Тогда
				
				//
				Значение = "'" + Формат(Параметр.Значение, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'") + "'";	
				
				//
				стрЭлементОтбора = СокрЛП(НайденнаяСтрока.ИмяПоля) + " >= " + Значение;
				
				
				//
				Если НЕ ЗначениеЗаполнено(РезультатОтбор) Тогда
					
					//
					РезультатОтбор = РезультатОтбор + стрЭлементОтбора;
					
				Иначе
					
					//
					РезультатОтбор = РезультатОтбор + " " + ЛогОператор + " " + СокрЛП(стрЭлементОтбора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//
		Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
		Параметр = ПараметрыКД.НайтиЗначениеПараметра(Параметр);
		
		//
		Если Параметр <> Неопределено Тогда
			
			Если Параметр.Использование Тогда
				
				//
				Значение = "'" + Формат(Параметр.Значение, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'") + "'";	
				
				//
				стрЭлементОтбора = СокрЛП(НайденнаяСтрока.ИмяПоля) + " <= " + Значение;
				
				
				//
				Если НЕ ЗначениеЗаполнено(РезультатОтбор) Тогда
					
					//
					РезультатОтбор = РезультатОтбор + стрЭлементОтбора;
					
				Иначе
					
					//
					РезультатОтбор = РезультатОтбор + " " + ЛогОператор + " " + СокрЛП(стрЭлементОтбора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Возврат РезультатОтбор;
	
КонецФункции	

//
//
Функция ПолучитьТаблицуСРезультатомВыполненияЗапросовКВнешнейБазеДанных(БазаДанных, ОписаниеИсточникаДанных, СхемаКомпоновкиДанных, ВариантНастройки, Периодичность = Неопределено, КоличествоЗаписей = 0) Экспорт
	
	///////////////////////////
	
	//
	СтрокаПодключения = БазаДанных.СтрокаПодключения;
	
	///////////////////////////
	
	//
	РезультатТЗ = Новый ТаблицаЗначений;
	
	//
	ИменаТаблиц = Новый Соответствие;
	Для Каждого Колонка Из ОписаниеИсточникаДанных.Колонки Цикл 
		
		//
		Если Колонка.Имя = "Пометка"
			ИЛИ Колонка.Имя = "ИмяПоля"
			ИЛИ Колонка.Имя = "ПредставлениеПоля"
			ИЛИ Колонка.Имя = "ОбъектМетаданных"
			ИЛИ Колонка.Имя = "ПолеСвязи"
			ИЛИ Колонка.Имя = "Функция" 
			ИЛИ Колонка.Имя = "Формула" 
			ИЛИ Колонка.Имя = "Тип" 
			ИЛИ Колонка.Имя = "ПризнакОтборПоПериоду" Тогда
			
			//
			Продолжить;
			
		КонецЕсли;	
		
		//
		Для Каждого СтрокаТЗ Из ОписаниеИсточникаДанных Цикл
			
			//
			Если НЕ СтрокаТЗ.Пометка И НЕ ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			ЗначениеРеквизита = СтрокаТЗ[Колонка.Имя];
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				
				//
				ПолеКД = Новый ПолеКомпоновкиДанных(СтрокаТЗ.ИмяПоля);
				
				//
				Для Каждого Элемент Из ВариантНастройки.Настройки.Выбор.Элементы Цикл
					
					//
					Если (Элемент.Использование = Истина ИЛИ ЗначениеЗаполнено(СтрокаТЗ.Функция))И ПолеКД = Элемент.Поле Тогда
						
						//
						ИменаТаблиц.Вставить(Колонка.Имя);
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	//
	ТекстЗапроса = "";
	
	//
	Для Каждого ЭлементСоответствия Из ИменаТаблиц Цикл
		
		//
		ИмяТаблицы = ЭлементСоответствия.Ключ;
		
		//
		МассивПолей = Новый Массив;
		
		//
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + " UNION ALL " + Символы.ПС;
		КонецЕсли;	
		
		//
		Для Каждого СтрокаТЗ Из ОписаниеИсточникаДанных Цикл
			
			//
			ПризнакИспользуетсяВФормулах = Ложь;
			Для каждого _СтрокатТЗ Из ОписаниеИсточникаДанных  Цикл
				
				//
				Имя = ВРЕГ(СтрокаТЗ.ИмяПоля);
				Формула = ВРЕГ(_СтрокатТЗ.Формула);
				
				//
				Если Найти(Формула, Имя) > 0 Тогда
					ПризнакИспользуетсяВФормулах = Истина;
					Прервать;
				КонецЕсли; 
			
			КонецЦикла; 
		
			//
			Если НЕ СтрокаТЗ.Пометка И НЕ ЗначениеЗаполнено(СтрокаТЗ.Функция) И НЕ ПризнакИспользуетсяВФормулах Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			стрОписаниеПоля = "";
			
			//
			ИмяРеквизита = СтрокаТЗ.ИмяПоля;
			ЗначениеРеквизита = СтрокаТЗ[ИмяТаблицы];
			Формула = СтрокаТЗ["Формула"];
			
			//
			Если НайтиПолеВСтруктуреКД(ВариантНастройки.Настройки.Структура, СтрокаТЗ.ИмяПоля) Тогда
				
				//
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					стрОписаниеПоля = ЗначениеРеквизита + " as " + ИмяРеквизита;
				Иначе
					стрОписаниеПоля = ПолучитьПустоеЗначениеПоляSQL(БазаДанных, ИмяТаблицы, ИмяРеквизита) + " as " + ИмяРеквизита;
				КонецЕсли;
				
				//
			//ИначеЕсли ЛОЖЬ И НайтиПолеВОтбореКД(ВариантНастройки.Настройки.Отбор, СтрокаТЗ.ИмяПоля) Тогда
			ИначеЕсли НайтиПолеВОтбореКД(ВариантНастройки.Настройки.Отбор, СтрокаТЗ.ИмяПоля) Тогда	
				
				//
				ПризнакЭтоПолеСвязи = Ложь;
				Для Каждого СтрокаТЗ Из ОписаниеИсточникаДанных Цикл
					
					//
					Если ВРЕГ(СтрокаТЗ.ПолеСвязи) = ВРЕГ(ИмяРеквизита) Тогда
						
						//
						ПризнакЭтоПолеСвязи = Истина;
						Прервать;
						
					КонецЕсли;	
					
				КонецЦикла;	
				
				//
				Если ПризнакЭтоПолеСвязи Тогда
					
					//
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						стрОписаниеПоля = ЗначениеРеквизита + " as " + ИмяРеквизита;
					Иначе
						стрОписаниеПоля = ПолучитьПустоеЗначениеПоляSQL(БазаДанных, ИмяТаблицы, ИмяРеквизита) + " as " + ИмяРеквизита;
					КонецЕсли;
					
				КонецЕсли;	
				
			Иначе	
				
				//
				ПолеКД = Новый ПолеКомпоновкиДанных(СтрокаТЗ.ИмяПоля);
				
				//
				Для Каждого Элемент Из ВариантНастройки.Настройки.Выбор.Элементы Цикл
					
					//
					Если(Элемент.Использование = Истина ИЛИ ЗначениеЗаполнено(СтрокаТЗ.Функция)) И ПолеКД = Элемент.Поле Тогда //???ИЛИ ПризнакИспользуетсяВФормулах Тогда //???ZEZA И ПолеКД = Элемент.Поле Тогда
						
						//
						Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							
							//
							стрОписаниеПоля = ЗначениеРеквизита + " as " + ИмяРеквизита;
							
						//							
						ИначеЕсли ЗначениеЗаполнено(Формула) Тогда
							
							//
							стрОписаниеПоля = Формула + " as " + ИмяРеквизита;	
							
						Иначе
							
							//
							стрОписаниеПоля = ПолучитьПустоеЗначениеПоляSQL(БазаДанных, ИмяТаблицы, ИмяРеквизита) + " as " + ИмяРеквизита;
							
						КонецЕсли;
						
						//
						Прервать;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(стрОписаниеПоля) Тогда
				МассивПолей.Добавить(стрОписаниеПоля);
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		СтрокаТекстЗапроса = "";
		
		//
		Для Каждого ЭлементМассива Из МассивПолей Цикл
			СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
		КонецЦикла;	
		
		//
		СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);
		
		//
		СтрокаТекстЗапроса = "SELECT " + Символы.ПС + СтрокаТекстЗапроса + Символы.ПС + " FROM " + ИмяТаблицы + " WITH(NOLOCK)";
		
		//??? ТУТ КУСОК С ОТБОРАМИ ДОЛЖЕН БЫТЬ
		
		//
		стрОписаниеОтбора = ПолучитьСтрокуОписанияОтбора(БазаДанных, ИмяТаблицы, ОписаниеИсточникаДанных, ВариантНастройки.Настройки.Отбор, ВариантНастройки.Настройки.ПараметрыДанных);
		Если ЗначениеЗаполнено(стрОписаниеОтбора) Тогда
			СтрокаТекстЗапроса = СтрокаТекстЗапроса + Символы.ПС + "WHERE" + Символы.ПС + стрОписаниеОтбора;
		КонецЕсли;
		
		//
		ТекстЗапроса = ТекстЗапроса + СтрокаТекстЗапроса;
		
	КонецЦикла;	
	
	//ВСЕГДА ЗАПИХИВАЕМ ВО ВЛОЖЕННЫЙ
	
	//
	МассивВыбранныхПолей = Новый Массив;
	МассивПолейДляГруппировки = Новый Массив;
	МассивПолейСАгрегатнымиФункциями = Новый Массив;	
	
	//
	Для Каждого СтрокаТЗ Из ОписаниеИсточникаДанных Цикл
		
		//
		ПризнакИспользуетсяВФормулах = Ложь;
		Для каждого _СтрокатТЗ Из ОписаниеИсточникаДанных  Цикл
			
			//
			Имя = ВРЕГ(СтрокаТЗ.ИмяПоля);
			Формула = ВРЕГ(_СтрокатТЗ.Формула);
			
			//
			Если Найти(Формула, Имя) > 0 Тогда
				ПризнакИспользуетсяВФормулах = Истина;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		//
		Если НЕ СтрокаТЗ.Пометка И НЕ ЗначениеЗаполнено(СтрокаТЗ.Функция) И НЕ ПризнакИспользуетсяВФормулах Тогда
			Продолжить;
		КонецЕсли;	
			
		//
		стрОписаниеПоля = "";
		
		//
		ИмяРеквизита = СтрокаТЗ.ИмяПоля;
		ЗначениеРеквизита = СтрокаТЗ.ИмяПоля;
		
		//
		Если ЗначениеЗаполнено(СтрокаТЗ.Формула) Тогда
			ЗначениеРеквизита = "(" + ИмяРеквизита +")";
		КонецЕсли;
		
		//
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
		
		//
		Если ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
			
			//
			стрОписаниеПоля = СтрокаТЗ.Функция + "(" + ЗначениеРеквизита + ") as " + ИмяРеквизита;
			
			//
			Для Каждого Элемент Из ВариантНастройки.Настройки.Выбор.Элементы Цикл
				
				//
				Если(Элемент.Использование = Истина ИЛИ ЗначениеЗаполнено(СтрокаТЗ.Функция)) И ПолеКД = Элемент.Поле Тогда //??? ИЛИ ПризнакИспользуетсяВФормулах Тогда //???ZEZA И ПолеКД = Элемент.Поле Тогда
					
					//
					МассивПолейСАгрегатнымиФункциями.Добавить(стрОписаниеПоля);
					Прервать;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		Иначе
			
			//
			Если НайтиПолеВСтруктуреКД(ВариантНастройки.Настройки.Структура, ИмяРеквизита) Тогда
				
				
				//
				Если ЗначениеЗаполнено(СтрокаТЗ.Формула) Тогда
					МассивВыбранныхПолей.Добавить(ЗначениеРеквизита + " as " + ИмяРеквизита);
					МассивПолейДляГруппировки.Добавить(СтрокаТЗ.Формула);
				Иначе	
					МассивВыбранныхПолей.Добавить(ИмяРеквизита);
					МассивПолейДляГруппировки.Добавить(ИмяРеквизита);
				КонецЕсли;
				
				
			//
			//ИначеЕсли ЛОЖЬ И НайтиПолеВОтбореКД(ВариантНастройки.Настройки.Отбор, ИмяРеквизита) Тогда
			ИначеЕсли НайтиПолеВОтбореКД(ВариантНастройки.Настройки.Отбор, ИмяРеквизита) Тогда
				
				//
				ПризнакЭтоПолеСвязи = Ложь;
				Для Каждого СтрокаТЗ Из ОписаниеИсточникаДанных Цикл
					
					//
					Если ВРЕГ(СтрокаТЗ.ПолеСвязи) = ВРЕГ(ИмяРеквизита) Тогда
						
						//
						ПризнакЭтоПолеСвязи = Истина;
						Прервать;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				//
				Если ПризнакЭтоПолеСвязи Тогда
				
					//
					Если ЗначениеЗаполнено(СтрокаТЗ.Формула) Тогда
						МассивВыбранныхПолей.Добавить(ЗначениеРеквизита + " as " + ИмяРеквизита);
						МассивПолейДляГруппировки.Добавить(СтрокаТЗ.Формула);
					Иначе	
						МассивВыбранныхПолей.Добавить(ИмяРеквизита);
						МассивПолейДляГруппировки.Добавить(ИмяРеквизита);
					КонецЕсли;
					
				КонецЕсли;	
				
			Иначе	
				
				//
				Для Каждого Элемент Из ВариантНастройки.Настройки.Выбор.Элементы Цикл
					
					//
					Если(Элемент.Использование = Истина ИЛИ ЗначениеЗаполнено(СтрокаТЗ.Функция)) И ПолеКД = Элемент.Поле Тогда //??? ИЛИ ПризнакИспользуетсяВФормулах Тогда //???ZEZA И ПолеКД = Элемент.Поле Тогда
						
						//
						Если ЗначениеЗаполнено(СтрокаТЗ.Формула) Тогда
							МассивВыбранныхПолей.Добавить(ЗначениеРеквизита + " as " + ИмяРеквизита);
							МассивПолейДляГруппировки.Добавить(СтрокаТЗ.Формула);
						Иначе	
							МассивВыбранныхПолей.Добавить(ИмяРеквизита);
							МассивПолейДляГруппировки.Добавить(ИмяРеквизита);
						КонецЕсли;
						
						//
						Прервать;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
		
	//
	СтрокаТекстЗапроса = "";
	
	//
	Для Каждого ЭлементМассива Из МассивВыбранныхПолей Цикл
		СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
	КонецЦикла;	
	
	//
	Для Каждого ЭлементМассива Из МассивПолейСАгрегатнымиФункциями Цикл
		СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
	КонецЦикла;	
	
	//
	СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);
	
	//
	СтрокаТекстЗапроса = "SELECT " + ?(ЗначениеЗаполнено(КоличествоЗаписей), "TOP " + Формат(КоличествоЗаписей, "ЧГ="), "") + Символы.ПС + СтрокаТекстЗапроса + Символы.ПС + " FROM (" + ТекстЗапроса +") as QUERY" + Символы.ПС;
	
	//
	Если МассивПолейСАгрегатнымиФункциями.Количество() > 0 Тогда 
		
		//
		СтрокаТекстЗапроса = СтрокаТекстЗапроса + "GROUP BY" + Символы.ПС;
		
		//
		Для Каждого ЭлементМассива Из МассивПолейДляГруппировки Цикл
			СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
		КонецЦикла;
		
		//
		СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);
		
	КонецЕсли;	
	
	//СОРТИРОВКА
	СтрокаТекстЗапроса = СтрокаТекстЗапроса + Символы.ПС + "ORDER BY" + Символы.ПС;
	
	//
	Для Каждого ЭлементМассива Из МассивПолейДляГруппировки Цикл
		СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
	КонецЦикла;
	
	//
	СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);	
	
	//////////////////////////////////
	
	//
	ТекстЗапроса = СтрокаТекстЗапроса;
	
	//
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		//
		ADOСоединение = ADO_Connection(СтрокаПодключения);	
		Если ADOСоединение <> Неопределено Тогда

			//
			RecordSet = ADO_Execute(ADOСоединение, ТекстЗапроса); 
			Если RecordSet = Неопределено Тогда
				Сообщить("Возникли ошибки при выполнении запроса");
				Возврат Неопределено;
			КонецЕсли; 
		
			//
			РезультатТЗ = RecordSet_в_ТаблицуЗначений(RecordSet, ОписаниеИсточникаДанных, Периодичность);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//
	Возврат РезультатТЗ;
	
КонецФункции	

///////////

//
//
Функция ПодготовитьВнешнийИсточникДляСхемыКД(БазаДанных, ОписаниеИсточникаДанных, СхемаКомпоновкиДанных, ВариантНастройки, Периодичность = Неопределено) Экспорт
	
	///////////////////////////
	
	//
	СтрокаПодключения = БазаДанных.СтрокаПодключения;
	
	///////////////////////////
	
	//
	ТЗ = Справочники.АК_ОтчетыПоДаннымВнешнихИсточников.ПолучитьТаблицуСРезультатомВыполненияЗапросовКВнешнейБазеДанных(БазаДанных, ОписаниеИсточникаДанных, СхемаКомпоновкиДанных, ВариантНастройки, Периодичность);
	Если ТЗ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//
	Для Каждого СтрокаОписания Из ОписаниеИсточникаДанных Цикл
		
		//
		Если ТЗ.Колонки.Найти(СтрокаОписания.ИмяПоля) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(СтрокаОписания.ОбъектМетаданных) И ЗначениеЗаполнено(СтрокаОписания.ПолеСвязи) Тогда
			
			//
			Соответствие = Новый Соответствие;
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				
				//
				Ключ = СтрокаТЗ[СтрокаОписания.ИмяПоля];
				
				//
				Ссылка1С = Соответствие.Получить(Ключ);
				Если Ссылка1С = Неопределено Тогда
					
					//
					Ссылка1С = ПолучитьСсылку1С(СтрокаОписания.ОбъектМетаданных, СтрокаОписания.ПолеСвязи, Ключ);
					Если НЕ ЗначениеЗаполнено(Ссылка1С) Тогда
						
						//добавляем и пустой тоже
						Соответствие.Вставить(Ключ, Ссылка1С);
						Продолжить;
						
					КонецЕсли;
					
					//
					Соответствие.Вставить(Ключ, Ссылка1С);
					
				КонецЕсли;	
				
				//
				Если ЗначениеЗаполнено(Ссылка1С) Тогда
					СтрокаТЗ[СтрокаОписания.ИмяПоля] = Ссылка1С;
				КонецЕсли;	
				
			КонецЦикла;	
			
			
			////
			//_ТЗ = ТЗ.Скопировать(,СтрокаОписания.ИмяПоля);
			//_ТЗ.Свернуть(СтрокаОписания.ИмяПоля);
			//
			////
			//Для Каждого СтрокаТЗ Из _ТЗ Цикл
			//	
			//	//
			//	Ссылка1С = ПолучитьСсылку1С(СтрокаОписания.ОбъектМетаданных, СтрокаОписания.ПолеСвязи, СтрокаТЗ[СтрокаОписания.ИмяПоля]);
			//	Если НЕ ЗначениеЗаполнено(Ссылка1С) Тогда
			//		Продолжить;
			//	КонецЕсли;	
			//	
			//	//
			//	СтруктураПоиска = Новый Структура(СтрокаОписания.ИмяПоля, СтрокаТЗ[СтрокаОписания.ИмяПоля]);
			//	
			//	//
			//	НайденныеСтроки = ТЗ.НайтиСтроки(СтруктураПоиска);
			//	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			//		НайденнаяСтрока[СтрокаОписания.ИмяПоля] = Ссылка1С;
			//	КонецЦикла;	
			//	
			//	
			//КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Возврат ТЗ;
	
КонецФункции	

//
//
Функция ПолучитьСхемуКомпоновкиДанных(СтрокаПодключения, ОписаниеИсточникаДанных, ВариантНастройки) Экспорт
	
	//
	РезультатСхемаКД = Справочники.АК_ОтчетыПоДаннымВнешнихИсточников.ПолучитьМакет("ШаблонСхемыКомпоновки");
	
	//
	ТЗ = Справочники.АК_ОтчетыПоДаннымВнешнихИсточников.ПодготовитьВнешнийИсточникДляСхемыКД(СтрокаПодключения, ОписаниеИсточникаДанных, ВариантНастройки);
	Если ТЗ = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	//
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗ",ТЗ);
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,	ВнешниеНаборыДанных);
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции	

//
//
Функция Сформировать(ТабличныйДокумент, БазаДанных, ОписаниеИсточникаДанных, ВариантНастройки, ДанныеРасшифровки = Неопределено, Периодичность = Неопределено) Экспорт
	
	///////////////////////////
	
	СтрокаПодключения = БазаДанных.СтрокаПодключения;
	
	///////////////////////////
	
	//
	ТабличныйДокумент.Очистить();
	
	//
	РезультатТД = Новый ТабличныйДокумент;
	
	//
	СхемаКомпоновкиДанных = ПолучитьМакет("ШаблонСхемыКомпоновки");
	
	//
	ТЗ = Справочники.АК_ОтчетыПоДаннымВнешнихИсточников.ПодготовитьВнешнийИсточникДляСхемыКД(БазаДанных, ОписаниеИсточникаДанных, СхемаКомпоновкиДанных, ВариантНастройки, Периодичность);
	Если ТЗ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//
	Для Каждого СтрокаТЗ Из ОписаниеИсточникаДанных Цикл
		
		//
		Если НЕ СтрокаТЗ.Пометка И Не ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Если ТЗ.Колонки.Найти(СтрокаТЗ.ИмяПоля) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		//
		ИмяРеквизита = СтрокаТЗ.ИмяПоля;
		Заголовок = СтрокаТЗ.ПредставлениеПоля;
		
		//
		Поле = СхемаКомпоновкиДанных.НаборыДанных.Таблица.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = ИмяРеквизита;
		Поле.ПутьКДанным = ИмяРеквизита;
		Поле.Заголовок = Заголовок;
		
		//
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Булево"));
		МассивТипов.Добавить(Тип("Число"));
		МассивТипов.Добавить(Тип("Строка"));
		
		//
		Если ЗначениеЗаполнено(СтрокаТЗ.ОбъектМетаданных) Тогда
			МассивТипов.Добавить(Тип(СтрЗаменить(СтрокаТЗ.ОбъектМетаданных, ".", "Ссылка.")));
		КонецЕсли;	
		
		//
		Поле.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		
		//
		Попытка
			Если ЗначениеЗаполнено(СтрокаТЗ.Тип) Тогда
				Поле.ТипЗначения = СтрокаТЗ.Тип;
			КонецЕсли;
		Исключение
		КонецПопытки;	
		
		//
		Если Поле.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
			
			//
			ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			ПолеИтога.Выражение = "СУММА(" + ИмяРеквизита + ")";
			ПолеИтога.ПутьКДанным = ИмяРеквизита;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	//
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		
		//
		Если Найти(Колонка.Имя, "Week") > 0 Тогда
		
			//
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиРодителя = СтрЗаменить(ИмяКолонки, "Week", "");
			
			//
			Поле = СхемаКомпоновкиДанных.НаборыДанных.Таблица.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяКолонки;
			Поле.ПутьКДанным = ИмяКолонкиРодителя + "." + ИмяКолонки;
			Поле.Заголовок = "№ недели";
			
			//
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			
			//
			Поле.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		
		КонецЕсли;
		
		//
		Если Найти(Колонка.Имя, "Period") > 0 Тогда
		
			//
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиРодителя = СтрЗаменить(ИмяКолонки, "Period", "");
			
			//
			Поле = СхемаКомпоновкиДанных.НаборыДанных.Таблица.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяКолонки;
			Поле.ПутьКДанным = ИмяКолонкиРодителя + "." + ИмяКолонки;
			Поле.Заголовок = "Периодичность";
			
			//
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Дата"));
			
			//
			Поле.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			
			//
			Если Периодичность = "НачалоДня" Тогда
				Поле.Заголовок = "День";
				Поле.Оформление.Элементы[12].Значение = "ДФ=dd.MM.yyyy";
			ИначеЕсли Периодичность = "НачалоНедели" Тогда
				Поле.Заголовок = "Начало недели";
				Поле.Оформление.Элементы[12].Значение = "ДФ=dd.MM.yyyy";					
			ИначеЕсли Периодичность = "НачалоМесяца" Тогда
				Поле.Заголовок = "Месяц";
				Поле.Оформление.Элементы[12].Значение = "ДФ='MMMM yyyy ""г.""'";						
			ИначеЕсли Периодичность = "НачалоКвартала" Тогда
				Поле.Заголовок = "Квартал";
				Поле.Оформление.Элементы[12].Значение = "ДФ='q ""квартал"" yyyy ""г.""'";							
			ИначеЕсли Периодичность = "НачалоГода" Тогда
				Поле.Заголовок = "Год";
				Поле.Оформление.Элементы[12].Значение = "ДФ='yyyy ""г.""'";								
			КонецЕсли;
			
			//
			Поле.Оформление.Элементы[12].Использование = Истина;
		
		КонецЕсли;
	
	КонецЦикла;	
	
	//
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Таблица", ТЗ);
	
	//
	_ВариантНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	//
	_ВариантНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	_ВариантНастройки.ЗагрузитьНастройки(ВариантНастройки.Настройки);
	_ВариантНастройки.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);                                                                                   
	
	//
	//Если НЕ ЗначениеЗаполнено(ДанныеРасшифровки) Тогда
		//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//КонецЕсли;	
	
	//
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, _ВариантНастройки.Настройки, ДанныеРасшифровки);
	
	//
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,	ВнешниеНаборыДанных);
	
	//
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции	
	


