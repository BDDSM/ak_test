//++ АК luza 20170906 ИП-00016332

Функция ПреобразоватьСтрокуВчисло(Знач Строка) Экспорт
	Строка = СокрЛП(НРег(Строка));
	
	Строка = СтрЗаменить(Строка, "  ", " ");
	Строка = СтрЗаменить(Строка, Символы.Таб, " ");
	Строка = СтрЗаменить(Строка, Символы.НПП, " ");
	Строка = СтрЗаменить(Строка, Символы.ПС, " ");
	
	Строка = СтрЗаменить(Строка, " (", " ");
	Строка = СтрЗаменить(Строка, " )", " ");
	Строка = СтрЗаменить(Строка, ")", "");
	Строка = СтрЗаменить(Строка, "(", "");
	
	Строка = СтрЗаменить(Строка, " ", Символы.ПС);
	
	МассивСтрок = Новый Массив;
	Для а = 1 По СтрЧислоСтрок(Строка) Цикл
		МассивСтрок.Добавить(СтрПолучитьСтроку(Строка, а));
	КонецЦикла;	
	
	Возврат ПреобразоватьМассивСтрокВЧисло(МассивСтрок);
	
КонецФункции

Функция ПреобразоватьМассивСтрокВЧисло(Массивстрок) 
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Строка");
	ТЗ.Колонки.Добавить("Число");
	ТЗ.Колонки.Добавить("Множитель");
	
	Для каждого Стр Из МассивСтрок Цикл
		НСтр = ТЗ.Добавить();
		НСтр.Строка = Стр;
		НСтр.Число = СтрокаЧислом(Стр);
		Если ЗначениеЗаполнено(НСтр.Число) = Ложь Тогда
			Нстр.Множитель = ОпределитьМножитель(Стр);
		Иначе
			НСтр.Множитель = 0;
		КонецЕсли;	
	КонецЦикла;
	
	Число = 0;	
	Результат  = 0;
	Для каждого Стр Из ТЗ Цикл
		Если Стр.Множитель = 0 Тогда
			Число = Число + Стр.Число;
		ИначеЕсли Стр.Множитель = -1 Тогда
			Число = 0;
		Иначе	
			Результат = Результат + Число*Стр.Множитель;
			Число = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция СтрокаЧислом(ЧислоСтрокой)  	
	
	Если  ЧислоСтрокой = "сто" Тогда
		Число = 100;	
	ИначеЕсли ЧислоСтрокой = "двести" Тогда	
		Число = 200;
	ИначеЕсли ЧислоСтрокой = "триста" Тогда
		Число = 300;
	ИначеЕсли ЧислоСтрокой = "четыреста" Тогда
		Число =400;
	ИначеЕсли ЧислоСтрокой = "пятьсот" Тогда   
		Число = 500;
	ИначеЕсли ЧислоСтрокой = "шестьсот" Тогда
		Число = 600;
	ИначеЕсли ЧислоСтрокой = "семьсот" Тогда
		Число = 700;
	ИначеЕсли ЧислоСтрокой = "восемсот" Тогда
		Число = 800;        	
	ИначеЕсли ЧислоСтрокой = "восемьсот" Тогда
		Число = 800;        
	ИначеЕсли ЧислоСтрокой = "девятьсот" Тогда
		Число = 900;
	ИначеЕсли ЧислоСтрокой = "девятсот" Тогда
		Число = 900;	
	ИначеЕсли ЧислоСтрокой = "одиннадцать" Тогда
		Число = 11;
	ИначеЕсли ЧислоСтрокой = "двенадцать" Тогда
		Число = 12;
	ИначеЕсли ЧислоСтрокой = "тринадцать" Тогда
		Число = 13;        
	ИначеЕсли ЧислоСтрокой = "четырнадцать" Тогда 
		Число = 14;
	ИначеЕсли ЧислоСтрокой = "пятнадцать" Тогда   
		Число = 15;
	ИначеЕсли ЧислоСтрокой = "шестнадцать" Тогда
		Число = 16;
	ИначеЕсли ЧислоСтрокой = "семнадцать" Тогда
		Число = 17;
	ИначеЕсли ЧислоСтрокой = "восемнадцать" Тогда
		Число = 18;
	ИначеЕсли ЧислоСтрокой = "девятнадцать" Тогда
		Число = 19;
	ИначеЕсли ЧислоСтрокой = "двадцать" Тогда    
		Число = 20;
	ИначеЕсли ЧислоСтрокой = "тридцать" Тогда
		Число = 30;
	ИначеЕсли ЧислоСтрокой = "сорок" Тогда
		Число = 40;
	ИначеЕсли ЧислоСтрокой = "пятьдесят" Тогда
		Число = 50;
	ИначеЕсли ЧислоСтрокой = "шестьдесят" Тогда
		Число = 60;
	ИначеЕсли ЧислоСтрокой = "семьдесят" Тогда
		Число = 70;
	ИначеЕсли ЧислоСтрокой = "восемьдесят" Тогда
		Число = 80;
	ИначеЕсли ЧислоСтрокой = "девяносто" Тогда
		Число = 90;
	ИначеЕсли ЧислоСтрокой = "десять" Тогда
		Число = 10;
	ИначеЕсли ЧислоСтрокой = "девять" Тогда
		Число = 9;
	ИначеЕсли ЧислоСтрокой = "восемь" Тогда         
		Число = 8;
	ИначеЕсли ЧислоСтрокой = "семь" Тогда     
		Число = 7;
	ИначеЕсли ЧислоСтрокой = "шесть" Тогда
		Число = 6;
	ИначеЕсли ЧислоСтрокой = "пять" Тогда  
		Число = 5;
	ИначеЕсли ЧислоСтрокой = "четыре" Тогда 
		Число = 4;
	ИначеЕсли ЧислоСтрокой = "три" Тогда 
		Число = 3;
	ИначеЕсли ЧислоСтрокой = "два" Тогда 
		Число = 2;
	ИначеЕсли ЧислоСтрокой = "две" Тогда 
		Число = 2;	
	ИначеЕсли ЧислоСтрокой = "один" Тогда
		Число = 1;
	ИначеЕсли ЧислоСтрокой = "одна" Тогда
		Число = 1;	
	ИначеЕсли СтрДлина(ЧислоСтрокой) = 2 Тогда
		Попытка
			Число = Число(ЧислоСтрокой);
		Исключение
			Число = 0;
		КонецПопытки;
	Иначе
		Число = 0;
	КонецЕсли;
	
	Возврат  Число;
	
КонецФункции

Функция ОпределитьМножитель(Строка)
	Если Строка = "рубль" Тогда
		Множитель = 1;
	ИначеЕсли Строка = "рубля" Тогда
		Множитель = 1;
	ИначеЕсли Строка = "рублей" Тогда
		Множитель = 1;	
	ИначеЕсли Строка = "руб" Тогда
		Множитель = 1;		
	ИначеЕсли Строка = "руб." Тогда
		Множитель = 1;			
	ИначеЕсли Строка = "копейка" Тогда
		Множитель = 0.01;	
	ИначеЕсли Строка = "копейки" Тогда
		Множитель = 0.01;	
	ИначеЕсли Строка = "копеек" Тогда
		Множитель = 0.01;	
	ИначеЕсли Строка = "коп" Тогда
		Множитель = 0.01;		
	ИначеЕсли Строка = "коп." Тогда
		Множитель = 0.01;			
	ИначеЕсли Строка = "тысяча" Тогда
		Множитель = 1000;				
	ИначеЕсли Строка = "тысячи" Тогда
		Множитель = 1000;					
	ИначеЕсли Строка = "тысяч" Тогда
		Множитель = 1000;						
	ИначеЕсли Строка = "миллион" Тогда
		Множитель = 1000000;								
	ИначеЕсли Строка = "миллионов" Тогда
		Множитель = 1000000;									
	ИначеЕсли Строка = "миллиона" Тогда
		Множитель = 1000000;			
	ИначеЕсли Строка = "миллиард" Тогда
		Множитель = 1000000000;								
	ИначеЕсли Строка = "миллиардов" Тогда
		Множитель = 1000000000;								
	ИначеЕсли Строка = "миллиарда" Тогда
		Множитель = 1000000000;								
	Иначе
		Множитель = -1;
	КонецЕсли;
	
	Возврат Множитель;
КонецФункции	

//-- АК luza 20170906 ИП-00016332

//++ АК luza 20170912 ИП-00016332
//получаеть дату из строк вида 
//Счет на оплату № 16599 от 25 августа 2017 № Договора 83-3-1677 от П.11.2016
//Оплата по счету № 1652 от 29.05.2017 за торговое оборудование. 
Функция ПолучитьДатуИзПроизвольнойСтроки(Знач сДата) Экспорт
	
	
	Перем п_мТЕМП; // массив временных переменных
	
	//-----для локализации —----------------------------
	Перем п_мФорматы;
	п_мФорматы = Новый Массив(4);
	п_мФорматы[0] = "г";    // знак года
	п_мФорматы[1] = "ЧЦ=2; ЧН=; ЧВН=";
	п_мФорматы[2] = "ЧГ=0";    
	п_мФорматы[3] = "ДФ=МММ";
	//---------------------------------------------------
	п_мТЕМП = Новый массив(7);//массив для временных переменных  
	
	Если ПустаяСтрока(сДата) Тогда
		п_мТЕМП[6] =Дата("00010101000000");
		Возврат п_мТЕМП[6];
	КонецЕсли;
	
	сДата = НРЕГ(сДата);
	
	Если Найти(сДата, "от") > 0 Тогда
		сДата = СокрЛП(Сред(сДата, Найти(сДата,"от") + 2));
	КонецЕсли;	
	
	
	сДата = Формат(сДата, п_мФорматы[2]);        //на случай если в формате 1с числом: 20150320220315. (+локализация)
	
	//Если использовать конструкцию "Если Найти(сДата,..." , то перебор букв строки будет происходить 2а раза: Найти и СтрЗаменить //Использование Найти в данном случае бессмысленно
	// можно добавить любой разделитель - @, #, %, и тд, неважно. Главное, заменить их на "."
	сДата = СтрЗаменить(сДата, "«", "");             //«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, "»", "");            //«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, п_мФорматы[0] + ".", "");   //1 Фев 05 г. 17:20:00 //просто "г" нельзя из-за "авГуст", например. Но в далее,после парсинга месяца, любое "г" в строке,  удаляется
	сДата = СтрЗаменить(сДата, "/", ".");            // 1/2/5
	сДата = СтрЗаменить(сДата, "\", ".");            // 1\02\05
	сДата = СтрЗаменить(сДата, "-", ".");            // 1-02-05
	сДата = СтрЗаменить(сДата, Символы.Таб, ".");        // 01.02.2005    17:20:00    
	сДата = СтрЗаменить(сДата, " ", ".");            // 1/02 2005 17:20:00
	сДата = СтрЗаменить(сДата, "..",  ".");            //Возможны, появление двойных точек из за "янв." в "янв" или из-за " г. ".    
	сДата = НРег(СокрЛП(сДата));                 // строку в нижний регистр, чтоб проще было с Янв Январь янв и тд
	
	
	
	п_мТЕМП[0] = Найти(сДата,".");
	
	Если п_мТЕМП[0] = 0 Тогда
		//если точек нет
		
		Если Найти(сДата,":") Тогда
			//только время (или ошибка)
			сДата = "01.01.0001." + сДата;
			п_мТЕМП[0] = Найти(сДата,".");
		иначе            
			//похоже на формат 1с. Можно добавить "попытку"...
			п_мТЕМП[6] = дата(сДата);
			Возврат п_мТЕМП[6];
			
		КонецЕсли;    
		
		
		//иначеЕсли п_мТЕМП[0] = 1 Тогда
		//        //например, месяц и год
	КонецЕсли;
	// —--- ДНИ —---------------------------------—
	п_мТЕМП[0] = Лев(сДата, п_мТЕМП[0] - 1);//дни 
	п_мТЕМП[4] = Прав(сДата, СтрДлина(сДата) - СтрДлина(п_мТЕМП[0])-1);// месяц и все что справа
	п_мТЕМП[0] = Формат(Число(п_мТЕМП[0]),п_мФорматы[1]);//дни в формат двух чисел
	// —--- Месяц —---------------------------------
	п_мТЕМП[1] = Лев(п_мТЕМП[4], найти(п_мТЕМП[4],".") - 1);// месяц
	п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[1])-1);// год и все что справа
	//Возможны варианты месяца "янв" "янв." "январь" "января" 
	Если СтрДлина(п_мТЕМП[1]) > 2 Тогда // месяц в виде янв или январь
		
		п_мТЕМП[2] = 0;
		Пока п_мТЕМП[2] < 12 Цикл 
			
			п_мТЕМП[2] = п_мТЕМП[2]+1;
			// берем из "янв." только "янв"
			п_мТЕМП[3] = СтрЗаменить(Формат(Дата("2001" + Формат(п_мТЕМП[2],п_мФорматы[1]) + "01"), п_мФорматы[3]),".","");// + локализация
			
			п_мТЕМП[3] = найти(п_мТЕМП[1], Лев(п_мТЕМП[3],3));
			
			Если п_мТЕМП[3] > 0 тогда
				п_мТЕМП[1] = Формат(п_мТЕМП[2],п_мФорматы[1]);
				прервать;
			КонецЕсли;
		КонецЦикла;    
	Иначе
		п_мТЕМП[1] = Формат(Число(п_мТЕМП[1]),п_мФорматы[1]);
	КонецЕсли;
	// —--- ГОД —---------------------------------
	//Если в строке было "г" без точки("г.")
	п_мТЕМП[4] = СтрЗаменить(п_мТЕМП[4], п_мФорматы[0], "");
	//ищем год. Дата может быть без времени, т.е. год последний в строке
	п_мТЕМП[2] = Найти(п_мТЕМП[4],".");
	
	Если п_мТЕМП[2]>0 Тогда
		п_мТЕМП[2] =  Лев(п_мТЕМП[4], п_мТЕМП[2] - 1);// год
		п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[2])-1);//время и все что справа
	Иначе
		п_мТЕМП[2] = п_мТЕМП[4];
		п_мТЕМП[4] = "";
	КонецЕсли;    
	
	//проверяем год
	п_мТЕМП[3] = СтрДлина(п_мТЕМП[2]);
	//если год из двух цыфр
	Если п_мТЕМП[3] = 2 или п_мТЕМП[3] = 1 Тогда
		п_мТЕМП[3] = Число(п_мТЕМП[2]);// год как число
		
		//что означает 15 в "20.03.15"? это 2015г или 1915г? (Настраиваем под себя или выдаём ошибку)
		// в моем варианте если  < 50 то это 2000г. иначе 1900г.
		Если п_мТЕМП[3] < 50 Тогда 
			п_мТЕМП[2] = "20" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		Иначе
			п_мТЕМП[2] = "19" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		КонецЕсли;    
		
	КонецЕсли;
	
	// =======================  Форматируем время ==============================
	п_мТЕМП[6] = СтрЗаменить(п_мТЕМП[4],":", ".");// если дата была, например: 17-30-10, то сейчас 17.30.10 
	//"попытка" на преобразование даты, по времени, занимает столько же, а по ресурсам больше, чем сам парсинг времени. 
	//поэтому, убиваем двух зайцев перебором часы/мин/сек сразу
	//Если СтрДлина(п_мТЕМП[6]) > 0 Тогда
	//    
	//    п_мТЕМП[5] = найти(п_мТЕМП[6],".");
	//    Если п_мТЕМП[5] > 0 Тогда
	//        // ========= часы    =================
	//        п_мТЕМП[3] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);//часы 
	//        п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[3])-1);// минуты и все что справа
	//        
	//        Если п_мТЕМП[3] = "" тогда
	//            п_мТЕМП[3] = "00";        
	//        Иначе
	//            //при переводе в дату лидирующий 0 у часов удаляется. Т.е. след. строка бесполезна
	//            //п_мТЕМП[3] = Формат(Число(п_мТЕМП[3]),п_мФорматы[1]);//часы в формат двух чисел     
	//        КонецЕсли;        
	//        
	//        п_мТЕМП[5] = найти(п_мТЕМП[6],".");
	//        Если п_мТЕМП[5] > 0 Тогда
	//            // ========= минуты    =================
	//            п_мТЕМП[4] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);
	//            п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[4])-1);// секунды и все что справа
	//            Если п_мТЕМП[4] = "" тогда
	//                п_мТЕМП[4] = "00";        
	//            Иначе
	// 				п_мТЕМП[4] = Формат(Число(п_мТЕМП[4]),п_мФорматы[1]);//минуты в формат двух чисел     
	//            КонецЕсли;
	//            
	//            // ========= секунды    =================
	//            Если СтрДлина(п_мТЕМП[6]) = 0 Тогда
	//                п_мТЕМП[5] = "00";        
	//            Иначе
	//                п_мТЕМП[5] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);//секунды в формат двух чисел     
	//            КонецЕсли;
	//            
	//        Иначе
	//            п_мТЕМП[4] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);    
	//            п_мТЕМП[5] = "00";            
	//        КонецЕсли;     
	//    Иначе
	//        п_мТЕМП[3] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);        
	//        п_мТЕМП[4] = "00";
	//        п_мТЕМП[5] = "00";
	//    КонецЕсли;
	//    
	////Иначе
	//    п_мТЕМП[3] = "00";        
	//    п_мТЕМП[4] = "00";
	//    п_мТЕМП[5] = "00";            
	//КонецЕсли;
	
	п_мТЕМП[3] = "00";        
	п_мТЕМП[4] = "00";
	п_мТЕМП[5] = "00";            
	
	п_мТЕМП[6] = п_мТЕМП[0] + "." + п_мТЕМП[1] + "." + п_мТЕМП[2] + " " + п_мТЕМП[3] + ":" + п_мТЕМП[4] + ":" + п_мТЕМП[5];
	п_мТЕМП[6] = дата(п_мТЕМП[6]);
	
	Возврат п_мТЕМП[6];
	
	
КонецФункции

Функция СтрВДату(Знач сДата) Экспорт
	
	Перем п_мТЕМП; // массив временных переменных
	
	//-----для локализации —----------------------------
	Перем п_мФорматы;
	п_мФорматы = Новый Массив(4);
	п_мФорматы[0] = "г";    // знак года
	п_мФорматы[1] = "ЧЦ=2; ЧН=; ЧВН=";
	п_мФорматы[2] = "ЧГ=0";    
	п_мФорматы[3] = "ДФ=МММ";
	//---------------------------------------------------
	п_мТЕМП = Новый массив(7);//массив для временных переменных    
	
	Если ПустаяСтрока(сДата) Тогда
		п_мТЕМП[6] =Дата("00010101000000");
		Возврат п_мТЕМП[6];
	КонецЕсли;
	
	сДата = Формат(сДата, п_мФорматы[2]);        //на случай если в формате 1с числом: 20150320220315. (+локализация)
	
	//Если использовать конструкцию "Если Найти(сДата,..." , то перебор букв строки будет происходить 2а раза: Найти и СтрЗаменить //Использование Найти в данном случае бессмысленно
	// можно добавить любой разделитель - @, #, %, и тд, неважно. Главное, заменить их на "."
	сДата = СтрЗаменить(сДата, "«", "");             //«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, "»", "");            //«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, п_мФорматы[0] + ".", "");   //1 Фев 05 г. 17:20:00 //просто "г" нельзя из-за "авГуст", например. Но в далее,после парсинга месяца, любое "г" в строке,  удаляется
	сДата = СтрЗаменить(сДата, "/", ".");            // 1/2/5
	сДата = СтрЗаменить(сДата, "\", ".");            // 1\02\05
	сДата = СтрЗаменить(сДата, "-", ".");            // 1-02-05
	сДата = СтрЗаменить(сДата, Символы.Таб, ".");        // 01.02.2005    17:20:00    
	сДата = СтрЗаменить(сДата, " ", ".");            // 1/02 2005 17:20:00
	сДата = СтрЗаменить(сДата, "..",  ".");            //Возможны, появление двойных точек из за "янв." в "янв" или из-за " г. ".    
	сДата = НРег(СокрЛП(сДата));                 // строку в нижний регистр, чтоб проще было с Янв Январь янв и тд
	
	
	
	п_мТЕМП[0] = Найти(сДата,".");
	
	Если п_мТЕМП[0] = 0 Тогда
		//если точек нет
		
		Если Найти(сДата,":") Тогда
			//только время (или ошибка)
			сДата = "01.01.0001." + сДата;
			п_мТЕМП[0] = Найти(сДата,".");
		иначе            
			//похоже на формат 1с. Можно добавить "попытку"...
			п_мТЕМП[6] = дата(сДата);
			Возврат п_мТЕМП[6];
			
		КонецЕсли;    
		
		
		//иначеЕсли п_мТЕМП[0] = 1 Тогда
		//        //например, месяц и год
	КонецЕсли;
	// —--- ДНИ —---------------------------------—
	п_мТЕМП[0] = Лев(сДата, п_мТЕМП[0] - 1);//дни 
	п_мТЕМП[4] = Прав(сДата, СтрДлина(сДата) - СтрДлина(п_мТЕМП[0])-1);// месяц и все что справа
	п_мТЕМП[0] = Формат(Число(п_мТЕМП[0]),п_мФорматы[1]);//дни в формат двух чисел
	// —--- Месяц —---------------------------------
	п_мТЕМП[1] = Лев(п_мТЕМП[4], найти(п_мТЕМП[4],".") - 1);// месяц
	п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[1])-1);// год и все что справа
	//Возможны варианты месяца "янв" "янв." "январь" "января" 
	Если СтрДлина(п_мТЕМП[1]) > 2 Тогда // месяц в виде янв или январь
		
		п_мТЕМП[2] = 0;
		Пока п_мТЕМП[2] < 12 Цикл 
			
			п_мТЕМП[2] = п_мТЕМП[2]+1;
			// берем из "янв." только "янв"
			п_мТЕМП[3] = СтрЗаменить(Формат(Дата("2001" + Формат(п_мТЕМП[2],п_мФорматы[1]) + "01"), п_мФорматы[3]),".","");// + локализация
			
			п_мТЕМП[3] = найти(п_мТЕМП[1], Лев(п_мТЕМП[3],3));
			
			Если п_мТЕМП[3] > 0 тогда
				п_мТЕМП[1] = Формат(п_мТЕМП[2],п_мФорматы[1]);
				прервать;
			КонецЕсли;
		КонецЦикла;    
	Иначе
		п_мТЕМП[1] = Формат(Число(п_мТЕМП[1]),п_мФорматы[1]);
	КонецЕсли;
	// —--- ГОД —---------------------------------
	//Если в строке было "г" без точки("г.")
	п_мТЕМП[4] = СтрЗаменить(п_мТЕМП[4], п_мФорматы[0], "");
	//ищем год. Дата может быть без времени, т.е. год последний в строке
	п_мТЕМП[2] = Найти(п_мТЕМП[4],".");
	
	Если п_мТЕМП[2]>0 Тогда
		п_мТЕМП[2] =  Лев(п_мТЕМП[4], п_мТЕМП[2] - 1);// год
		п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[2])-1);//время и все что справа
	Иначе
		п_мТЕМП[2] = п_мТЕМП[4];
		п_мТЕМП[4] = "";
	КонецЕсли;    
	
	//проверяем год
	п_мТЕМП[3] = СтрДлина(п_мТЕМП[2]);
	//если год из двух цыфр
	Если п_мТЕМП[3] = 2 или п_мТЕМП[3] = 1 Тогда
		п_мТЕМП[3] = Число(п_мТЕМП[2]);// год как число
		
		//что означает 15 в "20.03.15"? это 2015г или 1915г? (Настраиваем под себя или выдаём ошибку)
		// в моем варианте если  < 50 то это 2000г. иначе 1900г.
		Если п_мТЕМП[3] < 50 Тогда 
			п_мТЕМП[2] = "20" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		Иначе
			п_мТЕМП[2] = "19" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		КонецЕсли;    
		
	КонецЕсли;
	
	// =======================  Форматируем время ==============================
	п_мТЕМП[6] = СтрЗаменить(п_мТЕМП[4],":", ".");// если дата была, например: 17-30-10, то сейчас 17.30.10 
	//"попытка" на преобразование даты, по времени, занимает столько же, а по ресурсам больше, чем сам парсинг времени. 
	//поэтому, убиваем двух зайцев перебором часы/мин/сек сразу
	//Если СтрДлина(п_мТЕМП[6]) > 0 Тогда
	//    
	//    п_мТЕМП[5] = найти(п_мТЕМП[6],".");
	//    Если п_мТЕМП[5] > 0 Тогда
	//        // ========= часы    =================
	//        п_мТЕМП[3] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);//часы 
	//        п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[3])-1);// минуты и все что справа
	//        
	//        Если п_мТЕМП[3] = "" тогда
	//            п_мТЕМП[3] = "00";        
	//        Иначе
	//            //при переводе в дату лидирующий 0 у часов удаляется. Т.е. след. строка бесполезна
	//            //п_мТЕМП[3] = Формат(Число(п_мТЕМП[3]),п_мФорматы[1]);//часы в формат двух чисел     
	//        КонецЕсли;        
	//        
	//        п_мТЕМП[5] = найти(п_мТЕМП[6],".");
	//        Если п_мТЕМП[5] > 0 Тогда
	//            // ========= минуты    =================
	//            п_мТЕМП[4] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);
	//            п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[4])-1);// секунды и все что справа
	//            Если п_мТЕМП[4] = "" тогда
	//                п_мТЕМП[4] = "00";        
	//            Иначе
	// 				п_мТЕМП[4] = Формат(Число(п_мТЕМП[4]),п_мФорматы[1]);//минуты в формат двух чисел     
	//            КонецЕсли;
	//            
	//            // ========= секунды    =================
	//            Если СтрДлина(п_мТЕМП[6]) = 0 Тогда
	//                п_мТЕМП[5] = "00";        
	//            Иначе
	//                п_мТЕМП[5] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);//секунды в формат двух чисел     
	//            КонецЕсли;
	//            
	//        Иначе
	//            п_мТЕМП[4] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);    
	//            п_мТЕМП[5] = "00";            
	//        КонецЕсли;     
	//    Иначе
	//        п_мТЕМП[3] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);        
	//        п_мТЕМП[4] = "00";
	//        п_мТЕМП[5] = "00";
	//    КонецЕсли;
	//    
	//Иначе
	//    п_мТЕМП[3] = "00";        
	//    п_мТЕМП[4] = "00";
	//    п_мТЕМП[5] = "00";            
	//КонецЕсли;
	
	п_мТЕМП[3] = "00";        
	п_мТЕМП[4] = "00";
	п_мТЕМП[5] = "00";            
	
	п_мТЕМП[6] = п_мТЕМП[0] + "." + п_мТЕМП[1] + "." + п_мТЕМП[2] + " " + п_мТЕМП[3] + ":" + п_мТЕМП[4] + ":" + п_мТЕМП[5];
	п_мТЕМП[6] = дата(п_мТЕМП[6]);
	
	Возврат п_мТЕМП[6];
	
	
КонецФункции

Функция РаспознатьПоКлючевомуСлову(ЗНАЧ РаспозннанныйТекст, КлючевоеСлово, СимволовСлева,  СимволовСправа, СтопСлово) Экспорт
	ЧислоВхождений = СтрЧислоВхождений(РаспозннанныйТекст, КлючевоеСлово);		
	
	Для а = 1 По ЧислоВхождений Цикл
		Результат = "";
		
		ПозицияКлючевогоСлова = Найти(РаспозннанныйТекст,КлючевоеСлово) - СимволовСлева;
		Если ПозицияКлючевогоСлова > 0 Тогда
			ФрагментДляАнализа = Сред(РаспозннанныйТекст,  ПозицияКлючевогоСлова, СимволовСправа);
			
			Для б = 1 + СтрДлина(КлючевоеСлово) По СтрДлина(ФрагментДляАнализа) Цикл
				Если Сред(ФрагментДляАнализа, б, СтрДлина(СтопСлово)) <> СтопСлово Тогда  
					Результат = Результат + Сред(ФрагментДляАнализа, б, 1);
				Иначе 
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) = Истина Тогда
			Прервать;
		КонецЕсли;	
		
		РаспозннанныйТекст = Сред(РаспозннанныйТекст, ПозицияКлючевогоСлова + СтрДлина(КлючевоеСлово)); 
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция НайтиЗначениеПоДаннымОбъекта(ЗНАЧ РаспозннанныйТекст, ИмяРеквизитаВОбъекте, ОбъектСравнения, КлючевоеСлово) Экспорт	
	
	Значение = "";
	Если ЗначениеЗаполнено(ОбъектСравнения) = Истина Тогда
		Если ТипЗнч(ОбъектСравнения) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
			Попытка 
				Если ЗначениеЗаполнено(КлючевоеСлово) = Истина Тогда
					Значение = ОбъектСравнения[ИмяРеквизитаВОбъекте][КлючевоеСлово];
				Иначе	
					Значение = ОбъектСравнения[ИмяРеквизитаВОбъекте];
				КонецЕсли;	
			Исключение
			КонецПопытки;	
			
			Если ЗначениеЗаполнено(Значение) = Истина Тогда
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.ПС, "");
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.НПП, "");
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.Таб, "");
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, " ", "");
				
				Если Найти(РаспозннанныйТекст, Значение) = 0 Тогда				
					Значение = "";
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции	

Функция НайтиЗначениеПоМаске(ЗНАЧ РаспозннанныйТекст, Маска)
	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	RegExp.IgnoreCase = Ложь; //Игнорировать регистр
	RegExp.Global = Истина; //Поиск всех вхождений шаблона
	RegExp.MultiLine = Истина; //Многострочный режим
	
	RegExp.Pattern = Маска;
	
	Matches=RegExp.Execute(РаспозннанныйТекст);
	ЧислоВхождений = Matches.Count();
	
	Текст = "";
	Если ЧислоВхождений > 0 Тогда
		Для к = 0 По ЧислоВхождений - 1 Цикл
			Match = Matches.Item(к);
			SubMatches = Match.SubMatches;
			Если SubMatches.Count() > 0 Тогда
				Ключ = SubMatches.Item(0);
				Текст = Ключ;
			Иначе
				Текст = Match.Value
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
КонецФункции	

//-- АК LUZA 20170912 ИП-00016332

Процедура ВыполнитьРаспознаваниеПодсистемы(ИмяПодсистемы) Экспорт
	
	
	ЗапросАлгоритмы = Новый Запрос;
	ЗапросАлгоритмы.Текст = "ВЫБРАТЬ
	|	АК_АлгоритмыРаспознаванияФайлов.КлючевоеСлово КАК КлючевоеСлово,
	|	АК_АлгоритмыРаспознаванияФайлов.Приоритет КАК Приоритет,
	|	АК_АлгоритмыРаспознаванияФайлов.СтопСлово КАК СтопСлово,
	|	АК_АлгоритмыРаспознаванияФайлов.ПроизвольныйАлгоритм,
	|	АК_АлгоритмыРаспознаванияФайлов.СимволовСлева,
	|	АК_АлгоритмыРаспознаванияФайлов.СимволовСправа,
	|	АК_АлгоритмыРаспознаванияФайлов.Свойство,
	|	АК_АлгоритмыРаспознаванияФайлов.ИмяРеквизитаВОбъекте,
	|	АК_АлгоритмыРаспознаванияФайлов.Представление,
	|	АК_АлгоритмыРаспознаванияФайлов.ИскатьПоДаннымОбъекта,
	|	АК_АлгоритмыРаспознаванияФайлов.ПоискПоМаске,
	|	АК_АлгоритмыРаспознаванияФайлов.МаскаПоиска	
	|ИЗ
	|	Справочник.АК_АлгоритмыРаспознаванияФайлов КАК АК_АлгоритмыРаспознаванияФайлов
	|ГДЕ
	|	АК_АлгоритмыРаспознаванияФайлов.Свойство.НазначениеСвойства = &ИмяПодсистемы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	ЗапросАлгоритмы.УстановитьПараметр("ИмяПодсистемы", ИмяПодсистемы);
	ТЗАлгоритмы = ЗапросАлгоритмы.Выполнить().Выгрузить();
	
	
	ЗапросФайлы = Новый Запрос;
	ЗапросФайлы.Текст = "ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.Файл КАК Файл,
	|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения
	|ПОМЕСТИТЬ ВТ_ОЧЕРЕДЬФАЙЛОВ
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА
	|	И НЕ АК_ОчередьРаспознаванияФайлов.Файл.Ссылка ЕСТЬ NULL
	|	И НЕ АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.Ссылка ЕСТЬ NULL
	|	И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад
	|	И АК_ОчередьРаспознаванияФайлов.Обработан = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ВТ_ПереченьСвойств
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.НазначениеСвойства = &ИмяПодсистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОЧЕРЕДЬФАЙЛОВ.Файл,
	|	ВТ_ПереченьСвойств.Свойство,
	|	ВТ_ОЧЕРЕДЬФАЙЛОВ.ОбъектСравнения
	|ПОМЕСТИТЬ ВТ_ФайлыСПеречнемСвойств
	|ИЗ
	|	ВТ_ОЧЕРЕДЬФАЙЛОВ КАК ВТ_ОЧЕРЕДЬФАЙЛОВ,
	|	ВТ_ПереченьСвойств КАК ВТ_ПереченьСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ПОМЕСТИТЬ ВТ_ПриведенныеЗначенияСвойств
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Файлы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФайлыСПеречнемСвойств.Файл КАК Файл,
	|	ВТ_ФайлыСПеречнемСвойств.Свойство КАК Свойство,
	|	ЕСТЬNULL(ВТ_ПриведенныеЗначенияСвойств.Значение, """") КАК Значение,
	|	ВТ_ФайлыСПеречнемСвойств.ОбъектСравнения
	|ИЗ
	|	ВТ_ФайлыСПеречнемСвойств КАК ВТ_ФайлыСПеречнемСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриведенныеЗначенияСвойств КАК ВТ_ПриведенныеЗначенияСвойств
	|		ПО ВТ_ФайлыСПеречнемСвойств.Файл = ВТ_ПриведенныеЗначенияСвойств.Объект
	|			И ВТ_ФайлыСПеречнемСвойств.Свойство = ВТ_ПриведенныеЗначенияСвойств.Свойство
	|ИТОГИ ПО
	|	Файл";
	
	Если ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы Тогда
		ЗапросФайлы.Текст = СтрЗаменить(ЗапросФайлы.Текст, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад"
		, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ЗаявкаНаУслугиМатериалы");
	ИначеЕсли ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Склад Тогда	
		ЗапросФайлы.Текст = СтрЗаменить(ЗапросФайлы.Текст, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад"
		, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад");
	ИначеЕсли ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Этикетки Тогда		
		ЗапросФайлы.Текст = СтрЗаменить(ЗапросФайлы.Текст, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад"
		, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Справочник.ХарактеристикиНоменклатуры");
	ИначеЕсли ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Счет_Факутры Тогда		
		ЗапросФайлы.Текст = СтрЗаменить(ЗапросФайлы.Текст, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад"
		, "И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПоступлениеТоваровУслуг");													 
	КонецЕсли;
	
	ЗапросФайлы.УстановитьПараметр("ИмяПодсистемы", ИмяПодсистемы);
	ДеревоФайлов = ЗапросФайлы.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаФайл Из ДеревоФайлов.Строки Цикл 	
		
		Путь = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознанногоОбъекта(СтрокаФайл.Файл);
		ВыбФайл  = Новый Файл(Путь);
		Если ВыбФайл.Существует() = Истина Тогда		
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(Путь); 				
			РаспозннанныйТекст = Текст.ПолучитьТекст();
			
			Если ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Склад 
				ИЛИ ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Этикетки Тогда					
				РаспозннанныйТекст = НРег(РаспозннанныйТекст);		
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.НПП, " ");	
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.Таб, " ");	
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "  ", " ");	
				
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "7734675810", "");	//Наш ИНН
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "7734875810", "");	//Наш ИНН
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "773401001", "");	//Наш КПП
			ИначеЕсли ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Счет_Факутры  Тогда	
				РаспозннанныйТекст = НРег(РаспозннанныйТекст);		
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.НПП, " ");	
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.Таб, " ");	
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "  ", " ");				
				
				//РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "7734675810", "");	//Наш ИНН
				//РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "7734875810", "");	//Наш ИНН
				//РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "773401001", "");	//Наш КПП 			
				
				РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, "общество с ограниченной ответственностью", "ооо");	//Наш КПП 			
				
			КонецЕсли;	
			РаспозннанныйТекст = СтрЗаменить(РаспозннанныйТекст, Символы.ПС, " ");	
		Иначе
			Продолжить;			
		КонецЕсли;
		
		Для каждого СтрокаСвойстваФайла Из СтрокаФайл.Строки Цикл
			//Пропускаем уже распознанные значения
			Если ЗначениеЗаполнено(СтрокаСвойстваФайла.Значение) = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Фильтр = Новый Структура("Свойство", СтрокаСвойстваФайла.Свойство);
			
			МассивАлгоритмов = ТЗАлгоритмы.НайтиСтроки(Фильтр);
			Для каждого Алгоритм Из МассивАлгоритмов Цикл
				//Алгоритмов поиска может быть много, если уже нашли - пропускаем
				Если ЗначениеЗаполнено(СтрокаСвойстваФайла.Значение) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Если Алгоритм.ИскатьПоДаннымОбъекта = Истина И ЗначениеЗаполнено(Алгоритм.ИмяРеквизитаВОбъекте) Тогда
					СтрокаСвойстваФайла.Значение = СокрЛП(НайтиЗначениеПоДаннымОбъекта(РаспозннанныйТекст, Алгоритм.ИмяРеквизитаВОбъекте, СтрокаСвойстваФайла.ОбъектСравнения, Алгоритм.КлючевоеСлово)); 
				ИначеЕсли Алгоритм.ПоискПоМаске = Истина И ЗначениеЗаполнено(Алгоритм.МаскаПоиска) Тогда
					СтрокаСвойстваФайла.Значение = СокрЛП(НайтиЗначениеПоМаске(РаспозннанныйТекст, Алгоритм.МаскаПоиска)); 	
				Иначе	    				
					СтрокаСвойстваФайла.Значение = СокрЛП(РаспознатьПоКлючевомуСлову(РаспозннанныйТекст, Алгоритм.КлючевоеСлово, Алгоритм.СимволовСлева, Алгоритм.СимволовСправа, Алгоритм.СтопСлово));			
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Алгоритм.ПроизвольныйАлгоритм) Тогда
					Попытка 
						Выполнить(Алгоритм.ПроизвольныйАлгоритм);
					Исключение 						
					КонецПопытки;
				КонецЕсли;	
				
				Если Алгоритм.Свойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда
					//Попытка преобразовать в число
					Если ТипЗнч(СтрокаСвойстваФайла.Значение) = Тип("Строка") Тогда
						СтрокаСвойстваФайла.Значение = СтрЗаменить(СтрокаСвойстваФайла.Значение, " ", "");
						СтрокаСвойстваФайла.Значение = СтрЗаменить(СтрокаСвойстваФайла.Значение, Символы.НПП, "");
						Маска = "0123456789.,";
						ВремРезультат = "";
						Для а = 1 По СтрДлина(СтрокаСвойстваФайла.Значение) Цикл
							Если Найти(Маска, Сред(СтрокаСвойстваФайла.Значение, а, 1)) > 0 Тогда
								ВремРезультат = ВремРезультат + Сред(СтрокаСвойстваФайла.Значение, а, 1);
							Иначе
								Прервать;
							КонецЕсли;					
						КонецЦикла;	
						
						Попытка 
							СтрокаСвойстваФайла.Значение = Число(ВремРезультат);
						Исключение
							СтрокаСвойстваФайла.Значение = 0;
						КонецПопытки;	
					КонецЕсли;
				ИначеЕсли Алгоритм.Свойство.ТипЗначения.СодержитТип(Тип("Дата")) Тогда	
					//Попытка преобразовать в дату
					Если ТипЗнч(СтрокаСвойстваФайла.Значение) = Тип("Строка") Тогда
						Попытка 
							СтрокаСвойстваФайла.Значение = СтрВДату(СтрокаСвойстваФайла.Значение);
						Исключение
							СтрокаСвойстваФайла.Значение = "";
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;				
			КонецЦикла;		
		КонецЦикла;	
	КонецЦикла;
	
	Для каждого СтрФайл Из ДеревоФайлов.Строки Цикл
		Для каждого СтрСвойство Из СтрФайл.Строки Цикл
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = СтрСвойство.Файл;
			Запись.Свойство = СтрСвойство.Свойство;
			Запись.Значение = СтрСвойство.Значение;
			Запись.Записать();
		КонецЦикла;	
		
		Если ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Этикетки Тогда 
			Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
			Запись.Файл = СтрФайл.Файл;
			Запись.Прочитать();
			Запись.Обработан = Истина;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура ВыполнитьСравнениеПодсистемы(ИмяПодсистемы) Экспорт
	Запрос = Новый Запрос;
	
	Если ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы Тогда
		
		Запрос.Текст  = "ВЫБРАТЬ
		|	АК_ОчередьРаспознаванияФайлов.Файл,
		|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения
		|ПОМЕСТИТЬ ВТ_Очередь
		|ИЗ
		|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
		|ГДЕ
		|	АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА
		|	И АК_ОчередьРаспознаванияФайлов.Обработан = ЛОЖЬ
		|	И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ЗаявкаНаУслугиМатериалы
		|	И НЕ АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.Ссылка ЕСТЬ NULL
		|	И НЕ АК_ОчередьРаспознаванияФайлов.Файл.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаУслугиМатериалы.Ссылка КАК ОбъектСравнения,
		|	ЗаявкаНаУслугиМатериалы.СчетНаОплату КАК Файл,
		|	ЗаявкаНаУслугиМатериалы.Контрагент.Наименование КАК Контрагент,
		|	ЗаявкаНаУслугиМатериалы.Контрагент.ИНН КАК ИНН,
		|	ЗаявкаНаУслугиМатериалы.СуммаДокумента,
		|	ЗаявкаНаУслугиМатериалы.НомерСчета,
		|	ЗаявкаНаУслугиМатериалы.ДатаСчета,
		|	ЗаявкаНаУслугиМатериалы.СчетКонтрагента.Банк.Код КАК БИК,
		|	ЗаявкаНаУслугиМатериалы.СчетКонтрагента.НомерСчета КАК РасчСчет
		|ИЗ
		|	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
		|		ПО ЗаявкаНаУслугиМатериалы.Ссылка = ВТ_Очередь.ОбъектСравнения
		|			И ЗаявкаНаУслугиМатериалы.СчетНаОплату = ВТ_Очередь.Файл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Файлы) КАК Объект,
		|	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
		|	ЗначенияСвойствОбъектов.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
		|		ПО ЗначенияСвойствОбъектов.Объект = ВТ_Очередь.Файл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Очередь.Файл КАК Файл,
		|	ВТ_Очередь.ОбъектСравнения КАК ОбъектСравнения
		|ИЗ
		|	ВТ_Очередь КАК ВТ_Очередь";
		
		
		СоответствиеРеквизитов = Новый Соответствие;
		//СоответствиеРеквизитов.Вставить("Контрагент", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_НазваниеКонтрагента);
		СоответствиеРеквизитов.Вставить("ИНН", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_ИНН);
		СоответствиеРеквизитов.Вставить("СуммаДокумента", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СуммаСчета);
		СоответствиеРеквизитов.Вставить("НомерСчета", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_НомерСчета);
		СоответствиеРеквизитов.Вставить("ДатаСчета", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_ДатаСчета);
		СоответствиеРеквизитов.Вставить("БИК", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_БИК);
		СоответствиеРеквизитов.Вставить("РасчСчет", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_РассчетныйСчет);
	ИначеЕсли ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Склад Тогда	
		Запрос.Текст  = "ВЫБРАТЬ
		|	АК_ОчередьРаспознаванияФайлов.Файл,
		|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения
		|ПОМЕСТИТЬ ВТ_Очередь
		|ИЗ
		|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
		|ГДЕ
		|	АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА
		|	И АК_ОчередьРаспознаванияФайлов.Обработан = ЛОЖЬ
		|	И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад
		|	И НЕ АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходныйОрдерСкладПрикрепленныеФайлы.Файл КАК Файл,
		|	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка.Поставщик.ИНН КАК ИНН,		
		|	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка КАК ОбъектСравнения,
		|	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка.Поставщик.НаименованиеПолное КАК Поставщик
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.ПрикрепленныеФайлы КАК ПриходныйОрдерСкладПрикрепленныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
		|		ПО ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка = ВТ_Очередь.ОбъектСравнения
		|			И ПриходныйОрдерСкладПрикрепленныеФайлы.Файл = ВТ_Очередь.Файл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Файлы) КАК Объект,
		|	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
		|	ЗначенияСвойствОбъектов.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
		|		ПО ЗначенияСвойствОбъектов.Объект = ВТ_Очередь.Файл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Очередь.Файл КАК Файл,
		|	ВТ_Очередь.ОбъектСравнения КАК ОбъектСравнения
		|ИЗ
		|	ВТ_Очередь КАК ВТ_Очередь";		
		СоответствиеРеквизитов = Новый Соответствие;		
		СоответствиеРеквизитов.Вставить("ИНН", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Склад_ПоставщикИНН);	
	ИначеЕсли ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Этикетки Тогда		
		СоответствиеРеквизитов = Новый Соответствие;				
		Запрос =  Новый Запрос;
		Возврат;
	ИначеЕсли ИмяПодсистемы = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Счет_Факутры Тогда		
		Запрос =  Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ
		|	АК_ОчередьРаспознаванияФайлов.Файл,
		|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения
		|ПОМЕСТИТЬ ВТ_Очередь
		|ИЗ
		|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
		|ГДЕ
		|	АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА
		|	И АК_ОчередьРаспознаванияФайлов.Обработан = ЛОЖЬ
		|	И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И НЕ АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК ОбъектСравнения,
		|	ПоступлениеТоваровУслуг.СчетФактура КАК Файл,
		|	ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры КАК Номер,
		|	ПоступлениеТоваровУслуг.Контрагент.ИНН КАК ИНН,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры КАК Дата,
		|	ПоступлениеТоваровУслуг.СуммаДокумента КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_Очередь.ОбъектСравнения
		|			И ПоступлениеТоваровУслуг.СчетФактура = ВТ_Очередь.Файл
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.УПД,
		|	ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры,
		|	ПоступлениеТоваровУслуг.Контрагент.ИНН,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры,
		|	ПоступлениеТоваровУслуг.СуммаДокумента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_Очередь.ОбъектСравнения
		|			И ПоступлениеТоваровУслуг.УПД = ВТ_Очередь.Файл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Файлы) КАК Объект,
		|	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
		|	ЗначенияСвойствОбъектов.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
		|		ПО ЗначенияСвойствОбъектов.Объект = ВТ_Очередь.Файл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Очередь.Файл КАК Файл,
		|	ВТ_Очередь.ОбъектСравнения КАК ОбъектСравнения
		|ИЗ
		|	ВТ_Очередь КАК ВТ_Очередь";		
		
		СоответствиеРеквизитов = Новый Соответствие;		
		СоответствиеРеквизитов.Вставить("ИНН", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_ИНН);
		СоответствиеРеквизитов.Вставить("Номер", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Номер);
		СоответствиеРеквизитов.Вставить("Дата", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Дата);
		СоответствиеРеквизитов.Вставить("Сумма", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Сумма);
		
	КонецЕсли; 	
	
	МассивРезультат = Запрос.ВыполнитьПакет();
	ТЗ_ДанныеЗаявки = МассивРезультат[1].Выгрузить();	
	ТЗ_Данныефайла = МассивРезультат[2].Выгрузить();
	ТЗОчередь = МассивРезультат[3].Выгрузить();
	
	
	
	Для каждого Стр Из ТЗОчередь Цикл
		ФильтрЗаявки = Новый Структура("ОбъектСравнения, Файл", Стр.ОбъектСравнения, Стр.Файл);
		ФильтрДанныеФайла = Новый Структура("Объект", Стр.Файл);
		
		ТЗ_ДанныеЗаявки_Врем = ТЗ_ДанныеЗаявки.Скопировать(ФильтрЗаявки);
		ТЗ_Данныефайла_Врем  = ТЗ_Данныефайла.Скопировать(ФильтрДанныеФайла);		
		
		ЕстьОшибки = Ложь;
		
		Если ТЗ_ДанныеЗаявки_Врем.Количество() = 0 Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
		
		Если ТЗ_Данныефайла_Врем.Количество() = 0 Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Для каждого СтрЗаявка Из ТЗ_ДанныеЗаявки_Врем Цикл
			Для каждого ЗначСоотв Из СоответствиеРеквизитов Цикл
				ЗначениеВЗаявке = СтрЗаявка[ЗначСоотв.Ключ];
				ЗначениеВФайле = "";
				
				Фильтр = Новый Структура("Свойство", ЗначСоотв.Значение);
				МассивСтрок = ТЗ_Данныефайла_Врем.НайтиСтроки(Фильтр);
				Если МассивСтрок.Количество() > 0 Тогда
					ЗначениевФайле = МассивСтрок[0].Значение; 
				КонецЕсли; 		
				Если ЗначениеЗаполнено(ЗначениеВЗаявке) = Истина Тогда
					Если XMLСтрока(СокрЛП(НРег(ЗначениеВЗаявке))) <> XMLСтрока(СокрЛП(НРег(ЗначениеВФайле))) Тогда
						ЕстьОшибки = Истина;				
					КонецЕсли; 				
				КонецЕсли;
			КонецЦикла;  
		КонецЦикла;	
		
		Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
		Запись.Файл = Стр.Файл;
		Запись.Прочитать();
		
		Запись.Обработан = Истина;			
		Запись.РезультатСравнения = НЕ ЕстьОшибки;
		Запись.Записать();		
	КонецЦикла;
КонецПроцедуры	


Процедура АК_РаспознованиеФайлов() Экспорт 	
	
	//++ АК luza 17.05.2018 закоментировал ниже по причине того что это не используется
	
	////Проверим наличие распознанных текстовых файлов, если есть - поставим отметку, 
	////если нет, то это может быть файл есель или ворд. Их надо созранить в текст
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	АК_ОчередьРаспознаванияФайлов.Файл
	//|ИЗ
	//|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	//|ГДЕ
	//|	АК_ОчередьРаспознаванияФайлов.Распознан = ЛОЖЬ
	//|	И АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезGoogleCloudVision = ЛОЖЬ	
	//|	И АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезFillin = ЛОЖЬ";
	//
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//
	//Для каждого СтрокаФайл Из ТЗ Цикл		
	//	Путь = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознанногоОбъекта(СтрокаФайл.Файл);
	//	ВыбФайл  = Новый Файл(Путь);
	//	Если ВыбФайл.Существует() = Истина Тогда		
	//
	//		ПутьСохранения2 = СтрЗаменить(Путь, ".txt", " (2).txt");
	//		ВыбФайл2  = Новый Файл(ПутьСохранения2);
	//		Если ВыбФайл2.Существует() = Истина Тогда	
	//			УдалитьФайлы(ВыбФайл);
	//			ПереместитьФайл(ПутьСохранения2, Путь);		
	//		КонецЕсли;		
	//		
	//		ЗаписьОчередь = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
	//		ЗаписьОчередь.Файл = СтрокаФайл.Файл;			
	//		ЗаписьОчередь.Прочитать();			
	//		ЗаписьОчередь.Распознан = Истина;
	//		ЗаписьОчередь.Записать();
	//	Иначе	
	//		Путь = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознаванияОбъекта(СтрокаФайл.Файл);
	//		ВыбФайл  = Новый Файл(Путь);
	//		Если ВыбФайл.Существует() = Истина Тогда
	//			ПутьСохранения = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознанногоОбъекта(СтрокаФайл.Файл);				
	//			Если ВРЕГ(Прав(Путь, 4)) = ".XLS" ИЛИ ВРЕГ(Прав(Путь, 5)) = ".XLSX" Тогда									
	//				Попытка
	//					Excel = Новый COMОбъект("Excel.Application");
	//					Excel.DisplayAlerts = 0;
	//					Excel.ScreenUpdating = 0;
	//					Excel.EnableEvents = 0;    
	//					Excel.Visible = 0;
	//					РабочаяКнига = Excel.WorkBooks.Open(Путь, 0);
	//					РабочаяКнига.SaveAs(ПутьСохранения, -4158);
	//					Excel.Quit();
	//					Excel = Неопределено;   
	//				Исключение
	//				КонецПопытки;					
	//				УдалитьФайлы(Путь);
	//			ИначеЕсли ВРЕГ(Прав(Путь, 4)) = ".DOC" ИЛИ ВРЕГ(Прав(Путь, 5)) = ".DOCX" ИЛИ ВРЕГ(Прав(Путь, 4)) = ".RTF" Тогда	
	//				Попытка
	//					КомОбъект = Новый COMОбъект("Word.Application");	
	//					Ворд_документ = КомОбъект.Documents.Open(Путь);
	//					ДокументВорда = КомОбъект.ActiveDocument;					
	//					ДокументВорда.SaveAs(ПутьСохранения, 7);				
	//					Ворд_документ.Close();
	//					КомОбъект.Quit();
	//				Исключение 						
	//				КонецПопытки;
	//				УдалитьФайлы(Путь);
	//			КонецЕсли;				
	//		КонецЕсли;				
	//	КонецЕсли;	
	//КонецЦикла;
	
	//-- АК luza 17.05.2018 
	
	//Выполним сравнения для каждой из подсистем распознавания 
	//(Заявки, Этикетки, Склад и т.д)
	
	ВыполнитьРаспознаваниеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы);
	//ВыполнитьРаспознаваниеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Склад); //филин
	ВыполнитьРаспознаваниеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Этикетки);
	//ВыполнитьРаспознаваниеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Счет_Факутры); //филин
	
	
	ВыполнитьСравнениеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы);
	ВыполнитьСравнениеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Склад);
	//ВыполнитьСравнениеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Этикетки);	//сранение не требуется
	ВыполнитьСравнениеПодсистемы(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Файлы_Счет_Факутры);
	
	
	//++ АК luza филин склад необходимо подготовить файлы (разбить tif на отдельные страницы)
	//у таких объектов признак поворачивать изображение = Истина
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.Файл,
	|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения КАК ОбъектСравнения
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.Распознан = ЛОЖЬ
	|	И АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезGoogleCloudVision = ЛОЖЬ
	|	И АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезFillin = ИСТИНА	
	|	И АК_ОчередьРаспознаванияФайлов.ПоворачиватьИзображение = ИСТИНА";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	КаталогФилин = Константы.КаталогДляРаспознаванияФайловFillin.Получить();
	Для каждого Стр Из ТЗ Цикл
		Файл = Стр.Файл;
		ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);
		ФайлНаДиске = Новый Файл(ПутьКФайлу);
		КоличествоДочернихФайлов = 1;
		Если ФайлНаДиске.Существует() Тогда
			Каталог = ФайлНаДиске.Путь;
			ИмяБезРасширения = ФайлНаДиске.ИмяБезРасширения; 
			ПутьСохранения = Каталог + ИмяБезРасширения + ".jpg";
			Если НРЕГ(ФайлНаДиске.Расширение) = ".tif" Тогда
				ИзменитьФорматРисунка(ПутьКФайлу, ПутьСохранения);										
				МассивФайлов = НайтиФайлы(Каталог, ИмяБезРасширения + "*.jpg");				
				КоличествоДочернихФайлов = МассивФайлов.Количество();
				Для каждого ФайлМассива Из МассивФайлов Цикл
					КопироватьФайл(ФайлМассива.ПолноеИмя, КаталогФилин + "\" + ФайлМассива.Имя);
				КонецЦикла;
			Иначе
				КопироватьФайл(ФайлНаДиске.ПолноеИмя, КаталогФилин + "\" + ФайлНаДиске.Имя);				
			КонецЕсли;	
			
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = Стр.Файл;
			Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Версия;
			Запись.Значение = КоличествоДочернихФайлов;
			Запись.Записать();  			
			
			Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
			Запись.Файл = Стр.Файл;
			Запись.Прочитать();
			Запись.ПоворачиватьИзображение = Ложь;
			Запись.Записать();
		Иначе
			Набор = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьНаборЗаписей();
			Набор.Отбор.Файл.Установить(Стр.Файл);
			Набор.Записать();			
		КонецЕсли;		
	КонецЦикла;	
	
	
	
	//++ АК luza
	//// Распознавание филин
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.Файл,
	|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения КАК ОбъектСравнения
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.Распознан = ЛОЖЬ
	|	И АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезGoogleCloudVision = ЛОЖЬ
	|	И АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезFillin = ИСТИНА	
	|	И АК_ОчередьРаспознаванияФайлов.ПоворачиватьИзображение = ЛОЖЬ";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	КаталогПоиска = Константы.КаталогРаспознанныхФайловFillin.Получить();
	Для каждого Стр Из ТЗ Цикл
		ФайлСсылка = Строка(Стр.Файл.Ссылка.УникальныйИдентификатор());		
		МассивФайлов = НайтиФайлы(КаталогПоиска, ФайлСсылка + "*.xml");
		
		Для каждого НайденныйФайл Из МассивФайлов Цикл
			Если НайденныйФайл.Расширение = ".xml" И НайденныйФайл.Размер() > 0 Тогда
				Попытка
					СтруктураXML = ПолучитьСтруктуруXML(НайденныйФайл);									
				Исключение
					//СтруктураXML = Новый Структура;
					Продолжить;
				КонецПопытки;	
				ТипДокумента = "Неизвестный тип";
				СтруктураXML.Свойство("document_type", ТипДокумента); 
				
				Если ЗначениеЗаполнено(Стр.ОбъектСравнения) И ТипЗнч(Стр.ОбъектСравнения) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
					//++ АК luza ИП-00017677 21.01.2018
					//Для скалада через филин
					
					//1 создаем справочник файл, где будет храниться расп. хмл
					НФайл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", "Распознанный XML. Тип: " + ТипДокумента, Новый ДвоичныеДанные(НайденныйФайл.ПолноеИмя)), НайденныйФайл.Расширение);
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект = НФайл;
					Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель;
					Запись.Значение =  Стр.Файл;
					Запись.Записать();
					
					//2. Укажем что запись обработана и распознана, чтобы не прогонять по алгоритмам, т.к. значения уже должны быть в хмл
					//Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
					//Запись.Файл = Стр.Файл;
					//Запись.Прочитать();
					//Запись.Обработан = Истина;
					//Запись.Записать();
					
					
					//3. Найдем значения в распознанной структуре и запишем их в свойства
					ПоляДокумента = СтруктураXML.Fields;
					
					ИННПоставщика = "";
					Поставщик = "";
					ПоляДокумента.Свойство("ИННПоставщика", ИННПоставщика);
					ПоляДокумента.Свойство("Поставщик", Поставщик);
					
					Если ИННПоставщика = "7734675810" Тогда //ИНН вкусвилл
						ИННПоставщика = "";						
					КонецЕсли;	
					
					ДанныеПоставщика = "";
					Если ЗначениеЗаполнено(ИННПоставщика) = Ложь Тогда
						ПоляДокумента.Свойство("данныеПоставщика", ДанныеПоставщика);
					КонецЕсли;
					
					
					Если ЗначениеЗаполнено(ДанныеПоставщика) = Истина Тогда
						Контрагент = Стр.ОбъектСравнения.Поставщик;
						Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
							ТекИНН = Контрагент.ИНН; 							
							Если ЗначениеЗаполнено(ТекИНН) И Найти(ДанныеПоставщика, ТекИНН) > 0 Тогда
								ИННПоставщика = ТекИНН;
							КонецЕсли;	
						КонецЕсли;							
					КонецЕсли;	
					
					Если СтрДлина(ИННПоставщика) >= 10 Тогда
						Контрагент = Стр.ОбъектСравнения.Поставщик;
						Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
							ТекИНН = Контрагент.ИНН; 							
							Если ЗначениеЗаполнено(ТекИНН) И Найти(ИННПоставщика, ТекИНН) > 0 Тогда
								ИННПоставщика = ТекИНН;
							КонецЕсли;	
							
							Если ЗначениеЗаполнено(ТекИНН) = Истина Тогда
								Если ТекИНН <> ИННПоставщика И СтрДлина(ТекИНН) = СтрДлина(ИННПоставщика) Тогда
									ВсегоСовпало = 0;								
									Для Сч = 1 По СтрДлина(ТекИНН) Цикл
										Если Сред(ТекИНН,Сч,1) = Сред(ИННПоставщика,Сч,1) Тогда
											ВсегоСовпало = ВсегоСовпало + 1;
										КонецЕсли;	
									КонецЦикла;
									
									Если ВсегоСовпало/СтрДлина(ТекИНН) >= 0.8 Тогда
										ИННПоставщика = ТекИНН;
									КонецЕсли;	
								КонецЕсли;							
							КонецЕсли;							
						КонецЕсли;						
					КонецЕсли;	
					
					
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект = НФайл;
					Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Склад_ПоставщикИНН;
					Запись.Значение = ИННПоставщика;
					Запись.Записать();
					
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект = НФайл;
					Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Склад_Поставщик_Имя;
					Запись.Значение = Поставщик;
					Запись.Записать();
					//-- АК luza ИП-00017677 21.01.2018
					
					
				Иначе
					НФайл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", "Распознанный XML. Тип: " + ТипДокумента, Новый ДвоичныеДанные(НайденныйФайл.ПолноеИмя)), НайденныйФайл.Расширение);
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект = НФайл;
					Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель;
					Запись.Значение =  Стр.Файл;
					Запись.Записать();
					
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект = НФайл;
					Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Тип;
					Запись.Значение =  ТипДокумента;
					Запись.Записать();	
					
					Если ЗначениеЗаполнено(Стр.ОбъектСравнения) И ТипЗнч(Стр.ОбъектСравнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
						СоздатьПрообразВерификации(СтруктураXML, НФайл, Стр.ОбъектСравнения, Стр.Файл);
					ИначеЕсли ЗначениеЗаполнено(Стр.ОбъектСравнения) И ТипЗнч(Стр.ОбъектСравнения) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда	
						
					ИначеЕсли ЗначениеЗаполнено(Стр.ОбъектСравнения) = Ложь Тогда	
						СоздатьПрообразВерификации(СтруктураXML, НФайл, Стр.ОбъектСравнения, Стр.Файл);
					КонецЕсли;
				КонецЕсли;
				
				УдалитьФайлы(НайденныйФайл.ПолноеИмя);
			КонецЕсли;			
			
			УдалитьФайлы(КаталогПоиска, ФайлСсылка + "*.pdf");
		КонецЦикла;		
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			//++ АК luza ИП-00017677 23.01.2018
			//После разбивки на страницы, свойства пишутся в каждый из файлов, в родителя запишем максимум					
			Если ЗначениеЗаполнено(Стр.ОбъектСравнения) И ТипЗнч(Стр.ОбъектСравнения) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Объект
				|ПОМЕСТИТЬ ВТ_ДочерниеФайлы
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель)
				|	И ЗначенияСвойствОбъектов.Значение = &Файл
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Значение,
				|	ЗначенияСвойствОбъектов.Свойство
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Объект В
				|			(ВЫБРАТЬ
				|				ВТ_ДочерниеФайлы.Объект
				|			ИЗ
				|				ВТ_ДочерниеФайлы)
				|	И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Склад_Поставщик_Имя)
				|			ИЛИ ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Склад_ПоставщикИНН))
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияСвойствОбъектов.Свойство
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДочерниеФайлы.Объект) КАК КоличествоРаспознано
				|ИЗ
				|	ВТ_ДочерниеФайлы КАК ВТ_ДочерниеФайлы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Значение КАК КоличествоОтправлено
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Версия)
				|	И ЗначенияСвойствОбъектов.Объект = &Файл";
				
				Запрос.УстановитьПараметр("Файл", Стр.Файл);
				
				МассивРезультат = Запрос.ВыполнитьПакет();
				
				ТЗОбъедСвойств = МассивРезультат[1].Выгрузить();
				ТЗРаспознано = МассивРезультат[2].Выгрузить();
				ТЗОтправлено = МассивРезультат[3].Выгрузить();
				
				Для каждого СтрОбСв Из ТЗОбъедСвойств Цикл
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект = Стр.Файл;
					Запись.Свойство = СтрОбСв.Свойство;
					Запись.Значение =  СтрОбСв.Значение;
					Запись.Записать();
				КонецЦикла;	
				
				Отправлено = 0;
				Распознано = 0;				
				Если ТЗРаспознано.Количество() > 0 Тогда
					Распознано = ТЗРаспознано[0].КоличествоРаспознано;
				КонецЕсли;	
				
				Если ТЗОтправлено.Количество() > 0 Тогда
					Отправлено = ТЗОтправлено[0].КоличествоОтправлено;
				КонецЕсли;
				
				Если Распознано >= Отправлено Тогда
					Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
					Запись.Файл = Стр.Файл;
					Запись.Прочитать();
					Запись.Распознан = Истина;
					
					Если ЗначениеЗаполнено(Запись.Файл) = Истина Тогда
						Запись.Записать();
					КонецЕсли;
				КонецЕсли;	
			Иначе
				Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
				Запись.Файл = Стр.Файл;
				Запись.Прочитать();
				Запись.Распознан = Истина;
				
				Если ЗначениеЗаполнено(Запись.Файл) = Истина Тогда
					Запись.Записать();
				КонецЕсли;
				
			КонецЕсли;	
			//-- АК luza ИП-00017677 23.01.2018			
		КонецЕсли;
	КонецЦикла;	
	//-- АК luza
	
	
	АК_СравнениеФайловСЗаявками();
КонецПроцедуры

Процедура АК_РаспознованиеФайловGoogleVision(Знач РаспФайл = Неопределено) Экспорт
	ЗапросРасп = Новый Запрос;
	ЗапросРасп.Текст = "ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.Файл,
	|	АК_ОчередьРаспознаванияФайлов.ПоворачиватьИзображение
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезGoogleCloudVision = ИСТИНА
	|	И АК_ОчередьРаспознаванияФайлов.Распознан = ЛОЖЬ
	|	И АК_ОчередьРаспознаванияФайлов.Файл = &РаспФайл";
	
	Если ЗначениеЗаполнено(РаспФайл) = Истина Тогда
		ЗапросРасп.УстановитьПараметр("РаспФайл", РаспФайл);
	Иначе
		ЗапросРасп.Текст = СтрЗаменить(ЗапросРасп.Текст, "И АК_ОчередьРаспознаванияФайлов.Файл = &РаспФайл", "");
	КонецЕсли;	
	
	ТЗ = ЗапросРасп.Выполнить().Выгрузить();
	
	КлючAPI = Константы.АК_КлючAPI_GoogleCloudVision.Получить();
	
	Для каждого Стр Из ТЗ Цикл
		ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл);
		ПутьКРаспФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознанногоОбъекта(Стр.Файл);
		
		
		Если ВРЕГ(Прав(ПутьКФайлу, 4)) = ".PNG" ИЛИ ВРЕГ(Прав(ПутьКФайлу, 4)) = ".JPG" Тогда
			Текст = "";
			
			Если Стр.ПоворачиватьИзображение = Истина Тогда				
				ТЗПоворота = Новый ТаблицаЗначений;
				ТЗПоворота.Колонки.Добавить("ИмяФайла");
				ТЗПоворота.Колонки.Добавить("УголПоворота");
				
				ВремФайл = Новый Файл(ПутьКФайлу);
				Каталог = ВремФайл.Путь;
				ИмяБезРасширения = ВремФайл.ИмяБезРасширения;						
				
				а = 90;
				Пока а <= 270 Цикл
					ПутьСохранения = Каталог + ИмяБезРасширения + "_" + Строка(а) + ВремФайл.Расширение;		
					стрПоворота = ТЗПоворота.Добавить();
					стрПоворота.ИмяФайла = ПутьСохранения;
					стрПоворота.УголПоворота = а;
					а = а + 90;		
				КонецЦикла;	
				
				Для каждого стрПоворота Из ТЗПоворота Цикл
					ПовернутьРисунок(ПутьКФайлу, стрПоворота.ИмяФайла, стрПоворота.УголПоворота);
				КонецЦикла;	
				
				МассивФайлов = НайтиФайлы(Каталог, ИмяБезРасширения + "*" + ВремФайл.Расширение);
				
				ТД = Новый ТекстовыйДокумент; 
				Текст = "";
				Для каждого ФайлМассива Из МассивФайлов Цикл
					Текст  = Текст + Символы.ПС + ФайлМассива.ПолноеИмя + Символы.ПС +  ПолучитьРаспознанныйТекст(ФайлМассива.ПолноеИмя, КлючAPI);
				КонецЦикла;				
			Иначе
				ВремФайл = Новый Файл(ПутьКФайлу);
				Если ВремФайл.Существует() Тогда
					Если ВремФайл.Размер() >  4194304 Тогда
						Каталог = ВремФайл.Путь;
						ИмяБезРасширения = ВремФайл.ИмяБезРасширения;
						ПутьСохранения = Каталог + ИмяБезРасширения + "_small" + ".jpg";
						ИзменитьФорматРисунка(ПутьКФайлу, ПутьСохранения);
						
						МассивФайлов = НайтиФайлы(Каталог, ИмяБезРасширения + "_small" + "*.jpg");
						
						ТД = Новый ТекстовыйДокумент; 
						Текст = "";
						Для каждого ФайлМассива Из МассивФайлов Цикл
							Текст  = Текст + Символы.ПС + ПолучитьРаспознанныйТекст(ФайлМассива.ПолноеИмя, КлючAPI);
						КонецЦикла;	
						
					Иначе
						Текст  = ПолучитьРаспознанныйТекст(ПутьКФайлу, КлючAPI);					
					КонецЕсли;	
				КонецЕсли;	
				
				
			КонецЕсли;	
			//Текст = НРег(Текст);
			
			ТД = Новый ТекстовыйДокумент;
			ТД.УстановитьТекст(Текст);				
			ТД.Записать(ПутьКРаспФайлу);
			
			Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
			Запись.Файл = Стр.Файл;
			Запись.Прочитать();
			Запись.Распознан = Истина; 			
			Запись.Записать();
		ИначеЕсли ВРЕГ(Прав(ПутьКФайлу, 4)) = ".TIF" ИЛИ ВРЕГ(Прав(ПутьКФайлу, 4)) = ".PDF" Тогда		
			
			ВремФайл = Новый Файл(ПутьКФайлу);			
			Каталог = ВремФайл.Путь;
			ИмяБезРасширения = ВремФайл.ИмяБезРасширения;	
			
			ПутьСохранения = Каталог + ИмяБезРасширения + ".jpg";
			ИзменитьФорматРисунка(ПутьКФайлу, ПутьСохранения);
			
			МассивФайлов = НайтиФайлы(Каталог, ИмяБезРасширения + "*.jpg");
			
			ТД = Новый ТекстовыйДокумент; 
			Текст = "";
			Для каждого ФайлМассива Из МассивФайлов Цикл
				Текст  = Текст + Символы.ПС + ПолучитьРаспознанныйТекст(ФайлМассива.ПолноеИмя, КлючAPI);
			КонецЦикла;			
			ТД.УстановитьТекст(Текст);				
			ТД.Записать(ПутьКРаспФайлу);
			
			Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
			Запись.Файл = Стр.Файл;
			Запись.Прочитать();
			Запись.Распознан = Истина; 			
			Запись.Записать();     					
		Иначе	
			Текст = "";
			
			ТД = Новый ТекстовыйДокумент;
			ТД.УстановитьТекст(Текст);			
			ТД.Записать(ПутьКРаспФайлу, КодировкаТекста.Системная);
			
			Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
			Запись.Файл = Стр.Файл;
			Запись.Прочитать();
			Запись.Распознан = Истина; 			
			Запись.Обработан = Истина; 			
			Запись.РезультатСравнения = Ложь;
			Запись.Записать();
		КонецЕсли;	 
	КонецЦикла;	
	
	
	
КонецПроцедуры

Процедура АК_СравнениеФайловСЗаявками() Экспорт
	
	//++ АК luza 17.05.2018 закоментировал ниже по причине того что это не используется
	////2. Сравнение с заявками и отправка на эл.почту 
	
	//Запрос = Новый Запрос;
	//Запрос.Текст  = "ВЫБРАТЬ
	//|	АК_ОчередьРаспознаванияФайлов.Файл,
	//|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения
	//|ПОМЕСТИТЬ ВТ_Очередь
	//|ИЗ
	//|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	//|ГДЕ
	//|	АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА
	//|	И АК_ОчередьРаспознаванияФайлов.Обработан = ИСТИНА
	//|	И АК_ОчередьРаспознаванияФайлов.РезультатСравнения = ЛОЖЬ
	//|	И НЕ АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.Ссылка ЕСТЬ NULL
	//|	И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ЗаявкаНаУслугиМатериалы
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЗаявкаНаУслугиМатериалы.Ссылка КАК Заявка,
	//|	ЗаявкаНаУслугиМатериалы.СчетНаОплату КАК СчетНаОплату,
	//|	ЗаявкаНаУслугиМатериалы.Контрагент.Наименование КАК Контрагент,
	//|	ЗаявкаНаУслугиМатериалы.Контрагент.ИНН КАК ИНН,
	//|	ЗаявкаНаУслугиМатериалы.СуммаДокумента,
	//|	ЗаявкаНаУслугиМатериалы.НомерСчета,
	//|	ЗаявкаНаУслугиМатериалы.ДатаСчета,
	//|	ЗаявкаНаУслугиМатериалы.СчетКонтрагента.Банк.Код КАК БИК,
	//|	ЗаявкаНаУслугиМатериалы.СчетКонтрагента.НомерСчета КАК РасчСчет
	//|ИЗ
	//|	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
	//|		ПО ЗаявкаНаУслугиМатериалы.Ссылка = ВТ_Очередь.ОбъектСравнения
	//|			И ЗаявкаНаУслугиМатериалы.СчетНаОплату = ВТ_Очередь.Файл
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Файлы) КАК Объект,
	//|	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	//|	ЗначенияСвойствОбъектов.Значение КАК Значение
	//|ИЗ
	//|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
	//|		ПО ЗначенияСвойствОбъектов.Объект = ВТ_Очередь.Файл
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Очередь.Файл КАК Файл,
	//|	ВТ_Очередь.ОбъектСравнения КАК ОбъектСравнения,
	//|	ВТ_Очередь.ОбъектСравнения.Ответственный КАК ОбъектСравненияОтветственный,
	//|	НАЧАЛОПЕРИОДА(ВТ_Очередь.ОбъектСравнения.Дата, ДЕНЬ) КАК ОбъектСравненияДата,
	//|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Кому
	//|ИЗ
	//|	ВТ_Очередь КАК ВТ_Очередь
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|		ПО ВТ_Очередь.ОбъектСравнения.Ответственный.ФизЛицо = КонтактнаяИнформация.Объект
	//|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ОбъектСравненияДата УБЫВ
	//|ИТОГИ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Файл),
	//|	МАКСИМУМ(Кому)
	//|ПО
	//|	ОбъектСравненияОтветственный,
	//|	ОбъектСравненияДата";
	//
	//МассивРезультат = Запрос.ВыполнитьПакет();
	//ТЗ_ДанныеЗаявки = МассивРезультат[1].Выгрузить();	
	//ТЗ_Данныефайла = МассивРезультат[2].Выгрузить();
	//ТЗОчередь = МассивРезультат[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//СоответствиеРеквизитов = Новый Соответствие;
	////СоответствиеРеквизитов.Вставить("Контрагент", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_НазваниеКонтрагента);
	//СоответствиеРеквизитов.Вставить("ИНН", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_ИНН);
	//СоответствиеРеквизитов.Вставить("СуммаДокумента", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СуммаСчета);
	//СоответствиеРеквизитов.Вставить("НомерСчета", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_НомерСчета);
	//СоответствиеРеквизитов.Вставить("ДатаСчета", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_ДатаСчета);
	//СоответствиеРеквизитов.Вставить("БИК", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_БИК);
	//СоответствиеРеквизитов.Вставить("РасчСчет", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_РассчетныйСчет);
	//
	//ПредставлениеРеквизитов = Новый Соответствие;
	//ПредставлениеРеквизитов.Вставить("Контрагент", "Наименование контрагента");
	//ПредставлениеРеквизитов.Вставить("ИНН", "ИНН контрагента");
	//ПредставлениеРеквизитов.Вставить("СуммаДокумента", "Сумма счета");
	//ПредставлениеРеквизитов.Вставить("НомерСчета", "Номер счета");
	//ПредставлениеРеквизитов.Вставить("ДатаСчета", "Дата счета");
	//ПредставлениеРеквизитов.Вставить("БИК", "БИК");
	//ПредставлениеРеквизитов.Вставить("РасчСчет", "Рассчетный счет");
	//
	//Для каждого СтрПользователь Из ТЗОчередь.Строки Цикл		
	//	
	//	//АдресПочты = "luza@automacon.ru";
	//	АдресПочты = "abdr@automacon.ru";
	
	//	Кому = Новый СписокЗначений;
	//	
	//	Если ЗначениеЗаполнено(СтрПользователь.Кому) Тогда
	//		//Кому.Добавить(СтрПользователь.Кому);
	//		Кому.Добавить(АдресПочты);
	//	Иначе
	//		Кому.Добавить(АдресПочты);
	//	КонецЕсли;	
	//	
	//	ТемаПисьма = Формат(ТекущаяДата(), "ДЛФ=DD") + " Различия в заявках на услуги/материалы с прикрепленными сканкопиями";
	//	
	//	ТекстСообщения = "<h2> " + "Обнаружено не соответсвие реквизитов в заявке с прикрепленными счетами"  + " </h2>";
	//	ТекстСообщения = ТекстСообщения + "<h3> " + "Пользователь: " + Строка(СтрПользователь.ОбъектСравненияОтветственный) + "</h3>";
	//			
	//	Для каждого СтрДата Из СтрПользователь.Строки Цикл
	//		ТекстСообщения = ТекстСообщения + "<h4> " + "Дата: " + Формат(СтрДата.ОбъектСравненияДата, "ДЛФ=DD") + " </h4>";	
	//		
	//		Для каждого Стр Из СтрДата.Строки Цикл
	//			ФильтрЗаявки = Новый Структура("Заявка, СчетНаОплату", Стр.ОбъектСравнения, Стр.Файл);
	//			ФильтрДанныеФайла = Новый Структура("Объект", Стр.Файл);
	//			
	//			ТЗ_ДанныеЗаявки_Врем = ТЗ_ДанныеЗаявки.Скопировать(ФильтрЗаявки);
	//			ТЗ_Данныефайла_Врем  = ТЗ_Данныефайла.Скопировать(ФильтрДанныеФайла);	
	//			
	//			
	//			
	//			
	//			Для каждого СтрЗаявка Из ТЗ_ДанныеЗаявки_Врем Цикл
	//				
	//				
	//				ТекстСообщения = ТекстСообщения + "<h4> Документ: " + Строка(СтрЗаявка.Заявка) + "</h4>";
	//				
	//				ТекстСообщения = ТекстСообщения + "<table border=""1"">
	//				|<caption>Соответствие реквизитов</caption>
	//				|<tr>
	//				|<th width=""20%"">Имя реквизита</th>
	//				|<th width=""40%"">Данные в заявке</th>
	//				|<th width=""40%"">Данные в прикрепленном счете</th>
	//				|</tr>";
	//				
	//				ЕстьОшибки = Ложь; 				
	//				
	//				Для каждого ЗначСоотв Из СоответствиеРеквизитов Цикл
	//					ЗначениеВЗаявке = СтрЗаявка[ЗначСоотв.Ключ];
	//					ЗначениеВФайле = "";
	//					
	//					Фильтр = Новый Структура("Свойство", ЗначСоотв.Значение);
	//					МассивСтрок = ТЗ_Данныефайла_Врем.НайтиСтроки(Фильтр);
	//					Если МассивСтрок.Количество() > 0 Тогда
	//						ЗначениевФайле = МассивСтрок[0].Значение; 
	//					КонецЕсли; 		
	//					
	//					ЦветФона = "bgcolor=""#FFFFFF""";
	//					Если ЗначениеЗаполнено(ЗначениеВЗаявке) = Истина Тогда
	//						Если XMLСтрока(СокрЛП(НРег(ЗначениеВЗаявке))) <> XMLСтрока(СокрЛП(НРег(ЗначениеВФайле))) Тогда
	//							ЕстьОшибки = Истина;
	//							ЦветФона = "bgcolor=""#FF0000""";
	//						КонецЕсли;	
	//					КонецЕсли;	
	//					ТекстСообщения = ТекстСообщения + "<tr>
	//					|<td>" + XMLСтрока(ПредставлениеРеквизитов.Получить(ЗначСоотв.Ключ)) + "</td>
	//					|<td align = ""center""" + ЦветФона + ">" + XMLСтрока(ЗначениеВЗаявке) + "</td>
	//					|<td align = ""center"">" + XMLСтрока(ЗначениеВФайле) + "</td>
	//					|</tr>"; 
	//				КонецЦикла;
	//				
	//				ТекстСообщения = ТекстСообщения + "</table> </br>";				
	//				
	//			КонецЦикла;	 						
	//		КонецЦикла;	
	//		ТекстСообщения = ТекстСообщения + "</br>";
	//		
	//	КонецЦикла;				
	//	ТекстСообщения = ТекстСообщения + "</br>" + "</br>" + "По вопросам технической поддержки обращайтесь к Рустему Абдишеву <а href = ""mailto:abdr@automacon.ru""> abdr@automacon.ru </a>";
	//	
	//	СтруктураНовогоПисьма = Новый Структура;
	//	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.HTML);			
	//	СтруктураНовогоПисьма.Вставить("Тело",ТекстСообщения);   		
	//	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//	СтруктураНовогоПисьма.Вставить("Тема", ТемаПисьма);
	//	
	//	Попытка
	//		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма, Истина);
	//	Исключение						
	//	КонецПопытки;
	//	
	//КонецЦикла;   
	
	////3. проверять на наличие заявок с одинаковыми счетами - сканами с одинаковыми данными
	////РегламентныеЗаданияСервер.АК_ПоискДублейСчетовВЗаявках();
	
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	|	РезультатСравненияФайлаСОбъектом.Файл,
	|	РезультатСравненияФайлаСОбъектом.ОбъектСравнения
	|ИЗ
	|	РегистрСведений.РезультатСравненияФайлаСОбъектом КАК РезультатСравненияФайлаСОбъектом
	|ГДЕ
	|	РезультатСравненияФайлаСОбъектом.Пересчитать = ИСТИНА";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого Стр ИЗ ТЗ Цикл
		Попытка
			Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(Стр.Файл, Стр.ОбъектСравнения);
		Исключение
			Запись = РегистрыСведений.РезультатСравненияФайлаСОбъектом.СоздатьМенеджерЗаписи();
			Запись.Файл = Стр.Файл;
			Запись.ОбъектСравнения = Стр.ОбъектСравнения;
			Запись.Прочитать();
			Запись.Удалить();
		КонецПопытки;	
	КонецЦикла;
	
	
КонецПроцедуры

Процедура АК_ПоискДублейСчетовВЗаявках() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.Файл,
	|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения
	|ПОМЕСТИТЬ ВТ_Очередь
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА
	|	И АК_ОчередьРаспознаванияФайлов.Обработан = ИСТИНА
	|	И НЕ АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.Ссылка ЕСТЬ NULL
	|	И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение КАК Наименование,
	|	NULL КАК ИНН,
	|	NULL КАК СуммаСчета,
	|	NULL КАК НомерСчета,
	|	NULL КАК ДатаСчета,
	|	NULL КАК БИК,
	|	NULL КАК РасчетныйСчет
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_НазваниеКонтрагента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	NULL,
	|	ЗначенияСвойствОбъектов.Значение,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_ИНН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	NULL,
	|	NULL,
	|	ЗначенияСвойствОбъектов.Значение,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_СуммаСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗначенияСвойствОбъектов.Значение,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_НомерСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗначенияСвойствОбъектов.Значение,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_ДатаСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗначенияСвойствОбъектов.Значение,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Бик)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_РассчетныйСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Объект,
	|	ВТ_Очередь.ОбъектСравнения КАК ОбъектСравнения,
	|	МАКСИМУМ(ВТ_Данные.Наименование) КАК Наименование,
	|	МАКСИМУМ(ВТ_Данные.ИНН) КАК ИНН,
	|	МАКСИМУМ(ВТ_Данные.СуммаСчета) КАК СуммаСчета,
	|	МАКСИМУМ(ВТ_Данные.НомерСчета) КАК НомерСчета,
	|	МАКСИМУМ(ВТ_Данные.ДатаСчета) КАК ДатаСчета,
	|	МАКСИМУМ(ВТ_Данные.БИК) КАК БИК,
	|	МАКСИМУМ(ВТ_Данные.РасчетныйСчет) КАК РасчетныйСчет
	|ПОМЕСТИТЬ ВТ_ДанныеФайлов
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Очередь КАК ВТ_Очередь
	|		ПО ВТ_Данные.Объект = ВТ_Очередь.Файл
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Объект,
	|	ВТ_Очередь.ОбъектСравнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеФайлов.Объект) КАК Объект,
	|	ВТ_ДанныеФайлов.Наименование,
	|	ВТ_ДанныеФайлов.ИНН,
	|	ВТ_ДанныеФайлов.СуммаСчета,
	|	ВТ_ДанныеФайлов.НомерСчета,
	|	ВТ_ДанныеФайлов.ДатаСчета,
	|	ВТ_ДанныеФайлов.БИК,
	|	ВТ_ДанныеФайлов.РасчетныйСчет
	|ПОМЕСТИТЬ ВТ_ДублиФайлов
	|ИЗ
	|	ВТ_ДанныеФайлов КАК ВТ_ДанныеФайлов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеФайлов.ДатаСчета,
	|	ВТ_ДанныеФайлов.СуммаСчета,
	|	ВТ_ДанныеФайлов.БИК,
	|	ВТ_ДанныеФайлов.РасчетныйСчет,
	|	ВТ_ДанныеФайлов.ИНН,
	|	ВТ_ДанныеФайлов.Наименование,
	|	ВТ_ДанныеФайлов.НомерСчета
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеФайлов.Объект) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайлов.Объект,
	|	ВТ_ДанныеФайлов.ОбъектСравнения,
	|	ВТ_ДанныеФайлов.ОбъектСравнения.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Кому,
	|	(ВЫРАЗИТЬ(ВТ_ДублиФайлов.Наименование КАК СТРОКА(100))) + ""*РАЗДЕЛИТЕЛЬ*"" + (ВЫРАЗИТЬ(ВТ_ДублиФайлов.ИНН КАК СТРОКА(12))) + ""*РАЗДЕЛИТЕЛЬ*"" + (ВЫРАЗИТЬ(ВТ_ДублиФайлов.НомерСчета КАК СТРОКА(12))) + ""*РАЗДЕЛИТЕЛЬ*"" + (ВЫРАЗИТЬ(ВТ_ДублиФайлов.БИК КАК СТРОКА(9))) + ""*РАЗДЕЛИТЕЛЬ*"" + (ВЫРАЗИТЬ(ВТ_ДублиФайлов.РасчетныйСчет КАК СТРОКА(20))) КАК УИДСтрока,
	|	ВТ_ДанныеФайлов.СуммаСчета КАК СуммаСчета,
	|	ВТ_ДанныеФайлов.ДатаСчета КАК ДатаСчета
	|ИЗ
	|	ВТ_ДублиФайлов КАК ВТ_ДублиФайлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеФайлов КАК ВТ_ДанныеФайлов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|			ПО ВТ_ДанныеФайлов.ОбъектСравнения.Ответственный = КонтактнаяИнформация.Объект
	|				И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ПО ВТ_ДублиФайлов.Наименование = ВТ_ДанныеФайлов.Наименование
	|			И ВТ_ДублиФайлов.ИНН = ВТ_ДанныеФайлов.ИНН
	|			И ВТ_ДублиФайлов.СуммаСчета = ВТ_ДанныеФайлов.СуммаСчета
	|			И ВТ_ДублиФайлов.НомерСчета = ВТ_ДанныеФайлов.НомерСчета
	|			И ВТ_ДублиФайлов.ДатаСчета = ВТ_ДанныеФайлов.ДатаСчета
	|			И ВТ_ДублиФайлов.БИК = ВТ_ДанныеФайлов.БИК
	|			И ВТ_ДублиФайлов.РасчетныйСчет = ВТ_ДанныеФайлов.РасчетныйСчет
	|ИТОГИ ПО
	|	УИДСтрока,
	|	СуммаСчета,
	|	ДатаСчета";
	
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для каждого СтрокаУИД Из Дерево.Строки Цикл
		Для каждого СтрокаСуммаСчета Из СтрокаУИД.Строки Цикл
			Для каждого Строка Из СтрокаСуммаСчета.Строки Цикл
				
				Кому = Новый СписокЗначений;
				
				ТемаПисьма = "Обнаружены заявки с повторяющимся счетами";
				
				ТекстСообщения = "<h3> " + "Обнаружены заявки с повторяющимся сканкопиями счета"  + "<br /> ";
				
				ТекстСообщения = ТекстСообщения + "<table border=""1"">
				|<caption>Заявки на услуги/материалы</caption>
				|<tr>
				|<th width=""50%"">Заявка</th>
				|<th width=""25%"">Ответсвенный</th>			
				|<th width=""25%"">e-mail</th>			
				|</tr>";
				
				Для каждого Стр Из Строка.Строки Цикл
					ТекстСообщения = ТекстСообщения + "<tr>
					|<td>" + Строка(Стр.ОбъектСравнения) + "</td>
					|<td align = ""center"">" + Строка(Стр.Ответственный) + "</td>
					|<td align = ""center"">" + XMLСтрока(Стр.Кому) + "</td>
					|</tr>";
					
					Если ЗначениеЗаполнено(Стр.Кому) Тогда
						Кому.Добавить(Стр.Кому);
					КонецЕсли;	
				КонецЦикла;
				
				ТекстСообщения =  ТекстСообщения + "</table>";  							
				
				Если ЗначениеЗаполнено(Кому) = Истина Тогда
					СтруктураНовогоПисьма = Новый Структура;
					СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.HTML);			
					СтруктураНовогоПисьма.Вставить("Тело",ТекстСообщения);   		
					СтруктураНовогоПисьма.Вставить("Кому", Кому);
					СтруктураНовогоПисьма.Вставить("Тема", ТемаПисьма);
					
					Попытка
						ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Истина);
					Исключение						
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

Процедура ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма, ФлХТМЛ = Ложь)  
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	СпАдресов = Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение, ";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТабДок=СтруктураНовогоПисьма.Тело;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = 	ТабДок;
	Если Не ФлХТМЛ Тогда
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе	
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	КонецЕсли; 
	Если СтруктураНовогоПисьма.Свойство("ТабДок") Тогда
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = 	СтруктураНовогоПисьма.ТабДок;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
	КонецЕсли; 	
	
	
	//Для каждого Эл1 Из СтруктураНовогоПисьма.СписокФайловВложений Цикл
	//	Письмо.Вложения.Добавить(Эл1.Значение.ИмяФайла);
	//КонецЦикла;
	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес.Значение;
	КонецЦикла;
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры

Функция ПолучитьРаспознанныйТекст(ПутьКФайлу, КлючАпи)
	
	
	КлючАпи = СокрЛП(КлючАпи);	
	ДанныеКартинки = Новый ДвоичныеДанные(ПутьКФайлу);
	
	ТелоЗапроса = Новый ЗаписьJSON;
	ИмяВремФайла = КаталогВременныхФайлов() + "test_reqest.json";// ПолучитьИмяВременногоФайла("json");
	ТелоЗапроса.ОткрытьФайл(ИмяВремФайла);
	ТелоЗапроса.ПроверятьСтруктуру = Ложь;
	
	
	ТелоЗапроса.ЗаписатьНачалоОбъекта();	
	ТелоЗапроса.ЗаписатьИмяСвойства("requests");	
	ТелоЗапроса.ЗаписатьНачалоМассива();//requests
	
	
	ТелоЗапроса.ЗаписатьНачалоОбъекта();
	Телозапроса.ЗаписатьИмяСвойства("image");
	ТелоЗапроса.ЗаписатьНачалоОбъекта();
	Телозапроса.ЗаписатьИмяСвойства("content");
	ТелоЗапроса.ЗаписатьЗначение(Base64Строка(ДанныеКартинки) );//base64 image content
	ТелоЗапроса.ЗаписатьКонецОбъекта();//end content
	
	
	Телозапроса.ЗаписатьИмяСвойства("features");
	ТелоЗапроса.ЗаписатьНачалоМассива();//begin features
	ТелоЗапроса.ЗаписатьНачалоОбъекта();
	Телозапроса.ЗаписатьИмяСвойства("type");
	Телозапроса.ЗаписатьЗначение("DOCUMENT_TEXT_DETECTION");
	ТелоЗапроса.ЗаписатьКонецОбъекта(); //end type
	
	ТелоЗапроса.ЗаписатьКонецМассива();//end features
	
	//imageContext
	//ТелоЗапроса.ЗаписатьНачалоОбъекта();
	Телозапроса.ЗаписатьИмяСвойства("imageContext");
	//languageHints
	ТелоЗапроса.ЗаписатьНачалоОбъекта();//begin languageHints
	//ТелоЗапроса.ЗаписатьНачалоОбъекта();
	Телозапроса.ЗаписатьИмяСвойства("languageHints");
	Телозапроса.ЗаписатьЗначение("ru");
	ТелоЗапроса.ЗаписатьКонецОбъекта(); //end languageHints
	
	//ТелоЗапроса.ЗаписатьКонецОбъекта();//end languageHints
	
	//ТелоЗапроса.ЗаписатьКонецОбъекта();//end imageContext	
	
	ТелоЗапроса.ЗаписатьКонецОбъекта();//end requests
	//access_token
	
	ТелоЗапроса.ЗаписатьКонецМассива(); //end requests
	ТелоЗапроса.ЗаписатьКонецОбъекта();
	ТелоЗапроса.Закрыть();
	
	//запрос готов.
	
	//https://vision.googleapis.com/v1/images:annotate?key=YOUR_API_KEY
	ИнетЗапрос = Новый HTTPЗапрос("/v1/images:annotate?key="+КлючАпи);
	//ИнетЗапрос = Новый HTTPЗапрос("https://vision.googleapis.com/v1/images:annotate");
	
	ДанныеТела = Новый ДвоичныеДанные(ИмяВремФайла);//данные тела запроса
	
	
	ИнетЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела);
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	Соединение = новый HTTPСоединение("vision.googleapis.com",,,,,,ssl);
	//отправка POST 
	Ответ = Соединение.ОтправитьДляОбработки(ИнетЗапрос);
	
	ТекстJSON = Ответ.ПолучитьТелоКакСтроку();
	
	Текст = "";	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		Данные = ПрочитатьJSON(Чтение, Ложь);
	Исключение
		Текст = ТекстJSON;
		Возврат Текст;
	КонецПопытки;	
	
	//
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда		
		responses = Новый Массив;
		Если Данные.Свойство("responses", responses) = Истина Тогда
			Если responses.Количество() > 0 И ТипЗнч(responses[0]) = Тип("Структура") Тогда
				fullTextAnnotation = Новый Структура("pages, text");
				Если responses[0].Свойство("fullTextAnnotation", fullTextAnnotation)= Истина Тогда					
					Текст = fullTextAnnotation.text; 
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) = Ложь Тогда
		Текст = ТекстJSON; 
	КонецЕсли;	
	
	Возврат Текст;
	
КонецФункции

Процедура ИзменитьФорматРисунка(ПутьКИсходнику, ПутьКНовому) Экспорт
	
	Конверт = КаталогВременныхФайлов()+"convert.exe ";
	Если НайтиФайлы(Конверт).Количество()=0 Тогда
		ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_convert"); 
		ПрогаИзПамяти.Записать(Конверт);
	КонецЕсли;	
	
	ИмяФайлаИсходника = ПолучитьИмяВременногоФайла(Прав(ПутьКИсходнику,3));
	ФайлИсходник = Новый ДвоичныеДанные(ПутьКИсходнику);
	ФайлИсходник.Записать(ИмяФайлаИсходника);
	ТекстПриложения = """" + Конверт + """ """ + ИмяФайлаИсходника+ """ """ + ПутьКНовому+"""";
	ЗапуститьПриложение(ТекстПриложения,,Истина);	
	
КонецПроцедуры

Процедура ПовернутьРисунок(ПутьКИсходнику, ПутьКНовому, УголПоворота) Экспорт
	
	Конверт = КаталогВременныхФайлов()+"convert.exe ";
	Если НайтиФайлы(Конверт).Количество()=0 Тогда
		ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_convert"); 
		ПрогаИзПамяти.Записать(Конверт);
	КонецЕсли;	
	
	ИмяФайлаИсходника = ПолучитьИмяВременногоФайла(Прав(ПутьКИсходнику,3));
	ФайлИсходник = Новый ДвоичныеДанные(ПутьКИсходнику);
	ФайлИсходник.Записать(ИмяФайлаИсходника);
	ТекстПриложения = """" + Конверт + """ """ + ИмяФайлаИсходника + """ -rotate " + Строка(УголПоворота) + " """ + ПутьКНовому+"""";
	ЗапуститьПриложение(ТекстПриложения,,Истина);	
	
КонецПроцедуры

Функция РазбитьPDFФайл(МассивИсходников) Экспорт
	
	pdftk = КаталогВременныхФайлов()+"pdftk.exe";
	Если НайтиФайлы(pdftk).Количество()= 0 Тогда
		ПрогаИзПамяти = Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьМакет("pdftk"); 
		ПрогаИзПамяти.Записать(pdftk);
	КонецЕсли;	
	
	Конверт = КаталогВременныхФайлов()+"libiconv2.dll";
	Если НайтиФайлы(Конверт).Количество()= 0 Тогда
		ПрогаИзПамяти = Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьМакет("libiconv2"); 
		ПрогаИзПамяти.Записать(Конверт);
	КонецЕсли;	
	
	ФайлРезультат = ПолучитьИмяВременногоФайла("pdf");
	ФайлВрем = Новый Файл(ФайлРезультат);
	РезультатИмяФайла = ФайлВрем.Имя;
	
	ТекстИсх = "";
	
	МассивКУдалнению = Новый Массив;
	
	Для каждого ЗначМассива Из МассивИсходников Цикл
		
		ВремФайл = ПолучитьИмяВременногоФайла("pdf");
		КопироватьФайл(ЗначМассива,ВремФайл);
		
		ФайлВрем = Новый Файл(ВремФайл);				
		ТекстИсх = ТекстИсх + ФайлВрем.Имя + " ";	
		
		МассивКУдалнению.Добавить(ВремФайл);
	КонецЦикла;	
	
	//ТекстПриложения = pdftk + " " + ТекстИсх + " output " + ФайлРезультат;
	ТекстПриложенияВрем = pdftk + " " + ТекстИсх + " output " + РезультатИмяФайла;
	
	ЗапуститьПриложение(ТекстПриложенияВрем, КаталогВременныхФайлов(), Истина);	
	
	Для каждого ЗначФайл Из МассивКУдалнению Цикл
		УдалитьФайлы(ЗначФайл);
	КонецЦикла;	
	
	
	Возврат ФайлРезультат;
	
	
КонецФункции



//Оповещения по складу

Функция ДоступныОповещенияПоСкладу() Экспорт
	Результат = Ложь;
	Если РольДоступна("ОператорСклада") = Истина Тогда
		Результат = Истина;
	КонецЕсли;  	
	Возврат Результат;
	
КонецФункции

Функция ЕстьОповещенияПоСкладу() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения,
	|	МАКСИМУМ(АК_ОчередьРаспознаванияФайлов.РезультатСравнения) КАК РезультатСравнения
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения ССЫЛКА Документ.ПриходныйОрдерСклад
	|	И АК_ОчередьРаспознаванияФайлов.ОбъектСравнения.Дата >= &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(АК_ОчередьРаспознаванияФайлов.РезультатСравнения) = ЛОЖЬ";	
	
	Дата = НачалоДня(ТекущаяДата() - 10*24*60*60);	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции


//Филин Чтение XML
//++ АК luza ИП-00017231
Функция ПолучитьСтруктуруXML(Файл) Экспорт	
	Документ = Новый Структура;	
	Fields = Новый Структура;  
	Tables = Новый ТаблицаЗначений;
	Если Файл.Существует() Тогда
		ДеревоЗначенией = ПрочитатьXMLВДеревоЗначений(Файл);		
		ОбработатьКоллекциюСтрокДерева(ДеревоЗначенией, Fields, Tables, Документ);		
	КонецЕсли;
	
	Документ.Вставить("Fields", Fields); 
	Документ.Вставить("Tables", Tables); 
	
	Возврат Документ;	
КонецФункции

Функция ПолучитьСтруктуруXMLВерификации(Файл) Экспорт	
	Если ТипЗнч(Файл) = Тип("СправочникСсылка.Файлы") Тогда
		ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);		
		ФайлНаДиске = Новый Файл(ПутьКФайлу);
	ИначеЕсли ТипЗнч(Файл) = Тип("Строка") Тогда
		ПутьКФайлу = Файл;
		ФайлНаДиске = Новый Файл(ПутьКФайлу);
	Иначе
		ФайлНаДиске = Файл;
	КонецЕсли;	
	
	Документ = Новый Структура;	
	Fields = Новый Структура;  
	Tables = Новый Массив;
	
	Table = Новый ТаблицаЗначений;
	Если ФайлНаДиске.Существует() Тогда
		ДеревоЗначенией = ПрочитатьXMLВДеревоЗначений(ФайлНаДиске);		
		ОбработатьКоллекциюСтрокДереваВерификации(ДеревоЗначенией, Fields, Tables, Table, Документ);		
	КонецЕсли;
	
	Документ.Вставить("Fields", Fields); 
	Документ.Вставить("Tables", Tables); 
	
	Возврат Документ;	
КонецФункции

Процедура ОбработатьКоллекциюСтрокДерева(КолСтрок, Fields, Tables, Документ, НСтрока = Неопределено)
	
	СписокДопустимыхИменКолонок = Новый СписокЗначений;
	СписокДопустимыхИменКолонок.Добавить("description");
	СписокДопустимыхИменКолонок.Добавить("quantity");
	СписокДопустимыхИменКолонок.Добавить("price");
	СписокДопустимыхИменКолонок.Добавить("cost");
	СписокДопустимыхИменКолонок.Добавить("stavka");
	СписокДопустимыхИменКолонок.Добавить("nalogsum");
	СписокДопустимыхИменКолонок.Добавить("sumnds");
	СписокДопустимыхИменКолонок.Добавить("ed");
	
	
	Для каждого Строка Из КолСтрок.Строки Цикл
		Если Строка.Элемент = "exportDocument" Тогда
			//Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			
			Документ.Вставить("document_type", Строка.Атрибуты.Получить("document-type"));
			Документ.Вставить("file_name", Строка.Name);
			
			//ИмяФайла = Строка.Аттрибуты.Получить("name1");					
			//
			//Документ.Вставить("file_name", ИмяФайла);
		ИначеЕсли Строка.Элемент = "field" Тогда
			Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			Строка.Name = СтрЗаменить(Строка.Name, "№", "НС");
			Строка.Name = СтрЗаменить(Строка.Name, ":", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ";", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "`", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "'", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "(", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ")", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "“", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "?", "_");
			Строка.Name = СтрЗаменить(Строка.Name, """", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "!", "_");
			
			
			СтрокаЧисел = "1234567890";
			Если Найти(СтрокаЧисел, Лев(Строка.Name, 1)) > 0 Тогда
				Строка.Name = "_" + Строка.Name;
			КонецЕсли;
			
			
			Fields.Вставить(Строка.Name, Строка.Value);
		ИначеЕсли Строка.Элемент = "tables" Тогда	
			Tables = Новый ТаблицаЗначений;
		ИначеЕсли Строка.Элемент = "row" Тогда				
			НСтрока = Tables.Добавить(); 
		ИначеЕсли Строка.Элемент = "cell" Тогда	                      
			
			Если ЗначениеЗаполнено(Строка.Name) = Истина Тогда
				Если СписокДопустимыхИменКолонок.НайтиПоЗначению(Строка.Name) <> Неопределено Тогда				
					
					Если Tables.Колонки.Найти(Строка.Name) = Неопределено Тогда
						Tables.Колонки.Добавить(Строка.Name);
					КонецЕсли;	
					
					НСтрока[Строка.Name] = Строка.Value;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		ОбработатьКоллекциюСтрокДерева(Строка, Fields, Tables, Документ, НСтрока);
	КонецЦикла;
КонецПроцедуры	

Процедура ОбработатьКоллекциюСтрокДереваВерификации(КолСтрок, Fields, Tables, Table, Документ, НСтрока = Неопределено)
	
	Для каждого Строка Из КолСтрок.Строки Цикл
		Если Строка.Элемент = "exportDocument" Тогда
			//Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			
			Документ.Вставить("document_type", Строка.Атрибуты.Получить("document-type"));
			Документ.Вставить("file_name", Строка.Name);
			
			//ИмяФайла = Строка.Аттрибуты.Получить("name1");					
			//
			//Документ.Вставить("file_name", ИмяФайла);
		ИначеЕсли Строка.Элемент = "field" Тогда
			Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			Строка.Name = СтрЗаменить(Строка.Name, "№", "НС");
			Строка.Name = СтрЗаменить(Строка.Name, ":", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ";", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "`", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "'", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "(", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ")", "_");
			
			value_type = Строка.Атрибуты.Получить("value_type");
			Если ЗначениеЗаполнено(value_type) = Ложь Тогда 
				value_type = "Строка";	
			КонецЕсли;
			
			Значение = ПривестиЗначениеПоТипу(value_type, Строка.Value);
			
			Fields.Вставить(Строка.Name, Значение);
		ИначеЕсли Строка.Элемент = "tables" Тогда	
			//Tables = Новый ТаблицаЗначений;
		ИначеЕсли Строка.Элемент = "table" Тогда	
			Table = Новый ТаблицаЗначений;	
			Tables.Добавить(Table);
			
			Table = Tables.Получить(Tables.Количество() - 1);
			
			
		ИначеЕсли Строка.Элемент = "row" Тогда				
			НСтрока = Table.Добавить(); 
		ИначеЕсли Строка.Элемент = "cell" Тогда				
			Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			Строка.Name = СтрЗаменить(Строка.Name, "№", "НС");
			Строка.Name = СтрЗаменить(Строка.Name, ":", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ";", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "`", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "'", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "(", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ")", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "“", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "?", "_");
			Строка.Name = СтрЗаменить(Строка.Name, """", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "!", "_");
			
			
			СтрокаЧисел = "1234567890";
			Если Найти(СтрокаЧисел, Лев(Строка.Name, 1)) > 0 Тогда
				Строка.Name = "_" + Строка.Name;
			КонецЕсли;	
			
			value_type = Строка.Атрибуты.Получить("value_type");
			Если ЗначениеЗаполнено(value_type) = Ложь Тогда 
				value_type = "Строка";	
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Строка.Name) = Истина Тогда
				Если Table.Колонки.Найти(Строка.Name) = Неопределено Тогда
					Table.Колонки.Добавить(Строка.Name);
				КонецЕсли;	
				
				НСтрока[Строка.Name] = ПривестиЗначениеПоТипу(value_type, Строка.Value);
			КонецЕсли;
		КонецЕсли;	
		ОбработатьКоллекциюСтрокДереваВерификации(Строка, Fields, Tables, Table, Документ, НСтрока);
	КонецЦикла;
КонецПроцедуры

Функция ПривестиЗначениеПоТипу(ТипПриемника, Значение)
	
	вЗначение = Неопределено;
	Если Значение = Неопределено Тогда
		Возврат вЗначение;
	КонецЕсли;  	
	
	Если ТипПриемника = "Строка"  Тогда		
		вЗначение = СокрЛП(Значение); 		
	ИначеЕсли ТипПриемника = "Число"  Тогда		
		вЗначение = Число(Значение);		
	ИначеЕсли ТипПриемника = "Булево"  Тогда 		
		вЗначение = Булево(Значение);   		
	ИначеЕсли ТипПриемника = "Дата"  Тогда 		
		Значение = СтрЗаменить(Значение, ":", "");
		Значение = СтрЗаменить(Значение, "-", "");
		Значение = СтрЗаменить(Значение, "T", "");
		вЗначение = Дата(Значение);    		
	Иначе	 	
		Если ТипПриемника = "Склады (места хранения)" Тогда
			ТипПриемника = "Склады";
		ИначеЕсли ТипПриемника = "Классификатор единиц измерения" Тогда
			ТипПриемника = "КлассификаторЕдиницИзмерения"; 
		ИначеЕсли ТипПриемника = "Единица измерения" Тогда
			ТипПриемника = "ЕдиницыИзмерения"; 	
		КонецЕсли;
		
		Если Метаданные.Справочники.Найти(ТипПриемника) <> Неопределено Тогда 
			вЗначение = Справочники[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		ИначеЕсли ТипПриемника = "Ставки НДС" Тогда			
			вЗначение = Перечисления.СтавкиНДС[Значение];
		КонецЕсли; 		
	КонецЕсли;
	
	Возврат вЗначение;
КонецФункции	

Функция ПрочитатьXMLВДеревоЗначений(Файл) Экспорт	
	ДЗ = Парсинг(Файл);
	Возврат ДЗ;	
КонецФункции

Функция Парсинг(Файл) 
	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(Файл.ПолноеИмя);  
	ДеревоЗначений = Новый ДеревоЗначений();
	Попытка 
		Чтение.Прочитать();
	Исключение
		//Предупреждение("Документ XML поврежден");
		Возврат ДеревоЗначений;
	КонецПопытки;
	ДеревоЗначений.Колонки.Добавить("Элемент");
	ДеревоЗначений.Колонки.Добавить("Value");
	ДеревоЗначений.Колонки.Добавить("Атрибуты");
	ДеревоЗначений.Колонки.Добавить("Name");
	
	Корень         = ДеревоЗначений.Строки.Добавить();
	Корень.Элемент = Чтение.Имя;
	Рекурсия(Корень, Чтение);
	Возврат ДеревоЗначений;
КонецФункции

Процедура Рекурсия(СтрокаДерева, Чтение)
	АтрибутыСоответствие = Новый Соответствие();
	Пока Чтение.ПрочитатьАтрибут() Цикл
		АтрибутыСоответствие.Вставить(Чтение.Имя, Чтение.Значение);
	КонецЦикла;
	Если АтрибутыСоответствие.Количество() > 0 Тогда
		СтрокаДерева.Атрибуты = АтрибутыСоответствие;
		СтрокаДерева.Name = АтрибутыСоответствие.Получить("name");		
	Иначе
		АтрибутыСоответствие = 0;
	КонецЕсли;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаДерева.Value = Чтение.Значение;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Дочерний         = СтрокаДерева.Строки.Добавить();
			Дочерний.Элемент = Чтение.Имя;
			Рекурсия(Дочерний, Чтение);
		КонецЕсли;
		//ОбработкаПрерыванияПользователя();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьРеквизитПоКлючу(Документ, Ключ)
	Результат = "";
	Документ.Свойство(Ключ, Результат);
	Возврат СокрЛП(Результат);
КонецФункции

Функция ПолучитьЗначениеРеквизитаИзТаблицы(Таблица,ИмяРеквизита) Экспорт
	вЗначение = "";
	Фильтр = Новый Структура("Название", ИмяРеквизита);
	МассивСтрок = Таблица.НайтиСтроки(Фильтр);
	Если МассивСтрок.Количество() > 0 Тогда
		вЗначение = МассивСтрок[0].Значение;
	КонецЕсли;
	
	Возврат вЗначение;
КонецФункции
//-- АК luza ИП-00017231


Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	//СпрОбъект.УстановитьНовыйКод("0");
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	Если Лев(НРег(РасширениеРезультата),4)=".doc" Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтрокаТаблицы.ДанныеКартинки));
	Иначе	
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	КонецЕсли;	
	
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

//-- АК luza ИП-00017231


Процедура ПрикрепитьОбъектКФайлу(Знач Файл, Знач Объект, Знач СтрукутаПараметорв = Неопределено) Экспорт
	
	Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
	Запись.Файл = Файл;
	Запись.ОбъектСравнения = Объект;
	Запись.Распознан = Истина;
	Запись.Обработан = Истина;
	Запись.Автор = ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаДобавления = ТекущаяДата();
	Запись.Записать();
	
	
	ЭтоСФ = Ложь;
	ТипФайла = ПолучитьТипФайла(Файл);
	Если НРег(ТипФайла) = НРег("Счет_фактура") Или НРег(ТипФайла) = НРег("Счет-фактура") Или НРег(ТипФайла) = НРег("Универсальный передаточный документ") Тогда
		ЭтоСФ = Истина;
	КонецЕсли;	
	
	
	Запись = РегистрыСведений.ПрикрепленныеСканыКДокументам.СоздатьМенеджерЗаписи();
	Запись.Документ = Объект;
	Запись.Прочитать();
	Если ЗначениеЗаполнено(Запись.Документ) = Ложь Тогда
		Запись.Документ = Объект;
	КонецЕсли;
	
	Если ЭтоСФ = Истина Тогда
		Запись.ФайлСФ = Файл;
	Иначе
		Запись.ФайлТОРГ12 = Файл;
	КонецЕсли;
	
	Запись.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Вер_Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК Расп_Файл
	|ПОМЕСТИТЬ ВТ_Вер_И_Расп
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель)
	|	И ЗначенияСвойствОбъектов.Объект = &Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Вер_И_Расп.Вер_Файл,
	|	ВТ_Вер_И_Расп.Расп_Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК Оригинал
	|ИЗ
	|	ВТ_Вер_И_Расп КАК ВТ_Вер_И_Расп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВТ_Вер_И_Расп.Расп_Файл = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель))";
	
	Запрос.УстановитьПараметр("Файл", Файл);
	Выборка = Запрос.Выполнить().Выбрать();
	ФайлОригинал = Справочники.Файлы.ПустаяСсылка();
	
	Пока Выборка.Следующий() Цикл
		ФайлОригинал = Выборка.Оригинал;
	КонецЦикла;	
	
	
	СуществующийСчетФактура = Документы.СчетФактураПолученный.НайтиПодчиненныйСчетФактуру(Объект.Ссылка, "СчетФактураПолученный");		
	
	Если СуществующийСчетФактура = Неопределено Тогда
		
		ПериодЗакрыт = НастройкаПравДоступа.ДокументВЗакрытомПериодеНДС(Объект);
		Если ПериодЗакрыт = Истина Тогда
			Документ = Документы.СчетФактураПолученный.СоздатьДокумент();
			Документ.Дата = ТекущаяДата();
			Документ.Заполнить(Объект.Ссылка);
			Документ.Файл = ФайлОригинал;		
			
			Если ЗначениеЗаполнено(СтрукутаПараметорв) = Истина И ТипЗнч(СтрукутаПараметорв) = Тип("Структура") Тогда
				СтрукутаПараметорв.Свойство("Номер", Документ.НомерВходящегоДокумента);
				СтрукутаПараметорв.Свойство("Дата", Документ.ДатаВходящегоДокумента);
			КонецЕсли;
			Документ.Записать();		
		Иначе
			ОбъектДокумент = Объект.ПолучитьОбъект();		
			Если ЭтоСФ = Истина Тогда
				
				Если ЗначениеЗаполнено(ОбъектДокумент.УПД) = Истина И ОбъектДокумент.УПД = ФайлОригинал Тогда
				ИначеЕсли ЗначениеЗаполнено(ОбъектДокумент.СчетФактура) = Истина И ОбъектДокумент.СчетФактура = ФайлОригинал Тогда	
				Иначе				
					ОбъектДокумент.СчетФактура = ФайлОригинал;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрукутаПараметорв) = Истина И ТипЗнч(СтрукутаПараметорв) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(ОбъектДокумент.НомерВходящегоСчетаФактуры) = Ложь Тогда
						СтрукутаПараметорв.Свойство("Номер", ОбъектДокумент.НомерВходящегоСчетаФактуры);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ОбъектДокумент.ДатаВходящегоСчетаФактуры) = Ложь Тогда
						СтрукутаПараметорв.Свойство("Дата", ОбъектДокумент.ДатаВходящегоСчетаФактуры);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ОбъектДокумент.Акт = ФайлОригинал;
				Если ЗначениеЗаполнено(СтрукутаПараметорв) = Истина И ТипЗнч(СтрукутаПараметорв) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(ОбъектДокумент.НомерВходящегоДокумента) = Ложь Тогда
						СтрукутаПараметорв.Свойство("Номер", ОбъектДокумент.НомерВходящегоДокумента);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ОбъектДокумент.ДатаВходящегоДокумента) = Ложь Тогда
						СтрукутаПараметорв.Свойство("Дата", ОбъектДокумент.ДатаВходящегоДокумента);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			ОбъектДокумент.ОбменДанными.Загрузка = Истина;
			Если ТипЗнч(ОбъектДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
				ОбъектДокумент.НеПроверятьДатуЗапретаРедактирования = Истина;
			КонецЕсли;	
			
			Попытка 
				ОбъектДокумент.Записать();
			Исключение
				//Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	СписокОбязательныхРеквизитов = Новый СписокЗначений;	
	СписокОбязательныхРеквизитов.Добавить("ИННПоставщика");
	СписокОбязательныхРеквизитов.Добавить("Номер");
	СписокОбязательныхРеквизитов.Добавить("Дата");
	СписокОбязательныхРеквизитов.Добавить("Всего");
	
	СоответсвиеСвойств = Новый Соответствие;
	СоответсвиеСвойств.Вставить("ИННПоставщика", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_ИНН);
	СоответсвиеСвойств.Вставить("Номер", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Номер);
	СоответсвиеСвойств.Вставить("Дата", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Дата);
	СоответсвиеСвойств.Вставить("Всего", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Сумма);
	
	
	Если ЗначениеЗаполнено(ФайлОригинал) = Истина И ЭтоСФ = Истина И ТипЗнч(Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(СтрукутаПараметорв) = Истина И ТипЗнч(СтрукутаПараметорв) = Тип("Структура") Тогда
			Для каждого ЗначСписка Из СписокОбязательныхРеквизитов Цикл				
				Свойство = СоответсвиеСвойств.Получить(ЗначСписка.Значение);
				Если ЗначениеЗаполнено(Свойство) = Истина Тогда
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект =  ФайлОригинал;
					Запись.Свойство = Свойство;
					СтрукутаПараметорв.Свойство(ЗначСписка.Значение, Запись.Значение);
					Запись.Записать();
				КонецЕсли;				
			КонецЦикла;	
		КонецЕсли;				
		
		ЗаписьОчередь = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
		ЗаписьОчередь.Файл = ФайлОригинал;
		ЗаписьОчередь.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьОчередь.Файл) = Ложь Тогда
			ЗаписьОчередь.Файл = ФайлОригинал;
		КонецЕсли;	
		
		ЗаписьОчередь.ОбъектСравнения = Объект;
		ЗаписьОчередь.Распознан = Истина;
		ЗаписьОчередь.Обработан = Ложь;
		ЗаписьОчередь.РезультатСравнения = Ложь;
		ЗаписьОчередь.Записать();
	КонецЕсли;
	
КонецПроцедуры	

Функция СравнитьОбъектИФайл(Знач Файл, Знач Объект) Экспорт
	
	РезультатСравнения = "";
	
	
	//СписокПроверкиШапки 
	СписокПроверокШапки = Новый СписокЗначений;
	
	СписокПроверокШапки.Добавить("Номер"); 
	СписокПроверокШапки.Добавить("Дата"); 
	СписокПроверокШапки.Добавить("Номер исправления"); 
	СписокПроверокШапки.Добавить("Дата исправления"); 
	СписокПроверокШапки.Добавить("Организация");
	СписокПроверокШапки.Добавить("ИНН организации");
	СписокПроверокШапки.Добавить("Адрес организации");
	СписокПроверокШапки.Добавить("Контрагент");
	СписокПроверокШапки.Добавить("ИНН контрагента"); 
	СписокПроверокШапки.Добавить("КПП контрагента");
	СписокПроверокШапки.Добавить("Адрес контрагента");
	//СписокПроверокШапки.Добавить("Склад"); 
	СписокПроверокШапки.Добавить("Сумма документа");
	СписокПроверокШапки.Добавить("Сумма НДС Всего");
	
	//СписокНекритичныхПроверокШапки = Новый СписокЗначений;
		
	
	СписокПроверокТЧ = Новый СписокЗначений;
	
	СписокПроверокТЧ.Добавить("Номенклатура"); 
	СписокПроверокТЧ.Добавить("Единица измерения"); 
	СписокПроверокТЧ.Добавить("Ставка НДС"); 
	СписокПроверокТЧ.Добавить("Количество"); 
	//СписокПроверокТЧ.Добавить("Цена");
	СписокПроверокТЧ.Добавить("Сумма без НДС");
	СписокПроверокТЧ.Добавить("Сумма НДС");
	СписокПроверокТЧ.Добавить("Всего");	
	
	СписокНекритичныхПроверокТЧ = Новый СписокЗначений;
	
	СписокНекритичныхПроверокТЧ.Добавить("Номенклатура"); 
	СписокНекритичныхПроверокТЧ.Добавить("Единица измерения");
	СписокНекритичныхПроверокТЧ.Добавить("Адрес организации");
	СписокНекритичныхПроверокТЧ.Добавить("Адрес контрагента");
	//СписокНекритичныхПроверокТЧ.Добавить("КПП контрагента");
	
	//ДанныеФайла
	
	СоответсвиеДляФайла = Новый Соответствие;	
	СтруктураТаблицФайла = Новый Структура("ТаблицаТоваров, ТаблицаУслугИМатериалов, ТаблицаОборудования");
	
	ФайлЭтоСФ = Ложь;
	
	ТипФайла = ПолучитьТипФайла(Файл);
	Если НРег(ТипФайла) = НРег("Счет_фактура") Или НРег(ТипФайла) = НРег("Счет-фактура") Или НРег(ТипФайла) = НРег("Универсальный передаточный документ") Тогда
		ФайлЭтоСФ = Истина;
	КонецЕсли;
	
	ПоискЗначенийВБазе = Ложь;
	
	Если ТипЗнч(Файл) = Тип("СправочникСсылка.Файлы") Тогда
		ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);	
		
		Фильтр = Новый Структура("Объект, Свойство", Файл, ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Тип);
		ТипФайла = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Фильтр).Значение;
		
		ФайлНаДиске = Новый Файл(ПутьКФайлу);
		
		Если ТипФайла = "Верифицированный файл" Тогда
			СтруктураФайла = ПолучитьСтруктуруXMLВерификации(ФайлНаДиске);		
			
			//СоответсвиеДляФайла.Вставить("Тип документа", "Document_Type");
			СоответсвиеДляФайла.Вставить("Номер", "Номер");
			СоответсвиеДляФайла.Вставить("Дата", "Дата");
			СоответсвиеДляФайла.Вставить("Номер исправления", "НомерИспр");
			СоответсвиеДляФайла.Вставить("Дата исправления", "ДатаИспр");			
			СоответсвиеДляФайла.Вставить("Организация", "Заказчик");
			СоответсвиеДляФайла.Вставить("ИНН организации", "ИННЗаказчика");
			СоответсвиеДляФайла.Вставить("Адрес организации", "АдресЗаказчика");
			СоответсвиеДляФайла.Вставить("Контрагент", "Поставщик");
			СоответсвиеДляФайла.Вставить("ИНН контрагента", "ИННПоставщика");
			СоответсвиеДляФайла.Вставить("КПП контрагента", "КПППоставщика");
			СоответсвиеДляФайла.Вставить("Адрес контрагента", "АдресПоставщика");
			СоответсвиеДляФайла.Вставить("Склад", "Склад");
			СоответсвиеДляФайла.Вставить("Сумма документа", "Всего");
			СоответсвиеДляФайла.Вставить("Сумма НДС Всего", "ВсегоНДС");
			
			//ТЧ
			//СписокПроверокТЧ.Добавить("Единица измерения"); 
			//СписокПроверокТЧ.Добавить("Ставка НДС"); 
			//СписокПроверокТЧ.Добавить("Количество"); 
			//СписокПроверокТЧ.Добавить("Цена");
			//СписокПроверокТЧ.Добавить("Сумма без НДС");
			//СписокПроверокТЧ.Добавить("Сумма НДС");
			//СписокПроверокТЧ.Добавить("Всего");
			
			СоответсвиеДляФайла.Вставить("Номенклатура", "Номенклатура"); 
			СоответсвиеДляФайла.Вставить("Единица измерения", "ЕдиницаИзмерения"); 
			СоответсвиеДляФайла.Вставить("Ставка НДС", "СтавкаНДС"); 
			СоответсвиеДляФайла.Вставить("Количество", "Количество"); 
			СоответсвиеДляФайла.Вставить("Цена", "Цена"); 
			СоответсвиеДляФайла.Вставить("Сумма без НДС", "Сумма"); 
			СоответсвиеДляФайла.Вставить("Сумма НДС", "СуммаНДС"); 
			СоответсвиеДляФайла.Вставить("Всего", "Всего"); 
			
			
			
			МассивТаблиц = СтруктураФайла.Tables;
			
			ТаблицаТоваров = Новый ТаблицаЗначений;
			ТаблицаУслугИМатериалов = Новый ТаблицаЗначений;	
			ТаблицаОборудования = Новый ТаблицаЗначений;
			
			Если МассивТаблиц.Количество() > 0 Тогда										
				ИсходнаяТаблица = МассивТаблиц.Получить(0);
				
				Если ИсходнаяТаблица.Количество() > 0 Тогда			
					
					
					МассивТипов = Новый Массив;				
					МассивТипов.Добавить(Тип("Строка"));
					ПараметрыСтроки = Новый КвалификаторыСтроки(20);
					
					ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
					
					ИсходнаяТаблица.Колонки.Добавить("ТипНомСтрока", ДопустимыеТипы);				
					Если ИсходнаяТаблица.Колонки.Найти("ТипНоменклатуры") <> Неопределено Тогда
						ИсходнаяТаблица.ЗагрузитьКолонку(ИсходнаяТаблица.ВыгрузитьКолонку("ТипНоменклатуры"), "ТипНомСтрока");
					КонецЕсли;			
					
					Фильтр = Новый Структура("Исходная, ТипНоменклатуры", Ложь, "Товар");
					ТаблицаТоваровФайл = ИсходнаяТаблица.Скопировать(Фильтр);
					
					Фильтр = Новый Структура("Исходная, ТипНоменклатуры", Ложь, "Оборудование");
					ТаблицаОборудованияФайл = ИсходнаяТаблица.Скопировать(Фильтр);
					
					Список = Новый СписокЗначений;
					Список.Добавить("Услуга");
					Список.Добавить("Материал");	
					
					ПостроительЗапроса = Новый ПостроительЗапроса; 
					ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ИсходнаяТаблица); 
					НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("ТипНомСтрока"); 
					НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
					НовыйОтбор.Значение = Список;
					НовыйОтбор.Использование = Истина;  					
					
					Результат = ПостроительЗапроса.Результат;
					
					ТаблицаУслугИМатериаловФайл = Результат.Выгрузить(); 		
				КонецЕсли;
			КонецЕсли;
			
			СтруктураТаблицФайла.ТаблицаТоваров = ТаблицаТоваровФайл;
			СтруктураТаблицФайла.ТаблицаУслугИМатериалов = ТаблицаУслугИМатериаловФайл;
			СтруктураТаблицФайла.ТаблицаОборудования = ТаблицаОборудованияФайл;
			
		ИначеЕсли ЗначениеЗаполнено(ТипФайла) = Ложь Тогда
			РезультатСравнения = "Невреный тип файла";
		Иначе //не верифицированный файл (от филина)
			СтруктураФайла = ПолучитьСтруктуруXML(ФайлНаДиске);		
			
			//СоответсвиеДляФайла.Вставить("Тип документа", "Document_Type");
			СоответсвиеДляФайла.Вставить("Номер", "Номер");
			СоответсвиеДляФайла.Вставить("Дата", "Дата");
			СоответсвиеДляФайла.Вставить("Номер исправления", "НомерИспр");
			СоответсвиеДляФайла.Вставить("Дата исправления", "ДатаИспр");
			СоответсвиеДляФайла.Вставить("Организация", "Заказчик");
			СоответсвиеДляФайла.Вставить("ИНН организации", "ИННЗаказчика");
			СоответсвиеДляФайла.Вставить("Адрес организации", "АдресЗаказчика");
			СоответсвиеДляФайла.Вставить("Контрагент", "Поставщик");
			СоответсвиеДляФайла.Вставить("ИНН контрагента", "ИННПоставщика");
			СоответсвиеДляФайла.Вставить("КПП контрагента", "КПППоставщика");
			СоответсвиеДляФайла.Вставить("Адрес контрагента", "АдресПоставщика");
			СоответсвиеДляФайла.Вставить("Склад", "Склад");
			СоответсвиеДляФайла.Вставить("Сумма документа", "Всего");
			СоответсвиеДляФайла.Вставить("Сумма НДС Всего", "ВсегоНДС");
			
			
			//Если файл не верифицировали считаем все услугами/материалами
			
		КонецЕсли;		
	ИначеЕсли ТипЗнч(Файл) = Тип("ДокументСсылка.ЭДО_ВходящийДокумент") 
		ИЛИ ТипЗнч(Файл) = Тип("ДокументСсылка.ЭДО_ИсходящийДокумент")  Тогда
		
		Если ТипЗнч(Файл) = Тип("ДокументСсылка.ЭДО_ВходящийДокумент") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЭДО_ВходящийДокумент.Номер,
			|	ЭДО_ВходящийДокумент.Дата,
			|	ЭДО_ВходящийДокумент.Организация КАК Заказчик,
			|	ЭДО_ВходящийДокумент.Организация.ИНН КАК ИННЗаказчика,
			|	ЭДО_ВходящийДокумент.Организация.КПП КАК КППЗаказчика,
			|	ЕСТЬNULL(КонтактнаяИнформацияОрганизация.Представление, """") КАК АдресЗаказчика,
			|	ЕСТЬNULL(КонтактнаяИнформацияКонтрагент.Представление, """") КАК АдресПоставщика,
			|	ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент КАК Поставщик,
			|	ЭДО_ВходящийДокумент.КонтрагентЭДО.ИНН КАК ИННПоставщика,
			|	ЭДО_ВходящийДокумент.КонтрагентЭДО.КПП КАК КПППоставщика,
			|	ЭДО_ВходящийДокумент.СуммаДокумента КАК Всего,
			|	ЭДО_ВходящийДокумент.СуммаНДС КАК ВсегоНДС,
			|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК ВидДокумента,
			|	0 КАК НомерИспр,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИспр
			|ИЗ
			|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизация
			|		ПО ЭДО_ВходящийДокумент.Организация = КонтактнаяИнформацияОрганизация.Объект
			|			И (КонтактнаяИнформацияОрганизация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагент
			|		ПО ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент = КонтактнаяИнформацияКонтрагент.Объект
			|			И (КонтактнаяИнформацияКонтрагент.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
			|ГДЕ
			|	ЭДО_ВходящийДокумент.Ссылка = &Ссылка";
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЭДО_ИсходящийДокумент.Номер,
			|	ЭДО_ИсходящийДокумент.Дата,
			|	ЭДО_ИсходящийДокумент.Организация КАК Заказчик,
			|	ЭДО_ИсходящийДокумент.Организация.ИНН КАК ИННЗаказчика,
			|	ЭДО_ИсходящийДокумент.Организация.КПП КАК КППЗаказчика,
			|	ЕСТЬNULL(КонтактнаяИнформацияОрганизация.Представление, """") КАК АдресЗаказчика,
			|	ЕСТЬNULL(КонтактнаяИнформацияКонтрагент.Представление, """") КАК АдресПоставщика,
			|	ЭДО_ИсходящийДокумент.КонтрагентЭДО.Контрагент КАК Поставщик,
			|	ЭДО_ИсходящийДокумент.КонтрагентЭДО.ИНН КАК ИННПоставщика,
			|	ЭДО_ИсходящийДокумент.КонтрагентЭДО.КПП КАК КПППоставщика,
			|	ЭДО_ИсходящийДокумент.СуммаДокумента КАК Всего,
			|	ЭДО_ИсходящийДокумент.СуммаНДС КАК ВсегоНДС,
			|	ЭДО_ИсходящийДокумент.ТипДокумента.ТипДокумента КАК ВидДокумента,
			|	0 КАК НомерИспр,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИспр
			|ИЗ
			|	Документ.ЭДО_ИсходящийДокумент КАК ЭДО_ИсходящийДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизация
			|		ПО ЭДО_ИсходящийДокумент.Организация = КонтактнаяИнформацияОрганизация.Объект
			|			И (КонтактнаяИнформацияОрганизация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагент
			|		ПО ЭДО_ИсходящийДокумент.КонтрагентЭДО.Контрагент = КонтактнаяИнформацияКонтрагент.Объект
			|			И (КонтактнаяИнформацияКонтрагент.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
			|ГДЕ
			|	ЭДО_ИсходящийДокумент.Ссылка = &Ссылка";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", Файл);
		
		Fields = Новый Структура;
		Tables = Новый Структура;
		СтруктураФайла = Новый Структура("Fields, Tables", Fields, Tables);
		
		ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаРеквизитов.Количество() > 0 Тогда
			Для каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
				СтруктураФайла.Fields.Вставить(Колонка.Имя, ТаблицаРеквизитов[0][Колонка.Имя]);
			КонецЦикла;	
			
			ВидДокумента = ТаблицаРеквизитов[0].ВидДокумента;
			Если ВидДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
				ФайлЭтоСФ = Истина;
			ИначеЕсли ВидДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда
				ФайлЭтоСФ = Истина;
			ИначеЕсли ВидДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
				ФайлЭтоСФ = Ложь;	
			ИначеЕсли ВидДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная Тогда
				ФайлЭтоСФ = Ложь;		
			КонецЕсли;	
			
		КонецЕсли;		
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаУслугИМатериалов = Новый ТаблицаЗначений;	
		ТаблицаОборудования = Новый ТаблицаЗначений;		
		
		
		Если ЗначениеЗаполнено(Файл.ФайлXML) = Истина Тогда	
			СтруктураФайлаВрем = Новый Структура("Контрагент", СтруктураФайла.Fields.Поставщик);
			Обработки.ЭДО_Интерфейс.ПрочитатьСтруктуруXML(Файл.ФайлXML, СтруктураФайлаВрем, Ложь);				
			
			ТаблицаУслугИМатериаловФайл = СтруктураФайлаВрем.ТабличнаяЧасть;	
			
			Если ЗначениеЗаполнено(СтруктураФайлаВрем.ДанныеШапки.Номер) Тогда
				СтруктураФайла.Fields.Номер = СтруктураФайлаВрем.ДанныеШапки.Номер;	
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтруктураФайлаВрем.ДанныеШапки.Дата) Тогда
				Попытка
					СтруктураФайла.Fields.Дата = ПолучитьДатуИзПроизвольнойСтроки(СтруктураФайлаВрем.ДанныеШапки.Дата);
				Исключение					
				КонецПопытки;					
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтруктураФайлаВрем.ДанныеШапки.НомерИспр) Тогда
				Попытка
					СтруктураФайла.Fields.НомерИспр = Число(СтруктураФайлаВрем.ДанныеШапки.НомерИспр);
				Исключение
					СтруктураФайла.Fields.НомерИспр = 0;				
				КонецПопытки;	
			Иначе
				СтруктураФайла.Fields.НомерИспр = 0;				
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтруктураФайлаВрем.ДанныеШапки.ДатаИспр) Тогда
				СтруктураФайла.Fields.ДатаИспр = ПолучитьДатуИзПроизвольнойСтроки(СтруктураФайлаВрем.ДанныеШапки.ДатаИспр);
			КонецЕсли;	
			
			Попытка 
				СтруктураФайла.Fields.ВсегоНДС = Число(СтруктураФайлаВрем.ДанныеШапки.СуммаНДС);
				СтруктураФайла.Fields.Всего = Число(СтруктураФайлаВрем.ДанныеШапки.Всего);
			Исключение
			КонецПопытки;		
			
			Если ТипЗнч(Файл) = Тип("ДокументСсылка.ЭДО_ВходящийДокумент") Тогда			
				СтруктураФайла.Fields.КПППоставщика	= СтруктураФайлаВрем.ДанныеШапки.ДанныеПоставщика.КПП;
			Иначе
				Если ЗначениеЗаполнено(СтруктураФайлаВрем.ДанныеШапки.ДанныеГрузополучателя.КПП) Тогда
					СтруктураФайла.Fields.КПППоставщика = СтруктураФайлаВрем.ДанныеШапки.ДанныеГрузополучателя.КПП;
				Иначе	
					СтруктураФайла.Fields.КПППоставщика	= СтруктураФайлаВрем.ДанныеШапки.ДанныеПокупателя.КПП;
				КонецЕсли;
			КонецЕсли;	
			//СтруктураФайла.Fields.АдресПоставщика = СтруктураФайлаВрем.ДанныеШапки.ДанныеПоставщика.Адрес;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Файл.ФайлXML_Верифицированный) = Истина Тогда									
			СтруктураФайлаВрем = Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьСтруктуруXMLВерификации(Файл.ФайлXML_Верифицированный);									
			
			МассивТаблиц = СтруктураФайлаВрем.Tables;
			
			Если МассивТаблиц.Количество() > 0 Тогда										
				ИсходнаяТаблица = МассивТаблиц.Получить(0);
				
				Если ИсходнаяТаблица.Количество() > 0 Тогда				
					//Товары(Товары), Услуги/Материалы(Услуги/Материалы), Оборудование(Оборудование), Доп. расход(Доп. расход)
					
					Фильтр = Новый Структура("Назначение", "Товары");
					ТаблицаТоваровФайл = ИсходнаяТаблица.Скопировать(Фильтр);
					
					Фильтр = Новый Структура("Назначение", "Услуги/Материалы");
					ТаблицаУслугИМатериаловФайл = ИсходнаяТаблица.Скопировать(Фильтр);
					
					Фильтр = Новый Структура("Назначение", "Оборудование");
					ТаблицаОборудованияФайл = ИсходнаяТаблица.Скопировать(Фильтр);					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		СтруктураТаблицФайла.ТаблицаТоваров = ТаблицаТоваровФайл;
		СтруктураТаблицФайла.ТаблицаУслугИМатериалов = ТаблицаУслугИМатериаловФайл;
		СтруктураТаблицФайла.ТаблицаОборудования = ТаблицаОборудованияФайл;
		
		
		
		СоответсвиеДляФайла.Вставить("Номер", "Номер");
		СоответсвиеДляФайла.Вставить("Дата", "Дата");  		
		СоответсвиеДляФайла.Вставить("Номер исправления", "НомерИспр");
		СоответсвиеДляФайла.Вставить("Дата исправления", "ДатаИспр");		
		СоответсвиеДляФайла.Вставить("Организация", "Заказчик");
		СоответсвиеДляФайла.Вставить("ИНН организации", "ИННЗаказчика");
		СоответсвиеДляФайла.Вставить("Адрес организации", "АдресЗаказчика");
		СоответсвиеДляФайла.Вставить("Контрагент", "Поставщик");
		СоответсвиеДляФайла.Вставить("ИНН контрагента", "ИННПоставщика");
		СоответсвиеДляФайла.Вставить("КПП контрагента", "КПППоставщика");
		СоответсвиеДляФайла.Вставить("Адрес контрагента", "АдресПоставщика");
		СоответсвиеДляФайла.Вставить("Склад", "Склад");
		СоответсвиеДляФайла.Вставить("Сумма документа", "Всего");
		СоответсвиеДляФайла.Вставить("Сумма НДС Всего", "ВсегоНДС");
		
		СоответсвиеДляФайла.Вставить("Номенклатура", "НоменклатураПоставщика"); 
		СоответсвиеДляФайла.Вставить("Единица измерения", "ЕдИзм"); 
		СоответсвиеДляФайла.Вставить("Ставка НДС", "СтавкаНДССтрока"); 
		СоответсвиеДляФайла.Вставить("Количество", "Количество"); 
		СоответсвиеДляФайла.Вставить("Цена", "Цена"); 
		СоответсвиеДляФайла.Вставить("Сумма без НДС", "СуммаБезНДС"); 
		СоответсвиеДляФайла.Вставить("Сумма НДС", "СуммаНДС"); 
		СоответсвиеДляФайла.Вставить("Всего", "СуммаСУчетомНДС"); 
		
	КонецЕсли;
	
	
	//ДанныеОбъекта
	Fields = Новый Структура;
	Tables = Новый Структура;
	
	СтруктураОбъекта = Новый Структура("Fields, Tables", Fields, Tables);
	СтруктураТаблицОбъекта = Новый Структура("ТаблицаТоваров, ТаблицаУслугИМатериалов, ТаблицаОборудования");
	
	СоответсвиеДляОбъекта = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Объект) = Истина Тогда
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
			ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Объект);	
			
			Фильтр = Новый Структура("Объект, Свойство", Объект, ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Тип);
			ТипФайла = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Фильтр).Значение;
			
			ФайлНаДиске = Новый Файл(ПутьКФайлу);
			
			
			Если ТипФайла = "Верифицированный файл" Тогда
				СтруктураОбъекта = ПолучитьСтруктуруXMLВерификации(ФайлНаДиске);
			ИначеЕсли ЗначениеЗаполнено(ТипФайла) = Ложь Тогда
				РезультатСравнения = "Невреный тип файла";
			Иначе 				
				СтруктураОбъекта = ПолучитьСтруктуруXML(ФайлНаДиске);
				
				//Соответсвтие для проверок
				СоответсвиеДляОбъекта.Вставить("Номер", "Номер");
				СоответсвиеДляОбъекта.Вставить("Дата", "Дата");
				СоответсвиеДляОбъекта.Вставить("Организация", "Заказчик");
				СоответсвиеДляОбъекта.Вставить("ИНН организации", "ИННЗаказчика");
				СоответсвиеДляОбъекта.Вставить("Адрес организации", "АдресЗаказчика");
				СоответсвиеДляОбъекта.Вставить("Контрагент", "Поставщик");
				СоответсвиеДляОбъекта.Вставить("ИНН контрагента", "ИННПоставщика");
				СоответсвиеДляОбъекта.Вставить("КПП контрагента", "КПППоставщика");
				СоответсвиеДляОбъекта.Вставить("Адрес контрагента", "АдресПоставщика");
				СоответсвиеДляОбъекта.Вставить("Склад", "Склад");
				СоответсвиеДляОбъекта.Вставить("Сумма документа", "ОбщаяСтоимость");
				СоответсвиеДляОбъекта.Вставить("Сумма НДС Всего", "СуммаНалога");
				
				СоответсвиеДляОбъекта.Вставить("Номенклатура", "description"); 
				СоответсвиеДляОбъекта.Вставить("Единица измерения", "ed"); 
				СоответсвиеДляОбъекта.Вставить("Ставка НДС", "stavka"); 
				СоответсвиеДляОбъекта.Вставить("Количество", "quantity"); 
				СоответсвиеДляОбъекта.Вставить("Цена", "price"); 
				СоответсвиеДляОбъекта.Вставить("Сумма без НДС", "cost"); 
				СоответсвиеДляОбъекта.Вставить("Сумма НДС", "nalogsum"); 
				СоответсвиеДляОбъекта.Вставить("Всего", "sumnds"); 
				
				//Получение таблицы
				ИсходнаяТаблица = СтруктураОбъекта.Tables;
				
				ТаблицаТоваров = Новый ТаблицаЗначений;
				ТаблицаУслугИМатериалов = Новый ТаблицаЗначений;	
				ТаблицаОборудования = Новый ТаблицаЗначений;
				
				ТаблицаУслугИМатериалов = ИсходнаяТаблица.Скопировать();
				
				
				//Попытка преобразования значений
				ПреобразоватьИсходнуюТаблицу(ТаблицаУслугИМатериалов);
				
				
				СтруктураТаблицОбъекта.ТаблицаТоваров = ТаблицаТоваров;
				СтруктураТаблицОбъекта.ТаблицаУслугИМатериалов = ТаблицаУслугИМатериалов;
				СтруктураТаблицОбъекта.ТаблицаОборудования = ТаблицаОборудования;
				
				//Преобразование значений шапки
				//Дата
				Дата = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "Дата");
				Если ЗначениеЗаполнено(Дата) = Истина Тогда
					СтруктураОбъекта.Fields.Вставить("Дата", Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьДатуИзПроизвольнойСтроки(Дата));
				КонецЕсли;	
				
				//Суммы
				
				Сумма = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "ОбщаяСтоимость");
				Если ЗначениеЗаполнено(Сумма) = Истина Тогда
					СтруктураОбъекта.Fields.Вставить("ОбщаяСтоимость", ПарсингЧисла(Сумма));
				КонецЕсли;	
				
				СуммаНДС = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "СуммаНалога");
				Если ЗначениеЗаполнено(Сумма) = Истина Тогда
					СтруктураОбъекта.Fields.Вставить("СуммаНалога", ПарсингЧисла(СуммаНДС));
				КонецЕсли;	
				
				
				//Организация
				ОрганизацияИмя = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "Заказчик");
				ОрганизацияИНН = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "ИННЗаказчика");
				
				ОрганизацияИНН = УбратьЛишниеСимволыВИНН(ОрганизацияИНН);      	
				
				Организация = НайтиОрганизацию(ОрганизацияИмя, ОрганизацияИНН);
				
				СтруктураОбъекта.Fields.Вставить("ИННЗаказчика", ОрганизацияИНН);
				
				Если ЗначениеЗаполнено(Организация) Тогда
					СтруктураОбъекта.Fields.Вставить("Заказчик", Организация);						
					АдресОрганизации = ПолучитьАдресИзБазы(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
					Если ЗначениеЗаполнено(АдресОрганизации) Тогда
						СтруктураОбъекта.Fields.Вставить("АдресЗаказчика", АдресОрганизации);
					КонецЕсли;	
				Иначе
					СтруктураОбъекта.Fields.Вставить("Заказчик", ОрганизацияИмя);						
				КонецЕсли;
				
				//Контрагент
				КонтрагентИмя = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "Поставщик");
				КонтрагентИНН = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "ИННПоставщика");
				КонтрагентКПП = ПолучитьРеквизитПоКлючу(СтруктураОбъекта.Fields, "КПППоставщика");
				
				КонтрагентИНН = УбратьЛишниеСимволыВИНН(КонтрагентИНН);      	
				КонтрагентКПП = УбратьЛишниеСимволыВИНН(КонтрагентКПП);      	
				Контрагент = НайтиКонтрагента(КонтрагентИмя, КонтрагентИНН, КонтрагентКПП);
				
				СтруктураОбъекта.Fields.Вставить("ИННПоставщика", КонтрагентИНН);
				СтруктураОбъекта.Fields.Вставить("КПППоставщика", КонтрагентКПП);	
				Если ЗначениеЗаполнено(Контрагент) Тогда
					СтруктураОбъекта.Fields.Вставить("Поставщик", Контрагент);						
					АдресКонтрагента = ПолучитьАдресИзБазы(Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
					Если ЗначениеЗаполнено(АдресКонтрагента) Тогда
						СтруктураОбъекта.Fields.Вставить("АдресПоставщика", АдресКонтрагента);
					КонецЕсли;
				Иначе
					СтруктураОбъекта.Fields.Вставить("Поставщик", КонтрагентИмя);						
					СтруктураОбъекта.Fields.Вставить("Поставщик", Контрагент);						
				КонецЕсли;
				
				
				
			КонецЕсли;		
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПоступлениеТоваровУслуг.Ссылка,
			|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаНакладной,
			|	ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры КАК ДатаСФ,
			|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерНакладной,
			|	ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры КАК НомерСФ,
			|	ПоступлениеТоваровУслуг.Организация КАК Организация,
			|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
			|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
			|	ПоступлениеТоваровУслуг.Контрагент.ИНН КАК КонтрагентИНН,
			|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ПоступлениеТоваровУслуг.Контрагент.КПП) КАК КонтрагентКПП,
			|	ЕСТЬNULL(КонтактнаяИнформацияОрганизация.Представление, """") КАК АдресОрганизации,
			|	ЕСТЬNULL(КонтактнаяИнформацияКонтрагент.Представление, """") КАК АдресКонтрагента,
			|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
			|	ПоступлениеТоваровУслуг.Склад КАК Склад,
			|	0 КАК НомерИспр,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИспр
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизация
			|		ПО ПоступлениеТоваровУслуг.Организация = КонтактнаяИнформацияОрганизация.Объект
			|			И (КонтактнаяИнформацияОрганизация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагент
			|		ПО ПоступлениеТоваровУслуг.Контрагент = КонтактнаяИнформацияКонтрагент.Объект
			|			И (КонтактнаяИнформацияКонтрагент.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО ПоступлениеТоваровУслуг.Ссылка = ЗначенияСвойствОбъектов.Объект
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КППКонтрагента))
			|ГДЕ
			|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПоступлениеТоваровУслугТовары.Количество,
			|	ПоступлениеТоваровУслугТовары.Цена,
			|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
			|	ПоступлениеТоваровУслугТовары.СуммаНДС,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
			|			ТОГДА ПоступлениеТоваровУслугТовары.Сумма - ПоступлениеТоваровУслугТовары.СуммаНДС
			|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
			|			ТОГДА ПоступлениеТоваровУслугТовары.Сумма + ПоступлениеТоваровУслугТовары.СуммаНДС
			|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма
			|	КОНЕЦ КАК Всего
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|ГДЕ
			|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
			|	ПоступлениеТоваровУслугУслуги.Количество,
			|	ПоступлениеТоваровУслугУслуги.Цена,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслугУслуги.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
			|			ТОГДА ПоступлениеТоваровУслугУслуги.Сумма - ПоступлениеТоваровУслугУслуги.СуммаНДС
			|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
			|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
			|	ПоступлениеТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслугУслуги.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
			|			ТОГДА ПоступлениеТоваровУслугУслуги.Сумма + ПоступлениеТоваровУслугУслуги.СуммаНДС
			|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Сумма
			|	КОНЕЦ КАК Всего
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
			|ГДЕ
			|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугОборудование.Номенклатура КАК Номенклатура,
			|	СУММА(ВЫБОР
			|			КОГДА ПоступлениеТоваровУслугОборудование.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
			|				ТОГДА ПоступлениеТоваровУслугОборудование.Сумма - ПоступлениеТоваровУслугОборудование.СуммаНДС
			|			ИНАЧЕ ПоступлениеТоваровУслугОборудование.Сумма
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(1) КАК Количество,
			|	СУММА(ПоступлениеТоваровУслугОборудование.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВЫБОР
			|			КОГДА ПоступлениеТоваровУслугОборудование.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
			|				ТОГДА ПоступлениеТоваровУслугОборудование.Сумма + ПоступлениеТоваровУслугОборудование.СуммаНДС
			|			ИНАЧЕ ПоступлениеТоваровУслугОборудование.Сумма
			|		КОНЕЦ) КАК Всего,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
			|ГДЕ
			|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеТоваровУслугОборудование.Номенклатура,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура.БазоваяЕдиницаИзмерения,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеДопРасходовТовары.Партия,
			|	СУММА(ВЫБОР
			|			КОГДА ПоступлениеДопРасходовТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
			|				ТОГДА ПоступлениеДопРасходовТовары.СуммаРаспределено
			|			ИНАЧЕ ПоступлениеДопРасходовТовары.СуммаРаспределено + ПоступлениеДопРасходовТовары.СуммаНДСРаспределено
			|		КОНЕЦ) КАК СуммаДопРасходов,
			|	СУММА(ПоступлениеДопРасходовТовары.СуммаНДСРаспределено) КАК СуммаНДС
			|ИЗ
			|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
			|ГДЕ
			|	ПоступлениеДопРасходовТовары.Партия = &Ссылка
			|	И ПоступлениеДопРасходовТовары.Партия.Контрагент = &Контрагент
			|	И ПоступлениеДопРасходовТовары.Ссылка.Проведен = ИСТИНА
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеДопРасходовТовары.Партия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления,
			|	КорректировкаПоступленияТовары.Ссылка,
			|	СУММА(КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения) КАК СуммаНДС,
			|	СУММА(КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения) КАК Сумма
			|ПОМЕСТИТЬ ВТ_КорректировкаПредв
			|ИЗ
			|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
			|ГДЕ
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления = &Ссылка
			|	И КорректировкаПоступленияТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаПоступленияТовары.Ссылка,
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления,
			|	КорректировкаПоступленияТовары.Ссылка,
			|	СУММА(КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения),
			|	СУММА(КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения)
			|ИЗ
			|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияТовары
			|ГДЕ
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления.Дата = &Ссылка
			|	И КорректировкаПоступленияТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаПоступленияТовары.Ссылка,
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления,
			|	КорректировкаПоступленияТовары.Ссылка,
			|	СУММА(КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения),
			|	СУММА(КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения)
			|ИЗ
			|	Документ.КорректировкаПоступления.Оборудование КАК КорректировкаПоступленияТовары
			|ГДЕ
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления.Дата = &Ссылка
			|	И КорректировкаПоступленияТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаПоступленияТовары.Ссылка,
			|	КорректировкаПоступленияТовары.Ссылка.ДокументПоступления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_КорректировкаПредв.ДокументПоступления КАК ДокументПТУ,
			|	ВТ_КорректировкаПредв.Ссылка КАК Документ,
			|	ВТ_КорректировкаПредв.Ссылка.Номер КАК НомерДокумента,
			|	НАЧАЛОПЕРИОДА(ВТ_КорректировкаПредв.Ссылка.Дата, ДЕНЬ) КАК ДатаДокумента,
			|	СУММА(ВТ_КорректировкаПредв.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВТ_КорректировкаПредв.Сумма) КАК СуммаДокумента,
			|	ВТ_КорректировкаПредв.ДокументПоступления.Контрагент,
			|	ВТ_КорректировкаПредв.ДокументПоступления.Организация,
			|	""КОРР"" КАК ВидДокумента,
			|	ВЫБОР
			|		КОГДА ВТ_КорректировкаПредв.Ссылка.НомерКорректировочнойСчетФактуры = """"
			|			ТОГДА ВТ_КорректировкаПредв.Ссылка.НомерВходящегоДокумента
			|		ИНАЧЕ ВТ_КорректировкаПредв.Ссылка.НомерКорректировочнойСчетФактуры
			|	КОНЕЦ КАК НомерВходящегоСчетаФактуры,
			|	ВЫБОР
			|		КОГДА ВТ_КорректировкаПредв.Ссылка.ДатаКорректировочнойСчетФактуры = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ВТ_КорректировкаПредв.Ссылка.ДатаВходящегоДокумента
			|		ИНАЧЕ ВТ_КорректировкаПредв.Ссылка.ДатаКорректировочнойСчетФактуры
			|	КОНЕЦ КАК ДатаВходящегоСчетаФактуры
			|ИЗ
			|	ВТ_КорректировкаПредв КАК ВТ_КорректировкаПредв
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_КорректировкаПредв.ДокументПоступления,
			|	ВТ_КорректировкаПредв.Ссылка,
			|	ВТ_КорректировкаПредв.Ссылка.Номер,
			|	ВТ_КорректировкаПредв.ДокументПоступления.Контрагент,
			|	ВТ_КорректировкаПредв.ДокументПоступления.Организация,
			|	НАЧАЛОПЕРИОДА(ВТ_КорректировкаПредв.Ссылка.Дата, ДЕНЬ),
			|	ВЫБОР
			|		КОГДА ВТ_КорректировкаПредв.Ссылка.НомерКорректировочнойСчетФактуры = """"
			|			ТОГДА ВТ_КорректировкаПредв.Ссылка.НомерВходящегоДокумента
			|		ИНАЧЕ ВТ_КорректировкаПредв.Ссылка.НомерКорректировочнойСчетФактуры
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ВТ_КорректировкаПредв.Ссылка.ДатаКорректировочнойСчетФактуры = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ВТ_КорректировкаПредв.Ссылка.ДатаВходящегоДокумента
			|		ИНАЧЕ ВТ_КорректировкаПредв.Ссылка.ДатаКорректировочнойСчетФактуры
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученный.Номер,
			|	СчетФактураПолученный.Дата,
			|	СчетФактураПолученный.НомерВходящегоДокумента,
			|	СчетФактураПолученный.ДатаВходящегоДокумента,
			|	СчетФактураПолученный.НомерИсправления,
			|	СчетФактураПолученный.ДатаИсправления,
			|	СчетФактураПолученный.КППКонтрагента
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &Ссылка
			|	И СчетФактураПолученный.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Ссылка", Объект);
			Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
			
			МассивРезультат = Запрос.ВыполнитьПакет();
			а = 0;		
			ТаблицаРеквизитов = МассивРезультат[0].Выгрузить();
			Если ТаблицаРеквизитов.Количество() > 0 Тогда
				Для каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
					СтруктураОбъекта.Fields.Вставить(Колонка.Имя, ТаблицаРеквизитов[0][Колонка.Имя]);
				КонецЦикла;	
			КонецЕсли;	
			
			ТаблицаТоваров = МассивРезультат[1].Выгрузить();
			ТаблицаУслугИМатериалов = МассивРезультат[2].Выгрузить();	
			ТаблицаОборудования = МассивРезультат[3].Выгрузить();  
			ТаблицаДопРасходов = МассивРезультат[4].Выгрузить();  
			ТаблицаКорректировки = МассивРезультат[6].Выгрузить();  
			ТаблицаСФ = МассивРезультат[7].Выгрузить();  
			
			Если ТаблицаСФ.Количество() > 0 Тогда
				СтрСФ = ТаблицаСФ[0];
				СтруктураОбъекта.Fields.НомерСФ = СтрСФ.НомерВходящегоДокумента;
				СтруктураОбъекта.Fields.ДатаСФ = СтрСФ.ДатаВходящегоДокумента;
				СтруктураОбъекта.Fields.НомерИспр = СтрСФ.НомерИсправления;
				СтруктураОбъекта.Fields.ДатаИспр = СтрСФ.ДатаИсправления;
				
				Если ЗначениеЗаполнено(СтрСФ.КППКонтрагента) = Истина Тогда
					СтруктураОбъекта.Fields.КонтрагентКПП = СтрСФ.КППКонтрагента;
				КонецЕсли;	
			КонецЕсли;	
			
			СтруктураТаблицОбъекта.ТаблицаТоваров = ТаблицаТоваров;
			СтруктураТаблицОбъекта.ТаблицаУслугИМатериалов = ТаблицаУслугИМатериалов;
			СтруктураТаблицОбъекта.ТаблицаОборудования = ТаблицаОборудования;			
			
			СуммаНДС  = ТаблицаТоваров.Итог("СуммаНДС") 
			+ ТаблицаУслугИМатериалов.Итог("СуммаНДС")
			+ ТаблицаОборудования.Итог("СуммаНДС")
			+ ТаблицаДопРасходов.Итог("СуммаНДС");
			
			СтруктураОбъекта.Fields.Вставить("СуммаНДС", СуммаНДС);	
			
			СуммаДокумента = СтруктураОбъекта.Fields.СуммаДокумента;
			СтруктураОбъекта.Fields.СуммаДокумента = СуммаДокумента 
			+ ТаблицаДопРасходов.Итог("СуммаДопРасходов");			
			
			Если ФайлЭтоСФ = Истина Тогда
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерСФ");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаСФ");
			Иначе
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерНакладной");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаНакладной");				
			КонецЕсли;	
			
			СоответсвиеДляОбъекта.Вставить("Номер исправления", "НомерИспр");
			СоответсвиеДляОбъекта.Вставить("Дата исправления", "ДатаИспр");
			
			СоответсвиеДляОбъекта.Вставить("Организация", "Организация");
			СоответсвиеДляОбъекта.Вставить("ИНН организации", "ОрганизацияИНН");
			
			СоответсвиеДляОбъекта.Вставить("Организация", "Организация");
			СоответсвиеДляОбъекта.Вставить("ИНН организации", "ОрганизацияИНН");
			СоответсвиеДляОбъекта.Вставить("Адрес организации", "АдресОрганизации");
			СоответсвиеДляОбъекта.Вставить("Контрагент", "Контрагент");
			СоответсвиеДляОбъекта.Вставить("ИНН контрагента", "КонтрагентИНН");
			СоответсвиеДляОбъекта.Вставить("КПП контрагента", "КонтрагентКПП");
			СоответсвиеДляОбъекта.Вставить("Адрес контрагента", "АдресКонтрагента");
			СоответсвиеДляОбъекта.Вставить("Склад", "Склад");
			СоответсвиеДляОбъекта.Вставить("Сумма документа", "СуммаДокумента");
			СоответсвиеДляОбъекта.Вставить("Сумма НДС Всего", "СуммаНДС");  			
			
			//ТЧ
			СоответсвиеДляОбъекта.Вставить("Номенклатура", "Номенклатура"); 			
			СоответсвиеДляОбъекта.Вставить("Единица измерения", "ЕдиницаИзмерения"); 
			СоответсвиеДляОбъекта.Вставить("Ставка НДС", "СтавкаНДС"); 
			СоответсвиеДляОбъекта.Вставить("Количество", "Количество"); 
			СоответсвиеДляОбъекта.Вставить("Цена", "Цена"); 
			СоответсвиеДляОбъекта.Вставить("Сумма без НДС", "Сумма"); 
			СоответсвиеДляОбъекта.Вставить("Сумма НДС", "СуммаНДС"); 
			СоответсвиеДляОбъекта.Вставить("Всего", "Всего"); 
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	РеализацияТоваровУслуг.Ссылка,
			|	РеализацияТоваровУслуг.ДатаИсходящегоДокумента КАК ДатаНакладной,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.ДатаИсходящегоСчетаФактуры = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА РеализацияТоваровУслуг.ДатаИсходящегоДокумента
			|		ИНАЧЕ РеализацияТоваровУслуг.ДатаИсходящегоСчетаФактуры
			|	КОНЕЦ КАК ДатаСФ,
			|	РеализацияТоваровУслуг.НомерИсходящегоДокумента КАК НомерНакладной,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.НомерИсходящегоСчетаФактуры = """"
			|			ТОГДА РеализацияТоваровУслуг.НомерИсходящегоДокумента
			|		ИНАЧЕ РеализацияТоваровУслуг.НомерИсходящегоСчетаФактуры
			|	КОНЕЦ КАК НомерСФ,
			|	РеализацияТоваровУслуг.Организация КАК Организация,
			|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
			|	РеализацияТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
			|	РеализацияТоваровУслуг.Контрагент.ИНН КАК КонтрагентИНН,
			|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, РеализацияТоваровУслуг.Контрагент.КПП) КАК КонтрагентКПП,
			|	ЕСТЬNULL(КонтактнаяИнформацияОрганизация.Представление, """") КАК АдресОрганизации,
			|	ЕСТЬNULL(КонтактнаяИнформацияКонтрагент.Представление, """") КАК АдресКонтрагента,
			|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
			|	РеализацияТоваровУслуг.Склад КАК Склад,
			|	0 КАК НомерИспр,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИспр,
			|	РеализацияТоваровУслуг.EDI_ТочкаДоставки.КППСторонняяРозница КАК КППСторонняяРозница 
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизация
			|		ПО РеализацияТоваровУслуг.Организация = КонтактнаяИнформацияОрганизация.Объект
			|			И (КонтактнаяИнформацияОрганизация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагент
			|		ПО РеализацияТоваровУслуг.Контрагент = КонтактнаяИнформацияКонтрагент.Объект
			|			И (КонтактнаяИнформацияКонтрагент.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО РеализацияТоваровУслуг.Ссылка = ЗначенияСвойствОбъектов.Объект
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КППКонтрагента))
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	РеализацияТоваровУслугТовары.Количество,
			|	РеализацияТоваровУслугТовары.Цена,
			|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
			|	РеализацияТоваровУслугТовары.СуммаНДС,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
			|			ТОГДА РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
			|			ТОГДА РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
			|	КОНЕЦ КАК Всего
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровУслуг.Количество,
			|	РеализацияТоваровУслуг.Цена,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
			|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
			|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
			|	КОНЕЦ КАК Сумма,
			|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
			|	РеализацияТоваровУслуг.СуммаНДС,
			|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
			|			ТОГДА РеализацияТоваровУслуг.Сумма + РеализацияТоваровУслуг.СуммаНДС
			|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
			|	КОНЕЦ КАК Всего
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Объект);
			Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
			
			МассивРезультат = Запрос.ВыполнитьПакет();
			а = 0;		
			ТаблицаРеквизитов = МассивРезультат[0].Выгрузить();
			Если ТаблицаРеквизитов.Количество() > 0 Тогда
				Для каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
					СтруктураОбъекта.Fields.Вставить(Колонка.Имя, ТаблицаРеквизитов[0][Колонка.Имя]);
				КонецЦикла;	
			КонецЕсли;	
			
			ТаблицаТоваров = МассивРезультат[1].Выгрузить();
			ТаблицаУслугИМатериалов = МассивРезультат[2].Выгрузить();	
			ТаблицаОборудования = МассивРезультат[2].Выгрузить();	
			ТаблицаОборудования.Очистить();
			
			Если ЗначениеЗаполнено(СтруктураОбъекта.Fields.КППСторонняяРозница) = Истина Тогда
				СтруктураОбъекта.Fields.КонтрагентКПП = СтруктураОбъекта.Fields.КППСторонняяРозница;
			КонецЕсли;
						
			СтруктураТаблицОбъекта.ТаблицаТоваров = ТаблицаТоваров;
			СтруктураТаблицОбъекта.ТаблицаУслугИМатериалов = ТаблицаУслугИМатериалов;
			СтруктураТаблицОбъекта.ТаблицаОборудования = ТаблицаОборудования;			
			
			СуммаНДС  = ТаблицаТоваров.Итог("СуммаНДС") 
			+ ТаблицаУслугИМатериалов.Итог("СуммаНДС");
			
			СтруктураОбъекта.Fields.Вставить("СуммаНДС", СуммаНДС);	
			
			СтруктураОбъекта.Fields.НомерСФ = СтрЗаменить(СтруктураОбъекта.Fields.НомерСФ, Символы.НПП, "");
			СтруктураОбъекта.Fields.НомерСФ = СтрЗаменить(СтруктураОбъекта.Fields.НомерСФ, " ", "");
			
			СтруктураОбъекта.Fields.НомерНакладной = СтрЗаменить(СтруктураОбъекта.Fields.НомерНакладной, Символы.НПП, "");
			СтруктураОбъекта.Fields.НомерНакладной = СтрЗаменить(СтруктураОбъекта.Fields.НомерНакладной, " ", "");
			
			СуммаДокумента = СтруктураОбъекта.Fields.СуммаДокумента;
			СтруктураОбъекта.Fields.СуммаДокумента = СуммаДокумента; 
						
			Если ФайлЭтоСФ = Истина Тогда
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерСФ");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаСФ");
			Иначе
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерНакладной");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаНакладной");				
			КонецЕсли;	
			
			СоответсвиеДляОбъекта.Вставить("Номер исправления", "НомерИспр");
			СоответсвиеДляОбъекта.Вставить("Дата исправления", "ДатаИспр");
			
			СоответсвиеДляОбъекта.Вставить("Организация", "Организация");
			СоответсвиеДляОбъекта.Вставить("ИНН организации", "ОрганизацияИНН");
			
			СоответсвиеДляОбъекта.Вставить("Организация", "Организация");
			СоответсвиеДляОбъекта.Вставить("ИНН организации", "ОрганизацияИНН");
			СоответсвиеДляОбъекта.Вставить("Адрес организации", "АдресОрганизации");
			СоответсвиеДляОбъекта.Вставить("Контрагент", "Контрагент");
			СоответсвиеДляОбъекта.Вставить("ИНН контрагента", "КонтрагентИНН");
			СоответсвиеДляОбъекта.Вставить("КПП контрагента", "КонтрагентКПП");
			СоответсвиеДляОбъекта.Вставить("Адрес контрагента", "АдресКонтрагента");
			СоответсвиеДляОбъекта.Вставить("Склад", "Склад");
			СоответсвиеДляОбъекта.Вставить("Сумма документа", "СуммаДокумента");
			СоответсвиеДляОбъекта.Вставить("Сумма НДС Всего", "СуммаНДС");  			
			
			//ТЧ
			СоответсвиеДляОбъекта.Вставить("Номенклатура", "Номенклатура"); 			
			СоответсвиеДляОбъекта.Вставить("Единица измерения", "ЕдиницаИзмерения"); 
			СоответсвиеДляОбъекта.Вставить("Ставка НДС", "СтавкаНДС"); 
			СоответсвиеДляОбъекта.Вставить("Количество", "Количество"); 
			СоответсвиеДляОбъекта.Вставить("Цена", "Цена"); 
			СоответсвиеДляОбъекта.Вставить("Сумма без НДС", "Сумма"); 
			СоответсвиеДляОбъекта.Вставить("Сумма НДС", "СуммаНДС"); 
			СоответсвиеДляОбъекта.Вставить("Всего", "Всего"); 
			
			СписокНекритичныхПроверокТЧ.Добавить("КПП контрагента");
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПоступлениеДопРасходов.Ссылка,
			|	ПоступлениеДопРасходов.ДатаВходящегоДокумента КАК ДатаНакладной,
			|	ПоступлениеДопРасходов.ДатаВходящегоСчетаФактуры КАК ДатаСФ,
			|	ПоступлениеДопРасходов.НомерВходящегоДокумента КАК НомерНакладной,
			|	ПоступлениеДопРасходов.НомерВходящегоСчетаФактуры КАК НомерСФ,
			|	ПоступлениеДопРасходов.Организация КАК Организация,
			|	ПоступлениеДопРасходов.Контрагент КАК Контрагент,
			|	ПоступлениеДопРасходов.Организация.ИНН КАК ОрганизацияИНН,
			|	ПоступлениеДопРасходов.Контрагент.ИНН КАК КонтрагентИНН,
			|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ПоступлениеДопРасходов.Контрагент.КПП) КАК КонтрагентКПП,
			|	ЕСТЬNULL(КонтактнаяИнформацияОрганизация.Представление, """") КАК АдресОрганизации,
			|	ЕСТЬNULL(КонтактнаяИнформацияКонтрагент.Представление, """") КАК АдресКонтрагента,
			|	ПоступлениеДопРасходов.СуммаДокумента КАК СуммаДокумента,
			|	ПоступлениеДопРасходов.СуммаНДС КАК СуммаНДС,
			|	0 КАК НомерИспр,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИспр
			|ИЗ
			|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизация
			|		ПО ПоступлениеДопРасходов.Организация = КонтактнаяИнформацияОрганизация.Объект
			|			И (КонтактнаяИнформацияОрганизация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагент
			|		ПО ПоступлениеДопРасходов.Контрагент = КонтактнаяИнформацияКонтрагент.Объект
			|			И (КонтактнаяИнформацияКонтрагент.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО ПоступлениеДопРасходов.Ссылка = ЗначенияСвойствОбъектов.Объект
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КППКонтрагента))
			|ГДЕ
			|	ПоступлениеДопРасходов.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПоступлениеТоваровУслугТовары.Количество,
			|	ПоступлениеТоваровУслугТовары.Цена,
			|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
			|	ПоступлениеТоваровУслугТовары.СуммаНДС,
			|	ПоступлениеТоваровУслугТовары.Сумма,
			|	ПоступлениеТоваровУслугТовары.Сумма + ПоступлениеТоваровУслугТовары.СуммаНДС КАК Всего
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|ГДЕ
			|	ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
			|	ПоступлениеТоваровУслугУслуги.Количество,
			|	ПоступлениеТоваровУслугУслуги.Цена,
			|	ПоступлениеТоваровУслугУслуги.Сумма,
			|	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
			|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
			|	ПоступлениеТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПоступлениеТоваровУслугУслуги.Сумма + ПоступлениеТоваровУслугУслуги.СуммаНДС КАК Всего
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
			|ГДЕ
			|	ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугОборудование.Номенклатура КАК Номенклатура,
			|	СУММА(ПоступлениеТоваровУслугОборудование.Сумма) КАК Сумма,
			|	СУММА(1) КАК Количество,
			|	СУММА(ПоступлениеТоваровУслугОборудование.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ПоступлениеТоваровУслугОборудование.Сумма + ПоступлениеТоваровУслугОборудование.СуммаНДС) КАК Всего,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
			|ГДЕ
			|	ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеТоваровУслугОборудование.Номенклатура,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура.БазоваяЕдиницаИзмерения,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученный.Номер,
			|	СчетФактураПолученный.Дата,
			|	СчетФактураПолученный.НомерВходящегоДокумента,
			|	СчетФактураПолученный.ДатаВходящегоДокумента,
			|	СчетФактураПолученный.НомерИсправления,
			|	СчетФактураПолученный.ДатаИсправления,
			|	СчетФактураПолученный.КППКонтрагента
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &Ссылка
			|	И СчетФактураПолученный.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеДопРасходовТовары.Ссылка,
			|	СУММА(ВЫБОР
			|			КОГДА ПоступлениеДопРасходовТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
			|				ТОГДА ПоступлениеДопРасходовТовары.СуммаРаспределено + ПоступлениеДопРасходовТовары.СуммаНДСРаспределено
			|			ИНАЧЕ ПоступлениеДопРасходовТовары.СуммаРаспределено + ПоступлениеДопРасходовТовары.СуммаНДСРаспределено
			|		КОНЕЦ) КАК СуммаДопРасходов,
			|	СУММА(ПоступлениеДопРасходовТовары.СуммаНДСРаспределено) КАК СуммаНДСРаспределено,
			|	СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК СуммаНДС
			|ИЗ
			|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
			|ГДЕ
			|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка
			|	И ПоступлениеДопРасходовТовары.Партия.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеДопРасходовТовары.Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Объект);
			
			МассивРезультат = Запрос.ВыполнитьПакет();
			а = 0;		
			ТаблицаРеквизитов = МассивРезультат[0].Выгрузить();
			Если ТаблицаРеквизитов.Количество() > 0 Тогда
				Для каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
					СтруктураОбъекта.Fields.Вставить(Колонка.Имя, ТаблицаРеквизитов[0][Колонка.Имя]);
				КонецЦикла;	
			КонецЕсли;	
			
			ТаблицаТоваров = МассивРезультат[1].Выгрузить();
			ТаблицаУслугИМатериалов = МассивРезультат[2].Выгрузить();	
			ТаблицаОборудования = МассивРезультат[3].Выгрузить();  
			
			ТаблицаСФ = МассивРезультат[4].Выгрузить();  
			ТаблицаНДС = МассивРезультат[5].Выгрузить();  
			
			Если ТаблицаСФ.Количество() > 0 Тогда
				СтрСФ = ТаблицаСФ[0];
				СтруктураОбъекта.Fields.НомерСФ = СтрСФ.НомерВходящегоДокумента;
				СтруктураОбъекта.Fields.ДатаСФ = СтрСФ.ДатаВходящегоДокумента;
				СтруктураОбъекта.Fields.НомерИспр = СтрСФ.НомерИсправления;
				СтруктураОбъекта.Fields.ДатаИспр = СтрСФ.ДатаИсправления;
				Если ЗначениеЗаполнено(СтрСФ.КППКонтрагента) = Истина Тогда
					СтруктураОбъекта.Fields.КонтрагентКПП = СтрСФ.КППКонтрагента;
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураТаблицОбъекта.ТаблицаТоваров = ТаблицаТоваров;
			СтруктураТаблицОбъекта.ТаблицаУслугИМатериалов = ТаблицаУслугИМатериалов;
			СтруктураТаблицОбъекта.ТаблицаОборудования = ТаблицаОборудования;			
			
			СуммаНДС  = ТаблицаНДС.Итог("СуммаНДС");
			
			Если СуммаНДС <> 0 Тогда			
				СтруктураОбъекта.Fields.СуммаНДС = СуммаНДС;	
			КонецЕсли;	
			
			Если ФайлЭтоСФ = Истина Тогда
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерСФ");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаСФ");
			Иначе
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерНакладной");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаНакладной");				
			КонецЕсли;	
			
			СоответсвиеДляОбъекта.Вставить("Номер исправления", "НомерИспр");
			СоответсвиеДляОбъекта.Вставить("Дата исправления", "ДатаИспр");
			
			СоответсвиеДляОбъекта.Вставить("Организация", "Организация");
			СоответсвиеДляОбъекта.Вставить("ИНН организации", "ОрганизацияИНН");
			СоответсвиеДляОбъекта.Вставить("Адрес организации", "АдресОрганизации");
			СоответсвиеДляОбъекта.Вставить("Контрагент", "Контрагент");
			СоответсвиеДляОбъекта.Вставить("ИНН контрагента", "КонтрагентИНН");
			СоответсвиеДляОбъекта.Вставить("КПП контрагента", "КонтрагентКПП");
			СоответсвиеДляОбъекта.Вставить("Адрес контрагента", "АдресКонтрагента");
			СоответсвиеДляОбъекта.Вставить("Склад", "Склад");
			СоответсвиеДляОбъекта.Вставить("Сумма документа", "СуммаДокумента");
			СоответсвиеДляОбъекта.Вставить("Сумма НДС Всего", "СуммаНДС");  			
			
			//ТЧ
			//СоответсвиеДляОбъекта.Вставить("Номенклатура", "Номенклатура"); 			
			//СоответсвиеДляОбъекта.Вставить("Единица измерения", "ЕдиницаИзмерения"); 
			//СоответсвиеДляОбъекта.Вставить("Ставка НДС", "СтавкаНДС"); 
			//СоответсвиеДляОбъекта.Вставить("Количество", "Количество"); 
			//СоответсвиеДляОбъекта.Вставить("Цена", "Цена"); 
			//СоответсвиеДляОбъекта.Вставить("Сумма без НДС", "Сумма"); 
			//СоответсвиеДляОбъекта.Вставить("Сумма НДС", "СуммаНДС"); 
			//СоответсвиеДляОбъекта.Вставить("Всего", "Всего"); 
			СписокПроверокТЧ = Новый СписокЗначений;
			
			//СписокПроверокТЧ.Добавить("Номенклатура"); 
			//СписокПроверокТЧ.Добавить("Единица измерения"); 
			//СписокПроверокТЧ.Добавить("Ставка НДС"); 
			//СписокПроверокТЧ.Добавить("Количество"); 
			//СписокПроверокТЧ.Добавить("Цена");
			//СписокПроверокТЧ.Добавить("Сумма без НДС");
			//СписокПроверокТЧ.Добавить("Сумма НДС");
			//СписокПроверокТЧ.Добавить("Всего");	
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КорректировкаПоступления.Ссылка,
			|	КорректировкаПоступления.ДатаВходящегоДокумента КАК ДатаНакладной,
			|	КорректировкаПоступления.ДатаКорректировочнойСчетФактуры КАК ДатаСФ,
			|	КорректировкаПоступления.НомерВходящегоДокумента КАК НомерНакладной,
			|	КорректировкаПоступления.НомерКорректировочнойСчетФактуры КАК НомерСФ,
			|	КорректировкаПоступления.Организация КАК Организация,
			|	КорректировкаПоступления.Контрагент КАК Контрагент,
			|	КорректировкаПоступления.Организация.ИНН КАК ОрганизацияИНН,
			|	КорректировкаПоступления.Контрагент.ИНН КАК КонтрагентИНН,
			|	КорректировкаПоступления.Контрагент.КПП КАК КонтрагентКПП,
			|	ЕСТЬNULL(КонтактнаяИнформацияОрганизация.Представление, """""""") КАК АдресОрганизации,
			|	ЕСТЬNULL(КонтактнаяИнформацияКонтрагент.Представление, """""""") КАК АдресКонтрагента,
			|	КорректировкаПоступления.СуммаДокумента КАК СуммаДокумента,
			|	0 КАК СуммаНДС,
			|	0 КАК НомерИспр,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИспр
			|ИЗ
			|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизация
			|		ПО КорректировкаПоступления.Организация = КонтактнаяИнформацияОрганизация.Объект
			|			И (КонтактнаяИнформацияОрганизация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагент
			|		ПО КорректировкаПоступления.Контрагент = КонтактнаяИнформацияКонтрагент.Объект
			|			И (КонтактнаяИнформацияКонтрагент.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
			|ГДЕ
			|	КорректировкаПоступления.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
			|	КорректировкаПоступленияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	КорректировкаПоступленияТовары.Количество,
			|	КорректировкаПоступленияТовары.Цена,
			|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
			|	КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения КАК СуммаНДС,
			|	КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения КАК Сумма,
			|	КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС КАК Всего
			|ИЗ
			|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
			|ГДЕ
			|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаПоступленияУслуги.Номенклатура КАК Номенклатура,
			|	КорректировкаПоступленияУслуги.Количество,
			|	КорректировкаПоступленияУслуги.Цена,
			|	КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения КАК Сумма,
			|	КорректировкаПоступленияУслуги.СтавкаНДС КАК СтавкаНДС,
			|	КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения КАК СуммаНДС,
			|	КорректировкаПоступленияУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС КАК Всего
			|ИЗ
			|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
			|ГДЕ
			|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаПоступленияОборудование.Номенклатура КАК Номенклатура,
			|	СУММА(КорректировкаПоступленияОборудование.Сумма - КорректировкаПоступленияОборудование.СуммаДоИзменения) КАК Сумма,
			|	СУММА(1) КАК Количество,
			|	СУММА(КорректировкаПоступленияОборудование.СуммаНДС - КорректировкаПоступленияОборудование.СуммаНДСДоИзменения) КАК СуммаНДС,
			|	СУММА(КорректировкаПоступленияОборудование.Сумма + КорректировкаПоступленияОборудование.СуммаНДС) КАК Всего,
			|	КорректировкаПоступленияОборудование.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	КорректировкаПоступленияОборудование.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.КорректировкаПоступления.Оборудование КАК КорректировкаПоступленияОборудование
			|ГДЕ
			|	КорректировкаПоступленияОборудование.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаПоступленияОборудование.Номенклатура,
			|	КорректировкаПоступленияОборудование.Номенклатура.БазоваяЕдиницаИзмерения,
			|	КорректировкаПоступленияОборудование.СтавкаНДС";
			
			Запрос.УстановитьПараметр("Ссылка", Объект);
			
			МассивРезультат = Запрос.ВыполнитьПакет();
			а = 0;		
			ТаблицаРеквизитов = МассивРезультат[0].Выгрузить();
			Если ТаблицаРеквизитов.Количество() > 0 Тогда
				Для каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
					СтруктураОбъекта.Fields.Вставить(Колонка.Имя, ТаблицаРеквизитов[0][Колонка.Имя]);
				КонецЦикла;	
			КонецЕсли;	
			
			ТаблицаТоваров = МассивРезультат[1].Выгрузить();
			ТаблицаУслугИМатериалов = МассивРезультат[2].Выгрузить();	
			ТаблицаОборудования = МассивРезультат[3].Выгрузить();  
			
			СтруктураТаблицОбъекта.ТаблицаТоваров = ТаблицаТоваров;
			СтруктураТаблицОбъекта.ТаблицаУслугИМатериалов = ТаблицаУслугИМатериалов;
			СтруктураТаблицОбъекта.ТаблицаОборудования = ТаблицаОборудования;			
			
			СуммаНДС  = ТаблицаТоваров.Итог("СуммаНДС") 
			+ ТаблицаУслугИМатериалов.Итог("СуммаНДС")
			+ ТаблицаОборудования.Итог("СуммаНДС");
			
			СтруктураОбъекта.Fields.СуммаНДС =  СуммаНДС;
			
			Сумма  = ТаблицаТоваров.Итог("Сумма") 
			+ ТаблицаУслугИМатериалов.Итог("Сумма")
			+ ТаблицаОборудования.Итог("Сумма");
			
			СтруктураОбъекта.Fields.СуммаДокумента =  Сумма;
			
			
			Если ФайлЭтоСФ = Истина Тогда
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерСФ");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаСФ");
			Иначе
				СоответсвиеДляОбъекта.Вставить("Номер", "НомерНакладной");
				СоответсвиеДляОбъекта.Вставить("Дата", "ДатаНакладной");												
			КонецЕсли;	
			
			СоответсвиеДляОбъекта.Вставить("Номер исправления", "НомерИспр");
			СоответсвиеДляОбъекта.Вставить("Дата исправления", "ДатаИспр");
			
			СоответсвиеДляОбъекта.Вставить("Организация", "Организация");
			СоответсвиеДляОбъекта.Вставить("ИНН организации", "ОрганизацияИНН");
			СоответсвиеДляОбъекта.Вставить("Адрес организации", "АдресОрганизации");
			СоответсвиеДляОбъекта.Вставить("Контрагент", "Контрагент");
			СоответсвиеДляОбъекта.Вставить("ИНН контрагента", "КонтрагентИНН");
			СоответсвиеДляОбъекта.Вставить("КПП контрагента", "КонтрагентКПП");
			СоответсвиеДляОбъекта.Вставить("Адрес контрагента", "АдресКонтрагента");
			СоответсвиеДляОбъекта.Вставить("Склад", "Склад");
			СоответсвиеДляОбъекта.Вставить("Сумма документа", "СуммаДокумента");
			СоответсвиеДляОбъекта.Вставить("Сумма НДС Всего", "СуммаНДС");  			
			
			//ТЧ
			
			СписокПроверокТЧ = Новый СписокЗначений;						
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСравнения = Новый ТаблицаЗначений;
	ТаблицаСравнения.Колонки.Добавить("Проверка");
	ТаблицаСравнения.Колонки.Добавить("ЗначениеВОбъекте");
	ТаблицаСравнения.Колонки.Добавить("ЗначениеВФайле");
	ТаблицаСравнения.Колонки.Добавить("Результат");
	
	Для каждого Проверка Из СписокПроверокШапки Цикл
		НСтрСравнения = ТаблицаСравнения.Добавить();
		НСтрСравнения.Проверка = Проверка.Значение;
		
		Если ЗначениеЗаполнено(СоответсвиеДляФайла.Получить(Проверка.Значение)) = Истина Тогда		
			СтруктураФайла.Fields.Свойство(СоответсвиеДляФайла.Получить(Проверка.Значение), НСтрСравнения.ЗначениеВФайле);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СоответсвиеДляОбъекта.Получить(Проверка.Значение)) = Истина Тогда		
			СтруктураОбъекта.Fields.Свойство(СоответсвиеДляОбъекта.Получить(Проверка.Значение), НСтрСравнения.ЗначениеВОбъекте);		
		КонецЕсли;
		
		Если СписокНекритичныхПроверокТЧ.НайтиПоЗначению(Проверка.Значение) = Неопределено Тогда 			
			
			Если ТипЗнч(НСтрСравнения.ЗначениеВОбъекте) = Тип("Строка") Тогда			
				Если XMLСтрока(СокрЛП(ПреобразоватьЛатинскийТекстВРусский(НСтрСравнения.ЗначениеВФайле))) = XMLСтрока(СокрЛП(ПреобразоватьЛатинскийТекстВРусский(НСтрСравнения.ЗначениеВОбъекте))) Тогда
					НСтрСравнения.Результат = Истина;	
				КонецЕсли;	
			Иначе
				Если XMLСтрока(НСтрСравнения.ЗначениеВФайле) = XMLСтрока(НСтрСравнения.ЗначениеВОбъекте) Тогда
					НСтрСравнения.Результат = Истина;	
				КонецЕсли;			
			КонецЕсли;	
		Иначе
			НСтрСравнения.Результат = Истина;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НСтрСравнения.ЗначениеВФайле) = Ложь Тогда
			НСтрСравнения.ЗначениеВФайле = "-";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НСтрСравнения.ЗначениеВОбъекте) = Ложь Тогда
			НСтрСравнения.ЗначениеВОбъекте = "-";
		КонецЕсли;
	КонецЦикла;	
	
	
	Для каждого СтрокаСтрукутры Из СтруктураТаблицОбъекта Цикл
		ИмяТаблицы = СтрокаСтрукутры.Ключ;
		
		ТаблицаОбъекта = СтрокаСтрукутры.Значение;		
		
		ТаблицаФайла = Неопределено;
		СтруктураТаблицФайла.Свойство(ИмяТаблицы, ТаблицаФайла);
		
		Если ТаблицаФайла = Неопределено Тогда
			ТаблицаФайла = Новый ТаблицаЗначений;		
		КонецЕсли;	
		
		Если ТаблицаОбъекта = Неопределено Тогда
			ТаблицаОбъекта = Новый ТаблицаЗначений;		
		КонецЕсли;	
		
		ЧислоСтрок = Макс(ТаблицаОбъекта.Количество(), ТаблицаФайла.Количество());
		
		Для а = 1 По ЧислоСтрок Цикл
			Если (а-1) < ТаблицаОбъекта.Количество() Тогда
				СтрокаОбъекта = ТаблицаОбъекта.Получить(а - 1);
			Иначе
				СтрокаОбъекта = Неопределено;
			КонецЕсли;	
			
			Если (а-1) < ТаблицаФайла.Количество() Тогда
				СтрокаФайла =  ТаблицаФайла.Получить(а - 1);
			Иначе
				СтрокаФайла = Неопределено;
			КонецЕсли;	
			
			Для каждого Проверка Из СписокПроверокТЧ Цикл
				НСтрСравнения = ТаблицаСравнения.Добавить();
				НСтрСравнения.Проверка = ИмяТаблицы + " Строка: " + Строка(а) + " " + Проверка.Значение;
				
				Если ЗначениеЗаполнено(СоответсвиеДляФайла.Получить(Проверка.Значение)) = Истина И ЗначениеЗаполнено(СтрокаФайла) = Истина Тогда		
					Если ТаблицаФайла.Колонки.Найти(СоответсвиеДляФайла.Получить(Проверка.Значение)) <> Неопределено Тогда
						НСтрСравнения.ЗначениеВФайле = СтрокаФайла[СоответсвиеДляФайла.Получить(Проверка.Значение)];
					КонецЕсли;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СоответсвиеДляОбъекта.Получить(Проверка.Значение)) = Истина И ЗначениеЗаполнено(СтрокаОбъекта) = Истина Тогда		
					Если ТаблицаОбъекта.Колонки.Найти(СоответсвиеДляОбъекта.Получить(Проверка.Значение)) <> Неопределено Тогда
						НСтрСравнения.ЗначениеВОбъекте = СтрокаОбъекта[СоответсвиеДляОбъекта.Получить(Проверка.Значение)];
					КонецЕсли;
				КонецЕсли;			
				
				//Если СписокНекритичныхПроверокТЧ.НайтиПоЗначению(Проверка.Значение) = Неопределено Тогда
				//	Если XMLСтрока(НСтрСравнения.ЗначениеВФайле) = XMLСтрока(НСтрСравнения.ЗначениеВОбъекте) Тогда
				//		НСтрСравнения.Результат = Истина;	
				//	КонецЕсли;
				//Иначе
				НСтрСравнения.Результат = Истина;						
				//КонецЕсли;	
			КонецЦикла;		
		КонецЦикла;	
	КонецЦикла;
	
	
	//Сообщить(ТаблицаСравнения);
	
	
	
	Запись = РегистрыСведений.РезультатСравненияФайлаСОбъектом.СоздатьМенеджерЗаписи();
	Запись.Файл = файл;
	Запись.ОбъектСравнения = Объект;
	Запись.Обработан = Истина;
	
	Фильтр = Новый Структура("Результат", Истина);
	ТЗВрем = ТаблицаСравнения.Скопировать(Фильтр);
	Если ТЗВрем.Количество() = ТаблицаСравнения.Количество() Тогда
		Запись.ЕстьОшибки = Ложь;
	Иначе
		Запись.ЕстьОшибки = Истина;
	КонецЕсли;	
	
	Запись.РезультатСравнения = ЗначениеВСтрокуВнутр(ТаблицаСравнения);
	Запись.Пересчитать = Ложь;
	
	СтруктураВозврата = Новый Структура("РезультатСравнения, ЕстьОшибки", Запись.РезультатСравнения, Запись.ЕстьОшибки);
	
	Запись.Записать();
	
	Возврат СтруктураВозврата;
	
	
КонецФункции

Функция ПолучитьТипФайла(Знач Файл) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК Файл_Родитель
	|ПОМЕСТИТЬ ВТ_Все_ВерифицированныеФайлы
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель)
	|	И ЗначенияСвойствОбъектов.Объект = &ФайлРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Вер_Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК ТипФайла,
	|	ВТ_Все_ВерифицированныеФайлы.Файл_Родитель
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Все_ВерифицированныеФайлы КАК ВТ_Все_ВерифицированныеФайлы
	|		ПО ЗначенияСвойствОбъектов.Объект = ВТ_Все_ВерифицированныеФайлы.Файл_Родитель
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Тип)";	
	
	Запрос.УстановитьПараметр("ФайлРодитель", Файл);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() = 0 Тогда
		Возврат "Счет_Фактура";
	Иначе
		Возврат ТЗ[0].ТипФайла;
	КонецЕсли;	
	
КонецФункции	


//Автоприкрепление
Функция СоздатьПрообразВерификации(Знач СтруктураXML, Знач ФайлРодитель, Знач ОбъектСравнения, Знач ФайлОригинал) 
	
	
	//Пытаемся определить организация, контрагента, номер документа дату и сумму. 
	//Если все 5 нашли - ищем документ к которому можно прикрепить 
	//если нашли - сохраняем предварительно верифицированный файл. и прикрепляем его к документу. 
	
	СписокОбязательныхРеквизитов = Новый СписокЗначений;	
	СписокОбязательныхРеквизитов.Добавить("Заказчик");
	СписокОбязательныхРеквизитов.Добавить("Поставщик");
	СписокОбязательныхРеквизитов.Добавить("Номер");
	СписокОбязательныхРеквизитов.Добавить("Дата");
	СписокОбязательныхРеквизитов.Добавить("Всего");
	
	СоответсвиеСвойств = Новый Соответствие;
	СоответсвиеСвойств.Вставить("ИННПоставщика", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_ИНН);
	СоответсвиеСвойств.Вставить("Номер", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Номер);
	СоответсвиеСвойств.Вставить("Дата", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Дата);
	СоответсвиеСвойств.Вставить("Всего", ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_СФ_Сумма);
	
	
	
	ДанныеШапки = СтруктураXML.Fields;
	
	Fields = Новый Структура;
	Tables = Новый ТаблицаЗначений;
	
	ВерифицированнаяСтруктура = Новый Структура("Fields, Tables", Fields, Tables);	
	
	
	ТипДокумента = "Неизвестный тип";
	СтруктураXML.Свойство("document_type", ТипДокумента); 
	ЭтоСФ = Ложь;
	
	ВерифицированнаяСтруктура.Fields.Вставить("document_type", ТипДокумента);
	
	
	Если НРег(ТипДокумента) = НРег("Счет_фактура") Или НРег(ТипДокумента) = НРег("Счет-фактура") Или НРег(ТипДокумента) = НРег("Универсальный передаточный документ") Тогда
		ЭтоСФ = Истина;
	КонецЕсли;
	
	//Организация
	ОрганизацияИмя = ПолучитьРеквизитПоКлючу(ДанныеШапки, "Заказчик");
	ОрганизацияИНН = ПолучитьРеквизитПоКлючу(ДанныеШапки, "ИННЗаказчика");
	
	ОрганизацияИНН = УбратьЛишниеСимволыВИНН(ОрганизацияИНН);      		
	Организация = НайтиОрганизацию(ОрганизацияИмя, ОрганизацияИНН);
	
	ВерифицированнаяСтруктура.Fields.Вставить("Заказчик", Организация);
	ВерифицированнаяСтруктура.Fields.Вставить("ИННЗаказчика", ОрганизацияИНН);
	
	Если ЗначениеЗаполнено(Организация) Тогда		
		АдресОрганизации = ПолучитьАдресИзБазы(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Если ЗначениеЗаполнено(АдресОрганизации) Тогда
			ВерифицированнаяСтруктура.Fields.Вставить("АдресЗаказчика", АдресОрганизации);
		КонецЕсли;	
	КонецЕсли;
	
	//Номер и Дата
	Номер = ПолучитьРеквизитПоКлючу(ДанныеШапки, "Номер");
	Дата = ПолучитьРеквизитПоКлючу(ДанныеШапки, "Дата");
	Дата = Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьДатуИзПроизвольнойСтроки(Дата);
	
	ВерифицированнаяСтруктура.Fields.Вставить("Номер", Номер);
	ВерифицированнаяСтруктура.Fields.Вставить("Дата", Дата);
	
	//Контрагент
	КонтрагентИмя = ПолучитьРеквизитПоКлючу(ДанныеШапки, "Поставщик");
	КонтрагентИНН = ПолучитьРеквизитПоКлючу(ДанныеШапки, "ИННПоставщика");
	КонтрагентКПП = ПолучитьРеквизитПоКлючу(ДанныеШапки, "КПППоставщика");
	
	КонтрагентИНН = УбратьЛишниеСимволыВИНН(КонтрагентИНН);   
	КонтрагентКПП = УбратьЛишниеСимволыВИНН(КонтрагентКПП);  
	
	Контрагент = НайтиКонтрагента(КонтрагентИмя, КонтрагентИНН, КонтрагентКПП);
	
	
	ВерифицированнаяСтруктура.Fields.Вставить("Поставщик", Контрагент);	
	ВерифицированнаяСтруктура.Fields.Вставить("ИННПоставщика", КонтрагентИНН);	
	ВерифицированнаяСтруктура.Fields.Вставить("КПППоставщика", КонтрагентКПП);	
	
	Если ЗначениеЗаполнено(Контрагент) Тогда	
		АдресКонтрагента = ПолучитьАдресИзБазы(Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Если ЗначениеЗаполнено(АдресКонтрагента) Тогда
			ВерифицированнаяСтруктура.Fields.Вставить("АдресПоставщика", АдресКонтрагента);
		КонецЕсли;
	КонецЕсли;    
	
	//Сумма
	СуммаСтрокой = ПолучитьРеквизитПоКлючу(ДанныеШапки, "ОбщаяСтоимость");
	Сумма = ПарсингЧисла(СуммаСтрокой);
	
	ВерифицированнаяСтруктура.Fields.Вставить("Всего", Сумма);	
	
	СуммаСтрокойНДС = ПолучитьРеквизитПоКлючу(ДанныеШапки, "СуммаНалога");
	СуммаНДС = ПарсингЧисла(СуммаСтрокойНДС);
	
	ВерифицированнаяСтруктура.Fields.Вставить("ВсегоНДС", СуммаНДС);	
	
	КлючевыеРеквизитыЗаполнены = Истина;
	
	
	НашлиДокумент = Ложь;
	НайденныеДокументы = Новый Массив;
	ДокументыДляПрикрепления = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектСравнения) = Истина Тогда
		ДокументыДляПрикрепления.Добавить(ОбъектСравнения);
		КлючевыеРеквизитыЗаполнены = Ложь;
		
	Иначе		
		Для каждого ЗначСписка Из СписокОбязательныхРеквизитов Цикл
			Если ЗначениеЗаполнено(ВерифицированнаяСтруктура.Fields[ЗначСписка.Значение]) = Ложь Тогда
				КлючевыеРеквизитыЗаполнены = Ложь;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	
	//Запись для отчета (В свойства файла)	
	Для каждого ЗначСоотв Из СоответсвиеСвойств Цикл
		Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект =  ФайлОригинал;
		Запись.Свойство = ЗначСоотв.Значение;
		
		ВерифицированнаяСтруктура.Fields.Свойство(ЗначСоотв.Ключ, Запись.Значение);
		
		Запись.Записать();    		
	КонецЦикла;	
	
	
	//Создание верифицированной струкутры
	ТабличнаяЧасть = СтруктураXML.Tables;
	ПреобразоватьИсходнуюТаблицу(ТабличнаяЧасть);
	
	НТЗ = Новый ТаблицаЗначений;
	НТЗ.Колонки.Добавить("Исходная");
	НТЗ.Колонки.Добавить("НомерСтроки");
	НТЗ.Колонки.Добавить("Пометка");
	НТЗ.Колонки.Добавить("ТипДокумента");
	НТЗ.Колонки.Добавить("ТипНоменклатуры");
	НТЗ.Колонки.Добавить("Номенклатура");
	НТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	НТЗ.Колонки.Добавить("Количество");
	НТЗ.Колонки.Добавить("Цена");
	НТЗ.Колонки.Добавить("ЦенаСНДС");
	НТЗ.Колонки.Добавить("Сумма");
	НТЗ.Колонки.Добавить("СтавкаНДС");
	НТЗ.Колонки.Добавить("СуммаНДС");
	НТЗ.Колонки.Добавить("Всего");
	
	
	СоответсвиеДляОбъекта = Новый Соответствие;
	СоответсвиеДляОбъекта.Вставить("Номенклатура", "description"); 
	СоответсвиеДляОбъекта.Вставить("ЕдиницаИзмерения", "ed"); 	
	СоответсвиеДляОбъекта.Вставить("Количество", "quantity"); 
	СоответсвиеДляОбъекта.Вставить("СтавкаНДС", "stavka"); 
	СоответсвиеДляОбъекта.Вставить("Цена", "price"); 
	СоответсвиеДляОбъекта.Вставить("Сумма", "cost"); 
	СоответсвиеДляОбъекта.Вставить("СуммаНДС", "nalogsum"); 
	СоответсвиеДляОбъекта.Вставить("Всего", "sumnds");
	
	а = 1;
	Для каждого Стр Из ТабличнаяЧасть Цикл
		НСтр = НТЗ.Добавить();
		НСтр.Исходная = Ложь;
		НСтр.НомерСтроки = а;
		а = а + 1;
		НСтр.ТипДокумента = "ПТУ";
		НСтр.ТипНоменклатуры = "Материал";
		
		Для каждого ЗначСоответствия Из СоответсвиеДляОбъекта Цикл
			Если ТабличнаяЧасть.Колонки.Найти(ЗначСоответствия.Значение) <> Неопределено Тогда
				НСтр[ЗначСоответствия.Ключ] = Стр[ЗначСоответствия.Значение];
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	ВерифицированнаяСтруктура.Tables = НТЗ; 	
	
	//Проверка по алгоритмам для выбора суммы
	//Анализируем 3 колонки СуммаБезНДС, СуммаНДС и ВСЕГО в шапке и в подвале
	//также сравниваем с шапкой
	
	
	
	
	//Сохранение автоверификации
	ФайлXMLВер = СохранениеВерификации(ВерифицированнаяСтруктура, ФайлРодитель); 	
	Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(ФайлXMLВер, ФайлРодитель);
	
	
	
	Если КлючевыеРеквизитыЗаполнены = Истина Тогда
		//++ АК luza 10.01.2018
		// изменил алгоритм поиска
		//Закомментировал 		
		////Поиск существующих документов
		////1 - ПТУ (совпадают все обязатльные реквизиты)
		////2 - ПДР (совпадают все обязатльные реквизиты)
		////3 - Комплект ПТУ + ПДР (совпадают Орг, Контр, Номер, Дата) и сумма у 2-х документов
		
		
		//-- АК luza 10.01.2018
		
		//++ АК luza 10.01.2018
		//надо сделать по приоритетам
		//Обязательные реквизиты: Контрагент и Организация
		//затем
		//Фильтры по суммам
		//а. Сумма + Сумма. доп
		//б. Сумма
		
		//Фильтры по номерам
		//1. поиск по номеру СФ и дате СФ
		//2. поиск по номеру и дате вх. документа
		//3. Без номеров, но в привязке к дате документа
		
		//и искать в комбинации а1, а2, б1, б2, а3, б3 если нашел и у документа не прикреплен скан - прикрепляем
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПоступлениеДопРасходовТовары.Партия,
		|	СУММА(ВЫБОР
		|			КОГДА ПоступлениеДопРасходовТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
		|				ТОГДА ПоступлениеДопРасходовТовары.СуммаРаспределено + ПоступлениеДопРасходовТовары.СуммаНДСРаспределено
		|			ИНАЧЕ ПоступлениеДопРасходовТовары.СуммаРаспределено + ПоступлениеДопРасходовТовары.СуммаНДСРаспределено
		|		КОНЕЦ) КАК СуммаДопРасходов,
		|	СУММА(ПоступлениеДопРасходовТовары.СуммаНДСРаспределено) КАК СуммаНДСРаспределено
		|ПОМЕСТИТЬ ВТ_ПДР
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|ГДЕ
		|	ПоступлениеДопРасходовТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПоступлениеДопРасходовТовары.Ссылка.Проведен = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеДопРасходовТовары.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Документ,
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры,
		|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	ЕСТЬNULL(ВТ_ПДР.СуммаДопРасходов, 0) КАК СуммаДоп,
		|	ПоступлениеТоваровУслуг.СуммаДокумента + ЕСТЬNULL(ВТ_ПДР.СуммаДопРасходов, 0) КАК ОбщаяСумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПДР КАК ВТ_ПДР
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_ПДР.Партия
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Контрагент = &Контрагент
		|	И ПоступлениеТоваровУслуг.Организация = &Организация
		|	И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		
		Запрос.УстановитьПараметр("Контрагент", ВерифицированнаяСтруктура.Fields.Поставщик);
		Запрос.УстановитьПараметр("Организация", ВерифицированнаяСтруктура.Fields.Заказчик);
		
		МассивФильтров = Новый Массив;
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоСчетаФактуры, ДатаВходящегоСчетаФактуры, ОбщаяСумма", ВерифицированнаяСтруктура.Fields.Номер, ВерифицированнаяСтруктура.Fields.Дата, ВерифицированнаяСтруктура.Fields.Всего));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента, ОбщаяСумма", ВерифицированнаяСтруктура.Fields.Номер, ВерифицированнаяСтруктура.Fields.Дата, ВерифицированнаяСтруктура.Fields.Всего));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоСчетаФактуры, ДатаВходящегоСчетаФактуры, СуммаДокумента", ВерифицированнаяСтруктура.Fields.Номер, ВерифицированнаяСтруктура.Fields.Дата, ВерифицированнаяСтруктура.Fields.Всего));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента, СуммаДокумента", ВерифицированнаяСтруктура.Fields.Номер, ВерифицированнаяСтруктура.Fields.Дата, ВерифицированнаяСтруктура.Fields.Всего));
		МассивФильтров.Добавить(Новый Структура("ОбщаяСумма", ВерифицированнаяСтруктура.Fields.Всего));
		МассивФильтров.Добавить(Новый Структура("СуммаДокумента", ВерифицированнаяСтруктура.Fields.Всего));		
		
		ТЗДокументовДляПрикрепления = Запрос.Выполнить().Выгрузить();
		
		Если ТЗДокументовДляПрикрепления.Количество() > 0  Тогда
			Для каждого Фильтр Из МассивФильтров Цикл
				МассивСтрокДокументов = ТЗДокументовДляПрикрепления.НайтиСтроки(Фильтр);
				Если МассивСтрокДокументов.Количество() > 0 Тогда
					НайденныеДокументы.Добавить(МассивСтрокДокументов[0].Документ);
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;								
		
		
		Прикреплять = Ложь;
		
		Для каждого ЗначМассива Из НайденныеДокументы Цикл
			Запись = РегистрыСведений.ПрикрепленныеСканыКДокументам.СоздатьМенеджерЗаписи();
			Запись.Документ = ЗначМассива;
			Запись.Прочитать();
			
			Если ЗначениеЗаполнено(Запись.Документ) = Ложь Тогда
				ДокументыДляПрикрепления.Добавить(ЗначМассива);
			Иначе
				Если ЭтоСФ = Истина Тогда
					Если ЗначениеЗаполнено(Запись.ФайлСФ) = Ложь Тогда
						ДокументыДляПрикрепления.Добавить(ЗначМассива);
					КонецЕсли;
				Иначе	
					Если ЗначениеЗаполнено(Запись.ФайлТОРГ12) = Ложь Тогда
						ДокументыДляПрикрепления.Добавить(ЗначМассива);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли; 					
		КонецЦикла;	
		//-- АК luza 10.01.2018	
	КонецЕсли;    	               	
	
	Если ДокументыДляПрикрепления.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;                                                                   
	
	Для каждого ЗначДок Из ДокументыДляПрикрепления Цикл	
		Справочники.АК_АлгоритмыРаспознаванияФайлов.ПрикрепитьОбъектКФайлу(ФайлXMLВер, ЗначДок, ВерифицированнаяСтруктура.Fields);
		Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(ФайлXMLВер, ЗначДок);
	КонецЦикла;	
	
	
КонецФункции

Функция СохранениеВерификации(СохрЗначение, Знач ФайлРодитель)
	НСпр = Справочники.Файлы.СоздатьЭлемент();
	НСпр.Расширение = ".xml";
	НСпр.Наименование = "Верифицированный файл (авто)";
	НСпр.Записать();
	
	Версия = 0;
	
	СоответсвиеЗначенийСвойств = Новый Соответствие;
	СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель, ФайлРодитель);
	СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Тип, "Верифицированный файл");
	СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Автор, ПараметрыСеанса.ТекущийПользователь);
	СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Версия, Версия);
	
	Для каждого ЗначСоотв Из СоответсвиеЗначенийСвойств Цикл
		Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект = НСпр.Ссылка;
		Запись.Свойство = ЗначСоотв.Ключ;
		Запись.Значение = ЗначСоотв.Значение;
		Запись.Записать();
	КонецЦикла;			  			
	
	ВерФайл = НСпр.Ссылка; 	
	
	ПутьЗаписи = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ВерФайл);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьЗаписи);
	ЗаписьXML.ЗаписатьОбъявлениеXML();  
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Data");
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("fields");
	Для каждого ЗначСоотв Из СохрЗначение.Fields Цикл
		Значение = ЗначСоотв.Значение;
		ЗаписьXML.ЗаписатьНачалоЭлемента("field");
		ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(ЗначСоотв.Ключ));
		ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Значение))));
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();  //field 		
	КонецЦикла;	
	
	Значение = Версия;
	ЗаписьXML.ЗаписатьНачалоЭлемента("field");
	ЗаписьXML.ЗаписатьАтрибут("name", "ВерсияВерификации");
	ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Значение))));
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();  //field 
	
	ЗаписьXML.ЗаписатьКонецЭлемента();  //fields	
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("tables");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("table");
	ЗаписьXML.ЗаписатьНачалоЭлемента("rows");
	
	ТабличнаяЧасть = СохрЗначение.Tables;
	
	Для каждого Стр Из ТабличнаяЧасть Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("row");
		ЗаписьXML.ЗаписатьНачалоЭлемента("cells");
		Для каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("cell");
			ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(Колонка.Имя));
			
			ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Стр[Колонка.Имя]))));
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(Стр[Колонка.Имя]));
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //("cell");
		КонецЦикла;	
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("cells");			
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("row");
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); //("rows");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //("table");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //("tables");
	
	
	//
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Data 
	ЗаписьXML.Закрыть();
	
	
	Возврат НСпр.Ссылка;
	
КонецФункции	


//Обработки от fillin

// Функция преобразует ошибочно распознанные буквы в числах
//
// Параметры:
//  строка	 - Строка
// 
// Возвращаемое значение:
//  Строка, состоящая из цифр
//
Функция СтрокаТолькоИзЦифр(строка)
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(строка, "О", "0"), "о","0"), "В", "8"), "O", "0"), "o","0"), " ","");	
КонецФункции

// Функция позволяет найти организацию в базе данных
//
// Параметры:
//  Наименование - строка с искомым наименованием
//  ИНН			 - строка 
//  КПП			 - строка
// 
// Возвращаемое значение:
//  Ссылка на справочник Организации 
//
Функция НайтиОрганизацию(Наименование,ИНН,КПП = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(ИНН) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|{ГДЕ
	|	(Организации.КПП = &КПП)}";
	Запрос.Параметры.Вставить("ИНН", ИНН);
	Если (КПП <> "") И (КПП <> Неопределено) Тогда 
		Запрос.Параметры.Вставить("КПП", КПП);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Если КПП = Неопределено Тогда
			//ПараметрыОтбора = Новый Структура;
			//ПараметрыОтбора.Вставить("Строка", Наименование);
			//ПоискСтрок = ЭтотОбъект.СловарьСоответствийОрганизаций.НайтиСтроки(ПараметрыОтбора);
			//Если ПоискСтрок.Количество() = 1 Тогда 
			//	Возврат ПоискСтрок[0].Организация;
			//Иначе
			Возврат Неопределено;
			//КонецЕсли;
		Иначе
			Возврат НайтиОрганизацию(Наименование,ИНН);
		КонецЕсли;
	Иначе
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

// Функция позволяет найти контрагента в базе данных
//
// Параметры:
//  Наименование - строка с искомым наименованием
//  ИНН			 - строка 
//  КПП			 - строка
// 
// Возвращаемое значение:
//  Ссылка на справочник Контрагенты 
//
Функция НайтиКонтрагента(Наименование,ИНН,КПП = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(ИНН) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|{ГДЕ
	|	(Контрагенты.КПП = &КПП) КАК Поле2}";
	Запрос.Параметры.Вставить("ИНН", ИНН);
	Если (КПП <> "") И (КПП <> Неопределено) Тогда 
		Запрос.Параметры.Вставить("КПП", КПП);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Если КПП = Неопределено Тогда 
			//ПараметрыОтбора = Новый Структура;
			//ПараметрыОтбора.Вставить("Строка", Наименование);
			//ПоискСтрок = ЭтотОбъект.СловарьСоответствийКонтрагентов.НайтиСтроки(ПараметрыОтбора);
			//Если ПоискСтрок.Количество() = 1 Тогда 
			//	Возврат ПоискСтрок[0].Контрагент;
			//Иначе
			//	Возврат Неопределено;
			//КонецЕсли;
			Возврат Неопределено;
		Иначе
			Возврат НайтиКонтрагента(Наименование,ИНН);
		КонецЕсли;
	Иначе
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

// Функция возвращает адрес из контактной информации
//
// Параметры:
//  Объект			 - СправочникСсылка.КонтактныеЛица, СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Контрагенты, СправочникСсылка.Пользователи, СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица
//  ВидИнформации	 - Строка, СправочникСсылка.ВидыКонтактнойИнформации
// 
// Возвращаемое значение:
//  Строка с адресом
//
Функция ПолучитьАдресИзБазы(Объект,ВидИнформации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", ВидИнформации);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;
	Возврат "";
КонецФункции



Функция УбратьЛишниеСимволыВИНН(Знач СтрокаИНН)
	
	СтрокаИНН = СтрокаТолькоИзЦифр(СтрокаИНН); 	
	
	Маска = "0123456789";
	ВремРезультат = "";
	СтрокаИНН = СокрЛП(СтрокаИНН);
	Для а = 1 По СтрДлина(СтрокаИНН) Цикл
		Если Найти(Маска, Сред(СтрокаИНН, а, 1)) > 0 Тогда
			ВремРезультат = ВремРезультат + Сред(СтрокаИНН, а, 1);
		Иначе
			Если СтрДлина(ВремРезультат) >= 5 Тогда 
				Прервать;
			КонецЕсли;  
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВремРезультат;
	
КонецФункции

Функция ПарсингЧисла(Знач ЧислоСтрокой)
	
	Маска = "0123456789,";
	ВремРезультат = "";
	ЧислоСтрокой = СокрЛП(ЧислоСтрокой);
	ЧислоСтрокой = СтрЗаменить(ЧислоСтрокой, " ", "");
	ЧислоСтрокой = СтрЗаменить(ЧислоСтрокой, Символы.НПП, "");
	ЧислоСтрокой = СтрЗаменить(ЧислоСтрокой, Символы.Таб, "");
	ЧислоСтрокой = СтрЗаменить(ЧислоСтрокой, ".", ",");
	Для а = 1 По СтрДлина(ЧислоСтрокой) Цикл
		Если Найти(Маска, Сред(ЧислоСтрокой, а, 1)) > 0 Тогда
			ВремРезультат = ВремРезультат + Сред(ЧислоСтрокой, а, 1);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ВремРезультат) = Истина Тогда
		Попытка 
			Число = Число(ВремРезультат);
		Исключение
			Число = 0;
		КонецПопытки;	
	Иначе
		Число = 0;
	КонецЕсли;
	
	Возврат Число; 	
КонецФункции	

Функция ПарсингСтавкиНДС(СтрСтавка) Экспорт
	СтрСтавка = СтрЗаменить(СтрСтавка," ","");
	Если Найти(СтрСтавка,"18") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Найти(СтрСтавка,"20") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Найти(СтрСтавка,"10") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС10;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
КонецФункции

Процедура ПреобразоватьИсходнуюТаблицу(Таблица) Экспорт
	СписокКолонокДляПарсингаЧисла = Новый СписокЗначений;
	СписокКолонокДляПарсингаЧисла.Добавить("quantity"); 
	СписокКолонокДляПарсингаЧисла.Добавить("price"); 
	СписокКолонокДляПарсингаЧисла.Добавить("cost"); 
	СписокКолонокДляПарсингаЧисла.Добавить("nalogsum"); 
	СписокКолонокДляПарсингаЧисла.Добавить("sumnds");
	
	Для каждого Стр Из Таблица Цикл
		Для каждого ЗначСписка Из СписокКолонокДляПарсингаЧисла Цикл 
			Если Таблица.Колонки.Найти(ЗначСписка.Значение) <> Неопределено Тогда
				Стр[ЗначСписка.Значение] = ПарсингЧисла(Стр[ЗначСписка.Значение]);
			КонецЕсли;	
		КонецЦикла;	
		
		Если Таблица.Колонки.Найти("stavka") <> Неопределено Тогда
			Стр["stavka"] = ПарсингСтавкиНДС(Стр["stavka"]);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПреобразоватьЛатинскийТекстВРусский(Знач Текст)
	Текст = ВРЕГ(Текст);       
	СтрокаАнгл = "ABCEHKMOPTUVX";
	СтрокаРус =  "АВСЕНКМОРТИИХ";
	
	Если ЗначениеЗАполнено(Текст) Тогда
		Для Сч = 1 По СтрДлина(СтрокаАнгл) Цикл
			Текст = СтрЗаменить(Текст,Сред(СтрокаАнгл,Сч,1),Сред(СтрокаРус,Сч,1));
			Текст = СтрЗаменить(Текст,НРег(Сред(СтрокаАнгл,Сч,1)),Нрег(Сред(СтрокаРус,Сч,1)));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
КонецФункции	