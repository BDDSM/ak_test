&НаКлиенте
Перем НарастающийНомерИзображения;

&НаКлиенте
Перем ПозицияДляВставки;

&НаСервере
Процедура ПреобразоватьПеречисленияВПараметрыИПолучитьПредставление()
	
	РаботаСФайламиВызовСервера.ПреобразоватьПеречисленияВПараметрыСканера(
		Разрешение, Цветность, Поворот, РазмерБумаги, СжатиеTIFFЧисло,
		РазрешениеПеречисление, ЦветностьПеречисление, ПоворотПеречисление, РазмерБумагиПеречисление, СжатиеTIFF);
	
	ФорматКартинки = Строка(ФорматСканированногоИзображения);
	
	Представление = "";
	// информационная надпись вида:
	// "Формат хранения: PDF. Формат сканирования: JPG. Качество: 75. Формат хранения многостраничный: PDF. Разрешение: 200. Цветное";
	
	Представление = РаботаСФайламиВызовСервера.ПолучитьПредставлениеНастроекСканирования(
		Ложь, ФорматКартинки,
		ФорматХраненияОдностраничный, ФорматХраненияМногостраничный, ФорматСканированногоИзображения,
		КачествоJPG, СжатиеTIFF, Разрешение, ЦветностьПеречисление,
		ПоворотПеречисление, РазмерБумагиПеречисление, ДвустороннееСканирование);
	
	ТекстНастроек = Представление;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяФайлаДляСохраненияСкана = Параметры.ИмяФайлаДляСохраненияСкана;
	ЧтоСканируют = Параметры.ЧтоСканируют;
	
	Элементы.ТаблицаФайлов.Видимость = Ложь;
	Элементы.ФормаПринятьВсеКакОдинФайл.Видимость = Ложь;
	Элементы.ФормаПринятьВсеКакОтдельныеФайлы.Видимость = Ложь;
	
	Если Параметры.Свойство("ВладелецФайла") Тогда
		ВладелецФайла = Параметры.ВладелецФайла;
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторРодительскойФормы") Тогда
		ИдентификаторРодительскойФормы = Параметры.ИдентификаторРодительскойФормы;
	КонецЕсли;
	
	ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
	
	Если Параметры.Свойство("НеОткрыватьКарточкуПослеСозданияИзФайла") Тогда
		НеОткрыватьКарточкуПослеСозданияИзФайла = Параметры.НеОткрыватьКарточкуПослеСозданияИзФайла;
	КонецЕсли;
	
	ПрефиксИнформационнойБазы = "";
	
	НомерФайла = 1;
	ИмяФайла = "Изображение" + НомерФайла;

	ФорматСканированногоИзображения = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/ФорматСканированногоИзображения", 
			ИдентификаторКлиента, Перечисления.ФорматыСканированногоИзображения.PNG);
	
	ФорматХраненияОдностраничный = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/ФорматХраненияОдностраничный", 
			ИдентификаторКлиента, Перечисления.ФорматыХраненияОдностраничныхФайлов.PNG);
	
	ФорматХраненияМногостраничный = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/ФорматХраненияМногостраничный", 
			ИдентификаторКлиента, Перечисления.ФорматыХраненияМногостраничныхФайлов.TIF);
	
	ФорматКартинки = Строка(ФорматСканированногоИзображения);
	
	РазрешениеПеречисление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/Разрешение", ИдентификаторКлиента);
	ЦветностьПеречисление =  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/Цветность", ИдентификаторКлиента);
	
	ПоворотПеречисление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/Поворот", ИдентификаторКлиента);
	РазмерБумагиПеречисление =  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/РазмерБумаги", ИдентификаторКлиента);
	
	ДвустороннееСканирование = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/ДвустороннееСканирование", ИдентификаторКлиента);
	
	КачествоJPG =  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/КачествоJPG", ИдентификаторКлиента, 100);
	
	СжатиеTIFF =  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/СжатиеTIFF", 
		ИдентификаторКлиента, Перечисления.ВариантыСжатияTIFF.БезСжатия);
	
	ПоказыватьДиалогСканераЗагрузка = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/ПоказыватьДиалогСканера", ИдентификаторКлиента);
	Если ПоказыватьДиалогСканераЗагрузка = Неопределено Тогда
		ПоказыватьДиалогСканераЗагрузка = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/ПоказыватьДиалогСканера", ИдентификаторКлиента, ПоказыватьДиалогСканераЗагрузка);
	КонецЕсли;
	ПоказыватьДиалогСканера = ПоказыватьДиалогСканераЗагрузка;
	
	ИмяУстройства = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСканирования/ИмяУстройства", ИдентификаторКлиента);
	Если ИмяУстройства = Неопределено Тогда
		ИмяУстройства = "";
		ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/ИмяУстройства", ИдентификаторКлиента, ИмяУстройства);
	КонецЕсли;
	ИмяУстройстваСканирования = ИмяУстройства;
	
	ФорматJPG = Перечисления.ФорматыСканированногоИзображения.JPG;
	ФорматTIF = Перечисления.ФорматыСканированногоИзображения.TIF;
	
	ПреобразоватьПеречисленияВПараметрыИПолучитьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПриОткрытииКлиент", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиент()
	
	Отказ = Ложь;
	ПриОткрытииАвтомат(Отказ, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииАвтомат(ОтказИлиРезультат, ПараметрыОткрытия) Экспорт
	ПрямойВызовИзПриОткрытии = (ПараметрыОткрытия = Неопределено);
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	Если ПрямойВызовИзПриОткрытии Тогда
		// Первичная инициализация автомата (вызов из ПриОткрытии()).
		Если ПроверкиПриОткрытииВыполнены Тогда
			Возврат; // Открыть форму (проверки были выполнены ранее).
		КонецЕсли;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТекущийШаг", 1);
		ПараметрыОткрытия.Вставить("ПоказыватьДиалог", Неопределено);
		ПараметрыОткрытия.Вставить("ВыбранноеУстройство", Неопределено);
	Иначе
		// Вторичная инициализация автомата (вызов из диалога, открытого автоматом).
		Если ПараметрыОткрытия.ТекущийШаг = 2 Тогда
			Если ТипЗнч(ОтказИлиРезультат) = Тип("Структура") Тогда
				ПараметрыОткрытия.ВыбранноеУстройство = ОтказИлиРезультат.Значение;
				ИмяУстройстваСканирования = ПараметрыОткрытия.ВыбранноеУстройство;
			КонецЕсли;
			Если ПараметрыОткрытия.ВыбранноеУстройство = "" Тогда 
				Закрыть();
				ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", Новый Структура(
						"КомпонентаУстановлена, ИдентификаторКлиента",
						РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту(), ИдентификаторКлиента));
				Возврат; // Не открывать форму.
			КонецЕсли;
			ПараметрыОткрытия.ТекущийШаг = 3;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОткрытия.ТекущийШаг = 1 Тогда
		Если Не РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту() Тогда
			ОтказИлиРезультат = Истина; // Не открывать форму.
			Закрыть();
			ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", Новый Структура(
						"КомпонентаУстановлена, ИдентификаторКлиента",
						РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту(), ИдентификаторКлиента));
			Возврат;
		КонецЕсли;
		
		// Вызывается здесь, т.к. вызов КомпонентаTwain.ЕстьУстройства()
		// занимает очень много времени (больше, чем ОбновитьПовторноИспользуемыеЗначения()).
		Если Не РаботаСоСканеромКлиент.ДоступнаКомандаСканировать() Тогда
			ОтказИлиРезультат = Истина; // Не открывать форму.
			ОбновитьПовторноИспользуемыеЗначения();
			Закрыть();
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия.ТекущийШаг = 2;
	КонецЕсли;
	
	Если ПараметрыОткрытия.ТекущийШаг = 2 Тогда
		ПараметрыОткрытия.ПоказыватьДиалог = ПоказыватьДиалогСканера;
		ПараметрыОткрытия.ВыбранноеУстройство = ИмяУстройстваСканирования;
		
		Если ПараметрыОткрытия.ВыбранноеУстройство = "" Тогда
			ОтказИлиРезультат = Истина; // Не открывать форму.
			ОткрытьФормуМодально("Справочник.Файлы.Форма.ВыборУстройстваСканирования", , ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия.ТекущийШаг = 3;
	КонецЕсли;
	
	ПоказыватьДиалог = ПоказыватьДиалогСканера;
	ВыбранноеУстройство = ИмяУстройстваСканирования;
	
	Если ПараметрыОткрытия.ТекущийШаг = 3 Тогда
		
		Если Разрешение = -1 ИЛИ Цветность = -1 ИЛИ Поворот = -1 ИЛИ РазмерБумаги = -1 Тогда
		
			Разрешение  = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "XRESOLUTION");
			Цветность   = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "PIXELTYPE");
			Поворот  	= РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "ROTATION");
			РазмерБумаги = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "SUPPORTEDSIZES");
			ДвустороннееСканированиеЧисло = РаботаСоСканеромКлиент.ПолучитьНастройку(ВыбранноеУстройство, "DUPLEX");
			
			ДоступностьПоворот = (Поворот <> -1);
			ДоступностьРазмерБумаги = (РазмерБумаги <> -1);
			ДоступностьДвустороннееСканирование = (ДвустороннееСканированиеЧисло <> -1);
			
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
			
			РаботаСФайламиВызовСервера.ПреобразоватьИСохранитьПараметрыСканера(Разрешение, Цветность, 
				Поворот, РазмерБумаги, ИдентификаторКлиента);
		Иначе
			
			ДоступностьПоворот = Не ПоворотПеречисление.Пустая();
			ДоступностьРазмерБумаги = Не РазмерБумагиПеречисление.Пустая();
			ДоступностьДвустороннееСканирование = Истина;

		КонецЕсли;	
	
		ИмяФайлаКартинки = "";
		Элементы.Принять.Доступность = Ложь;
		
		ПараметрСжатие = ?(ВРег(ФорматКартинки) = "JPG", КачествоJPG, СжатиеTIFFЧисло);
		
		КомпонентаTwain.НачатьСканирование(ПоказыватьДиалог, ВыбранноеУстройство, ФорматКартинки, 
			Разрешение, Цветность, Поворот, РазмерБумаги, 
			ПараметрСжатие,
			ДвустороннееСканирование);
		
	КонецЕсли;		

	Если Не ПрямойВызовИзПриОткрытии Тогда
		ПроверкиПриОткрытииВыполнены = Истина;
		Открыть();
		ПроверкиПриОткрытииВыполнены = Ложь;
	КонецЕсли;
	
	//ВнешнееСобытие("TWAIN", "ImageAcquired", "d:\Izbenka\Управление Информации\automacon01\окорок1.jpg");
КонецПроцедуры

&НаКлиенте
Процедура ПринятьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	УдалитьВременныеФайлы(ПараметрыВыполнения.МассивФайловКопия);
	Если НЕ ПустаяСтрока(ПараметрыВыполнения.ФайлРезультата) Тогда
		УдалитьФайлы(ПараметрыВыполнения.ФайлРезультата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВсеКакОдинФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	УдалитьВременныеФайлы(ПараметрыВыполнения.МассивФайловКопия);
	УдалитьФайлы(ПараметрыВыполнения.ФайлРезультата);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Файлы.Форма.НастройкаСканирования") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		РазрешениеПеречисление   = ВыбранноеЗначение.Разрешение;
		ЦветностьПеречисление    = ВыбранноеЗначение.Цветность;
		ПоворотПеречисление      = ВыбранноеЗначение.Поворот;
		РазмерБумагиПеречисление = ВыбранноеЗначение.РазмерБумаги;
		ДвустороннееСканирование = ВыбранноеЗначение.ДвустороннееСканирование;
		
		ПоказыватьДиалогСканера         = ВыбранноеЗначение.ПоказыватьДиалогСканера;
		ФорматСканированногоИзображения = ВыбранноеЗначение.ФорматСканированногоИзображения;
		КачествоJPG                     = ВыбранноеЗначение.КачествоJPG;
		СжатиеTIFF                      = ВыбранноеЗначение.СжатиеTIFF;
		ФорматХраненияОдностраничный    = ВыбранноеЗначение.ФорматХраненияОдностраничный;
		ФорматХраненияМногостраничный   = ВыбранноеЗначение.ФорматХраненияМногостраничный;
		
		ПреобразоватьПеречисленияВПараметрыИПолучитьПредставление();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	УдалитьВременныеФайлы(ТаблицаФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	УдалитьВременныеФайлы(ТаблицаФайлов);
	Закрыть();
КонецПроцедуры

// Кнопка "Пересканировать" замещает выделенную (или единственную, если она одна) картинку 
//  (или добавляет в конец новые картинки, если ничего не выделено) новым изображением (изображениями).
&НаКлиенте
Процедура Пересканировать(Команда)
	
	Если ТаблицаФайлов.Количество() = 1 Тогда
		УдалитьВременныеФайлы(ТаблицаФайлов);
	ИначеЕсли ТаблицаФайлов.Количество() > 1 Тогда
		
		НомерТекущейСТроки = Элементы.ТаблицаФайлов.ТекущаяСтрока;
		СтрокаТаблицы = Элементы.ТаблицаФайлов.ДанныеСтроки(НомерТекущейСТроки);
		ПозицияДляВставки = ТаблицаФайлов.Индекс(СтрокаТаблицы);
		УдалитьФайлы(СтрокаТаблицы.ПутьКФайлу);
		ТаблицаФайлов.Удалить(СтрокаТаблицы);
		
	КонецЕсли;
	
	Если АдресКартинки <> "" Тогда
		УдалитьИзВременногоХранилища(АдресКартинки);
	КонецЕсли;	
	АдресКартинки = "";
	ПутьКВыбранномуФайлу = "";
	
	ПоказыватьДиалог = ПоказыватьДиалогСканера;
	ВыбранноеУстройство = ИмяУстройстваСканирования;
	ПараметрСжатие = ?(ВРег(ФорматКартинки) = "JPG", КачествоJPG, СжатиеTIFFЧисло);
	
	КомпонентаTwain.НачатьСканирование(ПоказыватьДиалог, ВыбранноеУстройство, ФорматКартинки, 
		Разрешение, Цветность, Поворот, РазмерБумаги, 
		ПараметрСжатие,
		ДвустороннееСканирование);
		
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "TWAIN" И Событие = "ImageAcquired" Тогда
		
		ИмяФайлаКартинки = Данные;
		Элементы.Принять.Доступность = Истина;
		
		КоличествоСтрокДоДобавления = ТаблицаФайлов.Количество();
		
		СтрокаТаблицы = Неопределено;
		
		Если ПозицияДляВставки = Неопределено Тогда
			СтрокаТаблицы = ТаблицаФайлов.Добавить();
		Иначе	
			СтрокаТаблицы = ТаблицаФайлов.Вставить(ПозицияДляВставки);
			ПозицияДляВставки = ПозицияДляВставки + 1;
		КонецЕсли;
		
		СтрокаТаблицы.ПутьКФайлу = ИмяФайлаКартинки;
		
		Если НарастающийНомерИзображения = Неопределено Тогда
			НарастающийНомерИзображения = 1;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ЧтоСканируют) Тогда
			СтрокаТаблицы.Представление = ЧтоСканируют;
		Иначе	
			СтрокаТаблицы.Представление = "Изображение" + Строка(НарастающийНомерИзображения);
		КонецЕсли;	
		НарастающийНомерИзображения = НарастающийНомерИзображения + 1;
		
		Если КоличествоСтрокДоДобавления = 0 Тогда
			ПутьКВыбранномуФайлу = СтрокаТаблицы.ПутьКФайлу;
			ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКВыбранномуФайлу);
			АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			СтрокаТаблицы.АдресКартинки = АдресКартинки;
		КонецЕсли;
		
		Если ТаблицаФайлов.Количество() > 1 И Элементы.ТаблицаФайлов.Видимость = Ложь Тогда
			Элементы.ТаблицаФайлов.Видимость = Истина;
			Элементы.ФормаПринятьВсеКакОдинФайл.Видимость = Истина;
			Элементы.ФормаПринятьВсеКакОтдельныеФайлы.Видимость = Истина;
			Элементы.Принять.Видимость = Ложь;
		КонецЕсли;	
		
		Если ТаблицаФайлов.Количество() > 1 Тогда
			Элементы.ТаблицаФайловКонтекстноеМенюУдалить.Доступность = Истина;
		КонецЕсли;	
		
	ИначеЕсли Источник = "TWAIN" И Событие = "EndBatch" Тогда
		
		Если ТаблицаФайлов.Количество() <> 0 Тогда
			ИдентификаторСтроки = ТаблицаФайлов[ТаблицаФайлов.Количество() - 1].ПолучитьИдентификатор();
			Элементы.ТаблицаФайлов.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;	
		
	ИначеЕсли Источник = "TWAIN" И Событие = "UserPressedCancel" Тогда	
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьЕще(Команда)
	
	ПоказыватьДиалог = ПоказыватьДиалогСканера;
	ВыбранноеУстройство = ИмяУстройстваСканирования;
	ПараметрСжатие = ?(ВРег(ФорматКартинки) = "JPG", КачествоJPG, СжатиеTIFFЧисло);
	
	ПозицияДляВставки = Неопределено;
	
	КомпонентаTwain.НачатьСканирование(ПоказыватьДиалог, ВыбранноеУстройство, ФорматКартинки, 
		Разрешение, Цветность, Поворот, РазмерБумаги, 
		ПараметрСжатие,
		ДвустороннееСканирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерТекущейСТроки = Элементы.ТаблицаФайлов.ТекущаяСтрока;
	СтрокаТаблицы = Элементы.ТаблицаФайлов.ДанныеСтроки(НомерТекущейСТроки);
	
	Если ПутьКВыбранномуФайлу <> СтрокаТаблицы.ПутьКФайлу Тогда
		
		ПутьКВыбранномуФайлу = СтрокаТаблицы.ПутьКФайлу;
		
		Если ПустаяСтрока(СтрокаТаблицы.АдресКартинки) Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКВыбранномуФайлу);
			СтрокаТаблицы.АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;	
		
		АдресКартинки = СтрокаТаблицы.АдресКартинки;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныеФайлы(ТаблицаЗначенийФайлов)
	
	Для Каждого Строка Из ТаблицаЗначенийФайлов Цикл
		УдалитьФайлы(Строка.ПутьКФайлу);
	КонецЦикла;	
	
	ТаблицаЗначенийФайлов.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВсеКакОтдельныеФайлы(Команда)
	
	МассивФайловКопия = Новый Массив;
	Для Каждого Строка Из ТаблицаФайлов Цикл
		МассивФайловКопия.Добавить(Новый Структура("ПутьКФайлу, АдресКартинки, Представление", Строка.ПутьКФайлу, Строка.АдресКартинки, Строка.Представление));
	КонецЦикла;	
	
	ТаблицаФайлов.Очистить(); // чтобы не удалились файлы в ПриЗакрытии
	
	Закрыть();
	
	РасширениеРезультата = Строка(ФорматХраненияОдностраничный);
	РасширениеРезультата = НРег(РасширениеРезультата); 
	
	СтруктураОповещения = Новый Структура("ИмяСобытия, МассивКартинок, ЧтоСканируют", "Отсканировано", Новый Массив(), ЧтоСканируют);
	// здесь работаем со всеми картинками -каждую как отдельный файл принимаем
	Для Каждого Строка Из МассивФайловКопия Цикл
		
		ПутьКФайлуЛокальный = Строка.ПутьКФайлу;
		
		Если НЕ ПустаяСтрока(ПутьКФайлуЛокальный) Тогда
			Картинка = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", Строка.Представление, Новый ДвоичныеДанные(Строка.ПутьКФайлу)), РасширениеРезультата);
			СтруктураОповещения.МассивКартинок.Добавить(Картинка);
			УдалитьФайлы(ПутьКФайлуЛокальный);
		КонецЕсли;	
		
	КонецЦикла;
	
	ОповеститьОВыборе(СтруктураОповещения);
	
	УдалитьВременныеФайлы(МассивФайловКопия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВсеКакОдинФайл(Команда)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("МассивФайловКопия", Новый Массив);
	ПараметрыВыполнения.Вставить("ФайлРезультата", "");
	
	МассивФайловКопия = Новый Массив;
	Для Каждого Строка Из ТаблицаФайлов Цикл
		ПараметрыВыполнения.МассивФайловКопия.Добавить(Новый Структура("ПутьКФайлу", Строка.ПутьКФайлу));
	КонецЦикла;	
	
	ТаблицаФайлов.Очистить(); // чтобы не удалились файлы в ПриЗакрытии
	
	Закрыть();
	
	// здесь работаем со всеми картинками - объединяем их в один многостраничный файл
	СтрокаВсехПутей = "";
	Для Каждого Строка Из ПараметрыВыполнения.МассивФайловКопия Цикл
		СтрокаВсехПутей = СтрокаВсехПутей + "*";
		СтрокаВсехПутей = СтрокаВсехПутей + Строка.ПутьКФайлу;
	КонецЦикла;
	
	ПутьКПрограммеКонвертации = "convert.exe";
	ФайлРезультата = "";
#Если НЕ ВебКлиент Тогда 	
	РасширениеРезультата = Строка(ФорматХраненияМногостраничный);
	РасширениеРезультата = НРег(РасширениеРезультата); 
	ПараметрыВыполнения.ФайлРезультата = ПолучитьИмяВременногоФайла(РасширениеРезультата);
#КонецЕсли	
	КомпонентаTwain.ОбъединитьВМногостраничныйФайл(СтрокаВсехПутей, ПараметрыВыполнения.ФайлРезультата, ПутьКПрограммеКонвертации);
	
	ОбъектФайлРезультата = Новый Файл(ПараметрыВыполнения.ФайлРезультата);
	Если НЕ ОбъектФайлРезультата.Существует() Тогда				
		//ТекстСообщения = ПолучитьТекстСообщенияОшибкиПреобразованияВPDF(ФайлРезультата);					
		//ПараметрыВыполнения.ФайлРезультата = "";
		//Обработчик = Новый ОписаниеОповещения("ПринятьВсеКакОдинФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		//ПоказатьПредупреждение(Обработчик, ТекстСообщения);
		Сообщить("Не удалось объединить изображения в один файл");
		Возврат;
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(ПараметрыВыполнения.ФайлРезультата) Тогда
		//АдресКартинки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПараметрыВыполнения.ФайлРезультата));
		Картинка = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ?(ЗначениеЗаполнено(ЧтоСканируют), ЧтоСканируют, "Изображение1"), Новый ДвоичныеДанные(ПараметрыВыполнения.ФайлРезультата)), РасширениеРезультата);
		МассивКартинок = Новый Массив();
		МассивКартинок.Добавить(Картинка);
		СтруктураОповещения = Новый Структура("ИмяСобытия, МассивКартинок, ЧтоСканируют", "Отсканировано", МассивКартинок, ЧтоСканируют);
		ОповеститьОВыборе(СтруктураОповещения);
		УдалитьФайлы(ПараметрыВыполнения.ФайлРезультата);
		Возврат;
	КонецЕсли;
	
	ПринятьВсеКакОдинФайлЗавершение(-1, ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	Если ЗначениеЗаполнено(ИмяФайлаДляСохраненияСкана) Тогда
		КартинкаФайл = Новый Картинка(СтрокаТаблицы.ДанныеКартинки);
		ФайлСохранения = Новый Файл(ИмяФайлаДляСохраненияСкана);
		ИмяКСохранению = ФайлСохранения.Путь + ФайлСохранения.ИмяБезРасширения + ?(Лев(РасширениеРезультата, 1) = ".", "", ".") + РасширениеРезультата;
		КартинкаФайл.Записать(ИмяКСохранению);
		Возврат ИмяКСохранению;
	Иначе	
		СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Наименование = СтрокаТаблицы.Представление;
		//СпрОбъект.Хранилище = Новый ХранилищеЗначения(Новый Картинка(ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресКартинки)), Новый СжатиеДанных(9));
		СпрОбъект.Расширение = РасширениеРезультата;
		//СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресКартинки))));
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
		СпрОбъект.Записать();
		Возврат СпрОбъект.Ссылка;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура Принять(Команда)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("МассивФайловКопия", Новый Массив);
	ПараметрыВыполнения.Вставить("ФайлРезультата", "");
	
	МассивФайловКопия = Новый Массив;
	Для Каждого Строка Из ТаблицаФайлов Цикл
		ПараметрыВыполнения.МассивФайловКопия.Добавить(Новый Структура("ПутьКФайлу", Строка.ПутьКФайлу));
	КонецЦикла;	
	
	// здесь работаем с одним файлом
	СтрокаТаблицы = ТаблицаФайлов.Получить(0);
	ПутьКФайлуЛокальный = СтрокаТаблицы.ПутьКФайлу;
	
	ТаблицаФайлов.Очистить(); // чтобы не удалились файлы в ПриЗакрытии
	
	Закрыть();
	
	РасширениеРезультата = Строка(ФорматХраненияОдностраничный);
	РасширениеРезультата = НРег(РасширениеРезультата); 
	
	Если НЕ ПустаяСтрока(ПутьКФайлуЛокальный) Тогда
		Картинка = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", СтрокаТаблицы.Представление, Новый ДвоичныеДанные(СтрокаТаблицы.ПутьКФайлу)), РасширениеРезультата);
		МассивКартинок = Новый Массив();
		МассивКартинок.Добавить(Картинка);
		СтруктураОповещения = Новый Структура("ИмяСобытия, МассивКартинок, ЧтоСканируют", "Отсканировано", МассивКартинок, ЧтоСканируют);
		ОповеститьОВыборе(СтруктураОповещения);
		УдалитьФайлы(ПутьКФайлуЛокальный);
		Возврат;
	КонецЕсли;
	
	ПринятьЗавершение(-1, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ДвустороннееСканированиеЧисло = РаботаСоСканеромКлиент.ПолучитьНастройку(ИмяУстройстваСканирования, "DUPLEX");
	ДоступностьДвустороннееСканирование = (ДвустороннееСканированиеЧисло <> -1);
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура(
		"КомпонентаУстановлена, ИдентификаторКлиента, ПоказыватьДиалогСканера, Разрешение, Цветность, Поворот, РазмерБумаги, 
			| ДвустороннееСканирование, ДоступностьПоворот, 
			| ДоступностьРазмерБумаги, ДоступностьДвустороннееСканирование, ФорматСканированногоИзображения, КачествоJPG, СжатиеTIFF,
			| ФорматХраненияОдностраничный, ФорматХраненияМногостраничный",
		РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту(), ИдентификаторКлиента, ПоказыватьДиалогСканера, РазрешениеПеречисление, ЦветностьПеречисление, ПоворотПеречисление, 
		РазмерБумагиПеречисление, ДвустороннееСканирование,
		ДоступностьПоворот, ДоступностьРазмерБумаги, ДоступностьДвустороннееСканирование,
		ФорматСканированногоИзображения, КачествоJPG, СжатиеTIFF,
		ФорматХраненияОдностраничный, ФорматХраненияМногостраничный);
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
	
	Если ТаблицаФайлов.Количество() < 2 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	НомерТекущейСТроки = Элементы.ТаблицаФайлов.ТекущаяСтрока;
	СтрокаТаблицы = Элементы.ТаблицаФайлов.ДанныеСтроки(НомерТекущейСТроки);
	УдалитьФайлы(СтрокаТаблицы.ПутьКФайлу);
	
	Если ТаблицаФайлов.Количество() = 2 Тогда
		Элементы.ТаблицаФайловКонтекстноеМенюУдалить.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

НарастающийНомерИзображения = 1;
