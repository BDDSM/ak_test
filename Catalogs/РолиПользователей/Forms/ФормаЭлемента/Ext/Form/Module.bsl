
&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)

	//
	Попытка
		Возврат Ссылка[ИмяРеквизита];
	Исключение
	КонецПопытки;

КонецФункции

//////////////////////////////////////////

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	//
	Элементы.ГруппаТранспортРазвоз.Видимость = СодержитТипРолиТранспортРазвоз();
	
КонецПроцедуры

//////////////////////////////////////////

&НаСервере
Функция СодержитТипРолиТранспортРазвоз()

	//
	ПризнакСодержитТипТранспортРазвоз = Ложь;
	Для каждого СтрокаТЗ Из тзТипыРолей Цикл
		
		//
		ПризнакСодержитТипТранспортРазвоз = ПризнакСодержитТипТранспортРазвоз 
			ИЛИ (СтрокаТЗ.Пометка
					И СтрокаТЗ.ТипРоли = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыРолейПользователя.ТранспортРазвоз"));
	
	КонецЦикла;	

	//
	Возврат ПризнакСодержитТипТранспортРазвоз;
	
КонецФункции // ()

&НаСервере
Функция ПроверитьВозможностьУдаленияТипаРоли(Роль, ТипРоли)
	
	//
	ВсеОК = Истина;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	СоответствиеОбъектРольСрезПоследних.Объект КАК Объект
	     |ИЗ
	     |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	     |ГДЕ
	     |	СоответствиеОбъектРольСрезПоследних.РольПользователя = &Роль";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	
	//
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Роль"	, Роль);
	ПЗ.Параметры.Вставить("ТипРоли"	, ТипРоли);
	
	//
	ПЗ.Выполнить();
	Если НЕ ПЗ.Результат.Пустой() Тогда
		
		//
		ВсеОК = Ложь;
		
		//
		Сообщить("Невозможно отвязать Роль от типа <" + ТипРоли + ">, т.к. к ней уже привязаны:");
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//
			стрСобщение = Символы.Таб + "- " + Выборка.Объект;
			
			//
			Сообщить(стрСобщение);
			
		КонецЦикла; 
	
	КонецЕсли; 

	//
	Возврат ВсеОК;

КонецФункции // ()

&НаСервере
Функция ПроверитьСоставТранспортРазвоз()
	
	//
	ВсеОК = Истина;
	
	//
	Для каждого СтрокаТЧ Из Объект.СоставТранспортРазвоз Цикл
		
		//
		Отбор = Новый Структура("Откуда, Куда");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		
		//
		СрезПоследних = РегистрыСведений.СоответствиеОбъектРольДляТипаРолиТранспортРазвоз.СрезПоследних(, Отбор);
		Если СрезПоследних.Количество() = 0 Тогда
			Продолжить; 
		КонецЕсли; 
		
		//
		_Срез = СрезПоследних[0]; 
		
		//
		Если ЗначениеЗаполнено(_Срез.РольПользователя) И _Срез.РольПользователя <> Объект.Ссылка Тогда
			
			//
			стрСобщение = Символы.Таб + "";
			стрСобщение = стрСобщение + ?(ЗначениеЗаполнено(СтрокаТЧ.Откуда), "" + СтрокаТЧ.Откуда + " -> ", "<Все>");
			стрСобщение = стрСобщение + ?(ЗначениеЗаполнено(СтрокаТЧ.Куда), "" + СтрокаТЧ.Куда, "<Все>");
			
			//
			Сообщить(стрСобщение + " уже закреплен за Ролью '" + _Срез.РольПользователя + "'");
			
			//
			ВсеОК = Ложь;
			
		КонецЕсли;	
		
	КонецЦикла; 
	
	//
	Возврат ВсеОК;

КонецФункции

//////////////////////////////////////////

&НаКлиенте
Процедура СоставТранспортРазвозОткудаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	ТекущиеДанные = Элементы.СоставТранспортРазвоз.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтандартнаяОбработка = Ложь;
		
	//
	Отбор = Новый Структура;
	Отбор.Вставить("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
	
	//
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	//
	Форма = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбораУпр", ПараметрыОткрытия, Элемент);
	Форма.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура СоставТранспортРазвозКудаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	ТекущиеДанные = Элементы.СоставТранспортРазвоз.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = Новый СписокЗначений;
	
	//
	СписокВыбора.Добавить(Неопределено, "<Все>");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка")	, "Все 'Избенка'");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин")	, "Все 'Вкусвилл'");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"), "Указать ТТ");
	
	//
	ВыбранныйЭлемент = ВыбратьИзСписка(СписокВыбора);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Если ВыбранныйЭлемент.Значение <> ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка") Тогда
		ТекущиеДанные.Куда = ВыбранныйЭлемент.Значение;
		Возврат;
	КонецЕсли;
	
	//
	Отбор = Новый Структура;
	Отбор.Вставить("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	
	//
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	//
	Форма = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбораУпр", ПараметрыОткрытия, Элемент);
	Форма.Открыть();
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////

&НаКлиенте
Процедура тзТипыРолейПометкаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.тзТипыРолей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ТекущиеДанные.ТипРоли = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыРолейПользователя.ТранспортРазвоз") Тогда
		
		//
		Если НЕ ТекущиеДанные.Пометка Тогда
			
			//
			Если Объект.СоставТранспортРазвоз.Количество() > 0 Тогда
				
				//
				ТекущиеДанные.Пометка = Истина;
				
				//
				Предупреждение("Необходимо очистить привязку на закладке 'Транспорт:Развоз'");
				
			КонецЕсли; 
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	//
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры


///////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТИПЫ РОЛЕЙ
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ВЫБОР
	     |		КОГДА НЕ РолиПользователейТипыРолей.Ссылка ЕСТЬ NULL 
	     |			ТОГДА ИСТИНА
	     |		ИНАЧЕ ЛОЖЬ
	     |	КОНЕЦ КАК Пометка,
	     |	ТипыРолейПользователя.Ссылка КАК ТипРоли,
	     |	ТипыРолейПользователя.Наименование КАК Наименование,
	     |	ТипыРолейПользователя.ПометкаУдаления
	     |ИЗ
	     |	ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	     |		ПО ТипыРолейПользователя.Ссылка = РолиПользователейТипыРолей.ТипРоли
	     |			И (РолиПользователейТипыРолей.Ссылка = &Ссылка)
	     |ГДЕ
	     |	(НЕ ТипыРолейПользователя.ПометкаУдаления
	     |			ИЛИ НЕ РолиПользователейТипыРолей.Ссылка ЕСТЬ NULL )
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Наименование";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Ссылка", Объект.Ссылка);
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		НоваяСтрока = тзТипыРолей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ЗаполнитьРолиОтветственных();
	
	//АК БЕЛН 2017.01.16+
	СКД=Отчеты.ОтчетПоЛентеКартинок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Адрес=ПоместитьВоВременноеХранилище(СКД,Новый УникальныйИдентификатор);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Адрес));
	ОбЭлемент=РеквизитФормыВЗначение("Объект");                                                     
	Настройки=ОбЭлемент.НастройкаЛентыКартинок.Получить();
	Если Настройки<>Неопределено Тогда
		Компоновщик.ЗагрузитьНастройки(Настройки);
	Иначе
		Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =     
		"ВЫБРАТЬ
		|	НастройкиПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Право = &Настройка
		|	И НастройкиПользователей.Значение = ИСТИНА
		|	И НастройкиПользователей.Пользователь.ФизЛицо = &ФизЛицо";

	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Отборы ленты картинок"));
	Запрос.УстановитьПараметр("ФизЛицо", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	Результат1 = Запрос.Выполнить();

	ВыборкаПользователей = Результат1.Выбрать();
	ФлПолныеПрава=Ложь;
	Если ВыборкаПользователей.Следующий() Тогда
		ФлПолныеПрава=Истина;
	КонецЕсли; 
	Элементы.КомпоновщикНастройкиОтбор.Доступность=ФлПолныеПрава или РольДоступна("ПолныеПрава");
	
	//АК БЕЛН 2017.01.16-
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//
	ВсеОК = Истина;
	
	//
	Объект.ТипыРолей.Очистить();
	
	//
	Для каждого СтрокаТЗ Из тзТипыРолей Цикл
	
		//
		Если СтрокаТЗ.Пометка Тогда
			
			//
			НоваяСтрока = Объект.ТипыРолей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			
			//
			Если СтрокаТЗ.ТипРоли = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыРолейПользователя.ТранспортРазвоз") Тогда
				ВсеОК = ПроверитьСоставТранспортРазвоз();
			КонецЕсли; 
			
		//			
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда			
		
			//
			ВсеОК = ПроверитьВозможностьУдаленияТипаРоли(Объект.Ссылка, СтрокаТЗ.ТипРоли);
			
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Отказ = НЕ ВсеОК;
	
	//+++АК
	ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанные();
	Если НЕ ВсеОК Тогда
		Отказ = Истина;
	КонецЕсли; 
	//---АК
	
	//
	//+++АК CISA 2018.09.10 ИП-00019741 Контроль указания только одного сотрудника.
	КоличествоСотрудников = ВернутьКоличествоУказанныхСотрудников();
	Если КоличествоСотрудников > 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для роли """ + СтрокаТЗ.ТипРоли + """ нельзя добавить более одного сотрудника.";
		Сообщение.Поле = "Объект.СоставРоли[1].Сотрудник";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	//---АК CISA
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	УстановитьСвойстваЭлементовФормы();
КонецПроцедуры

//+++АК РОЛИ ОТВЕТСТВЕННЫХ

//////////////////////////////////

&НаСервере
Функция РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущаяСсылка)

	//
	ВсеОК = Истина;
	
	//
	_тзРоли = тзРоли.Выгрузить();
	_тзРоли.Сортировать("Пометка ВОЗР");
	
	//
	Для каждого СтрокаТЗ Из _тзРоли Цикл
		
		//
		Если СтрокаТЗ.Пометка Тогда
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			
			//
			МЗ.Период = ТекущаяДата();
			
			//
			МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
			МЗ.Объект = ТекущаяСсылка;
			
			//
			МЗ.РольПользователя = СтрокаТЗ.Роль;
			
			//
			МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
			
			//
			Попытка
				МЗ.Записать();
			Исключение
				ВсеОК = Ложь;
			КонецПопытки;	
			
		Иначе
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				
				//
				МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
				
				//
				МЗ.Период = ТекущаяДата();
			
				//
				МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
				МЗ.Объект = ТекущаяСсылка;
				
				//
				МЗ.РольПользователя = Неопределено;
				
				//
				МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
				
				//
				Попытка
					МЗ.Записать();
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

	//
	Возврат ВсеОК;
	
КонецФункции
 
&НаКлиенте
Функция РолиОтветственныхПроверитьИЗаписатьДанные()

	//
	ВсеОК = Истина;
	Возврат ВсеОК;
	
	//
	СП = Новый Структура;
	СП.Вставить("Пометка", Истина);
	
	//
	НайденныеСтроки = тзРоли.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		Предупреждение("Объект должен быть привязан хотя бы к одной Роли");
		Возврат Ложь;		
	
	КонецЕсли; 
	
	//
	Возврат ВсеОК;

КонецФункции

&НаСервере
Процедура ЗаполнитьРолиОтветственных()
	
	//
	тзРоли.Очистить();
		
	//
	МассивДоступныхРолей = Новый Массив;
	МассивДоступныхТиповРолей = Новый Массив;
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|{ГДЕ
	|	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
	|	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.* КАК ТипСтруктурнойЕдиницы}";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("ТипСтруктурнойЕдиницы");
		ЭлементОтбора.Установить(Объект.ТипСтруктурнойединицы);
		
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если Выборка.ТипРоли.ТипЗначения.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			
			//
			МассивДоступныхРолей.Добавить(Выборка.Ссылка);
			МассивДоступныхТиповРолей.Добавить(Выборка.ТипРоли);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	РолиПользователей.Ссылка КАК Роль,
	|	РолиПользователей.ТипРоли КАК ТипРоли,
	|	РолиПользователей.Ссылка.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка,
	|	РолиПользователей.Ссылка.ПометкаУдаления
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = &Объект)
	|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
	|ГДЕ
	|	РолиПользователей.Ссылка В(&ДоступныеРоли)
	|	И РолиПользователей.ТипРоли В(&ДоступныеТипы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Объект", Объект.Ссылка);
	ПЗ.Параметры.Вставить("ДоступныеРоли", МассивДоступныхРолей);
	ПЗ.Параметры.Вставить("ДоступныеТипы", МассивДоступныхТиповРолей);
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		НоваяСтрока = тзРоли.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла; 

КонецПроцедуры
 
&НаКлиенте
Процедура тзРолиПометкаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.тзРоли.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Пометка = ТекущиеДанные.Пометка;
	Если Пометка Тогда
		
		//
		Для каждого СтрокаТЗ Из тзРоли Цикл
			
			//
			Если СтрокаТЗ.Роль = ТекущиеДанные.Роль Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			Если СтрокаТЗ.ТипРоли <> ТекущиеДанные.ТипРоли Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			СтрокаТЗ.Пометка = НЕ (СтрокаТЗ.ТипРоли = ТекущиеДанные.ТипРоли);
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьРолиОтветственных();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//+++АК
	Если НЕ Отказ Тогда
	
		//
		ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущийОбъект.Ссылка);
		Если НЕ ВсеОК Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	//---АК
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КомпоновщикНастройкиОтборПриОкончанииРедактированияСервер();
КонецПроцедуры

&НаСервере
Процедура КомпоновщикНастройкиОтборПриОкончанииРедактированияСервер()
		//АК БЕЛН 2017.01.16+
		УстановитьПривилегированныйРежим(Истина);
		ОбЭлемент=РеквизитФормыВЗначение("Объект");                               
		ОбЭлемент.НастройкаЛентыКартинок=Новый ХранилищеЗначения(Компоновщик.ПолучитьНастройки());
		Попытка
			ОбЭлемент.Записать();
			//ЗначениеВРеквизитФормы(ОбЭлемент,"Объект");
			Прочитать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ=Истина;
		КонецПопытки;
		//АК БЕЛН 2017.01.16-
	
КонецПроцедуры

//АК БЕЛН 2017.01.16+
&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриАктивизацииСтроки(Элемент)
	Если Элементы.КомпоновщикНастройкиОтбор.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.КомпоновщикНастройкиОтбор.ТекущиеДанные.Представление="Отбор" Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияСервер(Строка(Элементы.КомпоновщикНастройкиОтбор.ТекущиеДанные.ЛевоеЗначение));	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияСервер(Поле)
	Если Поле="ТипОперации" Тогда
		ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,"operation_type_orig");
	ИначеЕсли Поле="ПричинаСписания" Тогда
		ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,"id_reason");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//+++АК CISA 2018.09.10 ИП-00019741 Контроль указания только одного сотрудника.
	КоличествоСотрудников = ВернутьКоличествоУказанныхСотрудников();
	Если КоличествоСотрудников = 1 Тогда
	//---АК CISA
	
		КомпоновщикНастройкиОтборПриОкончанииРедактированияСервер();
		
	//+++АК CISA 2018.09.10 ИП-00019741 Контроль указания только одного сотрудника.
	КонецЕсли;
	//---АК CISA
		
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемСервер()
	ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПередУдалением(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПослеУдаления(Элемент)
	КомпоновщикНастройкиОтборПриОкончанииРедактированияСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПередЗакрытиемСервер();
КонецПроцедуры
//АК БЕЛН 2017.01.16-
//---АК

//+++АК CISA 2018.09.10 ИП-00019741 Контроль указания только одного сотрудника.
&НаКлиенте
Функция ВернутьКоличествоУказанныхСотрудников()
	Для каждого СтрокаТЗ Из тзТипыРолей Цикл
		Если СтрокаТЗ.Пометка Тогда
			Если СтрокаТЗ.ТипРоли = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы")
			  ИЛИ СтрокаТЗ.ТипРоли = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего") Тогда
				Возврат Объект.СоставРоли.Количество();
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	Возврат 0;
КонецФункции
//---АК CISA
