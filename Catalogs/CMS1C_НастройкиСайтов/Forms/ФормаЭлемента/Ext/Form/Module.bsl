&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УправлениеДоступностьюВидимостьюСервер();
	//Если ЗначениеЗаполнено(Ссылка) Тогда                                                     	
	//СписокСвойства.Параметры.УстановитьЗначениеПараметра("НастройкаСайта",Объект.Ссылка);	
	Спецсимволы.Параметры.УстановитьЗначениеПараметра("НастройкаСайта",Объект.Ссылка);	
	НастройкиОбмена.Параметры.УстановитьЗначениеПараметра("Владелец",Объект.Ссылка);
	ИсторияОбменов.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	////КонецЕсли; 
	// если РЗ не задано, то расписание = Неопределено и будет создано на клиенте в момент редактирования расписания
	//РасписаниеРегламентногоЗадания = Справочники.CMS1C_НастройкиСайтов.ПолучитьРасписаниеВыполненияОбменаДанными(Объект.Ссылка);
	//РасписаниеРегламентногоЗаданияЗагрузкиЗаказов = Справочники.CMS1C_НастройкиСайтов.ПолучитьРасписаниеВыполненияЗагрузкиЗаказов(Объект.Ссылка);
	
		
	//ЗаполнитьПоляДляОграничений();
	ЗаполнитьДатуОбновленияСтатусов();
	//ЗаполнитьТаблицуКопированияДанныхИзДругихСайтов();
	
	//Если Не Объект.Ссылка.Пустая() Тогда
	//	Элементы.СистемаУправленияСайтом.ТолькоПросмотр = Истина;
	//КонецЕсли;
	ЗаполнитьТаблицуКопированияДанныхИзДругихСайтов();
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюВидимостьюСервер()
	//ТекОбъект = РеквизитФормыВЗначение("Объект");
	Элементы.НастройкаПроксиСервера.Доступность = Объект.HTTPОбменПроксиИспользование;
	Элементы.НастройкаПочтыОбъединяющая.Доступность = Объект.УведомлятьПоПочте;
	
	Элементы.ДатаПоследнейСинхронизацииСтатусов.Доступность = Не Объект.Ссылка.Пустая();
КонецПроцедуры // УправлениеВидимостьюСервер()

&НаКлиенте
Процедура УправлениеДоступностьюВидимостьюКлиент()
	Элементы.НастройкаПроксиСервера.Доступность = Объект.HTTPОбменПроксиИспользование;
	Элементы.НастройкаПочтыОбъединяющая.Доступность = Объект.УведомлятьПоПочте;
	
	Если Объект.РежимКопированияДанныхИзДругихСайтов = 0 Тогда
		Элементы.КопированиеДанныхИзДругихСайтов.Видимость = Ложь;
		Элементы.ГлавнаяНастройкаСайта.Видимость = Ложь;
		Элементы.УзелОбменаКопированияДанныхИзДругихСайтов.Видимость = Ложь;
	ИначеЕсли Объект.РежимКопированияДанныхИзДругихСайтов = 1 Тогда
		Элементы.КопированиеДанныхИзДругихСайтов.Видимость = Ложь;
		Элементы.ГлавнаяНастройкаСайта.Видимость = ИСтина;
		Элементы.УзелОбменаКопированияДанныхИзДругихСайтов.Видимость = Ложь;
	ИначеЕсли Объект.РежимКопированияДанныхИзДругихСайтов = 2 Тогда
		Элементы.КопированиеДанныхИзДругихСайтов.Видимость = Истина;
		Элементы.ГлавнаяНастройкаСайта.Видимость = Ложь;
		Элементы.УзелОбменаКопированияДанныхИзДругихСайтов.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры // УправлениеВидимостьюСервер()

 // События ПриИзменении
&НаКлиенте
Процедура HTTPОбменПроксиИспользованиеПриИзменении(Элемент)
	УправлениеДоступностьюВидимостьюКлиент();
КонецПроцедуры

&НаКлиенте
Процедура УведомлятьПоПочтеПриИзменении(Элемент)
	УправлениеДоступностьюВидимостьюКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	CMS1C_ПроцедурыОбменаССайтомКлиентУправляемоеПриложение.УстановитьФормуДляНужнойCMS(ЭтаФорма,ОБъект.СистемаУправленияСайтом);
	
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.СерверMySQL = "Укажите здесь адрес хоста MySQL базы";
		Объект.КодировкаMySQL = "cp1251";
		Объект.ПортMySQL = 3306;
	КонецЕсли;
	УстановитьЗначенияПереключателей();
	АдресВоднойМарки = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"Watermark");
	АдресВоднойМаркиСред = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"WatermarkСред");
	УправлениеДоступностьюВидимостьюКлиент();
	УстановитьФункциональныеОпцииСистемыУправленияСайтом();
	Если ЗначениеЗаполнено(Объект.СистемаУправленияСайтом) Тогда
		ЭтаФОрма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("СистемаУправленияСайтом",Объект.СистемаУправленияСайтом));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМаленькуюМарку(Команда)
	Перем ВыбранноеИмя,АдресВременногоХранилища;
	Если Не ПоместитьФайл(АдресВременногоХранилища, "", ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		Возврат;
	Конецесли;
	
	поместитьКартинкуВНастройку(АдресВременногоХранилища,"WatermarkСред");
	АдресВоднойМаркиСред = "";
	ОбновитьОтображениеДанных();
	АдресВоднойМаркиСред = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"WatermarkСред");
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Процедура УстановитьМаленькуюМаркуНаСервере(АдресВременногоХранилища)
	НашОбъект = РеквизитФормыВЗначение("Объект");
	НашОбъект.WatermarkСред = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилища),Новый СжатиеДанных());
	НашОбъект.Записать();
	ЗначениеВДанныеФормы(НашОбъект,Объект);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБольшуюМарку(Команда)
	
	Перем ВыбранноеИмя,АдресВременногоХранилища;
	
	
	Если ПоместитьФайл(АдресВременногоХранилища, "", ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		ДлинаНаименования = СтрДлина(ВыбранноеИмя);
		ИмяФайла = "";
		
		Пока ДлинаНаименования > 1 Цикл 
			БукваСимвол = Сред(ВыбранноеИмя,ДлинаНаименования,1);
			Если БукваСимвол = "\" Тогда 
				Прервать;					
			КонецЕсли;
			ИмяФайла =БукваСимвол + ИмяФайла;
			ДлинаНаименования = ДлинаНаименования - 1; 
		КонецЦикла;	
		
		ФорматКартинкиРазрешен = ПолучитьКартинкуИзВременногоХранилища(АдресВременногоХранилища);
		
		Если НЕ ФорматКартинкиРазрешен Тогда
			Сообщить("Неверный формат картинки (только GIF, JPEG, PNG)");
			Возврат;				
		КонецЕсли;
		Попытка
		УстановитьБольшуюМаркуНаСервере(АдресВременногоХранилища);
		
		Предупреждение("Большая марка установлена!");
		Исключение
		Сообщить(ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;	// Вставить содержимое обработчика.
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБольшуюМаркуНаСервере(АдресВременногоХранилища)
	
	НашОбъект = РеквизитФормыВЗначение("Объект");
	НашОбъект.Watermark = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилища),Новый СжатиеДанных());
	НашОбъект.Записать();
	ЗначениеВДанныеФормы(НашОбъект,Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКартинкуИзВременногоХранилища(АдресВременногоХранилища)
	
	ДвоичныеДанныеЗагружаемойКартинки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ВыбранноеИзображение = Новый Картинка(ДвоичныеДанныеЗагружаемойКартинки, Ложь);	
	
	ФорматКартинкиРазрешен = Истина;
	ФорматКартинкиОбъекта = ВыбранноеИзображение.Формат();
	
	Если ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат Тогда
		ФорматКартинкиРазрешен = Ложь;
	Иначе
		Если НЕ (ФорматКартинкиОбъекта = ФорматКартинки.GIF
			ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.JPEG
			ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.PNG) Тогда
			Попытка
				ФорматКартинкиОбъекта   = ВыбранноеИзображение.Преобразовать(ФорматКартинки.JPEG);
			Исключение
				Сообщить("Не удалось преобразовать формат картинки в JPEG. Добавляйте только .GIF,.JPEG и .PNG",СтатусСообщения.ОченьВажное);		
				ФорматКартинкиРазрешен = Ложь;
			КонецПопытки;
		КонецЕсли;				
	КонецЕсли;
	
	Возврат ФорматКартинкиРазрешен; 
	
КонецФункции	

&НаКлиенте
Процедура ПерезаписатьНоменклатуру(Команда)
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)Тогда
	возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Значения свойств номенклатуры сайта будут заменены на значения свойств 1С, продолжить?",РежимДиалогаВопрос.ОКОтмена);
	
	Если Ответ=КодВозвратаДиалога.Отмена Тогда
		возврат;
	КонецЕсли;
	
	Состояние("Выполняется перезапись номенклатуры, это может занять продолжительное время...ожидайте пожалуйста.");
	
	ПереЗаписатьНоменклатуруНаСервере();
	
	Предупреждение("Завершено!");
    	
КонецПроцедуры

&НаСервере
Процедура ПереЗаписатьНоменклатуруНаСервере()
	
	//НачатьТранзакцию();
	
	//НаборЗаписей = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.НастройкаСайта.Установить(Объект.Ссылка);
	//НаборЗаписей.Прочитать();	
	//НаборЗаписей.Очистить();
	//НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.ЭтоГруппа,
	               |	Номенклатура.ВестиУчетПоХарактеристикам
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаНоменклатурыВА = Запрос.Выполнить().Выбрать();	
	Всего = ВыборкаНоменклатурыВА.Количество();
	
	ОсталосьСекунд = 0;
	Начало = ТекущаяДата();
	
	НС = 0;
	Пока ВыборкаНоменклатурыВА.Следующий() Цикл
		НС = НС + 1;
		//Сейчас = ТекущаяДата();
		//Кво = Кво+1;
		//ПрошлоСекунд = Сейчас - Начало;
		//СекундНаЕд = ПрошлоСекунд/Кво;
		//ЕщеНужноМинут = СекундНаЕд * (Всего-Кво)/60;                                                                                               		
		//Состояние(" "+НС + " из "+Всего);
		Попытка
			ВыборкаНоменклатурыВА.Ссылка.ПолучитьОбъект().Записать();
		Исключение
			Сообщить("Ошибка записи номенклатуры "+ВыборкаНоменклатурыВА.Ссылка+". Причина: "+ОписаниеОшибки());	
			возврат;
		КонецПопытки;
		//Если ВыборкаНоменклатурыВА.ВестиУчетПоХарактеристикам Тогда
		//	ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(,ВыборкаНоменклатурыВА.Ссылка);
		//	Пока ВыборкаХарактеристик.Следующий() Цикл
		//		ВыборкаХарактеристик.Ссылка.ПолучитьОбъект().Записать();
		//	КонецЦикла;
		//КонецЕсли;
		//
		
		Попытка
			НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ВыборкаНоменклатурыВА.Ссылка);
			НаборЗаписей.Прочитать();	
			НаборЗаписей.Записать();
		Исключение
			Сообщить("Ошибка записи значений свойств номенклатуры "+ВыборкаНоменклатурыВА.Ссылка+". Причина: "+ОписаниеОшибки());	
			возврат;
		КонецПопытки;
		
		Если (Не ВыборкаНоменклатурыВА.ЭтоГруппа)
			Тогда
			ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(,ВыборкаНоменклатурыВА.Ссылка);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				ОбъектХАрактеристика = ВыборкаХарактеристик.ПолучитьОбъект();
				Попытка ОбъектХАрактеристика.Записать();
				Исключение
					Сообщить("Ошибка записи характеристики номенклатуры "+ВыборкаНоменклатурыВА.Ссылка+"; "+ВыборкаХарактеристик.Ссылка+". Причина: "+ОписаниеОшибки());	
					//ОтменитьТранзакцию();
					//возврат;
				КонецПопытки;
				
				НЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
				НЗ.Отбор.Объект.Установить(ВыборкаХарактеристик.Ссылка);
				Нз.Прочитать();
				Попытка
					НЗ.Записать();
				Исключение
					Сообщить("Ошибка записи значений свойств характеристики номенклатуры "+ВыборкаНоменклатурыВА.Ссылка+"; "+ВыборкаХарактеристик.Ссылка+". Причина: "+ОписаниеОшибки());	
					//ОтменитьТранзакцию();
					//возврат;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяЗагрузкаЦен(Команда)
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Ответ = Вопрос("Для загрузки цен необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Попытка
		ЭтаФорма.Записать();
		Исключение
			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
		КонецПопытки;
		
	КонецЕсли;
	
	Если НастройкаОбменаДляОтбора.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипЦен = ПолучитьРеквизитОбъекта(НастройкаОбменаДляОтбора,"ТипЦен");
	ТипЦенСтараяЦена = ПолучитьРеквизитОбъекта(НастройкаОбменаДляОтбора,"ТипЦенСтараяЦена");
	ТипЦенЗакупочнаяЦена = ПолучитьРеквизитОбъекта(НастройкаОбменаДляОтбора,"ТипЦенЗакупочнаяЦена");
	
	Если НЕ ЗначениеЗаполнено(ТипЦен)
		И НЕ ЗначениеЗаполнено(ТипЦенСтараяЦена)
		И НЕ ЗначениеЗаполнено(ТипЦенЗакупочнаяЦена)
		Тогда
 		Сообщить("В настройке обмена не установлены цены закупки, продажи, старая");
		Возврат;
	КонецЕсли;
	
	УстановкаЦенСсылка = СоздатьСсылкуУстановкиЦен(НастройкаОбменаДляОтбора);
	Если УстановкаЦенСсылка = Неопределено Тогда
		Сообщить("Документ ""Установка цен номенклатуры"" не был создан");
		Возврат;
	КонецЕсли;
	
	Стр = Новый Структура();
	Стр.Вставить("Ключ",УстановкаЦенСсылка);
	//Стр.Вставить("Объект",ДокументУстановкиЦен.Ссылка);
	ф = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента",Стр);
	//КопироватьДанныеФормы(ДокументУстановкиЦен,ф.Объект);
	ф.Открыть();
	
	//Стр = Новый Структура();
	//Стр.Вставить("Ключ",ДокументОприходование.Ссылка);
	//Стр.Вставить("Объект",ДокументОприходование.Ссылка);
	//ф = ПолучитьФорму("Документ.ОприходованиеИзлишковТоваров.ФормаОбъекта",Стр);
	////КопироватьДанныеФормы(ДокументОприходование,ф.Объект);
	//ф.Открыть();
КонецПроцедуры

Функция ПолучитьРеквизитОбъекта(ТекОбъект,ИмяРеквизита)
	Возврат ТекОбъект[ИмяРеквизита];
КонецФункции

&НаСервере
Функция ЗагрузитьУстановкуЦенОстатковИВернутьНезаписанныеОбъекты(ТекущаяНастройкаОБмена)
	ОбработкаОбмена = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(Объект.СистемаУправленияСайтом);//Обработки.ВА5_ОбработкаОбмена.Создать();
	ОбработкаОбмена.НастройкаСайта = Объект.Ссылка;
	ЗаполнитьЗначенияСвойств(ОбработкаОбмена,Объект.Ссылка);
	
	СтруктураНовыхДокументов = ОбработкаОбмена.ЗагрузитьУстановкуЦенОстатковИВернутьНезаписанныеОбъекты(ТекущаяНастройкаОБмена);
	
	Если СтруктураНовыхДокументов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//СтруктураНовыхДокументов.УстановкаЦен.Записать();
	//СтруктураНовыхДокументов.УстановкаЦен = СтруктураНовыхДокументов.УстановкаЦен;
	//СтруктураНовыхДокументов.Оприходование.Записать();
	//ЗначениеВДанныеФормы(СтруктураНовыхДокументов.УстановкаЦен,ДокументУстановкиЦен);
	//ЗначениеВДанныеФормы(СтруктураНовыхДокументов.Оприходование,ДокументОприходование);
	Возврат СтруктураНовыхДокументов;
КонецФункции



&НаКлиенте
Процедура СписокСвойстваПриИзменении(Элемент)
	этаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбменовПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПереключателей()
	Если НЕ Объект.ПрямаяСвязьСMySQL Тогда
		ПереключательПрямаяСвязьСMySQL = 1;
	Иначе
		ПереключательПрямаяСвязьСMySQL = 2;
	КонецЕсли;
	
	//ПереключательОсновнойРежимРедактированияОписания = ОБъект.ОсновнойРежимРедактированияОписания;
	ПереключательПрямаяСвязьСMySQLПриИзменении("Мир");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	УстановитьЗначениеГалочекИзПереключателей();
КонецПроцедуры

ПРоцедура УстановитьЗначениеГалочекИзПереключателей()
	Если Объект.ПрямаяСвязьСMySQL И ПереключательПрямаяСвязьСMySQL = 1 Тогда
		Объект.ПрямаяСвязьСMySQL = Ложь;
	ИначеЕсли (НЕ Объект.ПрямаяСвязьСMySQL) И ПереключательПрямаяСвязьСMySQL = 2 Тогда
		Объект.ПрямаяСвязьСMySQL = Истина;
	КонецеСли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	Если ЭтаФорма.Модифицированность
		ИЛИ Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Для проверки подключения необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ЭтаФорма.Записать();
		Исключение
			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	//ТекстСообщенияПользователю = CMS1C_ПроцедурыОбменаССайтом.ВыполнитьТестовоеПодключениеКСерверуHTTP(Объект,"");
    //Предупреждение(ТекстСообщенияПользователю)
	//ПроверитьПодключениеСервер();
	
	ТекстСообщенияПользователю = ПроверитьПодключениеСервер();
	Предупреждение(ТекстСообщенияПользователю);
КонецПроцедуры

Функция ПроверитьПодключениеСервер()
	ДополнительнаяИнформация = "";
	ТекстСообщенияПользователю = "";
	
	ЭтотОбъект = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.CMS1C_НастройкиСайтов"));
	ТекстРезультатаПроверкиПодключенияПоФТП = ЭтотОбъект.ВыполнитьТестовоеПодключениеКСерверуFTP(ЭтотОбъект, ДополнительнаяИнформация);
	
	ТекстСообщенияПользователю =ТекстРезультатаПроверкиПодключенияПоФТП;
	
	ТекстСообщенияПользователю = ТекстСообщенияПользователю + Символы.ПС + ЭтотОбъект.ВыполнитьТестовоеПодключениеКСерверуHTTP(ЭтотОбъект, ДополнительнаяИнформация);
	
	Если Не ПустаяСтрока(ДополнительнаяИнформация) Тогда
		Сообщить(ДополнительнаяИнформация);
	КонецЕсли;
	Возврат ТекстСообщенияПользователю;
конецФункции

&НаКлиенте
Процедура СоздатьPHPФайлы(Команда)
	Если ЭтаФорма.Модифицированность
		ИЛИ Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Для проверки подключения необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ЭтаФорма.Записать();
		Исключение
			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Результат = СоздатьФайлыКлиентСервер();
	Если Результат = Неопределено Тогда
		Предупреждение("Файлы создать не удалось. Проверьте подключение по FTP");
	ИНаче
		Предупреждение(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьФайлыКлиентСервер()
	СтруктураПараметровСайта = CMS1C_ПроцедурыОбменаССайтом.ПолучитьСтруктуруПараметровДляСоединения(Объект, Объект.HTTPОбменАдресСайта);
	
	Если Не ЗначениеЗаполнено(Объект.HTTPОбменИмяХоста) Тогда
		Сообщить("Не заполнено имя хоста");
		Возврат Неопределено;
	КОнецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.HTTPОбменИмяБазы) Тогда
		Сообщить("Не заполнено имя базы");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.HTTPОбменИмяПользователя) Тогда
		Сообщить("Не заполнено имя базы");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СерверFTP=Новый FTPСоединение(СтруктураПараметровСайта.FTPОбменАдресСайта,Формат(СтруктураПараметровСайта.FTPОбменПорт,"ЧГ=0"),СтруктураПараметровСайта.FTPОбменИмяПользователя,СтруктураПараметровСайта.FTPОбменПароль,,СтруктураПараметровСайта.ПассивноеFTPСоединение);
		СтрокаВозврата = "Соединение с ftp-шлюзом выполнено успешно.";
		//СерверFTP = Неопределено;
	Исключение
		Сообщить("Соединение с FTP не установлено");
		Возврат Неопределено;
	КонецПопытки;
	
	ПутьК1СПХП = ПолучитьИмяВременногоФайла("php");
	Файл1СПХП = ПолучитьОбщийМакет("CMS1C_zip1c");
	Файл1СПХП.Записать(ПутьК1СПХП);
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПутьК1СПХП,КодировкаТекста.Системная);
	ТекстФАйла = Текст.ПолучитьТекст();
	//Сообщить(ТекстФайла);
	ТекстФайла = СТрЗаменить(ТекстФайла,"$host=""","$host="""+Объект.HTTPОбменИмяХоста+"");
	ТекстФайла = СТрЗаменить(ТекстФайла,"$base=""","$base="""+Объект.HTTPОбменИмяБазы+"");
	Текст.УстановитьТекст(ТекстФайла);
	Текст.Записать(ПутьК1СПХП,КодировкаТекста.Системная);
	
	ПутьКЗипЛиб = ПолучитьИмяВременногоФайла("php");
	ФайлЗипЛиб = ПолучитьОбщийМакет("CMS1C_Ziplib");
	ФайлЗипЛиб.Записать(ПутьКЗипЛиб);
	Попытка
		СерверFTP.Записать(ПутьК1СПХП,"/1c.php");
	Исключение
		ТекстСообщения = "Не удалось создать файл 1c.php";
		Сообщить(ТекстСообщения+Символы.ПС+". "+ ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		СерверFTP.Записать(ПутьКЗипЛиб,"/Ziplib.php");
	Исключение
		ТекстСообщения = "Не удалось создать файл Ziplib.php";
		Сообщить(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат "php-файлы успешно помещены в корневую папку FTP. Можно проверять тестирование подключения";
КонецФункции

//Функция ПолучитьЗначениеКонстанты(ИмяКонстанты)
//	Возврат Константы[ИмяКонстанты].ПОлучить();
//КонецФУнкции

//Функция УстановитьЗначениеКонстанты(ИмяКонстанты,Значение)
//	Константы[ИмяКонстанты].Установить(Значение);
//КонецФункции

&НаКлиенте
Процедура ПерезаписатьПервуюКартинку(Команда)
	ПерезаписатьКартинкуНаСервере();
КонецПроцедуры

ПРоцедура ПерезаписатьКартинкуНаСервере()
	
	ВыборкаКартинок = Справочники.ХранилищеДополнительнойИнформации.Выбрать(,,Новый Структура("ВидДанных",Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение));
	Пока ВыборкаКартинок.Следующий() Цикл
		Если ТипЗнч(ВыборкаКартинок.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			Попытка	
				ВыборкаКартинок.Ссылка.ПолучитьОбъект().Записать();
			Исключение
				Сообщить( "Не удалось перезаписать картинку "+ВыборкаКартинок.Ссылка+" номенклаутры "+ ВыборкаКартинок.Объект + Символы.ПС+ОписаниеОшибки());
			КонецПопытки;
			//Состояние("Перезапись картинок номенклатуры "+ВыборкаКартинок.Объект);
		КонецЕсли;
	КонецЦикла;
	//ВыборкаКартинок = Справочники.Номенклатура.Выбрать();
	//Пока ВыборкаКартинок.Следующий() Цикл
	//	
	//	Если НЕ ЗначениеЗаполнено(ВыборкаКартинок.ФайлКартинки) Тогда
	//		Продолжить;
	//	КонецЕсли;		
	//	
	//	ВыборкаКартинок.ПолучитьОбъект().Записать();
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоответствияПапокИКатегорий(Команда)
	Ф = ПолучитьФорму("Обработка.CMS1C_СозданиеСоответствияПапокИКатегорий.Форма.Форма");
	Ф.Настройка = Объект.Ссылка;
	Ф.Открыть();
КонецПроцедуры

//Процедура ЗаполнитьПоляДляОграничений()
//	ПоляSC_Products = Объект.ПоляSC_products;
//	Выб = справочники.CMS1C_Поля.Выбрать(Справочники.CMS1C_Поля.SC_products);
//	Пока ВЫб.Следующий() Цикл
//		Если ПоляSC_products.НайтиСтроки(Новый Структура("Поле",Выб.Ссылка)).Количество()=0 Тогда
//			ДобСтр = ПоляSC_products.Добавить();
//			ДобСтр.Поле = Выб.Ссылка;
//			ДобСтр.ВыгружатьИзмененные = Истина;
//			ДобСтр.ВыгружатьНовые = Истина;
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлюч(Команда)
	ПолучитьКлючНаСервере();
КонецПроцедуры

ПРоцедура ПолучитьКлючНаСервере()
	Об = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.CMS1C_НастройкиСайтов"));
	об.ПолучитьКлюч();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПрямаяСвязьСMySQLПриИзменении(Элемент)
	Если ПереключательПрямаяСвязьСMySQL = 1 Тогда
		Если Элементы.СтраницыПрямоеПодключение.ТекущаяСтраница <> Элементы.СтраницаНепрямоеПодключение Тогда
			Элементы.СтраницыПрямоеПодключение.ТекущаяСтраница = Элементы.СтраницаНепрямоеПодключение;
		КонецЕсли;
	ИначеЕсли ПереключательПрямаяСвязьСMySQL = 2 Тогда
		Если Элементы.СтраницыПрямоеПодключение.ТекущаяСтраница <> Элементы.СтраницаПрямоеПодключение Тогда
			Элементы.СтраницыПрямоеПодключение.ТекущаяСтраница = Элементы.СтраницаПрямоеПодключение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//\СписокСвойства.Параметры.УстановитьЗначениеПараметра("НастройкаСайта",Объект.Ссылка);	
	Спецсимволы.Параметры.УстановитьЗначениеПараметра("НастройкаСайта",Объект.Ссылка);	
	НастройкиОбмена.Параметры.УстановитьЗначениеПараметра("Владелец",Объект.Ссылка);
	ИсторияОбменов.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	УправлениеДоступностьюВидимостьюСервер();
	ЗаполнитьСпецсимволыПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый СТруктура();
	СтруктураПараметров.Вставить("Владелец",Объект.Ссылка);
	
	ф = ПолучитьФорму("Справочник.CMS1C_НастройкиОбменаССайтом.ФормаОбъекта",СтруктураПараметров,Элемент);
	Ф.Объект.Владелец = Объект.Ссылка;
	Ф.Открыть();
КонецПроцедуры

Процедура ЗаполнитьДатуОбновленияСтатусов()
	Мен = РегистрыСведений.CMS1C_ИсторияОбменаСтатусовЗаказовНаСайте.СоздатьМенеджерЗаписи();
	Мен.НастройкаСайта = Объект.Ссылка;
	Мен.Прочитать();
	ДатаПоследнейСинхронизацииСтатусов  = Мен.ДатаСинхронизацииСтатусов;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоследнейСинхронизацииСтатусовПриИзменении(Элемент)
	ЗаписатьДатуПоследнейСинхронизацииСтатусов();
КонецПроцедуры

Процедура ЗаписатьДатуПоследнейСинхронизацииСтатусов()
	Мен = Регистрысведений.CMS1C_ИсторияОбменаСтатусовЗаказовНаСайте.СоздатьМенеджерЗаписи();
	Мен.НастройкаСайта = Объект.Ссылка;
	Мен.ДатаСинхронизацииСтатусов = ДатаПоследнейСинхронизацииСтатусов;
	Мен.Записать();
КонецПроцедуры

Процедура поместитьКартинкуВНастройку(АдресВременногоХранилища,ИмяРеквизита)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ЭтотОбъект = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.CMS1C_НастройкиСайтов"));
	ЭтотОбъект[ИмяРеквизита] = Новый ХранилищеЗначения(Новый Картинка(ДвоичныеДанные));
	ЭтотОбъект.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект,Объект);
	Модифицированность = Истина;
конецпроцедуры

&НаКлиенте
Процедура КомандаУстановитьКартинку(Команда)
	Перем ВыбранноеИмя,АдресВременногоХранилища;
	Если Не ПоместитьФайл(АдресВременногоХранилища, "", ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		Возврат;
	Конецесли;
	
	поместитьКартинкуВНастройку(АдресВременногоХранилища,"Watermark");
	АдресВоднойМарки = "";
	ОбновитьОтображениеДанных();
	АдресВоднойМарки = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"Watermark");
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонвертацию(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Предупреждение("Необходимо записать настройку сайта");
		Возврат;
	КонецЕсли;
	
	Ф = ПолучитьФорму("Обработка.CMS1C_КонвертацияДанныхИзВА3НаВА5.Форма");
	Ф.Объект.НастройкаОбменаВА5 = Объект.Ссылка;
	Ф.Открыть();
КонецПроцедуры

ПРоцедура ЗаполнитьСпецсимволыПоУмолчанию()
	//Перед сверкой удаляем переносы строки
	//ДобавитьСпецсимволыЕслиНету(Символ(13),Символ(32),Истина,Ложь,Ложь);
	//ДобавитьСпецсимволыЕслиНету(Символ(10),Символ(32),Истина,Ложь,Ложь);
	//В тексте запроса меняем слеши
	ДобавитьСпецсимволыЕслиНету("\","\\",Ложь,Истина,Ложь,-1);
	ДобавитьСпецсимволыЕслиНету("'", "\'",Ложь,Истина,Ложь);
КонецПроцедуры

Процедура ДобавитьСпецсимволыЕслиНету(СимволКоторыйЗаменять,СимволНаКоторыйЗаменять,ЗаменятьПередСверкойИВернутьЗначениеОбратноПослеСверки,ЗаменятьПослеСверки,ЗаменятьПриЗагрузкеДанныхВТаблицуИзСайта,ПорядокСортировки = 0)
	Мен = РЕгистрыСведений.CMS1C_СпецсимволыДляЗамены.СоздатьМенеджерЗаписи();
	мен.НастройкаСайта = Объект.Ссылка;
	Мен.СимволКоторыйЗаменять = СимволКоторыйЗаменять;
	Мен.Прочитать();
	Если  Мен.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	Мен.НастройкаСайта = Объект.Ссылка;
	Мен.СимволКоторыйЗаменять = СимволКоторыйЗаменять;
	Мен.СимволНаКоторыйЗаменять = СимволНаКоторыйЗаменять;
	Мен.ЗаменятьПередСверкойИВернутьЗначениеОбратноПослеСверки = ЗаменятьПередСверкойИВернутьЗначениеОбратноПослеСверки;
	Мен.ЗаменятьПослеСверки = ЗаменятьПослеСверки;
	Мен.ЗаменятьПриЗагрузкеДанныхВТаблицуИзСайта = ЗаменятьПриЗагрузкеДанныхВТаблицуИзСайта;
	Мен.ПорядокСортировки = ПорядокСортировки;
	Мен.Записать();
КонецПроцедуры


&НаКлиенте
Процедура СписокСвойстваПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура НастройкиОбменаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СистемаУправленияСайтомПриИзменении(Элемент)
	CMS1C_ПроцедурыОбменаССайтомКлиентУправляемоеПриложение.УстановитьФормуДляНужнойCMS(ЭтаФорма,Объект.СистемаУправленияСайтом,Истина);
КонецПроцедуры

&НаКлиенте
Процедура РежимКопированияДанныхИзДругихСайтовПриИзменении(Элемент)
	УправлениеДоступностьюВидимостьюКлиент();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКопированияДанныхИзДругихСайтов()
	Возврат;
	Если Не ЗначениеЗаполнено(Объект.СистемаУправленияСайтом) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяПодсистема = Метаданные.Подсистемы.CMS1C_ОбменССайтами;
	ПодсистемаCMS = Метаданные.Подсистемы.CMS1C_ОбменССайтами.Подсистемы["CMS1C_"+СокрЛП(Объект.СистемаУправленияСайтом)];
	ДополнительнаяПодсистема = Метаданные.Подсистемы.CMS1C_ОбменССайтами.Подсистемы.CMS1C_ДополнительныеОбъекты;
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("НастройкаСайта");
	МассивИсключений.Добавить("Категория");
	МассивИсключений.Добавить("ТипТоваров");
	МассивИсключений.Добавить("Налог");
	МассивИсключений.Добавить("ОсновноеИзображение");
	МассивИсключений.Добавить("ОсновнойВариант");
	
	ИмяРеквизита = "Наименование";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИМяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	Для Каждого ТекРеквизит из Метаданные.Справочники.CMS1C_Номенклатура.Реквизиты Цикл
		ИмяРеквизита = ТекРеквизит.Имя;
		
		Если МассивИсключений.Найти(ИмяРеквизита)<> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
		Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
			ДобСтр.ИМяРеквизита = ИмяРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	ИмяРеквизита = "Теги";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИМяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	//ИмяРеквизита = "Категории";
	//СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	//Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
	//	ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
	//	ДобСтр.ИМяРеквизита = ИмяРеквизита;
	//КонецЕсли;
	
	ИмяРеквизита = "ПометкаУдаления";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИмяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	ИмяРеквизита = "ЗначенияСвойствОбъектов";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИмяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	ИмяРеквизита = "Изображения";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИМяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	ИмяРеквизита = "ТипТоваров(По наименованию)";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИМяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	ИмяРеквизита = "Налог(По наименованию)";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИМяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	ИмяРеквизита = "Категория(По наименованию и уровню иерархии)";
	СтруктураПоиска = Новый Структура("ИмяРеквизита",ИмяРеквизита);
	Если Объект.КопированиеДанныхИзДругихСайтов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобСтр = Объект.КопированиеДанныхИзДругихСайтов.Добавить();
		ДобСтр.ИМяРеквизита = ИмяРеквизита;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуНаФорму(ИмяЭлементаТЗНаФорме,ИмяРеквизитаТЗ,ТЗ) Экспорт
	
	УФ = ЭтаФорма;
   
   // СОЗДАНИЕ РЕКВИЗИТОВ ФОРМЫ
   МассивДобавляемыхРеквизитов = Новый Массив; 
   
   Для Каждого Колонка Из ТЗ.Колонки Цикл
      МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,ИмяЭлементаТЗНаФорме ,Колонка.Заголовок));   
   КонецЦикла; 
   
   //МассивУдаляемыхРеквизитов = УФ.ПолучитьРеквизиты(ИмяТЗНаФорме);
   //МассивИменУдаляемыхРеквизитов = Новый Массив;
   //
   //Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
   //   МассивИменУдаляемыхРеквизитов.Добавить(ИмяТЗНаФорме + "." + Элемент.Имя);
   //КонецЦикла; 
   
   //УФ.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов); 
   
   // СОЗДАНИЕ ЭЛЕМЕНТОВ ФОРМЫ
   //Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
   //	УдаляемыйЭлемент = УФ.Элементы.Найти(ИмяТЗНаФорме + Элемент.Имя);
   //	Попытка
   // 	   УФ.Элементы.Удалить(УдаляемыйЭлемент);
   //	Исключение
   //	КонецПопытки;
   //КонецЦикла; 
   
   Для Каждого Колонка Из ТЗ.Колонки Цикл
	   Попытка
		   НоваяКолонка = УФ.Элементы.Добавить(ИмяЭлементаТЗНаФорме + Колонка.Имя, Тип("ПолеФормы"), УФ.Элементы[ИмяЭлементаТЗНаФорме]); 
		   НоваяКолонка.Заголовок = Колонка.Заголовок; 
		   НоваяКолонка.ПутьКДанным = ИмяРеквизитаТЗ + "." + Колонка.Имя;
		   НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		   НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	   Исключение
	   КонецПопытки;
   КонецЦикла;    
   
   //УФ[ИмяТЗНаФорме].Загрузить(ТЗ);
   
   // Привязка обработчиков событий
   //Если ТЗОбработчиковСобытий = Неопределено Тогда
   //   Возврат;
   //КонецЕсли;   
   
   //Для Каждого Строка Из ТЗОбработчиковСобытий Цикл
   //   УФ.Элементы[Строка.ИмяЭлемента].УстановитьДействие(Строка.ИмяСобытия, Строка.ИмяЭлемента + Строка.ИмяСобытия); 
   //КонецЦикла;   
   
КонецПроцедуры


Процедура УстановитьФункциональныеОпцииСистемыУправленияСайтом()
	Об = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(Объект.СистемаУправленияСайтом);
	Попытка
		Об.УстановитьФункциональныеОпцииСистемыУправленияСайтом();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборСтатусов(Команда)
	Ф = ПолучитьФорму("Справочник.CMS1C_СтатусыЗаказов.Форма.ФормаВыбора",,Элементы.СтатусыДляЗагрузки);
	ДобСтр = Ф.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ДобСтр.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	ДобСтр.ПравоеЗначение = Объект.Ссылка;
	ДобСтр.ИСпользование = Истина;
	Ф.ЗакрыватьПриВыборе = Ложь;
	Ф.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыДляЗагрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива из ВыбранноеЗначение Цикл
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("СтатусЗаказа",ЭлементМассива);
			Если объект.СтатусыДляЗагрузки.НайтиСтроки(СтруктураПоиска).Количество() <> 0 Тогда
				Продолжить;
			Конецесли;
			
			ДобСтр = Объект.СтатусыДляЗагрузки.Добавить();
			ДобСтр.СтатусЗаказа = ЭлементМассива;
		КонецЦИкла;
	Иначе
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("СтатусЗаказа",ВыбранноеЗначение);
		Если объект.СтатусыДляЗагрузки.НайтиСтроки(СтруктураПоиска).Количество() <> 0 Тогда
			Возврат;
		Конецесли;
		ДобСтр = Объект.СтатусыДляЗагрузки.Добавить();
		ДобСтр.СтатусЗаказа = ВыбранноеЗначение;
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонвертациюВА3_ВА3(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Предупреждение("Необходимо записать настройку сайта");
		Возврат;
	КонецЕсли;
	
	Ф = ПолучитьФорму("Обработка.CMS1C_КонвертацияДанныхИзВА3НаВА3УНИ.Форма");
	Ф.Объект.НастройкаОбменаВА5 = Объект.Ссылка;
	Ф.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяЗагрузкаОстатков(Команда)
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Для загрузки цен необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Попытка
		ЭтаФорма.Записать();
		Исключение
			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
		КонецПопытки;
	КонецЕсли;
	
	Если НастройкаОбменаДляОтбора.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	ВвестиЗначение(ТекСклад,"Выберите склад");
	
	Если Не ЗначениеЗаполнено(ТекСклад) Тогда
		Возврат;
	КонецЕсли;
	
	Док = СоздатьСсылкуОприходованиеИзлишков(НастройкаОбменаДляОтбора,ТекСклад);
	Если Док = Неопределено Тогда
		Сообщить("Документ ""Оприходование товаров"" не был создан");
		Возврат;
	КонецЕсли;
	
	Док.ПолучитьФорму().Открыть();
КонецПроцедуры

&НаСервере
Функция СоздатьСсылкуУстановкиЦен(ТекущаяНастройкаОБмена)
	ОбработкаОбмена = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(Объект.СистемаУправленияСайтом);//Обработки.ВА5_ОбработкаОбмена.Создать();
	ОбработкаОбмена.НастройкаСайта = Объект.Ссылка;
	ЗаполнитьЗначенияСвойств(ОбработкаОбмена,Объект.Ссылка);
	
	ОбъектУстановкаЦен = ОбработкаОбмена.ПолучитьУстановкуЦенОбъект(ТекущаяНастройкаОБмена);
	
	Если ОбъектУстановкаЦен = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектУстановкаЦен.Записать();
	//СтруктураНовыхДокументов.Оприходование.Записать();
	//ЗначениеВДанныеФормы(СтруктураНовыхДокументов.УстановкаЦен,ДокументУстановкиЦен);
	//ЗначениеВДанныеФормы(СтруктураНовыхДокументов.Оприходование,ДокументОприходование);
	Возврат ОбъектУстановкаЦен.Ссылка;
КонецФункции

&НаСервере
Функция СоздатьСсылкуОприходованиеИзлишков(ТекущаяНастройкаОбмена,ТекущийСклад)
	ОбработкаОбмена = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(Объект.СистемаУправленияСайтом);//Обработки.ВА5_ОбработкаОбмена.Создать();
	ОбработкаОбмена.НастройкаСайта = Объект.Ссылка;
	ЗаполнитьЗначенияСвойств(ОбработкаОбмена,Объект.Ссылка);
	
	ДокументОбъект = ОбработкаОбмена.ПолучитьОприходованиеОбъект(ТекущаяНастройкаОБмена,ТекущийСклад);
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументОбъект.Записать();
	//СтруктураНовыхДокументов.Оприходование.Записать();
	//ЗначениеВДанныеФормы(СтруктураНовыхДокументов.УстановкаЦен,ДокументУстановкиЦен);
	//ЗначениеВДанныеФормы(СтруктураНовыхДокументов.Оприходование,ДокументОприходование);
	Возврат ДокументОбъект.Ссылка;
КонецФункции

&НаКлиенте
Процедура ПервоначальнаяЗагрузкаЦенИОстатков(Команда)
Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Ответ = Вопрос("Для загрузки цен необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Попытка
		ЭтаФорма.Записать();
		Исключение
			Сообщить("Не удалось записать объект в форме. Закройте форму нажав кнопку ОК для сохранения.");
		КонецПопытки;
		
	КонецЕсли; 
	//Предупреждение("Цены будут загружены в валюте указанного типа цен, оприходование остатков будет сделано с учетом наценки в типе цен!");
	//Предупреждение("Остатки будут загружены из таблицы продуктов без разбивки по характеристикам, такой информации сайт не хранит!");
	
	
	
	ТекНастройкаОбмена = ПредопределенноеЗначение("Справочник.CMS1C_НастройкиОбменаССайтом.ПустаяСсылка");
	
	Если ВвестиЗначение(ТекНастройкаОбмена,"Укажите настройку обмена для отбора товаров...")= Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекНастройкаОбмена.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипЦен = ПолучитьРеквизитОбъекта(ТекНастройкаОбмена,"ТипЦен");
	ТипЦенСтараяЦена = ПолучитьРеквизитОбъекта(ТекНастройкаОбмена,"ТипЦенСтараяЦена");
	ТипЦенЗакупочнаяЦена = ПолучитьРеквизитОбъекта(ТекНастройкаОбмена,"ТипЦенЗакупочнаяЦена");
	
	Если НЕ ЗначениеЗаполнено(ТипЦен)
		И НЕ ЗначениеЗаполнено(ТипЦенСтараяЦена)
		И НЕ ЗначениеЗаполнено(ТипЦенЗакупочнаяЦена)
		Тогда
 		Сообщить("В настройке обмена не установлены цены закупки, продажи, старая");
		Возврат;
	КонецЕсли;
	
	СтруктураНовыхДокументов = ЗагрузитьУстановкуЦенОстатковИВернутьНезаписанныеОбъекты(ТекНастройкаОбмена);
	Если СтруктураНовыхДокументов = Неопределено Тогда
		Сообщить("Документы не были созданы");
		Возврат;
	КонецЕсли;
	
	//СтруктураНовыхДокументов.УстановкаЦен.Записать();
	СтруктураНовыхДокументов.УстановкаЦен.ПолучитьФорму().Открыть();
	СтруктураНовыхДокументов.Оприходование.получитьФорму().открыть();
	
	
КонецПроцедуры
//&НаКлиенте
//Процедура ГруппаСтраницыНастройкиКопированияДанныхИзДругихСайтовПриСменеСтраницы(Элемент, ТекущаяСтраница)
//	ПриИзмененииСтраницыКопирования();
//КонецПроцедуры

//Процедура ПриИзмененииСтраницыКопирования()
//	ТекущаяСтраница = Элементы.ГруппаСтраницыНастройкиКопированияДанныхИзДругихСайтов.ТекущаяСтраница;
//	ТекущаяСтраницаИмя = ТекущаяСтраница.Имя;
//	
//	КопированиеДанныхИзДругихСайтов.Очистить();
//	
//	Если Лев(ТекущаяСтраницаИмя,10) = "Справочник" Тогда
//		ИмяСправочника = Сред(ТекущаяСтраницаИмя,12);
//		МетаданныеОбъекта = Метаданные.Справочники[ИмяСправочника];
//		
//		Для Каждого ТекРеквизит из МетаданныеОбъекта.Реквизиты Цикл
//			ДобСтр = КопированиеДанныхИзДругихСайтов.Добавить();
//			ДобСтр.ИмяСправочника = ИмяСправочника;
//			ДобСтр.ИмяРеквизита = ТекРеквизит.Имя;
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//ПРоцедура УстановитьФормуДляНужнойCMS()
//	Если Не ЗначениеЗаполнено(Объект.СистемаУправленияСайтом) Тогда
//		Возврат;
//	КОнецЕсли;
//	
//	НовоеИмяФормы = "Обработка.CMS1C_"+СокрЛП(Объект.СистемаУправленияСайтом)+"_ОбработкаОбмена.Форма.ФормаНастройкиСайта";
//	
//	Если ЭтаФорма.ИмяФормы = НовоеИмяФормы Тогда
//		Возврат;
//	КОнецЕсли;
//	
//	УОбработкиЕстьФормаНастройкиСайта = УОбработкиЕстьНужнаяФорма("CMS1C_"+СокрЛП(Объект.СистемаУправленияСайтом)+"_ОбработкаОбмена","ФормаНастройкиСайта");
//	Если Не УОбработкиЕстьФормаНастройкиСайта Тогда
//		Если ЭтаФорма.ИмяФормы = "Справочник.CMS1C_НастройкиСайтов.Форма.ФормаЭлемента" Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТекСистемаУправленияСайтом = Объект.СистемаУправленияСайтом;
//	ЭтаФорма.Модифицированность = Ложь;
//	ЭтаФорма.Закрыть();
//	
//	Структ = Новый Структура("Ключ",Объект.Ссылка);
//	Если УОбработкиЕстьФормаНастройкиСайта Тогда
//		Ф = ПолучитьФорму("Обработка.CMS1C_"+СокрЛП(Объект.СистемаУправленияСайтом)+"_ОбработкаОбмена.Форма.ФормаНастройкиСайта",Структ);
//		Ф.Объект.СистемаУправленияСайтом = ТекСистемаУправленияСайтом;
//	Иначе
//		Ф = ПолучитьФорму("Справочник.CMS1C_НастройкиСайтов.Форма.ФормаЭлемента",Структ);
//		Ф.Объект.СистемаУправленияСайтом = ТекСистемаУправленияСайтом;
//	Конецесли;
//	
//	//ЗаполнитьЗначенияСвойств(Ф.Объект,Объект,,"СтатусыДляЗагрузки");
//	
//	Ф.Открыть();
//	
//КонецПроцедуры

//Функция УОбработкиЕстьНужнаяФорма(ИмяОбработки,ТекИмяФормы)
//	Возврат Метаданные.Обработки[ИмяОбработки].Формы.Найти(ТекИмяФормы)<> Неопределено;
//КонецФункции


//&НаКлиенте
//Процедура СистемаУправленияСайтомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
//	
//КонецПроцедуры

