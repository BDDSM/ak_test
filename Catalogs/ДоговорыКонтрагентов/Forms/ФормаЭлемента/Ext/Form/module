
Перем КэшАвтоНаименование, ПервоначальноеЗначениеПолученОригинал;


Процедура ЗаполнитьНовыйПоСпискуОтборов()

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСправочника = Метаданные().Реквизиты;
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСправочника.Найти(ЭлементОтбора.Имя) = Неопределено 
			И ЭлементОтбора.Имя <> "Владелец" 
			И ЭлементОтбора.Имя <> "Родитель" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение[0].Значение;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет реквизиты нового элемента справочника
//
Процедура ЗаполнитьНовыйЭлемент() Экспорт
	
	ЗаполнитьНовыйПоСпискуОтборов();

	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	//Если ЗначениеЗаполнено(Организация) Тогда
	//	Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	//Иначе
	//	ОсновнаяОрганизация = глЗначениеПеременной("ОсновнаяОрганизация");
	//	Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
	//		Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОсновнаяОрганизация);
	//	КонецЕсли;
	//КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Владелец) Тогда
			ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНовыйЭлемент()

Процедура УстановитьВидимостьПеречисленияВБюджет()
	
	Если НЕ ЭтотОбъект.ПеречислениеВБюджет Тогда
		ЭлементыФормы.НадписьКодБК.Видимость	= Ложь;
		ЭлементыФормы.НадписьКодОКТМО.Видимость	= Ложь;
		ЭлементыФормы.КодБК.Видимость			= Ложь;
		ЭлементыФормы.КодОКТМО.Видимость		= Ложь;
	Иначе
		ЭлементыФормы.НадписьКодБК.Видимость	= Истина;
		ЭлементыФормы.НадписьКодОКТМО.Видимость	= Истина;
		ЭлементыФормы.КодБК.Видимость			= Истина;
		ЭлементыФормы.КодОКТМО.Видимость		= Истина;
	КонецЕсли;	
	
	ЭлементыФормы.НадписьОбразецПлатежногоПорученияНДФЛ.Видимость 	= УплачиватьНДФЛЗаКонтрагента;
	ЭлементыФормы.ОбразецПлатежногоПорученияНДФЛ.Видимость 			= УплачиватьНДФЛЗаКонтрагента;
	
КонецПроцедуры	

Процедура УстановитьВидимостьСчетовИСубконто()

	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетЗатрат), 0, СчетЗатрат.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто;
		Если Флаг Тогда
			ЭлементыФормы["НадписьСубконто"+К].Заголовок = СчетЗатрат.ВидыСубконто[К-1].ВидСубконто.Наименование + ":";
		КонецЕсли;
		ЭлементыФормы["Субконто"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконто" + К].Видимость = Флаг;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	ЭлементыФормы.ТипДоговора.Видимость = (ЭтотОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
											ИЛИ ЭтотОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
											
	ЭлементыФормы.НадписьТипДоговора.Видимость = (ЭтотОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
											ИЛИ ЭтотОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
											ИЛИ ЭтотОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Финансовый);

	мВидимостьАренда = (ЭтотОбъект.ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда);
	
	ЭлементыФормы.НадписьАР_Периодичность.Видимость 	= мВидимостьАренда;
	ЭлементыФормы.Периодичность.Видимость 				= мВидимостьАренда;
	ЭлементыФормы.НадписьЧислоОплатыАренды.Видимость 	= мВидимостьАренда;
	ЭлементыФормы.ЧислоОплатыАренды.Видимость			= мВидимостьАренда;
	ЭлементыФормы.НадписьСрокОплатыАренды.Видимость		= мВидимостьАренда;
	ЭлементыФормы.СрокОплатыАренды.Видимость			= мВидимостьАренда;
	ЭлементыФормы.НадписьПериодОплатыАренды.Видимость	= мВидимостьАренда;
	ЭлементыФормы.ПериодОплатыАренды.Видимость			= мВидимостьАренда;
	ЭлементыФормы.НадписьОбъектАренды.Видимость			= мВидимостьАренда;
	ЭлементыФормы.ОбъектАренды.Видимость				= мВидимостьАренда;
	ЭлементыФормы.НадписьТорговаяТочка.Видимость		= мВидимостьАренда;
	ЭлементыФормы.ТорговаяТочка.Видимость				= мВидимостьАренда;
	
	ЭлементыФормы.НадписьЕдинаяСтоимость.Видимость 		  = ЕдинаяСтоимостьУслугиПоставщика;
	ЭлементыФормы.НадписьИсторияЕдинойСтоимости.Видимость = ЕдинаяСтоимостьУслугиПоставщика;
	ЭлементыФормы.СоставСтруктурныхЕдиниц.Колонки.ТекущаяЦена.Видимость = Не ЕдинаяСтоимостьУслугиПоставщика;
	ЭлементыФормы.Панель1.Страницы.СтраницаУслугаПоставщика.Видимость = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	ВидимостьФинансы = (ЭтотОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Финансовый);	
	
	ЭлементыФормы.НадписьСуммаДоговора.Видимость = ВидимостьФинансы;
	ЭлементыФормы.СуммаДоговора.Видимость = ВидимостьФинансы;
	ЭлементыФормы.НадписьПроцентнаяСтавка.Видимость = ВидимостьФинансы;
	ЭлементыФормы.ПроцентнаяСтавка.Видимость = ВидимостьФинансы;
	ЭлементыФормы.ТипДоговораФинансы.Видимость = ВидимостьФинансы;
	
	ЭлементыФормы.АвансовыйКонтрагент.Видимость = (ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.ПоставкаУслуг);
	ЭлементыФормы.НадписьСрокПоставки.Видимость = (ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.ПоставкаУслуг);
	ЭлементыФормы.СрокПоставки.Видимость = (ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.ПоставкаУслуг);
	ЭлементыФормы.ФакторинговаяКомпания.Видимость = РасчетыЧерезФК;
	ЭлементыФормы.ФакторинговаяКомпанияДоговор.Видимость = РасчетыЧерезФК;
	ЭлементыФормы.НадписьФакторинговаяКомпания.Видимость = РасчетыЧерезФК;
	ЭлементыФормы.НадписьФакторинговаяКомпанияДоговор.Видимость = РасчетыЧерезФК;
	
	//+++АК LAGP 2017.12.27 ИП-00017453.01 По этому признаку добавляется печатная форма "Приложение" к письму оператору связи.
	ЭлементыФормы.ОтправлятьПриложениеКЗаявкеНаРоуминг.Видимость = (СтатьяДвиженияДенежныхСредств.Код = "139320"); //Статья ДДС "Оплата корпоративной связи"
	
	МассивПраваНеАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамКромеАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ПравоНеАренда=МассивПраваНеАренда[0];
	
	Если ОтправлятьПриложениеКЗаявкеНаРоуминг И (ПравоНеАренда ИЛИ РольДоступна("ПолныеПрава")) Тогда
		ЭлементыФормы.НадписьКодовоеСлово.Видимость = (СтатьяДвиженияДенежныхСредств.Код = "139320"); //Статья ДДС "Оплата корпоративной связи"
		ЭлементыФормы.КодовоеСлово.Видимость 		= (СтатьяДвиженияДенежныхСредств.Код = "139320"); //Статья ДДС "Оплата корпоративной связи"
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК LAGP 2018.05.04 ИП-00018465 Учет расчетов с ТТПерекресток.	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ЭлементыФормы.СторонняяРозницаРасчетыПоРТУ.Видимость = Истина;
		Если СторонняяРозницаРасчетыПоРТУ Тогда
			ЭлементыФормы.Панель1.Страницы.СтраницаСторонниеТТ.Видимость = СторонняяРозницаРасчетыПоРТУ;	
			ПривязкаСтороннихМагазиновКДоговорам.Отбор.ДоговорКонтрагента.ВидСравнения = ВидСравнения.Равно;
			ПривязкаСтороннихМагазиновКДоговорам.Отбор.ДоговорКонтрагента.Значение = ЭтотОбъект.Ссылка;
			ПривязкаСтороннихМагазиновКДоговорам.Отбор.ДоговорКонтрагента.Использование = Истина;
			
			ПривязкаСтороннихМагазиновКДоговорам.Отбор.Активный.ВидСравнения = ВидСравнения.Равно;
			ПривязкаСтороннихМагазиновКДоговорам.Отбор.Активный.Значение = Истина;
			ПривязкаСтороннихМагазиновКДоговорам.Отбор.Активный.Использование = Истина;
		КонецЕсли;	
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

Процедура УстановитьДоступностьСУчетомОтбора()

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения <> ВидСравнения.Равно Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы = ЭлементыФормы.Найти(ЭлементОтбора.Имя);
		
		ЕстьЭлементФормы = ЭлементФормы <> Неопределено;
								   
		Если ЕстьЭлементФормы Тогда
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеВвода") Тогда
				ЭлементФормы.ТолькоПросмотр = Истина;
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("Флажок") Тогда
				ЭлементФормы.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьДоступностьСубконто()
	
	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетЗатрат), 0, СчетЗатрат.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто;
		Если Флаг Тогда
			// Субконто ТорговыеТочки и ЦФО не доступны, т.к. будут заполняться автоматически
			Если СчетЗатрат.ВидыСубконто[К-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
				// ЦФО понадобится если для точки не определено, в обработке по автоматическому формировнию
				//ИЛИ СчетЗатрат.ВидыСубконто[К-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ЦФО Тогда
				
				ЭлементыФормы["Субконто" + К].Доступность = Ложь;
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	ЭлементыФормы.КоманднаяПанельСоставСтруктурныхЕдиниц.Кнопки.ИзменитьЦены.Доступность = НЕ ЕдинаяСтоимостьУслугиПоставщика;
	ЭлементыФормы.СчетЗатрат.Доступность = АвтоматическиНачислятьУслугуПоставщика;
	ЭлементыФормы.СрокПоставки.Доступность = АвансовыйКонтрагент;
	
КонецПроцедуры

Процедура УстановитьДоступностьКнопкиЗаполнитьПоДопСоглашению()
	
	ЭлементыФормы.КоманднаяПанельСоставСтруктурныхЕдиниц.Кнопки.ЗаполнитьПоДопСоглашению.Доступность = ЭтотОбъект.АвтоматическиНачислятьУслугуПоставщика;
	
КонецПроцедуры

Процедура УстановитьДоступностьПоДопПравам()
	
	ПолныеПраваНаДоговораАренды = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамАренды, Ложь);
	ПолныеПраваКромеАренды = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамКромеАренды, Ложь);
	
	Если НЕ ЭтотОбъект.Ссылка.Пустая() Тогда
		Если НЕ (РольДоступна("УчетДоговоров") И ((ПолныеПраваНаДоговораАренды
					И ЭтотОбъект.ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда)
					ИЛИ (ПолныеПраваКромеАренды И НЕ ЭтотОбъект.ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда))   //+++АК LAGP 2017.12.04 ИП-00017389 Добавил "ПолныеПраваКромеАренды", проверку на новый и "УчетДоговоров"
					ИЛИ РольДоступна("ПолныеПрава")) Тогда
			//+++АК sils 02.04.2018 ИП-00018302
			//ЭтаФорма.ТолькоПросмотр = Истина;
			ЭтаФорма.ТолькоПросмотр = Ложь;
			Для каждого ТекЭлем из ЭтаФорма.ЭлементыФормы Цикл
				Если ТипЗнч(ТекЭлем) = Тип("ПолеВвода") или
					 ТипЗнч(ТекЭлем) = Тип("ТабличноеПоле") или
					 ТипЗнч(ТекЭлем) = Тип("ПолеВыбора") или
					 ТипЗнч(ТекЭлем) = Тип("ПолеСписка") Тогда
					ТекЭлем.ТолькоПросмотр = Истина;
				КонецЕсли;
				Если (ТипЗнч(ТекЭлем) = Тип("Флажок") или
					ТипЗнч(ТекЭлем) = Тип("КоманднаяПанель")) и
					СокрЛП(ТекЭлем.Имя) <> "ОсновныеДействияФормы" Тогда
					ТекЭлем.Доступность = Ложь;
				КонецЕсли;
			КонецЦикла;
			ПравоСохранить = Ложь;
			Если РольДоступна("ПравоИзмененияСтавкиНДСВДоговорах") Тогда
				ЭлементыФормы.СтавкаНДС.ТолькоПросмотр = Ложь;
				ПравоСохранить = Истина;
			КонецЕсли;
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность = ПравоСохранить;
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить.Доступность = ПравоСохранить;
			//---АК
		Иначе
			ЭтаФорма.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьТекстОНесоответствииОтбору(ТекстСообщения, ЭлементОтбора)

	ТекстСообщения = ТекстСообщения
	                        + ЭлементОтбора.Представление      + " "  
							+ НРег(ЭлементОтбора.ВидСравнения) + " """ 
							+ Строка(ЭлементОтбора.Значение)   + """" + Символы.ПС;
	
КонецПроцедуры // ДополнитьТекстОНесоответствииОтбору()

Функция ПроверитьСоответствиеЭлементаОтбору(ТекстСообщенияОбОшибках = "")

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементСоответствуетОтбору = Истина;
	ТекстСообщенияОбОшибках = "";
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		
			Если ЭтотОбъект[ЭлементОтбора.Имя] <> ЭлементОтбора.Значение Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		
			Если ЭлементОтбора.Значение.НайтиПоЗначению(ЭтотОбъект[ЭлементОтбора.Имя]) = Неопределено Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
			Если ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		
			Если ЭлементОтбора.Значение.НайтиПоЗначению(ЭтотОбъект[ЭлементОтбора.Имя]) <> Неопределено Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ ЭлементСоответствуетОтбору Тогда
		ТекстСообщенияОбОшибках = "Должны выполняться следующие условия:" + Символы.ПС
		                        + ТекстСообщенияОбОшибках
		                        + "Элемент не может быть записан!"
	КонецЕсли;
	
	Возврат ЭлементСоответствуетОтбору;

КонецФункции

// Процедура заполняет список значений для выбора ЭУ ВидДоговора
//
Процедура ЗаполнитьСписокВыбораВидаДоговора()

	СписокПеречисления = Новый СписокЗначений;
	
	ЕстьОтбор               = ТипЗнч(СписокОтборов) = Тип("Отбор");
	ЕстьОтборПоВидуДоговора = ЕстьОтбор 
	                        И СписокОтборов.Найти("ВидДоговора") <> Неопределено 
							И СписокОтборов.ВидДоговора.Использование;
							
	Если ЕстьОтборПоВидуДоговора Тогда
		
		Если СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.Равно Тогда
			СписокПеречисления.Добавить(СписокОтборов.ВидДоговора.Значение);
		ИначеЕсли СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.ВСписке Тогда
			СписокПеречисления.ЗагрузитьЗначения(СписокОтборов.ВидДоговора.Значение.ВыгрузитьЗначения());
		ИначеЕсли СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.НеРавно Тогда
			Для каждого ЗначениеПеречисления Из Перечисления.ВидыДоговоровКонтрагентов Цикл
				Если ЗначениеПеречисления <> СписокОтборов.ВидДоговора.Значение Тогда
					СписокПеречисления.Добавить(ЗначениеПеречисления);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.НеВСписке Тогда
			Для каждого ЗначениеПеречисления Из Перечисления.ВидыДоговоровКонтрагентов Цикл
				Если СписокОтборов.ВидДоговора.Значение.НайтиПоЗначению(ЗначениеПеречисления) = Неопределено Тогда
					СписокПеречисления.Добавить(ЗначениеПеречисления);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	Иначе
		
		мСПоставщиком = ЭтотОбъект.Владелец.ЯвляетсяПоставщиком;
		мСПокупателем = ЭтотОбъект.Владелец.ЯвляетсяПокупателем;
		Если мСПоставщиком
				ИЛИ мСПокупателем Тогда
			Если мСПоставщиком Тогда
				СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			КонецЕсли;
			Если мСПокупателем Тогда
				СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			КонецЕсли;
		Иначе
			Для каждого ЗначениеПеречисления Из Перечисления.ВидыДоговоровКонтрагентов Цикл
				СписокПеречисления.Добавить(ЗначениеПеречисления);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.ВидДоговора.СписокВыбора = СписокПеречисления;
	
	ВидДоговораНеВСписке = СписокПеречисления.НайтиПоЗначению(ВидДоговора) = Неопределено;
	
	//+++АК LAGP 2018.03.23 ИП-00018219 В некоторых случаях существует договор с покупателем, когда контрагент поставщик. В таких случаях в базе записан "С покупателем", а при открытии он изменяется на "С поставщиком".
	//Если ВидДоговораНеВСписке И ЭтотОбъект.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Финансовый Тогда
	Если ВидДоговораНеВСписке И ЭтотОбъект.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Финансовый И ЭтотОбъект.ЭтоНовый() Тогда
	//---АК LAGP
	
		ЭтотОбъект.ВидДоговора = СписокПеречисления[0].Значение;
	КонецЕсли;
	
	ЭлементыФормы.ВидДоговора.Значение = ЭтотОбъект.ВидДоговора;

КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++ak ziga ИП-00015987 2017111201
	Если Не ЭтоНовый() Тогда
	Аренда=?(ТипДоговора=Перечисления.ТипыДоговоровСПоставщиком.Аренда,Истина,Ложь);	
	//НаименованиеДопПрава="Полный доступ к договорам аренды";	
	МассивПраваАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ПравоАренда=МассивПраваАренда[0];
	//НаименованиеДопПрава="Полный доступ к договорам, кроме аренды";	
	МассивПраваНеАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамКромеАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ПравоНеАренда=МассивПраваНеАренда[0];

	Если РольДоступна("ПолныеПрава") Тогда
		Если Аренда Тогда
			ЭтаФорма.ТолькоПросмотр=Не ПравоАренда;
			Если не ПравоАренда Тогда
			Сообщить("Нет прав на изменение договоров с типом Аренда");
			КонецЕсли;
			//Отказ=Не ПравоАренда;
		Иначе
			ЭтаФорма.ТолькоПросмотр=Не ПравоНеАренда;
			Если не ПравоНеАренда Тогда
			Сообщить("Нет прав на изменение договоров с типом не Аренда");
			КонецЕсли;
			//Отказ=Не ПравоНеАренда;
		КонецЕсли;
		Если Не РольДоступна("УчетДоговоров") Тогда
			Если Не ПравоАренда и (Не ПравоНеАренда) Тогда
				ЭтаФорма.ТолькоПросмотр=Истина;
				Сообщить("Нет доп прав на изменение договоров");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;
	//---ak ziga ИП-00015987 2017111201	
	ЗаполнитьСписокВыбораВидаДоговора();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		//ВестиВзаиморасчетыПоПериодам 	= Истина;
		ЭтотОбъект.Периодичность 		= Перечисления.Периодичность.Месяц;
		ЭтотОбъект.ЧислоОплатыАренды 	= 1;
		ЭтотОбъект.СрокОплатыАренды 	= 5;
		ЭтотОбъект.ПериодОплатыАренды 	= Перечисления.ВидыПериодовОплатыАренды.Текущий;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда

		ЗаполнитьНовыйЭлемент();

	КонецЕсли;
	
	Если (НЕ ЭтоНовый())
			И НЕ РольДоступна("ПравоИзмененияСтавкиНДСВДоговорах") Тогда
		ЭлементыФормы.СтавкаНДС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьДоступность();
	
	УстановитьВидимостьПеречисленияВБюджет();
	УстановитьВидимостьСчетовИСубконто();
	УстановитьДоступностьСубконто();
	
	ЭлементыФормы.ТипДоговора.СписокВыбора.Добавить(Перечисления.ТипыДоговоровСПоставщиком.ПоставкаТоваров);
	ЭлементыФормы.ТипДоговора.СписокВыбора.Добавить(Перечисления.ТипыДоговоровСПоставщиком.ПоставкаУслуг);
	ЭлементыФормы.ТипДоговора.СписокВыбора.Добавить(Перечисления.ТипыДоговоровСПоставщиком.Аренда);
	
	ЭлементыФормы.ТипДоговораФинансы.СписокВыбора.Добавить(Перечисления.ТипыДоговоровФинансы.Депозит);
	ЭлементыФормы.ТипДоговораФинансы.СписокВыбора.Добавить(Перечисления.ТипыДоговоровФинансы.Займ);
	ЭлементыФормы.ТипДоговораФинансы.СписокВыбора.Добавить(Перечисления.ТипыДоговоровФинансы.Кредит);
	
	
	ОбновитьНадписьЕдинаяСтоимость();
	
	КэшАвтоНаименование = ПолучитьАвтоНаименование();
	ПервоначальноеЗначениеПолученОригинал = ЭтотОбъект.ПолученОригинал;
	
	УстановитьДоступностьКнопкиЗаполнитьПоДопСоглашению();
	
	//
	УстановитьДоступностьПоДопПравам();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Перем ТекстСообщенияОбОшибках;
	
	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле <Вид договора>");
		Отказ = Истина;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		Если НЕ ЗначениеЗаполнено(ТипДоговора) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле <Тип договора>", Отказ);
		ИначеЕсли ТипДоговора <> Перечисления.ТипыДоговоровСПоставщиком.Аренда И ЭтоНовый() Тогда
			Если Вопрос("Этот договор является договором аренды?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Финансовый Тогда
		Если НЕ ЗначениеЗаполнено(ТипДоговораФинансы) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле <Тип договора финансовый>", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Периодичность) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле <Периодичность>", Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ПериодОплатыАренды) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле <Период оплаты аренды>", Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ОбъектАренды) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле <Объект аренды>", Отказ);
		КонецЕсли;
	КонецЕсли;

	ЭлементСоответствуетОтбору = ПроверитьСоответствиеЭлементаОтбору(ТекстСообщенияОбОшибках);
	Отказ = НЕ ЭлементСоответствуетОтбору;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибках);
	КонецЕсли;
	
	//Если ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.ПоставкаТоваров И КоличествоДнейОтсрочки = 0 Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не указано количество дней отсрочки.", Отказ);
	//КонецЕсли;
	
	// Контроль принадлежности структурной единицы Организации
	//На ВКУСВИЛЛ  - с типом розничной точки "магазин"
	//НА ЛУГДАПОЛЕ и ПРОЧИЕ ОРГАНИЗАЦИИ - с типом розничной точки "избенка"
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ТипРозничнойТочки <> &НужныйТип
	|			ТОГДА ВЫБОР
	// "Все" можно относить к любому типу
	|					КОГДА СтруктурныеЕдиницы.id_TT = 10969 
	|						ТОГДА ЛОЖЬ
	// "Вкусвил (общий)" на магазины
	|					КОГДА СтруктурныеЕдиницы.id_TT = 10750
	|							И &НужныйТип = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Ошибка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&МассивТочек)");
	
	Запрос.УстановитьПараметр("МассивТочек"	, СоставСтруктурныхЕдиниц.ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	Запрос.УстановитьПараметр("НужныйТип"	, ?(Организация.Код = "000000006", Перечисления.ТипыРозничныхТочек.Магазин, Перечисления.ТипыРозничныхТочек.Избенка));
	
	ТаблицаДляПроверки = Запрос.Выполнить().Выгрузить();
	НайденныеСтроки = ТаблицаДляПроверки.НайтиСтроки(Новый Структура("Ошибка", Истина));
	
	Отказ = НайденныеСтроки.Количество();
	Для Каждого Стр Из НайденныеСтроки Цикл
		Сообщить("На вкладке ""Услуга поставщика"" тип розничной точки у точки " + (Стр.СтруктурнаяЕдиница) +
					" не соответствует организации, выбранной в договоре. Необходимо убрать данную точку из договора.");
	КонецЦикла;
	
	//
	Если ЭтотОбъект.АвтоматическиНачислятьУслугуПоставщика Тогда
		МассивТТ = ПолучитьТорговыеТочкиДопСоглашения();
		Для Каждого мТорговаяТочка Из МассивТТ Цикл
			Если ЭтотОбъект.СоставСтруктурныхЕдиниц.Найти(мТорговаяТочка, "СтруктурнаяЕдиница") = Неопределено Тогда
				ОбщегоНазначения.СообщитьОбОшибке("На вкладке ""Услуга поставщика"" не указана торговая точка """ +
													СокрЛП(мТорговаяТочка.Наименование) + """, указанная в доп. соглашении");//, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтотОбъект.РасчетыЧерезФК Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.ФакторинговаяКомпания) ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ФакторинговаяКомпанияДоговор) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("При расчете через факторинговую компанию необходимо указание контрагента и договора факторинга", Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	//+++АК LAGP 2018.10.05 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ссылка) 
		И ЗначениеЗаполнено(ЭтотОбъект.Владелец) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Владелец, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")
		И НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref") = "IzbenkaFin" Тогда
		
		Бухгалтер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Владелец, "ОсновнойБухгалтерПокупателя");
		Если ЗначениеЗаполнено(Бухгалтер) И ТипЗнч(Бухгалтер) = Тип("СправочникСсылка.Пользователи") Тогда
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Бухгалтер, "ФизЛицо"));			
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Адрес) Тогда
			Адрес = "lagp@automacon.ru";	
		КонецЕсли;	
		
		СтруктураПисьма = Новый Структура;
		Кому = Новый СписокЗначений;
		Кому.Добавить(Адрес);		
		
		Тема = "Создан новый договор с контрагентом " + ЭтотОбъект.Владелец;
		Тело = "В 1С-Финансы создан новый договор с контрагентом " + ЭтотОбъект.Владелец + Символы.ПС;
		Тело = Тело + "Наименование - " + ЭтотОбъект.Наименование + Символы.ПС;
		Тело = Тело + "Организация - " + ЭтотОбъект.Организация + Символы.ПС;
		Тело = Тело + "Номер - " + ЭтотОбъект.Номер + Символы.ПС + Символы.ПС;
		Тело = Тело + "Инициатор рассылки - " + ПараметрыСеанса.ТекущийПользователь;
		
		Тело = Тело + Символы.ПС + Символы.ПС + "Адрес получателя - " + Адрес;
		
		Если Адрес = "lagp@automacon.ru" Тогда
			Тело = Тело + Символы.ПС + "Основной бухгалтер контрагента - " + Бухгалтер;	
			Тело = Тело + Символы.ПС + "Адрес инициатора рассылки - " +  УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "ФизЛицо"));
		КонецЕсли;	
		
		СтруктураПисьма.Вставить("Кому", Кому);
		СтруктураПисьма.Вставить("Тема", Тема);
		СтруктураПисьма.Вставить("Тело", Тело);
		СтруктураПисьма.Вставить("СписокФайловВложений", Новый Массив);
		
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураПисьма);
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	Если ЭтотОбъект.ПолученОригинал
		И НЕ ПервоначальноеЗначениеПолученОригинал Тогда
		//Отправка письма
		СписокКому = Новый СписокЗначений;
		
		Менеджер = ЭтотОбъект.МенеджерПоДоговору;
		//Если НЕ ЗначениеЗаполнено(Менеджер) Тогда 
		//	Возврат;
		//КонецЕсли;
		
		Бухгалтер = ЭтотОбъект.Владелец.ОсновнойБухгалтерПокупателя;
		Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Бухгалтер);
		Если Адрес <> "" Тогда
			СписокКому.Добавить(Адрес, Адрес);
		Иначе
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Бухгалтер.ФизЛицо);
			Если Адрес <> "" Тогда
				СписокКому.Добавить(Адрес, Адрес);
			КонецЕсли;	
		КонецЕсли;	
		
		Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Менеджер);
		
		Если Адрес <> "" Тогда
			СписокКому.Добавить(Адрес, Адрес);
		Иначе
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Менеджер.ФизЛицо);
			Если Адрес <> "" Тогда
				//АК_БЕЛН_05.04.2016++
				Если СписокКому.НайтиПоЗначению(Адрес)=Неопределено Тогда
					СписокКому.Добавить(Адрес, Адрес);
				КонецЕсли; 
				//АК_БЕЛН_05.04.2016--
			КонецЕсли;		
		КонецЕсли;
		
		//АК_БЕЛН_05.04.2016++
		Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ЭтотОбъект.Владелец.ОсновнойМенеджерПокупателя);
		
		Если Адрес <> "" Тогда
			СписокКому.Добавить(Адрес, Адрес);
		Иначе
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ЭтотОбъект.Владелец.ОсновнойМенеджерПокупателя.ФизЛицо);
			Если Адрес <> "" Тогда
				Если СписокКому.НайтиПоЗначению(Адрес)=Неопределено Тогда
					СписокКому.Добавить(Адрес, Адрес);
				КонецЕсли; 
			КонецЕсли;		
		КонецЕсли;
		//АК_БЕЛН_05.04.2016--
		
		Если СписокКому.Количество()=0 Тогда
		Иначе
			///
			
			//Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Менеджер);
			//Если Адрес <> "" Тогда
			//	СписокКому.Добавить("pozm@automacon.ru", "pozm@automacon.ru");
			//	СписокКому.Добавить(Адрес, Адрес);
			//Иначе
			//	Возврат;
			//КонецЕсли;	
			
			УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
			
			Почта = Новый ИнтернетПочта;
			Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
			Письмо = Новый ИнтернетПочтовоеСообщение;
			
			Почта.Подключиться(Профиль);
			Письмо.Тема = "Установлен признак получения оригинала к договору " + СокрЛП(ЭтотОбъект.Наименование) + " контрагента " + ЭтотОбъект.Владелец;
			Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
			Письмо.ИмяОтправителя 	= "" + СокрЛП(УчетнаяЗапись) + "";
			Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
			Для Каждого ПолучательЭлемент Из СписокКому Цикл
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес 	= ПолучательЭлемент.Значение;
			КонецЦикла;	
			
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     = "В договоре " + СокрЛП(ЭтотОбъект.Наименование) + " контрагента " + ЭтотОбъект.Владелец +
			" установлен признак получения оригинала";
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			
			//Письмо.Вложения.Добавить(ИмяФайла);
			
			//Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
			Почта.Послать(Письмо);
			//КонецЕсли;	
			Почта.Отключиться();
		КонецЕсли;	
		
	КонецЕсли;
	ПервоначальноеЗначениеПолученОригинал = ЭтотОбъект.ПолученОригинал;
	ОповеститьОбИзменении(Ссылка);
КонецПроцедуры


Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = ЭтотОбъект.Ссылка;
	
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ВладелецПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораВидаДоговора();
	
	Если НЕ Элемент.Значение.ЯвляетсяАрендодателем Тогда
		Если ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда Тогда
			ТипДоговора = Неопределено;
		КонецЕсли;
	Иначе
		Если НЕ ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда Тогда
			ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипДоговораПриИзменении(Элемент)
	
	Если ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда Тогда
		Если НЕ Владелец.ЯвляетсяАрендодателем Тогда
			ТипДоговора = Неопределено;
			Сообщить("Владелец не является арендодателем!");
		КонецЕсли;
	Иначе
		Если Владелец.ЯвляетсяАрендодателем Тогда
			Сообщить("Владелец является арендодателем!");
		КонецЕсли;
	КонецЕсли;
	
	//
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ВидДоговораНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЭтотОбъект.Владелец.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Не указан владелец!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	УстановитьВидимостьПеречисленияВБюджет();
КонецПроцедуры

Процедура ОбъектАрендыПриИзменении(Элемент)
	
	ЭтотОбъект.ТорговаяТочка = ЭтотОбъект.ОбъектАренды.СтруктурнаяЕдиница;
	
КонецПроцедуры


Процедура УплачиватьНДФЛЗаКонтрагентаПриИзменении(Элемент)
	
	УстановитьВидимостьПеречисленияВБюджет();
	
	Сообщить("Для изменения начислений по НДФЛ для арендодателя необходимо отредактировать документы учета аренды!"); 
	
КонецПроцедуры

Процедура ВидДоговораПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		ТипДоговора = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//+++ gusd

Процедура АвтоматическиНачислятьУслугуПоставщикамПриИзменении(Элемент)
	
	// Очистим Счет затрат и субконто при снятии признака
	Если Элемент.Значение Тогда
		МассивТТ = ПолучитьТорговыеТочкиДопСоглашения();
		Если МассивТТ.Количество() > 0
				И Вопрос("Заполнить список торговых точек по доп. соглашению?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Для Каждого мТорговаяТочка Из МассивТТ Цикл
				Если ЭтотОбъект.СоставСтруктурныхЕдиниц.Найти(мТорговаяТочка, "СтруктурнаяЕдиница") = Неопределено Тогда
					НоваяСтрока = ЭтотОбъект.СоставСтруктурныхЕдиниц.Добавить();
					НоваяСтрока.СтруктурнаяЕдиница = мТорговаяТочка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		СчетЗатрат = Неопределено;
		Субконто1  = Неопределено;
		Субконто2  = Неопределено;
		Субконто3  = Неопределено;
	КонецЕсли;
	
	УстановитьДоступность();
	УстановитьВидимостьСчетовИСубконто();
	УстановитьДоступностьКнопкиЗаполнитьПоДопСоглашению();
	
КонецПроцедуры

Процедура НадписьИсторияЕдинойСтоимостиНажатие(Элемент)
	
	ТаблицаЦен = ЕдинаяСтоимостьУслугиПоставщикаИстория.Выгрузить();
	
	ПараметрыОткрытия = Новый Структура("ЕдинаяСтоимость, ТаблицаЦен", Истина, ТаблицаЦен);
	Результат = ОткрытьФормуМодально("Справочник.ДоговорыКонтрагентов.Форма.ФормаПросмотраИсторииЦен", ПараметрыОткрытия, ЭтаФорма);
	
	Если ТипЗнч(Результат) = Тип("Структура")Тогда
		
		ЕдинаяСтоимостьУслугиПоставщикаИстория.Загрузить(Результат.ТаблицаЦен);
		
	КонецЕсли;
	
	ОбновитьНадписьЕдинаяСтоимость();
	
КонецПроцедуры

Процедура ОбновитьНадписьЕдинаяСтоимость()
	
	// При таком условии элементы не будут отображены на форме
	Если Не ЕдинаяСтоимостьУслугиПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЕдинойЦены = "Не установлена";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЦен.Период,
	|	ТаблицаЦен.Цена
	|ПОМЕСТИТЬ Цены
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Цены.Период КАК Период,
	|	Цены.Цена
	|ИЗ
	|	Цены КАК Цены
	|ГДЕ
	|	Цены.Период <= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Цены");
	
	Запрос.УстановитьПараметр("ТаблицаЦен", ЕдинаяСтоимостьУслугиПоставщикаИстория.Выгрузить());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		ТекстЕдинойЦены = Строка(Выборка.Цена) + " " + ВалютаВзаиморасчетов.Наименование + " (с " + Формат(Выборка.Период, "ДФ=dd.MM.yyyy") + ")";
	КонецЕсли;
	
	ЭлементыФормы.НадписьЕдинаяСтоимость.Заголовок = ТекстЕдинойЦены;
	
КонецПроцедуры

Процедура ЕдинаяСтоимостьУслугиПоставщикаПриИзменении(Элемент)
	
	ОбновитьНадписьЕдинаяСтоимость();
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьВидимостьСчетовИСубконто();
	УстановитьДоступностьСубконто();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	Субконто1, ЭлементыФормы.Субконто1,
	Субконто2, ЭлементыФормы.Субконто2,                                 
	Субконто3, ЭлементыФормы.Субконто3);
	
КонецПроцедуры

Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура Субконто1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н = 1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["Субконто" + н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["Субконто" + н]);
		ИначеЕсли ТипЗнч(ЭтотОбъект["Субконто" + н]) = Тип("СправочникСсылка.Организации") Тогда
			СписокПараметров.Вставить("Организация", ЭтотОбъект["Субконто" + н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельСоставСтруктурныхЕдиницИзменитьЦены(Кнопка)
	
	ТаблицаЦен = СтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Выгрузить();
	ТаблицаТТ  = СоставСтруктурныхЕдиниц.Выгрузить();
	
	ПараметрыОткрытия = Новый Структура("ЕдинаяСтоимость, ТаблицаЦен, ТаблицаТТ", Ложь, ТаблицаЦен, ТаблицаТТ);
	Результат = ОткрытьФормуМодально("Справочник.ДоговорыКонтрагентов.Форма.ФормаПросмотраИсторииЦен", ПараметрыОткрытия, ЭтаФорма);
	
	Если ТипЗнч(Результат) = Тип("Структура")Тогда
		
		СтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Загрузить(Результат.ТаблицаЦен);
		
	КонецЕсли;
	
	ЭлементыФормы.СоставСтруктурныхЕдиниц.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельСоставСтруктурныхЕдиницЗаполнитьПоДопСоглашению(Кнопка)
	
	МассивТТ = ПолучитьТорговыеТочкиДопСоглашения();
	Если МассивТТ.Количество() = 0 Тогда
		Сообщить("Нет данных к заполнению!");
		Возврат;
	КонецЕсли;
	
	Для Каждого мТорговаяТочка Из МассивТТ Цикл
		Если ЭтотОбъект.СоставСтруктурныхЕдиниц.Найти(мТорговаяТочка, "СтруктурнаяЕдиница") = Неопределено Тогда
			НоваяСтрока = ЭтотОбъект.СоставСтруктурныхЕдиниц.Добавить();
			НоваяСтрока.СтруктурнаяЕдиница = мТорговаяТочка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоставСтруктурныхЕдиницПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// При таком условии элементы не будут отображены на форме
	Если ЕдинаяСтоимостьУслугиПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЦен.СтруктурнаяЕдиница,
	|	ТаблицаЦен.Период,
	|	ТаблицаЦен.Цена
	|ПОМЕСТИТЬ Цены
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Цены.СтруктурнаяЕдиница,
	|	Цены.Период КАК Период,
	|	Цены.Цена
	|ИЗ
	|	Цены КАК Цены
	|ГДЕ
	|	Цены.Период <= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Цены");
	
	Запрос.УстановитьПараметр("ТаблицаЦен", СтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Выгрузить());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ТекстЦены = "Не установлена";
		
		НайденныеСтроки = ТаблицаЦен.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", ДанныеСтроки.СтруктурнаяЕдиница));
		Если НайденныеСтроки.Количество()Тогда
			СтрокаЦены = НайденныеСтроки[0];
			ТекстЦены  = Строка(СтрокаЦены.Цена) + " " + ВалютаВзаиморасчетов.Наименование + " (с " + Формат(СтрокаЦены.Период, "ДФ=dd.MM.yyyy") + ")";
		КонецЕсли;	
		
		ОформлениеСтроки.Ячейки.ТекущаяЦена.УстановитьТекст(ТекстЦены);
		
	КонецЦикла;
	
КонецПроцедуры

//--- gusd


Процедура ПериодичностьРегламентныхРаботНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	мПериодичность = Перечисления.Периодичность;
	
	СписокПериодичностей = Новый СписокЗначений;
	СписокПериодичностей.Добавить(мПериодичность.День);
	СписокПериодичностей.Добавить(мПериодичность.Неделя);
	СписокПериодичностей.Добавить(мПериодичность.Месяц);
	СписокПериодичностей.Добавить(мПериодичность.Год);
	
	ВыбранныйЭлемент = ВыбратьИзСписка(СписокПериодичностей, Элемент, СписокПериодичностей.НайтиПоЗначению(Элемент.Значение));
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		Элемент.Значение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SaMi 13.08.2015 
Функция ПолучитьАвтоНаименование() 
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номер)
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.Дата) Тогда
		Возврат "";
	КонецЕсли; 
	
	Возврат СокрЛП(ЭтотОбъект.Номер) + " от " + Формат(ЭтотОбъект.Дата, "ДФ=дд.ММ.гггг");
				 
КонецФункции

Процедура НомерПриИзменении(Элемент)
	
	Если СокрЛП(ЭтотОбъект.Наименование) = СокрЛП(КэшАвтоНаименование) Тогда
		ЭтотОбъект.Наименование = ПолучитьАвтоНаименование();
		КэшАвтоНаименование = ЭтотОбъект.Наименование;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	Если СокрЛП(ЭтотОбъект.Наименование) = СокрЛП(КэшАвтоНаименование) Тогда
		ЭтотОбъект.Наименование = ПолучитьАвтоНаименование();
		КэшАвтоНаименование = ЭтотОбъект.Наименование;
	КонецЕсли; 

КонецПроцедуры
//---АК SaMi  13.08.2015 

Процедура ПолученОригиналПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(МенеджерПоДоговору) Тогда
		ПолученОригинал=Ложь;
		ОбщегоНазначения.СообщитьОбОшибке("Запрещено устанавливать признак получения оригинала, при не заполненном менеджере");
	КонецЕсли;	
КонецПроцедуры
//---АК БЕЛН  20.04.2016 
Процедура ДействияФормыПечатьДопСоглашенияНаУпаковку(Кнопка)
	Парам=Новый Структура("Контрагент,ДоговорКонтрагента,Организация",Владелец,Ссылка,Организация);
	ОткрытьФорму("Обработка.ПечатьДопСоглашенияПоУпаковке.Форма.Форма",Парам);
КонецПроцедуры

Процедура ДействияФормыПечатьДоговораТранспортныхУслуг(Кнопка)
	Парам=Новый Структура("Контрагент,ДоговорКонтрагента,Организация",Владелец,Ссылка,Организация);
	ОткрытьФорму("Обработка.ПечатьДоговораТранспортныхУслуг.Форма.Форма",Парам);
КонецПроцедуры

Процедура АвансовыйКонтрагентПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

Процедура РасчетыЧерезФКПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

//+++АК LAGP 2018.05.04 ИП-00018465 Учет расчетов с ТТПерекресток.
Процедура СторонняяРозницаРасчетыПоРТУПриИзменении(Элемент)
	
	ЭлементыФормы.Панель1.Страницы.СтраницаСторонниеТТ.Видимость = СторонняяРозницаРасчетыПоРТУ;
	
	Если СторонняяРозницаРасчетыПоРТУ Тогда
		ПривязкаСтороннихМагазиновКДоговорам.Отбор.ДоговорКонтрагента.ВидСравнения = ВидСравнения.Равно;
		ПривязкаСтороннихМагазиновКДоговорам.Отбор.ДоговорКонтрагента.Значение = ЭтотОбъект.Ссылка;
		ПривязкаСтороннихМагазиновКДоговорам.Отбор.ДоговорКонтрагента.Использование = Истина;
		
		ПривязкаСтороннихМагазиновКДоговорам.Отбор.Активный.ВидСравнения = ВидСравнения.Равно;
		ПривязкаСтороннихМагазиновКДоговорам.Отбор.Активный.Значение = Истина;
		ПривязкаСтороннихМагазиновКДоговорам.Отбор.Активный.Использование = Истина;
	КонецЕсли;	
			
КонецПроцедуры

//+++АК LAGP 2018.05.04 ИП-00018465 Учет расчетов с ТТПерекресток.
Функция ПолучитьДоговорыКонтрагента(Контрагент)

	ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(,Контрагент);
	
	СписокДоговоров = Новый СписокЗначений;
	СписокДоговоров.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	Пока ВыборкаДоговоров.Следующий() Цикл
		Если НЕ ВыборкаДоговоров.ПометкаУдаления Тогда
			СписокДоговоров.Добавить(ВыборкаДоговоров.Ссылка);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СписокДоговоров;	
	
КонецФункции

//+++АК БЕЛН  20.04.2016 
ЭлементыФормы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
ЭлементыФормы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС0);
ЭлементыФормы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10);
ЭлементыФормы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС13);
ЭлементыФормы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18);
ЭлементыФормы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20);
