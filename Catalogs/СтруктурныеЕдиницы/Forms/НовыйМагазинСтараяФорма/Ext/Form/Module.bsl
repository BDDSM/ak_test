&НаКлиенте
Перем ИзмененныеРеквизиты;

//Раков П.С. Рассылка по добавленным файлам ++ 
перем мНовыеФайлы;
//Раков --

&НаСервере
Процедура ВыбратьДанныеПоОбъекту()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЗаключениеДоговораАренды.Ссылка,
	//|	""ЗаключениеДоговора"" КАК Имя
	//|ИЗ
	//|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	//|ГДЕ
	//|	ЗаключениеДоговораАренды.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ДоговорыКонтрагентов.Ссылка,
	//|	""ДоговорКонтрагента""
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|ГДЕ
	//|	ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий()Цикл
	//	ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(),Выборка.Имя);
	//КонецЦикла;
	////Если НЕ ЗначениеЗаполнено(ОбъектАренды.Ссылка)Тогда
	//	мОбъектАренды = Справочники.ОбъектыАренды.СоздатьЭлемент();
	//	мОбъектАренды.УстановитьСсылкуНового(Справочники.ОбъектыАренды.ПолучитьСсылку());
	//	ЗначениеВРеквизитФормы(мОбъектАренды,"ОбъектАренды");
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Ссылка)Тогда
	//	ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	//	ОбъектДоговор.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку());
	//	ЗначениеВРеквизитФормы(ОбъектДоговор,"ДоговорКонтрагента");
	//	ДоговорКонтрагента.ОбъектАренды = ОбъектАренды.Ссылка
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(ЗаключениеДоговора.Ссылка)Тогда
	//	ЗаключениеДоговора.ОбъектАренды 		= ОбъектАренды.Ссылка;
	//	ЗаключениеДоговора.ДоговорКонтрагента 	= ДоговорКонтрагента.Ссылка;
	//КонецЕсли;
	
	мЗаписьРС = РегистрыСведений.ЗаявкиНаОткрытиеМагазина.СоздатьМенеджерЗаписи();
	мЗаписьРС.Магазин = Объект.Ссылка;
	мЗаписьРС.Прочитать();
	Если НЕ мЗаписьРС.Выбран() Тогда
		мЗаписьРС.Магазин = Объект.Ссылка
	КонецЕсли;
	ЗначениеВРеквизитФормы(мЗаписьРС, "ЗаписьОткрытие");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.Объект,
	|	СоответствиеОбъектРольСрезПоследних.Автор
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Магазин) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	РолиПользователейСоставРоли.НомерСтроки = 1";
	Запрос.УстановитьПараметр("Магазин",Объект.Ссылка);
	ТекРоли = Запрос.Выполнить().Выбрать();
	//ТекРоли = РегистрыСведений.СоответствиеОбъектРоль.Выбрать(,,Новый Структура("Объект",Объект.Ссылка));
	Пока ТекРоли.Следующий()Цикл
		Если ТекРоли.ТипРолиID = "SpecialistPoOtkrytiyu" Тогда
			ЗаполнитьЗначенияСвойств(РольКтоОткрыл, ТекРоли);
			КтоОткрыл = ТекРоли.Сотрудник;
		ИначеЕсли ТекРоли.ТипРолиID = "UpravlyayushchiiPoRoznice" Тогда
			ЗаполнитьЗначенияСвойств(РольУправляющий, ТекРоли);
			УправляющийРозницей = ТекРоли.Сотрудник;
		ИначеЕсли ТекРоли.ТипРолиID = "PomoshnikPoRaskrutke" Тогда
			ЗаполнитьЗначенияСвойств(РольПомощникПоРаскрутке, ТекРоли);
			ПомощникПоРаскрутке = ТекРоли.Сотрудник;
		КонецЕсли
	КонецЦикла;
			
	ТекЛимиты = РегистрыСведений.ЛимитыАренднойПлаты.Выбрать(,,Новый Структура("ТорговаяТочка",Объект.Ссылка),"Убыв");
	Если ТекЛимиты.Следующий() Тогда
		СуммаАрендыПостоянная = ТекЛимиты.СуммаАрендаПостоянная;
		СуммаАрендыПеременная = ТекЛимиты.СуммаАрендаПеременная;
		ЛимитыНачало = ТекЛимиты.МесяцАренды;
	Иначе
		ЛимитыНачало = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	ТекЦФО=ЦФОпоТТ();
	Пока ТекЦФО.Следующий()Цикл
		Если ТекЦФО.Развитие Тогда
			ЦФО = ТекЦФО.ЦФО;
			Организация = ТекЦФО.Организация;
		Иначе
			Объект.ЦФОПередачи = ТекЦФО.ЦФО;
			ДатаОкончанияПередачи = ТекЦФО.Период;
		КонецЕсли;
	КонецЦикла;
	
	КолПр = РегистрыСведений.КоличествоПродавцовНаТочках.ПолучитьПоследнее(,Новый Структура("ТорговаяТочка",Объект.Ссылка));
	КоличествоПродавцов = КолПр.ВРабочиеДни;
	КоличествоПродавцовВВыходные = КолПр.ВВыходныеДни;
	
	//+++AK GREK 24.11.2017 ИП-00014283.16
	//Если улица не заполнена, попробуем вытащить ее из адреса...
	Если ЗначениеЗаполнено(Объект.Адрес) И НЕ ЗначениеЗаполнено(Объект.Улица) Тогда
		СтрАдреса = Объект.Адрес;
		СтрАдреса = СтрЗаменить(СтрАдреса, Объект.Район.Наименование,"");
		СтрАдреса = СокрЛП(СтрЗаменить(СтрАдреса, ?(ЗначениеЗаполнено(Объект.Город.ПолноеНаименование),Объект.Город.ПолноеНаименование, Объект.Город.Наименование),""));
		Поз = СтрДлина(СтрАдреса);
		Симв = Сред(СтрАдреса,Поз,1);
		Пока Поз > 0 И Симв <> " " Цикл
			Если Найти("0123456789кс.д",Симв) = 0 Тогда
				Поз = 0;
			Иначе
				Поз = Поз-1;
				Симв = Сред(СтрАдреса,Поз,1);
			КонецЕсли;
		КонецЦикла;
		Если Поз<>0 Тогда
			СтрУлицы = Лев(СтрАдреса, Поз);
			СтрУлицы = СтрЗаменить(СтрУлицы,",","");
			Объект.Улица = СтрУлицы;	
		КонецЕсли;
	КонецЕсли;
	//---AK

	//+++AK GREK 30.11.2017 ИП-00015325.02
	Если НЕ ЗначениеЗаполнено(МагазинПередачи) Тогда
		МагазинПередачи = Объект.Ссылка;	
	КонецЕсли;
	//---AK
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовыйОбъект()
	
	Объект.ТипСтруктурнойЕдиницы 	= Перечисления.ТипыСтруктурныхЕдиниц.Розница;	
	Объект.Наименование 			= "<Не установлено>";
	Объект.СтатусТорговойТочки 		= Перечисления.СтатусыТорговыхТочек.СкороОткрытие;
	Объект.ФорматМагазинаВВ = Перечисления.ФорматМагазинаВВ.Развитие;
	//ЗаключениеДоговора.ТипСтимулаАренды=Перечисления.АК_ТипыЛьготПоАренде.Каникулы;
	Объект.ОбщаяПлощадь=1;
	ЦФО = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_88");
	Объект.Планограмма = Справочники.Планограммы.НайтиПоКоду("00001");
	Объект.ГрафикИнвентаризации = Справочники.ГрафикиИнвентаризацииМагазинов.НайтиПоКоду("00002");
	ЛимитыНачало = НачалоМесяца(ТекущаяДата());
	Объект.НомерТочки = Справочники.СтруктурныеЕдиницы.НомерДляНовойТочки();
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НовыйЭлемент = Объект.Ссылка.Пустая();
	Если НовыйЭлемент Тогда
		ЗаполнитьНовыйОбъект();
		Элементы.УстановитьНаименование.Доступность = Истина;
		Элементы.УстановитьНомер.Доступность = Истина; 
	Иначе
		ВыбратьДанныеПоОбъекту()
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	СписокКРассылке = "Список №1";
	
	//Раков П.С. Вывод списка файлов++
	СписокФайлов.Параметры.УстановитьЗначениеПараметра("МагазинДинСписок", Объект.Ссылка); 	
	//Раков -- 
	Управляющий = Объект.ПомощникУправляющего.Родитель;
	//+++AK GREK 23.10.2017 ИП-00014283.13
	ПолучитьГородСокрНаименование();
	//---AK 
	
	//+++AK GREK 24.10.2017 ИП-00014283.14
	Если Нрег(Лев(Объект.КорпусСтроения,1)) = "к" Тогда
		НомерКорпуса= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-1));
	Иначе
		НомерСтроения= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-1));
	КонецЕсли;
	//---AK
КонецПроцедуры

//+++AK GREK 23.10.2017 ИП-00014283.13
&НаКлиенте
Процедура ОбновитьГородСокрНаименование()
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ПолучитьГородСокрНаименование();
		Если НЕ ЗначениеЗаполнено(ГородСокрНаименование) Тогда
			Элементы.ГородСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьГородСокрНаименование()
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ГородСокрНаименование = Объект.Город.СокращенноеНаименование;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ОбновитьГородСокрНаименование();
		Если НЕ ЗначениеЗаполнено(ГородСокрНаименование) Тогда
			Элементы.ГородСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ГородСокращенноеНаименованиеПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ОбГород = Объект.Город.ПолучитьОбъект();
		ОбГород.СокращенноеНаименование = ГородСокрНаименование;
		ОбГород.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГородСокращенноеНаименованиеПриИзменении(Элемент)
	ГородСокращенноеНаименованиеПриИзмененииНаСервере();
КонецПроцедуры
//---AK

&НаСервере
Процедура ЗаполнитьНовыйДоговор()
	ДоговорКонтрагента.АрендныйДоговор=Истина;
	ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ДоговорКонтрагента.ТипДоговора=Перечисления.ТипыДоговоровСПоставщиком.Аренда;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	УстановитьПривилегированныйРежим(Истина);
	
	//Если НЕ ОбъектАренды.Ссылка.Пустая()
	//		ИЛИ ОбъектАренды.ЗначениеХарактеристики <> 0 Тогда
	//	
		//ОбъектАренды.СтруктурнаяЕдиница = ТекущийОбъект.Ссылка;
		//Если ОбъектАренды.Наименование="" Тогда
		//	ОбъектАренды.Наименование = Объект.Наименование
		//КонецЕсли;
		//ОбъектАренды.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кв.м");
		//мОбъектАренды = РеквизитФормыВЗначение("ОбъектАренды");
		//Попытка
		//	мОбъектАренды.Записать();
		//	ЗначениеВРеквизитФормы(мОбъектАренды,"ОбъектАренды");
		//Исключение
		//	Отказ = Истина;
		//	Возврат
		//КонецПопытки;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(РольКтоОткрыл.РольПользователя)
	//		ИЛИ ЗначениеЗаполнено(РольКтоОткрыл.Объект) Тогда
	//	РольКтоОткрыл.Объект 	= ТекущийОбъект.Ссылка;
	//	РольКтоОткрыл.ТипРоли 	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("SpecialistPoOtkrytiyu");
	//	РольКтоОткрыл.ТипРолиID = "SpecialistPoOtkrytiyu";
	//	Если НЕ ЗначениеЗаполнено(РолькТоОткрыл.Период) Тогда
	//		РольКтоОткрыл.Период = ТекущаяДата()
	//	КонецЕсли;
	//	мРольКтоОткрыл = РеквизитФормыВЗначение("РольКтоОткрыл");
	//	Попытка
	//		мРольКтоОткрыл.Записать();
	//		ЗначениеВРеквизитФормы(мРольКтоОткрыл,"РольКтоОткрыл");
	//	Исключение
	//		Отказ = Истина;
	//		Возврат
	//	КонецПопытки
	//КонецЕсли;
	//	
	//Если ЗначениеЗаполнено(РольУправляющий.РольПользователя)
	//		ИЛИ ЗначениеЗаполнено(РольУправляющий.Объект) Тогда
	//	РольУправляющий.Объект 	= ТекущийОбъект.Ссылка;
	//	РольУправляющий.ТипРоли 	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice");
	//	РольУправляющий.ТипРолиID = "UpravlyayushchiiPoRoznice";
	//	Если НЕ ЗначениеЗаполнено(РольУправляющий.Период) Тогда
	//		РольУправляющий.Период = ТекущаяДата()
	//	КонецЕсли;
	//	мРольУправляющий = РеквизитФормыВЗначение("РольУправляющий");
	//	Попытка
	//		мРольУправляющий.Записать();
	//		ЗначениеВРеквизитФормы(мРольУправляющий,"РольУправляющий");
	//	Исключение
	//		Отказ = Истина;
	//		Возврат
	//	КонецПопытки
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(РольПомощникПоРаскрутке.РольПользователя)
	//		ИЛИ ЗначениеЗаполнено(РольПомощникПоРаскрутке.Объект) Тогда
	//	РольПомощникПоРаскрутке.Объект 	= ТекущийОбъект.Ссылка;
	//	РольПомощникПоРаскрутке.ТипРоли 	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("PomoshnikPoRaskrutke");
	//	РольПомощникПоРаскрутке.ТипРолиID = "PomoshnikPoRaskrutke";
	//	Если НЕ ЗначениеЗаполнено(РольПомощникПоРаскрутке.Период) Тогда
	//		РольПомощникПоРаскрутке.Период = ТекущаяДата()
	//	КонецЕсли;
	//	мРольПомощникПоРаскрутке = РеквизитФормыВЗначение("РольПомощникПоРаскрутке");
	//	Попытка
	//		мРольПомощникПоРаскрутке.Записать();
	//		ЗначениеВРеквизитФормы(мРольПомощникПоРаскрутке,"РольПомощникПоРаскрутке");
	//	Исключение
	//		Отказ = Истина;
	//		Возврат
	//	КонецПопытки
	//КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьТекущийЭтап()
	Если ЗаписьОткрытие.Этап>5 Тогда
		Возврат
	КонецЕсли;
	Для К = ЗаписьОткрытие.Этап По 5 Цикл
		Если ПроверитьЭтап(К)Тогда
			ЗаписьОткрытие.Этап=К+1
		Иначе
			Прервать
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКоординаты(Команда)
	Если СокрЛП(Объект.Адрес)="" Тогда
		Сообщить("Не заполнен адрес, невозможно определить кооординаты");
		Возврат
	КонецЕсли;
	
	Если КартаОткрыта Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
	ПараметрыПодбора.Вставить("Режим"				, "РежимАдресКонтрагента");
	ПараметрыПодбора.Вставить("Режим2"				, "Диалог");
	ПараметрыПодбора.Вставить("Наименование"		, Объект.Наименование);
	ПараметрыПодбора.Вставить("Ссылка"				, Объект.Ссылка);
	СтрокаКоординат = "";
	ПараметрыПодбора.Вставить("СтрокаКоординат"		, СтрокаКоординат);
	ПараметрыПодбора.Вставить("ОпределитьРасположение",Истина);
	ПараметрыПодбора.Вставить("КоординатыОпределены", Ложь);
	
	Если НЕ ПустаяСтрока(Объект.Адрес) Тогда
		//+++AK GREK 09.11.2017 ИП-00014283.15
		//Попросили убрать город из адреса... Но для поиска он нужен!
		АдресДляОпределенияКоординат = Объект.Адрес;
		Если Не Объект.Город.Пустая() Тогда
			Если Не Объект.Город.Код = "0001" Тогда
				АдресДляОпределенияКоординат = ?(ЗначениеЗаполнено(Объект.Город.ПолноеНаименование),Объект.Город.ПолноеНаименование, Объект.Город.Наименование)+", " + АдресДляОпределенияКоординат;
			КонецЕсли;
		Иначе
			АдресДляОпределенияКоординат = Объект.Регион.Наименование +", " + АдресДляОпределенияКоординат;
		КонецЕсли;
		//---AK
		ПараметрыПодбора.Вставить("Адрес", АдресДляОпределенияКоординат);//ПараметрыПодбора.Вставить("Адрес", Строка(Объект.Город) + " " + Объект.Адрес);
	КонецЕсли;

	ОткрытаКарта = Истина;
	ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПервыеЦифры(Стр)
	Для К=1 По СтрДлина(Стр) Цикл
		Если Найти("01234567890",Сред(Стр,К,1))=0 Тогда
			Возврат Лев(Стр,К-1)
		КонецЕсли;
	КонецЦикла;
	Возврат Стр
КонецФункции

&НаКлиенте
Функция НазваниеГорода(Стр)
	//Слова = ОбщегоНазначения.РазложитьСтрокуВМассивСлов(Стр);
	//Результат = "";
	//Для Каждого Слово из Слова Цикл
	//	Если Найти("гдпгтпоср",Слово)=0 Тогда
	//		Результат = Результат+Слово
	//	КонецЕсли
	//КонецЦикла;
	Результат = Город;
	Возврат Результат
КонецФункции

&НаКлиенте
Процедура УстановитьНаименование(Команда)
	Если СокрЛП(Объект.Улица)="" или СокрЛП(Объект.Дом)="" Тогда
		Предупреждение("Для выполнения команды должны быть выбраны значения Улица и Дом");
		Возврат
	КонецЕсли;
	
	//Первоначальное заполнение реквизита Город
	Если Город = "" и ЗначениеЗаполнено(Объект.Город) Тогда
		Город = СтрЗаменить(Объект.Город.Наименование,"г. ","");
	КонецЕсли;
	
	//+++AK GREK 23.10.2017 ИП-00014283.13
	Если ЗначениеЗаполнено(ГородСокрНаименование) Тогда
		ОбозначениеГород = ГородСокрНаименование + "_";	
	Иначе	
		Если Город = "Москва" или Город="" Тогда
			ОбозначениеГород = ""
		Иначе
			ОбозначениеГород = Лев(НазваниеГорода(Объект.Город.Наименование),3) + "_";
		КонецЕсли;
	КонецЕсли;
	//---AK
	//+++AK GREK 09.11.2017 ИП-00014283.15
	Если ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
		ОбозначениеУлица = Объект.УлицаСокрНаименование;	
	Иначе	
		ОбозначениеУлица = УлицаБезТипа(Объект.Улица);
	КонецЕсли;

	//---AK
	Объект.Наименование = Формат(Объект.НомерТочки,"ЧГ=0") +?(Объект.ТипРозничнойТочки=ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин"),"М","")+ "_"+ОбозначениеГород + ОбозначениеУлица + ПервыеЦифры(Объект.Дом);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент) 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ДоговорКонтрагентаСканДоговора.Видимость = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
	Элементы.ОткрытьФайл.Видимость = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
	Элементы.ЗаписьОткрытиеСхемаРаботыЗазывалы.Видимость = ЗначениеЗаполнено(ЗаписьОткрытие.СхемаРаботыЗазывалы);
	Элементы.ОткрытьСхему.Видимость= ЗначениеЗаполнено(ЗаписьОткрытие.СхемаРаботыЗазывалы);
	
	//+++AK GREK 24.11.2017 ИП-00014283.16
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		ОбновитьУлицаСокрНаименование();
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
	//---AK
КонецПроцедуры

&НаСервере
Процедура УстановитьНомерНаСервере()
	
	//НачатьТранзакцию();
	
	Объект.НомерТочки = Справочники.СтруктурныеЕдиницы.НомерДляНовойТочки();
	//мОбъект = РеквизитФормыВЗначение("Объект");
	//Попытка 
	//	мОбъект.Записать();
	//	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	//Исключение
	//	ОтменитьТранзакцию();
	//	Возврат
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНомер(Команда)
	
	//Если Вопрос("При установке номера объект будет записан. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//
	УстановитьНомерНаСервере();
	УстановитьНаименование(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Функция УлицаБезТипа(Улица)
	Результат="";
	ТекстОбозначения = "аллея, бульвар, линия, набережная, переулок, площадь, проезд, просек, проспект, спуск, тупик, улица, шоссе";
	НеОтображать = "улица, переулок";
	Слова = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Улица," ");
	Для Каждого Слово из Слова Цикл
		Если Найти(ТекстОбозначения,НРег(Слово))=0 Тогда
			Результат = Результат+Слово
		ИначеЕсли Найти(НеОтображать,НРег(Слово))=0 Тогда
			Результат = Результат+ТРег(Слово)
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСведенияОРайоне()
	СведенияОРайоне = "";
	Если АО<>"" Тогда
		мАО = СокрЛП(СтрЗаменить(АО,"административный",""));
		мАО = СокрЛП(СтрЗаменить(мАО,"округ",""));
		Объект.АдминистративныйОкруг=Справочники.АдминистративныеОкруга.НайтиПоНаименованию(мАО);
		СведенияОРайоне = АО+", ";
		Если НЕ ЗначениеЗаполнено(Объект.АдминистративныйОкруг) Тогда
			Сообщить("В справочнике Административные округа нет элемента "+АО);
		КонецЕсли;
	Иначе
		Сообщить("Административный округ """+АО+""" не определен");
	КонецЕсли;
	Если Район<>"" Тогда
		Объект.Район=Справочники.Районы.НайтиПоНаименованию(СокрЛП(СтрЗаменить(Район,"район","")));
		СведенияОРайоне = СведенияОРайоне+Район+". ";
		Если НЕ ЗначениеЗаполнено(Объект.Район) Тогда
			//Возможно другой порядок слов. Попробуем найти
			Запрос = Новый Запрос;
			ТекстЗапроса =  "ВЫБРАТЬ
			                |	Районы.Ссылка
			                |ИЗ
			                |	Справочник.Районы КАК Районы";
			Запрос.Текст = ТекстЗапроса + " ГДЕ Районы.Наименование ПОДОБНО ""%" 
			                + СтрЗаменить(СокрЛП(СтрЗаменить(Район,"район",""))," ","%"" И Районы.Наименование ПОДОБНО ""%")
							+ "%"""; 
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() = 1 Тогда
				Объект.Район=Рез[0].Ссылка;
			Иначе
				Сообщить("В справочнике Районы нет элемента "+Район);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить("Район """+Район+""" не определен");
	КонецЕсли;
	Если Метро<>"" И Объект.Регион.Код = 77 Тогда
		СведенияОРайоне = СведенияОРайоне+Метро;
		мМетро = СокрЛП(СтрЗаменить(Метро,"метро",""));
		мМетро = СокрЛП(СтрЗаменить(мМетро,"станция",""));
		СтанцияМетро=Справочники.СтанцииМетро.НайтиПоНаименованию(СокрЛП(СтрЗаменить(мМетро,"метро","")));
		Если Не СтанцияМетро.Пустая() Тогда
			Объект.СтанцииМетро.Очистить();
			СтрокаСтМетро = Объект.СтанцииМетро.Добавить();
			СтрокаСтМетро.Метро = СтанцияМетро
		Иначе
			Сообщить("В справочнике Станции метро нет станции "+Метро);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
			И ИсточникВыбора.ИмяФормы = "Обработка.АК_ОтображениеНаКарте.Форма.Форма" Тогда
		Если ВыбранноеЗначение.КоординатыОпределены Тогда
			К = Найти(ВыбранноеЗначение.СтрокаКоординат, ",");
			Объект.КоординатыШирота		= Число(Лев(ВыбранноеЗначение.СтрокаКоординат , К - 1));
			Объект.КоординатыДолгота	= Число(Сред(ВыбранноеЗначение.СтрокаКоординат, К + 1));
			Город 	= ВыбранноеЗначение.Город;
			Если УлицаБезТипа(ВыбранноеЗначение.Улица)<>Объект.Улица или ВыбранноеЗначение.Дом<>Объект.Дом Тогда
				Если Объект.Улица = "" и Объект.Дом = "" Тогда
					Объект.Улица 	= УлицаБезТипа(ВыбранноеЗначение.Улица);
					Объект.Дом 	= ВыбранноеЗначение.Дом;
				Иначе
					//+++AK GREK 24.11.2017 ИП-00014283.16
					//Попросили убрать...
					//Если Вопрос("Установить новые значения Улица: "+ВыбранноеЗначение.Улица+", Дом: "+ВыбранноеЗначение.Дом+"?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
					//	Объект.Улица 	= УлицаБезТипа(ВыбранноеЗначение.Улица);
					//	Объект.Дом 	= ВыбранноеЗначение.Дом;
					//КонецЕсли;
					//---AK
				КонецЕсли
			КонецЕсли;
			Район = ВыбранноеЗначение.Район;
			АО = ВыбранноеЗначение.Округ;
			Метро = ВыбранноеЗначение.Метро;
			//+++AK GREK 08.11.2017 ИП-00014283.15
			//Район и АО могут быть перепутаны... Проверяем и испарвляем
			Если Найти(Район, "округ")>0 или Найти(АО, "район") Тогда
				ВремСтрока = Район;
				Район = АО;
				АО = ВремСтрока;
			КонецЕсли;
			//---AK
			УстановитьСведенияОРайоне();
			Если Объект.Наименование="<Не установлено>" Или СтрДлина(Объект.Наименование)<9 Тогда
				УстановитьНаименование(Неопределено);
			КонецЕсли;
			ПроверитьСовпадениеКоординат(Неопределено);
		КонецЕсли;
		ОткрытаКарта = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСовпадениеКоординатНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	, Объект.Ссылка);
	Запрос.УстановитьПараметр("Широта"	, Объект.КоординатыШирота);
	Запрос.УстановитьПараметр("Долгота"	, Объект.КоординатыДолгота);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	(СтруктурныеЕдиницы.КоординатыШирота - &Широта) * (СтруктурныеЕдиницы.КоординатыШирота - &Широта) + (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) * (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) КАК Расстояние,
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.Город,
	//|	СтруктурныеЕдиницы.Город.Наименование + "" "" + СтруктурныеЕдиницы.Адрес КАК Адрес,
	|	СтруктурныеЕдиницы.Адрес КАК Адрес,
	|	СтруктурныеЕдиницы.КоординатыШирота КАК Широта,
	|	СтруктурныеЕдиницы.КоординатыДолгота КАК Долгота
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка <> &Ссылка
	|	И (СтруктурныеЕдиницы.КоординатыШирота - &Широта) * (СтруктурныеЕдиницы.КоординатыШирота - &Широта) + (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) * (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) < 0.00001
	|
	|УПОРЯДОЧИТЬ ПО
	|	Расстояние";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//
	БлизкиеТочки.Загрузить(ТЗ);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовпадениеКоординат(Команда)
	
	ПроверитьСовпадениеКоординатНаСервере();
	
	Элементы.БлизкиеТочки.Видимость = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьСканДоговораНаСервере(ФайлСкана)
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = "PDF";
	Файл.Наименование = "Открытие магазина, договор";
	Файл.ИмяПодкаталога = "Заявки на открытие";
	Файл.Записать();
	ФайлСкана.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	Возврат Файл.Ссылка
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьФайлРасстановкиНаСервере(ТелоФайла,Имя)
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = "DWG";
	Файл.Наименование = Имя;
	Файл.ИмяПодкаталога = "Расстановка оборудования";
	Файл.Записать();
	ТелоФайла.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	Возврат Файл.Ссылка
КонецФункции

//&НаКлиенте
//Процедура ЗагрузитьСканДоговора(Команда)
//	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
//	ДиалогВыбораФайла.Фильтр = "*.pdf|*.pdf";
//	Если ДиалогВыбораФайла.Выбрать() Тогда
//		ФайлСкана = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
//		ДоговорКонтрагента.СканДоговора = ЗагрузитьСканДоговораНаСервере(ФайлСкана);
//		Элементы.ДоговорКонтрагентаСканДоговора.Видимость = Истина;
//		Элементы.РазослатьУведомления.Видимость = Истина;
//	КонецЕсли;
//КонецПроцедуры

//Раков П.С. Вывод списка файлов++
&НаКлиенте
Процедура ЗагрузитьПроизвольныйФайл(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .jpg, .rar)|*.pdf;*.jpeg;*.jpg;*.rar";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлСкана = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		СтруктураФайла = РазобратьИмяФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
		ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла);
		Элементы.РазослатьУведомления.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПроизвольныйФайл(Команда)
	ФайлКУдалению = Элементы.СписокФайлов.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ФайлКУдалению) тогда
		Попытка
			УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению);
		Исключение
		КонецПопытки;
		Элементы.СписокФайлов.Обновить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ФайлКУдалению);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФайлКУдалению = ВыборкаДетальныеЗаписи.Ссылка.ПОлучитьОбъект();
		Путь = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлКУдалению.Ссылка);
		ФайлКУдалению.Удалить();
		Попытка
			УдалитьФайлы(Путь);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазобратьИмяФайла(Путь)
	
	СтруктураИмени = Новый Структура;
    к = 1;
	Пока не Лев(Прав(Путь,к),1) = "." и не к = СтрДлина(Путь) цикл
		к = к + 1;	
	КонецЦикла;	
	
	СтруктураИмени.Вставить("Расширение", (ВРег(Прав(Путь,к-1))));
	
	Пока не Лев(Прав(Путь,к),1) = "\" и не к = СтрДлина(Путь) цикл
		к = к + 1;	
	КонецЦикла;	

	СтруктураИмени.Вставить("Наименование", (Прав(Путь,к-1)));
	Возврат СтруктураИмени;
	
КонецФункции // РазобратьИмяФайла()

&НаСервере
 Процедура ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла)
 
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = СтруктураФайла.Расширение;
	Файл.Наименование = СтруктураФайла.Наименование;
	Файл.ИмяПодкаталога = "ПроизвольныеФайлыМагазинов";
	Файл.Записать();
	
	ИмяФайлаДляОбъекта = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка);
	ФайлСкана.Записать(ИмяФайлаДляОбъекта);
		
	НЗ= РегистрыСведений.АК_ФайлыМагазинов.СоздатьНаборЗаписей();
	НЗ.Отбор.Магазин.Установить(Объект.Ссылка);
	НЗ.Прочитать();
	Запись = НЗ.Добавить();
	Запись.Магазин = Объект.Ссылка;
	Запись.КодФайла = Файл.Код;
	НЗ.Записать();
	
	СписокФайловКОтправке.Добавить(ИмяФайлаДляОбъекта);
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ДобавитьФайлВОсновнойМагазин(Файл.Ссылка);
	//+++AK GREK 17.10.2017 ИП-00016367
	ЗначениеВРеквизитФормы(об, "Объект"); 
	//---AK	
	
	мНовыеФайлы = новый массив ;
	
	Элементы.СписокФайлов.Обновить();
 
 КонецПроцедуры // ЗагрузитьСканДоговораНаСервере()
 
&НаКлиенте
Функция  РазослатьУведомления(Команда)
	ПодключитьОбработчикОжидания("РазослатьНаСервере", 0.1, Истина);
КонецФункции

&НаКлиенте
Процедура РазослатьНаСервере() Экспорт
	
	ОтправитьУведомленияОДобавленииСкана()

КонецПроцедуры

&НаСервере
Процедура ОтправитьУведомленияОДобавленииСкана()

	Массив = новый Массив;
	//МассивОбъекта = новый Массив;
	//МассивОбъекта.Вставить(Объект.Наименование);
	МассивПолучателей = новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АК_ГруппыРассылки.Емейл
		|ИЗ
		|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		|ГДЕ
		|	АК_ГруппыРассылки.Группа В(&Группа)";
		
	СписокГрупп = Новый Массив;
	//СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.ОткрытиеМагазина"));
	//СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.Список1"));
	//СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.Список2"));
	СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.Список3"));

	Запрос.УстановитьПараметр("Группа", СписокГрупп);

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Емейл");

	Получатели = Новый Массив;
	
	Для каждого Емайл из Результат цикл
		Если УправлениеЭлектроннойПочтой.EmailValid(Емайл) тогда
			Получатели.Добавить(Емайл)
		КонецЕсли;	
	КонецЦикла;	

	Массив.Добавить(Получатели);
	
	Текст = "Объекту " + Объект.Наименование + " добавлен скан договора аренды.";
	
	Массив.Добавить(Текст);
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	КонецЕсли;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Добавлен скан договора аренды";
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Для каждого Получателя из Получатели цикл
		Письмо.Получатели.Добавить(Получателя);	
	КонецЦикла;	
	//Письмо.Получатели.Добавить("pashaklgd@mail.ru");	
	
	Для каждого Файла из СписокФайловКОтправке цикл
		Письмо.Вложения.Добавить(Файла.Значение);
	КонецЦикла;	
	
	СписокФайловКОтправке.Очистить();	
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.Текст = Текст;
	
	Почта.Послать(Письмо);
КонецПроцедуры
//Раков П.С. --

&НаСервереБезКонтекста
Функция ПутьКФайлу(Файл)
	Возврат Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл)
КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ЗапуститьПриложение(ПутьКФайлу(ДоговорКонтрагента.СканДоговора));
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСхемуНаСервере(Изображение,Расширение)
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = Расширение;
	Файл.Наименование = "Схема."+Расширение;
	Файл.ИмяПодкаталога = "Заявки на открытие";
	Файл.Записать();
	Изображение.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	Возврат Файл.Ссылка;
КонецФункции

&НаКлиенте
Функция ПолучитьРасширениеФайла(ИмяФайла)
	Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяФайла,".");
	Если ПодСтроки.Количество()<2 Тогда
		Возврат ""
	Иначе
		Возврат Подстроки[Подстроки.Количество()-1]
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьСхему(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//ДиалогВыбораФайла.Фильтр = "*.pdf|*.pdf";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлСхемы = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		Расширение = ПолучитьРасширениеФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
		ЗаписьОткрытие.СхемаРаботыЗазывалы=ЗагрузитьСхемуНаСервере(ФайлСхемы,Расширение);
		Элементы.ЗаписьОткрытиеСхемаРаботыЗазывалы.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхему(Команда)
	ЗапуститьПриложение(ПутьКФайлу(ЗаписьОткрытие.СхемаРаботыЗазывалы));
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеПодчиненныеРеквизиты(Родитель, МассивРеквизитов)
	Для Каждого Элемент из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ПолеФормы")Или ТипЗнч(Элемент)=Тип("ГруппаФормы")Тогда
			Если Элемент.Вид=ВидПоляФормы.ПолеВвода Тогда
				МассивРеквизитов.Добавить(Элемент.ПутьКДанным);
				Сообщить(Элемент.ТекстРедактирования);
			ИначеЕсли ТипЗнч(Элемент.Вид) = Тип("ВидГруппыФормы") Тогда
				ВыбратьВсеПодчиненныеРеквизиты(Элемент,МассивРеквизитов)
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьЭтап(Этап)
	Результат = Ложь;
	Если Этап = 0 Тогда
		Результат = ЗначениеЗаполнено(Объект.Адрес);
		Результат = Результат и ЗначениеЗаполнено(Объект.Город);
		Результат = Результат и ЗначениеЗаполнено(Объект.ТипРозничнойТочки);
		Результат = Результат и ЗначениеЗаполнено(РольКтоОткрыл.РольПользователя);
		Возврат Результат
	КонецЕсли;
	Если Этап = 1 Тогда
		Результат = ЗначениеЗаполнено(Объект.НомерТочки);
		Результат = Результат И ЗначениеЗаполнено(Объект.Наименование);
		Результат = Результат И Найти(Объект.Наименование,Формат(Объект.НомерТочки,"ЧГ=0"))=1;
		Возврат Результат
	КонецЕсли;
	Если Этап = 2 Тогда
		Результат = ЗначениеЗаполнено(Объект.ДатаОткрытия);
		Результат = Результат И ЗначениеЗаполнено(РольУправляющий.РольПользователя);
		Результат = Результат И ЗначениеЗаполнено(Объект.ВремяРаботы);
		Результат = Результат И (ЗначениеЗаполнено(ЗаключениеДоговора.КоличествоДнейСтимулаАренды)
			Или ЗаключениеДоговора.ТипСтимулаАренды=Перечисления.АК_ТипыЛьготПоАренде.Скидка);
		Результат = Результат И ЗначениеЗаполнено(Объект.ТорговаяПлощадь);
		Результат = Результат И ЗНачениеЗаполнено(ЗаключениеДоговора.ДатаАкта);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.ЭлектроэнергииПоДоговору);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.ЭлектроэнергииПоФакту);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.КлючиОтПомещения);
		Возврат Результат
	КонецЕсли;
	Если Этап = 3 Тогда
		Результат = ЗначениеЗаполнено(СуммаАрендыПостоянная);
		Результат = Результат И ЗначениеЗаполнено(СуммаАрендыПеременная);
		Возврат Результат                                      
	КонецЕсли;
	Если Этап = 4 Тогда
		Результат = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
		Возврат Результат
	КонецЕсли;
	Если Этап = 5 Тогда
		Результат = ЗначениеЗаполнено(РольПомощникПоРаскрутке.РольПользователя);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.СхемаРаботыЗазывалы);
		Возврат Результат
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	//ТекущийЭтап = ЗаписьОткрытие.Этап+1;
	//мЭтап = Элементы["Этап"+ТекущийЭтап];
	//ПроверяемыеРеквизиты.Очистить();
	//ВыбратьВсеПодчиненныеРеквизиты(мЭтап,ПроверяемыеРеквизиты)
	//
	ПроверяемыеРеквизиты.Добавить("Объект.НомерТочки");
	ПроверяемыеРеквизиты.Добавить("Объект.Регион");
	ПроверяемыеРеквизиты.Добавить("Объект.Город");
	ПроверяемыеРеквизиты.Добавить("Объект.Адрес");
	ПроверяемыеРеквизиты.Добавить("ДатаОткрытия");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПривилегированныйРежим(Истина);
	Прочитать();
	ОпределитьТекущийЭтап();
	ЗаписьОткрытие.Магазин = ТекущийОбъект.Ссылка;
	мЗаписьОткрытие = РеквизитФормыВЗначение("ЗаписьОткрытие");
	Попытка
		мЗаписьОткрытие.Записать();
		ЗначениеВРеквизитФормы(мЗаписьОткрытие,"ЗаписьОткрытие");
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	//+++AK GREK 19.10.2017 ИП-00016992
	ТекЦФО = ЦФОпоТТ();	
	ОбновленаЗаписьЦФО = Ложь;
	ОбновленаЗаписьЦФОПередачи = Ложь;
	Пока ТекЦФО.Следующий()Цикл
		Если ТекЦФО.Развитие Тогда
			Если ТекЦФО.ЦФО<>ЦФО или ТекЦФО.Организация<>Организация Тогда
				ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
				ЗаписьЦФО.Период=ТекущаяДАта();
				ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
				ЗаписьЦФО.Организация = Организация;
				ЗаписьЦФО.ЦФО = ЦФО;
				ЗаписьЦФО.Записать();
				ОбновленаЗаписьЦФО = Истина;	
			КонецЕсли;
		Иначе
			Если ТекЦФО.ЦФО<>ЦФОПередачи Тогда
				ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
				ЗаписьЦФО.Период=Объект.ДатаОкончанияПередачи;
				ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
				ЗаписьЦФО.Организация = Организация;
				ЗаписьЦФО.ЦФО = ЦФОПередачи;
				ЗаписьЦФО.Записать();
				ОбновленаЗаписьЦФОПередачи = Истина;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбновленаЗаписьЦФО И ЗначениеЗаполнено(ЦФО) Тогда
		ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		ЗаписьЦФО.Период = ТекущаяДата();
		ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
		ЗаписьЦФО.Организация = Организация;
		ЗаписьЦФО.ЦФО = ЦФО;
		ЗаписьЦФО.Записать();
	КонецЕсли;
	Если Не ОбновленаЗаписьЦФОПередачи И ЗначениеЗаполнено(ЦФОПередачи) Тогда
		ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		ЗаписьЦФО.Период = Объект.ДатаОкончанияПередачи;
		ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
		ЗаписьЦФО.Организация = Организация;
		ЗаписьЦФО.ЦФО = ЦФОПередачи;
		ЗаписьЦФО.Записать();
	КонецЕсли;
	//---AK	

	
	//ТекЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(,Новый Структура("СтруктурнаяЕдиница",Объект.Ссылка));
	//Если ТекЦФО.ЦФО<>ЦФО или ТекЦФО.Организация<>Организация Тогда
	//	ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
	//	ЗаписьЦФО.Период=ТекущаяДАта();
	//	ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
	//	ЗаписьЦФО.Организация = Организация;
	//	ЗаписьЦФО.ЦФО = ЦФО;
	//	ЗаписьЦФО.Записать();
	//КонецЕсли;
	
	КолПр = РегистрыСведений.КоличествоПродавцовНаТочках.ПолучитьПоследнее(,Новый Структура("ТорговаяТочка",Объект.Ссылка));
	Если КолПр.ВрабочиеДни<>КоличествоПродавцов Или КолПр.ВВыходныеДни<>КоличествоПродавцовВвыходные Тогда
		ЗаписьКолПр = РегистрыСведений.КоличествоПродавцовНаТочках.СоздатьМенеджерЗаписи();
		ЗАписьКолПр.ТорговаяТочка = Объект.Ссылка;
		ЗаписьКолПр.ВРабочиеДни = КоличествоПродавцов;
		ЗаписьКолПр.ВВыходныеДни = КоличествоПродавцовВВыходные;
		ЗаписьКолПр.Период = ТекущаяДата();
		ЗАписьКолПр.Записать()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""SpecialistPoOtkrytiyu"" КАК РольИД
	|ПОМЕСТИТЬ ТипыРолей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""UpravlyayushchiiPoRoznice""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""PomoshnikPoRaskrutke""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыРолей.РольИД КАК ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	ЕСТЬNULL(РолиПользователейСоставРоли.Сотрудник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Сотрудник
	|ИЗ
	|	ТипыРолей КАК ТипыРолей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Магазин) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО ТипыРолей.РольИД = СоответствиеОбъектРольСрезПоследних.ТипРолиID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка)
	|			И (РолиПользователейСоставРоли.НомерСтроки = 1)";
	Запрос.УстановитьПараметр("Магазин",Объект.Ссылка);
	ТекРоли = Запрос.Выполнить().Выбрать();
	//ТекРоли = РегистрыСведений.СоответствиеОбъектРоль.Выбрать(,,Новый Структура("Объект",Объект.Ссылка));
	ТЗРоли = Новый ТаблицаЗначений;
	ТЗРоли.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТЗРоли.Колонки.Добавить("ТипРоли",Новый ОписаниеТипов("Строка"));
	Пока ТекРоли.Следующий()Цикл
		Если ТекРоли.ТипРолиID = "SpecialistPoOtkrytiyu" Тогда
			Если КтоОткрыл <>ТекРоли.Сотрудник и НЕ КтоОткрыл.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = КтоОткрыл;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
		ИначеЕсли ТекРоли.ТипРолиID = "UpravlyayushchiiPoRoznice" Тогда
			Если УправляющийРозницей <>ТекРоли.Сотрудник и НЕ УправляющийРозницей.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = УправляющийРозницей;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
			УправляющийРозницей = ТекРоли.Сотрудник;
		ИначеЕсли ТекРоли.ТипРолиID = "PomoshnikPoRaskrutke" Тогда
			Если ПомощникПоРаскрутке <>ТекРоли.Сотрудник и НЕ ПомощникПоРаскрутке.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = ПомощникПоРаскрутке;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Роли",ТЗРоли);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Роли.Сотрудник КАК Сотрудник,
	|	Роли.ТипРоли
	|ПОМЕСТИТЬ ВТРоли
	|ИЗ
	|	&Роли КАК Роли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВложенныйЗапрос.Роль, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК Роль,
	|	ВТРоли.Сотрудник,
	|	ТипыРолейПользователя.Ссылка КАК ТипРоли,
	|	ТипыРолейПользователя.Наименование КАК НаименованиеРоли,
	|	ВЫРАЗИТЬ(ВТРоли.Сотрудник КАК Справочник.ФизическиеЛица).Наименование КАК ФИО,
	|	ВТРоли.ТипРоли КАК ТипРолиID
	|ИЗ
	|	ВТРоли КАК ВТРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
	|		ПО ((ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50))) = ТипыРолейПользователя.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РолиПользователейТипыРолей.Ссылка) КАК Роль,
	|			ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50)) КАК ТипРоли,
	|			РолиПользователейСоставРоли.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТРоли КАК ВТРоли
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|				ПО ((ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50))) = РолиПользователейТипыРолей.ТипРоли.Код)
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|				ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
	|					И (РолиПользователейСоставРоли.Сотрудник = ВТРоли.Сотрудник)
	|					И (РолиПользователейСоставРоли.НомерСтроки = 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50)),
	|			РолиПользователейСоставРоли.Сотрудник) КАК ВложенныйЗапрос
	|		ПО ВТРоли.Сотрудник = ВложенныйЗапрос.Сотрудник
	|			И Выразить(ВТРоли.ТипРоли Как Строка(50))= ВложенныйЗапрос.ТипРоли";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		ЗаписьРоль = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
		ЗаписьРоль.Период=ТекущаяДата();
		ЗаписьРоль.Объект=Объект.Ссылка;
		ЗаписьРоль.ТипРоли = Выборка.ТипРоли;
		Если Выборка.Роль.Пустая() Тогда
			НоваяРоль = Справочники.РолиПользователей.СоздатьЭлемент();
			НоваяРоль.Наименование=Выборка.НаименованиеРоли+" "+Выборка.ФИО;
			НСтрока=НоваяРоль.ТипыРолей.Добавить();
			НСтрока.ТипРоли=Выборка.ТипРоли;
			НСтрока = НоваяРоль.СоставРоли.Добавить();
			НСтрока.Сотрудник=Выборка.Сотрудник;
			НоваяРоль.Записать();
			ЗаписьРоль.РольПользователя = НоваяРоль.Ссылка;
		Иначе
			ЗаписьРоль.РольПользователя=Выборка.Роль;
		КонецЕсли;
		ЗаписьРоль.ТипРолиID=Выборка.ТипРолиID;
		Попытка
			ЗаписьРоль.Записать();
		Исключение
			Сообщить("Не удалось записать данные о роли "+Выборка.ТипРоли)
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СуммаАрендыПостоянная)
		Или ЗначениеЗаполнено(СуммаАрендыПеременная)
		//Или ЗначениеЗаполнено(ЛимитыАренды.ТорговаяТочка)
		Тогда
			ТекЛимиты = РегистрыСведений.ЛимитыАренднойПлаты.ПолучитьПоследнее(,Новый Структура("ТорговаяТочка",Объект.Ссылка));
			Если СуммаАрендыПостоянная<>ТекЛимиты.СуммаАрендаПостоянная или
				СуммаАрендыПеременная<>ТекЛимиты.СуммаАрендаПеременная Тогда
				Лимиты = РегистрыСведений.ЛимитыАренднойПлаты.СоздатьМенеджерЗаписи();
				Лимиты.СуммаАрендаПеременная = СуммаАрендыПеременная;
				Лимиты.СуммаАрендаПостоянная = СуммаАрендыПостоянная;
				Лимиты.ТорговаяТочка = Объект.Ссылка;
				Лимиты.Период = ТекущаяДата();
				Лимиты.МесяцАренды=ЛимитыНачало;
				Лимиты.Записать();
			КонецЕсли;
				
	КонецЕсли;
	
	СсылкаОА = Справочники.ОбъектыАренды.НайтиПоРеквизиту("СтруктурнаяЕдиница",Объект.Ссылка);
	Если СсылкаОА.Пустая() Тогда
		ОбъектАренды = Справочники.ОбъектыАренды.СоздатьЭлемент();
		ОбъектАренды.СтруктурнаяЕдиница = ТекущийОбъект.Ссылка;
		Если ОбъектАренды.Наименование="" Тогда
			ОбъектАренды.Наименование = Объект.Наименование
		КонецЕсли;
		ОбъектАренды.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кв.м");
		ОбъектАренды.Записать();
		СсылкаОА = ОбъектАренды.Ссылка;
	КонецЕсли;
	
	//Если НЕ ДоговорКонтрагента.Ссылка.Пустая()
	//		ИЛИ ЗначениеЗаполнено(ДоговорКонтрагента.Дата)
	//		ИЛИ ДоговорКонтрагента.КоличествоДнейОтсрочки <> 0
	//		Или ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора) 
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ТипСтимулаАренды)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаЗаключенияДоговора)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаАкта)
	//		Или ЗначениеЗаполнено(ЗаключениеДоговора.КоличествоДнейСтимулаАренды)Тогда
	//	ДоговорКонтрагента.ОбъектАренды = СсылкаОА;
	//	Если ДоговорКонтрагента.Ссылка.Пустая() Тогда
	//		ЗаполнитьНовыйДоговор()
	//	КонецЕсли;
	//	ДоговорКонтрагента.Организация=Организация;
	//	Если Не ЗначениеЗаполнено(ДоговорКонтрагента.Дата)ТОгда
	//		ДоговорКонтрагента.Дата=ЗаключениеДоговора.ДатаЗаключенияДоговора
	//	КонецЕсли;
	//	мДоговорКонтрагента = РеквизитФормыВЗначение("ДоговорКонтрагента");
	//	Попытка
	//		мДоговорКонтрагента.Записать();
	//		ЗначениеВРеквизитФормы(мДоговорКонтрагента,"ДоговорКонтрагента");
	//	Исключение
	//		Сообщить("Не удалось записать сведения о договоре: "+ОписаниеОшибки());
	//		//Отказ = Истина;
	//		Возврат;
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Если НЕ ЗаключениеДоговора.Ссылка.Пустая()
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ТипСтимулаАренды)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаЗаключенияДоговора)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаАкта)
	//		Или ЗначениеЗаполнено(ЗаключениеДоговора.КоличествоДнейСтимулаАренды)Тогда
	//	ЗаключениеДоговора.ДоговорКонтрагента 	= ДоговорКонтрагента.Ссылка;
	//	ЗаключениеДоговора.ОбъектАренды 		= СсылкаОА;
	//	//ЗаключениеДоговора.ДатаЗаключенияДоговора = ДоговорКонтрагента.Дата;
	//	ЗаключениеДоговора.Контрагент = ДоговорКонтрагента.Владелец;
	//	ЗаключениеДоговора.Организация = ДоговорКонтрагента.Организация;
	//	Если Не ЗначениеЗаполнено(ЗаключениеДоговора.Дата)Тогда
	//		ЗаключениеДоговора.Дата=ТекущаяДата()
	//	КонецЕсли;
	//	мЗаключениеДоговора = РеквизитФормыВЗначение("ЗаключениеДоговора");
	//	Попытка
	//		мЗаключениеДоговора.Записать();
	//		ЗначениеВРеквизитФормы(мЗаключениеДоговора,"ЗаключениеДоговора")
	//	Исключение
	//		Сообщить("Не удалось записать реквизиты: Дата акта, Кол-во дней арендных каникулов: "+ОписаниеОшибки());
	//		//Отказ = Истина;
	//		//Возврат
	//	КонецПопытки;
	//КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя="Этап4" Тогда
		СписокКРассылке = "Список №2";
	ИначеЕсли ТекущаяСтраница.Имя="Этап5" Тогда
		СписокКРассылке = "Список №3";
	//+++AK GREK 10.10.2017 ИП-00015325.01	
	ИначеЕсли  ТекущаяСтраница.Имя="Этап7" Тогда
		СписокКРассылке = "Список №5";
	//---AK
	Иначе
		СписокКРассылке = "Список №1";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиПриИзменении(Элемент)
	Если Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
		Объект.Активное=Истина;
		КоличествоПродавцов = 10;
		КоличествоПродавцовВВыходные = 10;
	Иначе
		КоличествоПродавцов = 30;
		КоличествоПродавцовВВыходные = 30;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНомерТТ(Номер,Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.НомерТочки = &НомерТочки
	|	И СтруктурныеЕдиницы.Ссылка <> &Ссылка
	|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
	Запрос.УстановитьПараметр("НомерТочки",Номер);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат НЕ Запрос.Выполнить().Пустой()
КонецФункции

&НаСервереБезКонтекста
Функция ПользовательФизлица(Физлицо)
	Запрос = Новый Запрос;
	ЗАпрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ,
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизЛицо = &ФизЛицо
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Физлицо",Физлицо);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗАпроса.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка()
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.НомерТочки=0 Тогда
		Отказ = Истина;
		Сообщить("Не установлен номер точки");
		Возврат
	КонецЕсли;
	Если ЕстьНомерТТ(Объект.НомерТочки,Объект.Ссылка) Тогда
		Отказ=Истина;
		Сообщить("Номер точки уже занят");
		Возврат
	КонецЕсли;
	Если Объект.Планограмма.Пустая() Тогда
		Отказ = Истина;
		Сообщить("Не выбрана планограмма");
	КонецЕсли;
	Если Объект.ГрафикИнвентаризации.Пустая() Тогда
		Отказ = Истина;
		Сообщить("Не выбран график инвентаризации")
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаОткрытия)ТОгда
		Отказ = Истина;
		Сообщить("Не установлена дата открытия");
	КонецЕсли;
	Если Объект.АкцептантЗаявок.Пустая() Тогда
		Если НЕ УправляющийРозницей.Пустая() Тогда
			Объект.АкцептантЗаявок = ПользовательФизлица(УправляющийРозницей);
		КонецЕсли;
	КонецЕсли;
	Если Объект.АдресSkype ="" Тогда
		Объект.АдресSkype = Формат(Объект.НомерТочки,"ЧН=; ЧГ=0")+"@vkusvill.ru";
	КонецЕсли;
	Если Объект.АдресЭлектроннойПочты ="" Тогда
		Объект.АдресЭлектроннойПочты = Формат(Объект.НомерТочки,"ЧН=; ЧГ=0")+"@vkusvill.ru";
	КонецЕсли;
	Если Объект.ФорматМагазинаВВ.Пустая() Тогда
		Если ОБъект.ТипРозничнойТочки=ПредопределенноеЗначение("Перечисления.ТипыРозничныхТочек.Магазин") Тогда
			Объект.ФорматМагазинаВВ = ПредопределенноеЗначение("Перечисления.ФорматМагазинаВВ.Развитие")
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлРасстановкиИсходныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ФайлРасстановкиИсходный.Пустая()Тогда
		СтандартнаяОбработка = Ложь;
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "*.dwg|*.dwg";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			Файл = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
			Объект.ФайлРасстановкиИсходный = ЗагрузитьФайлРасстановкиНаСервере(Файл,"Расстановка оборудования начальный");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлРасстановкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ФайлРасстановки.Пустая()Тогда
		СтандартнаяОбработка = Ложь;
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "*.dwg|*.dwg";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			Файл = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
			Объект.ФайлРасстановки = ЗагрузитьФайлРасстановкиНаСервере(Файл,"Расстановка оборудования");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресНаСервере()
	Рез = "";
	//+++AK GREK 09.11.2017 ИП-00014283.15
	//Попросили убрать город из адреса...
	//Если Не Объект.Город.Пустая() Тогда
	//	Если Не Объект.Город.Код = "0001" Тогда
	//		Рез = Объект.Город.Наименование+", ";
	//	КонецЕсли;
	//КонецЕсли;
	//---AK
	Рез = Рез + Объект.Улица+", "+Объект.Дом + Объект.КорпусСтроения; 
	Объект.Адрес = Рез;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАдрес()
	УстановитьАдресНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура Улица1ПриИзменении(Элемент)
	//+++AK GREK 09.11.2017 ИП-00014283.15
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		ОбновитьУлицаСокрНаименование();
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
	//---AK
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Дом1ПриИзменении(Элемент)
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЦФОпоТТ()
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ЦФО,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Развитие КАК Развитие
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Период КАК Период,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО КАК ЦФО,
	|		ЛОЖЬ КАК Развитие,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|				,
	|				СтруктурнаяЕдиница = &ТТ
	|					И ЦФО.Код <> ""ЦФО_88"") КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Период,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	|		ИСТИНА,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|	ИЗ
	|		РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|				,
	|				СтруктурнаяЕдиница = &ТТ
	|					И ЦФО.Код = ""ЦФО_88"") КАК ЦФОСтруктурныхЕдиницСрезПоследних) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЛОЖЬ КАК Развитие
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИСТИНА) КАК ТекЗаписи
	|		ПО ВложенныйЗапрос.Развитие = ТекЗаписи.Развитие";
	Запрос.УстановитьПараметр("ТТ",Объект.Ссылка);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции


&НаКлиенте
Процедура ПлощадьПриИзменении(Элемент)
	Объект.ТорговаяПлощадь = Площадь;
КонецПроцедуры


//+++AK GREK 10.10.2017 ИП-00015325.01
&НаКлиенте
Процедура БонусПоПередачеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.БонусПоПередаче) И ЗначениеЗаполнено(Объект.ДатаНачалаПередачи) ТОгда
		Объект.ДатаОкончанияПередачи=Объект.ДатаНачалаПередачи+Объект.БонусПоПередаче.КоличествоДнейПередачи*24*3600
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПомощникУправляющегоПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ЦФОПередачи) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПерезаполненииЦФО", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перезаполнить ЦФО передачи?';"), Режим, 0);
	
	Иначе
		Объект.ЦФОПередачи = ПодборЦФОПоПользователямЦФО(Объект.ПомощникУправляющего);
	КонецЕсли;
	
	Если Объект.ПомощникУправляющего.Родитель <> Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		Управляющий = Объект.ПомощникУправляющего.Родитель;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодборЦФОПоПользователямЦФО(Сотрудник)
	ВозвращаемаяЦФО = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПользователиПоЦФОСрезПоследних.ЦФО
	                |ИЗ
	                |	РегистрСведений.ПользователиПоЦФО.СрезПоследних КАК ПользователиПоЦФОСрезПоследних
	                |ГДЕ
	                |	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		ВозвращаемаяЦФО = Выборка.Следующий().ЦФО; 
	КонецЕсли;
	Возврат	ВозвращаемаяЦФО;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПерезаполненииЦФО(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

    Объект.ЦФОПередачи = ПодборЦФОПоПользователямЦФО(Объект.ПомощникУправляющего);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПередачиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.БонусПоПередаче) Тогда
		Объект.ДатаОкончанияПередачи=Объект.ДатаНачалаПередачи+Объект.БонусПоПередаче.КоличествоДнейПередачи*24*3600
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура БонусПоПередачеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ЗначенияОтбора = Новый Структура("Действует",ИСТИНА);
	//ПараметрыВыбора =  Новый Структура("Отбор", ЗначенияОтбора);
	//ОткрытьФорму("Справочник.БонусыПоРаскруткеТТ.ФормаВыбора", ПараметрыВыбора, Элемент);
	ФормаВыбора = Справочники.БонусыПоРаскруткеТТ.ПолучитьФормуВыбора(,Элемент);
	
	ФормаВыбора.Отбор.Действует.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.Отбор.Действует.Значение = Истина;
	ФормаВыбора.Отбор.Действует.Использование = Истина;
	Если ЗначениеЗаполнено(МагазинПередачи) Тогда
		ФормаВыбора.Отбор.ТипТочки.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.ТипТочки.Значение = МагазинПередачи.ТипРозничнойТочки;
		ФормаВыбора.Отбор.ТипТочки.Использование = Истина;
	КонецЕсли;	
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура КорпусСтроенияПриИзменении(Элемент)
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры
//---AK

//+++AK GREK 24.10.2017 ИП-00014283.14

&НаКлиенте
Процедура НомерКорпусаПриИзменении(Элемент)
	НомерСтроения = "";
	Объект.КорпусСтроения = "к" + НомерКорпуса;
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура НомерСтроенияПриИзменении(Элемент)
	НомерКорпуса = "";
	Объект.КорпусСтроения = "с" + НомерСтроения;
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры
//---AK

//+++AK GREK 09.11.2017 ИП-00014283.15
&НаКлиенте
Процедура УлицаСокрНаименованиеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры
//---AK

//+++AK GREK 09.11.2017 ИП-00014283.15
&НаКлиенте
Процедура ОбновитьУлицаСокрНаименование()
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		ПолучитьУлицаСокрНаименование(УлицаБезТипа(Объект.Улица));
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры
//---AK

//+++AK GREK 09.11.2017 ИП-00014283.15
&НаСервере
Процедура ПолучитьУлицаСокрНаименование(УлицаДляПоиска = Неопределено)
	Если УлицаДляПоиска = Неопределено Тогда
		УлицаДляПоиска = Объект.Улица;
	КонецЕсли;
	Если ЗначениеЗаполнено(УлицаДляПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	СтруктурныеЕдиницы.УлицаСокрНаименование КАК УлицаСокрНаименование,
		                |	ВЫБОР
		                |		КОГДА СтруктурныеЕдиницы.Город = &Город
		                |			ТОГДА 1
		                |		ИНАЧЕ 0
		                |	КОНЕЦ + ВЫБОР
		                |		КОГДА СтруктурныеЕдиницы.Регион = &Регион
		                |			ТОГДА 1
		                |		ИНАЧЕ 0
		                |	КОНЕЦ КАК РейтингПохожести
		                |ИЗ
		                |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		                |ГДЕ
		                |	СтруктурныеЕдиницы.Адрес ПОДОБНО &Улица
						|	И СтруктурныеЕдиницы.УлицаСокрНаименование <> """"
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	РейтингПохожести УБЫВ";
		Запрос.УстановитьПараметр("Город", Объект.Город);
		Запрос.УстановитьПараметр("Регион", Объект.Регион);
		Запрос.УстановитьПараметр("Улица","%"+УлицаДляПоиска+"%");
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Объект.УлицаСокрНаименование = "";
		Иначе
			РезультатПоиска = Рез.Выгрузить();
			Объект.УлицаСокрНаименование = РезультатПоиска[0].УлицаСокрНаименование;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//---AK


