
&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиТоварныеОграничения(СтруктураЗаписи)
	
    Возврат РегистрыСведений.ТоварныеОграниченияНаТочках.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

Процедура УстановитьДоступность()
	
	Элементы.СтатьиДР.Доступность = (НЕ Объект.Ссылка.Пустая());
	Элементы.КодОПБух.Доступность = ЗначениеЗаполнено(Объект.ДатаПереходаНаУчетПоОбособленномуПодразделению);
	Элементы.УведомлениеОбОткрытииОППодано.Доступность = ЗначениеЗаполнено(Объект.ДатаПереходаНаУчетПоОбособленномуПодразделению);
	Элементы.УведомлениеОЗакрытииОППодано.Доступность = ЗначениеЗаполнено(Объект.ДатаПереходаНаУчетПоОбособленномуПодразделению);
	
КонецПроцедуры	

Процедура УстановитьВидимость()
	
	//+++АК KIRN 2018.02.28 ИП-00018034
	Элементы.СтраницаАссортимент.Видимость 	= (Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница или Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.СторонняяРозница или Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы);
	Элементы.ФорматМагазинаВВ.Видимость 	= (Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин или Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Перекресток или Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Пятерочка);
	Элементы.КонтрагентСтороннейРозницы.Видимость = (Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.СторонняяРозница или Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы);
	Элементы.Группа30.Видимость = (Не Объект.Регион = Справочники.Регионы.НайтиПоКоду(77));
	//---АК KIRN 
	Элементы.АкцептантЗаявок.Видимость 		= (Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин);
	Элементы.ИнкассируемыйБанк.Видимость 	= (Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	Элементы.СтраницаПланыПродаж.Видимость 	= (Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	
	//+++АК KOPA 2018.03.12 ИП-00017970.01
	Элементы.НомерСтороннейТочки.Видимость 	= (Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.СторонняяРозница или Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы);
	//---АК KOPA
	
	//++АК luza 28.09.2018 ИП-00019940
	Элементы.EMailМагазинаСтороннейРозницы.Видимость = Элементы.НомерСтороннейТочки.Видимость;
	//--АК luza	
	
	//+++АК luza 04.10.2018 ИП-00020064
	Элементы.СкладМагазинаСтороннейРозницы.Видимость = Элементы.НомерСтороннейТочки.Видимость;
	//--АК luza	
	
	//+++ AK suvv 31.05.2018 ИП-00018813
	Элементы.КППСторонняяРозница.Видимость 	= Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Перекресток ИЛИ Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Пятерочка;
	//--- AK suvv
	
	//+++АК SHEP 2018.08.01 ИП-00018974
	ЭтоРозница = (Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	Элементы.ТелефонныйНомер1.ТолькоПросмотр = ЭтоРозница ИЛИ ТолькоПросмотр;
	Элементы.ТелефонныйНомер2.ТолькоПросмотр = ЭтоРозница ИЛИ ТолькоПросмотр;
	//---АК SHEP 2018.08.01
	
КонецПроцедуры	

Процедура УстановитьОтборПоказыватьВыведенные()
	
	Ассортимент.Параметры.УстановитьЗначениеПараметра("ПоказыватьВыведенные", ЭтаФорма.ПоказыватьВыведенные);
	Если Элементы.Найти("АссортиментВыведена")<>Неопределено Тогда
		Элементы.АссортиментВыведена.Видимость = ЭтаФорма.ПоказыватьВыведенные;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьОтборПлановПродаж()
	
	ЭтаФорма.ПланыПродаж.Параметры.УстановитьЗначениеПараметра("Ссылка"			, Объект.Ссылка);
	ЭтаФорма.ПланыПродаж.Параметры.УстановитьЗначениеПараметра("ДатаНачала"		, ЭтаФорма.ДатаНачалаПлан);
	ЭтаФорма.ПланыПродаж.Параметры.УстановитьЗначениеПараметра("ДатаОкончания"	, КонецДня(ЭтаФорма.ДатаОкончанияПлан));
	
КонецПроцедуры

Процедура УстановитьОтбор()
	
	СтатьиДР.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", Объект.Ссылка);
	
	ЭтаФорма.Ассортимент.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница"	, Объект.Ссылка);
	ЭтаФорма.Ассортимент.Параметры.УстановитьЗначениеПараметра("ТекущаяДата"		, НачалоДня(ТекущаяДата()));
	ЭтаФорма.Ассортимент.Параметры.УстановитьЗначениеПараметра("ТипЦен"				, Справочники.ТипыЦен.ОсновнойТипЦенПродаж);
	УстановитьОтборПоказыватьВыведенные();

	//// ЦФО
	//ЭлементОтбора = ЭтаФорма.ЦФО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
	//ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование 	= Истина;
	//ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	// Порядок обеспечения
	ЭлементОтбора = ЭтаФорма.ПорядокОбеспечения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТорговаяТочка");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	
	// Планы продаж
	УстановитьОтборПлановПродаж();
	
	//+++АК SHEP 20160603: отбор по заданиям строителей
	ЭлементОтбора = ЭтаФорма.ЗаданияСтроителей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ОбъектCтроительства");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	ЭлементОтбора.Использование 	= Истина;
	//---АК SHEP 20160603
	
КонецПроцедуры

Процедура УстановитьДоступностьЗакладкиТорговыйСбор()
	
	Элементы.ГруппаТорговыйСбор.Доступность = Объект.Город.УдерживаетсяТорговыйСбор;
	
КонецПроцедуры	

Процедура УстановитьДоступностьОжидаемаяВыручка()
	
	мДоступность = РольДоступна("ПолныеПрава")
					ИЛИ РольДоступна("Помощник")
					ИЛИ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Федоров Максим");
	Элементы.ОжидаемаяВыручкаНаЗавтра.Доступность = мДоступность;
	
КонецПроцедуры

Процедура СоздатьУзелДляМобильногоПриложения()

	Если Объект.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин ИЛИ НЕ Объект.Активное ИЛИ НЕ ЗначениеЗаполнено(Объект.НомерТочки) Тогда
		Возврат;
	КонецЕсли
; 
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Магазин = &Магазин");
	
	Запрос.УстановитьПараметр("Магазин", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйУзел = ПланыОбмена.МобильноеПриложение.СоздатьУзел();

	НовыйУзел.Код = 	Объект.НомерТочки;
	НовыйУзел.Наименование = Объект.Наименование;
	НовыйУзел.Магазин = Объект.Ссылка;
	НовыйУзел.ПарольНаУстройстве = "3333";
	НовыйУзел.ВестиЛогОбмена  = истина;	
	НовыйУзел.КодБлокировщика = ПланыОбмена.МобильноеПриложение.ПолучитьНовыйКодБлокировщика();

	Попытка 
		НовыйУзел.Записать();
	Исключение
		Сообщить("Не удалось записать новый узел обмена для  магазина " + Объект.Наименование + " по причине: " + ОписаниеОшибки());
	КонецПопытки; 
   
КонецПроцедуры



Функция ЕстьДоступ(мРоль)
	
	Возврат (РольДоступна(мРоль)
				ИЛИ РольДоступна("ПолныеПрава"));
	
КонецФункции	

&НаКлиенте
Процедура ОтрегулироватьФормуПоПравам()
	
	//+++АК SHEP 2018.08.01 ИП-00018974
	ЭтоРозница = (Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	Элементы.ТелефонныйНомер1.ТолькоПросмотр = ЭтоРозница;
	Элементы.ТелефонныйНомер2.ТолькоПросмотр = ЭтоРозница;
	Элементы.ТелефонныйНомер11.Видимость = ЭтоРозница;
	Элементы.ТелефонныйНомер1.Видимость = НЕ ЭтоРозница;
	//---АК SHEP 2018.08.01
	
	Если СЕПолныеПрава Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Элементы.Наименование.Доступность 			= СЕРедактированиеПостоянныхДанных И Элементы.Наименование.Доступность;
	Элементы.Код.Доступность 					= СЕРедактированиеШапки И Элементы.Код.Доступность;
	Элементы.id_TT.Доступность 					= СЕРедактированиеПостоянныхДанных И Элементы.id_TT.Доступность;
	Элементы.НомерТочки.Доступность 			= СЕРедактированиеПостоянныхДанных И Элементы.НомерТочки.Доступность;
	Элементы.ТипСтруктурнойЕдиницы.Доступность 	= СЕРедактированиеПостоянныхДанных И Элементы.ТипСтруктурнойЕдиницы.Доступность;
	Элементы.ТипРозничнойТочки.Доступность 		= СЕРедактированиеПостоянныхДанных И Элементы.ТипРозничнойТочки.Доступность;
	Элементы.ФорматМагазинаВВ.Доступность 		= СЕРедактированиеШапки И Элементы.ФорматМагазинаВВ.Доступность;
	Элементы.ЕстьКасса.Доступность 				= СЕРедактированиеШапки И Элементы.ЕстьКасса.Доступность;
	Элементы.Активное.Доступность 				= СЕРедактированиеШапки И Элементы.Активное.Доступность;
	Элементы.Регион.Доступность 				= СЕРедактированиеПостоянныхДанных И Элементы.Регион.Доступность;
	Элементы.СтатусТорговойТочки.Доступность 	= СЕРедактированиеШапки И Элементы.СтатусТорговойТочки.Доступность;
	Элементы.АкцептантЗаявок.Доступность 		= СЕРедактированиеПостоянныхДанных И Элементы.АкцептантЗаявок.Доступность;
	
	//
	Элементы.ДатаОткрытияДляСайта.Доступность 	= СЕРедактированиеОбщихДанных И Элементы.ДатаОткрытияДляСайта.Доступность;
	Элементы.Адрес.Доступность 					= СЕРедактированиеПостоянныхДанных И Элементы.Адрес.Доступность;
	Элементы.ВремяПоставки.Доступность 					= СЕРедактированиеПостоянныхДанных И Элементы.ВремяПоставки.Доступность;
	Элементы.КомментарийКАдресу.Доступность 	= СЕРедактированиеОбщихДанных И Элементы.КомментарийКАдресу.Доступность;
	Элементы.Планограмма.Доступность 			= СЕРедактированиеОбщихДанных И Элементы.Планограмма.Доступность;
	Элементы.id_ЦФО.Доступность 				= СЕРедактированиеОбщихДанных И Элементы.id_ЦФО.Доступность;
	Элементы.Цвет_ТТ.Доступность 				= СЕРедактированиеОбщихДанных И Элементы.Цвет_ТТ.Доступность;
	Элементы.КоэффициентРаспределенияЗатрат.Доступность = СЕРедактированиеОбщихДанных И Элементы.КоэффициентРаспределенияЗатрат.Доступность;
	Элементы.СрокПередачи.Доступность 			= СЕРедактированиеПостоянныхДанных И Элементы.СрокПередачи.Доступность;
	Элементы.ГрафикИнвентаризации.Доступность 	= СЕРедактированиеОбщихДанных И Элементы.ГрафикИнвентаризации.Доступность;
	Элементы.РаботаетСДоставкой.Доступность 	= СЕРедактированиеОбщихДанных И Элементы.РаботаетСДоставкой.Доступность;
	Элементы.ОсновнойСклад.Доступность 			= СЕРедактированиеОбщихДанных И Элементы.ОсновнойСклад.Доступность;
	Элементы.НеУчаствуетВРаспределении.Доступность = СЕРедактированиеОбщихДанных И Элементы.НеУчаствуетВРаспределении.Доступность;
	Элементы.ОбязательныйВводОперацийСФотоЧерезМобильноеУстройство.Доступность = СЕРедактированиеОбщихДанных И Элементы.ОбязательныйВводОперацийСФотоЧерезМобильноеУстройство.Доступность;
	Элементы.КоординатыШирота.Доступность 		= СЕРедактированиеОбщихДанных И Элементы.КоординатыШирота.Доступность;
	Элементы.КоординатыДолгота.Доступность 		= СЕРедактированиеОбщихДанных И Элементы.КоординатыДолгота.Доступность;
	Элементы.СтанцииМетро.Доступность 			= СЕРедактированиеОбщихДанных И Элементы.СтанцииМетро.Доступность;
	Элементы.АдминистративныйОкруг.Доступность 	= СЕРедактированиеПостоянныхДанных И Элементы.АдминистративныйОкруг.Доступность;
	Элементы.Район.Доступность 					= СЕРедактированиеПостоянныхДанных И Элементы.Район.Доступность;
	Элементы.Город.Доступность 					= СЕРедактированиеПостоянныхДанных И Элементы.Город.Доступность;
	Элементы.ТелефонныйНомер1.Доступность 		= СЕРедактированиеОбщихДанных И Элементы.ТелефонныйНомер1.Доступность;
	Элементы.ТелефонныйНомер2.Доступность 		= СЕРедактированиеОбщихДанных И Элементы.ТелефонныйНомер2.Доступность;
	Элементы.АдресSkype.Доступность 			= СЕРедактированиеПостоянныхДанных И Элементы.АдресSkype.Доступность;
	Элементы.ГрафикРаботыМагазина.Доступность 	= СЕРедактированиеОбщихДанных И Элементы.ГрафикРаботыМагазина.Доступность;
	Элементы.ГрафикНаФорме.Доступность 	= СЕРедактированиеОбщихДанных И Элементы.ГрафикНаФорме.Доступность;
	Элементы.АдресЭлектроннойПочты.Доступность 	= СЕРедактированиеПостоянныхДанных И Элементы.АдресЭлектроннойПочты.Доступность;
	Элементы.НазваниеДляСайта.Доступность 		= СЕРедактированиеОбщихДанных И Элементы.НазваниеДляСайта.Доступность;
	Элементы.КомментарийДляСайта.Доступность 	= СЕРедактированиеОбщихДанных И Элементы.КомментарийДляСайта.Доступность;
	Элементы.АдресSkype.Доступность 			= СЕРедактированиеОбщихДанных И Элементы.АдресSkype.Доступность;
	Элементы.АдресSkype.Доступность 			= СЕРедактированиеОбщихДанных И Элементы.АдресSkype.Доступность;
	
	//
	Элементы.СтатьиДР.Доступность 				= СЕРедактированиеБухДанных И Элементы.СтатьиДР.Доступность;
	Элементы.ЦФО.Доступность 					= СЕРедактированиеБухДанных И Элементы.ЦФО.Доступность;
	Элементы.ДатаОткрытия.Доступность 			= СЕРедактированиеБухДанных И Элементы.ДатаОткрытия.Доступность;
	//+++АК SHEP 2018.02.01 ИП-00017771
	//Элементы.ДатаЗакрытия.Доступность 			= СЕРедактированиеБухДанных И Элементы.ДатаЗакрытия.Доступность;
	Элементы.ДатаЗакрытия.Доступность 			= СЕРедактированиеДатыЗакрытия И Элементы.ДатаЗакрытия.Доступность;
	//---АК SHEP 2018.02.01
	//+++ AK suvv 12.07.2018 ИП-00019141
	Элементы.ФактическаяДатаПередачи.Доступность = СЕРедактированиеДатыЗакрытия И Элементы.ДатаЗакрытия.Доступность;
	//--- AK suvv
	//+++ AK suvv 2018.09.27 ИП-00019860
	Элементы.ДатаПродажиПерваяТысячаРублей.Доступность = СЕРедактированиеБухДанных И Элементы.ДатаОткрытия.Доступность;
	//--- AK suvv
	Элементы.ДатаПереходаНаУчетПоОбособленномуПодразделению.Доступность = СЕРедактированиеБухДанных И Элементы.ДатаПереходаНаУчетПоОбособленномуПодразделению.Доступность;
	Элементы.УведомлениеОбОткрытииОППодано.Доступность = СЕРедактированиеБухДанных И Элементы.УведомлениеОбОткрытииОППодано.Доступность;
	Элементы.УведомлениеОЗакрытииОППодано.Доступность = СЕРедактированиеБухДанных И Элементы.УведомлениеОЗакрытииОППодано.Доступность;
	Элементы.КодОПБух.Доступность 				= СЕРедактированиеБухДанных И Элементы.КодОПБух.Доступность;
	Элементы.ОКТМО.Доступность 					= СЕРедактированиеБухДанных И Элементы.ОКТМО.Доступность;
	Элементы.СовместнаяДеятельность.Доступность = СЕРедактированиеБухДанных И Элементы.СовместнаяДеятельность.Доступность;
	Элементы.ИспользуетсяВЗаявкеДляСтороннегоФизлица.Доступность = СЕРедактированиеБухДанных И Элементы.ИспользуетсяВЗаявкеДляСтороннегоФизлица.Доступность;
	Элементы.ГруппаДоступаСтруктурнойЕдиницы.Доступность = СЕРедактированиеБухДанных И Элементы.ГруппаДоступаСтруктурнойЕдиницы.Доступность;
	Элементы.КПП.Доступность 					= СЕРедактированиеБухДанных И Элементы.КПП.Доступность;
	//+++ AK suvv 31.05.2018 ИП-00018813 
	Элементы.КППСторонняяРозница.Доступность 	= СЕРедактированиеБухДанных И Элементы.КППСторонняяРозница.Доступность;
	//--- AK suvv
	Элементы.Терминал.Доступность 				= СЕРедактированиеБухДанных И Элементы.Терминал.Доступность;
	Элементы.ТорговыйСбор.Доступность 			= СЕРедактированиеБухДанных И Элементы.ТорговыйСбор.Доступность;
	Элементы.УведомлениеОбОткрытииПодано.Доступность = СЕРедактированиеБухДанных И Элементы.УведомлениеОбОткрытииПодано.Доступность;
	Элементы.УведомлениеОСнятииСУчетаПодано.Доступность = СЕРедактированиеБухДанных И Элементы.УведомлениеОСнятииСУчетаПодано.Доступность;
	Элементы.НомерЯвочнойКартыДляИнкассации.Доступность = СЕРедактированиеБухДанных И Элементы.НомерЯвочнойКартыДляИнкассации.Доступность;
	Элементы.ИнкассируемыйБанк.Доступность 		= СЕРедактированиеБухДанных И Элементы.ИнкассируемыйБанк.Доступность;
	Элементы.Терминал.Доступность 				= СЕРедактированиеБухДанных И Элементы.Терминал.Доступность;
	
	//
	Элементы.КоличествоКасс.Доступность				= Истина;
	Элементы.ОбщаяПлощадь.Доступность				= Истина;
	Элементы.Категория.Доступность					= Истина;
	Элементы.ХолодильноеОборудование.Доступность	= Истина;
	
	
	//+++АК ZHAS 18-08-17 ИП-00015887
	Элементы.ГруппаНовый1.Видимость = Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница");
	Если СЕПрикреплениеФайловСтрЕдиницы	Тогда
		Элементы.ФормаУдалить.Доступность 						= Истина;
		Элементы.ПрикрепленныеФайлы.ИзменятьСоставСтрок			= Истина;
	КонецЕсли;
    //---АК ZHAS 18-08-17 ИП-00015887
	
	//+++АК KIRN 2018.03.02 ИП-00018034
	Элементы.АссортиментЗаполнитьАссортиментПоФормату.Доступность = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.МожетЗаполнятьАссортиментДругихТорговыхМарок")		, Ложь);//
	//---АК KIRN 
	//+++АК sils 06.11.2018 ИП-00020255
	Элементы.ГруппаДляИнкассации.ТолькоПросмотр = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.ЗапретРедактированияИнкссацияСтруктурныхЕдиниц"), Ложь);
	//---АК
	
	//+++ЗНК Zionek 2018.11.23 ИП-00020524
	Элементы.знк_Самоуправление.Доступность = СЕРедактированиеШапки;
	//---ЗНК Zionek 2018.11.23 ИП-00020524
	
КонецПроцедуры	

//+++ak ziga ИП-00016506.03 20171115
&НаСервереБезКонтекста
Функция ЭтоОтветственныйЗаАутсорс()
	
	Возврат РольДоступна("ОтветственныйЗаРаботуСАутсорсингом");
	
КонецФункции
//---ak ziga ИП-00016506.03 20171115

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++ak ziga ИП-00016506.03 20171115
	Если  ЭтоОтветственныйЗаАутсорс() Тогда 
		Отказ=истина;
	КонецЕсли;
	//---ak ziga ИП-00016506.03 20171115
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетКопироватьСтруктурныеЕдиницы, Ложь) = Ложь Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вам запрещено создавать структурную единицу копированием",,,, Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ПриемкаТовараБезПересчета = Истина;
	КонецЕсли;	
	
	СЕПолныеПрава 				= УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПолныеПраваНаРедактированиеСЕ		, Ложь);
	СЕРедактированиеШапки 		= УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьРеквизитыШапкиСЕ	, Ложь);
	СЕРедактированиеБухДанных 	= УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьБухДанныеСЕ		, Ложь);
	СЕРедактированиеОбщихДанных = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьОбщиеДанныеСЕ		, Ложь);
	СЕРедактированиеПостоянныхДанных = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьПостоянныеДанные		, Ложь);
	
	//++АК ZHAS 18-08-17 ИП-00015887
	СЕПрикреплениеФайловСтрЕдиницы = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПрикреплениеФайловСтрЕдиницы		, Ложь);
	//++АК ZHAS 18-08-17 ИП-00015887
	//+++АК SHEP 2018.02.01 ИП-00017771
	СЕРедактированиеДатыЗакрытия = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьДатуЗакрытияСЕ	, Ложь);
	//---АК SHEP 2018.02.01 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиниц.Период КАК Период,
	|	ЦФОСтруктурныхЕдиниц.ЦФО,
	//+++ AK suvv 18.06.2018 ИП-00018658
	//|	ЦФОСтруктурныхЕдиниц.Организация
	|	ЦФОСтруктурныхЕдиниц.Организация,
	|   ЦФОСтруктурныхЕдиниц.АвторИзменений,
	|   ЦФОСтруктурныхЕдиниц.ДатаИзменений
	//--- AK suvv
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц КАК ЦФОСтруктурныхЕдиниц
	|ГДЕ
	|	ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Цфо.Загрузить(Запрос.Выполнить().Выгрузить());
	
	БезФильтраПоИерархии = Истина;
	
	ЭтаФорма.ДатаНачалаПлан		= ТекущаяДата();
	ЭтаФорма.ДатаОкончанияПлан	= ЭтаФорма.ДатаНачалаПлан + 6*86400;
	
	УстановитьОтбор();
	УстановитьДоступность();
	УстановитьВидимость();
	Элементы.АссортиментЗапретитьПозиции.Видимость 		= Ложь;
	Элементы.АссортиментСнятьЗапретПозиции.Видимость 	= Ложь;
	Если НЕ Элементы.Найти("АссортиментЗапрещена") = Неопределено Тогда
		Элементы.АссортиментЗапрещена.Видимость 		= Ложь;
	КонецЕсли;	
	
	
	
	//+++АК gusd
	ЭтаФорма.Цвет_ТТ = РеквизитФормыВЗначение("Объект").ПолучитьЦветТТ();
	//---АК gusd
	
	ЭтаФорма.ДатаУстановкиИзменений = ТекущаяДата();
	
	//+++АК
	ЗаполнитьРолиОтветственных();
	//---АК
	
	//+++АК GOLV
	ЭлементОтбора = ЭтаФорма.Симкарты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Привязка");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;	
	//---АК	
	
	//+++АК obue 20160316
	ЭлементОтбора = ЭтаФорма.СписокТекущихРегламентныхРабот.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	//---АК
	УстановитьДоступностьЗакладкиТорговыйСбор();
	УстановитьДоступностьОжидаемаяВыручка();
	
	//+++АК pans 20160525
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Элементы.ПарольЭлектроннойПочты.Видимость = Ложь;
	КонецЕсли;
	//---АК pans 20160525
	//АК БЕЛН 16.06.2016++
	Заявки.Параметры.УстановитьЗначениеПараметра("Магазин", Объект.Ссылка);
	//АК БЕЛН 16.06.2016--
	
	Ассортимент.Параметры.УстановитьЗначениеПараметра("ПризнакДляДетей", Справочники.ПризнакиУчетаНоменклатуры.НайтиПоНаименованию("Детские товары"));
	Ассортимент.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	
	ПрочитатьТекущийГрафикМагазина();

	//+++ AK suvv 18.06.2018 ИП-00018658
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	//--- AK suvv
	
	//+++ AK suvv 03.07.2018 ИП-00018812
	Если Параметры.Свойство("ЦФО") и Объект.Ссылка.Пустая() Тогда
		ЦФО.Загрузить(Параметры.ЦФО);
	КонецЕсли;
	//--- AK suvv
	
	//+++АК ILIK 2018.07.16 ИП-00019094
	ЗаполнитьСлужбыКурьерскойДоставки();
	//---АК ILIK
	
	//+++АК SHEP 2018.08.01 ИП-00018974
	ЭтоРозница = (Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	Если ЭтоРозница Тогда
		ЗаполнитьТелефонныеНомера();
	КонецЕсли;
	//---АК SHEP 2018.08.01 
	
	//+++ AK suvv 2018.10.05 ИП-00019795
	ЗаполнитьЗначенияСвойствСЕ();
	//--- AK suvv
	
	//+++АК SHEP 2018.09.20 ИП-00019906
	ДобавитьКонтактнуюИнформациюНаФормуСервер();
	//---АК SHEP 2018.09.20
	
	//+++АК luza 27.09.2018 ИП-00019940
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗаполнитьEmailСтороннейТТСервер();
		//+++АК luza 04.10.2018 ИП-00020064
		ЗаполнитьСкладМагазинаСтороннейРозницыСервер();
	КонецЕсли;
	//-- АК luza
	
	//+++АК MOSD 2018.12.05 ИП-00020544 
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьЗначенияОграниченияВыручки();
	КонецЕсли;
	//---АК MOSD 
	
	УстановитьАвторовРеквизитовСервер();
	
КонецПроцедуры
//---АК MOSD 

//+++АК SHEP 2018.08.01 ИП-00018974
//+++АК SHEP 2018.11.14 ИП-00020361: берём основной номер телефона, если возможно

&НаСервере
Процедура _ЗаполнитьТелефонныеНомера()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ПОМЕСТИТЬ СтруктурныеЕдиницы
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		|	И &СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПривязкаТелефоновСрезПоследних.Привязка,
		|	ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
		|	ПривязкаТелефоновСрезПоследних.Номер КАК Номер
		|ПОМЕСТИТЬ ТелефонныеНомераПредв
		|ИЗ
		|	РегистрСведений.ПривязкаТелефонов.СрезПоследних(, НЕ Номер.Заблокирован) КАК ПривязкаТелефоновСрезПоследних
		|ГДЕ
		|	ПривязкаТелефоновСрезПоследних.Привязка ССЫЛКА Справочник.СтруктурныеЕдиницы
		|	И ПривязкаТелефоновСрезПоследних.Привязка В
		|			(ВЫБРАТЬ
		|				СтруктурныеЕдиницы.Ссылка
		|			ИЗ
		|				СтруктурныеЕдиницы КАК СтруктурныеЕдиницы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПривязкаТелефоновСрезПоследних.Привязка,
		|	ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
		|	ПривязкаТелефоновСрезПоследних.Номер.Код КАК ТелефонныйНомер1,
		|	ВЫБОР
		|		КОГДА ОсновныеТелефоны.Телефон ЕСТЬ NULL
		|				И НЕ ВложенныйЗапрос.Номеров = 1
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Основной
		|ПОМЕСТИТЬ ТелефонныеНомераОсновные
		|ИЗ
		|	ТелефонныеНомераПредв КАК ПривязкаТелефоновСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеТелефоны КАК ОсновныеТелефоны
		|		ПО ПривязкаТелефоновСрезПоследних.Привязка = ОсновныеТелефоны.Привязка
		|			И ПривязкаТелефоновСрезПоследних.Назначение = ОсновныеТелефоны.Назначение
		|			И ПривязкаТелефоновСрезПоследних.Номер = ОсновныеТелефоны.Телефон
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТелефонныеНомераПредв.Привязка КАК Привязка,
		|			ТелефонныеНомераПредв.Назначение КАК Назначение,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТелефонныеНомераПредв.Номер) КАК Номеров
		|		ИЗ
		|			ТелефонныеНомераПредв КАК ТелефонныеНомераПредв
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТелефонныеНомераПредв.Привязка,
		|			ТелефонныеНомераПредв.Назначение) КАК ВложенныйЗапрос
		|		ПО ПривязкаТелефоновСрезПоследних.Привязка = ВложенныйЗапрос.Привязка
		|			И ПривязкаТелефоновСрезПоследних.Назначение = ВложенныйЗапрос.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТелефонныеНомераПредв
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТелефонныеНомераОсновные.Привязка,
		|	МАКСИМУМ(ТелефонныеНомераОсновные.Основной) КАК Основной
		|ПОМЕСТИТЬ ТелефонныеНомераМакс
		|ИЗ
		|	ТелефонныеНомераОсновные КАК ТелефонныеНомераОсновные
		|
		|СГРУППИРОВАТЬ ПО
		|	ТелефонныеНомераОсновные.Привязка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТелефонныеНомераОсновные.Привязка,
		|	МАКСИМУМ(ТелефонныеНомераОсновные.ТелефонныйНомер1) КАК ТелефонныйНомер1
		|ИЗ
		|	ТелефонныеНомераОсновные КАК ТелефонныеНомераОсновные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТелефонныеНомераМакс КАК ТелефонныеНомераМакс
		|		ПО ТелефонныеНомераОсновные.Привязка = ТелефонныеНомераМакс.Привязка
		|			И ТелефонныеНомераОсновные.Основной = ТелефонныеНомераМакс.Основной
		|
		|СГРУППИРОВАТЬ ПО
		|	ТелефонныеНомераОсновные.Привязка");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		ТелефонныйНомер1 = ВыборкаЗапроса.ТелефонныйНомер1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТелефонныеНомера()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ПривязкаТелефоновСрезПоследних.Привязка КАК Справочник.СтруктурныеЕдиницы) КАК Привязка,
	                      |	ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
	                      |	ПривязкаТелефоновСрезПоследних.Номер КАК Номер
	                      |ПОМЕСТИТЬ ТелефонныеНомераПредв
	                      |ИЗ
	                      |	РегистрСведений.ПривязкаТелефонов.СрезПоследних(, НЕ Номер.Заблокирован) КАК ПривязкаТелефоновСрезПоследних
	                      |ГДЕ
	                      |	(ВЫРАЗИТЬ(ПривязкаТелефоновСрезПоследних.Привязка КАК Справочник.СтруктурныеЕдиницы)) = &СтруктурнаяЕдиница
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПривязкаТелефоновСрезПоследних.Привязка,
	                      |	ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
	                      |	ПривязкаТелефоновСрезПоследних.Номер.Код КАК ТелефонныйНомер1,
	                      |	ВЫБОР
	                      |		КОГДА ОсновныеТелефоны.Телефон ЕСТЬ NULL
	                      |				И НЕ ВложенныйЗапрос.Номеров = 1
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Основной
	                      |ПОМЕСТИТЬ ТелефонныеНомераОсновные
	                      |ИЗ
	                      |	ТелефонныеНомераПредв КАК ПривязкаТелефоновСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеТелефоны КАК ОсновныеТелефоны
	                      |		ПО ПривязкаТелефоновСрезПоследних.Привязка = ОсновныеТелефоны.Привязка
	                      |			И ПривязкаТелефоновСрезПоследних.Назначение = ОсновныеТелефоны.Назначение
	                      |			И ПривязкаТелефоновСрезПоследних.Номер = ОсновныеТелефоны.Телефон
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			ТелефонныеНомераПредв.Привязка КАК Привязка,
	                      |			ТелефонныеНомераПредв.Назначение КАК Назначение,
	                      |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТелефонныеНомераПредв.Номер) КАК Номеров
	                      |		ИЗ
	                      |			ТелефонныеНомераПредв КАК ТелефонныеНомераПредв
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ТелефонныеНомераПредв.Привязка,
	                      |			ТелефонныеНомераПредв.Назначение) КАК ВложенныйЗапрос
	                      |		ПО ПривязкаТелефоновСрезПоследних.Привязка = ВложенныйЗапрос.Привязка
	                      |			И ПривязкаТелефоновСрезПоследних.Назначение = ВложенныйЗапрос.Назначение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ТелефонныеНомераПредв
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТелефонныеНомераОсновные.Привязка,
	                      |	МАКСИМУМ(ТелефонныеНомераОсновные.Основной) КАК Основной
	                      |ПОМЕСТИТЬ ТелефонныеНомераМакс
	                      |ИЗ
	                      |	ТелефонныеНомераОсновные КАК ТелефонныеНомераОсновные
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТелефонныеНомераОсновные.Привязка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТелефонныеНомераОсновные.Привязка,
	                      |	МАКСИМУМ(ТелефонныеНомераОсновные.ТелефонныйНомер1) КАК ТелефонныйНомер1
	                      |ИЗ
	                      |	ТелефонныеНомераОсновные КАК ТелефонныеНомераОсновные
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТелефонныеНомераМакс КАК ТелефонныеНомераМакс
	                      |		ПО ТелефонныеНомераОсновные.Привязка = ТелефонныеНомераМакс.Привязка
	                      |			И ТелефонныеНомераОсновные.Основной = ТелефонныеНомераМакс.Основной
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТелефонныеНомераОсновные.Привязка");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		ТелефонныйНомер1 = ВыборкаЗапроса.ТелефонныйНомер1;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	МассивДублированныхТелефонов = ПолучитьМассивДублированныхТелефонов();
	Если МассивДублированныхТелефонов.Количество() > 0 Тогда
		Результат = ОткрытьФормуМодально("Справочник.СтруктурныеЕдиницы.Форма.ФормаЗадублированныхТелефонныхНомеров", Новый Структура("ТелефонныйНомер1, ТелефонныйНомер2, МассивТТ", Объект.ТелефонныйНомер1, Объект.ТелефонныйНомер2, МассивДублированныхТелефонов));
		Если Результат <> Истина Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТелефонныйНомер1)
		И СтрДлина(Объект.ТелефонныйНомер1) > 10 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Общая длина телефонного номера не должна превышать 10 цифр", Объект, "ТелефонныйНомер1", "Объект.ТелефонныйНомер1", Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТелефонныйНомер2)
		И СтрДлина(Объект.ТелефонныйНомер2) > 10 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Общая длина телефонного номера не должна превышать 10 цифр", Объект, "ТелефонныйНомер2", "Объект.ТелефонныйНомер2", Отказ);
	КонецЕсли;
	
	//+++АК
	ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанные();
	Если НЕ ВсеОК Тогда
		Отказ = Истина;
	КонецЕсли; 
	//---АК
	
КонецПроцедуры

//+++АК gusd
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЦветТТ", ЭтаФорма.Цвет_ТТ);
	
	Если Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Планограмма) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните планограмму!(Закладка Дополнительно)", Объект, "Планограмма", "Объект.Планограмма", Отказ);
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.ГрафикИнвентаризации) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните график инвентаризаций!(Закладка Дополнительно)", Объект, "ГрафикИнвентаризации", "Объект.ГрафикИнвентаризации", Отказ);
			Иначе
				Если Объект.Планограмма <> Объект.ГрафикИнвентаризации.Планограмма Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указанная планограмма не равна планограмме в графике инвентаризаций!(Закладка Дополнительно)", Объект, "Планограмма", "Объект.Планограмма", Отказ);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.АкцептантЗаявок) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните акцептанта заявок", Объект, "АкцептантЗаявок", "Объект.АкцептантЗаявок", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ФорматМагазинаВВ) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен формат магазина ВВ", Объект, "ФорматМагазинаВВ", "Объект.ФорматМагазинаВВ", Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
			И Объект.Регион = Справочники.Регионы.НайтиПоНаименованию("Москва") 
			И НЕ ЗначениеЗаполнено(Объект.АдминистративныйОкруг) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните административный округ!(Закладка Дополнительно)", Объект, "АдминистративныйОкруг", "Объект.АдминистративныйОкруг", Отказ);
	КонецЕсли;
	
	Если Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница 
			И Объект.Регион = Справочники.Регионы.НайтиПоНаименованию("Москва")
			И НЕ ЗначениеЗаполнено(Объект.Район) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните район!(Закладка Дополнительно)", Объект, "Район", "Объект.Район", Отказ);
	КонецЕсли;
	
	Если Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
			И Объект.НомерТочки > 0
		    И НЕ ЗначениеЗаполнено(Объект.ТипРозничнойТочки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен тип розничной точки", Объект, "ТипРозничнойТочки", "Объект.ТипРозничнойТочки", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТорговаяПлощадь)
			И Объект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин
			И Объект.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Открыт Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена торговая площадь (закладка Дополнительно)", Объект, "ТорговаяПлощадь", "Объект.ТорговаяПлощадь", Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерТочки) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка"		, Объект.Ссылка);
		Запрос.УстановитьПараметр("НомерТочки"	, Объект.НомерТочки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка <> &Ссылка
		|	И СтруктурныеЕдиницы.НомерТочки = &НомерТочки";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Уже есть ТТ с таким номером точки: " + Выборка.Ссылка,,,, Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	//+++ AK suvv 12.07.2018 ИП-00019053
	СтарыеРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Ссылка, "ОбщаяПлощадь, ТорговаяПлощадь");
	ПараметрыЗаписи.Вставить("ОбщаяПлощадь", СтарыеРеквизиты.ОбщаяПлощадь <> Объект.ОбщаяПлощадь);
	ПараметрыЗаписи.Вставить("ТорговаяПлощадь", СтарыеРеквизиты.ТорговаяПлощадь <> Объект.ТорговаяПлощадь);
	//--- AK suvv

КонецПроцедуры
//---АК gusd

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//+++АК
	Если НЕ Отказ Тогда
	
		ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущийОбъект.Ссылка);
		Если НЕ ВсеОК Тогда
			Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли; 
	//---АК
	//АК БЕЛН 16.06.2016++
	Заявки.Параметры.УстановитьЗначениеПараметра("Магазин", Объект.Ссылка);
	//АК БЕЛН 16.06.2016--
	
	//+++АК SHEP 2018.09.24 ИП-00019906
	ЗаписатьКИПриЗаписиНаСервере(ТекущийОбъект);
	
	//+++АК luza 27.09.2018 ИП-00019940
	Если ТекEMailМагазинаСтороннейРозницы <> EMailМагазинаСтороннейРозницы Тогда
		ЗаписатьEmailСтороннейТТСервер();
	КонецЕсли;	
	//-- АК luza 
	
	//+++АК luza 04.10.2018 ИП-00020064
	Если СкладМагазинаСтороннейРозницы <> ТекСкладМагазинаСтороннейРозницы Тогда
		ЗаписатьСкладМагазинаСтороннейРозницыСервер();
	КонецЕсли;	
	//-- АК luza 

	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьОтбор();
	УстановитьДоступность();
	
	//+++АК
	ЗаполнитьРолиОтветственных();
	//---АК
	
	СоздатьУзелДляМобильногоПриложения();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЦФОСтруктурныхЕдиниц, ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
	НаборЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьНаборЗаписей();
	НаборЦФО.Отбор.СтруктурнаяЕдиница.Установить(Объект.Ссылка);
	ТабЦФО = ЦФО.Выгрузить();
	ТабЦФО.Колонки.Добавить("СтруктурнаяЕдиница");
	ТабЦФО.ЗаполнитьЗначения(Объект.Ссылка, "СтруктурнаяЕдиница");
	НаборЦФО.Загрузить(ТабЦФО);
	НаборЦФО.Записать();
	//КонецЕсли;
	
	//МассивПараметров = Новый Массив(3);
	//МассивПараметров[0] = Объект.Ссылка;
	//МассивПараметров[1] = Неопределено;
	//МассивПараметров[2] = Неопределено;
	//Ключ = Новый УникальныйИдентификатор;
	//
	//ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ПересчитатьНеобходимостьПечатиЦенников", МассивПараметров, Ключ, "Пересчет необходимости печати ценников");
	//ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ПересчитатьНеобходимостьПечатиЦенниковТТ", МассивПараметров, Ключ, "Пересчет необходимости печати ценников ТТ");
	
	//+++ AK suvv 17.07.2018 ИП-00019053
	ТекущийОбъект.ЗаписатьИсториюИзмененияРеквизитовСЕ(ПараметрыЗаписи);
	//--- AK suvv
	
	//+++АК ILIK 2018.07.16 ИП-00019094
	ЗаписатьСлужбыКурьерскойДоставки();
	//---АК ILIK

	//+++ AK suvv 2018.10.05 ИП-00019795
	ИзмененныеСвойства = Новый ТаблицаЗначений;
	ИзмененныеСвойства.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СвойстваСтруктурныхЕдиниц"));
	ИзмененныеСвойства.Колонки.Добавить("Значение");
	
	Для Каждого Эл из Элементы.Группа33.ПодчиненныеЭлементы Цикл
		
		Свойство = ПланыВидовХарактеристик.СвойстваСтруктурныхЕдиниц[Эл.Имя];	
		НовСтрока = ИзмененныеСвойства.Добавить();
		НовСтрока.Свойство = Свойство;
		НовСтрока.Значение = ЭтаФорма[Эл.Имя];
		
	КонецЦикла;
	
	//+++АК CISA 2018.11.13 ИП-00019730
	НовСтрока = ИзмененныеСвойства.Добавить();
	НовСтрока.Свойство = ПланыВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ВыездноеМероприятие;
	НовСтрока.Значение = ЭтаФорма["ВыездноеМероприятие"];
	//---АК CISA

	ТекущийОбъект.СохранитьЗначенияСвойствСЕ(ИзмененныеСвойства);	
	//--- AK suvv

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапись(Команда)
	//+++АК
	//Запись = РегистрыСведений.ПраваДоступаКСтатьямДР.СоздатьМенеджерЗаписи();
	//Запись.СтруктурнаяЕдиница = Объект.Ссылка;
	//Запись.ПолучитьФорму().Открыть();
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапись(Команда)
	//+++АК
	//Если Элементы.СтатьиДР.ТекущиеДанные <> Неопределено Тогда
	//	Запись = РегистрыСведений.ПраваДоступаКСтатьямДР.СоздатьМенеджерЗаписи();
	//	Запись.СтруктурнаяЕдиница = Объект.Ссылка;
	//	Запись.СтатьяДР = Элементы.СтатьиДР.ТекущиеДанные.СтатьяДР;
	//	Запись.Прочитать();
	//	Запись.ПолучитьФорму().Открыть();
	//КонецЕсли;
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапись(Команда)
	//+++АК
	//Если Элементы.СтатьиДР.ТекущиеДанные <> Неопределено Тогда
	//	Если Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//		Набор = РегистрыСведений.ПраваДоступаКСтатьямДР.СоздатьНаборЗаписей();
	//		Набор.Отбор.СтруктурнаяЕдиница.Значение = Объект.Ссылка;
	//		Набор.Отбор.СтруктурнаяЕдиница.Использование = Истина;
	//		Набор.Отбор.СтатьяДР.Значение = Элементы.СтатьиДР.ТекущиеДанные.СтатьяДР;
	//		Набор.Отбор.СтатьяДР.Использование = Истина;
	//		Набор.Записать(Истина);
	//		
	//		УстановитьОтбор();
	//	КонецЕсли;
	//КонецЕсли;
	//---АК
КонецПроцедуры


&НаКлиенте
Процедура ТипСтруктурнойЕдиницыПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	//+++АК
	ЗаполнитьРолиОтветственных();
	//---АК
	
	//+++АК KIRN 2018.03.22 ИП-00018206      
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница") 
		ИЛИ Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы") Тогда //+++АК luza 04.10.2018 ИП-00020064
	Иначе	
		Объект.КонтрагентСтороннейРозницы = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕСлИ;
	//---АК KIRN 

	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// АССОРТИМЕНТ

Процедура УстановитьОтборПоИерархииНоменклатуры()
		
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Номенклатура");// сначала надо удалить
    Для Каждого ЭлементОтбора Из Ассортимент.Отбор.Элементы Цикл
        Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
            	И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
            Ассортимент.Отбор.Элементы.Удалить(ЭлементОтбора);
        КонецЕсли;
    КонецЦикла;
	
	Если БезФильтраПоИерархии Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено Тогда
		ОтборПоИерархииНоменклатуры = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Иначе
		ОтборПоИерархииНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	

	ЭлементОтбораДанных = Ассортимент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
    ЭлементОтбораДанных.Использование		= Истина;
    ЭлементОтбораДанных.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВИерархии;            
    ЭлементОтбораДанных.ПравоеЗначение		= ОтборПоИерархииНоменклатуры;
    ЭлементОтбораДанных.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

КонецПроцедуры	

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоИерархииНоменклатуры();
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура БезФильтраПоИерархииПриИзменении(Элемент)
	
	УстановитьОтборПоИерархииНоменклатуры();
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыведенныеПриИзменении(Элемент)
	
	УстановитьОтборПоказыватьВыведенные();
	
	Элементы.АссортиментЗапретитьПозиции.Видимость 		= ЭтаФорма.ПоказыватьВыведенные;
	Элементы.АссортиментСнятьЗапретПозиции.Видимость 	= ЭтаФорма.ПоказыватьВыведенные;
	Элементы.АссортиментЗапрещена.Видимость 			= ЭтаФорма.ПоказыватьВыведенные;
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры

Процедура УстановитьХарактеристикуСервер(мХарактеристика, мНоменклатура)
	
	МенеджерЗаписи = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 			= ЭтаФорма.ДатаУстановкиИзменений;
	МенеджерЗаписи.ТорговаяТочка 	= Объект.Ссылка;
	МенеджерЗаписи.Номенклатура 	= мНоменклатура;
	МенеджерЗаписи.Характеристика 	= мХарактеристика;
	МенеджерЗаписи.ДатаСозданияЗаписи = ТекущаяДата();
	МенеджерЗаписи.Автор			= ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
	    МенеджерЗаписи.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры	

&НаКлиенте
Процедура АссортиментВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// колонка "Характеристика"
	Если Поле.Имя = "АссортиментХарактеристика" Тогда
		
		//Если НЕ ЕстьДоступ("Прогнозирование")
		//		И НЕ ЕстьДоступ("Помощник") Тогда
		Если НЕ ЕстьДоступ("Прогнозирование") Тогда
			Возврат;
		КонецЕсли;	
		
		ВыбНоменклатура = Элементы.Ассортимент.ДанныеСтроки(ВыбраннаяСтрока).Номенклатура;
		
		// выбор характеристики
		ПараметрыОткрытияФормыВыбора = Новый Структура;
        ПараметрыОткрытияФормыВыбора.Вставить("Отбор", Новый Структура("Владелец, Неактивная", ВыбНоменклатура, Ложь));
		ФормаВыбора = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыОткрытияФормыВыбора, ЭтаФорма);
		ВыбХарактеристика = ФормаВыбора.ОткрытьМодально();
		Если ВыбХарактеристика = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		// изменение ресурса "Характеристика" в записи регистра сведений
		УстановитьХарактеристикуСервер(ВыбХарактеристика, ВыбНоменклатура);
		
		Элементы.Ассортимент.Обновить();
		
	// колонка "Цена"
	ИначеЕсли Поле.Имя = "АссортиментЦена" Тогда
		
		Если НЕ ЕстьДоступ("КатегорийныйМенеджер") тогда	
			Возврат;
		КонецЕсли;
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыбраннаяСтрока);
		
		Результат = ОткрытьФормуМодально("Справочник.СтруктурныеЕдиницы.Форма.ФормаУстановкиЦены", Новый Структура("НоваяЦена", ТекДанные.Цена));
		
		Если Результат <> Неопределено Тогда
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Номенклатура"			, ТекДанные.Номенклатура);
			СтруктураЗаписи.Вставить("ХарактеристикаЦены"	, ТекДанные.ХарактеристикаЦены);
			СтруктураЗаписи.Вставить("Характеристика"		, ТекДанные.Характеристика);
			СтруктураЗаписи.Вставить("ПериодЦены"			, ТекДанные.ПериодЦены);
			СтруктураЗаписи.Вставить("ВалютаЦены"			, ТекДанные.ВалютаЦены);
			СтруктураЗаписи.Вставить("ДействуетОбщаяЦена"	, Результат.УстановитьДляВсехТорговыхТочек);
			СтруктураЗаписи.Вставить("Цена"					, Результат.НоваяЦена);
			УстановитьНовуюЦену(СтруктураЗаписи);
			
			Элементы.Ассортимент.Обновить();
		КонецЕсли;
		
	// колонка "Номенклатура"
	ИначеЕсли Поле.Имя = "АссортиментНоменклатура" Тогда
		
		Ключ = Новый Структура("Ключ", Элементы.Ассортимент.ДанныеСтроки(ВыбраннаяСтрока).Номенклатура);
		
		//+++АК MOSD 2018.11.21 ИП-00019907
		//ФормаЭлемента = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаЭлементаУпр", Ключ);    
		ФормаЭлемента = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", Ключ);    
		//---АК MOSD 
		
		ФормаЭлемента.Открыть();
		
		
	// колонка "Мин. остаток"
	ИначеЕсли Поле.Имя = "АссортиментМинОстаток"
			ИЛИ Поле.Имя = "АссортиментМаксОстаток"
			ИЛИ Поле.Имя = "АссортиментКвантУпаковки" Тогда
		
		ТекНоменклатура = Элементы.Ассортимент.ДанныеСтроки(ВыбраннаяСтрока).Номенклатура;
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ГруппаНоменклатуры"	, ТекНоменклатура);
		СтруктураЗаписи.Вставить("ТорговаяТочка"		, Объект.Ссылка);

		Попытка
			мКлючЗаписи = ПолучитьКлючЗаписиТоварныеОграничения(СтруктураЗаписи);
			ФормаЗаписи = ПолучитьФорму("РегистрСведений.ТоварныеОграниченияНаТочках.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
		Исключение
			ФормаЗаписи = ПолучитьФорму("РегистрСведений.ТоварныеОграниченияНаТочках.ФормаЗаписи");    
			ФормаЗаписи.Запись.ТорговаяТочка 		= Объект.Ссылка;
			ФормаЗаписи.Запись.ГруппаНоменклатуры 	= ТекНоменклатура;
		КонецПопытки;
		ФормаЗаписи.Элементы.ГруппаНоменклатуры.ТолькоПросмотр 	= Истина;
		ФормаЗаписи.Элементы.ТорговаяТочка.ТолькоПросмотр 		= Истина;
		ФормаЗаписи.ОткрытьМодально();
		
		Элементы.Ассортимент.Обновить();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьНовуюЦену(Запись)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаС"	, ЭтаФорма.ДатаУстановкиИзменений);
	Запрос.УстановитьПараметр("ДатаПо"	, КонецДня(ЭтаФорма.ДатаУстановкиИзменений));
	Запрос.УстановитьПараметр("ТипЦен"	, Справочники.ТипыЦен.ОсновнойТипЦенПродаж);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УстановкаТиповЦенНоменклатурыТовары.Ссылка КАК Док
	|ИЗ
	|	Документ.УстановкаТиповЦенНоменклатуры.Товары КАК УстановкаТиповЦенНоменклатурыТовары
	|ГДЕ
	|	УстановкаТиповЦенНоменклатурыТовары.Ссылка.Проведен
	|	И УстановкаТиповЦенНоменклатурыТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И УстановкаТиповЦенНоменклатурыТовары.ТипЦен = &ТипЦен
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаТиповЦенНоменклатурыТовары.Ссылка.Дата УБЫВ";
				 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Док = Выборка.Док.ПолучитьОбъект();
	Иначе
		Док = Документы.УстановкаТиповЦенНоменклатуры.СоздатьДокумент();
		Док.Дата = ЭтаФорма.ДатаУстановкиИзменений;
		НоваяСтрока = Док.ТипыЦен.Добавить();
		НоваяСтрока.ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенПродаж;
	КонецЕсли;	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Запись.Номенклатура);
	Если Запись.ДействуетОбщаяЦена
			И ЗначениеЗаполнено(Запись.ВалютаЦены) Тогда// если валюта не заполнена, то записи не было, а новую делаем для точки
		ПараметрыОтбора.Вставить("ТорговаяТочка", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	Иначе	
		ПараметрыОтбора.Вставить("ТорговаяТочка", Объект.Ссылка);
	КонецЕсли;	
	ПараметрыОтбора.Вставить("ТипЦен", Справочники.ТипыЦен.ОсновнойТипЦенПродаж);
	
	МассивСтрок = Док.Товары.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Цена = Запись.Цена;
	Иначе            
		НоваяСтрока = Док.Товары.Добавить();
		НоваяСтрока.Валюта			= ?(ЗначениеЗаполнено(Запись.ВалютаЦены), Запись.ВалютаЦены, Справочники.Валюты.НайтиПоКоду(810));
		НоваяСтрока.Номенклатура	= Запись.Номенклатура;
		НоваяСтрока.ТипЦен			= Справочники.ТипыЦен.ОсновнойТипЦенПродаж;
		Если Запись.ДействуетОбщаяЦена
				И ЗначениеЗаполнено(Запись.ВалютаЦены) Тогда //Если была задана общая цена, то меняем её, а если ничего не было задано, то ставим для точки
			НоваяСтрока.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		Иначе	
			НоваяСтрока.ТорговаяТочка = Объект.Ссылка;
		КонецЕсли;	
		НоваяСтрока.Характеристика	=
								?(ЗначениеЗаполнено(Запись.ХарактеристикаЦены), Запись.ХарактеристикаЦены, Запись.Характеристика);
		НоваяСтрока.Цена			= Запись.Цена;
	КонецЕсли;	
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьХарактеристикуДляНовогоАссортимента(мТТ, мНоменклатура, мДата)
	
	РезультатыЗапроса = ДопМодульСервер.ПолучитьТаблицыДляНовыхХарактеристикАссортимента(мДата);
	
	//
	ТабСамыеЧастыеХарки = РезультатыЗапроса[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов = РезультатыЗапроса[1].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	
	//
	СтрокаКешСклад = ТабСкладыМагазинов.Найти(мТТ, "ТорговаяТочка");
	
	ТабПоТоварам = Новый ТаблицаЗначений();
	ТабПоТоварам.Колонки.Добавить("Харка");
	ТабПоТоварам.Колонки.Добавить("Колво");
	СтрокиПоХарке = ТабСамыеЧастыеХарки.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаКешСклад.ОсновнойСклад, мНоменклатура));
	
	Для Каждого СтрокаХар Из СтрокиПоХарке Цикл
		СтрокаДоб = ТабПоТоварам.Добавить();
		СтрокаДоб.Харка = СтрокаХар.Характеристика;
		СтрокаДоб.Колво = СтрокаХар.Колво;
	КонецЦикла;
	
	ТабПоТоварам.Сортировать("Колво убыв");
	
	Возврат ?(ТабПоТоварам.Количество() > 0, ТабПоТоварам[0].Харка, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРасчетчикаДляПлановПродаж(мТТ, мНоменклатура, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"		, мДата);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТТ);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	Запрос.УстановитьПараметр("ГруппаУРЗ"		, мНоменклатура.ГруппаНоменклатурыУРЗ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	|ПОМЕСТИТЬ ВТРасчетчик
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ГруппаУРЗ = &ГруппаУРЗ
	|				И ТорговаяТочка = &ТорговаяТочка) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧГруппыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетчик КАК ВТРасчетчик
	|		ПО (ВТРасчетчик.Расчетчик = ТЧГруппыНоменклатуры.Ссылка.Склад)
	|ГДЕ
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры = &Номенклатура
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Расчетчики.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуНоменклатурыДляПлановПродаж(мТТ, мНоменклатура, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"		, мДата);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТТ);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(ТорговаяТочка = &ТорговаяТочка
	|				ИЛИ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.ТорговаяТочка = &ТорговаяТочка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьАссортиментСервер(мНоменклатура)
	
	МенеджерЗаписи = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 			= ЭтаФорма.ДатаУстановкиИзменений;
	МенеджерЗаписи.ТорговаяТочка 	= Объект.Ссылка;
	МенеджерЗаписи.Номенклатура 	= мНоменклатура;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Сообщить("На " + Формат(ЭтаФорма.ДатаУстановкиИзменений, "ДФ=dd.MM.yy") +
					" уже есть запись для " + СокрЛП(Объект.Ссылка) + " с позицией " + СокрЛП(мНоменклатура) + "!");
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.Период 			= ЭтаФорма.ДатаУстановкиИзменений;
	МенеджерЗаписи.ТорговаяТочка 	= Объект.Ссылка;
	МенеджерЗаписи.Номенклатура 	= мНоменклатура;
	МенеджерЗаписи.Характеристика 	= ПолучитьХарактеристикуДляНовогоАссортимента(Объект.Ссылка, мНоменклатура, ЭтаФорма.ДатаУстановкиИзменений);
	МенеджерЗаписи.ДатаСозданияЗаписи = ТекущаяДата();
	МенеджерЗаписи.Автор			= ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
	    МенеджерЗаписи.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	// план продаж (если нету)
	ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Объект.Ссылка, мНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАссортимент(Команда)
	
	Перем ФормаВыбора, ВыбНоменклатура;
	
	ФормаПодбора = ПолучитьФорму("Обработка.ПодборТоварногоАссортиментаТорговойТочки.Форма.Форма");
	ФормаПодбора.Объект.ТорговаяТочка = Объект.Ссылка;

	ВыбНоменклатура = ФормаПодбора.ОткрытьМодально();
	Если ВыбНоменклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьАссортиментСервер(ВыбНоменклатура);
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры

Процедура СкопироватьАссортиментСервер(ТорговаяТочкаКуда)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, ЭтаФорма.ДатаУстановкиИзменений);
	Запрос.УстановитьПараметр("ТорговаяТочкаОткуда"	, Объект.Ссылка);
	Запрос.УстановитьПараметр("ТорговаяТочкаКуда"	, ТорговаяТочкаКуда);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаСреза, ТорговаяТочка = &ТорговаяТочкаОткуда) КАК ТоварныйАссортиментТочекСрезПоследних
	//|ГДЕ
	//|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Период,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаСреза, ТорговаяТочка = &ТорговаяТочкаКуда) КАК ТоварныйАссортиментТочекСрезПоследних";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка 		= РезультатыЗапроса[0].Выбрать();
	ТаблицаКуда		= РезультатыЗапроса[1].Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаКуда.Найти(Выборка.Номенклатура, "Номенклатура");
		Если (НЕ НайденнаяСтрока = Неопределено)
				И (((НЕ НайденнаяСтрока.Выведена)
						И НайденнаяСтрока.Характеристика = Выборка.Характеристика)
					ИЛИ НайденнаяСтрока.Период = ЭтаФорма.ДатаУстановкиИзменений) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность		= Истина;
		НоваяЗапись.Выведена		= Ложь;
		НоваяЗапись.Номенклатура	= Выборка.Номенклатура;
		НоваяЗапись.Период			= ЭтаФорма.ДатаУстановкиИзменений;
		НоваяЗапись.ТорговаяТочка	= ТорговаяТочкаКуда;
		НоваяЗапись.Характеристика	= Выборка.Характеристика;
		
	КонецЦикла;	
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СкопироватьАссортимент(Команда)
	
	ФормаВыбора = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора");
	
	Результат = ФормаВыбора.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	СкопироватьАссортиментСервер(Результат);
	
КонецПроцедуры

Функция ПолучитьМассивОстальныхТТ(МассивТиповТТ = Неопределено, ТекСклад = Неопределено)
	
	Перем Запрос, РезультатЗапроса;
	
	ЕстьТипТТ = (НЕ МассивТиповТТ = Неопределено);
	ЕстьСклад = ЗначениеЗаполнено(ТекСклад);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СледДата"	, КонецДня(ТекущаяДата() + 86400));
	Запрос.УстановитьПараметр("ТекущаяТТ"	, Объект.Ссылка);
	Если ЕстьТипТТ Тогда
		Запрос.УстановитьПараметр("ТипТТ"	, МассивТиповТТ);
	КонецЕсли;
	Если ЕстьСклад Тогда
		Запрос.УстановитьПараметр("Склад"	, ТекСклад);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГруппыНоменклатуры.ГруппаНоменклатуры.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ
	|ПОМЕСТИТЬ ВТДоступнаяНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ГруппыНоменклатуры
	|ГДЕ
	|	НЕ ГруппыНоменклатуры.ГруппаНоменклатуры.Выведена
	|	И НЕ ГруппыНоменклатуры.ГруппаНоменклатуры.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГруппаУРЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&СледДата,
	|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|				И &УсловиеПоТипуТТ
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И НЕ ТорговаяТочка = &ТекущаяТТ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоступнаяНоменклатура КАК ВТДоступнаяНоменклатура
	|		ПО (ВТДоступнаяНоменклатура.ГруппаУРЗ = ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаУРЗ)
	|ГДЕ
	|	&УсловиеПоСкладу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.id_TT";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеПоТипуТТ",
		?(ЕстьТипТТ, "И ТорговаяТочка.ТипТорговойТочкиДляАссортимента В (&ТипТТ)", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|ГДЕ
	|	&УсловиеПоСкладу",
		?(ЕстьСклад, "
	|ГДЕ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад", ""));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции

Процедура СкопироватьАссортиментПоОбразцуСервер(МассивСтрокНоменклатуры, МассивТиповТТ = Неопределено, СМатрицей = Ложь)
	
	МассивОстальныхТТ = ПолучитьМассивОстальныхТТ(МассивТиповТТ);
	Если МассивОстальныхТТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОтборПоТипуТТ = (НЕ МассивТиповТТ = Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, ЭтаФорма.ДатаУстановкиИзменений);
	Запрос.УстановитьПараметр("ТекущаяТТ"			, Объект.Ссылка);
	Если ЕстьОтборПоТипуТТ Тогда
		Запрос.УстановитьПараметр("МассивТиповТТ"	, МассивТиповТТ);
	КонецЕсли;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Период,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И &УсловиеПоТипуТТ
	|				И НЕ ТорговаяТочка = &ТекущаяТТ) КАК ТоварныйАссортиментТочекСрезПоследних";
	//|ГДЕ
	//|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|				И &УсловиеПоТипуТТ",
		?(ЕстьОтборПоТипуТТ, "
	|				И ТорговаяТочка.ТипТорговойТочкиДляАссортимента В (&МассивТиповТТ)", ""));
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаТАОстальныхТТ = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("ТорговаяТочка, Номенклатура");
	
	НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Для Каждого ТекТТ Из МассивОстальныхТТ Цикл
		
		СтруктураОтбора.ТорговаяТочка = ТекТТ;
		Для Каждого СтрокаНоменклатуры Из МассивСтрокНоменклатуры Цикл
		
			СтруктураОтбора.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			НайденныеСтроки = ТаблицаТАОстальныхТТ.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				Если ((НЕ НайденнаяСтрока.Выведена)
							И НайденнаяСтрока.Характеристика = СтрокаНоменклатуры.Характеристика)
						ИЛИ НайденнаяСтрока.Период = ЭтаФорма.ДатаУстановкиИзменений Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если СМатрицей Тогда // менять характеристики только у номенклатуры, уже находящейся в тов. асс-те этой точки
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Сообщить(ТекТТ);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Активность		= Истина;
			НоваяЗапись.Номенклатура	= СтрокаНоменклатуры.Номенклатура;
			НоваяЗапись.Период			= ЭтаФорма.ДатаУстановкиИзменений;
			НоваяЗапись.ТорговаяТочка	= ТекТТ;
			НоваяЗапись.Характеристика	= СтрокаНоменклатуры.Характеристика;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАссортиментПоОбразцуВТТРасчетчика(Команда)
	
	Если НЕ ЕстьДоступ("Прогнозирование") Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСтрокНоменклатуры = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаУстановкиИзменений Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет скопирована, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		МассивСтрокНоменклатуры.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если МассивСтрокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	СкопироватьАссортиментПоОбразцуСервер(МассивСтрокНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАссортиментПоОбразцуВТТРасчетчикаСМатрицей(Команда)

	Если НЕ ЕстьДоступ("Прогнозирование") Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСтрокНоменклатуры = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаУстановкиИзменений Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет скопирована, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		МассивСтрокНоменклатуры.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если МассивСтрокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	СкопироватьАссортиментПоОбразцуСервер(МассивСтрокНоменклатуры,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАссортиментПоОбразцуНаВВ(Команда)
	
	Если НЕ ЕстьДоступ("Прогнозирование") Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСтрокНоменклатуры = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаУстановкиИзменений Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет скопирована, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		МассивСтрокНоменклатуры.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если МассивСтрокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	МассивТиповТТ = Новый Массив;
	МассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ВВ"));
	СкопироватьАссортиментПоОбразцуСервер(МассивСтрокНоменклатуры, МассивТиповТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАссортиментПоОбразцуНаВВиТТ(Команда)
	
	Если НЕ ЕстьДоступ("Прогнозирование") Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСтрокНоменклатуры = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаУстановкиИзменений Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет скопирована, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		МассивСтрокНоменклатуры.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если МассивСтрокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	МассивТиповТТ = Новый Массив;
	МассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ВВ"));
	МассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ТТ"));
	МассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ПустаяСсылка"));
	СкопироватьАссортиментПоОбразцуСервер(МассивСтрокНоменклатуры, МассивТиповТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАссортиментПоОбразцуНаМиниТТ(Команда)
	
	Если НЕ ЕстьДоступ("Прогнозирование") Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСтрокНоменклатуры = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаУстановкиИзменений Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет скопирована, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		МассивСтрокНоменклатуры.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если МассивСтрокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	МассивТиповТТ = Новый Массив;
	МассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.МиниТТ"));
	СкопироватьАссортиментПоОбразцуСервер(МассивСтрокНоменклатуры, МассивТиповТТ);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьЦеныНоменклатурыДляПлановПродаж(мТТ, мМассивНоменклатуры, мДата)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, мДата);
	Запрос.УстановитьПараметр("ТорговаяТочка"		, мТТ);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, мМассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(ТорговаяТочка = &ТорговаяТочка
	|				ИЛИ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.ТорговаяТочка = &ТорговаяТочка)
	|			И (ВТЦены.Номенклатура = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|			И (ВТЦены.Номенклатура = СпрНоменклатура.Ссылка)
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивНоменклатуры)";
	
    Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСкладТорговойТочки(мДата, мТТ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, мДата);
	Запрос.УстановитьПараметр("ТТ"			, мТТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка = &ТТ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Расчетчик;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьПорядокОбеспечения(мДата, мТТ, мСклад)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрГруппыНоменклатурыУРЗ.Ссылка КАК ГруппаУРЗ
	|ИЗ
	|	Справочник.ГруппыНоменклатурыУРЗ КАК СпрГруппыНоменклатурыУРЗ
	|ГДЕ
	|	СпрГруппыНоменклатурыУРЗ.Родитель = ЗНАЧЕНИЕ(Справочник.ГруппыНоменклатурыУРЗ.ПустаяСсылка)
	|	И НЕ СпрГруппыНоменклатурыУРЗ.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Запись порядка обеспечения для торговой точки " + СокрЛП(мТТ.Наименование);
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	мПорядокОбеспеченияТорговыхТочек = РегистрыСведений.ПорядокОбеспеченияТорговыхТочек;
	
	//
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = мПорядокОбеспеченияТорговыхТочек.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= мДата;
		МенеджерЗаписи.ТорговаяТочка 	= мТТ;
		МенеджерЗаписи.ГруппаУРЗ 		= Выборка.ГруппаУРЗ;
		МенеджерЗаписи.Расчетчик 		= мСклад;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьАссортиментСМагазинаСервер(ВыбТорговаяТочка, ТекСклад)
	
	//// проверка порядка обеспечения
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ДатаСреза"	, ЭтаФорма.ДатаУстановкиИзменений);
	//Запрос.УстановитьПараметр("ТТ"			, Объект.Ссылка);
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	//|ИЗ
	//|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	//|			&ДатаСреза,
	//|			ТорговаяТочка = &ТТ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	ТекСклад = Выборка.Ссылка;
	//Иначе
	//	ОбщегоНазначения.СообщитьОбОшибке("Не установлен порядок обеспечения для торговой точки " + Объект.Наименование + ". Обратитесь к Максиму Федорову.");
	//	Возврат;	
	//КонецЕсли;
	
	
	// товарный ассортимент выбранной торговой точки
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, ЭтаФорма.ДатаУстановкиИзменений);
	Запрос.УстановитьПараметр("ТТ"			, ВыбТорговаяТочка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Период,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаСреза, ТорговаяТочка = &ТТ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// запись
	мМассивНом 	= ТаблицаЗапроса.ВыгрузитьКолонку("Номенклатура");
	
	// расчетчики для товара
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад"		, ТекСклад);
	Запрос.УстановитьПараметр("МассивНом"	, мМассивНом);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура,
	|	ТЧГруппыНоменклатуры.Ссылка КАК Расчетчик
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|ГДЕ
	|	ТЧГруппыНоменклатуры.Ссылка.Склад = &Склад
	|	И ТЧГруппыНоменклатуры.ГруппаНоменклатуры В(&МассивНом)
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления";
	ТаблицаРасчетчиков = Запрос.Выполнить().Выгрузить();
	
	//
	НачДата 	= НачалоДня(ТекущаяДата());
	мТаблицаЦен = ПолучитьЦеныНоменклатурыДляПлановПродаж(Объект.Ссылка, мМассивНом, НачДата);
	
	РезультатыЗапроса = ДопМодульСервер.ПолучитьТаблицыДляНовыхХарактеристикАссортимента(ЭтаФорма.ДатаУстановкиИзменений);
	ТабСамыеЧастыеХарки = РезультатыЗапроса[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов = РезультатыЗапроса[1].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	
	РегТовАссортимент 	= РегистрыСведений.ТоварныйАссортиментТочек;
	РегПланыПродаж		= РегистрыСведений.ПланыПродажПоДнямНедели;
	мТорговаяТочка		= Объект.Ссылка;
	
	Для Каждого ТекНоменклатура Из мМассивНом Цикл
		
		МенеджерЗаписи = РегТовАссортимент.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= ЭтаФорма.ДатаУстановкиИзменений;
		МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Сообщить("На " + Формат(ЭтаФорма.ДатаУстановкиИзменений, "ДФ=dd.MM.yy") + " уже есть запись для " + СокрЛП(Объект.Наименование) +
						" с позицией " + СокрЛП(ТекНоменклатура) + "!");
			МенеджерЗаписи = Неопределено;
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи.Период 			= ЭтаФорма.ДатаУстановкиИзменений;
		МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
		
		СтрокаСклад = ТабСкладыМагазинов.Найти(мТорговаяТочка, "ТорговаяТочка");
		ТабПоТоварам = Новый ТаблицаЗначений();
		ТабПоТоварам.Колонки.Добавить("Харка");
		ТабПоТоварам.Колонки.Добавить("Колво");
		СтрокиПоХарке = ТабСамыеЧастыеХарки.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаСклад.ОсновнойСклад, ТекНоменклатура));
		Для Каждого СтрокаХар Из СтрокиПоХарке Цикл
			СтрокаДоб = ТабПоТоварам.Добавить();
			СтрокаДоб.Харка = СтрокаХар.Характеристика;
			СтрокаДоб.Колво = СтрокаХар.Колво;
		КонецЦикла;
		ТабПоТоварам.Сортировать("Колво убыв");
		Если ТабПоТоварам.Количество() > 0 Тогда
			МенеджерЗаписи.Характеристика = ТабПоТоварам[0].Харка;
		КонецЕсли;
		
		Попытка
		    МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		СтрокаРасчетчика = ТаблицаРасчетчиков.Найти(ТекНоменклатура, "Номенклатура");
		мРасчетчик = ?(НЕ СтрокаРасчетчика = Неопределено, СтрокаРасчетчика.Расчетчик, Справочники.Расчетчики.ПустаяСсылка());
		
		// для новой позиции - план наперед
		Для н = 1 по 7 Цикл
			
			ТекДата = НачДата + (н - 1) * 86400;
			
			МенеджерЗаписи = РегПланыПродаж.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Дата 			= ТекДата;
			МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
			МенеджерЗаписи.Расчетчик 		= мРасчетчик;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи = Неопределено;
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи.Дата 			= ТекДата;
			МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
			МенеджерЗаписи.Расчетчик 		= мРасчетчик;
			МенеджерЗаписи.Количество 		= ?(НЕ ТекНоменклатура.Весовой, 1, 0.2);
			
			СтрокаТаблицы = мТаблицаЦен.Найти(ТекНоменклатура, "Номенклатура");
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				МенеджерЗаписи.Цена 		= СтрокаТаблицы.Цена;
			КонецЕсли;
			МенеджерЗаписи.Склад 			= ТекСклад;
			Попытка
			    МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАссортиментСМагазина(Команда)

	Перем ВыбТорговаяТочка, ТекСклад;
	
	Если НЕ ВвестиЗначение(ВыбТорговаяТочка, "Выберите магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы")) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка порядка обеспечения
	ТекСклад = ПолучитьСкладТорговойТочки(ЭтаФорма.ДатаУстановкиИзменений, Объект.Ссылка);
	Если ТекСклад = Неопределено Тогда
		Если НЕ ВвестиЗначение(ТекСклад, "Выберите склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы")) Тогда
			//ОбщегоНазначения.СообщитьОбОшибке("Не установлен порядок обеспечения для торговой точки " + Объект.Наименование + ". Обратитесь к Максиму Федорову.");
			Возврат;
		КонецЕсли;
		Если Вопрос("Создавать порядок обеспечения?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			СоздатьПорядокОбеспечения(ЭтаФорма.ДатаУстановкиИзменений, Объект.Ссылка, ТекСклад);
		КонецЕсли;
	КонецЕсли;
	
	//
	СкопироватьАссортиментСМагазинаСервер(ВыбТорговаяТочка, ТекСклад);
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры

Функция ПроверитьНаБудущийВводПозиции(МассивСтрокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"			, ЭтаФорма.ДатаУстановкиИзменений);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Период КАК Период,
	|	ТоварныйАссортиментТочек.ТорговаяТочка,
	|	ТоварныйАссортиментТочек.Номенклатура
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка = &ТорговаяТочка
	|	И ТоварныйАссортиментТочек.Номенклатура = &Номенклатура
	|	И НЕ ТоварныйАссортиментТочек.Выведена
	|	И ТоварныйАссортиментТочек.Период > &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Для каждого ВыделеннаяСтрока Из МассивСтрокНоменклатуры Цикл
		
		Запрос.УстановитьПараметр("Номенклатура", ВыделеннаяСтрока.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			 ОбщегоНазначения.Сообщение(СокрЛП(ВыделеннаяСтрока.Номенклатура) +
			 							" будет снова введена в ассортимент этой точки с " + Выборка.Период +
										". Из плана продаж она не будет удалена.", Перечисления.ВидыСообщений.ВажнаяИнформация,,,,, Истина);
			 ВыделеннаяСтрока.Вставить("ОбрабатыватьПлан", Ложь);
		 Иначе
			 ВыделеннаяСтрока.Вставить("ОбрабатыватьПлан", Истина);
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции	

Процедура ВывестиПозицииСервер(МассивСтрокНоменклатуры)
	
	МассивХарактеристикДляВывода = Новый Массив; //+++АК SHEP 2018.11.19 ИП-00020407
	
	мСписокНоменклатуры = Новый СписокЗначений;
	Для каждого ВыделеннаяСтрока Из МассивСтрокНоменклатуры Цикл
		мСписокНоменклатуры.Добавить(ВыделеннаяСтрока.Номенклатура);
		МассивХарактеристикДляВывода.Добавить(ВыделеннаяСтрока.Характеристика); //+++АК SHEP 2018.11.19 ИП-00020407
	КонецЦикла;
	
	//+++АК SHEP 2018.11.19 ИП-00020407
	УбратьИзВыводаПозицииИзСплитТестирования(Объект.Ссылка, МассивХарактеристикДляВывода, мСписокНоменклатуры);
	Если мСписокНоменклатуры.Количество() = 0 Тогда Возврат; КонецЕсли;
	//---АК SHEP 2018.11.19
	
	СтруктураОтбора = Новый Структура("Номенклатура");
	
	// уже существующий ассортимент точки
	Запрос = Новый Запрос;			 
	Запрос.УстановитьПараметр("Период"				, ЭтаФорма.ДатаУстановкиИзменений);
	Запрос.УстановитьПараметр("ТорговаяТочка"		, Объект.Ссылка);
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, мСписокНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	ТоварныйАссортиментТочек.Период = &Период
	|	И ТоварныйАссортиментТочек.ТорговаяТочка = &ТорговаяТочка
	|	И ТоварныйАссортиментТочек.Номенклатура В (&СписокНоменклатуры)";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Для каждого ВыделеннаяСтрока Из МассивСтрокНоменклатуры Цикл
		
		СтруктураОтбора.Номенклатура = ВыделеннаяСтрока.Номенклатура;
		НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбщегоНазначения.Сообщение("Для позиции " + СокрЛП(ВыделеннаяСтрока.Номенклатура) +
										" уже есть запись в ассортименте этой точки на " + ЭтаФорма.ДатаУстановкиИзменений +
										". Позиция не может быть выведена этой датой.", Перечисления.ВидыСообщений.ВажнаяИнформация,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		// добавление в регистр сведений "ТоварныйАссортиментТочек" записи с (Выведена = Истина)
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность		= Истина;
		НоваяЗапись.Выведена		= Истина;
		НоваяЗапись.Номенклатура	= ВыделеннаяСтрока.Номенклатура;
		НоваяЗапись.Период			= ЭтаФорма.ДатаУстановкиИзменений;
		НоваяЗапись.ТорговаяТочка	= Объект.Ссылка;
		НоваяЗапись.Характеристика	= ВыделеннаяСтрока.Характеристика;
		
		//Если НЕ ВыделеннаяСтрока.ОбрабатыватьПлан Тогда
		//	Продолжить;
		//КонецЕсли;
		
		// удаление из регистра сведений "ПланыПродажПоДнямНедели"
		НаборЗаписейПлан = РегистрыСведений.ПланыПродажПоДнямНедели.СоздатьНаборЗаписей();
		НаборЗаписейПлан.Отбор.ТорговаяТочка.Установить(Объект.Ссылка);
		НаборЗаписейПлан.Отбор.Номенклатура.Установить(ВыделеннаяСтрока.Номенклатура);
		НаборЗаписейПлан.Прочитать();
		Кол = НаборЗаписейПлан.Количество() - 1;
		Пока Кол >= 0 Цикл
			Если НаборЗаписейПлан[Кол].Дата >= ЭтаФорма.ДатаУстановкиИзменений Тогда
				НаборЗаписейПлан.Удалить(Кол);
			КонецЕсли;	
			Кол = Кол - 1;
		КонецЦикла;	
		Попытка
			НаборЗаписейПлан.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВывестиПозиции(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Вывести выбранные позиции с " + Формат(ЭтаФорма.ДатаУстановкиИзменений, "ДЛФ=Д") + " ?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	ТЗ = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаУстановкиИзменений Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет выведена, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		ТЗ.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	ПроверитьНаБудущийВводПозиции(ТЗ);
    ВывестиПозицииСервер(ТЗ);
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапретитьПозицииСервер(мТТ, мМассивТоваров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка", мТТ);
	Запрос.УстановитьПараметр("МассивТоваров", мМассивТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Период КАК Период,
	|	ТоварныйАссортиментТочек.Номенклатура
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И Номенклатура В (&МассивТоваров)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	ТоварныйАссортиментТочек.Выведена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мТоварныйАссортиментТочек 	= РегистрыСведений.ТоварныйАссортиментТочек;
	
	//
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи 	= мТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= Выборка.Период;
		МенеджерЗаписи.ТорговаяТочка 	= мТТ;
		МенеджерЗаписи.Номенклатура 	= Выборка.Номенклатура;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Запрещена 			= Истина;
			МенеджерЗаписи.ДатаСозданияЗаписи 	= ТекущаяДата();
			МенеджерЗаписи.Автор 				= ПараметрыСеанса.ТекущийПользователь;
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗапретитьПозиции(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Запретить выбранные позиции?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	мМассивТоваров = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Запрещена Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ ТекДанные.Выведена Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет запрещена, так как она ещё не выведена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		мМассивТоваров.Добавить(ТекДанные.Номенклатура);
		
	КонецЦикла;
	
	Если мМассивТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗапретитьПозицииСервер(Объект.Ссылка, мМассивТоваров);
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СнятьЗапретПозицииСервер(мТТ, мМассивТоваров)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка", мТТ);
	Запрос.УстановитьПараметр("МассивТоваров", мМассивТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Период КАК Период,
	|	ТоварныйАссортиментТочек.Номенклатура
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И Номенклатура В (&МассивТоваров)
	|				И Запрещена) КАК ТоварныйАссортиментТочек";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мТоварныйАссортиментТочек 	= РегистрыСведений.ТоварныйАссортиментТочек;
	
	//
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи 	= мТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= Выборка.Период;
		МенеджерЗаписи.ТорговаяТочка 	= мТТ;
		МенеджерЗаписи.Номенклатура 	= Выборка.Номенклатура;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Запрещена 			= Ложь;
			МенеджерЗаписи.ДатаСозданияЗаписи 	= ТекущаяДата();
			МенеджерЗаписи.Автор 				= ПараметрыСеанса.ТекущийПользователь;
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура СнятьЗапретПозиции(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Запретить выбранные позиции?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	мМассивТоваров = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Ассортимент.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		Если НЕ ТекДанные.Запрещена Тогда
			Продолжить;
		КонецЕсли;	
		
		мМассивТоваров.Добавить(ТекДанные.Номенклатура);
		
	КонецЦикла;
	
	Если мМассивТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	СнятьЗапретПозицииСервер(Объект.Ссылка, мМассивТоваров);
	
	Элементы.Ассортимент.Обновить();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ЦФО

&НаКлиенте
Процедура ДобавитьЦФО(Команда)
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ЦФОСтруктурныхЕдиниц.Форма.ФормаЗаписи");
	ФормаНового.Запись.Период 				= ТекущаяДата();
	ФормаНового.Запись.СтруктурнаяЕдиница 	= Объект.Ссылка;
	
	ФормаНового.Элементы.СтруктурнаяЕдиница.Доступность = Ложь;
	
	ФормаНового.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЦФО(Команда)
	
	ТекДанные = Элементы.ЦФО.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ЦФОСтруктурныхЕдиниц.Форма.ФормаЗаписи");
	ФормаНового.Запись.Период 				= ТекущаяДата();
	ФормаНового.Запись.СтруктурнаяЕдиница 	= Объект.Ссылка;
	ФормаНового.Запись.ЦФО 					= ТекДанные.ЦФО;
	ФормаНового.Запись.Организация			= ТекДанные.Организация;
	
	ФормаНового.Элементы.СтруктурнаяЕдиница.Доступность = Ложь;
	
	ФормаНового.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаНаУчетПоОбособленномуПодразделениюПриИзменении(Элемент)
	
	УстановитьДоступность();
	//УстановитьДоступностьЗакладкиТорговыйСбор();
	
КонецПроцедуры

Функция ПолучитьМассивДублированныхТелефонов()
	
	Возврат Справочники.СтруктурныеЕдиницы.ТелефонУказанВДругихТТ(Объект.Ссылка, Объект.ТелефонныйНомер1, Объект.ТелефонныйНомер2);;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Порядок обеспечения

&НаКлиенте
Процедура ДобавитьПорядокОбеспечения(Команда)
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ПорядокОбеспеченияТорговыхТочек.Форма.ФормаЗаписи");
	ФормаНового.Запись.Период 			= ТекущаяДата();
	ФормаНового.Запись.ТорговаяТочка 	= Объект.Ссылка;
	
	ФормаНового.Элементы.ТорговаяТочка.Доступность = Ложь;
	
	ФормаНового.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПорядокОбеспечения(Команда)
	
	ТекДанные = Элементы.ПорядокОбеспечения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ПорядокОбеспеченияТорговыхТочек.Форма.ФормаЗаписи");
	ФормаНового.Запись.Период 				= ТекущаяДата();
	ФормаНового.Запись.ТорговаяТочка 		= Объект.Ссылка;
	//ФормаНового.Запись.ГруппаНоменклатуры 	= ТекДанные.ГруппаНоменклатуры;
	ФормаНового.Запись.ГруппаУРЗ 			= ТекДанные.ГруппаУРЗ;
	ФормаНового.Запись.Расчетчик			= ТекДанные.Расчетчик;
	
	ФормаНового.Элементы.ТорговаяТочка.Доступность = Ложь;
	
	ФормаНового.ОткрытьМодально();
	
КонецПроцедуры

Процедура СкопироватьПорядокОбеспеченияНаВыбранныеТТСервер(МассивТорговыхТочек, МассивСтрокНоменклатуры)
	
	НаборЗаписей = РегистрыСведений.ПорядокОбеспеченияТорговыхТочек.СоздатьНаборЗаписей();
	
	Для Каждого ТекТТ Из МассивТорговыхТочек Цикл
		
		Если (НЕ ТекТТ.Активное)
				ИЛИ (НЕ ТекТТ.ДатаЗакрытия = Дата(1, 1, 1))
				ИЛИ (НЕ ТекТТ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница)
				ИЛИ ТекТТ = Объект.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить(ТекТТ);
		
		Для Каждого СтрокаНоменклатуры Из МассивСтрокНоменклатуры Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Активность			= Истина;
			НоваяЗапись.Период				= СтрокаНоменклатуры.Период;
			//НоваяЗапись.ГруппаНоменклатуры	= СтрокаНоменклатуры.ГруппаНоменклатуры;
			НоваяЗапись.ГруппаУРЗ			= СтрокаНоменклатуры.ГруппаУРЗ;
			НоваяЗапись.ТорговаяТочка		= ТекТТ;
			НоваяЗапись.Расчетчик			= СтрокаНоменклатуры.Расчетчик;
		КонецЦикла;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Попытка
			НаборЗаписей.Записать(Ложь);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПорядокОбеспеченияНаВыбранныеТТ(Команда)
	
	Если НЕ ЕстьДоступ("Прогнозирование") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ПорядокОбеспечения.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ФормаВыбора = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбораУпр",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаВыбора.Элементы.Список.МножественныйВыбор = Истина;
	
	МассивТорговыхТочек = ФормаВыбора.ОткрытьМодально();
	Если МассивТорговыхТочек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокНоменклатуры = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.ПорядокОбеспечения.ВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.ПорядокОбеспечения.ДанныеСтроки(ВыделеннаяСтрока);
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Период"	, ТекДанные.Период);
		//СтруктураЗаписи.Вставить("ГруппаНоменклатуры"	, ТекДанные.ГруппаНоменклатуры);
		СтруктураЗаписи.Вставить("ГруппаУРЗ", ТекДанные.ГруппаУРЗ);
		СтруктураЗаписи.Вставить("Расчетчик", ТекДанные.Расчетчик);
		
		МассивСтрокНоменклатуры.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
		
	СкопироватьПорядокОбеспеченияНаВыбранныеТТСервер(МассивТорговыхТочек, МассивСтрокНоменклатуры);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Планы продаж

&НаКлиенте
Процедура ДатаНачалаПланПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаНачалаПлан) Тогда
		
		Если ЗначениеЗаполнено(ЭтаФорма.ДатаОкончанияПлан)
				И ЭтаФорма.ДатаНачалаПлан > ЭтаФорма.ДатаОкончанияПлан Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			ЭтаФорма.ДатаНачалаПлан = ЭтаФорма.ДатаОкончанияПлан;
			Возврат;
		КонецЕсли;

		УстановитьОтборПлановПродаж();
		
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПланПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаОкончанияПлан) Тогда
		
		Если ЗначениеЗаполнено(ЭтаФорма.ДатаНачалаПлан)
				И ЭтаФорма.ДатаНачалаПлан > ЭтаФорма.ДатаОкончанияПлан Тогда
		
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата окончания периода меньше даты начала периода!";
			СообщениеПользователю.Сообщить();
			
			ЭтаФорма.ДатаОкончанияПлан = ЭтаФорма.ДатаНачалаПлан;
			Возврат;
		КонецЕсли;

		УстановитьОтборПлановПродаж();
		
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(ЭтаФорма.ДатаНачалаПлан, ЭтаФорма.ДатаОкончанияПлан);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		ЭтаФорма.ДатаНачалаПлан 		= СтандартныйПериод.ДатаНачала;
		ЭтаФорма.ДатаОкончанияПлан 	= СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаНачалаПлан)
			И ЗначениеЗаполнено(ЭтаФорма.ДатаОкончанияПлан) Тогда
		
		Если ЗначениеЗаполнено(ЭтаФорма.ДатаОкончанияПлан)
				И ЭтаФорма.ДатаНачалаПлан > ЭтаФорма.ДатаОкончанияПлан Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			ЭтаФорма.ДатаНачалаПлан = ЭтаФорма.ДатаОкончанияПлан;
			Возврат;
		КонецЕсли;
		
		УстановитьОтборПлановПродаж();
	
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаНачалаПлан) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаОкончанияПлан) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиПланыПродаж(СтруктураЗаписи)
	
	Возврат РегистрыСведений.ПланыПродажПоДнямНедели.СоздатьКлючЗаписи(СтруктураЗаписи);
	
КонецФункции

&НаКлиенте
Процедура ПланыПродажВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПланыПродаж.ТекущиеДанные;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Дата"			, ТекДанные.Дата);
	СтруктураЗаписи.Вставить("ТорговаяТочка", Объект.Ссылка);
	СтруктураЗаписи.Вставить("Номенклатура"	, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("Расчетчик"	, ТекДанные.Расчетчик);
	
	СтруктураПараметров = Новый Структура("Ключ", ПолучитьКлючЗаписиПланыПродаж(СтруктураЗаписи));
	Попытка
		ОткрытьФорму("РегистрСведений.ПланыПродажПоДнямНедели.ФормаЗаписи", СтруктураПараметров);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	УстановитьОтборПлановПродаж();
	//Элементы.ПланыПродаж.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзмененияПланаПродаж(Команда)

	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПланыПродаж.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.ИзмененияПлановПродаж.Форма.ФормаСписка",, Элементы.ПланыПродаж);

	ЭлементОтбора = ФормаСписка.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ТекДанные.Дата;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ЭлементОтбора = ФормаСписка.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТорговаяТочка");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ЭлементОтбора = ФормаСписка.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ТекДанные.Номенклатура;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ЭлементОтбора = ФормаСписка.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Расчетчик");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ТекДанные.Расчетчик;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ФормаСписка.Открыть();
	
КонецПроцедуры

//+++АК РОЛИ ОТВЕТСТВЕННЫХ

//////////////////////////////////

&НаСервере
Функция РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущаяСсылка)

	//
	ВсеОК = Истина;
	
	//
	_тзРоли = тзРоли.Выгрузить();
	_тзРоли.Сортировать("Пометка ВОЗР");
	
	//
	Для каждого СтрокаТЗ Из _тзРоли Цикл
		
		//
		Если СтрокаТЗ.Пометка Тогда
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			
			//
			МЗ.Период = ТекущаяДата();
			
			//
			МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
			МЗ.Объект = ТекущаяСсылка;
			
			//
			МЗ.РольПользователя = СтрокаТЗ.Роль;
			
			//
			МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
			
			//
			Попытка
				МЗ.Записать();
			Исключение
				ВсеОК = Ложь;
			КонецПопытки;	
			
		Иначе
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				
				//
				МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
				
				//
				МЗ.Период = ТекущаяДата();
			
				//
				МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
				МЗ.Объект = ТекущаяСсылка;
				
				//
				МЗ.РольПользователя = Неопределено;
				
				//
				МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
				
				//
				Попытка
					МЗ.Записать();
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

	//
	Возврат ВсеОК;
	
КонецФункции
 
&НаКлиенте
Функция РолиОтветственныхПроверитьИЗаписатьДанные()

	//
	ВсеОК = Истина;
	Возврат ВсеОК;
	
	//
	СП = Новый Структура;
	СП.Вставить("Пометка", Истина);
	
	//
	НайденныеСтроки = тзРоли.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		Предупреждение("Объект должен быть привязан хотя бы к одной Роли");
		Возврат Ложь;		
	
	КонецЕсли; 
	
	//
	Возврат ВсеОК;

КонецФункции

&НаСервере
Процедура ЗаполнитьРолиОтветственных()
	
	//
	тзРоли.Очистить();
	
	//
	МассивДоступныхРолей 		= Новый Массив;
	МассивДоступныхТиповРолей 	= Новый Массив;
	
	//
	ТЗ =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.Ссылка ЕСТЬ NULL 
	|{ГДЕ
	|	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
	|	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли}
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|{ГДЕ
	|	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
	|	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.* КАК ТипСтруктурнойЕдиницы}";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ЭлементОтбора = ПЗ.Отбор.Добавить("ТипСтруктурнойЕдиницы");
	ЭлементОтбора.Установить(Объект.ТипСтруктурнойединицы);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипРоли.ТипЗначения.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			
			МассивДоступныхРолей.Добавить(Выборка.Ссылка);
			МассивДоступныхТиповРолей.Добавить(Выборка.ТипРоли);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//++K&C 29.11.2018 VKUS-10
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	СоответствиеОбъектРольСрезПоследних.Период,
	     |	РолиПользователей.Ссылка КАК Роль,
	     |	РолиПользователей.ТипРоли КАК ТипРоли,
		 |	РолиПользователей.Ссылка.Наименование КАК Наименование,
	     |	ВЫБОР
	     |		КОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL
	     |			ТОГДА ИСТИНА
	     |		ИНАЧЕ ЛОЖЬ
	     |	КОНЕЦ КАК Пометка,
	     |	РолиПользователей.Ссылка.ПометкаУдаления
	     |ИЗ
	     |	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
	     |		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	     |			И ((ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних.Объект КАК Справочник.СтруктурныеЕдиницы)) = &Объект)
	     |			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
	     |ГДЕ
	     |	РолиПользователей.Ссылка В(&ДоступныеРоли)
	     |	И РолиПользователей.ТипРоли В(&ДоступныеТипы)
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Пометка УБЫВ,
	     |	Наименование
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	РолиПользователейСоставРоли.Ссылка,
	     |	РолиПользователейСоставРоли.НомерСтроки,
	     |	РолиПользователейСоставРоли.Сотрудник.Представление КАК Сотрудник
	     |ИЗ
	     |	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	     |ГДЕ
	     |	РолиПользователейСоставРоли.Ссылка В(&ДоступныеРоли)";
	
	//+++АК MIND 2018.01.31 занимался тут оптимизацией
	//
	ПЗ = Новый Запрос();
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.УстановитьПараметр("Объект"			, Объект.Ссылка);
	ПЗ.УстановитьПараметр("ДоступныеРоли"	, МассивДоступныхРолей);
	ПЗ.УстановитьПараметр("ДоступныеТипы"	, МассивДоступныхТиповРолей);
	
	//
	Результаты = ПЗ.ВыполнитьПакет();
	
	//
	Выборка = Результаты[0].Выбрать();
	
	//
	ТабСотрудникиПоРолям = Результаты[1].Выгрузить();
	ТабСотрудникиПоРолям.Индексы.Добавить("Ссылка");
	
	//
	ТипРолиУправляющий = ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоНаименованию("Управляющий по рознице"); //+++АК MIND 2018.01.31 оптимизация
	Пока Выборка.Следующий() Цикл
		
		//
		Если Выборка.ТипРоли = ТипРолиУправляющий Тогда
			Продолжить;
		КонецЕсли; 
		//
		НоваяСтрока = тзРоли.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		//
		СтрокиСотрудники = ТабСотрудникиПоРолям.НайтиСтроки(Новый Структура("Ссылка", Выборка.Роль));
		Для Каждого СтрокаССотрудником Из СтрокиСотрудники Цикл
			НоваяСтрока.Сотрудники = НоваяСтрока.Сотрудники + СтрокаССотрудником.Сотрудник + "; ";
		КонецЦикла;
		
		//Если Выборка.КоличествоСотров > 1 Тогда
		//	Для й = 1 По Выборка.КоличествоСотров - 1 Цикл
		//		НоваяСтрока.Сотрудники = НоваяСтрока.Сотрудники + "," + Выборка.Роль.СоставРоли[й].Сотрудник;
		//	КонецЦикла;	
		//КонецЕсли;	
		
	КонецЦикла; 

КонецПроцедуры
 
&НаКлиенте
Процедура тзРолиПометкаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.тзРоли.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Пометка = ТекущиеДанные.Пометка;
	Если Пометка Тогда
		
		//
		Для каждого СтрокаТЗ Из тзРоли Цикл
			
			Если СтрокаТЗ.Роль = ТекущиеДанные.Роль Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаТЗ.ТипРоли <> ТекущиеДанные.ТипРоли Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			СтрокаТЗ.Пометка = НЕ (СтрокаТЗ.ТипРоли = ТекущиеДанные.ТипРоли);
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

//---АК

//+++АК ILIK 2018.07.16 ИП-00019094
&НаСервере
Процедура ЗаполнитьСлужбыКурьерскойДоставки()
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужбыКурьерскойДоставки.Ссылка,
				   |	СлужбыКурьерскойДоставки.Наименование,
	               |	ВЫБОР
	               |		КОГДА СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Пометка
	               |ИЗ
	               |	Справочник.СлужбыКурьерскойДоставки КАК СлужбыКурьерскойДоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	               |		ПО СлужбыКурьерскойДоставки.Ссылка = СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки
	               |			И (СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	               |			И (НЕ СлужбыКурьерскойДоставки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СлужбыДоставкиДляВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование, Выборка.Пометка);
		Если Выборка.Пометка Тогда
			СлужбыДоставкиВыбранные.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//+++АК ILIK 2018.07.16 ИП-00019094
&НаСервере
Процедура ЗаписатьСлужбыКурьерскойДоставки()
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СлужбыКурьерскойДоставкиМагазинов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Объект.Ссылка);
	
	Для Каждого Строка Из СлужбыДоставкиВыбранные Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.СтруктурнаяЕдиница = Объект.Ссылка;
		НоваяЗапись.СлужбаДоставки = Строка.Значение;
	КонецЦикла;

	НаборЗаписей.Записать();
КонецПроцедуры

//+++ AK suvv 2018.10.01 ИП-00019795
&НаСервере
Процедура ЗаполнитьЗначенияСвойствСЕ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствСтруктурныхЕдиниц.Свойство,
	|	ЗначенияСвойствСтруктурныхЕдиниц.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК ЗначенияСвойствСтруктурныхЕдиниц
	|ГДЕ
	|	ЗначенияСвойствСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НазваниеСвойства = ПланыВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ПолучитьИмяПредопределенного(Выборка.Свойство);
		Если Элементы.Найти(НазваниеСвойства) <> неопределено Тогда 
			 ЭтаФорма[НазваниеСвойства] = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //--- AK suvv

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	
	УстановитьДоступностьЗакладкиТорговыйСбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенныеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенныеФайлыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элементы.ПриложенныеФайлы.ТекущиеДанные.УинСтроки = Строка(Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФайлаВКаталогеХранения(РасширениеФайла, УинСтроки)
	
	Возврат Константы.КаталогХраненияФайлов.Получить() + УинСтроки + РасширениеФайла;
	
КонецФункции	

&НаКлиенте
Процедура ПриложенныеФайлыФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайлаКартинки");
	Если СтруктураВозврат <> Неопределено
		И СтруктураВозврат.БылВыборФайла Тогда
		ФайлКартинки = Новый Файл(СтруктураВозврат.ИмяФайла);
		Элементы.ПриложенныеФайлы.ТекущиеДанные.Файл = ФайлКартинки.ИмяБезРасширения;
		Элементы.ПриложенныеФайлы.ТекущиеДанные.Расширение = ФайлКартинки.Расширение;
		КопироватьФайл(ФайлКартинки.ПолноеИмя, ПолучитьИмяФайлаВКаталогеХранения(ФайлКартинки.Расширение, Элементы.ПриложенныеФайлы.ТекущиеДанные.УинСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСохраненияКартинки(УинСтроки, Расширение)
	
	Картинка = Новый Картинка(Константы.КаталогХраненияФайлов.Получить() + УинСтроки + Расширение);
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), Расширение);
	
КонецФункции

&НаКлиенте
Процедура Просмотреть(Команда)
	
	Если Элементы.ПриложенныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПриложенныеФайлы.ДанныеСтроки(Элементы.ПриложенныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.УинСтроки, ДанныеСтроки.Расширение);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ПриложенныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПриложенныеФайлы.ДанныеСтроки(Элементы.ПриложенныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.УинСтроки, ДанныеСтроки.Расширение);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Истина);
	
КонецПроцедуры


Процедура СделатьНомерОсновнымНаСервере(Привязка, Назначение, Номер)
	
	ТелефоннаяКнига.СделатьОсновным(Номер, Назначение, Привязка);
	
	Элементы.Симкарты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьНомерОсновным(Команда)
	
	Перем ТекДанные;
	
	ТекДанные = Элементы.Симкарты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	СделатьНомерОсновнымНаСервере(ТекДанные.Привязка, ТекДанные.Назначение, ТекДанные.Номер);
	
КонецПроцедуры


&НаКлиенте
Процедура СимкартыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//
	СтруктураПараметров = Новый Структура("Ключ", Элемент.ТекущиеДанные.Номер);
	ФормаСимКарты = ПолучитьФорму("Справочник.СлужебныеSIMКарты.ФормаОбъекта", СтруктураПараметров); 
	Если ФормаСимКарты.Открыта() Тогда
		ФормаСимКарты.Активизировать();
	Иначе
		ФормаСимКарты.Открыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтрегулироватьФормуПоПравам();

	//+++ AK suvv 12.07.2018 ИП-00019053 
	//ПодключитьОбработчикОжидания("УстановитьАвторовРеквизитов", 0.5, Истина);
	//--- AK suvv
	
КонецПроцедуры

//+++ AK suvv 12.07.2018 ИП-00019053 
&НаСервере
Процедура УстановитьАвторовРеквизитовСервер()
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ИсторияИзмененияРеквизитовСЕ.Реквизит,
	               	|	ИсторияИзмененияРеквизитовСЕ.АвторИзменений
	               	|ИЗ
	               	|	РегистрСведений.ИсторияИзмененияРеквизитовСЕ КАК ИсторияИзмененияРеквизитовСЕ
	               	|ГДЕ
	               	|	ИсторияИзмененияРеквизитовСЕ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	//
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		НадписьАвторРеквизита = Выборка.Реквизит + "Автор";
		
		//Если Элементы.Найти(НадписьАвторРеквизита) <> неопределено Тогда
		//	Элементы[НадписьАвторРеквизита].Заголовок = "Автор:" + Выборка.АвторИзменений;	
		//КонецЕсли;
		
		Попытка
			Элементы[НадписьАвторРеквизита].Заголовок = "Автор:" + Выборка.АвторИзменений;
		Исключение
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры //--- AK suvv

&НаКлиенте
Процедура УстановитьАвторовРеквизитов()
	
	УстановитьАвторовРеквизитовСервер();
	
КонецПроцедуры 

//--- AK suvv




&НаКлиенте
Процедура СписокТекущихРегламентныхРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Регистратор);
	
КонецПроцедуры

Процедура ЗаполнитьАссортиментНаСервере(ФорматВВПринудительно)
	
	РегламентныеЗаданияСервер.ФормированиеТоварногоАссортимента(Объект.Ссылка, ФорматВВПринудительно);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьАссортиментПоФормату(Команда)
	//+++АК KIRN 2018.03.02 ИП-00018034
	Если Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРОзничныхточек.Перекресток") ИЛИ Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРОзничныхточек.Пятерочка") ТОгда
		ЗаполнитьАссортиментНаСервере(Неопределено);
	Иначе
		ФорматВВПринудительно = ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.ПустаяСсылка");
		Если ВвестиЗначение(ФорматВВПринудительно, "Выберите формат магазина", Новый ОписаниеТипов("ПеречислениеСсылка.ФорматМагазинаВВ")) Тогда
			ЗаполнитьАссортиментНаСервере(ФорматВВПринудительно);
			Элементы.Ассортимент.Обновить();
		КонецЕсли;	
	КонецЕСли;
	//---АК KIRN 	
КонецПроцедуры

Функция ПечатьШК()
	
	ТабДок = Новый ТабличныйДокумент();
	ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	Макет = Справочники.СтруктурныеЕдиницы.ПолучитьМакет("Этикетка");
	
	ШтрихКод = "820" + Прав("000000000000" + Формат(Объект.id_TT, "ЧГ=0"), 12);
	Область = Макет.ПолучитьОбласть("Этикетка");
	Область.Параметры.Склад = Объект.Наименование;
	
	Рисунок = Область.Рисунки["ШтрихКод"];
	
	//+++АК sole 2018.09.10 ИП-00019639
	//ПараметрыШК = Новый Структура;
	//ПараметрыШК.Вставить("Ширина"			, Рисунок.Ширина);
	//ПараметрыШК.Вставить("Высота"			, Рисунок.Высота);
	//ПараметрыШК.Вставить("ТипКода"			, 4);
	//ПараметрыШК.Вставить("ОтображатьТекст"	, Ложь);
	//ПараметрыШК.Вставить("РазмерШрифта"		, 10);
	//ПараметрыШК.Вставить("Штрихкод"			, Штрихкод);
	//Рисунок.Картинка = ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШК);
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Штрихкод, 0, 300);
	Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
	//---АК sole 2018.09.10 ИП-00019639
	
	Область.Параметры.ШК = ШтрихКод;
	ТабДок.Вывести(Область);
	
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_ЭтикеткиУпаковки";
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ПечатьШтрихКод(Команда)
	
	ТабДок = ПечатьШК();
	ТабДок.Показать();
	
КонецПроцедуры

Процедура ОбновитьСписокДокументов()
	
	ТабФайлыДокументации.Очистить();
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
	СтрЗапрос =
	"SELECT [ShopNo]
	|	,[id]
	|	,CAST([FileName] as nvarchar(500)) as FileName
	|	,[FileExtension]
	|FROM [M2].[dbo].[ShopSchemes] (nolock)
	|WHERE [ShopNo] = " + ВнешниеДанные.ФорматПоля(Объект.НомерТочки) + "
	|ORDER BY FileName";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТаб = ТабФайлыДокументации.Добавить();
			//СтрокаТаб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUid").Value));
			СтрокаТаб.ИмяФайла = СокрЛП(Rs.Fields("FileName").Value);
			СтрокаТаб.Расширение = СокрЛП(Rs.Fields("FileExtension").Value);
			СтрокаТаб.id = Rs.Fields("id").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСтраницаДокументация Тогда
		ОбновитьСписокДокументов();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАссортимент Тогда
		Если Не АссортиментСформирован Тогда
			Ассортимент.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
			АссортиментСформирован = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДвоичныеДанныеДокумента(id, Расширение)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	RecordSet    = Новый COMОбъект("ADODB.Recordset");
    RecordSet.CursorLocation    = 3;
    RecordSet.LockType			= 2;
    Запрос = "SELECT FileData FROM [M2].[dbo].[ShopSchemes] (nolock) WHERE id = " + ВнешниеДанные.ФорматПоля(id);
    RecordSet.Open(Запрос, ADOСоединение);
    RecordSet.MoveFirst();
    
    Stream        = Новый COMОбъект("ADODB.Stream");
    Stream.Type = 1;
    Stream.Open();
    Stream.Write(RecordSet.Fields("FileData").Value);
	ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
    Stream.SaveToFile(ИмяФайла);
    Stream.Close();
	
	ДвДанные = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Возврат ДвДанные;
	
КонецФункции	

&НаКлиенте
Процедура ПосмотретьДокумент(Команда)
	
	Если Элементы.ТабФайлыДокументации.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не выбрана строка с документом");
		Возврат;
	КонецЕсли;
	
	ДвДанные = ПолучитьДвоичныеДанныеДокумента(Элементы.ТабФайлыДокументации.ТекущиеДанные.id, Элементы.ТабФайлыДокументации.ТекущиеДанные.Расширение);
	ИмяФайла = ПолучитьИмяВременногоФайла(Элементы.ТабФайлыДокументации.ТекущиеДанные.Расширение);
	ДвДанные.Записать(ИмяФайла);
	ЗапуститьПриложение(ИмяФайла);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНомерНаСервере()
	
	НачатьТранзакцию();
	
	Объект.НомерТочки = Справочники.СтруктурныеЕдиницы.НомерДляНовойТочки();
	Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомер(Команда)
	
	Если Вопрос("При установке номера объект будет записан. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	//
	УстановитьНомерНаСервере();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКоординаты(Команда)
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
	ПараметрыПодбора.Вставить("Режим"				, "РежимАдресКонтрагента");
	ПараметрыПодбора.Вставить("Режим2"				, "Диалог");
	ПараметрыПодбора.Вставить("Наименование"		, Объект.Наименование);
	ПараметрыПодбора.Вставить("Ссылка"				, Объект.Ссылка);
	СтрокаКоординат = "";
	ПараметрыПодбора.Вставить("СтрокаКоординат"		, СтрокаКоординат);
	ПараметрыПодбора.Вставить("КоординатыОпределены", Ложь);
	
	Если НЕ ПустаяСтрока(Объект.Адрес) Тогда
		ПараметрыПодбора.Вставить("Адрес", Объект.Адрес);
	КонецЕсли;

	ОткрытаКарта = Истина;
	ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если (ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма"))
			И (ИсточникВыбора.ИмяФормы = "Обработка.АК_ОтображениеНаКарте.Форма.Форма") тогда
		
		Если ВыбранноеЗначение.КоординатыОпределены тогда
			Сообщить(ВыбранноеЗначение.СтрокаКоординат)
		КонецЕсли;
		ОткрытаКарта = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекущийГрафикМагазина()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Магазин", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыМагазинаСрезПоследних.График
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыМагазина.СрезПоследних(&ТекДата, Магазин = &Магазин) КАК ГрафикиРаботыМагазинаСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ГрафикНаФорме = Выборка.График;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ГрафикНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Сначала нужно записать эту структурную единицу");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуМодально("РегистрСведений.ГрафикиРаботыМагазина.Форма.ФормаРедактированиеИзСтрЕдиницы", Новый Структура("СтрЕдиница", Объект.Ссылка));
	ПрочитатьТекущийГрафикМагазина();
	
КонецПроцедуры


//++АК ZHAS 18-08-17 ИП-00015887+ 
//Для Примера Взят механизм из документа: ЗаявкаНаУслугиМатериалы. 
//Модифицирован код - без дополнительного открытия формы (чтоб не учитывать настройки клиента пользователя)
//Использован обработчик ожидания, для минимизации нагрузки на сервер
&НаКлиенте
Процедура Просмотреть1(Команда)
	
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока 	= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки 		= Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	СтруктураКартинки 	= ПолучитьРеквизитыСохраненияКартинки1(ДанныеСтроки.Файл);
	ИмяФайла 			= ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак1(Команда)
	
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки 		= Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	СтруктураКартинки 	= ПолучитьРеквизитыСохраненияКартинки1(ДанныеСтроки.Файл);
	ИмяФайла 			= ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	
	ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Истина);
	
КонецПроцедуры

Функция ПолучитьРеквизитыСохраненияКартинки1(ФайлСсылка)
	
	//+++АК BARA  ИП-00017776 2018.02.01  фрагмент кода "новый картинка" выдает ошибку на некоторых xls файлах
	//Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Картинка = Новый ДвоичныеДанные(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	//---АК
	
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции

Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	//+++АК BARA  ИП-00017776 2018.02.01     Код "Новый Картинка" выдает ошибку при прикреплении excel файлов.
	//СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтрокаТаблицы.ДанныеКартинки));
	//---АК
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	

&НаКлиенте
Процедура ПрикрепленныеФайлыТипыЗагружаемыхФайловПриИзменении(Элемент)
	ДиалогОткрытияФайла 							= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 				= "";
	ДиалогОткрытияФайла.МножественныйВыбор 			= Истина;
	ДиалогОткрытияФайла.Заголовок 					= "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов 								= ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл 								= Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				СообщениеОНесуществующемФайле = Нстр("ru = 'Не существует файл. %ИмяФайла%'");
				Сообщить(СтрЗаменить(СообщениеОНесуществующемФайле, "%ИмяФайла%", ИмяФайла));
				
				Продолжить;
			КонецЕсли;
			Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ВыбФайл_Расширение 						= ВыбФайл.Расширение;
			ДанныеСтроки 							= Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
			СсылкаНаФайл 							= СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл_Расширение);
			ДанныеСтроки.Файл 						= СсылкаНаФайл;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//+++АК BARA ИП-00017776   2018.02.01  Не рабочий код. Исправил в процедуре ПрикрепленныеФайлыПередНачаломДобавления
	//ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	//
	//Элементы.ПрикрепленныеФайлы.ТекущиеДанные.ТипыЗагружаемыхФайлов = ТекущиеДанные.ТипыЗагружаемыхФайлов;
	//
	//ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	//ДиалогОткрытияФайла.МножественныйВыбор 	= Истина;
	//ДиалогОткрытияФайла.Заголовок 			= "Выберите файлы";
	//Если ДиалогОткрытияФайла.Выбрать() Тогда
	//    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	//    Для Каждого ИмяФайла Из МассивФайлов Цикл
	//        ВыбФайл = Новый Файл(ИмяФайла);
	//		Если НЕ ВыбФайл.Существует() Тогда				
	//			СообщениеОНесуществующемФайле = Нстр("ru = 'Не существует файл. %ИмяФайла%'");
	//			Сообщить(СтрЗаменить(СообщениеОНесуществующемФайле, "%ИмяФайла%", ИмяФайла));
	//			Продолжить;
	//		КонецЕсли;
	//		СсылкаНаФайл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
	//		Элементы.ПрикрепленныеФайлы.ТекущиеДанные.Файл 				= СсылкаНаФайл; 
	//		Элементы.ПрикрепленныеФайлы.ТекущиеДанные.ДатаДобавления 	= ТекущаяДата();
	//		
	//	КонецЦикла;	
	//КонецЕсли;
	//
	//ПодключитьОбработчикОжидания("ФайлыСписокПриАктивизацииСтроки_ОбработкаОжидания", 0.1, Истина);
	//---
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ФайлыСписокПриАктивизацииСтроки_ОбработкаОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПриАктивизацииСтроки_ОбработкаОжидания()
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипыЗагружаемыхФайлов) Тогда
			Элементы.ПрикрепленныеФайлы.ОтборСтрок 			= Новый ФиксированнаяСтруктура("ТипыЗагружаемыхФайлов", ТекущиеДанные.ТипыЗагружаемыхФайлов);
			Элементы.ПрикрепленныеФайлы.ИзменятьСоставСтрок = Истина;
		Иначе
			Элементы.ПрикрепленныеФайлы.ОтборСтрок 			= Новый ФиксированнаяСтруктура("ТипыЗагружаемыхФайлов", ПредопределенноеЗначение("Перечисление.ТипыЗагружаемыхФайлов.ПроектОсвещен"));
			Элементы.ПрикрепленныеФайлы.ИзменятьСоставСтрок = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ПрикрепленныеФайлы.ИзменятьСоставСтрок = Ложь; //Блокировка нижней таблицы
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ФайлыСписокПриАктивизацииСтроки_ОбработкаОжидания");
	
КонецПроцедуры


&НаКлиенте
Процедура ФайлыСписокПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	Если Объект.ПрикрепленныеФайлы.НайтиСтроки(Новый Структура("ТипыЗагружаемыхФайлов", ТекущиеДанные.ТипыЗагружаемыхФайлов)).Количество() > 0 Тогда
		Отказ 					= Истина;
		ОтменаРедактирования 	= Истина;
		Сообщить(Нстр("ru = 'По данному типы есть прикрепленные файлы. Вначале удалите их'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные 									= Элементы.ФайлыСписок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Объект.ФайлыСписок.НайтиСтроки(Новый Структура("ТипыЗагружаемыхФайлов", ТекущиеДанные.ТипыЗагружаемыхФайлов)).Количество() > 1 Тогда
			Отказ 										= Истина;
			ОтменаРедактирования 						= Истина;
			Сообщить(Нстр("ru = 'Данный тип уже есть в таблице. Выберите другой тип'"));
			Элементы.ФайлыСписок.ТекущиеДанные.ТипыЗагружаемыхФайлов = Неопределено;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ТипыЗагружаемыхФайлов) Тогда
			ПодключитьОбработчикОжидания("ФайлыСписокПриАктивизацииСтроки_ОбработкаОжидания", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КомандаВетисАдрес(Команда)
	
	//
	Форма = ПолучитьФорму("Обработка.МЙ_ПодборАдреса.Форма.Форма",,ЭтаФорма);
	Форма.СтруктурнаяЕдиница = Объект.Ссылка;
	Форма.Открыть();
	
КонецПроцедуры

//++АК ZHAS 18-08-17 ИП-00015887-

//+++АК Susk (Суслин К.В.) 2017.12.15 ИП-00017497
&НаКлиенте
Процедура ВыгрузитьРегистрациюИФНСВБух(Команда)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Перед продолжением необходимо записать элемент. Выполнить это сейчас?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Записать();
	КонецЕсли;
	
	ВыгрузитьСтруктурнуюЕдиницуВБухгалтериюСервер();	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.12.15 ИП-00017497
&НаСервере
Процедура ВыгрузитьСтруктурнуюЕдиницуВБухгалтериюСервер()
	
	ОбменСБП2_0.ВыгрузкаСправочникаВБП("Прочее_НЕ_ИСПОЛЬЗОВАТЬ", "РегистрацияИФНС", "Справочник_СтруктурныеЕдиницы", Объект.Ссылка);
		
КонецПроцедуры

//+++АК BARA ИП-00017776   2018.02.01   
&НаКлиенте
Процедура ПрикрепленныеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	//Элементы.ПрикрепленныеФайлы.ТекущиеДанные.ТипыЗагружаемыхФайлов = ТекущиеДанные.ТипыЗагружаемыхФайлов;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Истина;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				СообщениеОНесуществующемФайле = Нстр("ru = 'Не существует файл. %ИмяФайла%'");
				Сообщить(СтрЗаменить(СообщениеОНесуществующемФайле, "%ИмяФайла%", ИмяФайла));
				Продолжить;
			КонецЕсли;
			НовСтр = Объект.ПрикрепленныеФайлы.Добавить();
			СсылкаНаФайл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			НовСтр.Файл 				= СсылкаНаФайл; 
			НовСтр.ДатаДобавления 	= ТекущаяДата();
			НовСтр.ТипыЗагружаемыхФайлов 	= ТекущиеДанные.ТипыЗагружаемыхФайлов;
			
		КонецЦикла;	
	КонецЕсли;
	ЭтаФорма.ОбновитьОтображениеДанных();
	ПодключитьОбработчикОжидания("ФайлыСписокПриАктивизацииСтроки_ОбработкаОжидания", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка) //+++АК mika 2018.02.20 ИП-00017929
	
	Элементы.ТипРозничнойТочки.СписокВыбора.Очистить();
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница")
		ИЛИ Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы") Тогда //+++АК luza 04.10.2018 ИП-00020064
		Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Перекресток"));
		//+++AK GREK 16.09.2018 ИП-00019839
		Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Пятерочка"));
		//---AK
		//+++АК BELN 2018.12.20 ИП-00020740       
		Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Прочие"));
		//---АК BELN 2018.12.20 
		
	Иначе
		Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка"));
		Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин"));
		Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Микромаркет"));
	КонецЕсли;	
	
	//+++ AK suvv 2018.10.04 ИП-00020007
	Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Вкусомат"));
	//--- AK suvv
	//+++ AK suvv 2018.11.12 ИП-00020323
	Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Тилси"));
	//--- AK suvv
	
	//+++ AK suvv 2018.11.18 ИП-00020144.01
	Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.МаркетПлейс"));
	//--- AK suvv
	//+++АК BELN 2018.12.06 ИП-00020532.01   
	Элементы.ТипРозничнойТочки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.ПространствоВкуса"));
	//---АК BELN 2018.12.06 
КонецПроцедуры


//+++АК KIRN 2018.03.02 ИП-00018034 
&НаКлиенте
Процедура ФорматМагазинаВВНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница")
		Или Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы") Тогда	//+++АК luza 04.10.2018 ИП-00020064
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Обычный"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Мини"));
	Иначе
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Флагман"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Обычный"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Мини"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Развитие"));
	КонецЕсли;	
	ДанныеВыбора = СписокВыбора;
	
КонецПроцедуры
//---АК KIRN ИП-00018034

//+++ AK suvv 18.06.2018 ИП-00018658
&НаКлиенте
Процедура КолонкаЦФООбработкаВыбора(Элемент, ВыбранноеЗначение, ИмяПоля)
	
	ТекДанные = Элементы.ЦФО.ТекущиеДанные;
	Если ТекДанные <> неопределено Тогда
		Если ТекДанные[ИмяПоля] <> ВыбранноеЗначение Тогда
			ТекДанные.АвторИзменений = ТекПользователь; 
			ТекДанные.ДатаИзменений = ТекущаяДата();
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //--- AK suvv

//+++ AK suvv 18.06.2018 ИП-00018658
&НаКлиенте
Процедура ЦФОЦФООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	
	КолонкаЦФООбработкаВыбора(Элемент, ВыбранноеЗначение, "ЦФО");
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 18.06.2018 ИП-00018658
&НаКлиенте
Процедура ЦФООрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КолонкаЦФООбработкаВыбора(Элемент, ВыбранноеЗначение, "Организация");
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 18.06.2018 ИП-00018658
&НаКлиенте
Процедура ЦФОПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЦФО.ТекущиеДанные;
	Если Формат(ТекДанные.Период,"ДФ=dd.MM.yyyy") <> Текст Тогда 
		ТекДанные.АвторИзменений = ТекПользователь; 
		ТекДанные.ДатаИзменений = ТекущаяДата();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 18.06.2018 ИП-00018658
&НаКлиенте
Процедура ЦФОПослеУдаления(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 12.07.2018 ИП-00019053
&НаКлиенте
Процедура ТорговаяПлощадьПриИзменении(Элемент)
	ИзменениеАвтораРеквизита("ТорговаяПлощадь");
КонецПроцедуры //--- AK suvv

//+++ AK suvv 12.07.2018 ИП-00019053
&НаКлиенте
Процедура ОбщаяПлощадьПриИзменении(Элемент)
	ИзменениеАвтораРеквизита("ОбщаяПлощадь");
КонецПроцедуры //--- AK suvv

//+++ AK suvv 12.07.2018 ИП-00019053 
&НаКлиенте
Процедура ИзменениеАвтораРеквизита(НазваниеРеквизита)
	
	Если Объект[НазваниеРеквизита] <> Объект.Ссылка[НазваниеРеквизита] Тогда
		НадписьАвторРеквизита = НазваниеРеквизита + "Автор";
		Элементы[НадписьАвторРеквизита].Заголовок = "Автор:" + ТекПользователь;
	КонецЕсли;
	
КонецПроцедуры // --- AK suvv

//+++АК ILIK 2018.07.16 ИП-00019094
&НаКлиенте
Процедура СлужбыДоставкиВыбранныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если СлужбыДоставкиДляВыбора.ОтметитьЭлементы("Выберите службы доставки") Тогда
		Модифицированность = Истина;
		
		СлужбыДоставкиВыбранные.Очистить();
		Для Каждого Элемент Из СлужбыДоставкиДляВыбора Цикл
			Если Элемент.Пометка Тогда
				СлужбыДоставкиВыбранные.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ КОНТАКТНАЯ ИНФОРМАЦИЯ

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюНаФормуСервер()
	
	МассивРеквизитов = Новый Массив;
	
	// Создадим таблицу значений
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания		, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита"	, Новый ОписаниеТипов("Строка")										, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей"	, Новый ОписаниеТипов("Строка,СписокЗначений")						, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Тип"				, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Вид"				, Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации")	, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипНомер"		, Новый ОписаниеТипов("Число")										, ИмяОписания));
 	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТолькоРоссийский", Новый ОписаниеТипов("Булево")										, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Комментарий"		, Новый ОписаниеТипов("Строка")										, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Представление"	, Новый ОписаниеТипов("Строка")										, ИмяОписания));
	
	// Получим список видов КИ
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.ЗначенияПолей,
		|	КонтактнаяИнформация.Комментарий КАК Комментарий,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ ВТТекущаяКИ
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &ТекущийОбъект
		|	И КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Тип
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
		|	ВидыКонтактнойИнформации.Тип КАК Тип,
		|	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕСТЬNULL(ВТТекущаяКИ.ЗначенияПолей, """") КАК ЗначенияПолей,
		|	ЕСТЬNULL(ВТТекущаяКИ.Комментарий, """") КАК Комментарий,
		|	ЕСТЬNULL(ВТТекущаяКИ.Представление, """") КАК Представление,
		|	ИСТИНА КАК Использовать
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущаяКИ КАК ВТТекущаяКИ
		|		ПО (ВТТекущаяКИ.Тип = ВидыКонтактнойИнформации.Тип)
		|			И (ВТТекущаяКИ.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.СтруктурныеЕдиницы)
		|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	ВидыКонтактнойИнформации.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТекущаяКИ");
	Запрос.УстановитьПараметр("ТекущийОбъект", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	
	// Добавим нужные реквизиты
	Номер = 0;
	СоответствиеВидаКИИмениРеквизита = Новый Соответствие;
	Для Каждого СтрокаКИ Из ТаблицаЗапроса Цикл
		
		Если СтрокаКИ.ПометкаУдаления Тогда
			СтрокаКИ.Использовать = Ложь;
			Продолжить;
		КонецЕсли;
		
		Номер = Номер + 1;
		ИмяРеквизита = "КонтактнаяИнформацияПоле" + Номер;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"), , СтрокаКИ.Наименование, Истина));
		
		СоответствиеВидаКИИмениРеквизита.Вставить(СтрокаКИ.Вид, ИмяРеквизита);
		
	КонецЦикла;
	
	// Изменение отображения новых реквизитов
	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	
	// Создание элементов на форме и заполнение значений реквизитов
	ЭлементРодитель = Элементы.СтраницаКонтактнаяИнформация;
	Для Каждого СтрокаКИ Из ТаблицаЗапроса Цикл
		
		Если НЕ СтрокаКИ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		мВид = СтрокаКИ.Вид;
		ИмяРеквизита = СоответствиеВидаКИИмениРеквизита.Получить(мВид);
		Элемент = Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"), ЭлементРодитель);
		Элемент.Вид 				= ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным 		= ИмяРеквизита;
		Элемент.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Верх;
		
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота 				= 5;
			Элемент.МногострочныйРежим 	= Истина;
		КонецЕсли;
		
		Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаКИ.Тип) Тогда
			Элемент.КнопкаВыбора = Истина;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
		КонецЕсли;
		
		//+++АК SHEP 2018.09.24 ИП-00019906
		Если мВид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы") Тогда
			Элемент.РедактированиеТекста = Ложь;
		КонецЕсли;
		//---АК SHEP 2018.09.24
		
		НоваяСтрока = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизита     = ИмяРеквизита;
		НоваяСтрока.ТолькоРоссийский = Истина;
		НоваяСтрока.Вид              = мВид;
		НоваяСтрока.Тип              = СтрокаКИ.Тип;
		НоваяСтрока.ТипНомер         = ПоТипуКонтактнойИнформацииПолучитьНомер(СтрокаКИ.Тип);
		НоваяСтрока.ЗначенияПолей    = СтрокаКИ.ЗначенияПолей;
		НоваяСтрока.Комментарий      = СтрокаКИ.Комментарий;
		
		Если НЕ СтрокаКИ.Представление = "" Тогда	
			ЭтаФорма[ИмяРеквизита] = СтрокаКИ.Представление;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКИПриЗаписиНаСервере(Объект)
	
	мРегистр = РегистрыСведений.КонтактнаяИнформация;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Комментарий КАК Комментарий,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Ссылка
	|	И КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации";
	
	ТаблицаКИ = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура("Тип, Вид");
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ТекТип = СтрокаТаблицы.Тип;
		ТекВид = СтрокаТаблицы.Вид;
		
		мПредставление = ЭтаФорма[СтрокаТаблицы.ИмяРеквизита];
		Если ПустаяСтрока(мПредставление) Тогда
			СтруктураПоиска.Тип = ТекТип;
			СтруктураПоиска.Вид = ТекВид;
			СтрокиКИ = ТаблицаКИ.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКИ.Количество() > 0 Тогда
				НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
				НаборЗаписей.Отбор.Тип.Установить(ТекТип);
				НаборЗаписей.Отбор.Вид.Установить(ТекВид);
				НаборЗаписей.Прочитать();
				
				НаборЗаписей.Очистить();
				Попытка
					НаборЗаписей.Записать();
				Исключение
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""Контактная информация""";
					СообщениеПользователю.Сообщить();
				КонецПопытки;
		    КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект 			= Объект.Ссылка;
		МенеджерЗаписи.Тип 				= ТекТип;
		МенеджерЗаписи.Вид 				= ТекВид;
		МенеджерЗаписи.Представление 	= мПредставление;
		МенеджерЗаписи.ЗначенияПолей	= СтрокаТаблицы.ЗначенияПолей;
		МенеджерЗаписи.Комментарий		= СтрокаТаблицы.Комментарий;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить("Не удалось добавить запись в регистр ""Контактная информация""" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//	Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(мТип)
	
	Если мТип = Перечисления.ТипыКонтактнойИнформации.Адрес
			ИЛИ мТип = Перечисления.ТипыКонтактнойИнформации.Телефон
			ИЛИ мТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
			ИЛИ мТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает номер по типу контактной информации.
//
// Параметры:
//	Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Число:
// 		1 - Адрес
// 		2 - Телефон
//		0 - Все остальные типы
//
Функция ПоТипуКонтактнойИнформацииПолучитьНомер(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 1;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

//+++ AK suvv 2018.10.01 ИП-00019795
&НаКлиенте
Процедура ОткрытьФормуДопСвойств(Команда)
		
	Отбор           = Новый Структура("СтруктурнаяЕдиница", Объект.Ссылка);
	ПараметрыОтбора = Новый структура("Отбор", Отбор);	
	
	ОткрытьФорму("РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц.Форма.ФормаСписка", ПараметрыОтбора);
		
КонецПроцедуры //--- AK suvv

//+++АК luza 27.09.2018 ИП-00019940
&НаСервере
Процедура ЗаполнитьEmailСтороннейТТСервер()
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.СтруктурныеЕдиницы)) = &Объект
	               |	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	//
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.EMailМагазинаСтороннейРозницы);
	
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		EMailМагазинаСтороннейРозницы = Выборка.Значение;
		ТекEMailМагазинаСтороннейРозницы = EMailМагазинаСтороннейРозницы; 
	КонецЕсли;	
	
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//
	//Если ТЗ.Количество() > 0 Тогда
	//	EMailМагазинаСтороннейРозницы = ТЗ[0].Значение;
	//	ТекEMailМагазинаСтороннейРозницы = EMailМагазинаСтороннейРозницы; 
	//КонецЕсли;	
	
КонецПроцедуры

//+++АК luza 27.09.2018 ИП-00019940
&НаСервере
Процедура ЗаписатьEmailСтороннейТТСервер()
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.EMailМагазинаСтороннейРозницы;	
	Запись.Значение = EMailМагазинаСтороннейРозницы;
	Запись.Записать();	
КонецПроцедуры

//+++АК luza 04.10.2018 ИП-00020064
&НаСервере
Процедура ЗаполнитьСкладМагазинаСтороннейРозницыСервер()
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.СтруктурныеЕдиницы)) = &Объект
	               |	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.СкладМагазинаСтороннейРозницы);
	
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СкладМагазинаСтороннейРозницы = Выборка.Значение;
		ТекСкладМагазинаСтороннейРозницы = СкладМагазинаСтороннейРозницы; 
	КонецЕсли;	
	
	
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//
	//Если ТЗ.Количество() > 0 Тогда
	//	СкладМагазинаСтороннейРозницы = ТЗ[0].Значение;
	//	ТекСкладМагазинаСтороннейРозницы = СкладМагазинаСтороннейРозницы; 
	//КонецЕсли;	
	
КонецПроцедуры

//+++АК luza 04.10.2018 ИП-00020064
&НаСервере
Процедура ЗаписатьСкладМагазинаСтороннейРозницыСервер()
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.СкладМагазинаСтороннейРозницы;	
	Запись.Значение = СкладМагазинаСтороннейРозницы;
	Запись.Записать();	
КонецПроцедуры

//+++АК SHEP 2018.11.19 ИП-00020407
&НаСервереБезКонтекста
Процедура УбратьИзВыводаПозицииИзСплитТестирования(ТорговаяТочка, ХарактеристикиНоменклатуры, мСписокНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	АссортиментСплитТестирования.НоменклатураСплитТестирования,
		|	СпрНоменклатураСплитТестирования.Номенклатура,
		|	СУММА(АссортиментСплитТестирования.Добавлен) КАК Добавлен
		|ИЗ
		|	РегистрСведений.АссортиментСплитТестирования КАК АссортиментСплитТестирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураСплитТестирования КАК СпрНоменклатураСплитТестирования
		|		ПО АссортиментСплитТестирования.НоменклатураСплитТестирования = СпрНоменклатураСплитТестирования.Ссылка
		|ГДЕ
		|	АссортиментСплитТестирования.ТорговаяТочка = &ТорговаяТочка
		|	И СпрНоменклатураСплитТестирования.ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)
		|	И НЕ СпрНоменклатураСплитТестирования.Отключена
		|
		|СГРУППИРОВАТЬ ПО
		|	АссортиментСплитТестирования.НоменклатураСплитТестирования,
		|	СпрНоменклатураСплитТестирования.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(АссортиментСплитТестирования.Добавлен) > 0");
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Сообщить("Номенклатуру " + ВыборкаЗапроса.НоменклатураСплитТестирования + " нельзя выводить, т.к. она находится в сплит-тестировании!");
		ПозСписка = мСписокНоменклатуры.НайтиПоЗначению(ВыборкаЗапроса.Номенклатура);
		Если ПозСписка <> Неопределено Тогда
			мСписокНоменклатуры.Удалить(ПозСписка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//+++АК MOSD 2018.12.05 ИП-00020544 
&НаСервере
Процедура ЗаполнитьЗначенияОграниченияВыручки()
	
	ОграниченияВыручки = Справочники.СтруктурныеЕдиницы.ПолучитьОграниченияВыручкиПоМагазинам(Объект.Ссылка)[Объект.id_TT];
	
	Если ОграниченияВыручки <> Неопределено Тогда
		ОграничениеВыручкиНижнийПредел = ОграниченияВыручки.НижнийПредел;
		ОграничениеВыручкиВерхнийПредел = ОграниченияВыручки.ВерхнийПредел;
		Для Каждого СтрокаСтатистики Из ОграниченияВыручки.Статистика Цикл
			ОграниченияВыручкиСтатистика = ОграниченияВыручкиСтатистика + 
				?(ОграниченияВыручкиСтатистика="","",Символы.ПС) + 
				Формат(СтрокаСтатистики.Дата, "ДФ=dd.MM.yy") + 
				"	Выручка: " +
				Строка(СтрокаСтатистики.Выручка) +
				" т.р.";
			КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//+++АК MOSD 2018.12.05 ИП-00020544 
&НаКлиенте
Процедура ОжидаемаяВыручкаНаЗавтраПриИзменении(Элемент)
	
	Если Объект.ОжидаемаяВыручкаНаЗавтра <> 0 
		И ЗначениеЗаполнено(ОграничениеВыручкиНижнийПредел) 
		И ЗначениеЗаполнено(ОграничениеВыручкиВерхнийПредел) Тогда
		
		мОжидаемаяВыручкаНаЗавтра = Мин(Макс(Объект.ОжидаемаяВыручкаНаЗавтра,ОграничениеВыручкиНижнийПредел),ОграничениеВыручкиВерхнийПредел);
		Если Объект.ОжидаемаяВыручкаНаЗавтра <> мОжидаемаяВыручкаНаЗавтра Тогда
			
			Объект.ОжидаемаяВыручкаНаЗавтра = мОжидаемаяВыручкаНаЗавтра;
			
			ТекстПредупреждения = "Ожидаемая выручка должна быть в пределах от " + ОграничениеВыручкиНижнийПредел + " т.р. до " +
								  ОграничениеВыручкиВерхнийПредел + " т.р.!" + Символы.ПС + 
								  "Статистика продаж за последние 14 дней:" + Символы.ПС + 
								  ОграниченияВыручкиСтатистика;
								  
			ПоказатьПредупреждение(,ТекстПредупреждения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//---АК MOSD 
