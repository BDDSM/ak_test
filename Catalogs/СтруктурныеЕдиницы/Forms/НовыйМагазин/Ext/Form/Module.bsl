 &НаКлиенте
Перем ИзмененныеРеквизиты;

//Раков П.С. Рассылка по добавленным файлам ++ 
перем мНовыеФайлы;
//Раков --

//+++АК SUVV 2018.03.05 ИП-00017818
&НаСервере
Процедура УдалитьВсеЗагруженныеФайлы()
	
	Для Каждого Стр из Объект.Файлы Цикл
		ФайлКУдалению = Стр.Файл;
		Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
			УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.05 ИП-00017818
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		УдалитьВсеЗагруженныеФайлы();
	КонецЕсли;
	
КонецПроцедуры //---АК SUVV

//Раков --
&НаСервере
Процедура ВыбратьДанныеПоОбъекту()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЗаключениеДоговораАренды.Ссылка,
	//|	""ЗаключениеДоговора"" КАК Имя
	//|ИЗ
	//|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	//|ГДЕ
	//|	ЗаключениеДоговораАренды.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ДоговорыКонтрагентов.Ссылка,
	//|	""ДоговорКонтрагента""
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|ГДЕ
	//|	ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий()Цикл
	//	ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(),Выборка.Имя);
	//КонецЦикла;
	////Если НЕ ЗначениеЗаполнено(ОбъектАренды.Ссылка)Тогда
	//	мОбъектАренды = Справочники.ОбъектыАренды.СоздатьЭлемент();
	//	мОбъектАренды.УстановитьСсылкуНового(Справочники.ОбъектыАренды.ПолучитьСсылку());
	//	ЗначениеВРеквизитФормы(мОбъектАренды,"ОбъектАренды");
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Ссылка)Тогда
	//	ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	//	ОбъектДоговор.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку());
	//	ЗначениеВРеквизитФормы(ОбъектДоговор,"ДоговорКонтрагента");
	//	ДоговорКонтрагента.ОбъектАренды = ОбъектАренды.Ссылка
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(ЗаключениеДоговора.Ссылка)Тогда
	//	ЗаключениеДоговора.ОбъектАренды 		= ОбъектАренды.Ссылка;
	//	ЗаключениеДоговора.ДоговорКонтрагента 	= ДоговорКонтрагента.Ссылка;
	//КонецЕсли;
	
	мЗаписьРС = РегистрыСведений.ЗаявкиНаОткрытиеМагазина.СоздатьМенеджерЗаписи();
	мЗаписьРС.Магазин = Объект.Ссылка;
	мЗаписьРС.Прочитать();
	Если НЕ мЗаписьРС.Выбран() Тогда
		мЗаписьРС.Магазин = Объект.Ссылка
	КонецЕсли;
	ЗначениеВРеквизитФормы(мЗаписьРС, "ЗаписьОткрытие");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.Объект,
	|	СоответствиеОбъектРольСрезПоследних.Автор
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Магазин) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	РолиПользователейСоставРоли.НомерСтроки = 1";
	Запрос.УстановитьПараметр("Магазин",Объект.Ссылка);
	ТекРоли = Запрос.Выполнить().Выбрать();
	//ТекРоли = РегистрыСведений.СоответствиеОбъектРоль.Выбрать(,,Новый Структура("Объект",Объект.Ссылка));
	Пока ТекРоли.Следующий()Цикл
		Если ТекРоли.ТипРолиID = "SpecialistPoOtkrytiyu" Тогда
			ЗаполнитьЗначенияСвойств(РольКтоОткрыл, ТекРоли);
			КтоОткрыл = ТекРоли.Сотрудник;
		ИначеЕсли ТекРоли.ТипРолиID = "UpravlyayushchiiPoRoznice" Тогда
			ЗаполнитьЗначенияСвойств(РольУправляющий, ТекРоли);
			УправляющийРозницей = ТекРоли.Сотрудник;
		ИначеЕсли ТекРоли.ТипРолиID = "PomoshnikPoRaskrutke" Тогда
			ЗаполнитьЗначенияСвойств(РольПомощникПоРаскрутке, ТекРоли);
			ПомощникПоРаскрутке = ТекРоли.Сотрудник;
		//+++ AK suvv 17.08.2018 ИП-00019353
		ИначеЕсли ТекРоли.ТипРолиID = "RukovoditelPoStroitelstvu" Тогда
			ЗаполнитьЗначенияСвойств(РольРуководительПоСтроительству, ТекРоли);
			РуководительПоСтроительству = ТекРоли.Сотрудник;
		//--- AK suvv
		КонецЕсли
	КонецЦикла;
			
	ТекЛимиты = РегистрыСведений.ЛимитыАренднойПлаты.Выбрать(,,Новый Структура("ТорговаяТочка",Объект.Ссылка),"Убыв");
	Если ТекЛимиты.Следующий() Тогда
		СуммаАрендыПостоянная = ТекЛимиты.СуммаАрендаПостоянная;
		СуммаАрендыПеременная = ТекЛимиты.СуммаАрендаПеременная;
		ЛимитыНачало = ТекЛимиты.МесяцАренды;
	Иначе
		//+++ AK suvv 17.05.2018 ИП-00018710
		СуммаАрендыПостоянная = Объект.СуммаАрендыПостоянная;
		СуммаАрендыПеременная = Объект.СуммаАрендыПеременная;
		//--- AK suvv 
		ЛимитыНачало = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	ТекЦФО=ЦФОпоТТ();
	Пока ТекЦФО.Следующий()Цикл
		Если ТекЦФО.Развитие Тогда
			ЦФО = ТекЦФО.ЦФО;
			Организация = ТекЦФО.Организация;
		Иначе
			Объект.ЦФОПередачи = ТекЦФО.ЦФО;
			ДатаОкончанияПередачи = ТекЦФО.Период;
		КонецЕсли;
	КонецЦикла;
	
	КолПр = РегистрыСведений.КоличествоПродавцовНаТочках.ПолучитьПоследнее(,Новый Структура("ТорговаяТочка",Объект.Ссылка));
	КоличествоПродавцов = КолПр.ВРабочиеДни;
	КоличествоПродавцовВВыходные = КолПр.ВВыходныеДни;
	
	//+++AK GREK 24.11.2017 ИП-00014283.16
	//Если улица не заполнена, попробуем вытащить ее из адреса...
	Если ЗначениеЗаполнено(Объект.Адрес) И НЕ ЗначениеЗаполнено(Объект.Улица) Тогда
		СтрАдреса = Объект.Адрес;
		СтрАдреса = СтрЗаменить(СтрАдреса, Объект.Район.Наименование,"");
		СтрАдреса = СокрЛП(СтрЗаменить(СтрАдреса, Объект.Город.Наименование,""));
		Поз = СтрДлина(СтрАдреса);
		Симв = Сред(СтрАдреса,Поз,1);
		Пока Поз > 0 И Симв <> " " Цикл
			Если Найти("0123456789кс.д",Симв) = 0 Тогда
				Поз = 0;
			Иначе
				Поз = Поз-1;
				Симв = Сред(СтрАдреса,Поз,1);
			КонецЕсли;
		КонецЦикла;
		Если Поз<>0 Тогда
			СтрУлицы = Лев(СтрАдреса, Поз);
			СтрУлицы = СтрЗаменить(СтрУлицы,",","");
			Объект.Улица = СтрУлицы;	
		КонецЕсли;
	КонецЕсли;
	//---AK
	
	//+++AK GREK 30.11.2017 ИП-00015325.02
	Если НЕ ЗначениеЗаполнено(МагазинПередачи) Тогда
		МагазинПередачи = Объект.Ссылка;	
	КонецЕсли;
	//---AK

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовыйОбъект()
	
	Объект.ТипСтруктурнойЕдиницы 	= Перечисления.ТипыСтруктурныхЕдиниц.Розница;	
	Объект.Наименование 			= "<Не установлено>";
	//Объект.СтатусТорговойТочки 		= Перечисления.СтатусыТорговыхТочек.СкороОткрытие;
	Объект.ФорматМагазинаВВ = Перечисления.ФорматМагазинаВВ.Развитие;
	//ЗаключениеДоговора.ТипСтимулаАренды=Перечисления.АК_ТипыЛьготПоАренде.Каникулы;
	Объект.ОбщаяПлощадь=1;
	ЦФО = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_88");
	Объект.Планограмма = Справочники.Планограммы.НайтиПоКоду("00001");
	Объект.ГрафикИнвентаризации = Справочники.ГрафикиИнвентаризацииМагазинов.НайтиПоКоду("00002");
	ЛимитыНачало = НачалоМесяца(ТекущаяДата());
	Объект.НомерТочки = Справочники.СтруктурныеЕдиницы.НомерДляНовойТочки();
	Организация = Справочники.Организации.НайтиПоКоду("000000006").Ссылка;
	Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин");
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	ЗаписьОткрытие.КлючиОтПомещения = ТекПользователь.ФизЛицо;
	Объект.ТорговаяПлощадь = 1;
КонецПроцедуры

//+++ AK suvv 2018.10.05 ИП-00019795
&НаСервере
Процедура ЗаполнитьЗначенияСвойствСЕ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствСтруктурныхЕдиниц.Свойство,
	|	ЗначенияСвойствСтруктурныхЕдиниц.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК ЗначенияСвойствСтруктурныхЕдиниц
	|ГДЕ
	|	ЗначенияСвойствСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НазваниеСвойства = ПланыВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ПолучитьИмяПредопределенного(Выборка.Свойство);
		Если Элементы.Найти(НазваниеСвойства) <> неопределено Тогда 
			 ЭтаФорма[НазваниеСвойства] = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //--- AK suvv

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	//+++AK GREK 12.12.2018 ИП-00020570
	Если Параметры.Свойство("ТолькоЗакрытиеМагазина") Тогда
        ЭтаФорма.ТолькоЗакрытиеМагазина = Параметры.ТолькоЗакрытиеМагазина;
	Иначе
		ЭтаФорма.ТолькоЗакрытиеМагазина = Ложь;
    КонецЕсли;				
	//---AK
	
	//+++ AK suvv 21.05.2018 ИП-00018555
	МассивПравМожетПодтверждатьКатегории = УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.МожетПодтверждатьКатегории, Ложь, ПараметрыСеанса.ТекущийПользователь);	
	ТекПользовательМожетПодтверждатьКатегории = МассивПравМожетПодтверждатьКатегории[0];
	
	СтараяКатегория = Объект.Категория;
	СтараяКатегорияПодсобноеПомещение = Объект.КатегорияПодсобноеПомещение;
	СтараяФактическаяДатаПередачи = Объект.ФактическаяДатаПередачи;
	СтараяФактическаяПлощадь = Объект.ФактическаяПлощадь;
	СтараяОбщаяПлощадь = Объект.ОбщаяПлощадь;
	СтароеЗначениеКатегорииПодтверждены = Объект.КатегорииПодтверждены;
	//--- AK suvv
	//+++AK GREK 02.07.2018 ИП-00018854 
	СтароеЗначениеПринятАХО = Объект.ПринятАХО;
	Если Объект.ПринятАХО Тогда
		ПринятАХО = "Принят";
	Иначе
		ПринятАХО = "Не принят";
	КонецЕсли;
	ЭтаФорма.Элементы.АктыВПК.ОтборСтрок = Новый ФиксированнаяСтруктура("Назначение", "АктВПК");
	//---AK
	
	НовыйЭлемент = Объект.Ссылка.Пустая();
	Если НовыйЭлемент Тогда
		ЗаполнитьНовыйОбъект();
		Элементы.УстановитьНаименование.Доступность = Истина;
		Элементы.УстановитьНомер.Доступность = Истина;
	Иначе
		ВыбратьДанныеПоОбъекту();
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	СписокКРассылке = "Список №1";
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	// табличные части формы "СписокФайлов", "ФотоДо" и "ФотоПосле" заполнялись динамически по регистру сведений АК_ФайлыМагазинов
	// теперь файлы будут храниться в табличной части "Файлы" справочника; табличные части будут отображать данные этой ТЧ с отбором по колонке "Назначение"
	////Раков П.С. Вывод списка файлов++
	//СписокФайлов.Параметры.УстановитьЗначениеПараметра("МагазинДинСписок", Объект.Ссылка); 	
	////Раков -- 
	//ФотоДо.Параметры.УстановитьЗначениеПараметра("МагазинДинСписок", Объект.Ссылка);
	//ФотоПосле.Параметры.УстановитьЗначениеПараметра("МагазинДинСписок", Объект.Ссылка);
	ЭтаФорма.Элементы.СписокФайлов.ОтборСтрок = Новый ФиксированнаяСтруктура("Назначение", "Сканы");
	ЭтаФорма.Элементы.ФотоДо.ОтборСтрок       = Новый ФиксированнаяСтруктура("Назначение", "ФотоДо");
	ЭтаФорма.Элементы.ФотоПосле.ОтборСтрок    = Новый ФиксированнаяСтруктура("Назначение", "ФотоПосле");
	//---АК SUVV	
	//+++AK suvv 03.04.2018 ИП-00017689.02
	ЭтаФорма.Элементы.ФайлыРасстановкиОборудованияПредварительно.ОтборСтрок  = Новый ФиксированнаяСтруктура("Назначение", "СхРасНач");
	ЭтаФорма.Элементы.ФайлыРасстановкиОборудованияОкончательно.ОтборСтрок    = Новый ФиксированнаяСтруктура("Назначение", "СхРасКон");
	//---AK
	
	Управляющий = Объект.ПомощникУправляющего.Родитель;	
	//+++AK GREK 23.10.2017 ИП-00014283.13
	ПолучитьГородСокрНаименование();
	//---AK
	
	//+++AK GREK 24.10.2017 ИП-00014283.14
	Если Нрег(Лев(Объект.КорпусСтроения,3)) = " к." Тогда
		НомерКорпуса= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-3));
	ИначеЕсли Нрег(Лев(Объект.КорпусСтроения,5)) = " стр." Тогда
		НомерСтроения= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-5));
	ИначеЕсли Нрег(Лев(Объект.КорпусСтроения,1)) = "к" Тогда
		НомерКорпуса= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-1));
	ИначеЕсли Нрег(Лев(Объект.КорпусСтроения,1)) = "с" Тогда
		НомерСтроения= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-1));
	КонецЕсли;
	//---AK
	
	//+++ AK suvv 2018.10.05 ИП-00019795
	ЗаполнитьЗначенияСвойствСЕ();
	//--- AK suvv
	
	//+++AK suvv 03.04.2018 ИП-00017689.02
	////+++AK GREK 18.01.2018 ИП-00017689      
	//БылИзмененФайлРасстановкиИсходный = Ложь;
	//БылИзмененФайлРасстановки = Ложь;
	////---AK
	//---AK suvv
КонецПроцедуры

//+++AK GREK 23.10.2017 ИП-00014283.13
&НаКлиенте
Процедура ОбновитьГородСокрНаименование()
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ПолучитьГородСокрНаименование();
		Если НЕ ЗначениеЗаполнено(ГородСокрНаименование) Тогда
			Элементы.ГородСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьГородСокрНаименование()
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ГородСокрНаименование = Объект.Город.СокращенноеНаименование;
	КонецЕсли;
КонецПроцедуры

//+++АК SUVV 2018.03.05 ИП-00017818
&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(ВыбОбъект, НаименованиеРеквизита)
	
	Возврат ВыбОбъект[НаименованиеРеквизита];
	 
КонецФункции //---АК SUVV

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ОбновитьГородСокрНаименование();
		//+++АК SUVV 2018.03.05 ИП-00017818
		//Если НЕ ЗначениеЗаполнено(ГородСокрНаименование) И НЕ Объект.Город.Код = "0001" Тогда
		Если НЕ ЗначениеЗаполнено(ГородСокрНаименование) И НЕ ПолучитьРеквизитОбъекта(Объект.Город, "Код") = "0001" Тогда
		//---АК SUVV	
			Элементы.ГородСокращенноеНаименование.Видимость	= Истина;
			//+++AK GREK 08.01.2018 ИП-000175549     
			ГородСокрНаименование = Лев(Объект.Город,3);
			//---AK
		Иначе
			Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГородСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
	
	//+++AK suvv 03.04.2018 ИП-00017788.01
	УстановитьСведенияОРайонеПоГороду();
	//---AK
	
КонецПроцедуры

&НаСервере
Процедура ГородСокращенноеНаименованиеПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ОбГород = Объект.Город.ПолучитьОбъект();
		ОбГород.СокращенноеНаименование = ГородСокрНаименование;
		ОбГород.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГородСокращенноеНаименованиеПриИзменении(Элемент)
	ГородСокращенноеНаименованиеПриИзмененииНаСервере();
КонецПроцедуры
//---AK

&НаСервере
Процедура ЗаполнитьНовыйДоговор()
	ДоговорКонтрагента.АрендныйДоговор=Истина;
	ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ДоговорКонтрагента.ТипДоговора=Перечисления.ТипыДоговоровСПоставщиком.Аренда;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	УстановитьПривилегированныйРежим(Истина);
	
	//Если НЕ ОбъектАренды.Ссылка.Пустая()
	//		ИЛИ ОбъектАренды.ЗначениеХарактеристики <> 0 Тогда
	//	
		//ОбъектАренды.СтруктурнаяЕдиница = ТекущийОбъект.Ссылка;
		//Если ОбъектАренды.Наименование="" Тогда
		//	ОбъектАренды.Наименование = Объект.Наименование
		//КонецЕсли;
		//ОбъектАренды.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кв.м");
		//мОбъектАренды = РеквизитФормыВЗначение("ОбъектАренды");
		//Попытка
		//	мОбъектАренды.Записать();
		//	ЗначениеВРеквизитФормы(мОбъектАренды,"ОбъектАренды");
		//Исключение
		//	Отказ = Истина;
		//	Возврат
		//КонецПопытки;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(РольКтоОткрыл.РольПользователя)
	//		ИЛИ ЗначениеЗаполнено(РольКтоОткрыл.Объект) Тогда
	//	РольКтоОткрыл.Объект 	= ТекущийОбъект.Ссылка;
	//	РольКтоОткрыл.ТипРоли 	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("SpecialistPoOtkrytiyu");
	//	РольКтоОткрыл.ТипРолиID = "SpecialistPoOtkrytiyu";
	//	Если НЕ ЗначениеЗаполнено(РолькТоОткрыл.Период) Тогда
	//		РольКтоОткрыл.Период = ТекущаяДата()
	//	КонецЕсли;
	//	мРольКтоОткрыл = РеквизитФормыВЗначение("РольКтоОткрыл");
	//	Попытка
	//		мРольКтоОткрыл.Записать();
	//		ЗначениеВРеквизитФормы(мРольКтоОткрыл,"РольКтоОткрыл");
	//	Исключение
	//		Отказ = Истина;
	//		Возврат
	//	КонецПопытки
	//КонецЕсли;
	//	
	//Если ЗначениеЗаполнено(РольУправляющий.РольПользователя)
	//		ИЛИ ЗначениеЗаполнено(РольУправляющий.Объект) Тогда
	//	РольУправляющий.Объект 	= ТекущийОбъект.Ссылка;
	//	РольУправляющий.ТипРоли 	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice");
	//	РольУправляющий.ТипРолиID = "UpravlyayushchiiPoRoznice";
	//	Если НЕ ЗначениеЗаполнено(РольУправляющий.Период) Тогда
	//		РольУправляющий.Период = ТекущаяДата()
	//	КонецЕсли;
	//	мРольУправляющий = РеквизитФормыВЗначение("РольУправляющий");
	//	Попытка
	//		мРольУправляющий.Записать();
	//		ЗначениеВРеквизитФормы(мРольУправляющий,"РольУправляющий");
	//	Исключение
	//		Отказ = Истина;
	//		Возврат
	//	КонецПопытки
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(РольПомощникПоРаскрутке.РольПользователя)
	//		ИЛИ ЗначениеЗаполнено(РольПомощникПоРаскрутке.Объект) Тогда
	//	РольПомощникПоРаскрутке.Объект 	= ТекущийОбъект.Ссылка;
	//	РольПомощникПоРаскрутке.ТипРоли 	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("PomoshnikPoRaskrutke");
	//	РольПомощникПоРаскрутке.ТипРолиID = "PomoshnikPoRaskrutke";
	//	Если НЕ ЗначениеЗаполнено(РольПомощникПоРаскрутке.Период) Тогда
	//		РольПомощникПоРаскрутке.Период = ТекущаяДата()
	//	КонецЕсли;
	//	мРольПомощникПоРаскрутке = РеквизитФормыВЗначение("РольПомощникПоРаскрутке");
	//	Попытка
	//		мРольПомощникПоРаскрутке.Записать();
	//		ЗначениеВРеквизитФормы(мРольПомощникПоРаскрутке,"РольПомощникПоРаскрутке");
	//	Исключение
	//		Отказ = Истина;
	//		Возврат
	//	КонецПопытки
	//КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьТекущийЭтап()
	Если ЗаписьОткрытие.Этап>5 Тогда
		Возврат
	КонецЕсли;
	Для К = ЗаписьОткрытие.Этап По 5 Цикл
		Если ПроверитьЭтап(К)Тогда
			ЗаписьОткрытие.Этап=К+1
		Иначе
			Прервать
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКоординаты(Команда)
	Если СокрЛП(Объект.Адрес)="" Тогда
		Сообщить("Не заполнен адрес, невозможно определить кооординаты");
		Возврат
	КонецЕсли;
	
	Если КартаОткрыта Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
	ПараметрыПодбора.Вставить("Режим"				, "РежимАдресКонтрагента");
	ПараметрыПодбора.Вставить("Режим2"				, "Диалог");
	ПараметрыПодбора.Вставить("Наименование"		, Объект.Наименование);
	ПараметрыПодбора.Вставить("Ссылка"				, Объект.Ссылка);
	СтрокаКоординат = "";
	ПараметрыПодбора.Вставить("СтрокаКоординат"		, СтрокаКоординат);
	ПараметрыПодбора.Вставить("ОпределитьРасположение",Истина);
	ПараметрыПодбора.Вставить("КоординатыОпределены", Ложь);
	
	Если НЕ ПустаяСтрока(Объект.Адрес) Тогда
		//+++AK GREK 09.11.2017 ИП-00014283.15
		//Попросили убрать город из адреса... Но для поиска он нужен!
		АдресДляОпределенияКоординат = Объект.Адрес;
		Если Не Объект.Город.Пустая() Тогда
			//+++АК SUVV 2018.03.05 ИП-00017818
			//Если Не Объект.Город.Код = "0001" Тогда	
			//	АдресДляОпределенияКоординат = Объект.Город.Наименование+", " + АдресДляОпределенияКоординат;
			Если Не ПолучитьРеквизитОбъекта(Объект.Город, "Код") = "0001" Тогда
				АдресДляОпределенияКоординат = ПолучитьРеквизитОбъекта(Объект.Город, "Наименование") + ", " + АдресДляОпределенияКоординат;
			//---АК SUVV 	
			КонецЕсли;
		Иначе
			//+++АК SUVV 2018.03.05 ИП-00017818
			//АдресДляОпределенияКоординат = Объект.Регион.Наименование +", " + АдресДляОпределенияКоординат;
			АдресДляОпределенияКоординат = ПолучитьРеквизитОбъекта(Объект.Регион, "Наименование") +", " + АдресДляОпределенияКоординат;
			//---АК SUVV
		КонецЕсли;
		//---AK
		ПараметрыПодбора.Вставить("Адрес", АдресДляОпределенияКоординат);//ПараметрыПодбора.Вставить("Адрес", Строка(Объект.Город) + " " + Объект.Адрес);
	КонецЕсли;

	ОткрытаКарта = Истина;
	ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПервыеЦифры(Стр)
	Для К=1 По СтрДлина(Стр) Цикл
		Если Найти("01234567890",Сред(Стр,К,1))=0 Тогда
			Возврат Лев(Стр,К-1)
		КонецЕсли;
	КонецЦикла;
	Возврат Стр
КонецФункции

&НаКлиенте
Функция НазваниеГорода(Стр)
	//Слова = ОбщегоНазначения.РазложитьСтрокуВМассивСлов(Стр);
	//Результат = "";
	//Для Каждого Слово из Слова Цикл
	//	Если Найти("гдпгтпоср",Слово)=0 Тогда
	//		Результат = Результат+Слово
	//	КонецЕсли
	//КонецЦикла;
	Результат = Город;
	Возврат Результат
КонецФункции

&НаКлиенте
Процедура УстановитьНаименование(Команда)
	Если (СокрЛП(Объект.Улица)="" или СокрЛП(Объект.Дом)="") 
	//+++ AK suvv 2018.10.02 ИП-00020007
	и Объект.ТипРозничнойТочки <> ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Вкусомат") 
	//--- AK suvv 
	Тогда
		Предупреждение("Для выполнения команды должны быть выбраны значения Улица и Дом");
		Возврат
	КонецЕсли;
	
	//Первоначальное заполнение реквизита Город
	Если Город = "" и ЗначениеЗаполнено(Объект.Город) Тогда
		Город = СтрЗаменить(Объект.Город.Наименование,"г. ","");
	КонецЕсли;
	
	//+++AK GREK 23.10.2017 ИП-00014283.13
	Если ЗначениеЗаполнено(ГородСокрНаименование) И НЕ Город = "Москва" Тогда
		ОбозначениеГород = ГородСокрНаименование + "_";	
	Иначе	
		Если Город = "Москва" или Город="" Тогда
			ОбозначениеГород = ""
		Иначе
			ОбозначениеГород = Лев(НазваниеГорода(Объект.Город.Наименование),3) + "_";
		КонецЕсли;
	КонецЕсли;
	//---AK
	//+++AK GREK 09.11.2017 ИП-00014283.15
	Если ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
		ОбозначениеУлица = Объект.УлицаСокрНаименование;	
	Иначе	
		ОбозначениеУлица = УлицаБезТипа(Объект.Улица);
	КонецЕсли;

	//---AK

	Объект.Наименование = Формат(Объект.НомерТочки,"ЧГ=0") +?(Объект.ТипРозничнойТочки=ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин"),"М","")+ "_"+ОбозначениеГород + ОбозначениеУлица + ПервыеЦифры(Объект.Дом);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент) 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ДоговорКонтрагентаСканДоговора.Видимость = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
	Элементы.ОткрытьФайл.Видимость = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
	Элементы.ЗаписьОткрытиеСхемаРаботыЗазывалы.Видимость = ЗначениеЗаполнено(ЗаписьОткрытие.СхемаРаботыЗазывалы);
	Элементы.ОткрытьСхему.Видимость= ЗначениеЗаполнено(ЗаписьОткрытие.СхемаРаботыЗазывалы);
	
	СписокОграничений = ПолучитьОграниченияДоступаКПолям(); 
	Для каждого Ограничение из СписокОграничений Цикл
		Элементы[Ограничение.Ключ].ТолькоПросмотр = Ограничение.Значение;
	КонецЦикла;
	
	//+++AK GREK 30.11.2017 ИП-00017189
	СписокОграниченийВидимости = ПолучитьОграниченияВидимостиПолей(); 
	Для каждого Ограничение из СписокОграниченийВидимости Цикл
		Элементы[Ограничение.Ключ].Видимость = Ограничение.Значение;
	КонецЦикла;
	//---AK
	
	//+++AK GREK 18.01.2018 ИП-00017689
	//Отбор = Новый Структура;
	//Отбор.Вставить("КлючОбъекта","Справочник.СтруктурныеЕдиницы.Форма.НовыйМагазин");
	//Отбор.Вставить("Пользователь",ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(Отбор);
	//Пока ВыборкаНастроек.Следующий() Цикл
	//	Если Найти(ВыборкаНастроек.КлючНастроек, "_ЗапретРедактирования") <> 0 Тогда
	//		Имя = СтрЗаменить(ВыборкаНастроек.КлючНастроек, "_ЗапретРедактирования","");
	//		Попытка
	//			Элементы[Имя].ТолькоПросмотр = ВыборкаНастроек.Настройки;
	//		Исключение
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;	
	//---AK

	//+++AK GREK 24.11.2017 ИП-00014283.16
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		ОбновитьУлицаСокрНаименование();
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
	//---AK
	
	//+++AK GREK 08.01.2018 ИП-000175549
	Если ЗначениеЗаполнено(Объект.Адрес) Тогда
		Для каждого Стр из Элементы.ТипУлицы.СписокВыбора Цикл
			Если Найти(Объект.Адрес,Стр.Значение)>0 Тогда
				ТипУлицы = Стр.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//---AK	
	
	//+++AK suvv 03.04.2018 ИП-00017689.02
	Если Объект.ГотовностьМагазина Тогда 
		Элементы.ГотовностьМагазина.Доступность = Ложь;
	КонецЕсли;
	//--- AK
	
	//+++ AK suvv 2018.09.05 ИП-00019700
	ВидимостьПлощадиСубаренда            = ?(Объект.ПлощадьСубаренды <> 0, Истина, Ложь);		
	НаличиеПлощадиСубаренды              = ВидимостьПлощадиСубаренда;
	Элементы.ПлощадьСубаренды1.Видимость = ВидимостьПлощадиСубаренда;
	//--- AK suvv

	//+++ AK suvv 21.05.2018 ИП-00018555
	УстановитьДоступностьЭлементовКатегории();
	//--- AK suvv
	
	//+++ AK suvv 2018.09.05 ИП-00019377 - АКТ ВПК сразу должен отображаться на форме
	////+++AK GREK 02.07.2018 ИП-00018854
	//Если НЕ ЗначениеЗаполнено(Объект.ДатаПередачиАХО) Тогда
	//	Элементы.ПринятАХО.Видимость = Ложь;
	//	Элементы.ГруппаАктыВПК.Видимость = Ложь;
	//Иначе
	//	Если Объект.ПринятАХО Тогда
	//		Элементы.ГруппаАктыВПК.Видимость = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	////---AK	
	//--- AK suvv
	
	//+++ AK suvv 12.07.2018 ИП-00019053 
	УстановитьАвторовРеквизитов();
	//--- AK suvv
КонецПроцедуры

//+++ AK suvv 12.07.2018 ИП-00019053 
&НаСервере
Процедура УстановитьАвторовРеквизитов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияИзмененияРеквизитовСЕ.Реквизит,
	|	ИсторияИзмененияРеквизитовСЕ.АвторИзменений
	|ИЗ
	|	РегистрСведений.ИсторияИзмененияРеквизитовСЕ КАК ИсторияИзмененияРеквизитовСЕ
	|ГДЕ
	|	ИсторияИзмененияРеквизитовСЕ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НадписьАвторРеквизита = Выборка.Реквизит + "Автор";
		Если Элементы.Найти(НадписьАвторРеквизита) <> неопределено Тогда
			Элементы[НадписьАвторРеквизита].Заголовок = "Автор:" + Выборка.АвторИзменений;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
//+++AK GREK 30.11.2017 ИП-00017189
Функция ПолучитьОграниченияВидимостиПолей()
	Рез = Новый Структура;
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	Если Объект.МагазинПередан ИЛИ СокрЛП(ТекПользователь.ФизЛицо.Должность) = "Территориальный управляющий" Тогда
		Рез.Вставить("МагазинПередан", Истина);	
		Рез.Вставить("ЗапросПодтвержденияПередачи", Ложь);	
	Иначе
		Рез.Вставить("МагазинПередан", Ложь);	
		Рез.Вставить("ЗапросПодтвержденияПередачи", Истина);	
	КонецЕсли;
	
	//+++AK GREK 12.12.2018 ИП-00020570
	Если ТолькоЗакрытиеМагазина Тогда
		Рез.Вставить("Группа19", Ложь);
		Рез.Вставить("Группа20", Ложь);
		Рез.Вставить("Этап7", Ложь);
		Рез.Вставить("Группа_4", Ложь);
	Иначе
		Рез.Вставить("Группа36", Ложь);
	КонецЕсли;
	//---AK
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция ПолучитьОграниченияДоступаКПолям()
	
	//+++АК suvv 2018.03.05 ИП-00017818
	Возврат Справочники.СтруктурныеЕдиницы.ПолучитьОграниченияДоступа();
	//--- AK suvv
	
КонецФункции

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура УстановитьДоступностьЭлементовКатегории()
	
	Если ТекПользовательМожетПодтверждатьКатегории Тогда
		Если (не Объект.КатегорииПодтверждены или Объект.КатегорииПодтверждены и Объект.КатегорииПодтвержденыАвтор = ТекПользователь) и 
			(не ЗначениеЗаполнено(Объект.КатегорияАвтор) или Объект.КатегорияАвтор <> ТекПользователь) и (не ЗначениеЗаполнено(Объект.КатегорияПодсобногоПомещенияАвтор) или Объект.КатегорияПодсобногоПомещенияАвтор <> ТекПользователь) Тогда  
			Элементы.КатегорииПодтверждены.Доступность = Истина;
		Иначе
			Элементы.КатегорииПодтверждены.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.КатегорииПодтверждены.Доступность = Ложь;	
	КонецЕсли;
	
	Элементы.Категория.Доступность = не Объект.КатегорииПодтверждены;
	Элементы.КатегорияПодсобноеПомещение.Доступность = не Объект.КатегорииПодтверждены;
	
КонецПроцедуры //--- AK suvv

&НаСервере
Процедура УстановитьНомерНаСервере()
	
	//НачатьТранзакцию();
	
	Объект.НомерТочки = Справочники.СтруктурныеЕдиницы.НомерДляНовойТочки();
	//мОбъект = РеквизитФормыВЗначение("Объект");
	//Попытка 
	//	мОбъект.Записать();
	//	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	//Исключение
	//	ОтменитьТранзакцию();
	//	Возврат
	//КонецПопытки;
	//
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНомер(Команда)
	
	//Если Вопрос("При установке номера объект будет записан. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//
	УстановитьНомерНаСервере();
	УстановитьНаименование(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Функция УлицаБезТипа(Улица)
	Результат="";
	ТекстОбозначения = "аллея, бульвар, линия, набережная, переулок, площадь, проезд, просек, проспект, спуск, тупик, улица, шоссе";
	НеОтображать = "улица, переулок";
	Слова = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Улица," ");
	Для Каждого Слово из Слова Цикл
		Если Найти(ТекстОбозначения,НРег(Слово))=0 Тогда
			Результат = Результат+Слово
		ИначеЕсли Найти(НеОтображать,НРег(Слово))=0 Тогда
			Результат = Результат+ТРег(Слово)
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСведенияОРайоне()
	СведенияОРайоне = "";
	Если АО<>"" Тогда
		мАО = СокрЛП(СтрЗаменить(АО,"административный",""));
		мАО = СокрЛП(СтрЗаменить(мАО,"округ",""));
		Объект.АдминистративныйОкруг=Справочники.АдминистративныеОкруга.НайтиПоНаименованию(мАО);
		СведенияОРайоне = АО+", ";
		Если НЕ ЗначениеЗаполнено(Объект.АдминистративныйОкруг) Тогда
			Сообщить("В справочнике Административные округа нет элемента "+АО);
		КонецЕсли;
	Иначе
		Сообщить("Административный округ """+АО+""" не определен");
	КонецЕсли;
	Если Район<>"" Тогда
		Объект.Район=Справочники.Районы.НайтиПоНаименованию(Лев(СокрЛП(СтрЗаменить(Район,"район","")),25));
		СведенияОРайоне = СведенияОРайоне+Район+". ";
		Если НЕ ЗначениеЗаполнено(Объект.Район) Тогда
			//Возможно другой порядок слов. Попробуем найти
			Запрос = Новый Запрос;
			ТекстЗапроса =  "ВЫБРАТЬ
			                |	Районы.Ссылка
			                |ИЗ
			                |	Справочник.Районы КАК Районы";
			Запрос.Текст = ТекстЗапроса + " ГДЕ Районы.Наименование ПОДОБНО ""%" 
			                + СтрЗаменить(СокрЛП(СтрЗаменить(Район,"район",""))," ","%"" И Районы.Наименование ПОДОБНО ""%")
							+ "%"""; 
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() = 1 Тогда
				Объект.Район=Рез[0].Ссылка;
			Иначе
				Сообщить("В справочнике Районы нет элемента "+Район);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить("Район """+Район+""" не определен");
	КонецЕсли;
	Если Метро<>"" И Объект.Регион.Код = 77 Тогда
		СведенияОРайоне = СведенияОРайоне+Метро;
		мМетро = СокрЛП(СтрЗаменить(Метро,"метро",""));
		мМетро = СокрЛП(СтрЗаменить(мМетро,"станция",""));
		СтанцияМетро=Справочники.СтанцииМетро.НайтиПоНаименованию(СокрЛП(СтрЗаменить(мМетро,"метро","")));
		Если Не СтанцияМетро.Пустая() Тогда
			Объект.СтанцииМетро.Очистить();
			СтрокаСтМетро = Объект.СтанцииМетро.Добавить();
			СтрокаСтМетро.Метро = СтанцияМетро
		Иначе
			Сообщить("В справочнике Станции метро нет станции "+Метро);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
			И ИсточникВыбора.ИмяФормы = "Обработка.АК_ОтображениеНаКарте.Форма.Форма" Тогда
		ОбработатьГеоЛокацию(ВыбранноеЗначение);
		ОткрытаКарта = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьГеоЛокацию(ВыбранноеЗначение)
	Если ВыбранноеЗначение.КоординатыОпределены Тогда
		К = Найти(ВыбранноеЗначение.СтрокаКоординат, ",");
		Объект.КоординатыШирота		= Число(Лев(ВыбранноеЗначение.СтрокаКоординат , К - 1));
		Объект.КоординатыДолгота	= Число(Сред(ВыбранноеЗначение.СтрокаКоординат, К + 1));
		Город 	= ВыбранноеЗначение.Город;
		Если УлицаБезТипа(ВыбранноеЗначение.Улица)<>Объект.Улица или ВыбранноеЗначение.Дом<>Объект.Дом Тогда
			Если Объект.Улица = "" и Объект.Дом = "" Тогда
				Объект.Улица 	= УлицаБезТипа(ВыбранноеЗначение.Улица);
				Объект.Дом 	= ВыбранноеЗначение.Дом;
			Иначе
				//+++AK GREK 24.11.2017 ИП-00014283.16
				//Попросили убрать...
				//Если Вопрос("Установить новые значения Улица: "+ВыбранноеЗначение.Улица+", Дом: "+ВыбранноеЗначение.Дом+"?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				//	Объект.Улица 	= УлицаБезТипа(ВыбранноеЗначение.Улица);
				//	Объект.Дом 	= ВыбранноеЗначение.Дом;
				//КонецЕсли;
				//---AK
			КонецЕсли
		КонецЕсли;
		Если Строка(Объект.Регион) = "Москва" Тогда
			Район = ВыбранноеЗначение.Район;
			АО = ВыбранноеЗначение.Округ;
			Если Найти(Район, "округ") > 0 Тогда
				 Район = ВыбранноеЗначение.Округ;
				 АО = ВыбранноеЗначение.Район;
			КонецЕсли;
			Метро = ВыбранноеЗначение.Метро;
			УстановитьСведенияОРайоне();
		КонецЕсли;
		Если Объект.Наименование="<Не установлено>" Или СтрДлина(Объект.Наименование)<9 Тогда
			УстановитьНаименование(Неопределено);
		КонецЕсли;
		ПроверитьСовпадениеКоординат(Неопределено);
	КонецЕсли;
	
	Если Строка(Объект.Регион) = "Москва" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Район) Тогда
			Сообщить("Не определен район! Укажите его вручную");
			Элементы.Группа13.Видимость = Истина;
			Элементы.Группа12.Видимость = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.АдминистративныйОкруг) ТОгда
			Сообщить("Не определен административный округ! Укажите его вручную");
			Элементы.Группа13.Видимость = Истина;
			Элементы.Группа12.Видимость = Истина;
		КонецЕсли;
		Если Объект.СтанцииМетро.Количество() = 0 ТОгда
			Сообщить("Не определены ближайшие станции метр! Укажите их вручную");
			Элементы.Группа13.Видимость = Истина;
			Элементы.Группа12.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьСовпадениеКоординатНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	, Объект.Ссылка);
	Запрос.УстановитьПараметр("Широта"	, Объект.КоординатыШирота);
	Запрос.УстановитьПараметр("Долгота"	, Объект.КоординатыДолгота);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	(СтруктурныеЕдиницы.КоординатыШирота - &Широта) * (СтруктурныеЕдиницы.КоординатыШирота - &Широта) + (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) * (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) КАК Расстояние,
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.Город,
	//|	СтруктурныеЕдиницы.Город.Наименование + "" "" + СтруктурныеЕдиницы.Адрес КАК Адрес,
	|	СтруктурныеЕдиницы.Адрес КАК Адрес,
	|	СтруктурныеЕдиницы.КоординатыШирота КАК Широта,
	|	СтруктурныеЕдиницы.КоординатыДолгота КАК Долгота
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка <> &Ссылка
	|	И (СтруктурныеЕдиницы.КоординатыШирота - &Широта) * (СтруктурныеЕдиницы.КоординатыШирота - &Широта) + (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) * (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) < 0.00001
	|
	|УПОРЯДОЧИТЬ ПО
	|	Расстояние";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//
	БлизкиеТочки.Загрузить(ТЗ);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовпадениеКоординат(Команда)
	
	ПроверитьСовпадениеКоординатНаСервере();
	
	Элементы.БлизкиеТочки.Видимость = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьСканДоговораНаСервере(ФайлСкана)
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = "PDF";
	Файл.Наименование = "Открытие магазина, договор";
	Файл.ИмяПодкаталога = "Заявки на открытие";
	Файл.Записать();
	ФайлСкана.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	Возврат Файл.Ссылка
КонецФункции

//Раков П.С. Вывод списка файлов++
&НаКлиенте
Процедура ЗагрузитьПроизвольныйФайл(Команда)
	Если Команда.Имя = "ЗагрузитьПроизвольныйФайл" Тогда
		Назначение = "Сканы";
	ИначеЕсли Команда.Имя = "ЗагрузитьФотоДо" Тогда
		Назначение = "ФотоДо";
	ИначеЕсли Команда.Имя = "ЗагрузитьФотоПосле" Тогда
		Назначение = "ФотоПосле";
	//+++AK GREK 02.07.2018 ИП-00018854    	
	ИначеЕсли Команда.Имя = "ЗагрузитьАктВПК" Тогда 
		Назначение = "АктВПК";
	//---AK
	Иначе
		//+++АК SUVV 2018.03.05 ИП-00017818
		//Назначение = "";
		Назначение = "Другое";
		//---АК SUVV
	КонецЕсли;
	
	//+++АК SUVV 2018.03.06 ИП-00017818
	#Если ВебКлиент Тогда 
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("Назначение", Назначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПроизвольныйФайлЗавершение", ЭтаФорма, СтруктураДополнительныхПараметров);
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .png)|*.pdf;*.jpeg;*.jpg;*.png";
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
		
	#Иначе
	//---АК SUVV
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .jpg, .rar)|*.pdf;*.jpeg;*.jpg;*.rar";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ФайлСкана = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
			СтруктураФайла = РазобратьИмяФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
			ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла, Назначение, Ложь);
			Элементы.РазослатьУведомления.Видимость = Истина;
		КонецЕсли;
		
	//+++АК SUVV 2018.03.05 ИП-00017818
	#КонецЕсли
	
	//объекты формы изменились - их теперь не нужно обновлять
	//Если Команда.Имя = "ЗагрузитьПроизвольныйФайл" Тогда
	//	Элементы.СписокФайлов.Обновить();
	//ИначеЕсли Команда.Имя = "ЗагрузитьФотоДо" Тогда
	//	Элементы.ФотоДо.Обновить();
	//ИначеЕсли Команда.Имя = "ЗагрузитьФотоПосле" Тогда
	//	Элементы.ФотоПосле.Обновить();
	//КонецЕсли;
	//---АК SUVV
КонецПроцедуры

//+++АК SUVV 2018.03.05 ИП-00017818
&НаСервере
Процедура СоздатьПроизвольныеФайлыНаСервере(ФайлСкана, ИмяФайла, Назначение)
	
	СтруктураФайла = РазобратьИмяФайла(ИмяФайла);
	ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла, Назначение, Истина);
	
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.06 ИП-00017818	
&НаКлиенте
Процедура ЗагрузитьПроизвольныйФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ПомещенныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	Назначение = ДополнительныеПараметры.Назначение;
	Для Каждого ПомещенныйФайл из ПомещенныеФайлы Цикл
		ИмяФайла = ПомещенныйФайл.Имя;
		РасширениеФайла = Сред(ИмяФайла, Найти(ИмяФайла, ".") + 1);
		Адрес = ПомещенныйФайл.Хранение;
		СоздатьПроизвольныеФайлыНаСервере(Адрес, ИмяФайла, Назначение);	
	КонецЦикла;
	Элементы.РазослатьУведомления.Видимость = Истина;
	
КонецПроцедуры //---АК SUVV

&НаКлиенте
Процедура УдалитьПроизвольныйФайл(Команда)
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	Если Команда.Имя = "УдалитьПроизвольныйФайл" Тогда
		ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	ИначеЕсли Команда.Имя = "УдалитьФотоДо" Тогда
		ТекДанные = Элементы.ФотоДо.ТекущиеДанные;
	ИначеЕсли Команда.Имя = "УдалитьФотоПосле" Тогда
		ТекДанные = Элементы.ФотоПосле.ТекущиеДанные;
	//+++AK GREK 02.07.2018 ИП-00018854    	
	ИначеЕсли Команда.Имя = "УдалитьАктВПК" Тогда
		ТекДанные = Элементы.АктыВПК.ТекущиеДанные;
	//---AK GREK
	//+++AK suvv 03.04.2018 ИП-00017689.02	
	ИначеЕсли Команда.Имя = "УдалитьСхемуРасстановкиПредварительно" Тогда
		ТекДанные = Элементы.ФайлыРасстановкиОборудованияПредварительно.ТекущиеДанные;		
	ИначеЕсли Команда.Имя = "УдалитьСхемуРасстановкиОкончательно" Тогда
		ТекДанные = Элементы.ФайлыРасстановкиОборудованияОкончательно.ТекущиеДанные;
	//---AK suvv	
	КонецЕсли;
	
	Если ТекДанные <> неопределено Тогда 
		ФайлКУдалению = ТекДанные.Файл;
		Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
			УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению);
		КонецЕсли;
	Иначе
		Сообщить("Выберите файл для удаления.");
	КонецЕсли;
	
	//Если Команда.Имя = "УдалитьПроизвольныйФайл" Тогда
	//	ФайлКУдалению = Элементы.СписокФайлов.ТекущаяСтрока;
	//ИначеЕсли Команда.Имя = "УдалитьФотоДо" Тогда
	//	ФайлКУдалению = Элементы.ФотоДо.ТекущаяСтрока;
	//ИначеЕсли Команда.Имя = "УдалитьФотоПосле" Тогда
	//	ФайлКУдалению = Элементы.ФотоПосле.ТекущаяСтрока;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ФайлКУдалению) тогда
	//	Попытка
	//		УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению);
	//	Исключение
	//	КонецПопытки;
	//	Если Команда.Имя = "УдалитьПроизвольныйФайл" Тогда
	//		Элементы.СписокФайлов.Обновить();
	//	ИначеЕсли Команда.Имя = "УдалитьФотоДо" Тогда
	//		Элементы.ФотоДо.Обновить();
	//	ИначеЕсли Команда.Имя = "УдалитьФотоПосле" Тогда
	//		Элементы.ФотоПосле.Обновить();
	//	КонецЕсли;	
	//КонецЕсли;
	//---АК SUVV 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению)
		
	Путь = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлКУдалению.Ссылка);
	КодФайла = ФайлКУдалению.Код;
	УдалитьФайлы(Путь);
	//пока непонятн
	//Если Объект.Ссылка.Пустая() Тогда
	//	СписокКодовФайлов.Удалить(СписокКодовФайлов.НайтиПоЗначению(КодФайла));
	//КонецЕсли;
	
	МассивСтрокКУдалению = Объект.Файлы.НайтиСтроки(Новый Структура("Файл", ФайлКУдалению));
	Для Каждого СтрокаКУдалению из МассивСтрокКУдалению Цикл
		Объект.Файлы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ФайлКУдалениюОбъект = ФайлКУдалению.ПолучитьОбъект();
	Попытка
		ФайлКУдалениюОбъект.Удалить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазобратьИмяФайла(Путь)
	
	СтруктураИмени = Новый Структура;
    к = 1;
	Пока не Лев(Прав(Путь,к),1) = "." и не к = СтрДлина(Путь) цикл
		к = к + 1;	
	КонецЦикла;	
	
	СтруктураИмени.Вставить("Расширение", (ВРег(Прав(Путь,к-1))));
	
	Пока не Лев(Прав(Путь,к),1) = "\" и не к = СтрДлина(Путь) цикл
		к = к + 1;	
	КонецЦикла;	

	СтруктураИмени.Вставить("Наименование", (Прав(Путь,к-1)));
	Возврат СтруктураИмени;
	
КонецФункции // РазобратьИмяФайла()

&НаСервере
//+++АК SUVV 2018.03.05 ИП-00017818
//Процедура ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла, Назначение = "")
Процедура ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла, Назначение = "Другое", ЭтоВебКлиент)
	
	Если ЭтоВебКлиент Тогда 
		ФайлСкана = ПолучитьИзВременногоХранилища(ФайлСкана);	
	КонецЕсли;
//---АК SUVV

	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = СтруктураФайла.Расширение;
	Файл.Наименование = СтруктураФайла.Наименование;
	Файл.ИмяПодкаталога = "ПроизвольныеФайлыМагазинов";
	Файл.Записать();
	
	ИмяФайлаДляОбъекта = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка);
	ФайлСкана.Записать(ИмяФайлаДляОбъекта);
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	//файлы будут храниться не в регистре "АК_ФайлыМагазинов", а в табличной части "Файлы" справочника "СтруктурныеЕдиницы"
	//НЗ= РегистрыСведений.АК_ФайлыМагазинов.СоздатьНаборЗаписей();
	//НЗ.Отбор.Магазин.Установить(Объект.Ссылка);
	//НЗ.Прочитать();
	//Запись = НЗ.Добавить();
	//Запись.Магазин = Объект.Ссылка;
	//Запись.КодФайла = Файл.Код;
	//Запись.Назначение = Назначение;
	//НЗ.Записать();
	НоваяЗаписьТЧФайлы = Объект.Файлы.Добавить();
	НоваяЗаписьТЧФайлы.Файл = Файл.Ссылка;
	НоваяЗаписьТЧФайлы.Назначение = Назначение;
	//---АК SUVV
	//+++AK suvv 03.04.2018 ИП-00017689.02
	НоваяЗаписьТЧФайлы.ДатаДобавления = ТекущаяДата();
	НоваяЗаписьТЧФайлы.Автор = ПараметрыСеанса.ТекущийПользователь;
	//---AK
	
	Если Объект.Ссылка.Пустая() Тогда	
		СписокКодовФайлов.Добавить(Файл.Код);
	КонецЕсли;
	
	СписокФайловКОтправке.Добавить(ИмяФайлаДляОбъекта);
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ДобавитьФайлВОсновнойМагазин(Файл.Ссылка);
	//+++AK GREK 17.10.2017 ИП-00016367
	ЗначениеВРеквизитФормы(об, "Объект"); 
	//---AK	
	
	мНовыеФайлы = новый массив ;
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	//обновлять таблицы не требуется
	//Элементы.СписокФайлов.Обновить();
	//---АК SUVV
 
 КонецПроцедуры // ЗагрузитьСканДоговораНаСервере()
 
&НаКлиенте
Функция  РазослатьУведомления(Команда)
	ПодключитьОбработчикОжидания("РазослатьНаСервере", 0.1, Истина);
КонецФункции

&НаКлиенте
Процедура РазослатьНаСервере() Экспорт
	
	ОтправитьУведомленияОДобавленииСкана()

КонецПроцедуры

&НаСервере
Процедура ОтправитьУведомленияОДобавленииСкана()

	Массив = новый Массив;
	//МассивОбъекта = новый Массив;
	//МассивОбъекта.Вставить(Объект.Наименование);
	МассивПолучателей = новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АК_ГруппыРассылки.Емейл
		|ИЗ
		|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		|ГДЕ
		|	АК_ГруппыРассылки.Группа В(&Группа)";
		
	СписокГрупп = Новый Массив;
	//СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.ОткрытиеМагазина"));
	//СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.Список1"));
	//СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.Список2"));
	СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.Список3"));

	Запрос.УстановитьПараметр("Группа", СписокГрупп);

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Емейл");

	Получатели = Новый Массив;
	
	Для каждого Емайл из Результат цикл
		Если УправлениеЭлектроннойПочтой.EmailValid(Емайл) тогда
			Получатели.Добавить(Емайл)
		КонецЕсли;	
	КонецЦикла;	

	Массив.Добавить(Получатели);
	
	Текст = "Объекту " + Объект.Наименование + " добавлен скан договора аренды.";
	
	Массив.Добавить(Текст);
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	КонецЕсли;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Добавлен скан договора аренды";
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Для каждого Получателя из Получатели цикл
		Письмо.Получатели.Добавить(Получателя);	
	КонецЦикла;	
	//Письмо.Получатели.Добавить("pashaklgd@mail.ru");	
	
	Для каждого Файла из СписокФайловКОтправке цикл
		Письмо.Вложения.Добавить(Файла.Значение);
	КонецЦикла;	
	
	СписокФайловКОтправке.Очистить();	
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.Текст = Текст;
	
	Почта.Послать(Письмо);
КонецПроцедуры
//Раков П.С. --

&НаСервереБезКонтекста
Функция ПутьКФайлу(Файл)
	Возврат Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл)
КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ЗапуститьПриложение(ПутьКФайлу(ДоговорКонтрагента.СканДоговора));
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСхемуНаСервере(Изображение,Расширение)
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = Расширение;
	Файл.Наименование = "Схема."+Расширение;
	Файл.ИмяПодкаталога = "Заявки на открытие";
	Файл.Записать();
	Изображение.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	Возврат Файл.Ссылка;
КонецФункции

&НаКлиенте
Функция ПолучитьРасширениеФайла(ИмяФайла)
	Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяФайла,".");
	Если ПодСтроки.Количество()<2 Тогда
		Возврат ""
	Иначе
		Возврат Подстроки[Подстроки.Количество()-1]
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьСхему(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//ДиалогВыбораФайла.Фильтр = "*.pdf|*.pdf";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлСхемы = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		Расширение = ПолучитьРасширениеФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
		ЗаписьОткрытие.СхемаРаботыЗазывалы=ЗагрузитьСхемуНаСервере(ФайлСхемы,Расширение);
		Элементы.ЗаписьОткрытиеСхемаРаботыЗазывалы.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхему(Команда)
	ЗапуститьПриложение(ПутьКФайлу(ЗаписьОткрытие.СхемаРаботыЗазывалы));
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеПодчиненныеРеквизиты(Родитель, МассивРеквизитов)
	Для Каждого Элемент из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ПолеФормы")Или ТипЗнч(Элемент)=Тип("ГруппаФормы")Тогда
			Если Элемент.Вид=ВидПоляФормы.ПолеВвода Тогда
				МассивРеквизитов.Добавить(Элемент.ПутьКДанным);
				Сообщить(Элемент.ТекстРедактирования);
			ИначеЕсли ТипЗнч(Элемент.Вид) = Тип("ВидГруппыФормы") Тогда
				ВыбратьВсеПодчиненныеРеквизиты(Элемент,МассивРеквизитов)
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьЭтап(Этап)
	Результат = Ложь;
	Если Этап = 0 Тогда
		Результат = ЗначениеЗаполнено(Объект.Адрес);
		Результат = Результат и ЗначениеЗаполнено(Объект.Город);
		Результат = Результат и ЗначениеЗаполнено(Объект.ТипРозничнойТочки);
		Результат = Результат и ЗначениеЗаполнено(РольКтоОткрыл.РольПользователя);
		Возврат Результат
	КонецЕсли;
	Если Этап = 1 Тогда
		Результат = ЗначениеЗаполнено(Объект.НомерТочки);
		Результат = Результат И ЗначениеЗаполнено(Объект.Наименование);
		Результат = Результат И Найти(Объект.Наименование,Формат(Объект.НомерТочки,"ЧГ=0"))=1;
		Возврат Результат
	КонецЕсли;
	Если Этап = 2 Тогда
		Результат = ЗначениеЗаполнено(Объект.ДатаОткрытия);
		Результат = Результат И ЗначениеЗаполнено(РольУправляющий.РольПользователя);
		Результат = Результат И ЗначениеЗаполнено(Объект.ВремяРаботы);
		Результат = Результат И (ЗначениеЗаполнено(ЗаключениеДоговора.КоличествоДнейСтимулаАренды)
			Или ЗаключениеДоговора.ТипСтимулаАренды=Перечисления.АК_ТипыЛьготПоАренде.Скидка);
		Результат = Результат И ЗначениеЗаполнено(Объект.ТорговаяПлощадь);
		Результат = Результат И ЗНачениеЗаполнено(ЗаключениеДоговора.ДатаАкта);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.ЭлектроэнергииПоДоговору);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.ЭлектроэнергииПоФакту);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.КлючиОтПомещения);
		Возврат Результат
	КонецЕсли;
	Если Этап = 3 Тогда
		Результат = ЗначениеЗаполнено(СуммаАрендыПостоянная);
		Результат = Результат И ЗначениеЗаполнено(СуммаАрендыПеременная);
		Возврат Результат                                      
	КонецЕсли;
	Если Этап = 4 Тогда
		Результат = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
		Возврат Результат
	КонецЕсли;
	Если Этап = 5 Тогда
		Результат = ЗначениеЗаполнено(РольПомощникПоРаскрутке.РольПользователя);
		Результат = Результат И ЗначениеЗаполнено(ЗаписьОткрытие.СхемаРаботыЗазывалы);
		Возврат Результат
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	//ТекущийЭтап = ЗаписьОткрытие.Этап+1;
	//мЭтап = Элементы["Этап"+ТекущийЭтап];
	//ПроверяемыеРеквизиты.Очистить();
	//ВыбратьВсеПодчиненныеРеквизиты(мЭтап,ПроверяемыеРеквизиты)
	//
	ПроверяемыеРеквизиты.Добавить("Объект.НомерТочки");
	ПроверяемыеРеквизиты.Добавить("Объект.Регион");
	ПроверяемыеРеквизиты.Добавить("Объект.Город");
	ПроверяемыеРеквизиты.Добавить("Объект.Адрес");
	ПроверяемыеРеквизиты.Добавить("ДатаОткрытия");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПривилегированныйРежим(Истина);
	Прочитать();
	ОпределитьТекущийЭтап();
	ЗаписьОткрытие.Магазин = ТекущийОбъект.Ссылка;
	мЗаписьОткрытие = РеквизитФормыВЗначение("ЗаписьОткрытие");
	Попытка
		мЗаписьОткрытие.Записать();
		ЗначениеВРеквизитФормы(мЗаписьОткрытие,"ЗаписьОткрытие");
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	//+++ AK suvv 12.07.2018 ИП-00018401 - создаются лишние строки в РС "ЦФОСтруктурныхЕдиниц"
	ЦФОПередачи = Объект.ЦФОПередачи;
	НетЗаписейЦФО = Истина;
	НетЗаписейЦФОРазвитие = Истина;
	//--- AK suvv
	
	//+++AK GREK 19.10.2017 ИП-00016992
	ТекЦФО = ЦФОпоТТ();	
	ОбновленаЗаписьЦФО = Ложь;
	ОбновленаЗаписьЦФОПередачи = Ложь;
	Пока ТекЦФО.Следующий()Цикл
		Если ТекЦФО.Развитие Тогда
			Если ТекЦФО.ЦФО<>ЦФО или ТекЦФО.Организация<>Организация Тогда
				ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
				ЗаписьЦФО.Период=ТекущаяДАта();
				ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
				ЗаписьЦФО.Организация = Организация;
				ЗаписьЦФО.ЦФО = ЦФО;
				ЗаписьЦФО.АвторИзменений = ПараметрыСеанса.ТекущийПользователь;
				ЗаписьЦФО.ДатаИзменений = ТекущаяДата();
				ЗаписьЦФО.Записать();
				ОбновленаЗаписьЦФО = Истина;	
			КонецЕсли;
			//+++ AK suvv 12.07.2018 ИП-00018401
			НетЗаписейЦФОРазвитие = Ложь;
			//--- AK suvv
		Иначе
			Если ТекЦФО.ЦФО<>ЦФОПередачи Тогда
				ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
				ЗаписьЦФО.Период=Объект.ДатаОкончанияПередачи;
				ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
				ЗаписьЦФО.Организация = Организация;
				ЗаписьЦФО.ЦФО = ЦФОПередачи;
				ЗаписьЦФО.АвторИзменений = ПараметрыСеанса.ТекущийПользователь;
				ЗаписьЦФО.ДатаИзменений = ТекущаяДата();
				ЗаписьЦФО.Записать();
				ОбновленаЗаписьЦФОПередачи = Истина;	
			КонецЕсли;
			//+++ AK suvv 12.07.2018 ИП-00018401
			НетЗаписейЦФО = Ложь;
			//--- AK suvv
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбновленаЗаписьЦФО И ЗначениеЗаполнено(ЦФО) и НетЗаписейЦФОРазвитие Тогда
		ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		ЗаписьЦФО.Период = ТекущаяДата();
		ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
		ЗаписьЦФО.Организация = Организация;
		ЗаписьЦФО.ЦФО = ЦФО;
		ЗаписьЦФО.АвторИзменений = ПараметрыСеанса.ТекущийПользователь;
		ЗаписьЦФО.ДатаИзменений = ТекущаяДата();
		ЗаписьЦФО.Записать();
	КонецЕсли;
	Если Не ОбновленаЗаписьЦФОПередачи И ЗначениеЗаполнено(ЦФОПередачи) и НетЗаписейЦФО Тогда
		ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		ЗаписьЦФО.Период = Объект.ДатаОкончанияПередачи;
		ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
		ЗаписьЦФО.Организация = Организация;
		ЗаписьЦФО.ЦФО = ЦФОПередачи;
		ЗаписьЦФО.АвторИзменений = ПараметрыСеанса.ТекущийПользователь;
		ЗаписьЦФО.ДатаИзменений = ТекущаяДата();
		ЗаписьЦФО.Записать();
	КонецЕсли;
	//---AK	

	
	//ТекЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(,Новый Структура("СтруктурнаяЕдиница",Объект.Ссылка));
	//Если ТекЦФО.ЦФО<>ЦФО или ТекЦФО.Организация<>Организация Тогда
	//	ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
	//	ЗаписьЦФО.Период=ТекущаяДАта();
	//	ЗаписьЦФО.СтруктурнаяЕдиница = Объект.Ссылка;
	//	ЗаписьЦФО.Организация = Организация;
	//	ЗаписьЦФО.ЦФО = ЦФО;
	//	ЗаписьЦФО.Записать();
	//КонецЕсли;
	
	КолПр = РегистрыСведений.КоличествоПродавцовНаТочках.ПолучитьПоследнее(,Новый Структура("ТорговаяТочка",Объект.Ссылка));
	Если КолПр.ВрабочиеДни<>КоличествоПродавцов Или КолПр.ВВыходныеДни<>КоличествоПродавцовВвыходные Тогда
		ЗаписьКолПр = РегистрыСведений.КоличествоПродавцовНаТочках.СоздатьМенеджерЗаписи();
		ЗАписьКолПр.ТорговаяТочка = Объект.Ссылка;
		ЗаписьКолПр.ВРабочиеДни = КоличествоПродавцов;
		ЗаписьКолПр.ВВыходныеДни = КоличествоПродавцовВВыходные;
		ЗаписьКолПр.Период = ТекущаяДата();
		ЗАписьКолПр.Записать()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""SpecialistPoOtkrytiyu"" КАК РольИД
	|ПОМЕСТИТЬ ТипыРолей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""UpravlyayushchiiPoRoznice""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""PomoshnikPoRaskrutke""
	//+++ AK suvv 17.08.2018 ИП-00019353
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""RukovoditelPoStroitelstvu""
	//--- AK suvv
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыРолей.РольИД КАК ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	ЕСТЬNULL(РолиПользователейСоставРоли.Сотрудник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Сотрудник
	|ИЗ
	|	ТипыРолей КАК ТипыРолей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Магазин) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО ТипыРолей.РольИД = СоответствиеОбъектРольСрезПоследних.ТипРолиID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка)
	|			И (РолиПользователейСоставРоли.НомерСтроки = 1)";
	Запрос.УстановитьПараметр("Магазин",Объект.Ссылка);
	ТекРоли = Запрос.Выполнить().Выбрать();
	//ТекРоли = РегистрыСведений.СоответствиеОбъектРоль.Выбрать(,,Новый Структура("Объект",Объект.Ссылка));
	ТЗРоли = Новый ТаблицаЗначений;
	ТЗРоли.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТЗРоли.Колонки.Добавить("ТипРоли",Новый ОписаниеТипов("Строка"));
	Пока ТекРоли.Следующий()Цикл
		Если ТекРоли.ТипРолиID = "SpecialistPoOtkrytiyu" Тогда
			Если КтоОткрыл <>ТекРоли.Сотрудник и НЕ КтоОткрыл.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = КтоОткрыл;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
		ИначеЕсли ТекРоли.ТипРолиID = "UpravlyayushchiiPoRoznice" Тогда
			Если УправляющийРозницей <>ТекРоли.Сотрудник и НЕ УправляющийРозницей.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = УправляющийРозницей;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
			УправляющийРозницей = ТекРоли.Сотрудник;
		ИначеЕсли ТекРоли.ТипРолиID = "PomoshnikPoRaskrutke" Тогда
			Если ПомощникПоРаскрутке <>ТекРоли.Сотрудник и НЕ ПомощникПоРаскрутке.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = ПомощникПоРаскрутке;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
		//+++ AK suvv 17.08.2018 ИП-00019353
	    ИначеЕсли ТекРоли.ТипРолиID = "RukovoditelPoStroitelstvu" Тогда
		    Если РуководительПоСтроительству <> ТекРоли.Сотрудник и НЕ РуководительПоСтроительству.Пустая() Тогда
			    СтрокаРоль = ТЗРоли.Добавить();
			    СтрокаРоль.Сотрудник = РуководительПоСтроительству;
			    СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
		    КонецЕсли;
		//--- AK suvv
		КонецЕсли
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Роли",ТЗРоли);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Роли.Сотрудник КАК Сотрудник,
	|	Роли.ТипРоли
	|ПОМЕСТИТЬ ВТРоли
	|ИЗ
	|	&Роли КАК Роли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВложенныйЗапрос.Роль, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК Роль,
	|	ВТРоли.Сотрудник,
	|	ТипыРолейПользователя.Ссылка КАК ТипРоли,
	|	ТипыРолейПользователя.Наименование КАК НаименованиеРоли,
	|	ВЫРАЗИТЬ(ВТРоли.Сотрудник КАК Справочник.ФизическиеЛица).Наименование КАК ФИО,
	|	ВТРоли.ТипРоли КАК ТипРолиID
	|ИЗ
	|	ВТРоли КАК ВТРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
	|		ПО ((ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50))) = ТипыРолейПользователя.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РолиПользователейТипыРолей.Ссылка) КАК Роль,
	|			ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50)) КАК ТипРоли,
	|			РолиПользователейСоставРоли.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТРоли КАК ВТРоли
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|				ПО ((ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50))) = РолиПользователейТипыРолей.ТипРоли.Код)
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|				ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
	|					И (РолиПользователейСоставРоли.Сотрудник = ВТРоли.Сотрудник)
	|					И (РолиПользователейСоставРоли.НомерСтроки = 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50)),
	|			РолиПользователейСоставРоли.Сотрудник) КАК ВложенныйЗапрос
	|		ПО ВТРоли.Сотрудник = ВложенныйЗапрос.Сотрудник
	|			И Выразить(ВТРоли.ТипРоли Как Строка(50))= ВложенныйЗапрос.ТипРоли";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		ЗаписьРоль = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
		ЗаписьРоль.Период=ТекущаяДата();
		ЗаписьРоль.Объект=Объект.Ссылка;
		ЗаписьРоль.ТипРоли = Выборка.ТипРоли;
		Если Выборка.Роль.Пустая() Тогда
			НоваяРоль = Справочники.РолиПользователей.СоздатьЭлемент();
			НоваяРоль.Наименование=Выборка.НаименованиеРоли+" "+Выборка.ФИО;
			НСтрока=НоваяРоль.ТипыРолей.Добавить();
			НСтрока.ТипРоли=Выборка.ТипРоли;
			НСтрока = НоваяРоль.СоставРоли.Добавить();
			НСтрока.Сотрудник=Выборка.Сотрудник;
			НоваяРоль.Записать();
			ЗаписьРоль.РольПользователя = НоваяРоль.Ссылка;
		Иначе
			ЗаписьРоль.РольПользователя=Выборка.Роль;
		КонецЕсли;
		ЗаписьРоль.ТипРолиID=Выборка.ТипРолиID;
		Попытка
			ЗаписьРоль.Записать();
		Исключение
			Сообщить("Не удалось записать данные о роли "+Выборка.ТипРоли)
		КонецПопытки;
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(СуммаАрендыПостоянная)
	//	Или ЗначениеЗаполнено(СуммаАрендыПеременная)
	//	//Или ЗначениеЗаполнено(ЛимитыАренды.ТорговаяТочка)
	//	Тогда
	//		ТекЛимиты = РегистрыСведений.ЛимитыАренднойПлаты.ПолучитьПоследнее(,Новый Структура("ТорговаяТочка",Объект.Ссылка));
	//		Если СуммаАрендыПостоянная<>ТекЛимиты.СуммаАрендаПостоянная или
	//			СуммаАрендыПеременная<>ТекЛимиты.СуммаАрендаПеременная Тогда
	//			Лимиты = РегистрыСведений.ЛимитыАренднойПлаты.СоздатьМенеджерЗаписи();
	//			Лимиты.СуммаАрендаПеременная = СуммаАрендыПеременная;
	//			Лимиты.СуммаАрендаПостоянная = СуммаАрендыПостоянная;
	//			Лимиты.ТорговаяТочка = Объект.Ссылка;
	//			Лимиты.Период = ТекущаяДата();
	//			Лимиты.МесяцАренды=ЛимитыНачало;
	//			Лимиты.Записать();
	//		КонецЕсли;
	//			
	//КонецЕсли;
	
	СсылкаОА = Справочники.ОбъектыАренды.НайтиПоРеквизиту("СтруктурнаяЕдиница",Объект.Ссылка);
	Если СсылкаОА.Пустая() Тогда
		ОбъектАренды = Справочники.ОбъектыАренды.СоздатьЭлемент();
		ОбъектАренды.СтруктурнаяЕдиница = ТекущийОбъект.Ссылка;
		Если ОбъектАренды.Наименование="" Тогда
			ОбъектАренды.Наименование = Объект.Наименование
		КонецЕсли;
		ОбъектАренды.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кв.м");
		ОбъектАренды.Записать();
		СсылкаОА = ОбъектАренды.Ссылка;
	КонецЕсли;
	
	//Если НЕ ДоговорКонтрагента.Ссылка.Пустая()
	//		ИЛИ ЗначениеЗаполнено(ДоговорКонтрагента.Дата)
	//		ИЛИ ДоговорКонтрагента.КоличествоДнейОтсрочки <> 0
	//		Или ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора) 
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ТипСтимулаАренды)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаЗаключенияДоговора)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаАкта)
	//		Или ЗначениеЗаполнено(ЗаключениеДоговора.КоличествоДнейСтимулаАренды)Тогда
	//	ДоговорКонтрагента.ОбъектАренды = СсылкаОА;
	//	Если ДоговорКонтрагента.Ссылка.Пустая() Тогда
	//		ЗаполнитьНовыйДоговор()
	//	КонецЕсли;
	//	ДоговорКонтрагента.Организация=Организация;
	//	Если Не ЗначениеЗаполнено(ДоговорКонтрагента.Дата)ТОгда
	//		ДоговорКонтрагента.Дата=ЗаключениеДоговора.ДатаЗаключенияДоговора
	//	КонецЕсли;
	//	мДоговорКонтрагента = РеквизитФормыВЗначение("ДоговорКонтрагента");
	//	Попытка
	//		мДоговорКонтрагента.Записать();
	//		ЗначениеВРеквизитФормы(мДоговорКонтрагента,"ДоговорКонтрагента");
	//	Исключение
	//		Сообщить("Не удалось записать сведения о договоре: "+ОписаниеОшибки());
	//		//Отказ = Истина;
	//		Возврат;
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Если НЕ ЗаключениеДоговора.Ссылка.Пустая()
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ТипСтимулаАренды)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаЗаключенияДоговора)
	//		ИЛИ ЗначениеЗаполнено(ЗаключениеДоговора.ДатаАкта)
	//		Или ЗначениеЗаполнено(ЗаключениеДоговора.КоличествоДнейСтимулаАренды)Тогда
	//	ЗаключениеДоговора.ДоговорКонтрагента 	= ДоговорКонтрагента.Ссылка;
	//	ЗаключениеДоговора.ОбъектАренды 		= СсылкаОА;
	//	//ЗаключениеДоговора.ДатаЗаключенияДоговора = ДоговорКонтрагента.Дата;
	//	ЗаключениеДоговора.Контрагент = ДоговорКонтрагента.Владелец;
	//	ЗаключениеДоговора.Организация = ДоговорКонтрагента.Организация;
	//	Если Не ЗначениеЗаполнено(ЗаключениеДоговора.Дата)Тогда
	//		ЗаключениеДоговора.Дата=ТекущаяДата()
	//	КонецЕсли;
	//	мЗаключениеДоговора = РеквизитФормыВЗначение("ЗаключениеДоговора");
	//	Попытка
	//		мЗаключениеДоговора.Записать();
	//		ЗначениеВРеквизитФормы(мЗаключениеДоговора,"ЗаключениеДоговора")
	//	Исключение
	//		Сообщить("Не удалось записать реквизиты: Дата акта, Кол-во дней арендных каникулов: "+ОписаниеОшибки());
	//		//Отказ = Истина;
	//		//Возврат
	//	КонецПопытки;
	//КонецЕсли;
	
	//+++ AK suvv 19.07.2018 ИП-00019053
	ТекущийОбъект.ЗаписатьИсториюИзмененияРеквизитовСЕ(ПараметрыЗаписи);
	//--- AK suvv
	
	//+++ AK suvv 2018.10.05 ИП-00019795
	ИзмененныеСвойства = Новый ТаблицаЗначений;
	ИзмененныеСвойства.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СвойстваСтруктурныхЕдиниц"));
	ИзмененныеСвойства.Колонки.Добавить("Значение");
	
	Для Каждого Эл из Элементы.ГруппаСвойстваСЕ.ПодчиненныеЭлементы Цикл
		
		//добавить проверку на существование предопределенного значения
		//Если ПланыВидовХарактеристик.СвойстваСтруктурныхЕдиниц.НайтиПоРеквизиту("ИмяПредопределенныхДанных", [Эл.Имя]).Пустая() Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		Свойство = ПланыВидовХарактеристик.СвойстваСтруктурныхЕдиниц[Эл.Имя];	
		НовСтрока = ИзмененныеСвойства.Добавить();
		НовСтрока.Свойство = Свойство;
		НовСтрока.Значение = ЭтаФорма[Эл.Имя];
	КонецЦикла;
	
	ТекущийОбъект.СохранитьЗначенияСвойствСЕ(ИзмененныеСвойства);	
	//--- AK suvv
	
	//+++AK GREK 12.12.2018 ИП-00020570
	Если ЗначениеЗаполнено(Объект.ДатаПланируемогоЗакрытия) И Объект.СтатусТорговойТочки <>	ПредопределенноеЗначение("Перечисление.СтатусыТорговыхТочек.Закрыт") Тогда
		ЗакрытиеТорговойТочки();
	КонецЕсли;
	//---AK
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

//+++AK GREK 12.12.2018 ИП-00020570
&НаСервере
Процедура ЗакрытиеТорговойТочки()
	//Определим ЦФО магазина
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	               |ИЗ
	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |ГДЕ
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	               |	И ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО.Наименование ПОДОБНО ""%Управление розницей. Группа Развитие%""";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	Рез = Запрос.Выполнить();
	ЦФОРазвитие = НЕ Рез.Пустой;
	
	Если ЦФОРазвитие Тогда
		//Запросим акцепт закрытия магазину у ответственных лиц
		//Адрес = "Grek@automacon.ru";//РегистрыСведений.КонтактнаяИнформация.КонтактнаяИнформацияОбъекта(Объект.ПомощникУправляющего, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));
		СсылкаАкцептант	= Объект.КтоЗакрывает;
		СписокКому = Новый СписокЗначений;
		СписокКому.Добавить("r@vkusvill.ru");
		СписокКому.Добавить("vkusvill3@izbenka.msk.ru");
		//Если Адрес<>"" Тогда
		//	СписокКому.Добавить(СокрЛП(Адрес));
		//Иначе
		//	СообщениеПоОшибке = НСтр("ru = 'Письмо не отправлено! Не заполнен адрес электронной почты %Выборка_Акцептант%'");
		//	Сообщить(СтрЗаменить(СообщениеПоОшибке, "%Выборка_Акцептант%", СсылкаАкцептант));
		//	Возврат;
		//КонецЕсли;
	
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки("Razvitie@vkusvill.ru");
	
		НомерЗаявки = "";
		ТекстУведомления = "";
		ТекстУведомления = ТекстУведомления + "<p>Добрый день!</p>";
		ТекстУведомления = ТекстУведомления + "<p>Магазин " + Объект.Наименование + " закрывается начиная с " + Формат(Объект.ДатаПланируемогоЗакрытия, "ДФ=dd.MM.yyyy") + 
							" Причина закрытия: " + Объект.ПричинаЗакрытия + ". Просьба переводить покупателей в магазин " + Объект.КудаПеренаправляемПокупателейПослеЗакрытия + "</p>";
		ТекстУведомления = ТекстУведомления + "<p>Дата последней инкассации " + Формат(Объект.ДатаПоследнейИнкасации, "ДФ=dd.MM.yyyy") + "</p>";
		ТекстУведомления = ТекстУведомления + "Закрывает " + Объект.КтоЗакрывает + "</p>";
		ТекстУведомления = ТекстУведомления + "<p>Для подтверждения закрытия торговой точки " + Объект.Наименование + ". Нажмите на кнопку, ""Принять магазин"" расположенную ниже, а затем отправте автоматически сгенирированый ответ.</p>";
		ТекстУведомления = ТекстУведомления + "<BR>";
	
		Тема = "Требуется подтверждение закрытия торговой точки" + Объект.Наименование + " начиная с " + Формат(Объект.ДатаПланируемогоЗакрытия, "ДФ=dd.MM.yyyy");
		ID_MESSAGE = Новый УникальныйИдентификатор;
		TYPE_MESSAGE = "14";
		GUID_Заявки	= Строка(Объект.Ссылка.УникальныйИдентификатор());
		Объект_Ссылка = Объект.Ссылка;
	
		ОтправитьЗаявкуНаПодтверждение(Тема, ТекстУведомления, НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, СсылкаАкцептант, УчетнаяЗапись, Объект_Ссылка);
	Иначе
		//Проверим идет ли процедура закрытия торговой точки, и если нет, то иницируем ее
		МЗ = РегистрыСведений.АК_МагазиныКЗакрытию.СоздатьМенеджерЗаписи();
		МЗ.Магазин = Объект.Ссылка;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			Если МЗ.ДатаПланируемогоЗакрытия = Объект.ДатаПланируемогоЗакрытия Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		МЗ.Магазин = Объект.Ссылка;
		МЗ.ДатаПланируемогоЗакрытия = Объект.ДатаПланируемогоЗакрытия;
		МЗ.Записать();
	КонецЕсли	
КонецПроцедуры


&НаКлиенте
Процедура ЭтапыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя="Этап4" Тогда
		СписокКРассылке = "Список №2";
	ИначеЕсли ТекущаяСтраница.Имя="Этап5" Тогда
		СписокКРассылке = "Список №3";
	//+++AK GREK 10.10.2017 ИП-00015325.01	
	ИначеЕсли  ТекущаяСтраница.Имя="Этап7" Тогда
		СписокКРассылке = "Список №5";
	//---AK
	Иначе
		СписокКРассылке = "Список №1";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиПриИзменении(Элемент)
	Если Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
		Объект.Активное=Истина;
		КоличествоПродавцов = 10;
		КоличествоПродавцовВВыходные = 10;
	Иначе
		КоличествоПродавцов = 30;
		КоличествоПродавцовВВыходные = 30;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНомерТТ(Номер,Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.НомерТочки = &НомерТочки
	|	И СтруктурныеЕдиницы.Ссылка <> &Ссылка
	|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
	Запрос.УстановитьПараметр("НомерТочки",Номер);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат НЕ Запрос.Выполнить().Пустой()
КонецФункции

&НаСервереБезКонтекста
Функция ПользовательФизлица(Физлицо)
	Запрос = Новый Запрос;
	ЗАпрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ,
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизЛицо = &ФизЛицо
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Физлицо",Физлицо);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗАпроса.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка()
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.НомерТочки=0 Тогда
		Отказ = Истина;
		Сообщить("Не установлен номер точки");
		Возврат
	КонецЕсли;
	Если ЕстьНомерТТ(Объект.НомерТочки,Объект.Ссылка) Тогда
		Отказ=Истина;
		Сообщить("Номер точки уже занят");
		Возврат
	КонецЕсли;
	Если Объект.Планограмма.Пустая() Тогда
		Отказ = Истина;
		Сообщить("Не выбрана планограмма");
	КонецЕсли;
	Если Объект.ГрафикИнвентаризации.Пустая() Тогда
		Отказ = Истина;
		Сообщить("Не выбран график инвентаризации")
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаОткрытия)ТОгда
		Отказ = Истина;
		Сообщить("Не установлена дата открытия");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипУлицы)ТОгда
		Отказ = Истина;
		Сообщить("Не установлен тип улицы");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеАрендодателя)ТОгда
		Отказ = Истина;
		Сообщить("Не заполнено ФИО/Наименвоание контрагента арендодателя");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ТелефонАрендодателя)ТОгда
		Отказ = Истина;
		Сообщить("Не заполнен телефон контрагента арендодателя");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.АдресАрендодателя)ТОгда
		Отказ = Истина;
		Сообщить("Не заполнен адрес контрагента арендодателя");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ФайлРасстановкиПромоутеров)ТОгда
		Отказ = Истина;
		Сообщить("Не загружена схема расстановки промоутеров");
	КонецЕсли;
	
	//+++AK GREK 11.01.2017 ИП-00017564
	Если НЕ ЗначениеЗаполнено(Объект.КоординатыДолгота) И НЕ ЗначениеЗаполнено(Объект.КоординатыШирота) Тогда
		Рез = ОпределитьКоординатыБезОтображенияФормы();
		Если Рез <> Неопределено Тогда
			ОбработатьГеоЛокацию(Рез);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КоординатыДолгота) ИЛИ НЕ ЗначениеЗаполнено(Объект.КоординатыШирота) ТОгда
		Отказ = Истина;
		Сообщить("Не указаны координаты точки!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) ТОгда
		Отказ = Истина;
		Сообщить("Не заполнено наименование торговой точки!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Улица) 
	//+++ AK suvv 2018.10.02 ИП-00020007
	и Объект.ТипРозничнойТочки <> ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Вкусомат") 
	//--- AK suvv
	Тогда
			Отказ = Истина;
			Сообщить("Не заполнена улица!");
	КонецЕсли;
	Если Строка(Объект.Регион) = "Москва" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Район) Тогда
			Отказ = Истина;
			Сообщить("Не определен район! Укажите его вручную");
			Элементы.Группа13.Видимость = Истина;
			Элементы.Группа12.Видимость = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.АдминистративныйОкруг) ТОгда
			Отказ = Истина;
			Сообщить("Не определен административный округ! Укажите его вручную");
			Элементы.Группа13.Видимость = Истина;
			Элементы.Группа12.Видимость = Истина;
		КонецЕсли;
		Если Объект.СтанцииМетро.Количество() = 0 ТОгда
			Элементы.Группа13.Видимость = Истина;
			Элементы.Группа12.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;

	//---AK
	
	Если Объект.АкцептантЗаявок.Пустая() Тогда
		Если НЕ УправляющийРозницей.Пустая() Тогда
			Объект.АкцептантЗаявок = ПользовательФизлица(УправляющийРозницей);
		КонецЕсли;
	КонецЕсли;
	Если Объект.АдресSkype ="" Тогда
		Объект.АдресSkype = Формат(Объект.НомерТочки,"ЧН=; ЧГ=0")+"@p01.vkusvill.ru";
	КонецЕсли;
	Если Объект.АдресЭлектроннойПочты ="" Тогда
		//+++ AK suvv 12.07.2018 б.н. по просьбе Павла Скворцова
		//Объект.АдресЭлектроннойПочты = Формат(Объект.НомерТочки,"ЧН=; ЧГ=0")+"@vkusvill.ru";
		Объект.АдресЭлектроннойПочты = Формат(Объект.НомерТочки,"ЧН=; ЧГ=0")+"@p01.vkusvill.ru";
		//--- AK suvv
	КонецЕсли;
	Если Объект.ФорматМагазинаВВ.Пустая() Тогда
		Если ОБъект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
			Объект.ФорматМагазинаВВ = ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Развитие")
		КонецЕсли;
	КонецЕсли;
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	//запросы нельзя выполнять на клиенте
	//Запрос = новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СправочникФайлы.Ссылка,
	//               |	СправочникФайлы.Наименование,
	//               |	СправочникФайлы.Расширение,
	//               |	СправочникФайлы.ИмяПодкаталога
	//               |ИЗ
	//               |	Справочник.Файлы КАК СправочникФайлы
	//               |ГДЕ
	//               |	СправочникФайлы.Код В
	//               |			(ВЫБРАТЬ
	//               |				АК_ФайлыМагазинов.КодФайла
	//               |			ИЗ
	//               |				РегистрСведений.АК_ФайлыМагазинов КАК АК_ФайлыМагазинов
	//               |			ГДЕ
	//               |				АК_ФайлыМагазинов.Магазин = &МагазинДинСписок)";
	//Запрос.УстановитьПараметр("МагазинДинСписок",Объект.Ссылка); 
	//Если Запрос.Выполнить().Пустой() И СписокКодовФайлов.Количество()=0 Тогда
	//	Отказ = Истина;
	//	//То добавь вопрос, то убери...
	//	//Режим = РежимДиалогаВопрос.ДаНет;
	//	//Ответ = Вопрос(НСтр("ru = 'Не прикреплен скан договора! Продолжить выполнение операции?';"), Режим, 0);
	//	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	//	Отказ = Ложь;
	//	//КонецЕсли;
	//	Сообщить("Не прикреплен скан договора!"); 	
	//КонецЕсли;
	
	//файлы храним не в регистре, а в табличной части справочника 
	ПараметрыОтбораСканыДоговоров = Новый Структура;
	ПараметрыОтбораСканыДоговоров.Вставить("Назначение", "Сканы");	
	Сканы = Объект.Файлы.НайтиСтроки(ПараметрыОтбораСканыДоговоров);
	Если Сканы = неопределено Тогда
		Отказ = Истина;	
		Сообщить("Не прикреплен скан договора!"); 	
	КонецЕсли;
	//---АК SUVV

	//+++AK GREK 18.01.2018 ИП-00017689      
	//Отбор = Новый Структура;
	//Отбор.Вставить("КлючОбъекта","Справочник.СтруктурныеЕдиницы.Форма.НовыйМагазин");
	//Отбор.Вставить("Пользователь",ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(Отбор);
	//Пока ВыборкаНастроек.Следующий() Цикл
	//	Если Найти(ВыборкаНастроек.КлючНастроек, "_КонтрольЗаполнения") <> 0 И ВыборкаНастроек.Настройки = Истина Тогда
	//		Имя = СтрЗаменить(ВыборкаНастроек.КлючНастроек, "_КонтрольЗаполнения","");
	//		Попытка
	//			Если НЕ ЗначениеЗаполнено(Объект[Имя]) Тогда
	//				Отказ = Истина;
	//				Сообщить("Реквизит " + Имя + " не заполнен!");
	//			КонецЕсли;
	//		Исключение
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	//---AK
	
	//+++АК SUVV 2018.03.01 ИП-00017818
	//запросы нельзя выполнять на клиенте, вынесли в отдельную процедуру
	////+++AK GREK 08.02.2018 ИП-00017689.01  
	//Запрос = Новый Запрос;
	//Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//                |	НастройкиОткрытияМагазинов.НастраеваемыйОбъект
	//                |ИЗ
	//                |	РегистрСведений.НастройкиОткрытияМагазинов КАК НастройкиОткрытияМагазинов
	//                |ГДЕ
	//                |	(НастройкиОткрытияМагазинов.ВидНастройки = &ВидНастройки
	//                |				И НастройкиОткрытияМагазинов.Значение ПОДОБНО ""%"" + &ИмяПользователя + ""%""
	//                |			ИЛИ НастройкиОткрытияМагазинов.ВидНастройки = &ВидНастройки2
	//                |				И НЕ НастройкиОткрытияМагазинов.Значение ПОДОБНО ""%"" + &ИмяПользователя + ""%"")";
	//Запрос.УстановитьПараметр("ВидНастройки", ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина.КонтрольЗаполнения"));
	//Запрос.УстановитьПараметр("ВидНастройки2", ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина.КонтрольЗаполненияДляВсехЗаИсключением"));
	//Запрос.УстановитьПараметр("ИмяПользователя", ТекПользователь.Наименование);//ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	ОграничениеДоступа = РезультатЗапроса.Выбрать();
	//	Пока ОграничениеДоступа.Следующий() цикл
	//		Если ТипЗнч(ОграничениеДоступа.НастраеваемыйОбъект) = Тип("Строка") Тогда
	//			Имя = ОграничениеДоступа.НастраеваемыйОбъект;
	//			Попытка
	//				Если НЕ ЗначениеЗаполнено(Объект[Имя]) Тогда
	//					Отказ = Истина;
	//					Сообщить("Реквизит " + Имя + " не заполнен!");
	//				КонецЕсли;
	//			Исключение
	//			КонецПопытки;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	////---AK
	МассивНезаполненныхРеквизитов = ПолучитьНастройкиОткрытияМагазинов();
	Для Каждого НезаполненныйРеквизит из МассивНезаполненныхРеквизитов Цикл
		Сообщить("Реквизит " + НезаполненныйРеквизит + " не заполнен!");
	КонецЦикла;
	Если МассивНезаполненныхРеквизитов.Количество() > 0 Тогда 	
		Отказ = Истина;	
	КонецЕсли;
	//---АК SUVV
	
	#Если Не ВебКлиент Тогда
	Если Отказ И (РольДоступна("ПолныеПрава") ИЛИ НЕ НовыйЭлемент) Тогда
		Ответ = Вопрос("При проверке заполнения указаной информации обнаружены ошибки! Возможно нарушение процедуры создания новой торговой точки! Продолжить сохранение?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

	//Попросили сделать отправку писем на регистарцию касс при любом изменении количества касс
	Если Не Отказ Тогда
		ПроверитьУсловияОтправкиУведомленийИВыполнитьОтправку();
	КонецЕсли; 
	
	//+++ AK suvv 11.04.2018 ИП-00018374
	Если не Отказ и НовыйЭлемент Тогда 	
		ПараметрыЗаписи.Вставить("ФормироватьЗаписиВРегистреМестаХраненияМагазинов", Истина);
	Иначе 	
		ПараметрыЗаписи.Вставить("ФормироватьЗаписиВРегистреМестаХраненияМагазинов", Ложь);		
	КонецЕсли;
	//--- AK suvv
	
	//+++ AK suvv 2018.09.05 ИП-00019053
	СтарыеРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Ссылка, "Категория, КатегорияПодсобноеПомещение, ФактическаяДатаПередачи, КатегорииПодтверждены, ОбщаяПлощадь, ТорговаяПлощадь, ФактическаяПлощадь, ПлощадьПодсобныхПомещений, ПлощадьСубаренды, ПлощадьНеиспользуемая, ПринятАХО, МагазинПередан");
	ПараметрыЗаписи.Вставить("Категория", СтарыеРеквизиты.Категория);
	ПараметрыЗаписи.Вставить("КатегорияПодсобноеПомещение", СтарыеРеквизиты.КатегорияПодсобноеПомещение);
	ПараметрыЗаписи.Вставить("ФактическаяДатаПередачи", СтарыеРеквизиты.ФактическаяДатаПередачи);
	ПараметрыЗаписи.Вставить("КатегорииПодтверждены", СтарыеРеквизиты.КатегорииПодтверждены);
	ПараметрыЗаписи.Вставить("ОбщаяПлощадь", СтарыеРеквизиты.ОбщаяПлощадь);
	ПараметрыЗаписи.Вставить("ТорговаяПлощадь", СтарыеРеквизиты.ТорговаяПлощадь);
	ПараметрыЗаписи.Вставить("ФактическаяПлощадь", СтарыеРеквизиты.ФактическаяПлощадь);
	ПараметрыЗаписи.Вставить("ПлощадьПодсобныхПомещений", СтарыеРеквизиты.ПлощадьПодсобныхПомещений);
	ПараметрыЗаписи.Вставить("ПлощадьСубаренды", СтарыеРеквизиты.ПлощадьСубаренды);
	ПараметрыЗаписи.Вставить("ПлощадьНеиспользуемая", СтарыеРеквизиты.ПлощадьНеиспользуемая);
	//--- AK suvv
	//+++ AK suvv 2018.09.05 ИП-00019377
	ПараметрыЗаписи.Вставить("ПринятАХО", СтарыеРеквизиты.ПринятАХО);
	//--- AK suvv
	ПараметрыЗаписи.Вставить("МагазинПередан",СтарыеРеквизиты.МагазинПередан);	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУсловияОтправкиУведомленийИВыполнитьОтправку()
	Если Объект.Ссылка.КоличествоКасс <> Объект.КоличествоКасс Тогда
		РассылкаПриСозданииНовойТочки(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресНаСервере()
	Рез = "";
	//+++AK GREK 09.11.2017 ИП-00014283.15
	//Попросили убрать город из адреса...
	//Если Не Объект.Город.Пустая() Тогда
	//	Если Не Объект.Город.Код = "0001" Тогда
	//		Рез = Объект.Город.Наименование+", ";
	//	КонецЕсли;
	//КонецЕсли;
	//---AK
	Рез = Рез + ТипУлицы + " " + Объект.Улица+", д. "+Объект.Дом + Объект.КорпусСтроения; 
	Объект.Адрес = Рез;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАдрес()
	УстановитьАдресНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура Улица1ПриИзменении(Элемент)
	//+++AK GREK 09.11.2017 ИП-00014283.15
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		ОбновитьУлицаСокрНаименование();
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокращенноеНаименование.Видимость	= Истина;
			//+++AK GREK 08.01.2018 ИП-000175549     
			Объект.УлицаСокрНаименование = Объект.Улица;
			//---AK
		Иначе
			Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
	//---AK

	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Дом1ПриИзменении(Элемент)
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЦФОпоТТ()
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ЦФО,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Развитие КАК Развитие
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Период КАК Период,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО КАК ЦФО,
	|		ЛОЖЬ КАК Развитие,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|				,
	|				СтруктурнаяЕдиница = &ТТ
	|					И ЦФО.Код <> ""ЦФО_88"") КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Период,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	|		ИСТИНА,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|	ИЗ
	|		РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|				,
	|				СтруктурнаяЕдиница = &ТТ
	|					И ЦФО.Код = ""ЦФО_88"") КАК ЦФОСтруктурныхЕдиницСрезПоследних) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЛОЖЬ КАК Развитие
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИСТИНА) КАК ТекЗаписи
	|		ПО ВложенныйЗапрос.Развитие = ТекЗаписи.Развитие";
	Запрос.УстановитьПараметр("ТТ",Объект.Ссылка);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

&НаКлиенте
Процедура ПлощадьПриИзменении(Элемент)
	Объект.ПлощадьПодсобныхПомещений = Объект.ОбщаяПлощадь - Объект.ТорговаяПлощадь;
	//+++ AK suvv 12.07.2018 ИП-00019053
	ИзменениеАвтораРеквизита("ОбщаяПлощадь");
	ИзменениеАвтораРеквизита("ПлощадьПодсобныхПомещений");
	//--- AK suvv
КонецПроцедуры

//+++ AK suvv 12.07.2018 ИП-00019053 
&НаКлиенте
Процедура ИзменениеАвтораРеквизита(НазваниеРеквизита)
	
	Если Объект[НазваниеРеквизита] <> Объект.Ссылка[НазваниеРеквизита] Тогда
		НадписьАвторРеквизита = НазваниеРеквизита + "Автор";
		Элементы[НадписьАвторРеквизита].Заголовок = "Автор:" + ТекПользователь;
	КонецЕсли;
	
КонецПроцедуры // --- AK suvv

//+++AK GREK 10.10.2017 ИП-00015325.01
&НаКлиенте
Процедура БонусПоПередачеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.БонусПоПередаче) И ЗначениеЗаполнено(Объект.ДатаНачалаПередачи) ТОгда
		Объект.ДатаОкончанияПередачи=Объект.ДатаНачалаПередачи+Объект.БонусПоПередаче.КоличествоДнейПередачи*24*3600
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПомощникУправляющегоПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ЦФОПередачи) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПерезаполненииЦФО", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перезаполнить ЦФО передачи?';"), Режим, 0);
	
	Иначе
		Объект.ЦФОПередачи = ПодборЦФОПоПользователямЦФО(Объект.ПомощникУправляющего);
	КонецЕсли;
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	//Если Объект.ПомощникУправляющего.Родитель <> ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда
	//	Управляющий = Объект.ПомощникУправляющего.Родитель;
	//КонецЕсли;
	ПомощникУправляющегоРодитель = ПолучитьРеквизитОбъекта(Объект.ПомощникУправляющего, "Родитель");
	Если  ПомощникУправляющегоРодитель <> ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда
		Управляющий = ПомощникУправляющегоРодитель;
	КонецЕсли;
	//---АК SUVV
КонецПроцедуры

&НаСервере
Функция ПодборЦФОПоПользователямЦФО(Сотрудник)
	ВозвращаемаяЦФО = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПользователиПоЦФОСрезПоследних.ЦФО
	                |ИЗ
	                |	РегистрСведений.ПользователиПоЦФО.СрезПоследних КАК ПользователиПоЦФОСрезПоследних
	                |ГДЕ
	                |	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		ВозвращаемаяЦФО = Выборка.Следующий().ЦФО; 
	КонецЕсли;
	Возврат	ВозвращаемаяЦФО;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПерезаполненииЦФО(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

    Объект.ЦФОПередачи = ПодборЦФОПоПользователямЦФО(Объект.ПомощникУправляющего);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПередачиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.БонусПоПередаче) Тогда
		Объект.ДатаОкончанияПередачи=Объект.ДатаНачалаПередачи+Объект.БонусПоПередаче.КоличествоДнейПередачи*24*3600
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура БонусПоПередачеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ЗначенияОтбора = Новый Структура("Действует",ИСТИНА);
	//ПараметрыВыбора =  Новый Структура("Отбор", ЗначенияОтбора);
	//ОткрытьФорму("Справочник.БонусыПоРаскруткеТТ.ФормаВыбора", ПараметрыВыбора, Элемент);
	#Если НЕ ВебКлиент Тогда
	ФормаВыбора = Справочники.БонусыПоРаскруткеТТ.ПолучитьФормуВыбора(,Элемент);
	
	ФормаВыбора.Отбор.Действует.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.Отбор.Действует.Значение = Истина;
	ФормаВыбора.Отбор.Действует.Использование = Истина;
	Если ЗначениеЗаполнено(МагазинПередачи) Тогда
		ФормаВыбора.Отбор.ТипТочки.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.ТипТочки.Значение = МагазинПередачи.ТипРозничнойТочки;
		ФормаВыбора.Отбор.ТипТочки.Использование = Истина;
	КонецЕсли;	
	ФормаВыбора.Открыть();
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура КорпусСтроенияПриИзменении(Элемент)
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры
//---AK

//+++AK GREK 24.10.2017 ИП-00014283.14

&НаКлиенте
Процедура НомерКорпусаПриИзменении(Элемент)
	НомерСтроения = "";
	Объект.КорпусСтроения = " к. " + НомерКорпуса;
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура НомерСтроенияПриИзменении(Элемент)
	НомерКорпуса = "";
	Объект.КорпусСтроения = " стр. " + НомерСтроения;
	Если СокрЛП(Объект.Адрес)="" Или НовыйЭлемент Тогда
		УстановитьАдрес()
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КтоОткрылНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//НовыйПараметр = Новый ПараметрВыбора("Отбор.Должность","Менеджер по проекту"); 
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(НовыйПараметр);
	//НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	//Элементы.КтоОткрыл.ПараметрыВыбора = НовыеПараметры;
	#Если НЕ ВебКлиент Тогда
	СписокДолжностей = новый СписокЗначений;
	СписокДолжностей.Добавить("Управляющий по развитию","Управляющий по развитию");
	СписокДолжностей.Добавить("Менеджер по проекту","Менеджер по проекту");
	СписокДолжностей.Добавить("Управляющий отдела развития","Управляющий отдела развития");
	СписокДолжностей.Добавить("Специалист по развитию","Специалист по развитию");
	СписокДолжностей.Добавить("Заместитель руководителя по строительству","Заместитель руководителя по строительству");
	СписокДолжностей.Добавить("Директор по развитию","Директор по развитию");
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.Должность.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Значение = СписокДолжностей;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Использование = Истина;
	//ФормаВыбора.СправочникСписок.ИерархическийПросмотр = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
	ФормаВыбора.Открыть();
	#КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура УправляющийРозницейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	#Если НЕ ВебКлиент Тогда
	СписокДолжностей = новый СписокЗначений;
	СписокДолжностей.Добавить("Территориальный управляющий","Территориальный управляющий");
	//+++ AK suvv 19.06.2018 ИП-00018779
	СписокДолжностей.Добавить("Региональный территориальный управляющий","Региональный территориальный управляющий");
	//--- AK suvv
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.Должность.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Значение = СписокДолжностей;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Использование = Истина;
	//ФормаВыбора.СправочникСписок.ИерархическийПросмотр = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
	ФормаВыбора.Открыть();
	#КонецЕсли
КонецПроцедуры
//---AK

//--- AK suvv 17.08.2018 ИП-00019353
&НаКлиенте
Процедура РуководительПоСтроительствуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДолжностей = Новый СписокЗначений;
	СписокДолжностей.Добавить("Руководитель по строительству","Руководитель по строительству");
	
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.Должность.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Значение = СписокДолжностей;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
	ФормаВыбора.Открыть();
	
	//проверить на вебе
КонецПроцедуры //--- AK suvv

//--- AK suvv 17.08.2018 ИП-00019353
&НаКлиенте
Процедура РуководительПоСтроительствуПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры //--- AK suvv

//+++AK GREK 09.11.2017 ИП-00014283.15
&НаКлиенте
Процедура ОбновитьУлицаСокрНаименование()
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		ПолучитьУлицаСокрНаименование(УлицаБезТипа(Объект.Улица));
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокращенноеНаименование.Видимость	= Истина;
		Иначе
			Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.УлицаСокращенноеНаименование.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры

//+++AK GREK 09.11.2017 ИП-00014283.15
&НаСервере
Процедура ПолучитьУлицаСокрНаименование(УлицаДляПоиска = Неопределено)
	Если УлицаДляПоиска = Неопределено Тогда
		УлицаДляПоиска = Объект.Улица;
	КонецЕсли;
	Если ЗначениеЗаполнено(УлицаДляПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	СтруктурныеЕдиницы.УлицаСокрНаименование КАК УлицаСокрНаименование,
		                |	ВЫБОР
		                |		КОГДА СтруктурныеЕдиницы.Город = &Город
		                |			ТОГДА 1
		                |		ИНАЧЕ 0
		                |	КОНЕЦ + ВЫБОР
		                |		КОГДА СтруктурныеЕдиницы.Регион = &Регион
		                |			ТОГДА 1
		                |		ИНАЧЕ 0
		                |	КОНЕЦ КАК РейтингПохожести
		                |ИЗ
		                |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		                |ГДЕ
		                |	СтруктурныеЕдиницы.Адрес ПОДОБНО &Улица
		                |	И СтруктурныеЕдиницы.УлицаСокрНаименование <> """"
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	РейтингПохожести УБЫВ";
		Запрос.УстановитьПараметр("Город", Объект.Город);
		Запрос.УстановитьПараметр("Регион", Объект.Регион);
		Запрос.УстановитьПараметр("Улица","%"+УлицаДляПоиска+"%");
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Объект.УлицаСокрНаименование = "";
		Иначе
			РезультатПоиска = Рез.Выгрузить();
			Объект.УлицаСокрНаименование = РезультатПоиска[0].УлицаСокрНаименование;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОпределитьКоординатыБезОтображенияФормы()
	Если НЕ ЗначениеЗаполнено(Объект.Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	КоординатыОпределены = Ложь;
	попытка
		СтрокаКоординат = "";
		WinHttp = ПолучитьГеокодерЯндекс();
		ЭлементыАдреса = Новый Массив;
		КоординатыОпределены=ПолучитьСтрокуКоординат(WinHttp,"" + Объект.Город + " " +Объект.Адрес,СтрокаКоординат,ЭлементыАдреса);
		ответГород = ЭлементыАдреса[0];
		ответУлица = ЭлементыАдреса[1];
		ответДом = ЭлементыАдреса[2];
	Исключение
		Сообщить("Ошибка при определении координат: "+ОписаниеОшибки());
	КонецПопытки;
		
	Если КоординатыОпределены Тогда
		Если WinHttp=Неопределено Тогда
		    WinHttp = ПолучитьГеокодерЯндекс();
		КонецЕсли;
		ответСервера = ПолучитьСведенияПоКоординатам(WinHttp,СтрокаКоординат,"district");
		ответОкруг = ПолучитьЗначениеКомпонента(ответСервера,"district");
		ответРайон = ПолучитьЗначениеКомпонента(ответСервера,"district");
		ответСервера = ПолучитьСведенияПоКоординатам(WinHttp,СтрокаКоординат,"metro");
		ответСтанцияМетро = ПолучитьЗначениеКомпонента(ответСервера,"metro");
		Рез = новый Структура;
		Рез.Вставить("Город",ответГород);
		Рез.Вставить("Дом",ответДом);
		Рез.Вставить("КоординатыОпределены",КоординатыОпределены);
		Рез.Вставить("Метро",ответСтанцияМетро);
		Рез.Вставить("Округ",ответОкруг);
		Рез.Вставить("Район",ответРайон);
		Рез.Вставить("СтрокаКоординат",СтрокаКоординат);
		Рез.Вставить("Улица",ответУлица);
		Возврат Рез;
	КонецЕсли;
    Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьГеокодерЯндекс() экспорт
	
	Попытка
		
		Сервис = "geocode-maps.yandex.ru";
		Порт = 443;
		
	    WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	    WinHttp.Option(2,"utf-8");
	    WinHttp.Open("POST","https://geocode-maps.yandex.ru:443/1.x/",0);
	    WinHttp.SetRequestHeader("Accept-Language", "ru");
	    WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	    WinHttp.setRequestHeader("Content-Language", "ru");
	    WinHttp.setRequestHeader("Content-Charset", "utf-8");
	    WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
		
		Возврат WinHttp;
		
	Исключение	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция Координаты41(СтрокаКоординат,Реверс=Ложь) экспорт
	Поз=Найти(СтрокаКоординат,",");
	Если Поз=0 тогда
		Поз=Найти(СтрокаКоординат," ");
	КонецЕсли;        		
	
	Если Поз=0 тогда
		Возврат "";
	КонецЕсли;
	
	К1=лев(сокрлп(Лев(СтрокаКоординат,Поз-1)),20);
	К2=лев(сокрлп(Сред(СтрокаКоординат,Поз+1)),20);
	
	Если Реверс тогда
		Возврат К2+","+К1;
	иначе
		Возврат К1+","+К2;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьТекстПоТэгу(ИсхСтрока,Тэг,Очистить=Ложь)
	КС = СтрДлина(Тэг);
	П1=найти(ИсхСтрока,"<"+Тэг+">");
	П2=найти(ИсхСтрока,"</"+Тэг+">");
	Если П1*П2=0 Тогда
		Результат = ""
	Иначе
		Результат = Сред(ИсхСтрока,П1+2+КС,П2-П1-2-КС)
	КонецЕсли;
	Если Очистить и Результат <>"" Тогда
		ИсхСтрока = Лев(ИсхСтрока,П1-1)+Сред(ИсхСтрока,П2+3+СтрДлина(Тэг))
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрокуКоординат(WinHttp,Адрес,СтрокаКоординат,ЭлементыАдреса=Неопределено) экспорт
    WinHttp.Send("geocode="+Адрес);
    ОтветСервера = WinHttp.ResponseText();
	п1=найти(ОтветСервера,"<pos>");
	п2=найти(ОтветСервера,"</pos>");
	Если п1>0 и п2>п1 тогда
		СтрокаКоординат=Координаты41(сред(ОтветСервера,п1+5,п2-п1-5),Истина);
		Если Не ЭлементыАдреса = Неопределено Тогда
			ЭлементыАдреса.Очистить();
			ЭлементыАдреса.Добавить(ВернутьТекстПоТэгу(ОтветСервера,"LocalityName"));
			ЭлементыАдреса.Добавить(ВернутьТекстПоТэгу(ОтветСервера,"ThoroughfareName"));
			ЭлементыАдреса.Добавить(ВернутьТекстПоТэгу(ОтветСервера,"PremiseNumber"));
		КонецЕсли;
	    Возврат НЕ ПустаяСтрока(СтрокаКоординат);
	иначе
		СтрокаКоординат="";
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияПоКоординатам(WinHTTP,Координаты,Тип)Экспорт
    WinHttp.Send("geocode="+Координаты41(Координаты,Истина)+"&kind="+Тип);
    ОтветСервера = WinHttp.ResponseText();
	Возврат ответСервера
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКомпонента(ответСервера,Тип)Экспорт
	Попытка
		Компонент=ВернутьТекстПоТэгу(ОтветСервера,"Component",Истина);
		Пока Компонент<>"" Цикл
			Если ВернутьТекстПоТэгу(Компонент,"kind")=Тип Тогда
				Возврат ВернутьТекстПоТэгу(Компонент,"name")
			КонецЕсли;
			Компонент=ВернутьТекстПоТэгу(ОтветСервера,"Component",Истина);
		КонецЦикла;
		Возврат ""
	Исключение
		Возврат ""
	КонецПопытки
КонецФункции

&НаКлиенте
Процедура ФайлРасстановкиПромоутеровНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ФайлРасстановкиПромоутеров.Пустая()Тогда
		СтандартнаяОбработка = Ложь;
		//+++АК SUVV 2018.03.06 ИП-00017818
		#Если ВебКлиент Тогда 	

			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлРасстановкиПромоутеровВеб", ЭтаФорма);
			ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .png)|*.pdf;*.jpeg;*.jpg;*.png";
			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
			НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);

		#Иначе
		//---АК SUVV
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .png)|*.pdf;*.jpeg;*.jpg;*.png";
			Если ДиалогВыбораФайла.Выбрать() Тогда
				Файл = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
				РасширениеФайла = Сред(ДиалогВыбораФайла.ПолноеИмяФайла, Найти(ДиалогВыбораФайла.ПолноеИмяФайла,".")+1);
				//+++АК SUVV 2018.03.06 ИП-00017818	
				//Объект.ФайлРасстановкиПромоутеров = ЗагрузитьФайлРасстановкиПромоутеровНаСервере(Файл,"Схема расстановки промоутеров", РасширениеФайла);
				Объект.ФайлРасстановкиПромоутеров = ЗагрузитьФайлРасстановкиПромоутеровНаСервере(Файл,"Схема расстановки промоутеров", РасширениеФайла, Ложь);
				//---АК SUVV
			КонецЕсли;
			
		//+++АК SUVV 2018.03.05 ИП-00017818
		#КонецЕсли
		//---АК SUVV
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьФайлРасстановкиПромоутеровНаСервере(ТелоФайла,Имя, РасширениеФайла,ЭтоВебКлиент)
	
	//+++АК SUVV 2018.03.06 ИП-00017818	
	Если ЭтоВебКлиент Тогда 
		ТелоФайла = ПолучитьИзВременногоХранилища(ТелоФайла);	
	КонецЕсли;
	//---АК SUVV
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = РасширениеФайла;
	Файл.Наименование = Имя;
	Файл.ИмяПодкаталога = "Схема растановки промоутеров";
	Файл.Записать();
	ТелоФайла.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	Возврат Файл.Ссылка
КонецФункции

//+++АК SUVV 2018.03.06 ИП-00017818	
&НаКлиенте
Процедура ЗагрузитьФайлРасстановкиПромоутеровВеб(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ПомещенныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПомещенныйФайл из ПомещенныеФайлы Цикл
		ИмяФайла = ПомещенныйФайл.Имя;
		РасширениеФайла = Сред(ИмяФайла, Найти(ИмяФайла, ".") + 1);
		Адрес = ПомещенныйФайл.Хранение;
		Объект.ФайлРасстановкиПромоутеров = ЗагрузитьФайлРасстановкиПромоутеровНаСервере(Адрес, "Схема расстановки промоутеров", РасширениеФайла, Истина);	
	КонецЦикла;

КонецПроцедуры //---АК SUVV

&НаСервереБезКонтекста
Процедура ПривязатьФайлыКЭлемнтуСправочника(Магазин, СписокКодовФайлов)
	//+++АК SUVV 2018.03.05 ИП-00017818
	//УДАЛИТЬ ПРОЦЕДУРУ, больше не используется
	//Для каждого Код из СписокКодовФайлов Цикл
	//	НЗ= РегистрыСведений.АК_ФайлыМагазинов.СоздатьНаборЗаписей();
	//	НЗ.Отбор.КодФайла.Установить(Код);
	//	НЗ.Прочитать();
	//	Для каждого Запись из НЗ цикл
	//		Запись.Магазин = Магазин;
	//	КонецЦикла;
	//	НЗ.Записать();
	//КонецЦикла;
	//---АК SUVV
КонецПроцедуры  

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//+++АК SUVV 2018.03.05 ИП-00017818
	//от регистра отказались, теперь не нужно 
	//Если СписокКодовФайлов.Количество()>0 Тогда
	//	ПривязатьФайлыКЭлемнтуСправочника(Объект.Ссылка,СписокКодовФайлов);	
	//КонецЕсли;
	//---АК SUVV
	
	//+++AK GREK 09.11.2017 ИП-00016600
	Если НовыйЭлемент Тогда
		РассылкаПриСозданииНовойТочки();
	КонецЕсли;
	//---AK
	
	//+++AK GREK 30.11.2017 ИП-00015325.02
	Если ЗапросПодтвержденияПередачи Тогда
		ОтправитьЗапросНаПодтверждениеПередачи();	
	КонецЕсли;
	//---AK
		
	//+++AK suvv 03.04.2018 ИП-00017689.02
	////+++AK GREK 18.01.2018 ИП-00017689 
	//Если БылИзмененФайлРасстановки И ЗначениеЗаполнено(Объект.ФайлРасстановки) Тогда
	//	РассылкаФайлаРасстановки(КтоОткрыл, УправляющийРозницей);	
	//ИначеЕсли БылИзмененФайлРасстановкиИсходный И ЗначениеЗаполнено(Объект.ФайлРасстановкиИсходный) Тогда
	//	РассылкаИсходногоФайлаРасстановки(КтоОткрыл, УправляющийРозницей);	
	//КонецЕсли;	
	////---AK
	
	//--- AK suvv 21.05.2018 ИП-18555 
	//ОтборФайлыРасстановкиПредварительно = Новый Структура;
	//ОтборФайлыРасстановкиПредварительно.Вставить("Назначение", "СхРасНач");
	//ФайлыРасстановкиПредварительно = ФайлыРасстановкиДляОтправки.НайтиСтроки(ОтборФайлыРасстановкиПредварительно);	
	//Если ФайлыРасстановкиПредварительно.Количество() <> 0 Тогда
	//	РассылкаИсходногоФайлаРасстановки(КтоОткрыл, УправляющийРозницей);
	//КонецЕсли;
	//
	//ОтборФайлыРасстановкиОкончательно = Новый Структура;
	//ОтборФайлыРасстановкиОкончательно.Вставить("Назначение", "СхРасКон");
	//ФайлыРасстановкиОкончательно = ФайлыРасстановкиДляОтправки.НайтиСтроки(ОтборФайлыРасстановкиОкончательно);
	//Если ФайлыРасстановкиОкончательно.Количество() <> 0 Тогда
	//	РассылкаФайлаРасстановки(КтоОткрыл, УправляющийРозницей);	
	//КонецЕсли;
	//
	//ФайлыРасстановкиДляОтправки.Очистить();
	//---AK
	
	//+++ AK suvv 11.04.2018 ИП-00018374
	Если ПараметрыЗаписи.ФормироватьЗаписиВРегистреМестаХраненияМагазинов Тогда 
		СформироватьЗаписиВРегистреМестаХраненияМагазинов();
	КонецЕсли;
	//--- AK suvv
	
	//+++ AK suvv 21.05.2018 ИП-00018555
	ВыполнитьРассылкуОбИзмененииРеквизитов(ПараметрыЗаписи.Категория, ПараметрыЗаписи.КатегорияПодсобноеПомещение, ПараметрыЗаписи.ФактическаяДатаПередачи, ПараметрыЗаписи.ФактическаяПлощадь, ПараметрыЗаписи.ОбщаяПлощадь, ПараметрыЗаписи.КатегорииПодтверждены, ПараметрыЗаписи.МагазинПередан);
	//--- AK suvv
	КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадьПриИзменении(Элемент)
	//+++AK GREK 10.07.2018 ИП-00018854  
	РассчитатьПлощадьНеиспользуемыхПомещений();
	//---AK
	ПересчитатьОбщуюСтоимость();
	
	//+++ AK suvv 12.07.2018 ИП-00019053 
	ИзменениеАвтораРеквизита("ТорговаяПлощадь");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
	
КонецПроцедуры

&НаКлиенте
Процедура КтоПередаетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	#Если НЕ ВебКлиент Тогда
	СписокДолжностей = новый СписокЗначений;
	СписокДолжностей.Добавить("Менеджер по проекту","Менеджер по проекту");
	СписокДолжностей.Добавить("Заместитель руководителя по строительству","Заместитель руководителя по строительству");
	СписокДолжностей.Добавить("Руководитель по строительству","Руководитель по строительству");
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.Должность.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Значение = СписокДолжностей;
	ФормаВыбора.СправочникСписок.Отбор.Должность.Использование = Истина;
	//ФормаВыбора.СправочникСписок.ИерархическийПросмотр = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
	ФормаВыбора.Открыть();
	#КонецЕсли
КонецПроцедуры

&НаСервере
//+++AK GREK 09.11.2017 ИП-00016600
//Добавляем рассылку из 1с при создании т.к. нужно приереплять файлы к письмам
Процедура РассылкаПриСозданииНовойТочки(ОтправитьТолькоПисьмоНаРегистрациюКасс = Ложь)
	ДанныеДляРассылки = Новый Структура;
	ДанныеДляРассылки.Вставить("АдресМагазина","" + Объект.Регион + ", " + Объект.Город.ПолноеНаименование + ", " + Объект.Адрес);
	ДанныеДляРассылки.Вставить("ДатаОткрытия",Объект.ДатаОткрытия);
	ДанныеДляРассылки.Вставить("МенеджерПроекта",КтоОткрыл);
	//ТекПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	ДанныеДляРассылки.Вставить("Автор",ТекПользователь.ФизЛицо);	
	ДанныеДляРассылки.Вставить("КтоПередает",Объект.КтоПередает.Наименование);
	ДанныеДляРассылки.Вставить("КоличествоКасс",Объект.КоличествоКасс);
	ДанныеДляРассылки.Вставить("Ссылка",Объект.Ссылка);
	ДанныеДляРассылки.Вставить("СуммаАрендыПостоянная",СуммаАрендыПостоянная);
	ДанныеДляРассылки.Вставить("СуммаАрендыПеременная",СуммаАрендыПеременная);
	//+++AK GREK 09.12.2017 ИП-00016600.01
	ДанныеДляРассылки.Вставить("НомерТочки",Объект.НомерТочки);
	//---AK
	//+++АК SUVV 2018.03.05 ИП-00017818
	ДанныеДляРассылки.Вставить("Файлы", Объект.Файлы);
	//---АК SUVV
	//+++AK GREK 10.07.2018 ИП-00018854      
	ДанныеДляРассылки.Вставить("ТорговаяПлощадь",Объект.ТорговаяПлощадь);
	ДанныеДляРассылки.Вставить("ПлощадьПодсобныхПомещений",Объект.ПлощадьПодсобныхПомещений);				
	//---AK
	//+++ AK suvv 2018.09.05 ИП-00019700
	ДанныеДляРассылки.Вставить("ПлощадьСубаренды",Объект.ПлощадьСубаренды);
	//--- AK suvv
	//+++ AK suvv 2018.10.08 ИП-00020068 
	ДанныеДляРассылки.Вставить("ТипРозничнойТочки",Объект.ТипРозничнойТочки);
	//--- AK suvv
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки("Razvitie@vkusvill.ru");
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	Если НЕ ОтправитьТолькоПисьмоНаРегистрациюКасс Тогда  
		РассылкаИнформацииОПланируемомОткрытии(Почта, УчетнаяЗапись, ДанныеДляРассылки);
		РассылкаСканаДоговора(Почта, УчетнаяЗапись, ДанныеДляРассылки);
		РассылкаИнформацииМенеджерамОтделаАренды(Почта, УчетнаяЗапись, ДанныеДляРассылки);
	КонецЕсли;
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	//для исключения задвоения при отправке
	//Если ЗначениеЗаполнено(Объект.КоличествоКасс) Тогда
	Если ЗначениеЗаполнено(Объект.КоличествоКасс) и ОтправитьТолькоПисьмоНаРегистрациюКасс Тогда
	//---АК SUVV
		РассылкаПисемНаРегистрациюКасс(Почта, УчетнаяЗапись, ДанныеДляРассылки);
	КонецЕсли;
	КонецПроцедуры

&НаСервереБезКонтекста
//+++AK GREK 09.11.2017 ИП-00016600
Процедура РассылкаИнформацииОПланируемомОткрытии(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Заявка на открытие нового магазина ВВ: "+ ДанныеДляРассылки.НомерТочки + " " + ДанныеДляРассылки.АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	ТекстПисьма = "
		|Уважаемые коллеги!
		|
		|Сообщаю Вам об открытии нового магазина ВВ по адресу: &НомерТочки &АдресМагазина
		|
		|Ориентировочная дата открытия &ДатаОткрытия
		|
		|Менеджер проекта: &МенеджерПроекта
		|&ИнформацияПоПлощадиПомещения
		//+++ AK suvv 2018.10.08 ИП-00020068
		|Тип розничной точки: &ТипРозничнойТочки
		//--- AK suvv
		|Подробную информацию о структурной единице можно найти в 1с
		|
		|С Уважением, &Автор &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина"  , ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ДатаОткрытия"   , Формат(ДанныеДляРассылки.ДатаОткрытия,"ДФ=dd.MM.yyyy"));
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Автор"			 , ДанныеДляРассылки.Автор);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	 , ДанныеДляРассылки.НомерТочки);
	//+++AK GREK 10.07.2018 ИП-00018854  
	Если ЗначениеЗаполнено(ДанныеДляРассылки.ТорговаяПлощадь) Тогда
		ОбщаяПлощадь = ДанныеДляРассылки.ПлощадьПодсобныхПомещений + ДанныеДляРассылки.ТорговаяПлощадь;
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИнформацияПоПлощадиПомещения"	 , Символы.ПС + "Общая площадь составляет " + ОбщаяПлощадь + ", в т.ч. торговая площадь " + ДанныеДляРассылки.ТорговаяПлощадь + Символы.ПС);
	Иначе
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИнформацияПоПлощадиПомещения"	 , "");
	КонецЕсли;
	//---AK
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки", ДанныеДляРассылки.ТипРозничнойТочки);
	//--- AK suvv
	
	//Попросили контактные телефон и почту в подпись
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.Автор);
	Рез = Запрос.Выполнить();
	Email = "";
	Телефон = "";
	Если НЕ Рез.Пустой() Тогда
		Для Каждого Стр из Рез.Выгрузить() цикл
			Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				Email = "Email " + СокрЛП(Стр.Представление);	
			ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				Телефон = "Тел. " + СокрЛП(Стр.Представление);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	//Письмо.Вложения.Добавить(ПолученныйФайл);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АК_ГруппыРассылки.ФизЛицо,
	               |	АК_ГруппыРассылки.Емейл
	               |ИЗ
	               |	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	               |ГДЕ
	               |	АК_ГруппыРассылки.Группа = &Группа";
	Запрос.УстановитьПараметр("Группа",ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.ИнформированиеОПланируемомОткрытии"));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	АдресаПолучателей = Рез.Выбрать();
	Пока АдресаПолучателей.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресаПолучателей.Емейл);
	КонецЦикла;

	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
//+++AK GREK 09.11.2017 ИП-00016600
Процедура РассылкаПисемНаРегистрациюКасс(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Регистрация ККМ нового магазина ВВ: по адресу "+ ДанныеДляРассылки.НомерТочки + " " + ДанныеДляРассылки.АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	ТекстПисьма = "
		|Прошу зарегистрировать фискальные регистраторы в количестве &КоличествоКасс 
		|в магазин по адресу &НомерТочки &АдресМагазина
		//+++ AK suvv 2018.10.08 ИП-00020068
		|Тип розничной точки: &ТипРозничнойТочки
		//--- AK suvv
		|
		|С Уважением, &МенеджерПроекта &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина" , ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&КтоПередает"	, ДанныеДляРассылки.КтоПередает);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&КоличествоКасс", ДанныеДляРассылки.КоличествоКасс);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	 , ДанныеДляРассылки.НомерТочки);
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки", ДанныеДляРассылки.ТипРозничнойТочки);
	//--- AK suvv
	
	//Попросили контактные телефон и почту в подпись
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.МенеджерПроекта);
	Рез = Запрос.Выполнить();
	Email = "";
	Телефон = "";
	Если НЕ Рез.Пустой() Тогда
		Для Каждого Стр из Рез.Выгрузить() цикл
			Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				Email = "Email " + СокрЛП(Стр.Представление);	
			ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				Телефон = "Тел. " + СокрЛП(Стр.Представление);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АК_ГруппыРассылки.ФизЛицо,
	               |	АК_ГруппыРассылки.Емейл
	               |ИЗ
	               |	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	               |ГДЕ
	               |	АК_ГруппыРассылки.Группа = &Группа";
	Запрос.УстановитьПараметр("Группа",ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.РассылкаПисемНаРегистрациюКасс"));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	АдресаПолучателей = Рез.Выбрать();
	Пока АдресаПолучателей.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресаПолучателей.Емейл);
	КонецЦикла;
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	// файлы храним в табличной части "Файлы" справочника, а не в регистре сведений 
	//Запрос = новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СправочникФайлы.Ссылка,
	//               |	СправочникФайлы.Наименование,
	//               |	СправочникФайлы.Расширение,
	//               |	СправочникФайлы.ИмяПодкаталога
	//               |ИЗ
	//               |	Справочник.Файлы КАК СправочникФайлы
	//               |ГДЕ
	//               |	СправочникФайлы.Код В
	//               |			(ВЫБРАТЬ
	//               |				АК_ФайлыМагазинов.КодФайла
	//               |			ИЗ
	//               |				РегистрСведений.АК_ФайлыМагазинов КАК АК_ФайлыМагазинов
	//               |			ГДЕ
	//               |				АК_ФайлыМагазинов.Магазин = &МагазинДинСписок)";
	//Запрос.УстановитьПараметр("МагазинДинСписок",ДанныеДляРассылки.Ссылка); 
	//Рез = Запрос.Выполнить();
	//Если Не Рез.Пустой() Тогда
	//	СканыДоговоров = Рез.Выбрать();
	//	Пока СканыДоговоров.Следующий() Цикл
	//		Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(СканыДоговоров.Ссылка));
	//	КонецЦикла;	
	//КонецЕсли;
	ОтборСканы = Новый Структура;
	ОтборСканы.Вставить("Назначение", "Сканы");
	Сканы = ДанныеДляРассылки.Файлы.НайтиСтроки(ОтборСканы);
	Если Сканы <> неопределено Тогда 
		Для Каждого Стр Из Сканы Цикл
			Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл));
		КонецЦикла;	
	КонецЕсли;
	//---АК SUVV
	
	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
//+++AK GREK 09.11.2017 ИП-00016600
Процедура РассылкаСканаДоговора(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Скан договора нового магазина ВВ: по адресу: "+ДанныеДляРассылки.НомерТочки + " " +ДанныеДляРассылки.АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	ТекстПисьма = "
		|Добрый день!
		|
		|Уважаемые коллеги, к письму прикреплен скан договора магазина ВВ: по адресу: &НомерТочки &АдресМагазина
		//+++ AK suvv 2018.10.08 ИП-00020068
		|
		|Тип розничной точки: &ТипРозничнойТочки
		//--- AK suvv
		|
		|Просьба оплатить депозит согласно условий договора.
		|
		|С Уважением, &МенеджерПроекта &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина" , ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	 , ДанныеДляРассылки.НомерТочки);
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки", ДанныеДляРассылки.ТипРозничнойТочки);
	//--- AK suvv
	
	//Попросили контактные телефон и почту в подпись
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.МенеджерПроекта);
	Рез = Запрос.Выполнить();
	Email = "";
	Телефон = "";
	Если НЕ Рез.Пустой() Тогда
		Для Каждого Стр из Рез.Выгрузить() цикл
			Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				Email = "Email " + СокрЛП(Стр.Представление);	
			ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				Телефон = "Тел. " + СокрЛП(Стр.Представление);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АК_ГруппыРассылки.ФизЛицо,
	               |	АК_ГруппыРассылки.Емейл
	               |ИЗ
	               |	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	               |ГДЕ
	               |	АК_ГруппыРассылки.Группа = &Группа";
	Запрос.УстановитьПараметр("Группа",ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.РассылкаСканаДоговора"));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	АдресаПолучателей = Рез.Выбрать();
	Пока АдресаПолучателей.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресаПолучателей.Емейл);
	КонецЦикла;
	
	//+++АК SUVV 2018.03.05 ИП-00017818
	// файлы храним в табличной части справочника, а не в регистре сведений
	//Запрос = новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СправочникФайлы.Ссылка,
	//               |	СправочникФайлы.Наименование,
	//               |	СправочникФайлы.Расширение,
	//               |	СправочникФайлы.ИмяПодкаталога
	//               |ИЗ
	//               |	Справочник.Файлы КАК СправочникФайлы
	//               |ГДЕ
	//               |	СправочникФайлы.Код В
	//               |			(ВЫБРАТЬ
	//               |				АК_ФайлыМагазинов.КодФайла
	//               |			ИЗ
	//               |				РегистрСведений.АК_ФайлыМагазинов КАК АК_ФайлыМагазинов
	//               |			ГДЕ
	//               |				АК_ФайлыМагазинов.Магазин = &МагазинДинСписок)";
	//Запрос.УстановитьПараметр("МагазинДинСписок",ДанныеДляРассылки.Ссылка); 
	//Рез = Запрос.Выполнить();
	//Если Не Рез.Пустой() Тогда
	//	СканыДоговоров = Рез.Выбрать();
	//	Пока СканыДоговоров.Следующий() Цикл
	//		Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(СканыДоговоров.Ссылка));
	//	КонецЦикла;	
	//КонецЕсли;
	ОтборСканы = Новый Структура;
	ОтборСканы.Вставить("Назначение", "Сканы");
	Сканы = ДанныеДляРассылки.Файлы.НайтиСтроки(ОтборСканы);
	Если Сканы <> неопределено Тогда 
		Для Каждого Стр из Сканы Цикл
			Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл));
		КонецЦикла;	
	КонецЕсли;
	//---АК SUVV
	
	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
//+++AK GREK 09.11.2017 ИП-00016600
Процедура РассылкаИнформацииМенеджерамОтделаАренды(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Проверка суммы арендной платы нового магазина ВВ: по адресу: "+ДанныеДляРассылки.НомерТочки + " " +ДанныеДляРассылки.АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	ТекстПисьма = "
		|Добрый день!
		|
		|Прошу сверить суммы арендной платы нового магазина ВВ: по адресу: &НомерТочки &АдресМагазина
		|
		|Сумма аренды постоянная: &СуммаАрендыПостоянная
		|
		|Сумма аренды переменная: &СуммаАрендыПеременная
		//+++ AK suvv 2018.09.05 ИП-00019700
		|
		|Наличие площади субаренды: &НаличиеПлощадиСубаренды
		|
		|Менеджер по открытию: &МенеджерПроекта
		//--- AK suvv
		//+++ AK suvv 2018.10.08 ИП-00020068
		|
		|Тип розничной точки: &ТипРозничнойТочки
		//--- AK suvv
		|
		|С Уважением, &МенеджерПроекта &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина" , ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&СуммаАрендыПеременная" , ДанныеДляРассылки.СуммаАрендыПеременная);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&СуммаАрендыПостоянная" , ДанныеДляРассылки.СуммаАрендыПостоянная);
	//+++ AK suvv 2018.09.05 ИП-00019700
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НаличиеПлощадиСубаренды", ?(ДанныеДляРассылки.ПлощадьСубаренды <> 0, "да (" + ДанныеДляРассылки.ПлощадьСубаренды + "м2)", "нет"));
	//--- AK suvv
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	 , ДанныеДляРассылки.НомерТочки);
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки", ДанныеДляРассылки.ТипРозничнойТочки);
	//--- AK suvv
	
	//Попросили контактные телефон и почту в подпись
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.МенеджерПроекта);
	Рез = Запрос.Выполнить();
	Email = "";
	Телефон = "";
	Если НЕ Рез.Пустой() Тогда
		Для Каждого Стр из Рез.Выгрузить() цикл
			Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				Email = "Email " + СокрЛП(Стр.Представление);	
			ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				Телефон = "Тел. " + СокрЛП(Стр.Представление);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АК_ГруппыРассылки.ФизЛицо,
	               |	АК_ГруппыРассылки.Емейл
	               |ИЗ
	               |	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	               |ГДЕ
	               |	АК_ГруппыРассылки.Группа = &Группа";
	Запрос.УстановитьПараметр("Группа",ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.РассылкаИнформацииМенеджерамОтделаАренды"));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	АдресаПолучателей = Рез.Выбрать();
	Пока АдресаПолучателей.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресаПолучателей.Емейл);
	КонецЦикла;
	
	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
//+++AK GREK 30.11.2017 ИП-00015325.02
Процедура ОтправитьЗапросНаПодтверждениеПередачи()
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Требуется подтверждение передачи новой торговой точки";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	ТекстПисьма = "
		|Вам был отправлен запрос на подтверждение передачи торговой точки по адресу: &АдресМагазина
		|
		|Подтвердить передачу можно по ссылке http://it-stuff.ru/IzbenkaFin/ru_RU/?C=FormaPeredachiMag";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина" , Объект.Адрес);
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид
	               |	И КонтактнаяИнформация.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Запрос.УстановитьПараметр("Вид",  ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));	
	Запрос.УстановитьПараметр("Объект", Объект.ПомощникУправляющего);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить("Не найден адрес отправки письма подтверждения передачи новой торговой точки. Письмо не отправлено.");
		Возврат;
	КонецЕсли;
	АдресаПолучателя = Рез.Выгрузить();
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = СокрЛП(АдресаПолучателя[0].Представление);

	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТипУлицыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Улица) И НовыйЭлемент Тогда
		УстановитьАдрес();
	КонецЕсли;
КонецПроцедуры

//+++ AK suvv 21.05.2018 ИП-00018555
Функция ТекПользовательАкцептант()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользователиСПравомАкцептаОплат.Пользователь КАК Акцептант,
	|	ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо КАК ФизЛицо,
	|	ПользователиСПравомАкцептаОплат.Родитель.Пользователь КАК Родитель,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Пользователь КАК Дед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Пользователь КАК Прадед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Пользователь КАК Прапрадед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Родитель.Пользователь КАК Прапрапрадед
	|ИЗ
	|	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
	|ГДЕ
	|	ПользователиСПравомАкцептаОплат.Активен
	|	И ПользователиСПравомАкцептаОплат.Пользователь = &Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	ПользователиСПравомАкцептаОплат.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо,
	|	ПользователиСПравомАкцептаОплат.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Родитель.Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//+++ AK suvv 21.05.2018 ИП-00018555
&НаСервере
Процедура ВыполнитьРассылкуОбИзмененииРеквизитов(СтараяКатегория, СтараяКатегорияПодсобноеПомещение, СтараяФактическаяДатаПередачи, СтараяФактическаяПлощадь, СтараяОбщаяПлощадь, СтароеЗначениеКатегорииПодтверждены, СтароеЗначениеМагазинПередан)
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект"); 

	СправочникОбъект.РассылкаИсходногоФайлаРасстановки(Объект.Ссылка, КтоОткрыл, УправляющийРозницей, РуководительПоСтроительству, ФайлыРасстановкиДляОтправки);	
	СправочникОбъект.РассылкаФайлаРасстановки(Объект.Ссылка, КтоОткрыл, УправляющийРозницей, РуководительПоСтроительству, ФайлыРасстановкиДляОтправки);	
	ФайлыРасстановкиДляОтправки.Очистить();
		
	Если Объект.Категория <> СтараяКатегория или Объект.КатегорияПодсобноеПомещение <> СтараяКатегорияПодсобноеПомещение Тогда 
		СправочникОбъект.РассылкаПриИзмененииКатегорииСЕ(Объект.Ссылка);
		//+++ AK suvv 12.07.2018 ИП-00019053
		//СтараяКатегория = Объект.Категория;
		//СтараяКатегорияПодсобноеПомещение = Объект.КатегорияПодсобноеПомещение;
		//--- AK suvv 
	КонецЕсли;
	
	Если Объект.ФактическаяДатаПередачи <> СтараяФактическаяДатаПередачи Тогда 
		СправочникОбъект.РассылкаОПередачеПомещения(Объект.Ссылка);
		//+++ AK suvv 12.07.2018 ИП-00019053
		//СтараяФактическаяДатаПередачи = Объект.ФактическаяДатаПередачи;
		//--- AK suvv
	КонецЕсли;
	
	Если Объект.ФактическаяПлощадь <> СтараяФактическаяПлощадь или Объект.ОбщаяПлощадь <> СтараяОбщаяПлощадь Тогда 		 
		СправочникОбъект.РассылкаОРазницеВПлощадях(Объект.Ссылка);
		//+++ AK suvv 12.07.2018 ИП-00019053
		//СтараяФактическаяПлощадь = Объект.ФактическаяПлощадь;
		//СтараяОбщаяПлощадь = Объект.ОбщаяПлощадь;
		//--- AK suvv
	КонецЕсли;
	
	Если Объект.КатегорииПодтверждены и Объект.КатегорииПодтверждены <> СтароеЗначениеКатегорииПодтверждены  Тогда
		Если (РольДоступна("ЗаявкаНаУслугиМатериалы") или РольДоступна("ПолныеПрава")) и ТекПользовательАкцептант() Тогда
			СправочникОбъект.АкцептованиеЗаявокНаУслуги();
			//+++ AK suvv 12.07.2018 ИП-00019053
			//СтароеЗначениеКатегорииПодтверждены = Объект.КатегорииПодтверждены;
			//--- AK suvv
		КонецЕсли;	
	ИначеЕсли не Объект.КатегорииПодтверждены и Объект.КатегорииПодтверждены <> СтароеЗначениеКатегорииПодтверждены Тогда
		//+++ AK suvv 12.07.2018 ИП-00019053
		//СправочникОбъект.ОтменаАкцептаЗаявокНаУслуги();
		//СтароеЗначениеКатегорииПодтверждены = Объект.КатегорииПодтверждены;
		//--- AK suvv
	КонецЕсли;
	
	//+++AK GREK 10.07.2018 ИП-00018854      
	Если Объект.ПринятАХО <> СтароеЗначениеПринятАХО Тогда
		Если Объект.ПринятАХО Тогда
			СправочникОбъект.РассылкаОПередачеАХО(Объект.Ссылка, Объект.ПринятАХО, КтоОткрыл, УправляющийРозницей); //Если объект принят то файлы актов не нужны
		Иначе
			ОтборФайлыАктВПК = Новый Структура;
			ОтборФайлыАктВПК.Вставить("Назначение", "АктВПК");
			ФайлыАктВПК = Объект.Файлы.НайтиСтроки(ОтборФайлыАктВПК);
			Если ФайлыАктВПК.Количество() = 0 Тогда
				СправочникОбъект.РассылкаОПередачеАХО(Объект.Ссылка, Объект.ПринятАХО, КтоОткрыл, УправляющийРозницей);
			Иначе
				СправочникОбъект.РассылкаОПередачеАХО(Объект.Ссылка, Объект.ПринятАХО, КтоОткрыл, УправляющийРозницей, ФайлыАктВПК);
			КонецЕсли;
		КонецЕсли;
		СтароеЗначениеПринятАХО = Объект.ПринятАХО;
	КонецЕсли;				
	//---AK
	
КонецПроцедуры //--- AK suvv

&НаКлиенте
Процедура ПересчитатьОбщуюСтоимость()
	Объект.ОбщаяСтоимость = Объект.ГенПодряд + Объект.СтоимостьКатегорииПодсобногоПомещения*Объект.ПлощадьПодсобныхПомещений + Объект.СтоимостьКатегории*Объект.ТорговаяПлощадь;	
КонецПроцедуры

&НаКлиенте
Процедура ГенПодрядПриИзменении(Элемент)
	ПересчитатьОбщуюСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКатегорииПриИзменении(Элемент)
	ПересчитатьОбщуюСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКатегорииПодсобногоПомещенияПриИзменении(Элемент)
	ПересчитатьОбщуюСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьПодсобныхПомещенийПриИзменении(Элемент)
	//+++AK GREK 10.07.2018 ИП-00018854  
	РассчитатьПлощадьНеиспользуемыхПомещений();	
	//---AK	
	ПересчитатьОбщуюСтоимость();
	
	//+++ AK suvv 12.07.2018 ИП-00019053 
	ИзменениеАвтораРеквизита("ПлощадьПодсобныхПомещений");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
	
КонецПроцедуры

//+++АК SUVV 2018.03.05 ИП-00017818
&НаСервере
Процедура ФайлУдалениеНаСервере(ФайлКУдалению)
	
	ФайлКУдалениюОбъект = ФайлКУдалению.ПолучитьОбъект();
	
	Попытка 
		ФайлКУдалениюОбъект.Удалить();
	Исключение
		
	КонецПопытки;
			
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.05 ИП-00017818
&НаКлиенте
Процедура ФайлРасстановкиПромоутеровОчистка(Элемент, СтандартнаяОбработка)
	
	ФайлКУдалению = Объект.ФайлРасстановкиПромоутеров;
	Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
		Попытка
			ФайлУдалениеНаСервере(ФайлКУдалению);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.05 ИП-00017818
&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
	
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.05 ИП-00017818
&НаКлиенте
Процедура ФотоДоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
	
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.05 ИП-00017818
&НаКлиенте
Процедура ФотоПослеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
	
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.05 ИП-00017818
&НаКлиенте
Процедура ФайлРасстановкиИсходныйОчистка(Элемент, СтандартнаяОбработка)
	
	ФайлКУдалению = Объект.ФайлРасстановкиИсходный;
	Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
		Попытка
			ФайлУдалениеНаСервере(ФайлКУдалению);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры //---АК SUVV

//+++АК SUVV 2018.03.05 ИП-00017818
&НаКлиенте
Процедура ФайлРасстановкиОчистка(Элемент, СтандартнаяОбработка)
	
	ФайлКУдалению = Объект.ФайлРасстановки;
	Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
		Попытка
			ФайлУдалениеНаСервере(ФайлКУдалению);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры //---АК SUVV

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаСервере
Функция ЗаписатьОбъект()
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	Попытка
		ЭтотОбъект.Записать();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции //---AK

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаСервере
Процедура ВыполнитьРассылкуОГотовностиМагазина()
	
	Массив = Новый Массив;
	МассивПолучателей = новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АК_ГруппыРассылки.Емейл
		|ИЗ
		|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		|ГДЕ
		|	АК_ГруппыРассылки.Группа В(&Группа)";
		
	СписокГрупп = Новый Массив;
	СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.РассылкаОГотовностиМагазина"));

	Запрос.УстановитьПараметр("Группа", СписокГрупп);

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Емейл");

	Получатели = Новый Массив;
	
	Для каждого Емайл из Результат цикл
		Если УправлениеЭлектроннойПочтой.EmailValid(Емайл) тогда
			Получатели.Добавить(Емайл)
		КонецЕсли;	
	КонецЦикла;	

	Массив.Добавить(Получатели);
	
	ТекстПисьма = "
	|Уважаемые коллеги! 
	|
	|Магазин &НаименованиеТочки &НомерТочки готов к открытию.
	//+++ AK suvv 2018.10.08 ИП-00020068
	|
	|Тип розничной точки: &ТипРозничнойТочки	
	//--- AK suvv
	|
	|С Уважением, &Автор &Email &Телефон";

	
	EmailАвтора = "";
	ТелефонАвтора = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
	Запрос.УстановитьПараметр("Объект", Объект.ГотовностьМагазинаАвтор.ФизЛицо);	
	Рез = Запрос.Выполнить().Выгрузить();	
	Для Каждого Стр из Рез Цикл
		Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			EmailАвтора = "Email " + СокрЛП(Стр.Представление);	
		ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			ТелефонАвтора = "Тел. " + СокрЛП(Стр.Представление);	
		КонецЕсли;
	КонецЦикла;
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НаименованиеТочки", Объект.Наименование);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки", Объект.НомерТочки);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Автор", Объект.ГотовностьМагазинаАвтор.ФизЛицо);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", EmailАвтора);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", ТелефонАвтора);
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки", Объект.ТипРозничнойТочки);
	//--- AK suvv
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	КонецЕсли;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Рассылка о готовности магазина";
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Для каждого Получателя из Получатели цикл
		Письмо.Получатели.Добавить(Получателя);	
	КонецЦикла;	
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	
	Почта.Послать(Письмо);
		
КонецПроцедуры //---AK suvv

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаКлиенте
Процедура ГотовностьМагазинаПриИзменении(Элемент)
	
	УспешнаяЗаписьОбъекта = Истина;
	
	//ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ДатаГотовности = ТекущаяДата();
	//Если ВвестиЗначение(ДатаГотовности, "Укажите дату готовности магазина:", ОписаниеТиповДата) Тогда
	//	Если ДатаГотовности = Дата(01,01,0001) Тогда
	//		ПоказатьПредупреждение(, "Неверно указана дата готовности.");
	//		Объект.ГотовностьМагазина = Ложь;
	//		Объект.ГотовностьМагазинаАвтор = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;	
	Ответ = Вопрос("Перед установкой признака готовности сведения о магазине необходимо записать. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Объект.ГотовностьМагазина = Истина;
		Объект.ГотовностьМагазинаДата  = ДатаГотовности;
		Объект.ГотовностьМагазинаАвтор = ТекПользователь;
		УспешнаяЗаписьОбъекта = ЗаписатьОбъект();	
		Если УспешнаяЗаписьОбъекта Тогда
			ВыполнитьРассылкуОГотовностиМагазина();
			Элементы.ГотовностьМагазина.Доступность = Ложь;
			ЭтаФорма.Модифицированность = Ложь;
		Иначе
			Объект.ГотовностьМагазина = Ложь;
			Объект.ГотовностьМагазинаАвтор = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			Объект.ГотовностьМагазинаДата = Дата(01,01,0001);
		КонецЕсли;
	Иначе
		Объект.ГотовностьМагазина = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры //---AK

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаКлиенте
Процедура ДопРасходыПриИзменении(Элемент)
	//+++AK GREK 19.07.2018 ИП-00019282
	//Если Число(Объект.ДопРасходы) > 100000 Тогда 
	//	Объект.ДопРасходы = 100000;
	//	Сообщить("Для дополнительных расходов установлен лимит 100 000.");
	//КонецЕсли;
	//---AK
КонецПроцедуры //---AK

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаКлиенте
Процедура ЗагрузитьФайлРасстановки(Команда)
	
	Если Команда.Имя = "ЗагрузитьСхемуРасстановкиПредварительно" Тогда
		Назначение = "СхРасНач";
		НаименованиеФайлаРасстановки = "Расстановка оборудования начальный";
	ИначеЕсли Команда.Имя = "ЗагрузитьСхемуРасстановкиОкончательно" Тогда
		Назначение = "СхРасКон";
		НаименованиеФайлаРасстановки = "Расстановка оборудования";
	Иначе
		Назначение = "Другое";
		НаименованиеФайлаРасстановки = "Расстановка оборудования (прочее)";
	КонецЕсли;
	
	#Если ВебКлиент Тогда 	
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("Наименование", НаименованиеФайлаРасстановки);
		СтруктураДополнительныхПараметров.Вставить("Назначение", Назначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлРасстановкиВеб", ЭтаФорма, СтруктураДополнительныхПараметров);
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
		
	#Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Если ДиалогВыбораФайла.Выбрать() Тогда
			Файл = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
			//+++AK GREK 02.07.2018 ИП-00018854     
			СтруктураФайла = РазобратьИмяФайла(ДиалогВыбораФайла.ПолноеИмяФайла); 
			НаименованиеФайлаРасстановки = СтруктураФайла.Наименование; 
			//---AK
			ЗагрузитьФайлРасстановкиНаСервере(Файл, НаименованиеФайлаРасстановки, Прав(ДиалогВыбораФайла.ПолноеИмяФайла,3),Назначение , Ложь);
		КонецЕсли;
		
	#КонецЕсли
		
КонецПроцедуры //---AK

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаСервере
Процедура ЗагрузитьФайлРасстановкиНаСервере(ТелоФайла, Имя, Расширение = "DWG", Назначение, ЭтоВебКлиент)
	
	Если ЭтоВебКлиент Тогда 
		ТелоФайла = ПолучитьИзВременногоХранилища(ТелоФайла);	
	КонецЕсли;
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = Расширение;
	Файл.Наименование = Имя;
	Файл.ИмяПодкаталога = "Расстановка оборудования";
	Файл.Записать();
	ТелоФайла.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
		
	НоваяЗаписьТЧФайлы = Объект.Файлы.Добавить();
	НоваяЗаписьТЧФайлы.Файл = Файл.Ссылка;
	НоваяЗаписьТЧФайлы.Назначение = Назначение;
	НоваяЗаписьТЧФайлы.ДатаДобавления = ТекущаяДата();
	НоваяЗаписьТЧФайлы.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	НовСтр = ФайлыРасстановкиДляОтправки.Добавить();
	НовСтр.Файл = Файл.Ссылка;
	НовСтр.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовСтр.Назначение = Назначение;
	
КонецПроцедуры //---AK

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаСервере
Процедура СоздатьФайлРасстановкиВБазеНаСервере(Файл, ИмяФайла, НаименованиеФайлаВБазе, Назначение, Расширение)
	
	РасширениеФайла = Сред(ИмяФайла, Найти(ИмяФайла, ".") + 1);
	Если НаименованиеФайлаВБазе = "Расстановка оборудования начальный" Тогда
		ЗагрузитьФайлРасстановкиНаСервере(Файл, НаименованиеФайлаВБазе, Расширение, Назначение, Истина);
	ИначеЕсли НаименованиеФайлаВБазе = "Расстановка оборудования" Тогда 
		ЗагрузитьФайлРасстановкиНаСервере(Файл, НаименованиеФайлаВБазе, Расширение, Назначение, Истина);
	КонецЕсли;
	
КонецПроцедуры //---AK

//+++AK suvv 03.04.2018 ИП-00017689.02
&НаКлиенте
Процедура ЗагрузитьФайлРасстановкиВеб(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ПомещенныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеФайлаВБазе = ДополнительныеПараметры.Наименование;
	Назначение = ДополнительныеПараметры.Назначение;
	Для Каждого ПомещенныйФайл из ПомещенныеФайлы Цикл
		ИмяФайла = ПомещенныйФайл.Имя;
		Расширение = Прав(ИмяФайла,3);
		Адрес = ПомещенныйФайл.Хранение;
		СоздатьФайлРасстановкиВБазеНаСервере(Адрес, ИмяФайла, НаименованиеФайлаВБазе, Назначение, Расширение);
	КонецЦикла;
	
КонецПроцедуры //---AK

//+++AK suvv 03.04.2018 ИП-00017788.01
&НаСервере
Процедура УстановитьСведенияОРайонеПоГороду()
	
	Если Объект.Город.Наименование = "Зеленоград" Тогда 
		Объект.АдминистративныйОкруг = Справочники.АдминистративныеОкруга.НайтиПоНаименованию("Зеленоград");
		Объект.Район = Справочники.Районы.НайтиПоНаименованию("Зеленоград"); 
	Иначе
		Объект.АдминистративныйОкруг = Справочники.АдминистративныеОкруга.ПустаяСсылка();
		Объект.Район = Справочники.Районы.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры //---AK

//+++ AK suvv 11.04.2018 ИП-00018374
&НаСервере 
Процедура СформироватьЗаписиВРегистреМестаХраненияМагазинов()
	
	НЗ = РегистрыСведений.МестаХраненияВМагазинах.СоздатьНаборЗаписей();
	НЗ.Отбор.Магазин.Установить(Объект.Ссылка);
	НЗ.Прочитать();
	
	СписокКодов = Новый СписокЗначений;
	СписокКодов.Добавить("Z");
	СписокКодов.Добавить("M");
	СписокКодов.Добавить("K");
	СписокКодов.Добавить("S");
	СписокКодов.Добавить("F");
	СписокКодов.Добавить("R");
	СписокКодов.Добавить("N");
	СписокКодов.Добавить("T");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МестаВыкладки.Ссылка КАК МестоВыкладки
	|ИЗ
	|	Справочник.МестаВыкладки КАК МестаВыкладки
	|ГДЕ
	|	НЕ МестаВыкладки.ПометкаУдаления
	|	И МестаВыкладки.КодДляДатчиков В(&СписокКодов)
	|	И МестаВыкладки.ЭтоГруппа";
	Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовЗапись = НЗ.Добавить();
		НовЗапись.Магазин = Объект.Ссылка;
		НовЗапись.МестоВыкладки = Выборка.МестоВыкладки;
		НовЗапись.Хватает = Истина;
	КонецЦикла;
	
	НЗ.Записать();
	
КонецПроцедуры //--- AK suvv

//+++ AK GREK 10.07.2018 ИП-00018854  
&НаСервере
Процедура РассчитатьПлощадьНеиспользуемыхПомещений()
	Объект.ПлощадьНеиспользуемая = Объект.ФактическаяПлощадь - Объект.ТорговаяПлощадь - Объект.ПлощадьПодсобныхПомещений - Объект.ПлощадьСубаренды;
КонецПроцедуры

//+++ AK suvv 17.04.2018 ИП-00018435
&НаКлиенте
Процедура ФактическаяПлощадьПриИзменении(Элемент)
	//+++AK GREK 10.07.2018 ИП-00018854  	
	РассчитатьПлощадьНеиспользуемыхПомещений();
	//---AK	
	ПересчитатьОбщуюСтоимость();
	
	//+++ AK suvv 12.07.2018 ИП-00019053 
	ИзменениеАвтораРеквизита("ФактическаяПлощадь");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");	
	//--- AK suvv
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 17.05.2018 ИП-00018710
&НаКлиенте
Процедура СуммаАрендыПостояннаяПриИзменении(Элемент)
	
	Объект.СуммаАрендыПостоянная = СуммаАрендыПостоянная;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 17.05.2018 ИП-00018710
&НаКлиенте
Процедура СуммаАрендыПеременнаяПриИзменении(Элемент)
	
	Объект.СуммаАрендыПеременная = СуммаАрендыПеременная;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура КатегорииПодтвержденыПриИзменении(Элемент)
	
	Если Объект.КатегорииПодтверждены Тогда 
		Объект.КатегорииПодтвержденыАвтор = ТекПользователь;
	Иначе
		Объект.КатегорииПодтвержденыАвтор = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	Элементы.Категория.Доступность = не Объект.КатегорииПодтверждены;
	Элементы.КатегорияПодсобноеПомещение.Доступность = не Объект.КатегорииПодтверждены;
			
КонецПроцедуры //--- AK suvv

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура КатегорияПодсобноеПомещениеПриИзменении(Элемент)
	Объект.КатегорияПодсобногоПомещенияАвтор = ТекПользователь; 
	УстановитьДоступностьЭлементовКатегории();
КонецПроцедуры //--- AK suvv

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура КатегорияПриИзменении(Элемент)
	Объект.КатегорияАвтор = ТекПользователь;
	УстановитьДоступностьЭлементовКатегории();
КонецПроцедуры //--- AK suvv

//+++AK GREK 10.07.2018 ИП-00018854  
&НаКлиенте
Процедура ПлощадьСубарендыПриИзменении(Элемент)
	РассчитатьПлощадьНеиспользуемыхПомещений();
	ПересчитатьОбщуюСтоимость();
	//+++ AK suvv 12.07.2018 ИП-00019053 
	ИзменениеАвтораРеквизита("ПлощадьСубаренды");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
КонецПроцедуры

//+++AK GREK 10.07.2018 ИП-00018854  
&НаКлиенте
Процедура ПлощадьНеиспользуемаяПриИзменении(Элемент)
	ПересчитатьОбщуюСтоимость();
	//+++ AK suvv 12.07.2018 ИП-00019053 
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗавозаТовараПриИзменении(Элемент)
	Объект.ДатаОткрытия = Объект.ДатаЗавозаТовара;
	Объект.КтоЗавозитТовар = ТекПользователь; 
КонецПроцедуры

&НаКлиенте
Процедура ДатаПередачиАХОПриИзменении(Элемент)
	//+++ AK suvv 2018.09.05 ИП-00019377 - АКТ ВПК сразу должен отображаться на форме
	////+++AK GREK 02.07.2018 ИП-00018854
	//Если ЗначениеЗаполнено(Объект.ДатаПередачиАХО) Тогда
	//	Элементы.ПринятАХО.Видимость = Истина;
	//	Элементы.ГруппаАктыВПК.Видимость = Истина;
	//Иначе
	//	Элементы.ПринятАХО.Видимость = Ложь;
	//	Элементы.ГруппаАктыВПК.Видимость = Ложь;
	//КонецЕсли;
	////---AK	
	//--- AK suvv
КонецПроцедуры

&НаКлиенте
Процедура ПринятАХОПриИзменении(Элемент)
	Объект.КтоПринялАХО = ТекПользователь;   
	Если Объект.ПринятАХО Тогда
		ПринятАХО = "Принят";
		Элементы.ГруппаАктыВПК.Видимость = Ложь;
	Иначе
		ПринятАХО = "Не принят";
		Элементы.ГруппаАктыВПК.Видимость = Истина;
	КонецЕсли;
	
	//+++ AK suvv 2018.09.05 ИП-00019377 
	ИзменениеАвтораРеквизита("ПринятАХО");
	//--- AK suvv

КонецПроцедуры

&НаКлиенте
Процедура АктыВПКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРасстановкиОборудованияПредварительноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРасстановкиОборудованияОкончательноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
КонецПроцедуры

//+++AK GREK 05.08.2018 ИП-00019354
&НаКлиенте
Процедура ЗапросПодтвержденияПередачи(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ПомощникУправляющего) Тогда
		Сообщить("Заполните реквизит Помощник управляющего!");
		Возврат;
	КонецЕсли;
	Объект.КтоПередает = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписиЭлементаПередОтправкойЗапросаНаПередачуМагазина",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Перед отправкой подтверждения передачи, необходимо сохранить изменения. Записать?", РежимДиалогаВопрос.ДаНетОтмена, 0, КодВозвратаДиалога.Да);	
КонецПроцедуры

//+++AK GREK 05.08.2018 ИП-00019354
&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаписиЭлементаПередОтправкойЗапросаНаПередачуМагазина(Результат, Параметры) Экспорт
    Если Результат <> КодВозвратаДиалога.Да Тогда
        Сообщить("Отправка запроса на передачу магазина, отменена.");
		Возврат;
	КонецЕсли;
	Попытка
		Записать();
	Исключение
		Возврат;
	КонецПопытки;
	Элементы.ЗапросПодтвержденияПередачи.Доступность = Ложь; //Спрячем кнопку, чтобы не нажимали много раз на нее
	//Адрес = "grek@automacon.ru";
	Адрес = РегистрыСведений.КонтактнаяИнформация.КонтактнаяИнформацияОбъекта(Объект.ПомощникУправляющего, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));
	СсылкаАкцептант	= Объект.КтоПередает;
	СписокКому = Новый СписокЗначений;
	Если Адрес<>"" Тогда
		СписокКому.Добавить(СокрЛП(Адрес));
		Управляющий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПомощникУправляющего, "Руководитель");
		АдресУправляющего = РегистрыСведений.КонтактнаяИнформация.КонтактнаяИнформацияОбъекта(Управляющий, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));
		Если АдресУправляющего <> "" Тогда
			СписокКому.Добавить(СокрЛП(АдресУправляющего));
		КонецЕсли;
	Иначе
		СообщениеПоОшибке = НСтр("ru = 'Письмо не отправлено! Не заполнен адрес электронной почты %Выборка_Акцептант%'");
		Сообщить(СтрЗаменить(СообщениеПоОшибке, "%Выборка_Акцептант%", СсылкаАкцептант));
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки("Razvitie@vkusvill.ru");
	
	НомерЗаявки = "";
	ТекстУведомления = ""; 
	ТекстУведомления = ТекстУведомления + "<p>Для подтверждения факта передачи магазина " + Объект.Наименование + " в розницу. Нажмите на кнопку, ""Принять магазин"" расположенную ниже, а затем отправте автоматически сгенирированый ответ.</p>";
	ТекстУведомления = ТекстУведомления + "<BR>";
	
	Тема = "Требуется подтверждение передачи магазина" + Объект.Наименование + " в розницу";
	ID_MESSAGE = Новый УникальныйИдентификатор;
	TYPE_MESSAGE = "11";
	GUID_Заявки	= Строка(Объект.Ссылка.УникальныйИдентификатор());
	Объект_Ссылка = Объект.Ссылка;
	
	ОтправитьЗаявкуНаПодтверждение(Тема, ТекстУведомления, НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, СсылкаАкцептант, УчетнаяЗапись, Объект_Ссылка);
КонецПроцедуры

//+++AK GREK 05.08.2018 ИП-00019354
&НаСервере
Функция ОтправитьЗаявкуНаПодтверждение(Тема, ТекстУведомления, НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, СсылкаАкцептант, УчетнаяЗапись = Неопределено, Объект_Ссылка) 
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	КонецЕсли;
	Почта 										= Новый ИнтернетПочта;
	Профиль 									= УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо 										= Новый ИнтернетПочтовоеСообщение;
	Почта.Подключиться(Профиль);
	
	Письмо.Тема 								= Тема;
	Письмо.ИмяОтправителя  						= "accept@izbenka.msk.ru";
	Письмо.Отправитель     						= "accept@izbenka.msk.ru";
	Для Каждого ПолучательЭлемент Из СписокКому Цикл
		Получатель 								= Письмо.Получатели.Добавить();
		Получатель.Адрес 						= ПолучательЭлемент.Значение;
	КонецЦикла;	
	ТекстСообщения 								= Письмо.Тексты.Добавить();
	ТекстСообщения.Текст    					= ТекстСообщения.Текст + ТекстУведомления;
	
	пТекстСсылкиНаКнопкуПодтвердить 			= "mailto:vkusvill.333@gmail.com?reply-to=vkusvill.333@gmail.com&subject=Акцепт заявки №" + НомерЗаявки + "&body=GUID%20" + GUID_Заявки + "%20ID_MESSAGE%20" + ID_MESSAGE   + "%20TYPE_MESSAGE%20" + TYPE_MESSAGE  + "%20Акцептировано";
	пТекстСсылкиНаКнопкуОтменитьПодтверждение 	= "mailto:vkusvill.333@gmail.com?reply-to=vkusvill.333@gmail.com&subject=Акцепт заявки №" + НомерЗаявки + "&body=GUID%20" + GUID_Заявки + "%20ID_MESSAGE%20" + ID_MESSAGE   + "%20TYPE_MESSAGE%20" + TYPE_MESSAGE  + "%20Отклонено";
	пТекстКнопкиПодтвердить 					= "<a href=""" + пТекстСсылкиНаКнопкуПодтвердить + """><b>Принять магазин</b></a><br><br>";
	пТекстКнопкиОтменитьПодтверждение 			= "<a href=""" + пТекстСсылкиНаКнопкуОтменитьПодтверждение + """><b>Отклонить</b></a><br><br>";
	ТекстСообщения.Текст 						= ТекстСообщения.Текст + пТекстКнопкиПодтвердить + пТекстКнопкиОтменитьПодтверждение;
	ТекстСообщения.ТипТекста 					= ТипТекстаПочтовогоСообщения.HTML;
	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
	Запись 										= РегистрыСведений.АкцептЗаявок.СоздатьМенеджерЗаписи();
	Запись.GUID_Загрузки 						= ID_MESSAGE;
	Запись.GUID_Заявки 							= GUID_Заявки;
	Запись.ДатаОтправки 						= ТекущаяДата();
	Запись.ЗаявкаНаУслугиМатериалы 				= Объект_Ссылка;
	Запись.Акцептант							= СсылкаАкцептант;
	Запись.ИдентификаторСообщения 				= Письмо.ИдентификаторСообщения;
	Запись.ОтправленаНаАкцепт					= Истина;
	Запись.email 								= "";
	Запись.ТипЗаявки 							= TYPE_MESSAGE;
	Запись.Записать();
	
	СообщениеПоОтправке 						= НСтр("ru = 'Отправлено письмо по акцептанту:  %Выборка_Акцептант% и документу %РезЗапросДокиСсылка%'");
	СообщениеПоОтправке 						= СтрЗаменить(СообщениеПоОтправке, "%РезЗапросДокиСсылка%", Объект_Ссылка);
	Сообщить(СтрЗаменить(СообщениеПоОтправке, "%Выборка_Акцептант%", СсылкаАкцептант));
КонецФункции

//+++ AK suvv 2018.09.05 ИП-00019410
&НаКлиенте
Процедура ДекорацияЗаявкиНаУслугиМатериалыНажатие(Элемент)
	
	ТекМагазин = Объект.Ссылка;
	СписокДокЗаявкаНаУслугиМатериалыПоТекМагазину = ПолучитьСписокДокЗаявкаНаУслугиМатериалы(ТекМагазин);
	
	Если  СписокДокЗаявкаНаУслугиМатериалыПоТекМагазину.Количество() = 0  Тогда 
		Сообщить("По выбранному магазину заявки на услуги и материалы не созданы.");
	ИначеЕсли СписокДокЗаявкаНаУслугиМатериалыПоТекМагазину.Количество() = 1  Тогда
		СписокДокЗаявкаНаУслугиМатериалыПоТекМагазину[0].Значение.ПолучитьФорму("ФормаДокумента").Открыть();
	Иначе
		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		эОтбор.ПравоеЗначение = СписокДокЗаявкаНаУслугиМатериалыПоТекМагазину;
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
		ОткрытьФорму("Документ.ЗаявкаНаУслугиМатериалы.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 2018.09.05 ИП-00019410
&НаСервере
Функция ПолучитьСписокДокЗаявкаНаУслугиМатериалы(Магазин)
	
	СписокДокументов = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыИсключенияАкцептованиеЗаявокНаМатериалыУслуги КАК КонтрагентыИсключенияАкцептованиеЗаявокНаМатериалыУслуги
	|		ПО ЗаявкаНаУслугиМатериалыУслуги.Ссылка.Контрагент = КонтрагентыИсключенияАкцептованиеЗаявокНаМатериалыУслуги.Контрагент
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.СтатьяДДС.Код = ""230116""
	|	И ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И НЕ ЗаявкаНаУслугиМатериалыУслуги.Ссылка.ПометкаУдаления
	|	И ЕСТЬNULL(КонтрагентыИсключенияАкцептованиеЗаявокНаМатериалыУслуги.Контрагент, """") = """"";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	  
	Возврат СписокДокументов;
	
КонецФункции //--- AK suvv

//+++ AK suvv 2018.09.05 ИП-00019700
&НаКлиенте
Процедура НаличиеПлощадиСубарендыПриИзменении(Элемент)
	
	Если НаличиеПлощадиСубаренды Тогда 
		Элементы.ПлощадьСубаренды1.Видимость = Истина;
	Иначе
		Объект.ПлощадьСубаренды = 0;
		Элементы.ПлощадьСубаренды1.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv

//+++АК SUVV 2018.03.05 ИП-00017818
&НаСервере
Функция ПолучитьНастройкиОткрытияМагазинов() 
	
	МассивРеквизитовКонтрольЗаполнения = Новый Массив;
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	//+++АК suvv 2018.03.05 ИП-00017818
	Запрос.Текст = Справочники.СтруктурныеЕдиницы.ПолучитьТекстЗапросаНастройкиОткрытияМагазина();
	//--- AK suvv
	Запрос.УстановитьПараметр("ВидНастройки",           ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина.КонтрольЗаполнения"));
	Запрос.УстановитьПараметр("ВидНастройки2",          ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина.КонтрольЗаполненияДляВсехЗаИсключением"));
	Запрос.УстановитьПараметр("ИмяПользователя",        ТекПользователь.Наименование);
	Запрос.УстановитьПараметр("ФизлицоТекПользователя", ТекПользователь.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	НастройкиОткрытияМагазинов = РезультатЗапроса.Выгрузить();
	
	Для Каждого НастройкаОткрытия из НастройкиОткрытияМагазинов Цикл
		Имя = НастройкаОткрытия.НастраеваемыйОбъект;
		Попытка
			Если НЕ ЗначениеЗаполнено(Объект[Имя]) Тогда
				МассивРеквизитовКонтрольЗаполнения.Добавить(Имя);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивРеквизитовКонтрольЗаполнения;
	
КонецФункции //---АК SUVV

&НаКлиенте
//+++AK GREK 06.09.2018 ИП-00019760
Процедура ПомощникУправляющегоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборПомощника", ЭтаФорма);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораПомощников", Новый Структура("ЗакрыватьПриВыборе", Истина), Элементы.ПомощникУправляющего,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
//+++AK GREK 06.09.2018 ИП-00019760
Процедура ОбработатьВыборПомощника(Результат, ДополнительныеПараметры) Экспорт	
	Если Результат <> Неопределено Тогда
		Объект.ПомощникУправляющего = Результат.ПомощникТУ; 
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ДатаПланируемогоЗакрытияПриИзменении(Элемент)
	Объект.КтоЗакрывает = ТекПользователь;
КонецПроцедуры

