
Процедура ПриЗаписи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Магазин <> &Магазин";
	Запрос.УстановитьПараметр("Магазин", Задача.Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Ссылка, Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Магазин = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Задача.Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Ссылка, Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбменДанными.Получатели.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	НеПересчитыватьСтатусДокумента = Ложь;
	ДополнительныеСвойства.Свойство("НеПересчитыватьСтатусДокумента", НеПересчитыватьСтатусДокумента);
	Если НеПересчитыватьСтатусДокумента = Ложь
		ИЛИ НеПересчитыватьСтатусДокумента = Неопределено Тогда
		Если ЗначениеЗаполнено(ОтносительноеИмяФайла)
			И СтатусФото = Перечисления.СтатусыРакурсов.ПустаяСсылка()
			И Ракурс<>Справочники.МП_Ракурсы.ИсправленныеФотографии
			И ЗначениеЗаполнено(Задача) Тогда
			Запись = РегистрыСведений.МП_ДокументыСНеобработаннымиФото.СоздатьМенеджерЗаписи();
			Запись.Документ = Задача;
			Запись.Записать();
		КонецЕсли;	
	КонецЕсли;	
	Если Не ПометкаУдаления Тогда
	    ТЗКартинки=Новый ТаблицаЗначений;
		ТЗКартинки.Колонки.Добавить("УИНКартинки");
		ТЗКартинки.Колонки.Добавить("АдресВХранилище");
		ТЗКартинки.Колонки.Добавить("Ракурс");
		ТЗКартинки.Колонки.Добавить("СтатусРакурса");
		ТЗКартинки.Колонки.Добавить("Расширение");
		ТЗКартинки.Колонки.Добавить("Комментарий");
		ТЗКартинки.Колонки.Добавить("СтатусФото");
		ТЗКартинки.Колонки.Добавить("ТолькоМиниатюра");
		ТЗКартинки.Колонки.Добавить("ОтносительноеИмя");
		
		Если ЗначениеЗаполнено(Задача) Тогда
			Попытка
				ЗаполнитьСтруктуруПоКартинкамДляЗаписиВРегистр(ТЗКартинки);
				СоздатьЗаписиПрикрепленныеФотоКОбъектам(ТЗКартинки);
			Исключение
			
			КонецПопытки;
		КонецЕсли; 

	КонецЕсли; 	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(МП_ФотографииКЗадачам.Ссылка) КАК Колво
	               |ИЗ
	               |	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	               |ГДЕ
	               |	МП_ФотографииКЗадачам.Задача = &Задача
	               |	И МП_ФотографииКЗадачам.Ракурс <> ЗНАЧЕНИЕ(Справочник.МП_Ракурсы.ИсправленныеФотографии)
	               |	И МП_ФотографииКЗадачам.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.МП_ДокументыСНеобработаннымиФото.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Задача);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Движение = Набор.Добавить();
		Движение.Документ = Задача;
	Иначе
		Движение = Набор[0];
	КонецЕсли;
	Если Выборка.Следующий() Тогда
		Движение.КолвоЗагруженныхФото = Выборка.Колво;
	Иначе
		Движение.КолвоЗагруженныхФото = 0;
	КонецЕсли;	
	Набор.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


Процедура СоздатьЗаписиПрикрепленныеФотоКОбъектам(ТаблицаСтруктурыФайловДляЗаписиВРегистр)
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	//МассивРакурсы = Новый Массив();
	//Набор = РегистрыСведений.ПрикрепленныеФотоКОбъектам.СоздатьНаборЗаписей();
	//Набор.Отбор.Объект.Установить(Ссылка);
	ТаблицаСтруктурыФайловДляЗаписиВРегистр.Свернуть("ОтносительноеИмя,Ракурс");
	Для Каждого ЭлементСтруктуры Из ТаблицаСтруктурыФайловДляЗаписиВРегистр Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.ОтносительноеИмя) Тогда
			//Картинка = ПолучитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
			//УдалитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
			//Картинка.Записать(КаталогФотографий + "\" + ЭлементСтруктуры.УинКартинки +  "." + ЭлементСтруктуры.Расширение);
			
			ФайлОбъект = Новый Файл(КаталогФотографий + ЭлементСтруктуры.ОтносительноеИмя);
			УинФайла = ФайлОбъект.ИмяБезРасширения;
			Запись=РегистрыСведений.ПрикрепленныеФотоКОбъектам.СоздатьМенеджерЗаписи();
			//Запись = Набор.Добавить();
			Запись.СтруктурнаяЕдиница = Задача.Магазин;
			Запись.ТипЗаписи = ПредопределенноеЗначение("Перечисление.ТипыЗаписейПриложенныхКартинок.ФотоОтчет");
			Запись.ОтносительноеИмяФайла = ЭлементСтруктуры.ОтносительноеИмя;
			Запись.Расширение = СтрЗаменить(ФайлОбъект.Расширение, ".", "");
			Запись.УинЗаписи = УинФайла;
			Запись.Объект = Задача;
			Запись.ДатаДобавления = Задача.Дата;
			Запись.Текст="Комментарий: ракурс "+ЭлементСтруктуры.Ракурс;
			Попытка
				Запись.Записать(Истина);
			Исключение
			
			КонецПопытки; 
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
Процедура ЗаполнитьСтруктуруПоКартинкамДляЗаписиВРегистр(ТаблицаСтруктурыФайловДляЗаписиВРегистр)
	
	ТаблицаСтруктурыФайловДляЗаписиВРегистр.Очистить();
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если ПустаяСтрока(КаталогФотографий) Тогда
		Сообщить("Не заполнена константа КаталогХраненияФайловЗадачМП!");
		Возврат;
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФотографииКЗадачам.Ссылка КАК ПрисоединенныйФайл,
	|	МП_ЗадачаМагазинаРакурсы.Ракурс КАК Ракурс,
	|	ФотографииКЗадачам.РасширениеФайла,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.Непринято)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СортировкаРакурса,
	|	ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) КАК СтатусРакурса,
	|	ФотографииКЗадачам.Комментарий,
	|	ЕСТЬNULL(ФотографииКЗадачам.СтатусФото, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) КАК СтатусФото,
	|	ФотографииКЗадачам.ОтносительноеИмяФайла
	|ИЗ
	|	Справочник.МП_ФотографииКЗадачам КАК ФотографииКЗадачам
	|		внутреннее СОЕДИНЕНИЕ Документ.МП_ЗадачаМагазина.Ракурсы КАК МП_ЗадачаМагазинаРакурсы
	|		ПО ФотографииКЗадачам.Ракурс = МП_ЗадачаМагазинаРакурсы.Ракурс
	|			И (ФотографииКЗадачам.ПометкаУдаления = ЛОЖЬ)
	|			И ((ВЫРАЗИТЬ(ФотографииКЗадачам.ОтносительноеИмяФайла КАК СТРОКА(10))) <> """")
	|			И (ФотографииКЗадачам.Задача = МП_ЗадачаМагазинаРакурсы.Ссылка)
	|ГДЕ
	|	ФотографииКЗадачам.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СортировкаРакурса,
	|	Ракурс";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ПрисоединенныйФайл) Тогда
				УинКартинки = Строка(Выборка.ПрисоединенныйФайл.УникальныйИдентификатор());
				
				СпрСсылка = Выборка.ПрисоединенныйФайл;
				
				ПолноеИмяФайла = "";
				Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
					ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
					Файл = Новый Файл(ПолноеИмяФайла);
					РасширениеФайла = Сред(Файл.Расширение, 2);
					//Если НЕ ПервыйПроход Тогда
					//	ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "thumb." + РасширениеФайла;
					//	ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
					//	Если НЕ ФайлМиниатюра.Существует() Тогда
					//		ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "." + РасширениеФайла;
					//	КонецЕсли;	
					//КонецЕсли;	
				//Иначе
				//	РасширениеФайла = СокрЛП(Выборка.РасширениеФайла);
				//	
				//	Если Лев(РасширениеФайла, 1) = "." Тогда
				//		РасширениеФайла = Сред(РасширениеФайла, 2);
				//	КонецЕсли;
				//	
				//	ПолноеИмяФайла = КаталогФотографий + УинКартинки + "." + РасширениеФайла;
				//	Если НЕ ПервыйПроход Тогда
				//		ПолноеИмяФайла = КаталогФотографий + УинКартинки + "thumb." + РасширениеФайла;
				//		ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
				//		Если НЕ ФайлМиниатюра.Существует() Тогда
				//			ПолноеИмяФайла = КаталогФотографий + УинКартинки + "." + РасширениеФайла;
				//		КонецЕсли;	
				//	КонецЕсли;
				КонецЕсли;
				
				Файл = Новый Файл(ПолноеИмяФайла);
				
				Если Файл.Существует()
					И Файл.Размер() > 0 Тогда
					СтруктураЗаписи = ТаблицаСтруктурыФайловДляЗаписиВРегистр.Добавить();
					СтруктураЗаписи.УинКартинки = УинКартинки;
					СтруктураЗаписи.Ракурс = Выборка.Ракурс;
					СтруктураЗаписи.ОтносительноеИмя=Выборка.ОтносительноеИмяФайла;
					СтруктураЗаписи.Комментарий = Выборка.Комментарий;
					Если ЗначениеЗаполнено(РасширениеФайла) Тогда
						//Если ПервыйПроход Тогда
							СтруктураЗаписи.ТолькоМиниатюра = Ложь;
						//Иначе
						//	СтруктураЗаписи.ТолькоМиниатюра = Истина;
						//КонецЕсли;	
						
						Попытка
							//Картинка = Новый Картинка(ПолноеИмяФайла);
							//СтруктураЗаписи.АдресВХранилище = ПоместитьВоВременноеХранилище(Картинка);
							СтруктураЗаписи.Расширение = РасширениеФайла;
							ПервыйПроход = Ложь;
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					
				Иначе
					//Если НЕ БылоДобавлениеПустого Тогда
					//	СтруктураЗаписи = ТаблицаСтруктурыФайловДляЗаписиВРегистр.Добавить();
					//	БылоДобавлениеПустого = Истина;
					//Иначе
					//	Продолжить;
					//КонецЕсли;	
				КонецЕсли;	
				
			Иначе
				//СтруктураЗаписи = ТаблицаСтруктурыФайловДляЗаписиВРегистр.Добавить();
			КонецЕсли;	
			//Если Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
			//	СтруктураЗаписи.СтатусРакурса = 0;
			//ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Непринято Тогда
			//	СтруктураЗаписи.СтатусРакурса = 1;
			//ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Принято Тогда
			//	СтруктураЗаписи.СтатусРакурса = 2;
			//КонецЕсли;
			//Если Выборка.СтатусФото = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
			//	СтруктураЗаписи.СтатусФото = 0;
			//ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Непринято Тогда
			//	СтруктураЗаписи.СтатусФото = 1;
			//ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Принято Тогда
			//	СтруктураЗаписи.СтатусФото = 2;
			//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(ПопыткаВРакурсе) Тогда
		НеПересчитыватьСтатусДокумента = Ложь;
		ДополнительныеСвойства.Свойство("НеПересчитыватьСтатусДокумента", НеПересчитыватьСтатусДокумента);
		Если НеПересчитыватьСтатусДокумента = Ложь
			ИЛИ НеПересчитыватьСтатусДокумента = Неопределено Тогда
			Если ЗначениеЗаполнено(ОтносительноеИмяФайла)
				И СтатусФото = Перечисления.СтатусыРакурсов.ПустаяСсылка()
				И ЗначениеЗаполнено(Задача) Тогда
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Задача", Задача);
				Запрос.УстановитьПараметр("Ракурс", Ракурс);
				Запрос.Текст = "ВЫБРАТЬ
				               |	МП_ЗадачаМагазинаРакурсы.Ссылка,
				               |	ЕСТЬNULL(ВложенныйЗапрос.ПопыткаВРакурсе, 0) КАК ПопыткаВРакурсе
				               |ИЗ
				               |	Документ.МП_ЗадачаМагазина.Ракурсы КАК МП_ЗадачаМагазинаРакурсы
				               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				               |			МАКСИМУМ(ВЫБОР
				               |					КОГДА МП_ФотографииКЗадачам.ПопыткаВРакурсе = 0
				               |						ТОГДА 1
				               |					ИНАЧЕ МП_ФотографииКЗадачам.ПопыткаВРакурсе
				               |				КОНЕЦ) КАК ПопыткаВРакурсе
				               |		ИЗ
				               |			Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
				               |		ГДЕ
				               |			МП_ФотографииКЗадачам.Задача = &Задача
				               |			И МП_ФотографииКЗадачам.Ракурс = &Ракурс
				               |			И МП_ФотографииКЗадачам.СтатусФото <> ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) КАК ВложенныйЗапрос
				               |		ПО (ИСТИНА)
				               |ГДЕ
				               |	МП_ЗадачаМагазинаРакурсы.Ссылка = &Задача
				               |	И МП_ЗадачаМагазинаРакурсы.Ракурс = &Ракурс
				               |	И МП_ЗадачаМагазинаРакурсы.СтатусРакурса <> ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)";
							   
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ПопыткаВРакурсе = Выборка.ПопыткаВРакурсе + 1;
				Иначе
					ПопыткаВРакурсе = 1;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтносительноеИмяФайла) Тогда
		КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
		
		Если ЗначениеЗаполнено(КаталогФотографий) Тогда
			Если Прав(КаталогФотографий, 1) <> "\" Тогда
				КаталогФотографий = КаталогФотографий + "\";
			КонецЕсли;
			Файл = Новый Файл(КаталогФотографий + ОтносительноеИмяФайла);
			Если НЕ Файл.Существует()
				ИЛИ Файл.Размер() = 0
				ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
				РасширениеФайла = "";
				ОтносительноеИмяФайла = "";
				ПометкаУдаления = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

