Перем НужноУдалитьРегламентноеЗадание Экспорт; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
Перем Расписание Экспорт;
Перем ДатаНачалаДопроведения, ДатаКонцаДопроведения; 	//Переменные для хранения и отображения интервала допроведения в форме
Перем ФорматнаяСтрокаДаты;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Устанавливает доступность элементов формы
//
Процедура УправлениеДоступностью()
	
	Если ТолькоПросмотр Тогда
		// Доступность регулируется настройками в диалоге
		Возврат;
	КонецЕсли;
	ЭлементыФормы.ПредставлениеРасписания.Доступность 				= ФормироватьДокументыАвтоматически;
	ЭлементыФормы.ОграничитьПрименениеРасписания.Доступность 		= ФормироватьДокументыАвтоматически;
	ЭлементыФормы.НомерДняНачалоЗапуска.Доступность 				= (ФормироватьДокументыАвтоматически И ОграничитьПрименениеРасписания);
	ЭлементыФормы.НомерДняКонецЗапуска.Доступность 					= (ФормироватьДокументыАвтоматически И ОграничитьПрименениеРасписания);
	ЭлементыФормы.НомерДняНачалоЗапуска.АвтоОтметкаНезаполненного 	= ОграничитьПрименениеРасписания;
	ЭлементыФормы.НомерДняКонецЗапуска.АвтоОтметкаНезаполненного 	= ОграничитьПрименениеРасписания;
	Если НЕ ОграничитьПрименениеРасписания Тогда
		ЭлементыФормы.НомерДняНачалоЗапуска.ОтметкаНезаполненного 	= Ложь;
		ЭлементыФормы.НомерДняКонецЗапуска.ОтметкаНезаполненного 	= Ложь;
	КонецЕсли;
	ЭлементыФормы.НадписьПо.Доступность 							= (ФормироватьДокументыАвтоматически И ОграничитьПрименениеРасписания);
	ЭлементыФормы.НадписьС.Доступность 								= (ФормироватьДокументыАвтоматически И ОграничитьПрименениеРасписания);
КонецПроцедуры

//ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	Если НЕ ФормироватьДокументыАвтоматически И ОграничитьПрименениеРасписания Тогда
		ОграничитьПрименениеРасписания = Ложь;
		НомерДняНачалоЗапуска 	= 0;
		НомерДняКонецЗапуска 	= 0;
	КонецЕсли;
	
	УправлениеДоступностью();
КонецПроцедуры

Процедура ПредставлениеРасписанияНажатие(Элемент)
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
КонецПроцедуры

Процедура ПриОткрытии()
	
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
	ОбновитьПеременныеФормы();
	ОбновитьПериодДопроведения();
	УправлениеДоступностью();
	УстановитьКнопкиПечати();
КонецПроцедуры

//Обработчик события ПриПовторномОткрытии формы
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	ОбновитьПериодДопроведения();
	УправлениеДоступностью();
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	НачалоИнтервалаДопроведения = ДатаНачалаДопроведения;
	КонецИнтервалаДопроведения = ДатаКонцаДопроведения;
	Если ОграничитьПрименениеРасписания И (НомерДняНачалоЗапуска = 0 ИЛИ НомерДняКонецЗапуска = 0) Тогда
		СтрокаСообщения = "Не заполнен интервал дат применения расписания!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщения);
	КонецЕсли;

	Если НужноУдалитьРегламентноеЗадание = Истина Тогда
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обрабатываем расписание регл. задания
	Если НЕ ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,Расписание,ЗаголовокСообщения,Отказ);
	
КонецПроцедуры

//Обработчик нажатия на кнопку ИзменитьИнтервал
Процедура ИзменитьИнтервалНажатие(Элемент)
	ФормаИзменениеИнтервала = ПолучитьФорму("ФормаИзменениеИнтервалаДопроведения");
	ФормаИзменениеИнтервала.ДатаНачалаДопроведения						= ДатаНачалаДопроведения;
	ФормаИзменениеИнтервала.ДатаКонцаДопроведения 						= ДатаКонцаДопроведения;
	ФормаИзменениеИнтервала.ПериодичностьОтставанияНачалоИнтервала 		= ПериодичностьОтставанияНачалоИнтервала;
	ФормаИзменениеИнтервала.КоличествоПериодовОтставанияНачалоИнтервала = КоличествоПериодовОтставанияНачалоИнтервала;
	ФормаИзменениеИнтервала.РассчитыватьНачалоИнтервала 				= РассчитыватьНачалоИнтервала;
	ФормаИзменениеИнтервала.РассчитыватьКонецИнтервала 					= РассчитыватьКонецИнтервала;
	ФормаИзменениеИнтервала.ПериодичностьОтставанияКонецИнтервала 		= ПериодичностьОтставанияКонецИнтервала;
	ФормаИзменениеИнтервала.КоличествоПериодовОтставанияКонецИнтервала 	= КоличествоПериодовОтставанияКонецИнтервала;
	Результат = ФормаИзменениеИнтервала.ОткрытьМодально();
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Свойство("ДатаНачалаДопроведения",						ДатаНачалаДопроведения);
		Результат.Свойство("ДатаКонцаДопроведения",							ДатаКонцаДопроведения);
		Результат.Свойство("РассчитыватьНачалоИнтервала",					РассчитыватьНачалоИнтервала);
		Результат.Свойство("РассчитыватьКонецИнтервала",					РассчитыватьКонецИнтервала);
		Результат.Свойство("КоличествоПериодовОтставанияНачалоИнтервала",	КоличествоПериодовОтставанияНачалоИнтервала);
		Результат.Свойство("ПериодичностьОтставанияНачалоИнтервала",		ПериодичностьОтставанияНачалоИнтервала);
		Результат.Свойство("КоличествоПериодовОтставанияКонецИнтервала",	КоличествоПериодовОтставанияКонецИнтервала);
		Результат.Свойство("ПериодичностьОтставанияКонецИнтервала",			ПериодичностьОтставанияКонецИнтервала);
		
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьПериодДопроведения();
	КонецЕсли;
	
КонецПроцедуры

//Обработчик ПриИзменении элемента формы ОграничитьПрименениеРасписания
Процедура ОграничитьПрименениеРасписанияПриИзменении(Элемент)
	Если НЕ ОграничитьПрименениеРасписания Тогда
		НомерДняНачалоЗапуска 	= 0;
		НомерДняКонецЗапуска 	= 0;
	КонецЕсли;
	
	УправлениеДоступностью();
КонецПроцедуры

Процедура ПослеЗаписи()
	УстановитьКнопкиПечати();
КонецПроцедуры

//СЛУЖЕБНЫЕ ПРОЦЕДУРЫ

//Процедура обновляет переменные, которые зависят от реквизитов регламента и отображаются на форме
Процедура ОбновитьПеременныеФормы()
	ОграничитьПрименениеРасписания 	= (НомерДняНачалоЗапуска > 0) ИЛИ (НомерДняКонецЗапуска > 0);
	Если ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ПериодДопроведения 		= ОтложенноеПроведениеДокументов.ОпределитьПериодДопроведения(ПараметрОбъектКопирования);
			ДатаНачалаДопроведения 	= ПериодДопроведения.НачалоИнтервала;
			ДатаКонцаДопроведения 	= ПериодДопроведения.КонецИнтервала;
		Иначе
			ДатаНачалаДопроведения 	= НачалоМесяца(ТекущаяДата());
			ДатаКонцаДопроведения 	= КонецМесяца(ТекущаяДата());
		КонецЕсли;	
	Иначе	
		ПериодДопроведения 		= ОтложенноеПроведениеДокументов.ОпределитьПериодДопроведения(Ссылка);
		ДатаНачалаДопроведения 	= ПериодДопроведения.НачалоИнтервала;
		ДатаКонцаДопроведения 	= ПериодДопроведения.КонецИнтервала;
	КонецЕсли;
КонецПроцедуры


//Процедура обновляет надпись с периодом допроведения на форме регламента
Процедура ОбновитьПериодДопроведения()
	Если НЕ ЗначениеЗаполнено(ДатаНачалаДопроведения) И НЕ ЗначениеЗаполнено(ДатаКонцаДопроведения) Тогда
		ЭлементыФормы.НадписьПериодДопроведения.Заголовок = "<задать период>";
		Возврат;
	КонецЕсли;
	Если НЕ (РассчитыватьКонецИнтервала ИЛИ РассчитыватьНачалоИнтервала) Тогда
		ЭлементыФормы.НадписьПериодДопроведения.Заголовок = "задан явно с " + Формат(ДатаНачалаДопроведения, ФорматнаяСтрокаДаты) 
															+ " по " + Формат(ДатаКонцаДопроведения, ФорматнаяСтрокаДаты);
		Возврат;
	КонецЕсли;
	// простые варианты настройки выведем словами: "текущий месяц", "прошлый месяц", "текущий день", "прошлый день"
	Если РассчитыватьКонецИнтервала И РассчитыватьНачалоИнтервала 
			И ПериодичностьОтставанияКонецИнтервала = ПериодичностьОтставанияНачалоИнтервала
			И КоличествоПериодовОтставанияКонецИнтервала = КоличествоПериодовОтставанияНачалоИнтервала 
			И КоличествоПериодовОтставанияКонецИнтервала <= 1 Тогда
			ЭлементыФормы.НадписьПериодДопроведения.Заголовок = "" + ?(КоличествоПериодовОтставанияКонецИнтервала = 0, "текущий", "предыдущий") +
															" " + НРег(СокрЛП(ПериодичностьОтставанияКонецИнтервала));
			Возврат;
		КонецЕсли;
	//сложные случаи не пытаемся описать словами
	ЭлементыФормы.НадписьПериодДопроведения.Заголовок = "задан относительно текущей даты";
КонецПроцедуры

ФорматнаяСтрокаДаты = "ДЛФ=D";


