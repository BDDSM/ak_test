
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.Поставщик.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Поставщик);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкладируемости) Тогда
		Объект.ВидСкладируемости = Перечисления.ВидыСкладируемостиТовара.Нескладируемый;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииНаСервере(РеквизитФормыВЗначение("Объект"));
	КонецЕсли;
	
	ТекСтатус = Объект.Статус;
	
	Если ЭтоПоставщик Тогда
		СтруктураНевидимости = Новый Структура("Статус,СтраницаТовар,СтраницаПрочее,СтраницаДляЦенника");
		
		// если замечаний нет, не отображаем их
		СтруктураОтбора = Новый Структура("Исправлено", Ложь);
		МассивСтрокДляОтбора = Объект.Замечания.НайтиСтроки(СтруктураОтбора);
		Если ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправление") И МассивСтрокДляОтбора.Количество() > 0 Тогда
			Элементы.ЗамечанияИсправлено.ТолькоПросмотр = Ложь;
			Элементы.ЗамечанияЗамечание.ТолькоПросмотр = Истина;
			
			СтруктураНевидимости.Вставить("ЗамечанияДата");
			СтруктураНевидимости.Вставить("ЗамечанияПользователь");
			СтруктураНевидимости.Вставить("ЗамечанияИмяПоля");
			
			// добавляем синонимы полей
			СтруктураПолей = Новый Структура;
			Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
				СтруктураПолей.Вставить(СтрокаТЧ.ИмяПоля);
				СтрокаТЧ.ИсправленоДляОтбора = Истина;
			КонецЦикла;
			ЗаполнитьСинонимыПолей(СтруктураПолей);
			Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
				СтрокаТЧ.ИмяПоляСиноним = СтруктураПолей[СтрокаТЧ.ИмяПоля];
			КонецЦикла;
			
			Элементы.Замечания.ОтборСтрок = Новый ФиксированнаяСтруктура("ИсправленоДляОтбора", Истина);
			
		Иначе
			СтруктураНевидимости.Вставить("СтраницаЗамечания");
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураНевидимости Цикл
			ЭлементНевидимости = Элементы.Найти(КлючИЗначение.Ключ);
			Если ЭлементНевидимости <> Неопределено Тогда ЭлементНевидимости.Видимость = Ложь; КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		
		Элементы.ЕдиницаИзмерения.РежимВыбораИзСписка = Ложь;
		Элементы.ЕдиницаИзмеренияВеса.РежимВыбораИзСписка = Ложь;
		Элементы.Технолог.РежимВыбораИзСписка = Ложь;
		Элементы.РольТехнолога.РежимВыбораИзСписка = Ложь;
		
	Иначе
		
		Элементы.ЕдиницаИзмерения.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивЕдиницИзмерения("шт,кг"));
		Элементы.ЕдиницаИзмеренияВеса.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивЕдиницИзмерения("кг,г,мл,л"));
		Элементы.ЕдиницаИзмеренияКванта.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивЕдиницИзмерения("г,кг"));
		
		//Если НЕ ЭтоПоставщик Тогда
		//	ЗаполнитьСписокВыбораТехнологов();
		//КонецЕсли;
		
		СтруктураТехнологов = Справочники.ХарактеристикиНоменклатурыПоставщиков.ПолучитьСтруктуруТехнологовПоставщика(Объект.Поставщик);
		Элементы.Технолог.СписокВыбора.ЗагрузитьЗначения(СтруктураТехнологов.МассивТехнологов);
		Элементы.РольТехнолога.СписокВыбора.ЗагрузитьЗначения(СтруктураТехнологов.МассивРолейТехнологов);
		
	КонецЕсли;
	
	ПоставщикПриИзмененииНаСервере(Ложь);
	
	Элементы.Поставщик.КнопкаОткрытия = НЕ ЭтоПоставщик;
	Элементы.НадписьОткрыть.Заголовок = ?(ЭтоПоставщик, "— просмотреть", "— добавить") + " замечание";
	Элементы.ЗамечанияОтвет.ТолькоПросмотр = НЕ ЭтоПоставщик;
	//Элементы.ЗамечанияИсправлено.Видимость = НЕ ЭтоПоставщик;
	//Элементы.ЗамечанияИсправленоДляОтбора.Видимость = ЭтоПоставщик;
	Элементы.ЗамечанияЗначениеПоля.Видимость = ЭтоПоставщик;
	
	// определяем элементы для добавления и просмотра замечаний
	СтруктураРеквизитыДляЗамечаний = Новый Структура;
	Если НЕ ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке") Тогда
		СтруктураРеквизитыДляЗамечаний = ПолучитьПроверяемыеРеквизиты(Объект.ЕдиницаИзмерения);
		СтруктураРеквизитыДляЗамечаний.Удалить("Поставщик"); // для поставщика оставляем открытие
		
	ИначеЕсли ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправление") Тогда
		
		// выбираем "активные" замечания
		МассивСтрокДляОтбора = Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь));
		Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
			СтруктураРеквизитыДляЗамечаний.Вставить(СтрокаТЧ.ИмяПоля);
			Элементы[СтрокаТЧ.ИмяПоля].ЦветФона = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЦикла;
		
		// блокировать на редактирование те поля, которые бренд-менеджер уже проверил и не отправил по ним замечания 
		СтруктураПроверяемыеРеквизиты = ПолучитьПроверяемыеРеквизиты(Объект.ЕдиницаИзмерения);
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			ИмяРекъ = КлючИЗначение.Ключ;
			//Если ИмяРекъ = "ТипПродукции" ИЛИ Элементы[ИмяРекъ].ЦветФона <> ЦветаСтиля.ЦветОсобогоТекста Тогда
			Если Элементы[ИмяРекъ].ЦветФона <> ЦветаСтиля.ЦветОсобогоТекста Тогда
				Элементы[ИмяРекъ].ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// блокируем все подчинённые элементы
		СтруктураПроверяемыеРеквизиты = Новый Структура("СтраницаПоставщик,СтраницаХарактеристикаТовара,ГруппаГОСТ_ТУ_Состав,СтраницаПоказателиПроверки");
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			ЭлементыДляПросмотра = Элементы[КлючИЗначение.Ключ].ПодчиненныеЭлементы;
			ТолькоПросмотрВсехПодчинённых(ЭлементыДляПросмотра);
		КонецЦикла;
		
	ИначеЕсли ЭтоАналитик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверку") Тогда
		СтруктураРеквизитыДляЗамечаний = ПолучитьИспользуемыеРеквизиты(Объект.ЕдиницаИзмерения);
		// блокируем все подчинённые элементы
		СтруктураПроверяемыеРеквизиты = Новый Структура("ГруппаШапка,ГруппаСтраницы");
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			ЭлементыДляПросмотра = Элементы[КлючИЗначение.Ключ].ПодчиненныеЭлементы;
			ТолькоПросмотрВсехПодчинённых(ЭлементыДляПросмотра);
		КонецЦикла;
		
	КонецЕсли;
	
	// добавляем кнопку "Открыть" для добавления и просмотра замечаний
	Для Каждого КлючИЗначение Из СтруктураРеквизитыДляЗамечаний Цикл
		ИмяРекъ = КлючИЗначение.Ключ;
		//Если ИмяРекъ = "ТипПродукции" Тогда Продолжить; КонецЕсли;
		Элементы[ИмяРекъ].КнопкаОткрытия = Истина;
		Элементы[ИмяРекъ].УстановитьДействие("Открытие", "ДобавитьПросмотретьЗамечание");
	КонецЦикла;
	
	Элементы["НаименованиеДляЦенника"].ОграничениеТипа = Новый ОписаниеТипов("Строка");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТолькоПросмотрВсехПодчинённых(ЭлементыДляПросмотра)
	Для Каждого ЭлементДляПросмотра Из ЭлементыДляПросмотра Цикл
		ТипЭлемента = Тип(ЭлементДляПросмотра);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда
			ТолькоПросмотрВсехПодчинённых(ЭлементДляПросмотра.ПодчиненныеЭлементы);
		ИначеЕсли ТипЭлемента = Тип("ДекорацияФормы") Тогда
			Продолжить;
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") И ЭлементДляПросмотра.Доступность Тогда
			ЭлементДляПросмотра.Доступность = Ложь;
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы")
		  И (ЭлементДляПросмотра.Вид = ВидПоляФормы.ПолеПолосыРегулирования ИЛИ ЭлементДляПросмотра.Вид = ВидПоляФормы.ПолеТабличногоДокумента) Тогда
			ЭлементДляПросмотра.ТолькоПросмотр = Истина;
		ИначеЕсли ЭлементДляПросмотра.ЦветФона <> ЦветаСтиля.ЦветОсобогоТекста И НЕ ЭлементДляПросмотра.ТолькоПросмотр Тогда
			ЭлементДляПросмотра.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте                                                                       
Процедура ПриОткрытии(Отказ)
	
	ЕдиницаИзмеренияПриИзменении(Неопределено);
	ГосударственныйСтандартТехническоеУсловиеПриИзменении(Неопределено);
	СоставПриИзменении(Неопределено);
	ТребуетсяВетеринарноеСвидетельствоПриИзменении(Неопределено); //+++АК SHEP 2018.05.10 ЦУП-0017035
	
	Если ОткрытьФайл("ГОСТ", 1, Ложь) Тогда
		Элементы.ПрикрепитьФайл.Заголовок = "Открыть файл";
		Элементы.ПрикрепитьФайл.Картинка = БиблиотекаКартинок.ОткрытьФайл;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПользователю(ТекстПредупреждения, Таймаут = 0, Заголовок = "")
	ОбщегоНазначенияКлиент.ПоказатьПредупреждениеПользователю(ТекстПредупреждения, Таймаут, Заголовок, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТехнологов()
Перем СписокВыбора;
	
	СписокВыбора = Элементы.РольТехнолога.СписокВыбора;
	СписокВыбора.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ГоловнойКонтрагент
		|ПОМЕСТИТЬ ПоставщикиПроизводители
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Поставщик
		|	И ВЫРАЗИТЬ(&Поставщик КАК Справочник.Контрагенты).ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ГоловнойКонтрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ ВЫРАЗИТЬ(&Поставщик КАК Справочник.Контрагенты).ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И Контрагенты.ГоловнойКонтрагент = ВЫРАЗИТЬ(&Поставщик КАК Справочник.Контрагенты).ГоловнойКонтрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Поле1,
		|	ЗначенияСвойствОбъектов.Объект
		|ПОМЕСТИТЬ ХарактеристикиНоменклатуры
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
		|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Значение В
		|			(ВЫБРАТЬ
		|				ПоставщикиПроизводители.Ссылка
		|			ИЗ
		|				ПоставщикиПроизводители КАК ПоставщикиПроизводители)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|				И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
		|				И Объект В
		|					(ВЫБРАТЬ
		|						ХарактеристикиНоменклатуры.Объект
		|					ИЗ
		|						ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры)) КАК СоответствиеОбъектРольСрезПоследних
		|ГДЕ
		|	НЕ СоответствиеОбъектРольСрезПоследних.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|				И Объект ССЫЛКА Справочник.Контрагенты
		|				И Объект В
		|					(ВЫБРАТЬ
		|						ПоставщикиПроизводители.Ссылка
		|					ИЗ
		|						ПоставщикиПроизводители КАК ПоставщикиПроизводители)) КАК СоответствиеОбъектРольСрезПоследних
		|ГДЕ
		|	НЕ СоответствиеОбъектРольСрезПоследних.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Поставщик", Объект.Поставщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокВыбора.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("РольПользователя"));
	КонецЕсли;
	
	Элементы.РольТехнолога.КнопкаСпискаВыбора = (СписокВыбора.Количество() > 0);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивЕдиницИзмерения(ЕдиницыИзмеренияСтрокой)
Перем Результат;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.Наименование В(&МассивСтрокЕдИзм)");
	Запрос.УстановитьПараметр("МассивСтрокЕдИзм", ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ЕдиницыИзмеренияСтрокой, ","));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Новый Массив;
	Иначе
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда Возврат; КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛицаКонтрагентов.ФормаВыбора", Новый Структура("Владелец", Объект.Поставщик));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаПроисхожденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ДанныеВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	//Если нет нужной страны тогда нужна кнопка с оповещением на адреса аналитиков, что не хватает страны (поставщик заполняет текстовое поле с нужной страной и жмет отправить)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаказыЭлАдрес(ЗаказыЭлАдрес)
Перем СтрокаОшибки;
	
	СтрокаОшибки = "";
	
	МассивЭлАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивСлов(ЗаказыЭлАдрес, ",;");
	Если МассивЭлАдресов.Количество() = 0 Тогда
		СтрокаОшибки = "Строка адресов заполнена некорректно!";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаОшибки) Тогда
		Для Каждого ЭлАдрес Из МассивЭлАдресов Цикл
			Если НЕ УправлениеЭлектроннойПочтой.EmailValid(СокрЛП(ЭлАдрес)) Тогда
				СтрокаОшибки = "Некорректно введён электронный адрес: " + ЭлАдрес + "!";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрокаОшибки;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыЭлАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
Перем СтрокаОшибки;
	
	Если ПустаяСтрока(Текст) Тогда Возврат; КонецЕсли;
	
	СтрокаОшибки = ПроверитьЗаказыЭлАдрес(Текст);
	
	Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда Сообщить(СтрокаОшибки); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЭтоШтучныйТовар = (Найти(НРег(Объект.ЕдиницаИзмерения), "шт") > 0);
	
	Элементы.Вес.Видимость = ЭтоШтучныйТовар;
	Элементы.ЕдиницаИзмеренияВеса.Видимость = ЭтоШтучныйТовар;
	
	//ЕдиницаИзмеренияКванта = ?(ЭтоШтучныйТовар, Объект.ЕдиницаИзмеренияВеса, Объект.ЕдиницаИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПроверку(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправление")
	  И Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь)).Количество() > 0 Тогда
		ПоказатьПредупреждениеПользователю("Не все замечания были исправлены!" + Символы.ПС + Символы.ПС + "Пожалуйста, на закладке ""Замечания"" отметьте флажками все замечания!");
		Возврат;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверку")
	  И Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь)).Количество() = 0 Тогда
		ПоказатьПредупреждениеПользователю("Нельзя отправлять на проверку, если нет замечаний!");
		Возврат;
		
	КонецЕсли;
	
	СменитьСтатус("Внимание! После передачи на проверку редактирование будет запрещено!
			|Отправить на проверку?", "НаПроверке");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПройдена(Команда)
	
	СменитьСтатус("Внимание! После прохождения проверки редактирование будет запрещено!
		|Продолжить?", "ПрошлаПроверку");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаИсправление(Команда)
	
	Если Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь)).Количество() = 0 Тогда
		ПоказатьПредупреждениеПользователю("Нельзя отправлять на исправление, если нет замечаний!");
		Возврат;
	КонецЕсли;
	
	СменитьСтатус("Отправить на исправление?", "НаИсправление");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКопияБазы()
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЭтоКопияБазы();
КонецФункции

&НаКлиенте
Процедура СменитьСтатус(ТекстВопроса, НовыйСтатусСтр)
	
	НовыйСтатус = НовыйСтатусСтр;
	
	Если НЕ ЭтоКопияБазы() И НЕ ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
	//Если НЕ ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//	ВыбранноеЗначениеРезультат = Строка(Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет));
	//	СменитьСтатусЗавершение(НовыйСтатусСтр);
	//#Иначе
		ПоказатьВопросПользователю(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет,,, "СменитьСтатусЗавершение(""" + НовыйСтатусСтр + """)");
	//#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура СменитьСтатусЗавершение(НовыйСтатусСтр)
	
	Если ВыбранноеЗначениеРезультат <> "Да" Тогда Возврат; КонецЕсли;
	
	// пусть поставщик помечает, какие замечания исправлены
	//// помечаем все замечания как исправленные
	//Если НовыйСтатусСтр = "НаПроверке" Тогда
	//	МассивСтрокДляОтбора = Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено", Ложь));
	//	Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
	//		СтрокаТЧ.Исправлено = Истина;
	//	КонецЦикла;
	//КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков." + НовыйСтатусСтр);
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
Перем ТекСтатус;
	
	Если НЕ ЭтоНеПервоеЧтение Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЭтоПоставщик = ЗначениеЗаполнено(ПараметрыСеанса.ТекущийКонтрагент);
		ЭтоАналитик = Справочники.ХарактеристикиНоменклатурыПоставщиков.ЭтоАналитик();
		УстановитьПривилегированныйРежим(Ложь);
		ЭтоНеПервоеЧтение = Истина;
	КонецЕсли;
	
	ТекСтатус = ТекущийОбъект.Статус;
	ТолькоПросмотр = ТолькоПросмотр ИЛИ (ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке")
		ИЛИ НЕ ЭтоАналитик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверку")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.Создана"));
	
	// в этих статусах разрешаем редактирование только поставщику
	Элементы.ФормаОтправитьНаПроверку.Видимость = 
		(ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ВРаботе")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПустаяСсылка")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправление")
		ИЛИ ЭтоАналитик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверку"));
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ
		(НЕ ЭтоПоставщик И Элементы.ФормаОтправитьНаПроверку.Видимость И НЕ (ЭтоАналитик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверку")));
	//Элементы.ФормаОтправитьНаПроверку.Видимость = ЭтоПоставщик И Элементы.ФормаОтправитьНаПроверку.Видимость;

	Элементы.ГруппаЗамечание.Видимость = (ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке")
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаИсправление")
		ИЛИ ЭтоАналитик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.ПрошлаПроверку"));
	
	Элементы.ФормаПроверкаПройдена.Видимость = (НЕ ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке"));
	Элементы.ФормаОтправитьНаИсправление.Видимость = (НЕ ЭтоПоставщик И ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыКарточекТовараПоставщиков.НаПроверке"));
	
	Если НЕ ЭтоПоставщик Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПродажиНаМагазинВДеньШтук = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийОбъект.ПлановыйАссортимент, "ПродажиНаМагазинВДеньШтук");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСинонимыПолей(СтруктураПолей)
Перем МетаданныеОбъекта;
	
	МетаданныеОбъекта = Метаданные.Справочники.ХарактеристикиНоменклатурыПоставщиков;
	РеквизитыОбъектаМД = МетаданныеОбъекта.Реквизиты;
	
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		
		ИмяРекъ = КлючИЗначение.Ключ;
		
		СтруктураПолейТЧ = КлючИЗначение.Значение;
		Если ТипЗнч(СтруктураПолейТЧ) = Тип("Структура") Тогда
			РеквизитыТЧОбъектаМД = МетаданныеОбъекта.ТабличныеЧасти[ИмяРекъ].Реквизиты;
			Для Каждого КлючИЗнач Из СтруктураПолейТЧ Цикл
				ИмяРекъ = КлючИЗнач.Ключ;
				РеквизитОбъектаМД = РеквизитыТЧОбъектаМД.Найти(ИмяРекъ);
				СтруктураПолейТЧ.Вставить(ИмяРекъ, ?(РеквизитОбъектаМД = Неопределено, ИмяРекъ, РеквизитОбъектаМД.Синоним));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		РеквизитОбъектаМД = РеквизитыОбъектаМД.Найти(ИмяРекъ);
		СтруктураПолей.Вставить(ИмяРекъ, ?(РеквизитОбъектаМД = Неопределено, ИмяРекъ, РеквизитОбъектаМД.Синоним));
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПроверяемыеРеквизиты(ЕдиницаИзмерения, ПолучатьСинонимыРеквизитов = Ложь)
	
	СтруктураПроверяемыеРеквизиты = Новый Структура("Наименование,Поставщик,ТипПродукции,Технолог,
		|ЗаказыКонтактноеЛицо,ЗаказыКонтактныйТелефон,ЗаказыЭлАдрес,СтранаПроисхождения,КодОКП,СтавкаНДСПоОКП,
		|СоставПродуктаДляЭтикетки,ЗакупочнаяЦена,ЕдиницаИзмерения,Квант,СрокГодности,ТипСрокаГодности");
	
	Если Найти(НРег(ЕдиницаИзмерения), "шт") > 0 Тогда
		СтруктураПроверяемыеРеквизиты.Вставить("Вес");
		СтруктураПроверяемыеРеквизиты.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	//#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда // так выдаёт ошибку на Метаданные (
	#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	Если ПолучатьСинонимыРеквизитов Тогда
		СтруктураПроверяемыеРеквизиты.Вставить("Состав", Новый Структура("Номенклатура,ЕдиницаИзмерения"));
		ЗаполнитьСинонимыПолей(СтруктураПроверяемыеРеквизиты);
	КонецЕсли;
	#КонецЕсли
	
	Возврат СтруктураПроверяемыеРеквизиты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИспользуемыеРеквизиты(ЕдиницаИзмерения, ПолучатьСинонимыРеквизитов = Ложь)
	
	СтруктураПроверяемыеРеквизиты = Новый Структура("Наименование,Поставщик,ТипПродукции,СтранаПроисхождения,Технолог,ЕдиницаИзмерения,
		|ЗаказыКонтактноеЛицо,ЗаказыКонтактныйТелефон,ЗаказыЭлАдрес,
		|КодОКП,СтавкаНДСПоОКП,ЗакупочнаяЦена,СрокГодности,ТипСрокаГодности,ПредельноеКоличествоДнейСрокаГодности,ТемператураХраненияОт,ТемператураХраненияДо,
		|Квант,МинимальноеКоличествоВЗаказе,Штрихкод,ТипПозиционирования,ФишкаКратко,ФишкаРазвёрнуто,
		|СоставПродуктаДляЭтикетки,НаименованиеДляЦенника,
		|ПодгруппаНоменклатуры,ГруппаНоменклатурыУРЗ,Планограмма,МестоВыкладки,УсловноеЗадвоение,ВидСкладируемости,РольТехнолога,ПлановыйАссортимент");
	
	Если Найти(НРег(ЕдиницаИзмерения), "шт") > 0 Тогда
		СтруктураПроверяемыеРеквизиты.Вставить("Вес");
		СтруктураПроверяемыеРеквизиты.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	//#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда // так выдаёт ошибку на Метаданные (
	#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	Если ПолучатьСинонимыРеквизитов Тогда
		СтруктураПроверяемыеРеквизиты.Вставить("Состав", Новый Структура("Номенклатура,ЕдиницаИзмерения"));
		ЗаполнитьСинонимыПолей(СтруктураПроверяемыеРеквизиты);
	КонецЕсли;
	#КонецЕсли
	
	Возврат СтруктураПроверяемыеРеквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДублиХарактеристикПолностьюЗаменяемым(МассивТоваров, Производитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель
		|ПОМЕСТИТЬ ВТОсновная
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТОсновная.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
		|		ПО (Дубли.Производитель = ВТОсновная.Производитель
		|					И НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура
		|				ИЛИ Дубли.Производитель = &Производитель)
		|ГДЕ
		|	НЕ Дубли.Номенклатура ЕСТЬ NULL");
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьДобавленияТовараВГруппуАналогов()
	
	Если НЕ ЗначениеЗаполнено(Объект.УсловноеЗадвоение) Тогда Возврат Истина; КонецЕсли;
	
	//проверяем возможность добавления заводимого товара в выбранную группу аналогов (с учетом галки взаимозаменяемости)
	ГруппаАналоговСсылка = Справочники.АналогиНоменклатуры.ПолучитьАналогДляНоменклатуры(Объект.УсловноеЗадвоение);
	Если НЕ ЗначениеЗаполнено(ГруппаАналоговСсылка) Тогда Возврат Истина; КонецЕсли;
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.УсловноеЗадвоение, "ПолностьюЗаменяемыйТовар") Тогда
		МассивТоваров = Новый Массив;
		Если ЗначениеЗаполнено(ГруппаАналоговСсылка) Тогда
			МассивТоваров = ГруппаАналоговСсылка.Товары.ВыгрузитьКолонку("Номенклатура");
		Иначе
			МассивТоваров.Добавить(Объект.УсловноеЗадвоение);
		КонецЕсли;
		
		МассивДублей = ПолучитьДублиХарактеристикПолностьюЗаменяемым(МассивТоваров, Объект.Производитель);
		Если МассивДублей.Количество() > 0 Тогда
			Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
			Для Каждого ТекНоменклатура Из МассивДублей Цикл
				Сообщить(ТекНоменклатура);
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
Перем СтрокаОшибки, СтруктураОшибки;
	
	СтруктураОшибки = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Объект.ЗаказыЭлАдрес) Тогда
		СтрокаОшибки = ПроверитьЗаказыЭлАдрес(Объект.ЗаказыЭлАдрес);
		Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда
			СтруктураОшибки.Вставить("Объект.ЗаказыЭлАдрес", СтрокаОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоШтучныйТовар = (Найти(НРег(Объект.ЕдиницаИзмерения), "шт") > 0);
	Если Объект.ТемператураХраненияОт > Объект.ТемператураХраненияДо Тогда
		СтруктураОшибки.Вставить("Объект.ТемператураХраненияОт", "Температура хранения ""от"" не может быть больше Температуры хранения ""до""");
	//+++АК SHEP 2018.03.01 ИП-00017032: пока отключил
	//ИначеЕсли ЭтоШтучныйТовар И ЗначениеЗаполнено(Объект.Вес) И Объект.Квант < Объект.Вес Тогда
	//	СтруктураОшибки.Вставить("Объект.Квант", "Квант не может быть меньше веса/объёма единичной упаковки (" + Объект.Вес + " " + Объект.ЕдиницаИзмеренияВеса + ")");
	//---АК SHEP 2018.03.01
	КонецЕсли;
	
	Если СтруктураОшибки.Количество() = 0 Тогда
		СтруктураПроверяемыеРеквизиты = ПолучитьПроверяемыеРеквизиты(Объект.ЕдиницаИзмерения, Истина);
		
		Если НовыйСтатус = "ПрошлаПроверку" Тогда
			СтруктураПроверяемыеРеквизиты.Вставить("ПодгруппаНоменклатуры", "Подгруппа номенклатуры");
			СтруктураПроверяемыеРеквизиты.Вставить("Планограмма", "Планограмма");
			СтруктураПроверяемыеРеквизиты.Вставить("МестоВыкладки", "Место выкладки");
			СтруктураПроверяемыеРеквизиты.Вставить("НаименованиеДляЦенника", "Наименование для ценника");
			СтруктураПроверяемыеРеквизиты.Вставить("ВидСкладируемости", "Вид складируемости");
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураПроверяемыеРеквизиты Цикл
			
			ИмяРекъ = КлючИЗначение.Ключ;
			СтруктураПроверяемыеРеквизитыТЧ = КлючИЗначение.Значение;
			
			// проверяем заполненность табличной части
			Если ТипЗнч(СтруктураПроверяемыеРеквизитыТЧ) = Тип("Структура") Тогда
				Для Каждого СтрокаТЧ Из Объект[ИмяРекъ] Цикл
					Для Каждого КлючИЗнач Из СтруктураПроверяемыеРеквизитыТЧ Цикл
						Если НЕ ЗначениеЗаполнено(СтрокаТЧ[КлючИЗнач.Ключ]) Тогда
							// Если он не заполнен, сообщим об этом пользователю
							СтруктураОшибки.Вставить("Объект." + ИмяРекъ + "[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=") + "]",
							  "Табл. часть '" + ИмяРекъ + "': в строке №" + СтрокаТЧ.НомерСтроки + " не заполнено поле '" + КлючИЗнач.Значение + "'");
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект[ИмяРекъ]) Тогда
				// Если он не заполнен, сообщим об этом пользователю
				СтруктураОшибки.Вставить("Объект." + ИмяРекъ, "Не заполнено поле '" + КлючИЗначение.Значение + "'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Отказ = НЕ ПроверитьВозможностьДобавленияТовараВГруппуАналогов();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураОшибки Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КлючИЗначение.Значение, Объект.Ссылка, КлючИЗначение.Ключ,, Отказ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", КнопкаТаймаута = Неопределено, ОписаниеОповещения = "")
	ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута, ОписаниеОповещения, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНаСервере(ОписаниеОповещения)
	Выполнить(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
Перем ОписаниеОповещения;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.Вопрос" Тогда
		ОписаниеОповещения = "";
		Если ВыбранноеЗначение.Свойство("ОписаниеОповещения", ОписаниеОповещения) Тогда
			ВыбранноеЗначениеРезультат = Строка(ВыбранноеЗначение.Значение);
			ВыполнитьНаСервере(ОписаниеОповещения);
			
			Если ВыбранноеЗначениеРезультат = "Да" И Найти(ОписаниеОповещения, "СменитьСтатус") > 0 Тогда
				ОповеститьОбИзменении(Объект.Ссылка);
				Закрыть();
			ИначеЕсли Найти(ОписаниеОповещения, "ЗамечанияИсправленоПриИзмененииЗавершение") > 0 И ВыбранноеЗначениеРезультат <> "Да" Тогда
				Элементы.Замечания.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезЗадвоения(Команда)
	Объект.УсловноеЗадвоение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаЗамечания Тогда
		ОбновитьЗначенияПолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура  ДобавитьПросмотретьЗамечание(Элемент, СтандартнаяОбработка)
Перем ЗамечаниеСтр;
	
	ЗамечаниеСтр = "";
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоПоставщик Тогда
		ИмяПоляСиноним = "";
		МассивСтрокДляОтбора = Объект.Замечания.НайтиСтроки(Новый Структура("Исправлено,ИмяПоля", Ложь, Элемент.Имя));
		Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
			ЗамечаниеСтр = ЗамечаниеСтр + СтрокаТЧ.Замечание + Символы.ПС;
			ИмяПоляСиноним = СтрокаТЧ.ИмяПоляСиноним;
		КонецЦикла;
		ПоказатьПредупреждениеПользователю(ЗамечаниеСтр,, ИмяПоляСиноним);
	Иначе
		Если ВвестиСтроку(ЗамечаниеСтр, "Введите замечание", 100) Тогда
			СтрокаТЧ = Объект.Замечания.Добавить();
			СтрокаТЧ.Дата = ТекущаяДата();
			СтрокаТЧ.Пользователь = ТекПользователь;
			СтрокаТЧ.ИмяПоля = Элемент.Имя;
			СтрокаТЧ.Замечание = ЗамечаниеСтр;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	//Если НЕ Копирование Тогда Отказ = Истина; КонецЕсли;
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ЭтоПоставщик Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли ТекущиеДанные.Исправлено Тогда
		ПоказатьПредупреждениеПользователю("Исправленные замечания удалять запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Дата = ТекущаяДата();
		ТекущиеДанные.Пользователь = ТекПользователь;
		ТекущиеДанные.Исправлено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Если ЭтоПоставщик И Поле
КонецПроцедуры

&НаКлиенте
Процедура ТоварАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СтрДлина(Текст) < 3 Тогда Возврат; КонецЕсли;
	
	ДанныеВыбора = ПолучитьДанныеВыбораНоменклатуры(Текст);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораНоменклатуры(Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 15
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Наименование КАК Представление
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.ЭтоГруппа
		|	И СпрНоменклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
		|	И СпрНоменклатура.Наименование ПОДОБНО &Текст");
	Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ТоварОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект[Элемент.Имя] = ВыбранноеЗначение;
	ТоварПослеВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Объект[Элемент.Имя] = ?(ЗначениеЗаполнено(ДанныеВыбора), ДанныеВыбора, Текст);
	ТоварПослеВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварПослеВыбора(Элемент)
	
	Элементы.ГруппаПризнакНоменклатуры.ТекущаяСтраница =
		?(ТипЗнч(Объект[Элемент.Имя]) = Тип("Строка") И НЕ ПустаяСтрока(Объект[Элемент.Имя]), Элементы.ГруппаНоваяНоменклатура, Элементы.ГруппаИмеющаясяНоменклатура);
	
	//
	НаименованиеДляЦенника = СокрЛП(Объект.НаименованиеДляЦенника);
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "   ", " ");
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "  ", " ");
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, " ", Символы.ПС);
	Элементы.ПозицияРазделителяДляЦенника.МаксимальноеЗначение = СтрЧислоСтрок(НаименованиеДляЦенника);
	
	ПолучитьПримерЗаполненияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ПоставщикПриИзмененииНаСервере(Элемент <> Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере(ЗаполнятьЗначения)
	
	ТекПоставщик = Объект.Поставщик;
	
	ПоставщикРаботаетСНДС = НЕ (ТекПоставщик.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") ИЛИ ТекПоставщик.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
	
	// для нового элемента справочника заполняем значения по умолчанию
	Если ЗначениеЗаполнено(ТекПоставщик) И (ЗаполнятьЗначения ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		РеквизитОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитОбъект.ЗаполнитьКонтактыДляЗаказа();
		ЗначениеВРеквизитФормы(РеквизитОбъект, "Объект");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект, "ЗаказыКонтактноеЛицо,ЗаказыКонтактныйТелефон,ЗаказыЭлАдрес");
	
	Если НЕ ТолькоПросмотр Тогда
		// заполняем список выбора "Производитель"
		Если ЗначениеЗаполнено(ТекПоставщик) Тогда
			МассивКонтрагентов = Справочники.ХарактеристикиНоменклатурыПоставщиков.ПолучитьМассивКонтрагентовПоставщика(ТекПоставщик);
		Иначе
			МассивКонтрагентов = Новый Массив;
		КонецЕсли;
		
		Если МассивКонтрагентов.Количество() > 0 Тогда
			Элементы.Производитель.КнопкаСпискаВыбора = Истина;
			Элементы.Производитель.СписокВыбора.ЗагрузитьЗначения(МассивКонтрагентов);
			Если НЕ ЗначениеЗаполнено(Объект.Производитель) И МассивКонтрагентов.Количество() = 1 Тогда
				Объект.Производитель = Строка(МассивКонтрагентов[0]);
			КонецЕсли;
		Иначе
			Элементы.Производитель.КнопкаСпискаВыбора = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПоГОСТуТУ(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ГосударственныйСтандартТехническоеУсловие) Тогда
		ПоказатьПредупреждениеПользователю("Нужно заполнить ГОСТ/ТУ!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Состав.Количество() > 0 Тогда
		ТекстВопроса = "Состав уже заполнен. Очистить и заполнить заново?";
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ВыбранноеЗначениеРезультат = Строка(Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет));
			ЗаполнитьСоставПоГОСТуТУ_Завершение();
		#Иначе
			ПоказатьВопросПользователю(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет,,, "ЗаполнитьСоставПоГОСТуТУ_Завершение()");
		#КонецЕсли
	Иначе
		ВыбранноеЗначениеРезультат = Строка(КодВозвратаДиалога.Да);
		ЗаполнитьСоставПоГОСТуТУ_Завершение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПоГОСТуТУ_Завершение()
	
	Если ВыбранноеЗначениеРезультат <> "Да" Тогда Возврат; КонецЕсли;
	
	ЗаполнитьСоставПоГОСТуТУ_НаСервере();
	СоставПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПоГОСТуТУ_НаСервере()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГосударственныеСтандартыИТехническиеУсловияСостав.НомерСтроки,
		|	ГосударственныеСтандартыИТехническиеУсловияСостав.Номенклатура КАК Номенклатура,
		|	СпрНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ГосударственныеСтандартыИТехническиеУсловия.Состав КАК ГосударственныеСтандартыИТехническиеУсловияСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ГосударственныеСтандартыИТехническиеУсловияСостав.Номенклатура = СпрНоменклатура.Ссылка
		|ГДЕ
		|	ГосударственныеСтандартыИТехническиеУсловияСостав.Ссылка = &ГОСТТУ_Ссылка");
	Запрос.УстановитьПараметр("ГОСТТУ_Ссылка", Объект.ГосударственныйСтандартТехническоеУсловие);
	
	Объект.Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйСтандартТехническоеУсловиеПриИзменении(Элемент)
	
	Элементы.ЗаполнитьСоставПоГОСТуТУ.Доступность = ЗначениеЗаполнено(Объект.ГосударственныйСтандартТехническоеУсловие);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	СоставПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоставПриИзмененииНаСервере()
	
	СоставСтрокой = "";
	Для Каждого СтрокаТЧ Из Объект.Состав Цикл
		СоставСтрокой = СоставСтрокой + ?(ПустаяСтрока(СоставСтрокой), "", ", ") + Строка(СтрокаТЧ.Номенклатура);
	КонецЦикла;
	
	Элементы.СоставПродуктаДляЭтикетки.СписокВыбора.Очистить();
	Элементы.СоставПродуктаДляЭтикетки.КнопкаСпискаВыбора = НЕ ПустаяСтрока(СоставСтрокой);
	Если НЕ ПустаяСтрока(СоставСтрокой) Тогда
		Элементы.СоставПродуктаДляЭтикетки.СписокВыбора.Добавить(СоставСтрокой);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтрокаОшибки = ПроверитьЗаказыЭлАдрес(Объект.ЗаказыЭлАдрес);
	
	Если НЕ ПустаяСтрока(СтрокаОшибки) И НЕ ЭтоКопияБазы() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки, Объект.Ссылка, "Объект.ЗаказыЭлАдрес",, Отказ);
		Возврат;
	КонецЕсли;
	
	// проверяем, изменились ли реквизиты конт. лица и если изменились, записываем
	флЗаписыватьКонтактноеЛицоДляЗаказа = Ложь;
	СтруктураКонтактноеЛицоДляЗаказа = Новый Структура("ЗаказыКонтактноеЛицо,ЗаказыКонтактныйТелефон,ЗаказыЭлАдрес");
	Для Каждого КлючИЗначение Из СтруктураКонтактноеЛицоДляЗаказа Цикл
		Если ЭтаФорма[КлючИЗначение.Ключ] <> ТекущийОбъект[КлючИЗначение.Ключ] Тогда флЗаписыватьКонтактноеЛицоДляЗаказа = Истина; КонецЕсли;
	КонецЦикла;
	
	Если флЗаписыватьКонтактноеЛицоДляЗаказа Тогда
		СтруктураКонтактноеЛицоДляЗаказа.Вставить("Поставщик");
		ЗаполнитьЗначенияСвойств(СтруктураКонтактноеЛицоДляЗаказа, ТекущийОбъект);
		ЗаписатьКонтактноеЛицоДляЗаказа(СтруктураКонтактноеЛицоДляЗаказа, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьКонтактноеЛицоДляЗаказа(Объект, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Перезаписываем "Адрес электронной почты контрагента для обмена электронными документами", если изменился
	//!!!Если ЗначениеЗаполнено(Объект.ЗаказыЭлАдрес) Тогда
		РегСвМенеджерЗаписи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		РегСвМенеджерЗаписи.Объект = Объект.Поставщик;
		РегСвМенеджерЗаписи.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
		РегСвМенеджерЗаписи.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами");
		РегСвМенеджерЗаписи.Прочитать();
		Если НЕ РегСвМенеджерЗаписи.Выбран() ИЛИ РегСвМенеджерЗаписи.Представление <> Объект.ЗаказыЭлАдрес Тогда
			РегСвМенеджерЗаписи.Объект = Объект.Поставщик;
			РегСвМенеджерЗаписи.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
			РегСвМенеджерЗаписи.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами");
			РегСвМенеджерЗаписи.Представление = Объект.ЗаказыЭлАдрес;
			РегСвМенеджерЗаписи.Записать();
		КонецЕсли;
	//КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо,
		|	КонтактныеЛицаКонтрагентов.Ссылка КАК КонтактноеЛицоКонтрагента
		|ИЗ
		|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.Владелец = &Поставщик
		|	И НЕ КонтактныеЛицаКонтрагентов.ПометкаУдаления
		|	И КонтактныеЛицаКонтрагентов.РольКонтактногоЛица = ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛиц.ДляЗаказов)");
	Запрос.УстановитьПараметр("Поставщик", Объект.Поставщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		// контактное лицо
		КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицоОбъект.Наименование = Объект.ЗаказыКонтактноеЛицо;
		КонтактноеЛицоОбъект.Записать();
		КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
		
		// контактное лицо контрагента
		КонтактноеЛицоОбъект = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		КонтактноеЛицоОбъект.Владелец = Объект.Поставщик;
		КонтактноеЛицоОбъект.Наименование = Строка(Объект.Поставщик) + " (Для заказов)";
		КонтактноеЛицоОбъект.КонтактноеЛицо = КонтактноеЛицо;
		КонтактноеЛицоОбъект.РольКонтактногоЛица = Справочники.РолиКонтактныхЛиц.ДляЗаказов;
		КонтактноеЛицоОбъект.Записать();
		КонтактноеЛицоКонтрагента = КонтактноеЛицоОбъект.Ссылка;
		
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		КонтактноеЛицо = ВыборкаЗапроса.КонтактноеЛицо;
		Если КонтактноеЛицо.Наименование <> Объект.ЗаказыКонтактноеЛицо Тогда
			КонтактноеЛицоОбъект = КонтактноеЛицо.ПолучитьОбъект();
			КонтактноеЛицоОбъект.Наименование = Объект.ЗаказыКонтактноеЛицо;
			КонтактноеЛицоОбъект.Записать();
		КонецЕсли;
		КонтактноеЛицоКонтрагента = ВыборкаЗапроса.КонтактноеЛицоКонтрагента;
	КонецЕсли;
	
	НаборКонтактнойИнформации = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборКонтактнойИнформации.Отбор.Объект.Установить(КонтактноеЛицоКонтрагента);
	
	// Телефон контактного лица
	ВидТелефонаКонтактногоЛица = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента");
	Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И НЕ ПустаяСтрока(Объект.ЗаказыКонтактныйТелефон) Тогда
		НоваяЗапись = НаборКонтактнойИнформации.Добавить();
		НоваяЗапись.Вид    = ВидТелефонаКонтактногоЛица;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяЗапись.Объект = КонтактноеЛицоКонтрагента;
		НоваяЗапись.Поле1  = Объект.ЗаказыКонтактныйТелефон;
		УправлениеКонтактнойИнформацией.СформироватьПредставлениеТелефона(НоваяЗапись);
	КонецЕсли;
	
	// Адрес электронной почты контактного лица
	ВидЭлектроннойПочтыКонтактногоЛица = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента");
	Если ЗначениеЗаполнено(ВидЭлектроннойПочтыКонтактногоЛица) И НЕ ПустаяСтрока(Объект.ЗаказыЭлАдрес) Тогда
		НоваяЗапись = НаборКонтактнойИнформации.Добавить();
		НоваяЗапись.Вид    = ВидЭлектроннойПочтыКонтактногоЛица;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НоваяЗапись.Объект = КонтактноеЛицоКонтрагента;
		НоваяЗапись.Представление = Объект.ЗаказыЭлАдрес;
	КонецЕсли;
	
	Попытка
		Если НаборКонтактнойИнформации.Количество() > 0 Тогда
			НаборКонтактнойИнформации.Записать();
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицоКонтрагента
		|ИЗ
		|	РегистрСведений.ИсторияКонтактныхЛицКонтрагентов КАК ИсторияКонтактныхЛицКонтрагентов
		|ГДЕ
		|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицоКонтрагента = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицоКонтрагента);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если НЕ ВыборкаЗапроса.Следующий() Тогда
		
		НаборЗаписей = РегистрыСведений.ИсторияКонтактныхЛицКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КонтактноеЛицоКонтрагента.Установить(КонтактноеЛицоКонтрагента);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период 						= ТекущаяДата();
		НоваяЗапись.КонтактноеЛицоКонтрагента 	= КонтактноеЛицоКонтрагента;
		НоваяЗапись.КонтактноеЛицо 				= КонтактноеЛицо;
		НоваяЗапись.Контрагент 					= Объект.Поставщик;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если Найти(ИмяТекущегоЭлемента, "ЗамечанияИмяПоля") = 1 Тогда
		Отказ = Истина;
		//Если ЭтоПоставщик Тогда
			ТекущийЭлемент = Элементы[ТекущиеДанные.ИмяПоля];
		//КонецЕсли;
	ИначеЕсли ИмяТекущегоЭлемента = "ЗамечанияЗамечание" Тогда
		Отказ = ТекущиеДанные.Исправлено;
	ИначеЕсли ИмяТекущегоЭлемента = "ЗамечанияЗначениеПоля" Тогда
		ТекущиеДанные.ЗначениеПоля = Объект[ТекущиеДанные.ИмяПоля];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗамечанияИсправлено" Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗамечанияИсправленоПриИзмененииЗавершение(ИдСтроки)
	Если ВыбранноеЗначениеРезультат <> "Да" Тогда
		ТекущиеДанные = Объект.Замечания.НайтиПоИдентификатору(ИдСтроки);
		ТекущиеДанные.Исправлено = Ложь;
		//Элементы.Замечания.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияИсправленоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Замечания.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекущиеДанные.Исправлено Тогда
		ТекстВопроса = "Замечание исправлено?";
		//#Если ТолстыйКлиентОбычноеПриложение Тогда
		//	ВыбранноеЗначениеРезультат = Строка(Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет));
		//	ЗамечанияПриИзмененииЗавершение();
		//#Иначе
			ПоказатьВопросПользователю(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,,,,
			  "ЗамечанияИсправленоПриИзмененииЗавершение(" + Формат(ТекущиеДанные.ПолучитьИдентификатор(), "ЧН=; ЧГ=") + ")");
		//#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПримерЗаполнения(Характеристика)
	Результат = Новый ТабличныйДокумент;
	Ценник = ПолучитьЦенник_80_60(Объект.Ссылка, Характеристика, Объект.ФишкаКратко, , Объект.ПозицияРазделителяДляЦенника);
	Результат.Вывести(Ценник);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПолучитьПримерЗаполненияКлиент()
	ПримерОтображения = ПолучитьПримерЗаполнения(Объект.ХарактеристикаНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура ПозицияРазделителяДляЦенникаПриИзменении(Элемент)
	ПолучитьПримерЗаполненияКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПлановыйАссортиментПриИзменении(Элемент)
	ПродажиНаМагазинВДеньШтук = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ПлановыйАссортимент, "ПродажиНаМагазинВДеньШтук");
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенник_80_60(Товар, Характеристика, Знач Фишка = Неопределено, Знач НаименованиеДляЦенника = Неопределено,
								Знач ПозицияРазделителяДляЦенника = Неопределено, СтруктураВыведенногоЦенника = Неопределено,
								ПечататьДробныйЦенник = Ложь, Организация = "ООО ""Вкусвилл""", ДляИзбенок = Ложь)
	
	Если НЕ ДляИзбенок Тогда			
		Макет = Справочники.Номенклатура.ПолучитьМакет("Ценник_80_60"); 	
	Иначе
		Макет = Справочники.Номенклатура.ПолучитьМакет("Ценник_80_60_Избенка"); 	
	КонецЕсли;	
	
	СтруктураВыведенногоЦенника = Новый Структура("НаименованиеТовара, Цена, Страна, СрокГодности, Фишка, ЦенаПоАкции, НазваниеАкции, КомментарийАкции, Вес");
	
	ЭтоШтучныйТовар = (Найти(НРег(Объект.ЕдиницаИзмерения), "шт") > 0);
	//СрокГодности 	= Выборка.СрокГодности;
	Если ЗначениеЗаполнено(Объект.ТипСрокаГодности) Тогда
		СрокГодности 	= ЧислоПрописью(Объект.СрокГодности, "НД=Ложь", Объект.ТипСрокаГодности.ПараметрыПрописиНаРусском);
		СрокГодности 	= СтрЗаменить(СрокГодности, " ", Символы.ПС);
		Если СтрЧислоСтрок(СрокГодности) > 0 Тогда
			СрокГодности = Формат(Объект.СрокГодности, "ЧГ=0") + " " + СтрПолучитьСтроку(СрокГодности, СтрЧислоСтрок(СрокГодности));
		КонецЕсли;
	КонецЕсли;
	ВесОбъем			= ?(ЭтоШтучныйТовар, Строка(Объект.Вес) + СокрЛП(Объект.ЕдиницаИзмеренияВеса), "");
	Цена				= Объект.ЗакупочнаяЦена;
	СтранаПроисхождения = Объект.СтранаПроисхождения;
	
	Если Фишка = Неопределено Тогда
		Фишка 					= Объект.Фишка;
	КонецЕсли;
	Если НаименованиеДляЦенника = Неопределено Тогда
		НаименованиеДляЦенника = СокрЛП(Объект.НаименованиеДляЦенника);
		Если ПустаяСтрока(НаименованиеДляЦенника) Тогда
			НаименованиеДляЦенника = Объект.Наименование;
		КонецЕсли;
	КонецЕсли;
	Если ПозицияРазделителяДляЦенника = Неопределено Тогда
		ПозицияРазделителяДляЦенника = Объект.ПозицияРазделителяДляЦенника;
	КонецЕсли;	
	
	СтруктураВыведенногоЦенника.НаименованиеТовара = НаименованиеДляЦенника;
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "   "	, " ");
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "  "	, " ");
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, " "	, Символы.ПС);
	
	
	//				
	Область = Макет.ПолучитьОбласть("Область");
	
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "ё", "е");
	НаименованиеДляЦенника = СтрЗаменить(НаименованиеДляЦенника, "р", "p");
	
	Если ПозицияРазделителяДляЦенника = 0 Тогда
		СтрокаНаименования1 = "";
		Для н = 0 по СтрЧислоСтрок(НаименованиеДляЦенника) Цикл
			СтрокаНаименования1 = СтрокаНаименования1 + СтрПолучитьСтроку(НаименованиеДляЦенника, н) + " ";
		КонецЦикла;
		СтрокаНаименования1 = СокрЛП(СтрокаНаименования1);
		
		Область.Параметры.СтрокаНаименования1 = ВРЕГ(СтрокаНаименования1);
	Иначе
		СтрокаНаименования1 = "";
		Для н = 0 по ПозицияРазделителяДляЦенника Цикл
			СтрокаНаименования1 = СтрокаНаименования1 + СтрПолучитьСтроку(НаименованиеДляЦенника, н) + " ";
		КонецЦикла;
		СтрокаНаименования1 = СокрЛП(СтрокаНаименования1);
		
		Область.Параметры.СтрокаНаименования1 = ВРЕГ(СтрокаНаименования1);
//		Результат.Вывести(Область);
		
		СтрокаНаименования2 = "";
		Для н = ПозицияРазделителяДляЦенника + 1 по СтрЧислоСтрок(НаименованиеДляЦенника) Цикл
			СтрокаНаименования2 = СтрокаНаименования2 + СтрПолучитьСтроку(НаименованиеДляЦенника, н) + " ";
		КонецЦикла;
		СтрокаНаименования2 = НРег(СокрЛП(СтрокаНаименования2));
		
		Область.Параметры.СтрокаНаименования2 = ВРЕГ(СтрокаНаименования2);
	КонецЕсли;
	Если Найти(ВесОбъем, "л") > 0 Тогда
		Область.Параметры.ВесОбъемЗаголовок = "Объем";
	ИначеЕсли Найти(ВесОбъем, "г") > 0 Тогда
		Область.Параметры.ВесОбъемЗаголовок = "Вес";
	Иначе
		Область.Параметры.ВесОбъемЗаголовок = "Вес/Объем";
	КонецЕсли;
	
	//Область.Параметры.Орг 	= Организация;
	Область.Параметры.Орг 	= "ООО ""Вкусвилл""";
	Область.Параметры.СрокГодности 	= СрокГодности;
	СтруктураВыведенногоЦенника.СрокГодности = СрокГодности;
	Область.Параметры.Страна 		= СтранаПроисхождения;
	СтруктураВыведенногоЦенника.Страна = СтранаПроисхождения;
	СтрокиДробныйЦенник = Новый Массив; //ТабЛожные.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Товар, Характеристика));
	Если СтрокиДробныйЦенник.Количество() > 0
			И ПечататьДробныйЦенник Тогда
		ВесВГраммах = Прав(СокрЛП(СтрокиДробныйЦенник[0].ЛожныйШтрихКод), 5);
		ВесВГраммах = Лев(ВесВГраммах, 4);
		Пока Лев(ВесВГраммах, 1) = "0" Цикл
			ВесВГраммах = Сред(ВесВГраммах, 2);
		КонецЦикла;
		Попытка
			Коэф = Число(ВесВГраммах) / 1000;
			ЦенаДробное = Окр(Цена * Коэф, 0);
			Область.Параметры.Цена 		= Формат(ЦенаДробное, "ЧГ=0");
			Область.Параметры.ВесОбъем 	= ВесВГраммах + " г";
		Исключение	
			Область.Параметры.Цена 		= Формат(Цена, "ЧГ=0");
			Область.Параметры.ВесОбъем 	= ВесОбъем;
		КонецПопытки;
	Иначе	
		Область.Параметры.Цена 			= Формат(Цена, "ЧГ=0");
		Область.Параметры.ВесОбъем 		= ВесОбъем;
	КонецЕсли;	
	СтруктураВыведенногоЦенника.Вес 	= ВесОбъем;
	СтруктураВыведенногоЦенника.Цена 	= Цена;
	
	Область.Параметры.Фишка = Фишка;
	СтруктураВыведенногоЦенника.Фишка = Фишка;
	
	//Если СтрДлина(Фишка) > 30 Тогда
	//	Область.Область(10, 2, 10, 3).Шрифт = Новый Шрифт(Область.Область(10, 2, 10, 3).Шрифт,, 10);
	//КонецЕсли;	
	
	Возврат Область;
	
КонецФункции

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	Если ОткрытьФайл("ГОСТ", 1, Ложь) Тогда
		ОткрытьФайл("ГОСТ", 1);
	Иначе
		Если ДобавитьФайл("ГОСТ", 1) Тогда
			Элементы.ПрикрепитьФайл.Заголовок = "Открыть файл";
			Элементы.ПрикрепитьФайл.Картинка = БиблиотекаКартинок.ОткрытьФайл;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьФайл(ТипФайла, Номер = 0)
	
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		ПоказатьПредупреждениеПользователю("Поставщик должен быть заполнен!", , "Прикрепление файла");
		Возврат Ложь;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Результ = ПодключитьРасширениеРаботыСФайлами();
	
	Если НЕ Результ Тогда
		УстановитьРасширениеРаботыСФайлами();
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			Сообщить("Ошибка подключения расширения работы с файлами!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	АдресВремХранилища = "";
	ВыбранноеИмяФайла = "";
	Результ = ПоместитьФайл(АдресВремХранилища,, ВыбранноеИмяФайла, Истина, УникальныйИдентификатор);
	Если НЕ Результ Тогда Возврат Ложь; КонецЕсли;
	
	Файл = Новый Файл(ВыбранноеИмяФайла);
	РасширениеФайла = Файл.Расширение;
	
	ОтносительноеИмяФайла = ЗаписатьФайлКартинкиНаСервере(АдресВремХранилища, Объект.Поставщик, РасширениеФайла);
	
	// получаем следующий номер файла
	Если Номер = 0 Тогда
		МассивСтрокДляОтбора = Объект.Файлы.НайтиСтроки(Новый Структура("ТипФайла", ТипФайла));
		Для Каждого СтрокаТЧФайлы Из МассивСтрокДляОтбора Цикл
			Номер = Макс(Номер, СтрокаТЧФайлы.Номер);
		КонецЦикла;
		Номер = Номер + 1;
	КонецЕсли;
	
	СтрокаТЧФайлы = Объект.Файлы.Добавить();
	СтрокаТЧФайлы.ТипФайла = ТипФайла;
	СтрокаТЧФайлы.Номер = Номер;
	СтрокаТЧФайлы.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	Модифицированность = Истина;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОткрытьФайл(ТипФайла, Номер = 1, Открывать = Истина)
	
	МассивСтрокДляОтбора = Объект.Файлы.НайтиСтроки(Новый Структура("ТипФайла,Номер", ТипФайла, Номер));
	Если МассивСтрокДляОтбора.Количество() = 0 Тогда
		Если Открывать Тогда Сообщить("Файл не найден"); КонецЕсли;
		Возврат Ложь;
	ИначеЕсли НЕ Открывать Тогда
		Возврат Истина;
	КонецЕсли;
	
	КаталогФайлов = КаталогФайлов(Объект.Поставщик);
	Для Каждого СтрокаТЧФайлы Из МассивСтрокДляОтбора Цикл
		ЗапуститьПриложение(КаталогФайлов + СтрокаТЧФайлы.ОтносительноеИмяФайла);
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция КаталогФайлов(Поставщик)
	Возврат Справочники.ХарактеристикиНоменклатурыПоставщиков.ПолучитьКаталогХраненияФайлов(Поставщик);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьФайлКартинкиНаСервере(АдресВремХранилища, Поставщик, РасширениеФайла)
	
	КаталогФайлов = КаталогФайлов(Поставщик);
	ИмяФайла = Строка(Новый УникальныйИдентификатор()) + РасширениеФайла;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВремХранилища);
	ДвоичныеДанные.Записать(КаталогФайлов + ИмяФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ИнформацияПоВыборуФайлов(Команда)
Перем ТекстИнформации;
	
	ТекстИнформации = "Внимание! В связи с ограничением платформы 1С 8.2,
		|рекомендуется использовать браузер Internet Explorer или Mozilla Firefox,
		|а также Google Chrome (до версии 37)";
	ПоказатьПредупреждениеПользователю(ТекстИнформации, , "Информация по работе с файлами");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьЗамечание(Команда)
	
	Если НЕ ЭтоПоставщик Тогда Возврат; КонецЕсли;
	
	ТекущиеДанные = Элементы.Замечания.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	НовоеЗначение = Объект[ТекущиеДанные.ИмяПоля];
	Если ВвестиЗначение(НовоеЗначение, "Введите новое значение") Тогда
		Объект[ТекущиеДанные.ИмяПоля] = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияЗначениеПоляПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Замечания.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Объект[ТекущиеДанные.ИмяПоля] = ТекущиеДанные.ЗначениеПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияПолей(Команда = Неопределено)
	
	Для Каждого СтрокаТЧ Из Объект.Замечания Цикл
		СтрокаТЧ.ЗначениеПоля = Объект[СтрокаТЧ.ИмяПоля];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияЗначениеПоляОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
Перем СписокВыбора, СписокПоиска;
	
	// находим роль технолога по технологу
	Если ВыбранноеЗначение <> Неопределено Тогда
		СписокВыбора = Элементы.Технолог.СписокВыбора;
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ЭлементСписка <> Неопределено Тогда
			ПозТехнолога = СписокВыбора.Индекс(ЭлементСписка);
			
			СписокПоиска = Элементы.РольТехнолога.СписокВыбора;
			Если СписокПоиска.Количество() > ПозТехнолога Тогда
				Объект.РольТехнолога = СписокПоиска[ПозТехнолога].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УсловноеЗадвоениеПриИзмененииНаСервере(УсловноеЗадвоение)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	АналогиНоменклатурыТовары.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
		|ГДЕ
		|	АналогиНоменклатурыТовары.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", УсловноеЗадвоение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Сообщить("ru = 'Выбранная номенклатура состоит в нескольких группах аналогов:'");
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("" + Символы.Таб + ВыборкаЗапроса.Наименование);
		КонецЦикла;	
		Возврат ВыборкаЗапроса.Количество();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УсловноеЗадвоениеПриИзменении(Элемент)
	СостоитВАналогах = УсловноеЗадвоениеПриИзмененииНаСервере(Объект.УсловноеЗадвоение);
	Если СостоитВАналогах > 1 Тогда
		Объект.УсловноеЗадвоение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Отказ = НЕ ПроверитьВозможностьДобавленияТовараВГруппуАналогов();
КонецПроцедуры

//+++АК SHEP 2018.05.10 ЦУП-0017035
&НаКлиенте
Процедура ТребуетсяВетеринарноеСвидетельствоПриИзменении(Элемент)
	Элементы.ГруппаВетис.Видимость = Объект.ТребуетсяВетеринарноеСвидетельство;
КонецПроцедуры
