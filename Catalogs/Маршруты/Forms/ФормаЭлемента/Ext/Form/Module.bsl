
&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиВодителиМаршрута(СтруктураЗаписи)
	
    Возврат РегистрыСведений.ВодителиПоМаршруту.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

//+++АК sole 2018.06.20 ИП-00018920.01
&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	//АК БЕЛН 15.02.2017+
	Элементы.ПланируемоеВремяВыездаПоМаршруту.ОграничениеТипа=Новый ОписаниеТипов("СправочникСсылка.ВремяВыездаПоМаршруту");
	Элементы.ПланируемоеВремяВыездаПоМаршруту1.ОграничениеТипа=Новый ОписаниеТипов("Дата");
	Если ТипЗнч(Объект.ПланируемоеВремяВыездаПоМаршруту)=Тип("Дата") Тогда
		Элементы.ПланируемоеВремяВыездаПоМаршруту.Видимость=Ложь;
		Элементы.ПланируемоеВремяВыездаПоМаршруту1.Видимость=Истина;
	Иначе
		Элементы.ПланируемоеВремяВыездаПоМаршруту.Видимость=Истина;
		Элементы.ПланируемоеВремяВыездаПоМаршруту1.Видимость=Ложь;
	КонецЕсли;
	Элементы.ПланируемоеВремяВыездаПоМаршруту.Доступность=Не РольДоступна("Перевозчик");
	Элементы.ПланируемоеВремяВыездаПоМаршруту1.Доступность=Не РольДоступна("Перевозчик");
	
	//+++АК sole 2018.06.20 ИП-00018920.01	
	Элементы.Наименование.Доступность = Не РольДоступна("Перевозчик") ИЛИ Объект.Ссылка.Пустая();
	
	Если РольДоступна("Перевозчик") Тогда
		ЭтаФорма.Элементы.Период.Доступность = Ложь;	
		ЭтаФорма.Элементы.ВариантРасчетаНДС.Доступность = Ложь;			
		ЭтаФорма.Элементы.СтавкаНДС.Доступность = Ложь;
		ЭтаФорма.Элементы.ТорговыеТочкиСтавка.Доступность = Ложь;
		ЭтаФорма.Элементы.ТорговыеТочкиНаличиеДопТарифа.Доступность = Ложь;
		ЭтаФорма.Элементы.ТорговыеТочкиСтавкаДопТарифа.Доступность = Ложь;
	КонецЕсли;
	
	Если
			ЗначениеЗаполнено(Объект.Ссылка)
		И 	Не РольДоступна("ОператорСклада")
		И 	Не РольДоступна("ПолныеПрава")
		И	Не РольДоступна("Перевозчик")
		И	Не Объект.ПометкаУдаления 
	Тогда
		ЭтаФорма.ТолькоПросмотр=Истина;
	КонецЕсли; 
	
	Если 
			Не РольДоступна("ОператорСклада")
		И	Не РольДоступна("ПолныеПрава")
		И	Не РольДоступна("Перевозчик")
		И 	Объект.ТорговыеТочки.Количество()=0 
	Тогда
		Элементы.Тарифы.ТолькоПросмотр=Истина;
	КонецЕсли; 
	//---АК sole 2018.06.20 ИП-00018920.01
	
	//АК БЕЛН 15.02.2017-	
	
	//+++АК sole 2018.07.12 ИП-00019229
	// Перевозчика можно задавать в маршруте только один раз, при создании маршрута. 
	ЭтаФорма.Элементы.Перевозчик.Доступность = ЭтаФорма.Объект.Ссылка.Пустая();
	//---АК sole 2018.07.12 ИП-00019229

КонецПроцедуры

&НаСервере
Процедура РасчитатьКонфликтыСДругимиМаршрутами()
	
	//Перем Запрос;
	//
	//Если ЭтаФорма.ТаблицаКонфликтов.Количество() > 0 Тогда
	//	ЭтаФорма.ТаблицаКонфликтов.Очистить();
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка"				, Объект.Ссылка);
	//Запрос.УстановитьПараметр("Подразделение"		, Объект.СтруктурноеПодразделение);
	//Запрос.УстановитьПараметр("СтруктурныеЕдиницы"	, Объект.ТорговыеТочки.Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	//Запрос.УстановитьПараметр("ГруппыНоменклатуры"	,
	//	?(Объект.ГруппыНоменклатуры.Количество() = 0, Справочники.Номенклатура.ПустаяСсылка(), Объект.ГруппыНоменклатуры.Выгрузить().ВыгрузитьКолонку("Группа")));
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	МаршрутыТорговыеТочки.Ссылка,
	//|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница
	//|ПОМЕСТИТЬ ВТ_Маршруты
	//|ИЗ
	//|	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	//|ГДЕ
	//|	МаршрутыТорговыеТочки.Ссылка <> &Ссылка
	//|	И МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение = &Подразделение
	//|	И МаршрутыТорговыеТочки.СтруктурнаяЕдиница В(&СтруктурныеЕдиницы)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВложенныйЗапрос.Ссылка КАК Маршрут,
	//|	ВложенныйЗапрос.СтруктурнаяЕдиница,
	//|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Ссылка) КАК МаршрутПредставление,
	//|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ВЗ_Группы.Ссылка КАК Ссылка,
	//|		ВЗ_Группы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	//|		Номенклатура.Ссылка КАК ГруппаНоменклатура
	//|	ИЗ
	//|		(ВЫБРАТЬ
	//|			ВТ_Маршруты.Ссылка КАК Ссылка,
	//|			ВТ_Маршруты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	//|			ЕСТЬNULL(ВЗ_Группы.Группа, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Группа
	//|		ИЗ
	//|			ВТ_Маршруты КАК ВТ_Маршруты
	//|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|					МаршрутыГруппыНоменклатуры.Ссылка КАК Ссылка,
	//|					МаршрутыГруппыНоменклатуры.Группа КАК Группа
	//|				ИЗ
	//|					Справочник.Маршруты.ГруппыНоменклатуры КАК МаршрутыГруппыНоменклатуры
	//|				ГДЕ
	//|					МаршрутыГруппыНоменклатуры.Ссылка В
	//|							(ВЫБРАТЬ
	//|								ВТ_Маршруты.Ссылка
	//|							ИЗ
	//|								ВТ_Маршруты КАК ВТ_Маршруты)) КАК ВЗ_Группы
	//|				ПО ВТ_Маршруты.Ссылка = ВЗ_Группы.Ссылка) КАК ВЗ_Группы
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	//|			ПО (ВЗ_Группы.Группа = Номенклатура.Ссылка
	//|					ИЛИ ВЗ_Группы.Группа = Номенклатура.Родитель
	//|					ИЛИ ВЗ_Группы.Группа = Номенклатура.Родитель.Родитель
	//|					ИЛИ ВЗ_Группы.Группа = Номенклатура.Родитель.Родитель.Родитель
	//|					ИЛИ ВЗ_Группы.Группа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	//|	ГДЕ
	//|		Номенклатура.ЭтоГруппа = ИСТИНА) КАК ВложенныйЗапрос
	//|ГДЕ
	//|	ВложенныйЗапрос.ГруппаНоменклатура В ИЕРАРХИИ(&ГруппыНоменклатуры)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Маршрут,
	//|	ВложенныйЗапрос.СтруктурнаяЕдиница.Наименование
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВТ_Маршруты";
	//
	//ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	//Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
	//	НоваяСтрока = ЭтаФорма.ТаблицаКонфликтов.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	//КонецЦикла;
	
	Перем Запрос;
	
	Если ЭтаФорма.ТаблицаКонфликтов.Количество() > 0 Тогда
		ЭтаФорма.ТаблицаКонфликтов.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"				, Объект.Ссылка);
	Запрос.УстановитьПараметр("Подразделение"		, Объект.СтруктурноеПодразделение);
	
	//+++АК sole 2018.08.08 ИП-00019469
	//+++АК KIRN 2018.07.18 ИП-00019248 
	//Запрос.УстановитьПараметр("СтруктурныеЕдиницы"	, втТарифы.Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	//---АК KIRN ИП-00019248
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы"	, Объект.ТорговыеТочки.Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	//---АК sole 2018.08.08 ИП-00019469
	
	Запрос.УстановитьПараметр("Склады"	,
		?(Объект.Склады.Количество() = 0, Справочники.Склады.ПустаяСсылка(), Объект.Склады.Выгрузить().ВыгрузитьКолонку("Склад")));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутыТорговыеТочки.Ссылка,
	|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_Маршруты
	|ИЗ
	|	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	|ГДЕ
	|	МаршрутыТорговыеТочки.Ссылка <> &Ссылка
	//+++АК KIRN 2018.07.18 ИП-00019248 
//	|	И МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение = &Подразделение
	//---АК KIRN ИП-00019248
	|	И МаршрутыТорговыеТочки.СтруктурнаяЕдиница В(&СтруктурныеЕдиницы)
	//+++АК sole 2018.07.11 ИП-00019229
	|	И НЕ МаршрутыТорговыеТочки.Ссылка.ПометкаУдаления	
	//---АК sole 2018.07.11 ИП-00019229
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Маршрут,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Ссылка) КАК МаршрутПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЗ_Склады.Ссылка КАК Ссылка,
	|		ВЗ_Склады.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		Склады.Ссылка КАК Склад
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Маршруты.Ссылка КАК Ссылка,
	|			ВТ_Маршруты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			ЕСТЬNULL(ВЗ_Группы.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад
	|		ИЗ
	|			ВТ_Маршруты КАК ВТ_Маршруты
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МаршрутыСклады.Ссылка КАК Ссылка,
	|					МаршрутыСклады.Склад КАК Склад
	|				ИЗ
	|					Справочник.Маршруты.Склады КАК МаршрутыСклады
	|				ГДЕ
	|					МаршрутыСклады.Ссылка В
	|							(ВЫБРАТЬ
	|								ВТ_Маршруты.Ссылка
	|							ИЗ
	|								ВТ_Маршруты КАК ВТ_Маршруты)) КАК ВЗ_Группы
	|				ПО ВТ_Маршруты.Ссылка = ВЗ_Группы.Ссылка) КАК ВЗ_Склады
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО (ВЗ_Склады.Склад = Склады.Ссылка
	|					ИЛИ ВЗ_Склады.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВложенныйЗапрос
	//|ГДЕ
	//|	ВложенныйЗапрос.Склад В ИЕРАРХИИ(&Склады)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Маршрут,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Маршруты";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		НоваяСтрока = ЭтаФорма.ТаблицаКонфликтов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборВодителиМаршрута()
	
	ПараметрыЗапроса = ЭтаФорма.ВодителиПоМаршруту.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Маршрут", Объект.Ссылка);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ТекДата", ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокГруппНоменклатуры()
	
	ЗаголовокГрупп = ?(Объект.Склады.Количество() = 0, "По всем складам", Формат(Объект.Склады.Количество(), "ЧДЦ=0"));
	
КонецПроцедуры	

Процедура ОбновитьПеревозчика()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Маршрут", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВодителиПоМаршрутуСрезПоследних.Автомобиль.Перевозчик КАК Перевозчик
	|ИЗ
	|	РегистрСведений.ВодителиПоМаршруту.СрезПоследних(, Маршрут = &Маршрут) КАК ВодителиПоМаршрутуСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Перевозчик)
				И НЕ Объект.Перевозчик = Выборка.Перевозчик Тогда
			Объект.Перевозчик = Выборка.Перевозчик;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокГруппНоменклатуры();
	УстановитьОтборВодителиМаршрута();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+++АК sole 2018.06.15 ИП-00018944	
	ЗаполнитьВТТарифы();	
	ЗаполнитьСуммуСервер();
	//---АК sole 2018.06.15 ИП-00018944
	//+++АК BELN 2018.11.27 ИП-00020536
	УстановитьПривилегированныйРежим(Истина);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота
		|ИЗ
		|	РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних(
		|			,
		|			СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И НомерМаршрута = &НомерМаршрута) КАК АК_СоответствиеВоротМаршрутамСрезПоследних";
	
	Запрос.УстановитьПараметр("НомерМаршрута", Объект.Наименование);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ворота=ВыборкаДетальныеЗаписи.Ворота;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	

	//---АК BELN 2018.11.27 
	// значения "по умолчанию"
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Объект.ВариантРасчетаНДС.Пустая() Тогда
			Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтаФорма.ДатаНачалаСмены = ТекущаяДата();
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Перем СтатусОтказа;
	
	РасчитатьКонфликтыСДругимиМаршрутами();
	
	Пока ЭтаФорма.ТаблицаКонфликтов.Количество() > 0
		И НЕ Отказ Цикл
		//+++ AK suvv 2018.11.15 ИП-00020358
		ПараметрыВозврата = ОткрытьФормуМодально("Справочник.Маршруты.Форма.ФормаКонфликтов", Новый Структура("ТаблицаКонфликтов", ЭтаФорма.ТаблицаКонфликтов));
		СтатусОтказа = ПараметрыВозврата.СтатусОтказа;
		Если ТипЗнч(СтатусОтказа) <> Тип("Булево")
			ИЛИ СтатусОтказа = Истина Тогда
			Отказ = Истина;
		КонецЕсли;	
		Если НЕ Отказ Тогда
			РасчитатьКонфликтыСДругимиМаршрутами();
		КонецЕсли;
		Если ПараметрыВозврата.Свойство("ТарифыСЕПоСтарымМаршрутам") Тогда 
			Для Каждого Стр из ПараметрыВозврата.ТарифыСЕПоСтарымМаршрутам Цикл
				НСтр = ЭтаФорма.втТарифы.Добавить();
				ЗаполнитьЗначенияСвойств(НСтр, Стр);
			КонецЦикла;
		КонецЕсли;
		//--- AK suvv
	КонецЦикла;	
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//+++АК BELN 2018.11.27 ИП-00020536
	Если ВоротаИзменены Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Ворота",Ворота);
	КонецЕсли; 
	
	//---АК BELN 
	#Область АК_ОтключенныйКод
	////+++АК KIRN 2018.07.18 ИП-00019248
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	МаршрутыТорговыеТочки.СтруктурнаяЕдиница,
	//               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МаршрутыТорговыеТочки.Ссылка) КАК Ссылка
	//               |ПОМЕСТИТЬ тт
	//               |ИЗ
	//               |	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	//               |ГДЕ
	//               |	МаршрутыТорговыеТочки.Ссылка.ПометкаУдаления = ЛОЖЬ
	//               |	И МаршрутыТорговыеТочки.СтруктурнаяЕдиница В(&СписокТТ)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	МаршрутыТорговыеТочки.СтруктурнаяЕдиница
	//               |
	//               |ИМЕЮЩИЕ
	//               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МаршрутыТорговыеТочки.Ссылка) > 1
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК ТТ,
	//               |	МаршрутыТорговыеТочки.Ссылка КАК Маршрут,
	//               |	МаршрутыТорговыеТочки.Ссылка.Код,
	//               |	МаршрутыТорговыеТочки.Ссылка.Наименование
	//               |ИЗ
	//               |	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	//               |ГДЕ
	//               |	МаршрутыТорговыеТочки.СтруктурнаяЕдиница В
	//               |			(ВЫБРАТЬ
	//               |				тт.СтруктурнаяЕдиница
	//               |			ИЗ
	//               |				тт)
	//               |	И МаршрутыТорговыеТочки.Ссылка.ПометкаУдаления = ЛОЖЬ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	МаршрутыТорговыеТочки.СтруктурнаяЕдиница.id_TT";
	//Запрос.УстановитьПараметр("СписокТТ", ЭтаФорма.втТарифы.Выгрузить());
	//тз = Запрос.Выполнить().Выгрузить();
	//ЕстьДубли = ЛОжЬ;
	//Текст = "";
	//Для Каждого СтрТЗ из тз Цикл
	//	ЕстьДубли = Истина;
	//	Текст = Текст +"|"+СтрТЗ.ТТ+" встречается в "+СтрТЗ.Маршрут+" с кодом "+СтрТЗ.Код;
	//КонецЦикла;
	//
	//Сообщить(Текст);
	
		

	//Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	МаршрутыТорговыеТочки.Ссылка,
	//			   |	МаршрутыТорговыеТочки.СтруктурнаяЕдиница
	//			   |ПОМЕСТИТЬ ВТ_Маршруты
	//			   |ИЗ
	//			   |	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	//			   |ГДЕ
	//			   |	МаршрутыТорговыеТочки.Ссылка <> &Ссылка
	//			   |	И МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение = &Подразделение
	//			   |	И МаршрутыТорговыеТочки.СтруктурнаяЕдиница В(&СтруктурныеЕдиницы)
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			   |	ВложенныйЗапрос.Ссылка,
	//			   |	ВложенныйЗапрос.СтруктурнаяЕдиница
	//			   |ИЗ
	//			   |	(ВЫБРАТЬ
	//			   |		ВЗ_Группы.Ссылка КАК Ссылка,
	//			   |		ВЗ_Группы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	//			   |		Номенклатура.Ссылка КАК ГруппаНоменклатура
	//			   |	ИЗ
	//			   |		(ВЫБРАТЬ
	//			   |			ВТ_Маршруты.Ссылка КАК Ссылка,
	//			   |			ВТ_Маршруты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	//			   |			ЕСТЬNULL(ВЗ_Группы.Группа, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Группа
	//			   |		ИЗ
	//			   |			ВТ_Маршруты КАК ВТ_Маршруты
	//			   |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |					МаршрутыГруппыНоменклатуры.Ссылка КАК Ссылка,
	//			   |					МаршрутыГруппыНоменклатуры.Группа КАК Группа
	//			   |				ИЗ
	//			   |					Справочник.Маршруты.ГруппыНоменклатуры КАК МаршрутыГруппыНоменклатуры
	//			   |				ГДЕ
	//			   |					МаршрутыГруппыНоменклатуры.Ссылка В
	//			   |							(ВЫБРАТЬ
	//			   |								ВТ_Маршруты.Ссылка
	//			   |							ИЗ
	//			   |								ВТ_Маршруты КАК ВТ_Маршруты)) КАК ВЗ_Группы
	//			   |				ПО ВТ_Маршруты.Ссылка = ВЗ_Группы.Ссылка) КАК ВЗ_Группы
	//			   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	//			   |			ПО (ВЗ_Группы.Группа = Номенклатура.Ссылка
	//			   |					ИЛИ ВЗ_Группы.Группа = Номенклатура.Родитель
	//			   |					ИЛИ ВЗ_Группы.Группа = Номенклатура.Родитель.Родитель
	//			   |					ИЛИ ВЗ_Группы.Группа = Номенклатура.Родитель.Родитель.Родитель
	//			   |					ИЛИ ВЗ_Группы.Группа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	//			   |	ГДЕ
	//			   |		Номенклатура.ЭтоГруппа = ИСТИНА) КАК ВложенныйЗапрос
	//			   |ГДЕ
	//			   |	ВложенныйЗапрос.ГруппаНоменклатура В ИЕРАРХИИ(&ГруппыНоменклатуры)
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |УНИЧТОЖИТЬ ВТ_Маршруты";
	//
	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//Запрос.УстановитьПараметр("Подразделение", Объект.СтруктурноеПодразделение);
	//Запрос.УстановитьПараметр("СтруктурныеЕдиницы", Объект.ТорговыеТочки.Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	//Запрос.УстановитьПараметр("ГруппыНоменклатуры", ?(Объект.ГруппыНоменклатуры.Количество() = 0, Справочники.Номенклатура.ПустаяСсылка(), Объект.ГруппыНоменклатуры.Выгрузить().ВыгрузитьКолонку("Группа")));
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = "Настройки маршрута пересекаются с маршрутом " + Выборка.Ссылка + " по номенклатурной группе " + Выборка.ГруппаНоменклатура;
	//	Сообщение.Сообщить();
	//	Отказ = Истина;
	//КонецЕсли;	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//+++АК sole 2018.06.15 ИП-00018944
	ЗаполнитьВТТарифы();
 	ЗаполнитьСуммуСервер();
	//---АК sole 2018.06.15 ИП-00018944
	
	//+++АК POZM 2018.04.09 ИП-00018313 
	ТабВодителей = ВодителиПоМаршруту();
	Если ТабВодителей.Количество()=0 И ЗначениеЗаполнено(Автомобиль) Тогда
		УстановитьВодителяНаПериодСервер();
	КонецЕсли;	
	//---АК POZM 
	
	УстановитьОтборВодителиМаршрута();
	
КонецПроцедуры

//+++АК sole 2018.06.15 ИП-00018944
Процедура РассчитатьСуммуНДС()
	
	мСуммаВключаетНДС = (ЭтаФорма.ВариантРасчетаНДС_РС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"));
	Если ЭтаФорма.ВариантРасчетаНДС_РС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда
		 ЭтаФорма.СтавкаНДС_РС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
	ЭтаФорма.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ЭтаФорма.Сумма,
													   Истина, мСуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(ЭтаФорма.СтавкаНДС_РС));
	
КонецПроцедуры

//+++АК sole 2018.06.15 ИП-00018944
Процедура ЗаполнитьСуммуСервер()
	
	Перем Сумма;
	
	Сумма = 0;
	
	Для Каждого Стр Из ЭтаФорма.втТарифы Цикл
		Сумма = Сумма +  Стр["Ставка"]; 
		Если Стр["НаличиеДопТарифа"] Тогда
			Сумма = Сумма + Стр["СтавкаДопТарифа"];
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.Сумма = Сумма;
	
	РассчитатьСуммуНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;	
	РассчитатьСуммуНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСуммуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыПослеУдаления(Элемент)
	
	ЗаполнитьСуммуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиСтоимостьПриИзменении(Элемент)
	
	ЗаполнитьСуммуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьЗаголовокГруппНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыНоменклатурыПослеУдаления(Элемент)
	
	УстановитьЗаголовокГруппНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьЗаголовокГруппНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыПослеУдаления(Элемент)
	
	УстановитьЗаголовокГруппНоменклатуры();
	
КонецПроцедуры


&НаКлиенте
Процедура ВодителиПоМаршрутуДобавить(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	//
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ВодителиПоМаршруту.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.Период 		= НачалоДня(ТекущаяДата());
	ФормаНового.Запись.Маршрут 		= Объект.Ссылка;
	ФормаНового.Запись.Контрагент 	= Объект.Перевозчик;
	ФормаНового.ОткрытьМодально();
	
	Элементы.ВодителиПоМаршруту.Обновить();
	ОбновитьПеревозчика();
		
КонецПроцедуры

//+++АК POZM 2018.04.06 ИП-00018313
&НаСервере
Функция ВодителиПоМаршруту()
	ТекстЗапроса="ВЫБРАТЬ
	             |	ВодителиПоМаршрутуСрезПоследних.Период КАК Период,
	             |	ВодителиПоМаршрутуСрезПоследних.Водитель,
	             |	ВодителиПоМаршрутуСрезПоследних.Автомобиль
	             |ИЗ
	             |	РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ТекДата, Маршрут = &Маршрут) КАК ВодителиПоМаршрутуСрезПоследних
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ВодителиПоМаршруту.Период,
	             |	ВодителиПоМаршруту.Водитель,
	             |	ВодителиПоМаршруту.Автомобиль
	             |ИЗ
	             |	РегистрСведений.ВодителиПоМаршруту КАК ВодителиПоМаршруту
	             |ГДЕ
	             |	ВодителиПоМаршруту.Маршрут = &Маршрут
	             |	И ВодителиПоМаршруту.Период > &ТекДата
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Период";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Маршрут",Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	
//---АК POZM 

&НаКлиенте
Процедура ВодителиПоМаршрутуСкопировать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ВодителиПоМаршруту.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ФормаНового = ПолучитьФорму("РегистрСведений.ВодителиПоМаршруту.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.Период 		= НачалоДня(ТекущаяДата());
	ФормаНового.Запись.Маршрут 		= Объект.Ссылка;
	ФормаНового.Запись.Водитель 	= ТекДанные.Водитель;
	ФормаНового.Запись.Автомобиль 	= ТекДанные.Автомобиль;
	ФормаНового.Запись.Контрагент 	= Объект.Перевозчик;
	ФормаНового.ОткрытьМодально();
	
	Элементы.ВодителиПоМаршруту.Обновить();
	ОбновитьПеревозчика();
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПоМаршрутуИзменить(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ВодителиПоМаршруту.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период"	, ТекДанные.Период);
	СтруктураЗаписи.Вставить("Маршрут"	, Объект.Ссылка);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиВодителиМаршрута(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ВодителиПоМаршруту.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
		
		Элементы.ВодителиПоМаршруту.Обновить();
		ОбновитьПеревозчика();
	
	Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьЗаписьРегистраВодителиПоМаршруту(ТекПериод)
	
	НаборЗаписей = РегистрыСведений.ВодителиПоМаршруту.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекПериод);
	НаборЗаписей.Отбор.Маршрут.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось удалить запись регистра ""Водители по маршруту""";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПоМаршрутуУдалить(Команда)
	
	ТекДанные = Элементы.ВодителиПоМаршруту.ТекущиеДанные;
	Если ТекДанные = Неопределено
			ИЛИ Вопрос("Запись будет удалена. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаписьРегистраВодителиПоМаршруту(ТекДанные.Период);
		
	Элементы.ВодителиПоМаршруту.Обновить();
	ОбновитьПеревозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПоМаршрутуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВодителиПоМаршруту.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период"	, ТекДанные.Период);
	СтруктураЗаписи.Вставить("Маршрут"	, Объект.Ссылка);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиВодителиМаршрута(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ВодителиПоМаршруту.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
		
		Элементы.ВодителиПоМаршруту.Обновить();
		ОбновитьПеревозчика();
	Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПоМаршрутуИстория(Команда)

	//
	ФормаСписка = ПолучитьФорму("РегистрСведений.ВодителиПоМаршруту.Форма.ФормаСписка",, ЭтаФорма);
	
	мСписок = ФормаСписка.Список;
	ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Маршрут");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ФормаСписка.ТолькоПросмотр = Истина;
	ФормаСписка.Элементы.Маршрут.Видимость = Ложь;
	ФормаСписка.ОткрытьМодально();
	
КонецПроцедуры

Процедура УстановитьВодителяНаПериодСервер()
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаОкончанияСмены) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала"	, ЭтаФорма.ДатаНачалаСмены);
		Запрос.УстановитьПараметр("Маршрут"		, Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВодителиПоМаршрутуСрезПоследних.Водитель,
		|	ВодителиПоМаршрутуСрезПоследних.Автомобиль,
		|	ВодителиПоМаршрутуСрезПоследних.Контрагент
		|ИЗ
		|	РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаНачала, Маршрут = &Маршрут) КАК ВодителиПоМаршрутуСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи = РегистрыСведений.ВодителиПоМаршруту.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 		= ЭтаФорма.ДатаОкончанияСмены + 86400;
			МенеджерЗаписи.Маршрут 		= Объект.Ссылка;
			МенеджерЗаписи.Автомобиль 	= Выборка.Автомобиль;
			МенеджерЗаписи.Водитель 	= Выборка.Водитель;
			МенеджерЗаписи.Контрагент 	= Выборка.Контрагент;
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаНачалаСмены) Тогда
		МенеджерЗаписи = РегистрыСведений.ВодителиПоМаршруту.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 		= ЭтаФорма.ДатаНачалаСмены;
		МенеджерЗаписи.Маршрут 		= Объект.Ссылка;
		МенеджерЗаписи.Автомобиль 	= ЭтаФорма.Автомобиль;
		МенеджерЗаписи.Водитель 	= ЭтаФорма.Водитель;
		МенеджерЗаписи.Контрагент 	= Объект.Перевозчик;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВодителяНаПериод(Команда)

	УстановитьВодителяНаПериодСервер();
	
	Элементы.ВодителиПоМаршруту.Обновить();
	
КонецПроцедуры

Процедура ЗаполнитьПоАвтомобилю()
	
	Если ЭтаФорма.Водитель.Пустая() Тогда
		ЭтаФорма.Водитель = ЭтаФорма.Автомобиль.ОсновнойВодитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ЗаполнитьПоАвтомобилю();
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	Парам=Новый Структура("СсылкаНаОбъект,ЗаполнятьСписокВерсий",Объект.Ссылка,Истина);
	ОткрытьФорму("Отчет.ИсторияИзмененийОбъектов.Форма.ФормаОтчетаУпр",Парам);
КонецПроцедуры

//+++АК POZM 2018.04.06 ИП-00018313
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТабВодителей = ВодителиПоМаршруту();
		Если ТабВодителей.Количество()=0 Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не заданы водители по маршруту, в записи отказано";
			СообщениеПользователю.Сообщить();
		КонецЕсли;	
	ИначеЕсли Не ЗначениеЗаполнено(Автомобиль)  Тогда
		
		Отказ = Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Необходимо указать автомобиль по маршруту, в записи отказано";
		Элементы.Автомобиль.АвтоОтметкаНезаполненного = Истина;
		Элементы.Водитель.АвтоОтметкаНезаполненного = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВодители;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	//+++АК sole 2018.06.15 ИП-00018944
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТарифа = Новый Структура();
	СтруктураТарифа.Вставить("Период", ЭтаФорма.Период_РС);
	СтруктураТарифа.Вставить("ВариантРасчетаНДС", ЭтаФорма.ВариантРасчетаНДС_РС);
	СтруктураТарифа.Вставить("СтавкаНДС", ЭтаФорма.СтавкаНДС_РС);
	СтруктураТарифа.Вставить("втТорговыеТочки", ЭтаФорма.втТарифы.Выгрузить());
	
	ТекущийОбъект.ОбновитьРегистрСтоимостьДоставкиНаТТ_ЕслиНеобходимо(СтруктураТарифа);
	//---АК sole 2018.06.15 ИП-00018944
	
КонецПроцедуры
//---АК POZM

//+++АК sole 2018.06.15 ИП-00018944
&НаСервере
Процедура ЗаполнитьВТТарифы()
	
	Перем ЭтотОбъект;
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	тзТарифы = ЭтотОбъект.ПолучитьВТТарифы();
	
	Если тзТарифы.Количество() = 0 Тогда
		ЭтаФорма.ВариантРасчетаНДС_РС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС");
		ЭтаФорма.СтавкаНДС_РС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		ЭтаФорма.Период_РС = НачалоДня(ТекущаяДата());
		Возврат;
	КонецЕсли;
	
	Стр = тзТарифы[0];
	ЭтаФорма.СтавкаНДС_РС = Стр["СтавкаНДС"];
	ЭтаФорма.ВариантРасчетаНДС_РС = Стр["ВариантРасчетаНДС"];
	
	Если ЗначениеЗаполнено(Стр["Период"]) Тогда
		ЭтаФорма.Период_РС = Стр["Период"];	
	Иначе
		ЭтаФорма.Период_РС =  НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	
	ЭтаФорма.втТарифы.Очистить();
	
	Для Каждого Стр Из тзТарифы Цикл
		НСтр = ЭтаФорма.втТарифы.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, Стр);
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.06.15 ИП-00018944
&НаКлиенте
Процедура ТарифыПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

//+++АК sole 2018.06.19 ИП-00018944
&НаКлиенте
Процедура ТарифыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Стр = ЭтаФорма.Элементы.Тарифы.ДанныеСтроки(Элемент.Родитель.ТекущаяСтрока);
	ЗаполнитьТарифыНадоставкуДляТТВСтроке(Стр["СтруктурнаяЕдиница"]);
	
КонецПроцедуры

//+++АК sole 2018.06.19 ИП-00018944
&НаСервере
Процедура ЗаполнитьТарифыНадоставкуДляТТВСтроке(СтруктурнаяЕдиница)
	
	Перем Запрос;

	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.Ставка,
|	СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.НаличиеДопТарифа,
|	СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.СтавкаДопТарифа,
|	СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.ПоставкаВСетках
|	
|ИЗ РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(&Дата, Маршрут = &Маршрут ) КАК СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних
|ГДЕ СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.ТТ = &ТТ
|";
	Запрос.Параметры.Вставить("Дата", ТекущаяДата());
	Запрос.Параметры.Вставить("Маршрут", ЭтаФорма.Объект.Ссылка);
	Запрос.Параметры.Вставить("ТТ", СтруктурнаяЕдиница);
	
	тзТарифа = Запрос.Выполнить().Выгрузить();
	
	Если тзТарифа.Количество() = 0 Тогда
		НСтр = тзТарифа.Добавить();
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		
	мНайденныеСтроки = ЭтаФорма.втТарифы.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Стр Из мНайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Стр, тзТарифа[0]);	
	КонецЦикла;
	
КонецПроцедуры

//+++АК BELN 2018.11.27 ИП-00020536
&НаКлиенте
Процедура ВоротаПриИзменении(Элемент)
	ВоротаИзменены=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВоротаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.AK_Ворота.ФормаВыбора",Новый Структура("Владелец",Объект.СтруктурноеПодразделение),Элемент);
КонецПроцедуры
//---АК BELN 2018.11.27 

//

