
Перем ФлСменыСтатуса;
Перем ФлСменаДатыВывода;
Перем ДатаВыводаБыло; //+++АК SHEP 2017.12.08 ИП-00017349


// Функция проверяет, есть ли характеристики с аналогичными значениями свойств.
//
// Возвращаемое значение:
//  Таблица значений, содержащая аналогичные характеристики. 
//  Таблица состоит из одной колонки, содержащей ссылку на характеристики.
//
Функция ПолучитьАналогичныеХарактеристики()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецХарактеристики", ЭтотОбъект.Владелец);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ГДЕ
	|		ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики) КАК ХарактеристикиНоменклатуры";

	Для каждого Строка Из ТаблицаСвойств Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			Индекс = ТаблицаСвойств.Индекс(Строка);

			Запрос.УстановитьПараметр("Свойство" + Индекс, Строка.Свойство);
			Запрос.УстановитьПараметр("Значение" + Индекс, Строка.Значение);

			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Индекс + "
			|
			|ПО
			|	ЗначенияСвойствОбъектов" + Индекс + ".Объект = ХарактеристикиНоменклатуры.Характеристика
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Свойство = &Свойство" + Индекс + "
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Значение = &Значение" + Индекс + "
			|";
		КонецЕсли;
	КонецЦикла;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ОтказЗаписиЭлемента()
	
	Отказ = Ложь;
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		АналогичныеХарактеристики = ПолучитьАналогичныеХарактеристики();
		Если АналогичныеХарактеристики.Количество() > 0 Тогда
			Вопрос = "В информационной базе уже имеются характеристики с аналогичными свойствами.
			         |Использовать одну из существующих характеристик вместо создаваемой вновь?";
			Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				ЗаголовокВыбора = "Выберите одну из существующих характеристик вместо создаваемой вновь.";
				ВыбраннаяСтрока = АналогичныеХарактеристики.ВыбратьСтроку(ЗаголовокВыбора);
				Если ВыбраннаяСтрока <> Неопределено Тогда
					СправочникОбъектХарактеристикиНоменклатуры = ВыбраннаяСтрока.Характеристика.ПолучитьОбъект();
				КонецЕсли;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ Отказ
			И ТаблицаСвойств.Количество() > 0 Тогда
		ФлагОтказа = Ложь;
		Для Каждого Строка из ТаблицаСвойств Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				ФлагОтказа = ФлагОтказа ИЛИ Ложь;
			Иначе
				ФлагОтказа = ФлагОтказа ИЛИ Истина;
			КонецЕсли;
		КонецЦикла;			
		Если НЕ ФлагОтказа Тогда
			Отказ = Истина;
			Сообщить("Выберите значение хотя бы у одного свойства");
		КонецЕсли;	
	КонецЕсли;	
	
    Возврат Отказ;
	
КонецФункции	

Процедура ЗаполнитьТаблицыСвойств()
	
	НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;

	//Если ТипЗнч(ПараметрОбъектКопирования) = ТипЗнч(Ссылка) Тогда
	//	Характеристика = ПараметрОбъектКопирования;  //скопируем значения источника
	//Иначе
	//	Характеристика = Ссылка;
	//КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НазначениеСвойств"		, НазначениеСвойств);
	СтруктураПараметров.Вставить("Ссылка"					, ЭтотОбъект.Ссылка);
	СтруктураПараметров.Вставить("ОбъектОтбораНазначений"	, ЭтотОбъект.Владелец);
	//СтруктураПараметров.Вставить("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	СтруктураПараметров.Вставить("ОбходРезультатаЗапроса"	, ОбходРезультатаЗапроса.Прямой);
	
	ОмРаботаСоСвойствамиОбъектов.ПрочитатьЗаполнитьСвойстваИЗначения(ТаблицаСвойств, СтруктураПараметров);
	ОмРаботаСоСвойствамиОбъектов.СоздатьКолонкиТаблицы(ЭлементыФормы.ТаблицаСвойств);	
	ЭлементыФормы.ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаСвойствЗначениеПриИзменении"));
	
КонецПроцедуры

Процедура ПроверитьХолдингПроизводителей(Отказ)
	
	Если ЭтотОбъект.Неактивная Тогда
		Возврат;
	КонецЕсли;
	
	мСвойствоПроизводитель = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00000000001");
	ТекПроизводитель = Неопределено;
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаСвойств Цикл
		Если СтрокаТаблицы.Свойство = мСвойствоПроизводитель Тогда
			ТекПроизводитель = СтрокаТаблицы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекПроизводитель) Тогда
		Возврат;
	КонецЕсли;
	
	ТекХолдинг = ТекПроизводитель.ГоловнойКонтрагент;
	Если ЗначениеЗаполнено(ТекХолдинг) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СвойствоПроизводитель"	, мСвойствоПроизводитель);
		Запрос.УстановитьПараметр("Номенклатура"			, ЭтотОбъект.Владелец);
		Запрос.УстановитьПараметр("ТекХарактеристика"		, ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Холдинг"					, ТекХолдинг);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоПроизводитель
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ГоловнойКонтрагент = &Холдинг
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Номенклатура
		|	И НЕ ЗначенияСвойствОбъектов.Объект = &ТекХарактеристика
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Новая), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Сообщить("Для номенклатуры """ + ЭтотОбъект.Владелец + """ уже существует характеристика с производителем, входящим в холдинг """ + ТекХолдинг + """");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СвойствоПроизводитель"	, мСвойствоПроизводитель);
		Запрос.УстановитьПараметр("Номенклатура"			, ЭтотОбъект.Владелец);
		Запрос.УстановитьПараметр("ТекХарактеристика"		, ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТекПроизводитель"					, ТекПроизводитель);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоПроизводитель
		|	И (ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты)) = &ТекПроизводитель
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Номенклатура
		|	И НЕ ЗначенияСвойствОбъектов.Объект = &ТекХарактеристика
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Новая), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Сообщить("Для номенклатуры """ + ЭтотОбъект.Владелец + """ уже существует характеристика с производителем """ + ТекПроизводитель + """");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
	

// ================================================================================
// ========== События элементов формы

Процедура ТаблицаСвойствПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОмРаботаСоСвойствамиОбъектов.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ТаблицаСвойствПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОмРаботаСоСвойствамиОбъектов.РедактированиеСвойств(ЭтаФорма, ЭтотОбъект.Ссылка, Элемент);
	
КонецПроцедуры

Процедура ТаблицаСвойствЗначениеПриИзменении(Элемент)
	
	ЭтотОбъект.Наименование = СформироватьНаименование(ТаблицаСвойств);
	
КонецПроцедуры

Процедура ТаблицаСвойствЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийЭлемент.ТекущиеДанные.Значение = Неопределено;
	ТекущийЭлемент.ТекущиеДанные.Значение = ТекущийЭлемент.ТекущиеДанные.Свойство.ТипЗначения.ПривестиЗначение(ТекущийЭлемент.ТекущиеДанные.Значение);
	ЭтотОбъект.Наименование = СформироватьНаименование(ТаблицаСвойств);
	
КонецПроцедуры

Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений();
	Список.Добавить(СформироватьНаименование(ТаблицаСвойств));
	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.Наименование);
	Если РезультатВыбора <> Неопределено Тогда
		ЭтотОбъект.Наименование = РезультатВыбора.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1НовоеСвойство(Кнопка)
	
	Если Модифицированность() Тогда
		Если Вопрос("Перед вводом нового свойства необходимо записать изменения! Записать?",РежимДиалогаВопрос.ОКОтмена, 20, КодВозвратаДиалога.ОК) <> КодВозвратаДиалога.ОК Тогда
			Возврат;	
		ИначеЕсли НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФормаВладелец"	, ЭлементыФормы.ТаблицаСвойств);
	СтруктураПараметров.Вставить("НазначениеСвойств", НазначениеСвойств);
	//Попытка
	//	Если ЭлементыФормы.ТаблицаСвойств.ТекущиеДанные.ЭтоГруппа Тогда
	//		СтруктураПараметров.Вставить("Родитель",ЭлементыФормы.ТаблицаСвойств.ТекущиеДанные.Свойство);
	//	Иначе	
	//		СтруктураПараметров.Вставить("Родитель",ЭлементыФормы.ТаблицаСвойств.ТекущиеДанные.Родитель.Свойство);
	//	КонецЕсли;	
	//Исключение
	//КонецПопытки;
	
	ОмРаботаСоСвойствамиОбъектов.СвойстваНовыйЭлемент(СтруктураПараметров);
    ЗаполнитьТаблицыСвойств(); 

КонецПроцедуры

Процедура КоманднаяПанель1Обновить(Кнопка)
	
	Если Модифицированность() Тогда
		
		ТекстВопроса = "Элемент был изменен. Записать?";
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Вопрос") = КодВозвратаДиалога.Нет Тогда
			ЗаполнитьТаблицыСвойств();
			Возврат;
		Иначе
			Отказ = НЕ ОмРаботаСоСвойствамиОбъектов.ЗаписатьЗначенияСвойств(ТаблицаСвойств, Ссылка);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			//Если ОтказЗаписиЭлемента() Тогда
			//	ОмРаботаСоСвойствамиОбъектов.ЗаписатьЗначенияСвойств(ТаблицаСвойств,Ссылка,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
			//Иначе
			//	Возврат;
			//КонецЕсли;	
			Если НЕ ЗаписатьВФорме() Тогда
				Возврат;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕСли;	
	
	ЗаполнитьТаблицыСвойств(); 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьФормуДляАудита(Кнопка)
	
	Если ЭтоНовый() Тогда
		Сообщить("Необходимо записать элемент!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 

	//
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ЭтотОбъект.Ссылка);
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаДляАудита", СтруктураПараметров);

КонецПроцедуры

Процедура ОтрегулироватьВидимостьНаФорме()
	
	ЭлементыФормы.СрокГодности.Доступность = НЕ СрокГодностиНеограничен;
	ЭлементыФормы.ТипСрокаГодности.Доступность = НЕ СрокГодностиНеограничен;
	
КонецПроцедуры	

Процедура УстановитьОтборНаКоличествоКоробок()
	
	ОтборЭлемент = СрезПоКоличествуВКоробке.Отбор.Найти("Номенклатура");
	ОтборЭлемент.Значение 		= ЭтотОбъект.Владелец;
	ОтборЭлемент.ВидСравнения 	= ВидСравнения.Равно;
	ОтборЭлемент.Использование 	= Истина;
	
	ОтборЭлемент = СрезПоКоличествуВКоробке.Отбор.Найти("Характеристика");
	ОтборЭлемент.Значение 		= ЭтотОбъект.Ссылка;
	ОтборЭлемент.ВидСравнения 	= ВидСравнения.Равно;
	ОтборЭлемент.Использование 	= Истина;
	
КонецПроцедуры	

//АК БЕЛН 09.01.2017+
Процедура ВывестиТовар()
		
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Владелец);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МасХар = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Масхар.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	//
	ФлСброс = Ложь;
	Если ЗначениеЗаполнено(ЭтотОбъект.ДатаВывода)
			И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата"		, ЭтотОбъект.ДатаВывода);
		Запрос.УстановитьПараметр("Составляющая", МасХар);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.Период,
		|	СоставКомплектаСрезПоследних.Характеристика,
		|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
		|	СоставКомплектаСрезПоследних.Составляющая,
		|	СоставКомплектаСрезПоследних.Количество,
		|	СоставКомплектаСрезПоследних.Комплект,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
		|ГДЕ
		|	СоставКомплектаСрезПоследних.Количество > 0
		|	И СоставКомплектаСрезПоследних.Составляющая В(&Составляющая)";
		Выборка1 = Запрос.Выполнить().Выбрать();

		Пока Выборка1.Следующий() Цикл
			Сообщить("Позиция " + Выборка1.Составляющая.Владелец + " " + Выборка1.Составляющая +
						" входит в состав комплекта на дату вывода - " + Выборка1.ХарактеристикаВладелец + " " + Выборка1.Характеристика);
			//Статус=Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			ФлСброс = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		
		Запрос = Новый Запрос;
		МасНомДляПроверки = Новый Массив;
		МасНомДляПроверки.Добавить(ЭтотОбъект.Владелец);
		Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель
		|ПОМЕСТИТЬ ВТОсновная
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТОсновная.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
		|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
		|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
		|ГДЕ
		|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
		
		Выб = Запрос.Выполнить().Выбрать();
		МасНомИскл = Новый Массив;
		Пока Выб.Следующий() Цикл
			Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
			Сообщить(Выб.Номенклатура);
			ФлСброс = Истина;
		КонецЦикла; 
	КонецЕсли;
	
	//+++АК SHEP 2018.05.28 ИП-00018185
	//Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Причина)
	//		И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ПричинаПриостановки)
			И (Ложь
	//---АК SHEP 2018.05.28
				ИЛИ	ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда 
		Сообщить("Необходимо указать причину");
		ФлСброс = Истина;
	КонецЕсли;
	
	//
	мСтатусАктивностиНовая 		= Перечисления.СтатусыАктивностиХарактеристик.Новая;
	мСтатусАктивностиВыведена 	= Перечисления.СтатусыАктивностиХарактеристик.Выведена;
	мСтатусАктивностиНеактивная = Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если ФлСброс Тогда
			Прервать;
		КонецЕсли; 
		ОбХар = Выборка.Ссылка.ПолучитьОбъект();
		ОбХар.Статус			= ЭтотОбъект.Статус;
		Если ОбХар.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ОбХар.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
			ОбХар.ДатаВывода 							= ЭтотОбъект.ДатаВывода;
			ТекСтатус = ?(ОбХар.СтатусАктивностиХарактеристики = мСтатусАктивностиНовая, мСтатусАктивностиНеактивная, ОбХар.СтатусАктивностиХарактеристики);
			ОбХар.СтатусАктивностиХарактеристики 	= ТекСтатус;
		ИначеЕсли ОбХар.Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
			ОбХар.СтатусАктивностиХарактеристики	= мСтатусАктивностиНовая;
			ОбХар.ДатаОжидаемогоВозврата			= Дата(1, 1, 1);
			ОбХар.ДатаВывода						= Дата(1, 1, 1);
			ОбХар.Неактивная						= Ложь;
		КонецЕсли;
		ОбХар.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
		ОбХар.ДатаПоследнегоИзменения	= ТекущаяДата();
		ОбХар.ПоТовару 					= Истина;
		ОбХар.ДатаПовторнойРассылки 	= ТекущаяДата() + 24*60*60;
		Попытка
			ОбХар.Записать();                                                 
		Исключение
			Продолжить;
		КонецПопытки; 
	
		Если ОбХар.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ОбХар.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
			ОтправитьПисьмоОбИзмененииСтатусаСервер(ОбХар.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Рабочая
				ИЛИ ФлСменаДатыВывода)
			И НЕ ФлСброс Тогда
		
		ВводОтмеченныхСервер(Ложь);
	КонецЕсли;
		
		//Для каждого СтрокаТЧ Из Объект.Товары Цикл
		//	Если СтрокаТЧ.Номенклатура = Номенклатура Тогда
		//		СтрокаТЧ.Статус = ?(ФлСброс, Перечисления.СтатусыХарактеристик.ПустаяСсылка(), Статус);
		//		Если СтрокаТЧ.Статус = Перечисления.СтатусыХарактеристик.НаВывод 
		//				ИЛИ СтрокаТЧ.Статус = Перечисления.СтатусыХарактеристик.Приостановлена  Тогда
		//			СтрокаТЧ.ДатаВывода = ДатаВывода;
		//		КонецЕсли;
		//		Если НЕ ФлСброс Тогда
		//			СтрокаТЧ.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
		//			СтрокаТЧ.ДатаПоследнегоИзменения	= ТекущаяДата();
		//		КонецЕсли; 
		//	КонецЕсли; 		
		//КонецЦикла; 
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДатаВывода)
			И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена)
			И НЕ ФлСброс Тогда

		Запрос.УстановитьПараметр("Дата"			, ЭтотОбъект.ДатаВывода);
		Запрос.УстановитьПараметр("Характеристика"	, МасХар);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.Период,
		|	СоставКомплектаСрезПоследних.Характеристика,
		|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
		|	СоставКомплектаСрезПоследних.Составляющая,
		|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
		|	СоставКомплектаСрезПоследних.Количество,
		|	СоставКомплектаСрезПоследних.Комплект,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, )  КАК СоставКомплектаСрезПоследних
		|ГДЕ
		|	СоставКомплектаСрезПоследних.Количество > 0
		|	И СоставКомплектаСрезПоследних.Характеристика в (&Характеристика)";
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			Мен = РегистрыСведений.СоставКомплекта.СоздатьМенеджерЗаписи();
			Мен.Период			= ЭтотОбъект.ДатаВывода;
			Мен.Характеристика	= Выборка.Характеристика;
			Мен.Составляющая	= Выборка.Составляющая;
			Мен.Количество		= 0;
			Мен.Комплект		= Выборка.ХарактеристикаВладелец;
			Мен.ТоварКомплекта	= Выборка.СоставляющаяВладелец;
			Мен.Записать();
			
			Сообщить("Создана запись по очистке состава комплекта " + ЭтотОбъект.Владелец + " " + Выборка.Характеристика);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена
				ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена)
			И НЕ ФлСброс Тогда
	
        //
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Владелец);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Наименование <> ""Нехватка товара""
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Мас = ТЗ.НайтиСтроки(Новый Структура("СтатусАктивностиХарактеристики", Перечисления.СтатусыАктивностиХарактеристик.Выведена));
		Если Мас.Количество() = ТЗ.Количество() Тогда
			
			ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Нехватка товара",,, ЭтотОбъект.Владелец);
			
			Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
				ХарактеристикаОбъект = ХарактеристикаСсылка.ПолучитьОбъект();
				ХарактеристикаОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна;
				ХарактеристикаОбъект.Неактивная			= Ложь;
			Иначе	
				ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаОбъект.Владелец 			= ЭтотОбъект.Владелец;
				ХарактеристикаОбъект.Наименование 		= "Нехватка товара";
				ХарактеристикаОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна;
				ХарактеристикаОбъект.ДополнительныеСвойства.Вставить("НадоЗаписать");
				ХарактеристикаОбъект.СрокГодности		= 1;
				ХарактеристикаОбъект.ТипСрокаГодности	= Справочники.ТипыСроковГодности.НайтиПоНаименованию("Месяц");
				ХарактеристикаОбъект.Неактивная			= Ложь;
			КонецЕсли; 
			Попытка
				ХарактеристикаОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЕсли; 
 
КонецПроцедуры
//АК БЕЛН 09.01.2017-


// ================================================================================
// ========== События Формы
Процедура ОбработкаДоступа()
    
   // Обработка доступа к форме для пользователей, имеющих Технолога
 
    Если РольДоступна("Технолог") Тогда
        
       // Составим список элементов, доступность которых менять не требуется
 
        СписокИсключенияЭлементов = Новый СписокЗначений;
        СписокИсключенияЭлементов.Добавить(ЭлементыФормы.Статус);
		СписокИсключенияЭлементов.Добавить(ЭлементыФормы.Причина);
		СписокИсключенияЭлементов.Добавить(ЭлементыФормы.ПричинаПриостановки); //+++АК SHEP 2018.05.28 ИП-00018185
		СписокИсключенияЭлементов.Добавить(ЭлементыФормы.ПоТовару);
		СписокИсключенияЭлементов.Добавить(ЭлементыФормы.ДатаВывода);
		СписокИсключенияЭлементов.Добавить(ЭлементыФормы.ОсновныеДействияФормы);
        
        
       // Составим список типов элементов, доступность которых менять не требуется
 
        СписокИсключенияТипов = Новый СписокЗначений;
        СписокИсключенияТипов.Добавить(Тип("РамкаГруппы"));
        СписокИсключенияТипов.Добавить(Тип("Панель"));
       // СписокИсключенияТипов.Добавить(Тип("ТабличноеПоле"));
        СписокИсключенияТипов.Добавить(Тип("Надпись"));
        
       // Для всех элементов формы установим их доступность
 
        КоличествоЭлементовФормы = ЭлементыФормы.Количество();
        Для к = 1 по КоличествоЭлементовФормы Цикл
            
           // Определим элемент и его тип
 
            ТекЭлемент = ЭлементыФормы.Получить(к-1);
            ТипЭлемента = ТипЗнч(ТекЭлемент);
            
           // Уберем контекстные меню для всех табличных полей
 
            Если ТипЭлемента = Тип("ТабличноеПоле") Тогда
                ТекЭлемент.АвтоКонтекстноеМеню = Ложь;
            КонецЕсли;    
            
           // Уберем доступность всех элементов формы, кроме списка исключений
 
            Если СписокИсключенияТипов.НайтиПоЗначению(ТипЭлемента) = неопределено Тогда
                Если СписокИсключенияЭлементов.НайтиПоЗначению(ТекЭлемент) = Неопределено Тогда
                    Попытка
                        ТекЭлемент.ТолькоПросмотр = Истина;
                    Исключение
                        ТекЭлемент.Доступность = Ложь;
                    КонецПопытки;    
                КонецЕсли;    
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;    
    
КонецПроцедуры
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++AK ziga 20171031 ИП-00016835
	ОбработкаДоступа();
	Если РольДоступнаСервер() Тогда
		ЭтаФорма.ЭлементыФормы.Статус.КнопкаВыбора=Ложь;
		 этаформа.элементыформы.статус.РедактированиеТекста=ложь;
		//ЭтаФорма.ЭлементыФормы.Статус.РежимВыбораИзСписка=Истина;
		ЭтаФорма.ЭлементыФормы.Статус.КнопкаСпискаВыбора=Истина;
		ЭтаФорма.ЭлементыФормы.ПоТовару.Доступность=Ложь;
		//ЭтаФорма.ЭлементыФормы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыХарактеристик.НаВывод);
		//ЭтаФорма.ЭлементыФормы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыХарактеристик.Приостановлена);
	КонецЕсли;
	//---AK ziga 20171031 ИП-00016835

	//Отказ = глКомпоненты.АнализПравНаОбъекты.ПроанализироватьПраваНаОбъекты(Перечисления.ВидыФормИсточникаДляПравил.Элемент, ЭтотОбъект, ЭтаФорма, ЭлементыФормы);	
	ЗаполнитьТаблицыСвойств();
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		ЭтотОбъект.Наименование 									= "<Свойства не назначены>";
		ЭтотОбъект.БратьКоличествоВКоробкеПоСкладуДляРаспределения 	= Истина;
	КонецЕсли;	
	ЭлементыФормы.ХарактеристикаФасовка.Доступность = ЭтотОбъект.Владелец.Фасуется;
	//ПодключитьОбработчикИзмененияДанных("Владелец", "ПрочитатьЗаполнитьСвойстваИЗначения", Ложь);

	//+++АК
	ЗаполнитьРолиОтветственных();
	//---АК
	
	УстановитьОтборНаКоличествоКоробок();
	
	ЭлементыФормы.ПанельОсновная.Страницы.СтраницаКомплект.Видимость = ЭтотОбъект.Владелец.ЭтоКомплект;
	
	//+++АК SHEP 20170720 ИП-00014350
	Если ЭтотОбъект.ПищеваяЦенность.Количество() = 0 Тогда
		Справочники.КартыДизайнПроектов.ЗаполнитьТЧ_ПищеваяЦенность(ЭтотОбъект);
	КонецЕсли;
	//---АК SHEP 20170720
	
	//+++AK GREK 13.12.2017 ИП-00017358
	ТекПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	Должность = СокрЛП(ТекПользователь.ФизЛицо.Должность);
	Если РольДоступна("ПолныеПрава") ИЛИ Должность = "Продакт-менеджер" ИЛИ Должность = "Помощник продакт-менеджера категория нон-фуд" ИЛИ Должность = "Управляющий по качеству и закупкам" ИЛИ Должность = "Младший бренд-менеджер"  Тогда
		ЭлементыФормы.ОбнулитьРейтинг.Доступность = Истина;
		ЭлементыФормы.ИсторияОбнуленияРейтинга.Доступность = Истина;	
	КонецЕсли;
	//---AK
	//+++АК BARA
	Если Не УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьТипыУпаковки,Ложь,ПараметрыСеанса.ТекущийПользователь)[0] Тогда 
		 ЭтаФорма.ЭлементыФормы.ТипыУпаковки.ТолькоПросмотр = Истина;
		 ЭтаФорма.ЭлементыФормы.КоманднаяПанель5.Доступность = Ложь;
	КонецЕсли;
	//---
КонецПроцедуры

//Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

//	//Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
//	//	ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
//	//КонецЕсли;

//КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НазначениеСвойств"		, НазначениеСвойств);
	СтруктураПараметров.Вставить("Ссылка"					, Ссылка);
	СтруктураПараметров.Вставить("ОбъектОтбораНазначений"	, Владелец);
//	СтруктураПараметров.Вставить("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	СтруктураПараметров.Вставить("ОбходРезультатаЗапроса"	, ОбходРезультатаЗапроса.Прямой);
	
	ОмРаботаСоСвойствамиОбъектов.ПрочитатьЗаполнитьСвойстваИЗначения(ТаблицаСвойств,СтруктураПараметров);
	ОмРаботаСоСвойствамиОбъектов.СоздатьКолонкиТаблицы(ЭлементыФормы.ТаблицаСвойств);	
	ЭлементыФормы.ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаСвойствЗначениеПриИзменении"));
	
	УстановитьОтборНаКоличествоКоробок();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Отказ = ОтказЗаписиЭлемента();		
	
	//+++АК KIRN 2018.08.24 ИП-00019498.000.00000002 
	//Если НЕ Отказ Тогда
	//	ПроверитьХолдингПроизводителей(Отказ);
	//КонецЕсли;
	
	//+++АК
	ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанные();
	Если НЕ ВсеОК Тогда
		Отказ = Истина;
	КонецЕсли; 
	//---АК
	
	Для Каждого СтрокаСвойство Из ТаблицаСвойств Цикл
		Если СтрокаСвойство.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Производитель Тогда
			Если ТипЗнч(СтрокаСвойство.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЭтотОбъект.id_kontr = СтрокаСвойство.Значение.ИД;
				Прервать;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СрокГодности)
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.ТипСрокаГодности) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указан срок годности, но не указан тип срока годности",,,, Отказ);
	КонецЕсли;
	
	Если Владелец.ЭтоКомплект Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Владелец);
		Запрос.УстановитьПараметр("Ссылка"	, ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Ссылка <> &Ссылка";
					   
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У товара-комплекта не может быть заведено более одной характеристики",,,, Отказ);
		КонецЕсли;
		
		КолвоСтрок = СоставКомплектаРегистр.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если НЕ ЗначениеЗаполнено(СоставКомплектаРегистр[КолвоСтрок - н].Характеристика) Тогда
				СоставКомплектаРегистр.Удалить(КолвоСтрок - н);
			КонецЕсли;	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Характеристики"	, СоставКомплектаРегистр.ВыгрузитьКолонку("Характеристика"));
		Запрос.УстановитьПараметр("id_kontr"		, ЭтотОбъект.id_kontr);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатуры.id_kontr) КАК id_kontr,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатуры.Владелец.Складируемая) КАК Складируемая,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ХарактеристикиНоменклатуры.id_kontr <> &id_kontr
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьДругиеПроизводители
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&Характеристики)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЕстьДругиеПроизводители = Истина Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В составе комплекта указаны характеристики с производителем отличным от указанного в данной характеристике",,,, Отказ);
			КонецЕсли;
			Если Выборка.Складируемая > 1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В составе комплекта указаны характеристики с разными типами складируемости у товаров",,,, Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//АК БЕЛН 08.11.2016+
	Если ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.ДатаОжидаемогоВозврата) Тогда
		Сообщить("Необходимо заполнить дату ожидаемого возврата");
		Отказ = Истина;
	КонецЕсли;
	
	Если ФлСменыСтатуса
			И НЕ Отказ Тогда
		
		//+++АК SHEP 2018.05.28 ИП-00018185
		//Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Причина)
		//		И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена
		//			ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод) Тогда 
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ПричинаПриостановки)
			И ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		//---АК SHEP 2018.05.28
			ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			Сообщить("Необходимо указать причину");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаВывода)
				И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод
					ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
					
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"		, ЭтотОбъект.ДатаВывода);
			Запрос.УстановитьПараметр("Составляющая", ЭтотОбъект.Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Составляющая = &Составляющая";
			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл
				Сообщить("Данная позиция входит в состав комплекта на дату вывода - " + Выборка.Характеристика.Владелец + " " + Выборка.Характеристика);
				Отказ = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		//+++АК KIRN 2018.08.24 ИП-00019498.000.00000002 
		//Если (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Рабочая)
		//		И НЕ Отказ Тогда
		//	Запрос = Новый Запрос;
		//	МасНомДляПроверки = Новый Массив;
		//	МасНомДляПроверки.Добавить(ЭтотОбъект.Владелец);
		//	Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
		//	Запрос.Текст =
		//	"ВЫБРАТЬ
		//	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		//	|	ЗначенияСвойствОбъектов.Значение КАК Производитель
		//	|ПОМЕСТИТЬ ВТОсновная
		//	|ИЗ
		//	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		//	|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
		//	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		//	|ГДЕ
		//	|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
		//	|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
		//	|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		//	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		//	|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//	|	ВТОсновная.Номенклатура КАК Номенклатура
		//	|ИЗ
		//	|	ВТОсновная КАК ВТОсновная
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
		//	|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
		//	|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
		//	|ГДЕ
		//	|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
		//	
		//	Выб = Запрос.Выполнить().Выбрать();
		//	МасНомИскл = Новый Массив;
		//	Пока Выб.Следующий() Цикл
		//		Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
		//		Сообщить(Выб.Номенклатура);
		//		Отказ = Истина;
		//	КонецЦикла; 
		//КонецЕсли;
		//---АК KIRN 
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаВывода)
				И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод
					ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена)
				И НЕ Отказ Тогда

			Запрос.УстановитьПараметр("Дата"			, ЭтотОбъект.ДатаВывода);
			Запрос.УстановитьПараметр("Характеристика"	, ЭтотОбъект.Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Характеристика = &Характеристика";
			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.СоставКомплекта.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период			= ЭтотОбъект.ДатаВывода;
				МенеджерЗаписи.Характеристика	= ЭтотОбъект.Ссылка;
				МенеджерЗаписи.Составляющая		= Выборка.Составляющая;
				МенеджерЗаписи.Количество		= 0;
				МенеджерЗаписи.Комплект			= ЭтотОбъект.Владелец;
				МенеджерЗаписи.ТоварКомплекта	= Выборка.СоставляющаяВладелец;

				МенеджерЗаписи.Записать();
				Сообщить("Создана запись по очистке состава комплекта " + ЭтотОбъект.Владелец + " " + ЭтотОбъект.Ссылка);
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	//
	Если НЕ Отказ Тогда
		Если ФлСменыСтатуса Тогда
			ЭтотОбъект.ДатаПовторнойРассылки 	= ТекущаяДата() + 24*60*60;
		КонецЕсли; 
		ЭтотОбъект.АвторПоследнегоИзменения		= глЗначениеПеременной("глТекущийПользователь");
		ЭтотОбъект.ДатаПоследнегоИзменения		= ТекущаяДата();
		
		Если ЭтотОбъект.СтатусУРЗ <> ЭтотОбъект.Ссылка.СтатусУРЗ
				ИЛИ	ЭтотОбъект.Комментарий <> ЭтотОбъект.Ссылка.Комментарий
				ИЛИ ЭтотОбъект.ДатаОжидаемойПоставки <> ЭтотОбъект.Ссылка.ДатаОжидаемойПоставки 
			Тогда
		    ЭтотОбъект.ДатаПоследнегоИзмененияУРЗ = ТекущаяДата();
		КонецЕсли;
		//Если ЭтотОбъект.ПоТовару И ЗначениеЗаполнено(ЭтотОбъект.ДатаВывода)
		//		И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод
		//			ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена) И ФлСменыСтатуса Тогда
		//	ОбНом=ЭтотОбъект.Владелец.ПолучитьОбъект();
		//	ОбНом.НеобходимаРассылка=Истина;
		//	ОбНом.Записать();
		//КонецЕсли;
		
		//+++АК CISA 2018.09.14 ИП-00019507 Принудительно сбрасываем галку "Выводим товар", чтобы "оживить" только текущий элемент! 
		Если ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
			ЭтотОбъект.ПоТовару = Ложь;
		КонецЕсли;
		//---АК CISA	
	КонецЕсли; 
	
	//АК БЕЛН 08.11.2016-
	
	//+++АК CISA 2018.09.27 ИП-00019945
	Если НЕ Отказ Тогда
		Если (ЭтотОбъект.Высота > 0 ИЛИ ЭтотОбъект.Ширина > 0 ИЛИ ЭтотОбъект.Глубина > 0) И ЭтотОбъект.Высота * ЭтотОбъект.Ширина * ЭтотОбъект.Глубина = 0 Тогда
			Сообщить("Необходимо либо заполнить все три значения габаритов (ширина, высота, глубина), либо вообще ничего не заполнять!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//---АК CISA	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)  
	
	Отказ = НЕ ОмРаботаСоСвойствамиОбъектов.ЗаписатьЗначенияСвойств(ТаблицаСвойств, Ссылка);
	
	//+++АК
	Если НЕ Отказ Тогда
		
		//
		ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(Ссылка);
		Если НЕ ВсеОК Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	//---АК
	
	//+++АК
	ЗаполнитьРолиОтветственных();
	//---АК
	
	УстановитьОтборНаКоличествоКоробок();
	
	//+++АК KIRN 2018.08.24 ИП-00019498.000.00000002 
	////проверим настройки по аналогам
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект.Владелец);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	АналогиНоменклатурыТовары.Ссылка
	//|ПОМЕСТИТЬ ВТ_Аналоги
	//|ИЗ
	//|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	//|ГДЕ
	//|	АналогиНоменклатурыТовары.Номенклатура = &Номенклатура
	//|	И АналогиНоменклатурыТовары.Ссылка.ПолностьюЗаменяемыйТовар
	//|	И НЕ АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	АналогиНоменклатурыТовары.Ссылка,
	//|	ЗначенияСвойствОбъектов.Значение,
	//|	СУММА(1) КАК КолвоРаз
	//|ИЗ
	//|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//|		ПО (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	//|			И (НЕ ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная))
	//|			И (ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = АналогиНоменклатурыТовары.Номенклатура)
	//|ГДЕ
	//|	АналогиНоменклатурыТовары.Ссылка В
	//|			(ВЫБРАТЬ
	//|				ВТ_Аналоги.Ссылка
	//|			ИЗ
	//|				ВТ_Аналоги КАК ВТ_Аналоги)
	//|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL 
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	АналогиНоменклатурыТовары.Ссылка,
	//|	ЗначенияСвойствОбъектов.Значение";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.КолвоРаз > 1 Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В аналогах номенклатуры (" + Выборка.Ссылка + ") указаны товары с одинаковыми производителем (" + Выборка.Значение +  ") в активных характеристиках. Запись невозможна",,,, Отказ);
	//	КонецЕсли;	
	//КонецЦикла;
	//---АК KIRN 
	
	Если НЕ Отказ
			И ЭтотОбъект.Владелец.ЭтоКомплект Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период"			, СоставДействуетС);
		Запрос.УстановитьПараметр("Характеристика"	, ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставКомплекта.Период,
		|	СоставКомплекта.Характеристика
		|ИЗ
		|	РегистрСведений.СоставКомплекта КАК СоставКомплекта
		|ГДЕ
		|	СоставКомплекта.Период > &Период
		|	И СоставКомплекта.Характеристика = &Характеристика";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СоставКомплекта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		//проверим теперь, чтобы один товар был в составе только одного комплекта
		Запрос.УстановитьПараметр("Составляющие", СоставКомплектаРегистр.ВыгрузитьКолонку("Характеристика"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК Товар,
		|	СоставКомплектаСрезПоследних.Составляющая
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(
		|			,
		|			Характеристика <> &Характеристика
		|				И Составляющая В (&Составляющие)
		|				И НЕ Характеристика.Владелец.ПроизводитсяВМагазине) КАК СоставКомплектаСрезПоследних
		|ГДЕ
		|	СоставКомплектаСрезПоследних.Количество <> 0";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть составляющие уже указанные в качестве состава другого комплекта " + Выборка.Товар,,,, Отказ);
			Возврат;
		КонецЕсли;	
					   
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.Составляющая,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта,
		|	СоставКомплектаСрезПоследних.Количество
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(&Период, Характеристика = &Характеристика) КАК СоставКомплектаСрезПоследних
		|ГДЕ
		|	СоставКомплектаСрезПоследних.Количество <> 0";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		НаборЗаписей = РегистрыСведений.СоставКомплекта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(СоставДействуетС);
		НаборЗаписей.Отбор.Характеристика.Установить(ЭтотОбъект.Ссылка);
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Период 			= СоставДействуетС;
			Запись.Характеристика 	= ЭтотОбъект.Ссылка;
			Запись.Составляющая 	= Выборка.Составляющая;
			Запись.Комплект 		= ЭтотОбъект.Владелец;
			Запись.ТоварКомплекта 	= Выборка.ТоварКомплекта;
			Запись.Количество 		= 0;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.СоставКомплекта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(СоставДействуетС);
		НаборЗаписей.Отбор.Характеристика.Установить(ЭтотОбъект.Ссылка);
		Для Каждого СтрокаТаб Из СоставКомплектаРегистр Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Период 			= СоставДействуетС;
			Запись.Характеристика 	= ЭтотОбъект.Ссылка;
			Запись.Составляющая 	= СтрокаТаб.Характеристика;
			Запись.Количество 		= СтрокаТаб.Количество;
			Запись.Комплект 		= ЭтотОбъект.Владелец;
			Запись.ТоварКомплекта 	= СтрокаТаб.Характеристика.Владелец;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		МассивТовары = Новый Массив;
		Для Каждого СтрокаСостав Из СоставКомплектаРегистр Цикл
			МассивТовары.Добавить(СтрокаСостав.Характеристика.Владелец);
		КонецЦикла;
		Запрос.УстановитьПараметр("Товары"	, МассивТовары);
		Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекДата,
		|			ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
		|				И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|				И Номенклатура В (&Товары)) КАК ЦеныНоменклатурыСрезПоследних";
		
		ТабКешЦены = Запрос.Выполнить().Выгрузить();
		ПолнаяЦена = 0;
		Для Каждого СтрокаСостав Из СоставКомплектаРегистр Цикл
			СтрокаКешЦена = ТабКешЦены.Найти(СтрокаСостав.Характеристика.Владелец, "Номенклатура");
			Если СтрокаКешЦена <> Неопределено Тогда
				ПолнаяЦена = ПолнаяЦена + СтрокаКешЦена.Цена * СтрокаСостав.Количество;
			КонецЕсли;	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Период"	, СоставДействуетС);
		Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Владелец);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекДата,
		|			ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
		|				И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|				И Номенклатура = &Владелец) КАК ЦеныНоменклатурыСрезПоследних";
					   
		ТекЦена = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекЦена = Выборка.Цена;
		КонецЕсли;	
		Если ТекЦена <> ПолнаяЦена Тогда
			ДокУстановкаЦен = Документы.УстановкаТиповЦенНоменклатуры.СоздатьДокумент();
			ДокУстановкаЦен.Дата = ТекущаяДата();
			СтрокаЦена = ДокУстановкаЦен.ТипыЦен.Добавить();
			СтрокаЦена.ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенПродаж;
			
			СтрокаТовар = ДокУстановкаЦен.Товары.Добавить();
			СтрокаТовар.Номенклатура 	= ЭтотОбъект.Владелец;
			СтрокаТовар.ТипЦен 			= Справочники.ТипыЦен.ОсновнойТипЦенПродаж;
			СтрокаТовар.Валюта 			= Справочники.Валюты.НайтиПоКоду("643");
			СтрокаТовар.Характеристика 	= ЭтотОбъект.Ссылка;
			СтрокаТовар.Цена 			= ПолнаяЦена;
			ДокУстановкаЦен.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
	КонецЕсли;
	
	//МассивПараметров = Новый Массив(3);
	//МассивПараметров[0] = Неопределено;
	//МассивПараметров[1] = Владелец;
	//МассивПараметров[2] = Неопределено;
	//Ключ = Новый УникальныйИдентификатор;
	//
	//ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ПересчитатьНеобходимостьПечатиЦенников", МассивПараметров, Ключ, "Пересчет необходимости печати ценников");
	//ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ПересчитатьНеобходимостьПечатиЦенниковТТ", МассивПараметров, Ключ, "Пересчет необходимости печати ценников ТТ");
	
	//АК БЕЛН 09.01.2017+
	Если ФлСменыСтатуса Тогда
		
		УстановитьПривилегированныйРежим(Истина);
				
		Если НЕ ЭтотОбъект.ПоТовару Тогда
			
			Если ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Рабочая
					ИЛИ ФлСменаДатыВывода Тогда
				
				ОбНом = ЭтотОбъект.Владелец.ПолучитьОбъект();
				ОбНом.Выведена			= Ложь;
				ОбНом.ПометкаУдаления	= Ложь;
				Если ЭтотОбъект.Владелец.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоНаименованию("Архив")) Тогда
					ОбНом.Родитель 		= ОбНом.ГруппаДоПомещенияВАрхив;
				КонецЕсли;
				ОбНом.Записать();
				
				//
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект.Владелец);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Планограммы.Ссылка КАК Планограмма,
				|	ВЗ_Выкладка.МестоВыкладки КАК МестоВыкладки,
				|	ВЗ_Выкладка.ТоварВыведен,
				|	Планограммы.НеАктуальная КАК НеАктуальная
				|ИЗ
				|	Справочник.Планограммы КАК Планограммы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ВыкладкаПланограммы.Планограмма КАК Планограмма,
				|			ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки,
				|			ВыкладкаПланограммы.ТоварВыведен КАК ТоварВыведен
				|		ИЗ
				|			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
				|		ГДЕ
				|			ВыкладкаПланограммы.Номенклатура = &Номенклатура) КАК ВЗ_Выкладка
				|		ПО Планограммы.Ссылка = ВЗ_Выкладка.Планограмма
				|
				|УПОРЯДОЧИТЬ ПО
				|	НеАктуальная";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ОбПланограмма = Выборка.Планограмма.ПолучитьОбъект();
					ОбПланограмма.НеАктуальная		= Ложь;
					ОбПланограмма.ПометкаУдаления	= Ложь;
					ОбПланограмма.Записать();
					Мен = РегистрыСведений.ВыкладкаПланограммы.СоздатьМенеджерЗаписи();
					Мен.Планограмма		= Выборка.Планограмма;
					Мен.Номенклатура	= Владелец;
					Мен.Прочитать();
					Если Мен.Выбран() Тогда
						Мен.ТоварВыведен= Ложь;
						Мен.Записать();
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
			
			ОтправитьПисьмоОбИзмененииСтатусаСервер(ЭтотОбъект.Ссылка);
			
		Иначе	
			
			ВывестиТовар();
			
		КонецЕсли;
		
		ФлСменыСтатуса		= Ложь;
		ФлСменаДатыВывода	= Ложь;
		
	КонецЕсли; 
	//АК БЕЛН 09.01.2017-
	
КонецПроцедуры


//АК БЕЛН 09.01.2017+
Процедура ВводОтмеченныхСервер(ФлНовая = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	//
	//МасНом = Новый Массив;
	МасХар = Новый Массив;
	//
	//Для каждого СтрокаТЧ Из Объект.Товары Цикл
	//	Если МасСтрок.Найти(СтрокаТЧ.НомерСтроки)=Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли; 
	//	Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
	//		МасХар.Добавить(СтрокаТЧ.Характеристика);	
	//	Иначе
	//		МасНом.Добавить(СтрокаТЧ.Номенклатура);	
	//	КонецЕсли; 
	//КонецЦикла; 

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец =(&Владелец)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МасХар.Добавить(Выборка.Ссылка);	
	КонецЦикла; 
	
	МасНомДляПроверки=Новый Массив;
	Для каждого Эл Из МасХар Цикл
		МасНомДляПроверки.Добавить(Эл.Владелец);	
	КонецЦикла; 
	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
	|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
	|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОсновная.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
	|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
	|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
	|ГДЕ
	|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
	
	Выб=Запрос.Выполнить().Выбрать();
	МасНомИскл=Новый Массив;
	Пока Выб.Следующий() Цикл
		Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
		Сообщить(Выб.Номенклатура);
		МасНомИскл.Добавить(Выб.Номенклатура);
	КонецЦикла; 
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МасХар", МасХар);
	Запрос.УстановитьПараметр("МасНомИскл", МасНомИскл);
	Запрос.УстановитьПараметр("СменаДатыВывода", ФлСменаДатыВывода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец,
	|	ХарактеристикиНоменклатуры1.Ссылка КАК Нехватка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры1
	|		ПО ХарактеристикиНоменклатуры.Владелец = ХарактеристикиНоменклатуры1.Владелец
	|			И (ХарактеристикиНоменклатуры1.Наименование = ""Нехватка товара"")
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В(&МасХар) И Не ХарактеристикиНоменклатуры.Владелец В(&МасНомИскл)
	|	И (ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = Значение(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	|				И &СменаДатыВывода
	|			ИЛИ НЕ &СменаДатыВывода)";
    Выборка = Запрос.Выполнить().Выбрать();
	
	МасНом = Новый Массив;
	мНоменклатураАрхив = Справочники.Номенклатура.НайтиПоНаименованию("Архив");
	Пока Выборка.Следующий() Цикл
		
		ОбХар = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ФлСменаДатыВывода Тогда
			ОбХар.СтатусАктивностиХарактеристики	= ?(ФлНовая, Перечисления.СтатусыАктивностиХарактеристик.Новая, Перечисления.СтатусыАктивностиХарактеристик.Активна);
			ОбХар.Статус							= Перечисления.СтатусыХарактеристик.Рабочая;
			ОбХар.ДатаОжидаемогоВозврата			= Дата(1, 1, 1);
			ОбХар.ДатаВывода						= Дата(1, 1, 1);
			ОбХар.Неактивная				        = Ложь;
			ОбХар.Причина				        	= "";
			ОбХар.ПричинаПриостановки	        	= ""; //+++АК SHEP 2018.05.28 ИП-00018185
		Иначе	
			ОбХар.СтатусАктивностиХарактеристики	= Перечисления.СтатусыАктивностиХарактеристик.Активна;
		КонецЕсли; 
		ОбХар.ДатаПовторнойРассылки = ТекущаяДата() + 24*60*60;
		ОбХар.Записать();
		
		Если НЕ ФлСменаДатыВывода Тогда
			ОтправитьПисьмоОбИзмененииСтатусаСервер(ОбХар.Ссылка);
			Сообщить("Переведена в статус Рабочая " + Строка(Выборка.Ссылка));
		КонецЕсли; 
		
		Нехватка = Выборка.Нехватка;
		Если ЗначениеЗаполнено(Нехватка) Тогда
			ОбНехватка = Выборка.Нехватка.ПолучитьОбъект();
			ОбНехватка.СтатусАктивностиХарактеристики	= Перечисления.СтатусыАктивностиХарактеристик.Выведена;
			ОбНехватка.Неактивная						= Истина;
			ОбНехватка.Записать();
		КонецЕсли;
		
		ОбНом = Выборка.Владелец.ПолучитьОбъект();
		ОбНом.Выведена			= Ложь;
		ОбНом.ПометкаУдаления	= Ложь;
		Если ОбНом.ПринадлежитЭлементу(мНоменклатураАрхив) Тогда
			ОбНом.Родитель 		= ОбНом.ГруппаДоПомещенияВАрхив;
		КонецЕсли;
		ОбНом.Записать();
		
		МасНом.Добавить(Выборка.Владелец);
		
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", МасНом);
	Запрос.УстановитьПараметр("МасНомИскл"	, МасНомИскл);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Планограммы.Ссылка КАК Планограмма,
	|	ВЗ_Выкладка.МестоВыкладки КАК МестоВыкладки,
	|	ВЗ_Выкладка.ТоварВыведен,
	|	Планограммы.НеАктуальная КАК НеАктуальная,
	|	ВЗ_Выкладка.Номенклатура
	|ИЗ
	|	Справочник.Планограммы КАК Планограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыкладкаПланограммы.Планограмма КАК Планограмма,
	|			ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки,
	|			ВыкладкаПланограммы.ТоварВыведен КАК ТоварВыведен,
	|			ВыкладкаПланограммы.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|		ГДЕ
	|			ВыкладкаПланограммы.Номенклатура В(&Номенклатура) И Не ВыкладкаПланограммы.Номенклатура В(&МасНомИскл)) КАК ВЗ_Выкладка
	|		ПО Планограммы.Ссылка = ВЗ_Выкладка.Планограмма
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеАктуальная";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОбПланограмма = Выборка.Планограмма.ПолучитьОбъект();
		ОбПланограмма.НеАктуальная		= Ложь;
		ОбПланограмма.ПометкаУдаления	= Ложь;
		ОбПланограмма.Записать();
		
		МенеджерЗаписи = РегистрыСведений.ВыкладкаПланограммы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Планограмма		= Выборка.Планограмма;
		МенеджерЗаписи.Номенклатура		= Выборка.Номенклатура;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ТоварВыведен	= Ложь;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	//
	
КонецПроцедуры

 
Процедура ОтправитьПисьмоОбИзмененииСтатусаСервер(Характеристика)
	
	Если ЭтотОбъект.ПоТовару
			И ЗначениеЗаполнено(ЭтотОбъект.ДатаВывода)
			И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена)
			И ФлСменыСтатуса Тогда
		ОбНом = ЭтотОбъект.Владелец.ПолучитьОбъект();
		ОбНом.НеобходимаРассылка = Истина;
		ОбНом.Записать();
		Возврат;
	КонецЕсли; 

	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	//СтруктураНовогоПисьма.Вставить("Тема", ?(Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Владелец)+" "+Строка(Ссылка));
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Возврат;
	КонецЕсли; 

	Если Статус = Перечисления.СтатусыХарактеристик.НаВывод Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Выводим " 			+ ?(ПоТовару, "продукт", "поставщика") +
												" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
												Строка(Владелец) + " " + Строка(Характеристика));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Приостанавливаем " 	+ ?(ПоТовару, "продукт", "поставщика") +
												" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
												Строка(Владелец) + " " + Строка(Характеристика));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Оживляем " 			+ ?(ПоТовару, "продукт", "поставщика") +" " +
												Строка(Владелец) + " " + Строка(Характеристика));
	КонецЕсли; 	
	СтруктураНовогоПисьма.Вставить("Тело", ?(ЗначениеЗаполнено(СтруктураНовогоПисьма.Тема), СтруктураНовогоПисьма.Тема, "") +
	//+++АК SHEP 2018.05.28 ИП-00018185
	//								?(Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", Символы.ПС + "Причина - " + Причина));
									?(Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", "
									|Причина приостановки - " + ПричинаПриостановки + ?(ПустаяСтрока(Причина), "", "
									|Комментарий к причине: " + Причина)));
	//---АК SHEP 2018.05.28
	
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	Кому = Новый СписокЗначений;
    МассивАдресов = Новый Массив;
	
	//
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер	, null, Характеристика, 
																		null, null,	ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству, null, Характеристика, 
																		null, null, ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	// помощники технолога
	МасФЛ = ДопМодульСервер.ПолучитьПомощниковТехнологаПоХарактеристике(Характеристика);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	//+++АК SHEP 2017.12.29 ИП-00017610: не моё, перенёс сюда (ниже) и добавил условие
	Если МассивАдресов.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =     
		"ВЫБРАТЬ
		//+++АК SHEP 2018.05.28 ИП-00018185: небольшая оптимизация
		//|	НастройкиПользователей.Пользователь
		|	ВЫРАЗИТЬ(НастройкиПользователей.Пользователь КАК Справочник.Пользователи).ФизЛицо КАК ФизЛицо
		//---АК SHEP 2018.05.28
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Право = &Настройка
		|	И НастройкиПользователей.Значение = ИСТИНА";

		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Сезонный вывод"));
		Результат = Запрос.Выполнить();

		ВыборкаПользователей = Результат.Выбрать();
		Пока ВыборкаПользователей.Следующий() Цикл
			//+++АК SHEP 2018.05.28 ИП-00018185: небольшая оптимизация
			//МассивАдресов.Добавить(ВыборкаПользователей.Пользователь.ФизЛицо);
			МассивАдресов.Добавить(ВыборкаПользователей.ФизЛицо);
			//---АК SHEP 2018.05.28
		КонецЦикла; 
		
	КонецЕсли;
	//---АК SHEP 2017.12.29
	
	//
	//ЗапросР = Новый Запрос;
	//ЗапросР.Текст = 
	//	"ВЫБРАТЬ
	//	|	РасчетчикиГруппыНоменклатуры.Ссылка
	//	|ПОМЕСТИТЬ вт
	//	|ИЗ
	//	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	//	|ГДЕ
	//	|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	//	|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	РасчетчикиГруппыНоменклатуры.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	//	|ИЗ
	//	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка";

	//ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Владелец);
	//ЗапросР.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.Расчетчики);

	//Результат = ЗапросР.Выполнить();

	//ВыборкаДетальныеЗаписи = Результат.Выбрать();

	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Для каждого Стр Из ВыборкаДетальныеЗаписи.РольПользователя.СоставРоли Цикл
	//		МассивАдресов.Добавить(Стр.Сотрудник);
	//	КонецЦикла; 
	//КонецЦикла;
	
	//+++АК SHEP 2018.06.04 ИП-00017814: выше кто-то добавил почти то же самое
	ЗапросР = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетчикиГруппыНоменклатуры.Ссылка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
		|ГДЕ
		|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
		|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетчикиГруппыНоменклатуры.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка");
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Владелец);
	
	РезультатЗапросаР = ЗапросР.Выполнить();
	Если НЕ РезультатЗапросаР.Пустой() Тогда
		
		Выборка = РезультатЗапросаР.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивАдресов.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		
	КонецЕсли;
	//---АК SHEP 2018.06.04
	
	//+++АК SHEP 2018.09.18 ИП-00017814.01: разкомментировал, подправил, переместил выше (сюда)
	ЗапросР = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(Расчетчики.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты, """") КАК АдресЭлектроннойПочты,
		|	ЕСТЬNULL(Расчетчики.ОсновнойПользователь.ФизЛицо, """") КАК ОсновнойПользовательФизЛицо
		|ИЗ
		|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расчетчики КАК Расчетчики
		|		ПО РасчетчикиГруппыНоменклатуры.Ссылка = Расчетчики.Ссылка
		|ГДЕ
		|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
		|	И Расчетчики.ПометкаУдаления = ЛОЖЬ");
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Владелец);
	
	РезультатЗапросаР = ЗапросР.Выполнить();
	Если НЕ РезультатЗапросаР.Пустой() Тогда
		
		Выборка = РезультатЗапросаР.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ОсновнойПользовательФизЛицо) Тогда
				МассивАдресов.Добавить(Выборка.ОсновнойПользовательФизЛицо);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочты) Тогда
				МассивКомуВрем = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.АдресЭлектроннойПочты, ";", Истина, Истина);
				Для Каждого ЭлтМассива Из МассивКомуВрем Цикл
					Если Кому.НайтиПоЗначению(ЭлтМассива) = Неопределено Тогда
						Кому.Добавить(ЭлтМассива);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 2018.09.18
	
	//
	//Мерч=Справочники.РолиПользователей.НайтиПоНаименованию("Мерчендайзинг");
	//Если ЗначениеЗаполнено(Мерч) Тогда
	//	Для каждого Стр Из Мерч.СоставРоли Цикл
	//		МассивАдресов.Добавить(Стр.Сотрудник);
	//	КонецЦикла; 
	//КонецЕсли; 

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект"	, МассивАдресов);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ                                                   
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект в (&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
				Кому.Добавить(Выборка.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Кому.Добавить("sp@vkusvill.ru");
	КонецЕсли; 
	
	//Кому.Добавить("masher_33@mail.ru");
	//Кому.Добавить("gnytovadg@rambler.ru"); 
	//Кому.Добавить("dotsenko_89@list.ru");
	//Кому.Добавить("poly.stepanyuk@yandex.ru");
	//Кому.Добавить("e-tutmina@mail.ru");
	//Кому.Добавить("yulya.parfenova.00@bk.ru");
	//Кому.Добавить("yuliashev04@mail.ru");
	//Кому.Добавить("marie.petrovskaya@yandex.ru");
	//Кому.Добавить("irissokolova@yandex.ru"); 
	//Кому.Добавить("annyllat@gmail.com");
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
	    СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
	    Сообщить("Отправлено письмо с информацией об измененном статусе на " + СтрКому);
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
 //   
 //   Запрос = Новый Запрос;
 //   Запрос.Текст = 
 //   		"ВЫБРАТЬ
 //   		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
 //   		|ИЗ
 //   		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
 //   		|ГДЕ
 //   		|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика
 //   		|";
 //
 //   
 //   Запрос.УстановитьПараметр("Характеристика", Ссылка);                                                

 //   Результат = Запрос.Выполнить();

 //   ВыборкаДетальныеЗаписи = Результат.Выбрать();
 //   Кому=Новый СписокЗначений;
 //   Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
 //   	Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.АдресЭлектроннойПочты)) Тогда
 //   		Кому.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.АдресЭлектроннойПочты));
 //   	КонецЕсли; 
 //   КонецЦикла;
 //   Кому.Добавить(СокрЛП("reklama@izbenka.msk.ru"));
 //   

 //   Запрос = Новый Запрос;
 //   Запрос.Текст = 
 //   		"ВЫБРАТЬ
 //   		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
 //   		|ПОМЕСТИТЬ вт
 //   		|ИЗ
 //   		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
 //   		|ГДЕ
 //   		|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика
 //   		|;
 //   		|
 //   		|////////////////////////////////////////////////////////////////////////////////
 //   		|ВЫБРАТЬ РАЗЛИЧНЫЕ
 //   		|	РолиПользователейСоставРоли.Сотрудник
 //   		|ИЗ
 //   		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
 //   		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
 //   		|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
 //   		|				ИЛИ СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель = РолиПользователейСоставРоли.Ссылка)
 //   		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
 //   		|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.ТорговаяТочка";

 //   Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
 //   Запрос.УстановитьПараметр("Характеристика", Ссылка); 
 //   
 //   Результат = Запрос.Выполнить();

 //   ВыборкаДетальныеЗаписи = Результат.Выбрать();
 //   МассивАдресов=Новый Массив;
 //   Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
 //   	МассивАдресов.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
 //   КонецЦикла;

 //   
 //   
 //   Запрос = Новый Запрос;
 //   Запрос.Текст =                                                                                   
 //   	"ВЫБРАТЬ                                                   
 //   	|	КонтактнаяИнформация.Представление
 //   	|ИЗ
 //   	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
 //   	|ГДЕ
 //   	|	КонтактнаяИнформация.Объект в (&Объект)
 //   	|	И КонтактнаяИнформация.Тип = &Тип";
 //   
 //   Запрос.УстановитьПараметр("Объект", МассивАдресов);
 //   Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

 //   Результат = Запрос.Выполнить();

 //   ВыборкаДетальныеЗаписи = Результат.Выбрать();
 //   
 //   Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
 //   	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
 //   		Если Кому.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Представление)=Неопределено Тогда
 //   			Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
 //   		КонецЕсли; 
 //   	КонецЦикла;
 //   Иначе
 //   	Кому.Добавить("sp@vkusvill.ru");
 //   КонецЕсли; 
 //   СтруктураНовогоПисьма.Вставить("Кому", Кому);
 //   
 //   СтрКому="";
 //   Для каждого Эл Из Кому Цикл
 //	   СтрКому=СтрКому+Эл.Значение+"; ";
 //   КонецЦикла; 
 //   Попытка
 //   	ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
 //	   Сообщить("Отправлено письмо с информацией об измененном статусе на "+СтрКому);
 //   Исключение
 //	   Сообщить(ОписаниеОшибки());
 //   КонецПопытки; 
	
КонецПроцедуры

Процедура ДатаВыводаПриИзменении(Элемент)
	
	//+++АК SHEP 2017.12.08 ИП-00017349
	Если ЭтотОбъект.ДатаВывода <> ДатаВыводаБыло И ЗначениеЗаполнено(ЭтотОбъект.ДатаВывода) И ЭтотОбъект.ДатаВывода < НачалоДня(ТекущаяДата()) Тогда
		ЭтотОбъект.ДатаВывода = ДатаВыводаБыло;
		Сообщить("Дата вывода должна быть не меньше текущей!");
		Возврат;
	КонецЕсли;
	//---АК SHEP 2017.12.08
	
	СообщитьОстатки(Владелец,Ссылка);	
    СообщитьПредзаказы(Ссылка,ДатаВывода);
	Если (Статус=Перечисления.СтатусыХарактеристик.Приостановлена или Статус=Перечисления.СтатусыХарактеристик.НаВывод) и ЗначениеЗаполнено(ДатаВывода) Тогда
		ФлСменыСтатуса=Истина;
		Если ДатаВывода>Ссылка.ДатаВывода и ЗначениеЗаполнено(Ссылка.ДатаВывода)  Тогда
			СтатусАктивностиХарактеристики=Перечисления.СтатусыАктивностиХарактеристик.Активна;
			ФлСменаДатыВывода=Истина;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура СообщитьПредзаказы(Характеристика,ДатаВывода)
	Если Не ЗначениеЗаполнено(ДатаВывода) или ДатаВывода<НачалоДня(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОбработки", НачалоДня(ДатаВывода - 86400));
	Запрос.УстановитьПараметр("Ссылка",Характеристика); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(ВЗ_Запрос.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(ВЗ_Запрос.ДатаПоступления) КАК ДатаПоступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредзаказТовары.Характеристика КАК Характеристика,
	|		ПредзаказТовары.Ссылка КАК Ссылка,
	|		ЗаказПоставщикуПредзаказы.ДатаПоступления КАК ДатаПоступления
	|	ИЗ
	|		Документ.Предзаказ.Товары КАК ПредзаказТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗаказПоставщикуПредзаказы.Документ КАК Документ,
	|				ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления КАК ДатаПоступления
	|			ИЗ
	|				Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|			ГДЕ
	|				ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления >= &ДатаОбработки
	|				И ЗаказПоставщикуПредзаказы.Ссылка.Проведен = ИСТИНА) КАК ЗаказПоставщикуПредзаказы
	|			ПО ПредзаказТовары.Ссылка = ЗаказПоставщикуПредзаказы.Документ
	|	ГДЕ
	|		ПредзаказТовары.Характеристика В
	|				(ВЫБРАТЬ
	|					ВТ_Характеристики.Ссылка
	|				ИЗ
	|					ВТ_Характеристики КАК ВТ_Характеристики)
	|		И ПредзаказТовары.Количество > 0) КАК ВЗ_Запрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаОбработки, ) КАК СоставКомплектаСрезПоследних
	|		ПО ВЗ_Запрос.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Есть "+Строка(Выборка.Ссылка)+" по этой характеристике с датой поступления "+Строка(Выборка.ДатаПоступления));	
	КонецЦикла;
	

КонецПроцедуры
 
Процедура СообщитьОстатки(Номенклатура,Характеристика)
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура,
		|	МАКСИМУМ(ЦеныПоставщиковСрезПоследних.Цена) КАК Цена
		|ПОМЕСТИТЬ втЦены
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних КАК ЦеныПоставщиковСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныПоставщиковСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпецификацииПоставщиковСрезПоследних.Владелец КАК Номенклатура,
		|	СпецификацииПоставщиковСрезПоследних.Ссылка КАК Характеристика,
		|	ЦеныПоставщиков.Цена
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СпецификацииПоставщиковСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
		|			ЦеныПоставщиковСрезПоследних.Цена КАК Цена
		|		ИЗ
		|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|					&Период,
		|					Номенклатура = &Номенклатура
		|						И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
		|		ПО СпецификацииПоставщиковСрезПоследних.Владелец = ЦеныПоставщиков.Номенклатура
		|			И СпецификацииПоставщиковСрезПоследних.Ссылка = ЦеныПоставщиков.Характеристика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	втЦены.Цена
		|ИЗ
		|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, Номенклатура = &Номенклатура) КАК СпецификацииПоставщиковСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
		|			ЦеныПоставщиковСрезПоследних.Цена КАК Цена
		|		ИЗ
		|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|					&Период,
		|					Номенклатура = &Номенклатура
		|						И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
		|		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
		|			И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			МАКСИМУМ(СпецификацииПоставщиковСрезПоследних.Период) КАК Период,
		//|			СпецификацииПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		//|			СпецификацииПоставщиковСрезПоследних.Характеристика КАК Характеристика
		//|		ИЗ
		//|			РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК СпецификацииПоставщиковСрезПоследних
		//|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|					ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		//|					ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика
		//|				ИЗ
		//|					РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		//|							&Период,
		//|							Номенклатура = &Номенклатура
		//|								И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
		//|				ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
		//|					И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
		//|		
		//|		СГРУППИРОВАТЬ ПО
		//|			СпецификацииПоставщиковСрезПоследних.Номенклатура,
		//|			СпецификацииПоставщиковСрезПоследних.Характеристика) КАК ВложенныйЗапрос
		//|		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
		//|			И СпецификацииПоставщиковСрезПоследних.Характеристика = ВложенныйЗапрос.Характеристика
		//|			И СпецификацииПоставщиковСрезПоследних.Период = ВложенныйЗапрос.Период
		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|	МАКСИМУМ(СпецификацииПоставщиковСрезПоследних.Период) КАК Период,
		|	СпецификацииПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье КАК НоменклатураСырье,
		|	СпецификацииПоставщиковСрезПоследних.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК СпецификацииПоставщиковСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика
		|		ИЗ
		|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|					&Период,
		|					Номенклатура = &Номенклатура
		|								И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
		|		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
		|			И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	СпецификацииПоставщиковСрезПоследних.Номенклатура,
		|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье,
		|	СпецификацииПоставщиковСрезПоследних.Характеристика) КАК ВложенныйЗапрос
		|ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
		|	И СпецификацииПоставщиковСрезПоследних.НоменклатураСырье = ВложенныйЗапрос.НоменклатураСырье
		|	И СпецификацииПоставщиковСрезПоследних.Характеристика = ВложенныйЗапрос.Характеристика
		|	И СпецификацииПоставщиковСрезПоследних.Период = ВложенныйЗапрос.Период
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
		|		ПО СпецификацииПоставщиковСрезПоследних.НоменклатураСырье = втЦены.Номенклатура
		|ГДЕ
		|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (СпецификацииПоставщиковСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СпецификацииПоставщиковСрезПоследних.ДатаКонца > &Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад,
		|	вт.Номенклатура,
		|	вт.Характеристика,
		|	вт.Цена,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) * вт.Цена КАК Сумма
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
		|		ПО вт.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И вт.Характеристика = ТоварыНаСкладахОстатки.Характеристика
		|АВТОУПОРЯДОЧИВАНИЕ");
		Запрос.УстановитьПараметр("Период",КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",Характеристика);
		Выб=Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Сообщить("Склад "+Выб.Склад+": "+Выб.Номенклатура+" "+Выб.Характеристика+" количество: "+Строка(Выб.Количество)+" цена: "+Строка(Выб.Цена)+" сумма: "+Строка(Выб.Сумма));
		КонецЦикла; 	
		
	

КонецПроцедуры
 
//АК БЕЛН 09.01.2017-

// ================================================================================
// ========== Таблица свойств

Процедура ТаблицаСвойствПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТаблицаСвойствПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ЭлементыФормы.ТаблицаСвойств.Колонки["Свойство"].ЭлементУправления.РедактированиеТекста = Ложь;
	
КонецПроцедуры

Процедура ТаблицаСвойствСвойствоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛожЬ;
	
КонецПроцедуры

Процедура ХарактеристикаФасовкаПриИзменении(Элемент)
	
	ЭтотОбъект.Наименование = СформироватьНаименование(ТаблицаСвойств);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	//Вставить содержимое обработчика.
	ПараметрыФормы = Новый Структура("Объект", Ссылка);
	ОткрытьФорму("РегистрСведений.СоответствиеОбъектРоль.Форма.ФормаПривязкиКРолям", ПараметрыФормы, Неопределено, Неопределено);
	
КонецПроцедуры

//+++АК РОЛИ ОТВЕТСТВЕННЫХ

//////////////////////////////////

Функция РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущаяСсылка)

	//
	ВсеОК = Истина;
	
	//
	_тзРоли = тзРоли.Скопировать();
	_тзРоли.Сортировать("Пометка ВОЗР");
	
	//
	Для каждого СтрокаТЗ Из _тзРоли Цикл
		
		//
		Если СтрокаТЗ.Пометка Тогда
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли"	, СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект"	, ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			
			//
			МЗ.Период = ТекущаяДата();
			
			//
			МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
			МЗ.Объект = ТекущаяСсылка;
			
			//
			МЗ.РольПользователя = СтрокаТЗ.Роль;
			
			//
			МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
			
			//
			Попытка
				МЗ.Записать();
			Исключение
				ВсеОК = Ложь;
			КонецПопытки;	
			
		Иначе
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли"	, СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект"	, ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				
				//
				МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
				
				//
				МЗ.Период = ТекущаяДата();
			
				//
				МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
				МЗ.Объект = ТекущаяСсылка;
				
				//
				МЗ.РольПользователя = Неопределено;
				
				//
				МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
				
				//
				Попытка
					МЗ.Записать();
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

	//
	Возврат ВсеОК;
	
КонецФункции
 
//
//
Функция РолиОтветственныхПроверитьИЗаписатьДанные()

	//
	ВсеОК = Истина;
	Возврат ВсеОК;
	
	//
	СП = Новый Структура;
	СП.Вставить("Пометка", Истина);
	
	//
	НайденныеСтроки = тзРоли.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		Предупреждение("Объект должен быть привязан хотя бы к одной Роли");
		Возврат Ложь;		
	
	КонецЕсли; 
	
	//
	Возврат ВсеОК;

КонецФункции

//
//
Процедура ЗаполнитьРолиОтветственных()
	
	//
	тзРоли.Очистить();
	
	//
	Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
		
		//
		МассивДоступныхРолей 		= Новый Массив;
		МассивДоступныхТиповРолей 	= Новый Массив;
		
		//
		ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		     |	РолиПользователейТипыРолей.Ссылка,
		     |	РолиПользователейТипыРолей.ТипРоли,
		     |	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
		     |ИЗ
		     |	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		     |{ГДЕ
		     |	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
		     |	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли,
		     |	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.* КАК ТипСтруктурнойЕдиницы}";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//
			Если Выборка.ТипРоли.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
				
				//
				МассивДоступныхРолей.Добавить(Выборка.Ссылка);
				МассивДоступныхТиповРолей.Добавить(Выборка.ТипРоли);
				
			КонецЕсли; 
		
		КонецЦикла; 
		
		//
		ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		     |	СоответствиеОбъектРольСрезПоследних.Период,
		     |	РолиПользователей.Ссылка КАК Роль,
		     |	РолиПользователей.ТипРоли КАК ТипРоли,
		     |	РолиПользователей.Ссылка.Наименование КАК Наименование,
		     |	ВЫБОР
		     |		КОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL 
		     |			ТОГДА ИСТИНА
		     |		ИНАЧЕ ЛОЖЬ
		     |	КОНЕЦ КАК Пометка,
		     |	РолиПользователей.Ссылка.ПометкаУдаления
		     |ИЗ
		     |	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
		     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
		     |		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
		     |			И (СоответствиеОбъектРольСрезПоследних.Объект = &Объект)
			 |			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
		     |ГДЕ
		     |	РолиПользователей.Ссылка В(&ДоступныеРоли)
		     |	И РолиПользователей.ТипРоли В(&ДоступныеТипы)
		     |
		     |УПОРЯДОЧИТЬ ПО
		     |	Наименование";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Объект"			, ЭтотОбъект.Ссылка);
		ПЗ.Параметры.Вставить("ДоступныеРоли"	, МассивДоступныхРолей);
		ПЗ.Параметры.Вставить("ДоступныеТипы"	, МассивДоступныхТиповРолей);
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//
			НоваяСтрока = тзРоли.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла; 
	
	КонецЕсли; 

КонецПроцедуры

//
//
Процедура тзРолиПриИзмененииФлажка(Элемент, Колонка)
	
	//
	Если Колонка.Имя = "Пометка" Тогда
		
		//
		ТекущиеДанные = ЭлементыФормы.тзРоли.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//
		Пометка = ТекущиеДанные.Пометка;
		Если Пометка Тогда
			
			//
			Для каждого СтрокаТЗ Из тзРоли Цикл
				
				//
				Если СтрокаТЗ.Роль = ТекущиеДанные.Роль Тогда
					Продолжить;
				КонецЕсли; 
				
				//
				Если СтрокаТЗ.ТипРоли <> ТекущиеДанные.ТипРоли Тогда
					Продолжить;
				КонецЕсли; 
				
				//
				СтрокаТЗ.Пометка = НЕ (СтрокаТЗ.ТипРоли = ТекущиеДанные.ТипРоли);
			
			КонецЦикла; 
		
		КонецЕсли; 
	
	КонецЕсли; 	
	
КонецПроцедуры

//
//
Процедура тзРолиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//
	Для каждого ОформлениеСтроки Из ОформленияСтрок  Цикл
		
		//
		ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
		ОформлениеСтроки.Ячейки.Пометка.УстановитьФлажок(ОформлениеСтроки.ДанныеСтроки.Пометка);
	
	КонецЦикла; 
	
КонецПроцедуры

//---АК

//+++ gusd ГОСТ/ТУ

Процедура ГосударственныйСтандартТехническоеУсловиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивГОСТ_ТУ = ПолучитьМассивГостовТу();
	
	ПараметрыОткрытия = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", МассивГОСТ_ТУ);
	ПараметрыОткрытия.Вставить("Отбор"			, Отбор);
	ПараметрыОткрытия.Вставить("Номенклатура"	, ЭтотОбъект.Владелец);
	
	ОткрытьФорму("Справочник.ГосударственныеСтандартыИТехническиеУсловия.Форма.ФормаВыбораУпр", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

Функция ПолучитьМассивГостовТу()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГосударственныеСтандартыИТехническиеУсловияСостав.Ссылка
	|ИЗ
	|	Справочник.ГосударственныеСтандартыИТехническиеУсловия.Состав КАК ГосударственныеСтандартыИТехническиеУсловияСостав
	|ГДЕ
	|	ГосударственныеСтандартыИТехническиеУсловияСостав.Номенклатура В (&Номенклатура)");
	
	// Найдем всех родителей, т.к. в ГОСТах и ТУ могут указываться группы
	МассивЭлементов = НастройкаПравДоступа.ПолучитьМассивРодительскихЭлементов(ЭтотОбъект.Владелец); 
	
	// Добавим владельца характеристики
	МассивЭлементов.Добавить(ЭтотОбъект.Владелец);
	
	Запрос.УстановитьПараметр("Номенклатура", МассивЭлементов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура СтатусАктивностиХарактеристикиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Перечисления.СтатусыАктивностиХарактеристик.Новая);
	Элемент.СписокВыбора.Добавить(Перечисления.СтатусыАктивностиХарактеристик.Выведена);
	
КонецПроцедуры

Процедура СоставКомплектаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивХарка = Новый Массив();
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		МассивХарка.Добавить(ОформлениеСтроки.ДанныеСтроки.Характеристика);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив", МассивХарка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В(&Массив)";
				   
	ТабКеш = Запрос.Выполнить().Выгрузить();
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		СтрокаКеш = ТабКеш.Найти(ОформлениеСтроки.ДанныеСтроки.Характеристика, "Ссылка");
		Если СтрокаКеш <> Неопределено Тогда
			Если ОформлениеСтроки.Ячейки.Товар.Видимость Тогда
				ОформлениеСтроки.Ячейки.Товар.УстановитьТекст(СтрокаКеш.Владелец);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура СоставКомплектаХарактеристикаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	id_kontrДляВыбора = 0;
	Для Каждого СтрокаСвойство Из ТаблицаСвойств Цикл
		Если СтрокаСвойство.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Производитель Тогда
			id_kontrДляВыбора = СтрокаСвойство.Значение.ИД;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(id_kontrДляВыбора) Тогда
		Возврат;
	КонецЕсли;	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаВыбораУпр", Новый Структура("Отбор, ТекущаяСтрока", Новый Структура("id_kontr, Неактивная", id_kontrДляВыбора, Ложь), Элемент.Значение), Элемент);
	
КонецПроцедуры

Процедура СоставДействуетСПриИзменении(Элемент)
	
	СоставКомплектаРегистр.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"			, СоставДействуетС);
	Запрос.УстановитьПараметр("Характеристика"	, ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставКомплектаСрезПоследних.Период,
	|	СоставКомплектаСрезПоследних.Составляющая,
	|	СоставКомплектаСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.СоставКомплекта.СрезПоследних(&ТекДата, Характеристика = &Характеристика) КАК СоставКомплектаСрезПоследних
	|ГДЕ
	|	СоставКомплектаСрезПоследних.Количество <> 0";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = СоставКомплектаРегистр.Добавить();
		СтрокаДоб.Характеристика 	= Выборка.Составляющая;
		СтрокаДоб.Количество 		= Выборка.Количество;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПриОткрытии()
	//+++AK ziga 20171031 ИП-00016835
	//ЭтаФорма.ЭлементыФормы.Статус.КнопкаВыбора=Ложь;
	//---AK ziga 20171031 ИП-00016835
	СоставКомплектаРегистр.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставКомплектаСрезПоследних.Период,
	|	СоставКомплектаСрезПоследних.Составляющая,
	|	СоставКомплектаСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.СоставКомплекта.СрезПоследних(, Характеристика = &Характеристика) КАК СоставКомплектаСрезПоследних
	|ГДЕ
	|	СоставКомплектаСрезПоследних.Количество <> 0";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоставДействуетС = Выборка.Период;
		СтрокаДоб = СоставКомплектаРегистр.Добавить();
		СтрокаДоб.Характеристика 	= Выборка.Составляющая;
		СтрокаДоб.Количество 		= Выборка.Количество;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СоставДействуетС) Тогда
		СоставДействуетС = ТекущаяДата();
	КонецЕсли;
	
	ЭлементыФормы.Наименование.ТолькоПросмотр = НЕ НеФормироватьНаименованиеАвтоматически;
	//АК БЕЛН 30.09.2016+

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СпецификацииПоставщиковСрезПоследних.Период) КАК Период,
	|	СпецификацииПоставщиковСрезПоследних.Характеристика
	|ИЗ
	|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, Характеристика = &Характеристика) КАК СпецификацииПоставщиковСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПоставщиковСрезПоследних.Характеристика";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
    Период = '00010101';
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    	Период = ВыборкаДетальныеЗаписи.Период;
	КонецЦикла;
	//СпецификацииПоставщиков.Отбор.Период.Установить(Период);
    СпецификацииПоставщиков.Отбор.Характеристика.Установить(ЭтотОбъект.Ссылка);
	ФлСменыСтатуса		= Ложь;
	ФлСменаДатыВывода	= Ложь;
	//АК БЕЛН 30.09.2016-
	
	ДатаВыводаБыло = ЭтотОбъект.ДатаВывода; //+++АК SHEP 2017.12.08 ИП-00017349
	
	ОтрегулироватьВидимостьНаФорме();
	
КонецПроцедуры

Процедура НеФормироватьНаименованиеАвтоматическиПриИзменении(Элемент)
	
	ЭлементыФормы.Наименование.ТолькоПросмотр = НЕ НеФормироватьНаименованиеАвтоматически;
	
КонецПроцедуры

Процедура СоставКомплектаРегистрПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Сообщить("Чтобы позиция ушла из состава нужно в строке по ней установить количество 0");
	
КонецПроцедуры

Процедура СпецификацииПоставщиковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Период > ТекущаяДата() Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт();
	КонецЕсли;
	
	Если ДанныеСтроки.ДатаКонца <= НачалоДня(ТекущаяДата())
			И ЗначениеЗаполнено(ДанныеСтроки.ДатаКонца) Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СеребристоСерый;
	Иначе
		ОформлениеСтроки.ЦветФона = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 20171002 ИП-00016086
// взято из модуля формы обработки "СезонныйВывод"
Функция ПолучитьДатуВыводаПоУмолчанию(мХарактеристика)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПредзаказТовары.Характеристика,
		|	МАКСИМУМ(ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления) КАК ДатаПоступления
		|ИЗ
		|	Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Предзаказ.Товары КАК ПредзаказТовары
		|		ПО (ПредзаказТовары.Ссылка = ЗаказПоставщикуПредзаказы.Документ)
		|			И (ПредзаказТовары.Характеристика = &Характеристика)
		|			И (ПредзаказТовары.Количество > 0)
		|ГДЕ
		|	ЗаказПоставщикуПредзаказы.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредзаказТовары.Характеристика");
	Запрос.УстановитьПараметр("Характеристика", мХарактеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТекущаяДата() + 7*24*60*60;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	//+++АК SHEP 2018.02.01 ИП-00017757
	//Возврат ВыборкаЗапроса.ДатаПоступления + 86400; // дата, последующая за последней датой поступления в проведенном заказе поставщику
	мДатаВывода = ВыборкаЗапроса.ДатаПоступления + 86400; // дата, последующая за последней датой поступления в проведенном заказе поставщику
	Возврат ?(мДатаВывода < НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()) + 1, мДатаВывода);
	//---АК SHEP 2018.02.01
	
КонецФункции
//---АК SHEP 20171002

Процедура СтатусПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Статус) Тогда
		ФлСменыСтатуса = Ложь;
		Возврат;	
	КонецЕсли;
	
	//
	//+++АК SHEP 2018.05.28 ИП-00018185
	//Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Причина)
	//		И (ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена
	//			ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод) Тогда
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ПричинаПриостановки)
		И ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
	//---АК SHEP 2018.05.28
		ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
		Сообщить("Необходимо указать причину");
		Возврат;
	КонецЕсли;
	
	//
	Если ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		ЭтотОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна;
		ЭтотОбъект.ДатаОжидаемогоВозврата = Дата(1, 1, 1);
		ЭтотОбъект.ДатаВывода 	= Дата(1, 1, 1);
		ЭтотОбъект.Неактивная 	= Ложь;
		ЭтотОбъект.Причина		= "";
		ЭтотОбъект.ПричинаПриостановки = ""; //+++АК SHEP 2018.05.28 ИП-00018185
		ФлСменыСтатуса = Истина;
		//+++АК CISA 2018.09.14 ИП-00019507 Принудительно сбрасываем галку "Выводим товар", чтобы "оживить" только текущий элемент! 
		ЭтотОбъект.ПоТовару = Ложь;
		//---АК CISA
	Иначе
		ФлСменыСтатуса = Истина;
	КонецЕсли;
	
	Если ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.НаВывод Тогда
	//+++АК SHEP 20171002 ИП-00016086
		//ЭтотОбъект.ДатаВывода = ТекущаяДата() + 7*24*60*60;
		ЭтотОбъект.ДатаВывода = ПолучитьДатуВыводаПоУмолчанию(ЭтотОбъект.Ссылка);
	ИначеЕсли ЭтотОбъект.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		ЭтотОбъект.ДатаВывода = ПолучитьДатуВыводаПоУмолчанию(ЭтотОбъект.Ссылка);
	//---АК SHEP 20171002
	КонецЕсли;
	
	//
	СообщитьОстатки(ЭтотОбъект.Владелец, ЭтотОбъект.Ссылка);	
		
КонецПроцедуры

//--- gusd

Процедура СрокГодностиНеограниченПриИзменении(Элемент)
	
	ОтрегулироватьВидимостьНаФорме();
	
КонецПроцедуры

//+++АК SHEP 20170720 
Процедура ПищеваяЦенностьПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

//---АК SHEP 20170720

//+++AK ziga 20171031 ИП-00016835 
Функция РольДоступнаСервер()
	//+++AK ziga ИП-00016835.01 20171118
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	Иначе
		//НаименованиеДопПрава="Возможность выбирать статус рабочая";	
		МассивПраваАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ВыборСтатусовПоХарактеристике,Ложь,ПараметрыСеанса.ТекущийПользователь);	
		ПравоАренда=МассивПраваАренда[0];
		Возврат ПравоАренда;
	КонецЕсли;
	
	//---AK ziga ИП-00016835.01 20171118 
КонецФункции

Процедура СтатусНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
		Если РольДоступнаСервер() Тогда		
		СписокСтатусов=Новый Массив;
		ЭтаФорма.ЭлементыФормы.Статус.КнопкаСпискаВыбора=Истина;
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.НаВывод"));
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.Приостановлена"));
		Элемент.СписокВыбора.ЗагрузитьЗначения(СписокСтатусов);
	КонецЕсли;
КонецПроцедуры

Процедура ОбнулитьРейтингНажатие(Элемент)
	Форма = ПолучитьФорму("Обработка.АК_ОбнулениеРейтинга.Форма.ФормаОбнулениеРейтинга");
	Форма.id_tov = Владелец.id_tov;
	Форма.id_kontr = id_kontr;
	Форма.ДатаОбнуления = ТекущаяДата();
	Форма.ПричинаОбнуленияРейтинга = "";
	Форма.Автор = "";
	Форма.Открыть();	
КонецПроцедуры

Процедура ИсторияОбнуленияРейтингаНажатие(Элемент)
	Форма = ПолучитьФорму("Обработка.АК_ОбнулениеРейтинга.Форма.ФормаИсторияОбнуленийРейтинга");
	Форма.id_tov = Владелец.id_tov;
	Форма.id_kontr = id_kontr;
	Форма.Открыть();
КонецПроцедуры

//---AK ziga 20171031 ИП-00016835
