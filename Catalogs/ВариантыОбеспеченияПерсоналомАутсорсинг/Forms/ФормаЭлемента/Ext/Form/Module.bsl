
&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиТорговыеТочки(СтруктураЗаписи)
	
    Возврат РегистрыСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

Функция ЕстьПривязкаКТТ()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантОбеспеченияПерсоналом", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОбеспеченияТТПерсоналом.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СрезПоследних(, ВариантОбеспеченияПерсоналом = &ВариантОбеспеченияПерсоналом) КАК ВариантыОбеспеченияТТПерсоналом";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Сообщить("Данный вариант уже привязан к торговой точке """ + Выборка.ТорговаяТочка + """! Редактирование невозможно.");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьОтборТорговыеТочки()
	
	ПараметрыЗапроса = ЭтаФорма.ТорговыеТочки.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ВариантОбеспеченияПерсоналом"	, Объект.Ссылка);
	
КонецПроцедуры


/////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПривязка = ЕстьПривязкаКТТ();
	//Элементы.ОбеспечениеПерсоналом.ТолькоПросмотр = ЕстьПривязка;
	
	//
	УстановитьОтборТорговыеТочки();
	//АК БЕЛН 31.03.2017+
    Элементы.Наименование.ТолькоПросмотр=Не  РольДоступна("ПолныеПрава");
    Элементы.ТорговыеТочки.Доступность=  РольДоступна("ПолныеПрава");
	//АК БЕЛН 31.03.2017-
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборТорговыеТочки();
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "Торговые точки"

&НаКлиенте
Процедура ТорговыеТочкиДобавить(Команда)
	
	Перем ТекТТ;
	
	Если Объект.Ссылка.Пустая() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Сначала надо записать вариант.";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ВвестиЗначение(ТекТТ, "Укажите торговую точку", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы")) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана торговая точка!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.ТорговаяТочка 				= ТекТТ;
	ФормаНового.Запись.ВариантОбеспеченияПерсоналом = Объект.Ссылка;
	ФормаНового.ОткрытьМодально();
	
	Элементы.ТорговыеТочки.Обновить();
	
	ЕстьПривязка = ЕстьПривязкаКТТ();
	Элементы.ОбеспечениеПерсоналом.ТолькоПросмотр = ЕстьПривязка;
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиСкопировать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Сначала надо записать вариант.";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.ТорговаяТочка 				= ТекДанные.ТорговаяТочка;
	ФормаНового.Запись.ДатаНачала 					= ТекДанные.ДатаНачала;
	ФормаНового.Запись.ВариантОбеспеченияПерсоналом = Объект.Ссылка;
	ФормаНового.ОткрытьМодально();
	
	Элементы.ТорговыеТочки.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиИзменить(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Сначала надо записать вариант.";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период"		, ТекДанные.Период);
	СтруктураЗаписи.Вставить("ТорговаяТочка", ТекДанные.ТорговаяТочка);
	СтруктураЗаписи.Вставить("ДатаНачала"	, ТекДанные.ДатаНачала);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиТорговыеТочки(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
		
		Элементы.ТорговыеТочки.Обновить();
	Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтменитьЗаписиИсторииИзменений(СтруктураЗначений)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКонтрагентов"	, Объект.ОбеспечениеПерсоналом.Выгрузить().ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("ДатаНачала"			, СтруктураЗначений.ДатаНачала);
	Запрос.УстановитьПараметр("ТорговаяТочка"		, СтруктураЗначений.ТорговаяТочка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрИстория.Контрагент,
	|	РегистрИстория.ТорговаяТочка,
	|	РегистрИстория.ДатаНачала,
	|	РегистрИстория.Должность,
	|	РегистрИстория.КоличествоЧеловек,
	|	РегистрИстория.НачалоСмены,
	|	РегистрИстория.ОкончаниеСмены
	|ИЗ
	|	РегистрСведений.ИсторияИзмененийПотребностиВПерсоналеАутсорсинг.СрезПоследних(
	|			,
	|			Контрагент В (&МассивКонтрагентов)
	|				И ТорговаяТочка = &ТорговаяТочка
	|				И ДатаНачала = &ДатаНачала) КАК РегистрИстория
	|ГДЕ
	|	НЕ РегистрИстория.Отмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.ИсторияИзмененийПотребностиВПерсоналеАутсорсинг.СоздатьНаборЗаписей();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ТекЗапись, Выборка);
			ТекЗапись.Период = ТекущаяДата();
			ТекЗапись.Отмена = Истина;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(Ложь);
		Исключение
			Сообщить("Не удалось записать историю изменений варианта");
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписьРегистраВариантов(СтруктураЗначенийИзмерений)
	
	НаборЗаписей = РегистрыСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтруктураЗначенийИзмерений.Период);
	НаборЗаписей.Отбор.ТорговаяТочка.Установить(СтруктураЗначенийИзмерений.ТорговаяТочка);
	НаборЗаписей.Отбор.ДатаНачала.Установить(СтруктураЗначенийИзмерений.ДатаНачала);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
		
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось удалить запись регистра ""Варианты обеспечения ТТ персоналом (аутсорсинг)""";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецПопытки;
	
	//
	ОтменитьЗаписиИсторииИзменений(СтруктураЗначенийИзмерений);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиУдалить(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Сначала надо записать вариант.";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные = Неопределено
			ИЛИ Вопрос("Запись будет удалена. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период"		, ТекДанные.Период);
	СтруктураЗаписи.Вставить("ТорговаяТочка", ТекДанные.ТорговаяТочка);
	СтруктураЗаписи.Вставить("ДатаНачала"	, ТекДанные.ДатаНачала);
	
	УдалитьЗаписьРегистраВариантов(СтруктураЗаписи);
	
	//
	Элементы.ТорговыеТочки.Обновить();
	
	ЕстьПривязка = ЕстьПривязкаКТТ();
	Элементы.ОбеспечениеПерсоналом.ТолькоПросмотр = ЕстьПривязка;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбеспечениеПерсоналомКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Струк=Новый Структура("ОбеспечениеПерсоналомКонтрагент",Истина);
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУправляемая",Струк,Элемент);
КонецПроцедуры

