
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьСписокКодировок()

	мСписокКодировок = УправлениеЭлектроннойПочтой.ПолучитьСписокКодировок();
	мМассивКодировок = мСписокКодировок.ВыгрузитьЗначения();
	Элементы.КодировкаПисемПоУмолчанию.СписокВыбора.ЗагрузитьЗначения(мМассивКодировок);

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с механизмом настройки получения/удаления писем с сервера
//
Процедура ДоступностьНастройкиПолученияПисемССервера()

	Элементы.УдалятьПисьмаССервераЧерез.Доступность				= Объект.ОставлятьКопииСообщенийНаСервере;
	Элементы.КоличествоДнейУдаленияПисемССервера.Доступность	= Объект.УдалятьПисьмаССервераЧерез;
	Элементы.ДекорацияУдалятьПисьма.Доступность					= Объект.УдалятьПисьмаССервераЧерез;

КонецПроцедуры

// Процедура управляет доступностью страниц панели.
//
Процедура ДоступностьСтраниц()

	Элементы.ГруппаГруппыПисем.Доступность		= НЕ Объект.Ссылка.Пустая();
	Элементы.ГруппаДополнительно.Доступность	= НЕ Объект.Ссылка.Пустая();
	Элементы.ГруппаФильтры.Доступность			= НЕ Объект.Ссылка.Пустая();

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с механизмом классификации писем по предметам
//
Процедура ДоступностьПредметовПисем()
	
	Элементы.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма.Доступность										= Объект.ИспользоватьКлассификациюПисемПоПредметам;
	Элементы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет.Доступность					= Объект.ИспользоватьКлассификациюПисемПоПредметам;
	Элементы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма.Доступность	= Объект.ИспользоватьКлассификациюПисемПоПредметам;
	Элементы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма.Доступность	= Объект.ИспользоватьКлассификациюПисемПоПредметам;
	
КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с механизмом автосохранения писем
//
Процедура ДоступностьАвтосохраненияПисем()

	Элементы._ИнтервалАвтосохраненияПисем.Доступность	= Объект.АвтосохранениеПисем;
	Элементы.ИнтервалАвтосохраненияПисем_.Доступность	= Объект.АвтосохранениеПисем;
	Элементы.ИнтервалАвтосохраненияПисем.Доступность	= Объект.АвтосохранениеПисем;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с механизмом настройкой подписи электронных писем
//
Процедура ДоступностьФлажковИспользованияПодписи()
	
	Элементы.ДобавлятьПодписьКОтветамИПересылкам.Доступность = Объект.ДобавлятьПодписьКИсходящимПисьмам;
	
КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом атентификации при доступе к SMTP серверу электронной почты
//
Процедура ДоступностьSMTPАутентификации()

	Элементы.ПарольSMTP.Доступность	= Объект.ТребуетсяSMTPАутентификация;
	Элементы.ЛогинSMTP.Доступность	= Объект.ТребуетсяSMTPАутентификация;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с механизмом автополучения/отправки писем
//
Процедура ДоступностьПараметровАвтополучения()

	Элементы._ИнтервалАвтоПолученияОтправкиСообщений.Доступность		= Объект.АвтоПолучениеОтправкаСообщений;
	Элементы.ИнтервалАвтоПолученияОтправкиСообщений.Доступность			= Объект.АвтоПолучениеОтправкаСообщений;
	Элементы.ИнтервалАвтоПолученияОтправкиСообщений_.Доступность		= Объект.АвтоПолучениеОтправкаСообщений;
	Элементы._ОтветственныйЗаАвтоПолучениеОтправкуСообщений.Доступность	= Объект.АвтоПолучениеОтправкаСообщений;
	Элементы.ОтветственныйЗаАвтоПолучениеОтправкуСообщений.Доступность	= Объект.АвтоПолучениеОтправкаСообщений;
	Элементы._ДействиеАвтополученияОтправкиСообщений.Доступность		= Объект.АвтоПолучениеОтправкаСообщений;
	Элементы.ДействиеАвтополученияОтправкиСообщений.Доступность			= Объект.АвтоПолучениеОтправкаСообщений;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом автоустановки рассмотренности писем электронной почты
//
Процедура ДоступностьИнтервалаАвтопометкиРассмотрено()

	Элементы.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено.Доступность	= Объект.АвтоматическаяУстановкаПометкиРассмотрено;
	Элементы.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено_.Доступность	= Объект.АвтоматическаяУстановкаПометкиРассмотрено;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Сформируем список выбора возможных видов текстов электронных писем
	Элементы.ФорматТекстаПисьмаПоУмолчанию.СписокВыбора.Добавить(Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
	Элементы.ФорматТекстаПисьмаПоУмолчанию.СписокВыбора.Добавить(Перечисления.ВидыТекстовЭлектронныхПисем.Текст);

	Если Объект.Ссылка.Пустая() Тогда // Это новый
		
		Объект.ПортSMTP = 25;
		Объект.ПортPOP3 = 110;
		Объект.ВремяОжиданияСервера 			= 60;
		Объект.ФорматТекстаПисьмаПоУмолчанию 	= Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
		Объект.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено 	= 5;
		Объект.ИнтервалАвтосохраненияПисем 							= 30;
		
		СтрокиДоступа =
			Объект.ДоступКУчетнойЗаписи.НайтиСтроки(Новый Структура("Пользователь", глЗначениеПеременной("глТекущийПользователь")));
		Если СтрокиДоступа.Количество() > 0 Тогда
			СтрокаДоступа = Объект.ДоступКУчетнойЗаписи.Добавить();
			СтрокаДоступа.Пользователь		= глЗначениеПеременной("глТекущийПользователь");
			СтрокаДоступа.Администрирование = Истина;
			СтрокаДоступа.Запись 			= Истина;
		КонецЕсли;
			
		Объект.НазначениеУчетнойЗаписи = Перечисления.НазначенияУчетнойЗаписи.ПерепискаСКандидатами;
		
	КонецЕсли;
	
	ДоступностьНастройкиПолученияПисемССервера();
	ДоступностьСтраниц();
	ДоступностьПредметовПисем();
	ДоступностьАвтосохраненияПисем();
	ДоступностьФлажковИспользованияПодписи();
	ДоступностьSMTPАутентификации();
	ДоступностьПараметровАвтополучения();
	ДоступностьИнтервалаАвтопометкиРассмотрено();
	

	ЭлементПорядка = ЭтаФорма.ГруппыПисем.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле 				= Новый ПолеКомпоновкиДанных("Порядок");
	ЭлементПорядка.Использование 		= Истина;
	ЭлементПорядка.ТипУпорядочивания 	= НаправлениеСортировкиКомпоновкиДанных.Возр;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДоступностьФлажковИспользованияПодписи();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДоступностьСтраниц();
	
КонецПроцедуры


Процедура ПроверитьНастройкиУчетнойЗаписиСервер()
	
	СпрОбъект = РеквизитФормыВЗначение("Объект");
	
	Проверка = СпрОбъект.ПроверитьЗаполнениеОбязательныхПолей();
	Если ЗначениеЗаполнено(Проверка) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("" + Проверка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиУчетнойЗаписи(Команда)
	
	мПрофиль = Новый ИнтернетПочтовыйПрофиль;
	
	мПрофиль.АдресСервераPOP3 = Объект.POP3Сервер;
	мПрофиль.АдресСервераSMTP = Объект.SMTPСервер;
	Если Объект.ВремяОжиданияСервера > 0 Тогда
		мПрофиль.ВремяОжидания = Объект.ВремяОжиданияСервера;
	КонецЕсли; 
	мПрофиль.Пароль           = Объект.Пароль;
	мПрофиль.Пользователь     = Объект.Логин;
	мПрофиль.ПортPOP3         = Объект.ПортPOP3;
	мПрофиль.ПортSMTP         = Объект.ПортSMTP;
	
	Если Объект.ТребуетсяSMTPАутентификация Тогда
		мПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		мПрофиль.ПарольSMTP         = Объект.ПарольSMTP;
		мПрофиль.ПользовательSMTP   = Объект.ЛогинSMTP;
	Иначе
		мПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		мПрофиль.ПарольSMTP         = "";
		мПрофиль.ПользовательSMTP   = "";
	КонецЕсли; 
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(мПрофиль);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ПроверитьНастройкиУчетнойЗаписиСервер();
		Предупреждение("Произошли ошибки при проверке настроек учетной записи.
					   |Описание ошибки приведено в окне сообщения.");
		Возврат;
	КонецПопытки;
	
	Предупреждение("Проверка подключения к почтовому серверу с заданными параметрами выполнена успешно.");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПомеченныеНаУдаление(Команда)
	
	//ОбработкаУдаления = Обработки.УдалениеПисемЭлектроннойПочты.Создать();
	//ОбработкаУдаления.УчетнаяЗапись = Ссылка;
	//ФормаПоискаДокументов = ОбработкаУдаления.ПолучитьФорму(, ЭтаФорма);
	//ФормаПоискаДокументов.Заголовок = "Удаление электронных писем, учетная запись """ + Наименование + " <" + АдресЭлектроннойПочты + ">""";
	//ФормаПоискаДокументов.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = Объект.АдресЭлектроннойПочты;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяSMTPАутентификацияПриИзменении(Элемент)
	
	ДоступностьSMTPАутентификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОставлятьКопииСообщенийНаСервереПриИзменении(Элемент)
	
	Объект.УдалятьПисьмаССервераЧерез = Объект.ОставлятьКопииСообщенийНаСервере;
	
	ДоступностьНастройкиПолученияПисемССервера();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьПисьмаССервераЧерезПриИзменении(Элемент)
	
	ДоступностьНастройкиПолученияПисемССервера();
	
КонецПроцедуры

Процедура УстановитьДействиеАвтополученияОтправкиСообщений()
	
	Если НЕ ЗначениеЗаполнено(Объект.ОтветственныйЗаАвтоПолучениеОтправкуСообщений) Тогда
		Объект.ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДействиеАвтополученияОтправкиСообщений) Тогда
		Объект.ДействиеАвтополученияОтправкиСообщений = Перечисления.ВидыДействийАвтоПолученияОтправкиЭлектронныхПисем.ПолучениеИОтправка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПолучениеОтправкаСообщенийПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИнтервалАвтоПолученияОтправкиСообщений) Тогда
		Объект.ИнтервалАвтоПолученияОтправкиСообщений = 15;
	КонецЕсли;
	
	УстановитьДействиеАвтополученияОтправкиСообщений();
	
	ДоступностьПараметровАвтополучения();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтосохранениеПисемПриИзменении(Элемент)
	
	ДоступностьАвтосохраненияПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяУстановкаПометкиРассмотреноПриИзменении(Элемент)
	
	ДоступностьИнтервалаАвтопометкиРассмотрено();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКлассификациюПисемПоПредметамПриИзменении(Элемент)
	
	Если НЕ Объект.ИспользоватьКлассификациюПисемПоПредметам Тогда
		Объект.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма											= Ложь;
		Объект.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет					= Ложь;
		Объект.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма		= Ложь;
		Объект.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма	= Ложь;
	КонецЕсли;
	
	ДоступностьПредметовПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьПодписьКИсходящимПисьмамПриИзменении(Элемент)
	
	Объект.ДобавлятьПодписьКОтветамИПересылкам = Объект.ДобавлятьПодписьКИсходящимПисьмам;
	ДоступностьФлажковИспользованияПодписи();
	
КонецПроцедуры


//ЗаполнитьСписокКодировок();
