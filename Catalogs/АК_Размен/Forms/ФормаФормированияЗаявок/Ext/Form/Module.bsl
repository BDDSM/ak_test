
#Область ОбработчикиСобытийФормы

//+++АК LATV 2018.09.08 ИП-00019662
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СпособФормированияЗаявок = "ПоВыбраннымЭлементам";
	ЗаполнитьГрафики();
	ЗаполнитьДатыРазменов();
	
	ВыбранныеЭлементы.ЗагрузитьЗначения(Параметры.ВыбранныеЭлементы);

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьДоступность();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура СформироватьЗаявкиПриИзменении(Элемент)

	УстановитьДоступностьСформироватьЗаявки();

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура ОповеститьМагазиныПриИзменении(Элемент)

	УстановитьДоступностьОповеститьМагазины();

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура СпособФормированияЗаявокПриИзменении(Элемент)

	УстановитьДоступностьСпособФормированияЗаявок();

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура ВыбратьИнкассаторовПриИзменении(Элемент)

	УстановитьДоступностьВыбратьИнкассаторов();

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура ОповеститьОтветственныхПриИзменении(Элемент)

	УстановитьДоступностьОповеститьОтветственных();

КонецПроцедуры

//+++АК LATV 2018.09.09 ИП-00019662
&НаКлиенте
Процедура ВыбратьГрафикиПриИзменении(Элемент)

	УстановитьДоступностьВыбратьГрафики();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура ОК(Команда)

	ОчиститьСообщения();
	СформированиеИОтправитьЗаявки();

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура ИзменитьДатыВФайлах(Команда)

	ОткрытьФорму("Обработка.ОбработкаРазменовДенег.Форма");

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура НастройкиРазмена(Команда)

	ОткрытьФорму("ОбщаяФорма.АК_НастройкаРазмена");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеВидимостьюДоступностью

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура УстановитьДоступность()

	УстановитьДоступностьСформироватьЗаявки();
	УстановитьДоступностьОповеститьМагазины();
	УстановитьДоступностьСпособФормированияЗаявок();
	УстановитьДоступностьВыбратьИнкассаторов();
	УстановитьДоступностьОповеститьОтветственных();
	УстановитьДоступностьВыбратьГрафики();

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура УстановитьДоступностьСформироватьЗаявки()

	Элементы.ГруппаДополнительнаяНастройка.Доступность			= СформироватьЗаявки Или ОповеститьМагазины;
	Элементы.ГруппаПараметрыОповещенияИнкасаторов.Доступность	= СформироватьЗаявки И ВыбратьИнкассаторов;
	Элементы.ГруппаОтветственные.Доступность					= СформироватьЗаявки;

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура УстановитьДоступностьОповеститьМагазины()

	Элементы.ГруппаДополнительнаяНастройка.Доступность = СформироватьЗаявки Или ОповеститьМагазины;

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура УстановитьДоступностьСпособФормированияЗаявок()

	Если СпособФормированияЗаявок = "ПоВыбраннымЭлементам" Тогда
		Элементы.ПанельВыбранныеРазмены.ТекущаяСтраница = Элементы.СтраницаВыбранныеЭлементы;
	ИначеЕсли СпособФормированияЗаявок = "ПоВсемуСписку" Тогда
		Элементы.ПанельВыбранныеРазмены.ТекущаяСтраница = Элементы.СтраницаПоВсемуСписку;
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура УстановитьДоступностьВыбратьИнкассаторов()

	Элементы.Инкассаторы.Доступность							= ВыбратьИнкассаторов;
	Элементы.ГруппаПараметрыОповещенияИнкасаторов.Доступность	= СформироватьЗаявки И ВыбратьИнкассаторов;

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура УстановитьДоступностьОповеститьОтветственных()

	Элементы.Ответственные.Доступность = ОповеститьОтветственных;

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура УстановитьДоступностьВыбратьГрафики()

	Элементы.ГрафикиРазменов.Доступность = ВыбратьГрафики;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеИОтправкаЗаявок

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Процедура СформированиеИОтправитьЗаявки()

	Если Не ПроверитьЗаполнениеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка данных
	ЗаполнитьПромежуточныеДанные();
	
	// Проверка
	Если Не ПроверитьЗаполнениеНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование заявок
	Если СформироватьЗаявки Тогда
		СформированныеЗаявки = СформироватьЗаявкиПоРазменам();
		Если СформированныеЗаявки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Отправка писем инкассаторам
		Если ВыбратьИнкассаторов И ОповеститьИнкассаторов
		 Или ОповеститьОтветственных Тогда
			СформироватьИтоговыеПисьмаПоРазменам(СформированныеЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	//Отправка писем
	Если ОповеститьМагазины Тогда
		СформироватьИОтправитьПисьмаПоРазменам();
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Действие выполнено'"),, НСтр("ru = 'Формирование и отправка заявок'"));

КонецПроцедуры

#Область Заполнение

//+++АК LATV 2018.09.08 ИП-00019662
&НаСервере
Процедура ЗаполнитьГрафики()

	Графики = Новый Массив;
	
	Графики.Добавить(Перечисления.ДниНедели.Понедельник);
	Графики.Добавить(Перечисления.ДниНедели.Вторник);
	Графики.Добавить(Перечисления.ДниНедели.Среда);
	Графики.Добавить(Перечисления.ДниНедели.Четверг);
	Графики.Добавить(Перечисления.ДниНедели.Пятница);
	Графики.Добавить(Перечисления.ДниНедели.Суббота);
	Графики.Добавить(Перечисления.ДниНедели.Воскресенье);
	
	ЭтаФорма.ВсеГрафики = Новый ФиксированныйМассив(Графики);

КонецПроцедуры

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервере
Процедура ЗаполнитьДатыРазменов()

	ДатыГрафиков = Новый Соответствие;
	
	Для Каждого График Из ВсеГрафики Цикл
		ДатыГрафиков.Вставить(График, ДатаРазмена(График));
	КонецЦикла;
	
	ЭтаФорма.ДатыРазменов = Новый ФиксированноеСоответствие(ДатыГрафиков);

КонецПроцедуры

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервереБезКонтекста
Функция ДатаРазмена(ГрафикРазмена)

	ДобавитьДниНедели = 0;
	
	Если ГрафикРазмена = Перечисления.ДниНедели.Вторник Тогда
		ДобавитьДниНедели = 86400; 
	ИначеЕсли ГрафикРазмена = Перечисления.ДниНедели.Среда Тогда
		ДобавитьДниНедели = 86400*2; 
	ИначеЕсли ГрафикРазмена = Перечисления.ДниНедели.Четверг Тогда
		ДобавитьДниНедели = 86400*3; 
	ИначеЕсли ГрафикРазмена = Перечисления.ДниНедели.Пятница Тогда
		ДобавитьДниНедели = 86400*4; 
	ИначеЕсли ГрафикРазмена = Перечисления.ДниНедели.Суббота Тогда
		ДобавитьДниНедели = 86400*5; 
	ИначеЕсли ГрафикРазмена = Перечисления.ДниНедели.Воскресенье Тогда
		ДобавитьДниНедели = 86400*6; 	
	КонецЕсли;
	
	ДатаРазмена = НачалоНедели(ТекущаяДата()) + ДобавитьДниНедели;
	Если ДатаРазмена < ТекущаяДата() Тогда
		ДатаРазмена = НачалоНедели(ТекущаяДата() + 604800) + ДобавитьДниНедели;
	КонецЕсли;
	
	Возврат ДатаРазмена;

КонецФункции

//+++АК LATV 2018.09.08 ИП-00019662
&НаСервере
Процедура ЗаполнитьПромежуточныеДанные()

	Если СформироватьЗаявки Тогда
		// Каталоги хранения
		ЗаполнитьКаталогиХраненияРазмена();
	КонецЕсли;
	
	// Данные разменов
	ВыбранныеРазмены = Новый СписокЗначений;
	Если СпособФормированияЗаявок = "ПоВыбраннымЭлементам" Тогда
		ВыбранныеРазмены = ВыбранныеЭлементы.Скопировать();
	КонецЕсли;
	
	ВыбранныеИнкассаторы = Новый СписокЗначений;
	Если ВыбратьИнкассаторов Тогда
		ВыбранныеИнкассаторы = Инкассаторы.Скопировать();
	КонецЕсли;
	
	ВыбранныеГрафики = Новый СписокЗначений;
	Если ВыбратьГрафики Тогда
		ВыбранныеГрафики = ГрафикиРазменов.Скопировать();
	КонецЕсли;
	
	Размены = ВыбратьРазменыИнкассаторов(ВыбранныеРазмены, ВыбранныеИнкассаторы, ВыбранныеГрафики);
	ЗаполнитьДанныеРазменов(Размены);

КонецПроцедуры

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервере
Процедура ЗаполнитьКаталогиХраненияРазмена()

	КаталогиХраненияРазмена.Очистить();
	АК_ПапкаХраненияРазмен = Константы.АК_ПапкаХраненияРазмен.Получить().Получить();
	Если АК_ПапкаХраненияРазмен <> Неопределено Тогда
		КаталогиХраненияРазмена.Загрузить(АК_ПапкаХраненияРазмен);
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервереБезКонтекста
Функция ВыбратьРазменыИнкассаторов(Размены, Инкассаторы, Графики)

	ПостроительЗапроса = Новый ПостроительЗапроса(
		"ВЫБРАТЬ
		|	АК_Размен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.АК_Размен КАК АК_Размен
		|{ГДЕ
		|	АК_Размен.Ссылка.* КАК Ссылка,
		|	АК_Размен.Магазин.ИнкассируемыйБанк.* КАК Инкассатор,
		|	АК_Размен.ГрафикРазмена.* КАК ГрафикРазмена}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Ссылка");
	ЭлементОтбора.ВидСравнения	= ВидСравнения.ВСписке;
	ЭлементОтбора.Значение		= Размены;
	ЭлементОтбора.Использование	= Размены.Количество() > 0;
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Инкассатор");
	ЭлементОтбора.ВидСравнения	= ВидСравнения.ВСписке;
	ЭлементОтбора.Значение		= Инкассаторы;
	ЭлементОтбора.Использование	= Инкассаторы.Количество() > 0;
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГрафикРазмена");
	ЭлементОтбора.ВидСравнения	= ВидСравнения.ВСписке;
	ЭлементОтбора.Значение		= Графики;
	ЭлементОтбора.Использование	= Графики.Количество() > 0;
	
	ПостроительЗапроса.Выполнить();
	Если ПостроительЗапроса.Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Размены = ПостроительЗапроса.Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Размены;

КонецФункции

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервере
Процедура ЗаполнитьДанныеРазменов(Размены)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АК_Размен.Ссылка,
		|	АК_Размен.Наименование,
		|	АК_Размен.ГрафикРазмена,
		|	АК_Размен.ДатаОтсрочки,
		|	АК_Размен.НомерЯвочнойТочки,
		|	АК_Размен.СуммаРазмена,
		|	АК_Размен.Магазин.Наименование КАК Магазин,
		|	АК_Размен.Магазин.Адрес КАК Адрес,
		|	АК_Размен.Магазин.Город.Наименование КАК Город,
		|	АК_Размен.Магазин.ИнкассируемыйБанк КАК ИнкассируемыйБанк,
		|	АК_Размен.Магазин.ИнкассируемыйБанк.Код КАК ИнкассируемыйБанкКод,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(АК_Размен.Магазин.ИнкассируемыйБанк.НаименованиеПолное КАК СТРОКА(200))) = """"
		|			ТОГДА АК_Размен.Магазин.ИнкассируемыйБанк.Наименование
		|		ИНАЧЕ АК_Размен.Магазин.ИнкассируемыйБанк.НаименованиеПолное
		|	КОНЕЦ КАК ИнкассируемыйБанкНаименование,
		|	АК_Размен.Магазин.БанкВносительИнкассация.Город КАК ГородБанка,
		|	АК_Размен.Магазин.БанкВносительИнкассация КАК БанкВносительИнкассация,
		|	АК_Размен.Магазин.АдресЭлектроннойПочты КАК Емайл
		|ИЗ
		|	Справочник.АК_Размен КАК АК_Размен
		|ГДЕ
		|	АК_Размен.Ссылка В(&Размены)
		|	И НЕ АК_Размен.ПометкаУдаления
		|	И НЕ АК_Размен.СтатусТорговойТочкиЗакрыто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АК_РазменРаскладка.Ссылка,
		|	АК_РазменРаскладка.ДостоинствоВалюты.Номинал КАК Номинал,
		|	СУММА(АК_РазменРаскладка.КоличествоМешков) КАК КоличествоМешков,
		|	СУММА(АК_РазменРаскладка.СуммаРуб) КАК СуммаРуб
		|ИЗ
		|	Справочник.АК_Размен.Раскладка КАК АК_РазменРаскладка
		|ГДЕ
		|	АК_РазменРаскладка.Ссылка В(&Размены)
		|	И НЕ АК_РазменРаскладка.Ссылка.ПометкаУдаления
		|	И НЕ АК_РазменРаскладка.Ссылка.СтатусТорговойТочкиЗакрыто
		|
		|СГРУППИРОВАТЬ ПО
		|	АК_РазменРаскладка.Ссылка,
		|	АК_РазменРаскладка.ДостоинствоВалюты.Номинал";
	
	Запрос.УстановитьПараметр("Размены", Размены);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеРазменов.Загрузить(РезультатЗапроса[0].Выгрузить());
	НоминалыРазменов.Загрузить(РезультатЗапроса[1].Выгрузить());

КонецПроцедуры

#КонецОбласти

#Область Проверка

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;
	
	Если Не СформироватьЗаявки
	   И Не ОповеститьМагазины Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано ни одного действия'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат Не Отказ;
	КонецЕсли;
	
	Если СпособФормированияЗаявок = "ПоВыбраннымЭлементам"
	   И ВыбранныеЭлементы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано ни одного размена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ВыбранныеЭлементы", Отказ);
	КонецЕсли;
	
	Если ВыбратьИнкассаторов
	   И Инкассаторы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано ни одного инкассатора'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Инкассаторы", Отказ);
	КонецЕсли;
	
	Если ВыбратьГрафики
	   И ГрафикиРазменов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано ни одного графика'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ГрафикиРазменов", Отказ);
	КонецЕсли;
	
	Если СформироватьЗаявки И ОповеститьОтветственных
	   И Ответственные.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен список ответственных'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Ответственные", Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;

КонецФункции

//+++АК LATV 2018.09.08 ИП-00019662
&НаСервере
Функция ПроверитьЗаполнениеНаСервере()

	Отказ = Ложь;
	
	Для Каждого Стр Из ДанныеРазменов Цикл
		
		Если СформироватьЗаявки Тогда
		
			ДанныеИнкассатора = ДанныеИнкассатораСервер(Стр);
			Если ДанныеИнкассатора = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не найден каталог шаблонов для %1'"), Стр.ИнкассируемыйБанк);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ДанныеИнкассатора.КаталогХраненияШаблонов) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнен каталог хранения шаблонов для %1'"), Стр.ИнкассируемыйБанк);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			
			Если ВыбратьИнкассаторов И ОповеститьИнкассаторов Тогда
				Если ПустаяСтрока(ДанныеИнкассатора.АдресЭлектроннойПочты) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не заполнен адрес электронной почты для %1'"), Стр.ИнкассируемыйБанк);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОповеститьМагазины Тогда
			
			Если ПустаяСтрока(Стр.Емайл) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнен Емайл для магазина %1'"), Стр.Магазин);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не Отказ;

КонецФункции

#КонецОбласти

#Область Формирование

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Функция СформироватьЗаявкиПоРазменам()

	СформированныеЗаявки = Новый Соответствие;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.DisplayAlerts		= 0;
		Excel.ScreenUpdating	= 0;
		Excel.EnableEvents		= 0;
		Excel.Visible			= 0;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось загрузить ""Microsoft Excel""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Для Каждого Стр Из ДанныеРазменов Цикл
		
		ДатаРазмена = ДатыРазменов.Получить(Стр.ГрафикРазмена);
		Если ДатаРазмена <= КонецДня(Стр.ДатаОтсрочки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.СуммаРазмена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеИнкассатора = ДанныеИнкассатораКлиент(Стр);
		ИмяШаблона = ДанныеИнкассатора.КаталогХраненияШаблонов; // пример каталога "C:\Users\automacon21\Desktop\automacon\bara\РАЗМЕН МЕШКИ.xls";
		
		РабочаяКнига	= Excel.WorkBooks.Open(ИмяШаблона, 0);
		Лист			= Excel.Sheets(1);
		
		ЗаполнитьЛистExcel(Лист, ИмяШаблона, Стр, ДатаРазмена);
		
		НовКаталог = СтрЗаменить(ИмяШаблона,".xls"," ") + "Размен & " + Формат(ДатаРазмена, "ДФ=ddMMyyyy");
		СоздатьКаталог(НовКаталог);
		
		ИмяФайлаСохранения = Стр.Наименование + "_" + Стр.НомерЯвочнойТочки + " & " + Формат(ДатаРазмена, "ДФ=ddMMyyyy") + ".xls";
		РабочаяКнига.SaveAs(НовКаталог + "\" + ИмяФайлаСохранения);
		РабочаяКнига.Close();
		//Excel.Workbooks.Close();
		
		
		// Сохранение для рассылки
		ЗаявкиКонтрагента = СформированныеЗаявки.Получить(Стр.ИнкассируемыйБанк);
		Если ЗаявкиКонтрагента = Неопределено Тогда
			ЗаявкиКонтрагента = Новый Соответствие;
			Для Каждого График Из ВсеГрафики Цикл
				ЗаявкиКонтрагента.Вставить(График, Новый Массив);
			КонецЦикла;
			СформированныеЗаявки.Вставить(Стр.ИнкассируемыйБанк, ЗаявкиКонтрагента);
		КонецЕсли;
		
		Заявка = Новый Структура();
		Заявка.Вставить("ИмяФайла",			ИмяФайлаСохранения);
		Заявка.Вставить("ДвоичныеДанные",	Новый ДвоичныеДанные(НовКаталог + "\" + ИмяФайлаСохранения));
		
		ЗаявкиКонтрагента.Получить(Стр.ГрафикРазмена).Добавить(Заявка);
		
	КонецЦикла;
	
	Excel.Quit();
	Excel = Неопределено;
	
	Возврат СформированныеЗаявки;

КонецФункции

//+++АК LATV 2018.09.02 ИП-00019662
&НаКлиенте
Процедура ЗаполнитьЛистExcel(Лист, ИмяШаблона, Стр, ДатаРазмена)

	Если Стр.ИнкассируемыйБанкКод = "000000203" Тогда
		
		Лист.Cells(2, 10).Value	= Формат(ТекущаяДата(), "ДЛФ=DD");
		Лист.Cells(4, 3).Value	= Формат(ДатаРазмена, "ДФ=dd.MM.yyyy");
		Лист.Cells(5, 1).Value	= "ООО «Вкусвилл», " + Стр.Город + ", " + Стр.Адрес;
		Лист.Cells(8, 4).Value	= "" + Стр.НомерЯвочнойТочки;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка", Стр.Ссылка);
		НоминалыРазмена = НоминалыРазменов.НайтиСтроки(Отбор);
		
		Лист.Cells(15, 5).Value	= 0;
		Лист.Cells(16, 5).Value	= 0;
		Лист.Cells(17, 5).Value	= 0;
		Лист.Cells(18, 5).Value	= 0;
		Лист.Cells(19, 5).Value	= 0;
		Лист.Cells(20, 5).Value	= 0;
		
		Лист.Cells(15, 11).Value	= 0;
		Лист.Cells(16, 11).Value	= 0;
		Лист.Cells(17, 11).Value	= 0;
		Лист.Cells(18, 11).Value	= 0;
		
		Для Каждого СтрокаРазмена Из НоминалыРазмена Цикл
			Если СтрокаРазмена.Номинал = 0.1 Тогда
				Лист.Cells(15, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 0.5 Тогда
				Лист.Cells(16, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 1 Тогда
				Лист.Cells(17, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 2 Тогда
				Лист.Cells(18, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 5 Тогда
				Лист.Cells(19, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 10 Тогда
				Лист.Cells(20, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 50 Тогда
				Лист.Cells(15, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 100 Тогда
				Лист.Cells(16, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 500 Тогда
				Лист.Cells(17, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 1000 Тогда
				Лист.Cells(18, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Стр.ИнкассируемыйБанкКод = "Т0003619 " Тогда
		
		Лист.Cells(4, 8).Value	= Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		Лист.Cells(10, 9).Value	= Формат(ДатаРазмена, "ДФ=dd.MM.yy");
		Лист.Cells(6, 2).Value	= "ООО «Вкусвилл», " + Стр.Город + ", " + Стр.Адрес;
		Лист.Cells(7, 2).Value	= "" + Стр.НомерЯвочнойТочки;
		
		Если ЗначениеЗаполнено(Стр.БанкВносительИнкассация) И Стр.ГородБанка <> "Г. МОСКВА" Тогда
			Лист.Cells(4, 1).Value	= Стр.ГородБанка;
		КонецЕсли;
	
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка", Стр.Ссылка);
		НоминалыРазмена = НоминалыРазменов.НайтиСтроки(Отбор);
		
		Лист.Cells(18, 5).Value	= 0;
		Лист.Cells(19, 5).Value	= 0;
		Лист.Cells(20, 5).Value	= 0;
		Лист.Cells(21, 5).Value	= 0;
		Лист.Cells(22, 5).Value	= 0;
		Лист.Cells(23, 5).Value	= 0;
		
		Лист.Cells(18, 11).Value	= 0;
		Лист.Cells(19, 11).Value	= 0;
		Лист.Cells(20, 11).Value	= 0;
		Лист.Cells(21, 11).Value	= 0;
		Лист.Cells(22, 11).Value	= 0;
		Лист.Cells(23, 11).Value	= 0;
		
		Для Каждого СтрокаРазмена Из НоминалыРазмена Цикл
			Если СтрокаРазмена.Номинал = 0.1 Тогда
				Лист.Cells(18, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 0.5 Тогда
				Лист.Cells(19, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 1 Тогда
				Лист.Cells(20, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 2 Тогда
				Лист.Cells(21, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 5 Тогда
				Лист.Cells(22, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 10 Тогда
				Лист.Cells(23, 5).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 50 Тогда
				Лист.Cells(18, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 100 Тогда
				Лист.Cells(19, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 500 Тогда
				Лист.Cells(21, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 1000 Тогда
				Лист.Cells(22, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 200 Тогда
				Лист.Cells(20, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			ИначеЕсли СтрокаРазмена.Номинал = 2000 Тогда
				Лист.Cells(23, 11).Value	= СтрокаРазмена.КоличествоМешков;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Стр.ИнкассируемыйБанкКод = "000001506" Тогда 
		
		Лист.Cells(11, 3).Value	= Формат(ДатаРазмена, "ДЛФ=DD");
		Лист.Cells(5, 1).Value	= "ООО «Вкусвилл», " + Стр.Город + ", " + Стр.Адрес;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка",Стр.Ссылка);
		НоминалыРазмена = НоминалыРазменов.НайтиСтроки(Отбор);
		
		Лист.Cells(21, 2).Value	= 0;
		Лист.Cells(22, 2).Value	= 0;
		Лист.Cells(23, 2).Value	= 0;
		Лист.Cells(24, 2).Value	= 0;
		Лист.Cells(25, 2).Value	= 0;
		Лист.Cells(26, 2).Value	= 0;
		
		Лист.Cells(29, 2).Value	= 0;
		Лист.Cells(30, 2).Value	= 0;
		Лист.Cells(31, 2).Value	= 0;
		Лист.Cells(32, 2).Value	= 0;
		Лист.Cells(33, 2).Value	= 0;
		Лист.Cells(34, 2).Value	= 0;
		Лист.Cells(35, 2).Value	= 0;
		Лист.Cells(36, 2).Value	= 0;
		
		Для Каждого СтрокаРазмена Из НоминалыРазмена Цикл
			Если СтрокаРазмена.Номинал = 0.1 Тогда
				Лист.Cells(34, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 0.5 Тогда
				Лист.Cells(33, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 1 Тогда
				Лист.Cells(32, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 2 Тогда
				Лист.Cells(31, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 5 Тогда
				Лист.Cells(30, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 10 Тогда
				Лист.Cells(29, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 50 Тогда
				Лист.Cells(25, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 100 Тогда
				Лист.Cells(24, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 500 Тогда
				Лист.Cells(23, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 1000 Тогда
				Лист.Cells(22, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			ИначеЕсли СтрокаРазмена.Номинал = 5000 Тогда
				Лист.Cells(21, 2).Value	= СтрокаРазмена.СуммаРуб;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.09.08 ИП-00019662
&НаКлиенте
Функция ДанныеИнкассатораКлиент(ТекущаяСтрока)

	ДанныеИнкассатора = Неопределено;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИнкассируемыйБанк",	ТекущаяСтрока.ИнкассируемыйБанк);
	Отбор.Вставить("ВариантШаблона",	"");
	Если ЗначениеЗаполнено(ТекущаяСтрока.БанкВносительИнкассация) И ТекущаяСтрока.ГородБанка <> "Г. МОСКВА" Тогда
		Отбор.Вставить("ВариантШаблона", "Регион");
	КонецЕсли;
	
	КаталогиХранения = КаталогиХраненияРазмена.НайтиСтроки(Отбор);
	Если КаталогиХранения.Количество() > 0 Тогда
		ДанныеИнкассатора = КаталогиХранения[0];
	КонецЕсли;
	
	Возврат ДанныеИнкассатора;

КонецФункции

//+++АК LATV 2018.09.08 ИП-00019662
&НаСервере
Функция ДанныеИнкассатораСервер(ТекущаяСтрока)

	ДанныеИнкассатора = Неопределено;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИнкассируемыйБанк",	ТекущаяСтрока.ИнкассируемыйБанк);
	Отбор.Вставить("ВариантШаблона",	"");
	Если ЗначениеЗаполнено(ТекущаяСтрока.БанкВносительИнкассация) И ТекущаяСтрока.ГородБанка <> "Г. МОСКВА" Тогда
		Отбор.Вставить("ВариантШаблона", "Регион");
	КонецЕсли;
	
	КаталогиХранения = КаталогиХраненияРазмена.НайтиСтроки(Отбор);
	Если КаталогиХранения.Количество() > 0 Тогда
		ДанныеИнкассатора = КаталогиХранения[0];
	КонецЕсли;
	
	Возврат ДанныеИнкассатора;

КонецФункции

#КонецОбласти

#Область Отправка

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервере
Процедура СформироватьИОтправитьПисьмаПоРазменам()

	ДанныеПодключения = ПодключитьсяКПочте();
	
	Для Каждого Стр Из ДанныеРазменов Цикл
		
		ДатаРазмена = ДатыРазменов.Получить(Стр.ГрафикРазмена);
		Если ДатаРазмена <= КонецДня(Стр.ДатаОтсрочки) Тогда
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У магазина %1 установлена дата отсрочки размена %2'"), Стр.Магазин, Формат(Стр.ДатаОтсрочки, "ДФ=dd.MM.yyyy"));
			ОтправитьПисьмо(ДанныеПодключения, ДатаРазмена, ТекстПисьма, Стр.Емайл);
			Продолжить;
		КонецЕсли;
		
		Если Стр.СуммаРазмена = 0 Тогда
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У магазина %1 не определена схема размена.'"), Стр.Магазин);
			ОтправитьПисьмо(ДанныеПодключения, ДатаРазмена, ТекстПисьма, Стр.Емайл);
			Продолжить;
		КонецЕсли;
		
		ТекстПисьма = СформироватьТекстПисьма(Стр, ДатаРазмена);
		
		ОтправитьПисьмо(ДанныеПодключения, ДатаРазмена, ТекстПисьма, Стр.Емайл);
		
	КонецЦикла;
	
	ДанныеПодключения.Почта.Отключиться();

КонецПроцедуры

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервере
Функция СформироватьТекстПисьма(Стр, ДатаРазмена)

	РазменТекст = "";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ссылка", Стр.Ссылка);
	НоминалыРазмена = НоминалыРазменов.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаРазмена Из НоминалыРазмена Цикл
		
		Если СтрокаРазмена.КоличествоМешков = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Шаблон = "%ДостоинствоВалюты-%КоличествоМешков мешков" + Символы.ПС + Символы.ПС;
		Шаблон = СтрЗаменить(Шаблон, "%ДостоинствоВалюты", Строка(СтрокаРазмена.Номинал) + "р");
		Шаблон = СтрЗаменить(Шаблон, "%КоличествоМешков", СтрокаРазмена.КоличествоМешков);
		Если СтрокаРазмена.Номинал >= 50 Тогда
			Если СтрокаРазмена.КоличествоМешков = 1 Тогда
				Шаблон = СтрЗаменить(Шаблон, "мешков", "пачка");
			Иначе
				Шаблон = СтрЗаменить(Шаблон, "мешков", "пачек");
			КонецЕсли;
		Иначе
			Если СтрокаРазмена.КоличествоМешков = 1 Тогда
				Шаблон = СтрЗаменить(Шаблон, "мешков", "мешок");
			КонецЕсли;
		КонецЕсли;
		
		РазменТекст = РазменТекст + Шаблон;
		
	КонецЦикла;
	
	ТекстПисьма = "Отправлен Размен на дату %ДатаРазмена для магазина %Магазин " + Символы.ПС + Символы.ПС
		+ "Контрагент Инкассатор: %Инкассатор" + Символы.ПС + Символы.ПС
		+ "Состав сумки=%СуммаРазмена" + Символы.ПС + Символы.ПС
		+ РазменТекст;
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Инкассатор"
		, ?(ЗначениеЗаполнено(Стр.Магазин), СокрЛП(Стр.ИнкассируемыйБанкНаименование), ""));
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Магазин"
		, "" + Стр.Магазин + ",як" + Стр.НомерЯвочнойТочки);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ДатаРазмена"
		, Формат(ДатаРазмена, "ДФ=dd.MM") + " (" + Стр.ГрафикРазмена + ")");
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СуммаРазмена"
		, Строка(Стр.СуммаРазмена));
	
	Возврат ТекстПисьма;

КонецФункции

//+++АК LATV 2018.09.05 ИП-00019662
&НаСервере
Процедура СформироватьИтоговыеПисьмаПоРазменам(СформированныеЗаявки)

	ДанныеПодключения = ПодключитьсяКПочте();
	
	ЭлектронныеАдресаПолучателейКопий = Неопределено;
	Если ОповеститьОтветственных Тогда
		ЭлектронныеАдресаПолучателейКопий = УправлениеЭлектроннойПочтой.ЭлектронныеАдресаФизическихЛиц(Ответственные);
	КонецЕсли;
	
	Для Каждого Инкассатор Из Инкассаторы.ВыгрузитьЗначения() Цикл
		ЗаявкиКонтрагента = СформированныеЗаявки.Получить(Инкассатор);
		Если ЗаявкиКонтрагента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого График Из ВсеГрафики Цикл
			Вложения = ЗаявкиКонтрагента.Получить(График);
			Если Не ЗначениеЗаполнено(Вложения) Тогда
				Продолжить;
			КонецЕсли;
			
			// Пока без учета регионов
			Отбор = Новый Структура("ИнкассируемыйБанк, БанкВносительИнкассация", Инкассатор);
			ДанныеИнкассатора = ДанныеИнкассатораСервер(Отбор);
			
			ДатаРазмена	= ДатыРазменов.Получить(График);
			ТекстПисьма = НСтр("ru = ''");
			
			АдресЭлектроннойПочты = ?(ВыбратьИнкассаторов И ОповеститьИнкассаторов, ДанныеИнкассатора.АдресЭлектроннойПочты, "");
			
			ОтправитьПисьмо(ДанныеПодключения, ДатаРазмена, ТекстПисьма, АдресЭлектроннойПочты, Инкассатор, ЭлектронныеАдресаПолучателейКопий, Вложения);
		КонецЦикла;
	КонецЦикла;
	
	ДанныеПодключения.Почта.Отключиться();

КонецПроцедуры

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервере
Функция ПодключитьсяКПочте()

	АдресЭлектроннойПочтыДляРассылки = "no-reply@vkusvill.ru";
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки(АдресЭлектроннойПочтыДляРассылки);
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты, Наименование");
	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	ДанныеПодключения = Новый Структура;
	ДанныеПодключения.Вставить("Почта",				Почта);
	ДанныеПодключения.Вставить("ИмяОтправителя",	ДанныеУчетнойЗаписи.Наименование);
	ДанныеПодключения.Вставить("Адрес",				ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
	
	Возврат ДанныеПодключения;

КонецФункции

//+++АК LATV 2018.09.03 ИП-00019662
&НаСервере
Процедура ОтправитьПисьмо(ДанныеПодключения, ДатаРазмена, Текст, Кому, Контрагент = Неопределено, Копия = Неопределено, Вложения = Неопределено)

	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Размен на дату %1'"), Формат(ДатаРазмена, "ДФ=dd.MM.yyyy"));
	Если Контрагент <> Неопределено Тогда
		ТемаПисьма = ТемаПисьма + " " + Контрагент;
	КонецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема				= ТемаПисьма;
	Письмо.ИмяОтправителя	= ДанныеПодключения.ИмяОтправителя;
	Письмо.Отправитель		= ДанныеПодключения.Адрес;
	
	Если Не ПустаяСтрока(Кому) Тогда
		Получатель = Письмо.Получатели.Добавить(Кому);
		//Получатель.ОтображаемоеИмя = ;
	КонецЕсли;
	
	Если Копия <> Неопределено Тогда
		Для Каждого СтрокаПолучатель Из Копия Цикл
			Получатель = Письмо.Копии.Добавить(СтрокаПолучатель.Адрес);
			Получатель.ОтображаемоеИмя	= СтрокаПолучатель.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если Вложения <> Неопределено Тогда
		Для Каждого Заявка Из Вложения Цикл
			Письмо.Вложения.Добавить(Заявка.ДвоичныеДанные, Заявка.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = Письмо.Тексты.Добавить(Текст);
	
	Попытка
		ДанныеПодключения.Почта.Послать(Письмо);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Письмо ""%1"" для ""%2"" не отправлено'"), ТемаПисьма, Кому);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
