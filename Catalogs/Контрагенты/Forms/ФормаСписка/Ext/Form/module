//+++АК LAGP 2017.11.18 ИП-00017285 Настройка ширины дерева справочника
Процедура ПриОткрытии()
	
	ШиринаПоляДерева = ХранилищеОбщихНастроек.Загрузить("ШиринаДереваСправочникаКонтрагенты");
	Если НЕ ШиринаПоляДерева = Неопределено Тогда
		Если ШиринаПоляДерева <> ЭлементыФормы.СправочникДерево.Ширина Тогда
			ЭлементыФормы.СправочникДерево.Ширина = ШиринаПоляДерева;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыКарточкаСубконто(Кнопка)
	Отчет 					= Отчеты.КарточкаСубконтоФинансовый.Создать();
	НоваяСтрока 			= Отчет.Субконто.Добавить();
	НоваяСтрока.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты;
	
	ПутьКДанным = "Субконто"+НоваяСтрока.НомерСтроки;;
		
	Отчет.ПерезаполнитьНачальныеНастройки();
	
	ПолеОтбора = Отчет.ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
	
	ПолеОтбора.Использование	=Истина;
	ПолеОтбора.ВидСравнения 	= ВидСравнения.Равно;
	ПолеОтбора.Значение 		= ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	
	Форма = Отчет.ПолучитьФорму("Форма");
	Форма.ОбновитьОтчет();
	Форма.Открыть();
КонецПроцедуры

Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивКонтрагенты = Новый СписокЗначений;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		МассивКонтрагенты.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	КолонкиСписка = ЭлементыФормы.СправочникСписок.Колонки;
	
	//+++17316 koro 28.11.17 Вывод рекомендаций в формы списка.
	ТаблицаРекомендаций = ПолучитьТаблицуРекомендаций(МассивКонтрагенты);
	ВыводитьРекомендации = (ТаблицаРекомендаций <> Неопределено); 
	КолонкиСписка.Рекомендация1Cont.Видимость = ВыводитьРекомендации;	
	КолонкиСписка.РекомендацияУФК.Видимость = ВыводитьРекомендации;
	//---17316 koro 28.11.17
	
	Если КолонкиСписка.ЕстьДопСоглашения.Видимость 
			ИЛИ КолонкиСписка.ЕстьПриложенияКДоговорам.Видимость 
		         ИЛИ  КолонкиСписка.ЕстьПриложенияКДоговорам.Видимость Тогда
				 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивКонтрагенты", МассивКонтрагенты);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСоглашения.Владелец,
		|	ДополнительныеСоглашения.Вид
		|ИЗ
		|	Справочник.ДополнительныеСоглашения КАК ДополнительныеСоглашения
		|ГДЕ
		|	ДополнительныеСоглашения.Владелец В(&МассивКонтрагенты)
		|	И ДополнительныеСоглашения.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыФайлыДоговоров.Ссылка,
		|	МАКСИМУМ(""Вложение"")
		|ИЗ
		|	Справочник.Контрагенты.ФайлыДоговоров КАК КонтрагентыФайлыДоговоров
		|ГДЕ
		|	КонтрагентыФайлыДоговоров.Ссылка.ОсновнойДоговорКонтрагента = КонтрагентыФайлыДоговоров.Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрагентыФайлыДоговоров.Ссылка";
					   
		ТабДанные = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Если КолонкиСписка.ЕстьДопСоглашения.Видимость Тогда
				СтрокиДанные = ТабДанные.НайтиСтроки(Новый Структура("Владелец, Вид", ОформлениеСтроки.ДанныеСтроки.Ссылка, "Доп. соглашение"));
				Если СтрокиДанные.Количество() > 0 Тогда
					ОформлениеСтроки.Ячейки.ЕстьДопСоглашения.УстановитьФлажок(Истина);
				КонецЕсли;	
			КонецЕсли;
			Если КолонкиСписка.ЕстьПриложенияКДоговорам.Видимость Тогда
				СтрокиДанные = ТабДанные.НайтиСтроки(Новый Структура("Владелец, Вид", ОформлениеСтроки.ДанныеСтроки.Ссылка, "Приложение"));
				Если СтрокиДанные.Количество() > 0 Тогда
					ОформлениеСтроки.Ячейки.ЕстьПриложенияКДоговорам.УстановитьФлажок(Истина);
				КонецЕсли;	
			КонецЕсли;
			
			//mika Дата: 2017.10.23 ИП-00017027
			//Была доработана управляемая форма, но заказчик предпочитает использовать обычную.
			Если КолонкиСписка.ЕстьВложенияКДоговорам.Видимость Тогда
				СтрокиДанные = ТабДанные.НайтиСтроки(Новый Структура("Владелец, Вид", ОформлениеСтроки.ДанныеСтроки.Ссылка, "Вложение"));
				Если СтрокиДанные.Количество() > 0 Тогда
					ОформлениеСтроки.Ячейки.ЕстьВложенияКДоговорам.УстановитьФлажок(Истина);
				КонецЕсли;	
			КонецЕсли;
			//mika
					
			//+++17316 koro 28.11.17 Вывод рекомендаций в форме списка.
			Если  ВыводитьРекомендации Тогда
				СтруктураПоиска = Новый Структура("Контрагент", ОформлениеСтроки.ДанныеСтроки.Ссылка);
				ПоискРекомендации = ТаблицаРекомендаций.НайтиСтроки(СтруктураПоиска);	
				Если ПоискРекомендации.Количество() > 0 Тогда
					РезульатПоиска = ПоискРекомендации[0];
					ОформлениеСтроки.Ячейки.Рекомендация1Cont.УстановитьТекст(РезульатПоиска.Рекомендация1Cont);					
					Если РезульатПоиска.Отрицательная1Cont = Истина Тогда
						ОформлениеСтроки.Ячейки.Рекомендация1Cont.ЦветТекста = WebЦвета.Красный;	
					КонецЕсли;	
					ОформлениеСтроки.Ячейки.РекомендацияУФК.УстановитьТекст(РезульатПоиска.РекомендацияУФК);
					Если РезульатПоиска.ОтрицательнаяУФК = Истина Тогда
						ОформлениеСтроки.Ячейки.РекомендацияУФК.ЦветТекста = WebЦвета.Красный;	
					КонецЕсли;					
				КонецЕсли;	
			КонецЕсли;	
			//---17316 koro 28.11.17
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСписокДокументовБух(мКонтрагент)
	
	МассивСсылок = КритерииОтбора.ДокументыБухПоКонтрагенту.Найти(мКонтрагент);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(МассивСсылок);
	
	Возврат СписокЗначений;
	
КонецФункции

Процедура ДействияФормыПоказатьЖурналДокументовБух(Кнопка)
	
	ТекДанные = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	//
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентаБух.ПолучитьФорму("ФормаСписка");
    ФормаЖурнала.Заголовок = СокрЛП(ТекДанные.Наименование);
	
	ЭлементОтбора = ФормаЖурнала.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  	= Новый ПолеКомпоновкиДанных("Ссылка");   
    ЭлементОтбора.ВидСравнения   	= ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементОтбора.Использование  	= Истина;
    ЭлементОтбора.ПравоеЗначение 	= ПолучитьСписокДокументовБух(ТекДанные.Ссылка);
    ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ФормаЖурнала.Открыть();
	
КонецПроцедуры

//+++АК GEYV 05.06.2015
Процедура ДействияФормыОтчет(Кнопка)
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
			
			Предупреждение("Нельзя формировать отчет по группе!");
			Возврат;
			
		Иначе
			
			Отчет = Отчеты.ОтчетПоДаннымКонтрагента.Создать();
			Отчет.КонтрагентОтчета = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
			Отчет.ДатаОтчета = ТекущаяДата();
			
			ФормаОтчета = Отчет.ПолучитьФорму();
			
			Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
			
			ФормаОтчета.Открыть();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//---АК

//+++АК VERN 2016.07.26 12873 
Процедура ДействияФормыПросмотрНаКарте(Кнопка)
	
	Если элементыформы.ДействияФормы.Кнопки.ПросмотрНаКарте.пометка тогда
		//сбросим отбор
		элементыформы.ДействияФормы.Кнопки.ПросмотрНаКарте.пометка=Ложь;
		
		СправочникСписок.Отбор.Ссылка.Использование=Ложь;
		ЭлементыФормы.СправочникСписок.ИерархическийПросмотр=Истина;

	иначе
		ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
		ПараметрыПодбора.Вставить("Режим",					"РежимВыборКонтрагента");
		
		ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма, Ложь);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если (ТипЗнч(ИсточникВыбора)=Тип("УправляемаяФорма")) и (ИсточникВыбора.ИмяФормы="Обработка.АК_ОтображениеНаКарте.Форма.Форма") тогда
		
		ЗначениеОтбора=ВыбранноеЗначение.СсылкаНаОбъект;
		
		СправочникСписок.Отбор.Ссылка.Использование=Истина;
		СправочникСписок.Отбор.Ссылка.Значение=ЗначениеОтбора;
		СправочникСписок.Отбор.Ссылка.ВидСравнения=ВидСравнения.Равно;
		ЭлементыФормы.СправочникСписок.ИерархическийПросмотр=Ложь;
		
		элементыформы.ДействияФормы.Кнопки.ПросмотрНаКарте.пометка=Истина;
		
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОтключитьОтборПоКлиенту(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ВАрхиве = Истина Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(160, 160, 160);
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,,,, Истина);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДействияФормыПоместитьКонтрагентаВАрхив(Кнопка)
	
	ТекСтрока = ЭлементыФормы.СправочникСписок.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ЭтоГруппа Или ТекСтрока.ВАрхиве Тогда
			Возврат
		КонецЕсли;
		Справочники.Контрагенты.ПоместитьКонтрагентаВАрхив(ТекСтрока);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДействияФормыВосстановитьКонтрагентаИзАрхива(Кнопка)
	
	ТекСтрока = ЭлементыФормы.СправочникСписок.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ЭтоГруппа Или НЕ ТекСтрока.ВАрхиве Тогда
			Возврат
		КонецЕсли;
		Справочники.Контрагенты.ВосстановитьИзАрхива(ТекСтрока);
	КонецЕсли;
	
КонецПроцедуры

//---АК VERN 

//+++АК LAGP 2017.11.18 ИП-00017285 Настройка ширины дерева справочника
Процедура НастроитьШиринуСписка(Кнопка)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьНовуюШирину", ЭтаФорма);	
	ПоказатьВводЧисла(Оповещение, ЭлементыФормы.СправочникДерево.Ширина, "Новая ширина дерева", 3,);
	
КонецПроцедуры

//+++АК LAGP 2017.11.18 ИП-00017285 Настройка ширины дерева справочника
Процедура УстановитьНовуюШирину(Число, Параметры) Экспорт
	
    Если НЕ Число = Неопределено И НЕ ЭлементыФормы.СправочникДерево.Ширина = Число Тогда
        ЭлементыФормы.СправочникДерево.Ширина = Число;
		ХранилищеОбщихНастроек.Сохранить("ШиринаДереваСправочникаКонтрагенты", , Число); 	
	КонецЕсли;
	
КонецПроцедуры

//17316 koro 28.11.17
Функция ПолучитьТаблицуРекомендаций(МассивКонтрагенты)
	
	Если НЕ РольДоступна("Финансист") И НЕ РольДоступна("ФинансовыйДиректор") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Рекомендация КАК Рекомендация1Cont,
		|	NULL КАК РекомендацияУФК,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Рекомендация.Отрицательная КАК Отрицательная1Cont,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
		|	NULL КАК ОтрицательнаяУФК
		|ПОМЕСТИТЬ втРекомендации
		|ИЗ
		|	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(
		|			,
		|			Контрагент В (&МассивКонтрагентов)
		|				И ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.Сведения1Cont), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.РекомендацияВВ,
		|	NULL,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.РекомендацияВВ.Отрицательная
		|ИЗ
		|	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(
		|			,
		|			Контрагент В (&МассивКонтрагентов)
		|				И ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияУФК), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втРекомендации.Рекомендация1Cont) КАК Рекомендация1Cont,
		|	МАКСИМУМ(втРекомендации.РекомендацияУФК) КАК РекомендацияУФК,
		|	втРекомендации.Контрагент,
		|	МАКСИМУМ(втРекомендации.Отрицательная1Cont) КАК Отрицательная1Cont,
		|	МАКСИМУМ(втРекомендации.ОтрицательнаяУФК) КАК ОтрицательнаяУФК
		|ИЗ
		|	втРекомендации КАК втРекомендации
		|
		|СГРУППИРОВАТЬ ПО
		|	втРекомендации.Контрагент";
	
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции	