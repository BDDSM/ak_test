Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;
Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

Перем мЭтоНовый;


Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;
	
КонецПроцедуры

// Процедура Обработчик нажатия на кнопку КнопкаГенерацииКПП
Процедура КнопкаГенерацииКППНажатие(Элемент)
	
	ОбщегоНазначения.ЗаполнитьКППпоИНН(ИНН, КПП);
	
КонецПроцедуры

Процедура ВходитВХолдингПриИзменении(Элемент)
	
	Если Элемент.Значение И ГоловнойКонтрагент = Ссылка Тогда
		ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры

Процедура ВидимостьГоловногоКонтрагента()
	
	ЭлементыФормы.ГоловнойКонтрагент.Видимость        = ВходитВХолдинг;
	ЭлементыФормы.НадписьГоловнойКонтрагент.Видимость = ВходитВХолдинг;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(мКнопкаРедактироватьКИВДиалоге);
	
	ВидимостьГоловногоКонтрагента();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Действия);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия,ЭлементыФормы.Код);
	
	Если (НЕ ЭтоНовый() И (ГоловнойКонтрагент = Ссылка ИЛИ ГоловнойКонтрагент.Пустая())) ИЛИ ЭтоНовый() Тогда
		ВходитВХолдинг = Ложь;
	Иначе
		ВходитВХолдинг = Истина;
	КонецЕсли;
	
	Если ЭтоНовый()
		И НЕ ПараметрОбъектКопирования = Неопределено Тогда
		ИД = "";
		ИНН = "";
		КПП = "";
		
		ОсновнойМенеджерПокупателя = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Код);
КонецПроцедуры


// Обработчик события НачалоВыбораИзСписка для ОКОПФ.
//
Процедура ОКОПФНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Формирование списка выбора.
	
	Список = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторОКОПФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОКОПФ КАК КлассификаторОКОПФ
	|
	|ГДЕ
	|	КлассификаторОКОПФ.ПометкаУдаления = ЛОЖЬ И
	|	КлассификаторОКОПФ.БыстрыйВыбор = ИСТИНА";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРезультата из Результат Цикл
		Список.Добавить(СтрокаРезультата.Ссылка);
	КонецЦикла;
	
	// Выбор из списка и обработка выбора.
	
	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.ОКОПФ);
	
	Если РезультатВыбора <> Неопределено Тогда
		ОКОПФ = РезультатВыбора.Значение;
		СформироватьНаименованиеПолноеАвтоматически();
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()
	
	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		Если НЕ ЗначениеЗаполнено(ОКОПФ) Тогда
			НаименованиеПолное = Наименование;
		Иначе
			НаименованиеПолное = ПолучитьПолноеНаименованиеСОКОПФ();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Функция возвращает полное наименование контрагента как ОКОПФ и Наименование
//
Функция ПолучитьПолноеНаименованиеСОКОПФ()
	
	Если Лев(Наименование,1) = """" Тогда
		КовычкаОткрывающая = "";
	Иначе
		КовычкаОткрывающая = """";
	КонецЕсли;
	
	Если Прав(Наименование,1) = """" Тогда
		КовычкаЗакрывающая = "";
	Иначе
		КовычкаЗакрывающая = """";
	КонецЕсли;
	
	Возврат СокрЛП(ОКОПФ)+" "+КовычкаОткрывающая+Наименование+КовычкаЗакрывающая;
КонецФункции

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()
	
	Если ПустаяСтрока(НаименованиеПолное) 
		ИЛИ НаименованиеПолное = Наименование
		ИЛИ НаименованиеПолное = ПолучитьПолноеНаименованиеСОКОПФ() Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	Если (НЕ Ссылка.Пустая() И ГоловнойКонтрагент = Ссылка) ИЛИ Ссылка.Пустая() Тогда
		ВходитВХолдинг = Ложь;
	Иначе
		ВходитВХолдинг = Истина;
	КонецЕсли;
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Формирование списка выбора.
	
	Список = Новый СписокЗначений();
	
	Список.Добавить(Наименование);
	
	Если ЗначениеЗаполнено(ОКОПФ) Тогда
		Список.Добавить(ПолучитьПолноеНаименованиеСОКОПФ());
	КонецЕсли;
	
	// Выбор из списка и обработка выбора.
	
	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);
	
	Если РезультатВыбора <> Неопределено Тогда
		
		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтрагента.СделатьОсновным.
//
Процедура КоманднаяПанельКонтактныеЛицаКонтрагентаСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеКонтактноеЛицо = ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного контактного лица.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица()
	
	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельКонтактныеЛицаКонтрагента.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельКонтактныеЛицаКонтрагента.Кнопки.СделатьОсновным.Доступность = НЕ (ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка = ОсновноеКонтактноеЛицо);
	КонецЕсли; 
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.ДоступностьОбъекта = Ложь;
	ОбработкаРедактирования.РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, , ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	Если Не Отказ Тогда
		КонтактнаяИнформацияПриАктивизацииСтроки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	УправлениеКонтактнойИнформацией.СкопироватьАдресКонтактнойИнформации(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, НаборКонтактнойИнформации);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	Если Отказ Тогда
		КонтактнаяИнформацияПриАктивизацииСтроки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
	ОбновитьТелефоныКонтактногоЛица();
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ОтменаРедактирования И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.КонтактноеЛицо) Тогда
		Предупреждение("Контактное лицо должно быть обязательно заполнено");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КонтактноеЛицо = ОсновноеКонтактноеЛицо Тогда
		ОтветНаВопрос = Вопрос("Данное контактное лицо является основным. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Отказ = (ОтветНаВопрос <> КодВозвратаДиалога.Да);
		Если НЕ Отказ Тогда
			ОсновноеКонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
// Обработчик события ПриВыводеСтроки элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) И ЗначениеЗаполнено(ДанныеСтроки.Ссылка) И ДанныеСтроки.Ссылка = ОсновноеКонтактноеЛицо Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если КонтактныеЛицаКонтрагента.Количество() = 1 И НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) И ЗначениеЗаполнено(КонтактныеЛицаКонтрагента[0].КонтактноеЛицо) Тогда
		
		ОтветНаВопрос = Вопрос("Установить текущее контактное лицо основным ?", РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ОсновноеКонтактноеЛицо = КонтактныеЛицаКонтрагента[0].КонтактноеЛицо;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоМенеджераПокупателя();
	
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного менеджера покупателя.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоМенеджераПокупателя()
	
	Если ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельМенеджерыПокупателя.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельМенеджерыПокупателя.Кнопки.СделатьОсновным.Доступность = (НЕ (ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные.МенеджерПокупателя = ОсновнойМенеджерПокупателя) И ЗначениеЗаполнено(ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные.МенеджерПокупателя));
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИНН1.
//
Процедура ИНН1ПриИзменении(Элемент)
	
	ПроверитьИНН();
	ОбщегоНазначения.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИНН.
//
Процедура ИННПриИзменении(Элемент)
	ПроверитьИНН();
КонецПроцедуры

// Процедура контолирует длину ИНН и выводит сообщение.
//
Процедура ПроверитьИНН()
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаИНН       = СтрДлина(ИНН);
	ТекстСообщения = "";
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ ДлинаИНН = 12 Тогда
			ТекстСообщения = """ИНН"" физического лица 12 символов!";
		КонецЕсли;
	Иначе
		Если НЕ ДлинаИНН = 10 Тогда
			ТекстСообщения = """ИНН"" юридического лица 10 символов!";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Длина ""ИНН"" не соответствует требованиям: " + ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТелефоныКонтактногоЛица()
	
	СтрокаТелефонов = "";
	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ
		|
		|";
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Объект", ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаТелефонов) Тогда
		СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	КонецЕсли;
	
	ЭлементыФормы.ТелефоныКонтактногоЛица.Заголовок = "Телефоны: " + СтрокаТелефонов;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.СделатьОсновным.
//
Процедура КоманднаяПанельБанковскиеСчетаСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОсновнойБанковскийСчет = ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка Тогда
		ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		ОсновнойБанковскийСчет = ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного банковского счета.
//
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета()
	
	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Пометка     = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Пометка     = ЭлементыФормы.БанковскиеСчета.ТекущаяСтрока.Ссылка = ОсновнойБанковскийСчет;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки <> Неопределено Тогда
		СсылкаСтроки = ДанныеСтроки.Ссылка;
	Иначе
		СсылкаСтроки = Неопределено;
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено И НЕ СсылкаСтроки.Пустая() И ЭтотОбъект.ОсновнойБанковскийСчет = СсылкаСтроки Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ПроверитьИНН();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++ak ziga ИП-00015987.01 20171120
	Если Не ЭтоНовый() Тогда
		Аренда=ЯвляетсяАрендодателем;	
		//НаименованиеДопПрава="Полный доступ к договорам аренды";	
		МассивПраваАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
		ПравоАренда=МассивПраваАренда[0];
		//НаименованиеДопПрава="Полный доступ к договорам, кроме аренды";	
		МассивПраваНеАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамКромеАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
		ПравоНеАренда=МассивПраваНеАренда[0];
				
		//+++АК LAGP 2017.12.04 ИП-00017389 Открываем всем пользователям доступ до части контактной информации
		Если не РольДоступна("ПолныеПрава") И Не РольДоступна("УчетДоговоров") Тогда
			Если Аренда Тогда
				Если Не ПравоАренда Тогда	
					ЗакрытьДоступностьФормы();
					Сообщить("Нет прав на изменение контрагентов с договором типа Аренда");				
				КонецЕсли;
			Иначе
				Если не ПравоНеАренда Тогда
					ЗакрытьДоступностьФормы();
					Сообщить("Нет прав на изменение контрагентов с договором типа не Аренда");
				КонецЕсли;
			КонецЕсли;
			
			Если Не РольДоступна("УчетДоговоров") Тогда				
				Сообщить("Нет доп прав на изменение контрагентов");
			КонецЕсли;
		КонецЕсли;
		//---LAGP
		
	//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо	
	ФизЛицо = Справочники.Контрагенты.ОпределитьФизЛицоКонтрагента(ЭтотОбъект.Контрагент);
	Если ТипЗнч(ФизЛицо) = Тип("Строка") Тогда
		ЭлементыФормы.НадписьФизЛицо.Заголовок 	= ФизЛицо;
		ЭлементыФормы.НадписьФизЛицо.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(ФизЛицо) Тогда
		ЭлементыФормы.НадписьФизЛицо.Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "Наименование");
		ЭлементыФормы.НадписьФизЛицо.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
	КонецЕсли;	
	//---АК LAGP
	
	КонецЕсли;
	
	
	//---ak ziga ИП-00015987 2017111201
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
	КонтактныеЛицаКонтрагента.Отбор.Владелец.Значение      = Ссылка;
	КонтактныеЛицаКонтрагента.Отбор.Владелец.Использование = Истина;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	
	Если НЕ ВходитВХолдинг Тогда
		Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
			ГоловнойКонтрагент = Ссылка;
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не выбран головной контрагент.",, "Элемент не записан.");
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Свойства.ОбъектОтбораЗначений   = Ссылка;
	Свойства.ОбъектОтбораНазначений = Ссылка;
	Если Свойства.ЗначенияСвойствМодифицированы() Тогда
		Свойства.ЗаписатьЗначенияСвойств();
		ОбновитьСвойства();
	КонецЕсли;
	
	Категории.ОбъектОтбораКатегорий = Ссылка;
	Если Категории.ЗначенияКатегорийМодифицированы() Тогда
		Категории.ЗаписатьКатегорииОбъекта();	
		ОбновитьКатегории();
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет информацию в таблице категорий объекта.
//
Процедура ОбновитьКатегории()
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Категории.ОбъектОтбораКатегорий = Ссылка;
	
	Категории.ПрочитатьЗаполнитьКатегорииОбъекта();
	
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
Процедура ОбновитьСвойства()
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	
	Свойства.ОбъектОтбораЗначений   = Ссылка;
	Свойства.ОбъектОтбораНазначений = Ссылка;
	
	Свойства.ПрочитатьЗаполнитьСвойстваИЗначения();
	
КонецПроцедуры

Процедура ДействияФормыФайлы(Кнопка)
	
	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыФайлы()

Процедура ДействияФормыКарточкаСубконто(Кнопка)
	Отчет 					= Отчеты.КарточкаСубконтоФинансовый.Создать();
	НоваяСтрока 			= Отчет.Субконто.Добавить();
	НоваяСтрока.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты;
	
	ПутьКДанным = "Субконто"+НоваяСтрока.НомерСтроки;;
	
	Отчет.ПерезаполнитьНачальныеНастройки();
	
	ПолеОтбора = Отчет.ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
	
	ПолеОтбора.Использование	=Истина;
	ПолеОтбора.ВидСравнения 	= ВидСравнения.Равно;
	ПолеОтбора.Значение 		= ЭтотОбъект.Ссылка;
	
	Форма = Отчет.ПолучитьФорму("Форма");
	Форма.ОбновитьОтчет();
	Форма.Открыть();
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = Ссылка;
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
КонецПроцедуры

Процедура КоманднаяПанельДоговорыСделатьОсновным(Кнопка)
	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОсновнойДоговорКонтрагента = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка Тогда
		ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		ОсновнойДоговорКонтрагента = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();
КонецПроцедуры

Процедура ПроверитьПометкуКнопкиУстановкиОсновногоДоговора()
	
	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = ЭлементыФормы.Договоры.ТекущаяСтрока.Ссылка = ОсновнойДоговорКонтрагента;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДоговорыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки <> Неопределено Тогда
		СсылкаСтроки = ДанныеСтроки.Ссылка;
	Иначе
		СсылкаСтроки = Неопределено;
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено И НЕ СсылкаСтроки.Пустая() И ЭтотОбъект.ОсновнойДоговорКонтрагента = СсылкаСтроки Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Статус.Значение = ОбщиеПроцедуры.ПолучитьСтатусДоговора(ТекущаяДата(),ДанныеСтроки.Ссылка.ОбъектАренды);
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если (ЭтотОбъект.ЯвляетсяПокупателем
		ИЛИ ЭтотОбъект.ЯвляетсяПоставщиком)
		И НЕ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010"
		И НЕ ЗначениеЗаполнено(ЭтотОбъект.ОсновнойМенеджерПокупателя) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить ответственного менеджера!");
		Отказ = Истина;
	КонецЕсли;
	
	//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
										
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

//+++АК LAGP 2017.12.04 ИП-00017389 Открываем всем пользователям доступ до части контактной информации
Процедура ЗакрытьДоступностьФормы()
	Для каждого ЭлементФормы Из ЭтаФорма.ЭлементыФормы Цикл
		ЭлементФормы.Доступность = Ложь;	
	КонецЦикла;	
	ЭтаФорма.ЭлементыФормы.Договоры.ТолькоПросмотр				 = Истина;
	ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.Доступность		 = Истина;
	ЭтаФорма.ЭлементыФормы.Панель1.Доступность					 = Истина;
	ЭтаФорма.ЭлементыФормы.ДействияФормы.Доступность	 		 = Истина;
	ЭтаФорма.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность 	   	= Истина;
	ЭтаФорма.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить.Доступность  = Истина;	
КонецПроцедуры	

//+++АК LAGP 2018.10.02 ИП-00018521.01
Процедура НадписьФизЛицоНажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

мЖирныйШрифт = Новый Шрифт(,, Истина);
мОбычныйШрифт = Новый Шрифт();

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;
