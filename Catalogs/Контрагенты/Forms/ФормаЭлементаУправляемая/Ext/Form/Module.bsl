Перем НеПерезаполнятьКИ;
//+++АК VERN 2016.07.26 12873 
&НаКлиенте
Перем ОткрытаКарта;
//---АК VERN 

//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
&НаКлиенте
Перем НеобходимоЗакрытьФорму;
&НаКлиенте
Перем ФормаСозданияКонтрагентаОткрыта;
//---АК LAGP

&НаСервереБезКонтекста
// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//	Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(мТип)
	
	Если мТип = Перечисления.ТипыКонтактнойИнформации.Адрес
			ИЛИ мТип = Перечисления.ТипыКонтактнойИнформации.Телефон
			ИЛИ мТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
			ИЛИ мТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает номер по типу контактной информации.
//
// Параметры:
//	Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Число:
// 		1 - Адрес
// 		2 - Телефон
//		0 - Все остальные типы
//
Функция ПоТипуКонтактнойИнформацииПолучитьНомер(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 1;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает список значений. Преобразует строку полей в список значений.
//
// Параметры:
//	СтрокаПолей - Строка - строка полей.
//
// Возвращаемое значение - Список значений - список значений полей.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Итерация = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		ПолученнаяСтрока = СтрПолучитьСтроку(СтрокаПолей, Итерация);
		Если Лев(ПолученнаяСтрока, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(ПолученнаяСтрока, 2);
			КонецЕсли;
		Иначе
			ПозицияСимвола = Найти(ПолученнаяСтрока, "=");
			Если ПозицияСимвола <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(ПолученнаяСтрока, ПозицияСимвола + 1), Лев(ПолученнаяСтрока, ПозицияСимвола - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТелефоныКонтактногоЛицаСервер(мСсылка, СтрокаТелефонов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", мСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТелефоныКонтактногоЛица()

	ТекДанные = Элементы.КонтактныеЛицаКонтрагента.ТекущиеДанные;
	
	СтрокаТелефонов = "";
	Если ТекДанные <> Неопределено
			И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
	    ЗаполнитьТелефоныКонтактногоЛицаСервер(ТекДанные.Ссылка, СтрокаТелефонов)
		//Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("Объект", ТекДанные.Ссылка);
		//
		//Запрос.Текст =
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	КонтактнаяИнформация.Представление
		//|ИЗ
		//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		//|ГДЕ
		//|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		//|	И КонтактнаяИнформация.Объект = &Объект
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ";
		//
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
		//КонецЦикла;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаТелефонов) Тогда
		СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	КонецЕсли;
	
	Элементы.ТелефоныКонтактногоЛица.Заголовок = "Телефоны: " + СтрокаТелефонов;

КонецПроцедуры

Процедура ДобавитьКонтактнуюИнформациюНаФормуСервер()
	
	МассивРеквизитов = Новый Массив;
	
	// Создадим таблицу значений
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания		, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита"	, Новый ОписаниеТипов("Строка")										, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей"	, Новый ОписаниеТипов("СписокЗначений")								, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Тип"				, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Вид"				, Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации")	, ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипНомер"		, Новый ОписаниеТипов("Число")										, ИмяОписания));
 	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТолькоРоссийский", Новый ОписаниеТипов("Булево")										, ИмяОписания));

	
	// Получим список видов КИ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийКонтрагент", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	               |	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	               |	ВидыКонтактнойИнформации.Тип КАК Тип,
	               |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления,
	               |	ЕСТЬNULL(ВТТекущаяКИ.Представление, """") КАК Представление,
	               |	ИСТИНА КАК Использовать,
	               |	ВЫБОР
	               |		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |			ТОГДА 1
	               |		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	               |			ТОГДА 2
	               |		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
	               |			ТОГДА 3
	               |		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |			ТОГДА 4
	               |		ИНАЧЕ 5
	               |	КОНЕЦ КАК ПорядокСортировки
	               |ИЗ
	               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ВТТекущаяКИ
	               |		ПО (ВТТекущаяКИ.Тип = ВидыКонтактнойИнформации.Тип)
	               |			И (ВТТекущаяКИ.Вид = ВидыКонтактнойИнформации.Ссылка)
	               |			И (ВТТекущаяКИ.Объект = &ТекущийКонтрагент)
	               |ГДЕ
	               |	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.Контрагенты)
	               |	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПометкаУдаления,
	               |	ПорядокСортировки,
	               |	ВидыКонтактнойИнформации.Наименование
	               |";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	
	// Добавим нужные реквизиты
	Номер = 0;
	СоответствиеВидаКИИмениРеквизита = Новый Соответствие;
	Для Каждого СтрокаКИ Из ТаблицаЗапроса Цикл
		
		Если СтрокаКИ.ПометкаУдаления Тогда
			СтрокаКИ.Использовать = Ложь;
			Продолжить;
		КонецЕсли;
		
		Номер = Номер + 1;
		ИмяРеквизита = "КонтактнаяИнформацияПоле" + Номер;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"), , СтрокаКИ.Наименование, Истина));
		
		СоответствиеВидаКИИмениРеквизита.Вставить(СтрокаКИ.Вид, ИмяРеквизита);
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	
	//+++ AK suvv 25.04.2018 ИП-00018355
	МассивПраваАренда = УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ПравоАренда = МассивПраваАренда[0];
	//--- AK suvv 
	
	// Создадим элементы на форме и заполним значения реквизитов
	Родитель = Элементы.ГруппаКонтактнаяИнформация;
	Для Каждого СтрокаКИ Из ТаблицаЗапроса Цикл
		
		Если НЕ СтрокаКИ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		мВид = СтрокаКИ.Вид;
		ИмяРеквизита = СоответствиеВидаКИИмениРеквизита.Получить(мВид);
		Элемент = Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"), Родитель, Элементы.КонтактныеЛицаКонтрагента);
		Элемент.Вид 				= ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным 		= ИмяРеквизита;
		Элемент.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Верх;
		
		//+++АК LAGP 2017.12.04 ИП-00017389 Открываем всем пользователям доступ до части контактной информации
		СписокОбщейКИ = Новый СписокЗначений;
		СписокОбщейКИ.Добавить("E-mail для интерфейса поставщика");
		СписокОбщейКИ.Добавить("Адрес электронной почты контрагента для обмена электронными документами");
		СписокОбщейКИ.Добавить("Телефон контрагента");
				
		Если СписокОбщейКИ.НайтиПоЗначению(мВид.Наименование) = Неопределено И НЕ РольДоступна("ПолныеПрава") И НЕ ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСправка.Доступность Тогда
			Элемент.ТолькоПросмотр = Истина;	
		КонецЕсли;	
		//---АК LAGP
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота 				= 5;
			Элемент.МногострочныйРежим 	= Истина;
		КонецЕсли;
		
		Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаКИ.Тип) Тогда
			Элемент.КнопкаВыбора = Истина;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
		КонецЕсли;
		
		//+++ AK suvv 25.04.2018 ИП-00018355
		Если СтрокаКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресСкладаКонтрагента") или 
			 СтрокаКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ИнтернетСайтКонтрагента") Тогда
			 Элемент.КнопкаОчистки = Истина; 
			 Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
			 //+++АК LAGP 2018.05.16 ИП-00018489 "Создание и изменение данных в группе справочников контрагенты с кодом: Т00000461, Т00002073"
			 Если Объект.Родитель.Код = "Т00000461" ИЛИ Объект.Родитель.Код = "Т00002073" Тогда
			 	ЭтоИсключение = Истина;
			 Иначе
				ЭтоИсключение = Ложь;
			 КонецЕсли;	
			 
			 //Если ПравоАренда Тогда
			 Если ПравоАренда ИЛИ ЭтоИсключение Тогда
			 //---АК LAGP
			 	 Элемент.ТолькоПросмотр = Ложь;
				 Элемент.Доступность = Истина;
			 Иначе
				 Элемент.Доступность = Ложь;
			 КонецЕсли;
		 КонецЕсли;
		//--- AK suvv
		
		НоваяСтрока = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизита     = ИмяРеквизита;
		НоваяСтрока.ТолькоРоссийский = Истина;
		НоваяСтрока.Вид              = мВид;
		НоваяСтрока.Тип              = СтрокаКИ.Тип;
		НоваяСтрока.ТипНомер         = ПоТипуКонтактнойИнформацииПолучитьНомер(СтрокаКИ.Тип);
		
		Если НЕ СтрокаКИ.Представление = "" Тогда	
			ЭтаФорма[ИмяРеквизита] = СтрокаКИ.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьКИПриЗаписиНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.Ссылка.Пустая() ИЛИ Не КонтактнаяИНформацияДобавленаНаФорму Тогда
		Возврат;
	КонецЕсли;
	
	////+++АК susk
	//Если Объект.Ссылка.Пустая() Тогда
	//	Возврат;
	//КонецЕсли;
	////---АК susk
	
	мРегистр = РегистрыСведений.КонтактнаяИнформация;
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Ссылка
	|	И КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации";
	
	ТаблицаКИ = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура("Тип, Вид");
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ТекТип = СтрокаТаблицы.Тип;
		ТекВид = СтрокаТаблицы.Вид;
		
		мПредставление = ЭтаФорма[СтрокаТаблицы.ИмяРеквизита];
		//+++АК GEYV 02.06.2015
		Если НеПерезаполнятьКИ <> Неопределено И НеПерезаполнятьКИ И ПустаяСтрока(мПредставление) Тогда
			
			Продолжить;
			
		КонецЕсли;
		//---АК
		Если ПустаяСтрока(мПредставление) Тогда
			СтруктураПоиска.Тип = ТекТип;
			СтруктураПоиска.Вид = ТекВид;
			СтрокиКИ = ТаблицаКИ.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКИ.Количество() > 0 Тогда
				НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
				НаборЗаписей.Отбор.Тип.Установить(ТекТип);
				НаборЗаписей.Отбор.Вид.Установить(ТекВид);
				НаборЗаписей.Прочитать();
				
				НаборЗаписей.Очистить();
				Попытка
					НаборЗаписей.Записать();
				Исключение
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""Контактная информация""";
					СообщениеПользователю.Сообщить();
				КонецПопытки;
		    КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Объект 			= Объект.Ссылка;
		МенеджерЗаписи.Объект 			= ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Тип 				= ТекТип;
		МенеджерЗаписи.Вид 				= ТекВид;
		
		//+++АК GEYV 02.06.2015
		Если НеПерезаполнятьКИ <> Неопределено И НеПерезаполнятьКИ Тогда
			
			МенеджерЗаписи.Прочитать();
			
			Если ЗначениеЗаполнено(МенеджерЗаписи.Представление) Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			МенеджерЗаписи.Объект 			= ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Тип 				= ТекТип;
			МенеджерЗаписи.Вид 				= ТекВид;
			
		КонецЕсли;
		//---АК
		
		МенеджерЗаписи.Представление 	= мПредставление;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить("Не удалось добавить запись в регистр ""Контактная информация""" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация"

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//	ЗначенияПолей - Список значений - список значений полей.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "РЕГИОН" Тогда
			СтрокаТабличнойЧасти.Регион = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//  СообщениеОбОшибке - Строка - сообщение об ошибке.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, СообщениеОбОшибке = "")
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//	ЗначенияПолей - Список значений - список значений полей.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "КОДСТРАНЫ" Тогда
			КодСтраны = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "КОДГОРОДА" Тогда
			КодГорода = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "НОМЕРТЕЛЕФОНА" Тогда
			НомерТелефона = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(КодСтраны, 1) = "+" Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(КодСтраны + КодГорода + НомерТелефона);
		
КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//	НомерТелефона - Строка - номер телефона.
//
// Возвращаемое значение - Строка - номер телефона без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Возврат НомерТелефона;

КонецФункции

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для веб-страницы.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти)

	АдресВебСтраницы = СтрокаТабличнойЧасти.Представление;

	// Вырежем имя протокола
	ПозицияСимволов = Найти(АдресВебСтраницы, "://");
	Если ПозицияСимволов <> 0 Тогда
		ЛевЧасть = НРег(Лев(АдресВебСтраницы, ПозицияСимволов - 1));
		Если (ЛевЧасть = "http") ИЛИ (ЛевЧасть = "https") Тогда
			АдресВебСтраницы = Сред(АдресВебСтраницы, ПозицияСимволов + 3);
		КонецЕсли;
	КонецЕсли;

	// Вырежем слева www
	Если НРег(Лев(АдресВебСтраницы, 4)) = "www." Тогда
		АдресВебСтраницы = Сред(АдресВебСтраницы, 5);
	КонецЕсли;
	
	ПозицияСимвола = Найти(АдресВебСтраницы, "/");
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = ?(ПозицияСимвола = 0, АдресВебСтраницы, Лев(АдресВебСтраницы, ПозицияСимвола - 1));
	
КонецПроцедуры

Процедура ОбновитьНадписьЗадолженность()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Задолженность = "";
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками); 		// 60
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателями); 					// 62
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками); // 76.1
	
	МассивВидыСубконто = Новый Массив;
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	
	
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидыСубконто);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("Контрагент"	, Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФинансовыйОстатки.СуммаОстаток КАК Остаток
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(, Счет В ИЕРАРХИИ (&МассивСчетов), &ВидыСубконто, Субконто1 = &Контрагент) КАК ФинансовыйОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Остаток > 0 Тогда
			Задолженность 	= "Нам должны " + Формат(Выборка.Остаток, "ЧГ=");
			Элементы.Задолженность.ЦветТекста 	= WebЦвета.Красный;
		ИначеЕсли Выборка.Остаток < 0 Тогда
			Задолженность 	= "Мы должны " + Формат(-Выборка.Остаток, "ЧГ=");
			Элементы.Задолженность.ЦветТекста 	= WebЦвета.Черный;
		Иначе
			Задолженность = "";
		КонецЕсли;
	Иначе
		Задолженность = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++AK BATG 2018.12.09
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Открытие формы Справочник.Контрагенты.ФормаЭлементаУправляемая");
	//---AK BATG

	//+++ak ziga ИП-00015987.01 20171120
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДопПраваПроверить();
		
	//+++АК LAGP ИП-00017422
	Иначе
		Объект.Родитель = Справочники.Контрагенты.ПустаяСсылка();	
		//+++ AK suvv 19.04.2018 ИП-00018355
		 Объект.РешениеПоКонтрагенту = "начать сотрудничество, заключить договор";
		 //--- AK suvv
	//---АК LAGP	
		
	КонецЕсли;
	//---ak ziga ИП-00015987.01 20171120
	
	//koro  17023
	ОбновитьРекомендации();
	
	//koro  17316 20171203
	ОбновитьПрикрепленныеФайлы();
	
	//ЭтаФорма.КонтактнаяИнформация.Параметры.УстановитьЗначениеПараметра("ТекущийОбъект", Объект.Ссылка);
	//+++АК susk
	//ДобавитьКонтактнуюИнформациюНаФормуСервер();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДобавитьКонтактнуюИнформациюНаФормуСервер();
		КонтактнаяИНформацияДобавленаНаФорму = Истина;
		
		//+++АК luza ИП-00019743
			ЗаполнитьГрузоотправителяСервер();
		//---АК luza
		
		//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02   
		ЗаполнитьРеквизитыИзЗначенийСвойствОбъектов();
		//---АК Susk (Суслин К.В.) 		 
		
	КонецЕсли;
	//---АК susk
	
	//+++АК
	//+++ZEZA ЗаполнитьРолиОтветственных();
	//---АК
	
	УстановитьВидимостьГруппыОГРН();
	
	УстановитьВидимостьЭлементов();
	
	ОбновитьНадписьЗадолженность();
	
	//АК БЕЛН 25.03.2016++
	ТекНаименование=СокрЛП(Объект.Наименование);
	ТекНаименование=СтрЗаменить(ТекНаименование,"""","");
	ТекНаименование=СтрЗаменить(ТекНаименование,"\","");
	ТекНаименование=СтрЗаменить(ТекНаименование,"/","");
	ТекНаименование=СтрЗаменить(ТекНаименование,"|","");
	ТекНаименование=СтрЗаменить(ТекНаименование,":","");
	ТекНаименование=СтрЗаменить(ТекНаименование,"*","");
	ТекНаименование=СтрЗаменить(ТекНаименование,">","");
	ТекНаименование=СтрЗаменить(ТекНаименование,"<","");
	ТекНаименование=СтрЗаменить(ТекНаименование,"?","");
	//АК БЕЛН 25.03.2016--
	
	Элементы.ВидКИ_ДляИнформирования.СписокВыбора.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021"));
	
	//+++АК VERN 2016.07.26 12873 
	Если Объект.КоординатыОпределены тогда
		Элементы.ПросмотрНаКарте.Заголовок="Просмотр на карте";
	КонецЕсли;
	//---АК VERN 
	
	//+++АК PISH 2018.11.06 ИП-00019917.03
	Если НЕ Параметры.Ключ.Пустая() Тогда 		
		ВосстановитьЗначениеОтправкиВЭДОАвтоматически();
	КонецЕсли;	
	//---АК PISH
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьНужныеОтборы()
	
	// контактные лица контрагента (отбор по текущему)
	ЭлементОтбора = ЭтаФорма.КонтактныеЛицаКонтрагента.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	// банковские счета (отбор по текущему контрагенту)
	ЭлементОтбора = ЭтаФорма.БанковскиеСчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	// договоры (отбор по текущему контрагенту)
	ЭлементОтбора = ЭтаФорма.ДоговорыКонтрагентов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	ЭлементОтбора = ЭтаФорма.ОсновныеДоговоры.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	ЭлементОтбора = ЭтаФорма.ДополнительныеСоглашения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ВладелецДоговора");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	ЭлементОтбора = ЭтаФорма.ДополнительныеСоглашения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Вид");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= "Доп. соглашение";
	
	ЭлементОтбора = ЭтаФорма.ПриложенияДоговоров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	ЭлементОтбора = ЭтаФорма.ПриложенияДоговоров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Вид");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= "Приложение";
	
	//++АК TUGA 2016.08.26 №13455
	
	ЭлементОтбора = ЭтаФорма.АК_Лимиты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
	//--АК
	ЭлементОтбора = ЭтаФорма.Автомобили.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Перевозчик");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностью();        
	УстановитьНужныеОтборы();
	
	Если Объект.ГоловнойКонтрагент = Объект.Ссылка
			ИЛИ Объект.ГоловнойКонтрагент.Пустая()
			ИЛИ Объект.Ссылка.Пустая() Тогда
		ВходитВХолдинг = Ложь;
	Иначе
		ВходитВХолдинг = Истина;
	КонецЕсли;

	//ВидимостьГоловногоКонтрагента(); //+++АК LAGP 2017.12.04 ИП-00017389 
	
	ПриАктивизацииДоговора();
	//ВидимостьЭДО(); //+++АК LAGP 2017.12.07 ИП-00017434.01 Отключено тут, перенесено в при создании на сервере                
	
	//+++АК VERN 2016.07.26 12873 
	ОткрытаКарта=Ложь;
	//---АК VERN   
	
	//+++ AK suvv 19.04.2018 ИП-00018355
	Если Не Объект.Ссылка.Пустая() Тогда 
		ДоверенностьПредоставлена = ?(Объект.ПредоставленаДоверенность, Элементы.ДоверенностьПредоставлена.СписокВыбора[0].Значение,  Элементы.ДоверенностьПредоставлена.СписокВыбора[1].Значение);
	КонецЕсли;
	//???ZEZA УстановитьВидимостьГруппыОГРН();
	УстановитьВидимостьГруппыДоверенность(); 
	//--- AK suvv
	
	//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	ПодключитьОбработчикОжидания("ОбновитьОтображениеФизЛица", 0.5, Истина);	
	//---АК LAGP
	
	//+++AK BATG 2018.12.09
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("Открытие формы Справочник.Контрагенты.ФормаЭлементаУправляемая", Объект.Наименование);
	//---AK BATG

КонецПроцедуры
//+++ak ziga ИП-00015987.01 20171120
&НаСервере
Процедура ДопПраваПроверить()
	
	Аренда=Объект.ЯвляетсяАрендодателем;	
	//НаименованиеДопПрава="Полный доступ к договорам аренды";	
	МассивПраваАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ПравоАренда=МассивПраваАренда[0];
	//НаименованиеДопПрава="Полный доступ к договорам, кроме аренды";	
	МассивПраваНеАренда=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамКромеАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ПравоНеАренда=МассивПраваНеАренда[0];
	
	//+++АК LAGP 2017.12.11 ИП-00017434
	МассивДопПравоФункцРолиХолдинг=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактироватьПоля_ФункциональныеРоли_Холдинг_ИНН999,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ДопПравоФункцРолиХолдинг=МассивДопПравоФункцРолиХолдинг[0];  

	Если СтрДлина(Объект.ИНН) > 3 И Лев(Объект.ИНН,3) = "999" И ДопПравоФункцРолиХолдинг Тогда
		Возврат;
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2017.12.04 ИП-00017389 Открываем всем пользователям доступ до части контактной информации
	
	//(Старый код)
	//Если не РольДоступна("ПолныеПрава") Тогда
	//	Если Аренда Тогда
	//		ЭтаФорма.ТолькоПросмотр=Не ПравоАренда;
	//		Если не ПравоАренда Тогда
	//		Сообщить("Нет прав на изменение контрагентов с договором типа Аренда");
	//		КонецЕсли;
	//		//Отказ=Не ПравоАренда;
	//	Иначе
	//		ЭтаФорма.ТолькоПросмотр=Не ПравоНеАренда;
	//		Если не ПравоНеАренда Тогда
	//		Сообщить("Нет прав на изменение контрагентов с договоором типа не Аренда");
	//		КонецЕсли;
	//		//Отказ=Не ПравоНеАренда;
	//	КонецЕсли;
	//	Если Не РольДоступна("УчетДоговоров") Тогда
	//		Если Не ПравоАренда и (Не ПравоНеАренда) Тогда
	//			ЭтаФорма.ТолькоПросмотр=Истина;
	//			Сообщить("Нет доп прав на изменение контрагентов");
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли; (старый код)	
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда 
		Если РольДоступна("УчетДоговоров") Тогда
			Если Аренда Тогда
				Если НЕ ПравоАренда Тогда
					ЗакрытьДоступностьФормы(ДопПравоФункцРолиХолдинг);
					Сообщить("Нет прав на изменение контрагентов с договором типа Аренда");
				Иначе
					ВидимостьГоловногоКонтрагента();				
				КонецЕсли;	
			Иначе
				Если НЕ ПравоНеАренда Тогда
					ЗакрытьДоступностьФормы(ДопПравоФункцРолиХолдинг);
					Сообщить("Нет прав на изменение контрагентов с договором типа не Аренда");
				Иначе
					ВидимостьГоловногоКонтрагента();				
				КонецЕсли;	
			КонецЕсли;
		Иначе
			ЗакрытьДоступностьФормы(ДопПравоФункцРолиХолдинг);
			Сообщить("Нет доп прав на изменение контрагентов");
		КонецЕсли;	
	Иначе
		ВидимостьГоловногоКонтрагента();
		ВидимостьЭДО();
	КонецЕсли;
	//---АК LAGP
	
	//+++ AK suvv 07.05.2018 ИП-00018355 - доступ на просмотр должен быть у всех пользователей
	// ограничение на редактирование файлов реализовано в форме "ФормаСпискаФайловИИзображений" справочника "ХранилищеДополнительнойИнформации" 
	////+++АК LAGP 2018.02.19 ИП-00017905 Доступ к файлам контрагентов
	//МассивДопПравоДоступКФайлам=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ДоступКФайламКонтрагентов,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	//ДопПравоДоступКФайлам=МассивДопПравоДоступКФайлам[0];
	//Если ДопПравоДоступКФайлам ИЛИ РольДоступна("ПолныеПрава") Тогда
	//	ЭтаФорма.Элементы.ПоказатьФайлы.Доступность = Истина;
	//Иначе
	//	ЭтаФорма.Элементы.ПоказатьФайлы.Доступность = Ложь;
	//КонецЕсли;	
	////---АК LAGP
	//--- AK suvv
	
КонецПроцедуры
//----ak ziga ИП-00015987.01 20171120
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.КПП)
			И НЕ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
				ИЛИ НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	//+++АК
	ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанные();
	Если НЕ ВсеОК Тогда
		Отказ = Истина;
	КонецЕсли; 
	//---АК
	
	//+++АК VERN 2016.07.26 12873 
	Если НЕ Объект.КоординатыОпределены тогда
		ВызовОбработкиПросмотрНаКарте("Авто");
	КонецЕсли;
	//---АК VERN	
	
	//+++АК LAGP 2018.10.28 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") И НЕ ЗначениеЗаполнено(Элементы.НадписьФизЛицоКонтрагента.Подсказка) И Объект.ОКОПФ.Пустая() И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Для контрагента - физ.лица, сопоставление со справочником ""Физ.лица"" обязательно!");
		Отказ = Истина;
	КонецЕсли;
	//---АК LAGP
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если Объект.НеРезидент = Ложь Тогда
		Если ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИНН) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено ИНН",,,, Отказ);
			Иначе
				Если СтрДлина(ТекущийОбъект.ИНН) <> 10 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Длина ИНН для юридического лица должна быть 10 символов",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.КПП)
				И ТекущийОбъект.ИНН <> "9999999999" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен КПП",,,, Отказ);
			КонецЕсли;
		ИначеЕсли ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИНН) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено ИНН",,,, Отказ);
			Иначе
				Если СтрДлина(ТекущийОбъект.ИНН) <> 12 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Длина ИНН для физического лица должна быть 12 символов",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийОбъект.ИНН)
				И ТекущийОбъект.ИНН <> "9999999999"
				/////////////////// Для алиментов можно, по просьбе Золотаревой
				И ТекущийОбъект.Родитель.Код<>"Т00002073"
				////////////////////
				И ТекущийОбъект.ИНН <> "999999999999" Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка"	, ТекущийОбъект.Ссылка);
			Запрос.УстановитьПараметр("ИНН"		, ТекущийОбъект.ИНН);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка <> &Ссылка
			|	И Контрагенты.ИНН = &ИНН";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указанный ИНН уже установлен контрагенту: " + Выборка.Ссылка,,,, Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//Если (ТекущийОбъект.ЯвляетсяПокупателем      в ПриЗаписиНаСервере более жёсткая проверка
	//			ИЛИ ТекущийОбъект.ЯвляетсяПоставщиком) 
	//		И НЕ ТекущийОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010"
	//		И НЕ ЗначениеЗаполнено(ТекущийОбъект.ОсновнойМенеджерПокупателя) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить ответственного менеджера!",,,, Отказ);
	//КонецЕсли;
	
	//+++АК LAGP 2017.12.04 ИП-00017336 Проверка на обязательные реквизиты при создании
	Если Объект.Ссылка.Пустая() И НЕ Объект.ЭтоГруппа Тогда
		
		МассивРазрешитьНезаполненные   = УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьСохранятьКАсПустымиОКОПФСтатьяДДСГруппа,Ложь,ПараметрыСеанса.ТекущийПользователь);	
		ПравоРазрешитьНезаполненные    = МассивРазрешитьНезаполненные[0];
		РодительДеятельностьПрекращена = Справочники.Контрагенты.НайтиПоКоду("Т00001488");
		РодительАктивныеКонтрагенты	   = Справочники.Контрагенты.НайтиПоКоду("Т0003340");
		РодительСотрудничествоПриостановлено = Справочники.Контрагенты.НайтиПоКоду("Т0003341");
		ДеятельностьПрекращена		   = Ложь;
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда 
			Если (ТекущийОбъект.Родитель.ПринадлежитЭлементу(РодительДеятельностьПрекращена) 
				ИЛИ ТекущийОбъект.Родитель = РодительДеятельностьПрекращена) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент не должен записываться в группу 'Деятельность прекращена'!",,,, Отказ);
			ИначеЕсли ТекущийОбъект.Родитель = РодительАктивныеКонтрагенты Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент не должен записываться в корень группы 'Активные контрагенты'!",,,, Отказ);
			ИначеЕсли ТекущийОбъект.Родитель = РодительСотрудничествоПриостановлено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент не должен записываться в корень группы 'Сотрудничество приостановлено'!",,,, Отказ);
			КонецЕсли;
		Иначе ЗначениеЗаполнено(ТекущийОбъект.Родитель);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент не должен записываться в корневой каталог!",,,, Отказ);
		КонецЕсли;	
				                                                         
		Если НЕ ПравоРазрешитьНезаполненные Тогда	
			СтрокаНедостающихРеквизитов = "Следующие реквизиты обязательны к заполнению:";
			СоответствиеНедостающихДанных = Новый Соответствие;
			СоответствиеНедостающихДанных.Вставить("СтатьяДвиженияДенежныхСредств");
			СоответствиеНедостающихДанных.Вставить("ОКОПФ");
			СоответствиеНедостающихДанных.Вставить("ОсновнойМенеджерПокупателя");
			СоответствиеНедостающихДанных.Вставить("ОсновнойБухгалтерПокупателя");
			СоответствиеНедостающихДанных.Вставить("Родитель");
		
			Для каждого НедостающийРеквизит из СоответствиеНедостающихДанных Цикл
				НеобходимоЗаполнение = ?(ЗначениеЗаполнено(ТекущийОбъект[НедостающийРеквизит.Ключ]), Ложь, Истина);
				Если НЕ НеобходимоЗаполнение Тогда	
					СоответствиеНедостающихДанных.Удалить(НедостающийРеквизит.Ключ);
				КонецЕсли;	
			КонецЦикла;	
			
			Для каждого НедостающийРеквизит из СоответствиеНедостающихДанных Цикл
				СтрокаНедостающихРеквизитов = СтрокаНедостающихРеквизитов + Символы.ПС + НедостающийРеквизит.Ключ; 	
			КонецЦикла;
			
			Если СоответствиеНедостающихДанных.Количество() > 0 Тогда	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНедостающихРеквизитов,,,, Отказ);	
			КонецЕсли;	
			
		КонецЕсли;
		
		//+++ AK suvv 24.04.2018 ИП-00018355		
		Если Объект.Родитель.Код <> "Т00000461" и Объект.Родитель.Код <> "Т00002073" Тогда  
			Если ДоверенностьПредоставлена = "" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На вкладке ""Доверенности"" информация не заполнена!",,,, Отказ);
			КонецЕсли;
			
			Если Объект.ОКОПФ.Код = "91   "  Тогда 
				Если Объект.СвидетельствоДатаВыдачи = Дата(0001,01,01) или Объект.СвидетельствоСерияНомер = "" Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На вкладке ""Общие"" не заполнены дата выдачи и/или номер ОГРН ИП!",,,, Отказ);
				КонецЕсли;
			ИначеЕсли Объект.ОКОПФ.Код = "97   " Тогда 
				Если Объект.СвидетельствоДатаВыдачи = Дата(0001,01,01) или Объект.СвидетельствоСерияНомер = "" Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На вкладке ""Общие"" не заполнены дата выдачи и/или номер ИНН ФИЗ!",,,, Отказ);
				КонецЕсли;
			ИначеЕсли Объект.ОГРН = "" или Объект.ДатаВыдачиОГРН = Дата(0001,01,01) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На вкладке ""Общие"" не заполнены дата выдачи и/или номер ОГРН!",,,, Отказ);
			КонецЕсли;
		КонецЕсли;
		//--- AK suvv
		
	КонецЕсли;
	//---АК LAGP
	
	//+++ AK suvv 19.04.2018 ИП-00018355
	Если не Объект.ЭтоГруппа Тогда 
		Если ДоверенностьПредоставлена = Истина Тогда 
			ОтборСтрокСПустымФайлом = Новый Структура;
			ОтборСтрокСПустымФайлом.Вставить("Файл", ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
			Если Объект.Доверенности.НайтиСтроки(ОтборСтрокСПустымФайлом).Количество() <> 0 Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На вкладке ""Доверенности"" найдены строки, к которым не приложены сканы доверенностей!",,,, Отказ);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//--- AK suvv
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ ЭтаФорма.ВходитВХолдинг Тогда
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ГоловнойКонтрагент) Тогда
			ТекущийОбъект.ГоловнойКонтрагент = ТекущийОбъект.Ссылка;
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ГоловнойКонтрагент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не выбран головной контрагент.",, "Элемент не записан.");
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;	
	
	Если Объект.ИНН <> "9999999999" И Объект.ИНН <> "999999999999" Тогда
		РеквизитАдресаПочты=неопределено;
		РеквизитПочтовогоАдреса=неопределено;
		РеквизитЮрАдреса=неопределено;
		РеквизитТелефона=неопределено;
		РеквизитПочтыИнтерфейсаПоставщика=неопределено;
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Для каждого стр из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если Стр.Вид=Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами  Тогда
					РеквизитАдресаПочты=Стр.ИмяРеквизита;
				ИначеЕсли Стр.Вид=Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента  Тогда
					РеквизитПочтовогоАдреса=Стр.ИмяРеквизита;	
				ИначеЕсли Стр.Вид=Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента  Тогда
					РеквизитЮрАдреса=Стр.ИмяРеквизита;		
				ИначеЕсли Стр.Вид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента  Тогда
					РеквизитТелефона=Стр.ИмяРеквизита;
				ИначеЕсли Стр.Вид=Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("E-mail для интерфейса поставщика")  Тогда
					РеквизитПочтыИнтерфейсаПоставщика=Стр.ИмяРеквизита;
				//+++ AK suvv 19.04.2018
				ИначеЕсли Стр.Вид=Справочники.ВидыКонтактнойИнформации.АдресСкладаКонтрагента Тогда
					РеквизитАдресаСклада=Стр.ИмяРеквизита;
				ИначеЕсли Стр.Вид=Справочники.ВидыКонтактнойИнформации.ИнтернетСайтКонтрагента Тогда
					РеквизитИнтернетСайта=Стр.ИмяРеквизита;
				//--- AK suvv	
				КонецЕсли;	
			КонецЦикла;	
			
			//+++АК GEYV 05.06.2015
			ПроверятьРеквизиты = Не (((Не ЗначениеЗаполнено(Объект.Ссылка) И ОбщегоНазначения.ПроверитьКонтрагентаНаВхождениеВПапку(Объект.Родитель)) Или Объект.Родитель = Справочники.Контрагенты.НайтиПоКоду("000000523")) Или 
			ОбщегоНазначения.ПроверитьКонтрагентаНаВхождениеВПапку(Объект.Ссылка));
			//---АК
			
			НЕПроверятьКИ = Объект.Родитель = Справочники.Контрагенты.НайтиПоКоду("Т00002073");
			
			Если ЗначениеЗаполнено(РеквизитАдресаПочты) И ПроверятьРеквизиты И НЕ НЕПроверятьКИ Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитАдресаПочты]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить адрес электронной почты для обмена документами!!",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(РеквизитПочтовогоАдреса)И НЕ НЕПроверятьКИ Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитПочтовогоАдреса]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить почтовый адрес контрагента!!",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(РеквизитЮрАдреса)И НЕ НЕПроверятьКИ Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитЮрАдреса]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить юридический адрес контрагента!!",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(РеквизитТелефона)И НЕ НЕПроверятьКИ Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитТелефона]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить телефон контрагента!!",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитПочтыИнтерфейсаПоставщика)И НЕ НЕПроверятьКИ Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитПочтыИнтерфейсаПоставщика]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен адрес электронной почты контрагента для интерфейса поставщика!!",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;

			//+++ AK suvv 25.04.2018 ИП-00018355
			ТекПользовательОсновнойБух = Объект.ОсновнойБухгалтерПокупателя = ПараметрыСеанса.ТекущийПользователь;
			МассивПраваАренда = УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПолныйДоступКДоговорамАренды,Ложь,ПараметрыСеанса.ТекущийПользователь);	
			ЕстьПравоАренда = МассивПраваАренда[0];
			Если ЗначениеЗаполнено(РеквизитАдресаСклада)И НЕ НЕПроверятьКИ и не ТекПользовательОсновнойБух и ЕстьПравоАренда Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитАдресаСклада]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен адрес склада!!",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитИнтернетСайта)И НЕ НЕПроверятьКИ и не ТекПользовательОсновнойБух и ЕстьПравоАренда Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитИнтернетСайта]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен интернет-сайт!!",,,, Отказ);
				КонецЕсли;	
			КонецЕсли;
			//--- AK suvv
			
		КонецЕсли;
    		
	КонецЕсли;	

	ЗаписатьКИПриЗаписиНаСервере(ТекущийОбъект);
	
	//+++ АК luza ИП-00019743, AK suvv 2018.12.17 ИП-00020483.01 исправлена ошибка в названии
	Если ТекГрузополучатель <> Грузополучатель Тогда
		ЗаписатьГрузополучателяСервер();
	КонецЕсли;	
	//-- АК luza ИП-00019743
	
	//+++АК
	Если НЕ Отказ Тогда
	
		//
		ВсеОК = РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущийОбъект.Ссылка);
		Если НЕ ВсеОК Тогда
			Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли; 
	//---АК
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеДоступностью();
		
	//АК БЕЛН 05.04.2016++
	Кол = ЭтаФорма.БанковскиеСчета.Отбор.Элементы.Количество();
	Для Сч = 0 По Кол - 1 Цикл
	   ЭтаФорма.БанковскиеСчета.Отбор.Элементы.Удалить(Кол - 1 - Сч);
   	КонецЦикла;
	Кол = ЭтаФорма.ДоговорыКонтрагентов.Отбор.Элементы.Количество();
	Для Сч = 0 По Кол - 1 Цикл
	   ЭтаФорма.ДоговорыКонтрагентов.Отбор.Элементы.Удалить(Кол - 1 - Сч);
	КонецЦикла; 
	//АК БЕЛН 05.04.2016--
	Кол = ЭтаФорма.Автомобили.Отбор.Элементы.Количество();
	Для Сч = 0 По Кол - 1 Цикл
	   ЭтаФорма.Автомобили.Отбор.Элементы.Удалить(Кол - 1 - Сч);
	КонецЦикла; 
	УстановитьНужныеОтборы();
	
	//+++АК susk
	Если НЕ КонтактнаяИНформацияДобавленаНаФорму Тогда
		ДобавитьКонтактнуюИнформациюНаФормуСервер();
		КонтактнаяИНформацияДобавленаНаФорму = Истина;
	КонецЕсли;
	//---АК susk
	
	//+++АК
	ЗаполнитьРолиОтветственных();
	//---АК
	//АК БЕЛН 25.03.2016++
	Попытка
	Наим=СокрЛП(Объект.Наименование);
	Наим=СтрЗаменить(Наим,"""","");
	Наим=СтрЗаменить(Наим,"\","");
	Наим=СтрЗаменить(Наим,"/","");
	Наим=СтрЗаменить(Наим,"|","");
	Наим=СтрЗаменить(Наим,":","");
	Наим=СтрЗаменить(Наим,"*","");
	Наим=СтрЗаменить(Наим,">","");
	Наим=СтрЗаменить(Наим,"<","");
	Наим=СтрЗаменить(Наим,"?","");
	Если ТекНаименование<>СокрЛП(Наим) и ЗначениеЗаполнено(СокрЛП(Наим)) Тогда
		ПутьКПапке=РаботаСДиалогамиКлиент.ПолучитьПапкуКонтрагента(ТекНаименование);
		ПутьКГлавнойПапке=ОбщегоНазначения.ПолучитьЗначениеКонстанты("КаталогХраненияФайловКонтрагентов");
		
		Кат=Новый Файл(ПутьКПапке);
		Если Кат.Существует() и ЗначениеЗаполнено(ТекНаименование) И ПутьКПапке=ПутьКГлавнойПапке+"\"+ТекНаименование Тогда
			//ПереместитьФайл(ПутьКПапке,ПутьКГлавнойПапке+"\"+СокрЛП(Объект.Наименование));
			Кат=Новый Файл(ПутьКГлавнойПапке+"\"+СокрЛП(Наим));
			Если Не Кат.Существует() Тогда
				СоздатьКаталог(ПутьКГлавнойПапке+"\"+СокрЛП(Наим));
			КонецЕсли; 
			МасФайлов=НайтиФайлы(ПутьКПапке,"*",Истина);
			Для каждого ЭлФайл Из МасФайлов Цикл
				Если Не ЭлФайл.ЭтоКаталог() Тогда
				   Продолжить;
				КонецЕсли; 
				НовыйПуть=СтрЗаменить(ЭлФайл.ПолноеИмя,ПутьКПапке,ПутьКГлавнойПапке+"\"+СокрЛП(Наим));
				Кат=Новый Файл(НовыйПуть);
				Если Не Кат.Существует() Тогда
					СоздатьКаталог(НовыйПуть);
				КонецЕсли; 
			КонецЦикла;
			
			МасФайлов=НайтиФайлы(ПутьКПапке,"*",Истина);
			Для каждого ЭлФайл Из МасФайлов Цикл
				Если ЭлФайл.ЭтоКаталог() Тогда
				   Продолжить;
				КонецЕсли; 
				НовыйПуть=СтрЗаменить(ЭлФайл.ПолноеИмя,ПутьКПапке,ПутьКГлавнойПапке+"\"+СокрЛП(Наим));
				ПереместитьФайл(ЭлФайл.ПолноеИмя,НовыйПуть);
			КонецЦикла;
			
			УдалитьФайлы(ПутьКПапке);
		Иначе
			Кат=Новый Файл(ПутьКГлавнойПапке+"\"+СокрЛП(Наим));
			Если Не Кат.Существует() Тогда
				СоздатьКаталог(ПутьКГлавнойПапке+"\"+СокрЛП(Наим));
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	ТекНаименование = Наим;
	Исключение
	КонецПопытки;
	//АК БЕЛН 25.03.2016--
	
	//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") И НЕ ЗначениеЗаполнено(Элементы.НадписьФизЛицоКонтрагента.Подсказка) И Объект.ОКОПФ.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияДиалогов", ЭтаФорма, Новый Структура("ПричинаОповещения", "СозданиеКонтрагента"));
		ПоказатьВопрос(Оповещение, "Желаете заполнить физ.лицо контрагента?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, "Установка связи ""Контрагент - Физ.лицо""");
		ФормаСозданияКонтрагентаОткрыта = Истина;
	КонецЕсли;
	//+++АК LAGP
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	УправлениеДоступностью();
	УстановитьВидимостьЭлементов();
	
	ОбновитьОтображениеФизЛица(); //+++АК LAGP 2018.10.03 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	
КонецПроцедуры

Функция ПолучитьСписокВыбораОКОПФ()
	
    Список = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторОКОПФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОКОПФ КАК КлассификаторОКОПФ
	|
	|ГДЕ
	|	КлассификаторОКОПФ.ПометкаУдаления = ЛОЖЬ И
	|	КлассификаторОКОПФ.БыстрыйВыбор = ИСТИНА";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Список.Добавить(СтрокаРезультата.Ссылка);
	КонецЦикла;
	
	Возврат Список
	
КонецФункции

&НаКлиенте
Процедура ОКОПФНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.
    Список = ПолучитьСписокВыбораОКОПФ();
	
	// Выбор из списка и обработка выбора.
	
	РезультатВыбора = ВыбратьИзСписка(Список, Элементы.ОКОПФ);
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.ОКОПФ = РезультатВыбора.Значение;
		//СформироватьНаименованиеПолноеАвтоматически();
	КонецЕсли;
	
	ОбновитьОтображениеФизЛица(); //+++АК LAGP 2018.10.28 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ПриИзмененииВходитВХолдингСервер()
	
	//Если ЭтаФорма.ВходитВХолдинг
	//		И Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
	//	Объект.ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	//КонецЕсли;
	
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходитВХолдингПриИзменении(Элемент)
	
	ПриИзмененииВходитВХолдингСервер();
	
КонецПроцедуры

//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура ОКОПФПриИзменении(Элемент)
	
	УстановитьВидимостьГруппыОГРН();
	ОбновитьОтображениеФизЛица(); //+++АК LAGP 2018.10.28 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	
КонецПроцедуры //--- AK suvv

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ДОВЕРЕННОСТИ

//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура ДоверенностьПредоставленаПриИзменении(Элемент)
	
	Если Объект.Доверенности.Количество() > 0 Тогда 
		ПоказатьПредупреждение(, "У контрагента имеются предоставленные доверенности.");
		ДоверенностьПредоставлена = Элементы.ДоверенностьПредоставлена.СписокВыбора[0].Значение;
		Возврат;
	КонецЕсли;
	
	Объект.ПредоставленаДоверенность = ДоверенностьПредоставлена;

	УстановитьВидимостьГруппыДоверенность();
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура ДоверенностиФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Доверенности.ТекущиеДанные;
	Если не ЗначениеЗаполнено(ТекДанные.Файл) Тогда 
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
		ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
		ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			Для Каждого ИмяФайла Из МассивФайлов Цикл
				ВыбФайл = Новый Файл(ИмяФайла);
				Если НЕ ВыбФайл.Существует() Тогда				
					Сообщить("Не существует файл. " + ИмяФайла);
					Продолжить;
				КонецЕсли;
				ТекДанные.Файл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv 

//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура ДоверенностиФайлОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Элементы.Доверенности.ТекущиеДанные.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры //--- AK suvv


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ КОНТАКТНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
	//+++АК VERN 2016.08.03 12873
	Если НЕ ОткрытаКарта тогда
		Для Каждого СтрокаРеквизита из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов цикл
			Если СтрокаРеквизита.Вид=ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента") 
				или СтрокаРеквизита.Вид=ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента") 
				и СтрокаРеквизита.ИмяРеквизита=Элемент.Имя тогда
				Если НЕ ПустаяСтрока(ЭтаФорма[Элемент.Имя]) тогда
					ЗапросОпределенияКоординат();
				КонецЕсли;
				прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//---АК VERN
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	Этаформа[Элемент.Имя] = "Отсутствует"; 
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры //--- AK suvv

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	
	ОбщегоНазначения.ЗаполнитьКППпоИНН(Объект.ИНН, Объект.КПП, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура изменяет доступность кнопки установки основного контактного лица.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица()

	Перем ТекДанные;
	
	ТекДанные = Элементы.КонтактныеЛицаКонтрагента.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Элементы.КонтактныеЛицаКонтрагентаКнопкаСделатьОсновным.Доступность = Ложь;
	Иначе
		Элементы.КонтактныеЛицаКонтрагентаКнопкаСделатьОсновным.Доступность = НЕ (ТекДанные.Ссылка = Объект.ОсновноеКонтактноеЛицо);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СделатьОсновнымКонтактноеЛицо(Команда)
	
	Перем ТекДанные;
	
	ТекДанные = Элементы.КонтактныеЛицаКонтрагента.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОсновноеКонтактноеЛицо = ТекДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
КонецПроцедуры

&НаКлиенте
// Процедура изменяет доступность кнопки установки основного банковского счета.
//
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета()

	Перем ТекДанные;
	
	ТекДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Элементы.БанковскиеСчетаКнопкаСделатьОсновным.Доступность = Ложь;
		Элементы.БанковскиеСчетаКнопкаСделатьОсновным.Пометка     = Ложь;
	Иначе
		Элементы.БанковскиеСчетаКнопкаСделатьОсновным.Доступность = Истина;
		Элементы.БанковскиеСчетаКнопкаСделатьОсновным.Пометка     = (ТекДанные.Ссылка = Объект.ОсновнойБанковскийСчет);
	КонецЕсли; 

КонецПроцедуры

Процедура СделатьОсновнымБанковскийСчетСервер(мСсылка)
	
	Если НЕ ЗначениеЗаполнено(мСсылка) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОсновнойБанковскийСчет = мСсылка Тогда
		Объект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		Объект.ОсновнойБанковскийСчет = мСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОсновнымБанковскийСчет(Команда)

	Перем ТекДанные;
	
	ТекДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СделатьОсновнымБанковскийСчетСервер(ТекДанные.Ссылка);
	
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

&НаКлиенте
// Процедура изменяет доступность кнопки установки основного договора.
//
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоДоговора()

	Перем ТекДанные;
	
	ТекДанные = Элементы.ДоговорыКонтрагентов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Элементы.ДоговорыКонтрагентовКнопкаСделатьОсновным.Доступность = Ложь;
		Элементы.ДоговорыКонтрагентовКнопкаСделатьОсновным.Пометка     = Ложь;
	Иначе
		Элементы.ДоговорыКонтрагентовКнопкаСделатьОсновным.Доступность = Истина;
		Элементы.ДоговорыКонтрагентовКнопкаСделатьОсновным.Пометка     = (ТекДанные.Ссылка = Объект.ОсновнойДоговорКонтрагента);
	КонецЕсли; 

КонецПроцедуры

Процедура СделатьОсновнымДоговорСервер(мСсылка)
	
	Если НЕ ЗначениеЗаполнено(мСсылка) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОсновнойДоговорКонтрагента = мСсылка Тогда
		Объект.ОсновнойДоговорКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		Объект.ОсновнойДоговорКонтрагента = мСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОсновнымДоговор(Команда)

	Перем ТекДанные;
	
	ТекДанные = Элементы.ДоговорыКонтрагентов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СделатьОсновнымДоговорСервер(ТекДанные.Ссылка);
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();
	
	Если Элементы.ДоговорыКонтрагентовКнопкаСделатьОсновным.Пометка Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Установить основным договор "+ТекДанные.Ссылка+" с "+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+" в регистре?"";";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		КонецЕсли;
		ОбработатьРегистрОсновныхДоговоров(ТекДанные.Ссылка);
		Элементы.ОсновныеДоговоры.Обновить();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРегистрОсновныхДоговоров(Договор)
	
		Набор=РегистрыСведений.ОсновныеДоговораКонтрагентов.СоздатьНаборЗаписей();
		Набор.Отбор.Контрагент.Установить(Договор.Владелец);
		Набор.Отбор.ВидДоговора.Установить(Договор.ВидДоговора);
		Набор.Отбор.Организация.Установить(Договор.Организация);
		Набор.Прочитать();
		Если Набор.Количество()=0 Тогда
			НЗ=Набор.Добавить();
			НЗ.ВидДоговора=Договор.ВидДоговора;
			НЗ.Контрагент=Договор.Владелец;
			НЗ.Организация=Договор.Организация;
			НЗ.ДоговорКонтрагента=Договор;
			НЗ.Период=ТекущаяДата();
			Набор.Записать(Истина);
		Иначе
			ТЗ=Набор.Выгрузить();
			ТЗ.Сортировать("Период Возр");
			ПоследнийДоговор=ТЗ[ТЗ.Количество()-1].ДоговорКонтрагента;
			Если ПоследнийДоговор<>Договор И ТЗ[ТЗ.Количество()-1].Период<>НачалоДня(ТекущаяДата()) Тогда
				НЗ=Набор.Добавить();
				НЗ.ВидДоговора=Договор.ВидДоговора;
				НЗ.Контрагент=Договор.Владелец;
				НЗ.Организация=Договор.Организация;
				НЗ.ДоговорКонтрагента=Договор;
				НЗ.Период=ТекущаяДата();
				Набор.Записать(Истина);
			КонецЕсли;	
		КонецЕсли;	
		
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УправлениеДоступностью()
		
	Если НЕ ЗначениеЗаполнено(Объект.КПП) Тогда //+++АК LAGP 2017.12.04 ИП-00017389
		Элементы.КПП.Доступность       =  (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
											И ЗначениеЗаполнено(Объект.ИНН));
		Элементы.ЗаполнитьКПП.Доступность = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
											И НЕ ПустаяСтрока(Объект.ИНН));
	КонецЕсли;										
											
	ОтключитьОтметкуНезаполненного();
	
	ЕстьПравоРедактироватьЛимиты =
		УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.РедактированиеЛимитовДебиторскойЗадолженности"), Ложь);
	Элементы.АК_Лимиты.ТолькоПросмотр=Не ЕстьПравоРедактироватьЛимиты
	
КонецПроцедуры

Процедура ВидимостьГоловногоКонтрагента()
	
	Элементы.ГоловнойКонтрагент.Доступность = ЭтаФорма.ВходитВХолдинг;
	
КонецПроцедуры

//+++ AK suvv 19.04.2018 ИП-00018355
&НаСервере
Функция ПолучитьРеквизит(ОбъектРеквизита, НазваниеРеквизита)
	Возврат ОбъектРеквизита[НазваниеРеквизита];
КонецФункции //--- AK suvv

//+++ AK suvv 19.04.2018 ИП-00018355
&НаСервере
Процедура УстановитьВидимостьГруппыОГРН()
	
	//КодОКОПФ = ПолучитьРеквизит(Объект.ОКОПФ, "Код"); 
	КодОКОПФ = Объект.ОКОПФ.Код; 
	
	ОКОПФИП = КодОКОПФ = "91   ";
	ОКОПФФИЗ = КодОКОПФ = "97   ";
	Элементы.ГруппаОГРН.Видимость = ?(ОКОПФИП или ОКОПФФИЗ, Ложь, Истина);
	
	Если ОКОПФИП Тогда 
		Элементы.СвидетельствоСерияНомер.Заголовок = "ОГРН ИП";
	ИначеЕсли ОКОПФФИЗ Тогда 
		Элементы.СвидетельствоСерияНомер.Заголовок = "ИНН ФИЗ";
	Иначе
		Элементы.СвидетельствоСерияНомер.Заголовок = "Серия и номер свидетельства";
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура УстановитьВидимостьГруппыДоверенность()
	Если Объект.ПредоставленаДоверенность Тогда 
		Элементы.Доверенности.Видимость = Истина;
	Иначе
		Элементы.Доверенности.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры //---AK 


&НаКлиенте
Процедура КонтактныеЛицаКонтрагентаПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
	ОбновитьТелефоныКонтактногоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыКонтрагентовПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();
	ПодключитьОбработчикОжидания("ПриАктивизацииДоговора", 0.1, Истина);
	
КонецПроцедуры

//+++АК susk

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаКонтактнаяИнформация" И Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Для редактирования контактной информации необходимо записать элемент. Сделать это сейчас?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Записать();
		
	КонецЕсли;	
	
	//+++ZEZA
	Если ТекущаяСтраница = Элементы.ГруппаРолиОтветственных Тогда
		ЗаполнитьРолиОтветственных();
	КонецЕсли;
	//---ZEZA

	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыКонтрагентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед выполнением этого действия сначала нужно записать контрагента",,,, Отказ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед выполнением этого действия сначала нужно записать контрагента",,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед выполнением этого действия сначала нужно записать контрагента",,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияДоговоровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед выполнением этого действия сначала нужно записать контрагента",,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУчетнуюЗаписьNoReply()
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001"); // no-reply@vkusvill.ru
	
КонецФункции

&НаКлиенте
Процедура ЗаменитьФайл(Команда)
	
	Если Элементы.ДоговорыКонтрагентов.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У контрагента нет ни одного договора, невозможно прикрепить файлы");
		Возврат;
	КонецЕсли;	
	
	ТекДог = Элементы.ДоговорыКонтрагентов.ТекущиеДанные.Ссылка;
	//АК БЕЛН 25.03.2016++
	Если ТекДог.ЭтоГруппа Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Привязка не может быть осуществлена для группы, выберите договор");
	    Возврат;
	КонецЕсли;
	//АК БЕЛН 25.03.2016--
	Парам=Новый Структура;
	Парам.Вставить("Договор",ТекДог);
	
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Контрагенты.Форма.ФормаВыбораФайла",Парам);
	Если СтруктураВозврат <> Неопределено
			И СтруктураВозврат.БылВыборФайла Тогда
		ТекДоговор = СтруктураВозврат.Договор;
		Если ТекДоговор.Владелец <> Объект.Ссылка Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выбранный в диалоге выбора файлов договор не принадлежит текущему контрагенту. Прикрепление невозможно!");
			Возврат;
		КонецЕсли;	
		Для Каждого ЭлементСписка Из СтруктураВозврат.СписокФайлов Цикл
			//Файл = Новый Файл(СтруктураВозврат.ИмяФайла);
			Файл = Новый Файл(ЭлементСписка.Значение);
			Если Файл.Существует() Тогда
				//+++ AK suvv 28.06.2018 ИП-00018768
				НаименованиеКонтрагента = СокрЛП(Объект.Наименование);
				НаименованиеКонтрагента = ИсключитьНедопустимыеСимволыИзСтроки(НаименованиеКонтрагента);
				ИмяПодкаталога = СокрЛП(Лев("Договоры контрагентов/" + НаименованиеКонтрагента, 50));
				ФайлДоговора = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", Файл.Имя, Новый ДвоичныеДанные(ЭлементСписка.Значение)), Файл.Расширение, ИмяПодкаталога);
				ДобавитьФайлДоговораНаСервере(ФайлДоговора, ТекДоговор);
				//--- AK suvv
			КонецЕсли;
		КонецЦикла;
		
		//Отправка письма
	    СписокКому = Новый СписокЗначений;
				
		Бухгалтер = Объект.ОсновнойБухгалтерПокупателя;
		Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Бухгалтер);
		Если Адрес <> "" Тогда
			СписокКому.Добавить(Адрес, Адрес);
		Иначе
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Бухгалтер.ФизЛицо);
			Если Адрес <> "" Тогда
				СписокКому.Добавить(Адрес, Адрес);
			КонецЕсли;		
		КонецЕсли;	
		
		Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ТекДог.МенеджерПоДоговору);
		Если Адрес <> "" Тогда
			СписокКому.Добавить(Адрес, Адрес);
		Иначе
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ТекДог.МенеджерПоДоговору.ФизЛицо);
			Если Адрес <> "" Тогда
				СписокКому.Добавить(Адрес, Адрес);
			КонецЕсли;	
		КонецЕсли;	
		
		Если СписокКому.Количество()=0 Тогда
			Возврат;
		Иначе
			//СписокКому.Добавить("pozm@automacon.ru", "pozm@automacon.ru");// для теста
		КонецЕсли;	
		
		УчетнаяЗапись = ПолучитьУчетнуюЗаписьNoReply();
		
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Почта.Подключиться(Профиль);
		Письмо.Тема = "Добавлена скан-копия к договору "+СокрЛП(ТекДоговор.Наименование)+" контрагента "+Объект.Наименование;
		Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
		Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
		Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
		Для Каждого ПолучательЭлемент Из СписокКому Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = ПолучательЭлемент.Значение;
		КонецЦикла;	
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = "К договору "+СокрЛП(ТекДоговор.Наименование)+" контрагента "+Объект.Наименование+" приложены файлы";
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		
		//Письмо.Вложения.Добавить(ИмяФайла);
		
		Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
			Почта.Послать(Письмо);
		КонецЕсли;	
		Почта.Отключиться();
	КонецЕсли;	
	
КонецПроцедуры

//+++ AK suvv 28.06.2018 ИП-00018768
&НаСервере
Процедура ДобавитьФайлДоговораНаСервере(ФайлДоговора, Договор)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	НовСтрока = ЭтотОбъект.ФайлыДоговоров.Добавить();
	НовСтрока.Файл 	= ФайлДоговора;
	НовСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НовСтрока.ДатаДобавления = ТекущаяДата();
	НовСтрока.Договор = Договор;
	Если РольДоступна("ПрикреплениеДополнительнойИнформацииКОбъектам") Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	ЭтотОбъект.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект, Объект);
	Элементы.ФайлыДоговоров.Обновить();
		
КонецПроцедуры //--- AK suvv

&НаКлиенте
Процедура ПросмотрФайла(Команда)
	
	ТекущаяСтрокаИд = Элементы.ФайлыДоговоров.ТекущаяСтрока;
	ПечатьФайла(ТекущаяСтрокаИд, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаДиск(Команда)
	
	//+++ AK suvv 28.06.2018 ИП-00018768
	Если Элементы.ФайлыДоговоров.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ФайлыДоговоров.ДанныеСтроки(Элементы.ФайлыДоговоров.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Истина);
	//--- AK suvv
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФайлаКоманда(Команда)
	ТекущаяСтрокаИд = Элементы.ФайлыДоговоров.ТекущаяСтрока;
	ПечатьФайла(ТекущаяСтрокаИд);		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	ТекущаяСтрокаИд = Элементы.ФайлыДоговоров.ТекущаяСтрока;	
	Объект.ФайлыДоговоров.Удалить(ТекущаяСтрокаИд);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФайла(Идентификатор, СразуПечать = Истина) Экспорт   	
	
    ТекущиеДанные = Объект.ФайлыДоговоров.НайтиПоИдентификатору(Идентификатор);
	//+++ AK suvv 18.06.2018 ИП-00018768
	Если ТекущиеДанные = неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ТекущиеДанные.Файл);
	пИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	//--- AK suvv
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 ИЛИ Найти(НРег(Файл.Расширение), ".html") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		//ИначеЕсли Найти(Файл.Расширение, ".ppt") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		//ИначеЕсли Найти(Файл.Расширение, "vsd") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		//Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		//	пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		//	пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		////ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		////ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\mspaint.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\notepad.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		//	пПрограмма = """C:\Program Files (x86)\Foxit Software\Foxit PhantomPDF\Foxit PhantomPDF.exe"" ""пИмяФайла""";
		//Иначе
		//	ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;
	
	//+++ AK suvv 28.06.2018 ИП-00018768
	пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", пИмяФайла);
	
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, пИмяФайла, Ложь) = Истина Тогда
		Если СразуПечать = Истина Тогда
			ЗапуститьПриложение(пПрограмма);
		Иначе
			ЗапуститьПриложение(пИмяФайла);
		КонецЕсли;
	КонецЕсли;
	//--- AK suvv
		
КонецПроцедуры

//+++ AK suvv 29.06.2018 ИП-00018768
//&НаСервере
//Функция ХранилищеЗначенияСервер(ИдентификаторСтроки)
//	
//	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
//	
//	ТекущиеДанные = ЭтотОбъект.ФайлыДоговоров[ИдентификаторСтроки]; 
//	
//	Возврат ПоместитьВоВременноеХранилище(ТекущиеДанные.ХранилищеФайла.Получить(), Новый УникальныйИдентификатор);	
//	
//КонецФункции
//--- AK suvv

&НаСервереБезКонтекста
Функция ПолучитьСписокДокументовБух(мКонтрагент)
	
	МассивСсылок = КритерииОтбора.ДокументыБухПоКонтрагенту.Найти(мКонтрагент);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(МассивСсылок);
	
	Возврат СписокЗначений;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьЖурналДокументовБух(Команда)
	
	ФормаЖурнала = ПолучитьФорму("ЖурналДокументов.ДокументыКонтрагентаБух.Форма.ФормаСписка",, ЭтаФорма);
    ФормаЖурнала.Заголовок = СокрЛП(Объект.Наименование);
	
	ЭлементОтбора = ФормаЖурнала.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  	= Новый ПолеКомпоновкиДанных("Ссылка");   
    ЭлементОтбора.ВидСравнения   	= ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементОтбора.Использование  	= Истина;
    ЭлементОтбора.ПравоеЗначение 	= ПолучитьСписокДокументовБух(Объект.Ссылка);
    ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ФормаЖурнала.Открыть();
	
КонецПроцедуры

//---АК susk

//+++ AK suvv 29.06.2018 ИП-00018768
&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата, ИмяПодкаталога = "")
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование   = СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	 = РасширениеРезультата;
	СпрОбъект.ИмяПодкаталога = ИмяПодкаталога;
	Если Лев(НРег(РасширениеРезультата),4)=".doc" или Лев(НРег(РасширениеРезультата),5)=".xlsx" Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтрокаТаблицы.ДанныеКартинки));
	Иначе	
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	КонецЕсли;		
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции //--- AK suvv

//+++ AK suvv 19.04.2018 ИП-00018355
&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Если Лев(НРег(ФайлСсылка.Расширение),4)=".doc" или Лев(НРег(ФайлСсылка.Расширение),5)=".xlsx" Тогда
		Картинка = Новый ДвоичныеДанные(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Иначе	
		Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	КонецЕсли;	
	
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции //--- AK suvv

//+++АК РОЛИ ОТВЕТСТВЕННЫХ

//////////////////////////////////

&НаСервере
Функция РолиОтветственныхПроверитьИЗаписатьДанныеНаСервере(ТекущаяСсылка)

	//
	ВсеОК = Истина;
	
	//
	_тзРоли = тзРоли.Выгрузить();
	_тзРоли.Сортировать("Пометка ВОЗР");
	
	//
	Для каждого СтрокаТЗ Из _тзРоли Цикл
		
		//
		Если СтрокаТЗ.Пометка Тогда
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			
			//
			МЗ.Период = ТекущаяДата();
			
			//
			МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
			МЗ.Объект = ТекущаяСсылка;
			
			//
			МЗ.РольПользователя = СтрокаТЗ.Роль;
			
			//
			МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
			
			//
			//Попытка
				МЗ.Записать();
			//Исключение
			//	ВсеОК = Ложь;
			//КонецПопытки;	
			
		Иначе
			
			//
			СП = Новый Структура;
			СП.Вставить("ТипРоли", СтрокаТЗ.ТипРоли);
			СП.Вставить("Объект", ТекущаяСсылка);
			
			//
			СрезПоследних = РегистрыСведений.СоответствиеОбъектРоль.ПолучитьПоследнее(, СП);
			Если СрезПоследних.РольПользователя = СтрокаТЗ.Роль Тогда
				
				//
				МЗ = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
				
				//
				МЗ.Период = ТекущаяДата();
			
				//
				МЗ.ТипРоли = СтрокаТЗ.ТипРоли;
				МЗ.Объект = ТекущаяСсылка;
				
				//
				МЗ.РольПользователя = Неопределено;
				
				//
				МЗ.ТипРолиID = СтрокаТЗ.ТипРоли.Код;
				
				//
				//Попытка
					МЗ.Записать();
				//Исключение
				//	ВсеОК = Ложь;
				//КонецПопытки;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

	//
	Возврат ВсеОК;
	
КонецФункции
 
&НаКлиенте
Функция РолиОтветственныхПроверитьИЗаписатьДанные()

	//
	ВсеОК = Истина;
	Возврат ВсеОК;
	
	//
	СП = Новый Структура;
	СП.Вставить("Пометка", Истина);
	
	//
	НайденныеСтроки = тзРоли.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		Предупреждение("Объект должен быть привязан хотя бы к одной Роли");
		Возврат Ложь;		
	
	КонецЕсли; 
	
	//
	Возврат ВсеОК;

КонецФункции

&НаСервере
Процедура ЗаполнитьРолиОтветственных()
	
	//
	тзРоли.Очистить();
		
	//
	МассивДоступныхРолей 		= Новый Массив;
	МассивДоступныхТиповРолей 	= Новый Массив;
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|{ГДЕ
	|	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
	|	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.* КАК ТипСтруктурнойЕдиницы}";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("ТипСтруктурнойЕдиницы");
		ЭлементОтбора.Установить(Объект.ТипСтруктурнойединицы);
		
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если Выборка.ТипРоли.ТипЗначения.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			
			//
			МассивДоступныхРолей.Добавить(Выборка.Ссылка);
			МассивДоступныхТиповРолей.Добавить(Выборка.ТипРоли);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	ТЗ =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	РолиПользователей.Ссылка КАК Роль,
	|	РолиПользователей.ТипРоли КАК ТипРоли,
	|	РолиПользователей.Ссылка.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка,
	|	РолиПользователей.Ссылка.ПометкаУдаления
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = &Объект)
	|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
	|ГДЕ
	|	РолиПользователей.Ссылка В(&ДоступныеРоли)
	|	И РолиПользователей.ТипРоли В(&ДоступныеТипы)
	|	И РолиПользователей.Ссылка.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Объект", Объект.Ссылка);
	ПЗ.Параметры.Вставить("ДоступныеРоли", МассивДоступныхРолей);
	ПЗ.Параметры.Вставить("ДоступныеТипы", МассивДоступныхТиповРолей);
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		НоваяСтрока = тзРоли.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла; 

КонецПроцедуры
 
&НаКлиенте
Процедура тзРолиПометкаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.тзРоли.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Пометка = ТекущиеДанные.Пометка;
	Если Пометка Тогда
		
		//
		Для каждого СтрокаТЗ Из тзРоли Цикл
			
			//
			Если СтрокаТЗ.Роль = ТекущиеДанные.Роль Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			Если СтрокаТЗ.ТипРоли <> ТекущиеДанные.ТипРоли Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			СтрокаТЗ.Пометка = НЕ (СтрокаТЗ.ТипРоли = ТекущиеДанные.ТипРоли);
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

//---АК

//+++АК gusd
// ЗАПОЛНЕНИЕ ПО ИНН

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		Предупреждение(НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ЮрФизЛицо) Тогда
		Предупреждение(НСтр("ru='Поле ""Юр./физ.лицо"" не заполнено'"));
		ТекущийЭлемент = Элементы.ЮрФизЛицо;
		Возврат;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Объект.ИНН, Объект.ЮрФизЛицо) Тогда
		Предупреждение(НСтр("ru='Поле ""ИНН"" заполнено не корректно'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ПроверитьИНН = Ложь)
	
	
	//+++ gusd
	//НовыеРеквизитыКонтрагента = ЗаполнитьРеквизитыПоИННИзВнешнегоИсточникаНаКлиенте();
	НовыеРеквизитыКонтрагента = Неопределено;
	//--- gusd
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки, ПроверитьИНН,, НовыеРеквизитыКонтрагента);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
		
			Текст = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к интернет-поддержке пользователей.'");
			Предупреждение(Текст);
		
		Иначе
			Сообщить(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "", ПроверитьИНН = Ложь,Записывать = Ложь, РеквизитыКонтрагента = Неопределено) Экспорт
	
	ИННОбъекта = Объект.ИНН;
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
	//+++ gusd
	Если РеквизитыКонтрагента = Неопределено Тогда
	//--- gusd
	
		Если ЭтоЮрЛицо Тогда
			РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыЮрЛицаПоИНН(ИННОбъекта);
		Иначе
			РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	Если ЭтоЮрЛицо Тогда
		
		Если Не КонтактнаяИНформацияДобавленаНаФорму Тогда
			ДобавитьКонтактнуюИнформациюНаФормуСервер();
			КонтактнаяИНформацияДобавленаНаФорму = Истина;
		КонецЕсли;
		
		// Заполнение адресов
		
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента, РеквизитыКонтрагента.ЮридическийАдрес);
		
		// Заполнение телефона
		
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, РеквизитыКонтрагента.Телефон);
		
		// Заполнение контактного лица 
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И НЕ ЗначениеЗаполнено(Объект.ГенеральныйДиректор) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
				+ " " + ДанныеКонтактногоЛица.Имя
				+ " " + ДанныеКонтактногоЛица.Отчество;
				//+ ", " + ДанныеКонтактногоЛица.Должность;
				
			Объект.ГенеральныйДиректор = ПредставлениеКонтактногоЛица;
			Объект.ДолжностьРуководителя = ДанныеКонтактногоЛица.Должность;
			
		КонецЕсли;
		
	Иначе
		
		Объект.КПП = "";
		СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
		Если СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = "" + СвидетельствоОРегистрации.Серия + " " + СвидетельствоОРегистрации.Номер;
			Объект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	Модифицированность = Истина;
	    
	//+++АК GEYV 29.05.2015
	Если Записывать И ОписаниеОшибки = "" Тогда
		
		НеПерезаполнятьКИ = Истина;
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
		//Обменда
		Попытка
			
			СправочникОбъект.Записать();	
			
		Исключение
			
			ОписаниеОшибки =  ОписаниеОшибки(); 
			
		КонецПопытки;
		
		
	КонецЕсли;
	//---АК	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКИ, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКИ);
	Строки = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = ДанныеСтроки.ИмяРеквизита;
	
	//ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
	//ДанныеСтроки.ЗначенияПолей    = СтруктураДанных.КонтактнаяИнформация;
	
	Если ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
		Если Не ЗначениеЗаполнено(ЭтаФорма[ИмяТекущегоЭлемента])Тогда
			ЭтаФорма[ИмяТекущегоЭлемента] = СтруктураДанных.Представление;
		КонецЕсли;
	Иначе
		ЭтаФорма[ИмяТекущегоЭлемента] = СтруктураДанных.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	КонтрагентФизическоеЛицо = Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	Элементы.ГруппаРегистрацияКакИП.Видимость = КонтрагентФизическоеЛицо;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныеФайлы(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Сначала надо записать элемент справочника!");
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображений 			= Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Объект.Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов 	= Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Объект.Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Объект.Ссылка);

	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Отчет(Команда)
	
	СсылкаКонтрагента = Объект.Ссылка;
	
	Если СсылкаКонтрагента.Пустая() Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Запишите карточку контрагента!";
		Сообщение.Сообщить();
		
		Возврат
	
	КонецЕсли;
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОтчетПоДаннымКонтрагента.Форма.Форма"); 
	ФормаОтчета.КонтрагентОтчета = СсылкаКонтрагента;	
	ФормаОтчета.КнопкаВыполнитьНажатие(Неопределено);
	ФормаОтчета.Открыть();
	
КонецПроцедуры

//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура ОтчетОПроверкеКонтрагента(Команда)
	
	СсылкаКонтрагента = Объект.Ссылка;
	
	Если СсылкаКонтрагента.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Запишите карточку контрагента!";
		Сообщение.Сообщить();	
		Возврат;
	КонецЕсли;
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОтчетОПроверкеКонтрагента.Форма.Форма"); 
	ФормаОтчета.КонтрагентОтчета = СсылкаКонтрагента;
	ФормаОтчета.ДатаОтчета = ТекущаяДата();
	ФормаОтчета.КнопкаВыполнитьНажатие(Неопределено);
	ФормаОтчета.Открыть();

КонецПроцедуры //--- AK suvv 


//+++ AK suvv 19.04.2018 ИП-00018355
&НаКлиенте
Процедура ОткрытьОтчетОтветственногоМенеджера(Команда)
	
	ФормаРедактированияТекста = ПолучитьФорму("ОбщаяФорма.ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Объект.ОтчетОтветственногоМенеджера);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		Объект.ОтчетОтветственногоМенеджера = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры //--- AK suvv 

&НаКлиенте
Процедура ОсновныеДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед выполнением этого действия сначала нужно записать контрагента",,,, Отказ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПоКонтрагенту(Команда)
	
	ФормаЗадачи = ПолучитьФорму("Задача.ЗадачаИсполнителя.ФормаСписка");
	ФормаЗадачи.ЗадачаСписок.Отбор.Контрагент.Установить(Объект.Ссылка);
	ФормаЗадачи.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаОтчета = ПолучитьФорму("Отчет.АнализСубконтоФинансовый.Форма.Форма");
	ФормаОтчета.КонтрагентДляРасшифровки = Объект.Ссылка;
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуПоКонтрагенту(Команда)
	
	ФормаНовойЗадачи = ПолучитьФорму("Задача.ЗадачаИсполнителя.Форма.ФормаЗадачи");
	ФормаНовойЗадачи.Контрагент = Объект.Ссылка;
	ФормаНовойЗадачи.ОбъектЗадачи = Объект.Ссылка;
	ФормаНовойЗадачи.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтбиратьФайлыПоТекущемуДоговору(Команда)
	
	Если Элементы.ДоговорыКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекДог = Элементы.ДоговорыКонтрагентов.ТекущиеДанные.Ссылка;
	
	Элементы.ФайлыДоговоровОтбиратьФайлыПоТекущемуДоговору.Пометка = НЕ Элементы.ФайлыДоговоровОтбиратьФайлыПоТекущемуДоговору.Пометка;
	ОтбиратьФайлыПоТекущемуДоговоруСервер(Элементы.ФайлыДоговоровОтбиратьФайлыПоТекущемуДоговору.Пометка, ТекДог);
	
КонецПроцедуры

&НаСервере
Процедура ОтбиратьФайлыПоТекущемуДоговоруСервер(Пометка, Договор)
		
	Если Пометка Тогда
		Элементы.ФайлыДоговоров.ОтборСтрок = Новый ФиксированнаяСтруктура("Договор", Договор);
	Иначе
		Элементы.ФайлыДоговоров.ОтборСтрок = неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииДоговора()
	
	Если Элементы.ДоговорыКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекДог = Элементы.ДоговорыКонтрагентов.ТекущиеДанные.Ссылка;
	
	ОтбиратьФайлыПоТекущемуДоговоруСервер(Элементы.ФайлыДоговоровОтбиратьФайлыПоТекущемуДоговору.Пометка, ТекДог);
	ОтключитьОбработчикОжидания("ПриАктивизацииДоговора");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	
	
КонецПроцедуры

//АК_БЕЛН_25.02.2016++
&НаКлиенте
Процедура ОтправитьПарольИОбработку(Команда)
	ДействияФормыОтправитьПарольИОбработку();
КонецПроцедуры

&НаСервере
Процедура ДействияФормыОтправитьПарольИОбработку()
	
	НЗ=РегистрыСведений.АК_ПаролиКонтрагентов.СоздатьНаборЗаписей();
	НЗ.Отбор.Контрагент.Установить(Объект.Ссылка);
	Зап=НЗ.Добавить();
	Зап.Контрагент=Объект.Ссылка;
	Зап.Пароль=СтрЗаменить(Строка(ПолучитьСлучайноеЧисло())," ","");
	Зап.ПервыйЗапуск=Истина;
	НЗ.Записать();
	ОтправитьОбработкуИПароль(Зап.Пароль);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСлучайноеЧисло()
      ГСЧ=Новый ГенераторСлучайныхЧисел;
	  СлучЧис=ГСЧ.СлучайноеЧисло(100000,999999);
      Возврат СлучЧис
  КонецФункции // ()
  
&НаСервере
Процедура ОтправитьОбработкуИПароль(Пароль)
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	ДД=Справочники.Контрагенты.ВнешнийОтчет("Акт сверки и заказы");
	Если ДД=Неопределено Тогда
		Сообщить("Не подключена обработка поставщика");
		Возврат;	
	КонецЕсли; 
	ДД.Записать(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
	СтруктураНовогоПисьма.Вставить("Тело", "	Группа компаний ""Избенка"" предлагает воспользоваться обработкой для просмотра актов сверок, заявок в нашей базе данных.
	|	Назначен пароль для "+Объект.Наименование+" ИНН "+Объект.ИНН+" - "+Пароль+" для цели контроля взаиморасчетов.
	|	Воспользоваться обработкой можно на базе платформы 1С:Предприятие 8, не ниже редакции 8.2.
	|	Для этого необходимо скачать обработку на свой компьютер и открыть файл через программу 1С.
	|	В случае возникновения каких-либо ошибок обратитесь к вашему специалисту по обслуживанию ПО 1С.");
	СтруктураНовогоПисьма.Вставить("Тема", "Пароль поставщика");
	
	СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", Справочники.Контрагенты.ПолучитьДвоичныеДанные(КаталогВременныхФайлов()+"Акт сверки и заказы.epf"), КаталогВременныхФайлов()+"Акт сверки и заказы.epf","Акт сверки и заказы.epf"));
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	Кому = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид.Наименование = ""E-mail для интерфейса поставщика""";

	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
	Иначе
		 Сообщить("Не заполнен адрес электронной почты контрагента для интерфейса поставщика!!");
		 Возврат;
	КонецЕсли;

	
	Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	Попытка
		Справочники.Контрагенты.ОтправитьРЛПоПочте(СтруктураНовогоПисьма);
	    Сообщить("Отправлено письмо с паролем и обработкой на "+ВыборкаДетальныеЗаписи.Представление);
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//Отправка = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма,,,,,, Истина, Ложь);
	//Отправка.Письмо.ОтправитьПисьмо();
	УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
КонецПроцедуры

//+++АК SHEP 20170712 ИП-00014350
&НаКлиенте
Процедура ОтправитьПарольДляИнтерфейсаПоставщика(Команда)
	
	ОтправитьПарольДляИнтерфейсаПоставщикаНаСервере();
	
КонецПроцедуры

//+++АК SHEP 20170712 ИП-00014350
&НаСервере
Процедура ОтправитьПарольДляИнтерфейсаПоставщикаНаСервере()
Перем Пароль;
	
	//+++АК SHEP 20170711: разрешил отправлять пароль для поставщиков и бренд-менеджерам
	УстановитьПривилегированныйРежим(Истина);
	
	// если есть пароль, не меняем его
	НаборЗаписей = РегистрыСведений.АК_ПаролиКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьРС = НаборЗаписей.Добавить();
		ЗаписьРС.Контрагент = Объект.Ссылка;
		ЗаписьРС.Пароль = СтрЗаменить(Строка(ПолучитьСлучайноеЧисло()), " ", "");
		ЗаписьРС.ПервыйЗапуск = Истина;
		НаборЗаписей.Записать();
		Пароль = ЗаписьРС.Пароль;
	Иначе
		Пароль = НаборЗаписей[0].Пароль;
	КонецЕсли;
	
	// Отправляем письмо
	ИмяВложения = "Инструкция для интерфейса поставщика.docx";
	ИмяВремФайла = КаталогВременныхФайлов() + ИмяВложения;
	ДвоичныеДанные = Справочники.Контрагенты.ПолучитьМакет("ИнструкцияДляИнтерфейсаПоставщика");
	Если ДвоичныеДанные = Неопределено Тогда
		Сообщить("Не найдено: " + ИмяВложения);
		Возврат;
	КонецЕсли; 
	ДвоичныеДанные.Записать(ИмяВремФайла);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид.Наименование = ""E-mail для интерфейса поставщика""");
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		 Сообщить("Не заполнен адрес электронной почты контрагента для интерфейса поставщика!!");
		 Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Кому = Новый СписокЗначений;
	Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СтруктураНовогоПисьма.Вставить("Тело",
		"	Группа компаний ""Избёнка"" предлагает воспользоваться интерфейсом поставщика.
		|	Назначен пароль " + Пароль + " для " + Объект.Наименование + " (ИНН " + Объект.ИНН + ") для внесения карточек товаров и карт дизайн-проектов.
		|	Подключиться на базе платформы 1С:Предприятие 8, не ниже редакции 8.2 (см. вложенную инструкцию).
		|	Также можно подключиться через браузер по ссылке: 'http://it-stuff.ru/IzbenkaFin/' (Нужно будет настроить браузер и существуют ограничения для работы с файлами).
		|
		|	В случае возникновения каких-либо ошибок обратитесь к вашему специалисту по обслуживанию ПО 1С.");
	СтруктураНовогоПисьма.Вставить("Тема", "Пароль поставщика");
	
	СписокФайловВложений = Новый СписокЗначений;
	СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", ДвоичныеДанные, ИмяВремФайла, ИмяВложения));
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	Попытка
		Справочники.Контрагенты.ОтправитьРЛПоПочте(СтруктураНовогоПисьма);
	    Сообщить("Отправлено письмо с паролем и инструкцией на " + ВыборкаДетальныеЗаписи.Представление);
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//Отправка = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма,,,,,, Истина, Ложь);
	//Отправка.Письмо.ОтправитьПисьмо();
	УдалитьФайлы(ИмяВремФайла);
	
КонецПроцедуры

//+++АК SHEP 2018.03.30 ИП-00017032
&НаКлиенте
Процедура ОтправитьПарольДляКабинетаПоставщика(Команда)
	
	ОтправитьПарольДляКабинетаПоставщикаНаСервере();
	
КонецПроцедуры

//+++АК SHEP 2018.03.30 ИП-00017032
&НаСервере
Процедура ОтправитьПарольДляКабинетаПоставщикаНаСервере()
Перем Пароль;
	
	//+++АК SHEP 20170711: разрешил отправлять пароль для поставщиков и бренд-менеджерам
	УстановитьПривилегированныйРежим(Истина);
	
	// если есть пароль, не меняем его
	НаборЗаписей = РегистрыСведений.АК_ПаролиКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьРС = НаборЗаписей.Добавить();
		ЗаписьРС.Контрагент = Объект.Ссылка;
		ЗаписьРС.Пароль = СтрЗаменить(Строка(ПолучитьСлучайноеЧисло()), " ", "");
		ЗаписьРС.ПервыйЗапуск = Истина;
		НаборЗаписей.Записать();
		Пароль = ЗаписьРС.Пароль;
	Иначе
		Пароль = НаборЗаписей[0].Пароль;
	КонецЕсли;
	
	// Отправляем письмо
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид.Наименование = ""E-mail для интерфейса поставщика""");
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		 Сообщить("Не заполнен адрес электронной почты контрагента для интерфейса поставщика!!");
		 Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Кому = Новый СписокЗначений;
	Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СтруктураНовогоПисьма.Вставить("Тело",
		"	Группа компаний ""Избёнка"" предлагает воспользоваться личным кабинетом поставщика.
		|	Назначен пароль " + Пароль + " для " + Объект.Наименование + " (ИНН " + Объект.ИНН + ") для входа в кабинет.
		|
		|	В личный кабинет можно зайти по ссылке: 'http://lk.vkusvill.automacon.ru/'.");
	СтруктураНовогоПисьма.Вставить("Тема", "Пароль поставщика");
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", Новый СписокЗначений);
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	Попытка
		Справочники.Контрагенты.ОтправитьРЛПоПочте(СтруктураНовогоПисьма);
	    Сообщить("Отправлено письмо с паролем на " + ВыборкаДетальныеЗаписи.Представление);
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//Отправка = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма,,,,,, Истина, Ложь);
	//Отправка.Письмо.ОтправитьПисьмо();
	
КонецПроцедуры

//&НаКлиенте //+++АК LAGP 2017.12.07 ИП-00017434.01 перевёл на сервер
&НаСервере
Процедура ВидимостьЭДО()
		
	Элементы.ПоставщикЭДО.Доступность 				= Объект.ЭДО;
	Элементы.ПоставщикЭДООрганизации.Доступность 	= Объект.ЭДО;
	//Элементы.КомментарийЭДО.Доступность 			= Объект.ЭДО; //+++АК LAGP 2018.01.09 ИП-00017434.01 Доступ к комментарию должен быть, даже если галки "Использует ЭДО" не стоит.
	//+++АК PISH 2018.11.06 ИП-00019917.03   
	Элементы.ЭДО_Автоматически.Доступность			= Объект.ЭДО
		И УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ДоступКСБИС,Ложь,ПараметрыСеанса.ТекущийПользователь)[0];
	//---АК PISH
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДОПриИзменении(Элемент)
	
	ВидимостьЭДО();
	
КонецПроцедуры

//+++АК VERN 2016.07.26 12873 
&НаКлиенте
Процедура ВызовОбработкиПросмотрНаКарте(Режим="Диалог")
	
	перем КИ;

	//mind 2017-07-03 Отключил, вызывает только ошибки при записи

	Если ОткрытаКарта тогда
		возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
	ПараметрыПодбора.Вставить("Режим",					"РежимАдресКонтрагента");
	ПараметрыПодбора.Вставить("Режим2",					Режим);
	ПараметрыПодбора.Вставить("Наименование",			Объект.Наименование);
	ПараметрыПодбора.Вставить("Ссылка",					Объект.Ссылка);
	ПараметрыПодбора.Вставить("СтрокаКоординат",		Объект.СтрокаКоординат);
	ПараметрыПодбора.Вставить("КоординатыОпределены",	Объект.КоординатыОпределены);
	
	ФактическийАдрес="";
	ЮридическийАдрес="";
	
	попытка
		КИ=ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	Исключение
		ПоказатьОповещениеПользователя("Просмотр на карте",,"Нет контактной информации");
		возврат;
	КонецПопытки;
	
	Для Каждого СтрокаРеквизита из КИ цикл
		Если СтрокаРеквизита.Вид=ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента") тогда
			ФактическийАдрес=ЭтаФорма[СтрокаРеквизита.ИмяРеквизита];
			Если НЕ ПустаяСтрока(ФактическийАдрес) тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Вид=ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента") тогда
			ЮридическийАдрес=ЭтаФорма[СтрокаРеквизита.ИмяРеквизита];
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ФактическийАдрес) тогда
		ПараметрыПодбора.Вставить("Адрес", ФактическийАдрес);
	иначе
		ПараметрыПодбора.Вставить("Адрес", ЮридическийАдрес);
	КонецЕсли;

	ОткрытаКарта=Истина;
	ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрНаКарте(Команда)
	
	ВызовОбработкиПросмотрНаКарте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если (ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма"))
		И (ИсточникВыбора.ИмяФормы = "Обработка.АК_ОтображениеНаКарте.Форма.Форма") Тогда
		Если ВыбранноеЗначение.КоординатыОпределены Тогда
			Объект.КоординатыОпределены	= Истина;
			Объект.СтрокаКоординат		= ВыбранноеЗначение.СтрокаКоординат;
			Элементы.ПросмотрНаКарте.Заголовок = "Просмотр на карте";
		КонецЕсли;
		ОткрытаКарта = Ложь;
		
	//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если НЕ (ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ДатаРождения")) И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "УдостоверениеЛичности"))) Тогда
			Сообщить("У выбранного физ.лица не заполнены реквизиты ""Дата рождения"" и ""УдостоверениеЛичности""! Повторите выбор пожалуйста.");
			ПараметрыОтбора = Новый Структура("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			ПараметрыФормыВыбора = Новый Структура("Событие, Контрагент", "УстановкаСвязиКонтрагентФизлицо", Объект.Ссылка);
			ПараметрыФормы	= Новый Структура("Отбор, ДополнительныеПараметры", ПараметрыОтбора, ПараметрыФормыВыбора);
			
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
		Иначе
			//Мягкий вопрос. Людмила Кускова ака buh49@vkusvill.ru попросила без него, записывать сразу.

			//Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияДиалогов", ЭтаФорма, Новый Структура("ПричинаОповещения, ФизЛицо", "ЗаписьФизЛица", ВыбранноеЗначение));
			//ПоказатьВопрос(Оповещение, "Для установки связи необходимо записать контрагента в элемент физ.лица. Выполнить запись?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, "Установка связи ""Контрагент - Физ.лицо""");			
			
			//Безусловная запись
			ОбъектФизЛица = ВыбранноеЗначение.ПолучитьОбъект();
			ОбъектФизЛица.Контрагент = Объект.Ссылка;
			ВозниклоИсключение = Ложь;
			Попытка
				ОбъектФизЛица.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				ВозниклоИсключение = Истина;
			КонецПопытки;
			ОбновитьОтображениеФизЛица();
			
		КонецЕсли;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") И НЕ ЗначениеЗаполнено(ВыбранноеЗначение) И ЗначениеЗаполнено(НеобходимоЗакрытьФорму) И НеобходимоЗакрытьФорму Тогда	
		ЭтаФорма.Закрыть();			
	//---АК LAGP
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапросОпределенияКоординат()
	
	Возврат; //2017-05-26 mind пользователи жалуются на эти лишние вопросы и говорят, что это определение все равно не работает и просят его выключить
	
	Ответ = Вопрос("Изменился адрес. Определить положение на карте?", РежимДиалогаВопрос.ОКОтмена, 0);
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.КоординатыОпределены = Ложь;
		ВызовОбработкиПросмотрНаКарте();
	КонецЕсли;
	
КонецПроцедуры

//---АК VERN 


//АК_БЕЛН_25.02.2016--
//---

&НаКлиенте
Процедура АвтомобилиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед выполнением этого действия сначала нужно записать контрагента",,,, Отказ);
		Возврат;
	КонецЕсли;	
	
	Отказ = Истина;
	
	ФормаНового = ПолучитьФорму("Справочник.Автомобили.Форма.ФормаЭлемента",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Объект.Перевозчик = Объект.Ссылка;
	ФормаНового.Элементы.Перевозчик.Доступность = Ложь;
	ФормаНового.ОткрытьМодально();
	
КонецПроцедуры


//+++ gusd

&НаКлиенте
Функция ЗаполнитьРеквизитыПоИННИзВнешнегоИсточникаНаКлиенте()
	
	СтрокаПодключения = "Srvr=""srv-sql02:1741"";Ref=""Gateway83"";";
	
	// Отладка
	//СтрокаПодключения = "File=""D:\Izbenka\Управление Информации\Automacon09\gusd\ТестьВебСервисИНН""";
	
	V83COMConnector = Новый COMОбъект("V83.COMConnector");
	
	Попытка
		V83COMОбъект = V83COMConnector.Connect(СтрокаПодключения);
	Исключение
		//Сообщить("Ошибка подключения! " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ЭтоЮрЛицо 	= (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
	ИННОбъекта 	= Объект.ИНН;
	
	Если ЭтоЮрЛицо Тогда
		РеквизитыКонтрагента = V83COMОбъект.СервисДанныхЕдиныхГосРеестров.РеквизитыЮрЛицаПоИНН(ИННОбъекта);
	Иначе
		РеквизитыКонтрагента = V83COMОбъект.СервисДанныхЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
	КонецЕсли;
	
	V83COMОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	НовыеРеквизитыКонтрагента = Новый Структура;
	
	МассивИменСтруктур = Новый Массив;
	МассивИменСтруктур.Добавить("РегистрацияВНалоговомОргане");
	МассивИменСтруктур.Добавить("РегистрацияВПенсионномФонде");
	МассивИменСтруктур.Добавить("РегистрацияВФСС");
	МассивИменСтруктур.Добавить("Руководитель");
	МассивИменСтруктур.Добавить("ЮридическийАдрес");
	МассивИменСтруктур.Добавить("СвидетельствоОРегистрации");
	
	Для каждого КлючЗначение Из РеквизитыКонтрагента Цикл
		
		Если МассивИменСтруктур.Найти(КлючЗначение.Ключ) <> Неопределено
				И КлючЗначение.Значение <> Неопределено Тогда
			
			РеквизитыПодраздела = Новый Структура;
			
			Для каждого КлючЗначениеПодраздела Из КлючЗначение.Значение Цикл
				РеквизитыПодраздела.Вставить(КлючЗначениеПодраздела.Ключ, КлючЗначениеПодраздела.Значение);	
			КонецЦикла; 
			
			НовыеРеквизитыКонтрагента.Вставить(КлючЗначение.Ключ, РеквизитыПодраздела);
			Продолжить;
			
		КонецЕсли; 
		
		Если КлючЗначение.Ключ = "Пол" Тогда
			Если КлючЗначение.Значение = "Женский" Тогда
				НовыеРеквизитыКонтрагента.Вставить(КлючЗначение.Ключ, ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Женский"));		
			Иначе
				НовыеРеквизитыКонтрагента.Вставить(КлючЗначение.Ключ, ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской"));	
			КонецЕсли;
		Иначе
			НовыеРеквизитыКонтрагента.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);	
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат НовыеРеквизитыКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура НоваяРекомендация()
	
	 Если Объект.Ссылка = Неопределено Тогда
		Сообщить("Контрагент не записан");
		Возврат;
	КонецЕсли;	
		
	ПараметрыОткрытия = ПолучитьСтруктуруОткрытияНовойЗаписи();
	ОповещениеОбновистьРекомендацию = Новый ОписаниеОповещения("ОбновитьРекомендации",ЭтаФорма);
	ОткрытьФорму("РегистрСведений.СведенияОПроверкеКонтрагентов.ФормаЗаписи",ПараметрыОткрытия,,,,,ОповещениеОбновистьРекомендацию);
	
КонецПроцедуры	

&НаСервере
Функция ЭтоМенеджерИлиБухгалтер()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка
		|	И (Контрагенты.ОсновнойБухгалтерПокупателя = &ТекущийПользователь
		|	ИЛИ Контрагенты.ОсновнойМенеджерПокупателя = &ТекущийПользователь)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

&НаСервере
Функция ПолучитьСтруктуруОткрытияСтаройЗаписи()
	
	ПараметрыОткрытия = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Период,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ТипСведений
		|ИЗ
		|	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(
		|			&Дата,
		|			Контрагент = &Контрагент
		|				И ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияУФК), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата",КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Контрагент",Объект.Ссылка);
		СтруктураКлюча.Вставить("Период",ВыборкаДетальныеЗаписи.Период);
		СтруктураКлюча.Вставить("ТипСведений",ВыборкаДетальныеЗаписи.ТипСведений);
		ПараметрыОткрытия.Вставить("Ключ",РегистрыСведений.СведенияОПроверкеКонтрагентов.СоздатьКлючЗаписи(СтруктураКлюча));
		Возврат ПараметрыОткрытия;
	КонецЦикла;
	
КонецФункции	

Функция ПолучитьСтруктуруОткрытияНовойЗаписи()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контрагент",Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ТипСведений",Перечисления.СведенияОПроверке.СведенияУФК);
	ПараметрыОткрытия.Вставить("Период",ТекущаяДата());
	
	Возврат ПараметрыОткрытия;
	
КонецФункции


Процедура ОбновитьРекомендации(Результат = Неопределено,Параметры= Неопределено) Экспорт
	
	Попытка
		РедактированиеРекомендаций = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.РедактированиеРекомендацийКонтрагентов"), Ложь);	
		МенеждерИлиБухгалтер = ЭтоМенеджерИлиБухгалтер();
		
		Элементы.ДобавитьРекомендацию.Видимость = РедактированиеРекомендаций ИЛИ МенеждерИлиБухгалтер; 
		
		РекомендацииИПояснения = РегистрыСведений.СведенияОПроверкеКонтрагентов.ПолучитьРекомендацииИПояснения(Объект.Ссылка,КонецДня(ТекущаяДата()));
		
				
		ВидимостьПояснения1Cont = ЗначениеЗаполнено(РекомендацииИПояснения.Пояснения1Cont);
		ВидимостьРекомендация1Cont = ЗначениеЗаполнено(РекомендацииИПояснения.Рекомендация1Cont);
		ВидимостьГруппа1Cont = ВидимостьРекомендация1Cont ИЛИ ВидимостьПояснения1Cont;
		
		Элементы.Рекомендация1Cont.Заголовок = Формат(РекомендацииИПояснения.Период1Cont,"ДФ=dd.MM.yy") + ": "+ РекомендацииИПояснения.Рекомендация1Cont;
		Элементы.Рекомендация1Cont.Видимость = ВидимостьРекомендация1Cont;
		
		Элементы.Пояснение1Cont.Заголовок = РекомендацииИПояснения.Пояснения1Cont;
		Элементы.Пояснение1Cont.Видимость = ВидимостьПояснения1Cont;
		
		Элементы.ГруппаРекомендации1cont.Видимость = ВидимостьГруппа1Cont; 
		
		ОтрицательнаяРекомендация1Cont = Ложь;
		
		Если ВидимостьРекомендация1Cont Тогда
			ОтрицательнаяРекомендация1Cont =  РекомендацииИПояснения.Рекомендация1Cont.Отрицательная; 
		КонецЕсли;
			
		Если ОтрицательнаяРекомендация1Cont Тогда			
			Элементы.Рекомендация1Cont.ЦветТекста = WebЦвета.Красный;
		Иначе 	
			Элементы.Рекомендация1Cont.ЦветТекста = WebЦвета.ТемноСиний;	
		КонецЕсли;			

		ВидимостьРекомендация = ЗначениеЗаполнено(РекомендацииИПояснения.РекомендацияУФК);
		ВидимостьПоясненияУФК = ЗначениеЗаполнено(РекомендацииИПояснения.ПоясненияУФК);
		
		ОтветПолучен = (РекомендацииИПояснения.ОтветПолучен = Истина);
		Элементы.ОтветПолучен.Видимость = РедактированиеРекомендаций И ОтветПолучен И (ВидимостьРекомендация ИЛИ ВидимостьПоясненияУФК);	
		Элементы.ОтветНеПолучен.Видимость  = РедактированиеРекомендаций И НЕ ОтветПолучен И (ВидимостьРекомендация ИЛИ ВидимостьПоясненияУФК);	
				
		Элементы.РекомендацияУФК.Видимость  = ВидимостьРекомендация;
		Элементы.ПояснениеУФК.Видимость = ВидимостьПоясненияУФК;
		
		Если ВидимостьРекомендация Тогда
			ОтрицательнаяРекомендацияУФК = РекомендацииИПояснения.РекомендацияУФК.Отрицательная;
			Элементы.РекомендацияУФК.Заголовок = Формат(РекомендацииИПояснения.ПериодУФК,"ДФ=dd.MM.yy") + ": "+ РекомендацииИПояснения.РекомендацияУФК;
		Иначе
			ОтрицательнаяРекомендацияУФК = Ложь;
		КонецЕсли;
		
		Если ОтрицательнаяРекомендацияУФК Тогда			
			Элементы.РекомендацияУФК.ЦветТекста = WebЦвета.Красный;
		Иначе 	
			Элементы.РекомендацияУФК.ЦветТекста = WebЦвета.ТемноСиний;	
		КонецЕсли;	
				
		Элементы.ПояснениеУФК.Заголовок = РекомендацииИПояснения.ПоясненияУФК; 
				
	Исключение
		Элементы.ГруппаРекомендацияУФК.Видимость = Ложь;
		Элементы.ГруппаРекомендации1cont.Видимость = Ложь;
	КонецПопытки;
	
КонецПроцедуры	

Процедура ОбновитьПрикрепленныеФайлы()
	
	Попытка	
		КоличествоПрикрепленныхФайлов = РегистрыСведений.ФайлыРекомендаций.КоличествоПрикрепленныхФайлов(Объект.Ссылка);
		Если КоличествоПрикрепленныхФайлов = 0 Тогда
			Элементы.ПрикрепленныеФайлы.Заголовок = "Нет прикрепленных файлов";
		Иначе
			Элементы.ПрикрепленныеФайлы.Заголовок = "Прикрепленные файлы ("+КоличествоПрикрепленныхФайлов+")"; 
		КонецЕсли;
	Исключение
		Элементы.ПрикрепленныеФайлы.Видимость = ложь;
	КонецПопытки;	
				
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРекомендациюНажатие(Элемент)
	НоваяРекомендация();
КонецПроцедуры

&НаКлиенте
Процедура ОтветНеПолученНажатие(Элемент)
	ОткрытьТекущуюЗапись();
КонецПроцедуры

&НаКлиенте
Процедура ОтветПолученНажатие(Элемент)
	ОткрытьТекущуюЗапись();
КонецПроцедуры

&НаКлиенте
Процедура ОтветПолученОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОткрытьТекущуюЗапись();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюЗапись()
	
	 Если Объект.Ссылка = Неопределено Тогда
		Сообщить("Контрагент не записан");
		Возврат;
	КонецЕсли;	
		
	ПараметрыОткрытия = ПолучитьСтруктуруОткрытияСтаройЗаписи();
	ОповещениеОбновистьРекомендацию = Новый ОписаниеОповещения("ОбновитьРекомендации",ЭтаФорма);
	ОткрытьФорму("РегистрСведений.СведенияОПроверкеКонтрагентов.ФормаЗаписи",ПараметрыОткрытия,,,,,ОповещениеОбновистьРекомендацию);
	
КонецПроцедуры	


&НаКлиенте
Процедура ПрикрепленныеФайлыНажатие(Элемент)
	Если Объект.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ПараметрыОткрытия = Новый Структура("Контрагент",Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ФайлыРекомендаций.Форма.СписокФайловКонтрагента",ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//koro  17316 20171203
	Если ИмяСобытия = "ПрикрепленныеФайлы" Тогда
		ОбновитьПрикрепленныеФайлы();
	КонецЕсли;	
КонецПроцедуры

//+++АК LAGP 2017.12.04 ИП-00017389 Открываем всем пользователям доступ до части контактной информации
&НаСервере
Процедура ЗакрытьДоступностьФормы(ДопПравоФункцРолиХолдинг)
	
	Для каждого ЭлементФормы Из ЭтаФорма.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементФормы) = Тип("ДекорацияФормы") И НЕ ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") И ЭлементФормы.Доступность Тогда
			ЭлементФормы.Доступность = Ложь;	
		КонецЕсли;	
	КонецЦикла;	
	 
		
	
	МассивРазрешенныхГрупп = Новый Массив;
	МассивРазрешенныхГрупп.Добавить("ГруппаДоговоры");
	МассивРазрешенныхГрупп.Добавить("ДоговорыКонтрагентов");
	МассивРазрешенныхГрупп.Добавить("ОсновныеДоговоры");
	МассивРазрешенныхГрупп.Добавить("ФайлыДоговоров");
	
	МассивРазрешенныхЭлементов = Новый Массив;
	МассивРазрешенныхЭлементов.Добавить("ПоказатьФайлы");     //+++АК LAGP 2018.02.19 ИП-00017905
	МассивРазрешенныхЭлементов.Добавить("ФайлыДоговоровПросмотрФайла");
	МассивРазрешенныхЭлементов.Добавить("ФайлыДоговоров");
	МассивРазрешенныхЭлементов.Добавить("ДоговорыКонтрагентов");
	МассивРазрешенныхЭлементов.Добавить("ДоговорыКонтрагентовСкопировать");
	МассивРазрешенныхЭлементов.Добавить("ДоговорыКонтрагентовСоздать");
	МассивРазрешенныхЭлементов.Добавить("ОсновныеДоговорыСоздать");
	МассивРазрешенныхЭлементов.Добавить("ОсновныеДоговорыСкопировать");
	МассивРазрешенныхЭлементов.Добавить("ОсновныеДоговоры");
	МассивРазрешенныхЭлементов.Добавить("ФормаЗаписать");
	МассивРазрешенныхЭлементов.Добавить("ФормаЗаписатьИЗакрыть");
	
	//+++АК LAGP 2017.12.07 ИП-00017434.01
	Если Объект.ОсновнойБухгалтерПокупателя = ПараметрыСеанса.ТекущийПользователь Тогда 		
		МассивРазрешенныхГрупп.Добавить("ГруппаЭДО");
		МассивРазрешенныхЭлементов.Добавить("КомментарийЭДО");	
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК LAGP 2017.12.11 ИП-00017434
	Если ДопПравоФункцРолиХолдинг Тогда
		МассивРазрешенныхГрупп.Добавить("тзРоли");
		МассивРазрешенныхГрупп.Добавить("Группа4"); //холдинг
		МассивРазрешенныхЭлементов.Добавить("тзРоли");
	КонецЕсли;
	//---АК LAGP
	
	//+++АК SHEP 2018.03.30 ИП-00017032: разрешаем отправлять пароль контрагентам
		МассивРазрешенныхГрупп.Добавить("ФормаГруппаОтправитьПароль");
	//---АК SHEP 2018.03.30 
	
	//+++ AK suvv 25.04.2018 ИП-00018355
	Если РольДоступна("ИзменениеДоверенностейКонтрагентов") ИЛИ РольДоступна("УчетДоговоров") Тогда 
		МассивРазрешенныхГрупп.Добавить("ГруппаДоверенности"); 
		МассивРазрешенныхГрупп.Добавить("Доверенности");
		МассивРазрешенныхЭлементов.Добавить("ДоверенностиДобавить");
		МассивРазрешенныхЭлементов.Добавить("ДоверенностиСкопировать");
		МассивРазрешенныхЭлементов.Добавить("ДоверенностиУдалить");
		МассивРазрешенныхЭлементов.Добавить("Доверенности");
	КонецЕсли;
	//--- AK suvv
	
	
	//+++АК LAGP 2018.05.15 ИП-00018489 "Создание и изменение данных в группе справочников контрагенты с кодом: Т00000461, Т00002073" 
	Если Объект.Родитель.Код = "Т00000461" ИЛИ Объект.Родитель.Код = "Т00002073" Тогда
		МассивРазрешенныхГрупп.Добавить("ГруппаДоверенности");
		МассивРазрешенныхЭлементов.Добавить("Доверенности");
		МассивРазрешенныхЭлементов.Добавить("ОГРН");		
	КонецЕсли;	
	//---АК LAGP
	
	//+++ AK suvv 12.07.2018 ИП-00019053
	МассивПраваРедактированиеКонтактныхЛицКонтрагента = УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактированиеКонтактныхЛицКонтрагентаВКарточке,Ложь,ПараметрыСеанса.ТекущийПользователь);	
	ЕстьПравоНаРедактированиеКонтактныхЛицКонтрагента = МассивПраваРедактированиеКонтактныхЛицКонтрагента[0];
	Если ЕстьПравоНаРедактированиеКонтактныхЛицКонтрагента Тогда
		МассивРазрешенныхГрупп.Добавить("ГруппаКонтактнаяИнформация");
		МассивРазрешенныхГрупп.Добавить("КонтактныеЛицаКонтрагента");
		МассивРазрешенныхГрупп.Добавить("КонтактныеЛицаКонтрагентаКонтекстноеМеню");
		МассивРазрешенныхГрупп.Добавить("КонтактныеЛицаКонтрагентаКоманднаяПанель");
	КонецЕсли;
	//--- AK suvv

	Для каждого ЭлементМассиваРазрешенныхГрупп Из МассивРазрешенныхГрупп Цикл
		Для каждого ПодчинённыйЭлемент Из ЭтаФорма.Элементы[ЭлементМассиваРазрешенныхГрупп].ПодчиненныеЭлементы Цикл
			ПодчинённыйЭлемент.Доступность = Истина;
		КонецЦикла;	
	КонецЦикла;
	
	Для каждого ЭлементМассиваРазрешенныхЭлементов Из МассивРазрешенныхЭлементов Цикл
		Попытка //+++АК LAGP 2017.12.07 Пришлось загнать в попытку, без неё у части пользователей, не находило кнопок ТЧ на форме и давало отказ, с попыткой почему-то находит, повторить не удалось. 
			ЭтаФорма.Элементы[ЭлементМассиваРазрешенныхЭлементов].Доступность = Истина;	
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	//+++АК LAGP 2017.12.07 ИП-00017434.01
	Если Объект.ОсновнойБухгалтерПокупателя = ПараметрыСеанса.ТекущийПользователь Тогда   
		ВидимостьЭДО();				             
	КонецЕсли;	
	//---АК LAGP
		
КонецПроцедуры	

//+++ AK suvv 24.04.2018 ИП-00018355
&НаКлиенте
Процедура ДоверенностиБессрочноПриИзменении(Элемент)
	
	ТекДанные = Элементы.Доверенности.ТекущиеДанные;
	Если ТекДанные.Бессрочно Тогда
		ТекДанные.СрокДействия = Дата(0001,01,01);
	Конецесли;
	
КонецПроцедуры //--- AK suvv

//++ АК luza 20.06.2018 ИП-00018589
&НаКлиенте
Процедура МЙ_ОсновнаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры
//-- АК luza 20.06.2018 ИП-00018589

//+++ AK suvv 28.06.2018 ИП-00018768
Функция ИсключитьНедопустимыеСимволыИзСтроки(СтрокаДляОбработки)
	
	СписокНедопустимыхСимволов = Новый СписокЗначений;
	СписокНедопустимыхСимволов.Добавить("\");
	СписокНедопустимыхСимволов.Добавить("/");
	СписокНедопустимыхСимволов.Добавить(":");
	СписокНедопустимыхСимволов.Добавить("*");
	СписокНедопустимыхСимволов.Добавить("?");
	СписокНедопустимыхСимволов.Добавить("""");
	СписокНедопустимыхСимволов.Добавить("<");
	СписокНедопустимыхСимволов.Добавить(">");
	СписокНедопустимыхСимволов.Добавить("|");
	
	НовСтрока = "";
	
	Для Сч = 1 по СтрДлина(СтрокаДляОбработки) Цикл
      		ТекСимв = Сред(СтрокаДляОбработки, Сч, 1);
    		Если Найти(СписокНедопустимыхСимволов, ТекСимв) = 0 Тогда
    			НовСтрока = НовСтрока + ТекСимв;
			Иначе
				НовСтрока = НовСтрока + " ";
			КонецЕсли;
		КонецЦикла;

	Возврат СокрЛП(НовСтрока);
	
КонецФункции //--- AK suvv

//+++АК luza ИП-00019743, AK suvv 2018.12.17 ИП-00020483.01 исправлена ошибка в названии
&НаСервере
Процедура ЗаписатьГрузополучателяСервер()
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Грузополучатель_По_Умолчанию;	
	Запись.Значение = Грузополучатель;
	Запись.Записать();	
КонецПроцедуры

//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
&НаКлиенте
Процедура НадписьФизЛицоКонтрагентаНажатие(Элемент)

	Если ЗначениеЗаполнено(Элементы.НадписьФизЛицоКонтрагента.Подсказка) Тогда
		ПривязанноеФизЛицо 	= ОбработатьФизЛицо(Элементы.НадписьФизЛицоКонтрагента.Подсказка);
		ФормаФизЛица 		= ПривязанноеФизЛицо.ПолучитьФорму("ФормаЭлементаУправляемая", ЭтаФорма);
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияДиалогов", ЭтаФорма, Новый Структура("ПричинаОповещения", "ОтредактированоФизЛицо"));
		ПараметрыФормы	= Новый Структура("Ключ", ПривязанноеФизЛицо);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	Иначе		
		ПараметрыОтбора = Новый Структура("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		ПараметрыФормы	= Новый Структура("Отбор", ПараметрыОтбора);
		
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	КонецЕсли;                            
	
КонецПроцедуры

//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
&НаСервере
Функция ОбработатьФизЛицо(КодФизЛица = Неопределено)
	
	Если ЗначениеЗаполнено(КодФизЛица) Тогда
		НайденноеФизЛицо 	= Справочники.ФизическиеЛица.НайтиПоКоду(КодФизЛица);
		Возврат НайденноеФизЛицо;	
	КонецЕсли;	
	
КонецФункции	

//+++АК LAGP 2018.10.02 ИП-00018521.01
&НаСервере
Функция ОпределитьФизЛицо(Контрагент)
	
	Возврат Справочники.Контрагенты.ОпределитьФизЛицоКонтрагента(Контрагент);	
	
КонецФункции	

//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
&НаКлиенте
Процедура ОбновитьОтображениеФизЛица()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") И Объект.ОКОПФ.Пустая() Тогда
		Элементы.НадписьФизЛицоКонтрагента.Видимость = Истина;
		ФизЛицо = ОпределитьФизЛицо(Объект.Ссылка); 
		Если ТипЗнч(ФизЛицо) = Тип("Строка") Тогда
			Элементы.НадписьФизЛицоКонтрагента.Заголовок 	= ФизЛицо;
			Элементы.НадписьФизЛицоКонтрагента.ЦветТекста 	= WebЦвета.Красный;
			Элементы.НадписьФизЛицоКонтрагента.Подсказка	= "";
		ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(ФизЛицо) Тогда
			Элементы.НадписьФизЛицоКонтрагента.Заголовок 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "Наименование");
			Элементы.НадписьФизЛицоКонтрагента.ЦветТекста 	= WebЦвета.СинийСоСтальнымОттенком;
			Элементы.НадписьФизЛицоКонтрагента.Подсказка	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "Код");
		КонецЕсли;
	Иначе
		Элементы.НадписьФизЛицоКонтрагента.Видимость = Ложь;	
	КонецЕсли;	
	
КонецПроцедуры

//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо
&НаКлиенте
Процедура ОбработкаОповещенияДиалогов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ПричинаОповещения") Тогда
		Если ДополнительныеПараметры.ПричинаОповещения = "ЗаписьФизЛица" И ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("КодВозвратаДиалога") И Результат = КодВозвратаДиалога.Да Тогда
			Если ДополнительныеПараметры.Свойство("ФизЛицо") И ЗначениеЗаполнено(ДополнительныеПараметры.ФизЛицо) Тогда
				ОбъектФизЛица = ДополнительныеПараметры.ФизЛицо.ПолучитьОбъект();
				ОбъектФизЛица.Контрагент = Объект.Ссылка;
				ВозниклоИсключение = Ложь;
				Попытка
					ОбъектФизЛица.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
					ВозниклоИсключение = Истина;
				КонецПопытки;				
			КонецЕсли;
			Если ЗначениеЗаполнено(НеобходимоЗакрытьФорму) И НеобходимоЗакрытьФорму И НЕ ВозниклоИсключение Тогда
				ЭтаФорма.Закрыть();	
			КонецЕсли;	
		ИначеЕсли ДополнительныеПараметры.ПричинаОповещения = "СозданиеКонтрагента" И ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("КодВозвратаДиалога") И Результат = КодВозвратаДиалога.Да Тогда
			ПараметрыОтбора = Новый Структура("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			ПараметрыФормыВыбора = Новый Структура("Событие, Контрагент", "УстановкаСвязиКонтрагентФизлицо", Объект.Ссылка);
			ПараметрыФормы	= Новый Структура("Отбор, ДополнительныеПараметры", ПараметрыОтбора, ПараметрыФормыВыбора);
			
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("КодВозвратаДиалога") И Результат = КодВозвратаДиалога.Нет И ЗначениеЗаполнено(НеобходимоЗакрытьФорму) И НеобходимоЗакрытьФорму Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
		ОбновитьОтображениеФизЛица();
	КонецЕсли;
	                            
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//+++АК LAGP 2018.10.02 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") И НЕ ЗначениеЗаполнено(Элементы.НадписьФизЛицоКонтрагента.Подсказка) И ЗначениеЗаполнено(ФормаСозданияКонтрагентаОткрыта) И ФормаСозданияКонтрагентаОткрыта И Объект.ОКОПФ.Пустая() Тогда
		Отказ = Истина;
		НеобходимоЗакрытьФорму = Истина;
		ФормаСозданияКонтрагентаОткрыта = Ложь;	
	КонецЕсли;
	//+++АК LAGP	
	
КонецПроцедуры

&НаКлиенте
Процедура ОКОПФОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьОтображениеФизЛица(); //+++АК LAGP 2018.10.28 ИП-00018521.01 Проверка физ.лица контрагента ЮрФизЛицо = ФизЛицо

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02   
&НаСервере
Процедура ЗаполнитьРеквизитыИзЗначенийСвойствОбъектов()
	
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НеПриниматьКВычетуНДС);
	МассивСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.СтатьяСписания); //статья списания
	МассивСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.ВключатьВРассылкуПоВендингам);
	
	ЗнСвойств = ЗаполнениеДокументов.ВернутьТаблицуЗначенийСвойств(МассивСвойств, Объект.Ссылка); //Тз - объект, свойство, значение
	
	Если ЗнСвойств.Количество() Тогда
		УстановитьЗначениеСвойстваОбъекта(НеПриниматьКВычетуНДС, НеПриниматьКВычетуНДСПрочитанный, ПланыВидовХарактеристик.СвойстваОбъектов.НеПриниматьКВычетуНДС, ЗнСвойств); 
		УстановитьЗначениеСвойстваОбъекта(СтатьяСписания, СтатьяСписанияПрочитанный, ПланыВидовХарактеристик.СвойстваОбъектов.СтатьяСписания, ЗнСвойств);
		УстановитьЗначениеСвойстваОбъекта(ВключатьВРассылкуПоВендингам, ВключатьВРассылкуПоВендингамПрочитанный, ПланыВидовХарактеристик.СвойстваОбъектов.ВключатьВРассылкуПоВендингам, ЗнСвойств);					
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02
&НаСервере
Процедура УстановитьЗначениеСвойстваОбъекта(РеквизитОбъекта, РеквизитОбъектаПрочитанный, ЭлементПВХ, ЗнСвойств)

	//т.к. значения свойств тут в рамках одного объекта, то можно пренебречь поиском по разрезу "Объект", а тупо искать по колонке "Свойство".
	НайдСтрТаблицыСвойств = ЗнСвойств.Найти(ЭлементПВХ, "Свойство");
		
	Если НЕ НайдСтрТаблицыСвойств = Неопределено Тогда
		РеквизитОбъекта = НайдСтрТаблицыСвойств.Значение;
		РеквизитОбъектаПрочитанный = РеквизитОбъекта;
	КонецЕсли;

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02
&НаСервере
Процедура ЗаписатьЗначенияСвойствОбъектаИзРеквизитов(СоответствиеИзмененныхРекв)
	
	Для Каждого ЭлСоответствия Из СоответствиеИзмененныхРекв Цикл
		ЗаписатьСвойствоОбъектаВРегистр(ЭлСоответствия.Ключ, ЭлСоответствия.Значение);
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02
&НаСервере
Процедура ЗаписатьСвойствоОбъектаВРегистр(ЗначениеСвойства, Свойство)

	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.Свойство = Свойство;	
	Запись.Значение = ЗначениеСвойства;
	Запись.Записать();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
 		
	//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02
	СоответствиеИзмененныхРекв = Новый Соответствие;
	
	Если НеПриниматьКВычетуНДС <> НеПриниматьКВычетуНДСПрочитанный Тогда
		СоответствиеИзмененныхРекв.Вставить(НеПриниматьКВычетуНДС, ПланыВидовХарактеристик.СвойстваОбъектов.НеПриниматьКВычетуНДС);
	КонецЕсли;
	
	Если СтатьяСписания <> СтатьяСписанияПрочитанный Тогда
		СоответствиеИзмененныхРекв.Вставить(СтатьяСписания, ПланыВидовХарактеристик.СвойстваОбъектов.СтатьяСписания);
	КонецЕсли;

	Если ВключатьВРассылкуПоВендингам <> ВключатьВРассылкуПоВендингамПрочитанный Тогда
		СоответствиеИзмененныхРекв.Вставить(ВключатьВРассылкуПоВендингам, ПланыВидовХарактеристик.СвойстваОбъектов.ВключатьВРассылкуПоВендингам);
	КонецЕсли;

	ЗаписатьЗначенияСвойствОбъектаИзРеквизитов(СоответствиеИзмененныхРекв);	
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

//+++АК PISH 2018.11.06 ИП-00019917.03
&НаСервере
Процедура ЭДО_АвтоматическиПриИзмененииНаСервере()
	
	Менеджер 			= РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Менеджер.Объект 	= Объект.Ссылка;
	Менеджер.Свойство 	= ПланыВидовХарактеристик.СвойстваОбъектов.ЭДО_ОтправлятьАвтоматически;
	Менеджер.Значение 	= ЭДО_Автоматически;
	
	Менеджер.Записать();
	
КонецПроцедуры
//---АК PISH

//+++АК PISH 2018.11.06 ИП-00019917.03
&НаКлиенте
Процедура ЭДО_АвтоматическиПриИзменении(Элемент)
	ЭДО_АвтоматическиПриИзмененииНаСервере();
КонецПроцедуры
//---АК PISH

	
//+++АК PISH 2018.11.06 ИП-00019917.03
Процедура ВосстановитьЗначениеОтправкиВЭДОАвтоматически()
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.ЭДО_ОтправлятьАвтоматически);
	ТабСвойств = ЗаполнениеДокументов.ВернутьТаблицуЗначенийСвойств(Массив,Объект.Ссылка);
	
	Если ТабСвойств.Количество() > 0 Тогда 
		ЭДО_Автоматически = ТабСвойств[0].Значение;	
	КонецЕсли;
		
КонецПроцедуры
//---АК PISH

//+++АК LAGP 2018.11.29 ИП-00020291 Загрузка договоров депозита из pdf банка
&НаКлиенте
Процедура ЗагрузитьДоговорДепозита(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие; 
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытияФайла.ПолноеИмяФайла = ""; 
	Текст = "ru = ""Текст""; en = ""Text"""; 
	Фильтр = НСтр(Текст)+"(*.pdf)|*.pdf"; 
	ДиалогОткрытияФайла.Фильтр = Фильтр; 
	ДиалогОткрытияФайла.МножественныйВыбор = Истина; 
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы"; 
	Если ДиалогОткрытияФайла.Выбрать() Тогда 
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы; 
		Для Каждого ИмяФайла Из МассивФайлов Цикл 			
			НовыйДоговор = ПрочитатьPDFДепозит(ИмяФайла);
			ФормаНовогоДоговора = НовыйДоговор.ПолучитьФорму("ФормаЭлемента");
			ФормаНовогоДоговора.Открыть();
		КонецЦикла; 
	Иначе 
		Текст = "ru = ""Файл(ы) не выбран!""; en = ""File(s) not selected!"""; 
		Предупреждение(НСтр(Текст));	
	КонецЕсли;	
		
КонецПроцедуры

//+++АК LAGP 2018.11.30 ИП-00020291 Загрузка договоров депозита из pdf банка
&НаСервере
Функция ПрочитатьPDFДепозит(ИмяФайла)
	
	Возврат Справочники.ДоговорыКонтрагентов.ПрочитатьPDFДепозит(ИмяФайла);
	
КонецФункции	

//+++АК luza ИП-00019743, AK suvv 2018.12.17 ИП-00020483.01 исправлена ошибка в названии
&НаСервере
Процедура ЗаполнитьГрузополучателяСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.Грузополучатель_По_Умолчанию);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		Грузополучатель = ТЗ[0].Значение;
		ТекГрузополучатель = Грузополучатель; 
	КонецЕсли;	
	
КонецПроцедуры
