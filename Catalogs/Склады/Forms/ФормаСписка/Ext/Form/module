
Перем НовыйСклад;
Перем ТекущийПриемникПеретаскивания;

Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)

	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(СправочникСписок);
	
	ТаблицаРезультата = Построитель.Результат.Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ТаблицаРезультата[0].Ссылка;
		//дальше сработает СправочникСписокПриАктивизацииСтроки()
	КонецЕсли;

КонецПроцедуры

Процедура СправочникСписокПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекСклад = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПоказатьДеревоНоменклатуры(СтруктурнаяЕдиница, ТекСклад);

КонецПроцедуры

Процедура ПоказатьДеревоНоменклатуры(СтруктурнаяЕдиница, Склад) Экспорт
	
	//Состав номенклатуры на данном складе
	Массив = ДатьМассивНоменклатурыСклада(Неопределено, СтруктурнаяЕдиница, Склад);
	
	//Выборка номенклатуры из справочника
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Список", Массив);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Список)
	|	И Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	//Убрать "паразитные" ветви
	УдалитьДублиВПоддереве(Дерево);
	
	//Обновление на форме
	НоменклатураСклада = Дерево;
	ЭлементыФормы.НоменклатураСклада.СоздатьКолонки();
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Процедура УдалитьДублиВПоддереве(СтрокаДерева)
	
	Для Каждого ТекСтрокаДерева Из СтрокаДерева.Строки Цикл
		
		//поиск и удаление дубля на уровне +1
		СтрокаДубля = ТекСтрокаДерева.Строки.Найти(ТекСтрокаДерева.Ссылка);
		Если НЕ СтрокаДубля = Неопределено Тогда
			ТекСтрокаДерева.Строки.Удалить(СтрокаДубля);
		КонецЕсли;
		
		//рекурсия
		УдалитьДублиВПоддереве(ТекСтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьУровеньНоменклатуры(Группа)
	
   мРодитель = Группа.Родитель;
   Возврат ?(Не ЗначениеЗаполнено(мРодитель), 1, 1 + ПолучитьУровеньНоменклатуры(мРодитель));
   
КонецФункции

Функция ВыполнитьПривязкуСервер(Номенклатура, СтруктурнаяЕдиница, НовыйСклад)
	
	Набор = РегистрыСведений.ДоступностьТоваровНаСкладах.СоздатьНаборЗаписей();
	
	//Отвязываем отовсюду
	Массив = ДатьМассивНоменклатурыСклада(Номенклатура, СтруктурнаяЕдиница, Неопределено);
	Для Каждого Элемент Из Массив Цикл
		Набор.Отбор.Номенклатура	.Установить(Элемент, Истина);
		Набор.Отбор.СтруктурнаяЕдиница	.Установить(СтруктурнаяЕдиница, Истина);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать(Истина);
	КонецЦикла;
	
	//В случае добавления номенклатуры сюда передана группа 2-го уровня
	//Если пертаскивание группы 1-го уровня, то нужно по факту переместить подчиненные ей группы
	Если ПолучитьУровеньНоменклатуры(Номенклатура)=1 Тогда
		//массив уже есть
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Номенклатура);
	КонецЕсли;
	
	//Привязываем
	Набор.Отбор.Сбросить();
	Для Каждого Элемент Из Массив Цикл
		СтрокаРегистра						= Набор.Добавить();
		СтрокаРегистра.Номенклатура	= Элемент;
		СтрокаРегистра.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
		СтрокаРегистра.Склад				= НовыйСклад;
	КонецЦикла;
	Набор.Записать(Ложь);
	
КонецФункции

Процедура СправочникСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	СтандартнаяОбработка = Ложь;
	
	НовыйСклад							= Строка;
	ТекущийСклад						= ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	ПараметрыПеретаскивания.Действие	= ?(ЗначениеЗаполнено(НовыйСклад) И НовыйСклад<>ТекущийСклад,
											ДействиеПеретаскивания.Перемещение,
											ДействиеПеретаскивания.Отмена);
											
	ТекущийПриемникПеретаскивания		= Элемент;
	
КонецПроцедуры

Процедура НоменклатураСкладаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ТекущийПриемникПеретаскивания = Элемент;

КонецПроцедуры

Процедура НоменклатураСкладаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Перем Номенклатура;
	
	СтандартнаяОбработка = Ложь;
	
	//Отсеиваем ненужные ситуации
	Если ТекущийПриемникПеретаскивания<>ЭлементыФормы.СправочникСписок Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Номенклатура = ПараметрыПеретаскивания.Значение.Ссылка;
	Исключение
	КонецПопытки;
	
	Если НовыйСклад=Неопределено Или ТипЗнч(Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	//Спросить пользователя
	Если Вопрос("Переместить """ + Строка(Номенклатура) + """ на склад """ + Строка(НовыйСклад) + """?", РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	//Работаем
	ВыполнитьПривязкуСервер(Номенклатура, СтруктурнаяЕдиница, НовыйСклад);
	СправочникСписокПриАктивизацииСтроки(Неопределено);
		
КонецПроцедуры

Процедура КнопкаДобавитьГруппуНоменклатурыНажатие(Кнопка)
	
	//Справочник складов не выведен - отсекаем
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные=Неопределено Тогда
		Предупреждение("Не выбран склад!");
		Возврат;
	КонецЕсли;
	
	//При записи в регистр структурная единица нужна будет обязательно
	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Предупреждение("Не указана структурная единица!");
		Возврат;
	КонецЕсли;
	
	//Выбор группы номенклатуры
	Форма		= Справочники.Номенклатура.ПолучитьФормуВыбораГруппы();
	Результат	= Форма.ОткрытьМодально();
	
	//Действуем, если пользователь выбрал
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если ПолучитьУровеньНоменклатуры(Результат)<>2 Тогда
			Предупреждение("Можно добавлять группы только 2-го уровня!");
			Возврат;
		КонецЕсли;
		
		НовыйСклад		= ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
		ТекущийСклад	= ДатьСкладНоменклатуры(Результат, СтруктурнаяЕдиница);
		
		//Проверка того, что номенклатура уже привязана
		Если ЗначениеЗаполнено(ТекущийСклад) Тогда
			Если НовыйСклад = ТекущийСклад Тогда
				Предупреждение("Группа """ + Строка(Результат) + """ уже привязана к данному складу. Операция отменена");
				Возврат;
			Иначе
				Если Вопрос("Группа """ + Строка(Результат) + """ сейчас привязана к """ + Строка(ТекущийСклад) + """. Будет перемещена на """ + Строка(НовыйСклад) + """. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьПривязкуСервер(Результат, СтруктурнаяЕдиница, НовыйСклад);
		СправочникСписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ДатьМассивНоменклатурыСклада(НоменклатураРодитель, СтруктурнаяЕдиница, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СтруктурнаяЕдиница",	СтруктурнаяЕдиница);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И 1 = 1
	|	И 2 = 2";
	
	//Склад определен - для показа дерева номенклатуры
	//Не определен - для отвязки отовсюду перед привязкой
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.Параметры.Вставить("Склад", Склад);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", "ДоступностьТоваровНаСкладах.Склад = &Склад");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураРодитель) Тогда
		Запрос.Параметры.Вставить("Родитель", НоменклатураРодитель);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "2 = 2", "ДоступностьТоваровНаСкладах.Номенклатура В ИЕРАРХИИ (&Родитель)");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

Функция ДатьСкладНоменклатуры(Номенклатура, СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
							|	ДоступностьТоваровНаСкладах.Склад
							|ИЗ
							|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
							|ГДЕ
							|	ДоступностьТоваровНаСкладах.Номенклатура = &Номенклатура
							|	И ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
							|	");
							
	Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
	Запрос.Параметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Склад, Неопределено);
	
КонецФункции

