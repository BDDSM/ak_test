
//+++АК SHEP 2017.11.27 ИП-00017310 Добавлен Http-сервис UserMessages
//Создание сервиса рассылок сотрудникам ВВ для внешних компаний

//+++АК SHEP 2017.11.27 ИП-00017310
// <Описание процедуры>
//
// Параметры:
//  <ВходныеДанные>  - <Структура> - структура данных для заполнения
//  <ПараметрыЗапроса>  - <ФиксированноеСоответствие> - ПараметрыURL или ПараметрыЗапроса Запроса HTTP-Сервиса
Процедура ЗаполнитьВходныеПараметры(ВходныеДанные, ПараметрыЗапроса)
	
	//ЗаполнитьЗначенияСвойств(ВходныеДанные, Запрос.ПараметрыЗапроса); так не работает, хотя должно (
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Если ВходныеДанные.Свойство(ПараметрЗапроса.Ключ) Тогда
			ВходныеДанные[ПараметрЗапроса.Ключ] = ПараметрЗапроса.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВходныеПараметры()

//+++АК SHEP 2017.11.27 ИП-00017310
//input:
//{
//	"login": "строка",
//	"password": "строка"
//}
Функция login(Запрос)
	
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если ПустаяСтрока(СтрокаJSON) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ВходныеДанные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если ТипЗнч(ВходныеДанные) <> Тип("Структура") ИЛИ НЕ ВходныеДанные.Свойство("login") ИЛИ НЕ ВходныеДанные.Свойство("password") Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ФИО = ВходныеДанные.login;
	Пароль = ВходныеДанные.password;
	
	СтруктураВозврата = Новый Структура("id,login,name,surname,phone,email", , ФИО, "", "", "", "");
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформация_Телефон.Представление КАК СТРОКА(100)), """") КАК phone,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформация_EMail.Представление КАК СТРОКА(100)), """") КАК EMail
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация_Телефон
		|		ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация_Телефон.Объект
		|			И (КонтактнаяИнформация_Телефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		//|			И (КонтактнаяИнформация_Телефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
		|			И ((ВЫРАЗИТЬ(КонтактнаяИнформация_Телефон.Представление КАК СТРОКА(100))) <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация_EMail
		|		ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация_EMail.Объект
		|			И (КонтактнаяИнформация_EMail.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (КонтактнаяИнформация_EMail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ФизическиеЛица.Наименование = &ФИО
		|	И ФизическиеЛица.КабинетРассылкиПароль = &Пароль
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления");
	Запрос.УстановитьПараметр("ФИО", ФИО);
	Запрос.УстановитьПараметр("Пароль", Пароль);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Ответ = Новый HTTPСервисОтвет(401);
		Ответ.УстановитьТелоИзСтроки("Неверный логин или пароль", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаЗапроса);
		ФизЛицоСсылка = ВыборкаЗапроса.Ссылка;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("id", Строка(ФизЛицоСсылка.УникальныйИдентификатор()));
	МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);
	СтруктураВозврата["surname"] = МассивФИО[0];
	СтруктураВозврата["name"] = МассивФИО[1];
	
	ЗаголовкиHTTPОтвета = Новый Соответствие;
	ЗаголовкиHTTPОтвета.Вставить("X-Auth-Token", "Bearer " + СтруктураВозврата.id);
	
	Ответ = Новый HTTPСервисОтвет(200, "Успешно", ЗаголовкиHTTPОтвета);
	Ответ.УстановитьТелоИзСтроки(РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураВозврата), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.11.30 ИП-00017310
Функция ПолучитьФизЛицоАвторизации(ЗаголовкиЗапроса, ТекФизЛицоИД = "")
	
	ТекФизЛицоИД = ЗаголовкиЗапроса.Получить("X-Auth-Token");
	Если ТекФизЛицоИД = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	ТекФизЛицоИД = СокрЛП(СтрЗаменить(ТекФизЛицоИД, "Bearer", ""));
	
	Попытка
		ТекФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекФизЛицоИД));
	Исключение
		ТекФизЛицо = Неопределено;
	КонецПопытки;
	
	Возврат ТекФизЛицо;
	
КонецФункции

//---АК SHEP 2017.11.30 
//+++АК SHEP 2017.11.28 ИП-00017310
//GET /messages?page={page number}&perPage={page size} - получить страницу page number, размер страниц при этом = page size
Функция СообщенияПолучитьСписок(Запрос)
	
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ВходныеДанные = Новый Структура("page,perPage");
	ЗаполнитьВходныеПараметры(ВходныеДанные, Запрос.ПараметрыЗапроса);
	
	НомерСтраницы = "";
	НаСтраницу = "";
	
	Если НЕ ВходныеДанные.Свойство("page", НомерСтраницы) ИЛИ НЕ ЗначениеЗаполнено(НомерСтраницы) ИЛИ НЕ ВходныеДанные.Свойство("perPage", НаСтраницу) ИЛИ НЕ ЗначениеЗаполнено(НаСтраницу) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	КоличествоЗаписей = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СообщенияФизЛиц.Ссылка) КАК КоличествоЗаписей
		|ИЗ
		|	Справочник.СообщенияФизЛиц КАК СообщенияФизЛиц
		|ГДЕ
		|	СообщенияФизЛиц.Владелец = &Владелец
		|	И НЕ СообщенияФизЛиц.ПометкаУдаления");
	Запрос.УстановитьПараметр("Владелец", ТекФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		КоличествоЗаписей = ВыборкаЗапроса.КоличествоЗаписей;
		
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 999
			|	СообщенияФизЛиц.Ссылка,
			|	СообщенияФизЛиц.Наименование,
			|	СообщенияФизЛиц.ДатаСообщения КАК ДатаСообщения,
			|	СообщенияФизЛиц.Получатели.(
			|		Получатель
			|	),
			|	СообщенияФизЛиц.ДопАдресаты.(
			|		Адрес
			|	),
			|	СообщенияФизЛиц.ЕстьВложения
			|ИЗ
			|	Справочник.СообщенияФизЛиц КАК СообщенияФизЛиц
			|ГДЕ
			|	СообщенияФизЛиц.Владелец = &Владелец
			|	И НЕ СообщенияФизЛиц.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаСообщения УБЫВ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "999", Формат(НомерСтраницы * НаСтраницу, "ЧГ="));
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Владелец", ТекФизЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Счётчик = 0;
			МассивСообщений = Новый Массив;
			НачальнаяЗапись = (НомерСтраницы - 1) * НаСтраницу;
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			Пока ВыборкаЗапроса.Следующий() Цикл
				Счётчик = Счётчик + 1;
				Если Счётчик <= НачальнаяЗапись Тогда Продолжить; КонецЕсли; // пропускаем ненужные записи
				
				МассивПолучателей = Новый Массив;
				ПолучателиРезультатЗапроса = ВыборкаЗапроса.Получатели;
				Если НЕ ПолучателиРезультатЗапроса.Пустой() Тогда
					СтруктураПолучатели = СтруктураПолучатели();
					ПолучателиВыборка = ПолучателиРезультатЗапроса.Выбрать();
					Пока ПолучателиВыборка.Следующий() Цикл
						Получатель = ПолучателиВыборка["Получатель"];
						МассивПолучателей.Добавить(Новый Структура("id,name", Получатель, СтруктураПолучатели[Получатель]));
					КонецЦикла;
				КонецЕсли;
				
				МассивДопАдресатов = Новый Массив;
				ПолучателиРезультатЗапроса = ВыборкаЗапроса.ДопАдресаты;
				Если НЕ ПолучателиРезультатЗапроса.Пустой() Тогда
					ПолучателиВыборка = ПолучателиРезультатЗапроса.Выбрать();
					Пока ПолучателиВыборка.Следующий() Цикл
						МассивДопАдресатов.Добавить(ПолучателиВыборка.Адрес);
					КонецЦикла;
				КонецЕсли;
				
				СтруктураПолучателей = Новый Структура("groups,emails", МассивПолучателей, МассивДопАдресатов);
				
				МассивСообщений.Добавить(Новый Структура("id,date,subject,text,recipients,attachments",
					XMLСтрока(ВыборкаЗапроса.Ссылка), ЗаписатьДатуJSON(ВыборкаЗапроса.ДатаСообщения, ФорматДатыJSON.ISO), ВыборкаЗапроса.Наименование, ВыборкаЗапроса.Наименование,
					СтруктураПолучателей, ВыборкаЗапроса.ЕстьВложения));
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураОтвета.Вставить("messages", МассивСообщений);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("total", КоличествоЗаписей);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураОтвета), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.11.28 ИП-00017310
//GET /messages/{message_id} - получить сообщение с id = message_id
Функция ПолучитьСообщениеGET(Запрос)
	
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ВходныеДанные = Новый Структура("message_id");
	ЗаполнитьВходныеПараметры(ВходныеДанные, Запрос.ПараметрыURL);
	
	ИД_Сообщения = ВходныеДанные["message_id"];
	Если НЕ ЗначениеЗаполнено(ИД_Сообщения) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	СообщениеСсылка = Справочники.СообщенияФизЛиц.ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Сообщения));
	Если НЕ ЗначениеЗаполнено(СообщениеСсылка) Тогда
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.УстановитьТелоИзСтроки("Не найдено сообщение " + ИД_Сообщения, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
	
	//output:
	//	{
	//	    "id": id сообщения,
	//      "date": "дата/время",
	//	    "text": "строка - полный текст сообщения",
	//	    "recipients": {
	//        	"groups": [
	//        		{
	//                	"id": id получателя, 
	//                	"name": "строка - имя получателя"
	//            	}, ...
	//        	],
	//      	"emails": [email1, email2, ...]
	//		"attachments": [
	//			{
	//			    "id": id прикрепленного файла,
	//			    "name": "имя файла",
	//			}, ...
	//		]		
	//	}
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("id", ИД_Сообщения);
	СтруктураОтвета.Вставить("date", СообщениеОбъект.ДатаСообщения);
	СтруктураОтвета.Вставить("subject", СообщениеОбъект.Наименование);
	СтруктураОтвета.Вставить("text", СообщениеОбъект.ТекстСообщения);
	
	МассивПолучателей = Новый Массив;
	Если СообщениеОбъект.Получатели.Количество() > 0 Тогда
		МассивПолучателей1С = СообщениеОбъект.Получатели.ВыгрузитьКолонку("Получатель");
		СтруктураПолучатели = СтруктураПолучатели();
		Для Каждого Получатель Из МассивПолучателей1С Цикл
			МассивПолучателей.Добавить(Новый Структура("id,name", Получатель, СтруктураПолучатели[Получатель]));
		КонецЦикла;
	КонецЕсли;
	
	МассивДопАдресатов = Новый Массив;
	Если СообщениеОбъект.ДопАдресаты.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ Из СообщениеОбъект.ДопАдресаты Цикл
			МассивДопАдресатов.Добавить(СтрокаТЧ.Адрес);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПолучателей = Новый Структура("groups,emails", МассивПолучателей, МассивДопАдресатов);
	СтруктураОтвета.Вставить("recipients", СтруктураПолучателей);
	
	Если Ложь И СообщениеОбъект.ЦФО.Количество() > 0 Тогда
		МассивЦФО = СообщениеОбъект.ЦФО.ВыгрузитьКолонку("ЦФО");
		СтруктураОтвета.Вставить("CFO", МассивЦФО);
	КонецЕсли;
	
	Если СообщениеОбъект.Вложения.Количество() > 0 Тогда
		МассивВложений = Новый Массив;
		Для Каждого СтрокаТЧ Из СообщениеОбъект.Вложения Цикл
			МассивВложений.Добавить(Новый Структура("id,name", СтрокаТЧ.ИмяФайла, СтрокаТЧ.НазваниеФайла));
		КонецЦикла;
		СтруктураОтвета.Вставить("attachments", МассивВложений);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураОтвета), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.11.28 ИП-00017310
//POST /messages - отправка нового сообщения
Функция СообщенияЗаписьНового(Запрос)
	
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если ПустаяСтрока(СтрокаJSON) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ВходныеДанные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщениеФизЛица = Справочники.СообщенияФизЛиц.СоздатьЭлемент();
	СообщениеФизЛица.Владелец = ТекФизЛицо;
	СообщениеФизЛица.ТекстСообщения = ВходныеДанные.text;
	СообщениеФизЛица.ДатаСообщения = ТекущаяДата();
	Если ВходныеДанные.Свойство("subject") Тогда
		СообщениеФизЛица.Наименование = ВходныеДанные["subject"];
	КонецЕсли;
	
	МассивДанныхТЧ = Новый Массив;
	СтруктураДанныхТЧ = Новый Структура;
	Если ВходныеДанные.Свойство("recipients", СтруктураДанныхТЧ) И ТипЗнч(СтруктураДанныхТЧ) = Тип("Структура") Тогда
		Если СтруктураДанныхТЧ.Свойство("groups", МассивДанныхТЧ) Тогда
			Для Каждого Получатель Из МассивДанныхТЧ Цикл
				НоваяСтрокаТЧ = СообщениеФизЛица.Получатели.Добавить();
				НоваяСтрокаТЧ.Получатель = Получатель;
			КонецЦикла;
		КонецЕсли;
		Если СтруктураДанныхТЧ.Свойство("emails", МассивДанныхТЧ) Тогда
			Для Каждого Получатель Из МассивДанныхТЧ Цикл
				НоваяСтрокаТЧ = СообщениеФизЛица.ДопАдресаты.Добавить();
				НоваяСтрокаТЧ.Адрес = Получатель;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ВходныеДанные.Свойство("CFO", МассивДанныхТЧ) И ТипЗнч(МассивДанныхТЧ) = Тип("Массив") Тогда
		Для Каждого ЦФО Из МассивДанныхТЧ Цикл
			НоваяСтрокаТЧ = СообщениеФизЛица.ЦФО.Добавить();
			НоваяСтрокаТЧ.ЦФО = ЦФО;
		КонецЦикла;
	КонецЕсли;
	
	Если ВходныеДанные.Свойство("attachments", МассивДанныхТЧ) И ТипЗнч(МассивДанныхТЧ) = Тип("Массив") Тогда
		Для Каждого СтрокаТЧ Из МассивДанныхТЧ Цикл
			Если ТипЗнч(СтрокаТЧ) <> Тип("Структура") Тогда Продолжить; КонецЕсли;
			НоваяСтрокаТЧ = СообщениеФизЛица.Вложения.Добавить();
			НоваяСтрокаТЧ.НазваниеФайла = СтрокаТЧ.name;
			НоваяСтрокаТЧ.ИмяФайла = СтрокаТЧ.id;
		КонецЦикла;
	КонецЕсли;
	
	СообщениеФизЛица.Записать();
	
	// если нет доп. св-ва "НеОтправлять", тогда отправляем
	Если Запрос.Заголовки.Получить("NotSending") = Неопределено Тогда
		
		ТекАдресПользователя = КонтактнаяИнформацияОбъекта(ТекФизЛицо, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));
		//ТекАдресПользователя = "shep@automacon.ru";
		
		// отправка сообщения
		//Попытка
			
			Если НЕ ЗначениеЗаполнено(ТекАдресПользователя) Тогда
				ВызватьИсключение "У пользователя не указан адрес электронной почты (Email физ. лица)!";
			КонецЕсли;
			
			ОбработкаПочтоваяРассылкаОбъект = Обработки.ПочтоваяРассылка.Создать();
			ОбработкаПочтоваяРассылкаОбъект.АдресОтправителя = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.РассылкаИнформации");
			Получатели = СообщениеФизЛица.Получатели.ВыгрузитьКолонку("Получатель");
			//Если Получатели.Найти("ТорговыеТочки") <> Неопределено Тогда
				Получатели.Добавить("Избенка");
				Получатели.Добавить("Магазины");
			//КонецЕсли;
			
			ОбработкаПочтоваяРассылкаОбъект.ДопАдресаты.Загрузить(СообщениеФизЛица.ДопАдресаты.Выгрузить());
			
			Для Каждого Получатель Из Получатели Цикл
				ОбработкаПочтоваяРассылкаОбъект[Получатель] = Истина;
			КонецЦикла;
			
			Если СообщениеФизЛица.ЦФО.Количество() = 0 Тогда
				ОбработкаПочтоваяРассылкаОбъект.ВсеЦФОНаСервере();
			Иначе
				Для Каждого СтрокаТЧ Из СообщениеФизЛица.ЦФО Цикл
					НоваяСтрокаТЧ = ОбработкаПочтоваяРассылкаОбъект.ЦФО.Добавить();
					НоваяСтрокаТЧ.ЦФО = СтрокаТЧ.ЦФО;
				КонецЦикла;
			КонецЕсли;
			
			Если СообщениеФизЛица.Вложения.Количество() > 0 Тогда
				КаталогХраненияФайлов = Справочники.СообщенияФизЛиц.КаталогХраненияФайлов(СообщениеФизЛица.Владелец);
				Для Каждого СтрокаТЧ Из СообщениеФизЛица.Вложения Цикл
					ФайлДвоичныхДанных = Новый Файл(КаталогХраненияФайлов + СтрокаТЧ.ИмяФайла);
					Если НЕ ФайлДвоичныхДанных.Существует() Тогда Продолжить; КонецЕсли;
					
					НоваяСтрокаТЧ = ОбработкаПочтоваяРассылкаОбъект.ВложенныеФайлы.Добавить();
					НоваяСтрокаТЧ.ИмяФайла = СтрокаТЧ.НазваниеФайла;
					НоваяСтрокаТЧ.СсылкаНаФайл = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлДвоичныхДанных.ПолноеИмя));
				КонецЦикла;
			КонецЕсли;
			
			ОбработкаПочтоваяРассылкаОбъект.ТекАдресПользователя = ТекАдресПользователя;
			ОбработкаПочтоваяРассылкаОбъект.ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
			ОбработкаПочтоваяРассылкаОбъект.ЗаголовокПисьма = СообщениеФизЛица.Наименование;
			ОбработкаПочтоваяРассылкаОбъект.ТекстПисьма =
			"<HTML>
			|<HEAD><META HTTP-EQUIV='Content-Type' CONTENT='text/html; CHARSET=utf-8'></HEAD>
			|<BODY>" + СообщениеФизЛица.ТекстСообщения + "
			|</BODY></HTML>";
			
			СпЗнПолучателей = Запрос.Заголовки.Получить("To");
			Если СпЗнПолучателей <> Неопределено Тогда
				СпЗнПолучателей = СтрЗаменить(СпЗнПолучателей, ";", ",");
				МассивПолучателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СпЗнПолучателей, ",");
				СпЗнПолучателей = Новый СписокЗначений;
				СпЗнПолучателей.ЗагрузитьЗначения(МассивПолучателей);
			КонецЕсли;
			
			ОбработкаПочтоваяРассылкаОбъект.ОтправитьПочтовыеСообщения(СпЗнПолучателей);
			
			// записываем список получателей
			СообщениеФизЛица.СписокПолучателей.Загрузить(ОбработкаПочтоваяРассылкаОбъект.СписокПолучателей.Выгрузить());
			СообщениеФизЛица.Записать();
			
			ОбработкаПочтоваяРассылкаОбъект = Неопределено;
			
		//Исключение
		//	СообщениеФизЛица.УстановитьПометкуУдаления(Истина);
		//	Ответ = Новый HTTPСервисОтвет(500);
		//	//Ответ.Заголовки.Вставить("Error", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); // нужно кодировать в base64 или URLEncoding
		//	//Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки(), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		//	Ответ.УстановитьТелоИзСтроки("При обработке запроса произошла ошибка: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		//	Возврат Ответ;
		//КонецПопытки;
		
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(201);
	Ответ.УстановитьТелоИзСтроки("Создано успешно", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
	Исключение
		//СообщениеФизЛица.УстановитьПометкуУдаления(Истина);
		Ответ = Новый HTTPСервисОтвет(500);
		//Ответ.Заголовки.Вставить("Error", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); // нужно кодировать в base64 или URLEncoding
		//Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки(), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Ответ.УстановитьТелоИзСтроки("При обработке запроса произошла ошибка: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецПопытки;

КонецФункции

//+++АК SHEP 2017.12.01 ИП-00017310
//GET /uploads/{file_id}
Функция ВложениеПолучить(Запрос)
	
	ИД_ФизЛица = "";
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки, ИД_ФизЛица);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ВходныеДанные = Новый Структура("file_id");
	ЗаполнитьВходныеПараметры(ВходныеДанные, Запрос.ПараметрыURL);
	
	ИД_Файла = ВходныеДанные["file_id"];
	Если НЕ ЗначениеЗаполнено(ИД_Файла) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	КаталогХраненияФайлов = Справочники.СообщенияФизЛиц.КаталогХраненияФайлов(ИД_ФизЛица);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлДвоичныхДанных = Новый Файл(КаталогХраненияФайлов + ИД_Файла);
	Если НЕ ФайлДвоичныхДанных.Существует() Тогда
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.УстановитьТелоИзСтроки("Не найдено", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	//Попытка
		ДвоичныеДанные = Новый ДвоичныеДанные(ФайлДвоичныхДанных.ПолноеИмя);
	//Исключение
	//	Возврат Новый HTTPСервисОтвет(500, "500 - При обработке запроса произошла ошибка");
	//КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.12.04 ИП-00017310
//POST /uploads
Функция ЗагрузкаВложенияPOST(Запрос)
	
	ИД_ФизЛица = "";
	ЗаголовкиЗапроса = Запрос.Заголовки;
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(ЗаголовкиЗапроса, ИД_ФизЛица);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = Запрос.ПолучитьТелоКакДвоичныеДанные();
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ИмяПолучаемогоФайла = "";
	
	// Content-Disposition: form-data; name="fieldName"; filename="filename.jpg" (пример)
	ЗаголовокИмениФайла = ЗаголовкиЗапроса.Получить("Content-Disposition");
	Если ЗаголовокИмениФайла <> Неопределено Тогда
		ЗаголовокИмениФайла = СокрЛП(СтрЗаменить(ЗаголовокИмениФайла, "Content-Disposition:", ""));
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаголовокИмениФайла, ";");
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива = СокрЛП(СтрокаМассива);
			Если Найти(СтрокаМассива, "filename") = 1 Тогда
				Поз = Найти(СтрокаМассива, "=");
				Если Поз <> 0 Тогда
					ИмяПолучаемогоФайла = СтрЗаменить(Сред(СтрокаМассива, Поз + 1), """", "");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПолучаемыйФайл = Новый Файл(ИмяПолучаемогоФайла);
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Попытка
		КаталогХраненияФайлов = Справочники.СообщенияФизЛиц.КаталогХраненияФайлов(ИД_ФизЛица);
		ИмяСохраняемогоФайла = Строка(Новый УникальныйИдентификатор) + ПолучаемыйФайл.Расширение;
		ДвоичныеДанныеФайла.Записать(КаталогХраненияФайлов + ИмяСохраняемогоФайла);
	//Исключение
	//	Возврат Новый HTTPСервисОтвет(500, "500 - При обработке запроса произошла ошибка");
	//КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(ИмяСохраняемогоФайла, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.12.04 ИП-00017310
//DELETE /uploads/{file_id}
Функция ВложениеУдалить(Запрос)
	
	ИД_ФизЛица = "";
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки, ИД_ФизЛица);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ВходныеДанные = Новый Структура("file_id");
	ЗаполнитьВходныеПараметры(ВходныеДанные, Запрос.ПараметрыURL);
	
	ИД_Файла = ВходныеДанные["file_id"];
	Если НЕ ЗначениеЗаполнено(ИД_Файла) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	КаталогХраненияФайлов = Справочники.СообщенияФизЛиц.КаталогХраненияФайлов(ИД_ФизЛица);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлДвоичныхДанных = Новый Файл(КаталогХраненияФайлов + ИД_Файла);
	Если НЕ ФайлДвоичныхДанных.Существует() Тогда
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.УстановитьТелоИзСтроки("Не найдено", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	//Попытка
		УдалитьФайлы(ФайлДвоичныхДанных.ПолноеИмя);
	//Исключение
	//	Возврат Новый HTTPСервисОтвет(500, "500 - При обработке запроса произошла ошибка");
	//КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Успешно", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.12.04 ИП-00017310
//GET /recipients
Функция ПолучателиПолучить(Запрос)
	
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	МассивПолучателей = Новый Массив;
	СтруктураПолучатели = СтруктураПолучатели();
	
	Для Каждого КлючИЗначение Из СтруктураПолучатели Цикл
		МассивПолучателей.Добавить(Новый Структура("id,name", КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200, "Успешно");
	Ответ.УстановитьТелоИзСтроки(РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(МассивПолучателей), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.12.13 ИП-00017310
//GET /cfo
Функция ЦФОПолучить(Запрос)
	
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбработкаПочтоваяРассылкаОбъект = Обработки.ПочтоваяРассылка.Создать();
	ОбработкаПочтоваяРассылкаОбъект.ВсеЦФОНаСервере();
	
	МассивЦФО = Новый Массив;
	Для Каждого СтрокаТЗнЦФО Из ОбработкаПочтоваяРассылкаОбъект.ЦФО Цикл
		ТекЦФО = СтрокаТЗнЦФО.ЦФО;
		МассивЦФО.Добавить(Новый Структура("id,name", XMLСтрока(ТекЦФО), Строка(ТекЦФО)));
	КонецЦикла;
	ОбработкаПочтоваяРассылкаОбъект = Неопределено;
	
	Ответ = Новый HTTPСервисОтвет(200, "Успешно");
	Ответ.УстановитьТелоИзСтроки(РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(МассивЦФО), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2017.12.13 ИП-00017310
// Возвращаем начальную страницу index.html
Функция НачальнаяСтраницаIndex(Запрос)
	
	//ИндексХТМЛ = "index.html";
	ИндексХТМЛ = "
	|<!DOCTYPE html>
	|<html lang=""en"">
	|  <head>
	|    <meta charset=""utf-8"">
	|    <title>mailer</title>
	|    <link rel=""stylesheet"" href=""/dist/style.css"">
	|  </head>
	|  <body>
	|    <div id=""app""></div>
	|    <script src=""/dist/build.js""></script>
	//|    <script src=""/IzbenkaFin/hs/UserMessages/dist/build.js""></script>
	|  </body>
	|</html>
	|";
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Ответ.Заголовки.Вставить("Authorization", "VXNlck1lc3NhZ2VzOjlpOHUmWV5U");// чтобы не выдавалось стандартное окно 1С-авторизации, кодируем в base64 строку Логин:Пароль для UserMessages
	Ответ.УстановитьТелоИзСтроки(ИндексХТМЛ, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции

//+++АК SHEP 2018.01.09 ИП-00017310
// Вспомогательная, возвращает структуру получателей
Функция СтруктураПолучатели()
	СтруктураПолучатели = Новый Структура;
	СтруктураПолучатели.Вставить("ТорговыеТочки", "Торговые точки");
	СтруктураПолучатели.Вставить("ПомошникиТерриториальныхУправляющих", "Помощники территориальных управляющих");
	СтруктураПолучатели.Вставить("ТерриториальныеУправляющие", "Территориальные управляющие");
	СтруктураПолучатели.Вставить("ВсеЧислящиесяВШтатеОфисники", "Офис");	
	Возврат СтруктураПолучатели;
КонецФункции

//+++АК SHEP 2018.01.18 ИП-00017310
Функция КонтактнаяИнформацияОбъекта(Объект, ВидКИ, ТипКИ = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)), """") КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Вид = &ВидКИ
		|	И (&ТипКИ = НЕОПРЕДЕЛЕНО
		|			ИЛИ КонтактнаяИнформация.Тип = &ТипКИ)");
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ВидКИ", ВидКИ);
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Возврат СокрЛП(ВыборкаЗапроса.Представление);
	
КонецФункции

//+++АК SHEP 2018.02.26 ИП-00017310
//GET /recipients/{recipient_id}/addresses
Функция СписокПолучателейПолучить(Запрос)
	
	ТекФизЛицо = ПолучитьФизЛицоАвторизации(Запрос.Заголовки);
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.УстановитьТелоИзСтроки("Не авторизован", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	ВходныеДанные = Новый Структура("group_id");
	ЗаполнитьВходныеПараметры(ВходныеДанные, Запрос.ПараметрыURL);
	
	ИД_Получателя = ВходныеДанные["group_id"];
	Если НЕ ЗначениеЗаполнено(ИД_Получателя) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Неверные входные данные", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	//output:
	//[
	//	{
	//		"name": "имя/фио",
	//		"email": "адрес электронной почты"
	//	},
	//	{...}, ...
	//]	
	
	МассивПолучателей = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаПочтоваяРассылкаОбъект = Обработки.ПочтоваяРассылка.Создать();
	ОбработкаПочтоваяРассылкаОбъект.АдресОтправителя = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.РассылкаИнформации");
	
	Получатели = Новый Массив;
	Получатели.Добавить(ИД_Получателя);
	Получатели.Добавить("Избенка");
	Получатели.Добавить("Магазины");
	Для Каждого Получатель Из Получатели Цикл
		ОбработкаПочтоваяРассылкаОбъект[Получатель] = Истина;
	КонецЦикла;
	
	ОбработкаПочтоваяРассылкаОбъект.ТекстПисьма = "Тест"; // иначе не пропускает
	ОбработкаПочтоваяРассылкаОбъект.ВсеЦФОНаСервере();
	ОбработкаПочтоваяРассылкаОбъект.ПостроитьСписокАдресатовНаСервере(ИД_Получателя = "ВсеЧислящиесяВШтатеОфисники");
	
	СписокПолучателей = ОбработкаПочтоваяРассылкаОбъект.СписокПолучателей;
	Если СписокПолучателей.Количество() > 0 Тогда
		СписокПолучателей.Сортировать("ПредставлениеПолучателя");
		Для Каждого Получатель Из СписокПолучателей Цикл
			МассивПолучателей.Добавить(Новый Структура("name,email", Получатель.ПредставлениеПолучателя, Получатель.АдресТелефон));
		КонецЦикла;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(МассивПолучателей), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
КонецФункции
