//+++АК MOSD 2018.11.22 ЗА-00019570 

#Область СлужебныеМетоды

Функция АвторизацияУспешна(Запрос)
	
	Токен = ИнтеграцияТилси.Токен();
	
	Возврат ЗначениеЗаполнено(Токен) И (Запрос.Заголовки.Получить("1S_AUTH_TOKEN") = Токен);
	
КонецФункции

Функция ОтветОК()
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Возврат Ответ;
	
КонецФункции

Функция РезультатСОшибкой(КодОшибки, ТекстОшибки)
	
	Ответ = Новый HTTPСервисОтвет(КодОшибки);
	Ответ.УстановитьТелоИзСтроки(ТекстОшибки, КодировкаТекста.UTF8);
	
	Результат = Новый Структура;
	Результат.Вставить("Ответ", Ответ);
	Результат.Вставить("ЕстьОшибки", Истина);
	Результат.Вставить("Данные", Неопределено);
	
	ИнтеграцияТилси.СохранитьОшибкуВЖурналеРегистрации("" + КодОшибки + " " + ТекстОшибки);
		
	Возврат Результат;
	
КонецФункции	

Функция РезультатСДанными(Данные)
	
	Возврат Новый Структура("Ответ, Данные, ЕстьОшибки", Неопределено, Данные, Ложь);
	
КонецФункции

Функция ПрочитатьДанныеЗапроса(Запрос, МассивИменСвойствСоЗначениямиДата)
	
	Если НЕ АвторизацияУспешна(Запрос) Тогда
		Возврат РезультатСОшибкой(403, "Ошибка авторизации.");
	КонецЕсли;
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	
	Если НЕ ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Возврат РезультатСОшибкой(400, "Пустое тело запроса.");
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;        
	Чтение.УстановитьСтроку(ТелоЗапроса);
	
	Попытка
		Данные = ПрочитатьJSON(Чтение, 
							   Истина,
							   ,
							   ,
							   "ВосстановитьДатуИзСтроки",
							   ОбщегоНазначения.ОбщийМодуль("ИнтеграцияТилси"),
							   Неопределено,
							   МассивИменСвойствСоЗначениямиДата);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = "Ошибка чтения JSON.
					  |" + ?(ИнфОбОшибке.Причина = Неопределено, ИнфОбОшибке.Описание, ИнфОбОшибке.Причина.Описание);
		
		Возврат РезультатСОшибкой(400, ТекстОшибки);
	КонецПопытки;
	
	Чтение.Закрыть();

	Возврат РезультатСДанными(Данные);
	
КонецФункции


Функция ПрочитатьЗначениеПоля(Данные, ИмяПоля, ОжидаемыйТип, ТекстОшибки)
	
	ЗначениеПоля = Данные.Получить(ИмяПоля);
	
	Если ЗначениеПоля = Неопределено Тогда
		ИнтеграцияТилси.ДополнитьТекстОшибки(ТекстОшибки, "Отсутствует поле """ + ИмяПоля + """");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоля) <> ОжидаемыйТип Тогда
		ИнтеграцияТилси.ДополнитьТекстОшибки(ТекстОшибки, "Неверный тип поля """ + ИмяПоля + """. Ожидаемый тип """+Строка(ОжидаемыйТип)+""".");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеПоля;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиЗапросов

Функция НоменклатураPOST(Запрос)
	Возврат ОтветОК();		
КонецФункции

Функция ЦеныPOST(Запрос)
	Возврат ОтветОК();	
КонецФункции

Функция ПополненияPOST(Запрос)
	Возврат ОтветОК();	
КонецФункции

Функция ОрдераPOST(Запрос)
	
	МассивИменСвойствСоЗначениямиДата = Новый Массив;
	МассивИменСвойствСоЗначениямиДата.Добавить("CreateDate");
	МассивИменСвойствСоЗначениямиДата.Добавить("ExpectedDeliveryDate");       

	Результат = ПрочитатьДанныеЗапроса(Запрос, МассивИменСвойствСоЗначениямиДата);
	Если Результат.ЕстьОшибки Тогда
		Возврат Результат.Ответ;
	КонецЕсли;
	
	Результат = ПрочитатьДанныеОрдера(Результат.Данные);
	Если Результат.ЕстьОшибки Тогда
		Возврат Результат.Ответ;
	КонецЕсли;
	
	Результат = СоздатьОрдер(Результат.Данные);
	Если Результат.ЕстьОшибки Тогда
		Возврат Результат.Ответ;
	КонецЕсли;
	
	Возврат ОтветОК();
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаОрдеров

Функция ПрочитатьДанныеОрдера(Данные)
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Возврат РезультатСОшибкой(400, "Неверная структура данных.");
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ДанныеОрдера = Новый Структура;
	ДанныеОрдера.Вставить("ДатаСоздания",          ПрочитатьЗначениеПоля(Данные, "CreateDate",           Тип("Дата"),   ТекстОшибки));
	ДанныеОрдера.Вставить("ОжидаемаяДатаДоставки", ПрочитатьЗначениеПоля(Данные, "ExpectedDeliveryDate", Тип("Дата"),   ТекстОшибки));
	ДанныеОрдера.Вставить("ПокупательИНН",         ПрочитатьЗначениеПоля(Данные, "CustomerUserInn",      Тип("Строка"), ТекстОшибки));
	ДанныеОрдера.Вставить("ПоставщикИНН",          ПрочитатьЗначениеПоля(Данные, "SupplierUserInn",      Тип("Строка"), ТекстОшибки));
	
	МассивСтрок = ПрочитатьЗначениеПоля(Данные, "data", Тип("Массив"), ТекстОшибки);
	
	Если ЗначениеЗаполнено(МассивСтрок) Тогда
		
		ТаблицаСтрок = Новый ТаблицаЗначений;
		ТаблицаСтрок.Колонки.Добавить("ШтрихКод",   Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
		ТаблицаСтрок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15,3)));
		
		ДанныеОрдера.Вставить("ТаблицаСтрок", ТаблицаСтрок);
		
		Для Каждого ТекСтр Из МассивСтрок Цикл
			
			НовСтр = ДанныеОрдера.ТаблицаСтрок.Добавить();
			НовСтр.ШтрихКод   = ПрочитатьЗначениеПоля(ТекСтр, "Barcode",  Тип("Строка"), ТекстОшибки);
			НовСтр.Количество = ПрочитатьЗначениеПоля(ТекСтр, "Quantity", Тип("Число"),  ТекстОшибки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат РезультатСОшибкой(400, ТекстОшибки);
	Иначе
		Возврат РезультатСДанными(ДанныеОрдера);
	КонецЕсли;
	
КонецФункции

Функция СоздатьОрдер(Данные)
	
	ТекстОшибки = "";
	ИнтеграцияТилси.СоздатьВебЗаказПокупателя(Данные, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат РезультатСОшибкой(500, ТекстОшибки);
	Иначе
		Возврат РезультатСДанными(Неопределено);
	КонецЕсли;

	
КонецФункции

#КонецОбласти  
