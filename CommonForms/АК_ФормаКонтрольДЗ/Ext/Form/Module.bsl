&НаСервере
Процедура ОтправитьУведомленияНаСервере()
	ТЗ_СписокДокументов = ДанныеФормыВЗначение(СписокДокументов,Тип("ТаблицаЗначений"));
	ДокументыДляУведомления = ТЗ_СписокДокументов.НайтиСтроки(Новый Структура("ОтправитьУведомление",Истина));
	ТЗ_Данные = ТЗ_СписокДокументов.СкопироватьКолонки();
	Для Каждого Документ из ДокументыДляУведомления Цикл
		Строка = ТЗ_Данные.Добавить();
		ЗаполнитьЗначенияСвойств(Строка,Документ);
		//Строка.Ответственный = Документ.Документ.Ответственный;
	КонецЦикла;
	
	Менеджеры = ТЗ_Данные.Скопировать();
	Менеджеры.Свернуть("Ответственный","ПревышениеПоКонтрагенту");
	Для Каждого Менеджер из Менеджеры Цикл
		Если Менеджер.ПревышениеПоКонтрагенту >0 Тогда
			//+++АК Познахарёв 2017-05-09
			//МассивДокументы = ТЗ_Данные.НайтиСтроки();
			//Получатели = Новый Массив;
			//Получатели.Добавить(Менеджер.Ответственный);
			//АК_КонтрольЗадолженности.ОтправитьУведомление(Получатели,МассивДокументы,НаДату,РежимТестирования);
			
			Контрагенты = ТЗ_Данные.Скопировать(Новый Структура("Ответственный",Менеджер.Ответственный)).ВыгрузитьКолонку("Контрагент");
			АК_КонтрольЗадолженности.ОтправитьУведомлениеПоОтчетуДляМенеджера(Менеджер.Ответственный,Контрагенты);
			//---АК Познахарёв 2017-05-09
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОтправитьУведомления(Команда)
	Если Вопрос("Отправить уведомления по заявкам с превышением лимитов?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	ОтправитьУведомленияНаСервере();
	Сообщить("Уведомления отправлены");
КонецПроцедуры

&НаСервере 
Процедура ПрочитатьЛимиты(МассивСсылок)
	
	МассивДокументов = Новый Массив;
	СписокДокументов.Очистить();
	
	МинДата = Дата(1, 1, 1);
	Для Каждого Документ из МассивСсылок Цикл
		НоваяСтрока = СписокДокументов.Добавить();
		НоваяСтрока.Документ 	= Документ;
		НоваяСтрока.Контрагент 	= Документ.Контрагент;
		НоваяСтрока.Организация = Документ.Организация;
		Если АК_КонтрольЗадолженности.КонтролироватьДЗ(Документ)Тогда
			МассивДокументов.Добавить(Документ);
		Иначе
			Попытка
				НоваяСтрока.СуммаКОплате=Документ.СуммаДокумента
			Исключение
			КонецПопытки;   
			НоваяСтрока.Комментарий = "Не контролируется"
		КонецЕсли;
		МинДата = Макс(МинДата, Документ.Дата);
	КонецЦикла;
	НаДату = Макс(НаДату, МинДата);
	Если МассивДокументов.Количество() > 0 Тогда
		ДоступныеЛимиты = АК_КонтрольЗадолженности.ДоступныеЛимитыДЗ(МассивДокументов, НаДату);
		Для Каждого Документ ИЗ ДоступныеЛимиты Цикл
			Строка = СписокДокументов.НайтиСтроки(Новый Структура("Документ", Документ.Ссылка))[0];
			Строка.СуммаКОплате 			= Документ.СуммаКОплате;
			Строка.ДоступныйЛимит 			= Документ.ДоступныйЛимит;
			Строка.СуммаПревышения 			= Документ.СуммаКОплате-Документ.ДоступныйЛимит;
			Строка.ПревышениеЛимитаВсего 	= Документ.ПревышениеЛимита;
			Строка.Ответственный 			= Документ.Ответственный;
			Строка.ОтправитьУведомление 	= Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Познахарёв 26.04.17
	ТабОстатковПоРазделамУчета = АК_КонтрольЗадолженности.ОстаткиПоРазделамУчетаСЛимитами(МассивСсылок,СписокДокументов.Выгрузить().ВыгрузитьКолонку("Контрагент"), НаДату).Выгрузить(); 
	ЗначениеВРеквизитФормы(ТабОстатковПоРазделамУчета, "ОстаткиПоРазделамУчета");
	
	Для Каждого Стр Из СписокДокументов Цикл
		ИтогиПоКонтру = ТабОстатковПоРазделамУчета.НайтиСтроки(Новый Структура("Организация, РазделУчета, Контрагент", NULL, NULL, Стр.Контрагент));
		Если ИтогиПоКонтру.Количество() > 0 Тогда
			Стр.ПревышениеПоКонтрагенту = ИтогиПоКонтру[0].Превышение + Стр.СуммаКОплате;
		КонецЕсли;	
	КонецЦикла;	
	//
	
КонецПроцедуры

&НаСервере
Функция ЕстьСуммыПревышения()
	//+++АК Познахарёв 2017-05-09
	//Возврат СписокДокументов.Итог("СуммаПревышения") >0
	Возврат СписокДокументов.Итог("ПревышениеПоКонтрагенту") >0
	//---АК Познахарёв 2017-05-09
КонецФункции
	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК Познахарёв 2017-05-09
	Если Параметры.Свойство("СписокДокументов") Тогда
		ДокументыКонтроля.ЗагрузитьЗначения(Параметры.СписокДокументов);
		
		ЗаполнитьСписокКонтрагентов(ДокументыКонтроля);
		ЗаполнитьСписокДокументовПоОтчету(ДокументыКонтроля);
		//ЗапроситьУведомления = ЕстьСуммыПревышения();
	КонецЕсли;
	//НаДату = ТекущаяДата();
	//Если Параметры.Свойство("СписокДокументов") Тогда
	//	ПрочитатьЛимиты(Параметры.СписокДокументов);
	//	ЗапроситьУведомления = ЕстьСуммыПревышения();
	//КонецЕсли;
	//---АК Познахарёв 2017-05-09
КонецПроцедуры

//+++АК Познахарёв 2017-05-09
&НаСервере
Процедура ЗаполнитьСписокКонтрагентов(СписДокументов)
	ТекстЗапроса="ВЫБРАТЬ
	             |	ЗаявкаНаУслугиМатериалы.Контрагент,
	             |	НАЧАЛОПЕРИОДА(ЗаявкаНаУслугиМатериалы.Дата, ДЕНЬ) КАК Дата,
	             |	ЗаявкаНаУслугиМатериалы.Ссылка КАК Документ,
	             |	ЗаявкаНаУслугиМатериалы.Ответственный,
	             |	ЗаявкаНаУслугиМатериалы.Организация,
	             |	ЗаявкаНаУслугиМатериалы.СуммаДокумента
	             |ИЗ
	             |	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	             |ГДЕ
	             |	ЗаявкаНаУслугиМатериалы.Ссылка В(&МассивДокументов)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	РасходИзБанка.Контрагент,
	             |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, ДЕНЬ),
	             |	РасходИзБанка.Ссылка,
	             |	РасходИзБанка.Ответственный,
	             |	РасходИзБанка.Организация,
	             |	РасходИзБанка.СуммаДокумента
	             |ИЗ
	             |	Документ.РасходИзБанка КАК РасходИзБанка
	             |ГДЕ
	             |	РасходИзБанка.Ссылка В(&МассивДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("МассивДокументов",СписДокументов);
	ТЗ = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТЗ,"СписокКонтрагентов");
КонецПроцедуры	
&НаСервере
Процедура ЗаполнитьСписокДокументовПоОтчету(СписокСсылок,УчитыватьОчередьОплаты=Истина)
	МассивДляКонтроля = Новый Массив;
	Для Каждого Док Из СписокСсылок Цикл
		Если Не ЛимитПоДокументуНеКонтролировать(Док.Значение) Тогда
			МассивДляКонтроля.Добавить(Док.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	МассивДокументов = Новый Массив;
	СписокДокументов.Очистить();
	
	ДатаНач=СписокКонтрагентов[0].Дата;
	ДатаКон=СписокКонтрагентов[0].Дата;
	Для Каждого Стр Из СписокКонтрагентов Цикл
		ДатаНач = Мин(ДатаНач, Стр.Дата);
		ДатаКон = Макс(ДатаКон, Стр.Дата);
	КонецЦикла;	
	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = Отчеты.КонтрольДЗ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
	ЭтаФорма["АдресСхемы"] = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	СхемаКомпоновкиДанных.Параметры.МассивДокументовДляКонтроля.Значение = МассивДляКонтроля;
	СхемаКомпоновкиДанных.Параметры.ВсеКонтрагенты.Значение = Ложь;
	СхемаКомпоновкиДанных.Параметры.Контрагенты.Значение = СписокКонтрагентов.Выгрузить().ВыгрузитьКолонку("Контрагент");
	СхемаКомпоновкиДанных.Параметры.ДатаСрезаЛимитов.Значение = ТекущаяДата();
	СхемаКомпоновкиДанных.Параметры.НачалоПериодаДокументов.Значение = ДатаНач;
	СхемаКомпоновкиДанных.Параметры.КонецПериодаДокументов.Значение = КонецДня(ДатаКон);		
	СхемаКомпоновкиДанных.Параметры.УчитыватьОчередь.Значение = УчитыватьОчередьОплаты;
	
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.ТаблицаКонтроляДЗ.Настройки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого РезультатПоКонтрагенту ИЗ ТЗ Цикл
		//Для Каждого Док Из СписокКонтрагентов Цикл
		//	Если РезультатПоКонтрагенту.Контрагент = Док.Контрагент Тогда
				Строка = СписокДокументов.Добавить();
				//Строка.СуммаКОплате 			= Док.СуммаДокумента;
				Строка.ДоступныйЛимит 			= РезультатПоКонтрагенту.ОстатокЛимитаСУчетомКонтролируемогоДокумента;
				Строка.ПревышениеПоКонтрагенту 	= РезультатПоКонтрагенту.ПревышениеСУчетомКонтролируемогоДокумента;
				Строка.Ответственный 			= РезультатПоКонтрагенту.Ответственный;
				//Строка.Ответственный 			= Док.Ответственный;
				//Строка.Организация	 			= Док.Организация;
				Строка.Контрагент 				= РезультатПоКонтрагенту.Контрагент;
				Строка.ОтправитьУведомление 	= Строка.ПревышениеПоКонтрагенту>0;
		//	КонецЕсли;	
		//КонецЦикла;	
	КонецЦикла;
	////////////////////////////// вывод отчета
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТабОтчета.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТабОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ЭтаФорма["АдресДанныхРасшифровки"] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры
//---АК Познахарёв 2017-05-09

Процедура ОбновитьНаСервере(УчитыватьОчередьОплаты = Истина)
	// АК+++ Познахарёв 2017-05-09
	//ТЗ_СписокДокументов = ДанныеФормыВЗначение(СписокДокументов,Тип("ТаблицаЗначений"));
	ЗаполнитьСписокКонтрагентов(ДокументыКонтроля);
	ЗаполнитьСписокДокументовПоОтчету(ДокументыКонтроля,УчитыватьОчередьОплаты);
	//ПрочитатьЛимиты(ТЗ_СписокДокументов.ВыгрузитьКолонку("Документ"));
	// АК--- Познахарёв 2017-05-09
	Элементы.СписокДокументов.ВысотаВСтрокахТаблицы = Мин(20,СписокДокументов.Количество());
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере(Истина)
КонецПроцедуры

&НаСервере
Функция ДобавитьДокументНаСервере(Ссылка)Экспорт
	СтрокаСписка = СписокДокументов.Добавить();
	СтрокаСписка.Документ = Ссылка;
КонецФункции

&НаКлиенте
Функция ДобавитьДокумент(Ссылка)
КонецФункции

&НаСервере
Функция МожноПроводить(Ссылка)
	ДопустимоеПревышение=АК_КонтрольЗадолженности.ДопустимоеПревышениеПриПроведении(Ссылка.Дата);
	Если ДопустимоеПревышение=Неопределено Тогда 
		Возврат Истина
	КонецЕсли;
	
	// АК+++ Познахарёв 2017-05-09
	//ТекущееПревышение = СписокДокументов[0].ПревышениеЛимитаВсего;
	ТекущееПревышение = СписокДокументов[0].ПревышениеПоКонтрагенту;
	// АК--- Познахарёв 2017-05-09 
	
	Возврат ДопустимоеПревышение>=ТекущееПревышение
КонецФункции

&НаКлиенте
Функция ПревышенЛимит(Ссылка,Отказ=Ложь)Экспорт
	
	ЛимитПоДокументуНеКонтролировать = ЛимитПоДокументуНеКонтролировать(Ссылка);
	Если ЛимитПоДокументуНеКонтролировать Тогда
		Возврат Ложь;
	КонецЕсли;	
	Отказ = Ложь;
	ДокументыКонтроля.Очистить();
	ДокументыКонтроля.Добавить(Ссылка);
	ОбновитьНаСервере(ТипЗнч(Ссылка)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы"));
	// АК+++ Познахарёв 2017-05-09
	Возврат ЕстьСуммыПревышения();
	// АК--- Познахарёв 2017-05-09
КонецФункции

&НаСервере
Функция ЛимитПоДокументуНеКонтролировать(Ссылка)
	ТекстЗапроса="ВЫБРАТЬ
	             |	ЗаявкаНаУслугиМатериалы.Ссылка
	             |ИЗ
	             |	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	             |ГДЕ
	             |	ЗаявкаНаУслугиМатериалы.Ссылка = &Ссылка
	             |	И ЗаявкаНаУслугиМатериалы.СчетУчетаРасчетов В(&СчетаУчетаРасчетовпоАренде)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	РасходИзБанка.Ссылка
	             |ИЗ
	             |	Документ.РасходИзБанка КАК РасходИзБанка
	             |ГДЕ
	             |	РасходИзБанка.Ссылка = &Ссылка
	             |	И РасходИзБанка.СчетУчетаРасчетовСКонтрагентом В(&СчетаУчетаРасчетовпоАренде)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	СчетаУчетаРасчетовпоАренде = новый Массив;
	СчетаУчетаРасчетовпоАренде.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.1"));
	СчетаУчетаРасчетовпоАренде.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.2"));
	Запрос.УстановитьПараметр("СчетаУчетаРасчетовпоАренде",СчетаУчетаРасчетовпоАренде);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;	
КонецФункции	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗапроситьУведомления Тогда
		ПодключитьОбработчикОжидания("Спросить",0.2,Истина);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьУведомление()
КонецПроцедуры


&НаКлиенте
Процедура Спросить()
	Если ЭтаФорма.ВводДоступен() Тогда
		Элементы.НадписьОбработка.Видимость = Ложь;
		Если ЗапроситьУведомления Тогда
			ЗапроситьУведомления = Ложь;
			ЗапроситьОтправитьУведомления(Неопределено)
		КонецЕсли;
	Иначе
		ПодключитьОбработчикОжидания("Спросить",0.2,Истина);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриПовторномОткрытии()
	//Вставить содержимое обработчика
	Если ЗапроситьУведомления Тогда
		ПодключитьОбработчикОжидания("Спросить",0.2,Истина);
	КонецЕсли;	
КонецПроцедуры

// Познахарёв 26.04.17
&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	//ПодключитьОбработчикОжидания("ОбновитьОтборыВЗависимыхСписках",0.1,Истина);
КонецПроцедуры

//&НаКлиенте
//Процедура ОбновитьОтборыВЗависимыхСписках()
//	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
//	Если ТекущиеДанные = Неопределено Тогда
//		Возврат;
//	КонецЕсли;	
//	ОтборСтрок = Новый ФиксированнаяСтруктура("Контрагент",ТекущиеДанные.Контрагент);
//	Элементы.ОстаткиПоРазделамУчета.ОтборСтрок = ОтборСтрок;
//КонецПроцедуры	


&НаКлиенте
Процедура ОткрытьОтчет(Команда)
	ОткрытьФОрму("Отчет.КонтрольДЗ.Форма.ФормаОтчета");
КонецПроцедуры

//+++АК Познахарёв 2017-05-09
&НаКлиенте
Процедура ТабОтчетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОписаниеОбработкиРасшифровки = ОбработатьРасшифровкуКл( Расшифровка, СтандартнаяОбработка); 
	
	Если ОписаниеОбработкиРасшифровки <> Неопределено Тогда
		ОбработатьРасшифровкуОтчета(ОписаниеОбработкиРасшифровки);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРасшифровкуОтчета(ОписаниеОбработкиРасшифровки)
	
	ОбработатьРасшифровку(ОписаниеОбработкиРасшифровки);
	
КонецПроцедуры

Процедура ОбработатьРасшифровку(ОписаниеОбработкиРасшифровки) Экспорт
		
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ЭтаФорма["АдресДанныхРасшифровки"]);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма["АдресСхемы"]);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, 
																	ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
//
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТабОтчета.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТабОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    	
	ЭтаФорма["АдресДанныхРасшифровки"] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Функция ОбработатьРасшифровкуКл( Расшифровка, СтандартнаяОбработка) Экспорт
	
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки,
								Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия);
	
	ОписаниеОбработкиРасшифровки = Неопределено;
	
	Если Не (ПараметрВыполненногоДействия = Неопределено) Тогда
		
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ОткрытьЗначение(ПараметрВыполненногоДействия);
			
		Иначе
			
			ОписаниеОбработкиРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, Расшифровка, ПараметрВыполненногоДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОбработкиРасшифровки;
	
КонецФункции

//---АК Познахарёв 2017-05-09