Перем мИсходноеЗначениеПрименятьДатуЗапретаДляПолныхПрав;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполнения дерева основной даты запрета
//
Процедура ЗаполнитьОсновноеДерево()    
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |    Границы.Пользователь КАК Пользователь,
				   |    Границы.ГраницаЗапретаИзменений,
				   |    Границы.ГраницаЗапретаИзмененийМСФО,
				   |    // Поле ПризнакТипаСтроки используется для 
				   |    // обозначения уровня записи - Организация/ГруппаПользователей/Пользователь
				   |    ВЫБОР
				   |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
				   |            ТОГДА 1
				   |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
				   |            ТОГДА 2
				   |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
				   |            ТОГДА 3
				   |    КОНЕЦ КАК ПризнакТипаСтроки,
				   |    Истина как ПравоНаИзменение                   
				   |ИЗ
				   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
				   |ГДЕ
				   |    Границы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |    ПризнакТипаСтроки,
				   |    Пользователь
				   |АВТОУПОРЯДОЧИВАНИЕ";
	
	КореньДерева = ДеревоОсновнойДаты.Строки.Добавить();
	ОбщаяДата = Дата(1,1,1);    
    
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПризнакТипаСтроки = 1 Тогда
			ОбщаяДата = Выборка.ГраницаЗапретаИзменений;
			ОбщаяДатаМСФО = Выборка.ГраницаЗапретаИзмененийМСФО;
			Продолжить;
		КонецЕсли;    
		
		СтрокаДерева = КореньДерева.Строки.Добавить();
		СтрокаДерева.Пользователь       = Выборка.Пользователь;
		СтрокаДерева.Граница            = Выборка.ГраницаЗапретаИзменений;
		СтрокаДерева.ГраницаМСФО        = Выборка.ГраницаЗапретаИзмененийМСФО;
		СтрокаДерева.ТипСтроки          = Выборка.ПризнакТипаСтроки;
        СтрокаДерева.ПравоНаИзменение   = Выборка.ПравоНаИзменение;
	КонецЦикла;
	
	КореньДерева.Граница            = ОбщаяДата;
	КореньДерева.ГраницаМСФО        = ОбщаяДатаМСФО;
	КореньДерева.ТипСтроки          = 1;	
    КореньДерева.ПравоНаИзменение   = Истина;		
КонецПроцедуры

// Процедура заполнения дерева даты запрета регламентированных данных
//
Процедура ЗаполнитьРеглДерево()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);                   
	
	ДоступКОрганизациямОграничен = (НЕ РольДоступна("ПолныеПрава") 
										И ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей
										И ПараметрыСеанса.ИспользоватьОграничениеПоОрганизации);
	
	Запрос.УстановитьПараметр("ДоступКОрганизациямОграничен", ДоступКОрганизациямОграничен);                   
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТекущаяТаблица.Ссылка КАК Организация
	               |ИЗ
	               |	Справочник.Организации КАК ТекущаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			СоставГруппы.Ссылка КАК ГруппаПользователей
	               |		ИЗ
	               |			Справочник.ГруппыПользователей.ПользователиГруппы КАК СоставГруппы
	               |		ГДЕ
	               |			СоставГруппы.Пользователь = &ТекущийПользователь) КАК ГруппыПользователей
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	((НЕ &ДоступКОрганизациямОграничен)
	               |			ИЛИ (НЕ ГруппыПользователей.ГруппаПользователей ЕСТЬ NULL )
	               |				И (НЕ 1 В
	               |						(ВЫБРАТЬ ПЕРВЫЕ 1
	               |							1
	               |						ИЗ
	               |							РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |								ПО
	               |									НастройкиПравДоступаПользователей.ОбъектДоступа = ТекущаяТаблица.Ссылка
	               |										И НастройкиПравДоступаПользователей.ВидОбъектаДоступа = НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа
	               |										И НастройкиПравДоступаПользователей.ОбластьДанных = ЗНАЧЕНИЕ(Перечисление.ОбластиДанныхОбъектовДоступа.ПустаяСсылка)
	               |										И НастройкиПравДоступаПользователей.Пользователь = ГруппыПользователей.ГруппаПользователей
	               |										И НастройкиПравДоступаПользователей.Запись = ИСТИНА
	               |						ГДЕ
	               |							НазначениеВидовОбъектовДоступа.ГруппаПользователей = ГруппыПользователей.ГруппаПользователей
	               |							И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	               |							И НастройкиПравДоступаПользователей.ОбъектДоступа ЕСТЬ NULL )))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Организации.Ссылка КАК Организация,
	               |	ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) КАК Пользователь,
	               |	ЕСТЬNULL(Границы.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ГраницаЗапретаИзменений,
				   |	ЕСТЬNULL(Границы.ГраницаЗапретаИзмененийМСФО, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ГраницаЗапретаИзмененийМСФО,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	               |			ТОГДА 1
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
	               |			ТОГДА 2
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
	               |			ТОГДА 3
	               |	КОНЕЦ КАК ПризнакТипаСтроки
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
	               |		ПО (Границы.Организация = Организации.Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	ПризнакТипаСтроки,
	               |	Границы.Пользователь
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.ВыполнитьПакет();
	
	СписокДоступныхОрганизаций = Результат[0].Выгрузить().ВыгрузитьКолонку("Организация");
	
	Выборка = Результат[1].Выбрать();
	
	МассивСтрокКРазвороту = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
				
		Если Выборка.Пользователь = Неопределено Тогда
			СтрокаОрганизации = ДеревоРеглДаты.Строки.Добавить();
			СтрокаОрганизации.ОрганизацияПользователь = Выборка.Организация;
			СтрокаОрганизации.Граница = Выборка.ГраницаЗапретаИзменений;
			СтрокаОрганизации.ГраницаМСФО = Выборка.ГраницаЗапретаИзмененийМСФО;
			СтрокаОрганизации.ПравоНаИзменение = (СписокДоступныхОрганизаций.Найти(СтрокаОрганизации.ОрганизацияПользователь) <> Неопределено);
			СтрокаОрганизации.ТипСтроки = Выборка.ПризнакТипаСтроки;
		Иначе		
			
			Если СтрокаОрганизации = Неопределено Тогда
				// сначала добавляем корневую строку организации
				СтрокаОрганизации = ДеревоРеглДаты.Строки.Добавить();
				СтрокаОрганизации.ОрганизацияПользователь = Выборка.Организация;   
				СтрокаОрганизации.Граница = Выборка.ГраницаЗапретаИзменений;
				СтрокаОрганизации.ГраницаМСФО = Выборка.ГраницаЗапретаИзмененийМСФО;
				СтрокаОрганизации.ПравоНаИзменение = (СписокДоступныхОрганизаций.Найти(СтрокаОрганизации.ОрганизацияПользователь) <> Неопределено);
				СтрокаОрганизации.ТипСтроки = 1;
			КонецЕсли;    
			
			// добавляем строку текущего пользователя
			МассивСтрокКРазвороту.Добавить(СтрокаОрганизации);				
			СтрокаПользователя = СтрокаОрганизации.Строки.Добавить();
			СтрокаПользователя.ОрганизацияПользователь = Выборка.Пользователь;
			СтрокаПользователя.Граница = Выборка.ГраницаЗапретаИзменений;
			СтрокаПользователя.ГраницаМСФО = Выборка.ГраницаЗапретаИзмененийМСФО;
			СтрокаПользователя.ПравоНаИзменение = СтрокаОрганизации.ПравоНаИзменение;			
			СтрокаПользователя.ТипСтроки = Выборка.ПризнакТипаСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКРазвороту ИЗ МассивСтрокКРазвороту Цикл
		ЭлементыФормы.ДеревоРеглДаты.Развернуть(СтрокаКРазвороту);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеглДерево()

// Процедура создает запись в наборе регистра сведений
// ГраницыЗапретаИзмененияДанных 
// для строки дерева значений - основной и регламентированной даты
//
Процедура СоздатьЗаписьОсновногоДерева(СтрокиДерева, Набор, ОсновныеДаты ,ОсновныеДатыМСФО)
    
    Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
		Запись = Набор.Добавить();
		Запись.Организация = Справочники.Организации.ПустаяСсылка();
	   	Запись.Пользователь = СтрокаДерева.Пользователь;		
		Запись.ГраницаЗапретаИзменений = СтрокаДерева.Граница;
		Запись.ГраницаЗапретаИзмененийМСФО = СтрокаДерева.ГраницаМСФО;
		ОсновныеДаты[Запись.Пользователь] = Запись.ГраницаЗапретаИзменений;
		ОсновныеДаты[Запись.Пользователь] = Запись.ГраницаЗапретаИзмененийМСФО;
		СоздатьЗаписьОсновногоДерева(СтрокаДерева.Строки, Набор, ОсновныеДаты,ОсновныеДатыМСФО)
    КонецЦикла;
    
КонецПроцедуры // СоздатьЗаписьОсновногоДерева

// Процедура добавляет новую запись в дерево значений
//
Процедура ДобавитьСтрокуДерева(ТипСтроки, КорневаяСтрока, ИмяДерева, ИмяПоляПользователь = "Пользователь")
	
	// Если у пользователя нет права на редактирование данных
	// этой ветки - добавление в нее невозможно.
    Если НЕ ЕстьПраваНаИзменение(КорневаяСтрока) тогда
        Возврат;
    КонецЕсли;	                           
	
	Если ТипСтроки = 2 Тогда
		ФормаВыбора = Справочники.ГруппыПользователей.ПолучитьФормуВыбора();
		ФормаВыбора.Отбор.Ссылка.Установить(Справочники.ГруппыПользователей.ВсеПользователи);
		ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;     	   
	Иначе    
		ПараметрыФормы = Новый Структура("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ФормаВыбора = ПолучитьФорму("Справочник.Пользователи.Форма.ФормаВыбора", ПараметрыФормы);
	КонецЕсли;    
	
	ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	СуществующаяСтрока = КорневаяСтрока.Строки.Найти(ВыбранноеЗначение);
	Если Не  СуществующаяСтрока = Неопределено Тогда     
		ЭлементыФормы[ИмяДерева].ТекущаяСтрока = СуществующаяСтрока;
		
		Возврат;
	КонецЕсли;  
	
	СтрокаПользователя = КорневаяСтрока.Строки.Добавить();
	
	СтрокаПользователя[ИмяПоляПользователь] = ВыбранноеЗначение;
	СтрокаПользователя.Граница              = КорневаяСтрока.Граница;
	СтрокаПользователя.ТипСтроки            = ТипСтроки;		
	СтрокаПользователя.ПравоНаИзменение     = Истина;
	
	КорневаяСтрока.Строки.Сортировать("ТипСтроки, " + ИмяПоляПользователь);
	
	ЭлементыФормы[ИмяДерева].ТекущаяСтрока = СтрокаПользователя;
	
КонецПроцедуры // ДобавитьСтрокуДерева

// Процедура выполняет сохранение данных деревьев значений формы
// в регистр сведений "ГраницыЗапретаИзмененияДанных"
//
Процедура СохранитьДанные()
	
	ОсновныеДаты = Новый Соответствие;
	ОсновныеДатыМСФО = Новый Соответствие;
	// запись основного дерева дат	
	Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
    
	СоздатьЗаписьОсновногоДерева(ДеревоОсновнойДаты.Строки, Набор, ОсновныеДаты,ОсновныеДатыМСФО);    
    
	Набор.Записать();
	
	// запись дерева регл. дат
    Запрос = Новый Запрос;
    Запрос.Текст  = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	Организации.Ссылка КАК Организация
	    |ИЗ
	    |	Справочник.Организации КАК Организации";
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл		
        
        Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
        Набор.Отбор.Организация.Установить(Выборка.Организация);
        
        СтрокаВДереве = ДеревоРеглДаты.Строки.Найти(Выборка.Организация, "ОрганизацияПользователь");
        
        Запись = Набор.Добавить();
        Запись.Организация = Выборка.Организация;
        Запись.Пользователь = Неопределено;
        
		Если СтрокаВДереве = Неопределено Тогда
			// Для данной организации не установлена дата
            Запись.ГраницаЗапретаИзменений = Дата('00010101');
			Запись.ГраницаЗапретаИзмененийМСФО = Дата('00010101');
        Иначе
            Запись.ГраницаЗапретаИзменений = СтрокаВДереве.Граница;
			Запись.ГраницаЗапретаИзмененийМСФО = СтрокаВДереве.ГраницаМСФО;
            Для Каждого СтрокаПользователи ИЗ СтрокаВДереве.Строки Цикл       
                Запись                          = Набор.Добавить();                
                Запись.Организация              = Выборка.Организация;
                Запись.Пользователь             = СтрокаПользователи.ОрганизацияПользователь;
                Запись.ГраницаЗапретаИзменений  = СтрокаПользователи.Граница;
				Запись.ГраницаЗапретаИзмененийМСФО  = СтрокаПользователи.ГраницаМСФО;
            КонецЦикла;
			
        КонецЕсли;			
		
		Попытка
	        Набор.Записать();
		Исключение
		КонецПопытки;
        
    КонецЦикла;
	
	Если ПрименятьДатуЗапретаДляПолныхПрав <> мИсходноеЗначениеПрименятьДатуЗапретаДляПолныхПрав Тогда
		Константы.ПрименятьДатуЗапретаДляПолныхПрав.Установить(ПрименятьДатуЗапретаДляПолныхПрав);
		мИсходноеЗначениеПрименятьДатуЗапретаДляПолныхПрав = ПрименятьДатуЗапретаДляПолныхПрав;
	КонецЕсли; 
	
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	Модифицированность = Ложь;
	
КонецПроцедуры // СохранитьДанные

// Проверяет есть ли у пользователя права на изменение
//
Функция ЕстьПраваНаИзменение(ТекущаяСтрока, ПредупредитьЕслиНетПрав = Истина)

    Если НЕ ТекущаяСтрока.ПравоНаИзменение тогда
        СтрокаОрганизации = ?(ТекущаяСтрока.Уровень() = 0, ТекущаяСтрока, ТекущаяСтрока.Родитель);
		Если ПредупредитьЕслиНетПрав Тогда
	        Предупреждение("Недостаточно прав для изменения настройки по организации");
		КонецЕсли; 
        
        Возврат Ложь;
    КонецЕсли;	                           
	
    Возврат Истина;

КонецФункции
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" основной формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Отказ = Истина; //редактирование выполняется через регистр сведений, весь функционал и логика выполнена там
	
	//+++AK susk
	// почему бы ее и не вызвать тогда
	РегистрыСведений.ГраницыЗапретаИзмененияДанных.ПолучитьФормуСписка().Открыть();
	//---AK susk
	
	Возврат;
	ЗаполнитьОсновноеДерево();
	ЗаполнитьРеглДерево();
КонецПроцедуры

// Процедура - обработчик событя "ПередЗакрытием" основной формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьДанные();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

  ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СТРАНИЦЫ ПАНЕЛИ "Основная дата"

// Процедура - обработчик события "ПриВыводеСтроки"
// табличного поля "ДеревоОсновнойДаты"
//
Процедура ДеревоОсновнойДатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ТипСтроки  = 1 Тогда
		ОформлениеСтроки.Ячейки.Пользователь.УстановитьТекст("Общая дата");
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;		
	Если ОформлениеСтроки.ДанныеСтроки.ТипСтроки  = 2 Тогда
		ОформлениеСтроки.Ячейки.Пользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическиеЛица);
		ОформлениеСтроки.Ячейки.Пользователь.Шрифт = Новый Шрифт(,,Истина);
	Иначе
		ОформлениеСтроки.Ячейки.Пользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическоеЛицо);        
	КонецЕсли;	
КонецПроцедуры // ДеревоОсновнойДатыПриВыводеСтроки

// Процедура - обработчик события "ПриИзменении"
// табличного поля "ДеревоОсновнойДатыПриВыводеСтроки"
Процедура ДеревоОсновнойДатыГраницаПриИзменении(Элемент)
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоОсновнойДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.Граница = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДеревоОсновнойДатыГраницаМСФОПриИзменении(Элемент)
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоОсновнойДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.ГраницаМСФО = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СТРАНИЦЫ ПАНЕЛИ "Ограничение регламентной информации"


// Процедура - обработчик событи "ПриИзменении"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыГраницаПриИзменении(Элемент)
	
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.Граница = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДеревоРеглДатыГраницаМСФОПриИзменении(Элемент)
	
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.ГраницаМСФО = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


// Процедура - обработчик события "ПередНАчаломДобавления"
// табличного поля  "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	
	Форма = Справочники.Организации.ПолучитьФормуВыбора();
	Организация = Форма.ОткрытьМодально();
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДеревоРеглДаты.Строки.Найти(Организация, "ОрганизацияПользователь") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОрганизации = ДеревоРеглДаты.Строки.Добавить();
	СтрокаОрганизации.ОрганизацияПользователь = Организация;
	Для Каждого Значение Из Перечисления.НаборПравПользователей Цикл
		Если Значение = Перечисления.НаборПравПользователей.ПолныеПрава Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРоли = СтрокаОрганизации.Строки.Добавить();
		СтрокаРоли.ОрганизацияПользователь = Значение;
	КонецЦикла;
	ЭлементыФормы.ДеревоРеглДаты.Развернуть(СтрокаОрганизации, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущаяСтрока.Уровень()>0 Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)   	
		
	ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ОтображатьКартинку = Истина;
	
	Если НЕ ДанныеСтроки.ПравоНаИзменение Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
    Если ДанныеСтроки.ТипСтроки = 1 Тогда
        // Организация
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);		
    Иначе
        // Группы пользователя
		Если ДанныеСтроки.ТипСтроки  = 2 Тогда
			ОформлениеСтроки.Ячейки.ОрганизацияПользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическиеЛица);
            ОформлениеСтроки.Ячейки.ОрганизацияПользователь.Шрифт = Новый Шрифт(,,Истина);
        Иначе
            // Пользователь
            ОформлениеСтроки.Ячейки.ОрганизацияПользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическоеЛицо);			
		КонецЕсли;
    КонецЕсли;

КонецПроцедуры

// Процедура - орбработчик события "ПриПолученииДанных"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПриПолученииДанных(Элемент, ОформленияСтрок)	
	Для Каждого ОформлениеСтроки ИЗ ОформленияСтрок Цикл		
		ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ОтображатьКартинку = Истина;		
		Если ОформлениеСтроки.ДанныеСтроки.Уровень() = 0 Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
			ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ИндексКартинки = 1;
		Иначе
			ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ИндексКартинки = 0;
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

// Процедура - орбработчик события "ПриАктивизацииСтроки"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока;    
	
	Если ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЕстьПраваНаИзменение(ТекущаяСтрока, Ложь) тогда
		ЭлементыФормы.ДеревоРеглДаты.Колонки.Граница.ТолькоПросмотр = Истина;
	Иначе
		ЭлементыФормы.ДеревоРеглДаты.Колонки.Граница.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Запись данных в соотв. регистр сведений
Процедура КнопкаВыполнитьНажатие(Элемент)
	
	СохранитьДанные();
	
КонецПроцедуры

// Добавление в табличное поле "ДеревоОсновнойДаты" новой записи
// по группе пользователей
Процедура КоманднаяПанельДереваОсновнойДатыДобавитьГруппуПользователей(Кнопка)
	ДобавитьСтрокуДерева(2, ДеревоОсновнойДаты.Строки[0], "ДеревоОсновнойДаты");    
КонецПроцедуры

// Добавление в табличное поле "ДеревоОсновнойДаты" новой записи
// по пользователю
Процедура КоманднаяПанельДереваОсновнойДатыДобавитьПользователя(Кнопка)
	ДобавитьСтрокуДерева(3, ДеревоОсновнойДаты.Строки[0], "ДеревоОсновнойДаты");
КонецПроцедуры

// Удаление строки из табличного поля "ДеревоОсновнойДаты"
// В ДеревеОсновнойДаты запрещено удаление корневой строки "ОбщаяДата"
Процедура КоманднаяПанельДереваОсновнойДатыУдалитьСтроку(Кнопка)
   	ТекущаяСтрока = ЭлементыФормы.ДеревоОсновнойДаты.ТекущаяСтрока;    
	Если ТекущаяСтрока = Неопределено тогда
		Возврат;
    КонецЕсли;	    
    
    Если ТекущаяСтрока.Уровень() = 0 Тогда
        Сообщить("Невозможно удалить записи, соответствующие общей дате запрета. Можно удалять только записи, соответствующие пользователю или группе пользователей.", СтатусСообщения.Важное);
        
        Возврат;        
    КонецЕсли;
    
	ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);
КонецПроцедуры // КоманднаяПанельДереваОсновнойДатыУдалитьСтроку

// Добавление в табличное поле "ДеревоРеглДаты" новой записи
// по группе пользователей
Процедура КоманднаяПанельДереваРеглДатыДобавитьГруппуПользователей(Кнопка)
	КорневаяСтрока = ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока;
	Если КорневаяСтрока = Неопределено Тогда
		// если в табличном поле не выбрана строка
		// добавление в дерево невозможно
		Возврат;
	КонецЕсли;
	Если НЕ КорневаяСтрока.ТипСтроки = 1 Тогда
		// Если выбрана строка на уровне пользователя или группы пользователей
		// новую строку добавляем в ту же ветку дерева
		КорневаяСтрока = КорневаяСтрока.Родитель;
	КонецЕсли;    
		
	ДобавитьСтрокуДерева(2, КорневаяСтрока, "ДеревоРеглДаты", "ОрганизацияПользователь");
	
КонецПроцедуры

// Добавление в табличное поле "ДеревоРеглДаты" новой записи
// по пользователю
Процедура КоманднаяПанельДереваРеглДатыДобавитьПользователя(Кнопка)
	КорневаяСтрока = ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока;
	Если КорневаяСтрока = Неопределено Тогда
		// если в табличном поле не выбрана строка
		// добавление в дерево невозможно
		Возврат;
	КонецЕсли;
	Если НЕ КорневаяСтрока.ТипСтроки = 1 Тогда
		// Если выбрана строка на уровне пользователя или группы пользователей
		// новую строку добавляем в ту же ветку дерева
		КорневаяСтрока = КорневаяСтрока.Родитель;
	КонецЕсли;    
	
	ДобавитьСтрокуДерева(3, КорневаяСтрока, "ДеревоРеглДаты" , "ОрганизацияПользователь");
	
КонецПроцедуры

// Процедура - обработчик события нажатия на кнопку "Удалить строку"
// командной панели КоманднаяПанельДереваРеглДаты
//
Процедура КоманднаяПанельДереваРеглДатыУдалитьСтроку(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока;    
    
	Если ТекущаяСтрока = Неопределено тогда
		Возврат;
    КонецЕсли;	
    
    Если ТекущаяСтрока.Уровень() = 0 Тогда
        Сообщить("Невозможно удалить записи, соответствующие организации. Можно удалять только записи, соответствующие пользователю или группе пользователей.", СтатусСообщения.Важное);
        
        Возврат;        
    КонецЕсли;
    
    Если НЕ ЕстьПраваНаИзменение(ТекущаяСтрока) тогда
        Возврат;
    КонецЕсли;	                           
       
	ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);

КонецПроцедуры // КоманднаяПанельДереваРеглДатыУдалитьСтроку

Процедура ПриОткрытии()
	
	ТолькоПросмотр = НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ГраницыЗапретаИзмененияДанных);
	Если ТолькоПросмотр Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаУстановить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;	
	
	ПрименятьДатуЗапретаДляПолныхПрав = Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить();
	мИсходноеЗначениеПрименятьДатуЗапретаДляПолныхПрав = ПрименятьДатуЗапретаДляПолныхПрав;
	Если ТолькоПросмотр ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Константы.ПрименятьДатуЗапретаДляПолныхПрав) Тогда
		ЭлементыФормы.ПрименятьДатуЗапретаДляПолныхПрав.Доступность = Ложь;
	КонецЕсли;
	
	//+sstuman
	Если Не РольДоступна("ПравоИзмененияГраницЗапретаИзмененияДанных") Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	//-sstuman
	
КонецПроцедуры

ДеревоРеглДаты.Колонки.Добавить("ПравоНаИзменение");
ДеревоРеглДаты.Колонки.Добавить("ТипСтроки");

ДеревоОсновнойДаты.Колонки.Добавить("ПравоНаИзменение");
ДеревоОсновнойДаты.Колонки.Добавить("ТипСтроки");