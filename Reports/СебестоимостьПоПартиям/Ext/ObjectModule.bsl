
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДатаНачала 		= '00010101';
	ДатаОкончания 	= '00010101';
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ПользПоле.Параметр) = "Период" Тогда
			ДатаНачала 		= ПользПоле.Значение.ДатаНачала;
			ДатаОкончания 	= КонецДня(ПользПоле.Значение.ДатаОкончания);
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, Новый Граница(ДатаНачала		, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОкончания"	, Новый Граница(ДатаОкончания	, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач"			, ДобавитьМесяц(ДатаНачала, -1));
	Запрос.УстановитьПараметр("ДатаКон"			, ДобавитьМесяц(ДатаОкончания, 1));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОборотыДтКт.Регистратор,
	|	ВЫБОР
	|		КОГДА ФинансовыйОборотыДтКт.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйОборотыДтКт.СубконтоДт2
	|		ИНАЧЕ ФинансовыйОборотыДтКт.СубконтоДт1
	|	КОНЕЦ КАК Товар,
	|	ВЫБОР
	|		КОГДА ФинансовыйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйОборотыДтКт.СубконтоКт2
	|		КОГДА ФинансовыйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ФинансовыйОборотыДтКт.СубконтоКт1
	|	КОНЕЦ КАК Сырье,
	|	ВЫБОР
	|		КОГДА ФинансовыйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ИЛИ ФинансовыйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ФинансовыйОборотыДтКт.КоличествоОборотКт
	|	КОНЕЦ КАК КоличествоСырья,
	|	ВЫБОР
	|		КОГДА ФинансовыйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ИЛИ ФинансовыйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСырье,
	|	ФинансовыйОборотыДтКт.СуммаОборот,
	|	ФинансовыйОборотыДтКт.КоличествоОборотДт,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.Контрагент
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&ДатаНачала, &ДатаОкончания, Регистратор, СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)), , , , ) КАК ФинансовыйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ФинансовыйОборотыДтКт.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	НЕ ФинансовыйОборотыДтКт.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	|	И НЕ ФинансовыйОборотыДтКт.Регистратор ССЫЛКА Документ.ЛистУчета
	|	И НЕ ФинансовыйОборотыДтКт.Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
	|	И НЕ ФинансовыйОборотыДтКт.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
	|	И НЕ ФинансовыйОборотыДтКт.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.Контрагент
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеДопРасходовТовары.Номенклатура,
	|	ПоступлениеДопРасходовТовары.СуммаРаспределено,
	|	ПоступлениеДопРасходовТовары.Партия,
	|	ПоступлениеДопРасходовТовары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер,
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка,
	|	ВЗ_Поступления.Ссылка КАК Поступление
	|ИЗ
	|	Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер КАК ПриходныйОрдер,
	|			МАКСИМУМ(ПоступлениеТоваровУслугПриходныеОрдера.Ссылка) КАК Ссылка
	|		ИЗ
	|			Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
	|		ГДЕ
	|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер) КАК ВЗ_Поступления
	|		ПО ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер = ВЗ_Поступления.ПриходныйОрдер
	|ГДЕ
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТранспортныеРасходыПриходныеОрдера.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер,
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка,
	|	ВЗ_Поступления.Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛист.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер КАК ПриходныйОрдер,
	|			МАКСИМУМ(ПоступлениеТоваровУслугПриходныеОрдера.Ссылка) КАК Ссылка
	|		ИЗ
	|			Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
	|		ГДЕ
	|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер) КАК ВЗ_Поступления
	|		ПО ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер = ВЗ_Поступления.ПриходныйОрдер
	|ГДЕ
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТранспортныеРасходыПриходныеОрдера.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	СУММА(ПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес * ПоступлениеТоваровУслугТовары.Количество) КАК Вес,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбщиеТранспортныеРасходыПоставщики.Ссылка,
	|	ОбщиеТранспортныеРасходыПоставщики.Поставщик
	|ИЗ
	|	Документ.ОбщиеТранспортныеРасходы.Поставщики КАК ОбщиеТранспортныеРасходыПоставщики";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаДанных 					= Результаты[0].Выбрать();
	ТабКешПоступления 				= Результаты[1].Выгрузить();
	ТабКешДопРасходы 				= Результаты[2].Выгрузить();
	ТабКешТрансРасходы 				= Результаты[3].Выгрузить();
	ТабКешНоменклатураПоступлений 	= Результаты[4].Выгрузить();
	ТабКешОбщиеТрансРасходы 		= Результаты[5].Выгрузить();
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Поставщик");
	ТаблицаДанных.Колонки.Добавить("Товар");
	ТаблицаДанных.Колонки.Добавить("СырьеУпаковка");
	ТаблицаДанных.Колонки.Добавить("Партия");
	ТаблицаДанных.Колонки.Добавить("ДокументВлияющийНаСебестоимость");
	ТаблицаДанных.Колонки.Добавить("Себестоимость"			, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Количество"				, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КоличествоСырья"		, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СтоимостьСырья"			, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СтоимостьПереработки"	, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ТранспортныеРасходы"	, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПрочиеРасходы"			, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сумма"					, Новый ОписаниеТипов("Число"));
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаДанных.Регистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.Поставщик 		= ВыборкаДанных.Контрагент;
			СтрокаДоб.Товар 			= ВыборкаДанных.Товар;
			СтрокаДоб.СырьеУпаковка 	= ВыборкаДанных.Сырье;
			СтрокаДоб.КоличествоСырья 	= ВыборкаДанных.КоличествоСырья;
			СтрокаДоб.Партия 			= ВыборкаДанных.Регистратор;
			СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
			СтрокаДоб.Количество 		= ВыборкаДанных.КоличествоОборотДт;
			СтрокаДоб.Сумма 			= ВыборкаДанных.СуммаОборот;
			Если ВыборкаДанных.ЭтоСырье Тогда
				СтрокаДоб.СтоимостьСырья 		= ВыборкаДанных.СуммаОборот;
			Иначе
				СтрокаДоб.СтоимостьПереработки 	= ВыборкаДанных.СуммаОборот;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ВыборкаДанных.Регистратор) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			ТабВрем = Новый ТаблицаЗначений();
			ТабВрем.Колонки.Добавить("Партия");
			ТабВрем.Колонки.Добавить("База");
			ТабВрем.Колонки.Добавить("Распределено");
			
			СтрокиИзКеша = ТабКешДопРасходы.НайтиСтроки(Новый Структура("Ссылка, Номенклатура", ВыборкаДанных.Регистратор, ВыборкаДанных.Товар));
			Для Каждого СтрокаКеш Из СтрокиИзКеша Цикл
				СтрокаДоб = ТабВрем.Добавить();
				СтрокаДоб.Партия 	= СтрокаКеш.Партия;
				СтрокаДоб.База 		= СтрокаКеш.СуммаРаспределено;
			КонецЦикла;
			
			Распределение = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаДанных.СуммаОборот, ТабВрем.ВыгрузитьКолонку("База"));
			Если НЕ Распределение = Неопределено Тогда
				ТабВрем.ЗагрузитьКолонку(Распределение,"Распределено");
			КонецЕсли;
			
			Для Каждого СтрокаВрем Из ТабВрем Цикл
				СтрокаКешПоступление = ТабКешПоступления.Найти(СтрокаВрем.Партия, "Ссылка");
				СтрокаДоб = ТаблицаДанных.Добавить();
				СтрокаДоб.Поставщик 			= ?(СтрокаКешПоступление <> Неопределено, СтрокаКешПоступление.Контрагент, Неопределено);
				СтрокаДоб.Товар 				= ВыборкаДанных.Товар;
				СтрокаДоб.Партия 				= СтрокаВрем.Партия;
				СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
				СтрокаДоб.Количество 			= 0;
				СтрокаДоб.Сумма 				= СтрокаВрем.Распределено;
				СтрокаДоб.ТранспортныеРасходы 	= СтрокаВрем.Распределено;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ВыборкаДанных.Регистратор) = Тип("ДокументСсылка.ТранспортныеРасходы")
			ИЛИ ТипЗнч(ВыборкаДанных.Регистратор) = Тип("ДокументСсылка.МаршрутныйЛист") Тогда
			
			СтрокиРасходники = ТабКешТрансРасходы.НайтиСтроки(Новый Структура("Ссылка", ВыборкаДанных.Регистратор));
			
			ТабВрем = Новый ТаблицаЗначений();
			ТабВрем.Колонки.Добавить("Партия");
			ТабВрем.Колонки.Добавить("База");
			ТабВрем.Колонки.Добавить("Распределено");
			
			Для Каждого СтрокаРасходник Из СтрокиРасходники Цикл
				СтрокиСНоменклатурой = ТабКешНоменклатураПоступлений.НайтиСтроки(Новый Структура("Ссылка, Номенклатура", СтрокаРасходник.Поступление, ВыборкаДанных.Товар));
				Для Каждого СтрокаСНоменклатурой Из СтрокиСНоменклатурой Цикл
					СтрокаДоб = ТабВрем.Добавить();
					СтрокаДоб.Партия 	= СтрокаРасходник.Поступление;
					СтрокаДоб.База 		= СтрокаСНоменклатурой.Вес;
				КонецЦикла;	
			КонецЦикла;
			
			Если ТабВрем.Количество() > 0 Тогда
				Распределение = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаДанных.СуммаОборот, ТабВрем.ВыгрузитьКолонку("База"));
				Если Не Распределение = Неопределено Тогда
					ТабВрем.ЗагрузитьКолонку(Распределение,"Распределено");
				КонецЕсли;
				
				Для Каждого СтрокаВрем Из ТабВрем Цикл
					СтрокаКешПоступление = ТабКешПоступления.Найти(СтрокаВрем.Партия, "Ссылка");
					СтрокаДоб = ТаблицаДанных.Добавить();
					СтрокаДоб.Поставщик 			= ?(СтрокаКешПоступление <> Неопределено, СтрокаКешПоступление.Контрагент, Неопределено);
					СтрокаДоб.Товар 				= ВыборкаДанных.Товар;
					СтрокаДоб.Партия 				= СтрокаВрем.Партия;
					СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
					СтрокаДоб.Количество 			= 0;
					СтрокаДоб.Сумма 				= СтрокаВрем.Распределено;
					СтрокаДоб.ТранспортныеРасходы 	= СтрокаВрем.Распределено;
				КонецЦикла;
			Иначе
				Если ТипЗнч(ВыборкаДанных.Регистратор) = Тип("ДокументСсылка.ТранспортныеРасходы") Тогда
					СтрокаДоб = ТаблицаДанных.Добавить();
					СтрокаДоб.Поставщик 			= ?(ВыборкаДанных.Регистратор.Поставщики.Количество() > 0, ВыборкаДанных.Регистратор.Поставщики[0].Поставщик, Неопределено);
					СтрокаДоб.Товар 				= ВыборкаДанных.Товар;
					СтрокаДоб.Партия 				= Неопределено;
					СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
					СтрокаДоб.Количество 			= 0;
					СтрокаДоб.Сумма 				= ВыборкаДанных.СуммаОборот;
					СтрокаДоб.ТранспортныеРасходы 	= ВыборкаДанных.СуммаОборот;
				ИначеЕсли ТипЗнч(ВыборкаДанных.Регистратор) = Тип("ДокументСсылка.МаршрутныйЛист") Тогда
					СтрокаДоб = ТаблицаДанных.Добавить();
					СтрокаДоб.Поставщик 			= ?(ВыборкаДанных.Регистратор.ПриходныеОрдера.Количество() > 0, ВыборкаДанных.Регистратор.ПриходныеОрдера[0].ПриходныйОрдер.Поставщик, Неопределено);
					СтрокаДоб.Товар 				= ВыборкаДанных.Товар;
					СтрокаДоб.Партия 				= Неопределено;
					СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
					СтрокаДоб.Количество 			= 0;
					СтрокаДоб.Сумма 				= ВыборкаДанных.СуммаОборот;
					СтрокаДоб.ТранспортныеРасходы 	= ВыборкаДанных.СуммаОборот;
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ВыборкаДанных.Регистратор) = Тип("ДокументСсылка.ОбщиеТранспортныеРасходы") Тогда
			
			СтрокиПоставщики = ТабКешОбщиеТрансРасходы.НайтиСтроки(Новый Структура("Ссылка", ВыборкаДанных.Регистратор));
			
			ТабВрем = Новый ТаблицаЗначений();
			ТабВрем.Колонки.Добавить("Партия");
			ТабВрем.Колонки.Добавить("База");
			ТабВрем.Колонки.Добавить("Распределено");
			
			Для Каждого СтрокаПоставщики Из СтрокиПоставщики Цикл
				СтрокиПоступления = ТабКешПоступления.НайтиСтроки(Новый Структура("Контрагент", СтрокаПоставщики.Поставщик));
				Для Каждого СтрокаПоступление Из СтрокиПоступления Цикл
					Если СтрокаПоступление.Дата >= ДатаНачала
							И СтрокаПоступление.Дата <= ДатаОкончания Тогда
						СтрокиСНоменклатурой = ТабКешНоменклатураПоступлений.НайтиСтроки(Новый Структура("Ссылка, Номенклатура", СтрокаПоступление.Ссылка, ВыборкаДанных.Товар));
						Для Каждого СтрокаСНоменклатурой Из СтрокиСНоменклатурой Цикл
							СтрокаДоб = ТабВрем.Добавить();
							СтрокаДоб.Партия 	= СтрокаПоступление.Ссылка;
							СтрокаДоб.База 		= СтрокаСНоменклатурой.Вес;
						КонецЦикла;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;
			
			Если ТабВрем.Количество() > 0 Тогда
				Распределение = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаДанных.СуммаОборот, ТабВрем.ВыгрузитьКолонку("База"));
				Если Не Распределение = Неопределено Тогда
					ТабВрем.ЗагрузитьКолонку(Распределение,"Распределено");
				КонецЕсли;
				
				Для Каждого СтрокаВрем Из ТабВрем Цикл
					СтрокаКешПоступление = ТабКешПоступления.Найти(СтрокаВрем.Партия, "Ссылка");
					СтрокаДоб = ТаблицаДанных.Добавить();
					СтрокаДоб.Поставщик 			= ?(СтрокаКешПоступление <> Неопределено, СтрокаКешПоступление.Контрагент, Неопределено);
					СтрокаДоб.Товар 				= ВыборкаДанных.Товар;
					СтрокаДоб.Партия 				= СтрокаВрем.Партия;
					СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
					СтрокаДоб.Количество 			= 0;
					СтрокаДоб.Сумма 				= СтрокаВрем.Распределено;
					СтрокаДоб.ТранспортныеРасходы 	= СтрокаВрем.Распределено;
				КонецЦикла;
			Иначе
				СтрокаДоб = ТаблицаДанных.Добавить();
				СтрокаДоб.Поставщик 			= ?(ВыборкаДанных.Регистратор.Поставщики.Количество() > 0, ВыборкаДанных.Регистратор.Поставщики[0].Поставщик, Неопределено);
				СтрокаДоб.Товар 				= ВыборкаДанных.Товар;
				СтрокаДоб.Партия 				= Неопределено;
				СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
				СтрокаДоб.Количество 			= 0;
				СтрокаДоб.Сумма 				= ВыборкаДанных.СуммаОборот;
				СтрокаДоб.ТранспортныеРасходы 	= ВыборкаДанных.СуммаОборот;
			КонецЕсли;
			
		Иначе
			
			ТабВрем = Новый ТаблицаЗначений();
			ТабВрем.Колонки.Добавить("Партия");
			ТабВрем.Колонки.Добавить("База");
			ТабВрем.Колонки.Добавить("Распределено");
			
			СтрокиПоступления = ТабКешНоменклатураПоступлений.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаДанных.Товар));
			Для Каждого СтрокаПоступление Из СтрокиПоступления Цикл
				Если СтрокаПоступление.Дата >= ДатаНачала
						И СтрокаПоступление.Дата <= ДатаОкончания Тогда
					СтрокаДоб = ТабВрем.Добавить();
					СтрокаДоб.Партия 	= СтрокаПоступление.Ссылка;
					СтрокаДоб.База 		= СтрокаПоступление.Вес;
				КонецЕсли;	
			КонецЦикла;	
			
			
			Если ТабВрем.Количество() > 0 Тогда
				Распределение = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаДанных.СуммаОборот, ТабВрем.ВыгрузитьКолонку("База"));
				Если НЕ Распределение = Неопределено Тогда
					ТабВрем.ЗагрузитьКолонку(Распределение,"Распределено");
				КонецЕсли;
				
				Для Каждого СтрокаВрем Из ТабВрем Цикл
					СтрокаКешПоступление = ТабКешПоступления.Найти(СтрокаВрем.Партия, "Ссылка");
					СтрокаДоб = ТаблицаДанных.Добавить();
					СтрокаДоб.Поставщик 	= ?(СтрокаКешПоступление <> Неопределено, СтрокаКешПоступление.Контрагент, Неопределено);
					СтрокаДоб.Товар 		= ВыборкаДанных.Товар;
					СтрокаДоб.Партия 		= СтрокаВрем.Партия;
					СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
					СтрокаДоб.Количество 	= 0;
					СтрокаДоб.Сумма 		= СтрокаВрем.Распределено;
					СтрокаДоб.ПрочиеРасходы = СтрокаВрем.Распределено;
				КонецЦикла;
			Иначе
				СтрокаДоб = ТаблицаДанных.Добавить();
				СтрокаДоб.Поставщик 	= ?(СтрокаКешПоступление <> Неопределено, СтрокаКешПоступление.Контрагент, Неопределено);
				СтрокаДоб.Товар 		= ВыборкаДанных.Товар;
				СтрокаДоб.Партия 		= Неопределено;
				СтрокаДоб.ДокументВлияющийНаСебестоимость = ВыборкаДанных.Регистратор;
				СтрокаДоб.Количество 	= 0;
				СтрокаДоб.Сумма 		= ВыборкаДанных.СуммаОборот;
				СтрокаДоб.ПрочиеРасходы = ВыборкаДанных.СуммаОборот;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	//
	СтандартнаяОбработка = Ложь;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабДанные", ТаблицаДанных);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры
