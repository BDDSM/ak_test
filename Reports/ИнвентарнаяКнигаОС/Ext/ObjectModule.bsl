#Если Клиент Тогда

// Процедура формирует табличный документ с обложкой инвентарной книги.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводится
//                      обложка инвентарной книги.
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьОбложкуИнвентарнойКнигиОС(ДокументРезультат) Экспорт
	
	ДатаОтбора = ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, Неопределено);
	
	Сведения             = СведенияОЮрФизЛице(Организация, ДатаОтбора);
	ДанныеОтветственного = ДанныеФизЛица(Организация, Ответственный, ДатаОтбора);
	
	ДокументРезультат.Очистить();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху         = 20;
	ДокументРезультат.ПолеСнизу          = 20;
	ДокументРезультат.ПолеСлева          = 10;
	ДокументРезультат.ПолеСправа         = 10;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентарнаяКнигаОС_Обложка";
	
	Макет = ПолучитьМакет("Обложка");
	Макет.Параметры.НаименованиеОрганизации          = ФормированиеПечатныхФорм.ОписаниеОрганизации(Сведения, "НаименованиеДляПечатныхФорм");
	Макет.Параметры.ОКПО                             = Сведения.КодПоОКПО;
	Макет.Параметры.Период                           = " с " + ?(НЕ ЗначениеЗаполнено(НачалоПериода), """____"" ___________ ______ г.", Формат(НачалоПериода, "ДЛФ=DD")) + " по " + ?(НЕ ЗначениеЗаполнено(КонецПериода), """____"" ___________ ______ г.", Формат(КонецПериода, "ДЛФ=DD"));
	Макет.Параметры.НаименованиеПодразделения        = ?(ЗначениеЗаполнено(Подразделение), Подразделение.Наименование, "");  
	Макет.Параметры.КодПодразделения                 = ?(ЗначениеЗаполнено(Подразделение), Подразделение.Код, "");
	Макет.Параметры.Должность                        = ДанныеОтветственного.Должность;
	Макет.Параметры.ФамилияИО                        = ДанныеОтветственного.Представление;
	Макет.Параметры.ТабельныйНомер                   = ДанныеОтветственного.ТабельныйНомер;
	
	ДокументРезультат.Вывести(Макет);

	ДокументРезультат.ТолькоПросмотр = Истина;
	
КонецПроцедуры // СформироватьОбложку()

// Процедура формирует табличный документ со страницами инвентарной книги.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводятся
//                      страницы инвентарной книги.
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьСтраницыИнвентарнойКнигиОС(ДокументРезультат) Экспорт
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоПериода", ?(ОбщегоНазначения.ПустаяДата(НачалоПериода), НачалоПериода, НачалоДня(НачалоПериода)));
	Запрос.УстановитьПараметр("КонецПериода",  ?(ОбщегоНазначения.ПустаяДата(КонецПериода),  КонецПериода,  КонецДня(КонецПериода)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);	
	Запрос.УстановитьПараметр("МОЛ",           МОЛ);
	Запрос.УстановитьПараметр("ДатаМСФО",      Мин(ДобавитьМесяц(ТекущаяДата(), -12), АК_УчетМСФОПривилегированный.ПолучитьПараметрыУчетаОС().НачалоВеденияУчета));
	
	
	Если НЕ ОбщегоНазначения.ПустаяДата(НачалоПериода)
	   И НЕ ОбщегоНазначения.ПустаяДата(КонецПериода) Тогда
	   
	   ОтборПоПериоду = "СобытияОСОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода И";
	   
	ИначеЕсли НЕ ОбщегоНазначения.ПустаяДата(НачалоПериода) Тогда
		
	   ОтборПоПериоду = "СобытияОСОрганизаций.Период >= &НачалоПериода И";
	   
	ИначеЕсли НЕ ОбщегоНазначения.ПустаяДата(КонецПериода) Тогда
		
	   ОтборПоПериоду = "СобытияОСОрганизаций.Период <= &КонецПериода И";
	   
	Иначе
	   
	   ОтборПоПериоду = "";
	   
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОсновноеСредствоСсылка,
	|	ВложенныйЗапрос.ОсновноеСредствоНаименование,
	|	ВложенныйЗапрос.ОсновноеСредствоНаименованиеПолное,
	|	ВложенныйЗапрос.Документ,
	|	ВложенныйЗапрос.ПредставлениеДокумента,
	|	ВложенныйЗапрос.ДатаДокумента,
	|	ВложенныйЗапрос.ТипДокумента,
	|	ВложенныйЗапрос.ПричинаСписания,
	|	ВЫБОР
	|		КОГДА ПринятыеКУчетуОССрезПоследних.СрокАмортизации > 0
	|			ТОГДА ПринятыеКУчетуОССрезПоследних.СрокАмортизации
	|		ИНАЧЕ ВложенныйЗапрос.СрокПолезногоИспользования
	|	КОНЕЦ КАК СрокПолезногоИспользования,
	|	ВложенныйЗапрос.ИнвентарныйНомер,
	|	ВложенныйЗапрос.ПервоначальнаяСтоимость,
	|	ПринятыеКУчетуОССрезПоследних.НачальнаяСтоимость,
	|	"""" КАК ПорядокПогашенияСтоимости,
	|	"""" КАК ПоследнееМОЛ,
	|	"""" КАК ПоследнееМОЛПредставление,
	|	"""" КАК ПредпоследнееМОЛ,
	|	"""" КАК ПредпоследнееМОЛПредставление,
	|	СостояниеОССрезПоследних.Местоположение КАК ПоследнееМестонахождение,
	|	ПРЕДСТАВЛЕНИЕ(СостояниеОССрезПоследних.Местоположение) КАК ПоследнееМестонахождениеПредставление,
	|	"""" КАК ПредпоследнееМестонахождение,
	|	"""" КАК ПредпоследнееМестонахождениеПредставление,
	|	ПринятыеКУчетуОССрезПоследних.ДатаВводаВЭксплуатацию КАК ДатаПринятияКУчету,
	|	"""" КАК ДокументПринятияКУчету,
	|	ЕСТЬNULL(ПринятыеКУчетуОССрезПоследних.НачальнаяСтоимость, 0) КАК ВосстановительнаяСтоимость,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаАмортизация, 0) КАК НачисленнаяАмортизация,
	|	0 КАК НачисленныйИзнос,
	|	0 КАК АмортизацияПоДокументу,
	|	0 КАК ИзносПоДокументу,
	|	"""" КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ ВТ_Таб
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОприходованиеОСНоменклатура.ОсновноеСредство КАК ОсновноеСредствоСсылка,
	|		ОприходованиеОСНоменклатура.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
	|		ОприходованиеОСНоменклатура.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименованиеПолное,
	|		ОприходованиеОСНоменклатура.Ссылка КАК Документ,
	|		ПРЕДСТАВЛЕНИЕ(ОприходованиеОСНоменклатура.Ссылка) КАК ПредставлениеДокумента,
	|		ОприходованиеОСНоменклатура.Ссылка.Дата КАК ДатаДокумента,
	|		""ПринятиеКУчетуОС"" КАК ТипДокумента,
	|		"""" КАК ПричинаСписания,
	|		ОприходованиеОСНоменклатура.ОсновноеСредство.СрокЭксплуатации КАК СрокПолезногоИспользования,
	|		ОприходованиеОСНоменклатура.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ОприходованиеОСНоменклатура.ОсновноеСредство.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|		NULL КАК СуммаАмортизация
	|	ИЗ
	|		Документ.ОприходованиеОС.Номенклатура КАК ОприходованиеОСНоменклатура
	|	ГДЕ
	|		ОприходованиеОСНоменклатура.Ссылка.Организация = &Организация
	|		И ОприходованиеОСНоменклатура.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОприходованиеОСНоменклатура.Ссылка.Проведен = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеОСНоменклатура.ОсновноеСредство,
	|		СписаниеОСНоменклатура.ОсновноеСредство.Наименование,
	|		СписаниеОСНоменклатура.ОсновноеСредство.Наименование,
	|		СписаниеОСНоменклатура.Ссылка,
	|		ПРЕДСТАВЛЕНИЕ(СписаниеОСНоменклатура.Ссылка),
	|		СписаниеОСНоменклатура.Ссылка.Дата,
	|		""СписаниеОС"",
	|		"""",
	|		СписаниеОСНоменклатура.ОсновноеСредство.СрокЭксплуатации,
	|		СписаниеОСНоменклатура.ОсновноеСредство.ИнвентарныйНомер,
	|		СписаниеОСНоменклатура.ОсновноеСредство.ПервоначальнаяСтоимость,
	|		СписаниеОСНоменклатура.СуммаАмортизация
	|	ИЗ
	|		Документ.СписаниеОС.Номенклатура КАК СписаниеОСНоменклатура
	|	ГДЕ
	|		СписаниеОСНоменклатура.Ссылка.Организация = &Организация
	|		И СписаниеОСНоменклатура.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И СписаниеОСНоменклатура.Ссылка.Проведен = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПеремещениеОСНоменклатура.ОсновноеСредство,
	|		ПеремещениеОСНоменклатура.ОсновноеСредство.Наименование,
	|		ПеремещениеОСНоменклатура.ОсновноеСредство.Наименование,
	|		ПеремещениеОСНоменклатура.Ссылка,
	|		ПРЕДСТАВЛЕНИЕ(ПеремещениеОСНоменклатура.Ссылка),
	|		ПеремещениеОСНоменклатура.Ссылка.Дата,
	|		""ПеремещениеОС"",
	|		"""",
	|		ПеремещениеОСНоменклатура.ОсновноеСредство.СрокЭксплуатации,
	|		ПеремещениеОСНоменклатура.ОсновноеСредство.ИнвентарныйНомер,
	|		ПеремещениеОСНоменклатура.ОсновноеСредство.ПервоначальнаяСтоимость,
	|		NULL
	|	ИЗ
	|		Документ.ПеремещениеОС.Номенклатура КАК ПеремещениеОСНоменклатура
	|	ГДЕ
	|		ПеремещениеОСНоменклатура.Ссылка.Организация = &Организация
	|		И ПеремещениеОСНоменклатура.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ПеремещениеОСНоменклатура.Ссылка.Проведен = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводВЭксплуатациюОборудование.ОсновноеСредство,
	|		ВводВЭксплуатациюОборудование.ОсновноеСредство.Наименование,
	|		ПРЕДСТАВЛЕНИЕ(ВводВЭксплуатациюОборудование.ОсновноеСредство),
	|		ВводВЭксплуатациюОборудование.Ссылка,
	|		ПРЕДСТАВЛЕНИЕ(ВводВЭксплуатациюОборудование.Ссылка),
	|		ВводВЭксплуатациюОборудование.Ссылка.Дата,
	|		""ПринятиеКУчетуОС"",
	|		"""",
	|		ВводВЭксплуатациюОборудование.ОсновноеСредство.СрокЭксплуатации,
	|		ВводВЭксплуатациюОборудование.ОсновноеСредство.ИнвентарныйНомер,
	|		ЕСТЬNULL(ВводВЭксплуатациюОборудование.ОсновноеСредство.ПервоначальнаяСтоимость, 0),
	|		NULL
	|	ИЗ
	|		Документ.ВводВЭксплуатацию.Оборудование КАК ВводВЭксплуатациюОборудование
	|	ГДЕ
	|		ВводВЭксплуатациюОборудование.Ссылка.Организация = &Организация
	|		И ВводВЭксплуатациюОборудование.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ВводВЭксплуатациюОборудование.Ссылка.Проведен = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияОСОсновныеСредства.ОсновноеСредство,
	|		РеализацияОСОсновныеСредства.ОсновноеСредство.Наименование,
	|		ПРЕДСТАВЛЕНИЕ(РеализацияОСОсновныеСредства.ОсновноеСредство),
	|		РеализацияОСОсновныеСредства.Ссылка,
	|		ПРЕДСТАВЛЕНИЕ(РеализацияОСОсновныеСредства.Ссылка),
	|		РеализацияОСОсновныеСредства.Ссылка.Дата,
	|		""СписаниеОС"",
	|		"""",
	|		РеализацияОСОсновныеСредства.ОсновноеСредство.СрокЭксплуатации,
	|		РеализацияОСОсновныеСредства.ОсновноеСредство.ИнвентарныйНомер,
	|		РеализацияОСОсновныеСредства.ОсновноеСредство.ПервоначальнаяСтоимость,
	|		РеализацияОСОсновныеСредства.ОстаточнаяАмортизация
	|	ИЗ
	|		Документ.РеализацияОС.ОсновныеСредства КАК РеализацияОСОсновныеСредства
	|	ГДЕ
	|		РеализацияОСОсновныеСредства.Ссылка.Организация = &Организация
	|		И РеализацияОСОсновныеСредства.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И РеализацияОСОсновныеСредства.Ссылка.Проведен = ИСТИНА) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПринятыеКУчетуОС.СрезПоследних КАК ПринятыеКУчетуОССрезПоследних
	|		ПО ВложенныйЗапрос.ОсновноеСредствоСсылка = ПринятыеКУчетуОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних КАК СостояниеОССрезПоследних
	|		ПО ВложенныйЗапрос.ОсновноеСредствоСсылка = СостояниеОССрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Таб.ОсновноеСредствоСсылка,
	|	МАКСИМУМ(ФинансовыйОстаткиИОбороты.Счет) КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	ВТ_Таб КАК ВТ_Таб
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(&ДатаМСФО, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Инвестиции), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Материалы)), , ) КАК ФинансовыйОстаткиИОбороты
	|		ПО ВТ_Таб.ОсновноеСредствоСсылка = ФинансовыйОстаткиИОбороты.Субконто1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Таб.ОсновноеСредствоСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Таб.ОсновноеСредствоСсылка,
	|	ВТ_Таб.ИнвентарныйНомер,
	|	СУММА(ФинансовыйОборотыДтКт.СуммаОборот) КАК СуммаАмортизации
	|ПОМЕСТИТЬ ВТ_НачисленияАмортизации
	|ИЗ
	|	ВТ_Таб КАК ВТ_Таб
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, , , , СчетКт.Код = ""02.1"", , ) КАК ФинансовыйОборотыДтКт
	|		ПО ВТ_Таб.ОсновноеСредствоСсылка = ФинансовыйОборотыДтКт.СубконтоКт1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Таб.ОсновноеСредствоСсылка,
	|	ВТ_Таб.ИнвентарныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Таб.ОсновноеСредствоСсылка,
	|	ВТ_Таб.ОсновноеСредствоНаименование,
	|	ВТ_Таб.ОсновноеСредствоНаименованиеПолное,
	|	ВТ_Таб.Документ,
	|	ВТ_Таб.ПредставлениеДокумента,
	|	ВТ_Таб.ДатаДокумента,
	|	ВТ_Таб.ТипДокумента,
	|	ВТ_Таб.ПричинаСписания,
	|	ВТ_Таб.СрокПолезногоИспользования,
	|	ВТ_Таб.ИнвентарныйНомер,
	|	ВТ_Таб.ПервоначальнаяСтоимость,
	|	ВТ_Таб.НачальнаяСтоимость,
	|	ВТ_Таб.ПорядокПогашенияСтоимости,
	|	ВТ_Таб.ПоследнееМОЛ,
	|	ВТ_Таб.ПоследнееМОЛПредставление,
	|	ВТ_Таб.ПредпоследнееМОЛ,
	|	ВТ_Таб.ПредпоследнееМОЛПредставление,
	|	ВТ_Таб.ПоследнееМестонахождение,
	|	ВТ_Таб.ПоследнееМестонахождениеПредставление,
	|	ВТ_Таб.ПредпоследнееМестонахождение,
	|	ВТ_Таб.ПредпоследнееМестонахождениеПредставление,
	|	ВТ_Таб.ДатаПринятияКУчету,
	|	ВТ_Таб.ДокументПринятияКУчету,
	|	ВТ_Таб.ВосстановительнаяСтоимость,
	|	ЕСТЬNULL(ВТ_НачисленияАмортизации.СуммаАмортизации, ВТ_Таб.НачисленнаяАмортизация) КАК НачисленнаяАмортизация,
	|	ВТ_Таб.НачисленныйИзнос,
	|	ВТ_Таб.ИзносПоДокументу,
	|	ВТ_Таб.СчетНачисленияАмортизации,
	|	ВТ_Счета.СчетУчета
	|ИЗ
	|	ВТ_Таб КАК ВТ_Таб
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета
	|		ПО ВТ_Таб.ОсновноеСредствоСсылка = ВТ_Счета.ОсновноеСредствоСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачисленияАмортизации КАК ВТ_НачисленияАмортизации
	|		ПО ВТ_Таб.ОсновноеСредствоСсылка = ВТ_НачисленияАмортизации.ОсновноеСредствоСсылка
	|ГДЕ
	|	""Условие1"" <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Счета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НачисленияАмортизации";
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"""Условие1"" <> """"","ВТ_Счета.СчетУчета В ИЕРАРХИИ (&СчетУчета)");
		Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	// Заполнение таблицы строк инвентарной книги.
	
	СтрокиИнвентарнойКниги = Новый ТаблицаЗначений();
	СтрокиИнвентарнойКниги.Колонки.Добавить("ДокументСсылка");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОсновноеСредствоСсылка");	
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОсновноеСредство");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ИнвентарныйНомер");
	СтрокиИнвентарнойКниги.Колонки.Добавить("СрокПолезногоИспользования");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПервоначальнаяСтоимость");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоПредставлениеДокумента");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоДатаПринятияКУчету");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоДокументПринятияКУчету");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоПодразделение");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоМОЛ");
	СтрокиИнвентарнойКниги.Колонки.Добавить("НачисленнаяАмортизацияИлиИзнос");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОстаточнаяСтоимость");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПредставлениеДокумента");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПодразделение");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеМОЛ");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПричинаВыбытия");
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаИнвентарнойКниги = СтрокиИнвентарнойКниги.Добавить();
		
		СтрокаИнвентарнойКниги.ОсновноеСредствоСсылка                          = Выборка.ОсновноеСредствоСсылка;
		СтрокаИнвентарнойКниги.ОсновноеСредство                                = ?(НЕ ЗначениеЗаполнено(Выборка.ОсновноеСредствоНаименованиеПолное), Выборка.ОсновноеСредствоНаименование, Выборка.ОсновноеСредствоНаименованиеПолное);
		СтрокаИнвентарнойКниги.ИнвентарныйНомер                                = Выборка.ИнвентарныйНомер;
		СтрокаИнвентарнойКниги.СрокПолезногоИспользования                      = Выборка.СрокПолезногоИспользования;
		СтрокаИнвентарнойКниги.ДокументСсылка                                  = Выборка.Документ;
		
		Если Выборка.ТипДокумента = "ПринятиеКУчетуОС" Тогда
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = Выборка.ПредставлениеДокумента;
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = Выборка.ДатаПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = Выборка.ДокументПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.НачальнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = Выборка.НачисленнаяАмортизация;
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = ?(Выборка.ПорядокПогашенияСтоимости = "СписаниеПриПринятииКУчету",
			                                                                       0,
			                                                                       Выборка.НачальнаяСтоимость);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = "";
			
		ИначеЕсли Выборка.ТипДокумента = "ПеремещениеОС" И Выборка.ПоследнееМестонахождение = Подразделение Тогда
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = Выборка.ПредставлениеДокумента;
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = Выборка.ДатаПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = "";
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.ВосстановительнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = Выборка.НачисленнаяАмортизация;//?(Выборка.СчетНачисленияАмортизации <> ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств, Выборка.НачисленнаяАмортизация + Выборка.АмортизацияПоДокументу, Выборка.НачисленныйИзнос + Выборка.ИзносПоДокументу);
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = Выборка.ВосстановительнаяСтоимость - СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = Выборка.ПредставлениеДокумента;			
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = Выборка.ПредпоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПредпоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = "";
			
		Иначе                                                         
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = "";
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = "";
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = Неопределено;
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = "";
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = "";
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.НачальнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = Выборка.НачисленнаяАмортизация;//?(Выборка.СчетНачисленияАмортизации <> ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств, Выборка.НачисленнаяАмортизация + Выборка.АмортизацияПоДокументу, Выборка.НачисленныйИзнос + Выборка.ИзносПоДокументу);
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = Выборка.ВосстановительнаяСтоимость - Выборка.НачисленнаяАмортизация;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = Выборка.ПредставлениеДокумента;			
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = Выборка.ПричинаСписания;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод страниц инвентарной книги.
	                    
	ДокументРезультат.Очистить();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху         = 20;
	ДокументРезультат.ПолеСнизу          = 20;
	ДокументРезультат.ПолеСлева          = 10;
	ДокументРезультат.ПолеСправа         = 10;
	ДокументРезультат.ФиксацияСлева      = 3;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентарнаяКнигаОС_Обложка";
	
	Макет = ПолучитьМакет("Страницы");
	
	НомерЧетнойСтраницы   = 2;
	НомерНечетнойСтраницы = НомерЧетнойСтраницы + 1;
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.НомерЧетнойСтраницы   = НомерЧетнойСтраницы;
	Шапка.Параметры.НомерНечетнойСтраницы = НомерНечетнойСтраницы;	
	ДокументРезультат.Вывести(Шапка);
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
	
	Для Каждого СтрокаИнвентарнойКниги Из СтрокиИнвентарнойКниги Цикл
		
		Строка = Макет.ПолучитьОбласть("Строка");
				
		Строка.Параметры.Заполнить(СтрокаИнвентарнойКниги);
		Строка.Параметры.НомерСтроки = СтрокиИнвентарнойКниги.Индекс(СтрокаИнвентарнойКниги) + 1;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Строка);
		СтрокаСПодвалом.Добавить(Подвал);

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаСПодвалом) Тогда
			
			ДокументРезультат.Вывести(Подвал);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();

			НомерЧетнойСтраницы   = НомерЧетнойСтраницы + 2;
			НомерНечетнойСтраницы = НомерНечетнойСтраницы + 2;
			
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.НомерЧетнойСтраницы   = НомерЧетнойСтраницы;
			Шапка.Параметры.НомерНечетнойСтраницы = НомерНечетнойСтраницы;
			ДокументРезультат.Вывести(Шапка);
			
		КонецЕсли;

		ДокументРезультат.Вывести(Строка);
		
	КонецЦикла;

	ДокументРезультат.Вывести(Подвал);
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	
КонецПроцедуры // СформироватьСтраницы()

#КонецЕсли

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) 

	Сведения = Новый Структура("Представление, ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм, 
		|КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка, Свидетельство");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая
	Если ТекБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление КАК Наименование,
	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Организации.НаименованиеСокращенное КАК СокращенноеНаименование,
		|	Организации.НаименованиеПолное КАК НаименованиеДляПечатныхФорм,
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Организации.Представление КАК СокращенноеНаименование,
		|	Организации.НаименованиеПолное КАК НаименованиеДляПечатныхФорм,";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	""""                           КАК НомерСчета,
		|	""""                           КАК Банк,
		|	""""                           КАК БИК,
		|	""""                           КАК КоррСчет,
		|	""""                           КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
		
	КонецЕсли;
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если НЕ (ЮрФизЛицо.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено) Тогда

		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		
		Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			
			Сведения.КПП = Данные.КПП;
			
		ИначеЕсли ИмяСправочника = "Организации" Тогда
			
			Сведения.Свидетельство = "свидетельство " + Данные.СвидетельствоСерияНомер + " от " + Формат(Данные.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy");
			
		КонецЕсли;

	ИначеЕсли ИмяСправочника = "Организации" Тогда
		
		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		Сведения.КПП       = Данные.КПП;
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование",          СокрЛП(Данные.ПолноеНаименование));
	Сведения.Вставить("СокращенноеНаименование",     СокрЛП(Данные.СокращенноеНаименование));
	Сведения.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(Данные.НаименованиеДляПечатныхФорм));
	Сведения.Вставить("Представление",               СокрЛП(Данные.Наименование));
	
	Сведения.Вставить("ИНН",              Данные.ИНН);
	Сведения.Вставить("Телефоны",         "");//ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
	Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
	Сведения.Вставить("Банк",             Данные.Банк);
	Сведения.Вставить("БИК",              Данные.БИК);
	Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
	Сведения.Вставить("КоррСчет",         Данные.КоррСчет);

	Сведения.Вставить("ЮридическийАдрес", "");//ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический", ДатаПериода));
	Сведения.Вставить("ФактическийАдрес", "");//ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический", ДатаПериода));

	Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
		Сведения.ПолноеНаименование = Сведения.Представление;
	КонецЕсли;
	
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) 		
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
								|ПредставлениеДокумента");
	
	Возврат Результат;
	
КонецФункции

