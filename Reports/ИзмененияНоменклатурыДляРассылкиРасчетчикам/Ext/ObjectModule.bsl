
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// Получаем настрокий отчета, в т.ч. период
	Настройки = КомпоновщикНастроек.ПолучитьНастройки(); // Получаем настройки отчета 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииОбъектов.Объект,
	|	МАКСИМУМ(ВерсииОбъектов.НомерВерсии) КАК НомерВерсии
	|ПОМЕСТИТЬ ПоследниеВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.ДатаВерсии >= &ДатаВерсии
	|	И ВерсииОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеВерсии.Объект,
	|	ПоследниеВерсии.НомерВерсии КАК НомерАктуальнойВерсии,
	|	МАКСИМУМ(ВерсииОбъектов.НомерВерсии) КАК НомерПредыдущейВерсии
	|ИЗ
	|	ПоследниеВерсии КАК ПоследниеВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|		ПО ПоследниеВерсии.Объект = ВерсииОбъектов.Объект
	|			И (ВерсииОбъектов.ДатаВерсии <= &ДатаВерсии)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоследниеВерсии.Объект,
	|	ПоследниеВерсии.НомерВерсии";
	
	
	
	Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсииС);
	Результат = Запрос.Выполнить();
	
	ТЗДанных = Новый ТаблицаЗначений;
	ТЗДанных.Колонки.Добавить("Характеристика");
	ТЗДанных.Колонки.Добавить("Реквизит");
	ТЗДанных.Колонки.Добавить("Синоним");
	ТЗДанных.Колонки.Добавить("ЗначениеДо");
	ТЗДанных.Колонки.Добавить("ДатаВерсииДо");
	ТЗДанных.Колонки.Добавить("АвторВерсииДо");
	ТЗДанных.Колонки.Добавить("ЗначениеСейчас");
	ТЗДанных.Колонки.Добавить("ДатаВерсииСейчас");
	ТЗДанных.Колонки.Добавить("АвторВерсииСейчас");
	ТЗДанных.Колонки.Добавить("ЕстьИзменение");
	
	Если НЕ Результат.Пустой() Тогда
		ПроверяемыеРеквизиты = Новый ТаблицаЗначений;
		ПроверяемыеРеквизиты.Колонки.Добавить("Реквизит");
		ПроверяемыеРеквизиты.Колонки.Добавить("Синоним");
		НС = ПроверяемыеРеквизиты.Добавить();
		НС.Реквизит = "ПредельноеКоличествоДнейСрокаГодности";
		НС.Синоним  = "Предельное количество дней срока годности при приемке товара";
		НС = ПроверяемыеРеквизиты.Добавить();
		НС.Реквизит = "СрокГодности";
		НС.Синоним = "Срок годности";
		НС = ПроверяемыеРеквизиты.Добавить();
		НС.Реквизит = "Наименование";
		НС.Синоним = "Наименование";
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			РезультатРазбора = РазборВерсии(Выборка.НомерАктуальнойВерсии,Выборка.Объект);
			РезультатРазбораПредВерсии = РазборВерсии(Выборка.НомерПредыдущейВерсии,Выборка.Объект);
			Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
				
				ИмяДляПроверки = ?(ПроверяемыйРеквизит.Реквизит = "Наименование","Description",ПроверяемыйРеквизит.Реквизит);
				
				НС = ТЗДанных.Добавить();
				НС.Характеристика = Выборка.Объект;
				НС.Реквизит = ПроверяемыйРеквизит.Реквизит;
				НС.Синоним = ПроверяемыйРеквизит.Синоним;
					Если РезультатРазбораПредВерсии <> ЛОЖЬ И РезультатРазбораПредВерсии.Свойство("Реквизиты") Тогда
						СтрокаЗначения = РезультатРазбораПредВерсии.Реквизиты.Найти(ИмяДляПроверки,"НаименованиеРеквизита");
						Если СтрокаЗначения<>Неопределено Тогда
							НС.ЗначениеДо = СтрокаЗначения.ЗначениеРеквизита;
						КонецЕсли;	
						НС.ДатаВерсииДо = РезультатРазбораПредВерсии.ДатаИзменения;
						НС.АвторВерсииДо = РезультатРазбораПредВерсии.АвторИзменения;
					КонецЕсли;	
					
				
				СтрокаЗначения = РезультатРазбора.Реквизиты.Найти(ИмяДляПроверки,"НаименованиеРеквизита");
				Если СтрокаЗначения<>Неопределено Тогда
					НС.ЗначениеСейчас = СтрокаЗначения.ЗначениеРеквизита;
				КонецЕсли;	
				
			    НС.ЕстьИзменение = НС.ЗначениеДо<>НС.ЗначениеСейчас;
				
				НС.ДатаВерсииСейчас = РезультатРазбора.ДатаИзменения;
				
				НС.АвторВерсииСейчас = РезультатРазбора.АвторИзменения;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;	
	
	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; // Создаем данные расшифровки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; // Создаем компоновщик макета 
	// Инициализируем макет компоновки используя схему компоновки данных 
	// и созданные ранее настройки и данные расшифровки
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
							Настройки, ДанныеРасшифровки);
	
	// Скомпонуем результат
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
		// !!! Передаем таблицу "ЖурТаб" в процессор компоновки !!!
		Новый Структура("ДанныеВерсий", ТЗДанных), 
		ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	
	
	
	//+++АК POZM 2018.08.07 ИП-00019333 
	// Заполним ТЧ для рассылки
	НастройкиДляТЗ = СхемаКомпоновкиДанных.ВариантыНастроек["ДЛЯ_ТЗ"].Настройки;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
							НастройкиДляТЗ, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; // Создаем данные расшифровки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; // Создаем компоновщик макета 
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
		// !!! Передаем таблицу "ЖурТаб" в процессор компоновки !!!
		Новый Структура("ДанныеВерсий", ТЗДанных), 
		ДанныеРасшифровки);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ЭтотОбъект.ТЗДляРассылки.Загрузить(ТЗ);
	//---АК POZM 
КонецПроцедуры

Функция РазборВерсии(НомерВерсии, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииОбъектов.АвторВерсии,
	               |	ВерсииОбъектов.ДатаВерсии,
	               |	ВерсииОбъектов.ВерсияОбъекта,
	               |	ВерсииОбъектов.СохраненоВФайл
	               |ИЗ
	               |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	               |ГДЕ
	               |	ВерсииОбъектов.Объект = &Ссылка
	               |	И ВерсииОбъектов.НомерВерсии = &НомВер";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомВер", Число(НомерВерсии));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.СохраненоВФайл Тогда
		ВерсияОбъекта = Неопределено;
		ИмяФайл = Строка(Ссылка.УникальныйИдентификатор()) + "_" + Формат(Число(НомерВерсии), "ЧГ=0") + ".his";
		Каталог = Константы.КаталогФайловИстории.Получить();
		Каталог = Каталог + ?(Прав(Каталог, 1) <> "\", "\", "");
		ОбМетаданные = Ссылка.Метаданные();
		Если Метаданные.Документы.Содержит(ОбМетаданные) Тогда
			КаталогДляСохранения = Каталог + "Документы\";
		ИначеЕсли Метаданные.Справочники.Содержит(ОбМетаданные) Тогда
			КаталогДляСохранения = Каталог + "Справочники\";
		Иначе
			КаталогДляСохранения = Каталог + "Прочие\";
		КонецЕсли;
		КаталогДляСохранения = КаталогДляСохранения + Формат(Выборка.ДатаВерсии, "ДФ=yyyyMM") + "\" + Формат(Выборка.ДатаВерсии, "ДФ=dd") + "\";
		МассивФайлов = НайтиФайлы(КаталогДляСохранения, ИмяФайл);
		Если МассивФайлов.Количество() > 0 Тогда
			ВерсияОбъекта = ЗначениеИзФайла(МассивФайлов[0].ПолноеИмя).Получить();
		КонецЕсли;	
	Иначе	
		ВерсияОбъекта = Выборка.ВерсияОбъекта.Получить();
	КонецЕсли;	
	
	Если ВерсияОбъекта = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ВерсияОбъекта.Записать(ИмяВременногоФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		
		Результат = РазборПредставленияОбъектаXML(СтрокаXML, Ссылка);
		Результат.Вставить("ИмяОбъекта", Строка(Ссылка));
		Результат.Вставить("АвторИзменения", СокрЛП(Строка(Выборка.АвторВерсии)));
		Результат.Вставить("ДатаИзменения", Выборка.ДатаВерсии);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция РазборПредставленияОбъектаXML(СтрокаXML, Ссылка)
	
	// содержит имя метаданного измененного объекта
	Перем ИмяОбъекта;
	
	// Содержит положение маркера в дереве XML.
	// Требуется для идентификации текущего элемента.
	Перем УровеньЧтения;
	
	// Содержат значения реквизитов справочников / документов
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияРеквизитов.Колонки.Добавить("НаименованиеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ТипРеквизита");
	
	ТабличныеЧасти = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	// уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части
	УровеньЧтения = 0;
	
	ТабличныеЧастиМТД = Ссылка.Метаданные().ТабличныеЧасти;
	
	ТипЗначения = "";
	
	// основной цикл разбора по XML
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			УровеньЧтения = УровеньЧтения + 1;
			Если УровеньЧтения = 1 Тогда // указатель на первом элементе XML - корень XML
				ИмяОбъекта = ЧтениеXML.Имя;
			ИначеЕсли УровеньЧтения = 2 Тогда // указатель на втором уровне - это реквизит или имя табличной части
				ИмяРеквизита = ЧтениеXML.Имя;
				Если ТабличныеЧастиМТД.Найти(ИмяРеквизита) <> Неопределено Тогда
					ИмяТабличнойЧасти = ИмяРеквизита;
					// создаем новую таблицу значений в таблице соответствий
					Если ТабличныеЧасти[ИмяТабличнойЧасти] = Неопределено Тогда
						ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Новый ТаблицаЗначений);
					КонецЕсли;
				КонецЕсли;
				НовоеЗР = ЗначенияРеквизитов.Добавить();
				НовоеЗР.НаименованиеРеквизита = ИмяРеквизита;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							НовоеЗР.ТипРеквизита = ЧтениеXML.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			
			ИначеЕсли (УровеньЧтения = 3) и (ЧтениеXML.Имя = "Row") Тогда // указатель на поле табличной части
				ТабличныеЧасти[ИмяТабличнойЧасти].Добавить();
			ИначеЕсли УровеньЧтения = 4 Тогда // указатель на поле табличной части
				
				ИмяПоляТЧ = ЧтениеXML.Имя; // 
				Таблица   = ТабличныеЧасти[ИмяТабличнойЧасти];
				Если Таблица.Колонки.Найти(ИмяПоляТЧ)= Неопределено Тогда
					Таблица.Колонки.Добавить(ИмяПоляТЧ);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;
			ТипЗначения = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (УровеньЧтения = 2) Тогда // значение реквизита
				НовоеЗР.ЗначениеРеквизита = ЧтениеXML.Значение;
				//ЗначенияРеквизитов[ИмяРеквизита] = ЧтениеXML.Значение;
				
			ИначеЕсли (УровеньЧтения = 4) Тогда // значение реквизита
				ПоследняяСтрока = ТабличныеЧасти[ИмяТабличнойЧасти].Получить(ТабличныеЧасти[ИмяТабличнойЧасти].Количество()-1);
				ПоследняяСтрока[ИмяПоляТЧ] = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 2-й этап: из списка реквизитов исключаем табличные части
	Для Каждого Элемент Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Удалить(ЗначенияРеквизитов.Найти(Элемент.Ключ));
	КонецЦикла;
	//ТабличныеЧастиМТД
	Для Каждого ЭлементСоответствия Из ТабличныеЧасти Цикл
		Таблица = ЭлементСоответствия.Значение;
		Если Таблица.Колонки.Количество() = 0 Тогда
			ТаблицаМТД = ТабличныеЧастиМТД.Найти(ЭлементСоответствия.Ключ);
			Если ТаблицаМТД <> Неопределено Тогда
				Для Каждого ОписаниеКолонки Из ТаблицаМТД.Реквизиты Цикл
					Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
						Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", ЗначенияРеквизитов);
	Результат.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат Результат;
	
КонецФункции