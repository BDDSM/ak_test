
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		//#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		//#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция База_ВыполнитьЗапрос(ТекстЗапроса) Экспорт
	
	СтрокаПодключенияТелеграм = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
	
	Попытка
		
		CurrentConnection = База_Подключение(СтрокаПодключенияТелеграм);
		CurrentConnection.CursorLocation = 2;
		
		RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
		Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
			RecordSet=RecordSet.NextRecordSet();
		КонецЦикла;				
		
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

Функция ВКонецДня(Дата)
	Возврат ?(Дата = Дата(1,1,1), Дата, КонецДня(Дата));
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаНачала = Дата(1,1,1);
	ДатаОкончания = Дата(1,1,1);
	
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если Строка(ПользПоле.Параметр) = "Период" Тогда
				ДатаНачала = ПользПоле.Значение.ДатаНачала;
				ДатаОкончания = ВКонецДня(ПользПоле.Значение.ДатаОкончания);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("НомерКартыПокупателя", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)));
	ТаблицаДанных.Колонки.Добавить("ДатаСообщения", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ВходящееСообщение", ОписаниеТиповСтрока);
	ТаблицаДанных.Колонки.Добавить("ИсходящееСообщение", ОписаниеТиповСтрока);
	ТаблицаДанных.Колонки.Добавить("id_OK", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("UIDTelegram", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбращенияПокупателей.id_OK КАК id_OK,
		|	ОбращенияПокупателей.ДатаДок КАК Дата,
		|	ОбращенияПокупателей.СтруктурнаяЕдиница КАК Магазин,
		|	ОбращенияПокупателей.Номер_Карты_ОК КАК НомерКартыПокупателя,
		|	ОбращенияПокупателей.UIDTelegram КАК UIDTelegram
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ОбращенияПокупателей.ДатаДок МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			КОГДА &ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ОбращенияПокупателей.ДатаДок >= &ДатаНачала
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ЭтоОтветМагазина = ИСТИНА");
		//|	И НЕ ОбращенияПокупателей.UIDTelegram = """"");
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	УсловиеОтбораSQL = "";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), ВыборкаДетальныеЗаписи);
			//УсловиеОтбораSQL = УсловиеОтбораSQL + ?(ПустаяСтрока(УсловиеОтбораSQL), "", ", ") + "'" + ВыборкаДетальныеЗаписи.UIDTelegram + "'";
		КонецЦикла;
		
		//МассивЗначений = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("UIDTelegram");
		
		//УсловиеОтбораSQL = "file_description IN (?) AND ";
		
		ТекстЗапросаSQL =
			//"SELECT message_type,message_text,file_id,add_date,inbox_outbox
			//|FROM [Telegram].[dbo].[BOT_Complaints]
			//|WHERE message_type<100 AND Doc_Ref IN (SELECT [Doc_Ref]
			//|FROM [Telegram].[dbo].[BOT_Complaints]
			//|WHERE file_description = '" + Запись.UIDTelegram + "' AND (message_type = 100 OR message_type = 101))
			//|ORDER BY add_date";
			"SELECT file_description [UIDTelegram]
			|	, add_date [ДатаСообщения]
			|	, CASE WHEN inbox_outbox = 0 THEN message_text ELSE '' END [ВходящееСообщение]
			|	, CASE WHEN inbox_outbox = 1 THEN message_text ELSE '' END [ИсходящееСообщение]
			|FROM [Telegram].[dbo].[BOT_Complaints]
			|WHERE message_type<100 AND Doc_Ref IN (
			|	SELECT [Doc_Ref]
			|	FROM [Telegram].[dbo].[BOT_Complaints]
			|	WHERE " + УсловиеОтбораSQL + "(message_type = 100 OR message_type = 101))";
			//|ORDER BY add_date
		
		//rsTABLE = База_ВыполнитьЗапрос(ТекстЗапросаSQL);
		СтрокаПодключенияТелеграм = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
		
		//Попытка
			CurrentConnection = База_Подключение(СтрокаПодключенияТелеграм);
			CurrentConnection.CursorLocation = 2;
			
			Command = Новый COMОбъект("ADODB.Command");
			Command.ActiveConnection = CurrentConnection;
			Command.CommandText = ТекстЗапросаSQL;
			
			//Param = Command.CreateParameter(, 8192, 1); //, , МассивЗначений); //adArray = 0x2000
			//Param.Value = МассивЗначений;
			//Command.Parameters.Append(Param);
			
		    rsTABLE = Новый COMОбъект("ADODB.RecordSet");
		    rsTABLE = Command.Execute();
			//RecordSet = CurrentConnection.Execute(ТекстЗапроса);
			
			Пока rsTABLE <> Неопределено И rsTABLE.Fields.Count <= 0 Цикл
				rsTABLE = rsTABLE.NextRecordSet();
			КонецЦикла;				
		//Исключение	
		//	ВызватьИсключение ОписаниеОшибки();
		//КонецПопытки;	
		
		КоличествоПолейТаблица = rsTABLE.fields.Count-1;
	    ТаблицаПоискаТаблица = Новый массив;
	    Если (НЕ rsTABLE.EOF) Тогда
	        ТаблицаПоискаТаблица = rsTABLE.GetRows().Выгрузить();
		КонецЕсли;
		
		тзРезультат = Новый ТаблицаЗначений;
		
		Если ТаблицаПоискаТаблица.Количество() > 0 Тогда
			
			Для сч = 0 По КоличествоПолейТаблица Цикл
				массив = Новый Массив;
				//массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[1][сч]));
				массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[0][сч]));
				ИмяКолонки = rsTABLE.fields.item(сч).name;
				Если ИмяКолонки = "UIDTelegram" Тогда
					тзРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
				Иначе
			    	тзРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(массив));
				КонецЕсли;
			КонецЦикла;
			
		    Для Каждого стрТаблица Из ТаблицаПоискаТаблица Цикл
		        стр = тзРезультат.Добавить();
		        Для сч = 0 По КоличествоПолейТаблица Цикл
					попытка
		               	стр[сч] = СокрЛП(стрТаблица[сч]);
		            исключение
		               	сообщить(ОписаниеОшибки());
					конецпопытки;			
		        КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Таблица1.Дата,
			|	Таблица1.id_OK,
			|	Таблица1.Магазин,
			|	Таблица1.НомерКартыПокупателя,
			|	Таблица1.UIDTelegram
			|ПОМЕСТИТЬ Таблица1
			|ИЗ
			|	&Таблица1 КАК Таблица1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таблица2.UIDTelegram КАК UIDTelegram,
			|	Таблица2.ДатаСообщения,
			|	Таблица2.ВходящееСообщение,
			|	Таблица2.ИсходящееСообщение
			|ПОМЕСТИТЬ Таблица2
			|ИЗ
			|	&Таблица2 КАК Таблица2
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	UIDTelegram
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таблица1.Дата,
			|	Таблица1.id_OK,
			|	Таблица1.Магазин,
			|	Таблица1.НомерКартыПокупателя,
			//|	Таблица1.UIDTelegram,
			|	Таблица2.ДатаСообщения,
			|	Таблица2.ВходящееСообщение,
			|	Таблица2.ИсходящееСообщение
			|ИЗ
			|	Таблица1 КАК Таблица1
			|		ЛЕВОЕ СОЕДИНЕНИЕ Таблица2 КАК Таблица2
			|		ПО Таблица1.UIDTelegram = Таблица2.UIDTelegram");
		Запрос.УстановитьПараметр("Таблица1", ТаблицаДанных);
		Запрос.УстановитьПараметр("Таблица2", тзРезультат);
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ТаблицаДанных);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры
