#Если Клиент Тогда

Перем ИмяРегистраБухгалтерии Экспорт;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Оборотно-сальдовая ведомость по счету " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет");
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субконто: " + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

Функция СформироватьЗапрос(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Истина, 
		Истина, Истина);
	
	ТекстПоля = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
	
		ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + БухгалтерскиеОтчеты.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
	
	КонецЦикла;
	
	ОграниченияПоПостроителюОтчета = БухгалтерскиеОтчеты.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
	
	СтрокаОграниченийПоРеквизитам = "";
	//БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Текст = Текст + 
			ТекстПоля + " 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета + ") КАК ОстаткиИОбороты
	|";
		
	ТекстИтогов = БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Ложь);
	
	Если ПостроительОтчета.Порядок.Количество() > 0 Тогда
		ТекстУпорядочивания = "";
		Для Каждого ЭлементПорядка Из ПостроительОтчета.Порядок Цикл
			ТекстУпорядочивания = ТекстУпорядочивания + ?(ПустаяСтрока(ТекстУпорядочивания), "", ",") + Символы.ПС + "ОстаткиИОбороты." + ЭлементПорядка.ПутьКДанным + ?(ЭлементПорядка.Направление = НаправлениеСортировки.Убыв, " Убыв", " Возр");
		КонецЦикла;	
		Текст = Текст + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + ТекстУпорядочивания;
	КонецЕсли;	
	
	Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2); 
	
	Текст = Текст + "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	//+++АК sils 12.04.2018 ИП-00018366
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	Валюта ";
		
	КонецЕсли;
	//---АК
	
	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = Текст;
	
	Возврат Запрос;
	
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;

	Если Счет = ПланыСчетов.Финансовый.Касса Тогда
		Если УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетВидетьОстаткиНа50СчетеПоОрганизациям, Ложь) = Ложь Тогда
			КолвоИзм = ПостроительОтчета.ИзмеренияСтроки.Количество();
			Для н = 1 По КолвоИзм Цикл
				Если Найти(ПостроительОтчета.ИзмеренияСтроки[КолвоИзм - н].Представление, "Организации") > 0 Тогда
					ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[КолвоИзм - н]);
				КонецЕсли;	
			КонецЦикла;
			
			КолвоИзм = ПостроительОтчета.Отбор.Количество();
			Для н = 1 По КолвоИзм Цикл
				Если Найти(ПостроительОтчета.Отбор[КолвоИзм - н].Представление, "Организации") > 0 Тогда
					ПостроительОтчета.Отбор.Удалить(КолвоИзм - н);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	Итоги       = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,,Истина);
	
	БухгалтерскиеОтчеты.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	НаличиеДублей = БухгалтерскиеОтчеты.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппировок = СформироватьМассивГруппировок();
    
	МассивПоказателей = СформироватьМассивПоказателей();
		
	// Формат показателей
	СтруктураФорматовПоказателей = БухгалтерскиеОтчеты.СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ИмяРегистраБухгалтерии);
		
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
	ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Счет");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги|Счет");
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
	ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
	ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");

	СоответствиеСчетовПредков = БухгалтерскиеОтчеты.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
	
	СтруктураПараметровОграничений = БухгалтерскиеОтчеты.СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, ПоВалютам);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("СтруктураВидовСубконто", Новый Структура);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет",ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ШрифтГрупп", ШрифтГрупп);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла);
	СтруктураПараметров.Вставить("ФорматПоказателей", СтруктураФорматовПоказателей);
	СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	СтруктураПараметров.Вставить("СтруктураОграничений", СтруктураПараметровОграничений);
	
	//+++АК ILIK 2018.05.30 ИП-00018750
	ЗаполнитьСоответствиеСтруктурныхЕдиниц(СтруктураПараметров, Макет);
	//---АК ILIK
	
	//Формирование запроса
	Запрос = СформироватьЗапрос(СтруктураПараметров);
	РезультатЗапроса = Запрос.Выполнить();

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировок.Количество() > 0 Тогда
		
		БухгалтерскиеОтчеты.ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
							0, СтруктураПараметров);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	ВыводимаяОбласть = ОбластьИтогиСчет;
	ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
	
	БухгалтерскиеОтчеты.ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка, ИмяРегистраБухгалтерии, МассивПоказателей, СтруктураФорматовПоказателей,
		Счет, ОбластьИтогиСтрокаЧисла, ОбластьИтогиЧислаМакет, ОбластьИтогиСтрокаСчет, ДокументРезультат);	

	ДокументРезультат.Вывести(ИтогиПодвал, 1);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
    ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры // СформироватьОтчет()

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
	
	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
		
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции

//+++АК ILIK 2018.05.30 ИП-00018750
Процедура ЗаполнитьСоответствиеСтруктурныхЕдиниц(СтруктураПараметров, Макет)
	
	//+++АК kats 2018.08.02 ИП-00019125
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг);
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.Касса);
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация);
	//---АК kats 2018.08.02 ИП-00019125
	
	Если НЕ МассивСчетов.Найти(Счет) = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктурныеЕдиницы.Ссылка
		               |ИЗ
		               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		               |ГДЕ
		               |	СтруктурныеЕдиницы.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)";
		Если ЗначениеЗаполнено(ДатаКон) Тогда
			Запрос.Текст = Запрос.Текст + "
					   |	И СтруктурныеЕдиницы.ДатаЗакрытия <= &ДатаОтчета";
			Запрос.УстановитьПараметр("ДатаОтчета", ДатаКон);
		КонецЕсли;
		
		СоответствиеСтруктурныхЕдиниц = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеСтруктурныхЕдиниц.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
		СтруктураПараметров.Вставить("СоответствиеСтруктурныхЕдиниц", СоответствиеСтруктурныхЕдиниц);
		СтруктураПараметров.Вставить("ШрифтЖирный", Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,Истина));
	КонецЕсли;
КонецПроцедуры
//---АК ILIK

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.Товары.ТипЗначения Тогда
			СписокПараметров.Вставить("Товары", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.МестаХранения.ТипЗначения Тогда
			СписокПараметров.Вставить("МестаХранения", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов.ТипЗначения Тогда
			СписокПараметров.Вставить("СтатьиДоходовРасходов", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивТекущихПоказателей = СформироватьМассивПоказателей();
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Истина, 
		Истина, Истина);
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", " + " ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто"+Сч;
		ТекстПоля = ТекстПоля + ", " + " ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Субконто" + Сч + ") КАК Субконто"+Сч+"Представление";
	
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
		ТекстПорядок = ТекстПорядок + ", Субконто"+Сч+".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
		
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	//БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
		
	Текст = Текст +" 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	//Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО
		|" + Сред(ТекстПорядок, 2) + "
		|" + ?(ПустаяСтрока(ТекстПорядок), "", ",") + "СуммаНачальныйОстаток, СуммаНачальныйОстатокДт, СуммаНачальныйОстатокКт, СуммаКонечныйОстаток, СуммаКонечныйОстатокДт, СуммаКонечныйОстатокКт, СуммаОборотДт, СуммаОборотКт}";
		
	//КонецЕсли;
	
	СтрокаИтогов = БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Ложь); 
	
	Текст = Текст + "
	|ИТОГИ " + Сред(СтрокаИтогов, 2);
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
	
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаНачальныйОстаток");
	Поле.Представление = "Сальдо на начало";
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаНачальныйОстатокДт");
	Поле.Представление = "Сальдо на начало дт";
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаНачальныйОстатокКт");
	Поле.Представление = "Сальдо на начало кт";
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаКонечныйОстаток");
	Поле.Представление = "Сальдо на конец";
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаКонечныйОстатокДт");
	Поле.Представление = "Сальдо на конец дт";
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаКонечныйОстатокКт");
	Поле.Представление = "Сальдо на конец кт";
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаОборотДт");
	Поле.Представление = "Сальдо оборот дт";
	Поле = ПостроительОтчета.ДоступныеПоля.Найти("СуммаОборотКт");
	Поле.Представление = "Сальдо оборот кт";
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Ложь;//Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ЗаполнитьНачальныеНастройки();
	
	БухгалтерскиеОтчеты.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = БухгалтерскиеОтчеты.СоздатьПоСтруктуреСоответствие(СтруктураПараметров);
	
	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
		ПоСубсчетам  = Параметры["ПоСубсчетам"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Финансовый";

#КонецЕсли