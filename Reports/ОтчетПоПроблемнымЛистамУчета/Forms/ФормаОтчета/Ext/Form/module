
Перем СтрокаПодключенияКБазе_Acsess;

Функция ПолучитьСтрокуСоединения(База) Экспорт
	Если База = "ДанныеТовародвижение" Тогда
		//СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\Server00\База\Данные Товародвижение.mdb";
		СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\SERVER00\d$\Izbenka\Управление Информации\automacon\Данные Товародвижение.mdb"; // отладка
	ИначеЕсли База = "ДанныеТовародвижение_2" Тогда
		СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\Server00\база\Данные Товародвижение_2.mdb";
	Иначе
		СтрСоединения = Неопределено;
	КонецЕсли;
	Возврат СтрСоединения;
КонецФункции

Процедура ВыбПериодНажатие1(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьНажатие(Элемент)
	
	Если ВнешниеИсточникиДанных.ДанныеТовародвижение.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
		
		Параметры = ВнешниеИсточникиДанных.ДанныеТовародвижение.ПолучитьОбщиеПараметрыСоединения();
		Параметры.СтрокаСоединения = СтрокаПодключенияКБазе_Acsess;
		ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(Параметры);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТолькоНулевыеВложения", ТолькоНулевыеВложения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	List_Ucheta.date КАК Дата,
	|	ВложенныйЗапрос.N КАК ТорговаяТочка,
	|	List_Ucheta.Raznica КАК Разница,
	|	List_Ucheta.return КАК ВозвратПокупателя,
	|	List_Ucheta.return_m КАК СторноОшибочно,
	|	List_Ucheta.BezNal КАК БезНал,
	|	List_Ucheta.Inkass КАК ПоложилиВКонверт,
	|	List_Ucheta.Summa_tov КАК СуммаТоваров,
	|	List_Ucheta.Z_otchet КАК Z_Отчет,
	|	List_Ucheta.OplataBonus КАК ОплатаБонус,
	|	List_Ucheta.Cupon КАК Купон,
	|	List_Ucheta.Sk_kopeek КАК СуммаКопеек,
	|	List_Ucheta.Raznica КАК ОшибкаНаличных,
	|	List_Ucheta.id_TT,
	|	List_Ucheta.primechanie КАК Комментарий,
	|	List_Ucheta.id_UL,
	|	List_Ucheta.Summa_tov - List_Ucheta.Raznica - List_Ucheta.Z_otchet - List_Ucheta.OplataBonus - List_Ucheta.Cupon + List_Ucheta.return_m - List_Ucheta.Sk_kopeek КАК Потеря
	|ИЗ
	|	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.List_Ucheta КАК List_Ucheta
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			List_Ucheta.id_LU КАК id_LU,
	|			TT.N КАК N
	|		ИЗ
	|			ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.List_Ucheta КАК List_Ucheta
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT_sklad КАК TT_sklad
	|				ПО List_Ucheta.id_TT = TT_sklad.id_tt
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT КАК TT
	|				ПО List_Ucheta.id_TT = TT.id_TT
	|		ГДЕ
	|			List_Ucheta.date МЕЖДУ &НачПериода И &КонПериода
	|			И List_Ucheta.id_UL В (3, 4)
	|			И TT_sklad.id_group = 33
	|		
	|		СГРУППИРОВАТЬ ПО
	|			List_Ucheta.id_LU,
	|			TT.N) КАК ВложенныйЗапрос
	|		ПО List_Ucheta.id_LU = ВложенныйЗапрос.id_LU
	|ГДЕ
	|	(&ТолькоНулевыеВложения
	|				И List_Ucheta.Inkass = 0
	|			ИЛИ НЕ &ТолькоНулевыеВложения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	" + Сортировка;

	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Результат = Запрос.Выполнить().Выгрузить();
	                                                              
	ТекМакет = ПолучитьМакет("Макет");
	
	ОбластьШапка = ТекМакет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = ТекМакет.ПолучитьОбласть("Строка");
	ОбластьПодвал = ТекМакет.ПолучитьОбласть("Подвал");
	
	ЭлементыФормы.ТабДок.Очистить();
	
	ЭлементыФормы.ТабДок.Вывести(ОбластьШапка);
	
	ИтогоРазница = 0;
	ИтогоВозвратПокупателя = 0;
	ИтогоСторноОшибочно = 0;
	ИтогоБезНал = 0;
	ИтогоПоложилиВКонверт = 0;
	Итогопотеря = 0;
	ИтогоОшибкаНаличн = 0;
		
	Состояние("Идёт формирование отчета. Ожидайте...");
	
	Для Каждого ТекСтрТЗ Из Результат Цикл
		
		ОбработкаПрерыванияПользователя();
		
		результатПроверки = ПроверитьСтрокуТЗ(ТекСтрТЗ);
		
		Если результатПроверки = Неопределено Тогда
			Продолжить;
		иначе	
			
			ОбластьСтрока.Параметры.ТорговаяТочка = результатПроверки.Тек_ТорговаяТочка;
			ОбластьСтрока.Параметры.Дата = результатПроверки.Тек_Дата;
			ОбластьСтрока.Параметры.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", результатПроверки.id_TT).ГруппаДоступаСтруктурнойЕдиницы;
			ОбластьСтрока.Параметры.ЮридическоеЛицо = Справочники.Организации.НайтиПоРеквизиту("ИД", результатПроверки.id_UL);
			
			//Если результатПроверки.Тек_Разница > 1000 Тогда 
				ОбластьСтрока.Параметры.Разница = результатПроверки.Тек_Разница;
			//Иначе
			//	ОбластьСтрока.Параметры.Разница = 0;
			//КонецЕсли;
			
			//Если результатПроверки.Тек_ВозвратПокупателя > 1000 Тогда
				ОбластьСтрока.Параметры.ВозвратПокупателя = результатПроверки.Тек_ВозвратПокупателя;
			//Иначе
			//	ОбластьСтрока.Параметры.ВозвратПокупателя = 0;
			//КонецЕсли;
			
			//Если результатПроверки.Тек_СторноОшибочно > 1000 ИЛИ результатПроверки.Тек_СторноОшибочно < 0 Тогда
				ОбластьСтрока.Параметры.СторноОшибочно = результатПроверки.Тек_СторноОшибочно;
			//Иначе 
			//	ОбластьСтрока.Параметры.СторноОшибочно = 0;
			//КонецЕсли;
			
			//Если результатПроверки.Тек_БезНал > 0 Тогда 
				ОбластьСтрока.Параметры.БезНал = результатПроверки.Тек_БезНал;
			//Иначе
			//	ОбластьСтрока.Параметры.БезНал = 0;
			//КонецЕсли;
			
			//Если результатПроверки.Тек_ПоложилиВКонверт = 0 Тогда 
				ОбластьСтрока.Параметры.ПоложилиВКонверт = результатПроверки.Тек_ПоложилиВКонверт;
			//Иначе
			//	ОбластьСтрока.Параметры.ПоложилиВКонверт = 0;
			//КонецЕсли;
			
			//Если результатПроверки.Тек_Потеря > 1000 Тогда
				ОбластьСтрока.Параметры.потеря = результатПроверки.Тек_Потеря;
			//Иначе
			//	ОбластьСтрока.Параметры.потеря = 0;
			//КонецЕсли;
			
			//Если результатПроверки.Тек_ОшибкаНаличных > 1000 Тогда
				ОбластьСтрока.Параметры.ОшибкаНаличн = результатПроверки.Тек_ОшибкаНаличных;
			//Иначе
			//	ОбластьСтрока.Параметры.ОшибкаНаличн = 0;
			//КонецЕсли;
			
			ОбластьСтрока.Параметры.Комментарий = результатПроверки.Комментарий;
			
			ЭлементыФормы.ТабДок.Вывести(ОбластьСтрока);
			
			ИтогоРазница = ИтогоРазница + ОбластьСтрока.Параметры.Разница;
			ИтогоВозвратПокупателя = ИтогоВозвратПокупателя + ОбластьСтрока.Параметры.ВозвратПокупателя; 
			ИтогоСторноОшибочно = ИтогоСторноОшибочно + ОбластьСтрока.Параметры.СторноОшибочно;
			ИтогоБезНал = ИтогоБезНал + ОбластьСтрока.Параметры.БезНал;
			ИтогоПоложилиВКонверт = ИтогоПоложилиВКонверт + ОбластьСтрока.Параметры.ПоложилиВКонверт;
			Итогопотеря = Итогопотеря + ОбластьСтрока.Параметры.потеря;
			ИтогоОшибкаНаличн = ИтогоОшибкаНаличн + ОбластьСтрока.Параметры.ОшибкаНаличн;
						
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОбластьПодвал.Параметры.ИТОГОРазница = ИтогоРазница;
	ОбластьПодвал.Параметры.ИТОГОВозвратПокупателя = ИтогоВозвратПокупателя;
	ОбластьПодвал.Параметры.ИТОГОСторноОшибочно = ИтогоСторноОшибочно;
	ОбластьПодвал.Параметры.ИТОГОБезНал = ИтогоБезНал;
	ОбластьПодвал.Параметры.ИТОГОПоложилиВКонверт = ИтогоПоложилиВКонверт;
	ОбластьПодвал.Параметры.ИТОГОпотеря = Итогопотеря;
	ОбластьПодвал.Параметры.ИТОГООшибкаНаличн = ИтогоОшибкаНаличн;
	
	ЭлементыФормы.ТабДок.Вывести(ОбластьПодвал);
	ЭлементыФормы.ТабДок.ТолькоПросмотр = Истина;
	ЭлементыФормы.ТабДок.ФиксацияСверху = 5;
    ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
    
	
КонецПроцедуры

Функция ПроверитьСтрокуТЗ(СтрТЗ)
	
	СтруктураВозвр = Новый Структура;
	
	СтруктураВозвр.Вставить("Тек_Дата", Формат(СтрТЗ.Дата, "ДФ=dd.MM.yyyy"));
	СтруктураВозвр.Вставить("Тек_ТорговаяТочка", СтрТЗ.ТорговаяТочка);
	СтруктураВозвр.Вставить("id_TT", СтрТЗ.id_TT);
	СтруктураВозвр.Вставить("id_UL", СтрТЗ.id_UL);
	СтруктураВозвр.Вставить("Тек_Разница", ?(СтрТЗ.Разница = NULL, 0 ,СтрТЗ.Разница));
	СтруктураВозвр.Вставить("Тек_ВозвратПокупателя", ?(СтрТЗ.ВозвратПокупателя = NULL, 0 ,СтрТЗ.ВозвратПокупателя));
	СтруктураВозвр.Вставить("Тек_СторноОшибочно", ?(СтрТЗ.СторноОшибочно = NULL, 0 ,СтрТЗ.СторноОшибочно));
	СтруктураВозвр.Вставить("Тек_БезНал", ?(СтрТЗ.БезНал = NULL, 0 ,СтрТЗ.БезНал));
	СтруктураВозвр.Вставить("Тек_ПоложилиВКонверт", ?(СтрТЗ.ПоложилиВКонверт = NULL, 0 ,СтрТЗ.ПоложилиВКонверт));
	СтруктураВозвр.Вставить("Тек_СуммаТоваров", ?(СтрТЗ.СуммаТоваров = NULL, 0 ,СтрТЗ.СуммаТоваров));
	СтруктураВозвр.Вставить("Тек_Z_Отчет", ?(СтрТЗ.Z_Отчет = NULL, 0 ,СтрТЗ.Z_Отчет));
	СтруктураВозвр.Вставить("Тек_ОплатаБонус", ?(СтрТЗ.ОплатаБонус = NULL, 0 ,СтрТЗ.ОплатаБонус));
	СтруктураВозвр.Вставить("Тек_Купон", ?(СтрТЗ.Купон = NULL, 0 ,СтрТЗ.Купон));
	СтруктураВозвр.Вставить("Тек_СуммаКопеек", ?(СтрТЗ.СуммаКопеек = NULL, 0 ,СтрТЗ.СуммаКопеек));
	СтруктураВозвр.Вставить("Тек_ОшибкаНаличных", ?(СтрТЗ.ОшибкаНаличных = NULL, 0 ,СтрТЗ.ОшибкаНаличных));	
	СтруктураВозвр.Вставить("Тек_Потеря", СтруктураВозвр.Тек_СуммаТоваров - СтруктураВозвр.Тек_Разница - СтруктураВозвр.Тек_Z_Отчет - СтруктураВозвр.Тек_ОплатаБонус - СтруктураВозвр.Тек_Купон + СтруктураВозвр.Тек_СторноОшибочно - СтруктураВозвр.Тек_СуммаКопеек);
	СтруктураВозвр.Вставить("Комментарий", СтрТЗ.Комментарий);
	
	Если СтруктураВозвр.Тек_Разница > 1000 
		ИЛИ СтруктураВозвр.Тек_ВозвратПокупателя > 1000
		ИЛИ СтруктураВозвр.Тек_СторноОшибочно > 1000
		ИЛИ СтруктураВозвр.Тек_СторноОшибочно < 0
		ИЛИ СтруктураВозвр.Тек_БезНал > 0
		ИЛИ СтруктураВозвр.Тек_ПоложилиВКонверт = 0
		ИЛИ СтруктураВозвр.Тек_Потеря > 1000
		Тогда
		
		Возврат СтруктураВозвр;
		
	Иначе	
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

Процедура ПриОткрытии()
	ЭлементыФормы.ТекстСтрокаПодключенияКБазе_Acsess.Заголовок = "Источник данных: "+СтрокаПодключенияКБазе_Acsess;
	
	ЭлементыФормы.Сортировка.Значение = "ТорговаяТочка";
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

ЭлементыФормы.Сортировка.СписокВыбора.Добавить("ТорговаяТочка", "ТТ");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("id_UL", "Юридическое лицо");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("Дата", "Дата");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("Разница", "Разница");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("ВозвратПокупателя", "Возврат покупателя");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("СторноОшибочно", "Сторно ошибочно");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("БезНал", "БезНал");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("ПоложилиВКонверт", "Положили в конверт");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("Потеря", "Потеря");
ЭлементыФормы.Сортировка.СписокВыбора.Добавить("ОшибкаНаличных", "Ошибка наличных");

 //СтрокаПодключенияКБазе_Acsess = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\Server00\Temp\1\Данные Товародвижение.mdb"; // строка для тестовойбазы
 СтрокаПодключенияКБазе_Acsess = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\Server00\База\Данные Товародвижение.mdb"; // строка для рабочей базы