

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);

	Если ЗначениеЗаполнено(Параметры.Продавец1) 
		ИЛИ ЗначениеЗаполнено(Параметры.Продавец2)
		ИЛИ ЗначениеЗаполнено(Параметры.Продавец3) Тогда
		Продавец1 = Параметры.Продавец1;
		Продавец2 = Параметры.Продавец2;
		Продавец3 = Параметры.Продавец3;
	КонецЕсли;
	
	ТТ = Параметры.ТТ;
	Примечание = Параметры.Примечание;
	ОтветПокупателю = Параметры.ОтветПокупателю;
	ДатаСобытия = Параметры.ДатаСобытия; 
	ИсточникОбращения = Параметры.ИсточникОбращения;
	Телефон = Параметры.Телефон;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Возврат;
	//СтандартнаяОбработка = Ложь;
	//
	//ТабДок = РасшифровкаНаСервере(Расшифровка);
	//ТабДок.ТолькоПросмотр = Истина;
	//ПараметрыОткрытия = Новый Структура("ТабДок", ТабДок);
	//ФормаРасшифровки = ПолучитьФорму("Отчет.ОтчетПоПродавцам.Форма.ФормаРасшифровкиЖалоб", ПараметрыОткрытия);
	//ФормаРасшифровки.Открыть();
	
	//ФормаРасшифровки.Элементы.Результат.Очистить();
	//ФормаРасшифровки.Элементы.Результат.Вывести(ТабДок);
	//ФормаРасшифровки.ТабличныйДокумент.Очистить();
	//ФормаРасшифровки.ТабличныйДокумент.Вывести(ТабДок);
	//ТабДок.Показать();	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Продавец1.Пустая() ИЛИ НЕ Продавец2.Пустая() ИЛИ НЕ Продавец3.Пустая() Тогда
		
		ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		//ПериодПараметр2 = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("Период");
		
		ПараметрПериода = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета")).ИдентификаторПользовательскойНастройки);
		ПараметрПериода.Значение.ДатаНачала = НачалоДня(ДобавитьМесяц(ТекущаяДата(), -12));
		ПараметрПериода.Значение.ДатаОкончания = КонецДня(ТекущаяДата());
		
		ПараметрКачествоСервиса = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КачествоСервиса")).ИдентификаторПользовательскойНастройки);
	    ПараметрВсеОтлично = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВсеОтлично")).ИдентификаторПользовательскойНастройки);
        ПараметрНеПодтвердилось = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НеПодтвердилось")).ИдентификаторПользовательскойНастройки);

		ПараметрКачествоСервиса.Значение = ПолучитьПараметрКачествоСервиса();
		ПараметрКачествоСервиса.Использование  = Истина;
		
		ПараметрВсеОтлично.Значение = ПолучитьПараметрВсеОтлично();
		ПараметрВсеОтлично.Использование  = Истина;
		
		ПараметрНеПодтвердилось.Значение = ПолучитьПараметрНеПодтвердилось();
		ПараметрНеПодтвердилось.Использование  = Истина;
		
		СписокПродавцов = Новый СписокЗначений;
		Если НЕ Продавец1.Пустая() Тогда
			СписокПродавцов.Добавить(Продавец1);
		КонецЕсли;
		Если НЕ Продавец2.Пустая() Тогда
			СписокПродавцов.Добавить(Продавец2);
		КонецЕсли;
        Если НЕ Продавец3.Пустая() Тогда
			СписокПродавцов.Добавить(Продавец3);
		КонецЕсли; 	
		
		ПользовательскиеНастройки.Элементы[5].ПравоеЗначение = СписокПродавцов;
		ПользовательскиеНастройки.Элементы[5].Использование  = Истина;
		//ПараметрПериода.Значение.ДатаНачала = НачалоДня(НачалоПериода);
		//ПараметрПериода.Значение.ДатаОкончания = КонецДня(КонецПериода);
		
		//ПараметрПериода.Использование = Истина;
		
		СкомпоноватьРезультат();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрКачествоСервиса()
	Возврат Справочники.ТипыОбращенийПокупателей.НайтиПоНаименованию("02 Качество Сервиса - плохое");	
КонецФункции	

&НаСервере
Функция ПолучитьПараметрВсеОтлично()
	Возврат Справочники.ТипыЖалоб.НайтиПоНаименованию("-1 Все отлично");	
КонецФункции 

&НаСервере
Функция ПолучитьПараметрНеПодтвердилось()
	Возврат Справочники.РезультатыРассмотренияОбращений.НайтиПоНаименованию("1 Не подтвердилось");	
КонецФункции  

&НаКлиенте
Процедура ОтправитьОтчет(Команда)
	
	//ПолноеимяФайла = ПолучитьИмяВременногоФайла("xls");
	//Результат.Записать(ПолноеимяФайла, ТипФайлаТабличногоДокумента.XLS);
	//
	//ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеимяФайла);
	//АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ОтправитьОтчетНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтправитьОтчетНаСервере() Экспорт
	
	Попытка
				
		СписокКому = Новый СписокЗначений;
		АдресУведомления = Константы.ЭлектронныйАдресРассылкиДанныхПоПродавцам.Получить();
		
		РазобратьСтрокуПолучателей(АдресУведомления, СписокКому);
		
		Если ЗначениеЗаполнено(ТТ) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СоответствиеОбъектРольСрезПоследних.Объект КАК ТТ,
			               |	СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель КАК РольТУ,
			               |	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПомощникТУ
			               |ПОМЕСТИТЬ ТЗ_Роли
			               |ИЗ
			               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Объект) КАК СоответствиеОбъектРольСрезПоследних
			               |ГДЕ 
						   //+++ AK suvv 2018.06.08 ИП-00018376.01
						   //|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыролейПользователя.ПомощникТерриториальногоУправляющего)
						   |	(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыролейПользователя.ПомощникТерриториальногоУправляющего)
						   |    ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыролейПользователя.ПомощникСтороннейРозницы))
						   //--- AK suvv
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТЗ_Роли.ТТ,
			               |	РолиПользователейСоставРоли.Сотрудник
			               |ПОМЕСТИТЬ ТЗ_УправляющиеИПомошники
			               |ИЗ
			               |	ТЗ_Роли КАК ТЗ_Роли
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			               |		ПО (ТЗ_Роли.РольТУ = РолиПользователейСоставРоли.Ссылка
			               |				ИЛИ ТЗ_Роли.РольПомощникТУ = РолиПользователейСоставРоли.Ссылка)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТЗ_Роли.ТТ,
			               |	РолиПользователейСоставРоли.Сотрудник
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТЗ_УправляющиеИПомошники.ТТ,
			               |	ТЗ_УправляющиеИПомошники.Сотрудник,
			               |	КонтактнаяИнформация.Представление КАК Почта
			               |ИЗ
			               |	ТЗ_УправляющиеИПомошники КАК ТЗ_УправляющиеИПомошники
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			               |		ПО ТЗ_УправляющиеИПомошники.Сотрудник = КонтактнаяИнформация.Объект
			               |ГДЕ
			               |	КонтактнаяИнформация.Тип = &Тип
			               |	И КонтактнаяИнформация.Вид = &Вид";
			
			Запрос.УстановитьПараметр("Объект", ТТ);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
		
		
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.Почта) Тогда
					Сообщить("У сотрудника: " + Строка(Выборка.Сотрудник) + " не назначен адрес электронной почты!", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				СписокКому.Добавить(Выборка.Почта, Выборка.Почта);
			КонецЦикла;
		КонецЕсли;
		
		//СписокКому.Добавить(АдресУведомления, АдресУведомления); 
		
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		Если СписокКому.Количество() > 0 Тогда
			Почта = Новый ИнтернетПочта;
			Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
			Письмо = Новый ИнтернетПочтовоеСообщение;
			
			Почта.Подключиться(Профиль);
			Письмо.Тема = "Отчет по продавцам";
			Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
			Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
			Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
			Для Каждого ПолучательЭлемент Из СписокКому Цикл
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес           = ПолучательЭлемент.Значение;
			КонецЦикла;	
			
			ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
			Результат.Записать(ПолноеимяФайла, ТипФайлаТабличногоДокумента.XLSX);

			Письмо.Вложения.Добавить(ПолноеИмяФайла);

			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     = "Отчет по продавцам" + Символы.ПС; // + Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + "Дата события: " + Формат(ДатаСобытия, "ДФ=dd.MM.yyyy") + ";   Торговая точка: " + Строка(ТТ)+ Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + "Источник: "+ Строка(ИсточникОбращения) + Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + "Телефон ТТ: "+ Строка(Телефон) + Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + "Продавцы:"+ Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + Строка(Продавец1)+ Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + Строка(Продавец2)+ Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + Строка(Продавец3)+ Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + "Текст жалобы:" + Символы.ПС + Примечание + Символы.ПС + Символы.ПС;
			ТекстСообщения.Текст     = ТекстСообщения.Текст + "Ответ покупателю:" + Символы.ПС + ОтветПокупателю;
			
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			
			
			Почта.Послать(Письмо);
				
			Почта.Отключиться();
			Сообщить("Отчет отправлен успешно!");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Процедура РазобратьСтрокуПолучателей(СтрокаРазбора, СписокВозврата)
	
	НайденныйСимвол = Найти(СтрокаРазбора, ";");
	ДлинаСтроки = СтрДлина(СтрокаРазбора);
	Если НайденныйСимвол = 0 ИЛИ ДлинаСтроки = НайденныйСимвол Тогда
		АдресПолучателя = Сред(СтрокаРазбора, 1, НайденныйСимвол - 1);
		СписокВозврата.Добавить(АдресПолучателя, АдресПолучателя);
		Возврат;
	КонецЕсли;
	
	АдресПолучателя = Сред(СтрокаРазбора, 1, НайденныйСимвол - 1);
	СписокВозврата.Добавить(АдресПолучателя, АдресПолучателя);
	
	СтрокаРазбора = Сред(СтрокаРазбора, НайденныйСимвол + 1);
	
	Если СтрокаРазбора = "" Тогда
		Возврат;
	КонецЕсли;
	РазобратьСтрокуПолучателей(СтрокаРазбора, СписокВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПередНачаломИзменения(Элемент, Отказ)
	
	
КонецПроцедуры

