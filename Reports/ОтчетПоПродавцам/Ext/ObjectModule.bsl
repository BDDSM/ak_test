
//Перем мРекордсет Экспорт;
Перем мСоединение Экспорт;
Перем мБазаДанных;


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтборПоТТ.Очистить();
	ОтборПоКодПродавец.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);  	
			
	// Подготовим и выведем отчет.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;    	
	
	ЕстьОтборТТ = Ложь;
	Попытка
		Для Каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбор.ПредставлениеПользовательскойНастройки = "Торговая точка" Тогда
				ОтборТТ = ПолучитьПользовательскуюНастройку(ЭлементОтбор.ИдентификаторПользовательскойНастройки);
				Если ОтборТТ <> Неопределено
					И ОтборТТ.Использование = Истина Тогда
					Если ОтборТТ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ЕстьОтборТТ = Истина;
						НовСтрока = ОтборПоТТ.Добавить();
						НовСтрока.ТТ = ОтборТТ.ПравоеЗначение.id_TT;
					КонецЕсли;	
					Если ОтборТТ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ЕстьОтборТТ = Истина;
						Для Каждого ЭлементТТ Из ОтборТТ.ПравоеЗначение Цикл
							НовСтрока = ОтборПоТТ.Добавить();
							НовСтрока.ТТ = ЭлементТТ.Значение.id_TT; 						
						КонецЦикла;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	Исключение
		
		Сообщить("Проверьте в настройках вид сравнение у Торговой точки, должно быть <В списке>!", СтатусСообщения.Важное);
	КонецПопытки;
	
	ЕстьОтборПродавец = Ложь;
	Попытка
		Для Каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбор.ПредставлениеПользовательскойНастройки = "Продавец" Тогда
				ОтборПродавец = ПолучитьПользовательскуюНастройку(ЭлементОтбор.ИдентификаторПользовательскойНастройки);
				Если ОтборПродавец <> Неопределено
					И ОтборПродавец.Использование = Истина Тогда
					Если ОтборПродавец.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ЕстьОтборПродавец = Истина;
						НовСтрока = ОтборПоКодПродавец.Добавить();
						НовСтрока.Код = ОтборПродавец.ПравоеЗначение.Код;
					КонецЕсли;	
					Если ОтборПродавец.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ЕстьОтборПродавец = Истина;
						Для Каждого ЭлементП Из ОтборПродавец.ПравоеЗначение Цикл
							НовСтрока = ОтборПоКодПродавец.Добавить();
							НовСтрока.Код = ЭлементП.Значение.Код; 						
						КонецЦикла;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	Исключение
		
		Сообщить("Проверьте в настройках вид сравнение у Продавца, должно быть <В списке>!", СтатусСообщения.Важное);
	КонецПопытки;
	
	ПараметрПериода = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета")).ИдентификаторПользовательскойНастройки);
	//ПараметрКонецПериода  = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")).ИдентификаторПользовательскойНастройки);
	//ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	//ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ТаблицаДанныхПоПоступлению = Неопределено;
	Если ПараметрПериода = Неопределено Тогда
		Возврат;
	Иначе
		
		//ДатаНач = ДобавитьМесяц(ПараметрПериода.Значение.ДатаНачала, 2000*12);
		//ДатаКон = ДобавитьМесяц(ПараметрПериода.Значение.ДатаОкончания, 2000*12);
		
		ДатаНач = ПараметрПериода.Значение.ДатаНачала;
		ДатаКон = ПараметрПериода.Значение.ДатаОкончания;
		
		мСоединение = АДОКоннекшн_СоздатьОбъект();
    
	    Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
	        Сообщить("Не удалось подключиться...", 30);
	        Возврат;
	    КонецЕсли;                                        
	    
	   // мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);
		
		ЗаполнитьТаблицуFields_reports_dtt(ДатаНач, ДатаКон);	
		
		ЗаполнитьТаблицуPromo(ДатаНач, ДатаКон);
		//
		//ТаблицаДанныхПоПоступлению = ЗапросПоступившей.Выполнить().Выгрузить();
		ТаблицаДанныхПоПродажам = Продажи_Выручка.Выгрузить();
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("ТаблицаДанныхПоПродажам", ТаблицаДанныхПоПродажам);
	ВнешниеНаборыДанных.Вставить("ПромоАкции", ПромоАкции);

	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки
	);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		ВнешниеНаборыДанных,
		ДанныеРасшифровки
	);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

Функция ПолучитьПользовательскуюНастройку(ИдентификаторПользовательскойНастройки)
	
	ЗначениеВозврата = Неопределено;
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользПоле.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат ПользПоле;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции
////////////////////////////////////////////
// ADO
////////////////////////////////////////////

Функция АДОКоннекшн_СоздатьОбъект() Экспорт
	
	ADOСоединение = Новый ComObject("ADODB.Connection");
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionTimeOut = 0;
    
    Возврат ADOСоединение; 
    
КонецФункции    // АДОКоннекшн_СоздатьОбъект

Функция АДОРекордсет_СоздатьОбъект(Соединение = "") Экспорт
    
    rs = New ComObject("ADODB.Recordset");
    
    rs.ActiveConnection = Соединение;                               
        
   Возврат rs;
    
КонецФункции    // АДОРекордсет_СоздатьОбъект

Функция АДОДБ_УстановитьСоединение(Соединение, сИмяБазы, сИмяКомпьютера, сЛогин, сПароль) Экспорт
        
	Строка = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(, , мБазаДанных, , , "LANGUAGE=русский");

    Возврат Соединение.Open(Строка);
    
КонецФункции // АДОДБ_УстановитьСоединение()

//////////////////////////////////////////////

Процедура ЗаполнитьТаблицуFields_reports_dtt(ДатаНач, ДатаКон)
	
	//Продажи_Выручка.Очистить();
	//
	//СтрокаОтбораТТ = "";
	//СтрокаОтбораТТ0 = "";
	//СтрокаОтбораТТ1 = "";
	//Для каждого Строка Из ОтборПоТТ Цикл 
	//	СтрокаОтбораТТ = СтрокаОтбораТТ + ?(ЗначениеЗаполнено(СтрокаОтбораТТ), ", ", "") + Строка(Формат(Строка.ТТ, "ЧГ=")); 	
	//КонецЦикла; 
	//Если НЕ СтрокаОтбораТТ = "" Тогда 	
	//	СтрокаОтбораТТ0 = " AND Prodagi.id_tt IN (" + СтрокаОтбораТТ + ")";
	//	СтрокаОтбораТТ1 = " AND convert(Int, f2._Fld758) IN (" + СтрокаОтбораТТ + ")";
	//КонецЕсли; 
	//
	//СтрокаОтбораП = "";
	//СтрокаОтбораП0 = "";
	//СтрокаОтбораП1 = "";
	//Для каждого Строка Из ОтборПоКодПродавец Цикл 
	//	СтрокаОтбораП = СтрокаОтбораП + ?(ЗначениеЗаполнено(СтрокаОтбораП), ", ", "") + "'" + Строка(Строка.Код)+ "'"; 	
	//КонецЦикла; 
	//Если НЕ СтрокаОтбораП = "" Тогда 	
	//	СтрокаОтбораП0 = " AND CodeFizLico.Code IN (" + СтрокаОтбораП + ")";
	//	СтрокаОтбораП1 = " AND fl._Code IN (" + СтрокаОтбораП + ")";
	//КонецЕсли;
	////ДатаУсловия = НачалоДня(Дата(ДатаОтчета) - 30*60*60*24);
	////ДатаУсловия = ДобавитьМесяц(НачалоДня(Дата(ДатаОтчета)), -1);
	//	
	//	СтрЗапрос = "SELECT 
	//		|Prodagi.date_tt as date_tt,
	//		|Sum(Prodagi.discount50) as discount50, 
	//		|Sum(Prodagi.Summa) as Summa, 
	//		|Prodagi.id_tt as id_tt,
	//		|CodeFizLico.Code
	//		|
	//		|FROM [Reports].[dbo].[DTT] as Prodagi (nolock)
	//		|	LEFT JOIN	
	//		|	 		
	//		| (SELECT 
	//		|       Dateadd(Year, -2000, convert(date, lu._Date_Time)) as Date_Time,
	//		|		convert(Int, f2._Fld758) as id_tt_1, 
	//		|		fl._Code as Code
	//		|		from [IzbenkaFin].[dbo].[_Document780] (nolock) lu
	//		|		inner join [IzbenkaFin].[dbo].[_Document780_VT2839] (nolock) lup 
	//		|		on lup._Document780_IDRRef = lu._IDRRef
	//		|		inner join [IzbenkaFin].[dbo].[_Reference39] (nolock) fl 
	//		|		on fl._IDRRef = lup._Fld2841RRef
	//		|		inner join [IzbenkaFin].[dbo].[_Reference42] (nolock) f2 
	//		|		on f2._IDRRef = lu._Fld790RRef
	//		|		where lu._Date_Time >= " + ВнешниеДанные.ФорматПоля(ДобавитьМесяц(Дата(ДатаНач), 12*2000))+ " AND lu._Date_Time <= " + ВнешниеДанные.ФорматПоля(ДобавитьМесяц(Дата(ДатаКон), 12*2000)) + СтрокаОтбораТТ1 + СтрокаОтбораП1 + ") as CodeFizLico
	//		|ON Prodagi.id_tt = CodeFizLico.id_tt_1 AND Prodagi.date_tt = CodeFizLico.Date_Time 
	//		|WHERE Prodagi.date_tt >= '" + Формат(ДатаНач, "ДФ=yyyy-MM-dd") + "' AND Prodagi.date_tt <= '" + Формат(ДатаКон, "ДФ=yyyy-MM-dd") + "'" + СтрокаОтбораТТ0 + СтрокаОтбораП0 + "
	//		|GROUP BY date_tt, id_tt, Code, convert(date, CodeFizLico.Date_Time), id_tt_1";
	//	
	////СтрЗапрос = "SELECT 
	////	|Prodagi.date_tt as date_tt,
	////	|Sum(Prodagi.discount50) as discount50, 
	////	|Sum(Prodagi.Summa) as Summa, 
	////	|Prodagi.id_tt as id_tt
	////	|FROM [Reports].[dbo].[DTT] as Prodagi (nolock)
	////	|WHERE Prodagi.date_tt >= '" + Формат(Дата(ДатаНач)), "ДФ=yyyy-MM-dd")+ "' AND Prodagi.date_tt <= '" + Формат(Дата(ДатаНач), "ДФ=yyyy-MM-dd")+ "' "  + СтрокаОтбораТТ0 + СтрокаОтбораП0 + "
	////	|GROUP BY date_tt, id_tt";	
	//	
	//	rs = мСоединение.Execute(СтрЗапрос);
	//Попытка                                                                 
	//	rs.MoveFirst();                                                       
	//	
	//	Пока НЕ rs.EOF() Цикл
	//		СтрокаДоб = Продажи_Выручка.Добавить();                                                             //+ " AND convert(datetime, convert(date, Prodagi.date_tt)) <= " + ВнешниеДанные.ФорматПоля(Дата(ДатаКон))
	//		СтрокаДоб.Дата = rs.Fields("date_tt").Value;
	//		СтрокаДоб.Продажа = rs.Fields("discount50").Value;
	//		СтрокаДоб.Выручка = rs.Fields("Summa").Value;
	//		СтрокаДоб.ТТ = rs.Fields("id_tt").Value;
	//		СтрокаДоб.КодПродавца = rs.Fields("Code").Value;
	//		СтрокаДоб.ПериодДень  = НачалоДня(СтрокаДоб.Дата);
	//		СтрокаДоб.ПериодМесяц = НачалоМесяца(СтрокаДоб.Дата);
	//		
	//		rs.MoveNext();
	//	КонецЦикла;
	//	
	//			
	//Исключение
	//КонецПопытки;
	
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуPromo(ДатаНач, ДатаКон)
	
	ПромоАкции.Очистить();	
		
	СтрокаОтбораТТ = ""; 
	СтрокаОтбораТТ1 = "";
	СтрокаОтбораТТ0 = "";
	Для каждого Строка Из ОтборПоТТ Цикл 
		СтрокаОтбораТТ = СтрокаОтбораТТ + ?(ЗначениеЗаполнено(СтрокаОтбораТТ), ", ", "") + Строка(Формат(Строка.ТТ, "ЧГ=")); 	
	КонецЦикла; 
	Если НЕ СтрокаОтбораТТ = "" Тогда 	
		СтрокаОтбораТТ0 = " AND Promo_Plan.id_tt IN (" + СтрокаОтбораТТ + ")";
		СтрокаОтбораТТ1 = " AND Promo_Fact.id_tt_pr IN (" + СтрокаОтбораТТ + ")";
		СтрокаОтбораТТ2 = " AND convert(Int, f2._Fld758) IN (" + СтрокаОтбораТТ + ")";
	КонецЕсли; 
	
	СтрокаОтбораП = "";
	СтрокаОтбораП0 = "";
	СтрокаОтбораП1 = "";
	Для каждого Строка Из ОтборПоКодПродавец Цикл 
		СтрокаОтбораП = СтрокаОтбораП + ?(ЗначениеЗаполнено(СтрокаОтбораП), ", ", "") + "'" + Строка(Строка.Код)+ "'"; 	
	КонецЦикла; 
	Если НЕ СтрокаОтбораП = "" Тогда 	
		СтрокаОтбораП0 = " AND CodeFizLico.Code IN (" + СтрокаОтбораП + ")";
		СтрокаОтбораП1 = " AND fl._Code IN (" + СтрокаОтбораП + ")";
	КонецЕсли;
	
	//ДатаУсловия = ДобавитьМесяц(НачалоДня(Дата(ДатаОтчета)), -1);
	//ДатаУсловия = НачалоДня(Дата(ДатаОтчета) - 10*60*60*24);
	
	СтрЗапрос = "SELECT
		|PlanDannih.name,
		|PlanDannih.id_tt,
		|PlanDannih.id_prom,
		|PlanDannih.plan_pr,  
		|PlanDannih.Date_st_pok,
		|PlanDannih.Date_fi_pok,
		|DATEDIFF(Day, Date_st_pok, Date_fi_pok) + 1 As DneyAkcii,
		|Sum(Promo_Fact.Fact_promo_Pr) as Fact_promo_Pr,
		|Promo_Fact.date_pr,
		|Count(DISTINCT Promo_Fact.date_pr) as DneyVihoda,
		|CodeFizLico.Code as Code 		
        |
		|	FROM(
		|		SELECT 
		|		Promo.Date_st_pok as Date_st_pok,
		|		Promo.Date_fi_pok as Date_fi_pok,
		|		Promo.id_promo as id_prom, 
		|		Promo.name_sms as name, 		
		|		Promo_Plan.id_tt as id_tt, 
		|		Promo_Plan.plan_pr as plan_pr  
		|		FROM [Promo].[dbo].[Promo] as Promo (nolock)
		|		INNER JOIN
		|		[Promo].[dbo].[promo_tt] as Promo_Plan (nolock)
		|		ON Promo.id_promo = Promo_Plan.id_promo 
		|		WHERE Promo.is_active = 1 AND Promo_Plan.plan_pr > 0 AND Promo.Date_st_pok >= '"+ Формат(ДатаНач, "ДФ=yyyy-MM-dd")+ "' AND Promo.Date_st_pok <= '"+ Формат(ДатаКон, "ДФ=yyyy-MM-dd") + "'" + СтрокаОтбораТТ0 + ") as PlanDannih
		|LEFT JOIN
		|[Promo].[dbo].[promo_fact] as Promo_Fact (nolock)
		|ON PlanDannih.id_prom = Promo_Fact.id_promo AND PlanDannih.id_tt = Promo_Fact.id_tt_pr
		|	LEFT JOIN	
		|	 		
		| (SELECT 
		|       Dateadd(Year, -2000, convert(date, lu._Date_Time)) as Date_Time,
		|		convert(Int, f2._Fld758) as id_tt_1, 
		|		fl._Code as Code
		|		from [IzbenkaFin].[dbo].[_Document780] (nolock) lu
		|		inner join [IzbenkaFin].[dbo].[_Document780_VT2839] (nolock) lup 
		|		on lup._Document780_IDRRef = lu._IDRRef
		|		inner join [IzbenkaFin].[dbo].[_Reference39] (nolock) fl 
		|		on fl._IDRRef = lup._Fld2841RRef
		|		inner join [IzbenkaFin].[dbo].[_Reference42] (nolock) f2 
		|		on f2._IDRRef = lu._Fld790RRef
		|		where lu._Date_Time >= " + ВнешниеДанные.ФорматПоля(ДобавитьМесяц(Дата(ДатаНач), 12*2000))+ " AND lu._Date_Time <= " + ВнешниеДанные.ФорматПоля(ДобавитьМесяц(Дата(ДатаКон), 12*2000)) + СтрокаОтбораТТ2 + СтрокаОтбораП1 + ") as CodeFizLico
		|ON PlanDannih.id_tt = CodeFizLico.id_tt_1 AND Promo_Fact.date_pr = CodeFizLico.Date_Time 
		|WHERE
		|Promo_Fact.Fact_promo_Pr > 0 AND Promo_Fact.date_pr >= '" + Формат(ДатаНач, "ДФ=yyyy-MM-dd") + "' AND Promo_Fact.date_pr <= '" + Формат(ДатаКон, "ДФ=yyyy-MM-dd") + "'" + СтрокаОтбораТТ1 + СтрокаОтбораП0 +"
		|GROUP BY name, id_tt, Code, id_prom, plan_pr, Date_st_pok, Date_fi_pok, date_pr
		|";
		
		
	rs = мСоединение.Execute(СтрЗапрос);
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ПромоАкции.Добавить();
			СтрокаДоб.Акция = rs.Fields("name").Value;
			СтрокаДоб.ДатаНач = rs.Fields("Date_st_pok").Value;
			СтрокаДоб.ДатаКон = rs.Fields("Date_fi_pok").Value; 
			СтрокаДоб.План = rs.Fields("plan_pr").Value;
			СтрокаДоб.ТТ = rs.Fields("id_tt").Value;
			СтрокаДоб.АкцияИд = rs.Fields("id_prom").Value;
			СтрокаДоб.Дата = rs.Fields("date_pr").Value;
			СтрокаДоб.Факт = rs.Fields("Fact_promo_Pr").Value; 
			СтрокаДоб.КодПродавца = rs.Fields("Code").Value;
			СтрокаДоб.ДнейАкции = rs.Fields("DneyAkcii").Value;
			СтрокаДоб.ДнейВыходаПродавца = rs.Fields("DneyVihoda").Value;
			СтрокаДоб.ПериодДень  = НачалоДня(СтрокаДоб.Дата);
			СтрокаДоб.ПериодМесяц = НачалоМесяца(СтрокаДоб.Дата);
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
		
КонецПроцедуры
