
// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Функция ДобавитьРодителей(ЭлементРасшифровки, мДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), мДанныеРасшифровки);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВключатьРесурсы
					И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, мДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, мДанныеРасшифровки, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
			И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(мДанныеРасшифровки.Элементы[Расшифровка], мДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы);
	
	КоличествоПолей = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По КоличествоПолей Цикл
		ОбратныйИндекс = КоличествоПолей - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого мЭлементОтбора Из мДанныеРасшифровки.Настройки.Отбор.Элементы Цикл
		Если НЕ мЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(мЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ПолучитьДоступноеПоле(Знач Поле, ОбластьПоиска)
	
	Возврат ОбластьПоиска.НайтиПоле(Поле);
	
КонецФункции

Функция ЭтоДетальнаяЗапись(Расшифровка, мДанныеРасшифровки)
	
	ЭтоДетальнаяЗапись = Ложь;
	ТекЭлемент = мДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ТекЭлемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ТекЭлементы = ТекЭлемент.ПолучитьРодителей();
		Если ТекЭлементы.Количество() = 1 Тогда
			ТекЭлемент = ТекЭлементы[0];
			Если ТипЗнч(ТекЭлемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
				ЭтоДетальнаяЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтоДетальнаяЗапись;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(Отчет.ДатаНачала, Отчет.ДатаОкончания);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		Отчет.ДатаНачала 		= СтандартныйПериод.ДатаНачала;
		Отчет.ДатаОкончания 	= СтандартныйПериод.ДатаОкончания;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Отчет.ДатаНачала) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Отчет.ДатаОкончания) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отчет.Счет = ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
КонецПроцедуры


Функция РасшифроватьНаСервере(Расшифровка, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоРасшифровкаПоАкту = Ложь;
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	ТекЭлементРасшифровки = Данные.Элементы[Расшифровка];
	Для Каждого ТекПоле Из ТекЭлементРасшифровки.ПолучитьПоля() Цикл
		Если ТекПоле.Поле = "АктСверкиФин" Тогда
			ЭтоРасшифровкаПоАкту = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЭтоРасшифровкаПоАкту Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПолейРасшифровкиСРесурсами = ПолучитьМассивПолейРасшифровки(Расшифровка, Данные, Истина);
	Если МассивПолейРасшифровкиСРесурсами.Количество() = 0 тогда
		Возврат Неопределено;
	КонецЕсли;
	ЭтоДетальнаяЗапись = ЭтоДетальнаяЗапись(Расшифровка, Данные);
	
	ДотупноеПоле = Неопределено;
	ДотупноеПоле = ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(МассивПолейРасшифровкиСРесурсами[0].Поле), Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	Значение = МассивПолейРасшифровкиСРесурсами[0].Значение;
	ЭтоЧисловойРесурс = ДотупноеПоле <> Неопределено И ДотупноеПоле.Ресурс И (ДотупноеПоле.Тип.СодержитТип(Тип("Число")) или ТипЗнч(Значение) = Тип("Число") или Значение = NULL);
	
	Если ЭтоДетальнаяЗапись
			И НЕ ЭтоЧисловойРесурс
			И МассивПолейРасшифровкиСРесурсами[0].Значение <> NULL тогда
		СтандартнаяОбработка = Ложь;
		Возврат МассивПолейРасшифровкиСРесурсами[0].Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ЗначениеРасшифровки = РасшифроватьНаСервере(Расшифровка, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		ОткрытьЗначение(ЗначениеРасшифровки);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьТекущиеАктыСверки()
	
	Запрос = Новый Запрос;
	ТаблицаОтчета = Отчет.ДанныеОтчета.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаОтчета"	, ТаблицаОтчета);
	ВремТаблица = ТаблицаОтчета.Скопировать(, "Организация");
	ВремТаблица.Свернуть("Организация");
	Запрос.УстановитьПараметр("МассивОрг"		, ВремТаблица.ВыгрузитьКолонку("Организация"));
	ВремТаблица = ТаблицаОтчета.Скопировать(, "Контрагент");
	ВремТаблица.Свернуть("Контрагент");
	Запрос.УстановитьПараметр("МассивКонтр"		, ВремТаблица.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("ДатаОкончания"	, Отчет.ДатаОкончания);
	Запрос.УстановитьПараметр("Счет"			, Отчет.Счет);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтчета.Организация КАК Организация,
	|	ТаблицаОтчета.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТТаблицаОтчета
	|ИЗ
	|	&ТаблицаОтчета КАК ТаблицаОтчета
	|ГДЕ
	|	ТаблицаОтчета.АктСверкиФин = ЗНАЧЕНИЕ(Документ.АктСверкиВзаиморасчетов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧСписокСчетов.Ссылка.Организация КАК Организация,
	|	ТЧСписокСчетов.Ссылка.Контрагент КАК Контрагент,
	|	ТЧСписокСчетов.Ссылка КАК Ссылка,
	|	ТЧСписокСчетов.Ссылка.Дата КАК Дата,
	|	ТЧСписокСчетов.Ссылка.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ АктыСверки_После__
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.СписокСчетов КАК ТЧСписокСчетов
	|ГДЕ
	|	ТЧСписокСчетов.Счет В ИЕРАРХИИ(&Счет)
	|	И ТЧСписокСчетов.УчаствуетВРасчетах
	|	И НЕ ТЧСписокСчетов.Ссылка.ДатаОкончания < &ДатаОкончания
	|	И НЕ ТЧСписокСчетов.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыСверки_После__.Организация КАК Организация,
	|	АктыСверки_После__.Контрагент КАК Контрагент,
	|	АктыСверки_После__.Ссылка КАК Ссылка,
	|	АктыСверки_После__.Дата КАК Дата
	|ПОМЕСТИТЬ АктыСверки_После_
	|ИЗ
	|	АктыСверки_После__ КАК АктыСверки_После__
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктыСверки_После__.Организация КАК Организация,
	|			АктыСверки_После__.Контрагент КАК Контрагент,
	|			МИНИМУМ(АктыСверки_После__.ДатаОкончания) КАК ДатаОкончания
	|		ИЗ
	|			АктыСверки_После__ КАК АктыСверки_После__
	|		
	|		СГРУППИРОВАТЬ ПО
	|			АктыСверки_После__.Организация,
	|			АктыСверки_После__.Контрагент) КАК МаксДатыОкончания
	|		ПО (МаксДатыОкончания.Организация = АктыСверки_После__.Организация)
	|			И (МаксДатыОкончания.Контрагент = АктыСверки_После__.Контрагент)
	|			И (МаксДатыОкончания.ДатаОкончания = АктыСверки_После__.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыСверки_После_.Организация КАК Организация,
	|	АктыСверки_После_.Контрагент КАК Контрагент,
	|	АктыСверки_После_.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ АктыСверки_После
	|ИЗ
	|	АктыСверки_После_ КАК АктыСверки_После_
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктыСверки_После_.Организация КАК Организация,
	|			АктыСверки_После_.Контрагент КАК Контрагент,
	|			МАКСИМУМ(АктыСверки_После_.Дата) КАК Дата
	|		ИЗ
	|			АктыСверки_После_ КАК АктыСверки_После_
	|		
	|		СГРУППИРОВАТЬ ПО
	|			АктыСверки_После_.Организация,
	|			АктыСверки_После_.Контрагент) КАК МаксДаты
	|		ПО (МаксДаты.Организация = АктыСверки_После_.Организация)
	|			И (МаксДаты.Контрагент = АктыСверки_После_.Контрагент)
	|			И (МаксДаты.Дата = АктыСверки_После_.Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыСверкиДо.Организация КАК Организация,
	|	АктыСверкиДо.Контрагент КАК Контрагент,
	|	МАКСИМУМ(АктыСверкиДо.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТАктыСверкиДо
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧСписокСчетов.Ссылка.Организация КАК Организация,
	|		ТЧСписокСчетов.Ссылка.Контрагент КАК Контрагент,
	|		ТЧСписокСчетов.Ссылка.ДатаОкончания КАК ДатаОкончания
	|	ИЗ
	|		Документ.АктСверкиВзаиморасчетов.СписокСчетов КАК ТЧСписокСчетов
	|	ГДЕ
	|		ТЧСписокСчетов.Счет В ИЕРАРХИИ(&Счет)
	|		И ТЧСписокСчетов.УчаствуетВРасчетах
	|		И ТЧСписокСчетов.Ссылка.ДатаОкончания < &ДатаОкончания
	|		И ТЧСписокСчетов.Ссылка.СверкаСогласована
	|		И НЕ ТЧСписокСчетов.Ссылка.ПометкаУдаления) КАК АктыСверкиДо
	|
	|СГРУППИРОВАТЬ ПО
	|	АктыСверкиДо.Организация,
	|	АктыСверкиДо.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТаблицаОтчета.Организация КАК Организация,
	|	ВТТаблицаОтчета.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(АктСверкиВзаиморасчетов.Ссылка, ЗНАЧЕНИЕ(Документ.АктСверкиВзаиморасчетов.ПустаяСсылка)) КАК АктСверки,
	|	ЕСТЬNULL(ВТАктыСверкиДо.ДатаОкончания, ЕСТЬNULL(ПервыеДаты.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПоследняяДатаОкончания
	|ИЗ
	|	ВТТаблицаОтчета КАК ВТТаблицаОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктыСверки_После КАК АктСверкиВзаиморасчетов
	|		ПО (АктСверкиВзаиморасчетов.Организация = ВТТаблицаОтчета.Организация)
	|			И (АктСверкиВзаиморасчетов.Контрагент = ВТТаблицаОтчета.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктыСверкиДо КАК ВТАктыСверкиДо
	|		ПО (ВТАктыСверкиДо.Организация = ВТТаблицаОтчета.Организация)
	|			И (ВТАктыСверкиДо.Контрагент = ВТТаблицаОтчета.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФинансовыйОстаткиИОбороты.Субконто1 КАК Организация,
	|			ФинансовыйОстаткиИОбороты.Субконто2 КАК Контрагент,
	|			МИНИМУМ(ФинансовыйОстаткиИОбороты.Период) КАК Период
	|		ИЗ
	|			РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
	|					,
	|					,
	|					Регистратор,
	|					,
	|					Счет В ИЕРАРХИИ (&Счет),
	|					,
	|					Субконто1 В (&МассивОрг)
	|						И Субконто2 В (&МассивКонтр)) КАК ФинансовыйОстаткиИОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФинансовыйОстаткиИОбороты.Субконто1,
	|			ФинансовыйОстаткиИОбороты.Субконто2) КАК ПервыеДаты
	|		ПО (ПервыеДаты.Организация = ВТТаблицаОтчета.Организация)
	|			И (ПервыеДаты.Контрагент = ВТТаблицаОтчета.Контрагент)";
	
	ТекущиеАктыСверки = Запрос.Выполнить().Выгрузить();
	
	//
	МассивСтруктур = Новый Массив;
	ПустойАкт = Документы.АктСверкиВзаиморасчетов.ПустаяСсылка();
	СтруктураОтбора = Новый Структура("Организация, Контрагент");
	Для Каждого СтрокаТЧ Из Отчет.ДанныеОтчета Цикл
		
		ТекОрганизация 	= СтрокаТЧ.Организация;
		ТекКонтрагент 	= СтрокаТЧ.Контрагент;
		
		СтруктураДляМассива = Новый Структура;
		СтруктураДляМассива.Вставить("Организация"	, ТекОрганизация);
		СтруктураДляМассива.Вставить("Контрагент"	, ТекКонтрагент);
		СтруктураДляМассива.Вставить("АктСверкиФин"	, СтрокаТЧ.АктСверкиФин);
		СтруктураДляМассива.Вставить("ПоследнийАкт"	, СтрокаТЧ.ПоследнийАктФин);
		СтруктураДляМассива.Вставить("АктСверкиСоздать", ПустойАкт);
		
		Если СтрокаТЧ.АктСверкиФин.Пустая() Тогда
			СтруктураОтбора.Организация = ТекОрганизация;
			СтруктураОтбора.Контрагент 	= ТекКонтрагент;
			СтрокиАктов = ТекущиеАктыСверки.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаАкта Из СтрокиАктов Цикл
				СтруктураДляМассива.Вставить("АктСверкиСоздать"			, СтрокаАкта.АктСверки);
				СтруктураДляМассива.Вставить("ПоследняяДатаОкончания"	, СтрокаАкта.ПоследняяДатаОкончания);
			КонецЦикла;
		КонецЕсли;
		МассивСтруктур.Добавить(СтруктураДляМассива);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументАктСверки(мОрганизация, мКонтрагент, ПоследняяДатаОкончания, мДата)
	
	НовыйДокумент = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	
	НовыйДокумент.Дата 			= КонецДня(мДата);
	НовыйДокумент.ДатаНачала 	= КонецДня(ПоследняяДатаОкончания) + 1;
	НовыйДокумент.ДатаОкончания = мДата;
	НовыйДокумент.Организация	= мОрганизация;
	НовыйДокумент.Контрагент	= мКонтрагент;
	
	НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СчетаПоУмолчанию = Новый Массив;
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	Для Счетчик = 1 По СчетаПоУмолчанию.Количество() Цикл
		СтрокаСчета = НовыйДокумент.СписокСчетов.Добавить();
		СтрокаСчета.УчаствуетВРасчетах = Истина;
	КонецЦикла; 
	НовыйДокумент.СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию, "Счет");
	
	НовыйДокумент.ЗаполнитьПоДаннымБухгалтерскогоУчета(СчетаПоУмолчанию);
	НовыйДокумент.ЗаполнитьПоДаннымОрганизации();
	
	Попытка
		НовыйДокумент.Записать();
		Сообщить("Создан документ " + НовыйДокумент);
		Возврат НовыйДокумент.Ссылка;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	ОбщегоНазначения.СообщитьОбОшибке("Не удалось создать новый акт сверки взаиморасчетов.");
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьАктаСверки(мАктСверки)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = Документы.АктСверкиВзаиморасчетов.ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	НазваниеОрганизации = мАктСверки.Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = мАктСверки.Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = мАктСверки.Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = мАктСверки.Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = мАктСверки.ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = мАктСверки.ПредставительКонтрагента;
	
	ДолжностьПредставителяОрганизации = "";
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(мАктСверки.ПредставительКонтрагента), "", СокрЛП(мАктСверки.ПредставительКонтрагента.Должность));
	
	Если НЕ ЗначениеЗаполнено(мАктСверки.ДатаНачала) Тогда
		Если мАктСверки.ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = мАктСверки.ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = мАктСверки.ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = мАктСверки.ДатаНачала;
	КонецЕсли;		

	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " +
					Формат(мАктСверки.ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС +
					"между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ФИОПредставителя = "" + мАктСверки.ПредставительОрганизации;	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				+ ?(ДолжностьПредставителяОрганизации <> "", ДолжностьПредставителяОрганизации, "_______________________") + " "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"", ФИОПредставителя, "__________________________________________") + ", с одной стороны, "
				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(мАктСверки.ПредставительКонтрагента), "_____________________________________________", мАктСверки.ПредставительКонтрагента) +
				", с другой стороны, составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица 	= СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента 		= мАктСверки.ВалютаДокумента;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(мАктСверки.ОстатокНаНачало > 0, мАктСверки.ОстатокНаНачало, 0);
	НачОстКредит = ?(мАктСверки.ОстатокНаНачало < 0, -мАктСверки.ОстатокНаНачало, 0);
	
	ОстатокНаКонец = мАктСверки.ОстатокНаНачало + мАктСверки.ПоДаннымОрганизации.Итог("Дебет") - мАктСверки.ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -мАктСверки.ОстатокНаНачало + мАктСверки.ПоДаннымКонтрагента.Итог("Дебет") -  мАктСверки.ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(мАктСверки.ПоДаннымОрганизации.Количество(), мАктСверки.ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < мАктСверки.ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = мАктСверки.ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата, "ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < мАктСверки.ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = мАктСверки.ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата, "ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если мАктСверки.СверкаСогласована тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если мАктСверки.СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
	Если мАктСверки.ПоДаннымОрганизации.Количество() = 0
			И мАктСверки.ОстатокНаНачало = 0 Тогда
   	    РезультатыСверки = "<сверка не проведена>";
  	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.ДатаОкончания) Тогда
   	    РезультатыСверки = "<не указана дата сверки>";
   	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.Контрагент) Тогда
   	    РезультатыСверки = "<не указан контрагент>";
   	Иначе
		РезультатыСверки = "на " + Формат(мАктСверки.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") +
								" " + Строка(мАктСверки.ВалютаДокумента);
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") +
								" " + Строка(мАктСверки.ВалютаДокумента);
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	   	КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	Если мАктСверки.СверкаСогласована Тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
		Если мАктСверки.ПоДаннымКонтрагента.Количество() = 0
				И мАктСверки.ОстатокНаНачало = 0 Тогда
	   	    РезультатыСверки = "<сверка не проведена>";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(мАктСверки.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") +
									" " + строка(мАктСверки.ВалютаДокумента);
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") +
									" " + строка(мАктСверки.ВалютаДокумента);
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец + ОстатокНаКонецК <> 0 Тогда
			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере " +
			 				Формат(?(ОстатокНаКонец + ОстатокНаКонецК > 0, 1, -1) * (ОстатокНаКонец + ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") + " " +
							Строка(мАктСверки.ВалютаДокумента);
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки + Символы.ПС + " ";
		КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации 	= СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность 	= "________________";
	ОбластьПодвал.Параметры.ДолжностьК 	= "________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "(" + ФИОПредставителя + ")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "(" + ?(НЕ ЗначениеЗаполнено(мАктСверки.ПредставительКонтрагента), "_______________________", мАктСверки.ПредставительКонтрагента) + ")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура РаспечататьДокумент(СсылкаНаАктСверки)
	
	ТабДокумент = ПечатьАктаСверки(СсылкаНаАктСверки);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Акт сверки взаиморасчетов №" +
		ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаАктСверки) + " от " + Формат(СсылкаНаАктСверки.Дата, "ДФ='дд ММММ гггг'"), СсылкаНаАктСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетнаяПечать(Команда)
	
	Если Отчет.ДанныеОтчета.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет данных для печати!");
		Возврат;
	КонецЕсли;
	
	МассивСтруктур = ПолучитьТекущиеАктыСверки();
	
	//
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивСтруктур"	, МассивСтруктур);
	СтруктураПараметров.Вставить("ДатаОкончания"	, Отчет.ДатаОкончания);
	
	ОткрытьФорму("Отчет.ОтчетПоНаличиюСогласованногоАктаСверкиЗаПериод_.Форма.ФормаПечати", СтруктураПараметров);
	
КонецПроцедуры


Функция ПолучитьМассивСтруктурДанныхОтчета()
	
	МассивСтруктур = Новый Массив;
	
	ТекстСтруктуры = "Организация, Контрагент, НачальныйОстатокДт, НачальныйОстатокКт, ОборотДт, ОборотКт, КонечныйОстатокДт, КонечныйОстатокКт, АктСверкиФин, ПоследнийАктФин, АктСверкиБух, ПоследнийАктБух";
	Для Каждого СтрокаТЧ Из Отчет.ДанныеОтчета Цикл
		СтруктураЗначений = Новый Структура(ТекстСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураЗначений, СтрокаТЧ, ТекстСтруктуры);
		МассивСтруктур.Добавить(СтруктураЗначений);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВДокумент(Команда)
	
	МассивСтруктур = ПолучитьМассивСтруктурДанныхОтчета();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеОтчета", МассивСтруктур);
	
	//
	ФормаДокумента = ПолучитьФорму("Документ.АК_НаличиеСогласованногоАктаСверкиЗаПериод.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
	ФормаДокумента.Объект.ДатаНачала 	= Отчет.ДатаНачала;
	ФормаДокумента.Объект.ДатаОкончания = Отчет.ДатаОкончания;
	ФормаДокумента.Объект.Счет 			= Отчет.Счет;
	ФормаДокумента.Объект.ТекстОтбора	= Отчет.ТекстОтбора;
	
	ФормаДокумента.Модифицированность 	= Истина;
	
	ФормаДокумента.Открыть();
	
КонецПроцедуры
