
&НаСервереБезКонтекста
Функция ПолучитьДопФайлы(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка КАК СсылкаХранилище,
	|	ХранилищеДополнительнойИнформации.Объект,
	|	ХранилищеДополнительнойИнформации.Наименование,
	|	ХранилищеДополнительнойИнформации.ВидДанных,
	|	ХранилищеДополнительнойИнформации.ИмяФайла,
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.ТекстФайла,
	|	ХранилищеДополнительнойИнформации.Представление
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект В (&МассивДокументов)
	|	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументАктСверки(мОрганизация, мКонтрагент, ПоследняяДатаОкончания, мДата)
	
	НовыйДокумент = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	
	НовыйДокумент.Дата 			= КонецДня(мДата);
	Если НЕ ПоследняяДатаОкончания = Дата(1, 1, 1) Тогда
		НовыйДокумент.ДатаНачала = КонецДня(ПоследняяДатаОкончания) + 1;
	Иначе
		НовыйДокумент.ДатаНачала = Дата(2011, 10, 1)
	КонецЕсли;
	НовыйДокумент.ДатаОкончания = мДата;
	НовыйДокумент.Организация	= мОрганизация;
	НовыйДокумент.Контрагент	= мКонтрагент;
	
	НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СчетаПоУмолчанию = Новый Массив;
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	Для Счетчик = 1 По СчетаПоУмолчанию.Количество() Цикл
		СтрокаСчета = НовыйДокумент.СписокСчетов.Добавить();
		СтрокаСчета.УчаствуетВРасчетах = Истина;
	КонецЦикла; 
	НовыйДокумент.СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию, "Счет");
	
	НовыйДокумент.ЗаполнитьПоДаннымБухгалтерскогоУчета(СчетаПоУмолчанию);
	НовыйДокумент.ЗаполнитьПоДаннымОрганизации();
	
	НовыйДокумент.Комментарий = "[Создан автоматически]";
	
	Попытка
		НовыйДокумент.Записать();
		Сообщить("Создан документ " + НовыйДокумент);
		Возврат НовыйДокумент.Ссылка;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	ОбщегоНазначения.СообщитьОбОшибке("Не удалось создать новый акт сверки взаиморасчетов.");
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьСтрокиПечФорм(СтрокиДерева, ТекАктСверки, ТаблицаДопФайлы, НачалоФайла, н)
	
	СтрокаПечФормы = СтрокиДерева.Добавить();
	СтрокаПечФормы.АктСверки 		= "Акт сверки";
	СтрокаПечФормы.Печатать 		= Истина;
	СтрокаПечФормы.МакетПечФормы	= "АктСверки";
	
	ВидДопИнфФайл = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	СтруктураОтбора = Новый Структура("Объект", ТекАктСверки);
	СтрокиТаблицы = ТаблицаДопФайлы.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтрокаПечФормы = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПечФормы, СтрокаТаблицы);
		СтрокаПечФормы.АктСверки 	= ?(ЗначениеЗаполнено(СтрокаТаблицы.Наименование), СтрокаТаблицы.Наименование, СтрокаТаблицы.ИмяФайла);
		СтрокаПечФормы.Печатать 	= Истина;
	КонецЦикла;
	
КонецПроцедуры


Функция ПечатьАктаСверки(мАктСверки, ВидАктаСверки)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	ТабДок.Очистить();
	
	Макет  = Документы.АктСверкиВзаиморасчетов.ПолучитьМакет("АктСверки");

	ОбластьМакета = Макет.ПолучитьОбласть("Верхушка");
	Если ВидАктаСверки = 1 Тогда
		ОбластьМакета.Параметры.ВидАктаСверки = "созданный";
	ИначеЕсли ВидАктаСверки = 2 Тогда
		ОбластьМакета.Параметры.ВидАктаСверки = "согласованный";
	ИначеЕсли ВидАктаСверки = 3 Тогда
		ОбластьМакета.Параметры.ВидАктаСверки = "последний согласованный";
	Иначе
		ОбластьМакета.Параметры.ВидАктаСверки = "";
	КонецЕсли;
	ТабДок.Вывести(ОбластьМакета);
	
	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	НазваниеОрганизации = мАктСверки.Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = мАктСверки.Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = мАктСверки.Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = мАктСверки.Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = мАктСверки.ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = мАктСверки.ПредставительКонтрагента;
	
	ДолжностьПредставителяОрганизации = "";
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(мАктСверки.ПредставительКонтрагента), "", СокрЛП(мАктСверки.ПредставительКонтрагента.Должность));
	
	Если НЕ ЗначениеЗаполнено(мАктСверки.ДатаНачала) Тогда
		Если мАктСверки.ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = мАктСверки.ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = мАктСверки.ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = мАктСверки.ДатаНачала;
	КонецЕсли;		

	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " +
					Формат(мАктСверки.ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС +
					"между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ФИОПредставителя = "" + мАктСверки.ПредставительОрганизации;	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				+ ?(ДолжностьПредставителяОрганизации <> "", ДолжностьПредставителяОрганизации, "_______________________") + " "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"", ФИОПредставителя, "__________________________________________") + ", с одной стороны, "
				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(мАктСверки.ПредставительКонтрагента), "_____________________________________________", мАктСверки.ПредставительКонтрагента) +
				", с другой стороны, составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица 	= СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента 		= мАктСверки.ВалютаДокумента;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(мАктСверки.ОстатокНаНачало > 0, мАктСверки.ОстатокНаНачало, 0);
	НачОстКредит = ?(мАктСверки.ОстатокНаНачало < 0, -мАктСверки.ОстатокНаНачало, 0);
	
	ОстатокНаКонец = мАктСверки.ОстатокНаНачало + мАктСверки.ПоДаннымОрганизации.Итог("Дебет") - мАктСверки.ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -мАктСверки.ОстатокНаНачало + мАктСверки.ПоДаннымКонтрагента.Итог("Дебет") -  мАктСверки.ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(мАктСверки.ПоДаннымОрганизации.Количество(), мАктСверки.ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < мАктСверки.ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = мАктСверки.ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата, "ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < мАктСверки.ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = мАктСверки.ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата, "ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если мАктСверки.СверкаСогласована тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если мАктСверки.СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
	Если мАктСверки.ПоДаннымОрганизации.Количество() = 0
			И мАктСверки.ОстатокНаНачало = 0 Тогда
   	    РезультатыСверки = "<сверка не проведена>";
  	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.ДатаОкончания) Тогда
   	    РезультатыСверки = "<не указана дата сверки>";
   	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.Контрагент) Тогда
   	    РезультатыСверки = "<не указан контрагент>";
   	Иначе
		РезультатыСверки = "на " + Формат(мАктСверки.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") +
								" " + Строка(мАктСверки.ВалютаДокумента);
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") +
								" " + Строка(мАктСверки.ВалютаДокумента);
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	   	КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	Если мАктСверки.СверкаСогласована Тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
		Если мАктСверки.ПоДаннымКонтрагента.Количество() = 0
				И мАктСверки.ОстатокНаНачало = 0 Тогда
	   	    РезультатыСверки = "<сверка не проведена>";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(мАктСверки.Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(мАктСверки.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") +
									" " + строка(мАктСверки.ВалютаДокумента);
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") +
									" " + строка(мАктСверки.ВалютаДокумента);
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец + ОстатокНаКонецК <> 0 Тогда
			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере " +
			 				Формат(?(ОстатокНаКонец + ОстатокНаКонецК > 0, 1, -1) * (ОстатокНаКонец + ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") + " " +
							Строка(мАктСверки.ВалютаДокумента);
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки + Символы.ПС + " ";
		КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации 	= СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность 	= "________________";
	ОбластьПодвал.Параметры.ДолжностьК 	= "________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "(" + ФИОПредставителя + ")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "(" + ?(НЕ ЗначениеЗаполнено(мАктСверки.ПредставительКонтрагента), "_______________________", мАктСверки.ПредставительКонтрагента) + ")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте                                       
Процедура РаспечататьДокумент(СсылкаНаАктСверки, ВидАктаСверки, мКоличествоЭкземпляров, мНаПринтер)
	
	ТабДокумент = ПечатьАктаСверки(СсылкаНаАктСверки, ВидАктаСверки);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, мКоличествоЭкземпляров, мНаПринтер, "Акт сверки взаиморасчетов №" +
		ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаАктСверки) + " от " + Формат(СсылкаНаАктСверки.Дата, "ДФ='дд ММММ гггг'"), СсылкаНаАктСверки);
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.НаПринтер 				= Истина;
	ЭтаФорма.КоличествоЭкземпляров 	= 1;
	
	//
	//ВидДопИнфФайл = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	ВремКаталог = РаботаСФайлами.ПолучитьИмяКаталога();
	НачалоФайла = ВремКаталог + ?(Прав(ВремКаталог, 1) = "\", "", "\");
	
	
	СтруктураОтбораОрг = Новый Структура("Организация");
	ВремТаблица = Новый ТаблицаЗначений;
	ВремТаблица.Колонки.Добавить("Организация"		, Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ВремТаблица.Колонки.Добавить("Контрагент"		, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ВремТаблица.Колонки.Добавить("АктСверкиФин"		, Новый ОписаниеТипов("ДокументСсылка.АктСверкиВзаиморасчетов"));
	ВремТаблица.Колонки.Добавить("ПоследнийАкт"		, Новый ОписаниеТипов("ДокументСсылка.АктСверкиВзаиморасчетов"));
	ВремТаблица.Колонки.Добавить("АктСверкиСоздать"	, Новый ОписаниеТипов("ДокументСсылка.АктСверкиВзаиморасчетов"));
	ВремТаблица.Колонки.Добавить("ПоследняяДатаОкончания", Новый ОписаниеТипов("Дата"));
	МассивДокументов = Новый Массив;
	
	//
	ЭтаФорма.ДатаОкончания 	= ЭтаФорма.Параметры.ДатаОкончания;
	МассивСтруктур 			= ЭтаФорма.Параметры.МассивСтруктур;
	Для Каждого ТекСтруктура Из МассивСтруктур Цикл
		НоваяСтрока = ВремТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтруктура);
		Если НЕ ТекСтруктура.АктСверкиФин.Пустая() Тогда
			МассивДокументов.Добавить(ТекСтруктура.АктСверкиФин);
		КонецЕсли;
		Если НЕ ТекСтруктура.АктСверкиСоздать.Пустая() Тогда
			МассивДокументов.Добавить(ТекСтруктура.АктСверкиСоздать);
		КонецЕсли;
		Если НЕ ТекСтруктура.ПоследнийАкт.Пустая() Тогда
			МассивДокументов.Добавить(ТекСтруктура.ПоследнийАкт);
		КонецЕсли;
	КонецЦикла;
	
	ВремТаблица2 = ВремТаблица.Скопировать(, "Организация");
	ВремТаблица2.Свернуть("Организация");
	
	//
	ТаблицаДопФайлы = ПолучитьДопФайлы(МассивДокументов);
	
	ДеревоВФорме = РеквизитФормыВЗначение("ДеревоДокументов");
	
	н = 0;
	
	Для Каждого СтрокаОрг Из ВремТаблица2 Цикл
		
		СтрокаОрганизации = ДеревоВФорме.Строки.Добавить();
		СтрокаОрганизации.АктСверки = СтрокаОрг.Организация;
		
		СтруктураОтбораОрг.Организация = СтрокаОрг.Организация;
	    СтрокиТаблицы = ВремТаблица.НайтиСтроки(СтруктураОтбораОрг);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			СтрокаКонтрагента = СтрокаОрганизации.Строки.Добавить();
			СтрокаКонтрагента.АктСверки = СтрокаТаблицы.Контрагент;
			
			Если НЕ СтрокаТаблицы.АктСверкиФин.Пустая() Тогда
				СтрокаАкта = СтрокаКонтрагента.Строки.Добавить();
				СтрокаАкта.АктСверки 		= СтрокаТаблицы.АктСверкиФин;
				СтрокаАкта.ВидАктаСверки 	= 2;
				
				ДобавитьСтрокиПечФорм(СтрокаАкта.Строки, СтрокаАкта.АктСверки, ТаблицаДопФайлы, НачалоФайла, н);
			Иначе
				СтрокаАкта = СтрокаКонтрагента.Строки.Добавить();
				СтрокаАкта.АктСверки 		= СтрокаТаблицы.АктСверкиСоздать;
				СтрокаАкта.ВидАктаСверки 	= 1;
				Если СтрокаТаблицы.АктСверкиСоздать.Пустая() Тогда
					СтрокаАкта.СоздаватьДокумент 		= Истина;
					СтрокаАкта.ПоследняяДатаОкончания 	= СтрокаТаблицы.ПоследняяДатаОкончания;
				КонецЕсли;
				ДобавитьСтрокиПечФорм(СтрокаАкта.Строки, СтрокаАкта.АктСверки, ТаблицаДопФайлы, НачалоФайла, н);
			КонецЕсли;
			
			Если (НЕ СтрокаТаблицы.ПоследнийАкт.Пустая())
					И НЕ СтрокаТаблицы.ПоследнийАкт = СтрокаТаблицы.АктСверкиФин Тогда
				СтрокаАкта = СтрокаКонтрагента.Строки.Добавить();
				СтрокаАкта.АктСверки 		= СтрокаТаблицы.ПоследнийАкт;
				СтрокаАкта.ВидАктаСверки 	= 3;
				
				ДобавитьСтрокиПечФорм(СтрокаАкта.Строки, СтрокаАкта.АктСверки, ТаблицаДопФайлы, НачалоФайла, н);
			КонецЕсли;
					
		КонецЦикла;	
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ДеревоВФорме, "ДеревоДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоздаватьДокументы(Команда)
	
	Для Каждого СтрокаОрганизации Из ЭтаФорма.ДеревоДокументов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаКонтрагента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаАкта Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(СтрокаАкта.АктСверки)
						ИЛИ СтрокаАкта.СоздаватьДокумент Тогда
					Продолжить;
				КонецЕсли;
				СтрокаАкта.СоздаватьДокумент = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСоздаватьДокументы(Команда)
	
	Для Каждого СтрокаОрганизации Из ЭтаФорма.ДеревоДокументов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаКонтрагента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаАкта Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(СтрокаАкта.АктСверки)
						ИЛИ НЕ СтрокаАкта.СоздаватьДокумент Тогда
					Продолжить;
				КонецЕсли;
				СтрокаАкта.СоздаватьДокумент = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)

	Для Каждого СтрокаОрганизации Из ЭтаФорма.ДеревоДокументов.ПолучитьЭлементы() Цикл
		ТекОрганизация = СтрокаОрганизации.АктСверки;
		Для Каждого СтрокаКонтрагента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
			ТекКонтрагент = СтрокаКонтрагента.АктСверки;
			Для Каждого СтрокаАкта Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(СтрокаАкта.АктСверки)
						ИЛИ (НЕ СтрокаАкта.СоздаватьДокумент)
						ИЛИ СтрокаАкта.ПоследняяДатаОкончания = Дата(1, 1, 1) Тогда
					Продолжить;
				КонецЕсли;
				ТекДокумент = СоздатьДокументАктСверки(ТекОрганизация, ТекКонтрагент, СтрокаАкта.ПоследняяДатаОкончания, ЭтаФорма.ДатаОкончания);
				СтрокаАкта.АктСверки 			= ТекДокумент;
				СтрокаАкта.СоздаватьДокумент 	= Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагПечатать(Команда)
	
	Для Каждого СтрокаОрганизации Из ЭтаФорма.ДеревоДокументов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаКонтрагента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаАкта Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
				Для Каждого СтрокаДерева Из СтрокаАкта.ПолучитьЭлементы() Цикл
					Если НЕ СтрокаДерева.Печатать Тогда
						СтрокаДерева.Печатать = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагПечатать(Команда)
	
	Для Каждого СтрокаОрганизации Из ЭтаФорма.ДеревоДокументов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаКонтрагента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаАкта Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
				Для Каждого СтрокаДерева Из СтрокаАкта.ПолучитьЭлементы() Цикл
					Если СтрокаДерева.Печатать Тогда
						СтрокаДерева.Печатать = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры

Функция ПолучитьХранилищеЗначенияПоФайлу(ИмяФайла_Проверенное, мСсылкаХранилище)
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	мРасширение = РаботаСФайлами.ПолучитьРасширениеФайла(ИмяФайла_Проверенное);
	Файлы = НайтиФайлы(КаталогСохранения, Строка(мСсылкаХранилище.УникальныйИдентификатор()) + "." + мРасширение, Истина);
	Если Файлы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяФайлаВСтрокеДерева(СтрокаДерева, НачалоФайла, н)
	
	ТекХранилище = СтрокаДерева.СсылкаХранилище.Хранилище;

	ИмяФайла_Проверенное = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(СтрокаДерева.ИмяФайла);
	
	ДанныеВХранилище = ТекХранилище.Получить();
	Если ДанныеВХранилище = Неопределено Тогда
		ТекХранилище = ПолучитьХранилищеЗначенияПоФайлу(ИмяФайла_Проверенное, СтрокаДерева.СсылкаХранилище);
	КонецЕсли;
	
	Если СтрокаДерева.ВидДанных = ПредопределенноеЗначение("Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл") Тогда
		ТекИмяФайла = НачалоФайла + ИмяФайла_Проверенное;
		Если РаботаСФайлами.СохранитьФайлНаДиске(ТекХранилище, ТекИмяФайла, Ложь, "", Ложь) Тогда
			Возврат ТекИмяФайла;
		Иначе
			Сообщить("Ошибка при записи файла " + ТекИмяФайла);
		КонецЕсли;
	Иначе // Изображение
		ТекИзображение = ТекХранилище.Получить(); //тип - "Картинка"
		Если НЕ ТекИзображение.Вид = ВидКартинки.Пустая Тогда
			н = н + 1;
			ТекИмяФайла = НачалоФайла + "______" + Формат(н, "ЧГ=") +".jpg";
			Попытка
				ТекИзображение.Записать(ТекИмяФайла);
				Возврат ТекИмяФайла;
			Исключение
				Сообщить("Ошибка при записи файла " + ТекИмяФайла);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	
	ВремКаталог = РаботаСФайлами.ПолучитьИмяКаталога();
	НачалоФайла = ВремКаталог + ?(Прав(ВремКаталог, 1) = "\", "", "\");

	н = 0;
	Для Каждого СтрокаОрганизации Из ЭтаФорма.ДеревоДокументов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаКонтрагента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаАкта Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
				Для Каждого СтрокаДерева Из СтрокаАкта.ПолучитьЭлементы() Цикл
					Если НЕ СтрокаДерева.Печатать Тогда
						Продолжить;
					КонецЕсли;
					
					ТекРодитель = СтрокаДерева.ПолучитьРодителя();
					Если ТекРодитель = Неопределено Тогда // группировки по актам сверки
						Продолжить;
					КонецЕсли;
					
					Если СтрокаДерева.МакетПечФормы = "" Тогда // доп. файлы
						ТекИмяФайла = ПолучитьИмяФайлаВСтрокеДерева(СтрокаДерева, НачалоФайла, н);
						Если ТекИмяФайла = "" Тогда
							Продолжить;
						КонецЕсли;
						ТекстВызоваПриложения = ДопМодульСервер.ПолучитьТекстВызоваПрограммыПечатиФайлов(ТекИмяФайла);
						Если ТекстВызоваПриложения = "" Тогда
							Продолжить;
						КонецЕсли;
						ТекстВызоваПриложения = СтрЗаменить(ТекстВызоваПриложения, "пИмяФайла", ТекИмяФайла);
						Попытка
							ЗапуститьПриложение(ТекстВызоваПриложения);
						Исключение
							Сообщить("Не удалось распечатать файл " + ТекИмяФайла + Символы.ПС + ОписаниеОшибки());
						КонецПопытки;
					Иначе  // встроенная печ. форма акта сверки
						ТекДокумент = ТекРодитель.АктСверки;
						
						Если СтрокаДерева.МакетПечФормы = "АктСверки"
								И НЕ ТекДокумент.Пустая() Тогда
							РаспечататьДокумент(ТекДокумент, СтрокаАкта.ВидАктаСверки, ЭтаФорма.КоличествоЭкземпляров, ЭтаФорма.НаПринтер);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	ТекЭлемент = Элементы.ДеревоДокументов.ТекущийЭлемент;
	Если ТекДанные = Неопределено
			ИЛИ ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекЭлемент.Имя = "ДеревоДокументовСоздаватьДокумент" Тогда
		НижниеСтроки = ТекДанные.ПолучитьЭлементы();
		
		Отказ = (НижниеСтроки.Количество() = 0)
					ИЛИ ЗначениеЗаполнено(ТекДанные.АктСверки);
	ИначеЕсли ТекЭлемент.Имя = "ДеревоДокументовПечатать" Тогда
		НижниеСтроки = ТекДанные.ПолучитьЭлементы();
		
		Отказ = (НижниеСтроки.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовАктСверкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТипЗнч(ТекДанные.АктСверки) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		ВремКаталог = РаботаСФайлами.ПолучитьИмяКаталога();
		НачалоФайла = ВремКаталог + ?(Прав(ВремКаталог, 1) = "\", "", "\");
		Если ТекДанные.МакетПечФормы = "" Тогда // доп. файлы
			ТекИмяФайла = ПолучитьИмяФайлаВСтрокеДерева(ТекДанные, НачалоФайла, 1);
			Если ТекИмяФайла = "" Тогда
				Возврат;
			КонецЕсли;
			Попытка
				ЗапуститьПриложение("explorer " + ТекИмяФайла);		
			Исключение
				Сообщить("Не удалось открыть файл " + ТекИмяФайла);
			КонецПопытки;
		Иначе
			ТекДокумент = ТекДанные.ПолучитьРодителя().АктСверки;
			
			Если ТекДанные.МакетПечФормы = "АктСверки"
					И НЕ ТекДокумент.Пустая() Тогда
				РаспечататьДокумент(ТекДокумент, ТекДанные.ПолучитьРодителя().ВидАктаСверки, 1, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТабДокумент()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПоНаличиюСогласованногоАктаСверкиЗаПериод_ДокументыКПечати";
	
	ТекМакет = Отчеты.ОтчетПоНаличиюСогласованногоАктаСверкиЗаПериод_.ПолучитьМакет("ДокументыКПечати");
	
	ОбластьМакета = ТекМакет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаОрг 	= ТекМакет.ПолучитьОбласть("СтрокаОрг");
	ОбластьМакетаКонтр 	= ТекМакет.ПолучитьОбласть("СтрокаКонтр");
	ОбластьМакетаАкт 	= ТекМакет.ПолучитьОбласть("СтрокаАкт");
	ОбластьМакета 		= ТекМакет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаОрганизации Из ЭтаФорма.ДеревоДокументов.ПолучитьЭлементы() Цикл
		ОбластьМакетаОрг.Параметры.Организация = СтрокаОрганизации.АктСверки;
		ТабДокумент.Вывести(ОбластьМакетаОрг);
		Для Каждого СтрокаКонтрагента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
			ОбластьМакетаКонтр.Параметры.Контрагент = СтрокаКонтрагента.АктСверки;
			ТабДокумент.Вывести(ОбластьМакетаКонтр);
			Для Каждого СтрокаАкта Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
				Если СтрокаАкта.ВидАктаСверки = 1 Тогда
					ПредставлениеАктаСверки = "Акт сверки созданный в ФУ";
				ИначеЕсли СтрокаАкта.ВидАктаСверки = 2 Тогда
					ПредставлениеАктаСверки = "Акт сверки согласованный в ФУ";
				ИначеЕсли СтрокаАкта.ВидАктаСверки = 3 Тогда
					ПредставлениеАктаСверки = "Акт сверки последний в ФУ";
				Иначе
					ПредставлениеАктаСверки = "";
				КонецЕсли;
				ОбластьМакетаАкт.Параметры.ПредставлениеАктаСверки 	= ПредставлениеАктаСверки;
				ОбластьМакетаАкт.Параметры.АктСверки 				= СтрокаАкта.АктСверки;
				ОбластьМакетаАкт.Параметры.СоздаватьДокумент 		= ?(СтрокаАкта.СоздаватьДокумент, "v", "");
				ОбластьМакетаАкт.Параметры.ПоследняяДатаОкончания	= СтрокаАкта.ПоследняяДатаОкончания;
				ТабДокумент.Вывести(ОбластьМакетаАкт);
				Для Каждого СтрокаДерева Из СтрокаАкта.ПолучитьЭлементы() Цикл
					ОбластьМакета.Параметры.Печатать 			= ?(СтрокаДерева.Печатать, "v", "");
					ОбластьМакета.Параметры.ПечатныйДокумент	= СтрокаДерева.АктСверки;
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб 	= Истина;
	ТабДокумент.ФиксацияСверху 	= 2;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ВывестиТабДокумент(Команда)
	
	ТабДокумент = ПолучитьТабДокумент();
	ТабДокумент.Показать();
	
КонецПроцедуры
