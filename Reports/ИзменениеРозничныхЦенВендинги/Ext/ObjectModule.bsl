////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует отчет на основании данных по проведению документа "Установка типов цен номенклатуры"(анализ только ассортимента Вкусоматов)
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров
//
Процедура СформироватьОправитьОтчетПоИзменениюРозничныхЦенВкусоматы(СтруктураПараметров) Экспорт //+++АК mika 2018.12.14 ИП-00020382
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных")); 
	
	Если СтруктураПараметров.Свойство("Документ") Тогда
		ДокументСсылка = СтруктураПараметров.Документ;
		МакетКомпоновки.ЗначенияПараметров.Документ.Значение = ДокументСсылка;
	Иначе
		Возврат;
	КонецЕсли;

	Если ПроверитьНеобходимостьОтправкиДанных(СхемаКомпоновкиДанных.НаборыДанных.ИзменяемыеПозиции.Запрос, ДокументСсылка) Тогда 
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
		
		ДокументРезультат = Новый ТабличныйДокумент;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ЗаполнитьПолучателейПисьма(СтруктураПараметров);

		ОтправитьПисьмаПолучателям(ДокументРезультат, СтруктураПараметров);
		
	КонецЕсли;

КонецПроцедуры // СформироватьИОправитьОтчетПоИзменениюРозничныхЦенТилси()

// Выполняет проверку необходимости отправки данных об изменении розничных цен
//
// Параметры:
//  ТекстЗапроса  - <Тип.Строка> - Текст основного запроса
//  ДокументСсылка  - <Тип.ДокуменСсылка> - Установка типов цен номенклатуры
//
// Возвращаемое значение:
//   <Тип.Булево>   - Результат проверки
//
Функция ПроверитьНеобходимостьОтправкиДанных(ТекстЗапроса, ДокументСсылка) //+++АК mika 2018.12.14 ИП-00020382

	Запрос = Новый Запрос (ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();

КонецФункции // ПроверитьНеобходимостьОтправкиДанных()

//Заполняет структуру параметров письма и отправляет получателям //+++АК mika 2018.12.14 ИП-00020382
//
// Параметры:
//  ТабличныйДокумент  - <Тип.ТабличныйДокумент> - Табличный документ для отправки
//  СтруктураПараметров - <Тип.Структура> - Структура дополнительных параметров
//
Процедура ОтправитьПисьмаПолучателям(ТабличныйДокумент, СтруктураПараметров)
	
	//Формирование структуры письма
	СтруктураПисьма = Новый Структура();
	СтруктураПисьма.Вставить("Получатели",  СтруктураПараметров.Получатели);
	СтруктураПисьма.Вставить("Отправитель", Документы.ИзменениеЗакупочныхЦен.ПолучитьУчетнуюЗаписьДляРассылки("no-reply@vkusvill.ru")); 
	СтруктураПисьма.Вставить("Тема",        СтрЗаменить("Информация об изменении розничных цен (Вкусоматы) Документ", "Документ", СтруктураПараметров.Документ)); 
	СтруктураПисьма.Вставить("Текст", "");
	
	Если СтруктураПараметров.Свойство("МассивКопий") Тогда
		СтруктураПисьма.Вставить("Копии", СтруктураПараметров.МассивКопий);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТестоваяРассылка") Тогда
		СтруктураПисьма.Получатели = СтруктураПараметров.ТестоваяРассылка;
		СтруктураПисьма.Удалить("Копии");
	КонецЕсли;
	
	//Формирование тела письма
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	
	СтруктураПисьма.Текст = ТекстовыйДокумент.ПолучитьТекст();	

	//Удаление временных файлов
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;

	Если СтруктураПараметров.Свойство("БезОтправки") Тогда
		Возврат;
	КонецЕсли;
	
	//Отправка письма
	Документы.ИзменениеЗакупочныхЦен.ОтправитьПисьмо(СтруктураПисьма);
	
КонецПроцедуры

// Заполняет получателей из данных периодического задания
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров
//
Процедура ЗаполнитьПолучателейПисьма(СтруктураПараметров) //+++АК mika 2018.12.14 ИП-00020382
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодическиеЗаданияПолучателиРассылки.ЭлектронныйАдрес
	|ИЗ
	|	Справочник.ПериодическиеЗадания.ПолучателиРассылки КАК ПериодическиеЗаданияПолучателиРассылки
	|ГДЕ
	|	ПериодическиеЗаданияПолучателиРассылки.Ссылка.Код = ""00216""
	|	И НЕ ПериодическиеЗаданияПолучателиРассылки.Ссылка.НеВыполнять";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Получатели = "";
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Получатели = Получатели + Выборка.ЭлектронныйАдрес + ";";
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Получатели", Получатели);

КонецПроцедуры // ЗаполнитьПолучателейПисьма()
