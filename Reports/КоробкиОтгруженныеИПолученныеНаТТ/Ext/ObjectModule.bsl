
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала = '00010101';
	ДатаОкончания = '00010101';
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "Период" Тогда
			ДатаНачала = ПользПоле.Значение.ДатаНачала;
			ДатаОкончания = КонецДня(ПользПоле.Значение.ДатаОкончания);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("РасходныйОрдер", Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
	ТаблицаДанных.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("СкладВладелец", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("ОтправленоКоробок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Отправлено", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПолученоНаТТКоробок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПолученоНаТТ", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПолученоНаТТНоНеБылоОтправленоСкладомКоробок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПолученоНаТТНоНеБылоОтправленоСкладом", Новый ОписаниеТипов("Число"));
	
	ТабТТ = Новый ТаблицаЗначений();
	ТабТТ.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабТТ.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабТТ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабТТ.Колонки.Добавить("ПолученоНаТТ", Новый ОписаниеТипов("Число"));
	Если ДатаОкончания >= ТекущаяДата() - 86400 Тогда
		ТабПоЧекам = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(НачалоДня(ТекущаяДата() - 86400), ДатаОкончания);
		Для Каждого СтрокаТаб Из ТабПоЧекам Цикл
			СтрокаДоб = ТабТТ.Добавить();
			СтрокаДоб.Дата = СтрокаТаб.День;
			СтрокаДоб.СтруктурнаяЕдиница = СтрокаТаб.ТТ;
			СтрокаДоб.Номенклатура = СтрокаТаб.Номенклатура;
			СтрокаДоб.ПолученоНаТТ = СтрокаТаб.Поступило;
		КонецЦикла;	
	КонецЕсли;
	
	Если ДатаНачала <= КонецДня(ТекущаяДата() - 86400 * 2) Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНачала), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Мин(ДатаОкончания, КонецДня(ТекущаяДата() - 86400 * 2)), ВидГраницы.Включая));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Период,
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница,
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот
		               |ИЗ
		               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(&ДатаНач, &ДатаКон, День, ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Поступление)) КАК ДвиженияТоваровПоЛистамУчетаОбороты";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДоб = ТабТТ.Добавить();
			СтрокаДоб.Дата = Выборка.Период;
			СтрокаДоб.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			СтрокаДоб.Номенклатура = Выборка.Номенклатура;
			СтрокаДоб.ПолученоНаТТ = Выборка.КоличествоОборот;
		КонецЦикла;	
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОкончания));
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТТ,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	               |	РасходныйОрдерСкладТовары.Ссылка КАК РасходныйОрдер,
	               |	НАЧАЛОПЕРИОДА(ВЫБОР
	               |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	               |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	               |		КОНЕЦ, ДЕНЬ) КАК Дата,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	               |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	               |		КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	               |	И РасходныйОрдерСкладТовары.Ссылка.Получатель <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад,
	               |	РасходныйОрдерСкладТовары.Ссылка,
	               |	НАЧАЛОПЕРИОДА(ВЫБОР
	               |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	               |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	               |		КОНЕЦ, ДЕНЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВКоробкеПоДням.День КАК Дата,
	               |	КоличествоВКоробкеПоДням.Номенклатура,
	               |	КоличествоВКоробкеПоДням.Характеристика,
	               |	КоличествоВКоробкеПоДням.Количество,
	               |	КоличествоВКоробкеПоДням.СтруктурнаяЕдиница
	               |ИЗ
	               |	РегистрСведений.КоличествоВКоробкеПоДням КАК КоличествоВКоробкеПоДням
	               |ГДЕ
	               |	КоличествоВКоробкеПоДням.День МЕЖДУ &ДатаНач И &ДатаКон";
				   
	Результаты = Запрос.ВыполнитьПакет();				   
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаДанных.Добавить();
		СтрокаДоб.Дата = Выборка.Дата;
		СтрокаДоб.РасходныйОрдер = Выборка.РасходныйОрдер;
		СтрокаДоб.СтруктурнаяЕдиница = Выборка.ТТ;
		СтрокаДоб.Склад = Выборка.Склад;
		СтрокаДоб.СкладВладелец = Выборка.СкладВладелец;
		СтрокаДоб.Номенклатура = Выборка.Номенклатура;
		СтрокаДоб.Характеристика = Выборка.Характеристика;
		СтрокаДоб.Отправлено = Выборка.Количество;
	КонецЦикла;
	
	ТабКолвоВУпаковке = Результаты[1].Выгрузить();
	ТабКолвоВУпаковке.Индексы.Добавить("Дата, СтруктурнаяЕдиница, Номенклатура, Характеристика");
	
	ТаблицаДанных.Индексы.Добавить("Дата, СтруктурнаяЕдиница, Номенклатура");
	Для Каждого СтрокаТТ Из ТабТТ Цикл
		СтрокиДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("Дата, СтруктурнаяЕдиница, Номенклатура", СтрокаТТ.Дата, СтрокаТТ.СтруктурнаяЕдиница, СтрокаТТ.Номенклатура));
		Если СтрокиДанных.Количество() = 0 Тогда
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.Дата = СтрокаТТ.Дата;
			СтрокаДоб.СтруктурнаяЕдиница = СтрокаТТ.СтруктурнаяЕдиница;
			СтрокаДоб.Номенклатура = СтрокаТТ.Номенклатура;
			СтрокаДоб.ПолученоНаТТНоНеБылоОтправленоСкладом = СтрокаТТ.ПолученоНаТТ;
		Иначе
			КолвоКРаспределению = СтрокаТТ.ПолученоНаТТ;
			Для Каждого СтрокаДанные Из СтрокиДанных Цикл
				Если КолвоКРаспределению <= 0 Тогда
					Продолжить;
				КонецЕсли;	
				МинКолво = Мин(СтрокаДанные.Отправлено, КолвоКРаспределению);
				СтрокаДанные.ПолученоНаТТ = СтрокаДанные.ПолученоНаТТ + МинКолво;
				КолвоКРаспределению = КолвоКРаспределению - МинКолво;
			КонецЦикла;
			Если КолвоКРаспределению > 0 Тогда
				СтрокиДанных[0].ПолученоНаТТ = СтрокиДанных[0].ПолученоНаТТ + КолвоКРаспределению;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		Если СтрокаТаб.ПолученоНаТТНоНеБылоОтправленоСкладом > 0 Тогда
			СтрокиДанныеУпаковки = ТабКолвоВУпаковке.НайтиСтроки(Новый Структура("Дата, Номенклатура", СтрокаТаб.Дата, СтрокаТаб.Номенклатура));
			Если СтрокиДанныеУпаковки.Количество() > 0
				И СтрокиДанныеУпаковки[0].Количество <> 0 Тогда
				СтрокаТаб.ПолученоНаТТНоНеБылоОтправленоСкладомКоробок = Окр(СтрокаТаб.ПолученоНаТТНоНеБылоОтправленоСкладом / СтрокиДанныеУпаковки[0].Количество, 0, РежимОкругления.Окр15как20);
			КонецЕсли;	
		Иначе	
			СтрокиДанныеУпаковки = ТабКолвоВУпаковке.НайтиСтроки(Новый Структура("Дата, СтруктурнаяЕдиница, Номенклатура, Характеристика", СтрокаТаб.Дата, СтрокаТаб.СкладВладелец, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
			Если СтрокиДанныеУпаковки.Количество() > 0
				И СтрокиДанныеУпаковки[0].Количество <> 0 Тогда
				СтрокаТаб.ПолученоНаТТКоробок = Окр(СтрокаТаб.ПолученоНаТТ / СтрокиДанныеУпаковки[0].Количество, 0, РежимОкругления.Окр15как20);
				СтрокаТаб.ОтправленоКоробок = Окр(СтрокаТаб.Отправлено / СтрокиДанныеУпаковки[0].Количество, 0, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	ТабТТ = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаДанных);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры
