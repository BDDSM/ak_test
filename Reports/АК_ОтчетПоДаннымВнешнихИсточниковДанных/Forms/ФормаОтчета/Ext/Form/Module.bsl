///////////////////////////////////

///////////////////////////////////

&НаСервере
Функция СкомпоноватьРезультатНаСервере()
	
	//
	СводнаяТаблица = Неопределено;
	ТаблицаВыбранныхПолей = Неопределено;
	
	//
	ОтчетПоДаннымВнешнихИсточников.ДополнительныеСвойства.Свойство("СводнаяТаблица", СводнаяТаблица);
	ОтчетПоДаннымВнешнихИсточников.ДополнительныеСвойства.Свойство("ТаблицаВыбранныхПолей", ТаблицаВыбранныхПолей);
		
	//
	Справочники.АК_ОтчетыПоДаннымВнешнихИсточников.Сформировать(Результат, ОтчетПоДаннымВнешнихИсточников.ВнешняяБазаДанных, ТаблицаВыбранныхПолей, Отчет.КомпоновщикНастроек, ДанныеРасшифровки, Отчет.Периодичность);
	
	//
	ВариантМодифицирован = Ложь;
	
КонецФункции	

&НаКлиенте
Процедура Сформировать(Команда)
	
	//
	Параметр = Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок");
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Параметр);
	Параметр.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
	Параметр.Использование = Истина;
	
	//
	Параметр = Новый ПараметрКомпоновкиДанных("Заголовок");
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Параметр);
	Параметр.Значение = ВариантНастроек;
	Параметр.Использование = Истина;
	
	//
	Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Параметр);
	Параметр.Значение = НачалоДня(Период.ДатаНачала);
	Параметр.Использование = ЗначениеЗаполнено(Период.ДатаНачала);
	
	//
	Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Параметр);
	Параметр.Значение = КонецДня(Период.ДатаОкончания);
	Параметр.Использование = ЗначениеЗаполнено(Период.ДатаОкончания);
	
	//
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//
	СкомпоноватьРезультатНаСервере();
	
КонецПроцедуры

///////////////////////////////////

///////////////////////////////////

&НаСервере
Процедура _НастроитьСхемуКомпоновкиДанных(БазаДанных)
	
	//
	ТекстЗапроса = "";
	
	//
	СводнаяТаблица = Неопределено;
	ТаблицаВыбранныхПолей = Неопределено;
	
	//
	ОтчетПоДаннымВнешнихИсточников.ДополнительныеСвойства.Свойство("СводнаяТаблица", СводнаяТаблица);
	ОтчетПоДаннымВнешнихИсточников.ДополнительныеСвойства.Свойство("ТаблицаВыбранныхПолей", ТаблицаВыбранныхПолей);
	
	//
	СоответствиеНастроек = Новый Структура;
	
	//
	Если ОтчетПоДаннымВнешнихИсточников.ДополнительныеСвойства.Свойство("НастройкиСКД") Тогда
		Для Каждого ЭлементСтруктуры Из ОтчетПоДаннымВнешнихИсточников.ДополнительныеСвойства.НастройкиСКД Цикл
			СоответствиеНастроек.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	//
	Для Каждого СтрокаТЗ Из СводнаяТаблица Цикл
		
		//
		ТаблицаВнешнейБД = Справочники.АК_ТаблицыВнешнейБазыДанных.НайтиПоКоду(СтрокаТЗ.ИмяТаблицы,,, БазаДанных);
		
		//
		ТЗ_ОписаниеПолей = ТаблицаВнешнейБД.Поля.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеПолей Цикл
			_СтрокаТЗ.Имя = ВРЕГ(_СтрокаТЗ.Имя);
		КонецЦикла;	
		
		//
		ТЗ_ОписаниеСвязей = ТаблицаВнешнейБД.ОписаниеСвязей.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеСвязей Цикл
			_СтрокаТЗ.ВнешняяБД_Имя = ВРЕГ(_СтрокаТЗ.ВнешняяБД_Имя);
		КонецЦикла;	
		
		//
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ " + Символы.ПС;
		КонецЕсли;	
		
		//
		МассивОписанийПолей = Новый Массив;
		
		//
		Для Каждого _СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ _СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			стрОписаниеПоля = "";
			
			//
			ИмяРеквизита = _СтрокаТЗ.ИмяПоля;
			ЗначениеРеквизита = _СтрокаТЗ[СтрокаТЗ.ИмяТаблицы];
			
			//
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				стрОписаниеПоля = "NULL";
			Иначе
				
				//
				стрОписаниеПоля = ""; //тут нужно находить связь с ИБ 1С и типизировать
				
				//
				Если ЗначениеЗаполнено(_СтрокаТЗ.ОбъектМетаданных) Тогда
					
					//
					стрОписаниеПоля = "ЗНАЧЕНИЕ(" + СокрЛП(_СтрокаТЗ.ОбъектМетаданных) + ".ПустаяСсылка)"; //тут нужно находить связь с ИБ 1С и типизировать
					
				Иначе	
				
					//
					СтруктураПоиска = Новый Структура("Имя", ЗначениеРеквизита);
					
					//
					НайденныеСтроки =  ТЗ_ОписаниеПолей.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						//
						НайденнаяСтрока = НайденныеСтроки[0];
						Если ЗначениеЗаполнено(НайденнаяСтрока.Тип) Тогда
							
							//
							Если Найти(ВРЕГ(НайденнаяСтрока.Тип), "DATE") > 0 Тогда
								стрОписаниеПоля = "ДатаВремя(1,1,1)";
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "BIT") > 0 Тогда							
								стрОписаниеПоля = "Ложь";
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "INT") > 0 Тогда							
								стрОписаниеПоля = "0";	
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "REAL") > 0 Тогда							
								стрОписаниеПоля = "0";		
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "FLOAT") > 0 Тогда							
								стрОписаниеПоля = "0";			
							Иначе
								стрОписаниеПоля = """""";	
							КонецЕсли;	
						
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЕсли;
				
				//
				Если Не ЗначениеЗаполнено(стрОписаниеПоля) Тогда
					стрОписаниеПоля = "NULL";
				КонецЕсли;	
				
			КонецЕсли;
			
			//
			Если ЛОЖЬ И ЗначениеЗаполнено(_СтрокаТЗ.Функция) Тогда
				стрОписаниеПоля = _СтрокаТЗ.Функция + "(" + стрОписаниеПоля + ")";
			КонецЕсли;	
			
			//
			стрОписаниеПоля = стрОписаниеПоля + " КАК " + ИмяРеквизита;
			
			//
			МассивОписанийПолей.Добавить(стрОписаниеПоля);
			
		КонецЦикла;	
		
		//
		Если МассивОписанийПолей.Количество() > 0 Тогда
		
		
			//
			СтрокаТекстЗапроса = "";
			Для Каждого ЭлементМассива Из МассивОписанийПолей Цикл
				СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
			КонецЦикла;	
			
			//
			СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);
			
			//
			СтрокаТекстЗапроса = "ВЫБРАТЬ " + Символы.ПС + СтрокаТекстЗапроса + Символы.ПС;
			
			//
			ТекстЗапроса = ТекстЗапроса + СтрокаТекстЗапроса;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		//
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "
		|{ХАРАКТЕРИСТИКИ
		|ТИП(Справочник.Номенклатура)
		|ВИДЫХАРАКТЕРИСТИК ПланВидовХарактеристик.СвойстваОбъектов
		|ПОЛЕКЛЮЧА Ссылка
		|ПОЛЕИМЕНИ Представление
		|ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.ЗначенияСвойствОбъектов
		|ПОЛЕОБЪЕКТА Объект
		|ПОЛЕВИДА Свойство
		|ПОЛЕЗНАЧЕНИЯ Значение }";
		
		//
		МакетСхемыКомпоновкиДанных = Справочники.АК_ВнешниеБазыДанных.ПолучитьМакет("МакетСхемыКомпоновкиДанных");
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Запрос = ТекстЗапроса;
		
		//
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.АвтоЗаполнениеДоступныхПолей = Истина;
			
		//
		Для Каждого СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
				
			//
			ИмяРеквизита = СтрокаТЗ.ИмяПоля;
			Заголовок = СтрокаТЗ.ПредставлениеПоля;
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяРеквизита;
			Поле.ПутьКДанным = ИмяРеквизита;
			Поле.Заголовок = Заголовок;
			
			//
			Попытка
				Если ЗначениеЗаполнено(СтрокаТЗ.Тип) Тогда
					Поле.ТипЗначения = СтрокаТЗ.Тип;
				КонецЕсли;
			Исключение
			КонецПопытки;	
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
				
				//
				ПолеИтога = МакетСхемыКомпоновкиДанных.ПоляИтога.Добавить();
				ПолеИтога.Выражение = "СУММА(" + ИмяРеквизита + ")";
				ПолеИтога.ПутьКДанным = ИмяРеквизита;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		URLСхемы = ПоместитьВоВременноеХранилище(МакетСхемыКомпоновкиДанных, Новый УникальныйИдентификатор());
		
		//
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
	КонецЕсли;	

КонецПроцедуры


&НаСервере
Процедура НастроитьСхемуКомпоновкиДанных(БазаДанных)
	
	//
	ТекстЗапроса = "";
	
	//
	СводнаяТаблица = Неопределено;
	ТаблицаВыбранныхПолей = Неопределено;
	
	//
	ОтчетПоДаннымВнешнихИсточников.ОписаниеИсточникаДанных.Получить().Свойство("СводнаяТаблица", СводнаяТаблица);
	ОтчетПоДаннымВнешнихИсточников.ОписаниеИсточникаДанных.Получить().Свойство("ТаблицаВыбранныхПолей", ТаблицаВыбранныхПолей);
	
	//
	Для Каждого СтрокаТЗ Из СводнаяТаблица Цикл
		
		//
		ТаблицаВнешнейБД = Справочники.АК_ТаблицыВнешнейБазыДанных.НайтиПоКоду(СтрокаТЗ.ИмяТаблицы,,, БазаДанных);
		
		//
		ТЗ_ОписаниеПолей = ТаблицаВнешнейБД.Поля.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеПолей Цикл
			_СтрокаТЗ.Имя = ВРЕГ(_СтрокаТЗ.Имя);
		КонецЦикла;	
		
		//
		ТЗ_ОписаниеСвязей = ТаблицаВнешнейБД.ОписаниеСвязей.Выгрузить();
		Для Каждого _СтрокаТЗ Из ТЗ_ОписаниеСвязей Цикл
			_СтрокаТЗ.ВнешняяБД_Имя = ВРЕГ(_СтрокаТЗ.ВнешняяБД_Имя);
		КонецЦикла;	
		
		//
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ " + Символы.ПС;
		КонецЕсли;	
		
		//
		МассивОписанийПолей = Новый Массив;
		
		//
		МассивПолейСТипомДата = Новый Массив;
		
		//
		Для Каждого _СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ _СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			стрОписаниеПоля = "";
			
			//
			ИмяРеквизита = _СтрокаТЗ.ИмяПоля;
			ЗначениеРеквизита = _СтрокаТЗ[СтрокаТЗ.ИмяТаблицы];
			
			//
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				стрОписаниеПоля = "NULL";
			Иначе
				
				//
				стрОписаниеПоля = ""; //тут нужно находить связь с ИБ 1С и типизировать
				
				//
				Если ЗначениеЗаполнено(_СтрокаТЗ.ОбъектМетаданных) Тогда
					
					//
					стрОписаниеПоля = "ЗНАЧЕНИЕ(" + СокрЛП(_СтрокаТЗ.ОбъектМетаданных) + ".ПустаяСсылка)"; //тут нужно находить связь с ИБ 1С и типизировать
					
				Иначе	
				
					//
					СтруктураПоиска = Новый Структура("Имя", ЗначениеРеквизита);
					
					//
					НайденныеСтроки =  ТЗ_ОписаниеПолей.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						//
						НайденнаяСтрока = НайденныеСтроки[0];
						Если ЗначениеЗаполнено(НайденнаяСтрока.Тип) Тогда
							
							//
							Если Найти(ВРЕГ(НайденнаяСтрока.Тип), "DATE") > 0 Тогда
								
								//
								стрОписаниеПоля = "ДатаВремя(1,1,1)";
								
								//
								МассивПолейСТипомДата.Добавить(ИмяРеквизита);
								
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "BIT") > 0 Тогда							
								стрОписаниеПоля = "Ложь";
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "INT") > 0 Тогда							
								стрОписаниеПоля = "0";	
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "REAL") > 0 Тогда							
								стрОписаниеПоля = "0";		
							ИначеЕсли Найти(ВРЕГ(НайденнаяСтрока.Тип), "FLOAT") > 0 Тогда							
								стрОписаниеПоля = "0";			
							Иначе
								стрОписаниеПоля = """""";	
							КонецЕсли;	
						
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЕсли;
				
				//
				Если Не ЗначениеЗаполнено(стрОписаниеПоля) Тогда
					стрОписаниеПоля = "NULL";
				КонецЕсли;	
				
			КонецЕсли;
			
			//
			Если ЛОЖЬ И ЗначениеЗаполнено(_СтрокаТЗ.Функция) Тогда
				стрОписаниеПоля = _СтрокаТЗ.Функция + "(" + стрОписаниеПоля + ")";
			КонецЕсли;	
			
			//
			стрОписаниеПоля = стрОписаниеПоля + " КАК " + ИмяРеквизита;
			МассивОписанийПолей.Добавить(стрОписаниеПоля);
			
			//
			Если Найти(стрОписаниеПоля, "ДатаВремя") > 0 Тогда
				
				//
				//стрОписаниеПоля = "0 КАК " + ИмяРеквизита + "Week";
				//МассивОписанийПолей.Добавить(стрОписаниеПоля);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		Если МассивОписанийПолей.Количество() > 0 Тогда
		
			//
			СтрокаТекстЗапроса = "";
			Для Каждого ЭлементМассива Из МассивОписанийПолей Цикл
				СтрокаТекстЗапроса = СтрокаТекстЗапроса + ЭлементМассива + ", " + Символы.ПС;
			КонецЦикла;	
			
			//
			СтрокаТекстЗапроса = Лев(СтрокаТекстЗапроса, СтрДлина(СтрокаТекстЗапроса) - 3);
			
			//
			СтрокаТекстЗапроса = "ВЫБРАТЬ " + Символы.ПС + СтрокаТекстЗапроса + Символы.ПС;
			
			//
			ТекстЗапроса = ТекстЗапроса + СтрокаТекстЗапроса;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		//
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "
		|{ХАРАКТЕРИСТИКИ
		|ТИП(Справочник.Номенклатура)
		|ВИДЫХАРАКТЕРИСТИК ПланВидовХарактеристик.СвойстваОбъектов
		|ПОЛЕКЛЮЧА Ссылка
		|ПОЛЕИМЕНИ Представление
		|ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.ЗначенияСвойствОбъектов
		|ПОЛЕОБЪЕКТА Объект
		|ПОЛЕВИДА Свойство
		|ПОЛЕЗНАЧЕНИЯ Значение }";
		
		//
		МакетСхемыКомпоновкиДанных = Справочники.АК_ВнешниеБазыДанных.ПолучитьМакет("МакетСхемыКомпоновкиДанных");
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Запрос = ТекстЗапроса;
		
		//
		МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.АвтоЗаполнениеДоступныхПолей = Истина;
			
		//
		Для Каждого СтрокаТЗ Из ТаблицаВыбранныхПолей Цикл
			
			//
			Если НЕ СтрокаТЗ.Пометка Тогда
				Продолжить;
			КонецЕсли;	
				
			//
			ИмяРеквизита = СтрокаТЗ.ИмяПоля;
			Заголовок = СтрокаТЗ.ПредставлениеПоля;
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяРеквизита;
			Поле.ПутьКДанным = ИмяРеквизита;
			Поле.Заголовок = Заголовок;
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.Тип) Тогда
				Поле.ТипЗначения = СтрокаТЗ.Тип;
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.Функция) Тогда
				
				//
				ПолеИтога = МакетСхемыКомпоновкиДанных.ПоляИтога.Добавить();
				ПолеИтога.Выражение = "СУММА(" + ИмяРеквизита + ")";
				ПолеИтога.ПутьКДанным = ИмяРеквизита;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		Для Каждого ИмяРеквизита Из МассивПолейСТипомДата Цикл
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяРеквизита;
			Поле.ПутьКДанным = ИмяРеквизита + "." + ИмяРеквизита + "Week";
			Поле.Заголовок = "№ недели";
			
			//
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			
			//
			Поле.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			
			//
			Поле = МакетСхемыКомпоновкиДанных.НаборыДанных.Запрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяРеквизита;
			Поле.ПутьКДанным = ИмяРеквизита + "." + ИмяРеквизита + "Period";
			Поле.Заголовок = "Периодичность";
			
		КонецЦикла;	
		
		//
		URLСхемы = ПоместитьВоВременноеХранилище(МакетСхемыКомпоновкиДанных, Новый УникальныйИдентификатор());
		
		//
		Отчет.КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
	КонецЕсли;	

КонецПроцедуры


//
//
&НаСервере
Процедура НастроитьОтчетНаСервере(Настройки)
	
	//
	НастроитьСхемуКомпоновкиДанных(ОтчетПоДаннымВнешнихИсточников.ВнешняяБазаДанных);
	
	//
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);	
		
КонецПроцедуры	

///////////////////////////////////

//
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТолькоПросмотр = НЕ ЗначениеЗаполнено(ВариантНастроек);
КонецПроцедуры


///////////////////////////////////

&НаСервере
Функция ПолучитьСписокВариантовОтчета()
	
	//
	РезультатСписок = Новый СписокЗначений;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	АК_ОтчетыПоДаннымВнешнихИсточниковВариантыНастроек.Ссылка,
	               |	АК_ОтчетыПоДаннымВнешнихИсточниковВариантыНастроек.Ссылка.Наименование КАК НаименованиеОтчета,
	               |	АК_ОтчетыПоДаннымВнешнихИсточниковВариантыНастроек.Имя КАК НаименованиеНастройки,
	               |	АК_ОтчетыПоДаннымВнешнихИсточниковВариантыНастроек.Настройка
	               |ИЗ
	               |	Справочник.АК_ОтчетыПоДаннымВнешнихИсточников.ВариантыНастроек КАК АК_ОтчетыПоДаннымВнешнихИсточниковВариантыНастроек
	               |ГДЕ
	               |	НЕ АК_ОтчетыПоДаннымВнешнихИсточниковВариантыНастроек.Ссылка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НаименованиеОтчета,
	               |	НаименованиеНастройки";
				   
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТекстЗапроса;
	ПЗ.Выполнить();
	
	//
	РезультатСписок = Новый СписокЗначений;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Представление = "" + Выборка.НаименованиеОтчета + " - " + Выборка.НаименованиеНастройки;
				
		//
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("Отчет", Выборка.Ссылка);
		СтруктураНастроек.Вставить("Настройка", Выборка.Настройка);
		
		//
		РезультатСписок.Добавить(СтруктураНастроек, Представление);
		
	КонецЦикла;	
	
	//
	Возврат РезультатСписок;
	
КонецФункции	

&НаКлиенте
Процедура ВариантНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = ПолучитьСписокВариантовОтчета();
	
	//
	ВыбранныйЭлемент = ВыбратьИзСписка(СписокВыбора);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	//
	ВариантНастроек = ВыбранныйЭлемент.Представление;
	
	//
	ОтчетПоДаннымВнешнихИсточников = ВыбранныйЭлемент.Значение.Отчет.ПолучитьОбъект();
	Настройка = ВыбранныйЭлемент.Значение.Настройка.Получить();
	
	//
	НастроитьОтчетНаСервере(Настройка);
	
	//
	ТолькоПросмотр = НЕ ЗначениеЗаполнено(ВариантНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВариантНастроекПриИзменении(Элемент)
	
	ТолькоПросмотр = НЕ ЗначениеЗаполнено(ВариантНастроек);
	
КонецПроцедуры

