
&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	
	ЕстьОграниченияПросмотра = НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("Финансист") И НЕ РольДоступна("ФинансовыйДиректор") И НЕ РольДоступна("БухгалтерПоЗаработнойПлате");
	//ЕстьОграниченияПросмотра = Истина;// для тестов
	
	Если Не ЕстьОграниченияПросмотра тОГДА
		Возврат;
	КонецЕсли;	
	
	ТП = ПараметрыСеанса.ТекущийПользователь;
	
	ТекстЗапроса="ВЫБРАТЬ Различные
	             |	СоответствиеОбъектРольСрезПоследних.Объект,
	             |	РолиПользователейСоставРоли.Сотрудник
	             |ПОМЕСТИТЬ Помощники
	             |ИЗ
				 //+++ AK suvv 2018.06.08 ИП-00018376.01
				 //|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРолиПомощник) КАК СоответствиеОбъектРольСрезПоследних
				 |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРолиПомощник ИЛИ ТипРоли = &ТипРолиПомощникСторонняяРозница) КАК СоответствиеОбъектРольСрезПоследних
				 //--- AK suvv
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	             |		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СоответствиеОбъектРольСрезПоследних.Объект,
	             |	РолиПользователейСоставРоли.Сотрудник
	             |ПОМЕСТИТЬ Управляющие
	             |ИЗ
	             |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРолиТУ) КАК СоответствиеОбъектРольСрезПоследних
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	             |		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Управляющие.Сотрудник КАК Управляющий,
	             |	Помощники.Сотрудник КАК Помощник
	             |ИЗ
	             |	Помощники КАК Помощники
	             |		ПОЛНОЕ СОЕДИНЕНИЕ Управляющие КАК Управляющие
	             |		ПО Помощники.Объект = Управляющие.Объект
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Управляющие.Сотрудник,
	             |	Помощники.Сотрудник";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	//Запрос.УстановитьПараметр("Сотрудник",ТП.ФизЛицо);
	Запрос.УстановитьПараметр("ТипРолиПомощник",ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиПомощникСторонняяРозница",ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("ТипРолиТУ",ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice"));
	ПомощникиУправляющие = Запрос.Выполнить().Выгрузить();
	
	ПомощникиТП = ПомощникиУправляющие.Скопировать(Новый Структура("Управляющий",ТП.ФизЛицо));
	СписокПомощников=Новый СписокЗначений;
	Если ПомощникиТП.Количество()=0 Тогда // не управляющий
		ПомощникиТП = ПомощникиУправляющие.Скопировать(Новый Структура("Помощник",ТП.ФизЛицо));
		Если ПомощникиТП.Количество()=0 И ЕстьОграниченияПросмотра Тогда // не помощник
			СписокПомощников.Добавить(Неопределено);
		Иначе
			СписокПомощников.ЗагрузитьЗначения(ПомощникиТП.ВыгрузитьКолонку("Помощник"));
		КонецЕсли;	
	Иначе
		СписокПомощников.ЗагрузитьЗначения(ПомощникиТП.ВыгрузитьКолонку("Помощник"));
	КонецЕсли;	
	
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		//+++АК POZM 2018.09.03 ИП-00019439.01
		Если СокрЛП(ЭлементОтбора.Представление) = "Помощник" Тогда
			Если СписокПомощников.Количество()>0 Тогда
				ЭлементОтбора.Использование = Истина;
				Для каждого ЭлементГруппы Из ЭлементОтбора.Элементы Цикл
			
					Если СокрЛП(ЭлементГруппы.ЛевоеЗначение) = "ПомощникУправляющего" Тогда
						ЭлементГруппы.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						ЭлементГруппы.ПравоеЗначение = СписокПомощников;
						ЭлементГруппы.Использование = Истина;
					КонецЕсли;
			
				КонецЦикла;
			Иначе	
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;	
		КонецЕсли;	
		//---АК POZM 
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНачислениеПремии(Команда)
	ТЗ = СобратьНачислениеПремииСервер();
	ФормаДокумента = ПолучитьФорму("Документ.НачислениеПремииОфиснымРаботникам.ФормаОбъекта");
	//Док = Документы.НачислениеПремииОфиснымРаботникам.СоздатьДокумент();
	ФормаДокумента.Объект.Ответственный = ТекущийПользователь();
	Для Каждого Стр ИЗ ТЗ Цикл
		Если Стр.БонусБезОклада >0 Тогда
			НС = ФормаДокумента.Объект.Состав.Добавить();
			НС.ФизЛицо = Стр.ПомощникУправляющего;
			НС.Сумма = Стр.БонусБезОклада;
		КонецЕсли;	
		
	КонецЦикла;	
	ФормаДокумента.Открыть();
КонецПроцедуры

&НаСервере
Функция СобратьНачислениеПремииСервер()
	
	ДанныеРасшифровкиДляДокумента = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакетаДляДокумента = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанныхДляДокумента = Отчеты.РасчетБонусовПомощниковУправляющих.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Параметр Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если СокрЛП(Параметр.Параметр) = "ПериодОтчета" Тогда
			СхемаКомпоновкиДанныхДляДокумента.Параметры.ПериодОтчета.Значение.ДатаНачала = Параметр.Значение.ДатаНачала;
			СхемаКомпоновкиДанныхДляДокумента.Параметры.ПериодОтчета.Значение.ДатаОкончания = Параметр.Значение.ДатаОкончания;;
		ИначеЕсли СокрЛП(Параметр.Параметр) = "ПоследнийДеньОтчета" Тогда
			СхемаКомпоновкиДанныхДляДокумента.Параметры.ПоследнийДеньОтчета.Значение = Параметр.Значение;
		КонецЕсли;	
	КонецЦикла;	
		
	
	
	
	КомпоновщикНастроекДляДокумента = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДляДокумента.ЗагрузитьНастройки(СхемаКомпоновкиДанныхДляДокумента.ВариантыНастроек.КраткийВариант.Настройки);
	
	НастройкиДляДокумента = КомпоновщикНастроекДляДокумента.ПолучитьНастройки();
	
	НастройкиДляДокумента.ПараметрыДанных.Элементы[0].Значение = СхемаКомпоновкиДанныхДляДокумента.Параметры.ПериодОтчета.Значение;
	
	МакетКомпоновкиДляДокумента = КомпоновщикМакетаДляДокумента.Выполнить(СхемаКомпоновкиДанныхДляДокумента, НастройкиДляДокумента, ДанныеРасшифровкиДляДокумента, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
	ПроцессорКомпоновкиДляДокумента = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДляДокумента.Инициализировать(МакетКомпоновкиДляДокумента,,ДанныеРасшифровкиДляДокумента,Истина);
	ПроцессорВыводаДляДокумента = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВыводаДляДокумента.УстановитьОбъект(ТЗ);
	ПроцессорВыводаДляДокумента.Вывести(ПроцессорКомпоновкиДляДокумента);
	Возврат ТЗ;
	
	//Набор.Записать();
	
	//Набор = РегистрыСведений.ЗарплатаПродавцов.СоздатьНаборЗаписей();
	//Набор.Отбор.ТипРабот.Установить(Перечисления.ТипыРаботДляРасчетаЗП.БонусПомощникаУправляющегоВкусвилл);
	//Набор.Отбор.ДатаНачисления.Установить(ЭтотОбъект.КонецПериода);
	//Набор.Прочитать();
	//Набор.Очистить();
	//Для Каждого Стр ИЗ ТЗ Цикл
	//	Если Стр.Бонус>0 Тогда
	//		НЗ = Набор.Добавить();
	//		НЗ.Бонус = Стр.Бонус;
	//		НЗ.БонусСНДФЛ = Стр.Бонус/0.87;
	//		НЗ.ДатаНачисления = ЭтотОбъект.КонецПериода;
	//		НЗ.ФизЛицо = Стр.ПомощникУправляющего;
	//		НЗ.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.БонусПомощникаУправляющегоВкусвилл;
	//	КонецЕсли;	
	//	
	//КонецЦикла;	
	//Набор.Записать();

КонецФункции

&НаСервере
Функция ТекущийПользователь()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции	