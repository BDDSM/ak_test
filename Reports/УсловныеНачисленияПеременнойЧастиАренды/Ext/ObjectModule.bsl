
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем СоответствиеНаборовДанныхИЗапросов;

#Если Клиент Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ИнфокомТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	//+++ AK suvv
	ДатаНачала = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение;
	ДатаОкончания = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
	НаборыДанных = ПолучитьНаборыДанныхДляСКД(ДатаНачала, ДатаОкончания);
	//--- AK suvv
	ИнфокомТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, НаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетамиИнфоком.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЛишниеПредставленияВШапке(Результат)
	
	Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	Пока Ячейка <> Неопределено Цикл
		УдаляемаяОбласть = Результат.Область("R"+Ячейка.Верх);
		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ИнфокомТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ИнфокомТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;                                    
				
	КонецЦикла;
	
	ИнфокомТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Функция ЕстьДетальныеПоля(ВыбранныеПоля)
	ЕстьРесурсы = ложь;
	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
		ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено тогда
			Если ДоступноеПоле.Ресурс тогда
				ЕстьРесурсы = истина;
			Иначе
				ЕстьРесурсы = ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЕстьРесурсы;
КонецФункции

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТекущаяДата",   ТекущаяДата());
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ПараметрНачалоПериода = Неопределено или ПараметрКонецПериода = Неопределено тогда
		Возврат;
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	//+++ AK suvv 
	Если СвернутьЗакрытыеКорр Тогда 
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ПолеОтбора = Новый ПолеКомпоновкиДанных("СуммаКоррИтогЗаМесяц");
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		НовыйЭлементОтбора.ПравоеЗначение = 0;
		НовыйЭлементОтбора.Представление = "Свернуты закрытые корр."
	Иначе
		ПоляТекущегоОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ПолеОтбора из ПоляТекущегоОтбора Цикл
			Если ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаКоррИтогЗаМесяц") Тогда 
				ПоляТекущегоОтбора.Удалить(ПолеОтбора);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ТолькоКонтрагентыБезНачислений Тогда 
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ПолеОтбора = Новый ПолеКомпоновкиДанных("БезНачисленийЗаПериод");
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Истина;
		НовыйЭлементОтбора.Представление = "Только контрагенты без начислений  более, чем за " + КоличествоМесяцевБезНачислений + " мес.";
	Иначе
		ПоляТекущегоОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ПолеОтбора из ПоляТекущегоОтбора Цикл
			Если ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БезНачисленийЗаПериод") Тогда 
				ПоляТекущегоОтбора.Удалить(ПолеОтбора);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	//--- AK 
	
	Если НачалоПериода <> Неопределено и КонецПериода <> Неопределено тогда
		УправлениеОтчетамиИнфоком.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрисутствуетПоле(Поле)
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(КомпоновщикНастроек.Настройки.Структура, Поле);
	
	Если ЕстьГруппировка тогда
		Возврат ЕстьГруппировка;
	КонецЕсли;
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
	
	ЕстьГруппировка = ложь;
	
	Для каждого ОтборПоле из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПоле(Структура, Поле)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
	 тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
	
	Для каждого ЭлементСтруктуры из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") тогда
					Продолжить;
				КонецЕсли;
				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
					ЕстьПоле = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	
	Возврат Новый Структура("ДополнительныеНастройкиОтчета, ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	Истина, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции
#КонецЕсли

//+++ AK suvv
Функция ПолучитьНаборыДанныхДляСКД(ДатаНачала, ДатаОкончания)
	
	НаборыДанных = Новый Структура();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Организация");
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("Договор");
	ТЗ.Колонки.Добавить("БезНачисленийЗаПериод");
	
	Если ТолькоКонтрагентыБезНачислений Тогда 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Организация,
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Контрагент,
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Договор,
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ПериодРегистрации КАК РасчетныйМесяц,
		|	СУММА(НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.АК_РасчетнаяСумма) КАК СуммаКорр,
		|	СУММА(НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Сумма) КАК СуммаУпр
		|ПОМЕСТИТЬ ВТ_НачисленоУпрКорр
		|ИЗ
		|	Документ.НачислениеАренднойПлатыОтАрендодателей.НачислениеАренды КАК НачислениеАренднойПлатыОтАрендодателейНачислениеАренды
		|ГДЕ
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.Проведен
		|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.ВидАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ВидыАренднойПлаты.ПоСчету)
		|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Организация,
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Контрагент,
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Договор,
		|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ПериодРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НачисленоУпрКорр.Организация,
		|	ВТ_НачисленоУпрКорр.Контрагент,
		|	ВТ_НачисленоУпрКорр.Договор,
		|	ИСТИНА КАК БезНачисленийЗаПериод
		|ИЗ
		|	ВТ_НачисленоУпрКорр КАК ВТ_НачисленоУпрКорр";
		
		НомерМесяца = 1;
		Пока НомерМесяца <= КоличествоМесяцевБезНачислений Цикл 
			ТекстЗапроса = ТекстЗапроса + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НачисленоУпрКорр КАК ВТ_НачисленоУпрКорр" + НомерМесяца + "
			|		ПО ВТ_НачисленоУпрКорр.Организация = ВТ_НачисленоУпрКорр" + НомерМесяца + ".Организация
			|			И ВТ_НачисленоУпрКорр.Контрагент = ВТ_НачисленоУпрКорр" + НомерМесяца + ".Контрагент
			|			И ВТ_НачисленоУпрКорр.Договор = ВТ_НачисленоУпрКорр" + НомерМесяца + ".Договор
			|			И (ДОБАВИТЬКДАТЕ(ВТ_НачисленоУпрКорр.РасчетныйМесяц, МЕСЯЦ, " + НомерМесяца + ") = ВТ_НачисленоУпрКорр" + НомерМесяца + ".РасчетныйМесяц)
			|			И (ВТ_НачисленоУпрКорр" + НомерМесяца + ".СуммаУпр = 0)";
			НомерМесяца = НомерМесяца + 1;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|Где ВТ_НачисленоУпрКорр.СуммаУпр = 0"; 
		
		Запрос.Текст = ТекстЗапроса;
		ТЗ = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	НаборыДанных.Вставить("КонтрагентыБезНачисленийЗаПериод", ТЗ);
	
	Возврат НаборыДанных;
	
КонецФункции //--- AK suvv

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетамиИнфоком.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
