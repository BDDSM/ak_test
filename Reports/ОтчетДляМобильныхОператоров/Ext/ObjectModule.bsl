
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем СоответствиеНаборовДанныхИЗапросов;

Перем v82;

#Если Клиент Тогда
	
Функция ПолучитьТаблицыВнешнегоНабораДанных()
	
	Если v82 = Неопределено Тогда		
		v82 = ОбменС_ЗУП.ПолучитьСоединениеСЗУПом();		
	КонецЕсли;
	Если v82 = Неопределено Тогда	
		Сообщить("Не удалось подключитьс к базе ЗУП");	
		Возврат Неопределено;		
	КонецЕсли;
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрНачалоПериода = Неопределено или ПараметрКонецПериода = Неопределено тогда
		Возврат Неопределено;
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПривязкаТелефоновСрезПоследних.Номер КАК Номер,
		|	ПривязкаТелефоновСрезПоследних.Привязка,
		|	ПривязкаТелефоновСрезПоследних.Период,
		|	ПривязкаТелефоновСрезПоследних.Назначение,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ПривязкаТелефоновПредв
		|ИЗ
		|	РегистрСведений.ПривязкаТелефонов.СрезПоследних(&ДатаОкончания, ) КАК ПривязкаТелефоновСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПривязкаТелефоновСрезПоследних.Номер,
		|	ПривязкаТелефоновСрезПоследних.Привязка,
		|	ПривязкаТелефоновСрезПоследних.Период,
		|	ПривязкаТелефоновСрезПоследних.Назначение,
		|	2
		|ИЗ
		|	РегистрСведений.ПривязкаТелефонов.СрезПоследних(, ) КАК ПривязкаТелефоновСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПривязкаТелефоновПредв.Номер,
		|	МИНИМУМ(ПривязкаТелефоновПредв.Период) КАК Период,
		|	МИНИМУМ(ПривязкаТелефоновПредв.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ПривязкаТелефоновМин
		|ИЗ
		|	ПривязкаТелефоновПредв КАК ПривязкаТелефоновПредв
		|
		|СГРУППИРОВАТЬ ПО
		|	ПривязкаТелефоновПредв.Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПривязкаТелефоновПредв.Номер КАК Номер,
		|	ПривязкаТелефоновПредв.Привязка,
		|	ПривязкаТелефоновПредв.Период,
		|	ПривязкаТелефоновПредв.Назначение,
		|	ПривязкаТелефоновПредв.Приоритет
		|ПОМЕСТИТЬ втПривязкаТелефоновСрезПоследних
		|ИЗ
		|	ПривязкаТелефоновМин КАК ПривязкаТелефоновМин
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПривязкаТелефоновПредв КАК ПривязкаТелефоновПредв
		|		ПО ПривязкаТелефоновМин.Номер = ПривязкаТелефоновПредв.Номер
		|			И ПривязкаТелефоновМин.Период = ПривязкаТелефоновПредв.Период
		|			И ПривязкаТелефоновМин.Приоритет = ПривязкаТелефоновПредв.Приоритет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(РасходыНаМобильнуюСвязьОбороты.СимКарта КАК Справочник.СлужебныеSIMКарты).Код КАК СимКарта,
		|	РасходыНаМобильнуюСвязьОбороты.Оператор,
		|	ПривязкаТелефоновСрезПоследних.Привязка КАК Привязка,
		|	ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
		|	РасходыНаМобильнуюСвязьОбороты.АбонентскаяПлатаОборот КАК АбонентскаяПлата,
		|	РасходыНаМобильнуюСвязьОбороты.МобильнаяСвязьОборот КАК МобильнаяСвязь,
		|	РасходыНаМобильнуюСвязьОбороты.SMSMMSОборот КАК SMSMMS,
		|	РасходыНаМобильнуюСвязьОбороты.ИнтернетОборот КАК Интернет,
		|	РасходыНаМобильнуюСвязьОбороты.РоумингОборот КАК Роуминг,
		|	РасходыНаМобильнуюСвязьОбороты.ДополнительныеУслугиОборот КАК ДополнительныеУслуги,
		|	РасходыНаМобильнуюСвязьОбороты.СкидкаОборот КАК Скидка,
		|	РасходыНаМобильнуюСвязьОбороты.АбонентскаяПлатаОборот + РасходыНаМобильнуюСвязьОбороты.МобильнаяСвязьОборот + РасходыНаМобильнуюСвязьОбороты.SMSMMSОборот + РасходыНаМобильнуюСвязьОбороты.ИнтернетОборот + РасходыНаМобильнуюСвязьОбороты.РоумингОборот + РасходыНаМобильнуюСвязьОбороты.ДополнительныеУслугиОборот - РасходыНаМобильнуюСвязьОбороты.СкидкаОборот КАК Итого,
		|	ПривязкаТелефоновСрезПоследних.Период КАК ДатаПривязки
		|ПОМЕСТИТЬ втРезультат
		|ИЗ
		|	РегистрНакопления.РасходыНаМобильнуюСвязь.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			СимКарта ССЫЛКА Справочник.СлужебныеSIMКарты
		|				И СимКарта В
		|					(ВЫБРАТЬ
		|						втПривязкаТелефоновСрезПоследних.Номер
		|					ИЗ
		|						втПривязкаТелефоновСрезПоследних КАК втПривязкаТелефоновСрезПоследних)
		|				И Оператор = &Оператор) КАК РасходыНаМобильнуюСвязьОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПривязкаТелефоновСрезПоследних КАК ПривязкаТелефоновСрезПоследних
		|		ПО РасходыНаМобильнуюСвязьОбороты.СимКарта = ПривязкаТелефоновСрезПоследних.Номер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(РасходыНаМобильнуюСвязьОбороты.СимКарта КАК СТРОКА(11)),
		|	РасходыНаМобильнуюСвязьОбороты.Оператор,
		|	ПривязкаПоКоду.Привязка,
		|	ПривязкаПоКоду.Назначение,
		|	РасходыНаМобильнуюСвязьОбороты.АбонентскаяПлатаОборот,
		|	РасходыНаМобильнуюСвязьОбороты.МобильнаяСвязьОборот,
		|	РасходыНаМобильнуюСвязьОбороты.SMSMMSОборот,
		|	РасходыНаМобильнуюСвязьОбороты.ИнтернетОборот,
		|	РасходыНаМобильнуюСвязьОбороты.РоумингОборот,
		|	РасходыНаМобильнуюСвязьОбороты.ДополнительныеУслугиОборот,
		|	РасходыНаМобильнуюСвязьОбороты.СкидкаОборот,
		|	РасходыНаМобильнуюСвязьОбороты.АбонентскаяПлатаОборот + РасходыНаМобильнуюСвязьОбороты.МобильнаяСвязьОборот + РасходыНаМобильнуюСвязьОбороты.SMSMMSОборот + РасходыНаМобильнуюСвязьОбороты.ИнтернетОборот + РасходыНаМобильнуюСвязьОбороты.РоумингОборот + РасходыНаМобильнуюСвязьОбороты.ДополнительныеУслугиОборот - РасходыНаМобильнуюСвязьОбороты.СкидкаОборот,
		|	ПривязкаПоКоду.ДатаПривязки
		|ИЗ
		|	РегистрНакопления.РасходыНаМобильнуюСвязь.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			НЕ СимКарта ССЫЛКА Справочник.СлужебныеSIMКарты
		|				И Оператор = &Оператор) КАК РасходыНаМобильнуюСвязьОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СлужебныеSIMКарты.Ссылка КАК Ссылка,
		|			СлужебныеSIMКарты.Код КАК Код11,
		|			ПОДСТРОКА(СлужебныеSIMКарты.Код, 2, 10) КАК Код10,
		|			ПривязкаТелефоновСрезПоследних.Привязка КАК Привязка,
		|			ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
		|			ПривязкаТелефоновСрезПоследних.Период КАК ДатаПривязки
		|		ИЗ
		|			Справочник.СлужебныеSIMКарты КАК СлужебныеSIMКарты
		|				ЛЕВОЕ СОЕДИНЕНИЕ втПривязкаТелефоновСрезПоследних КАК ПривязкаТелефоновСрезПоследних
		|				ПО СлужебныеSIMКарты.Ссылка = ПривязкаТелефоновСрезПоследних.Номер) КАК ПривязкаПоКоду
		|		ПО (РасходыНаМобильнуюСвязьОбороты.СимКарта = ПривязкаПоКоду.Код11
		|				ИЛИ РасходыНаМобильнуюСвязьОбороты.СимКарта = ПривязкаПоКоду.Код10)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втРезультат.СимКарта,
		|	втРезультат.Оператор,
		|	втРезультат.Привязка,
		|	втРезультат.Назначение,
		|	ВЫБОР
		|		КОГДА втРезультат.Привязка ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ВЫРАЗИТЬ(втРезультат.Привязка КАК Справочник.ФизическиеЛица)
		|		ИНАЧЕ СоставСотрудники.Сотрудник
		|	КОНЕЦ КАК Физлицо,
		|	втРезультат.ДатаПривязки,
		|	ВЫБОР
		|		КОГДА втРезультат.Привязка ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПривязаноКСтрукЕдиниице
		|ПОМЕСТИТЬ втИтоговыйРезультат
		|ИЗ
		|	втРезультат КАК втРезультат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаОкончания, ТипРоли.Код = ""PomoshnikTerrUpravlyushego"") КАК СоответствиеОбъектРольСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(РолиПользователейСоставРоли.Сотрудник) КАК Сотрудник,
		|				РолиПользователей.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
		|					ПО РолиПользователейСоставРоли.Ссылка = РолиПользователей.Ссылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РолиПользователей.Ссылка) КАК СоставСотрудники
		|			ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = СоставСотрудники.Ссылка
		|		ПО втРезультат.Привязка = СоответствиеОбъектРольСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизаций.Физлицо,
		|	МАКСИМУМ(СотрудникиОрганизаций.ДатаПриемаНаРаботу) КАК ДатаПриемаНаРаботу
		|ПОМЕСТИТЬ Сотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	НЕ СотрудникиОрганизаций.ПометкаУдаления
		|	И (ЕСТЬNULL(СотрудникиОрганизаций.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ЕСТЬNULL(СотрудникиОрганизаций.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) > &ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиОрганизаций.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговыйРезультат.СимКарта КАК АбонентскийНомер,
		|	втИтоговыйРезультат.Оператор,
		|	втИтоговыйРезультат.Привязка,
		|	втИтоговыйРезультат.Назначение,
		|	втИтоговыйРезультат.Физлицо,
		|	втИтоговыйРезультат.ДатаПривязки,
		|	втИтоговыйРезультат.ПривязаноКСтрукЕдиниице КАК ПривязаноКСтрукЕдиниице,
		|	втИтоговыйРезультат.Физлицо.Наименование КАК ФизлицоНаименование,
		|	втИтоговыйРезультат.Физлицо.Код,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Сотрудники.ДатаПриемаНаРаботу, ДАТАВРЕМЯ(1, 1, 1)) >= &ДатаНачала
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НовыйСотрудникВОтчётномПериоде
		|ИЗ
		|	втИтоговыйРезультат КАК втИтоговыйРезультат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
		|		ПО втИтоговыйРезультат.Физлицо = Сотрудники.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПривязаноКСтрукЕдиниице,
		|	ФизлицоНаименование";
	
	ПараметрОператорСвязи = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Оператор"));	
	Если ПараметрОператорСвязи <> Неопределено И ЗначениеЗаполнено(ПараметрОператорСвязи.Значение) Тогда
		Запрос.УстановитьПараметр("Оператор", ПараметрОператорСвязи.Значение);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Оператор = &Оператор","Истина");	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецПериода);
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоПериода);	
	ТЗНомера = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ТЗНомера Цикл 
		Стр.АбонентскийНомер = Прав(СокрЛП(Стр.АбонентскийНомер),10);	
	КонецЦикла;	
	
	Запрос = v82.NewObject("Запрос");	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект,
		|	ВЫБОР
		|		КОГДА КонтактнаяИнформация.Поле5 = """"
		|				И КонтактнаяИнформация.Поле4 = """"
		|				И КонтактнаяИнформация.Поле3 = """"
		|			ТОГДА """"
		|		ИНАЧЕ КонтактнаяИнформация.Поле2
		|	КОНЕЦ КАК Область,
		|	КонтактнаяИнформация.Поле3 КАК Район,
		|	ВЫБОР
		|		КОГДА НЕ КонтактнаяИнформация.Поле5 = """"
		|			ТОГДА КонтактнаяИнформация.Поле5
		|		КОГДА НЕ КонтактнаяИнформация.Поле4 = """"
		|			ТОГДА КонтактнаяИнформация.Поле4
		|		КОГДА НЕ КонтактнаяИнформация.Поле3 = """"
		|			ТОГДА КонтактнаяИнформация.Поле3
		|		ИНАЧЕ КонтактнаяИнформация.Поле2
		|	КОНЕЦ КАК НаселенныйПунк,
		|	КонтактнаяИнформация.Поле6 КАК Улица,
		|	КонтактнаяИнформация.Поле7 КАК Дом,
		|	КонтактнаяИнформация.Поле8 КАК Корпус,
		|	КонтактнаяИнформация.Поле9 КАК Квартира
		|ПОМЕСТИТЬ Адреса
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.ФизическиеЛица).Код В (&Код)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ВидДокумента,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК Серия,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК Номер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДатаВыдачи,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК КемВыдан
		|ПОМЕСТИТЬ Паспорта
		|ИЗ
		|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Период, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|ГДЕ
		|	ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо.Код В(&Код)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Паспорта.ФизЛицо, Адреса.Объект) КАК ФизЛицо,
		|	Адреса.Область,
		|	Адреса.Район,
		|	Адреса.НаселенныйПунк,
		|	Адреса.Улица,
		|	Адреса.Дом,
		|	Адреса.Корпус,
		|	Адреса.Квартира,
		|	Паспорта.ВидДокумента,
		|	Паспорта.Серия,
		|	Паспорта.Номер,
		|	Паспорта.ДатаВыдачи,
		|	Паспорта.КемВыдан
		|ПОМЕСТИТЬ ТаблИтог
		|ИЗ
		|	Адреса КАК Адреса
		|		ПОЛНОЕ СОЕДИНЕНИЕ Паспорта КАК Паспорта
		|		ПО Адреса.Объект = Паспорта.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблИтог.ФизЛицо.Код КАК ФизЛицоКод,
		|	ТаблИтог.Область,
		|	ТаблИтог.Район,
		|	ТаблИтог.НаселенныйПунк,
		|	ТаблИтог.Улица,
		|	ТаблИтог.Дом,
		|	ТаблИтог.Корпус,
		|	ТаблИтог.Квартира,
		|	ТаблИтог.ВидДокумента.Наименование КАК ВидДокумента,
		|	ТаблИтог.Серия,
		|	ТаблИтог.Номер,
		|	ТаблИтог.ДатаВыдачи,
		|	ТаблИтог.КемВыдан
		|ИЗ
		|	ТаблИтог КАК ТаблИтог";

	СписокКодовФЛ = v82.NewObject("СписокЗначений");
	Для Каждого Стр Из ТЗНомера Цикл 
		СписокКодовФЛ.Добавить(Стр.ФизЛицоКод);
	КонецЦикла;	
	Запрос.УстановитьПараметр("Код", 	СписокКодовФЛ);
	Запрос.УстановитьПараметр("Период", КонецПериода);
		
	ТЗЗУП = Новый ТаблицаЗначений;
	ТЗЗУП.Колонки.Добавить("ФизЛицоКод", 		Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Область", 			Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Район", 			Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("НаселенныйПунк", 	Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Улица", 			Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Дом", 				Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Корпус", 			Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Квартира", 			Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("ВидДокумента", 		Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Номер", 			Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("Серия", 			Новый ОписаниеТипов("Строка"));
	ТЗЗУП.Колонки.Добавить("ДатаВыдачи", 		Новый ОписаниеТипов("Дата"));
	ТЗЗУП.Колонки.Добавить("КемВыдан", 			Новый ОписаниеТипов("Строка"));	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.следующий() Цикл
		НС 	= ТЗЗУП.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		НС.Серия = СтрЗаменить(НС.Серия, " ", "");
	КонецЦикла;	
	
	Возврат Новый Структура("ТЗЗУП,ТЗНомера", ТЗЗУП,ТЗНомера);
	
КонецФункции
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ИнфокомТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ВнешниеНаборыДанных = ПолучитьТаблицыВнешнегоНабораДанных();
	Если ВнешниеНаборыДанных = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	ИнфокомТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетамиИнфоком.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);

	Возврат Результат;
	
КонецФункции

Процедура УдалитьЛишниеПредставленияВШапке(Результат)
	
	Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	Пока Ячейка <> Неопределено Цикл
		УдаляемаяОбласть = Результат.Область("R"+Ячейка.Верх);
		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ИнфокомТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ИнфокомТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;                                    
				
	КонецЦикла;
	
	ИнфокомТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Функция ЕстьДетальныеПоля(ВыбранныеПоля)
	ЕстьРесурсы = ложь;
	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
		ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено тогда
			Если ДоступноеПоле.Ресурс тогда
				ЕстьРесурсы = истина;
			Иначе
				ЕстьРесурсы = ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЕстьРесурсы;
КонецФункции

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
		
КонецПроцедуры

Функция ПрисутствуетПоле(Поле)
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(КомпоновщикНастроек.Настройки.Структура, Поле);
	
	Если ЕстьГруппировка тогда
		Возврат ЕстьГруппировка;
	КонецЕсли;
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
	
	ЕстьГруппировка = ложь;
	
	Для каждого ОтборПоле из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПоле(Структура, Поле)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
	 тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
	
	Для каждого ЭлементСтруктуры из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") тогда
					Продолжить;
				КонецЕсли;
				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
					ЕстьПоле = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	
	Возврат Новый Структура("ДополнительныеНастройкиОтчета, ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	Истина, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции
#КонецЕсли

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетамиИнфоком.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
