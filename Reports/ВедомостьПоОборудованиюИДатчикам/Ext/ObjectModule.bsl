
Функция ПолучитьТаблицуНомеровМагазинов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СтруктурныеЕдиницы.Ссылка,
	                |	СтруктурныеЕдиницы.НомерТочки
	                |ИЗ
	                |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ПолучитьМагазинПоНомеру(ТаблицаНомераМагазинов, НомерМагазина)
	
	НайдСтр = ТаблицаНомераМагазинов.Найти(НомерМагазина, "НомерТочки");
	
	Если НайдСтр = Неопределено Тогда
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	Иначе
		Возврат НайдСтр.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.Организация,
	               |	ФинансовыйОстатки.Субконто1 КАК ОсновноеСредство,
	               |	ФинансовыйОстатки.Субконто1.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	ФинансовыйОстатки.Субконто1.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	ФинансовыйОстатки.Субконто1.СерийныйНомер КАК СерийныйНомер,
	               |	ФинансовыйОстатки.Субконто1.Код КАК Код,
	               |	ФинансовыйОстатки.СуммаКонечныйОстаток КАК ПервоначальнаяСтоимость,
	               |	-ЕСТЬNULL(ФинансовыйОстаткиАмортизация.СуммаКонечныйОстаток, 0) КАК СуммаАмортизации,
	               |	ФинансовыйОстатки.СуммаКонечныйОстаток + ЕСТЬNULL(ФинансовыйОстаткиАмортизация.СуммаКонечныйОстаток, 0) КАК ОстаточнаяСтоимость,
	               |	ФинансовыйОстатки.Счет КАК СчетУчетаОС,
	               |	ФинансовыйОстаткиАмортизация.Счет КАК СчетУчетаАмортизации
	               |ПОМЕСТИТЬ СводнаяТаблица
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, -1), &Период, , , Счет В (&СписокСчетов01), , ) КАК ФинансовыйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, -1), &Период, , , Счет В (&СписокСчетов02), , ) КАК ФинансовыйОстаткиАмортизация
	               |		ПО ФинансовыйОстатки.Субконто1 = ФинансовыйОстаткиАмортизация.Субконто1
	               |			И ФинансовыйОстатки.Организация = ФинансовыйОстаткиАмортизация.Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СводнаяТаблица.Организация,
	               |	СводнаяТаблица.ОсновноеСредство,
	               |	СводнаяТаблица.ИнвентарныйНомер,
	               |	СводнаяТаблица.ЗаводскойНомер,
	               |	СводнаяТаблица.СерийныйНомер,
	               |	СводнаяТаблица.Код,
	               |	СводнаяТаблица.ПервоначальнаяСтоимость,
	               |	СводнаяТаблица.СуммаАмортизации,
	               |	СводнаяТаблица.ОстаточнаяСтоимость,
	               |	СводнаяТаблица.СчетУчетаОС,
	               |	СводнаяТаблица.СчетУчетаАмортизации,
	               |	ПринятыеКУчетуОССрезПоследних.АмортизационнаяГруппа,
	               |	ПринятыеКУчетуОССрезПоследних.СрокАмортизации,
	               |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПринятыеКУчетуОССрезПоследних.Период, МЕСЯЦ, 1), МЕСЯЦ) КАК НачалоДействияАмортизации,
	               |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПринятыеКУчетуОССрезПоследних.Период, МЕСЯЦ, 1), МЕСЯЦ), &Период, МЕСЯЦ) КАК МесяцевПрошло,
	               |	ПринятыеКУчетуОССрезПоследних.СрокАмортизации - РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПринятыеКУчетуОССрезПоследних.Период, МЕСЯЦ, 1), МЕСЯЦ), &Период, МЕСЯЦ) КАК ОсталосьАмортизации,
	               |	СостояниеОССрезПоследних.Местоположение КАК ТТ
	               |ПОМЕСТИТЬ Итоговая
	               |ИЗ
	               |	СводнаяТаблица КАК СводнаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПринятыеКУчетуОС.СрезПоследних(
	               |				&Период,
	               |				ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						Сводная.ОсновноеСредство
	               |					ИЗ
	               |						СводнаяТаблица КАК Сводная)) КАК ПринятыеКУчетуОССрезПоследних
	               |		ПО СводнаяТаблица.ОсновноеСредство = ПринятыеКУчетуОССрезПоследних.ОсновноеСредство
	               |			И СводнаяТаблица.Организация = ПринятыеКУчетуОССрезПоследних.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних(
	               |				&Период,
	               |				ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						Сводная.ОсновноеСредство
	               |					ИЗ
	               |						СводнаяТаблица КАК Сводная)) КАК СостояниеОССрезПоследних
	               |		ПО СводнаяТаблица.ОсновноеСредство = СостояниеОССрезПоследних.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Итоговая.Организация,
	               |	Итоговая.ОсновноеСредство,
	               |	Итоговая.ИнвентарныйНомер,
	               |	Итоговая.ЗаводскойНомер,
	               |	Итоговая.СерийныйНомер,
	               |	Итоговая.Код,
	               |	Итоговая.ПервоначальнаяСтоимость,
	               |	Итоговая.СуммаАмортизации,
	               |	Итоговая.ОстаточнаяСтоимость,
	               |	Итоговая.СчетУчетаОС,
	               |	Итоговая.СчетУчетаАмортизации,
	               |	Итоговая.АмортизационнаяГруппа,
	               |	Итоговая.СрокАмортизации,
	               |	Итоговая.НачалоДействияАмортизации,
	               |	Итоговая.МесяцевПрошло,
	               |	Итоговая.ОсталосьАмортизации,
	               |	Итоговая.ТТ,
	               |	СоответствиеДатчиковИХолодильниковСрезПоследних.Датчик,
	               |	ВЫБОР
	               |		КОГДА СоответствиеДатчиковИХолодильниковСрезПоследних.Датчик ЕСТЬ NULL
	               |			ТОГДА 0
	               |		КОГДА СоответствиеДатчиковИХолодильниковСрезПоследних.Датчик.ИД В (&ИдентификаторыАктивныхДатчиков)
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ДатчикПотух,
	               |	ЛОЖЬ КАК Обработан
	               |ИЗ
	               |	Итоговая КАК Итоговая
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатчиковИХолодильников.СрезПоследних(&Период, ) КАК СоответствиеДатчиковИХолодильниковСрезПоследних
	               |		ПО Итоговая.ОсновноеСредство = СоответствиеДатчиковИХолодильниковСрезПоследних.ОсновноеСредство";
	
	ПараметрПериод = ТекущаяДата();
	
	Для каждого Параметр из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл		
		Если СокрЛП(Параметр.Параметр)="Период" Тогда
			ПараметрПериод = КонецДня(Параметр.Значение);
			Запрос.УстановитьПараметр("Период", ПараметрПериод);
		КонецЕсли;
	КонецЦикла;
	
	МассивСчетов01 = Новый массив;
	МассивСчетов01.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваВОрганизации);
	МассивСчетов01.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваДо100000);
	
	Запрос.УстановитьПараметр("СписокСчетов01", МассивСчетов01);
	
	МассивСчетов02 = Новый Массив;                  
	МассивСчетов02.Добавить(ПланыСчетов.Финансовый.АмортизацияОсновныхСредств);
	МассивСчетов02.Добавить(ПланыСчетов.Финансовый.АмортизацияОсновныхСредствДо100000);
	
	Запрос.УстановитьПараметр("СписокСчетов02", МассивСчетов02);
	
	//+++АК SaMi 2018.11.16 ИП-00019767^01
	ИдентификаторыАктивныхДатчиков = Документы.ПеремещениеОС.ПолучитьИдентификаторыАктивныхДатчиков(ПараметрПериод);	
	Запрос.УстановитьПараметр("ИдентификаторыАктивныхДатчиков", ИдентификаторыАктивныхДатчиков);
	//---АК SaMi  2018.11.16 
	
	ТаблицаВозврата = Запрос.Выполнить().Выгрузить();
	ТаблицаВозврата.Колонки.Добавить("МестоВыкладки");
	
	ТаблицаВозврата.Индексы.Добавить("ОсновноеСредство");
	ТаблицаВозврата.Индексы.Добавить("Датчик");
	
	//+++АК SaMi 2018.11.16 ИП-00019767^01
	//ТаблицаДатчики = Документы.ПеремещениеОС.ПолучитьДатчикиВМестахХранения(ПараметрПериод);
	//
	//Для Каждого Стр Из ТаблицаДатчики Цикл
	//	НайдСтр = ТаблицаВозврата.Найти(Стр.Датчик, "Датчик");
	//	
	//	Если НайдСтр = Неопределено Тогда
	//		
	//		НайдСтрОрг = ТаблицаВозврата.Найти(Стр.Магазин, "ТТ");
	//		
	//		Если НайдСтрОрг = Неопределено Тогда
	//			Орг = Справочники.Организации.ПустаяСсылка();
	//		Иначе
	//			Орг = НайдСтрОрг.Организация;
	//		КонецЕсли;
	//		
	//		НовСтр = ТаблицаВозврата.Добавить();
	//		НовСтр.Организация = Орг;
	//		НовСтр.ТТ = Стр.Магазин;
	//		НовСтр.Датчик = Стр.Датчик;
	//		НовСтр.МестоВыкладки = Стр.МестоВыкладки;
	//		НовСтр.Обработан = Истина;
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НайдСтр.МестоВыкладки = Стр.МестоВыкладки;
	//	НайдСтр.Обработан = Истина;
	//КонецЦикла;
	//
	////получим информацию по датчикам, которых нет в выборке за 3, для этого у нас отдельная процедура
	//МассивДатчиковДляПолученияИнформации = Новый Массив;
	//
	//ТаблицаНомераМагазинов = ПолучитьТаблицуНомеровМагазинов();
	//
	//Для Каждого Стр Из ТаблицаВозврата Цикл
	//	Если Стр.ОБработан Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(Стр.Датчик) Тогда
	//		МассивДатчиковДляПолученияИнформации.Добавить(Стр.Датчик);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДатчиковДляПолученияИнформации);
	//
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//
	//СтрокаДатчики = "";
	//
	//Для Каждого Датчик Из МассивДатчиковДляПолученияИнформации Цикл
	//	//СтрокаДатчики = СтрокаДатчики + "4098" + "," + "6328" + ",";		
	//	СтрокаДатчики = СтрокаДатчики + Формат(Датчик.ИД,"ЧГ=0") + ",";
	//КонецЦикла;
	//
	//СтрокаДатчики = Лев(СтрокаДатчики, СтрДлина(СтрокаДатчики) - 1);
	//
	//ТекстЗапроса = "exec M2.dbo.sp_GetSensorShopNoByID '" + СтрокаДатчики + "'";
	//
	//rs = ADOСоединение.Execute(ТекстЗапроса);
	//
	//ЗапросСпр = Новый Запрос;
	//ЗапросСпр.Текст = "ВЫБРАТЬ
	//                  |	Датчики.Ссылка,
	//                  |	Датчики.Наименование,
	//                  |	Датчики.ИД
	//                  |ИЗ
	//                  |	Справочник.Датчики КАК Датчики
	//                  |ГДЕ
	//                  |	Датчики.Ссылка В(&МассивНеНайденных)";
	//
	//ЗапросСпр.УстановитьПараметр("МассивНеНайденных", МассивДатчиковДляПолученияИнформации);
	//
	//ТаблицаДатчикиБазы = ЗапросСПр.Выполнить().Выгрузить();
	//
	//Попытка
	//	rs.MoveFirst();
	//	Пока НЕ rs.Eof() Цикл
	//		
	//		МестоВыкладки = СокрЛП(rs.Fields("МестоВыкладки").Value);			
	//		
	//		НайдСтр = ТаблицаДатчикиБазы.Найти(rs.Fields("ИдДатчика").Value, "ИД");
	//			
	//		Датчик = НайдСтр.Ссылка;											
	//		
	//		НайдСтр = ТаблицаВозврата.Найти(Датчик, "Датчик");
	//		
	//		НайдСтр.ТТ = ПолучитьМагазинПоНомеру(ТаблицаНомераМагазинов, rs.Fields("НомерМагазина").Value);
	//		НайдСтр.МестоВыкладки = МестоВыкладки;
	//		
	//		rs.MoveNext();
	//		
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	//		
	//ADOСоединение.Close();		
	//---АК SaMi  2018.11.16 
	
	//дубли
	ТаблицаВозврата.Колонки.Добавить("Дубль");
	
	Для Каждого Стр Из ТаблицаВозврата Цикл
		Стр.Дубль = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Стр.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		НайдСтроки = ТаблицаВозврата.НайтиСтроки(Новый Структура("ОсновноеСредство", Стр.ОсновноеСредство));
		
		Для Каждого НСтр Из НайдСтроки Цикл
			Если НСтр <> Стр Тогда
				НСтр.Дубль = Истина;
				Стр.Дубль = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;

	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
											Настройки, ДанныеРасшифровки);

	ВнешниеНаборыДанных=Новый Структура;

	ВнешниеНаборыДанных.Вставить("СводнаяТаблица",ТаблицаВозврата);										
											
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,
													   ДанныеРасшифровки);

	//Очищаем поле табличного документа

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

