Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем СоответствиеНаборовДанныхИЗапросов;

Перем СоединениеСБазой;

#Если Клиент Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ИнфокомТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиВывода, );
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ВнешнийНаборДанных = Новый ТаблицаЗначений;
	РассчитатьНаборДанных(ВнешнийНаборДанных,ЭтотОбъект.КомпоновщикНастроек.Настройки);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТЗ", 				ВнешнийНаборДанных);	
	
	
	ИнфокомТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета,СтруктураДанных); 
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетамиИнфоком.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЛишниеПредставленияВШапке(Результат)
	
	Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	Пока Ячейка <> Неопределено Цикл
		УдаляемаяОбласть = Результат.Область("R"+Ячейка.Верх);
		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ИнфокомТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ИнфокомТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;                                    
				
	КонецЦикла;
	
	ИнфокомТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Функция ЕстьДетальныеПоля(ВыбранныеПоля)
	ЕстьРесурсы = ложь;
	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
		ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено тогда
			Если ДоступноеПоле.Ресурс тогда
				ЕстьРесурсы = истина;
			Иначе
				ЕстьРесурсы = ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЕстьРесурсы;
КонецФункции

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТекущаяДата",   ТекущаяДата());
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ПараметрНачалоПериода = Неопределено или ПараметрКонецПериода = Неопределено тогда
		Возврат;
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено и КонецПериода <> Неопределено тогда
		УправлениеОтчетамиИнфоком.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПустоеОформдениеПоля(Поле)
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЗначениеТекст = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Text"));
	ЗначениеТекст.Значение = "-";
	ЗначениеТекст.Использование = Истина;
	
	ПолеОформления = УсловноеОформление.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Поле;
	
КонецПроцедуры


Процедура ДобавитьОтборИлиПоВсемПоказателям(СтруктураОтчета, ВыбранныеПоля, СписокПолей)
	// создадим отбор или 
	ГруппаИли = СтруктураОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
		Если Найти(Строка(ВыбранноеПоле.Поле), "UserField") > 0 или СписокПолей.НайтиПоЗначению(ВыбранноеПоле.Поле) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		ИнфокомТиповыеОтчеты.ДобавитьОтбор(ГруппаИли, Строка(ВыбранноеПоле.Поле), 0, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		ГруппаИли.Использование = истина;
	КонецЕсли;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		СтруктураОтчета.Отбор.Элементы.Удалить(ГруппаИли);
	КонецЕсли;
КонецПроцедуры


Функция ПрисутствуетПоле(Поле)
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(КомпоновщикНастроек.Настройки.Структура, Поле);

	
	//Для каждого ЭлементСтруктуры из КомпоновщикНастроек.Настройки.Структура Цикл
	//	
	//	Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
	//		
	//		Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
	//			
	//			ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Если ЕстьГруппировка тогда
		Возврат ЕстьГруппировка;
	КонецЕсли;
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
	
	ЕстьГруппировка = ложь;
	
	Для каждого ОтборПоле из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПоле(Структура, Поле)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
	 тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
	
	Для каждого ЭлементСтруктуры из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") тогда
					Продолжить;
				КонецЕсли;
				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
					ЕстьПоле = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	
	Возврат Новый Структура("ДополнительныеНастройкиОтчета, ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	Истина, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции
#КонецЕсли

//+ГО
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Перем ВнешнийНаборДанных;
	
	УстановитьПривилегированныйРежим(Истина);
	СтандартнаяОбработка = Ложь;
	
	ОбъектВывода = ДокументРезультат;
			
	НастройкиВывода = КомпоновщикНастроек.ПолучитьНастройки();
		
	ОбъектВывода.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиВывода, );
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	РассчитатьНаборДанных(ВнешнийНаборДанных,НастройкиВывода);
	
	Если ВнешнийНаборДанных=Неопределено Тогда
		возврат;
	КонецЕсли;	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТЗ", 				ВнешнийНаборДанных);
	
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,	СтруктураДанных,, Ложь);
	
	
	_глВывестиРезультатКомпоновкиСАвтофиксациейСтрок(ОбъектВывода, ПроцессорКомпоновки,,,Истина);  	
	
		
КонецПроцедуры

Функция ВыполнитьПодключениеКБазе()
	
	Если НЕ СоединениеСБазой = Неопределено Тогда
		возврат Истина;
	КонецЕсли;
	//ИмяИнформационнойБазыНаСервереДляПодключения 	= "BP_CORP_Deb";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Состояние("Подключение к информационной базе");
	#КонецЕсли
	
	Попытка
		
		
		Коннектор = Новый COMObject(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		// создается объект COM-соединение
		
		Строка = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
		СоединениеСБазой = Коннектор.Connect(Строка);
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключится к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции


Процедура РассчитатьНаборДанных(ВнешнийНаборДанных,НастройкиВывода)
	
	ВнешнийНаборДанных = Новый ТаблицаЗначений;
	//ВнешнийНаборДанных.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ВнешнийНаборДанных.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ВнешнийНаборДанных.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ВнешнийНаборДанных.Колонки.Добавить("ЗадолженностьФинДт",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ВнешнийНаборДанных.Колонки.Добавить("ЗадолженностьФинКт",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ВнешнийНаборДанных.Колонки.Добавить("ЗадолженностьБухДт",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ВнешнийНаборДанных.Колонки.Добавить("ЗадолженностьБухКт",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	//ПараметрДатаНачалаАнализа  = НастройкиВывода.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	//Если ПараметрДатаНачалаАнализа = Неопределено Тогда
	//	ДатаНачалаАнализа = ДобавитьМесяц(ТекущаяДата(),-1);
	//Иначе
	//	ДатаНачалаАнализа = Дата(ПараметрДатаНачалаАнализа.Значение);
	//КонецЕсли;	
	//
	Период  = НастройкиВывода.ПараметрыДанных.Элементы.Найти("Период").Значение;
	Период = КонецДня(Период);
	//Если ПараметрДатаНачалаАнализа = Неопределено Тогда
	//	ДатаОкончанияАнализа = ДобавитьМесяц(ТекущаяДата(),1);
	//Иначе
	//	ДатаОкончанияАнализа = Дата(ПараметрДатаОкончанияАнализа.Значение);
	//КонецЕсли;	 
	
	Если НЕ ВыполнитьПодключениеКБазе() Тогда
		Возврат;
	КонецЕсли;	
	
	СчетаУчетаБУ  = НастройкиВывода.ПараметрыДанных.Элементы.Найти("СчетаУчетаБУ").Значение;
	СчетаУчетаФин  = НастройкиВывода.ПараметрыДанных.Элементы.Найти("СчетаУчетаФин").Значение;

	МассивКонтрагентов = ВернутьМассивКонтрагентов();	
	МассивОрганизаций = ВернутьМассивОрганизаций();	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Состояние("Сопоставление контрагентов и организаций между базами");
	#КонецЕсли 
	ТаблицаКонтрагентовБУ = ВернутьТаблицуКонтрагентовБУ(МассивКонтрагентов); 
	ТаблицаОрганизацийБУ = ВернутьТаблицуОрганизацийБУ(МассивОрганизаций);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Состояние("");
	#КонецЕсли 
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК ОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК ОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В ИЕРАРХИИ (&Счета),
	|			,
	//|			Субконто1 В ИЕРАРХИИ (&ПапкаАренда)
	//|				И
	|			Организация В (&Организации)) КАК ХозрасчетныйОстатки";
					
	Запрос.УстановитьПараметр("Период", Период);
	Счета = СоединениеСБазой.NewObject("Массив");
	Для каждого СчетБУ из СчетаУчетаБУ Цикл
	Счета.Добавить(СоединениеСБазой.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СчетБУ.Значение.Код));	
	КонецЦикла;	
	//Счета.Добавить(СоединениеСБазой.ПланыСчетов.Хозрасчетный.НайтиПоКоду("60"));
	//Счета.Добавить(СоединениеСБазой.ПланыСчетов.Хозрасчетный.НайтиПоКоду("62"));
	//Счета.Добавить(СоединениеСБазой.ПланыСчетов.Хозрасчетный.НайтиПоКоду("76"));
	Запрос.УстановитьПараметр("Счета", Счета);
	//Запрос.УстановитьПараметр("ПапкаАренда", СоединениеСБазой.Справочники.Контрагенты.НайтиПоНаименованию("Аренда",Истина));
	
	Организации = СоединениеСБазой.NewObject("Массив");
	МассивОрг = ТаблицаОрганизацийБУ.ВыгрузитьКолонку("ОрганизацияБУ");
	Для каждого Организация из МассивОрг Цикл
		Организации.Добавить(Организация);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организации",Организации);
	ТЗРезультатВБух = Запрос.Выполнить().Выгрузить();   
	ФинБухРезультат = Новый ТаблицаЗначений();
	ФинБухРезультат.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФинБухРезультат.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ФинБухРезультат.Колонки.Добавить("ОстатокДт",Новый ОписаниеТипов("Число"));
	ФинБухРезультат.Колонки.Добавить("ОстатокКт",Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаРез из ТЗРезультатВБух Цикл
		
		СтрокаСопоставленияКон = ТаблицаКонтрагентовБУ.Найти(СоединениеСБазой.String(СтрокаРез.Контрагент.УникальныйИдентификатор()),"ГУИД");
		СтрокаСопоставленияОрг = ТаблицаОрганизацийБУ.Найти(СоединениеСБазой.String(СтрокаРез.Организация.УникальныйИдентификатор()),"ГУИД");
		
		Если СтрокаСопоставленияКон=Неопределено или СтрокаСопоставленияОрг=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ФинБухРезультат.Добавить();
		НоваяСтрока.Контрагент = СтрокаСопоставленияКон.Контрагент;
		НоваяСтрока.Организация = СтрокаСопоставленияОрг.Организация;	
		НоваяСтрока.ОстатокДт = СтрокаРез.ОстатокДт;
		НоваяСтрока.ОстатокКт = СтрокаРез.ОстатокКт;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТЗБух", ТаблицаКонтрагентовБУ);
	Запрос.УстановитьПараметр("ДанныеБух", ФинБухРезультат);
	//
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.Текст = "ВЫБРАТЬ ТЗБух.Контрагент, ТЗБух.КонтрагентБУ
	//	|ПОМЕСТИТЬ СопоставлениеКонтрагентов
	//	|ИЗ
	//	|	&ТЗБух КАК ТЗБух
	//	|";
	//Запрос.Выполнить();	
	//	
	Запрос.Текст = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ДанныеБУ
		|ИЗ
		|	&ДанныеБух КАК ДанныеБух
		|";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ФинансовыйОстатки.Субконто1, ДанныеБУ.Организация) КАК Организация,
	               |	ЕСТЬNULL(ФинансовыйОстатки.Субконто2, ДанныеБУ.Контрагент) КАК Контрагент,
	               |	ЕСТЬNULL(ФинансовыйОстатки.СуммаОстатокДт, 0) КАК ЗадолженностьФинДт,
	               |	ЕСТЬNULL(ФинансовыйОстатки.СуммаОстатокКт, 0) КАК ЗадолженностьФинКт,
	               |	ЕСТЬNULL(ДанныеБУ.ОстатокДт, 0) КАК ЗадолженностьБухДт,
	               |	ЕСТЬNULL(ДанныеБУ.ОстатокКт, 0) КАК ЗадолженностьБухКт
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(
	               |			&Период,
	               |			Счет В ИЕРАРХИИ (&Счета),
	               |			,
	               |			Субконто2 В (&Контрагенты)
	               |				И Субконто1 В (&Организации)) КАК ФинансовыйОстатки
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеБУ КАК ДанныеБУ
	               |		ПО ФинансовыйОстатки.Субконто2 = ДанныеБУ.Контрагент
	               |			И ФинансовыйОстатки.Субконто1 = ДанныеБУ.Организация";

	Запрос.УстановитьПараметр("Контрагенты", МассивКонтрагентов);
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	Запрос.УстановитьПараметр("Период", Период);
	Счета = Новый Массив();
	Для каждого СчетФин из СчетаУчетаФин Цикл
	Счета.Добавить(СчетФин.Значение);	
	КонецЦикла;
	//Счета.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.1"));
	//Счета.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.2"));
	//Счета.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("62.2"));
	Запрос.УстановитьПараметр("Счета", Счета);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ВнешнийНаборДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		Если НоваяСтрока.ЗадолженностьФинДт-НоваяСтрока.ЗадолженностьБухДт = 0
			И НоваяСтрока.ЗадолженностьФинКт-НоваяСтрока.ЗадолженностьБухКт = 0 Тогда
			ВнешнийНаборДанных.Удалить(НоваяСтрока);
		КонецЕсли;		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ВернутьТаблицуКонтрагентовБУ(МассивКонтрагентов)
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	МассивТипов =Новый Массив;
	МассивТипов.Добавить(ТипЗнч(СоединениеСБазой.Справочники.Контрагенты.ПустаяСсылка()));
	ТаблицаКонтрагентов.Колонки.Добавить("КонтрагентБУ",Новый ОписаниеТипов(МассивТипов));
	ТаблицаКонтрагентов.Колонки.Добавить("ГУИД",Новый ОписаниеТипов("Строка"));
	
	Для каждого Контрагент из МассивКонтрагентов Цикл
		Попытка 
			ГУИДТек = Контрагент.УникальныйИдентификатор();
		Исключение
			Продолжить;
		КонецПопытки;
		КонтрагентБУ = Неопределено;
		
		БухГУИД = СоединениеСБазой.NewObject("УникальныйИдентификатор",Строка(ГУИДТек));		
		СсылкаВБУ = СоединениеСБазой.Справочники.Контрагенты.ПолучитьСсылку(БухГУИД);
		ОбъектВБУ = СсылкаВБУ.ПолучитьОбъект();
		Если НЕ ОбъектВБУ=Неопределено Тогда 			
			КонтрагентБУ = СсылкаВБУ;		  
		КонецЕсли;		
		Если КонтрагентБУ = Неопределено Тогда
				
			Запрос = СоединениеСБазой.NewObject("Запрос");
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка  КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	(Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП) или Контрагенты.Наименование = &Наименование";
			
			Запрос.УстановитьПараметр("ИНН",Контрагент.ИНН);
			Запрос.УстановитьПараметр("КПП",Контрагент.КПП);
			Запрос.УстановитьПараметр("Наименование",Контрагент.Наименование);
                                                          	
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				 КонтрагентБУ = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;    		
			
		КонецЕсли;
		
		Если КонтрагентБУ = Неопределено Тогда
			Сообщить("Не удалось найти в бухгалтерской базе контрагента "+Контрагент);
			Продолжить;		
		КонецЕсли;
			
		НоваяСтрока = ТаблицаКонтрагентов.Добавить();	
		НоваяСтрока.Контрагент = Контрагент; 
		НоваяСтрока.КонтрагентБУ = КонтрагентБУ; 
		НоваяСтрока.ГУИД = СоединениеСБазой.String(КонтрагентБУ.УникальныйИдентификатор());	
		
	КонецЦикла;
	
	возврат ТаблицаКонтрагентов;
		
КонецФункции	

Функция ВернутьТаблицуОрганизацийБУ(МассивОрганизаций)
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	МассивТипов =Новый Массив;
	МассивТипов.Добавить(ТипЗнч(СоединениеСБазой.Справочники.Организации.ПустаяСсылка()));
	ТаблицаОрганизаций.Колонки.Добавить("ОрганизацияБУ",Новый ОписаниеТипов(МассивТипов));
	ТаблицаОрганизаций.Колонки.Добавить("ГУИД",Новый ОписаниеТипов("Строка"));
	
	Для каждого Организация из МассивОрганизаций Цикл       
		
		Попытка 
			ГУИДТек = Организация.УникальныйИдентификатор();
		Исключение
			Продолжить;
		КонецПопытки;
		
		ОрганизацияБУ = Неопределено;
		БухГУИД = СоединениеСБазой.NewObject("УникальныйИдентификатор",Строка(ГУИДТек));		
		СсылкаВБУ = СоединениеСБазой.Справочники.Организации.ПолучитьСсылку(БухГУИД);
		ОбъектВБУ = СсылкаВБУ.ПолучитьОбъект();
		Если НЕ ОбъектВБУ=Неопределено Тогда 			
			ОрганизацияБУ = СсылкаВБУ;		  
		КонецЕсли;		
		Если ОрганизацияБУ = Неопределено Тогда
				
			Запрос = СоединениеСБазой.NewObject("Запрос");
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка  КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	(Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП) или Организации.Наименование = &Наименование";
			
			Запрос.УстановитьПараметр("ИНН",Организация.ИНН);
			Запрос.УстановитьПараметр("КПП",Организация.КПП);
			Запрос.УстановитьПараметр("Наименование",Организация.Наименование);
                                                          	
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				 ОрганизацияБУ = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;    		
			
		КонецЕсли;
		
		Если ОрганизацияБУ = Неопределено Тогда
			Сообщить("Не удалось найти в бухгалтерской базе Организацию "+Организация);
			Продолжить;		
		КонецЕсли;
			
		НоваяСтрока = ТаблицаОрганизаций.Добавить();	
		НоваяСтрока.Организация = Организация; 
		НоваяСтрока.ОрганизацияБУ = ОрганизацияБУ; 
		НоваяСтрока.ГУИД = СоединениеСБазой.String(ОрганизацияБУ.УникальныйИдентификатор());		
	КонецЦикла;	
	
	возврат ТаблицаОрганизаций;
КонецФункции	


Функция ВернутьМассивКонтрагентов()
	
	
	НастройкиВывода = КомпоновщикНастроек.ПолучитьНастройки();
		
		
	СхемаЗапросКонтрагентов = ПолучитьМакет("ЗапросКонтрагентов");
	КомпоновщикНастроекКонтрагентов = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКонтрагентов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаЗапросКонтрагентов));	
	КомпоновщикНастроекКонтрагентов.ЗагрузитьНастройки(НастройкиВывода);
	//КомпоновщикНастроекКонтрагентов.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроек.ПользовательскиеНастройки);
	КомпоновщикНастроекКонтрагентов.Восстановить();
	//КомпоновщикНастроекКонтрагентов.Настройки.ПараметрыДанных.Элементы.Найти("ГруппаАренда").Значение = Справочники.Контрагенты.НайтиПоНаименованию("Аренда",Истина);
	КомпоновщикМакетаКонтрагентов = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакетаКонтрагентов.Выполнить(СхемаЗапросКонтрагентов, КомпоновщикНастроекКонтрагентов.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат =  ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	возврат Результат.ВыгрузитьКолонку("Контрагент");
	
КонецФункции

Функция ВернутьМассивОрганизаций()
	
	
	НастройкиВывода = КомпоновщикНастроек.ПолучитьНастройки();
		
		
	СхемаЗапросОрганизаций = ПолучитьМакет("ЗапросОрганизаций");
	КомпоновщикНастроекОрганизаций = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекОрганизаций.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаЗапросОрганизаций));	
	КомпоновщикНастроекОрганизаций.ЗагрузитьНастройки(НастройкиВывода);
	КомпоновщикНастроекОрганизаций.Восстановить();
	КомпоновщикМакетаОраганизаций = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакетаОраганизаций.Выполнить(СхемаЗапросОрганизаций, КомпоновщикНастроекОрганизаций.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат =  ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	возврат Результат.ВыгрузитьКолонку("Организация");
	
КонецФункции

Процедура _глВывестиРезультатКомпоновкиСАвтофиксациейСтрок( Таб, 
	ПроцессорКомпоновкиДанных, 
	ЭлементыРасшировки,
	Знач МассивИгнорируемыхПолей = Неопределено, 
	РазрешитьПрерывание = Истина)  
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Таб);
	ПроцессорВывода.НачатьВывод();
	ФиксацияВыполнена = Ложь;
	Если МассивИгнорируемыхПолей = Неопределено Тогда
		МассивИгнорируемыхПолей = Новый Массив;
	КонецЕсли; 
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		// Автофиксация
		Если Не ФиксацияВыполнена Тогда
			Для Каждого ЗначениеПараметра Из ЭлементРезультатаКомпоновкиДанных.ЗначенияПараметров Цикл
				Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					ЗначенияПолейРасшифровки = ЭлементыРасшировки[ЗначениеПараметра.Значение].ПолучитьПоля();
					Для Каждого ЗначениеПоляРасшифровки Из ЗначенияПолейРасшифровки Цикл
						Если МассивИгнорируемыхПолей.Найти(ЗначениеПоляРасшифровки.Поле) = Неопределено Тогда
							Таб.ФиксацияСверху = Таб.ВысотаТаблицы;
							ФиксацияВыполнена = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если ФиксацияВыполнена Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
		Если РазрешитьПрерывание Тогда
			#Если Клиент тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
		КонецЕсли; 
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПлатКалендаряАренды(ДатаАктуальности,ДатаРасчета,ДатаНачалаАнализа,ДатаОкончанияАнализа,Договоры)
	#Если Клиент Тогда
		Состояние("Расчет данных календаря оплат за аренду");
	#КонецЕсли
	
	НачалоПериода = ДатаНачалаАнализа;
	КонецПериода =  КонецМесяца(ДатаНачалаАнализа);
	
	ОбработкаПКпоАренде = Обработки.ПлатежныйКалендарьПоАренде.Создать();
	ОбработкаПКпоАренде.ВидПериода = Истина;
	ОбработкаПКпоАренде.НачалоПериода = НачалоПериода;
	ОбработкаПКпоАренде.КонецПериода = КонецПериода;
	ОбработкаПКпоАренде.ФормаОплаты =  Перечисления.ФормыОплаты.Безналичные;
	Договоры = ОбработкаПКпоАренде.ПолучитьРезультатТаблицу();
	
	
	Возврат;
	//ниже закомментирвоать после тестирвоания
	
	Договоры = Новый ТаблицаЗначений;
	Договоры.Колонки.Добавить("НомерСтроки");
	Договоры.Колонки.Добавить("Использование");
	Договоры.Колонки.Добавить("ЭтоХвостОплаты");
	Договоры.Колонки.Добавить("Организация");
	Договоры.Колонки.Добавить("Контрагент");
	Договоры.Колонки.Добавить("ДоговорКонтрагента");
	Договоры.Колонки.Добавить("СтруктурнаяЕдиница");
	Договоры.Колонки.Добавить("ДатаНачалаАренды");
	Договоры.Колонки.Добавить("ДатаОкончанияАренды");
	Договоры.Колонки.Добавить("ЧислоОплатыАренды");
	Договоры.Колонки.Добавить("СрокОплатыАренды");
	Договоры.Колонки.Добавить("СтавкаНДС");
	Договоры.Колонки.Добавить("Комментарий");
	Договоры.Колонки.Добавить("СтатусОплаты");
	Договоры.Колонки.Добавить("ТипАренднойПлаты");
	
	//Инд = Договоры.Колонки.Количество() - 1;
	//Пока Инд > 0 Цикл
	//	Если Лев(Договоры.Колонки[Инд].Имя, 5) = "Дата_"
	//			ИЛИ Лев(Договоры.Колонки[Инд].Имя, 9) = "Документ_" Тогда
	//		Договоры.Колонки.Удалить(Инд);
	//		Договоры.Колонки.Удалить(Инд);
	//	КонецЕсли;
	//	
	//	Инд = Инд - 1;
	//КонецЦикла;
	//
	НачалоПериода = ДатаНачалаАнализа;
	КонецПериода =  КонецМесяца(ДатаНачалаАнализа);
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"		, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"		, КонецПериода);
	Запрос.УстановитьПараметр("НачалоСледПериода"	, ДобавитьМесяц(НачалоПериода, 1));
	Запрос.УстановитьПараметр("КонецСледПериода"	, КонецМесяца(ДобавитьМесяц(КонецПериода, 1)));
	Запрос.УстановитьПараметр("Организация"			, Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Контрагент"			, Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекущаяДата"			, НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ФормаОплаты"			, Перечисления.ФормыОплаты.Безналичные);
	Запрос.УстановитьПараметр("ВидПериода"			, Истина);
	Запрос.УстановитьПараметр("ДатаОтчета"			, НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ВалютаРегл"			, Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Руб"					, Справочники.Валюты.НайтиПоНаименованию("RUB"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|	СтатусыДоговоровАренды.Договор КАК ДоговорКонтрагента,
	|	МАКСИМУМ(СтатусыДоговоровАренды.Период) КАК Период
	|ПОМЕСТИТЬ ВТПроизводственныйКалендарь
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоговоровАренды КАК СтатусыДоговоровАренды
	|		ПО (СтатусыДоговоровАренды.Период <= РегламентированныйПроизводственныйКалендарь.ДатаКалендаря)
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &НачалоПериода
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &КонецПериода
	|	И (СтатусыДоговоровАренды.Договор.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (СтатусыДоговоровАренды.Договор.Владелец = &Контрагент
	|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	И (СтатусыДоговоровАренды.Договор.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|			ИЛИ &СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|	И СтатусыДоговоровАренды.ЗаключениеДоговора.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем)
	|	И НЕ СтатусыДоговоровАренды.ЗаключениеДоговора.ДатаАкта = ДАТАВРЕМЯ(1,1,1)
	|	И НЕ НАЧАЛОПЕРИОДА(СтатусыДоговоровАренды.ЗаключениеДоговора.ДатаАкта, МЕСЯЦ) > &НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|	СтатусыДоговоровАренды.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыДоговоровАренды.Договор.Организация КАК Организация,
	|	СтатусыДоговоровАренды.Договор.Владелец КАК Контрагент,
	|	СтатусыДоговоровАренды.Договор КАК ДоговорКонтрагента,
	|	СтатусыДоговоровАренды.Договор.ОбъектАренды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА СтатусыДоговоровАренды.ЗаключениеДоговора.ДатаАкта = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СтатусыДоговоровАренды.ДатаНачалаАренды > СтатусыДоговоровАренды.ЗаключениеДоговора.ДатаАкта
	|			ТОГДА СтатусыДоговоровАренды.ДатаНачалаАренды
	|		ИНАЧЕ СтатусыДоговоровАренды.ЗаключениеДоговора.ДатаАкта
	|	КОНЕЦ КАК ДатаНачалаАренды,
	|	СтатусыДоговоровАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	СтатусыДоговоровАренды.ЗаключениеДоговора.ДатаАкта КАК ДатаАктаЗаключения,
	|	ВЫБОР
	|		КОГДА СтатусыДоговоровАренды.Регистратор ССЫЛКА Документ.РасторжениеДоговораАренды
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорРасторгнут,
	|	МАКСИМУМ(РегламентированныйПроизводственныйКалендарь2.ДатаКалендаря) КАК ДатаОплаты
	|ПОМЕСТИТЬ ВТ_Статусы
	|ИЗ
	|	ВТПроизводственныйКалендарь КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоговоровАренды КАК СтатусыДоговоровАренды
	|		ПО ВложенныйЗапрос.ДоговорКонтрагента = СтатусыДоговоровАренды.Договор
	|			И ВложенныйЗапрос.Период = СтатусыДоговоровАренды.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь2
	|		ПО (РегламентированныйПроизводственныйКалендарь2.ДатаКалендаря <= ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, ВложенныйЗапрос.ДоговорКонтрагента.ЧислоОплатыАренды - 1))
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь2.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|	И РегламентированныйПроизводственныйКалендарь2.ДатаКалендаря <= ДОБАВИТЬКДАТЕ(&КонецПериода, МЕСЯЦ, 1)
	|	И ВложенныйЗапрос.ДатаКалендаря = НАЧАЛОПЕРИОДА(&КонецПериода, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыДоговоровАренды.Договор.Организация,
	|	СтатусыДоговоровАренды.Договор.Владелец,
	|	СтатусыДоговоровАренды.Договор,
	|	СтатусыДоговоровАренды.Договор.ОбъектАренды.СтруктурнаяЕдиница,
	|	СтатусыДоговоровАренды.ДатаНачалаАренды,
	|	СтатусыДоговоровАренды.ДатаОкончанияАренды,
	|	СтатусыДоговоровАренды.ЗаключениеДоговора.ДатаАкта,
	|	ВЫБОР
	|		КОГДА СтатусыДоговоровАренды.Регистратор ССЫЛКА Документ.РасторжениеДоговораАренды
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ПОМЕСТИТЬ ВТ_ПервыйРабочийДень
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &НачалоПериода
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВложенныйЗапрос.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	ВложенныйЗапрос.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	ВложенныйЗапрос.ДатаАктаЗаключения КАК ДатаАктаЗаключения,
	|	ВложенныйЗапрос.ДоговорРасторгнут КАК ДоговорРасторгнут,
	|	ВЫБОР
	|		КОГДА НЕ ДатыОплатыПоДоговорамАренды.Дата ЕСТЬ NULL 
	|			ТОГДА ДатыОплатыПоДоговорамАренды.Дата
	|		КОГДА МЕСЯЦ(ВложенныйЗапрос.ДатаОплаты) < МЕСЯЦ(&НачалоПериода)
	|			ТОГДА ВТ_ПервыйРабочийДень.ДатаКалендаря
	|		ИНАЧЕ ВложенныйЗапрос.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВложенныйЗапрос2.ТипАренднойПлаты КАК ТипАренднойПлаты,
	|	ВложенныйЗапрос2.ФормаОплаты КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА СтатусыОплатыПоДоговорамАрендыСрезПоследних.Статус ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОплатыДоговоровКонтрагентов.Действует)
	|		ИНАЧЕ СтатусыОплатыПоДоговорамАрендыСрезПоследних.Статус
	|	КОНЕЦ КАК СтатусОплаты
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	ВТ_ПервыйРабочийДень КАК ВТ_ПервыйРабочийДень,
	|	ВТ_Статусы КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыОплатыПоДоговорамАренды КАК ДатыОплатыПоДоговорамАренды
	|		ПО ВложенныйЗапрос.ДоговорКонтрагента = ДатыОплатыПоДоговорамАренды.Договор
	|			И (ДатыОплатыПоДоговорамАренды.ПериодРегистрации = &НачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОплатыПоДоговорамАренды.СрезПоследних(&КонецПериода, ) КАК СтатусыОплатыПоДоговорамАрендыСрезПоследних
	|		ПО ВложенныйЗапрос.ДоговорКонтрагента = СтатусыОплатыПоДоговорамАрендыСрезПоследних.Договор,
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть) КАК ТипАренднойПлаты,
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные) КАК ФормаОплаты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть),
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть),
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть),
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)) КАК ВложенныйЗапрос2
	|ГДЕ
	|	ВЫБОР
	|			КОГДА МЕСЯЦ(ВложенныйЗапрос.ДатаОплаты) < МЕСЯЦ(&НачалоПериода)
	|				ТОГДА ВТ_ПервыйРабочийДень.ДатаКалендаря
	|			ИНАЧЕ ВложенныйЗапрос.ДатаОплаты
	|		КОНЕЦ >= &НачалоПериода
	|	И ВЫБОР
	|			КОГДА МЕСЯЦ(ВложенныйЗапрос.ДатаОплаты) < МЕСЯЦ(&НачалоПериода)
	|				ТОГДА ВТ_ПервыйРабочийДень.ДатаКалендаря
	|			ИНАЧЕ ВложенныйЗапрос.ДатаОплаты
	|		КОНЕЦ <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемыеПлатежиПоДоговорамАренды.Договор КАК ДоговорКонтрагента,
	|	ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты,
	|	ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты,
	|	СУММА(ПланируемыеПлатежиПоДоговорамАренды.Сумма) КАК СуммаПлан,
	|	СУММА(ПланируемыеПлатежиПоДоговорамАренды.СуммаВал) КАК СуммаПланВал
	|ПОМЕСТИТЬ ВТ_ПланируемыеПлатежи
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды КАК ПланируемыеПлатежиПоДоговорамАренды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(ПланируемыеПлатежиПоДоговорамАренды.Период) КАК Период,
	|				ПланируемыеПлатежиПоДоговорамАренды.Договор КАК Договор,
	|				ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты КАК ФормаОплаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты КАК ТипАренднойПлаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.Дата КАК Дата
	|			ИЗ
	|				РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды КАК ПланируемыеПлатежиПоДоговорамАренды
	|			ГДЕ
	|				ПланируемыеПлатежиПоДоговорамАренды.Период <= &КонецПериода
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПланируемыеПлатежиПоДоговорамАренды.Договор,
	|				ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.Дата) КАК Периоды
	|			ПО ПланируемыеПлатежиПоДоговорамАренды.Период = Периоды.Период
	|				И ПланируемыеПлатежиПоДоговорамАренды.Договор = Периоды.Договор
	|				И ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты = Периоды.ФормаОплаты
	|				И ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты = Периоды.ТипАренднойПлаты
	|				И ПланируемыеПлатежиПоДоговорамАренды.Дата = Периоды.Дата
	|		ПО ВТ_Договоры.ДоговорКонтрагента = ПланируемыеПлатежиПоДоговорамАренды.Договор
	|			И ВТ_Договоры.ФормаОплаты = ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты
	|			И ВТ_Договоры.ТипАренднойПлаты = ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты
	|ГДЕ
	|	ПланируемыеПлатежиПоДоговорамАренды.Период <= &КонецПериода
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата >= &НачалоПериода
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата <= &КонецПериода
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата >= ВТ_Договоры.ДатаНачалаАренды
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата <= ВЫБОР
	|			КОГДА ВТ_Договоры.ДоговорРасторгнут
	|				ТОГДА ВТ_Договоры.ДатаОкончанияАренды
	|			ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТ_Договоры.ДатаОкончанияАренды, МЕСЯЦ, 6), МЕСЯЦ)
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемыеПлатежиПоДоговорамАренды.Договор,
	|	ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты,
	|	ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемыеПлатежиПоДоговорамАренды.Договор КАК ДоговорКонтрагента,
	|	ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты,
	|	ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты,
	|	СУММА(ПланируемыеПлатежиПоДоговорамАренды.Сумма) КАК СуммаПлан,
	|	СУММА(ПланируемыеПлатежиПоДоговорамАренды.СуммаВал) КАК СуммаПланВал
	|ПОМЕСТИТЬ ВТ_ПланируемыеПлатежи_СледующийПериод
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды КАК ПланируемыеПлатежиПоДоговорамАренды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(ПланируемыеПлатежиПоДоговорамАренды.Период) КАК Период,
	|				ПланируемыеПлатежиПоДоговорамАренды.Договор КАК Договор,
	|				ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты КАК ФормаОплаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты КАК ТипАренднойПлаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.Дата КАК Дата
	|			ИЗ
	|				РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды КАК ПланируемыеПлатежиПоДоговорамАренды
	|			ГДЕ
	|				ПланируемыеПлатежиПоДоговорамАренды.Период <= &КонецСледПериода
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПланируемыеПлатежиПоДоговорамАренды.Договор,
	|				ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты,
	|				ПланируемыеПлатежиПоДоговорамАренды.Дата) КАК Периоды
	|			ПО ПланируемыеПлатежиПоДоговорамАренды.Период = Периоды.Период
	|				И ПланируемыеПлатежиПоДоговорамАренды.Договор = Периоды.Договор
	|				И ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты = Периоды.ФормаОплаты
	|				И ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты = Периоды.ТипАренднойПлаты
	|				И ПланируемыеПлатежиПоДоговорамАренды.Дата = Периоды.Дата
	|		ПО ВТ_Договоры.ДоговорКонтрагента = ПланируемыеПлатежиПоДоговорамАренды.Договор
	|			И ВТ_Договоры.ФормаОплаты = ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты
	|			И ВТ_Договоры.ТипАренднойПлаты = ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты
	|ГДЕ
	|	ПланируемыеПлатежиПоДоговорамАренды.Период <= &КонецСледПериода
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата >= &НачалоСледПериода
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата <= &КонецСледПериода
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата >= ВТ_Договоры.ДатаНачалаАренды
	|	И ПланируемыеПлатежиПоДоговорамАренды.Дата <= ВЫБОР
	|			КОГДА ВТ_Договоры.ДоговорРасторгнут
	|				ТОГДА ВТ_Договоры.ДатаОкончанияАренды
	|			ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТ_Договоры.ДатаОкончанияАренды, МЕСЯЦ, 6), МЕСЯЦ)
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемыеПлатежиПоДоговорамАренды.Договор,
	|	ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты,
	|	ПланируемыеПлатежиПоДоговорамАренды.ТипАренднойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.Организация КАК Организация,
	|	РасходИзБанка.Контрагент КАК Контрагент,
	|	РасходИзБанка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(РасходИзБанка.Ссылка.Дата, ДЕНЬ) КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные) КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	КОНЕЦ КАК ТипАренднойПлаты,
	|	РасходИзБанка.Ссылка КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТДокументыРасхода
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.Дата >= &НачалоПериода
	|	И РасходИзБанка.Дата <= ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|	И (РасходИзБанка.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (РасходИзБанка.Контрагент = &Контрагент
	|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	И РасходИзБанка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	РасходИзКассы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные),
	|	ВЫБОР
	|		КОГДА РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	КОНЕЦ,
	|	РасходИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.Дата >= &НачалоПериода
	|	И РасходИзКассы.Дата <= ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|	И (РасходИзКассы.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (РасходИзКассы.Контрагент = &Контрагент
	|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	И РасходИзКассы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Договоры.Организация КАК Организация,
	|	ВТ_Договоры.Контрагент КАК Контрагент,
	|	ВТ_Договоры.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Договоры.ДоговорКонтрагента.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Договоры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_Договоры.ДатаНачалаАренды,
	|	ВТ_Договоры.ДатаОкончанияАренды,
	|	ВТ_Договоры.ДатаАктаЗаключения,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|							ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПлан, 0)
	|						ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПлан, 0)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПланБезналичные,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|							ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПланВал, 0)
	|						ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПланВал, 0)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПланБезналичныеВал,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|							ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПлан, 0)
	|						ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПлан, 0)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПланНаличные,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|							ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПланВал, 0)
	|						ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПланВал, 0)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПланНаличныеВал,
	|	ВТ_Договоры.ДатаОплаты КАК ДатаОплаты,
	|	ВТ_Договоры.ДоговорКонтрагента.Комментарий КАК Комментарий,
	|	ВТ_Договоры.ДоговорКонтрагента.ЧислоОплатыАренды КАК ЧислоОплатыАренды,
	|	ВТ_Договоры.ДоговорКонтрагента.СрокОплатыАренды КАК СрокОплатыАренды,
	|	ВТ_Договоры.СтатусОплаты,
	|	ВТ_Договоры.ТипАренднойПлаты КАК ТипАренднойПлаты,
	|	ВЫБОР
	|		КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|			ТОГДА Документы.ПлатежныйДокумент
	|		ИНАЧЕ Документы.ПлатежныйДокумент
	|	КОНЕЦ КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|				И НЕ Документы.Дата ЕСТЬ NULL 
	|				И ДОБАВИТЬКДАТЕ(ВТ_Договоры.ДатаОплаты, ДЕНЬ, 1) = Документы.Дата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоХвостОплаты
	|ПОМЕСТИТЬ ВТ_СводныеДанные
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПланируемыеПлатежи КАК ВТ_ПланируемыеПлатежи
	|		ПО ВТ_Договоры.ДоговорКонтрагента = ВТ_ПланируемыеПлатежи.ДоговорКонтрагента
	|			И ВТ_Договоры.ФормаОплаты = ВТ_ПланируемыеПлатежи.ФормаОплаты
	|			И ВТ_Договоры.ТипАренднойПлаты = ВТ_ПланируемыеПлатежи.ТипАренднойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПланируемыеПлатежи_СледующийПериод КАК ВТ_ПланируемыеПлатежи_СледующийПериод
	|		ПО ВТ_Договоры.ДоговорКонтрагента = ВТ_ПланируемыеПлатежи_СледующийПериод.ДоговорКонтрагента
	|			И ВТ_Договоры.ФормаОплаты = ВТ_ПланируемыеПлатежи_СледующийПериод.ФормаОплаты
	|			И ВТ_Договоры.ТипАренднойПлаты = ВТ_ПланируемыеПлатежи_СледующийПериод.ТипАренднойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасхода КАК Документы
	|		ПО ВТ_Договоры.Организация = Документы.Организация
	|			И ВТ_Договоры.Контрагент = Документы.Контрагент
	|			И ВТ_Договоры.ДоговорКонтрагента = Документы.ДоговорКонтрагента
	|			И (ВТ_Договоры.ДатаОплаты = Документы.Дата
	|				ИЛИ ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|					И ДОБАВИТЬКДАТЕ(ВТ_Договоры.ДатаОплаты, ДЕНЬ, 1) = Документы.Дата)
	|			И ВТ_Договоры.ФормаОплаты = Документы.ФормаОплаты
	|			И ВТ_Договоры.ТипАренднойПлаты = Документы.ТипАренднойПлаты
	|ГДЕ
	|	(ВТ_Договоры.ФормаОплаты = &ФормаОплаты
	|			ИЛИ &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|				И ВЫБОР
	|					КОГДА НЕ &ВидПериода
	|							И ВТ_Договоры.ДатаОплаты = &ДатаОтчета
	|						ТОГДА 1
	|					КОГДА &ВидПериода
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Договоры.ДоговорКонтрагента,
	|	ВТ_Договоры.Организация,
	|	ВТ_Договоры.Контрагент,
	|	ВТ_Договоры.СтруктурнаяЕдиница,
	|	ВТ_Договоры.ДатаНачалаАренды,
	|	ВТ_Договоры.ДатаОкончанияАренды,
	|	ВТ_Договоры.ДатаАктаЗаключения,
	|	ВТ_Договоры.ДоговорКонтрагента.СтавкаНДС,
	|	ВТ_Договоры.ДатаОплаты,
	|	ВТ_Договоры.ДоговорКонтрагента.Комментарий,
	|	ВТ_Договоры.ДоговорКонтрагента.ЧислоОплатыАренды,
	|	ВТ_Договоры.ДоговорКонтрагента.СрокОплатыАренды,
	|	ВТ_Договоры.СтатусОплаты,
	|	ВТ_Договоры.ТипАренднойПлаты,
	|	Документы.ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|			ТОГДА Документы.ПлатежныйДокумент
	|		ИНАЧЕ Документы.ПлатежныйДокумент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|				И НЕ Документы.Дата ЕСТЬ NULL 
	|				И ДОБАВИТЬКДАТЕ(ВТ_Договоры.ДатаОплаты, ДЕНЬ, 1) = Документы.Дата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|								ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПлан, 0)
	|							ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПлан, 0)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|								ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПланВал, 0)
	|							ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПланВал, 0)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|								ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПлан, 0)
	|							ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПлан, 0)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ВТ_Договоры.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_Договоры.ДоговорКонтрагента.ПериодОплатыАренды = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Текущий)
	|								ТОГДА ЕСТЬNULL(ВТ_ПланируемыеПлатежи.СуммаПланВал, 0)
	|							ИНАЧЕ ЕСТЬNULL(ВТ_ПланируемыеПлатежи_СледующийПериод.СуммаПланВал, 0)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница,
	|	ВложенныйЗапрос.ДатаНачалаАренды,
	|	ВложенныйЗапрос.ДатаОкончанияАренды,
	|	ВложенныйЗапрос.ДатаАктаЗаключения,
	|	ВложенныйЗапрос.СуммаПланБезналичные,
	|	ВЫБОР
	|		КОГДА КурсыВалютДляРасчетовПоАренде.Валюта = &ВалютаРегл
	|					И КурсыВалютДляРасчетовПоАренде.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.КурсЦБ)
	|				ИЛИ ЕСТЬNULL(КурсыВалютДляРасчетовПоАренде.СпособРасчета, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.ПустаяСсылка)
	|			ТОГДА ВложенныйЗапрос.СуммаПланБезналичные
	|		ИНАЧЕ ВложенныйЗапрос.СуммаПланБезналичныеВал
	|	КОНЕЦ КАК СуммаПланБезналичныеВал,
	|	ВложенныйЗапрос.СуммаПланНаличные,
	|	ВЫБОР
	|		КОГДА КурсыВалютДляРасчетовПоАренде.Валюта = &ВалютаРегл
	|				И КурсыВалютДляРасчетовПоАренде.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.КурсЦБ)
	|			ТОГДА ВложенныйЗапрос.СуммаПланНаличные
	|		ИНАЧЕ ВложенныйЗапрос.СуммаПланНаличныеВал
	|	КОНЕЦ КАК СуммаПланНаличныеВал,
	|	ВложенныйЗапрос.ДатаОплаты,
	|	ВложенныйЗапрос.Комментарий,
	|	ВложенныйЗапрос.ЧислоОплатыАренды,
	|	ВложенныйЗапрос.СрокОплатыАренды,
	|	ВложенныйЗапрос.СтатусОплаты,
	|	ВложенныйЗапрос.ТипАренднойПлаты,
	|	ВложенныйЗапрос.ПлатежныйДокумент,
	|	ВложенныйЗапрос.ЭтоХвостОплаты,
	|	ВложенныйЗапрос.Период,
	|	ЕСТЬNULL(КурсыВалютДляРасчетовПоАренде.Валюта, &Руб) КАК Валюта,
	|	ЕСТЬNULL(КурсыВалютДляРасчетовПоАренде.Валюта2, &Руб) КАК Валюта2,
	|	ЕСТЬNULL(КурсыВалютДляРасчетовПоАренде.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалютДляРасчетовПоАренде.Кратность, &Руб) КАК Кратность,
	|	ЕСТЬNULL(КурсыВалютДляРасчетовПоАренде.СпособРасчета, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.ПустаяСсылка)) КАК СпособРасчета,
	|	КурсыВалютДляРасчетовПоАренде.Коэффициент,
	|	КурсыВалютДляРасчетовПоАренде.НижняяГраница,
	|	КурсыВалютДляРасчетовПоАренде.ВерхняяГраница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_СводныеДанные.Организация КАК Организация,
	|		ВТ_СводныеДанные.Контрагент КАК Контрагент,
	|		ВТ_СводныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВТ_СводныеДанные.СтавкаНДС КАК СтавкаНДС,
	|		ВТ_СводныеДанные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ВТ_СводныеДанные.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|		ВТ_СводныеДанные.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|		ВТ_СводныеДанные.ДатаАктаЗаключения КАК ДатаАктаЗаключения,
	|		ВТ_СводныеДанные.СуммаПланБезналичные КАК СуммаПланБезналичные,
	|		ВТ_СводныеДанные.СуммаПланБезналичныеВал КАК СуммаПланБезналичныеВал,
	|		ВТ_СводныеДанные.СуммаПланНаличные КАК СуммаПланНаличные,
	|		ВТ_СводныеДанные.СуммаПланНаличныеВал КАК СуммаПланНаличныеВал,
	|		ВТ_СводныеДанные.ДатаОплаты КАК ДатаОплаты,
	|		ВТ_СводныеДанные.Комментарий КАК Комментарий,
	|		ВТ_СводныеДанные.ЧислоОплатыАренды КАК ЧислоОплатыАренды,
	|		ВТ_СводныеДанные.СрокОплатыАренды КАК СрокОплатыАренды,
	|		ВТ_СводныеДанные.СтатусОплаты КАК СтатусОплаты,
	|		ВТ_СводныеДанные.ТипАренднойПлаты КАК ТипАренднойПлаты,
	|		ВТ_СводныеДанные.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|		ВТ_СводныеДанные.ЭтоХвостОплаты КАК ЭтоХвостОплаты,
	|		МАКСИМУМ(КурсыВалютДляРасчетовПоАренде.Период) КАК Период
	|	ИЗ
	|		ВТ_СводныеДанные КАК ВТ_СводныеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовПоАренде КАК КурсыВалютДляРасчетовПоАренде
	|			ПО ВТ_СводныеДанные.ДоговорКонтрагента = КурсыВалютДляРасчетовПоАренде.ДоговорКонтрагента
	|				И (КурсыВалютДляРасчетовПоАренде.Период <= ВТ_СводныеДанные.ДатаОплаты)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_СводныеДанные.Организация,
	|		ВТ_СводныеДанные.Контрагент,
	|		ВТ_СводныеДанные.ДоговорКонтрагента,
	|		ВТ_СводныеДанные.СтавкаНДС,
	|		ВТ_СводныеДанные.СтруктурнаяЕдиница,
	|		ВТ_СводныеДанные.ДатаНачалаАренды,
	|		ВТ_СводныеДанные.ДатаОкончанияАренды,
	|		ВТ_СводныеДанные.ДатаАктаЗаключения,
	|		ВТ_СводныеДанные.ДатаОплаты,
	|		ВТ_СводныеДанные.Комментарий,
	|		ВТ_СводныеДанные.СтатусОплаты,
	|		ВТ_СводныеДанные.ТипАренднойПлаты,
	|		ВТ_СводныеДанные.ПлатежныйДокумент,
	|		ВТ_СводныеДанные.ЭтоХвостОплаты,
	|		ВТ_СводныеДанные.СрокОплатыАренды,
	|		ВТ_СводныеДанные.СуммаПланБезналичные,
	|		ВТ_СводныеДанные.СуммаПланБезналичныеВал,
	|		ВТ_СводныеДанные.СуммаПланНаличные,
	|		ВТ_СводныеДанные.СуммаПланНаличныеВал,
	|		ВТ_СводныеДанные.ЧислоОплатыАренды) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовПоАренде КАК КурсыВалютДляРасчетовПоАренде
	|		ПО ВложенныйЗапрос.ДоговорКонтрагента = КурсыВалютДляРасчетовПоАренде.ДоговорКонтрагента
	|			И ВложенныйЗапрос.Период = КурсыВалютДляРасчетовПоАренде.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.ТипАренднойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПроизводственныйКалендарь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Статусы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Договоры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СводныеДанные";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	
	Инд = 1;
	МассивТ = Новый Массив;
	МассивТ.Добавить(Тип("ДокументСсылка.РасходИзБанка"));
	МассивТ.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
	
	ОписаниеТиповЧисло 		= Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 2));
	ОписаниеТиповДокументы 	= Новый ОписаниеТипов(МассивТ);
	
	Пока Выборка.Следующий() Цикл
		
		
		ДобавитьКолонкиПоДатеОплаты(Договоры, Выборка.ДатаОплаты	, ОписаниеТиповЧисло, ОписаниеТиповДокументы);
		
		мДатаОплатыПервыйМесяц = Выборка.ДатаНачалаАренды + (Выборка.СрокОплатыАренды * 86400);
		
		мКурсВалюты = ПроцедурыНачисления.ПолучитьКурсВалютыПоДоговору(Выборка.ДатаОплаты, Выборка).Курс;
		
		// когда авансом, кусок от даты начала аренды до следующего после нее месяца ("хвост оплаты")
		Если Выборка.ДоговорКонтрагента.ПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Следующий
				И Выборка.ДатаНачалаАренды < ДобавитьМесяц(НачалоПериода, 1)
				И (НЕ Выборка.ДатаНачалаАренды < НачалоПериода)
				И (НЕ Выборка.ЭтоХвостОплаты)
				И НЕ ЗначениеЗаполнено(Выборка.ПлатежныйДокумент) Тогда
			
			ДобавитьКолонкиПоДатеОплаты(Договоры, мДатаОплатыПервыйМесяц, ОписаниеТиповЧисло, ОписаниеТиповДокументы);
				
			НСтрока = Договоры.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока, Выборка);
			
			НСтрока.ЭтоХвостОплаты = Истина;
			
			СуммаХвост = Выборка.СуммаПланБезналичныеВал + Выборка.СуммаПланНаличныеВал;
			СуммаХвост = Окр(СуммаХвост * (1 - (День(Выборка.ДатаНачалаАренды) - 1) / День(КонецМесяца(Выборка.ДатаНачалаАренды))), 2);
			//НСтрока["Дата_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] = СуммаХвост * мКурсВалюты;
			НСтрока["Дата_" + Формат(мДатаОплатыПервыйМесяц, "ДФ=yyyyMMdd")] = СуммаХвост * мКурсВалюты;
			
			НСтрока.НомерСтроки 	= Инд;
			НСтрока.Использование 	= Истина;
			
			Инд = Инд + 1;

		КонецЕсли;
		
		
		НСтрока = Договоры.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, Выборка);
		Если НЕ Выборка.ЭтоХвостОплаты Тогда
			НСтрока["Дата_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] =
																(Выборка.СуммаПланБезналичныеВал + Выборка.СуммаПланНаличныеВал) * мКурсВалюты;
			НСтрока["Документ_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] = Выборка.ПлатежныйДокумент;
		Иначе
			ДобавитьКолонкиПоДатеОплаты(Договоры, мДатаОплатыПервыйМесяц	, ОписаниеТиповЧисло, ОписаниеТиповДокументы);
			СуммаХвост = Выборка.СуммаПланБезналичныеВал + Выборка.СуммаПланНаличныеВал;
			СуммаХвост = Окр(СуммаХвост * (1 - (День(Выборка.ДатаНачалаАренды) - 1) / День(КонецМесяца(Выборка.ДатаНачалаАренды))), 2);
			НСтрока["Дата_" + Формат(мДатаОплатыПервыйМесяц, "ДФ=yyyyMMdd")] = СуммаХвост * мКурсВалюты;
			НСтрока["Документ_" + Формат(мДатаОплатыПервыйМесяц, "ДФ=yyyyMMdd")] = Выборка.ПлатежныйДокумент;
		КонецЕсли;
		НСтрока.НомерСтроки 	= Инд;
		НСтрока.Использование 	= Истина;
		
		Инд = Инд + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиПоДатеОплаты(Договоры, мДатаОплаты, ОписаниеТиповЧисло, ОписаниеТиповДокументы)

	Если НЕ Договоры.Колонки.Найти("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd")) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаВставлена = Ложь;
		
	пИнд = 0;
	Для Каждого Колонка Из Договоры.Колонки Цикл
		
		Если Лев(Колонка.Имя, 5) = "Дата_"
				И Дата(Прав(Колонка.Имя, 8)) > мДатаОплаты Тогда
			
			Договоры.Колонки.Вставить(пИнд, "Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповЧисло);
			//Колонка = Договоры.Колонки.Вставить(пИнд, Формат(мДатаОплаты, "ДФ=dd.MM.yyyy"));
			//Колонка.Имя = "Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd");
			
			Договоры.Колонки.Вставить(пИнд + 1, "Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповДокументы);
			//Колонка2 = Договоры.Колонки.Вставить(пИнд + 1, "Документ (" + Формат(мДатаОплаты, "ДФ=dd.MM.yyyy") + ")");
			//Колонка2.Имя = "Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd");
			
			КолонкаВставлена = Истина;
			
			Прервать;
		КонецЕсли;
		
		пИнд = пИнд + 1;
	КонецЦикла;
	
	Если (НЕ КолонкаВставлена)
			И Договоры.Колонки.Найти("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd")) = Неопределено Тогда
		Договоры.Колонки.Добавить("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповЧисло);
		//Колонка = Договоры.Колонки.Добавить("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), Формат(мДатаОплаты, "ДФ=dd.MM.yyyy"));
		
		Договоры.Колонки.Добавить("Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповДокументы);
		//Колонка2 = Договоры.Колонки.Добавить("Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), "Документ (" +
		//																							Формат(мДатаОплаты, "ДФ=dd.MM.yyyy") + ")");
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьДанныеПлатКалендаряПоставщикам(Долги,Дата)
	//Состояние("Расчет данных календаря оплат поставщикам");
	Если Не ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Не указана дата");
		Возврат;
	КонецЕсли;
	
	//Запрос = Новый Запрос;	
	//Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период", КонецДня(Дата));
	СтруктураПараметров.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	//+++АК susk
	СтруктураПараметров.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	ЗапросКонтр = Новый Запрос;
	ЗапросКонтр.Текст = "ВЫБРАТЬ
	                    |	Контрагенты.Ссылка,
	                    |	Контрагенты.КоличествоДнейОтсрочки КАК КоличествоДнейОтсрочки
	                    |ИЗ
	                    |	Справочник.Контрагенты КАК Контрагенты
	                    |ГДЕ
	                    |	Контрагенты.СтатьяДвиженияДенежныхСредств.Код = ""120110""
	                    |ИТОГИ
	                    |	МАКСИМУМ(КоличествоДнейОтсрочки)
	                    |ПО
	                    |	ОБЩИЕ";
						
	Результат = ЗапросКонтр.Выполнить();
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщийИтог.Следующий();						
	МаксимальнаяОтсрочка = ВыборкаОбщийИтог.КоличествоДнейОтсрочки;					
						
	Выборка = ВыборкаОбщийИтог.Выбрать();
	
	МассивКонтр = Новый Массив;
	
	//Если НЕ Контрагент.Пустая() Тогда
	//	Если Контрагент.СтатьяДвиженияДенежныхСредств.Код = "120110" Тогда
	//		МассивКонтр.Добавить(Контрагент);
	//	КонецЕсли;
	//Иначе	
		Пока Выборка.Следующий() Цикл
			МассивКонтр.Добавить(Выборка.Ссылка);
		КонецЦикла;
	//КонецЕсли;
	СтруктураПараметров.Вставить("МаксимальнаяОтсрочка", -60);
	СтруктураПараметров.Вставить("СписокКонтр", МассивКонтр);
	СтруктураПараметров.Вставить("СтатьяДДСВРасход", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110"));
	//---АК susk
	
	СтруктураПараметров.Вставить("Текст", "ВЫБРАТЬ
	                                      |	СУММА(ЕСТЬNULL(Долги.СуммаДолга, 0) - ЕСТЬNULL(ОтгрузкаЗаПериодОтсрочки.СуммаОтгрузокЗаПериодОтсрочки, 0)) КАК СуммаКОплате,
	                                      |	Долги.Организация КАК Организация,
	                                      |	Долги.Контрагент КАК Контрагент
	                                      |ИЗ
	                                      |	(ВЫБРАТЬ
	                                      |		ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Организации) КАК Организация,
	                                      |		ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Контрагенты) КАК Контрагент,
	                                      |		-СУММА(ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0)) КАК СуммаДолга
	                                      |	ИЗ
	                                      |		РегистрБухгалтерии.Финансовый.Остатки(
	                                      |				&Период,
	                                      |				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщиками)),
	                                      |				,
	                                      |				((ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации)) = &Организация
	                                      |					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	                                      |					И (ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты) В (&СписокКонтр)
	                                      |						ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))) КАК ФинансовыйОстатки
	                                      |	
	                                      |	СГРУППИРОВАТЬ ПО
	                                      |		ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Организации),
	                                      |		ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Контрагенты)
	                                      |	
	                                      |	ИМЕЮЩИЕ
	                                      |		-СУММА(ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0)) > 0) КАК Долги
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                                      |			ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоКт1 КАК Справочник.Организации) КАК Организация,
	                                      |			ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоКт2 КАК Справочник.Контрагенты) КАК Контрагент,
	                                      |			СУММА(ЕСТЬNULL(ФинансовыйОборотыДтКт.СуммаОборот, 0)) КАК СуммаОтгрузокЗаПериодОтсрочки
	                                      |		ИЗ
	                                      |			РегистрБухгалтерии.Финансовый.ОборотыДтКт(
	                                      |					ДОБАВИТЬКДАТЕ(&Период, День, &МаксимальнаяОтсрочка),
	                                      |					&Период,
	                                      |					Регистратор,
	                                      |					,
	                                      |					,
	                                      |					СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщиками)),
	                                      |					,
	                                      |					(ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.Организации)) = &Организация
	                                      |						ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                                      |							И ВЫРАЗИТЬ(СубконтоКт2 КАК Справочник.Контрагенты) В (&СписокКонтр)
	                                      |						ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ФинансовыйОборотыДтКт
	                                      |		ГДЕ
	                                      |			НАЧАЛОПЕРИОДА(ФинансовыйОборотыДтКт.Регистратор.Дата, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -ФинансовыйОборотыДтКт.СубконтоКт2.КоличествоДнейОтсрочки)
	                                      |		
	                                      |		СГРУППИРОВАТЬ ПО
	                                      |			ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоКт1 КАК Справочник.Организации),
	                                      |			ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоКт2 КАК Справочник.Контрагенты)) КАК ОтгрузкаЗаПериодОтсрочки
	                                      |		ПО Долги.Организация = ОтгрузкаЗаПериодОтсрочки.Организация
	                                      |			И Долги.Контрагент = ОтгрузкаЗаПериодОтсрочки.Контрагент
	                                      |
	                                      |СГРУППИРОВАТЬ ПО
	                                      |	Долги.Организация,
	                                      |	Долги.Контрагент
	                                      |
	                                      |ИМЕЮЩИЕ
	                                      |	СУММА(ЕСТЬNULL(Долги.СуммаДолга, 0) - ЕСТЬNULL(ОтгрузкаЗаПериодОтсрочки.СуммаОтгрузокЗаПериодОтсрочки, 0)) > 0");
	Запрос = Новый Запрос(СтруктураПараметров.Текст);										  
	Для каждого КлЗначение из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(КлЗначение.Ключ,КлЗначение.Значение);
	КонецЦикла;	
	Долги = Запрос.Выполнить().Выгрузить();
	//Долги = ПолныеПрава.ВыполнитьЗапрос(СтруктураПараметров).Выгрузить();
КонецПроцедуры

//-ГО

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетамиИнфоком.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);

