////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет запуск рассчета зарплаты сотрудников (Тилси)//+++АК mika 2018.07.10 ИП-00018685
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров для рассчета запплаты
//                         ДатаНачала    - <Тип.Дата> - Дата начала рассчета
//                         ДатаОкончания - <Тип.Дата>  - Дата окончания рассчета
//                         Сотрудник - <Тип.СправочникСсылка>, <Тип.СписокЗначений> - сотрудник или список сотрудников  
//
Процедура РассчитатьЗарплатуСотрудниковТилси(СтруктураПараметров) Экспорт
	
	//•• Удалить после отладки ↓
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяОбработкаСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ОтладкаРасчетЗарплатыТилси");
	
	Если ЗначениеЗаполнено(ВнешняяОбработкаСсылка) Тогда
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВнешняяОбработкаСсылка.ХранилищеВнешнейОбработки.Получить());
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
		
		ВнешняяОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки);
		
		ВнешняяОбработкаОбъект.ОчиститьРегистрЗарплатыПоОтборуТилси(СтруктураПараметров);
		
		ВнешняяОбработкаОбъект.РассчитатьЗарплатуСотрудниковТилсиОсновныеНачисления(СтруктураПараметров);
		ВнешняяОбработкаОбъект.РассчитатьЗарплатуСотрудниковТилсиБонусы(СтруктураПараметров);
		
		Возврат; 
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	//•• Удалить после отладки ↑

	ОчиститьРегистрЗарплатыПоОтборуТилси(СтруктураПараметров);
	
	РассчитатьЗарплатуСотрудниковТилсиОсновныеНачисления(СтруктураПараметров);
	
	РассчитатьЗарплатуСотрудниковТилсиБонусы(СтруктураПараметров);
	
КонецПроцедуры

// Выполняет запуск рассчета основных начислений сотрудников (Тилси)//+++АК mika 2018.07.10 ИП-00018685
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров для рассчета запплаты
//                         ДатаНачала    - <Тип.Дата> - Дата начала рассчета
//                         ДатаОкончания - <Тип.Дата>  - Дата окончания рассчета
//                         Сотрудник - <Тип.СправочникСсылка>, <Тип.СписокЗначений> - сотрудник или список сотрудников  
//
Процедура РассчитатьЗарплатуСотрудниковТилсиОсновныеНачисления(СтруктураПараметров) Экспорт
	
	//Получение параметров расчета зарплаты (Тилси)
	ПараметрыДляРасчета = РегистрыСведений.ПараметрыРасчетаЗпТилси.ПолучитьПоследнее(СтруктураПараметров.ДатаНачала, Новый Структура("Использовать", Истина));
	
	 //Построение запроса основных начислений 
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаТилсиОсновныеНачисления();
	
	Запрос.УстановитьПараметр("Организация", ПараметрыДляРасчета.Организация);
	Запрос.УстановитьПараметр("ПустаяДата",  Дата(1,1,1));
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("ВсеСотрудники", Не СтруктураПараметров.Свойство("Сотрудник"));
	Запрос.УстановитьПараметр("Сотрудник", ?(СтруктураПараметров.Свойство("Сотрудник"), СтруктураПараметров.Сотрудник, Неопределено));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаОсновныхНачислений = МассивРезультатов[8].Выгрузить();
	ТаблицаПереработки        = МассивРезультатов[9].Выгрузить();

	Если ТаблицаОсновныхНачислений.Количество() > 0 Тогда
		
		//Создание итоговой таблицы основных начислений 
		ТаблицаРасчета = Новый ТаблицаЗначений;
		ТаблицаРасчета.Колонки.Добавить("ДатаНачисления"  , Новый ОписаниеТипов("Дата"));
		ТаблицаРасчета.Колонки.Добавить("ФизЛицо"		  , Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаРасчета.Колонки.Добавить("ТорговаяТочка"   , Новый  ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТаблицаРасчета.Колонки.Добавить("Бонус"		      , Новый ОписаниеТипов("Число"));
		ТаблицаРасчета.Колонки.Добавить("БонусСНДФЛ"	  , Новый ОписаниеТипов("Число"));
		ТаблицаРасчета.Колонки.Добавить("КоличествоЧасов" , Новый ОписаниеТипов("Число"));
		ТаблицаРасчета.Колонки.Добавить("ТипРабот"        , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРаботДляРасчетаЗП"));
		
		//Начисление основной ставки
		Для каждого СтрокаНачисления Из ТаблицаОсновныхНачислений Цикл 		
			
			//Начисление выход за час 
			Если СтрокаНачисления.ТипВыхода = "Полный" Тогда
				Бонус    = ПараметрыДляРасчета.СтавкаЗаЧасСотрудникТилси * Мин(13,Окр(СтрокаНачисления.Отработано,0,РежимОкругления.Окр15как10));
				ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ВыходЗаЧас;
				КоличествоЧасов = Окр(СтрокаНачисления.Отработано,0,РежимОкругления.Окр15как10);
			ИначеЕсли СтрокаНачисления.ТипВыхода = "Стажер" 
						 И (ЗначениеЗаполнено(СтрокаНачисления.Приход) ИЛИ ЗначениеЗаполнено(СтрокаНачисления.Уход)) Тогда
				Бонус    = ПараметрыДляРасчета.СтавкаЗаВыходСтажерТилси;
				ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Стажер;
				КоличествоЧасов = СтрокаНачисления.ПоГрафику; 
			Иначе
				Бонус = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Бонус) Тогда
				
				НоваяСтрокаРасчета = ТаблицаРасчета.Добавить();
				
				НоваяСтрокаРасчета.ДатаНачисления   = СтрокаНачисления.Период;
				НоваяСтрокаРасчета.ФизЛицо          = СтрокаНачисления.Сотрудник;
				НоваяСтрокаРасчета.ТорговаяТочка    = СтрокаНачисления.ТорговаяТочка;
				НоваяСтрокаРасчета.ТипРабот         = ТипРабот;
				НоваяСтрокаРасчета.КоличествоЧасов  = КоличествоЧасов; 
				НоваяСтрокаРасчета.Бонус            = Бонус;
				НоваяСтрокаРасчета.БонусСНДФЛ       = Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10)
				
			КонецЕсли;
			
			Если СтрокаНачисления.ТипВыхода = "Стажер" Тогда
				Продолжить;
			КонецЕсли;
			
			//Доплаты за работу в развитии
			Если ЗначениеЗаполнено(СтрокаНачисления.РаботаВРазвитии) Тогда
				
				Если  СтрокаНачисления.ДнейРазвитие > 0  И СтрокаНачисления.ДнейРазвитие < 91 Тогда
					Бонус = ПараметрыДляРасчета.ДоплатаЗаРаботуРазвитие_1_90;
				ИначеЕсли СтрокаНачисления.ДнейРазвитие > 90 Тогда	
					Бонус = ПараметрыДляРасчета.ДоплатаЗаРаботуРазвитие_90_0;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Бонус) Тогда
					
					НоваяСтрокаРасчета = ТаблицаРасчета.Добавить();
					
					НоваяСтрокаРасчета.ДатаНачисления   = СтрокаНачисления.Период;
					НоваяСтрокаРасчета.ФизЛицо        = СтрокаНачисления.Сотрудник;
					НоваяСтрокаРасчета.ТорговаяТочка    = СтрокаНачисления.ТорговаяТочка;
					НоваяСтрокаРасчета.ТипРабот         = Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаРаботуВРазвитии;
					НоваяСтрокаРасчета.Бонус            = Бонус;
					НоваяСтрокаРасчета.БонусСНДФЛ       = Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
				
				КонецЕсли;
				
			//Доплаты за работу в рознице
			Иначе  

				Бонус = ПараметрыДляРасчета.ДоплатаЗаРаботуВРознице;
				
				Если ЗначениеЗаполнено(Бонус) Тогда
					
					НоваяСтрокаРасчета = ТаблицаРасчета.Добавить();
					
					НоваяСтрокаРасчета.ДатаНачисления   = СтрокаНачисления.Период;
					НоваяСтрокаРасчета.ФизЛицо          = СтрокаНачисления.Сотрудник;
					НоваяСтрокаРасчета.ТорговаяТочка    = СтрокаНачисления.ТорговаяТочка;
					НоваяСтрокаРасчета.ТипРабот         = Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаРаботуВРознице;
					НоваяСтрокаРасчета.Бонус            = Бонус;
					НоваяСтрокаРасчета.БонусСНДФЛ       = Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Начисление бонуса за переработку
		Для каждого СтрокаНачисления Из ТаблицаПереработки Цикл
			
			КвоЧасовПереработки = Мин(5,Окр(Мин(13,СтрокаНачисления.ОтработаноДень) - СтрокаНачисления.ПоГрафику,0, РежимОкругления.Окр15как10)); 
			ОтработаноПолных    = Окр(Мин(13,СтрокаНачисления.ОтработаноДень),0, РежимОкругления.Окр15как10);
			
			//Выплаты за только за фактическую переработку более 8-ми часов
			Если ОтработаноПолных > 8 Тогда
				
				СтруктураПереработки = Новый Структура("ДоплатаЗаПереработку_9_10, ДоплатаЗаПереработку_11_00",0,0);
				
				Пока КвоЧасовПереработки <> 0 Цикл
					Если КвоЧасовПереработки < 3 Тогда
						СтруктураПереработки.ДоплатаЗаПереработку_9_10 = СтруктураПереработки.ДоплатаЗаПереработку_9_10 + 1;
					Иначе
						СтруктураПереработки.ДоплатаЗаПереработку_11_00 = СтруктураПереработки.ДоплатаЗаПереработку_11_00 + 1;
					КонецЕсли;
					КвоЧасовПереработки = КвоЧасовПереработки - 1;
				КонецЦикла;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаСоответствия Из СтруктураПереработки Цикл 
				
				Если СтрокаСоответствия.Ключ = "ДоплатаЗаПереработку_9_10" Тогда  
					Бонус    = СтрокаСоответствия.Значение * ПараметрыДляРасчета.ДоплатаЗаПереработку_9_10;
					ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_9_10;
				ИначеЕсли СтрокаСоответствия.Ключ = "ДоплатаЗаПереработку_11_00" Тогда
					Бонус    = СтрокаСоответствия.Значение * ПараметрыДляРасчета.ДоплатаЗаПереработку_11_00;
					ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_11;
				КонецЕсли;
				
				Если Бонус > 0 Тогда
					
					НоваяСтрокаРасчета = ТаблицаРасчета.Добавить();
					
					НоваяСтрокаРасчета.ДатаНачисления   = СтрокаНачисления.Период;
					НоваяСтрокаРасчета.ФизЛицо          = СтрокаНачисления.Сотрудник;
					НоваяСтрокаРасчета.ТорговаяТочка    = СтрокаНачисления.ТорговаяТочка;
					НоваяСтрокаРасчета.ТипРабот         = ТипРабот;
					НоваяСтрокаРасчета.КоличествоЧасов  = СтрокаСоответствия.Значение;
					НоваяСтрокаРасчета.Бонус            = Бонус;
					НоваяСтрокаРасчета.БонусСНДФЛ       = Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10)
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//Запись данных в регистр Запрплата продавцов
		Для каждого СтрокаРасчета Из ТаблицаРасчета Цикл
			
			СтруктураДанных = Новый Структура();
			
			Для каждого Колонка Из ТаблицаРасчета.Колонки Цикл
				СтруктураДанных.Вставить(Колонка.Имя, СтрокаРасчета[Колонка.Имя]);      
			КонецЦикла;
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запуск рассчета бонусов сотрудников (Тилси)//+++АК mika 2018.07.10 ИП-00018685
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров для рассчета запплаты
//                         ДатаНачала    - <Тип.Дата> - Дата начала рассчета
//                         ДатаОкончания - <Тип.Дата>  - Дата окончания рассчета
//                         Сотрудник - <Тип.СправочникСсылка>, <Тип.СписокЗначений> - сотрудник или список сотрудников  
//
Процедура РассчитатьЗарплатуСотрудниковТилсиБонусы(СтруктураПараметров) Экспорт
	
	Возврат;
	
	//Отладка
	Сообщить("Идет отладка... Уважаемые пользователи не запускайте расчет зарплаты сотрудников (Тилси)!");
	
КонецПроцедуры

// Возвращает основной запрос по основным начислениям (Тилси) 
//
// Возвращаемое значение:
//   <Тип.Строка>  - Текст запроса
//
Функция ПолучитьТекстЗапросаТилсиОсновныеНачисления()  //+++АК mika 2018.07.09 ИП-00018685

	//Сообщить("Тест запроса");
	Возврат
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	СтруктурныеЕдиницы.ФактическаяДатаПередачи КАК ДатаОкончанияРазвития,
	|	СтруктурныеЕдиницы.ТипРозничнойТочки
	|ПОМЕСТИТЬ ВТ_ПериодРазвития
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельРаботыТилси.ТорговаяТочка,
	|	МИНИМУМ(ТабельРаботыТилси.Период) КАК Период
	|ПОМЕСТИТЬ ДатыНачалаРаботыВРазвитииГрафик
	|ИЗ
	|	РегистрСведений.ТабельРаботыТилси КАК ТабельРаботыТилси
	|ГДЕ
	|	ТабельРаботыТилси.ТорговаяТочка.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботыТилси.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб_Периоды.ТорговаяТочка,
	|	МАКСИМУМ(Таб_Периоды.ДатаНачалаРазвития) КАК ДатаНачалаРазвития,
	|	МАКСИМУМ(Таб_Периоды.ДатаОкончанияРазвития) КАК ДатаОкончанияРазвития
	|ПОМЕСТИТЬ ДатыНачалаРаботыВРазвитии
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНачалаРаботыВРазвитииГрафик.Период КАК ДатаНачалаРазвития,
	|		&ПустаяДата КАК ДатаОкончанияРазвития,
	|		ДатыНачалаРаботыВРазвитииГрафик.ТорговаяТочка КАК ТорговаяТочка
	|	ИЗ
	|		ДатыНачалаРаботыВРазвитииГрафик КАК ДатыНачалаРаботыВРазвитииГрафик
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ПустаяДата,
	|		ВТ_ПериодРазвития.ДатаОкончанияРазвития,
	|		ВТ_ПериодРазвития.СтруктурнаяЕдиница
	|	ИЗ
	|		ВТ_ПериодРазвития КАК ВТ_ПериодРазвития) КАК Таб_Периоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб_Периоды.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОтметкиТилсиРег.Приход, ДЕНЬ) КАК Период,
	|	ОтметкиТилсиРег.Сотрудник,
	|	МИНИМУМ(ОтметкиТилсиРег.Приход) КАК Приход,
	|	ОтметкиТилсиРег.НомерТочки,
	|	МАКСИМУМ(ОтметкиТилсиРег.Уход) КАК Уход,
	|	СУММА(ВЫБОР
	|			КОГДА ОтметкиТилсиРег.Приход <> &ПустаяДата
	|					И ОтметкиТилсиРег.Уход <> &ПустаяДата
	|				ТОГДА ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ОтметкиТилсиРег.Приход, ОтметкиТилсиРег.Уход, СЕКУНДА) / 3600 КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтметкиТилсиРег.Приход > ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтметкиТилсиРег.Приход, ДЕНЬ), ЧАС, 11)
	|					ИЛИ ОтметкиТилсиРег.Уход > ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтметкиТилсиРег.Уход, ДЕНЬ), ЧАС, 11)
	|				ТОГДА 1
	|			КОГДА ОтметкиТилсиРег.Приход < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтметкиТилсиРег.Приход, ДЕНЬ), ЧАС, 9)
	|					ИЛИ ОтметкиТилсиРег.Уход < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтметкиТилсиРег.Уход, ДЕНЬ), ЧАС, 9)
	|				ТОГДА 0
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИндексБонуса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтметкиТилсиРег.Фото1 <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|					ИЛИ ОтметкиТилсиРег.Фото2 <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|					ИЛИ ОтметкиТилсиРег.Фото3 <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьФото,
	|	МАКСИМУМ(ЕСТЬNULL(СотрудникиОрганизаций.ДатаУвольнения, &ПустаяДата)) КАК ДатаУвольнения,
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Код,
	|	СотрудникиОрганизаций.ДатаУвольненияИзКомпании,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботуВКомпанию,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботу
	|ПОМЕСТИТЬ ВТ_ОтметкиПоТТ
	|ИЗ
	|	РегистрСведений.ОтметкиТилси КАК ОтметкиТилсиРег
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ОтметкиТилсиРег.Сотрудник = СотрудникиОрганизаций.Физлицо
	|ГДЕ
	|	ОтметкиТилсиРег.Приход МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (&ВсеСотрудники
	|			ИЛИ ОтметкиТилсиРег.Сотрудник В (&Сотрудник))
	|	И СотрудникиОрганизаций.Организация = &Организация
	|	И НЕ СотрудникиОрганизаций.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОтметкиТилсиРег.Приход, ДЕНЬ),
	|	ОтметкиТилсиРег.Сотрудник,
	|	ОтметкиТилсиРег.НомерТочки,
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Код,
	|	СотрудникиОрганизаций.ДатаУвольненияИзКомпании,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботуВКомпанию,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтметкиПоТТ.Период,
	|	ВТ_ОтметкиПоТТ.Сотрудник,
	|	МИНИМУМ(ВТ_ОтметкиПоТТ.Приход) КАК Приход,
	|	МАКСИМУМ(ВТ_ОтметкиПоТТ.Уход) КАК Уход,
	|	МАКСИМУМ(ВТ_ОтметкиПоТТ.ИндексБонуса) КАК ИндексБонуса,
	|	СУММА(ВТ_ОтметкиПоТТ.ОтработаноФакт) КАК ОтработаноФакт,
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	МАКСИМУМ(ВТ_ОтметкиПоТТ.ЕстьФото) КАК ЕстьФото
	|ПОМЕСТИТЬ ВТ_ОтработаноФакт
	|ИЗ
	|	ВТ_ОтметкиПоТТ КАК ВТ_ОтметкиПоТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ВТ_ОтметкиПоТТ.НомерТочки = СтруктурныеЕдиницы.НомерТочки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ОтметкиПоТТ.ДатаУвольнения = &ПустаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_ОтметкиПоТТ.Период <= ВТ_ОтметкиПоТТ.ДатаУвольнения
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОтметкиПоТТ.Период,
	|	ВТ_ОтметкиПоТТ.Сотрудник,
	|	СтруктурныеЕдиницы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтработаноФакт.Период,
	|	ВТ_ОтработаноФакт.Сотрудник,
	|	ВТ_ОтработаноФакт.Приход,
	|	ВТ_ОтработаноФакт.Уход,
	|	ВТ_ОтработаноФакт.ИндексБонуса,
	|	ВТ_ОтработаноФакт.ОтработаноФакт,
	|	ВТ_ОтработаноФакт.ТорговаяТочка,
	|	ВТ_ОтработаноФакт.ЕстьФото
	|ПОМЕСТИТЬ ВТ_ОтработаноИтог
	|ИЗ
	|	ВТ_ОтработаноФакт КАК ВТ_ОтработаноФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельРаботыТилси.Период,
	|	ТабельРаботыТилси.Сотрудник,
	|	ТабельРаботыТилси.ТорговаяТочка,
	|	ТабельРаботыТилси.КоличествоЧасов КАК ПоГрафику,
	|	ТабельРаботыТилси.Тип КАК ТипВыхода
	|ПОМЕСТИТЬ ВТ_ТабельработИтог
	|ИЗ
	|	РегистрСведений.ТабельРаботыТилси КАК ТабельРаботыТилси
	|ГДЕ
	|	ТабельРаботыТилси.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыТилси.Вид = ""Выход""
	|	И (&ВсеСотрудники
	|			ИЛИ ТабельРаботыТилси.Сотрудник В (&Сотрудник))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ТабельработИтог.Период, ВТ_ОтработаноИтог.Период) КАК Период,
	|	ЕСТЬNULL(ВТ_ТабельработИтог.Сотрудник, ВТ_ОтработаноИтог.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_ТабельработИтог.ТорговаяТочка, ВТ_ОтработаноИтог.ТорговаяТочка) КАК ТорговаяТочка,
	|	ЕСТЬNULL(ВТ_ТабельработИтог.ПоГрафику, 0) КАК ПоГрафику,
	|	ЕСТЬNULL(ВТ_ТабельработИтог.ТипВыхода, ""Полный"") КАК ТипВыхода,
	|	ЕСТЬNULL(ВТ_ОтработаноИтог.ОтработаноФакт, 0) КАК Отработано,
	|	ЕСТЬNULL(ВТ_ОтработаноИтог.Приход, &ПустаяДата) КАК Приход,
	|	ЕСТЬNULL(ВТ_ОтработаноИтог.Уход, &ПустаяДата) КАК Уход,
	|	ВТ_ОтработаноИтог.ЕстьФото,
	|	ВТ_ОтработаноИтог.ИндексБонуса
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	ВТ_ОтработаноИтог КАК ВТ_ОтработаноИтог
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТабельработИтог КАК ВТ_ТабельработИтог
	|		ПО ВТ_ОтработаноИтог.Период = ВТ_ТабельработИтог.Период
	|			И ВТ_ОтработаноИтог.ТорговаяТочка = ВТ_ТабельработИтог.ТорговаяТочка
	|			И ВТ_ОтработаноИтог.Сотрудник = ВТ_ТабельработИтог.Сотрудник
	|ГДЕ
	|	(ВТ_ОтработаноИтог.ОтработаноФакт <> 0
	|			ИЛИ ВТ_ТабельработИтог.ТипВыхода = ""Стажер"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновныеНачисления.Период,
	|	ВТ_ОсновныеНачисления.Сотрудник,
	|	ВТ_ОсновныеНачисления.ТорговаяТочка,
	|	ВТ_ОсновныеНачисления.ПоГрафику,
	|	ВТ_ОсновныеНачисления.ТипВыхода,
	|	ВТ_ОсновныеНачисления.Отработано,
	|	ВТ_ОсновныеНачисления.Приход,
	|	ВТ_ОсновныеНачисления.Уход,
	|	ВТ_ОсновныеНачисления.ЕстьФото,
	|	ВТ_ОсновныеНачисления.ИндексБонуса,
	|	ВЫБОР
	|		КОГДА ДатыНачалаРаботыВРазвитии.ДатаОкончанияРазвития = &ПустаяДата
	|				ИЛИ ВТ_ОсновныеНачисления.Период < ДатыНачалаРаботыВРазвитии.ДатаОкончанияРазвития
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РаботаВРазвитии,
	|	РАЗНОСТЬДАТ(ДатыНачалаРаботыВРазвитии.ДатаНачалаРазвития, ВТ_ОсновныеНачисления.Период, ДЕНЬ) + 1 КАК ДнейРазвитие
	|ИЗ
	|	ВТ_ОсновныеНачисления КАК ВТ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыНачалаРаботыВРазвитии КАК ДатыНачалаРаботыВРазвитии
	|		ПО ВТ_ОсновныеНачисления.ТорговаяТочка = ДатыНачалаРаботыВРазвитии.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб_Переработка.Период,
	|	Таб_Переработка.Сотрудник,
	|	Таб_Переработка.Отработано,
	|	Таб_Переработка.ОтработаноДень,
	|	Таб_Переработка.ПоГрафику,
	|	Таб_Переработка.Переработка,
	|	Таб_Переработка.ИндексБонуса,
	|	Таб_ПоследниеПосещения.ТорговаяТочка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(Таб_ОтработаноИтог.Период, Таб_ТабельработИтог.Период) КАК Период,
	|		ЕСТЬNULL(Таб_ОтработаноИтог.Сотрудник, Таб_ТабельработИтог.Сотрудник) КАК Сотрудник,
	|		Таб_ОтработаноИтог.ОтработаноФакт КАК Отработано,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Таб_ОтработаноИтог.Приход, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Таб_ОтработаноИтог.Уход, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ВЫРАЗИТЬ(РАЗНОСТЬДАТ(Таб_ОтработаноИтог.Приход, Таб_ОтработаноИтог.Уход, СЕКУНДА) / 3600 КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтработаноДень,
	|		ЕСТЬNULL(Таб_ТабельработИтог.ПоГрафику, 0) КАК ПоГрафику,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Таб_ТабельработИтог.ПоГрафику, 0) > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(Таб_ОтработаноИтог.Приход, &ПустаяДата) <> &ПустаяДата
	|								И ЕСТЬNULL(Таб_ОтработаноИтог.Уход, &ПустаяДата) <> &ПустаяДата
	|							ТОГДА ВЫРАЗИТЬ(РАЗНОСТЬДАТ(Таб_ОтработаноИтог.Приход, Таб_ОтработаноИтог.Уход, СЕКУНДА) / 3600 КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ 0
	|					КОНЕЦ - Таб_ТабельработИтог.ПоГрафику
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Переработка,
	|		Таб_ОтработаноИтог.ИндексБонуса КАК ИндексБонуса
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_ОтработаноИтог.Период КАК Период,
	|			ВТ_ОтработаноИтог.Сотрудник КАК Сотрудник,
	|			МИНИМУМ(ВТ_ОтработаноИтог.Приход) КАК Приход,
	|			МАКСИМУМ(ВТ_ОтработаноИтог.Уход) КАК Уход,
	|			МАКСИМУМ(ВТ_ОтработаноИтог.ИндексБонуса) КАК ИндексБонуса,
	|			СУММА(ВТ_ОтработаноИтог.ОтработаноФакт) КАК ОтработаноФакт,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ОтработаноИтог.ТорговаяТочка) КАК ТорговаяТочка,
	|			МАКСИМУМ(ВТ_ОтработаноИтог.ЕстьФото) КАК ЕстьФото
	|		ИЗ
	|			ВТ_ОтработаноИтог КАК ВТ_ОтработаноИтог
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ОтработаноИтог.Период,
	|			ВТ_ОтработаноИтог.Сотрудник) КАК Таб_ОтработаноИтог
	|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВТ_ТабельработИтог.Период КАК Период,
	|				ВТ_ТабельработИтог.Сотрудник КАК Сотрудник,
	|				СУММА(ВТ_ТабельработИтог.ПоГрафику) КАК ПоГрафику,
	|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТабельработИтог.ТорговаяТочка) КАК ТорговаяТочка
	|			ИЗ
	|				ВТ_ТабельработИтог КАК ВТ_ТабельработИтог
	|			ГДЕ
	|				ВТ_ТабельработИтог.ТипВыхода = ""Полный""
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТ_ТабельработИтог.Период,
	|				ВТ_ТабельработИтог.Сотрудник) КАК Таб_ТабельработИтог
	|			ПО Таб_ОтработаноИтог.Период = Таб_ТабельработИтог.Период
	|				И Таб_ОтработаноИтог.Сотрудник = Таб_ТабельработИтог.Сотрудник) КАК Таб_Переработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Таб_ПоследниеПосещенияВремя.Период КАК Период,
	|			Таб_ПоследниеПосещенияВремя.Сотрудник КАК Сотрудник,
	|			Таб_ПоследниеПосещенияВремя.Уход КАК Уход,
	|			ВТ_ОсновныеНачисления.ТорговаяТочка КАК ТорговаяТочка
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВТ_ОсновныеНачисления.Период КАК Период,
	|				ВТ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(ВТ_ОсновныеНачисления.Уход) КАК Уход
	|			ИЗ
	|				ВТ_ОсновныеНачисления КАК ВТ_ОсновныеНачисления
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТ_ОсновныеНачисления.Период,
	|				ВТ_ОсновныеНачисления.Сотрудник) КАК Таб_ПоследниеПосещенияВремя
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОсновныеНачисления КАК ВТ_ОсновныеНачисления
	|				ПО Таб_ПоследниеПосещенияВремя.Период = ВТ_ОсновныеНачисления.Период
	|					И Таб_ПоследниеПосещенияВремя.Сотрудник = ВТ_ОсновныеНачисления.Сотрудник
	|					И Таб_ПоследниеПосещенияВремя.Уход = ВТ_ОсновныеНачисления.Уход) КАК Таб_ПоследниеПосещения
	|		ПО Таб_Переработка.Период = Таб_ПоследниеПосещения.Период
	|			И Таб_Переработка.Сотрудник = Таб_ПоследниеПосещения.Сотрудник
	|ГДЕ
	|	Таб_Переработка.Переработка >= 0.5
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОтметкиПоТТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОтработаноФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОтработаноИтог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТабельработИтог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодРазвития
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыНачалаРаботыВРазвитииГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыНачалаРаботыВРазвитии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОсновныеНачисления";
	
КонецФункции // ПолучитьТекстЗапросаТилсиОсновныеНачисления()

//Выполняет предварительную очистку записей в регистре "Зарплата продавцов" //+++АК mika 2018.07.09 ИП-00018685
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров для рассчета запплаты
//                         ДатаНачала    - <Тип.Дата> - Дата начала рассчета
//                         ДатаОкончания - <Тип.Дата>  - Дата окончания рассчета
//                         Сотрудник - <Тип.СправочникСсылка>, <Тип.СписокЗначений> - сотрудник или список сотрудников  
//
Процедура ОчиститьРегистрЗарплатыПоОтборуТилси(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаПродавцов.ДатаНачисления,
	|	ЗарплатаПродавцов.ФизЛицо,
	|	ЗарплатаПродавцов.ТорговаяТочка,
	|	ЗарплатаПродавцов.ТипРабот
	|ИЗ
	|	РегистрСведений.ЗарплатаПродавцов КАК ЗарплатаПродавцов
	|ГДЕ
	|	ЗарплатаПродавцов.ДатаНачисления МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗарплатаПродавцов.ФизЛицо.СотрудникТилси
	|	И ЗарплатаПродавцов.ТорговаяТочка.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница)
	|	И (&ВсеСотрудники
	|			ИЛИ ЗарплатаПродавцов.ФизЛицо В (&Сотрудник))";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("ВсеСотрудники", Не СтруктураПараметров.Свойство("Сотрудник"));
	Запрос.УстановитьПараметр("Сотрудник", ?(СтруктураПараметров.Свойство("Сотрудник"), СтруктураПараметров.Сотрудник, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			СтруктураУдаления = Новый Структура();
			
			Для каждого Колонка Из Результат.Колонки Цикл
				СтруктураУдаления.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);      
			КонецЦикла;
			
			МенеджерЗаписи = РегистрыСведений.ЗарплатаПродавцов.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураУдаления);
			
			МенеджерЗаписи.Удалить(); 
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// ••Удалить Отладка Временный дубль процедуры  //+++АК mika 2018.07.19
Процедура ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных)
	
	Запись = РегистрыСведений.ЗарплатаПродавцов.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Запись, СтруктураДанных);
	
	Запись.Записать();
	
КонецПроцедуры