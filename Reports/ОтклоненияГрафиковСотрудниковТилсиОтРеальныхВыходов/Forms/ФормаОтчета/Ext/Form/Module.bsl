
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Группа торговых точек, без возможности изменения
	СтруктураПараметров = Новый ФиксированнаяСтруктура(РегистрыСведений.ПараметрыРасчетаЗпТилси.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Использовать", Истина)));
	ГруппаТорговыхТочек = СтруктураПараметров.ГруппаТорговыхТочек;
	
	//Заполнение прочих параметров
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСотрудников

&НаКлиенте
Процедура ТаблицаЗаписейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = ПроверитьВозможностьИзмененияЯчейки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		
		Если ТекущиеДанные.Изменена ИЛИ ТекущиеДанные.Изменена Тогда
			ПоказатьПредупреждение(, "Текущая строка изменена! Перед удалением сохраните все изменения!");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Приход) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Уход) И ЗначениеЗаполнено(ТекущиеДанные.ПоГрафику) Тогда
			ПоказатьПредупреждение(,"Удалять можно только отметки Прихода и Ухода!
									|(для удаления записей ""По графику"" воспользуйтесь отчетом ""График работы сотрудников (Тилси)"")");
			
			Возврат;
		КонецЕсли;

		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьОтметкуВопросЗавершение", ЭтаФорма), 
				НСтр("ru = 'Удалить отметку прихода/ухода?'", "ru"), РежимДиалогаВопрос.ДаНет, 30 );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ТекущиеДанные.НоваяСтрока = НоваяСтрока ИЛИ Копирование;
	Элемент.ТекущиеДанные.Изменена    = Элемент.ТекущиеДанные.НоваяСтрока;
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ПоГрафику  = 0;
		Элемент.ТекущиеДанные.Отработано = 0;
		
		Элемент.ТекущиеДанные.Приход  = Дата(1,1,1);
		Элемент.ТекущиеДанные.Уход    = Дата(1,1,1);
		Элемент.ТекущиеДанные.Приход1 = Дата(1,1,1);
		Элемент.ТекущиеДанные.Уход1   = Дата(1,1,1);
		
		Элемент.ТекущиеДанные.ЕстьФото = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда 
			
			ТекущаяДата = ТекущаяДата(); 
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Приход) И ТекущиеДанные.Период >= НачалоДня(ТекущаяДата) И 
						ТекущаяДата < (ТекущиеДанные.Период + (ТекущиеДанные.Приход - НачалоДня(ТекущиеДанные.Приход))) Тогда
				
				ПоказатьПредупреждение(,"""Время прихода"" сотрудника не может быть больше, чем ""Текущее время""!");
				
				Если ТекущиеДанные.Период = НачалоДня(ТекущаяДата) Тогда
					ТекущиеДанные.Приход = ТекущаяДата;
				Иначе
					ТекущиеДанные.Приход = Дата(1,1,1);
				КонецЕсли;

			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Уход) И ТекущиеДанные.Период >= НачалоДня(ТекущаяДата) И 
						ТекущаяДата < (ТекущиеДанные.Период + (ТекущиеДанные.Уход - НачалоДня(ТекущиеДанные.Уход))) Тогда
				
				ПоказатьПредупреждение(,"""Время ухода"" сотрудника не может быть больше, чем ""Текущее время""!");
				
				Если ТекущиеДанные.Период = НачалоДня(ТекущаяДата) Тогда
					ТекущиеДанные.Уход = ТекущаяДата;
				Иначе
					ТекущиеДанные.Уход = Дата(1,1,1);
				КонецЕсли;
				
			КонецЕсли;

			Если ЗначениеЗаполнено(ТекущиеДанные.Приход) И ТекущиеДанные.Приход < Дата(1800,1,1) Тогда
				ТекущиеДанные.Приход = ТекущиеДанные.Период + (ТекущиеДанные.Приход - НачалоДня(ТекущиеДанные.Приход));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Уход) И ТекущиеДанные.Уход < Дата(1800,1,1) Тогда
				ТекущиеДанные.Уход = ТекущиеДанные.Период + (ТекущиеДанные.Уход - НачалоДня(ТекущиеДанные.Уход)) ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Уход) И ТекущиеДанные.Уход < ТекущиеДанные.Приход Тогда
				
				ПоказатьПредупреждение(,"""Время прихода"" сотрудника не может быть больше, чем ""время ухода""!");
				
				ТекущиеДанные.Уход = Дата(1,1,1);
				
			КонецЕсли;
			
			ОбновитьПризнакИзмененияСтроки(ТекущиеДанные); 
			
			РасчистатьОтработанноеВремяКлиент(ТекущиеДанные);
			
			ОбновитьМодифицированностьФормы(Макс(Модифицированность, ТекущиеДанные.Изменена));
			
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейТорговаяТочкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.ФормаВыбораСтруктурнойЕдиницы",,Элемент,,
				ВариантОткрытияОкна.ОтдельноеОкно,,Новый ОписаниеОповещения("ОбработатьВыборСтруктурнойЕдиницы", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("ЦФО", ГруппаТорговыхТочек);
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора,Элемент,,
				ВариантОткрытияОкна.ОтдельноеОкно,,Новый ОписаниеОповещения("ОбработатьВыборФизЛица", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя =	"ТаблицаЗаписейЕстьФото"	Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОткрытьФотоОтметкиКлиент(Новый Структура("Сотрудник, Период, ТорговаяТочка", ТекущиеДанные.Сотрудник, ТекущиеДанные.Период, ТекущиеДанные.ТорговаяТочка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура СохранитьДанныеВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СохранитьИзмененияСервер();
		
		ОбновитьТаблицуОтклоненияКлиент();
		 
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ОбновитьТаблицуОтклоненияКлиент();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтруктурнойЕдиницы(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Элементы.ТаблицаЗаписей.ТекущиеДанные.ТорговаяТочка = Результат;
		Элементы.ТаблицаЗаписей.ТекущийЭлемент = Элементы.ТаблицаЗаписей.ПодчиненныеЭлементы.ТаблицаЗаписейПериод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФизЛица(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Элементы.ТаблицаЗаписей.ТекущиеДанные.Сотрудник = Результат;
		Элементы.ТаблицаЗаписей.ТекущийЭлемент = Элементы.ТаблицаЗаписей.ПодчиненныеЭлементы.ТаблицаЗаписейТорговаяТочка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтметкуВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда 
			
			УдалитьОтметкуСотрудникаСервер(Новый Структура("Сотрудник, Приход", ТекущиеДанные.Сотрудник, ТекущиеДанные.Приход));
			
			ОчиститьОтметкиСотрудникаКлиент(ТекущиеДанные);

			Если ТекущиеДанные.ПоГрафику = 0 Тогда
				Попытка
					ТаблицаЗаписей.Удалить(ТекущиеДанные.ПолучитьИдентификатор());
				Исключение
					ТаблицаЗаписей.Удалить(ТекущиеДанные);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗарплатуВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекстУведомления = СтрЗаменить(СтрЗаменить(СтрЗаменить(ДополнительныеПараметры.ТекстУведомления, 
				"Рассчитать зарплату", "Расчет зарплаты"),"?",":") + Символы.ПС + Символы.ПС + 
				"   ДатаНачала - Начало расчета", "ДатаНачала", ТекущаяДата())+ Символы.ПС + 
				"   ДатаОкончания - Конец расчета";
		
		РассчитатьЗарплатуТилсиСервер(ДополнительныеПараметры);
		
		ТекстУведомления = СтрЗаменить(ТекстУведомления, "ДатаОкончания", ТекущаяДата());
		
		Если ЗначениеЗаполнено(ТекстУведомления) Тогда
			ПоказатьПредупреждение(,ТекстУведомления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		//Использовать модальный вызов формы без записи объекта (тест для просмотра перез записью)
		ФормаМодальная = ПолучитьФорму("Документ.НачислениеПремии.Форма.ФормаДокумента");
		ДанныеФормы    = ФормаМодальная.Объект; 
		
		СформироватьДокументЗаявкаНаПремиюСервер(ДанныеФормы);		
		
		КопироватьДанныеФормы(ДанныеФормы, ФормаМодальная.Объект);
		
		ФормаМодальная.Открыть();
		
		//ДокументСсылка = Неопределено;

		//СформироватьДокументЗаявкаНаПремиюСервер_(ДокументСсылка);
		//
		//Если ДокументСсылка = Неопределено Тогда
		//	ПоказатьПредупреждение(,"В текущем отборе нет подтвержденных помощником сумм дорожных расходов!");
		//Иначе
		//	ОткрытьЗначение(ДокументСсылка);
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаТаблицаЗаписейОбновить(Команда)
	
	Если Не Модифицированность Тогда
		ОбновитьТаблицуОтклоненияКлиент();
	Иначе
        ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьДанныеВопросЗавершение", ЭтаФорма), НСтр("ru = 'Есть несохраненные данные! Сохранить перед продолжением?'", "ru"), РежимДиалогаВопрос.ДаНетОтмена, 30 );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейДобавить(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейСкопировать(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейУдалить(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьГрафикРаботыСотрудниковТилси(Команда)
	
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.Форма", ПолучитьСтруктуруТекущегоПериода(),ЭтаФорма,,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПараметрыЗП(Команда)
	
	ОткрытьФорму("РегистрСведений.ПараметрыРасчетаЗпТилси.Форма.ФормаСписка",,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПоНачислениям(Команда)
	
	ОткрытьФорму("Отчет.НачисленияСотрудниковТилси.Форма.ФормаОтчета",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРассчитатьЗарплату(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаЗПТилси();
	
	Если СтруктураПараметров <> Неопределено Тогда
		
		ТекстУведомления = СтрЗаменить(СтрЗаменить("Рассчитать зарплату сотрудников (Тилси) с ДатаНачала по ДатаОкончания ТекущийСотрудник?", "ДатаНачала", 
				Формат(СтруктураПараметров.ДатаНачала, "ДФ=dd.MM.yyyy")),"ДатаОкончания", Формат(СтруктураПараметров.ДатаОкончания, "ДФ=dd.MM.yyyy"));
				
		Если СтруктураПараметров.Свойство("Сотрудник") Тогда
			ТекстУведомления = СтрЗаменить(СтрЗаменить(ТекстУведомления, " ТекущийСотрудник", ?(ТипЗнч(СтруктураПараметров.Сотрудник) = Тип("СписокЗначений"), 
					" по сотрудникам СотрудникОтбора", " по сотруднику СотрудникОтбора")), "СотрудникОтбора", Лев(СтруктураПараметров.Сотрудник, 50));
		Иначе	
			ТекстУведомления = СтрЗаменить(ТекстУведомления, " ТекущийСотрудник","");
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТекстУведомления", ТекстУведомления);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗарплатуВопросЗавершение", ЭтаФорма, СтруктураПараметров), НСтр("ru = '"+ТекстУведомления+"'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
		
	Иначе
		
		ПоказатьПредупреждение(, "Укажите период для рассчета заработной платы (Тилси)!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьИзменения(Команда)
	
	Если Модифицированность Тогда
		СохранитьИзмененияСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаявкаНаПремию(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Перед созданием документа сохраните все изменения!");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьДокументВопросЗавершение", ЭтаФорма), НСтр("ru = 'Создать документ Заявка на премию продавцов?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьВсеОтметки(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ОткрытьФорму("РегистрСведений.ОтметкиТилси.Форма.ФормаСписка", Новый Структура("ОтборПоДате", 
					Новый Структура("Сотрудник, Период", ТекущиеДанные.Сотрудник, ТекущиеДанные.Период)),ЭтаФорма,,
							ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьТаблицуОтклоненияКлиент()
	
	ОбновитьТаблицуОтклоненийСервер();
	
	ОбновитьМодифицированностьФормы(Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуОтклоненийСервер()
	
	ТаблицаЗаписей.Очистить();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"),
	 							Отчет.КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТабРезультат = Новый ТаблицаЗначений();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТаблицаЗаписей.Загрузить(ТабРезультат);
	
	ОбновитьИтогиТаблицаСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиТаблицаСотрудников()
	
	ИтогПоГрафику  = ТаблицаЗаписей.Итог("ПоГрафику");	
	ИтогОтработано = ТаблицаЗаписей.Итог("Отработано");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруТекущегоПериода()

	СтруктураПериода = Неопределено;
	
	Для каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И СокрЛП(ЭлементОтбора.Параметр) = "Период" Тогда
			СтруктураПериода = Новый Структура("ВП", Новый Структура("Вариант,ДатаНачала,ДатаОкончания", 
						ЭлементОтбора.Значение.Вариант, ЭлементОтбора.Значение.ДатаНачала, ЭлементОтбора.Значение.ДатаОкончания));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПериода;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПризнакИзмененияСтроки(ТекущиеДанные)	
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.Изменена = ТекущиеДанные.Приход <> ТекущиеДанные.Приход1 ИЛИ 
								 ТекущиеДанные.Уход <> ТекущиеДанные.Уход1 ИЛИ
								 ТекущиеДанные.Подтверждено <> ТекущиеДанные.Подтверждено1	ИЛИ
								 ТекущиеДанные.СуммаДорожных <> ТекущиеДанные.СуммаДорожных1;
								 
		ТекущиеДанные.Изменена = Макс(ТекущиеДанные.Изменена, ТекущиеДанные.НоваяСтрока);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтметкиСотрудникаКлиент(ТекущиеДанные);
	
	ТекущиеДанные.Приход  = Дата(1,1,1);
	ТекущиеДанные.Уход    = Дата(1,1,1);
	ТекущиеДанные.Приход1 = Дата(1,1,1);
	ТекущиеДанные.Уход1   = Дата(1,1,1);
	
	ТекущиеДанные.Отработано = 0;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьОтметкиСотрудникаСервер(ТекущиеДанные);
	
	ТекущиеДанные.Приход1 = ТекущиеДанные.Приход;
	ТекущиеДанные.Уход1   = ТекущиеДанные.Уход;
	
	ТекущиеДанные.СуммаДорожных1 = ТекущиеДанные.СуммаДорожных;
	ТекущиеДанные.Подтверждено1  = ТекущиеДанные.Подтверждено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодифицированностьФормы(ПризнакМодификации)
	 
	ЭтаФорма.Модифицированность = ПризнакМодификации;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьИзмененияЯчейки()
	
	Отказ = Ложь;
	ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если Не ТекущиеДанные.НоваяСтрока И (Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя <> "ТаблицаЗаписейПриход" 
			И Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя <> "ТаблицаЗаписейУход"
			И Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя <> "ТаблицаЗаписейСуммаДорожных"
			И Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя <> "ТаблицаЗаписейПодтверждено") Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Если Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя = "ТаблицаЗаписейПодтверждено" Тогда
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СуммаДорожных) Тогда
					ТекущиеДанные.Подтверждено = Ложь;
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеДанные.ЕстьФото И Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя = "ТаблицаЗаписейПриход" Тогда
			ПоказатьПредупреждение(,"Текущее ""Время прихода"" можно отредактировать только через: Контекстное меню → Все отметки(за день)!");
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура РасчистатьОтработанноеВремяКлиент(ТекущиеДанные)
	
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ТекущиеДанные.Уход) И ЗначениеЗаполнено(ТекущиеДанные.Приход) Тогда
			ТекущиеДанные.Отработано = Окр((ТекущиеДанные.Уход - ТекущиеДанные.Приход)/3600, 2); 
		Иначе
			ТекущиеДанные.Отработано = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФотоОтметкиКлиент(СтруктураПараметров)

	МассивСтруктур = ПолучитьМассивСтруктурФотографий(СтруктураПараметров);

	Для каждого ЭлементМассива Из МассивСтруктур Цикл
		
		Для каждого ЭлементСтруктуры Из ЭлементМассива Цикл
			
			Файл = ПолучитьИмяВременногоФайла("." + Сред(ЭлементСтруктуры.Ключ,6,СтрДлина(ЭлементСтруктуры.Ключ)));
			
			Если ПолучитьФайл(ЭлементСтруктуры.Значение, Файл, Ложь) = Истина Тогда
				ЗапуститьПриложение(Файл);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСтруктурФотографий(СтруктураПараметров)
	
	МассивСтруктур = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтметкиТилси.Сотрудник,
	|	ОтметкиТилси.Приход,
	|	ОтметкиТилси.МассивФото
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиТилси КАК ОтметкиТилси
	|		ПО СтруктурныеЕдиницы.НомерТочки = ОтметкиТилси.НомерТочки
	|ГДЕ
	|	ОтметкиТилси.Сотрудник = &Сотрудник
	|	И СтруктурныеЕдиницы.Ссылка = &ТорговаяТочка
	|	И НАЧАЛОПЕРИОДА(ОтметкиТилси.Приход, ДЕНЬ) = &Период";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураПараметров.Сотрудник);
	Запрос.УстановитьПараметр("ТорговаяТочка", СтруктураПараметров.ТорговаяТочка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураФотографийОтметки = Новый Структура();
			
			Счетчик = 1;
			МФ = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Выборка.МассивФото);
			Для каждого Стр Из МФ Цикл	
				Если НЕ СтрДлина(Стр)=36 Тогда Продолжить КонецЕсли;
				Фото = Неопределено;
				Попытка
					Фото = Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр));
				Исключение
				Продолжить;
				КонецПопытки;
				Если ЗначениеЗаполнено(Фото) Тогда
					СтруктураФотографийОтметки.Вставить("Фото" + Строка(Счетчик) + СтрЗаменить(Фото.Расширение,".",""), 
						ПоместитьВоВременноеХранилище(Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Фото))));
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЦикла; 			
					
			Если Выборка.МассивФото <> "" Тогда
				МассивСтруктур.Добавить(СтруктураФотографийОтметки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОтметкуСотрудникаСервер(ТекущиеДанные)
	
	МенеджерЗаписи = РегистрыСведений.ОтметкиТилси.СоздатьМенеджерЗаписи();
	
	Если ТекущиеДанные.Свойство("ПрочитатьОтметку") И ТекущиеДанные.ПрочитатьОтметку Тогда
		МенеджерЗаписи.Приход    = ТекущиеДанные.Приход;
		МенеджерЗаписи.Сотрудник = ТекущиеДанные.Сотрудник;
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущиеДанные);

	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьОтметкуСотрудникаСервер(СтруктураПараметров)
	
	МенеджерЗаписи = РегистрыСведений.ОтметкиТилси.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураПараметров);

	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияСервер()
	
	НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Изменена", Истина));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для каждого Строка Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(Строка.Сотрудник) И ЗначениеЗаполнено(Строка.ТорговаяТочка) И ЗначениеЗаполнено(Строка.Период) И ЗначениеЗаполнено(Строка.Приход) Тогда
				
				Если ЗначениеЗаполнено(Строка.Приход1) И Строка.Приход <> Строка.Приход1 Тогда
					УдалитьОтметкуСотрудникаСервер(Новый Структура("Сотрудник, Приход", Строка.Сотрудник, Строка.Приход1));
				КонецЕсли;
				
				
				ДобавитьОтметкуСотрудникаСервер(Новый Структура("Сотрудник, НомерТочки, Приход, Уход, ПрочитатьОтметку, СуммаДорожных, Подтверждено, Автор", 
						Строка.Сотрудник, Строка.ТорговаяТочка.НомерТочки, Строка.Приход, Строка.Уход, Строка.ЕстьФото, Строка.СуммаДорожных, Строка.Подтверждено, ТекущийПользователь));
				
				СинхронизироватьОтметкиСотрудникаСервер(Строка);
				 
				Строка.НоваяСтрока   = Ложь;
				Строка.Изменена      = Ложь;
				
			КонецЕсли;
		КонецЦикла;
		
		НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Изменена", Истина));
		Модифицированность = НайденныеСтроки.Количество() > 0;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровДляРасчетаЗПТилси();
	
	СтруктураПараметров = ПолучитьСтруктуруТекущегоПериода();
	
	Если СтруктураПараметров <> Неопределено Тогда
		
		СтруктураПараметров = СтруктураПараметров.ВП;
		
		Для каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
					И ЭлементОтбора.ИдентификаторПользовательскойНастройки = "ac79a5e8-bd10-452f-8b0f-c7a482983139" //Сотрудник
							И (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
								ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке) 
								       И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда 	
					СтруктураПараметров.Вставить("Сотрудник", ЭлементОтбора.ПравоеЗначение);
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура РассчитатьЗарплатуТилсиСервер(СтруктураПараметров)
	
	//Типовой период расчета ЗП (для инфо, ежедневный регламент в 1:00 - РасчетЗаработнойПлатыПродавцов)
	
	//Процедура РасчетЗаработнойПлатыПродавцов() Экспорт
	//	
	//	ОбработкаОбъект = Обработки.РасчетЗаработнойПлатыПродавцов.Создать();
	//	
	//	ГраницаЗапретаРасчетаЗП 		= Константы.ГраницаЗапретаРасчетаЗППродавцов.Получить() + 86400;
	//	ГраницаЗапретаРедактирования 	= НачалоДня(ОбменСAccess.ПолучитьГраницуЗапретаИзменений()) + 86400;
	//	
	//	ОбщаяГраница = Макс(ГраницаЗапретаРасчетаЗП, ГраницаЗапретаРедактирования);
	//	
	//	ОбработкаОбъект.НачалоПериода 	= Макс(НачалоДня(ТекущаяДата()) - 7 * 86400, Макс(ОбщаяГраница, '20140501'));
	//	ОбработкаОбъект.КонецПериода 	= КонецДня(ТекущаяДата());
	//	ОбработкаОбъект.РасчитатьЗарплатуПродавцов();
	//	
	//КонецПроцедуры
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ОтчетОбъект.РассчитатьЗарплатуСотрудниковТилси(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументЗаявкаНаПремиюСервер_(ДокументСсылка)
	
	НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Подтверждено", Истина));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДокументСсылка = Документы.НачислениеПремии.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ДокументОбъект = Документы.НачислениеПремии.СоздатьДокумент();
		
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
		
		ДокументОбъект.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН","7734410589"); 
		
		Для каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ДокументОбъект.Состав.Добавить();
			НоваяСтрока.ФизЛицо = Строка.Сотрудник;
			НоваяСтрока.Сумма   = Строка.СуммаДорожных;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДокументЗаявкаНаПремиюСервер(ДанныеФормы);
	
	НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Подтверждено", Истина));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДокументОбъект = Документы.НачислениеПремии.СоздатьДокумент();
		
		СтруктураПараметров = Новый ФиксированнаяСтруктура(РегистрыСведений.ПараметрыРасчетаЗпТилси.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Использовать", Истина)));
		
		ДокументОбъект.Дата         = ТекущаяДата();
		ДокументОбъект.Организация  = СтруктураПараметров.Организация; 
		ДокументОбъект.Утверждающий = СтруктураПараметров.Утверждающий;
		ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		Для каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ДокументОбъект.Состав.Добавить();
			НоваяСтрока.ФизЛицо = Строка.Сотрудник;
			НоваяСтрока.Сумма   = Строка.СуммаДорожных;
			НоваяСтрока.Комментарий = "дорожные";
		КонецЦикла;
		
		ЗначениеВДанныеФормы(ДокументОбъект, ДанныеФормы); 
		
	КонецЕсли;
	
	
КонецФункции

#КонецОбласти





