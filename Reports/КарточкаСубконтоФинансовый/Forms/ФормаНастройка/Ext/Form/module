
// Процедура - Обработчик нажатия кнопки выбора периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	РаботаСДиалогами.ОбработчикНастройкаПериодаНажатие(ДатаНач, ДатаКон);

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - Обработчик нажатия кнопки "Отмена"
//
Процедура НижняяКоманднаяПанельОтмена(Кнопка)

	ЭтаФорма.Закрыть();

КонецПроцедуры // НижняяКоманднаяПанельОтмена()

// Процедура - Обработчик нажатия кнопки "ОК"
//
Процедура НижняяКоманднаяПанельКнОК(Кнопка)

	ОповеститьОВыборе(Истина);

КонецПроцедуры // НижняяКоманднаяПанельКнОК()

Процедура СубконтоВидСубконтоПриИзменении(Элемент)
	
	ПерезаполнитьНачальныеНастройки();
	
	Если ЭлементыФормы.Субконто.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементыФормы.Субконто.ТекущиеДанные.ВидСубконто) Тогда
		
		НомерТекСтроки = ЭлементыФормы.Субконто.ТекущиеДанные.НомерСтроки;
		ПутьКДанным = "Субконто"+НомерТекСтроки;
		
		ЭлементНайден = Ложь;
		Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			Если ЭлементОтбора.ПутьКДанным = ПутьКДанным Тогда
				ЭлементНайден = Истина;
				
				Если ЭлементОтбора.ТипЗначения <> ЭлементыФормы.Субконто.ТекущиеДанные.ВидСубконто.ТипЗначения Тогда
					СтароеЗначение = ЭлементОтбора.Значение;
					СтароеЗначениеС = ЭлементОтбора.ЗначениеС;
					СтароеЗначениеПо = ЭлементОтбора.ЗначениеПо;
					
					ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ЭлементОтбора));
					
					ПолеОтбора = ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
					ПолеОтбора.Использование = Ложь;
					ПолеОтбора.Значение = ПолеОтбора.ТипЗначения.ПривестиЗначение(СтароеЗначение);
					ПолеОтбора.ЗначениеС = ПолеОтбора.ТипЗначения.ПривестиЗначение(СтароеЗначениеС);
					ПолеОтбора.ЗначениеПо = ПолеОтбора.ТипЗначения.ПривестиЗначение(СтароеЗначениеПо);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭлементНайден Тогда
			ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	БухгалтерскиеОтчеты.ОбработатьВыборДляСтрокиОтбораБухОтчетов(ЭлементыФормы.Отбор.ТекущиеДанные, Элемент, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

Процедура СубконтоПослеУдаления(Элемент)
	
	ПерезаполнитьНачальныеНастройки();
	
	Для каждого стр Из Субконто Цикл
	
		Поле = ПостроительОтчета.Отбор.Найти("Субконто"+стр.НомерСтроки);
		Если Поле <> Неопределено Тогда
			Если Поле.ТипЗначения <> стр.ВидСубконто.ТипЗначения Тогда
				ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(Поле));
				ПостроительОтчета.Отбор.Добавить("Субконто"+стр.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СубконтоПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	МаксКолвоСубконто = МетаданныеПланСчетов.МаксКоличествоСубконто;
	
	Отказ = ?(Субконто.Количество() >= МаксКолвоСубконто, Истина, Ложь);
	
КонецПроцедуры

Процедура СубконтоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
	
		ТекВидСубконто = Элемент.ТекущиеДанные.ВидСубконто;
		Элемент.ТекущиеДанные.ВидСубконто = ПланыВидовХарактеристик[ТекВидСубконто.Метаданные().Имя].ПустаяСсылка();
	
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// обработчики событий формы
/////////////////////////////////////////////////////////////////////////

Процедура ПриОткрытии()
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() <> "БП" Тогда
		// Проверка ведения однофирменности
		УчетПоВсемОрганизациям = Истина;
	КонецЕсли;
	
    БухгалтерскиеОтчеты.ПоддержкаОднофирменностиДляФормыНастроекБухОтчетов(ЭтаФорма, УчетПоВсемОрганизациям);
	
КонецПроцедуры

