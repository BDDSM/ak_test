
#Область ОбработчикиСобытий

//+++АК LATV 2018.10.20 ИП-00020070
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	РежимРассылки = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("РежимРассылки");
	Если РежимРассылки Тогда
		УстановитьПериодОтчета();
	КонецЕсли;
	
	ДоработатьКомпоновщикПередВыводом();
	
	// Рассылка отчета
	Если РежимРассылки И Не ОтчетПустой(ЭтотОбъект) Тогда
		СтандартнаяОбработка = Ложь;
		СформироватьВРежимеРассылки(ДокументРезультат, ДанныеРасшифровки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++АК LATV 2018.10.20 ИП-00020070
Процедура УстановитьПериодОтчета()

	ОтчетЗаВесьДень = Ложь;
	КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("ОтчетЗаВесьДень", ОтчетЗаВесьДень);
	
	ДатаФормирования = ТекущаяДата();
	
	ПериодыФормированияОтчета = Новый Массив;
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 1, 35, 0));
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 2, 05, 0));
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 2, 35, 0));
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 3, 05, 0));
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 3, 35, 0));
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 4, 05, 0));
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 4, 35, 0));
	ПериодыФормированияОтчета.Добавить(Дата(Год(ДатаФормирования), Месяц(ДатаФормирования), День(ДатаФормирования), 5, 05, 0));
	
	ВыбранныйПериод = ПериодыФормированияОтчета[0];
	Для Каждого Период Из ПериодыФормированияОтчета Цикл
		Если ДатаФормирования < Период Тогда
			Прервать;
		КонецЕсли;
		
		ВыбранныйПериод = Период;
		
	КонецЦикла;
	
	ДатаФормирования = ВыбранныйПериод;
	КонецПериода	= ДатаФормирования;
	
	Если ОтчетЗаВесьДень = Истина Тогда
		НачалоПериода	= НачалоДня(ДатаФормирования);
	Иначе
		НачалоПериода	= ДатаФормирования - 30*60 + 1; // 30 минут, исключая
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.10.20 ИП-00020070
Процедура ДоработатьКомпоновщикПередВыводом()

	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода"
		, НачалоПериода);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода"
		, КонецПериода);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Кавказский_1"
		, Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231", Истина));

КонецПроцедуры

#КонецОбласти

#Область ФормированиеВРежимеРассылки

//+++АК LATV 2018.10.20 ИП-00020070
Процедура СформироватьВРежимеРассылки(ДокументРезультат, ДанныеРасшифровки)

	// Формирование отчета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обработка результата
	ПроцессорВывода.НачатьВывод();
	
	Маршруты = Новый Массив;
	
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		
		Для Каждого ЗначениеПараметраМакетаКД Из ЭлементРезультата.ЗначенияПараметров Цикл
			Если ТипЗнч(ЗначениеПараметраМакетаКД.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				Поля = ДанныеРасшифровки.Элементы.Получить(ЗначениеПараметраМакетаКД.Значение).ПолучитьПоля();
				Если Поля.Количество() > 0 Тогда
					ТекПоле = Поля[0];
					Если ТекПоле.Поле = "Маршрут" Тогда
						Маршруты.Добавить(ТекПоле.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	// Отправка писем
	Получатели = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Получатели;
	ЭлектронныеАдресаПолучателей = УправлениеЭлектроннойПочтой.ЭлектронныеАдресаФизическихЛиц(Получатели);
	Если ЭлектронныеАдресаПолучателей.Количество() > 0 Тогда
		ПисьмаДляОтправки = Новый Массив;
		
		ПараметрыПисьма = СФормироватьПисьмоДляОтправки(ДокументРезультат, ЭлектронныеАдресаПолучателей);
		ПисьмаДляОтправки.Добавить(ПараметрыПисьма);
		
		ОтправитьПисьма(ПисьмаДляОтправки);
	КонецЕсли;
	
	// Отправка СМС
	ПолучателиСМС = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.ПолучателиСМС;
	Если ЗначениеЗаполнено(ПолучателиСМС) Тогда
		ТекстСМС = СформироватьТекстСМССообщения(Маршруты);
		ОтправитьСМСПолучателям(ТекстСМС, ПолучателиСМС);
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.10.22 ИП-00020070
Функция ОтчетПустой(ОтчетОбъект, ПроцессорКД = Неопределено)
	Если ПроцессорКД = Неопределено Тогда
		
		Если ОтчетОбъект.СхемаКомпоновкиДанных = Неопределено Тогда
			Возврат Ложь; // Не СКД отчет.
		КонецЕсли;
		
		// Объект для создания макета компоновки данных.
		КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		// Выполняет компоновку макета.
		МакетКД = КомпоновщикМакетаКД.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Пропуск проверки на то, что отчет пустой.
		//Если ЕстьВнешнийНаборДанных(МакетКД.НаборыДанных) Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		// Объект, выполняющий компоновку данных.
		ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
		
		// Инициализировать объект.
		ПроцессорКД.Инициализировать(МакетКД, , , Истина);
		
	Иначе
		
		// Встать в начало компоновки.
		ПроцессорКД.Сбросить();
		
	КонецЕсли;
	
	// Объект для вывода результата компоновки в табличный документ.
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	// Устанавливает табличный документ, в который нужно выводить результат.
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(Новый ТабличныйДокумент);
	
	// Последовательный вывод
	ПроцессорВыводаРезультатаКД.НачатьВывод();
	
	// Получает следующий элемент результата компоновки.
	ЭлементРезультатаКД = ПроцессорКД.Следующий();
	Пока ЭлементРезультатаКД <> Неопределено Цикл
		
		// Вывести элемент результата компоновки отчета в документ.
		ПроцессорВыводаРезультатаКД.ВывестиЭлемент(ЭлементРезультатаКД);
		
		// Определить не пустой результат.
		Для Каждого ЗначениеПараметраМакетаКД Из ЭлементРезультатаКД.ЗначенияПараметров Цикл
			Попытка
				ЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПараметраМакетаКД.Значение);
			Исключение
				ЗначениеЗаполнено = Ложь; // Линия, Рамка, Цвет и другие объекты КД, которые могут фигурировать при выводе.
			КонецПопытки;
			Если ЗначениеЗаполнено Тогда
				ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			// Получает следующий элемент результата компоновки.
			ЭлементРезультатаКД = ПроцессорКД.Следующий();
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	// Указание объекту о том, что вывод результата завершен.
	ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
	
	Возврат Истина;
КонецФункции

//+++АК LATV 2018.10.20 ИП-00020070
Функция СФормироватьПисьмоДляОтправки(ТекущийОтчет, Получатели)

	Кому = Новый Массив;
	Для Каждого Получатель Из Получатели Цикл
		Кому.Добавить(Новый Структура("Адрес, Представление", Получатель.Адрес, Получатель.Представление));
	КонецЦикла;
	
	Копия = Новый Массив;
	
	ПараметрыПисьма = Новый Структура();
	ПараметрыПисьма.Вставить("Важность",	ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыПисьма.Вставить("ТипТекста",	ТипТекстаПочтовогоСообщения.HTML);
	ПараметрыПисьма.Вставить("Тема",		Метаданные().Синоним);
	ПараметрыПисьма.Вставить("Тело",		ПоместитьОтчетВТелоПисьма(ТекущийОтчет));
	ПараметрыПисьма.Вставить("Кому",		Кому);
	ПараметрыПисьма.Вставить("Копия",		Копия);
	
	Возврат ПараметрыПисьма;

КонецФункции

//+++АК LATV 2018.10.20 ИП-00020070
Функция ПоместитьОтчетВТелоПисьма(ТекущийОтчет)

	ИмяФайлаHTML = ПолучитьИмяВременногоФайла("html");
	ТекущийОтчет.Записать(ИмяФайлаHTML, ТипФайлаТабличногоДокумента.HTML4);
	
	ТекстДляЧтения = Новый ЧтениеТекста(ИмяФайлаHTML);
	ВесьТекст = ТекстДляЧтения.Прочитать();
	ТекстДляЧтения.Закрыть();
	УдалитьФайлы(ИмяФайлаHTML);
	
	ВесьТекст = ЗаменитьНедопустимыеСимволыXML(ВесьТекст);
	ТекстСообщения = СтрЗаменить(ВесьТекст, Символы.ПС, "");
	
	Возврат ТекстСообщения;

КонецФункции

//+++АК LATV 2018.10.20 ИП-00020070
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = "")

	#Если Не ВебКлиент Тогда
		ПозицияНачала = 1;
		Пока Истина Цикл
			Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
			Если Позиция = 0 Тогда
				Прервать;
			КонецЕсли;
			Если Позиция > 1 Тогда
				НедопустимыйСимвол = Сред(Текст, Позиция - 1, 1);
				Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
					Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
				КонецЕсли;
			КонецЕсли;
			НедопустимыйСимвол = Сред(Текст, Позиция, 1);
			Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
				Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
			КонецЕсли;
			ПозицияНачала = Позиция + 1;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Текст;

КонецФункции

//+++АК LATV 2018.10.20 ИП-00020070
Процедура ОтправитьПисьма(ПисьмаДляОтправки)

	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты, Наименование");
	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);
	
	Для Каждого ПараметрыПисьма Из ПисьмаДляОтправки Цикл
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Письмо.Тема				= ПараметрыПисьма.Тема;
		Письмо.ИмяОтправителя	= СокрЛП(ДанныеУчетнойЗаписи.Наименование);
		Письмо.Отправитель		= СокрЛП(ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
		
		Для Каждого СтрокаПолучатель Из ПараметрыПисьма.Кому Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес			= СтрокаПолучатель.Адрес;
			Получатель.ОтображаемоеИмя	= СтрокаПолучатель.Представление;
		КонецЦикла;
		
		Для Каждого СтрокаПолучатель Из ПараметрыПисьма.Копия Цикл
			Получатель = Письмо.Копии.Добавить();
			Получатель.Адрес			= СтрокаПолучатель.Адрес;
			Получатель.ОтображаемоеИмя	= СтрокаПолучатель.Представление;
		КонецЦикла;
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст		= ПараметрыПисьма.Тело;
		ТекстСообщения.ТипТекста	= ПараметрыПисьма.ТипТекста;
		
		Почта.Послать(Письмо);
	КонецЦикла;
	
	Почта.Отключиться();

КонецПроцедуры

//+++АК LATV 2018.10.20 ИП-00020070
Функция СформироватьТекстСМССообщения(Маршруты)

	СтрокаМаршруты = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Маршруты, ", ");
	ТекстСМС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Опоздали с выездом маршруты: %1'"), СтрокаМаршруты);
		
	ТекстСМС = Лев(ТекстСМС, 512);
	
	Возврат ТекстСМС;

КонецФункции

//+++АК LATV 2018.10.20 ИП-00020070
Процедура ОтправитьСМСПолучателям(ТекстСМС, ПолучателиСМС)

	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut	= 0;
	ADOСоединение.CommandTimeOut	= 0;
	ADOСоединение.ConnectionString	= ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
	ADOСоединение.Open();
	
	Пользователь = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	
	Для Каждого НомерТелефона Из ПолучателиСМС Цикл
		ОтправитьСМС(ADOСоединение, НомерТелефона, ТекстСМС, Пользователь)
	КонецЦикла;
	
	ADOСоединение.Close();

КонецПроцедуры

//+++АК LATV 2018.10.20 ИП-00020070
Процедура ОтправитьСМС(ADOСоединение, Знач НомерТелефона, ТекстСМС, Пользователь)

	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = Прав(НомерТелефона, 10);
	
	Если СтрДлина(НомерТелефона) <> 10 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
		"INSERT INTO IES..Outgoing
		|	(Number, Message, AddDate, Project, user_add)
		|VALUES 
		|	 ('7' + Left('" + НомерТелефона + "', 10),
		|	'" + ТекстСМС + "',
		|	'" + ТекущаяДата() + "',
		|	'Vkusvill',
		|	'" + Пользователь + "');";
	
	Попытка
		ADOСоединение.Execute(ТекстЗапроса);
	Исключение
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область МодульМенеджера

//+++АК LATV 2018.10.20 ИП-00020070
Функция КодДляВыполненияВПериодическихЗаданиях(ТекущаяОбработка, Параметры) Экспорт

	ЗапросПолучателей = Новый Запрос();
	ЗапросПолучателей.Текст =
		"ВЫБРАТЬ
		|	ПериодическиеЗаданияПолучателиРассылки.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	Справочник.ПериодическиеЗадания.ПолучателиРассылки КАК ПериодическиеЗаданияПолучателиРассылки
		|ГДЕ
		|	ПериодическиеЗаданияПолучателиРассылки.Ссылка = &Задание";
	
	ЗапросПолучателей.УстановитьПараметр("Задание", ТекущаяОбработка);
	Получатели = ЗапросПолучателей.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
	// Выполнение отчета
	ВыполняемыйОтчет = Отчеты.МаршрутыОтгруженныеПозжеПоложенногоВремени.Создать();
	
	ВыполняемыйОтчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРассылки");
	ВыполняемыйОтчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("ОтчетЗаВесьДень",	Параметры.Свойство("ОтчетЗаВесьДень"));
	ВыполняемыйОтчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("Получатели",		Получатели);
	ВыполняемыйОтчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("ПолучателиСМС",	?(Параметры.Свойство("ПолучателиСМС"), Параметры.ПолучателиСМС, Новый Массив));
	
	ВыполняемыйОтчет.СкомпоноватьРезультат(Новый ТабличныйДокумент, Неопределено);

КонецФункции

#КонецОбласти

ЭтотОбъект.НачалоПериода	= НачалоДня(ТекущаяДата());
ЭтотОбъект.КонецПериода		= КонецДня(НачалоПериода);
