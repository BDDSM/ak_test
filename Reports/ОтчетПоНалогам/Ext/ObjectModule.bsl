Перем ПодключениеУстановлено; 
Перем ДатаНачала; 
Перем ДатаОкончания;
Перем v82;

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос;
	
	Настройки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0]; 
	
	ДатаНачала    = Настройки.Значение.ДатаНачала; 
	ДатаОкончания = Настройки.Значение.ДатаОкончания;	
	
	Если Не ЗначениеЗаполнено(ДатаНачала) 
		Или Не ЗначениеЗаполнено(ДатаОкончания)
		Или ДатаНачала > ДатаОкончания
		Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Заполните период!";
		Сообщение.Сообщить();
		
		Возврат;
	
	КонецЕсли;
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.НалогиСФОТ);
	//МассивСчетов.Добавить(ПланыСчетов.Финансовый.НалогиУН);
	
	
	Запрос.УстановитьПараметр("МассивСчетов",МассивСчетов);
	
	
	Запрос.УстановитьПараметр("ОстаткиБухгалтерия",ПолучитьДанныеИзБухгалтерии());
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	
	Если Не ПодключениеУстановлено Тогда
	
		Возврат
	
	КонецЕсли;
	МассивНалогов = Новый Массив(); 
	МассивНалогов.Добавить(Справочники.ВидыНалогов.НайтиПоКоду("000000010"));
	МассивНалогов.Добавить(Справочники.ВидыНалогов.НайтиПоКоду("000000008"));
	МассивНалогов.Добавить(Справочники.ВидыНалогов.НайтиПоКоду("000000004"));
	МассивНалогов.Добавить(Справочники.ВидыНалогов.НайтиПоКоду("000000011"));
	МассивНалогов.Добавить(Справочники.ВидыНалогов.НайтиПоКоду("000000006"));
	
	Запрос.УстановитьПараметр("МассивНалогов", МассивНалогов);
	Запрос.Текст = 
	
	     "ВЫБРАТЬ
	     |	Хозрасчетный.Счет,
	     |	Хозрасчетный.Субконто1,
	     |	Хозрасчетный.Субконто2,
	     |	Хозрасчетный.Субконто3,
	     |	Хозрасчетный.СуммаОстатокБух,
	     |	Хозрасчетный.СуммаОстатокДтБух,
	     |	Хозрасчетный.СуммаОстатокКтБух,
	     |	Хозрасчетный.СуммаРазвернутыйОстатокДтБух,
	     |	Хозрасчетный.СуммаРазвернутыйОстатокКтБух,
	     |	Хозрасчетный.СуммаОборотБух,
	     |	Хозрасчетный.СуммаОборотДтБух,
	     |	Хозрасчетный.СуммаОборотКтБух,
	     |	Хозрасчетный.ИНН,
	     |	Хозрасчетный.СуммаНачальныйОстатокДтБух,
	     |	Хозрасчетный.СуммаНачальныйОстатокКтБух,
	     |	Хозрасчетный.СуммаНачальныйОстатокБух,
	     |	Хозрасчетный.КодВидаНалога
	     |ПОМЕСТИТЬ ХозрасчетныйОстаткиТаблица
	     |ИЗ
	     |	&ОстаткиБухгалтерия КАК Хозрасчетный
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ФинансовыйОстатки.Счет.Код КАК Счет,
	     |	ФинансовыйОстатки.Субконто1.Наименование КАК Субконто1,
	     |	ФинансовыйОстатки.Субконто2.Наименование КАК Субконто2,
	     |	ФинансовыйОстатки.Субконто3.Наименование КАК Субконто3,
	     |	ФинансовыйОстатки.СуммаКонечныйОстаток КАК СуммаОстаток,
	     |	ФинансовыйОстатки.СуммаКонечныйОстатокДт КАК СуммаОстатокДт,
	     |	ФинансовыйОстатки.СуммаКонечныйОстатокКт КАК СуммаОстатокКт,
	     |	ФинансовыйОстатки.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаРазвернутыйОстатокДт,
	     |	ФинансовыйОстатки.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаРазвернутыйОстатокКт,
	     |	0 КАК СуммаОстатокБух,
	     |	0 КАК СуммаОстатокДтБух,
	     |	0 КАК СуммаОстатокКтБух,
	     |	0 КАК СуммаРазвернутыйОстатокДтБух,
	     |	0 КАК СуммаРазвернутыйОстатокКтБух,
	     |	ФинансовыйОстатки.СуммаОборот,
	     |	ФинансовыйОстатки.СуммаОборотДт,
	     |	ФинансовыйОстатки.СуммаОборотКт,
	     |	0 КАК СуммаОборотБух,
	     |	0 КАК СуммаОборотДтБух,
	     |	0 КАК СуммаОборотКтБух,
	     |	ФинансовыйОстатки.Субконто1 КАК Организация,
	     |	ФинансовыйОстатки.СуммаНачальныйОстатокДт,
	     |	ФинансовыйОстатки.СуммаНачальныйОстатокКт,
	     |	0 КАК СуммаНачальныйОстатокДтБух,
	     |	0 КАК СуммаНачальныйОстатокКтБух,
	     |	ФинансовыйОстатки.Субконто2 КАК ВидНалога,
	     |	NULL КАК Ссылка,
	     |	ФинансовыйОстатки.СуммаНачальныйОстаток,
	     |	NULL КАК СуммаНачальныйОстатокБух
	     |ИЗ
	     |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет В (&МассивСчетов), , ) КАК ФинансовыйОстатки
	     |ГДЕ
	     |	ФинансовыйОстатки.Субконто2 В(&МассивНалогов)
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	ХозрасчетныйОстаткиТаблица.Счет,
	     |	ХозрасчетныйОстаткиТаблица.Субконто1,
	     |	ХозрасчетныйОстаткиТаблица.Субконто2,
	     |	ХозрасчетныйОстаткиТаблица.Субконто2,
	     |	0,
	     |	0,
	     |	0,
	     |	0,
	     |	0,
	     |	ХозрасчетныйОстаткиТаблица.СуммаОстатокБух,
	     |	ХозрасчетныйОстаткиТаблица.СуммаОстатокДтБух,
	     |	ХозрасчетныйОстаткиТаблица.СуммаОстатокКтБух,
	     |	ХозрасчетныйОстаткиТаблица.СуммаРазвернутыйОстатокДтБух,
	     |	ХозрасчетныйОстаткиТаблица.СуммаРазвернутыйОстатокКтБух,
	     |	0,
	     |	0,
	     |	0,
	     |	ХозрасчетныйОстаткиТаблица.СуммаОборотБух,
	     |	ХозрасчетныйОстаткиТаблица.СуммаОборотДтБух,
	     |	ХозрасчетныйОстаткиТаблица.СуммаОборотКтБух,
	     |	Организации.Ссылка,
	     |	0,
	     |	0,
	     |	ХозрасчетныйОстаткиТаблица.СуммаНачальныйОстатокДтБух,
	     |	ХозрасчетныйОстаткиТаблица.СуммаНачальныйОстатокКтБух,
	     |	ВидыНалогов.Ссылка,
	     |	ХозрасчетныйОстаткиТаблица.Субконто1,
	     |	NULL,
	     |	ХозрасчетныйОстаткиТаблица.СуммаНачальныйОстатокБух
	     |ИЗ
	     |	ХозрасчетныйОстаткиТаблица КАК ХозрасчетныйОстаткиТаблица
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	     |		ПО ХозрасчетныйОстаткиТаблица.ИНН = Организации.ИНН
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалогов КАК ВидыНалогов
	     |		ПО ХозрасчетныйОстаткиТаблица.КодВидаНалога = ВидыНалогов.Код"; 
		 
		 
		 

	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();

	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		
		//ЭлементОтбора.ИдентификаторПользовательскойНастройки
		//Для каждого нОтбор из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		//	Если нОтбор.ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки Тогда
		//		ЭлементОтбораПользовательскаяНастройка = нОтбор; 
		//	КонецЕсли; 	
		//КонецЦикла;
		ЭлементОтбораПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);		

		//ЭлементОтбораПользовательскаяНастройка  = КомпоновщикНастроек.Настройки.Отбор.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);		
		ЭлементОтбора.ПравоеЗначение = ЭлементОтбораПользовательскаяНастройка.ПравоеЗначение;
		ЭлементОтбора.Использование = ЭлементОтбораПользовательскаяНастройка.Использование;
		ЭлементОтбора.ВидСравнения = ЭлементОтбораПользовательскаяНастройка.ВидСравнения;
		//ЗаполнитьЗначенияСвойств(ЭлементОтбора,ЭлементОтбораПользовательскаяНастройка);
		
	КонецЦикла;

	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("ТаблицаЗначений", ТаблицаЗначений), ДанныеРасшифровки);

	//Очищаем поле табличного документа
	ДокументРезультат.Очистить();

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);   
		
КонецПроцедуры

Функция ПолучитьДанныеИзБухгалтерии()
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
	
	Если v82 = Неопределено Тогда
		
		v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		Попытка
			v82 = v82COMОбъект.Connect(СтрокаПодключения);
			ПодключениеУстановлено = Истина;
		Исключение
			ПодключениеУстановлено = Ложь;
			Сообщить("Не удалось подключитьс к базе Бух");
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Запрос = v82.NewObject("Запрос");
	Запрос.Текст =
	
	
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет.Код КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1) КАК Субконто1,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2) КАК Субконто2,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто3) КАК Субконто3,
	|	ХозрасчетныйОстатки.СуммаКонечныйОстаток КАК СуммаОстатокБух,
	|	ХозрасчетныйОстатки.СуммаКонечныйОстатокДт КАК СуммаОстатокДтБух,
	|	ХозрасчетныйОстатки.СуммаКонечныйОстатокКт КАК СуммаОстатокКтБух,
	|	ХозрасчетныйОстатки.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаРазвернутыйОстатокДтБух,
	|	ХозрасчетныйОстатки.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаРазвернутыйОстатокКтБух,
	|	ХозрасчетныйОстатки.СуммаОборот КАК СуммаОборотБух,
	|	ХозрасчетныйОстатки.СуммаОборотДт КАК СуммаОборотДтБух,
	|	ХозрасчетныйОстатки.СуммаОборотКт КАК СуммаОборотКтБух,
	|	ХозрасчетныйОстатки.Организация.ИНН КАК ИНН,
	|	ХозрасчетныйОстатки.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДтБух,
	|	ХозрасчетныйОстатки.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКтБух,
	|	ХозрасчетныйОстатки.СуммаНачальныйОстаток КАК СуммаНачальныйОстатокБух,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Код ПОДОБНО ""68.01""
	|			ТОГДА ""000000010""
	|		КОГДА ХозрасчетныйОстатки.Счет.Код ПОДОБНО ""69.02.7""
	|			ТОГДА ""000000004""
	|		КОГДА ХозрасчетныйОстатки.Счет.Код ПОДОБНО ""69.11""
	|			ТОГДА ""000000008""
	|		КОГДА ХозрасчетныйОстатки.Счет.Код ПОДОБНО ""69.01""
	|			ТОГДА ""000000011""
	|		КОГДА ХозрасчетныйОстатки.Счет.Код ПОДОБНО ""69.03.1""
	|			ТОГДА ""000000006""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаНалога
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&МассивСчетов), , ) КАК ХозрасчетныйОстатки"; 
	
	МассивСчетов = v82.NewObject("Массив");   
	//МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	//МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.НДФЛ);     // 68.01
	МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПФР_ОПС);//69.02.7
	МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ); // 69.11
	МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ФСС);//69.1
	МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ФФОМС);//69.03.1
	
//	В бух базе(соответствие):
//НДФЛ 68.01 
//НС и ПЗ 69.11 
//Страховая часть в ПФР 69.02.7 
//ФСС 2,9% 69.01 
//ФФОМС 69.03.1

	                               
	Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",ДатаОкончания);
	Запрос.УстановитьПараметр("МассивСчетов",МассивСчетов);

	Результат = Запрос.Выполнить();
	
	ТЗ_Бухгалтерия = Новый ТаблицаЗначений;	
	ТЗ_Бухгалтерия.Колонки.Добавить("Счет", Новый ОписаниеТипов("Строка",, ,Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)));
	ТЗ_Бухгалтерия.Колонки.Добавить("Субконто1", Новый ОписаниеТипов("Строка"));
	ТЗ_Бухгалтерия.Колонки.Добавить("Субконто2", Новый ОписаниеТипов("Строка"));
	ТЗ_Бухгалтерия.Колонки.Добавить("Субконто3", Новый ОписаниеТипов("Строка"));
	
	ТЗ_Бухгалтерия.Колонки.Добавить("КодВидаНалога", Новый ОписаниеТипов("Строка",, ,Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)));
	
	ТЗ_Бухгалтерия.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка",, ,Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)));
	
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаОстатокБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаОстатокДТБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаОстатокКТБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаРазвернутыйОстатокБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаРазвернутыйОстатокДтБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой))); 
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаРазвернутыйОстатокКтБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаОборотБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаОборотДтБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой))); 
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаОборотКтБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаНачальныйОстатокБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой))); 
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаНачальныйОстатокДтБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой))); 
	ТЗ_Бухгалтерия.Колонки.Добавить("СуммаНачальныйОстатокКтБух", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));

	
	//ТЗ_Бухгалтерия.Колонки.Добавить("ВалютнаяСуммаОстаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//ТЗ_Бухгалтерия.Колонки.Добавить("ВалютнаяСуммаОстатокКт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//ТЗ_Бухгалтерия.Колонки.Добавить("ВалютнаяСуммаОстатокДт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//ТЗ_Бухгалтерия.Колонки.Добавить("ВалютнаяСуммаРазвернутыйОстатокДт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//ТЗ_Бухгалтерия.Колонки.Добавить("ВалютнаяСуммаРазвернутыйОстатокКт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//
	//ТЗ_Бухгалтерия.Колонки.Добавить("КоличествоОстаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//ТЗ_Бухгалтерия.Колонки.Добавить("КоличествоОстатокКт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//ТЗ_Бухгалтерия.Колонки.Добавить("КоличествоОстатокДт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//
	//ТЗ_Бухгалтерия.Колонки.Добавить("КоличествоРазвернутыйОстатокДт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	//ТЗ_Бухгалтерия.Колонки.Добавить("КоличествоРазвернутыйОстатокКт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));

	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТЗ_Бухгалтерия.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;											 
											 
	Возврат ТЗ_Бухгалтерия;
	
	
КонецФункции // ПолучитьДанныеИзБухгалтерии()

