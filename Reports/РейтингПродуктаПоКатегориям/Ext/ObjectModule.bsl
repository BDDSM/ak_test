
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	НаДату = '00010101';
	Группа = Справочники.ГруппыНоменклатурыУРЗ.ПустаяСсылка();
	
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "Период" Тогда
			НаДату = ПользПоле.Значение.Дата;
//			ДатаОкончания = КонецДня(ПользПоле.Значение.ДатаОкончания);
		КонецЕсли;	
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "Группа" И ПользПоле.Использование Тогда
			Группа = ПользПоле.Значение;
		КонецЕсли;	
	КонецЦикла;
	
 	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Возвраты", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Продажи", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаПродаж", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Списания", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Жалобы", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПродажиСоСкидкой", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПовторныеПродажи", Новый ОписаниеТипов("Число"));
								
	СтандартнаяОбработка = Ложь;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL();
	ADOСоединение.Open();
	
	//ТекстЗапроса = "exec sms_repl..Get_Sale_Vozvrat_Tov_Harakt_Data " + ВнешниеДанные.ФорматПоля(ДатаНачала, Истина) + ", " + ВнешниеДанные.ФорматПоля(ДатаОкончания, Истина);
	
	ТекстЗапроса = "exec Reports..GetGoodsRtngData " + ВнешниеДанные.ФорматПоля(НаДату-24*3600, Истина);
	Если Не Группа.Пустая() Тогда
		ТекстЗапроса = ТекстЗапроса+",'"+Группа.Код+"'"
	КонецЕсли;
	

	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
	//		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИД",Rs.Fields("id_kontr").Value);
			
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.id_tov = Rs.Fields("id_tov").Value;
			СтрокаДоб.id_kontr = Rs.Fields("id_kontr").Value;
			СтрокаДоб.Возвраты = Rs.Fields("QtyRet").Value;
			СтрокаДоб.Списания = Rs.Fields("QtyOff").Value;
			СтрокаДоб.Жалобы = Rs.Fields("QtyCom").Value;
			СтрокаДоб.Продажи = Rs.Fields("QtySale").Value;
			СтрокаДоб.СуммаПродаж = Rs.Fields("SumSale").Value;
			СтрокаДоб.ПродажиСоСкидкой = Rs.Fields("QtyDis").Value;
			СтрокаДоб.ПовторныеПродажи = Rs.Fields("QtyRep").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении данных SQL");
	КонецПопытки;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таб.id_kontr,
	|	Таб.id_tov,
	|	Таб.Продажи,
	|	Таб.СуммаПродаж,
	|	Таб.ПродажиСоСкидкой,
	|	Таб.ПовторныеПродажи,
	|	Таб.Жалобы,
	|	Таб.Списания,
	|	Таб.Возвраты
	|ПОМЕСТИТЬ Таб
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяССылка)) КАК Контрагент,
	|	Номенклатура.ГруппаНоменклатурыУРЗ КАК Категория,
	|	Таб.Продажи,
	|	Таб.СуммаПродаж,
	|	Таб.ПродажиСоСкидкой,
	|	Таб.ПовторныеПродажи,
	|	Таб.Жалобы,
	|	Таб.Списания,
	|	Таб.Возвраты
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	Таб КАК Таб
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Таб.id_tov = Номенклатура.id_tov
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Таб.id_kontr <> 0)
	|			И Таб.id_kontr = Контрагенты.ИД
	|ГДЕ
	|	(Номенклатура.ГруппаНоменклатурыУРЗ = &Группа
	|			ИЛИ &Группа = ЗНАЧЕНИЕ(Справочник.ГруппыНоменклатурыУРЗ.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.Контрагент КАК Поставщик,
	|	Т.Категория,
	|	Т.Продажи,
	|	Т.ПродажиСоСкидкой,
	|	Т.ПовторныеПродажи,
	|	Т.Жалобы,
	|	Т.Списания,
	|	Т.СуммаПродаж,
	|	ВЫБОР
	|		КОГДА ПродажиПоКатегориям.СуммаПродаж = 0
	|			ТОГДА 0
	|		ИНАЧЕ Т.СуммаПродаж / ПродажиПоКатегориям.СуммаПродаж
	|	КОНЕЦ * 100 КАК Доля,
	|	Т.Возвраты,
	|	ВЫБОР
	|		КОГДА ПродажиПоКатегориям.Жалобы = 0
	|			ТОГДА 0
	|		ИНАЧЕ Т.Жалобы / ПродажиПоКатегориям.Жалобы
	|	КОНЕЦ * 100 КАК ДоляЖалобы,
	|	ВЫБОР
	|		КОГДА ПродажиПоКатегориям.Списания = 0
	|			ТОГДА 0
	|		ИНАЧЕ Т.Списания / ПродажиПоКатегориям.Списания
	|	КОНЕЦ * 100 КАК ДоляСписания,
	|	ВЫБОР
	|		КОГДА ПродажиПоКатегориям.Возвраты = 0
	|			ТОГДА 0
	|		ИНАЧЕ Т.Возвраты / ПродажиПоКатегориям.Возвраты
	|	КОНЕЦ * 100 КАК ДоляВозвраты
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.Категория КАК Категория,
	|			СУММА(Т.СуммаПродаж) КАК СуммаПродаж,
	|			СУММА(Т.Жалобы) КАК Жалобы,
	|			СУММА(Т.Списания) КАК Списания,
	|			СУММА(Т.Возвраты) КАК Возвраты,
	|			СУММА(Т.Продажи) КАК Продажи
	|		ИЗ
	|			Т КАК Т
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.Категория) КАК ПродажиПоКатегориям
	|		ПО Т.Категория = ПродажиПоКатегориям.Категория";
	

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таб",ТаблицаДанных);
	Запрос.УстановитьПараметр("ГРуппа",Группа);
	РезультатЗапроса = Запрос.Выполнить();
	
	
//	ТаблицаДанных.Индексы.Добавить("Дата, Товар");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", РезультатЗапроса);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры
