
#Область ОбработчикиСобытийФормы

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("РасшифровкаПоТекущейПроверке") Тогда
		ДополнительныеСвойства = Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства;
		ДополнительныеСвойства.Вставить("РасшифровкаПоТекущейПроверке");
		
		Элементы.ГруппаВарианта.Видимость			= Ложь;
		Элементы.ФормаГруппаСформировать.Видимость	= Ложь;
		Элементы.ФормаГруппаВариант.Видимость		= Ложь;
		Элементы.ГруппаПараметры.Видимость			= Ложь;
		
		Заголовок = НСтр("ru = 'Детализированный'");
	КонецЕсли;
	
	ЭтаФорма.СформироватьСразу			= Параметры.СформироватьПриОткрытии; // Чтобы отобразить форму перед запуском формирования отчета
	Параметры.СформироватьПриОткрытии	= Ложь;

КонецПроцедуры

//+++АК LATV 2018.06.10 ИП-00017712.01
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если СформироватьСразу Тогда
		СформироватьОтчет();
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.15 ИП-00017712.01
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)

	ЗаполнитьПараметрыОтчета();
	ЗаполнитьСвязанныеРеквизитыФормы();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	УстановитьПараметрОтчета("ПериодОтчета", ПериодОтчета);
КонецПроцедуры

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьПараметрОтчета("Организация", Организация);
КонецПроцедуры

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура ПроверкиПриИзменении(Элемент)
	УстановитьПараметрОтчета("Проверки", Проверки);
КонецПроцедуры

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаКлиенте
Процедура ПроверкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьПараметрОтчета("Проверки", Проверки);
КонецПроцедуры

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура ТолькоРасхожденияПриИзменении(Элемент)
	УстановитьПараметрОтчета("ТолькоРасхождения", ТолькоРасхождения);
КонецПроцедуры

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	ОбработкаРасшифровкиОтчета(Элемент, Расшифровка, СтандартнаяОбработка, Истина);

КонецПроцедуры

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	ОбработкаРасшифровкиОтчета(Элемент, Расшифровка, СтандартнаяОбработка, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

//+++АК LATV 2018.06.10 ИП-00017712.01
&НаКлиенте
Процедура Сформировать(Команда)

	СформироватьОтчет();

КонецПроцедуры

//+++АК LATV 2018.06.15 ИП-00017712.01
&НаКлиенте
Процедура ИзменитьВидимостьПараметров(Команда)

	УстановитьВидимостьПараметров(Не Элементы.ГруппаПараметры.Видимость);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++АК LATV 2018.06.10 ИП-00017712.01
&НаКлиенте
Процедура УстановитьПараметрОтчета(ИмяПараметра, ЗначениеПараметра)

	Модифицированность = Истина;
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		ИмяПараметра, ЗначениеПараметра);
	
	Если ТипЗнч(ДлительнаяОперация) = Тип("Структура") Тогда
		ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");

КонецПроцедуры

//+++АК LATV 2018.06.15 ИП-00017712.01
&НаКлиенте
Процедура УстановитьВидимостьПараметров(ВидимостьПараметров)

	Элементы.ГруппаПараметры.Видимость = ВидимостьПараметров;
	Элементы.ФормаИзменитьВидимостьПараметров.Заголовок = 
		?(ВидимостьПараметров, НСтр("ru = 'Скрыть параметры'"), НСтр("ru = 'Показать параметры'"));

КонецПроцедуры

//+++АК LATV 2018.06.15 ИП-00017712.01
&НаСервере
Процедура ЗаполнитьПараметрыОтчета()

	Перем ЗначенияЗаполнения;
	
	Если Не Параметры.Свойство("ЗначенияЗаполнения", ЗначенияЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗначениеОтбора Из ЗначенияЗаполнения Цикл
		Если ЗначениеОтбора.Ключ = "Проверки"
		   И ТипЗнч(ЗначениеОтбора.Значение) = Тип("Массив") Тогда
			ЗначениеПараметра = Новый СписокЗначений;
			ЗначениеПараметра.ЗагрузитьЗначения(ЗначениеОтбора.Значение);
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЗначениеОтбора.Ключ, ЗначениеПараметра);
		Иначе
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЗначениеОтбора.Ключ, ЗначениеОтбора.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.06.15 ИП-00017712.01
&НаСервере
Процедура ЗаполнитьСвязанныеРеквизитыФормы()

	ДанныеЗаполнения = Новый Структура("ПериодОтчета, Организация, ТолькоРасхождения");
	ДанныеЗаполнения.Вставить("Проверки", Новый СписокЗначений);
	
	ПараметрыОтчета = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	Для Каждого ТекСтрокаПараметров Из ПараметрыОтчета Цикл
		Если ТекСтрокаПараметров.Использование Тогда
			ДанныеЗаполнения.Вставить(Строка(ТекСтрокаПараметров.Параметр), ТекСтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Проверки.ЗагрузитьЗначения(ДанныеЗаполнения.Проверки.ВыгрузитьЗначения());
	ДанныеЗаполнения.Удалить("Проверки");
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЗаполнения);

КонецПроцедуры

#Область Расшифровка

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура ОбработкаРасшифровкиОтчета(Элемент, Расшифровка, СтандартнаяОбработка, ИспользоватьОсновноеДействие)

	Перем ДоступныеДействия, ДополнительныеДействия;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки
		, Отчет.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Расшифровка", Расшифровка);
	
	ДанныеРасшифровкиОтчета = ДанныеРасшифровкиОтчета(ДанныеРасшифровки, Расшифровка);
	Если ДанныеРасшифровкиОтчета.Свойство("Проверка") Тогда
		ДополнительныеДействия = Новый СписокЗначений;
		ДополнительныеДействия.Добавить("РасшифровкаПоТекущейПроверке", НСтр("ru = 'Детально'"));
		
		ПараметрыОповещения.Вставить("Проверка", ДанныеРасшифровкиОтчета.Проверка);
	Иначе
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаРасшифровкиОтчетаЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(Оповещение, Расшифровка
		, ДоступныеДействия, ДополнительныеДействия, ИспользоватьОсновноеДействие);

КонецПроцедуры

//+++АК LATV 2018.06.08 ИП-00017712.01
&НаКлиенте
Процедура ОбработкаРасшифровкиОтчетаЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если ПараметрВыполненногоДействия <> Неопределено Тогда
		
		// Стандартные действия расшифровки в новом окне отчета
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ПоказатьЗначение(, ПараметрВыполненногоДействия);
			
		Иначе
			РасшифровкаДействия = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки
				, ДополнительныеПараметры.Расшифровка, ПараметрВыполненногоДействия);
			
			ЗначенияЗаполнения = Новый Структура("ПериодОтчета, Организация, ТолькоРасхождения");
			ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ЭтаФорма);
			ЗначенияЗаполнения.Вставить("Проверки", Проверки.ВыгрузитьЗначения());
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СформироватьПриОткрытии",	Истина);
			ПараметрыФормы.Вставить("Расшифровка",				РасшифровкаДействия);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения",		ЗначенияЗаполнения);
			
			ОткрытьФорму("Отчет.СравнениеОборотовМеждуБазами.Форма", ПараметрыФормы, ЭтаФорма, Истина);
			
		КонецЕсли;
		
	ИначеЕсли ВыполненноеДействие = "РасшифровкаПоТекущейПроверке" Тогда
		
		СписокПроверок = Новый Массив;
		СписокПроверок.Добавить(ДополнительныеПараметры.Проверка);
		
		ЗначенияЗаполнения = Новый Структура("ПериодОтчета, Организация, ТолькоРасхождения");
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ЭтаФорма);
		ЗначенияЗаполнения.Вставить("Проверки", СписокПроверок);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",		Истина);
		ПараметрыФормы.Вставить("РасшифровкаПоТекущейПроверке",	Истина);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",			ЗначенияЗаполнения);
		
		ОткрытьФорму("Отчет.СравнениеОборотовМеждуБазами.Форма", ПараметрыФормы, ЭтаФорма
			, ДополнительныеПараметры.Проверка.УникальныйИдентификатор());
		
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.08 ИП-00017712.01
// Возвращает структуру значений полей расшифровки
//
// Параметры
//  Расшифровка - Произвольный - Значение расшифровки точки, серии или значения диаграммы.
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Содержит данные расшифровки последнего выполненного отчета.
//
// Возвращаемое значение:
//   Структура - Содержит значения полей для отбора
//
&НаСервереБезКонтекста
Функция ДанныеРасшифровкиОтчета(ДанныеРасшифровки, Расшифровка)

	ДанныеРасшифровкиОтчета = Новый Структура();
	
	ДанныеРасшифровкиКД = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	// Отбор по данным строки
	ДанныеСтроки = ПолучитьРасшифровкуСтроки(ДанныеРасшифровкиКД, Расшифровка);
	
	Если ДанныеСтроки.Свойство("Проверка") Тогда
		ДанныеРасшифровкиОтчета.Вставить("Проверка", ДанныеСтроки.Проверка);
	КонецЕсли;
	
	Возврат ДанныеРасшифровкиОтчета;

КонецФункции

#Область Инфостарт_ПолучениеДанныхСтрокиИзРасшифровки

&НаСервереБезКонтекста
Функция ПолучитьРасшифровкуСтроки(ДанныеРасшифровки, Расшифровка)
	
	РасшифровкаСтроки = Новый Структура;
	
	// Сначала получим данные расшифровки в группировках (т.к. это поможет при считывании данных к концу отчета)
	ПолучитьРасшифровкуВГруппировках(ДанныеРасшифровки, ДанныеРасшифровки.Элементы[Расшифровка], РасшифровкаСтроки);
	
	ИмяПервогоПоля = ПолучитьИмяПервогоПоляВСтрокеОтчета(ДанныеРасшифровки, ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле);
	Если ИмяПервогоПоля = Неопределено Тогда
		Возврат РасшифровкаСтроки;
	КонецЕсли;
	
	// Считываем данные расшифровок к началу отчета пока не упремся в ИмяПервогоПоля
	// включая текущую расшифровку
	Смещение = 0;
	Индекс = Число(Расшифровка);
	Пока Истина Цикл
		Если Индекс < 0 Тогда
			// Уперлись в начало отчета а не в группировку
			Прервать;
		КонецЕсли;
		
		ТекущийЭл = ДанныеРасшифровки.Элементы[Индекс];
		Если ТипЗнч(ТекущийЭл) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			// Считали все расшифровки вверх и не нашли первого поля
			Прервать; // все данные получены
		КонецЕсли;
		
		Для каждого ПолеРасшифровки Из ТекущийЭл.ПолучитьПоля() Цикл
			Если РасшифровкаСтроки.Свойство(ИмяСв(ПолеРасшифровки.Поле)) = Ложь Тогда
				РасшифровкаСтроки.Вставить(ИмяСв(ПолеРасшифровки.Поле), ПолеРасшифровки.Значение);
			Иначе
				// Добавлено повторяющееся поле при ходе вверх
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийЭл.ПолучитьПоля()[0].Поле = ИмяПервогоПоля Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Считываем данные расшифровок к концу отчета
	// исключая текущую расшифровку
	Индекс = Расшифровка + 1;
	Пока Истина Цикл
 
		// - до конца отчета или
		// - до группировки или
		// - до первого поля(начало след строки) или
		// - до полей группировки следующих строк (если такое поле уже есть)
		Если Индекс >= ДанныеРасшифровки.Элементы.Количество() ИЛИ
			ТипЗнч(ДанныеРасшифровки.Элементы[Индекс]) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") ИЛИ
			ДанныеРасшифровки.Элементы[Индекс].ПолучитьПоля()[0].Поле = ИмяПервогоПоля ИЛИ
			РасшифровкаСтроки.Свойство(ИмяСв(ДанныеРасшифровки.Элементы[Индекс].ПолучитьПоля()[0].Поле)) Тогда
			Прервать;
		КонецЕсли;
		
		Для каждого ПолеРасшифровки Из ДанныеРасшифровки.Элементы[Индекс].ПолучитьПоля() Цикл
			//Если РасшифровкаСтроки.Свойство(ИмяСв(ПолеРасшифровки.Поле)) = Ложь Тогда проверка выше
				РасшифровкаСтроки.Вставить(ИмяСв(ПолеРасшифровки.Поле), ПолеРасшифровки.Значение);
			//КонецЕсли;
		КонецЦикла;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат РасшифровкаСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяПервогоПоляВСтрокеОтчета(ДанныеРасшифровки, ИмяПоляВГруппировке)
	
	// Найдем индекс первого вхождения ИмяПоляВГруппировке в отчет
	Индекс = 0;
	Пока Истина Цикл
		Если Индекс >= ДанныеРасшифровки.Элементы.Количество() Тогда
			// Не нашли элемент поле в отчете
			Возврат Неопределено;
		КонецЕсли;
		
		ТекущийЭл = ДанныеРасшифровки.Элементы[Индекс];
		
		Если ТипЗнч(ТекущийЭл) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") И		
			ТекущийЭл.ПолучитьПоля()[0].Поле = ИмяПоляВГруппировке Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	
	// Найдем имя первого поля
	Пока Истина Цикл
		
		// уперлись в начало отчета или группу
		Если Индекс < 0 ИЛИ 
			ТипЗнч(ДанныеРасшифровки.Элементы[Индекс]) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Если Индекс < 0 Тогда
				// Уперлись в начало отчета а не в группировку
			КонецЕсли;
			Возврат ДанныеРасшифровки.Элементы[Индекс + 1].ПолучитьПоля()[0].Поле;
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// ЭлементРасшифровки - у которого ищем родителей
// Необходимые нам элементы заключены между (снизу) "элемент группировка" и (сверху) повторяющийся "элемент поля"
&НаСервереБезКонтекста
Процедура ПолучитьРасшифровкуВГруппировках(ДанныеРасшифровки, ЭлементРасшифровки, РасшифровкаСтроки)
		
	МассивРодителейЭлементаРасшифровки = ЭлементРасшифровки.ПолучитьРодителей();
	Если МассивРодителейЭлементаРасшифровки.Количество() = 0 Тогда
		// Нет родителей у расшифровки
		Возврат;
	КонецЕсли;
	
	//МассивРодителейЭлементаРасшифровки[0] это "элемент группировка", раньше которой идут "элементы поля" нужные нам 
	Индекс = Число(МассивРодителейЭлементаРасшифровки[0].Идентификатор);
	Если Индекс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭл = ДанныеРасшифровки.Элементы[Индекс];
	Если ТипЗнч(ТекущийЭл) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда // "поле группировки"
		ПолучитьРасшифровкуВГруппировках(ДанныеРасшифровки, ТекущийЭл, РасшифровкаСтроки);
		// В групперовке уперлись сверху в элемент группировки
		Возврат;
		
	ИначеЕсли РасшифровкаСтроки.Свойство(ИмяСв(ТекущийЭл.ПолучитьПоля()[0].Поле)) Тогда // повторяющийся "элемент поле"
		// рекурсивно ищем в группировках выше
		ПолучитьРасшифровкуВГруппировках(ДанныеРасшифровки, ТекущийЭл, РасшифровкаСтроки);
		
		Если ТекущийЭл.ПолучитьПоля().Количество() > 1 Тогда
			// Количество полей в повторяющемся элементе больше 1
		КонецЕсли;
		Возврат;	
		
	//ИначеЕсли РодительскийЭлемент[0].Идентификатор <> ТекущийЭл.ПолучитьРодителей()[0].Идентификатор Тогда  // - текущий элемент не из др группы	
	КонецЕсли;
	
	Для Каждого ПолеРасшифровки Из ТекущийЭл.ПолучитьПоля() Цикл
		Если РасшифровкаСтроки.Свойство(ИмяСв(ПолеРасшифровки.Поле)) = Ложь Тогда
			РасшифровкаСтроки.Вставить(ИмяСв(ПолеРасшифровки.Поле), ПолеРасшифровки.Значение);
		Иначе
			// Добавлено повторяющееся поле (в группировках)
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьРасшифровкуВГруппировках(ДанныеРасшифровки, ТекущийЭл, РасшифровкаСтроки);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСв(Текст)
	Возврат СтрЗаменить(Текст, "." , "_");
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ФормированиеОтчета

//+++АК LATV 2018.06.10 ИП-00017712.01
&НаКлиенте
Процедура СформироватьОтчет()

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("СформироватьОтчетОтложенно", 0.1, Истина);

КонецПроцедуры

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаКлиенте
Процедура СформироватьОтчетОтложенно()

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.Результат, "ФормированиеОтчета");
	
	ЭтаФорма.ДлительнаяОперация = СформироватьОтчетНаСервере();
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаСервере
Функция СформироватьОтчетНаСервере()

	// Выполняемый метод
	ПолноеИмяОбъекта = РеквизитФормыВЗначение("Отчет").Метаданные().ПолноеИмя();
	ИмяМетода = ПолноеИмяОбъекта + ".МодульОбъекта.СформироватьОтчетВФоне";
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("Настройки", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	Если Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("РасшифровкаПоТекущейПроверке") Тогда
		ПараметрыМетода.Вставить("РасшифровкаПоТекущейПроверке");
	КонецЕсли;
	
	// Запуск фонового задания
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, ПараметрыВыполнения);

КонецФункции

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ПоказатьОповещение();
		ЗагрузитьПодготовленныеДанные();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДлительнаяОперация, ОперацияВыполнена(ДлительнаяОперация.ИдентификаторЗадания));
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания"
		, ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаСервереБезКонтекста
Функция ОперацияВыполнена(ИдентификаторЗадания)

	Возврат ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания);

КонецФункции

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	СтруктураДанных = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Результат			= СтруктураДанных.ДокументРезультат;
	ЭтаФорма.ДанныеРасшифровки	= ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеРасшифровки, УникальныйИдентификатор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.Результат, "НеИспользовать");

КонецПроцедуры

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаКлиенте
Процедура ПоказатьОповещение()

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	
	ПараметрыОжидания.ОповещениеПользователя.Показать	= Истина;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение	= НСтр("ru = 'Отчет сформирован'");
	
	ДлительныеОперацииКлиент.ПоказатьОповещение(ПараметрыОжидания);

КонецПроцедуры

//+++АК LATV 2018.08.07 ИП-00017712.02
&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

#КонецОбласти
