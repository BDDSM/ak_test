
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДатаНачала = '00010101';
	ДатаОкончания = '00010101';
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "Период" Тогда
			ДатаНачала = ПользПоле.Значение.ДатаНачала;
			ДатаОкончания = КонецДня(ПользПоле.Значение.ДатаОкончания);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("ЦФО", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ВремяДоставки", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("КолвоТТН", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КоличествоВетСправок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ТемператураТовараПриПоставке", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("НетВетСправки", Новый ОписаниеТипов("Число"));
								
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ДатаОкончания);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НомерТочки <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.id_tov <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	               |ИЗ
	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ТекДата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабКешТТ = Результаты[0].Выгрузить();
	ТабКешТовары = Результаты[1].Выгрузить();
	ТабКешЦФО = Результаты[2].Выгрузить();
	ТабКешТТ.Индексы.Добавить("НомерТочки");
	ТабКешТовары.Индексы.Добавить("id_tov");
	ТабКешЦФО.Индексы.Добавить("СтруктурнаяЕдиница");
				   
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT CAST(TD.Id_doc as nvarchar(50)) id_doc
					  |	,TD.closedate
					  |	,TD.id_tov
					  |	,TD.Quantity
					  |	,UINTT._Fld4946 as TTUID
					  |	,UINTov._Fld4946 as TovarUID
					  |	,TD.ShopNo_rep
					  |	,CAST(TD.time_delivery as datetime) as time_delivery
					  |	,TD.KolvoTTN
					  |	,TD.KolvoVetDoc
					  |	,TD.TemperaturePriPostavke
					  |	,ISNULL(TD.OtsutstvuetVetSpravkaNaTovar, 0) OtsutstvuetVetSpravkaNaTovar
					  |FROM [SMS_REPL].[dbo].[TD_move] as TD (nolock)
					  |LEFT OUTER JOIN M2.dbo.tt as M2 ON TD.ShopNo_rep = M2.N
					  |LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON M2.id_tt = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
					  |LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON TD.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
					  | where TD.closedate between " + ВнешниеДанные.ФорматПоля(ДатаНачала) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаОкончания)) + " and TD.operation_type = 400";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.Документ = Документы.РасходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("id_doc").Value));
			//Если Найти(СтрокаДоб.Документ, "<Объект не найден") > 0 Тогда
			//	СтрокаДоб.Документ = Документы.РасходныйОрдерСклад.ПустаяСсылка();
			//КонецЕсли;
			//СтрокаКешТТ = ТабКешТТ.Найти(Rs.Fields("ShopNo_rep").Value, "НомерТочки");
			//Если СтрокаКешТТ <> Неопределено Тогда
			//	СтрокаДоб.Магазин = СтрокаКешТТ.Ссылка;
			//КонецЕсли;
			//СтрокаКешТовар = ТабКешТовары.Найти(Rs.Fields("id_tov").Value, "id_tov");
			//Если СтрокаКешТовар <> Неопределено Тогда
			//	СтрокаДоб.Номенклатура = СтрокаКешТовар.Ссылка;
			//КонецЕсли;
			СтрокаДоб.Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаКешЦФО = ТабКешЦФО.Найти(СтрокаДоб.Магазин, "СтруктурнаяЕдиница");
			Если СтрокаКешЦФО <> Неопределено Тогда
				СтрокаДоб.ЦФО = СтрокаКешЦФО.ЦФО;
			КонецЕсли;
			СтрокаДоб.Дата = НачалоДня(Rs.Fields("closedate").Value);
			СтрокаДоб.Количество = Rs.Fields("Quantity").Value;
			СтрокаДоб.ВремяДоставки = Rs.Fields("time_delivery").Value;
			СтрокаДоб.КолвоТТН = Rs.Fields("KolvoTTN").Value;
			СтрокаДоб.КоличествоВетСправок = Rs.Fields("KolvoVetDoc").Value;
			СтрокаДоб.ТемператураТовараПриПоставке = Rs.Fields("TemperaturePriPostavke").Value;
			СтрокаДоб.НетВетСправки = Rs.Fields("OtsutstvuetVetSpravkaNaTovar").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабДанные", ТаблицаДанных);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры
