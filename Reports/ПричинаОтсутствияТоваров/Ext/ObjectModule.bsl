Функция ПолучитьПользовательскуюНастройку(ИдентификаторПользовательскойНастройки)
	
	ЗначениеВозврата = Неопределено;
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользПоле.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат ПользПоле;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции	

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	//ДатаНачала = '00010101';
	//ДатаОкончания = '00010101';
	//Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
	//	Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
	//		И Строка(ПользПоле.Параметр) = "Период" Тогда
	//		ДатаНачала = ПользПоле.Значение.ДатаНачала;
	//		ДатаОкончания = КонецДня(ПользПоле.Значение.ДатаОкончания);
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//МассивТовары = Новый Массив();
	//ЕстьОтборТовары = Ложь;
	//Для Каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
	//	Если ЭлементОтбор.ПредставлениеПользовательскойНастройки = "Номенклатура" Тогда
	//		ОтборТ = ПолучитьПользовательскуюНастройку(ЭлементОтбор.ИдентификаторПользовательскойНастройки);
	//		Если ОтборТ <> Неопределено
	//			И ОтборТ.Использование = Истина Тогда
	//			Если ОтборТ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
	//				ЕстьОтборТовары = Истина;
	//				МассивТовары.Добавить(ОтборТТ.ПравоеЗначение);
	//			КонецЕсли;	
	//			Если ОтборТ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
	//				ЕстьОтборТовары = Истина;
	//				Для Каждого ЭлементТ Из ОтборТ.ПравоеЗначение Цикл
	//					МассивТовары.Добавить(ЭлементТТ.Значение);
	//				КонецЦикла;	
	//			КонецЕсли;	
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЦикла;
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("id_ТТ", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("ОстатокНаТочке", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КолвоТехнолог", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПодозрительныйОстаток", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Итого", Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	МассивТоваровПоставщиков = Новый Массив();
	Если Поставщики.Количество() > 0 Тогда
		ЗапросРеквизиты = Новый Запрос();
		ЗапросРеквизиты.УстановитьПараметр("Поставщики", Поставщики);
		ЗапросРеквизиты.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                        |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Объект
		                        |ИЗ
		                        |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		                        |ГДЕ
		                        |	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		                        |	И ЗначенияСвойствОбъектов.Значение В(&Поставщики)
		                        |	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры";
		
		МассивТоваровПоставщиков = ЗапросРеквизиты.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	КонецЕсли;	
	
	//Если МассивТоваровПоставщиков <> Неопределено Тогда
		ЗапросРеквизиты = Новый Запрос();
		ЗапросРеквизиты.Текст = "ВЫБРАТЬ
		                        |	Номенклатура.Ссылка,
		                        |	Номенклатура.id_tov
		                        |ИЗ
		                        |	Справочник.Номенклатура КАК Номенклатура
		                        |ГДЕ
		                        |	(Номенклатура.Ссылка В (&Номенклатура)
		                        |			ИЛИ &ЕстьОтборПоТовару = ЛОЖЬ)
		                        |	И (Номенклатура.Ссылка В (&ПоставщикиТовар)
		                        |			ИЛИ &ЕстьОтборПоПоставщику = ЛОЖЬ)";
								
		ЗапросРеквизиты.УстановитьПараметр("Номенклатура", Номенклатура);
		ЗапросРеквизиты.УстановитьПараметр("ЕстьОтборПоТовару", Номенклатура.Количество() > 0);
		ЗапросРеквизиты.УстановитьПараметр("ПоставщикиТовар", МассивТоваровПоставщиков);
		ЗапросРеквизиты.УстановитьПараметр("ЕстьОтборПоПоставщику", МассивТоваровПоставщиков.Количество() > 0);
		
		ТабНоменклатура = ЗапросРеквизиты.Выполнить().Выгрузить();
	//Иначе	
	//	ЗапросРеквизиты = Новый Запрос();
	//	ЗапросРеквизиты.Текст = "ВЫБРАТЬ
	//							|	Номенклатура.Ссылка,
	//							|	Номенклатура.id_tov
	//							|ИЗ
	//							|	Справочник.Номенклатура КАК Номенклатура
	//							|ГДЕ
	//							|	Номенклатура.Ссылка В(&Номенклатура)";
	//							
	//	ЗапросРеквизиты.УстановитьПараметр("Номенклатура", Номенклатура);
	//	
	//	ТабНоменклатура = ЗапросРеквизиты.Выполнить().Выгрузить();
	//КонецЕсли;	
	СтрокаОтборНоменклатура = "99999999";
	
	Если Номенклатура.Количество() > 0 Тогда
		Для Каждого ЭлементНоменклатура Из Номенклатура Цикл
			Если ЗначениеЗаполнено(ЭлементНоменклатура.Значение) Тогда
				СтрокаСпр = ТабНоменклатура.Найти(ЭлементНоменклатура.Значение, "Ссылка");
				СтрокаОтборНоменклатура = СтрокаОтборНоменклатура + ", " + Формат(СтрокаСпр.id_tov, "ЧГ=0");
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	СтрЗапрос = "exec M2..ostatki_tt_tov_kontr_currdate " + ?(Номенклатура.Количество() > 0, "'" + СтрокаОтборНоменклатура + "'", "null") + ", null";
	//СтрЗапрос = "exec M2..ostatki_tt_tov_currdate " + ?(Номенклатура.Количество() > 0, "'" + СтрокаОтборНоменклатура + "'", "null") + ", null, 0";
	
	//СтрЗапрос = "SELECT Ostatki.ID_tov, Ostatki.ID_TT, Ostatki.Amount
	//			|FROM [SMS_UNION].[dbo].[AccArticle] as Ostatki (nolock)
	//			|INNER JOIN (SELECT Ostatki.ID_TT as id_tt,
	//			|	  Ostatki.ID_tov,
	//			|	  MAX(Ostatki.Period) as MaxPeriod
	//			|  FROM [SMS_UNION].[dbo].[AccArticle] as Ostatki (nolock)
	//			|  GROUP BY
	//			|  Ostatki.ID_TT,
	//			|	  Ostatki.ID_tov) as MaxOstatki
	//			|	  ON Ostatki.ID_tov = MaxOstatki.ID_tov
	//			|	  and Ostatki.ID_TT = MaxOstatki.id_tt
	//			|	  and Ostatki.Period = MaxOstatki.MaxPeriod
	//			|WHERE Ostatki.Amount > 0
	//			|	  " + ?(Номенклатура.Количество() > 0, " and Ostatki.ID_tov IN (" + СтрокаОтборНоменклатура + ")", "");
				
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.id_ТТ 		= Rs.Fields("ID_TT").Value;
			СтрокаДоб.id_tov 		= Rs.Fields("ID_tov").Value;
			СтрокаДоб.id_kontr 		= Rs.Fields("id_kontr").Value;
			СтрокаДоб.ОстатокНаТочке 		= Rs.Fields("kol").Value;   
			//СтрокаДоб.КолвоТехнолог 		= Rs.Fields("kolvoZadach_Teh").Value;   
			//СтрокаДоб.ПодозрительныйОстаток 		= Rs.Fields("podozrOst").Value;   
			СтрокаДоб.Итого 		= Rs.Fields("itogoKol").Value;   
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//ADOСоединение.Close();
	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таб.id_ТТ,
		|	Таб.ID_tov,
		|	Таб.ID_kontr,
		|	Таб.ОстатокНаТочке,
		|	Таб.КолвоТехнолог,
		|	Таб.ПодозрительныйОстаток,
		|	Таб.Итого
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЗ_Запрос.ОстатокНаТочке,
		|	ВЗ_Запрос.Номенклатура,
		|	ВЗ_Запрос.ТорговаяТочка КАК ТТ,
		|	ВЗ_Запрос.КоординатыШирота,
		|	ВЗ_Запрос.КоординатыДолгота,
		|	ЗначенияСвойствОбъектов.Значение КАК Поставщик,
		|	ВЗ_Запрос.КолвоТехнолог,
		|	ВЗ_Запрос.ПодозрительныйОстаток,
		|	ВЗ_Запрос.Итого,
		|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры,
		|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики,
		|	ХарактеристикиНоменклатуры.СтатусУРЗ
		|ПОМЕСТИТЬ ПредварительныеДанные
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Данные.ОстатокНаТочке КАК ОстатокНаТочке,
		|		Номенклатура.Ссылка КАК Номенклатура,
		|		СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
		|		СтруктурныеЕдиницы.КоординатыШирота КАК КоординатыШирота,
		|		СтруктурныеЕдиницы.КоординатыДолгота КАК КоординатыДолгота,
		|		ВТ_Данные.ID_kontr КАК ID_kontr,
		|		ВТ_Данные.КолвоТехнолог КАК КолвоТехнолог,
		|		ВТ_Данные.ПодозрительныйОстаток КАК ПодозрительныйОстаток,
		|		ВТ_Данные.Итого КАК Итого
		|	ИЗ
		|		ВТ_Данные КАК ВТ_Данные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|			ПО ВТ_Данные.id_ТТ = СтруктурныеЕдиницы.id_TT
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ПО ВТ_Данные.ID_tov = Номенклатура.id_tov) КАК ВЗ_Запрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ВЗ_Запрос.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|			И ВЗ_Запрос.ID_kontr = ХарактеристикиНоменклатуры.id_kontr
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект КАК Характеристика,
		|			ЗначенияСвойствОбъектов.Значение КАК Значение
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)) КАК ЗначенияСвойствОбъектов
		|		ПО (ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Характеристика)
		|ГДЕ
		|	(ЗначенияСвойствОбъектов.Значение В (&Поставщики)
		|			ИЛИ &ЕстьОтборПоПоставщикам = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварныйАссортиментТочекСрезПоследних.Период,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
		|	ТоварныйАссортиментТочекСрезПоследних.Выведена,
		|	ТоварныйАссортиментТочекСрезПоследних.Запрещена,
		|	ТоварныйАссортиментТочекСрезПоследних.Автор
		|ПОМЕСТИТЬ ТоварныйАссортиментТочекСрезПоследних
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			,
		|			(Номенклатура, ТорговаяТочка) В
		|				(ВЫБРАТЬ
		|					ПредварительныеДанные.Номенклатура,
		|					ПредварительныеДанные.ТТ
		|				ИЗ
		|					ПредварительныеДанные КАК ПредварительныеДанные)) КАК ТоварныйАссортиментТочекСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредварительныеДанные.Номенклатура КАК Номенклатура,
		|	АналогиНоменклатуры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ АналогиНоменклатуры
		|ИЗ
		|	ПредварительныеДанные КАК ПредварительныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
		|		ПО ПредварительныеДанные.Номенклатура = АналогиНоменклатурыТовары.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры КАК АналогиНоменклатуры
		|		ПО (АналогиНоменклатурыТовары.Ссылка = АналогиНоменклатуры.Ссылка)
		|ГДЕ
		|	НЕ АналогиНоменклатуры.ПометкаУдаления
		|	И АналогиНоменклатуры.ПолностьюЗаменяемыйТовар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредварительныеДанные.ОстатокНаТочке,
		|	ПредварительныеДанные.Номенклатура,
		|	ПредварительныеДанные.ТТ,
		|	ПредварительныеДанные.КоординатыШирота,
		|	ПредварительныеДанные.КоординатыДолгота,
		|	ПредварительныеДанные.Поставщик,
		|	ПредварительныеДанные.КолвоТехнолог,
		|	ПредварительныеДанные.ПодозрительныйОстаток,
		|	ПредварительныеДанные.Итого,
		|	ПредварительныеДанные.ХарактеристикаНоменклатуры,
		|	ПредварительныеДанные.СтатусАктивностиХарактеристики КАК Статус,
		|	ПредварительныеДанные.СтатусУРЗ,
		|	0 КАК КЗаказу,
		|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК АссортиментДата,
		|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Выведена, ИСТИНА) КАК АссортиментВыведена,
		|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Запрещена, ЛОЖЬ) КАК АссортиментЗапрещена,
		|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Автор, """") КАК АссортиментАвтор,
		|	АналогиНоменклатурыТовары.Номенклатура КАК Аналог
		|ИЗ
		|	ПредварительныеДанные КАК ПредварительныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварныйАссортиментТочекСрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
		|		ПО ПредварительныеДанные.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
		|			И ПредварительныеДанные.ТТ = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
		|		ЛЕВОЕ СОЕДИНЕНИЕ АналогиНоменклатуры КАК АналогиНоменклатуры
		|		ПО ПредварительныеДанные.Номенклатура = АналогиНоменклатуры.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
		|		ПО (АналогиНоменклатуры.Ссылка = АналогиНоменклатурыТовары.Ссылка)
		|			И (НЕ ПредварительныеДанные.Номенклатура = АналогиНоменклатурыТовары.Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПредварительныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварныйАссортиментТочекСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АналогиНоменклатуры");
	Запрос.УстановитьПараметр("Таб", ТаблицаДанных);
	Запрос.УстановитьПараметр("ЕстьОтборПоПоставщикам", Поставщики.Количество() > 0);
	Запрос.УстановитьПараметр("Поставщики", Поставщики);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДанных.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КоординатыШиротаСтр", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КоординатыДолготаСтр", Новый ОписаниеТипов("Строка"));
	
	ТаблицаКопия = ТаблицаДанных.Скопировать();
	ТаблицаКопия.Свернуть("ТТ, КоординатыШирота, КоординатыДолгота", "Расстояние");
	
	Для Каждого СтрокаКеш Из ТаблицаКопия Цикл
		СтрЗапрос = "SELECT [master].[dbo].[CoordinatesToDistance] (" + Формат(СтрокаКеш.КоординатыШирота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ","
																	+ Формат(СтрокаКеш.КоординатыДолгота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ","
																	+ Формат(КоординатыШирота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ","
																	+ Формат(КоординатыДолгота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ")";
				
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			СтрокаКеш.Расстояние 		= Rs.Fields(0).Value;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ТаблицаКопия.Индексы.Добавить("ТТ");
	
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		//РазницаШирота = СтрокаТаб.КоординатыШирота - КоординатыШирота;
		//РазницаШирота = РазницаШирота * ?(РазницаШирота < 0, -1, 1);
		//РазницаДолгота = СтрокаТаб.КоординатыДолгота - КоординатыДолгота;
		//РазницаДолгота = РазницаДолгота * ?(РазницаДолгота < 0, -1, 1);
		//СтрокаТаб.Расстояние = Sqrt(РазницаШирота * РазницаШирота + РазницаДолгота * РазницаДолгота);
		СтрокаКеш = ТаблицаКопия.Найти(СтрокаТаб.ТТ, "ТТ");
		СтрокаТаб.Расстояние = СтрокаКеш.Расстояние;
		СтрокаТаб.КоординатыШиротаСтр = СтрокаТаб.КоординатыШирота;
		СтрокаТаб.КоординатыДолготаСтр = СтрокаТаб.КоординатыДолгота;
		
	КонецЦикла;
	
	//ОпТипов_Строка = Новый ОписаниеТипов("Строка");
	//ОпТипов_Булево = Новый ОписаниеТипов("Булево");
	//ТаблицаДанных.Колонки.Добавить("Аналог", ОпТипов_Строка);
	//ТаблицаДанных.Колонки.Добавить("АссортиментДата", Новый ОписаниеТипов("Дата"));
	//ТаблицаДанных.Колонки.Добавить("АссортиментВыведена", ОпТипов_Булево);
	//ТаблицаДанных.Колонки.Добавить("АссортиментЗапрещена", ОпТипов_Булево);
	//ТаблицаДанных.Колонки.Добавить("АссортиментАвтор", );
	//ТаблицаДанных.Колонки.Добавить("Статус", );
	////ТаблицаДанных.Колонки.Добавить("СтатусУРЗ", ОпТипов_Строка);
	//ТаблицаДанных.Колонки.Добавить("КЗаказу", ОпТипов_Строка);
	
	СтандартнаяОбработка = Ложь;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаДанных);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры