
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЭлементОтбораПользовательскихНастроек(КомпоновщикНастроек,
													ИмяПоля,
													ПравоеЗначение = Неопределено,
													Использование = Истина) Экспорт
	
	ЭлементыОтбора				= КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ЭлементыПользоватНастроек 	= КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	ПолеДляОтбора = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеДляОтбора Тогда
			ЭлементНастройки = ЭлементыПользоватНастроек.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если ЭлементНастройки = Неопределено Тогда Возврат Ложь; КонецЕсли;
			ЭлементНастройки.ПравоеЗначение = ПравоеЗначение;
			ЭлементНастройки.Использование 	= ?(Использование = Неопределено, ЭлементНастройки.Использование, Использование);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если 1С запущен помощником технолога, подставлять технолога (искать по родителю роли) если никто из технологов не найден, не применять этот фильтр
	МассивТехнологов = ПолучитьМассивТехнологов();
	СписокТехнологов.ЗагрузитьЗначения(МассивТехнологов);
	
	ТипДопСоглашенияДляОтбора = ПолучитьТипДопСоглашенияДляОтбора();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивТехнологов()
	
	МассивТехнологов = Новый Массив;
	УстановитьПривилегированныйРежим(Истина);
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда Возврат МассивТехнологов; КонецЕсли;
	
	ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
		|		ПО РолиПользователейТипыРолей.Ссылка = РолиПользователей.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо)
		|			И (НЕ Пользователи.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|ГДЕ
		|	РолиПользователейТипыРолей.ТипРоли = &ТипРоли
		|	И Пользователи.Ссылка = &ТекПользователь
		|	И НЕ РолиПользователей.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли2.Сотрудник
		|ИЗ
		|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
		|		ПО РолиПользователейТипыРолей.Ссылка = РолиПользователей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли2
		|		ПО (РолиПользователейСоставРоли.Ссылка.Родитель = РолиПользователейСоставРоли2.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо)
		|			И (НЕ Пользователи.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|ГДЕ
		|	РолиПользователейТипыРолей.ТипРоли = &ТипРоли
		|	И Пользователи.Ссылка = &ТекПользователь
		|	И НЕ РолиПользователей.ПометкаУдаления
		|	И НЕ ЕСТЬNULL(РолиПользователейСоставРоли2.Сотрудник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)");
	Запрос.УстановитьПараметр("ТипРоли", ТипРоли);
	Запрос.УстановитьПараметр("ТекПользователь", ТекПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МассивТехнологов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Возврат МассивТехнологов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипДопСоглашенияДляОтбора()
	
	ТипДопСоглашенияДляОтбора = Справочники.ТипыДопСоглашений.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыДопСоглашений.Ссылка КАК ТипДопСоглашения
		|ИЗ
		|	Справочник.ТипыДопСоглашений КАК ТипыДопСоглашений
		|ГДЕ
		|	ТипыДопСоглашений.ВыполнитьДо >= &ТекДата
		|	И НЕ ТипыДопСоглашений.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипыДопСоглашений.ВыполнитьДо");
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ТипДопСоглашенияДляОтбора = ВыборкаЗапроса.ТипДопСоглашения;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТипДопСоглашенияДляОтбора;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СписокТехнологов.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Отчет, "Технолог", СписокТехнологов, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	КонецЕсли;
	
	УстановитьЭлементОтбораПользовательскихНастроек(Отчет.КомпоновщикНастроек, "ТипДопСоглашения", ТипДопСоглашенияДляОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьОтчётПоЭлектронкеНаСервере()
	РеквизитФормыВЗначение("Отчет").ОтправитьОтчётПоЭлектронке();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчётПоЭлектронке(Команда)
	ОтправитьОтчётПоЭлектронкеНаСервере();
КонецПроцедуры
