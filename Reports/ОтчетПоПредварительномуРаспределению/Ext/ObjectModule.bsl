
Функция ПолучитьДанныеДляФормирования(мДатаРаспределения, мТекстId_tov, мТекстNumber_r, мТекстID_zon, мТекстId_TT) Экспорт
	
	мТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 3));
	мТипДата = Новый ОписаниеТипов("Дата");
	
	ТекстДаты 			= "'4" + Сред(СтрЗаменить(Формат(мДатаРаспределения, "ДФ=""гггг ММ дд"""), " ", ""), 2) + "'";
	ТекстДатыКонецДня	= "'4" + Сред(СтрЗаменить(Формат(мДатаРаспределения, "ДФ=""гггг ММ дд"""), " ", ""), 2) + " 23:59:59'";
		
	ТаблицаДанные = Новый ТаблицаЗначений;
	ТаблицаДанные.Колонки.Добавить("Склад"					 , Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанные.Колонки.Добавить("Характеристика"			 , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанные.Колонки.Добавить("СтруктурноеПодразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//ТаблицаДанные.Колонки.Добавить("ТорговаяТочка"			, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанные.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанные.Колонки.Добавить("НомерРаспределения"		, мТипЧисло);
	ТаблицаДанные.Колонки.Добавить("ДатаРаспределения"		, мТипДата);
	//ТаблицаДанные.Колонки.Добавить("id_tov"					, мТипЧисло);
	//ТаблицаДанные.Колонки.Добавить("id_kontr"				, мТипЧисло);
	//ТаблицаДанные.Колонки.Добавить("id_tt"					, мТипЧисло);
	
	ТаблицаДанные.Колонки.Добавить("Дата"					, мТипДата);
	ТаблицаДанные.Колонки.Добавить("Количество"				, мТипЧисло);
	ТаблицаДанные.Колонки.Добавить("КоличествоКоробок"		, мТипЧисло);
	//ТаблицаДанные.Колонки.Добавить("МинУтрОстаток"			, мТипЧисло);
	//ТаблицаДанные.Колонки.Добавить("МаксВечОстаток"			, мТипЧисло);
	//ТаблицаДанные.Колонки.Добавить("План"					, мТипЧисло);
	//ТаблицаДанные.Колонки.Добавить("Избыток"				, мТипЧисло);
	//ТаблицаДанные.Колонки.Добавить("ОстатокНаСкладе"		, мТипЧисло);
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса = "
	|If OBJECT_ID('tempdb..#t1') is not null			Drop Table #t1
	|If OBJECT_ID('tempdb..#t_period') is not null		Drop Table #t_period
	|If OBJECT_ID('tempdb..#t_prop') is not null		Drop Table #t_prop
	|			
	|			
	|			Declare @id_tov int, @DateRaspr datetime, @DateRaspr2 datetime, @number_r int
	|			Set @DateRaspr			= " + ТекстДаты + "
	|			set @DateRaspr2			= " + ТекстДатыКонецДня + "
	|			
	|			SELECT 
	|			MAX(_IR4020._Fld5086) as number_r
	|			,MAX(_IR4020._Fld5063) as date_rasp
	|			,MAX(_IR4020._Fld4021) as date
	|			,_IR4020._Fld4214RRef as ch_ref
	|			,_IR4020._Fld4022RRef as tovar_ref
	|			--,uin_tov._Fld4946 as tovar_uin
	|			,Spr_dep._IDRRef as dep_ref
	|			,Spr_tt._IDRRef as podr_ref
	|			--,_IR4020._Fld4023RRef as tt_ref
	|			,MAX(raspr_zad.id_sklad) as id_sklad
	|			,MAX(raspr_zad.id_zone) as id_zone
	|			--,Spr_dep._Description as dep_desc
	|			--,Spr_tt._Description as tt_decs
	|			,MAX(isNULL(Spr_ch._Fld6268,0)) as mKolKorInfo
	|			,SUM(_IR4020._Fld4024) as kol
	|			into #t1
	|			FROM [M2].[dbo].[_InfoRg4020] _IR4020 (nolock)
	|			inner JOIN [M2].[dbo].[Raspr_zadanie] raspr_zad (nolock) on _IR4020._Fld5086 = raspr_zad.Number_r
	|			inner join [IzbenkaFin].[dbo].[_Reference29] Spr_nom (nolock) on _IR4020._Fld4022RRef = Spr_nom._IDRRef
	|			inner join [IzbenkaFin].[dbo].[_Reference1321] Spr_dep (nolock) on raspr_zad.id_zone = Spr_dep._Fld3393
	|			inner join [IzbenkaFin].[dbo].[_Reference42] Spr_tt (nolock) on raspr_zad.id_sklad = Spr_tt._Fld758
	|			inner join [IzbenkaFin].[dbo].[_Reference2539] Spr_ch (nolock) on _IR4020._Fld4214RRef = Spr_ch._IDRRef
	|			where convert(date,_IR4020._Fld4021,102) = @DateRaspr "+?(мТекстNumber_r="",""," and Number_r = "+мТекстNumber_r)+?(мТекстId_tov="",""," and Spr_nom._Fld760 in "+мТекстId_tov)+?(мТекстId_TT="",""," and Spr_tt._Fld758 in "+мТекстId_TT)+?(мТекстID_zon="",""," and id_zone in "+мТекстID_zon)+"
	|			group by 
	|			_IR4020._Fld4214RRef
	|			,_IR4020._Fld4022RRef
	|			,Spr_dep._IDRRef
	|			,Spr_tt._IDRRef
	|			
	|			--47835
	|			select 
	|			IR_pr._Fld394_RRRef as ch_ref
	|			,IR_pr._Fld396_N as k
	|			into #t_prop
	|			from [IzbenkaFin].[dbo].[_InfoRg393] IR_pr (nolock) 
	|			inner join 
	|			(select distinct t1.ch_ref from #t1 t1) tt1 on tt1.ch_ref = IR_pr._Fld394_RRRef and IR_pr._Fld395RRef = 0x8C82DC746C8468B545B618EC1DACAEE4
	|			
	|			select 
	|			MAX(_Period) as Period
	|			,_Fld6243RRef as podr_ref
	|			,_Fld5576RRef as tovar_ref
	|			,_Fld5577RRef as ch_ref
	|			into #t_period
	|			from [IzbenkaFin].[dbo].[_InfoRg5575] IR_kk (nolock) 
	|			inner join #t1 as t1 
	|			on t1.podr_ref = IR_kk._Fld6243RRef 
	|			and t1.tovar_ref = IR_kk._Fld5576RRef
	|			and t1.ch_ref = IR_kk._Fld5577RRef
	|			where _Period <= @DateRaspr2
	|			group by 
	|			_Fld6243RRef
	|			,_Fld5576RRef
	|			,_Fld5577RRef
	|			
	|			
	|			--select * from #t_period
	|			-----------------------------
	|			select 
	|			t1.number_r
	|			,t1.date_rasp
	|			,t1.date
	|			,t1.ch_ref
	|			,t1.tovar_ref
	|			--,t1.tovar_uin
	|			,t1.dep_ref
	|			,t1.podr_ref
	|			--,t1.tt_ref
	|			,CAST(master.dbo.Binary2UID(t1.tovar_ref) as nvarchar(36)) as tovar_ref_
	|			,CAST(master.dbo.Binary2UID(t1.ch_ref) as nvarchar(36)) as ch_ref_
	|			,CAST(master.dbo.Binary2UID(t1.podr_ref) as nvarchar(36)) as podr_ref_
	|			--,CAST(master.dbo.Binary2UID(t1.tt_ref) as nvarchar(36)) as tt_ref
	|			,t1.id_sklad
	|			,t1.id_zone
	|			--,t1.dep_desc
	|			--,t1.tt_decs
	|			,t1.mKolKorInfo
	|			,CAST(master.dbo.Binary2UID(t1.dep_ref) as nvarchar(36)) as dep_ref_
	|			,case 
	|			when t1.mKolKorInfo=1 then t1.kol/ISNULL(sel_IR_KK.kk,1) 
	|		else t1.kol / isNULL(t_prop.k,1) end as kol_kor
	|			,t1.kol
	|			--,t1.pr_k
	|			,isNULL(t_prop.k,1) as k
	|			,ISNULL(sel_IR_KK.kk,1) kk
	|			from #t1 t1
	|			left join #t_prop t_prop
	|			on t_prop.ch_ref = t1.ch_ref
	|			left join 
	|			(select
	|			maxdate.podr_ref
	|			,maxdate.tovar_ref
	|			,maxdate.ch_ref 
	|			,IR_kk._Fld5578 as kk
	|			from 	
	|			#t_period maxdate
	|			inner join  [IzbenkaFin].[dbo].[_InfoRg5575] IR_kk
	|			on maxdate.Period = IR_kk._Period
	|			and maxdate.podr_ref = IR_kk._Fld6243RRef 
	|			and maxdate.tovar_ref = IR_kk._Fld5576RRef
	|			and maxdate.ch_ref = IR_kk._Fld5577RRef
	|			)sel_IR_KK 
	|			on t1.podr_ref = sel_IR_KK.podr_ref
	|			and t1.tovar_ref = sel_IR_KK.tovar_ref
	|			and t1.ch_ref = sel_IR_KK.ch_ref";
	
	
	//ТекстЗапроса = 
	//"Declare @id_tov int, @DateRaspr datetime, @number_r int
	//|Set @DateRaspr			= " + ТекстДаты + "
	//|	
	//|	SELECT _IR4020._Fld5086 as number_r
	//  |    ,_IR4020._Fld5063 as date_rasp
	//  |    ,_IR4020._Fld4021 as date
	//  |    ,CAST(master.dbo.Binary2UID(_IR4020._Fld4022RRef) as nvarchar(36)) as tovar_ref
	//  |    ,CAST(master.dbo.Binary2UID(_IR4020._Fld4214RRef) as nvarchar(36)) as ch_ref
	//  |    ,CAST(master.dbo.Binary2UID(_IR4020._Fld4023RRef) as nvarchar(36)) as tt_ref
	//  |    ,raspr_zad.id_zone as id_zone
	//  |    ,Spr_dep._Description
	//  |    ,CAST(master.dbo.Binary2UID(Spr_dep._IDRRef) as nvarchar(36)) as dep_ref
	//  |    ,_IR4020._Fld4024 as kol
	//  |    ,_IR4020._Fld6340 as pl
	//  |    ,_IR4020._Fld6339 as max_ost
	//  |    ,_IR4020._Fld6362 as min_ost
	//  |    ,_IR4020._Fld6341 as exc
	//  |    ,_IR4020._Fld5665 as ost
	//  |FROM [M2].[dbo].[_InfoRg4020] _IR4020 (nolock)
	//  |  inner JOIN [M2].[dbo].[Raspr_zadanie] raspr_zad (nolock) on _IR4020._Fld5086 = raspr_zad.Number_r
	//  |  	left join [IzbenkaFin].[dbo].[_Reference1321] Spr_dep on raspr_zad.id_zone = Spr_dep._Fld3393
	//|where convert(date,_IR4020._Fld4021,102) = @DateRaspr "+?(мТекстNumber_r="",""," and Number_r = "+мТекстNumber_r)+?(мТекстId_tov="",""," and SprNom._Fld760 in "+мТекстId_tov)+?(мТекстId_TT="",""," and SprTT._Fld758 in "+мТекстId_TT)+?(мТекстID_zon="",""," and id_zone in "+мТекстID_zon)+"
	//|";
		
	//
	//Выборка = ADOСоединение.Execute(ТекстЗапроса);
	//
	СпрХарактеристика	= Справочники.ХарактеристикиНоменклатуры;
	СпрНоменклатура 	= Справочники.Номенклатура;
	СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
	СпрСклады			= Справочники.Склады;
		
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока НЕ rs = Неопределено Цикл
		Если rs.Fields.Count > 0 Тогда
			Пока НЕ rs.EOF Цикл
				
				НоваяСтрока = ТаблицаДанные.Добавить();
				
				//НоваяСтрока.id_tt                   = rs.Fields("id_tt").Value;
				//НоваяСтрока.id_tov                  = rs.Fields("id_tov").Value;
				//НоваяСтрока.id_kontr 				= rs.Fields("id_kontr").Value;

				НоваяСтрока.НомерРаспределения		= rs.Fields("number_r").Value;
				НоваяСтрока.ДатаРаспределения		= rs.Fields("date_rasp").Value;
				НоваяСтрока.Дата					= rs.Fields("date").Value;
				НоваяСтрока.Количество				= rs.Fields("kol").Value;
				НоваяСтрока.КоличествоКоробок		= rs.Fields("kol_kor").Value;
				//НоваяСтрока.План					= rs.Fields("pl").Value;
				//НоваяСтрока.МаксВечОстаток			= rs.Fields("max_ost").Value;
				//НоваяСтрока.МинУтрОстаток			= rs.Fields("min_ost").Value;
				//НоваяСтрока.Избыток					= rs.Fields("exc").Value;
				//НоваяСтрока.ОстатокНаСкладе			= rs.Fields("ost").Value;
				
				Попытка
					НоваяСтрока.Характеристика 	= СпрХарактеристика.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("ch_ref_").Value));
				Исключение
				КонецПопытки;
				Попытка
					НоваяСтрока.Номенклатура 	= СпрНоменклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("tovar_ref_").Value));
				Исключение
				КонецПопытки;
				Попытка
					НоваяСтрока.СтруктурноеПодразделение = СпрТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("podr_ref_").Value));
				Исключение
				КонецПопытки;
				Попытка
					НоваяСтрока.Склад = СпрСклады.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("dep_ref_").Value));
				Исключение
				КонецПопытки;
				
				Если НЕ rs.EOF Тогда
					rs.MoveNext();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		rs = rs.NextRecordSet();
	КонецЦикла;
	

	ADOСоединение.Close();		
				
	//
	Возврат ТаблицаДанные;
	
КонецФункции



Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мДатаРаспределения 	= Дата(1, 1, 1);
	мНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	мТекстId_tov = "";
	мТекстNumber_r = "";
	мТекстId_TT = "";
	мТекстID_zon = "";
	
	Для Каждого ПользПоле Из ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользПоле.Использование Тогда
			Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если Строка(ПользПоле.Параметр) = "ДатаРаспределения" Тогда
					Если ТипЗнч(ПользПоле.Значение) = Тип("СтандартнаяДатаНачала") Тогда
						мДатаРаспределения 	= ПользПоле.Значение.Дата;
					Иначе
						мДатаРаспределения 	= ПользПоле.Значение;
					КонецЕСли;

				
		//	ИначеЕсли ТипЗнч(ПользПоле) = тип("ЭлементОтбораКомпоновкиДанных") тогда
		//			Если ПользПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		////			Если ТипЗнч(ПользПоле.ПравоеЗначение) = ТипСправочникТТ Тогда
		////				ТекНоменклатура = ПользПоле.ПравоеЗначение;
		////			КонецЕсли;
		////		КонецЕсли;

			
				ИначеЕсли Строка(ПользПоле.Параметр) = "Номенклатура" Тогда
					мНоменклатура		= ПользПоле.Значение;
					Если ЗначениеЗаполнено(мНоменклатура) Тогда
						мТекстId_tov = " (";
						Если ТипЗнч(мНоменклатура) = Тип("СписокЗначений") Тогда
							ЭТоПервый = истина;
							Для Каждого СтрНом из мНоменклатура Цикл
								мТекстId_tov = мТекстId_tov + ?(ЭтоПервый,"",", ")+Формат(СтрНом.Значение.id_tov, "ЧН=0; ЧГ=");	
								ЭТоПервый = ЛОжь;
							КонецЦикла;
							мТекстId_tov = мТекстId_tov + ")";							

						ИначеЕсли ТипЗнч(мНоменклатура) = Тип("Массив") Тогда
							ЭТоПервый = истина;
							Для Каждого СтрНом из мНоменклатура Цикл
								мТекстId_tov = мТекстId_tov + ?(ЭтоПервый,"",", ")+Формат(СтрНом.id_tov, "ЧН=0; ЧГ=");	
								ЭТоПервый = ЛОжь;
							КонецЦикла;
							мТекстId_tov = мТекстId_tov + ")";							
						Иначе
							мТекстId_tov = мТекстId_tov + Формат(мНоменклатура.id_tov, "ЧН=0; ЧГ=")+")";
						КонецЕСли;
					КонецЕСли;
				ИначеЕсли Строка(ПользПоле.Параметр) = "Склад" Тогда
					мСклад		= ПользПоле.Значение;
					Если ЗначениеЗаполнено(мСклад) Тогда
						мТекстID_zon = " (";
						Если ТипЗнч(мСклад) = Тип("СписокЗначений") Тогда
							ЭТоПервый = истина;
							Для Каждого СтрЗнч из мСклад Цикл
								мТекстID_zon = мТекстID_zon + ?(ЭтоПервый,"",", ")+Формат(СтрЗнч.Значение.ИД, "ЧН=0; ЧГ=");	
								ЭТоПервый = ЛОжь;
							КонецЦикла;
							мТекстID_zon = мТекстID_zon + ")";							
							
						ИначеЕсли ТипЗнч(мСклад) = Тип("Массив") Тогда
							ЭТоПервый = истина;
							Для Каждого СтрЗнч из мСклад Цикл
								мТекстID_zon = мТекстID_zon + ?(ЭтоПервый,"",", ")+Формат(СтрЗнч.ИД, "ЧН=0; ЧГ=");	
								ЭТоПервый = ЛОжь;
							КонецЦикла;
							мТекстID_zon = мТекстID_zon + ")";							
						Иначе
							мТекстID_zon = мТекстID_zon + Формат(мСклад.ИД, "ЧН=0; ЧГ=")+")";
						КонецЕСли;
					КонецЕСли;
				ИначеЕсли Строка(ПользПоле.Параметр) = "СтруктурноеПодраздаление" Тогда
					мТТ		= ПользПоле.Значение;
					Если ЗначениеЗаполнено(мТТ) Тогда
						мТекстId_TT = " (";
						Если ТипЗнч(мТТ) = Тип("СписокЗначений") Тогда
							ЭТоПервый = истина;
							Для Каждого СтрЗнч из мТТ Цикл
								мТекстId_TT = мТекстId_TT + ?(ЭтоПервый,"",", ")+Формат(СтрЗнч.Значение.id_TT, "ЧН=0; ЧГ=");	
								ЭТоПервый = ЛОжь;
							КонецЦикла;
							мТекстId_TT = мТекстId_TT + ")";							
							
						ИначеЕсли ТипЗнч(мТТ) = Тип("Массив") Тогда
							ЭТоПервый = истина;
							Для Каждого СтрЗнч из мТТ Цикл
								мТекстId_TT = мТекстId_TT + ?(ЭтоПервый,"",", ")+Формат(СтрЗнч.id_TT, "ЧН=0; ЧГ=");	
								ЭТоПервый = ЛОжь;
							КонецЦикла;
							мТекстId_TT = мТекстId_TT + ")";							
						Иначе
							мТекстId_TT = мТекстId_TT + Формат(мТТ.id_TT, "ЧН=0; ЧГ=")+")";
						КонецЕСли;
					КонецЕСли;
				ИначеЕсли Строка(ПользПоле.Параметр) = "НомерРаспределения" Тогда
					мТекстNumber_r = ""+Формат(ПользПоле.Значение, "ЧН=0; ЧГ=");								
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(мДатаРаспределения) Тогда
		Сообщить("Необходимо указать дату распределения");
		Возврат;
	КонецЕсли;
	
	Если мТекстId_tov = "" и мТекстNumber_r = "" и мТекстID_zon = "" Тогда
		Сообщить("Необходимо указать или номенклатуру или номер распределения или склад");
		Возврат;
	КонецЕСли;
	
	ТаблицаДанных = ПолучитьДанныеДляФормирования(мДатаРаспределения, мТекстId_tov, мТекстNumber_r, мТекстID_zon, мТекстId_TT);	
	Настройки = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();

	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	// Передаем в макет компоновки схему, настройки и данные расшифровки
//	мСхемаКомпоновки = ?(НЕ ЭтотОбъект.ВыводитьДополнительныеСтолбцы, ЭтотОбъект.ПолучитьМакет("Макет"), ЭтотОбъект.ПолучитьМакет("ДопМакет"));
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Настройки, ДанныеРасшифровки);

	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаДанных);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
КонецПроцедуры
