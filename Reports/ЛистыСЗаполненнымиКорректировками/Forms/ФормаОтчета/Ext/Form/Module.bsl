
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;
	Перем ВыбранноеДействие;
	Перем ПараметрыВыбранногоДействия;
	
	СтандартнаяОбработка=Ложь;
	ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
 
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	
	ДополнительныеДействия = Новый СписокЗначений;
	ДополнительныеДействия.Добавить("Напечатать Объяснительную");

	ТекущееЗначение = ПолучитьРезултатРасшифровки(Расшифровка);
	
	Если ТипЗнч(ТекущееЗначение) = Тип("ДокументСсылка.ЛистУчета") Тогда
		
		ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыбранноеДействие, ПараметрыВыбранногоДействия, ДоступныеДействия, ДополнительныеДействия);
		
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ОткрытьЗначение(ПараметрыВыбранногоДействия);
			
		ИначеЕсли ВыбранноеДействие = "Напечатать Объяснительную"  Тогда
			
			ПечатьОбъяснительная(ТекущееЗначение).Показать();
			
		ИначеЕсли ВыбранноеДействие = "Нет" Тогда
			
			Возврат;
			
		Иначе
			

			ОтработатьРасшифровку(Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Расшифровка, ПараметрыВыбранногоДействия));

		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезултатРасшифровки(Расшифровка)
	
	КоллекцияРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	ЗначенияРасшифровки = КоллекцияРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	
	Если ЗначенияРасшифровки.Количество() Тогда
	
		Возврат ЗначенияРасшифровки[0].Значение;

	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьРезултатРасшифровки()

&НаСервере
Функция ПечатьОбъяснительная(ТекущееЗначение)
	
	Возврат Документы.ЛистУчета.НапечататьОбъяснительную(ТекущееЗначение,Новый ТабличныйДокумент);
	
КонецФункции // ПечатьОбъяснительная()

&НаСервере
Процедура ОтработатьРасшифровку(ОписаниеОбработкиРасшифровки)
 
  ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
  ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиОбъект, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
  РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
 
  Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
  ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
  КонецЕсли;
 
  СкомпоноватьРезультат();
 
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОбъяснительные(Команда)
	
	НапечататьОбъяснительныеНаСервере().Показать();
	
КонецПроцедуры

&НаСервере
Функция НапечататьОбъяснительныеНаСервере()

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ТЗ_Листов = ОтчетОбъект.РезультатКомпоновкиВТЗ(Отчет.КомпоновщикНастроек);
	
	Табдок = Новый ТабличныйДокумент;
	
	Для каждого ТекСтрока Из ТЗ_Листов Цикл
	
		Документы.ЛистУчета.НапечататьОбъяснительную(ТекСтрока.Ссылка,Табдок);
		
		Табдок.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат Табдок;

КонецФункции // ()

