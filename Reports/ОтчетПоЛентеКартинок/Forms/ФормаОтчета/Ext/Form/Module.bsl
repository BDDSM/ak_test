

&НаКлиенте
Процедура ОбновитьЛенту(Команда)
	//Если Не ЗначениеЗаполнено(СокрЛП(Искать)) Тогда
	//	 Сообщить("Введите выражение для поиска");
	//	 Возврат;
	//КонецЕсли; 
	ИдентификаторЭлементаФормы=0;
	СчГрупп=0;
	ТаблицаСтруктурыФайлов.Очистить();
	СписокКартинок.Очистить();
	Тэги.Очистить();
	ПрочиеТэги.Очистить();
	СписокВыведенных.Очистить();
	ОбновитьЛентуСервер();
	//Кол=ТаблицаСтруктурыФайлов.Количество();
	//Для Сч=0 по Кол-1 Цикл
	//	Стр=ТаблицаСтруктурыФайлов[Кол-1-Сч];
	//	Если Найти(стр.АдресВХранилище,"YandexDisk")>0 Тогда
	//		//ФайлВрем=Новый Файл(стр.АдресВХранилище);
	//		Попытка
	//			//РасширениеФайла = Сред(ФайлВрем.Расширение, 2);
	//			ВремФайл = ПолучитьИмяВременногоФайла(Стр.Расширение);
	//			КопироватьФайл(стр.АдресВХранилище,ВремФайл);
	//			стр.АдресВХранилище=ВремФайл;
	//		Исключение
	//			ТаблицаСтруктурыФайлов.Удалить(Кол-1-Сч);	
	//		КонецПопытки; 
	//	КонецЕсли; 
	//КонецЦикла; 
	
	
	ПолныйТекстHTML = "<html xmlns=""http://www.w3.org/1999/xhtml""; > 
	|<head>
	|<title>Тест</title>
	|<script>
	|var xForm1C;
	|
	|function SetForm1c(Form1c)
	|{
	|xForm1C = Form1c;
	|}
	|
	|function Call1C()
	|{
	| ADR = xForm1C.СобытиеHTML();
	| if (ADR != '')
	| {
	| DIV=document.createElement('DIV');
	| var innerHTML1=ADR.innerHTML1;
	//| var innerHTML2=ADR.innerHTML2;
	//| var list = document.getElementById(""verhtd"");
	| DIV.innerHTML = innerHTML1;
	//| list.appendChild(DIV);
	//| DIV.innerHTML = innerHTML2;
	| document.body.appendChild(DIV);
	| }
	|}
	|</script>
	|
	|</head>
	|<body onscroll='Call1C()'>";
	
	//Для Каждого ЭлементСтруктуры Из ТаблицаСтруктурыФайлов Цикл
	//	Если ЗначениеЗаполнено(ЭлементСтруктуры.АдресВХранилище) Тогда
	//		Картинка = ПолучитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
	//		УдалитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
	//		Попытка
	//			Картинка.Записать(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение);
	//		Исключение
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	
	//Сч=1;	
	//Для Каждого Элемент Из СписокКартинок Цикл
	//	Если Сч > Порция Тогда
	//		Прервать;
	//	КонецЕсли;
	//	СтрокиСтруктуры=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",Элемент.Значение));
	//	ЭлементСтруктуры=СтрокиСтруктуры[0];
	//	Если ЗначениеЗаполнено(ЭлементСтруктуры.АдресВХранилище) Тогда
	//		Картинка =  Новый Картинка(ЭлементСтруктуры.АдресВХранилище);
	//		//Попытка
	//			Картинка.Записать(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки +  "." + ЭлементСтруктуры.Расширение);
	//		//Исключение
	//		//КонецПопытки;
	//		Сч=Сч+1;
	//	КонецЕсли;
	//КонецЦикла;	
	
	ПолныйТекстHTML = ПолныйТекстHTML + "
	|<div id = ""Rakurs" + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
	+ СформироватьТэгиПоРакурсу("",Истина)
	+ "</div>";
	
	ПолныйТекстHTML = ПолныйТекстHTML + "</body>
	|</html>";
	
	ДокументHTML = ПолныйТекстHTML;
	HTML=ДокументHTML;
	
	Порция=4;
	ВыводКартинок();
	Если ТаблицаСтруктурыФайлов.Количество()>0 Тогда
		ТекКартинка=ТаблицаСтруктурыФайлов[0].УинКартинки;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ВыводКартинок()
	СтрокиСтруктуры=ТаблицаСтруктурыФайлов;
	КолвоСтрок = СтрокиСтруктуры.Количество();
	Если КолвоСтрок > 0 Тогда
		Если ЗначениеЗаполнено(ТекКартинка) Тогда
			Для Каждого ЭлементСтруктуры Из СтрокиСтруктуры Цикл
				Если ЭлементСтруктуры.УинКартинки = ТекКартинка Тогда
					ТекКартинкаСтруктура = ЭлементСтруктуры;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			ТекКартинкаСтруктура = СтрокиСтруктуры[0];
		КонецЕсли;	
	КонецЕсли;	
	
	
	СчКарт = 1;
	СтрДоб = "";
	МассивВывод = Новый Массив;
	Для каждого Элемент ИЗ СписокКартинок Цикл
		Если СчКарт > Порция Тогда
			Прервать;
		КонецЕсли;
		Если СчКарт<>1 Тогда
			СтрокиСтруктуры=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",Элемент.Значение));
			Если СтрокиСтруктуры.Количество()=0 Тогда
				МассивВывод.Добавить(Элемент);
				Продолжить;
			КонецЕсли; 
			ТекКартинкаСтруктура = СтрокиСтруктуры[0];
			
			Если ЗначениеЗаполнено(ТекКартинкаСтруктура.АдресВХранилище) Тогда
				Картинка =  Новый Картинка(ТекКартинкаСтруктура.АдресВХранилище);
				//Попытка
				Картинка.Записать(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки +  "." + ТекКартинкаСтруктура.Расширение);
				//Исключение
				//КонецПопытки;
			КонецЕсли;
			
			СтрДоб = СтрДоб + "
			|<table name = ""verh"" id=""verhtd" + ТекКартинкаСтруктура.УинКартинки + """>
			|<tr>
			|<td width = ""20%"" align=""right"">
			|
			|<table id=""PhotoOpeartions" + ТекКартинкаСтруктура.УинКартинки + "_PhOp" + """>
			|<tr>
			|<td  align=""right"">
			|<img name=ShowBt alt=""Показать изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Show.png", "\", "/") + """>
			|<img name=SaveBt alt=""Сохранить как"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\SaveAs.png", "\", "/") + """>
			//|<img name=RotateBt alt=""Перевернуть изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Rotate.png", "\", "/") + """>
			//|<img name=TrimBt alt=""Вырезать картинку в сообщение магазину"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Trim.png", "\", "/") + """>
			|</td>
			|</tr>
			|</table>
			|
			|</td>
			|<td id=""bigpicture""" + ТекКартинкаСтруктура.УинКартинки + " valign=""top"" align = ""center"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + ">
			|<p></p>
			|		"+?(нрег(ТекКартинкаСтруктура.Расширение)="pdf",
			"<embed  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") +"""/>" ,
			//"<img class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>",
			"<img  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>")
			//|			zoomImage:&quot;file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + "&quot;,
			//  |         zoomSizeMode: &quot;image&quot;,
			//|         tintColor:&quot;#000&quot;,
			//|         tintOpacity:0.25,
			//|         captionPosition:&quot;bottom&quot;,
			//|         maxMagnification:4,
			//|         autoInside:450"">
			+"
			|</td>
			|<td width = ""40%"" valign=""top"">
			|<table width = ""100%"">
			//|<tr>
			//|<td width=15></td>
			//|<td><span style = ""color: #2D84C4"">&nbsp;&nbsp;Комментарий</span></td>
			//|<td width=15></td>
			//|</tr>
			//|<tr>
			//|<td width=15></td>
			//|<td>
			////|" + СформироватьТэгКомментария(ТекКартинкаСтруктура.УинКартинки, ТекКартинкаСтруктура.Комментарий) + "</td>
			//|</td>
			//|<td width=15></td>
			//|</tr>
			|</table>
			|
			|</td>
			|</tr>";
			
			//Если Файл.Существует() Тогда
			//	
			//	Если ТекКартинкаСтруктура.СтатусФото = 0 Тогда
			//		ТекСтатус = "Не обработано";
			СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #3232FF""";
			//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 1 Тогда
			//		ТекСтатус = "Не принято";
			//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #FF3232""";
			//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 2 Тогда
			//		ТекСтатус = "Принято";
			//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #00BE00""";
			//	КонецЕсли;
			
			СтрДоб = СтрДоб + "
			//|</table>
			//|<table   name = ""niz>"">
			|<tr>
			//|<td width = ""0%"">
			//|
			//|</td>
			|<td width = ""20%"" align=""right"">                             
			|<table width = ""100%"">
			|</table>
			|</td>
			
			|<td   valign=""top"" align = ""left"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + "><div id=""nizdiv"" style=""width=100%; height:70px; overflow:auto;""> <span>";
			//|<span><span id = ""CurrentPhotoState" + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус фото: " + ТекСтатус + "</span></span>
			//|<span style = ""font-size:12; color: #2D84C4"">Установить:</span>&nbsp;&nbsp;
			Сч=0;
			ТекТэги=Тэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
			ТекПрочиеТэги=ПрочиеТэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
			Для каждого Эл Из ТекТэги Цикл
				Сч=Сч+1;
				СтрДоб = СтрДоб +"
				|<a name = ""SetPhotoStatus"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Эл.Тэг+ """ style = ""font-size:12; color: #2D84C4"" href = """">"+"#"+Эл.Тэг+"</a>&nbsp;&nbsp;";
			КонецЦикла;
			Сч=0;
			Для каждого Эл Из ТекПрочиеТэги Цикл
				Сч=Сч+1;
				СтрДоб = СтрДоб +"
				|<a name = ""etc"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Сч+ """ style = ""font-size:12"" >"+Эл.Тэг+"</a>&nbsp;&nbsp;";
			КонецЦикла;   			
			
			СтрДоб = СтрДоб +"
			|</span></div></td>
			//|<td width = ""0%""></td>
			|<td width = ""40%"" valign=""top"">
			|<table width = ""100%"">
			|</table>
			|
			|</td>
			
			|</tr></table>";
		КонецЕсли; 
		СчКарт = СчКарт + 1;
		
		МассивВывод.Добавить(Элемент);
		СписокВыведенных.Добавить(Элемент.Значение);
	КонецЦикла;
	Для каждого Элемент ИЗ МассивВывод Цикл
		СписокКартинок.Удалить(Элемент);
	КонецЦикла;	
	СтрДоб=СтрДоб+"
	|<!-- <td></td> -->";
	ДокументHTML = СтрЗаменить(HTML,"<!-- <table></table> -->",СтрДоб);
	Порция = 4;
КонецФункции

&НаКлиенте
Функция СобытиеHTML() Экспорт
	Если СписокКартинок.Количество() > 0 Тогда
		ТекЭлем = СписокКартинок[0];
		//Сообщить(ТекЭлем);
		//
		//СтрокиСтруктуры=ТаблицаСтруктурыФайлов;
		//КолвоСтрок = СтрокиСтруктуры.Количество();
		//Если КолвоСтрок > 0 Тогда
		//	Если ЗначениеЗаполнено(ТекКартинка) Тогда
		//		Для Каждого ЭлементСтруктуры Из СтрокиСтруктуры Цикл
		//			Если ЭлементСтруктуры.УинКартинки = ТекКартинка Тогда
		//				ТекКартинкаСтруктура = ЭлементСтруктуры;
		//				Прервать;
		//			КонецЕсли;	
		//		КонецЦикла;	
		//	Иначе	
		//		ТекКартинкаСтруктура = СтрокиСтруктуры[0];
		//	КонецЕсли;	
		//КонецЕсли;
		
		
		СтрокиСтруктуры=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",ТекЭлем.Значение));
		ТекКартинкаСтруктура=СтрокиСтруктуры[0];
		Если ЗначениеЗаполнено(ТекКартинкаСтруктура.АдресВХранилище) Тогда
			Картинка =  Новый Картинка(ТекКартинкаСтруктура.АдресВХранилище);
			Попытка
				Картинка.Записать(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + ?(ТекКартинкаСтруктура.ТолькоМиниатюра, "thumb", "") + "." + ТекКартинкаСтруктура.Расширение);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		СтрДоб =  "
		|<table name = ""verh"" id=""verhtd" + ТекКартинкаСтруктура.УинКартинки + """>
		|<tr>
		|<td width = ""20%"" align=""right"">
		|
		|<table id=""PhotoOpeartions" + ТекКартинкаСтруктура.УинКартинки + "_PhOp" + """>
		|<tr>
		|<td  align=""right"">
		|<img name=ShowBt alt=""Показать изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Show.png", "\", "/") + """>
		|<img name=SaveBt alt=""Сохранить как"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\SaveAs.png", "\", "/") + """>
		//|<img name=RotateBt alt=""Перевернуть изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Rotate.png", "\", "/") + """>
		//|<img name=TrimBt alt=""Вырезать картинку в сообщение магазину"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Trim.png", "\", "/") + """>
		|</td>
		|</tr>
		|</table>
		|
		|</td>
		|<td id=""bigpicture""" + ТекКартинкаСтруктура.УинКартинки + " valign=""top"" align = ""center"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + ">
		|<p></p>
		|		"+?(нрег(ТекКартинкаСтруктура.Расширение)="pdf",
		"<embed  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") +"""/>" ,
		//"<img class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>",
		"<img  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>")
		//|			zoomImage:&quot;file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + "&quot;,
		//  |         zoomSizeMode: &quot;image&quot;,
		//|         tintColor:&quot;#000&quot;,
		//|         tintOpacity:0.25,
		//|         captionPosition:&quot;bottom&quot;,
		//|         maxMagnification:4,
		//|         autoInside:450"">
		+"
		|</td>
		|<td width = ""40%"" valign=""top"">
		|<table width = ""100%"">
		//|<tr>
		//|<td width=15></td>
		//|<td><span style = ""color: #2D84C4"">&nbsp;&nbsp;Комментарий</span></td>
		//|<td width=15></td>
		//|</tr>
		//|<tr>
		//|<td width=15></td>
		//|<td>
		////|" + СформироватьТэгКомментария(ТекКартинкаСтруктура.УинКартинки, ТекКартинкаСтруктура.Комментарий) + "</td>
		//|</td>
		//|<td width=15></td>
		//|</tr>
		|</table>
		|
		|</td>
		|</tr>";
		
		//Если Файл.Существует() Тогда
		//	
		//	Если ТекКартинкаСтруктура.СтатусФото = 0 Тогда
		//		ТекСтатус = "Не обработано";
		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #3232FF""";
		//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 1 Тогда
		//		ТекСтатус = "Не принято";
		//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #FF3232""";
		//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 2 Тогда
		//		ТекСтатус = "Принято";
		//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #00BE00""";
		//	КонецЕсли;
		
		СтрДоб = СтрДоб + "
		//|</table>
		//|<table   name = ""niz>"">
		|<tr>
		//|<td width = ""0%"">
		//|
		//|</td>
		|<td width = ""20%"" align=""right"">                             
		|<table width = ""100%"">
		|</table>
		|</td>
		
		|<td   valign=""top"" align = ""left"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + "><div id=""nizdiv"" style=""width=100%; height:70px; overflow:auto;""> <span>";
		//|<span><span id = ""CurrentPhotoState" + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус фото: " + ТекСтатус + "</span></span>
		//|<span style = ""font-size:12; color: #2D84C4"">Установить:</span>&nbsp;&nbsp;
		Сч=0;
		ТекТэги=Тэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
		ТекПрочиеТэги=ПрочиеТэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
		Для каждого Эл Из ТекТэги Цикл
			Сч=Сч+1;
			СтрДоб = СтрДоб +"
			|<a name = ""SetPhotoStatus"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Эл.Тэг+ """ style = ""font-size:12; color: #2D84C4"" href = """">"+"#"+Эл.Тэг+"</a>&nbsp;&nbsp;";
		КонецЦикла;
		Сч=0;
		Для каждого Эл Из ТекПрочиеТэги Цикл
			Сч=Сч+1;
			СтрДоб = СтрДоб +"
			|<a name = ""etc"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Сч+ """ style = ""font-size:12"" >"+Эл.Тэг+"</a>&nbsp;&nbsp;";
		КонецЦикла;   			
		
		СтрДоб = СтрДоб +"
		|</span></div></td>
		//|<td width = ""0%""></td>
		|<td width = ""40%"" valign=""top"">
		|<table width = ""100%"">
		|</table>
		|
		|</td>
		
		|</tr></table>";
		
		
		
		
		
		
		Струк=Новый Структура("innerHTML1",СтрДоб);
		
		
		//АдресКартинки = ТекЭлем.Значение;
		СписокКартинок.Удалить(ТекЭлем);
		СписокВыведенных.Добавить(ТекКартинкаСтруктура.УИНКартинки);
		
		
		Возврат Струк;
	Иначе
		////Сообщить("222");
		//Если ФлКонец Тогда
		//	//Сообщить("111");
		//	Возврат "";
		//КонецЕсли; 
		//ДобавитьЕще(Неопределено);
		//Если ФлКонец Тогда
		//	//Сообщить("111");
		//	Возврат "";
		//КонецЕсли; 
		//ТекЭлем = СписокКартинок[0];
		////Сообщить(ТекЭлем);
		//
		//СтрокиСтруктуры=ТаблицаСтруктурыФайлов;
		//КолвоСтрок = СтрокиСтруктуры.Количество();
		//Если КолвоСтрок > 0 Тогда
		//	Если ЗначениеЗаполнено(ТекКартинка) Тогда
		//		Для Каждого ЭлементСтруктуры Из СтрокиСтруктуры Цикл
		//			Если ЭлементСтруктуры.УинКартинки = ТекКартинка Тогда
		//				ТекКартинкаСтруктура = ЭлементСтруктуры;
		//				Прервать;
		//			КонецЕсли;	
		//		КонецЦикла;	
		//	Иначе	
		//		ТекКартинкаСтруктура = СтрокиСтруктуры[0];
		//	КонецЕсли;	
		//КонецЕсли;
		//
		//СтрокиСтруктуры=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",ТекЭлем.Значение));
		//ЭлементСтруктуры=СтрокиСтруктуры[0];
		//Подсказка=СтрокиСтруктуры[0].НоменклатураНаименование+" "+СтрокиСтруктуры[0].ХарактеристикаНаименование;
		//УИНКартинки=СтрокиСтруктуры[0].УинКартинки;
		//ЦветГр=?(СтрокиСтруктуры[0].УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff");
		//Адрес=СтрЗаменить(?(нрег(ЭлементСтруктуры.Расширение)<>"pdf",ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение, ВременныйКаталог + "\pdf.jpg"), "\", "/");
		//
		//Струк=Новый Структура("Podskaz,UinPic,ColorB,Adr",Подсказка,УИНКартинки,ЦветГр,Адрес);
		//
		//
		////АдресКартинки = ТекЭлем.Значение;
		//СписокКартинок.Удалить(ТекЭлем);
		//СписокВыведенных.Добавить(УИНКартинки);
		//
		//
		//
		//
		////Если СписокКартинок.Количество() > 0 Тогда
		//	Возврат Струк;
		////Иначе
		Возврат "";
		//КонецЕсли;	
	КонецЕсли;	
КонецФункции

&НаКлиенте
Функция СформироватьСтруктуруКартинки() Экспорт
	ТекЭлем = СписокКартинок[0];
	Сообщить(ТекЭлем);
	
	СтрокиСтруктуры=ТаблицаСтруктурыФайлов;
	КолвоСтрок = СтрокиСтруктуры.Количество();
	Если КолвоСтрок > 0 Тогда
		Если ЗначениеЗаполнено(ТекКартинка) Тогда
			Для Каждого ЭлементСтруктуры Из СтрокиСтруктуры Цикл
				Если ЭлементСтруктуры.УинКартинки = ТекКартинка Тогда
					ТекКартинкаСтруктура = ЭлементСтруктуры;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			ТекКартинкаСтруктура = СтрокиСтруктуры[0];
		КонецЕсли;	
	КонецЕсли;
	
	СтрокиСтруктуры=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",ТекЭлем.Значение));
	ЭлементСтруктуры=СтрокиСтруктуры[0];
	Подсказка=СтрокиСтруктуры[0].НоменклатураНаименование+" "+СтрокиСтруктуры[0].ХарактеристикаНаименование;
	УИНКартинки=СтрокиСтруктуры[0].УинКартинки;
	ЦветГр=?(СтрокиСтруктуры[0].УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff");
	Адрес=СтрЗаменить(?(нрег(ЭлементСтруктуры.Расширение)<>"pdf",ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение, ВременныйКаталог + "\pdf.jpg"), "\", "/");
	
	Струк=Новый Структура("Podskaz,UinPic,ColorB,Adr",Подсказка,УИНКартинки,ЦветГр,Адрес);
	
	
	//АдресКартинки = ТекЭлем.Значение;
	СписокКартинок.Удалить(ТекЭлем);
	Возврат Струк;
КонецФункции // ()


&НаКлиенте
Функция СформироватьТэгиПоРакурсу( ТекущаяКартинка = "",ДобавлениеНовых=Ложь)
	
	ТекстВозврата = "";
	
	ТекСтатус = "";
	СтильСтатуса = "";
	СтрокиСтруктуры = ТаблицаСтруктурыФайлов;//.НайтиСтроки(Новый Структура("Ракурс", ЭлементРакурс));
	//Если СтрокиСтруктуры.Количество() > 0 Тогда
	//	Если СтрокиСтруктуры[0].СтатусРакурса = 0 Тогда
	//		ТекСтатус = "Не обработан";
	//		СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #3232FF""";
	//	ИначеЕсли СтрокиСтруктуры[0].СтатусРакурса = 1 Тогда
	//		ТекСтатус = "Не принят";
	//		СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #FF3232""";
	//	ИначеЕсли СтрокиСтруктуры[0].СтатусРакурса = 2 Тогда
	//		ТекСтатус = "Принят";
	//		СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #00BE00""";
	//	КонецЕсли;	
	//КонецЕсли;
	//СтрокиВПорядкеОбщегоСписка = НумерацияРакурсов.НайтиСтроки(Новый Структура("Ракурс", ЭлементРакурс));
	ТекстПорядкаРакурса = "";
	//Если СтрокиВПорядкеОбщегоСписка.Количество() > 0 Тогда
	//	ТекстПорядкаРакурса = "(" + Строка(СтрокиВПорядкеОбщегоСписка[0].НомерВОбщемСпискеВывода) + " из " + НумерацияРакурсов.Количество() + ")";
	//КонецЕсли;	
	//ТекстВозврата = ТекстВозврата + "
	//|	<tr>
	//|		<td valign=""top"">
	//|		<table><tr><td>
	//|		<span style = ""font-size:18; font-weight: bold; color: #9696FF"">" + ТекстПорядкаРакурса + " " + ЭлементРакурс + "</span>&nbsp;&nbsp;&nbsp;<span><span id = ""CurrentState" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус: " + ТекСтатус + "</span></span><span><br></span>
	//|		<span style = ""font-size:14; color: #2D84C4"">Установить статус ракурса</span>&nbsp;&nbsp;<a name = ""SetStatus2"" id = """ + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; font-weight: bold; color: #00BE00"" href = """">Принят</a>&nbsp;&nbsp;<a name = ""SetStatus1"" id = """ + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; font-weight: bold; color: #FF3232"" href = """">Не принят</a>&nbsp;&nbsp;<a name = ""SetStatus0"" id = """ + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; font-weight: bold; color: #3232FF"" href = """">Не обработан</a>
	//|		</td></tr></table>
	//|<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">
	//|<tr>		";
	ТекКартинка=ТекущаяКартинка;
	КолвоСтрок = СтрокиСтруктуры.Количество();
	Если КолвоСтрок > 0 Тогда
		//Если ЗначениеЗаполнено(ТекущаяКартинка) Тогда
		//	Для Каждого ЭлементСтруктуры Из СтрокиСтруктуры Цикл
		//		Если ЭлементСтруктуры.УинКартинки = ТекущаяКартинка Тогда
		//			ТекКартинкаСтруктура = ЭлементСтруктуры;
		//			Прервать;
		//		КонецЕсли;	
		//	КонецЦикла;	
		//Иначе	
		//	ТекКартинкаСтруктура = СтрокиСтруктуры[0];
		//КонецЕсли;
		
		
		
		ТекКартинкаСтруктура=СтрокиСтруктуры[0];
		Если ЗначениеЗаполнено(ТекКартинкаСтруктура.АдресВХранилище) Тогда
			Картинка =  Новый Картинка(ТекКартинкаСтруктура.АдресВХранилище);
			//Попытка
			Картинка.Записать(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки +  "." + ТекКартинкаСтруктура.Расширение);
			//Исключение
			//КонецПопытки;
		КонецЕсли;
		Файл = Новый Файл(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение);
		Если Файл.Существует()
			И ЗначениеЗаполнено(ТекКартинкаСтруктура.УинКартинки) Тогда
			ТекстВозврата = ТекстВозврата + "
			|<table name = ""verh"" id=""verhtd" + ТекКартинкаСтруктура.УинКартинки + """>
			|<tr>
			|<td width = ""20%"" align=""right"">
			|
			|<table id=""PhotoOpeartions" + ТекКартинкаСтруктура.УинКартинки + "_PhOp" + """>
			|<tr>
			|<td  align=""right"">
			|<img name=ShowBt alt=""Показать изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Show.png", "\", "/") + """>
			|<img name=SaveBt alt=""Сохранить как"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\SaveAs.png", "\", "/") + """>
			//|<img name=RotateBt alt=""Перевернуть изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Rotate.png", "\", "/") + """>
			//|<img name=TrimBt alt=""Вырезать картинку в сообщение магазину"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Trim.png", "\", "/") + """>
			|</td>
			|</tr>
			|</table>
			|
			|</td>
			|<td id=""bigpicture""" + ТекКартинкаСтруктура.УинКартинки + " valign=""top"" align = ""center"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + ">
			|<p></p>
			|		"+?(нрег(ТекКартинкаСтруктура.Расширение)="pdf",
			"<embed  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") +"""/>" ,
			//"<img class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>",
			"<img  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>")
			//|			zoomImage:&quot;file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + "&quot;,
			//  |         zoomSizeMode: &quot;image&quot;,
			//|         tintColor:&quot;#000&quot;,
			//|         tintOpacity:0.25,
			//|         captionPosition:&quot;bottom&quot;,
			//|         maxMagnification:4,
			//|         autoInside:450"">
			+"
			|</td>
			|<td width = ""40%"" valign=""top"">
			|<table width = ""100%"">
			//|<tr>
			//|<td width=15></td>
			//|<td><span style = ""color: #2D84C4"">&nbsp;&nbsp;Комментарий</span></td>
			//|<td width=15></td>
			//|</tr>
			//|<tr>
			//|<td width=15></td>
			//|<td>
			////|" + СформироватьТэгКомментария(ТекКартинкаСтруктура.УинКартинки, ТекКартинкаСтруктура.Комментарий) + "</td>
			//|</td>
			//|<td width=15></td>
			//|</tr>
			|</table>
			|
			|</td>
			|</tr>";
		Иначе
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%""></td>
			|<td valign=""center"" align = ""center"" height = 150 style = ""font-size:24; font-weight: bold; color: #AAAAAA"">
			|Нет фото
			|</td>
			|<td width = ""40%""></td>
			|</tr>";
		КонецЕсли;
		
		//Если Файл.Существует() Тогда
		//	
		//	Если ТекКартинкаСтруктура.СтатусФото = 0 Тогда
		//		ТекСтатус = "Не обработано";
		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #3232FF""";
		//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 1 Тогда
		//		ТекСтатус = "Не принято";
		//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #FF3232""";
		//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 2 Тогда
		//		ТекСтатус = "Принято";
		//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #00BE00""";
		//	КонецЕсли;
		
		ТекстВозврата = ТекстВозврата + "
		//|</table>
		//|<table   name = ""niz>"">
		|<tr>
		//|<td width = ""0%"">
		//|
		//|</td>
		|<td width = ""20%"" align=""right"">                             
		|<table width = ""100%"">
		|</table>
		|</td>
		
		|<td   valign=""top"" align = ""left"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + "><div id=""nizdiv"" style=""width=100%; height:70px; overflow:auto;""> <span>";
		//|<span><span id = ""CurrentPhotoState" + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус фото: " + ТекСтатус + "</span></span>
		//|<span style = ""font-size:12; color: #2D84C4"">Установить:</span>&nbsp;&nbsp;
		Сч=0;
		ТекТэги=Тэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
		ТекПрочиеТэги=ПрочиеТэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
		Для каждого Эл Из ТекТэги Цикл
			Сч=Сч+1;
			ТекстВозврата = ТекстВозврата +"
			|<a name = ""SetPhotoStatus"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Эл.Тэг+ """ style = ""font-size:12; color: #2D84C4"" href = """">"+"#"+Эл.Тэг+"</a>&nbsp;&nbsp;";
		КонецЦикла;
		Сч=0;
		Для каждого Эл Из ТекПрочиеТэги Цикл
			Сч=Сч+1;
			ТекстВозврата = ТекстВозврата +"
			|<a name = ""etc"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Сч+ """ style = ""font-size:12"" >"+Эл.Тэг+"</a>&nbsp;&nbsp;";
		КонецЦикла;   			
		
		ТекстВозврата = ТекстВозврата +"
		|</span></div></td>
		//|<td width = ""0%""></td>
		|<td width = ""40%"" valign=""top"">
		|<table width = ""100%"">
		|</table>
		|
		|</td>
		
		|</tr>";
		//КонецЕсли;	
		
		Если КолвоСтрок > 1 Тогда
			//	Подсказка=СтрокиСтруктуры[0].НоменклатураНаименование+" "+СтрокиСтруктуры[0].ХарактеристикаНаименование;
			//	ТекстВозврата = ТекстВозврата + "
			//	|<tr>
			//	//|<td width = ""0%""> </td>
			//	//|<td width = ""600""> </td>
			//	|<td align = ""left"" width=" + Формат(Цел(1500 * МасштабФотоРакурсов/100), "ЧГ=0") +">"+"
			//	//|	<div style=""width=100%; height:70px; overflow:auto;"" onscroll='Call1C()'>
			//	|	<div style=""width:1500px; height:70px; overflow:auto;"" onscroll='Call1C()'>
			//	|<table name = ""PictView>"" id=""PictureView1"">
			//	|
			//	|<tr id=""PictureView"">
			//	|<td id=""" + СтрокиСтруктуры[0].УинКартинки + "_q"">
			//	|<table  title="""+Подсказка+"""  id=""" + СтрокиСтруктуры[0].УинКартинки + "_T"  + """ border=""2"" cellpadding=""0"" bordercolor=" + ?(СтрокиСтруктуры[0].УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff") + " cellspacing=""0""><tr><td><img name=""smallpicture"" width=40 height=40 style = ""cursor: pointer"" id = """ + СтрокиСтруктуры[0].УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(?(нрег(СтрокиСтруктуры[0].Расширение)<>"pdf",ВременныйКаталог + "\" + СтрокиСтруктуры[0].УинКартинки + ?(СтрокиСтруктуры[0].ТолькоМиниатюра, "thumb", "") + "." + СтрокиСтруктуры[0].Расширение, ВременныйКаталог + "\pdf.jpg"), "\", "/") + """></td></tr></table></td>";
			//	Если Не ДобавлениеНовых Тогда
			//		Для н = 1 По КолвоСтрок - 1 Цикл
			//			ЭлементСтруктуры = СтрокиСтруктуры[н];
			//			Если СписокВыведенных.НайтиПоЗначению(ЭлементСтруктуры.УинКартинки)=Неопределено Тогда
			//				Продолжить;
			//			КонецЕсли;
			//			Подсказка=СтрокиСтруктуры[н].НоменклатураНаименование+" "+СтрокиСтруктуры[н].ХарактеристикаНаименование;
			//			ТекстВозврата = ТекстВозврата + "
			//			|<td id=""" + ЭлементСтруктуры.УинКартинки + "_q""><table  title="""+Подсказка+"""  id=""" + ЭлементСтруктуры.УинКартинки + "_T" +  """ border=""2"" cellpadding=""0"" bordercolor=" + ?(ЭлементСтруктуры.УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff") + " cellspacing=""0""><tr><td><img name=""smallpicture"" width = 40 height=40 style = ""cursor: pointer"" id = """ + ЭлементСтруктуры.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(?(нрег(ЭлементСтруктуры.Расширение)<>"pdf",ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение, ВременныйКаталог + "\pdf.jpg"), "\", "/")+ """></td></tr></table></td>";
			//		КонецЦикла;
			//	Иначе
			//		ТекстВозврата = ТекстВозврата + "
			//		|<!-- <td></td> -->";				
			//	КонецЕсли; 
			
			
			//	ТекстВозврата = ТекстВозврата + "
			//	|</tr>
			//	|</table>
			//	|</div>		
			//	|</td>
			//	//|<td width = ""0%""> </td>
			//	|</tr>
			//	|</table>";
			//	
			Если Не ДобавлениеНовых Тогда
				Для н = 1 По КолвоСтрок - 1 Цикл
					ТекКартинкаСтруктура = СтрокиСтруктуры[н];
					Если СписокВыведенных.НайтиПоЗначению(ТекКартинкаСтруктура.УинКартинки)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ТекстВозврата = ТекстВозврата + "
					|<tr>
					|<td width = ""20%"" align=""right"">
					|
					|<table id=""PhotoOpeartions" + ТекКартинкаСтруктура.УинКартинки + "_PhOp" + """>
					|<tr>
					|<td  align=""right"">
					|<img name=ShowBt alt=""Показать изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Show.png", "\", "/") + """>
					|<img name=SaveBt alt=""Сохранить как"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\SaveAs.png", "\", "/") + """>
					//|<img name=RotateBt alt=""Перевернуть изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Rotate.png", "\", "/") + """>
					//|<img name=TrimBt alt=""Вырезать картинку в сообщение магазину"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" +  """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Trim.png", "\", "/") + """>
					|</td>
					|</tr>
					|</table>
					|
					|</td>
					|<td id=""bigpicture""" + ТекКартинкаСтруктура.УинКартинки + " valign=""top"" align = ""center"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + ">
					|<p></p>
					|		"+?(нрег(ТекКартинкаСтруктура.Расширение)="pdf",
					"<embed  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") +"""/>" ,
					//"<img class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>",
					"<img  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>")
					//|			zoomImage:&quot;file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + "&quot;,
					//  |         zoomSizeMode: &quot;image&quot;,
					//|         tintColor:&quot;#000&quot;,
					//|         tintOpacity:0.25,
					//|         captionPosition:&quot;bottom&quot;,
					//|         maxMagnification:4,
					//|         autoInside:450"">
					+"
					|</td>
					|<td width = ""40%"" valign=""top"">
					|<table width = ""100%"">
					//|<tr>
					//|<td width=15></td>
					//|<td><span style = ""color: #2D84C4"">&nbsp;&nbsp;Комментарий</span></td>
					//|<td width=15></td>
					//|</tr>
					//|<tr>
					//|<td width=15></td>
					//|<td>
					////|" + СформироватьТэгКомментария(ТекКартинкаСтруктура.УинКартинки, ТекКартинкаСтруктура.Комментарий) + "</td>
					//|</td>
					//|<td width=15></td>
					//|</tr>
					|</table>
					|
					|</td>
					|</tr>";
					
					//Если Файл.Существует() Тогда
					//	
					//	Если ТекКартинкаСтруктура.СтатусФото = 0 Тогда
					//		ТекСтатус = "Не обработано";
					СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #3232FF""";
					//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 1 Тогда
					//		ТекСтатус = "Не принято";
					//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #FF3232""";
					//	ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 2 Тогда
					//		ТекСтатус = "Принято";
					//		СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #00BE00""";
					//	КонецЕсли;
					
					ТекстВозврата = ТекстВозврата + "
					//|</table>
					//|<table   name = ""niz>"">
					|<tr>
					//|<td width = ""0%"">
					//|
					//|</td>
					|<td width = ""20%"" align=""right"">                             
					|<table width = ""100%"">
					|</table>
					|</td>
					
					|<td   valign=""top"" align = ""left"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + "><div id=""nizdiv"" style=""width=100%; height:70px; overflow:auto;""> <span>";
					//|<span><span id = ""CurrentPhotoState" + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус фото: " + ТекСтатус + "</span></span>
					//|<span style = ""font-size:12; color: #2D84C4"">Установить:</span>&nbsp;&nbsp;
					Сч=0;
					ТекТэги=Тэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
					ТекПрочиеТэги=ПрочиеТэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
					Для каждого Эл Из ТекТэги Цикл
						Сч=Сч+1;
						ТекстВозврата = ТекстВозврата +"
						|<a name = ""SetPhotoStatus"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Эл.Тэг+ """ style = ""font-size:12; color: #2D84C4"" href = """">"+"#"+Эл.Тэг+"</a>&nbsp;&nbsp;";
					КонецЦикла;
					Сч=0;
					Для каждого Эл Из ТекПрочиеТэги Цикл
						Сч=Сч+1;
						ТекстВозврата = ТекстВозврата +"
						|<a name = ""etc"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Сч+ """ style = ""font-size:12"" >"+Эл.Тэг+"</a>&nbsp;&nbsp;";
					КонецЦикла;   			
					
					ТекстВозврата = ТекстВозврата +"
					|</span></div></td>
					//|<td width = ""0%""></td>
					|<td width = ""40%"" valign=""top"">
					|<table width = ""100%"">
					|</table>
					|
					|</td>
					
					|</tr>";
				КонецЦикла;
				ТекстВозврата=ТекстВозврата+"</table>";
			Иначе
				ТекстВозврата=ТекстВозврата+"</table>";
				ТекстВозврата = ТекстВозврата + "
				|<!-- <table></table> -->";				
			КонецЕсли; 
		КонецЕсли;
		
		
	КонецЕсли;		
	
	
	
	Возврат ТекстВозврата;
	
КонецФункции	

&НаКлиенте
Функция СформироватьТэгКомментария(УинКартинки, Комментарий)
	
	Комментарий = СтрЗаменить(Комментарий, Символы.ПС, "<br>");
	Возврат "<div name=""SetKomment"" style = ""cursor: pointer; background: #eeeee5; border: 1px dashed #abab9a; padding: 5px;	font: 8pt Tahoma; color:#2c2c2c"" id=""SpanKomment" + УинКартинки + """>" + ?(ЗначениеЗаполнено(Комментарий), СокрЛП(Комментарий), "<br><br>") + "</div>";
	
КонецФункции	

&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	//Сообщить(Элементы.ДокументHTML.Документ.body.InnerHtml);
	
	СтандартнаяОбработка = Ложь;
	Попытка
		Если ДанныеСобытия.Element.name = "picture" Тогда
			Если ЗначениеЗаполнено(ДанныеСобытия.Element.id) Тогда
				id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
				ТекКартинкаСтруктура=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",СтрПолучитьСтроку(id, 1)))[0];
				СтруктураСобытия = Новый Структура("УинКартинка", СтрПолучитьСтроку(id, 1));
				
				
				Парам=Новый Структура("УинЗаписи,ВременныйКаталог,Расширение",СтруктураСобытия.УинКартинка,ВременныйКаталог,ТекКартинкаСтруктура.Расширение);
				ОткрытьФорму("Обработка.ЛентаКартинок.Форма.ФормаВыбора",Парам,ЭтаФорма);
				//Файлы = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
				//Если Файлы.Количество() > 0 Тогда
				//	//Стр = Новый Структура("КартинкаСсылка");
				//	//Стр.Вставить("КартинкаСсылка", ПоместитьВоВременноеХранилище(Новый Картинка(Файлы[0].ПолноеИмя), ЭтаФорма.УникальныйИдентификатор)); 
				//	//Форма = ПолучитьФорму("ОбщаяФорма.Фото", Стр);
				//	//ОткрытьФорму(Форма);
				//	ОткрытьЗначение(Новый Картинка(Файлы[0].ПолноеИмя));
				//КонецЕсли;
				
				//РакурсСсылка = ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса);
				//	СтрокиПоРакурсу = ТаблицаСтруктурыФайлов;
				//	СледКартинка = "";
				//	Для н = 0 По СтрокиПоРакурсу.Количество() - 1 Цикл
				//		Если СтрокиПоРакурсу[н].УинКартинки = СтруктураСобытия.УинКартинка
				//			И н < СтрокиПоРакурсу.Количество() - 1 Тогда
				//			СтрокиТекКартинка = ТекКартинкиРакурсов;
				//			Если СтрокиТекКартинка.Количество() = 0 Тогда
				//				СтрокаТекКартинка = ТекКартинкиРакурсов.Добавить();
				//				//СтрокаТекКартинка.УинРакурса = СтруктураСобытия.УинРакурса;
				//			Иначе	
				//				СтрокаТекКартинка = СтрокиТекКартинка[0];
				//			КонецЕсли;	
				//			СтрокаТекКартинка.УинКартинки = СтрокиПоРакурсу[н + 1].УинКартинки;
				//			
				//			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтрокаТекКартинка.УинКартинки + ".*");
				//			//Если ФайлыКартинки.Количество() = 0 Тогда
				//			//	СтрФайл = СкачатьПолнуюКартинкуССервера(СтрокаТекКартинка.УинКартинки);
				//			//	СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтрокаТекКартинка.УинКартинки + "." + СтрФайл.Расширение);
				//			//КонецЕсли;
				//		КонецЕсли;	
				//	КонецЦикла;	
				//	
				//	Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
				//		Если Найти(Тэг.id, "Rakurs") > 0 Тогда
				//			ТекФотоПоРакурсу = ТекКартинкиРакурсов;
				//			Тэг.parentElement.innerHTML = "<table id = ""Rakurs" +""" border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
				//			+ СформироватьТэгиПоРакурсу( ?(ТекФотоПоРакурсу.Количество() > 0, ТекФотоПоРакурсу[0].УинКартинки, ""))
				//			+ "</table>";
				//		КонецЕсли;	
				//	КонецЦикла;
			КонецЕсли;	
		ИначеЕсли ДанныеСобытия.Element.name = "smallpicture" Тогда
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка", СтрПолучитьСтроку(id, 1));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			//Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
			//	Если Найти(Тэг.id, "Rakurs")  > 0 Тогда
			//		Тэг.parentElement.innerHTML = "<table id = ""Rakurs"+""" border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
			//		 + СформироватьТэгиПоРакурсу( СтруктураСобытия.УинКартинка)
			//		 + "</table>";
			//		 
			//		СтрокиТекКартинки = ТекКартинкиРакурсов;
			//		Если СтрокиТекКартинки.Количество() = 0 Тогда
			//			СтрокаТекКартинки = ТекКартинкиРакурсов.Добавить();
			//		Иначе
			//			СтрокаТекКартинки = СтрокиТекКартинки[0];
			//		КонецЕсли;	 
			//		СтрокаТекКартинки.УинКартинки = СтруктураСобытия.УинКартинка;
			//	КонецЕсли;
			//КонецЦикла;
			
			
			
			
			Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("td") Цикл
				Если Найти(Тэг.id, "bigpicture")  > 0 Тогда
					ТекКартинкаСтруктура=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",СтрПолучитьСтроку(id, 1)))[0];
					Тэг.innerHTML = 			"<p></p>
					|		"+?(нрег(ТекКартинкаСтруктура.Расширение)="pdf",
					"<embed  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") +"""/>" ,
					//"<img class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>",
					"<img  class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"+ """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>");
					//|			zoomImage:&quot;file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + "&quot;,
					//  |         zoomSizeMode: &quot;image&quot;,
					//|         tintColor:&quot;#000&quot;,
					//|         tintOpacity:0.25,
					//|         captionPosition:&quot;bottom&quot;,
					//|         maxMagnification:4,
					//|         autoInside:450"">
					
					СтрокиТекКартинки = ТекКартинкиРакурсов;
					Если СтрокиТекКартинки.Количество() = 0 Тогда
						СтрокаТекКартинки = ТекКартинкиРакурсов.Добавить();
					Иначе
						СтрокаТекКартинки = СтрокиТекКартинки[0];
					КонецЕсли;	 
					СтрокаТекКартинки.УинКартинки = СтруктураСобытия.УинКартинка;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("div") Цикл
				Если Найти(Тэг.id, "nizdiv")  > 0 Тогда
					ТекКартинкаСтруктура=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки",СтрПолучитьСтроку(id, 1)))[0];
					ТекстВозврата = 			"	 <span>";
					//|<span><span id = ""CurrentPhotoState" + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус фото: " + ТекСтатус + "</span></span>
					//|<span style = ""font-size:12; color: #2D84C4"">Установить:</span>&nbsp;&nbsp;
					Сч=0;
					ТекТэги=Тэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
					ТекПрочиеТэги=ПрочиеТэги.НайтиСтроки(Новый Структура("УинКартинки",ТекКартинкаСтруктура.УинКартинки));
					Для каждого Эл Из ТекТэги Цикл
						Сч=Сч+1;
						ТекстВозврата = ТекстВозврата +"
						|<a name = ""SetPhotoStatus"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Эл.Тэг+ """ style = ""font-size:12; color: #2D84C4"" href = """">"+"#"+Эл.Тэг+"</a>&nbsp;&nbsp;";
					КонецЦикла;
					Сч=0;
					Для каждого Эл Из ТекПрочиеТэги Цикл
						Сч=Сч+1;
						ТекстВозврата = ТекстВозврата +"
						|<a name = ""etc"+Сч+""" id = """ + ТекКартинкаСтруктура.УинКартинки + "_"  +Сч+ """ style = ""font-size:12"" >"+Эл.Тэг+"</a>&nbsp;&nbsp;";
					КонецЦикла;   			
					
					ТекстВозврата = ТекстВозврата +"
					|</span>";
					Тэг.innerHTML=ТекстВозврата;
					
				КонецЕсли;
			КонецЦикла;
			Если Не ТекКартинка=ТекКартинкаСтруктура.УинКартинки Тогда
				Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("td") Цикл
					Если Найти(Тэг.id, ТекКартинкаСтруктура.УинКартинки + "_q")  > 0 Тогда
						Тэг.innerHTML=СтрЗаменить(Тэг.innerHTML,"#ffffff","#aaaa00");
					КонецЕсли;
					Если Найти(Тэг.id, ТекКартинка + "_q")  > 0 Тогда
						Тэг.innerHTML=СтрЗаменить(Тэг.innerHTML,"#aaaa00","#ffffff");
					КонецЕсли;
				КонецЦикла;
				ТекКартинка=ТекКартинкаСтруктура.УинКартинки;
			КонецЕсли; 
			
			
			//
			
			
			
		ИначеЕсли ДанныеСобытия.Element.name = "SetKomment" Тогда
			Если НЕ МожетРедактировать Тогда
				Предупреждение("У вас нет прав редактирования");
			Иначе	
				Id = СтрЗаменить(ДанныеСобытия.Element.id, "SpanKomment", "");
				СтрокиФото = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", Id));
				Если СтрокиФото.Количество() > 0 Тогда
					СтрокаСФото = СтрокиФото[0];
					Коммент = СтрЗаменить(СтрокаСФото.Комментарий, "<br>", Символы.ПС);
					Если ВвестиСтроку(Коммент, "Введите комментарий",, Истина) Тогда
						СтрокаСФото.Комментарий = Коммент;
						ЗаписатьКомментарийВФото(Id, Коммент);
					КонецЕсли;
					Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("div") Цикл
						Если Тэг.id = "SpanKomment" + Id Тогда
							Тэг.parentElement.innerHtml = СформироватьТэгКомментария(Id, Коммент);
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			//ИначеЕсли Лев(ДанныеСобытия.Element.name, СтрДлина("SetStatus")) = "SetStatus" Тогда
			//	Если НЕ МожетРедактировать Тогда
			//		Предупреждение("У вас нет прав редактирования");
			//	Иначе
			//		СтатусКУстановке = СтрЗаменить(ДанныеСобытия.Element.name, "SetStatus", "");
			//		Если СтатусКУстановке = "0" Тогда
			//			ТекСтатус = "Не обработан";
			//			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #3232FF""";
			//		ИначеЕсли СтатусКУстановке = "1" Тогда
			//			ТекСтатус = "Не принят";
			//			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #FF3232""";
			//		ИначеЕсли СтатусКУстановке = "2" Тогда
			//			ТекСтатус = "Принят";
			//			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #00BE00""";
			//		КонецЕсли;
			//		
			//		Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("span") Цикл
			//			Если Найти(Тэг.id, "CurrentState" + ДанныеСобытия.Element.Id) > 0 Тогда
			//				//Тэг.parentElement.innerHTML = СформироватьТэгиПоРакурсу(ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса), СтруктураСобытия.УинКартинка);
			//				Тэг.parentElement.innerHTML = "<span id = ""CurrentState" + ДанныеСобытия.Element.id + """ " + СтильСтатуса + ">Текущий статус: " + ТекСтатус + "</span>";
			//				//ТекРакурс = ПолучитьСсылкуНаРакурс(ДанныеСобытия.Element.id);
			//				СтрокиРакурс = Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", ТекРакурс));
			//				Если СтрокиРакурс.Количество() > 0 Тогда
			//					СтрокаРакурс = СтрокиРакурс[0];
			//				Иначе
			//					СтрокаРакурс = Объект.Ракурсы.Добавить();
			//					СтрокаРакурс.Ракурс = ТекРакурс;
			//				КонецЕсли;
			//				Если СтатусКУстановке = "0" Тогда
			//					СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.ПустаяСсылка");
			//				ИначеЕсли СтатусКУстановке = "1" Тогда
			//					СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Непринято");
			//					СтрокиСОтказами = Объект.ОтказыПоРакурсам.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
			//					Если СтрокиСОтказами.Количество() = 0 Тогда
			//						СтрокаСОтказом = Объект.ОтказыПоРакурсам.Добавить();
			//						СтрокаСОтказом.Ракурс = ТекРакурс;
			//					Иначе
			//						СтрокаСОтказом = СтрокиСОтказами[0];
			//					КонецЕсли;
			//					Коэф = "";
			//					Если СтрокаСОтказом.Количество + 1 >= 2 Тогда
			//						Коэф = "1/3";
			//					ИначеЕсли СтрокаСОтказом.Количество + 1 >= 1 Тогда
			//						Коэф = "2/3";	
			//					КонецЕсли;	
			//					ТекстВопроса = "Учесть отказ по ракурсу в расчете баллов? Новый коэффициент для расчета балла будет " + Коэф;
			//					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			//					Если Ответ = КодВозвратаДиалога.Да Тогда
			//						СтрокаСОтказом.Количество = СтрокаСОтказом.Количество + 1;
			//					КонецЕсли;	
			//				ИначеЕсли СтатусКУстановке = "2" Тогда
			//					СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Принято");	
			//				КонецЕсли;
			//				СтрокиСтатусРакурса = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", ТекРакурс));
			//				Для Каждого СтрокаРакурс Из СтрокиСтатусРакурса Цикл
			//					СтрокаРакурс.СтатусРакурса = Число(СтатусКУстановке);
			//				КонецЦикла;	
			//				//ФотоНеОбработанные = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс, СтатусФото", ТекРакурс, 0));
			//				ФотоНеОбработанные = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", ТекРакурс));
			//				Если ФотоНеОбработанные.Количество() > 0 Тогда
			//					//Ответ = Вопрос("Проставить всем не обработанным фото ракурса такой же статус?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			//					//Если Ответ = КодВозвратаДиалога.Да Тогда
			//						Для Каждого СтрокаФото Из ФотоНеОбработанные Цикл
			//							СтрокаФото.СтатусФото = СтатусКУстановке;
			//							ЗаписатьСтатусВФото(СтрокаФото.УинКартинки, СтатусКУстановке);
			//						КонецЦикла;
			//						Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
			//							Если Найти(Тэг.id, "Rakurs" + ДанныеСобытия.Element.id) > 0 Тогда
			//								ТекФотоПоРакурсу = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", ДанныеСобытия.Element.id));
			//								Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + ДанныеСобытия.Element.id + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
			//									+ СформироватьТэгиПоРакурсу( ?(ТекФотоПоРакурсу.Количество() > 0, ТекФотоПоРакурсу[0].УинКартинки, ""))
			//									+ "</table>";
			//							КонецЕсли;	
			//						КонецЦикла;
			//					//КонецЕсли;	
			//				КонецЕсли;
			//				ЭтаФорма.Модифицированность = Истина;
			//			КонецЕсли;	
			//		КонецЦикла;
			//		ПересчитатьБаллыПоДокументу();
			//		Объект.Проверяющий = глЗначениеПеременной("глТекущийПользователь");
			//	КонецЕсли;	
		ИначеЕсли Лев(ДанныеСобытия.Element.name, СтрДлина("SetPhotoStatus")) = "SetPhotoStatus" Тогда
			
			//	Если НЕ МожетРедактировать Тогда
			//		Предупреждение("У вас нет прав редактирования");
			//	Иначе
			//		СтатусКУстановке = СтрЗаменить(ДанныеСобытия.Element.name, "SetPhotoStatus", "");
			Модифицированность = Истина;
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			Искать=СтрПолучитьСтроку(id, 2);
			ИскатьПриИзменении(Неопределено);
			ОбновитьЛенту(Неопределено);
			//		СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			//		СтрокиФото = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", СтруктураСобытия.УинКартинка));
			//		Если СтрокиФото.Количество() > 0 Тогда
			//			СтрокиФото[0].СтатусФото = Число(СтатусКУстановке);
			//		КонецЕсли;
			//		ЗаписатьСтатусВФото(СтруктураСобытия.УинКартинка, СтатусКУстановке);
			//		РакурсСсылка = ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса);
			//		СтрокиПоРакурсу = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
			//		ЕстьНеПринятые = Ложь;
			//		ВсеПриняты = Истина;
			//		Для Каждого СтрокаПоРакурсу Из СтрокиПоРакурсу Цикл
			//			ЕстьНеПринятые = Макс(ЕстьНеПринятые, СтрокаПоРакурсу.СтатусФото = 1);
			//			ВсеПриняты = Мин(ВсеПриняты, СтрокаПоРакурсу.СтатусФото = 2);
			//		КонецЦикла;	
			//		Если ВсеПриняты И Не ЕстьНеПринятые Тогда
			//			//СтатусПринято = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Принято");
			//			Для Каждого СтрокаПоРакурсу Из СтрокиПоРакурсу Цикл
			//				СтрокаПоРакурсу.СтатусРакурса = 2;
			//			КонецЦикла;
			//			СтрокиРакурс = Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
			//			Если СтрокиРакурс.Количество() > 0 Тогда
			//				СтрокаРакурс = СтрокиРакурс[0];
			//			Иначе
			//				СтрокаРакурс = Объект.Ракурсы.Добавить();
			//				СтрокаРакурс.Ракурс = РакурсСсылка;
			//			КонецЕсли;
			//			СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Принято");
			//		ИначеЕсли ЕстьНеПринятые Тогда
			//			//СтатусНеПринято = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Непринято");
			//			Для Каждого СтрокаПоРакурсу Из СтрокиПоРакурсу Цикл
			//				СтрокаПоРакурсу.СтатусРакурса = 1;
			//			КонецЦикла;
			//			СтрокиРакурс = Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
			//			Если СтрокиРакурс.Количество() > 0 Тогда
			//				СтрокаРакурс = СтрокиРакурс[0];
			//			Иначе
			//				СтрокаРакурс = Объект.Ракурсы.Добавить();
			//				СтрокаРакурс.Ракурс = РакурсСсылка;
			//			КонецЕсли;
			//			СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Непринято");
			//			СтрокиСОтказами = Объект.ОтказыПоРакурсам.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
			//			Если СтрокиСОтказами.Количество() = 0 Тогда
			//				СтрокаСОтказом = Объект.ОтказыПоРакурсам.Добавить();
			//				СтрокаСОтказом.Ракурс = РакурсСсылка;
			//			Иначе
			//				СтрокаСОтказом = СтрокиСОтказами[0];
			//			КонецЕсли;
			//			
			//			Коммент = "";
			//			Если СтрокиФото.Количество() > 0 Тогда
			//				СтрокаСФото = СтрокиФото[0];
			//				Коммент = СтрЗаменить(СтрокаСФото.Комментарий, "<br>", Символы.ПС);
			//			КонецЕсли;
			//			
			//			Результат = ОткрытьФормуМодально("Документ.МП_ЗадачаМагазина.Форма.ФормаКомментарияОтказа", Новый Структура("Комментарий, КолвоОтказов", Коммент, СтрокаСОтказом.Количество));
			//			
			//			Если Результат <> Неопределено Тогда
			//				СтрокаСОтказом.Количество = Результат.КолвоОтказов;
			//				СтрокаСФото.Комментарий = Результат.Комментарий;
			//				ЗаписатьКомментарийВФото(СтруктураСобытия.УинКартинка, Результат.Комментарий);
			//			КонецЕсли;	
			//		КонецЕсли;
			//		
			//		СледКартинка = "";
			//		Для н = 0 По СтрокиПоРакурсу.Количество() - 1 Цикл
			//			Если СтрокиПоРакурсу[н].УинКартинки = СтруктураСобытия.УинКартинка
			//				И н < СтрокиПоРакурсу.Количество() - 1 Тогда
			//				СтрокиТекКартинка = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", СтруктураСобытия.УинРакурса));
			//				Если СтрокиТекКартинка.Количество() = 0 Тогда
			//					СтрокаТекКартинка = ТекКартинкиРакурсов.Добавить();
			//					СтрокаТекКартинка.УинРакурса = СтруктураСобытия.УинРакурса;
			//				Иначе	
			//					СтрокаТекКартинка = СтрокиТекКартинка[0];
			//				КонецЕсли;	
			//				СтрокаТекКартинка.УинКартинки = СтрокиПоРакурсу[н + 1].УинКартинки;
			//				
			//				ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтрокаТекКартинка.УинКартинки + ".*");
			//				Если ФайлыКартинки.Количество() = 0 Тогда
			//					СтрФайл = СкачатьПолнуюКартинкуССервера(СтрокаТекКартинка.УинКартинки);
			//					СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтрокаТекКартинка.УинКартинки + "." + СтрФайл.Расширение);
			//				КонецЕсли;
			//			КонецЕсли;	
			//		КонецЦикла;	
			//		
			//		Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
			//			Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинРакурса) > 0 Тогда
			//				ТекФотоПоРакурсу = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", СтруктураСобытия.УинРакурса));
			//				Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинРакурса + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
			//				+ СформироватьТэгиПоРакурсу( ?(ТекФотоПоРакурсу.Количество() > 0, ТекФотоПоРакурсу[0].УинКартинки, ""))
			//				+ "</table>";
			//			КонецЕсли;	
			//		КонецЦикла;
			//		
			//		ПересчитатьБаллыПоДокументу();
			//		Объект.Проверяющий = глЗначениеПеременной("глТекущийПользователь");
			//	КонецЕсли;	
			
		ИначеЕсли ДанныеСобытия.Element.name = "ShowBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка", СтрПолучитьСтроку(id, 1));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				Если нрег(ФайлыКартинки[0].Расширение)=".pdf" Тогда
					ЗапуститьПриложение(ФайлыКартинки[0].ПолноеИмя);
				Иначе
					ОткрытьЗначение(Новый Картинка(ФайлыКартинки[0].ПолноеИмя));
				КонецЕсли; 
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Element.name = "SaveBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка", СтрПолучитьСтроку(id, 1));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				//Если нрег(ФайлыКартинки[0].Расширение)=".pdf" Тогда
				//	Возврат
				//КонецЕсли; 
				ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
				Если ДиалогСохранения.Выбрать() Тогда
					КопироватьФайл(ФайлыКартинки[0].ПолноеИмя, ДиалогСохранения.ПолноеИмяФайла + ФайлыКартинки[0].Расширение);
				КонецЕсли;
			КонецЕсли;
			
			//ИначеЕсли ДанныеСобытия.Element.name = "RotateBt" Тогда
			//	
			//	id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			//	СтруктураСобытия = Новый Структура("УинКартинка,", СтрПолучитьСтроку(id, 1));
			//	ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			//	Если ФайлыКартинки.Количество() > 0 Тогда
			//		Список = Новый СписокЗначений();
			//		Список.Добавить(1, "На 90 градусов против часовой стрелки");
			//		Список.Добавить(2, "На 90 градусов по часовой стрелке");
			//		Список.Добавить(3, "На 180 градусов");
			//		Выбранное = Список.ВыбратьЭлемент("Выберите угол поворота");
			//		Если Выбранное <> Неопределено Тогда
			//			ИмяФайла = ФайлыКартинки[0].ПолноеИмя;
			//			КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяФайла, Выбранное.Значение);
			//			
			//			АдресВХранилище = ПоместитьВоВременноеХранилище(Новый Картинка(ИмяФайла), ЭтаФорма.УникальныйИдентификатор);
			//			ЗаписатьПеревернутоеИзображениеНаСервер(СтруктураСобытия.УинКартинка, АдресВХранилище);
			//			
			//			Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
			//				Если Найти(Тэг.id, "Rakurs") > 0 Тогда
			//					Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
			//					 + СформироватьТэгиПоРакурсу(СтруктураСобытия.УинКартинка)
			//					 + "</table>";
			//				КонецЕсли;	
			//			КонецЦикла;
			//			
			//		КонецЕсли;	
		КонецЕсли;
		
		//ИначеЕсли ДанныеСобытия.Element.name = "TrimBt" Тогда
		//	
		//	id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
		//	СтруктураСобытия = Новый Структура("УинКартинка", СтрПолучитьСтроку(id, 1));
		//	ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
		//	Если ФайлыКартинки.Количество() > 0 Тогда
		//		ИмяФайла = ФайлыКартинки[0].ПолноеИмя;
		//		КартинкаТекст = КомпонентаДопГрафика.ВырезатьЧастьИзображения(ИмяФайла);
		//		Если ЗначениеЗаполнено(КартинкаТекст) Тогда
		//			КартинкаВырезанная = КартинкаВДД(КартинкаТекст);
		//			Коммент = "";
		//			СтрокиФото = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", СтруктураСобытия.УинКартинка));
		//			Если СтрокиФото.Количество() > 0 Тогда
		//				СтрокаСФото = СтрокиФото[0];
		//				Коммент = СтрЗаменить(СтрокаСФото.Комментарий, "<br>", Символы.ПС);
		//			КонецЕсли;
		//			
		//			СтруктураСообщения = ПолучитьСтруктуруДляСообщенияМОС(СтруктураСобытия.УинРакурса, Объект.Магазин, КартинкаВырезанная, Коммент);
		//			
		//			ФормаСообщения = ПолучитьФорму("Документ.СообщениеМОС.Форма.ФормаСообщенияЦО", Новый Структура("ФД", СтруктураСообщения.ФормДокумент), ЭтаФорма);
		//			
		//			ЗаполнитьЗначенияСвойств(ФормаСообщения.Объект, СтруктураСообщения);
		//			ФормаСообщения.Объект.СтруктурныеЕдиницы.Очистить();
		//			СтрокаТЧ1 = ФормаСообщения.Объект.СтруктурныеЕдиницы.Добавить();
		//			СтрокаТЧ1.СтруктурнаяЕдиница = Объект.Магазин;
		//			СтрокаТЧ1.СтаршийСмены = СтруктураСообщения.СтаршийСмены;
		//			ФормаСообщения.СписокМагазинов.Очистить();
		//			ФормаСообщения.СписокМагазинов.Добавить(Объект.Магазин, Строка(Объект.Магазин), Истина);
		//			ФормаСообщения.Объект.ФорматированиеТекста = Истина;
		//			ФормаСообщения.Открыть();
		//		КонецЕсли;	
		//	КонецЕсли;	
		
		//КонецЕсли;	
	Исключение
	КонецПопытки;
	//
	//Сообщить("Разрыв");
	//Сообщить(Элементы.ДокументHTML.Документ.body.InnerHtml);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКомментарийВФото(УинФото, Коммент)
	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьЛентуСервер()
	УстановитьПривилегированныйРежим(Истина);
	//СохранитьНастройки();
	Запрос = Новый Запрос;
	Запрос.Текст =" 
	//ВЫБРАТЬ
	//|	ПрикрепленныеФотоКОбъектам.УинЗаписи,
	//|	ПрикрепленныеФотоКОбъектам.Номенклатура,
	//|	ПрикрепленныеФотоКОбъектам.Характеристика,
	//|	ПрикрепленныеФотоКОбъектам.Объект,
	//|	ПрикрепленныеФотоКОбъектам.ТипЗаписи,
	//|	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла,
	//|	ПрикрепленныеФотоКОбъектам.ДатаДобавления,
	//|	ПрикрепленныеФотоКОбъектам.Расширение,
	//|	ПрикрепленныеФотоКОбъектам.ТипОперацииМагазина,
	//|	ПрикрепленныеФотоКОбъектам.ВАрхиве,
	//|	ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница,
	//|	ПрикрепленныеФотоКОбъектам.Текст,
	//|	NULL КАК Производитель // ЗначенияСвойствОбъектов.Значение КАК Производитель
	//|ПОМЕСТИТЬ втСПроизводителями
	//|ИЗ
	//|	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
	////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	////|		ПО ПрикрепленныеФотоКОбъектам.Характеристика = ЗначенияСвойствОбъектов.Объект
	////|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	////|			И (ПрикрепленныеФотоКОбъектам.ДатаДобавления МЕЖДУ &Дата1 И &Дата2)  //ВНИМАНИЕ!!!
	//|ГДЕ
	//|	НЕ ПрикрепленныеФотоКОбъектам.УинЗаписи В (&МассивУин)
	//|	И (ПрикрепленныеФотоКОбъектам.Номенклатура.Наименование ПОДОБНО &Наименование
	//|			ИЛИ ПрикрепленныеФотоКОбъектам.Характеристика.Наименование ПОДОБНО &Наименование
	//|			ИЛИ ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница.Наименование ПОДОБНО &Наименование
	//|			ИЛИ ВЫРАЗИТЬ(ПрикрепленныеФотоКОбъектам.Текст КАК СТРОКА(300)) ПОДОБНО &Наименование)
	//|	И (ПрикрепленныеФотоКОбъектам.Номенклатура в (&Объекты)
	//|			ИЛИ ПрикрепленныеФотоКОбъектам.Характеристика в (&Объекты)
	//|			ИЛИ ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница в (&Объекты)
	//|			ИЛИ &ФлПолныеПрава)
	//|	И ПрикрепленныеФотоКОбъектам.ДатаДобавления МЕЖДУ &Дата1 И &Дата2 и &ДопУсловие
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПрикрепленныеФотоКОбъектам.УинЗаписи
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	втСПроизводителями КАК ПрикрепленныеФотоКОбъектам
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата2, ) КАК СоответствиеОбъектРольСрезПоследних
	//|		ПО (ВЫБОР
	//|				КОГДА &Роль = ЗНАЧЕНИЕ(Справочник.ролипользователей.пустаяссылка)
	//|					ТОГДА ЛОЖЬ
	//|				ИНАЧЕ (ПрикрепленныеФотоКОбъектам.Номенклатура = СоответствиеОбъектРольСрезПоследних.Объект
	//|						ИЛИ ПрикрепленныеФотоКОбъектам.Характеристика = СоответствиеОбъектРольСрезПоследних.Объект
	//|						ИЛИ ПрикрепленныеФотоКОбъектам.Объект = СоответствиеОбъектРольСрезПоследних.Объект
	//|						ИЛИ ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница = СоответствиеОбъектРольСрезПоследних.Объект
	//|						ИЛИ ПрикрепленныеФотоКОбъектам.Производитель = СоответствиеОбъектРольСрезПоследних.Объект)
	//|						И &Роль = СоответствиеОбъектРольСрезПоследних.РольПользователя
	//|			КОНЕЦ)
	//|ГДЕ
	//|	(НЕ СоответствиеОбъектРольСрезПоследних.РольПользователя ЕСТЬ NULL 
	//|			ИЛИ &Роль = ЗНАЧЕНИЕ(Справочник.ролипользователей.пустаяссылка))
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПрикрепленныеФотоКОбъектам.УинЗаписи
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрикрепленныеФотоКОбъектам.Номенклатура,
	|	ПрикрепленныеФотоКОбъектам.Характеристика,
	|	ПрикрепленныеФотоКОбъектам.Объект,
	|	ПрикрепленныеФотоКОбъектам.ТипЗаписи,
	|	ПрикрепленныеФотоКОбъектам.УинЗаписи,
	|	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла,
	|	ПрикрепленныеФотоКОбъектам.ДатаДобавления КАК ДатаДобавления,
	|	ПрикрепленныеФотоКОбъектам.Расширение,
	|	ПрикрепленныеФотоКОбъектам.ТипОперацииМагазина,
	|	ПрикрепленныеФотоКОбъектам.ВАрхиве,
	|	ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(ПрикрепленныеФотоКОбъектам.Текст КАК СТРОКА(300)) КАК Текст
	//|	,ЕСТЬNULL(РолиПользователей.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.Пустаяссылка)) КАК Роль
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//|		ПО ПрикрепленныеФотоКОбъектам.УинЗаписи = вт.УинЗаписи
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
	//|		ПО (&Роль = РолиПользователей.Ссылка)
	|ГДЕ
	|	ПрикрепленныеФотоКОбъектам.ВАрхиве = ЛОЖЬ
	|	И НЕ ПрикрепленныеФотоКОбъектам.УинЗаписи В (&МассивУин)
	|	И (ПрикрепленныеФотоКОбъектам.Номенклатура.Наименование ПОДОБНО &Наименование
	|			ИЛИ ПрикрепленныеФотоКОбъектам.Характеристика.Наименование ПОДОБНО &Наименование
	|			ИЛИ ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница.Наименование ПОДОБНО &Наименование
	|			ИЛИ ВЫРАЗИТЬ(ПрикрепленныеФотоКОбъектам.Текст КАК СТРОКА(300)) ПОДОБНО &Наименование)
	|	И (ПрикрепленныеФотоКОбъектам.Номенклатура в (&Объекты)
	|			ИЛИ ПрикрепленныеФотоКОбъектам.Характеристика в (&Объекты)
	|			ИЛИ ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница в (&Объекты)
	|			ИЛИ &ФлПолныеПрава)
	|	И ПрикрепленныеФотоКОбъектам.ДатаДобавления МЕЖДУ &Дата1 И &Дата2 и &ДопУсловие
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДобавления УБЫВ";
	Запрос.УстановитьПараметр("МассивУин",ТаблицаСтруктурыФайлов.Выгрузить().ВыгрузитьКолонку("УИНКартинки"));
	Запрос.УстановитьПараметр("Наименование","%"+СокрЛП(Искать)+"%");
	Запрос.УстановитьПараметр("Роль",Справочники.РолиПользователей.ПустаяСсылка());
	Запрос.УстановитьПараметр("Дата1",ДатаДобавления.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2",КонецДня(ДатаДобавления.ДатаОкончания));
	
	СоотСписков=Новый Соответствие;
	Если ЗначениеЗаполнено(Роль) Тогда
		МасОб=Новый Массив;
		МасСтр=Отчет.Объекты.НайтиСтроки(Новый Структура("Роль",Роль));
		Для каждого Эл Из МасСтр Цикл
			МасОб.Добавить(Эл.Объект);
		КонецЦикла; 
	Иначе	
		МасОб=Отчет.Объекты.Выгрузить().ВыгрузитьКолонку("Объект");
		Для каждого Стр Из Отчет.Роли Цикл
			МасСтр=Отчет.Объекты.НайтиСтроки(Новый Структура("Роль",Стр.Роль));
			СпОб=Новый СписокЗначений;
			
			Для каждого Эл Из МасСтр Цикл
				СпОб.Добавить(Эл.Объект);
			КонецЦикла; 
			СоотСписков.Вставить(Стр.Роль,СпОб);
		КонецЦикла; 
		
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("Объекты",МасОб);
	Запрос.УстановитьПараметр("ФлПолныеПрава",Ложь);
	
	Табл=Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	СтрДопУсл="ИСТИНА";
	Для каждого Стр Из Табл Цикл
		Если ТипЗнч(Стр)<>Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если Строка(Стр.ЛевоеЗначение)="Роль" Тогда
			Если Стр.Использование и ТипЗнч(Стр.ПравоеЗначение)=Тип("СправочникСсылка.РолиПользователей") Тогда
				Запрос.УстановитьПараметр("Роль",Стр.ПравоеЗначение);
			КонецЕсли; 
		КонецЕсли;
		Если Строка(Стр.ЛевоеЗначение)="Номенклатура" Тогда
			Если Стр.Использование и ТипЗнч(Стр.ПравоеЗначение)=Тип("СправочникСсылка.Номенклатура") и Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
				Запрос.УстановитьПараметр("Номенклатура",Стр.ПравоеЗначение);
				СтрДопУсл=СтрДопУсл+" и ПрикрепленныеФотоКОбъектам.Номенклатура=&Номенклатура ";
			КонецЕсли; 
		КонецЕсли;
		Если Строка(Стр.ЛевоеЗначение)="Характеристика" Тогда
			Если Стр.Использование и ТипЗнч(Стр.ПравоеЗначение)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры") и Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
				Запрос.УстановитьПараметр("Характеристика",Стр.ПравоеЗначение);
				СтрДопУсл=СтрДопУсл+" и ПрикрепленныеФотоКОбъектам.Характеристика=&Характеристика ";
			КонецЕсли; 
		КонецЕсли;
		Если Строка(Стр.ЛевоеЗначение)="СтруктурнаяЕдиница" Тогда
			Если Стр.Использование и ТипЗнч(Стр.ПравоеЗначение)=Тип("СправочникСсылка.СтруктурныеЕдиницы") и Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
				Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Стр.ПравоеЗначение);
				СтрДопУсл=СтрДопУсл+" и ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница=&СтруктурнаяЕдиница ";
			КонецЕсли; 
		КонецЕсли;
		Если Строка(Стр.ЛевоеЗначение)="ТипЗаписи" Тогда
			Если Стр.Использование и ТипЗнч(Стр.ПравоеЗначение)=Тип("ПеречислениеСсылка.ТипыЗаписейПриложенныхКартинок") и Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
				Запрос.УстановитьПараметр("ТипЗаписи",Стр.ПравоеЗначение);
				СтрДопУсл=СтрДопУсл+" и ПрикрепленныеФотоКОбъектам.ТипЗаписи=&ТипЗаписи ";
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"&ДопУсловие",СтрДопУсл);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРезультатЗапроса = РезультатЗапроса.Выгрузить();
	
	МасТиповОпераций=ТЗРезультатЗапроса.ВыгрузитьКолонку("ТипОперацииМагазина");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыОпераций.ссылка,
	|	ТипыОпераций.code_operation КАК КодОперации
	|ИЗ
	|	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	|ГДЕ
	|	ТипыОпераций.table_operation = ""td_move""
	|	И ТипыОпераций.field_operation = ""operation_type_orig""
	|	И ТипыОпераций.code_operation В(&МасТиповОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыОпераций.code_operation";
	Запрос.УстановитьПараметр("МасТиповОпераций",МасТиповОпераций);                   
	ТЗТО = Запрос.Выполнить().Выгрузить(); 
	
	МасКодПрич=новый Массив;
	Для каждого стр Из ТЗРезультатЗапроса Цикл
		Поз1=Найти(стр.Текст,"Код причины списания:");
		Поз2=Найти(стр.Текст,"Комментарий");
		Если Поз1>0 и Поз2>0 Тогда
			Длина=Поз2-Поз1;
			Причина=СтрЗаменить(Сред(стр.Текст,Поз1-1,длина),"Код причины списания: ","");
			КодПричины=Число(Причина);
			Если КодПричины>0 Тогда
				МасКодПрич.Добавить(КодПричины);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыОпераций.Ссылка,
	|	ТипыОпераций.code_operation КАК КодОперации
	|ИЗ
	|	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	|ГДЕ
	|	ТипыОпераций.table_operation = ""td_move""
	|	И ТипыОпераций.field_operation = ""id_reason""
	|	И ТипыОпераций.code_operation В(&МасТиповОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыОпераций.code_operation";
	Запрос.УстановитьПараметр("МасТиповОпераций",МасКодПрич);
	ТЗПрич = Запрос.Выполнить().Выгрузить(); 
	
	ТЗРезультатЗапроса.Колонки.Добавить("ТипОперации",Новый ОписаниеТипов("СправочникСсылка.ТипыОперацийМагазина"));
	ТЗРезультатЗапроса.Колонки.Добавить("ПричинаСписания",Новый ОписаниеТипов("СправочникСсылка.ТипыОперацийМагазина"));
	Для каждого стр Из ТЗРезультатЗапроса Цикл
		ТО=ТЗТО.Найти(Стр.ТипОперацииМагазина);
		Если ТО<>Неопределено Тогда
			стр.ТипОперации=ТО.Ссылка;
		КонецЕсли;
		Поз1=Найти(стр.Текст,"Код причины списания:");
		Поз2=Найти(стр.Текст,"Комментарий");
		Если Поз1>0 и Поз2>0 Тогда
			Длина=Поз2-Поз1;
			Причина=СтрЗаменить(Сред(стр.Текст,Поз1-1,длина),"Код причины списания: ","");
			КодПричины=Число(Причина);
			Если КодПричины>0 Тогда
				ТО=ТЗПрич.Найти(КодПричины);
				Если ТО<>Неопределено Тогда
					стр.ПричинаСписания=ТО.Ссылка;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	
	Струк=Новый Структура("ТЗ",ТЗРезультатЗапроса);
	КМ=Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки=Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	КолСтр=Настройки.Отбор.Элементы.Количество();
	Для Сч=0 По КолСтр-1 Цикл
		Настройки.Отбор.Элементы.Удалить(КолСтр-1-Сч);
	КонецЦикла;
	
	//Для каждого отб Из  Табл Цикл
	//	отб1=Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ЗаполнитьЗначенияСвойств(отб1,отб);
	//КонецЦикла;
	
	ГруппаОтборИ=Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтборИ.Представление = "ГруппаОтборИ";
	ГруппаОтборИ.Использование = Истина;
	Для каждого отб Из  Табл Цикл
		ЗаполнитьЭлементыВОтборе(ГруппаОтборИ,отб);	
	КонецЦикла;
	
	Если Отчет.Роли.Количество()>0 Тогда
		
		НастройкиХран=ХранилищеОбщихНастроек.Загрузить("АКНастройкиЛентыКартинок");
		ГруппаИли = ГруппаОтборИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИли.Представление = "ГруппаИли2Уровень";
		ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаИли.Использование = Истина;
		
		
		Для каждого СтрРоль Из Отчет.Роли Цикл
			Если ЗначениеЗаполнено(Роль) Тогда
				Если Роль<>СтрРоль.Роль Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			НастройкиРоли=СтрРоль.Роль.НастройкаЛентыКартинок.Получить();
			ГруппаИ = ГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИ.Представление = "ГруппаИ";
			ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ГруппаИ.Использование = Истина;
			
			
			Если НЕ ЗначениеЗаполнено(Роль) Тогда
				СпОб=СоотСписков.Получить(СтрРоль.Роль);
				Если СпОб=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ГруппаИЛИ1ур = ГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИЛИ1ур.Представление = "ГруппаИЛИ1ур";
				ГруппаИЛИ1ур.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаИЛИ1ур.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
				НоваяСтрОтбора.ПравоеЗначение = СпОб;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
		
				НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
				НоваяСтрОтбора.ПравоеЗначение = СпОб;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = СпОб;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
			КонецЕсли; 
			
			Если НастройкиРоли<>Неопределено Тогда
				
				Для каждого отб Из  НастройкиРоли.Отбор.Элементы Цикл
					//отб1=ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//ЗаполнитьЗначенияСвойств(отб1,отб);
					ЗаполнитьЭлементыВОтборе(ГруппаИ,отб);	
				КонецЦикла;
			КонецЕсли; 
			
			
			Если Не ЗначениеЗаполнено(Роль) Тогда
				Если НастройкиХран<>Неопределено Тогда
					Настройки3=НастройкиХран.Получить();

					Если ТипЗнч(Настройки3)=Тип("Соответствие") Тогда
						
						//
						
						Для каждого Эл  Из Настройки3 Цикл
							Если Эл.Ключ<>СтрРоль.Роль Тогда
								Продолжить;
							КонецЕсли; 
							НастройкиРоли1=Эл.Значение.КомпоновщикНастроек;
							Если НастройкиРоли1<>Неопределено Тогда
								ГруппаИ1 = ГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
								ГруппаИ1.Представление = "ГруппаИ13Уровень";
								ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
								ГруппаИ1.Использование = Истина;
								
								Для каждого отб Из  НастройкиРоли1.Отбор.Элементы Цикл
									//отб1=ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
									//ЗаполнитьЗначенияСвойств(отб1,отб);
									ЗаполнитьЭлементыВОтборе(ГруппаИ1,отб);	
								КонецЦикла;
							КонецЕсли; 
							
							
							
						КонецЦикла; 	                				
						
					КонецЕсли; 
				КонецЕсли; 	
			КонецЕсли; 
		КонецЦикла; 	                        
	КонецЕсли; 
	
	
	
	
	МакетКомп=КМ.Выполнить(Отчеты.ОтчетПоЛентеКартинок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"),Настройки, , ,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцКД=Новый ПроцессорКомпоновкиДанных;
	ПроцКД.Инициализировать(МакетКомп,Струк);
	ПроцВыв=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗРезультат=Новый ТаблицаЗначений;
	ПроцВыв.УстановитьОбъект(ТЗРезультат);
	
	ПроцВыв.НачатьВывод();
	Ит=0;
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = 
		ПроцКД.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ПроцВыв.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
		Ит=Ит+1;
		Если Ит=201 Тогда
			//Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	ПроцВыв.ЗакончитьВывод();	 
	
	//Кол=ТЗРезультат.Количество();
	//СоотФильтров=Новый Соответствие;
	//НастройкиХран=ХранилищеОбщихНастроек.Загрузить("АКНастройкиЛентыКартинок");
	//Если НастройкиХран<>Неопределено Тогда
	//	Настройки=НастройкиХран.Получить();
	//	Если ТипЗнч(Настройки)=Тип("Соответствие") Тогда
	//		Для каждого Эл Из Настройки Цикл
	//			Если ТипЗнч(Эл.Значение)=Тип("ТаблицаЗначений")
	//				И ?(ЗначениеЗаполнено(Роль),Роль=Эл.Ключ,Отчет.Роли.НайтиСтроки(Новый Структура("Роль",Эл.Ключ)).Количество()) Тогда
	//				СоотФильтров.Вставить(Эл.Ключ,Эл.Значение);
	//			КонецЕсли; 
	//		КонецЦикла; 
	//	Иначе
	//	КонецЕсли; 
	//КонецЕсли; 
	//Для Сч=0 По Кол-1 Цикл
	//	Если НеобходимоУдалениеПоФильтру(СоотФильтров,ТЗРезультат[Кол-1-Сч]) Тогда
	//		ТЗРезультат.Удалить(Кол-1-Сч);
	//	КонецЕсли; 
	//КонецЦикла; 
	
	Элементы.ДобавитьЕще.Видимость=Ложь;//ТЗРезультат.Количество()>0 или ТаблицаСтруктурыФайлов.Количество()>0;
	ФлНачало=Истина;
	ПервыйПроход = Истина;
	БылоДобавлениеПустого = Ложь;
	
	//Для каждого СтрТзКарт Из ТаблицаСтруктурыФайлов Цикл
	//	СписокКартинок.Добавить(СтрТзКарт.УинКартинки);
	//КонецЦикла; 
	ФлКонец=Истина;
	
	К1=Константы.КаталогХраненияФайловКартинок.Получить();
	К2=Константы.МП_КаталогХраненияФайловЗадачМП.Получить();
	К3=Константы.КаталогХраненияФайлов.Получить();
	К4="\\10.0.0.51\1c$\Сертификаты";
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗРезультат Цикл
		ИдентификаторЭлементаФормы=ИдентификаторЭлементаФормы+1;
		ИмяВремФайла="";
		УинКартинки = Строка(ВыборкаДетальныеЗаписи.УИНЗаписи);
		
		
		ПолноеИмяФайла = "";
		ПолноеИмяФайла1 = "";
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла) Тогда
			Если Лев(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла,2)="\\" Тогда
				КаталогКЗаписи="";
				КаталогФотографий="";
				КаталогХраненияФайлов="";
				КаталогСертификатов="";
				//Если Найти(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла,"YandexDisk")>0 Тогда
				//	ФайлВрем=Новый Файл(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла);
				//	Попытка
				//		РасширениеФайла = Сред(ФайлВрем.Расширение, 2);
				//		ВремФайл = ПолучитьИмяВременногоФайла(РасширениеФайла);
				//		КопироватьФайл(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла,ВремФайл);
				//		ИмяВремФайла=ВремФайл;
				//	Исключение
				//	КонецПопытки; 
				//КонецЕсли; 
			Иначе
				КаталогКЗаписи = К1;
				Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
					КаталогКЗаписи = КаталогКЗаписи + "\";
				КонецЕсли;
				КаталогФотографий = СокрЛП(К2);
				Если Прав(КаталогФотографий, 1) <> "\" Тогда
					КаталогФотографий = КаталогФотографий + "\";
				КонецЕсли;
				КаталогХраненияФайлов = К3;
				
				Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
					КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
				КонецЕсли;
				
				
				КаталогСертификатов = К4;
				
				Если Прав(КаталогСертификатов, 1) <> "\" Тогда
					КаталогСертификатов = КаталогСертификатов + "\";
				КонецЕсли;
			КонецЕсли; 	
			//Если ЗначениеЗаполнено(ИмяВремФайла) Тогда
			//	ПолноеИмяФайла = ИмяВремФайла;
			//	ПолноеИмяФайла1 = ИмяВремФайла;
			//	ПолноеИмяФайла2 = ИмяВремФайла;
			//	ПолноеИмяФайла3 = ИмяВремФайла;
			//Иначе	
			ПолноеИмяФайла = КаталогКЗаписи + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			ПолноеИмяФайла1 = КаталогФотографий + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			ПолноеИмяФайла2 = КаталогХраненияФайлов + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			ПолноеИмяФайла3 = КаталогСертификатов + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			//КонецЕсли; 
			//ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Не Файл.Существует() Тогда
				Файл = Новый Файл(ПолноеИмяФайла1);
				ПолноеИмяФайла=ПолноеИмяФайла1;
			КонецЕсли; 
			Если Не Файл.Существует() Тогда
				Файл = Новый Файл(ПолноеИмяФайла2);
				ПолноеИмяФайла=ПолноеИмяФайла2;
			КонецЕсли; 
			Если Не Файл.Существует() Тогда
				Файл = Новый Файл(ПолноеИмяФайла3);
				ПолноеИмяФайла=ПолноеИмяФайла3;
			КонецЕсли; 
			
			
			РасширениеФайла = Сред(Файл.Расширение, 2);
			Если НЕ ПервыйПроход Тогда
				//ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "thumb." + РасширениеФайла;
				//ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
				//Если НЕ ФайлМиниатюра.Существует() Тогда
				ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "." + РасширениеФайла;
				//КонецЕсли;	
			КонецЕсли;	
			
			Файл = Новый Файл(ПолноеИмяФайла);            
			
			Если (Файл.Существует()
				И Файл.Размер() > 0) Тогда // ИЛИ Найти(ПолноеИмяФайла,"YandexDisk")>0 Тогда
				СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
				СтруктураЗаписи.УинКартинки = УинКартинки;
				СписокКартинок.Добавить(УинКартинки);
				ФлКонец=Ложь;
				Если ЗначениеЗаполнено(РасширениеФайла) Тогда
					//Если ПервыйПроход Тогда
					СтруктураЗаписи.ТолькоМиниатюра = Ложь;
					//Иначе
					//	СтруктураЗаписи.ТолькоМиниатюра = Истина;
					//КонецЕсли;	
					
					//Попытка
					//Картинка = Новый Картинка(ПолноеИмяФайла);
					//СтруктураЗаписи.АдресВХранилище = ПоместитьВоВременноеХранилище(Картинка,ЭтаФорма.УникальныйИдентификатор);
					СтруктураЗаписи.АдресВХранилище = ПолноеИмяФайла;
					СтруктураЗаписи.Расширение = РасширениеФайла;
					ПервыйПроход = Ложь;
					//Исключение
					//КонецПопытки;
					СтруктураЗаписи.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
					СтруктураЗаписи.Характеристика=ВыборкаДетальныеЗаписи.Характеристика;
					СтруктураЗаписи.НоменклатураНаименование=Строка(ВыборкаДетальныеЗаписи.Номенклатура);
					СтруктураЗаписи.ХарактеристикаНаименование=Строка(ВыборкаДетальныеЗаписи.Характеристика);
					
					МассивТэгов=РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.Текст);
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.Объект))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.Объект)) И НЕ ТипЗнч(ВыборкаДетальныеЗаписи.Объект)=Тип("Строка") Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.Объект));
					КонецЕсли;
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.Характеристика))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.Характеристика)) Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.Характеристика));
					КонецЕсли;
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.Номенклатура))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.Номенклатура)) Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.Номенклатура));
					КонецЕсли;
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница)) Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница));
					КонецЕсли;
					Для каждого Эл Из МассивТэгов Цикл
						СтрНов=Тэги.Добавить();
						СтрНов.УинКартинки=УинКартинки;
						СтрНов.Тэг=Эл;
					КонецЦикла;
					
					СтрНов=ПрочиеТэги.Добавить();
					СтрНов.УинКартинки=УинКартинки;
					СтрНов.Тэг="Дата добавления "+Строка(ВыборкаДетальныеЗаписи.ДатаДобавления);
					
					СтрНов=ПрочиеТэги.Добавить();
					СтрНов.УинКартинки=УинКартинки;
					СтрНов.Тэг=Строка(ВыборкаДетальныеЗаписи.ТипЗаписи);
					
					
					Поз=Найти(ВыборкаДетальныеЗаписи.Текст,"Комментарий");
					СтрТэг="";
					Если Поз>0 Тогда
						СтрТэг=Сред(ВыборкаДетальныеЗаписи.Текст,Поз)		
					КонецЕсли;
					СтрНов=ПрочиеТэги.Добавить();
					СтрНов.УинКартинки=УинКартинки;
					СтрНов.Тэг=СтрТэг;
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПричинаСписания) Тогда
						СтрТэг="Причина списания "+Строка(ВыборкаДетальныеЗаписи.ПричинаСписания);
						СтрНов=ПрочиеТэги.Добавить();
						СтрНов.УинКартинки=УинКартинки;
						СтрНов.Тэг=СтрТэг;
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПричинаСписания) Тогда
						СтрТэг="Тип операции "+Строка(ВыборкаДетальныеЗаписи.ТипОперации);
						СтрНов=ПрочиеТэги.Добавить();
						СтрНов.УинКартинки=УинКартинки;
						СтрНов.Тэг=СтрТэг;
					КонецЕсли; 
				КонецЕсли;
			Иначе
				Если Найти(ПолноеИмяФайла,"YandexDisk")=0 Тогда
					
					Сообщить("Отсутствует файл "+ПолноеИмяФайла+" для "+ВыборкаДетальныеЗаписи.Номенклатура+" "+ВыборкаДетальныеЗаписи.Характеристика+" "+ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
					
					//Если НЕ БылоДобавлениеПустого Тогда
					//	СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
					//	БылоДобавлениеПустого = Истина;
					//Иначе
					//	Продолжить;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Функция НеобходимоУдалениеПоФильтру(СоотФильтров,СтрокаТЧ)
	Для каждого Эл Из СоотФильтров Цикл
		ТЗФильтр=Эл.Значение;	
		
	
	КонецЦикла; 
	

КонецФункции // ()

Функция ПолучитьМассивПолейПоиска()
 	Мас=Новый СписокЗначений;
	МасКонтроль=Новый СписокЗначений;
	ТЗКол=Фильтры.Выгрузить();
	Для каждого Колонка Из ТЗКол.Колонки Цикл
		Мас.Добавить(Колонка.Имя);
		МасКонтроль.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Сч=1 По 4 Цикл
		Для каждого Эл Из Мас Цикл
			Для каждого Эл1 Из МасКонтроль Цикл
				Если Найти(Эл.Значение,Эл1.Значение)=0 Тогда
					НовЭл=Мас.Добавить();
					НовЭл.Значение=Эл.Значение+", "+Эл1.Значение;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
    Возврат Мас
КонецФункции // ()
 
 

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр) Экспорт 
	
	МассивСтрок = Новый Массив(); 
	Пока Истина Цикл 
		Поз = Найти(Стр,"#"); 
		Если Поз=0 Тогда 
			//МассивСтрок.Добавить(Стр); 
			Возврат МассивСтрок; 
		КонецЕсли;
		Стр=Сред(Стр,Поз+1);
		Поз1 = Найти(Стр,"#");
		Поз2 = Найти(Стр," ");
		Если Поз1=0 Тогда
			Поз=Поз2;
		ИначеЕсли Поз2=0 Тогда
			Поз=Поз1;
		Иначе
			Поз=Мин(Поз1,Поз2);
		КонецЕсли;
		Если Поз<>0 Тогда
			Стр1=Лев(Стр,Поз-1);
		КонецЕсли;
		Если МассивСтрок.Найти(Стр1)=Неопределено И ЗначениеЗаполнено(Стр1) Тогда
			МассивСтрок.Добавить(Стр1); 
		КонецЕсли; 
		Стр = Сред(Стр,Поз); 
	КонецЦикла; 
КонецФункции // глРазложить

&НаКлиенте
Процедура ДобавитьЕще(Команда)
	//Тэги.Очистить();
	СписокКартинок.Очистить();
	ОбновитьЛентуСервер();
	//ПолныйТекстHTML = "<html xmlns=""http://www.w3.org/1999/xhtml""; > 
	//|<head>
	//|<title>Тест</title>
	//|<script>
	//|var xForm1C;
	//|
	//|function SetForm1c(Form1c)
	//|{
	//|xForm1C = Form1c;
	//|}
	//|
	//|function Call1C()
	//|{
	//| ADR = xForm1C.СобытиеHTML();
	//| if (ADR != '')
	//| {
	//| DIV=document.createElement('td');
	//| var adres=ADR.adr;
	//| var Podskaz=ADR.Podskaz;        
	//| var UinPic=ADR.UinPic;
	//| var ColorB=ADR.ColorB;
	//| var list = document.getElementById(""PictureView"");
	//| DIV.id=UinPic+ ""_q"";
	//| DIV.innerHTML = ""<table  title='""+Podskaz+""' id='""+UinPic + ""_T"" +  ""' border='2' cellpadding='0' bordercolor="" +ColorB + "" cellspacing='0'><tr><td><img name='smallpicture' width = 40 height=40 style = 'cursor: pointer' id = '"" + UinPic + ""_""+  ""' src = 'file:///"" + adres+""'></td></tr></table>"";
	//| list.appendChild(DIV);
	//| }
	//|}
	//|</script>
	//|
	//|</head>
	//|<body >";
	
	
	//	Для Каждого ЭлементСтруктуры Из ТаблицаСтруктурыФайлов Цикл
	//		Если ЗначениеЗаполнено(ЭлементСтруктуры.АдресВХранилище) Тогда
	//			Картинка = ПолучитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
	//			Если Не Картинка=Неопределено Тогда
	//				УдалитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
	//				Картинка.Записать(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение);
	//			КонецЕсли; 
	//		КонецЕсли;
	//	КонецЦикла;	
	
	Для Каждого ЭлементСтруктуры Из ТаблицаСтруктурыФайлов Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.АдресВХранилище) Тогда
			Картинка =  Новый Картинка(ЭлементСтруктуры.АдресВХранилище);
			Попытка
				Картинка.Записать(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
	
	
	//ПолныйТекстHTML = ПолныйТекстHTML + "
	//		|<span><table id = ""Rakurs" + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
	//			+ СформироватьТэгиПоРакурсу(ТекКартинка,Истина)
	//			+ "</table></span><p></p>";
	//
	//ПолныйТекстHTML = ПолныйТекстHTML + "</body>
	//|</html>";
	
	//ДокументHTML = ПолныйТекстHTML;
	//HTML=ДокументHTML;
	//ВыводКартинокДоб();
КонецПроцедуры

&НаКлиенте
Процедура НажатиеКартинки(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка=Ложь;
	//Номер=Число(СтрЗаменить(Элемент.Имя,"Картинка__",""));
	//Для каждого Стр Из ТЗСоответствия Цикл
	//	Если Стр.Номер=Номер Тогда
	//		 Прервать;
	//	КонецЕсли; 
	//КонецЦикла; 
	//Парам=Новый Структура("УинЗаписи",Стр.УИН);
	//ОткрытьФорму("Обработка.ЛентаКартинок.Форма.ФормаВыбора",Парам);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	МожетРедактировать=Истина;	
	Элементы.ДобавитьЕще.Видимость=Ложь;
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МасштабФотоРакурсов) Тогда
		МасштабФотоРакурсов = 100;
	КонецЕсли;	
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ВременныйКаталог);
	
	БиблиотекаКартинок.ПоказатьДанные.Записать(ВременныйКаталог + "\Show.png");
	БиблиотекаКартинок.ЗаписатьИЗакрыть.Записать(ВременныйКаталог + "\Accepted.png");
	БиблиотекаКартинок.Удалить.Записать(ВременныйКаталог + "\Canceled.png");
	БиблиотекаКартинок.Выбрать.Записать(ВременныйКаталог + "\Unknown.png");
	БиблиотекаКартинок.Записать.Записать(ВременныйКаталог + "\SaveAs.png");
	БиблиотекаКартинок.Сортировка.Записать(ВременныйКаталог + "\Rotate.png");
	БиблиотекаКартинок.ПрочитатьИзменения.Записать(ВременныйКаталог + "\Trim.png");
	БиблиотекаКартинок.ПиктограммаФайла_PDF.Записать(ВременныйКаталог + "\pdf.jpg");
	Элементы.ВидимостьНастроек.Пометка=Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость;
	ДатаДобавления.Вариант=ВариантСтандартногоПериода.Сегодня;
	
	
	ПолныйТекстHTML = "<html xmlns=""http://www.w3.org/1999/xhtml""; > 
	|<head>
	|<title>Тест</title>
	|<script>
	|var xForm1C;
	|
	|function SetForm1c(Form1c)
	|{
	|xForm1C = Form1c;
	|}
	|
	|function Call1C()
	|{
	| ADR = xForm1C.СобытиеHTML();
	| if (ADR != '')
	| {
	| DIV=document.createElement('td');
	| var adres=ADR.adr;
	| var Podskaz=ADR.Podskaz;        
	| var UinPic=ADR.UinPic;
	| var ColorB=ADR.ColorB;
	| var list = document.getElementById(""PictureView"");
	| DIV.id=UinPic+ ""_q"";
	| DIV.innerHTML = ""<table  title='""+Podskaz+""' id='""+UinPic + ""_T"" +  ""' border='2' cellpadding='0' bordercolor="" +ColorB + "" cellspacing='0'><tr><td><img name='smallpicture' width = 40 height=40 style = 'cursor: pointer' id = '"" + UinPic + ""_""+  ""' src = 'file:///"" + adres+""'></td></tr></table>"";
	| list.appendChild(DIV);
	| }
	|}
	|</script>
	|
	|</head>
	|<body >";
	
	ПолныйТекстHTML = ПолныйТекстHTML + "</body>
	|</html>";
	
	ДокументHTML = ПолныйТекстHTML;
	HTML=ДокументHTML;
	//ПриОткрытииСервер();
	ЗагрузитьНастройки();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииСервер()
	//Если Отчет.Роли.Количество()=1 Тогда
	//	Настройки=Отчет.Роли[0].Роль.НастройкаЛентыКартинок.Получить();
	//	Если Настройки<>Неопределено Тогда
	//		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	//	КонецЕсли; 
	//ИначеЕсли Отчет.Роли.Количество()>1 Тогда
	//	Настройки=Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	//	КолСтр=Настройки.Отбор.Элементы.Количество();
	//	Для Сч=0 По КолСтр-1 Цикл
	//		Настройки.Отбор.Элементы.Удалить(КолСтр-1-Сч);
	//	КонецЦикла;
	//	
	//	Мас=Новый Массив;
	//	Для каждого СтрРоль Из Отчет.Роли Цикл
	//		НастройкиРоли=СтрРоль.Роль.НастройкаЛентыКартинок.Получить();
	//		Если НастройкиРоли<>Неопределено Тогда
	//			Мас.Добавить(НастройкиРоли);	
	//		КонецЕсли; 
	//	КонецЦикла; 	
	//	
	//	Если Мас.Количество()>=1 Тогда
	//		Для каждого отб Из  Мас[0].Отбор.Элементы Цикл
	//			отб1=Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//			ЗаполнитьЗначенияСвойств(отб1,отб);
	//		КонецЦикла;
	//		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);	
	//	КонецЕсли; 
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИскатьПриИзменении(Элемент)
	Элементы.ДобавитьЕще.Видимость=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ОбновитьТэгиВЛентеКартинок" Тогда
		
		ФайлыКартинки = НайтиФайлы(ВременныйКаталог, Параметр + ".*");
		//Если ФайлыКартинки.Количество() = 0 Тогда
		//	СтрФайл = СкачатьПолнуюКартинкуССервера(СтруктураСобытия.УинКартинка);
		//	СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтруктураСобытия.УинКартинка + "." + СтрФайл.Расширение);
		//КонецЕсли;	
		Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
			Если Найти(Тэг.id, "Rakurs")  > 0 Тогда
				Тэг.parentElement.innerHTML = "<table id = ""Rakurs"+""" border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
				+ СформироватьТэгиПоРакурсу( Параметр)
				+ "</table>";
				
				СтрокиТекКартинки = ТекКартинкиРакурсов;
				Если СтрокиТекКартинки.Количество() = 0 Тогда
					СтрокаТекКартинки = ТекКартинкиРакурсов.Добавить();
					//СтрокаТекКартинки.УинРакурса = СтруктураСобытия.УинРакурса;
				Иначе
					СтрокаТекКартинки = СтрокиТекКартинки[0];
				КонецЕсли;	 
				СтрокаТекКартинки.УинКартинки = Параметр;
			КонецЕсли;	
		КонецЦикла;
		
		
	КонецЕсли; КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);
	//Запрос = Новый Запрос;
	//Запрос.Текст =     
	//	"ВЫБРАТЬ
	//	|	НастройкиПользователей.Пользователь
	//	|ИЗ
	//	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
	//	|ГДЕ
	//	|	НастройкиПользователей.Право = &Настройка
	//	|	И НастройкиПользователей.Значение = ИСТИНА
	//	|	И НастройкиПользователей.Пользователь.ФизЛицо = &ФизЛицо";
	
	//Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Отборы ленты картинок"));
	//Запрос.УстановитьПараметр("ФизЛицо", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	//Результат1 = Запрос.Выполнить();
	
	//ВыборкаПользователей = Результат1.Выбрать();
	//ФлПолныеПрава=Ложь;
	//Если ВыборкаПользователей.Следующий() Тогда
	//	ФлПолныеПрава=Истина;
	//КонецЕсли; 
	//ФлПолныеПрава=ФлПолныеПрава или РольДоступна("ПолныеПрава");
	
	ПолучитьОбъектыРолиФизЛица(ТекущаяДата());
	Если Отчет.Роли.Количество()=1 Тогда
		Роль=Отчет.Роли[0].Роль;
	КонецЕсли;           
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбъектыРолиФизЛица(Дата)
	Отчет.Объекты.Очистить();
	Отчет.Роли.Очистить();
	Элементы.Роль.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних1.Объект,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	|ПОМЕСТИТЬ втБрендМенеджеры
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних1
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя)
	|			И (ВЫБОР
	|				КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|	И НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|	И РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	1 КАК Приоритет,
	|	&ТипРоли КАК ТипРоли
	|ПОМЕСТИТЬ втБезХар
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБрендМенеджеры КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|	И РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	2,
	|	РолиПользователейТипыРолей.ТипРоли
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли <> &ТипРоли) КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|	И РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	РолиПользователейТипыРолей.ТипРоли
	|ПОМЕСТИТЬ втЧужиеХар
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли <> &ТипРоли) КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|	И РолиПользователейСоставРоли.Сотрудник <> &ТекФизЛицо
	|	И РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	РолиПользователейТипыРолей.ТипРоли
	|;
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	&ТипРоли КАК ТипРоли
	|ПОМЕСТИТЬ втЧужиеХарБМ
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБрендМенеджеры КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|	И РолиПользователейСоставРоли.Сотрудник <> &ТекФизЛицо
	|	И РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБезХар.РольПользователя,
	|	ЗначенияСвойствОбъектов.Объект,
	|	втБезХар.ТипРоли
	|ПОМЕСТИТЬ втХар
	|ИЗ
	|	втБезХар КАК втБезХар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО втБезХар.Объект = ЗначенияСвойствОбъектов.Значение
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.Производитель))
	|			И (втБезХар.Объект ССЫЛКА Справочник.Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБезХар.РольПользователя КАК РольПользователя,
	|	втБезХар.Объект КАК Объект,
	|	втБезХар.Объект.Владелец КАК Номенклатура
	|ИЗ
	|	втБезХар КАК втБезХар
	|ГДЕ
	|	НЕ втБезХар.Объект ССЫЛКА Справочник.Контрагенты
	|
	|СГРУППИРОВАТЬ ПО
	|	втБезХар.РольПользователя,
	|	втБезХар.Объект,
	|	втБезХар.Объект.Владелец
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втХар.РольПользователя,
	|	втХар.Объект,
	|	втХар.Объект.Владелец
	|ИЗ
	|	втХар КАК втХар
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЧужиеХар КАК втЧужиеХар
	|		ПО втХар.ТипРоли = втЧужиеХар.ТипРоли
	|			И втХар.Объект = втЧужиеХар.Объект И Не втХар.РольПользователя = втЧужиеХар.РольПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЧужиеХарБМ КАК втЧужиеХарБМ
	|		ПО втХар.ТипРоли = втЧужиеХарБМ.ТипРоли
	|			И втХар.Объект = втЧужиеХарБМ.Объект И Не втХар.РольПользователя = втЧужиеХарБМ.РольПользователя
	|ГДЕ
	|	втЧужиеХар.РольПользователя ЕСТЬ NULL И втЧужиеХарБМ.РольПользователя ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втХар.РольПользователя,
	|	втХар.Объект,
	|	втХар.Объект.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	РольПользователя,
	|	Объект";
	
	
	
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
	Запрос.УстановитьПараметр("ТекФизЛицо", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	Запрос.УстановитьПараметр("Дата",КонецДня(Дата));
	
	Результат1 = Запрос.Выполнить();
	
	Отчет.Объекты.Очистить();
	Отчет.Роли.Очистить();
	
	ВыборкаДетальныеЗаписи = Результат1.Выбрать();
	
	//Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СоответствиеОбъектРольСрезПоследних1.Объект,СоответствиеОбъектРольСрезПоследних1.РольПользователя как технолог,
	//|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	//|ИЗ
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних1
	//|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	//|		ПО (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя)
	//|			И (ВЫБОР
	//|				КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	//|					ТОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект.Неактивная
	//|				ИНАЧЕ ИСТИНА
	//|			КОНЕЦ)
	//|ГДЕ
	//|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	//|	И НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	//|	И РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо";
	//ТЗ=Запрос.Выполнить().Выгрузить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Отчет.Роли.НайтиСтроки(Новый Структура("Роль",ВыборкаДетальныеЗаписи.РольПользователя)).Количество()=0 Тогда
			Стр=Отчет.Роли.Добавить();
			Стр.Роль=ВыборкаДетальныеЗаписи.РольПользователя;
			Элементы.Роль.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.РольПользователя);
		КонецЕсли; 	
		Стр=Отчет.Объекты.Добавить();
		Стр.Объект=ВыборкаДетальныеЗаписи.Объект;
		Стр.Роль=ВыборкаДетальныеЗаписи.РольПользователя;
		Стр.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыВОтборе(Элемент,ЭлементКопирования)
	Если ТипЗнч(ЭлементКопирования)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		отб1=Элемент.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(отб1,ЭлементКопирования);
	ИначеЕсли ТипЗнч(ЭлементКопирования)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда	
		отб1=Элемент.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(отб1,ЭлементКопирования);
		Для каждого Эл Из ЭлементКопирования.Элементы Цикл
			ЗаполнитьЭлементыВОтборе(отб1,Эл);
		КонецЦикла; 
	КонецЕсли; 
	
	
КонецПроцедуры



&НаКлиенте
Процедура ОткрытьОтбор(Команда)
	Парам=Новый Структура("Адрес",Адрес);
	ОткрытьФорму("Отчет.ОтчетПоЛентеКартинок.Форма",Парам,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьНастроек(Команда)
	Элементы.ФильтрыСтраницы.Видимость=Не Элементы.ФильтрыСтраницы.Видимость;
	Элементы.ВидимостьНастроек.Пометка=Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость;
КонецПроцедуры

&НаСервере
Процедура КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияСервер(Поле)
	Если Поле="ТипОперации" Тогда
		ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,"operation_type_orig");
	ИначеЕсли Поле="ПричинаСписания" Тогда
		ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,"id_reason");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриАктивизацииСтроки(Элемент)
	Если Элементы.КомпоновщикНастроекНастройкиОтбор.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияСервер(Строка(Элементы.КомпоновщикНастроекНастройкиОтбор.ТекущиеДанные.ЛевоеЗначение));	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	УдалитьФайлы(ВременныйКаталог);
	ЭтаФорма.ВариантМодифицирован=Ложь;
	ПередЗакрытиемСервер();
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемСервер()
	СохранитьНастройки();
	ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLДокументСформирован(Элемент)
	//Попытка
	Элементы.ДокументHTML.Документ.parentWindow.SetForm1c(ЭтаФорма);
	//Исключение
	//КонецПопытки; 
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СохранитьНастройки();
КонецПроцедуры

Процедура СохранитьНастройки()
	НастройкиХран=ХранилищеОбщихНастроек.Загрузить("АКНастройкиЛентыКартинок");
	Если НастройкиХран<>Неопределено Тогда
		Настройки=НастройкиХран.Получить();
		Если ТипЗнч(Настройки)=Тип("Соответствие") Тогда
		Иначе
			Настройки=Новый Соответствие;
		КонецЕсли;
	Иначе
		Настройки=Новый Соответствие;
	КонецЕсли; 
	Струк=Новый Структура("ФильтрПоТаблице,КомпоновщикНастроек",Фильтры.Выгрузить(),Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	Настройки.Вставить(Роль,Струк);	
	
	ХранилищеОбщихНастроек.Сохранить("АКНастройкиЛентыКартинок",,Новый ХранилищеЗначения(Настройки));
	
КонецПроцедуры

Процедура ЗагрузитьНастройки()
	//ХранилищеОбщихНастроек.Сохранить("АКНастройкиЛентыКартинок",,Неопределено);

	НастройкиХран=ХранилищеОбщихНастроек.Загрузить("АКНастройкиЛентыКартинок");
	Если НастройкиХран<>Неопределено Тогда
		Настройки=НастройкиХран.Получить();
		Если ТипЗнч(Настройки)=Тип("Соответствие") Тогда
			Настр=Настройки.Получить(Роль);
			Если Настр<>Неопределено Тогда
				Если ТипЗнч(Настр)=Тип("Структура") Тогда
					Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настр.КомпоновщикНастроек);
				    Фильтры.Загрузить(Настр.ФильтрПоТаблице);
				Иначе	
					СКД=Отчеты.ОтчетПоЛентеКартинок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
					Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
					Фильтры.Очистить();
				КонецЕсли; 
			Иначе
				СКД=Отчеты.ОтчетПоЛентеКартинок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
				Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
				Фильтры.Очистить();
			КонецЕсли;
		Иначе
			СКД=Отчеты.ОтчетПоЛентеКартинок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
			Фильтры.Очистить();
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РольПриИзменении(Элемент)
	ЗагрузитьНастройки();
КонецПроцедуры


&НаКлиенте
Процедура РольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СохранитьНастройки();
КонецПроцедуры


&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПослеУдаления(Элемент)
	СохранитьНастройки();
КонецПроцедуры


&НаКлиенте
Процедура ДатаДобавленияПриИзменении(Элемент)
	ДатаДобавленияПриИзмененииСервер();
КонецПроцедуры

Процедура ДатаДобавленияПриИзмененииСервер()
	СохранитьНастройки();
	ПолучитьОбъектыРолиФизЛица(ДатаДобавления.ДатаОкончания);
	Если Отчет.Роли.НайтиСтроки(Новый Структура("Роль",Роль)).Количество()=0 Тогда
		Роль=Неопределено;
	КонецЕсли; 
	Если Отчет.Роли.Количество()=1 Тогда
		Роль=Отчет.Роли[0].Роль;
	КонецЕсли;
	
	ЗагрузитьНастройки();
	
КонецПроцедуры


&НаКлиенте
Процедура ФильтрыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Идентификатор=Строка(Элементы.Фильтры.ТекущиеДанные.УИН);
	Настройки=Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ТекущиеДанные=Элементы.Фильтры.ТекущиеДанные;	
	Фл=Ложь;
	Для каждого Эл Из Настройки Цикл
		Если Эл.Представление="ИЛИКорневой" Тогда
			Фл=Истина;
			ГруппаИЛИКорневой=Эл;
			Прервать;
		КонецЕсли; 	
	КонецЦикла; 
	Если Не Фл Тогда
		ГруппаИЛИКорневой = Настройки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИКорневой.Представление = "ИЛИКорневой";
		ГруппаИЛИКорневой.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаИЛИКорневой.Использование = Истина;
	КонецЕсли; 
	Кол=ГруппаИЛИКорневой.Элементы.Количество();
	Для Сч=0 По Кол-1 Цикл
		Если Идентификатор=ГруппаИЛИКорневой.Элементы[Кол-1-Сч].Представление Тогда
			ГруппаИЛИКорневой.Элементы.Удалить(Кол-1-Сч);	
		КонецЕсли; 
	КонецЦикла; 
	Если ЗначениеЗаполнено(ТекущиеДанные.ГруппаТоваров) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) ИЛИ
		ЗначениеЗаполнено(ТекущиеДанные.ТипЗаписи) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТипОперации) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ПричинаСписания)	Тогда
		
		ГруппаИПоСтроке = ГруппаИЛИКорневой.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИПоСтроке.Представление = Идентификатор;
		ГруппаИПоСтроке.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаИПоСтроке.Использование = Истина;
		
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ГруппаТоваров) ИЛИ
				ЗначениеЗаполнено(ТекущиеДанные.ТипЗаписи) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТипОперации) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ПричинаСписания) Тогда
				ГруппаИЛИТТ = ГруппаИПоСтроке.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИЛИТТ.Представление = "ГруппаИЛИТТ";
				ГруппаИЛИТТ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаИЛИТТ.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИТТ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.СтруктурнаяЕдиница;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НоваяСтрОтбора.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИТТ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НоваяСтрОтбора.Использование = Истина;
			Иначе	
				НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.СтруктурнаяЕдиница;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НоваяСтрОтбора.Использование = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ГруппаТоваров) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ГруппаТоваров;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипЗаписи) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЗаписи");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ТипЗаписи;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипОперации) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОперации");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ТипОперации;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекущиеДанные.ПричинаСписания) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПричинаСписания");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ПричинаСписания;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
	КонецЕсли; 
	СохранитьНастройки();
КонецПроцедуры


&НаКлиенте
Процедура ФильтрыПослеУдаления(Элемент)
	СохранитьНастройки();
КонецПроцедуры


&НаКлиенте
Процедура Команда1(Команда)
М=ПолучитьМассивПолейПоиска();
КонецПроцедуры


&НаКлиенте
Процедура ФильтрыПередУдалением(Элемент, Отказ)
	Идентификатор=Строка(Элементы.Фильтры.ТекущиеДанные.УИН);
	Настройки=Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ТекущиеДанные=Элементы.Фильтры.ТекущиеДанные;	
	Фл=Ложь;
	Для каждого Эл Из Настройки Цикл
		Если Эл.Представление="ИЛИКорневой" Тогда
			Фл=Истина;
			ГруппаИЛИКорневой=Эл;
			Прервать;
		КонецЕсли; 	
	КонецЦикла; 
	Если Не Фл Тогда
		ГруппаИЛИКорневой = Настройки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИКорневой.Представление = "ИЛИКорневой";
		ГруппаИЛИКорневой.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаИЛИКорневой.Использование = Истина;
	КонецЕсли; 
	Кол=ГруппаИЛИКорневой.Элементы.Количество();
	Для Сч=0 По Кол-1 Цикл
		Если Идентификатор=ГруппаИЛИКорневой.Элементы[Кол-1-Сч].Представление Тогда
			ГруппаИЛИКорневой.Элементы.Удалить(Кол-1-Сч);	
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры


&НаКлиенте
Процедура Фильтры1ТипОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Отбор=Новый Структура("table_operation,field_operation","td_move","operation_type_orig");
	Струк=Новый Структура("Отбор",Отбор);
	ОткрытьФорму("Справочник.ТипыОперацийМагазина.Форма.ФормаВыбора1",Струк,Элемент);
	//Если Поле="ТипОперации" Тогда
	//	ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,"operation_type_orig");
	//ИначеЕсли Поле="ПричинаСписания" Тогда
	//	ХранилищеОбщихНастроек.Сохранить("АКfield_operation",,"id_reason");
	//КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
	Стр=Фильтры.Добавить();
	Если Копирование Тогда
		ЗаполнитьЗначенияСвойств(Стр,Элементы.Фильтры.ТекущиеДанные);	
	КонецЕсли; 
	Стр.Уин=Новый УникальныйИдентификатор;
КонецПроцедуры

&НаКлиенте
Процедура Фильтры1ПричинаСписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Отбор=Новый Структура("table_operation,field_operation","td_move","id_reason");
	Струк=Новый Структура("Отбор",Отбор);
	ОткрытьФорму("Справочник.ТипыОперацийМагазина.Форма.ФормаВыбора1",Струк,Элемент);
КонецПроцедуры



