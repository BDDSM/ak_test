
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	//Группы=НастройкаГруппировки.Выгрузить();
	//Группы.Колонки.Добавить("НомерСтр",Новый ОписаниеТипов("Число"));
	//Сч=1;
	//Для каждого Стр Из Группы Цикл
	//     Стр.НомерСтр=Сч;
	//	 Сч=Сч+1;
	//КонецЦикла; 
	//Если Группы.Количество()=0 Тогда
	//    Сообщить("Заполните таблицу разбивки на группы");
	//	Возврат;
	//КонецЕсли; 
	ДатаНачала = '00010101';
	ДатаКонца = '00010101';
	НоменклатураОтбор = Неопределено;
	СкладОтбор = Неопределено;
	ТипТТ= Перечисления.ТипыРозничныхТочек.ПустаяСсылка();
	ПодразделениеОтбор = Неопределено;

	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "Период" Тогда
			ДатаНачала = ПользПоле.Значение.ДатаНачала;
			ДатаКонца = ПользПоле.Значение.ДатаОкончания;
		КонецЕсли;
		Если ТипЗнч(ПользПоле) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТипЗнч(ПользПоле.ПравоеЗначение) = Тип("СправочникСсылка.Номенклатура")
				И ПользПоле.Использование = Истина
				И ПользПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЗначениеЗаполнено(ПользПоле.ПравоеЗначение)
				И НЕ ПользПоле.ПравоеЗначение.ЭтоГруппа Тогда
				НоменклатураОтбор = ПользПоле.ПравоеЗначение;
			КонецЕсли;	
			//Если ТипЗнч(ПользПоле.ПравоеЗначение) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			Если ТипЗнч(ПользПоле.ПравоеЗначение) = Тип("СправочникСсылка.Склады")
				И ПользПоле.Использование = Истина
				И ПользПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЗначениеЗаполнено(ПользПоле.ПравоеЗначение) Тогда
				СкладОтбор = ПользПоле.ПравоеЗначение;
			КонецЕсли;
			Если ТипЗнч(ПользПоле.ПравоеЗначение) = Тип("СправочникСсылка.Склады")
				И ПользПоле.Использование = Истина
				И ПользПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЗначениеЗаполнено(ПользПоле.ПравоеЗначение) Тогда
				СкладОтбор = ПользПоле.ПравоеЗначение;
			КонецЕсли;
			Если ТипЗнч(ПользПоле.ПравоеЗначение) = Тип("ПеречислениеСсылка.ТипыРозничныхТочек")
				И ПользПоле.Использование = Истина
				И ПользПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЗначениеЗаполнено(ПользПоле.ПравоеЗначение) Тогда
				ТипТТ = ПользПоле.ПравоеЗначение;
			КонецЕсли;
			Если ТипЗнч(ПользПоле.ПравоеЗначение) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
				И ПользПоле.Использование = Истина
				И ПользПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЗначениеЗаполнено(ПользПоле.ПравоеЗначение) Тогда
				ПодразделениеОтбор = ПользПоле.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	ПервыйПроход = Истина;
	Пока ДатаКонца >= ДатаНачала Цикл
		Если ПервыйПроход Тогда
			ТабДанные = ПолучитьДанныеДляОтчета(ДатаНачала, НоменклатураОтбор, СкладОтбор, Истина,ТипТТ,ПодразделениеОтбор);
		Иначе
			ТабВрем = ПолучитьДанныеДляОтчета(ДатаНачала, НоменклатураОтбор, СкладОтбор, Истина,ТипТТ,ПодразделениеОтбор);
			Для Каждого СтрокаТаб Из ТабВрем Цикл
				ЗаполнитьЗначенияСвойств(ТабДанные.Добавить(), СтрокаТаб);
			КонецЦикла;	
		КонецЕсли;	
		ПервыйПроход = Ложь;
		ДатаНачала = ДатаНачала + 86400;
	КонецЦикла;
	//ТабДанные.Свернуть("Дата, ТорговаяТочка,Склад,Расходник", "НехваткаКоробок, ПолучилаТТКоробок");
	//Для каждого Стр Из ТабДанные Цикл
	//	КолПересортВодитель=?(Стр.Расходник.КоличествоКоробокПоДаннымВодителя-Стр.ПолучилаТТКоробок>0,Стр.Расходник.КоличествоКоробокПоДаннымВодителя-Стр.ПолучилаТТКоробок,-Стр.Расходник.КоличествоКоробокПоДаннымВодителя+Стр.ПолучилаТТКоробок);
	//	Стр.НехваткаКоробок=?(ЗначениеЗаполнено(Стр.Расходник.КоличествоКоробокПоДаннымВодителя),Макс(Стр.НехваткаКоробок,КолПересортВодитель),Стр.НехваткаКоробок);
	//КонецЦикла;
	ТабДанные.Свернуть("Дата, ТорговаяТочка, Расходник, МаршрутныйЛист, Склад,ПриемкаВМагазинеБезПересчета,ПриемкаТовараБезПересчета", "ОтгруженоКоробок,ПолучилаТТКоробок,НехваткаКоробок,ОтгруженоШтук,ПолучилаТТШтук,НехваткаШтук");
	//ХранилищеОбщихНастроек.Сохранить("АК_ТабДанныеИзб",,ТабДанные);
	
	Адрес=ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(ТабДанные),Новый УникальныйИдентификатор());
	
	ТабДанные1=ТабДанные.Скопировать();
	//Кол=ТабДанные1.Количество();
	//Для Сч=0 По Кол-1 Цикл
	//	Если ТабДанные1[Кол-1-Сч].ПриемкаТовараБезПересчета=Истина Тогда
	//		ТабДанные1.Удалить(Кол-1-Сч);	
	//	КонецЕсли; 	
	//КонецЦикла; 
	
	
	
	//ТабДанные1.Свернуть("Дата, ТорговаяТочка", "НехваткаКоробок");                            
	//ТабДанные.Колонки.Добавить("КоличествоОтгрузок",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	//Для каждого Стр Из ТабДанные Цикл
	//	 МассивСтр=ТабДанные.НайтиСтроки(Новый Структура("Дата",Стр.Дата);
	//	 Стр.КоличествоОтгрузок=МассивСтр.Количество();
	//КонецЦикла; 
	//ТабДанные.Свернуть("Дата", "НехваткаКоробок, КоличествоОтгрузок");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабДанные.Дата,
		|	ТабДанные.ТорговаяТочка,
		|	ТабДанные.Расходник КАК РасходныйОрдер,
		|	ТабДанные.МаршрутныйЛист,
		|	ТабДанные.Склад,
		|	ТабДанные.НехваткаКоробок,
		|	ТабДанные.ОтгруженоКоробок,
		|	ТабДанные.ПолучилаТТКоробок,
		|	ТабДанные.НехваткаШтук,
		|	ТабДанные.ОтгруженоШтук,
		|	ТабДанные.ПолучилаТТШтук,
		|	ТабДанные.ПриемкаТовараБезПересчета,
		|	ТабДанные.ПриемкаВМагазинеБезПересчета
		|ПОМЕСТИТЬ втТабДанные
		|ИЗ
		|	&ТабДанные КАК ТабДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛист.Ссылка,
		|	МаршрутныйЛист.Маршрут
		|ПОМЕСТИТЬ втМаршрутныеЛисты
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|ГДЕ
		|	МаршрутныйЛист.Ссылка В
		|			(ВЫБРАТЬ
		|				втТабДанные.МаршрутныйЛист
		|			ИЗ
		|				втТабДанные)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.Склад
		|ПОМЕСТИТЬ втОрдера
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				втТабДанные.РасходныйОрдер
		|			ИЗ
		|				втТабДанные)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТабДанные.Дата,
		|	втТабДанные.ТорговаяТочка,
		|	втТабДанные.РасходныйОрдер,
		|	втТабДанные.МаршрутныйЛист,
		|	втОрдера.Склад КАК Склад,
		|	втТабДанные.Склад КАК Подразделение,
		|	-втТабДанные.НехваткаКоробок КАК НехваткаКоробок,
		|	втТабДанные.ПолучилаТТКоробок,
		|	-втТабДанные.НехваткаШтук КАК НехваткаШтук,
		|	втТабДанные.ПолучилаТТШтук,
		|	втМаршрутныеЛисты.Маршрут,
		|	втТабДанные.ПолучилаТТКоробок + втТабДанные.НехваткаКоробок КАК ОтгруженоКоробок,
		|	втТабДанные.ПолучилаТТШтук + втТабДанные.НехваткаШтук КАК ОтгруженоШтук,
		|	ВЫБОР
		|		КОГДА втТабДанные.ПриемкаВМагазинеБезПересчета = 2
		|				ИЛИ втТабДанные.ПриемкаВМагазинеБезПересчета = -2
		|				ИЛИ втТабДанные.ПриемкаТовараБезПересчета = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПересчетПриПриемке
		|ИЗ
		|	втТабДанные КАК втТабДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втМаршрутныеЛисты КАК втМаршрутныеЛисты
		|		ПО втТабДанные.МаршрутныйЛист = втМаршрутныеЛисты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОрдера КАК втОрдера
		|		ПО втТабДанные.РасходныйОрдер = втОрдера.Ссылка";
	
    Запрос.УстановитьПараметр("ТабДанные",ТабДанные1);
	//Запрос.УстановитьПараметр("Группы",Группы);
	Результат = Запрос.Выполнить().Выгрузить();
	//ТЗИтог = Результат.Выгрузить();
	//Итог=ТЗИтог.Итог("НехваткаКоробок");
	//НомСтр=ТЗИтог[ТЗИтог.Количество()-1].НомСтр;
	//НовСтр=ТЗИтог.Добавить();
	//НовСтр.Представление="Итого";
	//НовСтр.НехваткаКоробок=Итог;
	//НовСтр.НомСтр=НомСтр+1;
	//
	//ТЗИтог.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	//ТЗИтог.ЗаполнитьЗначения(?(ЗначениеЗаполнено(СкладОтбор),СкладОтбор,Справочники.Склады.ПустаяСсылка()), "Склад");
	//ТЗИтог.Колонки.Добавить("ТипРозничнойТочки",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРозничныхТочек"));
	//ТЗИтог.ЗаполнитьЗначения(ТипТТ, "ТипРозничнойТочки");
	//ТЗИтог.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//ТЗИтог.ЗаполнитьЗначения(ПодразделениеОтбор, "Подразделение");
	//
	СтандартнаяОбработка = Ложь;
	//
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабДанные", Результат);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	
	
	//
	//ТабДок=Новый ТабличныйДокумент;
	//Мак=Отчеты.АК_ПересортицаПоДнОтгрузкам.ПолучитьМакет("Макет");
	//Обл1=Мак.ПолучитьОбласть("Заголовок1");
	//Обл2=Мак.ПолучитьОбласть("Заголовок2");
	//Обл3=Мак.ПолучитьОбласть("Заголовок3");
	//
	//ДокументРезультат.Вывести(Обл1);
	////Вывод результата
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ТабДок);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//ДокументРезультат.Вывести(ТабДок);
	//ДокументРезультат.Вывести(Обл2);
	//
	//МасБезПересчетаСКонтрПересчетом=Новый Массив;
	//Для каждого Стр Из ТабДанные Цикл
	//	Если Стр.ПриемкаТовараБезПересчета=Истина И
	//	 (Стр.ПриемкаВМагазинеБезПересчета=2 ИЛИ Стр.ПриемкаВМагазинеБезПересчета=-2) Тогда
	//		Если МасБезПересчетаСКонтрПересчетом.Найти(Стр.ТорговаяТочка)=Неопределено Тогда
	//			МасБезПересчетаСКонтрПересчетом.Добавить(Стр.ТорговаяТочка);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЦикла; 
	//
	//МасБезПересчета=Новый Массив;
	//ТабДанные1=ТабДанные.Скопировать();
	//Кол=ТабДанные1.Количество();
	//Для Сч=0 По Кол-1 Цикл
	//	Если ТабДанные1[Кол-1-Сч].ПриемкаТовараБезПересчета=Истина  Тогда
	//		Если (МасБезПересчетаСКонтрПересчетом.Найти(ТабДанные1[Кол-1-Сч].ТорговаяТочка)=Неопределено) Тогда
	//			Если МасБезПересчета.Найти(ТабДанные1[Кол-1-Сч].ТорговаяТочка)=Неопределено Тогда
	//				МасБезПересчета.Добавить(ТабДанные1[Кол-1-Сч].ТорговаяТочка);
	//			КонецЕсли; 
	//			ТабДанные1.Удалить(Кол-1-Сч);
	//		КонецЕсли;
	//	Иначе
	//		ТабДанные1.Удалить(Кол-1-Сч);
	//	КонецЕсли; 
	//КонецЦикла; 
	//
	//
	////Обл3.Параметры.МагазиновБезПересчета=МасБезПересчета.Количество();
	////Если Не(СтрокаРаспределено.ПриемкаТовараБезПересчета=Ложь Или (СтрокаРаспределено.ПриемкаТовараБезПересчета=Истина И
	////	(СтрокаРаспределено.ПриемкаВМагазинеБезПересчета=2 ИЛИ СтрокаРаспределено.ПриемкаВМагазинеБезПересчета=-2))) Тогда
	////	Продолжить;
	////КонецЕсли; 
	//
	//ТабДанные1.Свернуть("Дата, ТорговаяТочка", "НехваткаКоробок");                            
	////ТабДанные.Колонки.Добавить("КоличествоОтгрузок",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	////Для каждого Стр Из ТабДанные Цикл
	////	 МассивСтр=ТабДанные.НайтиСтроки(Новый Структура("Дата",Стр.Дата);
	////	 Стр.КоличествоОтгрузок=МассивСтр.Количество();
	////КонецЦикла; 
	////ТабДанные.Свернуть("Дата", "НехваткаКоробок, КоличествоОтгрузок");

	//Запрос.УстановитьПараметр("ТабДанные",ТабДанные1);
	//Запрос.УстановитьПараметр("Группы",Группы);
	//Результат = Запрос.Выполнить();

	//ТЗИтог = Результат.Выгрузить();
	//Итог=ТЗИтог.Итог("НехваткаКоробок");
	//НомСтр=ТЗИтог[ТЗИтог.Количество()-1].НомСтр;
	//НовСтр=ТЗИтог.Добавить();
	//НовСтр.Представление="Итого";
	//НовСтр.НехваткаКоробок=Итог;
	//НовСтр.НомСтр=НомСтр+1;
	//
	//ТЗИтог.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	//ТЗИтог.ЗаполнитьЗначения(?(ЗначениеЗаполнено(СкладОтбор),СкладОтбор,Справочники.Склады.ПустаяСсылка()), "Склад");
	//ТЗИтог.Колонки.Добавить("ТипРозничнойТочки",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРозничныхТочек"));
	//ТЗИтог.ЗаполнитьЗначения(ТипТТ, "ТипРозничнойТочки");
	//ТЗИтог.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//ТЗИтог.ЗаполнитьЗначения(ПодразделениеОтбор, "Подразделение");
	//
	//СтандартнаяОбработка = Ложь;
	//
	//ВнешниеНаборыДанных = Новый Структура;
	//ВнешниеНаборыДанных.Вставить("ТабДанные", ТЗИтог);
	//
	////Макет компоновки 
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	//
	////Компоновка данных
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	//
	//ТабДок=Новый ТабличныйДокумент;
	////Вывод результата
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ТабДок);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//ДокументРезультат.Вывести(ТабДок);
	//
	//
	//ТабДанные1=ТабДанные.Скопировать();
	//Кол=ТабДанные1.Количество();
	//Для Сч=0 По Кол-1 Цикл
	//	Если ТабДанные1[Кол-1-Сч].ПриемкаТовараБезПересчета=Истина  Тогда
	//		Если Не (МасБезПересчетаСКонтрПересчетом.Найти(ТабДанные1[Кол-1-Сч].ТорговаяТочка)=Неопределено) Тогда
	//			ТабДанные1.Удалить(Кол-1-Сч);
	//		КонецЕсли;
	//	Иначе
	//		ТабДанные1.Удалить(Кол-1-Сч);
	//	КонецЕсли; 
	//КонецЦикла; 
	//
	//
	////Обл3.Параметры.МагазиновБезПересчета=МасБезПересчета.Количество();
	////Если Не(СтрокаРаспределено.ПриемкаТовараБезПересчета=Ложь Или (СтрокаРаспределено.ПриемкаТовараБезПересчета=Истина И
	////	(СтрокаРаспределено.ПриемкаВМагазинеБезПересчета=2 ИЛИ СтрокаРаспределено.ПриемкаВМагазинеБезПересчета=-2))) Тогда
	////	Продолжить;
	////КонецЕсли; 
	//
	//ТабДанные1.Свернуть("Дата, ТорговаяТочка", "НехваткаКоробок");                            
	////ТабДанные.Колонки.Добавить("КоличествоОтгрузок",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	////Для каждого Стр Из ТабДанные Цикл
	////	 МассивСтр=ТабДанные.НайтиСтроки(Новый Структура("Дата",Стр.Дата);
	////	 Стр.КоличествоОтгрузок=МассивСтр.Количество();
	////КонецЦикла; 
	////ТабДанные.Свернуть("Дата", "НехваткаКоробок, КоличествоОтгрузок");

	//Запрос.УстановитьПараметр("ТабДанные",ТабДанные1);
	//Запрос.УстановитьПараметр("Группы",Группы);
	//Результат = Запрос.Выполнить();

	//ТЗИтог = Результат.Выгрузить();
	//Итог=ТЗИтог.Итог("НехваткаКоробок");
	//НомСтр=ТЗИтог[ТЗИтог.Количество()-1].НомСтр;
	//НовСтр=ТЗИтог.Добавить();
	//НовСтр.Представление="Итого";
	//НовСтр.НехваткаКоробок=Итог;
	//НовСтр.НомСтр=НомСтр+1;
	//
	//ТЗИтог.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	//ТЗИтог.ЗаполнитьЗначения(?(ЗначениеЗаполнено(СкладОтбор),СкладОтбор,Справочники.Склады.ПустаяСсылка()), "Склад");
	//ТЗИтог.Колонки.Добавить("ТипРозничнойТочки",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРозничныхТочек"));
	//ТЗИтог.ЗаполнитьЗначения(ТипТТ, "ТипРозничнойТочки");
	//ТЗИтог.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//ТЗИтог.ЗаполнитьЗначения(ПодразделениеОтбор, "Подразделение");
	//
	//СтандартнаяОбработка = Ложь;
	//
	//ВнешниеНаборыДанных = Новый Структура;
	//ВнешниеНаборыДанных.Вставить("ТабДанные", ТЗИтог);
	//
	////Макет компоновки 
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	//
	////Компоновка данных
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	//
	//ТабДок=Новый ТабличныйДокумент;
	////Вывод результата
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ТабДок);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//ДокументРезультат.Вывести(Обл3);
	//ДокументРезультат.Вывести(ТабДок);
	//СпНом=Новый СписокЗначений;
	//Для Сч=0 По ДокументРезультат.ВысотаТаблицы-5 Цикл
	//	Если ДокументРезультат.Область(5+Сч,1,5+Сч,1).Текст=ДокументРезультат.Область(6+Сч,1,6+Сч,1).Текст И ДокументРезультат.Область(5+Сч,2,5+Сч,2).Текст="" Тогда
	//	//Если ДокументРезультат.Область(5+Сч,2,5+Сч,2).Текст="" Тогда
	//		СпНом.Вставить(0,Сч);
	//	КонецЕсли; 
	//КонецЦикла;
	//Для каждого Эл Из СпНом Цикл
	//    ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(5+Эл.Значение,,5+Эл.Значение,),ТипСмещенияТабличногоДокумента.ПоВертикали);
	//КонецЦикла;
	//Обл=ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы,);
	//ДокументРезультат.Вывести(Обл);
	//ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,1,ДокументРезультат.ВысотаТаблицы,1).Текст="ИТОГО";
	//ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,2,ДокументРезультат.ВысотаТаблицы,2).Текст=Строка(ТЗИтог.Итог("НехваткаКоробок"));
	//ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,2,ДокументРезультат.ВысотаТаблицы,2).ГоризонтальноеПоложение=ГоризонтальноеПоложение.Право;
КонецПроцедуры


Функция ПолучитьДанныеДляОтчета(ДатаОтчета, НоменклатураОтбор = Неопределено, СкладОтбор = Неопределено, СворачиватьДанные = Ложь,ТипТТ,ПодразделениеОтбор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	//НоменклатураОтбор=Справочники.Номенклатура.НайтиПоКоду("000620030");
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	Запрос.УстановитьПараметр("ДатаОтчетаДо", (ДатаОтчета-24*60*60));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Номенкл", НоменклатураОтбор);
	Запрос.УстановитьПараметр("Склад", СкладОтбор);
	Запрос.УстановитьПараметр("СкладВладелец", ?(СкладОтбор=Неопределено,Неопределено, СкладОтбор.Владелец));
	МасИскл=Новый Массив;
	МасИскл.Добавить(Справочники.Номенклатура.НайтиПоКоду("000615038"));
	МасИскл.Добавить(Справочники.Номенклатура.НайтиПоКоду("000625174"));
	
	Запрос.УстановитьПараметр("НоменклИскл", МасИскл);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК Количество,
	|	Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы) КАК ТорговаяТочка,
	|	Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК ВиртСклад,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК Склад,  Максимум(РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета) как ПриемкаВМагазинеБезПересчета,
	|	Максимум(Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы).ПриемкаТовараБезПересчета)  как ПриемкаТовараБезПересчета,
	|	РасходныйОрдерСкладТовары.Характеристика
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = &ДатаОтчета                                          //5
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И (РасходныйОрдерСкладТовары.Номенклатура = &Номенкл
	|			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)
	|	И (РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	|			ИЛИ &Склад = НЕОПРЕДЕЛЕНО) и Не РасходныйОрдерСкладТовары.Номенклатура в (&НоменклИскл)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы),
	|	Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки,
	|РасходныйОрдерСкладТовары.Ссылка.Склад,РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
	|	РасходныйОрдерСкладТовары.Характеристика
	|;";
	ТабРаспределено=Запрос.Выполнить().Выгрузить();
	МасХар=ТабРаспределено.ВыгрузитьКолонку("Характеристика");
	МасНом=ТабРаспределено.ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("МасХар",МасХар);
	Запрос.УстановитьПараметр("МасНом",МасНом);
	
	
	Запрос.УстановитьПараметр("НоменклИскл", МасИскл);   
	Запрос.Текст = "////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка,
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	               |ИЗ
	               |	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаОтчета, ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаУРЗ = Номенклатура.ГруппаНоменклатурыУРЗ
	               |ГДЕ
	               |	(Номенклатура.Ссылка = &Номенкл                                                      //2
	               |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)
				   |	И (ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &СкладВладелец
				   |			ИЛИ &СкладВладелец = НЕОПРЕДЕЛЕНО)
				   |;";
	ТабПорядокОбеспечения = Запрос.Выполнить().Выгрузить();
	 Запрос.Текст =  "ВЫБРАТЬ
	                 |	РасходныйОрдерСкладТовары.Номенклатура,
	                 |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	                 |	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТорговаяТочка,
	                 |	РасходныйОрдерСкладТовары.Характеристика,
	                 |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК СтруктурнаяЕдиница,
	                 |	РасходныйОрдерСкладТовары.Ссылка КАК Расходник,
	                 |	РасходныйОрдерСкладТовары.Ссылка.Сборщик
	                 |ПОМЕСТИТЬ втДанные
	                 |ИЗ
	                 |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	                 |ГДЕ
	                 |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = &ДатаОтчета
	                 |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	                 |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	                 |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	                 |	И (РасходныйОрдерСкладТовары.Номенклатура = &Номенкл
	                 |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)
	                 |	И (РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	                 |			ИЛИ &Склад = НЕОПРЕДЕЛЕНО)
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	РасходныйОрдерСкладТовары.Номенклатура,
	                 |	РасходныйОрдерСкладТовары.Ссылка.Получатель,
	                 |	РасходныйОрдерСкладТовары.Характеристика,
	                 |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
	                 |	РасходныйОрдерСкладТовары.Ссылка,
	                 |	РасходныйОрдерСкладТовары.Ссылка.Сборщик
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	МАКСИМУМ(МаршрутныйЛистРасходныеОрдера.Ссылка) КАК Ссылка,
	                 |	МаршрутныйЛистРасходныеОрдера.Документ
	                 |ПОМЕСТИТЬ втМаршрутныеЛисты
	                 |ИЗ
	                 |	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	                 |ГДЕ
	                 |	МаршрутныйЛистРасходныеОрдера.Документ В
	                 |			(ВЫБРАТЬ
	                 |				втДанные.Расходник
	                 |			ИЗ
	                 |				втДанные)
	                 |	И МаршрутныйЛистРасходныеОрдера.Ссылка.Проведен = ИСТИНА
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	МаршрутныйЛистРасходныеОрдера.Документ
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	втДанные.Номенклатура,
	                 |	втДанные.Количество,
	                 |	втДанные.ТорговаяТочка,
	                 |	втДанные.Характеристика,
	                 |	втДанные.СтруктурнаяЕдиница,
	                 |	втДанные.Расходник,
	                 |	втДанные.Сборщик,
	                 |	втМаршрутныеЛисты.Ссылка КАК МаршрутныйЛист
	                 |ИЗ
	                 |	втДанные КАК втДанные
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ втМаршрутныеЛисты КАК втМаршрутныеЛисты
	                 |		ПО втДанные.Расходник = втМаршрутныеЛисты.Документ";
	 ТабОтгружено = Запрос.Выполнить().Выгрузить();

	Запрос.Текст = "////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница КАК Склад,
	               |	КоличествоВКоробкеСрезПоследних.Количество,
	               |	КоличествоВКоробкеСрезПоследних.Характеристика
	               |ИЗ
	               |	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	               |			КонецПериода(&ДатаОтчетаДо,день),
				   //|			СтруктурнаяЕдиница = &СкладВладелец ИЛИ &СкладВладелец = НЕОПРЕДЕЛЕНО                     //4
	               |				) КАК КоличествоВКоробкеСрезПоследних
	               |ГДЕ
				   //|	КоличествоВКоробкеСрезПоследних.Характеристика.Неактивная = ЛОЖЬ
				   //|	И КоличествоВКоробкеСрезПоследних.Характеристика.БратьКоличествоВКоробкеПоСкладуДляРаспределения = ИСТИНА  И
	               |	 (КоличествоВКоробкеСрезПоследних.Характеристика.Владелец = &Номенкл
	               |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)
	               |;	               ";
				   
	//Результаты = Запрос.ВыполнитьПакет();
	ТабКолвоВКоробке =  Запрос.Выполнить().Выгрузить();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК Количество,
	               |	Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы) КАК ТорговаяТочка,
	               |	Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки КАК ТипРозничнойТочки,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад КАК ВиртСклад,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК Склад,  Максимум(РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета) как ПриемкаВМагазинеБезПересчета,
				   |	Максимум(Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы).ПриемкаТовараБезПересчета)  как ПриемкаТовараБезПересчета,
	               |	РасходныйОрдерСкладТовары.Характеристика
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = &ДатаОтчета                                          //5
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |	И (РасходныйОрдерСкладТовары.Номенклатура = &Номенкл
	               |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)
				   //|	И (РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &Склад
				   //|			ИЛИ &Склад = НЕОПРЕДЕЛЕНО)
	               |	И (РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	               |			ИЛИ &Склад = НЕОПРЕДЕЛЕНО) и Не РасходныйОрдерСкладТовары.Номенклатура в (&НоменклИскл)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура,Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы),
	               |	Выразить(РасходныйОрдерСкладТовары.Ссылка.Получатель как Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки,
				   |РасходныйОрдерСкладТовары.Ссылка.Склад,РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
	               |	РасходныйОрдерСкладТовары.Характеристика
				   |;";
	ТабРаспределено=Запрос.Выполнить().Выгрузить();
			   
	  Запрос.Текст =  "////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	               |	ЗначенияСвойствОбъектов.Значение
	               |ИЗ                                                                                               //7
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
	               |ГДЕ
				   //|	ХарактеристикиНоменклатуры.БратьКоличествоВКоробкеПоСкладуДляРаспределения = ЛОЖЬ И 
	               |	(ХарактеристикиНоменклатуры.Владелец = &Номенкл
	               |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)
	               |;";
	ТабВКоробкеПоХарактеристике=Запрос.Выполнить().Выгрузить();
	Запрос.Текст="	                             
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница КАК Склад,
	               |	КоличествоВКоробкеСрезПоследних.Количество,
	               |	КоличествоВКоробкеСрезПоследних.Характеристика
	               |ИЗ                                                                                                     //11
	               |	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	               |			,
				   //|			СтруктурнаяЕдиница = &СкладВладелец ИЛИ &СкладВладелец = НЕОПРЕДЕЛЕНО
	               |				) КАК КоличествоВКоробкеСрезПоследних
	               |ГДЕ
				   //|	КоличествоВКоробкеСрезПоследних.Характеристика.Неактивная = ЛОЖЬ
				   //|	И КоличествоВКоробкеСрезПоследних.Характеристика.БратьКоличествоВКоробкеПоСкладуДляРаспределения = ИСТИНА  И
	               |	 (КоличествоВКоробкеСрезПоследних.Характеристика.Владелец = &Номенкл
	               |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)				   
	               |;";
	ТабКолвоВКоробкеТекМомент=Запрос.Выполнить().Выгрузить();
	 Запрос.Текст = "////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВКоробкеПоДням.СтруктурнаяЕдиница КАК Склад,
	               |	КоличествоВКоробкеПоДням.Количество,
	               |	КоличествоВКоробкеПоДням.Характеристика                                                   //12
	               |ИЗ
	               |	РегистрСведений.КоличествоВКоробкеПоДням Как  КоличествоВКоробкеПоДням             
	               |ГДЕ
	               |	КоличествоВКоробкеПоДням.День=&ДатаОтчетаДо и (КоличествоВКоробкеПоДням.СтруктурнаяЕдиница = &СкладВладелец ИЛИ &СкладВладелец = НЕОПРЕДЕЛЕНО)  
				   |	И (КоличествоВКоробкеПоДням.Характеристика.Владелец = &Номенкл
	               |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)";
	ТабКолвоВКоробкеПоДням=Запрос.Выполнить().Выгрузить();
	//ТабКолвоВКоробкеПоДням = Результаты[1].Выгрузить();
	
	//Запрос.Текст="	ВЫБРАТЬ 
	//			   |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	//			   |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,                                        //8
	//			   |	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	//			   |ИЗ
	//			   |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаОтчета,Ложь ) КАК ТоварныйАссортиментТочекСрезПоследних
	//			   |ГДЕ
	//			   |	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	//			   |	И (ТоварныйАссортиментТочекСрезПоследних.Номенклатура = &Номенкл
	//			   |			ИЛИ &Номенкл = НЕОПРЕДЕЛЕНО)  ";
	//ТабТовАссортимент = Запрос.Выполнить().Выгрузить();
	
	ТабПорядокОбеспечения.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	ТабКолвоВКоробке.Индексы.Добавить("Склад, Характеристика");
	ТабВКоробкеПоХарактеристике.Индексы.Добавить("Характеристика");
	ТабКолвоВКоробкеТекМомент.Индексы.Добавить("Склад, Характеристика");
	
	ТабОтгружено.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	//ТабТовАссортимент.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	//ТабТоварыМаршрутов.Индексы.Добавить("Маршрут, Номенклатура");
	//ТабТТМаршрутов.Индексы.Добавить("СтруктурноеПодразделение, ТорговаяТочка");
	//ТабМинДатыОстатковПоНоменклатуре.Индексы.Добавить("СтруктурнаяЕдиница, Номенклатура, Характеристика");
	
	ТабДвижения = Неопределено;
	//ТабМинДатыОстатковПоНоменклатуре = Неопределено;
	Запрос = Неопределено;
				   
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Сборщик");
	ТаблицаДанных.Колонки.Добавить("Расходник",Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
	ТаблицаДанных.Колонки.Добавить("МаршрутныйЛист",Новый ОписаниеТипов("ДокументСсылка.МаршрутныйЛист"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("НоменклатураА",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	МассивТипов=Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
	
	
	ТаблицаДанных.Колонки.Добавить("ТорговаяТочка",Новый ОписаниеТипов(МассивТипов));
	ТаблицаДанных.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("РаспределеноКоробок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("РаспределеноШтук", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ОтгруженоКоробок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ОтгруженоШтук", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("НехваткаКоробок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("НехваткаШтук", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПолучилаТТКоробок", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПолучилаТТШтук", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПорядокСборки", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Маршрут");
	ТаблицаДанных.Колонки.Добавить("ВиртСклад");
	
	ТаблицаДанных.Колонки.Добавить("ПриемкаВМагазинеБезПересчета", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПриемкаТовараБезПересчета", Новый ОписаниеТипов("Булево"));
	
	//ТаблицаДанных.Индексы.Добавить("Склад, ТорговаяТочка, Номенклатура, Характеристика");
	ТаблицаДанных.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	ТаблицаДанных.Индексы.Добавить("ТорговаяТочка, НоменклатураА");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.Номенклатура,
		|	АналогиНоменклатурыТовары.Ссылка КАК СсылкаАналог
		|ПОМЕСТИТЬ втЭлементыА
		|ИЗ
		|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
		|		ПО АналогиНоменклатурыТовары.Номенклатура = втТовары.Номенклатура
		|ГДЕ
		|	АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	втТовары.Номенклатура,
		|	АналогиНоменклатурыТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЭлементыА.Номенклатура,
		|	АналогиНоменклатурыТовары.Номенклатура КАК НоменклатураА
		|ПОМЕСТИТЬ втАналоги
		|ИЗ
		|	втЭлементыА КАК втЭлементыА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
		|		ПО втЭлементыА.СсылкаАналог = АналогиНоменклатурыТовары.Ссылка
		|			И втЭлементыА.Номенклатура <> АналогиНоменклатурыТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втАналоги.Номенклатура,
		|	ВтТовары.Характеристика,
		|	втАналоги.Номенклатура КАК НоменклатураА
		|ПОМЕСТИТЬ ВтТоварыОчищ
		|ИЗ
		|	втАналоги КАК втАналоги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК ВтТовары
		|		ПО втАналоги.Номенклатура = ВтТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.Номенклатура,
		|	втТовары.Характеристика,
		|	ЗначенияСвойствОбъектов.Значение КАК КоличествоВКор
		|ПОМЕСТИТЬ втНомСКол
		|ИЗ
		|	ВтТоварыОчищ КАК втТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО втТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втАналоги.Номенклатура,
		|	втАналоги.НоменклатураА,
		|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактернистикаА,
		|	ЗначенияСвойствОбъектов.Значение КАК КоличествоВКор
		|ПОМЕСТИТЬ втАналогиХар
		|ИЗ
		|	втАналоги КАК втАналоги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
		|		ПО втАналоги.НоменклатураА = ХарактеристикиНоменклатуры.Владелец
		|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
		|			И (НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))
		|			И (НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНомСКол.Номенклатура,
		|	втНомСКол.Характеристика,
		|	втАналогиХар.НоменклатураА,
		|	втАналогиХар.ХарактернистикаА
		|ИЗ
		|	втНомСКол КАК втНомСКол
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАналогиХар КАК втАналогиХар
		|		ПО втНомСКол.Номенклатура = втАналогиХар.Номенклатура
		|			И втНомСКол.КоличествоВКор = втАналогиХар.КоличествоВКор";
		
	ТЗХар=ТабРаспределено.СКопировать();
	ТЗХар.Свернуть("Номенклатура,Характеристика");                               
    Запрос.УстановитьПараметр("Товары",ТЗХар);             
	Результат = Запрос.Выполнить();

	ТЗАналоги = Результат.Выгрузить();
	ТЗАналоги.Индексы.Добавить("Номенклатура, Характеристика");

	
	МассивНаим = Новый Массив();
	МассивНаим.Добавить("Бахча");
	МассивНаим.Добавить("Прямая поставка на ВВ");
	МассивНаим.Добавить("Склад рекл. материалы Кавказский");
	ЗапросКешСкладыИсключить = Новый Запрос();
	ЗапросКешСкладыИсключить.УстановитьПараметр("Склады", МассивНаим);
	ЗапросКешСкладыИсключить.Текст = "ВЫБРАТЬ
	                                 |	Склады.Ссылка
	                                 |ИЗ
	                                 |	Справочник.Склады КАК Склады
	                                 |ГДЕ
	                                 |	Склады.Наименование В (&Склады)";
									 
	МассивСкладыИсключить = ЗапросКешСкладыИсключить.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
	
	
	Для Каждого СтрокаРаспределено Из ТабРаспределено Цикл
		//Если СтрокаРаспределено.Номенклатура.Код = "000620030" Тогда
		//	 Продолжить;
		//КонецЕсли; 
		
		
	    Если МассивСкладыИсключить.Найти(СтрокаРаспределено.ВиртСклад) <> Неопределено Тогда              
			Продолжить;
		КонецЕсли;
		 
	  		Если ЗначениеЗаполнено(ТипТТ) Тогда
		    Если Не ТипТТ=СтрокаРаспределено.ТипРозничнойТочки Тогда              
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ПодразделениеОтбор) Тогда
		    Если Не ПодразделениеОтбор=СтрокаРаспределено.Склад Тогда              
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Если Не(СтрокаРаспределено.ПриемкаТовараБезПересчета=Ложь Или (СтрокаРаспределено.ПриемкаТовараБезПересчета=Истина И
		//	(СтрокаРаспределено.ПриемкаВМагазинеБезПересчета=2 ИЛИ СтрокаРаспределено.ПриемкаВМагазинеБезПересчета=-2))) Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		СтрокаДоб = ТаблицаДанных.Добавить();
		СтрокаДоб.ВиртСклад = СтрокаРаспределено.ВиртСклад;
		СтрокаДоб.Номенклатура = СтрокаРаспределено.Номенклатура;
		СтрокаДоб.ТорговаяТочка = СтрокаРаспределено.ТорговаяТочка;
		СтрокаДоб.Характеристика = СтрокаРаспределено.Характеристика;
		СтрокаДоб.ПриемкаВМагазинеБезПересчета = СтрокаРаспределено.ПриемкаВМагазинеБезПересчета;
		СтрокаДоб.ПриемкаТовараБезПересчета = СтрокаРаспределено.ПриемкаТовараБезПересчета;
		
		СтрокиОтгружено = ТабОтгружено.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаРаспределено.ТорговаяТочка, СтрокаРаспределено.Номенклатура));
		
		ФлНайдено=Ложь;
		Если СтрокиОтгружено.Количество() > 0 Тогда
			СтрокаДоб.Расходник = СтрокиОтгружено[0].Расходник;
			СтрокаДоб.МаршрутныйЛист =  СтрокиОтгружено[0].МаршрутныйЛист;
			СтрокаДоб.Склад = СтрокиОтгружено[0].СтруктурнаяЕдиница;
			СтрокаДоб.Сборщик = СтрокиОтгружено[0].Сборщик;
			ФлНайдено=Истина;
		Иначе
			СтрокиА = ТЗАналоги.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаРаспределено.Номенклатура, СтрокаРаспределено.Характеристика));
			Если СтрокиА.Количество() > 0 Тогда
				Для каждого СтрА Из СтрокиА Цикл
					СтрокиОтгруженоА = ТабОтгружено.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаРаспределено.ТорговаяТочка, СтрА.НоменклатураА));
					Если СтрокиОтгруженоА.Количество() > 0 Тогда
						СтрокаДоб.Расходник = СтрокиОтгруженоА[0].Расходник;
						СтрокаДоб.Склад = СтрокиОтгруженоА[0].СтруктурнаяЕдиница;
						СтрокаДоб.Сборщик = СтрокиОтгруженоА[0].Сборщик;
						СтрокаДоб.НоменклатураА = СтрА.НоменклатураА;
						ФлНайдено=Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла; 	
			КонецЕсли; 
		КонецЕсли;	
			
		Если Не ФлНайдено Тогда	
			СтрокиПорядокОбеспечения = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаРаспределено.ТорговаяТочка, СтрокаРаспределено.Номенклатура));
			Если СтрокиПорядокОбеспечения.Количество() > 0 Тогда
				СтрокаДоб.Склад = СтрокиПорядокОбеспечения[0].Расчетчик;
			КонецЕсли;
		КонецЕсли;	
		
		
		КолвоВКоробке = 0;
		СтрокиВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Склад, Характеристика", СтрокаДоб.Склад, СтрокаДоб.Характеристика));
		Если СтрокиВКоробке.Количество() > 0 Тогда
			КолвоВКоробке = СтрокиВКоробке[0].Количество;
		Иначе
			СтрокаХар = ТабВКоробкеПоХарактеристике.Найти(СтрокаДоб.Характеристика, "Характеристика");
			Если СтрокаХар <> Неопределено Тогда
				КолвоВКоробке = СтрокаХар.Значение;
			КонецЕсли;	
		КонецЕсли;
		
		Если КолвоВКоробке=0 Тогда
			СтрокиВКоробке1 = ТабКолвоВКоробкеТекМомент.НайтиСтроки(Новый Структура("Склад, Характеристика", СтрокаДоб.Склад, СтрокаДоб.Характеристика));
			Если СтрокиВКоробке1.Количество() > 0 Тогда
				КолвоВКоробке = СтрокиВКоробке1[0].Количество;
			КонецЕсли; 
		КонецЕсли;
		
		Если КолвоВКоробке=0 Тогда
			СтрокиВКоробке2 = ТабКолвоВКоробкеПоДням.НайтиСтроки(Новый Структура("Склад, Характеристика", СтрокаДоб.Склад, СтрокаДоб.Характеристика));
			Если СтрокиВКоробке2.Количество() > 0 Тогда
				КолвоВКоробке = СтрокиВКоробке2[0].Количество;
			КонецЕсли; 
		КонецЕсли;
			
			
		Если КолвоВКоробке=0 Тогда
		    Кол123=0;
		КонецЕсли; 
		СтрокаДоб.РаспределеноШтук = СтрокаРаспределено.Количество;
		Если СтрокаДоб.РаспределеноШтук = 0 Тогда
			СтрокаДоб.РаспределеноКоробок = 0;
		Иначе
			СтрокаДоб.РаспределеноКоробок = ?(ЗначениеЗаполнено(КолвоВКоробке), Цел(СтрокаДоб.РаспределеноШтук / КолвоВКоробке), СтрокаДоб.РаспределеноШтук);
			Если СтрокаДоб.РаспределеноКоробок <> СтрокаДоб.РаспределеноШтук Тогда
				Если Цел(СтрокаДоб.РаспределеноШтук / КолвоВКоробке) * КолвоВКоробке <> СтрокаДоб.РаспределеноШтук Тогда
					СтрокаДоб.РаспределеноКоробок = СтрокаДоб.РаспределеноКоробок + 1;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("VV");
	ADOСоединение.Open();
	
	СтрЗапрос = "create table #ls (post numeric(15, 3), id_tov int, id_tt int) 
                    |
					|Insert into #ls
					|exec ('SELECT CAST(DTT.post as numeric(15, 3)) as post, DTT.id_tov, DTT.id_tt
				  |
				  |  	  FROM [vv03].[dbo].[DTT] DTT (nolock)
				  |  	  
				  |  	  WHERE DTT.date_tt = '" + ВнешниеДанные.ФорматПоля(ДатаОтчета, Истина) + "' and DTT.post <> 0" + ?(ЗначениеЗаполнено(НоменклатураОтбор), " and DTT.id_tov = " + ВнешниеДанные.ФорматПоля(НоменклатураОтбор.id_tov), "") + "
				  |			and DTT.id_tov <> 15722') at [SRV-SQL03]
				  |
				  |SELECT CAST(DTT.post as numeric(15, 3)) as post, CAST(ArticleBin2UID.UID as nvarchar(50)) as tov, CAST(TTBin2UID.UID as nvarchar(50)) as TT
				  |
				  |  	  FROM #ls DTT
				  |  	  LEFT OUTER JOIN IzbenkaFin.dbo.ArticleBin2UID (nolock) ArticleBin2UID
				  |  	  ON DTT.id_tov = ArticleBin2UID.id_tov
				  |  	  LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID (nolock) TTBin2UID
				  |  	  ON DTT.id_tt = TTBin2UID.id_tt";
	
	//СтрЗапрос = "SELECT CAST(DTT.post as numeric(15, 3)) as post, CAST(ArticleBin2UID.UID as nvarchar(50)) as tov, CAST(TTBin2UID.UID as nvarchar(50)) as TT
	//			  |
	//			  |  	  FROM [Reports].[dbo].[DTT] DTT (nolock)
	//			  |  	  LEFT OUTER JOIN IzbenkaFin.dbo.ArticleBin2UID (nolock) ArticleBin2UID
	//			  |  	  ON DTT.id_tov = ArticleBin2UID.id_tov
	//			  |  	  LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID (nolock) TTBin2UID
	//			  |  	  ON DTT.id_tt = TTBin2UID.id_tt
	//			  |  	  
	//			  |  	  WHERE DTT.date_tt = " + ВнешниеДанные.ФорматПоля(ДатаОтчета, Истина) + " and DTT.post <> 0" + ?(ЗначениеЗаполнено(НоменклатураОтбор), " and DTT.id_tov = " + ВнешниеДанные.ФорматПоля(НоменклатураОтбор.id_tov), "") + "
	//			  |			and DTT.id_tov <> 15722";
  
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("tov").Value));
			//Если Не Товар.Код = "000620030" Тогда
				ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TT").Value));
				СтрокиДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", ТТ, Товар));
				КолМас=СтрокиДанных.Количество();
				Если КолМас>1 Тогда
					Для СчМас=0 По КолМас-1 Цикл
						Если СтрокиДанных[КолМас-1-СчМас].РаспределеноШтук=0 Тогда
							СтрокиДанных.Удалить(КолМас-1-СчМас);
							Если СтрокиДанных.Количество()=1 Тогда
								Прервать;
							КонецЕсли; 
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
				
				
				Если СтрокиДанных.Количество() > 0 Тогда
					СтрокаДоб = СтрокиДанных[0];
				Иначе
					
					СтрокиДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("ТорговаяТочка, НоменклатураА", ТТ, Товар));
					КолМас=СтрокиДанных.Количество();
					Если КолМас>1 Тогда
						Для СчМас=0 По КолМас-1 Цикл
							Если СтрокиДанных[КолМас-1-СчМас].РаспределеноШтук=0 Тогда
								СтрокиДанных.Удалить(КолМас-1-СчМас);
								Если СтрокиДанных.Количество()=1 Тогда
									Прервать;
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
					КонецЕсли;
			
					Если СтрокиДанных.Количество() > 0 Тогда
						СтрокаДоб = СтрокиДанных[0];
					Иначе
						rs.MoveNext();
                    	Продолжить;
						СтрокаДоб = ТаблицаДанных.Добавить();
						СтрокаДоб.Номенклатура = Товар;
						СтрокаДоб.ТорговаяТочка = ТТ;
						СтрокиПорядокОбеспечения = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаДоб.ТорговаяТочка, СтрокаДоб.Номенклатура));
						Если СтрокиПорядокОбеспечения.Количество() > 0 Тогда
							СтрокаДоб.Склад = СтрокиПорядокОбеспечения[0].Расчетчик;
						КонецЕсли;
						//СтрокиТовАссортимент = ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаДоб.ТорговаяТочка, СтрокаДоб.Номенклатура));
						//Если СтрокиТовАссортимент.Количество() > 0 Тогда
						//	СтрокаДоб.Характеристика = СтрокиТовАссортимент[0].Характеристика;
						//КонецЕсли;
					КонецЕсли;
					
				КонецЕсли; 
					
					
							
				КолвоВКоробке = 0;
				СтрокиВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Склад, Характеристика", СтрокаДоб.Склад, СтрокаДоб.Характеристика));
				Если СтрокиВКоробке.Количество() > 0 Тогда
					КолвоВКоробке = СтрокиВКоробке[0].Количество;
				Иначе
					СтрокаХар = ТабВКоробкеПоХарактеристике.Найти(СтрокаДоб.Характеристика, "Характеристика");
					Если СтрокаХар <> Неопределено Тогда
						КолвоВКоробке = СтрокаХар.Значение;
					КонецЕсли;	
				КонецЕсли;
				
				Если КолвоВКоробке=0 Тогда
					СтрокиВКоробке1 = ТабКолвоВКоробкеТекМомент.НайтиСтроки(Новый Структура("Склад, Характеристика", СтрокаДоб.Склад, СтрокаДоб.Характеристика));
					Если СтрокиВКоробке1.Количество() > 0 Тогда
						КолвоВКоробке = СтрокиВКоробке1[0].Количество;
					КонецЕсли; 
				КонецЕсли;
				
				Если КолвоВКоробке=0 Тогда
					СтрокиВКоробке2 = ТабКолвоВКоробкеПоДням.НайтиСтроки(Новый Структура("Склад, Характеристика", СтрокаДоб.Склад, СтрокаДоб.Характеристика));
					Если СтрокиВКоробке2.Количество() > 0 Тогда
						КолвоВКоробке = СтрокиВКоробке2[0].Количество;
					КонецЕсли; 
				КонецЕсли;
				
				
				Если КолвоВКоробке=0 Тогда
					Кол123=0;
				КонецЕсли; 
				
				СтрокаДоб.ПолучилаТТШтук = Rs.Fields("post").Value;
				Если СтрокаДоб.ПолучилаТТШтук = 0 Тогда
					СтрокаДоб.ПолучилаТТКоробок = 0;
				Иначе
					СтрокаДоб.ПолучилаТТКоробок = ?(ЗначениеЗаполнено(КолвоВКоробке), Окр(СтрокаДоб.ПолучилаТТШтук / КолвоВКоробке, 0), СтрокаДоб.ПолучилаТТШтук);
				КонецЕсли;
			//КонецЕсли; 

			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//ТабДляСортировкиМаршрутов = Новый ТаблицаЗначений();
	//ТабДляСортировкиМаршрутов.Колонки.Добавить("Маршрут");
	//ТабДляСортировкиМаршрутов.Колонки.Добавить("ПорядокСборки");
	////теперь самое главное - нужно проставить порядок отгрузки точек по маршрутам
	//Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
	//	СтрокиМаршрутыПоТочкам = ТабТТМаршрутов.НайтиСтроки(Новый Структура("СтруктурноеПодразделение, ТорговаяТочка", СтрокаДанных.Склад, СтрокаДанных.ТорговаяТочка));
	//	ТабДляСортировкиМаршрутов.Очистить();
	//	Для Каждого СтрокаМаршрут Из СтрокиМаршрутыПоТочкам Цикл
	//		ЗаполнитьЗначенияСвойств(ТабДляСортировкиМаршрутов.Добавить(), СтрокаМаршрут);
	//	КонецЦикла;	
	//	ТабДляСортировкиМаршрутов.Сортировать("ПорядокСборки");
	//	Для Каждого СтрокаМаршрут Из ТабДляСортировкиМаршрутов Цикл
	//		СтрокиВТоварахМаршрутов = ТабТоварыМаршрутов.НайтиСтроки(Новый Структура("Маршрут, Номенклатура", СтрокаМаршрут.Маршрут, СтрокаДанных.Номенклатура));
	//		Если СтрокиВТоварахМаршрутов.Количество() > 0 Тогда
	//			СтрокаДанных.ПорядокСборки = СтрокаМаршрут.ПорядокСборки;
	//			СтрокаДанных.Маршрут = СтрокаМаршрут.Маршрут;
	//			Прервать;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЦикла;
	
	ТаблицаДанных.Сортировать("Склад, Номенклатура, ПорядокСборки", Новый СравнениеЗначений());
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		//СтрокиОстаток = ТабОстатки.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Номенклатура, Характеристика", СтрокаДанных.Склад, СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика));
		//Если СтрокиОстаток.Количество() > 0 Тогда
		//	СтрокаОстаток = СтрокиОстаток[0];
		//Иначе
		//	СтрокаОстаток = ТабОстатки.Добавить();
		//	СтрокаОстаток.СтруктурнаяЕдиница = СтрокаДанных.Склад;
		//	СтрокаОстаток.Номенклатура = СтрокаДанных.Номенклатура;
		//	СтрокаОстаток.Характеристика = СтрокаДанных.Характеристика;
		//	СтрокаОстаток.КоличествоОстаток = 0;
		//КонецЕсли;
		//Если СтрокаДанных.ПолучилаТТШтук > 0 Тогда
		//	СтрокаОстаток.КоличествоОстаток = Макс(0, СтрокаОстаток.КоличествоОстаток - СтрокаДанных.ПолучилаТТШтук);
		//КонецЕсли;	
		//СтрокаДанных.Остаток = СтрокаОстаток.КоличествоОстаток;
		Если СтрокаДанных.РаспределеноШтук <> СтрокаДанных.ПолучилаТТШтук Тогда
			//Если СтрокаОстаток.КоличествоОстаток <= 0 Тогда
				СтрокаДанных.НехваткаШтук = СтрокаДанных.РаспределеноШтук - СтрокаДанных.ПолучилаТТШтук;
				Если НЕ ЗначениеЗаполнено(СтрокаДанных.Склад)
					И НЕ ЗначениеЗаполнено(СтрокаДанных.ПолучилаТТШтук) Тогда
					СтрокаДанных.НехваткаШтук = 0;
				КонецЕсли;		
				КолвоВКоробке = 0;
				СтрокиВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Склад, Характеристика", СтрокаДанных.Склад, СтрокаДанных.Характеристика));
				Если СтрокиВКоробке.Количество() > 0 Тогда
					КолвоВКоробке = СтрокиВКоробке[0].Количество;
				Иначе
					СтрокаХар = ТабВКоробкеПоХарактеристике.Найти(СтрокаДанных.Характеристика, "Характеристика");
					Если СтрокаХар <> Неопределено Тогда
						КолвоВКоробке = СтрокаХар.Значение;
					КонецЕсли;	
				КонецЕсли;
				Если СтрокаДанных.НехваткаШтук = 0 Тогда
					СтрокаДанных.НехваткаКоробок = 0;
				Иначе
					СтрокаДанных.НехваткаКоробок = ?(ЗначениеЗаполнено(КолвоВКоробке), Окр(СтрокаДанных.НехваткаШтук / КолвоВКоробке, 0,РежимОкругления.Окр15как10), СтрокаДанных.НехваткаШтук);
					СтрокаДанных.НехваткаКоробок =?(СтрокаДанных.НехваткаКоробок<0,-СтрокаДанных.НехваткаКоробок,СтрокаДанных.НехваткаКоробок);
				КонецЕсли;
			//КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	//Если СворачиватьДанные Тогда
		//ТаблицаДанных.Свернуть("Склад", "РаспределеноКоробок, РаспределеноШтук, ОтгруженоКоробок, ОтгруженоШтук, НехваткаКоробок, НехваткаШтук, ПолучилаТТКоробок, ПолучилаТТШтук");
	//КонецЕсли;	
	//ТаблицаДанных.Колонки.Добавить("КоличествоОтгрузок",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	//Для каждого Стр Из  Цикл
	//
	//	
	//
	//КонецЦикла; 
	ТаблицаДанных.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.ЗаполнитьЗначения(ДатаОтчета, "Дата");
	
	//Кол=ТаблицаДанных.Количество()-1;
	//Для Сч=0 По Кол Цикл
	//	Если Не ЗначениеЗаполнено(ТаблицаДанных[Кол-Сч].Расходник) Тогда
	//		 ТаблицаДанных.Удалить(Кол-Сч);
	//	КонецЕсли;
	//КонецЦикла;
	//Кол=ТаблицаДанных.Количество()-1;
	//Если ЗначениеЗаполнено(ТипТТ) Тогда
	//	Для Сч=0 По Кол Цикл
	//		Если Не ТипТТ=ТаблицаДанных[Кол-Сч].ТорговаяТочка.ТипРозничнойТочки Тогда              
	//			 ТаблицаДанных.Удалить(Кол-Сч);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли; 
	//Кол=ТаблицаДанных.Количество()-1;
	//Если ЗначениеЗаполнено(ПодразделениеОтбор) Тогда
	//	Для Сч=0 По Кол Цикл
	//		Если Не ПодразделениеОтбор=ТаблицаДанных[Кол-Сч].Склад Тогда              
	//			 ТаблицаДанных.Удалить(Кол-Сч);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	
	//МассивНаим = Новый Массив();
	//МассивНаим.Добавить("Бахча");
	//МассивНаим.Добавить("Прямая поставка на ВВ");
	//МассивНаим.Добавить("Склад рекл. материалы Кавказский");
	//ЗапросКешСкладыИсключить = Новый Запрос();
	//ЗапросКешСкладыИсключить.УстановитьПараметр("Склады", МассивНаим);
	//ЗапросКешСкладыИсключить.Текст = "ВЫБРАТЬ
	//								 |	Склады.Ссылка
	//								 |ИЗ
	//								 |	Справочник.Склады КАК Склады
	//								 |ГДЕ
	//								 |	Склады.Наименование В (&Склады)";
	//								 
	//МассивСкладыИсключить = ЗапросКешСкладыИсключить.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	//								 
	//Кол=ТаблицаДанных.Количество()-1;								 
	//Для Сч=0 По Кол Цикл
	//	Если МассивСкладыИсключить.Найти(ТаблицаДанных[Кол-Сч].ВиртСклад) <> Неопределено Тогда              
	//		ТаблицаДанных.Удалить(Кол-Сч);
	//		Продолжить;
	//	КонецЕсли;
	//	 
	//	Если Не ЗначениеЗаполнено(ТаблицаДанных[Кол-Сч].Расходник) Тогда
	//		ТаблицаДанных.Удалить(Кол-Сч);
	//		Продолжить;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ТипТТ) Тогда
	//		Если Не ТипТТ=ТаблицаДанных[Кол-Сч].ТорговаяТочка.ТипРозничнойТочки Тогда              
	//			ТаблицаДанных.Удалить(Кол-Сч);
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли; 
	//	Если ЗначениеЗаполнено(ПодразделениеОтбор) Тогда
	//		Если Не ПодразделениеОтбор=ТаблицаДанных[Кол-Сч].Склад Тогда              
	//			ТаблицаДанных.Удалить(Кол-Сч);
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	ТаблицаДанных.Колонки.Удалить("НоменклатураА");
	Возврат ТаблицаДанных;
	
КонецФункции	
