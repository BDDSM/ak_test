
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекстЗапроса="ВЫБРАТЬ
	             |	ПользователиСПравомАкцептаОплат.Пользователь КАК Получатель,
	             |	ИСТИНА КАК Пометка,
	             |	МАКСИМУМ(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100))) КАК Адрес
	             |ИЗ
	             |	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	             |		ПО (ПользователиСПравомАкцептаОплат.Пользователь = КонтактнаяИнформация.Объект
	             |				ИЛИ ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо = КонтактнаяИнформация.Объект)
	             |			И (КонтактнаяИнформация.Тип = &ТипКИ_Емаил)
	             |ГДЕ
	             |	ПользователиСПравомАкцептаОплат.Активен
	             |	И НЕ ПользователиСПравомАкцептаОплат.ПометкаУдаления
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПользователиСПравомАкцептаОплат.Пользователь
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПользователиСПравомАкцептаОплат.Пользователь.Наименование";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипКИ_Емаил",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ТЗ Цикл
		Если СокрЛП(Стр.Адрес)="" Тогда
			Стр.Пометка = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ТЗ,"ТабПолучателей");
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьОтчетНаСервере()
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	ДокументЗаявкаНаУслугиМатериалы.Ссылка КАК Заявка,
	             |	ВЫБОР
	             |		КОГДА ОжидающиеПодтверждения.Ссылка ЕСТЬ NULL
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК ОжидаетПодтверждения,
	             |	ВЫБОР
	             |		КОГДА ОжидающиеОплату.Заявка ЕСТЬ NULL
	             |				И ДокументЗаявкаНаУслугиМатериалы.Проведен
	             |				И ДокументЗаявкаНаУслугиМатериалы.СуммаДокумента > 0
	             |				И ВЫБОР
	             |					КОГДА ОжидающиеАкцепта.Ссылка ЕСТЬ NULL
	             |						ТОГДА ИСТИНА
	             |					ИНАЧЕ ЛОЖЬ
	             |				КОНЕЦ
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК Оплачен,
	             |	ВЫБОР
	             |		КОГДА ОжидающиеАкцепта.Ссылка ЕСТЬ NULL
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК ОжидаетАкцепт,
	             |	ОжидающиеОплату.СуммаОстаток КАК КОплате,
	             |	ОжидающиеОплату.УИН_СтрокиОплат,
	             |	ИСТИНА КАК Акцептована
	             |ПОМЕСТИТЬ ЗаявкиВКалендаре
	             |ИЗ
	             |	Документ.ЗаявкаНаУслугиМатериалы КАК ДокументЗаявкаНаУслугиМатериалы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			ЗаявкаНаУслугиМатериалыУслуги.Ссылка КАК Ссылка
	             |		ИЗ
	             |			Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	             |		ГДЕ
	             |			ЗаявкаНаУслугиМатериалыУслуги.Ссылка.Проведен
	             |			И ЗаявкаНаУслугиМатериалыУслуги.Сумма > 0
	             |			И ЗаявкаНаУслугиМатериалыУслуги.Подтверждено = ЛОЖЬ
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			ЗаявкаНаУслугиМатериалыУслуги.Ссылка) КАК ОжидающиеПодтверждения
	             |		ПО ДокументЗаявкаНаУслугиМатериалы.Ссылка = ОжидающиеПодтверждения.Ссылка
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка КАК Заявка,
	             |			РасчетыПоЗаявкамНаУслугиМатериалыОстатки.СуммаОстаток КАК СуммаОстаток,
	             |			РасчетыПоЗаявкамНаУслугиМатериалыОстатки.УИН_СтрокиОплат КАК УИН_СтрокиОплат
	             |		ИЗ
	             |			РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Остатки КАК РасчетыПоЗаявкамНаУслугиМатериалыОстатки
	             |		ГДЕ
	             |			РасчетыПоЗаявкамНаУслугиМатериалыОстатки.СуммаОстаток > 0
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка,
	             |			РасчетыПоЗаявкамНаУслугиМатериалыОстатки.СуммаОстаток,
	             |			РасчетыПоЗаявкамНаУслугиМатериалыОстатки.УИН_СтрокиОплат) КАК ОжидающиеОплату
	             |		ПО ДокументЗаявкаНаУслугиМатериалы.Ссылка = ОжидающиеОплату.Заявка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			ЗаявкаНаУслугиМатериалыУслуги.Ссылка КАК Ссылка
	             |		ИЗ
	             |			Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	             |		ГДЕ
	             |			ЗаявкаНаУслугиМатериалыУслуги.Ссылка.Проведен
	             |			И ЗаявкаНаУслугиМатериалыУслуги.Акцептована = ЛОЖЬ
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			ЗаявкаНаУслугиМатериалыУслуги.Ссылка) КАК ОжидающиеАкцепта
	             |		ПО ДокументЗаявкаНаУслугиМатериалы.Ссылка = ОжидающиеАкцепта.Ссылка
	             |ГДЕ
	             |	ДокументЗаявкаНаУслугиМатериалы.ВидОперации В(&ВидыОперацийЗаявок)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ДокументЗаявкаНаУслугиМатериалы.Ссылка,
	             |	ВЫБОР
	             |		КОГДА ОжидающиеПодтверждения.Ссылка ЕСТЬ NULL
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ,
	             |	ЛОЖЬ,
	             |	ВЫБОР
	             |		КОГДА ОжидающиеАкцепта.Ссылка ЕСТЬ NULL
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ,
	             |	ЗаявкаНаУслугиМатериалыОплата.СуммаОплаты,
	             |	ЗаявкаНаУслугиМатериалыОплата.УИН_Строки,
	             |	ЛОЖЬ
	             |ИЗ
	             |	Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы КАК ДокументЗаявкаНаУслугиМатериалы
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				ЗаявкаНаУслугиМатериалыУслуги.Ссылка КАК Ссылка
	             |			ИЗ
	             |				Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	             |			ГДЕ
	             |				ЗаявкаНаУслугиМатериалыУслуги.Ссылка.Проведен
	             |				И ЗаявкаНаУслугиМатериалыУслуги.Сумма > 0
	             |				И ЗаявкаНаУслугиМатериалыУслуги.Подтверждено = ЛОЖЬ
	             |			
	             |			СГРУППИРОВАТЬ ПО
	             |				ЗаявкаНаУслугиМатериалыУслуги.Ссылка) КАК ОжидающиеПодтверждения
	             |			ПО ДокументЗаявкаНаУслугиМатериалы.Ссылка = ОжидающиеПодтверждения.Ссылка
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				ЗаявкаНаУслугиМатериалыУслуги.Ссылка КАК Ссылка
	             |			ИЗ
	             |				Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	             |			ГДЕ
	             |				ЗаявкаНаУслугиМатериалыУслуги.Ссылка.Проведен
	             |				И ЗаявкаНаУслугиМатериалыУслуги.Акцептована = ЛОЖЬ
	             |			
	             |			СГРУППИРОВАТЬ ПО
	             |				ЗаявкаНаУслугиМатериалыУслуги.Ссылка) КАК ОжидающиеАкцепта
	             |			ПО ДокументЗаявкаНаУслугиМатериалы.Ссылка = ОжидающиеАкцепта.Ссылка
	             |		ПО ЗаявкаНаУслугиМатериалыОплата.Ссылка = ДокументЗаявкаНаУслугиМатериалы.Ссылка
	             |ГДЕ
	             |	ДокументЗаявкаНаУслугиМатериалы.ВидОперации В(&ВидыОперацийЗаявок)
	             |	И ДокументЗаявкаНаУслугиМатериалы.Проведен
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептовал <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	             |			ТОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептовал
	             |		КОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептант <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	             |			ТОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептант
	             |		ИНАЧЕ ЗаявкиВКалендаре.Заявка.Акцептант
	             |	КОНЕЦ КАК Акцептант
	             |ИЗ
	             |	ЗаявкиВКалендаре КАК ЗаявкиВКалендаре
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	             |		ПО ЗаявкиВКалендаре.Заявка = ЗаявкаНаУслугиМатериалыУслуги.Ссылка
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	             |		ПО ЗаявкиВКалендаре.Заявка = ЗаявкаНаУслугиМатериалыУслуги.Ссылка
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА МЕСЯЦ(&КОплатеНаДату) >= 5
	             |				ТОГДА ЗаявкаНаУслугиМатериалыОплата.ДатаПлатежа >= НАЧАЛОПЕРИОДА(&КОплатеНаДату, ГОД)
	             |			ИНАЧЕ ЗаявкаНаУслугиМатериалыОплата.ДатаПлатежа >= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&КОплатеНаДату, ГОД, -1), ГОД)
	             |		КОНЕЦ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептовал <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	             |			ТОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептовал
	             |		КОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептант <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	             |			ТОГДА ЗаявкаНаУслугиМатериалыУслуги.Акцептант
	             |		ИНАЧЕ ЗаявкиВКалендаре.Заявка.Акцептант
	             |	КОНЕЦ";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КОплатеНаДату",НачалоДня(ТекущаяДата()));
	
	ВидыОперацийЗаявок = Новый Массив;
	ВидыОперацийЗаявок.Добавить(Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику);
	ВидыОперацийЗаявок.Добавить(Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ВидыОперацийЗаявок",ВидыОперацийЗаявок);
	КэшАкцептантовКомуЕстьИнфа = Запрос.Выполнить().Выгрузить();
	СКД=Отчеты.ЗаявкиКОплатеИОплатаЗаявокЗаПериод.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для каждого СтрПолучатель Из ТабПолучателей Цикл
	
		Если СтрПолучатель.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;	
		
		Если КэшАкцептантовКомуЕстьИнфа.Найти(СтрПолучатель.Получатель) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеРасшифровкиРассылки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		КомпоновщикМакетаРассылки = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		СКД.Параметры.ОплаченныеЗаявкиСДаты.Значение = НачалоМесяца(ТекущаяДата());
		СКД.Параметры.КОплатеНаДату.Значение = НачалоДня(ТекущаяДата());
		НастройкиСКД = СКД.ВариантыНастроек["Вариант2"].Настройки;
		Для каждого Эл Из НастройкиСКД.Отбор.Элементы Цикл
			Если СокрЛП(Эл.ЛевоеЗначение) = "Акцептант" Тогда
				Эл.Использование = Истина;
				Эл.ПравоеЗначение = СтрПолучатель.Получатель;
			КонецЕсли;
		КонецЦикла;	
		
		Для каждого КолонкаНастроек Из НастройкиСКД.Структура[0].Колонки Цикл
		
			Если КолонкаНастроек.ПредставлениеПользовательскойНастройки = "По месяцам" Тогда
				КолонкаНастроек.Использование = Ложь;
			ИначеЕсли КолонкаНастроек.ПредставлениеПользовательскойНастройки = "По кварталам" Тогда
				КолонкаНастроек.Использование = Ложь;	
			ИначеЕсли КолонкаНастроек.ПредставлениеПользовательскойНастройки = "По неделям" Тогда
				КолонкаНастроек.Использование = Истина;	
			КонецЕсли;	
		
		КонецЦикла; 
		
		
		
		МакетКомпоновкиРассылки = КомпоновщикМакетаРассылки.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровкиРассылки);
		
		ПроцессорКомпоновкиДанныхРассылки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанныхРассылки.Инициализировать(МакетКомпоновкиРассылки, ,ДанныеРасшифровкиРассылки);
		
		ТабДок=Новый ТабличныйДокумент;
		
		ПроцессорВыводаРассылки = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВыводаРассылки.УстановитьДокумент(ТабДок);
		ПроцессорВыводаРассылки.Вывести(ПроцессорКомпоновкиДанныхРассылки);
		
		ИмяФайла=Новый УникальныйИдентификатор;
		ИмяФайла=КаталогВременныхФайлов()+ИмяФайла+".xls";
		
		ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
		ТабДок.АвтоМасштаб = Истина;
		
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		//Отправка письма
		Адрес = СокрЛП(СтрПолучатель.Адрес);
		СписокКому = Новый СписокЗначений;
		Если Адрес<>"" Тогда
			СпАдресов=Новый СписокЗначений;
			МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
			Для каждого Эл Из МассивАдресов Цикл
				Если ЗначениеЗаполнено(Эл) Тогда
					СписокКому.Добавить(СокрЛП(Эл));
				КонецЕсли; 
			КонецЦикла; 

		Иначе
			Сообщить("Письмо не отправлено! Не заполнен адрес электронной почты "+СтрПолучатель.Получатель);
			Продолжить;
		КонецЕсли;
		
			
		//СписокКому.Добавить(ВыборкаДетальныеЗаписи.Представление);
		//СписокКому.Добавить("retail.e@vkusvill.ru");
		СписокКому.Добавить("pozm@automacon.ru");
		//СписокКому.Добавить("buh9@izbenka.msk.ru");
		
		
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Почта.Подключиться(Профиль);
		Письмо.Тема = "Заявки к оплате на: "+Формат(ТекущаяДата(),"ДЛФ=DDT");
		Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		Для Каждого ПолучательЭлемент Из СписокКому Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = ПолучательЭлемент.Значение;
		КонецЦикла;	
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = "Во вложении находится информация о готовности к оплате заявок на услуги/материалы. Необходимо проверить динамику платежей по торговым точкам";
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		
		Письмо.Вложения.Добавить(ИмяФайла);
		
		
		Почта.Послать(Письмо);
		
		Почта.Отключиться();
		
		Сообщить("Отправлено письмо "+СтрПолучатель.Получатель);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчет(Команда)
	ОтправитьОтчетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	Для Каждого Стр Из ТабПолучателей Цикл
		Стр.Пометка = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого Стр Из ТабПолучателей Цикл
		Стр.Пометка = Ложь;
	КонецЦикла;	
КонецПроцедуры


&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
		
КонецПроцедуры


&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	Если НаименованиеТекущегоВарианта = "Для рассылки акцептантам" ИЛИ НаименованиеТекущегоВарианта = "Для рассылки управляющим и руководителям" Тогда
		
		СписокСтатей = ПолучитьСписокСтатейДР();
		Для каждого Стр Из Настройки.Отбор.Элементы Цикл
		
			Если Стр.Представление = "ГруппаИ" Тогда
				Стр.Использование = Истина;
				СтрИ = Стр.Элементы[0];
				СтрИ.ПравоеЗначение = СписокСтатей.Включаемые;
				СтрИ.Использование = Истина;
				СтрИ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				СтрИ = Стр.Элементы[1];
				СтрИ.ПравоеЗначение = СписокСтатей.Исключаемые;
				СтрИ.Использование = Истина;
				СтрИ.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;	
			КонецЕсли;	
			//Если Строка(Стр.ЛевоеЗначение)         = "СтатьяДР" Тогда
			//	Стр.ПравоеЗначение = СписокСтатей;
			//	Стр.Использование = Истина;
			//	Стр.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			//КонецЕсли;	
		
		КонецЦикла; 
	ИначеЕсли НаименованиеТекущегоВарианта = "Платежи по заявкам (Управление развития)" Тогда
		
		
		Для каждого Стр Из Настройки.Отбор.Элементы Цикл
		
			Если Строка(Стр.ЛевоеЗначение)         = "ЦФО" Тогда
				Стр.ПравоеЗначение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
				Стр.Использование = Истина;
				Стр.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;	
		
		КонецЦикла; 	
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСтатейДР()
	Возврат Отчеты.ЗаявкиКОплатеИОплатаЗаявокЗаПериод.ПолучитьСписокСтатейДР();
КонецФункции	

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	//ПередЗагрузкойВариантаНаСервере(Отчет.КомпоновщикНастроек.Настройки);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(Настройки)
	//Вставить содержимое обработчика
КонецПроцедуры
