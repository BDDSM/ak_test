
Процедура УстановитьЭлементыОтбораРекурсивно(ЭлементыОтбора, СтруктураПолей, СоответствиеПоПредставлению)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			УстановитьЭлементыОтбораРекурсивно(ЭлементОтбора.Элементы, СтруктураПолей, СоответствиеПоПредставлению);
			
		Иначе
			
			ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтруктураПолей.Свойство(ИмяПоля) Тогда
				
				ЭлементОтбора.Использование = Истина;
				Если ИмяПоля = "Магазин" И НЕ ЗначениеЗаполнено(Магазин) Тогда
					МассивМагазинов = ПолучитьМассивМагазиновПоПользователю();
					Если МассивМагазинов.Количество() > 0 Тогда
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						ЭлементОтбора.ПравоеЗначение = МассивМагазинов;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ЭтотОбъект[ИмяПоля];
				
			ИначеЕсли НЕ ПустаяСтрока(ЭлементОтбора.Представление) Тогда
				ИмяПоля = СоответствиеПоПредставлению.Получить(ЭлементОтбора.Представление);
				ЭлементОтбора.Использование = ?(ИмяПоля = Неопределено, Ложь, ЭтотОбъект[ИмяПоля]);
				
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Ложь;
	
	МассивМагазинов = ПолучитьМассивМагазиновПоПользователю();
	
	// устанавливаем элементы отбора из реквизитов текущего отчёта по соответствию полей или представлений
	СтруктураПолей = Новый Структура("Активные,Закрытые,Неотработанные,Отработанные", "Активные задания", "Закрытые задания", "Не отработанные", "Отработанные");
	
	МагазинЗаполнен = ЗначениеЗаполнено(Магазин);
	Если МагазинЗаполнен ИЛИ МассивМагазинов.Количество() > 0 Тогда
		СтруктураПолей.Вставить("Магазин", "Магазин");
	КонецЕсли;
	
	СоответствиеПоПредставлению = Новый Соответствие;
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		СоответствиеПоПредставлению.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	ТЗнОстаткиМагазиновПоТовару = Новый ТаблицаЗначений;
	ТЗнОстаткиМагазиновПоТовару.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТЗнОстаткиМагазиновПоТовару.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗнОстаткиМагазиновПоТовару.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число"));
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ОстаткиМагазиновПоТовару", ТЗнОстаткиМагазиновПоТовару);
	
	
	// получаем остатки по магазинам
	Если ПолучатьОстаткиПоМагазинам Тогда
		
		СКД = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		ВыбранныйВариант = СКД.ВариантыНастроек.Найти("ПоНоменклатуре");
		КомпоновщикНастроекКД.ЗагрузитьНастройки(ВыбранныйВариант.Настройки);
		
		НастройкиКомпоновщика = КомпоновщикНастроекКД.Настройки;
		НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("Дата1", НачалоДня(Дата1));
		НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("Дата2", ?(Дата2 = Дата(1,1,1), Дата2, КонецДня(Дата2)));
		
		НашаСтруктураКомпоновщика = НастройкиКомпоновщика.Структура[0];
		НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРесурсов", РасположениеРесурсовКомпоновкиДанных.Горизонтально);
		НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов", АвтоПозицияРесурсовКомпоновкиДанных.ПослеВсехПолей);
		НашаСтруктураКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		//СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы
		УстановитьЭлементыОтбораРекурсивно(НастройкиКомпоновщика.Отбор.Элементы, СтруктураПолей, СоответствиеПоПредставлению);
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроекКД.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;	
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,, Истина);
		
		// подготовим таблицу и процессор вывода результата СКД в таблицу
		ТаблицаОстатков = Новый ТаблицаЗначений;
		ПроцессорВыводаВТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
		ПроцессорВыводаВТЗ.УстановитьОбъект(ТаблицаОстатков);
		ПроцессорВыводаВТЗ.Вывести(ПроцессорКомпоновкиДанных);
		
		СписокНоменклатурыДляОтбора = Новый СписокЗначений;
		
		МассивНоменклатуры = ТаблицаОстатков.ВыгрузитьКолонку("Номенклатура");
		Для Каждого ТекНоменклатура Из МассивНоменклатуры Цикл
			Если ЗначениеЗаполнено(ТекНоменклатура) И СписокНоменклатурыДляОтбора.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
				СписокНоменклатурыДляОтбора.Добавить(ТекНоменклатура);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокНоменклатурыДляОтбора.Количество() > 0 Тогда
			СписокПоставщиковДляОтбора = Новый СписокЗначений;
			// со списком поставщиков не работает, может, в тестовой?
			//Если ТекХарактеристика <> Неопределено Тогда
			//	СписокПоставщиковДляОтбора = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Производитель");
			//ИначеЕсли ЗначениеЗаполнено(Объект.Поставщик) Тогда
			//	СписокПоставщиковДляОтбора.Добавить(Объект.Поставщик);
			//КонецЕсли;
			
			ОбработкаПочтоваяРассылкаОбъект = Обработки.ПочтоваяРассылка.Создать();
			ТЗнОстаткиМагазиновПоТовару = ОбработкаПочтоваяРассылкаОбъект.ПостроитьТЗОстатков(СписокНоменклатурыДляОтбора, СписокПоставщиковДляОтбора);
			ОбработкаПочтоваяРассылкаОбъект = Неопределено;
			
			ТЗнОстаткиМагазиновПоТовару.Колонки["ТТ"].Имя = "Магазин";
			ТЗнОстаткиМагазиновПоТовару.Колонки["ОстатокНаТочке"].Имя = "Остаток";
			ТЗнОстаткиМагазиновПоТовару.Свернуть("Магазин,Номенклатура", "Остаток");
			ВнешниеНаборыДанных.Вставить("ОстаткиМагазиновПоТовару", ТЗнОстаткиМагазиновПоТовару);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Формирование отчёта
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата1", НачалоДня(Дата1));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата2", ?(Дата2 = Дата(1,1,1), Дата2, КонецДня(Дата2)));
		
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Если Настройки.Структура.Количество() > 1 Тогда
		Настройки.Структура[0].Использование = НЕ МагазинЗаполнен;
		Настройки.Структура[1].Использование = МагазинЗаполнен;
		
		ВыбранныеПоля = Неопределено;
		Если Настройки.Структура[0].Использование Тогда
			ВыбранныеПоля = Настройки.Структура[0].Структура[0].Выбор.Элементы;
		ИначеЕсли Настройки.Структура[1].Использование Тогда
			ВыбранныеПоля = Настройки.Структура[1].Выбор.Элементы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбранныеПоля) Тогда
			ПолеОстаток = Новый ПолеКомпоновкиДанных("Остаток");
			Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
				Если ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
					Продолжить;
				ИначеЕсли ВыбранноеПоле.Поле = ПолеОстаток Тогда
					ВыбранноеПоле.Использование = ПолучатьОстаткиПоМагазинам;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Если МагазинЗаполнен Тогда
		//	// не выводим магазин
		//	МассивДляВывода = Новый Массив;
		//	МассивДляВывода.Добавить(Новый ПолеКомпоновкиДанных("Ссылка"));
		//	МассивДляНеВывода = Новый Массив;
		//	МассивДляНеВывода.Добавить(Новый ПолеКомпоновкиДанных("Магазин"));
		//	МассивДляНеВывода.Добавить(Новый ПолеКомпоновкиДанных("ДокументОснование"));
		//	ЭлементыВыбора = Настройки.Структура[1].Выбор.Элементы;
		//	Для Каждого ЭлементВыбора Из ЭлементыВыбора Цикл
		//		Если ТипЗнч(ЭлементВыбора) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		//			Продолжить;
		//		ИначеЕсли МассивДляНеВывода.Найти(ЭлементВыбора.Поле) <> Неопределено Тогда
		//			ЭлементВыбора.Использование = Ложь;
		//		ИначеЕсли МассивДляВывода.Найти(ЭлементВыбора.Поле) <> Неопределено Тогда
		//			ЭлементВыбора.Использование = Истина;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
	
	//СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы
	УстановитьЭлементыОтбораРекурсивно(Настройки.Отбор.Элементы, СтруктураПолей, СоответствиеПоПредставлению);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// Инициализируем процессор СКД
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	// Инициализируем процессор вывода
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьМассивМагазиновПоПользователю() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивМагазинов = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) КАК ТипРоли,
		|	""Помощник по рознице"" КАК ТипРолиСтр
		|ПОМЕСТИТЬ ТипыРолей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТипыРолейПользователя.Ссылка,
		|	""Управляющий по рознице""
		|ИЗ
		|	ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
		|ГДЕ
		|	ТипыРолейПользователя.Код = ""UpravlyayushchiiPoRoznice""
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы),
		|	""Помощник по рознице""
		//--- AK suvv
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.Объект КАК Магазин,
		|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли В
		|				(ВЫБРАТЬ
		|					ТипыРолей.ТипРоли
		|				ИЗ
		|					ТипыРолей)) КАК СоответствиеОбъектРольСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СтруктурныеЕдиницы.Ссылка
		|ГДЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник
		|	И СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТочки");
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МассивМагазинов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Магазин");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивМагазинов;
	
КонецФункции
