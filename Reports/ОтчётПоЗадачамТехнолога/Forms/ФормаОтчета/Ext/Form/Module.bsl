
&НаСервере
Функция ЗаполнитьМагазиныПоПользователю()
	
	МассивМагазинов = РеквизитФормыВЗначение("Отчёт").ПолучитьМассивМагазиновПоПользователю();
	
	// если в отчёт заходит помощник со своего аккаунта, то выводим строго его магазины, магазины других помощников не должны выводится и быть видны
	Если МассивМагазинов.Количество() > 0 Тогда
		Элементы.Магазин.РежимВыбораИзСписка = Истина;
		Элементы.Магазин.СписокВыбора.ЗагрузитьЗначения(МассивМагазинов);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаполнитьМагазиныПоПользователю();
	Отчёт.Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	Элементы.Магазин.ТолькоПросмотр = (ПараметрыСеанса.НомерТочкиПоАйпи <> 999) И НЕ РольДоступна("ПродавецТолькоПросмотр");
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьЗначенияСвойств(Отчёт, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекМагазин = Отчёт.Магазин;
	Если ЗначениеЗаполнено(ТекМагазин) Тогда
		СписокВыбораМагазинов = Элементы.Магазин.СписокВыбора;
		Если СписокВыбораМагазинов.Количество() > 0 И СписокВыбораМагазинов.НайтиПоЗначению(ТекМагазин) = Неопределено Тогда
			Отчёт.Магазин = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Неотработанные И Параметры.СформироватьПриОткрытии Тогда
		Отчёт.Дата1 = Дата(1,1,1);
		Отчёт.Дата2 = Дата(1,1,1);
	Иначе
		Отчёт.Дата2 = КонецДня(ТекущаяДата());
		Отчёт.Дата1 = НачалоДня(Отчёт.Дата2 - 7*24*60*60);
	КонецЕсли;
	
	// устанавливаем по умолчанию
	Если (Отчёт.Активные ИЛИ Отчёт.Закрытые) = Ложь Тогда
		Отчёт.Активные = Истина;
	КонецЕсли;
	// формируется и так, без установки
	//Если (Отчёт.Неотработанные ИЛИ Отчёт.Отработанные) = Ложь Тогда
	//	Отчёт.Отработанные = Истина; Отчёт.Неотработанные = Истина;
	//КонецЕсли;

	// обновляем статус
	СтатусНачалоВыбора("", "", Ложь);
	
	Если Параметры.СформироватьПриОткрытии Тогда
		СкомпоноватьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПриОткрытии(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтруктураПараметров = ПолучитьЗначениеРасшифровки(ДанныеРасшифровки, Расшифровка, СтандартнаяОбработка);
	Если СтруктураПараметров.Свойство("Номенклатура") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ.МП_ЗадачаТехнолога.ФормаСписка", СтруктураПараметров);
	ИначеЕсли СтруктураПараметров.Свойство("Ключ") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ.МП_ЗадачаТехнолога.ФормаОбъекта", СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоляГруппировки(ЭлементыРасшифровки, ПозРасшифровки)
	
	Пока ПозРасшифровки > 0 Цикл
		Если ЭлементыРасшифровки[ПозРасшифровки].ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
			Возврат ЭлементыРасшифровки[ПозРасшифровки].ПолучитьПоля();
		КонецЕсли;
		ПозРасшифровки = ПозРасшифровки - 1; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРасшифровки(ДанныеРасшифровки, Расшифровка, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	
	КоллекцияРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементыРасшифровки = КоллекцияРасшифровки.Элементы;
	КоллекцияПолей = ЭлементыРасшифровки[Расшифровка].ПолучитьПоля();
	
	Если КоллекцияПолей.Количество() Тогда
		
		ИмяПоляРасшифровки = КоллекцияПолей[0].Поле;
		ЭтоМагазин = РольДоступна("Продавец") И НЕ РольДоступна("ПродавецТолькоПросмотр");
		
		Если ИмяПоляРасшифровки = "Номенклатура" ИЛИ Найти(ИмяПоляРасшифровки, "Количество") > 0 ИЛИ ЭтоМагазин Тогда
			
			КоллекцияПолейГруппировки = ПолучитьПоляГруппировки(ЭлементыРасшифровки, Число(Расшифровка));
			Если КоллекцияПолейГруппировки <> Неопределено Тогда 
				
				Если ИмяПоляРасшифровки = "Номенклатура" Тогда
					СтруктураПараметров.Вставить("Магазин", КоллекцияПолейГруппировки.Найти("Магазин").Значение);
					СтруктураПараметров.Вставить("Номенклатура", КоллекцияПолейГруппировки.Найти("Номенклатура").Значение);
					СтруктураПараметров.Вставить("ПоказатьВсеЗадачи", Истина);
					
				ИначеЕсли КоллекцияПолейГруппировки.Найти("Ссылка") = Неопределено Тогда
					СтандартнаяОбработка = Ложь;
					
				Иначе
					Если Найти(ИмяПоляРасшифровки, "Количество") > 0 Тогда
						СтруктураПараметров.Вставить("ОткрытьТоварныеОперации", Истина);
					КонецЕсли;
					СтруктураПараметров.Вставить("Ключ", КоллекцияПолейГруппировки.Найти("Ссылка").Значение);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СтруктураПолей = Новый Структура("Активные,Закрытые,Неотработанные,Отработанные", "Активные задания", "Закрытые задания", "Не отработанные", "Отработанные");
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		СписокВыбора.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение, Отчёт[КлючИЗначение.Ключ]);
	КонецЦикла;
	
	Если НЕ СтандартнаяОбработка ИЛИ СписокВыбора.ОтметитьЭлементы("Статус") Тогда
		СтатусСтр = "";
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Отчёт[ЭлементСписка.Значение] = ЭлементСписка.Пометка;
			СтатусСтр = СтатусСтр + ?(ЭлементСписка.Пометка, ", " + СтруктураПолей[ЭлементСписка.Значение], "");
		КонецЦикла;
		
		Если Лев(СтатусСтр, 2) = ", " Тогда СтатусСтр = Сред(СтатусСтр, 3); КонецЕсли;
		СтатусСтр = СтрЗаменить(СтатусСтр, ", Не отработанные, Отработанные", "");
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
