Процедура УправлениеДиалогом()

	Если Счет.Валютный Тогда
	
		ЭлементыФормы.ПоВалютам.Доступность = Истина;
	
	Иначе
	
		ЭлементыФормы.ПоВалютам.Доступность = Ложь;
	
	КонецЕсли; 

	Если Счет.Количественный Тогда
	
		ЭлементыФормы.ПоКоличеству.Доступность = Истина;
	
	Иначе
	
		ЭлементыФормы.ПоКоличеству.Доступность = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры // УправлениеДиалогом()

Процедура КнопкаОКНажатие(Элемент)
	Закрыть(Истина);
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура СчетПриИзменении(Элемент)
	ОбработкаВыбораСчета();
КонецПроцедуры

Процедура ПоСубсчетамПриИзменении(Элемент)
	 ПерезаполнитьНачальныеНастройки();
КонецПроцедуры

Процедура ПоВалютамПриИзменении(Элемент)
	 ПерезаполнитьНачальныеНастройки();
КонецПроцедуры

Процедура ПоКоличествуПриИзменении(Элемент)
	 ПерезаполнитьНачальныеНастройки();
КонецПроцедуры

Процедура ПерезаполнитьНачальныеНастройки()
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	ЗаполнитьНачальныеНастройки();
	ПостроительОтчета.УстановитьНастройки(Настройки);
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Связывание с данными колонок "Счет": тип определяется типом колонки у таблицы
	ЭлементыФормы.ПравилаВыводаИтогов.Колонки.Счет.Данные = "Счет";
	ЭлементыФормы.ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
	ЭлементыФормы.ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
	
	УправлениеДиалогом();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	УправлениеДиалогом();
КонецПроцедуры

// Обработка изменения счета 
//
// Параметры:
//	Нет.
//
Процедура ПриИзмененииСчета(ТабличноеПоле)
	Перем Счет;

	Если ТабличноеПоле.ТекущиеДанные  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущиеДанные)];

	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));

	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Очистить();
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = "";

	// Признак того, что счет найден способ развернуть счет
	НайденСпособРазворота = Ложь;

	Счет = РедактируемаяСтрока.Счет;
	Если ЗначениеЗаполнено(Счет) Тогда
		ВыборкаПоСчету = ПланыСчетов[Счет.Метаданные().Имя].Выбрать(Счет);
		Если ВыборкаПоСчету.Следующий() Тогда
			РедактируемаяСтрока.Субсчета = Истина;

			НайденСпособРазворота = Истина;
		КонецЕсли;

		Если Счет.ВидыСубконто.Количество() >0 Тогда

			Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

				НоваяСтрокаПоСубконто = РедактируемаяСтрока.РазворотПоСубконто.Добавить();
				НоваяСтрокаПоСубконто.Имя = "Субконто" + Строка(ВидСубконто.НомерСтроки);
				НоваяСтрокаПоСубконто.Представление = Строка(ВидСубконто.ВидСубконто);

				РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = РедактируемаяСтрока.ПредставлениеРазворотПоСубконто + ", " 
				+ Строка(ВидСубконто.ВидСубконто);

			КонецЦикла;

			РедактируемаяСтрока.ПредставлениеРазворотПоСубконто  = Сред(РедактируемаяСтрока.ПредставлениеРазворотПоСубконто, 3);

			НайденСпособРазворота = Истина;

		КонецЕсли;

		// Если у счета нет ни субсчетов, ни субконто, не дадим его выбрать.
		Если НЕ НайденСпособРазворота Тогда
			ВидНастройки = "итогов по кор.субсчетам и кор.субконто ";
			Предупреждение("Счет """ + Счет.Код + """ не имеет ни субсчетов, ни субконто." + Символы.ПС + "Настройка " + ВидНастройки + "не имеет смысла!", 30);
			РедактируемаяСтрока.Счет = Неопределено;
		КонецЕсли;

	КонецЕсли;

	
КонецПроцедуры // ПриИзмененииСчета()

// Обработка начала выбора разворота по субконто
Процедура НачалоВыбораРазворотаПоСубконто(Элемент, ТабличноеПоле)
    Перем Счет;
	
	Счет = ТабличноеПоле.ТекущиеДанные.Счет;
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Предупреждение("Не выбран счет!", 30);
		Возврат;
	КонецЕсли;
	
	СписокСубконто = Новый СписокЗначений;
	
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

		СписокСубконто.Добавить("Субконто" + Строка(ВидСубконто.НомерСтроки), Строка(ВидСубконто.ВидСубконто));

	КонецЦикла;

	// Данные этой строки должны быть отмечены
	Для Каждого Строка Из ТабличноеПоле.ТекущиеДанные.РазворотПоСубконто Цикл
		ЭлементСписка = СписокСубконто.НайтиПоЗначению(Строка.Имя);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;

	Форма = ПолучитьФорму("ФормаНастройкаПоСубконто", Элемент);

	// Передача параметров в форму
	Форма.Список = СписокСубконто;
	
	Форма.РежимВыбора = Истина;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры // НачалоВыбораРазворотаПоСубконто()

Процедура ПравилаВыводаИтоговНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораРазворотаПоСубконто(Элемент, ЭлементыФормы.ПравилаВыводаИтогов);
	
КонецПроцедуры // ПравилаВыводаИтоговДополнительныеПоляНачалоВыбора()

Процедура ПравилаВыводаИтоговОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработкаВыбораРазворотаПоСубконто(ВыбранноеЗначение, ЭлементыФормы.ПравилаВыводаИтогов);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПравилаВыводаИтоговСчетПриИзменении(Элемент)
	
	ПриИзмененииСчета(ЭлементыФормы.ПравилаВыводаИтогов);
	
КонецПроцедуры

Процедура ПравилаВыводаИтоговПредставлениеРазворотПоСубконтоОчистка(Элемент, СтандартнаяОбработка)
	
	ТабличноеПоле = ЭлементыФормы.ПравилаВыводаИтогов;
	
	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущиеДанные)];
	
	РедактируемаяСтрока.РазворотПоСубконто.Очистить();
	
КонецПроцедуры


// Процедура обрабатывает выбор показателей, группировок или фильтров из отдельного окна.
Процедура ОбработкаВыбораРазворотаПоСубконто(ВыбранноеЗначение,ТабличноеПоле)

	Если ТабличноеПоле.ТекущиеДанные  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущиеДанные)];

	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(100);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);


	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Очистить();
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = "";

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		Если Строка.Пометка Тогда
			НоваяСтрокаПоСубконто = РедактируемаяСтрока.РазворотПоСубконто.Добавить();
			
			НоваяСтрокаПоСубконто.Имя = Строка.Значение;
			НоваяСтрокаПоСубконто.Представление = Строка.Представление;
			
			РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = РедактируемаяСтрока.ПредставлениеРазворотПоСубконто + ", " 
			+ Строка.Представление;
		КонецЕсли;

	КонецЦикла;

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто  = Сред(РедактируемаяСтрока.ПредставлениеРазворотПоСубконто, 3);

КонецПроцедуры // ОбработкаВыбора()

Процедура ПриОткрытии()

	Если РегламентированнаяОтчетность.ИДКонфигурации() <> "БП" Тогда
		// Проверка ведения однофирменности
		УчетПоВсемОрганизациям = Истина;
	КонецЕсли;
	
    БухгалтерскиеОтчеты.ПоддержкаОднофирменностиДляФормыНастроекБухОтчетов(ЭтаФорма, УчетПоВсемОрганизациям);

КонецПроцедуры

Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаОтбора = ЭлементыФормы.Отбор.ТекущиеДанные;
	
	// Принятая в конфигурации обработка работает только для равенства/неравенства
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Равно
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
		ТипЗначенияПоля = СтрокаОтбора.ТипЗначения;
		НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля);
		
	КонецЕсли;
	
КонецПроцедуры
