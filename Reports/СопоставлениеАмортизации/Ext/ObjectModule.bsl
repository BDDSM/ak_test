
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;	
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
	
	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
	Попытка
		v82 = v82COMОбъект.Connect(СтрокаПодключения);
		ПодключениеУстановлено=Истина;
	Исключение
		ПодключениеУстановлено=Ложь;
		Сообщить("Не удалось подключиться к базе бухгалтерии!");
		Возврат;
	КонецПопытки;
	
	Запрос=v82.NewObject("Запрос");
	
	ЗапросДанныеФинансов = Новый Запрос;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	
	Для каждого Параметр из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если СокрЛП(Параметр.Параметр)="ПериодОтчета" Тогда
			Запрос.УстановитьПараметр("НачалоПериода",Параметр.Значение.ДатаНачала);
			Запрос.УстановитьПараметр("КонецПериода",КонецДня(Параметр.Значение.ДатаОкончания));
			
			ЗапросДанныеФинансов.УстановитьПараметр("НачалоПериода",Параметр.Значение.ДатаНачала);
			ЗапросДанныеФинансов.УстановитьПараметр("КонецПериода",КонецДня(Параметр.Значение.ДатаОкончания));					
				
		КонецЕсли;
		
	КонецЦикла;	
	
	ДанныеФин.Очистить();
	ДанныеБух.Очистить();

	МассивСчетов = Новый Массив;		
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.АмортизацияОсновныхСредств);	
	
	ЗапросДанныеФинансов.УстановитьПараметр("Счета", МассивСчетов);
	  
	ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ
	                             |	ФинансовыйОбороты.Счет,
	                             |	ПРЕДСТАВЛЕНИЕ(ФинансовыйОбороты.Организация) КАК Организация,
	                             |	ФинансовыйОбороты.Субконто1 КАК ОС,
	                             |	ОсновныеСредства.Код КАК Код,
	                             |	ОсновныеСредства.АК_ID_Buh КАК АК_ИД_Бух,
	                             |	ОсновныеСредства.ИнвентарныйНомер КАК ИнвентарныйНомер,
	                             |	ОсновныеСредства.ЗаводскойНомер КАК ЗаводскойНомер,
	                             |	ФинансовыйОбороты.СуммаОборотКт КАК СуммаАмортизации,
	                             |	ПринятыеКУчетуОССрезПоследних.СрокАмортизации КАК Срок
	                             |ИЗ
	                             |	РегистрБухгалтерии.Финансовый.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&Счета), , , , ) КАК ФинансовыйОбороты
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПринятыеКУчетуОС.СрезПоследних(&НачалоПериода, ) КАК ПринятыеКУчетуОССрезПоследних
	                             |		ПО ФинансовыйОбороты.Субконто1 = ПринятыеКУчетуОССрезПоследних.ОсновноеСредство
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	                             |		ПО ФинансовыйОбороты.Субконто1 = ОсновныеСредства.Ссылка";

	ДанныеФин.Загрузить(ЗапросДанныеФинансов.Выполнить().Выгрузить());
	
	Для Каждого Стр Из ДанныеФин Цикл
		Стр.ГУИД = Стр.ОС.УникальныйИдентификатор();
		Стр.ИнвентарныйНомер = СокрЛП(Стр.ИнвентарныйНомер);
		Стр.ЗаводскойНомер = СокрЛП(Стр.ЗаводскойНомер);
		Стр.Код = СокрЛП(Стр.Код);		
		Стр.УдалосьСопоставить = Ложь;
	КонецЦикла;

	ТекстЗапроса= "ВЫБРАТЬ
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОборотыДтКт.Организация) КАК Организация,
|	ОсновныеСредства.Ссылка КАК ОССсылка,
|	ОсновныеСредства.Наименование КАК ОС,
|	ОсновныеСредства.Код КАК Код,
|	ОсновныеСредства.ЗаводскойНомер КАК ЗаводскойНомер,
|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборотКт,
|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокПолезногоИспользования
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , НЕ СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01), , СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01), , ) КАК ХозрасчетныйОборотыДтКт
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
|		ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(ДОБАВИТЬКДАТЕ(&началопериода, СЕКУНДА, -1), ) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
|		ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
|		ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ОсновныеСредства.Ссылка";
	
	Запрос.Текст=ТекстЗапроса;
	
	Выборка=Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		НС=ДанныеБух.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);		
		НС.ГУИД = v82.XMLСтрока(Выборка.ОССсылка);		
		НС.ЗаводскойНомер = СокрЛП(Выборка.ЗаводскойНомер);
		НС.ИнвентарныйНомер = СокрЛП(Выборка.ИНвентарныйНомер);
		НС.Код = СокрЛП(Выборка.Код);
		НС.СуммаАмортизации = Выборка.СуммаОборотКт;
		НС.Срок = Выборка.СрокПолезногоИспользования;
		НС.УдалосьСопоставить = Ложь;
		НС.ОСФин = Справочники.ОсновныеСредства.ПустаяСсылка();
		НС.ИнвНомерФин = "";
		НС.КодФин = "";
	КонецЦикла;	
		
	СводнаяТаблица = Новый ТаблицаЗначений;	
	СводнаяТаблица.Колонки.Добавить("ОС");
	СводнаяТаблица.Колонки.Добавить("ЗаводскойНомер");
	СводнаяТаблица.Колонки.Добавить("ИнвентарныйНомер");
	СводнаяТаблица.Колонки.Добавить("СуммаАмортизацииФин");
	СводнаяТаблица.Колонки.Добавить("СуммаАмортизацииБух");	
	СводнаяТаблица.Колонки.Добавить("СрокБух");	
	СводнаяТаблица.Колонки.Добавить("СрокФин");
	СводнаяТаблица.Колонки.Добавить("КодФин");
	СводнаяТаблица.Колонки.Добавить("КодБух");
	
	Для Каждого Стр Из ДанныеФин Цикл
		
		НайдСтр = Неопределено;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Стр.Организация);
		
		// ид бух
		Если ЗначениеЗаполнено(Стр.АК_ИД_Бух) Тогда			
			СтруктураПоиска.Вставить("ГУИД", Стр.АК_ИД_Бух);
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда			
				НайдСтр = НайдСтроки[0];
			КонецЕсли;			
				
		КонецЕсли;	
		
		// гуид
		Если НайдСтр = Неопределено Тогда
			
			СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда			
				НайдСтр = НайдСтроки[0];
			КонецЕсли;		
			
		КонецЕсли;
			
		// инв. номер
		Если НайдСтр = Неопределено Тогда
			СтруктураПоиска.Удалить("ГУИД");
			СтруктураПоиска.Вставить("ИнвентарныйНомер", Стр.ИнвентарныйНомер);			
			СтруктураПоиска.Вставить("УдалосьСопоставить", Ложь);
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
			Если НайдСтроки.Количество() Тогда
				НайдСтр = НайдСтроки[0];
			КонецЕсли;
		КонецЕсли;
			
		// заводской номер (если заполнен)
		Если НайдСтр = Неопределено И ЗначениеЗаполнено(Стр.ЗаводскойНомер) Тогда
			СтруктураПоиска.Удалить("ИнвентарныйНомер");
			СтруктураПоиска.Вставить("ЗаводскойНомер", Стр.ЗаводскойНомер);
			СтруктураПоиска.Вставить("ОС", СокрЛП(Стр.ОС.Наименование));
			СтруктураПоиска.Вставить("УдалосьСопоставить", Ложь);
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
			Если НайдСтроки.Количество() Тогда
				НайдСтр = НайдСтроки[0];
			КонецЕсли;
		КонецЕсли;
		
		НовСтр = СводнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СТр);
		НовСтр.СуммаАмортизацииФин = Стр.СуммаАмортизации;
		НовСтр.ОС = СокрЛП(Стр.ОС);
		НовСтр.СуммаАмортизацииБух = 0;
		НовСтр.СрокБух = 0;
		НовСтр.СрокФин = Стр.Срок;
		НовСтр.КодФин = Стр.Код;
		
		Если НайдСтр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр.СуммаАмортизацииБух = НайдСтр.СуммаАмортизации;
		НовСтр.СрокБух = НайдСтр.Срок;
		НОвСтр.КодБух = НайдСтр.Код;
		
		Стр.УдалосьСопоставить = Истина;
		НайдСтр.УдалосьСопоставить = Истина;	
		
	КонецЦикла;
	
	Для Каждого Стр Из ДанныеБух Цикл
		Если НЕ Стр.УдалосьСопоставить Тогда
			НовСтр = СводнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.СуммаАмортизацииБух = Стр.СуммаАмортизации;
			НовСтр.СуммаАмортизацииФин = 0;
			НовСтр.СрокБух = Стр.Срок;
			НовСтр.СрокФин = 0;
			НОвСтр.КодБух = Стр.Код;
			НовСтр.КодФин = "";
		КонецЕсли;
	КонецЦикла;
		
	//Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;

	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
											Настройки, ДанныеРасшифровки);

	ВнешниеНаборыДанных=Новый Структура;

	ВнешниеНаборыДанных.Вставить("СводнаяТаблица",СводнаяТаблица);										
											
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,
													   ДанныеРасшифровки);

	//Очищаем поле табличного документа

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

