Функция ПолучитьПользовательскуюНастройку(ИдентификаторПользовательскойНастройки)
	
	ЗначениеВозврата = Неопределено;
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользПоле.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат ПользПоле;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции	

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДатаНачала = '00010101';
	ДатаОкончания = '00010101';
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "Период" Тогда
			ДатаНачала = ПользПоле.Значение.ДатаНачала;
			ДатаОкончания = КонецДня(ПользПоле.Значение.ДатаОкончания);
		КонецЕсли;	
	КонецЦикла;
	
	МассивТТ = Новый Массив();
	ЕстьОтборТТ = Ложь;
	Для Каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбор.ПредставлениеПользовательскойНастройки = "Торговая точка" Тогда
			ОтборТТ = ПолучитьПользовательскуюНастройку(ЭлементОтбор.ИдентификаторПользовательскойНастройки);
			Если ОтборТТ <> Неопределено
				И ОтборТТ.Использование = Истина Тогда
				Если ОтборТТ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ЕстьОтборТТ = Истина;
					МассивТТ.Добавить(ОтборТТ.ПравоеЗначение);
				КонецЕсли;	
				Если ОтборТТ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ЕстьОтборТТ = Истина;
					Для Каждого ЭлементТТ Из ОтборТТ.ПравоеЗначение Цикл
						МассивТТ.Добавить(ЭлементТТ.Значение);
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаДанных = Отчеты.ОтчетБухгалтераРасчетчика.ПолучитьТаблицуРасхожденийСчета57_2(ДатаНачала, ДатаОкончания, ЕстьОтборТТ, МассивТТ);
	ТаблицаДанных.Колонки.Добавить("Расчетчик", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаДанных.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных57_1 = Отчеты.ОтчетБухгалтераРасчетчика.ПолучитьТаблицуРасхожденийСчета57_1(ДатаНачала, ДатаОкончания, ЕстьОтборТТ, МассивТТ);
	Для Каждого СтрокаД Из ТаблицаДанных57_1 Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаД);
	КонецЦикла;
	
	ТаблицаДанных44_3 = Отчеты.ОтчетБухгалтераРасчетчика.ПолучитьТаблицуРасхожденийСчета44_3(ДатаНачала, ДатаОкончания, ЕстьОтборТТ, МассивТТ);
	Для Каждого СтрокаД Из ТаблицаДанных44_3 Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаД);
	КонецЦикла;
								
	СтандартнаяОбработка = Ложь;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаДанных);
	//
	////Макет компоновки 
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	//
	////Компоновка данных
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	//
	////Вывод результата
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ТабРезультат = Новый ТаблицаЗначений();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ТабРезультат.Колонки.Добавить("Проверено");
	
	ЗапросПроверенных = Новый Запрос();
	ЗапросПроверенных.Текст = "ВЫБРАТЬ
							  |	ПроверенныеСтрокиОтчетаБухгалтераРасчетчика.СчетУчета,
							  |	ПроверенныеСтрокиОтчетаБухгалтераРасчетчика.Организация,
							  |	ПроверенныеСтрокиОтчетаБухгалтераРасчетчика.Дата,
							  |	ПроверенныеСтрокиОтчетаБухгалтераРасчетчика.ТТ,
							  |	ПроверенныеСтрокиОтчетаБухгалтераРасчетчика.Терминал,
							  |	ПроверенныеСтрокиОтчетаБухгалтераРасчетчика.Отклонение
							  |ИЗ
							  |	РегистрСведений.ПроверенныеСтрокиОтчетаБухгалтераРасчетчика КАК ПроверенныеСтрокиОтчетаБухгалтераРасчетчика
							  |ГДЕ
							  |	ПроверенныеСтрокиОтчетаБухгалтераРасчетчика.Дата МЕЖДУ &ДатаНач И &ДатаКон";
							  
	ЗапросПроверенных.УстановитьПараметр("ДатаНач", ДатаНачала);
	ЗапросПроверенных.УстановитьПараметр("ДатаКон", ДатаОкончания);
	
	ТабПроверенные = ЗапросПроверенных.Выполнить().Выгрузить();
	СтруктураПоиск = Новый Структура("СчетУчета, Организация, Дата, ТТ, Терминал, Отклонение");
	Для Каждого СтрокаРезультат Из ТабРезультат Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиск, СтрокаРезультат);
		СтрокиНайденные = ТабПроверенные.НайтиСтроки(СтруктураПоиск);
		Если СтрокиНайденные.Количество() > 0 Тогда
			СтрокаРезультат.Проверено = Истина;
		Иначе
			СтрокаРезультат.Проверено = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаРезультат.Загрузить(ТабРезультат);
	
КонецПроцедуры