Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем СоответствиеНаборовДанныхИЗапросов;
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ИнфокомТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ТаблицаДанныхПоПоступлению = Неопределено;
	Если ПараметрНачалоПериода = Неопределено Или ПараметрКонецПериода = Неопределено тогда
		Возврат Неопределено;
	Иначе
		
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		
		ТаблицаДанныхПоПоступлению = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(НачалоПериода, КонецПериода);
	КонецЕсли;
			
	ВнешниеНаборыДанных=Новый Структура;
    ВнешниеНаборыДанных.Вставить("ТаблицаДанныхПоПоступлению", ТаблицаДанныхПоПоступлению);
	
	ИнфокомТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетамиИнфоком.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЛишниеПредставленияВШапке(Результат)
	
	Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	Пока Ячейка <> Неопределено Цикл
		УдаляемаяОбласть = Результат.Область("R"+Ячейка.Верх);
		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ИнфокомТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ИнфокомТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;                                    
				
	КонецЦикла;
	
	ИнфокомТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Функция ЕстьДетальныеПоля(ВыбранныеПоля)
	ЕстьРесурсы = ложь;
	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
		ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено тогда
			Если ДоступноеПоле.Ресурс тогда
				ЕстьРесурсы = истина;
			Иначе
				ЕстьРесурсы = ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЕстьРесурсы;
КонецФункции

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТекущаяДата",   ТекущаяДата());
	
	//ЕстьКодДохода                = ПрисутствуетПоле("КодДохода");
	//ЕстьВидРасчета               = ПрисутствуетПоле("ВидРасчета");
	//ЕстьРегистратор              = ПрисутствуетПоле("Регистратор"); 
	//ЕстьСтавкаНалогообложения    = ПрисутствуетПоле("НДФЛ.СтавкаНалогообложенияНДФЛ"); 
	//ЕстьФизЛицо                  = ПрисутствуетПоле("Сотрудник");
	//ЕстьКПП                      = ПрисутствуетПоле("КПП");
	//							   
	//ЕстьНалоговыйРежим                    = ПрисутствуетПоле("НалоговыйРежим");
	//ЕстьВидПособия                        = ПрисутствуетПоле("Пособия.ВидПособия");
	//ЕстьИнвалид                           = ПрисутствуетПоле("Взносы.Инвалид");
	//ЕстьРебенок                           = ПрисутствуетПоле("Пособия.Ребенок");
	//ЕстьВидЗанятости                      = ПрисутствуетПоле("Пособия.ВидЗанятости");
	//ЕстьСреднийЗаработок                  = ПрисутствуетПоле("Пособия.РазмерСреднегоЗаработка");
	//ЕстьВидСтрахования                    = ПрисутствуетПоле("Пособия.ВидСтрахования");
	//ЕстьКодПоОКАТО                        = ПрисутствуетПоле("НДФЛ.КодПоОКАТО"); 
	//ЕстьВычет                             = ПрисутствуетПоле("НДФЛ.КодВычетНДФЛ"); 
	//
	//ЕстьВидДохода                         = ПрисутствуетПоле("ВидДохода");
	//ЕстьВидТарифаСтраховыхВзносов         = ПрисутствуетПоле("ВидТарифаСтраховыхВзносов");
	//ЕстьРодилсяДо1967                     = ПрисутствуетПоле("РодилсяДо1967");
	//ЕстьОблагаетсяПоДополнительномуТарифу = ПрисутствуетПоле("ОблагаетсяПоДополнительномуТарифу");
	//ЕстьВыплатаЗаСчетФедеральногоБюджета = ПрисутствуетПоле("Пособия.ВыплатаЗаСчетФедеральногоБюджета");
	//
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КПП",   ЕстьКПП);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Инвалид",   ЕстьИнвалид);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КодДохода",   ЕстьКодДохода);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидРасчета",  ЕстьВидРасчета);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Регистратор", ЕстьРегистратор);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СтавкаНалогообложенияРезидента", ЕстьСтавкаНалогообложения);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ФизЛицо",     ЕстьФизЛицо);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НалоговыйРежим",     ЕстьНалоговыйРежим);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидПособия",              ЕстьВидПособия);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Ребенок",                 ЕстьРебенок);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидЗанятости",            ЕстьВидЗанятости);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "РазмерСреднегоЗаработка", ЕстьСреднийЗаработок);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидСтрахования",          ЕстьВидСтрахования);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КодПоОКАТО",              ЕстьКодПоОКАТО);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Вычет",                   ЕстьВычет);
	//
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидДохода",                 ЕстьВидДохода);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидТарифаСтраховыхВзносов", ЕстьВидТарифаСтраховыхВзносов);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "РодилсяДо1967",             ЕстьРодилсяДо1967);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ОблагаетсяПоДополнительномуТарифу", ЕстьОблагаетсяПоДополнительномуТарифу);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВыплатаЗаСчетФедеральногоБюджета", ЕстьВыплатаЗаСчетФедеральногоБюджета);
	//
	//
	//Если ЕстьВычет тогда 
	//	Если ЕстьКодДохода тогда 
	//		Сообщить("Поле Вычет не возможно использовать с группировкой или отбором по полю ""Код дохода"".");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	//
	//СписокПолей = Новый СписокЗначений;
	//
	//Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
	//	ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбранноеПоле.Поле, КомпоновщикНастроек);
	//	Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Родитель <> Неопределено тогда
	//		Если ЕстьКодДохода тогда
	//			Если Найти(ДоступноеПоле.Поле, "Пособия.") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Код по ОКАТО"".");
	//				ДобавитьПустоеОформдениеПоля(ВыбранноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//			Если Найти(ДоступноеПоле.Поле, "ЕСН.") = 0 и Найти(ДоступноеПоле.Поле, "База") = 0 и Строка(ДоступноеПоле.Поле) <> "ЕСН.Начислено" и Строка(ДоступноеПоле.Поле) <> "ЕСН.НачисленоСкидка" тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид расчета"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВидРасчета тогда
	//			Если Найти(ДоступноеПоле.Поле, "База") = 0 и Строка(ДоступноеПоле.Поле) <> "Взносы.Начислено" и Строка(ДоступноеПоле.Поле) <> "Взносы.НеОблагаетсяЦеликом" тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид расчета"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьРегистратор тогда
	//			Если Найти(ДоступноеПоле.Поле, "ФССНС.") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Регистратор"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьСтавкаНалогообложения	тогда
	//			Если Найти(ДоступноеПоле.Поле, "НДФЛ.") = 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Ставка налогообложения"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьФизЛицо тогда
	//			Если Найти(ДоступноеПоле.Поле, "ФССНС.") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Сотрудник"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВидПособия или ЕстьРебенок или ЕстьВидЗанятости или ЕстьСреднийЗаработок или ЕстьВидСтрахования тогда
	//			Если Найти(ДоступноеПоле.Поле, "Пособия.") = 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид пособия"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьНалоговыйРежим тогда
	//			Если Найти(ДоступноеПоле.Поле, "ЕСН.") = 0 и Найти(ДоступноеПоле.Поле, "ПФР.") = 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Налоговый режим"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВычет тогда
	//			Если Найти(ДоступноеПоле.Поле, "НалогНДФЛ") <> 0 или Найти(ДоступноеПоле.Поле, "НалогНДФЛУдержаный") <> 0 
	//				или Найти(ДоступноеПоле.Поле, "БазаНДФЛ") <> 0 или Найти(ДоступноеПоле.Поле, "СуммаДоходаНеОблагаемая") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вычет НДФЛ"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВидДохода тогда
	//			Если Найти(ДоступноеПоле.Поле, "Взносы.ФССНесчастныеСлучаи") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ТФОМС") <> 0 
	//				или Найти(ДоступноеПоле.Поле, "Взносы.ФФОМС") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ТФОМС") <> 0
	//				или Найти(ДоступноеПоле.Поле, "Взносы.ФСС") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ПФРПоДополнительномуТарифу") <> 0
	//				или Найти(ДоступноеПоле.Поле, "Взносы.ПФРНакопительная") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ПФРСтраховая") <> 0 тогда
	//				
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид дохода"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;

	//Если ЕстьДетальныеПоля(ВыбранныеПоля) тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ДобавитьОтборИлиПоВсемПоказателям(КомпоновщикНастроек.Настройки, ВыбранныеПоля, СписокПолей);
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ПараметрНачалоПериода = Неопределено или ПараметрКонецПериода = Неопределено тогда
		Возврат;
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено и КонецПериода <> Неопределено тогда
		УправлениеОтчетамиИнфоком.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПустоеОформдениеПоля(Поле)
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЗначениеТекст = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Text"));
	ЗначениеТекст.Значение = "-";
	ЗначениеТекст.Использование = Истина;
	
	ПолеОформления = УсловноеОформление.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Поле;
	
КонецПроцедуры


Процедура ДобавитьОтборИлиПоВсемПоказателям(СтруктураОтчета, ВыбранныеПоля, СписокПолей)
	// создадим отбор или 
	ГруппаИли = СтруктураОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
		Если Найти(Строка(ВыбранноеПоле.Поле), "UserField") > 0 или СписокПолей.НайтиПоЗначению(ВыбранноеПоле.Поле) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		ИнфокомТиповыеОтчеты.ДобавитьОтбор(ГруппаИли, Строка(ВыбранноеПоле.Поле), 0, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		ГруппаИли.Использование = истина;
	КонецЕсли;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		СтруктураОтчета.Отбор.Элементы.Удалить(ГруппаИли);
	КонецЕсли;
КонецПроцедуры


Функция ПрисутствуетПоле(Поле)
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(КомпоновщикНастроек.Настройки.Структура, Поле);

	
	//Для каждого ЭлементСтруктуры из КомпоновщикНастроек.Настройки.Структура Цикл
	//	
	//	Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
	//		
	//		Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
	//			
	//			ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Если ЕстьГруппировка тогда
		Возврат ЕстьГруппировка;
	КонецЕсли;
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
	
	ЕстьГруппировка = ложь;
	
	Для каждого ОтборПоле из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПоле(Структура, Поле)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
	 тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
	
	Для каждого ЭлементСтруктуры из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") тогда
					Продолжить;
				КонецЕсли;
				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
					ЕстьПоле = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	
	Возврат Новый Структура("ДополнительныеНастройкиОтчета, ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	Истина, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции

	


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОтклонениеВПоступленииТоваров");
    ПараметрДанных.Значение = Справочники.СтатьиТовародвижения.НайтиПоНаименованию("Отклонение в поступлении товаров");
    ПараметрДанных.Использование = Истина;
	
		
	
	// Подготовим и выведем отчет.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	ПараметрПериода = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета")).ИдентификаторПользовательскойНастройки);
    ПараметрОтклонениеВПоступленииТоваров = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтклонениеВПоступленииТоваров"));
    ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
    ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
    ПараметрВидОперацииВозврат = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидОперацииВозврат"));
    ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
    ПараметрРасход = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Расход"));
    ПараметрТип = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Тип"));
    ПараметрСчет441 = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Счет441"));
    ПараметрВидОперацииПоступления = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидОперацииПоступления"));
    ПараметрОтклонениеВПоступленииТоваров = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтклонениеВПоступленииТоваров"));
	
	
	ПараметрВключаяИнвентаризации = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВключаяИнвентаризации")).ИдентификаторПользовательскойНастройки);

    ПараметрВключаяВозвратыПоставщикам = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВключаяВозвратыПоставщикам")).ИдентификаторПользовательскойНастройки);

    ПараметрВключаяПоступленияОтПоставщиков = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВключаяПоступленияОтПоставщиков")).ИдентификаторПользовательскойНастройки);

    ПараметрВключаяПеремещенияНаСклад = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВключаяПеремещенияНаСклад")).ИдентификаторПользовательскойНастройки);

    ПараметрОтборПоТипуМагазина = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтборПоТипуМагазина")).ИдентификаторПользовательскойНастройки);

	
	
	
	Если НЕ ПараметрОтклонениеВПоступленииТоваров = Неопределено Тогда
		ПараметрОтклонениеВПоступленииТоваров.Значение = Справочники.СтатьиДоходовРасходов.НайтиПоНаименованию("Отклонение в поступлении товаров");		
	КонецЕсли;
	//ПараметрКонецПериода  = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")).ИдентификаторПользовательскойНастройки);
	//ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	//ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ТаблицаДанныхПоПоступлению = Неопределено;
	Если ПараметрПериода = Неопределено Тогда
		Возврат;
	Иначе
		
		НачалоПериода = ПараметрПериода.Значение.ДатаНачала;
		КонецПериода  = ПараметрПериода.Значение.ДатаОкончания;
		
		Запрос1=Новый Запрос;
		Запрос1.УстановитьПараметр("НачалоПериода",НачалоПериода);	
		Запрос1.УстановитьПараметр("КонецПериода",КонецПериода);	
		Запрос1.УстановитьПараметр("ВидОперацииВозврат",ПараметрВидОперацииВозврат.Значение);	
		Запрос1.УстановитьПараметр("Период",КонецПериода);	
		Запрос1.УстановитьПараметр("Расход",ПараметрРасход.Значение);	
		Запрос1.УстановитьПараметр("Тип",ПараметрТип.Значение);	
		Запрос1.УстановитьПараметр("Счет441",ПараметрСчет441.Значение);	
		Запрос1.УстановитьПараметр("ВидОперацииПоступления",ПараметрВидОперацииПоступления.Значение);	
		Запрос1.УстановитьПараметр("ОтклонениеВПоступленииТоваров",Справочники.СтатьиДоходовРасходов.НайтиПоКоду("21202"));//НайтиПоНаименованию("Отклонение в поступлении товаров"));	
		Запрос1.УстановитьПараметр("ВключаяИнвентаризации",ПараметрВключаяИнвентаризации.Значение);	
		Запрос1.УстановитьПараметр("ВключаяВозвратыПоставщикам",ПараметрВключаяВозвратыПоставщикам.Значение);	
		Запрос1.УстановитьПараметр("ВключаяПоступленияОтПоставщиков",ПараметрВключаяПоступленияОтПоставщиков.Значение);	
		Запрос1.УстановитьПараметр("ВключаяПеремещенияНаСклад",ПараметрВключаяПеремещенияНаСклад.Значение);	
		Запрос1.УстановитьПараметр("ОтборПоТипуМагазина",ПараметрОтборПоТипуМагазина.Значение);	
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		Массив.Добавить(Тип("СправочникСсылка.Склады"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);		
		
		ТЗРез=Новый ТаблицаЗначений;
		ТЗРез.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗРез.Колонки.Добавить("Склад",ОписаниеТиповС);
		ТЗРез.Колонки.Добавить("ВидДанных",Новый ОписаниеТипов("Строка"));
		ТЗРез.Колонки.Добавить("Излишки",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
		ТЗРез.Колонки.Добавить("Недостача",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
		ТЗРез.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
		ТЗРез.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТЗРез.Колонки.Добавить("СуммаИзлишки",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТЗРез.Колонки.Добавить("СуммаНедостачи",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТЗРез.Колонки.Добавить("ТипСклада",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСтруктурныхЕдиниц"));
		ТЗРез.Колонки.Добавить("ТТ",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		
		Запрос1.Текст="ВЫБРАТЬ
		              |	ТоварыНаСкладахОстаткиИОбороты.Склад,
		              |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
		              |	НАЧАЛОПЕРИОДА(ТоварыНаСкладахОстаткиИОбороты.Регистратор.Дата, ДЕНЬ) КАК Дата,
		              |	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход,
		              |	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход
		              |ПОМЕСТИТЬ ТабИнвентаризация
		              |ИЗ
		              |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(, , Авто, , ) КАК ТоварыНаСкладахОстаткиИОбороты
		              |ГДЕ
		              |	ТоварыНаСкладахОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
		              |	И ТоварыНаСкладахОстаткиИОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТоварыНаСкладах.Склад,
		              |	ТоварыНаСкладах.Номенклатура,
		              |	СУММА(ВЫБОР
		              |			КОГДА ТоварыНаСкладах.ВидДвижения = &Расход
		              |				ТОГДА ТоварыНаСкладах.Количество * -1
		              |			ИНАЧЕ ТоварыНаСкладах.Количество
		              |		КОНЕЦ) КАК Количество,
		              |	ТоварыНаСкладах.ВидДвижения,
		              |	НАЧАЛОПЕРИОДА(ТоварыНаСкладах.КорректировкаПоИнвентаризации.Дата, ДЕНЬ) КАК Дата
		              |ПОМЕСТИТЬ ТабКорректировок
		              |ИЗ
		              |	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
		              |ГДЕ
		              |	ТоварыНаСкладах.КорректировкаПоИнвентаризации <> ЗНАЧЕНИЕ(Документ.ИнвентаризацияСклад.ПустаяСсылка)
		              |	И ТоварыНаСкладах.КорректировкаПоИнвентаризации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ТоварыНаСкладах.Склад,
		              |	ТоварыНаСкладах.Номенклатура,
		              |	ТоварыНаСкладах.ВидДвижения,
		              |	НАЧАЛОПЕРИОДА(ТоварыНаСкладах.КорректировкаПоИнвентаризации.Дата, ДЕНЬ)
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТабКорректировок.Склад,
		              |	ТабКорректировок.Номенклатура,
		              |	СУММА(ВЫБОР
		              |			КОГДА ТабКорректировок.Количество < 0
		              |				ТОГДА -ТабКорректировок.Количество
		              |			ИНАЧЕ 0
		              |		КОНЕЦ) КАК КНедостаче,
		              |	СУММА(ВЫБОР
		              |			КОГДА ТабКорректировок.Количество > 0
		              |				ТОГДА ТабКорректировок.Количество
		              |			ИНАЧЕ 0
		              |		КОНЕЦ) КАК КИзлишкам,
		              |	ТабКорректировок.Дата
		              |ПОМЕСТИТЬ ТаблКорректировкиПодготовленная
		              |ИЗ
		              |	ТабКорректировок КАК ТабКорректировок
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ТабКорректировок.Склад,
		              |	ТабКорректировок.Номенклатура,
		              |	ТабКорректировок.Дата
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТабИнвентаризация.Склад КАК Склад,
		              |	ТабИнвентаризация.Номенклатура КАК Номенклатура,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0) > ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0)
		              |			ТОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0) - ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ КАК Недостача,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0) < ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0)
		              |			ТОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0) - ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ КАК Излишки,
		              |	""Инвентаризация"" КАК ВидДанных,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0) > ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0)
		              |			ТОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0) - ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаНедостачи,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0) < ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0)
		              |			ТОГДА ЕСТЬNULL(ТабИнвентаризация.КоличествоПриход, 0) - ЕСТЬNULL(ТабИнвентаризация.КоличествоРасход, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаИзлишки,
		              |	ТабИнвентаризация.Склад.Владелец.ТипСтруктурнойЕдиницы КАК ТипСклада,
		              |	ТабИнвентаризация.Дата КАК Дата
		              |ПОМЕСТИТЬ ТабИтог
		              |ИЗ
		              |	ТабИнвентаризация КАК ТабИнвентаризация
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&КонецПериода, ) КАК СебестоимостьТоваровСрезПоследних
		              |		ПО ТабИнвентаризация.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	ТаблКорректировкиПодготовленная.Склад,
		              |	ТаблКорректировкиПодготовленная.Номенклатура,
		              |	ТаблКорректировкиПодготовленная.КНедостаче,
		              |	ТаблКорректировкиПодготовленная.КИзлишкам,
		              |	""Инвентаризация"",
		              |	ТаблКорректировкиПодготовленная.КНедостаче * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0),
		              |	ТаблКорректировкиПодготовленная.КИзлишкам * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0),
		              |	ТаблКорректировкиПодготовленная.Склад.Владелец.ТипСтруктурнойЕдиницы,
		              |	ТаблКорректировкиПодготовленная.Дата
		              |ИЗ
		              |	ТаблКорректировкиПодготовленная КАК ТаблКорректировкиПодготовленная
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&КонецПериода, ) КАК СебестоимостьТоваровСрезПоследних
		              |		ПО ТаблКорректировкиПодготовленная.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТабИтог.Склад,
		              |	ТабИтог.Номенклатура,
		              |	СУММА(ТабИтог.Недостача) КАК Недостача,
		              |	СУММА(ТабИтог.Излишки) КАК Излишки,
		              |	ТабИтог.ВидДанных,
		              |	СУММА(ТабИтог.СуммаНедостачи) КАК СуммаНедостачи,
		              |	СУММА(ТабИтог.СуммаИзлишки) КАК СуммаИзлишки,
		              |	ТабИтог.ТипСклада,
		              |	ТабИтог.Дата
		              |ИЗ
		              |	ТабИтог КАК ТабИтог
		              |ГДЕ
		              |	&ВключаяИнвентаризации
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ТабИтог.Склад,
		              |	ТабИтог.Номенклатура,
		              |	ТабИтог.ВидДанных,
		              |	ТабИтог.ТипСклада,
		              |	ТабИтог.Дата";
		Выб=Запрос1.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗРез.Добавить(),Выб);
		КонецЦикла; 
		
		Запрос1.Текст="ВЫБРАТЬ
		              |	РасходныйОрдерСкладТовары.Ссылка.Склад,
		              |	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата,
		              |	РасходныйОрдерСкладТовары.Номенклатура,
		              |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
		              |	ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка КАК Поступление
		              |ПОМЕСТИТЬ ВремТабПриходныйОрдер
		              |ИЗ
		              |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.РасходныеОрдера КАК ВозвратТоваровПоставщикуРасходныеОрдера
		              |		ПО РасходныйОрдерСкладТовары.Ссылка = ВозвратТоваровПоставщикуРасходныеОрдера.РасходныйОрдер
		              |ГДЕ
		              |	РасходныйОрдерСкладТовары.Ссылка.Проведен
		              |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = &ВидОперацииВозврат
		              |	И РасходныйОрдерСкладТовары.Ссылка В
		              |			(ВЫБРАТЬ
		              |				ВозвратТоваровПоставщикуРасходныеОрдера.РасходныйОрдер
		              |			ИЗ
		              |				Документ.ВозвратТоваровПоставщику.РасходныеОрдера КАК ВозвратТоваровПоставщикуРасходныеОрдера
		              |			ГДЕ
		              |				ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка.Проведен
		              |				И ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	РасходныйОрдерСкладТовары.Ссылка.Склад,
		              |	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ),
		              |	РасходныйОрдерСкладТовары.Номенклатура,
		              |	ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	""Возврат поставщику"" КАК ВидДанных,
		              |	ЕСТЬNULL(ВремТабПриходныйОрдер.Склад, ""!!!Склад неопределен"") КАК Склад,
		              |	ЕСТЬNULL(ВремТабПриходныйОрдер.Дата, НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщикуТовары.Ссылка.Дата, ДЕНЬ)) КАК Дата,
		              |	ЕСТЬNULL(ВремТабПриходныйОрдер.Номенклатура, ВозвратТоваровПоставщикуТовары.Номенклатура) КАК Номенклатура,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ВремТабПриходныйОрдер.Количество, 0) > ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0)
		              |			ТОГДА ЕСТЬNULL(ВремТабПриходныйОрдер.Количество, 0) - ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ КАК Недостача,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ВремТабПриходныйОрдер.Количество, 0) < ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0)
		              |			ТОГДА ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) - ЕСТЬNULL(ВремТабПриходныйОрдер.Количество, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ КАК Излишки
		              |ПОМЕСТИТЬ ТабБезСумм
		              |ИЗ
		              |	ВремТабПриходныйОрдер КАК ВремТабПриходныйОрдер
		              |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		              |		ПО ВремТабПриходныйОрдер.Номенклатура = ВозвратТоваровПоставщикуТовары.Номенклатура
		              |			И ВремТабПриходныйОрдер.Поступление = ВозвратТоваровПоставщикуТовары.Ссылка
		              |ГДЕ
		              |	ВозвратТоваровПоставщикуТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		              |	И ВозвратТоваровПоставщикуТовары.Ссылка.Проведен
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТабБезСумм.ВидДанных,
		              |	ТабБезСумм.Недостача,
		              |	ТабБезСумм.Излишки,
		              |	ТабБезСумм.Недостача * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаНедостачи,
		              |	ТабБезСумм.Излишки * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаИзлишки,
		              |	ТабБезСумм.Склад,
		              |	ТабБезСумм.Дата,
		              |	ТабБезСумм.Номенклатура,
		              |	ВЫБОР
		              |		КОГДА ТабБезСумм.Склад = ""!!!Склад неопределен""
		              |			ТОГДА &Тип
		              |		ИНАЧЕ ТабБезСумм.Склад.Владелец.ТипСтруктурнойЕдиницы
		              |	КОНЕЦ КАК ТипСклада
		              |ИЗ
		              |	ТабБезСумм КАК ТабБезСумм
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&КонецПериода, ) КАК СебестоимостьТоваровСрезПоследних
		              |		ПО ТабБезСумм.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
		              |ГДЕ
		              |	(ТабБезСумм.Недостача <> 0
		              |			ИЛИ ТабБезСумм.Излишки <> 0)
		              |	И &ВключаяВозвратыПоставщикам";
		Выб=Запрос1.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗРез.Добавить(),Выб);
		КонецЦикла; 
		
		Запрос1.Текст="ВЫБРАТЬ
|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
|	МАКСИМУМ(РасходныйОрдерСкладТовары.Ссылка.Склад) КАК Склад,
|	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТТ,
|	НАЧАЛОПЕРИОДА(ВЫБОР
|			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
|				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
|			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
|		КОНЕЦ, ДЕНЬ) КАК Дата
|ПОМЕСТИТЬ ТЗ_СкладыИзРасходников
|ИЗ
|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
|ГДЕ
|	ВЫБОР
|			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
|				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
|			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
|		КОНЕЦ МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -5) И &КонецПериода
|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
|	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
|
|СГРУППИРОВАТЬ ПО
|	РасходныйОрдерСкладТовары.Номенклатура,
|	РасходныйОрдерСкладТовары.Ссылка.Получатель,
|	НАЧАЛОПЕРИОДА(ВЫБОР
|			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
|				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
|			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
|		КОНЕЦ, ДЕНЬ)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТЗ_СкладыИзРасходников.Номенклатура,
|	ТЗ_СкладыИзРасходников.Склад,
|	ТЗ_СкладыИзРасходников.ТТ,
|	ТЗ_СкладыИзРасходников.Дата
|ПОМЕСТИТЬ ТЗ_СкладыСвернутые
|ИЗ
|	ТЗ_СкладыИзРасходников КАК ТЗ_СкладыИзРасходников
|
|СГРУППИРОВАТЬ ПО
|	ТЗ_СкладыИзРасходников.Номенклатура,
|	ТЗ_СкладыИзРасходников.ТТ,
|	ТЗ_СкладыИзРасходников.Дата,
|	ТЗ_СкладыИзРасходников.Склад
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница КАК ТорговаяТочка,
|	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
|	ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот КАК Количество,
|	НАЧАЛОПЕРИОДА(ДвиженияТоваровПоЛистамУчетаОбороты.Период, ДЕНЬ) КАК День
|ПОМЕСТИТЬ ВТ_Полученные
|ИЗ
|	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(
|			&НачалоПериода,
|			&КонецПериода,
|			День,
|			ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Поступление)
|				И НЕ Номенклатура В
|						(ВЫБРАТЬ
|							Номенклатура.Ссылка
|						ИЗ
|							Справочник.Номенклатура КАК Номенклатура
|						ГДЕ
|							Номенклатура.СлужебныйТовар = ИСТИНА)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_Полученные.ТорговаяТочка,
|	ВТ_Полученные.Номенклатура,
|	СУММА(ВТ_Полученные.Количество) КАК Количество,
|	ВТ_Полученные.День
|ПОМЕСТИТЬ ТЗ_ПолученныеСвернутые
|ИЗ
|	ВТ_Полученные КАК ВТ_Полученные
|
|СГРУППИРОВАТЬ ПО
|	ВТ_Полученные.ТорговаяТочка,
|	ВТ_Полученные.Номенклатура,
|	ВТ_Полученные.День
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЗ_Запрос.Номенклатура КАК Номенклатура,
|	СУММА(ВЗ_Запрос.Количество) КАК Количество,
|	ВЗ_Запрос.ТорговаяТочка КАК ТорговаяТочка,
|	ВЗ_Запрос.День
|ПОМЕСТИТЬ ВТ_Отправленные
|ИЗ
|	(ВЫБРАТЬ
|		РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
|		РасходныйОрдерСкладТовары.Количество КАК Количество,
|		РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТорговаяТочка,
|		НАЧАЛОПЕРИОДА(ВЫБОР
|				КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
|					ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
|				ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
|			КОНЕЦ, ДЕНЬ) КАК День
|	ИЗ
|		Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
|	ГДЕ
|		ВЫБОР
|				КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
|					ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
|				ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
|			КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
|		И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
|		И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
|		И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)) КАК ВЗ_Запрос
|
|СГРУППИРОВАТЬ ПО
|	ВЗ_Запрос.Номенклатура,
|	ВЗ_Запрос.ТорговаяТочка,
|	ВЗ_Запрос.День
|
|ИНДЕКСИРОВАТЬ ПО
|	ТорговаяТочка,
|	Номенклатура
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ЕСТЬNULL(ВТ_Отправленные.ТорговаяТочка, ТЗ_ПолученныеСвернутые.ТорговаяТочка) КАК ТорговаяТочка,
|	ЕСТЬNULL(ВТ_Отправленные.Номенклатура, ТЗ_ПолученныеСвернутые.Номенклатура) КАК Номенклатура,
|	ВЫБОР
|		КОГДА ЕСТЬNULL(ВТ_Отправленные.Количество, 0) > ЕСТЬNULL(ТЗ_ПолученныеСвернутые.Количество, 0)
|			ТОГДА ЕСТЬNULL(ВТ_Отправленные.Количество, 0) - ЕСТЬNULL(ТЗ_ПолученныеСвернутые.Количество, 0)
|		ИНАЧЕ 0
|	КОНЕЦ КАК Недостача,
|	ВЫБОР
|		КОГДА ЕСТЬNULL(ВТ_Отправленные.Количество, 0) < ЕСТЬNULL(ТЗ_ПолученныеСвернутые.Количество, 0)
|			ТОГДА ЕСТЬNULL(ТЗ_ПолученныеСвернутые.Количество, 0) - ЕСТЬNULL(ВТ_Отправленные.Количество, 0)
|		ИНАЧЕ 0
|	КОНЕЦ КАК Излишки,
|	ЕСТЬNULL(ВТ_Отправленные.День, ТЗ_ПолученныеСвернутые.День) КАК Дата
|ПОМЕСТИТЬ ТЗ_ДанныеБезСумм
|ИЗ
|	ВТ_Отправленные КАК ВТ_Отправленные
|		ПОЛНОЕ СОЕДИНЕНИЕ ТЗ_ПолученныеСвернутые КАК ТЗ_ПолученныеСвернутые
|		ПО ВТ_Отправленные.ТорговаяТочка = ТЗ_ПолученныеСвернутые.ТорговаяТочка
|			И ВТ_Отправленные.День = ТЗ_ПолученныеСвернутые.День
|			И ВТ_Отправленные.Номенклатура = ТЗ_ПолученныеСвернутые.Номенклатура
|ГДЕ
|	ЕСТЬNULL(ВТ_Отправленные.Количество, 0) - ЕСТЬNULL(ТЗ_ПолученныеСвернутые.Количество, 0) <> 0
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТЗ_ДанныеБезСумм.ТорговаяТочка КАК ТТ,
|	ТЗ_ДанныеБезСумм.Номенклатура,
|	ТЗ_ДанныеБезСумм.Недостача,
|	ТЗ_ДанныеБезСумм.Излишки,
|	ТЗ_ДанныеБезСумм.Недостача КАК СуммаНедостачи,
|	ТЗ_ДанныеБезСумм.Излишки КАК СуммаИзлишки,
|	ТЗ_ДанныеБезСумм.Дата,
|	МАКСИМУМ(ТЗ_СкладыСвернутые.Дата) КАК ДатаПредыдущая
|ПОМЕСТИТЬ ТЗ_ДанныеБезСуммСПредыдущейДатой
|ИЗ
|	ТЗ_ДанныеБезСумм КАК ТЗ_ДанныеБезСумм
|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_СкладыСвернутые КАК ТЗ_СкладыСвернутые
|		ПО ТЗ_ДанныеБезСумм.ТорговаяТочка = ТЗ_СкладыСвернутые.ТТ
|			И ТЗ_ДанныеБезСумм.Номенклатура = ТЗ_СкладыСвернутые.Номенклатура
|			И ТЗ_ДанныеБезСумм.Дата >= ТЗ_СкладыСвернутые.Дата
|
|СГРУППИРОВАТЬ ПО
|	ТЗ_ДанныеБезСумм.ТорговаяТочка,
|	ТЗ_ДанныеБезСумм.Номенклатура,
|	ТЗ_ДанныеБезСумм.Дата,
|	ТЗ_ДанныеБезСумм.Недостача,
|	ТЗ_ДанныеБезСумм.Излишки,
|	ТЗ_ДанныеБезСумм.Недостача,
|	ТЗ_ДанныеБезСумм.Излишки
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТЗ_ДанныеБезСуммСПредыдущейДатой.ТТ,
|	ТЗ_ДанныеБезСуммСПредыдущейДатой.Номенклатура,
|	ТЗ_ДанныеБезСуммСПредыдущейДатой.Недостача,
|	ТЗ_ДанныеБезСуммСПредыдущейДатой.Излишки,
|	ТЗ_ДанныеБезСуммСПредыдущейДатой.СуммаНедостачи,
|	ТЗ_ДанныеБезСуммСПредыдущейДатой.СуммаИзлишки,
|	ТЗ_ДанныеБезСуммСПредыдущейДатой.Дата,
|	ЕСТЬNULL(ТЗ_СкладыСвернутые.Склад, ""!!!Склад неопределен"") КАК Склад
|ПОМЕСТИТЬ ТЗ_ДанныеБезСуммСоСкладом
|ИЗ
|	ТЗ_ДанныеБезСуммСПредыдущейДатой КАК ТЗ_ДанныеБезСуммСПредыдущейДатой
|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_СкладыСвернутые КАК ТЗ_СкладыСвернутые
|		ПО ТЗ_ДанныеБезСуммСПредыдущейДатой.ТТ = ТЗ_СкладыСвернутые.ТТ
|			И ТЗ_ДанныеБезСуммСПредыдущейДатой.Номенклатура = ТЗ_СкладыСвернутые.Номенклатура
|			И ТЗ_ДанныеБезСуммСПредыдущейДатой.ДатаПредыдущая = ТЗ_СкладыСвернутые.Дата
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК ТорговаяТочка,
|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки КАК ТипРозничнойТочки,
|	МАКСИМУМ(ВЫБОР
|			КОГДА РасходныйОрдерСкладТовары.ПриемкаВМагазинеБезПересчета < 0
|				ТОГДА -РасходныйОрдерСкладТовары.ПриемкаВМагазинеБезПересчета
|			ИНАЧЕ РасходныйОрдерСкладТовары.ПриемкаВМагазинеБезПересчета
|		КОНЕЦ) КАК ПриемкаВМагазинеБезПересчета,
|	РасходныйОрдерСкладТовары.ДатаРаспределения,
|	МАКСИМУМ(ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Получатель КАК Справочник.СтруктурныеЕдиницы).ПриемкаТовараБезПересчета) КАК ПриемкаТовараБезПересчета
|ПОМЕСТИТЬ втТипыМагазинов
|ИЗ
|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСкладТовары
|ГДЕ
|	ВЫБОР
|			КОГДА РасходныйОрдерСкладТовары.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
|				ТОГДА РасходныйОрдерСкладТовары.ДатаРаспределения
|			ИНАЧЕ РасходныйОрдерСкладТовары.Дата
|		КОНЕЦ МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, 0) И &КонецПериода
|	И РасходныйОрдерСкладТовары.Проведен = ИСТИНА
|	И РасходныйОрдерСкладТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
|	И РасходныйОрдерСкладТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Получатель КАК Справочник.СтруктурныеЕдиницы),
|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки,
|	РасходныйОрдерСкладТовары.ДатаРаспределения
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	втТипыМагазинов.ТорговаяТочка,
|	втТипыМагазинов.ДатаРаспределения
|ПОМЕСТИТЬ втМагазиныОтбор
|ИЗ
|	втТипыМагазинов КАК втТипыМагазинов
|ГДЕ
|	ВЫБОР
|			КОГДА &ОтборПоТипуМагазина = ""Магазины с пересчетом""
|				ТОГДА втТипыМагазинов.ПриемкаТовараБезПересчета = ЛОЖЬ
|			КОГДА &ОтборПоТипуМагазина = ""Магазины без пересчета (с контрольным пересчетом в магазине)""
|				ТОГДА втТипыМагазинов.ПриемкаТовараБезПересчета = ИСТИНА
|						И втТипыМагазинов.ПриемкаВМагазинеБезПересчета = 2
|			КОГДА &ОтборПоТипуМагазина = ""Магазины без пересчета""
|				ТОГДА втТипыМагазинов.ПриемкаТовараБезПересчета = ИСТИНА
|						И втТипыМагазинов.ПриемкаВМагазинеБезПересчета <> 2
|			ИНАЧЕ ИСТИНА
|		КОНЕЦ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТЗ_ДанныеБезСуммСоСкладом.ТТ,
|	ТЗ_ДанныеБезСуммСоСкладом.Номенклатура,
|	ТЗ_ДанныеБезСуммСоСкладом.Недостача,
|	ТЗ_ДанныеБезСуммСоСкладом.Излишки,
|	ТЗ_ДанныеБезСуммСоСкладом.СуммаНедостачи * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаНедостачи,
|	ТЗ_ДанныеБезСуммСоСкладом.СуммаИзлишки * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаИзлишки,
|	ТЗ_ДанныеБезСуммСоСкладом.Дата КАК Дата,
|	ВЫБОР
|		КОГДА ТЗ_ДанныеБезСуммСоСкладом.Склад = ""!!!Склад неопределен""
|			ТОГДА ЕСТЬNULL(СкладыНоменклатурыИТорговыхТочекСрезПоследних.Склад, ""!!!Склад неопределен"")
|		ИНАЧЕ ТЗ_ДанныеБезСуммСоСкладом.Склад
|	КОНЕЦ КАК Склад,
|	""Отгрузка в ТТ"" КАК ВидДанных,
|	ВЫБОР
|		КОГДА ТЗ_ДанныеБезСуммСоСкладом.Склад = ""!!!Склад неопределен""
|			ТОГДА &Тип
|		ИНАЧЕ ТЗ_ДанныеБезСуммСоСкладом.Склад.Владелец.ТипСтруктурнойЕдиницы
|	КОНЕЦ КАК ТипСклада
|ИЗ
|	ТЗ_ДанныеБезСуммСоСкладом КАК ТЗ_ДанныеБезСуммСоСкладом
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&КонецПериода, ) КАК СебестоимостьТоваровСрезПоследних
|		ПО ТЗ_ДанныеБезСуммСоСкладом.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыНоменклатурыИТорговыхТочек.СрезПоследних(&КонецПериода, ) КАК СкладыНоменклатурыИТорговыхТочекСрезПоследних
|		ПО ТЗ_ДанныеБезСуммСоСкладом.ТТ = СкладыНоменклатурыИТорговыхТочекСрезПоследних.ТорговаяТочка
|			И ТЗ_ДанныеБезСуммСоСкладом.Номенклатура = СкладыНоменклатурыИТорговыхТочекСрезПоследних.Номенклатура
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМагазиныОтбор КАК втМагазиныОтбор
|		ПО ТЗ_ДанныеБезСуммСоСкладом.Дата = втМагазиныОтбор.ДатаРаспределения
|			И ТЗ_ДанныеБезСуммСоСкладом.ТТ = втМагазиныОтбор.ТорговаяТочка
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК ЗначенияСвойствСтруктурныхЕдиниц
|		ПО ТЗ_ДанныеБезСуммСоСкладом.ТТ = ЗначенияСвойствСтруктурныхЕдиниц.СтруктурнаяЕдиница
|			И (ЗначенияСвойствСтруктурныхЕдиниц.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ВыездноеМероприятие))
|ГДЕ
|	ВЫРАЗИТЬ(ТЗ_ДанныеБезСуммСоСкладом.ТТ КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
|	И (ЗначенияСвойствСтруктурныхЕдиниц.Значение ЕСТЬ NULL
|			ИЛИ НЕ ЗначенияСвойствСтруктурныхЕдиниц.Значение)
|
|УПОРЯДОЧИТЬ ПО
|	Дата";

		Выб=Запрос1.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗРез.Добавить(),Выб);
		КонецЦикла; 
		
		Запрос1.Текст="ВЫБРАТЬ
		              |	МАКСИМУМ(ЕСТЬNULL(ПриходныйОрдерСклад.Склад, ""!!!Склад неопределен"")) КАК Склад,
		              |	ПоступлениеТоваровУслугПриходныеОрдера.Ссылка КАК Поступление
		              |ПОМЕСТИТЬ ТаблицаСкладов
		              |ИЗ
		              |	Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
		              |		ПО ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер = ПриходныйОрдерСклад.Ссылка
		              |ГДЕ
		              |	ПриходныйОрдерСклад.Ссылка В
		              |			(ВЫБРАТЬ
		              |				ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер
		              |			ИЗ
		              |				Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
		              |			ГДЕ
		              |				ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		              |				И ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Проведен
		              |				И ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.ВидОперации = &ВидОперацииПоступления)
		              |	И ПриходныйОрдерСклад.Проведен
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ПоступлениеТоваровУслугПриходныеОрдера.Ссылка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслугТовары.Ссылка.Дата, ДЕНЬ) КАК Дата,
		              |	ЕСТЬNULL(ТаблицаСкладов.Склад, ""!!!Склад неопределен"") КАК Склад,
		              |	""Поступление от поставщика"" КАК ВидДанных,
		              |	ЕСТЬNULL(ФинансовыйОборотыДтКтИзлишки.КоличествоОборотДт, 0) КАК Излишки,
		              |	ЕСТЬNULL(ФинансовыйОборотыДтКтИзлишки.СуммаОборот, 0) КАК СуммаИзлишки,
		              |	ЕСТЬNULL(ФинансовыйОборотыДтКтНедостача.СуммаОборот, 0) КАК СуммаНедостачи,
		              |	ЕСТЬNULL(ФинансовыйОборотыДтКтНедостача.КоличествоОборотКт, 0) КАК Недостача,
		              |	ПоступлениеТоваровУслугТовары.Номенклатура,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ТаблицаСкладов.Склад, ""!!!Склад неопределен"") = ""!!!Склад неопределен""
		              |			ТОГДА &Тип
		              |		ИНАЧЕ ТаблицаСкладов.Склад.Владелец.ТипСтруктурнойЕдиницы
		              |	КОНЕЦ КАК ТипСклада
		              |ПОМЕСТИТЬ ВремТабПриходныйОрдер
		              |ИЗ
		              |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ОборотыДтКт(
		              |				&НачалоПериода,
		              |				&КонецПериода,
		              |				Авто,
		              |				СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		              |					ИЛИ СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска),
		              |				,
		              |				СчетКт = &Счет441,
		              |				,
		              |				СубконтоДт3 = &ОтклонениеВПоступленииТоваров) КАК ФинансовыйОборотыДтКтИзлишки
		              |		ПО ПоступлениеТоваровУслугТовары.Ссылка = ФинансовыйОборотыДтКтИзлишки.Регистратор
		              |			И (ПоступлениеТоваровУслугТовары.Номенклатура = ВЫБОР
		              |				КОГДА ФинансовыйОборотыДтКтИзлишки.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		              |					ТОГДА ФинансовыйОборотыДтКтИзлишки.СубконтоДт2
		              |				ИНАЧЕ ФинансовыйОборотыДтКтИзлишки.СубконтоДт1
		              |			КОНЕЦ)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ОборотыДтКт(
		              |				&НачалоПериода,
		              |				&КонецПериода,
		              |				Авто,
		              |				СчетДт = &Счет441,
		              |				,
		              |				СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		              |					ИЛИ СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска),
		              |				,
		              |				СубконтоКт3 = &ОтклонениеВПоступленииТоваров) КАК ФинансовыйОборотыДтКтНедостача
		              |		ПО ПоступлениеТоваровУслугТовары.Ссылка = ФинансовыйОборотыДтКтНедостача.Регистратор
		              |			И (ПоступлениеТоваровУслугТовары.Номенклатура = ВЫБОР
		              |				КОГДА ФинансовыйОборотыДтКтНедостача.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		              |					ТОГДА ФинансовыйОборотыДтКтНедостача.СубконтоКт2
		              |				ИНАЧЕ ФинансовыйОборотыДтКтНедостача.СубконтоКт1
		              |			КОНЕЦ)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		              |		ПО ПоступлениеТоваровУслугТовары.Ссылка = ТаблицаСкладов.Поступление
		              |ГДЕ
		              |	ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		              |	И ПоступлениеТоваровУслугТовары.Ссылка.ВидОперации = &ВидОперацииПоступления
		              |	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ВремТабПриходныйОрдер.Дата,
		              |	ВремТабПриходныйОрдер.Склад,
		              |	ВремТабПриходныйОрдер.ВидДанных,
		              |	ВремТабПриходныйОрдер.Излишки,
		              |	ВремТабПриходныйОрдер.СуммаИзлишки,
		              |	ВремТабПриходныйОрдер.СуммаНедостачи,
		              |	ВремТабПриходныйОрдер.Недостача,
		              |	ВремТабПриходныйОрдер.Номенклатура,
		              |	ВремТабПриходныйОрдер.ТипСклада
		              |ПОМЕСТИТЬ ТабБезСумм
		              |ИЗ
		              |	ВремТабПриходныйОрдер КАК ВремТабПриходныйОрдер
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТабБезСумм.Дата,
		              |	ТабБезСумм.Склад,
		              |	ТабБезСумм.ВидДанных,
		              |	ТабБезСумм.Излишки,
		              |	ТабБезСумм.СуммаИзлишки,
		              |	ТабБезСумм.СуммаНедостачи,
		              |	ТабБезСумм.Недостача,
		              |	ТабБезСумм.Номенклатура,
		              |	ТабБезСумм.ТипСклада
		              |ИЗ
		              |	ТабБезСумм КАК ТабБезСумм
		              |ГДЕ
		              |	(ТабБезСумм.Излишки <> 0
		              |			ИЛИ ТабБезСумм.Недостача <> 0
		              |			ИЛИ ТабБезСумм.СуммаИзлишки <> 0
		              |			ИЛИ ТабБезСумм.СуммаНедостачи <> 0)
		              |	И &ВключаяПоступленияОтПоставщиков";
		Выб=Запрос1.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗРез.Добавить(),Выб);
		КонецЦикла; 
		
		
		
		Запрос1.Текст="ВЫБРАТЬ
		              |	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		              |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
		              |	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
		              |	НАЧАЛОПЕРИОДА(ВЫБОР
		              |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
		              |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ, ДЕНЬ) КАК Дата,
		              |	РасходныйОрдерСкладТовары.Ссылка
		              |ПОМЕСТИТЬ ВТ_Расход
		              |ИЗ
		              |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		              |ГДЕ
		              |	ВЫБОР
		              |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
		              |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
		              |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		              |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		              |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.Перемещение)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	РасходныйОрдерСкладТовары.Номенклатура,
		              |	РасходныйОрдерСкладТовары.Ссылка.Склад,
		              |	НАЧАЛОПЕРИОДА(ВЫБОР
		              |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
		              |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ, ДЕНЬ),
		              |	РасходныйОрдерСкладТовары.Ссылка
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	Номенклатура
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		              |	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
		              |	ПриходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
		              |	НАЧАЛОПЕРИОДА(ВЫБОР
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата < ДАТАВРЕМЯ(2014, 3, 1)
		              |				ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА ВЫБОР
		              |						КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика < ДАТАВРЕМЯ(2014, 3, 1)
		              |								И ПриходныйОрдерСкладТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 3, 1)
		              |							ТОГДА ДАТАВРЕМЯ(2014, 3, 1)
		              |						ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика
		              |					КОНЕЦ
		              |			ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ, ДЕНЬ) КАК Дата,
		              |	ПриходныйОрдерСкладТовары.Ссылка.Основание
		              |ПОМЕСТИТЬ ВТ_Приход
		              |ИЗ
		              |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		              |ГДЕ
		              |	ВЫБОР
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата < ДАТАВРЕМЯ(2014, 3, 1)
		              |				ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА ВЫБОР
		              |						КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика < ДАТАВРЕМЯ(2014, 3, 1)
		              |								И ПриходныйОрдерСкладТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 3, 1)
		              |							ТОГДА ДАТАВРЕМЯ(2014, 3, 1)
		              |						ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика
		              |					КОНЕЦ
		              |			ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
		              |	И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		              |	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.Перемещение)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ПриходныйОрдерСкладТовары.Номенклатура,
		              |	ПриходныйОрдерСкладТовары.Ссылка.Склад,
		              |	ПриходныйОрдерСкладТовары.Ссылка.Основание,
		              |	НАЧАЛОПЕРИОДА(ВЫБОР
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата < ДАТАВРЕМЯ(2014, 3, 1)
		              |				ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА ВЫБОР
		              |						КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика < ДАТАВРЕМЯ(2014, 3, 1)
		              |								И ПриходныйОрдерСкладТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 3, 1)
		              |							ТОГДА ДАТАВРЕМЯ(2014, 3, 1)
		              |						ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика
		              |					КОНЕЦ
		              |			ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ, ДЕНЬ)
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	Номенклатура
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		              |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
		              |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК Склад
		              |ПОМЕСТИТЬ ВТ_РасходДоп
		              |ИЗ
		              |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		              |ГДЕ
		              |	ВЫБОР
		              |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
		              |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
		              |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		              |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		              |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.Перемещение)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	РасходныйОрдерСкладТовары.Номенклатура,
		              |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	Номенклатура
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		              |	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
		              |	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК Склад
		              |ПОМЕСТИТЬ ВТ_ПриходДоп
		              |ИЗ
		              |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		              |ГДЕ
		              |	ВЫБОР
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата < ДАТАВРЕМЯ(2014, 3, 1)
		              |				ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика <> ДАТАВРЕМЯ(1, 1, 1)
		              |				ТОГДА ВЫБОР
		              |						КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика < ДАТАВРЕМЯ(2014, 3, 1)
		              |								И ПриходныйОрдерСкладТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 3, 1)
		              |							ТОГДА ДАТАВРЕМЯ(2014, 3, 1)
		              |						ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика
		              |					КОНЕЦ
		              |			ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата
		              |		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
		              |	И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		              |	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.Перемещение)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ПриходныйОрдерСкладТовары.Номенклатура,
		              |	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	Номенклатура
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ЕСТЬNULL(ВТ_РасходДоп.Номенклатура, ВТ_ПриходДоп.Номенклатура) КАК Номенклатура
		              |ПОМЕСТИТЬ ТабОграничениеПоНоменклатуре
		              |ИЗ
		              |	ВТ_РасходДоп КАК ВТ_РасходДоп
		              |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПриходДоп КАК ВТ_ПриходДоп
		              |		ПО ВТ_РасходДоп.Номенклатура = ВТ_ПриходДоп.Номенклатура
		              |			И ВТ_РасходДоп.Склад <> ВТ_ПриходДоп.Склад
		              |ГДЕ
		              |	ЕСТЬNULL(ВТ_РасходДоп.Количество, 0) - ЕСТЬNULL(ВТ_ПриходДоп.Количество, 0) <> 0
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ЕСТЬNULL(ВТ_РасходДоп.Номенклатура, ВТ_ПриходДоп.Номенклатура)
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ЕСТЬNULL(ВТ_Расход.Номенклатура, ВТ_Приход.Номенклатура) КАК Номенклатура,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ВТ_Расход.Количество, 0) > ЕСТЬNULL(ВТ_Приход.Количество, 0)
		              |			ТОГДА ЕСТЬNULL(ВТ_Расход.Количество, 0) - ЕСТЬNULL(ВТ_Приход.Количество, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ КАК Недостача,
		              |	ЕСТЬNULL(ВТ_Расход.Склад, ВТ_Приход.Склад) КАК Склад,
		              |	ЕСТЬNULL(ВТ_Расход.Дата, ВТ_Приход.Дата) КАК Дата,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ВТ_Расход.Количество, 0) < ЕСТЬNULL(ВТ_Приход.Количество, 0)
		              |			ТОГДА ЕСТЬNULL(ВТ_Приход.Количество, 0) - ЕСТЬNULL(ВТ_Расход.Количество, 0)
		              |		ИНАЧЕ 0
		              |	КОНЕЦ КАК Излишки
		              |ПОМЕСТИТЬ ТабБезСумм
		              |ИЗ
		              |	ВТ_Расход КАК ВТ_Расход
		              |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
		              |		ПО ВТ_Расход.Номенклатура = ВТ_Приход.Номенклатура
		              |			И ВТ_Расход.Ссылка = ВТ_Приход.Основание
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТабБезСумм.Склад.Владелец.ТипСтруктурнойЕдиницы КАК ТипСклада,
		              |	ТабБезСумм.Номенклатура,
		              |	ТабБезСумм.Склад,
		              |	ТабБезСумм.Дата,
		              |	ТабБезСумм.Излишки,
		              |	ТабБезСумм.Недостача,
		              |	ТабБезСумм.Излишки * СебестоимостьТоваровСрезПоследних.Себестоимость КАК СуммаИзлишки,
		              |	ТабБезСумм.Недостача * СебестоимостьТоваровСрезПоследних.Себестоимость КАК СуммаНедостачи,
		              |	""Перемещение на склад"" КАК ВидДанных
		              |ИЗ
		              |	ТабБезСумм КАК ТабБезСумм
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&КонецПериода, ) КАК СебестоимостьТоваровСрезПоследних
		              |		ПО ТабБезСумм.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
		              |ГДЕ
		              |	ТабБезСумм.Номенклатура В
		              |			(ВЫБРАТЬ
		              |				ТабОграничениеПоНоменклатуре.Номенклатура
		              |			ИЗ
		              |				ТабОграничениеПоНоменклатуре КАК ТабОграничениеПоНоменклатуре)
		              |	И (ТабБезСумм.Излишки <> 0
		              |			ИЛИ ТабБезСумм.Недостача <> 0)
		              |	И &ВключаяПеремещенияНаСклад";
		Выб=Запрос1.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗРез.Добавить(),Выб);
		КонецЦикла; 
		
		
		
		
		
		
		
		
		
		
	    //АК БЕЛН 29.09.2017+
		
		Запрос=Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК Количество,
		               |	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0)) КАК Стоимость,
		               |	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК ТорговаяТочка,
		               |	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки КАК ТипРозничнойТочки,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета < 0
		               |				ТОГДА -РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета
		               |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета
		               |		КОНЕЦ) КАК ПриемкаВМагазинеБезПересчета,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ВЫБОР
		               |					КОГДА РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета < 0
		               |						ТОГДА -РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета
		               |					ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.ПриемкаВМагазинеБезПересчета
		               |				КОНЕЦ В (1, 2)
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ЛОЖЬ
		               |		КОНЕЦ) КАК ПриемкаТовараБезПересчета,
		               |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
		               |ИЗ
		               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&Дата2, ) КАК СебестоимостьТоваровСрезПоследних
		               |		ПО РасходныйОрдерСкладТовары.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
		               |ГДЕ
		               |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения МЕЖДУ &Дата1 И &Дата2
		               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы),
		               |	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки,
		               |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения";
		
			
		Запрос.УстановитьПараметр("Дата1",НачалоПериода);	
		Запрос.УстановитьПараметр("Дата2",КонецПериода);	
		Выборка=Запрос.Выполнить().Выбрать();
		МасБезПересчетаСКонтрПересчетом=Новый Массив;
		КолСПересчетом=0;
		СумСПересчетом=0;
		КолБезПересчетаСКПМ=0;
		СумБезПересчетаСКПМ=0;
		КолБезПересчета=0;
		СумБезПересчета=0;
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПриемкаТовараБезПересчета=Истина Тогда
				Если (Выборка.ПриемкаВМагазинеБезПересчета=2 ИЛИ Выборка.ПриемкаВМагазинеБезПересчета=-2) Тогда
					КолБезПересчетаСКПМ=КолБезПересчетаСКПМ+Выборка.Количество;
					СумБезПересчетаСКПМ=СумБезПересчетаСКПМ+Выборка.Стоимость;
				Иначе
					КолБезПересчета=КолБезПересчета+Выборка.Количество;
					СумБезПересчета=СумБезПересчета+Выборка.Стоимость;
				КонецЕсли;
			Иначе
				КолСПересчетом=КолСПересчетом+Выборка.Количество;
				СумСПересчетом=СумСПересчетом+Выборка.Стоимость;
			КонецЕсли; 
		КонецЦикла; 
	    //АК БЕЛН 29.09.2017-
		
	   // Запрос = Новый Запрос;
	   // 
	   // Запрос.Текст = "ВЫБРАТЬ
	   //                |	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница КАК ТТ,
	   //                |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	   //                |	СУММА(ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот) КАК Поступило,
	   //                |	НАЧАЛОПЕРИОДА(ДвиженияТоваровПоЛистамУчетаОбороты.Период, ДЕНЬ) КАК День
	   //                |ПОМЕСТИТЬ ВремТабПоступило
	   //                |ИЗ
	   //                |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(&ДатаНач, &ДатаКон, День, ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Поступление)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
	   //                |ГДЕ
	   //                |	НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
	   //                |				(ВЫБРАТЬ
	   //                |					Номенклатура.Ссылка
	   //                |				ИЗ
	   //                |					Справочник.Номенклатура КАК Номенклатура
	   //                |				ГДЕ
	   //                |					Номенклатура.СлужебныйТовар = ИСТИНА)
	   //                |
	   //                |СГРУППИРОВАТЬ ПО
	   //                |	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница,
	   //                |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	   //                |	НАЧАЛОПЕРИОДА(ДвиженияТоваровПоЛистамУчетаОбороты.Период, ДЕНЬ)
	   //                |;
	   //                |
	   //                |////////////////////////////////////////////////////////////////////////////////
	   //                |ВЫБРАТЬ
	   //                |	ЕСТЬNULL(ВложенныйЗапрос.Номенклатура, ВремТабПоступило.Номенклатура) КАК Номенклатура,
	   //                |	ВЫБОР
	   //                |		КОГДА ЕСТЬNULL(ВложенныйЗапрос.Количество, 0) < ЕСТЬNULL(ВремТабПоступило.Поступило, 0)
	   //                |			ТОГДА ЕСТЬNULL(ВремТабПоступило.Поступило, 0) - ЕСТЬNULL(ВложенныйЗапрос.Количество, 0)
	   //                |		ИНАЧЕ 0
	   //                |	КОНЕЦ КАК Излишки,
	   //                |	ВЫБОР
	   //                |		КОГДА ЕСТЬNULL(ВложенныйЗапрос.Количество, 0) > ЕСТЬNULL(ВремТабПоступило.Поступило, 0)
	   //                |			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.Количество, 0) - ЕСТЬNULL(ВремТабПоступило.Поступило, 0)
	   //                |		ИНАЧЕ 0
	   //                |	КОНЕЦ КАК Недостача,
	   //                |	ВЫБОР
	   //                |		КОГДА ВложенныйЗапрос.Дата = ДАТАВРЕМЯ(1, 1, 1)
	   //                |			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВложенныйЗапрос.Дата, ВремТабПоступило.День), ДЕНЬ)
	   //                |		ИНАЧЕ НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВложенныйЗапрос.Дата, ВремТабПоступило.День), ДЕНЬ)
	   //                |	КОНЕЦ КАК Дата,
	   //                |	""Отгрузка В ТТ"" КАК ВидДанных,
	   //                |	ЕСТЬNULL(ВложенныйЗапрос.Склад, ""!!!Склад неопределен"") КАК Склад
	   //                |ПОМЕСТИТЬ ТабБезСумм
	   //                |ИЗ
	   //                |	ВремТабПоступило КАК ВремТабПоступило
	   //                |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	   //                |			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	   //                |			СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	   //                |			ВложенныйЗапрос.Дата КАК Дата,
	   //                |			ВложенныйЗапрос.Получатель КАК Получатель,
	   //                |			ВложенныйЗапрос.Склад КАК Склад
	   //                |		ИЗ
	   //                |			(ВЫБРАТЬ
	   //                |				РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	   //                |				СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	   //                |				НАЧАЛОПЕРИОДА(ВЫБОР
	   //                |						КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	   //                |							ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	   //                |						ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	   //                |					КОНЕЦ, ДЕНЬ) КАК Дата,
	   //                |				РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Получатель,
	   //                |				РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад
	   //                |			ИЗ
	   //                |				Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	   //                |			ГДЕ
	   //                |				ВЫБОР
	   //                |						КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	   //                |							ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	   //                |						ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	   //                |					КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
	   //                |				И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	   //                |				И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	   //                |				И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	   //                |			
	   //                |			СГРУППИРОВАТЬ ПО
	   //                |				РасходныйОрдерСкладТовары.Номенклатура,
	   //                |				НАЧАЛОПЕРИОДА(ВЫБОР
	   //                |						КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	   //                |							ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	   //                |						ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	   //                |					КОНЕЦ, ДЕНЬ),
	   //                |				РасходныйОрдерСкладТовары.Ссылка.Получатель,
	   //                |				РасходныйОрдерСкладТовары.Ссылка.Склад
	   //                |			
	   //                |			ОБЪЕДИНИТЬ ВСЕ
	   //                |			
	   //                |			ВЫБРАТЬ
	   //                |				ПриходныйОрдерСкладТовары.Номенклатура,
	   //                |				СУММА(ПриходныйОрдерСкладТовары.Количество * -1),
	   //                |				НАЧАЛОПЕРИОДА(ПриходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ),
	   //                |				ПриходныйОрдерСкладТовары.Ссылка.Поставщик,
	   //                |				ПриходныйОрдерСкладТовары.Ссылка.Склад
	   //                |			ИЗ
	   //                |				Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	   //                |			ГДЕ
	   //                |				ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	   //                |				И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	   //                |				И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки)
	   //                |			
	   //                |			СГРУППИРОВАТЬ ПО
	   //                |				ПриходныйОрдерСкладТовары.Номенклатура,
	   //                |				НАЧАЛОПЕРИОДА(ПриходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ),
	   //                |				ПриходныйОрдерСкладТовары.Ссылка.Поставщик,
	   //                |				ПриходныйОрдерСкладТовары.Ссылка.Склад) КАК ВложенныйЗапрос
	   //                |		
	   //                |		СГРУППИРОВАТЬ ПО
	   //                |			ВложенныйЗапрос.Номенклатура,
	   //                |			ВложенныйЗапрос.Дата,
	   //                |			ВложенныйЗапрос.Получатель,
	   //                |			ВложенныйЗапрос.Склад) КАК ВложенныйЗапрос
	   //                |		ПО (ВложенныйЗапрос.Получатель = ВремТабПоступило.ТТ)
	   //                |			И (ВложенныйЗапрос.Номенклатура = ВремТабПоступило.Номенклатура)
	   //                |			И (ВЫБОР
	   //                |				КОГДА ВложенныйЗапрос.Дата = ДАТАВРЕМЯ(1, 1, 1)
	   //                |					ТОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Дата, ДЕНЬ) = ВремТабПоступило.День
	   //                |				ИНАЧЕ НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Дата, ДЕНЬ) = ВремТабПоступило.День
	   //                |			КОНЕЦ)
	   //                |ГДЕ
	   //                |	ЕСТЬNULL(ВложенныйЗапрос.Дата, ВремТабПоступило.День) МЕЖДУ &ДатаНач И &ДатаКон
	   //                |;
	   //                |
	   //                |////////////////////////////////////////////////////////////////////////////////
	   //                |ВЫБРАТЬ
	   //                |	ТабБезСумм.Излишки,
	   //                |	ТабБезСумм.Недостача,
	   //                |	ТабБезСумм.Дата,
	   //                |	ТабБезСумм.ВидДанных,
	   //                |	ТабБезСумм.Недостача * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаНедостачи,
	   //                |	ТабБезСумм.Излишки * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаИзлишки,
	   //                |	ТабБезСумм.Номенклатура,
	   //                |	ТабБезСумм.Склад
	   //                |ИЗ
	   //                |	ТабБезСумм КАК ТабБезСумм
	   //                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&ДатаКон, ) КАК СебестоимостьТоваровСрезПоследних
	   //                |		ПО ТабБезСумм.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
	   //                |ГДЕ
	   //                |	(ТабБезСумм.Излишки <> 0
	   //                |			ИЛИ ТабБезСумм.Недостача <> 0)";
	   // 			   
	   // Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	   // Запрос.УстановитьПараметр("ДатаКон", КонецПериода);
	   // Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);
	   // Запрос.УстановитьПараметр("ТабПоступило", ТаблицаДанныхПоПоступлению);
	   //// Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоНаименованию("Молоко цельное"));
		
	КонецЕсли;
	
	//МассивРезультатов = Запрос.ВыполнитьПакет();
	
	
	
	//Ном=Справочники.Номенклатура.НайтиПоНаименованию("Сыр ""Молога""");
	//Кол=ТЗРез.Количество();
	//Для Сч=0 По Кол-1 Цикл
	//	Если НЕ Ном=ТЗРез[Кол-1-Сч].Номенклатура Тогда
	//		ТЗРез.Удалить(Кол-1-Сч);
	//		
	//	
	//	КонецЕсли; 
	//	
	//
	//КонецЦикла; 
	
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("ТЗ", ТЗРез);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки
	);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		ВнешниеНаборыДанных,
		ДанныеРасшифровки
	);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	//АК БЕЛН 29.09.2017+
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы+1,1,ДокументРезультат.ВысотаТаблицы+1,1).Текст="Итого распределенных товаров";
	//+Строка(Окр(КолСПересчетом,2))+", сумма "+Строка(Окр(СумСПересчетом,2))+
	//"; по магазинам без пересчета (с контрольным пересчетом в магазинах): количество "+Строка(Окр(КолБезПересчетаСКПМ,2))+", сумма "+Строка(Окр(СумБезПересчетаСКПМ,2))+
	//"; по магазинам без пересчета: количество "+Строка(Окр(КолБезПересчета,2))+", сумма "+Строка(Окр(СумБезПересчета,2));
	
	
	Мак=Отчеты.ОтчетПоПотерямСклада.ПолучитьМакет("МакетИтогов");
	Обл=Мак.ПолучитьОбласть("Шапка");
	ДокументРезультат.Вывести(Обл);
	Обл=Мак.ПолучитьОбласть("Строка");
	Обл.Параметры.ТипМагазина="Магазины с пересчетом";
	Обл.Параметры.Количество=Окр(КолСПересчетом,2);
	Обл.Параметры.Сумма=Окр(СумСПересчетом,2);
	ДокументРезультат.Вывести(Обл);
	
	Обл.Параметры.ТипМагазина="Магазины без пересчета (с контрольным пересчетом в магазинах)";
	Обл.Параметры.Количество=Окр(КолБезПересчетаСКПМ,2);
	Обл.Параметры.Сумма=Окр(СумБезПересчетаСКПМ,2);
	ДокументРезультат.Вывести(Обл);
	
	Обл.Параметры.ТипМагазина="Магазины без пересчета";
	Обл.Параметры.Количество=Окр(КолБезПересчета,2);
	Обл.Параметры.Сумма=Окр(СумБезПересчета,2);
	ДокументРезультат.Вывести(Обл);
	
	//АК БЕЛН 29.09.2017-
КонецПроцедуры



Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетамиИнфоком.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
