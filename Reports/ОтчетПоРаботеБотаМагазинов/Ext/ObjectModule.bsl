
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	ДатаНачала = НачалоДня(ТекущаяДата());	
	ДатаОкончания = КонецДня(ТекущаяДата());
	
	СхемаКД					= СхемаКомпоновкиДанных;
	КомпоновщикНастроекКД	= КомпоновщикНастроек;
	
	СтандартныйПериод = ЗначениеПараметраКД("СтандартныйПериод");
	Если ЗначениеЗаполнено(СтандартныйПериод) = Истина Тогда
		ДатаНачала = СтандартныйПериод.ДатаНачала;
		ДатаОкончания = КонецДня(СтандартныйПериод.ДатаОкончания);
	КонецЕсли;	
	
	
	Если КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта = "Статистика" Тогда
		ТЗСтатистика = ПолучитьТаблицуСтатистики(ДатаНачала, ДатаОкончания);
		
		Если ТЗСтатистика.Количество() > 0 Тогда
			
			ВнешниеНаборыДанных = Новый Структура("ТЗСтатистика", ТЗСтатистика);
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД, КомпоновщикНастроекКД.ПолучитьНастройки(), ДанныеРасшифровки);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
			
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		КонецЕсли;
	Иначе	
		ТЗСообщений = ПолучитьТаблицуСообщений(ДатаНачала, ДатаОкончания);
		
		Если ТЗСообщений.Количество() > 0 Тогда
			
			ВнешниеНаборыДанных = Новый Структура("ТЗСообщений", ТЗСообщений);
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД, КомпоновщикНастроекКД.ПолучитьНастройки(), ДанныеРасшифровки);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
			
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;

	
	
	
	
КонецПроцедуры

Функция ПолучитьТаблицуСообщений(ДатаНачала, ДатаОкончания)
	
	ТекстЗапроса = "SET NOCOUNT ON
	|if OBJECT_ID('tempdb..#temp') is not null drop table #temp
	|	
	|DECLARE @pdatemin datetime = '" + Формат(ДатаНачала,"ДФ='yyyy-dd-MM ЧЧ:мм:сс'") + "' 
	|		,@pdatemax datetime = '" + Формат(ДатаОкончания,"ДФ='yyyy-dd-MM ЧЧ:мм:сс'") + "'
	|
	|	SELECT 	[_Fld183] As Req_ID	
	|into #temp	
	|FROM [telegramm_hotline].[dbo].[_InfoRg181] with(nolock)
	|  WHERE case WHEN  _Fld190 = '2001.01.01' then 
	|		dateadd(year, 0,'1900.01.01')
	|	else 
	|	dateadd(year, -2000,_Fld190) end >= @pdatemin
	|  AND  case WHEN  _Fld190 = '2001.01.01' then 
	|	dateadd(year, 0,'1900.01.01')
	|	else 
	|	dateadd(year, -2000,_Fld190) end <= @pdatemax
	|GROUP BY 
	|	[_Fld183]
	|	
	|SELECT 
	|  dateadd(year, -2000, _Period) As CorrectedDate
	|  ,[_Fld182] AS Telegram_ID
	|  ,[_Fld183] AS Req_ID
	|  ,case WHEN  _Fld184 = '2001.01.01' then 
	|	dateadd(year, 0,'1900.01.01')
	|	else 
	|	dateadd(year, -2000,_Fld184) end AS Srok
	|  ,[_Fld185] AS Reshenie
	|  ,case WHEN  _Fld190 = '2001.01.01' then 
	|	dateadd(year, 0,'1900.01.01')
	|	else 
	|	dateadd(year, -2000,_Fld190) end AS add_Date
	|  ,[_Fld186] AS InText
	|  ,[_Fld187] AS OutText
	|  ,[_Fld188] As Number
	|  ,[_Fld189] AS Reiting
	|  ,[_Fld192] As ShopNo
	|  ,[_Fld194] As CustName
	|  ,[_Fld195] As OpName
	|  ,[_Fld196] As CustPhone
	|    
	|  FROM [telegramm_hotline].[dbo].[_InfoRg181] With(nolock)
	|  WHERE [_Fld183] in (SELECT * FROM #temp)";
	  	  
	
	ТЗ = База_ВыполнитьЗапрос(ТекстЗапроса);
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат ТЗ;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсхДанные.CorrectedDate КАК ДатаСобытия,
	|	ИсхДанные.Req_ID КАК ИДОбращения,
	|	ИсхДанные.ShopNo КАК НомерМагазина,
	|	ИсхДанные.Number КАК НомерКарты,
	|	ИсхДанные.CustName КАК ИмяПокупателя,
	|	ИсхДанные.CustPhone КАК НомерТелефона,
	|	ИсхДанные.Reiting КАК Оценка,
	|	ИсхДанные.add_Date КАК ДатаОбращения,
	|	ИсхДанные.InText КАК ТекстОбращения,
	|	ИсхДанные.Reshenie КАК Решение,
	|	ИсхДанные.OutText КАК ТекстОтвета,
	|	ИсхДанные.add_Date КАК ДатаОтвета,
	|	ИсхДанные.Telegram_ID КАК АвторОтвета,
	|	ИсхДанные.OpName КАК ИмяОператора
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ТЗ КАК ИсхДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.ДатаСобытия,
	|	ВТ_ИсходныеДанные.ИДОбращения,
	|	ВТ_ИсходныеДанные.НомерМагазина,
	|	ВТ_ИсходныеДанные.НомерКарты,
	|	ВТ_ИсходныеДанные.ИмяПокупателя,
	|	ВТ_ИсходныеДанные.НомерТелефона,
	|	ВТ_ИсходныеДанные.Оценка,
	|	ВТ_ИсходныеДанные.ДатаОбращения,
	|	ВТ_ИсходныеДанные.ТекстОбращения,
	|	ВТ_ИсходныеДанные.Решение,
	|	ВТ_ИсходныеДанные.ТекстОтвета,
	|	ВТ_ИсходныеДанные.ДатаОтвета,
	|	ВТ_ИсходныеДанные.АвторОтвета,
	|	ВТ_ИсходныеДанные.ИмяОператора
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные";
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗРезультат;
	
КонецФункции	

Функция ПолучитьТаблицуСтатистики(ДатаНачала, ДатаОкончания)
	ТекстЗапроса = "SET NOCOUNT ON
	|DECLARE @pdatemin datetime = '" + Формат(ДатаНачала,"ДФ='yyyy-dd-MM ЧЧ:мм:сс'") + "' 
	|		,@pdatemax datetime = '" + Формат(ДатаОкончания,"ДФ='yyyy-dd-MM ЧЧ:мм:сс'") + "'
	|if OBJECT_ID('tempdb..#temp') is not null
	|drop table #temp
	|if OBJECT_ID('tempdb..#temp2') is not null
	|drop table #temp2
	|if OBJECT_ID('tempdb..#temp3') is not null
	|drop table #temp3
	|if OBJECT_ID('tempdb..#temp4') is not null
	|drop table #temp4
	|SELECT
	|       [_Fld183] AS F_D
	|     , [_Fld182] AS Tel_ID
	|     , [_Fld192] AS TT
	|     , [_Fld185] AS Status
	|     , 1         AS Total
	|     , CASE
	|              WHEN [_Fld185] = 'Не назначено, нет telegram id'
	|                     THEN 1
	|                     ELSE 0
	|       END AS No_Teleg
	|into
	|       #temp
	|FROM
	|       [telegramm_hotline].[dbo].[_InfoRg181]
	|WHERE
	|       [_Fld185] IN ('Назначено'
	|                   , 'Не назначено, нет telegram id')
	|       AND
	|       CASE
	|              WHEN _Fld190 = '2001.01.01'
	|                     THEN dateadd(year, 0,'1900.01.01')
	|                     ELSE dateadd(year, -2000,_Fld190)
	|       END >= @pdatemin
	|       AND
	|       CASE
	|              WHEN _Fld190 = '2001.01.01'
	|                     THEN dateadd(year, 0,'1900.01.01')
	|                     ELSE dateadd(year, -2000,_Fld190)
	|       END <= @pdatemax
	|/* ///////////////////////////////////////////// */
	|SELECT
	|         [_Fld183]      AS F_D
	|       , [_Fld182]      AS Tel_ID
	|       , MAX([_Period]) AS Period
	|into
	|         #temp2
	|FROM
	|         [telegramm_hotline].[dbo].[_InfoRg181]
	|WHERE
	|         CASE
	|                  WHEN _Fld190 = '2001.01.01'
	|                           THEN dateadd(year, 0,'1900.01.01')
	|                           ELSE dateadd(year, -2000,_Fld190)
	|         END >= @pdatemin
	|         AND
	|         CASE
	|                  WHEN _Fld190 = '2001.01.01'
	|                           THEN dateadd(year, 0,'1900.01.01')
	|                           ELSE dateadd(year, -2000,_Fld190)
	|         END <= @pdatemax
	|GROUP BY
	|         [_Fld183]
	|       , [_Fld182]
	|/* ///////////////////////////////////////////// */
	|SELECT
	|           [_Fld183] AS F_D
	|         , [_Fld182] AS Tel_ID
	|         , [_Fld185] AS Decision
	|into
	|           #temp3
	|FROM
	|           [telegramm_hotline].[dbo].[_InfoRg181] AS t1
	|           INNER JOIN
	|                      #temp2 AS t2
	|                      ON
	|                                 t1._Fld182     = t2.Tel_ID
	|                                 AND t1._Fld183 = t2.F_D
	|                                 AND t1._Period = t2.Period
	|                                 
	|/* ///////////////////////////////////////////// */
	|	
	|SELECT
	|           t1.F_D
	|         , t1.Tel_ID
	|         , t1.TT
	|         , t1.Total
	|         , CASE
	|                      WHEN t3.Decision           = 'Поддержка ВВ (автоматически)'
	|                                 AND t1.No_Teleg = 1
	|                                 THEN 'Поддержка ВВ (автоматически). Магазин не подключен'
	|                      WHEN t3.Decision           = 'Поддержка ВВ (автоматически)'
	|                                 AND t1.No_Teleg = 0
	|                                 THEN 'Поддержка ВВ (автоматически). По сроку'
	|                                 ELSE t3.Decision
	|           END As Decision
	|Into
	|           #temp4
	|FROM
	|           #temp As t1
	|           INNER JOIN
	|                      #temp3 AS t3
	|                      ON
	|                                 t1.F_D        = t3.F_D
	|                                 AND t1.Tel_ID = t3.Tel_ID
	|                                 
	|/* ///////////////////////////////////////////// */
	|                                 
	|SELECT
	|         Decision
	|       , TT
	|       , SUM(Total) AS Total
	|FROM
	|         #temp4
	|GROUP BY
	|         Decision
	|       , TT";
	
	
	ТЗ = База_ВыполнитьЗапрос(ТекстЗапроса);
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат ТЗ;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсхДанные.Decision КАК РезультатОбращения,
	|	ИсхДанные.TT КАК ТорговаяТочка,
	|	ИсхДанные.Total КАК ЧислоОбращений
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ТЗ КАК ИсхДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.РезультатОбращения,
	|	ВТ_ИсходныеДанные.ТорговаяТочка,
	|	ВТ_ИсходныеДанные.ЧислоОбращений
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные";
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗРезультат;

	
	
КонецФункции	

Функция База_ВыполнитьЗапрос(ТекстЗапроса) Экспорт
	ТЗВозврата = Новый ТаблицаЗначений;
	
	CurrentConnection = Неопределено;
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql04", "telegramm_hotline");
	Если CurrentConnection = Неопределено Тогда
		CurrentConnection = База_Подключение(СтрокаПодключения);
	КонецЕсли;
	
	Если CurrentConnection = Неопределено Тогда	
		Возврат CurrentConnection;
	КонецЕсли;
	
	
	RecordSet = CurrentConnection.Execute(ТекстЗапроса);	
	
	Если RecordSet.EOF() Тогда
		Возврат ТЗВозврата;		
	КонецЕсли;	
	
	МассивПеременных = Новый Массив;
	
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл 
		МассивПеременных.Добавить(RecordSet.Fields(НомерКолонки));		
	КонецЦикла; 
	
	Для каждого ЗначМассива из МассивПеременных Цикл
		МассивТипов = Новый Массив;
		Если ЗначМассива.Value = null Тогда
			Если ЗначМассива.Type = 200 Тогда
				МассивТипов.Добавить(Тип("Строка"));
			ИначеЕсли ЗначМассива.Type = 135 Тогда	
				МассивТипов.Добавить(Тип("Дата"));
			Иначе	
				МассивТипов.Добавить(Тип("Число"));
			КонецЕсли;	
		Иначе	
			МассивТипов.Добавить(ТипЗнч(ЗначМассива.Value));
		КонецЕсли;	
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);		
		
		ТЗВозврата.Колонки.Добавить(ЗначМассива.Name, ДопустимыеТипы);
	КонецЦикла;	
	
	
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл            
			
			СтрокаТаблицыЗначений = ТЗВозврата.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл 
				МассивПеременных.Добавить(RecordSet.Fields(НомерКолонки));
			КонецЦикла; 		
			
			Fields = RecordSet.Fields;
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = МассивПеременных[НомерКолонки].Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗВозврата;
	
	
КонецФункции

Функция База_Подключение(СтрокаПодключения)	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.Open(СтрокаПодключения);
		//ЗаписьЖурналаРегистрации("успешно",УровеньЖурналаРегистрации.Информация,,,);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		ЗаписьЖурналаРегистрации("Ошибка",,,,ОписаниеОшибки());
		#Если НаКлиенте тогда
			Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки; 	
КонецФункции


Функция ЗначениеПараметраКД(ИмяПараметра, ЗначениеПоУмолчанию = Неопределено)
	
	ЗначениеПараметра = ЗначениеПоУмолчанию;
	
	ПараметрКД = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(
	Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрКД <> Неопределено
		И ПараметрКД.Использование Тогда
		ЗначениеПараметра = ПараметрКД.Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции


Процедура СформироватьИРазослатьОтчет(ДатаНачала, ДатаОкончания) Экспорт
	
	ТЗ = ПолучитьТаблицуСообщений(ДатаНачала, ДатаОкончания);
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	
	ТЗ.Сортировать("НомерМагазина");
	
	ТекстСообщенияОбщий = "";
	
	ТекстСообщенияМагазин = "";
	
	ТЗВрем = ТЗ.Скопировать();
	ТЗВрем.Свернуть("НомерМагазина");
	
	Для каждого Стр Из ТЗВрем Цикл
		
		Кому = Новый СписокЗначений;
		//Кому.Добавить("luza@automacon.ru");
		
		ТЗУправляющих = ПолучитьТЗУправляющихМагазина(Стр.НомерМагазина);
		
		Для каждого СтрУпр Из ТЗУправляющих Цикл
			Если ЗначениеЗаполнено(СтрУпр.Представление) = Истина Тогда				
				Кому.Добавить(СтрУпр.Представление);
			КонецЕсли;	
		КонецЦикла;	

		
		ТекстСообщенияМагазин = "";			
		ТемаПисьма = "Отчет по обращениям поступившим в магазин №" + Формат(Стр.НомерМагазина, "ЧГ=") + " за период с " + Формат(ДатаНачала, "ДЛФ=DT") + " по " + Формат(ДатаОкончания, "ДЛФ=DT");
		
		ТекстСообщенияМагазин = "<h3> " + "Магазин № " + Формат(Стр.НомерМагазина, "ЧГ=") + "</h3>" +  "<br /> ";
					
		Фильтр = Новый Структура("НомерМагазина", Стр.НомерМагазина);
		ТЗМагазин = ТЗ.Скопировать(Фильтр);
		
		ТЗМагазин.Сортировать("ИДОбращения, ДатаОбращения, ДатаСобытия"); 
		
		ТекИД = "";
		
		Для каждого Стр Из ТЗМагазин Цикл
			
			Если Стр.ИДОбращения <> ТекИД Тогда
				Если ТекИД <> "" Тогда					
					ТекстСообщенияМагазин =  ТекстСообщенияМагазин + "</table>" +  "<br /> ";
				КонецЕсли;
				
				ТекИД = Стр.ИДОбращения;
				
				ТекстСообщенияМагазин = ТекстСообщенияМагазин + "<table border=""1"">
				|<caption>Оценка: "+ Строка(Стр.Оценка) + "</caption>
				|<tr>
				|<th width=""5%"">Номер карты</th>
				|<th width=""5%"">Номер телефона</th>
				|<th width=""10%"">Имя покупателя</th>
				|<th width=""10%"">Дата</th>
				|<th width=""10%"">Событие</th>
				|<th width=""10%"">Имя оператора</th>			
				|<th width=""25%"">Текст обращения</th>			
				|<th width=""25%"">Текст ответа</th>							
				|</tr>";
			КонецЕсли;	
			
			
			
			ТекстСообщенияМагазин = ТекстСообщенияМагазин + "<tr>
			|<td align = ""center"">" + XMLСтрока(Стр.НомерКарты) + "</td>
			|<td align = ""center"">" + XMLСтрока(Стр.НомерТелефона) + "</td>
			|<td align = ""center"">" + XMLСтрока(Стр.ИмяПокупателя) + "</td>
			|<td align = ""center"">" + XMLСтрока(Стр.ДатаСобытия) + "</td>
			|<td align = ""center"">" + XMLСтрока(Стр.Решение) + "</td>
			|<td align = ""center"">" + XMLСтрока(Стр.ИмяОператора) + " (" + XMLСтрока(Стр.АвторОтвета) + ")" + "</td>
			|<td align = ""left"">"   + XMLСтрока(Стр.ТекстОбращения) + "</td>
			|<td align = ""left"">"   + XMLСтрока(Стр.ТекстОтвета) + "</td>								
			|</tr>";
			
		КонецЦикла;	
		
		
		ТекстСообщенияМагазин =  ТекстСообщенияМагазин + "</table>";
		
				
		СтруктураНовогоПисьма = Новый Структура;
		СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.HTML);			
		СтруктураНовогоПисьма.Вставить("Тело",ТекстСообщенияМагазин);   		
		СтруктураНовогоПисьма.Вставить("Кому", Кому);
		СтруктураНовогоПисьма.Вставить("Тема", ТемаПисьма);
		
		Попытка
			//ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Истина);
		Исключение						
		КонецПопытки;
		
				
		ТекстСообщенияОбщий = ТекстСообщенияОбщий + "<br /> " + ТекстСообщенияМагазин;
		
	КонецЦикла;
	
	
	ТЗСтатистика = ПолучитьТаблицуСтатистики(ДатаНачала, ДатаОкончания);
	Если ТЗСтатистика.Количество() > 0 Тогда
		
		ТЗСтатистика.Свернуть("РезультатОбращения", "ЧислоОбращений");
		
		ТекстСообщенияОбщий = ТекстСообщенияОбщий + "<br />" + " Статистика за день";	
		
		ТекстСообщенияОбщий = ТекстСообщенияОбщий +	"<table border=""1"" width=""50%"">				
		|<tr>
		|<th width=""80%"">Результат обращения</th>
		|<th width=""20%"">Число обращений</th>
		|</tr>";
		
		Для каждого Стр Из ТЗСтатистика Цикл			
			ТекстСообщенияОбщий = ТекстСообщенияОбщий +	"<tr>
			|<td align = ""left"">" + XMLСтрока(Стр.РезультатОбращения) + "</td>
			|<td align = ""left"">"  + XMLСтрока(Стр.ЧислоОбращений) + "</td>
			|</tr>";  
		КонецЦикла;	
		
		ТекстСообщенияОбщий = ТекстСообщенияОбщий +	"<tr>
			|<td align = ""left"">" + XMLСтрока("ИТОГО") + "</td>
			|<td align = ""left"">"  + XMLСтрока(ТЗСтатистика.Итог("ЧислоОбращений")) + "</td>
			|</tr>"; 		
			
		ТекстСообщенияОбщий =  ТекстСообщенияОбщий + "</table>";

	КонецЕсли;	

	
	
	
	Кому = Новый СписокЗначений;
	Кому.Добавить("luza@automacon.ru");
	//Кому.Добавить("digital01@vkusvill.ru");
	//Кому.Добавить("filippova.bozieva@gmail.com");
	//Кому.Добавить("annyllat@gmail.com");
	//Кому.Добавить("tanyusha802@mail.ru");
	//Кому.Добавить("masher_33@mail.ru");
	//Кому.Добавить("zakaz_u@izbenka.msk.ru");
	
	ТемаПисьма = "Отчет по обращениям поступившим в магазины " + " за период с " + Формат(ДатаНачала, "ДЛФ=DT") + " по " + Формат(ДатаОкончания, "ДЛФ=DT");

	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.HTML);			
	СтруктураНовогоПисьма.Вставить("Тело",ТекстСообщенияОбщий);   		
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	СтруктураНовогоПисьма.Вставить("Тема", ТемаПисьма);
	
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Истина);
	Исключение						
	КонецПопытки;
	
	
КонецПроцедуры	



Функция ПолучитьТЗУправляющихМагазина(НомерМагазина)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ втСЕ
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.НомерТочки = &НомерТочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователей.Ссылка КАК Роль,
	|	РолиПользователей.ТипРоли
	|ПОМЕСТИТЬ втРолиПользователей
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						втСЕ.Ссылка
	|					ИЗ
	|						втСЕ КАК втСЕ)) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
	|			И (НЕ РолиПользователей.Ссылка.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Сотрудник,
	|	втРолиПользователей.ТипРоли
	|ПОМЕСТИТЬ втСотрудники
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРолиПользователей КАК втРолиПользователей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСЕ КАК втСЕ
	|			ПО втРолиПользователей.ТипРоли.ТипСтруктурнойЕдиницы = втСЕ.ТипСтруктурнойЕдиницы
	|		ПО РолиПользователейСоставРоли.Ссылка = втРолиПользователей.Роль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСотрудники.Сотрудник КАК Сотрудник,
	|	ПРЕДСТАВЛЕНИЕ(втСотрудники.Сотрудник) КАК СотрудникПредставление,
	|	ВЫБОР
	|		КОГДА втСотрудники.ТипРоли В (&МассивТипыРолейПоказыватьКИ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноКИ,
	|	КонтактнаяИнформация.Представление,
	|	втСотрудники.ТипРоли
	|ПОМЕСТИТЬ впИтог
	|ИЗ
	|	втСотрудники КАК втСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО втСотрудники.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид В (&МассивВидыКИ))
	|ГДЕ
	|	втСотрудники.ТипРоли В(&МассивТипыРолейПоказыватьКИ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впИтог.Сотрудник КАК Сотрудник,
	|	впИтог.СотрудникПредставление КАК СотрудникПредставление,
	|	впИтог.ДоступноКИ,
	|	впИтог.Представление,
	|	впИтог.ТипРоли.Наименование КАК ТипРоли
	|ИЗ
	|	впИтог КАК впИтог";
	
	
				
	ПомощникПоРознице = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;
		
	МассивТипыРолейПоказыватьКИ = Новый Массив;
	МассивТипыРолейПоказыватьКИ.Добавить(ПомощникПоРознице);
	
		
	EmailФизЛица = Справочники.ВидыКонтактнойИнформации.EmailФизЛица;	
	
	МассивВидыКИ = Новый Массив;	
	МассивВидыКИ.Добавить(EmailФизЛица);
	
	Запрос.УстановитьПараметр("МассивТипыРолейПоказыватьКИ", МассивТипыРолейПоказыватьКИ);
	Запрос.УстановитьПараметр("МассивВидыКИ", МассивВидыКИ);
	

	Запрос.УстановитьПараметр("НомерТочки", НомерМагазина);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;

КонецФункции	


Процедура ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма, ФлХТМЛ = Ложь)  
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	СпАдресов = Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение, ";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТабДок=СтруктураНовогоПисьма.Тело;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = 	ТабДок;
	Если Не ФлХТМЛ Тогда
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе	
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	КонецЕсли; 
	Если СтруктураНовогоПисьма.Свойство("ТабДок") Тогда
	
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = 	СтруктураНовогоПисьма.ТабДок;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	КонецЕсли; 	
	
	
	//Для каждого Эл1 Из СтруктураНовогоПисьма.СписокФайловВложений Цикл
	//	Письмо.Вложения.Добавить(Эл1.Значение.ИмяФайла);
	//КонецЦикла;
	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес.Значение;
	КонецЦикла;
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры
