////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует отчет на основании данных по изменению документов "Установка типов цен номенклатуры"(по РС "Версии объектов")
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров
//
Процедура СформироватьОправитьОтчетПоИзменениюРозничныхЦенТилси(СтруктураПараметров) Экспорт //+++АК mika 2018.10.29 ИП-00020041
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных")); 
		
	Если СтруктураПараметров.Свойство("ДатаАнализа") Тогда
		ДатаАнализа = СтруктураПараметров.ДатаАнализа;
		МакетКомпоновки.ЗначенияПараметров.ДатаАнализа.Значение = ДатаАнализа; 
	Иначе
		ДатаАнализа = МакетКомпоновки.ЗначенияПараметров.ДатаАнализа.Значение;
	КонецЕсли;

	Если ПроверитьНеобходимостьОтправкиДанных(СхемаКомпоновкиДанных.НаборыДанных.ИзменяемыеПозиции.Запрос, ДатаАнализа) Тогда 
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
		
		ДокументРезультат = Новый ТабличныйДокумент;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ОтправитьПисьмаПолучателям(ДокументРезультат, СтруктураПараметров);
		
	КонецЕсли;

КонецПроцедуры // СформироватьИОправитьОтчетПоИзменениюРозничныхЦенТилси()

// Выполняет проверку необходимости отправки данных об изменении розничных цен
//
// Параметры:
//  ТекстЗапроса  - <Тип.Строка> - Текст основного запроса
//  ДатаАнализа  - <Тип.Дата> - Дата анализа
//
// Возвращаемое значение:
//   <Тип.Булево>   - Результат проверки
//
Функция ПроверитьНеобходимостьОтправкиДанных(ТекстЗапроса, ДатаАнализа) //+++АК mika 2018.10.29 ИП-00020041

	Запрос = Новый Запрос (ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаАнализа", ДатаАнализа);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();

КонецФункции // ПроверитьНеобходимостьОтправкиДанных()

//Заполняет структуру параметров письма и отправляет получателям //+++АК mika 2018.10.29 ИП-00020041
//
// Параметры:
//  ТабличныйДокумент  - <Тип.ТабличныйДокумент> - Табличный документ для отправки
//  СтруктураПараметров - <Тип.Структура> - Структура дополнительных параметров
//
Процедура ОтправитьПисьмаПолучателям(ТабличныйДокумент, СтруктураПараметров)
	
	//Формирование структуры письма
	СтруктураПисьма = Новый Структура();
	СтруктураПисьма.Вставить("Получатели",  СтруктураПараметров.Получатели);
	СтруктураПисьма.Вставить("Отправитель", Документы.ИзменениеЗакупочныхЦен.ПолучитьУчетнуюЗаписьДляРассылки("no-reply@vkusvill.ru")); 
	СтруктураПисьма.Вставить("Тема",        СтрЗаменить("Информация об изменении розничных цен (ВВ → Тилси) за ДатаАнализа","ДатаАнализа", Формат(СтруктураПараметров.ДатаАнализа,"ДФ='dd.MM.yyyy'"))); 
	СтруктураПисьма.Вставить("Текст", "");
	
	Если СтруктураПараметров.Свойство("МассивКопий") Тогда
		СтруктураПисьма.Вставить("Копии", СтруктураПараметров.МассивКопий);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТестоваяРассылка") Тогда
		СтруктураПисьма.Получатели = СтруктураПараметров.ТестоваяРассылка;
		СтруктураПисьма.Удалить("Копии");
	КонецЕсли;
	
	//Формирование тела письма
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	
	СтруктураПисьма.Текст = ТекстовыйДокумент.ПолучитьТекст();	

	//Удаление временных файлов
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;

	Если СтруктураПараметров.Свойство("БезОтправки") Тогда
		Возврат;
	КонецЕсли;
	
	//Отправка письма
	Документы.ИзменениеЗакупочныхЦен.ОтправитьПисьмо(СтруктураПисьма);
	
КонецПроцедуры

