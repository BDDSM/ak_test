
//Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
//	
//	ДатаОкончания = '00010101';
//	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
//		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
//				И Строка(ПользПоле.Параметр) = "НаДату" Тогда
//			ДатаОкончания = ПользПоле.Значение;
//		КонецЕсли;	
//	КонецЦикла;
//	
//	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
//		ДатаОкончания = ТекущаяДата();
//	КонецЕсли;	
//	
//	ДатаОкончания = КонецДня(ДатаОкончания);
//	
//	ТаблицаДанных = Новый ТаблицаЗначений();
//	ТаблицаДанных.Колонки.Добавить("ДатаЗакрытия"	, Новый ОписаниеТипов("Дата"));
//	ТаблицаДанных.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
//	//ТаблицаДанных.Колонки.Добавить("НомерТочки", Новый ОписаниеТипов("Число"));
//	ТаблицаДанных.Колонки.Добавить("ЕстьАктивыНа02_1", Новый ОписаниеТипов("Булево"));
//	ТаблицаДанных.Колонки.Добавить("ЕстьАктивыНа02_2", Новый ОписаниеТипов("Булево"));
//	ТаблицаДанных.Колонки.Добавить("ЕстьАктивыНа02_3", Новый ОписаниеТипов("Булево"));
//	
//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("НаДату"	, Новый Граница(ДатаОкончания, ВидГраницы.Включая));
//	Запрос.УстановитьПараметр("ДатаНач"	, НачалоДня(ДатаОкончания - 86400 * 60));
//	Запрос.УстановитьПараметр("ДатаКон"	, ДатаОкончания);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ФинансовыйОстатки.Субконто2 КАК ТорговаяТочка
//	|ИЗ
//	|	РегистрБухгалтерии.Финансовый.Остатки(
//	|			&НаДату,
//	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)),
//	|			,
//	|			Субконто2 ССЫЛКА Справочник.СтруктурныеЕдиницы
//	|				И Субконто2.id_TT > 0
//	|				И Субконто2.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПустаяСсылка)
//	|				И Субконто2.ДатаОткрытия <> ДАТАВРЕМЯ(1, 1, 1)
//	|				И Субконто2.ДатаОткрытия <= &ДатаКон) КАК ФинансовыйОстатки
//	|ГДЕ
//	|	ФинансовыйОстатки.КоличествоОстаток <> 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ФинансовыйОстатки.Субконто2 КАК ТорговаяТочка,
//	|	ФинансовыйОстатки.Счет
//	|ИЗ
//	|	РегистрБухгалтерии.Финансовый.Остатки(
//	|			&НаДату,
//	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)),
//	|			,
//	|			Субконто2 ССЫЛКА Справочник.СтруктурныеЕдиницы
//	|				И Субконто2.id_TT > 0
//	|				И Субконто2.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПустаяСсылка)
//	|				И Субконто2.ДатаОткрытия <> ДАТАВРЕМЯ(1, 1, 1)
//	|				И Субконто2.ДатаОткрытия <= &ДатаКон) КАК ФинансовыйОстатки
//	|ГДЕ
//	|	ФинансовыйОстатки.КоличествоОстаток <> 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
//	|	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата
//	|ИЗ
//	|	Документ.ЛистУчета КАК ЛистУчета
//	|ГДЕ
//	|	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
//	|	И ЛистУчета.Проведен = ИСТИНА
//	|	И ЛистУчета.СуммаДокумента <> 0
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ТорговаяТочка,
//	|	Дата";
//				   
//	Результаты = Запрос.ВыполнитьПакет();
//	ТабСальдо 		= Результаты[0].Выгрузить();
//	ТабСальдоСчета 	= Результаты[1].Выгрузить();
//	ТабЛисты 		= Результаты[2].Выгрузить();
//	ТабЛистыТемп = ТабЛисты.СкопироватьКолонки();
//	
//	СчетККМ 					= ПланыСчетов.Финансовый.ККМ;
//	//СчетХолодильноеОборудование = ПланыСчетов.Финансовый.ХолодильноеОборудование;
//	//СчетПрочееОборудование 		= ПланыСчетов.Финансовый.ПрочееОборудование;
//	
//	Для Каждого СтрокаТаб Из ТабСальдо Цикл
//		ТабЛистыТемп.Очистить();
//		СтрокиЛисты = ТабЛисты.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаТаб.ТорговаяТочка));
//		Для Каждого СтрокаЛист Из СтрокиЛисты Цикл
//			ЗаполнитьЗначенияСвойств(ТабЛистыТемп.Добавить(), СтрокаЛист);
//		КонецЦикла;
//		ТабЛистыТемп.Сортировать("Дата Убыв");
//		ДатаЗакрытия = Неопределено;
//		Если ТабЛистыТемп.Количество() = 0 Тогда
//			ДатаЗакрытия = СтрокаТаб.ТорговаяТочка.ДатаЗакрытия;
//			Если Не ЗначениеЗаполнено(ДатаЗакрытия) Тогда
//				ДатаЗакрытия = ДатаОкончания - 86400 * 60;
//			КонецЕсли;	
//		Иначе
//			Если ТабЛистыТемп[0].Дата <> НачалоДня(ДатаОкончания) Тогда
//				ДатаЗакрытия = ТабЛистыТемп[0].Дата;
//			КонецЕсли;	
//		КонецЕсли;
//		Если ЗначениеЗаполнено(ДатаЗакрытия) Тогда
//			СтрокиСальдо = ТабСальдоСчета.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаТаб.ТорговаяТочка));
//			СтрокаДанных = ТаблицаДанных.Добавить();
//			СтрокаДанных.ТорговаяТочка = СтрокаТаб.ТорговаяТочка;
//			//СтрокаДанных.НомерТочки = СтрокаТаб.ТорговаяТочка.НомерТочки;
//			СтрокаДанных.ДатаЗакрытия = ДатаЗакрытия;
//			Для Каждого СтрокаСальдоДетально Из СтрокиСальдо Цикл
//				Если СтрокаСальдоДетально.Счет = СчетККМ Тогда
//					СтрокаДанных.ЕстьАктивыНа02_1 = Истина;
//					СтрокаДанных.ЕстьАктивыНа02_2 = Ложь;
//					СтрокаДанных.ЕстьАктивыНа02_3 = Ложь;	
//				//ИначеЕсли СтрокаСальдоДетально.Счет = СчетХолодильноеОборудование Тогда
//				//	СтрокаДанных.ЕстьАктивыНа02_2 = Истина;
//				//ИначеЕсли СтрокаСальдоДетально.Счет = СчетПрочееОборудование Тогда
//				//	СтрокаДанных.ЕстьАктивыНа02_3 = Истина;	
//				КонецЕсли;	
//			КонецЦикла;	
//		КонецЕсли;	
//	КонецЦикла;	
//	
//	СтандартнаяОбработка = Ложь;
//	
//	ВнешниеНаборыДанных = Новый Структура;
//	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаДанных);
//	
//	//Макет компоновки 
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
//	
//	//Компоновка данных
//	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
//	
//	//Вывод результата
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
//	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
//	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
//	
//КонецПроцедуры
