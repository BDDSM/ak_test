
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Счетафин = ПолучитьСчета();
	
	//Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	//	ПоляТек = Данные.Элементы[Индекс].ПолучитьПоля();

	
	СтруктураЗначенийРасшифровки = ПолучитьСтруктуруЗначенийРасшифровки(ДанныеРасшифровки, Расшифровка,Истина);		
	СтандартнаяОбработка = Ложь;
	Если СтруктураЗначенийРасшифровки["Текущий"] = "Документ" Тогда 
		ОткрытьЗначение(СтруктураЗначенийРасшифровки["Документ"]);
	ИначеЕсли СтруктураЗначенийРасшифровки["Текущий"] = "Поставщик" Тогда 
		ОткрытьЗначение(СтруктураЗначенийРасшифровки["Поставщик"]);
	ИначеЕсли СтруктураЗначенийРасшифровки.Получить("Поставщик") <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
				
		Если СтруктураЗначенийРасшифровки.Получить("СуммаНедостача") <> неопределено Тогда
			
			ФормаСписка = ПолучитьФорму("Отчет.АК_ОтчетСписанияПоИтогамИнвентаризации.Форма.ФормаСпискаУпр1");
			ФормаСписка.СчетКТ = СчетаФин.Получить("МатералыДляВыпуска");
			ФормаСписка.СчетДТ = СчетаФин.Получить("ЗатратыТоварныеДляРаспределения");
			ФормаСписка.ДатаНачала = Отчет.Начало;
			ФормаСписка.ДатаОкончания = КонецДня(Отчет.Конец);
			ФормаСписка.СкладДТ = СтруктураЗначенийРасшифровки.Получить("Склад");
			ФормаСписка.Номенклатура  = СтруктураЗначенийРасшифровки.Получить("Номенклатура");
			ФормаСписка.ОтборРегистратор  = СтруктураЗначенийРасшифровки.Получить("Документ");			
			ФормаСписка.Открыть();
			
		Иначе 	
			
			ФормаСписка = ПолучитьФорму("Отчет.АК_ОтчетСписанияПоИтогамИнвентаризации.Форма.ФормаСпискаУпр1");
			ФормаСписка.СчетДТ = СчетаФин.Получить("МатералыДляВыпуска");
			ФормаСписка.СчетКТ = СчетаФин.Получить("ЗатратыТоварныеДляРаспределения");
			ФормаСписка.ДатаНачала = Отчет.Начало;
			ФормаСписка.ДатаОкончания = КонецДня(Отчет.Конец);			
			ФормаСписка.СкладДТ = СтруктураЗначенийРасшифровки.Получить("Склад");
			ФормаСписка.Номенклатура  = СтруктураЗначенийРасшифровки.Получить("Номенклатура");	
			ФормаСписка.ОтборРегистратор  = СтруктураЗначенийРасшифровки.Получить("Документ");						
			ФормаСписка.Открыть();
			
		КонецЕсли;			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСчета()

	СчетаФин = Новый Соответствие;
	СчетаФин.Вставить("МатералыДляВыпуска",ПланыСчетов.Финансовый.МатералыДляВыпуска);
	СчетаФин.Вставить("ЗатратыТоварныеДляРаспределения",ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения);

	Возврат СчетаФин;
КонецФункции // ()


&НаКлиенте
Функция ПолучитьФиксНастройки(СчетДт,СчетКт,Поставщик)
	
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;

	Элт = КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элт.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СубконтоКт2");
	Элт.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элт.Использование = Истина;
	Элт.ПравоеЗначение = Поставщик;
	
	Элт = КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элт.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетКт");
	Элт.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элт.Использование = Истина;
	Элт.ПравоеЗначение = СчетДт;
	
	
	Возврат КомпоновщикНастроек.ФиксированныеНастройки
	
КонецФункции



&НаСервере
Функция ПолучитьСтруктуруЗначенийРасшифровки(ДанныеРасшифровки, Индекс, ПЕРВЫЙВЫЗОВ = Ложь)
	
	//
	Соответствие = Новый Соответствие;
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Если ПЕРВЫЙВЫЗОВ Тогда 
		ПоляТек = Данные.Элементы[Индекс].ПолучитьПоля();
		Для каждого Стр Из ПоляТек Цикл
			Соответствие.Вставить(Стр.Поле, Стр.Значение);		
			Соответствие.Вставить("Текущий", Стр.Поле);		
		КонецЦикла;
	КонецЕсли;
	//
	Родители = Данные.Элементы[Индекс].ПолучитьРодителей();
	Для Каждого Родитель Из Родители Цикл
		
		//
		_Соответствие = ПолучитьСтруктуруЗначенийРасшифровки(ДанныеРасшифровки, Родитель.Идентификатор);
		Для Каждого ЭлементСоотвествия Из _Соответствие Цикл
			
			//
			Соответствие.Вставить(ЭлементСоотвествия.Ключ, ЭлементСоотвествия.Значение);
			
		КонецЦикла;	
		
		//
		Попытка
			
			//
			Поля = Родитель.ПолучитьПоля();
			Для Каждого Поле Из Поля Цикл
				
				//
				Соответствие.Вставить(Поле.Поле, Поле.Значение);
				
			КонецЦикла;
			
		Исключение
		КонецПопытки;	
		
	КонецЦикла;	
	
	//
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПолучитьРасшифровкуНаСервере(

	Расшифровка,

	МассивИменРасшифровки,

	ЭтоГруппа = Ложь)

	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);

	Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля();

	Для Каждого ИмяРасшифровки Из МассивИменРасшифровки Цикл

		ПолеНоменкл = Поля.Найти(ИмяРасшифровки);

		Если Не ПолеНоменкл = Неопределено Тогда Прервать; КонецЕсли;

	КонецЦикла;

	Возврат ПолеНоменкл.Значение;

КонецФункции

&НаКлиенте
Процедура ПоказатьСтруктуруОтчета(Команда)
	
	Если Элементы.КомпоновщикНастроекНастройки.Видимость = Истина Тогда
		Элементы.ФормаПоказатьСтруктуруОтчета.Заголовок = "Скрыть структуру отчета";
		Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь;		
	Иначе
		Элементы.ФормаПоказатьСтруктуруОтчета.Заголовок = "Показать структуру отчета";
		Элементы.КомпоновщикНастроекНастройки.Видимость = Истина;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПолучателей(Технологи);
	
	флКортиеваМарина = Справочники.Пользователи.НайтиПоНаименованию("Кортиева Марина");
	
	Если ТипЗнч(Технологи) = Тип("СписокЗначений") Тогда
		//Технологи.Добавить(флКортиеваМарина);
	Иначе 
		ТехМассив = Новый Массив;
		Если Технологи <> Неопределено Тогда 
			//ТехМассив.Добавить(Технологи);
		КонецЕсли;
		//ТехМассив.Добавить(флКортиеваМарина);
		Технологи = ТехМассив ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление КАК EmailАдрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО КонтактнаяИнформация.Объект = Пользователи.ФизЛицо
	|ГДЕ
	|	Пользователи.Ссылка В(&Пользователи)
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Пользователи", Технологи);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	EmailАдрес = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("EmailАдрес");
	//EmailАдрес.Добавить()
	//EmailАдрес.Очистить();
	EmailАдрес.Добавить("upakovka@vkusvill.ru");
	//EmailАдрес.Добавить("bara@automacon.ru");
Возврат EmailАдрес ;	
КонецФункции	
	
&НаКлиенте
Процедура Отправить(Команда)
	 Технологи = Неопределено;
	Для каждого Стр Из отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Стр.ИдентификаторПользовательскойНастройки = "a754a316-4cb9-493c-aa11-817f8551ef47" Тогда 
			Технологи = Стр.ПравоеЗначение;			
		КонецЕсли;
	КонецЦикла;
	
	 НачалоПараметр = Новый ПараметрКомпоновкиДанных("Начало");
	 НачалоДата = Дата("00010101");
	 КонецПараметр = Новый ПараметрКомпоновкиДанных("Конец");
	 КонецДата = Дата("00010101");
	 
	Для каждого Стр Из отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл	
		Если Стр.Параметр = НачалоПараметр Тогда
		       НачалоДата = Стр.Значение;
			ИначеЕсли   Стр.Параметр = КонецПараметр Тогда 
		     КонецДата = Стр.Значение;
		КонецЕсли;	
	КонецЦикла;
	
	СписокEmailАдрес = ПолучитьСписокПолучателей(Технологи);	
	
	ИмяВрФайла = ПолучитьИмяВременногоФайла();
	ИмяВрФайла = СтрЗаменить(ИмяВрФайла,".tmp",".XLSX");
	Результат.Записать(ИмяВрФайла,ТипФайлаТабличногоДокумента.XLSX);
	
	//+++AK BARA #16047.01	
	ФормаТекстаПисьма = Отчеты.АК_ОтчетСписанияПоИтогамИнвентаризации.ПолучитьФорму("ФормаТекстПисьма");
	ФормаТекстаПисьма.ОткрытьМодально();
	//---AK BARA #16047.01	
	
	
	АдресОтправки = "upakovka@vkusvill.ru";
	Почта = Новый ИнтернетПочта;   	
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);	
	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Отчет списания по итогам инвентаризации";
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
	Письмо.Отправитель.Адрес = АдресОтправки;
	Письмо.Вложения.Добавить(ИмяВрФайла,"Отчет");
	
	ПолучателиСтр = ""; ПервыйЕмайл=Истина;
	Для каждого Стр Из СписокEmailАдрес Цикл
		ПолучателиСтр = ПолучателиСтр+ ?(ПервыйЕмайл,"",";")+Стр;
		Получатель = Письмо.Получатели.Добавить(Стр);
	КонецЦикла;	
		   //ПолучателиСтр
	//Получатель.Адрес = "bancom@yandex.ru";
	//Получатель.Адрес = "no-reply@vkusvill.ru";
	ТекстПисьма = "Добрый день. Отчет списания по итогам инвентаризации на период с "+Формат(НачалоДата,"ДФ=dd.MM.yyyy; ДЛФ=DD")+" по "+Формат(КонецДата,"ДФ=dd.MM.yyyy; ДЛФ=DD")+" прикреплен к письму.";
	ТекстПисьма = ТекстПисьма + Символы.ПС + ФормаТекстаПисьма.ТекстПисьма;  	//AK BARA #16047.01	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.HTML);
	Попытка
		Почта.Послать(Письмо);
		Сообщить("Письмо отправлено.");
	Исключение
		Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
	КонецПопытки;		
	Почта.Отключиться();
	
КонецПроцедуры
