
Функция ПолучитьДанныеДляФормирования(мДатаНачала, мДатаОкончания) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСклад.Ссылка,
	               |	РасходныйОрдерСклад.Получатель КАК ТТ
	               |ПОМЕСТИТЬ ВТ_ОрдераEDI
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И РасходныйОрдерСклад.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	               |	И РасходныйОрдерСклад.Получатель.ТипРозничнойТочки В (ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток), ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Пятерочка))
	               |	И РасходныйОрдерСклад.Проведен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОрдераEDI.Ссылка КАК РасходныйОрдер,
	               |	РеализацияТоваровУслугРасходныеОрдера.Ссылка КАК Реализация,
	               |	ВТ_ОрдераEDI.ТТ
	               |ПОМЕСТИТЬ ВТ_ОрдераРеализации
	               |ИЗ
	               |	ВТ_ОрдераEDI КАК ВТ_ОрдераEDI
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	               |		ПО ВТ_ОрдераEDI.Ссылка = РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОрдераEDI.Ссылка КАК РасходныйОрдер,
	               |	ВТ_ОрдераРеализации.Реализация КАК РТУ,
				   |	МАКСИМУМ(ВЫБОР когда ВТ_ОрдераРеализации.Реализация ЕСТЬ NULL
				   |				ТОГДА 0	
   	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК ЕстьРТУ,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА КонтурEDI_Сообщения.Ссылка ЕСТЬ NULL
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК ЕстьЗаказEDI,
	               |	МАКСИМУМ(ЕСТЬNULL(КонтурEDI_Сообщения.НомерЗаказа, """")) КАК НомерЗаказа,
	               |	ВТ_ОрдераEDI.ТТ
	               |ПОМЕСТИТЬ втОбщая
	               |ИЗ
	               |	ВТ_ОрдераEDI КАК ВТ_ОрдераEDI
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОрдераРеализации КАК ВТ_ОрдераРеализации
	               |		ПО ВТ_ОрдераEDI.Ссылка = ВТ_ОрдераРеализации.РасходныйОрдер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |		ПО (ВТ_ОрдераРеализации.Реализация = КонтурEDI_Сообщения.Документ)
	               |			И (КонтурEDI_Сообщения.ТипСообщения = ""ORDERS"")
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ОрдераEDI.Ссылка,
	               |	ВТ_ОрдераРеализации.Реализация,
	               |	ВТ_ОрдераEDI.ТТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втОбщая.РасходныйОрдер,
	               |	втОбщая.ТТ,
	               |	втОбщая.РТУ,
				   |	втОбщая.ЕстьРТУ,
	               |	втОбщая.ЕстьЗаказEDI,
	               |	втОбщая.НомерЗаказа
	               |ИЗ
	               |	втОбщая КАК втОбщая
	               |ГДЕ
	               |	втОбщая.ЕстьРТУ = 0
	               |			ИЛИ втОбщая.ЕстьЗаказEDI = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втОбщая.РасходныйОрдер,
	               |	втОбщая.ТТ,
	               |	втОбщая.РТУ,
				   |	втОбщая.ЕстьРТУ,
	               |	втОбщая.ЕстьЗаказEDI,
	               |	втОбщая.НомерЗаказа
	               |ИЗ
	               |	втОбщая КАК втОбщая
	               |ГДЕ
	               |	втОбщая.ЕстьРТУ = 1	
	               |	И втОбщая.ЕстьЗаказEDI = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРез.НомерЗаказа,
				   |	втРез.ТТ,
				   |	втРез.РасходныйОрдер,
	               |	КонтурEDI_Сообщения.ОписаниеОшибки КАК ОписаниеОшибки
	               |ИЗ
	               |	втОбщая КАК втРез
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |		ПО втРез.НомерЗаказа = КонтурEDI_Сообщения.НомерЗаказа
	               |			И (КонтурEDI_Сообщения.ОписаниеОшибки ПОДОБНО ""%контировка%"")";
	Запрос.УстановитьПараметр("ДатаНач", мДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", мДатаОкончания);
	
	Результаты = Запрос.Выполнитьпакет();
	тзОбщая_к = Результаты[Результаты.Количество()-3].Выгрузить();
	тзОбщая_з = Результаты[Результаты.Количество()-2].Выгрузить();
	тзОшибки = Результаты[Результаты.Количество()-1].Выгрузить();
	
	тзОшибки.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзОшибки.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	тзОшибки_ = тзОшибки.Скопировать();
	тзОшибки_.Очистить();
	
	ЗапросХ = Новый Запрос;
	ЗапросХ.Текст = "ВЫБРАТЬ
	                |	КонтурEDI_СоответствияТоваров.Номенклатура,
	                |	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры
	                |ИЗ
	                |	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	                |ГДЕ
	                |	КонтурEDI_СоответствияТоваров.КодТовараПартнера = &КодТовараПартнера";
	Для Каждого Стр из тзОшибки Цикл
		текст = Стр.ОписаниеОшибки;
		н1 = 1;
		Пока н1 > 0 Цикл
			н1 = Найти(Текст,"Для материала");
			н2 = Найти(Текст,"контировка");
			Если н1 >0 и н2>0 и н2>н1 Тогда
				КодМатериала = Сред(текст,н1+13,н2-н1-13);
				текст = Сред(Текст,н2+10);
				
				ЗапросХ.УстановитьПараметр("КодТовараПартнера",СокрЛП(КодМатериала));
				тз_ = ЗапросХ.Выполнить().Выгрузить();
				Если тз_.Количество()>0 Тогда
					мсСтроки = тзОшибки_.НайтиСтроки(Новый Структура("РасходныйОрдер, ТТ",Стр.РасходныйОрдер,Стр.ТТ));
					Если мсСтроки.Количество()=0 Тогда
						НС = тзОшибки_.Добавить();
						ЗаполнитьЗначенияСвойств(НС,Стр,,"ОписаниеОшибки");
						НС.Номенклатура = тз_[0].Номенклатура;
						НС.Характеристика = тз_[0].ХарактеристикаНоменклатуры;
					КонецЕСли;
				КонецЕСли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//
	Возврат Новый Структура("тзОбщая_к, тзОбщая_з, тзОшибки",тзОбщая_к, тзОбщая_з, тзОшибки_);
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мДатаНачала = Дата(1,1,1);
	мДатаОкончания = Дата(1,1,1);
	
	Для Каждого ПользПоле Из ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользПоле.Использование Тогда
			Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если Строка(ПользПоле.Параметр) = "Период" Тогда
					мДатаНачала 	= ПользПоле.Значение.ДатаНачала;
					мДатаОкончания		= ПользПоле.Значение.ДатаОкончания;
				ИначеЕсли Строка(ПользПоле.Параметр) = "ДатаНачала" Тогда
					мДатаНачала 	= ПользПоле.Значение;
				ИначеЕсли Строка(ПользПоле.Параметр) = "мДатаОкончания" Тогда
					мДатаОкончания		= ПользПоле.Значение;
				КонецЕСли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(мДатаНачала) или НЕ ЗначениеЗаполнено(мДатаОкончания) Тогда
		Сообщить("Необходимо указать период");
		Возврат;
	КонецЕсли;
	
	
	СтруктураДанных = ПолучитьДанныеДляФормирования(мДатаНачала, КонецДня(мДатаОкончания));	
	//Настройки = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();

	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

//	// Передаем в макет компоновки схему, настройки и данные расшифровки
////	мСхемаКомпоновки = ?(НЕ ЭтотОбъект.ВыводитьДополнительныеСтолбцы, ЭтотОбъект.ПолучитьМакет("Макет"), ЭтотОбъект.ПолучитьМакет("ДопМакет"));
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет_Итог");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);

	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("СписокБезРТУ");
	тз.Колонки.Добавить("СписокБезОтвета");
	СписокБезРТУ = "";
	СписокБезОтвета = "";	
	
	тз_к = СтруктураДанных.тзОбщая_к.Скопировать(Новый Структура("ЕстьРТУ",0));
	ДЛя Каждого СтрТЗ из тз_к Цикл
		СписокБезРТУ = СписокБезОтвета +?(СписокБезОтвета="","",", ")+СтрТЗ.РасходныйОрдер.Номер;
	КонецЦикла;
	
	тз_к = СтруктураДанных.тзОбщая_к.Скопировать(Новый Структура("ЕстьЗаказEDI",0));
	ДЛя Каждого СтрТЗ из тз_к Цикл
		СписокБезОтвета = СписокБезОтвета +?(СписокБезОтвета="","",", ")+СтрТЗ.РасходныйОрдер.Номер;
	КонецЦикла;
	
	НС = тз.Добавить();
	НС.СписокБезРТУ = СписокБезРТУ;
	НС.СписокБезОтвета = СписокБезОтвета;

	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", тз);
	
	////
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	




	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);

	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", СтруктураДанных.тзОбщая_к);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет1");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);
	
	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", СтруктураДанных.тзОбщая_з);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

	
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет_");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);
	
	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", СтруктураДанных.тзОшибки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

КонецПроцедуры

Функция СформироватьОтчет(ТабДок, Параметры) Экспорт 	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Ложь;
	
	мДатаНачала = Дата(1,1,1);
	мДатаОкончания = Дата(1,1,1);
	Если Параметры.Свойство("ДатаНачала") ТОгда
		мДатаНачала = Параметры.ДатаНачала;
	КонецЕСлИ;
	
	Если Параметры.Свойство("ДатаОкончания") ТОгда
		мДатаОкончания = Параметры.ДатаОкончания;
	КонецЕСлИ;
	
	Если НЕ ЗначениеЗаполнено(мДатаНачала) или НЕ ЗначениеЗаполнено(мДатаОкончания) Тогда
		Сообщить("Необходимо указать период");
		Возврат -1;
	КонецЕсли;
	
	
	СтруктураДанных = ПолучитьДанныеДляФормирования(мДатаНачала, КонецДня(мДатаОкончания));	
	//Настройки = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();

	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет_Итог");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);

	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("СписокБезРТУ");
	тз.Колонки.Добавить("СписокБезОтвета");
	СписокБезРТУ = "";
	СписокБезОтвета = "";	
	
	тз_к = СтруктураДанных.тзОбщая_к.Скопировать(Новый Структура("ЕстьРТУ",0));
	ДЛя Каждого СтрТЗ из тз_к Цикл
		СписокБезРТУ = СписокБезОтвета +?(СписокБезОтвета="","",", ")+СтрТЗ.РасходныйОрдер.Номер;
	КонецЦикла;
	КоличествоБезРТУ = тз_к.Количество();
	
	тз_к = СтруктураДанных.тзОбщая_к.Скопировать(Новый Структура("ЕстьЗаказEDI",0));
	ДЛя Каждого СтрТЗ из тз_к Цикл
		СписокБезОтвета = СписокБезОтвета +?(СписокБезОтвета="","",", ")+СтрТЗ.РасходныйОрдер.Номер;
	КонецЦикла;
	КоличествоБезОтвета = тз_к.Количество();
	
	НС = тз.Добавить();
	НС.СписокБезРТУ = СписокБезРТУ;
	НС.СписокБезОтвета = СписокБезОтвета;

	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", тз);

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);

	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", СтруктураДанных.тзОбщая_к);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет1");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);
	
	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", СтруктураДанных.тзОбщая_з);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

	
	мСхемаКомпоновки = ЭтотОбъект.ПолучитьМакет("Макет_");
	мНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, мНастройки, ДанныеРасшифровки);
	
	// Выполним компоновку с помощью процессора компоновки
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", СтруктураДанных.тзОшибки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	Возврат Новый Структура("КоличествоБезРТУ, КоличествоБезОтвета, СписокБезРТУ, СписокБезОтвета, СтруктураДанных",КоличествоБезРТУ,КоличествоБезОтвета,СписокБезРТУ,СписокБезОтвета, СтруктураДанных);
КонецФункции


Функция СформироватьТаблицуХТМЛ_ТабДок(тз, пНомерКолонки, пЦвет)
	КоличествоПоГоризонтали = тз.Колонки.Количество();	
	КоличествоПоВертикали = тз.Количество();
	
	МассивСтрок = Новый Массив;
	
	МассивЯчеек = Новый Массив;
	Цвет = ЦветЗаголовкаОтчета();		
	Для к = 0 по КоличествоПоГоризонтали-1 Цикл
		Ячейка = ТегЯчейкаТаблицы(тз.Колонки[к].Имя, Цвет);			
		МассивЯчеек.Добавить(Ячейка);
	КонецЦикла;
	МассивСтрок.Добавить(ТегСтрокаТаблицы(ТелеграмТехБот.МассивВСтроку(МассивЯчеек, ""), Цвет));
	
	Для е = 0 По КоличествоПоВертикали-1 Цикл
		
		Если е = 2 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЯчеек = Новый Массив;

		Для е1 = 0 По КоличествоПоГоризонтали-1 Цикл					
			Текст = тз[е][е1];
			
			Цвет = Неопределено;
			
			Если е1 = пНомерКолонки Тогда
				Цвет = пЦвет;
			КонецЕсли;
			
			Ячейка = ТегЯчейкаТаблицы(Текст, Цвет);			
			МассивЯчеек.Добавить(Ячейка);
		КонецЦикла;
		
		Цвет = Неопределено;
		
	    МассивСтрок.Добавить(ТегСтрокаТаблицы(ТелеграмТехБот.МассивВСтроку(МассивЯчеек, ""), Цвет));
	КонецЦикла;
	
	ХТМЛТаблица = ТегТаблица(ТелеграмТехБот.МассивВСтроку(МассивСтрок, Символы.ПС));
	
	
	Возврат ХТМЛТаблица;
КонецФункции

Функция ТегТаблица(Текст)
	Возврат "<table border=""1"">" + Текст + "</table>";
КонецФункции

Функция ТегСтрокаТаблицы(Текст, Цвет = Неопределено)
	Возврат "<tr" + ?(Цвет = Неопределено, "", " bgcolor=""" + Цвет + """") + ">" + Текст + "</tr>";
КонецФункции

Функция ТегЯчейкаТаблицы(Текст, Цвет = Неопределено)
	Возврат "<td" + ?(Цвет = Неопределено, "", " bgcolor=""" + Цвет + """") + ">" + ?(ЗначениеЗаполнено(Текст), Текст, "-") + "</td>";
КонецФункции

Функция ТегН(Текст, Размер)
	Возврат "<H" + Размер + ">" + Текст + "</H" + Размер + ">";
КонецФункции

Функция ТегBody(Текст)
	Возврат "<Body>" + Текст + "</Body>";
КонецФункции

Функция ЦветЗаголовкаОтчета()
	Возврат "#F4ECC5";	
КонецФункции

Функция ЦветЗеленый()
	Возврат "#ADFF2F";	
КонецФункции

Функция ЦветКрасный()
	Возврат "#FF0000";	
КонецФункции


Процедура ОтправитьФайлПоПочте(Параметры, Данные)
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
		
	Почта.Подключиться(Профиль);
	 //
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	Для Каждого ПолучательЭлемент Из Параметры.МассивАдресов Цикл//
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = ПолучательЭлемент;
	КонецЦикла;	

	
	ТабДок = Параметры.ТабДок;
	ВремФайл = ПолучитьИмяВременногоФайла("html");
	ВремФайл_xls = ПолучитьИмяВременногоФайла("xls");
	
	ТабДок.Записать(ВремФайл_xls, ТипФайлаТабличногоДокумента.XLS);
	ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML5);
		
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
		
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль = Найти(Текст, "<STYLE");
	КонецБлокаСтиль = Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело = Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстПолный = "<HTML>" + Символы.ПС + ТекстСтиль + Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "<TABLE", "<TABLE border=1;");
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; border = 0");
	//ТекстПолный = СтрЗаменить(ТекстПолный, "<TABLE style=""width:100%;", "<TABLE style=""width:30%;");
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	Письмо.Тема = Параметры.Тема;
	//ТекстСообщения.Текст     = ТекстПолный;
	ТекстСообщения.Текст     = "<p> РТУ не сформировалась: "+Данные.СписокБезРТУ+"</p>";
	ТекстСообщения.Текст     = ТекстСообщения.Текст  + "<p> Не пришло сообщение ORDERS: "+Данные.СписокБезОтвета+"</p>";
	ТекстСообщения.Текст     = ТекстСообщения.Текст +  Параметры.ТекстТаблицы;
	ТекстСообщения.Текст     = ТекстСообщения.Текст +  "<p>------</p>"; 
	ТекстСообщения.Текст     = ТекстСообщения.Текст +  "<p>Сформированные РТУ:</p>"; 
	ТекстСообщения.Текст     = ТекстСообщения.Текст +  Параметры.ТекстТаблицы3;
	ТекстСообщения.Текст     = ТекстСообщения.Текст +  "<p>------</p>"; 
	ТекстСообщения.Текст     = ТекстСообщения.Текст +  "<p>Товары, которые не были приняты:</p>"; 
	ТекстСообщения.Текст     = ТекстСообщения.Текст +  Параметры.ТекстТаблицы_Ошибки;
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Письмо.Вложения.Добавить(ВремФайл_xls);
	//Письмо.Вложения.Добавить(ВремФайл);
	
	Почта.Послать(Письмо);
	Почта.Отключиться();
//	УдалитьФайлы(ВремФайл);
//	УдалитьФайлы(ВремФайл_xls);

КонецПроцедуры

Функция СформироватьОтчетИОтправитьПоПочте(Параметры) Экспорт 
	Параметры.Вставить("МассивУдалитьФайлы", Новый Массив);
	
	ТабДок = Новый ТабличныйДокумент;
	ДанныеОбОшибках = СформироватьОтчет(ТабДок, Параметры);
	Если ДанныеОбОшибках = -1 Тогда
		Возврат -1;
	КонецЕСли;
	
	//ТабДок.Показать();
	
	
	ТемаПисьма = СформироватьТемуПисьма(ТабДок, ДанныеОбОшибках, Параметры);
	
	ОтправлятьПоПочте = Не Параметры.Свойство("НеОтправлятьПоПочте");
	
	Если ОтправлятьПоПочте Тогда
		Параметры.Вставить("ТабДок", ТабДок);
		Параметры.Вставить("Тема", ТемаПисьма);
		ТекстТаблицы = СформироватьТаблицуХТМЛ_ТабДок(ДанныеОбОшибках.Структураданных.тзОбщая_к,4,ЦветКрасный());//, , 
		ТекстТаблицы3 = СформироватьТаблицуХТМЛ_ТабДок(ДанныеОбОшибках.Структураданных.тзОбщая_з,4,ЦветЗеленый());//, 
		тзОшибки = ДанныеОбОшибках.Структураданных.тзОшибки;
		тзОшибки.Колонки.Удалить("ОписаниеОшибки");
		ТекстТаблицы_Ошибки = СформироватьТаблицуХТМЛ_ТабДок(тзОшибки,-1,ЦветКрасный());//,  
		Параметры.Вставить("ТекстТаблицы", ТекстТаблицы);
		Параметры.Вставить("ТекстТаблицы3", ТекстТаблицы3);
		Параметры.Вставить("ТекстТаблицы_Ошибки", ТекстТаблицы_Ошибки);
		Параметры.Вставить("ТипТекста", ТипТекстаПочтовогоСообщения.HTML);
		
		ОтправитьФайлПоПочте(Параметры,ДанныеОбОшибках);	
	КонецЕсли;
	Возврат 1;
КонецФункции 


Функция СформироватьТемуПисьма(ТабДок, Данные, Параметры)
	Результат = "";
	
	Если Данные.КоличествоБезОтвета>0 Тогда
		Результат = "Есть не полученные заказы. ";	
	КонецЕсли;
	
	Если Данные.КоличествоБезРТУ>0  Тогда
		Результат = Результат + "Есть несформированные РТУ";	
	КонецЕсли;
	
	Если Результат = "" Тогда
		Результат = "Все заказы получены.";	
	КонецЕсли;
	
	Результат = "Отгрузка Х5. Получение заказов (Новый). За " + Формат(Параметры.ДатаНачала, "ДЛФ=D") + " " + Результат;
	
	Возврат Результат;
КонецФункции

