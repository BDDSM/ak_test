/////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Субконто.Пометка = ПоказыватьСубконто;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Субконто.Пометка = ПоказыватьСубконто;
	
	ЭлементыФормы.ПанельСубконто.Свертка = ?(ПоказыватьСубконто, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);

КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

// Процедура формирует заголовок формы отчета с учетом настроек
//
// Параметры:
//  Нет.
//
Процедура СформироватьЗаголовокФормы()

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Заголовок = ЗаголовокОтчета() +  " (" +ОписаниеПериода + ") " + ?(ЗначениеЗаполнено(Организация.НаименованиеПолное), Организация.НаименованиеПолное, Организация);	
КонецПроцедуры // СформироватьЗаголовокФормы()()

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
Процедура ОбновитьОтчет() Экспорт

	НеЗаполнятьНастройкиПриОткрытии = Не Открыта();
	
	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;
	
КонецПроцедуры // ОбновитьОтчет()

Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ОбластьЗаголовка = СформироватьЗаголовок();
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		ЭлементыФормы.ДокументРезультат.Вывести(ОбластьЗаголовка);
		
	КонецЕсли;


	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ВыводЗаголовка()

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЕ ЭЛЕМЕНТОВ ФОРМЫ
//

Процедура Сформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура Настройка(Кнопка)
	
	ФормаНастройка = ПолучитьФорму("ФормаНастройка");
	
	Если ФормаНастройка.ОткрытьМодально() = Истина Тогда
		ОбновитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура КоманднаяПанельЗаголовок(Кнопка)
	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();
КонецПроцедуры

Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда
		Если Расшифровка.Количество() = 1 Тогда
			ВыбранноеЗначение = Расшифровка[0];
		Иначе
			ВыбранноеЗначение = Расшифровка.ВыбратьЭлемент("Выберите расшифровку",Расшифровка[0]);
		КонецЕсли;
		Если ВыбранноеЗначение <> Неопределено Тогда
			ВыбраннаяРасшифровка = ВыбранноеЗначение.Значение;
		Иначе
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура")
		ИЛИ ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		
		ВыбраннаяРасшифровка = Расшифровка;
	КонецЕсли;

	Если ТипЗнч(ВыбраннаяРасшифровка) = Тип("Структура") 
		ИЛИ ТипЗнч(ВыбраннаяРасшифровка) = Тип("Соответствие") Тогда

		// Добавим общую расшифровку из левого верхнего угла
		ОбщаяРасшифровка = Элемент.Область(1,1).Расшифровка;
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = Элемент.Область(ВысотаЗаголовка+2, Элемент.ТекущаяОбласть.Лево).Расшифровка;
		
		Если ТипЗнч(ОбщаяРасшифровка) = Тип("Структура") 
			ИЛИ ТипЗнч(ОбщаяРасшифровка) = Тип("Соответствие") Тогда
			
			РасшифровкаЯчейки = ВыбраннаяРасшифровка;
			
			ВыбраннаяРасшифровка = ОбщаяРасшифровка;
			
			// Общая расшифровка дополняется расшифровкой ячейки, которая может содержать другие значения общих параметров
			Для Каждого Элемент Из РасшифровкаЯчейки Цикл
				ВыбраннаяРасшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		ВыбраннаяРасшифровка.Вставить("ВидОборота", РасшифровкаКолонки);

		ВыбраннаяРасшифровка.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
		
		ОбработкаРасшифровкиСтандартногоОтчета(ВыбраннаяРасшифровка);
		
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

Процедура ДатаНачПриИзменении(Элемент)
	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));
КонецПроцедуры

Процедура ДатаКонПриИзменении(Элемент)
	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));
КонецПроцедуры

Процедура ВидыСубконтоПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = ?(Субконто.Количество() >= МаксКоличествоСубконто, Истина, Ложь);
	
КонецПроцедуры

Процедура ВидыСубконтоПослеУдаления(Элемент)
	
	ПерезаполнитьНачальныеНастройки();
	
	Для каждого стр Из Субконто Цикл
	
		Поле = ПостроительОтчета.Отбор.Найти("Субконто"+стр.НомерСтроки);
		Если Поле <> Неопределено Тогда
			Если Поле.ТипЗначения <> стр.ВидСубконто.ТипЗначения Тогда
				ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(Поле));
				ПостроительОтчета.Отбор.Добавить("Субконто"+стр.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВидыСубконтоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекВидСубконто = Элемент.ТекущиеДанные.ВидСубконто;
		Элемент.ТекущиеДанные.ВидСубконто = ПланыВидовХарактеристик[ТекВидСубконто.Метаданные().Имя].ПустаяСсылка();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыСубконто(Кнопка)
	
	ПоказыватьСубконто = Не ПоказыватьСубконто;
	
	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

Процедура СубконтоВидСубконтоПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Субконто.ТекущиеДанные;
	НомерСубконто = ТекСтрока.НомерСтроки;
	
	ПерезаполнитьНачальныеНастройки();
	
	Если ПостроительОтчета.Отбор.Найти("Субконто"+НомерСубконто) = Неопределено Тогда
		ПостроительОтчета.Отбор.Добавить("Субконто"+НомерСубконто);
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ТиповыеОтчеты.НазначитьФормеУникальныйКлючИдентификации(ЭтаФорма);
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() <> "БП" Тогда
		// Проверка ведения однофирменности
		УчетПоВсемОрганизациям = Истина;
	КонецЕсли;

	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
		
		ПоказыватьЗаголовок = Истина;
		
		СтруктураОбщихПараметров = ВосстановитьЗначение("ОбщиеПараметрыОтчетов"+ИмяРегистраБухгалтерии);
		
		ВосстановитьНастройкиИзСтруктуры(СтруктураОбщихПараметров);
		
		ПерезаполнитьНачальныеНастройки();
		
		ВысотаЗаголовка = 0;
		
	КонецЕсли;

	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));
	
	БухгалтерскиеОтчеты.ПоддержкаОднофирменностиДляБухОтчетов(ЭтаФорма, Организация, УчетПоВсемОрганизациям, НЕ НеЗаполнятьНастройкиПриОткрытии);
	
	Если ЗначениеЗаполнено(КонтрагентДляРасшифровки) Тогда
		СформироватьОтчетПоКонтрагенту();
	КонецЕсли;	

КонецПроцедуры

Процедура СформироватьОтчетПоКонтрагенту()
	
	ДатаНач 		= НачалоМесяца(ТекущаяДата());
	ДатаКон 		= КонецМесяца(ТекущаяДата());
	ПоСубсчетам	= Истина;
	
	СписокСчетов = Новый СписокЗначений;

	Субконто.Очистить();
	НоваяСтрока = Субконто.Добавить();
	Если ТипЗнч(КонтрагентДляРасшифровки) = Тип("СправочникСсылка.Контрагенты") Тогда
		НоваяСтрока.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты;
		СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками); 		// 60
		СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателями); 					// 62
		СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками); // 76.1
	Иначе
		НоваяСтрока.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица;
		СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПодотчетными); 					// 71
	КонецЕсли;
	
	ПерезаполнитьНачальныеНастройки();
	
	
	ОтборОтчета = ПостроительОтчета.Отбор;
	
	Если ОтборОтчета.Найти("Счет") = Неопределено Тогда
		ОтборОтчета.Добавить("Счет");
	КонецЕсли;
	ОтборОтчета.Счет.ВидСравнения 	= ВидСравнения.ВСпискеПоИерархии;
	ОтборОтчета.Счет.Значение 		= СписокСчетов;
	ОтборОтчета.Счет.Использование	= Истина;
	
	Если ОтборОтчета.Найти("Субконто1") = Неопределено Тогда
		ОтборОтчета.Добавить("Субконто1");
	КонецЕсли;
	ОтборОтчета.Субконто1.Установить(КонтрагентДляРасшифровки);
	
	ОбновитьОтчет();
	
КонецПроцедуры	

Процедура ПриОткрытии()
	
	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
		ВыводЗаголовка();
		СформироватьЗаголовокФормы();
	КонецЕсли;
	
	НеЗаполнятьНастройкиПриОткрытии=Ложь;
	
	УправлениеПометкамиКнопокКоманднойПанели();	
	
КонецПроцедуры

Процедура ОбновлениеОтображения()

	СформироватьЗаголовокФормы();

КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки = СформироватьСтруктуруДляСохраненияНастроек();
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	Перем ТабПравилаВыводаИтогов;
	Перем НастройкиПостроителя;
	
	// Если настройка восстанавливается, когда открывается форма сформированного отчета, игнорируем
	Если НеЗаполнятьНастройкиПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьЗначение("ОбщиеПараметрыОтчетов"+ИмяРегистраБухгалтерии, СформироватьСтруктуруДляСохраненияНастроек());
	
КонецПроцедуры

