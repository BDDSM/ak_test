Перем КартинкаСортировкиУбыв;
Перем КартинкаСортировкиВозр;

/////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Процедура УправлениеДиалогом()
	
	ЭлементыФормы.ПоВалютам.Доступность = ЕстьВалюта;
	
	ЭлементыФормы.ПоКоличеству.Доступность = ЕстьКоличество;
	
	ЭлементыФормы.КоманднаяПанельПорядок.Кнопки.СменитьНаправление.Доступность = ПостроительОтчета.Порядок.Количество()<>0;
	
КонецПроцедуры // УправлениеДиалогом()

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЕ ЭЛЕМЕНТОВ ФОРМЫ
//

Процедура ПоСубсчетамПриИзменении(Элемент)
	 ПерезаполнитьНачальныеНастройки();
КонецПроцедуры

Процедура КнопкаОКНажатие(Элемент)
	Закрыть(Истина);
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ВидСубконто1ПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Субконто.ТекущиеДанные;
	НомерСубконто = ТекСтрока.НомерСтроки;
	
	ПерезаполнитьНачальныеНастройки();
	
	Если ПостроительОтчета.Отбор.Найти("Субконто"+НомерСубконто) = Неопределено Тогда
		ПостроительОтчета.Отбор.Добавить("Субконто"+НомерСубконто);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаОтбора = ЭлементыФормы.Отбор.ТекущиеДанные;
	
	// Принятая в конфигурации обработка работает только для равенства/неравенства
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Равно
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
		ТипЗначенияПоля = СтрокаОтбора.ТипЗначения;
		НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СубконтоПослеУдаления(Элемент)
	
	ПерезаполнитьНачальныеНастройки();
	
	Для каждого стр Из Субконто Цикл
	
		Поле = ПостроительОтчета.Отбор.Найти("Субконто"+стр.НомерСтроки);
		Если Поле <> Неопределено Тогда
			Если Поле.ТипЗначения <> стр.ВидСубконто.ТипЗначения Тогда
				ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(Поле));
				ПостроительОтчета.Отбор.Добавить("Субконто"+стр.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСортировкиДобавитьСортировку(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ДоступныеПоля.ТекущиеДанные;
	
	ПостроительОтчета.Порядок.Добавить(ТекСтрока.ПутьКДанным);
	
КонецПроцедуры

Процедура КоманднаяПанельСортировкиУдалитьСортировку(Кнопка)
	
	ТекСтрока = ЭлементыФормы.Порядок.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ПостроительОтчета.Порядок.Удалить(ПостроительОтчета.Порядок.Индекс(ТекСтрока));
	КонецЕсли;
	
КонецПроцедуры

Процедура СубконтоПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = ?(Субконто.Количество() >= МаксКоличествоСубконто, Истина, Ложь);
	
КонецПроцедуры

Процедура СубконтоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекВидСубконто = Элемент.ТекущиеДанные.ВидСубконто;
		Элемент.ТекущиеДанные.ВидСубконто = ПланыВидовХарактеристик[ТекВидСубконто.Метаданные().Имя].ПустаяСсылка();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПорядокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	КартинкаСортировки = ?(ДанныеСтроки.Направление = НаправлениеСортировки.Возр, КартинкаСортировкиВозр, КартинкаСортировкиУбыв);
	
	ОформлениеСтроки.Ячейки.Направление.УстановитьКартинку(КартинкаСортировки);
	
КонецПроцедуры

Процедура ПорядокПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "Направление" Тогда
	
		ТекСтрока = Элемент.ТекущаяСтрока;
		ТекСтрока.Направление = ?(ТекСтрока.Направление = НаправлениеСортировки.Возр, НаправлениеСортировки.Убыв, НаправлениеСортировки.Возр);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПорядокСменитьНаправление(Кнопка)
	
	ТекСтрока = ЭлементыФормы.Порядок.ТекущиеДанные;
	ТекСтрока.Направление = ?(ТекСтрока.Направление = НаправлениеСортировки.Возр, НаправлениеСортировки.Убыв, НаправлениеСортировки.Возр);
	
КонецПроцедуры

Процедура ДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПостроительОтчета.Порядок.Добавить(ВыбраннаяСтрока.ПутьКДанным);
	
КонецПроцедуры

Процедура ПорядокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ПолеНастройки") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПостроительОтчета.Порядок.Добавить(ПараметрыПеретаскивания.Значение.ПутьКДанным);
		
		Если Строка <> Неопределено Тогда
			
			ВеличинаСдвига = ПостроительОтчета.Порядок.Индекс(Строка) - ПостроительОтчета.Порядок.Количество() + 1;
			
			ПостроительОтчета.Порядок.Сдвинуть(ПостроительОтчета.Порядок.Количество()-1, ВеличинаСдвига);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ЭлементПорядка") Тогда
		
		Если Строка <> Неопределено Тогда
			
			ВеличинаСдвига = ПостроительОтчета.Порядок.Индекс(Строка) - ПостроительОтчета.Порядок.Индекс(ПараметрыПеретаскивания.Значение);
			
			ПостроительОтчета.Порядок.Сдвинуть(ПостроительОтчета.Порядок.Индекс(ПараметрыПеретаскивания.Значение), ВеличинаСдвига);
			
		КонецЕсли;
		
		// строку перетащили, запретим ее удаление
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПорядокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ПолеНастройки") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ЭлементПорядка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПорядокОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Отмена Тогда
		
		ПостроительОтчета.Порядок.Удалить(ПостроительОтчета.Порядок.Индекс(ПараметрыПеретаскивания.Значение));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ЭлементПорядка") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УправлениеДиалогом();
	
КонецПроцедуры

Процедура ПриОткрытии()

	Если РегламентированнаяОтчетность.ИДКонфигурации() <> "БП" Тогда
		// Проверка ведения однофирменности
		УчетПоВсемОрганизациям = Истина;
	КонецЕсли;
	
    БухгалтерскиеОтчеты.ПоддержкаОднофирменностиДляФормыНастроекБухОтчетов(ЭтаФорма, УчетПоВсемОрганизациям);

КонецПроцедуры

Процедура ОбновлениеОтображения()
	УправлениеДиалогом();
КонецПроцедуры


КартинкаСортировкиУбыв = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
КартинкаСортировкиВозр = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;




