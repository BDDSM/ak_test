
&НаСервере
Процедура ПрочитатьДанныеСервер()
	
	ТабДатчики.Очистить();
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT SMS.Name_TT,
					  |  	SMS.Место,
					  |  	SMS.sensor_name,
					  |  	SMS.LimitTemra,
					  |  	SMS.nizh_predel,
					  |  	SMS.verh_predel,
					  |  	TSD.Sensor_value, TSD.date_add
					  |FROM [M2].[dbo].[TemraSensorData] as TSD (nolock)
					  |INNER JOIN [Reports].[dbo].[Shop_Mesto_Sensor] (nolock) as SMS
					  |ON TSD.id_mesto = SMS.id_mesto and TSD.id_sensor = SMS.id_sendor
					  |where TSD.date_add between " + ВнешниеДанные.ФорматПоля(Отчет.ДатаНачала) + " and " + ВнешниеДанные.ФорматПоля(Отчет.ДатаОкончание);
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Если Rs.Fields("nizh_predel").Value = -99
				И Rs.Fields("verh_predel").Value = 99 Тогда
				rs.MoveNext();
			КонецЕсли;	
			СтрЕдиница = Rs.Fields("Name_TT").Value;
			Место = Rs.Fields("Место").Value;
			НомерДатчика = Rs.Fields("sensor_name").Value;
			СтрокиДатчики = ТабДатчики.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Место, НомерДатчика", СтрЕдиница, Место, НомерДатчика));
			Если СтрокиДатчики.Количество() = 0 Тогда
				СтрокаДоб = ТабДатчики.Добавить();
				СтрокаДоб.СтруктурнаяЕдиница = СтрЕдиница;
				СтрокаДоб.Место = Место;
				СтрокаДоб.НомерДатчика = НомерДатчика;
				СтрокаДоб.ТемпературныйРежим = Rs.Fields("LimitTemra").Value;
			Иначе
				СтрокаДоб = СтрокиДатчики[0];
			КонецЕсли;
			Если Rs.Fields("nizh_predel").Value > Rs.Fields("Sensor_value").Value
				ИЛИ Rs.Fields("verh_predel").Value < Rs.Fields("Sensor_value").Value Тогда
				СтрокаДоб.КоличествоНарушений = СтрокаДоб.КоличествоНарушений + 1;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	Если Не ЗначениеЗаполнено(Отчет.ДатаНачала) Тогда
		Сообщить("Дата начала не заполнена");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.ДатаОкончание) Тогда
		Сообщить("Дата окончания не заполнена");
		Возврат;
	КонецЕсли;
	
	ПрочитатьДанныеСервер();
	
КонецПроцедуры

Процедура ПостроитьГрафикСервер(СтрЕдиница, Место, НомерДатчика)
	
	Диаграмма.УстановитьПолныйИнтервал(Отчет.ДатаНачала, Отчет.ДатаОкончание);
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("Показание", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ИмяДатчика", Новый ОписаниеТипов("Строка"));
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT SMS.Name_TT,
					  |  	SMS.Место,
					  |  	SMS.sensor_name,
					  |  	SMS.LimitTemra,
					  |  	SMS.nizh_predel,
					  |  	SMS.verh_predel,
					  |  	TSD.Sensor_value, TSD.date_add
					  |FROM [M2].[dbo].[TemraSensorData] as TSD (nolock)
					  |INNER JOIN [Reports].[dbo].[Shop_Mesto_Sensor] (nolock) as SMS
					  |ON TSD.id_mesto = SMS.id_mesto and TSD.id_sensor = SMS.id_sendor
					  |where TSD.date_add between " + ВнешниеДанные.ФорматПоля(Отчет.ДатаНачала) + " and " + ВнешниеДанные.ФорматПоля(Отчет.ДатаОкончание) + "
					  |	and SMS.Name_TT = " + ВнешниеДанные.ФорматПоля(СтрЕдиница) + " and SMS.Место = " + ВнешниеДанные.ФорматПоля(Место) + " and SMS.sensor_name = " + ВнешниеДанные.ФорматПоля(НомерДатчика) + "
					  |order by date_add";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений();
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаКонца");
	ТаблицаИнтервалов.Колонки.Добавить("ЗначениеПревышения");
	
	Макет = Отчеты.ГрафикПоТемпературамДатчиков.ПолучитьМакет("Макет");
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабПоказания.Вывести(Область);
	Диаграмма.Очистить();
	Серия = Диаграмма.УстановитьСерию(НомерДатчика);
	Попытка
		rs.MoveFirst();
		
		Счетчик = 0;
		Норма = "";
		Пока НЕ rs.EOF() Цикл
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Дата = Rs.Fields("date_add").Value;
			Область.Параметры.Показание = Rs.Fields("Sensor_value").Value;
			ТабПоказания.Вывести(Область);
			Норма = Rs.Fields("LimitTemra").Value;
			//Если Счетчик % 2 = 0 Тогда
			//	Счетчик = Счетчик + 1;
			//	rs.MoveNext();
			//	Продолжить;
			//КонецЕсли;
			Нарушение = 0;
			Если Rs.Fields("Sensor_value").Value > Rs.Fields("verh_predel").Value Тогда
				Нарушение = Rs.Fields("Sensor_value").Value - Rs.Fields("verh_predel").Value;
			ИначеЕсли Rs.Fields("Sensor_value").Value < Rs.Fields("nizh_predel").Value Тогда
				Нарушение = Rs.Fields("Sensor_value").Value - Rs.Fields("verh_predel").Value;
			КонецЕсли;	
			Если ТаблицаИнтервалов.Количество() = 0 Тогда
				СтрокаДоб = ТаблицаИнтервалов.Добавить();
				СтрокаДоб.ДатаНачала = Rs.Fields("date_add").Value;
				СтрокаДоб.ДатаКонца = Rs.Fields("date_add").Value;
				СтрокаДоб.ЗначениеПревышения = Нарушение;
			Иначе
				Если ТаблицаИнтервалов[ТаблицаИнтервалов.Количество() - 1].ЗначениеПревышения = Нарушение Тогда
					СтрокаДоб.ДатаКонца = Rs.Fields("date_add").Value;
				Иначе
					СтрокаДоб = ТаблицаИнтервалов.Добавить();
					СтрокаДоб.ДатаНачала = ТаблицаИнтервалов[ТаблицаИнтервалов.Количество() - 2].ДатаКонца;
					СтрокаДоб.ДатаКонца = Rs.Fields("date_add").Value;
					СтрокаДоб.ЗначениеПревышения = Нарушение;
				КонецЕсли;	
			КонецЕсли;	
			rs.MoveNext();
			Счетчик = Счетчик + 1;
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ТабТочек = ТаблицаИнтервалов.Скопировать();
	ТабТочек.Свернуть("ЗначениеПревышения");
	ТабТочек.Колонки.Добавить("ТочкаДГ");
	
	СтрокаБезОтклонения = ТабТочек.Найти(0, "ЗначениеПревышения");
	Если СтрокаБезОтклонения = Неопределено Тогда
		СтрокаДоб = ТабТочек.Добавить();
		СтрокаДоб.ЗначениеПревышения = 0;
	КонецЕсли;
	
	ТабТочек.Сортировать("ЗначениеПревышения Убыв");
	Для Каждого СтрокаТочки Из ТабТочек Цикл
		СтрокиИнтервалы = ТаблицаИнтервалов.НайтиСтроки(Новый Структура("ЗначениеПревышения", СтрокаТочки.ЗначениеПревышения));
		ОбщаяПродолжительность = 0;
		Для Каждого СтрокаИнтервал Из СтрокиИнтервалы Цикл
			ОбщаяПродолжительность = ОбщаяПродолжительность + (СтрокаИнтервал.ДатаКонца - СтрокаИнтервал.ДатаНачала);
		КонецЦикла;	
		Если СтрокаТочки.ЗначениеПревышения = 0 Тогда
			ТочкаДГ = Диаграмма.УстановитьТочку("Норма " + Норма + " (Общая продол. " + Формат(ОбщаяПродолжительность / 60, "ЧДЦ=0; ЧГ=0") + " мин)");
		ИначеЕсли СтрокаТочки.ЗначениеПревышения > 0 Тогда	
			ТочкаДГ = Диаграмма.УстановитьТочку("Выше нормы на " + СтрокаТочки.ЗначениеПревышения + " гр. (Общая продол. " + Формат(ОбщаяПродолжительность / 60, "ЧДЦ=0; ЧГ=0") + " мин)");
		ИначеЕсли СтрокаТочки.ЗначениеПревышения > 0 Тогда	
			ТочкаДГ = Диаграмма.УстановитьТочку("Ниже нормы на " + СтрокаТочки.ЗначениеПревышения * (-1) + " гр. (Общая продол. " + Формат(ОбщаяПродолжительность / 60, "ЧДЦ=0; ЧГ=0") + " мин)");
		КонецЕсли;	
		СтрокаТочки.ТочкаДГ = ТочкаДГ;
	КонецЦикла;
	
	Для Каждого СтрокаИнтервала Из ТаблицаИнтервалов Цикл
		СтрокаТочки = ТабТочек.Найти(СтрокаИнтервала.ЗначениеПревышения, "ЗначениеПревышения");
		Значение = Диаграмма.ПолучитьЗначение(СтрокаТочки.ТочкаДГ, Серия);
		Интервал = Значение.Добавить();
		Интервал.Начало = СтрокаИнтервала.ДатаНачала;
		Интервал.Конец = СтрокаИнтервала.ДатаКонца;
		Если СтрокаИнтервала.ЗначениеПревышения = 0 Тогда
			Интервал.Цвет = Новый Цвет(100, 255, 100);
		Иначе
			Интервал.Цвет = Новый Цвет(255, 120, 120);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПостроитьГрафик(Команда)
	
	Результат.Очистить();
	ТабПоказания.Очистить();
	
	Если Элементы.ТабДатчики.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не выбрана строка с датчиком");
		Возврат;
	КонецЕсли;	
	
	ПостроитьГрафикСервер(Элементы.ТабДатчики.ТекущиеДанные.СтруктурнаяЕдиница, Элементы.ТабДатчики.ТекущиеДанные.Место, Элементы.ТабДатчики.ТекущиеДанные.НомерДатчика);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Минута;
	//Диаграмма.КратностьПериодическогоВарианта = 10;
	//Диаграмма.АвтоОпределениеПолногоИнтервала = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Диаграмма.КратностьПериодическогоВарианта = 2;
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
	шв = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0];
	шв.Единица = ТипЕдиницыШкалыВремени.День;
	шв.ФорматДня = ФорматДняШкалыВремени.ДеньМесяца;
	
	шв = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	шв.Единица = ТипЕдиницыШкалыВремени.Минута;
	шв.Формат = "ДФ=HH:mm";
	шв.Кратность = 10;
	
КонецПроцедуры
