Функция ПолучитьТаблицуРасхожденийСчета57_2(ДатаНачала, ДатаОкончания, ЕстьОтборТТ, МассивТТ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Счет57_2 = ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ТаблицаРезультат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Финансовый"));
	ТаблицаРезультат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультат.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаРезультат.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	ТаблицаРезультат.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(ФинансовыйДвиженияССубконто.Период, ДЕНЬ) КАК ПериодДень,
	               |	МАКСИМУМ(ФинансовыйДвиженияССубконто.Регистратор) КАК Регистратор,
	               |	ФинансовыйДвиженияССубконто.СубконтоКт1 КАК Организация,
	               |	ФинансовыйДвиженияССубконто.СубконтоКт2 КАК ТТ,
	               |	ФинансовыйДвиженияССубконто.СубконтоКт3 КАК Терминал
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			СчетКт = &Счет
	               |				И СубконтоКт2.НомерТочки > 0
	               |				И (&ЕстьОтборТТ = ЛОЖЬ
	               |					ИЛИ СубконтоКт2 В (&МассивТТ)),
	               |			,
	               |			) КАК ФинансовыйДвиженияССубконто
	               |ГДЕ
	               |	ФинансовыйДвиженияССубконто.Регистратор ССЫЛКА Документ.ПоступлениеВБанк
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ФинансовыйДвиженияССубконто.Период, ДЕНЬ),
	               |	ФинансовыйДвиженияССубконто.СубконтоКт1,
	               |	ФинансовыйДвиженияССубконто.СубконтоКт2,
	               |	ФинансовыйДвиженияССубконто.СубконтоКт3
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодДень
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФинансовыйОстатки.Субконто1 КАК Организация,
	               |	ФинансовыйОстатки.Субконто2 КАК ТТ,
	               |	ФинансовыйОстатки.Субконто3 КАК Терминал,
	               |	ФинансовыйОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(
	               |			&ДатаОстатков,
	               |			Счет = &Счет,
	               |			,
	               |			Субконто2.НомерТочки > 0
	               |				И (&ЕстьОтборТТ = ЛОЖЬ
	               |					ИЛИ Субконто2 В (&МассивТТ))) КАК ФинансовыйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ФинансовыйОбороты.Период, ДЕНЬ) КАК ПериодДень,
	               |	ФинансовыйОбороты.Субконто1 КАК Организация,
	               |	ФинансовыйОбороты.Субконто2 КАК ТТ,
	               |	ФинансовыйОбороты.Субконто3 КАК Терминал,
	               |	СУММА(ФинансовыйОбороты.СуммаОборот) КАК СуммаОборот,
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ЛистУчета
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Счет = &Счет,
	               |			,
	               |			Субконто2.НомерТочки > 0
	               |				И (&ЕстьОтборТТ = ЛОЖЬ
	               |					ИЛИ Субконто2 В (&МассивТТ)),
	               |			,
	               |			) КАК ФинансовыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ФинансовыйОбороты.Период, ДЕНЬ),
	               |	ФинансовыйОбороты.Субконто1,
	               |	ФинансовыйОбороты.Субконто2,
	               |	ФинансовыйОбороты.Субконто3,
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ЛистУчета
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодДень,
	               |	Порядок";
				   
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(НачалоДня(ДатаНачала) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНачала), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счет", Счет57_2);
	Запрос.УстановитьПараметр("ЕстьОтборТТ", ЕстьОтборТТ);
	Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабРегистраторы = Результаты[0].Выгрузить();
	ТабРегистраторы.Индексы.Добавить("ПериодДень");
	ТабИтоги = Результаты[1].Выгрузить();
	ТабИтоги.Индексы.Добавить("ТТ");
	ТабОбороты = Результаты[2].Выгрузить();
	ТабОбороты.Индексы.Добавить("ПериодДень");
	
	ТабПредыдущихЗначений = Новый ТаблицаЗначений();
	ТабПредыдущихЗначений.Колонки.Добавить("Организация");
	ТабПредыдущихЗначений.Колонки.Добавить("ТТ");
	ТабПредыдущихЗначений.Колонки.Добавить("Терминал");
	ТабПредыдущихЗначений.Колонки.Добавить("Значение");
	
	ДатаОбработки = ДатаНачала;
	Пока ДатаОбработки <= ДатаОкончания Цикл
		СтрокиОбороты = ТабОбороты.НайтиСтроки(Новый Структура("ПериодДень", ДатаОбработки));
		Для Каждого СтрокаОборот Из СтрокиОбороты Цикл
			Если СтрокаОборот.Порядок = 0 Тогда
				СтрокиИтог = ТабИтоги.НайтиСтроки(Новый Структура("Организация, ТТ, Терминал", СтрокаОборот.Организация, СтрокаОборот.ТТ, СтрокаОборот.Терминал));
				Если СтрокиИтог.Количество() = 0 Тогда
					СтрокаИтог = ТабИтоги.Добавить();
					СтрокаИтог.Организация = СтрокаОборот.Организация;
					СтрокаИтог.ТТ = СтрокаОборот.ТТ;
					СтрокаИтог.Терминал = СтрокаОборот.Терминал;
					СтрокаИтог.СуммаОстаток = 0;
				Иначе
					СтрокаИтог = СтрокиИтог[0];
				КонецЕсли;	
				СтрокаИтог.СуммаОстаток = СтрокаИтог.СуммаОстаток + СтрокаОборот.СуммаОборот;
			КонецЕсли;	
		КонецЦикла;
		
		СтрокиПоступления = ТабРегистраторы.НайтиСтроки(Новый Структура("ПериодДень", ДатаОбработки));
		Для Каждого СтрокаПоступление Из СтрокиПоступления Цикл
			СтрокиПредЗначения = ТабПредыдущихЗначений.НайтиСтроки(Новый Структура("Организация, ТТ, Терминал", СтрокаПоступление.Организация, СтрокаПоступление.ТТ, СтрокаПоступление.Терминал));
			Если СтрокиПредЗначения.Количество() = 0 Тогда
				СтрокаПредЗначение = ТабПредыдущихЗначений.Добавить();
				СтрокаПредЗначение.Организация = СтрокаПоступление.Организация;
				СтрокаПредЗначение.ТТ = СтрокаПоступление.ТТ;
				СтрокаПредЗначение.Терминал = СтрокаПоступление.Терминал;
				СтрокаПредЗначение.Значение = 0;
			Иначе
				СтрокаПредЗначение = СтрокиПредЗначения[0];
			КонецЕсли;
			СтрокиИтог = ТабИтоги.НайтиСтроки(Новый Структура("Организация, ТТ, Терминал", СтрокаПоступление.Организация, СтрокаПоступление.ТТ, СтрокаПоступление.Терминал));
			Если СтрокиИтог.Количество() = 0 Тогда
				СтрокаИтог = ТабИтоги.Добавить();
				СтрокаИтог.Организация = СтрокаПоступление.Организация;
				СтрокаИтог.ТТ = СтрокаПоступление.ТТ;
				СтрокаИтог.Терминал = СтрокаПоступление.Терминал;
				СтрокаИтог.СуммаОстаток = 0;
			Иначе
				СтрокаИтог = СтрокиИтог[0];
			КонецЕсли;
			Разница = СтрокаПредЗначение.Значение - СтрокаИтог.СуммаОстаток;
			Разница = Разница * ?(Разница < 0, -1, 1);
			Если Разница >= 30 И СтрокаИтог.СуммаОстаток <> 0 Тогда
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				СтрокаРезультат.Дата = ДатаОбработки;
				СтрокаРезультат.Организация = СтрокаПоступление.Организация;
				СтрокаРезультат.ТТ = СтрокаПоступление.ТТ;
				СтрокаРезультат.Терминал = СтрокаПоступление.Терминал;
				СтрокаРезультат.Отклонение = СтрокаИтог.СуммаОстаток;
			КонецЕсли;
			СтрокаПредЗначение.Значение = СтрокаИтог.СуммаОстаток;
		КонецЦикла;
		
		Для Каждого СтрокаОборот Из СтрокиОбороты Цикл
			Если СтрокаОборот.Порядок = 1 Тогда
				СтрокиИтог = ТабИтоги.НайтиСтроки(Новый Структура("Организация, ТТ, Терминал", СтрокаОборот.Организация, СтрокаОборот.ТТ, СтрокаОборот.Терминал));
				Если СтрокиИтог.Количество() = 0 Тогда
					СтрокаИтог = ТабИтоги.Добавить();
					СтрокаИтог.Организация = СтрокаОборот.Организация;
					СтрокаИтог.ТТ = СтрокаОборот.ТТ;
					СтрокаИтог.Терминал = СтрокаОборот.Терминал;
					СтрокаИтог.СуммаОстаток = 0;
				Иначе
					СтрокаИтог = СтрокиИтог[0];
				КонецЕсли;	
				СтрокаИтог.СуммаОстаток = СтрокаИтог.СуммаОстаток + СтрокаОборот.СуммаОборот;
			КонецЕсли;	
		КонецЦикла;
		
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	ТаблицаРезультат.ЗаполнитьЗначения(Счет57_2, "СчетУчета"); 
	ТаблицаРезультат.ЗаполнитьЗначения(1, "Приоритет"); 
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьТаблицуРасхожденийСчета57_1(ДатаНачала, ДатаОкончания, ЕстьОтборТТ, МассивТТ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Счет57_1 = ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ТаблицаРезультат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Финансовый"));
	ТаблицаРезультат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультат.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаРезультат.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	ТаблицаРезультат.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.Субконто1 КАК Организация,
	               |	ФинансовыйОстатки.Субконто2 КАК ТТ,
	               |	ФинансовыйОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(
	               |			&ДатаОстатков,
	               |			Счет = &Счет,
	               |			,
	               |			Субконто2.НомерТочки > 0
	               |				И (&ЕстьОтборТТ = ЛОЖЬ
	               |					ИЛИ Субконто2 В (&МассивТТ))) КАК ФинансовыйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ФинансовыйОбороты.Период, ДЕНЬ) КАК ПериодДень,
	               |	ФинансовыйОбороты.Субконто1 КАК Организация,
	               |	ФинансовыйОбороты.Субконто2 КАК ТТ,
	               |	СУММА(ФинансовыйОбороты.СуммаОборот) КАК СуммаОборот,
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ЛистУчета
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Счет = &Счет,
	               |			,
	               |			Субконто2.НомерТочки > 0
	               |				И (&ЕстьОтборТТ = ЛОЖЬ
	               |					ИЛИ Субконто2 В (&МассивТТ)),
	               |			,
	               |			) КАК ФинансовыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ФинансовыйОбороты.Период, ДЕНЬ),
	               |	ФинансовыйОбороты.Субконто1,
	               |	ФинансовыйОбороты.Субконто2,
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ЛистУчета
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодДень,
	               |	Порядок";
				   
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(НачалоДня(ДатаНачала) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНачала), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаОкончания) + 86400*2, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счет", Счет57_1);
	Запрос.УстановитьПараметр("ЕстьОтборТТ", ЕстьОтборТТ);
	Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабИтоги = Результаты[0].Выгрузить();
	ТабИтоги.Индексы.Добавить("Организация, ТТ");
	ТабОбороты = Результаты[1].Выгрузить();
	ТабОбороты.Индексы.Добавить("ПериодДень");
	ТабОбороты.Индексы.Добавить("ПериодДень, Организация, ТТ");
	
	ТабПредыдущихЗначений = Новый ТаблицаЗначений();
	ТабПредыдущихЗначений.Колонки.Добавить("Организация");
	ТабПредыдущихЗначений.Колонки.Добавить("ТТ");
	ТабПредыдущихЗначений.Колонки.Добавить("Значение");
	
	ДатаОбработки = ДатаНачала;
	Пока ДатаОбработки <= ДатаОкончания Цикл
		СтрокиОбороты = ТабОбороты.НайтиСтроки(Новый Структура("ПериодДень", ДатаОбработки));
		Для Каждого СтрокаОборот Из СтрокиОбороты Цикл
			Если СтрокаОборот.Порядок = 0 Тогда
				СтрокиИтог = ТабИтоги.НайтиСтроки(Новый Структура("Организация, ТТ", СтрокаОборот.Организация, СтрокаОборот.ТТ));
				Если СтрокиИтог.Количество() = 0 Тогда
					СтрокаИтог = ТабИтоги.Добавить();
					СтрокаИтог.Организация = СтрокаОборот.Организация;
					СтрокаИтог.ТТ = СтрокаОборот.ТТ;
					СтрокаИтог.СуммаОстаток = 0;
				Иначе
					СтрокаИтог = СтрокиИтог[0];
				КонецЕсли;	
				СтрокаИтог.СуммаОстаток = СтрокаИтог.СуммаОстаток + СтрокаОборот.СуммаОборот;
			КонецЕсли;	
		КонецЦикла;
		
		ТабИтогиКопия = ТабИтоги.Скопировать();
		
		Для Каждого СтрокаИтог Из ТабИтогиКопия Цикл
			Если СтрокаИтог.СуммаОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//расчитаем сальдо через два дня
			Для Каждого СтрокаОборот Из СтрокиОбороты Цикл
				Если СтрокаОборот.Порядок = 1 Тогда
					Если СтрокаИтог.Организация = СтрокаОборот.Организация
						И СтрокаИтог.ТТ = СтрокаОборот.ТТ Тогда
						СтрокаИтог.СуммаОстаток = СтрокаИтог.СуммаОстаток + СтрокаОборот.СуммаОборот;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			СтрокиОборотыКопия = ТабОбороты.НайтиСтроки(Новый Структура("ПериодДень, Организация, ТТ", ДатаОбработки + 86400, СтрокаИтог.Организация, СтрокаИтог.ТТ));
			Для Каждого СтрокаОборот Из СтрокиОборотыКопия Цикл
				Если СтрокаИтог.Организация = СтрокаОборот.Организация
					И СтрокаИтог.ТТ = СтрокаОборот.ТТ Тогда
					СтрокаИтог.СуммаОстаток = СтрокаИтог.СуммаОстаток + СтрокаОборот.СуммаОборот;
				КонецЕсли;
			КонецЦикла;
			
			СтрокиОборотыКопия = ТабОбороты.НайтиСтроки(Новый Структура("ПериодДень, Организация, ТТ", ДатаОбработки + 86400 * 2, СтрокаИтог.Организация, СтрокаИтог.ТТ));
			Для Каждого СтрокаОборот Из СтрокиОборотыКопия Цикл
				Если СтрокаОборот.Порядок = 0 Тогда
					Если СтрокаИтог.Организация = СтрокаОборот.Организация
						И СтрокаИтог.ТТ = СтрокаОборот.ТТ Тогда
						СтрокаИтог.СуммаОстаток = СтрокаИтог.СуммаОстаток + СтрокаОборот.СуммаОборот;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			СтрокиПредЗначение = ТабПредыдущихЗначений.НайтиСтроки(Новый Структура("Организация, ТТ", СтрокаИтог.Организация, СтрокаИтог.ТТ));
			Если СтрокиПредЗначение.Количество() = 0 Тогда
				СтрокаПредЗначение = ТабПредыдущихЗначений.Добавить();
				СтрокаПредЗначение.Организация = СтрокаИтог.Организация;
				СтрокаПредЗначение.ТТ = СтрокаИтог.ТТ;
				СтрокаПредЗначение.Значение = 0;
			Иначе
				СтрокаПредЗначение = СтрокиПредЗначение[0];
			КонецЕсли;
			Разница = СтрокаПредЗначение.Значение - СтрокаИтог.СуммаОстаток;
			Разница = Разница * ?(Разница < 0, -1, 1);
			Если Разница >= 30 И СтрокаИтог.СуммаОстаток <> 0 Тогда
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				СтрокаРезультат.Дата = ДатаОбработки;
				СтрокаРезультат.Организация = СтрокаИтог.Организация;
				СтрокаРезультат.ТТ = СтрокаИтог.ТТ;
				СтрокаРезультат.Отклонение = СтрокаИтог.СуммаОстаток;
			КонецЕсли;
			СтрокаПредЗначение.Значение = СтрокаИтог.СуммаОстаток;
			
		КонецЦикла;	
		
		Для Каждого СтрокаОборот Из СтрокиОбороты Цикл
			Если СтрокаОборот.Порядок = 1 Тогда
				СтрокиИтог = ТабИтоги.НайтиСтроки(Новый Структура("Организация, ТТ", СтрокаОборот.Организация, СтрокаОборот.ТТ));
				Если СтрокиИтог.Количество() = 0 Тогда
					СтрокаИтог = ТабИтоги.Добавить();
					СтрокаИтог.Организация = СтрокаОборот.Организация;
					СтрокаИтог.ТТ = СтрокаОборот.ТТ;
					СтрокаИтог.СуммаОстаток = 0;
				Иначе
					СтрокаИтог = СтрокиИтог[0];	
				КонецЕсли;	
				СтрокаИтог.СуммаОстаток = СтрокаИтог.СуммаОстаток + СтрокаОборот.СуммаОборот;
			КонецЕсли;	
		КонецЦикла;
		
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	ТаблицаРезультат.ЗаполнитьЗначения(Счет57_1, "СчетУчета");
	ТаблицаРезультат.ЗаполнитьЗначения(0, "Приоритет"); 
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьТаблицуРасхожденийСчета44_3(ДатаНачала, ДатаОкончания, ЕстьОтборТТ, МассивТТ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Счет44_3 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ТаблицаРезультат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Финансовый"));
	ТаблицаРезультат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультат.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаРезультат.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	ТаблицаРезультат.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОбороты.Субконто1 КАК ТТ,
	               |	ФинансовыйОбороты.СуммаОборот КАК Отклонение,
	               |	ФинансовыйОбороты.Период КАК Дата
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			День,
	               |			Счет = &Счет,
	               |			,
	               |			Субконто1.НомерТочки > 0
	               |				И (&ЕстьОтборТТ = ЛОЖЬ
	               |					ИЛИ Субконто1 В (&МассивТТ))
	               |				И Субконто2 = &Статья,
	               |			,
	               |			) КАК ФинансовыйОбороты
	               |ГДЕ
	               |	(ФинансовыйОбороты.СуммаОборот <= -1000
	               |			ИЛИ ФинансовыйОбороты.СуммаОборот >= 1000)";
				   
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНачала), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счет", Счет44_3);
	Запрос.УстановитьПараметр("ЕстьОтборТТ", ЕстьОтборТТ);
	Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
	Запрос.УстановитьПараметр("Статья", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39313"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), Выборка);
	КонецЦикла;	
	
	ТаблицаРезультат.ЗаполнитьЗначения(Счет44_3, "СчетУчета");
	ТаблицаРезультат.ЗаполнитьЗначения(2, "Приоритет"); 
	
	Возврат ТаблицаРезультат;
	
КонецФункции