

// Выполянет запрос и резульатат запроса возвращает в таблицу значений
//
&НаСервере
Функция База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	Возврат тзРезультат;
	
КонецФункции

&НаСервере
Процедура База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	//тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	Попытка
		RecordSet.Close();
	Исключение
	КонецПопытки;	
		
КонецПроцедуры


&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		
		Если ТипЗнч(допПараметры) = Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(Command, допПараметры);
		КонецЕсли;			
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		Command.CommandText = ТекстЗапроса;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
КонецФункции

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		Catalog = Новый COMОбъект("ADOX.Catalog");			
		
		Catalog.ActiveConnection = СтрокаПодключения;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
&НаСервере
Функция База_РезульататЗапросВТаблицуЗначений(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
		NameFiled = RecordSet.Fields.Item(НомерКолонки).Name;
		NameFiled = СтрЗаменить(NameFiled,"$","_");
		тз.Колонки.Добавить(NameFiled,,RecordSet.Fields.Item(НомерКолонки).Name, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Закрываем датасет возвращаемй База_ВыполнитьЗапрос();
//
&НаСервере
Процедура База_ЗакрытьЗапрос(RecordSet) 
	Если ТипЗнч(RecordSet) = Тип("COMОбъект") тогда
		RecordSet.Close();
	КонецЕсли;		
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВремТЗ = Новый ТаблицаЗначений;
	ВремТЗ.Колонки.Добавить("лкДата", Новый ОписаниеТипов("Дата"));
	ВремТЗ.Колонки.Добавить("лкТип",Новый ОписаниеТипов("Число"));
	ВремТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	//+++АК SHEP 2018.08.27 ИП-00019339
	//ТекстЗапроса = "select i.Date лкДатa, ou.type_BV лкТип, COUNT(*) Количество
	//|from IES..Outgoing (nolock) ou
	//|inner join SMSGate..Incoming (nolock) i on i.rowguid=ou.rowguid
	//|left join Loyalty..DiscountCard (nolock) d on d.DiscountCardUID=ou.DiscountCardUID
	//|group by i.Date, ou.type_BV
	//|
	//|union all 
	//|
	//|select Date лкДатa, 0 лкТип, COUNT(*) Количество
	//|from (select distinct i.rowguid , i.Date
	//|from IES..Outgoing (nolock) ou
	//|inner join SMSGate..Incoming (nolock) i on i.rowguid=ou.rowguid ) a
	//|group by Date;";
	ТекстЗапроса = "exec [Reports].[dbo].[FOR1C_Statistic_Outgouing]";
	//---АК SHEP 2018.08.27
		
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01");
	лкВремТЗ = База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(ТекстЗапроса, Неопределено, СтрокаПодключения);
	Для каждого ТекСтрТЗ Из лкВремТЗ Цикл
 
 		НоваяСтрока = ВремТЗ.Добавить();
        НоваяСтрока.лкДата = ТекСтрТЗ.лкДатa;
		НоваяСтрока.лкТип = ТекСтрТЗ.лкТип;
		НоваяСтрока.Количество = ТекСтрТЗ.Количество;
		
 	КонецЦикла;
	
	
	Если ВремТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//Получение настроек СКД из компоновщика
	настройкиСКД = КомпоновщикНастроек.Настройки;
	//настройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ВремТЗ", ВремТЗ);
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровкиОтчета = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Получение самой СКД из макета
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Связь между таблицей значений и именами в СКД
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ВремТЗ", ВремТЗ);
	
	//Макет компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиСКД, ДанныеРасшифровкиОтчета);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОтчета);
	
	ТабРезультат = Новый ТабличныйДокумент;
	
	//Вывод результата
	//Результат.Очистить(); 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
	ДокументРезультат.Вывести(ТабРезультат);
	
КонецПроцедуры

