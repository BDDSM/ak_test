
//+++АК SHEP 20170928 ИП-00016764
// Добавлен отчёт

Перем Кэш;
Перем МенеджерыОбъектовПолей;

Функция ПолучитьЗначениеИзКэша(Вид, Ключ, ПараметрыНового = Неопределено)
	
	Если НЕ Кэш.Свойство(Вид) Тогда
		Кэш.Вставить(Вид, Новый Соответствие);
	КонецЕсли;
	
	ЗначениеИзКэш = Кэш[Вид][Ключ];
	
	Если ЗначениеИзКэш = Неопределено Тогда
		
		МенеджерОбъекта = МенеджерыОбъектовПолей[Вид];
		
		Если Вид = "ПомощникУправляющего" Тогда
			ЗначениеИзКэш = ?(ЗначениеЗаполнено(Ключ), МенеджерОбъекта.НайтиПоКоду(Ключ), МенеджерОбъекта.ПустаяСсылка());
		Иначе // Вид = "Магазин", "Сотрудник", "Управляющий" Тогда
			ЗначениеИзКэш = ?(ЗначениеЗаполнено(Ключ), МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ)), МенеджерОбъекта.ПустаяСсылка());
		КонецЕсли;
		
		Кэш[Вид].Вставить(Ключ, ЗначениеИзКэш);
		
	КонецЕсли;
	
	Возврат ЗначениеИзКэш;
	
КонецФункции // ПолучитьЗначениеИзКэша()

Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		//#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		//#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция База_ВыполнитьЗапрос(ТекстЗапроса) Экспорт
	
	СтрокаПодключенияТелеграм = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
	
	Попытка
		
		CurrentConnection = База_Подключение(СтрокаПодключенияТелеграм);
		CurrentConnection.CursorLocation = 2;
		
		RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
		Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
			RecordSet=RecordSet.NextRecordSet();
		КонецЦикла;				
		
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

Функция ВКонецДня(Дата)
	Возврат ?(Дата = Дата(1,1,1), Дата, КонецДня(Дата));
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаНачала = Дата(1,1,1);
	ДатаОкончания = Дата(1,1,1);
	
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если Строка(ПользПоле.Параметр) = "Период" Тогда
				ДатаНачала = ПользПоле.Значение.ДатаНачала;
				ДатаОкончания = ВКонецДня(ПользПоле.Значение.ДатаОкончания);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТиповВремя = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время));
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("КодСотрудника", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("ПомощникУправляющего", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Управляющий", Новый ОписаниеТипов("СправочникСсылка.РолиПользователей"));
	ТаблицаДанных.Колонки.Добавить("ВремяПрихода", ОписаниеТиповВремя);
	ТаблицаДанных.Колонки.Добавить("ВремяУхода", ОписаниеТиповВремя);
	ТаблицаДанных.Колонки.Добавить("ЧасовВМагазине", Новый ОписаниеТипов("Число"));
	
	УсловиеОтбораSQL = "";
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		УсловиеОтбораSQL = УсловиеОтбораSQL + ?(ПустаяСтрока(УсловиеОтбораSQL), "", "
		|AND ") + "ct.[DateTimeAdd] BETWEEN " + ВнешниеДанные.ФорматПоля(ДатаНачала) + " AND " + ВнешниеДанные.ФорматПоля(ДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		УсловиеОтбораSQL = УсловиеОтбораSQL + ?(ПустаяСтрока(УсловиеОтбораSQL), "", "
		|AND ") + "ct.[DateTimeAdd] >= " + ВнешниеДанные.ФорматПоля(ДатаНачала);
	КонецЕсли;
	
	ТекстЗапросаSQL = "
		|IF OBJECT_ID('tempdb..#ct')is not null drop table #ct
		|IF OBJECT_ID('tempdb..#ct_predv')is not null drop table #ct_predv
		|
		|SELECT
		|	CAST(CAST(ct.[DateTimeAdd] AS DATE) AS DATEtime) Дата
		|	, ct.DateTimeAdd
		|	, ct.ShopNo
		|	, ct.CashierID
		|	, ct.Flag
		|INTO #ct_predv
		|FROM [srv-sql04].[frontol].[dbo].[CashierTime] ct (NOLOCK)
		|	" + ?(ПустаяСтрока(УсловиеОтбораSQL), "", "
		|WHERE
		|	" + УсловиеОтбораSQL) + "
		|;
		|
		|SELECT
		|	ct.Дата
		|	, ct.ShopNo
		|	, ct.CashierID
		|	, ct.DateTimeAdd [ВремяПрихода]
		|	, MAX(ct2.DateTimeAdd) [ВремяУхода]
		|INTO #ct
		|FROM
		|	#ct_predv ct (NOLOCK)
		|	LEFT JOIN #ct_predv ct2 (NOLOCK)
		|	ON ct.Дата = ct2.Дата
		|		AND ct.ShopNo = ct2.ShopNo
		|		AND ct.CashierID = ct2.CashierID
		|		AND ct.DateTimeAdd < ct2.DateTimeAdd
		|WHERE
		|	ct.Flag = 1
		|	AND ct2.Flag = 0
		|
		|GROUP BY
		|	ct.Дата
		|	, ct.ShopNo
		|	, ct.CashierID
		|	, ct.DateTimeAdd
		|;
		|
		|IF OBJECT_ID('tempdb..#ct_predv')is not null drop table #ct_predv
		|
		|SELECT
		|	ct.Дата Дата
		|	, CAST(master.dbo.Binary2UID(tt.Ref) AS nvarchar(36)) [Магазин]
		|	, ct.ShopNo
		|	, ct.CashierID [КодСотрудника]
		//|	, FizLica._Description [ФИОСотрудника]
		|	, CAST(master.dbo.Binary2UID(FizLica._IDRRef) AS nvarchar(36)) [Сотрудник]
		|	, Pm._SotrCode [ПомощникУправляющего]
		|	, CAST(master.dbo.Binary2UID(Upr._ParentIDRRef) AS nvarchar(36)) [Управляющий]
		|	, ct.[ВремяПрихода]
		|	, ct.[ВремяУхода]
		|	, DATEDIFF(HOUR, ct.[ВремяПрихода], ct.[ВремяУхода])
		|		+ CASE WHEN DATEPART(MINUTE, ct.[ВремяУхода]) > DATEPART(MINUTE, ct.[ВремяПрихода]) THEN 1 ELSE 0 END [ЧасовВМагазине]
		|FROM #ct ct (NOLOCK)
		|	INNER JOIN [srv-sql01].m2.dbo.tt tt (NOLOCK)
		|		ON ct.ShopNo = tt.N
		|	LEFT OUTER JOIN [srv-sql01].IzbenkaFin.dbo._Reference39 AS FizLica (NOLOCK)
		|		ON ct.CashierID = CAST(FizLica._Code AS bigint)
		|	LEFT OUTER JOIN [srv-sql01].Reports.dbo.Pomoschniki_tbl AS Pm (NOLOCK)
		|		ON ct.ShopNo = Pm.ShopNo_
		|	LEFT OUTER JOIN [srv-sql01].IzbenkaFin.dbo._Reference5065 AS Upr (NOLOCK)
		|		ON Pm.RoleName = Upr._Description
		|";
	
	//rsTABLE = База_ВыполнитьЗапрос(ТекстЗапросаSQL);
	СтрокаПодключенияSQL = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01");
	
	//Попытка
		CurrentConnection = База_Подключение(СтрокаПодключенияSQL);
		CurrentConnection.CursorLocation = 2;
		
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = CurrentConnection;
		Command.CommandText = ТекстЗапросаSQL;
		
		//Param = Command.CreateParameter(, 8192, 1); //, , МассивЗначений); //adArray = 0x2000
		//Param.Value = МассивЗначений;
		//Command.Parameters.Append(Param);
		
	    rsTABLE = Новый COMОбъект("ADODB.RecordSet");
	    rsTABLE = Command.Execute();
		//RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
		Пока rsTABLE <> Неопределено И rsTABLE.Fields.Count <= 0 Цикл
			rsTABLE = rsTABLE.NextRecordSet();
		КонецЦикла;				
	//Исключение	
	//	ВызватьИсключение ОписаниеОшибки();
	//КонецПопытки;	
	
	КоличествоПолейТаблица = rsTABLE.fields.Count-1;
    МассивРезультатовSQL = Новый Массив;
    Если (НЕ rsTABLE.EOF) Тогда
        МассивРезультатовSQL = rsTABLE.GetRows().Выгрузить();
	КонецЕсли;
	
	Если МассивРезультатовSQL.Количество() > 0 Тогда
		
		МассивПолей = Новый Массив;
		СтруктураПолей = Новый Структура;
		Для сч = 0 По КоличествоПолейТаблица Цикл
			ИмяРекъ = rsTABLE.fields.item(сч).name;
			МассивПолей.Добавить(ИмяРекъ);
			СтруктураПолей.Вставить(ИмяРекъ);
		КонецЦикла;
		
	    Для Каждого стрТаблица Из МассивРезультатовSQL Цикл
	        НоваяСтрокаТЗн = ТаблицаДанных.Добавить();
			Для Сч = 0 По КоличествоПолейТаблица Цикл
				ИмяРекъ = МассивПолей[Сч];
				Если МенеджерыОбъектовПолей.Свойство(ИмяРекъ) Тогда
					СтруктураПолей.Вставить(ИмяРекъ, ПолучитьЗначениеИзКэша(ИмяРекъ, стрТаблица[Сч]));
				Иначе
					СтруктураПолей.Вставить(ИмяРекъ, стрТаблица[Сч]);
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗн, СтруктураПолей);
		КонецЦикла;
		
	КонецЕсли;
	
	МассивРезультатовSQL.Очистить();
	МассивРезультатовSQL = Неопределено;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ТаблицаДанных);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

Кэш = Новый Структура;

МенеджерыОбъектовПолей = Новый Структура("Магазин,Сотрудник,ПомощникУправляющего,Управляющий",
	Справочники.СтруктурныеЕдиницы, Справочники.ФизическиеЛица, Справочники.ФизическиеЛица, Справочники.РолиПользователей);
