Перем МассивСчетов;
#Если Клиент Тогда

Перем ИмяРегистраБухгалтерии Экспорт;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Отчет по активам и пассивам";
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

//	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
//	
//	Макет = ПолучитьМакет("Макет");
////	Итоги = Макет.ПолучитьОбласть("Итоги");
//	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

//	НазваниеОрганизации = Организация.НаименованиеПолное;
//	Если ПустаяСтрока(НазваниеОрганизации) Тогда
//		НазваниеОрганизации = Организация;
//	КонецЕсли;
//	
//	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
//	
//	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

//	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
//	
//	Если ПоВалютам Тогда
//	
//		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
//	
//	КонецЕсли; 

//	Если ПоКоличеству Тогда
//	
//		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
//	
//	КонецЕсли; 
//	
//	ТекстПроИтоги = "";
//	Если ПоСубсчетам Тогда
//		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
//	КонецЕсли;

//	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
//		ТекстПроИтоги = ТекстПроИтоги + "субконто: " + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
//	КонецЕсли;

//	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
//	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
//		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
//	КонецЕсли;

//	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

//	// Вывод списка фильтров:
//	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

//	Если Не ПустаяСтрока(СтрОтбор) Тогда
//		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
//		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
//		ЗаголовокОтчета.Вывести(ОбластьОтбор);
//	КонецЕсли;

	//Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

Функция СформироватьЗапрос(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	
	//МассивСчетов.Добавить();
	//МассивСчетов.Добавить();
	
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Истина, 
		Истина, Истина);
	
	ТекстПоля = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
	
		ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + БухгалтерскиеОтчеты.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
	
	КонецЦикла;
	
	ОграниченияПоПостроителюОтчета = БухгалтерскиеОтчеты.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
	
	СтрокаОграниченийПоРеквизитам = "";
	//БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Текст = Текст + 
			ТекстПоля + " 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета + ") КАК ОстаткиИОбороты
	|";
		
	ТекстИтогов = БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Ложь);
	
	Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2); 
	
	Текст = Текст + "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	Валюта ";
		
	КонецЕсли;
	
	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = Текст;
	
	Возврат Запрос;
	
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
//	ЗаголовокОтчета.Параметры.ДатаНач = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	ЗаголовокОтчета.Параметры.ДатаКон = Формат(ДатаКон, "ДФ=dd.MM.yyyy");
	ДокументРезультат.Вывести(ЗаголовокОтчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОстаткиИОбороты.Счет КАК Счет,
	               |	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление,
	               |	ОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	               |	ОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	               |	ОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	               |	ОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт,
	               |	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	               |	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	               |	ОстаткиИОбороты.Субконто1,
	               |	ОстаткиИОбороты.СуммаКонечныйОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , , , ) КАК ОстаткиИОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	//Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();

	ОбщаяСуммаАктива = 0;
	
	//1) Деньги  50
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.Касса);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	КассаТТ = 0;
	КассаОфис = 0; 	

	Котляково = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Кавказский_1");
	Строгино  = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Строгино_1");
	Макарова  = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Склад Адмирала Макарова");
	КассаМакарова  = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Касса Макарова");
	КассаСтрогино  = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Касса Строгино");
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.Субконто1 = Котляково ИЛИ Строка.Субконто1 = КассаСтрогино ИЛИ Строка.Субконто1 = Макарова ИЛИ Строка.Субконто1 = КассаМакарова   Тогда
			КассаОфис = КассаОфис + Строка.СуммаКонечныйОстатокДт;	
		Иначе	
			КассаТТ = КассаТТ + Строка.СуммаКонечныйОстатокДт;
		КонецЕсли;
	КонецЦикла;
	
	Кассы = Макет.ПолучитьОбласть("СтрокаДеньги");
	Кассы.Параметры.Аналитика = "Касса ТТ";
	Кассы.Параметры.Остаток = КассаТТ;					
	ДокументРезультат.Вывести(Кассы);
	
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + КассаТТ;
	
	Кассы = Макет.ПолучитьОбласть("СтрокаДеньги");
	Кассы.Параметры.Аналитика = "Касса офис";
	Кассы.Параметры.Остаток = КассаОфис;					
	ДокументРезультат.Вывести(Кассы);
	
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + КассаОфис;
	
	//2) Расчетные счета  51,1
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РасчетныйСчет);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	РсчВВ = 0;	
	РсчМП = 0;	
	РсчЭФ = 0;	
	РсчСП = 0;	
	РсчЛП = 0;	
	РсчПИ = 0;	
	
	Вкусвилл = Справочники.Организации.НайтиПоНаименованию("Вкусвилл");
	ЛугДаПоле = Справочники.Организации.НайтиПоНаименованию("Луг да поле");
	МолочныйПроект = Справочники.Организации.НайтиПоНаименованию("Молочный проект");
	ПроектИзбёнка = Справочники.Организации.НайтиПоНаименованию("Проект избёнка");
	СельскиеПродукты = Справочники.Организации.НайтиПоНаименованию("Сельские продукты");
	Экоферма = Справочники.Организации.НайтиПоНаименованию("Экоферма");
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.Субконто1 = Вкусвилл Тогда
			РсчВВ = РсчВВ + Строка.СуммаКонечныйОстатокДт;	
		ИначеЕсли Строка.Субконто1 = ЛугДаПоле Тогда 
			РсчЛП = РсчЛП + Строка.СуммаКонечныйОстатокДт; 
		ИначеЕсли Строка.Субконто1 = МолочныйПроект Тогда	
			РсчМП = РсчМП + Строка.СуммаКонечныйОстатокДт;	
		ИначеЕсли Строка.Субконто1 = ПроектИзбёнка Тогда	
			РсчПИ = РсчПИ + Строка.СуммаКонечныйОстатокДт; 
		ИначеЕсли Строка.Субконто1 = СельскиеПродукты Тогда 
			РсчСП = РсчСП + Строка.СуммаКонечныйОстатокДт;
		ИначеЕсли Строка.Субконто1 = Экоферма Тогда	
			РсчЭФ = РсчЭФ + Строка.СуммаКонечныйОстатокДт; 
		КонецЕсли;
	КонецЦикла;
	
	РасчСчета = Макет.ПолучитьОбласть("СтрокаДеньги");
	РасчСчета.Параметры.Аналитика = "Р/сч ВВ (Вкусвилл)";
	РасчСчета.Параметры.Остаток = РсчВВ;					
	ДокументРезультат.Вывести(РасчСчета);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + РсчВВ;
	
	РасчСчета = Макет.ПолучитьОбласть("СтрокаДеньги");
	РасчСчета.Параметры.Аналитика = "Р/сч МП (Молочный проект)";
	РасчСчета.Параметры.Остаток = РсчМП;					
	ДокументРезультат.Вывести(РасчСчета);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + РсчМП;

	РасчСчета = Макет.ПолучитьОбласть("СтрокаДеньги");
	РасчСчета.Параметры.Аналитика = "Р/сч ЭФ (Экоферма)";
	РасчСчета.Параметры.Остаток = РсчЭФ;					
	ДокументРезультат.Вывести(РасчСчета);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + РсчЭФ;

	РасчСчета = Макет.ПолучитьОбласть("СтрокаДеньги");
	РасчСчета.Параметры.Аналитика = "Р/сч СП (СельскиеПродукты)";
	РасчСчета.Параметры.Остаток = РсчСП;					
	ДокументРезультат.Вывести(РасчСчета);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + РсчСП;
	
	РасчСчета = Макет.ПолучитьОбласть("СтрокаДеньги");
	РасчСчета.Параметры.Аналитика = "Р/сч ЛП (Луг да поле)";
	РасчСчета.Параметры.Остаток = РсчЛП;					
	ДокументРезультат.Вывести(РасчСчета);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + РсчЛП;
	
	РасчСчета = Макет.ПолучитьОбласть("СтрокаДеньги");
	РасчСчета.Параметры.Аналитика = "Р/сч ПИ (Проект избёнка)";
	РасчСчета.Параметры.Остаток = РсчПИ;					
	ДокументРезультат.Вывести(РасчСчета);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + РсчПИ;
	
	//4) Расчетные счета  51.6
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.Овердрафт);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	ОвердрафтСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ОвердрафтСумма = ОвердрафтСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ОвердрафтОбл = Макет.ПолучитьОбласть("СтрокаДеньги");
	ОвердрафтОбл.Параметры.Аналитика = "Овердрафт";
	ОвердрафтОбл.Параметры.Остаток = ОвердрафтСумма;					
	//ДокументРезультат.Вывести(ОвердрафтОбл);
	//ОбщаяСуммаАктива = ОбщаяСуммаАктива + ОвердрафтСумма;
	
	//5) Расчетные счета  57
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	ОвердрафтСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ОвердрафтСумма = ОвердрафтСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	//ОвердрафтСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ОвердрафтСумма = ОвердрафтСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла; 
	
	ОвердрафтОбл = Макет.ПолучитьОбласть("СтрокаДеньги");
	ОвердрафтОбл.Параметры.Аналитика = "Платежи в пути";
	ОвердрафтОбл.Параметры.Остаток = ОвердрафтСумма;					
	ДокументРезультат.Вывести(ОвердрафтОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ОвердрафтСумма;
	
	//6) Расчетные счета  41,1
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.Товары);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаТоварыМатериал");
	ТоварыОбл.Параметры.Аналитика = "Товары";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	//7) Материал  41.2
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.МатералыДляВыпуска);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаТоварыМатериал");
	ТоварыОбл.Параметры.Аналитика = "Материалы";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	//8)   58
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("58.1"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("58.2"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Займы контрагентам";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;
	//ДокументРезультат.Вывести(ТоварыОбл);
	//ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	
	//8)   Прочая зад-ть
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("60.4"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("76.1"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("76.3"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("71.2"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Прочая задолженность";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	//8)   Зад-ть перед поставщиками упаковки
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("60.5"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Расчеты с поставщиками упаковки";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	//8)   Зад-ть перед поставщиками оборудования
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("60.7"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Расчеты с поставщиками оборудования";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	//8)   Зад-ть перед покупателями
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("62.1"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Расчеты с покупателями";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Расчеты с покупателями прочие";
	ТоварыОбл.Параметры.Остаток = 0;
	ДокументРезультат.Вывести(ТоварыОбл);
	
	
	

    //9)   60,1
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Задолженность по обеспечительным взнос";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
 	 //10)   60,2
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РасчетыПоАренде);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Задолженность по тек аренде";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	 //11)   08
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.КапитальныеВложения);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Буд расходы";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	//12)   01
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.Инвестиции);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстатокДт;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаПрочее");
	ТоварыОбл.Параметры.Аналитика = "Инвестиции";
	ТоварыОбл.Параметры.Остаток = ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаАктива = ОбщаяСуммаАктива + ТоварыСумма;
	
	ТоварыОбл = Макет.ПолучитьОбласть("ИтогоАктив");
	ТоварыОбл.Параметры.ИтогоАктив = ОбщаяСуммаАктива;
	ДокументРезультат.Вывести(ТоварыОбл);	

	
	// ПАССИВЫ
	ОбщаяСуммаПассив = 0;
	//1) СобственныеСредства  
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.СобственныеСредства);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаСредства");
	ТоварыОбл.Параметры.Аналитика = "Собственн средства";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
    //2) ПрибыльТекущегоПериода  
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.ПрибыльТекущегоПериода);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаСредства");
	ТоварыОбл.Параметры.Аналитика = "Прибыль текущего месяца";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	 //3) ПрибыльПрошлыхМесяцев  
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.ПрибыльПрошлыхМесяцев);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаСредства");
	ТоварыОбл.Параметры.Аналитика = "Прибыль прошлых месяцев";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	//4)  ЗаймУчредителя 
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.ЗаймУчредителя);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаСредства");
	ТоварыОбл.Параметры.Аналитика = "Займ учредителя";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	//4)  ЗаймыВыданные
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("58.1"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("58.2"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаСредства");
	ТоварыОбл.Параметры.Аналитика = "Займы выданные";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	

	//5) Субсидия  
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.Субсидия);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаСредства");
	ТоварыОбл.Параметры.Аналитика = "Субсидии";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	//6) КредитыПолученные   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.КредитыПолученные);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаСредства");
	ТоварыОбл.Параметры.Аналитика = "Кредиты полученные";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	//ДокументРезультат.Вывести(ТоварыОбл);
	//ОбщаяСуммаПассив = ОбщаяСуммаПассив + ТоварыСумма;
	 	
	//7) НалогиСФОТ   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НалогиСФОТ);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задол перед Бюдж. ФОТ";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;	
	
	//8) НалогиУН   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НалогиУН);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задол перед Бюдж. УН";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	//9) ПрочаяЗадолженность   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("76.2"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("62.2"));
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задолжен  прочим";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив -ТоварыСумма;
	
	//10) РасчетыСПоставщикам   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задолжен пост.";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	//11)РасчетыСПоставщикамиПоБонусам    
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РасчетыСПоставщикамиПоБонусам);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задолжен по бонусам";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	//ДокументРезультат.Вывести(ТоварыОбл);
	//ОбщаяСуммаПассив = ОбщаяСуммаПассив + ТоварыСумма;
	
    //12) РасчетыСПоставщикамиУпаковки   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задолж перед УПАКОВКА";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	//ДокументРезультат.Вывести(ТоварыОбл);
	//ОбщаяСуммаПассив = ОбщаяСуммаПассив + ТоварыСумма;
	
	//13) РасчетыСПерсоналомПоОплатеТруда   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задолж перед сотрудниками";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	//14) РезервПоОтпускам   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РезервПоОтпускам);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Резерв по отпускам";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	//15) РасчетыСПодотчетнымиЛицами   
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами);
	НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
	
	ТоварыСумма = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТоварыСумма = ТоварыСумма + Строка.СуммаКонечныйОстаток;		
	КонецЦикла;
	ТоварыОбл = Макет.ПолучитьОбласть("СтрокаЗадолженности");
	ТоварыОбл.Параметры.Аналитика = "Задолж по подотчету";
	ТоварыОбл.Параметры.Остаток = -ТоварыСумма;					
	ДокументРезультат.Вывести(ТоварыОбл);
	ОбщаяСуммаПассив = ОбщаяСуммаПассив - ТоварыСумма;
	
	ТоварыОбл = Макет.ПолучитьОбласть("ИтогоПассив");
	ТоварыОбл.Параметры.ИтогоПассив = ОбщаяСуммаПассив;
	ДокументРезультат.Вывести(ТоварыОбл);
		

КонецПроцедуры // СформироватьОтчет()

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
	
	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
		
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	//СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.Товары.ТипЗначения Тогда
			СписокПараметров.Вставить("Товары", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.МестаХранения.ТипЗначения Тогда
			СписокПараметров.Вставить("МестаХранения", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов.ТипЗначения Тогда
			СписокПараметров.Вставить("СтатьиДоходовРасходов", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивТекущихПоказателей = СформироватьМассивПоказателей();
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Истина, 
		Истина, Истина);
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Сч = 0;
	Для Каждого Счет Из МассивСчетов Цикл
		Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
			
			Сч = Сч+1;
			
			ТекстПоля = ТекстПоля + ", " + " ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто"+Сч;
			ТекстПоля = ТекстПоля + ", " + " ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Субконто" + Сч + ") КАК Субконто"+Сч+"Представление";
		
			ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
			ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
			ТекстПорядок = ТекстПорядок + ", Субконто"+Сч+".*";
			
			МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
			
		КонецЦикла;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
		
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	//БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
		
	Текст = Текст +" 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО
		|" + Сред(ТекстПорядок, 2) + "}";
		
	КонецЕсли;
	
	СтрокаИтогов = БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Ложь); 
	
	Текст = Текст + "
	|ИТОГИ " + Сред(СтрокаИтогов, 2);
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", МассивСчетов);
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	//ПоВалютам = Счет.Валютный; 
	ПоВалютам = Ложь;
	ПоКоличеству = Ложь;//Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ЗаполнитьНачальныеНастройки();
	
	//БухгалтерскиеОтчеты.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = БухгалтерскиеОтчеты.СоздатьПоСтруктуреСоответствие(СтруктураПараметров);
	
	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
		ПоСубсчетам  = Параметры["ПоСубсчетам"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Финансовый";

#КонецЕсли

МассивСчетов = Новый Массив;
МассивСчетов.Добавить(ПланыСчетов.Финансовый.Касса);