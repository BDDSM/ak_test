Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем СоответствиеНаборовДанныхИЗапросов;

#Если Клиент Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ИнфокомТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ИнфокомТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетамиИнфоком.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЛишниеПредставленияВШапке(Результат)
	
	Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	Пока Ячейка <> Неопределено Цикл
		УдаляемаяОбласть = Результат.Область("R"+Ячейка.Верх);
		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ИнфокомТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ИнфокомТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;                                    
				
	КонецЦикла;
	
	ИнфокомТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Функция ЕстьДетальныеПоля(ВыбранныеПоля)
	ЕстьРесурсы = ложь;
	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
		ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено тогда
			Если ДоступноеПоле.Ресурс тогда
				ЕстьРесурсы = истина;
			Иначе
				ЕстьРесурсы = ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЕстьРесурсы;
КонецФункции

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТекущаяДата",   ТекущаяДата());
	
	//ЕстьКодДохода                = ПрисутствуетПоле("КодДохода");
	//ЕстьВидРасчета               = ПрисутствуетПоле("ВидРасчета");
	//ЕстьРегистратор              = ПрисутствуетПоле("Регистратор"); 
	//ЕстьСтавкаНалогообложения    = ПрисутствуетПоле("НДФЛ.СтавкаНалогообложенияНДФЛ"); 
	//ЕстьФизЛицо                  = ПрисутствуетПоле("Сотрудник");
	//ЕстьКПП                      = ПрисутствуетПоле("КПП");
	//							   
	//ЕстьНалоговыйРежим                    = ПрисутствуетПоле("НалоговыйРежим");
	//ЕстьВидПособия                        = ПрисутствуетПоле("Пособия.ВидПособия");
	//ЕстьИнвалид                           = ПрисутствуетПоле("Взносы.Инвалид");
	//ЕстьРебенок                           = ПрисутствуетПоле("Пособия.Ребенок");
	//ЕстьВидЗанятости                      = ПрисутствуетПоле("Пособия.ВидЗанятости");
	//ЕстьСреднийЗаработок                  = ПрисутствуетПоле("Пособия.РазмерСреднегоЗаработка");
	//ЕстьВидСтрахования                    = ПрисутствуетПоле("Пособия.ВидСтрахования");
	//ЕстьКодПоОКАТО                        = ПрисутствуетПоле("НДФЛ.КодПоОКАТО"); 
	//ЕстьВычет                             = ПрисутствуетПоле("НДФЛ.КодВычетНДФЛ"); 
	//
	//ЕстьВидДохода                         = ПрисутствуетПоле("ВидДохода");
	//ЕстьВидТарифаСтраховыхВзносов         = ПрисутствуетПоле("ВидТарифаСтраховыхВзносов");
	//ЕстьРодилсяДо1967                     = ПрисутствуетПоле("РодилсяДо1967");
	//ЕстьОблагаетсяПоДополнительномуТарифу = ПрисутствуетПоле("ОблагаетсяПоДополнительномуТарифу");
	//ЕстьВыплатаЗаСчетФедеральногоБюджета = ПрисутствуетПоле("Пособия.ВыплатаЗаСчетФедеральногоБюджета");
	//
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КПП",   ЕстьКПП);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Инвалид",   ЕстьИнвалид);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КодДохода",   ЕстьКодДохода);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидРасчета",  ЕстьВидРасчета);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Регистратор", ЕстьРегистратор);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СтавкаНалогообложенияРезидента", ЕстьСтавкаНалогообложения);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ФизЛицо",     ЕстьФизЛицо);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НалоговыйРежим",     ЕстьНалоговыйРежим);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидПособия",              ЕстьВидПособия);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Ребенок",                 ЕстьРебенок);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидЗанятости",            ЕстьВидЗанятости);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "РазмерСреднегоЗаработка", ЕстьСреднийЗаработок);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидСтрахования",          ЕстьВидСтрахования);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КодПоОКАТО",              ЕстьКодПоОКАТО);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Вычет",                   ЕстьВычет);
	//
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидДохода",                 ЕстьВидДохода);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидТарифаСтраховыхВзносов", ЕстьВидТарифаСтраховыхВзносов);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "РодилсяДо1967",             ЕстьРодилсяДо1967);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ОблагаетсяПоДополнительномуТарифу", ЕстьОблагаетсяПоДополнительномуТарифу);
	//ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВыплатаЗаСчетФедеральногоБюджета", ЕстьВыплатаЗаСчетФедеральногоБюджета);
	//
	//
	//Если ЕстьВычет тогда 
	//	Если ЕстьКодДохода тогда 
	//		Сообщить("Поле Вычет не возможно использовать с группировкой или отбором по полю ""Код дохода"".");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	//
	//СписокПолей = Новый СписокЗначений;
	//
	//Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
	//	ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбранноеПоле.Поле, КомпоновщикНастроек);
	//	Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Родитель <> Неопределено тогда
	//		Если ЕстьКодДохода тогда
	//			Если Найти(ДоступноеПоле.Поле, "Пособия.") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Код по ОКАТО"".");
	//				ДобавитьПустоеОформдениеПоля(ВыбранноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//			Если Найти(ДоступноеПоле.Поле, "ЕСН.") = 0 и Найти(ДоступноеПоле.Поле, "База") = 0 и Строка(ДоступноеПоле.Поле) <> "ЕСН.Начислено" и Строка(ДоступноеПоле.Поле) <> "ЕСН.НачисленоСкидка" тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид расчета"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВидРасчета тогда
	//			Если Найти(ДоступноеПоле.Поле, "База") = 0 и Строка(ДоступноеПоле.Поле) <> "Взносы.Начислено" и Строка(ДоступноеПоле.Поле) <> "Взносы.НеОблагаетсяЦеликом" тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид расчета"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьРегистратор тогда
	//			Если Найти(ДоступноеПоле.Поле, "ФССНС.") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Регистратор"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьСтавкаНалогообложения	тогда
	//			Если Найти(ДоступноеПоле.Поле, "НДФЛ.") = 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Ставка налогообложения"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьФизЛицо тогда
	//			Если Найти(ДоступноеПоле.Поле, "ФССНС.") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Сотрудник"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВидПособия или ЕстьРебенок или ЕстьВидЗанятости или ЕстьСреднийЗаработок или ЕстьВидСтрахования тогда
	//			Если Найти(ДоступноеПоле.Поле, "Пособия.") = 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид пособия"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьНалоговыйРежим тогда
	//			Если Найти(ДоступноеПоле.Поле, "ЕСН.") = 0 и Найти(ДоступноеПоле.Поле, "ПФР.") = 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Налоговый режим"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВычет тогда
	//			Если Найти(ДоступноеПоле.Поле, "НалогНДФЛ") <> 0 или Найти(ДоступноеПоле.Поле, "НалогНДФЛУдержаный") <> 0 
	//				или Найти(ДоступноеПоле.Поле, "БазаНДФЛ") <> 0 или Найти(ДоступноеПоле.Поле, "СуммаДоходаНеОблагаемая") <> 0 тогда
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вычет НДФЛ"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЕстьВидДохода тогда
	//			Если Найти(ДоступноеПоле.Поле, "Взносы.ФССНесчастныеСлучаи") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ТФОМС") <> 0 
	//				или Найти(ДоступноеПоле.Поле, "Взносы.ФФОМС") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ТФОМС") <> 0
	//				или Найти(ДоступноеПоле.Поле, "Взносы.ФСС") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ПФРПоДополнительномуТарифу") <> 0
	//				или Найти(ДоступноеПоле.Поле, "Взносы.ПФРНакопительная") <> 0 или Найти(ДоступноеПоле.Поле, "Взносы.ПФРСтраховая") <> 0 тогда
	//				
	//				Сообщить("Поле """ + ДоступноеПоле.Заголовок + """ не возможно вывести одновременно с группировкой или отбором по полю ""Вид дохода"".");
	//				ДобавитьПустоеОформдениеПоля(ДоступноеПоле.Поле);
	//				СписокПолей.Добавить(ДоступноеПоле.Поле);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;

	//Если ЕстьДетальныеПоля(ВыбранныеПоля) тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ДобавитьОтборИлиПоВсемПоказателям(КомпоновщикНастроек.Настройки, ВыбранныеПоля, СписокПолей);
	
	ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ПараметрПериод = Неопределено тогда
	Иначе
		Период = ?(ПараметрПериод.Значение <> Неопределено, Дата(ПараметрПериод.Значение), '00010101');
		Если Период = '00010101'  тогда
			Период = НачалоДня(ТекущаяДата());
		КонецЕсли;
		ПараметрПериод.Использование = Истина;
		
		ПараметрПериод.Значение  = Период;
	КонецЕсли;
	
	Если ПараметрНачалоПериода = Неопределено или ПараметрКонецПериода = Неопределено тогда
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено и КонецПериода <> Неопределено тогда
		УправлениеОтчетамиИнфоком.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	ИначеЕсли Период <> Неопределено тогда
		УправлениеОтчетамиИнфоком.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, Период, Период, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПустоеОформдениеПоля(Поле)
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЗначениеТекст = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Text"));
	ЗначениеТекст.Значение = "-";
	ЗначениеТекст.Использование = Истина;
	
	ПолеОформления = УсловноеОформление.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Поле;
	
КонецПроцедуры


Процедура ДобавитьОтборИлиПоВсемПоказателям(СтруктураОтчета, ВыбранныеПоля, СписокПолей)
	// создадим отбор или 
	ГруппаИли = СтруктураОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
		Если Найти(Строка(ВыбранноеПоле.Поле), "UserField") > 0 или СписокПолей.НайтиПоЗначению(ВыбранноеПоле.Поле) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		ИнфокомТиповыеОтчеты.ДобавитьОтбор(ГруппаИли, Строка(ВыбранноеПоле.Поле), 0, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		ГруппаИли.Использование = истина;
	КонецЕсли;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		СтруктураОтчета.Отбор.Элементы.Удалить(ГруппаИли);
	КонецЕсли;
КонецПроцедуры


Функция ПрисутствуетПоле(Поле)
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(КомпоновщикНастроек.Настройки.Структура, Поле);

	
	//Для каждого ЭлементСтруктуры из КомпоновщикНастроек.Настройки.Структура Цикл
	//	
	//	Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
	//		
	//		Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
	//			
	//			ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Если ЕстьГруппировка тогда
		Возврат ЕстьГруппировка;
	КонецЕсли;
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
	
	ЕстьГруппировка = ложь;
	
	Для каждого ОтборПоле из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПоле(Структура, Поле)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
	 тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
	
	Для каждого ЭлементСтруктуры из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") тогда
					Продолжить;
				КонецЕсли;
				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
					ЕстьПоле = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	
	Возврат Новый Структура("ДополнительныеНастройкиОтчета, ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	Истина, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции
#КонецЕсли

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	НужноПодключатьсяКУНФ = Ложь;
	НужноПодключатьсяКЛоялити = Ложь;
	НужноСчитатьУкомплектованностьТочек = Ложь;
	НужноПодключатьсяКСМСИзбенка = Ложь;
	//узнаем выбраны ли поля, при которых необходимо получать информацию с другой базы
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ВыбранноеПоле.Использование
			И (Строка(ВыбранноеПоле.Поле) = "СуммаБезСкидок"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "СуммаБезСкидокЗвонок"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "СуммаБезСкидокКонтакт"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "ПроцентПродажПоКартам"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "ПроцентПродажПоКартамЗвонок"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "ПроцентПродажПоКартамСАнкетами") Тогда
			НужноПодключатьсяКУНФ = Истина;
			Если Строка(ВыбранноеПоле.Поле) = "СуммаБезСкидокКонтакт"
				ИЛИ Строка(ВыбранноеПоле.Поле) = "ПроцентПродажПоКартамСАнкетами" Тогда
				НужноПодключатьсяКЛоялити = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ВыбранноеПоле.Использование
			И (Строка(ВыбранноеПоле.Поле) = "Укомплектовано"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "ПереработкаПродавец"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "НужноПродавцов"
			ИЛИ Строка(ВыбранноеПоле.Поле) = "Нехватка")
			 Тогда
			НужноСчитатьУкомплектованностьТочек = Истина;
		КонецЕсли;
		
		Если ВыбранноеПоле.Использование
			И Строка(ВыбранноеПоле.Поле) = "ПеребитоСМСИзбенка" Тогда
			НужноПодключатьсяКСМСИзбенка = Истина;
		КонецЕсли;
	КонецЦикла;	
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанных.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("СуммаБезСкидок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаДанных.Колонки.Добавить("СуммаБезСкидокЗвонок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаДанных.Колонки.Добавить("СуммаБезСкидокКонтакт", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ТаблицаДанныхУкомплектованности = Новый ТаблицаЗначений();
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("ГруппаТорговойТочки", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("Укомплектовано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("НужноПродавцов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("ВышлоПродавцов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("Переработка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаДанныхУкомплектованности.Колонки.Добавить("Нехватка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	
	ТаблицаДанныхУкомплектованностиПереработка = Новый ТаблицаЗначений();
	ТаблицаДанныхУкомплектованностиПереработка.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхУкомплектованностиПереработка.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанныхУкомплектованностиПереработка.Колонки.Добавить("ГруппаТорговойТочки", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанныхУкомплектованностиПереработка.Колонки.Добавить("ПродавецПереработкаСсылка", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанныхУкомплектованностиПереработка.Колонки.Добавить("ПереработкаПродавец", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	
	ТаблицаСМСИзбенка = Новый ТаблицаЗначений();
	ТаблицаСМСИзбенка.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаСМСИзбенка.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаСМСИзбенка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСМСИзбенка.Колонки.Добавить("КоличествоПродажСМСИзбенка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаСМСИзбенка.Колонки.Добавить("СуммаПродажСМСИзбенка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Если НужноПодключатьсяКУНФ Тогда
		
		ТаблицаНомеровКартСКонтактами = Новый ТаблицаЗначений();
		ТаблицаНомеровКартСКонтактами.Колонки.Добавить("НомерКарты");
		
		Если НужноПодключатьсяКЛоялити Тогда
			СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("Loyalty");
	
			пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
			пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
			ВнешниеИсточникиДанных.Loyality.УстановитьОбщиеПараметрыСоединения(пСоед);
			ВнешниеИсточникиДанных.Loyality.УстановитьСоединение();
			
			Запрос = Новый Запрос();
			//Запрос.Текст = "ВЫБРАТЬ
			//			   |	КартыПокупателей.Number КАК НомерКарты,
			//			   |	Покупатели.Email_fact,
			//			   |	Покупатели.Phone
			//			   |ИЗ
			//			   |	ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
			//			   |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели
			//			   |		ПО КартыПокупателей.CustomerUID = Покупатели.CustomerUID
			//			   |ГДЕ
			//			   |	ВЫБОР
			//			   |			КОГДА Покупатели.Email_fact ЕСТЬ NULL 
			//			   |					ИЛИ Покупатели.Phone ЕСТЬ NULL 
			//			   |				ТОГДА ЛОЖЬ
			//			   |			ИНАЧЕ Покупатели.Email_fact <> """"
			//			   |					ИЛИ Покупатели.Phone <> """"
			//			   |		КОНЕЦ";
			Запрос.Текст = "ВЫБРАТЬ
			               |	Покупатели.Email КАК НомерКарты,
			               |	Покупатели.Phone,
			               |	Покупатели.Email_fact,
			               |	Покупатели.DateRegistration КАК ДатаРегистрации
			               |ИЗ
			               |	ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели";
						   
			ТаблицаНомеровКартСКонтактами = Запрос.Выполнить().Выгрузить();
			КолвоСтрок = ТаблицаНомеровКартСКонтактами.Количество();
			Для н = 1 По КолвоСтрок Цикл
				Если ПустаяСтрока(ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].НомерКарты)
					ИЛИ (ПустаяСтрока(ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].Phone) И ПустаяСтрока(ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].Email_fact)) Тогда
					//ИЛИ (НЕ ЗначениеЗаполнено(ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].ДатаРегистрации)) Тогда
					ТаблицаНомеровКартСКонтактами.Удалить(КолвоСтрок - н);
				КонецЕсли;	
				ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].НомерКарты = СокрЛП(ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].НомерКарты);
				ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].ДатаРегистрации = НачалоДня(ТаблицаНомеровКартСКонтактами[КолвоСтрок - н].ДатаРегистрации);
			КонецЦикла;	
			ТаблицаНомеровКартСКонтактами.Индексы.Добавить("НомерКарты");
			
			ВнешниеИсточникиДанных.Loyality.РазорватьСоединение();
		КонецЕсли;	
		
		СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_UNION");
	
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
		ВнешниеИсточникиДанных.SMS_Union.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.SMS_Union.УстановитьСоединение();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЗ_Продажи.BONUSCARD КАК КартаПокупателяКод,
		               |	ВЗ_Продажи.CloseDate КАК Дата,
		               |	ВЗ_Продажи.BaseSum КАК СуммаБезСкидок,
		               |	ЕСТЬNULL(ВЗ_Продажи.id_tov, -9999) КАК id_tov,
		               |	ВЗ_Продажи.ShopNo КАК ТорговаяТочкаИД
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		dbo_Checks.ShopNo КАК ShopNo,
		               |		dbo_Checks.BONUSCARD КАК BONUSCARD,
		               |		dbo_Checks.CloseDate КАК CloseDate,
		               |		dbo_CheckLine.id_tov_cl КАК id_tov,
		               |		dbo_CheckLine.BaseSum КАК BaseSum
		               |	ИЗ
		               |		ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_Checks КАК dbo_Checks
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_CheckLine КАК dbo_CheckLine
		               |			ПО dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		               |	ГДЕ
		               |		dbo_Checks.CloseDate МЕЖДУ &ДатаНач И &ДатаКон) КАК ВЗ_Продажи
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СтруктурныеЕдиницы.Ссылка,
		               |	СтруктурныеЕдиницы.НомерТочки КАК id_TT
		               |ИЗ
		               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		               |
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОбращениеКПокупателю.КартаПокупателя.Наименование КАК КартаПокупателя,
		               |	ОбращениеКПокупателю.ДатаЗвонка КАК ДатаЗвонка
		               |ИЗ
		               |	Документ.ОбращениеКПокупателю КАК ОбращениеКПокупателю
		               |ГДЕ
		               |	ОбращениеКПокупателю.Проведен = ИСТИНА
		               //|	И ОбращениеКПокупателю.КраткийОтветПокупателя <> ЗНАЧЕНИЕ(Перечисление.ОтветыКлиентов.ПустаяСсылка)
		               |	И НАЧАЛОПЕРИОДА(ОбращениеКПокупателю.ДатаЗвонка, ДЕНЬ) >= &ДатаЗвонка
		               |
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Номенклатура.Ссылка,
		               |	Номенклатура.id_tov
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.id_tov <> 0
		               |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		               |	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
					   
		Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ПользПоле.Параметр) = "ПериодОтчета" Тогда
				Запрос.УстановитьПараметр("ДатаЗвонка", ПользПоле.Значение.ДатаНачала - 86400 * 90);
				Запрос.УстановитьПараметр("ДатаНач", ПользПоле.Значение.ДатаНачала);
				Запрос.УстановитьПараметр("ДатаКон", ПользПоле.Значение.ДатаОкончания);
			КонецЕсли;	
		КонецЦикла;				   
					   
		Результаты = Запрос.ВыполнитьПакет();
		Выборка = Результаты[0].Выбрать();
		ТабТоргТочки = Результаты[1].Выгрузить();
		ТабТоргТочки.Индексы.Добавить("id_TT");
		ТабОбращенияКПокупателям = Результаты[2].Выгрузить();
		ТабОбращенияКПокупателям.Индексы.Добавить("КартаПокупателя");
		ТабНоменклатура = Результаты[3].Выгрузить();
		ТабНоменклатура.Индексы.Добавить("id_tov");
		Пока Выборка.Следующий() Цикл
			Если ПустаяСтрока(Выборка.КартаПокупателяКод)
				ИЛИ НЕ ЗначениеЗаполнено(Выборка.ТорговаяТочкаИД) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб = ТаблицаДанных.Добавить();
			СтрокаТаб.Дата = Выборка.Дата;
			СтрокаТаб.СуммаБезСкидок = Выборка.СуммаБезСкидок;
			Если ЗначениеЗаполнено(Выборка.ТорговаяТочкаИД) Тогда
				СтрокаСТоргТочкой = ТабТоргТочки.Найти(Выборка.ТорговаяТочкаИД, "id_TT");
				Если СтрокаСТоргТочкой <> Неопределено Тогда
					СтрокаТаб.ТорговаяТочка = СтрокаСТоргТочкой.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.id_tov) Тогда
				СтрокаСНоменклатурой = ТабНоменклатура.Найти(Выборка.id_tov, "id_tov");
				Если СтрокаСНоменклатурой <> Неопределено Тогда
					СтрокаТаб.Номенклатура = СтрокаСНоменклатурой.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			
			СтрокиОбращений = ТабОбращенияКПокупателям.НайтиСтроки(Новый Структура("КартаПокупателя", Выборка.КартаПокупателяКод));
			Для Каждого СтрокаОбращение Из СтрокиОбращений Цикл
				//Если СтрокаОбращение.ДатаЗвонка + 86400 <= СтрокаТаб.Дата
				Если СтрокаОбращение.ДатаЗвонка <= СтрокаТаб.Дата
					И (НачалоДня(СтрокаТаб.Дата) - 86400*90) <= НачалоДня(СтрокаОбращение.ДатаЗвонка) Тогда
					СтрокаТаб.СуммаБезСкидокЗвонок = СтрокаТаб.СуммаБезСкидок;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			//СтрокаОбращение = ТабОбращенияКПокупателям.Найти(Выборка.КартаПокупателяКод, "КартаПокупателя");
			//Если СтрокаОбращение <> Неопределено
			//	И (СтрокаОбращение.ДатаЗвонка + 86400) <= СтрокаТаб.Дата Тогда
			//	СтрокаТаб.СуммаБезСкидокЗвонок = СтрокаТаб.СуммаБезСкидок;
			//КонецЕсли;
			
			СтрокаКартаСКонтактом = ТаблицаНомеровКартСКонтактами.Найти(Выборка.КартаПокупателяКод, "НомерКарты");
			Если СтрокаКартаСКонтактом <> Неопределено Тогда
				//И СтрокаКартаСКонтактом.ДатаРегистрации <= СтрокаТаб.Дата Тогда
				СтрокаТаб.СуммаБезСкидокКонтакт = СтрокаТаб.СуммаБезСкидок;
			КонецЕсли;	
		КонецЦикла;	
		
		ВнешниеИсточникиДанных.SMS_Union.РазорватьСоединение();
		
		СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
		ВнешниеИсточникиДанных.SMS_Izbenka.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.SMS_Izbenka.УстановитьСоединение();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЗ_Продажи.ShopNo КАК ТорговаяТочкаИД,
		               |	ВЗ_Продажи.BONUSCARD КАК КартаПокупателяКод,
		               |	ВЗ_Продажи.CloseDate КАК Дата,
		               |	ВЗ_Продажи.BaseSum КАК СуммаБезСкидок,
		               |	ВЗ_Продажи.id_tov
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		dbo_Checks.ShopNo КАК ShopNo,
		               |		dbo_Checks.BONUSCARD КАК BONUSCARD,
		               |		dbo_Checks.CloseDate КАК CloseDate,
		               |		dbo_CheckLine.id_tov_cl КАК id_tov,
		               |		dbo_CheckLine.BaseSum КАК BaseSum
		               |	ИЗ
		               |		ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_Checks КАК dbo_Checks
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_CheckLine КАК dbo_CheckLine
		               |			ПО dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		               |	ГДЕ
		               |		dbo_Checks.CloseDate МЕЖДУ &ДатаНач И &ДатаКон
		               |		И (dbo_Checks.OperationType = 1
		               |				ИЛИ dbo_Checks.OperationType = 2)) КАК ВЗ_Продажи";
					   
		Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ПользПоле.Параметр) = "ПериодОтчета" Тогда
				Запрос.УстановитьПараметр("ДатаНач", ПользПоле.Значение.ДатаНачала);
				Запрос.УстановитьПараметр("ДатаКон", ПользПоле.Значение.ДатаОкончания);
			КонецЕсли;	
		КонецЦикла;
					   
		Результаты = Запрос.ВыполнитьПакет();
		Выборка = Результаты[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ПустаяСтрока(Выборка.КартаПокупателяКод)
				ИЛИ НЕ ЗначениеЗаполнено(Выборка.ТорговаяТочкаИД) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб = ТаблицаДанных.Добавить();
			СтрокаТаб.Дата = Выборка.Дата;
			СтрокаТаб.СуммаБезСкидок = Выборка.СуммаБезСкидок;
			Если ЗначениеЗаполнено(Выборка.ТорговаяТочкаИД) Тогда
				СтрокаСТоргТочкой = ТабТоргТочки.Найти(Выборка.ТорговаяТочкаИД, "id_TT");
				Если СтрокаСТоргТочкой <> Неопределено Тогда
					СтрокаТаб.ТорговаяТочка = СтрокаСТоргТочкой.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.id_tov) Тогда
				СтрокаСНоменклатурой = ТабНоменклатура.Найти(Выборка.id_tov, "id_tov");
				Если СтрокаСНоменклатурой <> Неопределено Тогда
					СтрокаТаб.Номенклатура = СтрокаСНоменклатурой.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			
			СтрокиОбращений = ТабОбращенияКПокупателям.НайтиСтроки(Новый Структура("КартаПокупателя", Выборка.КартаПокупателяКод));
			Для Каждого СтрокаОбращение Из СтрокиОбращений Цикл
				//Если СтрокаОбращение.ДатаЗвонка + 86400 <= СтрокаТаб.Дата
				Если СтрокаОбращение.ДатаЗвонка <= СтрокаТаб.Дата
					И (НачалоДня(СтрокаТаб.Дата) - 86400*90) <= НачалоДня(СтрокаОбращение.ДатаЗвонка) Тогда
					СтрокаТаб.СуммаБезСкидокЗвонок = СтрокаТаб.СуммаБезСкидок;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			СтрокаКартаСКонтактом = ТаблицаНомеровКартСКонтактами.Найти(Выборка.КартаПокупателяКод, "НомерКарты");
			Если СтрокаКартаСКонтактом <> Неопределено Тогда
				//И СтрокаКартаСКонтактом.ДатаРегистрации <= СтрокаТаб.Дата Тогда
				СтрокаТаб.СуммаБезСкидокКонтакт = СтрокаТаб.СуммаБезСкидок;
			КонецЕсли;	
		КонецЦикла;
		
		ВнешниеИсточникиДанных.SMS_Izbenka.РазорватьСоединение();
		
		ТаблицаДанных.Свернуть("Дата, ТорговаяТочка, Номенклатура", "СуммаБезСкидок, СуммаБезСкидокЗвонок, СуммаБезСкидокКонтакт");
		
	КонецЕсли;	
	
	Если НужноСчитатьУкомплектованностьТочек Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВЗ_Запрос.ТорговаяТочка,
		               |	ВЗ_Запрос.ГруппаТорговойТочки,
		               |	ВЗ_Запрос.Продавец,
		               |	ВЗ_Запрос.Дата
		               |ПОМЕСТИТЬ ВТПродавцы
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
		               |		ЛистУчетаПродавцы.Ссылка.ГруппаТорговойТочки КАК ГруппаТорговойТочки,
		               |		ЛистУчетаПродавцы.Продавец КАК Продавец,
		               |		НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК Дата
		               |	ИЗ
		               |		Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		               |	ГДЕ
		               |		ЛистУчетаПродавцы.Ссылка.Проведен = ИСТИНА
		               |		И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, ДЕНЬ, -6) И &ДатаКон
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЛистУчета.ТорговаяТочка,
		               |		ЛистУчета.ГруппаТорговойТочки,
		               |		ВЗ_Табель.Сотрудник,
		               |		НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)
		               |	ИЗ
		               |		Документ.ЛистУчета КАК ЛистУчета
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				ТабельРаботыПродавцов.Период КАК Период,
		               |				ТабельРаботыПродавцов.Сотрудник КАК Сотрудник,
		               |				ТабельРаботыПродавцов.ТорговаяТочка КАК ТорговаяТочка
		               |			ИЗ
		               |				РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
		               |			ГДЕ
		               |				ТабельРаботыПродавцов.Отсутствие = ЗНАЧЕНИЕ(Перечисление.ВидыОтсутствия.ПустаяСсылка)
		               |				И ТабельРаботыПродавцов.Группа <> &Офис
		               |				И ТабельРаботыПродавцов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, ДЕНЬ, -6) И &ДатаКон) КАК ВЗ_Табель
		               |			ПО ЛистУчета.ТорговаяТочка = ВЗ_Табель.ТорговаяТочка
		               |				И (НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = ВЗ_Табель.Период)
		               |	ГДЕ
		               |		ЛистУчета.Проведен = ИСТИНА
		               |		И ЛистУчета.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, ДЕНЬ, -6) И &ДатаКон) КАК ВЗ_Запрос
		               |ГДЕ
		               |	ВЗ_Запрос.Продавец <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ФизическоеЛицоНеНайдено)
		               |	И ДОБАВИТЬКДАТЕ(ВЗ_Запрос.Продавец.ДатаНачалаРаботы, ДЕНЬ, 3) < ВЗ_Запрос.Дата
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВЗ_Продавцы.ВышлоПродавцов, 0) КАК ВышлоПродавцов,
		               |	ВЗ_ЛистыУчета.Дата,
		               |	ВЗ_ЛистыУчета.ТорговаяТочка,
		               |	ВЗ_ЛистыУчета.ГруппаТорговойТочки
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата,
		               |		ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
		               |		ЛистУчета.ГруппаТорговойТочки КАК ГруппаТорговойТочки
		               |	ИЗ
		               |		Документ.ЛистУчета КАК ЛистУчета
		               |	ГДЕ
		               |		ЛистУчета.Проведен = ИСТИНА
		               |		И ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ),
		               |		ЛистУчета.ТорговаяТочка,
		               |		ЛистУчета.ГруппаТорговойТочки) КАК ВЗ_ЛистыУчета
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ВТПродавцы.ГруппаТорговойТочки КАК ГруппаТорговойТочки,
		               |			ВТПродавцы.ТорговаяТочка КАК ТорговаяТочка,
		               |			ВТПродавцы.Дата КАК Дата,
		               |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТПродавцы.Продавец) КАК ВышлоПродавцов
		               |		ИЗ
		               |			ВТПродавцы КАК ВТПродавцы
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ВТПродавцы.ГруппаТорговойТочки,
		               |			ВТПродавцы.ТорговаяТочка,
		               |			ВТПродавцы.Дата) КАК ВЗ_Продавцы
		               |		ПО ВЗ_ЛистыУчета.Дата = ВЗ_Продавцы.Дата
		               |			И ВЗ_ЛистыУчета.ГруппаТорговойТочки = ВЗ_Продавцы.ГруппаТорговойТочки
		               |			И ВЗ_ЛистыУчета.ТорговаяТочка = ВЗ_Продавцы.ТорговаяТочка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЗ_ТорговыеТочки.ГруппаТорговойТочки,
		               |	ВЗ_ТорговыеТочки.ТорговаяТочка,
		               |	ВЗ_ТорговыеТочки.Дата,
		               |	ВЫБОР
		               |		КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		               |				ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		               |				ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		               |			ТОГДА ЕСТЬNULL(КоличествоПродавцовНаТочках.ВВыходныеДни, 0)
		               |		ИНАЧЕ ЕСТЬNULL(КоличествоПродавцовНаТочках.ВРабочиеДни, 0)
		               |	КОНЕЦ КАК НужноПродавцов
		               |ИЗ
		               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |		ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
		               |		ЛистУчета.ГруппаТорговойТочки КАК ГруппаТорговойТочки,
		               |		НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата
		               |	ИЗ
		               |		Документ.ЛистУчета КАК ЛистУчета
		               |	ГДЕ
		               |		ЛистУчета.Проведен = ИСТИНА
		               |		И ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон) КАК ВЗ_ТорговыеТочки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоПродавцовНаТочках КАК КоличествоПродавцовНаТочках
		               |		ПО ВЗ_ТорговыеТочки.ТорговаяТочка = КоличествоПродавцовНаТочках.ТорговаяТочка
		               |			И (КоличествоПродавцовНаТочках.Период В
		               |				(ВЫБРАТЬ ПЕРВЫЕ 1
		               |					КоличествоПродавцовНаТочках.Период
		               |				ИЗ
		               |					РегистрСведений.КоличествоПродавцовНаТочках КАК КоличествоПродавцовНаТочках
		               |				ГДЕ
		               |					КоличествоПродавцовНаТочках.Период <= ВЗ_ТорговыеТочки.Дата
		               |					И КоличествоПродавцовНаТочках.ТорговаяТочка = ВЗ_ТорговыеТочки.ТорговаяТочка
		               |				УПОРЯДОЧИТЬ ПО
		               |					КоличествоПродавцовНаТочках.Период УБЫВ))
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		               |		ПО ВЗ_ТорговыеТочки.Дата = РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ВТПродавцы.ТорговаяТочка) КАК ТорговаяТочка,
		               |	МАКСИМУМ(ВТПродавцы.ГруппаТорговойТочки) КАК ГруппаТорговойТочки,
		               |	ВТПродавцы.Продавец КАК Продавец,
		               |	ВТПродавцы.Дата КАК Дата
		               |ИЗ
		               |	ВТПродавцы КАК ВТПродавцы
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТПродавцы.Дата,
		               |	ВТПродавцы.Продавец
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Продавец,
		               |	Дата
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТПродавцы";
					   
		Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ПользПоле.Параметр) = "ПериодОтчета" Тогда
				Запрос.УстановитьПараметр("ДатаНач", ПользПоле.Значение.ДатаНачала);
				Запрос.УстановитьПараметр("ДатаКон", ПользПоле.Значение.ДатаОкончания);
			КонецЕсли;	
		КонецЦикла;
		Запрос.УстановитьПараметр("Офис", Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО", 26));
		
		Результаты = Запрос.ВыполнитьПакет();
		Выборка = Результаты[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаб = ТаблицаДанныхУкомплектованности.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
		КонецЦикла;
		
		Выборка = Результаты[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаб = ТаблицаДанныхУкомплектованности.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
		КонецЦикла;
		
		ТаблицаПереработки = Новый ТаблицаЗначений();
		ТаблицаПереработки.Колонки.Добавить("ТорговаяТочка");
		ТаблицаПереработки.Колонки.Добавить("Продавец");
		ТаблицаПереработки.Колонки.Добавить("Дата");
		
		Выборка = Результаты[3].Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Продавец") Цикл
			Если Выборка.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено
				ИЛИ Выборка.Продавец = NULL Тогда
				Продолжить;
			КонецЕсли;	
			ПредДата = Неопределено;
			Пока Выборка.Следующий() Цикл
				Если ПредДата = Выборка.Дата - 86400 Тогда
					КолвоДнейПодряд = КолвоДнейПодряд + 1;
				Иначе
					КолвоДнейПодряд = 1;
				КонецЕсли;
				Если КолвоДнейПодряд >= 6 Тогда
					СтрокаПереработка = ТаблицаПереработки.Добавить();
					СтрокаПереработка.ТорговаяТочка = Выборка.ТорговаяТочка;
					СтрокаПереработка.Продавец = Выборка.Продавец;
					СтрокаПереработка.Дата = Выборка.Дата;
					
					СтрокаПереработкаПродавец = ТаблицаДанныхУкомплектованностиПереработка.Добавить();
					СтрокаПереработкаПродавец.ТорговаяТочка = Выборка.ТорговаяТочка;
					СтрокаПереработкаПродавец.ПродавецПереработкаСсылка = Выборка.Продавец;
					СтрокаПереработкаПродавец.ГруппаТорговойТочки = Выборка.ГруппаТорговойТочки;
					СтрокаПереработкаПродавец.Дата = Выборка.Дата;
					СтрокаПереработкаПродавец.ПереработкаПродавец = 1;
					ПредДата = Выборка.Дата;
				Иначе
					ПредДата = Выборка.Дата;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		ТаблицаДанныхУкомплектованности.Свернуть("Дата, ТорговаяТочка, ГруппаТорговойТочки", "Укомплектовано, НужноПродавцов, ВышлоПродавцов, Переработка, Нехватка");
		ТаблицаДанныхУкомплектованностиПереработка.Свернуть("Дата, ТорговаяТочка, ГруппаТорговойТочки, ПродавецПереработкаСсылка", "ПереработкаПродавец");
		
		Для Каждого СтрокаУкомплектованности Из ТаблицаДанныхУкомплектованности Цикл
			СтрокиПереработка = ТаблицаПереработки.НайтиСтроки(Новый Структура("ТорговаяТочка, Дата", СтрокаУкомплектованности.ТорговаяТочка, СтрокаУкомплектованности.Дата));
			СтрокаУкомплектованности.Переработка = СтрокаУкомплектованности.Переработка + СтрокиПереработка.Количество();
			СтрокаУкомплектованности.Нехватка = ?(СтрокаУкомплектованности.ВышлоПродавцов < СтрокаУкомплектованности.НужноПродавцов, СтрокаУкомплектованности.НужноПродавцов - СтрокаУкомплектованности.ВышлоПродавцов, 0);
			СтрокаУкомплектованности.ВышлоПродавцов = СтрокаУкомплектованности.ВышлоПродавцов - СтрокаУкомплектованности.Переработка;
			Если СтрокаУкомплектованности.ВышлоПродавцов > СтрокаУкомплектованности.НужноПродавцов Тогда
				СтрокаУкомплектованности.ВышлоПродавцов = СтрокаУкомплектованности.НужноПродавцов;
			КонецЕсли;	
			Если СтрокаУкомплектованности.НужноПродавцов = 0 Тогда
				СтрокаУкомплектованности.Укомплектовано = 100;
			Иначе
				//СтрокаУкомплектованности.Укомплектовано = ?(СтрокаУкомплектованности.ВышлоПродавцов < 0, 0, СтрокаУкомплектованности.ВышлоПродавцов) / СтрокаУкомплектованности.НужноПродавцов * 100;
				СтрокаУкомплектованности.Укомплектовано = (1 - (СтрокаУкомплектованности.Переработка + СтрокаУкомплектованности.Нехватка) / СтрокаУкомплектованности.НужноПродавцов) * 100;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НужноПодключатьсяКСМСИзбенка Тогда
		СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
		ВнешниеИсточникиДанных.SMS_Izbenka.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.SMS_Izbenka.УстановитьСоединение();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(ВЫБОР
		               |			КОГДА dbo_Checks.OperationType = 3 ИЛИ dbo_Checks.OperationType = 202
		               |				ТОГДА -1
		               |			ИНАЧЕ 1
		               |		КОНЕЦ * dbo_CheckLine.Quantity) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА dbo_Checks.OperationType = 3
		               |					ИЛИ dbo_Checks.OperationType = -1
		               |				ТОГДА 0
		               |			ИНАЧЕ 1
		               |		КОНЕЦ * dbo_CheckLine.BaseSum) КАК Сумма,
		               |	dbo_Checks.ShopNo КАК ShopNo,
		               |	dbo_CheckLine.id_tov_cl КАК id_tov,
		               |	НАЧАЛОПЕРИОДА(dbo_Checks.CloseDate, ДЕНЬ) КАК Дата
		               |ИЗ
		               |	ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_CheckLine КАК dbo_CheckLine
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_Checks КАК dbo_Checks
		               |		ПО dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
		               |ГДЕ
		               |	(dbo_Checks.OperationType = 1
		               |			ИЛИ dbo_Checks.OperationType = 3
					   |			ИЛИ dbo_Checks.OperationType = 202)
		               //|			ИЛИ dbo_Checks.OperationType = -1)
		               |	И dbo_Checks.CloseDate МЕЖДУ &ДатаНач И &ДатаКон
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	dbo_Checks.ShopNo,
		               |	dbo_CheckLine.id_tov_cl,
		               |	НАЧАЛОПЕРИОДА(dbo_Checks.CloseDate, ДЕНЬ)";
		
		Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ПользПоле.Параметр) = "ПериодОтчета" Тогда
				Запрос.УстановитьПараметр("ДатаНач", ПользПоле.Значение.ДатаНачала);
				Запрос.УстановитьПараметр("ДатаКон", ПользПоле.Значение.ДатаОкончания);
			КонецЕсли;	
		КонецЦикла;
		
		ТаблицаПродаж = Запрос.Выполнить().Выгрузить();
		
		ВнешниеИсточникиДанных.SMS_Izbenka.РазорватьСоединение();
		
		СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Union");
	
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
		ВнешниеИсточникиДанных.SMS_Union.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.SMS_Union.УстановитьСоединение();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(ВЫБОР
		               |			КОГДА dbo_Checks.OperationType = 3
		               |					ИЛИ dbo_Checks.OperationType = 202
		               |				ТОГДА -1
		               |			ИНАЧЕ 1
		               |		КОНЕЦ * dbo_CheckLine.Quantity) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА dbo_Checks.OperationType = 3
		               |					ИЛИ dbo_Checks.OperationType = -1
		               |				ТОГДА 0
		               |			ИНАЧЕ 1
		               |		КОНЕЦ * dbo_CheckLine.BaseSum) КАК Сумма,
		               |	dbo_Checks.ShopNo КАК ShopNo,
		               |	dbo_CheckLine.id_tov_cl КАК id_tov,
		               |	НАЧАЛОПЕРИОДА(dbo_Checks.CloseDate, ДЕНЬ) КАК Дата
		               |ИЗ
		               |	ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_CheckLine КАК dbo_CheckLine
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_Checks КАК dbo_Checks
		               |		ПО dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
		               |ГДЕ
		               |	(dbo_Checks.OperationType = 1
		               |			ИЛИ dbo_Checks.OperationType = 3
		               |			ИЛИ dbo_Checks.OperationType = 202)
		               |	И dbo_Checks.CloseDate МЕЖДУ &ДатаНач И &ДатаКон
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	dbo_Checks.ShopNo,
		               |	dbo_CheckLine.id_tov_cl,
		               |	НАЧАЛОПЕРИОДА(dbo_Checks.CloseDate, ДЕНЬ)";
		
		Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ПользПоле.Параметр) = "ПериодОтчета" Тогда
				Запрос.УстановитьПараметр("ДатаНач", ПользПоле.Значение.ДатаНачала);
				Запрос.УстановитьПараметр("ДатаКон", ПользПоле.Значение.ДатаОкончания);
			КонецЕсли;	
		КонецЦикла;
		
		ТаблицаПродажЮнион = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаб Из ТаблицаПродажЮнион Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПродаж.Добавить(), СтрокаТаб);
		КонецЦикла;	
		
		ВнешниеИсточникиДанных.SMS_Union.РазорватьСоединение();
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.Количество КАК Количество,
		               |	Таб.Сумма КАК Сумма,
		               |	Таб.ShopNo КАК ShopNo,
		               |	Таб.id_tov,
		               |	Таб.Дата КАК Дата
		               |ПОМЕСТИТЬ ВТПродажи
		               |ИЗ
		               |	&Таб КАК Таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТПродажи.Дата,
		               |	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
		               |	Номенклатура.Ссылка КАК Номенклатура,
		               |	ВТПродажи.Количество КАК КоличествоПродажСМСИзбенка,
		               |	ВТПродажи.Сумма КАК СуммаПродажСМСИзбенка
		               |ИЗ
		               |	ВТПродажи КАК ВТПродажи
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		               |		ПО ВТПродажи.ShopNo = СтруктурныеЕдиницы.НомерТочки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		               |		ПО ВТПродажи.id_tov = Номенклатура.id_tov
		               |ГДЕ
		               |	ВТПродажи.ShopNo <> 0
		               |	И ВТПродажи.id_tov <> 0";
					   
		Запрос.УстановитьПараметр("Таб", ТаблицаПродаж);
		ТаблицаСМСИзбенка = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеПродажИзУНФ", ТаблицаДанных);
	ВнешниеНаборыДанных.Вставить("ДанныеПоУкомплектованностиПродавцов", ТаблицаДанныхУкомплектованности);
	ВнешниеНаборыДанных.Вставить("ПродажиСМСИзбенка", ТаблицаСМСИзбенка);
	ВнешниеНаборыДанных.Вставить("ТаблицаДанныхУкомплектованностиПереработка", ТаблицаДанныхУкомплектованностиПереработка);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПараметрГруппаРазвития = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ГруппаРазвития");
	ПараметрГруппаРазвития.Значение = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО", 12);
	ПараметрГруппаРазвития.Использование = Истина;
	ПараметрПричинаПотери = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПричинаПотери");
	ПараметрПричинаПотери.Значение = Справочники.ПричиныПотерь.НайтиПоНаименованию("Прочее");
	ПараметрПричинаПотери.Использование = Истина;
	ПричинаПотериНеВыполненЗаказ = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПричинаПотериНеВыполненЗаказ");
	ПричинаПотериНеВыполненЗаказ.Значение = Справочники.ПричиныПотерь.НайтиПоНаименованию("Не выполнен заказ");
	ПричинаПотериНеВыполненЗаказ.Использование = Истина;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
КонецПроцедуры

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетамиИнфоком.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
