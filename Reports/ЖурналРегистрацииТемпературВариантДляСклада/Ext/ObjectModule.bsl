Перем ДатаНач, ДатаКон; //+++АК ILIK 2018.07.19 ИП-00018838
Перем ВремяНач, ВремяКон; //+++АК ILIK 2018.07.19 ИП-00018838
Перем ЗаДень; //+++АК ILIK 2018.07.19 ИП-00018838

//+++АК ILIK 2018.07.19 ИП-00018838
// Функция ПолучитьДанныеДатчиков
// взята из обработки ЖурналРегистрацииТемператур, немного переделана
//
Функция ПолучитьДанныеДатчиков()
	Данные.Очистить();
	
	УсловиеОтбора = ПолучитьУсловиеОтбора();
	
	ПолеДата = СхемаКомпоновкиДанных.НаборыДанных["НаборДанных1"].Поля.Найти("Дата");
	Если ЗаДень Тогда
		ПолеДата.Оформление.Элементы.Найти("Формат").Значение = "ДФ=HH:mm";
	Иначе
		ПолеДата.Оформление.Элементы.Найти("Формат").Значение = "ДФ=dd.MM.yyyy";
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
	
	Если ЗаДень Тогда
		ТекстЗапросаSQL = "SELECT
		|	ts.date_add, 
		|	CONVERT(varchar(8),ts.date_add,112) as datedd,
		|	CONVERT(varchar(8),ts.date_add,108) as tmm,
		|	ts.ShopNo, 
		|	ts.id_mesto,
		|	ts.id_sensor,
		|	ts.Sensor_value
		|
		|FROM [M2].[dbo].[TemraSensorData] (nolock) as ts
		|where (CONVERT(varchar(8),ts.date_add,108) between '" + Формат(ВремяНач, "ЧЦ=2; ЧН=00; ЧВН=") + ":00:00" + "' and '" + Формат(ВремяКон, "ЧЦ=2; ЧН=00; ЧВН=") + ":00:00" + "') " + УсловиеОтбора;
	Иначе
		ТекстЗапросаSQL = "SELECT
		|	ts.date_add, 
		|	CONVERT(varchar(8),ts.date_add,112) as datedd,
		|	CONVERT(varchar(8),ts.date_add,108) as tmm,
		|	ts.ShopNo, 
		|	ts.id_mesto,
		|	ts.id_sensor,
		|	ts.Sensor_value,
		|	ddd.tod
		|
		|FROM [M2].[dbo].[TemraSensorData] (nolock) as ts
		|	Inner join
		|	(SELECT 
		|	CONVERT(varchar(8),ts.date_add,112) as datedd, 
		|	max(CONVERT(varchar(8),ts.date_add,108)) as tmm,
		|	ts.ShopNo, 
		|	ts.id_mesto,
		|	ts.id_sensor,
		|	2 as tod
		|
		|FROM [M2].[dbo].[TemraSensorData] (nolock) as ts 
		|where (CONVERT(varchar(8),ts.date_add,108) between '19:00:00' and '20:00:00') " + УсловиеОтбора + "
		|group by CONVERT(varchar(8),ts.date_add,112),ShopNo,id_mesto,id_sensor
		|
		|UNION
		|
		|SELECT 
		|	CONVERT(varchar(8),ts.date_add,112) as datedd, 
		|	max(CONVERT(varchar(8),ts.date_add,108)) as tmm,
		|	ts.ShopNo, 
		|	ts.id_mesto,
		|	ts.id_sensor as id_sendor,
		|	1 as tod
		|
		|FROM [M2].[dbo].[TemraSensorData] (nolock) as ts 
		|where (CONVERT(varchar(8),ts.date_add,108) between '07:00:00' and '08:00:00') " + УсловиеОтбора + "
		|group by CONVERT(varchar(8),ts.date_add,112),ShopNo,id_mesto,id_sensor) as ddd
		|
		|on ts.id_mesto = ddd.id_mesto and ts.id_sensor = ddd.id_sensor and ts.ShopNo = ddd.ShopNo
		| and CONVERT(varchar(8),ts.date_add,108) = ddd.tmm and CONVERT(varchar(8),ts.date_add,112) = ddd.datedd
		|
		|where (CONVERT(varchar(8),ts.date_add,108) between '07:00:00' and '08:00:00'
		|or CONVERT(varchar(8),ts.date_add,108) between '19:00:00' and '20:00:00') " + УсловиеОтбора;
	КонецЕсли;
	
	//Два варианта с MoveNext и ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений. Замеры производительностьи показали одинаковую скорость.
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Movenext = Истина;
	
	Если Movenext Тогда 
		Пока НЕ rs.EOF() Цикл		
			СтрНов = Данные.Добавить();
			СтрНов.Дата = Rs.Fields("date_add").Value;
			СтрНов.ShopNo = Rs.Fields("ShopNo").Value;
			СтрНов.id_mesto = Rs.Fields("id_mesto").Value;
			СтрНов.id_sensor = Rs.Fields("id_sensor").Value;
			СтрНов.Sensor_value = Rs.Fields("Sensor_value").Value;
			Если Не ЗаДень Тогда
				СтрНов.УтроВечер = Rs.Fields("tod").Value;
			КонецЕсли;
			
			rs.MoveNext();
		Конеццикла;
	Иначе		 
		rsТЗ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);	
		Для каждого Rs Из rsТЗ Цикл		
			СтрНов = Данные.Добавить();
			СтрНов.Дата = Rs["date_add"];
			СтрНов.ShopNo = Rs["ShopNo"];
			СтрНов.id_mesto = Rs["id_mesto"];
			СтрНов.id_sensor = Rs["id_sensor"];
			СтрНов.Sensor_value = Rs["Sensor_value"];
			Если Не ЗаДень Тогда
				СтрНов.УтроВечер = Rs["tod"];
			КонецЕсли;
		Конеццикла;	
	КонецЕсли;
	
	ADOСоединение.Close();
	
	//+++АК sils 18.01.2018 ИП-00017637
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестаВыкладки.Ссылка,
	               |	МестаВыкладки.Код
	               |ИЗ
	               |	Справочник.МестаВыкладки КАК МестаВыкладки
	               |ГДЕ
	               |	НЕ МестаВыкладки.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Датчики.Код,
	               |	Датчики.Ссылка
	               |ИЗ
	               |	Справочник.Датчики КАК Датчики
	               |ГДЕ
	               |	НЕ Датчики.ПометкаУдаления";
	Результат = Запрос.ВыполнитьПакет();
	ТЗ_МВ = Результат[0].Выгрузить();
	ТЗ_МВ.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
	ТЗ_Дат = Результат[1].Выгрузить();
	ТЗ_Дат.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
	
	Для каждого стр из ТЗ_МВ Цикл
		стр.Номер = Число(стр.код);
	КонецЦикла;
	Для каждого стр из ТЗ_Дат Цикл
		стр.Номер = Число(СтрЗаменить(стр.код, "-", ""));
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Данные.Дата,
	               |	Данные.ShopNo,
	               |	Данные.id_mesto,
	               |	Данные.id_sensor,
	               |	Данные.Sensor_value,
	               |	Данные.Место,
				   |	Данные.Датчик,
	               |	Данные.УтроВечер,
	               |	Данные.ИзмененноеЗначение,
	               |	Данные.ОтклонениеОтНормы
	               |ПОМЕСТИТЬ ВТДанные
	               |ИЗ
	               |	&Данные КАК Данные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_МВ.Ссылка,
				   //|	ТЗ_МВ.Ссылка.Родитель,
				   //|	ТЗ_МВ.Ссылка.Наименование,
				   //|	ТЗ_МВ.Ссылка.ТемпературныйРежим,
				   //|	ТЗ_МВ.Ссылка.ТемпературныйРежим.НижнийПределТемпературы,
				   //|	ТЗ_МВ.Ссылка.ТемпературныйРежим.ВерхнийПределТемпературы,
	               |	ТЗ_МВ.Номер
	               |ПОМЕСТИТЬ ВТМВ
	               |ИЗ
	               |	&ТЗ_МВ КАК ТЗ_МВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_Дат.Ссылка,
				   //|	ТЗ_Дат.Ссылка.Наименование,
	               |	ТЗ_Дат.Номер
	               |ПОМЕСТИТЬ ВТДат
	               |ИЗ
	               |	&ТЗ_Дат КАК ТЗ_Дат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ " + ?(ЗаДень, "ВТДанные.Дата", "НАЧАЛОПЕРИОДА(ВТДанные.Дата, ДЕНЬ)") + " КАК Дата,
	               |	ВТДанные.ShopNo,
	               |	ВТДанные.id_mesto,
	               |	ВТДанные.id_sensor,
				   |	ЕСТЬNULL(СтруктурныеЕдиницы.Ссылка, ВТДанные.ShopNo) КАК Магазин,
				   |	ЕСТЬNULL(ВТМВ.Ссылка, ВТДанные.id_mesto) КАК Место,
	               |	ЕСТЬNULL(ВТДат.Ссылка, ВТДанные.id_sensor) КАК Датчик,
	               |	ЕСТЬNULL(ИзмененныеЗначенияТемператур.ЗначениеТемпературы, ВТДанные.Sensor_value) КАК Sensor_value,
	               |	ВТДанные.УтроВечер,
	               |	ВЫБОР
	               |		КОГДА ИзмененныеЗначенияТемператур.ЗначениеТемпературы ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ИзмененноеЗначение,
	               |	ВЫБОР
	               |		КОГДА ВТМВ.Ссылка.ТемпературныйРежим ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ВТМВ.Ссылка.ТемпературныйРежим.НижнийПределТемпературы > ВТДанные.Sensor_value
	               |						ИЛИ ВТМВ.Ссылка.ТемпературныйРежим.ВерхнийПределТемпературы < ВТДанные.Sensor_value
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ОтклонениеОтНормы
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТМВ КАК ВТМВ
	               |		ПО ВТДанные.id_mesto = ВТМВ.Номер
	               |			И (ВТМВ.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.МестаВыкладки.ПустаяСсылка))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДат КАК ВТДат
	               |		ПО ВТДанные.id_sensor = ВТДат.Номер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ИзмененныеЗначенияТемператур.МестоХранения.ИД КАК id_mesto,
	               |			ИзмененныеЗначенияТемператур.Датчик.ИД КАК id_sensor,
	               |			ВЫБОР
	               |				КОГДА ИзмененныеЗначенияТемператур.ЭтоУтро
	               |					ТОГДА 1
	               |				ИНАЧЕ 2
	               |			КОНЕЦ КАК УтроВечер,
	               |			ИзмененныеЗначенияТемператур.ДатаИзмерения КАК ДатаИзмерения,
	               |			МАКСИМУМ(ИзмененныеЗначенияТемператур.ЗначениеТемпературы) КАК ЗначениеТемпературы
	               |		ИЗ
	               |			РегистрСведений.ИзмененныеЗначенияТемператур КАК ИзмененныеЗначенияТемператур
	               |		ГДЕ
	               |			ИзмененныеЗначенияТемператур.ДатаИзмерения МЕЖДУ &ДатаНач И &ДатаКон
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ИзмененныеЗначенияТемператур.МестоХранения.ИД,
	               |			ИзмененныеЗначенияТемператур.Датчик.ИД,
	               |			ВЫБОР
	               |				КОГДА ИзмененныеЗначенияТемператур.ЭтоУтро
	               |					ТОГДА 1
	               |				ИНАЧЕ 2
	               |			КОНЕЦ,
	               |			ИзмененныеЗначенияТемператур.ДатаИзмерения) КАК ИзмененныеЗначенияТемператур
	               |		ПО ВТДанные.id_mesto = ИзмененныеЗначенияТемператур.id_mesto
	               |			И ВТДанные.id_sensor = ИзмененныеЗначенияТемператур.id_sensor
	               |			И ВТДанные.УтроВечер = ИзмененныеЗначенияТемператур.id_sensor
	               |			И (НАЧАЛОПЕРИОДА(ВТДанные.Дата, ДЕНЬ) = ИзмененныеЗначенияТемператур.ДатаИзмерения)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ПО ВТДанные.ShopNo = СтруктурныеЕдиницы.НомерТочки
	               |			И (НЕ СтруктурныеЕдиницы.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Данные", Данные.Выгрузить());
	Запрос.УстановитьПараметр("ТЗ_МВ", ТЗ_МВ);
	Запрос.УстановитьПараметр("ТЗ_Дат", ТЗ_Дат);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//+++АК ILIK 2018.07.19 ИП-00018838
Функция ПолучитьУсловиеОтбора()
	ЗаДень = Ложь;
	
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	
	ПараметрПериод = ПользовательскиеНастройки.Найти(ПараметрыДанных.Найти("ПериодОтчета").ИдентификаторПользовательскойНастройки);
	ПараметрДень = ПользовательскиеНастройки.Найти(ПараметрыДанных.Найти("День").ИдентификаторПользовательскойНастройки);
	ПараметрВремяНачала = ПользовательскиеНастройки.Найти(ПараметрыДанных.Найти("ВремяНачала").ИдентификаторПользовательскойНастройки);
	ПараметрВремяОкончания = ПользовательскиеНастройки.Найти(ПараметрыДанных.Найти("ВремяОкончания").ИдентификаторПользовательскойНастройки);
	
	Если ПараметрПериод.Использование И ПараметрДень.Использование Тогда
		ПараметрДень.Использование = Ложь;
		ПараметрВремяНачала.Использование = Ложь;
		ПараметрВремяОкончания.Использование = Ложь;
		
		ДатаНач = ПараметрПериод.Значение.ДатаНачала;
		ДатаКон = ПараметрПериод.Значение.ДатаОкончания;
	ИначеЕсли ПараметрПериод.Использование Тогда
		ДатаНач = ПараметрПериод.Значение.ДатаНачала;
		ДатаКон = ПараметрПериод.Значение.ДатаОкончания;
	ИначеЕсли ПараметрДень.Использование Тогда
		ПараметрВремяНачала.Использование = Истина;
		ПараметрВремяОкончания.Использование = Истина;
		
		ДатаНач = НачалоДня(ПараметрДень.Значение.Дата);
		ДатаКон = КонецДня(ПараметрДень.Значение.Дата);
		
		ВремяНач = ПараметрВремяНачала.Значение;
		ВремяКон = ПараметрВремяОкончания.Значение;
		
		ЗаДень = Истина;
	Иначе
		ПараметрПериод.Использование = Истина;
		
		ДатаНач = ПараметрПериод.Значение.ДатаНачала;
		ДатаКон = ПараметрПериод.Значение.ДатаОкончания;
	КонецЕсли;
	
	УсловиеОтбора = "
		|and ts.date_add between " + ВнешниеДанные.ФорматПоля(ДатаНач) + " and " + ВнешниеДанные.ФорматПоля(ДатаКон);
	
	Параметр = ПользовательскиеНастройки.Найти(ПараметрыДанных.Найти("Магазин").ИдентификаторПользовательскойНастройки);
	Если Параметр.Использование Тогда
		УсловиеОтбора = УсловиеОтбора + "
					|and ts.ShopNo = '" + Формат(Параметр.Значение.НомерТочки, "ЧГ=0") + "'";
	Иначе
		УсловиеОтбора = УсловиеОтбора + "
					|and ts.ShopNo IN (" + ПолучитьСписокСкладов() + ")";
	КонецЕсли;
	
	Параметр = ПользовательскиеНастройки.Найти(ПараметрыДанных.Найти("Датчик").ИдентификаторПользовательскойНастройки);;
	Если Параметр.Использование Тогда
		УсловиеОтбора = УсловиеОтбора + "
					|and ts.id_sensor = '" + Формат(Число(СтрЗаменить(Параметр.Значение.Код, "-", "")), "ЧГ=0") + "'";
	КонецЕсли;
	
	Параметр = ПользовательскиеНастройки.Найти(ПараметрыДанных.Найти("Место").ИдентификаторПользовательскойНастройки);
	Если Параметр.Использование Тогда
		УсловиеОтбора = УсловиеОтбора + "
					|and ts.id_mesto = '" + Формат(Число(Параметр.Значение.Код), "ЧГ=0") + "'";
	КонецЕсли;
	
	Возврат УсловиеОтбора;
КонецФункции

//+++АК ILIK 2018.07.19 ИП-00018838
Функция ПолучитьСписокСкладов()
	СписокСкладов = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	               |	И НЕ СтруктурныеЕдиницы.ПометкаУдаления
	               |	И СтруктурныеЕдиницы.НомерТочки <> 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСкладов = СписокСкладов + "'" + Формат(Выборка.НомерТочки, "ЧГ=0") + "', ";
	КонецЦикла;
	
	Возврат Лев(СписокСкладов, СтрДлина(СписокСкладов) - 2);
КонецФункции

//+++АК ILIK 2018.07.19 ИП-00018838
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТЗДанные = ПолучитьДанныеДатчиков();
	Если ТЗДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные", ТЗДанные);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	//ДокументРезультат = ОбработатьЗаголовки(ДокументРезультат);
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00018838
Функция ОбъединятьЯчейки(ТабДок, индСтр, индКол)
    Ячейка = ТабДок.Область(индСтр, индКол);
    ЯчейкаСлед = ТабДок.Область(индСтр, индКол + 1);
    Если ПустаяСтрока(Ячейка.Текст) Тогда
        Возврат Ложь;
    ИначеЕсли
        Ячейка.Текст = ЯчейкаСлед.Текст И Ячейка.Верх = Ячейка.Низ И ЯчейкаСлед.Верх = ЯчейкаСлед.Низ Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;
КонецФункции

//+++АК ILIK 2018.07.19 ИП-00018838
Функция ОбработатьЗаголовки(ТабДок)
    ВысотаФ = ТабДок.ФиксацияСверху;
    ШиринаФ = ТабДок.ФиксацияСлева;
    ОбъединяемаяОбласть = Неопределено;
    Для индСтр = -ВысотаФ По -1 Цикл
        Если ТабДок.Область(-индСтр, 1).Текст = "" Тогда
            Возврат ТабДок;
		КонецЕсли;
		
        НачальнаяКолонка = 0;
        Для индКол = ШиринаФ + 1 По ТабДок.ШиринаТаблицы Цикл
            Если ОбъединятьЯчейки(ТабДок, -индСтр, индКол) Тогда
                Если Не НачальнаяКолонка Тогда
                    НачальнаяКолонка = индКол;
                КонецЕсли;
            ИначеЕсли НачальнаяКолонка Тогда
                ТекстЗаголовка = ТабДок.Область(-индСтр, индКол).Текст;
                ОбъединяемаяОбласть = ТабДок.Область(-индСтр, НачальнаяКолонка, -индСтр, индКол);
                ОбъединяемаяОбласть.Объединить();
                ОбъединяемаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
                ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
                НачальнаяКолонка = 0;
            Иначе
                НачальнаяКолонка = 0;
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    Возврат ТабДок;
КонецФункции
