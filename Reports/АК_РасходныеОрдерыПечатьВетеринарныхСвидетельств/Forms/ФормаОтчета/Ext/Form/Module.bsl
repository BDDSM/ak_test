
&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	РезультатПриАктивизацииОбластиСервер();	
КонецПроцедуры

&НаСервере
Процедура РезультатПриАктивизацииОбластиСервер()
	Лево=Элементы.Результат.ТекущаяОбласть.Лево;
	Право=Элементы.Результат.ТекущаяОбласть.Право;
	Верх=Элементы.Результат.ТекущаяОбласть.Верх;
	Низ=Элементы.Результат.ТекущаяОбласть.Низ;
	Список.Очистить();
	МасДок=Новый Массив;
	Для Сч=Верх По Низ Цикл
		Для Ит=Лево По Право Цикл
			ТекстРО=Результат.Область(Сч,Ит,Сч,Ит).Текст;
			Если Найти(ТекстРО,"Расходный ордер (склад)")>0 Тогда
				//Мас1=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ТекстРО,"Расходный ордер (склад)");
				//Мас2=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Мас1[1]," от ");
				//СтрНомер=СокрЛП(Мас2[0]);
				//СтрДата=СокрЛП(Мас2[1]);
				//ДатаДок=Дата(Число(Сред(Мас2[1],7,4)),Число(Сред(Мас2[1],4,2)),Число(Сред(Мас2[1],1,2)));
				Струк = ПолучитьРекурсивноСтруктуруОтбора(Результат.Область(Сч,Ит,Сч,Ит).Расшифровка);
				Если Струк.Свойство("РасходныйОрдер") Тогда
					Список.Добавить(Струк.РасходныйОрдер);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 	
	КонецЦикла; 	
	
	
	
КонецПроцедуры




Функция ПолучитьРекурсивноСтруктуруОтбора(Расшифровка, СтруктураОтбора = Неопределено)
    
		Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
        ТекущееПоле = Данные.Элементы[Расшифровка];
        
        Если СтруктураОтбора = Неопределено Тогда 
            СтруктураОтбора = Новый Структура; 
        КонецЕсли; 
        ТекущееПоле = Данные.Элементы[Расшифровка];
        Если ТипЗнч(ТекущееПоле) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля")  Тогда 
            Для каждого ТекЭл Из ТекущееПоле.ПолучитьПоля() Цикл 
                Если не Найти(ТекЭл.Поле,".") > 0 Тогда 
                    СтруктураОтбора.Вставить(ТекЭл.Поле, ТекЭл.Значение); 
                КонецЕсли;
            КонецЦикла; 
        КонецЕсли;        
        Для каждого ТекЭл Из ТекущееПоле.ПолучитьРодителей() Цикл 
            ПолучитьРекурсивноСтруктуруОтбора(ТекЭл.Идентификатор, СтруктураОтбора);    
        КонецЦикла; 
       Возврат СтруктураОтбора; 
    
КонецФункции// ПолучитьРекурсивноСтруктуруОтбора()

 
&НаСервереБезКонтекста
Функция Печать(ПараметрКоманды, МассивПечФорм)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.ВетДокументНапечатан
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрКоманды);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Если Стр.ВетДокументНапечатан Тогда
			Сообщить("Ветеринарный документ по " + Стр.Ссылка + " уже был напечатан");	
		КонецЕсли; 
	КонецЦикла; 	
	
	
	Документы.РасходныйОрдерСклад.ПечатьВетСвидетельство(ПараметрКоманды, МассивПечФорм);
	//Если ПараметрКоманды.ВетДокументНапечатан = Ложь Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//	
	//	ОбъектДокумента = ПараметрКоманды.ПолучитьОбъект();
	//	ОбъектДокумента.ВетДокументНапечатан = Истина;
	//	ОбъектДокумента.Записать();
	//	
	//КонецЕсли;
	Для каждого Стр Из ТЗ Цикл
		Если НЕ Стр.ВетДокументНапечатан Тогда
			
			ОбъектДокумента = Стр.Ссылка.ПолучитьОбъект();
			ОбъектДокумента.ВетДокументНапечатан = Истина;
			ОбъектДокумента.Записать();
		КонецЕсли; 
	КонецЦикла; 	
КонецФункции
                                                                  
&НаСервереБезКонтекста
Функция ПолучитьПризкакПроведенности(СсылкаНаОбъект)
	
	Возврат СсылкаНаОбъект.Проведен;
	
КонецФункции


Функция ПолучитьМассивДокументов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Получатель КАК СтруктурнаяЕдиница,
		|	МаршрутныйЛистТорговыеТочки.ПоставкаВСетках КАК КолвоСетокВПоставке,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|			ТОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|		ИНАЧЕ МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту
		|	КОНЕЦ КАК ВремяВыходаВРейсДата,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту КАК ВремяВыходаВРейс,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ДатаЗавершенияПогрузки КАК ФактическоеВремяВыхода,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Комментарий КАК Примечание,
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Сборщик КАК Сборщик,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад.Владелец,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.Номер, МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование) КАК МаршрутНаименование,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.НомерПоВремениВыезда, МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.НомерПоВремениВыезда) КАК МаршрутНомерПоВремениВыезда
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
		|		ПО МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут = МаршрутныйЛистТорговыеТочки.Ссылка
		|			И МаршрутныйЛистРасходныеОрдера.Документ.Получатель = МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераМаршрутов.СрезПоследних(&КонецПериода, ) КАК НомераМаршрутовСрезПоследних
		|		ПО МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут = НомераМаршрутовСрезПоследних.Маршрут
		|ГДЕ
		|	 МаршрутныйЛистРасходныеОрдера.Документ в (&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка КАК РасходныйОрдер,
		|	РасходныйОрдерСклад.Ссылка.Получатель.Наименование КАК Получатель,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Ссылка.Получатель.Регион.Код = 77
		|			ТОГДА ""Форма 4""
		|		ИНАЧЕ ""Форма 2""
		|	КОНЕЦ КАК Форма,
		|	вт.ВремяВыходаВРейсДата КАК ВремяВыходаВРейсДата,
		|	вт.МаршрутНаименование КАК МаршрутНаименование,
		|	вт.Маршрут КАК Маршрут,
		|	вт.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	вт.Документ.Дата,
		|	вт.МаршрутНомерПоВремениВыезда КАК МаршрутНомерПоВремениВыезда
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСклад
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО РасходныйОрдерСклад.Ссылка.Склад = вт.ДокументСклад
		|			И РасходныйОрдерСклад.Ссылка.Получатель = вт.СтруктурнаяЕдиница
		|			И РасходныйОрдерСклад.Ссылка = вт.Документ
		|ГДЕ
		|	 РасходныйОрдерСклад.Ссылка в (&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСклад.Ссылка,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Ссылка.Получатель.Регион.Код = 77
		|			ТОГДА ""Форма 4""
		|		ИНАЧЕ ""Форма 2""
		|	КОНЕЦ,
		|	вт.ВремяВыходаВРейсДата,
		|	вт.МаршрутНаименование,
		|	вт.Маршрут,
		|	вт.СтруктурнаяЕдиница,
		|	вт.Документ.Дата,
		|	РасходныйОрдерСклад.Ссылка.Получатель.Наименование,
		|	вт.МаршрутНомерПоВремениВыезда
		|
		|УПОРЯДОЧИТЬ ПО
		|	Форма,
		|	ВремяВыходаВРейсДата,
		|	МаршрутНомерПоВремениВыезда,
		|	МаршрутНаименование,
		|	Получатель,
		|	РасходныйОрдер";
	
	Запрос.УстановитьПараметр("Ссылка", Список.ВыгрузитьЗначения());
	КонецПериода=ТекущаяДата();
	Для каждого Эл Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(Эл.Параметр)="КонецПериода" Тогда
			КонецПериода=Эл.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода.Дата);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасДок=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасДок.Добавить(ВыборкаДетальныеЗаписи.РасходныйОрдер);
	КонецЦикла;
	Возврат МасДок;	

КонецФункции // ()
 
&НаКлиенте
Процедура ВетСвидетельство(Команда)
	
	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	//Если НЕ ПолучитьПризкакПроведенности(ТекРасходник) Тогда
	//	ОбщегоНазначения.СообщитьИнформациюПользователю("Документ не проведен! Для печати необходимо провести документ!");
	//	Возврат;
	//КонецЕсли;
	
	
	
	
	
	

	ТабДокФ2 = Новый ТабличныйДокумент;
	ТабДокФ2.ИмяПараметровПечати	= "АК_ВетПечать2";
	ТабДокФ2.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДокФ2.ПолеСлева 				= 15;		
	ТабДокФ2.ОтображатьСетку		= Ложь;
	ТабДокФ2.Защита					= Ложь;
	ТабДокФ2.ТолькоПросмотр			= Истина;
	ТабДокФ2.ОтображатьЗаголовки	= Ложь;
	//ТабДок.РазмерКолонтитулаСнизу	= 0;
	//ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДокФ2.ПолеСверху 			= 5;
	ТабДокФ2.ПолеСнизу 				= 5;
	ТабДокФ2.ПолеСправа 			= 5;
	ТабДокФ2.АвтоМасштаб			= Истина;
	
	ТабДокФ4 = Новый ТабличныйДокумент;
	ТабДокФ4.ИмяПараметровПечати	= "АК_ВетПечать4";
	ТабДокФ4.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДокФ4.ПолеСлева 				= 15;		
	ТабДокФ4.ОтображатьСетку		= Ложь;
	ТабДокФ4.Защита					= Ложь;
	ТабДокФ4.ТолькоПросмотр			= Истина;
	ТабДокФ4.ОтображатьЗаголовки	= Ложь;
	//ТабДок.РазмерКолонтитулаСнизу	= 0;
	//ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДокФ4.ПолеСверху 			= 5;
	ТабДокФ4.ПолеСнизу 				= 5;
	ТабДокФ4.ПолеСправа 			= 5;
	ТабДокФ4.АвтоМасштаб			= Истина;
	
	
	ТабДокФ3 = Новый ТабличныйДокумент;
	ТабДокФ3.ИмяПараметровПечати	= "АК_ВетПечать3";
	ТабДокФ3.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДокФ3.ПолеСлева 				= 15;		
	ТабДокФ3.ОтображатьСетку		= Ложь;
	ТабДокФ3.Защита					= Ложь;
	ТабДокФ3.ТолькоПросмотр			= Истина;
	ТабДокФ3.ОтображатьЗаголовки	= Ложь;
	//ТабДок.РазмерКолонтитулаСнизу	= 0;
	//ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДокФ3.ПолеСверху 			= 5;
	ТабДокФ3.ПолеСнизу 				= 5;
	ТабДокФ3.ПолеСправа 			= 5;
	ТабДокФ3.АвтоМасштаб			= Истина;
	СтрукПечФорм = Новый Структура;
	
	//
	//Для каждого ЭлСп Из Список Цикл
	//	Печать(ЭлСп.Значение, СтрукПечФорм);
	//	ВывестиВИтоговыйТД(ТабДокФ2, ТабДокФ4, ТабДокФ3, СтрукПечФорм, ЭлСп.Значение);
	//КонецЦикла;
	МасДок=Список.ВыгрузитьЗначения();
	Печать(МасДок, СтрукПечФорм);
	ВывестиВИтоговыйТД(ТабДокФ2, ТабДокФ4, ТабДокФ3, СтрукПечФорм);
	Для каждого Эл Из МасДок Цикл
		ОповеститьОбИзменении(Эл);
	КонецЦикла; 
	
	Если ТабДокФ4.ВысотаТаблицы > 0 Тогда
		ТабДокФ4.Показать("Форма4");
	КонецЕсли;
	Если ТабДокФ2.ВысотаТаблицы > 0 Тогда
		ТабДокФ2.Показать("Форма2");
	КонецЕсли;
	Если ТабДокФ3.ВысотаТаблицы > 0 Тогда
		ТабДокФ3.Показать("Форма3");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиВИтоговыйТД(ТабДокФ2, ТабДокФ4, ТабДокФ3, СтрукПечФорм)
	
	Для каждого Эл Из СтрукПечФорм Цикл
		Если Эл.Ключ = "Форма4" Тогда
			Для каждого ЭлМас Из Эл.Значение Цикл
				ТабДокФ4.Вывести(ЭлМас);
				ТабДокФ4.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЦикла; 
		ИначеЕсли Эл.Ключ = "Форма2" Тогда
			Для каждого ЭлМас Из Эл.Значение Цикл
				ТабДокФ2.Вывести(ЭлМас);
				ТабДокФ2.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЦикла;
		ИначеЕсли Эл.Ключ = "Форма3" Тогда
			Для каждого ЭлМас Из Эл.Значение Цикл
				ТабДокФ3.Вывести(ЭлМас);
				ТабДокФ3.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегион(Док)
	
	Возврат ?(ТипЗнч(Док.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы"), Док.Получатель.Регион, Док.Склад.Владелец.Регион);
	
КонецФункции

&НаКлиенте
Процедура Команда1(Команда)
	Сообщить(Результат.ТекущаяОбласть.Параметр);
КонецПроцедуры
