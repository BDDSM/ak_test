Функция ПолучитьПользовательскуюНастройку(ИдентификаторПользовательскойНастройки)
	
	ЗначениеВозврата = Неопределено;
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользПоле.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат ПользПоле;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала = '00010101';
	ДатаОкончания = '00010101';
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "Период" Тогда
			ДатаНачала = ПользПоле.Значение.ДатаНачала;
			ДатаОкончания = КонецДня(ПользПоле.Значение.ДатаОкончания);
		КонецЕсли;	
	КонецЦикла;
	
	МассивТТ = Новый Массив();
	ЕстьОтборТТ = Ложь;
	Для Каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбор.ПредставлениеПользовательскойНастройки = "Торговая точка" Тогда
			ОтборТТ = ПолучитьПользовательскуюНастройку(ЭлементОтбор.ИдентификаторПользовательскойНастройки);
			Если ОтборТТ <> Неопределено
				И ОтборТТ.Использование = Истина Тогда
				Если ОтборТТ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ЕстьОтборТТ = Истина;
					МассивТТ.Добавить(ОтборТТ.ПравоеЗначение);
				КонецЕсли;	
				Если ОтборТТ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ЕстьОтборТТ = Истина;
					Для Каждого ЭлементТТ Из ОтборТТ.ПравоеЗначение Цикл
						МассивТТ.Добавить(ЭлементТТ.Значение);
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	//+++АК BELN 2018.11.26 ИП-00020345      
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК ЗначенияСвойствСтруктурныхЕдиниц
		|		ПО СтруктурныеЕдиницы.Ссылка = ЗначенияСвойствСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|			И (ЗначенияСвойствСтруктурныхЕдиниц.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ВыездноеМероприятие))
		|ГДЕ
		|	(ЗначенияСвойствСтруктурныхЕдиниц.Значение ЕСТЬ NULL
		|			ИЛИ НЕ ЗначенияСвойствСтруктурныхЕдиниц.Значение)
		|	И НЕ СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасНужныхТТ=Новый Массив;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасНужныхТТ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	//---АК BELN 2018.11.26 
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ДатаОкончания);
	Запрос.УстановитьПараметр("ЕстьОтборПоТТ", ЕстьОтборТТ);
	Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
	Запрос.УстановитьПараметр("МасНужныхТТ", МасНужныхТТ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Ссылка КАК Регистратор,
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТорговаяТочка,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Количество КАК Отгружено,
	               |	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Распределено,
	               |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ПолученоТТ,
	               |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК КорректировкаВЛистеУчета
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И (&ЕстьОтборПоТТ = ЛОЖЬ
	               |			ИЛИ РасходныйОрдерСкладТовары.Ссылка.Получатель В (&МассивТТ)) И РасходныйОрдерСкладТовары.Ссылка.Получатель В (&МасНужныхТТ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчета.Регистратор,
	               |	ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница,
	               |	ДвиженияТоваровПоЛистамУчета.Номенклатура,
	               |	0,
	               |	0,
	               |	ВЫБОР
	               |		КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ПоступлениеБезВозвратаНаСклад)
	               |			ТОГДА ДвиженияТоваровПоЛистамУчета.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Разница)
	               |			ТОГДА ДвиженияТоваровПоЛистамУчета.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчета
	               |ГДЕ
	               |	ДвиженияТоваровПоЛистамУчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара В (ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ПоступлениеБезВозвратаНаСклад), ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Разница))
	               |	И (&ЕстьОтборПоТТ = ЛОЖЬ
	               |			ИЛИ ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница В (&МассивТТ)) И ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница В (&МасНужныхТТ)";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	
	
	
	Если ДатаОкончания >= ТекущаяДата() Тогда
		ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(НачалоДня(ТекущаяДата())
															, КонецДня(ТекущаяДата())
															, ?(ЕстьОтборТТ, МассивТТ, Неопределено));
		Для Каждого СтрокаТаб Из ТабДанные Цикл
			Если МасНужныхТТ.Найти(СтрокаТаб.ТТ)=Неопределено Тогда
				Продолжить;
			КонецЕсли; 													
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.ТорговаяТочка = СтрокаТаб.ТТ;
			СтрокаДоб.Номенклатура = СтрокаТаб.Номенклатура;
			СтрокаДоб.ПолученоТТ = СтрокаТаб.ПоступилоБезВозврата;
			СтрокаДоб.КорректировкаВЛистеУчета = СтрокаТаб.Разница;
			СтрокаДоб.Распределено = 0;
			СтрокаДоб.Отгружено = 0;
		КонецЦикла;													
	КонецЕсли;														
														
	
	
	СтандартнаяОбработка = Ложь;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаДанных);
	//
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	
КонецПроцедуры
