
Функция ПолучитьПользовательскуюНастройку(ИдентификаторПользовательскойНастройки)
	
	ЗначениеВозврата = Неопределено;
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользПоле.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат ПользПоле;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьТабОстатковБух(СоединениеСБазой, ДатаОстатков, МассивКонтрагенты)
	
	ЗапросКеш = СоединениеСБазой.NewObject("Запрос");
	ЗапросКеш.УстановитьПараметр("ДатаОстатки", СоединениеСБазой.NewObject("Граница", КонецДня(ДатаОстатков), СоединениеСБазой.ВидГраницы.Включая));
	ЗапросКеш.УстановитьПараметр("Контры", МассивКонтрагенты);
	ЗапросКеш.Текст = "ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	ХозрасчетныйОстатки.Организация.ИНН,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты).ИНН КАК КонтрагентИНН
	|ИЗ
	//+++ AK suvv 16.08.2018 ИП-00019565
	////+++АК sils 05.03.2018 ИП-00017810^01
	////|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)), , ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты) В (&Контры)) КАК ХозрасчетныйОстатки
	//|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)) и Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками), , ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты) В (&Контры)) КАК ХозрасчетныйОстатки
	////---АК sils
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)) и Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками) и Счет <> Значение(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным) и Счет <> Значение(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам), , ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты) В (&Контры)) КАК ХозрасчетныйОстатки
	//--- AK suvv
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Организация.ИНН,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты).ИНН";
	
	Возврат ЗапросКеш.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТабОстатковФин(ДатаОстатков, МассивКонтрагенты)
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецДня(ДатаОстатков), ВидГраницы.Включая));
	ЗапросКеш.УстановитьПараметр("Контры", МассивКонтрагенты);
	ЗапросКеш.Текст = "ВЫБРАТЬ
	                  |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
	                  |	ХозрасчетныйОстатки.Организация,
	                  |	ХозрасчетныйОстатки.Субконто2 КАК Контрагент
	                  |ИЗ
	                  |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПокупателями), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами)), , ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты) В (&Контры)) КАК ХозрасчетныйОстатки
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ХозрасчетныйОстатки.Организация,
	                  |	ХозрасчетныйОстатки.Субконто2";
						
	Возврат ЗапросКеш.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	НаДату = '00010101';
	Для Каждого ПользПоле Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользПоле) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Строка(ПользПоле.Параметр) = "НаДату" Тогда
			НаДату = ПользПоле.Значение;
		КонецЕсли;	
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
	//ВнешниеНаборыДанных = Новый Структура;
	//ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаДанных);
	
	МакетПромежуточный = Отчеты.АнализАктовСверки.ПолучитьМакет("МакетДанные");
	НастройкиПромежуточные = МакетПромежуточный.НастройкиПоУмолчанию;
	
	Для Каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		ОтборЭлемент = ПолучитьПользовательскуюНастройку(ЭлементОтбор.ИдентификаторПользовательскойНастройки);
		Если ОтборЭлемент <> Неопределено
			И ОтборЭлемент.Использование = Истина Тогда
			Если Строка(ЭлементОтбор.ЛевоеЗначение) = "ЕстьОтклонение" Тогда 
				продолжить;
			КонецЕсли;
			ОтборДобавленный = НастройкиПромежуточные.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			ОтборДобавленный.ЛевоеЗначение = ЭлементОтбор.ЛевоеЗначение;
			ОтборДобавленный.ВидСравнения = ОтборЭлемент.ВидСравнения;
			ОтборДобавленный.Использование = Истина;
			ОтборДобавленный.ПравоеЗначение = ОтборЭлемент.ПравоеЗначение;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ЭлементПараметр Из НастройкиПромежуточные.ПараметрыДанных.Элементы Цикл
		Если Строка(ЭлементПараметр.Параметр) = "НаДату" Тогда
			ЭлементПараметр.Использование = Истина;
			ЭлементПараметр.Значение = КонецДня(НаДату);
		КонецЕсли;
	КонецЦикла;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетПромежуточный, НастройкиПромежуточные,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТаблицаДанных.Колонки.Добавить("ОстатокВБух", Новый ОписаниеТипов("Число"));
	
	Попытка
		
		Коннектор = Новый COMObject(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		// создается объект COM-соединение
		
		Строка = ОбщегоНазначения.ПолучитьСтрокуПодключенияКБухгалтерии();
		СоединениеСБазой = Коннектор.Connect(Строка);
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключится к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
	КонецПопытки;
	
	ТаблицаДанных.Индексы.Добавить("ДатаОкончания, ОрганизацияИНН, КонтрагентИНН");
	
	Если СоединениеСБазой <> Неопределено Тогда
		ЗапросКеш = СоединениеСБазой.NewObject("Запрос");
		ЗапросКеш.Текст = "ВЫБРАТЬ
		                  |	Контрагенты.Ссылка,
		                  |	Контрагенты.ИНН
		                  |ИЗ
		                  |	Справочник.Контрагенты КАК Контрагенты";
						  
		ТабКешКонтры = ЗапросКеш.Выполнить().Выгрузить();
		
		ТабДаты = ТаблицаДанных.Скопировать();
		ТабДаты.Свернуть("ДатаОкончания");
		
		Для Каждого СтрокаДата Из ТабДаты Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДата.ДатаОкончания) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиДанныеОснТаблицы = ТаблицаДанных.НайтиСтроки(Новый Структура("ДатаОкончания", СтрокаДата.ДатаОкончания));
			МассивКонтрагенты = СоединениеСБазой.NewObject("Массив");
			Для Каждого СтрокаДанные Из СтрокиДанныеОснТаблицы Цикл
				СтрокаКешКонтр = ТабКешКонтры.Найти(СтрокаДанные.КонтрагентИНН, "ИНН");
				Если СтрокаКешКонтр <> Неопределено Тогда
					МассивКонтрагенты.Добавить(СтрокаКешКонтр.Ссылка);
				КонецЕсли;	
			КонецЦикла;
			
			Если МассивКонтрагенты.Количество() > 0 Тогда
				ТабОстатки = ПолучитьТабОстатковБух(СоединениеСБазой, СтрокаДата.ДатаОкончания, МассивКонтрагенты);
				Для Каждого СтрокаОстаток Из ТабОстатки Цикл
					СтрокиДанные = ТаблицаДанных.НайтиСтроки(Новый Структура("ДатаОкончания, ОрганизацияИНН, КонтрагентИНН", СтрокаДата.ДатаОкончания, СтрокаОстаток.ОрганизацияИНН, СтрокаОстаток.КонтрагентИНН));
					Если СтрокиДанные.Количество() > 0 Тогда
						СтрокиДанные[0].ОстатокВБух = СтрокаОстаток.СуммаОстаток;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			
			МассивКонтрагенты = Новый Массив();
			Для Каждого СтрокаДанные Из СтрокиДанныеОснТаблицы Цикл
				МассивКонтрагенты.Добавить(СтрокаДанные.Контрагент);
			КонецЦикла;
			
			Если МассивКонтрагенты.Количество() > 0 Тогда
				ТабОстатки = ПолучитьТабОстатковФин(СтрокаДата.ДатаОкончания, МассивКонтрагенты);
				Для Каждого СтрокаОстаток Из ТабОстатки Цикл
					СтрокиДанные = ТаблицаДанных.НайтиСтроки(Новый Структура("ДатаОкончания, Организация, Контрагент", СтрокаДата.ДатаОкончания, СтрокаОстаток.Организация, СтрокаОстаток.Контрагент));
					Если СтрокиДанные.Количество() > 0 Тогда
						СтрокиДанные[0].ОстатокНаКонец = СтрокаОстаток.СуммаОстаток;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;	
	
	
	//формирование основного результата
	ТабКВыводу = Новый ТаблицаЗначений();
	ТабКВыводу.Колонки.Добавить("Организация");
	ТабКВыводу.Колонки.Добавить("Контрагент");
	ТабКВыводу.Колонки.Добавить("Бухгалтер");
	ТабКВыводу.Колонки.Добавить("ПрикрепленФайлСверки");
	ТабКВыводу.Колонки.Добавить("ПоследнийАктСверки");
	ТабКВыводу.Колонки.Добавить("АктПоПериод");
	ТабКВыводу.Колонки.Добавить("ОстатокПоАкту", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабКВыводу.Колонки.Добавить("ОстатокПоБухгалтерии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабКВыводу.Колонки.Добавить("ОстатокПоДаннымКонтрагента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабКВыводу.Колонки.Добавить("КраситьСтроку");
	ТабКВыводу.Колонки.Добавить("ЕстьОтклонение");
	ТабКВыводу.Колонки.Добавить("СверкаСогласована");
	ТабКВыводу.Колонки.Добавить("Комментарий");
	
	Для Каждого СтрокаДанные Из ТаблицаДанных Цикл
		СтрокаДоб = ТабКВыводу.Добавить();
		СтрокаДоб.Организация = СтрокаДанные.Организация;
		СтрокаДоб.Контрагент = СтрокаДанные.Контрагент;
		СтрокаДоб.Бухгалтер = СтрокаДанные.Бухгалтер;
		СтрокаДоб.ПрикрепленФайлСверки = СтрокаДанные.ПрикрепленФайлСверки;
		СтрокаДоб.ПоследнийАктСверки = СтрокаДанные.Ссылка;
		СтрокаДоб.АктПоПериод = СтрокаДанные.ДатаОкончания;
		СтрокаДоб.ОстатокПоАкту = СтрокаДанные.ОстатокНаКонец;
		СтрокаДоб.ОстатокПоДаннымКонтрагента = СтрокаДанные.ОстатокНаКонецПоДаннымКонтрагента;
		СтрокаДоб.ОстатокПоБухгалтерии = СтрокаДанные.ОстатокВБух;
		СтрокаДоб.СверкаСогласована = СтрокаДанные.СверкаСогласована;
		СтрокаДоб.КраситьСтроку = (СтрокаДоб.ОстатокПоАкту + СтрокаДоб.ОстатокПоДаннымКонтрагента + СтрокаДоб.ОстатокПоБухгалтерии) / 3 <> СтрокаДоб.ОстатокПоАкту;
		СтрокаДоб.ЕстьОтклонение = СтрокаДоб.ОстатокПоАкту <> СтрокаДоб.ОстатокПоДаннымКонтрагента ИЛИ 
		                           СтрокаДоб.ОстатокПоДаннымКонтрагента <> СтрокаДоб.ОстатокПоБухгалтерии;
		СтрокаДоб.Комментарий = СтрокаДанные.Комментарий;
	КонецЦикла;	
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабДанные", ТабКВыводу);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	
КонецПроцедуры
