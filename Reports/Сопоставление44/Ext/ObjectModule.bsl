Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем СоответствиеНаборовДанныхИЗапросов;

Перем СоединениеСБазой;

#Если Клиент Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ИнфокомТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	НачалоПериода = ТекущаяДата();
	КонецПериода = ТекущаяДата();
	
	Для каждого Параметр из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл		
		Если СокрЛП(Параметр.Параметр)="НачалоПериода" Тогда
			НачалоПериода = Параметр.Значение;
		ИначеЕсли СокрЛП(Параметр.Параметр)="КонецПериода" Тогда
			КонецПериода = КонецДня(Параметр.Значение);						
		КонецЕсли;		
	КонецЦикла;

	ВнешнийНаборДанных = Новый ТаблицаЗначений;
	РассчитатьНаборДанных(ВнешнийНаборДанных, НачалоПериода, КонецПериода);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СводнаяТаблица", ВнешнийНаборДанных);		
	
	ИнфокомТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета,СтруктураДанных); 
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетамиИнфоком.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЛишниеПредставленияВШапке(Результат)
	
	Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	Пока Ячейка <> Неопределено Цикл
		УдаляемаяОбласть = Результат.Область("R"+Ячейка.Верх);
		Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		Ячейка = Результат.НайтиТекст("Удалить", , , , истина, Истина, ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ИнфокомТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ИнфокомТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;                                    
				
	КонецЦикла;
	
	ИнфокомТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Функция ЕстьДетальныеПоля(ВыбранныеПоля)
	ЕстьРесурсы = ложь;
	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
		ДоступноеПоле = ИнфокомТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено тогда
			Если ДоступноеПоле.Ресурс тогда
				ЕстьРесурсы = истина;
			Иначе
				ЕстьРесурсы = ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЕстьРесурсы;
КонецФункции

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ИнфокомТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТекущаяДата",   ТекущаяДата());
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ПараметрНачалоПериода = Неопределено или ПараметрКонецПериода = Неопределено тогда
		Возврат;
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено и КонецПериода <> Неопределено тогда
		УправлениеОтчетамиИнфоком.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПустоеОформдениеПоля(Поле)
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЗначениеТекст = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Text"));
	ЗначениеТекст.Значение = "-";
	ЗначениеТекст.Использование = Истина;
	
	ПолеОформления = УсловноеОформление.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Поле;
	
КонецПроцедуры


Процедура ДобавитьОтборИлиПоВсемПоказателям(СтруктураОтчета, ВыбранныеПоля, СписокПолей)
	// создадим отбор или 
	ГруппаИли = СтруктураОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
		Если Найти(Строка(ВыбранноеПоле.Поле), "UserField") > 0 или СписокПолей.НайтиПоЗначению(ВыбранноеПоле.Поле) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		ИнфокомТиповыеОтчеты.ДобавитьОтбор(ГруппаИли, Строка(ВыбранноеПоле.Поле), 0, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		ГруппаИли.Использование = истина;
	КонецЕсли;
	Если ГруппаИли.Элементы.Количество() = 0 тогда
		СтруктураОтчета.Отбор.Элементы.Удалить(ГруппаИли);
	КонецЕсли;
КонецПроцедуры


Функция ПрисутствуетПоле(Поле)
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(КомпоновщикНастроек.Настройки.Структура, Поле);

	
	//Для каждого ЭлементСтруктуры из КомпоновщикНастроек.Настройки.Структура Цикл
	//	
	//	Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") тогда
	//		
	//		ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
	//		
	//	ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
	//		
	//		Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
	//			
	//			ЕстьГруппировка = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Если ЕстьГруппировка тогда
		Возврат ЕстьГруппировка;
	КонецЕсли;
	
	// найти поле группировки в отборе
	Для каждого ОтборПоле из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеПоля = ИнфокомТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ПолеВыбора из ВыбранныеПоля Цикл
		
		ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
		
		Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ПолеВыбора.Использование И ПолеВыбора.Поле = ПолеПериодРегистрации тогда
			
			ЕстьГруппировка = истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

Функция ИспользуетсяОтбор(Элементы, ПолеПериодРегистрации)
	
	ЕстьГруппировка = ложь;
	
	Для каждого ОтборПоле из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеПериодРегистрации);
		Иначе
			Если ОтборПоле.Использование и (ОтборПоле.ЛевоеЗначение = ПолеПериодРегистрации или ОтборПоле.ПравоеЗначение = ПолеПериодРегистрации) тогда
				
				ЕстьГруппировка = истина;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПоле(Структура, Поле)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	 и ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
	 тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных(Поле);
	
	Для каждого ЭлементСтруктуры из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			Для каждого ПолеГруппировки из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") тогда
					Продолжить;
				КонецЕсли;
				Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
					ЕстьПоле = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле) или НайтиПоле(ЭлементСтруктуры.Колонки, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или  Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле) ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	
	Возврат Новый Структура("ДополнительныеНастройкиОтчета, ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	Истина, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции
#КонецЕсли

Процедура _глВывестиРезультатКомпоновкиСАвтофиксациейСтрок( Таб, 
	ПроцессорКомпоновкиДанных, 
	ЭлементыРасшировки,
	Знач МассивИгнорируемыхПолей = Неопределено, 
	РазрешитьПрерывание = Истина)  
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Таб);
	ПроцессорВывода.НачатьВывод();
	ФиксацияВыполнена = Ложь;
	Если МассивИгнорируемыхПолей = Неопределено Тогда
		МассивИгнорируемыхПолей = Новый Массив;
	КонецЕсли; 
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		// Автофиксация
		Если Не ФиксацияВыполнена Тогда
			Для Каждого ЗначениеПараметра Из ЭлементРезультатаКомпоновкиДанных.ЗначенияПараметров Цикл
				Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					ЗначенияПолейРасшифровки = ЭлементыРасшировки[ЗначениеПараметра.Значение].ПолучитьПоля();
					Для Каждого ЗначениеПоляРасшифровки Из ЗначенияПолейРасшифровки Цикл
						Если МассивИгнорируемыхПолей.Найти(ЗначениеПоляРасшифровки.Поле) = Неопределено Тогда
							Таб.ФиксацияСверху = Таб.ВысотаТаблицы;
							ФиксацияВыполнена = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если ФиксацияВыполнена Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
		Если РазрешитьПрерывание Тогда
			#Если Клиент тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
		КонецЕсли; 
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

Функция ВыполнитьПодключениеКБазе()
	
	Если НЕ СоединениеСБазой = Неопределено Тогда
		возврат Истина;
	КонецЕсли;
	//ИмяИнформационнойБазыНаСервереДляПодключения 	= "BP_CORP_Deb";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Состояние("Подключение к информационной базе");
	#КонецЕсли
	
	Попытка
		
		//+++susk
		
		//ИмяСервераИнформационнойБазыДляПодключения = "10.0.0.15";
		//ИмяИнформационнойБазыНаСервереДляПодключения = "BP_CORP";
		//ПользовательИнформационнойБазыДляПодключения = "Обмен";
		//ПарольИнформационнойБазыДляПодключения = "123321";
		//
		//
		//Коннектор = Новый COMObject("V82.COMConnector");
		//// создается объект COM-соединение
		//
		//Строка = "Srvr="""+СокрЛП(ИмяСервераИнформационнойБазыДляПодключения)+""";Ref="""+СокрЛП(ИмяИнформационнойБазыНаСервереДляПодключения)+""";Usr="""+СокрЛП(ПользовательИнформационнойБазыДляПодключения)+""";Pwd="+ПарольИнформационнойБазыДляПодключения+";";
		//СоединениеСБазой = Коннектор.Connect(Строка);
		
		СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
	
		v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");

		СоединениеСБазой = v82COMОбъект.Connect(СтрокаПодключения);
		
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключиться к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура РассчитатьНаборДанных(ВнешнийНаборДанных,НачалоПериода,КонецПериода)
	
	ВнешнийНаборДанных = Сопоставление44(НачалоПериода, КонецПериода);
	
КонецПроцедуры

//Получаем организацию ФИН по ИНН соответствующую текущей организации
//
Функция ПолучитьОрганизациюФин(Соединение) 
	
	Запрос = Соединение.NewObject("Запрос");	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Соединение.Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	                                                          
	
КонецФункции

Функция Сопоставление44(НачалоПериода, КонецПериода)
	
	СтандартнаяОбработка=Ложь;
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
	
	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
	Попытка
		v82 = v82COMОбъект.Connect(СтрокаПодключения);
		ПодключениеУстановлено=Истина;
	Исключение
		ПодключениеУстановлено=Ложь;
		Сообщить("Не удалось подключиться к базе бухгалтерии!");
		Возврат Неопределено;
	КонецПопытки;
	
	Запрос=v82.NewObject("Запрос");
	
	ЗапросДанныеФинансов = Новый Запрос;	
	
	СписокОрг = Новый СписокЗначений;
	СписокОрг.Добавить(Организация);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
			
	ЗапросДанныеФинансов.УстановитьПараметр("НачалоПериода", НачалоПериода);			
	Граница = Новый Граница(КонецДня(КонецПериода),ВидГраницы.Включая);			
	ЗапросДанныеФинансов.УстановитьПараметр("КонецПериода", Граница);				
		
	//ТаблицаФинансы.Очистить();
	ДанныеБух_удалить.Очистить();
	
	СоответствиеОрганизаций = Новый Соответствие;
	
	ЗапросОрг = Новый Запрос;
	ЗапросОрг.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.ИНН
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
				   
	ВыборкаОрг = ЗапросОрг.Выполнить().Выбрать();
	
	Пока ВыборкаОрг.Следующий() Цикл
		СоответствиеОрганизаций.Вставить(ВыборкаОрг.ИНН, ВыборкаОрг.Ссылка);
	КонецЦикла;
	
	ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ
	                             |	Финансовый.Ссылка КАК Счет
	                             |ПОМЕСТИТЬ СписокИсключаемыхСчетов
	                             |ИЗ
	                             |	ПланСчетов.Финансовый КАК Финансовый
	                             |ГДЕ
	                             |	ВЫБОР
	                             |			КОГДА Финансовый.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Продажи)
	                             |				ТОГДА Финансовый.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ВыручкаПрочая)
	                             |			ИНАЧЕ Финансовый.Ссылка В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.АмортизацияОсновныхСредствДо100000), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.АмортизацияОсновныхСредствУчетНМА))
	                             |		КОНЕЦ
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	СоответствиеСтатейДРСтатьямБУ.Статья,
	                             |	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ,
	                             |	СоответствиеСтатейДРСтатьямБУ.Счет,
	                             |	СоответствиеСтатейДРСтатьямБУ.Основное,
	                             |	СоответствиеСтатейДРСтатьямБУ.КорСчет
	                             |ПОМЕСТИТЬ НеТоварныеСтатьи
	                             |ИЗ
	                             |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	                             |ГДЕ
	                             |	НЕ СоответствиеСтатейДРСтатьямБУ.ТоварнаяСтатья
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	ФинансовыйОбороты.Субконто1 КАК СтатьяДРФин,
	                             |	ФинансовыйОбороты.Регистратор,
	                             |	ФинансовыйОбороты.СуммаОборотДт КАК ФинСуммаОборотДт,
	                             |	ФинансовыйОбороты.СуммаОборотКт КАК ФинСуммаОборотКт,
	                             |	ФинансовыйОбороты.Счет,
	                             |	ФинансовыйОбороты.Организация,
	                             |	ФинансовыйОбороты.КорСчет
	                             |ПОМЕСТИТЬ Выборка
	                             |ИЗ
	                             |	РегистрБухгалтерии.Финансовый.Обороты(
	                             |			&НачалоПериода,
	                             |			&КонецПериода,
	                             |			Авто,
	                             |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПЛАНСчетов.Финансовый.ЗатратыДляРаспределения)),
	                             |			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов),
	                             |			Организация = &Организация
	                             |				И Субконто1 В
	                             |					(ВЫБРАТЬ
	                             |						НеТоварныеСтатьи.Статья
	                             |					ИЗ
	                             |						НеТоварныеСтатьи),
	                             |			НЕ КорСчет В
	                             |					(ВЫБРАТЬ
	                             |						СписокИсключаемыхСчетов.Счет
	                             |					ИЗ
	                             |						СписокИсключаемыхСчетов),
	                             |			) КАК ФинансовыйОбороты
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |ВЫБРАТЬ
	                             |	ФинансовыйОстаткиИОбороты.Субконто3,
	                             |	ФинансовыйОстаткиИОбороты.Регистратор,
	                             |	ФинансовыйОстаткиИОбороты.СуммаОборотДт,
	                             |	ФинансовыйОстаткиИОбороты.СуммаОборотКт,
	                             |	ФинансовыйОстаткиИОбороты.Счет,
	                             |	ФинансовыйОстаткиИОбороты.Организация,
	                             |	ФинансовыйОстаткиИОбороты.КорСчет
	                             |ИЗ
	                             |	РегистрБухгалтерии.Финансовый.Обороты(
	                             |			&НачалоПериода,
	                             |			&КонецПериода,
	                             |			Авто,
	                             |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПЛАНСчетов.Финансовый.Товары)),
	                             |			,
	                             |			Субконто3 = &СтатьяДоставкаТоваровНаСклад
	                             |				И Организация = &Организация,
	                             |			,
	                             |			) КАК ФинансовыйОстаткиИОбороты
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	Выборка.СтатьяДРФин,
	                             |	Выборка.Регистратор,
	                             |	СУММА(Выборка.ФинСуммаОборотДт) КАК СуммаОборотДт,
	                             |	СУММА(Выборка.ФинСуммаОборотКт) КАК СуммаОборотКт,
	                             |	Выборка.Счет,
	                             |	Выборка.Организация,
	                             |	Выборка.КорСчет
	                             |ПОМЕСТИТЬ СводнаяДанныеФин
	                             |ИЗ
	                             |	Выборка КАК Выборка
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	Выборка.СтатьяДРФин,
	                             |	Выборка.Регистратор,
	                             |	Выборка.Счет,
	                             |	Выборка.Организация,
	                             |	Выборка.КорСчет
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |УНИЧТОЖИТЬ Выборка
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	НеТоварныеСтатьи.Статья,
	                             |	МАКСИМУМ(НеТоварныеСтатьи.СтатьяБУ) КАК СтатьяБУ,
	                             |	НеТоварныеСтатьи.Счет
	                             |ПОМЕСТИТЬ СоответствиеСтатей_БЕЗ_КорСчета
	                             |ИЗ
	                             |	НеТоварныеСтатьи КАК НеТоварныеСтатьи
	                             |ГДЕ
	                             |	НеТоварныеСтатьи.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	НеТоварныеСтатьи.Статья,
	                             |	НеТоварныеСтатьи.Счет
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	НеТоварныеСтатьи.Статья,
	                             |	МАКСИМУМ(НеТоварныеСтатьи.СтатьяБУ) КАК СтатьяБУ,
	                             |	НеТоварныеСтатьи.Счет,
	                             |	НеТоварныеСтатьи.КорСчет
	                             |ПОМЕСТИТЬ СоответствиеСтатей_КорСчета
	                             |ИЗ
	                             |	НеТоварныеСтатьи КАК НеТоварныеСтатьи
	                             |ГДЕ
	                             |	НеТоварныеСтатьи.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	НеТоварныеСтатьи.Статья,
	                             |	НеТоварныеСтатьи.Счет,
	                             |	НеТоварныеСтатьи.КорСчет
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	СводнаяДанныеФин.Счет КАК СчетФин,
	                             |	СводнаяДанныеФин.СтатьяДРФин КАК СтатьяЗатратФин,
	                             |	ВЫБОР
	                             |		КОГДА СводнаяДанныеФин.СтатьяДРФин = &СтатьяДоставкаТоваровНаСклад
	                             |			ТОГДА &СтатьяБУТранспортныеРасходы
	                             |		КОГДА СводнаяДанныеФин.Счет = &Счет445
	                             |				И СводнаяДанныеФин.СтатьяДРФин <> &СтатьяВыбытиеОС
	                             |			ТОГДА &СтатьяБУАмортизация
	                             |		ИНАЧЕ ЕСТЬNULL(СоответствиеСтатей_КорСчета.СтатьяБУ, ЕСТЬNULL(СоответствиеСтатей_БЕЗ_КорСчета.СтатьяБУ, ЗНАЧЕНИЕ(Справочник.СтатьиЗатратБУ.ПустаяСсылка)))
	                             |	КОНЕЦ КАК СтатьяЗатрат,
	                             |	СводнаяДанныеФин.Регистратор,
	                             |	СводнаяДанныеФин.СуммаОборотДт КАК ФинСуммаОборотДт,
	                             |	СводнаяДанныеФин.СуммаОборотКт КАК ФинСуммаОборотКт,
	                             |	СводнаяДанныеФин.Организация,
	                             |	СводнаяДанныеФин.КорСчет КАК КорСчетФин
	                             |ИЗ
	                             |	СводнаяДанныеФин КАК СводнаяДанныеФин
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеСтатей_БЕЗ_КорСчета КАК СоответствиеСтатей_БЕЗ_КорСчета
	                             |		ПО СводнаяДанныеФин.СтатьяДРФин = СоответствиеСтатей_БЕЗ_КорСчета.Статья
	                             |			И СводнаяДанныеФин.Счет = СоответствиеСтатей_БЕЗ_КорСчета.Счет
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеСтатей_КорСчета КАК СоответствиеСтатей_КорСчета
	                             |		ПО СводнаяДанныеФин.СтатьяДРФин = СоответствиеСтатей_КорСчета.Статья
	                             |			И СводнаяДанныеФин.Счет = СоответствиеСтатей_КорСчета.Счет
	                             |			И СводнаяДанныеФин.КорСчет = СоответствиеСтатей_КорСчета.КорСчет";
								 
	ЗапросДанныеФинансов.УстановитьПараметр("СтатьяДоставкаТоваровНаСклад", Справочники.СтатьиТовародвижения.ПолучитьСсылку(Новый УникальныйИдентификатор("2cd82e3a-ab84-11e3-9e74-005056a00106"))); //("00000023"));
	ЗапросДанныеФинансов.УстановитьПараметр("СтатьяБУТранспортныеРасходы", Справочники.СтатьиЗатратБУ.НайтиПоКоду("000000024"));
	ЗапросДанныеФинансов.УстановитьПараметр("Счет445", ПланыСчетов.Финансовый.НайтиПоКоду("44.5"));
	ЗапросДанныеФинансов.УстановитьПараметр("СтатьяВыбытиеОС", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("61014"));
	ЗапросДанныеФинансов.УстановитьПараметр("СтатьяБУАмортизация", Справочники.СтатьиЗатратБУ.НайтиПоКоду("000000004"));
	ЗапросДанныеФинансов.УстановитьПараметр("Организация", Организация);
								 	
	ТаблицаФинансы = ЗапросДанныеФинансов.Выполнить().Выгрузить();
	ТаблицаФинансы.Колонки.Добавить("ГуидРег");
	
	ТекстЗапроса="ВЫБРАТЬ
|	ХозрасчетныйОбороты.Счет.Код КАК СчетБух,
|	ВЫБОР
|		КОГДА ХозрасчетныйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
|		ИНАЧЕ ВЫБОР
|				КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01)
|					ТОГДА &СтатьяЗатратАмортизация
|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка))
|			КОНЕЦ
|	КОНЕЦ КАК СтатьяЗатратСсылка,
|	ВЫБОР
|		КОГДА ХозрасчетныйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
|			ТОГДА ВЫБОР
|					КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
|						ТОГДА ""Себестоимость""
|					ИНАЧЕ """"
|				КОНЕЦ
|		ИНАЧЕ ВЫБОР
|				КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01)
|					ТОГДА ""Амортизация""
|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1.Наименование, """")
|			КОНЕЦ
|	КОНЕЦ КАК СтатьяЗатрат,
|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК БухСуммаОборотДт,
|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК БухСуммаОборотКт,
|	ХозрасчетныйОбороты.Организация.ИНН КАК ОрганизацияИНН,
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор) КАК РегистраторБух,
|	ХозрасчетныйОбороты.Регистратор КАК РегистраторСсылка,
|	ХозрасчетныйОбороты.КорСчет
|ПОМЕСТИТЬ Сводная
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.Обороты(
|			&НачалоПериода,
|			&КонецПериода,
|			Регистратор,
|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаПродажу))
|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы)
|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД),
|			,
|			Организация = &Организация,
|			НЕ КорСчет В ИЕРАРХИИ (&СписокИсключаемыхСчетов),
|			) КАК ХозрасчетныйОбороты
|ГДЕ
|	НЕ ВЫБОР
|				КОГДА ХозрасчетныйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
|					ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
|				ИНАЧЕ ВЫБОР
|						КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01)
|							ТОГДА &СтатьяЗатратАмортизация
|						ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка))
|					КОНЕЦ
|			КОНЕЦ В (&СписокИсключаемыхСтатей)

|СГРУППИРОВАТЬ ПО
|	ХозрасчетныйОбороты.Счет.Код,
|	ВЫБОР
|		КОГДА ХозрасчетныйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
|		ИНАЧЕ ВЫБОР
|				КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01)
|					ТОГДА &СтатьяЗатратАмортизация
|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка))
|			КОНЕЦ
|	КОНЕЦ,
|	ВЫБОР
|		КОГДА ХозрасчетныйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
|			ТОГДА ВЫБОР
|					КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
|						ТОГДА ""Себестоимость""
|					ИНАЧЕ """"
|				КОНЕЦ
|		ИНАЧЕ ВЫБОР
|				КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01)
|					ТОГДА ""Амортизация""
|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1.Наименование, """")
|			КОНЕЦ
|	КОНЕЦ,
|	ХозрасчетныйОбороты.Организация.ИНН,
|	ХозрасчетныйОбороты.КорСчет,
|	ХозрасчетныйОбороты.Регистратор
|;

|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Сводная.СчетБух,
|	Сводная.СтатьяЗатратСсылка,
|	Сводная.СтатьяЗатрат,
|	СУММА(Сводная.БухСуммаОборотДт) КАК БухСуммаОборотДт,
|	СУММА(Сводная.БухСуммаОборотКт) КАК БухСуммаОборотКт,
|	Сводная.ОрганизацияИНН,
|	Сводная.РегистраторБух,
|	Сводная.РегистраторСсылка,
|	ПРЕДСТАВЛЕНИЕ(Сводная.КорСчет) КАК КорСчетБух,
|	ВЫБОР КОГДА Сводная.РегистраторСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК ЭтоПТУ
|ИЗ
|	Сводная КАК Сводная

|СГРУППИРОВАТЬ ПО
|	Сводная.СчетБух,
|	Сводная.СтатьяЗатратСсылка,
|	Сводная.СтатьяЗатрат,
|	Сводная.ОрганизацияИНН,
|	Сводная.РегистраторБух,
|	Сводная.РегистраторСсылка,
|	ВЫБОР КОГДА Сводная.РегистраторСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг ТОГДА 1 ИНАЧЕ 0 КОНЕЦ,
|	ПРЕДСТАВЛЕНИЕ(Сводная.КорСчет)";
	
	Запрос.Текст=ТекстЗапроса;
	
	МассивИсключаемыхСчетов = v82.NewObject("Массив");
	//МассивИсключаемыхСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	МассивИсключаемыхСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.Продажи);
	
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетов", МассивИсключаемыхСчетов);	
	Запрос.УстановитьПараметр("СтатьяЗатратАмортизация", v82.Справочники.СтатьиЗатрат.НайтиПоКоду("000000004"));
	Запрос.УстановитьПараметр("СписокИсключаемыхСтатей", ПолучитьСписокИсключаемыхСтатейБух(v82));
	Запрос.УстановитьПараметр("Организация", v82.Справочники.Организации.НайтиПоРеквизиту("ИНН", Организация.ИНН));
			
	Выборка=Запрос.Выполнить().Выбрать();	
	ТаблицаСчетовБух = ПолучитьТаблицуСчетовБух();
	
	ДанныеБух = ДанныеБух_удалить.Выгрузить(, "СтатьяЗатрат,БухСуммаОборотДт,БухСуммаОборотКт,ОрганизацияИНН,РегистраторБух,Гуид,ГуидРег,СчетБух,Обработан,КорСчетБух");
		
	Пока Выборка.Следующий() Цикл
		НС=ДанныеБух.Добавить();
		НС.СтатьяЗатрат = СокрЛП(Выборка.СтатьяЗатрат);
		НС.БухСуммаОборотДт = Выборка.БухСуммаОборотДт;
		НС.БухСуммаОборотКт = Выборка.БухСуммаОборотКт;
		НС.ОрганизацияИНН = Выборка.ОрганизацияИНН;
		НС.РегистраторБух = Выборка.РегистраторБух;
		НС.ГУИД = v82.XMLСтрока(Выборка.СтатьяЗатратСсылка);		
		Нс.ГуидРег = ?(Выборка.ЭтоПТУ, "", v82.XMLСтрока(Выборка.РегистраторСсылка));		
		НС.КорСчетБух = Выборка.КорСчетБух;
		
		НайдСтр = ТаблицаСчетовБух.Найти(Выборка.СчетБух, "Код");
		Если НайдСтр = Неопределено Тогда
			СчетБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Выборка.СчетБух);
		Иначе
			СчетБух = НайдСтр.Ссылка;
		КонецЕсли;	
		
		НС.СчетБух = СчетБух;

	КонецЦикла;
	
	ДанныеБух.Индексы.Добавить("ГуидРег,Гуид");
	ДанныеБух.Индексы.Добавить("СтатьяЗатрат,ГуидРег");
		
	СводнаяТаблица = Новый ТаблицаЗначений;	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиДоходовРасходов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиТовародвижения"));
	ТипыСЗ = Новый ОписаниеТипов(МассивТипов);
	
	СводнаяТаблица.Колонки.Добавить("СтатьяЗатратФин", ТипыСЗ);
	СводнаяТаблица.Колонки.Добавить("СтатьяЗатратБухПоДаннымФин");
	СводнаяТаблица.Колонки.Добавить("СопоставимыеНесопоставимыеРасходы");
	СводнаяТаблица.Колонки.Добавить("СтатьяЗатрат");
	СводнаяТаблица.Колонки.Добавить("СчетФин");
	СводнаяТаблица.Колонки.Добавить("КорСчетФин");
	СводнаяТаблица.Колонки.Добавить("Регистратор");
	СводнаяТаблица.Колонки.Добавить("РегистраторБух");
	СводнаяТаблица.Колонки.Добавить("БухСуммаОборотДт");	
	СводнаяТаблица.Колонки.Добавить("БухСуммаОборотКт");	
	СводнаяТаблица.Колонки.Добавить("СчетБух");
	СводнаяТаблица.Колонки.Добавить("КорСчетБух");
	СводнаяТаблица.Колонки.Добавить("Организация");
	//
	СводнаяТаблица.Колонки.Добавить("ФинСуммаОборотДт");	
	СводнаяТаблица.Колонки.Добавить("ФинСуммаОборотКт");	
	
	ТЗСоот = Новый ТаблицаЗначений;
	ТзСоот.Колонки.Добавить("СтатьяЗатрат");	
	ТзСоот.Колонки.Добавить("ГуидРег");
	ТЗСоот.Колонки.Добавить("НайдСтр");
	
	ТзСоот900201 = Новый ТаблицаЗначений;
	ТзСоот900201.Колонки.Добавить("НайдСтр");	
	ТзСоот900201.Колонки.Добавить("ГуидРег");
	
	СтатСебест = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("afe53011-e939-11e0-b470-001517297ae2")); //Себестоимость проданного товара
	СтатВП = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("299da103-ac75-11e4-b92d-005056a00106")); //Себестоимость возвратов от покупателей	
	
	Для Каждого Стр Из ТаблицаФинансы Цикл		
		
		Попытка
			Стр.ГуидРег = ?(Стр.Регистратор.Ссылка.Пустая(), "", Строка(Стр.Регистратор.УникальныйИдентификатор()));			
		Исключение
			//Сообщить(Стр.Регистратор);
			Стр.ГуидРег = "";
		КонецПопытки;
		
		НовСтр = СводнаяТаблица.Добавить();
		НовСтр.БухСуммаОборотДТ = 0;
		НовСтр.БухСуммаОборотКт = 0;
		
		НовСтр.Организация = Организация; //СоответствиеОрганизаций.Получить(Стр.ОрганизацияИНН);
			
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			
		НовСтр.СтатьяЗатратБухПоДаннымФин = Стр.СтатьяЗатрат;
			
		НовСтр.СтатьяЗатрат = "";
		НайдСтр = Неопределено;
		
		// Статьи:
		// себестоимость проданного товара; себестоимость возвратов от покупателей
		Если Стр.СтатьяЗатратФин = СтатСебест
			ИЛИ Стр.СтатьяЗатратФин = СтатВП Тогда
			
			НовСтр.СтатьяЗатратБухПоДаннымФин = Справочники.СтатьиЗатратБУ.ПустаяСсылка();			
			
			//поиск статьи из бух		
			//НайдСтрСоответствие = ТзСоот900201.Найти(Стр.ОрганизацияИНН, "ОрганизацияИНН");
			
			СтруктураПоиска = Новый Структура;			
			СтруктураПоиска.Вставить("ГуидРег", Стр.ГуидРег);
			
			НайдСтрокиСоответствие = ТзСоот900201.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтрокиСоответствие.Количество() Тогда
				НайдСтрСоответствие = НайдСтрокиСоответствие[0];
			Иначе
				НайдСтрСоответствие = Неопределено;
			КонецЕсли;
			
			Если НайдСтрСоответствие = Неопределено Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СчетБух", ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД); //90.02.1				
				СтруктураПоиска.Вставить("ГуидРег", Стр.ГуидРег);
				
				НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() <> 0 Тогда
					
					НайдСтр = НайдСтроки[0];
										
				Иначе
					
					НайдСтр = Неопределено;
					
				КонецЕсли;				
				
				Если НЕ НайдСтр = Неопределено Тогда
					НовСтрСоот = ТзСоот900201.Добавить();					
					НовСтрСоот.ГуидРег = Стр.ГуидРег;
					НовСтрСоот.НайдСтр = НайдСтр;					
				КонецЕсли;
				
				ПолученоИзТаблицы = Ложь;
				
			Иначе
				
				НайдСтр = НайдСтрСоответствие.НайдСтр;				
				ПолученоИзТаблицы = Истина;				
				
			КонецЕсли;		
			
			Если НайдСтр <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НовСтр, НайдСтр);
				НайдСтр.Обработан = Истина;
				
				Если ПолученоИзТаблицы Тогда
					НовСтр.БухСуммаОборотДт = 0;
					НовСтр.БухСуммаОборотКт = 0;
					НовСтр.СчетБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				КонецЕсли;	
				
			КонецЕсли;			

		Иначе		
			
			НайдСтрСоответствие = Неопределено;
			
			//поиск статьи из бух		
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СтатьяЗатрат", Стр.СтатьяЗатрат);			
			СтруктураПоиска.Вставить("ГуидРег", Стр.ГуидРег);
			
			НайдСтрокиСоответствие = ТзСоот.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтрокиСоответствие.Количество() Тогда			
				НайдСтрСоответствие = НайдСтрокиСоответствие[0];				
			КонецЕсли;
			
			Если НайдСтрСоответствие = Неопределено Тогда
			
				Если ЗначениеЗаполнено(Стр.СтатьяЗатрат) Тогда
					
					НайдСтр = Неопределено;
					
					СтруктураПоиска = Новый Структура;					
					СтруктураПоиска.Вставить("ГУИД", Строка(Стр.СтатьяЗатрат.УникальныйИдентификатор()));
					СтруктураПоиска.Вставить("ГуидРег", Стр.ГуидРег);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Если НАйдСтроки.Количество() Тогда					
						НайдСтр = НайдСтроки[0];						
					КонецЕсли;
			
					// гуид
					Если НайдСтр = Неопределено Тогда
						
						СтруктураПоиска.Удалить("ГУИД");
						СтруктураПоиска.Вставить("СтатьяЗатрат", СокрЛП(Стр.СтатьяЗатрат));
						
						НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
						Если НайдСтроки.Количество() Тогда
							НайдСтр = НайдСтроки[0];							
						КонецЕсли;						
						
					КонецЕсли;
				
				Иначе
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("СтатьяЗатрат", "");					
					СтруктураПоиска.Вставить("ГуидРег", Стр.ГуидРег);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Для Каждого НСтр Из НайдСтроки Цикл
						Если НСтр.СчетБух <> ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1") Тогда
							НайдСтр = НСтр;							
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ НайдСтр = Неопределено Тогда
					НовСтрСоот = ТЗСоот.Добавить();
					НовСтрСоот.СтатьяЗатрат = Стр.СтатьяЗатрат;
					НовСтрСоот.НайдСтр = НайдСтр;					
					НовСтрСоот.ГуидРег = Стр.ГуидРег;					
				КонецЕсли;
				
				ПолученоИзТаблицы = Ложь;
				
			Иначе
				
				НайдСтр = НайдСтрСоответствие.НайдСтр;
				ПолученоИзТаблицы = Истина;				
				
			КонецЕсли;		
			
			Если НайдСтр <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НовСтр, НайдСтр);
				НайдСтр.Обработан = Истина;
					
				Если ПолученоИзТаблицы Тогда
					НовСтр.БухСуммаОборотДт = 0;
					НовСтр.БухСуммаОборотКт = 0;
					НовСтр.СчетБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					НовСтр.РегистраторБух = "";
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из ДанныеБух Цикл
		
		Если НЕ Стр.Обработан Тогда
			НовСтр = СводнаяТаблица.Добавить();
			ЗаполнитьЗначениясвойств(НовСтр, Стр);
			//
			НовСтр.СчетФин = ПланыСчетов.Финансовый.ПустаяСсылка();
			НовСтр.СтатьяЗатратФин = Справочники.СтатьиДоходовРасходов.ПустаяСсылка();
			НовСтр.ФинСуммаОборотДт = 0;
			НовСтр.ФинСуммаОборотКт = 0;
			
			НовСтр.Организация = Организация; 
			
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеСтатьейЗатрат = ПолучитьСоответствиеСтатейЗатрат();
	
	ДЛя Каждого Стр Из СводнаяТаблица Цикл
		Если ЗначениеЗаполнено(Стр.СтатьяЗатратФин) И ЗначениеЗаполнено(Стр.СчетБух) Тогда
			
			НайдСтроки = СводнаяТаблица.НайтиСтроки(Новый Структура("СтатьяЗатратФин", Стр.СтатьяЗатратФин));
		
			Для Каждого НСтр Из НайдСтроки Цикл
				Если НЕ ЗначениеЗаполнено(НСтр.СчетБух) Тогда
					НСтр.СчетБух = Стр.СчетБух;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Стр.СчетФин = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения Тогда
			Если Стр.СтатьяЗатратФин = СтатСебест // Себестоимость Возвратов от покупателей
				ИЛИ Стр.СтатьяЗатратФин = СтатВП Тогда //Себестоимость проданного товара
				Стр.СтатьяЗатрат = "Себестоимость";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.СтатьяЗатрат) Тогда
			Стр.СтатьяЗатрат = ПолучитьСтатьюЗатратБухИзСоответствия(Стр.СтатьяЗатратФин, СоответствиеСтатьейЗатрат, Стр.КорСчетФин);
		ИначеЕсли Стр.СтатьяЗатратФин.Код = "20610" ИЛИ Стр.СтатьяЗатратФин.Код = "36198"  Тогда //Промо на точке (в магазине), Командировочные расходы
			Стр.СтатьяЗатрат = ПолучитьСтатьюЗатратБухИзСоответствия(Стр.СтатьяЗатратФин, СоответствиеСтатьейЗатрат, Стр.КорСчетФин);
		КонецЕсли;
						
		Если Стр.СтатьяЗатрат = "Амортизация" И ?(Стр.СчетФин <> Неопределено И ТипЗнч(Стр.СчетФин) = Тип("ПланСчетовСсылка.Финансовый") И Стр.СчетФин <> ПланыСчетов.Финансовый.ПустаяСсылка(), Стр.СчетФин.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения), Ложь) И ?(Стр.КорСчетФин <> Неопределено И ТипЗнч(Стр.КорСчетФин) = Тип("ПланСчетовСсылка.Финансовый") И Стр.КорСчетФин <> ПланыСчетов.Финансовый.ПустаяСсылка(), Стр.КорСчетФин.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы), Ложь) Тогда
			Стр.СтатьяЗатрат = "Материальные расходы";
		КонецЕсли;
		
	КонецЦикла;		
		
	Для Каждого Стр Из СводнаяТаблица Цикл
		Если Стр.КорСчетБух = "05" Тогда
			Стр.СопоставимыеНесопоставимыеРасходы = "2. Не сопоставимые";
		ИначеЕсли Стр.СтатьяЗатрат = "Оплата труда" И Стр.КорСчетФин = ПланыСчетов.Финансовый.ЗаймыФизЛиц Тогда //58.1
			Стр.СопоставимыеНесопоставимыеРасходы = "2. Не сопоставимые";
		ИначеЕсли Стр.СтатьяЗатрат = "Амортизация" И ?(Стр.СчетФин <> Неопределено И ТипЗнч(Стр.СчетФин) = Тип("ПланСчетовСсылка.Финансовый") И Стр.СчетФин <> ПланыСчетов.Финансовый.ПустаяСсылка(), Стр.СчетФин.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения), Ложь) И ?(Стр.КорСчетФин <> Неопределено И ТипЗнч(Стр.КорСчетФин) = Тип("ПланСчетовСсылка.Финансовый") И Стр.КорСчетФин <> ПланыСчетов.Финансовый.ПустаяСсылка(), НЕ Стр.КорСчетФин.ПринадлежитЭлементу(ПланыСчетов.Финансовый.НайтиПоКоду("02")), Ложь) Тогда			
			Стр.СопоставимыеНесопоставимыеРасходы = "2. Не сопоставимые";
		ИначеЕсли Стр.СтатьяЗатрат = "Амортизационная премия" И ?(Стр.СчетФин <> Неопределено И ТипЗнч(Стр.СчетФин) = Тип("ПланСчетовСсылка.Финансовый") И Стр.СчетФин <> ПланыСчетов.Финансовый.ПустаяСсылка(), Стр.СчетФин.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения), Ложь) И ?(Стр.КорСчетФин <> Неопределено И ТипЗнч(Стр.КорСчетФин) = Тип("ПланСчетовСсылка.Финансовый") И Стр.КорСчетФин <> ПланыСчетов.Финансовый.ПустаяСсылка(), Стр.КорСчетФин.Код = "60.ВГ", Ложь) Тогда
			Стр.СопоставимыеНесопоставимыеРасходы = "2. Не сопоставимые";
		Иначе
			Стр.СопоставимыеНесопоставимыеРасходы = "1. Сопоставимые";
		КонецЕсли;		
	КонецЦикла;

	Возврат СводнаяТаблица;
	
КонецФункции

//////////////////////////////////////////////////////////////////////

Функция ВернутьСчетаПродажи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Финансовый.Ссылка
	               |ИЗ
	               |	ПланСчетов.Финансовый КАК Финансовый
	               |ГДЕ
	               |	Финансовый.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Продажи)
	               |	И Финансовый.Код <> ""90.5""";
	
	СписокСчетов = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокСчетов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокСчетов;	
	
КонецФункции

Функция ПолучитьСоответствиеСтатейЗатрат()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеСтатейДРСтатьямБУ.Статья,
	               |	ВЫБОР
	               |		КОГДА СоответствиеСтатейДРСтатьямБУ.Статья = &СтатьяПромо
	               |				ИЛИ СоответствиеСтатейДРСтатьямБУ.Статья = &СтатьяКомандировочные
	               |			ТОГДА &СтатьяСтраховые
	               |		ИНАЧЕ СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	               |	КОНЕЦ КАК СтатьяБУ,
	               |	СоответствиеСтатейДРСтатьямБУ.КорСчет
	               |ИЗ
	               |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоответствиеСтатейДРСтатьямБУ.Статья,
	               |	ВЫБОР
	               |		КОГДА СоответствиеСтатейДРСтатьямБУ.Статья = &СтатьяПромо
	               |				ИЛИ СоответствиеСтатейДРСтатьямБУ.Статья = &СтатьяКомандировочные
	               |			ТОГДА &СтатьяСтраховые
	               |		ИНАЧЕ СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	               |	КОНЕЦ,
	               |	СоответствиеСтатейДРСтатьямБУ.КорСчет";
	
	Запрос.УстановитьПараметр("СтатьяПромо", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20610")); //Промо на точке (в магазине)
	Запрос.УстановитьПараметр("СтатьяКомандировочные", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("36198")); //Комадировочные расходы
	Запрос.УстановитьПараметр("СтатьяСтраховые", Справочники.СтатьиЗатратБУ.НайтиПоКоду("000000023")); //страховые взносы
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ПолучитьСтатьюЗатратБухИзСоответствия(СтатьяЗатратФин, ТаблицаСоответствия, КорСчет)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Статья", СтатьяЗатратФин);
	СтруктураПоиска.Вставить("КорСчет", КорСчет);
	
	НайдСтроки = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
	
	Если НайдСтроки.Количество() Тогда
		НайдСтр = НайдСтроки[0];
	Иначе
		СтруктураПоиска.Вставить("КорСчет", ПланыСчетов.Финансовый.ПустаяСсылка());
		
		НайдСтроки = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
		
		Если НайдСтроки.Количество() Тогда
			НайдСтр = НайдСтроки[0];
		Иначе
			НайдСтр = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ НайдСтр = Неопределено Тогда
		Возврат Строка(НайдСтр.СтатьяБУ);
	КонецЕсли;
	
	Возврат "";	
	
КонецФункции

Функция ПолучитьСписокИсключаемыхСтатейБух(Соединение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	               |ИЗ
	               |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	               |ГДЕ
	               |	СоответствиеСтатейДРСтатьямБУ.ТоварнаяСтатья";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСтатей = Соединение.NewObject("Массив");
	
	МДПдр = Соединение.XMLTypeOf(Соединение.Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка());
	МДСз = Соединение.XMLTypeOf(Соединение.Справочники.СтатьиЗатрат.ПустаяСсылка());
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.СтатьяБУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходыБУ") Тогда			
			СсылкаБух	= Соединение.XMLValue(Соединение.FromXMLType(МДПдр),Строка(Выборка.СтатьяБУ.УникальныйИдентификатор()));
		Иначе
			СсылкаБух	= Соединение.XMLValue(Соединение.FromXMLType(МДСз),Строка(Выборка.СтатьяБУ.УникальныйИдентификатор()));
		КонецЕсли;
		
		МассивСтатей.Добавить(СсылкаБух);
		
	КонецЦикла;
	
	Возврат МассивСтатей;	
	
КонецФункции

Функция ПолучитьТаблицуСчетовБух()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Хозрасчетный.Код,
	                |	Хозрасчетный.Ссылка
	                |ИЗ
	                |	ПланСчетов.Хозрасчетный КАК Хозрасчетный";
	
	Тз = Запрос.Выполнить().Выгрузить();	
	Тз.Индексы.Добавить("Код");
	
	Возврат Тз;
	
КонецФункции
	
Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетамиИнфоком.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);

