////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
//

Перем СоответствиеНастройкаРезультат Экспорт; // Соответствие, в котором хранятся все результаты при текущем открытии отчета
Перем ПредставлениеНастройки Экспорт;         // Представление настройки при редактировании отдельной настройки
Перем ПанельНастроекНарисована;               // Флаг, означающий что панель настроек после открытия нарисована
Перем ДействияЭлементовФормы Экспорт;         // Структура, содеражащая действия элементов формы, формируемых программно

// ДЕЙСТВИЯ С РЕЗУЛЬТАТОМ

Процедура ДействияСРезультатомПечатьНажатие(Элемент)
	
	ИнфокомТиповыеОтчеты.ПечатьТиповогоОтчета(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомВывестиКопиюРезультатаВТабличныйДокумент(Кнопка)

	ИнфокомТиповыеОтчеты.ПоказатьКопиюРезультата(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомСохранитьРезультатВНастройке(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьРезультатВНастройке(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомСравнитьТекущийРезультатССохраненным(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьРезультатССохраненным(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомЗаголовок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ИнфокомТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, ЭтаФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры

// ОБЩИЕ ПРОЦЕДУРЫ

Процедура ОбновитьОтчет() Экспорт
	
	СостояниеМодифицированности = Модифицированность;
	Если ПанельНастроекНарисована <> Истина Тогда
		ОбновлениеОтображения();
	КонецЕсли;
	ИнфокомТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ЭтотОбъект, ЭтаФорма);
	ПараметрыПанели  = ИнфокомТиповыеОтчеты.ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ИнфокомТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	// Установка Динамических отборов
	Отказ = ложь;
	Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры") тогда
		Если ПараметрыПанели.Параметры.Колонки.Найти("Заполнено") <> Неопределено тогда
			СтрокиПарамтеровДляПроверки = ПараметрыПанели.Параметры.НайтиСтроки(Новый Структура("Заполнено", истина));
			Если СтрокиПарамтеровДляПроверки.Количество() > 0 тогда
				СтрокаПредупреждения = "Не заполнен(а)";
				Для каждого СтрокаПараметра Из СтрокиПарамтеровДляПроверки Цикл
					ЗначениеПараметра = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметра.Параметр];
					Если ЗначениеПараметра = Неопределено или Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) ИЛИ Не ЗначениеПараметра.Использование Тогда
						СтрокаПредупреждения = СтрокаПредупреждения + " " + СтрокаПараметра.Представление;
						Отказ = истина;
					КонецЕсли;
				КонецЦикла;
				Если Отказ тогда
					СтрокаПредупреждения = СтрокаПредупреждения + "!";
					Предупреждение(СтрокаПредупреждения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	СформироватьОтчет(ЭлементыФормы.Результат, ДанныеРасшифровки);
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ЭлементыФормы.Результат, Заголовок, Строка(ПараметрыСеанса.ТекущийПользователь));
	Модифицированность = СостояниеМодифицированности;
КонецПроцедуры

// ОБРАБОТЧИКИ КНОПОК ФОРМЫ

Процедура ДействияФормыСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройку(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьТекущуюНастройку(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройкуКак(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьТекущуюНастройкуКак(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаСписокВариантовНажатие(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, ИнфокомТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект), Ложь);
	
	Если Не РежимРедактированияНастройки Тогда
		ИнфокомТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
		ИнфокомТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНастройкуСтруктуры(Кнопка)
	РезультатРедактирования = ИнфокомТиповыеОтчеты.РедактироватьСтруктуруОтчета(ЭтотОбъект, ЭтаФорма);
	Если РезультатРедактирования Тогда
		ОбновитьОтчет();
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыРедактироватьПанельПользователя(Кнопка)
	
	ИнфокомТиповыеОтчеты.РедактироватьПанельПользователя(ЭтотОбъект, ЭтаФорма);
		
КонецПроцедуры

Процедура ДействияФормыРедактироватьОписаниеИПользователей(Кнопка)
	
	ИнфокомТиповыеОтчеты.ОткрытьФормуСохраненнойНастройки(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельВариантов(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

// ОБРАБОТЧИКИ ФОРМЫ

Процедура ПриОткрытии()
	
	// Реквизит формы и компоновщик отчета ссылаются на один компоновщик
	КомпоновщикНастроек = ЭтотОбъект.КомпоновщикНастроек;
	
	ИнфокомТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
	ИнфокомТиповыеОтчеты.УстановитьВариантПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	
	// Нарисуем кнопки выбора настроек на верхней панели
	ИнфокомТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	ИнфокомТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УстановитьВидимостьПанелиВариантовПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УстановитьВидимостьПанелиПользователяПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.ВосстановитьНастройкиФормыОтчета(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
	//ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Проект");
	//ПараметрДанных.Использование = Истина;
	//
	//Если ПараметрДанных.Значение = Перечисления.ТипыРозничныхТочек.Магазин Тогда
	//	Проект = 1;
	//ИначеЕсли ПараметрДанных.Значение = Перечисления.ТипыРозничныхТочек.Избенка Тогда
	//	Проект = 2;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения() Экспорт
	
	Если ПанельНастроекНарисована <> Истина И Не Модифицированность Тогда
		
		// Инициализация компоновщиков настроек и, если необходимо, загрузка настроек по умолчанию
		ЗагружатьНастройкиПоУмолчанию = Не РежимРедактированияНастройки И Не ЭтоОтработкаРасшифровки И СохраненнаяНастройка.Пустая();
		Схема = ИнфокомТиповыеОтчеты.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, , ЗагружатьНастройкиПоУмолчанию);
		КомпоновщикНастроекПользователя.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		
		Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки Тогда
			ПрименитьНастройку();
			ИнфокомТиповыеОтчеты.ПрименитьНастройкуПользователяНастройкиОтчета(ЭтотОбъект);
			ИнфокомТиповыеОтчеты.ОбработкаФормыПослеПримененияНастройки(ЭтотОбъект, ЭтаФорма);
		Иначе
			// Отработаем изменение отображение панели настроек
			ИнфокомТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
			ИнфокомТиповыеОтчеты.ПерерисоватьПанельНастроек(ЭтотОбъект, ЭтаФорма, );
			
		КонецЕсли;
		
		ПанельНастроекНарисована = Истина;
		
	КонецЕсли;
	ИнфокомТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	
	ЭлементыФормы.ПараметрыДанных.Верх = 19; //ЭлементыФормы.ПараметрыДанных.Верх - 4;
	ЭлементыФормы.ПараметрыДанных.Высота = 79; //ЭлементыФормы.ПараметрыДанных.Высота + 8;
	
	НачалоВыбораОтбор();
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ИнфокомТиповыеОтчеты.ОбработкаВыбораФормыОтчета(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора, Источник);
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;	
		
КонецПроцедуры

Процедура КорректироватьРесурсВЗапросе(ТекстЗапроса,Ресурс)
	
	Если Ресурс = "Сумма" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Ресурс = "СуммаКорр" ИЛИ Ресурс = "СуммаМСФО") Тогда
		Возврат;			
	КонецЕсли;	
	
	Если Ресурс = "СуммаКорр" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ФинансовыйОбороты.СуммаОборот","ФинансовыйОбороты.СуммаМСФООборот");
	КонецЕсли;	
	
	Если  Ресурс = "СуммаМСФО" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ФинансовыйОбороты.СуммаОборотДт","(ФинансовыйОбороты.СуммаМСФООборотДт + ФинансовыйОбороты.1СуммаОборотДт)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ФинансовыйОбороты.СуммаОборотКт","(ФинансовыйОбороты.СуммаМСФООборотКт + ФинансовыйОбороты.1СуммаОборотКт)");		
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ФинансовыйОбороты.СуммаОборот","(ФинансовыйОбороты.СуммаМСФООборот + ФинансовыйОбороты.СуммаОборот)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ФинансовыйОбороты.1СуммаОборот","ФинансовыйОбороты.СуммаОборот");
    КонецЕсли;
		
		
КонецПроцедуры	

Функция ДатаРасшифровки(НомерМесяца, НомерГода)
	Если НомерМесяца = 1 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0101");
	ИначеЕсли НомерМесяца = 2 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0201");
	ИначеЕсли НомерМесяца = 3 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0301");
	ИначеЕсли НомерМесяца = 4 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0401");
	ИначеЕсли НомерМесяца = 5 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0501");
	ИначеЕсли НомерМесяца = 6 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0601");
	ИначеЕсли НомерМесяца = 7 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0701");
	ИначеЕсли НомерМесяца = 8 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0801");
	ИначеЕсли НомерМесяца = 9 Тогда 
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "0901");
	ИначеЕсли НомерМесяца = 10 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "1001");
	ИначеЕсли НомерМесяца = 11 Тогда
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "1101");
	ИначеЕсли НомерМесяца = 12 Тогда 
		Возврат Дата(Формат(НомерГода, "ЧГ=0") + "1201");
	КонецЕсли;

КонецФункции

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если РежимРедактированияНастройки Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИнфокомТиповыеОтчеты.ОбработкаЗакрытияНастройкиОтчета(ЭтотОбъект, ЭтаФорма, Отказ, СтандартнаяОбработка);
	Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки Тогда
		ИнфокомТиповыеОтчеты.СохранитьПоследнююИспользуемуюНастройку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ НА ПАНЕЛИ

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.ОтображатьКартинку = Ложь;
	
КонецПроцедуры

Процедура ОбработкаНажатияКнопкиСохраненнойНастройки(Элемент)
	
	ИнфокомТиповыеОтчеты.ВыборВариантаОтчетаНаПанелиВариантов(ЭтотОбъект, ЭтаФорма, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСохранитьСписок(Элемент)
	
	ИнфокомТиповыеОтчеты.СохранитьСписокВТабличномПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиЗагрузитьСписок(Элемент)
	
	ИнфокомТиповыеОтчеты.ЗагрузитьСписокВТабличноеПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСтандартныйПериодПользователяПриИзменении(Элемент)
	
	СтандартныйПериод.Вариант = Элемент.Значение;
	
КонецПроцедуры

Процедура ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении(Элемент)
	
	СтандартнаяДатаНачала.Вариант = Элемент.Значение;
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартногоПериодаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартнаяДатаНачалаПользователя.Значение = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
	
КонецПроцедуры

Процедура ДействияПанелиИзменениеЗначенияДинамическогоОтбора(Элемент)
	
	ИнфокомТиповыеОтчеты.ОбработкаИзмененияЗначенияДинамическогоОтбора(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиОкончаниеРедактированиеТабличногоПоля(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИнфокомТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиУдалениеСтрокиТабличногоПоля(Элемент)
	
	ИнфокомТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры
                                                              
Процедура ДействияПанелиКнопкаПодборНажатие(Элемент)
	Отбор = ИнфокомТиповыеОтчеты.ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, Элемент);
	Если Отбор.СтрокаОтбора.Поле = "ДанныеОРаботнике.ПодразделениеОрганизации" тогда
		Отбор = ИнфокомТиповыеОтчеты.ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, "ДанныеОРаботнике.ОбособленноеПодразделение");
		//Параметр = ИнфокомТиповыеОтчеты.ПолучитьПараметрИзФормы(ОтчетОбъект, ЭтаФорма, "РежимОтчета");
		ЗначениеВладельца = Отбор.Значение;
	КонецЕсли;
	ИнфокомТиповыеОтчеты.ОбработкаНажатияКнопкиПодбор(ЭтотОбъект, ЭтаФорма, Элемент, ЗначениеВладельца);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ПослеВыводаПанелиПользователя(ЗначениеНастроек) Экспорт
	
КонецПроцедуры

Процедура ПриПолучениеНастроекПользователя(ЗначенияНастроек) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаПериода(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаПараметра(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаГруппировки(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаОтбора(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуВверх(Кнопка)
	ИнфокомТиповыеОтчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
КонецПроцедуры

Процедура ПриНажатииНаКнопкуВниз(Кнопка)
	ИнфокомТиповыеОтчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ИнфокомТиповыеОтчеты.СохранитьНастройкиФормыОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ГруппировкиПриПолученииДанных(Элемент, ОформленияСтрок)
	ИнфокомТиповыеОтчеты.ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок);
КонецПроцедуры

Процедура ДействияПанелиДинамическийОтборПериодВыборПриИзменении(Элемент)
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборПриИзменении(ЭтаФорма, Элемент)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) 
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборОчистка(Элемент, СтандартнаяОбработка) 
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка) 
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекстаОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка)
	
КонецПроцедуры	

Процедура НадписьПредупреждениеНажатие(Элемент)
	
	
КонецПроцедуры

Функция МассивСтатейАмортизация()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиДоходовРасходов.Ссылка
		|ИЗ
		|	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
		|ГДЕ
		|	СтатьиДоходовРасходов.Ссылка В ИЕРАРХИИ (&Ссылка)";

	Запрос.УстановитьПараметр("Ссылка", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("610"));

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;

КонецФункции	

Процедура СкопироватьОтборКомпоновщика(ОтборПриемник,ОтборИсточник)
	
	Для каждого Элемент из ОтборИсточник.Элементы Цикл
		
		Если не Элемент.Использование Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			НовыйЭлемент = ОтборПриемник.Добавить(Элемент.ЛевоеЗначение);
			ЗаполнитьОтборПоОтборуКомпоновщика(НовыйЭлемент,Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлемент =ОтборПриемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
		   	СкопироватьОтборКомпоновщика(НовыйЭлемент,Элемент.Элементы);
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьОтборПоОтборуКомпоновщика(Отбор, ОтборКомпоновщика) Экспорт
    
    ЗаполнитьЗначенияСвойств(Отбор, ОтборКомпоновщика, "Использование, Представление");
    
    Если ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
        Отбор.ВидСравнения = ВидСравнения.Больше;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
        Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.ВИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
        Отбор.ВидСравнения = ВидСравнения.ВСписке;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
        Отбор.ВидСравнения = ВидСравнения.Меньше;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
        Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.НеВИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
        Отбор.ВидСравнения = ВидСравнения.НеВСписке;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
        Отбор.ВидСравнения = ВидСравнения.НеРавно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
        Отбор.ВидСравнения = ВидСравнения.НеСодержит;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
        Отбор.ВидСравнения = ВидСравнения.Равно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
        Отбор.ВидСравнения = ВидСравнения.Содержит;
    Иначе
		
		// Не нашли соответствие - не применяем отбор
        Отбор.Использование = Ложь;
        Возврат;
		
    КонецЕсли;
    
    Отбор.Значение = ОтборКомпоновщика.ПравоеЗначение;
    
КонецПроцедуры

//
Процедура НачалоВыбораОтбор() 
	
	Для Каждого Элем Из ЭлементыФормы Цикл  				
		Если Лев(Элем.Имя, 5) = "Отбор" Тогда
			Элем.УстановитьДействие("ПередНачаломИзменения", Новый Действие("ПроверкаВыбор"));
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

//
Процедура ПроверкаВыбор(Элемент, СтандартнаяОбработка)
	
	Если Элемент.ТекущаяКолонка.Имя = "ПравоеЗначениеДляКраткогоОтображенияЭлемента" И Элемент.ТекущаяСтрока.ПредставлениеПользовательскойНастройки = "Торговая точка" Тогда
		Элемент.ТекущаяКолонка.ЭлементУправления.УстановитьДействие("НачалоВыбора", Новый Действие("НачалоВыбораСтруктурныеЕдиницы"));
	КонецЕсли;
		
КонецПроцедуры

//
Процедура НачалоВыбораСтруктурныеЕдиницы(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.СтруктурныеЕдиницы.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.ТипРозничнойТочки.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ТипРозничнойТочки.ВидСравнения                        = ВидСравнения.Равно;
	ФормаВыбора.СправочникСписок.Отбор.ТипРозничнойТочки.Значение                            = Перечисления.ТипыРозничныхТочек.Вкусомат;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда 
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	КонецЕсли;
	
	СтрЕд = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(СтрЕд) Тогда 
		Элемент.Значение = СтрЕд;	
	КонецЕсли;	

КонецПроцедуры 

СоответствиеНастройкаРезультат = Новый Соответствие;

ДействияЭлементовФормы = Новый Структура;
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборПриИзменении", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборОчистка", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборОчистка"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста"));

ДействияЭлементовФормы.Вставить("ОбработкаНажатияКнопкиСохраненнойНастройки", Новый Действие("ОбработкаНажатияКнопкиСохраненнойНастройки"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСохранитьСписок", Новый Действие("ДействияПанелиСохранитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиЗагрузитьСписок", Новый Действие("ДействияПанелиЗагрузитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартныйПериодПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартныйПериодПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартногоПериодаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартногоПериодаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиИзменениеЗначенияДинамическогоОтбора", Новый Действие("ДействияПанелиИзменениеЗначенияДинамическогоОтбора"));
ДействияЭлементовФормы.Вставить("ДействияПанелиОкончаниеРедактированиеТабличногоПоля", Новый Действие("ДействияПанелиОкончаниеРедактированиеТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиУдалениеСтрокиТабличногоПоля", Новый Действие("ДействияПанелиУдалениеСтрокиТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиКнопкаПодборНажатие", Новый Действие("ДействияПанелиКнопкаПодборНажатие"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВверх", Новый Действие("ПриНажатииНаКнопкуВверх"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВниз", Новый Действие("ПриНажатииНаКнопкуВниз"));
ДействияЭлементовФормы.Вставить("ГруппировкиПриПолученииДанных", Новый Действие("ГруппировкиПриПолученииДанных"));


