////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
//

Перем СоответствиеНастройкаРезультат Экспорт; // Соответствие, в котором хранятся все результаты при текущем открытии отчета
Перем ПредставлениеНастройки Экспорт;         // Представление настройки при редактировании отдельной настройки
Перем ПанельНастроекНарисована;               // Флаг, означающий что панель настроек после открытия нарисована
Перем ДействияЭлементовФормы Экспорт;         // Структура, содеражащая действия элементов формы, формируемых программно
Перем ПДЗВСтрокеРасшифровки;

// ДЕЙСТВИЯ С РЕЗУЛЬТАТОМ

Процедура ДействияСРезультатомПечатьНажатие(Элемент)
	
	ИнфокомТиповыеОтчеты.ПечатьТиповогоОтчета(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомВывестиКопиюРезультатаВТабличныйДокумент(Кнопка)

	ИнфокомТиповыеОтчеты.ПоказатьКопиюРезультата(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомСохранитьРезультатВНастройке(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьРезультатВНастройке(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомСравнитьТекущийРезультатССохраненным(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьРезультатССохраненным(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомЗаголовок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ИнфокомТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, ЭтаФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры

// ОБЩИЕ ПРОЦЕДУРЫ

Процедура ОбновитьОтчет() Экспорт
	
	СостояниеМодифицированности = Модифицированность;
	Если ПанельНастроекНарисована <> Истина Тогда
		ОбновлениеОтображения();
	КонецЕсли;
	ИнфокомТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ЭтотОбъект, ЭтаФорма);
	ПараметрыПанели  = ИнфокомТиповыеОтчеты.ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ИнфокомТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	// Установка Динамических отборов
	Отказ = ложь;
	Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры") тогда
		Если ПараметрыПанели.Параметры.Колонки.Найти("Заполнено") <> Неопределено тогда
			СтрокиПарамтеровДляПроверки = ПараметрыПанели.Параметры.НайтиСтроки(Новый Структура("Заполнено", истина));
			Если СтрокиПарамтеровДляПроверки.Количество() > 0 тогда
				СтрокаПредупреждения = "Не заполнен(а)";
				Для каждого СтрокаПараметра Из СтрокиПарамтеровДляПроверки Цикл
					ЗначениеПараметра = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметра.Параметр];
					Если ЗначениеПараметра = Неопределено или Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) ИЛИ Не ЗначениеПараметра.Использование Тогда
						СтрокаПредупреждения = СтрокаПредупреждения + " " + СтрокаПараметра.Представление;
						Отказ = истина;
					КонецЕсли;
				КонецЦикла;
				Если Отказ тогда
					СтрокаПредупреждения = СтрокаПредупреждения + "!";
					Предупреждение(СтрокаПредупреждения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	СформироватьОтчет(ЭлементыФормы.Результат, ДанныеРасшифровки);
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ЭлементыФормы.Результат, Заголовок, Строка(ПараметрыСеанса.ТекущийПользователь));
	Модифицированность = СостояниеМодифицированности;
КонецПроцедуры

// ОБРАБОТЧИКИ КНОПОК ФОРМЫ

Процедура ДействияФормыСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройку(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьТекущуюНастройку(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройкуКак(Кнопка)
	
	ИнфокомТиповыеОтчеты.СохранитьТекущуюНастройкуКак(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаСписокВариантовНажатие(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, ИнфокомТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект), Ложь);
	
	Если Не РежимРедактированияНастройки Тогда
		ИнфокомТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
		ИнфокомТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНастройкуСтруктуры(Кнопка)
	РезультатРедактирования = ИнфокомТиповыеОтчеты.РедактироватьСтруктуруОтчета(ЭтотОбъект, ЭтаФорма);
	Если РезультатРедактирования Тогда
		ОбновитьОтчет();
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыРедактироватьПанельПользователя(Кнопка)
	
	ИнфокомТиповыеОтчеты.РедактироватьПанельПользователя(ЭтотОбъект, ЭтаФорма);
		
КонецПроцедуры

Процедура ДействияФормыРедактироватьОписаниеИПользователей(Кнопка)
	
	ИнфокомТиповыеОтчеты.ОткрытьФормуСохраненнойНастройки(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельВариантов(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

// ОБРАБОТЧИКИ ФОРМЫ

Процедура ПриОткрытии()
	
	// Реквизит формы и компоновщик отчета ссылаются на один компоновщик
	КомпоновщикНастроек = ЭтотОбъект.КомпоновщикНастроек;
	
	ИнфокомТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
	ИнфокомТиповыеОтчеты.УстановитьВариантПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	
	// Нарисуем кнопки выбора настроек на верхней панели
	ИнфокомТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	ИнфокомТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УстановитьВидимостьПанелиВариантовПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УстановитьВидимостьПанелиПользователяПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.ВосстановитьНастройкиФормыОтчета(ЭтотОбъект, ЭтаФорма);
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	ИнфокомТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбновлениеОтображения() Экспорт
	
	Если ПанельНастроекНарисована <> Истина И Не Модифицированность Тогда
		
		// Инициализация компоновщиков настроек и, если необходимо, загрузка настроек по умолчанию
		ЗагружатьНастройкиПоУмолчанию = Не РежимРедактированияНастройки И Не ЭтоОтработкаРасшифровки И СохраненнаяНастройка.Пустая();
		Схема = ИнфокомТиповыеОтчеты.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, , ЗагружатьНастройкиПоУмолчанию);
		КомпоновщикНастроекПользователя.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		
		Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки Тогда
			ПрименитьНастройку();
			ИнфокомТиповыеОтчеты.ПрименитьНастройкуПользователяНастройкиОтчета(ЭтотОбъект);
			ИнфокомТиповыеОтчеты.ОбработкаФормыПослеПримененияНастройки(ЭтотОбъект, ЭтаФорма);
			
			//mika Дата: 2017.08.11 ИП-00016419
			Попытка //○ Убрать после тестирования в рабочей базе
				ОтборСобственныхКонтрагентовДляВсехСохраненныхНастроек();
			Исключение
			КонецПопытки;
			//mika

		Иначе
			// Отработаем изменение отображение панели настроек
			ИнфокомТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
			ИнфокомТиповыеОтчеты.ПерерисоватьПанельНастроек(ЭтотОбъект, ЭтаФорма, );
			
		КонецЕсли;
		
		ПанельНастроекНарисована = Истина;
		
	КонецЕсли;
	ИнфокомТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ИнфокомТиповыеОтчеты.ОбработкаВыбораФормыОтчета(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора, Источник);
	
КонецПроцедуры


Функция ПолучитьРасшифровкуНаСервере(Расшифровка)
	//Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Данные = ДанныеРасшифровки;
	
	Строка = Расшифровка;
	ПолеКонтрагент = Неопределено;
	ПолеСчет = Неопределено;
	ПолеОрганизация = Неопределено;
	Пока Число(Строка) >=0 Цикл
		Элемент = Данные.Элементы.Получить(Строка);
		Строка = Строка-1;
		Если ТипЗнч(Элемент)<>Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Продолжить
		КонецЕсли;
		Поля = Элемент.ПолучитьПоля();
		Если ПолеКонтрагент=Неопределено Тогда
			ПолеКонтрагент = Поля.Найти("Контрагент");
		КонецЕсли;
		Если ПолеСчет=Неопределено Тогда
			ПолеСчет = Поля.Найти("Счет");
		КонецЕсли;
		Если ПолеОрганизация=Неопределено Тогда
			ПолеОрганизация = Поля.Найти("Организация");
		КонецЕсли;
		Если ПолеКонтрагент<>Неопределено и ПолеСчет <>Неопределено и ПолеОрганизация<>Неопределено Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	Значения = Новый Соответствие;
	Если ПолеКонтрагент<>Неопределено Тогда
		Значения.Вставить("Контрагент",ПолеКонтрагент.Значение);
	КонецЕсли;
	Если ПолеСчет<>Неопределено Тогда
		Значения.Вставить("Счет",ПолеСчет.Значение);
	КонецЕсли;
	Если ПолеОрганизация<>Неопределено Тогда
		Значения.Вставить("Организация",ПолеОрганизация.Значение);
	КонецЕсли;	
	Возврат Значения;
	
КонецФункции

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
    //Раков П.С. ++
	Если ТипЗнч(Расшифровка)= Тип("ИдентификаторРасшифровкиКомпоновкиДанных") и
		(ДанныеРасшифровки.Элементы[Расшифровка].получитьПоля()[0].Поле = "Комментарий") тогда
		
		СтандартнаяОбработка = ложь;     
		
		КонтрагентОтчета = ПолучитьСтруктуруЗначенийРасшифровки(ДанныеРасшифровки, Расшифровка).Получить("Контрагент");
		Если КонтрагентОтчета = Неопределено тогда
			Предупреждение("Контрагент в отчете не определен.");
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойМенеджерПокупателя) тогда
			МенеджерКонтрагента = КонтрагентОтчета.ОсновнойМенеджерПокупателя;
		Иначе
			Предупреждение("Не указан основной менеджер контрагента.");
			Возврат;
		КонецЕсли;	
		
		ДокуметКомментария = НайтиДокументКомментария(Элемент);
		
		Если ЗначениеЗаполнено(ДокуметКомментария) и ТипЗнч(МенеджерКонтрагента) = Тип("СправочникСсылка.Пользователи") тогда
			ОбработкаКомментариев(ДокуметКомментария, СтандартнаяДатаНачала, МенеджерКонтрагента, ПДЗВСтрокеРасшифровки);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТипЗнч(Расшифровка)= Тип("ИдентификаторРасшифровкиКомпоновкиДанных") и
		(ДанныеРасшифровки.Элементы[Расшифровка].получитьПоля()[0].Поле = "ПодтвержденБухгалтером") Тогда 
		
		СтандартнаяОбработка = ложь;  
		
		КонтрагентОтчета = ПолучитьСтруктуруЗначенийРасшифровки(ДанныеРасшифровки, Расшифровка).Получить("Контрагент");
		Если КонтрагентОтчета = Неопределено тогда
			Предупреждение("Контрагент в отчете не определен.");
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойБухгалтерПокупателя) тогда
			БухгалтерКонтрагента = КонтрагентОтчета.ОсновнойБухгалтерПокупателя;
		Иначе
			Предупреждение("Не указан основной бухгалтер контрагента.");
			Возврат;
		КонецЕсли;	
		
		ДокуметКомментария = НайтиДокументКомментария(Элемент);
		
		//+++АК sils 21.07.2017 ИП-00015657.07
		Док_Комментарий = ПолучитьРегистраторАктуальногоКомментария(ДокуметКомментария, СтандартнаяДатаНачала);
		Если Док_Комментарий <> Неопределено и ЗначениеЗаполнено(Док_Комментарий) и Док_Комментарий.ВидКомментария = Справочники.АК_ВидыКомментариев.СудебноеРазбирательство Тогда
			ОбработкаКомментариевЮристом(ДокуметКомментария, Док_Комментарий, СтандартнаяДатаНачала);
		Иначе
		//---АК
		
		Если ЗначениеЗаполнено(ДокуметКомментария) и ТипЗнч(БухгалтерКонтрагента) = Тип("СправочникСсылка.Пользователи") тогда
			ОбработкаКомментариевБухгалтером(ДокуметКомментария, СтандартнаяДатаНачала, БухгалтерКонтрагента);
		КонецЕсли;
		//+++АК sils 21.07.2017 ИП-00015657.07
		КонецЕсли;
		//---АК
		
		Возврат;
		
	КонецЕсли;
	
//Раков П.С. --

	Если ТипЗнч(Расшифровка)= Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Поля = ПолучитьРасшифровкуНаСервере(Расшифровка);
		ОтборР = Новый Структура;
		Для Каждого Элемент из Поля Цикл
			ОтборР.Вставить(Элемент.Ключ,Элемент.Значение)
		КонецЦикла;
		
		//
		ПараметрыР = Новый Структура("СформироватьПриОткрытии,Отбор,КлючВарианта",Истина,ОтборР,"ДляРасшифровки");
		
		//
		ОткрытьФорму("Отчет.ЗаявкиБезПоступлений.Форма.ФормаОтчета", ПараметрыР, ЭтаФорма, Новый УникальныйИдентификатор);
		
	Иначе	
		ИнфокомТиповыеОтчеты.ОбработкаРасшифровкиТиповогоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект, ЭтаФорма);	
	КонецЕсли;
		
КонецПроцедуры

//Раков П.С. ++
Функция НайтиДокументКомментария(Элемент)
	
	МассивСимволов = новый Массив;
	МассивСимволов.Добавить("0");
	МассивСимволов.Добавить("1");
	МассивСимволов.Добавить("2");
	МассивСимволов.Добавить("3");
	МассивСимволов.Добавить("4");
	МассивСимволов.Добавить("5");
	МассивСимволов.Добавить("6");
	МассивСимволов.Добавить("7");
	МассивСимволов.Добавить("8");
	МассивСимволов.Добавить("9");	
    к= 1;
	Симв1 = Ложь;
	Для н = 1 по СтрДлина(Элемент.ТекущаяОбласть.Имя) цикл
		Если МассивСимволов.Найти(Сред(Элемент.ТекущаяОбласть.Имя,н,1)) = Неопределено тогда
			 Если Симв1 тогда
				  ОсьУ = Лев(Элемент.ТекущаяОбласть.Имя,н);
				  ОсьУПоиск = Лев(Элемент.ТекущаяОбласть.Имя,н-1);
				  Прервать;
			 КонецЕсли;	 
			 Симв1 = Истина;                       
		КонецЕсли;	                                                   
	КонецЦикла;	                                                                  
	Для R = 1 по 100 цикл
		Для C = 1 по 100 цикл
			Если ЭлементыФормы.Результат.Область("R" + R + "C" + C).Текст = "Плохая ДЗ" тогда
				Прервать; //Нашли кононку в шапке
			КонецЕсли;	
		КонецЦикла;	
		Если  ЭлементыФормы.Результат.Область("R" + R + "C" + C).Текст = "Плохая ДЗ" Тогда
			Прервать; //Нашли кононку в шапке
		КонецЕсли;	
	КонецЦикла;	
	ПДЗВСтрокеРасшифровки = ЭлементыФормы.Результат.Область(ОсьУПоиск + "C" + C ).Текст;
    Пока Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементыФормы.Результат.Область(ОсьУ+Строка(к)).Расшифровка)) или НЕ к = 100 цикл
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементыФормы.Результат.Область(ОсьУ+Строка(к)).Расшифровка)) тогда
			Возврат ЭлементыФормы.Результат.Область(ОсьУ+Строка(к)).Расшифровка;
			Прервать;
		КонецЕсли;	
		к = к +1;
	КонецЦикла;  
КонецФункции
   
Функция ПолучитьСтруктуруЗначенийРасшифровки(ДанныеРасшифровки, Индекс)
	
	//
	Соответствие = Новый Соответствие;
		
	//
	Родители = ДанныеРасшифровки.Элементы[Индекс].ПолучитьРодителей();
	Для Каждого Родитель Из Родители Цикл
		
		//
		_Соответствие = ПолучитьСтруктуруЗначенийРасшифровки(ДанныеРасшифровки, Родитель.Идентификатор);
		Для Каждого ЭлементСоотвествия Из _Соответствие Цикл
			
			//
			Соответствие.Вставить(ЭлементСоотвествия.Ключ, ЭлементСоотвествия.Значение);
			
		КонецЦикла;	
		
		//
		Попытка
			
			//
			Поля = Родитель.ПолучитьПоля();
			Для Каждого Поле Из Поля Цикл
				
				//
				Соответствие.Вставить(Поле.Поле, Поле.Значение);
				
			КонецЦикла;
			
		Исключение
		КонецПопытки;	
		
	КонецЦикла;	
	
	//
	Возврат Соответствие;
	
КонецФункции	
//Раков П.С. --

//+++АК sils 21.07.2017 ИП-00015657.07
Процедура УстановкаНачальникаЮрОтделаНажатие(Элемент)
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Константы.АК_НачЮрОтдела.Получить();
	Выбор = ФормаВыбора.ОткрытьМодально();
	
	Если Выбор <> Неопределено Тогда
		Константы.АК_НачЮрОтдела.Установить(Выбор.Ссылка);
		Сообщить("Константа установлена как: " + Константы.АК_НачЮрОтдела.Получить());
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПисьмоСейчасНажатие(Элемент)
	РегламентныеЗаданияСервер.РассылкаЮристуПлохаяДЗ();
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ЭлементыФормы.ОтправитьПисьмоСейчас.Видимость = Истина;
		ЭлементыФормы.УстановкаНачальникаЮрОтдела.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОтправитьПисьмоСейчас.Видимость = Ложь;
		ЭлементыФормы.УстановкаНачальникаЮрОтдела.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
//---АК


Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если РежимРедактированияНастройки Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИнфокомТиповыеОтчеты.ОбработкаЗакрытияНастройкиОтчета(ЭтотОбъект, ЭтаФорма, Отказ, СтандартнаяОбработка);
	Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки Тогда
		ИнфокомТиповыеОтчеты.СохранитьПоследнююИспользуемуюНастройку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ НА ПАНЕЛИ

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.ОтображатьКартинку = Ложь;
	
КонецПроцедуры

Процедура ОбработкаНажатияКнопкиСохраненнойНастройки(Элемент)
	
	ИнфокомТиповыеОтчеты.ВыборВариантаОтчетаНаПанелиВариантов(ЭтотОбъект, ЭтаФорма, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСохранитьСписок(Элемент)
	
	ИнфокомТиповыеОтчеты.СохранитьСписокВТабличномПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиЗагрузитьСписок(Элемент)
	
	ИнфокомТиповыеОтчеты.ЗагрузитьСписокВТабличноеПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСтандартныйПериодПользователяПриИзменении(Элемент)
	
	СтандартныйПериод.Вариант = Элемент.Значение;
	
КонецПроцедуры

Процедура ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении(Элемент)
	
	СтандартнаяДатаНачала.Вариант = Элемент.Значение;
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартногоПериодаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартнаяДатаНачалаПользователя.Значение = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
	
КонецПроцедуры

Процедура ДействияПанелиИзменениеЗначенияДинамическогоОтбора(Элемент)
	
	ИнфокомТиповыеОтчеты.ОбработкаИзмененияЗначенияДинамическогоОтбора(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиОкончаниеРедактированиеТабличногоПоля(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИнфокомТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиУдалениеСтрокиТабличногоПоля(Элемент)
	
	ИнфокомТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры
                                                              
Процедура ДействияПанелиКнопкаПодборНажатие(Элемент)
	Отбор = ИнфокомТиповыеОтчеты.ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, Элемент);
	Если Отбор.СтрокаОтбора.Поле = "ДанныеОРаботнике.ПодразделениеОрганизации" тогда
		Отбор = ИнфокомТиповыеОтчеты.ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, "ДанныеОРаботнике.ОбособленноеПодразделение");
		//Параметр = ИнфокомТиповыеОтчеты.ПолучитьПараметрИзФормы(ОтчетОбъект, ЭтаФорма, "РежимОтчета");
		ЗначениеВладельца = Отбор.Значение;
	КонецЕсли;
	ИнфокомТиповыеОтчеты.ОбработкаНажатияКнопкиПодбор(ЭтотОбъект, ЭтаФорма, Элемент, ЗначениеВладельца);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ПослеВыводаПанелиПользователя(ЗначениеНастроек) Экспорт
	
КонецПроцедуры

Процедура ПриПолучениеНастроекПользователя(ЗначенияНастроек) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаПериода(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаПараметра(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаГруппировки(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаОтбора(СтруктураЭлементовУправления) Экспорт
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуВверх(Кнопка)
	ИнфокомТиповыеОтчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
КонецПроцедуры

Процедура ПриНажатииНаКнопкуВниз(Кнопка)
	ИнфокомТиповыеОтчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ИнфокомТиповыеОтчеты.СохранитьНастройкиФормыОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ГруппировкиПриПолученииДанных(Элемент, ОформленияСтрок)
	ИнфокомТиповыеОтчеты.ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок);
КонецПроцедуры

Процедура ДействияПанелиДинамическийОтборПериодВыборПриИзменении(Элемент)
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборПриИзменении(ЭтаФорма, Элемент)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) 
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборОчистка(Элемент, СтандартнаяОбработка) 
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры	
	
Процедура ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка) 
	
	ИнфокомТиповыеОтчеты.ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекстаОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка)
	
КонецПроцедуры	

//mika Дата: 2017.08.11 ИП-00016419
Процедура ОтборСобственныхКонтрагентовДляВсехСохраненныхНастроек()
	
	//КомпоновщикНастроек.Настройки.Отбор
	ОтборУстановлен = Ложь;
	Для каждого ЭлементОтбора Из ЭтотОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Исключить контрагентов наших организаций" Тогда 
			ОтборУстановлен = Истина; 
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтборУстановлен Тогда
		Для каждого ЭлементОтбора Из ЭтотОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы Цикл
			Если ЭлементОтбора.Представление = "Исключить контрагентов наших организаций" Тогда 
				НовыйЭлементОтбора = ЭтотОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//КомпоновщикНастроекПользователя.Настройки.Отбор
	ОтборУстановлен = Ложь;
	Для каждого ЭлементОтбора Из КомпоновщикНастроекПользователя.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Исключить контрагента ""Бонус по карте""" Тогда 
			ОтборУстановлен = Истина; 
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтборУстановлен Тогда
		Для каждого ЭлементОтбора Из ЭтотОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы Цикл
			Если ЭлементОтбора.Представление = "Исключить контрагента ""Бонус по карте""" Тогда 
				НовыйЭлементОтбора = КомпоновщикНастроекПользователя.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры;
//mika

СоответствиеНастройкаРезультат = Новый Соответствие;

ДействияЭлементовФормы = Новый Структура;
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборПриИзменении", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборОчистка", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборОчистка"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста", Новый Действие("ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста"));

ДействияЭлементовФормы.Вставить("ОбработкаНажатияКнопкиСохраненнойНастройки", Новый Действие("ОбработкаНажатияКнопкиСохраненнойНастройки"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСохранитьСписок", Новый Действие("ДействияПанелиСохранитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиЗагрузитьСписок", Новый Действие("ДействияПанелиЗагрузитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартныйПериодПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартныйПериодПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартногоПериодаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартногоПериодаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиИзменениеЗначенияДинамическогоОтбора", Новый Действие("ДействияПанелиИзменениеЗначенияДинамическогоОтбора"));
ДействияЭлементовФормы.Вставить("ДействияПанелиОкончаниеРедактированиеТабличногоПоля", Новый Действие("ДействияПанелиОкончаниеРедактированиеТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиУдалениеСтрокиТабличногоПоля", Новый Действие("ДействияПанелиУдалениеСтрокиТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиКнопкаПодборНажатие", Новый Действие("ДействияПанелиКнопкаПодборНажатие"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВверх", Новый Действие("ПриНажатииНаКнопкуВверх"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВниз", Новый Действие("ПриНажатииНаКнопкуВниз"));
ДействияЭлементовФормы.Вставить("ГруппировкиПриПолученииДанных", Новый Действие("ГруппировкиПриПолученииДанных"));
