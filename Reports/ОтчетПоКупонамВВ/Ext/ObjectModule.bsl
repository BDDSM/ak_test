
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка	
		НачалоПериода = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.Дата;
		КонецПериода = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение.Дата;
	Исключение
		Сообщить("Период отчета задан не корректно!");
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеДатДнямНедели.Дата,
		|	СоответствиеДатДнямНедели.НомерНедели
		|ИЗ
		|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
		|ГДЕ
		|	СоответствиеДатДнямНедели.Дата МЕЖДУ &НачалоПериода И &КонецПериода";

	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);

	ТЗ_Недели = Запрос.Выполнить().Выгрузить();
    			
	ТекстЗапроса = "
	|declare @dataNach date = '`````'
	|declare @dataCon date = '#####'
	|
	|select 
	|id_tt , 
	|CONVERT(date, VV.closedate ) лкДата , 
	|COUNT(cm.CheckUID) КолвоПравильных,
	|COUNT(vv.CheckUID) - COUNT(cm.CheckUID) КолвоОшибочных ,
	|0 Потратили , 
	|0 Купили  , 
	|tc.Sum_coupon Сумма, 
	|CONVERT(datetime, VV.closedate ) лкВремя,
	|0 НомерЧека,
	|vv.BONUSCARD НомерКарты 
	|
	|from SMS_IZBENKA..VV_coupon vv
	|inner join SMS_IZBENKA..TT_telefon on TT_telefon.ShopNo=VV.ShopNo
	|left join Loyalty..Coupon_move (nolock) cm on cm.CheckUID=vv.CheckUID
	|inner join Loyalty..Types_coupon tc on tc.id_type_coupon=cm.id_type_coupon
	|where ((cm.kolvo=1 ) or cm.CheckUID is null )
	|and VV.closedate >=@dataNach and CONVERT(date, VV.closedate ) <=@dataCon
	|group by id_tt , CONVERT(date,  VV.closedate ), tc.Sum_coupon, CONVERT(datetime, VV.closedate ), vv.BONUSCARD
	|
	|union all 
	|
	|select id_tt , лкДата , 0 a, 0 b, Потратили , Купили  ,  Сумма , лкВремя, НомерЧека, НомерКарты
	|from (
	|select shopno , 1 Потратили , CONVERT(date, ch.CloseDate ) лкДата ,
	|ch.BaseSum  Купили , ch.CheckUID , Сумма, CONVERT(datetime,ch.CloseDate) лкВремя , ch.CashCheckNo НомерЧека,  ch.BONUSCARD НомерКарты 
	|from 
	|(select * , 
	|
	|round(Checks.Discount/10,0) * 10
	|
	|Сумма from  SMS_UNION..Checks (nolock) 
	|where CloseDate>=@dataNach and convert(date,CloseDate) <=@dataCon 
	|and (abs(Checks.Discount-300)<1 or abs(Checks.Discount-500)<1 ) ) ch 
	|--group by ch.shopno , CONVERT(datetime, CONVERT(date, ch.closedate )) , ch.CheckUID 
	|) a
	|inner join sms_izbenka..TT_telefon on TT_telefon.ShopNo=a.shopno
	|where лкДата >=@dataNach and лкДата <=@dataCon";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "`````", НачалоПериода);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#####", КонецПериода);
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ1 = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	
	ТЗ1.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Строка"));
	ТЗ1.Колонки.Добавить("Неделя", Новый ОписаниеТипов("Число"));
	ТЗ1.Колонки.Добавить("ДатаЧека", Новый ОписаниеТипов("Дата"));
	ТЗ1.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	
	Для каждого ТекСтрРез Из ТЗ1 Цикл
			
		ТекСтрРез.ДатаЧека   = Дата(Сред(ТекСтрРез.лкДата,0,4)+Сред(ТекСтрРез.лкДата,6,2)+Сред(ТекСтрРез.лкДата,9,2));
		ТекСтрРез.Месяц = Формат(ТекСтрРез.ДатаЧека, "ДФ='ММММ гггг'");
		ТекСтрРез.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", ТекСтрРез.id_tt);
		Отбор = Новый Структура("Дата",ТекСтрРез.ДатаЧека);
	    МассСтрок = ТЗ_Недели.НайтиСтроки(Отбор);
		Для каждого ТекСтр Из МассСтрок Цикл
		
			ТекСтрРез.Неделя = ТекСтр.НомерНедели;
		
		КонецЦикла;
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗ",ТЗ1);
	
	//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,	ВнешниеНаборыДанных,,Истина);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
 	
	
КонецПроцедуры


&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения = "")  
	
	Попытка
					
		
		Command = Новый COMОбъект("ADODB.Command");
		Command.CommandTimeout = 0;	
		Если ТипЗнч(допПараметры) = Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(Command, допПараметры);
		КонецЕсли;			
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		Command.CommandText = ТекстЗапроса;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
				
		Возврат RecordSet;
		
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		Catalog = Новый COMОбъект("ADOX.Catalog");			
		
		Catalog.ActiveConnection = СтрокаПодключения;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
&НаСервере
Функция База_РезульататЗапросВТаблицуЗначений(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
		NameFiled = RecordSet.Fields.Item(НомерКолонки).Name;
		NameFiled = СтрЗаменить(NameFiled,"$","_");
		тз.Колонки.Добавить(NameFiled,,RecordSet.Fields.Item(НомерКолонки).Name, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Закрываем датасет возвращаемй База_ВыполнитьЗапрос();
//
&НаСервере
Процедура База_ЗакрытьЗапрос(RecordSet) 
	Если ТипЗнч(RecordSet) = Тип("COMОбъект") тогда
		RecordSet.Close();
	КонецЕсли;		
КонецПроцедуры

