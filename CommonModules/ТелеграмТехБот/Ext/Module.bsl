//+++АК KOPA +Модуль 2018.02.07 ИП-00017163.04
//Модуль предназначен для методов телеграм тех бота


Функция ПолучитьОтвет(Данные) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	Если Данные.Свойство("ИмяКоманды") Тогда		
		Попытка		
			МожноВыполнять = ПроверитьДоступОбъекта(Данные, Результат);
			
			Если МожноВыполнять Тогда
				Результат.Вставить("Данные", ПолучитьДанные(Данные));			
			КонецЕсли;	
		Исключение
			Ошибка = ОписаниеОшибки();
			Результат.Вставить("Ошибка", Ошибка);
		КонецПопытки;		
	Иначе 
		Результат.Вставить("Ошибка", "Ни куда не зашли");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПроверитьДоступОбъекта(Данные, Результат)
	Если Не Данные.Свойство("ДоступОбъект") Тогда
		Возврат Истина;//Нет свойства значит доступ не проверяем
	КонецЕсли;
	
	РезультатДоступ = ПолучитьСостояниеОбъектаОбращенияТелеграм(Данные.ДоступОбъект);
	
	Результат.Вставить("Доступ", РезультатДоступ);
	
	МожноВыполнять =  РезультатДоступ.Свойство("ДоступОбъекта") и РезультатДоступ.ДоступОбъекта.Свойство("Отказ") и
	Не РезультатДоступ.ДоступОбъекта.Отказ;
	
	МожноВыполнять = МожноВыполнять Или РезультатДоступ.Свойство("Ошибка");	

	Возврат МожноВыполнять;
КонецФункции

Функция ПолучитьДанные(Данные) Экспорт 
	Если Данные.ИмяКоманды = "Магазин" Тогда//Для чужого телеграм			
		Возврат ПолучитьДанныеМагазина_ЧужойТелеграм(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "Магазин_1" Тогда			
		Возврат ПолучитьДанныеМагазина_ИП_00017173(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "Магазин_2" Тогда
		Возврат ПривязатьСотрудникаКМагазину_ИП_00017173(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "_Сотрудники" Тогда
		Возврат ___Сотрудники(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "НайтиФизЛицоПоТелефону" Тогда	
		Возврат НайтиФизЛицоПоТелефону(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "ЭтоРуководительОтдела" Тогда//УДАЛИТЬ	
		Возврат ЭтоРуководительОтдела(Данные.Данные);		
	ИначеЕсли Данные.ИмяКоманды = "РолиСотрудников" Тогда	
		Возврат ПолучитьРолиСотрудников(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "ГрафикМагазина" Тогда	
		Возврат ПолучитьГрафикМагазина(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "ПередачаМагазинаВРозницу" Тогда//ИП-00018092	
		Возврат ПередачаМагазинаВРозницу(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "ДанныеМагазинов" Тогда//ИП-00018092	
		Возврат ДанныеМагазинов(Данные.Данные);		
	ИначеЕсли Данные.ИмяКоманды = "ОтправкаОбъектов" Тогда//ИП-00018322	
		Возврат ОтправкаОбъектов(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "ПриходТилси" Тогда//ИП-00018909	
		Возврат ПриходТилси(Данные);
	ИначеЕсли Данные.ИмяКоманды = "УходТилси" Тогда//ИП-00018909	
		Возврат УходТилси(Данные);
	ИначеЕсли Данные.ИмяКоманды = "СтатусТилси" Тогда//ИП-00018909	
		Возврат СтатусТилси(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ТабельТилси" Тогда//ИП-00018909	
		Возврат ТабельТилси(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ДорожныеТилси" Тогда//ИП-00019442.01	
		Возврат ДорожныеТилси(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "Допоставка" Тогда //ИП-00018320.10
		Возврат СуммаКомментарийДопоставки(Данные.Данные);	
	ИначеЕсли Данные.ИмяКоманды = "ВыгрузкаВоФронтол" Тогда // ИП-00019941
		Возврат ВыгрузитьВоФронтол(Данные.Данные);
	ИначеЕсли Данные.ИмяКоманды = "Ремонт" Тогда // ИП-00019919 
		Возврат Ремонт(Данные);		
	КонецЕсли;	
	
	ВызватьИсключение "Команда не найдена: " + Данные.ИмяКоманды;
	
КонецФункции

#область Работа_JSON

Функция ПрочитатьJSONИзСтроки(ТекстJSON) Экспорт
	если ПустаяСтрока(ТекстJSON) или ТипЗнч(ТекстJSON) <> тип("Строка") тогда
		Возврат новый Структура;
	КонецЕсли;
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	Данные = ПрочитатьJSON(Чтение, Ложь,"Дата",ФорматДатыJSON.ISO);
	Возврат Данные;
КонецФункции

Функция ЗаписатьJSONВСтроку(Структура) Экспорт 
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Возврат Запись.Закрыть();
КонецФункции

#КонецОбласти

#Область Разное

Функция СтрокуТаблицыВСтруктуру(Таблица, НомерСтроки, ЗначенияВСтроку = Истина)
	Массив = Новый Массив;
	
	Для каждого Колонка Из Таблица.Колонки Цикл
		Массив.Добавить(Колонка.Имя);			
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Строка = Таблица[НомерСтроки];
	
	Для каждого Колонка Из Массив Цикл
		Если ЗначенияВСтроку Тогда
			Результат.Вставить(Колонка, "" + Строка[Колонка]);				
		Иначе
			Результат.Вставить(Колонка, Строка[Колонка]);			
		КонецЕсли;
	КонецЦикла;				
	
	Возврат Результат;
КонецФункции

Функция МассивВСтроку(Массив, Разделитель) Экспорт 
	Текст = "";
	
	Для каждого элем Из Массив Цикл			
		Текст = Текст + ?(Текст = "", "", Разделитель) + элем;			
	КонецЦикла;
	
	Возврат Текст;
КонецФункции

#КонецОбласти

 
//Для тестирования чужого HTTP сервиса
//Нужен НомерТочки
Функция ПолучитьДанныеМагазина_ЧужойТелеграм(ВходныеДанные) Экспорт 		
	Результат = Новый Структура("ОК", Ложь);
		
	РезультатМассив = Новый Массив;
	
	РезультатМагазин = ПолучитьДанныеМагазина(РезультатМассив, ВходныеДанные);
	
	Если РезультатМагазин.Свойство("Магазин") Тогда
		ВходныеДанные.Вставить("Магазин", РезультатМагазин.Магазин);		
	Иначе 	
	    Возврат Результат;
	КонецЕсли;	
	
	Текст = "";
	
	Для каждого элем Из РезультатМассив Цикл			
		Текст = Текст + ?(Текст = "", "", Символы.ПС) + элем;			
	КонецЦикла;
	
	Результат.ОК = Истина;
	Результат.Вставить("Текст", Текст);
		
	Возврат Результат; 
КонецФункции

/////////////////////////////////////////////////////////////
//___СОТРУДНИКИ

#Область ___Сотрудники

//ИП-00017608
Функция ___Сотрудники(Данные)
	//Если Данные.Отладка Тогда		
		УстановитьПривилегированныйРежим(Истина);
		обк = Обработки.ТелеграмТехБот_Сотрудники.Создать();
		
		Возврат	обк.ВыполнитьДействие(Данные);
//Для отладки		
		обк =  ПолучитьТестОбработку("___Сотрудники");
		
		Если обк <> Неопределено Тогда
			Возврат	обк.ВыполнитьДействие(Данные);
		КонецЕсли;			
	//КонецЕсли;
КонецФункции

Функция ПолучитьТестОбработку(Имя, ИмяФайла = Неопределено) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки.ХранилищеВнешнейОбработки
		|ИЗ
		|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
		|ГДЕ
		|	ВнешниеОбработки.Наименование = &Наименование
		|	И НЕ ВнешниеОбработки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Хранилище = Выборка.ХранилищеВнешнейОбработки;
	КонецЦикла;

	ДвоичныеДанные = Хранилище.Получить();
	
	Если ДвоичныеДанные = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;

	ИмяФайла = ПолучитьИмяВременногоФайла(".epf");
	
	ДвоичныеДанные.Записать(ИмяФайла);
	
	обк = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	
	Возврат обк;
КонецФункции

#КонецОбласти

//ИП-00018046
Функция ПолучитьРолиСотрудников(Данные)	
	УстановитьПривилегированныйРежим(Истина);
	обк = Обработки.ТелеграмТехБот_РолиСотрудников.Создать();
	
	Возврат	обк.ВыполнитьДействие(Данные);
КонецФункции


#Область ИП_00017173 
//+++АК KOPA 2018.01.28 ИП-00017173
//Установка технолога и помощника магазину из телеграм бота

Функция ПолучитьДанныеМагазина_ИП_00017173(ВходныеДанные) Экспорт 	
	Попытка	
		ФизЛицо = ПолучитьСсылкуПоГУИД_Строка(ВходныеДанные.ФизЛицо, Справочники.ФизическиеЛица);
		ВходныеДанные.Вставить("ФизЛицо", ФизЛицо);		
	Исключение
	    ВходныеДанные.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецПопытки;		
	
	Результат = Новый Структура;
		
	РезультатМассив = Новый Массив;
	
	РезультатМагазин = ПолучитьДанныеМагазина(РезультатМассив, ВходныеДанные);
	
	Если РезультатМагазин.Свойство("Магазин") Тогда
		ВходныеДанные.Вставить("Магазин", РезультатМагазин.Магазин);		
	Иначе 	
	    Возврат Результат;
	КонецЕсли;
	
	ДваТипаРоли = ПолучитьТипыРолей_ФункциональныеРоли_ФизЛица(ВходныеДанные);
	
	ЯТут = Ложь;
//25.04.2018 разрешаем просмотр сведений всем	
	//Если Не ДваТипаРоли.Количество() = 0 Тогда	
		МассивТипыРолейЗапрос = Новый Массив;
		ПомощникПоРознице = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;
		ТехнологПоКонтролюКачестваДневной = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной;
		
		МассивТипыРолейЗапрос.Добавить(ПомощникПоРознице);
		МассивТипыРолейЗапрос.Добавить(ТехнологПоКонтролюКачестваДневной);
		
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		ПомощникСтороннейРозницы = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы;
		МассивТипыРолейЗапрос.Добавить(ПомощникСтороннейРозницы);
		//--- AK suvv
		
		ВходныеДанные.Вставить("МассивТипыРолейЗапрос", МассивТипыРолейЗапрос);
		//РезультатСОР = ПолучитьДанныеОбъектаПоТипамРолей_СоответствиеОбъектРоль(РезультатМассив, ВходныеДанные);
		РезультатСОР = ПолучитьСотрудниковМагазина(РезультатМассив, ВходныеДанные);
		ЯТут = РезультатСОР.ЯТут;
	//КонецЕсли;
	
	
	Текст = "";
	
	Для каждого элем Из РезультатМассив Цикл			
		Текст = Текст + ?(Текст = "", "", Символы.ПС) + элем;			
	КонецЦикла;
	

	Результат.Вставить("Роль", ПолучитьПервыйЭлементСтруктуры(ДваТипаРоли));		
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("ПланПроцент", МожноПоказыватьПланПроцентВыполненияПоМагазину(ВходныеДанные.ФизЛицо, ВходныеДанные.Магазин));
	Результат.Вставить("Кнопка", Не ДваТипаРоли.Количество() = 0 и Не ЯТут и ЗначениеЗаполнено(ВходныеДанные.ФизЛицо));
	Результат.Вставить("ТипРозничнойТочкиПорядок", РезультатМагазин.ТипРозничнойТочкиПорядок);
	Результат.Вставить("МагазинУИН", "" + ВходныеДанные.Магазин.УникальныйИдентификатор());
	Результат.Вставить("МагазинНаименование", РезультатМагазин.МагазинНаименование);
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Результат.Вставить("ФизЛицоНаименование", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицо, "Наименование"));	
	КонецЕсли;
	
	Возврат Результат; 
КонецФункции

Функция ПолучитьПервыйЭлементСтруктуры(Структура)
	Результат = "";
	
	Для каждого КлючЗначение Из Структура Цикл
		Результат = КлючЗначение.Значение;
		
	    Прервать;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСсылкуПоГУИД_Строка(Знач ГУИД, Менеджер) Экспорт 
	ГУИД = Новый УникальныйИдентификатор(ГУИД);	
	
	Ссылка = Менеджер.ПолучитьСсылку(ГУИД);	
		
	Возврат Ссылка;
КонецФункции

Функция ПолучитьТипыРолей_ФункциональныеРоли_ФизЛица(Данные)
//У физ лица есть привязка к "Функциональным ролям"(Справочник.РолиПользователей)
//Физ лицо находиться в тч СоставРоли
//РолиПользователей связаны с пвх ТипыРолейПользователя по тч ТипыРолей

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Ссылка КАК РольПользователя,
		|	РолиПользователейСоставРоли.Сотрудник
		|ПОМЕСТИТЬ тПользовательСРолью
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Сотрудник = &ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ТипыРолейПользователя.Ссылка КАК ТипРоли,
		|	тПользовательСРолью.РольПользователя,
		|	ТипыРолейПользователя.Наименование
		|ИЗ
		|	тПользовательСРолью КАК тПользовательСРолью
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
		|		ПО тПользовательСРолью.РольПользователя.ТипыРолей.ТипРоли = ТипыРолейПользователя.Ссылка
		|			И (ТипыРолейПользователя.Ссылка В (&ТипыРолей))";
	
	Запрос.УстановитьПараметр("ФизЛицо", Данные.ФизЛицо);
	
	МассивТипыРолейЗапрос = Новый Массив;
	ПомощникПоРознице = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;
	ТехнологПоКонтролюКачестваДневной = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной;
	МассивТипыРолейЗапрос.Добавить(ПомощникПоРознице);
	МассивТипыРолейЗапрос.Добавить(ТехнологПоКонтролюКачестваДневной);
	
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	ПомощникСтороннейРозницы = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы;
	МассивТипыРолейЗапрос.Добавить(ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("ТипыРолей", МассивТипыРолейЗапрос);//пвх ТипыРолейПользователя
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипРоли = ПомощникПоРознице Тогда	
			Результат.Вставить("ПомощникПоРознице", Выборка.Наименование);	
		ИначеЕсли Выборка.ТипРоли = ТехнологПоКонтролюКачестваДневной Тогда
			Результат.Вставить("ТехнологПоКонтролюКачестваДневной", Выборка.Наименование);	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеОбъектаПоТипамРолей_СоответствиеОбъектРоль(РезультатМассив, Данные)
//В рс СоответствиеОбъектРоль прописаны данные по
//ТипРоли: пвх ТипыРолейПользователя
//Объект: для нас сейчас это магазин
//РольПользователя: агрегат содержащий:
//	Физ лицо находиться в тч СоставРоли
//  пвх ТипыРолейПользователя по тч ТипыРолей
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(СоответствиеОбъектРольСрезПоследних.РольПользователя),
		|	ПРЕДСТАВЛЕНИЕ(РолиПользователейСоставРоли.Сотрудник),
		|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Период,
		|			Объект = &Объект
		|				И ТипРоли В (&ТипРоли)) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка";
	
	Запрос.УстановитьПараметр("Объект", Данные.Магазин);//Структурная единица
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипРоли", Данные.МассивТипыРолейЗапрос);//пвх ТипыРолейПользователя
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПомощникПоРознице = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;
	ТехнологПоКонтролюКачестваДневной = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной;
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	ПомощникСтороннейРозницы = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы;
	//--- AK suvv 
	Результат = Новый Массив;
	ЯТут = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Сотрудник);
		
		Если РезультатМассив = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		ЭтоЯ = Данные.ФизЛицо = Выборка.Сотрудник;
		ЛюбимыйСимвол = ?(ЭтоЯ, Символ(10084),"");
		
		Если ЭтоЯ Тогда
			ЯТут = Истина;		
		КонецЕсли;
		
		Если Выборка.ТипРоли = ПомощникПоРознице Тогда	
			РезультатМассив.Добавить(ЛюбимыйСимвол + "Помощник по рознице: " + Выборка.СотрудникПредставление);	
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		ИначеЕсли Выборка.ТипРоли = ПомощникСтороннейРозницы Тогда
			РезультатМассив.Добавить(ЛюбимыйСимвол + "Помощник сторонней розницы: " + Выборка.СотрудникПредставление);
		//--- AK suvv
		ИначеЕсли Выборка.ТипРоли = ТехнологПоКонтролюКачестваДневной Тогда
			РезультатМассив.Добавить(ЛюбимыйСимвол + "Технолог по качеству: " + Выборка.СотрудникПредставление);	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Новый Структура("Сотрудники, ЯТут", Результат, ЯТут);
КонецФункции

Функция ПолучитьДанныеМагазина(РезультатМассив, МагазинДанные)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Код,
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.Адрес,
	|	СтруктурныеЕдиницы.АдресЭлектроннойПочты,
	|	СтруктурныеЕдиницы.ТелефонныйНомер1,
	|	ПРЕДСТАВЛЕНИЕ(СтруктурныеЕдиницы.ГрафикРаботыМагазина) КАК ГрафикРаботыМагазина,
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.ТипРозничнойТочки
	|ПОМЕСТИТЬ тМагазин
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.НомерТочки = &НомерТочки
	|	И СтруктурныеЕдиницы.Активное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	тМагазин.Код,
	|	тМагазин.Наименование,
	|	тМагазин.Адрес,
	|	тМагазин.АдресЭлектроннойПочты,
	|	ЕСТЬNULL(ГрафикиРаботыМагазинаСрезПоследних.График.Наименование, тМагазин.ГрафикРаботыМагазина) КАК ГрафикРаботыМагазина,
	|	тМагазин.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО) КАК ЦФО,
	|	ВЫБОР
	|		КОГДА тМагазин.ТипРозничнойТочки = ЗНАЧЕНИЕ(перечисление.ТипыРозничныхТочек.Пустаяссылка)
	|			ТОГДА -1
	|		ИНАЧЕ тМагазин.ТипРозничнойТочки.Порядок
	|	КОНЕЦ КАК ТипРозничнойТочкиПорядок,
	|	ЕСТЬNULL(ПривязкаТелефоновСрезПоследних.Номер.Код, """") КАК ТелефонныйНомер1
	|ИЗ
	|	тМагазин КАК тМагазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|				&Период,
	|				СтруктурнаяЕдиница В
	|					(ВЫБРАТЬ
	|						тМагазин.Ссылка
	|					ИЗ
	|						тМагазин КАК тМагазин)) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО тМагазин.Ссылка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыМагазина.СрезПоследних(
	|				&Период,
	|				Магазин В
	|					(ВЫБРАТЬ
	|						тМагазин.Ссылка
	|					ИЗ
	|						тМагазин КАК тМагазин)) КАК ГрафикиРаботыМагазинаСрезПоследних
	|		ПО тМагазин.Ссылка = ГрафикиРаботыМагазинаСрезПоследних.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаТелефонов.СрезПоследних(
	|				,
	|				Привязка В
	|					(ВЫБРАТЬ
	|						тМагазин.Ссылка
	|					ИЗ
	|						тМагазин КАК тМагазин)) КАК ПривязкаТелефоновСрезПоследних
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("НомерТочки", МагазинДанные.НомерТочки);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	Иначе 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		РезультатМассив.Добавить("Магазин: " + Выборка.Наименование);
		РезультатМассив.Добавить("Адрес: " + Выборка.Адрес);
		РезультатМассив.Добавить("ЦФО: " + Выборка.ЦФО);
		РезультатМассив.Добавить("Телефон: " + Выборка.ТелефонныйНомер1);
		РезультатМассив.Добавить("e-mail: " + Выборка.АдресЭлектроннойПочты);
		РезультатМассив.Добавить("График: " + Выборка.ГрафикРаботыМагазина);
		
		Результат.Вставить("Магазин", Выборка.Ссылка);
		Результат.Вставить("ТипРозничнойТочкиПорядок", Выборка.ТипРозничнойТочкиПорядок);
		Результат.Вставить("МагазинУИН", "" + Выборка.Ссылка.УникальныйИдентификатор());
		Результат.Вставить("МагазинНаименование", "" + Выборка.Наименование);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


/////////////////////////////////////////////////////////////////////
//Привязать к магазину

Функция ПривязатьСотрудникаКМагазину_ИП_00017173(ВходныеДанные) Экспорт 
	Результат = Новый Структура("ОК", Ложь);
	
	Попытка	
		ФизЛицо = ПолучитьСсылкуПоГУИД_Строка(ВходныеДанные.ФизЛицо, Справочники.ФизическиеЛица);
		ВходныеДанные.Вставить("ФизЛицо", ФизЛицо);		
	Исключение
	    Возврат Результат;
	КонецПопытки;
	
	Результат.Вставить("Лог", "Начало");
	
	РезультатМассив = Новый Массив;
	
	РезультатМагазин = ПолучитьДанныеМагазина(РезультатМассив, ВходныеДанные);
	
	Результат.Вставить("Лог", "Ищем магазин");
	
	Если РезультатМагазин.Свойство("Магазин") Тогда
		ВходныеДанные.Вставить("Магазин", РезультатМагазин.Магазин);		
	Иначе 	
	    Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("Лог", "Ищем два типа роли");
	
	ДваТипаРоли = ПолучитьТипыРолей_ФункциональныеРоли_ФизЛица(ВходныеДанные);
//Если у сотрудника нет нужных нам ролей то возврат	
	Если ДваТипаРоли.Количество() = 0 Тогда	
		Возврат Результат;
	КонецЕсли;
		
	Если ДваТипаРоли.Свойство("ПомощникПоРознице") Тогда
		ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;	
	Иначе
		ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной;	
	КонецЕсли;
		
	Результат.Вставить("Лог", "Ищем текущих сотрудников для отвязки");	
//Получим текущих сотрудников для отправки сообщений об отвязки
	МассивТипыРолейЗапрос = Новый Массив;
	МассивТипыРолейЗапрос.Добавить(ТипРоли);
	
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Если ДваТипаРоли.Свойство("ПомощникПоРознице") Тогда
		 МассивТипыРолейЗапрос.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	КонецЕсли;
	//--- AK suvv
	
	ВходныеДанные.Вставить("МассивТипыРолейЗапрос", МассивТипыРолейЗапрос);
	МассивОтвязныеСотрудники = ПолучитьДанныеОбъектаПоТипамРолей_СоответствиеОбъектРоль(Неопределено, ВходныеДанные).Сотрудники;
//		
	Результат.Вставить("Лог", "Ищем функциональную роль");
	РольПользователя = НайтиФункциональнуюРольПользователя(ВходныеДанные.ФизЛицо, ТипРоли);
	
	Если РольПользователя = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("Лог", "начинаем привязывать");
	
	ВходныеДанные.Вставить("ТипРоли", ТипРоли);
	ВходныеДанные.Вставить("РольПользователя", РольПользователя);
	ПривязатьСотрудникаКМагазинуПоТипуРоли(ВходныеДанные);
	
	Результат.ОК = Истина;
	Результат.Вставить("ТипРоли", "" + ТипРоли); 
	Результат.Вставить("Наименование", "" + ФизЛицо.Наименование);
	Результат.Вставить("Магазин", "" + РезультатМагазин.Магазин.Наименование);
//
	Оповестить = Новый Массив;
	
	Для каждого Сотрудник Из МассивОтвязныеСотрудники Цикл	
		Оповестить.Добавить("" + Сотрудник.УникальныйИдентификатор());	
	КонецЦикла;
	
	Результат.Вставить("Оповестить", Оповестить);
//	
	Возврат Результат;
КонецФункции

Функция НайтиФункциональнуюРольПользователя(ФизЛицо, ТипРоли) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РолиПользователейСоставРоли.Ссылка
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		|			И (РолиПользователейСоставРоли.Сотрудник = &ФизЛицо
		|				И РолиПользователейТипыРолей.ТипРоли = &ТипРоли)
		|ГДЕ
		|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТипРоли", ТипРоли);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Ссылка;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ПривязатьСотрудникаКМагазинуПоТипуРоли(ВходныеДанные)
	УстановитьПривилегированныйРежим(Истина);	
	запись = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
	
	запись.Период = ТекущаяДата();
	запись.Объект = ВходныеДанные.Магазин;	
	запись.ТипРоли = ВходныеДанные.ТипРоли;
	запись.РольПользователя = ВходныеДанные.РольПользователя;
	запись.ТипРолиID = ВходныеДанные.ТипРоли.Код;
	запись.Записать();
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
//Показывать план и процент выполнения по магазину

//ИП-00017163.06
Функция МожноПоказыватьПланПроцентВыполненияПоМагазину(ФизЛицо, Магазин)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.Объект,
		|	СоответствиеОбъектРольСрезПоследних.ТипРолиID,
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ПОМЕСТИТЬ тМагазин
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Период,
		|			Объект = &Магазин
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|				И ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
		|				И ТипРоли = &ТипРоли или ТипРоли = &ТипРолиСторонняяРозница) КАК СоответствиеОбъектРольСрезПоследних
		//--- AK suvv
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	РолиПользователейТипыРолей.ТипРоли,
		|	РолиПользователейТипыРолей.Ссылка
		|ПОМЕСТИТЬ тНижниеРоли
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		|			И (РолиПользователейСоставРоли.Сотрудник = &ФизЛицо)
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли)
		|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли или РолиПользователейТипыРолей.ТипРоли = &ТипРолиСторонняяРозница)
		//--- AK suvv
		|			И (НЕ РолиПользователейСоставРоли.Ссылка.Родитель = ЗНАЧЕНИЕ(справочник.РолиПользователей.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	РолиПользователейСоставРоли.Ссылка
		|ПОМЕСТИТЬ тВерхнийУровеньБезРолей
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Сотрудник = &ФизЛицо
		|	И РолиПользователейСоставРоли.Ссылка.Родитель = ЗНАЧЕНИЕ(справочник.РолиПользователей.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	РолиПользователейТипыРолей.ТипРоли,
		|	тВерхнийУровеньБезРолей.Сотрудник,
		|	1 КАК УровеньРоли,
		|	РолиПользователейТипыРолей.Ссылка,
		|	тВерхнийУровеньБезРолей.Ссылка КАК Родитель
		|ПОМЕСТИТЬ тРоль
		|ИЗ
		|	тВерхнийУровеньБезРолей КАК тВерхнийУровеньБезРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО тВерхнийУровеньБезРолей.Ссылка = РолиПользователейТипыРолей.Ссылка.Родитель
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли)
		|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли или РолиПользователейТипыРолей.ТипРоли = &ТипРолиСторонняяРозница)
		//--- AK suvv
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	тНижниеРоли.ТипРоли,
		|	тНижниеРоли.Сотрудник,
		|	2,
		|	тНижниеРоли.Ссылка,
		|	NULL
		|ИЗ
		|	тНижниеРоли КАК тНижниеРоли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
		|	тМагазин.Объект,
		|	тРоль.Ссылка
		|ИЗ
		|	тМагазин КАК тМагазин
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тРоль КАК тРоль
		|		ПО тМагазин.РольПользователя = тРоль.Ссылка";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.05 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиСторонняяРозница", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции


//+++АК KOPA 2018.03.30 ИП-00018276
//Данные о сотрудниках магазина
Функция ПолучитьСотрудниковМагазина(РезультатМассив, Данные)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы
		|ПОМЕСТИТЬ втСЕ
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователей.Ссылка КАК Роль,
		|	РолиПользователей.ТипРоли
		|ПОМЕСТИТЬ втРолиПользователей
		|ИЗ
		|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Объект) КАК СоответствиеОбъектРольСрезПоследних
		|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
		|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
		|			И (НЕ РолиПользователей.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	втРолиПользователей.ТипРоли
		|ПОМЕСТИТЬ втСотрудники
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРолиПользователей КАК втРолиПользователей
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСЕ КАК втСЕ
		|			ПО втРолиПользователей.ТипРоли.ТипСтруктурнойЕдиницы = втСЕ.ТипСтруктурнойЕдиницы
		|		ПО РолиПользователейСоставРоли.Ссылка = втРолиПользователей.Роль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСотрудники.Сотрудник КАК Сотрудник,
		|	ПРЕДСТАВЛЕНИЕ(втСотрудники.Сотрудник) КАК СотрудникПредставление,
		|	ВЫБОР
		|		КОГДА втСотрудники.ТипРоли В (&МассивТипыРолейПоказыватьКИ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоступноКИ,
		|	КонтактнаяИнформация.Представление,
		|	ВЫБОР
		|		КОГДА КонтактнаяИнформация.Вид ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА КонтактнаяИнформация.Вид = &ВидТелефон
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК НомерКИ,
		|	втСотрудники.ТипРоли
		|ПОМЕСТИТЬ впИтог
		|ИЗ
		|	втСотрудники КАК втСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО втСотрудники.Сотрудник = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид В (&МассивВидыКИ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	впИтог.Сотрудник КАК Сотрудник,
		|	впИтог.СотрудникПредставление КАК СотрудникПредставление,
		|	впИтог.ДоступноКИ,
		|	впИтог.Представление,
		|	впИтог.ТипРоли.Наименование КАК ТипРоли,
		|	впИтог.НомерКИ
		|ИЗ
		|	впИтог КАК впИтог
		|ИТОГИ
		|	МАКСИМУМ(СотрудникПредставление),
		|	МАКСИМУМ(ТипРоли)
		|ПО
		|	Сотрудник";
				
	ПомощникПоРознице = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	ПомощникСтороннейРозницы = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы;
	//--- AK suvv
	ТехнологПоКонтролюКачестваДневной = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной;
	
	МассивТипыРолейПоказыватьКИ = Новый Массив;
	МассивТипыРолейПоказыватьКИ.Добавить(ПомощникПоРознице);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	МассивТипыРолейПоказыватьКИ.Добавить(ПомощникСтороннейРозницы);
	//--- AK suvv
	МассивТипыРолейПоказыватьКИ.Добавить(ТехнологПоКонтролюКачестваДневной);
	
	ТелефонСлужебный = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный;
	EmailФизЛица = Справочники.ВидыКонтактнойИнформации.EmailФизЛица;	
	
	МассивВидыКИ = Новый Массив;
	МассивВидыКИ.Добавить(ТелефонСлужебный);
	МассивВидыКИ.Добавить(EmailФизЛица);
	
	Запрос.УстановитьПараметр("МассивТипыРолейПоказыватьКИ", МассивТипыРолейПоказыватьКИ);
	Запрос.УстановитьПараметр("МассивВидыКИ", МассивВидыКИ);
	Запрос.УстановитьПараметр("ВидТелефон", ТелефонСлужебный);

	Запрос.УстановитьПараметр("Объект", Данные.Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	                                       
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЯТут = Ложь;
	
	Пока Выборка.Следующий() Цикл		
		ЭтоЯ = Данные.ФизЛицо = Выборка.Сотрудник;
		ЛюбимыйСимвол = ?(ЭтоЯ, Символ(10084),"✳");
		
		Если Выборка.ТипРоли = ПомощникПоРознице Тогда	
			Строка = ЛюбимыйСимвол + "Помощник по рознице: " + Выборка.СотрудникПредставление;	
		ИначеЕсли Выборка.ТипРоли = ТехнологПоКонтролюКачестваДневной Тогда
			Строка = ЛюбимыйСимвол + "Технолог по качеству: " + Выборка.СотрудникПредставление;	
		Иначе 
			Строка = ЛюбимыйСимвол + Выборка.ТипРоли + ": " + Выборка.СотрудникПредставление;	
		КонецЕсли;
		
		Если ЭтоЯ Тогда
			ЯТут = Истина;		
		КонецЕсли;
		
		РезультатМассив.Добавить(Строка);
		
		ВыборкаДЗ = Выборка.Выбрать();
		
		Пока ВыборкаДЗ.Следующий() Цикл			 		
			Если ВыборкаДЗ.ДоступноКИ Тогда
				Если ВыборкаДЗ.НомерКИ = 1 Тогда				
					Строка = "    Телефон: " + ВыборкаДЗ.Представление;
					РезультатМассив.Добавить(Строка);
				ИначеЕсли ВыборкаДЗ.НомерКИ = 2 Тогда				
				    Строка = "    EMail: " + ВыборкаДЗ.Представление;
					РезультатМассив.Добавить(Строка);
				КонецЕсли;			
			КонецЕсли;			
		КонецЦикла;
		
		// +++ golv ИП-00019553 16.08.2018
		Если Выборка.ТипРоли = ПомощникПоРознице ИЛИ Выборка.ТипРоли = "Помощник по рознице" Тогда
			Управляющий = ПолучитьУправляющего(Выборка.Сотрудник);
			Если ЗначениеЗаполнено(Управляющий) Тогда
				РезультатМассив.Добавить("✳Управляющий по рознице: " + Управляющий.СотрудникПредставление);	
				Если ЗначениеЗаполнено(Управляющий.Телефон) Тогда
					РезультатМассив.Добавить("    Телефон: " + Управляющий.Телефон);
				КонецЕсли;
				Если ЗначениеЗаполнено(Управляющий.EMail) Тогда
					РезультатМассив.Добавить("    EMail: " + Управляющий.EMail);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		// --- golv
		
	КонецЦикла;
	
	Возврат Новый Структура("ЯТут", ЯТут);
КонецФункции

// +++ golv ИП-00019553 16.08.2018
Функция ПолучитьУправляющего(Помощник)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Сотрудник,
	|	ЕСТЬNULL(КИТелефон.Представление, """") КАК Телефон,
	|	ЕСТЬNULL(КИАдрес.Представление, """") КАК EMail,
	|	РолиПользователейСоставРоли.Сотрудник.Представление
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КИТелефон
	|		ПО РолиПользователейСоставРоли.Сотрудник = КИТелефон.Объект
	|			И (КИТелефон.Вид = ЗНАЧЕНИЕ(СПРАВОЧНИК.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|			И (КИТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КИАдрес
	|		ПО РолиПользователейСоставРоли.Сотрудник = КИАдрес.Объект
	|			И (КИАдрес.Вид = ЗНАЧЕНИЕ(СПРАВОЧНИК.ВидыКонтактнойИнформации.EmailФизЛица))
	|			И (КИАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	РолиПользователейСоставРоли.Ссылка В
	|			(ВЫБРАТЬ
	|				ВложенныйЗапрос.Ссылка.Родитель
	|			ИЗ
	|				(ВЫБРАТЬ
	|					РолиПользователейСоставРоли.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|				ГДЕ
	|					РолиПользователейСоставРоли.Сотрудник = &Сотрудник) КАК ВложенныйЗапрос
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						РолиПользователейТипыРолей.Ссылка КАК Ссылка
	|					ИЗ
	|						Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|					ГДЕ
	|						РолиПользователейТипыРолей.ТипРоли В (&ТипРоли)) КАК ВложенныйЗапрос1
	|					ПО
	|						ВложенныйЗапрос.Ссылка = ВложенныйЗапрос1.Ссылка
	|			ГДЕ
	|				НЕ ВложенныйЗапрос.Ссылка.ПометкаУдаления
	|				И НЕ ВложенныйЗапрос1.Ссылка.ПометкаУдаления)
	|	И НЕ РолиПользователейСоставРоли.Сотрудник.ПометкаУдаления");
	Запрос.УстановитьПараметр("Сотрудник", Помощник);
	МассивТипыРолейЗапрос = Новый Массив;
	МассивТипыРолейЗапрос.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	МассивТипыРолейЗапрос.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	Запрос.УстановитьПараметр("ТипРоли", МассивТипыРолейЗапрос);
	
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		Возврат РЗ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
// --- golv

#КонецОбласти


//////////////////////////////////////////////////////////////////////////////////////
//АУТЕНТИФИКАЦИЯ

#Область ИП_00017873_Аутентификация

Функция ПроверитьОбъектТелеграмНаЗакрытие(ОбъектПроверки) Экспорт 
//Объект проверки это Ссылка на физ лицо или структурную единицу
	
	МассивПричинаОтказа = Новый Массив;
	
	Если ТипЗнч(ОбъектПроверки) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		//ОбъектПроверки = Справочники.ФизическиеЛица.СоздатьЭлемент().Ссылка;
		
		Если Не ОбъектПроверки.Активный Тогда
			МассивПричинаОтказа.Добавить("Физ лицо не Активный");
		КонецЕсли;	
		Если ЗначениеЗаполнено(ОбъектПроверки.ДатаУвольнения) Тогда
			МассивПричинаОтказа.Добавить("Физ лицо уволено: " + Формат(ОбъектПроверки.ДатаУвольнения, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Если Не ХотьОдинСотрудникФизЛицаРаботает(ОбъектПроверки) Тогда
			МассивПричинаОтказа.Добавить("Сотрудник не работает");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда	
		//ОбъектПроверки = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент().Ссылка;
		
		Если Не ОбъектПроверки.Активное Тогда
			МассивПричинаОтказа.Добавить("Магазин не Активный");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектПроверки.ДатаЗакрытия) и ТекущаяДата() > ОбъектПроверки.ДатаЗакрытия Тогда
			МассивПричинаОтказа.Добавить("Магазин закрыт");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектПроверки.ПометкаУдаления Тогда
		МассивПричинаОтказа.Добавить("Объект помечен на удаление");
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Не МассивПричинаОтказа.Количество() = 0);
	
	Если Результат.Отказ Тогда
		Результат.Вставить("Причина", ТелеграмТехБот.МассивВСтроку(МассивПричинаОтказа, Символы.ПС));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСостояниеОбъектаОбращенияТелеграм(Данные)
//Данные верхнего уровня, там где имя команды
//Данные могут содержать объект
//Объект - структура описывающая того кто обратился
//Содержит:
//ГУИД
//Тип: 1 физлицо, 2Структураная единица

	Результат = Новый Структура;

	//Если Не Данные.Свойство("Объект") Тогда
	//	Возврат Результат;
	//КонецЕсли;
	
	ГУИД = Данные.ГУИД;
	
	Если Не ЗначениеЗаполнено(ГУИД) Тогда
		Результат.Вставить("Ошибка", "Ошибка: Отправлен пустой гуид");
		
		Возврат Результат;
	КонецЕсли;
	
	Менеджер = Неопределено;
	
	ТипМенеджера = Данные.Тип;
	
	Если ТипМенеджера = 1 Тогда
		Менеджер = Справочники.ФизическиеЛица;
	ИначеЕсли ТипМенеджера = 2 Тогда 
	    Менеджер = Справочники.СтруктурныеЕдиницы;
	КонецЕсли;
	
	Попытка
		МойОбъект = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(ГУИД, Менеджер);	
	Исключение
		Результат.Вставить("Ошибка", "Не смогли найти объект по ГУИД: " + ГУИД + " Тип: " + Данные.Тип);
		
		Возврат Результат;
	КонецПопытки;
	
	РезультатПроверкиОбъектаТелеграм = ПроверитьОбъектТелеграмНаЗакрытие(МойОбъект);
	
	Результат.Вставить("ДоступОбъекта", РезультатПроверкиОбъектаТелеграм);
	
	Возврат Результат;
КонецФункции

Функция ПравильныйНомерТелефона(Телефон) Экспорт 
	
	Возврат Прав(Телефон, 10);
	
КонецФункции 

Функция ХотьОдинСотрудникФизЛицаРаботает(ФизЛицо) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизаций.Ссылка
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Физлицо = &Физлицо
		|	И НЕ СотрудникиОрганизаций.ПометкаУдаления
		|	И (СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
		|			ИЛИ &ТекДата <= СотрудникиОрганизаций.ДатаУвольнения)
		|	И (СотрудникиОрганизаций.Организация.Наименование = &Организация
		|			ИЛИ СотрудникиОрганизаций.Организация.Наименование = &Организация2)";
	
	Запрос.УстановитьПараметр("Организация", "Вкусвилл");
	Запрос.УстановитьПараметр("Организация2", "Тилси");
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

Функция ПолучитьФизЛицоПоУИД(УИД) Экспорт  
	Результат = Неопределено;
	
	Попытка	
		Результат = ПолучитьСсылкуПоГУИД_Строка(УИД, Справочники.ФизическиеЛица);		
	Исключение
	    Возврат Результат;
	КонецПопытки;
			
	Возврат Результат;
КонецФункции

Функция НайтиФизЛицоПоТелефону(Данные) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактнаяИнформация.Объект КАК Объект
		|ПОМЕСТИТЬ тФизЛица
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Представление ПОДОБНО &Телефон
		|	И КонтактнаяИнформация.Тип = &ТипТелефон
		|	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 5
		|	ФизическиеЛица.ДатаУвольнения,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Активный,
		|	ФизическиеЛица.Ссылка,
		|	1 КАК ТипОбъекта
		|ПОМЕСТИТЬ ВсеТелефоныФизлица
		|ИЗ
		|	тФизЛица КАК тФизЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО тФизЛица.Объект = ФизическиеЛица.Ссылка
		|			И (ФизическиеЛица.ДатаУвольнения = &ПустаяДата)
		|			И (ФизическиеЛица.Активный)
		|			И (НЕ ФизическиеЛица.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	ПривязкаТелефоновСрезПоследних.Привязка.Наименование,
		|	ИСТИНА,
		|	ПривязкаТелефоновСрезПоследних.Привязка.Ссылка,
		|	ВЫБОР
		|		КОГДА ПривязкаТелефоновСрезПоследних.Привязка ССЫЛКА Справочник.СтруктурныеЕдиницы
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ПривязкаТелефонов.СрезПоследних(
		|			,
		|			Номер.Код = &НомерССемеркой
		|				И НЕ Номер.Заблокирован) КАК ПривязкаТелефоновСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВсеТелефоныФизлица.ДатаУвольнения) КАК ДатаУвольнения,
		|	МАКСИМУМ(ВсеТелефоныФизлица.Наименование) КАК Наименование,
		|	МАКСИМУМ(ВсеТелефоныФизлица.Активный) КАК Активный,
		|	ВсеТелефоныФизлица.Ссылка,
		|	МАКСИМУМ(ВсеТелефоныФизлица.ТипОбъекта) КАК ТипОбъекта
		|ИЗ
		|	ВсеТелефоныФизлица КАК ВсеТелефоныФизлица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеТелефоныФизлица.Ссылка";
	
	ТипТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;	
	
	Запрос.УстановитьПараметр("ТипТелефон", ТипТелефон);
	Запрос.УстановитьПараметр("Телефон", "%" + ПравильныйНомерТелефона(Данные.Телефон));
	Запрос.УстановитьПараметр("НомерССемеркой", "7" + ПравильныйНомерТелефона(Данные.Телефон));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		ФизЛицо = Неопределено;
		
		Если Данные.Свойство("УИДФизЛицо") Тогда
			ФизЛицо = ПолучитьФизЛицоПоУИД(Данные.УИДФизЛицо);		
		КонецЕсли;
		
		Если ФизЛицо = Неопределено Тогда
			Результат.Вставить("Ошибка", "Объект не найден");
			
			Возврат Результат;	
		КонецЕсли;
		
		ДанныеФизЛица = Новый Структура("ТипОбъекта,Ссылка,Наименование",1,ФизЛицо, ФизЛицо.Наименование);
	Иначе 
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Не Выборка.Количество() = 1 Тогда
			Результат.Вставить("Ошибка", "Телефон пренадлежит разным объектам");
			
			Возврат Результат;
		КонецЕсли;
		
		Выборка.Следующий();
		
		ДанныеФизЛица = Новый Структура("ТипОбъекта,Ссылка,Наименование");
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица, Выборка);
	КонецЕсли;
		
	Если ДанныеФизЛица.ТипОбъекта = 1 и Не ХотьОдинСотрудникФизЛицаРаботает(ДанныеФизЛица.Ссылка) Тогда
		Результат.Вставить("Ошибка", "Объект не найден");
		
		Возврат Результат;	
	КонецЕсли;
	
	Результат.Вставить("Объект", "" + ДанныеФизЛица.Ссылка.УникальныйИдентификатор());	
	Результат.Вставить("Наименование", ДанныеФизЛица.Наименование);
	Результат.Вставить("Тип", ДанныеФизЛица.ТипОбъекта);
	
	Возврат Результат;
КонецФункции

//УДАЛИТЬ
Функция ЭтоРуководительОтдела(Данные) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	
	ФизЛицо = ПолучитьФизЛицоПоУИД(Данные.УИД);;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка
		|ПОМЕСТИТЬ тПользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизЛицо = &ФизЛицо
		|	И НЕ Пользователи.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиПоЦФОСрезПоследних.РуководительОтдела
		|ИЗ
		|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(
		|			&Период,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					тПользователь.Ссылка
		|				ИЗ
		|					тПользователь КАК тПользователь)) КАК ПользователиПоЦФОСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("ЭтоРуководительОтдела", Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат.ЭтоРуководительОтдела = Выборка.РуководительОтдела;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ГрафикМагазина

Функция ПолучитьГрафикМагазина(Данные)
	УстановитьПривилегированныйРежим(Истина);
	
	обк = Обработки.ТелеграмТехБот_ГрафикМагазина.Создать();
	Возврат	обк.ВыполнитьДействие(Данные);
	
	//обк =  ПолучитьТестОбработку("___ПолучитьГрафик");
	//
	//Если обк <> Неопределено Тогда
	//	Возврат	обк.ВыполнитьДействие(Данные);
	//КонецЕсли;	
КонецФункции

#КонецОбласти


#Область ПередачаМагазинаВРозницу

Функция ПередачаМагазинаВРозницу(Данные) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	обк = Обработки.ТелеграмТехБот_ПередачаМагазинаВРозницу.Создать();
	
	Возврат	обк.ВыполнитьДействие(Данные);	
КонецФункции

#КонецОбласти

#Область ДанныеМагазинов

Функция ДанныеМагазинов(Данные) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	обк = Обработки.ТелеграмТехБот_ДанныеМагазинов.Создать();
	
	Возврат	обк.ВыполнитьДействие(Данные);	
КонецФункции

#КонецОбласти

#Область ОтправкаОбъектов

//ИП-00018322
Функция ОтправкаОбъектов(Данные) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	обк = Обработки.ТелеграмТехБот_ОтправкаОбъектов.Создать();
	
	Возврат	обк.ВыполнитьДействие(Данные);	
КонецФункции

//ИП-00018322
Процедура ЗарегистрироватьОбъектНаОтправкуВТелеграмТехБот(Ссылка, Отказ) Экспорт 
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	запись = РегистрыСведений.ТелеграмТехБотОбъектыКОтправке.СоздатьМенеджерЗаписи();
	запись.Объект = Ссылка;
	запись.Прочитать();
	
	Если запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	запись.Объект = Ссылка;
	запись.Дата = ТекущаяДата();
	запись.Записать();
КонецПроцедуры

//ИП-00018322
Процедура СнятьРегистрациюОбъектаНаОтправкуВТелеграмТехБот(Ссылка, Отказ) Экспорт 
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	запись = РегистрыСведений.ТелеграмТехБотОбъектыКОтправке.СоздатьМенеджерЗаписи();
	запись.Объект = Ссылка;
	запись.Прочитать();
	
//Если уже отправлен то ни чего не делаем
	Если запись.Выбран() И запись.Отправлен Тогда
		Возврат;
	ИначеЕсли запись.Выбран() Тогда 
		запись.Объект = Ссылка;
		запись.Удалить();		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Тилси

Функция ПриходТилси(Данные)
	
	Попытка
		МЗ				= РегистрыСведений.ОтметкиТилси.СоздатьМенеджерЗаписи();
		МЗ.Сотрудник	= ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица);
		МЗ.Приход		= ТекущаяДата();
		МЗ.НомерТочки	= Данные.Данные.ОтметкаТилси.НомерМагазина;
		МЗ.Широта		= Данные.Данные.ОтметкаТилси.Геолокация.latitude;
		МЗ.Долгота		= Данные.Данные.ОтметкаТилси.Геолокация.longitude;
		СтрокаФото = "";
		Для каждого Отметка Из Данные.Данные.МассивОтметокТилси Цикл	
			ФайлКартинки = Новый Файл(Отметка);
			Если ФайлКартинки.Существует() Тогда		
				Файл = Справочники.Файлы.СоздатьЭлемент();
				Файл.Расширение = ФайлКартинки.Расширение;
				Файл.Наименование = ФайлКартинки.ИмяБезРасширения;
				Файл.ИмяПодкаталога = "ОтметкиТилси";
				Файл.Записать();
				ИмяФайлаДляОбъекта = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка);
				КопироватьФайл(Отметка, ИмяФайлаДляОбъекта);
				УИД = Строка(Файл.Ссылка.УникальныйИдентификатор());
				СтрокаФото = СтрокаФото + ?(ЗначениеЗаполнено(СтрокаФото), ",", "") + УИД;					
			КонецЕсли;	
		КонецЦикла; 
		МЗ.МассивФото = СтрокаФото;
		МЗ.Записать(Истина);
	Исключение
		Возврат Новый Структура("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Новый Структура ("Ок", Истина);
	
КонецФункции

Функция УходТилси(Данные)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтметкиТилси.Сотрудник,
	|	ОтметкиТилси.Приход КАК Приход,
	|	ОтметкиТилси.НомерТочки,
	|	ОтметкиТилси.Уход,
	|	ОтметкиТилси.Широта,
	|	ОтметкиТилси.Долгота
	|ИЗ
	|	РегистрСведений.ОтметкиТилси КАК ОтметкиТилси
	|ГДЕ
	|	ОтметкиТилси.Приход >= &НачалоДня
	|	И ОтметкиТилси.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приход УБЫВ");
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Сотрудник", ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица));	
	
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		МЗ				= РегистрыСведений.ОтметкиТилси.СоздатьМенеджерЗаписи();
		МЗ.Сотрудник	= РЗ.Сотрудник;
		МЗ.Приход		= РЗ.Приход;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			МЗ.Уход = ТекущаяДата();
			МЗ.Записать(Истина);
		КонецЕсли;
		Возврат Новый Структура ("Ок", Истина);
	Иначе
		Возврат Новый Структура("Ошибка", "Нет отметки о приходе");	
	КонецЕсли;
	
	Возврат Новый Структура ("Ок", Истина);
	
КонецФункции

Функция СтатусТилси(Данные)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтметкиТилси.Сотрудник,
	|	ОтметкиТилси.Приход КАК Приход,
	|	ОтметкиТилси.НомерТочки,
	|	ОтметкиТилси.Уход,
	|	ОтметкиТилси.Широта,
	|	ОтметкиТилси.Долгота
	|ИЗ
	|	РегистрСведений.ОтметкиТилси КАК ОтметкиТилси
	|ГДЕ
	|	ОтметкиТилси.Приход >= &НачалоДня
	|	И ОтметкиТилси.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приход УБЫВ");
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Сотрудник", ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица));
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		Возврат Новый Структура ("ВМагазине", (РЗ.Уход = Дата(1,1,1)));
	Иначе
		Возврат Новый Структура("ВМагазине", Ложь);	
	КонецЕсли;
	
КонецФункции

Функция ТабельТилси(Данные)
	
	Запланированные = Новый Массив;
	Попытка
		ДатаТабеля = Дата(Данные.Данные.ДеньТабеля);
		Сотрудник = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТабельРаботыТилси.Период,
		|	ТабельРаботыТилси.ТорговаяТочка.id_TT КАК id_TT,
		|	ТабельРаботыТилси.ТорговаяТочка.НомерТочки КАК НомерТочки,
		|	ТабельРаботыТилси.ТорговаяТочка.Город КАК Город,
		|	ТабельРаботыТилси.ТорговаяТочка.Адрес КАК Адрес,
		|	ТабельРаботыТилси.КоличествоЧасов
		|ИЗ
		|	РегистрСведений.ТабельРаботыТилси КАК ТабельРаботыТилси
		|ГДЕ
		|	ТабельРаботыТилси.Сотрудник = &Сотрудник
		|	И ТабельРаботыТилси.Период = &ДатаТабеля");
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ДатаТабеля", ДатаТабеля);
		РЗ = Запрос.Выполнить().Выбрать();
		Пока РЗ.Следующий() Цикл
			Запланированные.Добавить(Новый Структура("НомерТочки, Адрес, Часы",
			РЗ.НомерТочки, "" + РЗ.Город + ", " + РЗ.Адрес, РЗ.КоличествоЧасов));	
		КонецЦикла;
		Возврат Новый Структура ("ОК, Запланированные", Истина, Запланированные);
	Исключение
	КонецПопытки;
	
	Возврат Новый Структура ("ОК, Запланированные", ложь, Запланированные);
	
КонецФункции

Функция ДорожныеТилси(Данные)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтметкиТилси.Сотрудник,
	|	ОтметкиТилси.Приход КАК Приход,
	|	ОтметкиТилси.НомерТочки,
	|	ОтметкиТилси.Уход,
	|	ОтметкиТилси.Широта,
	|	ОтметкиТилси.Долгота
	|ИЗ
	|	РегистрСведений.ОтметкиТилси КАК ОтметкиТилси
	|ГДЕ
	|	ОтметкиТилси.Приход >= &НачалоДня
	|	И ОтметкиТилси.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приход УБЫВ");
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Сотрудник", ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица));	
	
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		МЗ				= РегистрыСведений.ОтметкиТилси.СоздатьМенеджерЗаписи();
		МЗ.Сотрудник	= РЗ.Сотрудник;
		МЗ.Приход		= РЗ.Приход;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			МЗ.СуммаДорожных = Данные.Данные.СуммаТилси;
			СтрокаФото = МЗ.МассивФото;
			Для каждого Отметка Из Данные.Данные.МассивОтметокТилси Цикл	
				ФайлКартинки = Новый Файл(Отметка);
				Если ФайлКартинки.Существует() Тогда		
					Файл = Справочники.Файлы.СоздатьЭлемент();
					Файл.Расширение = ФайлКартинки.Расширение;
					Файл.Наименование = ФайлКартинки.ИмяБезРасширения;
					Файл.ИмяПодкаталога = "ОтметкиТилси";
					Файл.Записать();
					ИмяФайлаДляОбъекта = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка);
					КопироватьФайл(Отметка, ИмяФайлаДляОбъекта);
					УИД = Строка(Файл.Ссылка.УникальныйИдентификатор());
					СтрокаФото = СтрокаФото + ?(ЗначениеЗаполнено(СтрокаФото), ",", "") + УИД;					
				КонецЕсли;	
			КонецЦикла; 
			МЗ.МассивФото = СтрокаФото;			
			МЗ.Записать(Истина);
		КонецЕсли;
		Возврат Новый Структура ("Ок", Истина);
	Иначе
		Возврат Новый Структура("Ошибка", "Нет отметки о приходе");	
	КонецЕсли;
	
	Возврат Новый Структура ("Ок", Истина);	
	
КонецФункции

#КонецОбласти

// ИП-00019941
#Область Фронтол

Функция ВыгрузитьВоФронтол(Данные)
	
	НомерТочки	= Данные.НомерМагазина;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РабочиеМеста.Ссылка КАК РабочееМесто,
	|	ЛОЖЬ КАК СПользователями
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.СтруктурнаяЕдиница.НомерТочки = &НомерТочки");
	Запрос.УстановитьПараметр("НомерТочки", НомерТочки);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда	
		Попытка
			//Обработки.ВыгрузкаДанныхВоФронтол.ВыгрузитьДанныеВоФронтол(ТЗ);	
		Исключение
			Возврат Новый Структура("Ошибка", ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Возврат Новый Структура("Ошибка", "Кассы не найдены");	
	КонецЕсли; 
	
	Возврат Новый Структура ("Ок", Истина);
	
КонецФункции

#КонецОбласти

Функция ПолучитьПользователяПоФизЛицу(ФизЛицо) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И Пользователи.ФизЛицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
		
	Возврат Выборка.Ссылка;
КонецФункции

Функция ПолучитьМагазинПоУИД(УИД) Экспорт  
	Результат = Неопределено;
	
	Попытка	
		Результат = ПолучитьСсылкуПоГУИД_Строка(УИД, Справочники.СтруктурныеЕдиницы);		
	Исключение
	    Возврат Результат;
	КонецПопытки;
			
	Возврат Результат;
КонецФункции

// +++ golv ИП-00019136 16.08.18
Процедура ОтправитьСообщенияВТехбот(Получатели, ТекстСообщения, НомерКлавиатуры = 0, ДанныеКлавиатуры = "") Экспорт
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, """", "");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "'", "");
	
	СписокУИДов = "";
	Если ТипЗнч(Получатели) = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипЗнч(Получатели) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		СписокУИДов = СписокУИДов + ?(ЗначениеЗаполнено(СписокУИДов), ",", "") + "'" + Получатели.УникальныйИдентификатор() + "'";
	ИначеЕсли ТипЗнч(Получатели) = Тип("Массив") Тогда
		Для каждого Стр Из Получатели Цикл
			Если ТипЗнч(Стр) = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипЗнч(Стр) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				СписокУИДов = СписокУИДов + ?(ЗначениеЗаполнено(СписокУИДов), ",", "") + "'" + Стр.УникальныйИдентификатор() + "'";		
			КонецЕсли;		
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СписокУИДов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(СтрокаСоединенияИнформационнойБазы(), "fin_dev05") > 0 Тогда
		НомерБота = "6";
	Иначе
		НомерБота = "5";
	КонецЕсли;	
	
	ТекстЗапроса =
	"INSERT INTO [srv-sql03].[Telegram].[dbo].[outbox_telegram]
	|([bot_id]
	|,[user_id]
	|,[message]
	|,[keyboard_id]
	|,[keyboard_parameter]
	|,[add_date])
	|SELECT
	|" + НомерБота + "
	|,telegram_id
	|,'" + ТекстСообщения + "'
	|," + Формат(НомерКлавиатуры, "ЧН=0; ЧГ=") + "
	|,'" + ДанныеКлавиатуры + "'
	|,GETDATE()
	|FROM
	|(SELECT [_Code] as telegram_id
	|FROM [RecognitionSystem].[dbo].[_Reference3571] with (nolock)
	|WHERE _Fld3664 = 0x01 and [_Fld3643] in (" + СписокУИДов + ")
	|) as a";
	
	Если Найти(СтрокаСоединенияИнформационнойБазы(), "fin_dev05") > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_Reference3571", "_Reference3611");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "RecognitionSystem", "RecognitionSystem_deb");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_Fld3643", "_Fld3663");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_Fld3664", "_Fld3687");
	КонецЕсли;
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql04", "RecognitionSystem");
	Телеграм.База_ВыполнитьЗапрос(ТекстЗапроса, СтрокаПодключения);	
	
КонецПроцедуры
// --- golv ИП-00019136 16.08.18

// +++ golv ИП-00018320.10 16.08.18
#Область Допоставка
Процедура СогласованиеДополнительныхРейсовЧерезТехбот() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница,
	|	МаршрутныйЛистТорговыеТочки.Ссылка.Номер,
	|	МаршрутныйЛистТорговыеТочки.Ссылка.Дата,
	|	МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут,
	|	МаршрутныйЛистТорговыеТочки.Ссылка.ПричинаПеревозки,
	|	МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут.СтруктурноеПодразделение КАК Склад,
	|	ЕСТЬNULL(МаршрутныйЛистТорговыеТочки.Ссылка.Перевозчик, """") КАК Перевозчик
	|ПОМЕСТИТЬ Рейсы
	|ИЗ
	|	Документ.МаршрутныйЛист.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаДопоставкиНаТТ КАК ЦенаДопоставкиНаТТ
	|		ПО МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница = ЦенаДопоставкиНаТТ.ТорговаяТочка
	|			И МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут = ЦенаДопоставкиНаТТ.Маршрут
	|			И МаршрутныйЛистТорговыеТочки.Ссылка.ПричинаПеревозки = ЦенаДопоставкиНаТТ.ПричинаПеревозки
	|			И (НАЧАЛОПЕРИОДА(МаршрутныйЛистТорговыеТочки.Ссылка.Дата, ДЕНЬ) = ЦенаДопоставкиНаТТ.Дата)
	|			И (ЦенаДопоставкиНаТТ.Согласовано = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (ЦенаДопоставкиНаТТ.Сумма = 0)
	|ГДЕ
	|	НЕ МаршрутныйЛистТорговыеТочки.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СкладКавказ КАК Склад,
	|	&ОтветственныйКавказ КАК ОТВЕТСТВЕННЫЙ
	|ПОМЕСТИТЬ ОтветственныеПоСкладам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СкладСевер,
	|	&ОтветственныйСевер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.Объект,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	|ПОМЕСТИТЬ РолиПомощников
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			,
	|			Объект В
	|					(ВЫБРАТЬ
	|						Рейсы.СтруктурнаяЕдиница
	|					ИЗ
	|						Рейсы КАК Рейсы)
	|				И ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПомощников.Объект,
	|	РолиПользователейСоставРоли.Сотрудник
	|ПОМЕСТИТЬ ОтветственныеПоМагазинам
	|ИЗ
	|	РолиПомощников КАК РолиПомощников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО РолиПомощников.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рейсы.СтруктурнаяЕдиница,
	|	Рейсы.Номер,
	|	Рейсы.Дата,
	|	Рейсы.Маршрут,
	|	Рейсы.Перевозчик,
	|	Рейсы.ПричинаПеревозки,
	|	ВЫБОР
	|		КОГДА Рейсы.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ДовозПоПросьбеМагазина)
	|			ТОГДА ОтветственныеПоМагазинам.Сотрудник
	|		ИНАЧЕ ОтветственныеПоСкладам.ОТВЕТСТВЕННЫЙ
	|	КОНЕЦ КАК Ответственный
	|ПОМЕСТИТЬ РейсыСОтветственными
	|ИЗ
	|	Рейсы КАК Рейсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветственныеПоСкладам КАК ОтветственныеПоСкладам
	|		ПО Рейсы.Склад = ОтветственныеПоСкладам.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветственныеПоМагазинам КАК ОтветственныеПоМагазинам
	|		ПО Рейсы.СтруктурнаяЕдиница = ОтветственныеПоМагазинам.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РейсыСОтветственными.СтруктурнаяЕдиница,
	|	РейсыСОтветственными.Номер,
	|	РейсыСОтветственными.Дата,
	|	РейсыСОтветственными.Маршрут,
	|	РейсыСОтветственными.Перевозчик,
	|	РейсыСОтветственными.ПричинаПеревозки,
	|	РейсыСОтветственными.Ответственный,
	|	ЕСТЬNULL(РейсыСОтветственными.СтруктурнаяЕдиница.Наименование, """") КАК ТТ,
	|	ЕСТЬNULL(РейсыСОтветственными.СтруктурнаяЕдиница.НомерТочки, 0) КАК НомерТочки
	|ИЗ
	|	РейсыСОтветственными КАК РейсыСОтветственными
	|ГДЕ
	|	НЕ РейсыСОтветственными.Ответственный ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("СкладКавказ", Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Кавказский_1"));
	Запрос.УстановитьПараметр("СкладСевер", Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Северный"));
	Запрос.УстановитьПараметр("ОтветственныйКавказ", ПолучитьОтветственногоПоСкладу("Согласующий цену допоставки на ТТ Кавказ"));
	Запрос.УстановитьПараметр("ОтветственныйСевер", ПолучитьОтветственногоПоСкладу("Согласующий цену допоставки на ТТ Север"));	
	
	РЗ = Запрос.Выполнить().Выбрать();
	Пока РЗ.Следующий() Цикл
		ТекстСообщения = "Согласуйте стоимость дополнительной поставки на ТТ
		|" + Формат(РЗ.Дата, "ДЛФ=DD") + "
		|Рейс " + РЗ.Номер + "
		|" + РЗ.Перевозчик + "
		|причина перевозки - " + Строка(РЗ.ПричинаПеревозки) + "
		|ТТ - " + РЗ.ТТ;
		
		ОтправитьСообщенияВТехбот(РЗ.Ответственный, ТекстСообщения, 7, РЗ.Номер + "|" + Формат(РЗ.НомерТочки, "ЧН=0; ЧГ="));
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОтветственногоПоСкладу(НазваниеРоли)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|ГДЕ
	|	РолиПользователейСоставРоли.Ссылка.Наименование = &НазваниеРоли");
	Запрос.УстановитьПараметр("НазваниеРоли", НазваниеРоли);
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		Возврат РЗ.Сотрудник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СуммаКомментарийДопоставки(Данные)
	
	Попытка
		НомерРейса	= Данные.НомерРейса;
		НомерТочки	= Данные.НомерТочки;
		Сумма		= Данные.Сумма;
		Комментарий	= Данные.Комментарий;
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(МаршрутныйЛистТорговыеТочки.Ссылка.Дата, ДЕНЬ) КАК Дата,
		|	МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут,
		|	МаршрутныйЛистТорговыеТочки.Ссылка.ПричинаПеревозки,
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница
		|ПОМЕСТИТЬ СтрокаРейса
		|ИЗ
		|	Документ.МаршрутныйЛист.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
		|ГДЕ
		|	МаршрутныйЛистТорговыеТочки.Ссылка.Номер = &НомерРейса
		|	И МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница.НомерТочки = &НомерТочки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦенаДопоставкиНаТТ.Дата,
		|	ЦенаДопоставкиНаТТ.Маршрут,
		|	ЦенаДопоставкиНаТТ.ПричинаПеревозки,
		|	ЦенаДопоставкиНаТТ.ТорговаяТочка
		|ИЗ
		|	СтрокаРейса КАК СтрокаРейса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаДопоставкиНаТТ КАК ЦенаДопоставкиНаТТ
		|		ПО СтрокаРейса.Дата = ЦенаДопоставкиНаТТ.Дата
		|			И СтрокаРейса.Маршрут = ЦенаДопоставкиНаТТ.Маршрут
		|			И СтрокаРейса.ПричинаПеревозки = ЦенаДопоставкиНаТТ.ПричинаПеревозки
		|			И СтрокаРейса.СтруктурнаяЕдиница = ЦенаДопоставкиНаТТ.ТорговаяТочка");
		Запрос.УстановитьПараметр("НомерРейса", НомерРейса);
		Запрос.УстановитьПараметр("НомерТочки", НомерТочки);
		РЗ = Запрос.Выполнить().Выбрать();
		Если РЗ.Следующий() Тогда
			МЗ = РегистрыСведений.ЦенаДопоставкиНаТТ.СоздатьМенеджерЗаписи();
			МЗ.Дата = РЗ.Дата;
			МЗ.Маршрут = РЗ.Маршрут;
			МЗ.ПричинаПеревозки = РЗ.ПричинаПеревозки;
			МЗ.ТорговаяТочка = РЗ.ТорговаяТочка;
			МЗ.Прочитать();
			МЗ.Согласовано = ТекущаяДата();
			Если ЗначениеЗаполнено(Комментарий) Тогда
				МЗ.Комментарий = Комментарий;
			КонецЕсли;
			Если ЗначениеЗаполнено(Сумма) Тогда
				МЗ.Сумма = Сумма;
			КонецЕсли;				
			МЗ.Записать(Истина);
		Иначе
			Возврат Новый Структура("Ошибка", "Рейс не найден!");	
		КонецЕсли;
	
	Исключение
		Возврат Новый Структура("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Новый Структура ("Ок", Истина);
	
КонецФункции
#КонецОбласти
// --- golv ИП-00018320.10 16.08.18

// +++ golv ИП-00019919 09.10.18     
#Область Ремонт

Функция Ремонт(Данные)
	
	Действие = Данные.Данные.Действие;
	Если Действие = "Список групп" Тогда
		Возврат Новый Структура("ОК, Группы", Истина, ПолучитьСписокГруппРемонта());
	ИначеЕсли Действие = "Список объектов" Тогда
		КодГруппы = Данные.Данные.КодГруппы;
		Возврат Новый Структура("ОК, Объекты", Истина, ПолучитьСписокОбъектовРемонта(КодГруппы));
	ИначеЕсли Действие = "Список исполнителей" Тогда
		Возврат Новый Структура("ОК, Исполнители", Истина, ПолучитьСписокИсполнителейРемонта());
	ИначеЕсли Действие = "Создать документ" Тогда
		Возврат Новый Структура("ОК, ТекстОтвета", Истина, СоздатьЗаявкуНаРемонт(Данные));
	ИначеЕсли Действие = "Список заявок" Тогда
		Возврат Новый Структура("ОК, Заявки", Истина, ПолучитьСписокЗаявок(Данные));
	ИначеЕсли Действие = "Заявка" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, ПолучитьЗаявку(Данные));	
	ИначеЕсли Действие = "Принять заявку" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, ПринятьЗаявку(Данные));
	ИначеЕсли Действие = "Подтвердить заявку" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, ПодтвердитьЗаявку(Данные));
	ИначеЕсли Действие = "Отклонить заявку" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, ПодтвердитьЗаявку(Данные, Истина));		
	ИначеЕсли Действие = "Подтвердить выполнение" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, ПодтвердитьВыполнение(Данные));	
	ИначеЕсли Действие = "Не подтвердить выполнение" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, ПодтвердитьВыполнение(Данные, Истина));		
	ИначеЕсли Действие = "Начать ремонт" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, НачатьРемонт(Данные));
	ИначеЕсли Действие = "Закончить ремонт" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, ЗакончитьРемонт(Данные));	
	ИначеЕсли Действие = "Ремонт объекта" Тогда
		Возврат Новый Структура("ОК, Заявка", Истина, РемонтОбъекта(Данные));			
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокГруппРемонта()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппаЗаявокНаРемонт.Код,
	|	ГруппаЗаявокНаРемонт.Наименование
	|ИЗ
	|	Справочник.ГруппаЗаявокНаРемонт КАК ГруппаЗаявокНаРемонт
	|ГДЕ
	|	НЕ ГруппаЗаявокНаРемонт.ПометкаУдаления");
	РЗ = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		Результат.Добавить(Новый Структура("Код, Наименование", РЗ.Код, РЗ.Наименование));
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // ПолучитьСписокГруппРемонта()

Функция ПолучитьСписокОбъектовРемонта(КодГруппы)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъектыРемонта.Код,
	|	ОбъектыРемонта.Наименование
	|ИЗ
	|	Справочник.ОбъектыРемонта КАК ОбъектыРемонта
	|ГДЕ
	|	ОбъектыРемонта.Подгруппа.Код = &КодГруппы
	|	И НЕ ОбъектыРемонта.ПометкаУдаления");
	Запрос.УстановитьПараметр("КодГруппы", КодГруппы);
	РЗ = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		Результат.Добавить(Новый Структура("Код, Наименование", РЗ.Код, РЗ.Наименование));
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // ПолучитьСписокОбъектовРемонта()

Функция ПолучитьСписокИсполнителейРемонта()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Техники.Код,
	|	Техники.Наименование
	|ИЗ
	|	Справочник.Техники КАК Техники
	|ГДЕ
	|	НЕ Техники.ПометкаУдаления");
	РЗ = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		Результат.Добавить(Новый Структура("Код, Наименование", РЗ.Код, РЗ.Наименование));
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // ПолучитьСписокИсполнителейРемонта()

Функция СоздатьЗаявкуНаРемонт(ДанныеДокумента)
	
	Попытка
		
		Док = Документы.ЗаявкаНаРемонт.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.ВидЗаявки = Перечисления.ВидыЗаявокНаРемонт.ТекущийРемонт;
		Док.Магазин = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(ДанныеДокумента.ДоступОбъект.ГУИД, Справочники.СтруктурныеЕдиницы);
		Данные = ДанныеДокумента.Данные;
		Док.Срочность = ?(Данные.Срочность = 1, Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно, Справочники.СрочностьВыполненияЗаявкиНаРемонт.НеСрочно);
		Если Данные.Период = 1 Тогда
			Док.СуточныйПериод = Перечисления.СуточныйПериод.Днем;
		ИначеЕсли Данные.Период = 2 Тогда
			Док.СуточныйПериод = Перечисления.СуточныйПериод.Ночью;
		Иначе
			Док.СуточныйПериод = Перечисления.СуточныйПериод.НеИмеетЗначения;
		КонецЕсли;
		Док.ИсполнительФизЛицо = Справочники.Техники.НайтиПоКоду(Данные.Исполнитель.Код);
		
		Для каждого Стр Из Данные.Объекты Цикл	
			НоваяСтрока = Док.ОбъектыРемонта.Добавить();
			НоваяСтрока.Подгруппа = Справочники.ГруппаЗаявокНаРемонт.НайтиПоКоду(Стр.Подгруппа.Код);
			НоваяСтрока.ОбъектРемонта = Справочники.ОбъектыРемонта.НайтиПоКоду(Стр.Объект.Код);
			НоваяСтрока.Комментарий = Стр.Комментарий;
			СтрокаИД = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.СтрокаИД = СтрокаИД;
			Для каждого Отметка Из Стр.ФотоСтроки Цикл	
				
				ФайлКартинки = Новый Файл(Отметка);
				ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
				ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);
				
				ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), Док, ДанныеФотографии);
				Если ОтносительноеИмяФайла = Неопределено Тогда
					Продолжить;;
				КонецЕсли;
				
				СтрокаФотографии							= Док.Файлы.Добавить();
				СтрокаФотографии.ИмяФайла					= ФайлКартинки.Имя;
				СтрокаФотографии.ИдентификаторФотографии	= ИдентификаторФотографии;
				СтрокаФотографии.ОтносительноеИмяФайла		= ОтносительноеИмяФайла;
				СтрокаФотографии.СтрокаИД					= СтрокаИД;
		
			КонецЦикла; 
			
		КонецЦикла; 
		
		Для каждого Отметка Из Данные.Фото Цикл	
			
			ФайлКартинки = Новый Файл(Отметка);
			ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
			ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);
			
			ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), Док, ДанныеФотографии);
			Если ОтносительноеИмяФайла = Неопределено Тогда
				Продолжить;;
			КонецЕсли;
			
			СтрокаФотографии = Док.Файлы.Добавить();
			СтрокаФотографии.ИмяФайла = ФайлКартинки.Имя;
			СтрокаФотографии.ИдентификаторФотографии = ИдентификаторФотографии;
			СтрокаФотографии.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	
		КонецЦикла; 
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Возврат "Создана заявка " + док.Номер;
		
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСписокЗаявок(Данные)
	
	Статус = Данные.Данные.Статус;
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Номер,
	|	ЗаявкаНаРемонт.Магазин.Наименование КАК Магазин,
	|	ЗаявкаНаРемонт.Дата
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|ГДЕ
	|	ЗаявкаНаРемонт.ПодтвержденоПомощником = ЗНАЧЕНИЕ(Перечисление.ПодтверждениеПомощником.ПодтвержденоПомощником)
	|	И ЗаявкаНаРемонт.ИсполнительФизЛицо.ФизЛицо = &ФизЛицо
	|	И &ДопУсловие";
	Если Статус = "Непринятые" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловие", "НЕ ЗаявкаНаРемонт.ОтветПолучен И НЕ ЗаявкаНаРемонт.ПодтвержденоИсполнителем");
	ИначеЕсли Статус = "Активные" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловие", "ЗаявкаНаРемонт.ОтветПолучен И ЗаявкаНаРемонт.ПодтвержденоИсполнителем И НЕ ЗаявкаНаРемонт.Выполнено");
	ИначеЕсли Статус = "Выполненные" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловие", "ЗаявкаНаРемонт.Выполнено И НЕ ЗаявкаНаРемонт.ВыполнениеПодтверждено");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловие", "Ложь");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ФизЛицо = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	РЗ = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		Наименование = Формат(РЗ.Дата, "ДФ=dd.MM.yyyy") + " " + РЗ.Магазин;
		Результат.Добавить(Новый Структура("Код, Наименование", РЗ.Номер, Наименование));	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗаявку(Данные)
	
	Номер = Данные.Данные.Номер;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Номер,
	|	ЗаявкаНаРемонт.Магазин.Наименование КАК Магазин,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Дата,
	|	ЗаявкаНаРемонт.Магазин.Адрес КАК Адрес,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаРемонт.ВыполнениеПодтверждено
	|			ТОГДА ""Закрыта""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаРемонт.Выполнено
	|					ТОГДА ""Выполнена""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаявкаНаРемонт.ПодтвержденоИсполнителем
	|								И ЗаявкаНаРемонт.ОтветПолучен
	|							ТОГДА ""Принята""
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЗаявкаНаРемонт.ПодтвержденоПомощником = ЗНАЧЕНИЕ(Перечисление.ПодтверждениеПомощником.ПодтвержденоПомощником)
	|									ТОГДА ""Не принята""
	|								ИНАЧЕ ""Новая""
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус,
	|	ЗаявкаНаРемонт.ВыполненныеРаботы,
	|	ЗаявкаНаРемонт.Магазин.НомерТочки КАК НомерМагазина
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|ГДЕ
	|	ЗаявкаНаРемонт.Номер = &Номер
	|	И НЕ ЗаявкаНаРемонт.ПометкаУдаления";
	Запрос = Новый Запрос(ТекстЗапроса);
	ФизЛицо = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Номер", Номер);
	РЗ = Запрос.Выполнить().Выбрать();
	Результат = Новый Структура;
	Если РЗ.Следующий() Тогда
		Результат.Вставить("Номер", РЗ.Номер);
		Результат.Вставить("Статус", РЗ.Статус);
		Результат.Вставить("Дата", Формат(РЗ.Дата, "ДФ=yyyyMMddHHmmss"));
		Результат.Вставить("Магазин", Новый Структура("Наименование, Адрес, Номер", РЗ.Магазин, РЗ.Адрес, РЗ.НомерМагазина));
		Результат.Вставить("Срочность", ?(РЗ.Срочность = Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно, 1, 0));
		Результат.Вставить("СуточныйПериод", Строка(РЗ.СуточныйПериод));

			
		Путь = СокрЛП(ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("МП_КаталогХраненияФайловЗадачМП"));
		Если Не ПРАВ(Путь, 1) = "\" Тогда
			Путь = Путь + "\";
		КонецЕсли;
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонтОбъектыРемонта.ОбъектРемонта,
		|	ЗаявкаНаРемонтОбъектыРемонта.Подгруппа,
		|	ЗаявкаНаРемонтОбъектыРемонта.Комментарий,
		|	ЗаявкаНаРемонтОбъектыРемонта.СтрокаИД,
		|	ЗаявкаНаРемонтОбъектыРемонта.ВыполненныеРаботы
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	Документ.ЗаявкаНаРемонт.ОбъектыРемонта КАК ЗаявкаНаРемонтОбъектыРемонта
		|ГДЕ
		|	ЗаявкаНаРемонтОбъектыРемонта.Ссылка.Номер = &Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРемонтФайлы.ИмяФайла,
		|	ЗаявкаНаРемонтФайлы.Комментарий,
		|	ЗаявкаНаРемонтФайлы.ОтносительноеИмяФайла,
		|	ЗаявкаНаРемонтФайлы.ИдентификаторФотографии,
		|	ЗаявкаНаРемонтФайлы.СтрокаИД,
		|	""Заказчик"" КАК Источник
		|ПОМЕСТИТЬ Файлы
		|ИЗ
		|	Документ.ЗаявкаНаРемонт.Файлы КАК ЗаявкаНаРемонтФайлы
		|ГДЕ
		|	ЗаявкаНаРемонтФайлы.Ссылка.Номер = &Номер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРемонтФайлыИсполнителя.ИмяФайла,
		|	ЗаявкаНаРемонтФайлыИсполнителя.Комментарий,
		|	ЗаявкаНаРемонтФайлыИсполнителя.ОтносительноеИмяФайла,
		|	ЗаявкаНаРемонтФайлыИсполнителя.ИдентификаторФотографии,
		|	ЗаявкаНаРемонтФайлыИсполнителя.СтрокаИД,
		|	""Исполнитель""
		|ИЗ
		|	Документ.ЗаявкаНаРемонт.ФайлыИсполнителя КАК ЗаявкаНаРемонтФайлыИсполнителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Объекты.Комментарий КАК Комментарий,
		|	Объекты.ВыполненныеРаботы КАК ВыполненныеРаботы,
		|	Файлы.ОтносительноеИмяФайла,
		|	Файлы.Источник,
		|	Объекты.СтрокаИД КАК СтрокаИД,
		|	Объекты.ОбъектРемонта.Код КАК КодОбъекта,
		|	Объекты.ОбъектРемонта.Наименование КАК НаименованиеОбъекта,
		|	Объекты.Подгруппа.Код КАК КодПодгруппы,
		|	Объекты.Подгруппа.Наименование КАК НаименованиеПодгруппы
		|ИЗ
		|	Объекты КАК Объекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Файлы КАК Файлы
		|		ПО Объекты.СтрокаИД = Файлы.СтрокаИД
		|ИТОГИ
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(ВыполненныеРаботы),
		|	МАКСИМУМ(КодОбъекта),
		|	МАКСИМУМ(НаименованиеОбъекта),
		|	МАКСИМУМ(КодПодгруппы),
		|	МАКСИМУМ(НаименованиеПодгруппы)
		|ПО
		|	СтрокаИД");
		Запрос.УстановитьПараметр("Номер", Номер);
		Объекты = Новый Массив;	
		ВыборкаПоОбъектам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОбъектам.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОбъектам.КодОбъекта) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПоОбъектам.КодПодгруппы) ТОгда
				Продолжить;
			КонецЕсли;
			ВыборкаПоФайлам = ВыборкаПоОбъектам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Файлы = Новый Массив;
			ФайлыИсполнителя = Новый Массив;
			Пока ВыборкаПоФайлам.Следующий() Цикл
				НовыйФайл = Новый Структура("ИмяФайла", Путь + ВыборкаПоФайлам.ОтносительноеИмяФайла);
				Если ВыборкаПоФайлам.Источник = "Заказчик" Тогда
					Файлы.Добавить(НовыйФайл);
				Иначе
					ФайлыИсполнителя.Добавить(НовыйФайл);
				КонецЕсли;
			КонецЦикла;
			ОбъектРемонта = Новый Структура("Код, Наименование", ВыборкаПоОбъектам.КодОбъекта, ВыборкаПоОбъектам.НаименованиеОбъекта);
			Подгруппа = Новый Структура("Код, Наименование", ВыборкаПоОбъектам.КодПодгруппы, ВыборкаПоОбъектам.НаименованиеПодгруппы);
			Объекты.Добавить(Новый Структура("Объект, Подгруппа, Комментарий, ВыполненныеРаботы, Файлы, ФайлыИсполнителя", ОбъектРемонта, Подгруппа, ВыборкаПоОбъектам.Комментарий, ВыборкаПоОбъектам.ВыполненныеРаботы, Файлы, ФайлыИсполнителя));
		КонецЦикла;
		
		Результат.Вставить("Объекты", Объекты);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РемонтныеРаботы.ДатаРабот,
		|	РемонтныеРаботы.Исполнитель,
		|	РемонтныеРаботы.ВремяНачала,
		|	РемонтныеРаботы.ВремяОкончания,
		|	РемонтныеРаботы.Заявка.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.РемонтныеРаботы КАК РемонтныеРаботы
		|ГДЕ
		|	РемонтныеРаботы.ДатаРабот = &ДатаРабот
		|	И РемонтныеРаботы.Исполнитель = &Исполнитель
		|	И РемонтныеРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)");
		Запрос.УстановитьПараметр("ДатаРабот", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Исполнитель", ФизЛицо);
		РЗ1 = Запрос.Выполнить().Выбрать();
		Занят = 0;
		ВремяНачала = ДАТА(1,1,1);
		Если РЗ1.Следующий() Тогда
			Занят = 1;
			Если РЗ1.Номер = Номер Тогда
				ВремяНачала = РЗ1.ВремяНачала;
			КонецЕсли;
		КонецЕсли;
		Результат.Вставить("Занят", Занят);
		Результат.Вставить("ВыполняетЗаявку", Формат(ВремяНачала, "ДФ=yyyyMMddHHmmss; ДП=00010101000000"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПринятьЗаявку(Данные)
	
	Номер = Данные.Данные.Номер;	
	Заявка = Документы.ЗаявкаНаРемонт.НайтиПоНомеру(Номер);
	Если ЗначениеЗаполнено(Заявка) ТОгда
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.ОтветПолучен = Истина;
		ЗаявкаОбъект.ПодтвержденоИсполнителем = Истина;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Возврат ПолучитьЗаявку(Данные);
	Иначе
		ВызватьИсключение "Заявка не найдена";
	КонецЕсли;
	
КонецФункции

Функция ПодтвердитьЗаявку(Данные, Отклонить = Ложь)
	
	Номер = Данные.Данные.Номер;
	Заявка = Документы.ЗаявкаНаРемонт.НайтиПоНомеру(Номер);
	Если ЗначениеЗаполнено(Заявка) ТОгда
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.ПодтвержденоПомощником = ?(Отклонить, Перечисления.ПодтверждениеПомощником.ОтклоненоПомощником, Перечисления.ПодтверждениеПомощником.ПодтвержденоПомощником);
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Возврат ПолучитьЗаявку(Данные);
	Иначе
		ВызватьИсключение "Заявка не найдена";
	КонецЕсли;
	
КонецФункции

Функция ПодтвердитьВыполнение(Данные, Отклонить = Ложь)
	
	Номер = Данные.Данные.Номер;	
	Заявка = Документы.ЗаявкаНаРемонт.НайтиПоНомеру(Номер);
	Если ЗначениеЗаполнено(Заявка) ТОгда
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		Если Отклонить Тогда
			ЗаявкаОбъект.Выполнено = ложь;
		Иначе
			ЗаявкаОбъект.ВыполнениеПодтверждено = Истина;
		КонецЕсли;		
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Возврат ПолучитьЗаявку(Данные);
	Иначе
		ВызватьИсключение "Заявка не найдена";
	КонецЕсли;
	
КонецФункции

Функция НачатьРемонт(Данные)
	
	Номер = Данные.Данные.Номер;	
	Заявка = Документы.ЗаявкаНаРемонт.НайтиПоНомеру(Номер);
	Если ЗначениеЗаполнено(Заявка) ТОгда
		МЗ = РегистрыСведений.РемонтныеРаботы.СоздатьМенеджерЗаписи();
		МЗ.Заявка = Заявка;
		МЗ.Исполнитель = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица);
		МЗ.ДатаРабот = ТекущаяДата();
		Мз.ВремяНачала = ТекущаяДата();
		МЗ.Записать(Истина);
		Возврат ПолучитьЗаявку(Данные);
	Иначе
		ВызватьИсключение "Заявка не найдена";
	КонецЕсли;	
	
КонецФункции

Функция ЗакончитьРемонт(Данные)
	
	Номер = Данные.Данные.Номер;	
	Заявка = Документы.ЗаявкаНаРемонт.НайтиПоНомеру(Номер);
	Если ЗначениеЗаполнено(Заявка) ТОгда
		МЗ = РегистрыСведений.РемонтныеРаботы.СоздатьМенеджерЗаписи();
		МЗ.Заявка = Заявка;
		МЗ.Исполнитель = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.ДоступОбъект.ГУИД, Справочники.ФизическиеЛица);
		МЗ.ДатаРабот = ТекущаяДата();
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			Мз.ВремяОкончания = ТекущаяДата();
			МЗ.Записать(Истина);
			ЗаявкаОбъект = Заявка.ПолучитьОбъект();
			ЗаявкаОбъект.Выполнено = Истина;
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Возврат ПолучитьЗаявку(Данные);
		Иначе
			ВызватьИсключение "Отметка не найдена";
		КонецЕсли;				
	Иначе
		ВызватьИсключение "Заявка не найдена";
	КонецЕсли;		
	
КонецФункции

Функция РемонтОбъекта(Данные)
	
	Номер = Данные.Данные.Номер;	
	Заявка = Документы.ЗаявкаНаРемонт.НайтиПоНомеру(Номер);
	Если НЕ ЗначениеЗаполнено(Заявка) ТОгда
		ВызватьИсключение "Заявка не найдена";
	КонецЕсли;	
	
	КодПодгруппы = Данные.Данные.КодПодгруппы;
	Подгруппа = Справочники.ГруппаЗаявокНаРемонт.НайтиПоКоду(КодПодгруппы);
	Если НЕ ЗначениеЗаполнено(Подгруппа) ТОгда
		ВызватьИсключение "Подгруппа не найдена";
	КонецЕсли;	
	
	КодОбъекта = Данные.Данные.КодОбъекта;
	ОбъектРемонта = Справочники.ОбъектыРемонта.НайтиПоКоду(КодОбъекта);
	Если НЕ ЗначениеЗаполнено(ОбъектРемонта) ТОгда
		ВызватьИсключение "Объект ремонта не найден";
	КонецЕсли;		
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонтОбъектыРемонта.Ссылка,
	|	ЗаявкаНаРемонтОбъектыРемонта.НомерСтроки,
	|	ЗаявкаНаРемонтОбъектыРемонта.ОбъектРемонта,
	|	ЗаявкаНаРемонтОбъектыРемонта.Подгруппа,
	|	ЗаявкаНаРемонтОбъектыРемонта.Комментарий,
	|	ЗаявкаНаРемонтОбъектыРемонта.СтрокаИД,
	|	ЗаявкаНаРемонтОбъектыРемонта.ВыполненныеРаботы
	|ИЗ
	|	Документ.ЗаявкаНаРемонт.ОбъектыРемонта КАК ЗаявкаНаРемонтОбъектыРемонта
	|ГДЕ
	|	ЗаявкаНаРемонтОбъектыРемонта.Ссылка = &Заявка
	|	И ЗаявкаНаРемонтОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И ЗаявкаНаРемонтОбъектыРемонта.Подгруппа = &Подгруппа");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Подгруппа", Подгруппа);
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		ЗаявкаОбъект = РЗ.Ссылка.ПолучитьОбъект();
		СтрокаРемонта = ЗаявкаОбъект.ОбъектыРемонта[РЗ.НомерСтроки-1];
		СтрокаИД = РЗ.СтрокаИД;
		СтрокаРемонта.ВыполненныеРаботы = Данные.Данные.ВыполненныеРаботы;
		Для каждого Фото Из Данные.Данные.Фото Цикл
			ФайлКартинки = Новый Файл(Фото);
			ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
			ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);	
			ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), ЗаявкаОбъект, ДанныеФотографии);
			Если ОтносительноеИмяФайла = Неопределено Тогда
				Продолжить;;
			КонецЕсли;
			СтрокаФотографии							= ЗаявкаОбъект.ФайлыИсполнителя.Добавить();
			СтрокаФотографии.ИмяФайла					= ФайлКартинки.Имя;
			СтрокаФотографии.ИдентификаторФотографии	= ИдентификаторФотографии;
			СтрокаФотографии.ОтносительноеИмяФайла		= ОтносительноеИмяФайла;
			СтрокаФотографии.СтрокаИД					= СтрокаИД;				
		КонецЦикла; 
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат ПолучитьЗаявку(Данные);
	Иначе
		ВызватьИсключение "Заявка не найдена";
	КонецЕсли;		
	
КонецФункции
#КонецОбласти
// --- golv ИП-00019919 09.10.18  









