////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Событие НачалоВыбора в колонке Представление таблицы контактной информации
Процедура ПредставлениеНачалоВыбора00(Форма, Элемент, Модифицированность, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент);
	Если (ДанныеСтроки = Неопределено)
			И (ДанныеСтроки.ТипНомер = 0) Тогда
		Возврат;
	КонецЕсли;
	
	//Если ДанныеСтроки.ТипНомер = 1 Тогда
	//	ИмяФормыРедактирования =  "Справочник.Контрагенты.Форма.ВводАдреса";
	//Иначе
	//	ИмяФормыРедактирования =  "Справочник.Контрагенты.Форма.ВводТелефона";
	//КонецЕсли;
	
	Если ДанныеСтроки.ТипНомер = 1 Тогда
		ИмяФормыРедактирования =  "ФормаЗаписиАдреса";
	Иначе
		ИмяФормыРедактирования =  "ФормаЗаписиТелефона";
	КонецЕсли;
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("ЗначенияПолей"					, ДанныеСтроки.ЗначенияПолей);
	ПараметрыДляФормы.Вставить("Вид"							, ДанныеСтроки.Вид);
	ПараметрыДляФормы.Вставить("БылиВнесеныИзменения"			, Ложь);
	ПараметрыДляФормы.Вставить("Представление"					, Элемент.ТекстРедактирования);
	ПараметрыДляФормы.Вставить("РедактированиеТолькоВДиалоге"	, НЕ Элемент.РедактированиеТекста);
	ПараметрыДляФормы.Вставить("АдресТолькоРоссийский"			, ДанныеСтроки.ТолькоРоссийский);
	ПараметрыДляФормы.Вставить("Тип"							, ДанныеСтроки.Тип);
	ПараметрыДляФормы.Вставить("Объект"							, Форма.Объект.Ссылка);
	ПараметрыДляФормы.Вставить("мВозвратСтруктуры"				, Истина);
	
	//ОбрОбъект = Обработки.РедактированиеКонтактнойИнформации.Создать();
	
	//+++АК SHEP 2018.09.21 ИП-00019906
	//ЗаполнитьЗначенияСвойств(ОбрОбъект, УправлениеКонтактнойИнформацией.СтруктураКонтактнойИнформацииОбъекта(Форма.Объект.Ссылка, ДанныеСтроки.Тип, ДанныеСтроки.Вид));
	//ОбрОбъект.ЗаписыватьВРегистр = Истина;
	//ОбрОбъект.мВозвратСтруктуры = Истина;	
	//---АК SHEP 2018.09.21
	
	//Результат = ОбрОбъект.ПолучитьФорму(ИмяФормыРедактирования).ОткрытьМодально();
	ОткрытьФорму("Обработка.РедактированиеКонтактнойИнформации.Форма." + ИмяФормыРедактирования, ПараметрыДляФормы, Форма, Форма.УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ФормаКонтактнойИнформации =
	//	ПолучитьФорму("Обработка.РедактированиеКонтактнойИнформации.Форма." + ИмяФормыРедактирования, ПараметрыДляФормы, Форма, Форма.УникальныйИдентификатор);
	
	//Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент"), Новый Структура);
	//Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	//Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	//Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	//Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	//Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	//Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	//
	//ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , , , Оповещение);
	
	//Если ТипЗнч(Результат) = Тип("Структура") Тогда
	//	Форма[Элемент.Имя]   = Результат.Представление;
	//	ДанныеСтроки.ЗначенияПолей = Результат.ЗначенияПолей;
	//	Модифицированность      = Истина;
	//КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает строку дополнительных значений по имени реквизита.
//
// Параметры:
//	Форма - Форма - передаваемая форма.
//	Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение - Неопределено или СтрокаКоллекции - строка коллекции.
//
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

// Заполняет по полю Представление остальные поля в записи для телефона.
//
// Параметры:
//	Представление - Строка - представление телефона.
//	СписокПолей - ДанныеФормыКоллекция - список полей.
//
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Представление, СписокПолей)
	
	СтрокаТелефона = СокрЛП(Представление);
	СписокПолей.Очистить();
	КодСтраны     = "";
	КодГорода     = "";
	НомерТелефона = "";
	Добавочный    = "";
	Комментарий   = "";
	
	// вырежем добавочный номер с комментарием
	ПозицияДобавочный = Найти(ВРЕГ(СтрокаТелефона), "ДОБ.");
	Если ПозицияДобавочный <> 0 Тогда
		ДобавочныйСКомментарием = СокрЛП(Сред(СтрокаТелефона, ПозицияДобавочный + 4));
		
		СтрокаТелефона = СокрЛП(Лев(СтрокаТелефона, ПозицияДобавочный - 1));
		
		Если Прав(СтрокаТелефона, 1) = "," Тогда
			СтрокаТелефона = Лев(СтрокаТелефона, СтрДлина(СтрокаТелефона)-1);
		КонецЕсли;
		
		ПозицияДобавочный = Найти(ВРЕГ(ДобавочныйСКомментарием), ", ");
		
		Если ПозицияДобавочный <> 0 Тогда
			Добавочный = СокрЛП(Лев(ДобавочныйСКомментарием, ПозицияДобавочный - 1));
			Комментарий = СокрЛП(Сред(ДобавочныйСКомментарием, ПозицияДобавочный + 2));
		Иначе
			Добавочный = ДобавочныйСКомментарием;
		КонецЕсли;
		
	КонецЕсли;
	
	// вырежем код города
	ПозицияОткрывающаясяСкобка = Найти(СтрокаТелефона, "(");
	Если ПозицияОткрывающаясяСкобка <> 0 Тогда
		КодСтраны = СокрЛП(Лев(СтрокаТелефона, ПозицияОткрывающаясяСкобка - 1));
		
		СтрокаТелефона = СокрЛП(Сред(СтрокаТелефона, ПозицияОткрывающаясяСкобка + 1));
		ПозицияЗакрывающаясяСкобка = Найти(СтрокаТелефона, ")");
		
		Если ПозицияЗакрывающаясяСкобка <> 0 Тогда
			КодГорода = СокрЛП(Лев(СтрокаТелефона, ПозицияЗакрывающаясяСкобка - 1));
			СтрокаТелефона = СокрЛП(Сред(СтрокаТелефона, ПозицияЗакрывающаясяСкобка + 1));
		КонецЕсли;
	КонецЕсли;
	
	ПозицияЗапятая = Найти(СтрокаТелефона, ", ");
	// Если добавочного номера нет - ориентируемся по номеру телефона и комментарию
	Если ПозицияДобавочный = 0 И ПозицияЗапятая <> 0 Тогда
		// вырежем комментарий
		НомерТелефона = СокрЛП(Лев(СтрокаТелефона, ПозицияЗапятая - 1));
		Комментарий = СокрЛП(Сред(СтрокаТелефона, ПозицияЗапятая + 2));
	Иначе
		// все оставшееся это номер
		НомерТелефона = СтрокаТелефона;
	КонецЕсли;
	
	// Поправим представление
	Представление = СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий);
	СписокПолей.Добавить(КодСтраны,     "КодСтраны");
	СписокПолей.Добавить(КодГорода,     "КодГорода");
	СписокПолей.Добавить(НомерТелефона, "НомерТелефона");
	СписокПолей.Добавить(Добавочный,    "Добавочный");
	СписокПолей.Добавить(Комментарий,   "Комментарий");
	
КонецПроцедуры

// Формирует строковое представление телефона.
//
// Параметры:
//	КодСтраны - Строка - код страны.
//	КодГорода - Строка - код города.
//	НомерТелефона - Строка - номер телефона.
// 	Добавочный - Строка - добавочный номер.
//	Комментарий - Строка - комментарий.
//
// Возвращаемое значение - Строка - представление телефона.
//
Функция СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий) Экспорт
	
	Представление = СокрЛП(КодСтраны);
	
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;
	
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(НомерТелефона);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Добавочный) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(Добавочный);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СокрЛП(Комментарий);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
// Событие ПриИзменении в колонке Представление таблицы контактной информации
Процедура ПредставлениеПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент);
	
	//+++АК SHEP 2018.09.25 ИП-00019906
	Если ДанныеСтроки = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы") Тогда
		ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть);
		Возврат;
	КонецЕсли;
	//---АК SHEP 2018.09.25
	
	Если (ДанныеСтроки <> Неопределено) И (ДанныеСтроки.ТипНомер = 2) Тогда
		Значение = Элемент.ТекстРедактирования;
		ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Значение, ДанныеСтроки.ЗначенияПолей);
	КонецЕсли;
	Если (ДанныеСтроки <> Неопределено) И (ДанныеСтроки.ТипНомер = 1) И Элемент.ТекстРедактирования = "" Тогда
		ДанныеСтроки.ЗначенияПолей.Очистить()
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события ПриИзменении поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент           - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     ЭтоТабличнаяЧасть - Булево           - Флаг того, что элемент является частью таблицы формы.
//
Процедура ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт

	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		ДанныеЗаполнения[Элемент.Имя] = "";
		Если ЭтоТабличнаяЧасть Тогда
			ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = "";
		КонецЕсли;
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.ЗначенияПолей = Неопределено;
		Возврат;
	КонецЕсли;
	
	//Если ДанныеСтроки.ХранитьИсториюИзменений И НачалоДня(ДанныеСтроки.ДействуетС) <> НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
	//	ИсторическаяКонтактнаяИнформация = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	//	ЗаполнитьЗначенияСвойств(ИсторическаяКонтактнаяИнформация, ДанныеСтроки);
	//	ИсторическаяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Истина;
	//	ИсторическаяКонтактнаяИнформация.ИмяРеквизита = "";
	//	ДанныеСтроки.ДействуетС = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	//КонецЕсли;
	
	ДанныеСтроки.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Текст, ДанныеСтроки.Вид);
	ДанныеСтроки.Представление = Текст;
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = ДанныеСтроки.ЗначенияПолей;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеНачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	
	//+++АК SHEP 2018.09.25 ИП-00019906
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент);
	
	Если ДанныеСтроки <> Неопределено И ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы") Тогда
		НачалоВыбора(Форма, Элемент, Модифицированность, СтандартнаяОбработка);
	КонецЕсли;
	//---АК SHEP 2018.09.25
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы.
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы.
//
Процедура НачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Если ДанныеЗаполнения[Элемент.Имя] <> Элемент.ТекстРедактирования Тогда
			ДанныеЗаполнения[Элемент.Имя] = Элемент.ТекстРедактирования;
			ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		ТекстРедактирования = Элемент.ТекстРедактирования;
	Иначе 
		ТекстРедактирования = ?(ЗначениеЗаполнено(ДанныеСтроки.ЗначенияПолей), Форма[Элемент.Имя], "");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	//ПараметрыОткрытия.Вставить("ЗначенияПолей", ДанныеСтроки.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", ТекстРедактирования);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
	
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент"), Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	
	ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , , , Оповещение);
КонецПроцедуры

// Обработчик события Очистка поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация"
//
// Параметры:
//     Форма        - УправляемаяФорма - Форма владельца контактной информации
//     ИмяРеквизита - Строка           - Имя реквизита формы, связанного с представление контактной информации
//
// Возвращаемое значение:
//     Неопределено
//
Функция ПредставлениеОчистка(Знач Форма, Знач ИмяРеквизита) Экспорт
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	НайденнаяСтрока.ЗначенияПолей = "";
	НайденнаяСтрока.Представление = "";
	НайденнаяСтрока.Комментарий   = "";
	
	Форма[ИмяРеквизита] = "";
	Форма.Модифицированность = Истина;
	
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
	Возврат Неопределено;
КонецФункции

// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.)
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация"
//
// Параметры:
//     Форма      - УправляемаяФорма - Форма владельца контактной информации
//     ИмяКоманды - Строка           - Имя автоматически сгенерированной команды действия
//
// Возвращаемое значение:
//     Неопределено
//
Функция ПодключаемаяКоманда(Знач Форма, Знач ИмяКоманды) Экспорт
	
	Если ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода" Тогда
		Оповещение = Новый ОписаниеОповещения("КонтактнаяИнформацияДобавитьПолеВводаЗавершение", ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент"), Новый Структура);
			
		Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
		
		Попытка
			СписокДляВыбораИзМеню = Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов;
		Исключение
			СписокДляВыбораИзМеню = Форма.СписокДобавляемыхЭлементовКонтактнойИнформации;
		КонецПопытки;
		
		Форма.ПоказатьВыборИзМеню(Оповещение, СписокДляВыбораИзМеню, Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода);
		
		Возврат Неопределено;
		
	ИначеЕсли Лев(ИмяКоманды, 7) = "Команда" Тогда
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "Команда", "");
		КомандаКонтекстногоМеню = Ложь;
		
	Иначе
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "КонтекстноеМеню", "");
		КомандаКонтекстногоМеню = Истина;
		
	КонецЕсли;
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	ТипКонтактнойИнформации = НайденнаяСтрока.Тип;
	
	Если КомандаКонтекстногоМеню Тогда
		ВвестиКомментарий(Форма, ИмяРеквизита, НайденнаяСтрока, Результат);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьАдрес(Форма, ИмяРеквизита, НайденнаяСтрока, Результат);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		АдресПочты = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		СоздатьЭлектронноеПисьмо("", АдресПочты, ТипКонтактнойИнформации);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		АдресСсылки = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		ПерейтиПоВебСсылке("", АдресСсылки, ТипКонтактнойИнформации);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Открытие формы адреса формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация"
//
// Параметры:
//     Форма     - УправляемаяФорма - Форма владельца контактной информации
//     Результат - Произвольный     - Данные, переданные обработчиком команды
//
Процедура ОткрытьФормуВводаАдреса(Форма, Результат) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Свойство("ЭлементФормыАдреса") Тогда
			ПредставлениеНачалоВыбора(Форма, Форма.Элементы[Результат.ЭлементФормыАдреса]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик возможного обновления формы контактной информации
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация"
//
// Параметры:
//     Форма     - УправляемаяФорма - Форма владельца контактной информации
//     Результат - Произвольный     - Данные, переданные обработчиком команды
//
Процедура КонтрольОбновленияФормы(Форма, Результат) Экспорт
	
	// Анализ на обратный вызов формы ввода адреса
	ОткрытьФормуВводаАдреса(Форма, Результат);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора страны мира. 
// Реализует функционал автоматического заведения элемента справочника СтраныМира после выбора.
//
// Параметры:
//     Элемент              - ПолеФормы    - Элемент, содержащий редактируемую страну мира
//     ВыбранноеЗначение    - Произвольный - Значение выбора
//     СтандартнаяОбработка - Булево       - Устанавливаемый флаг стандартной обработки события формы
//
Процедура СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	Если Не СтандартнаяОбработка Тогда 
		Возврат;
	КонецЕсли;
	
	ТипВыбранного = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранного = Тип("Массив") Тогда
		СписокПреобразования = Новый Соответствие;
		Для Индекс = 0 По ВыбранноеЗначение.ВГраница() Цикл
			Данные = ВыбранноеЗначение[Индекс];
			Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("Код") Тогда
				СписокПреобразования.Вставить(Индекс, Данные.Код);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокПреобразования.Количество() > 0 Тогда
			КонтактнаяИнформацияСлужебныйВызовСервера.КоллекцияСтранМираПоДаннымКлассификатора(СписокПреобразования);
			Для Каждого КлючЗначение Из СписокПреобразования Цикл
				ВыбранноеЗначение[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипВыбранного = Тип("Структура") И ВыбранноеЗначение.Свойство("Код") Тогда
		ВыбранноеЗначение = КонтактнаяИнформацияСлужебныйВызовСервера.СтранаМираПоДаннымКлассификатора(ВыбранноеЗначение.Код);
		
	КонецЕсли;
	
КонецПроцедуры

//  Конструктор для структуры параметров открытия формы контактной информации
//
//  Параметры:
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид редактируемой информации, 
//      Значение                - Строка - сериализованное значение полей контактной информации
//      Представление           - Строка - необязательное представление
//
Функция ПараметрыФормыКонтактнойИнформации(ВидКонтактнойИнформации, Значение, Представление = Неопределено, Комментарий = Неопределено) Экспорт
	Возврат Новый Структура("ВидКонтактнойИнформации, ЗначенияПолей, Представление, Комментарий",
		ВидКонтактнойИнформации, Значение, Представление, Комментарий);
КонецФункции

//  Открывает подходящую форму контактной информации для редактирования или просмотра
//
//  Параметры:
//      Параметры    - Произвольный - результат функции ПараметрыФормыКонтактнойИнформации
//      Владелец     - Произвольный - параметр для открываемой формы
//      Уникальность - Произвольный - параметр для открываемой формы
//      Окно         - Произвольный - параметр для открываемой формы
//      Оповещение   - ОписаниеОповещения - для обработки закрытия формы
//
//  Возвращаемое значение: необходимая форма
//
Функция ОткрытьФормуКонтактнойИнформации(Параметры, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено, Оповещение = Неопределено) Экспорт
	ВидИнформации = Параметры.ВидКонтактнойИнформации;
	
	ИмяОткрываемойФормы = КонтактнаяИнформацияКлиентСерверПовтИсп.ИмяФормыВводаКонтактнойИнформации(ВидИнформации);
	Если ИмяОткрываемойФормы = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не обрабатываемый тип адреса: """ + ВидИнформации + """'");
	КонецЕсли;
	
	Если Не Параметры.Свойство("Заголовок") Тогда
		Параметры.Вставить("Заголовок", Строка(КонтактнаяИнформацияСлужебныйВызовСервера.ТипВидаКонтактнойИнформации(ВидИнформации)));
	КонецЕсли;
	
	Параметры.Вставить("ОткрытаПоСценарию", Истина);
	
	Возврат ОткрытьФорму(ИмяОткрываемойФормы, Параметры, Владелец, Уникальность, Окно, , Оповещение);
КонецФункции

// ИспользованиеМодальности

//  Устарело. Следует использовать ОткрытьФормуКонтактнойИнформации
//
//  Модально открывает подходящую форму контактной информации для редактирования или просмотра
//
//  Параметры:
//      Параметры    - Произвольный - результат функции ПараметрыФормыКонтактнойИнформации
//      Владелец     - Произвольный - параметр для открываемой формы
//      Уникальность - Произвольный - параметр для открываемой формы
//      Окно         - Произвольный - параметр для открываемой формы
//
//  Возвращаемое значение: отредактированный результат или Неопределено при отказе от редактирования
//
Функция ОткрытьФормуКонтактнойИнформацииМодально(Параметры, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено) Экспорт
	
	ВидИнформации = Параметры.ВидКонтактнойИнформации;
	
	ИмяОткрываемойФормы = КонтактнаяИнформацияКлиентСерверПовтИсп.ИмяФормыВводаКонтактнойИнформации(ВидИнформации);
	Если ИмяОткрываемойФормы=Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не обрабатываемый тип адреса: """ + ВидИнформации + """'");
	КонецЕсли;
	
	Если Не Параметры.Свойство("Заголовок") Тогда
		Параметры.Вставить("Заголовок", Строка(КонтактнаяИнформацияСлужебныйВызовСервера.ТипВидаКонтактнойИнформации(ВидИнформации)));
	КонецЕсли;
	
	Параметры.Вставить("ОткрытаПоСценарию", Истина);
	
	Возврат ОткрытьФормуМодально(ИмяОткрываемойФормы, Параметры, Владелец);
КонецФункции

// Конец ИспользованиеМодальности

// Создает письмо по контактной информации
//
//  Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, Список значений - контактная информация.
//    Представление - Строка  - представление. Используется, если невозможно определить представление из параметра 
//                    ЗначенияПолей (отсутствие поля "Представление")
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей
//
Процедура СоздатьЭлектронноеПисьмо(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено) Экспорт
	
	КонтактнаяИнформация = КонтактнаяИнформацияСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(
		Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));
	ТипИнформации = КонтактнаяИнформация.ТипКонтактнойИнформации;
	
	Если ТипИнформации <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Нельзя создать письмо по контактной информацию с типом ""%1""'"),
			"%1", ТипИнформации);
	КонецЕсли;	
	
	XMLДанные = КонтактнаяИнформация.ДанныеXML;
	
	АдресПочты = КонтактнаяИнформацияСлужебныйВызовСервера.СтрокаСоставаКонтактнойИнформации(XMLДанные);
	Если ТипЗнч(АдресПочты) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка получения адреса электронной почты, неверный тип контактной информации'");
	КонецЕсли;
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
	//	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	//	
	//	ПараметрыОтправки = Новый Структура("Получатель", АдресПочты);
	//	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	//	Возврат; 
	//КонецЕсли;
	
	// Нет подсистемы почты, запускаем системное
	//Оповещение = Новый ОписаниеОповещения("СоздатьПисьмоПоКонтактнойИнформацииЗавершение", ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент"), АдресПочты);
	//ТекстПредложения = НСтр("ru = 'Для отправки письма необходимо установить расширение для работы с файлами.'");
	//ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);
КонецПроцедуры

// Открывает ссылку по контактной информации
//
// Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, Список значений - контактная информация.
//    Представление - Строка  - представление. Используется, если невозможно определить представление из параметра 
//                    ЗначенияПолей (отсутствие поля "Представление")
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей
//
Процедура ПерейтиПоВебСсылке(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено) Экспорт
	
	КонтактнаяИнформация = КонтактнаяИнформацияСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(
		Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));
	ТипИнформации = КонтактнаяИнформация.ТипКонтактнойИнформации;
	
	Если ТипИнформации <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Нельзя открыть ссылку по контактной информации с типом ""%1""'"),
			"%1", ТипИнформации);
	КонецЕсли;
		
	XMLДанные = КонтактнаяИнформация.ДанныеXML;

	АдресСсылки = КонтактнаяИнформацияСлужебныйВызовСервера.СтрокаСоставаКонтактнойИнформации(XMLДанные);
	Если ТипЗнч(АдресСсылки) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка получения ссылки, неверный тип контактной информации'");
	КонецЕсли;
	
	Если Найти(АдресСсылки, "://") > 0 Тогда
		ПерейтиПоНавигационнойСсылке(АдресСсылки);
	Иначе
		ПерейтиПоНавигационнойСсылке("http://" + АдресСсылки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Завершение немодальных диалогов
Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	ДанныеСтроки     = ДополнительныеПараметры.ДанныеСтроки;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = РезультатЗакрытия.КонтактнаяИнформация;
		
	Иначе
		Если ПустаяСтрока(ДанныеСтроки.Комментарий) И Не ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
			
		ИначеЕсли Не ПустаяСтрока(ДанныеСтроки.Комментарий) И ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
			
		Иначе
			Если Не ПустаяСтрока(ДанныеСтроки.Комментарий) Тогда
				Если Форма.Элементы.Найти("Комментарий" + Элемент.Имя) <> Неопределено Тогда
					Форма.Элементы["Комментарий" + Элемент.Имя].Заголовок = РезультатЗакрытия.Комментарий;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСтроки.Представление = ТекстПредставления;
		ДанныеСтроки.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
		ДанныеСтроки.Комментарий   = РезультатЗакрытия.Комментарий;
	КонецЕсли;
	
	ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	
	Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
КонецПроцедуры

// Завершение немодальных диалогов
Процедура КонтактнаяИнформацияДобавитьПолеВводаЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		// Отказ от выбора
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
	
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат);
КонецПроцедуры

//  Обработчик события НачалоВыбора для улицы
//
//  Параметры:
//      Элемент                            - Произвольный - вызывающий элемент формы
//      КодКлассификатораНаселенногоПункта - Число - ограничение по населенному пункту
//      ТекущееЗначение                    - Число, Строка - текущее значение - или код классификатора, или текст
//      ПараметрыФормы                     - Структура - необязательная дополнительная структура параметров для формы подбора
//
Процедура НачалоВыбораУлицы(Элемент, КодКлассификатораНаселенногоПункта, ТекущееЗначение, ПараметрыФормы = Неопределено) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		НачалоВыбораУлицыКЛАДР(Элемент, КодКлассификатораНаселенногоПункта, ТекущееЗначение, ПараметрыФормы);
	КонецЕсли;
	
	// Нет подсистемы классификатора
КонецПроцедуры

//  Обработчик события НачалоВыбора для элемента адреса (субъект РФ, район, город и т.п.)
//
//  Параметры:
//      Элемент        - Произвольный - вызывающий элемент формы
//      КодЧастиАдреса - Число - идентификатор обрабатываемой части адреса, зависит от классификатора
//      ЧастиАдреса    - Произвольный - значения для других частей адреса, зависит от классификатора
//      ПараметрыФормы - Структура - необязательная  дополнительная структура параметров для формы подбора
//
Процедура НачалоВыбораЭлементаАдреса(Элемент, КодЧастиАдреса, ЧастиАдреса, ПараметрыФормы = Неопределено) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		НачалоВыбораЭлементаАдресаКЛАДР(Элемент, КодЧастиАдреса, ЧастиАдреса, ПараметрыФормы);
	КонецЕсли;
	
	// Нет подсистемы классификатора
КонецПроцедуры

//  Возвращает полное наименование для населенного пункта. Под населенным пунктом понимается синтетическое 
//  поле, характеризующее все, что больше улицы
//
//  Параметры:
//      ЧастиАдреса - Произвольный - значения для частей адреса, зависит от классификатора
//
Функция НаименованиеНаселенногоПунктаПоЧастямАдреса(ЧастиАдреса) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат НаименованиеНаселенногоПунктаПоЧастямАдресаКЛАДР(ЧастиАдреса)
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат "";
КонецФункции

//  Предлагает загрузить адресный классификатор
//
//  Параметры:
//      Текст  - Строка        - Дополнительный текст предложения
//      Регион - Число, Строка - Код или название региона для загрузки
//
Процедура ПредложениеЗагрузкиКлассификатора(Знач Текст = "", Знач Регион = Неопределено) Экспорт
	
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант <> "КЛАДР" Тогда
		// Нет подсистемы классификатора
		Возврат;
	КонецЕсли;
	
	ТипПараметраРегиона = ТипЗнч(Регион);
	ПараметрыЗагрузки   = Новый Структура;
	
	Если ТипПараметраРегиона = Тип("Число") Тогда
		ПараметрыЗагрузки.Вставить("КодРегионаДляЗагрузки", Регион);
		
	ИначеЕсли ТипПараметраРегиона = Тип("Строка") Тогда
		ПараметрыЗагрузки.Вставить("НазваниеРегионаДляЗагрузки", Регион);
		
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Подтверждение'");
	ТекстВопроса   = СокрЛП(Текст + Символы.ПС + НСтр("ru = 'Загрузить классификатор сейчас?'") );

	Оповещение = Новый ОписаниеОповещения("ПредложениеЗагрузкиКлассификатораЗавершение", ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент"), ПараметрыЗагрузки);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
КонецПроцедуры

Процедура ПредложениеЗагрузкиКлассификатораЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
КонецПроцедуры

//  Загружает адресный классификатор
//
Процедура ЗагрузитьАдресныйКлассификатор(Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		МодульКЛАДР = КлиентскийМодульКЛАДР();
		МодульКЛАДР.ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
	КонецЕсли;
	
	// Нет подсистемы классификатора
КонецПроцедуры

//+++АК SHEP 2018.09.24 ИП-00019906
Процедура ЗаписьКонтактнойИнформацииИзВводКонтактнойИнформации(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура(Новый ФиксированнаяСтруктура(ДополнительныеПараметры));
	СтруктураДанных.Вставить("Комментарий", РезультатЗакрытия.Комментарий);
	СтруктураДанных.Вставить("Представление", РезультатЗакрытия.Представление);
	СтруктураДанных.Вставить("ЗначенияПолей", РезультатЗакрытия.КонтактнаяИнформация);
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформациюИзСтруктуры(СтруктураДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

// Завершение модального диалога создания письма 
Процедура СоздатьПисьмоПоКонтактнойИнформацииЗавершение(Действие, АдресПочты) Экспорт
	
	ЗапуститьПриложение("mailto:" + АдресПочты);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Реализация КЛАДР
//

Функция КлиентскийМодульКЛАДР()
	
	Возврат ОбщегоНазначенияКлиент.ОбщийМодуль("АдресныйКлассификаторКлиент");

КонецФункции

Процедура НачалоВыбораУлицыКЛАДР(Элемент, КодКлассификатораНаселенногоПункта, ТекущееЗначение, Параметры = Неопределено)
	ПараметрыФормы = ?(Параметры = Неопределено, Новый Структура, Параметры);
	
	ПараметрыФормы.Вставить("Уровень", 5);
	ПараметрыФормы.Вставить("Улица",   Строка(ТекущееЗначение));
	
	МодульКЛАДР = КлиентскийМодульКЛАДР();
	МодульКЛАДР.ОткрытьФормуВыбораКЛАДР(ПараметрыФормы, Элемент);
КонецПроцедуры

Процедура НачалоВыбораЭлементаАдресаКЛАДР(Элемент, КодЧастиАдреса, ЧастиАдреса, Параметры = Неопределено)
	
	КодРеквизита = ВРег(КодЧастиАдреса);
	Если КодРеквизита = "РЕГИОН" Тогда
		Уровень = 1;
		
	ИначеЕсли КодРеквизита = "РАЙОН" Тогда
		Уровень = 2;
		
	ИначеЕсли КодРеквизита = "ГОРОД" Тогда
		Уровень = 3;
		
	ИначеЕсли КодРеквизита = "НАСЕЛЕННЫЙПУНКТ" Тогда
		Уровень = 4;
		
	ИначеЕсли КодРеквизита = "УЛИЦА" Тогда
		Уровень = 5;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = ?(Параметры = Неопределено, Новый Структура, Параметры);
	
	ПараметрыФормы.Вставить("Регион", ЧастиАдреса.Регион.Значение);
	Если ЧастиАдреса.Регион.Свойство("КодКлассификатора") Тогда
		ПараметрыФормы.Вставить("РегионКодКлассификатора", ЧастиАдреса.Регион.КодКлассификатора);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Район", ЧастиАдреса.Район.Значение);
	Если ЧастиАдреса.Район.Свойство("КодКлассификатора") Тогда
		ПараметрыФормы.Вставить("РайонКодКлассификатора", ЧастиАдреса.Район.КодКлассификатора);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Город", ЧастиАдреса.Город.Значение);
	Если ЧастиАдреса.Город.Свойство("КодКлассификатора") Тогда
		ПараметрыФормы.Вставить("ГородКодКлассификатора", ЧастиАдреса.Город.КодКлассификатора);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НаселенныйПункт", ЧастиАдреса.НаселенныйПункт.Значение);
	Если ЧастиАдреса.НаселенныйПункт.Свойство("КодКлассификатора") Тогда
		ПараметрыФормы.Вставить("НаселенныйПунктКодКлассификатора", ЧастиАдреса.НаселенныйПункт.КодКлассификатора);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Уровень", Уровень);
	
	МодульКЛАДР = КлиентскийМодульКЛАДР();
	МодульКЛАДР.ОткрытьФормуВыбораКЛАДР(ПараметрыФормы, Элемент);
КонецПроцедуры

Функция НаименованиеНаселенногоПунктаПоЧастямАдресаКЛАДР(ЧастиАдреса)
	Возврат КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
		ЗначениеИлиНаименование(ЧастиАдреса.НаселенныйПункт), "", 
		ЗначениеИлиНаименование(ЧастиАдреса.Город), "", 
		ЗначениеИлиНаименование(ЧастиАдреса.Район), "", 
		ЗначениеИлиНаименование(ЧастиАдреса.Регион), "", );
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗначениеИлиНаименование(ЧастьАдреса)
	Если ПустаяСтрока(ЧастьАдреса.Значение) Тогда
		Возврат СокрЛП("" + ЧастьАдреса.Наименование + " " + ЧастьАдреса.Сокращение);
	КонецЕсли;
	Возврат ЧастьАдреса.Значение;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнение адреса другим адресом
Процедура ЗаполнитьАдрес(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат)
	
	// Все строки - адреса,
	ВсеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", НайденнаяСтрока.Тип, Ложь) );
	НайденныеСтроки.Удалить( НайденныеСтроки.Найти(НайденнаяСтрока) );
	
	ЗначенияПолейДляАнализа = Новый Массив;
	Для Каждого Адрес Из НайденныеСтроки Цикл
		ЗначенияПолейДляАнализа.Добавить(Новый Структура("Идентификатор, Представление, ЗначениеПолей, ВидАдреса",
			Адрес.ПолучитьИдентификатор(), Адрес.Представление, Адрес.ЗначенияПолей, Адрес.Вид));
	КонецЦикла;
	
	АдресаДляЗаполнения = КонтактнаяИнформацияСлужебныйВызовСервера.ДоступныеДляКопированияАдреса(ЗначенияПолейДляАнализа, НайденнаяСтрока.Вид);
		
	Если АдресаДляЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьАдресЗавершение", ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент"), Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
	Оповещение.ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизита",    ИмяРеквизита);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",       Результат);
	Оповещение.ДополнительныеПараметры.Вставить("КомментарийПустой", ПустаяСтрока(НайденнаяСтрока.Комментарий));
	
	Форма.ПоказатьВыборИзМеню(Оповещение, АдресаДляЗаполнения, Форма.Элементы["Команда" + ИмяРеквизита]);
КонецПроцедуры

// Завершение немодального диалога
Процедура ЗаполнитьАдресЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСтроки = ДополнительныеПараметры.Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	СтрокаИсточник = ВсеСтроки.НайтиПоИдентификатору(ВыбранныйЭлемент.Значение);
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры.НайденнаяСтрока.ЗначенияПолей = СтрокаИсточник.ЗначенияПолей;
	ДополнительныеПараметры.НайденнаяСтрока.Представление = СтрокаИсточник.Представление;
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий   = СтрокаИсточник.Комментарий;
		
	ДополнительныеПараметры.Форма[ДополнительныеПараметры.ИмяРеквизита] = СтрокаИсточник.Представление;
		
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	
	Если ДополнительныеПараметры.КомментарийПустой И ЗначениеЗаполнено(СтрокаИсточник.Комментарий) Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
	ИначеЕсли НЕ ДополнительныеПараметры.КомментарийПустой И ПустаяСтрока(СтрокаИсточник.Комментарий) Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
	ИначеЕсли НЕ ДополнительныеПараметры.КомментарийПустой И ЗначениеЗаполнено(СтрокаИсточник.Комментарий) Тогда
		Комментарий = ДополнительныеПараметры.Форма.Элементы["Комментарий" + ДополнительныеПараметры.ИмяРеквизита];
		Комментарий.Заголовок = СтрокаИсточник.Комментарий;
	КонецЕсли;
	
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат);

КонецПроцедуры

// Ввод комментария из контекстного меню
Процедура ВвестиКомментарий(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат)
	Комментарий = НайденнаяСтрока.Комментарий;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиКомментарийЗавершение", ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент"), Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментария", "Комментарий" + ИмяРеквизита);
	Оповещение.ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	Оповещение.ДополнительныеПараметры.Вставить("ПредыдущийКомментарий", Комментарий);
	Оповещение.ДополнительныеПараметры.Вставить("Результат", Результат);
	
	//ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Комментарий, 
	//	НСтр("ru = 'Комментарий'"));
КонецПроцедуры

// Завершение немодального диалога
Процедура ВвестиКомментарийЗавершение(Знач Комментарий, Знач ДополнительныеПараметры) Экспорт
	Если Комментарий = Неопределено Или Комментарий = ДополнительныеПараметры.ПредыдущийКомментарий Тогда
		// Отказ от ввода или нет изменений
		Возврат;
	КонецЕсли;
	
	КомментарийБылПустой  = ПустаяСтрока(ДополнительныеПараметры.ПредыдущийКомментарий);
	КомментарийСталПустой = ПустаяСтрока(Комментарий);
	
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий = Комментарий;
	
	Если КомментарийБылПустой И Не КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
	ИначеЕсли Не КомментарийБылПустой И КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
	Иначе
		Элемент = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяРеквизитаКомментария];
		Элемент.Заголовок = Комментарий;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат)
КонецПроцедуры

// Контекстный вызов
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат)

	Форма.ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

Функция ЭтоТабличнаяЧасть(Элемент)
	
	Родитель = Элемент.Родитель;
	
	Пока ТипЗнч(Родитель) <> Тип("УправляемаяФорма") Цикл
		
		Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Открывает форму загрузки адресного классификатора.
//
Процедура ПриЗагрузкеАдресногоКлассификатора() Экспорт
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АдресныйКлассификаторКлиент");
		МодульАдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
