Функция РассчитатьЛефтРайтКейКатегорий()
	Запрос = Новый запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ГруппыНоменклатурыДляСайта.Ссылка КАК Ссылка,
	                |	ГруппыНоменклатурыДляСайта.Ссылка КАК КоличествоКатегорий,
	                |	ГруппыНоменклатурыДляСайта.ПорядокСортировки КАК ПорядокСортировки
	                |ИЗ
	                |	Справочник.ГруппыНоменклатурыДляСайта КАК ГруппыНоменклатурыДляСайта
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ПорядокСортировки,
	                |	Ссылка
	                |ИТОГИ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоКатегорий)
	                |ПО
	                |	Ссылка ИЕРАРХИЯ
	                |АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЭтоПервыйРаз = Истина;
	
	МассивУжеБыли = Новый Массив;
	
	Для Каждого СтрокаДерева из Дерево.Строки Цикл
		ПолучитьLeftRightKey(СтрокаДерева,МассивУжеБыли);
	КонецЦикла;
КонецФункции

Функция ПолучитьСтрокуДляПередачиНаСайт(Знач СтрокаКПреобразованию)
	
	СтрокаКПреобразованию = СтрЗаменить(СтрокаКПреобразованию, Символы.ПС, "<br>");
	Возврат СтрокаКПреобразованию;
	
КонецФункции	

Функция ПолучитьLeftRightKey(СтрокаДерева,МассивУжеБыли)
	
	Если МассивУжеБыли.Найти(СтрокаДерева.Ссылка) <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивУжеБыли.Добавить(СтрокаДерева.Ссылка);
	Если ТипЗнч(СтрокаДерева.КоличествоКатегорий) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	//1) проверяем, вдруг строка верхнего уровня
	РодительскаяСтрока = СтрокаДерева.Родитель;
	
	
	//2) Ищем соседа
	
	Если РодительскаяСтрока <> Неопределено Тогда
		ИндексСтроки = РодительскаяСтрока.Строки.Индекс(СтрокаДерева);
	Иначе
		Дерево = СтрокаДерева.Владелец();
		ИндексСтроки = Дерево.Строки.Индекс(СтрокаДерева);
	КонецЕсли;
	
	Если ИндексСтроки = 0 Тогда//Соседа нету, значит добавляем +1 к родителю
		Если ЗначениеЗаполнено(РодительскаяСтрока) Тогда
			НашLeft_Key = РодительскаяСтрока.ссылка.left_key+1;
		Иначе
			НашLeft_Key = 1;
		КонецЕсли;
		
	Иначе
		Если РодительскаяСтрока <> Неопределено Тогда
			СоседскаяСтрока = РодительскаяСтрока.Строки[ИндексСтроки-1];
		Иначе
			СоседскаяСтрока = Дерево.Строки[ИндексСтроки-1];
		КонецЕсли;
		
		НашLeft_Key = СоседскаяСтрока.Ссылка.right_key + 1;
	КонецЕсли;
	НашRight_Key = НашLeft_Key +((СтрокаДерева.КоличествоКатегорий-1)*2)+1;
	
	Если СтрокаДерева.Ссылка.left_key <> НашLeft_Key
		ИЛИ СтрокаДерева.Ссылка.right_key <> Нашright_Key Тогда
		Об = Строкадерева.Ссылка.ПолучитьОБъект();
		Об.left_key = НашLeft_Key;
		Об.right_key = Нашright_Key;
		Об.Записать();
	КонецЕсли;
	спУд = новый СписокЗначений();
	Для Каждого ПодчиненнаяСтрокаДерева из СтрокаДерева.Строки Цикл
		УдалитьДвойниковИзДерева(ПодчиненнаяСтрокаДерева,МассивУжеБыли,спУд);
	КонецЦикла;
	
	Для Каждого ЭлСпУд из спУд Цикл
		Строкадерева.строки.Удалить(ЭлСпУд.Значение);
	КонецЦикла;
	
	
	Для Каждого ПодчиненнаяСтрокаДерева из СтрокаДерева.Строки Цикл
		ПолучитьLeftRightKey(ПодчиненнаяСтрокаДерева,МассивУжеБыли);
	КонецЦикла;
КонецФункции

Функция УдалитьДвойниковИзДерева(СтрокаДерева,МассивУжеБыли,спУд)
	
	Если МассивУжеБыли.Найти(СтрокаДерева.Ссылка) <> Неопределено Тогда
		спУд.Добавить(СтрокаДерева);
	КонецЕсли;
КонецФункции

Функция ПолучитьКатегории(Параметры) Экспорт
	
	РассчитатьЛефтРайтКейКатегорий();
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("conditions");
	ТаблицаКВозврату.Колонки.Добавить("depth");
	ТаблицаКВозврату.Колонки.Добавить("full_url");
	ТаблицаКВозврату.Колонки.Добавить("id");
	ТаблицаКВозврату.Колонки.Добавить("left_key");
	ТаблицаКВозврату.Колонки.Добавить("right_key");
	ТаблицаКВозврату.Колонки.Добавить("url");
	ТаблицаКВозврату.Колонки.Добавить("meta_title");
	ТаблицаКВозврату.Колонки.Добавить("meta_keywords");
	ТаблицаКВозврату.Колонки.Добавить("meta_description");
	ТаблицаКВозврату.Колонки.Добавить("name");
	ТаблицаКВозврату.Колонки.Добавить("description");
	ТаблицаКВозврату.Колонки.Добавить("include_sub_categories");
	ТаблицаКВозврату.Колонки.Добавить("parent_id");
	ТаблицаКВозврату.Колонки.Добавить("status");
	ТаблицаКВозврату.Колонки.Добавить("sort_products");
	ТаблицаКВозврату.Колонки.Добавить("filter");
	ТаблицаКВозврату.Колонки.Добавить("type");
	ТаблицаКВозврату.Колонки.Добавить("create_datetime");
	ТаблицаКВозврату.Колонки.Добавить("edit_datetime");
	
	ТаблицаКВозврату.Колонки.Добавить("Ссылка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыНоменклатурыДляСайта.Ссылка,
	               |	ГруппыНоменклатурыДляСайта.Наименование,
	               |	ГруппыНоменклатурыДляСайта.ИД,
	               |	ЕСТЬNULL(ГруппыНоменклатурыДляСайта.Родитель.ИД, 0) КАК РодительИД,
	               |	ГруппыНоменклатурыДляСайта.ПометкаУдаления,
	               |	ГруппыНоменклатурыДляСайта.left_key,
	               |	ГруппыНоменклатурыДляСайта.right_key,
	               |	ГруппыНоменклатурыДляСайта.Описание,
	               |	ГруппыНоменклатурыДляСайта.ВыводитьНаВитринуНоменклатуруПодкатегорий
	               |ИЗ
	               |	Справочник.ГруппыНоменклатурыДляСайта КАК ГруппыНоменклатурыДляСайта";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ТекДата = ТекущаяДата();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаКВозврату.Добавить();
		СтрокаДоб.depth = Выборка.Ссылка.Уровень() + 1;
		СтрокаДоб.conditions = NULL;
		СтрокаДоб.url = Формат(Выборка.ИД, "ЧГ=0");
		//СтрокаДоб.meta_title = "";
		//СтрокаДоб.meta_keywords = "";
		//СтрокаДоб.meta_description = "";
		СтрокаДоб.description = СокрЛП(Выборка.Описание);
		СтрокаДоб.include_sub_categories = ?(Выборка.ВыводитьНаВитринуНоменклатуруПодкатегорий, 1, 0);
		СтрокаДоб.sort_products = "Count Desc";
		СтрокаДоб.filter = NULL;
		СтрокаДоб.type = 0;
		СтрокаДоб.id = Выборка.ИД;
		СтрокаДоб.left_key = Выборка.left_key;
		СтрокаДоб.right_key = Выборка.right_key;
		СтрокаДоб.name = Выборка.Наименование;
		СтрокаДоб.parent_id = Выборка.РодительИД;
		СтрокаДоб.status = ?(Выборка.ПометкаУдаления = Ложь, 1, 0);
		СтрокаДоб.create_datetime = ТекДата;
		СтрокаДоб.edit_datetime = ТекДата;
		
		СтрокаДоб.full_url = Формат(Выборка.ИД, "ЧГ=0");
		
		СтрокаДоб.Ссылка = Выборка.Ссылка;
	КонецЦикла;	
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
	
КонецФункции	

Функция ПолучитьКатегорииНоменклатуры(Параметры) Экспорт
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("category_id");
	ТаблицаКВозврату.Колонки.Добавить("product_id");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov,
	               |	Номенклатура.ГруппаНоменклатуры.ИД
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка В
	               |			(ВЫБРАТЬ
	               |				НоменклатураВыгруженнаяНаСайт.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.НоменклатураВыгруженнаяНаСайт КАК НоменклатураВыгруженнаяНаСайт)";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаКВозврату.Добавить();
		СтрокаДоб.category_id = Выборка.ГруппаНоменклатурыИД;
		СтрокаДоб.product_id = Выборка.id_tov;
	КонецЦикла;	
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
	
КонецФункции

Функция ПолучитьТовары(Параметры) Экспорт
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("compare_price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("count",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("create_datetime");
	ТаблицаКВозврату.Колонки.Добавить("currency");
	ТаблицаКВозврату.Колонки.Добавить("edit_datetime");
	ТаблицаКВозврату.Колонки.Добавить("ext");
	ТаблицаКВозврату.Колонки.Добавить("id");
	ТаблицаКВозврату.Колонки.Добавить("max_price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("min_price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("url");
	ТаблицаКВозврату.Колонки.Добавить("meta_title");
	ТаблицаКВозврату.Колонки.Добавить("category_id");
	ТаблицаКВозврату.Колонки.Добавить("meta_keywords");
	ТаблицаКВозврату.Колонки.Добавить("summary");
	ТаблицаКВозврату.Колонки.Добавить("meta_description");
	ТаблицаКВозврату.Колонки.Добавить("name");
	ТаблицаКВозврату.Колонки.Добавить("tax_id");
	ТаблицаКВозврату.Колонки.Добавить("description");
	ТаблицаКВозврату.Колонки.Добавить("image_id");
	ТаблицаКВозврату.Колонки.Добавить("sku_id");
	ТаблицаКВозврату.Колонки.Добавить("status");
	ТаблицаКВозврату.Колонки.Добавить("sku_type");
	ТаблицаКВозврату.Колонки.Добавить("type_id");
	ТаблицаКВозврату.Колонки.Добавить("cross_selling");
	ТаблицаКВозврату.Колонки.Добавить("upselling");
	ТаблицаКВозврату.Колонки.Добавить("sku_count");
	
	ТаблицаКВозврату.Колонки.Добавить("Номенклатура");
	ТаблицаКВозврату.Колонки.Добавить("Ссылка");
	ТаблицаКВозврату.Колонки.Добавить("ТоварПомеченНаУдаление");
	ТаблицаКВозврату.Колонки.Добавить("Весовой");
	ТаблицаКВозврату.Колонки.Добавить("ОднаУпаковкаСодержит");
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка,
	               |	НоменклатураСпр.ПометкаУдаления,
	               |	НоменклатураСпр.Наименование,
	               |	НоменклатураСпр.id_tov,
	               |	НоменклатураСпр.ВыгружатьНаСайт,
	               |	НоменклатураСпр.ГруппаНоменклатуры,
	               |	НоменклатураСпр.ГруппаНоменклатуры.ИД,
	               |	НоменклатураСпр.МассаУпаковки,
	               |	НоменклатураСпр.Состав,
	               |	НоменклатураСпр.ПищеваяЦенность,
	               |	НоменклатураСпр.СрокГодности,
	               |	НоменклатураСпр.Описание,
	               |	НоменклатураСпр.ТехнологияПроизводства,
	               |	НоменклатураСпр.ЧемУникально,
	               |	НоменклатураСпр.Рецепт,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	ЕСТЬNULL(ВЗ_ОснКартинки.Расширение, """") КАК РасширениеОсновнаяКартинка,
	               |	ЕСТЬNULL(ВЗ_ОснКартинки.ИД, NULL) КАК ИдОсновнаяКартинка,
	               |	НоменклатураСпр.ЕдиницаХраненияОстатков,
	               |	НоменклатураСпр.Весовой,
	               |	НоменклатураСпр.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				,
	               |				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НоменклатураКартинки.Ссылка КАК Ссылка,
	               |			НоменклатураКартинки.Расширение КАК Расширение,
	               |			НоменклатураКартинки.ИД КАК ИД,
	               |			НоменклатураКартинки.Размер КАК Размер
	               |		ИЗ
	               |			Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					НоменклатураКартинки.Ссылка КАК Ссылка,
	               |					МАКСИМУМ(НоменклатураКартинки.НомерСтроки) КАК НомерСтроки
	               |				ИЗ
	               |					Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	               |				ГДЕ
	               |					НоменклатураКартинки.ЭтоОсновноеИзображение = ИСТИНА
	               |					И НоменклатураКартинки.Ссылка.ВыгружатьНаСайт = ИСТИНА
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					НоменклатураКартинки.Ссылка) КАК ВЗ_Макс
	               |				ПО НоменклатураКартинки.Ссылка = ВЗ_Макс.Ссылка
	               |					И НоменклатураКартинки.НомерСтроки = ВЗ_Макс.НомерСтроки) КАК ВЗ_ОснКартинки
	               |		ПО НоменклатураСпр.Ссылка = ВЗ_ОснКартинки.Ссылка
	               |ГДЕ
	               |	НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И НоменклатураСпр.Ссылка В
	               |			(ВЫБРАТЬ
	               |				НоменклатураВыгруженнаяНаСайт.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.НоменклатураВыгруженнаяНаСайт КАК НоменклатураВыгруженнаяНаСайт)";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ТекДата = ТекущаяДата();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаКВозврату.Добавить();
		СтрокаДоб.create_datetime = ТекДата;
		СтрокаДоб.count = 0;
		СтрокаДоб.currency = "RUB";
		СтрокаДоб.edit_datetime = ТекДата;
		СтрокаДоб.ext = СтрЗаменить(Выборка.РасширениеОсновнаяКартинка,".","");
		Если НЕ ЗначениеЗаполнено(СтрокаДоб.ext) Тогда
			СтрокаДоб.ext = NULL;
		КонецЕсли;	
		//СтрокаДоб.meta_title = "";
		//СтрокаДоб.meta_keywords = "";
		//СтрокаДоб.meta_description = "";
		СтрокаДоб.summary = "";
		СтрокаДоб.id = Выборка.id_tov;
		СтрокаДоб.status = ?(Выборка.ПометкаУдаления = Ложь И Выборка.ВыгружатьНаСайт, 1, 0);
		СтрокаДоб.max_price = Выборка.Цена * ?(Выборка.ОднаУпаковкаСодержит = 0, 1, Выборка.ОднаУпаковкаСодержит);
		СтрокаДоб.min_price = Выборка.Цена * ?(Выборка.ОднаУпаковкаСодержит = 0, 1, Выборка.ОднаУпаковкаСодержит);
		СтрокаДоб.price = Выборка.Цена * ?(Выборка.ОднаУпаковкаСодержит = 0, 1, Выборка.ОднаУпаковкаСодержит);
		СтрокаДоб.category_id = Выборка.ГруппаНоменклатурыИД;
		СтрокаДоб.name = Выборка.Наименование;
		СтрокаДоб.tax_id = NULL;
		СтрокаДоб.description = ПолучитьСтрокуДляПередачиНаСайт(Выборка.Описание);
		//СтрокаДоб.description = Выборка.Описание
		//			+ Символы.ПС + "Единица измерения: " + Выборка.ЕдиницаХраненияОстатков
		//			+ Символы.ПС + "Масса упаковки: " + Выборка.МассаУпаковки
		//			+ Символы.ПС + "Состав: " + Выборка.Состав
		//			+ Символы.ПС + "Пищевая ценность в 100 г продукта: " + Выборка.ПищеваяЦенность
		//			+ Символы.ПС + "Срок годности: " + Выборка.СрокГодности
		//			+ Символы.ПС + "Технология производства: " + Выборка.ТехнологияПроизводства
		//			+ Символы.ПС + "Чем уникально: " + Выборка.ЧемУникально
		//			+ Символы.ПС + "Рецепт: " + Выборка.Рецепт;
		СтрокаДоб.image_id = Выборка.ИдОсновнаяКартинка;
		СтрокаДоб.sku_id = Выборка.id_tov;
		СтрокаДоб.sku_type = 0;
		СтрокаДоб.type_id = 2;
		СтрокаДоб.cross_selling = NULL;
		СтрокаДоб.upselling = NULL;
		СтрокаДоб.sku_count = 1;
		СтрокаДоб.url = Формат(Выборка.id_tov, "ЧГ=0");
		
		СтрокаДоб.Номенклатура = Выборка.Ссылка;
		СтрокаДоб.Ссылка = Выборка.Ссылка;
		СтрокаДоб.ТоварПомеченНаУдаление = Выборка.ПометкаУдаления;
		СтрокаДоб.Весовой = Выборка.Весовой;
		СтрокаДоб.ОднаУпаковкаСодержит = Выборка.ОднаУпаковкаСодержит;
	КонецЦикла;	
	
	ТаблицаКВозврату.Индексы.Добавить("id");
	
	//получим остатки
	//пока отключил их получение
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ПредзаказТовары.Количество) КАК Количество,
				   |	ПредзаказТовары.Номенклатура.id_tov КАК id_tov
				   |ИЗ
				   |	Документ.Предзаказ.Товары КАК ПредзаказТовары
				   |ГДЕ
				   |	ЛОЖЬ
				   |	И ПредзаказТовары.Ссылка.ДатаПоступления > &ТекДата
				   |	И ПредзаказТовары.Ссылка.ДатаПоступления <= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ), ДЕНЬ, 1)
				   |	И ПредзаказТовары.Ссылка.Проведен = ИСТИНА
				   |	И ПредзаказТовары.Номенклатура.ВыгружатьНаСайт = ИСТИНА
				   |	И ПредзаказТовары.ТорговаяТочка.РаботаетСДоставкой = ИСТИНА
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ПредзаказТовары.Номенклатура.id_tov";
				   
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	ТабОстатки = Запрос.Выполнить().Выгрузить();
	
	///////////////////////////////////////////////////////
	//ЗАКОММЕНТИРОВАТЬ ДЛЯ ТЕСТИРОВАНИЯ
	//считаем остатки через адо
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT Ostatki.ID_tov, SUM(Ostatki.Ost_kon) as Kolvo
				|				  FROM [SMS_repl].[dbo].[td_ost] as Ostatki (nolock)
				|				  INNER JOIN IzbenkaFin.dbo._Reference29 as Tovari (nolock)
				|				 ON Ostatki.ID_tov = Tovari._Fld760
				|				 INNER JOIN IzbenkaFin.dbo._Reference42 as TT (nolock)
				|				 ON Ostatki.ShopNo_rep= TT._Fld2756
				|				 WHERE Ostatki.Ost_kon > 0 and Tovari._Fld4208 = 1 and TT._Fld4250 = 1
                |
				|group by Ostatki.ID_tov";
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДанные = ТабОстатки.Найти(Rs.Fields("ID_tov").Value, "ID_tov");
			Если СтрокаДанные = Неопределено Тогда
				СтрокаДанные = ТабОстатки.Добавить();
				СтрокаДанные.ID_tov 		= Rs.Fields("ID_tov").Value;
				СтрокаДанные.Количество = 0;
			КонецЕсли;	
			СтрокаДанные.Количество 		= СтрокаДанные.Количество + Rs.Fields("Kolvo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	
	//КОНЕЦ КОММЕНТИРОВАНИЯ ДЛЯ ТЕСТИРОВАНИЯ
	////////////////////////////////////////////
	Для Каждого СтрокаОстаток Из ТабОстатки Цикл
		СтрокаТовар = ТаблицаКВозврату.Найти(СтрокаОстаток.ID_tov, "id");
		СтрокаТовар.count = СтрокаТовар.count + СтрокаОстаток.Количество;
		СтрокаТовар.count = Цел(СтрокаТовар.count / ?(СтрокаТовар.ОднаУпаковкаСодержит = 0, 1, СтрокаТовар.ОднаУпаковкаСодержит));	
	КонецЦикла;	
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
	//Возврат ТаблицаКВозврату;
	
КонецФункции

Функция ПолучитьВарианты(Параметры) Экспорт
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("compare_price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("count",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("dimension_id");
	ТаблицаКВозврату.Колонки.Добавить("file_description");
	ТаблицаКВозврату.Колонки.Добавить("file_name");
	ТаблицаКВозврату.Колонки.Добавить("file_size");
	ТаблицаКВозврату.Колонки.Добавить("id");
	ТаблицаКВозврату.Колонки.Добавить("price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("primary_price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("purchase_price",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("sku");
	ТаблицаКВозврату.Колонки.Добавить("virtual");
	ТаблицаКВозврату.Колонки.Добавить("product_id",Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("available");
	ТаблицаКВозврату.Колонки.Добавить("name");
	ТаблицаКВозврату.Колонки.Добавить("image_id");
	ТаблицаКВозврату.Колонки.Добавить("sort");
	
	ТаблицаКВозврату.Колонки.Добавить("Номенклатура");
	ТаблицаКВозврату.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаКВозврату.Колонки.Добавить("Ссылка");
	ТаблицаКВозврату.Колонки.Добавить("Весовой");
	ТаблицаКВозврату.Колонки.Добавить("ОднаУпаковкаСодержит");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка,
	               |	НоменклатураСпр.ПометкаУдаления,
	               |	НоменклатураСпр.Наименование,
	               |	НоменклатураСпр.id_tov,
	               |	НоменклатураСпр.ВыгружатьНаСайт,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	НоменклатураСпр.Весовой,
	               |	НоменклатураСпр.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				,
	               |				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И НоменклатураСпр.Ссылка В
	               |			(ВЫБРАТЬ
	               |				НоменклатураВыгруженнаяНаСайт.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.НоменклатураВыгруженнаяНаСайт КАК НоменклатураВыгруженнаяНаСайт)";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ТекДата = ТекущаяДата();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаКВозврату.Добавить();
		СтрокаДоб.count = 0;
		СтрокаДоб.dimension_id = NULL;
		СтрокаДоб.sku = "";
		СтрокаДоб.file_description = "";
		СтрокаДоб.file_name = "";
		СтрокаДоб.file_size = "";
		СтрокаДоб.id = Выборка.id_tov;
		СтрокаДоб.available = ?(Выборка.ПометкаУдаления = Ложь И Выборка.ВыгружатьНаСайт, 1, 0);
		СтрокаДоб.price = Выборка.Цена * ?(Выборка.ОднаУпаковкаСодержит = 0, 1, Выборка.ОднаУпаковкаСодержит);
		СтрокаДоб.primary_price = Выборка.Цена * ?(Выборка.ОднаУпаковкаСодержит = 0, 1, Выборка.ОднаУпаковкаСодержит);
		СтрокаДоб.name = Выборка.Наименование;
		СтрокаДоб.virtual = 0;
		СтрокаДоб.image_id = 0;
		СтрокаДоб.sort = 0;
		СтрокаДоб.product_id = Выборка.id_tov;
		
		СтрокаДоб.Номенклатура = Выборка.Ссылка;
		СтрокаДоб.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтрокаДоб.Ссылка = Выборка.Ссылка;
		СтрокаДоб.Весовой = Выборка.Весовой;
		СтрокаДоб.ОднаУпаковкаСодержит = Выборка.ОднаУпаковкаСодержит;
	КонецЦикла;	
	
	ТаблицаКВозврату.Индексы.Добавить("id");
	
	//получим остатки
	//пока отключил
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ПредзаказТовары.Количество) КАК Количество,
				   |	ПредзаказТовары.Номенклатура.id_tov КАК id_tov
				   |ИЗ
				   |	Документ.Предзаказ.Товары КАК ПредзаказТовары
				   |ГДЕ
				   |	ЛОЖЬ
				   |	И ПредзаказТовары.Ссылка.ДатаПоступления > &ТекДата
				   |	И ПредзаказТовары.Ссылка.ДатаПоступления <= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ), ДЕНЬ, 1)
				   |	И ПредзаказТовары.Ссылка.Проведен = ИСТИНА
				   |	И ПредзаказТовары.Номенклатура.ВыгружатьНаСайт = ИСТИНА
				   |	И ПредзаказТовары.ТорговаяТочка.РаботаетСДоставкой = ИСТИНА
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ПредзаказТовары.Номенклатура.id_tov";
				   
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	ТабОстатки = Запрос.Выполнить().Выгрузить();
	
	///////////////////////////////////////////////////////
	//ЗАКОММЕНТИРОВАТЬ ДЛЯ ТЕСТИРОВАНИЯ
	//считаем остатки через адо
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT Ostatki.ID_tov, SUM(Ostatki.Ost_kon) as Kolvo
				|				  FROM [SMS_repl].[dbo].[td_ost] as Ostatki (nolock)
				|				  INNER JOIN IzbenkaFin.dbo._Reference29 as Tovari (nolock)
				|				 ON Ostatki.ID_tov = Tovari._Fld760
				|				 INNER JOIN IzbenkaFin.dbo._Reference42 as TT (nolock)
				|				 ON Ostatki.ShopNo_rep= TT._Fld2756
				|				 WHERE Ostatki.Ost_kon > 0 and Tovari._Fld4208 = 1 and TT._Fld4250 = 1
                |
				|group by Ostatki.ID_tov";
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДанные = ТабОстатки.Найти(Rs.Fields("ID_tov").Value, "ID_tov");
			Если СтрокаДанные = Неопределено Тогда
				СтрокаДанные = ТабОстатки.Добавить();
				СтрокаДанные.ID_tov 		= Rs.Fields("ID_tov").Value;
				СтрокаДанные.Количество = 0;
			КонецЕсли;	
			СтрокаДанные.Количество 		= СтрокаДанные.Количество + Rs.Fields("Kolvo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	
	//КОНЕЦ КОММЕНТИРОВАНИЯ ДЛЯ ТЕСТИРОВАНИЯ
	////////////////////////////////////////////
	Для Каждого СтрокаОстаток Из ТабОстатки Цикл
		СтрокаТовар = ТаблицаКВозврату.Найти(СтрокаОстаток.ID_tov, "id");
		СтрокаТовар.count = СтрокаТовар.count + СтрокаОстаток.Количество;
		СтрокаТовар.count = Цел(СтрокаТовар.count / ?(СтрокаТовар.ОднаУпаковкаСодержит = 0, 1, СтрокаТовар.ОднаУпаковкаСодержит));	
	КонецЦикла;	
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
КонецФункции

Функция ПолучитьОстаткиНоменклатуры(Параметры) Экспорт
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("sku_id", Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("stock_id", Новый ОписаниеТипов("Число"));
	ТаблицаКВозврату.Колонки.Добавить("count", Новый ОписаниеТипов("Число"));
	
	ТаблицаКВозврату.Колонки.Добавить("ПомеченНаУдаление", Новый ОписаниеТипов("Булево"));
	ТаблицаКВозврату.Колонки.Добавить("Ссылка");
	ТаблицаКВозврату.Колонки.Добавить("ОднаУпаковкаСодержит", Новый ОписаниеТипов("Число"));
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка,
	               |	НоменклатураСпр.id_tov,
	               |	НоменклатураСпр.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |ГДЕ
	               |	НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И НоменклатураСпр.Ссылка В
	               |			(ВЫБРАТЬ
	               |				НоменклатураВыгруженнаяНаСайт.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.НоменклатураВыгруженнаяНаСайт КАК НоменклатураВыгруженнаяНаСайт)";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ТекДата = ТекущаяДата();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаКВозврату.Добавить();
		СтрокаДоб.product_id = Выборка.id_tov;
		СтрокаДоб.sku_id = Выборка.id_tov;
		СтрокаДоб.stock_id = 2;
		СтрокаДоб.count = 0;
		СтрокаДоб.Ссылка = Выборка.Ссылка;
		СтрокаДоб.ПомеченНаУдаление = Ложь;
		СтрокаДоб.ОднаУпаковкаСодержит = Выборка.ОднаУпаковкаСодержит;
	КонецЦикла;	
	
	ТаблицаКВозврату.Индексы.Добавить("product_id");
	
	//получим остатки
	//пока отключил
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ПредзаказТовары.Количество) КАК Количество,
				   |	ПредзаказТовары.Номенклатура.id_tov КАК id_tov
				   |ИЗ
				   |	Документ.Предзаказ.Товары КАК ПредзаказТовары
				   |ГДЕ
				   |	ЛОЖЬ
				   |	И ПредзаказТовары.Ссылка.ДатаПоступления > &ТекДата
				   |	И ПредзаказТовары.Ссылка.ДатаПоступления <= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ), ДЕНЬ, 1)
				   |	И ПредзаказТовары.Ссылка.Проведен = ИСТИНА
				   |	И ПредзаказТовары.Номенклатура.ВыгружатьНаСайт = ИСТИНА
				   |	И ПредзаказТовары.ТорговаяТочка.РаботаетСДоставкой = ИСТИНА
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ПредзаказТовары.Номенклатура.id_tov";
				   
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	ТабОстатки = Запрос.Выполнить().Выгрузить();
	
	///////////////////////////////////////////////////////
	//ЗАКОММЕНТИРОВАТЬ ДЛЯ ТЕСТИРОВАНИЯ
	//считаем остатки через адо
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT Ostatki.ID_tov, SUM(Ostatki.Ost_kon) as Kolvo
				|				  FROM [SMS_repl].[dbo].[td_ost] as Ostatki (nolock)
				|				  INNER JOIN IzbenkaFin.dbo._Reference29 as Tovari (nolock)
				|				 ON Ostatki.ID_tov = Tovari._Fld760
				|				 INNER JOIN IzbenkaFin.dbo._Reference42 as TT (nolock)
				|				 ON Ostatki.ShopNo_rep= TT._Fld2756
				|				 WHERE Ostatki.Ost_kon > 0 and Tovari._Fld4208 = 1 and TT._Fld4250 = 1
                |
				|group by Ostatki.ID_tov";
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДанные = ТабОстатки.Найти(Rs.Fields("ID_tov").Value, "ID_tov");
			Если СтрокаДанные = Неопределено Тогда
				СтрокаДанные = ТабОстатки.Добавить();
				СтрокаДанные.ID_tov 		= Rs.Fields("ID_tov").Value;
				СтрокаДанные.Количество = 0;
			КонецЕсли;	
			СтрокаДанные.Количество 		= СтрокаДанные.Количество + Rs.Fields("Kolvo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	
	//КОНЕЦ КОММЕНТИРОВАНИЯ ДЛЯ ТЕСТИРОВАНИЯ
	////////////////////////////////////////////
	Для Каждого СтрокаОстаток Из ТабОстатки Цикл
		СтрокаТовар = ТаблицаКВозврату.Найти(СтрокаОстаток.ID_tov, "product_id");
		СтрокаТовар.count = СтрокаТовар.count + СтрокаОстаток.Количество;
		СтрокаТовар.count = Цел(СтрокаТовар.count / ?(СтрокаТовар.ОднаУпаковкаСодержит = 0, 1, СтрокаТовар.ОднаУпаковкаСодержит));	
	КонецЦикла;	
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
КонецФункции

Функция ПолучитьКартинкиНоменклатуры(Параметры) Экспорт
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("id");
	ТаблицаКВозврату.Колонки.Добавить("product_id");
	ТаблицаКВозврату.Колонки.Добавить("height");
	ТаблицаКВозврату.Колонки.Добавить("original_filename");
	ТаблицаКВозврату.Колонки.Добавить("description");
	ТаблицаКВозврату.Колонки.Добавить("size");
	ТаблицаКВозврату.Колонки.Добавить("ext");
	ТаблицаКВозврату.Колонки.Добавить("sort");
	ТаблицаКВозврату.Колонки.Добавить("width");
	
	ТаблицаКВозврату.Колонки.Добавить("Ссылка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураКартинки.Ссылка.id_tov КАК id_tov,
	               |	НоменклатураКартинки.Расширение,
	               |	НоменклатураКартинки.ИД,
	               |	НоменклатураКартинки.Размер,
	               |	НоменклатураКартинки.КлючСтроки,
	               |	НоменклатураКартинки.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	               |ГДЕ
	               |	НоменклатураКартинки.Ссылка.ВыгружатьНаСайт = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	id_tov";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаКВозврату.Добавить();
		СтрокаДоб.id = Выборка.ИД;
		СтрокаДоб.product_id = Выборка.id_tov;
		СтрокаДоб.height = 0;
		СтрокаДоб.original_filename = КаталогКЗаписи + Выборка.Ссылка.УникальныйИдентификатор() + "_" + Строка(Выборка.КлючСтроки) + ?(Лев(Выборка.Расширение, 1) = ".", "", ".") + Выборка.Расширение;
		СтрокаДоб.description = "";
		СтрокаДоб.size = Выборка.Размер;
		СтрокаДоб.ext = СтрЗаменить(Выборка.Расширение, ".","");
		СтрокаДоб.width = 0;
		СтрокаДоб.sort = 0;
		
		СтрокаДоб.Ссылка = Выборка.Ссылка;
	КонецЦикла;	
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
	
КонецФункции	

Функция ПолучитьДопХарактеристики(Параметры) Экспорт
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("id");
	ТаблицаКВозврату.Колонки.Добавить("selectable");
	ТаблицаКВозврату.Колонки.Добавить("multiple");
	ТаблицаКВозврату.Колонки.Добавить("type");
	ТаблицаКВозврату.Колонки.Добавить("name");
	ТаблицаКВозврату.Колонки.Добавить("code");
	ТаблицаКВозврату.Колонки.Добавить("parent_id");
	
	ТаблицаКВозврату.Колонки.Добавить("Ссылка");
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 1;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Масса упаковки";
	СтрокаТаб.code = "MassaUpakovki";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 2;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Состав";
	СтрокаТаб.code = "Sostav";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 3;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Пищевая ценность";
	СтрокаТаб.code = "Pishevaya cennost";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 4;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Срок годности";
	СтрокаТаб.code = "SrokGodnosti";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 5;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Описание";
	СтрокаТаб.code = "Opisanie";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 6;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Технология производства";
	СтрокаТаб.code = "TehnologiyaProizvodstva";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 7;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Чем уникально";
	СтрокаТаб.code = "ChemUnikalno";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 8;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Рецепт";
	СтрокаТаб.code = "Recept";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 9;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Вес";
	СтрокаТаб.code = "weight";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 10;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Единица измерения";
	СтрокаТаб.code = "EdIzm";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 11;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "В одной упаковке кг";
	СтрокаТаб.code = "VOdnoyUpakovke";
	СтрокаТаб.parent_id = NULL;
	
	СтрокаТаб = ТаблицаКВозврату.Добавить();
	СтрокаТаб.id = 12;
	СтрокаТаб.selectable = 0;
	СтрокаТаб.multiple = 0;
	СтрокаТаб.type = "varchar";
	СтрокаТаб.name = "Цена за единицу";
	СтрокаТаб.code = "PriceForOne";
	СтрокаТаб.parent_id = NULL;
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
	
КонецФункции	

Функция ПолучитьЗначенияДопХарактеристик(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеХарактеристикДляСайта.Значение,
	               |	СоответствиеХарактеристикДляСайта.Значение КАК ЗначениеНРег,
	               |	СоответствиеХарактеристикДляСайта.id,
	               |	СоответствиеХарактеристикДляСайта.id_Вида
	               |ИЗ
	               |	РегистрСведений.СоответствиеХарактеристикДляСайта КАК СоответствиеХарактеристикДляСайта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СоответствиеХарактеристикДляСайта.id) КАК id
	               |ИЗ
	               |	РегистрСведений.СоответствиеХарактеристикДляСайта КАК СоответствиеХарактеристикДляСайта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураСпр.МассаУпаковки,
	               |	НоменклатураСпр.Состав,
	               |	НоменклатураСпр.ПищеваяЦенность,
	               |	НоменклатураСпр.СрокГодности,
	               |	НоменклатураСпр.Описание,
	               |	НоменклатураСпр.ТехнологияПроизводства,
	               |	НоменклатураСпр.ЧемУникально,
	               |	НоменклатураСпр.Рецепт,
	               |	НоменклатураСпр.ЕдиницаХраненияОстатков.Вес КАК Вес,
	               |	НоменклатураСпр.ЕдиницаИзмеренияДляСайта КАК ЕдИзм,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	НоменклатураСпр.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				,
	               |				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НоменклатураСпр.ПометкаУдаления = ЛОЖЬ
	               |	И НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И НоменклатураСпр.ВыгружатьНаСайт = ИСТИНА";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабЗначения = Результаты[0].Выгрузить();
	
	Для Каждого СтрокаТаб Из ТабЗначения Цикл
		СтрокаТаб.ЗначениеНРег = НРег(СтрокаТаб.Значение);
	КонецЦикла;	
	
	ТабЗначения.Индексы.Добавить("id_Вида, ЗначениеНРег");
	
	ТабМаксЗначения = Результаты[1].Выгрузить();
	Если ТабМаксЗначения.Количество() = 0 Тогда
		СтрокаМаксЗначение = ТабМаксЗначения.Добавить();
		СтрокаМаксЗначение.id = 0;
	ИначеЕсли ТипЗнч(ТабМаксЗначения[0].id) <> Тип("Число") Тогда
		СтрокаМаксЗначение = ТабМаксЗначения[0];
		СтрокаМаксЗначение.id = 0;
	Иначе
		СтрокаМаксЗначение = ТабМаксЗначения[0];
	КонецЕсли;	
	
	Выборка = Результаты[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.МассаУпаковки) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 1, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.МассаУпаковки)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 1;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.МассаУпаковки));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 1;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Состав) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 2, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.Состав)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 2;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.Состав));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 2;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ПищеваяЦенность) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 3, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ПищеваяЦенность)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 3;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.ПищеваяЦенность));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 3;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СрокГодности) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 4, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.СрокГодности)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 4;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.СрокГодности));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 4;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Описание) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 5, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.Описание)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 5;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.Описание));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 5;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ТехнологияПроизводства) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 6, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ТехнологияПроизводства)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 6;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.ТехнологияПроизводства));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 6;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЧемУникально) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 7, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ЧемУникально)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 7;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.ЧемУникально));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 7;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Рецепт) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 8, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.Рецепт)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 8;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.Рецепт));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 8;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Вес) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 9, Формат(Выборка.Вес, "ЧРД=.; ЧГ=0")));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 9;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = Формат(Выборка.Вес, "ЧРД=.; ЧГ=0");
				СтрокаДоб.ЗначениеНРег = Формат(Выборка.Вес, "ЧРД=.; ЧГ=0");
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 9;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЕдИзм) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 10, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ЕдИзм)))));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 10;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = ПолучитьСтрокуДляПередачиНаСайт(СокрЛП(Выборка.ЕдИзм));
				СтрокаДоб.ЗначениеНРег = НРег(СтрокаДоб.Значение);
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 10;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Выборка.ОднаУпаковкаСодержит) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 11, Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧГ=0")));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 11;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧГ=0");
				СтрокаДоб.ЗначениеНРег = Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧГ=0");
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 11;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 12, Формат(Выборка.Цена, "ЧРД=.; ЧГ=0")));
			Если СтрокиЗначений.Количество() = 0 Тогда
				СтрокаМаксЗначение.id = СтрокаМаксЗначение.id + 1;
				СтрокаДоб = ТабЗначения.Добавить();
				СтрокаДоб.id_Вида = 12;
				СтрокаДоб.id = СтрокаМаксЗначение.id;
				СтрокаДоб.Значение = Формат(Выборка.Цена, "ЧРД=.; ЧГ=0");
				СтрокаДоб.ЗначениеНРег = Формат(Выборка.Цена, "ЧРД=.; ЧГ=0");
				Запись = РегистрыСведений.СоответствиеХарактеристикДляСайта.СоздатьМенеджерЗаписи();
				Запись.id_Вида = 12;
				Запись.id = СтрокаМаксЗначение.id;
				Запись.Значение = СтрокаДоб.Значение;
				Запись.Записать();
			КонецЕсли;	
		//КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("id");
	ТаблицаКВозврату.Колонки.Добавить("feature_id");
	ТаблицаКВозврату.Колонки.Добавить("value");
	ТаблицаКВозврату.Колонки.Добавить("sort");
	
	ТаблицаКВозврату.Колонки.Добавить("Ссылка");
	
	Для Каждого СтрокаТаб Из ТабЗначения Цикл
		СтрокаВозврат = ТаблицаКВозврату.Добавить();
		СтрокаВозврат.id = СтрокаТаб.id;
		СтрокаВозврат.feature_id = СтрокаТаб.id_вида;
		СтрокаВозврат.value = СтрокаТаб.Значение;
		СтрокаВозврат.sort = 0;
	КонецЦикла;	
		
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
КонецФункции

Функция ПолучитьЗначенияДопХарактеристикТоваров(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеХарактеристикДляСайта.Значение,
	               |	СоответствиеХарактеристикДляСайта.Значение КАК ЗначениеНРег,
	               |	СоответствиеХарактеристикДляСайта.id,
	               |	СоответствиеХарактеристикДляСайта.id_Вида
	               |ИЗ
	               |	РегистрСведений.СоответствиеХарактеристикДляСайта КАК СоответствиеХарактеристикДляСайта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураСпр.МассаУпаковки,
	               |	НоменклатураСпр.Состав,
	               |	НоменклатураСпр.ПищеваяЦенность,
	               |	НоменклатураСпр.СрокГодности,
	               |	НоменклатураСпр.Описание,
	               |	НоменклатураСпр.ТехнологияПроизводства,
	               |	НоменклатураСпр.ЧемУникально,
	               |	НоменклатураСпр.Рецепт,
	               |	НоменклатураСпр.id_tov,
	               |	НоменклатураСпр.ЕдиницаХраненияОстатков.Вес КАК Вес,
	               |	НоменклатураСпр.ЕдиницаИзмеренияДляСайта КАК ЕдИзм,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	НоменклатураСпр.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				,
	               |				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НоменклатураСпр.ПометкаУдаления = ЛОЖЬ
	               |	И НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И НоменклатураСпр.ВыгружатьНаСайт = ИСТИНА";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабЗначения = Результаты[0].Выгрузить();
	
	Для Каждого СтрокаТаб Из ТабЗначения Цикл
		СтрокаТаб.ЗначениеНРег = НРег(СтрокаТаб.Значение);
	КонецЦикла;	
	
	ТабЗначения.Индексы.Добавить("id, ЗначениеНРег");
	
	ТаблицаКВозврату = Новый ТаблицаЗначений();
	ТаблицаКВозврату.Колонки.Добавить("product_id");
	ТаблицаКВозврату.Колонки.Добавить("sku_id");
	ТаблицаКВозврату.Колонки.Добавить("feature_id");
	ТаблицаКВозврату.Колонки.Добавить("feature_value_id");
	
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.МассаУпаковки) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 1, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.МассаУпаковки)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 1;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Состав) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 2, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.Состав)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 2;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ПищеваяЦенность) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 3, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ПищеваяЦенность)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 3;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СрокГодности) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 4, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.СрокГодности)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 4;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Описание) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 5, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.Описание)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 5;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ТехнологияПроизводства) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 6, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ТехнологияПроизводства)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 6;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЧемУникально) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 7, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ЧемУникально)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 7;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Рецепт) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 8, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.Рецепт)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 8;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Вес) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 9, Формат(Выборка.Вес, "ЧРД=.; ЧГ=0")));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 9;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЕдИзм) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 10, ПолучитьСтрокуДляПередачиНаСайт(НРег(СокрЛП(Выборка.ЕдИзм)))));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 10;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Выборка.ОднаУпаковкаСодержит) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 11, Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧГ=0")));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 11;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(Выборка.Вес) Тогда
			СтрокиЗначений = ТабЗначения.НайтиСтроки(Новый Структура("id_Вида, ЗначениеНРег", 12, Формат(Выборка.Цена, "ЧРД=.; ЧГ=0")));
			Если СтрокиЗначений.Количество() > 0 Тогда
				СтрокаДоб = ТаблицаКВозврату.Добавить();
				СтрокаДоб.product_id = Выборка.id_tov;
				СтрокаДоб.sku_id = NULL;
				СтрокаДоб.feature_id = 12;
				СтрокаДоб.feature_value_id = СтрокиЗначений[0].id;
			КонецЕсли;	
		//КонецЕсли;
		
	КонецЦикла;	
	
	Параметры.Вставить("Таблица1С",ТаблицаКВозврату);
КонецФункции

Процедура ЗагрузитьЗаказыССайта() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_НастройкиОбменаССайтом.Ссылка
	               |ИЗ
	               |	Справочник.CMS1C_НастройкиОбменаССайтом КАК CMS1C_НастройкиОбменаССайтом
	               |ГДЕ
	               |	CMS1C_НастройкиОбменаССайтом.ПометкаУдаления = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкаОбмена = Выборка.Ссылка;
		Обработка = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(НастройкаОбмена.Владелец);
		Обработка.НастройкаСайта = НастройкаОбмена.Владелец;
		Обработка.ЗагрузитьЗаказы(Ложь);
	КонецЦикла;
	
КонецПроцедуры	

Функция ЭтоКопияБазы() Экспорт
	
	СтрСоединения = НРег(СтрокаСоединенияИнформационнойБазы());
	СтрСоединения = СтрЗаменить(СтрСоединения, "10.0.0.40", "srv-sql01");
	СтрСоединения = СтрЗаменить(СтрСоединения, "srv-sql02", "srv-sql01");
	Возврат НРег(Константы.СтрокаПодключенияКБазе.Получить()) <> СтрСоединения;
	
КонецФункции

Процедура ВыгрузкаНоменклатурыНаСайт() Экспорт
	
	Возврат;
	
	Если ЭтоКопияБазы() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_НастройкиОбменаССайтом.Ссылка
	               |ИЗ
	               |	Справочник.CMS1C_НастройкиОбменаССайтом КАК CMS1C_НастройкиОбменаССайтом
	               |ГДЕ
	               |	CMS1C_НастройкиОбменаССайтом.ПометкаУдаления = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		CMS1C_ПроцедурыОбменаССайтомСервер.ВызватьАвтообмен(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗагрузитьЗаказыССайтаРеглЗадание() Экспорт
	
	Возврат;
	
	Если ЭтоКопияБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗаказыССайта();
	
КонецПроцедуры

