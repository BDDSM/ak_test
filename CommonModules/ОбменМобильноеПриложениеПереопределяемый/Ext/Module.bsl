
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ

// Функция выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно проверить.
//			То, что переносится везде, не обрабатывается
//  УзелОбмена - узел плана обмена, куда осуществляется перенос
//
// Возвращаемое значение:
//  Перенос - булево, если Истина - необходимо выполнять перенос, 
//			  иначе - перенос выполнять не нужно
//
Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт
	
	Перенос = Истина;
	
	//Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаказПокупателя")
	//	ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	//	
	//	Пользователь = Пользователи.ТекущийПользователь();
	//	
	//	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
	//	
	//	// Проверяем, что у автор документа - это текущий пользователь  
	//	Если Данные.Организация <> ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация
	//	 ИЛИ Данные.Дата < ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки Тогда
	//		Перенос = Ложь;
	//	КонецЕсли;
	//	
	//	// Если заполнены ответственный, то выгружаем по нему.
	//	Если ЗначениеЗаполнено(ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный)
	//	   И ЗначениеЗаполнено(Данные.Ответственный) Тогда
	//		Если Данные.Ответственный <> ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный Тогда
	//			Перенос = Ложь;
	//		КонецЕсли;
	//	Иначе
	//		Если Данные.Автор <> Пользователь Тогда
	//			Перенос = Ложь;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если Данные.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
	//		Перенос = Ложь;
	//	КонецЕсли;
	//	
	//	Если Данные.СостояниеЗаказа.СтатусЗаказа <> Перечисления.СтатусыЗаказов.ВРаботе
	//	   И Данные.СостояниеЗаказа.СтатусЗаказа <> Перечисления.СтатусыЗаказов.Выполнен Тогда
	//		Перенос = Ложь;
	//	КонецЕсли;
	//	
	//	Для каждого ТекСтрока Из Данные.Запасы Цикл
	//		Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
	//			Перенос = Ложь;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура")
	//	ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура")Тогда
	//	
	//	Если Данные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
	//	   И Данные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
	//		Перенос = Ложь;
	//	КонецЕсли;
	//	
	//ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
	//	
	//	Если Данные.Отбор.Номенклатура.Значение.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
	//	   И Данные.Отбор.Номенклатура.Значение.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
	//		Перенос = Ложь;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат Перенос;
	
КонецФункции // НуженПереносДанных()

Функция ОпределитьВес(Характеристика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Характеристика.Ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ОпределитьКвант(Характеристика)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НормативныйКвантУпаковкиСрезПоследних.Квант
	//|ИЗ
	//|	РегистрСведений.НормативныйКвантУпаковки.СрезПоследних(
	//|			,
	//|			Склад = &Склад
	//|				И Характеристика = &Характеристика) КАК НормативныйКвантУпаковкиСрезПоследних";
	
	"ВЫБРАТЬ
	|	КоличествоВКоробкеСрезПоследних.Количество как Квант
	|ИЗ
	|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	|			,
	|			СтруктурнаяЕдиница = &Склад
	|				И Характеристика = &Характеристика) КАК КоличествоВКоробкеСрезПоследних";
	
	Запрос.УстановитьПараметр("Характеристика", Характеристика.Ссылка);
	Запрос.УстановитьПараметр("Склад", Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", 8));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Квант;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

//АК БЕЛН 24.03.2017+
Функция ОпределитьКоличествоВКоробке(Характеристика)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НормативныйКвантУпаковкиСрезПоследних.Квант
	//|ИЗ
	//|	РегистрСведений.НормативныйКвантУпаковки.СрезПоследних(
	//|			,
	//|			Склад = &Склад
	//|				И Характеристика = &Характеристика) КАК НормативныйКвантУпаковкиСрезПоследних";
	
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Характеристика.Ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
//АК БЕЛН 24.03.2017-

// Получает объект XDTO из переданного объекта конфигурации.
//
Функция ПолучитьОбъектXDTO(Данные, ДопПараметр = "", УзелОбмена = Неопределено,КэшНом=Неопределено) Экспорт
	
	ПередаваемыйОбъект = Неопределено;
	
	// Сериализация справочника Номенклатура
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура") Тогда
		//+++АК BELN 2018.05.22
		СтрокаКэша=Неопределено;
		Если КэшНом<>Неопределено  Тогда
			МасСтр=КэшНом.НайтиСтроки(Новый Структура("Номенклатура",?(ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура"),Данные.ссылка,Данные)));
			Если МасСтр.Количество() Тогда
				СтрокаКэша=МасСтр[0];
			КонецЕсли; 
		КонецЕсли;  
		Если СтрокаКэша=Неопределено Тогда
		
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Nomenclature");
			ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
			ПередаваемыйОбъект.ThisIsGroup = Данные.ЭтоГруппа;
			ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
			Если ДопПараметр = "Ref" Тогда
				ПередаваемыйОбъект.Name = "Ref";
			Иначе
				
				ПередаваемыйОбъект.Name = Данные.Наименование;
				
				Если Не Данные.ЭтоГруппа Тогда
					ПередаваемыйОбъект.IsWeight = Данные.Весовой;
					ПередаваемыйОбъект.IsSkladir = Данные.Складируемая;
					ПередаваемыйОбъект.BezUpakovki = Данные.БезУпаковки;
					//+++АК BELN 2018.02.16 
					ТорговаяМарка=Данные.ТорговаяМарка;
					ПередаваемыйОбъект.OutsideMark = НЕ (ТорговаяМарка=Справочники.ТорговыеМарки.ВкусВилл ИЛИ ТорговаяМарка=Справочники.ТорговыеМарки.Избенка
					ИЛИ НЕ ЗначениеЗаполнено(ТорговаяМарка));
					//---АК BELN 2018.02.16 
					
					Если ЗначениеЗаполнено(Данные.ЕдиницаХраненияОстатков) Тогда
						ПередаваемыйОбъект.EdIzm = ПолучитьОбъектXDTO(Данные.ЕдиницаХраненияОстатков, "Ref");
					КонецЕсли; 
	 			КонецЕсли;
				
				Если ЗначениеЗаполнено(Данные.Родитель) Тогда
					ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, "Ref");
				КонецЕсли;

			КонецЕсли;
		Иначе	
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Nomenclature");
			ПередаваемыйОбъект.Id = Строка(СтрокаКэша.Номенклатура.УникальныйИдентификатор());
			ПередаваемыйОбъект.ThisIsGroup = СтрокаКэша.ВладелецЭтоГруппа;
			ПередаваемыйОбъект.DeletionMark = СтрокаКэша.ВладелецПометкаУдаления;
			Если ДопПараметр = "Ref" Тогда
				ПередаваемыйОбъект.Name = "Ref";
			Иначе
				
				ПередаваемыйОбъект.Name = СтрокаКэша.ВладелецНаименование;
				
				Если Не Данные.ЭтоГруппа Тогда
					ПередаваемыйОбъект.IsWeight = СтрокаКэша.ВладелецВесовой;
					ПередаваемыйОбъект.IsSkladir = СтрокаКэша.ВладелецСкладируемая;
					ПередаваемыйОбъект.BezUpakovki = СтрокаКэша.ВладелецБезУпаковки;
					//+++АК BELN 2018.02.16 
					ПередаваемыйОбъект.OutsideMark = НЕ (СтрокаКэша.ВладелецТорговаяМарка=Справочники.ТорговыеМарки.ВкусВилл ИЛИ СтрокаКэша.ВладелецТорговаяМарка=Справочники.ТорговыеМарки.Избенка
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаКэша.ВладелецТорговаяМарка));
					//---АК BELN 2018.02.16 
					
					Если ЗначениеЗаполнено(СтрокаКэша.ВладелецЕдиницаХраненияОстатков) Тогда
						ПередаваемыйОбъект.EdIzm = ПолучитьОбъектXDTO(СтрокаКэша.ВладелецЕдиницаХраненияОстатков, "Ref",,КэшНом);
					КонецЕсли; 
	 			КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаКэша.ВладелецРодитель) Тогда
					ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(СтрокаКэша.ВладелецРодитель, "Ref",,КэшНом);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли; 
		//---АК BELN 2018.05.22 
	
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		СтрокаКэша=Неопределено;
		Если КэшНом<>Неопределено  Тогда
			МасСтр=КэшНом.НайтиСтроки(Новый Структура("Характеристика",?(ТипЗнч(Данные) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры"),Данные.ссылка,Данные)));
			Если МасСтр.Количество() Тогда
				СтрокаКэша=МасСтр[0];
			КонецЕсли; 
		КонецЕсли;  
		Если СтрокаКэша=Неопределено Тогда
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Characteristics");
			ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
			ПередаваемыйОбъект.Name = Данные.Наименование;
			ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
			ПередаваемыйОбъект.Owner = ПолучитьОбъектXDTO(Данные.Владелец, "Ref");
			Вес=ОпределитьВес(Данные);
			ПередаваемыйОбъект.Weight = Вес;
			ПередаваемыйОбъект.Quantum = Вес;
			
			ПередаваемыйОбъект.ExpiryDate =Данные.СрокГодности;
			ПередаваемыйОбъект.ExpiryDateType =Строка(Данные.ТипСрокаГодности);
			ПередаваемыйОбъект.ExpiryDateLimit =Данные.ПредельноеКоличествоДнейСрокаГодности;
			ПередаваемыйОбъект.NotActive =Данные.Неактивная;
			ПередаваемыйОбъект.NumberInBox =Вес;
			
		Иначе
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Characteristics");
			ПередаваемыйОбъект.Id = Строка(СтрокаКэша.Характеристика.УникальныйИдентификатор());
			ПередаваемыйОбъект.Name = СтрокаКэша.Наименование;
			ПередаваемыйОбъект.DeletionMark = СтрокаКэша.ПометкаУдаления;
			ПередаваемыйОбъект.Owner = ПолучитьОбъектXDTO(СтрокаКэша.Номенклатура, "Ref",,КэшНом);
			ПередаваемыйОбъект.Weight = СтрокаКэша.Вес;
			ПередаваемыйОбъект.Quantum = СтрокаКэша.Вес;
			
			ПередаваемыйОбъект.ExpiryDate =СтрокаКэша.СрокГодности;
			ПередаваемыйОбъект.ExpiryDateType =Строка(СтрокаКэша.ТипСрокаГодности);
			ПередаваемыйОбъект.ExpiryDateLimit =СтрокаКэша.ПредельноеКоличествоДнейСрокаГодности;
			ПередаваемыйОбъект.NotActive =СтрокаКэша.Неактивная;
			ПередаваемыйОбъект.NumberInBox =СтрокаКэша.Вес;
		КонецЕсли;
		//+++АК SHEP 20160519
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ПлановыйАссортимент")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ПлановыйАссортимент") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("PlanAssortim");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.ThisIsGroup = Данные.ЭтоГруппа;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		Если ДопПараметр = "Ref" Тогда
			ПередаваемыйОбъект.Name = "Ref";
		Иначе
			
			ПередаваемыйОбъект.Name = Данные.Наименование;
			
			Если ЗначениеЗаполнено(Данные.Ответственный) Тогда
				ПередаваемыйОбъект.Responsible = ПолучитьОбъектXDTO(Данные.Ответственный);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Данные.РольТехнолога) Тогда
				ПередаваемыйОбъект.TechnologRole = ПолучитьОбъектXDTO(Данные.РольТехнолога);
			КонецЕсли;
			
			Если НЕ Данные.ЭтоГруппа Тогда
				
				ПередаваемыйОбъект.Status = ПолучитьИмяЗначенияПеречисления(Данные.Статус);
				Если ЗначениеЗаполнено(Данные.ПродактМенеджер) Тогда
					ПередаваемыйОбъект.ProductManager = ПолучитьОбъектXDTO(Данные.ПродактМенеджер);
				КонецЕсли;
				ПередаваемыйОбъект.Origin = ПолучитьИмяЗначенияПеречисления(Данные.ИсточникВозникновения);
				ПередаваемыйОбъект.Description = Данные.Описание;
				
				//Для Каждого СтрокаТЧ Из Данные.РолиТехнологов Цикл
				//	ПередаваемыйОбъект.TechnologsRoles.Добавить(ПолучитьОбъектXDTO(СтрокаТЧ.РольТехнолога, "Ref"));
				//КонецЦикла;
				
				Для Каждого СтрокаТЧ Из Данные.Фотографии Цикл
					ПередаваемыйОбъект.Photos.Добавить(СтрокаТЧ.ИдентификаторФотографии);
				КонецЦикла;
				
				Для Каждого СтрокаТЧ Из Данные.Файлы Цикл
					ПередаваемыйОбъект.Files.Добавить(СтрокаТЧ.ИдентификаторФотографии);
				КонецЦикла;
				//+++АК БЕЛН 20170724
				МасФорматов=Новый Массив;
				МасФорматов.Добавить(".bmp");
				МасФорматов.Добавить(".dib");
				МасФорматов.Добавить(".rle");
				МасФорматов.Добавить(".jpg");
				МасФорматов.Добавить(".jpeg");
				МасФорматов.Добавить(".tif");
				МасФорматов.Добавить(".gif");
				МасФорматов.Добавить(".png");
				МасФорматов.Добавить(".wmf");
				МасФорматов.Добавить(".emf");
				МасФорматов.Добавить(".ico");
				Попытка
				Для Каждого СтрокаТЧ Из Данные.ФайлыДегустации Цикл
					ЭтоФото=Ложь;
					Для каждого Эл Из МасФорматов Цикл
						Если Найти(СтрокаТЧ.ИмяФайла,Эл)<>0 Тогда
							ЭтоФото=Истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					Если ЭтоФото Тогда
						ПередаваемыйОбъект.Photos.Добавить(СтрокаТЧ.ИдентификаторФотографии);
					Иначе	
						//ПередаваемыйОбъект.Files.Добавить(СтрокаТЧ.ИдентификаторФотографии);
					КонецЕсли; 
				КонецЦикла;
				
				Для Каждого СтрокаТЧ Из Данные.ФайлыАналогов Цикл
					ЭтоФото=Ложь;
					Для каждого Эл Из МасФорматов Цикл
						Если Найти(СтрокаТЧ.ИмяФайла,Эл)<>0 Тогда
							ЭтоФото=Истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					Если ЭтоФото Тогда
						ПередаваемыйОбъект.Photos.Добавить(СтрокаТЧ.ИдентификаторФотографии);
					Иначе	
						//ПередаваемыйОбъект.Files.Добавить(СтрокаТЧ.ИдентификаторФотографии);
					КонецЕсли; 
				КонецЦикла;
				ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Degustations").Тип;
				ДобавляемыеСтроки = СоздатьОбъектXDTO(ДобавляемыеСтрокиТип);
				Для Каждого СтрокаТЧ Из Данные.Дегустация Цикл
					
					ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Degustation").Тип;
					ДобавляемаяСтрока = СоздатьОбъектXDTO(ДобавляемаяСтрокаТип);
					ДобавляемаяСтрока.Name = СтрокаТЧ.Наименование;
					ДобавляемаяСтрока.UINStroki = СтрокаТЧ.УИН_Строки;
					ДобавляемаяСтрока.Description = СтрокаТЧ.Описание;
					ДобавляемаяСтрока.Sostav = СтрокаТЧ.Состав;
					ДобавляемаяСтрока.Comment = СтрокаТЧ.Комментарий;
					ДобавляемаяСтрока.Date = СтрокаТЧ.Дата;
					
					ДобавляемыеСтроки.Degustation.Добавить(ДобавляемаяСтрока);
				КонецЦикла;
				ПередаваемыйОбъект.Degustations = ДобавляемыеСтроки;
				
				ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Analogi").Тип;
				ДобавляемыеСтроки = СоздатьОбъектXDTO(ДобавляемыеСтрокиТип);
				Для Каждого СтрокаТЧ Из Данные.АналогиНаРынке Цикл
					
					ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Analog").Тип;
					ДобавляемаяСтрока = СоздатьОбъектXDTO(ДобавляемаяСтрокаТип);
					ДобавляемаяСтрока.Name = СтрокаТЧ.Наименование;
					ДобавляемаяСтрока.UINStroki = СтрокаТЧ.УИН_Строки;
					ДобавляемаяСтрока.Description = СтрокаТЧ.Описание;
					ДобавляемаяСтрока.Sostav = СтрокаТЧ.Состав;
					ДобавляемаяСтрока.Comment = СтрокаТЧ.Комментарий;
					//ДобавляемаяСтрока.Date = СтрокаТЧ.Дата;
					
					ДобавляемыеСтроки.Analog.Добавить(ДобавляемаяСтрока);
				КонецЦикла;
				ПередаваемыйОбъект.Analogi = ДобавляемыеСтроки;
				
				
				Исключение
				КонецПопытки;
				//---АК БЕЛН 20170724
				//+++АК SHEP 20161109
				ПередаваемыйОбъект.PlanLaunchDate = Данные.ПлановаяДатаЗапуска;
				ПередаваемыйОбъект.Nomenclature = ПолучитьОбъектXDTO(Данные.Номенклатура,,,КэшНом);
				//---АК SHEP 20161109
				
 			КонецЕсли;
			
			Если ЗначениеЗаполнено(Данные.Родитель) Тогда
				ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель);
			КонецЕсли;

		КонецЕсли;
	//---АК SHEP 20160519
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ЕдиницыИзмерения")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("EdIzm");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Owner = ПолучитьОбъектXDTO(Данные.Владелец, "Ref",,КэшНом);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ШтриховыеКоды") Тогда
		
		Если Данные.Количество() = 0 Тогда
			Данные.Прочитать();
		КонецЕсли;
		
		Если Данные.Количество() = 1 Тогда
			Запись = Данные[0];
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Barcodes");
			ПередаваемыйОбъект.Nomenclature = ПолучитьОбъектXDTO(Запись.Номенклатура,,,КэшНом);
			ПередаваемыйОбъект.EdIzm = ПолучитьОбъектXDTO(Запись.ЕдиницаИзмерения, "Ref",,КэшНом);
			ПередаваемыйОбъект.Characteristic = ПолучитьОбъектXDTO(Запись.Характеристика,,,КэшНом);
			ПередаваемыйОбъект.Barcode = Запись.Штрихкод;
		ИначеЕсли Данные.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			ЗаписьЖурналаРегистрации("Ошибка при записи штрихкодов! Количество записей более 1.",УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.НумераторШтрихКодовКоробок") Тогда
		
		Если Данные.Количество() = 0 Тогда
			Данные.Прочитать();
		КонецЕсли;
		
		Если Данные.Количество() = 0 Тогда 
			Если Данные.Отбор.Номенклатура.Использование И Данные.Отбор.Характеристика.Использование Тогда
				ПередаваемыйОбъект = СоздатьОбъектXDTO("BarcodesNumerator");
				ПередаваемыйОбъект.Nomenclature = ПолучитьОбъектXDTO(Данные.Отбор.Номенклатура.Значение, "Ref",,КэшНом);
				ПередаваемыйОбъект.Characteristic = ПолучитьОбъектXDTO(Данные.Отбор.Характеристика.Значение, "Ref",,КэшНом);
				ПередаваемыйОбъект.Numerator = 0;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		
		Если Данные.Количество() = 1 Тогда
			Запись = Данные[0];
			ПередаваемыйОбъект = СоздатьОбъектXDTO("BarcodesNumerator");
			ПередаваемыйОбъект.Nomenclature = ПолучитьОбъектXDTO(Запись.Номенклатура,,,КэшНом);
			ПередаваемыйОбъект.Characteristic = ПолучитьОбъектXDTO(Запись.Характеристика,,,КэшНом);
			ПередаваемыйОбъект.Numerator = Запись.Нумератор;
		ИначеЕсли Данные.Количество() > 1 Тогда

			ЗаписьЖурналаРегистрации("Ошибка при записи нумератора штрихкодов коробок! Количество записей более 1.",УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ШтрихКодыУпаковокПоставщиков") Тогда
		
		Если Данные.Количество() = 0 Тогда
			Данные.Прочитать();
		КонецЕсли;
		
		Если Данные.Количество() = 1 Тогда
			Запись = Данные[0];
			ПередаваемыйОбъект = СоздатьОбъектXDTO("BarcodesSuppliers");
			ПередаваемыйОбъект.Characteristic = ПолучитьОбъектXDTO(Запись.Характеристика, "Ref");
			ПередаваемыйОбъект.Barcode = Запись.ШК;
			ПередаваемыйОбъект.Quantity = Запись.КоличествоВУпаковке;
		Иначе
			ЗаписьЖурналаРегистрации("Ошибка при записи штрихкодов упаковок поставщиков! Количество записей более 1.",УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.МП_ЗадачаМагазина")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.МП_ЗадачаМагазина") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Tasks");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = "";
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Date = Данные.Дата;
		
		ПередаваемыйОбъект.Status = ПолучитьИмяЗначенияПеречисления(Данные.СтатусЗадачи);
		ПередаваемыйОбъект.StartDate = Данные.ДатаСоздания;
		ПередаваемыйОбъект.EndDate = Данные.ДатаВыполнения;
		ПередаваемыйОбъект.DeliveryDate = Данные.ДатаДоставки;
		
		ПередаваемыйОбъект.Examiner = Данные.Проверяющий.Наименование;

		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Вид = &Вид");
		
		Запрос.УстановитьПараметр("Объект", Данные.Проверяющий.ФизЛицо);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ПередаваемыйОбъект.ExaminerPhone = Выборка.Представление;	
		КонецЕсли;
		
		ПередаваемыйОбъект.RelevanceType = ПолучитьИмяЗначенияПеречисления(Данные.ВариантАктуальности);
		ПередаваемыйОбъект.RelevanceDate = Данные.АктуальноДо;
		
		
		// ТЧ Ракурсы
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
		ДобавляемыеСтроки = СоздатьОбъектXDTO(ДобавляемыеСтрокиТип);
		Для Каждого СтрокаТЧ Из Данные.Ракурсы Цикл
			Если СтрокаТЧ.Ракурс = Справочники.МП_Ракурсы.ИсправленныеФотографии Тогда
				Продолжить;
			КонецЕсли; 
			
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = СоздатьОбъектXDTO(ДобавляемаяСтрокаТип);
			ДобавляемаяСтрока.Rakurse = ПолучитьОбъектXDTO(СтрокаТЧ.Ракурс);
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.КоличествоФотографий;
			ДобавляемаяСтрока.RakursStatus = ПолучитьИмяЗначенияПеречисления(СтрокаТЧ.СтатусРакурса);
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		ПередаваемыйОбъект.Items = ДобавляемыеСтроки;

	
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.МП_ФотографииКЗадачам")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.МП_ФотографииКЗадачам") Тогда
		
		Если Данные.Ракурс = Справочники.МП_Ракурсы.ИсправленныеФотографии Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("PhotosToTasks");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = "";
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		//ДвДанные = ПолучитьДанныеФотографииКЗадаче(Данные);
		//Если ДвДанные <> Неопределено Тогда
		//	ПередаваемыйОбъект.Data = ДвДанные;
		//КонецЕсли;
		ПередаваемыйОбъект.Task = ПолучитьОбъектXDTO(Данные.Задача);
		ПередаваемыйОбъект.Rakurs = ПолучитьОбъектXDTO(Данные.Ракурс);
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		ПередаваемыйОбъект.RakursStatus = ПолучитьИмяЗначенияПеречисления(Данные.СтатусРакурса);
		ПередаваемыйОбъект.PhotoStatus = ПолучитьИмяЗначенияПеречисления(Данные.СтатусФото);
		
		Попытка
			ПередаваемыйОбъект.Extension = Данные.РасширениеФайла;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.МП_Ракурсы")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.МП_Ракурсы") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Rakurses");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;

	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ШаблоныСообщенийМОС")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ШаблоныСообщенийМОС") Тогда

		ПередаваемыйОбъект = СоздатьОбъектXDTO("MessageTemplates");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.MessageType = ПолучитьИмяЗначенияПеречисления(Данные.ТипСообщения);
		ПередаваемыйОбъект.Goods = Данные.Товары;
		ПередаваемыйОбъект.BarcodeOff = (Данные.Ссылка = Справочники.ШаблоныСообщенийМОС.ПретензияПоШтрихкоду);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.МП_ПараметрыЗадачиТехнолога")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.МП_ПараметрыЗадачиТехнолога") Тогда

		ПередаваемыйОбъект = СоздатьОбъектXDTO("TechnologistTasksParameters");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		Если Данные.НеобходимоФото = NULL Тогда
			ПередаваемыйОбъект.PhotoRequired = Ложь;
		Иначе
			ПередаваемыйОбъект.PhotoRequired = Данные.НеобходимоФото;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.МП_ЗадачаТехнолога")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.МП_ЗадачаТехнолога") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("TechnologistTasks");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = "";
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.Closed = Данные.Закрыта;
		ПередаваемыйОбъект.OperationType = ПолучитьИмяЗначенияПеречисления(Данные.ВидПроверяемойОперации);

		// ТЧ 
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
		ДобавляемыеСтроки = СоздатьОбъектXDTO(ДобавляемыеСтрокиТип);
		Для Каждого СтрокаТЧ Из Данные.ПараметрыЗадачи Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = СоздатьОбъектXDTO(ДобавляемаяСтрокаТип);
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура,,,КэшНом);
			ДобавляемаяСтрока.Characteristic = ПолучитьОбъектXDTO(СтрокаТЧ.ХарактеристикаНоменклатуры,,,КэшНом);
			ДобавляемаяСтрока.Parameter = ПолучитьОбъектXDTO(СтрокаТЧ.Параметр);
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		ПередаваемыйОбъект.Items = ДобавляемыеСтроки;

	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ФизическиеЛица")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Persons");		
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.МП_ЗадачаНаНовыйТовар")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.МП_ЗадачаНаНовыйТовар") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("NewProductTasks");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = "";
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.Status = ПолучитьИмяЗначенияПеречисления(Данные.СтатусЗадачи);
		ПередаваемыйОбъект.TaskDescription = Данные.ОписаниеЗадачи;
		ПередаваемыйОбъект.Technologist = ПолучитьОбъектXDTO(Данные.Исполнитель);
		ПередаваемыйОбъект.Author = ПолучитьОбъектXDTO(Данные.Автор);
		ПередаваемыйОбъект.Nomenclature = ПолучитьОбъектXDTO(Данные.Номенклатура,,,КэшНом);
		ПередаваемыйОбъект.Characteristic = ПолучитьОбъектXDTO(Данные.ХарактеристикаНоменклатуры,,,КэшНом);
		//+++АК SHEP 20160520
		ПередаваемыйОбъект.PlanAssortim = ПолучитьОбъектXDTO(Данные.ПлановыйАссортимент);
		//---АК SHEP 20160520
		ПередаваемыйОбъект.Partner= ПолучитьОбъектXDTO(Данные.Производитель);

	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Контрагенты") Тогда

		ПередаваемыйОбъект = СоздатьОбъектXDTO("Partners");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.МП_ОтчетПоНовомуТовару")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.МП_ОтчетПоНовомуТовару") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("NewProductOperation");
		
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = "";			
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;		
		ПередаваемыйОбъект.TaskID = Строка(Данные.Задача.УникальныйИдентификатор());
		ПередаваемыйОбъект.Technologist = ПолучитьОбъектXDTO(Данные.Технолог);;
		ПередаваемыйОбъект.SupplierData = Данные.ДанныеПоставщика;
		ПередаваемыйОбъект.ManufactureAddress = Данные.АдресПроизводства;
		ПередаваемыйОбъект.Degustation = Данные.РезультатДегустации;
		//+++АК SHEP 20160523
		ПередаваемыйОбъект.PlanAssortim = ПолучитьОбъектXDTO(Данные.ПлановыйАссортимент);
		//---АК SHEP 20160523
		//+++АК SHEP 20160913
		ПередаваемыйОбъект.Supplier = ПолучитьОбъектXDTO(Данные.Поставщик);
		//---АК SHEP 20160913
		
		// Комментарии 
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Comments").Тип;
		ДобавляемыеСтроки = СоздатьОбъектXDTO(ДобавляемыеСтрокиТип);
		
		Для Каждого СтрокаТЧ Из Данные.Комментарии Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = СоздатьОбъектXDTO(ДобавляемаяСтрокаТип);
			ДобавляемаяСтрока.User = ПолучитьОбъектXDTO(СтрокаТЧ.Пользователь);
			ДобавляемаяСтрока.Date = СтрокаТЧ.Дата;
			ДобавляемаяСтрока.Comment = СтрокаТЧ.Комментарий;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		
		ПередаваемыйОбъект.Comments = ДобавляемыеСтроки;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ObjectDeletion");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		
		Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПередаваемыйОбъект.Type = "Nomenclature";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			ПередаваемыйОбъект.Type = "Characteristics";
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			ПередаваемыйОбъект.Type = "EdIzm";
		КонецЕсли;
		
	//+++АК SHEP 20160530
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.РолиПользователей") ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.РолиПользователей") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("UsersRoles");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		
	//+++АК SHEP 20160603
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СтруктурныеЕдиницы") ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Shops");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.МП_СобытияСтроителей") ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.МП_СобытияСтроителей") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("BuildersEvents");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.МП_ЗаданиеСтроителей") ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.МП_ЗаданиеСтроителей") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("BuildersTasks");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.BuildObject = ПолучитьОбъектXDTO(Данные.ОбъектCтроительства);
		ПередаваемыйОбъект.EventType = ПолучитьОбъектXDTO(Данные.ТипСобытия);
		ПередаваемыйОбъект.Status = ПолучитьИмяЗначенияПеречисления(Данные.Статус);
		ПередаваемыйОбъект.StartDate = Данные.ДатаНачала;
		ПередаваемыйОбъект.PlanDate = Данные.ДатаПлановогоЗавершения;
		ПередаваемыйОбъект.FactDate = Данные.ДатаФактическогоЗавершения;
		ПередаваемыйОбъект.Responsible = ПолучитьОбъектXDTO(Данные.Ответственный);
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		
		Для Каждого СтрокаТЧ Из Данные.Фотографии Цикл
			ПередаваемыйОбъект.Photos.Добавить(СтрокаТЧ.ИдентификаторФотографии);
		КонецЦикла;
		
	//---АК SHEP
	//АК БЕЛН 22.05.2017+
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаявкаНаРемонт") ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("RepairRequest");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Номер;
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		
		
		ПередаваемыйОбъект.RequestType = ПолучитьИмяЗначенияПеречисления(Данные.ВидЗаявки);
		ПередаваемыйОбъект.Comment = Данные.описание;
		ПередаваемыйОбъект.Author = ПолучитьОбъектXDTO(Данные.Автор);
		ПередаваемыйОбъект.Urgency = ПолучитьОбъектXDTO(Данные.Срочность);
		ПередаваемыйОбъект.Daypart = ПолучитьИмяЗначенияПеречисления(Данные.СуточныйПериод);
		ПередаваемыйОбъект.PartnerExe = ПолучитьОбъектXDTO(Данные.ИсполнительКонтрагент);
		ПередаваемыйОбъект.PersonExe = ПолучитьОбъектXDTO(Данные.ИсполнительФизЛицо.ФизЛицо);
		ПередаваемыйОбъект.Ready = Данные.Выполнено;
		ПередаваемыйОбъект.Confirmed = Данные.ВыполнениеПодтверждено;
		                                                     
			
		Для Каждого СтрокаТЧ Из Данные.Файлы Цикл
			ПередаваемыйОбъект.Photos.Добавить(СтрокаТЧ.ИдентификаторФотографии);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СрочностьВыполненияЗаявкиНаРемонт") ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.СрочностьВыполненияЗаявкиНаРемонт") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("Urgency");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = Данные.Наименование;
		ПередаваемыйОбъект.Days = Данные.Дней;
	//АК БЕЛН 22.05.2017-
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаданиеНаИнвентаризацию")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЗаданиеНаИнвентаризацию") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("InventoryTasks");
		
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.Name = "";			
		ПередаваемыйОбъект.Date = Данные.Дата;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления ИЛИ (УзелОбмена<> Неопределено И Данные.СтруктурнаяЕдиница<>УзелОбмена.Магазин);		
		ПередаваемыйОбъект.Closed = Данные.Закрыто;
		ПередаваемыйОбъект.NomenclatureGroup = ПолучитьОбъектXDTO(Данные.ГруппаНоменклатуры,,,КэшНом);
		ПередаваемыйОбъект.Comment = Данные.Комментарий;
		ПередаваемыйОбъект.TaskId = "";
		
		// ТЧ 
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
		ДобавляемыеСтроки = СоздатьОбъектXDTO(ДобавляемыеСтрокиТип);
		Для Каждого СтрокаТЧ Из Данные.Товары Цикл
			ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
			ДобавляемаяСтрока = СоздатьОбъектXDTO(ДобавляемаяСтрокаТип);
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура,,,КэшНом);
			ДобавляемаяСтрока.Characteristic = ПолучитьОбъектXDTO(СтрокаТЧ.Характеристика,,,КэшНом);
			ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
			ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
		КонецЦикла;
		ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
	
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ПолучитьОбъектXDTO()

// Процедура записывает файл с данными фотографии на диск
// Параметры:
// ДвоичныеДанные - ДвоичныеДанные, данные фотографии
// СпрСсылка - ссылка на элемент справочника МП_ФотографииКЗадачам
// РасширениеФайла - строка
Функция ОбновитьФайлФотографииНаДиске(ДвоичныеДанные, Объект, ДанныеФотографии = Неопределено) Экспорт
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());

	Если ПустаяСтрока(КаталогФотографий) Тогда
		СтрОшибка = "Не заполнена константа КаталогХраненияФайловЗадачМП!";
		ЗаписьЖурналаРегистрации(СтрОшибка, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение(СтрОшибка);
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ИнвентаризацияУпаковки") Тогда
		ОтносительноеИмяФайла = "Этикетки\" + Формат(Объект.Дата, "ДФ=yyyyMMdd") + "\";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.МП_ФотографииКЗадачам") Тогда
		ОтносительноеИмяФайла = Формат(Объект.Задача.Дата, "ДФ=yyyyMMdd") + "\";
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийМенеджерЗаписи.ЖурналРегламентныхРаботВМагазинах") Тогда
		ОтносительноеИмяФайла = "Регламентные работы\" + Формат(Объект.Дата, "ДФ=yyyyMMdd; ДП=") + "\";
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ОтчетТехнолога") Тогда
		ОтносительноеИмяФайла = "Отчеты технологов\" + Формат(Объект.Дата, "ДФ=yyyyMMdd") + "\";
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ОтчетПоНовомуТовару") Тогда
		ОтносительноеИмяФайла = "Отчеты по новым товарам\" + Формат(Объект.Дата, "ДФ=yyyyMMdd") + "\";
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ЗадачаНаНовыйТовар") Тогда
		ОтносительноеИмяФайла = "Задачи по новым товарам\" + Формат(Объект.Дата, "ДФ=yyyyMMdd") + "\";
	//+++АК SHEP 20160520
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПлановыйАссортимент") ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.ПлановыйАссортимент") Тогда
		ОтносительноеИмяФайла = "Плановый ассортимент\" + Объект.Ссылка.УникальныйИдентификатор() + "\";
	//+++АК SHEP 20160603
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ЗаданиеСтроителей") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.МП_ЗаданиеСтроителей") Тогда
		ОтносительноеИмяФайла = "Задания строителей\" + Формат(Объект.Дата, "ДФ=yyyyMMdd") + "\";
	//---АК SHEP
	//+++АК БЕЛН 20170522
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРемонт") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		ОтносительноеИмяФайла = "Заявки на ремонт\" + Формат(Объект.Дата, "ДФ=yyyyMMdd") + "\";
	//---АК БЕЛН 20170522
	КонецЕсли; 

	Файл = Новый Файл(КаталогФотографий+ОтносительноеИмяФайла);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(КаталогФотографий+ОтносительноеИмяФайла);		
	КонецЕсли; 

	Если ТипЗнч(Объект) = Тип("РегистрСведенийМенеджерЗаписи.ЖурналРегламентныхРаботВМагазинах") Тогда
		Расширение = СокрЛП(ДанныеФотографии.Расширение);

		Если Лев(Расширение, 1) = "." Тогда
			Расширение = СокрЛП(Прав(Расширение, СтрДлина(Расширение) - 1));
		КонецЕсли;
		
		ОтносительноеИмяФайла = ОтносительноеИмяФайла + Объект.ИдентификаторРаботы + "_" + ДанныеФотографии.НомерФотографии + ?(ПустаяСтрока(Расширение), "", "." + Расширение);
		ИмяФайла = КаталогФотографий + ОтносительноеИмяФайла;
		
		ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("ТипЗаписи, ОтносительноеИмяФайла, Расширение, Объект, Магазин, Текст"
							, Перечисления.ТипыЗаписейПриложенныхКартинок.РегламентнаяРабота, ОтносительноеИмяФайла, Расширение, Объект.ИдентификаторРаботы, Объект.ТорговаяТочка, Объект.Комментарий));
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ОтчетТехнолога") Тогда
		Расширение = СокрЛП(ДанныеФотографии.Расширение);

		Если Лев(Расширение, 1) = "." Тогда
			Расширение = СокрЛП(Прав(Расширение, СтрДлина(Расширение) - 1));
		КонецЕсли;
		
		ОтносительноеИмяФайла = ОтносительноеИмяФайла + ДанныеФотографии.ИдентификаторФотографии + ?(ПустаяСтрока(Расширение), "", "." + Расширение);
		ИмяФайла = КаталогФотографий + ОтносительноеИмяФайла;
		
		ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("Номенклатура, Характеристика, Объект, ТипЗаписи, УинЗаписи, ОтносительноеИмяФайла, Расширение, Текст"
							, ДанныеФотографии.Номенклатура, ДанныеФотографии.Характеристика,  Объект.Ссылка, Перечисления.ТипыЗаписейПриложенныхКартинок.ОтчетТехнолога, ДанныеФотографии.ИдентификаторФотографии, ОтносительноеИмяФайла, Расширение, "Комментарий: Результат "+Объект.Результат+" "+ДанныеФотографии.Комментарий));
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ОтчетПоНовомуТовару") ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ЗадачаНаНовыйТовар") Тогда
		Расширение = СокрЛП(ДанныеФотографии.Расширение);

		Если Лев(Расширение, 1) = "." Тогда
			Расширение = СокрЛП(Прав(Расширение, СтрДлина(Расширение) - 1));
		КонецЕсли;
		
		ОтносительноеИмяФайла = ОтносительноеИмяФайла + ДанныеФотографии.ИдентификаторФотографии + ?(ПустаяСтрока(Расширение), "", "." + Расширение);
		ИмяФайла = КаталогФотографий + ОтносительноеИмяФайла;
		
	//+++АК SHEP 20160521
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПлановыйАссортимент") ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.ПлановыйАссортимент")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.МП_ЗаданиеСтроителей") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.МП_ЗаданиеСтроителей")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРемонт") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		Тогда
		
		Расширение = СокрЛП(ДанныеФотографии.Расширение);
		Если НЕ ПустаяСтрока(Расширение) И Лев(Расширение, 1) <> "." Тогда
			Расширение = "." + Расширение;
		КонецЕсли;
		
		ОтносительноеИмяФайла = ОтносительноеИмяФайла + ДанныеФотографии.ИдентификаторФотографии + Расширение;
		ИмяФайла = КаталогФотографий + ОтносительноеИмяФайла;
	//---АК SHEP 20160521
	
	Иначе
		Расширение = СокрЛП(Объект.РасширениеФайла);

		Если Лев(Расширение, 1) = "." Тогда
			Расширение = СокрЛП(Прав(Расширение, СтрДлина(Расширение) - 1));
		КонецЕсли;

		ОтносительноеИмяФайла = ОтносительноеИмяФайла + Объект.Ссылка.УникальныйИдентификатор() + ?(ПустаяСтрока(Расширение), "", "." + Расширение);
		ИмяФайла = КаталогФотографий + ОтносительноеИмяФайла;
	КонецЕсли; 

	
	Попытка
		Картинка = Новый Картинка(ДвоичныеДанные);
		Картинка.Записать(ИмяФайла);
		Возврат ОтносительноеИмяФайла;
	Исключение
		
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

// Функция возвращает хранилище значения данных из файла
// Параметры:
// ЭлементСпр - СправочникСсылка или СправочникОбдъект элемента справочника МП_ФотографииКЗадачам
Функция ПолучитьДанныеФотографииКЗадаче(ЭлементСпр) Экспорт
	
	СпрСсылка = ЭлементСпр.Ссылка;
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если ПустаяСтрока(КаталогФотографий) Тогда
		СтрОшибка = "Не заполнена константа КаталогХраненияФайловЗадачМП!";
		ЗаписьЖурналаРегистрации(СтрОшибка, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение(СтрОшибка);
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МП_ФотографииКЗадачам.РасширениеФайла
	|ИЗ
	|	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	|ГДЕ
	|	МП_ФотографииКЗадачам.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СпрСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	РасширениеФайла = "";
	Если Выборка.Следующий() Тогда
		РасширениеФайла = СокрЛП(Выборка.РасширениеФайла);
	КонецЕсли;
	
	Если Лев(РасширениеФайла, 1) = "." Тогда
		РасширениеФайла = СокрЛП(Прав(РасширениеФайла, СтрДлина(РасширениеФайла) - 1));
	КонецЕсли;
	
	ИмяФайла = КаталогФотографий + СпрСсылка.УникальныйИдентификатор() + ?(ПустаяСтрока(РасширениеФайла), "", "." + РасширениеФайла);
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		Возврат Новый ДвоичныеДанные(ИмяФайла);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура записывает данные в формат XML
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML
//
// Параметры:
//  ЗаписьXML	- объект, записывающий XML данные
//  Данные 		- данные, подлежащие записи в формат XML
//
Процедура ЗаписатьДанные(ВозвращаемыйСписок, Данные, УзелОбмена = Неопределено,КэшНом=Неопределено) Экспорт
	
	ОбъектXDTO = ПолучитьОбъектXDTO(Данные, , УзелОбмена,КэшНом);
	Если ОбъектXDTO <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДанные()

// Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
			Выборка = ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта);
			
			Пока Выборка.Следующий() Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

// Функция получает отборы для выгрузки документов.
//
Функция ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()
	
	//Пользователь = Пользователи.ТекущийПользователь();
	//
	//ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	//	Пользователь,
	//	"ОсновнойОтветственный"
	//);
	//
	//ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	//	Пользователь,
	//	"ОсновнаяОрганизация"
	//);
	//Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
	//	ОсновнаяОрганизация = Справочники.Организации.ОсновнаяОрганизация;
	//КонецЕсли;
	//
	//ПериодВыгрузкиВМобильноеПриложение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	//	Пользователь,
	//	"ПериодВыгрузкиВМобильноеПриложение"
	//);
	//
	//Если ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц Тогда
	//	ДатаНачалаВыгрузки = НачалоМесяца(ТекущаяДата());
	//ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю Тогда
	//	ДатаНачалаВыгрузки = НачалоНедели(ТекущаяДата());
	//ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень Тогда
	//	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	//КонецЕсли;
	//
	//ОтборыДляВыгрузкиДокументов = Новый Структура;
	//
	//ОтборыДляВыгрузкиДокументов.Вставить("ОсновнойОтветственный", ОсновнойОтветственный);
	//ОтборыДляВыгрузкиДокументов.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
	//ОтборыДляВыгрузкиДокументов.Вставить("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	//
	//Возврат ОтборыДляВыгрузкиДокументов;
	
КонецФункции // ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()

// Функция получает выборку документов, соответствующих условиям отбора.
//
Функция ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта)
	
	//ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
	//
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	Таблица.Ссылка КАК Ссылка
	//|ИЗ
	//|	[ПолноеИмяОбъекта] КАК Таблица
	//|ГДЕ
	//|	Таблица.Дата >= &ДатаНачалаВыгрузки
	//|	И Таблица.Организация = &Организация
	//|	И Таблица.Ответственный = &Ответственный
	//|	И (Таблица.СостояниеЗаказа.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.ВРаботе)
	//|			ИЛИ Таблица.СостояниеЗаказа.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Выполнен))";
	//	
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
	//Запрос.УстановитьПараметр("Организация", ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация);
	//Запрос.УстановитьПараметр("Ответственный", ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный);
	//
	//Запрос.Текст = ТекстЗапроса;
	//
	//Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуДокументовДляРегистрации()

// Процедура добавляет сообщение обмена в очередь сообщений для передачи мобильному клиенту.
//
// Параметры
//  СообщениеОбмена  - ХранилищеЗначений - сообщение обмена для помещения в очередь.
//
Процедура ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена) Экспорт
	
	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Начато добавление сообщения в очередь. № " + НомерСообщенияОчереди,  УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	

	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МобильныйКлиент.Установить(УзелОбмена);
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщенияОчереди);
	НаборЗаписей.Прочитать();
	
	// Если сообщение с таким номером уже есть в очереди, генерируем исключение.
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным клиентом.Добавление сообщения в очередь сообщений обмена'", ),
			УровеньЖурналаРегистрации.Ошибка,
			,
			УзелОбмена,
			НСтр("ru = 'Очередь сообщений обмена уже содержит сообщение с номером " + НомерСообщенияОчереди + ".'"));
			
		// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
		ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
		
		НаборЗаписей1 = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
		НаборЗаписей1.Отбор.МобильныйКлиент.Установить(УзелОбмена);
		НаборЗаписей1.Записать();
		
		НаборЗаписей.Очистить();
	
		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Сообщение с нужным номером № " + НомерСообщенияОчереди + " уже было в очереди. Очередь очищена.",  УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);		
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.МобильныйКлиент = УзелОбмена;
	НоваяЗапись.НомерСообщения = НомерСообщенияОчереди;
	НоваяЗапись.СообщениеОбмена = СообщениеОбмена;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);

	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Сообщение добавлено в очередь. № " + НомерСообщенияОчереди,  УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	
	
КонецПроцедуры // ДобавитьСообщениеВОчередьСообщенийОбмена()

// Процедура на основании анализа типа данных заменяет их на данные, удаляющие
// информацию из узла в котором их не должно быть
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно преобразовать
//
Процедура УдалениеДанных(Данные) Экспорт
	
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	// Проверяем тип, интересуют только те типы, которые реализованы на мобильной платформе.
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных.
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные.
		Данные.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // УдалениеДанных()

// Функция создает объект переданного типа.
//
Функция СоздатьОбъектXDTO(ТипОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(ТипОбъекта) = Тип("Строка") Тогда
		Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("MobileExchange", ТипОбъекта));
	КонецЕсли; 

	Возврат ФабрикаXDTO.Создать(ТипОбъекта);
	
КонецФункции // СоздатьОбъектXDTO()

Функция ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения)
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Процедура из зарегистрированных данных формирует сообщения обмена и добавляет в очередь сообщений для передачи мобильному клиенту.
//
Процедура ЗаписатьЗарегистрированныеДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди) Экспорт
	//+++АК BELN 2018.05.22 ИП-00018765
	
	
	КэшНом=ПолучитьКэшНоменклатуры();	

	//---АК BELN 2018.05.22 
	ЗаписьСообщения = Неопределено;
	ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
	
	Сч = 0;
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Сч = Сч + 1;
		//+++АК BELN 2018.05.22 Глючит обмен уменьшаем хмл
		Если Сч >= 1000 Тогда
		//Если Сч >= 500 Тогда
		//---АК BELN 2018.05.22 	
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			ЗаписьСообщения.ЗакончитьЗапись();
			СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
			НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
			ОбменМобильноеПриложениеПереопределяемый.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);
			
			ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			
			Сч = 0;
			
		КонецЕсли;
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если НЕ ОбменМобильноеПриложениеПереопределяемый.НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных.
			УдалениеДанных(Данные);
			
		КонецЕсли;
		
		ОбменМобильноеПриложениеПереопределяемый.ЗаписатьДанные(ВозвращаемыйСписок, Данные, УзелОбмена,КэшНом);
		
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	ЗаписьСообщения.ЗакончитьЗапись();
	СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	ОбменМобильноеПриложениеПереопределяемый.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);

КонецПроцедуры // ЗаписатьВОчередьСообщенийОбменаЗарегистрированныеДанные()

// Процедура проверяет порядок следования сообщений в очереди, после номера последнего успешно принятого сообщения.
Процедура ПроверитьОчередьСообщенийОбмена(УзелОбмена, Знач НомерПринятого) Экспорт

	НомерСообщенияОчереди = НомерПринятого + 1;
	
	Отбор = Новый Структура("МобильныйКлиент", УзелОбмена);
	Порядок = "НомерСообщения Возр";
	ВыборкаСообщенийОбмена = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.Выбрать(Отбор, Порядок);

	Пока ВыборкаСообщенийОбмена.Следующий() Цикл

		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "ПроверитьОчередьСообщенийОбмена. ВыборкаСообщенийОбмена.НомерСообщения  " + ВыборкаСообщенийОбмена.НомерСообщения + ". НомерСообщенияОчереди " + НомерСообщенияОчереди);	

		Если ВыборкаСообщенийОбмена.НомерСообщения < НомерСообщенияОчереди Тогда
			
			Продолжить;
			
		ИначеЕсли ВыборкаСообщенийОбмена.НомерСообщения > НомерСообщенияОчереди Тогда			
				
			// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
			ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
			
		КонецЕсли;
		
		НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАГРУЗКИ

// Функция получает статус задания формирования очереди сообщений для мобильного клиента.
//
Функция ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки) Экспорт

	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		Возврат ЗаданиеВыполнено;
	Исключение
	КонецПопытки;
	
	ЕстьОшибки = Истина;
	Возврат Ложь;

КонецФункции // ЗаданиеФормированияОчередиЗавершеноУспешно()

// Получает для мобильного клиента сообщение обмена по номеру сообщения.
//
Функция ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.СообщениеОбмена
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения = &НомерСообщения";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", УзелОбмена);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщенияОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СообщениеОбмена;

КонецФункции // ПолучитьСообщениеОбменаПоНомеру()

// Процедура загружает объекты в информационную базу.
//
Процедура ЗагрузитьОбъекты(УзелОбмена, Объекты) Экспорт
	
	//ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
	//ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
	//ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
	//
	
	//НачатьТранзакцию();
	
	
	Если Объекты <> Неопределено Тогда
		Для каждого ОбъектXDTO Из Объекты.objects Цикл
			Если ОбъектXDTO.Тип().Имя = "ObjectDeletion" Тогда
				ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO);
			Иначе
				НайтиСоздатьОбъект(УзелОбмена, ОбъектXDTO);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//ЗафиксироватьТранзакцию();		
	
	//ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры // ЗагрузитьОбъекты()

Функция НайтиСоздатьОбъект(УзелОбмена, ОбъектXDTO)
	
	ТипОбъекта = ОбъектXDTO.Тип().Имя;
	Если ТипОбъекта = "Nomenclature" Тогда
		Возврат НайтиСоздатьНоменклатуру(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "Characteristics" Тогда
		Возврат НайтиСоздатьХарактеристикуНоменклатуры(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "EdIzm" Тогда
		Возврат НайтиСоздатьЕдиницуИзмерения(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "Task" Тогда
		Возврат НайтиСоздатьЗадачу(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "PhotosToTasks" Тогда
		Возврат НайтиСоздатьФотографиюКЗадаче(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "PackageInventory" Тогда
		Возврат НайтиСоздатьИнвентаризациюУпаковки(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "TechnologistOperation" Тогда
		Возврат НайтиСоздатьОтчетТехнолога(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "PhotosToTechnologistTasks" Тогда
		Возврат НайтиСоздатьФотографиюКЗадачеТехнолога(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "NewProductTasks" Тогда		
		Возврат НайтиСоздатьЗадачуНаНовыйТовар(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "NewProductOperation" Тогда
		Возврат НайтиСоздатьОтчетПоНовомуТовару(УзелОбмена, ОбъектXDTO);
	//+++АК SHEP 20160520
	ИначеЕсли ТипОбъекта = "PlanAssortim" Тогда
		Возврат НайтиСоздатьПлановыйАссортимент(УзелОбмена, ОбъектXDTO);
	//+++АК SHEP 20160603
	//ИначеЕсли ТипОбъекта = "Shops" Тогда
	//	Возврат НайтиСоздатьСтруктурнуюЕдиницу(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "BuildersEvents" Тогда
		Возврат НайтиСоздатьСобытиеСтроителей(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "BuildersTasks" Тогда
		Возврат НайтиСоздатьЗаданиеСтроителей(УзелОбмена, ОбъектXDTO);
	//---АК SHEP
	//АК БЕЛН 22.05.2017+
	ИначеЕсли ТипОбъекта = "Urgency" Тогда
		Возврат НайтиСоздатьСрочность(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "RepairRequest" Тогда
		Возврат НайтиСоздатьЗаявкуНаРемонт(УзелОбмена, ОбъектXDTO);
		
	//АК БЕЛН 22.05.2017-
	ИначеЕсли ТипОбъекта = "InventoryTasks" Тогда
		Возврат НайтиСоздатьЗаданиеНаИнвентаризацию(УзелОбмена, ОбъектXDTO);
	ИначеЕсли ТипОбъекта = "PhotosToWriteOff" Тогда
		Возврат НайтиСоздатьФотографиюКСписанию(УзелОбмена, ОбъектXDTO);
	КонецЕсли
	
КонецФункции

Функция НайтиСоздатьЗадачу(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.МП_ЗадачаМагазина.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.МП_ЗадачаМагазина.ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
	Исключение
		Возврат Документы.МП_ЗадачаМагазина.ПустаяСсылка();
	КонецПопытки;
	
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Возврат Документы.МП_ЗадачаМагазина.ПустаяСсылка();
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;

	НовыйСтатус = ПолучитьЗначениеПеречисления("СтатусыЗадач", ОбъектXDTO.Status);

	Если НовыйСтатус = Перечисления.СтатусыЗадач.Выгружено Тогда
		НовыйСтатус = Перечисления.СтатусыЗадач.ГОТОВО;
	КонецЕсли; 

	Если Объект.СтатусЗадачи <> НовыйСтатус Тогда
		Объект.СтатусЗадачи = НовыйСтатус;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если Объект.ДатаВыполнения <> ОбъектXDTO.EndDate Тогда
		Объект.ДатаВыполнения = ОбъектXDTO.EndDate;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	//+++ZEZA
	Если Объект.ДатаДоставки <> ОбъектXDTO.DeliveryDate Тогда
		Объект.ДатаДоставки = ОбъектXDTO.DeliveryDate;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	//---ZEZA	
	
	ЗагружаемыеРакурсы = ОбъектXDTO.Items.Item;
	
	ФотографийНаУстройстве = 0;
	Для каждого ТекСтрока Из ЗагружаемыеРакурсы Цикл
		ФотографийНаУстройстве  = ФотографийНаУстройстве + ТекСтрока.Quantity ;
		
		Ракурс = НайтиСоздатьРакурс(УзелОбмена, ТекСтрока.Rakurse);
		СтрокаРакурса = Объект.Ракурсы.Найти(Ракурс);

		Если СтрокаРакурса = Неопределено Тогда
			Продолжить		
		КонецЕсли; 
		
		Если СтрокаРакурса.КоличествоФотографий <> ТекСтрока.Quantity Тогда
			СтрокаРакурса.КоличествоФотографий = ТекСтрока.Quantity;
			
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЦикла;

	Если НужноЗаписыватьОбъект Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись);
			ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Записали: " +  Объект + ". Количество фото: " + Объект.Ракурсы.Итог("КоличествоФотографий") + ". На устройстве: " + ФотографийНаУстройстве);
		Исключение
			//Сообщить(ОписаниеОшибки());
			ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Не удалось записать " +  Объект + " по причине " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьЗадачу

Функция НайтиСоздатьНоменклатуру(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	Возврат Ссылка;
	
	//Если Ссылка.Пустая() Тогда
	//	Возврат Ссылка;
	//КонецЕсли;
	//
	//Попытка
	//	Объект = Ссылка.ПолучитьОбъект();
	//Исключение
	//	Возврат Справочники.ОбъектыНедвижимости.ПустаяСсылка();
	//КонецПопытки;
	//
	//ЭтоНовый = Ложь;
	//Если Объект = Неопределено Тогда
	//	Если ОбъектXDTO.ThisIsGroup Тогда
	//		Объект = Справочники.Номенклатура.СоздатьГруппу();
	//	Иначе
	//		Объект = Справочники.Номенклатура.СоздатьЭлемент();
	//	КонецЕсли;
	//	Объект.УстановитьСсылкуНового(Ссылка);
	//	Объект.УстановитьНовыйКод();
	//	Объект.Записать();
	//	ЭтоНовый = Истина;
	//КонецЕсли;
	//
	////Если Не ЭтоНовый Тогда
	////	Возврат Объект.Ссылка;
	////КонецЕсли;
	////
	//НужноЗаписыватьОбъект = Ложь;
	//Если Объект.Наименование <> ОбъектXDTO.Name Тогда
	//	Объект.Наименование = ОбъектXDTO.Name;
	//	НужноЗаписыватьОбъект = Истина;
	//КонецЕсли;
	//
	//Возврат Объект.Ссылка;
	//
КонецФункции // НайтиСоздатьНоменклатуру

Функция НайтиСоздатьХарактеристикуНоменклатуры(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьХарактеристикуНоменклатуры

//АК БЕЛН 22.05.2017+
Функция НайтиСоздатьСрочность(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СрочностьВыполненияЗаявкиНаРемонт.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.СрочностьВыполненияЗаявкиНаРемонт.ПолучитьСсылку(Идентификатор);
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьХарактеристикуНоменклатуры


Функция НайтиСоздатьЕдиницуИзмерения(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Идентификатор);
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьЕдиницуИзмерения

//+++АК SHEP 20160520
Функция НайтиСоздатьПлановыйАссортимент(УзелОбмена, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.ПлановыйАссортимент.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.ПлановыйАссортимент.ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПлановыйАссортимент.Ссылка
		|ИЗ
		|	Справочник.ПлановыйАссортимент КАК ПлановыйАссортимент
		|ГДЕ
		|	ПлановыйАссортимент.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СсылкаНайдена = Выборка.Следующий();
	
	Если ОбъектXDTO.Name = "Ref" И СсылкаНайдена Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	//Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Не СсылкаНайдена Тогда//Объект = Неопределено Тогда
		Если ОбъектXDTO.ThisIsGroup Тогда
			Объект = Справочники.ПлановыйАссортимент.СоздатьГруппу();
		Иначе
			Объект = Справочники.ПлановыйАссортимент.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		
		Объект.Записать();
		ЭтоНовый = Истина;
		
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектXDTO.Name = "Ref" Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;

	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Родитель = НайтиСоздатьПлановыйАссортимент(УзелОбмена, ОбъектXDTO.Group);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Не Объект.ЭтоГруппа Тогда
		
		СтатусПлановогоАссортимента = ПолучитьЗначениеПеречисления("СтатусыПлановогоАссортимента", ОбъектXDTO.Status);
		Если Объект.Статус <> СтатусПлановогоАссортимента Тогда
			Объект.Статус = СтатусПлановогоАссортимента;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		
		ФизЛицоСсылка = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.Responsible);
		Если Объект.Ответственный <> ФизЛицоСсылка Тогда
			Объект.Ответственный = ФизЛицоСсылка;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		
		ФизЛицоСсылка = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.ProductManager);
		Если Объект.ПродактМенеджер <> ФизЛицоСсылка Тогда
			Объект.ПродактМенеджер = ФизЛицоСсылка;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		
		Если Объект.Описание <> ОбъектXDTO.Description Тогда
			Объект.Описание = ОбъектXDTO.Description;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		
		ИсточникВозникновения = ПолучитьЗначениеПеречисления("ВидыПриложений", ОбъектXDTO.Origin);
		Если Объект.ИсточникВозникновения <> ИсточникВозникновения Тогда
			Объект.ИсточникВозникновения = ИсточникВозникновения;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		
		РольТехнолога = НайтиСоздатьРольПользователя(УзелОбмена, ОбъектXDTO.TechnologRole);
		Если Объект.РольТехнолога <> РольТехнолога Тогда
			Объект.РольТехнолога = РольТехнолога;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		
		//+++АК SHEP 20161109
		Если Объект.ПлановаяДатаЗапуска <> ОбъектXDTO.PlanLaunchDate Тогда
			Объект.ПлановаяДатаЗапуска = ОбъектXDTO.PlanLaunchDate;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		
		Номенклатура = НайтиСоздатьНоменклатуру(УзелОбмена, ОбъектXDTO.Nomenclature);
		Если Объект.Номенклатура <> Номенклатура Тогда
			Объект.Номенклатура = Номенклатура;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		//---АК SHEP 20161109
		//+++АК БЕЛН 20170724
		Попытка
		ЗагружаемыеСтроки = ОбъектXDTO.Degustations.Degustation;
		
		Для каждого ТекСтрока Из ЗагружаемыеСтроки Цикл
			
			
			СтрокаПараметра = Объект.Дегустация.Найти(ТекСтрока.UINStroki);

			Если СтрокаПараметра = Неопределено Тогда
				СтрокаПараметра = Объект.Дегустация.Добавить();
				СтрокаПараметра.УИН_Строки = ТекСтрока.UINStroki;
			КонецЕсли; 
			Если Не СтрокаПараметра.Наименование=ТекСтрока.Name Тогда
				СтрокаПараметра.Наименование=ТекСтрока.Name;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
			Если Не СтрокаПараметра.Описание=ТекСтрока.Description Тогда
				СтрокаПараметра.Описание=ТекСтрока.Description;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
			Если Не СтрокаПараметра.Состав= ТекСтрока.Sostav Тогда
				СтрокаПараметра.Состав= ТекСтрока.Sostav;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
			Если Не СтрокаПараметра.Комментарий=ТекСтрока.Comment Тогда
				СтрокаПараметра.Комментарий=ТекСтрока.Comment;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
			Если Не СтрокаПараметра.Дата=ТекСтрока.Date Тогда
				СтрокаПараметра.Дата=ТекСтрока.Date;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 

		КонецЦикла;
		
		
		ЗагружаемыеСтроки = ОбъектXDTO.Analogi.Analog;
		
		Для каждого ТекСтрока Из ЗагружаемыеСтроки Цикл
			
			
			СтрокаПараметра = Объект.АналогиНаРынке.Найти(ТекСтрока.UINStroki);

			Если СтрокаПараметра = Неопределено Тогда
				СтрокаПараметра = Объект.АналогиНаРынке.Добавить();
				СтрокаПараметра.УИН_Строки = ТекСтрока.UINStroki;
			КонецЕсли; 
			Если Не СтрокаПараметра.Наименование=ТекСтрока.Name Тогда
				СтрокаПараметра.Наименование=ТекСтрока.Name;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
			Если Не СтрокаПараметра.Описание=ТекСтрока.Description Тогда
				СтрокаПараметра.Описание=ТекСтрока.Description;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
			Если Не СтрокаПараметра.Состав= ТекСтрока.Sostav Тогда
				СтрокаПараметра.Состав= ТекСтрока.Sostav;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
			Если Не СтрокаПараметра.Комментарий=ТекСтрока.Comment Тогда
				СтрокаПараметра.Комментарий=ТекСтрока.Comment;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли; 
		КонецЦикла;
		Исключение
		КонецПопытки;
		//---АК БЕЛН 20170724

	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПлановыйАссортимент //---АК SHEP 20160520

Функция НайтиСоздатьРакурс(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.МП_Ракурсы.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.МП_Ракурсы.ПолучитьСсылку(Идентификатор);
	Возврат Ссылка;
	
КонецФункции 

Функция НайтиСоздатьФотографиюКЗадаче(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.МП_ФотографииКЗадачам.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;

	Объект = Ссылка.ПолучитьОбъект();
	Задача = НайтиСоздатьЗадачу(УзелОбмена, ОбъектXDTO.Task);
	Если Объект = Неопределено Тогда
		Объект = Справочники.МП_ФотографииКЗадачам.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Задача = Задача;
		Объект.УстановитьНовыйКод();
		Объект.Записать();
	КонецЕсли;
	
	//Объект.Наименование = ОбъектXDTO.Name;
	Объект.Задача = Задача;
	//Объект.Данные = Новый ХранилищеЗначения(ОбъектXDTO.Data);
	Объект.Ракурс = НайтиСоздатьРакурс(УзелОбмена, ОбъектXDTO.Rakurs);
	//Объект.Комментарий = ОбъектXDTO.Comment;
	Попытка
		Объект.РасширениеФайла = ОбъектXDTO.Extension;
	Исключение
	КонецПопытки;
	
	Объект.Записать();
	
	//
	Если ЗначениеЗаполнено(Объект.ОтносительноеИмяФайла) И ЗначениеЗаполнено(Объект.СтатусФото) Тогда
		КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());

		Если Прав(КаталогФотографий, 1) <> "\" Тогда
			КаталогФотографий = КаталогФотографий + "\";
		КонецЕсли;

		ТекущийФайл = Новый Файл(КаталогФотографий + Объект.ОтносительноеИмяФайла);
		
		Если ТекущийФайл.Существует() Тогда
			ЗадачаОбъект = Объект.Задача.ПолучитьОбъект();
			
			СтрокаИсправлений = ЗадачаОбъект.Ракурсы.Найти(Справочники.МП_Ракурсы.ИсправленныеФотографии);
			
			Если СтрокаИсправлений = Неопределено Тогда
				СтрокаИсправлений = ЗадачаОбъект.Ракурсы.Добавить();
				СтрокаИсправлений.Ракурс = Справочники.МП_Ракурсы.ИсправленныеФотографии;
				
				Попытка 
					ЗадачаОбъект.Записать();
				Исключение
				КонецПопытки; 
			КонецЕсли; 
			
			//
			ИсправленноеФотоОбъект = Справочники.МП_ФотографииКЗадачам.СоздатьЭлемент();
			
			ИсправленноеФотоОбъект.Задача = Объект.Задача;
			ИсправленноеФотоОбъект.Ракурс = Справочники.МП_Ракурсы.ИсправленныеФотографии;
			ИсправленноеФотоОбъект.РасширениеФайла = Объект.РасширениеФайла;
			ИсправленноеФотоОбъект.Комментарий = Объект.Комментарий;
			
			ИдентификаторНовогоФото = Новый УникальныйИдентификатор();
			ИсправленноеФотоОбъект.УстановитьСсылкуНового(Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(ИдентификаторНовогоФото));

			Попытка 
				ИсправленноеФотоОбъект.ОтносительноеИмяФайла = СтрЗаменить(Объект.ОтносительноеИмяФайла, Объект.Ссылка.УникальныйИдентификатор(), ИдентификаторНовогоФото);  			;
				КопироватьФайл(КаталогФотографий + Объект.ОтносительноеИмяФайла, КаталогФотографий + ИсправленноеФотоОбъект.ОтносительноеИмяФайла);
				
				ИсправленноеФотоОбъект.Записать();
			Исключение
			КонецПопытки; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Объект.ОтносительноеИмяФайла = ОбновитьФайлФотографииНаДиске(ОбъектXDTO.Data, Объект);

	Объект.Записать();

	//
	ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Загружена фотография. Дата: " + Объект.Задача.Дата + ". Ракурс: " + Объект.Ракурс);	
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПрисоединенныйФайл

Функция НайтиСоздатьИнвентаризациюУпаковки(УзелОбмена, ОбъектXDTO)
	
	//ЗаписьЖурналаРегистрации("Загружена инвентаризация упаковки", УровеньЖурналаРегистрации.Информация, , НайтиСоздатьНоменклатуру(УзелОбмена, ОбъектXDTO.Nomenclature), ОбъектXDTO.Id + ОбъектXDTO.Extension);	

	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ИнвентаризацияУпаковки.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.ИнвентаризацияУпаковки.ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
	Исключение
		Возврат Документы.ИнвентаризацияУпаковки.ПустаяСсылка();
	КонецПопытки;
	
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.ИнвентаризацияУпаковки.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Дата = ОбъектXDTO.Date;
		Объект.УстановитьНовыйНомер();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;

	Если Объект.Дата <> ОбъектXDTO.Date Тогда
		Объект.Дата = ОбъектXDTO.Date;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если Объект.Магазин <> УзелОбмена.Магазин Тогда
		Объект.Магазин = УзелОбмена.Магазин;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Номенклатура =  НайтиСоздатьНоменклатуру(УзелОбмена, ОбъектXDTO.Nomenclature);
	Если Объект.Номенклатура <> Номенклатура Тогда
		Объект.Номенклатура = Номенклатура;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	ХарактеристикаНоменклатуры =  НайтиСоздатьХарактеристикуНоменклатуры(УзелОбмена, ОбъектXDTO.Characteristic);
	Если Объект.ХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
		Объект.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если Объект.РасширениеФайла <> ОбъектXDTO.Extension Тогда
		Объект.РасширениеФайла = ОбъектXDTO.Extension; 
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	
	Если НужноЗаписыватьОбъект Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Объект.ОтносительноеИмяФайла = ОбновитьФайлФотографииНаДиске(ОбъектXDTO.Data, Объект);

	Объект.Записать(РежимЗаписиДокумента.Запись);
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;

	Возврат Объект.Ссылка;

	
КонецФункции // НайтиСоздатьПрисоединенныйФайл

Функция НайтиСоздатьПараметрЗадачиТехнолога(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.МП_ПараметрыЗадачиТехнолога.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.МП_ПараметрыЗадачиТехнолога.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции 

Функция НайтиСоздатьЗадачуТехнолога(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.МП_ЗадачаТехнолога.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.МП_ЗадачаТехнолога.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции 

Функция НайтиСоздатьЗадачуНаНовыйТовар(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.МП_ЗадачаНаНовыйТовар.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.МП_ЗадачаНаНовыйТовар.ПолучитьСсылку(Идентификатор);
	
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
	Исключение
		Возврат Документы.МП_ЗадачаНаНовыйТовар.ПустаяСсылка();
	КонецПопытки;
	
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.МП_ЗадачаНаНовыйТовар.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Дата = ОбъектXDTO.Date;
		Объект.УстановитьНовыйНомер();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	//
	НужноЗаписыватьОбъект = Ложь;
	
	Если Объект.Дата <> ОбъектXDTO.Date Тогда
		Объект.Дата = ОбъектXDTO.Date;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	СтатусЗадачи = ПолучитьЗначениеПеречисления("СтатусыЗадачНаНовыйТовар", ОбъектXDTO.Status);
	Если Объект.СтатусЗадачи <> СтатусЗадачи Тогда
		Объект.СтатусЗадачи  = СтатусЗадачи;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Автор = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.Author);
	Если Объект.Автор <> Автор Тогда
		Объект.Автор = Автор;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ОписаниеЗадачи <> ОбъектXDTO.TaskDescription Тогда
		Объект.ОписаниеЗадачи = ОбъектXDTO.TaskDescription;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Номенклатура =  НайтиСоздатьНоменклатуру(УзелОбмена, ОбъектXDTO.Nomenclature);
	Если Объект.Номенклатура <> Номенклатура Тогда
		Объект.Номенклатура  = Номенклатура;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры =  НайтиСоздатьХарактеристикуНоменклатуры(УзелОбмена, ОбъектXDTO.Characteristic);
	Если Объект.ХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
		Объект.ХарактеристикаНоменклатуры  = ХарактеристикаНоменклатуры;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	//+++АК SHEP 20160523
	Если НЕ ПустаяСтрока(ОбъектXDTO.TaskSourceType) Тогда
		
	Иначе
		ПлановыйАссортимент = НайтиСоздатьПлановыйАссортимент(УзелОбмена, ОбъектXDTO.PlanAssortim);
		Если Объект.ПлановыйАссортимент <> ПлановыйАссортимент Тогда
			Объект.ПлановыйАссортимент  = ПлановыйАссортимент;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 20160523

	Производитель =  НайтиСоздатьКонтрагента(УзелОбмена, ОбъектXDTO.Partner);
	Если Объект.Производитель <> Производитель Тогда
		Объект.Производитель  = Производитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	

	//	
	Если НужноЗаписыватьОбъект Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Не удалось записать " +  Объект + " по причине " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
	
КонецФункции 

Функция НайтиСоздатьОтчетТехнолога(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.МП_ОтчетТехнолога.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.МП_ОтчетТехнолога.ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
	Исключение
		Возврат Документы.МП_ОтчетТехнолога.ПустаяСсылка();
	КонецПопытки;
	
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.МП_ОтчетТехнолога.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Дата = ОбъектXDTO.Date;
		Объект.УстановитьНовыйНомер();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	//
	НужноЗаписыватьОбъект = Ложь;
	
	Если Объект.Дата <> ОбъектXDTO.Date Тогда
		Объект.Дата = ОбъектXDTO.Date;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	//Задача = НайтиСоздатьЗадачуТехнолога(УзелОбмена, ОбъектXDTO.Task);
	//Если Объект.Задача <> Задача  Тогда
	//	Объект.Задача  = Задача;
	//	НужноЗаписыватьОбъект = Истина;
	//КонецЕсли;

	Технолог = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.Technologist);
	Если Объект.Технолог <> Технолог Тогда
		Объект.Технолог = Технолог;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	//ДокументОснование = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ОбъектXDTO.DocumentBarcode);	
	//Если Объект.ДокументОснование <> ДокументОснование И (ЗначениеЗаполнено(ДокументОснование) ИЛИ ЗначениеЗаполнено(Объект.ДокументОснование)) Тогда
	//	Объект.ДокументОснование = ДокументОснование;
	//	НужноЗаписыватьОбъект = Истина;
	//КонецЕсли;
	//
	
	Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", ОбъектXDTO.StoreCode);
	Если Объект.Склад <> Склад Тогда
		Объект.Склад = Склад;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	
	Номенклатура =  НайтиСоздатьНоменклатуру(УзелОбмена, ОбъектXDTO.Nomenclature);
	Если Объект.Номенклатура <> Номенклатура Тогда
		Объект.Номенклатура  = Номенклатура;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры =  НайтиСоздатьХарактеристикуНоменклатуры(УзелОбмена, ОбъектXDTO.Characteristic);
	Если Объект.ХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
		Объект.ХарактеристикаНоменклатуры  = ХарактеристикаНоменклатуры;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ВидПроверяемойОперации = ПолучитьЗначениеПеречисления("ВидыОперацийПроверяемыхТехнологом", ОбъектXDTO.OperationType);
	Если Объект.ВидПроверяемойОперации <> ВидПроверяемойОперации Тогда
		Объект.ВидПроверяемойОперации  = ВидПроверяемойОперации;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Выполнено <> ОбъектXDTO.Ready Тогда
		Объект.Выполнено  = ОбъектXDTO.Ready;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Результат = ПолучитьЗначениеПеречисления("РезультатыПроверкиТехнологом", ОбъектXDTO.Result);
	Если Объект.Результат <> Результат Тогда
		Объект.Результат = Результат;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	
	//
	ЗагружаемыеПараметры = ОбъектXDTO.Items.Item;
	
	Для каждого ТекСтрока Из ЗагружаемыеПараметры Цикл
		Параметр =  НайтиСоздатьПараметрЗадачиТехнолога(УзелОбмена, ТекСтрока.Parameter);
		
		СтрокаПараметра = Объект.ПараметрыЗадачи.Найти(Параметр);

		Если СтрокаПараметра = Неопределено Тогда
			СтрокаПараметра = Объект.ПараметрыЗадачи.Добавить();
			СтрокаПараметра.Параметр = Параметр;
		КонецЕсли; 
	
		//Результат = ПолучитьЗначениеПеречисления("РезультатыПроверкиТехнологом", ТекСтрока.Result);
		//Если СтрокаПараметра.Результат <> Результат Тогда
		//	СтрокаПараметра.Результат = Результат;
		//	НужноЗаписыватьОбъект = Истина;
		//КонецЕсли;

		//Если СтрокаПараметра.Комментарий <> ТекСтрока.Comment Тогда
		//	СтрокаПараметра.Комментарий = ТекСтрока.Comment;
		//	НужноЗаписыватьОбъект = Истина;
		//КонецЕсли;

		
	КонецЦикла;
	
	//	
	Если НужноЗаписыватьОбъект Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Не удалось записать " +  Объект + " по причине " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	
	Возврат Объект.Ссылка;
	
КонецФункции 

Функция НайтиСоздатьОтчетПоНовомуТовару(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.МП_ОтчетПоНовомуТовару.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.МП_ОтчетПоНовомуТовару.ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
	Исключение
		Возврат Документы.МП_ОтчетПоНовомуТовару.ПустаяСсылка();
	КонецПопытки;
	
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.МП_ОтчетПоНовомуТовару.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Дата = ОбъектXDTO.Date;
		Объект.УстановитьНовыйНомер();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	//
	НужноЗаписыватьОбъект = Ложь;
	
	Если Объект.Дата <> ОбъектXDTO.Date Тогда
		Объект.Дата = ОбъектXDTO.Date;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	//Задача = НайтиСоздатьЗадачуНаНовыйТовар(УзелОбмена, ОбъектXDTO.Task);
	Задача = Документы.МП_ЗадачаНаНовыйТовар.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.TaskId));
	Если Объект.Задача <> Задача  Тогда
		Объект.Задача  = Задача;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Технолог = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.Technologist);
	Если Объект.Технолог <> Технолог Тогда
		Объект.Технолог = Технолог;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если Объект.ДанныеПоставщика <> ОбъектXDTO.SupplierData Тогда
		Объект.ДанныеПоставщика = ОбъектXDTO.SupplierData;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.АдресПроизводства <> ОбъектXDTO.ManufactureAddress Тогда
		Объект.АдресПроизводства = ОбъектXDTO.ManufactureAddress;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.РезультатДегустации <> ОбъектXDTO.Degustation Тогда
		Объект.РезультатДегустации = ОбъектXDTO.Degustation;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	//+++АК SHEP 20160523
	Если ОбъектXDTO.Свойства().Получить("PlanAssortim") <> Неопределено Тогда
		ПлановыйАссортимент = НайтиСоздатьПлановыйАссортимент(УзелОбмена, ОбъектXDTO.PlanAssortim);
		Если Объект.ПлановыйАссортимент <> ПлановыйАссортимент Тогда
			Объект.ПлановыйАссортимент  = ПлановыйАссортимент;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 20160523
	//+++АК SHEP 20160913
	Поставщик = НайтиСоздатьКонтрагента(УзелОбмена, ОбъектXDTO.Supplier);
	Если Объект.Поставщик <> Поставщик Тогда
		Объект.Поставщик  = Поставщик;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	//---АК SHEP 20160913
	
	// Загружаем комментарии
	ЗагружаемыеСтроки = ОбъектXDTO.Comments.Item;
	
	Для каждого ТекСтрока Из ЗагружаемыеСтроки  Цикл
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("Пользователь",  НайтиСоздатьФизЛицо(УзелОбмена, ТекСтрока.User));
		СтруктураОтбора.Вставить("Комментарий", ТекСтрока.Comment);
		СтруктураОтбора.Вставить("Дата", ТекСтрока.Date);
		
		НайденныеСтроки = Объект.Комментарии.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Комментарии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтбора);
			НужноЗаписыватьОбъект = Истина;			
		КонецЕсли; 
	КонецЦикла;
	
	Объект.Комментарии.Сортировать("Дата Убыв");	
	
	//	
	Если НужноЗаписыватьОбъект Тогда
		Объект.ЕстьИзменения = Истина;
		
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Не удалось записать " +  Объект + " по причине " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	
	Возврат Объект.Ссылка;
	
КонецФункции 

Функция НайтиСоздатьФотографиюКЗадачеТехнолога(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO.PhotoDestination = "ОперацияТехнолога" Тогда
		ДокументСсылка = НайтиСоздатьОтчетТехнолога(УзелОбмена, ОбъектXDTO.Operation);					
		
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ЗадачаНаНовыйТовар" Тогда
		ДокументСсылка = НайтиСоздатьЗадачуНаНовыйТовар(УзелОбмена, ОбъектXDTO.TaskNewProduct);		
		
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ОтчетПоНовомуТовару" Тогда
		ДокументСсылка = НайтиСоздатьОтчетПоНовомуТовару(УзелОбмена, ОбъектXDTO.OperationNewProduct);		
		
	//+++АК SHEP 20160520
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ПлановыйАссортимент" Тогда
		ДокументСсылка = НайтиСоздатьПлановыйАссортимент(УзелОбмена, ОбъектXDTO.PlanAssortim);
		
	//+++АК SHEP 20160603
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ЗаданиеСтроителей" Тогда
		ДокументСсылка = НайтиСоздатьЗаданиеСтроителей(УзелОбмена, ОбъектXDTO.BuildersTask);
	//---АК SHEP
	//+++АК БЕЛН 20160603
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ЗаявкаНаРемонт" Тогда
		ДокументСсылка = НайтиСоздатьЗаявкуНаРемонт(УзелОбмена, ОбъектXDTO.RepairRequest);
	//---АК БЕЛН
	КонецЕсли; 
	
	Если ДокументСсылка.Пустая() Тогда
		Возврат ДокументСсылка;
	КонецЕсли; 
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	//
	Если ОбъектXDTO.PhotoDestination = "ОперацияТехнолога" Тогда		
		
		Параметр =  НайтиСоздатьПараметрЗадачиТехнолога(УзелОбмена, ОбъектXDTO.Parameter);
		
		СтрокаОперации = ДокументОбъект.ПараметрыЗадачи.Найти(Параметр);
		
		Если СтрокаОперации = Неопределено Тогда
			Возврат ДокументСсылка;	
		КонецЕсли; 
	
		СтрокаФотографии = ДокументОбъект.Фотографии.Найти(ОбъектXDTO.Id);
		
		Если ОбъектXDTO.DeletionMark = Истина Тогда
			Если СтрокаФотографии <> Неопределено Тогда
				ДокументОбъект.Фотографии.Удалить(СтрокаФотографии);
				
				НЗ = РегистрыСведений.ПрикрепленныеФотоКОбъектам.СоздатьНаборЗаписей();
				
				НЗ.Отбор.ТипЗаписи.Установить(Перечисления.ТипыЗаписейПриложенныхКартинок.ОтчетТехнолога);
				НЗ.Отбор.УинЗаписи.Установить(ОбъектXDTO.Id);
				
				НЗ.Записать();
			КонецЕсли;
			
		Иначе
			Если СтрокаФотографии = Неопределено Тогда
				СтрокаФотографии = ДокументОбъект.Фотографии.Добавить();
				СтрокаФотографии.ИдентификаторФотографии = ОбъектXDTO.Id;
				СтрокаФотографии.Параметр =  Параметр;
			КонецЕсли; 
				
			ДанныеФотографии = Новый Структура("Номенклатура, Характеристика, ИдентификаторФотографии, Расширение, Комментарий", 
																СтрокаОперации.Номенклатура, СтрокаОперации.ХарактеристикаНоменклатуры, ОбъектXDTO.Id, ОбъектXDTO.Extension, СтрокаОперации.Комментарий);
																	
			СтрокаФотографии.ОтносительноеИмяФайла = ОбновитьФайлФотографииНаДиске(ОбъектXDTO.Data, ДокументОбъект, ДанныеФотографии);
		КонецЕсли; 

	ИначеЕсли ОбъектXDTO.PhotoDestination = "ОтчетПоНовомуТовару" Тогда
	
		ТипФотографии = ПолучитьЗначениеПеречисления("ТипыФотографийНовогоТовара", ОбъектXDTO.PhotoType);
		
		СтрокаФотографии = ДокументОбъект.Фотографии.Найти(ОбъектXDTO.Id);
		
		Если СтрокаФотографии = Неопределено Тогда
			СтрокаФотографии = ДокументОбъект.Фотографии.Добавить();
			СтрокаФотографии.ИдентификаторФотографии = ОбъектXDTO.Id;
			СтрокаФотографии.ТипФотографии =  ТипФотографии;
		КонецЕсли; 
			
		ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", 
															 ОбъектXDTO.Id, ОбъектXDTO.Extension);
																
		СтрокаФотографии.ОтносительноеИмяФайла = ОбновитьФайлФотографииНаДиске(ОбъектXDTO.Data, ДокументОбъект, ДанныеФотографии);
		
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ЗадачаНаНовыйТовар" Тогда
		
		СтрокаФотографии = ДокументОбъект.Фотографии.Найти(ОбъектXDTO.Id);
		
		Если СтрокаФотографии = Неопределено Тогда
			СтрокаФотографии = ДокументОбъект.Фотографии.Добавить();
			СтрокаФотографии.ИдентификаторФотографии = ОбъектXDTO.Id;
		КонецЕсли; 
			
		ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", 
															 ОбъектXDTO.Id, ОбъектXDTO.Extension);
																
		СтрокаФотографии.ОтносительноеИмяФайла = ОбновитьФайлФотографииНаДиске(ОбъектXDTO.Data, ДокументОбъект, ДанныеФотографии);
		
	//+++АК SHEP 20160520
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ПлановыйАссортимент" ИЛИ ОбъектXDTO.PhotoDestination = "ЗаданиеСтроителей" Тогда
		
		ИмяТЧ = ?(ОбъектXDTO.PhotoType = "Файл", "Файлы", "Фотографии");
		
		СтрокаФотографии = ДокументОбъект[ИмяТЧ].Найти(ОбъектXDTO.Id);
		Если СтрокаФотографии = Неопределено Тогда
			СтрокаФотографии = ДокументОбъект[ИмяТЧ].Добавить();
			СтрокаФотографии.ИмяФайла = ?(ПустаяСтрока(ОбъектXDTO.FileName), ОбъектXDTO.Id, ОбъектXDTO.FileName);
			СтрокаФотографии.ИдентификаторФотографии = ОбъектXDTO.Id;
		КонецЕсли;
		ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ОбъектXDTO.Id, ОбъектXDTO.Extension);
		СтрокаФотографии.ОтносительноеИмяФайла = ОбновитьФайлФотографииНаДиске(ОбъектXDTO.Data, ДокументОбъект, ДанныеФотографии);
		//+++АК БЕЛН 20170722
		Попытка
		Если Не ПустаяСтрока(ОбъектXDTO.UINStroki)  Тогда
			ИмяТЧ="ФайлыДегустации";
			СтрокаФотографии1 = ДокументОбъект[ИмяТЧ].Найти(ОбъектXDTO.Id);
			СтрокаФотографии2 = ДокументОбъект["Дегустация"].Найти(ОбъектXDTO.UINStroki);
			Если СтрокаФотографии1 = Неопределено И Не СтрокаФотографии2 = Неопределено Тогда
				СтрокаФотографии1 = ДокументОбъект[ИмяТЧ].Добавить();
				СтрокаФотографии1.ИмяФайла = ?(ПустаяСтрока(ОбъектXDTO.FileName), ОбъектXDTO.Id, ОбъектXDTO.FileName);
				СтрокаФотографии1.ИдентификаторФотографии = ОбъектXDTO.Id;
				СтрокаФотографии1.УИН_Строки = ОбъектXDTO.UINStroki; 
				СтрокаФотографии1.ОтносительноеИмяФайла = СтрокаФотографии.ОтносительноеИмяФайла;
			КонецЕсли;
			
			ИмяТЧ="ФайлыАналогов";
			СтрокаФотографии1 = ДокументОбъект[ИмяТЧ].Найти(ОбъектXDTO.Id);
			СтрокаФотографии2 = ДокументОбъект["АналогиНаРынке"].Найти(ОбъектXDTO.UINStroki);
			Если СтрокаФотографии1 = Неопределено И Не СтрокаФотографии2 = Неопределено Тогда
				СтрокаФотографии1 = ДокументОбъект[ИмяТЧ].Добавить();
				СтрокаФотографии1.ИмяФайла = ?(ПустаяСтрока(ОбъектXDTO.FileName), ОбъектXDTO.Id, ОбъектXDTO.FileName);
				СтрокаФотографии1.ИдентификаторФотографии = ОбъектXDTO.Id;
				СтрокаФотографии1.УИН_Строки = ОбъектXDTO.UINStroki; 
				СтрокаФотографии1.ОтносительноеИмяФайла = СтрокаФотографии.ОтносительноеИмяФайла;
			КонецЕсли;
		КонецЕсли; 	
		Исключение
		КонецПопытки;
	//---АК БЕЛН 20170722                                  
		
	//---АК SHEP 20160520
	//+++АК БЕЛН 20170522
	ИначеЕсли ОбъектXDTO.PhotoDestination = "ЗаявкаНаРемонт"  Тогда
		
		ИмяТЧ = "Файлы";
		
		СтрокаФотографии = ДокументОбъект[ИмяТЧ].Найти(ОбъектXDTO.Id);
		Если СтрокаФотографии = Неопределено Тогда
			СтрокаФотографии = ДокументОбъект[ИмяТЧ].Добавить();
			СтрокаФотографии.ИмяФайла = ?(ПустаяСтрока(ОбъектXDTO.FileName), ОбъектXDTO.Id, ОбъектXDTO.FileName);
			СтрокаФотографии.ИдентификаторФотографии = ОбъектXDTO.Id;
		КонецЕсли;
		
		ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ОбъектXDTO.Id, ОбъектXDTO.Extension);
		СтрокаФотографии.ОтносительноеИмяФайла = ОбновитьФайлФотографииНаДиске(ОбъектXDTO.Data, ДокументОбъект, ДанныеФотографии);
		
	//---АК БЕЛН 20170522
	КонецЕсли;
	
		
	//
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Не удалось записать " +  ДокументОбъект + " по причине " + ОписаниеОшибки());
	КонецПопытки;


	//	
	Возврат ДокументСсылка;
	
КонецФункции 

Функция НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено ИЛИ ПустаяСтрока(ОбъектXDTO.Id) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции 

Функция НайтиСоздатьКонтрагента(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Наименование = ОбъектXDTO.Name;
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	//НужноЗаписыватьОбъект = Ложь;
	//Если Объект.Наименование <> ОбъектXDTO.Name Тогда
	//	Объект.Наименование = ОбъектXDTO.Name;
	//	НужноЗаписыватьОбъект = Истина;
	//КонецЕсли;
	//
	//Если НужноЗаписыватьОбъект Тогда
	//	Объект.Записать();
	//КонецЕсли;
	//
	//Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
	//	Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	//КонецЕсли;
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	Исключение КонецПопытки;
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьФотографиюКСписанию(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Фотография = Новый Картинка(ОбъектXDTO.Data);	
	
	ВнешниеДанные.ДобавитьКартинкуКОперацииСписания(ОбъектXDTO.WriteOffId, УзелОбмена.Магазин, Фотография);
	
	Возврат Неопределено;
	
КонецФункции

//+++АК SHEP 20160601
Функция НайтиСоздатьРольПользователя(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено ИЛИ ПустаяСтрока(ОбъектXDTO.Id) Тогда
		Возврат Справочники.РолиПользователей.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.РолиПользователей.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции
//---АК SHEP 20160601

//+++АК SHEP 20160603
Функция НайтиСоздатьСтруктурнуюЕдиницу(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено ИЛИ ПустаяСтрока(ОбъектXDTO.Id) Тогда
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиСоздатьСобытиеСтроителей(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено ИЛИ ПустаяСтрока(ОбъектXDTO.Id) Тогда
		Возврат Справочники.МП_СобытияСтроителей.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.МП_СобытияСтроителей.ПолучитьСсылку(Идентификатор);
	
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МП_СобытияСтроителей.Ссылка
		|ИЗ
		|	Справочник.МП_СобытияСтроителей КАК МП_СобытияСтроителей
		|ГДЕ
		|	МП_СобытияСтроителей.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СсылкаНайдена = Выборка.Следующий();
	
	Если ОбъектXDTO.Name = "Ref" И СсылкаНайдена Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	Если Не СсылкаНайдена Тогда
		Объект = Справочники.МП_СобытияСтроителей.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		//Объект.УстановитьНовыйКод();
		
		Объект.Записать();
		ЭтоНовый = Истина;
		
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектXDTO.Name = "Ref" Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;

	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьЗаданиеСтроителей(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено ИЛИ ПустаяСтрока(ОбъектXDTO.Id) Тогда
		Возврат Документы.МП_ЗаданиеСтроителей.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.МП_ЗаданиеСтроителей.ПолучитьСсылку(Идентификатор);
	
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МП_ЗаданиеСтроителей.Ссылка
		|ИЗ
		|	Документ.МП_ЗаданиеСтроителей КАК МП_ЗаданиеСтроителей
		|ГДЕ
		|	МП_ЗаданиеСтроителей.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СсылкаНайдена = Выборка.Следующий();
	
	Если ОбъектXDTO.Name = "Ref" И СсылкаНайдена Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	Если Не СсылкаНайдена Тогда
		Объект = Документы.МП_ЗаданиеСтроителей.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Дата = ОбъектXDTO.Date;
		Объект.Номер = ОбъектXDTO.Name;
		
		Объект.Записать();
		ЭтоНовый = Истина;
		
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектXDTO.Name = "Ref" Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;

	НужноЗаписыватьОбъект = Ложь;
	
	СоответствиеПолей = Новый Структура("Дата,ДатаНачала,ДатаПлановогоЗавершения,ДатаФактическогоЗавершения,Комментарий", "Date", "StartDate", "PlanDate", "FactDate", "Comment");
	Для Каждого Поле Из СоответствиеПолей Цикл
		Если Объект[Поле.Ключ] <> ОбъектXDTO[Поле.Значение] Тогда
			Объект[Поле.Ключ] = ОбъектXDTO[Поле.Значение];
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектCтроительства = НайтиСоздатьСтруктурнуюЕдиницу(УзелОбмена, ОбъектXDTO.BuildObject);
	Если Объект.ОбъектCтроительства <> ОбъектCтроительства Тогда
		Объект.ОбъектCтроительства = ОбъектCтроительства;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ТипСобытия = НайтиСоздатьСобытиеСтроителей(УзелОбмена, ОбъектXDTO.EventType);
	Если Объект.ТипСобытия <> ТипСобытия Тогда
		Объект.ТипСобытия = ТипСобытия;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СтатусСтроительства = ПолучитьЗначениеПеречисления("СтатусыСтроительства", ОбъектXDTO.Status);
	Если Объект.Статус <> СтатусСтроительства Тогда
		Объект.Статус = СтатусСтроительства;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ФизЛицоСсылка = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.Responsible);
	Если Объект.Ответственный <> ФизЛицоСсылка Тогда
		Объект.Ответственный = ФизЛицоСсылка;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции
//---АК SHEP 20160603
//+++АК БЕЛН 20170522
Функция НайтиСоздатьЗаявкуНаРемонт(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено ИЛИ ПустаяСтрока(ОбъектXDTO.Id) Тогда
		Возврат Документы.ЗаявкаНаРемонт.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.ЗаявкаНаРемонт.ПолучитьСсылку(Идентификатор);
	
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СсылкаНайдена = Выборка.Следующий();
	
	Если ОбъектXDTO.Name = "Ref" И СсылкаНайдена Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	Если Не СсылкаНайдена Тогда
		Объект = Документы.ЗаявкаНаРемонт.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Дата = ОбъектXDTO.Date;
		Объект.Номер = ОбъектXDTO.Name;
		
		Объект.Записать();
		ЭтоНовый = Истина;
		
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектXDTO.Name = "Ref" Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;

	НужноЗаписыватьОбъект = Ложь;
	
	СоответствиеПолей = Новый Структура("Дата,Выполнено,ВыполнениеПодтверждено,Описание", "Date", "Ready", "Confirmed","Comment");
	Для Каждого Поле Из СоответствиеПолей Цикл
		Если Объект[Поле.Ключ] <> ОбъектXDTO[Поле.Значение] Тогда
			Объект[Поле.Ключ] = ОбъектXDTO[Поле.Значение];
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЦикла;
	
	
	ФизЛицоСсылка = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.Author);
	
	
	
	Если Объект.Автор <> ФизЛицоСсылка Тогда
		Объект.Автор = ФизЛицоСсылка;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ФизЛицоСсылка = НайтиСоздатьФизЛицо(УзелОбмена, ОбъектXDTO.PersonExe);
	
	Техник=Справочники.Техники.НайтиПоРеквизиту("ФизЛицо",ФизЛицоСсылка);
	Если Не ЗначениеЗаполнено(Техник) И ЗначениеЗаполнено(ФизЛицоСсылка) Тогда
		ОбТехник=Справочники.Техники.СоздатьЭлемент();
		ОбТехник.Наименование=Строка(ФизЛицоСсылка);
		ОбТехник.ФизЛицо=ФизЛицоСсылка;
		ОбТехник.Записать();
		Техник=ОбТехник.Ссылка;
	КонецЕсли; 
	
	
	Если Объект.ИсполнительФизЛицо <> Техник И ЗначениеЗаполнено(ФизЛицоСсылка)  Тогда
		Объект.ИсполнительФизЛицо = Техник;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ВидЗаявки = ПолучитьЗначениеПеречисления("ВидыЗаявокНаРемонт", ОбъектXDTO.RequestType);
	Если Объект.ВидЗаявки <> ВидЗаявки Тогда
		Объект.ВидЗаявки  = ВидЗаявки;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли; 
	
	СуточныйПериод = ПолучитьЗначениеПеречисления("СуточныйПериод", ОбъектXDTO.DayPart);
	Если Объект.СуточныйПериод <> СуточныйПериод Тогда
		Объект.СуточныйПериод  = СуточныйПериод;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;                                                           
	
	Если Объект.Магазин <> УзелОбмена.Магазин Тогда
		Объект.Магазин  = УзелОбмена.Магазин;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Срочность = НайтиСоздатьСрочность(УзелОбмена, ОбъектXDTO.Urgency);
	Если Объект.Срочность <> Срочность Тогда
		Объект.Срочность = Срочность;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ИсполнительКонтрагент = НайтиСоздатьКонтрагента(УзелОбмена, ОбъектXDTO.PartnerExe);
	Если Объект.ИсполнительКонтрагент <> ИсполнительКонтрагент Тогда
		Объект.ИсполнительКонтрагент = ИсполнительКонтрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	
	Если НужноЗаписыватьОбъект Тогда
		Если  ОбъектXDTO.DeletionMark=Ложь И НЕ Объект.ПометкаУдаления  Тогда
			Попытка
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				//Сообщить(ОписаниеОшибки());
				ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Не удалось провести " +  Объект + " по причине " + ОписаниеОшибки());
			КонецПопытки;
		Иначе	
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции
//---АК БЕЛН 20170522


//+++АК SHEP 20160609
Функция ПолучитьФотографиюИзТЧ(ДанныеМобильногоПриложения) Экспорт
Перем ИмяТЧ;

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();
	
	СтруктураОтвет = Новый Структура("ТекстОшибки", "");
	ТипОбъекта = СтруктураЗаписи.ТипОбъекта;
	Если ТипОбъекта = "ПлановыйАссортимент" Тогда
		ТипОбъекта = "Справочник.ПлановыйАссортимент";
		ОбъектСсылка = Справочники.ПлановыйАссортимент.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.ИдентификаторОбъекта));
	ИначеЕсли ТипОбъекта = "ЗаданиеСтроителей" Тогда
		ТипОбъекта = "Документ.МП_ЗаданиеСтроителей";
		ОбъектСсылка = Документы.МП_ЗаданиеСтроителей.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.ИдентификаторОбъекта));
//+++АК БЕЛН 20170522
	ИначеЕсли ТипОбъекта = "ЗаявкаНаРемонт" Тогда
		ТипОбъекта = "Документ.ЗаявкаНаРемонт";
		ОбъектСсылка = Документы.ЗаявкаНаРемонт.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.ИдентификаторОбъекта));
		СтруктураЗаписи.Вставить("ИмяТЧ","Файлы");
//---АК БЕЛН 20170522
	Иначе
		СтруктураОтвет.Вставить("ТекстОшибки", "Неизвестный тип объекта: " + ТипОбъекта);
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если ОбъектСсылка.ПолучитьОбъект() = Неопределено Тогда
		СтруктураОтвет.Вставить("ТекстОшибки", "Ошибка получения объекта по ссылке");
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если НЕ СтруктураЗаписи.Свойство("ИмяТЧ", ИмяТЧ) Тогда
		ИмяТЧ = "Фотографии";
	КонецЕсли;
	
	Запрос = Новый Запрос(
	  СтрЗаменить(
		  СтрЗаменить(
			"ВЫБРАТЬ
			|	Фотографии.ИмяФайла,
			|	Фотографии.ОтносительноеИмяФайла
			|ИЗ
			|	%ТипОбъекта%.%ИмяТЧ% КАК Фотографии
			|ГДЕ
			|	Фотографии.Ссылка = &Ссылка
			|	И Фотографии.ИдентификаторФотографии = &ИдентификаторФотографии",
		  "%ТипОбъекта%", ТипОбъекта),
	  "%ИмяТЧ%", ИмяТЧ));
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("ИдентификаторФотографии", СтруктураЗаписи.ИдентификаторФотографии);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураОтвет.Вставить("ТекстОшибки", "Фотография не найдена");
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли;
	
	КаталогКЗаписи = Константы.МП_КаталогХраненияФайловЗадачМП.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ПустаяСтрока(Выборка.ОтносительноеИмяФайла) Тогда
			СтруктураОтвет.Вставить("ТекстОшибки", "Имя файла не указано");
			
		Иначе
			ИмяФайла = КаталогКЗаписи + Выборка.ОтносительноеИмяФайла;
			Файл = Новый Файл(ИмяФайла);
			Если Файл.Существует() Тогда
				СтруктураОтвет.Вставить("ИмяФайла", Выборка.ИмяФайла);
				СтруктураОтвет.Вставить("Картинка", Новый ДвоичныеДанные(ИмяФайла));
			Иначе
				СтруктураОтвет.Вставить("ТекстОшибки", "Файл не найден");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	
КонецФункции
//---АК SHEP 20160609

Функция НайтиСоздатьЗаданиеНаИнвентаризацию(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ЗаданиеНаИнвентаризацию.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	
	Ссылка = Документы.ЗаданиеНаИнвентаризацию.ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
	Исключение
		Возврат Документы.ЗаданиеНаИнвентаризацию.ПустаяСсылка();
	КонецПопытки;
	
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.ЗаданиеНаИнвентаризацию.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Дата = ОбъектXDTO.Date;
		Объект.УстановитьНовыйНомер();
		Объект.СтруктурнаяЕдиница = УзелОбмена.Магазин;
		Объект.Закрыто = ОбъектXDTO.Closed;
		Объект.Записать();
		ЭтоНовый = Истина;
		
		Если НЕ ПустаяСтрока(ОбъектXDTO.TaskID) И ОбъектXDTO.CloseTask Тогда
			НЗ = РегистрыСведений.МП_ЗаданияПоЦенникам.СоздатьНаборЗаписей();
			НЗ.Отбор.ИдентификаторЗадания.Установить(ОбъектXDTO.TaskID);
			НЗ.Записать();
		КонецЕсли; 
	КонецЕсли;
	
	// Загружаем ТЧ
	ЗагружаемыеСтроки = ОбъектXDTO.Items.Item;
	
	Для каждого ТекСтрока Из ЗагружаемыеСтроки  Цикл
		Номенклатура = НайтиСоздатьНоменклатуру(УзелОбмена, ТекСтрока.Nomenclature);
		Характеристика= НайтиСоздатьХарактеристикуНоменклатуры(УзелОбмена, ТекСтрока.Characteristic);
		
		НС = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));			
		
		Если НС.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Характеристика = Характеристика;
			
			НС.Добавить(НоваяСтрока);
		КонецЕсли; 
		
		Для Каждого Строка ИЗ НС  Цикл
			Строка.Количество = ТекСтрока.Quantity;
		КонецЦикла;  
	КонецЦикла;
	
	//
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//
	Если ОбъектXDTO.DeletionMark <> Объект.ПометкаУдаления Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark);
	КонецЕсли;
	
	//	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	Исключение
	КонецПопытки;
		
	//
	Возврат Объект.Ссылка;
	
КонецФункции

Функция ПолучитьТипФайлаXML(ТипФайла)
	
	//Если ТипФайла = Перечисления.ТипыФайлов.Другое Тогда
	//	Возврат "Other";
	//ИначеЕсли ТипФайла = Перечисления.ТипыФайлов.Фото Тогда
	//	Возврат "Photo";
	//Иначе
	//	Возврат "";
	//КонецЕсли
	
КонецФункции

Функция ПолучитьТипФайла(ТипФайлаXDTO)
	
	//Если ТипФайлаXDTO = "Other" Тогда
	//	Возврат Перечисления.ТипыФайлов.Другое;
	//ИначеЕсли ТипФайлаXDTO = "Photo" Тогда
	//	Возврат Перечисления.ТипыФайлов.Фото;
	//Иначе
	//	Возврат Перечисления.ТипыФайлов.ПустаяСсылка();
	//КонецЕсли
	
КонецФункции

// Процедура записывает документ в информацилнную базу.
//
Процедура ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения)
	
	Если НужноЗаписыватьОбъект Тогда
		
		Объект.ПометкаУдаления = ОбъектXDTO.DeletionMark;
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если Не ОбъектXDTO.Posted Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления
			И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			
			Объект.ПометкаУдаления = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			
			Если Не Объект.Проведен Тогда
				Объект.Записать();
			Иначе
				// отменяем проведение документа
				Объект.Проведен = Ложь;
				Объект.Записать();
				УдалитьДвиженияУДокумента(Объект);
			КонецЕсли;
			
		Исключение
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если ДокументыДляОтложенногоПроведения.Найти(Объект.Ссылка, "ДокументСсылка") = Неопределено Тогда
				СтрокаТаблицы = ДокументыДляОтложенногоПроведения.Добавить();
				СтрокаТаблицы.ДокументСсылка = Объект.Ссылка;
				СтрокаТаблицы.ДокументТип = Объект.Метаданные().Имя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДокумент()

// Функция создает новый документ в информационной базе.
//
Функция СоздатьДокумент(ИмяДокумента, ОбъектXDTO)
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(Идентификатор);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы[ИмяДокумента].СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьДокумент()

// Функция помечает объект на удаление.
//
Функция ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	
	//Если ОбъектXDTO.Type = "CatContractors" Тогда
	//	Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	//	Возврат Неопределено;
	//ИначеЕсли ОбъектXDTO.Type = "CatItems" Тогда
	//	//Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	//	Возврат Неопределено;
	//ИначеЕсли ОбъектXDTO.Type = "DocOrders" Тогда
	//	Ссылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Идентификатор);
	//ИначеЕсли ОбъектXDTO.Type = "DocInvoice" Тогда
	//	Ссылка = Документы.РасходнаяНакладная.ПолучитьСсылку(Идентификатор);
	//ИначеЕсли ОбъектXDTO.Type = "DocPurshareInvoice" Тогда
	//	Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Идентификатор);
	//ИначеЕсли ОбъектXDTO.Type = "DocIncomingPayment" Тогда
	//	Ссылка = Документы.ПоступлениеВКассу.ПолучитьСсылку(Идентификатор);
	//ИначеЕсли ОбъектXDTO.Type = "DocOutgoingPayment" Тогда
	//	Ссылка = Документы.РасходИзКассы.ПолучитьСсылку(Идентификатор);
	//КонецЕсли;
	
	//Попытка
	//	Объект = Ссылка.ПолучитьОбъект();
	//	Объект.УстановитьПометкуУдаления(Истина);
	//	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	//Исключение
	//КонецПопытки;
	
КонецФункции // ПометитьОбъектНаУдаление()

// Процедура выполняет проведение документов.
//
Процедура ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения)

	ДокументыДляОтложенногоПроведения.Сортировать("ДокументТип");
	
	Для Каждого СтрокаТаблицы Из ДокументыДляОтложенногоПроведения Цикл
		
		Если СтрокаТаблицы.ДокументСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдалятьРегистрациюИзменений = Не ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, Объект);
		Объект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			Объект.ПроверитьЗаполнение();
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			Если УдалятьРегистрациюИзменений Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьОтложенноеПроведениеДокументов()

Процедура ЗагрузитьЖурналОбмена(УзелОбмена, ТаблицаЖурнала) Экспорт

	Если НЕ УзелОбмена.ВестиЛогОбмена Тогда
		Возврат;
	КонецЕсли;
	
	ТТ=УзелОбмена.Магазин;
	Для Каждого Строка ИЗ ТаблицаЖурнала Цикл
		МЗ = РегистрыСведений.МП_ЖурналОбмена.СоздатьМенеджерЗаписи();
	
		ЗаполнитьЗначенияСвойств(МЗ, Строка);
		МЗ.МобильныйКлиент = УзелОбмена;
        //дописываем время выполнения
		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(МЗ.Событие,"ВремяВыполнения");
		Если Массив.Количество()>1 тогда
			МЗ.Событие=СокрЛП(Массив[0]);
			Попытка
				МЗ.ВремяВыполнения=Число(СокрЛП(Массив[1]));
			Исключение
				МЗ.ВремяВыполнения=0;
			КонецПопытки;
		КонецЕсли;
		//дописываем номенклатуру
		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(МЗ.Событие,"$nom");
		Если Массив.Количество()>1 тогда
			МЗ.Событие=СокрЛП(Массив[0]);
			Попытка
				МЗ.Номенклатура=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(Массив[1])));
			Исключение
				МЗ.Номенклатура=СокрЛП(Массив[1]);
			КонецПопытки;
			Попытка
			     МЗ.ИДНоменклатура=Новый УникальныйИдентификатор(СокрЛП(Массив[1]));
			Исключение
			КонецПопытки; 
		КонецЕсли;
		//дописываем документ
		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(МЗ.Событие,"$doc");
		Если Массив.Количество()>1 тогда
			МЗ.Документ=СокрЛП(Массив[0]);
			Попытка
				МЗ.Документ=ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СокрЛП(Массив[1]));
			Исключение
				МЗ.Документ=СокрЛП(Массив[1]);
			КонецПопытки;
		КонецЕсли;
        //дописываем пользователя
		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(МЗ.Событие,"$user");
		Если Массив.Количество()>1 тогда
			МЗ.Событие=СокрЛП(Массив[0]);
			Попытка
				МЗ.Пользователь=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(Массив[1])));
			Исключение
				//МЗ.Пользователь=СокрЛП(Массив[1]);
			КонецПопытки;
		КонецЕсли;
		МЗ.Магазин=ТТ;
		МЗ.Записать();
	    //АК БЕЛН 26.09.2016++
		//Попытка
		//	Если Найти(МЗ.Событие,"Завершение. ШК")>0 и Найти(МЗ.Событие,"Вес")>0 и Найти(МЗ.Событие,"Дата производства")>0 Тогда
		//		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(МЗ.Событие,". Вес ");
		//		ПодСтрока=Массив[1];
		//		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПодСтрока,". Дата производства ");
		//		ПодСтрока=Массив[0];
		//		Вес=Число(СокрЛп(ПодСтрока));
		//		
		//		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(МЗ.Событие,". Дата производства ");
		//		ПодСтрока=Массив[1];
		//		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПодСтрока,". Коробок ");
		//		ПодСтрока=Массив[0];
		//		Если ЗначениеЗаполнено(СокрЛП(ПодСтрока)) Тогда
		//			ДатаПроизв=Дата(Число(Прав(СокрЛП(ПодСтрока),4)),Число(Сред(СокрЛП(ПодСтрока),4,2)),Число(Лев(СокрЛП(ПодСтрока),2)));
		//		КонецЕсли; 
		//		
		//		Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(МЗ.Событие,". Коробок ");
		//		ПодСтрока=Массив[1];
		//		
		//		Если Найти(ПодСтрока,". Дата работы с документом ")>0 Тогда
		//			Массив=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПодСтрока,". Дата работы с документом ");
		//			Коробок=Число(СокрЛп(Массив[0]));
		//			ПодСтрока=Массив[1];
		//			ПодСтрокаВремя=ПодСтрока;
		//			МассивВремя=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПодСтрокаВремя,":");
		//			
		//			
		//			ДатаРаботы=Дата(Число(Сред(СокрЛП(ПодСтрока),7,4)),Число(Сред(СокрЛП(ПодСтрока),4,2)),Число(Лев(СокрЛП(ПодСтрока),2)),
		//			Число(СокрЛП(Прав(МассивВремя[0],2))),Число(СокрЛП(МассивВремя[1])),Число(СокрЛП(МассивВремя[2])));
		//		Иначе	
		//			Коробок=Число(СокрЛп(ПодСтрока));
		//			ДатаРаботы=Дата(1,1,1);
		//		КонецЕсли; 
		//		
		//		Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
		//		Мен.Период=МЗ.Период;
		//		Мен.Документ=МЗ.Документ;
		//		Мен.Номенклатура=МЗ.Номенклатура;
		//		Мен.ДатаПроизводства=ДатаПроизв;
		//		Мен.Вес=Вес;
		//		Мен.Коробок=Коробок;
		//		Если ЗначениеЗаполнено(ДатаРаботы) Тогда
		//			Мен.ДатаНачалаРаботыПоДокументу=ДатаРаботы;
		//		КонецЕсли; 
		//		Мен.Записать();
		//	КонецЕсли; 	

		//Исключение
		//КонецПопытки; 
	    //\\АК БЕЛН 26.09.2016--
	КонецЦикла;  

	УзелОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбъект.ДатаПоследнегоОбмена = ТекущаяДата();

	Попытка 
		УзелОбъект.Записать();		
	Исключение
	КонецПопытки; 
КонецПроцедуры 

Функция ПроверитьВерсиюМобильногоПриложения(УзелОбмена, Версия) Экспорт

	Если УзелОбмена.ВерсияМП <> Версия Тогда
		
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		
		УзелОбъект.ВерсияМП = Версия;

		Попытка 
			УзелОбъект.Записать();		
		Исключение
		КонецПопытки; 
		
	КонецЕсли; 
	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	//					  |	МобильноеПриложение.ВерсияМП
	//					  |ИЗ
	//					  |	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	//					  |ГДЕ
	//					  |	НЕ МобильноеПриложение.Магазин.Ссылка ЕСТЬ NULL ");
	//
	//Результат = Истина;

	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Если СтроковыеФункцииКлиентСервер.СравнитьВерсии2(Выборка.ВерсияМП, Версия) > 0 Тогда
	//		Результат = Ложь;
	//		Прервать;
	//	КонецЕсли; 		
	//КонецЦикла;    
	
	//
	ВерсияАктуальна = СтроковыеФункцииКлиентСервер.СравнитьВерсии2(Константы.АктуальнаяВерсияМП.Получить(), Версия) <= 0;
	
	Если ВерсияАктуальна И Константы.АктуальнаяВерсияМП.Получить()<>Версия Тогда
		Константы.АктуальнаяВерсияМП.Установить(Версия);
	КонецЕсли; 
	
	СтруктураОтвет = Новый Структура("Результат", ВерсияАктуальна);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));		
	
КонецФункции 

Функция ОбновитьДистрибутивы(УзелОбмена, ДанныеМобильногоПриложения) Экспорт
	
	СтруктураДанных = ДанныеМобильногоПриложения.Получить();
	
	УстановленныеПриложения = СтруктураДанных.УстановленныеПриложения;
	
	Если НЕ ОбщегоНазначения.ДанныеСовпадают(УстановленныеПриложения, УзелОбмена.УстановленныеПриложения.Выгрузить(, "ИмяПриложения, Версия")) Тогда
		
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		
		УзелОбъект.УстановленныеПриложения.Загрузить(УстановленныеПриложения);

		Попытка 
			УзелОбъект.Записать();		
		Исключение
		КонецПопытки; 
		
	КонецЕсли; 
	
	Если СтруктураДанных.Свойство("НеПолучатьДистрибутивы") Тогда
		Возврат Новый ХранилищеЗначения(Неопределено);	
	КонецЕсли; 
	
	//
	ТаблицаДистрибутивов = РегистрыСведений.МП_ДистрибутивыПриложений.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ТаблицаДистрибутивов.Колонки.Добавить("Дистрибутив", Новый ОписаниеТипов("ДвоичныеДанные"));
	
	КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КонстантаКаталог, 1) <> "\" Тогда
		КонстантаКаталог = КонстантаКаталог + "\";
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МП_ДистрибутивыПриложений.ИмяПриложения,
	|	МП_ДистрибутивыПриложений.Версия,
	|	МП_ДистрибутивыПриложений.ОтносительноеИмяФайла
	|ИЗ
	|	РегистрСведений.МП_ДистрибутивыПриложений КАК МП_ДистрибутивыПриложений");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденнаяСтрока = УстановленныеПриложения.Найти(Выборка.ИмяПриложения, "ИмяПриложения");
		
		Если НайденнаяСтрока = Неопределено ИЛИ 
			(СтроковыеФункцииКлиентСервер.СравнитьВерсии(Выборка.Версия, НайденнаяСтрока.Версия)>0 И 
			СтроковыеФункцииКлиентСервер.СравнитьВерсии(Выборка.Версия, НайденнаяСтрока.ВерсияДистрибутива)>0) Тогда
			ИмяФайла = КонстантаКаталог + Выборка.ОтносительноеИмяФайла;
			Файл = Новый Файл(ИмяФайла);
			
			Если Файл.Существует() Тогда
				НоваяСтрока = ТаблицаДистрибутивов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);				
				НоваяСтрока.Дистрибутив = Новый ДвоичныеДанные(ИмяФайла);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;   
	
	Возврат Новый ХранилищеЗначения(ТаблицаДистрибутивов, Новый СжатиеДанных(9));		
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО РОЗНИЦЕ

Функция ЗаписатьОбъект(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	Если ОбменМобильноеПриложениеОбщее.ОбменЗаблокирован(УзелОбмена) Тогда
		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Объект не принят по причине блокиовки обмена");	
		
		СтруктураОтвет = Новый Структура("Результат, СообщениеОбОшибке", Ложь, "Обмен заблокирован в центральной базе!");

		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	
	КонецЕсли; 
	
	//
	ЧтениеXML = Новый ЧтениеXML;

	Если ТипЗнч(ДанныеМобильногоПриложения) = Тип("ХранилищеЗначения") Тогда
		ЧтениеXML.УстановитьСтроку(ДанныеМобильногоПриложения.Получить());
	Иначе
		ЧтениеXML.УстановитьСтроку(ДанныеМобильногоПриложения);
	КонецЕсли; 

	ЧтениеXML.ПерейтиКСодержимому();
	ЧтениеXML.Прочитать();

	ТипОбъектаXDTO = ФабрикаXDTO.Тип("MobileExchange", "Objects");
	
	Объекты = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	
	ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьОбъекты(УзелОбмена, Объекты);

	ЧтениеXML.Закрыть();

	СтруктураОтвет = Новый Структура("Результат", Истина);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	

КонецФункции 

Функция ПолучитьДанныеШтрихкода(ШтрихКод="") Экспорт
	Если  ПустаяСтрока(ШтрихКод) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтриховыеКоды.Номенклатура,
			|	ШтриховыеКоды.ЕдиницаИзмерения,
			|	ШтриховыеКоды.Характеристика,
			|	ШтриховыеКоды.ШтрихКод,
			|	ШтриховыеКоды.ЛожныйШтрихКод,
			|	ШтриховыеКоды.ВыведенИзМагазинов
			|ИЗ
			|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
			|ГДЕ
			|	ШтриховыеКоды.Номенклатура.ПометкаУдаления = ЛОЖЬ
			|	И ШтриховыеКоды.Характеристика.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НаборЗаписейШК = РезультатЗапроса.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НумераторШтрихКодовКоробок.Номенклатура,
			|	НумераторШтрихКодовКоробок.Характеристика,
			|	НумераторШтрихКодовКоробок.Нумератор
			|ИЗ
			|	РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
			|ГДЕ
			|	НумераторШтрихКодовКоробок.Номенклатура.ПометкаУдаления = ЛОЖЬ
			|	И НумераторШтрихКодовКоробок.Характеристика.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НаборЗаписейНумератор = РезультатЗапроса.Выгрузить();
		
	КонецЕсли; 
	
	
	//---АК BELN 2018.02.12 

	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		НаборЗаписейШК = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
		НаборЗаписейНумератор = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);

		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
			СтруктураОтвет = Новый Структура("Результат", Ложь);

			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	
		КонецЕсли;
		
		//
		НаборЗаписейШК.Отбор.Номенклатура.Установить(СтруктураДанных.Номенклатура);
		НаборЗаписейШК.Отбор.Характеристика.Установить(СтруктураДанных.Характеристика);

		//
		НаборЗаписейНумератор.Отбор.Номенклатура.Установить(СтруктураДанных.Номенклатура);
		НаборЗаписейНумератор.Отбор.Характеристика.Установить(СтруктураДанных.Характеристика);
		
		НаборЗаписейШК.Прочитать();
		НаборЗаписейНумератор.Прочитать();

		
	КонецЕсли; 
	//
	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
		
	ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		ЗаписатьДанные(ВозвращаемыйСписок,  СтруктураДанных.Номенклатура);
		ЗаписатьДанные(ВозвращаемыйСписок, СтруктураДанных.Характеристика);
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписейШК Цикл
		НЗ = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		ЗаписатьДанные(ВозвращаемыйСписок, НЗ);
	КонецЦикла;  
	
	Для Каждого Запись Из НаборЗаписейНумератор Цикл
		НЗ = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		ЗаписатьДанные(ВозвращаемыйСписок, НЗ);
	КонецЦикла;  
		
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	СтруктураОтвет = Новый Структура("Результат, Данные", Истина, ЗаписьXML.Закрыть());

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	

КонецФункции 

//+++АК BELN 2018.05.23 ИП-00018765 
Функция ПолучитьКэшНоменклатуры()
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Ссылка,
			|	ХарактеристикиНоменклатуры.Наименование,
			|	ХарактеристикиНоменклатуры.ПометкаУдаления,
			|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
			|	ХарактеристикиНоменклатуры.Владелец.ЭтоГруппа,
			|	ХарактеристикиНоменклатуры.Владелец.ПометкаУдаления,
			|	ХарактеристикиНоменклатуры.Владелец.Наименование,
			|	ХарактеристикиНоменклатуры.Владелец.Весовой,
			|	ХарактеристикиНоменклатуры.Владелец.Складируемая,
			|	ХарактеристикиНоменклатуры.Владелец.БезУпаковки,
			|	ХарактеристикиНоменклатуры.Владелец.ТорговаяМарка,
			|	ХарактеристикиНоменклатуры.Владелец.ЕдиницаХраненияОстатков,
			|	ХарактеристикиНоменклатуры.Владелец.Родитель,
			|	ХарактеристикиНоменклатуры.СрокГодности,
			|	ХарактеристикиНоменклатуры.ТипСрокаГодности,
			|	ХарактеристикиНоменклатуры.ПредельноеКоличествоДнейСрокаГодности,
			|	ХарактеристикиНоменклатуры.Неактивная
			|ПОМЕСТИТЬ вт
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
			|	И (ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
			|			ИЛИ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Новая))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
			|	ХарактеристикиНоменклатуры.Наименование,
			|	ХарактеристикиНоменклатуры.ПометкаУдаления,
			|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
			|	ХарактеристикиНоменклатуры.ВладелецЭтоГруппа,
			|	ХарактеристикиНоменклатуры.ВладелецПометкаУдаления,
			|	ХарактеристикиНоменклатуры.ВладелецНаименование,
			|	ХарактеристикиНоменклатуры.ВладелецВесовой,
			|	ХарактеристикиНоменклатуры.ВладелецСкладируемая,
			|	ХарактеристикиНоменклатуры.ВладелецБезУпаковки,
			|	ХарактеристикиНоменклатуры.ВладелецТорговаяМарка,
			|	ХарактеристикиНоменклатуры.ВладелецЕдиницаХраненияОстатков,
			|	ХарактеристикиНоменклатуры.ВладелецРодитель,
			|	ХарактеристикиНоменклатуры.СрокГодности,
			|	ХарактеристикиНоменклатуры.ТипСрокаГодности,
			|	ХарактеристикиНоменклатуры.ПредельноеКоличествоДнейСрокаГодности,
			|	ХарактеристикиНоменклатуры.Неактивная,
			|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК Вес
			|ИЗ
			|	вт КАК ХарактеристикиНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
			|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	NULL,
			|	NULL,
			|	NULL,
			|	Номенклатура.Ссылка,
			|	Номенклатура.ЭтоГруппа,
			|	Номенклатура.ПометкаУдаления,
			|	Номенклатура.Наименование,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	Номенклатура.Родитель,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЭтоГруппа = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		КэшНом = РезультатЗапроса.Выгрузить();
		КэшНом.Индексы.Добавить("Номенклатура");
		КэшНом.Индексы.Добавить("Характеристика");
	    Возврат КэшНом;

КонецФункции // ()
//---АК BELN 2018.05.23 
//+++АК BELN 2018.04.18 
Функция ПолучитьДанныеШтрихкодаОптимиз(ДанныеМобильногоПриложения) Экспорт
	Если ДанныеМобильногоПриложения.Свойство("Штрихкод") Тогда
		ШтрихКод=ДанныеМобильногоПриложения.ШтрихКод;
	Иначе
		ШтрихКод="";
	
	КонецЕсли; 
	КэшНом=Неопределено;
	Если  ПустаяСтрока(ШтрихКод) Тогда
		КэшНом=ПолучитьКэшНоменклатуры();	

		
		МассивБукв=ДанныеМобильногоПриложения.МассивБукв;
		Кроме=ДанныеМобильногоПриложения.Свойство("Кроме");
		
		СтрОтб="Ложь ";
		СтрОтб1="Ложь ";
		Для каждого Эл Из МассивБукв Цикл
			СтрОтб=СтрОтб+" ИЛИ ШтриховыеКоды.Номенклатура.Наименование ПОДОБНО """+Эл+"""";
			СтрОтб1=СтрОтб1+" ИЛИ НумераторШтрихКодовКоробок.Номенклатура.Наименование ПОДОБНО """+Эл+"""";
		
		КонецЦикла;
		СтрОтб="("+СтрОтб+")";
		СтрОтб1="("+СтрОтб1+")";
		
		Если Кроме Тогда
			СтрОтб="НЕ "+СтрОтб;
			СтрОтб1="НЕ "+СтрОтб1;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтриховыеКоды.Номенклатура,
			|	ШтриховыеКоды.ЕдиницаИзмерения,
			|	ШтриховыеКоды.Характеристика,
			|	ШтриховыеКоды.ШтрихКод,
			|	ШтриховыеКоды.ЛожныйШтрихКод,
			|	ШтриховыеКоды.ВыведенИзМагазинов
			|ИЗ
			|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
			|ГДЕ
			|	ШтриховыеКоды.Номенклатура.ПометкаУдаления = ЛОЖЬ
			|	И ШтриховыеКоды.Характеристика.ПометкаУдаления = ЛОЖЬ
			|	И "+СтрОтб;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НаборЗаписейШК = РезультатЗапроса.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НумераторШтрихКодовКоробок.Номенклатура,
			|	НумераторШтрихКодовКоробок.Характеристика,
			|	НумераторШтрихКодовКоробок.Нумератор
			|ИЗ
			|	РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
			|ГДЕ
			|	НумераторШтрихКодовКоробок.Номенклатура.ПометкаУдаления = ЛОЖЬ
			|	И НумераторШтрихКодовКоробок.Характеристика.ПометкаУдаления = ЛОЖЬ
			|	И "+СтрОтб1;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НаборЗаписейНумератор = РезультатЗапроса.Выгрузить();
		
	КонецЕсли; 
	
	
	//---АК BELN 2018.02.12 

	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		НаборЗаписейШК = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
		НаборЗаписейНумератор = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);

		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
			СтруктураОтвет = Новый Структура("Результат", Ложь);

			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	
		КонецЕсли;
		
		//
		НаборЗаписейШК.Отбор.Номенклатура.Установить(СтруктураДанных.Номенклатура);
		НаборЗаписейШК.Отбор.Характеристика.Установить(СтруктураДанных.Характеристика);

		//
		НаборЗаписейНумератор.Отбор.Номенклатура.Установить(СтруктураДанных.Номенклатура);
		НаборЗаписейНумератор.Отбор.Характеристика.Установить(СтруктураДанных.Характеристика);
		
		НаборЗаписейШК.Прочитать();
		НаборЗаписейНумератор.Прочитать();

		
	КонецЕсли; 
	//
	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
		
	ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		ЗаписатьДанные(ВозвращаемыйСписок,  СтруктураДанных.Номенклатура);
		ЗаписатьДанные(ВозвращаемыйСписок, СтруктураДанных.Характеристика);
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписейШК Цикл
		НЗ = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		ЗаписатьДанные(ВозвращаемыйСписок, НЗ,,КэшНом);
	КонецЦикла;  
	
	Для Каждого Запись Из НаборЗаписейНумератор Цикл
		НЗ = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		ЗаписатьДанные(ВозвращаемыйСписок, НЗ,,КэшНом);
	КонецЦикла;  
		
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	СтруктураОтвет = Новый Структура("Результат, Данные", Истина, ЗаписьXML.Закрыть());

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 
//---АК BELN 2018.04.18 

//+++АК BELN 2018.04.18 
Функция ПолучитьДанныеШтрихкодаПорциями(ШтрихКод="") Экспорт
	//+++АК BELN 2018.02.12 ИП-00017878
	
	Если  ПустаяСтрока(ШтрихКод) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтриховыеКоды.Номенклатура,
			|	ШтриховыеКоды.ЕдиницаИзмерения,
			|	ШтриховыеКоды.Характеристика,
			|	ШтриховыеКоды.ШтрихКод,
			|	ШтриховыеКоды.ЛожныйШтрихКод,
			|	ШтриховыеКоды.ВыведенИзМагазинов
			|ИЗ
			|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
			|ГДЕ
			|	ШтриховыеКоды.Номенклатура.ПометкаУдаления = ЛОЖЬ
			|	И ШтриховыеКоды.Характеристика.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НаборЗаписейШК = РезультатЗапроса.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НумераторШтрихКодовКоробок.Номенклатура,
			|	НумераторШтрихКодовКоробок.Характеристика,
			|	НумераторШтрихКодовКоробок.Нумератор
			|ИЗ
			|	РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
			|ГДЕ
			|	НумераторШтрихКодовКоробок.Номенклатура.ПометкаУдаления = ЛОЖЬ
			|	И НумераторШтрихКодовКоробок.Характеристика.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НаборЗаписейНумератор = РезультатЗапроса.Выгрузить();
		
	КонецЕсли; 
	
	
	//---АК BELN 2018.02.12 

	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		НаборЗаписейШК = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
		НаборЗаписейНумератор = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);

		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
			СтруктураОтвет = Новый Структура("Результат", Ложь);

			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	
		КонецЕсли;
		
		//
		НаборЗаписейШК.Отбор.Номенклатура.Установить(СтруктураДанных.Номенклатура);
		НаборЗаписейШК.Отбор.Характеристика.Установить(СтруктураДанных.Характеристика);

		//
		НаборЗаписейНумератор.Отбор.Номенклатура.Установить(СтруктураДанных.Номенклатура);
		НаборЗаписейНумератор.Отбор.Характеристика.Установить(СтруктураДанных.Характеристика);
		
		НаборЗаписейШК.Прочитать();
		НаборЗаписейНумератор.Прочитать();

		
	КонецЕсли; 
	//
	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
		
	ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		ЗаписатьДанные(ВозвращаемыйСписок,  СтруктураДанных.Номенклатура);
		ЗаписатьДанные(ВозвращаемыйСписок, СтруктураДанных.Характеристика);
	КонецЕсли;
	
	Кол=НаборЗаписейШК.Количество();
	Сч=0;
	Ит=1;
	СтруктураОтвет = Новый Структура;
	
	Для каждого Запись Из НаборЗаписейШК Цикл
		Сч=Сч+1;
		НЗ = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		ЗаписатьДанные(ВозвращаемыйСписок, НЗ);
		Если Сч=1000 Тогда
			Сч=0;
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			СтруктураОтвет.Вставить("НаборЗаписейШК"+Строка(Ит),ЗаписьXML.Закрыть());
			ЗаписьXML = Новый ЗаписьXML;

			ЗаписьXML.УстановитьСтроку("UTF-8");
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
			
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
				
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			
			Ит=Ит+1;
		КонецЕсли; 

	КонецЦикла; 
	
	Если Сч>0 Тогда
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		СтруктураОтвет.Вставить("НаборЗаписейШК"+Строка(Ит),ЗаписьXML.Закрыть());
	КонецЕсли;
	/////////////////////////////////////////////
	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
		
	ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
	
	
	Сч=0;
	Ит=1;
	
	Для каждого Запись Из НаборЗаписейНумератор Цикл
		Сч=Сч+1;
		НЗ = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		ЗаписатьДанные(ВозвращаемыйСписок, НЗ);
		Если Сч=1000 Тогда
			Сч=0;
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			СтруктураОтвет.Вставить("НаборЗаписейНумератор"+Строка(Ит),ЗаписьXML.Закрыть());
			ЗаписьXML = Новый ЗаписьXML;

			ЗаписьXML.УстановитьСтроку("UTF-8");
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
			
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
				
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			
			Ит=Ит+1;
		КонецЕсли; 

	КонецЦикла; 
	
	Если Сч>0 Тогда
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		СтруктураОтвет.Вставить("НаборЗаписейНумератор"+Строка(Ит),ЗаписьXML.Закрыть());
	КонецЕсли;
	
	СтруктураОтвет.Вставить("Результат",Истина);
	
	
	
	
	
	//Для Каждого Запись Из НаборЗаписейШК Цикл
	//	НЗ = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
	//	НоваяЗапись = НЗ.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
	//	ЗаписатьДанные(ВозвращаемыйСписок, НЗ);
	//КонецЦикла;  
	//
	//Для Каждого Запись Из НаборЗаписейНумератор Цикл
	//	НЗ = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
	//	НоваяЗапись = НЗ.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
	//	ЗаписатьДанные(ВозвращаемыйСписок, НЗ);
	//КонецЦикла;  
	//	
	//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	//
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//
	//СтруктураОтвет = Новый Структура("Результат, Данные", Истина, ЗаписьXML.Закрыть());

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	

КонецФункции 
//---АК BELN 2018.04.18 

Функция ПолучитьДанныеПоТовару(ДанныеМобильногоПриложения) Экспорт

	СтруктураДанных = ДанныеМобильногоПриложения.Получить();

	СтруктураОтвет = Новый Структура();
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.Характеристика) Тогда
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НоменклатураЭтикетки.ИмяФайла
	|ИЗ
	|	Справочник.Номенклатура.Этикетки КАК НоменклатураЭтикетки
	|ГДЕ
	|	НоменклатураЭтикетки.Характеристика = &Характеристика
	|	И НоменклатураЭтикетки.Ссылка = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Номенклатура)));
	Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Характеристика)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Попытка 
			ДвоичныеДанныеЭтикетка =  Новый ДвоичныеДанные(Выборка.ИмяФайла);			
			СтруктураОтвет.Вставить("Этикетка", ДвоичныеДанныеЭтикетка);
		Исключение
		КонецПопытки; 

	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	

КонецФункции 

Функция ПолучитьОперациюТехнолога(ДанныеМобильногоПриложения) Экспорт

	СтруктураДанных = ДанныеМобильногоПриложения.Получить();

	СтруктураОтвет = Новый Структура();
	
	Номенклатура =  Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Номенклатура));
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Характеристика));
	Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтруктураДанных.КодСклада);                   
	ВидПроверяемойОперации = ПолучитьЗначениеПеречисления("ВидыОперацийПроверяемыхТехнологом", СтруктураДанных.ВидОперации);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МП_ОтчетТехнолога.Ссылка
	                      |ИЗ
	                      |	Документ.МП_ОтчетТехнолога КАК МП_ОтчетТехнолога
	                      |ГДЕ
	                      |	НАЧАЛОПЕРИОДА(МП_ОтчетТехнолога.Дата, ДЕНЬ) = &Дата
	                      |	И НЕ МП_ОтчетТехнолога.ПометкаУдаления
	                      |	И МП_ОтчетТехнолога.ВидПроверяемойОперации = &ВидПроверяемойОперации
	                      |	И МП_ОтчетТехнолога.Склад = &Склад
	                      |	И МП_ОтчетТехнолога.Номенклатура = &Номенклатура
	                      |	И МП_ОтчетТехнолога.ХарактеристикаНоменклатуры = &Характеристика");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ВидПроверяемойОперации", ВидПроверяемойОперации);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));                                                                                 	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураОтвет.Вставить("Технолог", Выборка.Ссылка.Технолог.Наименование);
		СтруктураОтвет.Вставить("Результат", ПолучитьИмяЗначенияПеречисления(Выборка.Ссылка.Результат));
		СтруктураОтвет.Вставить("Комментарий", Выборка.Ссылка.Комментарий);
		
		КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());

		Если Прав(КаталогФотографий, 1) <> "\" Тогда
			КаталогФотографий = КаталогФотографий + "\";
		КонецЕсли;

		Параметры = Новый Массив;
		
		Для Каждого Строка Из Выборка.Ссылка.ПараметрыЗадачи Цикл
			СтруктураПараметр = Новый Структура;
			
			СтруктураПараметр.Вставить("Параметр", Строка(Строка.Параметр.УникальныйИдентификатор()));
			СтруктураПараметр.Вставить("Результат", ПолучитьИмяЗначенияПеречисления(Строка.Результат));
			СтруктураПараметр.Вставить("Комментарий", Строка.Комментарий);
			
			Фотографии = Новый Массив;
			СтрокиФото = Выборка.Ссылка.Фотографии.НайтиСтроки(Новый Структура("Параметр", Строка.Параметр));
			
			Для Каждого СтрокаФото Из СтрокиФото Цикл
				Попытка 
					ДвоичныеДанныеФото =  Новый ДвоичныеДанные(КаталогФотографий + СтрокаФото.ОтносительноеИмяФайла);			
					Фотографии.Добавить(ДвоичныеДанныеФото);
				Исключение
				КонецПопытки; 
			КонецЦикла;  
			
			СтруктураПараметр.Вставить("Фотографии", Фотографии);
			
			Параметры.Добавить(СтруктураПараметр);
		КонецЦикла;  
		
		СтруктураОтвет.Вставить("Параметры", Параметры);
		
	Иначе
		Возврат Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));	
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	

КонецФункции 

Функция ЗаписатьФотографиюЦенника(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	ОписаниеОшибки = "";
	
	БезФотографии = СтруктураЗаписи.Свойство("БезФотографии") И СтруктураЗаписи.БезФотографии = Истина;
	
	Если НЕ БезФотографии Тогда
		
		Фотография = Новый Картинка(СтруктураЗаписи.ДвоичныеДанныеКартинки);
		Расширение = "jpg";

		КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(КонстантаКаталог, 1) <> "\" Тогда
			КонстантаКаталог = КонстантаКаталог + "\";
		КонецЕсли;	
		
		ПодКаталог = "Ценники\" + Формат(ТекущаяДата(), "ДФ=yyyyMM");
		
		СоздатьКаталог(КонстантаКаталог + ПодКаталог);
		
		ОтносительноеИмяФайла = ПодКаталог + "\" + СтруктураЗаписи.ИдентификаторФотографии + "." + Расширение;
		
		Фотография.Записать(КонстантаКаталог + ОтносительноеИмяФайла);
		
		//
		КонстантаКаталогФайнРидер = Константы.КаталогФайнРидер.Получить();
		
		Если НЕ ПустаяСтрока(КонстантаКаталогФайнРидер) Тогда
			Если Прав(КонстантаКаталогФайнРидер, 1) <> "\" Тогда
				КонстантаКаталогФайнРидер = КонстантаКаталогФайнРидер + "_PreScale\";
			КонецЕсли;	

			Попытка 
				КопироватьФайл(КонстантаКаталог + ОтносительноеИмяФайла,  КонстантаКаталогФайнРидер + СтруктураЗаписи.ИдентификаторФотографии + "." + Расширение);
			Исключение
			КонецПопытки; 
		КонецЕсли; 
		
		
		//
		ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("ТипЗаписи, ОтносительноеИмяФайла, Расширение, Объект, УинЗаписи, СтруктурнаяЕдиница"
							, Перечисления.ТипыЗаписейПриложенныхКартинок.Ценник, ОтносительноеИмяФайла, Расширение, СтруктураЗаписи.ИдентификаторОперации, СтруктураЗаписи.ИдентификаторФотографии, УзелОбмена.Магазин));
		
	КонецЕсли; 
	
	//
	НомерМагазина = УзелОбмена.Магазин.НомерТочки;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "INSERT INTO [SMS_Repl].[dbo].[Photo_move]
	|	(ShopNo, date_add, date_photo, id_photo, type_photo, without_photo)
	|VALUES (" + ВнешниеДанные.ФорматПоля(НомерМагазина) + ", GETDATE(), " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.Дата) + ", " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторФотографии) + ",  " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ТипФотографии) +  ",  " + ВнешниеДанные.ФорматПоля(БезФотографии) +  "
	|)"	;
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапроса);
	Исключение
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(СтруктураЗаписи.ИдентификаторЗадания) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	МП_ЗаданияПоЦенникам.Номенклатура.id_tov КАК id_tov
		|ИЗ
		|	РегистрСведений.МП_ЗаданияПоЦенникам КАК МП_ЗаданияПоЦенникам
		|ГДЕ
		|	МП_ЗаданияПоЦенникам.ИдентификаторЗадания = &ИдентификаторЗадания");
		
		Запрос.УстановитьПараметр("ИдентификаторЗадания", СтруктураЗаписи.ИдентификаторЗадания);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекстЗапроса = "UPDATE  SMS_Repl.dbo.Photo_move 
			|SET id_tov = " + ВнешниеДанные.ФорматПоля(Выборка.id_tov)  + "		
			|WHERE id_photo = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторФотографии);
			
			Попытка	
				ADOСоединение.Execute(ТекстЗапроса);
			Исключение
			КонецПопытки;
		КонецЕсли;     
		
		НЗ = РегистрыСведений.МП_ЗаданияПоЦенникам.СоздатьНаборЗаписей();
		НЗ.Отбор.ИдентификаторЗадания.Установить(СтруктураЗаписи.ИдентификаторЗадания);
		НЗ.Записать();
	КонецЕсли; 
	
	Возврат Новый ХранилищеЗначения(Неопределено);

КонецФункции 

Процедура РаспознатьЦенникXLS(ИмяФайла, Идентификатор) 
	
	// Загружаем распознанные фрагменты текста из XLS	
	Фрагменты = Новый Массив;
	
	//СтрокаСоединения ="Provider=Microsoft.Jet.OLEDB.4.0;Data Source= " + СокрЛП(ИмяФайла) +" ;Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;"""; 	
	СтрокаСоединения ="Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ИмяФайла) +" ;Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;"""; 
	
    Connection = Новый COMОбъект("ADODB.Connection");
    Connection.ConnectionString =  СтрокаСоединения;

    Попытка
        Connection.Open();
	Исключение
		Возврат;
	КонецПопытки;
	
	ADOXCatalog = Новый COMОбъект ("ADOX.Catalog");
	ADOXCatalog.ActiveConnection = Connection;
	
	МассивЛистов = ADOXCatalog.Tables;
	СписокЛистов = Новый СписокЗначений;

	Для Каждого ЛистМассива ИЗ МассивЛистов Цикл
	    ИмяЛиста = ЛистМассива.Name;
		
	    Если ИмяЛиста = "Excel_BuiltIn_Database" Тогда // Исключаем лист "по-умолчанию".
	        Продолжить;
		КонецЕсли;
		
	    СписокЛистов.Вставить(0, Лев(ИмяЛиста, СтрДлина(ИмяЛиста)-1));
	КонецЦикла;	

	Если СписокЛистов.Количество() = 0 Тогда
		Connection.Close();	
		Возврат;
	КонецЕсли; 
	
    RS = Новый COMОбъект("ADODB.Recordset");

    ТекстЗапроса =
    "SELECT
    |    Лист.*
    |FROM
    |    [" + СписокЛистов[0] + "$] as Лист";

    Попытка
        RS.Open(ТекстЗапроса, Connection);
	Исключение
		Возврат;
	КонецПопытки;
	
	//
	Пока RS.EOF() = 0 Цикл
		Для Счетчик = 1 По RS.Fields.Count Цикл
			Поле = RS.Fields.Item(Счетчик - 1);
			
			ЗначениеПоля = СокрЛП(Поле.Value);
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				Фрагменты.Добавить(ЗначениеПоля);
			КонецЕсли; 
	    КонецЦикла;		
		
		RS.MoveNext();		
	КонецЦикла;		
		
	//
    RS.Close();
	Connection.Close();
	
	// Анализируем содержание распознанных фрагментов
	Цена = 0;
	
	Товар = Неопределено;
	
	ФрагментыСтрокой = "";
	
	ФрагментыДляПоискаТовара = Новый Массив;
	
	Для Каждого Фрагмент Из Фрагменты Цикл
		
		ФрагментыСтрокой = ФрагментыСтрокой + ?(ПустаяСтрока(ФрагментыСтрокой), "", "&&") + Фрагмент;
		
		//
		ЭтоНеЧисло = Ложь;
		
		//Цена
		Попытка 
			ЗначениеЧислом = Число(СтрЗаменить(НРег(Фрагмент), "руб", ""));	
			
			Если Цена = 0 Тогда
				Цена = ЗначениеЧислом;
			КонецЕсли; 
			
		Исключение
			ЭтоНеЧисло = Истина;
		КонецПопытки;
					
		// Товар
		Если ЭтоНеЧисло И Товар = Неопределено Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование ПОДОБНО &Наименование");
			
			Запрос.УстановитьПараметр("Наименование", Фрагмент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Товар = Выборка.Ссылка;
			Иначе
				Запрос.УстановитьПараметр("Наименование", "%" + Фрагмент +"%");
				
				Если НЕ Запрос.Выполнить().Пустой() Тогда
					ФрагментыДляПоискаТовара.Добавить(Фрагмент);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// Запишем распознанный текст
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "UPDATE  SMS_Repl.dbo.Photo_move 
			|SET recognized_text = " + ВнешниеДанные.ФорматПоля(ФрагментыСтрокой)  + "		
			|WHERE id_photo = " + ВнешниеДанные.ФорматПоля(Идентификатор);
			
	Попытка 
		ADOСоединение.Execute(СтрокаЗапроса);	
	Исключение
	КонецПопытки; 				
	
	// Если товар не нашли собираем сочетания по два фрагмента
	Если Товар = Неопределено Тогда
		
		Для Каждого Фрагмент1 Из ФрагментыДляПоискаТовара Цикл
			
			Для Каждого Фрагмент2 Из ФрагментыДляПоискаТовара Цикл
				Если Фрагмент1 = Фрагмент2 Тогда
					Продолжить;
				КонецЕсли; 
				
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Наименование ПОДОБНО &Наименование");
				
				Запрос.УстановитьПараметр("Наименование", Фрагмент1 + " " + Фрагмент2);
			
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Товар = Выборка.Ссылка;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;  
			
			Если Товар<>Неопределено Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;  
		
	КонецЕсли; 
	
	// Запишем результат анализа
	Если Товар <> Неопределено Тогда
		СтрокаЗапроса = "UPDATE  SMS_Repl.dbo.Photo_move 
			|SET id_tov = " + ВнешниеДанные.ФорматПоля(Товар.id_tov);
		
		Если Цена>0 Тогда
			СтрокаЗапроса = СтрокаЗапроса  + "
			|	, Price = " + ВнешниеДанные.ФорматПоля(Цена);
		КонецЕсли; 
		
		СтрокаЗапроса = СтрокаЗапроса  + "
			|WHERE id_photo = " + ВнешниеДанные.ФорматПоля(Идентификатор) + "
			|";
			
		Попытка 
			ADOСоединение.Execute(СтрокаЗапроса);	
		Исключение
		КонецПопытки; 				
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура РаспознатьЦенникTXT(ИмяФайла, Идентификатор) 
	
	РаспознанныйТекст = "";
	
	Текст = Новый ТекстовыйДокумент;
	
	Текст.Прочитать(ИмяФайла);
	
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		РаспознанныйТекст  = РаспознанныйТекст + ?(ПустаяСтрока(РаспознанныйТекст), "", "&&") + Текст.ПолучитьСтроку(Сч);
	КонецЦикла;
	
	РаспознанныйТекст = СтрЗаменить(РаспознанныйТекст, """", "");
	РаспознанныйТекст = СтрЗаменить(РаспознанныйТекст, "'", "");
	
	// Запишем распознанный текст
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "UPDATE  SMS_Repl.dbo.Photo_move 
			|SET recognized_text = CASE WHEN ISNULL(times_rotated, 0) = 0 and ISNULL(inverted, 0) = 0 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text END, 		
			|	recognized_text_rotated1 = CASE WHEN ISNULL(times_rotated, 0) = 1 and ISNULL(inverted, 0) = 0 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text_rotated1 END, 		
			|	recognized_text_rotated2 = CASE WHEN ISNULL(times_rotated, 0) = 2 and ISNULL(inverted, 0) = 0 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text_rotated2 END, 		
			|	recognized_text_rotated3 = CASE WHEN ISNULL(times_rotated, 0) = 3 and ISNULL(inverted, 0) = 0 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text_rotated3 END,
			|	recognized_text_invert = CASE WHEN ISNULL(times_rotated_inverted, 0) = 0 and ISNULL(inverted, 0) = 1 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text_invert END,
			|	recognized_text_invert_rotated1 = CASE WHEN ISNULL(times_rotated_inverted, 0) = 1 and ISNULL(inverted, 0) = 1 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text_invert_rotated1 END,
			|	recognized_text_invert_rotated2 = CASE WHEN ISNULL(times_rotated_inverted, 0) = 2 and ISNULL(inverted, 0) = 1 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text_invert_rotated2 END,
			|	recognized_text_invert_rotated3 = CASE WHEN ISNULL(times_rotated_inverted, 0) = 3 and ISNULL(inverted, 0) = 1 THEN " + ВнешниеДанные.ФорматПоля(РаспознанныйТекст)  + " ELSE recognized_text_invert_rotated3 END
			|WHERE id_photo = " + ВнешниеДанные.ФорматПоля(Идентификатор);
			
	Попытка 
		ADOСоединение.Execute(СтрокаЗапроса);	
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки; 				
	
	
КонецПроцедуры

Процедура РаспознатьЦенники() Экспорт
	
	КонстантаКаталог = Константы.КаталогФайнРидер.Получить();
	
	Если ПустаяСтрока(КонстантаКаталог) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Прав(КонстантаКаталог, 1) <> "\" Тогда
		КонстантаКаталог = КонстантаКаталог + "\";
	КонецЕсли;	
	
	КаталогРезультат = КонстантаКаталог + "finish\";
	//КаталогСканов = КонстантаКаталог + "SCAN_OK\";
	
	Файлы = НайтиФайлы(КаталогРезультат, "*.txt");
	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого Файл Из Файлы Цикл
		МассивИдентификаторов.Добавить(Файл.ИмяБезРасширения);
	КонецЦикла;  
	
	Запрос = Новый Запрос("ВЫБРАТЬ 
	                      |	ПрикрепленныеФотоКОбъектам.УинЗаписи КАК Идентификатор
	                      |ИЗ
	                      |	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
	                      |ГДЕ
	                      |	ПрикрепленныеФотоКОбъектам.УинЗаписи В(&МассивИдентификаторов)
	                      |	И ПрикрепленныеФотоКОбъектам.УинЗаписи <> """"");
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИмяФайла = КаталогРезультат + Выборка.Идентификатор  + ".txt";
		РаспознатьЦенникTXT(ИмяФайла, Выборка.Идентификатор); 
		
		Попытка 
			УдалитьФайлы(ИмяФайла);				
		Исключение
		КонецПопытки; 
		
		//Попытка 
		//	УдалитьФайлы(КаталогСканов + Выборка.Идентификатор + ".jpg");
		//Исключение
		//КонецПопытки; 
		
	КонецЦикла;
	
	КонстантаКаталог = Константы.КаталогФайнРидер_Инвертированные.Получить();
	
	Если НЕ ПустаяСтрока(КонстантаКаталог) Тогда
		Если Прав(КонстантаКаталог, 1) <> "\" Тогда
			КонстантаКаталог = КонстантаКаталог + "\";
		КонецЕсли;	
		
		КаталогРезультат = КонстантаКаталог + "finish\";
		//КаталогСканов = КонстантаКаталог + "SCAN_OK\";
		
		Файлы = НайтиФайлы(КаталогРезультат, "*.txt");
		
		МассивИдентификаторов = Новый Массив;
		
		Для Каждого Файл Из Файлы Цикл
			МассивИдентификаторов.Добавить(Файл.ИмяБезРасширения);
		КонецЦикла;  
		
		Запрос = Новый Запрос("ВЫБРАТЬ 
							|	ПрикрепленныеФотоКОбъектам.УинЗаписи КАК Идентификатор
							|ИЗ
							|	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
							|ГДЕ
							|	ПрикрепленныеФотоКОбъектам.УинЗаписи В(&МассивИдентификаторов)
							|	И ПрикрепленныеФотоКОбъектам.УинЗаписи <> """"");
		
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИмяФайла = КаталогРезультат + Выборка.Идентификатор  + ".txt";
			РаспознатьЦенникTXT(ИмяФайла, Выборка.Идентификатор); 
			
			Попытка 
				УдалитьФайлы(ИмяФайла);				
			Исключение
			КонецПопытки; 
			
			//Попытка 
			//	УдалитьФайлы(КаталогСканов + Выборка.Идентификатор + ".jpg");
			//Исключение
			//КонецПопытки; 
			
		КонецЦикла;
	КонецЕсли; 
	
	// Рассылка запросов на повтор
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "Select  id_photo, ShopNo from SMS_Repl.dbo.Photo_move (nolock)
			|WHERE not_recognized = 1 and isnull(repeat_requested,0) = 0 and isnull(times_rotated,0) >= 3 and isnull(inverted, 0) = 1 and isnull(times_rotated_inverted, 0) >= 3 and ISNULL(without_photo,0)<>1";
			
	Попытка
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			ИдентификаторФото = СокрЛП(rs.Fields("id_photo").Value);
			
			НовоеСообщение = Документы.СообщениеМОС.СоздатьДокумент();
	
			НовоеСообщение.Дата = ТекущаяДата(); 
			НовоеСообщение.ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.НераспознанныйЦенник;
			НовоеСообщение.КодНаправления = 0;
			НовоеСообщение.Тема = "Ценник не распознан";
			НовоеСообщение.ТекстСообщения = "Объект не распознан. Необходимо сделать новую фотографию";
			
			СтрокаПолучателя = НовоеСообщение.СтруктурныеЕдиницы.Добавить();
			СтрокаПолучателя.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", rs.Fields("ShopNo").Value);
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла,
			                      |	ПрикрепленныеФотоКОбъектам.Расширение
			                      |ИЗ
			                      |	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
			                      |ГДЕ
			                      |	ПрикрепленныеФотоКОбъектам.УинЗаписи = &УинЗаписи");
			
			Запрос.УстановитьПараметр("УинЗаписи", ИдентификаторФото);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				СтрокаКартинки = НовоеСообщение.Картинки.Добавить();
				СтрокаКартинки.КраткоеИмяФайла = "Ценник";
				СтрокаКартинки.ИД = МеханизмОбменаСообщениями.ПолучитьНовыйУИДКартинки() + СтрокаКартинки.НомерСтроки;
				СтрокаКартинки.Расширение = Выборка.Расширение;
				СтрокаКартинки.ВнесеныИзменения = Истина;
				СтрокаКартинки.КлючСтроки = Строка(Новый УникальныйИдентификатор);
				
				КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
				Если Прав(КонстантаКаталог, 1) <> "\" Тогда
					КонстантаКаталог = КонстантаКаталог + "\";
				КонецЕсли;	

				ИмяФайла = КонстантаКаталог + Выборка.ОтносительноеИмяФайла;
				СтрокаКартинки.ХранилищеКЗаписи = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла));
			КонецЕсли;   
			
			НовоеСообщение.Записать(РежимЗаписиДокумента.Проведение);			
			
			//
			СтрокаЗапроса = "UPDATE  SMS_Repl.dbo.Photo_move 
			|SET repeat_requested = 1 		
			|WHERE id_photo = " + ВнешниеДанные.ФорматПоля(ИдентификаторФото);
			
			 ADOСоединение.Execute(СтрокаЗапроса);

			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
			
	
	
	
КонецПроцедуры 

Функция ОтправитьПочтовоеСообщение(УзелОбмена, ДанныеМобильногоПриложения) Экспорт
	
	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	//УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныеЗаписиЭлектроннойПочты.Ссылка
	               |ИЗ
	               |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	УчетнаяЗапись = Выборка.Ссылка;
	
	
	
	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.ИмяОтправителя  = "Мобильное устройство. Код: " + УзелОбмена.Код;
	Письмо.Отправитель = "no-reply@vkusvill.ru";
	
	Письмо.Тема = СтруктураЗаписи.ТемаСообщения;
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес           = СтруктураЗаписи.АдресПолучателя;
	Получатель.ОтображаемоеИмя = СтруктураЗаписи.Получатель;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = СтруктураЗаписи.ТекстСообщения;
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	Для Каждого ДанныеКартинки Из СтруктураЗаписи.Картинки Цикл
		ВремФайл = ПолучитьИмяВременногоФайла(ДанныеКартинки.Расширение);
		
		Попытка 
			ДанныеКартинки.ДвоичныеДанные.Записать(ВремФайл);
			Письмо.Вложения.Добавить(ВремФайл ,"Фотография");		
		Исключение
		КонецПопытки; 
	КонецЦикла;  
	
	Почта.Послать(Письмо);
	Почта.Отключиться();

	Возврат Новый ХранилищеЗначения(Неопределено);
	
КонецФункции 

Функция ПолучитьЗаданияПоЦенникам(УзелОбмена) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МП_ЗаданияПоЦенникам.ИдентификаторЗадания,
	                      |	МП_ЗаданияПоЦенникам.Дата,
	                      |	МП_ЗаданияПоЦенникам.ТипЗадания КАК ТипЗаданияСсылка,
	                      |	МП_ЗаданияПоЦенникам.Номенклатура КАК НоменклатураСсылка
	                      |ИЗ
	                      |	РегистрСведений.МП_ЗаданияПоЦенникам КАК МП_ЗаданияПоЦенникам
	                      |ГДЕ
	                      |	МП_ЗаданияПоЦенникам.СтруктурнаяЕдиница = &Магазин");
	
	Запрос.УстановитьПараметр("Магазин", УзелОбмена.Магазин);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	ТаблицаРезультат.Колонки.Добавить("ТипЗадания");
	ТаблицаРезультат.Колонки.Добавить("Номенклатура");

	Для Каждого Строка Из ТаблицаРезультат Цикл
		Строка.ТипЗадания = ПолучитьИмяЗначенияПеречисления(Строка.ТипЗаданияСсылка);
		Строка.Номенклатура = Строка(Строка.НоменклатураСсылка.УникальныйИдентификатор());
	КонецЦикла;  

	ТаблицаРезультат.Колонки.Удалить("ТипЗаданияСсылка");
	ТаблицаРезультат.Колонки.Удалить("НоменклатураСсылка");


	Возврат Новый ХранилищеЗначения(ТаблицаРезультат, Новый СжатиеДанных(9));

КонецФункции  

Процедура СформироватьЗаданияПоЦенникам() Экспорт
	
	НЗ = РегистрыСведений.МП_ЗаданияПоЦенникам.СоздатьНаборЗаписей();
	
	//НЗ.Прочитать();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МП_ЗаданияПоЦенникам.ИдентификаторЗадания,
	|	МП_ЗаданияПоЦенникам.СтруктурнаяЕдиница,
	|	МП_ЗаданияПоЦенникам.Дата,
	|	МП_ЗаданияПоЦенникам.ТипЗадания,
	|	МП_ЗаданияПоЦенникам.Номенклатура
	|ИЗ
	|	РегистрСведений.МП_ЗаданияПоЦенникам КАК МП_ЗаданияПоЦенникам");
	
	ТаблицаЗаданий = Запрос.Выполнить().Выгрузить();
	
	//НЗ.Очистить();
	
	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МобильноеПриложение.Магазин.НомерТочки КАК НомерТочки
	                      |ИЗ
	                      |	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	                      |ГДЕ
	                      |	МобильноеПриложение.ФормироватьЗаданияПоЦенникам
	                      |	И МобильноеПриложение.Магазин.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)");
	
	СтрНомераТочек = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрНомераТочек = СтрНомераТочек + ?(ПустаяСтрока(СтрНомераТочек), "", ", ") + Формат(Выборка.НомерТочки, "ЧГ="); 
	КонецЦикла;   
	
	
	
	//
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "
	 |	if OBJECT_ID('tempdb..#tdo_0') is not null drop table #tdo_0
	 |	select id_tov, ShopNo_rep ShopNo, date_last_upd 
	 |	into #tdo_0
	 |	from SMS_REPL..TD_ost tdo with(nolock) 
	 |	where Ost_kon=0 and date_last_upd between convert(date,getdate()) and DATEADD(minute,-5,getdate())
	|	
	|	 -- Отберем позиции, по которым последний тип Ценник убран
	 |	if OBJECT_ID('tempdb..#photo') is not null drop table #photo
	 |	select a.id, a.id_tov, a.ShopNo, a.date_photo, a.not_recognized, type_photo 
	 |	into #photo
	 |	from (select id,ShopNo,date_photo, id_tov, type_photo, not_recognized, ROW_NUMBER()over (partition by shopNo, id_tov order by date_photo desc) rn 
	 |	from SMS_REPL..Photo_move as ph with(nolock)) a
	 |	where a.rn=1        and id_tov is not null and type_photo=0 and date_photo>= CONVERT(date,getdate())
	 |	
	 | SELECT distinct       ShopNo_rep
	 | into #shops1
	 | FROM [SMS_REPL].[dbo].[TD_move] (nolock)
	 | where operation_type=400 
	 | and opendate>= CONVERT(date,getdate())
	 |	
	 | SELECT distinct       ShopNo_rep
	 | into #shops2
	 | FROM [SMS_REPL].[dbo].[TD_move] (nolock)
	 | where operation_type=-400 
	 | and opendate>= CONVERT(date,getdate())
	 |
	 |	select  tdo.ShopNo,  tdo.id_tov, 0 as task_type
	 |	from #tdo_0 as tdo left join #photo as ph on tdo.shopNo=ph.ShopNo and tdo.id_tov=ph.id_tov and date_last_upd<=ph.date_photo
	 |	where ph.id is null and tdo.ShopNo IN (" + СтрНомераТочек + ") and 
	 |										tdo.ShopNo IN (select ShopNo_rep from #shops1)	and
	 |										not tdo.ShopNo IN (select ShopNo_rep from #shops2) 
	 |	union
 	 |	select  tdo.ShopNo_rep,  tdo.id_tov, 1 as task_type
	 |	from #photo ph inner join SMS_REPL..TD_ost tdo with(nolock) on tdo.ShopNo_rep=ph.ShopNo and tdo.id_tov=ph.id_tov
	 |	where Ost_kon>0  and tdo.ShopNo_rep IN (" + СтрНомераТочек + ") and 
	 |										tdo.ShopNo_rep IN (select ShopNo_rep from #shops1)	and
	 |										not tdo.ShopNo_rep IN (select ShopNo_rep from #shops2)";

			
	Попытка 
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Попытка 
		rs.MoveFirst();		
	Исключение
		НЗ.Записать();
			
		Возврат;
	КонецПопытки; 
		
	
	Пока НЕ rs.EOF() Цикл
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", rs.Fields("id_tov").Value);
		Магазин = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", rs.Fields("ShopNo").Value);
		
		Если ЗначениеЗаполнено(Номенклатура) И НЕ Номенклатура.ЭтоКомплект И ЗначениеЗаполнено(Магазин)  Тогда
			
			НоваяСтрока = НЗ.Добавить();			
			
			НайденныеСтроки = ТаблицаЗаданий.НайтиСтроки(Новый Структура("Номенклатура, СтруктурнаяЕдиница", Номенклатура, Магазин));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НоваяСтрока.ИдентификаторЗадания = Новый УникальныйИдентификатор;
				НоваяСтрока.СтруктурнаяЕдиница = Магазин;
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.Дата = ТекущаяДата();
				
				Если rs.Fields("task_type").Value = 0 Тогда
					НоваяСтрока.ТипЗадания = Перечисления.ТипыЗаданийПоЦенникам.СнятиеЦенника;
				Иначе
					НоваяСтрока.ТипЗадания = Перечисления.ТипыЗаданийПоЦенникам.УстановкаЦенника;
				КонецЕсли; 
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
			КонецЕсли; 
			
		КонецЕсли; 
		
		rs.MoveNext();
	КонецЦикла;
	
	НЗ.Записать();
	
КонецПроцедуры 

Функция ПолучитьИнвентаризации(УзелОбмена, ДатаНачала, ДатаОкончания) Экспорт
	
	Магазин = УзелОбмена.Магазин;
	//+++АК BELN 2018.07.18 
	ЭтоМикромаркет=Магазин.ТипРозничнойТочки=Перечисления.ТипыРозничныхТочек.Микромаркет;
	//---АК BELN 2018.07.18 
	
	//+++АК BELN 2018.05.15 ИП-00018623
	ЗапросОстатков = Новый Запрос();
	ЗапросОстатков.Текст = "ВЫБРАТЬ
	                       |	ТоварыНаСкладахОстатки.Номенклатура,
	                       |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток * ЕСТЬNULL(ТоварыНаСкладахОстатки.ЕдиницаИзмерения.Коэффициент, 1)) КАК КоличествоОстаток
	                       |ИЗ
	                       |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	ТоварыНаСкладахОстатки.Номенклатура";
	ЗапросОстатков.УстановитьПараметр("ДатаОстатков", ТекущаяДата());
	ЗапросОстатков.УстановитьПараметр("Склад", Магазин.СкладТорговогоЗала);
	Остатки = ЗапросОстатков.Выполнить().Выгрузить();

	//---АК BELN 2018.05.15 
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	
	ТаблицаРезультат.Колонки.Добавить("ИдентификаторОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультат.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультат.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультат.Колонки.Добавить("Номенклатура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	//+++АК BELN 2018.05.15 ИП-00018623
	ТаблицаРезультат.Колонки.Добавить("КоличествоУчетное", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("КоличествоВПодсобке", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("КоличествоВЗале", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("ОбработаноВПодсобке", Новый ОписаниеТипов("Булево"));	
	//---АК BELN 2018.05.15 
	//+++AK LEBV 2018.11.02  ИП-00018623.02   
	ТаблицаРезультат.Колонки.Добавить("ГруппаНоменклатуры", Новый ОписаниеТипов("Строка"));
	//---AK LEBV 2018.11.02

	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//+++AK LEBV 2018.11.02 ИП-00018623.02   
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("id_doc", Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("ArticleGroups", Новый ОписаниеТипов("Строка"));
	
	ТекстЗапросаSQL = "Exec sms_repl.dbo.sp_td_move_general " + ВнешниеДанные.ФорматПоля(Магазин.НомерТочки);
					
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НовСтр = ТабДанные.Добавить();
			НовСтр.id_doc = СокрЛП(rs.Fields("id_doc").Value);
			НовСтр.ArticleGroups = СокрЛП(rs.Fields("ArticleGroups").Value);
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	//---AK LEBV 2018.11.02

	
	ТекстЗапросаSQL = "SELECT TD.opendate, TD.Id_doc,  TD.id_tov, TD.Quantity as Quantity, TD.Quantity_inv1 as Quantity_inv1, TD.Quantity_inv2 as Quantity_inv2, TD.type_zamech as type_zamech, CAST(TD.tduid as nvarchar(36)) as tduid, TD.operation_type, TD.Descr
										|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind2))
										| WHERE TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Магазин.НомерТочки) + " and TD.opendate >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаНачала)) + " and TD.opendate <= " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаОкончания)) + 
										//+++АК BELN 2018.10.16 ИП-00018623.01   
										?(ЭтоМикромаркет," and TD.operation_type * CASE WHEN TD.operation_type < 0 THEN -1 ELSE 1 END = 300 and isnull(TD.Quantity,-1)>=0",		
										" and TD.operation_type = -300 and isnull(TD.Quantity,-1)>=0");		
										//---АК BELN 2018.10.16 
										
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			
			НоваяСтрока.ИдентификаторОперации = НРег(rs.Fields("tduid").Value);
			НоваяСтрока.Дата = rs.Fields("opendate").Value;
			НоваяСтрока.Проведен = rs.Fields("operation_type").Value > 0;
			НоваяСтрока.Комментарий = СтрЗаменить(СокрЛП(rs.Fields("Descr").Value), "(из моб. приложения)", "");
			Ном=Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", rs.Fields("id_tov").Value);
			НоваяСтрока.Номенклатура = Ном.УникальныйИдентификатор();
			//+++AK LEBV 2018.11.02 ИП-00018623.02   
			НайденнаяСтрока = ТабДанные.Найти(Сред(rs.Fields("Id_doc").Value,2,36), "id_doc");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока.ГруппаНоменклатуры = НайденнаяСтрока.ArticleGroups;
			КонецЕсли; 
			//---AK LEBV 2018.11.02
			НоваяСтрока.Количество = rs.Fields("Quantity").Value;
			//+++АК BELN 2018.05.15 ИП-00018623
			
			//+++AK LEBV 2018.11.09  ИП-00018623.02   
			//СтрОст=Остатки.Найти(Ном);
			//Если СтрОст<>Неопределено Тогда
			//	
			//	НоваяСтрока.КоличествоУчетное = СтрОст.КоличествоОстаток;
			//	
			//КонецЕсли;
			НоваяСтрока.КоличествоУчетное = rs.Fields("Quantity").Value;

			//---AK LEBV 2018.11.02
			НоваяСтрока.КоличествоВПодсобке = rs.Fields("Quantity_inv1").Value;
			НоваяСтрока.КоличествоВЗале = rs.Fields("Quantity_inv2").Value;
			НоваяСтрока.ОбработаноВПодсобке = ЗначениеЗаполнено(rs.Fields("type_zamech").Value);
			
			НоваяСтрока.Отклонение = НоваяСтрока.Количество-НоваяСтрока.КоличествоУчетное;
			//---АК BELN 2018.05.15 
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	//+++АК BELN 2018.07.18 
	Если ЭтоМикромаркет И ТаблицаРезультат.Количество()=0 Тогда
		Для каждого Стр Из Остатки Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			//НоваяСтрока.ИдентификаторОперации = Новый УникальныйИдентификатор;
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Номенклатура = Стр.Номенклатура.УникальныйИдентификатор();
			
			НоваяСтрока.КоличествоУчетное = Стр.КоличествоОстаток;
			
			//НоваяСтрока.ОбработаноВПодсобке = Истина;
			
			НоваяСтрока.Отклонение = -НоваяСтрока.КоличествоУчетное;
		
		КонецЦикла; 
		
	
	КонецЕсли; 
	
	//---АК BELN 2018.07.18 
	
	
	Возврат Новый ХранилищеЗначения(ТаблицаРезультат, Новый СжатиеДанных(9));

КонецФункции  

Функция ЗаписатьОперациюИнвентаризации(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	ОписаниеОшибки = "";

	Магазин = УзелОбмена.Магазин;
	НомерМагазина = Магазин.НомерТочки;
	
	ФлНом=СтруктураЗаписи.Свойство("Номенклатура");
	//+++АК BELN 2018.06.22 ИП-00019004
	Если ФлНом И Не ЗначениеЗаполнено(СтруктураЗаписи.ИдентификаторОперации) Тогда
		Магазин = УзелОбмена.Магазин;
		//
		
		УинОперации = СтруктураЗаписи.ИдентификаторОперации;
		Проведен =  СтруктураЗаписи.Проведен;
		КодОперации = 300;
		КодПричиныСписания = null;
		Комментарий = "";
		Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура));
		Характеристика =  Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Характеристика));
		Количество = СтруктураЗаписи.Количество;
		
		
		//
		//
		
		ПолныйТекстЗапроса = "";
		НомерМагазина = Магазин.НомерТочки;
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		ДокументБылПроведен = Ложь;
		Если ПустаяСтрока(УинОперации) Тогда
			УинОперации = Строка(Новый УникальныйИдентификатор());
			УинДокумента = Строка(Новый УникальныйИдентификатор());
			ПолныйТекстЗапроса = "INSERT INTO [SMS_Repl].[dbo].[TD_move]
			|	(Id_doc, opendate, closedate, line_no, id_tov, operation_type, operation_type_orig, Quantity, CashierID, Confirm_type, tduid, ShopNo_rep)
			|VALUES (" + ВнешниеДанные.ФорматПоля(УинДокумента) + ", GETDATE(), '1900-01-01T00:00:00', 1, 0, " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", 0, 0, 0, " + ВнешниеДанные.ФорматПоля(УинОперации) + ", " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
			|)";
		Иначе
			ТекстЗапросаSQL = "SELECT TD.id_doc
					|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
					| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
					|	and operation_type > 0";
									
			rs = ADOСоединение.Execute(ТекстЗапросаSQL);
			КолвоСтрокВДокументе = 0;
			//Попытка
			//	rs.MoveFirst();
			//	Если НЕ rs.Eof() Тогда
			//		ОписаниеОшибки = "Документ уже проведен!";
			//		ДокументБылПроведен = Истина;
			//		Возврат Неопределено;
			//	КонецЕсли;
			//Исключение
			//КонецПопытки;
		КонецЕсли;
		
		ТекстЗапросаSQL = "SELECT TD.id_doc, COUNT(TD.line_no) as KolvoStrok
					|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
					| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
					|GROUP BY TD.id_doc";
									
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		КолвоСтрокВДокументе = 0;
		Попытка
			rs.MoveFirst();
			Если НЕ rs.Eof() Тогда
				КолвоСтрокВДокументе = rs.Fields("KolvoStrok").Value;
				УинДокумента = rs.Fields("id_doc").Value;
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
		Если КолвоСтрокВДокументе > 1 Тогда
			УинДокумента = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Товар", Товар);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураСпр.Ссылка,
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		               |	НоменклатураСпр.id_tov
		               |ИЗ
		               |	Справочник.Номенклатура КАК НоменклатураСпр
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |				&ТекДата,
		               |				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |ГДЕ
		               |	НоменклатураСпр.Ссылка = &Товар
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ХарактеристикиНоменклатуры.Владелец КАК Товар,
		               |	ХарактеристикиНоменклатуры.Ссылка,
		               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИдКонтр
		               |ИЗ
		               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		               |ГДЕ
		               |	ХарактеристикиНоменклатуры.Ссылка = &Характеристика";
					   
		Результаты = Запрос.ВыполнитьПакет();
		ТабТовары = Результаты[0].Выгрузить();
		ТабХарки = Результаты[1].Выгрузить();
		
		id_tov = 0;
		id_kontr = 0;
		Цена = 0;
		Если ТабТовары.Количество() > 0 Тогда
			id_tov = ТабТовары[0].id_tov;
			Цена = ТабТовары[0].Цена;
		КонецЕсли;	
		
		Если ТабХарки.Количество() > 0 Тогда
			id_kontr = ТабХарки[0].ИдКонтр;
		КонецЕсли;	
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + Символы.ПС + "
			|UPDATE [SMS_Repl].[dbo].[TD_move]
			|SET Id_doc = " + ВнешниеДанные.ФорматПоля(УинДокумента) + "
			|	, closedate = " + ?(Проведен, "GETDATE()", "'1900-01-01T00:00:00'") + "
			|	, line_no = 1
			|	, id_kontr = " + ВнешниеДанные.ФорматПоля(id_kontr) + "
			|	, id_tov = " + ВнешниеДанные.ФорматПоля(id_tov) + "
			|	, operation_type = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
			|	, operation_type_orig = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
			|	, Quantity = " + ВнешниеДанные.ФорматПоля(Количество) + 

		    //+++АК BELN 2018.05.16 ИП-00018623
			?(СтруктураЗаписи.Свойство("КоличествоВПодсобке"), ", Quantity_inv1 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВПодсобке),"")+
			?(СтруктураЗаписи.Свойство("КоличествоВЗале"), ", Quantity_inv2 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВЗале),"")+
			//---АК BELN 2018.05.16 
			
			", type_zamech=1		
			|	, CashierID = 0
			|	, Confirm_type = 0
			|	, Date_proizv = " + ВнешниеДанные.ФорматПоля(Дата(1,1,1), Истина) + "
			|	, Descr = " + ВнешниеДанные.ФорматПоля(СокрЛП(Комментарий) + "(из моб. приложения)") + "
			|	, ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
			|WHERE tduid = " + ВнешниеДанные.ФорматПоля(УинОперации);
			
		ЗапросПолный = "declare @err int =1
						|while @err=1
						|begin
						| begin try
						|" + ПолныйТекстЗапроса + "
						|select @err=0
						| 
						| END TRY
						|  BEGIN CATCH
						| 
						|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
						|begin
						|-- запись в лог факта блокировки
						|	set @err=1
						|end
						|else
						|begin
						| 
						|-- прочая ошибка - выход  
						| return
						| end
						| 
						|  END CATCH 
						|end -- while";
		
		Попытка	
			ADOСоединение.Execute(ЗапросПолный);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	
	//---АК BELN 2018.06.22 	
				
			
			
		
		
		
		
		
		
	Иначе	
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();

		ТекстЗапроса = "  
			|declare @Id_doc uniqueidentifier
			|declare @Id_doc_General uniqueidentifier
			|SELECT  @Id_doc = Id_doc, @Id_doc_General  = Id_doc_General 
			|FROM [SMS_Repl].[dbo].[TD_move] (nolock)
			|WHERE tduid = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторОперации) + " 		
			|
			|if @Id_doc_General is null		
			|begin		
			|UPDATE [SMS_Repl].[dbo].[TD_move]
			|SET Id_doc_General = @Id_doc
			|WHERE Id_doc = @Id_doc
			|end				
			|		
			//|UPDATE [SMS_Repl].[dbo].[TD_move]
			//|SET  Id_doc =  newid() 
			//|WHERE tduid = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторОперации) + " AND
			//|Id_doc_General = Id_doc
			|		
			|UPDATE [SMS_Repl].[dbo].[TD_move]
			|SET closedate = " + ?(СтруктураЗаписи.Проведен, "GETDATE()", "'1900-01-01T00:00:00'") + "
			|	, operation_type = " + ВнешниеДанные.ФорматПоля(300 * ?(СтруктураЗаписи.Проведен, 1, -1)) + "
			|	, operation_type_orig = " + ВнешниеДанные.ФорматПоля(300* ?(СтруктураЗаписи.Проведен, 1, -1)) + "
			|	, Quantity = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.Количество) +
		    //+++АК BELN 2018.05.16 ИП-00018623
			?(СтруктураЗаписи.Свойство("КоличествоВПодсобке"), ", Quantity_inv1 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВПодсобке),"")+
			?(СтруктураЗаписи.Свойство("КоличествоВЗале"), ", Quantity_inv2 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВЗале),"")+
			//---АК BELN 2018.05.16 
			
			", type_zamech=1
			|WHERE tduid = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторОперации);
		
		Попытка	
			ADOСоединение.Execute(ТекстЗапроса);
			Результат = Истина;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Результат = Ложь;
		КонецПопытки;
		
		Если Результат И СтруктураЗаписи.Проведен И ЗначениеЗаполнено(СтруктураЗаписи.ИдентификаторЗаданияПоЦенникам) Тогда
			НЗ = РегистрыСведений.МП_ЗаданияПоЦенникам.СоздатьНаборЗаписей();
			НЗ.Отбор.ИдентификаторЗадания.Установить(СтруктураЗаписи.ИдентификаторЗаданияПоЦенникам);
			НЗ.Записать();
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 

Функция СоздатьОперациюИнвентаризации(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	ОписаниеОшибки = "";

	Магазин = УзелОбмена.Магазин;
	НомерМагазина = Магазин.НомерТочки;

	Идентификатор = Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура);
	Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	
	Проведен = СтруктураЗаписи.Проведен;	

	Если НЕ Номенклатура.Пустая() И Номенклатура.ПолучитьОбъект() = Неопределено Тогда
		ОписаниеОшибки = "Не найдена номенклатура в центральной базе!";

		СтруктураОтвет = Новый Структура("ИдентификаторОперации, ОписаниеОшибки", Неопределено, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	ИдентификаторОперации = Строка(Новый УникальныйИдентификатор());
	ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор());
	ДатаОперации = ТекущаяДата();

	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();

	ТекстЗапроса = "INSERT INTO [SMS_Repl].[dbo].[TD_move]
		|	(Id_doc, opendate, closedate, line_no, id_kontr, id_tov, operation_type, operation_type_orig, Quantity, CashierID, Confirm_type, Confirm_date, Confirm_reason, ShopNo_rep, Descr, id_vikl, tduid)
		|VALUES (" + ВнешниеДанные.ФорматПоля(ИдентификаторДокумента) + ", " + ВнешниеДанные.ФорматПоля(ДатаОперации) + ", " + ?(Проведен, ВнешниеДанные.ФорматПоля(ДатаОперации), "'1900-01-01T00:00:00'") + ",
		|1, 0, " + ВнешниеДанные.ФорматПоля(Номенклатура.id_tov) + ", " + ?(Проведен, 300, -300) + ", " + ?(Проведен, 300, -300) + ", 
		|0, 111, 0, '1900-01-01T00:00:00', 0, " + ВнешниеДанные.ФорматПоля(НомерМагазина) + ", " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.Комментарий) + ", 99999, " + ВнешниеДанные.ФорматПоля(ИдентификаторОперации) + "
		|)";
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапроса);
		СтруктураОтвет = Новый Структура("ИдентификаторОперации, ДатаОперации", ИдентификаторОперации, ДатаОперации);
	Исключение
		СтруктураОтвет = Новый Структура("ИдентификаторОперации, ОписаниеОшибки", Неопределено, ОписаниеОшибки());
	КонецПопытки;
	
	Если СтруктураОтвет.ИдентификаторОперации<>Неопределено И Проведен И ЗначениеЗаполнено(СтруктураЗаписи.ИдентификаторЗаданияПоЦенникам) Тогда
		НЗ = РегистрыСведений.МП_ЗаданияПоЦенникам.СоздатьНаборЗаписей();
		НЗ.Отбор.ИдентификаторЗадания.Установить(СтруктураЗаписи.ИдентификаторЗаданияПоЦенникам);
		НЗ.Записать();
	КонецЕсли; 

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО СПИСАНИЮ ТОВАРОВ

Функция ПолучитьСписания(УзелОбмена, ДатаНачала, ДатаОкончания) Экспорт
	
	Возврат Новый ХранилищеЗначения(ВнешниеДанные.ПрочитатьОперацииСписания(УзелОбмена.Магазин, ДатаНачала, ДатаОкончания), Новый СжатиеДанных(9));

КонецФункции  

Функция ПолучитьТипыОперацийСписания() Экспорт

	Возврат Новый ХранилищеЗначения(ВнешниеДанные.ПолучитьТипыОперацийСписания(), Новый СжатиеДанных(9));

КонецФункции 

Функция ПолучитьПричиныСписания() Экспорт

	Возврат Новый ХранилищеЗначения(ВнешниеДанные.ПолучитьКодыПричинСписания(), Новый СжатиеДанных(9));

КонецФункции 

Функция ЗаписатьОперациюСписания(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	//
	Идентификатор = Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура);
	Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);

	Если НЕ ЗначениеЗаполнено(Номенклатура)  Тогда
		ОписаниеОшибки = "Не найдена номенклатура в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Неопределено, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

	СтруктураЗаписи.Номенклатура = Номенклатура;

	//
	Идентификатор = Новый УникальныйИдентификатор(СтруктураЗаписи.Характеристика );
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);

	Если НЕ ЗначениеЗаполнено(Характеристика)  Тогда
		ОписаниеОшибки = "Не найдена характеристика номенклатуры в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Неопределено, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

	СтруктураЗаписи.Характеристика = Характеристика;

	//
	ОписаниеОшибки = "";

	Результат = ВнешниеДанные.ЗаписатьОперациюСписания(СтруктураЗаписи, УзелОбмена, ОписаниеОшибки);

	СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 

Функция ДобавитьКартинкуКОперацииСписания(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	ОписаниеОшибки = "";

	Фотография = Новый Картинка(СтруктураЗаписи.ДвоичныеДанныеКартинки);

	ВнешниеДанные.ДобавитьКартинкуКОперацииСписания(СтруктураЗаписи.ИдентификаторСписания, УзелОбмена.Магазин, Фотография);

	Возврат Новый ХранилищеЗначения(Неопределено);

КонецФункции 

Функция УдалитьОперациюСписания(ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	ОписаниеОшибки = "";

	ВнешниеДанные.УдалитьОперациюСписания(СтруктураЗаписи.ИдентификаторСписания, ОписаниеОшибки);

	СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 

Функция ПроверитьВозможностьСписания(УзелОбмена) Экспорт

	ОписаниеОшибки = "";

	Результат = ВнешниеДанные.МожноВводитьНовуюОперациюСписания(УзелОбмена.Магазин, ОписаниеОшибки);

	СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА СООБЩЕНИЯМИ

Функция ЗаписатьСообщение(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	//
	Идентификатор = Новый УникальныйИдентификатор(СтруктураЗаписи.ШаблонСообщений);
	ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.ПолучитьСсылку(Идентификатор);

	Если НЕ ШаблонСообщений.Пустая() И ШаблонСообщений.ПолучитьОбъект() = Неопределено  Тогда
		ОписаниеОшибки = "Не найден шаблон сообщений в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

    СтруктураЗаписи.ШаблонСообщений = ШаблонСообщений;

	//
	Идентификатор = Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура);
	Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);

	Если НЕ Номенклатура.Пустая() И Номенклатура.ПолучитьОбъект() = Неопределено Тогда
		ОписаниеОшибки = "Не найдена номенклатура в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

	СтруктураЗаписи.Номенклатура = Номенклатура;

	//
	Идентификатор = Новый УникальныйИдентификатор(СтруктураЗаписи.ХарактеристикаНоменклатуры);
	ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);

	Если НЕ ХарактеристикаНоменклатуры.Пустая() И ХарактеристикаНоменклатуры.ПолучитьОбъект() = Неопределено  Тогда
		ОписаниеОшибки = "Не найдена характеристика номенклатуры в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

	СтруктураЗаписи.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;


	//
	НовоеСообщение = Документы.СообщениеМОС.СоздатьДокумент();
	
    НовоеСообщение.УстановитьСсылкуНового(Документы.СообщениеМОС.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.ИдентификаторСообщения)));

	//НовоеСообщение.ПометкаУдаления = Истина;
    НовоеСообщение.Дата = СтруктураЗаписи.Дата; 
	НовоеСообщение.Отправитель = УзелОбмена.Магазин;
	НовоеСообщение.КодНаправления = 9;
	НовоеСообщение.Тема = СтруктураЗаписи.Тема;
	НовоеСообщение.ТекстСообщения = СтруктураЗаписи.ТекстСообщения;
	НовоеСообщение.ШаблонСообщений = СтруктураЗаписи.ШаблонСообщений ;
	НовоеСообщение.Товар = СтруктураЗаписи.Номенклатура; 

	Если ЗначениеЗаполнено(СтруктураЗаписи.ХарактеристикаНоменклатуры) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗначенияСвойствОбъектов.Значение
		                      |ИЗ
		                      |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		                      |ГДЕ
		                      |	ЗначенияСвойствОбъектов.Объект = &Объект
		                      |	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)");
		
		Запрос.УстановитьПараметр("Объект", СтруктураЗаписи.ХарактеристикаНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НовоеСообщение.Производитель = Выборка.Значение; 
		КонецЕсли; 
	КонецЕсли; 

	//
	СтрокаСтруктурнойЕдиницы = НовоеСообщение.СтруктурныеЕдиницы.Добавить();
	СтрокаСтруктурнойЕдиницы.СтруктурнаяЕдиница = УзелОбмена.Магазин;
	
    //
	Для Каждого ДанныеКартинки Из СтруктураЗаписи.Картинки Цикл
		СтрокаКартинки = НовоеСообщение.Картинки.Добавить();
		СтрокаКартинки.КраткоеИмяФайла = "Картинка " + СтрокаКартинки.НомерСтроки;
		СтрокаКартинки.ИД = МеханизмОбменаСообщениями.ПолучитьНовыйУИДКартинки() + СтрокаКартинки.НомерСтроки;
		СтрокаКартинки.Расширение = ДанныеКартинки.Расширение;
		СтрокаКартинки.ВнесеныИзменения = Истина;
		СтрокаКартинки.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		//СтрокаКартинки.Размер = 250;
		
		//ДДКартинки = Картинка1.ПолучитьДвоичныеДанные();
		СтрокаКартинки.ХранилищеКЗаписи = Новый ХранилищеЗначения(ДанныеКартинки.ДвоичныеДанные);
	КонецЦикла;  

	//+++АК SHEP 20160531
	НовоеСообщение.АдресаЭП.Загрузить(ШаблонСообщений.АдресаЭП.Выгрузить());
	НовоеСообщение.РолиПолучателей.Загрузить(ШаблонСообщений.РолиПолучателей.Выгрузить());
	//---АК SHEP 20160531

	Попытка 
		НовоеСообщение.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		Если НовоеСообщение.ДополнительныеСвойства.Свойство("ТекстОшибки") Тогда
			ОписаниеОшибки = НовоеСообщение.ДополнительныеСвойства.ТекстОшибки;
		Иначе
			ОписаниеОшибки = ОписаниеОшибки();
		КонецЕсли; 
		
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецПопытки; 

	//СтруктураОтвет = Новый Структура("Результат", Строка(НовоеСообщение.Ссылка.УникальныйИдентификатор()));
	СтруктураОтвет = Новый Структура("Результат", Истина);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 

Функция ПолучитьСообщения(УзелОбмена, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка,
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка.КодНаправления,
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка.Тема,
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка.ТекстСообщения,
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка.Дата,
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка.Автор.Наименование КАК Автор,
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка.ТипСообщения КАК ТипСообщенияСсылка,
	                      |	ВЫБОР
	                      |		КОГДА СообщениеМОССтруктурныеЕдиницы.ДатаИВремяПрочтения = ДАТАВРЕМЯ(1, 1, 1)
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Прочитано,
	                      |	СообщениеМОССтруктурныеЕдиницы.Ссылка.ШаблонСообщений КАК ШаблонСообщенийСсылка
	                      |ИЗ
	                      |	Документ.СообщениеМОС.СтруктурныеЕдиницы КАК СообщениеМОССтруктурныеЕдиницы
	                      |ГДЕ
	                      |	СообщениеМОССтруктурныеЕдиницы.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
						  |	И &СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	                      |	И СообщениеМОССтруктурныеЕдиницы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания");
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", УзелОбмена.Магазин);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	
	ТаблицаСообщений = Запрос.Выполнить().Выгрузить();

	ТаблицаСообщений.Колонки.Добавить("ИдентификаторСообщения", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаСообщений.Колонки.Добавить("ТипСообщения");
	ТаблицаСообщений.Колонки.Добавить("ШаблонСообщений");
	ТаблицаСообщений.Колонки.Добавить("КоличествоФотографий");
	ТаблицаСообщений.Колонки.Добавить("Картинки");

	Для Каждого Строка Из ТаблицаСообщений Цикл
		Строка.ИдентификаторСообщения = Строка(Строка.Ссылка.УникальныйИдентификатор());
		Строка.ТипСообщения = ПолучитьИмяЗначенияПеречисления(Строка.ТипСообщенияСсылка);
		Строка.ШаблонСообщений = Строка(Строка.ШаблонСообщенийСсылка.УникальныйИдентификатор());
		Строка.КоличествоФотографий = Строка.Ссылка.Картинки.Количество();
	КонецЦикла;  

	ТаблицаСообщений.Колонки.Удалить("Ссылка");
	ТаблицаСообщений.Колонки.Удалить("ТипСообщенияСсылка");
	ТаблицаСообщений.Колонки.Удалить("ШаблонСообщенийСсылка");

	Возврат Новый ХранилищеЗначения(ТаблицаСообщений, Новый СжатиеДанных(9));

КонецФункции  

Функция ПолучитьКартинкиДляСообщения(ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	Картинки = Новый Массив;
	
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	
	
	СообщениеСсылка = Документы.СообщениеМОС.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.ИдентификаторСообщения));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СообщениеМОСКартинки.ОтносительноеИмяФайла
	|ИЗ
	|	Документ.СообщениеМОС.Картинки КАК СообщениеМОСКартинки
	|ГДЕ
	|	СообщениеМОСКартинки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеМОСКартинки.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", СообщениеСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.ОтносительноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяФайла = КаталогКЗаписи + Выборка.ОтносительноеИмяФайла;			
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			Картинки.Добавить(Новый ДвоичныеДанные(ИмяФайла));
		КонецЕсли; 
	КонецЦикла;  

	СтруктураОтвет = Новый Структура("Картинки", Картинки);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 

Функция УстановитьПризнакПрочитаноДляСообщения(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	СообщениеСсылка = Документы.СообщениеМОС.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.ИдентификаторСообщения));
	
	СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
	
	Если СообщениеОбъект<>Неопределено Тогда
		//СообщениеОбъект.ДатаИВремяПрочтения = СтруктураЗаписи.ДатаИВремяПрочтения;
		
		СтрокаПолучателя = СообщениеОбъект.СтруктурныеЕдиницы.Найти(УзелОбмена.Магазин);
		Если СтрокаПолучателя<>Неопределено Тогда
			СтрокаПолучателя.ДатаИВремяПрочтения = СтруктураЗаписи.ДатаИВремяПрочтения;	
		КонецЕсли; 
		
		
		Попытка 
			СообщениеОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
	Возврат Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));

КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО РЕГЛАМЕНТНЫМ РАБОТАМ

Функция ЗаписатьРегламентнуюРаботу(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	СтруктураЗаписи = ДанныеМобильногоПриложения.Получить();

	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЖурналРегламентныхРаботВМагазинах.*
	|ИЗ
	|	РегистрСведений.ЖурналРегламентныхРаботВМагазинах КАК ЖурналРегламентныхРаботВМагазинах
	|ГДЕ
	|	ЖурналРегламентныхРаботВМагазинах.ИдентификаторРаботы = &ИдентификаторРаботы");
	
	Запрос.УстановитьПараметр("ИдентификаторРаботы", СтруктураЗаписи.ИдентификаторРаботы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий()  Тогда
		ОписаниеОшибки = "Не найдена запись о регламентной работе в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	//
	МЗ = РегистрыСведений.ЖурналРегламентныхРаботВМагазинах.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МЗ, Выборка);
	
	МЗ.Дата = СтруктураЗаписи.ДатаВыполнения;
	МЗ.Комментарий= СтруктураЗаписи.Комментарий;
	МЗ.Исполнитель = СтруктураЗаписи.Исполнитель;
	
	//
	ПутиКФотографиям = МЗ.ПутиКФотографиям.Получить();
	Если ПутиКФотографиям = Неопределено Тогда
		ПутиКФотографиям = Новый Соответствие;
	КонецЕсли; 
	
	Для Каждого ДанныеКартинки Из СтруктураЗаписи.Картинки Цикл
		
		ПутьКФайлу = ОбновитьФайлФотографииНаДиске(ДанныеКартинки.ДвоичныеДанные, МЗ, ДанныеКартинки);
		
		Если ПутьКФайлу<>Неопределено Тогда
			ПутиКФотографиям.Вставить(ДанныеКартинки.НомерФотографии, ПутьКФайлу);			
		КонецЕсли; 
		
	КонецЦикла;

	МЗ.КоличествоФотографий = СтруктураЗаписи.Картинки.Количество();
	МЗ.ПутиКФотографиям = Новый ХранилищеЗначения(ПутиКФотографиям);
	
	//
	Попытка 
		МЗ.Записать();
	Исключение
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки());
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецПопытки; 

	//
	Если ЗначениеЗаполнено(Выборка.ЗаявкаНаВнеплановуюРаботу) И Выборка.ЗаявкаНаВнеплановуюРаботу.ДатаВыполнения<>СтруктураЗаписи.ДатаВыполнения Тогда
		ДокументОбъект = Выборка.ЗаявкаНаВнеплановуюРаботу.ПолучитьОбъект();
		ДокументОбъект.ДатаВыполнения = СтруктураЗаписи.ДатаВыполнения;
		ДокументОбъект.Исполнитель = СтруктураЗаписи.Исполнитель;
		Попытка 
			ДокументОбъект.Записать();
		Исключение
		КонецПопытки; 
	КонецЕсли; 
	
	
	//СтруктураОтвет = Новый Структура("Результат", Строка(НовоеСообщение.Ссылка.УникальныйИдентификатор()));
	СтруктураОтвет = Новый Структура("Результат", Истина);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 

Функция ПолучитьРегламентныеРаботы(УзелОбмена, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРЕДСТАВЛЕНИЕ(ЖурналРегламентныхРаботВМагазинах.Услуга) КАК Услуга,
	                      |	ПРЕДСТАВЛЕНИЕ(ЖурналРегламентныхРаботВМагазинах.Контрагент) КАК Контрагент,
	                      |	ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |	ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода,
	                      |	ЖурналРегламентныхРаботВМагазинах.Дата,
	                      |	ЖурналРегламентныхРаботВМагазинах.Исполнитель,
	                      |	ЖурналРегламентныхРаботВМагазинах.Комментарий,
	                      |	ЖурналРегламентныхРаботВМагазинах.ИдентификаторРаботы,
	                      |	ЖурналРегламентныхРаботВМагазинах.ПредставлениеПериода,
	                      |	ЖурналРегламентныхРаботВМагазинах.КоличествоФотографий,
	                      |	ЖурналРегламентныхРаботВМагазинах.ВнеплановаяРабота
	                      |ИЗ
	                      |	РегистрСведений.ЖурналРегламентныхРаботВМагазинах КАК ЖурналРегламентныхРаботВМагазинах
	                      |ГДЕ
	                      |	ЖурналРегламентныхРаботВМагазинах.ТорговаяТочка = &ТорговаяТочка
	                      |	И ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода МЕЖДУ &ДатаНачала И &ДатаОкончания
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаНачалаПериода УБЫВ");
	
	Запрос.УстановитьПараметр("ТорговаяТочка", УзелОбмена.Магазин);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));

	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	Возврат Новый ХранилищеЗначения(ТаблицаРезультат, Новый СжатиеДанных(9));

КонецФункции  


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО ПРИЕМКЕ ТОВАРОВ

Функция ПолучитьТоварыКПриемке(ШтрихКодДокумента) Экспорт

	Ссылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);

	Если Ссылка = Неопределено Тогда
		ОписаниеОшибки = "Не найден документ в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Неопределено, ОписаниеОшибки);
    	
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 
	Если Ссылка.ПриемкаТерминаломЗакончена Тогда
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Неопределено, "");
		СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
					+ "Данный документ уже был принят терминалом";
		Возврат Новый ХранилищеЗначения(СтруктураОтвет);
	КонецЕсли;	
	
	ТаблицаРезультат = Новый ТаблицаЗначений;

	ТаблицаРезультат.Колонки.Добавить("Характеристика", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Номенклатура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	                      |	ПриходныйОрдерСкладТовары.Характеристика,
	                      |	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество
	                      |ИЗ
	                      |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	                      |ГДЕ
	                      |	ПриходныйОрдерСкладТовары.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	                      |	ПриходныйОрдерСкладТовары.Характеристика
	                      |
	                      |ИМЕЮЩИЕ
	                      |	СУММА(ПриходныйОрдерСкладТовары.Количество) > 0");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);                                                                                 

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		
		НоваяСтрока.Номенклатура  = Строка(Выборка.Номенклатура.УникальныйИдентификатор());
		НоваяСтрока.Характеристика = Строка(Выборка.Характеристика.УникальныйИдентификатор());
        НоваяСтрока.Количество = Выборка.Количество;
	КонецЦикла;  
	//НЗ=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьНаборЗаписей();
	//НЗ.Отбор.Документ.Установить(Ссылка);
	//НЗ.Записать();
	//
	СтруктураОтвет = Новый Структура("Результат,Дата", ТаблицаРезультат,Ссылка.Дата);
    	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));  

КонецФункции 

Функция ПолучитьТоварыКПриемкеЗаДень(КодСклада, НачалоСмены) Экспорт

	ТаблицаРезультат = Новый ТаблицаЗначений;

	ТаблицаРезультат.Колонки.Добавить("Характеристика", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Номенклатура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("ДатаПоступления");
	ТаблицаРезультат.Колонки.Добавить("ЕстьОперация");
	ТаблицаРезультат.Колонки.Добавить("ЕстьОперацияПоДругомуСкладу");
	ТаблицаРезультат.Колонки.Добавить("Технолог");
	ТаблицаРезультат.Колонки.Добавить("ТехнологИдентификатор", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	
	ТаблицаРезультат.Колонки.Добавить("НоменклатураНаименование");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаНаименование");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураВесовой");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураСкладируемая");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураБезУпаковки");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаВес");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаСрокГодности");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаТипСрокаГодности");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаНеактивная");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураРодитель");
	ТаблицаРезультат.Колонки.Добавить("id_tov");
	ТаблицаРезультат.Колонки.Добавить("id_kontr");
	ТаблицаРезультат.Колонки.Добавить("УсилитьКонтроль");
	
	

	// +++ АК mirv 29.08.2017 [ИП-00015993]
	// 
	ТаблицаРезультат.Колонки.Добавить("НадоДегустировать");
	// --- АК mirv  
	
	// +++ АК mirv 29.08.2017 [ИП-00015993]
	// 
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	//                      |	ПриходныйОрдерСкладТовары.Характеристика,
	//                      |	МАКСИМУМ(ПриходныйОрдерСкладТовары.Ссылка.ДатаВремяЗаездаМашины) КАК ДатаПоступления
	//                      |ПОМЕСТИТЬ ВТ_Товары
	//                      |ИЗ
	//                      |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	//                      |ГДЕ
	//                      |	ПриходныйОрдерСкладТовары.Ссылка.Дата >= &НачалоСмены
	//                      |	И ПриходныйОрдерСкладТовары.Ссылка.Дата < ДОБАВИТЬКДАТЕ(&НачалоСмены, ДЕНЬ, 1)
	//                      |	И ПриходныйОрдерСкладТовары.Ссылка.Проведен
	//                      |	И ПриходныйОрдерСкладТовары.Количество > 0
	//                      |	И ПриходныйОрдерСкладТовары.Характеристика.Ссылка ЕСТЬ НЕ NULL 
	//                      |	И ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &Склад
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	//                      |	ПриходныйОрдерСкладТовары.Характеристика
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	МП_ОтчетТехнолога.Номенклатура,
	//                      |	МП_ОтчетТехнолога.ХарактеристикаНоменклатуры,
	//                      |	МАКСИМУМ(ВЫБОР
	//                      |			КОГДА МП_ОтчетТехнолога.Склад = &Склад
	//                      |				ТОГДА МП_ОтчетТехнолога.Ссылка
	//                      |		КОНЕЦ) КАК ОперацияПоТекущемуСкладу,
	//                      |	МАКСИМУМ(ВЫБОР
	//                      |			КОГДА МП_ОтчетТехнолога.Склад <> &Склад
	//                      |				ТОГДА МП_ОтчетТехнолога.Ссылка
	//                      |		КОНЕЦ) КАК ОперацияНеПоТекущемуСкладу
	//                      |ПОМЕСТИТЬ ВТ_Отчеты
	//                      |ИЗ
	//                      |	Документ.МП_ОтчетТехнолога КАК МП_ОтчетТехнолога
	//                      |ГДЕ
	//                      |	МП_ОтчетТехнолога.Дата >= &НачалоСмены
	//                      |	И МП_ОтчетТехнолога.Дата < ДОБАВИТЬКДАТЕ(&НачалоСмены, ДЕНЬ, 1)
	//                      |	И НЕ МП_ОтчетТехнолога.ПометкаУдаления
	//                      |	И МП_ОтчетТехнолога.ВидПроверяемойОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПроверяемыхТехнологом.Поставка)
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	МП_ОтчетТехнолога.Номенклатура,
	//                      |	МП_ОтчетТехнолога.ХарактеристикаНоменклатуры
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_Товары.Номенклатура,
	//                      |	ВТ_Товары.Характеристика,
	//                      |	ВТ_Товары.ДатаПоступления,
	//                      |	ВЫБОР
	//                      |		КОГДА ВТ_Отчеты.ОперацияПоТекущемуСкладу ЕСТЬ NULL 
	//                      |			ТОГДА ЛОЖЬ
	//                      |		ИНАЧЕ ИСТИНА
	//                      |	КОНЕЦ КАК ЕстьОперация,
	//                      |	ВЫБОР
	//                      |		КОГДА ВТ_Отчеты.ОперацияНеПоТекущемуСкладу ЕСТЬ NULL 
	//                      |			ТОГДА 2
	//                      |		КОГДА ВТ_Отчеты.ОперацияНеПоТекущемуСкладу.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиТехнологом.Отлично)
	//                      |			ТОГДА 0
	//                      |		ИНАЧЕ 1
	//                      |	КОНЕЦ КАК ЕстьОперацияПоДругомуСкладу,
	//                      |	ВТ_Отчеты.ОперацияПоТекущемуСкладу.Технолог КАК Технолог
	//                      |ИЗ
	//                      |	ВТ_Товары КАК ВТ_Товары
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отчеты КАК ВТ_Отчеты
	//                      |		ПО ВТ_Товары.Номенклатура = ВТ_Отчеты.Номенклатура
	//                      |			И ВТ_Товары.Характеристика = ВТ_Отчеты.ХарактеристикаНоменклатуры");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	                      |	ПриходныйОрдерСкладТовары.Характеристика,
	                      |	МАКСИМУМ(ПриходныйОрдерСкладТовары.Ссылка.ДатаВремяЗаездаМашины) КАК ДатаПоступления
	                      |ПОМЕСТИТЬ ВТ_Товары
	                      |ИЗ
	                      |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	                      |ГДЕ
	                      |	ПриходныйОрдерСкладТовары.Ссылка.Дата >= &НачалоСмены
	                      |	И ПриходныйОрдерСкладТовары.Ссылка.Дата < ДОБАВИТЬКДАТЕ(&НачалоСмены, ДЕНЬ, 1)
	                      |	И ПриходныйОрдерСкладТовары.Ссылка.Проведен
	                      |	И ПриходныйОрдерСкладТовары.Количество > 0
	                      |	И ПриходныйОрдерСкладТовары.Характеристика.Ссылка ЕСТЬ НЕ NULL 
	                      |	И ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &Склад
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	                      |	ПриходныйОрдерСкладТовары.Характеристика
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МП_ОтчетТехнолога.Номенклатура,
	                      |	МП_ОтчетТехнолога.ХарактеристикаНоменклатуры,
	                      |	МАКСИМУМ(ВЫБОР
	                      |			КОГДА МП_ОтчетТехнолога.Склад = &Склад
	                      |				ТОГДА МП_ОтчетТехнолога.Ссылка
	                      |		КОНЕЦ) КАК ОперацияПоТекущемуСкладу,
	                      |	МАКСИМУМ(ВЫБОР
	                      |			КОГДА МП_ОтчетТехнолога.Склад <> &Склад
	                      |				ТОГДА МП_ОтчетТехнолога.Ссылка
	                      |		КОНЕЦ) КАК ОперацияНеПоТекущемуСкладу
	                      |ПОМЕСТИТЬ ВТ_Отчеты
	                      |ИЗ
	                      |	Документ.МП_ОтчетТехнолога КАК МП_ОтчетТехнолога
	                      |ГДЕ
	                      |	МП_ОтчетТехнолога.Дата >= &НачалоСмены
	                      |	И МП_ОтчетТехнолога.Дата < ДОБАВИТЬКДАТЕ(&НачалоСмены, ДЕНЬ, 1)
	                      |	И НЕ МП_ОтчетТехнолога.ПометкаУдаления
	                      |	И МП_ОтчетТехнолога.ВидПроверяемойОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПроверяемыхТехнологом.Поставка)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	МП_ОтчетТехнолога.Номенклатура,
	                      |	МП_ОтчетТехнолога.ХарактеристикаНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	АК_ЗаданияНаДегустациюНочные.Номенклатура,
	                      |	АК_ЗаданияНаДегустациюНочные.Характеристика,
	                      |	ИСТИНА КАК НадоДегустировать
	                      |ПОМЕСТИТЬ ВТ_НочнаяДегустация
	                      |ИЗ
	                      |	РегистрСведений.АК_ЗаданияНаДегустациюНочные КАК АК_ЗаданияНаДегустациюНочные
	                      |ГДЕ
	                      |	АК_ЗаданияНаДегустациюНочные.ДатаДегустации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПозицииТребующиеВнимания.Номенклатура,
	                      |	ПозицииТребующиеВнимания.Характеристика
	                      |ПОМЕСТИТЬ втВнимание
	                      |ИЗ
	                      |	РегистрСведений.ПозицииТребующиеВнимания КАК ПозицииТребующиеВнимания
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПозицииТребующиеВнимания.Номенклатура,
	                      |	ПозицииТребующиеВнимания.Характеристика
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Товары.Номенклатура,
	                      |	ВТ_Товары.Характеристика,
	                      |	ВТ_Товары.ДатаПоступления,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_Отчеты.ОперацияПоТекущемуСкладу ЕСТЬ NULL
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК ЕстьОперация,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_Отчеты.ОперацияНеПоТекущемуСкладу ЕСТЬ NULL
	                      |			ТОГДА 2
	                      |		КОГДА ВТ_Отчеты.ОперацияНеПоТекущемуСкладу.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиТехнологом.Отлично)
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК ЕстьОперацияПоДругомуСкладу,
	                      |	ВТ_Отчеты.ОперацияПоТекущемуСкладу.Технолог КАК Технолог,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_НочнаяДегустация.НадоДегустировать ЕСТЬ NULL
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК НадоДегустировать,
	                      |	ВТ_Товары.Номенклатура.Наименование,
	                      |	ВТ_Товары.Характеристика.Наименование,
	                      |	ВТ_Товары.Номенклатура.Весовой,
	                      |	ВТ_Товары.Номенклатура.Складируемая,
	                      |	ВТ_Товары.Номенклатура.БезУпаковки,
	                      |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК ХарактеристикаВес,
	                      |	ВТ_Товары.Характеристика.СрокГодности КАК ХарактеристикаСрокГодности,
	                      |	ПРЕДСТАВЛЕНИЕ(ВТ_Товары.Характеристика.ТипСрокаГодности) КАК ХарактеристикаТипСрокаГодности,
	                      |	ВТ_Товары.Характеристика.Неактивная,
	                      |	ВТ_Товары.Номенклатура.Родитель,
	                      |	Выбор когда втВнимание.Характеристика есть null тогда Ложь Иначе Истина Конец КАК УсилитьКонтроль
	                      |ИЗ
	                      |	ВТ_Товары КАК ВТ_Товары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отчеты КАК ВТ_Отчеты
	                      |		ПО ВТ_Товары.Номенклатура = ВТ_Отчеты.Номенклатура
	                      |			И ВТ_Товары.Характеристика = ВТ_Отчеты.ХарактеристикаНоменклатуры
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НочнаяДегустация КАК ВТ_НочнаяДегустация
	                      |		ПО ВТ_Товары.Номенклатура = ВТ_НочнаяДегустация.Номенклатура
	                      |			И ВТ_Товары.Характеристика = ВТ_НочнаяДегустация.Характеристика
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                      |		ПО (ЗначенияСвойствОбъектов.Объект = ВТ_Товары.Характеристика)
	                      |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ втВнимание КАК втВнимание
	                      |		ПО ВТ_Товары.Номенклатура = втВнимание.Номенклатура
	                      |			И ВТ_Товары.Характеристика = втВнимание.Характеристика");
	// --- АК mirv  
						  
	//Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));                                                                                 
	Запрос.УстановитьПараметр("НачалоСмены", НачалоСмены);                                                                                 
	//Запрос.УстановитьПараметр("КодСклада", КодСклада);             
	Запрос.УстановитьПараметр("Склад", Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",КодСклада));  
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		
		// +++ АК mirv 29.08.2017 [ИП-0001239]
		// ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "ДатаПоступления,ЕстьОперация,ЕстьОперацияПоДругомуСкладу"); 
		//+++АК BELN 2017.12.27 ИП-00017582
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "ДатаПоступления,ЕстьОперация,ЕстьОперацияПоДругомуСкладу, НадоДегустировать");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "Номенклатура,Характеристика,Технолог, НоменклатураРодитель");
		Если ЗначениеЗаполнено(Выборка.НоменклатураРодитель) Тогда
			НоваяСтрока.НоменклатураРодитель  = Строка(Выборка.НоменклатураРодитель.УникальныйИдентификатор());
		КонецЕсли; 
		 //---АК BELN 2017.12.27 
		// --- АК mirv  
		
		НоваяСтрока.Номенклатура  = Строка(Выборка.Номенклатура.УникальныйИдентификатор());
		НоваяСтрока.Характеристика = Строка(Выборка.Характеристика.УникальныйИдентификатор());
		
		Если ЗначениеЗаполнено(Выборка.Технолог) Тогда
			НоваяСтрока.Технолог = Строка(Выборка.Технолог);
			НоваяСтрока.ТехнологИдентификатор = Строка(Выборка.Технолог.УникальныйИдентификатор());
		КонецЕсли; 
		
	КонецЦикла;  
	////+++АК BELN 2018.03.13 ИП-00017800      
	//ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//ADOСоединение.ConnectionTimeOut = 0;
	//ADOСоединение.CommandTimeOut    = 0;
	//СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	////СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	//ADOСоединение.ConnectionString  = СтрПодкл;
	//ADOСоединение.Open();
	//Если НЕ ADOСоединение.State() = 0 Тогда
	// 
	//	ТекДата=?(Час(ТекущаяДата())>=18,НачалоДня(ТекущаяДата()),НачалоДня(ТекущаяДата())-24*60*60);
	//	СтрЗапрос =	
	//	"EXEC   SMS_REPL.dbo.[sp_List_email_Verdict_Send]
	//    |@Verdict = N'Усилить контроль',
	//    |@isReport = 0";

	//	
	//	
	//	rs = ADOСоединение.Execute(СтрЗапрос);
	//	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
	//		rs=rs.NextRecordSet();
	//	КонецЦикла;
	//	
	//	ТЗВердикты=Новый ТаблицаЗначений;
	//	ТЗВердикты.Колонки.Добавить("id_tov",Новый ОписаниеТипов("Число"));
	//	ТЗВердикты.Колонки.Добавить("id_kontr",Новый ОписаниеТипов("Число"));
	//	
	//	Попытка
	//		rs.MoveFirst();
	//		//
	//		Сч=0;
	//		Пока НЕ rs.EOF() Цикл
	//			Сч=Сч+1;
	//			Если Сч=100 Тогда
	//				//прервать;
	//			КонецЕсли;
	//			Если Rs.Fields("Дата").Value=ТекДата-2*24*60*60 И Час(Rs.Fields("Время").Value)>=18
	//				ИЛИ Rs.Fields("Дата").Value=ТекДата-24*60*60 ИЛИ Rs.Fields("Дата").Value=ТекДата И Час(Rs.Fields("Время").Value)<18 Тогда
	//			
	//				НовСтр=ТЗВердикты.Добавить();
	//				НовСтр.id_tov=Rs.Fields("id_tov").Value;
	//				НовСтр.id_kontr=Rs.Fields("id_kontr").Value;
	//				
	//			
	//			КонецЕсли; 
	//			rs.MoveNext();
	//		КонецЦикла;
	//	Исключение
	//	КонецПопытки;
	//	Для каждого Стр Из ТаблицаРезультат Цикл
	//		Если ТЗВердикты.НайтиСтроки(Новый Структура("id_tov,id_kontr",Стр.id_tov,Стр.id_kontr)).Количество() Тогда
	//			Стр.УсилитьКонтроль=Истина;
	//		КонецЕсли;
	//	КонецЦикла; 
	//КонецЕсли;
	////---АК BELN 2018.03.13 
	

	СтруктураОтвет = Новый Структура("Результат", ТаблицаРезультат);
	
    //	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 


//Функция ЗаписатьПринятыеТовары(ДанныеМобильногоПриложения) Экспорт

//	СтруктураДанныхМП = ДанныеМобильногоПриложения.Получить();

//	ДокументСсылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураДанныхМП.ШтрихкодДокумента);

//	Если НЕ ЗначениеЗаполнено(ДокументСсылка)  Тогда
//		ОписаниеОшибки = "Не найден документ в центральной базе!";

//		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
//		
//		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
//	КонецЕсли; 

//	//
//	//Объект = ДокументСсылка.ПолучитьОбъект();

//	//ТоварыВДокументе = Объект.Товары.Выгрузить();
//	//Объект.Товары.Очистить();

//	//Для Каждого Строка Из СтруктураДанныхМП.Товары Цикл

//	//	//
//	//	Идентификатор = Новый УникальныйИдентификатор(Строка.Номенклатура);
//	//	Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
//	//	Если НЕ ЗначениеЗаполнено(Номенклатура)  Тогда
//	//		ОписаниеОшибки = "Не найдена номенклатура в центральной базе!";
//	//		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
//	//		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
//	//	КонецЕсли; 

//	//	//
//	//	Идентификатор = Новый УникальныйИдентификатор(Строка.Характеристика );
//	//	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
//	//	Если НЕ ЗначениеЗаполнено(Характеристика)  Тогда
//	//		ОписаниеОшибки = "Не найдена характеристика номенклатуры в центральной базе!";
//	//		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
//	//		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
//	//	КонецЕсли; 

//	//	 //
//	//	ТекДанные = Объект.Товары.Добавить();

//	//	СтрокиНашли = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, Строка.ДатаПроизводства));
//	//	Если СтрокиНашли.Количество() = 0 Тогда
//	//		СтрокиНашли = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
//	//	КонецЕсли;

//	//	Если СтрокиНашли.Количество() > 0 Тогда
//	//		ЗаполнитьЗначенияСвойств(ТекДанные, СтрокиНашли[0]);
//	//		
//	//	Иначе
//	//		ТекДанные.Номенклатура = Номенклатура;
//	//		ТекДанные.Характеристика = Характеристика;
//	//		
//	//		Запрос = Новый Запрос("ВЫБРАТЬ
//	//							  			|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
//	//							  			|ИЗ
//	//							  			|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
//	//							  			|ГДЕ
//	//							  			|	ЕдиницыИзмерения.Владелец = &Номенклатура
//	//							  			|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
//	//							  			|	И НЕ ЕдиницыИзмерения.ПометкаУдаления");

//	//		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	//		Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, Номенклатура.БазоваяЕдиницаИзмерения);
//	//
//	//		Выборка = Запрос.Выполнить().Выбрать();
//	//		Если Выборка.Следующий() Тогда
//	//			ТекДанные.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
//	//		КонецЕсли;

//	//	КонецЕсли;	
//	//	ТекДанные.ДатаПроизводства = Строка.ДатаПроизводства;
//	//	ТекДанные.Количество = Строка.КоличествоПринятое;
//	//	ТекДанные.КоличествоКоробок = Строка.КоличествоКоробокПринятое;

//	//КонецЦикла; 
//	
//	СтруктураОтвет = Новый Структура("Результат, ДокументЗаписан, ОписаниеОшибки",Истина,Ложь,"");
//	Провели = Ложь;
//	ТолькоЗаписали = Ложь;

//	ОписаниеОшибки = "";
//	Попытка
//		ДокОбъект = ДокументСсылка.ПолучитьОбъект();
//		ДокОбъект.ПриемкаТерминаломЗакончена = Истина;
//		Если СтруктураДанныхМП.Свойство("Кладовщик") Тогда
//			Идентификатор = Новый УникальныйИдентификатор(СтруктураДанныхМП.Кладовщик);
//			Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
//			Если ЗначениеЗаполнено(Кладовщик)  Тогда
//				ДокОбъект.Кладовщик = Кладовщик;
//			КонецЕсли;
//		КонецЕсли; 
//		//ДокОбъект.СборкаТерминаломЗакончена = Истина;
//		//ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
//		//ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
//		//ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
//		Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
//			СтрокаТаб.Количество = 0;
//			СтрокаТаб.КоличествоКоробок = 0;
//		КонецЦикла;	
//		Для Каждого СтрокаТаб Из СтруктураДанныхМП.Товары Цикл
//			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
//			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
//			СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
//			Если СтрокиВДоке.Количество() > 0 Тогда
//				СтрокаВДоке = СтрокиВДоке[0];
//			Иначе
//				СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
//				Если СтрокиВДоке.Количество() > 0 Тогда
//					СтрокаВДокеСтарая = СтрокиВДоке[0];
//					СтрокаВДоке = ДокОбъект.Товары.Добавить();
//					ЗаполнитьЗначенияСвойств(СтрокаВДоке,СтрокаВДокеСтарая,,"КоличествоПаллет,Количество,КоличествоКоробок");
//					СтрокаВДоке.Номенклатура = Номенклатура;
//					СтрокаВДоке.Характеристика = Характеристика;
//					СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
//					СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
//				Иначе	
//					СтрокаВДоке = ДокОбъект.Товары.Добавить();
//					СтрокаВДоке.Номенклатура = Номенклатура;
//					СтрокаВДоке.Характеристика = Характеристика;
//					СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
//					СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
//				КонецЕсли;	
//			КонецЕсли;	
//			СтрокаВДоке.Количество = СтрокаВДоке.Количество + СтрокаТаб.КоличествоПринятое;
//			СтрокаВДоке.КоличествоКоробок = СтрокаВДоке.КоличествоКоробок+СтрокаТаб.КоличествоКоробокПринятое;
//		КонецЦикла;	
//		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
//		Провели = Истина;
//	Исключение
//		//СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
//		//			+ ОписаниеОшибки();
//		//СтруктураОтвет.Результат = Ложь;
//		ОписаниеОшибки = ОписаниеОшибки();
//	КонецПопытки;
//	
//	
//	
//	


//	//Объект.ПриемкаТерминаломЗакончена = Истина;
//	//Если СтруктураДанныхМП.Свойство("Кладовщик") Тогда
//	//	Идентификатор = Новый УникальныйИдентификатор(СтруктураДанныхМП.Кладовщик);
//	//	Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
//	//	Если ЗначениеЗаполнено(Кладовщик)  Тогда
//	//		Объект.Кладовщик = Кладовщик;
//	//	КонецЕсли;
//	//КонецЕсли; 	//
//	////
//	//Провели = Ложь;
//	//ТолькоЗаписали = Ложь;

//	//ОписаниеОшибки = "";
//	//
//	//
//	//Попытка 
//	//	Объект.Записать(РежимЗаписиДокумента.Проведение);
//	//	Провели = Истина;
//	//Исключение
//	//	ОписаниеОшибки = ОписаниеОшибки();
//	//КонецПопытки; 

//	
//	///////////////////////////////////////////////
//	Если ЗначениеЗаполнено(ОписаниеОшибки) И НЕ ДокОбъект.Проведен Тогда
//		Попытка 
//			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//			ТолькоЗаписали = Истина;
//		Исключение
//			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
//		КонецПопытки; 
//	КонецЕсли; 
//	
//	СтруктураОтвет = Новый Структура("Результат, ДокументЗаписан, ОписаниеОшибки", Провели, ТолькоЗаписали, ОписаниеОшибки);

//	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	

//КонецФункции 




Функция ЗаписатьПринятыеТовары(ДанныеМобильногоПриложения) Экспорт

	СтруктураДанныхМП = ДанныеМобильногоПриложения.Получить();

	Попытка 
		Если СтруктураДанныхМП.Свойство("ЖурналОбмена") Тогда
			УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураДанныхМП.КодУстройства); 
			ЗагрузитьЖурналОбмена(УзелОбмена, СтруктураДанныхМП.ЖурналОбмена);
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	
	ДокументСсылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураДанныхМП.ШтрихкодДокумента);

	Если НЕ ЗначениеЗаполнено(ДокументСсылка)  Тогда
		ОписаниеОшибки = "Не найден документ в центральной базе!";

		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

	//
	Объект = ДокументСсылка.ПолучитьОбъект();

	ТоварыВДокументе = Объект.Товары.Выгрузить();
	Объект.Товары.Очистить();

	Для Каждого Строка Из СтруктураДанныхМП.Товары Цикл

		//
		Идентификатор = Новый УникальныйИдентификатор(Строка.Номенклатура);
		Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		Если НЕ ЗначениеЗаполнено(Номенклатура)  Тогда
			ОписаниеОшибки = "Не найдена номенклатура в центральной базе!";
			СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
		КонецЕсли; 

		//
		Идентификатор = Новый УникальныйИдентификатор(Строка.Характеристика );
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
		Если НЕ ЗначениеЗаполнено(Характеристика)  Тогда
			ОписаниеОшибки = "Не найдена характеристика номенклатуры в центральной базе!";
			СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
		КонецЕсли; 

		 //
		ТекДанные = Объект.Товары.Добавить();

		СтрокиНашли = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, Строка.ДатаПроизводства));
		Если СтрокиНашли.Количество() = 0 Тогда
			СтрокиНашли = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
		КонецЕсли;

		Если СтрокиНашли.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекДанные, СтрокиНашли[0]);
			
		Иначе
			ТекДанные.Номенклатура = Номенклатура;
			ТекДанные.Характеристика = Характеристика;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
								  			|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
								  			|ИЗ
								  			|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
								  			|ГДЕ
								  			|	ЕдиницыИзмерения.Владелец = &Номенклатура
								  			|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
								  			|	И НЕ ЕдиницыИзмерения.ПометкаУдаления");

			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, Номенклатура.БазоваяЕдиницаИзмерения);
	
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекДанные.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
			КонецЕсли;

		КонецЕсли;	
		ТекДанные.ДатаПроизводства = Строка.ДатаПроизводства;
		ТекДанные.Количество = Строка.КоличествоПринятое;
		ТекДанные.КоличествоКоробок = Строка.КоличествоКоробокПринятое;

	КонецЦикла; 
	
	//СтруктураОтвет = Новый Структура("Результат, ДокументЗаписан, ОписаниеОшибки",Истина,Ложь,"");
	//Попытка
	//	ДокОбъект = ДокументСсылка.ПолучитьОбъект();
	//	ДокОбъект.ПриемкаТерминаломЗакончена = Истина;
	//	Если СтруктураДанныхМП.Свойство("Кладовщик") Тогда
	//		Идентификатор = Новый УникальныйИдентификатор(СтруктураДанныхМП.Кладовщик);
	//		Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
	//		Если ЗначениеЗаполнено(Кладовщик)  Тогда
	//			ДокОбъект.Кладовщик = Кладовщик;
	//		КонецЕсли;
	//	КонецЕсли; 
	//	//ДокОбъект.СборкаТерминаломЗакончена = Истина;
	//	//ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
	//	//ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
	//	//ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	//	Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
	//		СтрокаТаб.Количество = 0;
	//		СтрокаТаб.КоличествоКоробок = 0;
	//	КонецЦикла;	
	//	Для Каждого СтрокаТаб Из СтруктураДанныхМП.Товары Цикл
	//		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
	//		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
	//		СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
	//		Если СтрокиВДоке.Количество() > 0 Тогда
	//			СтрокаВДоке = СтрокиВДоке[0];
	//		Иначе
	//			СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
	//			Если СтрокиВДоке.Количество() > 0 Тогда
	//				СтрокаВДоке = СтрокиВДоке[0];
	//			Иначе	
	//				СтрокаВДоке = ДокОбъект.Товары.Добавить();
	//				СтрокаВДоке.Номенклатура = Номенклатура;
	//				СтрокаВДоке.Характеристика = Характеристика;
	//				СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
	//				СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	//			КонецЕсли;	
	//		КонецЕсли;	
	//		СтрокаВДоке.Количество = СтрокаВДоке.Количество + СтрокаТаб.КоличествоПринятое;
	//		СтрокаВДоке.КоличествоКоробок = СтрокаВДоке.КоличествоКоробок+СтрокаТаб.КоличествоКоробокПринятое;
	//	КонецЦикла;	
	//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//Исключение
	//	СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
	//				+ ОписаниеОшибки();
	//	СтруктураОтвет.Результат = Ложь;
	//КонецПопытки;
	


	Объект.ПриемкаТерминаломЗакончена = Истина;
	Если СтруктураДанныхМП.Свойство("Кладовщик") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтруктураДанныхМП.Кладовщик);
		Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
		Если ЗначениеЗаполнено(Кладовщик)  Тогда
			Объект.Кладовщик = Кладовщик;
		КонецЕсли;
	КонецЕсли; 	//
	//
	Провели = Ложь;
	ТолькоЗаписали = Ложь;

	ОписаниеОшибки = "";
	
	Если СтруктураДанныхМП.Свойство("ТЗКоробки") Тогда
		ТЗКоробки=СтруктураДанныхМП.ТЗКоробки.Получить();
		Для каждого Стр Из ТЗКоробки Цикл
			Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Мен,Стр);
			Идентификатор = Новый УникальныйИдентификатор(Стр.НоменклатураИД);
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		    Мен.Номенклатура=Номенклатура;
			Мен.Документ=ДокументСсылка;
			Мен.ДатаНачалаРаботыПоДокументу=СтруктураДанныхМП.ДатаНачалаРаботыПоДокументу;
			Если ТЗКоробки.Колонки.Найти("НомерПопытки")<>Неопределено Тогда
				Мен.НомерПопытки=Стр.НомерПопытки;
			КонецЕсли; 
			Если ТЗКоробки.Колонки.Найти("ДатаНачалаРаботыПоДокументу")<>Неопределено Тогда
				Мен.ДатаНачалаРаботыПоДокументу=Стр.ДатаНачалаРаботыПоДокументу;
			КонецЕсли; 
			
			Мен.Записать();
		КонецЦикла; 
	КонецЕсли; 	//
	Попытка 
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		Провели = Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки; 

	Если ЗначениеЗаполнено(ОписаниеОшибки) И НЕ Объект.Проведен Тогда
		Попытка 
			Объект.Записать(РежимЗаписиДокумента.Запись);
			ТолькоЗаписали = Истина;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		КонецПопытки; 
	КонецЕсли; 
	
	СтруктураОтвет = Новый Структура("Результат, ДокументЗаписан, ОписаниеОшибки", Провели, ТолькоЗаписали, ОписаниеОшибки);

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	

КонецФункции 

Функция ВыполнитьАутентификациюКладовщика(КодДоступа) Экспорт

	КодФизлицаЧисло = Число(Лев(КодДоступа, СтрДлина(КодДоступа)-2));

    КодФизлица = Формат(КодФизлицаЧисло, "ЧЦ=10; ЧВН=; ЧГ=");

	ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФизлица );

	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		СтруктураОтвет = Новый Структура("Идентификатор", Неопределено);
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

	КонтрольнаяСумма = 0;

	Для Сч = 1 По СтрДлина(КодФизлица) Цикл
		КонтрольнаяСумма = КонтрольнаяСумма  + Сред(КодФизлица, Сч, 1);
	КонецЦикла;

	Если Прав(Формат(КонтрольнаяСумма, "ЧЦ=3; ЧВН=; ЧГ="), 2) <> Прав(КодДоступа, 2) Тогда
		СтруктураОтвет = Новый Структура("Идентификатор", Неопределено);
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 

	СтруктураОтвет = Новый Структура("Идентификатор, Наименование, ЭтоКладовщик,КодСклада,КладовщикНаОтгрузке,КладовщикНаДебаркадере,КладовщикРекламы,Ревизор",
	Строка(Физлицо.УникальныйИдентификатор()), ФизЛицо.Наименование,Ложь,"",Ложь,Ложь,Ложь,Ложь);
	
	СтруктураОтвет.Вставить("Грузчик", Ложь);//+++ KOPA 17.12.2017 [ИП-00017470]
	
	ЭтоКладовщик=Ложь;
	КладовщикНаОтгрузке=Ложь;
	КладовщикНаДебаркадере=Ложь;
	КладовщикРекламы=Ложь;
	Ревизор=Ложь;
	Грузчик = Ложь;//+++ KOPA 17.12.2017 [ИП-00017470]
	
	КодСклада="";
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборщикиНаСкладах.ЭтоКладовщик,
			|	СборщикиНаСкладах.Склад,
			|	СборщикиНаСкладах.Склад.Код,
			|	СборщикиНаСкладах.КладовщикНаОтгрузке,
			|	СборщикиНаСкладах.КладовщикНаДебаркадере,
			|	СборщикиНаСкладах.КладовщикРекламы,
			|	СборщикиНаСкладах.Ревизор,
			|	СборщикиНаСкладах.ЭтоГрузчик
			|ИЗ
			|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
			|ГДЕ
			|	СборщикиНаСкладах.Сборщик = &Сборщик";

		Запрос.УстановитьПараметр("Сборщик", ФизЛицо);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭтоКладовщик=?(ЭтоКладовщик=Истина,Истина,ВыборкаДетальныеЗаписи.ЭтоКладовщик);
			КладовщикНаОтгрузке=?(КладовщикНаОтгрузке=Истина,Истина,ВыборкаДетальныеЗаписи.КладовщикНаОтгрузке);
			КладовщикНаДебаркадере=?(КладовщикНаДебаркадере=Истина,Истина,ВыборкаДетальныеЗаписи.КладовщикНаДебаркадере);
			КладовщикРекламы=?(КладовщикРекламы=Истина,Истина,ВыборкаДетальныеЗаписи.КладовщикРекламы);
			Ревизор=?(Ревизор=Истина,Истина,ВыборкаДетальныеЗаписи.Ревизор);
//+++ KOPA 17.12.2017 [ИП-00017470]
			Грузчик = ВыборкаДетальныеЗаписи.ЭтоГрузчик;
//--- KOPA			
			КодСклада=?(ЭтоКладовщик или КладовщикНаОтгрузке или КладовщикНаДебаркадере,ВыборкаДетальныеЗаписи.СкладКод,КодСклада);
		КонецЦикла;
	КонецЕсли; 

	СтруктураОтвет.ЭтоКладовщик=ЭтоКладовщик;
	СтруктураОтвет.КодСклада=КодСклада;
	
	СтруктураОтвет.КладовщикНаОтгрузке=КладовщикНаОтгрузке;
	СтруктураОтвет.КладовщикНаДебаркадере=КладовщикНаДебаркадере;
	СтруктураОтвет.КладовщикРекламы=КладовщикРекламы;
	СтруктураОтвет.Ревизор=Ревизор;
//+++ KOPA 17.12.2017 [ИП-00017470]
	СтруктураОтвет.Грузчик = Грузчик;
//--- KOPA		
	
	//+++АК SHEP 20160601
	РолиПользователя = МеханизмОбменаСообщениями.ПолучитьРолиПользователяИлиФизЛица(ФизЛицо);
	РолиПользователяДляОтвета = ?(РолиПользователя = Неопределено, Неопределено, Новый Массив);
	Для Каждого РольПользователя Из РолиПользователя Цикл
		РолиПользователяДляОтвета.Добавить(РольПользователя.УникальныйИдентификатор());
	КонецЦикла;
	СтруктураОтвет.Вставить("РолиПользователя", РолиПользователяДляОтвета);
	//---АК SHEP 20160601

	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));

КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПОДПИСКИ НА СОБЫТИЯ

// Процедура-обработчик события ПриЗаписи документа для механизма регистрации объектов на узлах.
//
Процедура ОбменМобильноеПриложениеПриЗаписиДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			//Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя")
			//   И Источник.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
			//   И (Источник.СостояниеЗаказа.СтатусЗаказа = Перечисления.СтатусыЗаказов.ВРаботе
			// ИЛИ Источник.СостояниеЗаказа.СтатусЗаказа = Перечисления.СтатусыЗаказов.Выполнен) Тогда
			//	НужноВыгружать = Истина;
			//	Для каждого ТекСтрока Из Источник.Запасы Цикл
			//		Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			//			НужноВыгружать = Ложь;
			//			Прервать;
			//		КонецЕсли;
			//	КонецЦикла;
			//	Если НужноВыгружать Тогда
			//		МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбменМобильноеПриложениеПриЗаписиДокумента()

// Процедура-обработчик события ПриЗаписи регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура ОбменМобильноеПриложениеПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	//МассивУзловДляРегистрации = Новый Массив;
	//
	//НужноВыполнятьРегистрацию = Ложь;
	//
	//Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
	//		НужноВыполнятьРегистрацию = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если НужноВыполнятьРегистрацию Тогда
		//Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОплатаСчетовИЗаказов") Тогда
		//	Запрос = Новый Запрос(
		//		"ВЫБРАТЬ
		//		|	ОплатаСчетовИЗаказов.СчетНаОплату КАК Заказ,
		//		|	ИСТИНА КАК Регистрировать
		//		|ИЗ
		//		|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
		//		|ГДЕ
		//		|	ОплатаСчетовИЗаказов.Регистратор = &Регистратор
		//		|	И ОплатаСчетовИЗаказов.СчетНаОплату.ВидОперации = &ВидОперации
		//		|
		//		|СГРУППИРОВАТЬ ПО
		//		|	ОплатаСчетовИЗаказов.СчетНаОплату"
		//	);
		//ИначеЕсли ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		//	Запрос = Новый Запрос(
		//		"ВЫБРАТЬ
		//		|	ЗаказыПокупателей.ЗаказПокупателя КАК Заказ,
		//		|	ИСТИНА КАК Регистрировать
		//		|ИЗ
		//		|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
		//		|ГДЕ
		//		|	ЗаказыПокупателей.Регистратор = &Регистратор
		//		|	И ЗаказыПокупателей.ЗаказПокупателя.ВидОперации = &ВидОперации
		//		|
		//		|СГРУППИРОВАТЬ ПО
		//		|	ЗаказыПокупателей.ЗаказПокупателя"
		//	);
		//КонецЕсли;
		//Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
		//Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
		//ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
		//Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		//	ОбъектЗаказ = ТекСтрока.Заказ.ПолучитьОбъект();
		//	Для каждого СтрокаЗаказа Из ОбъектЗаказ.Запасы Цикл
		//		Если СтрокаЗаказа.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		//			ТекСтрока.Регистрировать = Ложь;
		//			Прервать;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;
	//КонецЕсли;
	
	//ВыгрузкаНаборЗаписей = Источник.Выгрузить();
	//
	//Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
	//		Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
	//			Если ЗначениеЗаполнено(ТекСтрока.Заказ)
	//			   И ТекСтрока.Регистрировать Тогда
	//				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если МассивУзловДляРегистрации.Количество() > 0 Тогда
	//	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
	//		Если ЗначениеЗаполнено(ТекСтрока.Заказ)
	//		   И ТекСтрока.Регистрировать Тогда
	//			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, ТекСтрока.Заказ);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбменМобильноеПриложениеПередЗаписьюРегистра()

// Процедура-обработчик события ПриЗаписи ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменМобильноеПриложениеПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			//Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура")
			//   И (Источник.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			//   ИЛИ Источник.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
			//	МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура удаления существующих движений документа при перепроведении (отмене проведения).
//
Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры // УдалитьДвиженияУДокумента()

// Функция определяет наличие движений документа.
//
Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьНаличиеДвиженийПоДокументу()

// Процедура очищает коллекцию движений документа.
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

// Процедура удаляет пакеты данных из очереди сообщений для передачи мобильному клиенту.
//
Процедура ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(МобильныйКлиент, НомерСообщения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И (&НомерСообщения = НЕОПРЕДЕЛЕНО
	|			ИЛИ ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения <= &НомерСообщения)";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаСообщений = Результат.Выбрать();
	Пока ВыборкаСообщений.Следующий() Цикл
		
		НаборЗаписей.Отбор.МобильныйКлиент.Установить(МобильныйКлиент);
		НаборЗаписей.Отбор.НомерСообщения.Установить(ВыборкаСообщений.НомерСообщения);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом()

// Процедура обнуляет номер принятого и отправленного сообщений на узле плана обмена.
//
Процедура ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.НомерПринятого = 0;
	УзелОбменаОбъект.НомерОтправленного = 0;
	УзелОбменаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);

	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "СЧЕТЧИКИ УЗЛА СБРОШЕНЫ");		
	
КонецПроцедуры // ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена()

Функция ПолучитьИмяЗначенияПеречисления(Ссылка)
	
	ИмяПеречисления = Ссылка.Метаданные().Имя;
	
	Если Ссылка.Пустая() Тогда
		Возврат "";
	КонецЕсли;
	
	Индекс = Перечисления[ИмяПеречисления].Индекс(Ссылка);
	
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
	
КонецФункции

Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, Имя)
	
	Попытка
		Возврат Перечисления[ИмяПеречисления][Имя];
	Исключение
		Возврат Перечисления[ИмяПеречисления].ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

Функция ЭтоДокумент(ОбъектМетаданных)
	
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

Процедура ДобавитьЗаписьВЖурналОбмена(Узел, Событие, НомерОтправленного = 0, НомерПринятого = 0) Экспорт
	

	Попытка 

		Если НЕ Узел.ВестиЛогОбмена Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЕСТЬNULL(МАКСИМУМ(ЖурналОбмена.НомерЗаписи), 0) КАК НомерЗаписи
		                      |ИЗ
		                      |	РегистрСведений.МП_ЖурналОбмена КАК ЖурналОбмена
		                      |ГДЕ
		                      |	ЖурналОбмена.МобильныйКлиент = &МобильныйКлиент
		                      |	И ЖурналОбмена.НаСервере");

		Запрос.УстановитьПараметр("МобильныйКлиент", Узел);
							  
		Выборка = Запрос.Выполнить().Выбрать(); 						  
		
		Выборка.Следующий();
		
		НомерЗаписи = Выборка.НомерЗаписи + 1;
		
		МЗ = РегистрыСведений.МП_ЖурналОбмена.СоздатьМенеджерЗаписи();

		МЗ.МобильныйКлиент = Узел;
		МЗ.НаСервере = Истина;
		МЗ.НомерЗаписи = НомерЗаписи;
		МЗ.Период = ТекущаяДата();
		МЗ.НомерОтправленного = НомерОтправленного;
		МЗ.НомерПринятого = НомерПринятого;	
		МЗ.Событие = Событие;
		
		МЗ.Записать();
		
	Исключение
	КонецПопытки; 
		
КонецПроцедуры 

