

Процедура База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения = "")  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	//тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	Попытка
		RecordSet.Close();
	Исключение
	КонецПопытки;	
		
КонецПроцедуры

Функция База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения = "")  
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		
		Если ТипЗнч(допПараметры) = Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(Command, допПараметры);
		КонецЕсли;			
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		Command.CommandText = ТекстЗапроса;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
КонецФункции

Функция База_Подключение(СтрокаПодключения)	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		Catalog = Новый COMОбъект("ADOX.Catalog");			
		
		CurrentConnection.ConnectionTimeOut = 300;
		CurrentConnection.CommandTimeOut = 300;
		
		Catalog.ActiveConnection = СтрокаПодключения;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
Функция База_РезульататЗапросВТаблицуЗначений(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
		NameFiled = RecordSet.Fields.Item(НомерКолонки).Name;
		NameFiled = СтрЗаменить(NameFiled,"$","_");
		тз.Колонки.Добавить(NameFiled,,RecordSet.Fields.Item(НомерКолонки).Name, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

Функция База_РезульататЗапросВТаблицуЗначенийПервыеДва(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	тз.Колонки.Добавить("DateTimeStamp");
		
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			
			Если тз.Количество() = 2 Тогда
				Возврат ТЗ;	
			КонецЕсли;	
			
			СтрокаТаблицыЗначений = тз.Добавить();
			СтрокаТаблицыЗначений.DateTimeStamp = RecordSet.Fields("DateTimeStamp").Value;
			
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Закрываем датасет возвращаемй База_ВыполнитьЗапрос();
//
Процедура База_ЗакрытьЗапрос(RecordSet) 
	Если ТипЗнч(RecordSet) = Тип("COMОбъект") тогда
		RecordSet.Close();
	КонецЕсли;		
КонецПроцедуры


Процедура ЗаполнитьОтборы(ТаблицаОтборов, ТекОтборы, ТаблицаЭлементов)
	
	ТаблицаОтборов.Элементы.Очистить();
	
	Если ТекОтборы <> Неопределено Тогда
		
		Для каждого ТекСтр Из ТекОтборы.Элементы Цикл
					
			
			Для каждого ТекЭлКоллекции Из ТаблицаЭлементов Цикл
				
				ЛевоеЗнач = Строка(ТекЭлКоллекции.Поле);
				
				ПравоеЗнач = Строка(ТекСтр.ЛевоеЗначение);
				ПерваяТочка = Найти(ПравоеЗнач, ".");
				Если ПерваяТочка <> 0 Тогда 
					ПравоеЗнач = Лев(ПравоеЗнач, ПерваяТочка-1);	
				КонецЕсли;	
				
				Если ЛевоеЗнач = ПравоеЗнач Тогда
					
					НовыйОтбор = ТаблицаОтборов.Элементы.Добавить(ТипЗнч(ТекСтр));
					ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекСтр);
					Попытка
						Если ТекСтр.Элементы.Количество() > 0 Тогда
							ДобавитьПодчинённыеОтборы(ТекСтр, НовыйОтбор);
						КонецЕсли;	
					Исключение
						//Сообщить("вапвапвапвап!");
					КонецПопытки;
					
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьПодчинённыеОтборы(ТекСтрРодитель, НовыйОтборРодитель)
	
	Для каждого ТекСтр Из ТекСтрРодитель.Элементы Цикл
	    		
	    НовыйОтбор = НовыйОтборРодитель.Элементы.Добавить(ТипЗнч(ТекСтр));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекСтр);
		
		Попытка
		Если ТекСтр.Элементы.Количество() > 0 Тогда
			ДобавитьПодчинённыеОтборы(ТекСтр, НовыйОтбор);	
		КонецЕсли;	
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

//+++АК SHEP 2018.06.14 ИП-00018827: меняем [Loyalty].[dbo].[TransactionHistory] на процедуры
Процедура ТабЧекиСортироватьПоПриоритету(Таб_ЧЕКИ)
	
	Таб_ЧЕКИ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	лкСтрОтбораПоКартам = "";
	Для Каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
		лкСтрОтбораПоКартам = лкСтрОтбораПоКартам + ?(ПустаяСтрока(лкСтрОтбораПоКартам), "", ",") + текСтрТЗЧеков.НомерКарты;
	КонецЦикла;
	
	ТекстЗапросаSQL = "
		|EXEC FOR1C_BC_2_Max_Date  
		|	@BC_Numbers = " + ВнешниеДанные.ФорматПоля(лкСтрОтбораПоКартам) + ",
		|	@DateStart  = " + ВнешниеДанные.ФорматПоля(Дата(2012,1,1), Истина) + ",
		|	@DateEnd    = " + ВнешниеДанные.ФорматПоля(Дата(2100,1,1), Истина);
	
	Попытка
		
		Command = Новый COMОбъект("ADODB.Command");
		
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
						
		Command.CommandText = ТекстЗапросаSQL;			
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
		ТЗ_Фин = База_РезульататЗапросВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		
		//ТабПриоритетов = Таб_ЧЕКИ.Скопировать(,"ДатаПоЧеку,НомерКарты");
		//ТабПриоритетов.Свернуть("ДатаПоЧеку,НомерКарты","");
		//ТабПриоритетов.Сортировать("ДатаПоЧеку");
		
		лкТабСортировки = Новый ТаблицаЗначений;
		лкТабСортировки.Колонки.Добавить("ДатаПоЧеку", Новый ОписаниеТипов("Дата"));
		
		РезСоотв = Новый Соответствие;
		лкСписокОбработанных = Новый СписокЗначений;
		Для каждого лкТекСтрТаб Из ТЗ_Фин Цикл
			
			лкТабСортировки.Очистить();
			
			ТекНомерКарты = лкТекСтрТаб.BC_Number;
			Если лкСписокОбработанных.НайтиПоЗначению(ТекНомерКарты) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			текОтборНом = Новый Структура;
			текОтборНом.Вставить("Number", ТекНомерКарты);
			массНайден = ТЗ_Фин.НайтиСтроки(текОтборНом);
			
			Если массНайден.Количество() = 1 Тогда
				РезСоотв.Вставить(ТекНомерКарты, 0);
			ИначеЕсли массНайден.Количество() > 1 Тогда
				
				Для каждого ТекэлМасс Из массНайден Цикл
					
					новСтрСортировки = лкТабСортировки.Добавить();
					новСтрСортировки.ДатаПоЧеку = ТекэлМасс.CloseDate;
					
				КонецЦикла;
				
				лкТабСортировки.Сортировать("ДатаПоЧеку УБЫВ");
				СекундРазница = лкТабСортировки[0].ДатаПоЧеку - лкТабСортировки[1].ДатаПоЧеку;
				РезСоотв.Вставить(СокрЛП(ТекНомерКарты), СекундРазница);
				
			КонецЕсли;	
			
			лкСписокОбработанных.Добавить(ТекНомерКарты);
		КонецЦикла; 	
		
		Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
			
			текСтрТЗЧеков.Приоритет = РезСоотв[текСтрТЗЧеков.НомерКарты];
			
		КонецЦикла;
		
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Таб_ЧЕКИ.Сортировать("Приоритет");
	
КонецПроцедуры

Функция ПостроитьТаблицуРассылки(ПараметрКоманды, РассылкаТелеграмм = Неопределено, ТекстЗапросаТелеграмм = Неопределено, ОсновнойБот = Ложь, ТестовыйБот = Ложь, МП = Ложь) Экспорт
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	// ПОЛУЧАЕМ ПОКУПЕТЕЛЕЙ
	Если ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.ПокупателиВкусвилл4РазаНеМенее7000 Тогда
		//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		//	
		//
		//ТекстЗапроса = "select Карта as НомерКарты from Reports.dbo.Get_Best_Customer(" + ВнешниеДанные.ФорматПоля(?(ЗначениеЗаполнено(ПараметрКоманды.МаксКол), ПараметрКоманды.МаксКол, 1000)) + ")";
		//
		//rs = ADOСоединение.Execute(ТекстЗапроса);	
		//Таб_ЧЕКИ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
		//ADOСоединение.Close();
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение(, "ssa", "nhfyckbnthfwbz");
			
		
		ТекстЗапроса = "create table #b (Карта nchar(7), КолвоПокупок int,  Сумма decimal(15,2) , rn int)
						|insert into #b (Карта, КолвоПокупок,Сумма, rn)
						|exec SMS_REPL..Get_Best_Customer_sp " + ВнешниеДанные.ФорматПоля(?(ЗначениеЗаполнено(ПараметрКоманды.МаксКол), ПараметрКоманды.МаксКол, 1000)) + "
						|select * from #b";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		Таб_ЧЕКИ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
		ADOСоединение.Close();
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.КартаНаКоторуюОбъединялисьНесколькоКарт Тогда
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
			
		
		ТекстЗапроса = "SELECT DISTINCT " + ?(ЗначениеЗаполнено(ПараметрКоманды.МаксКол), "TOP " + ВнешниеДанные.ФорматПоля(ПараметрКоманды.МаксКол), "") + "  [Number1] as НомерКарты FROM [SMS_REPL].[dbo].[Cards_Union]";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);	
		Таб_ЧЕКИ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
		ADOСоединение.Close();
		
	// +++ АК CHUM 20.09.2017 0-00016384
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И (ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РаньшеПокупалиОпределенныйТоварСейчасНет
		ИЛИ ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РаньшеПокупалиОпределенныйТоварСейчасНетНоПокупаютДругой) Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеРаньшеПокупали(Таб_ЧЕКИ, ПараметрКоманды);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.ПокупаютПятьОпределенныхПродуктовНоНеПокупаютШестой Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеПокупаютПятьНоНеПокупаютШестой(Таб_ЧЕКИ, ПараметрКоманды);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РегулярноПокупаютПродуктОтРазныхПоставщиков Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеРегулярноПокупаютПродуктРазныхПроизводителей(Таб_ЧЕКИ, ПараметрКоманды);
		
		// --- АК
		//+++АК BARA 17252	
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.АнализРегулярныхПосещений Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеАРП(Таб_ЧЕКИ, ПараметрКоманды);
		//---	
		//+++АК BARA 2017.12.11 17460	
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РегулярноПокупаютНаСуммуВМесяц Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеРегулярноПокупаютНаСуммуВМесяц(Таб_ЧЕКИ, ПараметрКоманды);
		//---	
		//+++АК BARA 2017.12.11 17777	
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РегулярноПокупаютКулинарию Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеРегулярноПокупаютКулинарию(Таб_ЧЕКИ, ПараметрКоманды);
		//---	
				//+++АК BARA 2017.12.11 17798	
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.ПокупаютНаСуммуЧека Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеПокупаютНаСуммуЧека(Таб_ЧЕКИ, ПараметрКоманды);
		//---	
		//+++АК BARA ИП-00017573  2017.12.29	
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП)
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.ПокупаютПродукциюНоНеПокупаютСвежуюВыпечку Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуПокупателейКоторыеНеПокупаютСвежуюВыпечку(Таб_ЧЕКИ, ПараметрКоманды);
		//---
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП) //+++АК mika 2018.06.20 ИП-00018882 СпецВыборка «Покупают минимум раз в неделю»
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.ПокупаютМинимумРазВНеделю Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеПокупаютМинимумОдинРазВНеделю(Таб_ЧЕКИ, ПараметрКоманды);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП) //+++АК mika 2018.08.01 ИП-00019066 СпецВыборка «Посещения за период (средний чек)»
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.ПосещенияЗаПериодСреднийЧек Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеПосещенияЗаПериодСреднийЧек(Таб_ЧЕКИ, ПараметрКоманды);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрКоманды.ВыборкаЗП) //+++АК mika 2018.08.01 ИП-00019066 СпецВыборка «Покупают в магазинах региона»
		И ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.ПокупаютВМагазинахРегиона Тогда
		
		Таб_ЧЕКИ = Новый ТаблицаЗначений;
		
		СформироватьТаблицуЧековПоСпецВыборкеПокупаютВМагазинахРегиона(Таб_ЧЕКИ, ПараметрКоманды);

	Иначе	
		// +++ АК CHUM 20.09.2017 0-00016384
		// Просили переделать с внешних источников данных на ADOСоединение...
		
		//ВнешниеИсточникиДанных.Loyality.УстановитьСоединение();
		
		// +++ АК CHUM 20.09.2017 0-00016384
		// --- АК
		
		//Получение самой СКД из макета
		СхемаКомпоновкиДанныхПокупатели = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетПокупатели");
		ЗаполнитьОтборы(СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтбора.Получить(), СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Покупатели.Настройки.Выбор.Элементы);
		Если СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() <> 0 Тогда
			
			// +++ АК CHUM 20.09.2017 0-00016384
			// Макеты СКД оставим для проверки наличия нужных отборов, после чего перегоним это в условия для запроса SQL
			// и получим в итоге нужную таблицу
			
			////Макет компоновки
			//КомпоновщикМакетаПокупатели = Новый КомпоновщикМакетаКомпоновкиДанных;
			//МакетКомпоновкиПокупатели = КомпоновщикМакетаПокупатели.Выполнить(СхемаКомпоновкиДанныхПокупатели, СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
			////Компоновка данных
			//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			//ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиПокупатели);	
			ТабПокупатели = Новый ТаблицаЗначений;
			//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			//ПроцессорВывода.УстановитьОбъект(ТабПокупатели);
			//ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
			// +++ АК CHUM 20.09.2017 0-00016384
			
			ТаблицаСоответствийПолейСКДиSQL = Новый ТаблицаЗначений;
			ТаблицаСоответствийПолейСКДиSQL.Колонки.Добавить("ПолеСКД", Новый ОписаниеТипов("Строка"));
			ТаблицаСоответствийПолейСКДиSQL.Колонки.Добавить("ПолеSQL", Новый ОписаниеТипов("Строка"));
			
			ИмяМакета = "МакетПокупатели";
			СформироватьТаблицуСоответствий(ТаблицаСоответствийПолейСКДиSQL, ИмяМакета);
			
			СтрокаУсловий = "";
			СформироватьСтрокуУсловийДляЗапросаSQL(СтрокаУсловий, ТаблицаСоответствийПолейСКДиSQL, СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы);
			
			Если ЗначениеЗаполнено(СтрокаУсловий) Тогда
				
				ЗапросSQL = "";
				СформироватьЗапросSQL(ЗапросSQL, СтрокаУсловий, ИмяМакета);
				
				Если ЗначениеЗаполнено(ЗапросSQL) Тогда
					Попытка
						ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
						RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
						ТабПокупатели 		= База_РезульататЗапросВТаблицуЗначений(RecordSet);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					КонецПопытки;
					
					ADOСоединениеSQL.Close();
				КонецЕсли;
			КонецЕсли;
			
			// --- АК
						
		КонецЕсли;
		
		// +++ АК CHUM 20.09.2017 0-00016384
		
		//ВнешниеИсточникиДанных.Loyality.РазорватьСоединение();
		
		// +++ АК CHUM 20.09.2017 0-00016384
		// --- АК
		
		// ПОЛУЧАЕМ ТОВАРЫ	
		//Получение самой СКД из макета
		СхемаКомпоновкиДанныхТОВАРЫ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетТовары");
		ЗаполнитьОтборы(СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтбора.Получить(), СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
		Если СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() <> 0 Тогда
			
			//Макет компоновки
			КомпоновщикМакетаТОВАРЫ = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновкиТОВАРЫ = КомпоновщикМакетаТОВАРЫ.Выполнить(СхемаКомпоновкиДанныхТОВАРЫ, СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
			//Компоновка данных
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиТОВАРЫ);	
			Таб_ТОВАРЫ = Новый ТаблицаЗначений;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Таб_ТОВАРЫ);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
		КонецЕсли;
		
		// ПОЛУЧАЕМ Производетяля	
		//Получение самой СКД из макета
		СхемаКомпоновкиДанныхПроизводитель = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетПроизводители");
		ЗаполнитьОтборы(СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтбора.Получить(), СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
		Если СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() <> 0 Тогда
			
			//Макет компоновки
			КомпоновщикМакетаПроизводитель = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновкиПроизводитель = КомпоновщикМакетаПроизводитель.Выполнить(СхемаКомпоновкиДанныхПроизводитель, СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
			//Компоновка данных
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиПроизводитель);	
			Таб_ПРОИЗВОДИТЕЛИ = Новый ТаблицаЗначений;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Таб_ПРОИЗВОДИТЕЛИ);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
		КонецЕсли;
		
		// ПОЛУЧАЕМ ТТ	
		//Получение самой СКД из макета
		СхемаКомпоновкиДанныхТТ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетТТ");
		ЗаполнитьОтборы(СхемаКомпоновкиДанныхТТ.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтбора.Получить(), СхемаКомпоновкиДанныхТТ.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
		Если СхемаКомпоновкиДанныхТТ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() <> 0 Тогда 
			
			//Макет компоновки
			КомпоновщикМакетаТТ = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновкиТТ = КомпоновщикМакетаТТ.Выполнить(СхемаКомпоновкиДанныхТТ, СхемаКомпоновкиДанныхТТ.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
			//Компоновка данных
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиТТ);
			Таб_ТТ = Новый ТаблицаЗначений;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Таб_ТТ);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
		КонецЕсли;
	 
		// ПОЛУЧАЕМ ЧЕКИ	
		//Получение самой СКД из макета
		Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
			СхемаКомпоновкиДанныхЧЕКИ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетЧЕКИ");
		Иначе
			СхемаКомпоновкиДанныхЧЕКИ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетЧЕКИ_ВкусВилл");
		КонецЕсли;	
		
		Если ТекМаксКол <> 0 Тогда
		Если ПараметрКоманды.КоличествоОбрабатываемыхЧеков = 0 Тогда
			ТекОграничениеПоЧекам = "5000";
		Иначе
			ТекОграничениеПоЧекам = Формат(ПараметрКоманды.КоличествоОбрабатываемыхЧеков, "ЧДЦ=0; ЧГ=0");
		КонецЕсли;	
			СхемаКомпоновкиДанныхЧЕКИ.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновкиДанныхЧЕКИ.НаборыДанных.НаборДанных1.Запрос, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ "+ТекОграничениеПоЧекам+" "); 
		КонецЕсли;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	ОбращенияКПокупателям.НомерКарты_3p
		//	|ИЗ
		//	|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
		//	|ГДЕ
		//	|	ОбращенияКПокупателям.ДатаДобавления >= &ТриМесяца
		//	|
		//	|СГРУППИРОВАТЬ ПО
		//	|	ОбращенияКПокупателям.НомерКарты_3p";

		//Запрос.УстановитьПараметр("ТриМесяца", ДобавитьМесяц(ТекущаяДата(), -3));

		//ТЗ_РезультатОбработанныеКарты = Запрос.Выполнить().Выгрузить();
		//Масс_РезультатОбработанныеКарты = ТЗ_РезультатОбработанныеКарты.ВыгрузитьКолонку("НомерКарты_3p");
		//СписокОтработанныхКарт = Новый СписокЗначений;
		//СписокОтработанныхКарт.ЗагрузитьЗначения(Масс_РезультатОбработанныеКарты);
		//
		//СхемаКомпоновкиДанныхЧЕКИ.Параметры.СписокУжеОбработанных.Значение = СписокОтработанныхКарт;
		
		//СписокУжеОбработанных
		
		ЗаполнитьОтборы(СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтбора.Получить(), СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
		
		//// Добавляем фильтры по номенклатуре, картам, типам операций, номеру карты
			
		Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
			НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОперации");
			НоваяСтрОтбора.ПравоеЗначение = 1;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли;
		
		Если СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() > 0 Тогда
			
			СписокОтбора = Новый СписокЗначений();
			ТабПокупатели.Свернуть("НомерКарты","");
			СписокОтбора.ЗагрузитьЗначения(ТабПокупатели.ВыгрузитьКолонку("НомерКарты"));	
			Если СписокОтбора.Количество() > 0 Тогда
				НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерКарты");
				НоваяСтрОтбора.ПравоеЗначение = СписокОтбора;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		//АК БЕЛН 29.06.2016++
		Отб=ПараметрКоманды.ВыборкаЗП.ХранилищеОтбора.Получить();
		Для  Каждого ЭлОтб Из Отб.Элементы  Цикл
			Если Строка(ЭлОтб.ЛевоеЗначение)="ОбратившиесяНаГорячуюЛинию" и ЭлОтб.Использование=Истина  Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОбращенияПокупателей.Номер_Карты_ОК
				|ИЗ
				|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
				|ГДЕ
				|	ОбращенияПокупателей.ИсточникОбращения В(&СписокИсточников)
				|	И ОбращенияПокупателей.Номер_Карты_ОК <> """"
				|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2";
				СписокИсточников=Новый СписокЗначений;
				СписокИсточников.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("1"));
				СписокИсточников.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("2"));
				СписокИсточников.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("3"));
				СписокИсточников.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("4"));
				СписокИсточников.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("5"));
				
				Запрос.УстановитьПараметр("СписокИсточников", СписокИсточников);
				Запрос.УстановитьПараметр("Дата1", ДобавитьМесяц(ТекущаяДата(),-6));
				Запрос.УстановитьПараметр("Дата2", Конецдня(ТекущаяДата()));
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				СписокОтб=Новый СписокЗначений;
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.Номер_Карты_ОК)) Тогда
						СписокОтб.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.Номер_Карты_ОК));
					КонецЕсли; 
				КонецЦикла;
				НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерКарты");
				НоваяСтрОтбора.ПравоеЗначение = СписокОтб;	
				НоваяСтрОтбора.ВидСравнения = ?(ЭлОтб.ПравоеЗначение=Истина,ВидСравненияКомпоновкиДанных.ВСписке,ВидСравненияКомпоновкиДанных.НеВСписке);
				НоваяСтрОтбора.Использование = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		//АК БЕЛН 29.06.2016--
		Если СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() > 0 Тогда
			
			СписокОтбора = Новый СписокЗначений();
			Таб_ТОВАРЫ.Свернуть("ИдентификаторТовара","");
			СписокОтбора.ЗагрузитьЗначения(Таб_ТОВАРЫ.ВыгрузитьКолонку("ИдентификаторТовара"));
			
			Если СписокОтбора.Количество() > 0  Тогда
				НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("id_tov_cl");
				НоваяСтрОтбора.ПравоеЗначение = СписокОтбора;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;

		Если СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() > 0 Тогда
			
			СписокОтбора = Новый СписокЗначений();
			Таб_ПРОИЗВОДИТЕЛИ.Свернуть("ИД","");
			СписокОтбора.ЗагрузитьЗначения(Таб_ПРОИЗВОДИТЕЛИ.ВыгрузитьКолонку("ИД"));	
			Если СписокОтбора.Количество() > 0 Тогда
				НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИД_Производитель");
				НоваяСтрОтбора.ПравоеЗначение = СписокОтбора;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СхемаКомпоновкиДанныхТТ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() > 0 Тогда
			
			СписокОтбора = Новый СписокЗначений();
			Таб_ТТ.Свернуть("id_TT","");
			СписокОтбора.ЗагрузитьЗначения(Таб_ТТ.ВыгрузитьКолонку("id_TT"));	
			Если СписокОтбора.Количество() > 0 Тогда
				НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("id_tt_cl");
				НоваяСтрОтбора.ПравоеЗначение = СписокОтбора;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() <> 0 Тогда
			
			// +++ АК CHUM 20.09.2017 0-00016384
			// Просили переделать с внешних источников данных на ADOСоединение...
		
			//ВнешниеИсточникиДанных.SMS_Izbenka.УстановитьСоединение();
			//		
			////Макет компоновки
			//КомпоновщикМакетаЧЕКИ = Новый КомпоновщикМакетаКомпоновкиДанных;
			//МакетКомпоновкиЧЕКИ = КомпоновщикМакетаЧЕКИ.Выполнить(СхемаКомпоновкиДанныхЧЕКИ, СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
			////Компоновка данных
			//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			//ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиЧЕКИ);	
			Таб_ЧЕКИ = Новый ТаблицаЗначений;
			//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			//ПроцессорВывода.УстановитьОбъект(Таб_ЧЕКИ);
			//ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			//
			//ВнешниеИсточникиДанных.SMS_Izbenka.РазорватьСоединение();
			
			// +++ АК CHUM 20.09.2017 0-00016384
				
			ТаблицаСоответствийПолейСКДиSQL = Новый ТаблицаЗначений;
			ТаблицаСоответствийПолейСКДиSQL.Колонки.Добавить("ПолеСКД", Новый ОписаниеТипов("Строка"));
			ТаблицаСоответствийПолейСКДиSQL.Колонки.Добавить("ПолеSQL", Новый ОписаниеТипов("Строка"));
			
			ИмяМакета = "";
			Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
				ИмяМакета = "МакетЧЕКИ";
			Иначе	
				ИмяМакета = "МакетЧЕКИ_ВкусВилл";
			КонецЕсли;	
			
			СформироватьТаблицуСоответствий(ТаблицаСоответствийПолейСКДиSQL, ИмяМакета);
			
			СтрокаУсловий = "";
			СформироватьСтрокуУсловийДляЗапросаSQL(СтрокаУсловий, ТаблицаСоответствийПолейСКДиSQL, СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы);
					
			Если ЗначениеЗаполнено(СтрокаУсловий) Тогда
				
				ЗапросSQL = "";
				СформироватьЗапросSQL(ЗапросSQL, СтрокаУсловий, ИмяМакета);
				
				//ИП-00016861 Раков П.С. Сохраним запрос ++
				Если НЕ РассылкаТелеграмм = Неопределено тогда
					ЗапросSQLДляТелеграмма = ЗапросSQL; //Сохраним запрос для его дальнейшей корректировки и присоединения в другой запрос (слишком долго формирует стрковое условие по картам) 
					Перейти ~Метка; //Остальные проверки не нужны, сразу формируем итоговый запрос СКл
				КонецЕсли;	
				//ИП-00016861 Раков П.С. --
				
				Если ТекМаксКол <> 0 Тогда
					Если ПараметрКоманды.КоличествоОбрабатываемыхЧеков = 0 Тогда
						ТекОграничениеПоЧекам = "5000";
					Иначе
						ТекОграничениеПоЧекам = Формат(ПараметрКоманды.КоличествоОбрабатываемыхЧеков, "ЧДЦ=0; ЧГ=0");
					КонецЕсли;	
					ЗапросSQL = СтрЗаменить(ЗапросSQL, "SELECT", "SELECT TOP( " + ТекОграничениеПоЧекам + ")");
				КонецЕсли;

				Если ЗначениеЗаполнено(ЗапросSQL) Тогда
					Попытка
						ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
						RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
						Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					КонецПопытки;
					ADOСоединениеSQL.Close();
				КонецЕсли;
			КонецЕсли;
			
			// --- АК
			
		Иначе
			Сообщить("Нельзя использовать пустой фильтр в выборке данных!");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Таб_ЧЕКИ.Количество() = 0 Тогда
			Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	//ТабПриоритетов = Таб_ЧЕКИ.Скопировать(,"ДатаПоЧеку,НомерКарты");
	//ТабПриоритетов.Свернуть("ДатаПоЧеку,НомерКарты","");
	//ТабПриоритетов.Сортировать("ДатаПоЧеку");
	//
	//лкТабСортировки = Новый ТаблицаЗначений;
	//лкТабСортировки.Колонки.Добавить("ДатаПоЧеку", Новый ОписаниеТипов("Дата"));
	//	
	//РезСоотв = Новый Соответствие;
	//лкСписокОбработанных = Новый СписокЗначений;
	//Для каждого лкТекСтрТаб Из ТабПриоритетов Цикл
	//	
	//	лкТабСортировки.Очистить();
	//	
	//	Если лкСписокОбработанных.НайтиПоЗначению(лкТекСтрТаб.НомерКарты) <> Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	текОтборНом = Новый Структура;
	//	текОтборНом.Вставить("НомерКарты",лкТекСтрТаб.НомерКарты);
	//	массНайден = ТабПриоритетов.НайтиСтроки(текОтборНом);
	//	
	//	Если массНайден.Количество() = 1 Тогда
	//		РезСоотв.Вставить(лкТекСтрТаб.НомерКарты, 0);
	//	ИначеЕсли массНайден.Количество() > 1 Тогда
	//		
	//		Для каждого ТекэлМасс Из массНайден Цикл
   
////   	        	новСтрСортировки = лкТабСортировки.Добавить();
	//			новСтрСортировки.ДатаПоЧеку = ТекэлМасс.ДатаПоЧеку;
	//			   
	//		КонецЦикла;
	//		
	//		лкТабСортировки.Сортировать("ДатаПоЧеку УБЫВ");
	//		СекундРазница = лкТабСортировки[0].ДатаПоЧеку - лкТабСортировки[1].ДатаПоЧеку;
	//		РезСоотв.Вставить(лкТекСтрТаб.НомерКарты, СекундРазница);
	//		
	//	КонецЕсли;	
	//	
	//	лкСписокОбработанных.Добавить(лкТекСтрТаб.НомерКарты);
	// КонецЦикла;
	//
	
	Таб_ЧЕКИ.Свернуть("НомерКарты", "");
	Если ПараметрКоманды.ИспользоватьПриоритеты Тогда
		
		//+++АК SHEP 2018.06.14 ИП-00018827: меняем [Loyalty].[dbo].[TransactionHistory] на процедуры
		//Таб_ЧЕКИ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
		//СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
		//
		//лкСтрОтбораПоКартам = " (";
		//Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
		//	
		//	лкСтрОтбораПоКартам = лкСтрОтбораПоКартам + " DC.Number = '"+текСтрТЗЧеков.НомерКарты+"' or ";
		//	
		//КонецЦикла;		
		//лкСтрОтбораПоКартам = Лев(лкСтрОтбораПоКартам, СтрДлина(лкСтрОтбораПоКартам)-3);
		//лкСтрОтбораПоКартам = лкСтрОтбораПоКартам + ")";
		//
		//ТекстЗапроса ="SELECT DISTINCT DC.Number, TH.[Time] as DataTimeShtamp
		//|FROM TransactionHistory TH WITH(NOLOCK)	
		//|INNER JOIN Indicator WITH(NOLOCK) ON TH.IndicatorUID = Indicator.IndicatorUID 
		//|LEFT JOIN DiscountCard DC WITH(NOLOCK) ON TH.DiscountCardUID = DC.DiscountCardUID
		//
		//|WHERE";
		//ТекстЗапроса = ТекстЗапроса + лкСтрОтбораПоКартам; //|( DC.Number = '0770395' or DC.Number = '0259833' or DC.Number = '0000100') 		
		//
		//ТекстЗапроса = ТекстЗапроса + " and (TH.[Time] BETWEEN {d'2012-01-01'} AND {d'2100-01-01'}) 
		//|and TH.TransactionType=1 and TH.PromotionProgramUID is null and TH.ShopNo <> (-999)";
		//		
		//Попытка
		//	
		//	Command = Новый COMОбъект("ADODB.Command");
		//	
		//	CurrentConnection = База_Подключение(СтрокаПодключения);
		//	Command.ActiveConnection = CurrentConnection;
		//	Command.CommandTimeout = 0;
		//	RecordSet = Новый COMОбъект("ADODB.RecordSet");
		//					
		//	Command.CommandText = ТекстЗапроса;			
		//	RecordSet = Command.Execute(); //Выполнение и получение набора данных
		//	ТЗ_Фин = База_РезульататЗапросВТаблицуЗначений(RecordSet);
		//	RecordSet.Close();
		//	
		//	//ТабПриоритетов = Таб_ЧЕКИ.Скопировать(,"ДатаПоЧеку,НомерКарты");
		//	//ТабПриоритетов.Свернуть("ДатаПоЧеку,НомерКарты","");
		//	//ТабПриоритетов.Сортировать("ДатаПоЧеку");
		//	
		//	лкТабСортировки = Новый ТаблицаЗначений;
		//	лкТабСортировки.Колонки.Добавить("ДатаПоЧеку", Новый ОписаниеТипов("Дата"));
		//	
		//	РезСоотв = Новый Соответствие;
		//	лкСписокОбработанных = Новый СписокЗначений;
		//	Для каждого лкТекСтрТаб Из ТЗ_Фин Цикл
		//		
		//		лкТабСортировки.Очистить();
		//		
		//		Если лкСписокОбработанных.НайтиПоЗначению(лкТекСтрТаб.Number) <> Неопределено Тогда
		//			Продолжить;
		//		КонецЕсли;	
		//		
		//		текОтборНом = Новый Структура;
		//		текОтборНом.Вставить("Number",лкТекСтрТаб.Number);
		//		массНайден = ТЗ_Фин.НайтиСтроки(текОтборНом);
		//		
		//		Если массНайден.Количество() = 1 Тогда
		//			РезСоотв.Вставить(лкТекСтрТаб.Number, 0);
		//		ИначеЕсли массНайден.Количество() > 1 Тогда
		//			
		//			Для каждого ТекэлМасс Из массНайден Цикл
		//				
		//				новСтрСортировки = лкТабСортировки.Добавить();
		//				новСтрСортировки.ДатаПоЧеку = ТекэлМасс.DataTimeShtamp;
		//				
		//			КонецЦикла;
		//			
		//			лкТабСортировки.Сортировать("ДатаПоЧеку УБЫВ");
		//			СекундРазница = лкТабСортировки[0].ДатаПоЧеку - лкТабСортировки[1].ДатаПоЧеку;
		//			РезСоотв.Вставить(СокрЛП(лкТекСтрТаб.Number), СекундРазница);
		//			
		//		КонецЕсли;	
		//		
		//		лкСписокОбработанных.Добавить(лкТекСтрТаб.Number);
		//	КонецЦикла; 	
		//	
		//	Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
		//		
		//		текСтрТЗЧеков.Приоритет = РезСоотв[текСтрТЗЧеков.НомерКарты];
		//		
		//	КонецЦикла;
		//	
		//Исключение	
		//	ВызватьИсключение ОписаниеОшибки();
		//КонецПопытки;
		//
		//Таб_ЧЕКИ.Сортировать("Приоритет");
		
		ТабЧекиСортироватьПоПриоритету(Таб_ЧЕКИ);
		//---АК SHEP 2018.06.14
		
	КонецЕсли;
	
	//
	//Если ПараметрКоманды.ИспользоватьПриоритеты Тогда
	//	
	//	Таб_ЧЕКИ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	//	СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
	//	
	//	Попытка
	//		
	//		Command = Новый COMОбъект("ADODB.Command");
	//		
	//		CurrentConnection = База_Подключение(СтрокаПодключения);
	//		Command.ActiveConnection = CurrentConnection;
	//		Command.CommandTimeout = 0;
	//		RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//		
	//		
	//		
	//		Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
	//							
	//			ТекстЗапроса = "declare @d as uniqueidentifier
	//			|select @d=d.AccountUID
	//			|from Loyalty..DiscountCard (nolock) d
	//			|where d.Number=/**BPar1**/~~~~~/**FPar**/
	//			|
	//			|exec Loyalty..spGetAcctHistoryByDateRange @d  , {d'2012-01-01'}, {d'2100-01-01'} ,0 , 0;"; 
	//			
	//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",текСтрТЗЧеков.НомерКарты);
	//			
	//			Command.CommandText = ТекстЗапроса;			
	//			RecordSet = Command.Execute(); //Выполнение и получение набора данных
	//			
	//			ТЗ = База_РезульататЗапросВТаблицуЗначенийПервыеДва(RecordSet);
	//			
	//			лкТекПриоритет = 0;
	//			
	//			Если ТЗ.Количество() > 1 Тогда
	//				лкТекПриоритет = ТЗ[0].DateTimeStamp - ТЗ[1].DateTimeStamp;
	//			КонецЕсли;	
	//			
	//			текСтрТЗЧеков.Приоритет = лкТекПриоритет; 	
	//			
	//		КонецЦикла;
	//		
	//		RecordSet.Close();
	//		
	//		Таб_ЧЕКИ.Сортировать("Приоритет");
	//		
	//	Исключение	
	//		ВызватьИсключение ОписаниеОшибки();
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбращенияКПокупателям.id_3p,
		|	ОбращенияКПокупателям.НомерКарты_3p,
		|	ОбращенияКПокупателям.ДатаДобавления,
		|	ОбращенияКПокупателям.ДатаЗвонка,
		|	ОбращенияКПокупателям.КтоЗвонил,
		|	ОбращенияКПокупателям.ГлавныйОтвет,
		|	ОбращенияКПокупателям.Ответ2,
		|	ОбращенияКПокупателям.Ответ3,
		|	ОбращенияКПокупателям.Комментарий,
		|	ОбращенияКПокупателям.Вопрос,
		|	ОбращенияКПокупателям.Выборка,
		|	ОбращенияКПокупателям.Проект,
		|	ОбращенияКПокупателям.ТипОбращения,
		|	ОбращенияКПокупателям.Доступность,
		|	ОбращенияКПокупателям.Статус,
		|	ОбращенияКПокупателям.Контакт,
		|	ОбращенияКПокупателям.Область,
		|	ОбращенияКПокупателям.ДатаОбласть,
		|	ОбращенияКПокупателям.ТипСвязи,
		|	ОбращенияКПокупателям.GUID_Загрузки,
		|	ОбращенияКПокупателям.DiscountCardUID,
		|	ОбращенияКПокупателям.ФИО
		|ИЗ
		|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям";

	лкТабДвижений = Запрос.Выполнить().Выгрузить();	
	лкТабДвижений.Очистить();
	
	////////////////////////////////////////////		
	// +++ АК CHUM 20.09.2017 0-00016384
	// Просили переделать с внешних источников данных на ADOСоединение...
	
	//ВнешниеИсточникиДанных.Loyality.УстановитьСоединение();
	
	// +++ АК CHUM 20.09.2017 0-00016384
	// --- АК
	
	МассНомеров = Таб_ЧЕКИ.ВыгрузитьКолонку("НомерКарты");
	лкТекСписокНомеровКарт = Новый СписокЗначений;
	лкТекСписокНомеровКарт.ЗагрузитьЗначения(МассНомеров);
	
	// +++ АК CHUM 20.09.2017 0-00016384
	// Просили переделать с внешних источников данных на ADOСоединение...
	
	//лкЗапросКарт = Новый Запрос;
	//лкЗапросКарт.Текст = 
	//	"ВЫБРАТЬ
	//	|	Покупатели.Email,
	//	|	Покупатели.Phone,
	//	|	Покупатели.Email_fact,
	//	|	Покупатели.Фамилия КАК Фамилия,
	//	|	Покупатели.Имя,
	//	|	Покупатели.Отчество,
	//	|	"""" КАК NameCl,
	//	|	Покупатели.FullName
	//	|ИЗ
	//	|	ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели
	//	|ГДЕ
	//	|	Покупатели.Email В(&СписокНомеровКарт)
	//	|	И Покупатели.Phone <> """"
	//	|	И Покупатели.IsEmployee <> 1";

	//лкЗапросКарт.УстановитьПараметр("СписокНомеровКарт", лкТекСписокНомеровКарт);

	//ТЗ_Телефонов = лкЗапросКарт.Выполнить().Выгрузить();
	//
	//ВнешниеИсточникиДанных.Loyality.РазорватьСоединение();
	
	// +++ АК CHUM 20.09.2017 0-00016384
	
	
	ТЗ_Телефонов = Новый ТаблицаЗначений;
	
	СписокНомеровКартДляSQLЗапроса = "''";
	Для Каждого СтрНомер Из МассНомеров Цикл
		СписокНомеровКартДляSQLЗапроса = СписокНомеровКартДляSQLЗапроса + "'" + СтрНомер + "',";
	КонецЦикла;
	
	Если МассНомеров.Количество() > 0 Тогда
		СписокНомеровКартДляSQLЗапроса = Сред(СписокНомеровКартДляSQLЗапроса, 1, СтрДлина(СписокНомеровКартДляSQLЗапроса) - 1);
	КонецЕсли;
	
	//+++АК mika 2018.06.21 Без задачи. Исправление ошибки (если в массиве всего одна карточка, то ни один из запросов по ней никогда! не отрабатывал)
	Если МассНомеров.Количество() = 1 Тогда  
		СписокНомеровКартДляSQLЗапроса = СтрЗаменить(СписокНомеровКартДляSQLЗапроса,"''","");   
	КонецЕсли;
	//---АК mika
	
	ЗапросSQL = "SELECT
				|	Buyers.Email,
				|	Buyers.Phone,
				|	isNULL(Buyers.Email_fact, '') as Email_fact,
				|	isNULL(Buyers.Фамилия, '') AS Фамилия,
				|	isNULL(Buyers.Имя, '') AS Имя,
				|	Buyers.Отчество,
				|	'' AS NameCl,
				|	Buyers.FullName
				|FROM
				|	[Loyalty].[dbo].[Customer] AS Buyers
				|WHERE
				|	Buyers.Email IN(" + СписокНомеровКартДляSQLЗапроса + ")
				|	AND Buyers.Phone <> ''
				|	AND Buyers.IsEmployee <> 1
				|";
	
		//ИП-00016861 Раков П.С. Добавим строку условия отбора по ИД из второй выборки ++
~Метка:		
	Если НЕ РассылкаТелеграмм = Неопределено тогда
			
		ЗапросSQLДляТелеграмма = "Select ORD.НомерКарты from (" + ЗапросSQLДляТелеграмма +
		") as ORD group by ORD.НомерКарты"; //Вложим запрос для получения только карты и сгруппирум
		
		УсловиеБотМП = ?(ОсновнойБот ИЛИ ТестовыйБот, "not isnull(telegram_id,0) = 0", "");
		УсловиеБотМП = УсловиеБотМП + ?(МП, ?(ЗначениеЗаполнено(УсловиеБотМП), " OR ", "") + "not isnull(OneSignalToken, '') = ''", "");
		
		ЗапросSQL =
		"SELECT " +  ?(ЗначениеЗаполнено(ТекстЗапросаТелеграмм), "", "TOP (" + ТекМаксКол + ")") + 
		"	Buyers.Email,
		|	Buyers.Phone,
		|	isNULL(Buyers.telegram_id, 0) as telegram_id,
		|	isNULL(Buyers.Email_fact, '') as Email_fact,
		|	isNULL(Buyers.Фамилия, '') AS Фамилия,
		|	isNULL(Buyers.Имя, '') AS Имя,
		|	isNULL(Buyers.Отчество, '') AS Отчество,
		|	Buyers.IsEmployee,
		|	isNULL(Buyers.OneSignalToken, '') AS OneSignalToken,
		|	'' AS NameCl,
		|	Buyers.FullName
		|FROM
		|	[Loyalty].[dbo].[Customer] AS Buyers with (nolock)
		|WHERE                                             
		|	Buyers.Email IN(" + ЗапросSQLДляТелеграмма + ")   
		|	AND Buyers.Phone <> '' and " + УсловиеБотМП + "
		|";
		
		Если ОсновнойБот и Не ТестовыйБот Тогда
			УсловиеБота =	"AND isnull(IsEmployee, 0) = 0
							|";
		ИначеЕсли НЕ ОсновнойБот И ТестовыйБот Тогда
			УсловиеБота =	"AND isnull(IsEmployee, 0) = 1
							|";
		Иначе
			УсловиеБота = "";
		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("ТипРассылкиЧислом") и ЗначениеЗаполнено(ПараметрКоманды.ТипРассылкиЧислом) 
		И ПараметрКоманды.Свойство("Частота") и ЗначениеЗаполнено(ПараметрКоманды.Частота)  тогда
			УсловиеБота = УсловиеБота + 
			"AND (telegram_id is NULL OR telegram_id not in (SELECT user_id FROM [srv-sql03].Telegram.dbo.outbox_telegram with (nolock)
			|WHERE type_distribusion = " + ПараметрКоманды.ТипРассылкиЧислом + " and add_date > DATEADD(day, -" + Строка(ПараметрКоманды.Частота) +  ", GETDATE())
			|GROUP by user_id))
			|AND Email not in (SELECT number FROM [srv-sql03].Telegram.dbo.outbox_MP with (nolock)
			|WHERE type_distribusion = " + ПараметрКоманды.ТипРассылкиЧислом + " and date_message > DATEADD(day, -" + Строка(ПараметрКоманды.Частота) +  ", GETDATE())
			|GROUP by number)";

		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("ТипРассылки") и (ЗначениеЗаполнено(ПараметрКоманды.ТипРассылки))тогда
			ЗапросSQLДляТелеграмма = ЗапросSQLДляТелеграмма + 
			"
			|AND Email IN (select number as НомерКарты
			|FROM [srv-sql03].[vv03].[dbo].[Cards_Settings] with (nolock) where " + ПараметрКоманды.ТипРассылки + " = 1)";

		КонецЕсли;			
		
		ЗапросSQL = ЗапросSQL + УсловиеБота;
			
		Если НЕ ТекстЗапросаТелеграмм = "" тогда
			
			ТЗПерваяВыборка = ПолучитьРезультатЗапросаТЗ(ТекстЗапросаТелеграмм);
			ТЗВтораяВыборка = ПолучитьРезультатЗапросаТЗ(ЗапросSQL);
			
			Запрос = Новый Запрос;     //Пришлось разбить на 2 запроса, так как 1 большой SQL обработаться не успевал
			Запрос.Текст = 
				"ВЫБРАТЬ  
				|	Т1.telegram_id
				|ПОМЕСТИТЬ ВТ1
				|ИЗ
				|	&Т1 КАК Т1
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т2.Email,
				|	Т2.FullName,
				|	Т2.IsEmployee,
				|	Т2.NameCl,
				|	Т2.Phone,
				|	Т2.telegram_id,
				|	Т2.Имя,
				|	Т2.OneSignalToken
				|ПОМЕСТИТЬ ВТПолная
				|ИЗ
				|	&Т2 КАК Т2
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ Первые " + ТекМаксКол +
				"	ВТПолная.Email,
				|	ВТПолная.FullName,
				|	ВТПолная.IsEmployee,
				|	ВТПолная.NameCl,
				|	ВТПолная.Phone,
				|	ВТПолная.telegram_id,
				|	ВТПолная.Имя,
				|	isNULL(ВТПолная.OneSignalToken, '') as OneSignalToken
				|ИЗ
				|	ВТ1 КАК ВТ1
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПолная КАК ВТПолная
				|		ПО ВТ1.telegram_id = ВТПолная.telegram_id";

			Запрос.УстановитьПараметр("Т1", ТЗПерваяВыборка);
			Запрос.УстановитьПараметр("Т2", ТЗВтораяВыборка);
			
			Возврат Запрос.Выполнить().Выгрузить();	
			
			//ДопТекстТелеграмм = " and Buyers.telegram_id in("+ТекстЗапросаТелеграмм+")";
			//ЗапросSQL = ЗапросSQL + ДопТекстТелеграмм; 
		КонецЕсли;	
		
		ТЗ_Телефонов =	ПолучитьРезультатЗапросаТЗ(ЗапросSQL);
		
		Возврат ТЗ_Телефонов;	
		
	КонецЕсли;
		//Раков --
								
	Попытка
		ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
		RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
		ТЗ_Телефонов		= База_РезульататЗапросВТаблицуЗначений(RecordSet);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединениеSQL.Close();	
	// --- АК
	
	//ТекстЗапроса = "SELECT [Email] ,[Phone], [Email_fact], [Имя] as NameCl FROM [Loyalty].[dbo].[Customer] WHERE ";
	//Для каждого ТекСтрокаНомераКарты Из Таб_ЧЕКИ Цикл
	//	лкТекНомерКарты = СокрЛП(ТекСтрокаНомераКарты.НомерКарты);
	//	ТекстЗапроса = ТекстЗапроса + "[Email] = '"+лкТекНомерКарты+"' or ";	
	//КонецЦикла;	
	//
	//ВсегоСимволов = СтрДлина(ТекстЗапроса);
	//ТекстЗапроса = Лев(ТекстЗапроса, ВсегоСимволов-4);
	//ТекстЗапроса =  ТекстЗапроса + " and [Phone] <> ''";
	//
	//СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
	//RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	//ТЗ_Телефонов = База_РезульататЗапросВТаблицуЗначений(RecordSet);
		
	СписокЗагружаемыхКарт = Новый СписокЗначений;
	СписокЗагружаемыхКарт.ЗагрузитьЗначения(ТЗ_Телефонов.ВыгрузитьКолонку("Email"));
	
	Для каждого ТекСтрТелеф Из ТЗ_Телефонов Цикл
 
 		ТекСтрТелеф.Email = СокрЛП(ТекСтрТелеф.Email);
		ТекСтрТелеф.Phone = СокрЛП(ТекСтрТелеф.Phone);
		ТекСтрТелеф.Email_fact = СокрЛП(ТекСтрТелеф.Email_fact);
		ТекСтрТелеф.NameCl = СокрЛП(""+СокрЛП(ТекСтрТелеф.Фамилия) + " "+СокрЛП(ТекСтрТелеф.Имя)+" "+СокрЛП(ТекСтрТелеф.Отчество));
 
	КонецЦикла;
	
	////////////////////////////////////////////
	
	// +++ АК CHUM 20.09.2017 0-00016384
	// Просили переделать с внешних источников данных на ADOСоединение...
	
	//ЗапросНом = Новый Запрос;
	//ЗапросНом.Текст = 
	//	"ВЫБРАТЬ
	//	|	КартыПокупателей.DiscountCardUID,
	//	|	КартыПокупателей.Number
	//	|ИЗ
	//	|	ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
	//	|ГДЕ
	//	|	КартыПокупателей.Number В(&СписокНомеровКарт)";
	//ЗапросНом.УстановитьПараметр("СписокНомеровКарт", лкТекСписокНомеровКарт);
	//ТЗ_НомеровКарт = ЗапросНом.Выполнить().Выгрузить();
	
	// +++ АК CHUM 20.09.2017 0-00016384
	
	ТЗ_НомеровКарт = Новый ТаблицаЗначений;
		
	ЗапросSQL = "SELECT
				|	DiscountCard.DiscountCardUID,
				|	DiscountCard.Number
				|FROM
				|	[Loyalty].[dbo].[DiscountCard] AS DiscountCard
				|WHERE
				|	DiscountCard.Number IN(" + СписокНомеровКартДляSQLЗапроса + ")
				|";
	
	Попытка
		ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
		RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
		ТЗ_НомеровКарт		= База_РезульататЗапросВТаблицуЗначений(RecordSet);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединениеSQL.Close();
	
	// --- АК
	
	//ТекстЗапроса = "SELECT [Number] ,[DiscountCardUID] FROM [Loyalty].[dbo].[DiscountCard] (nolock) WHERE ";
	//
	//Для каждого ТекСтрокаНомераКарты Из Таб_ЧЕКИ Цикл
	//	лкТекНомерКарты = СокрЛП(ТекСтрокаНомераКарты.НомерКарты);
	//	ТекстЗапроса = ТекстЗапроса + "[Number] = '"+лкТекНомерКарты+"' or ";	
	//КонецЦикла;	
	//
	//ВсегоСимволов = СтрДлина(ТекстЗапроса);
	//ТекстЗапроса = Лев(ТекстЗапроса, ВсегоСимволов-4);
	//
	//СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
	//RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	//ТЗ_НомеровКарт = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	
	////////////////////////////////////////////
	
	Для каждого ТекСтрКарты Из ТЗ_НомеровКарт Цикл
 
 		ТекСтрКарты.Number = СокрЛП(ТекСтрКарты.Number);
		ТекСтрКарты.DiscountCardUID = СокрЛП(ТекСтрКарты.DiscountCardUID);
		 
	КонецЦикла;
	
	ТекДата = ТекущаяДата();
	  		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияКПокупателям.НомерКарты_3p
		|ИЗ
		|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
		|ГДЕ
		|	ОбращенияКПокупателям.ДатаДобавления > &ПоследниеТриМесяца
		|	И ОбращенияКПокупателям.НомерКарты_3p В(&СписокЗагружаемыхКарт)";
	// +++ АК CHUM 14.09.2017 ИП-00016623
		//|	И ОбращенияКПокупателям.КтоЗвонил <> """"";

	//Запрос.УстановитьПараметр("ПоследниеТриМесяца", ДобавитьМесяц(ТекДата, -3));
	// +++ АК CHUM 14.09.2017 ИП-00016623
	Запрос.УстановитьПараметр("ПоследниеТриМесяца", ДобавитьМесяц(ТекДата, -1));
	// --- АК
	Запрос.УстановитьПараметр("СписокЗагружаемыхКарт", СписокЗагружаемыхКарт);

	ТЗ_РанееОбрабатываемые = Запрос.Выполнить().Выгрузить();
    НомерВыводимойСтр = 0;		
	Для каждого ТекСтрокаНомераКарты Из Таб_ЧЕКИ Цикл
		
 		лкТекНомерКарты = СокрЛП(ТекСтрокаНомераКарты.НомерКарты);
			
		Если лкТекНомерКарты = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("НомерКарты_3p", лкТекНомерКарты);
		МассСтрок = ТЗ_РанееОбрабатываемые.НайтиСтроки(лкОтбор);
		Если МассСтрок.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("Email", лкТекНомерКарты);
		НайденыеСтрТел = ТЗ_Телефонов.НайтиСтроки(лкОтбор);
		Если НайденыеСтрТел.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекСтрТел Из НайденыеСтрТел Цикл
			
			лкТекКонтакт = СокрЛП(ТекСтрТел.Phone);	
			
			Если Лев(лкТекКонтакт, 1) <> "9" И ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000001") Тогда // городской
				лкТекКонтакт = "";
				Продолжить;
			КонецЕсли;	
			
			Если ЭтоРассылка Тогда
				
				лкТекКомментарий = ""+СокрЛП(ТекСообщениеДляРассылки);
				лкТекФИО = СокрЛП(ТекСтрТел.Имя);
				лкТекКтоЗвонил = ПараметрыСеанса.ТекущийПользователь;
				лкТекДатаЗвонка = ТекДата;
				Если ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000002") и ЗначениеЗаполнено(ТекСтрТел.Email_fact) Тогда
					лкТекКонтакт = ТекСтрТел.Email_fact;
				ИначеЕсли ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000001") и ЗначениеЗаполнено(ТекСтрТел.Phone) Тогда
					лкТекКонтакт = ТекСтрТел.Phone;
				ИначеЕсли ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000003") и ЗначениеЗаполнено(ТекСтрТел.Phone) Тогда
					лкТекКонтакт = ТекСтрТел.Phone;					
				Иначе
					лкТекКонтакт = "";
					Продолжить;
				КонецЕсли;	
				лкТекТипСвязи = ТекТипСвязи;
			Иначе
				лкТекФИО = СокрЛП(ТекСтрТел.Имя);
				лкТекТипСвязи = "";
				лкТекКомментарий = "";
				лкТекДатаЗвонка = "";
			КонецЕсли;
			
		КонецЦикла;
		
		Если лкТекКонтакт = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерВыводимойСтр = НомерВыводимойСтр +1;
		Если ТекМаксКол < НомерВыводимойСтр Тогда
			Прервать;		
		КонецЕсли;
		
		НоваяСтрТЗ = лкТабДвижений.Добавить();
		
		НоваяСтрТЗ.ФИО = Лев(ВРЕГ(лкТекФИО), 1)+Прав(НРЕГ(лкТекФИО), СтрДлина(лкТекФИО)-1);
		НоваяСтрТЗ.Комментарий = лкТекКомментарий;
		НоваяСтрТЗ.КтоЗвонил = ЛкТекКтоЗвонил;
		НоваяСтрТЗ.ДатаЗвонка = лкТекДатаЗвонка;
		НоваяСтрТЗ.Контакт = лкТекКонтакт;
		
		НоваяСтрТЗ.ТипСвязи = лкТекТипСвязи;
		
		//НоваяСтрТЗ.id_3p = 0;
		НоваяСтрТЗ.НомерКарты_3p = лкТекНомерКарты;
		//НоваяСтрТЗ.ГлавныйОтвет = 0;
		//НоваяСтрТЗ.Ответ2 = 0;
		//НоваяСтрТЗ.Ответ3 = 0;
		НоваяСтрТЗ.Вопрос = ПараметрКоманды.Вопрос;
		НоваяСтрТЗ.Выборка = ПараметрКоманды.ВыборкаЗП;
		НоваяСтрТЗ.Проект = ПараметрКоманды.Проект;
		НоваяСтрТЗ.ТипОбращения = ТекТипОбращения;
		//НоваяСтрТЗ.Доступность = 0;
		НоваяСтрТЗ.Статус = 0;
		НоваяСтрТЗ.Область = 0;
		НоваяСтрТЗ.ДатаОбласть = 0;
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("Number", лкТекНомерКарты);
		НайденыеСтрИДКарт = ТЗ_НомеровКарт.НайтиСтроки(лкОтбор);
		Для каждого ТекСтрКарты Из НайденыеСтрИДКарт Цикл	
			
			НоваяСтрТЗ.DiscountCardUID = СокрЛП(ТекСтрКарты.DiscountCardUID);
			
		КонецЦикла;
	КонецЦикла;
		
	Если лкТабДвижений.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбращенияКПокупателям.id_3p КАК id_3p
	|ИЗ
	|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
	|
	|УПОРЯДОЧИТЬ ПО
	|	id_3p УБЫВ";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ТекНомер = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекНомер = ВыборкаДетальныеЗаписи.id_3p;
	КонецЦикла;
	
	ТекGUID_Загрузки	= СокрЛП(Новый УникальныйИдентификатор);
	Для каждого ТекСтрока Из лкТабДвижений Цикл
        ТекНомер = ТекНомер + 1;
 		ТекСтрока.id_3p = ТекНомер;
        ТекСтрока.GUID_Загрузки = ТекGUID_Загрузки;
		ТекСтрока.ДатаДобавления = ТекДата;
 	КонецЦикла;
	
	Для каждого ТекСтрлкТабДвижений Из лкТабДвижений Цикл
 
 		ТекСтрлкТабДвижений.Комментарий = СтрЗаменить(ТекСтрлкТабДвижений.Комментарий, "<ФИО>", ТекСтрлкТабДвижений.ФИО);
		ТекСтрлкТабДвижений.Комментарий = СтрЗаменить(ТекСтрлкТабДвижений.Комментарий, "<НомерКарты>", ТекСтрлкТабДвижений.НомерКарты_3p);
 
 	КонецЦикла;
	
	НаборРег = РегистрыСведений.ОбращенияКПокупателям.СоздатьНаборЗаписей();
	НаборРег.Отбор.GUID_Загрузки.Установить(ТекGUID_Загрузки);
	НаборРег.Прочитать();
	НаборРег.Загрузить(лкТабДвижений);
	
	НачатьТранзакцию();
	НаборРег.Записать();	
	ЗафиксироватьТранзакцию();
	    	
	
	Если ЭтоРассылка И ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000001") Тогда
		
		ТекСпис = новый СписокЗначений;
		ТекСпис.Добавить(НаборРег.ВыгрузитьКолонку("id_3p"));
		ТекСпис.Добавить(НаборРег.ВыгрузитьКолонку("GUID_Загрузки"));
		ТекСпис.Добавить(ПараметрКоманды.ТекРассылка.Наименование);
		
		СтрПараметры = Новый Структура;
		СтрПараметры.Вставить("ВходящийСписок", ТекСпис); 
					
		Возврат СтрПараметры;				
			
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция ПостроитьТаблицуРассылкиПоАбонементам(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	Если ТекМаксКол <> 0 Тогда
		
		Если ПараметрКоманды.КоличествоОбрабатываемыхЧеков = 0 Тогда
			ТекОграничениеПоЧекам = "5000";
		Иначе
			ТекОграничениеПоЧекам = Формат(ПараметрКоманды.КоличествоОбрабатываемыхЧеков, "ЧДЦ=0; ЧГ=0");
		КонецЕсли;		
		
	КонецЕсли;
	
	
	////////////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	ДатаНач = ПараметрКоманды.РезПарам.ДатаНач;
	ДатаКон = ПараметрКоманды.РезПарам.ДатаКон;
	ТипПокупателя = ПараметрКоманды.РезПарам.ТипПокупателя;
	
	//ТекстЗапроса = "Select number as НомерКарты, Покупка_Абонемент, Покупка_БезАбонемента, Абонемент_НетПокупкок
	//				|FROM SMS_REPL..cards_abonement('~~~~~', '@@@@@@', '''''')
	//				|WHERE Покупка_БезАбонемента = 1;";
	
	ТекстЗапроса = "create table #t (НомерКарты nchar(7), Покупка_Абонемент int, Покупка_БезАбонемента int, Абонемент_НетПокупок int)
					|insert into #t(НомерКарты,Покупка_Абонемент, Покупка_БезАбонемента, Абонемент_НетПокупок)
					|exec SMS_REPL..cards_abonement_sp '~~~~~', '@@@@@@', ''''''
					|select * from #t
					|WHERE Покупка_БезАбонемента = 1";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", ДатаНач);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "@@@@@@", ДатаКон);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "''''''", ТипПокупателя);
	
	
	СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=nhfyckbnthfwbz;User ID=ssa";
		
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
		RecordSet=RecordSet.NextRecordSet();
	КонецЦикла;
	Таб_ЧЕКИ = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	////////////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат Неопределено;
	КонецЕсли;	
		
	Таб_ЧЕКИ.Свернуть("НомерКарты", "");
	Если ПараметрКоманды.ИспользоватьПриоритеты Тогда
		
		//+++АК SHEP 2018.07.04 ИП-00018827: меняем [Loyalty].[dbo].[TransactionHistory] на процедуры
		//Таб_ЧЕКИ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
		//СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
		//
		//лкСтрОтбораПоКартам = " (";
		//Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
		//	
		//	лкСтрОтбораПоКартам = лкСтрОтбораПоКартам + " DC.Number = '"+текСтрТЗЧеков.НомерКарты+"' or ";
		//	
		//КонецЦикла;		
		//лкСтрОтбораПоКартам = Лев(лкСтрОтбораПоКартам, СтрДлина(лкСтрОтбораПоКартам)-3);
		//лкСтрОтбораПоКартам = лкСтрОтбораПоКартам + ")";
		//
		//ТекстЗапроса ="SELECT DISTINCT DC.Number, TH.[Time] as DataTimeShtamp
		//|FROM TransactionHistory TH WITH(NOLOCK)	
		//|INNER JOIN Indicator WITH(NOLOCK) ON TH.IndicatorUID = Indicator.IndicatorUID 
		//|LEFT JOIN DiscountCard DC WITH(NOLOCK) ON TH.DiscountCardUID = DC.DiscountCardUID
		//
		//|WHERE";
		//ТекстЗапроса = ТекстЗапроса + лкСтрОтбораПоКартам; //|( DC.Number = '0770395' or DC.Number = '0259833' or DC.Number = '0000100') 		
		//
		//ТекстЗапроса = ТекстЗапроса + " and (TH.[Time] BETWEEN {d'2012-01-01'} AND {d'2100-01-01'}) 
		//|and TH.TransactionType=1 and TH.PromotionProgramUID is null and TH.ShopNo <> (-999)";
		//		
		//Попытка
		//	
		//	Command = Новый COMОбъект("ADODB.Command");
		//	
		//	CurrentConnection = База_Подключение(СтрокаПодключения);
		//	Command.ActiveConnection = CurrentConnection;
		//	Command.CommandTimeout = 0;
		//	RecordSet = Новый COMОбъект("ADODB.RecordSet");
		//					
		//	Command.CommandText = ТекстЗапроса;			
		//	RecordSet = Command.Execute(); //Выполнение и получение набора данных
		//	ТЗ_Фин = База_РезульататЗапросВТаблицуЗначений(RecordSet);
		//	RecordSet.Close();
		//	
		//	//ТабПриоритетов = Таб_ЧЕКИ.Скопировать(,"ДатаПоЧеку,НомерКарты");
		//	//ТабПриоритетов.Свернуть("ДатаПоЧеку,НомерКарты","");
		//	//ТабПриоритетов.Сортировать("ДатаПоЧеку");
		//	
		//	лкТабСортировки = Новый ТаблицаЗначений;
		//	лкТабСортировки.Колонки.Добавить("ДатаПоЧеку", Новый ОписаниеТипов("Дата"));
		//	
		//	РезСоотв = Новый Соответствие;
		//	лкСписокОбработанных = Новый СписокЗначений;
		//	Для каждого лкТекСтрТаб Из ТЗ_Фин Цикл
		//		
		//		лкТабСортировки.Очистить();
		//		
		//		Если лкСписокОбработанных.НайтиПоЗначению(лкТекСтрТаб.Number) <> Неопределено Тогда
		//			Продолжить;
		//		КонецЕсли;	
		//		
		//		текОтборНом = Новый Структура;
		//		текОтборНом.Вставить("Number",лкТекСтрТаб.Number);
		//		массНайден = ТЗ_Фин.НайтиСтроки(текОтборНом);
		//		
		//		Если массНайден.Количество() = 1 Тогда
		//			РезСоотв.Вставить(лкТекСтрТаб.Number, 0);
		//		ИначеЕсли массНайден.Количество() > 1 Тогда
		//			
		//			Для каждого ТекэлМасс Из массНайден Цикл
		//				
		//				новСтрСортировки = лкТабСортировки.Добавить();
		//				новСтрСортировки.ДатаПоЧеку = ТекэлМасс.DataTimeShtamp;
		//				
		//			КонецЦикла;
		//			
		//			лкТабСортировки.Сортировать("ДатаПоЧеку УБЫВ");
		//			СекундРазница = лкТабСортировки[0].ДатаПоЧеку - лкТабСортировки[1].ДатаПоЧеку;
		//			РезСоотв.Вставить(СокрЛП(лкТекСтрТаб.Number), СекундРазница);
		//			
		//		КонецЕсли;	
		//		
		//		лкСписокОбработанных.Добавить(лкТекСтрТаб.Number);
		//	КонецЦикла; 	
		//	
		//	Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
		//		
		//		текСтрТЗЧеков.Приоритет = РезСоотв[текСтрТЗЧеков.НомерКарты];
		//		
		//	КонецЦикла;
		//	
		//Исключение	
		//	ВызватьИсключение ОписаниеОшибки();
		//КонецПопытки;
		//
		//Таб_ЧЕКИ.Сортировать("Приоритет");
		
		ТабЧекиСортироватьПоПриоритету(Таб_ЧЕКИ);
		//---АК SHEP 2018.07.04
		
	КонецЕсли;
		
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбращенияКПокупателям.id_3p,
		|	ОбращенияКПокупателям.НомерКарты_3p,
		|	ОбращенияКПокупателям.ДатаДобавления,
		|	ОбращенияКПокупателям.ДатаЗвонка,
		|	ОбращенияКПокупателям.КтоЗвонил,
		|	ОбращенияКПокупателям.ГлавныйОтвет,
		|	ОбращенияКПокупателям.Ответ2,
		|	ОбращенияКПокупателям.Ответ3,
		|	ОбращенияКПокупателям.Комментарий,
		|	ОбращенияКПокупателям.Вопрос,
		|	ОбращенияКПокупателям.Выборка,
		|	ОбращенияКПокупателям.Проект,
		|	ОбращенияКПокупателям.ТипОбращения,
		|	ОбращенияКПокупателям.Доступность,
		|	ОбращенияКПокупателям.Статус,
		|	ОбращенияКПокупателям.Контакт,
		|	ОбращенияКПокупателям.Область,
		|	ОбращенияКПокупателям.ДатаОбласть,
		|	ОбращенияКПокупателям.ТипСвязи,
		|	ОбращенияКПокупателям.GUID_Загрузки,
		|	ОбращенияКПокупателям.DiscountCardUID,
		|	ОбращенияКПокупателям.ФИО
		|ИЗ
		|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям";

	лкТабДвижений = Запрос.Выполнить().Выгрузить();	
	лкТабДвижений.Очистить();
	
	////////////////////////////////////////////
	
	//СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("loyalty");
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	//пСоед.АутентификацияСтандартная = Истина;
	//пСоед.АутентификацияОС = Ложь;
	//пСоед.ИмяПользователя = "izbenka";
	//пСоед.Пароль = "cjyzcjyz";
	//ВнешниеИсточникиДанных.Loyality.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.Loyality.УстановитьСоединение();
	
	МассНомеров = Таб_ЧЕКИ.ВыгрузитьКолонку("НомерКарты");
	лкТекСписокНомеровКарт = Новый СписокЗначений;
	лкТекСписокНомеровКарт.ЗагрузитьЗначения(МассНомеров);
	
	лкЗапросКарт = Новый Запрос;
	лкЗапросКарт.Текст = 
		"ВЫБРАТЬ
		|	Покупатели.Email,
		|	Покупатели.Phone,
		|	Покупатели.Email_fact,
		|	Покупатели.Фамилия КАК Фамилия,
		|	Покупатели.Имя,
		|	Покупатели.Отчество,
		|	"""" КАК NameCl,
		|	Покупатели.FullName
		|ИЗ
		|	ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели
		|ГДЕ
		|	Покупатели.Email В(&СписокНомеровКарт)
		|	И Покупатели.Phone <> """"
		|	И Покупатели.IsEmployee <> 1";

	лкЗапросКарт.УстановитьПараметр("СписокНомеровКарт", лкТекСписокНомеровКарт);

	ТЗ_Телефонов = лкЗапросКарт.Выполнить().Выгрузить();
	
	ВнешниеИсточникиДанных.Loyality.РазорватьСоединение();
				
	СписокЗагружаемыхКарт = Новый СписокЗначений;
	СписокЗагружаемыхКарт.ЗагрузитьЗначения(ТЗ_Телефонов.ВыгрузитьКолонку("Email"));
	
	Для каждого ТекСтрТелеф Из ТЗ_Телефонов Цикл
 
 		ТекСтрТелеф.Email = СокрЛП(ТекСтрТелеф.Email);
		ТекСтрТелеф.Phone = СокрЛП(ТекСтрТелеф.Phone);
		ТекСтрТелеф.Email_fact = СокрЛП(ТекСтрТелеф.Email_fact);
		ТекСтрТелеф.NameCl = СокрЛП(""+СокрЛП(ТекСтрТелеф.Фамилия) + " "+СокрЛП(ТекСтрТелеф.Имя)+" "+СокрЛП(ТекСтрТелеф.Отчество));
 
	КонецЦикла;
	
	////////////////////////////////////////////
	
	ЗапросНом = Новый Запрос;
	ЗапросНом.Текст = 
		"ВЫБРАТЬ
		|	КартыПокупателей.DiscountCardUID,
		|	КартыПокупателей.Number
		|ИЗ
		|	ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
		|ГДЕ
		|	КартыПокупателей.Number В(&СписокНомеровКарт)";
    ЗапросНом.УстановитьПараметр("СписокНомеровКарт", лкТекСписокНомеровКарт);
	ТЗ_НомеровКарт = ЗапросНом.Выполнить().Выгрузить();
    	
	
	////////////////////////////////////////////
	
	Для каждого ТекСтрКарты Из ТЗ_НомеровКарт Цикл
 
 		ТекСтрКарты.Number = СокрЛП(ТекСтрКарты.Number);
		ТекСтрКарты.DiscountCardUID = СокрЛП(ТекСтрКарты.DiscountCardUID);
		 
	КонецЦикла;
	
	ТекДата = ТекущаяДата();
	  		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияКПокупателям.НомерКарты_3p
		|ИЗ
		|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
		|ГДЕ
		|	ОбращенияКПокупателям.ДатаДобавления > &ПоследниеТриМесяца
		|	И ОбращенияКПокупателям.НомерКарты_3p В(&СписокЗагружаемыхКарт)
		|	И ОбращенияКПокупателям.КтоЗвонил <> """"";

	Запрос.УстановитьПараметр("ПоследниеТриМесяца", ДобавитьМесяц(ТекДата, -3));
	Запрос.УстановитьПараметр("СписокЗагружаемыхКарт", СписокЗагружаемыхКарт);

	ТЗ_РанееОбрабатываемые = Запрос.Выполнить().Выгрузить();
    НомерВыводимойСтр = 0;		
	Для каждого ТекСтрокаНомераКарты Из Таб_ЧЕКИ Цикл
		
 		лкТекНомерКарты = СокрЛП(ТекСтрокаНомераКарты.НомерКарты);
			
		Если лкТекНомерКарты = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("НомерКарты_3p", лкТекНомерКарты);
		МассСтрок = ТЗ_РанееОбрабатываемые.НайтиСтроки(лкОтбор);
		Если МассСтрок.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("Email", лкТекНомерКарты);
		НайденыеСтрТел = ТЗ_Телефонов.НайтиСтроки(лкОтбор);
		Если НайденыеСтрТел.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекСтрТел Из НайденыеСтрТел Цикл
			
			лкТекКонтакт = СокрЛП(ТекСтрТел.Phone);	
			
			Если Лев(лкТекКонтакт, 1) <> "9" И ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000001") Тогда // городской
				лкТекКонтакт = "";
				Продолжить;
			КонецЕсли;	
			
			Если ЭтоРассылка Тогда
				
				лкТекКомментарий = ""+СокрЛП(ТекСообщениеДляРассылки);
				лкТекФИО = СокрЛП(ТекСтрТел.Имя);
				лкТекКтоЗвонил = ПараметрыСеанса.ТекущийПользователь;
				лкТекДатаЗвонка = ТекДата;
				Если ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000002") и ЗначениеЗаполнено(ТекСтрТел.Email_fact) Тогда
					лкТекКонтакт = ТекСтрТел.Email_fact;
				ИначеЕсли ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000001") и ЗначениеЗаполнено(ТекСтрТел.Phone) Тогда
					лкТекКонтакт = ТекСтрТел.Phone;
				ИначеЕсли ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000003") и ЗначениеЗаполнено(ТекСтрТел.Phone) Тогда
					лкТекКонтакт = ТекСтрТел.Phone;					
				Иначе
					лкТекКонтакт = "";
					Продолжить;
				КонецЕсли;	
				лкТекТипСвязи = ТекТипСвязи;
			Иначе
				лкТекФИО = СокрЛП(ТекСтрТел.Имя);
				лкТекТипСвязи = "";
				лкТекКомментарий = "";
				лкТекДатаЗвонка = "";
			КонецЕсли;
			
		КонецЦикла;
		
		Если лкТекКонтакт = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерВыводимойСтр = НомерВыводимойСтр +1;
		Если ТекМаксКол < НомерВыводимойСтр Тогда
			Прервать;		
		КонецЕсли;
		
		НоваяСтрТЗ = лкТабДвижений.Добавить();
		
		НоваяСтрТЗ.ФИО = Лев(ВРЕГ(лкТекФИО), 1)+Прав(НРЕГ(лкТекФИО), СтрДлина(лкТекФИО)-1);
		НоваяСтрТЗ.Комментарий = лкТекКомментарий;
		НоваяСтрТЗ.КтоЗвонил = ЛкТекКтоЗвонил;
		НоваяСтрТЗ.ДатаЗвонка = лкТекДатаЗвонка;
		НоваяСтрТЗ.Контакт = лкТекКонтакт;
		
		НоваяСтрТЗ.ТипСвязи = лкТекТипСвязи;
		
		//НоваяСтрТЗ.id_3p = 0;
		НоваяСтрТЗ.НомерКарты_3p = лкТекНомерКарты;
		//НоваяСтрТЗ.ГлавныйОтвет = 0;
		//НоваяСтрТЗ.Ответ2 = 0;
		//НоваяСтрТЗ.Ответ3 = 0;
		НоваяСтрТЗ.Вопрос = ПараметрКоманды.Вопрос;
		НоваяСтрТЗ.Выборка =  Справочники.СохраненныеВыборкиПоПокупателям.ПоАбонементамСоСпецЦенами;
		НоваяСтрТЗ.Проект = ПараметрКоманды.Проект;
		НоваяСтрТЗ.ТипОбращения = ТекТипОбращения;
		//НоваяСтрТЗ.Доступность = 0;
		НоваяСтрТЗ.Статус = 0;
		НоваяСтрТЗ.Область = 0;
		НоваяСтрТЗ.ДатаОбласть = 0;
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("Number", лкТекНомерКарты);
		НайденыеСтрИДКарт = ТЗ_НомеровКарт.НайтиСтроки(лкОтбор);
		Для каждого ТекСтрКарты Из НайденыеСтрИДКарт Цикл	
			
			НоваяСтрТЗ.DiscountCardUID = СокрЛП(ТекСтрКарты.DiscountCardUID);
			
		КонецЦикла;
	КонецЦикла;
		
	Если лкТабДвижений.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбращенияКПокупателям.id_3p КАК id_3p
	|ИЗ
	|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
	|
	|УПОРЯДОЧИТЬ ПО
	|	id_3p УБЫВ";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ТекНомер = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекНомер = ВыборкаДетальныеЗаписи.id_3p;
	КонецЦикла;
	
	ТекGUID_Загрузки	= СокрЛП(Новый УникальныйИдентификатор);
	Для каждого ТекСтрока Из лкТабДвижений Цикл
        ТекНомер = ТекНомер + 1;
 		ТекСтрока.id_3p = ТекНомер;
        ТекСтрока.GUID_Загрузки = ТекGUID_Загрузки;
		ТекСтрока.ДатаДобавления = ТекДата;
 	КонецЦикла;
	
	Для каждого ТекСтрлкТабДвижений Из лкТабДвижений Цикл
 
 		ТекСтрлкТабДвижений.Комментарий = СтрЗаменить(ТекСтрлкТабДвижений.Комментарий, "<ФИО>", ТекСтрлкТабДвижений.ФИО);
		ТекСтрлкТабДвижений.Комментарий = СтрЗаменить(ТекСтрлкТабДвижений.Комментарий, "<НомерКарты>", ТекСтрлкТабДвижений.НомерКарты_3p);
 
 	КонецЦикла;
	
	НаборРег = РегистрыСведений.ОбращенияКПокупателям.СоздатьНаборЗаписей();
	НаборРег.Отбор.GUID_Загрузки.Установить(ТекGUID_Загрузки);
	НаборРег.Прочитать();
	НаборРег.Загрузить(лкТабДвижений);
	
	НачатьТранзакцию();
	НаборРег.Записать();	
	ЗафиксироватьТранзакцию();
	    	
	
	Если ЭтоРассылка И ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000001") Тогда
		
		ТекСпис = новый СписокЗначений;
		ТекСпис.Добавить(НаборРег.ВыгрузитьКолонку("id_3p"));
		ТекСпис.Добавить(НаборРег.ВыгрузитьКолонку("GUID_Загрузки"));
		ТекСпис.Добавить(ПараметрКоманды.ТекРассылка.Наименование);
		
		СтрПараметры = Новый Структура;
		СтрПараметры.Вставить("ВходящийСписок", ТекСпис); 
					
		Возврат СтрПараметры;				
			
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция ПостроитьТаблицуРассылкиПоЖалобамНаКассира(ПараметрКоманды) Экспорт
	
	НомерТТ = Формат(СокрЛП(ПараметрКоманды.ТТ.НомерТочки),"ЧГ=0");
	
	Если НомерТТ = "" Тогда
		Сообщить("В данном обращении не заполнена ТТ!");
		Возврат Ложь;
	КонецЕсли;
		
	ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
	ТекСообщениеДляРассылки = "";
	ТекТипСвязи = "";
	ТекМаксКол = ПараметрКоманды.МаксКол;
	ЭтоРассылка = Ложь;
	лкТекКтоЗвонил = ПараметрыСеанса.ТекущийПользователь;
	
	лкВопрос = Справочники.СписокВопросовПриОпросеПокупателей.НайтиПоНаименованию("Как понравилось обслуживание продавца?");
	
	Если не ЗначениеЗаполнено(лкВопрос) Тогда
		лкВопрос = Справочники.СписокВопросовПриОпросеПокупателей.СоздатьЭлемент();		
		лкВопрос.Наименование = "Как понравилось обслуживание продавца?";
		лкВопрос.Записать();
		лкВопрос = лкВопрос.Ссылка;
	КонецЕсли;	
	
	// ПОЛУЧАЕМ ЧЕКИ	
	ТекстЗапроса = "SELECT Cast([CodeFL] as int) CodeFl FROM [SMS_REPL].[dbo].[Cashier_view] WHERE [FIO] = '~~~~~'";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",ПараметрКоманды.ИмяКассира);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "^^^^^", НомерТТ);
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ_СсылкаНаКассира = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	ТекСылкаНаКассира = "";
	Для каждого ТекСтр Из ТЗ_СсылкаНаКассира Цикл
 
 		ТекСылкаНаКассира = Формат(ТекСтр.CodeFl, "ЧГ=0");	
 
 	КонецЦикла;
	
	Если ТекСылкаНаКассира = "" Тогда
		Сообщить("Кассир "+ ПараметрКоманды.ИмяКассира + " в базе не найден!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "SELECT TOP 5000 [BONUSCARD] as НомерКарты FROM [SMS_UNION].[dbo].[Checks]  
	|WHERE 
	|[CashierID] = '~~~~~' 
	|AND [ShopNo] = ^^^^^ 
	|AND [BONUSCARD] <> ''
	|AND [CloseDate] >= 'qqqqq' 
	|AND [CloseDate] <= 'xxxxx'";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", ТекСылкаНаКассира);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "^^^^^", НомерТТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "qqqqq", ПараметрКоманды.ДатаСобытия - (172800));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "xxxxx", ПараметрКоманды.ДатаСобытия + (172800));	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	Таб_ЧЕКИ = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат Ложь;
	КонецЕсли;	
		
	Таб_ЧЕКИ.Свернуть("НомерКарты", "");
	Если ПараметрКоманды.ИспользоватьПриоритеты Тогда
		
		//+++АК SHEP 2018.07.04 ИП-00018827: меняем [Loyalty].[dbo].[TransactionHistory] на процедуры
		//Таб_ЧЕКИ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
		//СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
		//
		//лкСтрОтбораПоКартам = " (";
		//Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
		//	
		//	лкСтрОтбораПоКартам = лкСтрОтбораПоКартам + " DC.Number = '"+текСтрТЗЧеков.НомерКарты+"' or ";
		//	
		//КонецЦикла;		
		//лкСтрОтбораПоКартам = Лев(лкСтрОтбораПоКартам, СтрДлина(лкСтрОтбораПоКартам)-3);
		//лкСтрОтбораПоКартам = лкСтрОтбораПоКартам + ")";
		//
		//ТекстЗапроса ="SELECT DISTINCT DC.Number, TH.[Time] as DataTimeShtamp
		//|FROM TransactionHistory TH WITH(NOLOCK)	
		//|INNER JOIN Indicator WITH(NOLOCK) ON TH.IndicatorUID = Indicator.IndicatorUID 
		//|LEFT JOIN DiscountCard DC WITH(NOLOCK) ON TH.DiscountCardUID = DC.DiscountCardUID
		//
		//|WHERE";
		//ТекстЗапроса = ТекстЗапроса + лкСтрОтбораПоКартам; //|( DC.Number = '0770395' or DC.Number = '0259833' or DC.Number = '0000100') 		
		//
		//ТекстЗапроса = ТекстЗапроса + " and (TH.[Time] BETWEEN {d'2012-01-01'} AND {d'2100-01-01'}) 
		//|and TH.TransactionType=1 and TH.PromotionProgramUID is null and TH.ShopNo <> (-999)";
		//		
		//Попытка
		//	
		//	Command = Новый COMОбъект("ADODB.Command");
		//	
		//	CurrentConnection = База_Подключение(СтрокаПодключения);
		//	Command.ActiveConnection = CurrentConnection;
		//	Command.CommandTimeout = 0;
		//	RecordSet = Новый COMОбъект("ADODB.RecordSet");
		//					
		//	Command.CommandText = ТекстЗапроса;			
		//	RecordSet = Command.Execute(); //Выполнение и получение набора данных
		//	ТЗ_Фин = База_РезульататЗапросВТаблицуЗначений(RecordSet);
		//	RecordSet.Close();
		//	
		//	//ТабПриоритетов = Таб_ЧЕКИ.Скопировать(,"ДатаПоЧеку,НомерКарты");
		//	//ТабПриоритетов.Свернуть("ДатаПоЧеку,НомерКарты","");
		//	//ТабПриоритетов.Сортировать("ДатаПоЧеку");
		//	
		//	лкТабСортировки = Новый ТаблицаЗначений;
		//	лкТабСортировки.Колонки.Добавить("ДатаПоЧеку", Новый ОписаниеТипов("Дата"));
		//	
		//	РезСоотв = Новый Соответствие;
		//	лкСписокОбработанных = Новый СписокЗначений;
		//	Для каждого лкТекСтрТаб Из ТЗ_Фин Цикл
		//		
		//		лкТабСортировки.Очистить();
		//		
		//		Если лкСписокОбработанных.НайтиПоЗначению(лкТекСтрТаб.Number) <> Неопределено Тогда
		//			Продолжить;
		//		КонецЕсли;	
		//		
		//		текОтборНом = Новый Структура;
		//		текОтборНом.Вставить("Number",лкТекСтрТаб.Number);
		//		массНайден = ТЗ_Фин.НайтиСтроки(текОтборНом);
		//		
		//		Если массНайден.Количество() = 1 Тогда
		//			РезСоотв.Вставить(лкТекСтрТаб.Number, 0);
		//		ИначеЕсли массНайден.Количество() > 1 Тогда
		//			
		//			Для каждого ТекэлМасс Из массНайден Цикл
		//				
		//				новСтрСортировки = лкТабСортировки.Добавить();
		//				новСтрСортировки.ДатаПоЧеку = ТекэлМасс.DataTimeShtamp;
		//				
		//			КонецЦикла;
		//			
		//			лкТабСортировки.Сортировать("ДатаПоЧеку УБЫВ");
		//			СекундРазница = лкТабСортировки[0].ДатаПоЧеку - лкТабСортировки[1].ДатаПоЧеку;
		//			РезСоотв.Вставить(СокрЛП(лкТекСтрТаб.Number), СекундРазница);
		//			
		//		КонецЕсли;	
		//		
		//		лкСписокОбработанных.Добавить(лкТекСтрТаб.Number);
		//	КонецЦикла; 	
		//	
		//	Для каждого текСтрТЗЧеков Из Таб_ЧЕКИ Цикл
		//		
		//		текСтрТЗЧеков.Приоритет = РезСоотв[текСтрТЗЧеков.НомерКарты];
		//		
		//	КонецЦикла;
		//	
		//Исключение	
		//	ВызватьИсключение ОписаниеОшибки();
		//КонецПопытки;
		//
		//Таб_ЧЕКИ.Сортировать("Приоритет");
		
		ТабЧекиСортироватьПоПриоритету(Таб_ЧЕКИ);
		//---АК SHEP 2018.07.04
		
	КонецЕсли;
		
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбращенияКПокупателям.id_3p,
		|	ОбращенияКПокупателям.НомерКарты_3p,
		|	ОбращенияКПокупателям.ДатаДобавления,
		|	ОбращенияКПокупателям.ДатаЗвонка,
		|	ОбращенияКПокупателям.КтоЗвонил,
		|	ОбращенияКПокупателям.ГлавныйОтвет,
		|	ОбращенияКПокупателям.Ответ2,
		|	ОбращенияКПокупателям.Ответ3,
		|	ОбращенияКПокупателям.Комментарий,
		|	ОбращенияКПокупателям.Вопрос,
		|	ОбращенияКПокупателям.Выборка,
		|	ОбращенияКПокупателям.Проект,
		|	ОбращенияКПокупателям.ТипОбращения,
		|	ОбращенияКПокупателям.Доступность,
		|	ОбращенияКПокупателям.Статус,
		|	ОбращенияКПокупателям.Контакт,
		|	ОбращенияКПокупателям.Область,
		|	ОбращенияКПокупателям.ДатаОбласть,
		|	ОбращенияКПокупателям.ТипСвязи,
		|	ОбращенияКПокупателям.GUID_Загрузки,
		|	ОбращенияКПокупателям.DiscountCardUID,
		|	ОбращенияКПокупателям.ФИО,
		|	ОбращенияКПокупателям.GUID_Жалобы
		|ИЗ
		|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям";

	лкТабДвижений = Запрос.Выполнить().Выгрузить();	
	лкТабДвижений.Очистить();
	
	////////////////////////////////////////////	
	ВнешниеИсточникиДанных.Loyality.УстановитьСоединение();
	
	МассНомеров = Таб_ЧЕКИ.ВыгрузитьКолонку("НомерКарты");
	лкТекСписокНомеровКарт = Новый СписокЗначений;
	лкТекСписокНомеровКарт.ЗагрузитьЗначения(МассНомеров);
	
	лкЗапросКарт = Новый Запрос;
	лкЗапросКарт.Текст = 
		"ВЫБРАТЬ
		|	Покупатели.Email,
		|	Покупатели.Phone,
		|	Покупатели.Email_fact,
		|	Покупатели.Фамилия КАК Фамилия,
		|	Покупатели.Имя,
		|	Покупатели.Отчество,
		|	"""" КАК NameCl,
		|	Покупатели.FullName
		|ИЗ
		|	ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели
		|ГДЕ
		|	Покупатели.Email В(&СписокНомеровКарт)
		|	И Покупатели.Phone <> """"
		|	И Покупатели.IsEmployee <> 1";

	лкЗапросКарт.УстановитьПараметр("СписокНомеровКарт", лкТекСписокНомеровКарт);

	ТЗ_Телефонов = лкЗапросКарт.Выполнить().Выгрузить();
	
	ВнешниеИсточникиДанных.Loyality.РазорватьСоединение();
			
	СписокЗагружаемыхКарт = Новый СписокЗначений;
	СписокЗагружаемыхКарт.ЗагрузитьЗначения(ТЗ_Телефонов.ВыгрузитьКолонку("Email"));
	
	Для каждого ТекСтрТелеф Из ТЗ_Телефонов Цикл
 
 		ТекСтрТелеф.Email = СокрЛП(ТекСтрТелеф.Email);
		ТекСтрТелеф.Phone = СокрЛП(ТекСтрТелеф.Phone);
		ТекСтрТелеф.Email_fact = СокрЛП(ТекСтрТелеф.Email_fact);
		ТекСтрТелеф.NameCl = СокрЛП(""+СокрЛП(ТекСтрТелеф.Фамилия) + " "+СокрЛП(ТекСтрТелеф.Имя)+" "+СокрЛП(ТекСтрТелеф.Отчество));
 
	КонецЦикла;
	
	////////////////////////////////////////////
	
	ЗапросНом = Новый Запрос;
	ЗапросНом.Текст = 
		"ВЫБРАТЬ
		|	КартыПокупателей.DiscountCardUID,
		|	КартыПокупателей.Number
		|ИЗ
		|	ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
		|ГДЕ
		|	КартыПокупателей.Number В(&СписокНомеровКарт)";
    ЗапросНом.УстановитьПараметр("СписокНомеровКарт", лкТекСписокНомеровКарт);
	ТЗ_НомеровКарт = ЗапросНом.Выполнить().Выгрузить();
	
	////////////////////////////////////////////
	
	Для каждого ТекСтрКарты Из ТЗ_НомеровКарт Цикл
 
 		ТекСтрКарты.Number = СокрЛП(ТекСтрКарты.Number);
		ТекСтрКарты.DiscountCardUID = СокрЛП(ТекСтрКарты.DiscountCardUID);
		 
	КонецЦикла;
	
	ТекДата = ТекущаяДата();
	  		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияКПокупателям.НомерКарты_3p
		|ИЗ
		|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
		|ГДЕ
		|	ОбращенияКПокупателям.ДатаДобавления > &ПоследниеТриМесяца
		|	И ОбращенияКПокупателям.НомерКарты_3p В(&СписокЗагружаемыхКарт)
		|	И ОбращенияКПокупателям.КтоЗвонил <> """"";

	Запрос.УстановитьПараметр("ПоследниеТриМесяца", ДобавитьМесяц(ТекДата, -3));
	Запрос.УстановитьПараметр("СписокЗагружаемыхКарт", СписокЗагружаемыхКарт);

	ТЗ_РанееОбрабатываемые = Запрос.Выполнить().Выгрузить();
    НомерВыводимойСтр = 0;		
	Для каждого ТекСтрокаНомераКарты Из Таб_ЧЕКИ Цикл
		
 		лкТекНомерКарты = СокрЛП(ТекСтрокаНомераКарты.НомерКарты);
		
		Если ПараметрКоманды.НомерКартыЖалобы = лкТекНомерКарты Тогда
			Продолжить;
		КонецЕсли;	
		
		Если лкТекНомерКарты = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("НомерКарты_3p", лкТекНомерКарты);
		МассСтрок = ТЗ_РанееОбрабатываемые.НайтиСтроки(лкОтбор);
		Если МассСтрок.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("Email", лкТекНомерКарты);
		НайденыеСтрТел = ТЗ_Телефонов.НайтиСтроки(лкОтбор);
		Если НайденыеСтрТел.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекСтрТел Из НайденыеСтрТел Цикл
			
			лкТекКонтакт = СокрЛП(ТекСтрТел.Phone);	
			
			Если Лев(лкТекКонтакт, 1) <> "9" И ТекТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоКоду("000000001") Тогда // городской
				лкТекКонтакт = "";
				Продолжить;
			КонецЕсли;	
			
			лкТекФИО = СокрЛП(ТекСтрТел.Имя);
			лкТекТипСвязи = "";
			лкТекКомментарий = "";
			лкТекДатаЗвонка = "";
						
		КонецЦикла;
		
		Если лкТекКонтакт = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерВыводимойСтр = НомерВыводимойСтр +1;
		Если ТекМаксКол < НомерВыводимойСтр Тогда
			Прервать;		
		КонецЕсли;
		
		НоваяСтрТЗ = лкТабДвижений.Добавить();
		
		НоваяСтрТЗ.GUID_Жалобы = ПараметрКоманды.GUID_Жалобы;
		
		НоваяСтрТЗ.ФИО = Лев(ВРЕГ(лкТекФИО), 1)+Прав(НРЕГ(лкТекФИО), СтрДлина(лкТекФИО)-1);
		НоваяСтрТЗ.Комментарий = лкТекКомментарий;
		НоваяСтрТЗ.КтоЗвонил = ЛкТекКтоЗвонил;
		НоваяСтрТЗ.ДатаЗвонка = лкТекДатаЗвонка;
		НоваяСтрТЗ.Контакт = лкТекКонтакт;
		
		НоваяСтрТЗ.ТипСвязи = лкТекТипСвязи;
				
		НоваяСтрТЗ.НомерКарты_3p = лкТекНомерКарты;
		НоваяСтрТЗ.Вопрос = лкВопрос;
		НоваяСтрТЗ.Выборка = Справочники.СохраненныеВыборкиПоПокупателям.ВыборкаПоЖалобамНаПродавца;
		НоваяСтрТЗ.Проект = Перечисления.Проекты.ВкусВилл;
		НоваяСтрТЗ.ТипОбращения = ТекТипОбращения;
		НоваяСтрТЗ.Статус = 0;
		НоваяСтрТЗ.Область = 0;
		НоваяСтрТЗ.ДатаОбласть = 0;
		
		лкОтбор = Новый Структура();
		лкОтбор.Вставить("Number", лкТекНомерКарты);
		НайденыеСтрИДКарт = ТЗ_НомеровКарт.НайтиСтроки(лкОтбор);
		Для каждого ТекСтрКарты Из НайденыеСтрИДКарт Цикл	
			
			НоваяСтрТЗ.DiscountCardUID = СокрЛП(ТекСтрКарты.DiscountCardUID);
			
		КонецЦикла;
	КонецЦикла;
		
	Если лкТабДвижений.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбращенияКПокупателям.id_3p КАК id_3p
	|ИЗ
	|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
	|
	|УПОРЯДОЧИТЬ ПО
	|	id_3p УБЫВ";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ТекНомер = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекНомер = ВыборкаДетальныеЗаписи.id_3p;
	КонецЦикла;
	
	ТекGUID_Загрузки	= СокрЛП(Новый УникальныйИдентификатор);
	Для каждого ТекСтрока Из лкТабДвижений Цикл
        ТекНомер = ТекНомер + 1;
 		ТекСтрока.id_3p = ТекНомер;
        ТекСтрока.GUID_Загрузки = ТекGUID_Загрузки;
		ТекСтрока.ДатаДобавления = ТекДата;
 	КонецЦикла;
	
	Для каждого ТекСтрлкТабДвижений Из лкТабДвижений Цикл
 
 		ТекСтрлкТабДвижений.Комментарий = СтрЗаменить(ТекСтрлкТабДвижений.Комментарий, "<ФИО>", ТекСтрлкТабДвижений.ФИО);
		ТекСтрлкТабДвижений.Комментарий = СтрЗаменить(ТекСтрлкТабДвижений.Комментарий, "<НомерКарты>", ТекСтрлкТабДвижений.НомерКарты_3p);
 
 	КонецЦикла;
	
	НаборРег = РегистрыСведений.ОбращенияКПокупателям.СоздатьНаборЗаписей();
	НаборРег.Отбор.GUID_Загрузки.Установить(ТекGUID_Загрузки);
	НаборРег.Прочитать();
	НаборРег.Загрузить(лкТабДвижений);
	
	НачатьТранзакцию();
	НаборРег.Записать();	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

// +++ АК CHUM 20.09.2017 0-00016384
Процедура СформироватьТаблицуСоответствий(ТаблицаСоответствийПолейСКДиSQL, ИмяМакета)
	
	ТаблицаСоответствийПолейСКДиSQL.Очистить();
	
	Если ИмяМакета = "МакетПокупатели" Тогда
		
		ИмяТаблицы = "Buyers";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "CustomerUID";
		НовСтр.ПолеSQL = ИмяТаблицы + ".CustomerUID";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Email";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Email_fact";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Телефон";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Phone";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерКарты";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Email";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ДатаРегистрации";
		НовСтр.ПолеSQL = ИмяТаблицы + ".DateRegistration";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ПолноеИмя";
		НовСтр.ПолеSQL = ИмяТаблицы + ".FullName";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Пол";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Sex";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ДеньРождения";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Birthday";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Адрес";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Address";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Улица";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Улица";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Город";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Город";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Дом";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Дом";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерАнкетыНаСайте";
		НовСтр.ПолеSQL = ИмяТаблицы + ".N_Anketa_cite";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Имя";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Имя";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Отчество";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Отчество";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "Фамилия";
		НовСтр.ПолеSQL = ИмяТаблицы + ".Фамилия";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НеРассылатьПокупкуПоКарте";
		НовСтр.ПолеSQL = ИмяТаблицы + ".SMS_karta_no";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "УслугаМобильнаяКартаВключена";
		НовСтр.ПолеSQL = ИмяТаблицы + ".MobilCarta";
		
	ИначеЕсли ИмяМакета = "МакетЧЕКИ" Тогда
		
		ИмяТаблицы1 = "dbo_Checks";
		ИмяТаблицы2 = "dbo_CheckLine";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ДатаПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".JournDateTime";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ИдентификаторЧека";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".CheckUID";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерМагазина";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".ShopNo";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаОплатыВсегоПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".BaseSum";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаОплатыНаличныеПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".SummCash";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаОплатыБанковскаяКартаПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".SummBank";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаБонусПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".SummBonus";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаСкидкиПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".Discount";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ТипОперации";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".OperationType";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "id_tov_cl";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".id_tov_cl";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ЦенаПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".BasePrice";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "id_tt_cl";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".id_tt_cl";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаВсегоПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".BaseSum";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "КоличествоПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".Quantity";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаСкидкиПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".Discount";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ТипСкидки";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".DiscountType";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерСтроки";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".CashCheckLineNo";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ИД_Производитель";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".ManufacturerID";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерКарты";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".BONUSCARD";
		
	ИначеЕсли ИмяМакета = "МакетЧЕКИ_ВкусВилл" Тогда
		
		ИмяТаблицы1 = "dbo_Checks";
		ИмяТаблицы2 = "dbo_CheckLine";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ДатаПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".OpenDate";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ИдентификаторЧека";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".CheckUID";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерМагазина";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".ShopNo";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаОплатыВсегоПоЧеку";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".BaseSum";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ТипОперации";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".OperationType";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "id_tov_cl";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".id_tov_cl";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ЦенаПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".BasePrice";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "id_tt_cl";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".id_tt_cl";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаВсегоПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".BaseSum";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "КоличествоПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".Quantity";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "СуммаСкидкиПоСтроке";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".Discount";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерСтроки";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".CashCheckLineNo";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "ИД_Производитель";
		НовСтр.ПолеSQL = ИмяТаблицы2 + ".id_kontr";
		
		НовСтр = ТаблицаСоответствийПолейСКДиSQL.Добавить();
		НовСтр.ПолеСКД = "НомерКарты";
		НовСтр.ПолеSQL = ИмяТаблицы1 + ".BONUSCARD";		
		
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСтрокуУсловийДляЗапросаSQL(СтрокаУсловий, ТаблицаСоответствийПолейСКДиSQL, ЭлементыОтбора)
	
	СтрокаУсловий = "WHERE";
	УстановленоХотяБыОдноУсловие = Ложь;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		СтрТаблицыСоответствий = ТаблицаСоответствийПолейСКДиSQL.Найти(Строка(ЭлементОтбора.ЛевоеЗначение), "ПолеСКД");
		Если СтрТаблицыСоответствий = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При формировании условий запроса не было найдено поле """ + ЭлементОтбора.ЛевоеЗначение + """ в таблице
																| соответствий! Результаты выполнения запроса не корректны.");
			Продолжить;
		КонецЕсли;
				
		СтрВидСравнения 	= "";
		СтрПравоеЗначение 	= "";
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				
			СтрВидСравнения 	= "LIKE";
			
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				СтрВидСравнения 	= "NOT LIKE";
			КонецЕсли;
			
			СтрПравоеЗначение 	= "'%" + СокрЛП(ЭлементОтбора.ПравоеЗначение) + "%'";
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
			
			СтрВидСравнения 	= ?(ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС, "LIKE", "NOT LIKE");
			СтрПравоеЗначение 	= "'" + СокрЛП(ЭлементОтбора.ПравоеЗначение) + "%'";
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
					ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше
					ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					
			СтрВидСравнения = "=";
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				СтрВидСравнения = "<>";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				СтрВидСравнения = ">";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				СтрВидСравнения = "<";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				СтрВидСравнения = ">=";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				СтрВидСравнения = "<=";
			КонецЕсли;				
				
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				СтрПравоеЗначение 	= "'" + СокрЛП(ЭлементОтбора.ПравоеЗначение) + "'";
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Число") Тогда
				СтрПравоеЗначение 	= Формат(ЭлементОтбора.ПравоеЗначение, "ЧГ=");
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Булево") Тогда
				СтрПравоеЗначение 	= ?(ЭлементОтбора.ПравоеЗначение, 1, 0);
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Дата") Тогда
				СтрПравоеЗначение 	= "'" + Формат(ЭлементОтбора.ПравоеЗначение, "ДФ=гггг-ММ-дд") + "T" + Формат(ЭлементОтбора.ПравоеЗначение, "ДФ=ЧЧ:мм:сс") + "'";
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
				СтрПравоеЗначение 	= "'" + Формат(ЭлементОтбора.ПравоеЗначение.Дата, "ДФ=гггг-ММ-дд") + "T" + Формат(ЭлементОтбора.ПравоеЗначение.Дата, "ДФ=ЧЧ:мм:сс") + "'";
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			
			СтрВидСравнения 	= ?(ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке, "IN", "NOT IN");
			СтрПравоеЗначение 	= "(";
			
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				Для Каждого Стр Из ЭлементОтбора.ПравоеЗначение Цикл
					Если ТипЗнч(Стр.Значение) = Тип("Строка") Тогда
						СтрПравоеЗначение 	= СтрПравоеЗначение + "'" + СокрЛП(Стр.Значение) + "'";
					ИначеЕсли ТипЗнч(Стр.Значение) = Тип("Число") Тогда
						СтрПравоеЗначение 	= СтрПравоеЗначение + Формат(Стр.Значение, "ЧГ=");
					ИначеЕсли ТипЗнч(Стр.Значение) = Тип("Дата") Тогда
						СтрПравоеЗначение 	= СтрПравоеЗначение + "'" + Формат(Стр.Значение, "ДФ=гггг-ММ-дд") + "T" + Формат(Стр.Значение, "ДФ=ЧЧ:мм:сс") + "'";
					ИначеЕсли ТипЗнч(Стр.Значение) = Тип("СтандартнаяДатаНачала") Тогда
						СтрПравоеЗначение 	= СтрПравоеЗначение + "'" + Формат(Стр.Значение.Дата, "ДФ=гггг-ММ-дд") + "T" + Формат(Стр.Значение.Дата, "ДФ=ЧЧ:мм:сс") + "'";
					КонецЕсли;
					СтрПравоеЗначение = СтрПравоеЗначение + ",";
				КонецЦикла;
			Иначе
				СтрПравоеЗначение = СтрПравоеЗначение + Строка(ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
			
			СтрПравоеЗначение = Сред(СтрПравоеЗначение, 1, СтрДлина(СтрПравоеЗначение) - 1);
			СтрПравоеЗначение = СтрПравоеЗначение + ")";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрВидСравнения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При формировании условий запроса не установлен вид сравнения """ + Строка(ЭлементОтбора.ВидСравнения) + """
																| Результаты выполнения запроса не корректны.");
			Продолжить;
		КонецЕсли;
		
		СтрокаУсловий = СтрокаУсловий + " " + СтрТаблицыСоответствий.ПолеSQL + " " + СтрВидСравнения + " " + СтрПравоеЗначение + "
							|	AND";
		
		УстановленоХотяБыОдноУсловие = Истина;
		
	КонецЦикла;
	
	Если УстановленоХотяБыОдноУсловие Тогда
		СтрокаУсловий = Сред(СтрокаУсловий, 1, СтрДлина(СтрокаУсловий) - 4);
	Иначе
		СтрокаУсловий = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗапросSQL(ЗапросSQL, СтрокаУсловий, ИмяМакета)
	
	Если ИмяМакета = "МакетПокупатели" Тогда
		
		ЗапросSQL = "SELECT
					|	Buyers.CustomerUID AS CustomerUID,
					|	Buyers.Email_fact AS Email,
					|	Buyers.Phone AS Телефон,
					|	Buyers.Email AS НомерКарты,
					|	Buyers.DateRegistration AS ДатаРегистрации,
					|	Buyers.FullName AS ПолноеИмя,
					|	Buyers.Sex AS Пол,
					|	Buyers.Birthday AS ДеньРождения,
					|	Buyers.Address AS Адрес,
					|	Buyers.Улица AS Улица,
					|	Buyers.Город AS Город,
					|	Buyers.Дом AS Дом,
					|	Buyers.N_Anketa_cite AS НомерАнкетыНаСайте,
					|	Buyers.Имя AS Имя,
					|	Buyers.Отчество AS Отчество,
					|	Buyers.Фамилия AS Фамилия,
					|	Buyers.SMS_karta_no AS НеРассылатьПокупкуПоКарте,
					|	Buyers.MobilCarta AS УслугаМобильнаяКартаВключена
					|FROM [Loyalty].[dbo].[Customer] AS Buyers
					|";
		
		ЗапросSQL = ЗапросSQL + СтрокаУсловий;
		
		ЗапросSQL = ЗапросSQL + "	AND ISNULL(Buyers.Email, '') <> ''
								|	AND ISNULL(Buyers.Phone, '') <> ''
								|	AND Buyers.IsEmployee <> 1";
		
	ИначеЕсли ИмяМакета = "МакетЧЕКИ" Тогда
		
		ЗапросSQL = "SELECT
					|	dbo_Checks.JournDateTime AS ДатаПоЧеку,
					|	dbo_Checks.CheckUID AS ИдентификаторЧека,
					|	dbo_Checks.ShopNo AS НомерМагазина,
					|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
					|	dbo_Checks.SummCash AS СуммаОплатыНаличныеПоЧеку,
					|	dbo_Checks.SummBank AS СуммаОплатыБанковскаяКартаПоЧеку,
					|	dbo_Checks.SummBonus AS СуммаБонусПоЧеку,
					|	dbo_Checks.Discount AS СуммаСкидкиПоЧеку,
					|	dbo_Checks.OperationType AS ТипОперации,
					|	dbo_CheckLine.id_tov_cl,
					|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
					|	dbo_CheckLine.id_tt_cl,
					|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
					|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
					|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
					|	dbo_CheckLine.DiscountType AS ТипСкидки,
					|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
					|	dbo_CheckLine.ManufacturerID AS ИД_Производитель,
					|	dbo_Checks.BONUSCARD AS НомерКарты
					|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
					|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
					|";
		
		ЗапросSQL = ЗапросSQL + СтрокаУсловий;
		
		ЗапросSQL = ЗапросSQL + "	AND ISNULL(dbo_Checks.BONUSCARD, '') <> ''";
		
	ИначеЕсли ИмяМакета = "МакетЧЕКИ_ВкусВилл" Тогда
		
		ЗапросSQL = "SELECT
					|	dbo_Checks.OpenDate AS ДатаПоЧеку,
					|	dbo_Checks.CheckUID AS ИдентификаторЧека,
					|	dbo_Checks.ShopNo AS НомерМагазина,
					|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
					|	dbo_Checks.OperationType AS ТипОперации,
					|	dbo_CheckLine.id_tov_cl,
					|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
					|	dbo_CheckLine.id_tt_cl,
					|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
					|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
					|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
					|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
					|	dbo_Checks.BONUSCARD AS НомерКарты
					|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
					|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
					|";
		
		ЗапросSQL = ЗапросSQL + СтрокаУсловий;
		
		ЗапросSQL = ЗапросSQL + "	AND ISNULL(dbo_Checks.BONUSCARD, '') <> ''";
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОсновнойЗапросSQLПоЧекам(Проект, НачПериода, КонПериода)
	
	Если Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "SELECT
		|	dbo_Checks.JournDateTime AS ДатаПоЧеку,
		|	dbo_Checks.CheckUID AS ИдентификаторЧека,
		|	dbo_Checks.ShopNo AS НомерМагазина,
		|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
		|	dbo_Checks.SummCash AS СуммаОплатыНаличныеПоЧеку,
		|	dbo_Checks.SummBank AS СуммаОплатыБанковскаяКартаПоЧеку,
		|	dbo_Checks.SummBonus AS СуммаБонусПоЧеку,
		|	dbo_Checks.Discount AS СуммаСкидкиПоЧеку,
		|	dbo_Checks.OperationType AS ТипОперации,
		|	dbo_CheckLine.id_tov_cl,
		|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
		|	dbo_CheckLine.id_tt_cl,
		|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
		|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
		|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
		|	dbo_CheckLine.DiscountType AS ТипСкидки,
		|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
		|	dbo_CheckLine.ManufacturerID AS ИД_Производитель,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE dbo_Checks.OperationType = 1
		|		AND ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.JournDateTime BETWEEN " + "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'" + "
		|";
	Иначе
		ЗапросSQL = "SELECT
		|	dbo_Checks.OpenDate AS ДатаПоЧеку,
		|	dbo_Checks.CheckUID AS ИдентификаторЧека,
		|	dbo_Checks.ShopNo AS НомерМагазина,
		|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
		|	dbo_Checks.OperationType AS ТипОперации,
		|	dbo_CheckLine.id_tov_cl,
		|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
		|	dbo_CheckLine.id_tt_cl,
		|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
		|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
		|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
		|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
		|	dbo_CheckLine.id_kontr AS ИД_Производитель,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.OpenDate BETWEEN " + "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'" + "
		|";
	КонецЕсли;
	
	Возврат ЗапросSQL;
	
КонецФункции

//+++АК BARA 17252	
Функция ПолучитьОсновнойЗапросSQLПоАРП(НомерМагазина,Проект, НачПериода, КонПериода,РегулярностьПосещений,МинимальнаяСуммаЧека,МаксимальнаяСуммаЧека,Периодичность)
	
	Если Периодичность = "Квартал" Тогда 
		РазностьПериодовВМесецах  = (Год(КонПериода)-Год(НачПериода))*12 +  (Месяц(КонецКвартала(КонПериода))-Месяц(НачалоКвартала(НачПериода)))+1;
	Иначе
		РазностьПериодовВМесецах  = (Год(КонПериода)-Год(НачПериода))*12 +  (Месяц(КонПериода)-Месяц(НачПериода))+1;
	КонецЕсли;
	
	РазностьПериодовВНеделях = 1;
	КонПериодаН = КонПериода; 
	Пока КонПериодаН>НачПериода Цикл
		РазностьПериодовВНеделях = РазностьПериодовВНеделях+НеделяГода(КонПериодаН);	
		КонПериодаН  =  ДобавитьМесяц(КонПериодаН,-12);
		РазностьПериодовВНеделях = РазностьПериодовВНеделях + НеделяГода(КонецГода(КонПериодаН));
	КонецЦикла;
	РазностьПериодовВНеделях = РазностьПериодовВНеделях - НеделяГода(НачПериода);
	КоличествоРазлПериодов = 1;

	
	ПериодичностьДляЗамены = "m";
	Если Периодичность = "Неделя" Тогда
	ПериодичностьДляЗамены = "wk";	
	КоличествоРазлПериодов = РазностьПериодовВНеделях;
	ИначеЕсли Периодичность = "Месяц" Тогда 
	ПериодичностьДляЗамены = "m";	
	КоличествоРазлПериодов = РазностьПериодовВМесецах;
	ИначеЕсли Периодичность = "Квартал" Тогда
	ПериодичностьДляЗамены = "q";
	КоличествоРазлПериодов = Цел(РазностьПериодовВМесецах/3);
	КонецЕсли;
	
	
	Если Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "select
		|gr.НомерКарты as НомерКарты
		|from (SELECT 
		|datepart(WK,dbo_Checks.JournDateTime) AS Периодичность, 	
		|	Count(distinct dbo_Checks.CheckUID) AS ИдентификаторЧека,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.JournDateTime BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'
		|		and (dbo_Checks.BaseSum>200 or dbo_Checks.BaseSum<500)
		|		and dbo_Checks.ShopNo = 19
		|		group by dbo_Checks.BONUSCARD,datepart(WK,dbo_Checks.JournDateTime)
		|		having Count(distinct dbo_Checks.CheckUID)>=3) as gr
		|		group by gr.НомерКарты
		|		having Count(distinct gr.Периодичность)=3   ";
		ЗапросSQL = СтрЗаменить(ЗапросSQL,"and dbo_Checks.ShopNo = 19","and dbo_Checks.ShopNo = "+Формат(НомерМагазина,"ЧГ="));
		ЗапросSQL = СтрЗаменить(ЗапросSQL,"datepart(WK,dbo_Checks.JournDateTime)","datepart("+ПериодичностьДляЗамены+",dbo_Checks.JournDateTime)");
	Иначе
		ЗапросSQL = "select
		|gr.НомерКарты as НомерКарты
		|from (SELECT 
		|datepart(WK,dbo_Checks.OpenDate) AS Периодичность, 	
		|	Count(distinct dbo_Checks.CheckUID) AS ИдентификаторЧека,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.OpenDate BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'
		|		and (dbo_Checks.BaseSum>200 or dbo_Checks.BaseSum<500)
		|		and dbo_Checks.ShopNo = 1001
		|		group by dbo_Checks.BONUSCARD,datepart(WK,dbo_Checks.OpenDate)
		|		having Count(distinct dbo_Checks.CheckUID)>=3) as gr
		|		group by gr.НомерКарты
		|		having Count(distinct gr.Периодичность)=3  ";
		ЗапросSQL = СтрЗаменить(ЗапросSQL,"and dbo_Checks.ShopNo = 1001","and dbo_Checks.ShopNo = "+Формат(НомерМагазина,"ЧГ="));
		ЗапросSQL = СтрЗаменить(ЗапросSQL,"datepart(WK,dbo_Checks.OpenDate)","datepart("+ПериодичностьДляЗамены+",dbo_Checks.OpenDate)");
	КонецЕсли;
	
	УсловиеПериодВыборки = "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
	"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'";	
	
	Если ЗначениеЗаполнено(МаксимальнаяСуммаЧека) Тогда 
		ЗапросSQL = СтрЗаменить(ЗапросSQL,"or dbo_Checks.BaseSum<500","or dbo_Checks.BaseSum<"+Формат(МаксимальнаяСуммаЧека,"ЧГ="));
	Иначе
		ЗапросSQL = СтрЗаменить(ЗапросSQL,"or dbo_Checks.BaseSum<500","");
	КонецЕсли;
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"dbo_Checks.BaseSum>200","dbo_Checks.BaseSum>"+Формат(МинимальнаяСуммаЧека,"ЧГ="));
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"'2017-09-01T00:00:00' AND '2017-11-30T23:59:59'",УсловиеПериодВыборки);	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"having Count(distinct gr.Периодичность)=3","having Count(distinct gr.Периодичность)="+Формат(КоличествоРазлПериодов,"ЧГ="));
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"having Count(distinct dbo_Checks.CheckUID)>=3) as gr","having Count(distinct dbo_Checks.CheckUID)>="+РегулярностьПосещений+") as gr");
	Возврат ЗапросSQL;
	
КонецФункции
//---	

//+++АК BARA 2017.12.11 17460	
Функция ПолучитьОсновнойЗапросSQLРегулярноПокупаютНаСуммуВМесяц(Проект, НачПериода, КонПериода,МинимальнаяСуммаЗаМесяц)
		
	 КоличествоРазлПериодов = Месяц(КонПериода)-Месяц(НачПериода) + (12*(Год(КонПериода)-Год(НачПериода)));
	
	Если Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "select
		|gr.НомерКарты as НомерКарты
		|from (SELECT 
		|datepart(m,dbo_Checks.JournDateTime)+(100*datepart(yy,dbo_Checks.JournDateTime)) AS Периодичность, 	
		|SUM(dbo_Checks.BaseSum) as basesum,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.JournDateTime BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'
		|		group by dbo_Checks.BONUSCARD,datepart(m,dbo_Checks.JournDateTime)+(100*datepart(yy,dbo_Checks.JournDateTime))
		|		having SUM(dbo_Checks.BaseSum)>=10000) as gr
		|		group by gr.НомерКарты
		|		having Count(distinct gr.Периодичность)=3 ";
	Иначе
		ЗапросSQL = "select
		|gr.НомерКарты as НомерКарты
		|from (SELECT 
		|datepart(m,dbo_Checks.OpenDate)+(100*datepart(yy,dbo_Checks.OpenDate)) AS Периодичность, 	
		|	SUM(dbo_Checks.BaseSum) as basesum,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.OpenDate BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'
		|		group by dbo_Checks.BONUSCARD,datepart(m,dbo_Checks.OpenDate)+(100*datepart(yy,dbo_Checks.OpenDate)) 
		|		having SUM(dbo_Checks.BaseSum)>=10000) as gr
		|		group by gr.НомерКарты
		|		having Count(distinct gr.Периодичность)=3  ";
	КонецЕсли;
	
	УсловиеПериодВыборки = "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
	"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'";	
	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"SUM(dbo_Checks.BaseSum)>=10000","SUM(dbo_Checks.BaseSum)>="+Формат(МинимальнаяСуммаЗаМесяц,"ЧГ="));
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"'2017-09-01T00:00:00' AND '2017-11-30T23:59:59'",УсловиеПериодВыборки);	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"having Count(distinct gr.Периодичность)=3","having Count(distinct gr.Периодичность)="+Формат(КоличествоРазлПериодов,"ЧГ="));

	Возврат ЗапросSQL;
	
КонецФункции

//+++АК BARA 2017.12.11 17798	
Функция ПолучитьОсновнойЗапросSQLРегулярноПокупаютНаСуммуЧека(СписокМагазинов, НачПериода, КонПериода,МинимальнаяСуммаЗаМесяц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&МассивМагазинов)";
	Запрос.УстановитьПараметр("МассивМагазинов", СписокМагазинов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	УсловиеОтборПоМагазина = "(";	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УсловиеОтборПоМагазина = УсловиеОтборПоМагазина + "or  dbo_Checks.ShopNo = "+Формат(ВыборкаДетальныеЗаписи.НомерТочки,"ЧГ=")+" "
	КонецЦикла;
	
	УсловиеОтборПоМагазина = УсловиеОтборПоМагазина + ")";
	УсловиеОтборПоМагазина = СтрЗаменить(УсловиеОтборПоМагазина,"(or", "( ");
	
	ЗапросSQL = "SELECT 
	|dbo_Checks.BONUSCARD AS НомерКарты				
	|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks			
	|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
	|AND dbo_Checks.OpenDate BETWEEN '2017-10-01T00:00:00' AND '2017-12-30T23:59:59' 
	|and dbo_Checks.ShopNo = vkusvill 
	|and dbo_Checks.BaseSum	> 1000
	|group by dbo_Checks.BONUSCARD
	|union
	|SELECT 
	|dbo_Checks.BONUSCARD AS BONUSCARDvv				
	|FROM SMS_Izbenka.[dbo].[Checks] AS dbo_Checks			
	|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
	|AND dbo_Checks.JournDateTime BETWEEN '2017-10-01T00:00:00' AND '2017-12-30T23:59:59' 
	|and dbo_Checks.ShopNo = izbenka 
	|and dbo_Checks.BaseSum	> 1000
	|group by dbo_Checks.BONUSCARD";
	
	
	
	
	УсловиеПериодВыборки = "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
	"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'";	
	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"dbo_Checks.BaseSum	> 1000","dbo_Checks.BaseSum	> "+Формат(МинимальнаяСуммаЗаМесяц,"ЧГ="));
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"'2017-10-01T00:00:00' AND '2017-12-30T23:59:59'",УсловиеПериодВыборки);	
	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"dbo_Checks.ShopNo = vkusvill",УсловиеОтборПоМагазина);
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"dbo_Checks.ShopNo = izbenka",УсловиеОтборПоМагазина);
	
	
	Возврат ЗапросSQL;
	
КонецФункции


//+++АК BARA ИП-00017573  2017.12.29	
Функция ПолучитьОсновнойЗапросSQLПокупателейКоторыеНеПокупаютСвежуюВыпечку(Проект, НачПериода, КонПериода,НомерТочки,МинимальнаяСуммаПокупок)
		
	
	
	Если Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "SELECT 			
		|		dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|full join
		|	(SELECT 
		|	dbo_Checks.BONUSCARD AS BONUSCARDvv
		|	FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|	WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|	AND dbo_Checks.JournDateTime BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'		 		
		|	and dbo_Checks.ShopNo = 19 
		|	and (dbo_CheckLine.id_tov_cl = 681 or dbo_CheckLine.id_tov_cl = 682 or dbo_CheckLine.id_tov_cl = 1084 or dbo_CheckLine.id_tov_cl = 1665 or dbo_CheckLine.id_tov_cl = 1772 or dbo_CheckLine.id_tov_cl = 1805 or dbo_CheckLine.id_tov_cl = 12238 or dbo_CheckLine.id_tov_cl = 14819 or dbo_CheckLine.id_tov_cl = 14851 or dbo_CheckLine.id_tov_cl = 15394 or dbo_CheckLine.id_tov_cl = 16965 or dbo_CheckLine.id_tov_cl = 16966 or dbo_CheckLine.id_tov_cl = 17151 or dbo_CheckLine.id_tov_cl = 18119 or dbo_CheckLine.id_tov_cl = 18614 or dbo_CheckLine.id_tov_cl = 18744 or dbo_CheckLine.id_tov_cl = 20031 or dbo_CheckLine.id_tov_cl = 20189 or dbo_CheckLine.id_tov_cl = 20190 or dbo_CheckLine.id_tov_cl = 20607 or dbo_CheckLine.id_tov_cl = 20608 or dbo_CheckLine.id_tov_cl = 20609 or dbo_CheckLine.id_tov_cl = 20612 or dbo_CheckLine.id_tov_cl = 20613 or dbo_CheckLine.id_tov_cl = 20615 or dbo_CheckLine.id_tov_cl = 20618 or dbo_CheckLine.id_tov_cl = 20619 or dbo_CheckLine.id_tov_cl = 20973 or dbo_CheckLine.id_tov_cl = 20994 or dbo_CheckLine.id_tov_cl = 21096 )
		|	group by dbo_Checks.BONUSCARD) as vv
		|on dbo_Checks.BONUSCARD = vv.BONUSCARDvv
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> '' and vv.BONUSCARDvv is null
		|AND dbo_Checks.JournDateTime BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'		 		
		|and dbo_Checks.ShopNo = 19
		|group by dbo_Checks.BONUSCARD	 		
		|having sum(dbo_Checks.BaseSum)>1000 
		|order by dbo_Checks.BONUSCARD";
	Иначе
				ЗапросSQL = "SELECT 
		|		dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|full join
		|	(SELECT 
		|	dbo_Checks.BONUSCARD AS BONUSCARDvv
		|	FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|	WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|	AND dbo_Checks.OpenDate BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'		 		
		|	and dbo_Checks.ShopNo = 19 
		|	and (dbo_CheckLine.id_tov_cl = 681 or dbo_CheckLine.id_tov_cl = 682 or dbo_CheckLine.id_tov_cl = 1084 or dbo_CheckLine.id_tov_cl = 1665 or dbo_CheckLine.id_tov_cl = 1772 or dbo_CheckLine.id_tov_cl = 1805 or dbo_CheckLine.id_tov_cl = 12238 or dbo_CheckLine.id_tov_cl = 14819 or dbo_CheckLine.id_tov_cl = 14851 or dbo_CheckLine.id_tov_cl = 15394 or dbo_CheckLine.id_tov_cl = 16965 or dbo_CheckLine.id_tov_cl = 16966 or dbo_CheckLine.id_tov_cl = 17151 or dbo_CheckLine.id_tov_cl = 18119 or dbo_CheckLine.id_tov_cl = 18614 or dbo_CheckLine.id_tov_cl = 18744 or dbo_CheckLine.id_tov_cl = 20031 or dbo_CheckLine.id_tov_cl = 20189 or dbo_CheckLine.id_tov_cl = 20190 or dbo_CheckLine.id_tov_cl = 20607 or dbo_CheckLine.id_tov_cl = 20608 or dbo_CheckLine.id_tov_cl = 20609 or dbo_CheckLine.id_tov_cl = 20612 or dbo_CheckLine.id_tov_cl = 20613 or dbo_CheckLine.id_tov_cl = 20615 or dbo_CheckLine.id_tov_cl = 20618 or dbo_CheckLine.id_tov_cl = 20619 or dbo_CheckLine.id_tov_cl = 20973 or dbo_CheckLine.id_tov_cl = 20994 or dbo_CheckLine.id_tov_cl = 21096 )
		|	group by dbo_Checks.BONUSCARD) as vv
		|on dbo_Checks.BONUSCARD = vv.BONUSCARDvv
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> '' and vv.BONUSCARDvv is null
		|AND dbo_Checks.OpenDate BETWEEN '2017-09-01T00:00:00' AND '2017-11-30T23:59:59'		 		
		|and dbo_Checks.ShopNo = 19
		|group by dbo_Checks.BONUSCARD	 		
		|having sum(dbo_Checks.BaseSum)>1000 
		|order by dbo_Checks.BONUSCARD";
	КонецЕсли;
	
	УсловиеПериодВыборки = "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
	"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'";	
	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"dbo_Checks.ShopNo = 19","dbo_Checks.ShopNo = "+Формат(НомерТочки,"ЧГ="));
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"'2017-09-01T00:00:00' AND '2017-11-30T23:59:59'",УсловиеПериодВыборки);	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"sum(dbo_Checks.BaseSum)>1000","sum(dbo_Checks.BaseSum)>"+Формат(МинимальнаяСуммаПокупок,"ЧГ="));
  
	Возврат ЗапросSQL;
	
КонецФункции


Процедура СформироватьТаблицуЧековПоСпецВыборкеРаньшеПокупали(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачалоПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонецПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	НачалоПериода2 	= НастройкиСпецРежима.Период2.ДатаНачала;
	КонецПериода2 	= КонецДня(НастройкиСпецРежима.Период2.ДатаОкончания);
	
	ОтборДляСпецРежима = НастройкиСпецРежима.ОтборДляСпецРежима;
	
	// ПОЛУЧАЕМ ТОВАРЫ	
	//Получение самой СКД из макета
	СхемаКомпоновкиДанныхТОВАРЫ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетТовары");
	ЗаполнитьОтборы(СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Отбор, ОтборДляСпецРежима, СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
	
	Таб_ТОВАРЫ = Новый ТаблицаЗначений;
	Таб_ПРОИЗВОДИТЕЛИ = Новый ТаблицаЗначений;
	
	Если СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() <> 0 Тогда
		
		//Макет компоновки
		КомпоновщикМакетаТОВАРЫ = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиТОВАРЫ = КомпоновщикМакетаТОВАРЫ.Выполнить(СхемаКомпоновкиДанныхТОВАРЫ, СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
		//Компоновка данных
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиТОВАРЫ);	
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Таб_ТОВАРЫ);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	КонецЕсли;
	
	// ПОЛУЧАЕМ Производетяля	
	//Получение самой СКД из макета
	СхемаКомпоновкиДанныхПроизводитель = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетПроизводители");
	ЗаполнитьОтборы(СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Отбор, ОтборДляСпецРежима, СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
	Если СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Количество() <> 0 Тогда
		
		//Макет компоновки
		КомпоновщикМакетаПроизводитель = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиПроизводитель = КомпоновщикМакетаПроизводитель.Выполнить(СхемаКомпоновкиДанныхПроизводитель, СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
		//Компоновка данных
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиПроизводитель);	
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Таб_ПРОИЗВОДИТЕЛИ);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	КонецЕсли;
	
	Если Таб_ТОВАРЫ.Количество() = 0 И ?(ПараметрКоманды.Проект = Перечисления.Проекты.Избенка, Таб_ПРОИЗВОДИТЕЛИ.Количество() = 0, ИСТИНА) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заданы отборы по номенклатуре или производителю!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода1) ИЛИ Не ЗначениеЗаполнено(КонецПериода1)
		ИЛИ Не ЗначениеЗаполнено(НачалоПериода2) ИЛИ Не ЗначениеЗаполнено(КонецПериода2) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не все периоды заданы для спец. режима выборки!");
		Возврат;
	КонецЕсли;
	
	// Сначала получим номера карт, по которым были покупки в первом периоде по указанной номенклатуре
	
	Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "SELECT
		|	dbo_Checks.JournDateTime AS ДатаПоЧеку,
		|	dbo_Checks.CheckUID AS ИдентификаторЧека,
		|	dbo_Checks.ShopNo AS НомерМагазина,
		|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
		|	dbo_Checks.SummCash AS СуммаОплатыНаличныеПоЧеку,
		|	dbo_Checks.SummBank AS СуммаОплатыБанковскаяКартаПоЧеку,
		|	dbo_Checks.SummBonus AS СуммаБонусПоЧеку,
		|	dbo_Checks.Discount AS СуммаСкидкиПоЧеку,
		|	dbo_Checks.OperationType AS ТипОперации,
		|	dbo_CheckLine.id_tov_cl,
		|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
		|	dbo_CheckLine.id_tt_cl,
		|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
		|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
		|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
		|	dbo_CheckLine.DiscountType AS ТипСкидки,
		|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
		|	dbo_CheckLine.ManufacturerID AS ИД_Производитель,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE dbo_Checks.OperationType = 1
		|		AND ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.JournDateTime BETWEEN " + "'" + Формат(НачалоПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(НачалоПериода1, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонецПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(КонецПериода1, "ДФ=ЧЧ:мм:сс") + "'" + "
		|";
	Иначе
		ЗапросSQL = "SELECT
		|	dbo_Checks.OpenDate AS ДатаПоЧеку,
		|	dbo_Checks.CheckUID AS ИдентификаторЧека,
		|	dbo_Checks.ShopNo AS НомерМагазина,
		|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
		|	dbo_Checks.OperationType AS ТипОперации,
		|	dbo_CheckLine.id_tov_cl,
		|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
		|	dbo_CheckLine.id_tt_cl,
		|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
		|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
		|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
		|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
		|	dbo_CheckLine.id_kontr AS ИД_Производитель,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.OpenDate BETWEEN " + "'" + Формат(НачалоПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(НачалоПериода1, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонецПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(КонецПериода1, "ДФ=ЧЧ:мм:сс") + "'" + "
		|";
	КонецЕсли;
	
	СтрокаУсловий = "";
	
	Для Каждого СтрТовар Из Таб_ТОВАРЫ Цикл
		СтрокаУсловий = СтрокаУсловий + "'" + Формат(СтрТовар.ИдентификаторТовара, "ЧГ=") + "',";
	КонецЦикла;
	
	СтрокаУсловий = Сред(СтрокаУсловий, 1, СтрДлина(СтрокаУсловий) - 1);
	
	Если ЗначениеЗаполнено(СтрокаУсловий) Тогда
		ЗапросSQL = ЗапросSQL + "AND dbo_CheckLine.id_tov_cl IN (" + СтрокаУсловий + ")";
	КонецЕсли;
	
	СтрокаУсловийПроизводители = "";
	
	Для Каждого СтрПроизводитель Из Таб_ПРОИЗВОДИТЕЛИ Цикл
		СтрокаУсловийПроизводители = СтрокаУсловийПроизводители + "'" + Формат(СтрПроизводитель.ИД, "ЧГ=") + "',";
	КонецЦикла;
	
	СтрокаУсловийПроизводители = Сред(СтрокаУсловийПроизводители, 1, СтрДлина(СтрокаУсловийПроизводители) - 1);
	
	Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда			
		Если ЗначениеЗаполнено(СтрокаУсловийПроизводители) Тогда
			ЗапросSQL = ЗапросSQL + "
			|	AND dbo_CheckLine.ManufacturerID IN (" + СтрокаУсловийПроизводители + ")";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаУсловийПроизводители) Тогда
			ЗапросSQL = ЗапросSQL + "
			|	AND dbo_CheckLine.id_kontr IN (" + СтрокаУсловийПроизводители + ")";
		КонецЕсли;
	КонецЕсли;
	
	Если ТекМаксКол <> 0 Тогда
		Если ПараметрКоманды.КоличествоОбрабатываемыхЧеков = 0 Тогда
			ТекОграничениеПоЧекам = "5000";
		Иначе
			ТекОграничениеПоЧекам = Формат(ПараметрКоманды.КоличествоОбрабатываемыхЧеков, "ЧДЦ=0; ЧГ=0");
		КонецЕсли;	
		ЗапросSQL = СтрЗаменить(ЗапросSQL, "SELECT", "SELECT TOP( " + ТекОграничениеПоЧекам + ")");
	КонецЕсли;
	
	// Уберем из результата запроса те номера карт, которые были загружены в базу в течение последнего месяца
	// по этой спец. выборке
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбращенияКПокупателям.НомерКарты_3p
	|ИЗ
	|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
	|ГДЕ
	|	ОбращенияКПокупателям.ДатаДобавления > &ПоследниеТриМесяца
	|	И ОбращенияКПокупателям.Выборка.СпецРежимВыборки = &СпецРежимВыборки";
	
	Запрос.УстановитьПараметр("ПоследниеТриМесяца"		, ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("СпецРежимВыборки"		, Перечисления.СпецРежимыВыборокПокупателей.РаньшеПокупалиОпределенныйТоварСейчасНет);
	
	РезПоРанееЗагруженнымКартам = Запрос.Выполнить().Выбрать();
	
	НомераРанееЗагруженныхКарт = "";
	Пока РезПоРанееЗагруженнымКартам.Следующий() Цикл
		НомераРанееЗагруженныхКарт = НомераРанееЗагруженныхКарт + "'" + СокрЛП(РезПоРанееЗагруженнымКартам.НомерКарты_3p) + "',";
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(НомераРанееЗагруженныхКарт) Тогда
	//	НомераРанееЗагруженныхКарт = Сред(НомераРанееЗагруженныхКарт, 1, СтрДлина(НомераРанееЗагруженныхКарт) - 1);
	//	
	//	ЗапросSQL = ЗапросSQL + "
	//				| AND dbo_Checks.BONUSCARD NOT IN (" + НомераРанееЗагруженныхКарт + ")";
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;
	
	// Теперь получим список карт тех, кто из полученных номеров карт покупал эти же товары во втором периоде
	
	Таб_ЧЕКИ.Свернуть("НомерКарты", "");
	
	СтрНомераКарт = "";
	
	Для Каждого СтрЧЕК Из Таб_ЧЕКИ Цикл
		СтрНомераКарт = СтрНомераКарт + "'" + СокрЛП(СтрЧЕК.НомерКарты) + "',";
	КонецЦикла;
	
	СтрНомераКарт = Сред(СтрНомераКарт, 1, СтрДлина(СтрНомераКарт) - 1);
	
	Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "SELECT
		|	dbo_Checks.JournDateTime AS ДатаПоЧеку,
		|	dbo_Checks.CheckUID AS ИдентификаторЧека,
		|	dbo_Checks.ShopNo AS НомерМагазина,
		|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
		|	dbo_Checks.SummCash AS СуммаОплатыНаличныеПоЧеку,
		|	dbo_Checks.SummBank AS СуммаОплатыБанковскаяКартаПоЧеку,
		|	dbo_Checks.SummBonus AS СуммаБонусПоЧеку,
		|	dbo_Checks.Discount AS СуммаСкидкиПоЧеку,
		|	dbo_Checks.OperationType AS ТипОперации,
		|	dbo_CheckLine.id_tov_cl,
		|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
		|	dbo_CheckLine.id_tt_cl,
		|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
		|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
		|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
		|	dbo_CheckLine.DiscountType AS ТипСкидки,
		|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
		|	dbo_CheckLine.ManufacturerID AS ИД_Производитель,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE dbo_Checks.OperationType = 1
		|		AND ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.JournDateTime BETWEEN " + "'" + Формат(НачалоПериода2, "ДФ=гггг-ММ-дд") + "T" + Формат(НачалоПериода2, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонецПериода2, "ДФ=гггг-ММ-дд") + "T" + Формат(КонецПериода2, "ДФ=ЧЧ:мм:сс") + "'" + "
		|";
	Иначе
		ЗапросSQL = "SELECT
		|	dbo_Checks.OpenDate AS ДатаПоЧеку,
		|	dbo_Checks.CheckUID AS ИдентификаторЧека,
		|	dbo_Checks.ShopNo AS НомерМагазина,
		|	dbo_Checks.BaseSum AS СуммаОплатыВсегоПоЧеку,
		|	dbo_Checks.OperationType AS ТипОперации,
		|	dbo_CheckLine.id_tov_cl,
		|	dbo_CheckLine.BasePrice AS ЦенаПоСтроке,
		|	dbo_CheckLine.id_tt_cl,
		|	dbo_CheckLine.BaseSum AS СуммаВсегоПоСтроке,
		|	dbo_CheckLine.Quantity AS КоличествоПоСтроке,
		|	dbo_CheckLine.Discount AS СуммаСкидкиПоСтроке,
		|	dbo_CheckLine.CashCheckLineNo AS НомерСтроки,
		|	dbo_CheckLine.id_kontr AS ИД_Производитель,
		|	dbo_Checks.BONUSCARD AS НомерКарты
		|FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		AND dbo_Checks.OpenDate BETWEEN " + "'" + Формат(НачалоПериода2, "ДФ=гггг-ММ-дд") + "T" + Формат(НачалоПериода2, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонецПериода2, "ДФ=гггг-ММ-дд") + "T" + Формат(КонецПериода2, "ДФ=ЧЧ:мм:сс") + "'" + "
		|";
	КонецЕсли;
	
	ЗапросSQL = ЗапросSQL + "AND dbo_Checks.BONUSCARD IN (" + СтрНомераКарт + ")";
	
	Если ЗначениеЗаполнено(СтрокаУсловий) Тогда
		Если ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РаньшеПокупалиОпределенныйТоварСейчасНет Тогда
			ЗапросSQL = ЗапросSQL + "
			|	AND dbo_CheckLine.id_tov_cl IN (" + СтрокаУсловий + ")";
		Иначе
			ЗапросSQL = ЗапросSQL + "
			|	AND dbo_CheckLine.id_tov_cl NOT IN (" + СтрокаУсловий + ")";
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
		Если ЗначениеЗаполнено(СтрокаУсловийПроизводители) Тогда
			Если ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РаньшеПокупалиОпределенныйТоварСейчасНет Тогда
				ЗапросSQL = ЗапросSQL + "
				|	AND dbo_CheckLine.ManufacturerID IN (" + СтрокаУсловийПроизводители + ")";
			Иначе
				ЗапросSQL = ЗапросSQL + "
				|	AND dbo_CheckLine.ManufacturerID NOT IN (" + СтрокаУсловийПроизводители + ")";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаУсловийПроизводители) Тогда
			Если ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РаньшеПокупалиОпределенныйТоварСейчасНет Тогда
				ЗапросSQL = ЗапросSQL + "
				|	AND dbo_CheckLine.id_kontr IN (" + СтрокаУсловийПроизводители + ")";
			Иначе
				ЗапросSQL = ЗапросSQL + "
				|	AND dbo_CheckLine.id_kontr NOT IN (" + СтрокаУсловийПроизводители + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Таб_ЧЕКИ2 = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Если ПараметрКоманды.ВыборкаЗП.СпецРежимВыборки = Перечисления.СпецРежимыВыборокПокупателей.РаньшеПокупалиОпределенныйТоварСейчасНет Тогда
				Таб_ЧЕКИ2 		= База_РезульататЗапросВТаблицуЗначений(RecordSet);
			Иначе
				Таб_ЧЕКИ.Очистить();
				Таб_ЧЕКИ 		= База_РезульататЗапросВТаблицуЗначений(RecordSet);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	// Теперь из первой таблицы уберем карты тех, кто во втором периоде покупал эти товары
	// В итоге остануться те, кто во втором периоде эти товары не покупал.
	
	Если Таб_ЧЕКИ2.Количество() > 0 Тогда
		
		Инд = Таб_ЧЕКИ.Количество() - 1;
		Пока Инд >= 0 Цикл
			Если Таб_ЧЕКИ2.Найти(СокрЛП(Таб_ЧЕКИ[Инд].НомерКарты), "НомерКарты") <> Неопределено Тогда
				Таб_ЧЕКИ.Удалить(Инд);
			КонецЕсли;
			
			Инд = Инд - 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК BARA 17252	
Процедура СформироватьТаблицуЧековПоСпецВыборкеАРП(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачалоПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонецПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(НачалоПериода1) ИЛИ Не ЗначениеЗаполнено(КонецПериода1) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.РегулярностьПосещений) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана регулярность посещений!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.МагазинОтбора) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан магазин отбора!");
		Возврат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.МинимальнаяСуммаЧека) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана минимальная сумма чека!");
		Возврат;
	КонецЕсли;
	
	ЗапросSQL = ПолучитьОсновнойЗапросSQLПоАРП(НастройкиСпецРежима.МагазинОтбора.НомерТочки,ПараметрКоманды.Проект, НачалоПериода1, КонецПериода1,НастройкиСпецРежима.РегулярностьПосещений,НастройкиСпецРежима.МинимальнаяСуммаЧека,НастройкиСпецРежима.МаксимальнаяСуммаЧека,НастройкиСпецРежима.ПериодИзмерений);
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

//+++АК BARA 2017.12.11 17460	
Процедура СформироватьТаблицуЧековПоСпецВыборкеРегулярноПокупаютНаСуммуВМесяц(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачалоПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонецПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(НачалоПериода1) ИЛИ Не ЗначениеЗаполнено(КонецПериода1) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.МинимальнаяСуммаПокупок) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана минимальная сумма покупок в месяц!");
		Возврат;
	КонецЕсли;
	
	ЗапросSQL = ПолучитьОсновнойЗапросSQLРегулярноПокупаютНаСуммуВМесяц(ПараметрКоманды.Проект, НачалоПериода1, КонецПериода1,НастройкиСпецРежима.МинимальнаяСуммаПокупок);
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

//+++АК BARA 2017.12.11 17798	
Процедура СформироватьТаблицуЧековПоСпецВыборкеПокупаютНаСуммуЧека(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачалоПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонецПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	СписокМагазинов =  НастройкиСпецРежима.СписокМагазинов.ВыгрузитьЗначения();
	
	Если Не ЗначениеЗаполнено(НачалоПериода1) ИЛИ Не ЗначениеЗаполнено(КонецПериода1) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.МинимальнаяСуммаПокупок) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана минимальная чека покупок!");
		Возврат;
	КонецЕсли;
	
	ЗапросSQL = ПолучитьОсновнойЗапросSQLРегулярноПокупаютНаСуммуЧека(СписокМагазинов,НачалоПериода1, КонецПериода1,НастройкиСпецРежима.МинимальнаяСуммаПокупок);
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры


//+++АК BARA 2017.12.11 17777	
Процедура СформироватьТаблицуЧековПоСпецВыборкеРегулярноПокупаютКулинарию(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачалоПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонецПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(НачалоПериода1) ИЛИ Не ЗначениеЗаполнено(КонецПериода1) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.МагазинОтбора) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан магазин отбора!");
		Возврат;
	КонецЕсли;


	ЗапросSQL = ПолучитьОсновнойЗапросSQLРегулярноПокупаютКулинарию(ПараметрКоманды.Проект, НачалоПериода1, КонецПериода1,НастройкиСпецРежима.МагазинОтбора.НомерТочки);
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

//+++АК BARA ИП-00017573  2017.12.29
Процедура СформироватьТаблицуПокупателейКоторыеНеПокупаютСвежуюВыпечку(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачалоПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонецПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);

	
	Если Не ЗначениеЗаполнено(НачалоПериода1) ИЛИ Не ЗначениеЗаполнено(КонецПериода1) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.МагазинОтбора) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан магазин отбора!");
		Возврат;
	КонецЕсли;
	
		Если Не ЗначениеЗаполнено(НастройкиСпецРежима.МинимальнаяСуммаПокупок) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана минимальная сумма покупок!");
		Возврат;
	КонецЕсли;

	
	ЗапросSQL = ПолучитьОсновнойЗапросSQLПокупателейКоторыеНеПокупаютСвежуюВыпечку(ПараметрКоманды.Проект, НачалоПериода1, КонецПериода1,НастройкиСпецРежима.МагазинОтбора.НомерТочки,НастройкиСпецРежима.МинимальнаяСуммаПокупок);
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

//+++АК BARA ИП-00017777  2018.01.29
Функция ПолучитьОсновнойЗапросSQLРегулярноПокупаютКулинарию(Проект, НачПериода, КонПериода,НомерМагазина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.id_tov как id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Родитель", Справочники.Номенклатура.НайтиПоКоду("000618819"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	УсловиеСтрока = "( ИСТИНА";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УсловиеСтрока = УсловиеСтрока +	 "or dbo_CheckLine.id_tov_cl = "+Формат(ВыборкаДетальныеЗаписи.id_tov,"ЧГ=")+" ";
	КонецЦикла;
	УсловиеСтрока = УсловиеСтрока + ")";
	
	УсловиеСтрока = СтрЗаменить(УсловиеСтрока,"ИСТИНАor","");	
	
	КоличествоРазлПериодов = Месяц(КонПериода)-Месяц(НачПериода) + (12*(Год(КонПериода)-Год(НачПериода)));
	
	КоличествоРазлПериодов = КоличествоРазлПериодов * 2;
	Если День(КонПериода)<15 Тогда
		КоличествоРазлПериодов = КоличествоРазлПериодов - 1;	 		 
	КонецЕсли; 
	Если День(НачПериода)>15 Тогда
		КоличествоРазлПериодов = КоличествоРазлПериодов - 1;	 		 
	КонецЕсли;
	
	Если Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "	Select OsnTabl.BONUSCARDvv as НомерКарты, count(distinct OsnTabl.period) from( SELECT 
		|		dbo_Checks.BONUSCARD AS BONUSCARDvv,
		|		year(dbo_Checks.JournDateTime)*10000+month(dbo_Checks.JournDateTime)*100+(case when DAY(dbo_Checks.JournDateTime)>15 then 2 else 1 end) as period
		|							
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|		left join 
		|			(SELECT 
		|			dbo_Checks.BONUSCARD AS BONUSCARDvv,
		|			CONVERT(char(60),dbo_Checks.JournDateTime,112) as dd						
		|FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|	ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|			WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|			and dbo_CheckLine.id_tov_cl = 21392
		|			AND dbo_Checks.JournDateTime BETWEEN '2017-10-01T00:00:00' AND '2017-12-30T23:59:59' 
		|			And datepart(HH,dbo_Checks.JournDateTime)<15
		|			and  dbo_Checks.ShopNo = 1339 ) as coffee 
		|		on CONVERT(char(60),dbo_Checks.JournDateTime,112) = coffee.dd and dbo_Checks.BONUSCARD = coffee.BONUSCARDvv
		|		WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		and (dbo_CheckLine.id_tov_cl = 21026)
		|		AND dbo_Checks.JournDateTime BETWEEN '2017-10-01T00:00:00' AND '2017-12-30T23:59:59' 
		|		And datepart(HH,dbo_Checks.JournDateTime)<15
		|		and  dbo_Checks.ShopNo = 1339 
		|		and ISNULL(coffee.BONUSCARDvv,'')='') OsnTabl
		|		group by OsnTabl.BONUSCARDvv
		|		having count(distinct OsnTabl.period) >=6";
	Иначе
		ЗапросSQL = "			Select OsnTabl.BONUSCARDvv as НомерКарты, count(distinct OsnTabl.period) from( SELECT 
		|		dbo_Checks.BONUSCARD AS BONUSCARDvv,
		|		year(dbo_Checks.OpenDate)*10000+month(dbo_Checks.OpenDate)*100+(case when DAY(dbo_Checks.OpenDate)>15 then 2 else 1 end) as period
		|							
		|		FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|		ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|		left join 
		|			(SELECT 
		|			dbo_Checks.BONUSCARD AS BONUSCARDvv,
		|			CONVERT(char(60),dbo_Checks.OpenDate,112) as dd						
		|			FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|			ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|			WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|			and dbo_CheckLine.id_tov_cl = 21392
		|			AND dbo_Checks.OpenDate BETWEEN '2017-10-01T00:00:00' AND '2017-12-30T23:59:59' 
		|			And datepart(HH,dbo_Checks.OpenDate)<15
		|			and  dbo_Checks.ShopNo = 1339 ) as coffee 
		|		on CONVERT(char(60),dbo_Checks.OpenDate,112) = coffee.dd and dbo_Checks.BONUSCARD = coffee.BONUSCARDvv
		|		WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|		and (dbo_CheckLine.id_tov_cl = 21026)
		|		AND dbo_Checks.OpenDate BETWEEN '2017-10-01T00:00:00' AND '2017-12-30T23:59:59' 
		|		And datepart(HH,dbo_Checks.OpenDate)<15
		|		and  dbo_Checks.ShopNo = 1339 
		|		and ISNULL(coffee.BONUSCARDvv,'')='') OsnTabl
		|		group by OsnTabl.BONUSCARDvv
		|		having count(distinct OsnTabl.period) >=6
		|		 ";
	КонецЕсли;
	
	УсловиеПериодВыборки = "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
	"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'";	
	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"dbo_Checks.ShopNo = 1339","dbo_Checks.ShopNo = "+Формат(НомерМагазина,"ЧГ="));
	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"'2017-10-01T00:00:00' AND '2017-12-30T23:59:59'",УсловиеПериодВыборки);	
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"having count(distinct OsnTabl.period) >=6","having count(distinct OsnTabl.period) >="+Формат(КоличествоРазлПериодов,"ЧГ="));
	ЗапросSQL = СтрЗаменить(ЗапросSQL,"and (dbo_CheckLine.id_tov_cl = 21026)","and "+УсловиеСтрока);	
	Возврат ЗапросSQL;
	
КонецФункции


Процедура СформироватьТаблицуЧековПоСпецВыборкеПокупаютПятьНоНеПокупаютШестой(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачалоПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонецПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(НачалоПериода1) ИЛИ Не ЗначениеЗаполнено(КонецПериода1) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.НоменклатураКоторуюНеПокупают) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана номенклатура, которую не покупают!");
		Возврат;
	КонецЕсли;
	
	ЗапросSQL = ПолучитьОсновнойЗапросSQLПоЧекам(ПараметрКоманды.Проект, НачалоПериода1, КонецПериода1);
		
	Если НастройкиСпецРежима.ОтборДляСпецРежимаПокупаютПятьНоНеШестой.Количество() > 0 Тогда
		ЗапросSQL = ЗапросSQL + "	AND (";
		Для Каждого СтрТЗ Из НастройкиСпецРежима.ОтборДляСпецРежимаПокупаютПятьНоНеШестой Цикл
			
			ЗапросSQL = ЗапросSQL + "(dbo_CheckLine.id_tov_cl = " + Формат(СтрТЗ.Номенклатура.id_tov, "ЧГ=") + "";
			
			Если ЗначениеЗаполнено(СтрТЗ.Производитель) Тогда
				Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
					ЗапросSQL = ЗапросSQL + " AND dbo_CheckLine.ManufacturerID = " + Формат(СтрТЗ.Производитель.ИД, "ЧГ=") + ")";
				Иначе
					ЗапросSQL = ЗапросSQL + " AND dbo_CheckLine.id_kontr = " + Формат(СтрТЗ.Производитель.ИД, "ЧГ=") + ")";
				КонецЕсли
			Иначе
				ЗапросSQL = ЗапросSQL + ")";
			КонецЕсли;
			
			Если НастройкиСпецРежима.ОтборДляСпецРежимаПокупаютПятьНоНеШестой.Индекс(СтрТЗ) < НастройкиСпецРежима.ОтборДляСпецРежимаПокупаютПятьНоНеШестой.Количество() - 1 Тогда
				ЗапросSQL = ЗапросSQL + " OR ";
			КонецЕсли;
		КонецЦикла;
		ЗапросSQL = ЗапросSQL + ")";
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана номенклатура, которую покупают");
		Возврат;
	КонецЕсли;
	
	// Сначала получим номера карт, которые покупают определенную номенклатуру
	Если ТекМаксКол <> 0 Тогда
		Если ПараметрКоманды.КоличествоОбрабатываемыхЧеков = 0 Тогда
			ТекОграничениеПоЧекам = "5000";
		Иначе
			ТекОграничениеПоЧекам = Формат(ПараметрКоманды.КоличествоОбрабатываемыхЧеков, "ЧДЦ=0; ЧГ=0");
		КонецЕсли;	
		ЗапросSQL = СтрЗаменить(ЗапросSQL, "SELECT", "SELECT TOP( " + ТекОграничениеПоЧекам + ")");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;
	
	// **************
	// Теперь получим список карт тех, кто из полученных номеров карт покупает определенный товар в этом же периоде
	
	Таб_ЧЕКИ.Свернуть("НомерКарты", "");
	
	СтрНомераКарт = "";
	
	Для Каждого СтрЧЕК Из Таб_ЧЕКИ Цикл
		СтрНомераКарт = СтрНомераКарт + "'" + СокрЛП(СтрЧЕК.НомерКарты) + "',";
	КонецЦикла;
	
	СтрНомераКарт = Сред(СтрНомераКарт, 1, СтрДлина(СтрНомераКарт) - 1);
	
	ЗапросSQL = ПолучитьОсновнойЗапросSQLПоЧекам(ПараметрКоманды.Проект, НачалоПериода1, КонецПериода1);
	
	ЗапросSQL = ЗапросSQL + "	AND dbo_Checks.BONUSCARD IN (" + СтрНомераКарт + ")
					|";
			
	ЗапросSQL = ЗапросSQL + " AND dbo_CheckLine.id_tov_cl = " + Формат(НастройкиСпецРежима.НоменклатураКоторуюНеПокупают.id_tov, "ЧГ=") + "
				|";
	
	Если ЗначениеЗаполнено(НастройкиСпецРежима.ПроизводительНоменклатурыКоторуюНеПокупают) Тогда
		Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
			ЗапросSQL = ЗапросSQL + " AND dbo_CheckLine.ManufacturerID = " + Формат(НастройкиСпецРежима.ПроизводительНоменклатурыКоторуюНеПокупают.Производитель.ИД, "ЧГ=");
		Иначе
			ЗапросSQL = ЗапросSQL + " AND dbo_CheckLine.id_kontr = " + Формат(НастройкиСпецРежима.ПроизводительНоменклатурыКоторуюНеПокупают.Производитель.ИД, "ЧГ=");
		КонецЕсли
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ2 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	// Теперь из первой таблицы уберем карты тех, кто в периоде покупал этот товар
	// В итоге остануться те, кто в этом периоде этот товар не покупал.
	
	Если Таб_ЧЕКИ2.Количество() > 0 Тогда
		
		Инд = Таб_ЧЕКИ.Количество() - 1;
		Пока Инд >= 0 Цикл
			Если Таб_ЧЕКИ2.Найти(СокрЛП(Таб_ЧЕКИ[Инд].НомерКарты), "НомерКарты") <> Неопределено Тогда
				Таб_ЧЕКИ.Удалить(Инд);
			КонецЕсли;
			
			Инд = Инд - 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТаблицуЧековПоСпецВыборкеРегулярноПокупаютПродуктРазныхПроизводителей(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	НачПериода1 	= НастройкиСпецРежима.Период1.ДатаНачала;
	КонПериода1 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(НачПериода1) ИЛИ Не ЗначениеЗаполнено(КонПериода1) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиСпецРежима.РегулярноПокупаемаяНоменклатура) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана номенклатура, которую регулярно покупают!");
		Возврат;
	КонецЕсли;
	
	ЗапросSQL = "";
	
	Если ТекМаксКол <> 0 Тогда
		Если ПараметрКоманды.КоличествоОбрабатываемыхЧеков = 0 Тогда
			ТекОграничениеПоЧекам = "5000";
		Иначе
			ТекОграничениеПоЧекам = Формат(ПараметрКоманды.КоличествоОбрабатываемыхЧеков, "ЧДЦ=0; ЧГ=0");
		КонецЕсли;	
		//ЗапросSQL = СтрЗаменить(ЗапросSQL, "SELECT", "SELECT TOP( " + ТекОграничениеПоЧекам + ")");
	КонецЕсли;
	
	Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
		ЗапросSQL = "SELECT
		|	Table1.НомерКарты,
		|	SUM(1) AS КоличествоРазныхПроизводителей
		|FROM (SELECT TOP(" + ТекОграничениеПоЧекам + ")
		|			dbo_Checks.BONUSCARD AS НомерКарты,
		|			dbo_CheckLine.ManufacturerID AS ИД_Производитель
		|		FROM [SMS_Izbenka].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Izbenka].[dbo].[CheckLine] AS dbo_CheckLine
		|			ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|		WHERE dbo_Checks.OperationType = 1
		|			AND ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|			AND dbo_CheckLine.id_tov_cl = " + Формат(НастройкиСпецРежима.РегулярноПокупаемаяНоменклатура.id_tov, "ЧГ=") + "
		|			AND dbo_Checks.JournDateTime BETWEEN " + "'" + Формат(НачПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода1, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
					"'" + Формат(КонПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода1, "ДФ=ЧЧ:мм:сс") + "'" + "
		|		GROUP BY dbo_Checks.BONUSCARD, dbo_CheckLine.ManufacturerID) AS Table1
		|GROUP BY Table1.НомерКарты
		|";
	Иначе
		ЗапросSQL = "SELECT
		|	Table1.НомерКарты,
		|	SUM(1) AS КоличествоРазныхПроизводителей
		|FROM (SELECT TOP(" + ТекОграничениеПоЧекам + ")
		|			dbo_Checks.BONUSCARD AS НомерКарты,
		|			dbo_CheckLine.id_kontr AS ИД_Производитель
		|		FROM [SMS_Union].[dbo].[Checks] AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine] AS dbo_CheckLine
		|			ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
		|		WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
		|			AND dbo_CheckLine.id_tov_cl = " + Формат(НастройкиСпецРежима.РегулярноПокупаемаяНоменклатура.id_tov, "ЧГ=") + "
		|			AND dbo_Checks.OpenDate BETWEEN " + "'" + Формат(НачПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода1, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
					"'" + Формат(КонПериода1, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода1, "ДФ=ЧЧ:мм:сс") + "'" + "
		|		GROUP BY dbo_Checks.BONUSCARD, dbo_CheckLine.id_kontr) AS Table1
		|GROUP BY Table1.НомерКарты
		|";
	КонецЕсли;
				
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	КонецЕсли;
	
	// **************	
	Если Таб_ЧЕКИ.Количество() > 0 Тогда
		
		Инд = Таб_ЧЕКИ.Количество() - 1;
		Пока Инд >= 0 Цикл
			Если Таб_ЧЕКИ[Инд].КоличествоРазныхПроизводителей < НастройкиСпецРежима.МинимальноеКоличествоРазныхПроизводителей Тогда
				Таб_ЧЕКИ.Удалить(Инд);
			КонецЕсли;
			
			Инд = Инд - 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// --- АК

Функция ПолучитьРезультатЗапросаТЗ(ТекстЗапроса)

	СтрСоединения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL();
	
	CurrentConnection = База_Подключение(СтрСоединения);
	
	RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
	Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
		RecordSet=RecordSet.NextRecordSet();
	КонецЦикла;			
	
	РТЗ = Телеграм.База_РезультатЗапросВТаблицуЗначений(RecordSet);
	
	CurrentConnection.Close();
	
	Возврат РТЗ;	

КонецФункции // ПолучитьРезультатЗапросаВТЗ()


//+++АК mika 2018.06.20 ИП-00018882 СпецВыборка «Покупают минимум раз в неделю»
// Процедура формирует таблицу чеков для анализа товаров, которые покупают минимум один раз в неделю  
//
// Параметры:
//  Таб_ЧЕКИ  - <Тип.ТаблицаЗначений> - Таблица значений 
//                 
//  ПараметрКоманды  - <Тип.Структура> - Структура параметров для отборов по спецвыборке ПокупаютМинимумРазВНеделю
//
Процедура СформироватьТаблицуЧековПоСпецВыборкеПокупаютМинимумОдинРазВНеделю(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	пНачалоПериода 	= НастройкиСпецРежима.Период1.ДатаНачала;
	пКонецПериода 	= КонецДня(НастройкиСпецРежима.Период1.ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(пНачалоПериода) ИЛИ Не ЗначениеЗаполнено(пКонецПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан период!");
		Возврат;
	КонецЕсли;	
	
	ОтборПоМагазину     = Неопределено;
	ОтборПоНоменклатуре = Неопределено;
	
	Для каждого ЭлементОтбора Из НастройкиСпецРежима.ОтборДляСпецРежима.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Запрещено группировать условия отбора (На закладке «Отбор для спецрежима» доступны виды сравнения «Равно» и «В списке»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
			Возврат;
		КонецЕсли;
		Если СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Магазин" И ЭлементОтбора.Использование Тогда
			ОтборПоМагазину = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Номенклатура" И ЭлементОтбора.Использование Тогда
			ОтборПоНоменклатуре = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь; 
	Если ОтборПоМагазину  = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указан магазин отбора! (На закладке «Отбор для спецрежима» доступны виды сравнения «Равно» и «В списке»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;
	
	Если ОтборПоНоменклатуре  = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указана номенклатура отбора! (На закладке «Отбор для спецрежима» доступны виды сравнения «Равно» и «В списке»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Получение всех чеков 

	ЗапросSQL = ПолучитьОсновнойЗапросSQLРегулярноПокупаютМинимумОдинРазВНеделю(ПараметрКоманды.Проект, 
					пНачалоПериода,	пКонецПериода, ОтборПоМагазину, ОтборПоНоменклатуре);
					
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	Иначе
		РассчитатьКоличествоМинимумОдинРазВНеделю(Таб_ЧЕКИ, пНачалоПериода, пКонецПериода);
	КонецЕсли;	
	
КонецПроцедуры

//+++АК mika 2018.06.20 ИП-00018882 СпецВыборка «Покупают минимум раз в неделю»
// Функция формирует текст запроса для анализа товаров, которые покупают минимум один раз в неделю  
//
// Параметры:
//  Проект  - <Тип.ПеречислениеСсылка.Проекты> - Проект (Вкусвилл/Избенка) 
//  НачПериода  - <Тип.Дата> - Начало периода
//  КонПериода  - <Тип.Дата> - Конец периода
//
Функция ПолучитьОсновнойЗапросSQLРегулярноПокупаютМинимумОдинРазВНеделю(Проект, НачПериода, КонПериода, ОтборПоМагазину, ОтборПоНоменклатуре)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.id_tov КАК id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.Ссылка В(&ОтборПоНоменклатуре)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки КАК ShopNo
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&ОтборПоМагазину)";
	
	Запрос.УстановитьПараметр("ОтборПоМагазину", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ОтборПоНоменклатуре", ОтборПоНоменклатуре);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() ИЛИ РезультатЗапроса[1].Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	//Формирование строки отбора по номенклатуре
	Выборка = РезультатЗапроса[0].Выбрать();
	ОтборПоНоменклатуре = "NULL";
	Пока Выборка.Следующий() Цикл
		ОтборПоНоменклатуре = ОтборПоНоменклатуре + " or dbo_CheckLine.id_tov_cl = " + Формат(Выборка.id_tov,"ЧГ=");
	КонецЦикла;
	ОтборПоНоменклатуре = СтрЗаменить(ОтборПоНоменклатуре,"NULL or ","");

	//Формирование строки отбора по магазину
	Выборка = РезультатЗапроса[1].Выбрать();
	ОтборПоМагазину = "NULL";
	Пока Выборка.Следующий() Цикл
		ОтборПоМагазину = ОтборПоМагазину + " or dbo_Checks.ShopNo = " + Формат(Выборка.ShopNo,"ЧГ=");
	КонецЦикла;
	ОтборПоМагазину = СтрЗаменить(ОтборПоМагазину,"NULL or ","");
	
	//Получение основного текста запроса по чекам
	ЗапросSQL = ПолучитьОсновнойЗапросSQLПоЧекам(Проект, НачПериода, КонПериода);
	
	//Добавление условий к основному тексту запроса
	ЗапросSQL = ЗапросSQL + " AND (" + ОтборПоМагазину + ")";
	ЗапросSQL = ЗапросSQL + " AND (" + ОтборПоНоменклатуре + ")";
	
	Возврат ЗапросSQL;
		
КонецФункции

//+++АК mika 2018.06.20 ИП-00018882 СпецВыборка «Покупают минимум раз в неделю» 
// Процедура анализирует проданные товары в разрезе НомераКарты и вычисляет количество еженедельных покупок
// 
//Параметры:
//  Таб_ЧЕКИ  - <Тип.ТаблицаЗначений> - Нетипизированная таблица значение чеков
//  пНачалоПериода  - <Тип.Дата> - Начало периода
//  пКонецПериода  -  <Тип.Дата> - Конец периода периода
//
Процедура РассчитатьКоличествоМинимумОдинРазВНеделю(Таб_ЧЕКИ, пНачалоПериода, пКонецПериода)
	
	//Типизация таблицы
	ТаблицаДляРассчета = Новый ТаблицаЗначений();
	
	ТаблицаДляРассчета.Колонки.Добавить("НомерКарты", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ТаблицаДляРассчета.Колонки.Добавить("ДатаПоЧеку", Новый ОписаниеТипов("Дата"));

	Для Каждого Строка Из Таб_ЧЕКИ Цикл
		НоваяСтрока = ТаблицаДляРассчета.Добавить();
		Для Каждого Колонка Из ТаблицаДляРассчета.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];     
		КонецЦикла;
	КонецЦикла;
	
	//Расчет частоты покупок 
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаДляРассчета);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ.НомерКарты КАК НомерКарты,
	|		&ВыборкаРасчета
	|	ИЗ
	|		ВТ КАК ВТ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ.НомерКарты) КАК Таб_Недели
	|ГДЕ
	|	&УсловияРасчета";
	
	ВыборкаРасчета   = "";
	УсловияРасчета   = "";
	ИндексНедели     = 1;
	ОднаНеделя       = 7 * 86400;
	КвоНедель        = Цел((пКонецПериода - пНачалоПериода)/86400/7);
	
	ДатаРасчета = пКонецПериода;
	Пока ДатаРасчета > пНачалоПериода Цикл
		      
		ДатаРасчетаНачало = ДатаРасчета - ОднаНеделя + 1;
		ДатаРасчетаНачало = Макс(пНачалоПериода, ДатаРасчетаНачало); 
		
		ВыборкаРасчета = ВыборкаРасчета + "МАКСИМУМ(ВЫБОР КОГДА ВТ.ДатаПоЧеку МЕЖДУ ДАТАВРЕМЯ("+Формат(ДатаРасчетаНачало,"ДФ=yyyy,MM,dd,HH,mm,ss")+") И ДАТАВРЕМЯ(" + 
								Формат(ДатаРасчета,"ДФ=yyyy,MM,dd,HH,mm,ss")+") ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК Неделя" + ИндексНедели + "," + Символы.ПС;
		
		ДатаРасчета = ДатаРасчета - ОднаНеделя;
		
		УсловияРасчета = УсловияРасчета + СтрЗаменить("Таб_Недели.НеделяИндексНедели + ", "ИндексНедели", ИндексНедели);
		
		ИндексНедели  = ИндексНедели + 1;

		Если КвоНедель < ИндексНедели Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ВыборкаРасчета", Лев(ВыборкаРасчета, СтрДлина(ВыборкаРасчета)-2));   
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловияРасчета", Лев(УсловияРасчета, СтрДлина(УсловияРасчета)-3)+ " = " + КвоНедель);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Таб_ЧЕКИ = Результат.Выгрузить().Скопировать(,"НомерКарты");
	Иначе
		Таб_ЧЕКИ = Новый ТаблицаЗначений();
		Сообщить(НСтр("ru = 'Нет бонусных карт, по которым еженедельно приобретались указанные в спецвыборке товары!';"));
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКоличествоМинимумОдинРазВНеделю()


//+++АК mika 2018.08.01 ИП-00019066 СпецВыборка «Посещения за период (средний чек)»
// Процедура формирует таблицу чеков с условием на количество посещений и суммой покупок  
//
// Параметры:
//  Таб_ЧЕКИ  - <Тип.ТаблицаЗначений> - Таблица значений 
//                 
//  ПараметрКоманды  - <Тип.Структура> - Структура параметров для отборов по спецвыборке ПосещенияЗаПериодСреднийЧек
//
Процедура СформироватьТаблицуЧековПоСпецВыборкеПосещенияЗаПериодСреднийЧек(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	
	ОтборПоМагазину   = Неопределено;
	ОтборКвоПосещений = Неопределено;
	ОтборКвоДней      = Неопределено;
	ОтборМинСумма     = 0;
	
	Для каждого ЭлементОтбора Из НастройкиСпецРежима.ОтборДляСпецРежима.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Запрещено группировать условия отбора (На закладке «Отбор для спецрежима» доступны виды сравнения «Равно» и «В списке»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
			Возврат;
		КонецЕсли;
		Если СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Магазин" И ЭлементОтбора.Использование Тогда
			ОтборПоМагазину = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "КвоПосещений" И ЭлементОтбора.Использование Тогда
			ОтборКвоПосещений = Формат(ЭлементОтбора.ПравоеЗначение, "ЧГ=0");
		ИначеЕсли СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "КвоДней" И ЭлементОтбора.Использование Тогда
			ОтборКвоДней = Формат(ЭлементОтбора.ПравоеЗначение, "ЧГ=0");;
		ИначеЕсли СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "МинСумма" И ЭлементОтбора.Использование Тогда
			ОтборМинСумма = Формат(ЭлементОтбора.ПравоеЗначение, "ЧГ=0");;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь; 
	Если ОтборПоМагазину  = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указан магазин отбора! (На закладке «Отбор для спецрежима» доступны виды сравнения «Равно» и «В списке»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;
	
	Если ОтборКвоПосещений  = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указано минимальное количество посещений! (На закладке «Отбор для спецрежима» доступны виды сравнения «Меньше»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборКвоДней) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указан К-во дней отбора! (На закладке «Отбор для спецрежима» доступен вид сравнения «Равно»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПараметра   = НачалоДня(?(ЗначениеЗаполнено(ПараметрКоманды.Дата), ПараметрКоманды.Дата, ТекущаяДата())); 
	
	пНачалоПериода 	= НачалоДня(ДатаПараметра - ОтборКвоДней * 86400);
	пКонецПериода 	= КонецДня(ДатаПараметра-1);
	
	//Получение всех чеков 

	ЗапросSQL = ПолучитьОсновнойЗапросSQLПосещенияЗаПериодСреднийЧек(ПараметрКоманды.Проект, 
					пНачалоПериода,	пКонецПериода, ОтборПоМагазину, ОтборКвоПосещений, ОтборМинСумма, ПараметрКоманды.МаксКол);
					
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	Иначе
		Таб_ЧЕКИ = Таб_ЧЕКИ.Скопировать(,"НомерКарты");
	КонецЕсли;	
	
КонецПроцедуры

//+++АК mika 2018.06.20 ИП-00019066 СпецВыборка «Посещения за период (средний чек)»
// Функция формирует текст запроса для аназиз чеков с условием на количество посещений и суммой покупок  
//
// Параметры:
//  Проект  - <Тип.ПеречислениеСсылка.Проекты> - Проект (Вкусвилл/Избенка) 
//  НачПериода  - <Тип.Дата> - Начало периода
//  КонПериода  - <Тип.Дата> - Конец периода
//
Функция ПолучитьОсновнойЗапросSQLПосещенияЗаПериодСреднийЧек(Проект, НачПериода, КонПериода, ОтборПоМагазину, ОтборКвоПосещений, ОтборМинСумма, МаксКол)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки КАК ShopNo
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&ОтборПоМагазину)";
	
	Запрос.УстановитьПараметр("ОтборПоМагазину", ОтборПоМагазину);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	//Формирование строки отбора по магазину
	Выборка = РезультатЗапроса.Выбрать();
	ОтборПоМагазину = "NULL";
	Пока Выборка.Следующий() Цикл
		ОтборПоМагазину = ОтборПоМагазину + " or dbo_Checks.ShopNo = " + Формат(Выборка.ShopNo,"ЧГ=");
	КонецЦикла;
	ОтборПоМагазину = СтрЗаменить(ОтборПоМагазину,"NULL or ","");
	
	//Построение основного текста запроса 
	ЗапросSQL = 
	"SELECT TOP МаксКол 
	|COUNT (dbo_Checks.CheckUID) AS ИдентификаторЧека,
	|SUM(dbo_Checks.BaseSum) AS СуммаОплатыВсегоПоЧеку,
	|SUM(dbo_CheckLine.BaseSum) AS СуммаВсегоПоСтроке,
	|dbo_Checks.BONUSCARD AS НомерКарты
	|FROM [SMS_Union].[dbo].[Checks] (nolock) AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine](nolock) AS dbo_CheckLine
	|ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
	|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
    |		AND dbo_Checks.OpenDate BETWEEN " + "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'" + " ОтборПоМагазину
	|GROUP BY dbo_Checks.BONUSCARD 
    |HAVING COUNT (dbo_Checks.CheckUID)<ОтборКвоПосещений AND SUM(dbo_Checks.BaseSum)>ОтборМинСумма	
	|";
		
	//Добавление условий к основному тексту запроса
	ЗапросSQL = СтрЗаменить(ЗапросSQL, "ОтборПоМагазину", " AND (" + ОтборПоМагазину + ")");
	ЗапросSQL = СтрЗаменить(ЗапросSQL, "ОтборКвоПосещений", ОтборКвоПосещений);
	ЗапросSQL = СтрЗаменить(ЗапросSQL, "ОтборМинСумма", ОтборМинСумма);
	ЗапросSQL = СтрЗаменить(ЗапросSQL, "МаксКол", Формат(МаксКол, "ЧГ=0"));

	Возврат ЗапросSQL;
		
КонецФункции


//+++АК mika 2018.08.01 ИП-00019066 СпецВыборка «Покупают в магазинах региона)»
// Процедура формирует таблицу чеков для анализа товаров, которые покупают в магазинах региона и процентом от суммы всех покупок  
//
// Параметры:
//  Таб_ЧЕКИ  - <Тип.ТаблицаЗначений> - Таблица значений 
//                 
//  ПараметрКоманды  - <Тип.Структура> - Структура параметров для отборов по спецвыборке ПокупаютМинимумРазВНеделю
//
Процедура СформироватьТаблицуЧековПоСпецВыборкеПокупаютВМагазинахРегиона(Таб_ЧЕКИ, ПараметрКоманды)
	
	Если ПараметрКоманды.ТипОбращения = "ГруппаЗП" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(1);	
		ТекСообщениеДляРассылки = "";
		ТекТипСвязи = "";
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Ложь;				
	ИначеЕсли ПараметрКоманды.ТипОбращения = "ГруппаРассылки" Тогда
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(2);	
		ТекСообщениеДляРассылки = ПараметрКоманды.СообщениеДляРассылки;
		ТекТипСвязи = ПараметрКоманды.ТипСвязи;
		ТекМаксКол = ПараметрКоманды.МаксКол;
		ЭтоРассылка = Истина;		
	Иначе
		ТекТипОбращения = Справочники.ТипыОбращенийКПокупателю.ПустаяСсылка();	
		ЭтоРассылка = Ложь;
		ТекМаксКол = 0;
	КонецЕсли;
	
	ОтборПоГороду  = Неопределено;
	ОтборПоКвоДней = Неопределено;
	Процент        = Неопределено;
	
	НастройкиСпецРежима = ПараметрКоманды.ВыборкаЗП.ХранилищеНастроекДляСпецРежима.Получить();
	Для каждого ЭлементОтбора Из НастройкиСпецРежима.ОтборДляСпецРежима.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Запрещено группировать условия отбора (На закладке «Отбор для спецрежима» доступны виды сравнения «Равно» и «В списке»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
			Возврат;
		КонецЕсли;
		Если СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Город" И ЭлементОтбора.Использование Тогда
			ОтборПоГороду = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "КвоДней" И ЭлементОтбора.Использование Тогда
			ОтборПоКвоДней = Формат(ЭлементОтбора.ПравоеЗначение, "ЧГ=0");
		ИначеЕсли СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Процент" И ЭлементОтбора.Использование Тогда
			Процент = Формат(ЭлементОтбора.ПравоеЗначение, "ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь; 
	Если НЕ ЗначениеЗаполнено(ОтборПоГороду) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указан город отбора! (На закладке «Отбор для спецрежима» доступен вид сравнения «Равно»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоКвоДней) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указан Кво дней отбора! (На закладке «Отбор для спецрежима» доступен вид сравнения «Равно»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Процент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("ВыборкаЗП: Не указан Процент отбора! (На закладке «Отбор для спецрежима» доступен вид сравнения «Равно»)!", "ВыборкаЗП", ПараметрКоманды.ВыборкаЗП));
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПараметра   = НачалоДня(?(ЗначениеЗаполнено(ПараметрКоманды.Дата), ПараметрКоманды.Дата, ТекущаяДата())); 
	
	пНачалоПериода 	= НачалоДня(ДатаПараметра - ОтборПоКвоДней * 86400);
	пКонецПериода 	= КонецДня(ДатаПараметра-1);
	
	//Получение всех чеков 

	ЗапросSQL = ПолучитьОсновнойЗапросSQLПокупаютВМагазинахРегиона(ПараметрКоманды.Проект, 
					пНачалоПериода,	пКонецПериода, ОтборПоГороду, Процент, ПараметрКоманды.МаксКол);
					
	Если ЗначениеЗаполнено(ЗапросSQL) Тогда
		Попытка
			ADOСоединениеSQL 	= ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
			RecordSet 			= ADOСоединениеSQL.Execute(ЗапросSQL);
			Таб_ЧЕКИ 			= База_РезульататЗапросВТаблицуЗначений(RecordSet);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ADOСоединениеSQL.Close();
	КонецЕсли;
	
	Если Таб_ЧЕКИ.Количество() = 0 Тогда
		Сообщить("В выборку не попало ни одной записи. Проверьте настройку отборов...");
		Возврат;
	Иначе
		Таб_ЧЕКИ = Таб_ЧЕКИ.Скопировать(,"НомерКарты");
	КонецЕсли;	
	
КонецПроцедуры

//+++АК mika 2018.06.20 ИП-00019066 СпецВыборка «Покупают в магазинах региона»
// Функция формирует текст запроса для аназиза чеков покупок в магазинах города и процентом от общих покупок  
//
// Параметры:
//  Проект  - <Тип.ПеречислениеСсылка.Проекты> - Проект (Вкусвилл/Избенка) 
//  НачПериода  - <Тип.Дата> - Начало периода
//  КонПериода  - <Тип.Дата> - Конец периода
//
Функция ПолучитьОсновнойЗапросSQLПокупаютВМагазинахРегиона(Проект, НачПериода, КонПериода, ОтборПоГороду, Процент, МаксКол)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки КАК ShopNo
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка.Город В(&ОтборПоГороду)
	|	И СтруктурныеЕдиницы.НомерТочки > 1
	|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)";
	
	Запрос.УстановитьПараметр("ОтборПоГороду", ОтборПоГороду);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	//Формирование строки отбора по магазину
	Выборка = РезультатЗапроса.Выбрать();
	ОтборПоМагазину = "";
	Пока Выборка.Следующий() Цикл
		ОтборПоМагазину = ОтборПоМагазину + Формат(Выборка.ShopNo,"ЧГ=") + ",";
	КонецЦикла;
	ОтборПоМагазину = Лев(ОтборПоМагазину,СтрДлина(ОтборПоМагазину)-1);
	
	//Получение основного текста запроса по чекам
	ЗапросSQL = 
	
	"SELECT TOP МаксКол
	|НомерКарты, 
	|SUM(СуммаВсего) AS СуммаВсего, 
	|SUM(СуммаПоРегиону)AS СуммаПоРегиону,
	|CASE   
	|     WHEN SUM(СуммаВсего)  > 0 AND SUM(СуммаПоРегиону) > 0 THEN (SUM(СуммаПоРегиону)/SUM(СуммаВсего)*100)
	|     ELSE 0  
	|     END AS dd 
	|
	|FROM (
	|	SELECT
	|		dbo_Checks.BONUSCARD AS НомерКарты, 
	|		SUM(dbo_Checks.BaseSum) AS СуммаВсего,
	|		0 AS СуммаПоРегиону
	|	FROM [SMS_Union].[dbo].[Checks] (nolock) AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine](nolock) AS dbo_CheckLine
	|		ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
	|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
    |		AND dbo_Checks.OpenDate BETWEEN " + "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'" + "
	|	GROUP BY dbo_Checks.BONUSCARD
	|	
	|	UNION 
	|
	|	SELECT
	|		dbo_Checks.BONUSCARD AS НомерКарты,
	|		0 AS СуммаВсего, 
	|		SUM(dbo_Checks.BaseSum) AS СуммаПоРегиону
	|	FROM [SMS_Union].[dbo].[Checks] (nolock) AS dbo_Checks FULL JOIN [SMS_Union].[dbo].[CheckLine](nolock) AS dbo_CheckLine
	|		ON dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
	|WHERE ISNULL(dbo_Checks.BONUSCARD, '') <> ''
    |		AND dbo_Checks.OpenDate BETWEEN " + "'" + Формат(НачПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(НачПериода, "ДФ=ЧЧ:мм:сс") + "'" + " AND " +
		"'" + Формат(КонПериода, "ДФ=гггг-ММ-дд") + "T" + Формат(КонПериода, "ДФ=ЧЧ:мм:сс") + "'" + "AND (dbo_Checks.ShopNo in ("+ОтборПоМагазину+"))
	|	GROUP BY dbo_Checks.BONUSCARD) AS ChecksSum
	|
	|GROUP BY ChecksSum.НомерКарты
	|
	|HAVING  
	|SUM(СуммаВсего) <> SUM(СуммаПоРегиону)
	|AND (CASE   
	|     WHEN SUM(СуммаВсего)  > 0 AND SUM(СуммаПоРегиону) > 0 THEN (SUM(СуммаПоРегиону)/SUM(СуммаВсего)*100)
	|     ELSE 0  
	|     END)> Процент";
	
	//Добавление условий к основному тексту запроса
	ЗапросSQL = СтрЗаменить(ЗапросSQL, "ОтборПоМагазину", ОтборПоМагазину);
	ЗапросSQL = СтрЗаменить(ЗапросSQL, "Процент", Процент);
	ЗапросSQL = СтрЗаменить(ЗапросSQL, "МаксКол", Формат(МаксКол, "ЧГ=0"));

	Возврат ЗапросSQL;
		
КонецФункции

