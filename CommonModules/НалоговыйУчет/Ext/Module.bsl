
// Процедура устанавливает в проводке суммы НУ,ПР,ВР в зависимости от признака ведения налогового учета на счете
//
Процедура ЗаполнитьНалоговыеСуммыПроводки(СуммаНУДт = 0, СуммаНУКт = 0, СуммаПРДт = 0, СуммаПРКт = 0, СуммаВРДт = 0, СуммаВРКт = 0, Проводка, ПрименениеПБУ18 = Истина) Экспорт
		
	Если Проводка.СчетДт.НалоговыйУчет Тогда
		Проводка.СуммаНУДт = СуммаНУДт;
		Проводка.СуммаПРДт = СуммаПРДт;
		Проводка.СуммаВРДт = СуммаВРДт;
	КонецЕсли;
	
	Если Проводка.СчетКт.НалоговыйУчет Тогда
		Проводка.СуммаНУКт = СуммаНУКт;
		Проводка.СуммаПРКт = СуммаПРКт;
		Проводка.СуммаВРКт = СуммаВРКт;
	КонецЕсли;
	
КонецПроцедуры

// Функция анализирует аналитику затрат по дебету проводки.
// Если статья затрат не принимаемая к НУ, то сумма НУ по дебету преобразуется в сумму ПР по дебету
//
Функция ОпределитьПостоянныеРазницыВРасходах(Проводка,ПоддержкаПБУ18) Экспорт
	Если ПоддержкаПБУ18 Тогда	
		
		СчетДт = Проводка.СчетДт;
		Если ЗначениеЗаполнено(СчетДт) И СчетДт.НалоговыйУчет Тогда
			ЭтоНепринимаемыеРасходы = ОпределитьНеПринимаемыеРасходы(Проводка);
			
			Если ЭтоНепринимаемыеРасходы Тогда 
				
				Проводка.СуммаПРДт = Проводка.СуммаПРДт + Проводка.СуммаНУДт;
				Проводка.СуммаНУДт = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции

// Функция анализирует аналитику затрат по кредиту проводки.
// Если статья затрат не принимаемая к НУ, то возвращаемое значение "истина"
//
Функция ОпределитьНеПринимаемыеДоходы(Проводка) Экспорт
	
	Если Не Проводка.СчетКт = ПланыСчетов.Финансовый.ПустаяСсылка() И (Проводка.СчетКт = ПланыСчетов.Финансовый.ПрочиеДоходы Или Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходы)) Тогда
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
				
				Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
					Возврат  Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция анализирует аналитику затрат по дебету проводки.
// Если статья затрат не принимаемая к НУ, то возвращаемое значение "истина"
//
Функция ОпределитьНеПринимаемыеРасходы(Проводка) Экспорт
	
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			
			Если Субконто.Значение.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				
				// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
				Если Проводка.СчетДт = ПланыСчетов.Финансовый.СтроительствоОбъектовОсновныхСредств Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ОтнесениеКЕНВД = Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("" + Субконто.Значение + " - неправильно указана: для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
					|- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
					ОбщегоНазначения.СообщитьОбОшибке("" + Субконто.Значение + " - неправильно указана: для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
					|- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
				
				ОтнесениеКЕНВД = Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					|Расходы, не учитываемые для целей налогообложения, не следует относить к деятельности, облагаемой ЕНВД,
					|- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
					|- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Формируется таблица строк в которой задано соответствие видов активов
// (обязательства) и счетов налогового учета, на которых отражаются разницы
// по этим видам активов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуВидовАктивовИОбязательств() Экспорт
	
	Если  ПланыСчетов.Финансовый.ТоварыНаСкладах.ВидыСубконто.Количество() = 1 ТОгда
		ЕстьСкладскойУчет = Ложь;
	ИНачеЕсли  ПланыСчетов.Финансовый.ТоварыНаСкладах.ВидыСубконто.Количество() = 2 ТОгда
		ЕстьСкладскойУчет = ПланыСчетов.Финансовый.ТоварыНаСкладах.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
	Иначе
		ЕстьСкладскойУчет = ПланыСчетов.Финансовый.ТоварыНаСкладах.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств, Строка"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",      Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",   Новый ОписаниеТипов("Массив"));
	
	//Основные средства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ОсновныеСредства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.АмортизацияОС_01);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	//ДоходныеВложенияВ_МЦ
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.АмортизацияОС_03);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ДоходныеВложенияВ_МЦ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	//Нематериальные активы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.НематериальныеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.АмортизацияНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Оборудование 
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ОборудованиеКУстановке);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы   08.01
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПриобретениеЗемельныхУчастков);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.02
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПриобретениеОбъектовПриродопользования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.03
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.СтроительствоОбъектовОсновныхСредств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы 08.04
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПриобретениеОбъектовОсновныхСредств);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы 08.05
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПриобретениеНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Внеоборотные активы 08.08
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ВыполнениеНИОКР);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	
	// Материалы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	СчетаУчетаМатериалов = ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.Материалы);
	Пока СчетаУчетаМатериалов.Следующий() Цикл
		СчетУчетаМатериалов = СчетаУчетаМатериалов.Ссылка;
		КодСчета = СчетУчетаМатериалов.Код;
		Если Лев(КодСчета, 5) = "10.МЦ"
			Или Лев(КодСчета, 5) = "10.11" 
			Или Лев(КодСчета, 5) = "10.07" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Счета.Добавить(СчетУчетаМатериалов);
	КонецЦикла;
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
		// Материалы  в переработке
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.МатериалыПереданныеВПереработку.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
		// Материалы  в эксплуатации
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.СпецодеждаВЭксплуатации.Ссылка);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.СпецоснасткаВЭксплуатации.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации);
	
	// Незавершенное производство
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ОсновноеПроизводство);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ВспомогательныеПроизводства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.БракВПроизводстве);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ОбщепроизводственныеРасходы);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПроизводствоИзДавальческогоСырья);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Готовая продукция
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ГотоваяПродукция);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Полуфабрикаты
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.Полуфабрикаты);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Расходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// Товары
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.Товары);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Товары отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ТоварыОтгруженные);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Издержки обращения
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасходыНаПродажу);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	// Финансовые вложения (счета 58.01.1)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.Паи);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Финансовые вложения (счета 58.01.2 и Н58.02)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.Акции);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ДолговыеЦенныеБумаги);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	// Финансовые вложения (счета 58.03, 58.04, 58.05)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПредоставленныеЗаймы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ВкладыПоДоговоруПростогоТоварищества);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПриобретенныеПрава);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Доходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ДоходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоходыБудущихПериодов);
	
	
	// Дебиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоАвансамПолученным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСРозничнымиПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПокупателямиИЗаказчиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПокупателямиИЗаказчиками);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Кредиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоАвансамВыданным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ВекселяВыданные);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоИмущественномуИЛичномуСтрахованию);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПлатежиПоДобровольномуСтрахованиюРаботников);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоПретензиям);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоПричитающимсяДивидендам);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоДепонированнымСуммам);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоИсполнительнымДокументамРаботников);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в рублях
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоАвансамВыданнымУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателямиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоАвансамПолученнымУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоПретензиямУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в валюте
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВВалюте;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоАвансамВыданнымВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателямиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоАвансамПолученнымВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыПоПретензиямВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Убытки текущего периода
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
	
	// Недостачи и потери от порчи ценностей
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НедостачиПотери;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Финансовый.НедостачиИПотериОтПорчиЦенностей);
	
	
	Возврат ТаблицаВидовАктивовИОбязательств;
	
КонецФункции // ПолучитьТаблицуВидовАктивовИОбязательств()

// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагаемые разницы.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, СтруктураДопПараметров, СтруктураШапкиДокумента, УчетПоПодразделениям, ЭтоОтчет = Ложь) Экспорт
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	//Если КоличествоОбъектовАналитики = 0 Тогда
	//	Возврат Новый ТаблицаЗначений;
	//КонецЕсли;
	
	МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
	Если НЕ КоличествоОбъектовАналитики = 0 Тогда
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, ФлагОС_НМА);
		ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
		ФлагНЗП = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
	Иначе
		ФлагОС_НМА = Ложь;
		ФлагОбъектовСтроительства = Ложь;
		ФлагНЗП = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоМесяца",   СтруктураДопПараметров.НачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",    СтруктураДопПараметров.КонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("МассивСчетов",   СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидСубконто",    МассивСубконто);
	Запрос.УстановитьПараметр("СчетЕН",         ПолучитьМассивСчетовЕНВД());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстаткиИОбороты.Счет КАК Счет,
	               |	ФинансовыйОстаткиИОбороты.Подразделение КАК Подразделение,
	               |	ФинансовыйОстаткиИОбороты.Субконто1 КАК Субконто1,
	               |	ФинансовыйОстаткиИОбороты.Субконто2 КАК Субконто2,
	               |	ФинансовыйОстаткиИОбороты.Субконто3 КАК Субконто3,
	               |	СУММА(ФинансовыйОстаткиИОбороты.СуммаВРНачальныйОстатокДт) КАК НачОстатокДт,
	               |	СУММА(ФинансовыйОстаткиИОбороты.СуммаВРКонечныйОстатокДт) КАК КонОстатокДт,
	               |	СУММА(ФинансовыйОстаткиИОбороты.СуммаВРНачальныйОстатокКт) КАК НачОстатокКт,
	               |	СУММА(ФинансовыйОстаткиИОбороты.СуммаВРКонечныйОстатокКт) КАК КонОстатокКт,
	               |	СУММА(ФинансовыйОстаткиИОбороты.СуммаВРОборотДт) КАК ОборотДт,
	               |	СУММА(ФинансовыйОстаткиИОбороты.СуммаВРОборотКт) КАК ОборотКт,
	               |	СУММА(0) КАК ОборотЕН
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(&НачалоМесяца, &КонецМесяца, , , Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация)) КАК ФинансовыйОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыйОстаткиИОбороты.Счет,
	               |	ФинансовыйОстаткиИОбороты.Субконто1,
	               |	ФинансовыйОстаткиИОбороты.Субконто2,
	               |	ФинансовыйОстаткиИОбороты.Субконто3,
	               |	ФинансовыйОстаткиИОбороты.Подразделение
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ФинансовыйОбороты.Счет,
	               |	ФинансовыйОбороты.Подразделение,
	               |	ФинансовыйОбороты.Субконто1,
	               |	ФинансовыйОбороты.Субконто2,
	               |	ФинансовыйОбороты.Субконто3,
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(ФинансовыйОбороты.СуммаВРОборотКт)
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&СчетЕН), ) КАК ФинансовыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыйОбороты.Счет,
	               |	ФинансовыйОбороты.Субконто1,
	               |	ФинансовыйОбороты.Субконто2,
	               |	ФинансовыйОбороты.Субконто3,
	               |	ФинансовыйОбороты.Подразделение";
	
	
	Если ФлагОС_НМА = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФинансовыйОстаткиИОбороты.Счет КАК Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФинансовыйОстаткиИОбороты.Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФинансовыйОбороты.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОбороты.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОбороты.Субконто2", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто1 КАК Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОбороты.Субконто1", "");
		КонецЕсли;
		
	Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов И Не ЭтоОтчет Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФинансовыйОстаткиИОбороты.СуммаВРОборотДт", "ВЫБОР КОГДА Субконто1.ВидРБП = &УбыткиПрошлыхЛет ТОГДА 0 ИНАЧЕ ФинансовыйОстаткиИОбороты.СуммаВРОборотДт КОНЕЦ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФинансовыйОстаткиИОбороты.СуммаВРКонечныйОстатокДт", "ФинансовыйОстаткиИОбороты.СуммаВРКонечныйОстатокДт - ВЫБОР КОГДА Субконто1.ВидРБП = &УбыткиПрошлыхЛет ТОГДА ФинансовыйОстаткиИОбороты.СуммаВРОборотДт ИНАЧЕ 0 КОНЕЦ");
		
		Запрос.УстановитьПараметр("УбыткиПрошлыхЛет",  Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов = Результат.Выгрузить();
	
	ТаблицаРезультатов.Свернуть("" + ?(ФлагОС_НМА = 1, "", "Счет") + ?(УчетПоПодразделениям,",Подразделение", "") + ?(КоличествоОбъектовАналитики = 0, "",",Субконто1") + ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики = 2, ",Субконто2","")) + ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ",Субконто3","")),"НачОстатокКт,КонОстатокКт,НачОстатокДт,КонОстатокДт,ОборотДт,ОборотКт,ОборотЕН");
	
	 Если ТаблицаРезультатов.Количество() > 0 Тогда

	ТаблицаРезультатов.Колонки.Добавить("СуммаДт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаДт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаЕНВД");
	
	
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоМесяца",   СтруктураДопПараметров.НачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",    СтруктураДопПараметров.КонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураДопПараметров.Организация);
	НеРаспределяемыеСчета = Новый Массив;
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Финансовый.ОсновноеПроизводство);
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Финансовый.ВспомогательныеПроизводства);
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Финансовый.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("НеРаспределяемыеСчета",           НеРаспределяемыеСчета);
	
	Запрос.УстановитьПараметр("ВидСубконто",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто91",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Распределяемые",    Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
	Запрос.УстановитьПараметр("ЕНВД",              Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("Счет91",      ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Финансовый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("СчетПрочихРасходов", ПланыСчетов.Финансовый.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КорСчет", СтрокаВидАктиваОбязательства.Счета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |			ТОГДА ЕСТЬNULL(ФинансовыйОбороты.СуммаВРОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаЗатрат,
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	               |			ТОГДА ЕСТЬNULL(ФинансовыйОбороты.СуммаВРОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаЗатратЕНВД,
	               |	ФинансовыйОбороты.КорСубконто1 КАК КорСубконто1
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , (НЕ Счет В (&НеРаспределяемыеСчета)), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ФинансовыйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |			ТОГДА ЕСТЬNULL(ФинансовыйОбороты.СуммаВРОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	               |			ТОГДА ЕСТЬNULL(ФинансовыйОбороты.СуммаВРОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ФинансовыйОбороты.КорСубконто1
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетПрочихРасходов), &ВидСубконто91, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ФинансовыйОбороты
	               |ИТОГИ
	               |	СУММА(СуммаЗатрат),
	               |	СУММА(СуммаЗатратЕНВД)
	               |ПО
	               |	КорСубконто1";
	
	Результат = Запрос.Выполнить();
	ТаблицаРаспределяемыхРасходов = Результат.Выгрузить();
	
			
		Для Каждого Строка Из ТаблицаРезультатов Цикл
			СводноеСальдоКон = ?(Строка.КонОстатокДт = NULL, 0, Строка.КонОстатокДт) - ?(Строка.КонОстатокКт = NULL, 0, Строка.КонОстатокКт);
			СводноеСальдоНач = ?(Строка.НачОстатокДт = NULL, 0, Строка.НачОстатокДт) - ?(Строка.НачОстатокКт = NULL, 0, Строка.НачОстатокКт);
			
			Разница = ?(Строка.ОборотДт = NULL, 0, Строка.ОборотДт) - ?(Строка.ОборотКт = NULL, 0, Строка.ОборотКт);
			
			// Определим сумму временных разниц, приходящуюся на деятельность, облагаемую ЕНВД,
			// для распределяемых затрат, связанных с амортизацией и списанием РБП.
			СуммаРаспределяемогоРасхода = 0;
			СуммаЕНВДРасхода     = 0;
			СтрокаРаспределяемогоРасхода = ?(КоличествоОбъектовАналитики = 0, Неопределено, ТаблицаРаспределяемыхРасходов.Найти(Строка.Субконто1, "КорСубконто1"));
			
			Если СтрокаРаспределяемогоРасхода = Неопределено Тогда
				Строка.СуммаЕНВД = Строка.ОборотЕН;
			Иначе
				СуммаРаспределяемогоРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатрат;
				СуммаЕНВДРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатратЕНВД;
				Строка.СуммаЕНВД = СуммаРаспределяемогоРасхода * СтруктураДопПараметров.КоэффициентЕНВД + СуммаЕНВДРасхода;
			КонецЕсли;
			
			Если СводноеСальдоНач > 0 Тогда
				Если  СводноеСальдоКон - СводноеСальдоНач > 0 Тогда
					Строка.СуммаКт77 = Разница;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
					Иначе  Если (СводноеСальдоКон < 0) И (СводноеСальдоНач >= 0) Тогда
						Строка.СуммаДт09 = - СводноеСальдоКон;
						Строка.СуммаДт77 = СводноеСальдоНач;
						Строка.СуммаКт09 = 0;
						Строка.СуммаКт77 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = - Разница;
						Строка.СуммаКт09 = 0;
						Строка.СуммаДт09 = 0;
						
						
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если  СводноеСальдоКон - СводноеСальдоНач < 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = - СводноеСальдоКон + СводноеСальдоНач;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 =  0;
					Иначе  Если (СводноеСальдоКон > 0) И (СводноеСальдоНач <= 0) Тогда
						Строка.СуммаКт77 = СводноеСальдоКон;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = - СводноеСальдоНач;
						Строка.СуммаДт09 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = Разница;
						Строка.СуммаДт09 = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	 	 
	
	Возврат  ТаблицаРезультатов;
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательств()

// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагаемые разницы,
// числящиеся на остатках текущего периода.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, Организация, НачалоГода, КонецГода) Экспорт
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	
	Если Не КоличествоОбъектовАналитики = 0 Тогда
		
		МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, ФлагОС_НМА);
		ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
		ФлагНЗП = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
	Иначе
		ФлагОС_НМА = Ложь;
		ФлагОбъектовСтроительства = Ложь;
		ФлагНЗП = Ложь;
	КонецЕсли;
 
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("НачалоГода",     НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",      КонецГода);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("МассивСчетов",   СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидУчета", 	    Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидСубконто",    МассивСубконто);
	Запрос.УстановитьПараметр("Счет09",         ПланыСчетов.Финансовый.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Счет77",         ПланыСчетов.Финансовый.ОтложенныеНалоговыеОбязательства);
	Запрос.УстановитьПараметр("Счет84",         ПланыСчетов.Финансовый.НераспределеннаяПрибыль);
    Запрос.УстановитьПараметр("ВидАктивовОбязательств",СтрокаВидАктиваОбязательства.ВидАктивовОбязательств);
	Запрос.УстановитьПараметр("АктивыИОбязательства",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиВР.Счет КАК Счет,
	               |	ОстаткиВР.Субконто1 КАК Субконто1,
	               |	ОстаткиВР.Субконто2 КАК Субконто2,
	               |	ОстаткиВР.Субконто3 КАК Субконто3,
	               |	&Счет09 КАК СчетОНАОНО,
	               |	ФинансовыйОстатки.СуммаОстатокДт - ФинансовыйОбороты.СуммаОборот КАК СтараяСумма,
	               |	СУММА(ВЫБОР
	               |			КОГДА ОстаткиВР.СуммаВРОстатокДт < 0
	               |					ИЛИ ОстаткиВР.СуммаВРОстатокКт > 0
	               |				ТОГДА -ОстаткиВР.СуммаВРОстаток
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&КонецГода, Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация)) КАК ОстаткиВР,
	               |	РегистрБухгалтерии.Финансовый.Остатки(
	               |			&КонецГода,
	               |			Счет В ИЕРАРХИИ (&Счет09),
	               |			&АктивыИОбязательства,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1 = &ВидАктивовОбязательств) КАК ФинансовыйОстатки,
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&НачалоГода,
	               |			&КонецГода,
	               |			Период,
	               |			Счет В ИЕРАРХИИ (&Счет09),
	               |			&АктивыИОбязательства,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1 = &ВидАктивовОбязательств,
	               |			КорСчет В ИЕРАРХИИ (&Счет84),
	               |			) КАК ФинансовыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиВР.Счет,
	               |	ОстаткиВР.Субконто1,
	               |	ОстаткиВР.Субконто2,
	               |	ОстаткиВР.Субконто3,
	               |	ФинансовыйОстатки.СуммаОстатокДт - ФинансовыйОбороты.СуммаОборот
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОстаткиВР.Счет,
	               |	ОстаткиВР.Субконто1,
	               |	ОстаткиВР.Субконто2,
	               |	ОстаткиВР.Субконто3,
	               |	&Счет77,
	               |	ФинансовыйОстатки.СуммаОстатокКт + ФинансовыйОбороты.СуммаОборот,
	               |	СУММА(ВЫБОР
	               |			КОГДА ОстаткиВР.СуммаВРОстатокДт > 0
	               |					ИЛИ ОстаткиВР.СуммаВРОстатокКт < 0
	               |				ТОГДА ОстаткиВР.СуммаВРОстаток
	               |			ИНАЧЕ 0
	               |		КОНЕЦ)
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&КонецГода, Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация)) КАК ОстаткиВР,
	               |	РегистрБухгалтерии.Финансовый.Остатки(
	               |			&КонецГода,
	               |			Счет В ИЕРАРХИИ (&Счет77),
	               |			&АктивыИОбязательства,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1 = &ВидАктивовОбязательств) КАК ФинансовыйОстатки,
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&НачалоГода,
	               |			&КонецГода,
	               |			Период,
	               |			Счет В ИЕРАРХИИ (&Счет77),
	               |			&АктивыИОбязательства,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1 = &ВидАктивовОбязательств,
	               |			КорСчет В ИЕРАРХИИ (&Счет84),
	               |			) КАК ФинансовыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиВР.Счет,
	               |	ОстаткиВР.Субконто1,
	               |	ОстаткиВР.Субконто2,
	               |	ОстаткиВР.Субконто3,
	               |	ФинансовыйОстатки.СуммаОстатокКт + ФинансовыйОбороты.СуммаОборот
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ";
	
	
	Если ФлагОС_НМА = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиВР.Счет КАК Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиВР.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто2", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто1 КАК Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОстаткиИОбороты.Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ФинансовыйОбороты.Субконто1", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов = Результат.Выгрузить();
	ТаблицаРезультатов.Свернуть("СчетОНАОНО,СтараяСумма," + ?(ФлагОС_НМА = 1, "", "Счет,") + ?(КоличествоОбъектовАналитики = 0, "","Субконто1") + ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики = 2, ",Субконто2","")) + ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ",Субконто3","")),"Сумма");
	
	
	Возврат  ТаблицаРезультатов;
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательств()

Функция ОпределитьНеПринимаемыеДоходыРасходы(Проводка) Экспорт
	
	Если Не Проводка.СчетКт = ПланыСчетов.Финансовый.ПустаяСсылка() И (Проводка.СчетКт = ПланыСчетов.Финансовый.ПрочиеДоходы Или Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходы)) Тогда
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
				
				Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
					Возврат  Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
			  	
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			
			Если Субконто.Значение.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				
				// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
				Если Проводка.СчетДт = ПланыСчетов.Финансовый.СтроительствоОбъектовОсновныхСредств Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ОтнесениеКЕНВД = Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("" + Субконто.Значение + " - неправильно указана: для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
					ОбщегоНазначения.СообщитьОбОшибке("" + Субконто.Значение + " - неправильно указана: для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
								
				ОтнесениеКЕНВД = Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к деятельности, облагаемой ЕНВД,
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ОпределитьВнереализационныеДоходыРасходы(Проводка) Экспорт
	
	Если Не Проводка.СчетКт = ПланыСчетов.Финансовый.ПустаяСсылка() И Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходы) Тогда
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
				
				Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И Субконто.Значение.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
					Возврат  Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
			  	
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И Субконто.Значение.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
				Возврат Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ОпределитьЕНВДДоходыРасходы(Проводка) Экспорт
	
	Если Не Проводка.СчетКт = ПланыСчетов.Финансовый.ПустаяСсылка() И Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходы) Тогда
	Для Каждого Субконто Из Проводка.СубконтоКт Цикл
		
		Если (ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Субконто.Значение.ЭтоГруппа)
	    	Или (ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа) Тогда
			
			Если Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
			  	
	
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если (ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Субконто.Значение.ЭтоГруппа)
	    	Или (ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа) Тогда
			
			Если Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ОпределитьРасходыЕНВД(Проводка) Экспорт
	
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если (ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") Или ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")) И Не Субконто.Значение.ЭтоГруппа Тогда
			// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
			Если Проводка.СчетДт = ПланыСчетов.Финансовый.СтроительствоОбъектовОсновныхСредств Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.СтроительствоОбъектовОсновныхСредств) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ОтнесениеКЕНВД = Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат;
			
			Возврат (ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД)
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
	
Функция ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента, СтавкаФБ = 0, СтавкаРФ = 0, СтавкаМестный = 0) Экспорт

	СтавкиНалога = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата);
	                            
	СтавкаФБ        = ?(ТипЗнч(СтавкиНалога.СтавкаФБ) = Тип("Число")       , СтавкиНалога.СтавкаФБ / 100       , 0);
	СтавкаРФ        = ?(ТипЗнч(СтавкиНалога.СтавкаСубъектРФ) = Тип("Число"), СтавкиНалога.СтавкаСубъектРФ / 100, 0);
	
	
	Если Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Получить() Тогда
		
		Отбор = Новый Структура("Организация", СтруктураШапкиДокумента.Организация);
		Ставки = РегистрыСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата,Отбор);
		СтавкаРФ = ?(Ставки = Неопределено, 0, Ставки.СтавкаСубъектРФ / 100);
		
		
	КонецЕсли;
	
	
	СтавкаНалога = СтавкаФБ + СтавкаРФ;
	
	Возврат СтавкаНалога;

КонецФункции // ПолучитьСтавкуНалогаНаПрибыль()

// Расчет транспортных расходов, которые необходимо списать.
// 
Процедура РасчетТранспортныхРасходов(НачГраница,КонГраница,ТекОрганизация,ПараметрыСтруктура)  Экспорт

	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ТоварыНаСкладах);
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ТоварыВРозничнойТорговле);
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ТараПодТоваромИПорожняя);
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ПокупныеИзделия);
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ПокупныеТоварыОтгруженные);
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ПокупныеТоварыОтгруженные);

	СписокКорСчетов = Новый Массив;
	СписокКорСчетов.Добавить(ПланыСчетов.Финансовый.СебестоимостьПродаж);

		СписокСчетов.Добавить(ПланыСчетов.Финансовый.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СписокСчетов.Добавить(ПланыСчетов.Финансовый.ТорговаяНаценка);

	// СКД41-СКК42+СКД45.01
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(РБОстатки.СуммаНУКонечныйОстаток) КАК ОстатокТовара,
	               |	СУММА(РБОстатки.СуммаНУНачальныйОстаток) КАК ОстатокТовараНач,
	               |	0 КАК ПриходТовара,
	               |	0 КАК РасходТовара
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(&НачГраница, &КонГраница, , , Счет В ИЕРАРХИИ (&Счет), , Организация В ИЕРАРХИИ (&Организация)) КАК РБОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	0,
	               |	ФинансовыйОбороты.СуммаНУОборотДт,
	               |	ФинансовыйОбороты.СуммаНУОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&НачГраница,
	               |			&КонГраница,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет),
	               |			,
	               |			Организация В ИЕРАРХИИ (&Организация),
	               |			(НЕ КорСчет В ИЕРАРХИИ (&Счет))
	               |				И (НЕ КорСчет = &ПустойСчет),
	               |			) КАК ФинансовыйОбороты";
				   
	Запрос.УстановитьПараметр("НачГраница",  НачГраница);
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);             
	Запрос.УстановитьПараметр("Счет",        СписокСчетов);
	Запрос.УстановитьПараметр("ПустойСчет",  ПланыСчетов.Финансовый.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	ОстатокТовара    = 0;
	ОстатокТовараНач = 0;
	ПриходТовара     = 0;
	РасходТовара     = 0;
	Пока РезультатЗапроса.Следующий() Цикл
		ОстатокТовара    = ОстатокТовара    + ?(РезультатЗапроса.ОстатокТовара    = Null, 0, РезультатЗапроса.ОстатокТовара);
		ОстатокТовараНач = ОстатокТовараНач + ?(РезультатЗапроса.ОстатокТовараНач = Null, 0, РезультатЗапроса.ОстатокТовараНач);
		ПриходТовара     = ПриходТовара     + ?(РезультатЗапроса.ПриходТовара     = Null, 0, РезультатЗапроса.ПриходТовара);
		РасходТовара     = РасходТовара     + ?(РезультатЗапроса.РасходТовара     = Null, 0, РезультатЗапроса.РасходТовара);
	КонецЦикла;
	ПараметрыСтруктура.НачОстатокТоваров = ОстатокТовараНач;
	ПараметрыСтруктура.КонОстатокТоваров = ОстатокТовара;
	ПараметрыСтруктура.ПриходТовара      = ПриходТовара;


		// ДО(90.02,41)-ДО(90.02,42)+ДО(90.02,45.01);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|РБОбороты.СуммаНУОборот КАК СтоимостьРеализованныхТоваров,
		|0                     КАК СтоимостьРеализованныхТоваровЕНВД
		|ИЗ	
		|РегистрБухгалтерии.Финансовый.Обороты(&НачГраница,&КонГраница, ,Счет В ИЕРАРХИИ (&Счет), , (Организация В ИЕРАРХИИ (&Организация)), КорСчет В ИЕРАРХИИ (&КорСчет),) КАК РБОбороты";


	Запрос.УстановитьПараметр("НачГраница",  НачГраница);
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("Счет",        СписокКорСчетов);
	Запрос.УстановитьПараметр("КорСчет",     СписокСчетов);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	СуммаРеализованныхТоваров     = 0;
	СуммаРеализованныхТоваровЕНДВ = 0;

	Пока РезультатЗапроса.Следующий() Цикл
		СуммаРеализованныхТоваров     = СуммаРеализованныхТоваров     + ?(РезультатЗапроса.СтоимостьРеализованныхТоваров = Null, 0, РезультатЗапроса.СтоимостьРеализованныхТоваров);
		СуммаРеализованныхТоваровЕНДВ = СуммаРеализованныхТоваровЕНДВ + ?(РезультатЗапроса.СтоимостьРеализованныхТоваровЕНВД = Null, 0, РезультатЗапроса.СтоимостьРеализованныхТоваровЕНВД);
	КонецЦикла;

	ПараметрыСтруктура.СуммаРеализованныхТоваров     = СуммаРеализованныхТоваров;
	ПараметрыСтруктура.СуммаРеализованныхТоваровЕНДВ = СуммаРеализованныхТоваровЕНДВ; 
	СтоимостьРеализованныхТоваров                    = СуммаРеализованныхТоваров + СуммаРеализованныхТоваровЕНДВ;
	Списано = РасходТовара - СтоимостьРеализованныхТоваров;
	
	Если СтоимостьРеализованныхТоваров + ОстатокТовара = 0 Тогда
		ПараметрыСтруктура.СуммаРасходовКСписанию = 0;
		ПараметрыСтруктура.СреднийПроцент         = 0;
		Возврат;
	КонецЕсли;

	ПараметрыСтруктура.СреднийПроцент = ОКР(ПараметрыСтруктура.СуммаРасходов     / (СтоимостьРеализованныхТоваров+ОстатокТовара),8);
	
	Если СтоимостьРеализованныхТоваров  = 0 Тогда
		ПараметрыСтруктура.СуммаРасходовКСписанию = 0;
		
	Иначе
		ПараметрыСтруктура.СуммаРасходовКсписанию = ПараметрыСтруктура.СуммаРасходов - ОКР(ПараметрыСтруктура.СреднийПроцент*ОстатокТовара,2);
	КонецЕсли;
	
	
	ПараметрыСтруктура.ДоляРасхода = ?(ПараметрыСтруктура.СуммаРасходов = 0, 0, ПараметрыСтруктура.СуммаРасходовКсписанию  / ПараметрыСтруктура.СуммаРасходов);

	
КонецПроцедуры // РасчетТранспортныхРасходов()

Функция СписокПрямыхРасходовНУ(Организация, Дата, ДатаКон = неопределено) Экспорт
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПериодДействия", НачалоГода(Дата));
	Запрос.УстановитьПараметр("НачДата",НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонДата",?(ДатаКон=неопределено,КонецМесяца(Дата),КонецДня(ДатаКон)));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Финансовый.ОсновноеПроизводство);
	Массив.Добавить(ПланыСчетов.Финансовый.ВспомогательныеПроизводства);
	Массив.Добавить(ПланыСчетов.Финансовый.ОбщепроизводственныеРасходы);
	Массив.Добавить(ПланыСчетов.Финансовый.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СписокСчетов",  Массив);
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто",  Массив);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Финансовый.ОсновныеСредства);
	Массив.Добавить(ПланыСчетов.Финансовый.ДоходныеВложенияВ_МЦ);
	Массив.Добавить(ПланыСчетов.Финансовый.НематериальныеАктивы);
	Массив.Добавить(ПланыСчетов.Финансовый.ВложенияВоВнеоборотныеАктивы);
	Массив.Добавить(ПланыСчетов.Финансовый.Материалы);
	Массив.Добавить(ПланыСчетов.Финансовый.Полуфабрикаты);
	Массив.Добавить(ПланыСчетов.Финансовый.Товары);
	Массив.Добавить(ПланыСчетов.Финансовый.ГотоваяПродукция);
	Массив.Добавить(ПланыСчетов.Финансовый.ТоварыОтгруженные);
	Массив.Добавить(ПланыСчетов.Финансовый.РасходыБудущихПериодов);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыСРазнымиДебиторамиИКредиторами);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами_);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыСПерсоналомПоПрочимОперациям);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыПоНалогам);
	Массив.Добавить(ПланыСчетов.Финансовый.РасчетыПоСоциальномуСтрахованию);
	Запрос.УстановитьПараметр("СписокКорСчетов",  Массив);
	Запрос.УстановитьПараметр("ПустойВидРасходовНУ", Перечисления.ВидыРасходовНУ.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Финансовый.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	//Ищем дату действующих правил
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Периоды.ПериодДействия КАК ПериодДействия
	               |ИЗ
	               |	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Периоды
	               |ГДЕ
	               |	Периоды.Организация = &Организация
	               |	И Периоды.ПериодДействия >= &ПериодДействия
	               |	И Периоды.ПериодДействия <= &КонДата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Периоды.ПериодДействия
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодДействия УБЫВ";
	Периоды = Запрос.Выполнить().Выгрузить();
	Если Периоды.Количество()>0 Тогда
		ДатаДействующихПравил = Периоды[0].ПериодДействия;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Правила.ВидРасходовНУ КАК ВидЗатратНУ,
		|	Правила.Подразделение КАК Подразделение,
		|	Правила.Счет КАК СчетЗатрат,
		|	Правила.КорСчет КАК КорСчетЗатрат,
		|	Правила.СтатьяЗатрат КАК СтатьяЗатрат
		|ПОМЕСТИТЬ СписокПрямыхРасходовНУ
		|ИЗ
		|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Правила
		|ГДЕ
		|	Правила.Организация = &Организация
		|	И Правила.ПериодДействия = &ПериодДействия";
		
		Результат = Запрос.Выполнить();
		Возврат Запрос.МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодДействия", ДатаДействующихПравил);
	
	//Определяем какие колонки будут выводиться
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ВЫБОР
	               |			КОГДА Правила.Подразделение = &ПустоеПодразделение
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Поле1,
	               |	СУММА(ВЫБОР
	               |			КОГДА Правила.Счет = &ПустойСчет
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Поле2,
	               |	СУММА(ВЫБОР
	               |			КОГДА Правила.КорСчет = &ПустойСчет
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Поле3,
	               |	СУММА(ВЫБОР
	               |			КОГДА Правила.СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Поле4
	               |ИЗ
	               |	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Правила
	               |ГДЕ
	               |	Правила.Организация = &Организация
	               |	И Правила.ПериодДействия = &ПериодДействия";
	ВидимыеКолонки = Запрос.Выполнить().Выгрузить();
	ЕстьПодразделение = ВидимыеКолонки[0].Поле1>0;
	ЕстьСчет = ВидимыеКолонки[0].Поле2>0;
	ЕстьКорСчет = ВидимыеКолонки[0].Поле3>0;
	ЕстьСтатьяЗатрат = ВидимыеКолонки[0].Поле4>0;
	
	//Собственно сам список прямых расходов
	Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	 +?(ЕстьПодразделение,	Символы.ПС+"	Правила.Подразделение,","")
	 +?(ЕстьСчет,			Символы.ПС+"	Правила.Счет,","")
	 +?(ЕстьКорСчет,		Символы.ПС+"	Правила.КорСчет,","")
	 +?(ЕстьСтатьяЗатрат,	Символы.ПС+"	Правила.СтатьяЗатрат,","")
	 +Символы.ПС+"	Правила.ВидРасходовНУ
	 |ПОМЕСТИТЬ СписокПравил
	 |ИЗ
	 |	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Правила
	 |ГДЕ
	 |	Правила.Организация = &Организация
	 |	И Правила.ПериодДействия = &ПериодДействия
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ"
	 +Символы.ПС+?(ЕстьПодразделение,	"	ФинансовыйОбороты.Подразделение КАК Подразделение,","НЕОПРЕДЕЛЕНО КАК Подразделение,")
	 +Символы.ПС+?(ЕстьСчет,			"	ФинансовыйОбороты.Счет КАК СчетЗатрат,","НЕОПРЕДЕЛЕНО КАК СчетЗатрат,")
	 +Символы.ПС+?(ЕстьКорСчет,			"	ФинансовыйОбороты.КорСчет КАК КорСчетЗатрат,","НЕОПРЕДЕЛЕНО КАК КорСчетЗатрат,")
	 +Символы.ПС+?(ЕстьСтатьяЗатрат,	"	ФинансовыйОбороты.Субконто1 КАК СтатьяЗатрат,","НЕОПРЕДЕЛЕНО КАК СтатьяЗатрат,")
	 +Символы.ПС+"	ФинансовыйОбороты.Субконто1.ВидРасходовНУ КАК ВидЗатратНУ
	 |ПОМЕСТИТЬ СписокПрямыхРасходовНУ
	 |ИЗ
	 |	РегистрБухгалтерии.Финансовый.Обороты(
	 |			&НачДата,
	 |			&КонДата,
	 |			,
	 |			Счет В ИЕРАРХИИ (&СписокСчетов),
	 |			&ВидСубконто,
	 |			Организация = &Организация
	 |				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокПравил.ВидРасходовНУ ИЗ СписокПравил) ИЛИ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ ЕСТЬ NULL,
	 |			,
	 |			) КАК ФинансовыйОбороты
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокПравил КАК Правила
	 |		ПО Выбор Когда ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ
	 |		   (Правила.ВидРасходовНУ = ФинансовыйОбороты.Субконто1.ВидРасходовНУ)"
	 +?(ЕстьПодразделение,	Символы.ПС+"			И (ВЫБОР КОГДА Правила.Подразделение <> &ПустоеПодразделение ТОГДА Правила.Подразделение = ФинансовыйОбороты.Подразделение ИНАЧЕ ИСТИНА КОНЕЦ)","")
	 +?(ЕстьСчет,			Символы.ПС+"			И (ВЫБОР КОГДА Правила.Счет          <> &ПустойСчет          ТОГДА Правила.Счет = ФинансовыйОбороты.Счет                   ИНАЧЕ ИСТИНА КОНЕЦ)","")
	 +?(ЕстьКорСчет,		Символы.ПС+"			И (ВЫБОР КОГДА Правила.КорСчет       <> &ПустойСчет          ТОГДА Правила.КорСчет = ФинансовыйОбороты.КорСчет             ИНАЧЕ ИСТИНА КОНЕЦ)","")
	 +?(ЕстьСтатьяЗатрат,	Символы.ПС+"			И (ВЫБОР КОГДА Правила.СтатьяЗатрат  <> &ПустаяСтатьяЗатрат  ТОГДА Правила.СтатьяЗатрат = ФинансовыйОбороты.Субконто1      ИНАЧЕ ИСТИНА КОНЕЦ)","")
	 +" КОНЕЦ
	 |СГРУППИРОВАТЬ ПО"
	 +?(ЕстьПодразделение,	Символы.ПС+"	ФинансовыйОбороты.Подразделение,","")
	 +?(ЕстьСчет,			Символы.ПС+"	ФинансовыйОбороты.Счет,","")
	 +?(ЕстьКорСчет,		Символы.ПС+"	ФинансовыйОбороты.КорСчет,","")
	 +?(ЕстьСтатьяЗатрат,	Символы.ПС+"	ФинансовыйОбороты.Субконто1,","")
	 +Символы.ПС+"	ФинансовыйОбороты.Субконто1.ВидРасходовНУ";
	 
Запрос.Текст = Запрос.Текст +	" Объединить все 
	|ВЫБРАТЬ
	|	ВыпускПродукцииУслугОбороты.Подразделение,
	|	ВыпускПродукцииУслугОбороты.СчетЗатрат,
	|	ВыпускПродукцииУслугОбороты.СчетСписания,
	|	ВЫБОР КОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2 ССЫЛКА Справочник.СтатьиЗатрат ТОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2 ИНАЧЕ ВыпускПродукцииУслугОбороты.СубконтоСписания3 КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР КОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2 ССЫЛКА Справочник.СтатьиЗатрат ТОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2.ВидРасходовНУ ИНАЧЕ ВыпускПродукцииУслугОбороты.СубконтоСписания3.ВидРасходовНУ КОНЕЦ КАК ВидРасходовНУ
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Организация = &Организация
	|				И ПрямыеРасходыРаспределятьПоКоличеству) КАК ВыпускПродукцииУслугОбороты
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииУслугОбороты.Подразделение,
	|	ВыпускПродукцииУслугОбороты.СчетЗатрат,
	|	ВыпускПродукцииУслугОбороты.СчетСписания,
	|	ВЫБОР КОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2 ССЫЛКА Справочник.СтатьиЗатрат ТОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2 ИНАЧЕ ВыпускПродукцииУслугОбороты.СубконтоСписания3 КОНЕЦ,
	|	ВЫБОР КОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2 ССЫЛКА Справочник.СтатьиЗатрат ТОГДА ВыпускПродукцииУслугОбороты.СубконтоСписания2.ВидРасходовНУ ИНАЧЕ ВыпускПродукцииУслугОбороты.СубконтоСписания3.ВидРасходовНУ КОНЕЦ";	
	
	Результат = Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
 КонецФункции
 
Функция ТипРасходаНУ_Прямой(Подразделение, СтатьяЗатрат, Счет, КорСчет) Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьВидПрочихДоходовИРасходов(Список) Экспорт
	
	Для Индекс = 0 По Список.Количество() - 1 Цикл
		ТекущееЗначение = Список.Получить(Индекс);
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не ТекущееЗначение = Неопределено И Не ТекущееЗначение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() Тогда
			Возврат ТекущееЗначение.ВидПрочихДоходовИРасходов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьМассивСчетовУчетаРасходов() Экспорт
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.ОбщехозяйственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.ОбслуживающиеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.РасходыНаПродажу);
	
	Возврат СчетаЗатрат;
	
КонецФункции // ПолучитьСписокСчетовУчетаКосвенныхРасходов()

Функция ПолучитьМассивВнереализационныхРасходов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);
	
	Возврат Массив;
	
КонецФункции // ПолучитьМассивВнереализационныхРасходов()

Функция ПолучитьМассивСчетовЕНВД() Экспорт
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.ВыручкаЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.СебестоимостьПродажЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.Продажи_РасходыНаПродажуЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Финансовый.Продажи_УправленческиеРасходыЕНВД);
	
	Возврат СчетаЗатрат;
	
КонецФункции // ПолучитьСписокСчетовУчетаКосвенныхРасходов()

Функция ПолучитьТекстВидаДеятельности(ПрименяетсяЕНВД, ЕстьОборотЕНВД, ЭтоЕНВД) Экспорт
	
	
	Если ПрименяетсяЕНВД Тогда
		
			Если ЭтоЕНВД  Тогда
				Возврат " по видам деятельности с особым порядком налогообложения";
			Иначе
				Возврат " по видам деятельности с основной системой налогообложения";
			КонецЕсли;
		
		
		Иначе  // Если ЕНВД не применятся, но обороты по счетам - ЕНВД есть, то будем уточнять вид налогообложения
			   // у видов деятельности
		
		Если ЕстьОборотЕНВД Тогда
			
			Если ЭтоЕНВД  Тогда
				Возврат " по видам деятельности с особым порядком налогообложени";
			Иначе
				Возврат " по видам деятельности с основной системой налогообложения";
			КонецЕсли;
			
		Иначе
			
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорциональноСписокСумм(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт

	Если МассивКоэф.Количество() = 0  Или ИсхСумма = Неопределено Или (ИсхСумма.Сумма = 0 И ИсхСумма.СуммаНУ = 0 И ИсхСумма.СуммаПР = 0 И ИсхСумма.СуммаВР = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИндексМакс = Новый Структура("Индекс,ИндексНУ,ИндексПР,ИндексВР",0,0,0,0);
	МаксЗнач   = 0;
	РаспрСумма = Новый Структура("Сумма,СУммаНУ,СуммаПР,СуммаВР",0,0,0,0);
	СуммаКоэф  = 0;

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл

		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);

		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач   = МодульЧисла;
			ИндексМакс = К;
		КонецЕсли;

		СуммаКоэф = СуммаКоэф + МассивКоэф[К];

	КонецЦикла;


	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивСумм = Новый Массив(МассивКоэф.Количество(), 4);

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		
		Сумма =  Окр(ИсхСумма.Сумма   * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		СуммаНУ =  Окр(ИсхСумма.СуммаНУ * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		СуммаПР =  Окр(ИсхСумма.СуммаПР * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		СуммаВР =  Окр(ИсхСумма.СуммаВР * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		МассивСумм[К] = Новый Структура("Сумма,СуммаНУ,СуммаПР,СУммаВР",Сумма,СуммаНУ,СуммаПР,СУммаВр);
		РаспрСумма.Сумма    = РаспрСумма.Сумма + Сумма;
		РаспрСумма.СуммаНУ  = РаспрСумма.СуммаНУ + СуммаНУ;
		РаспрСумма.СуммаПР  = РаспрСумма.СуммаПР + СуммаПР;
		РаспрСумма.СуммаВР  = РаспрСумма.СуммаВР + СуммаВР;
	КонецЦикла;

	// Погрешности округления отнесем на коэффициент с максимальным весом
	Если Не РаспрСумма.Сумма = ИсхСумма.Сумма Тогда
		МассивСумм[ИндексМакс].Сумма = МассивСумм[ИндексМакс].Сумма + ИсхСумма.Сумма - РаспрСумма.Сумма;
	КонецЕсли;
	
	Если Не РаспрСумма.СуммаНУ = ИсхСумма.СуммаНУ Тогда
		МассивСумм[ИндексМакс].СуммаНУ = МассивСумм[ИндексМакс].СуммаНУ + ИсхСумма.СуммаНУ - РаспрСумма.СуммаНУ;
	КонецЕсли;
	
	Если Не РаспрСумма.СуммаПР = ИсхСумма.СуммаПР Тогда
		МассивСумм[ИндексМакс].СуммаПР = МассивСумм[ИндексМакс].СуммаПР + ИсхСумма.СуммаПР - РаспрСумма.СуммаПР;
	КонецЕсли;

	Если Не РаспрСумма.СуммаВР = ИсхСумма.СуммаВР Тогда
		МассивСумм[ИндексМакс].СуммаВР = МассивСумм[ИндексМакс].СуммаВР + ИсхСумма.СуммаВР - РаспрСумма.СуммаВР;
	КонецЕсли;
	
	Возврат МассивСумм;

КонецФункции // РаспределитьПропорционально()


// Определяет коэффициент распределения
// расходов по видам деятельности (ЕНВД / не ЕНВД).
//
// Параметры
//  Организация - СправочникСсылка.Организации
//  Дата  – Дата – одна из дат того месяца,
//			в котором необходимо рассчитать коэффициент.
//
// Возвращаемое значение:
//   Число – коэффициент распределения расходов по видам деятельности.
//
Функция КоэффициентРаспределенияРасходовПоВидамДеятельности(Организация, Знач Дата, Знач НачДата = Неопределено, ПоВсемСчетам = Истина, ВыручкаНеЕНВД = 0, ВыручкаЕНВД = 0, СписокОрганизаций = Неопределено) Экспорт
	
	Если СписокОрганизаций = Неопределено Тогда
		СписокОрганизаций = Организация;
	КонецЕсли;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
	Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		УчитыватьВсеДоходы = ?(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).БазаРаспределенияКосвенныхРасходовПоВидамДеятельности = Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные, Истина, Ложь);
	Иначе 
		УчитыватьВсеДоходы = Ложь;
	КонецЕсли;
	
	Если НачДата = Неопределено Тогда
		НачДата = НачалоМесяца(Дата);
	КонецЕсли;
	КонДата = КонецМесяца(Дата);      // Доходы от реализации
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА ФинансовыйОбороты.Счет В (&СчетВыручкаЕНВД)
	               |				ТОГДА -ФинансовыйОбороты.СуммаОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВыручкаЕНВД,
	               |	СУММА(ВЫБОР
	               |			КОГДА (НЕ ФинансовыйОбороты.Счет В (&СчетВыручкаЕНВД))
	               |				ТОГДА -ФинансовыйОбороты.СуммаОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВыручкаНеЕНВД,
	               |	СУММА(0) КАК РасходыЕНВДПрошлыхПериодов,
	               |	СУММА(0) КАК РасходыСНачалаГода,
	               |	СУММА(0) КАК РасходыМесяца,
	               |	ФинансовыйОбороты.Счет КАК Счет
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&НачДата,
	               |			&КонДата,
	               |			Период,
	               |			Счет В ИЕРАРХИИ (&МассивСчетов),
	               |			,
	               |			Организация В ИЕРАРХИИ (&Организация),
	               |			(НЕ КорСчет В ИЕРАРХИИ (&МассивСчетов))
	               |				И (НЕ КорСчет В ИЕРАРХИИ (&Счет9009)),
	               |			) КАК ФинансовыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыйОбороты.Счет";
	
	Если УчитыватьВсеДоходы Тогда   // Внереализационные доходы
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ФинансовыйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ПрочиеДоходыЕНВД
		|				ТОГДА -ФинансовыйОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ФинансовыйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ПрочиеДоходыЕНВД
		|				ТОГДА -ФинансовыйОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	ФинансовыйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&ПрочиеДоходы), , Организация В ИЕРАРХИИ (&Организация), Не КорСчет В ИЕРАРХИИ (&ПрочиеДоходы), ) КАК ФинансовыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Счет";
	КонецЕсли;
	
	//Массив счетов, по которым рассчитывается доход организации
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.Выручка);
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.Продажи_НДС);
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.Продажи_Акцизы);
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.Продажи_ЭкспортныеПошлины);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",              НачДата);
	Запрос.УстановитьПараметр("КонДата",              КонДата);
	Запрос.УстановитьПараметр("Организация",          СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД",      НалоговыйУчетУСН.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("Счет9009",             ПланыСчетов.Финансовый.ПрибыльУбытокОтПродаж);
	Запрос.УстановитьПараметр("МассивСчетов",         МассивСчетов);
	Запрос.УстановитьПараметр("ПрочиеДоходы",         ПланыСчетов.Финансовый.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ПрочиеДоходыЕНВД",     Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой, то считаем, что все
	// расходы относятся к деятельности не облагаемой ЕНВД.
	Если РезультатЗапроса.Пустой() Тогда
		Коэффициент = 0;
		
	Иначе
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		ВыручкаЕНВД      = Макс(ТаблицаРезультат.Итог("ВыручкаЕНВД"),   0);
		ВыручкаНеЕНВД    = Макс(ТаблицаРезультат.Итог("ВыручкаНеЕНВД"), 0);
		
		Если ВыручкаНеЕНВД + ВыручкаЕНВД = 0 Тогда // нет дохода ни по одному из видов деятельности
			Коэффициент = 0;
			Возврат Коэффициент;
		КонецЕсли;
		
		

			
			Если ВыручкаНеЕНВД = 0 Тогда  // нет дохода виду деятельности не подпадающему под обложение ЕНВД
				Коэффициент = 1;
				
			Иначе
				Коэффициент = ВыручкаЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
			КонецЕсли;
			
	КонецЕсли;
	
	
	Возврат Коэффициент;
	
КонецФункции // КоэффициентРаспределенияРасходовПоВидамДеятельности()

// Определяет наличие видов деятельности, облагаемых ЕНВД.
//
// Параметры:
//  Организация  - Справочник.Ссылка - Организация, по которой
//                 определяется наличие видов деятельности, облагаемых ЕНВД
//  Дата         - Дата - Дата, на которую получаются сведения
//
// Возвращаемое значение:
//  Булево.
//
Функция ПрименениеЕНВД(Организация, Знач Дата) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация,,Ложь);
	Если УчетнаяПолитика.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	КонецЕсли;

КонецФункции // ПоддержкаПБУ18()

// Определяет, установлена ли поддержка ПБУ 18/02.
//
// Параметры:
//  Организация  - Справочник.Ссылка - Организация, по которой
//                 определяется поддержка ПБУ 18/02
//  Дата         - Дата - Дата, на которую получаются сведения
//
// Возвращаемое значение:
//  Булево.
//
Функция ПрименениеПБУ18(Организация, Знач Дата) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация,,Ложь);
	Если УчетнаяПолитика.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат УчетнаяПолитика.ПоддержкаПБУ18;
	КонецЕсли;

КонецФункции

// Определяет доли списания нормируемых расходов, 
// транспортных расходов, расходов, распределяемых по видам деятельности
Функция ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов, ВидРасхода) Экспорт
		
	Если ТаблицаДолейКосвенныхРасходов = Неопределено Или ТаблицаДолейКосвенныхРасходов.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Строка = ТаблицаДолейКосвенныхРасходов[0];
	Если ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеСтрахованиеЖизни;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеМедицинскоеСтрахование;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Тогда
		Возврат Строка.ДоляРасходовНаВозмещениеПроцентовРаботникам;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
		Возврат Строка.ДоляПредставительскихРасходов;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Тогда
		Возврат Строка.ДоляРасходовНаРекламу;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
		Возврат Строка.ДоляТранспортныхРасходов;
		
	ИначеЕсли ВидРасхода = Неопределено Тогда
		
		Возврат Строка.ДоляЕНВД;
	Иначе	
		
		Возврат 1;
	КонецЕсли;
	
	
КонецФункции

// Формирует проводки, отражающие списание косвенных расходов
// (включение косвенных расходов в уменьшение налогооблагаемой прибыли)
Процедура ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма,СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам = Ложь) Экспорт
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Или СтруктураШапкиДокумента.Предприниматель Тогда
		Сумма.СуммаНУ = 0; Сумма.СуммаПР = 0; Сумма.СуммаВР = 0;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
		Сумма.СуммаПР = 0; Сумма.СуммаВР = 0;
	КонецЕсли;
	
	Если Сумма.СуммаБУ = 0 И Сумма.СуммаНУ = 0 И Сумма.СуммаПР = 0 И Сумма.СуммаВР = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Проводка = мПроводки.Добавить();
	
	Проводка.Период       = СтруктураШапкиДокумента.Дата;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	
	Проводка.СчетДт       = СчетДт; 
	Если АналитикаПоНомГруппам Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Выборка.НоменклатурнаяГруппа);
	КонецЕсли;
	
	Проводка.СчетКт       = Выборка.Счет;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Выборка.СтатьяЗатрат);
	Если АналитикаПоНомГруппам Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Выборка.НоменклатурнаяГруппа);
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, Выборка.Подразделение, Выборка.Подразделение);
	
	Проводка.Содержание   = "Закрытие счетов косвенных расходов";
	
	Проводка.Сумма = Сумма.СуммаБУ;
	СуммаНУ        = Сумма.СуммаНУ;
	СуммаПР        = Сумма.СуммаПР;
	СуммаВР        = Сумма.СуммаВР;
	
	ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
	
КонецПроцедуры

// Создает таблицу долей списания косвенных расходов по видам расходов
// на основе записей регистра сведений "Доли списания косвенных расходов"
Функция ПолучитьТаблицуДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента) Экспорт
	
Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаРекламу КАК ДоляРасходовНаРекламу,
|	РасчетДолейСписанияКосвенныхРасходов.ДоляПредставительскихРасходов КАК ДоляПредставительскихРасходов,
|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеМедицинскоеСтрахование КАК ДоляРасходовНаДобровольноеМедицинскоеСтрахование,
|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеЖизни КАК ДоляРасходовНаДобровольноеСтрахованиеЖизни,
|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаВозмещениеПроцентовРаботникам КАК ДоляРасходовНаВозмещениеПроцентовРаботникам,
|	РасчетДолейСписанияКосвенныхРасходов.ДоляЕНВД КАК ДоляЕНВД,
|	РасчетДолейСписанияКосвенныхРасходов.ДоляТранспортныхРасходов КАК ДоляТранспортныхРасходов,
|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев КАК ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев
|ИЗ
|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК РасчетДолейСписанияКосвенныхРасходов
|ГДЕ
|	РасчетДолейСписанияКосвенныхРасходов.Организация = &Организация
|	И РасчетДолейСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	0,
|	0,
|	0,
|	0,
|	0,
|	0,
|	0,
|	0
|ИЗ
|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
|ГДЕ
|	РегламентнаяОперация.Организация = &Организация
|	И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов)
|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)";

Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.ГоловноеПодразделение);
Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(СтруктураШапкиДокумента.Дата));
Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(СтруктураШапкиДокумента.Дата));

Результат = Запрос.Выполнить();                      

Если Результат.Пустой() Тогда
	Возврат Неопределено;
Иначе
	Возврат Результат.Выгрузить();
КонецЕсли;


КонецФункции

Функция ПолучитьДолиЕНВД(СтруктураПараметров) Экспорт
	
	ЗапросВр = Новый Запрос;
	ЗапросВр.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросВр.УстановитьПараметр("ДатаНач",           СтруктураПараметров.ДатаНачалаПериода);
	ЗапросВр.УстановитьПараметр("ДатаКон",           СтруктураПараметров.ДатаКонцаПериода);
	ЗапросВр.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.СписокОрганизаций);
	ЗапросВр.Текст = 
	"ВЫБРАТЬ
	|	ДолиЕНВД.ДоляЕНВД КАК ДоляЕНВД,
	|	МЕСЯЦ(ДолиЕНВД.ПериодРасчета) КАК МесяцЕНВД
	|ПОМЕСТИТЬ ДолиЕНВД
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|ГДЕ
	|	ДолиЕНВД.Организация В(&СписокОрганизаций)
	|	И ДолиЕНВД.Активность
	|	И ДолиЕНВД.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон";
	
	ЗапросВр.Выполнить();
	
	Возврат ЗапросВр.МенеджерВременныхТаблиц;

КонецФункции


// Процедура вызывается при проведении документов, содержащих отдельные колонки
// для отражения расходов БУ и НУ (Поступление товаров и услуг, Авансовый отчет, ГТД импорт, Поступление доп.расходов
// Процедура анализирует наличие разниц, определяет постоянные и временные разницы,
// создает проводки по счету из колонки "СчетУчетаБУ"
Процедура СоздатьПроводкиПоРазнымСчетамБУиНУ(СтруктураШапкиДокумента, Проводки, ПроводкаБУ, Заголовок, СуммаНУ, СчетДтНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСубконто1 = 1;
	ЗначениеСубконто1 = СубконтоНУ1;
	
	Если ТипЗнч(СубконтоНУ2) = Тип("Структура") Тогда
		ИмяСубконто2      = СубконтоНУ2.Тип;
		ЗначениеСубконто2 = СубконтоНУ2.Значение;
	Иначе
		ИмяСубконто2 = 2;
		ЗначениеСубконто2 = СубконтоНУ2;
	КонецЕсли;
	
	Если ТипЗнч(СубконтоНУ3) = Тип("Структура") Тогда
		ИмяСубконто3      = СубконтоНУ3.Тип;
		ЗначениеСубконто3 = СубконтоНУ3.Значение;
	Иначе
		ИмяСубконто3 = 3;
		ЗначениеСубконто3 = СубконтоНУ3;
	КонецЕсли;
	
	СуммаПР = ПроводкаБУ.Сумма - СуммаНУ;
	
	НеПринимаемыйРасход = ОпределитьНепринимаемыйРасход(
		ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт.РасходыБудущихПериодов, ЗначениеСубконто1, ЗначениеСубконто2, ЗначениеСубконто3);
	
	Если НеПринимаемыйРасход Тогда
			
		ЗаполнитьНалоговыеСуммыПроводки(0, СуммаНУ, ПроводкаБУ.Сумма, СуммаПР, 0, 0, ПроводкаБУ, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		
	ИначеЕсли СчетДтНУ = ПроводкаБУ.СчетДт Тогда
		
		ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, СуммаНУ, СуммаПР, СуммаПР, 0, 0, ПроводкаБУ, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		
	Иначе
		
		ЗаполнитьНалоговыеСуммыПроводки(0, СуммаНУ, СуммаПР, СуммаПР, СуммаНУ, 0, ПроводкаБУ, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		
		// Если отличаются счета БУ и НУ и расход принимаемый - создаем вторую проводку со счетом НУ по дебету
		
		ПроводкаНУ = Проводки.Добавить();
		
		ПроводкаНУ.Период      = ПроводкаБУ.Период;
		ПроводкаНУ.Организация = ПроводкаБУ.Организация;
		ПроводкаНУ.Содержание  = ПроводкаБУ.Содержание;
		ПроводкаНУ.Сумма       = 0;
		
		ПроводкаНУ.СчетДт          = СчетДтНУ;
		
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, ИмяСубконто1, ЗначениеСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, ИмяСубконто2, ЗначениеСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, ИмяСубконто3, ЗначениеСубконто3);
		
		Если ЗначениеЗаполнено(ПроводкаБУ.СчетКт) Тогда
			
			ПроводкаНУ.СчетКт          = ПроводкаБУ.СчетКт;
			
			Для каждого Элемент Из ПроводкаБУ.СубконтоКт Цикл
				ПроводкаНУ.СубконтоКт.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
						
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			ПроводкаНУ, ПроводкаБУ.ПодразделениеДт, ПроводкаБУ.ПодразделениеКт);
		
		ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, 0, 0, 0, -СуммаНУ, 0, ПроводкаНУ, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		
	КонецЕсли;
	
КонецПроцедуры

// Функция анализирует данные проводки и выдает информацию о присутствии или отсутствии
// расходов не принимаемых для целей налогообложения прибыли
Функция ОпределитьНепринимаемыйРасход(Счет, Субконто1, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3) Экспорт
	
	Если Лев(Счет.Код, 2) = "97" Тогда
		СтатьяЗатрат1 = Субконто1.СубконтоЗатрат1;
		СтатьяЗатрат2 = Субконто1.СубконтоЗатрат2;
		СтатьяЗатрат3 = Субконто1.СубконтоЗатрат3;
	Иначе
		СтатьяЗатрат1 = СубконтоНУ1;
		СтатьяЗатрат2 = СубконтоНУ2;
		СтатьяЗатрат3 = СубконтоНУ3;
	КонецЕсли;
	
	НеПринимаемыйРасход = Ложь;
	
	Если ТипЗнч(СтатьяЗатрат1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		НеПринимаемыйРасход = (СтатьяЗатрат1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
	ИначеЕсли ТипЗнч(СтатьяЗатрат2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		НеПринимаемыйРасход = (СтатьяЗатрат2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
	ИначеЕсли ТипЗнч(СтатьяЗатрат3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		НеПринимаемыйРасход = (СтатьяЗатрат3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
	ИначеЕсли ТипЗнч(СтатьяЗатрат1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НеПринимаемыйРасход = НЕ СтатьяЗатрат1.ПринятиеКналоговомуУчету;
	ИначеЕсли ТипЗнч(СтатьяЗатрат2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НеПринимаемыйРасход = НЕ СтатьяЗатрат2.ПринятиеКналоговомуУчету;
	ИначеЕсли ТипЗнч(СтатьяЗатрат3) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НеПринимаемыйРасход = НЕ СтатьяЗатрат3.ПринятиеКналоговомуУчету;
	КонецЕсли;
	
	Возврат НеПринимаемыйРасход;
	
КонецФункции

/// Процедура расчета сумм списания расходов, по которым предусмотрены ограничения
// Нормируемые, транспортные, распределяемые
Процедура ПровестиРасчетСуммРасходовПоКоторымПредусмотреныОграничения(СтруктураШапкиДокумента) Экспорт
	
	ЗаписьДолей = СтруктураШапкиДокумента.ЗаписиДолей.Добавить();
	
	ЗаписьДолей.ДоляРасходовНаРекламу = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые, ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, 1),1);
	
	ЗаписьДолей.ДоляРасходовНаДобровольноеМедицинскоеСтрахование = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 12, Ложь),12);
	
	ЗаписьДолей.ДоляРасходовНаДобровольноеСтрахованиеЖизни = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 6, Ложь),6);
	
	ЗаписьДолей.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев = НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);

	
	ЗаписьДолей.ДоляПредставительскихРасходов = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 4, Истина),4);
	
	Если СтруктураШапкиДокумента.Дата < Дата("20120101") Тогда
		ЗаписьДолей.ДоляРасходовНаВозмещениеПроцентовРаботникам = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 3, Ложь),3);
	КонецЕсли;
	
	ЗаписьДолей.ДоляЕНВД = РаспределениеРасходовПоВидамДеятельности(СтруктураШапкиДокумента);
	
	ЗаписьДолей.ДоляТранспортныхРасходов = СписаниеТранспортныхРасходов(СтруктураШапкиДокумента);
	
	
КонецПроцедуры

// Производит нормирование расходов, для которых норма задается процентом от суммового показателя
//
Функция НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, ВидЗатрат, Норма, Процент)
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	мНачДата    = НачалоМесяца (СтруктураШапкиДокумента.Дата);
	
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	ТекущаяНорма = Норма;
    СуммаБазы = 100 * Норма / Процент;
	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("НачалоТекМесяца",мНачДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",    ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетаЗатрат",  НалоговыйУчет.ПолучитьМассивСчетовУчетаРасходов());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Счет КАК Счет,
	               |	ВложенныйЗапрос.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	СУММА(ВложенныйЗапрос.ОборотДт) КАК ОборотДт,
	               |	СУММА(ВложенныйЗапрос.ОборотКт) КАК ОборотКт,
	               |	СУММА(ВложенныйЗапрос.ОборотПР) КАК ОборотПР
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ФинансовыйОбороты.Счет КАК Счет,
	               |		ФинансовыйОбороты.Субконто1 КАК СтатьяЗатрат,
	               |		ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборотДт, 0) КАК ОборотДт,
	               |		ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборотКт, 0) КАК ОборотКт,
	               |		ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборот, 0) КАК ОборотПР
	               |	ИЗ
	               |		РегистрБухгалтерии.Финансовый.Обороты(
	               |				&НачалоМесяца,
	               |				&КонецМесяца,
	               |				Период,
	               |				Счет В ИЕРАРХИИ (&СчетаЗатрат),
	               |				&ВидСубконто,
	               |				Организация В ИЕРАРХИИ (&Организация)
	               |					И ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = &ВидЗатрат,
	               |				(НЕ КорСчет В ИЕРАРХИИ (&СчетаЗатрат)),
	               |				) КАК ФинансовыйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ФинансовыйОбороты.Счет,
	               |		ФинансовыйОбороты.Субконто1,
	               |		0,
	               |		-ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборотКт, 0),
	               |		-ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборот, 0)
	               |	ИЗ
	               |		РегистрБухгалтерии.Финансовый.Обороты(
	               |				&НачалоТекМесяца,
	               |				&КонецМесяца,
	               |				Период,
	               |				Счет В ИЕРАРХИИ (&СчетаЗатрат),
	               |				&ВидСубконто,
	               |				Организация В ИЕРАРХИИ (&Организация)
	               |					И ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = &ВидЗатрат,
	               |				(НЕ КорСчет В ИЕРАРХИИ (&СчетаЗатрат)),
	               |				) КАК ФинансовыйОбороты) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.СтатьяЗатрат,
	               |	ВложенныйЗапрос.Счет";
	Результат = Запрос.Выполнить();
	
	ТаблицаРасходов = Новый ТаблицаЗначений;
	ТаблицаРасходов = Результат.Выгрузить();
	ТаблицаРасходов.Колонки.Добавить("НеСписано");
	ТаблицаРасходов.Колонки.Добавить("МожноСписать");
	ТаблицаРасходов.Колонки.Добавить("СписатьПостоянныеРазницы");
	
	// Определяем не принятые расходы и учитываем ранее принятые
	Для каждого Расход из ТаблицаРасходов Цикл
		Расход.НеСписано = Расход.ОборотДт - Расход.ОборотКт;
		Норма            = Норма - Расход.ОборотКт;
	КонецЦикла;
	
	Норма = Макс(Норма, 0);
	
	// Определяем сумму расхода по нормам
	ТаблицаРасходов.Сортировать("НеСписано Возр");
	
	
	Для каждого Расход из ТаблицаРасходов Цикл
		
		Если Норма > Расход.НеСписано Тогда
			Расход.МожноСписать = Расход.НеСписано;
			Норма = Норма - Расход.МожноСписать;
			
		Иначе
			Расход.МожноСписать = Норма;
			Норма = 0;
			
		КонецЕсли;
		
		Расход.СписатьПостоянныеРазницы = Расход.ОборотДт - Расход.МожноСписать - Расход.ОборотКт - Расход.ОборотПР;
		
		СтрокаЗаписьНормированияРасходов              = СтруктураШапкиДокумента.ЗаписьНормированияРасходов.Добавить();
		СтрокаЗаписьНормированияРасходов.ВидОперации  = ВидЗатрат;
		СтрокаЗаписьНормированияРасходов.ВидРегОперации= "Закрытие " + Расход.Счет.Код;
		СтрокаЗаписьНормированияРасходов.ЗатратыГод   = Расход.ОборотДт;
		СтрокаЗаписьНормированияРасходов.РасходыГод   = Расход.ОборотКт;
		СтрокаЗаписьНормированияРасходов.СуммаБазы    = СуммаБазы;
		СтрокаЗаписьНормированияРасходов.РасходыМесяц = Расход.МожноСписать;
		СтрокаЗаписьНормированияРасходов.РасходыГод = СтрокаЗаписьНормированияРасходов.РасходыГод + Расход.МожноСписать;
		СтрокаЗаписьНормированияРасходов.РазницыМесяц = Расход.СписатьПостоянныеРазницы;
		СтрокаЗаписьНормированияРасходов.РазницыГод   = Расход.ОборотПР + Расход.СписатьПостоянныеРазницы;
			
	КонецЦикла;
	
	Остаток = ТаблицаРасходов.Итог("ОборотДт") - ТаблицаРасходов.Итог("ОборотКт");
	
	Возврат ?( Остаток = 0, 0, ТаблицаРасходов.Итог("МожноСписать") /  Остаток);
	
Конецфункции // НормированиеРасходовПоПроценту()

Функция СписаниеТранспортныхРасходов(СтруктураШапкиДокумента)
	
	мНачДата    = НачалоМесяца (СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	
	    СуммаРасходовВсего = РасчетПризнанныхТранспортныхРасходов(СтруктураШапкиДокумента);
		
		ПараметрыТР = Новый Структура("СуммаРасходовКсписанию, НачОстатокТоваров, ПриходТовара, СуммаРеализованныхТоваров, СуммаРеализованныхТоваровЕНДВ, Списано, КонОстатокТоваров, СреднийПроцент, СуммаРасходов,ДоляРасхода",
		0, 0, 0, 0, 0, 0, 0, 0, СуммаРасходовВсего,0);
		НалоговыйУчет.РасчетТранспортныхРасходов(мНачДата, мКонДата, СтруктураШапкиДокумента.СписокОрганизаций, ПараметрыТР);
	
		Возврат ПараметрыТР.ДоляРасхода;
	КонецФункции
	
Функция  РасчетПризнанныхТранспортныхРасходов(СтруктураШапкиДокумента)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.СуммаОстаток КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(
	               |			&КонГраница,
	               |			Счет В ИЕРАРХИИ (&СчетЗатрат),
	               |			&ВидыСубконто,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1.ВидРасходовНУ = &ТранспортныеРасходы) КАК ФинансовыйОстатки
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Финансовый.Остатки";
	
				   
				   мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
				   мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
				   
				   Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
				   Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОрганизаций);
				   Запрос.УстановитьПараметр("СчетЗатрат",  ПланыСчетов.Финансовый.РасходыНаПродажу);
	Запрос.УстановитьПараметр("ВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы",  Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
    Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Итог("Сумма");
		
КонецФункции
	

Функция РаспределениеРасходовПоВидамДеятельности(СтруктураШапкиДокумента)
	
	Возврат НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата,,,,, СтруктураШапкиДокумента.СписокОрганизаций)
	
КонецФункции

// Возвращает значение нормы, соответствующее проценту от выручки
//
Функция ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, Процент)
	
	// Формируем массив счетов учета выручки
	СписокВидовДоходов = Новый Массив;
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОбъектовСтроительства);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг);
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	// Формируем запрос по счетам учета выручки
	ЗапросПоВыручке = Новый Запрос;
	ЗапросПоВыручке.УстановитьПараметр("НачалоМесяца", мНачГода);
	ЗапросПоВыручке.УстановитьПараметр("КонецМесяца",  мКонГраница);
	ЗапросПоВыручке.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОрганизаций);
	ЗапросПоВыручке.УстановитьПараметр("Выручка90", ПланыСчетов.Финансовый.ВыручкаНеЕНВД);
	ЗапросПоВыручке.УстановитьПараметр("Выручка91", ПланыСчетов.Финансовый.ПрочиеДоходы);
	ЗапросПоВыручке.УстановитьПараметр("ПрочиеДоходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ЗапросПоВыручке.УстановитьПараметр("СписокВидовДоходов", СписокВидовДоходов);
	ЗапросПоВыручке.УстановитьПараметр("НеЕНВД" , Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	
	ЗапросПоВыручке.Текст = "ВЫБРАТЬ
	                        |	ФинансовыйОбороты.СуммаНУОборотКт КАК ОборотКт
	                        |ИЗ
	                        |	РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В (&Выручка90), , Организация В ИЕРАРХИИ (&Организация), , ) КАК ФинансовыйОбороты
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ФинансовыйОбороты.СуммаНУОборотКт
	                        |ИЗ
	                        |	РегистрБухгалтерии.Финансовый.Обороты(
	                        |			&НачалоМесяца,
	                        |			&КонецМесяца,
	                        |			,
	                        |			Счет В (&Выручка91),
	                        |			&ПрочиеДоходы,
	                        |			Организация В ИЕРАРХИИ (&Организация)
	                        |				И Субконто1.ВидПрочихДоходовИРасходов В (&СписокВидовДоходов)
	                        |				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НеЕНВД,
	                        |			,
	                        |			) КАК ФинансовыйОбороты";
	ВыборкаВыручки = ЗапросПоВыручке.Выполнить().Выбрать();
	
	// Собираем выручку
	ВыручкаНУ = 0;
	Пока ВыборкаВыручки.Следующий() Цикл
		ВыручкаНУ = ВыручкаНУ + ?(ВыборкаВыручки.ОборотКт = Null, 0, ВыборкаВыручки.ОборотКт);
	КонецЦикла;
	
	// Определяем норму
	Возврат Окр((ВыручкаНУ * Процент / 100), 2, 1);
	
КонецФункции // ОпределитьНормуРасходовПоВыручке()

// Возвращает значение нормы, соответствующее проценту от расходов на оплату труда
// с учетом или без учета расходов на добровольное страхование работников
Функция ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, Процент, ВключатьДобровольноеСтрахование = Ложь)
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	
	мСчетаЕНВД = Новый Массив;
	мСчетаЕНВД.Добавить(ПланыСчетов.Финансовый.Продажи_РасходыНаПродажуЕНВД);
	мСчетаЕНВД.Добавить(ПланыСчетов.Финансовый.Продажи_УправленческиеРасходыЕНВД);
	
	// Определяем сумму расходов по виду затрат "Оплата труда"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетЕНВД",     мСчетаЕНВД);
	Запрос.УстановитьПараметр("Счет70",       ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда);
	Запрос.УстановитьПараметр("Счет97",        ПланыСчетов.Финансовый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ОплатаТрудаРБП",Справочники.РасходыБудущихПериодов.РБПНаОплатуТруда);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборотДт, 0)) КАК СуммаРасходовНаОплатуТруда,
	               |	СУММА(ЕСТЬNULL(СписаноНаЕНВД.СуммаНУОборотКт, 0)) КАК СписаноНаЕНВД,
	               |	ФинансовыйОбороты.Субконто1.ВидРасходовНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&Счет70), ) КАК ФинансовыйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&СчетЕНВД), ) КАК СписаноНаЕНВД
	               |		ПО ФинансовыйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	               |ГДЕ
	               |	ФинансовыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыйОбороты.Субконто1.ВидРасходовНУ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборотДт, 0)),
	               |	СУММА(ЕСТЬNULL(СписаноНаЕНВД.СуммаНУОборотКт, 0)),
	               |	ФинансовыйОбороты.Субконто1.ВидРасходовНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			,
	               |			,
	               |			&ВидСубконто,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И КорСубконто1 = &ОплатаТрудаРБП,
	               |			КорСчет В ИЕРАРХИИ (&Счет97),
	               |			) КАК ФинансовыйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&СчетЕНВД), ) КАК СписаноНаЕНВД
	               |		ПО ФинансовыйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	               |ГДЕ
	               |	ФинансовыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыйОбороты.Субконто1.ВидРасходовНУ";
	
	
	ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();
	
	НаОплатуТруда = 0;
	Пока ВыборкаНаОплатуТруда.Следующий() Цикл
		НаОплатуТруда = НаОплатуТруда + ВыборкаНаОплатуТруда.СуммаРасходовНаОплатуТруда - ВыборкаНаОплатуТруда.СписаноНаЕНВД;
	КонецЦикла;
	
	Если ВключатьДобровольноеСтрахование Тогда
		
		// Определяем сумму расходов по виду затрат добровольное страхование работников
		СписокКоррСчетов = Новый Массив;
		СписокКоррСчетов.Добавить(ПланыСчетов.Финансовый.Продажи_РасходыНаПродажу);
		СписокКоррСчетов.Добавить(ПланыСчетов.Финансовый.Продажи_УправленческиеРасходы);
		
		СписокВидовЗатрат = Новый Массив;
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",     мНачГода);
		Запрос.УстановитьПараметр("КонецМесяца",      мКонДата);
		Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидЗатрат",        СписокВидовЗатрат);
		Запрос.УстановитьПараметр("СписокКоррСчетов", СписокКоррСчетов);
		Запрос.УстановитьПараметр("Организация",      СтруктураШапкиДокумента.СписокОрганизаций);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФинансовыйОбороты.СуммаНУОборотДт КАК ОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В (&СписокКоррСчетов), ) КАК ФинансовыйОбороты
		               |ГДЕ
		               |	ФинансовыйОбороты.Субконто1.ВидРасходовНУ В(&ВидЗатрат)";
		ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаНаОплатуТруда.Следующий() Цикл
			НаОплатуТруда = НаОплатуТруда + ?(ВыборкаНаОплатуТруда.ОборотКт = Null, 0, ВыборкаНаОплатуТруда.ОборотКт);
		КонецЦикла;
		
	КонецЕсли;
	
	// Определяем норму
	Возврат Окр((НаОплатуТруда * Процент / 100), 2, 1);
	
КонецФункции //ОпределитьНормуПоРасходамНаОплатуТруда()

// Производит нормирование расходов, для которых норма задана фиксированной суммой на работника
//
Функция НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, ВидЗатрат)
	
	// найдем период для анализа ранее нормированных расходов
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",      ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОрганизаций);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Финансовый.РасходыБудущихПериодов);
	Массив.Добавить(ПланыСчетов.Финансовый.ПлатежиПоДобровольномуСтрахованиюРаботников);
	Запрос.УстановитьПараметр("СчетРБП",  Массив);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	МИНИМУМ(ЕСТЬNULL(ФинансовыйОбороты.СубконтоКт1.ДатаНачалаСписания, &НачалоМесяца)) КАК Субконто1ДатаНачалаСписания
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(
	|		&НачалоМесяца,
	|		&КонецМесяца,
	|		,
	|		,
	|		&ВидКорСубконто,
	|		СчетКт В ИЕРАРХИИ (&СчетРБП),
	|		&ВидСубконто,
	|		Организация В ИЕРАРХИИ (&Организация)
	|		    И СубконтоДт1.ВидРасходовНУ = &ВидЗатрат) КАК ФинансовыйОбороты";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0 ;
	КонецЕсли;
	
	НачалоПериодаСтрахования = Результат.Выбрать();
	Пока НачалоПериодаСтрахования.Следующий() Цикл
		ДатаНачалаПериодаСтрахования = НачалоПериодаСтрахования.Субконто1ДатаНачалаСписания;
	КонецЦикла;
	
	мНачДата    = НачалоМесяца (СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	
	ДатаНачалаПериодаСтрахования = ?(НЕ ЗначениеЗаполнено(ДатаНачалаПериодаСтрахования), мНачДата, ДатаНачалаПериодаСтрахования);
	// Формируем запрос по затратам в разрезе работников
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   ДатаНачалаПериодаСтрахования);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("НачалоТекМесяца",мНачДата);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос.УстановитьПараметр("ВидКорСубконто", Массив);
	Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",  НалоговыйУчет.ПолучитьМассивСчетовУчетаРасходов());
	Запрос.УстановитьПараметр("ВидЗатрат",      ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборотДт, 0)) КАК ОборотДт,
	               |	СУММА(ВЫБОР
	               |			КОГДА ФинансовыйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	               |					И ФинансовыйОбороты.Период > &НачалоТекМесяца
	               |				ТОГДА 0
	               |			ИНАЧЕ ЕСТЬNULL(ФинансовыйОбороты.СуммаНУОборотКт, 0)
	               |		КОНЕЦ) КАК ОборотКт,
	               |	СУММА(ВЫБОР
	               |			КОГДА ФинансовыйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	               |					И ФинансовыйОбороты.Период > &НачалоТекМесяца
	               |				ТОГДА 0
	               |			ИНАЧЕ ЕСТЬNULL(ФинансовыйОбороты.СуммаПРОборот, 0)
	               |		КОНЕЦ) КАК ОборотКтПР,
	               |	0 КАК КоличествоЗастрахованных
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			Регистратор,
	               |			Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов),
	               |			&ВидСубконто,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1.ВидРасходовНУ = &ВидЗатрат,
	               |			,
	               |			) КАК ФинансовыйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФинансовыйОбороты.КорСубконто1)
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов),
	               |			&ВидСубконто,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1.ВидРасходовНУ = &ВидЗатрат,
	               |			,
	               |			&ВидКорСубконто) КАК ФинансовыйОбороты";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	ТаблицаРасходов = Новый ТаблицаЗначений;
	ТаблицаРасходов = Результат.Выгрузить();
	СуммаБазы = ТаблицаРасходов.Итог("КоличествоЗастрахованных") * 15000;
	
	
	ЗатратыГод   = ТаблицаРасходов.Итог("ОборотДт");
	РасходыГод = ?(СуммаБазы > ЗатратыГод, ЗатратыГод, СуммаБазы);
	РасходыМесяц = РасходыГод - ТаблицаРасходов.Итог("ОборотКт");
	РазницыГод = ЗатратыГод - РасходыГод;
	РазницыМесяц =  РазницыГод  - ТаблицаРасходов.Итог("ОборотКтПР");
	
	Если НЕ ЗатратыГод = 0 Или Не РасходыГод = 0 Или Не РасходыМесяц = 0 Или Не РазницыМесяц = 0 Или Не РазницыГод = 0 Тогда
		
		СтрокаЗаписьНормированияРасходов              = СтруктураШапкиДокумента.ЗаписьНормированияРасходов.Добавить();
		СтрокаЗаписьНормированияРасходов.ВидОперации  = ВидЗатрат;
		СтрокаЗаписьНормированияРасходов.ВидРегОперации= "Страхование";
		СтрокаЗаписьНормированияРасходов.СуммаБазы    = СуммаБазы;
		СтрокаЗаписьНормированияРасходов.ЗатратыГод   = ЗатратыГод;
		СтрокаЗаписьНормированияРасходов.РасходыГод = РасходыГод;
		СтрокаЗаписьНормированияРасходов.РасходыМесяц = РасходыМесяц;
		СтрокаЗаписьНормированияРасходов.РазницыМесяц = РазницыМесяц;
		СтрокаЗаписьНормированияРасходов.РазницыГод   = РазницыГод;
		
	КонецЕсли;
	
	Остаток = ТаблицаРасходов.Итог("ОборотДт") - ТаблицаРасходов.Итог("ОборотКт");
	
	Возврат ?(Остаток = 0, 0, РасходыМесяц / Остаток);	
	
КонецФункции // НормированиеРасходовПоРаботникуОрганизации()

// Производится проверка заполнения обязательных реквизитов
// регистров налогового учета
Функция ПроверитьЗаполнениеОбязательныхРеквизитов(НачалоПериода,КонецПериода,Организация) Экспорт
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Укажите дату начала периода");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Укажите дату окончания периода");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) И НачалоПериода > КонецПериода Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Дата начала периода не может быть больше даты конца периода");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Укажите организацию");
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции
