
///////////////////////////////////////////////
// ОБЩИЕ

Функция ПолучитьНомерНеделиПоДате(мДата) Экспорт
	
	Перем Запрос;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", НачалоДня(мДата));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоответствиеДатДнямНедели.НомерНедели
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.Дата = &Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерНедели;
	
КонецФункции

Функция ПолучитьХарактеристикуНоменклатуры(мПроизводитель, мНоменклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Производитель"	, мПроизводитель);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПроизводителиТоваров.Объект КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ПроизводителиТоваров
	|ГДЕ
	|	ПроизводителиТоваров.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|	И ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Номенклатура
	|	И (ВЫРАЗИТЬ(ПроизводителиТоваров.Значение КАК Справочник.Контрагенты)) = &Производитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикаНоменклатуры;
	
КонецФункции

// Функция возвращает массив статей ДДС, относящихся к оплате ЗП
Функция ПолучитьСтатьиДДСОплатаЗП() Экспорт
	
	СпрСтатьиДДС = Справочники.СтатьиДвиженияДенежныхСредств;
	
	МассивСтатей = Новый Массив;
	
	// те, у которых наименование начинается с "Оплата зарплаты"
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("135019")); 
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("135012"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("136110"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("134010"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("137110"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("133121"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("133110"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("220110"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("136210"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("139210"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("137193"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("133010"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("131012"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("120213"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("200610"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("120510"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("200210"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("141010"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("181010"));
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("138111"));
	// "Оплата промоутера"
	МассивСтатей.Добавить(СпрСтатьиДДС.НайтиПоКоду("120610"));
	
	Возврат МассивСтатей;
	
КонецФункции

Функция ПолучитьОсновнойДоговорКонтрагента(мОрганизация, мКонтрагент, мДата = Неопределено, СписокВидовДоговоров = Неопределено) Экспорт
	
	Если мДата = Неопределено Тогда
		мДата = ТекущаяДата();
	КонецЕсли;
	
	ЕстьОтборПоВидамДоговоров = (НЕ СписокВидовДоговоров = Неопределено);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, мОрганизация);
	Запрос.УстановитьПараметр("Контрагент"	, мКонтрагент);
	Запрос.УстановитьПараметр("Дата"		, мДата);
	Если ЕстьОтборПоВидамДоговоров Тогда
		Запрос.УстановитьПараметр("ВидыДоговоров", СписокВидовДоговоров);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеДоговораКонтрагентовСрезПоследних.ДоговорКонтрагента
	|ИЗ
	|	РегистрСведений.ОсновныеДоговораКонтрагентов.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И &УсловиеПоВидамДоговоров) КАК ОсновныеДоговораКонтрагентовСрезПоследних";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|				И &УсловиеПоВидамДоговоров",
		?(ЕстьОтборПоВидамДоговоров,
			?(ТипЗнч(СписокВидовДоговоров) = Тип("СписокЗначений") ИЛИ ТипЗнч(СписокВидовДоговоров) = Тип("Массив"), "
	|				И ДоговорКонтрагента.ВидДоговора В(&ВидыДоговоров)", "
	|				И ДоговорКонтрагента.ВидДоговора = &ВидыДоговоров"), ""));
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДоговорКонтрагента;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции	

Функция НекорректныйДоговор(мДоговорКонтрагента) Экспорт
	
	Если мДоговорКонтрагента.Пустая() Тогда // пустой - корректный
		Возврат Ложь;
	КонецЕсли;
	
	Если мДоговорКонтрагента.ПометкаУдаления Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат (Найти(ВРЕГ(мДоговорКонтрагента.Наименование), "НЕ ИСПОЛЬЗ") > 0);
	
КонецФункции

Функция ПолучитьНачальныйНомерТТН(мОрганизация, мВидОперации, мДата, мГод) Экспорт
	
	Если мОрганизация.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если мДата = Дата(1, 1, 1) Тогда
		мДата = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперации"	, мВидОперации);
	Запрос.УстановитьПараметр("Организация"	, мОрганизация);
	Запрос.УстановитьПараметр("Дата"		, мДата);
	Запрос.УстановитьПараметр("ГодДаты"		, мГод);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(АктПеревозчикаРасходныеОрдера.НомерТТН) КАК НомерТТН
	|ИЗ
	|	Документ.АктПеревозчика.РасходныеОрдера КАК АктПеревозчикаРасходныеОрдера
	|ГДЕ
	|	АктПеревозчикаРасходныеОрдера.Ссылка.ВидОперации = &ВидОперации
	|	И АктПеревозчикаРасходныеОрдера.Ссылка.Организация = &Организация
	|	И АктПеревозчикаРасходныеОрдера.Ссылка.Дата < &Дата
	|	И ГОД(АктПеревозчикаРасходныеОрдера.Ссылка.ДатаОкончания) = &ГодДаты
	|	И НЕ АктПеревозчикаРасходныеОрдера.Ссылка.ПометкаУдаления";
	
	Если мВидОперации = Перечисления.ВидыОперацийАктПеревозчика.ДоставкаНаСклад Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасходныеОрдера", "ПриходныеОрдера");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.НомерТТН), Выборка.НомерТТН, 0) + 1;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстВызоваПрограммыПечатиФайлов(пИмяФайла) Экспорт
	
	Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		
		Возврат """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		
		Возврат "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		
		Возврат """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		
		Возврат """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда
		
		Возврат """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".html") > 0 Тогда	
		
		//пПрограмма = """C:\Program Files (x86)\Internet Explorer\iexplore.exe"" /p ""пИмяФайла""";
		Возврат """C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"" /p ""пИмяФайла""";

	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		Возврат "";;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕстьВложения(СсылкаНаОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХранилищеДополнительнойИнформации.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Ссылка
	|	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.КоличествоФайлов > 0);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает текст ГУИД для запроса SQL (поле SQL тип binary(16))
// Параметры:
// 	ТекстГУИД - Строка(УникальныйИдентификатор), тип Строка
// Возвращается:
// 	Строка, длина 34 символа
Функция ПолучитьТекстГУИДДляSQL(ТекстГУИД) Экспорт
	
	Возврат "0x" + Сред(ТекстГУИД, 20, 4) + Прав(ТекстГУИД, 12) + Сред(ТекстГУИД, 15, 4) + Сред(ТекстГУИД, 10, 4) + Лев(ТекстГУИД, 8);
	
КонецФункции

// Функция возвращает массив физ. лиц - Помощников технологов для передаваемой характеристики
// Параметры:
// 	мХарактеристика - характеристика, тип - СправочникСсылка.ХаратеристикиНоменклатуры
// Возвращается:
//  Массив
Функция ПолучитьПомощниковТехнологаПоХарактеристике(мХарактеристика) Экспорт
	
	МассивСотрудников = Новый Массив;
	Если ТипЗнч(мХарактеристика)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		МассивХарактеристик=Новый Массив;
		МассивХарактеристик.Добавить(мХарактеристика);
	Иначе	
		МассивХарактеристик=мХарактеристика;
	КонецЕсли; 
	// помощники технолога
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", МассивХарактеристик); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|			ПО (РолиПользователейСоставРоли.Ссылка.Родитель = СоответствиеОбъектРольСрезПоследних.РольПользователя)
		|				И (СоответствиеОбъектРольСрезПоследних.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ПО вт.Ссылка = СоответствиеОбъектРольСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (РолиПользователейСоставРоли.Ссылка.Родитель = СоответствиеОбъектРольСрезПоследних.РольПользователя)
		|			И (СоответствиеОбъектРольСрезПоследних.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|			ПО (вт.Ссылка = ЗначенияСвойствОбъектов.Объект)
		|		ПО (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.Производитель))
		|			И СоответствиеОбъектРольСрезПоследних.Объект = ЗначенияСвойствОбъектов.Значение";
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[1].Выбрать(); 		// сначала для характеристики
	Если Выборка.Количество() = 0 Тогда
		Выборка = Результаты[2].Выбрать(); 	// потом для производителя, если не найдено для характеристики
    КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		МассивСотрудников.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции


///////////////////////////////////////////////
// ПРАВА

// Функция предназначена для получения значения по имени переменной из КЭШа конфигурации
// Вызывается из функции ПолучитьЗначениеПеременной
//
// Параметры:
//	Имя					- Строка, имя переменной
//	НайденноеЗначение	- Произвольное значение, значение переменной. Заполняется в ходе выполнения функции
//  Кэш					- КЭШ из которого получали значение. Заполняется в ходе выполнения функции
//  ПоместитьВКэш		- Булево, Истина, если значение требуется поместить в КЭШ. Заполняется в ходе выполнения функции
//
// Возвращаемое значение: 
//  Булево - Истина, если значение было получено из КЭШа, иначе Ложь
//
Функция ПолучитьИзКэшаКонфигурации(Имя, НайденноеЗначение, Кэш, ПоместитьВКэш)
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	
	Если Кэш <> Неопределено Тогда
		// Ищем значение в структуре
		Если Кэш.Свойство(Имя, НайденноеЗначение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	//Не нашли значение в кэше - вычисленное значение надо будет поместить в Кэш
	ПоместитьВКэш = Истина;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьЗначениеПеременной(Имя)
	
	ИмяПараметраВР = ВРег(Имя);
	
	НайденноеЗначение = Неопределено;
	
	Кэш = Неопределено;
	ПоместитьВКэш = Ложь;
	
	Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
		Если ИмяПараметраВР = ВРег("глТекущийПользователь") Тогда
			НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
		Иначе	
			НайденноеЗначение = Новый Соответствие;
		КонецЕсли;
	КонецЕсли; 
	
	Если ПоместитьВКэш Тогда
		
		// В функции ПолучитьИзКэшаКонфигурации получили значение параметра сеанса
		// Добавим в него новое значение переменной и поместим в КЭШ
		Кэш.Вставить(Имя, НайденноеЗначение);
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
		
	КонецЕсли; 
	
	Возврат НайденноеЗначение;
	
КонецФункции

Процедура УстановитьЗначениеПеременной(ИмяПараметра, ЗначениеПараметра, ОбновитьКэшНаСервере = Ложь)
	
	// Обновим значение переменной в кэше на сервере. Это происходит в двух случаях:
	// 1. при выполнении на клиенте, когда ОбновитьКэшНаСервере = Истина (см. выше)
	// 2. при выполнении на сервере
	КэшНаСервере = ПараметрыСеанса.ОбщиеЗначения.Получить();
		
	// Если ПараметрыСеанса.ОбщиеЗначения еще не инициализирована, инициализируем ее 
	Если КэшНаСервере = Неопределено Тогда
		КэшНаСервере = Новый Структура;
	КонецЕсли;
	
	КэшНаСервере.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(КэшНаСервере);
	
КонецПроцедуры

// Функция возвращает список значений права, установленных для пользователя или группы пользователя.
// Если нет установленных прав , то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//  Пользователь		- пользователь
//
// Возвращаемое значение:
//  Список всех значений, установленных для пользователя или группы пользователя
//
Функция ПрочитатьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию, Пользователь)
	
	ВозвращаемыеЗначения = Новый Массив;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"     , Пользователь);
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрЗначениеПрав.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
	|ГДЕ
	|	РегистрЗначениеПрав.Право = &ПравоПользователя
	|	И РегистрЗначениеПрав.Пользователь В
	|			(ВЫБРАТЬ
	|				ПользователиГруппы.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	|			ГДЕ
	|				ПользователиГруппы.Пользователь = &Пользователь
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				&Пользователь)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	Иначе
		Пока Выборка.Следующий() Цикл
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат ВозвращаемыеЗначения;

КонецФункции

// Функция возвращает значение дополнительного права профиля пользователя
//
//	Параметры:
//  	Право               - право, наличие которого проверяется (Тип ПВХ.ПраваПользователей)
//  	ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        	отсутствия значений в регистре сведений). Тип - булево
//
//	Возвращаемое значение: значение права
//
Функция ПолучитьЗначениеПраваПользователя(ИмяПрава, ЗначениеПоУмолчанию) Экспорт
	
	Перем Право, КэшДополнительныхПрав, МассивЗначенийПрава, ОбъектПрав, Запрос, Выборка;
	
	Право = ПланыВидовХарактеристик.ПраваПользователей[ИмяПрава];
	
	КэшДополнительныхПрав = ПолучитьЗначениеПеременной("ЗначенияДополнительныхПравПользователя");
	
	МассивЗначенийПрава = КэшДополнительныхПрав[Право];
	
	Если МассивЗначенийПрава = Неопределено Тогда
		
		МассивЗначенийПрава = Новый Массив;
		
		ОбъектПрав = ПараметрыСеанса.ТекущийПользователь.ПрофильПолномочийПользователя;//глЗначениеПеременной("ПрофильПолномочийПользователя");
		Если ЗначениеЗаполнено(ОбъектПрав) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОбъектПрав"			, ОбъектПрав);
			Запрос.УстановитьПараметр("ПравоПользователя"	, Право);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РегистрЗначениеПрав.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
			|ГДЕ
			|	РегистрЗначениеПрав.Право = &ПравоПользователя
			|	И РегистрЗначениеПрав.Пользователь = &ОбъектПрав";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ЗначениеПрава = Выборка.Значение;
			Иначе
				ЗначениеПрава = ЗначениеПоУмолчанию;
			КонецЕсли;
			МассивЗначенийПрава.Добавить(ЗначениеПрава);
		Иначе
			ТекущийПользователь = ПолучитьЗначениеПеременной("глТекущийПользователь");	
			МассивЗначенийПрава = ПрочитатьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию, ТекущийПользователь);
		КонецЕсли;
		
		КэшДополнительныхПрав[Право] = МассивЗначенийПрава;
		
		УстановитьЗначениеПеременной("ЗначенияДополнительныхПравПользователя", КэшДополнительныхПрав, Истина);
	КонецЕсли;
	
	Возврат МассивЗначенийПрава[0];
	
КонецФункции


///////////////////////////////////////////////
// ТОВАРНЫЙ АССОРТИМЕНТ

Процедура УстановитьВыведенаТоварныйАссортимент() Экспорт
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open();
	
	ADOСоединение.Execute("exec M2.dbo.update_vivedena");
	
	ADOСоединение.Close();
	
КонецПроцедуры

Функция ПолучитьТаблицыДляНовыхХарактеристикАссортимента(мДата) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"		, мДата);
	Запрос.УстановитьПараметр("Кавказский"	, Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));   // Кавказский_1
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад КАК ОсновнойСклад,
	|	СУММА(1) КАК Колво
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ОсновнойСклад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &Кавказский
	|		ИНАЧЕ СтруктурныеЕдиницы.ОсновнойСклад
	|	КОНЕЦ КАК ОсновнойСклад
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	//+++АК KIRN 2018.06.21  ИП-00019077.000.00000002
	|	ИЛИ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница)
	//---АК KIRN 
	|";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Возврат Результаты;
	
КонецФункции

Функция ПолучитьПланыПродажЗаПрошлуюНеделю(мТорговаяТочка, МассивНоменклатуры, мДата) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка"		, мТорговаяТочка);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, МассивНоменклатуры);
	Запрос.УстановитьПараметр("ДеньНеделиДаты"		, ДеньНедели(мДата));
	Запрос.УстановитьПараметр("НачалоСледНедели"	, КонецНедели(мДата) + 1);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
	|	НЕДЕЛЯ(ПланыПродажПоДнямНедели.Дата) КАК НеделяДаты,
	|	МАКСИМУМ(ПланыПродажПоДнямНедели.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТМаксДаты
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|ГДЕ
	|	ПланыПродажПоДнямНедели.ТорговаяТочка = &ТорговаяТочка
	|	И ПланыПродажПоДнямНедели.Номенклатура В(&МассивНоменклатуры)
	|	И ПланыПродажПоДнямНедели.Дата < &НачалоСледНедели
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПродажПоДнямНедели.Номенклатура,
	|	НЕДЕЛЯ(ПланыПродажПоДнямНедели.Дата)
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПланыПродажПоДнямНедели.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДЕНЬНЕДЕЛИ(ПланыПродажПоДнямНедели.Дата) КАК ДеньНеделиДаты,
	|	ПланыПродажПоДнямНедели.Номенклатура,
	|	ПланыПродажПоДнямНедели.Количество
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТМаксДаты.Номенклатура КАК Номенклатура,
	|			МАКСИМУМ(ВТМаксДаты.Дата) КАК Дата
	|		ИЗ
	|			ВТМаксДаты КАК ВТМаксДаты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТМаксДаты.Номенклатура) КАК МаксДаты
	|		ПО (МаксДаты.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура)
	|			И (НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ПланыПродажПоДнямНедели.Дата, НЕДЕЛЯ), ДЕНЬ) = МаксДаты.Дата)
	|ГДЕ
	|	ПланыПродажПоДнямНедели.ТорговаяТочка = &ТорговаяТочка
	|	И ПланыПродажПоДнямНедели.Номенклатура В(&МассивНоменклатуры)
	|	И НЕ МаксДаты.Номенклатура ЕСТЬ NULL ";

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьПланыПродажНаНеделюВперед(мТорговаяТочка, мНоменклатура) Экспорт
	
	НачДата = НачалоДня(ТекущаяДата());

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"		, НачДата);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТорговаяТочка);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	Запрос.УстановитьПараметр("ГруппаУРЗ"		, мНоменклатура.ГруппаНоменклатурыУРЗ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	|ПОМЕСТИТЬ ВТРасчетчик
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ГруппаУРЗ = &ГруппаУРЗ
	|				И ТорговаяТочка = &ТорговаяТочка) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧГруппыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетчик КАК ВТРасчетчик
	|		ПО (ВТРасчетчик.Расчетчик = ТЧГруппыНоменклатуры.Ссылка.Склад)
	|ГДЕ
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры = &Номенклатура
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекРасчетчик =  Выборка.Ссылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	//
	ТекЦена = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"		, НачДата);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТорговаяТочка);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(ТорговаяТочка = &ТорговаяТочка
	|				ИЛИ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.ТорговаяТочка = &ТорговаяТочка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекЦена = Выборка.Цена;
	КонецЕсли;
	
	
	//Запрос = Новый Запрос;
	МассивНом = Новый Массив;
	МассивНом.Добавить(мНоменклатура);
	ПрошлыеПланы = ПолучитьПланыПродажЗаПрошлуюНеделю(мТорговаяТочка, МассивНом, НачДата);
	
	СтруктураПоиска = Новый Структура("ДеньНеделиДаты, Номенклатура");
	мСклад 		= ТекРасчетчик.Склад;
	мВесовой 	= мНоменклатура.Весовой;
	РегПланыПродаж = РегистрыСведений.ПланыПродажПоДнямНедели;
	Для н = 1 по 7 Цикл
		
		ТекДата = НачДата + (н - 1) * 86400;
		
		МенеджерЗаписи = РегПланыПродаж.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Дата 			= ТекДата;
		МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= мНоменклатура;
		МенеджерЗаписи.Расчетчик 		= ТекРасчетчик;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи = Неопределено;
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи.Дата 			= ТекДата;
		МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= мНоменклатура;
		МенеджерЗаписи.Расчетчик 		= ТекРасчетчик;
		
		СтруктураПоиска.ДеньНеделиДаты 	= ДеньНедели(ТекДата);
		СтруктураПоиска.Номенклатура 	= мНоменклатура;
		СтрокиПланов = ПрошлыеПланы.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПланов.Количество() > 0 Тогда
			МенеджерЗаписи.Количество 	= СтрокиПланов[0].Количество;
		Иначе
			МенеджерЗаписи.Количество 	= ?(НЕ мВесовой, 1, 0.2);
		КонецЕсли;
		
		МенеджерЗаписи.Цена 			= ТекЦена;
		МенеджерЗаписи.Склад 			= мСклад;
		Попытка
		    МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////
// ПРОГНОЗИРОВАНИЕ

// Функция возвращает массив доступной номенклатуры расчетчика
//
Функция ПолучитьМассивДоступнойНоменклатуры(мРасчетчик, мСклад = Неопределено) Экспорт
	
	Перем Запрос, ТекстЗапроса;
	
	Запрос = Новый Запрос;
	Если мСклад = Неопределено Тогда
		Запрос.УстановитьПараметр("Расчетчик"	, мРасчетчик);
	Иначе
		Запрос.УстановитьПараметр("Склад"		, мСклад);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ГруппыНоменклатуры
	|ГДЕ
	|	НЕ ГруппыНоменклатуры.Ссылка.ПометкаУдаления
	|	И НЕ ГруппыНоменклатуры.ГруппаНоменклатуры.ЭтоГруппа
	|	И НЕ ГруппыНоменклатуры.ГруппаНоменклатуры.ПометкаУдаления
	|	И &Условие1";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие1",
				?(ЗначениеЗаполнено(мРасчетчик),
					?(мСклад = Неопределено, "ГруппыНоменклатуры.Ссылка = &Расчетчик", "ГруппыНоменклатуры.Ссылка.Склад = &Склад"),
					"ИСТИНА"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

// Функция возвращает массив доступной номенклатуры склада хранения
//
Функция ПолучитьМассивДоступнойНоменклатурыПоСкладуХранения(мСкладХранения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(мСкладХранения) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
    //
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", мСкладХранения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиПоСкладу.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад = &Склад
	|				И НЕ Номенклатура.ПометкаУдаления) КАК ОстаткиПоСкладу
	|ГДЕ
	|	ОстаткиПоСкладу.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.Склад = &Склад
	|	И НЕ ДоступностьТоваровНаСкладах.Номенклатура.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

// Функция возвращает массив полных аналогов товаров для массива номенклатуры, либо в целом для расчетчика
//
Функция ПолучитьМассивПолныхАналоговТоваров(МассивНоменклатуры) Экспорт
	
	Перем Запрос, ТекстЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧТовары.Номенклатура КАК Аналог
	|ИЗ
	|	Справочник.АналогиНоменклатуры.Товары КАК ТЧТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры КАК АналогиНоменклатуры
	|		ПО (АналогиНоменклатуры.Ссылка = ТЧТовары.Ссылка)
	|			И (АналогиНоменклатуры.ПолностьюЗаменяемыйТовар)
	|			И (НЕ АналогиНоменклатуры.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК ТЧТовары2
	|		ПО (ТЧТовары2.Ссылка = ТЧТовары.Ссылка)
	|			И (НЕ ТЧТовары2.Номенклатура = ТЧТовары.Номенклатура)
	|			И (НЕ ТЧТовары2.НомерСтроки = ТЧТовары.НомерСтроки)
	|ГДЕ
	|	(ТЧТовары2.Номенклатура В (&МассивНоменклатуры)
	|			ИЛИ ТЧТовары.Номенклатура В (&МассивНоменклатуры))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Аналог");
	
КонецФункции

// Функция возвращает массив состава комплекта для массива номенклатуры, либо в целом для расчетчика
//
Функция ПолучитьМассивСоставаКомплекта(МассивНоменклатуры) Экспорт
	
	Перем Запрос, ТекстЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставКомплектаСрезПоследних.ТоварКомплекта КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоставКомплекта.СрезПоследних(, Комплект В (&МассивНоменклатуры)) КАК СоставКомплектаСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СоставКомплектаСрезПоследних.Комплект
	|ИЗ
	|	РегистрСведений.СоставКомплекта.СрезПоследних(
	|			,
	|			ТоварКомплекта В (&МассивНоменклатуры)
	|				И НЕ Комплект.Выведена) КАК СоставКомплектаСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

// Функция возвращает массив доступных торговых точек расчетчика
//
Функция ПолучитьМассивДоступныхТорговыхТочек(мСклад = Неопределено, мСписокНоменклатуры, мСписокМаршрутов = Неопределено) Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	ПоВсемСкладам 	= НЕ ЗначениеЗаполнено(мСклад);
	ЕстьМаршрут 	= ЗначениеЗаполнено(мСписокМаршрутов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ТекущаяДата() + 86400));
	Если НЕ ПоВсемСкладам Тогда
		Запрос.УстановитьПараметр("Склад", мСклад);         // СправочникСсылка.СтруктурныеЕдиницы
	КонецЕсли;
	Если ЕстьМаршрут Тогда
		Запрос.УстановитьПараметр("СписокМаршрутов", мСписокМаршрутов);
	КонецЕсли;
	Если ТипЗнч(мСписокНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
		мМассивНоменклатуры = Новый Массив;
		мМассивНоменклатуры.Добавить(мСписокНоменклатуры);
		Запрос.УстановитьПараметр("СписокНоменклатуры", мМассивНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("СписокНоменклатуры", мСписокНоменклатуры);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ
	|ПОМЕСТИТЬ ВТГруппыУРЗ
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ СпрНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ ТТАссортимента
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка.Активное
	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	//+++АК ILIK 2018.08.03 ИП-00019413
	//|				И НЕ ТорговаяТочка.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|				И НЕ ТорговаяТочка.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
	//---АК ILIK
	|				И НЕ ТорговаяТочка.НеУчаствуетВРаспределении
	|				И &УсловиеПоМаршруту
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ТТАссортимента.ТорговаяТочка
	|					ИЗ
	|						ТТАссортимента)
	|				И ГруппаУРЗ В
	|					(ВЫБРАТЬ
	|						ВТГруппыУРЗ.ГруппаУРЗ
	|					ИЗ
	|						ВТГруппыУРЗ)) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|ГДЕ
	|	&УсловиеПоСкладу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.id_TT";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу",
		?(НЕ ПоВсемСкладам, "ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад", "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоМаршруту",
		?(ЕстьМаршрут, "ТорговаяТочка В (ВЫБРАТЬ ТЧТТ.СтруктурнаяЕдиница ИЗ Справочник.Маршруты.ТорговыеТочки КАК ТЧТТ ГДЕ ТЧТТ.Ссылка В(&СписокМаршрутов))", "ИСТИНА"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции

// Функция возвращает массив доступных торговых точек по группе УРЗ
//
Функция ПолучитьМассивДоступныхТорговыхТочекПоГруппеУРЗ(мСклад = Неопределено, мГруппаУРЗ) Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	ПоВсемСкладам = НЕ ЗначениеЗаполнено(мСклад);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ТекущаяДата() + 86400));
	Если НЕ ПоВсемСкладам Тогда
		Запрос.УстановитьПараметр("Склад", мСклад);         // СправочникСсылка.СтруктурныеЕдиницы
	КонецЕсли;

	Запрос.УстановитьПараметр("ГруппаУРЗ", мГруппаУРЗ);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ ТТАссортимента
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	//+++АК ILIK 2018.08.03 ИП-00019413
	//|				И НЕ ТорговаяТочка.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|				И НЕ ТорговаяТочка.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
	//---АК ILIK
	|				И НЕ ТорговаяТочка.НеУчаствуетВРаспределении
	|				И Номенклатура.ГруппаНоменклатурыУРЗ = &ГруппаУРЗ) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ТТАссортимента.ТорговаяТочка
	|					ИЗ
	|						ТТАссортимента)
	|				И ГруппаУРЗ = &ГруппаУРЗ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|ГДЕ
	|	&УсловиеПоСкладу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.id_TT";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу",
		?(НЕ ПоВсемСкладам, "ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад", "ИСТИНА"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции

// Функция возвращает массив доступных торговых точек расчетчика + не участвующие в распределении
//
Функция ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучаст(мСклад = Неопределено, мСписокНоменклатуры, мСписокМаршрутов = Неопределено) Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	ПоВсемСкладам 	= НЕ ЗначениеЗаполнено(мСклад);
	ЕстьМаршрут 	= ЗначениеЗаполнено(мСписокМаршрутов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ТекущаяДата() + 86400));
	Если НЕ ПоВсемСкладам Тогда
		Запрос.УстановитьПараметр("Склад", мСклад);         // СправочникСсылка.СтруктурныеЕдиницы
	КонецЕсли;
	Если ЕстьМаршрут Тогда
		Запрос.УстановитьПараметр("СписокМаршрутов", мСписокМаршрутов);
	КонецЕсли;
	Если ТипЗнч(мСписокНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
		мМассивНоменклатуры = Новый Массив;
		мМассивНоменклатуры.Добавить(мСписокНоменклатуры);
		Запрос.УстановитьПараметр("СписокНоменклатуры", мМассивНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("СписокНоменклатуры", мСписокНоменклатуры);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ
	|ПОМЕСТИТЬ ВТГруппыУРЗ
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ СпрНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ ТТАссортимента
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка.Активное
	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//+++АК ILIK 2018.08.03 ИП-00019413
	//|				И НЕ ТорговаяТочка.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|				И НЕ ТорговаяТочка.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
	//---АК ILIK
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И &УсловиеПоМаршруту
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ТТАссортимента.ТорговаяТочка
	|					ИЗ
	|						ТТАссортимента)
	|				И ГруппаУРЗ В
	|					(ВЫБРАТЬ
	|						ВТГруппыУРЗ.ГруппаУРЗ
	|					ИЗ
	|						ВТГруппыУРЗ)) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|ГДЕ
	|	&УсловиеПоСкладу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.id_TT";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу",
		?(НЕ ПоВсемСкладам, "ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад", "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоМаршруту",
		?(ЕстьМаршрут, "ТорговаяТочка В (ВЫБРАТЬ ТЧТТ.СтруктурнаяЕдиница ИЗ Справочник.Маршруты.ТорговыеТочки КАК ТЧТТ ГДЕ ТЧТТ.Ссылка В(&СписокМаршрутов))", "ИСТИНА"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции

//+++АК KIRN 2018.09.04  
// Функция возвращает массив доступных торговых точек расчетчика + не участвующие в распределении + заблокированные
//
Функция ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(мСклад = Неопределено, мСписокНоменклатуры, мСписокМаршрутов = Неопределено, мСкладХранения = Неопределено,ВместеСНеУчаст=Ложь) Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	ПоВсемСкладам 	= НЕ ЗначениеЗаполнено(мСклад);
	ЕстьМаршрут 	= ЗначениеЗаполнено(мСписокМаршрутов);
	//+++АК KIRN 2018.09.04 
	ЕстьСкладХранения = ЗначениеЗаполнено(мСкладХранения);
	//---АК KIRN 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ТекущаяДата() + 86400));
	Если НЕ ПоВсемСкладам Тогда
		Запрос.УстановитьПараметр("Склад", мСклад);         // СправочникСсылка.СтруктурныеЕдиницы
	КонецЕсли;
	Если ЕстьМаршрут Тогда
		Запрос.УстановитьПараметр("СписокМаршрутов", мСписокМаршрутов);
	КонецЕсли;
	Если ТипЗнч(мСписокНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
		мМассивНоменклатуры = Новый Массив;
		мМассивНоменклатуры.Добавить(мСписокНоменклатуры);
		Запрос.УстановитьПараметр("СписокНоменклатуры", мМассивНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("СписокНоменклатуры", мСписокНоменклатуры);
	КонецЕсли;
	
	//+++АК KIRN 2018.09.04  
	Запрос.УстановитьПараметр("ОтборПоСкладу",ЗначениеЗаполнено(мСклад));
	Запрос.УстановитьПараметр("ОтборПоСКладуХранения",ЗначениеЗаполнено(мСкладХранения));
	Запрос.УстановитьПараметр("СкладХранения",мСкладХранения);
	Запрос.УстановитьПараметр("Склад",мСклад);
	//---АК KIRN 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ
	|ПОМЕСТИТЬ ВТГруппыУРЗ
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ СпрНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ ТТАссортимента
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка.Активное
	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//+++АК ILIK 2018.08.03 ИП-00019413
	//|				И НЕ ТорговаяТочка.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|				И НЕ ТорговаяТочка.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
	//---АК ILIK
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И &УсловиеПоНеУчаст
	|				И &УсловиеПоМаршруту
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ втСписокТТ
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ТТАссортимента.ТорговаяТочка
	|					ИЗ
	|						ТТАссортимента)
	|				И ГруппаУРЗ В
	|					(ВЫБРАТЬ
	|						ВТГруппыУРЗ.ГруппаУРЗ
	|					ИЗ
	|						ВТГруппыУРЗ)) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|ГДЕ
	|	&УсловиеПоСкладу;
	|
	//+++АК KIRN 2018.09.04  
	|ВЫБРАТЬ
	|	ЗаблокированныеТТСрезПоследних.СтруктурноеПодразделение,
	|	ЗаблокированныеТТСрезПоследних.Склад,
	|	ЗаблокированныеТТСрезПоследних.ТТ КАК ТТ,
	|	ЗаблокированныеТТСрезПоследних.Заблокировано
	|ПОМЕСТИТЬ вт	
	|ИЗ
	|	РегистрСведений.ЗаблокированныеТТ.СрезПоследних(
	|			,
	|			Выбор когда &ОтборПоСКладуХранения тогда Склад = &СкладХранения Иначе Истина Конец
	|				И ВЫбор когда &ОтборПоСкладу ТОгда СтруктурноеПодразделение = &Склад Иначе Истина Конец
	|				И ТТ В (ВЫБРАТь РАЗЛИЧНЫЕ втСписокТТ.ТорговаяТочка ИЗ втСписокТТ)) КАК ЗаблокированныеТТСрезПоследних
	|;				
	|///////////////////////////
	|ВЫБРАТЬ 
	|	спрТТ.Ссылка КАК ТорговаяТочка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СпрТТ
	|ГДЕ 
	|	СпрТТ.Ссылка в (ВЫБРАТь РАЗЛИЧНЫЕ втСписокТТ.ТорговаяТочка ИЗ втСписокТТ)
	|	И СпрТТ.Ссылка НЕ в (Выбрать Различные вт.ТТ из вт где вт.Заблокировано=Истина)
	|
	|УПОРЯДОЧИТЬ ПО
	|	спрТТ.Ссылка.id_TT";
	//---АК KIRN 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу",
		?(НЕ ПоВсемСкладам, "ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад", "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоМаршруту",
		?(ЕстьМаршрут, "ТорговаяТочка В (ВЫБРАТЬ ТЧТТ.СтруктурнаяЕдиница ИЗ Справочник.Маршруты.ТорговыеТочки КАК ТЧТТ ГДЕ ТЧТТ.Ссылка В(&СписокМаршрутов))", "ИСТИНА"));
	ТекстЗапроса = 	СтрЗаменить(ТекстЗапроса, "&УсловиеПоНеУчаст",?(ВместеСНеУчаст," ИСТИНА"," НЕ ТорговаяТочка.НеУчаствуетВРаспределении"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции



// РАСПРЕДЕЛЕНИЕ ПО ТТ

Функция ПроверитьНепоступившиеЗаказы(мДата, мСписокНом, ВыводитьСообщения = Истина) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"				, мДата);
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, мСписокНом);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикам.ЗаказПоставщику
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				Номенклатура В (&СписокНоменклатуры)
	|					И ЗаказПоставщику.ДатаПоступления = &Дата
	|					И НЕ ЗаказПоставщику.ЗаказПоступилПолностью) КАК ЗаказыПоставщикамОстатки
	|	ГДЕ
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток > 0) КАК ЗаказыПоставщикам
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыПоставщикам.ЗаказПоставщику.Номер";
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьНепоступившие = НЕ РезультатЗапроса.Пустой();
	
	Если ЕстьНепоступившие
			 И ВыводитьСообщения Тогда
		Сообщить("Есть непоступившие заказы:");
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить(Выборка.ЗаказПоставщику)
		КонецЦикла;
	КонецЕсли;

	Возврат ЕстьНепоступившие;
	
КонецФункции

Функция ЕстьБлокировкаТоваровДляРаспределения(мСписокНом, мСклад) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", мСписокНом);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", мСклад);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БлокируемыеТоварыСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.БлокируемыеТовары.СрезПоследних(
	|			,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК БлокируемыеТоварыСрезПоследних
	|ГДЕ
	|	БлокируемыеТоварыСрезПоследних.Заблокировано";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Процедура УстановитьПризнакБлокировкиДляРаспределения(мМассивНоменклатуры, мСклад, Блокировать) Экспорт
	
	Если ТипЗнч(мМассивНоменклатуры) = Тип("СписокЗначений") Тогда
		мМассив = мМассивНоменклатуры.ВыгрузитьЗначения();
	Иначе
		мМассив = мМассивНоменклатуры;
	КонецЕсли;
	
	МассивКЗаписи = Новый Массив;
	Для Каждого ТекТовар Из мМассив Цикл
		Если МассивКЗаписи.Найти(ТекТовар) = Неопределено Тогда
			МассивКЗаписи.Добавить(ТекТовар);
		КонецЕсли;
	КонецЦикла;
	
	//
	НаборЗаписей = РегистрыСведений.БлокируемыеТовары.СоздатьНаборЗаписей();
	
	мДата = ТекущаяДата();
	Для Каждого ТекТовар Из МассивКЗаписи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период				= мДата;
		НоваяЗапись.Номенклатура 		= ТекТовар;
		НоваяЗапись.СтруктурнаяЕдиница 	= мСклад;
		НоваяЗапись.Заблокировано 		= Блокировать;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

Функция ЕстьДанныеРаспределенияПоТТНаSQL(мНомерРаспределения) Экспорт
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"Select
	|	raspr_zadanie.Status As Status
	|From
	|	M2..raspr_zadanie As raspr_zadanie (nolock)
	|Where
	|	raspr_zadanie.Number_r = " + Формат(мНомерРаспределения, "ЧГ=0") + "
	| 	And raspr_zadanie.Status = 3";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	ЕстьРаспределение = НЕ Выборка.EOF();
	
	ADOСоединение.Close();
	
	Возврат ЕстьРаспределение;
	
КонецФункции

Процедура РассчитатьРаспределениеПоДнямПроценты() Экспорт
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open();
	
	ADOСоединение.Execute("exec M2.dbo.create_raspr_dni");
	
	ADOСоединение.Close();
	
КонецПроцедуры

//+++АК MIND 2017.12.17 
Процедура ВывестиИзАссортиментаАлкогольГдеНельзяТорговать()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ТТ
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НеТоргуетАлкольнойПродукцией = ИСТИНА
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	               |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	               |	ТоварныйАссортиментТочекСрезПоследних.id_TT
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |			&ТекДата,
	               |			ТорговаяТочка В
	               |					(ВЫБРАТЬ
	               |						ВТ_ТТ.Ссылка
	               |					ИЗ
	               |						ВТ_ТТ КАК ВТ_ТТ)
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Товары.Ссылка
	               |					ИЗ
	               |						ВТ_Товары КАК ВТ_Товары)) КАК ТоварныйАссортиментТочекСрезПоследних
	               |ГДЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//запись приходистя делать через набор, чтобы пеедать признак ОбменДанными.Загрузка
		Набор = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
		Набор.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Движение = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Период = ТекущаяДата();
		Движение.Комментарий = "У магазина стоит признак ""Не торгует алкогольной продукцией""";
		Движение.Выведена = Истина;
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

//+++АК KIRN 2018.09.03 ИП-00019657 
Функция ПроверитьБлокировкуТТ(пПараметры) Экспорт
	Склад = пПараметры.Склад;
	СкладХранения = пПараметры.СкладХранения;
	СписокТТ = пПараметры.СписокТорговыхТочек;
	Если ТипЗнч(СписокТТ) = Тип("Строка") Тогда
		СписокТТ = СтрЗаменить(пПараметры.СписокТорговыхТочек, "'", "");
		ТТ = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_tt",СписокТТ);
		СписокТТ = Новый Массив;
		Если ТТ <> Неопределено Тогда
			СписокТТ.Добавить(ТТ);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаблокированныеТТСрезПоследних.СтруктурноеПодразделение,
	               |	ЗаблокированныеТТСрезПоследних.Склад,
	               |	ЗаблокированныеТТСрезПоследних.ТТ КАК ТТ,
	               |	ЗаблокированныеТТСрезПоследних.Заблокировано
				   |ПОМЕСТИТЬ вт	
	               |ИЗ
	               |	РегистрСведений.ЗаблокированныеТТ.СрезПоследних(
	               |			,
	               |			Склад = &Склад
	               |				И СтруктурноеПодразделение = &Подразделение
	               |				И ТТ В (&СписокТТ)) КАК ЗаблокированныеТТСрезПоследних
				   |;				
				   |///////////////////////////
				   |ВЫБРАТЬ 
				   |	спрТТ.Ссылка КАК ТТ
				   |ИЗ
				   |	Справочник.СтруктурныеЕдиницы КАК СпрТТ
				   |ГДЕ 
				   |	СпрТТ.Ссылка в (&СписокТТ)
				   |	И СпрТТ.Ссылка НЕ в (Выбрать Различные вт.ТТ из вт где вт.Заблокировано=Истина);
				   |";
	Запрос.УстановитьПараметр("Склад",СкладХранения);
	Запрос.УстановитьПараметр("Подразделение",Склад);
	Запрос.УстановитьПараметр("СписокТТ",СписокТТ);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТТ");
КонецФункции


// Основной запрос при подготовке данных для распределения по торговым точкам
//+++АК SHEP 2018.05.04 ИП-00018421:
// В таблицу IzbenkaFin.dbo._InfoRg5947 выгружаются товары, которые только в ассортименте, те выведенные товары не выгружаются
// предлагаю выгружать еще и выведенные товары из тт, но у которых есть остаток. q_plan_pr выгружать строго 0.
Функция ПолучитьТекстКоманды_ПодготовкаДанныхДляРаспределения(СтруктураПараметров)
	
	Number_r = СтруктураПараметров.ТекстНомер_Р;
	
	//+++АК SHEP 2018.08.24 ИП-00019254
	Если ТипЗнч(СтруктураПараметров.СписокТорговыхТочек) = Тип("Строка") И ТипЗнч(СтруктураПараметров.СписокНоменклатуры) = Тип("Строка") Тогда
		ТекстИДТТ = СтрЗаменить(СтруктураПараметров.СписокТорговыхТочек, "'", "");
		ТекстИДТоваров = СтрЗаменить(СтруктураПараметров.СписокНоменклатуры, "'", "");
	Иначе
	//---АК SHEP 2018.08.24
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТТ", СтруктураПараметров.СписокТорговыхТочек);
	Запрос.УстановитьПараметр("Товары"	, СтруктураПараметров.СписокНоменклатуры);
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.id_TT
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СписокТТ)
	|	И ЕСТЬNULL(СтруктурныеЕдиницы.id_TT, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|	И ЕСТЬNULL(Номенклатура.id_tov, 0) <> 0
	|";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТекстИДТТ = "";
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИДТТ = ТекстИДТТ + "," + Формат(Выборка.id_tt, "ЧГ=");
	КонецЦикла;
	ТекстИДТТ = Сред(ТекстИДТТ, 2); 
	ТекстИДТоваров = "";
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИДТоваров = ТекстИДТоваров + "," + Формат(Выборка.id_tov, "ЧГ=");
	КонецЦикла;
	ТекстИДТоваров = Сред(ТекстИДТоваров, 2);
	КонецЕсли; //+++АК SHEP 2018.08.24 ИП-00019254
		
	Возврат
		"Declare @Number_r integer, @err int = 1, @ost_sled_dnem int = 0, @IDR_Raschetchik binary(16), @IDR_Sklad binary(16), @IDR_Den_Raspr binary(16), @DateFactOst datetime, @DateRaspr datetime, @DatePostupleniya datetime, @DateOstSklad datetime, @only_tt int
		|Set @only_tt = " +?(СтруктураПараметров.ВсеСклады, "Null", "1")+ "
		|Set @Number_r = " + Number_r + "							-- текущий номер распределения
		|Set @ost_sled_dnem = " + ?(СтруктураПараметров.ОстаткиСледДнем, "1", "0") + "
        |
		|Set @DateOstSklad = DateAdd(YEAR, 2000, CASE WHEN @ost_sled_dnem = 0 THEN GETDATE() ELSE DateAdd(Day, 1, GETDATE()) END)
		|declare @mes nvarchar(max)
        |
		|If OBJECT_ID('tempdb..#VTProizvoditeli') is not null		Drop Table #VTProizvoditeli
		|If OBJECT_ID('tempdb..#VTKolVUpakovke') is not null		Drop Table #VTKolVUpakovke
		|If OBJECT_ID('tempdb..#VTOstatkiNaSklade') is not null		Drop Table #VTOstatkiNaSklade
		|If OBJECT_ID('tempdb..#VTOstatkiVZale') is not null		Drop Table #VTOstatkiVZale
		|If OBJECT_ID('tempdb..#VTOstatkiNaSklade_1') is not null	Drop Table #VTOstatkiNaSklade_1
		|If OBJECT_ID('tempdb..#VTOstatkiNaSklade_2') is not null	Drop Table #VTOstatkiNaSklade_2
		|If OBJECT_ID('tempdb..#VT_tovary_post_tt') is not null		Drop Table #VT_tovary_post_tt
		|If OBJECT_ID('tempdb..#VTPostAndTov_skladir') is not null	Drop Table #VTPostAndTov_skladir
		|If OBJECT_ID('tempdb..#VTPostAndTov_neskladir') is not null Drop Table #VTPostAndTov_neskladir
		//|If OBJECT_ID('tempdb..#VT_Predyd_Raspred') is not null		Drop Table #VT_Predyd_Raspred
		|If OBJECT_ID('tempdb..#VTPostTov') is not null				Drop Table #VTPostTov
		|If OBJECT_ID('tempdb..#VT_Ceny') is not null				Drop Table #VT_Ceny
		|If OBJECT_ID('tempdb..#VT_Zamenyaemye_Analogi') is not null Drop Table #VT_Zamenyaemye_Analogi
		|If OBJECT_ID('tempdb..#VT_FactOst_Prochiye') is not null 	Drop Table #VT_FactOst_Prochiye
		|If OBJECT_ID('tempdb..#VT_Analogi') is not null			Drop Table #VT_Analogi
		|If OBJECT_ID('tempdb..#VT_PolnyeAnalogi') is not null 		Drop Table #VT_PolnyeAnalogi
		|If OBJECT_ID('tempdb..#VT_SostavKomplekta') is not null 	Drop Table #VT_SostavKomplekta
		|If OBJECT_ID('tempdb..#VT_TovaryKomplektov') is not null 	Drop Table #VT_TovaryKomplektov
		|If OBJECT_ID('tempdb..#VT_PolnyeAnalogi_Cut') is not null	Drop Table #VT_PolnyeAnalogi_Cut
		|If OBJECT_ID('tempdb..#VT_Osnovnaya') is not null			Drop Table #VT_Osnovnaya
		|If OBJECT_ID('tempdb..#TovaryPoAkcii') is not null			Drop Table #TovaryPoAkcii
		|If OBJECT_ID('tempdb..#M2_tov') is not null				Drop Table #M2_tov
		|If OBJECT_ID('tempdb..#M2_tov_kontr') is not null			Drop Table #M2_tov_kontr
		|If OBJECT_ID('tempdb..#M2_raspr_zadanie_tt') is not null	Drop Table #M2_raspr_zadanie_tt
		|If OBJECT_ID('tempdb..#M2_tov_kontr_date') is not null		Drop Table #M2_tov_kontr_date
		|If OBJECT_ID('tempdb..#M2_tt_tov_kontr') is not null		Drop Table #M2_tt_tov_kontr
		|If OBJECT_ID('tempdb..#TT_id_zon') is not null				Drop Table #TT_id_zon
		|If OBJECT_ID('tempdb..#VTRashod_Fact') is not null			Drop Table #VTRashod_Fact		
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	@DateRaspr = DateAdd(YEAR, 2000, Raspr_zadanie.Date_r),							-- дата распределения
		|	@DateFactOst = DateAdd(YEAR, 2000, DateAdd(Day, -1, Raspr_zadanie.Date_r)),		-- дата фактических остатков
		|	@DatePostupleniya = DateAdd(YEAR, 2000, DateAdd(Day, 1, Raspr_zadanie.Date_r)),	-- дата поступления
		|	@IDR_Raschetchik = Raspr_zadanie._Fld4908RRef,									-- ID расчетчика
		|	@IDR_Sklad = spr_stred._IDRRef,													-- ID склада
		|	@IDR_Den_Raspr = dni_nedeli._IDRRef												-- ID дня недели
		|From M2..Raspr_zadanie as Raspr_zadanie (nolock)
		| Left Outer Join IzbenkaFin.._Reference42 as spr_stred (nolock)
		| On spr_stred._Fld758 = Raspr_zadanie.id_sklad
		| Left Outer Join IzbenkaFin.._Enum2373 as dni_nedeli (nolock)
		| On dni_nedeli._EnumOrder + 1 = CAST(DATEPART(weekday, Raspr_zadanie.Date_r) AS numeric(10,0))
		|Where
		|	Raspr_zadanie.Number_r = @Number_r
		|	
		|-----------------------------------------------------------------------------------------------
		|Select
		|	RegZnach_Svoistv._Fld394_RRRef as Harakteristika,
		|	SprKontr._Fld1159 as id_kontr
		|Into #VTProizvoditeli
		|From IzbenkaFin.._InfoRg393 as RegZnach_Svoistv (nolock)
		| Inner Join IzbenkaFin.._Reference27 as SprKontr (nolock)				-- производитель
		| On SprKontr._IDRRef = RegZnach_Svoistv._Fld396_RRRef
		|Where
		|	RegZnach_Svoistv._Fld395RRef = 0x9B0FBEA8EE4FEDDB4CAF6656F51808B7   -- свойство <Производитель>
//        |-----------------------------------------------------------------------------------------------
//		|CREATE CLUSTERED INDEX index_vtproizv_idkontr ON #VTProizvoditeli(id_kontr)
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	SprTovary._IDRRef as Tovar,
		|	Max(CASE
		|			WHEN SprTovary._Fld239 = 1 THEN
		|			 CASE
		|				WHEN ISNULL(Kol_V_Korobke.Kol, 0) = 0 THEN RegZnach_Svoistv._Fld396_N
		|				ELSE Kol_V_Korobke.Kol
		|			 END
		|			ELSE
		|			 CASE
		|				WHEN ISNULL(Kol_V_Korobke.Kol, 0) = 0 THEN CAST(RegZnach_Svoistv._Fld396_N as Numeric(15,0))
		|				ELSE CAST(Kol_V_Korobke.Kol as Numeric(15,0))
		|			 END
		|		END) as Kol
		|Into #VTKolVUpakovke
		|From #VTProizvoditeli as VTProizvoditeli (nolock)
		| Left Outer Join IzbenkaFin.._InfoRg393 as RegZnach_Svoistv (nolock)
		| On VTProizvoditeli.Harakteristika = RegZnach_Svoistv._Fld394_RRRef
		|	 and RegZnach_Svoistv._Fld395RRef = 0x8C82DC746C8468B545B618EC1DACAEE4   	-- свойство <Количество в упаковке>
		| Inner Join IzbenkaFin.dbo._Reference2539 as Spr_Har (nolock)
		| On Spr_Har._IDRRef = VTProizvoditeli.Harakteristika
		| Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| On SprTovary._IDRRef = Spr_Har._OwnerIDRRef
		|	 And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		| Left Outer Join
		|	(Select
		|		Reg_KolVKorobke._Fld5577RRef as Har,
		|		Reg_KolVKorobke._Fld5578 as Kol
		|	 From IzbenkaFin.._InfoRg5575 as Reg_KolVKorobke (nolock)
		|	  Inner Join(
		|		Select
		|			Reg_KolVKorobke._Fld5577RRef as Har,
		|			MAX(Reg_KolVKorobke._Period) as _Period
		|		From IzbenkaFin.._InfoRg5575 as Reg_KolVKorobke (nolock)
		|		Where
		|			Reg_KolVKorobke._Fld6243RRef = @IDR_Sklad
		//|			And Reg_KolVKorobke._Period < @DateOstSklad -- берется самое максимальное значение
		|		Group by
		|			Reg_KolVKorobke._Fld5577RRef) as MaxPeriody
		|	  On Reg_KolVKorobke._Fld5577RRef = MaxPeriody.Har
		|		And Reg_KolVKorobke._Period = MaxPeriody._Period
		|		And Reg_KolVKorobke._Fld6243RRef = @IDR_Sklad
		|	  Inner Join IzbenkaFin.dbo._Reference2539 as Spr_Har_2 (nolock)
		|	  On Spr_Har_2._IDRRef = Reg_KolVKorobke._Fld5577RRef
		|		And Spr_Har_2._Fld6268 = 1
		|		And Spr_Har_2._Fld5138 = 0
		|	 Where
		|		Reg_KolVKorobke._Fld6243RRef = @IDR_Sklad
		|		And not Reg_KolVKorobke._Fld5578 = 0) as Kol_V_Korobke
		| On Kol_V_Korobke.Har = RegZnach_Svoistv._Fld394_RRRef
		|Where Spr_Har._Fld5138 = 0
		|Group by
		|	VTProizvoditeli.id_kontr,
		|	SprTovary._IDRRef
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	a.tovar as tovar,
		|	SprTovary._Fld5188 as skladir,
		|	SprTovary._Fld3479 as _ne_po_har,
		|	a.har as har,
		|	CASE
		|		WHEN SprTovary._Fld5188 = 1 THEN a.data_proizvodstva
		|		ELSE @DateRaspr
		|	END as data_proizvodstva,
		|	SUM(a.kol) as kol
		|Into #VTOstatkiNaSklade
		|From (
		|	Select
		|		ostatki._Fld3247RRef as tovar,
		|		ostatki._Fld3248RRef as har,
		|		ostatki._Fld5200 as data_proizvodstva,
		|		SUM(ostatki._Fld3250) as kol
		|	From IzbenkaFin.._AccumRgT3252 as ostatki (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = ostatki._Fld3246RRef
		|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		|		And Spr_Sklady._Fld3349RRef = 0x82E78E1B537199464DCC4500C55630FF			-- вид склада = Оптовый
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = ostatki._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		ostatki._Period = '59991101'
		|	Group by
		|		ostatki._Fld3247RRef,
		|		ostatki._Fld3248RRef,
		|		ostatki._Fld5200
		|	Union all
		|	Select
		|		Reg_Tovary._Fld3247RRef,
		|		Reg_Tovary._Fld3248RRef,
		|		Reg_Tovary._Fld5200,
		|		SUM(CASE WHEN Reg_Tovary._RecordKind = 0 THEN -Reg_Tovary._Fld3250 ELSE Reg_Tovary._Fld3250 END)
		|	From IzbenkaFin.._AccumRg3245 as Reg_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = Reg_Tovary._Fld3246RRef
		|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		|		And Spr_Sklady._Fld3349RRef = 0x82E78E1B537199464DCC4500C55630FF			-- вид склада = Оптовый
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = Reg_Tovary._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		Reg_Tovary._Period >= @DateOstSklad
		|	Group by
		|		Reg_Tovary._Fld3247RRef,
		|		Reg_Tovary._Fld3248RRef,
		|		Reg_Tovary._Fld5200
		|		) as a
		| Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| On SprTovary._IDRRef = a.tovar
		|Group by
		|	a.tovar,
		|	SprTovary._Fld5188,
		|	SprTovary._Fld3479,
		|	a.har,
		|	CASE
		|		WHEN SprTovary._Fld5188 = 1 THEN a.data_proizvodstva
		|		ELSE @DateRaspr
		|	END
		|Having
		|	not SUM(a.kol) = 0
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	a.id_zal as id_zal,
		|	a.id_tov as id_tov,
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	SUM(a.kol) as q_ost_zal
		|Into #VTOstatkiVZale
		|From (
		|	Select
		|		Spr_Sklady._Fld3393 as id_zal,
		|		SprTovary._Fld760 as id_tov,
		|		ostatki._Fld3248RRef as har,
		|		SUM(ostatki._Fld3250) as kol
		|	From IzbenkaFin.._AccumRgT3252 as ostatki (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = ostatki._Fld3246RRef
		|		And Spr_Sklady._Fld7649 = 1												-- это зал сборки
		|	 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		|	 On Spr_StrEd._IDRRef = Spr_Sklady._OwnerIDRRef
		|		And Spr_StrEd._Fld758 in (" + Формат(СтруктураПараметров.Склад.id_tt, "ЧГ=") + ")	-- склад, с которого распределеяется товар
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = ostatki._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		ostatki._Period = '59991101'
		|	Group by
		|		Spr_Sklady._Fld3393,
		|		SprTovary._Fld760,
		|		ostatki._Fld3248RRef
		|	Union all
		|	Select
		|		Spr_Sklady._Fld3393,
		|		SprTovary._Fld760,
		|		Reg_Tovary._Fld3248RRef,
		|		SUM(CASE WHEN Reg_Tovary._RecordKind = 0 THEN -Reg_Tovary._Fld3250 ELSE Reg_Tovary._Fld3250 END)
		|	From IzbenkaFin.._AccumRg3245 as Reg_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = Reg_Tovary._Fld3246RRef
		|		And Spr_Sklady._Fld7649 = 1												-- это зал сборки
		|	 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		|	 On Spr_StrEd._IDRRef = Spr_Sklady._OwnerIDRRef
		|		And Spr_StrEd._Fld758 in (" + Формат(СтруктураПараметров.Склад.id_tt, "ЧГ=") + ")
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = Reg_Tovary._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		Reg_Tovary._Period >= @DateOstSklad
		|	Group by
		|		Spr_Sklady._Fld3393,
		|		SprTovary._Fld760,
		|		Reg_Tovary._Fld3248RRef) as a
		| Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| On VTProizvoditeli.Harakteristika = a.har
		|Group by
		|	a.id_zal,
		|	a.id_tov,
		|	VTProizvoditeli.id_kontr
		|Having
		|	not SUM(a.kol) = 0
		| 
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	VTOstatkiNaSklade.Tovar as Tovar,
		|	0 as _ne_po_har,
		|	SUM(VTOstatkiNaSklade.kol) as Kol
		|Into #VTOstatkiNaSklade_1
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		| Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| On VTProizvoditeli.Harakteristika = VTOstatkiNaSklade.har
		|Where
		|	VTOstatkiNaSklade._ne_po_har = 0
		|Group by
		|	VTProizvoditeli.id_kontr,
		|	VTOstatkiNaSklade.Tovar	
		|Union All
		|Select
		|	0,
		|	VTOstatkiNaSklade.Tovar,
		|	1,
		|	SUM(VTOstatkiNaSklade.kol)
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		|Where
		|	VTOstatkiNaSklade._ne_po_har = 1
		|Group by
		|	VTOstatkiNaSklade.Tovar
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	VTOstatkiNaSklade.Tovar as Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva as data_proizvodstva,
		|	0 as _ne_po_har,
		|	SUM(VTOstatkiNaSklade.kol) as Kol
		|Into #VTOstatkiNaSklade_2
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		| Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| On VTProizvoditeli.Harakteristika = VTOstatkiNaSklade.har
		|Where
		|	VTOstatkiNaSklade.skladir = 1
		|	And VTOstatkiNaSklade._ne_po_har = 0
		|Group by
		|	VTProizvoditeli.id_kontr,
		|	VTOstatkiNaSklade.Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva	
		|Union All
		|Select
		|	0,
		|	VTOstatkiNaSklade.Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva,
		|	1,
		|	SUM(VTOstatkiNaSklade.kol)
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		|Where
		|	VTOstatkiNaSklade.skladir = 1
		|	And VTOstatkiNaSklade._ne_po_har = 1
		|Group by
		|	VTOstatkiNaSklade.Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva
        |
		//+++АК SHEP 2018.05.04 ИП-00018421: вынес РегистрСведений.ТоварныйАссортиментТочекСрезПоследних во временную таблицу
		|-----------------------------------------------------------------------------------------------
		|If OBJECT_ID('tempdb..#Tov_Assortiment_MaxPeriody') is not null	Drop Table #Tov_Assortiment_MaxPeriody
		|
		|Select
		|	Tov_Assortiment._Fld3958RRef,
		|	Tov_Assortiment._Fld3959RRef,
		|	SprTovary._Fld760 as id_tov,
		|	SprTovary._Fld4120RRef as koef_zakaza,
		|	SprTovary._Fld5188 as skladir,
		|	Spr_StrEd._Fld758 as id_TT,
		|	Max(Tov_Assortiment._Period) as _Period
		|INTO #Tov_Assortiment_MaxPeriody
		|From IzbenkaFin.dbo._InfoRg3957 as Tov_Assortiment (nolock)
		| Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		| On SprTovary._IDRRef = Tov_Assortiment._Fld3959RRef
		|	And SprTovary._Fld760 in (" + ТекстИДТоваров + ")		-- список id_tov
		| Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| On Spr_StrEd._IDRRef = Tov_Assortiment._Fld3958RRef
		|	And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")			-- список id_ТТ
		|Where
		|	Tov_Assortiment._Period < @DatePostupleniya 
		|Group By
		|	Tov_Assortiment._Fld3958RRef,
		|	Tov_Assortiment._Fld3959RRef,
		|	SprTovary._Fld760,
		|	SprTovary._Fld4120RRef,
		|	SprTovary._Fld5188,
		|	Spr_StrEd._Fld758
		|-----------------------------------------------------------------------------------------------
		// рассчитываем остатки по ТТ
		|if OBJECT_ID('tempdb..#ostatki_tt_tov_currdate') is not null drop table #ostatki_tt_tov_currdate
		|create table #ostatki_tt_tov_currdate(id_tov int, id_tt int, kol real)
		|declare @tbl varchar(36)
		|     ,@SQL varchar(max)
		|SET @tbl = REPLACE(NEWID(),'-','_')
		|exec M2..[ostatki_tt_tov_currdate] '" + ТекстИДТоваров + "', '" + ТекстИДТТ + "', 0, @tbl
		|SET @SQL = '
		|select id_tov, id_tt, kol
		|from ##'+@tbl+'
		|where kol != 0
		|drop table ##'+@tbl
		|insert into #ostatki_tt_tov_currdate (id_tov, id_tt, kol)
		|EXEC (@SQL)

		//|select * from #ostatki_tt_tov_currdate
		//---АК SHEP 2018.05.18
		|-----------------------------------------------------------------------------------------------
		|Select
		|	Tov_Assortiment._Fld3958RRef as TT,
		|	Tov_Assortiment._Fld3959RRef as Tovar,
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	Tov_Assortiment._Fld3960RRef as har,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	Tov_Assortiment._Fld3961 as Vyvedena,
		//---АК SHEP 2018.05.04
		|	MaxPeriody.id_tov as id_tov,
		|	MaxPeriody.koef_zakaza as koef_zakaza,
		|	MaxPeriody.skladir as skladir
		|Into #VT_tovary_post_tt
		|From IzbenkaFin.dbo._InfoRg3957 as Tov_Assortiment (nolock)
		|	Inner Join #Tov_Assortiment_MaxPeriody as MaxPeriody
		|	On MaxPeriody._Fld3958RRef = Tov_Assortiment._Fld3958RRef
		|		And MaxPeriody._Fld3959RRef = Tov_Assortiment._Fld3959RRef
		|		And MaxPeriody._Period = Tov_Assortiment._Period
		|	Inner Join #VTProizvoditeli as VTProizvoditeli
		|	On VTProizvoditeli.Harakteristika = Tov_Assortiment._Fld3960RRef
		|Where
		|	Tov_Assortiment._Fld3961 = 0
       	|
		//+++АК SHEP 2018.05.04 ИП-00018421
		|UNION ALL
		|
		|Select
		|	Tov_Assortiment._Fld3958RRef as TT,
		|	Tov_Assortiment._Fld3959RRef as Tovar,
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	Tov_Assortiment._Fld3960RRef as har,
		|	Tov_Assortiment._Fld3961 as Vyvedena,
		|	MaxPeriody.id_tov as id_tov,
		|	MaxPeriody.koef_zakaza as koef_zakaza,
		|	MaxPeriody.skladir as skladir
		|From IzbenkaFin.dbo._InfoRg3957 as Tov_Assortiment (nolock)
		|	Inner Join #Tov_Assortiment_MaxPeriody as MaxPeriody
		|	On MaxPeriody._Fld3958RRef = Tov_Assortiment._Fld3958RRef
		|		And MaxPeriody._Fld3959RRef = Tov_Assortiment._Fld3959RRef
		|		And MaxPeriody._Period = Tov_Assortiment._Period
		|	Inner Join #VTProizvoditeli as VTProizvoditeli
		|		On VTProizvoditeli.Harakteristika = Tov_Assortiment._Fld3960RRef
		|	Inner Join #ostatki_tt_tov_currdate as ostatki_tt_tov_currdate
		|		On MaxPeriody.id_tov = ostatki_tt_tov_currdate.id_tov
		|		AND MaxPeriody.id_TT = ostatki_tt_tov_currdate.id_TT
		|Where
		|	Tov_Assortiment._Fld3961 = 1
		|
		|If OBJECT_ID('tempdb..#Tov_Assortiment_MaxPeriody') is not null	Drop Table #Tov_Assortiment_MaxPeriody
		//---АК SHEP 2018.05.04
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VT_tovary_post_tt.TT as TT,
		|	VT_tovary_post_tt.Tovar as Tovar,
		|	VT_tovary_post_tt.id_kontr as id_kontr,
		|	VT_tovary_post_tt.har as har,
		|	VT_tovary_post_tt.id_tov as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	VT_tovary_post_tt.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|	VT_tovary_post_tt.koef_zakaza as koef_zakaza
		|Into #VTPostAndTov_skladir
		|From #VT_tovary_post_tt as VT_tovary_post_tt (nolock)
		|	Inner Join IzbenkaFin.._InfoRg2921 as Reg_GrafikRazvoza (nolock)
		|	On Reg_GrafikRazvoza._Fld2923RRef = @IDR_Sklad
		|		And ((@IDR_Den_Raspr = 0xA161C3BAE7168EF749FEC392AF2F2228
		|				And Reg_GrafikRazvoza._Fld2924 = 1)
		|			Or (@IDR_Den_Raspr = 0x8FA0BE5835D783AB45DAF96F9DE8CB30
		|				And Reg_GrafikRazvoza._Fld2925 = 1)
		|			Or (@IDR_Den_Raspr = 0xBC007F60F939A1F14AA8604C136E5AFB
		|				And Reg_GrafikRazvoza._Fld2926 = 1)
		|			Or (@IDR_Den_Raspr = 0xA039799A37320FE943BCE3C86961CB6C
		|				And Reg_GrafikRazvoza._Fld2927 = 1)
		|			Or (@IDR_Den_Raspr = 0x9D67FE953277742E412C4168A12978D3
		|				And Reg_GrafikRazvoza._Fld2928 = 1)
		|			Or (@IDR_Den_Raspr = 0xAE567E8B0CEA3A52431EA4D53AC3C8F5
		|				And Reg_GrafikRazvoza._Fld2929 = 1)
		|			Or (@IDR_Den_Raspr = 0x87FAFB472163AF854BF2E1AEECCFC2F5
		|				And Reg_GrafikRazvoza._Fld2930 = 1))
		|Where
		|	VT_tovary_post_tt.skladir = 1										-- складируемая
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	Poryadok_Obespecheniya.TT as TT,
		|	SprGrafiki_Tovary._Fld3487RRef as Tovar,
		|	SprKontr._Fld1159 as id_kontr,
		|	VT_tovary_post_tt.har as har,
		|	SprTovary._Fld760 as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	VT_tovary_post_tt.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|	SprTovary._Fld4120RRef as koef_zakaza
		|Into #VTPostAndTov_neskladir
		|From IzbenkaFin.._Reference3482_VT3485 as SprGrafiki_Tovary (nolock)	-- товары графика
		| Inner Join IzbenkaFin.._Reference3482 as SprGrafiki (nolock)
		| On SprGrafiki._IDRRef = SprGrafiki_Tovary._Reference3482_IDRRef
		| Inner Join (
		|	Select Distinct														-- график
		|		SprGrafiki_Grafik._Reference3482_IDRRef as _Reference3482_IDRRef,
		|		SprGrafiki_Grafik._Fld3491RRef as _Fld3491RRef
		|	From IzbenkaFin.._Reference3482_VT3488 as SprGrafiki_Grafik (nolock)) as SprGrafiki_Grafik
		| On SprGrafiki_Grafik._Reference3482_IDRRef = SprGrafiki_Tovary._Reference3482_IDRRef
		|	And SprGrafiki_Grafik._Fld3491RRef = @IDR_Den_Raspr
		| Inner Join IzbenkaFin.._Reference27 as SprKontr (nolock)				-- владелец графика (поставщик)
		| On SprKontr._IDRRef = SprGrafiki._OwnerIDRRef
		| Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| On SprTovary._IDRRef = SprGrafiki_Tovary._Fld3487RRef
		|	And SprTovary._Fld760 in (" + ТекстИДТоваров + ")					-- список id_tov
		|	And SprTovary._Fld5188 = 0											-- нескладируемая
		| Inner Join(
		|	Select
		|		Por_Obespecheniya._Fld2726RRef as TT,
		|		Por_Obespecheniya._Fld5207RRef as GruppaURZ
		|	From IzbenkaFin.._InfoRg2725 as Por_Obespecheniya (nolock)
		|	 Inner Join(
		|		Select
		|			Por_Obespecheniya_._Fld2726RRef as TT,
		|			Por_Obespecheniya_._Fld5207RRef as GruppaURZ,
		|			MAX(Por_Obespecheniya_._Period) as _Period
		|		From IzbenkaFin.._InfoRg2725 as Por_Obespecheniya_ (nolock)
		|		 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		|		 On Spr_StrEd._IDRRef = Por_Obespecheniya_._Fld2726RRef
		|			And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")				-- список id_ТТ
		|		Where
		|			Por_Obespecheniya_._Period < @DatePostupleniya
		|		Group by
		|			Por_Obespecheniya_._Fld2726RRef,
		|			Por_Obespecheniya_._Fld5207RRef) as Max_Periody_2
		|	 On Max_Periody_2.TT = Por_Obespecheniya._Fld2726RRef
		|		And Max_Periody_2.GruppaURZ = Por_Obespecheniya._Fld5207RRef
		|		And Max_Periody_2._Period = Por_Obespecheniya._Period
		|	Where
		|		Por_Obespecheniya._Fld2728RRef = @IDR_Sklad) as Poryadok_Obespecheniya
		| On Poryadok_Obespecheniya.GruppaURZ = SprTovary._Fld5162RRef
		| Inner Join #VT_tovary_post_tt as VT_tovary_post_tt
		| On VT_tovary_post_tt.TT = Poryadok_Obespecheniya.TT
		|	And VT_tovary_post_tt.Tovar = SprGrafiki_Tovary._Fld3487RRef
		|	And VT_tovary_post_tt.id_kontr = SprKontr._Fld1159
		|Where
		|	SprGrafiki._Fld3483RRef = @IDR_Sklad
		|	And SprGrafiki._Marked = 0
        |
		|---------------------------------------------------------------------------------------------
		|Select
		|    b.ref_tov as tov_Zadvoen,
		|    a.ref_tov as ref_tov,
		|    a.id_tov as id_tov_Osnovn
		|Into #VT_Zamenyaemye_Analogi
		|From
		|   (Select
		|        tr._Fld6045RRef as ref_tov,
		|        a._IDRRef,
		|        t1.id_tov as id_tov,
		|        tr._LineNo6044,
		|        Row_Number() Over (Partition by a._IDRRef Order by tr._LineNo6044) as rn
		|	From izbenkafin.._Reference6042 as a (nolock)
		|	 Inner Join izbenkafin.._Reference6042_VT6043 as tr (nolock)
		|	 ON tr._Reference6042_IDRRef = a._IDRRef
		| 	 Inner Join M2..Tovari as t1
		| 	 On t1.Ref = tr._Fld6045RRef
		|	Where
		|	    a._Fld7463 = 1) as a
		| Inner Join
		|   (Select
		|        tr._Fld6045RRef as ref_tov,
		|        a._IDRRef,
		|        t2.id_tov as id_tov,
		|        tr._LineNo6044,
		|        Row_Number() Over (Partition by a._IDRRef Order by tr._LineNo6044) as rn
		|	From izbenkafin.._Reference6042 as a (nolock)
		|	 Inner Join izbenkafin.._Reference6042_VT6043 as tr (nolock)
		|	 ON tr._Reference6042_IDRRef = a._IDRRef
		| 	 Inner Join M2..Tovari as t2
		| 	 On t2.Ref = tr._Fld6045RRef
		|	Where
		|		a._Fld7463 = 1) as b
		| On a._IDRRef = b._IDRRef
		|	And a.rn = 1
		|	And b.rn > 1
		|	And (a.id_tov in (" + ТекстИДТоваров + ")
		|		 Or b.id_tov in (" + ТекстИДТоваров + "))
        |
 		|---------------------------------------------------------------------------------------------
		|Select
 		|	Reg_FactOstTT._Fld3196RRef as TT,
 		|	Reg_FactOstTT._Fld3197RRef as Tovar,
	  	|	t1.id_tov as id_tov
 		|Into #VT_FactOst_Prochiye
      	|From IzbenkaFin.._InfoRg3194 as Reg_FactOstTT (nolock)
		| Inner Join M2..Tovari as t1
		| On t1.Ref = Reg_FactOstTT._Fld3197RRef
		| 	 And t1.id_tov in (" + ТекстИДТоваров + ")
		| Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| On Spr_StrEd._IDRRef = Reg_FactOstTT._Fld3196RRef
		|	 And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")			-- список id_ТТ
		| Left Outer Join #VTPostAndTov_skladir as VTPostAndTov_skladir
		| On VTPostAndTov_skladir.Tovar = Reg_FactOstTT._Fld3197RRef
		| 	 And VTPostAndTov_skladir.TT = Reg_FactOstTT._Fld3196RRef
		| Left Outer Join #VTPostAndTov_neskladir as VTPostAndTov_neskladir
		| On VTPostAndTov_neskladir.Tovar = Reg_FactOstTT._Fld3197RRef
		| 	 And VTPostAndTov_neskladir.TT = Reg_FactOstTT._Fld3196RRef
		|Where
		|	Reg_FactOstTT._Fld3195 = @DateFactOst
		|	And Not Reg_FactOstTT._Fld3198 = 0
		|	And VTPostAndTov_skladir.Tovar is null
		|	And VTPostAndTov_neskladir.Tovar is null
		|Group by
  		|	Reg_FactOstTT._Fld3196RRef,
 		|	Reg_FactOstTT._Fld3197RRef,
	  	|	t1.id_tov
        |
		|-----------------------------------------------------------------------------------------------
 		|Select
		|	TovaryAnalogov._Fld6045RRef as Tovar,
		|	MIN(Analogi._IDRRef) as Analog
		|Into #VT_Analogi
		|From izbenkafin.._Reference6042_VT6043 as TovaryAnalogov (nolock)
		| Inner Join izbenkafin.._Reference6042 as Analogi (nolock)
		| On Analogi._IDRRef = TovaryAnalogov._Reference6042_IDRRef
		| 	And Analogi._Fld7463 = 1
		| 	And Analogi._Marked = 0
		|Group by
		|	TovaryAnalogov._Fld6045RRef
        |
		|---------------------------------------------------------------------------------------------
		|CREATE CLUSTERED INDEX index_analogi_tovar ON #VT_Analogi(Tovar)
 		|---------------------------------------------------------------------------------------------
		|Select
 		|	VT_FactOst_Prochiye.TT as TT,
 		|	VT_FactOst_Prochiye.Tovar as Tovar,
 		|	TovaryAnalogov.Analog as Analog,
	  	|	VT_FactOst_Prochiye.id_tov as id_tov,
 		|	MIN(SprHar._IDRRef) as har
 		|Into #VT_PolnyeAnalogi
      	|From #VT_FactOst_Prochiye as VT_FactOst_Prochiye (nolock)
		| Left Outer Join IzbenkaFin.._Reference2539 as SprHar (nolock)
		| On SprHar._OwnerIDRRef = VT_FactOst_Prochiye.Tovar
		| 	 And SprHar._Fld5138 = 0
		| 	 And SprHar._Marked = 0
		| Left Outer Join #VT_Analogi as TovaryAnalogov
		| On TovaryAnalogov.Tovar = VT_FactOst_Prochiye.Tovar
		|Where
		|	TovaryAnalogov.Tovar is not null
		|Group by
  		|	VT_FactOst_Prochiye.TT,
 		|	VT_FactOst_Prochiye.Tovar,
 		|	TovaryAnalogov.Analog,
	  	|	VT_FactOst_Prochiye.id_tov
        |
		|---------------------------------------------------------------------------------------------
		|CREATE CLUSTERED INDEX index_polnanalogi_tovar ON #VT_PolnyeAnalogi(TT, Analog)
 		|---------------------------------------------------------------------------------------------
        |Select
      	|	Reg_SostavKomplekta._Fld7931RRef as HarKomplekt,
      	|	Reg_SostavKomplekta._Fld7941RRef as HarSostavl,
      	|	Reg_SostavKomplekta._Fld8183RRef as Komplekt,
      	|	Reg_SostavKomplekta._Fld8184RRef as TovarKomplekta,
      	|	Case When t1.Ref is not null Then 1 Else 0 End as v_Komplekt,
      	|	Case When t2.Ref is not null Then 1 Else 0 End as v_TovarKomplekta,
      	|	t1.id_tov as id_tov_Komplekt,
      	|	t2.id_tov as id_tov_TovarKomplekta
 		|Into #VT_SostavKomplekta
      	|From IzbenkaFin.._InfoRg7930 as Reg_SostavKomplekta (nolock)
		| Inner Join (
      	|  Select
      	|	  Reg_SostavKomplekta._Fld8183RRef as Komplekt,
      	|	  Reg_SostavKomplekta._Fld8184RRef as TovarKomplekta,
      	|	  MAX(Reg_SostavKomplekta._Period) as Period
      	|  From IzbenkaFin.._InfoRg7930 as Reg_SostavKomplekta (nolock)
		|   Inner Join M2..Tovari as t1
		|   On t1.Ref = Reg_SostavKomplekta._Fld8183RRef
		|  	   And t1.Vivedena = 0
		|  Where
		|	  Reg_SostavKomplekta._Period < @DateRaspr 
      	|  Group by
      	|	  Reg_SostavKomplekta._Fld8183RRef,
      	|	  Reg_SostavKomplekta._Fld8184RRef
		|  ) as MaxPeriody
		| On (MaxPeriody.Komplekt = Reg_SostavKomplekta._Fld8183RRef)
		|	And (MaxPeriody.TovarKomplekta = Reg_SostavKomplekta._Fld8184RRef)
		| 	And (MaxPeriody.Period = Reg_SostavKomplekta._Period)
		| Left Outer Join M2..Tovari as t1
		| On t1.Ref = Reg_SostavKomplekta._Fld8183RRef
		|  	 And t1.id_tov in (" + ТекстИДТоваров + ")
		| Left Outer Join M2..Tovari as t2
		| On t2.Ref = Reg_SostavKomplekta._Fld8184RRef
		|  	 And t2.id_tov in (" + ТекстИДТоваров + ")
		|Where
		|  	 t1.Ref is not null
		|  	 Or t2.Ref is not null 
        |
 		|---------------------------------------------------------------------------------------------
		|Select Distinct
 		|	VT_FactOst_Prochiye.TT as TT,
 		|	VT_FactOst_Prochiye.Tovar as Tovar,
	  	|	VT_FactOst_Prochiye.id_tov as id_tov,
 		|	TovaryKomplektov.har as har
 		|Into #VT_TovaryKomplektov
      	|From #VT_FactOst_Prochiye as VT_FactOst_Prochiye (nolock)
		| Left Outer Join (
		| 	Select
 		|	 	VT_SostavKomplekta.Komplekt as Tovar,
 		|	 	VT_SostavKomplekta.HarKomplekt as har
      	| 	From #VT_SostavKomplekta as VT_SostavKomplekta
		|	Where
		|		VT_SostavKomplekta.v_Komplekt = 1             -- комплект
		|	Union All
		|	Select
 		|		VT_SostavKomplekta.TovarKomplekta,
 		|		VT_SostavKomplekta.HarSostavl
      	|	From #VT_SostavKomplekta as VT_SostavKomplekta    -- составляющие комплекта
		|	Where
		|		VT_SostavKomplekta.v_TovarKomplekta = 1) as TovaryKomplektov
		| On TovaryKomplektov.Tovar = VT_FactOst_Prochiye.Tovar
		|Where
		|	TovaryKomplektov.Tovar is not null
	  //  |
	  //  |-----------------------------------------------------------------------------------------------
	  //  |Select
	  //  |	Reg_Raspr._Fld4022RRef as Tovar,
	  //  |	SprTovary._Fld760 as id_tov,
	  //  |	SprTovary._Fld4120RRef as koef_zakaza,
	  //  |	Reg_Raspr._Fld4023RRef as TT,
	  //  |	Reg_Raspr._Fld4214RRef as Har,
	  //  |	VTProizvoditeli.id_kontr as id_kontr
	  //|Into #VT_Predyd_Raspred
	  //  |From IzbenkaFin.._InfoRg4020 as Reg_Raspr (nolock)
	  //  | Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
	  //  | On SprTovary._IDRRef = Reg_Raspr._Fld4022RRef
	  //  |	And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
	  //  | Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
	  //  | On Spr_StrEd._IDRRef = Reg_Raspr._Fld4023RRef
	  //  |	And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")				-- список id_ТТ
	  //  | Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
	  //  | On VTProizvoditeli.Harakteristika = Reg_Raspr._Fld4214RRef
	  //  | Left Outer Join #VTOstatkiNaSklade as VTOstatkiNaSklade
	  //  | On VTOstatkiNaSklade.Tovar = Reg_Raspr._Fld4022RRef
	  //  | 	 And VTOstatkiNaSklade.har = Reg_Raspr._Fld4214RRef
	  //  |Where
	  //  |	Reg_Raspr._Fld4021 = @DateRaspr
	  //  | 	And VTOstatkiNaSklade.Tovar is null
        |
		|-----------------------------------------------------------------------------------------------
		|Select Distinct
		|	VT_Slujebnaya.Tovar as Tovar,
		|	VT_Slujebnaya.id_kontr as id_kontr,
		|	VT_Slujebnaya.id_tov as id_tov,
        |   FLOOR(ISNULL(Spr_Har._Fld6855, 0) * ISNULL(Srok_Types._Fld6854, 1) + 0.1) as srok_godnosti
		|Into #VTPostTov
		|From
		|	(Select
		|		VTPostAndTov_skladir.Tovar as Tovar,
		|		VTPostAndTov_skladir.id_kontr as id_kontr,
		|		VTPostAndTov_skladir.id_tov as id_tov,
		|		VTPostAndTov_skladir.har as har
		|	From #VTPostAndTov_skladir as VTPostAndTov_skladir
        |
		|	Union All
        |
		|	Select
		|		VTPostAndTov_neskladir.Tovar,
		|		VTPostAndTov_neskladir.id_kontr,
		|		VTPostAndTov_neskladir.id_tov,
		|		VTPostAndTov_neskladir.har
		|	From #VTPostAndTov_neskladir as VTPostAndTov_neskladir
        |
		|	Union All
        |
		|	Select
		|		VT_PolnyeAnalogi.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_PolnyeAnalogi.id_tov,
		|		VT_PolnyeAnalogi.har
		|	From #VT_PolnyeAnalogi as VT_PolnyeAnalogi
		| 	Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| 	On VTProizvoditeli.Harakteristika = VT_PolnyeAnalogi.har
        |
		|	Union All
        |
		|	Select
		|		VT_TovaryKomplektov.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_TovaryKomplektov.id_tov,
		|		VT_TovaryKomplektov.har
		|	From #VT_TovaryKomplektov as VT_TovaryKomplektov
		| 	Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| 	On VTProizvoditeli.Harakteristika = VT_TovaryKomplektov.har) as VT_Slujebnaya
		//|	Union All
		//|
		//|	Select
		//|		VT_Predyd_Raspred.Tovar,
		//|		VT_Predyd_Raspred.id_kontr,
		//|		VT_Predyd_Raspred.id_tov,
		//|		VT_Predyd_Raspred.Har
		//|	From #VT_Predyd_Raspred as VT_Predyd_Raspred) as VT_Slujebnaya
        | Left Outer Join IzbenkaFin.._Reference2539 as Spr_Har (nolock)
        | On Spr_Har._IDRRef = VT_Slujebnaya.har
		| Left Outer Join IzbenkaFin.._Reference6852 as Srok_Types (nolock)
        | On Spr_Har._Fld6856RRef = Srok_Types._IDRRef
	  //	|Where
	  //	| VT_PolnyeAnalogi.Tovar IS NULL
      	|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VT_PolnyeAnalogi.TT,
		|	VT_PolnyeAnalogi.Analog,
		|	MIN(VT_PolnyeAnalogi.Tovar) as Tovar
		|Into #VT_PolnyeAnalogi_Cut
		|From #VT_PolnyeAnalogi as VT_PolnyeAnalogi
		|Group by
		|	VT_PolnyeAnalogi.TT,
		|	VT_PolnyeAnalogi.Analog
      	|
		|-----------------------------------------------------------------------------------------------
		|Select Distinct
		|	VT_Slujebnaya.TT as TT,
		|	VT_Slujebnaya.Tovar as Tovar,
		|	VT_Slujebnaya.id_kontr as id_kontr,
		|	VT_Slujebnaya.id_tov as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	VT_Slujebnaya.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|	VT_Slujebnaya.koef_zakaza as koef_zakaza,
		|	VT_Slujebnaya.koef_tov as koef_tov
		|Into #VT_Osnovnaya
		|From
		|	(Select
		|		VTPostAndTov_skladir.TT as TT,
		|		VTPostAndTov_skladir.Tovar as Tovar,
		|		VTPostAndTov_skladir.id_kontr as id_kontr,
		|		VTPostAndTov_skladir.id_tov as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		VTPostAndTov_skladir.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|		VTPostAndTov_skladir.koef_zakaza as koef_zakaza,
		|		ISNULL(RegParametryNom._Fld2912, 0) as koef_tov
		|	From #VTPostAndTov_skladir as VTPostAndTov_skladir
		| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		|	    And RegParametryNom._Fld2911RRef = VTPostAndTov_skladir.Tovar
		|	    And RegParametryNom._Fld7341RRef = VTPostAndTov_skladir.har
		| 	 Left Outer Join #VT_Analogi as VT_Analogi
		| 	 On VT_Analogi.Tovar = VTPostAndTov_skladir.Tovar
	  	| 	 Left Outer Join #VT_PolnyeAnalogi as VT_PolnyeAnalogi              -- если для товара есть аналог на остатках ТТ, не брать такой
	    | 	 On VT_PolnyeAnalogi.TT = VTPostAndTov_skladir.TT
	    | 	 	And VT_PolnyeAnalogi.Analog = VT_Analogi.Analog
        |   Where
        |    	VT_Analogi.Analog is null
        |    	Or VT_PolnyeAnalogi.Tovar is null
        |
		|	Union All
        |
		|	Select
		|		VTPostAndTov_neskladir.TT,
		|		VTPostAndTov_neskladir.Tovar,
		|		VTPostAndTov_neskladir.id_kontr,
		|		VTPostAndTov_neskladir.id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		VTPostAndTov_neskladir.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|		VTPostAndTov_neskladir.koef_zakaza,
		|		0
		|	From #VTPostAndTov_neskladir as VTPostAndTov_neskladir
		| 	 Left Outer Join #VT_Analogi as VT_Analogi
		| 	 On VT_Analogi.Tovar = VTPostAndTov_neskladir.Tovar
	  	| 	 Left Outer Join #VT_PolnyeAnalogi as VT_PolnyeAnalogi             -- если для товара есть аналог на остатках ТТ, не брать такой
	    | 	 On VT_PolnyeAnalogi.TT = VTPostAndTov_neskladir.TT
	    | 	 	And VT_PolnyeAnalogi.Analog = VT_Analogi.Analog
        |   Where
        |    	VT_Analogi.Analog is null
        |    	Or VT_PolnyeAnalogi.Tovar is null
        |
		|	Union All
        |
		|	Select
		|		VT_PolnyeAnalogi.TT,
		|		VT_PolnyeAnalogi.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_PolnyeAnalogi.id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		0 as Vyvedena,
		//---АК SHEP 2018.05.04
		|		SprTovary._Fld4120RRef,
		|		ISNULL(RegParametryNom._Fld2912, 0)
		|	From #VT_PolnyeAnalogi as VT_PolnyeAnalogi                         	-- взаимозаменяемые товары аналога, которые
		| 	 Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)			-- есть на остатках торговой точки, но нет		
		| 	 On SprTovary._IDRRef = VT_PolnyeAnalogi.Tovar                      -- в ее действующем товарном ассортименте / графике доставки
		| 	 Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)             
		| 	 On VTProizvoditeli.Harakteristika = VT_PolnyeAnalogi.har
		| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		|		And RegParametryNom._Fld2911RRef = VT_PolnyeAnalogi.Tovar
		|	    And RegParametryNom._Fld7341RRef = VT_PolnyeAnalogi.har
		| 	 Inner Join #VT_PolnyeAnalogi_Cut as VT_PolnyeAnalogi_Cut (nolock)				
		| 	 On VT_PolnyeAnalogi_Cut.TT = VT_PolnyeAnalogi.TT
		| 	 	And VT_PolnyeAnalogi_Cut.Analog = VT_PolnyeAnalogi.Analog
		| 	 	And VT_PolnyeAnalogi_Cut.Tovar = VT_PolnyeAnalogi.Tovar
        |
		|	Union All
        |
		|	Select
		|		VT_TovaryKomplektov.TT,
		|		VT_TovaryKomplektov.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_TovaryKomplektov.id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		0 as Vyvedena,
		//---АК SHEP 2018.05.04
		|		SprTovary._Fld4120RRef,
		|		ISNULL(RegParametryNom._Fld2912, 0)
		|	From #VT_TovaryKomplektov as VT_TovaryKomplektov
		| 	 Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| 	 On SprTovary._IDRRef = VT_TovaryKomplektov.Tovar
		| 	 Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| 	 On VTProizvoditeli.Harakteristika = VT_TovaryKomplektov.har
		| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		|		And RegParametryNom._Fld2911RRef = VT_TovaryKomplektov.Tovar
		|	    And RegParametryNom._Fld7341RRef = VT_TovaryKomplektov.har
        |
		//|	Union All
		//|
		//|	Select
		//|		VT_Predyd_Raspred.TT,
		//|		VT_Predyd_Raspred.Tovar,
		//|		VT_Predyd_Raspred.id_kontr,
		//|		VT_Predyd_Raspred.id_tov,
		//|		VT_Predyd_Raspred.koef_zakaza,
		//|		ISNULL(RegParametryNom._Fld2912, 0)
		//|	From #VT_Predyd_Raspred as VT_Predyd_Raspred
		//| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		//| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		//|		And RegParametryNom._Fld2911RRef = VT_Predyd_Raspred.Tovar
		//|	    And RegParametryNom._Fld7341RRef = VT_Predyd_Raspred.har
		|	) as VT_Slujebnaya
        |
		|---------------------------------------------------------------------------------------------
		|Select
		|	Reg_Ceny._Period as Period,
		|	Reg_Ceny._Fld2709RRef as TT,
		|	Reg_Ceny._Fld2710RRef as Tovar,
		|	Reg_Ceny._Fld2713 as Cena
		|Into #VT_Ceny
		|From IzbenkaFin.._InfoRg2707 as Reg_Ceny (nolock)
		| Inner Join (
		|	Select
		|		Reg_Ceny._Fld2709RRef as TT,
		|		Reg_Ceny._Fld2710RRef as Tovar,
		|		MAX(Reg_Ceny._Period) as Period
		|	From IzbenkaFin.._InfoRg2707 as Reg_Ceny (nolock)
		|	 Inner Join IzbenkaFin.._Reference29 as SprNom (nolock)
		|	 On SprNom._IDRRef = Reg_Ceny._Fld2710RRef
		|		And SprNom._Fld760 In (" + ТекстИДТоваров + ")
		|	Group by
		|		Reg_Ceny._Fld2709RRef,
		|		Reg_Ceny._Fld2710RRef) as Max_Periody
		| On Max_Periody.TT = Reg_Ceny._Fld2709RRef
		|	And Max_Periody.Tovar = Reg_Ceny._Fld2710RRef
		|	And Max_Periody.Period = Reg_Ceny._Period
        |
		|---------------------------------------------------------------------------------------------
		|CREATE INDEX index_ceny_tovar_tt ON #VT_Ceny(Tovar, TT)
		|---------------------------------------------------------------------------------------------
		|Select Distinct
		|	VykladkaTovara.Tovar as Tovar,
		| 	Reg_MestaHraneniya._Fld7599RRef as TT,
		| 	0 as Ostatok
		|Into #TovaryPoAkcii 
		|From 
		| 	(Select
		| 		Reg_VykladkaPl._Fld5123RRef as Tovar,
		| 		MAX(Spr_MestaVykladki._ParentIDRRef) as MesroVykladki
		| 	From IzbenkaFin.._InfoRg5121 as Reg_VykladkaPl (nolock)
		| 	 Inner Join IzbenkaFin.._Reference5118 as Spr_MestaVykladki (nolock)
		| 	 On Spr_MestaVykladki._IDRRef = Reg_VykladkaPl._Fld5124RRef
		| 		And Spr_MestaVykladki._Marked = 0
		| 	Group by
		| 		Reg_VykladkaPl._Fld5123RRef) as VykladkaTovara
		| Left Outer Join IzbenkaFin.._InfoRg7598 as Reg_MestaHraneniya (nolock)
		| On Reg_MestaHraneniya._Fld7600RRef = VykladkaTovara.MesroVykladki
		| Left Outer Join
		| 	(Select Distinct
		| 		AkciiTovarov._Reference29_IDRRef as Tovar,
		| 		AkciiTovarov._Fld6672RRef as TT
		| 	From IzbenkaFin.._Reference29_VT6217 as AkciiTovarov (nolock)
		| 	Where
		| 		DateAdd(Year, 2000, GETDATE()) Between AkciiTovarov._Fld6220 And AkciiTovarov._Fld6221) as AkciiTovarov
		| On AkciiTovarov.Tovar = VykladkaTovara.Tovar
		| 	 And (AkciiTovarov.TT = 0x00000000000000000000000000000000
		| 		  Or AkciiTovarov.TT = Reg_MestaHraneniya._Fld7599RRef)
		|Where
		| 	ISNULL(Reg_MestaHraneniya._Fld7601, 0) = 1 
		| 	And AkciiTovarov.Tovar Is not null		
		|---------------------------------------------------------------------------------------------
		|Select
		|	Tovary.id_tov as id_tov,
		|	Tovary.id_group as id_group,
		|	ISNULL(Tovary_Analogi.id_tov_vz, Tovary.id_tov) as id_tov_vz,
		|	Convert(real, ISNULL(SprEdIzm._Fld176, 0)) as ves,
		|	Convert(real, ISNULL(Reg_ParametryNom._Fld2912, 0)) as koef_tov,
		|	Case
		|		When Tovary.vid_skadiruemosti = 0xA9312BD3EF4CC68B4394876E8B1EB052     		-- Вид складируемости = Нескладируемый
		|			Or (Tovary.vid_skadiruemosti = 0x87E74524672D69394AE11BF7C0D72524  		-- Вид складируемости = Складируемый до заказа
		|					And Tovary_Zakaz.Nom is not null)
		|			Then 0
		|		Else 1
		|	End as skladir,
		|	Tovary.pick_item as pick_item,
		|	Tovary.id_tov_pvz as id_tov_pvz
		|Into #M2_tov
		|From
		|	(Select
		|		SprNom._IDRRef,
		|		SprNom._Fld241RRef,
		|		SprNom._Fld760 as id_tov,
		|		ISNULL(SprNom._Fld2750, 0) as id_group,
		|		SprNom._Fld5907RRef as vid_skadiruemosti,
		|		SprNom._Fld7350 as pick_item,
		|		ISNULL(Neosnovnye_Analogi.id_tov_Osnovn, Osnovnye_Analogi.id_tov_Osnovn) as id_tov_pvz
		|	From IzbenkaFin.._Reference29 as SprNom (nolock)
		| 	 Left Outer Join #VT_Zamenyaemye_Analogi as Neosnovnye_Analogi
		|	 On Neosnovnye_Analogi.tov_Zadvoen = SprNom._IDRRef
		| 	 Left Outer Join (
		|		Select Distinct
		|			VT_Zamenyaemye_Analogi.id_tov_Osnovn as id_tov_Osnovn
		|		From #VT_Zamenyaemye_Analogi as VT_Zamenyaemye_Analogi) as Osnovnye_Analogi
		|	 On Osnovnye_Analogi.id_tov_Osnovn = SprNom._Fld760
		|	Where
		|		SprNom._Fld760 In (" + ТекстИДТоваров + ")) as Tovary
		| Left Outer Join(
		|	Select
		|		Reg_ParametryNom._Fld2911RRef as _Fld2911RRef,
		|		MAX(Reg_ParametryNom._Fld2912) as _Fld2912
		|	From IzbenkaFin.._InfoRg2909 As Reg_ParametryNom (nolock)
		|	Where
		|		Reg_ParametryNom._Fld2910RRef = @IDR_Sklad
		|	Group by
		|		Reg_ParametryNom._Fld2911RRef) as Reg_ParametryNom
		| On Reg_ParametryNom._Fld2911RRef = Tovary._IDRRef
		//+++АК SHEP 2018.05.18 ИП-00018421: Inner Join заменил на Left Join
		//| Inner Join IzbenkaFin.._Reference21 as SprEdIzm (nolock)
		| Left Join IzbenkaFin.._Reference21 as SprEdIzm (nolock)
		//---АК SHEP 2018.05.18
		| On SprEdIzm._IDRRef = Tovary._Fld241RRef
		| Left Outer Join(
		|	Select
		|		Analogi_Tovary._Fld6045RRef as Nom,
		|		MAX(Analogi._Fld7213) as id_tov_vz
		|	From IzbenkaFin.._Reference6042_VT6043 as Analogi_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Reference6042 as Analogi (nolock)
		|	 On Analogi._IDRRef = Analogi_Tovary._Reference6042_IDRRef
		|		And Analogi._Marked = 0
		|	Group by
		|		Analogi_Tovary._Fld6045RRef
		|	) as Tovary_Analogi
		|	On Tovary_Analogi.Nom = Tovary._IDRRef
		| Left Outer Join(
		|	Select
		|		Predzakazy_Tovary._Fld3066RRef as Nom
		|	From IzbenkaFin.._Document3032_VT3063 as Predzakazy_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Document3032 as Predzakazy (nolock)
		|	 On Predzakazy._IDRRef = Predzakazy_Tovary._Document3032_IDRRef
		|		And Predzakazy._Fld3058 = @DatePostupleniya
		|		And Predzakazy._Fld4104RRef = @IDR_Raschetchik
		|		And Predzakazy._Fld3060 = 1
		|		And Predzakazy._Posted = 1
		|	Group by
		|		Predzakazy_Tovary._Fld3066RRef
		|	Having
		|		SUM(Predzakazy_Tovary._Fld3067) > 0
		|	) as Tovary_Zakaz
		|	On Tovary_Zakaz.Nom = Tovary._IDRRef
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTPostTov.id_tov as id_tov,
		|	VTPostTov.id_kontr as id_kontr,
		|	VTPostTov.srok_godnosti as srok_godnosti,
		|	ISNULL(VTOstatkiNaSklade.kol, 0) as q_ost_sklad,
		|	ISNULL(Ozhidaemyi_Prihod.kol, 0) as q_wait_sklad,
		|	Case
		|		When Storage._Fld10287 = 1	Then 1 -- Штучный товар
		|		Else ISNULL(VTKolVUpakovke.kol, 0)
		|	End as kolvo_korob
		|Into #M2_tov_kontr
		|From #VTPostTov as VTPostTov
		| Left Outer Join #VTOstatkiNaSklade_1 as VTOstatkiNaSklade
		| On (VTOstatkiNaSklade.id_kontr = VTPostTov.id_kontr
		|		Or VTOstatkiNaSklade._ne_po_har = 1)
		|	And (VTOstatkiNaSklade.Tovar = VTPostTov.Tovar)
		| Left Outer Join #VTKolVUpakovke as VTKolVUpakovke
		| On VTKolVUpakovke.id_kontr = VTPostTov.id_kontr
		|	And VTKolVUpakovke.Tovar = VTPostTov.Tovar
		| Left Outer Join(
		|	Select
		|		Prihody_Tovary._Fld3079RRef as Nom,
		|		VTProizvoditeli.id_kontr as id_kontr,
		|		SUM(Prihody_Tovary._Fld3082) as kol
		|	From IzbenkaFin.._Document3033_VT3077 as Prihody_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Document3033 as Prihody (nolock)
		|	 On Prihody._IDRRef = Prihody_Tovary._Document3033_IDRRef
		|		--And Prihody._Date_Time < DateAdd(hour, 9, @DateFactOst)
		|		--And Not Prihody._Date_Time < DateAdd(Day, -1, DateAdd(hour, 9, @DateFactOst))
		|		And Prihody._Fld7282 = 1
		|		And Prihody._Fld14063 = 0
		|		And Prihody._Fld7360 = 0 -- если приемка терминалом не закончена
		|		And Prihody._Posted = 1
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = Prihody._Fld3071RRef
		|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		|	 Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		|	 On VTProizvoditeli.Harakteristika = Prihody_Tovary._Fld3080RRef
		|	Group by
		|		Prihody_Tovary._Fld3079RRef,
		|		VTProizvoditeli.id_kontr
		|	Having
		|		SUM(Prihody_Tovary._Fld3082) > 0
		|	) as Ozhidaemyi_Prihod
		| On Ozhidaemyi_Prihod.Nom = VTPostTov.Tovar
		|	 And Ozhidaemyi_Prihod.id_kontr = VTPostTov.id_kontr
		| Left Outer Join IzbenkaFin.._InfoRg3213 as Reg_DostupnostNaSklade (nolock)
		| On Reg_DostupnostNaSklade._Fld3215RRef = @IDR_Sklad
		|	 And Reg_DostupnostNaSklade._Fld5074RRef = VTPostTov.Tovar
		| LEFT OUTER JOIN IzbenkaFin.._Reference1321 as Storage
		| ON Reg_DostupnostNaSklade._Fld3216RRef = Storage._IDRRef
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	M2_raspr_zadanie_tt.id_tt,
		|	M2_raspr_zadanie_tt.plan_z,
		|	M2_raspr_zadanie_tt.uchastvuet,
		|	MIN(M2_raspr_zadanie_tt.poryadok) as poryadok
		|Into #M2_raspr_zadanie_tt
		|From (
		|	Select
		|		Spr_StrEd._Fld758 as id_tt,
		//+++ ZICD 09.02.2017 исправление критической ошибки
		//|		Row_Number() Over (Partition by @IDR_Sklad Order by Spr_Marshruty._Fld5228) as poryadok, -- по возрастанию планового времени выезда на ТТ
		|		Row_Number() Over (Partition by @IDR_Sklad Order by Spr_Marshruty._Fld4222) as poryadok, -- по возрастанию планового времени выезда на ТТ
		//---
		|		Case
		|			When Spr_StrEd._Fld7793RRef = 0x00000000000000000000000000000000
		|				 Or Spr_StrEd._Fld7793RRef = 0x8201000C29E4E68A11E1490816B9983A
		|				Then NULL
		|			Else Spr_StrEd._Fld7702 * 1000
		|		End as plan_z,
		|		Case
		|			When Spr_StrEd._Fld7348 = 0
		|				Then 1
		|			Else 0
		|		End as uchastvuet
		|	From IzbenkaFin.._Reference3031_VT3051 as TT_Marshruta (nolock)
		| 	 Inner Join IzbenkaFin.._Reference3031 as Spr_Marshruty (nolock)
		| 	 On Spr_Marshruty._IDRRef = TT_Marshruta._Reference3031_IDRRef
		|	 	And Spr_Marshruty._Fld3050RRef = @IDR_Sklad
		|	 	And Spr_Marshruty._Marked = 0
		| 	 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| 	 On Spr_StrEd._IDRRef = TT_Marshruta._Fld3053RRef
		|	 	And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")			-- список id_ТТ
		|	) as M2_raspr_zadanie_tt
		|Group by
		|	M2_raspr_zadanie_tt.id_tt,
		|	M2_raspr_zadanie_tt.plan_z,
		|	M2_raspr_zadanie_tt.uchastvuet
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTPostTov.id_tov as id_tov,
		|	VTPostTov.id_kontr as id_kontr,
		|	SUM(ISNULL(VTOstatkiNaSklade.kol, 0)) as q_ost_sklad,
		|	ISNULL(VTOstatkiNaSklade.data_proizvodstva, @DateRaspr) as date_ost
		|Into #M2_tov_kontr_date
		|From #VTPostTov as VTPostTov
		| Left Outer Join #VTOstatkiNaSklade_2 as VTOstatkiNaSklade
		| On (VTOstatkiNaSklade.id_kontr = VTPostTov.id_kontr
		|		Or VTOstatkiNaSklade._ne_po_har = 1)
		|	And (VTOstatkiNaSklade.Tovar = VTPostTov.Tovar)
		|Group by
		|	VTPostTov.id_tov,
		|	VTPostTov.id_kontr,
		|	ISNULL(VTOstatkiNaSklade.data_proizvodstva, @DateRaspr)
		|
		|-----------------------------------------------------------------------------------------------
		|-- выборка залов отгрузки, откуда отгружается торговая точка по определенному товару
		|SELECT Distinct
		|	T1._Fld3053RRef as TT,
		|	T5._Fld3393 as id_zal,
		|	T6._Fld760 as id_tov
		|Into #TT_id_zon
		|FROM IzbenkaFin.dbo._Reference3031_VT3051 as T1 (nolock)
		|	INNER JOIN IzbenkaFin.dbo._Reference3031_VT5167 as T2 (nolock)
		|		LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg3213 as T3 (nolock)
		|		ON (T2._Fld5169RRef = T3._Fld3216RRef)
		|	ON (T1._Reference3031_IDRRef = T2._Reference3031_IDRRef)
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference3031 as T4 (nolock)
		| ON T2._Reference3031_IDRRef = T4._IDRRef         
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference1321 as T5 (nolock)
		| ON T2._Fld8390RRef = T5._IDRRef
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 as T6 (nolock)
		| ON T3._Fld5074RRef = T6._IDRRef
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference1321 as T7 (nolock)
		| ON T2._Fld5169RRef = T7._IDRRef
		|WHERE
		|	T7._Fld7278 = 0
		|	AND T5._Fld7279 = 1
		|	AND T4._Marked = 0
	//	|-----------------------------------------------------------------------------------------------
	//	|CREATE CLUSTERED INDEX index_TT_id_zon_tovar_tt ON #TT_id_zon(ТТ, id_tov)		
        |-----------------------------------------------------------------------------------------------
		|Select
		|	Rashody_Tovary._Fld3102RRef as Tovar,
		|	Rashody._Fld3090_RRRef as TT,
		|	SUM(Rashody_Tovary._Fld3105) as kol
		|INTO #VTRashod_Fact
		|From IzbenkaFin.._Document3034_VT3100 as Rashody_Tovary (nolock)
		| Inner Join IzbenkaFin.._Document3034 as Rashody (nolock)
		|	 On Rashody._IDRRef = Rashody_Tovary._Document3034_IDRRef
		|		And Rashody._Fld3480 = @DateRaspr
		|		And Rashody._Fld3088RRef = 0xBE738D5D0F666EE64FC467BA53367442   -- вид операции - Отгрузка в торговую точку
		|		And Rashody._Fld3096RRef = 0xAE2C7DEE08A154D2489A2C17DCB24F70   -- статус = в сборке
		|		And Rashody._Posted = 1		
		|	Group by
		|		Rashody_Tovary._Fld3102RRef,
		|		Rashody._Fld3090_RRRef		
		|---------------------------------------------------------------------------------------------
		//|CREATE CLUSTERED INDEX index_rashod_tovar_tt ON #VTRashod_Fact(Tovar, TT)
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VT_Osnovnaya.id_tov as id_tov,
		|	Spr_StrEd._Fld758 as id_tt,
		|	VT_Osnovnaya.id_kontr as id_kontr,
		|	VT_Osnovnaya.id_kontr as id_kontr_v,
		|	Spr_StrEd._Fld2758 as koef_tt,	
		|	ISNULL(TT_id_zon.id_zal, 0) as id_zal,
		|	ISNULL(VTRashod_Fact.kol, 0) as q_rashod_fact,
		|	ISNULL(Spr_KoefZakaza._Fld4115, 0) as k1,
		|	ISNULL(Spr_KoefZakaza._Fld4116, 0) as k2,
		|	ISNULL(Spr_KoefZakaza._Fld4117, 0) as k3,
		|	ISNULL(Spr_KoefZakaza._Fld4118, 0) as k4,
		|	ISNULL(Spr_KoefZakaza._Fld4119, 0) as k5,
		|	ISNULL(0, 0) as q_FO,
		|	ISNULL(Reg_TovOgranicheniya._Fld2918, 0) as min_ost_tt_tov,
		|	ISNULL(TovaryPoAkcii.Ostatok, ISNULL(Reg_TovOgranicheniya._Fld2919, 0)) as max_ost_tt_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		//|	ISNULL(Reg_PlanPr._Fld2885, 0) as q_plan_pr,
		|	CASE
		|		WHEN VT_Osnovnaya.Vyvedena = 1
		|			THEN 0
		|		ELSE ISNULL(Reg_PlanPr._Fld2885, 0)
		|	END AS q_plan_pr,
		//---АК SHEP 2018.05.04
		|	Case
		|		When ISNULL(Reg_TovOgranicheniya._Fld2918, 0) = 0
		|			Then ISNULL(Reg_PlanPr._Fld2885, 0) * (1 + Spr_StrEd._Fld2758) * VT_Osnovnaya.koef_tov
		|		Else ISNULL(Reg_TovOgranicheniya._Fld2918, 0)
		|	End as q_min_ost,
		|	Case
		|		When ISNULL(VT_Ceny.Period, '20010101') > ISNULL(VT_Ceny_BezTT.Period, '20010101')
		|			Then ISNULL(VT_Ceny.Cena, 0)
		|		Else ISNULL(VT_Ceny_BezTT.Cena, 0)
		|	End as cena_pr
		|Into #M2_tt_tov_kontr
		|From #VT_Osnovnaya as VT_Osnovnaya
		| Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| On Spr_StrEd._IDRRef = VT_Osnovnaya.TT
		| Left Outer Join IzbenkaFin.dbo._Reference4114 as Spr_KoefZakaza (nolock)
		| On Spr_KoefZakaza._IDRRef = VT_Osnovnaya.koef_zakaza
		//| Left Outer Join IzbenkaFin.._InfoRg3194 as Reg_FactOstTT (nolock)
		//| On Reg_FactOstTT._Fld3195 = @DateFactOst
		//|	And Reg_FactOstTT._Fld3196RRef = VT_Osnovnaya.TT
		//|	And Reg_FactOstTT._Fld3197RRef = VT_Osnovnaya.Tovar
		//|	And Not Reg_FactOstTT._Fld3198 = 0
		| Left Outer Join IzbenkaFin.._InfoRg2915 as Reg_TovOgranicheniya (nolock)
		| On Reg_TovOgranicheniya._Fld2917RRef = VT_Osnovnaya.TT
		|	And Reg_TovOgranicheniya._Fld2916RRef = VT_Osnovnaya.Tovar
		|	And Not (Reg_TovOgranicheniya._Fld2918 = 0
		|				And Reg_TovOgranicheniya._Fld2919 = 0)
		| Left Outer Join IzbenkaFin.._InfoRg2881 as Reg_PlanPr (nolock)
		| On Reg_PlanPr._Fld3269 = @DateRaspr
		|	And Reg_PlanPr._Fld2883RRef = VT_Osnovnaya.TT
		|	And Reg_PlanPr._Fld2884RRef = VT_Osnovnaya.Tovar
		|	And Reg_PlanPr._Fld5934RRef = @IDR_Sklad
		|	And Not Reg_PlanPr._Fld2885 = 0
		| Left Outer Join #TT_id_zon as TT_id_zon
 		| On TT_id_zon.TT = VT_Osnovnaya.TT
		|	And TT_id_zon.id_tov = VT_Osnovnaya.id_tov
		| Left Outer Join #VTRashod_Fact as VTRashod_Fact
		| On VTRashod_Fact.Tovar = VT_Osnovnaya.Tovar
		|	And VTRashod_Fact.TT = VT_Osnovnaya.TT
		| Left Outer Join #VT_Ceny as VT_Ceny
		| On (VT_Ceny.Tovar = VT_Osnovnaya.Tovar)
		|	And (VT_Ceny.TT = VT_Osnovnaya.TT)		
		| Left Outer Join #VT_Ceny as VT_Ceny_BezTT
		| On (VT_Ceny_BezTT.Tovar = VT_Osnovnaya.Tovar)
		|	 And (VT_Ceny_BezTT.TT = 0x00000000000000000000000000000000) -- торговая точка не указана в ценах
		| Left Outer Join #TovaryPoAkcii as TovaryPoAkcii
		| On (TovaryPoAkcii.Tovar = VT_Osnovnaya.Tovar)
		| 	 And (TovaryPoAkcii.TT = VT_Osnovnaya.TT)
		|Where
		| 	VTRashod_Fact.kol IS NULL
        |
		|---------------------------------------------------------------------------------------------
        |
		|While @err = 1
		|Begin
		|	Begin Try
		|----------------------------------------------------
		|Insert Into M2..tov_init
		|	(Number_r,
		|	id_tov,
		|	id_group,
		|	id_tov_vz,
		|	ves,
		|	koef_tov,
		|	Skladir,
		|	pick_item,
		|	id_tov_pvz)
		|Select
		|	@Number_r,
		|	M2_tov.id_tov,
		|	M2_tov.id_group,
		|	M2_tov.id_tov_vz,
		|	M2_tov.ves,
		|	M2_tov.koef_tov,
		|	M2_tov.skladir,
		|	M2_tov.pick_item,
		|	M2_tov.id_tov_pvz
		|From #M2_tov as M2_tov
        |
		|----------------------------------------------------
		|Insert Into M2..tov_kontr_init
		|	(Number_r,
		|	id_tov,
		|	id_kontr,
		|	srok_godnosti,
		|	q_ost_sklad,
		|	q_wait_sklad,
		|	kolvo_korob,
		|	rasp_all)
		|Select
		|	@Number_r,
		|	M2_tov_kontr.id_tov,
		|	M2_tov_kontr.id_kontr,
		|	M2_tov_kontr.srok_godnosti,
		|	M2_tov_kontr.q_ost_sklad,
		|	M2_tov_kontr.q_wait_sklad,
		|	M2_tov_kontr.kolvo_korob,
		|	1 as rasp_all
		|From #M2_tov_kontr as M2_tov_kontr
        |
		|----------------------------------------------------
		|Insert Into M2..Raspr_zadanie_tov
		|	(Number_r,
		|	id_tov,
		|	id_kontr)
		|Select
		|	@Number_r,
		|	VTPostTov.id_tov,
		|	VTPostTov.id_kontr
		|From #VTPostTov as VTPostTov
		|
		|----------------------------------------------------
		|Insert Into M2..tov_kontr_date_init
		|	(Number_r,
		|	id_tov,
		|	id_kontr,
		|	q_ost_sklad,
		|	date_ost)
		|Select
		|	@Number_r,
		|	M2_tov_kontr_date.id_tov,
		|	M2_tov_kontr_date.id_kontr,
		|	M2_tov_kontr_date.q_ost_sklad,
		|	M2_tov_kontr_date.date_ost
		|From #M2_tov_kontr_date as M2_tov_kontr_date
        |
		|
		|----------------------------------------------------
		|Insert Into IzbenkaFin.._InfoRg5947
		|	(_Fld5948,
		|	_Fld5950,
		|	_Fld5949,
		|	_Fld5951,
		|	_Fld5952,
		|	_Fld9622,
		|	_Fld9623,
		|	_Fld5958,
		|	_Fld7647,
		|	_Fld7812,
		|	_Fld5961,
		|	_Fld5962,
		|	_Fld5963,
		|	_Fld5964,
		|	_Fld5965,
		|	_Fld5955,
		|	_Fld5957,
		|	_Fld7224,
		|	_Fld5953,
		|	_Fld5954,
		|	_Fld5956,
		|	_SimpleKey,
		|	_Fld5959,
		|	_Fld5960)
		|SELECT
		|	VZ_Zapros.Number_r,
		|	VZ_Zapros.id_tov,
		|	VZ_Zapros.id_tt,
		|	VZ_Zapros.id_kontr,
		|	VZ_Zapros.id_kontr_v,
		|	VZ_Zapros.id_kontr1,
		|	VZ_Zapros.id_kontr_v1,
		|	VZ_Zapros.koef_tt,
		|	VZ_Zapros.id_zal,
		|	VZ_Zapros.q_rashod_fact,
		|	VZ_Zapros.k1,
		|	VZ_Zapros.k2,
		|	VZ_Zapros.k3,
		|	VZ_Zapros.k4,
		|	VZ_Zapros.k5,
		|	VZ_Zapros.q_FO,
		|	VZ_Zapros.min_ost_tt_tov,
		|	VZ_Zapros.max_ost_tt_tov,
		|	VZ_Zapros.q_plan_pr,
		|	VZ_Zapros.q_min_ost,
		|	VZ_Zapros.cena_pr,
		|	VZ_Zapros._SimpleKey,
		|	VZ_Zapros.DateRaspr,
		|	VZ_Zapros.DateRaspr1
		|FROM (Select
		|	@Number_r as Number_r,
		|	ISNULL(M2_tt_tov_kontr.id_tov, 0) as id_tov,
		|	ISNULL(M2_tt_tov_kontr.id_tt, 0) as id_tt,
		|	ISNULL(M2_tt_tov_kontr.id_kontr, 0) as id_kontr,
		|	ISNULL(M2_tt_tov_kontr.id_kontr_v, 0) as id_kontr_v,
		|	ISNULL(M2_tt_tov_kontr.id_kontr, 0) as id_kontr1,
		|	ISNULL(M2_tt_tov_kontr.id_kontr_v, 0) as id_kontr_v1,
		|	ISNULL(M2_tt_tov_kontr.koef_tt, 0) as koef_tt,
		|	ISNULL(M2_tt_tov_kontr.id_zal, 0) as id_zal,
		|	ISNULL(M2_tt_tov_kontr.q_rashod_fact, 0) as q_rashod_fact,
		|	ISNULL(M2_tt_tov_kontr.k1, 0) as k1,
		|	ISNULL(M2_tt_tov_kontr.k2, 0) as k2,
		|	ISNULL(M2_tt_tov_kontr.k3, 0) as k3,
		|	ISNULL(M2_tt_tov_kontr.k4, 0) as k4,
		|	ISNULL(M2_tt_tov_kontr.k5, 0) as k5,
		|	ISNULL(M2_tt_tov_kontr.q_FO, 0) as q_FO,
		|	ISNULL(M2_tt_tov_kontr.min_ost_tt_tov, 0) as min_ost_tt_tov,
		|	ISNULL(M2_tt_tov_kontr.max_ost_tt_tov, 0) as max_ost_tt_tov,
		|	ISNULL(M2_tt_tov_kontr.q_plan_pr, 0) as q_plan_pr,
		|	ISNULL(M2_tt_tov_kontr.q_min_ost, 0) as q_min_ost,
		|	ISNULL(M2_tt_tov_kontr.cena_pr, 0) as cena_pr,
		|	master.dbo.UID2Binary(NEWID()) as _SimpleKey,
		|	@DateRaspr as DateRaspr,
		|	DateAdd(Day, 1, @DateRaspr) as DateRaspr1,
		|	ROW_NUMBER() over (partition by M2_tt_tov_kontr.id_tov, M2_tt_tov_kontr.id_tt ORDER BY M2_tt_tov_kontr.id_kontr) as rn
		|From #M2_tt_tov_kontr as M2_tt_tov_kontr) as VZ_Zapros
		|WHERE VZ_Zapros.rn = 1
		|
		|----------------------------------------------------
		|Insert Into M2..raspr_zadanie_tt
		|	(Number_r,
		|	id_tt,
		|	poryadok,
		|	plan_z,
		|	uchastvuet, 
		|	only_tt)
		|Select
		|	@Number_r,
		|	M2_raspr_zadanie_tt.id_tt,
		|	M2_raspr_zadanie_tt.poryadok,
		|	M2_raspr_zadanie_tt.plan_z,
		|	M2_raspr_zadanie_tt.uchastvuet,
		|	@only_tt
		|From #M2_raspr_zadanie_tt as M2_raspr_zadanie_tt
		|
		|----------------------------------------------------
		|Insert Into M2..tov_kontr_zal_init
		|	(Number_r,
		|	id_tov,
		|	id_kontr,
		|	id_zal,
		|	q_ost_zal)
		|Select
		|	@Number_r,
		|	VTOstatkiVZale.id_tov,
		|	VTOstatkiVZale.id_kontr,
		|	VTOstatkiVZale.id_zal,
		|	VTOstatkiVZale.q_ost_zal
		|From #VTOstatkiVZale as VTOstatkiVZale
        |
		|----------------------------------------------------
		|	
		|		Select @err = 0
		|	End Try
		|   Begin Catch
		|		If CHARINDEX('вызвала взаимоблокировку ресурсов', ERROR_MESSAGE(), 1) > 0
		|			Begin
		|				Set @err = 1		-- запись в лог факта блокировки
		|			End
		|		Else
		|			Begin
		|				set @mes = ERROR_MESSAGE()
		|				Update M2..raspr_zadanie
		|				Set ErrorMes = @mes
		|				Where Number_r = " + Number_r + "
		|				 /*RAISERROR (@mes,
        |							20, -- Severity.  
        |							1 -- State.  
        |							) WITH LOG */
		|				Return				-- прочая ошибка - выход
		|			End                    
		|	End Catch 
		|End -- while
		|
		|Select @mes as messageError
		| 
		|-----------------------------------------------------------------------------------------------
		|Drop Table #VTProizvoditeli
		|Drop Table #VTKolVUpakovke
		|Drop Table #VTOstatkiNaSklade
		|Drop Table #VTOstatkiVZale
		|Drop Table #VTOstatkiNaSklade_1
		|Drop Table #VTOstatkiNaSklade_2
		|Drop Table #VT_tovary_post_tt
		|Drop Table #VTPostAndTov_skladir
		|Drop Table #VTPostAndTov_neskladir
		//|Drop Table #VT_Predyd_Raspred
		|Drop Table #VTPostTov
		|Drop Table #VT_Ceny
		|Drop Table #VT_Zamenyaemye_Analogi
		|Drop Table #VT_FactOst_Prochiye
		|Drop Table #VT_Analogi
		|Drop Table #VT_PolnyeAnalogi
		|Drop Table #VT_SostavKomplekta
		|Drop Table #VT_TovaryKomplektov
		|Drop Table #VT_PolnyeAnalogi_Cut
		|Drop Table #VT_Osnovnaya
		|Drop Table #TovaryPoAkcii
		|Drop Table #M2_tov
		|Drop Table #M2_tov_kontr
		|Drop Table #M2_raspr_zadanie_tt
		|Drop Table #M2_tov_kontr_date
		|Drop Table #M2_tt_tov_kontr
		|Drop Table #TT_id_zon";
	
КонецФункции

// Функция отправляет данные в таблицы базы SQL [M2], с использованием ADO-соединения.
//
// Возвращаемое значение;
// 	ТекстНомер_Р - Текст, текст номера отправленного распределения.
//
Функция ОтправитьДанныеДляРаспределенияПоТТ(
	мДата, 
	мСписокТТ, 
	мСписокНом, 
	мСклад, 
	мРасчетчик = Неопределено, 
	ОстаткиСледДнем = Ложь, 
	ПроверятьБлокировку = Истина, 
	ЗонаХранения = Неопределено, 
	ВсеСклады=Истина,
	ЭтоПредварительноеРаспределение = 0) Экспорт
	
	Перем мДеньНедели, ТекДатаРаспределения, СтруктураПараметров, ADOСоединение, ADOКоманда, ТекстЗапроса;
	
	СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("ТекстНомер_Р"			, ТекстНомер_Р);
	СтруктураПараметров.Вставить("СписокТорговыхТочек"	, мСписокТТ);
	СтруктураПараметров.Вставить("СписокНоменклатуры"	, мСписокНом);	
	СтруктураПараметров.Вставить("Склад"				, мСклад);
	СтруктураПараметров.Вставить("ОстаткиСледДнем"		, ОстаткиСледДнем);
	СтруктураПараметров.Вставить("ВсеСклады"			, ВсеСклады);	
	СтруктураПараметров.Вставить("СкладХранения"		, ЗонаХранения);

	ЗаполнитьСтрокиТТиТоваров(СтруктураПараметров);
	ТекстНомер_Р = ПолучитьНомерРаспределенияПоТТ(мДата, мСписокНом, мСклад, мРасчетчик, ПроверятьБлокировку, ЗонаХранения, ЭтоПредварительноеРаспределение, СтруктураПараметров);
	Если ТекстНомер_Р = "" Тогда
		Сообщить("Не удалось определить номер распределения! Отправка данных невозможна.");		
		Возврат "";
	КонецЕсли;

	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрокаСоединенияСБазойСКЛ = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open(СтрокаСоединенияСБазойСКЛ);
	
	ADOКоманда = Новый COMОбъект("ADODB.Command");
	ADOКоманда.ActiveConnection = ADOСоединение;
	
	////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
		//---АК KIRN 
	Возврат ТекстНомер_Р;
	ТекстКоманды = ПолучитьТекстКоманды_ПодготовкаДанныхДляРаспределения(СтруктураПараметров);
	Сообщить(ТекстКоманды);
	Возврат ТекстНомер_Р;
	ADOСоединение.Execute(ТекстКоманды);
	СообщениеОбОшибке = "";
	ТекстЗапроса =
	"Select
	|	CAST(tablica.ErrorMes as NVarChar(500)) as Mess
	|From
	|	M2..raspr_zadanie as tablica (nolock)
	|WHERE tablica.Number_r = " + ТекстНомер_Р;
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Если НЕ Выборка.EOF() Тогда
		
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			СообщениеОбОшибке = СокрЛП(Выборка.Fields("Mess").Value);
			Выборка.MoveNext();
		КонецЦикла;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщить(СообщениеОбОшибке);
		Возврат ТекстНомер_Р;
	Иначе	
		Сообщить("...  заполнены таблицы SQL");
	КонецЕсли;	

	// Перезапись статуса в M2..raspr_zadanie
	ТекстКоманды =
	"Update M2..raspr_zadanie
	|Set Status = 2
	|Where Number_r = " + ТекстНомер_Р + "
	|";
	ADOСоединение.Execute(ТекстКоманды);
	
	ADOСоединение.Close();
	
	Возврат ТекстНомер_Р;
	
КонецФункции

Процедура ЗаполнитьСтрокиТТиТоваров(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТТ", СтруктураПараметров.СписокТорговыхТочек);
	Запрос.УстановитьПараметр("Товары"	, СтруктураПараметров.СписокНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.id_TT
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СписокТТ)
	|	И ЕСТЬNULL(СтруктурныеЕдиницы.id_TT, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|	И ЕСТЬNULL(Номенклатура.id_tov, 0) <> 0
	//+++АК KIRN 2018.03.20  ИП-00018177 
	//|	И Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN  
	|";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТекстИДТТ = "";
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИДТТ = ТекстИДТТ + "," + Формат(Выборка.id_tt, "ЧГ=");
	КонецЦикла;
	ТекстИДТТ = Сред(ТекстИДТТ, 2); 
	ТекстИДТоваров = "";
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИДТоваров = ТекстИДТоваров + "," + Формат(Выборка.id_tov, "ЧГ=");
	КонецЦикла;
	ТекстИДТоваров = Сред(ТекстИДТоваров, 2);
	СтруктураПараметров.Вставить("ТекстИДТТ", 		ТекстИДТТ);
	СтруктураПараметров.Вставить("ТекстИДТоваров",  ТекстИДТоваров);
КонецПроцедуры

//+++АК SHEP 2018.05.04 ИП-00018421
// В таблицу IzbenkaFin.dbo._InfoRg5947 выгружаются товары, которые только в ассортименте, те выведенные товары не выгружаются
// предлагаю выгружать еще и выведенные товары из тт, но у которых есть остаток. q_plan_pr выгружать строго 0.
// Основной запрос при подготовке данных для распределения по торговым точкам
Функция ПолучитьТекстКоманды_ПодготовкаДанныхДляРаспределения_18421(СтруктураПараметров)
	
	//+++АК MIND 2017.12.22 пока что здесь вызов не нужен, он происходит на более раннем этапе
	//+++АК MIND 2017.12.17 заглушка на случай различных косяков с ассортиментом алкоголя
	//есть магазины где алкоголем торговать нельзя, выведем из ассортимента все косячные позиции
	//ВывестиИзАссортиментаАлкогольГдеНельзяТорговать();
	//---АК MIND
	
	Number_r = СтруктураПараметров.ТекстНомер_Р;
	
	//Минеев оптимизация
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТТ", СтруктураПараметров.СписокТорговыхТочек);
	Запрос.УстановитьПараметр("Товары"	, СтруктураПараметров.СписокНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.id_TT
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СписокТТ)
	|	И ЕСТЬNULL(СтруктурныеЕдиницы.id_TT, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|	И ЕСТЬNULL(Номенклатура.id_tov, 0) <> 0
	//+++АК KIRN 2018.03.20  ИП-00018177 
	//|	И Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN  
	|";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТекстИДТТ = "";
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИДТТ = ТекстИДТТ + "," + Формат(Выборка.id_tt, "ЧГ=");
	КонецЦикла;
	ТекстИДТТ = Сред(ТекстИДТТ, 2); 
	ТекстИДТоваров = "";
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИДТоваров = ТекстИДТоваров + "," + Формат(Выборка.id_tov, "ЧГ=");
	КонецЦикла;
	ТекстИДТоваров = Сред(ТекстИДТоваров, 2);
	
	//ТекстИДТТ = "";
	//Для Каждого ЭлементСписка Из СтруктураПараметров.СписокТорговыхТочек Цикл
	//	ТекстИДТТ = ТекстИДТТ + "," + Формат(ЭлементСписка.Значение.id_tt, "ЧГ=");
	//КонецЦикла;
	//ТекстИДТТ = Сред(ТекстИДТТ, 2); 
	//ТекстИДТоваров = "";
	//Для Каждого ЭлементСписка Из СтруктураПараметров.СписокНоменклатуры Цикл
	//	ТекстИДТоваров = ТекстИДТоваров + "," + Формат(ЭлементСписка.Значение.id_tov, "ЧГ=");
	//КонецЦикла;
	//ТекстИДТоваров = Сред(ТекстИДТоваров, 2); 
	
	Возврат
		"Declare @Number_r integer, @err int = 1, @ost_sled_dnem int = 0, @IDR_Raschetchik binary(16), @IDR_Sklad binary(16), @IDR_Den_Raspr binary(16), @DateFactOst datetime, @DateRaspr datetime, @DatePostupleniya datetime, @DateOstSklad datetime
		|
		|Set @Number_r = " + Number_r + "							-- текущий номер распределения
		|Set @ost_sled_dnem = " + ?(СтруктураПараметров.ОстаткиСледДнем, "1", "0") + "
        |
		|Set @DateOstSklad = DateAdd(YEAR, 2000, CASE WHEN @ost_sled_dnem = 0 THEN GETDATE() ELSE DateAdd(Day, 1, GETDATE()) END)
		|declare @mes nvarchar(max)
        |
		|If OBJECT_ID('tempdb..#VTProizvoditeli') is not null		Drop Table #VTProizvoditeli
		|If OBJECT_ID('tempdb..#VTKolVUpakovke') is not null		Drop Table #VTKolVUpakovke
		|If OBJECT_ID('tempdb..#VTOstatkiNaSklade') is not null		Drop Table #VTOstatkiNaSklade
		|If OBJECT_ID('tempdb..#VTOstatkiVZale') is not null		Drop Table #VTOstatkiVZale
		|If OBJECT_ID('tempdb..#VTOstatkiNaSklade_1') is not null	Drop Table #VTOstatkiNaSklade_1
		|If OBJECT_ID('tempdb..#VTOstatkiNaSklade_2') is not null	Drop Table #VTOstatkiNaSklade_2
		|If OBJECT_ID('tempdb..#VT_tovary_post_tt') is not null		Drop Table #VT_tovary_post_tt
		|If OBJECT_ID('tempdb..#VTPostAndTov_skladir') is not null	Drop Table #VTPostAndTov_skladir
		|If OBJECT_ID('tempdb..#VTPostAndTov_neskladir') is not null Drop Table #VTPostAndTov_neskladir
		//|If OBJECT_ID('tempdb..#VT_Predyd_Raspred') is not null		Drop Table #VT_Predyd_Raspred
		|If OBJECT_ID('tempdb..#VTPostTov') is not null				Drop Table #VTPostTov
		|If OBJECT_ID('tempdb..#VT_Ceny') is not null				Drop Table #VT_Ceny
		|If OBJECT_ID('tempdb..#VT_Zamenyaemye_Analogi') is not null Drop Table #VT_Zamenyaemye_Analogi
		|If OBJECT_ID('tempdb..#VT_FactOst_Prochiye') is not null 	Drop Table #VT_FactOst_Prochiye
		|If OBJECT_ID('tempdb..#VT_Analogi') is not null			Drop Table #VT_Analogi
		|If OBJECT_ID('tempdb..#VT_PolnyeAnalogi') is not null 		Drop Table #VT_PolnyeAnalogi
		|If OBJECT_ID('tempdb..#VT_SostavKomplekta') is not null 	Drop Table #VT_SostavKomplekta
		|If OBJECT_ID('tempdb..#VT_TovaryKomplektov') is not null 	Drop Table #VT_TovaryKomplektov
		|If OBJECT_ID('tempdb..#VT_PolnyeAnalogi_Cut') is not null	Drop Table #VT_PolnyeAnalogi_Cut
		|If OBJECT_ID('tempdb..#VT_Osnovnaya') is not null			Drop Table #VT_Osnovnaya
		|If OBJECT_ID('tempdb..#TovaryPoAkcii') is not null			Drop Table #TovaryPoAkcii
		|If OBJECT_ID('tempdb..#M2_tov') is not null				Drop Table #M2_tov
		|If OBJECT_ID('tempdb..#M2_tov_kontr') is not null			Drop Table #M2_tov_kontr
		|If OBJECT_ID('tempdb..#M2_raspr_zadanie_tt') is not null	Drop Table #M2_raspr_zadanie_tt
		|If OBJECT_ID('tempdb..#M2_tov_kontr_date') is not null		Drop Table #M2_tov_kontr_date
		|If OBJECT_ID('tempdb..#M2_tt_tov_kontr') is not null		Drop Table #M2_tt_tov_kontr
		|If OBJECT_ID('tempdb..#TT_id_zon') is not null				Drop Table #TT_id_zon
		|If OBJECT_ID('tempdb..#VTRashod_Fact') is not null			Drop Table #VTRashod_Fact
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	@DateRaspr = DateAdd(YEAR, 2000, Raspr_zadanie.Date_r),							-- дата распределения
		|	@DateFactOst = DateAdd(YEAR, 2000, DateAdd(Day, -1, Raspr_zadanie.Date_r)),		-- дата фактических остатков
		|	@DatePostupleniya = DateAdd(YEAR, 2000, DateAdd(Day, 1, Raspr_zadanie.Date_r)),	-- дата поступления
		|	@IDR_Raschetchik = Raspr_zadanie._Fld4908RRef,									-- ID расчетчика
		|	@IDR_Sklad = spr_stred._IDRRef,													-- ID склада
		|	@IDR_Den_Raspr = dni_nedeli._IDRRef												-- ID дня недели
		|From M2..Raspr_zadanie as Raspr_zadanie (nolock)
		| Left Outer Join IzbenkaFin.._Reference42 as spr_stred (nolock)
		| On spr_stred._Fld758 = Raspr_zadanie.id_sklad
		| Left Outer Join IzbenkaFin.._Enum2373 as dni_nedeli (nolock)
		| On dni_nedeli._EnumOrder + 1 = CAST(DATEPART(weekday, Raspr_zadanie.Date_r) AS numeric(10,0))
		|Where
		|	Raspr_zadanie.Number_r = @Number_r
		|	
		|-----------------------------------------------------------------------------------------------
		|Select
		|	RegZnach_Svoistv._Fld394_RRRef as Harakteristika,
		|	SprKontr._Fld1159 as id_kontr
		|Into #VTProizvoditeli
		|From IzbenkaFin.._InfoRg393 as RegZnach_Svoistv (nolock)
		| Inner Join IzbenkaFin.._Reference27 as SprKontr (nolock)				-- производитель
		| On SprKontr._IDRRef = RegZnach_Svoistv._Fld396_RRRef
		|Where
		|	RegZnach_Svoistv._Fld395RRef = 0x9B0FBEA8EE4FEDDB4CAF6656F51808B7   -- свойство <Производитель>
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	SprTovary._IDRRef as Tovar,
		|	Max(CASE
		|			WHEN SprTovary._Fld239 = 1 THEN
		|			 CASE
		|				WHEN ISNULL(Kol_V_Korobke.Kol, 0) = 0 THEN RegZnach_Svoistv._Fld396_N
		|				ELSE Kol_V_Korobke.Kol
		|			 END
		|			ELSE
		|			 CASE
		|				WHEN ISNULL(Kol_V_Korobke.Kol, 0) = 0 THEN CAST(RegZnach_Svoistv._Fld396_N as Numeric(15,0))
		|				ELSE CAST(Kol_V_Korobke.Kol as Numeric(15,0))
		|			 END
		|		END) as Kol
		|Into #VTKolVUpakovke
		|From #VTProizvoditeli as VTProizvoditeli (nolock)
		| Left Outer Join IzbenkaFin.._InfoRg393 as RegZnach_Svoistv (nolock)
		| On VTProizvoditeli.Harakteristika = RegZnach_Svoistv._Fld394_RRRef
		|	 and RegZnach_Svoistv._Fld395RRef = 0x8C82DC746C8468B545B618EC1DACAEE4   	-- свойство <Количество в упаковке>
		| Inner Join IzbenkaFin.dbo._Reference2539 as Spr_Har (nolock)
		| On Spr_Har._IDRRef = VTProizvoditeli.Harakteristika
		| Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| On SprTovary._IDRRef = Spr_Har._OwnerIDRRef
		|	 And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		| Left Outer Join
		|	(Select
		|		Reg_KolVKorobke._Fld5577RRef as Har,
		|		Reg_KolVKorobke._Fld5578 as Kol
		|	 From IzbenkaFin.._InfoRg5575 as Reg_KolVKorobke (nolock)
		|	  Inner Join(
		|		Select
		|			Reg_KolVKorobke._Fld5577RRef as Har,
		|			MAX(Reg_KolVKorobke._Period) as _Period
		|		From IzbenkaFin.._InfoRg5575 as Reg_KolVKorobke (nolock)
		|		Where
		|			Reg_KolVKorobke._Fld6243RRef = @IDR_Sklad
		//|			And Reg_KolVKorobke._Period < @DateOstSklad
		|		Group by
		|			Reg_KolVKorobke._Fld5577RRef) as MaxPeriody
		|	  On Reg_KolVKorobke._Fld5577RRef = MaxPeriody.Har
		|		And Reg_KolVKorobke._Period = MaxPeriody._Period
		|		And Reg_KolVKorobke._Fld6243RRef = @IDR_Sklad
		|	  Inner Join IzbenkaFin.dbo._Reference2539 as Spr_Har_2 (nolock)
		|	  On Spr_Har_2._IDRRef = Reg_KolVKorobke._Fld5577RRef
		|		And Spr_Har_2._Fld6268 = 1
		|		And Spr_Har_2._Fld5138 = 0
		|	 Where
		|		Reg_KolVKorobke._Fld6243RRef = @IDR_Sklad
		|		And not Reg_KolVKorobke._Fld5578 = 0) as Kol_V_Korobke
		| On Kol_V_Korobke.Har = RegZnach_Svoistv._Fld394_RRRef
		|Where Spr_Har._Fld5138 = 0
		|Group by
		|	VTProizvoditeli.id_kontr,
		|	SprTovary._IDRRef
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	a.tovar as tovar,
		|	SprTovary._Fld5188 as skladir,
		|	SprTovary._Fld3479 as _ne_po_har,
		|	a.har as har,
		|	CASE
		|		WHEN SprTovary._Fld5188 = 1 THEN a.data_proizvodstva
		|		ELSE @DateRaspr
		|	END as data_proizvodstva,
		|	SUM(a.kol) as kol
		|Into #VTOstatkiNaSklade
		|From (
		|	Select
		|		ostatki._Fld3247RRef as tovar,
		|		ostatki._Fld3248RRef as har,
		|		ostatki._Fld5200 as data_proizvodstva,
		|		SUM(ostatki._Fld3250) as kol
		|	From IzbenkaFin.._AccumRgT3252 as ostatki (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = ostatki._Fld3246RRef
		|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		|		And Spr_Sklady._Fld3349RRef = 0x82E78E1B537199464DCC4500C55630FF			-- вид склада = Оптовый
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = ostatki._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		ostatki._Period = '59991101'
		|	Group by
		|		ostatki._Fld3247RRef,
		|		ostatki._Fld3248RRef,
		|		ostatki._Fld5200
		//|	Union all
		//|	Select
		//|		ostatki._Fld7256RRef,
		//|		ostatki._Fld7257RRef,
		//|		ostatki._Fld7258,											-- отнимаются остатки по заданиям на перемещение
		//|		SUM(-ostatki._Fld7259)
		//|	From IzbenkaFin.._AccumRgT7261 as ostatki (nolock)
		//|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		//|	 On SprTovary._IDRRef = ostatki._Fld7256RRef
		//|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		//|	 Inner Join IzbenkaFin.._Document7234 as Doc_Zadanie (nolock)				
		//|	 On Doc_Zadanie._IDRRef = ostatki._Fld7255RRef
		//|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		//|	 On Spr_Sklady._IDRRef = Doc_Zadanie._Fld7235RRef
		//|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		//|	Where
		//|		ostatki._Period = '59991101'
		//|	Group by
		//|		ostatki._Fld7256RRef,
		//|		ostatki._Fld7257RRef,
		//|		ostatki._Fld7258
		|	Union all
		|	Select
		|		Reg_Tovary._Fld3247RRef,
		|		Reg_Tovary._Fld3248RRef,
		|		Reg_Tovary._Fld5200,
		|		SUM(CASE WHEN Reg_Tovary._RecordKind = 0 THEN -Reg_Tovary._Fld3250 ELSE Reg_Tovary._Fld3250 END)
		|	From IzbenkaFin.._AccumRg3245 as Reg_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = Reg_Tovary._Fld3246RRef
		|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		|		And Spr_Sklady._Fld3349RRef = 0x82E78E1B537199464DCC4500C55630FF			-- вид склада = Оптовый
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = Reg_Tovary._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		Reg_Tovary._Period >= @DateOstSklad
		|	Group by
		|		Reg_Tovary._Fld3247RRef,
		|		Reg_Tovary._Fld3248RRef,
		|		Reg_Tovary._Fld5200
		//|	Union all
		//|	Select
		//|		Reg_Zadaniya._Fld7256RRef,
		//|		Reg_Zadaniya._Fld7257RRef,
		//|		Reg_Zadaniya._Fld7258,
		//|		SUM(CASE WHEN Reg_Zadaniya._RecordKind = 0 THEN Reg_Zadaniya._Fld7259 ELSE -Reg_Zadaniya._Fld7259 END)
		//|	From IzbenkaFin.._AccumRg7254 as Reg_Zadaniya (nolock)
		//|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		//|	 On SprTovary._IDRRef = Reg_Zadaniya._Fld7256RRef
		//|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		//|	 Inner Join IzbenkaFin.._Document7234 as Doc_Zadanie (nolock)				
		//|	 On Doc_Zadanie._IDRRef = Reg_Zadaniya._Fld7255RRef
		//|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		//|	 On Spr_Sklady._IDRRef = Doc_Zadanie._Fld7235RRef
		//|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		//|	Where
		//|		Reg_Zadaniya._Period >= @DateOstSklad
		//|	Group by
		//|		Reg_Zadaniya._Fld7256RRef,
		//|		Reg_Zadaniya._Fld7257RRef,
		//|		Reg_Zadaniya._Fld7258
		|		) as a
		| Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| On SprTovary._IDRRef = a.tovar
		|Group by
		|	a.tovar,
		|	SprTovary._Fld5188,
		|	SprTovary._Fld3479,
		|	a.har,
		|	CASE
		|		WHEN SprTovary._Fld5188 = 1 THEN a.data_proizvodstva
		|		ELSE @DateRaspr
		|	END
		|Having
		|	not SUM(a.kol) = 0
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	a.id_zal as id_zal,
		|	a.id_tov as id_tov,
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	SUM(a.kol) as q_ost_zal
		|Into #VTOstatkiVZale
		|From (
		|	Select
		|		Spr_Sklady._Fld3393 as id_zal,
		|		SprTovary._Fld760 as id_tov,
		|		ostatki._Fld3248RRef as har,
		|		SUM(ostatki._Fld3250) as kol
		|	From IzbenkaFin.._AccumRgT3252 as ostatki (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = ostatki._Fld3246RRef
		|		And Spr_Sklady._Fld7649 = 1												-- это зал сборки
		|	 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		|	 On Spr_StrEd._IDRRef = Spr_Sklady._OwnerIDRRef
		|		And Spr_StrEd._Fld758 in (" + Формат(СтруктураПараметров.Склад.id_tt, "ЧГ=") + ")	-- склад, с которого распределеяется товар
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = ostatki._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		ostatki._Period = '59991101'
		|	Group by
		|		Spr_Sklady._Fld3393,
		|		SprTovary._Fld760,
		|		ostatki._Fld3248RRef
		|	Union all
		|	Select
		|		Spr_Sklady._Fld3393,
		|		SprTovary._Fld760,
		|		Reg_Tovary._Fld3248RRef,
		|		SUM(CASE WHEN Reg_Tovary._RecordKind = 0 THEN -Reg_Tovary._Fld3250 ELSE Reg_Tovary._Fld3250 END)
		|	From IzbenkaFin.._AccumRg3245 as Reg_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = Reg_Tovary._Fld3246RRef
		|		And Spr_Sklady._Fld7649 = 1												-- это зал сборки
		|	 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		|	 On Spr_StrEd._IDRRef = Spr_Sklady._OwnerIDRRef
		|		And Spr_StrEd._Fld758 in (" + Формат(СтруктураПараметров.Склад.id_tt, "ЧГ=") + ")
		|	 Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		|	 On SprTovary._IDRRef = Reg_Tovary._Fld3247RRef
		|		And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
		|	Where
		|		Reg_Tovary._Period >= @DateOstSklad
		|	Group by
		|		Spr_Sklady._Fld3393,
		|		SprTovary._Fld760,
		|		Reg_Tovary._Fld3248RRef) as a
		| Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| On VTProizvoditeli.Harakteristika = a.har
		|Group by
		|	a.id_zal,
		|	a.id_tov,
		|	VTProizvoditeli.id_kontr
		|Having
		|	not SUM(a.kol) = 0
		| 
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	VTOstatkiNaSklade.Tovar as Tovar,
		|	0 as _ne_po_har,
		|	SUM(VTOstatkiNaSklade.kol) as Kol
		|Into #VTOstatkiNaSklade_1
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		| Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| On VTProizvoditeli.Harakteristika = VTOstatkiNaSklade.har
		|Where
		|	VTOstatkiNaSklade._ne_po_har = 0
		|Group by
		|	VTProizvoditeli.id_kontr,
		|	VTOstatkiNaSklade.Tovar	
		|Union All
		|Select
		|	0,
		|	VTOstatkiNaSklade.Tovar,
		|	1,
		|	SUM(VTOstatkiNaSklade.kol)
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		|Where
		|	VTOstatkiNaSklade._ne_po_har = 1
		|Group by
		|	VTOstatkiNaSklade.Tovar
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	VTOstatkiNaSklade.Tovar as Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva as data_proizvodstva,
		|	0 as _ne_po_har,
		|	SUM(VTOstatkiNaSklade.kol) as Kol
		|Into #VTOstatkiNaSklade_2
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		| Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| On VTProizvoditeli.Harakteristika = VTOstatkiNaSklade.har
		|Where
		|	VTOstatkiNaSklade.skladir = 1
		|	And VTOstatkiNaSklade._ne_po_har = 0
		|Group by
		|	VTProizvoditeli.id_kontr,
		|	VTOstatkiNaSklade.Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva	
		|Union All
		|Select
		|	0,
		|	VTOstatkiNaSklade.Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva,
		|	1,
		|	SUM(VTOstatkiNaSklade.kol)
		|From #VTOstatkiNaSklade as VTOstatkiNaSklade
		|Where
		|	VTOstatkiNaSklade.skladir = 1
		|	And VTOstatkiNaSklade._ne_po_har = 1
		|Group by
		|	VTOstatkiNaSklade.Tovar,
		|	VTOstatkiNaSklade.data_proizvodstva
        |
		//+++АК SHEP 2018.05.04 ИП-00018421: вынес РегистрСведений.ТоварныйАссортиментТочекСрезПоследних во временную таблицу
		|-----------------------------------------------------------------------------------------------
		|If OBJECT_ID('tempdb..#Tov_Assortiment_MaxPeriody') is not null	Drop Table #Tov_Assortiment_MaxPeriody
		|
		|Select
		|	Tov_Assortiment._Fld3958RRef,
		|	Tov_Assortiment._Fld3959RRef,
		|	SprTovary._Fld760 as id_tov,
		|	SprTovary._Fld4120RRef as koef_zakaza,
		|	SprTovary._Fld5188 as skladir,
		|	Spr_StrEd._Fld758 as id_TT,
		|	Max(Tov_Assortiment._Period) as _Period
		|INTO #Tov_Assortiment_MaxPeriody
		|From IzbenkaFin.dbo._InfoRg3957 as Tov_Assortiment (nolock)
		| Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
		| On SprTovary._IDRRef = Tov_Assortiment._Fld3959RRef
		|	And SprTovary._Fld760 in (" + ТекстИДТоваров + ")		-- список id_tov
		| Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| On Spr_StrEd._IDRRef = Tov_Assortiment._Fld3958RRef
		|	And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")			-- список id_ТТ
		|Where
		|	Tov_Assortiment._Period < @DatePostupleniya 
		|Group By
		|	Tov_Assortiment._Fld3958RRef,
		|	Tov_Assortiment._Fld3959RRef,
		|	SprTovary._Fld760,
		|	SprTovary._Fld4120RRef,
		|	SprTovary._Fld5188,
		|	Spr_StrEd._Fld758
		|-----------------------------------------------------------------------------------------------
		// рассчитываем остатки по ТТ
		|if OBJECT_ID('tempdb..#ostatki_tt_tov_currdate') is not null drop table #ostatki_tt_tov_currdate
		|create table #ostatki_tt_tov_currdate(id_tov int, id_tt int, kol real)
		|declare @tbl varchar(36)
		|     ,@SQL varchar(max)
		|SET @tbl = REPLACE(NEWID(),'-','_')
		|exec M2..[ostatki_tt_tov_currdate] '" + ТекстИДТоваров + "', '" + ТекстИДТТ + "', 0, @tbl
		|SET @SQL = '
		|select id_tov, id_tt, kol
		|from ##'+@tbl+'
		|where kol != 0
		|drop table ##'+@tbl
		|insert into #ostatki_tt_tov_currdate (id_tov, id_tt, kol)
		|EXEC (@SQL)

		//|select * from #ostatki_tt_tov_currdate
		//---АК SHEP 2018.05.18
		|-----------------------------------------------------------------------------------------------
		|Select
		|	Tov_Assortiment._Fld3958RRef as TT,
		|	Tov_Assortiment._Fld3959RRef as Tovar,
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	Tov_Assortiment._Fld3960RRef as har,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	Tov_Assortiment._Fld3961 as Vyvedena,
		//---АК SHEP 2018.05.04
		|	MaxPeriody.id_tov as id_tov,
		|	MaxPeriody.koef_zakaza as koef_zakaza,
		|	MaxPeriody.skladir as skladir
		|Into #VT_tovary_post_tt
		|From IzbenkaFin.dbo._InfoRg3957 as Tov_Assortiment (nolock)
		|	Inner Join #Tov_Assortiment_MaxPeriody as MaxPeriody
		|	On MaxPeriody._Fld3958RRef = Tov_Assortiment._Fld3958RRef
		|		And MaxPeriody._Fld3959RRef = Tov_Assortiment._Fld3959RRef
		|		And MaxPeriody._Period = Tov_Assortiment._Period
		|	Inner Join #VTProizvoditeli as VTProizvoditeli
		|	On VTProizvoditeli.Harakteristika = Tov_Assortiment._Fld3960RRef
		|Where
		|	Tov_Assortiment._Fld3961 = 0
       	|
		//+++АК SHEP 2018.05.04 ИП-00018421
		|UNION ALL
		|
		|Select
		|	Tov_Assortiment._Fld3958RRef as TT,
		|	Tov_Assortiment._Fld3959RRef as Tovar,
		|	VTProizvoditeli.id_kontr as id_kontr,
		|	Tov_Assortiment._Fld3960RRef as har,
		|	Tov_Assortiment._Fld3961 as Vyvedena,
		|	MaxPeriody.id_tov as id_tov,
		|	MaxPeriody.koef_zakaza as koef_zakaza,
		|	MaxPeriody.skladir as skladir
		|From IzbenkaFin.dbo._InfoRg3957 as Tov_Assortiment (nolock)
		|	Inner Join #Tov_Assortiment_MaxPeriody as MaxPeriody
		|	On MaxPeriody._Fld3958RRef = Tov_Assortiment._Fld3958RRef
		|		And MaxPeriody._Fld3959RRef = Tov_Assortiment._Fld3959RRef
		|		And MaxPeriody._Period = Tov_Assortiment._Period
		|	Inner Join #VTProizvoditeli as VTProizvoditeli
		|		On VTProizvoditeli.Harakteristika = Tov_Assortiment._Fld3960RRef
		|	Inner Join #ostatki_tt_tov_currdate as ostatki_tt_tov_currdate
		|		On MaxPeriody.id_tov = ostatki_tt_tov_currdate.id_tov
		|		AND MaxPeriody.id_TT = ostatki_tt_tov_currdate.id_TT
		|Where
		|	Tov_Assortiment._Fld3961 = 1
		|
		|If OBJECT_ID('tempdb..#Tov_Assortiment_MaxPeriody') is not null	Drop Table #Tov_Assortiment_MaxPeriody
		//---АК SHEP 2018.05.04
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VT_tovary_post_tt.TT as TT,
		|	VT_tovary_post_tt.Tovar as Tovar,
		|	VT_tovary_post_tt.id_kontr as id_kontr,
		|	VT_tovary_post_tt.har as har,
		|	VT_tovary_post_tt.id_tov as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	VT_tovary_post_tt.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|	VT_tovary_post_tt.koef_zakaza as koef_zakaza
		|Into #VTPostAndTov_skladir
		|From #VT_tovary_post_tt as VT_tovary_post_tt (nolock)
		|	Inner Join IzbenkaFin.._InfoRg2921 as Reg_GrafikRazvoza (nolock)
		|	On Reg_GrafikRazvoza._Fld2923RRef = @IDR_Sklad
		|		And ((@IDR_Den_Raspr = 0xA161C3BAE7168EF749FEC392AF2F2228
		|				And Reg_GrafikRazvoza._Fld2924 = 1)
		|			Or (@IDR_Den_Raspr = 0x8FA0BE5835D783AB45DAF96F9DE8CB30
		|				And Reg_GrafikRazvoza._Fld2925 = 1)
		|			Or (@IDR_Den_Raspr = 0xBC007F60F939A1F14AA8604C136E5AFB
		|				And Reg_GrafikRazvoza._Fld2926 = 1)
		|			Or (@IDR_Den_Raspr = 0xA039799A37320FE943BCE3C86961CB6C
		|				And Reg_GrafikRazvoza._Fld2927 = 1)
		|			Or (@IDR_Den_Raspr = 0x9D67FE953277742E412C4168A12978D3
		|				And Reg_GrafikRazvoza._Fld2928 = 1)
		|			Or (@IDR_Den_Raspr = 0xAE567E8B0CEA3A52431EA4D53AC3C8F5
		|				And Reg_GrafikRazvoza._Fld2929 = 1)
		|			Or (@IDR_Den_Raspr = 0x87FAFB472163AF854BF2E1AEECCFC2F5
		|				And Reg_GrafikRazvoza._Fld2930 = 1))
		|Where
		|	VT_tovary_post_tt.skladir = 1										-- складируемая
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	Poryadok_Obespecheniya.TT as TT,
		|	SprGrafiki_Tovary._Fld3487RRef as Tovar,
		|	SprKontr._Fld1159 as id_kontr,
		|	VT_tovary_post_tt.har as har,
		|	SprTovary._Fld760 as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	VT_tovary_post_tt.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|	SprTovary._Fld4120RRef as koef_zakaza
		|Into #VTPostAndTov_neskladir
		|From IzbenkaFin.._Reference3482_VT3485 as SprGrafiki_Tovary (nolock)	-- товары графика
		| Inner Join IzbenkaFin.._Reference3482 as SprGrafiki (nolock)
		| On SprGrafiki._IDRRef = SprGrafiki_Tovary._Reference3482_IDRRef
		| Inner Join (
		|	Select Distinct														-- график
		|		SprGrafiki_Grafik._Reference3482_IDRRef as _Reference3482_IDRRef,
		|		SprGrafiki_Grafik._Fld3491RRef as _Fld3491RRef
		|	From IzbenkaFin.._Reference3482_VT3488 as SprGrafiki_Grafik (nolock)) as SprGrafiki_Grafik
		| On SprGrafiki_Grafik._Reference3482_IDRRef = SprGrafiki_Tovary._Reference3482_IDRRef
		|	And SprGrafiki_Grafik._Fld3491RRef = @IDR_Den_Raspr
		| Inner Join IzbenkaFin.._Reference27 as SprKontr (nolock)				-- владелец графика (поставщик)
		| On SprKontr._IDRRef = SprGrafiki._OwnerIDRRef
		| Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| On SprTovary._IDRRef = SprGrafiki_Tovary._Fld3487RRef
		|	And SprTovary._Fld760 in (" + ТекстИДТоваров + ")					-- список id_tov
		|	And SprTovary._Fld5188 = 0											-- нескладируемая
		| Inner Join(
		|	Select
		|		Por_Obespecheniya._Fld2726RRef as TT,
		|		Por_Obespecheniya._Fld5207RRef as GruppaURZ
		|	From IzbenkaFin.._InfoRg2725 as Por_Obespecheniya (nolock)
		|	 Inner Join(
		|		Select
		|			Por_Obespecheniya_._Fld2726RRef as TT,
		|			Por_Obespecheniya_._Fld5207RRef as GruppaURZ,
		|			MAX(Por_Obespecheniya_._Period) as _Period
		|		From IzbenkaFin.._InfoRg2725 as Por_Obespecheniya_ (nolock)
		|		 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		|		 On Spr_StrEd._IDRRef = Por_Obespecheniya_._Fld2726RRef
		|			And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")				-- список id_ТТ
		|		Where
		|			Por_Obespecheniya_._Period < @DatePostupleniya
		|		Group by
		|			Por_Obespecheniya_._Fld2726RRef,
		|			Por_Obespecheniya_._Fld5207RRef) as Max_Periody_2
		|	 On Max_Periody_2.TT = Por_Obespecheniya._Fld2726RRef
		|		And Max_Periody_2.GruppaURZ = Por_Obespecheniya._Fld5207RRef
		|		And Max_Periody_2._Period = Por_Obespecheniya._Period
		|	Where
		|		Por_Obespecheniya._Fld2728RRef = @IDR_Sklad) as Poryadok_Obespecheniya
		| On Poryadok_Obespecheniya.GruppaURZ = SprTovary._Fld5162RRef
		| Inner Join #VT_tovary_post_tt as VT_tovary_post_tt
		| On VT_tovary_post_tt.TT = Poryadok_Obespecheniya.TT
		|	And VT_tovary_post_tt.Tovar = SprGrafiki_Tovary._Fld3487RRef
		|	And VT_tovary_post_tt.id_kontr = SprKontr._Fld1159
		|Where
		|	SprGrafiki._Fld3483RRef = @IDR_Sklad
		|	And SprGrafiki._Marked = 0
        |
		|---------------------------------------------------------------------------------------------
		|Select
		|    b.ref_tov as tov_Zadvoen,
		|    a.ref_tov as ref_tov,
		|    a.id_tov as id_tov_Osnovn
		|Into #VT_Zamenyaemye_Analogi
		|From
		|   (Select
		|        tr._Fld6045RRef as ref_tov,
		|        a._IDRRef,
		|        t1.id_tov as id_tov,
		|        tr._LineNo6044,
		|        Row_Number() Over (Partition by a._IDRRef Order by tr._LineNo6044) as rn
		|	From izbenkafin.._Reference6042 as a (nolock)
		|	 Inner Join izbenkafin.._Reference6042_VT6043 as tr (nolock)
		|	 ON tr._Reference6042_IDRRef = a._IDRRef
		| 	 Inner Join M2..Tovari as t1
		| 	 On t1.Ref = tr._Fld6045RRef
		|	Where
		|	    a._Fld7463 = 1) as a
		| Inner Join
		|   (Select
		|        tr._Fld6045RRef as ref_tov,
		|        a._IDRRef,
		|        t2.id_tov as id_tov,
		|        tr._LineNo6044,
		|        Row_Number() Over (Partition by a._IDRRef Order by tr._LineNo6044) as rn
		|	From izbenkafin.._Reference6042 as a (nolock)
		|	 Inner Join izbenkafin.._Reference6042_VT6043 as tr (nolock)
		|	 ON tr._Reference6042_IDRRef = a._IDRRef
		| 	 Inner Join M2..Tovari as t2
		| 	 On t2.Ref = tr._Fld6045RRef
		|	Where
		|		a._Fld7463 = 1) as b
		| On a._IDRRef = b._IDRRef
		|	And a.rn = 1
		|	And b.rn > 1
		|	And (a.id_tov in (" + ТекстИДТоваров + ")
		|		 Or b.id_tov in (" + ТекстИДТоваров + "))
        |
 		|---------------------------------------------------------------------------------------------
		|Select
 		|	Reg_FactOstTT._Fld3196RRef as TT,
 		|	Reg_FactOstTT._Fld3197RRef as Tovar,
	  	|	t1.id_tov as id_tov
 		|Into #VT_FactOst_Prochiye
      	|From IzbenkaFin.._InfoRg3194 as Reg_FactOstTT (nolock) -- РегистрСведений.ФактическиеОстаткиТоваров
		| Inner Join M2..Tovari as t1
		| On t1.Ref = Reg_FactOstTT._Fld3197RRef
		| 	 And t1.id_tov in (" + ТекстИДТоваров + ")
		| Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| On Spr_StrEd._IDRRef = Reg_FactOstTT._Fld3196RRef
		|	 And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")			-- список id_ТТ
		| Left Outer Join #VTPostAndTov_skladir as VTPostAndTov_skladir
		| On VTPostAndTov_skladir.Tovar = Reg_FactOstTT._Fld3197RRef
		| 	 And VTPostAndTov_skladir.TT = Reg_FactOstTT._Fld3196RRef
		| Left Outer Join #VTPostAndTov_neskladir as VTPostAndTov_neskladir
		| On VTPostAndTov_neskladir.Tovar = Reg_FactOstTT._Fld3197RRef
		| 	 And VTPostAndTov_neskladir.TT = Reg_FactOstTT._Fld3196RRef
		|Where
		|	Reg_FactOstTT._Fld3195 = @DateFactOst
		|	And Not Reg_FactOstTT._Fld3198 = 0
		|	And VTPostAndTov_skladir.Tovar is null
		|	And VTPostAndTov_neskladir.Tovar is null
		|Group by
  		|	Reg_FactOstTT._Fld3196RRef,
 		|	Reg_FactOstTT._Fld3197RRef,
	  	|	t1.id_tov
        |
		|-----------------------------------------------------------------------------------------------
 		|Select
		|	TovaryAnalogov._Fld6045RRef as Tovar,
		|	MIN(Analogi._IDRRef) as Analog
		|Into #VT_Analogi
		|From izbenkafin.._Reference6042_VT6043 as TovaryAnalogov (nolock)
		| Inner Join izbenkafin.._Reference6042 as Analogi (nolock)
		| On Analogi._IDRRef = TovaryAnalogov._Reference6042_IDRRef
		| 	And Analogi._Fld7463 = 1
		| 	And Analogi._Marked = 0
		|Group by
		|	TovaryAnalogov._Fld6045RRef
        |
 		|---------------------------------------------------------------------------------------------
		|Select
 		|	VT_FactOst_Prochiye.TT as TT,
 		|	VT_FactOst_Prochiye.Tovar as Tovar,
 		|	TovaryAnalogov.Analog as Analog,
	  	|	VT_FactOst_Prochiye.id_tov as id_tov,
 		|	MIN(SprHar._IDRRef) as har
 		|Into #VT_PolnyeAnalogi
      	|From #VT_FactOst_Prochiye as VT_FactOst_Prochiye (nolock)
		| Left Outer Join IzbenkaFin.._Reference2539 as SprHar (nolock)
		| On SprHar._OwnerIDRRef = VT_FactOst_Prochiye.Tovar
		| 	 And SprHar._Fld5138 = 0
		| 	 And SprHar._Marked = 0
		| Left Outer Join #VT_Analogi as TovaryAnalogov
		| On TovaryAnalogov.Tovar = VT_FactOst_Prochiye.Tovar
		|Where
		|	TovaryAnalogov.Tovar is not null
		|Group by
  		|	VT_FactOst_Prochiye.TT,
 		|	VT_FactOst_Prochiye.Tovar,
 		|	TovaryAnalogov.Analog,
	  	|	VT_FactOst_Prochiye.id_tov
        |
 		|---------------------------------------------------------------------------------------------
        |Select
      	|	Reg_SostavKomplekta._Fld7931RRef as HarKomplekt,
      	|	Reg_SostavKomplekta._Fld7941RRef as HarSostavl,
      	|	Reg_SostavKomplekta._Fld8183RRef as Komplekt,
      	|	Reg_SostavKomplekta._Fld8184RRef as TovarKomplekta,
      	|	Case When t1.Ref is not null Then 1 Else 0 End as v_Komplekt,
      	|	Case When t2.Ref is not null Then 1 Else 0 End as v_TovarKomplekta,
      	|	t1.id_tov as id_tov_Komplekt,
      	|	t2.id_tov as id_tov_TovarKomplekta
 		|Into #VT_SostavKomplekta
      	|From IzbenkaFin.._InfoRg7930 as Reg_SostavKomplekta (nolock)
		| Inner Join (
      	|  Select
      	|	  Reg_SostavKomplekta._Fld8183RRef as Komplekt,
      	|	  Reg_SostavKomplekta._Fld8184RRef as TovarKomplekta,
      	|	  MAX(Reg_SostavKomplekta._Period) as Period
      	|  From IzbenkaFin.._InfoRg7930 as Reg_SostavKomplekta (nolock)
		|   Inner Join M2..Tovari as t1
		|   On t1.Ref = Reg_SostavKomplekta._Fld8183RRef
		|  	   And t1.Vivedena = 0
		|  Where
		|	  Reg_SostavKomplekta._Period < @DateRaspr 
      	|  Group by
      	|	  Reg_SostavKomplekta._Fld8183RRef,
      	|	  Reg_SostavKomplekta._Fld8184RRef
		|  ) as MaxPeriody
		| On (MaxPeriody.Komplekt = Reg_SostavKomplekta._Fld8183RRef)
		|	And (MaxPeriody.TovarKomplekta = Reg_SostavKomplekta._Fld8184RRef)
		| 	And (MaxPeriody.Period = Reg_SostavKomplekta._Period)
		| Left Outer Join M2..Tovari as t1
		| On t1.Ref = Reg_SostavKomplekta._Fld8183RRef
		|  	 And t1.id_tov in (" + ТекстИДТоваров + ")
		| Left Outer Join M2..Tovari as t2
		| On t2.Ref = Reg_SostavKomplekta._Fld8184RRef
		|  	 And t2.id_tov in (" + ТекстИДТоваров + ")
		|Where
		|  	 t1.Ref is not null
		|  	 Or t2.Ref is not null 
        |
 		|---------------------------------------------------------------------------------------------
		|Select Distinct
 		|	VT_FactOst_Prochiye.TT as TT,
 		|	VT_FactOst_Prochiye.Tovar as Tovar,
	  	|	VT_FactOst_Prochiye.id_tov as id_tov,
 		|	TovaryKomplektov.har as har
 		|Into #VT_TovaryKomplektov
      	|From #VT_FactOst_Prochiye as VT_FactOst_Prochiye (nolock)
		| Left Outer Join (
		| 	Select
 		|	 	VT_SostavKomplekta.Komplekt as Tovar,
 		|	 	VT_SostavKomplekta.HarKomplekt as har
      	| 	From #VT_SostavKomplekta as VT_SostavKomplekta
		|	Where
		|		VT_SostavKomplekta.v_Komplekt = 1             -- комплект
		|	Union All
		|	Select
 		|		VT_SostavKomplekta.TovarKomplekta,
 		|		VT_SostavKomplekta.HarSostavl
      	|	From #VT_SostavKomplekta as VT_SostavKomplekta    -- составляющие комплекта
		|	Where
		|		VT_SostavKomplekta.v_TovarKomplekta = 1) as TovaryKomplektov
		| On TovaryKomplektov.Tovar = VT_FactOst_Prochiye.Tovar
		|Where
		|	TovaryKomplektov.Tovar is not null
	  //  |
	  //  |-----------------------------------------------------------------------------------------------
	  //  |Select
	  //  |	Reg_Raspr._Fld4022RRef as Tovar,
	  //  |	SprTovary._Fld760 as id_tov,
	  //  |	SprTovary._Fld4120RRef as koef_zakaza,
	  //  |	Reg_Raspr._Fld4023RRef as TT,
	  //  |	Reg_Raspr._Fld4214RRef as Har,
	  //  |	VTProizvoditeli.id_kontr as id_kontr
	  //|Into #VT_Predyd_Raspred
	  //  |From IzbenkaFin.._InfoRg4020 as Reg_Raspr (nolock)
	  //  | Inner Join IzbenkaFin.dbo._Reference29 as SprTovary (nolock)
	  //  | On SprTovary._IDRRef = Reg_Raspr._Fld4022RRef
	  //  |	And SprTovary._Fld760 in (" + ТекстИДТоваров + ")						-- список id_tov
	  //  | Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
	  //  | On Spr_StrEd._IDRRef = Reg_Raspr._Fld4023RRef
	  //  |	And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")				-- список id_ТТ
	  //  | Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
	  //  | On VTProizvoditeli.Harakteristika = Reg_Raspr._Fld4214RRef
	  //  | Left Outer Join #VTOstatkiNaSklade as VTOstatkiNaSklade
	  //  | On VTOstatkiNaSklade.Tovar = Reg_Raspr._Fld4022RRef
	  //  | 	 And VTOstatkiNaSklade.har = Reg_Raspr._Fld4214RRef
	  //  |Where
	  //  |	Reg_Raspr._Fld4021 = @DateRaspr
	  //  | 	And VTOstatkiNaSklade.Tovar is null
        |
		|-----------------------------------------------------------------------------------------------
		|Select Distinct
		|	VT_Slujebnaya.Tovar as Tovar,
		|	VT_Slujebnaya.id_kontr as id_kontr,
		|	VT_Slujebnaya.id_tov as id_tov,
        |   FLOOR(ISNULL(Spr_Har._Fld6855, 0) * ISNULL(Srok_Types._Fld6854, 1) + 0.1) as srok_godnosti
		|Into #VTPostTov
		|From
		|	(Select
		|		VTPostAndTov_skladir.Tovar as Tovar,
		|		VTPostAndTov_skladir.id_kontr as id_kontr,
		|		VTPostAndTov_skladir.id_tov as id_tov,
		|		VTPostAndTov_skladir.har as har
		|	From #VTPostAndTov_skladir as VTPostAndTov_skladir
        |
		|	Union All
        |
		|	Select
		|		VTPostAndTov_neskladir.Tovar,
		|		VTPostAndTov_neskladir.id_kontr,
		|		VTPostAndTov_neskladir.id_tov,
		|		VTPostAndTov_neskladir.har
		|	From #VTPostAndTov_neskladir as VTPostAndTov_neskladir
        |
		|	Union All
        |
		|	Select
		|		VT_PolnyeAnalogi.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_PolnyeAnalogi.id_tov,
		|		VT_PolnyeAnalogi.har
		|	From #VT_PolnyeAnalogi as VT_PolnyeAnalogi
		| 	Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| 	On VTProizvoditeli.Harakteristika = VT_PolnyeAnalogi.har
        |
		|	Union All
        |
		|	Select
		|		VT_TovaryKomplektov.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_TovaryKomplektov.id_tov,
		|		VT_TovaryKomplektov.har
		|	From #VT_TovaryKomplektov as VT_TovaryKomplektov
		| 	Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| 	On VTProizvoditeli.Harakteristika = VT_TovaryKomplektov.har) as VT_Slujebnaya
		//|	Union All
		//|
		//|	Select
		//|		VT_Predyd_Raspred.Tovar,
		//|		VT_Predyd_Raspred.id_kontr,
		//|		VT_Predyd_Raspred.id_tov,
		//|		VT_Predyd_Raspred.Har
		//|	From #VT_Predyd_Raspred as VT_Predyd_Raspred) as VT_Slujebnaya
        | Left Outer Join IzbenkaFin.._Reference2539 as Spr_Har (nolock)
        | On Spr_Har._IDRRef = VT_Slujebnaya.har
		| Left Outer Join IzbenkaFin.._Reference6852 as Srok_Types (nolock)
        | On Spr_Har._Fld6856RRef = Srok_Types._IDRRef
	  //	|Where
	  //	| VT_PolnyeAnalogi.Tovar IS NULL
      	|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VT_PolnyeAnalogi.TT,
		|	VT_PolnyeAnalogi.Analog,
		|	MIN(VT_PolnyeAnalogi.Tovar) as Tovar
		|Into #VT_PolnyeAnalogi_Cut
		|From #VT_PolnyeAnalogi as VT_PolnyeAnalogi
		|Group by
		|	VT_PolnyeAnalogi.TT,
		|	VT_PolnyeAnalogi.Analog
      	|
		|-----------------------------------------------------------------------------------------------
		|Select Distinct
		|	VT_Slujebnaya.TT as TT,
		|	VT_Slujebnaya.Tovar as Tovar,
		|	VT_Slujebnaya.id_kontr as id_kontr,
		|	VT_Slujebnaya.id_tov as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|	VT_Slujebnaya.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|	VT_Slujebnaya.koef_zakaza as koef_zakaza,
		|	VT_Slujebnaya.koef_tov as koef_tov
		|Into #VT_Osnovnaya
		|From
		|	(Select
		|		VTPostAndTov_skladir.TT as TT,
		|		VTPostAndTov_skladir.Tovar as Tovar,
		|		VTPostAndTov_skladir.id_kontr as id_kontr,
		|		VTPostAndTov_skladir.id_tov as id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		VTPostAndTov_skladir.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|		VTPostAndTov_skladir.koef_zakaza as koef_zakaza,
		|		ISNULL(RegParametryNom._Fld2912, 0) as koef_tov
		|	From #VTPostAndTov_skladir as VTPostAndTov_skladir
		| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		|	    And RegParametryNom._Fld2911RRef = VTPostAndTov_skladir.Tovar
		|	    And RegParametryNom._Fld7341RRef = VTPostAndTov_skladir.har
		| 	 Left Outer Join #VT_Analogi as VT_Analogi
		| 	 On VT_Analogi.Tovar = VTPostAndTov_skladir.Tovar
	  	| 	 Left Outer Join #VT_PolnyeAnalogi as VT_PolnyeAnalogi              -- если для товара есть аналог на остатках ТТ, не брать такой
	    | 	 On VT_PolnyeAnalogi.TT = VTPostAndTov_skladir.TT
	    | 	 	And VT_PolnyeAnalogi.Analog = VT_Analogi.Analog
        |   Where
        |    	VT_Analogi.Analog is null
        |    	Or VT_PolnyeAnalogi.Tovar is null
        |
		|	Union All
        |
		|	Select
		|		VTPostAndTov_neskladir.TT,
		|		VTPostAndTov_neskladir.Tovar,
		|		VTPostAndTov_neskladir.id_kontr,
		|		VTPostAndTov_neskladir.id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		VTPostAndTov_neskladir.Vyvedena as Vyvedena,
		//---АК SHEP 2018.05.04
		|		VTPostAndTov_neskladir.koef_zakaza,
		|		0
		|	From #VTPostAndTov_neskladir as VTPostAndTov_neskladir
		| 	 Left Outer Join #VT_Analogi as VT_Analogi
		| 	 On VT_Analogi.Tovar = VTPostAndTov_neskladir.Tovar
	  	| 	 Left Outer Join #VT_PolnyeAnalogi as VT_PolnyeAnalogi             -- если для товара есть аналог на остатках ТТ, не брать такой
	    | 	 On VT_PolnyeAnalogi.TT = VTPostAndTov_neskladir.TT
	    | 	 	And VT_PolnyeAnalogi.Analog = VT_Analogi.Analog
        |   Where
        |    	VT_Analogi.Analog is null
        |    	Or VT_PolnyeAnalogi.Tovar is null
        |
		|	Union All
        |
		|	Select
		|		VT_PolnyeAnalogi.TT,
		|		VT_PolnyeAnalogi.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_PolnyeAnalogi.id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		0 as Vyvedena,
		//---АК SHEP 2018.05.04
		|		SprTovary._Fld4120RRef,
		|		ISNULL(RegParametryNom._Fld2912, 0)
		|	From #VT_PolnyeAnalogi as VT_PolnyeAnalogi                         	-- взаимозаменяемые товары аналога, которые
		| 	 Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)			-- есть на остатках торговой точки, но нет		
		| 	 On SprTovary._IDRRef = VT_PolnyeAnalogi.Tovar                      -- в ее действующем товарном ассортименте / графике доставки
		| 	 Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)             
		| 	 On VTProizvoditeli.Harakteristika = VT_PolnyeAnalogi.har
		| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		|		And RegParametryNom._Fld2911RRef = VT_PolnyeAnalogi.Tovar
		|	    And RegParametryNom._Fld7341RRef = VT_PolnyeAnalogi.har
		| 	 Inner Join #VT_PolnyeAnalogi_Cut as VT_PolnyeAnalogi_Cut (nolock)				
		| 	 On VT_PolnyeAnalogi_Cut.TT = VT_PolnyeAnalogi.TT
		| 	 	And VT_PolnyeAnalogi_Cut.Analog = VT_PolnyeAnalogi.Analog
		| 	 	And VT_PolnyeAnalogi_Cut.Tovar = VT_PolnyeAnalogi.Tovar
        |
		|	Union All
        |
		|	Select
		|		VT_TovaryKomplektov.TT,
		|		VT_TovaryKomplektov.Tovar,
		|		VTProizvoditeli.id_kontr,
		|		VT_TovaryKomplektov.id_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		|		0 as Vyvedena,
		//---АК SHEP 2018.05.04
		|		SprTovary._Fld4120RRef,
		|		ISNULL(RegParametryNom._Fld2912, 0)
		|	From #VT_TovaryKomplektov as VT_TovaryKomplektov
		| 	 Inner Join IzbenkaFin.._Reference29 as SprTovary (nolock)				
		| 	 On SprTovary._IDRRef = VT_TovaryKomplektov.Tovar
		| 	 Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		| 	 On VTProizvoditeli.Harakteristika = VT_TovaryKomplektov.har
		| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		|		And RegParametryNom._Fld2911RRef = VT_TovaryKomplektov.Tovar
		|	    And RegParametryNom._Fld7341RRef = VT_TovaryKomplektov.har
        |
		//|	Union All
		//|
		//|	Select
		//|		VT_Predyd_Raspred.TT,
		//|		VT_Predyd_Raspred.Tovar,
		//|		VT_Predyd_Raspred.id_kontr,
		//|		VT_Predyd_Raspred.id_tov,
		//|		VT_Predyd_Raspred.koef_zakaza,
		//|		ISNULL(RegParametryNom._Fld2912, 0)
		//|	From #VT_Predyd_Raspred as VT_Predyd_Raspred
		//| 	 Left Outer Join IzbenkaFin.._InfoRg2909 as RegParametryNom (nolock)
		//| 	 On RegParametryNom._Fld2910RRef = @IDR_Sklad
		//|		And RegParametryNom._Fld2911RRef = VT_Predyd_Raspred.Tovar
		//|	    And RegParametryNom._Fld7341RRef = VT_Predyd_Raspred.har
		|	) as VT_Slujebnaya
        |
		|---------------------------------------------------------------------------------------------
		|Select
		|	Reg_Ceny._Period as Period,
		|	Reg_Ceny._Fld2709RRef as TT,
		|	Reg_Ceny._Fld2710RRef as Tovar,
		|	Reg_Ceny._Fld2713 as Cena
		|Into #VT_Ceny
		|From IzbenkaFin.._InfoRg2707 as Reg_Ceny (nolock)
		| Inner Join (
		|	Select
		|		Reg_Ceny._Fld2709RRef as TT,
		|		Reg_Ceny._Fld2710RRef as Tovar,
		|		MAX(Reg_Ceny._Period) as Period
		|	From IzbenkaFin.._InfoRg2707 as Reg_Ceny (nolock)
		|	 Inner Join IzbenkaFin.._Reference29 as SprNom (nolock)
		|	 On SprNom._IDRRef = Reg_Ceny._Fld2710RRef
		|		And SprNom._Fld760 In (" + ТекстИДТоваров + ")
		|	Group by
		|		Reg_Ceny._Fld2709RRef,
		|		Reg_Ceny._Fld2710RRef) as Max_Periody
		| On Max_Periody.TT = Reg_Ceny._Fld2709RRef
		|	And Max_Periody.Tovar = Reg_Ceny._Fld2710RRef
		|	And Max_Periody.Period = Reg_Ceny._Period
        |
		|---------------------------------------------------------------------------------------------
		|Select Distinct
		|	VykladkaTovara.Tovar as Tovar,
		| 	Reg_MestaHraneniya._Fld7599RRef as TT,
		| 	0 as Ostatok
		|Into #TovaryPoAkcii 
		|From 
		| 	(Select
		| 		Reg_VykladkaPl._Fld5123RRef as Tovar,
		| 		MAX(Spr_MestaVykladki._ParentIDRRef) as MesroVykladki
		| 	From IzbenkaFin.._InfoRg5121 as Reg_VykladkaPl (nolock)
		| 	 Inner Join IzbenkaFin.._Reference5118 as Spr_MestaVykladki (nolock)
		| 	 On Spr_MestaVykladki._IDRRef = Reg_VykladkaPl._Fld5124RRef
		| 		And Spr_MestaVykladki._Marked = 0
		| 	Group by
		| 		Reg_VykladkaPl._Fld5123RRef) as VykladkaTovara
		| Left Outer Join IzbenkaFin.._InfoRg7598 as Reg_MestaHraneniya (nolock)
		| On Reg_MestaHraneniya._Fld7600RRef = VykladkaTovara.MesroVykladki
		| Left Outer Join
		| 	(Select Distinct
		| 		AkciiTovarov._Reference29_IDRRef as Tovar,
		| 		AkciiTovarov._Fld6672RRef as TT
		| 	From IzbenkaFin.._Reference29_VT6217 as AkciiTovarov (nolock)
		| 	Where
		| 		DateAdd(Year, 2000, GETDATE()) Between AkciiTovarov._Fld6220 And AkciiTovarov._Fld6221) as AkciiTovarov
		| On AkciiTovarov.Tovar = VykladkaTovara.Tovar
		| 	 And (AkciiTovarov.TT = 0x00000000000000000000000000000000
		| 		  Or AkciiTovarov.TT = Reg_MestaHraneniya._Fld7599RRef)
		|Where
		| 	ISNULL(Reg_MestaHraneniya._Fld7601, 0) = 1 
		| 	And AkciiTovarov.Tovar Is not null       
        |
		|---------------------------------------------------------------------------------------------
		|Select
		|	Tovary.id_tov as id_tov,
		|	Tovary.id_group as id_group,
		|	ISNULL(Tovary_Analogi.id_tov_vz, Tovary.id_tov) as id_tov_vz,
		|	Convert(real, ISNULL(SprEdIzm._Fld176, 0)) as ves,
		|	Convert(real, ISNULL(Reg_ParametryNom._Fld2912, 0)) as koef_tov,
		|	Case
		|		When Tovary.vid_skadiruemosti = 0xA9312BD3EF4CC68B4394876E8B1EB052     		-- Вид складируемости = Нескладируемый
		|			Or (Tovary.vid_skadiruemosti = 0x87E74524672D69394AE11BF7C0D72524  		-- Вид складируемости = Складируемый до заказа
		|					And Tovary_Zakaz.Nom is not null)
		|			Then 0
		|		Else 1
		|	End as skladir,
		|	Tovary.pick_item as pick_item,
		|	Tovary.id_tov_pvz as id_tov_pvz
		|Into #M2_tov
		|From
		|	(Select
		|		SprNom._IDRRef,
		|		SprNom._Fld241RRef,
		|		SprNom._Fld760 as id_tov,
		|		ISNULL(SprNom._Fld2750, 0) as id_group,
		|		SprNom._Fld5907RRef as vid_skadiruemosti,
		|		SprNom._Fld7350 as pick_item,
		|		ISNULL(Neosnovnye_Analogi.id_tov_Osnovn, Osnovnye_Analogi.id_tov_Osnovn) as id_tov_pvz
		|	From IzbenkaFin.._Reference29 as SprNom (nolock)
		| 	 Left Outer Join #VT_Zamenyaemye_Analogi as Neosnovnye_Analogi
		|	 On Neosnovnye_Analogi.tov_Zadvoen = SprNom._IDRRef
		| 	 Left Outer Join (
		|		Select Distinct
		|			VT_Zamenyaemye_Analogi.id_tov_Osnovn as id_tov_Osnovn
		|		From #VT_Zamenyaemye_Analogi as VT_Zamenyaemye_Analogi) as Osnovnye_Analogi
		|	 On Osnovnye_Analogi.id_tov_Osnovn = SprNom._Fld760
		|	Where
		|		SprNom._Fld760 In (" + ТекстИДТоваров + ")) as Tovary
		| Left Outer Join(
		|	Select
		|		Reg_ParametryNom._Fld2911RRef as _Fld2911RRef,
		|		MAX(Reg_ParametryNom._Fld2912) as _Fld2912
		|	From IzbenkaFin.._InfoRg2909 As Reg_ParametryNom (nolock)
		|	Where
		|		Reg_ParametryNom._Fld2910RRef = @IDR_Sklad
		|	Group by
		|		Reg_ParametryNom._Fld2911RRef) as Reg_ParametryNom
		| On Reg_ParametryNom._Fld2911RRef = Tovary._IDRRef
		//+++АК SHEP 2018.05.18 ИП-00018421: Inner Join заменил на Left Join
		//| Inner Join IzbenkaFin.._Reference21 as SprEdIzm (nolock)
		| Left Join IzbenkaFin.._Reference21 as SprEdIzm (nolock)
		//---АК SHEP 2018.05.18
		| On SprEdIzm._IDRRef = Tovary._Fld241RRef
		| Left Outer Join(
		|	Select
		|		Analogi_Tovary._Fld6045RRef as Nom,
		|		MAX(Analogi._Fld7213) as id_tov_vz
		|	From IzbenkaFin.._Reference6042_VT6043 as Analogi_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Reference6042 as Analogi (nolock)
		|	 On Analogi._IDRRef = Analogi_Tovary._Reference6042_IDRRef
		|		And Analogi._Marked = 0
		|	Group by
		|		Analogi_Tovary._Fld6045RRef
		|	) as Tovary_Analogi
		|	On Tovary_Analogi.Nom = Tovary._IDRRef
		| Left Outer Join(
		|	Select
		|		Predzakazy_Tovary._Fld3066RRef as Nom
		|	From IzbenkaFin.._Document3032_VT3063 as Predzakazy_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Document3032 as Predzakazy (nolock)
		|	 On Predzakazy._IDRRef = Predzakazy_Tovary._Document3032_IDRRef
		|		And Predzakazy._Fld3058 = @DatePostupleniya
		|		And Predzakazy._Fld4104RRef = @IDR_Raschetchik
		|		And Predzakazy._Fld3060 = 1
		|		And Predzakazy._Posted = 1
		|	Group by
		|		Predzakazy_Tovary._Fld3066RRef
		|	Having
		|		SUM(Predzakazy_Tovary._Fld3067) > 0
		|	) as Tovary_Zakaz
		|	On Tovary_Zakaz.Nom = Tovary._IDRRef
        |
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTPostTov.id_tov as id_tov,
		|	VTPostTov.id_kontr as id_kontr,
		|	VTPostTov.srok_godnosti as srok_godnosti,
		|	ISNULL(VTOstatkiNaSklade.kol, 0) as q_ost_sklad,
		|	ISNULL(Ozhidaemyi_Prihod.kol, 0) as q_wait_sklad,
		|	Case
		|		When Reg_DostupnostNaSklade._Fld3216RRef = 0xA30F005056A0010611E6F90118E249F1      -- Штучный
		|			 Or Reg_DostupnostNaSklade._Fld3216RRef = 0x87F1005056A06B0B11E719C69049E007   -- Склад_Сухой_Штучка_Адм_Мак
		|		Then 1
		|		Else ISNULL(VTKolVUpakovke.kol, 0)
		|	End as kolvo_korob
		|Into #M2_tov_kontr
		|From #VTPostTov as VTPostTov
		| Left Outer Join #VTOstatkiNaSklade_1 as VTOstatkiNaSklade
		| On (VTOstatkiNaSklade.id_kontr = VTPostTov.id_kontr
		|		Or VTOstatkiNaSklade._ne_po_har = 1)
		|	And (VTOstatkiNaSklade.Tovar = VTPostTov.Tovar)
		| Left Outer Join #VTKolVUpakovke as VTKolVUpakovke
		| On VTKolVUpakovke.id_kontr = VTPostTov.id_kontr
		|	And VTKolVUpakovke.Tovar = VTPostTov.Tovar
		| Left Outer Join(
		|	Select
		|		Prihody_Tovary._Fld3079RRef as Nom,
		|		VTProizvoditeli.id_kontr as id_kontr,
		|		SUM(Prihody_Tovary._Fld3082) as kol
		|	From IzbenkaFin.._Document3033_VT3077 as Prihody_Tovary (nolock)
		|	 Inner Join IzbenkaFin.._Document3033 as Prihody (nolock)
		|	 On Prihody._IDRRef = Prihody_Tovary._Document3033_IDRRef
		|		--And Prihody._Date_Time < DateAdd(hour, 9, @DateFactOst)
		|		--And Not Prihody._Date_Time < DateAdd(Day, -1, DateAdd(hour, 9, @DateFactOst))
		|		And Prihody._Fld7282 = 1
		|		And Prihody._Fld14063 = 0
		|		And Prihody._Fld7360 = 0 -- если приемка терминалом не закончена
		|		And Prihody._Posted = 1
		|	 Inner Join IzbenkaFin.._Reference1321 as Spr_Sklady (nolock)
		|	 On Spr_Sklady._IDRRef = Prihody._Fld3071RRef
		|		And Spr_Sklady._OwnerIDRRef = @IDR_Sklad
		|	 Inner Join #VTProizvoditeli as VTProizvoditeli (nolock)
		|	 On VTProizvoditeli.Harakteristika = Prihody_Tovary._Fld3080RRef
		|	Group by
		|		Prihody_Tovary._Fld3079RRef,
		|		VTProizvoditeli.id_kontr
		|	Having
		|		SUM(Prihody_Tovary._Fld3082) > 0
		|	) as Ozhidaemyi_Prihod
		| On Ozhidaemyi_Prihod.Nom = VTPostTov.Tovar
		|	 And Ozhidaemyi_Prihod.id_kontr = VTPostTov.id_kontr
		| Left Outer Join IzbenkaFin.._InfoRg3213 as Reg_DostupnostNaSklade (nolock)
		| On Reg_DostupnostNaSklade._Fld3215RRef = @IDR_Sklad
		|	 And Reg_DostupnostNaSklade._Fld5074RRef = VTPostTov.Tovar
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	M2_raspr_zadanie_tt.id_tt,
		|	M2_raspr_zadanie_tt.plan_z,
		|	M2_raspr_zadanie_tt.uchastvuet,
		|	MIN(M2_raspr_zadanie_tt.poryadok) as poryadok
		|Into #M2_raspr_zadanie_tt
		|From (
		|	Select
		|		Spr_StrEd._Fld758 as id_tt,
		//+++ ZICD 09.02.2017 исправление критической ошибки
		//|		Row_Number() Over (Partition by @IDR_Sklad Order by Spr_Marshruty._Fld5228) as poryadok, -- по возрастанию планового времени выезда на ТТ
		|		Row_Number() Over (Partition by @IDR_Sklad Order by Spr_Marshruty._Fld4222) as poryadok, -- по возрастанию планового времени выезда на ТТ
		//---
		|		Case
		|			When Spr_StrEd._Fld7793RRef = 0x00000000000000000000000000000000
		|				 Or Spr_StrEd._Fld7793RRef = 0x8201000C29E4E68A11E1490816B9983A
		|				Then NULL
		|			Else Spr_StrEd._Fld7702 * 1000
		|		End as plan_z,
		|		Case
		|			When Spr_StrEd._Fld7348 = 0
		|				Then 1
		|			Else 0
		|		End as uchastvuet
		|	From IzbenkaFin.._Reference3031_VT3051 as TT_Marshruta (nolock)
		| 	 Inner Join IzbenkaFin.._Reference3031 as Spr_Marshruty (nolock)
		| 	 On Spr_Marshruty._IDRRef = TT_Marshruta._Reference3031_IDRRef
		|	 	And Spr_Marshruty._Fld3050RRef = @IDR_Sklad
		|	 	And Spr_Marshruty._Marked = 0
		| 	 Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| 	 On Spr_StrEd._IDRRef = TT_Marshruta._Fld3053RRef
		|	 	And Spr_StrEd._Fld758 in (" + ТекстИДТТ + ")			-- список id_ТТ
		|	) as M2_raspr_zadanie_tt
		|Group by
		|	M2_raspr_zadanie_tt.id_tt,
		|	M2_raspr_zadanie_tt.plan_z,
		|	M2_raspr_zadanie_tt.uchastvuet
		|
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VTPostTov.id_tov as id_tov,
		|	VTPostTov.id_kontr as id_kontr,
		|	SUM(ISNULL(VTOstatkiNaSklade.kol, 0)) as q_ost_sklad,
		|	ISNULL(VTOstatkiNaSklade.data_proizvodstva, @DateRaspr) as date_ost
		|Into #M2_tov_kontr_date
		|From #VTPostTov as VTPostTov
		| Left Outer Join #VTOstatkiNaSklade_2 as VTOstatkiNaSklade
		| On (VTOstatkiNaSklade.id_kontr = VTPostTov.id_kontr
		|		Or VTOstatkiNaSklade._ne_po_har = 1)
		|	And (VTOstatkiNaSklade.Tovar = VTPostTov.Tovar)
		|Group by
		|	VTPostTov.id_tov,
		|	VTPostTov.id_kontr,
		|	ISNULL(VTOstatkiNaSklade.data_proizvodstva, @DateRaspr)
		|
		|-----------------------------------------------------------------------------------------------
		|-- выборка залов отгрузки, откуда отгружается торговая точка по определенному товару
		|SELECT Distinct
		|	T1._Fld3053RRef as TT,
		|	T5._Fld3393 as id_zal,
		|	T6._Fld760 as id_tov
		|Into #TT_id_zon
		|FROM IzbenkaFin.dbo._Reference3031_VT3051 as T1 (nolock)
		|	INNER JOIN IzbenkaFin.dbo._Reference3031_VT5167 as T2 (nolock)
		|		LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg3213 as T3 (nolock)
		|		ON (T2._Fld5169RRef = T3._Fld3216RRef)
		|	ON (T1._Reference3031_IDRRef = T2._Reference3031_IDRRef)
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference3031 as T4 (nolock)
		| ON T2._Reference3031_IDRRef = T4._IDRRef         
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference1321 as T5 (nolock)
		| ON T2._Fld8390RRef = T5._IDRRef
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 as T6 (nolock)
		| ON T3._Fld5074RRef = T6._IDRRef
		| LEFT OUTER JOIN IzbenkaFin.dbo._Reference1321 as T7 (nolock)
		| ON T2._Fld5169RRef = T7._IDRRef
		|WHERE
		|	T7._Fld7278 = 0
		|	AND T5._Fld7279 = 1
		|	AND T4._Marked = 0
        |-----------------------------------------------------------------------------------------------
		|Select
		|	Rashody_Tovary._Fld3102RRef as Tovar,
		|	Rashody._Fld3090_RRRef as TT,
		|	SUM(Rashody_Tovary._Fld3105) as kol
		|INTO #VTRashod_Fact
		|From IzbenkaFin.._Document3034_VT3100 as Rashody_Tovary (nolock)
		| Inner Join IzbenkaFin.._Document3034 as Rashody (nolock)
		|	 On Rashody._IDRRef = Rashody_Tovary._Document3034_IDRRef
		|		And Rashody._Fld3480 = @DateRaspr
		|		And Rashody._Fld3088RRef = 0xBE738D5D0F666EE64FC467BA53367442   -- вид операции - Отгрузка в торговую точку
		|		And Rashody._Fld3096RRef = 0xAE2C7DEE08A154D2489A2C17DCB24F70   -- статус = в сборке
		|		And Rashody._Posted = 1
		|	Group by
		|		Rashody_Tovary._Fld3102RRef,
		|		Rashody._Fld3090_RRRef	
		|-----------------------------------------------------------------------------------------------
		|Select
		|	VT_Osnovnaya.id_tov as id_tov,
		|	Spr_StrEd._Fld758 as id_tt,
		|	VT_Osnovnaya.id_kontr as id_kontr,
		|	VT_Osnovnaya.id_kontr as id_kontr_v,
		|	Spr_StrEd._Fld2758 as koef_tt,	
		|	ISNULL(TT_id_zon.id_zal, 0) as id_zal,
		|	ISNULL(VTRashod_Fact.kol, 0) as q_rashod_fact,
		|	ISNULL(Spr_KoefZakaza._Fld4115, 0) as k1,
		|	ISNULL(Spr_KoefZakaza._Fld4116, 0) as k2,
		|	ISNULL(Spr_KoefZakaza._Fld4117, 0) as k3,
		|	ISNULL(Spr_KoefZakaza._Fld4118, 0) as k4,
		|	ISNULL(Spr_KoefZakaza._Fld4119, 0) as k5,
		|	0 as q_FO,
		|	ISNULL(Reg_TovOgranicheniya._Fld2918, 0) as min_ost_tt_tov,
		|	ISNULL(TovaryPoAkcii.Ostatok, ISNULL(Reg_TovOgranicheniya._Fld2919, 0)) as max_ost_tt_tov,
		//+++АК SHEP 2018.05.04 ИП-00018421
		//|	ISNULL(Reg_PlanPr._Fld2885, 0) as q_plan_pr,
		|	CASE
		|		WHEN VT_Osnovnaya.Vyvedena = 1
		|			THEN 0
		|		ELSE ISNULL(Reg_PlanPr._Fld2885, 0)
		|	END AS q_plan_pr,
		//---АК SHEP 2018.05.04
		|	Case
		|		When ISNULL(Reg_TovOgranicheniya._Fld2918, 0) = 0
		|			Then ISNULL(Reg_PlanPr._Fld2885, 0) * (1 + Spr_StrEd._Fld2758) * VT_Osnovnaya.koef_tov
		|		Else ISNULL(Reg_TovOgranicheniya._Fld2918, 0)
		|	End as q_min_ost,
		|	Case
		|		When ISNULL(VT_Ceny.Period, '20010101') > ISNULL(VT_Ceny_BezTT.Period, '20010101')
		|			Then ISNULL(VT_Ceny.Cena, 0)
		|		Else ISNULL(VT_Ceny_BezTT.Cena, 0)
		|	End as cena_pr
		|Into #M2_tt_tov_kontr
		|From #VT_Osnovnaya as VT_Osnovnaya
		| Inner Join IzbenkaFin.dbo._Reference42 as Spr_StrEd (nolock)
		| On Spr_StrEd._IDRRef = VT_Osnovnaya.TT
		| Left Outer Join IzbenkaFin.dbo._Reference4114 as Spr_KoefZakaza (nolock)
		| On Spr_KoefZakaza._IDRRef = VT_Osnovnaya.koef_zakaza
		//| Left Outer Join IzbenkaFin.._InfoRg3194 as Reg_FactOstTT (nolock)
		//| On Reg_FactOstTT._Fld3195 = @DateFactOst
		//|	And Reg_FactOstTT._Fld3196RRef = VT_Osnovnaya.TT
		//|	And Reg_FactOstTT._Fld3197RRef = VT_Osnovnaya.Tovar
		//|	And Not Reg_FactOstTT._Fld3198 = 0
		| Left Outer Join IzbenkaFin.._InfoRg2915 as Reg_TovOgranicheniya (nolock)
		| On Reg_TovOgranicheniya._Fld2917RRef = VT_Osnovnaya.TT
		|	And Reg_TovOgranicheniya._Fld2916RRef = VT_Osnovnaya.Tovar
		|	And Not (Reg_TovOgranicheniya._Fld2918 = 0
		|				And Reg_TovOgranicheniya._Fld2919 = 0)
		| Left Outer Join IzbenkaFin.._InfoRg2881 as Reg_PlanPr (nolock)
		| On Reg_PlanPr._Fld3269 = @DateRaspr
		|	And Reg_PlanPr._Fld2883RRef = VT_Osnovnaya.TT
		|	And Reg_PlanPr._Fld2884RRef = VT_Osnovnaya.Tovar
		|	And Reg_PlanPr._Fld5934RRef = @IDR_Sklad
		|	And Not Reg_PlanPr._Fld2885 = 0
		| Left Outer Join #TT_id_zon as TT_id_zon
 		| On TT_id_zon.TT = VT_Osnovnaya.TT
		|	And TT_id_zon.id_tov = VT_Osnovnaya.id_tov
		| Left Outer Join #VTRashod_Fact as VTRashod_Fact
		| On VTRashod_Fact.Tovar = VT_Osnovnaya.Tovar
		|	And VTRashod_Fact.TT = VT_Osnovnaya.TT
		| Left Outer Join #VT_Ceny as VT_Ceny
		| On (VT_Ceny.Tovar = VT_Osnovnaya.Tovar)
		|	And (VT_Ceny.TT = VT_Osnovnaya.TT)		
		| Left Outer Join #VT_Ceny as VT_Ceny_BezTT
		| On (VT_Ceny_BezTT.Tovar = VT_Osnovnaya.Tovar)
		|	 And (VT_Ceny_BezTT.TT = 0x00000000000000000000000000000000) -- торговая точка не указана в ценах
		| Left Outer Join #TovaryPoAkcii as TovaryPoAkcii
		| On (TovaryPoAkcii.Tovar = VT_Osnovnaya.Tovar)
		| 	 And (TovaryPoAkcii.TT = VT_Osnovnaya.TT)
		|Where
		| 	VTRashod_Fact.kol IS NULL
        |
		|---------------------------------------------------------------------------------------------
        |
		|While @err = 1
		|Begin
		|	Begin Try
		|----------------------------------------------------
		|Insert Into M2..tov_init
		|	(Number_r,
		|	id_tov,
		|	id_group,
		|	id_tov_vz,
		|	ves,
		|	koef_tov,
		|	Skladir,
		|	pick_item,
		|	id_tov_pvz)
		|Select
		|	@Number_r,
		|	M2_tov.id_tov,
		|	M2_tov.id_group,
		|	M2_tov.id_tov_vz,
		|	M2_tov.ves,
		|	M2_tov.koef_tov,
		|	M2_tov.skladir,
		|	M2_tov.pick_item,
		|	M2_tov.id_tov_pvz
		|From #M2_tov as M2_tov
        |
		|----------------------------------------------------
		|Insert Into M2..tov_kontr_init
		|	(Number_r,
		|	id_tov,
		|	id_kontr,
		|	srok_godnosti,
		|	q_ost_sklad,
		|	q_wait_sklad,
		|	kolvo_korob,
		|	rasp_all)
		|Select
		|	@Number_r,
		|	M2_tov_kontr.id_tov,
		|	M2_tov_kontr.id_kontr,
		|	M2_tov_kontr.srok_godnosti,
		|	M2_tov_kontr.q_ost_sklad,
		|	M2_tov_kontr.q_wait_sklad,
		|	M2_tov_kontr.kolvo_korob,
		|	1 as rasp_all
		|From #M2_tov_kontr as M2_tov_kontr
        |
		|----------------------------------------------------
		|Insert Into M2..Raspr_zadanie_tov
		|	(Number_r,
		|	id_tov,
		|	id_kontr)
		|Select
		|	@Number_r,
		|	VTPostTov.id_tov,
		|	VTPostTov.id_kontr
		|From #VTPostTov as VTPostTov
		|
		|----------------------------------------------------
		|Insert Into M2..tov_kontr_date_init
		|	(Number_r,
		|	id_tov,
		|	id_kontr,
		|	q_ost_sklad,
		|	date_ost)
		|Select
		|	@Number_r,
		|	M2_tov_kontr_date.id_tov,
		|	M2_tov_kontr_date.id_kontr,
		|	M2_tov_kontr_date.q_ost_sklad,
		|	M2_tov_kontr_date.date_ost
		|From #M2_tov_kontr_date as M2_tov_kontr_date
        |
		|
		|----------------------------------------------------
		|Insert Into IzbenkaFin.._InfoRg5947
		|	(_Fld5948,
		|	_Fld5950,
		|	_Fld5949,
		|	_Fld5951,
		|	_Fld5952,
		|	_Fld9622,
		|	_Fld9623,
		|	_Fld5958,
		|	_Fld7647,
		|	_Fld7812,
		|	_Fld5961,
		|	_Fld5962,
		|	_Fld5963,
		|	_Fld5964,
		|	_Fld5965,
		|	_Fld5955,
		|	_Fld5957,
		|	_Fld7224,
		|	_Fld5953,
		|	_Fld5954,
		|	_Fld5956,
		|	_SimpleKey,
		|	_Fld5959,
		|	_Fld5960)
		|SELECT
		|	VZ_Zapros.Number_r,
		|	VZ_Zapros.id_tov,
		|	VZ_Zapros.id_tt,
		|	VZ_Zapros.id_kontr,
		|	VZ_Zapros.id_kontr_v,
		|	VZ_Zapros.id_kontr1,
		|	VZ_Zapros.id_kontr_v1,
		|	VZ_Zapros.koef_tt,
		|	VZ_Zapros.id_zal,
		|	VZ_Zapros.q_rashod_fact,
		|	VZ_Zapros.k1,
		|	VZ_Zapros.k2,
		|	VZ_Zapros.k3,
		|	VZ_Zapros.k4,
		|	VZ_Zapros.k5,
		|	VZ_Zapros.q_FO,
		|	VZ_Zapros.min_ost_tt_tov,
		|	VZ_Zapros.max_ost_tt_tov,
		|	VZ_Zapros.q_plan_pr,
		|	VZ_Zapros.q_min_ost,
		|	VZ_Zapros.cena_pr,
		|	VZ_Zapros._SimpleKey,
		|	VZ_Zapros.DateRaspr,
		|	VZ_Zapros.DateRaspr1
		|FROM (Select
		|	@Number_r as Number_r,
		|	ISNULL(M2_tt_tov_kontr.id_tov, 0) as id_tov,
		|	ISNULL(M2_tt_tov_kontr.id_tt, 0) as id_tt,
		|	ISNULL(M2_tt_tov_kontr.id_kontr, 0) as id_kontr,
		|	ISNULL(M2_tt_tov_kontr.id_kontr_v, 0) as id_kontr_v,
		|	ISNULL(M2_tt_tov_kontr.id_kontr, 0) as id_kontr1,
		|	ISNULL(M2_tt_tov_kontr.id_kontr_v, 0) as id_kontr_v1,
		|	ISNULL(M2_tt_tov_kontr.koef_tt, 0) as koef_tt,
		|	ISNULL(M2_tt_tov_kontr.id_zal, 0) as id_zal,
		|	ISNULL(M2_tt_tov_kontr.q_rashod_fact, 0) as q_rashod_fact,
		|	ISNULL(M2_tt_tov_kontr.k1, 0) as k1,
		|	ISNULL(M2_tt_tov_kontr.k2, 0) as k2,
		|	ISNULL(M2_tt_tov_kontr.k3, 0) as k3,
		|	ISNULL(M2_tt_tov_kontr.k4, 0) as k4,
		|	ISNULL(M2_tt_tov_kontr.k5, 0) as k5,
		|	ISNULL(M2_tt_tov_kontr.q_FO, 0) as q_FO,
		|	ISNULL(M2_tt_tov_kontr.min_ost_tt_tov, 0) as min_ost_tt_tov,
		|	ISNULL(M2_tt_tov_kontr.max_ost_tt_tov, 0) as max_ost_tt_tov,
		|	ISNULL(M2_tt_tov_kontr.q_plan_pr, 0) as q_plan_pr,
		|	ISNULL(M2_tt_tov_kontr.q_min_ost, 0) as q_min_ost,
		|	ISNULL(M2_tt_tov_kontr.cena_pr, 0) as cena_pr,
		|	master.dbo.UID2Binary(NEWID()) as _SimpleKey,
		|	@DateRaspr as DateRaspr,
		|	DateAdd(Day, 1, @DateRaspr) as DateRaspr1,
		|	ROW_NUMBER() over (partition by M2_tt_tov_kontr.id_tov, M2_tt_tov_kontr.id_tt ORDER BY M2_tt_tov_kontr.id_kontr) as rn
		|From #M2_tt_tov_kontr as M2_tt_tov_kontr) as VZ_Zapros
		|WHERE VZ_Zapros.rn = 1
		|
		|----------------------------------------------------
		|Insert Into M2..raspr_zadanie_tt
		|	(Number_r,
		|	id_tt,
		|	poryadok,
		|	plan_z,
		|	uchastvuet)
		|Select
		|	@Number_r,
		|	M2_raspr_zadanie_tt.id_tt,
		|	M2_raspr_zadanie_tt.poryadok,
		|	M2_raspr_zadanie_tt.plan_z,
		|	M2_raspr_zadanie_tt.uchastvuet
		|From #M2_raspr_zadanie_tt as M2_raspr_zadanie_tt
		|
		|----------------------------------------------------
		|Insert Into M2..tov_kontr_zal_init
		|	(Number_r,
		|	id_tov,
		|	id_kontr,
		|	id_zal,
		|	q_ost_zal)
		|Select
		|	@Number_r,
		|	VTOstatkiVZale.id_tov,
		|	VTOstatkiVZale.id_kontr,
		|	VTOstatkiVZale.id_zal,
		|	VTOstatkiVZale.q_ost_zal
		|From #VTOstatkiVZale as VTOstatkiVZale
        |
		|----------------------------------------------------
		|	
		|		Select @err = 0
		|	End Try
		|   Begin Catch
		|		If CHARINDEX('вызвала взаимоблокировку ресурсов', ERROR_MESSAGE(), 1) > 0
		|			Begin
		|				Set @err = 1		-- запись в лог факта блокировки
		|			End
		|		Else
		|			Begin
		|				set @mes = ERROR_MESSAGE()
		|				Update M2..raspr_zadanie
		|				Set ErrorMes = @mes
		|				Where Number_r = " + Number_r + "
		|				 /*RAISERROR (@mes,
        |							20, -- Severity.  
        |							1 -- State.  
        |							) WITH LOG */
		|				Return				-- прочая ошибка - выход
		|			End                    
		|	End Catch 
		|End -- while
		|
		|Select @mes as messageError
		| 
		|-----------------------------------------------------------------------------------------------
		|Drop Table #VTProizvoditeli
		|Drop Table #VTKolVUpakovke
		|Drop Table #VTOstatkiNaSklade
		|Drop Table #VTOstatkiVZale
		|Drop Table #VTOstatkiNaSklade_1
		|Drop Table #VTOstatkiNaSklade_2
		|Drop Table #VT_tovary_post_tt
		|Drop Table #VTPostAndTov_skladir
		|Drop Table #VTPostAndTov_neskladir
		//|Drop Table #VT_Predyd_Raspred
		|Drop Table #VTPostTov
		|Drop Table #VT_Ceny
		|Drop Table #VT_Zamenyaemye_Analogi
		|Drop Table #VT_FactOst_Prochiye
		|Drop Table #VT_Analogi
		|Drop Table #VT_PolnyeAnalogi
		|Drop Table #VT_SostavKomplekta
		|Drop Table #VT_TovaryKomplektov
		|Drop Table #VT_PolnyeAnalogi_Cut
		|Drop Table #VT_Osnovnaya
		|Drop Table #TovaryPoAkcii
		|Drop Table #M2_tov
		|Drop Table #M2_tov_kontr
		|Drop Table #M2_raspr_zadanie_tt
		|Drop Table #M2_tov_kontr_date
		|Drop Table #M2_tt_tov_kontr
		|Drop Table #TT_id_zon";
	
КонецФункции

//+++АК SHEP 2018.05.18 ИП-00018421
// Функция отправляет данные в таблицы базы SQL [M2], с использованием ADO-соединения.
//
// Возвращаемое значение;
// 	ТекстНомер_Р - Текст, текст номера отправленного распределения.
//
Функция ОтправитьДанныеДляРаспределенияПоТТ_18421(мДата, мСписокТТ, мСписокНом, мСклад, мРасчетчик = Неопределено, ОстаткиСледДнем = Ложь, ПроверятьБлокировку = Истина) Экспорт
	
	Перем мДеньНедели, ТекДатаРаспределения, СтруктураПараметров, ADOСоединение, ADOКоманда, ТекстЗапроса;
	
    ТекДатаРаспределения = мДата + 86400; // на завтра распределяем
	
	// проверка на текущую заблокированность товаров для распределения
	Если ПроверятьБлокировку Тогда
		ЕстьБлокировка = ЕстьБлокировкаТоваровДляРаспределения(мСписокНом, мСклад);
		Если ЕстьБлокировка	Тогда
			Сообщить("Есть товары, заблокированные для распределения! Распределение невозможно.");
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	// установка блокировки по товарам и складу, на период распределения
	УстановитьПризнакБлокировкиДляРаспределения(мСписокНом, мСклад, Истина);
	
	//
	Сообщить("Отправка данных на SQL...");
	
	// ДОБАВЛЕНИЕ В ТАБЛИЦЫ НА SQL
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрокаСоединенияСБазойСКЛ = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open(СтрокаСоединенияСБазойСКЛ);
	
	ADOКоманда = Новый COMОбъект("ADODB.Command");
	ADOКоманда.ActiveConnection = ADOСоединение;
	

	// определение номера распределения, запись в [M2].[dbo].[Raspr_zadanie] строки с этим номером и статусом = -3	
	ADOКоманда.CommandText =
	"Declare @Number_r As int
    |
	|SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	|BEGIN TRANSACTION
    |
	|Select
    |	@Number_r = MAX(rz.Number_r) + 1 
	|From M2..Raspr_zadanie As rz With (TABLOCKX)
    |
	|Insert Into M2..Raspr_zadanie 
	|     (Number_r,
	|      Date_r,
	|      type_rz,
	|      user_add,
	|      time_add,
	|      id_sklad,
	|      Status,
	|	   _Fld4908RRef) 
	|Select
    |	@Number_r,
 	|	'" + Формат(ТекДатаРаспределения, "ДФ=yyyy-MM-dd") + "', 0, 'abcdef', 
	|	GETDATE(),
	|	" + Формат(мСклад.id_TT, "ЧГ=0; ЧН=") + ",
	|	-3,
	|	" + ?(ЗначениеЗаполнено(мРасчетчик),
			"(Select Spr._IdRRef From IzbenkaFin.dbo._Reference3030 as Spr (nolock) Where Spr._Code = '" + мРасчетчик.Код + "')", "NULL") + "
    |
	|COMMIT TRANSACTION";
	
	ADOКоманда.Execute();
	
	
	// запись номера распределения в переменную
	ТекстЗапроса =
	"Select
	|	MAX(tablica.Number_r) as Number_r
	|From
	|	M2..raspr_zadanie as tablica (nolock)";
	
	ТекстНомер_Р = "";
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Если НЕ Выборка.EOF() Тогда
		
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			мНомерРаспределения = Выборка.Fields("Number_r").Value;// + 1;
			Выборка.MoveNext();
		КонецЦикла;
		
		ТекстНомер_Р = Формат(мНомерРаспределения, "ЧГ=0");
	КонецЕсли;

	Если ТекстНомер_Р = "" Тогда
		Сообщить("Не удалось определить номер распределения! Отправка данных невозможна.");
		ADOСоединение.Close();
		Возврат "";
	КонецЕсли;
	
	
	////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекстНомер_Р"			, ТекстНомер_Р);
	СтруктураПараметров.Вставить("СписокТорговыхТочек"	, мСписокТТ);
	СтруктураПараметров.Вставить("СписокНоменклатуры"	, мСписокНом);	
	СтруктураПараметров.Вставить("Склад"				, мСклад);
	СтруктураПараметров.Вставить("ОстаткиСледДнем"		, ОстаткиСледДнем);
	
	ТекстКоманды = ПолучитьТекстКоманды_ПодготовкаДанныхДляРаспределения_18421(СтруктураПараметров);
	Сообщить(ТекстКоманды);
	Возврат ТекстНомер_Р;
	
	ADOСоединение.Execute(ТекстКоманды);
	СообщениеОбОшибке = "";
	ТекстЗапроса =
	"Select
	|	CAST(tablica.ErrorMes as NVarChar(500)) as Mess
	|From
	|	M2..raspr_zadanie as tablica (nolock)
	|WHERE tablica.Number_r = " + ТекстНомер_Р;
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Если НЕ Выборка.EOF() Тогда
		
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			СообщениеОбОшибке = СокрЛП(Выборка.Fields("Mess").Value);
			Выборка.MoveNext();
		КонецЦикла;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщить(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка распределения SQL", УровеньЖурналаРегистрации.Ошибка, ,, СообщениеОбОшибке + Символы.ПС);
		Возврат ТекстНомер_Р;
	Иначе	
		Сообщить("...  заполнены таблицы SQL");
	КонецЕсли;	
	
	// Перезапись статуса в M2..raspr_zadanie
	ТекстКоманды =
	"Update M2..raspr_zadanie
	|Set Status = 2
	|Where Number_r = " + ТекстНомер_Р + "
	|";
	ADOСоединение.Execute(ТекстКоманды);
	
	ADOСоединение.Close();
	
	Возврат ТекстНомер_Р;
	
КонецФункции

Функция РезультирующаяТаблицаДляРезультатаРаспределения(ЭтоПредварительноеРаспределение)
	Если ЭтоПредварительноеРаспределение Тогда 		
		Возврат "'[M2].[dbo].[_InfoRg4020]'";
	ИначеЕсли ОбщегоНазначенияПовтИсп.ЭтоКопияБазы() Тогда 
		ТабицаПуть = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ТаблицаДляРезультатаРаспределения"); //+++АК mika 2018.11.07 Без задачи (добавление константы для хранения таблицы результата)
		Если ЗначениеЗаполнено(ТабицаПуть) Тогда
			Возврат ТабицаПуть;
		КонецЕсли;
		Возврат "'[srv-sql05].[Fin_test_full].[dbo].[_InfoRg4020]'";
	Иначе
		Возврат "NULL";
	КонецЕсли;	
КонецФункции

//+++АК LATV 2018.11.01 ИП-00020308
Функция ПолучитьНомерРаспределенияПоТТ(мДата, мСписокНом, мСклад, мРасчетчик = Неопределено, ПроверятьБлокировку = Истина, ЗонаХранения = Неопределено, 
	ЭтоПредварительноеРаспределение = 0, 
	СтруктураПараметров) Экспорт
	
	Перем ТекДатаРаспределения, ADOСоединение, ADOКоманда, ТекстЗапроса, НомерЗоныХранения;
	
	ТекДатаРаспределения = мДата + 86400; // на завтра распределяем
	
	// проверка на текущую заблокированность товаров для распределения
	Если ПроверятьБлокировку Тогда
		ЕстьБлокировка = ЕстьБлокировкаТоваровДляРаспределения(мСписокНом, мСклад);
		Если ЕстьБлокировка	Тогда
			Сообщить("Есть товары, заблокированные для распределения! Распределение невозможно.");
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на обработанные задания
	ДанныеЗоны = Неопределено;
	НомерЗоныХранения	= "";
	Комментарий			= "";
	Если ЗначениеЗаполнено(ЗонаХранения) Тогда 
		ДанныеЗоны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗонаХранения, "ИД, Наименование, НеОчищатьЗаданияНаРазборкуПриНовомРаспределении");
		
		НомерЗоныХранения	= Формат(ДанныеЗоны.ИД, "ЧГ=0");
		Комментарий			= ДанныеЗоны.Наименование;
	КонецЕсли;
	
	Если ДанныеЗоны <> Неопределено
	   И ДанныеЗоны.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении Тогда
		ЕстьНеОбработанныеЗадания = ЕстьНеОбработанныеЗадания(ТекДатаРаспределения, мСписокНом, ЗонаХранения);
		Если ЕстьНеОбработанныеЗадания Тогда
			ТекстСообщения = НСтр("ru = 'Есть товары, по которым не обработаны задания! Распределение невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	// установка блокировки по товарам и складу, на период распределения
	Если ЭтоПредварительноеРаспределение = 0 Тогда //+++АК SHEP 2018.08.31 ИП-00017958: для предварительных распределений не блокируем товары
		УстановитьПризнакБлокировкиДляРаспределения(мСписокНом, мСклад, Истина);
	КонецЕсли;
	
	Сообщить("Отправка данных на SQL...");
	
	// ДОБАВЛЕНИЕ В ТАБЛИЦЫ НА SQL
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрокаСоединенияСБазойСКЛ = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open(СтрокаСоединенияСБазойСКЛ);
	
	ADOКоманда = Новый COMОбъект("ADODB.Command");
	ADOКоманда.ActiveConnection = ADOСоединение;
	
	//ЭтоПредварительноеРаспределение = 1;
	Если НЕ СтруктураПараметров.Свойство("ВсеСклады") Тогда 
		СтруктураПараметров.Вставить("ВсеСклады", Истина);
	КонецЕсли;
	ЭтоКопияБазы = ОбщегоНазначенияПовтИсп.ЭтоКопияБазы();
	
	// определение номера распределения, запись в [M2].[dbo].[Raspr_zadanie] строки с этим номером и статусом = -3	
	ADOКоманда.CommandText =
	"Declare @Number_r As int
    |
	|SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	|BEGIN TRANSACTION
    |
	|Select
    |	@Number_r = MAX(rz.Number_r) + 1 
	|From M2..Raspr_zadanie As rz With (TABLOCKX)
    |
	|Insert Into M2..Raspr_zadanie 
	|     (Number_r,
	|      Date_r,
	|      type_rz,
	|      user_add,
	|      time_add,
	|      id_sklad,
	|      Status,
	|		id_zone,
	|		comment,
	|	   _Fld4908RRef,
	|		type_raspr,
	|		test_raspr,	   
	|	    result_table,
	|	    text_id_tov,
	|       text_id_tt,
	|		str_vse_skladi,
	|		str_sled_dnem,
	|       str_virt_sklad_id_tt
	|) 
	|Select
    |	@Number_r,
 	|	'" + Формат(ТекДатаРаспределения, "ДФ=yyyy-MM-dd") + "', 0, 'abcdef', 
	|	GETDATE(),
	|	" + Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мСклад, "id_TT"), "ЧГ=0; ЧН=") + ",
	|	2,
	|	'" + НомерЗоныХранения + "',
	|	'" + Комментарий + "',
	|	" + ?(ЗначениеЗаполнено(мРасчетчик),
			"(Select Spr._IdRRef From IzbenkaFin.dbo._Reference3030 as Spr (nolock) Where Spr._Code = '" + мРасчетчик.Код + "')", "NULL") + "
	|	," + ?(ЭтоПредварительноеРаспределение, "1", "0")+"
	|	," + ?(ЭтоКопияБазы, "1", "0")+"
	|	," + РезультирующаяТаблицаДляРезультатаРаспределения(ЭтоПредварительноеРаспределение)+",	
	|   '" + СтрЗаменить(СтруктураПараметров.ТекстИДТоваров, "'", "") +"',
	|   '" + СтрЗаменить(СтруктураПараметров.ТекстИДТТ, "'", "") +"',
	|   " + ?(СтруктураПараметров.ВсеСклады, "1", "0") +",
    |   " + ?(СтруктураПараметров.ОстаткиСледДнем, "1", "0") +",
	|	" + Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мСклад, "id_TT"), "ЧГ=0; ЧН=") + "
	|COMMIT TRANSACTION";
	
	Выборка = ADOКоманда.Execute();	
		
	// запись номера распределения в переменную
	ТекстЗапроса =
	"Select
	|	MAX(tablica.Number_r) as Number_r
	|From
	|	M2..raspr_zadanie as tablica (nolock)";
	
	ТекстНомер_Р = "";
	Выборка = ADOСоединение.Execute(ТекстЗапроса);

	Если НЕ Выборка.EOF() Тогда
		
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			мНомерРаспределения = Выборка.Fields("Number_r").Value;// + 1;
			Выборка.MoveNext();
		КонецЦикла;
		
		ТекстНомер_Р = Формат(мНомерРаспределения, "ЧГ=0");
	КонецЕсли;

	Если ТекстНомер_Р = "" Тогда
		Сообщить("Не удалось определить номер распределения! Отправка данных невозможна.");
	КонецЕсли;
	
	ADOСоединение.Close();
	Возврат ТекстНомер_Р;
	
КонецФункции

//+++АК SHEP 2018.07.17 ИП-00019254
// Функция отправляет данные в таблицы базы SQL [M2], с использованием ADO-соединения.
//
// Возвращаемое значение;
// 	ТекстНомер_Р - Текст, текст номера отправленного распределения.
//
Функция ОтправитьДанныеДляРаспределенияПоТТ_19254(УИДРаспределения) Экспорт
Перем ТекстНомер_Р, ЗагружатьФОПередРаспределением, мСписокТТ, мСписокНом, мСклад, ОстаткиСледДнем;
Перем мДеньНедели, ТекДатаРаспределения, СтруктураПараметров, ADOСоединение, ADOКоманда, ТекстЗапроса;
	
	Если НЕ ЗначениеЗаполнено(УИДРаспределения) Тогда
		Сообщить("Не заполнен УИД распределения! Отправка данных на SQL невозможна!");
		Возврат "";
	КонецЕсли;
	
	ПараметрыСтрукт =
		Новый Структура("УИДРаспределения,Номер,СтруктурноеПодразделение,Склад,ДатаРаспределения,ОстаткиСледДнем,ЗагружатьФОПередРаспределением,ИдентификаторыТТ,ИдентификаторыТоваров");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаспределенияТоваров.УИД КАК УИДРаспределения,
		|	РаспределенияТоваров.Номер,
		|	РаспределенияТоваров.СтруктурноеПодразделение,
		|	РаспределенияТоваров.Склад,
		|	РаспределенияТоваров.Организация,
		|	РаспределенияТоваров.ДатаРаспределения,
		|	РаспределенияТоваров.ОстаткиСледДнем,
		|	РаспределенияТоваров.ЗагружатьФОПередРаспределением,
		|	РаспределенияТоваров.ИдентификаторыТТ,
		|	РаспределенияТоваров.ИдентификаторыТоваров,
		|	РаспределенияТоваров.ПоВсемТоварам
		|ИЗ
		|	РегистрСведений.РаспределенияТоваров КАК РаспределенияТоваров
		|ГДЕ
		|	РаспределенияТоваров.УИД = &УИДРаспределения");
	Запрос.УстановитьПараметр("УИДРаспределения", УИДРаспределения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(ПараметрыСтрукт, ВыборкаЗапроса);
	КонецЕсли;
	
	ПараметрыСтрукт.Свойство("Номер", ТекстНомер_Р);
	Если НЕ ЗначениеЗаполнено(ТекстНомер_Р) Тогда
		Сообщить("Не удалось определить номер распределения! Отправка данных на SQL невозможна!");
		Возврат "";
	КонецЕсли;
	
	ПараметрыСтрукт.Свойство("ЗагружатьФОПередРаспределением",	ЗагружатьФОПередРаспределением);
	ПараметрыСтрукт.Свойство("ИдентификаторыТТ",				мСписокТТ);
	ПараметрыСтрукт.Свойство("ИдентификаторыТоваров",			мСписокНом);
	ПараметрыСтрукт.Свойство("СтруктурноеПодразделение",		мСклад);
	ПараметрыСтрукт.Свойство("ОстаткиСледДнем",					ОстаткиСледДнем);
	
	РегистрыСведений.СостоянияРаспределенийТоваров.ИзменитьСостояние(УИДРаспределения, ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.НачатоРаспределение"));
	

	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрокаСоединенияСБазойСКЛ = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open(СтрокаСоединенияСБазойСКЛ);
	
	ADOКоманда = Новый COMОбъект("ADODB.Command");
	ADOКоманда.ActiveConnection = ADOСоединение;
	
	////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекстНомер_Р"			, ТекстНомер_Р);
	СтруктураПараметров.Вставить("СписокТорговыхТочек"	, мСписокТТ);
	СтруктураПараметров.Вставить("СписокНоменклатуры"	, мСписокНом);	
	СтруктураПараметров.Вставить("Склад"				, мСклад);
	СтруктураПараметров.Вставить("ОстаткиСледДнем"		, ОстаткиСледДнем);
	СтруктураПараметров.Вставить("ВсеСклады"			, Истина);
	
	РегистрыСведений.СостоянияРаспределенийТоваров.ИзменитьСостояние(УИДРаспределения, ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.ПодготовкаДанныхРаспределения"));
	
	ТекстКоманды = ПолучитьТекстКоманды_ПодготовкаДанныхДляРаспределения(СтруктураПараметров);
	Сообщить(ТекстКоманды);
	Возврат ТекстНомер_Р;
	ADOСоединение.Execute(ТекстКоманды);
	СообщениеОбОшибке = "";
	ТекстЗапроса =
	"Select
	|	CAST(tablica.ErrorMes as NVarChar(500)) as Mess
	|From
	|	M2..raspr_zadanie as tablica (nolock)
	|WHERE tablica.Number_r = " + ТекстНомер_Р;
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Если НЕ Выборка.EOF() Тогда
		
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			СообщениеОбОшибке = СокрЛП(Выборка.Fields("Mess").Value);
			Выборка.MoveNext();
		КонецЦикла;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщить(СообщениеОбОшибке);
		Возврат ТекстНомер_Р;
	Иначе	
		Сообщить("...  заполнены таблицы SQL");
	КонецЕсли;	

	// Перезапись статуса в M2..raspr_zadanie
	ТекстКоманды =
	"Update M2..raspr_zadanie
	|Set Status = 2
	|Where Number_r = " + ТекстНомер_Р + "
	|";
	ADOСоединение.Execute(ТекстКоманды);
	
	ADOСоединение.Close();
	
	Возврат ТекстНомер_Р;
	
КонецФункции

//+++АК SHEP 2018.07.31 ИП-00019254
Процедура ОбновитьСостоянияРаспределений(НачалоПериода = Неопределено, НомераРаспределений = "") Экспорт
	РегистрыСведений.РаспределенияТоваров.ОбновитьСостояния(НачалоПериода, НомераРаспределений);
КонецПроцедуры

//+++АК SHEP 2018.07.31 ИП-00019254
Процедура ОбновитьСостоянияРаспределенийВФоне(НомераРаспределенийСтр, АдресВремХран) Экспорт
	
	ДопПараметры = Новый Массив;
	ДопПараметры.Добавить(Неопределено);
	ДопПараметры.Добавить(НомераРаспределенийСтр);
	
	Длительность = 30;
	Пока Истина Цикл
		Попытка
			ФЗ_ОбновитьСостоянияРаспределений = ФоновыеЗадания.Выполнить("ДопМодульСервер.ОбновитьСостоянияРаспределений", ДопПараметры,, "ДопМодульСервер_ОбновитьСостоянияРаспределений");
			ФЗ_ОбновитьСостоянияРаспределений.ОжидатьЗавершения(Длительность);
		Исключение
		КонецПопытки;
		Если ПолучитьИзВременногоХранилища(АдресВремХран) = Истина Тогда
			Прервать;
		КонецЕсли;
		Пауза(Длительность);
	КонецЦикла;
	
	// обновим на всякий случай ещё раз
	ФЗ_ОбновитьСостоянияРаспределений = ФоновыеЗадания.Выполнить("ДопМодульСервер.ОбновитьСостоянияРаспределений", ДопПараметры,, "ДопМодульСервер_ОбновитьСостоянияРаспределений");
	ФЗ_ОбновитьСостоянияРаспределений.ОжидатьЗавершения();
	
КонецПроцедуры

//+++АК SHEP 2018.10.11 ИП-00020109
Процедура ОжидатьЗавершенияРаспределенийВФоне(НомераРаспределенийСтр, Длительность = 60) Экспорт
	
	ДопПараметры = Новый Массив;
	ДопПараметры.Добавить(Неопределено);
	ДопПараметры.Добавить(НомераРаспределенийСтр);
	
	МассивНомеровРаспределений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(НомераРаспределенийСтр, "'", ""), ",", Истина, Истина);
	Пока Истина Цикл
		Попытка
			ФЗ_ОбновитьСостоянияРаспределений = ФоновыеЗадания.Выполнить("ДопМодульСервер.ОбновитьСостоянияРаспределений", ДопПараметры,, "ДопМодульСервер_ОбновитьСостоянияРаспределений");
			ФЗ_ОбновитьСостоянияРаспределений.ОжидатьЗавершения(Длительность);
		Исключение
		КонецПопытки;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РаспределенияТоваров.УИД
			|ПОМЕСТИТЬ УИДыРаспределений
			|ИЗ
			|	РегистрСведений.РаспределенияТоваров КАК РаспределенияТоваров
			|ГДЕ
			|	РаспределенияТоваров.Номер В(&МассивНомеровРаспределений)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СостоянияРаспределенийТоваровСрезПоследних.УИД,
			|	СостоянияРаспределенийТоваровСрезПоследних.Состояние
			|ПОМЕСТИТЬ СостоянияРаспределений
			|ИЗ
			|	РегистрСведений.СостоянияРаспределенийТоваров.СрезПоследних(
			|			,
			|			УИД В
			|				(ВЫБРАТЬ
			|					УИДыРаспределений.УИД
			|				ИЗ
			|					УИДыРаспределений КАК УИДыРаспределений)) КАК СостоянияРаспределенийТоваровСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(УИДыРаспределений.УИД) КАК Количество,
			|	СУММА(ВЫБОР
			|			КОГДА ЕСТЬNULL(СостоянияРаспределений.Состояние, """") В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.РаспределениеЗавершено), ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.ОшибкаРаспределения))
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Распределено
			|ИЗ
			|	УИДыРаспределений КАК УИДыРаспределений
			|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияРаспределений КАК СостоянияРаспределений
			|		ПО УИДыРаспределений.УИД = СостоянияРаспределений.УИД");
		Запрос.УстановитьПараметр("МассивНомеровРаспределений", МассивНомеровРаспределений);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаЗапроса.Следующий();
			Если ВыборкаЗапроса.Количество = ВыборкаЗапроса.Распределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Пауза(Длительность);
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК SHEP 2018.07.31 ИП-00019254
Процедура ОбработатьРаспределенияВОчереди() Экспорт
	
	МассивФоновыхЗаданий = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РаспределенияТоваров.Номер,
		|	СостоянияРаспределенийТоваровСрезПоследних.УИД КАК УИДРаспределения
		|ИЗ
		|	РегистрСведений.РаспределенияТоваров КАК РаспределенияТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияРаспределенийТоваров.СрезПоследних КАК СостоянияРаспределенийТоваровСрезПоследних
		|		ПО РаспределенияТоваров.УИД = СостоянияРаспределенийТоваровСрезПоследних.УИД
		|ГДЕ
		|	СостоянияРаспределенийТоваровСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.ВОчереди)
		|	И ЕСТЬNULL(РаспределенияТоваров.Номер, """") <> """"");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВремХран = ПоместитьВоВременноеХранилище(Ложь);
	
	НужнаЗапятая = Ложь;
	НомераРаспределенийСтр = "";
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ФоновоеЗадание = ОтправитьДляРаспределенияВФоне(ВыборкаЗапроса.УИДРаспределения);
		Если ФоновоеЗадание <> Неопределено Тогда
			МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
		КонецЕсли;
		
		НомераРаспределенийСтр = НомераРаспределенийСтр + ?(НужнаЗапятая, ",", "") + ВыборкаЗапроса.Номер;
		НужнаЗапятая = Истина;
	КонецЦикла;
	
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		
		ДопПараметры = Новый Массив;
		ДопПараметры.Добавить(НомераРаспределенийСтр);
		ДопПараметры.Добавить(АдресВремХран);
		
		ФоновыеЗадания.Выполнить("ДопМодульСервер.ОбновитьСостоянияРаспределенийВФоне", ДопПараметры,, "ОбновитьСостоянияРаспределений_19254");
		
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий);
		Исключение
		КонецПопытки;
		
		ПоместитьВоВременноеХранилище(Истина, АдресВремХран);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.07.31 ИП-00019254
Функция ОтправитьДляРаспределенияВФоне(УИДРаспределения) Экспорт
	
	ИмяМетодаРаспределения = "ДопМодульСервер.ОтправитьДанныеДляРаспределенияПоТТ_19254";
	Если ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода,Ключ", ИмяМетодаРаспределения, УИДРаспределения)).Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ФоновыеЗадания.Выполнить(ИмяМетодаРаспределения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УИДРаспределения), УИДРаспределения, "РаспределениеТоваровПоТорговымТочкам_19254");
	
	// ПОКА ЗАКОММЕНТИРОВАЛ
	//ТекстЗапросаSQL = "
	//	|EXEC M2..prepare_raspr
	//	|";
	//
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//Попытка
	//	ADOСоединение.Execute(ТекстЗапросаSQL);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	
КонецФункции

//+++АК SHEP 2018.08.28 ИП-00019254
Процедура Пауза(Секунд) Экспорт
	ЗапуститьПриложение("ping 127.0.0.1 -w 1000 -n " + Формат(Секунд, "ЧГ="), , Истина);
КонецПроцедуры

//Процедура к текущему списку номенклатуры, добавляет полные аналоги и комплектующие комплектов
Процедура ДобавитьАналогиИКомплекты(мСписокНоменклатуры) Экспорт	
	
	//+++shae 2018.11.22 закомментировала
	//Если ТипЗнч(мСписокНоменклатуры) = Тип("СписокЗначений") Тогда 
	//	мМассивВыбранныхТоваров = мСписокНоменклатуры.ВыгрузитьЗначения();
	//Иначе
	//	мМассивВыбранныхТоваров = Новый (мСписокНоменклатуры);
	//КонецЕсли;
	//
	//Если мМассивВыбранныхТоваров.Количество() > 0 Тогда
	//	
	//	мМассивПолныхАналогов = ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(мМассивВыбранныхТоваров);
	//	Для Каждого ТекНоменклатура Из мМассивПолныхАналогов Цикл
	//		Если мСписокНоменклатуры.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
	//			мСписокНоменклатуры.Добавить(ТекНоменклатура);
	//		КонецЕсли;
	//	КонецЦикла;
	//	мМассивСоставаКомплекта = ДопМодульСервер.ПолучитьМассивСоставаКомплекта(мМассивВыбранныхТоваров);
	//	Для Каждого ТекНоменклатура Из мМассивСоставаКомплекта Цикл
	//		Если мСписокНоменклатуры.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
	//			мСписокНоменклатуры.Добавить(ТекНоменклатура);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//---shae 2018.11.22 закомментировала
	
	//+++shae 2018.11.22
	Если ТипЗнч(мСписокНоменклатуры) = Тип("СписокЗначений") Тогда 
		ДобавитьАналогиИКомплектыПоСпискуНоменклатуры(мСписокНоменклатуры);
	ИначеЕсли ТипЗнч(мСписокНоменклатуры) = Тип("Массив") Тогда	
		мСписок = Новый СписокЗначений();
		мСписок.ЗагрузитьЗначения(мСписокНоменклатуры);
		ДобавитьАналогиИКомплектыПоСпискуНоменклатуры(мСписок);	
		мСписокНоменклатуры = мСписок.ВыгрузитьЗначения();
	КонецЕсли;
	//--shae 2018.11.22
	
КонецПроцедуры

//+++shae 2018.11.22
Процедура ДобавитьАналогиИКомплектыПоСпискуНоменклатуры(мСписокНоменклатуры)	
	
	мМассивВыбранныхТоваров = мСписокНоменклатуры.ВыгрузитьЗначения();
	
	Если мМассивВыбранныхТоваров.Количество() > 0 Тогда
		
		мМассивПолныхАналогов = ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(мМассивВыбранныхТоваров);
		Для Каждого ТекНоменклатура Из мМассивПолныхАналогов Цикл
			Если мСписокНоменклатуры.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
				мСписокНоменклатуры.Добавить(ТекНоменклатура);
			КонецЕсли;
		КонецЦикла;
		мМассивСоставаКомплекта = ДопМодульСервер.ПолучитьМассивСоставаКомплекта(мМассивВыбранныхТоваров);
		Для Каждого ТекНоменклатура Из мМассивСоставаКомплекта Цикл
			Если мСписокНоменклатуры.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
				мСписокНоменклатуры.Добавить(ТекНоменклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры

//+++АК SHEP 2018.07.23 ИП-00019254
&НаСервере
Функция ЕстьПодобноеРаспределениеТовара(ТекстИДТоваров, СкладХранения) Экспорт
	
	//+++АК SHEP 2018.10.09 ИП-00020026: поменял условие:
	//|	И НЕ СостоянияРаспределенийТоваровСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.РасходникиЗагружены)");
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияРаспределенийТоваровСрезПоследних.Период КАК Дата,
		|	РегистрСведенийРаспределенияТоваров.УИД,
		|	РегистрСведенийРаспределенияТоваров.Номер,
		|	РегистрСведенийРаспределенияТоваров.СтруктурноеПодразделение,
		|	РегистрСведенийРаспределенияТоваров.Склад,
		|	РегистрСведенийРаспределенияТоваров.ИдентификаторыТТ,
		|	РегистрСведенийРаспределенияТоваров.ИдентификаторыТоваров,
		|	РегистрСведенийРаспределенияТоваров.ПоВсемТоварам,
		|	РегистрСведенийРаспределенияТоваров.Автор,
		|	ПРЕДСТАВЛЕНИЕ(РегистрСведенийРаспределенияТоваров.Автор) КАК ПредставлениеАвтора,
		|	СостоянияРаспределенийТоваровСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияРаспределенийТоваров.СрезПоследних(, Период >= &НачалоПериода) КАК СостоянияРаспределенийТоваровСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределенияТоваров КАК РегистрСведенийРаспределенияТоваров
		|		ПО СостоянияРаспределенийТоваровСрезПоследних.УИД = РегистрСведенийРаспределенияТоваров.УИД
		|ГДЕ
		|	РегистрСведенийРаспределенияТоваров.Склад = &Склад
		|	И НЕ РегистрСведенийРаспределенияТоваров.ЭтоПредварительноеРаспределение
		|	И НЕ СостоянияРаспределенийТоваровСрезПоследних.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.РасходникиЗагружены), ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.ОшибкаРаспределения))");
	Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата() - 6 * 60*60); // минус 6 часов
	Запрос.УстановитьПараметр("Склад", СкладХранения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат Ложь; КонецЕсли;
	
	ПоВсемТоварам = ПустаяСтрока(ТекстИДТоваров) ИЛИ ВРег(СокрЛП(ТекстИДТоваров)) = "NULL";
	мМассивТоваров = ?(ПоВсемТоварам, Новый Массив, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстИДТоваров, ",", Истина, Истина));
	
	БылиСовпадения = Ложь;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		Если НЕ ПоВсемТоварам И НЕ ВыборкаЗапроса.ПоВсемТоварам Тогда
			// определяем, совпадают ли товары
			мМассивТоваровРаспределения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаЗапроса.ИдентификаторыТоваров, ",", Истина, Истина);
			
			мЕстьСовпадение = Ложь;
			Для Каждого СтрокаТовара Из мМассивТоваров Цикл
				Если мМассивТоваровРаспределения.Найти(СтрокаТовара) <> Неопределено Тогда
					мЕстьСовпадение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			мЕстьСовпадение = Истина;
		КонецЕсли;
		
		БылиСовпадения = БылиСовпадения ИЛИ мЕстьСовпадение;
		Если мЕстьСовпадение Тогда
			Сообщить("Есть подобное распределение: №" + ВыборкаЗапроса.Номер + ", запустил: " + ВыборкаЗапроса.ПредставлениеАвтора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат БылиСовпадения;
	
КонецФункции

//+++АК LATV 2018.11.01 ИП-00020308
&НаСервере
Функция ЕстьНеОбработанныеЗадания(ДатаРаспределения, СписокТоваров, СкладХранения)

	Результат = Ложь;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеНаРазборку.Склад.Представление КАК Склад,
		|	ЗаданиеНаРазборку.Ссылка.Представление КАК Ссылка,
		|	ЗаданиеНаРазборку.Номенклатура.Представление КАК Номенклатура
		|ИЗ
		|	Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
		|ГДЕ
		|	ЗаданиеНаРазборку.Дата >= &ДатаРаспределения
		|	И ЗаданиеНаРазборку.Склад = &СкладХранения
		|	И ЗаданиеНаРазборку.Номенклатура В(&СписокТоваров)
		|	И НЕ ЗаданиеНаРазборку.ПометкаУдаления
		|	И НЕ ЗаданиеНаРазборку.Закрыто
		|
		|УПОРЯДОЧИТЬ ПО
		|	Склад,
		|	Ссылка,
		|	Номенклатура");
	
	Запрос.УстановитьПараметр("ДатаРаспределения",	ДатаРаспределения);
	Запрос.УстановитьПараметр("СкладХранения",		СкладХранения);
	Запрос.УстановитьПараметр("СписокТоваров",		СписокТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Склад %1. Документ ""%2"" с номенклатурой ""%3"" не обработан.'")
				, Выборка.Склад, Выборка.Ссылка, Выборка.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ИдентификаторыТоваров(Товары) Экспорт

	ТекстИДТоваров = "";
	
	Если ТипЗнч(Товары) = Тип("Массив") Тогда 
		МассивТоваров = Товары;
	Иначе
		МассивТоваров = Товары.ВыгрузитьЗначения();
	КонецЕсли;
	
	ДанныеТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивТоваров, "id_tov");
	Для Каждого ТекТовар Из МассивТоваров Цикл
		ТекстИДТоваров = ТекстИДТоваров + "," + Формат(ДанныеТоваров.Получить(ТекТовар), "ЧГ=0");
	КонецЦикла;
	
	ТекстИДТоваров = Сред(ТекстИДТоваров, 2);
	Если НЕ ТекстИДТоваров = "" Тогда
		ТекстИДТоваров = "'" + ТекстИДТоваров + "'";
	Иначе
		ТекстИДТоваров = "NULL";
	КонецЕсли;
	
	Возврат ТекстИДТоваров;

КонецФункции


///////////////////////////////////////////////
// ОБОРУДОВАНИЕ

Процедура Оборудование_ПерепроведениеРасходников(мДата, мСклад, МассивОС) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, мДата);
	Запрос.УстановитьПараметр("Склад"				, мСклад);
	Запрос.Параметры.Вставить("СписокОборудования"	, МассивОС);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФинансовыйОбороты.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(
	|			&ДатаНачала,
	|			,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ККМ),
	|			,
	|			Субконто2 = &Склад
	|				И Субконто3 В (&СписокОборудования),
	|			,
	|			) КАК ФинансовыйОбороты
	|ГДЕ
	|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
	|	ИЛИ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.СписаниеОС
	|	ИЛИ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПеремещениеОС
	|	ИЛИ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ИнвентаризацияОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФинансовыйОбороты.Регистратор.МоментВремени";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	//
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектДокумента = Выборка.Регистратор.ПолучитьОбъект();
		Попытка
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Перепроведен документ " + ОбъектДокумента);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры	


//////////////////////////////////////////////
// Доставка на ТТ

Функция ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговыеТочки_старый(мДата) Экспорт
//	
//	ТекстДаты = Формат(мДата, "ДФ='yyyy-MM-dd'");
//	
//	ТекстЗапроса =
//	"If OBJECT_ID('tempdb..#tabTT') Is Not Null
//	|Drop Table #tabTT
//	|;
//	|If OBJECT_ID('tempdb..#tabCFO') Is Not Null
//	|Drop Table #tabCFO
//	|;
//	|If OBJECT_ID('tempdb..#tabStoimost') Is Not Null
//	|Drop Table #tabStoimost
//	|   
//	|;
//	|Select
//	|   SprStrEd._IDRRef as _tt,
//	|	UINy_TT._Fld4946 as UIN_TT,
//	|   VT_TT.ShopNo as NomerTochki,
//	|	VT_TT.Vremya as Vremya, VT_TT.IsTransport IsTransport
//	|Into #tabTT
//	|From
//	|	(Select
//	|		dbo_Pokazat_800_kod.ShopNo as ShopNo,
//	|		dbo_Pokazat_800_kod.Vremya as Vremya, 0 IsTransport
//	|	From
//	|		SMS_Izbenka.dbo.Pokazat_800_kod as dbo_Pokazat_800_kod (nolock)
//	|	Where
//	|		dbo_Pokazat_800_kod.дата = '" + ТекстДаты + "'
//	|   
//	|	Union All
//	|   
//	|	SELECT ISNULL(TransportSystem._Fld2756, TD_Data.ShopNo_rep) as ShopNo, 
//	|	CASE WHEN TransportSystem._Fld9407 IS null THEN TD_Data.TimeDelivery ELSE DATEADD(YEAR, -2000, TransportSystem._Fld9407) END as TimeDelivery,
//	|	CASE WHEN TransportSystem._Fld9407 IS null THEN 0 ELSE 1 END
//	|FROM (SELECT
//	|	T2._Fld2756,
//	|	T1._Fld9407
//	|	FROM IzbenkaFin.dbo._Document3036_VT3639 T1 WITH(NOLOCK)
//	|	LEFT OUTER JOIN IzbenkaFin.dbo._Reference42 T2 WITH(NOLOCK)
//	|	ON T1._Fld3641RRef = T2._IDRRef
//	|	LEFT OUTER JOIN IzbenkaFin.dbo._Document3036 T3 WITH(NOLOCK)
//	|	ON T1._Document3036_IDRRef = T3._IDRRef
//	|	WHERE (T1._Fld9407 <> '2001-01-01T00:00:00') AND (T3._Marked = 0x00)
//	|		AND CONVERT(date, DATEADD(YEAR, -2000, T3._Date_Time)) = '" + ТекстДаты + "') as TransportSystem
//	|		
//	|FULL OUTER JOIN (Select
//	|			TD.ShopNo_rep,
//	|			MAX(Cast(TD.time_delivery as datetime)) as TimeDelivery
//	|		From
//	|			SMS_Repl.dbo.TD_move as TD (nolock)
//	|		Where
//	|			Convert(Date, TD.opendate) = '" + ТекстДаты + "'
//	|		   And TD.time_delivery is not null
//	|		   And Not TD.time_delivery = '00:00:00.0000000'
//	|		   GROUP BY TD.ShopNo_rep) as TD_Data
//	|		ON TransportSystem._Fld2756 = TD_Data.ShopNo_rep) as VT_TT
//	| Inner Join IzbenkaFin.dbo._Reference42 as SprStrEd (nolock)
//	| On SprStrEd._Fld2756 = VT_TT.ShopNo
//	| Inner Join IzbenkaFin.dbo._InfoRg4943 as UINy_TT (nolock)
//	| On UINy_TT._Fld4944_RRRef = SprStrEd._IDRRef
//	|Where
//	|	VT_TT.Vremya is not null
//	|	And Not DateName(HOUR, VT_TT.Vremya) = 0
//	|	And ((SprStrEd._Fld2375RRef = 0x9BB6516D4A2CBD01442F121AD79A4CEF
//	|		And (DateName(HOUR, VT_TT.Vremya) > 10
//	|			Or (DateName(HOUR, VT_TT.Vremya) = 10
//	|				And DateName(MINUTE, VT_TT.Vremya) > 30)))
//	|		Or ((SprStrEd._Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22
//	|			And (DateName(HOUR, VT_TT.Vremya) > 8
//	|				Or (DateName(HOUR, VT_TT.Vremya) = 8
//	|					And DateName(MINUTE, VT_TT.Vremya) > 30)))))
//	|
//	|;
//	|Select
//	|	Reg_CFO._Fld822RRef as _TT,
//	|	UINy_TT._Fld4946 as UIN_CFO
//	|Into #tabCFO
//	|From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
//	| Inner Join
//	|  (Select
//	|		Reg_CFO._Fld822RRef as _TT,
//	|		Max(Reg_CFO._Period) as _Period
//	|	From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
//	|	Group By
//	|		Reg_CFO._Fld822RRef) as Reg_CFO_Max
//	| On Reg_CFO_Max._TT = Reg_CFO._Fld822RRef
//	|	And Reg_CFO_Max._Period = Reg_CFO._Period
//	| Inner Join IzbenkaFin.dbo._InfoRg4943 as UINy_TT (nolock)
//	| On UINy_TT._Fld4944_RRRef = Reg_CFO._Fld823RRef
//	|Where
//	|	Reg_CFO._Fld822RRef In
//	|		(Select
//	|			tabTT._tt
//	|		From #tabTT as tabTT)
//	|
// 	|;
//	|Select
//	|	VT_Stoimost.id_kontr as id_kontr,
//	|	VT_Stoimost._TT as _TT,
//	|	SUM(VT_Stoimost.Stavka) as Summa
//	|Into #tabStoimost
//	|From
//	|	(Select
//	|		Spr_kontr._Fld1159 as id_kontr,
//	|		Reg_Stoimost._Fld3966RRef as _TT,
//	|		Reg_Stoimost._Fld3967 * 0.5 as Stavka
//	|	From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
//	|	 Inner Join
//	|		(Select
//	|			Reg_Stoimost._Fld3966RRef as _TT,
//	|			Reg_Stoimost._Fld5570RRef as GrDost,
//	|			Max(Reg_Stoimost._Period) as _Period
//	|		From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
//	|		Group By
//	|			Reg_Stoimost._Fld3966RRef,
//	|			Reg_Stoimost._Fld5570RRef) as Reg_Stoimost_Max
//	|	 On Reg_Stoimost_Max._TT = Reg_Stoimost._Fld3966RRef
//	|		And Reg_Stoimost_Max.GrDost = Reg_Stoimost._Fld5570RRef
//	|		And Reg_Stoimost_Max._Period = Reg_Stoimost._Period
//	|	 Inner Join IzbenkaFin.dbo._Reference27 as Spr_kontr (nolock)
//	|	 On Spr_kontr._IDRRef = Reg_Stoimost._Fld3965RRef
//	|	Where
//	|		Reg_Stoimost._Fld3966RRef In
//	|			(Select
//	|				tabTT._tt
//	|			From #tabTT as tabTT)) as VT_Stoimost   
//	|Group By
//	|	VT_Stoimost.id_kontr,
//	|	VT_Stoimost._TT
//   	|
//	|;
//	|Select
//	|   tabTT.UIN_TT as UIN_TT,
//	|   tabTT.Vremya as Vremya,
//	|	tabTT.IsTransport,
//	|   tabCFO.UIN_CFO as UIN_CFO,
//	|   tabStoimost.id_kontr as id_kontr,
//	|   IsNull(tabStoimost.Summa, 0) as Summa
//	|From #tabTT as tabTT
//	| Left Outer Join #tabCFO as tabCFO
//	| On tabCFO._TT = tabTT._tt
//	| Left Outer Join #tabStoimost as tabStoimost
//	| On tabStoimost._TT = tabTT._tt
//	|
//	|;
//	|Drop Table #tabTT
//	|;
//	|Drop Table #tabCFO
//	|;
//	|Drop Table #tabStoimost";
//	
//	Возврат ТекстЗапроса;
//	
КонецФункции


Функция ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговыеТочки(мДата) Экспорт
	
	ТекстДаты = Формат(мДата, "ДФ='yyyy-MM-dd'");
	
	ТекстЗапроса =
	"If OBJECT_ID('tempdb..#tabTT') Is Not Null
	|Drop Table #tabTT
	|;
	|If OBJECT_ID('tempdb..#tabCFO') Is Not Null
	|Drop Table #tabCFO
	|;
	|If OBJECT_ID('tempdb..#tabStoimost') Is Not Null
	|Drop Table #tabStoimost
	|   
	|;
	|Select
	|   SprStrEd._IDRRef as _tt,
	|	UINy_TT._Fld4946 as UIN_TT,
	|   VT_TT.ShopNo as NomerTochki, VT_TT.IsTransport IsTransport,
	|	VT_TT.Vremya as Vremya
	|Into #tabTT
	|From
	|	(Select
	|		dbo_Pokazat_800_kod.ShopNo as ShopNo,
	|		dbo_Pokazat_800_kod.Vremya as Vremya, 0 IsTransport
	|	From
	|		SMS_Izbenka.dbo.Pokazat_800_kod as dbo_Pokazat_800_kod (nolock)
	|	Where
	|		dbo_Pokazat_800_kod.дата = '" + ТекстДаты + "'
	|   
	|	Union All
	|   
	|	SELECT ISNULL(TransportSystem._Fld2756, TD_Data.ShopNo_rep) as ShopNo, 
	|	CASE WHEN TransportSystem._Fld9407 IS null THEN TD_Data.TimeDelivery ELSE DATEADD(YEAR, -2000, TransportSystem._Fld9407) END as TimeDelivery,
	|	CASE WHEN TransportSystem._Fld9407 IS null THEN 0 ELSE 1 END
	|FROM (SELECT
	|	T2._Fld2756,
	|	T1._Fld9407
	|	FROM IzbenkaFin.dbo._Document3036_VT3639 T1 WITH(NOLOCK)
	|	LEFT OUTER JOIN IzbenkaFin.dbo._Reference42 T2 WITH(NOLOCK)
	|	ON T1._Fld3641RRef = T2._IDRRef
	|	LEFT OUTER JOIN IzbenkaFin.dbo._Document3036 T3 WITH(NOLOCK)
	|	ON T1._Document3036_IDRRef = T3._IDRRef
	|	WHERE (T1._Fld9407 <> '2001-01-01T00:00:00') AND (T3._Marked = 0x00)
	|		AND CONVERT(date, DATEADD(YEAR, -2000, T3._Date_Time)) = '" + ТекстДаты + "') as TransportSystem
	|		
	|FULL OUTER JOIN (Select
	|			TD.ShopNo_rep,
	|			MAX(Cast(TD.time_delivery as datetime)) as TimeDelivery
	|		From
	|			SMS_Repl.dbo.TD_move as TD (nolock)
	|		Where
	|			Convert(Date, TD.opendate) = '" + ТекстДаты + "'
	|		   And TD.time_delivery is not null
	|		   And Not TD.time_delivery = '00:00:00.0000000'
	|		   GROUP BY TD.ShopNo_rep) as TD_Data
	|		ON TransportSystem._Fld2756 = TD_Data.ShopNo_rep) as VT_TT
	| Inner Join IzbenkaFin.dbo._Reference42 as SprStrEd (nolock)
	| 		Inner Join IzbenkaFin.dbo._enum2374 as tipTT on SprStrEd._fld2375rref=tipTT._idRref and tipTT._enumorder=1
	| On SprStrEd._Fld2756 = VT_TT.ShopNo
	| Inner Join IzbenkaFin.dbo._InfoRg4943 as UINy_TT (nolock)
	| On UINy_TT._Fld4944_RRRef = SprStrEd._IDRRef
	|Where
	|	VT_TT.Vremya is not null
	|	And Not DateName(HOUR, VT_TT.Vremya) = 0 And 
	|  (
	|  (
	|( (SprStrEd._Fld2375RRef = 0x9BB6516D4A2CBD01442F121AD79A4CEF
	|		And (Cast(DateName(HOUR, VT_TT.Vremya) as int) > 10
	|			Or (Cast(DateName(HOUR, VT_TT.Vremya) as int) = 10
	|				And Cast(DateName(MINUTE, VT_TT.Vremya) as int) > 30)))
	|		Or ((SprStrEd._Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22
	|			And (Cast(DateName(HOUR, VT_TT.Vremya) as int) > 8
	|				Or (Cast(DateName(HOUR, VT_TT.Vremya) as int) = 8
	|					And Cast(DateName(MINUTE, VT_TT.Vremya)as int) > 30))))) and SprStrEd._Fld9449='2001-01-01T00:00:00')   or
	|(
	|SprStrEd._Fld9449<>'2001-01-01T00:00:00' and (
	|
	|Cast(DateName(HOUR, VT_TT.Vremya) as int) > Cast(DateName(HOUR, SprStrEd._Fld9449) as int)    
	|			Or (
	|Cast(DateName(HOUR, VT_TT.Vremya) as int) = Cast(DateName(HOUR, SprStrEd._Fld9449)as int)
	|				And Cast(DateName(MINUTE, VT_TT.Vremya) as int)  > Cast(DateName(MINUTE, SprStrEd._Fld9449) as int)
	|
	|)  
	|)
	|)
	|) 
	|;
	|Select
	|	Reg_CFO._Fld822RRef as _TT,
	|	UINy_TT._Fld4946 as UIN_CFO
	|Into #tabCFO
	|From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
	| Inner Join
	|  (Select
	|		Reg_CFO._Fld822RRef as _TT,
	|		Max(Reg_CFO._Period) as _Period
	|	From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
	|	Group By
	|		Reg_CFO._Fld822RRef) as Reg_CFO_Max
	| On Reg_CFO_Max._TT = Reg_CFO._Fld822RRef
	|	And Reg_CFO_Max._Period = Reg_CFO._Period
	| Inner Join IzbenkaFin.dbo._InfoRg4943 as UINy_TT (nolock)
	| On UINy_TT._Fld4944_RRRef = Reg_CFO._Fld823RRef
	|Where
	|	Reg_CFO._Fld822RRef In
	|		(Select
	|			tabTT._tt
	|		From #tabTT as tabTT)
	|
	|;
	|Select
	|	VT_Stoimost.id_kontr as id_kontr,
	|	VT_Stoimost._TT as _TT,
	|	SUM(VT_Stoimost.Stavka) as Summa
	|Into #tabStoimost
	|From
	|	(Select
	|		Spr_kontr._Fld1159 as id_kontr,
	|		Reg_Stoimost._Fld3966RRef as _TT,
	|		Reg_Stoimost._Fld3967 * 0.5 as Stavka
	|	From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|	 Inner Join(Select Reg_Stoimost_Max._TT as _TT, Reg_Stoimost_Max.GrDost as GrDost, Reg_Stoimost_Max._Period as _Period, Reg_Stoimost.RecordDate  as RecordDate
	|
	|From
	|		(Select
	|			Reg_Stoimost._Fld3966RRef as _TT,
	|			Reg_Stoimost._Fld5570RRef as GrDost,
	|			Max(Reg_Stoimost._Period) as _Period
	|		From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|		Group By
	|			Reg_Stoimost._Fld3966RRef,
	|			Reg_Stoimost._Fld5570RRef) as Reg_Stoimost_Max
	|	 Inner Join
	|		(Select
	|			Reg_Stoimost._Fld3966RRef as _TT,
	|			Reg_Stoimost._Fld5570RRef as GrDost, 
	|			Reg_Stoimost._Period as _Period,
	|			Max(Reg_Stoimost._Fld5607) as RecordDate
	|		From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|		Group By
	|			Reg_Stoimost._Fld3966RRef,
	|			Reg_Stoimost._Fld5570RRef,
	|			Reg_Stoimost._Period) as Reg_Stoimost
	|	 On Reg_Stoimost_Max._TT = Reg_Stoimost._TT
	|		And Reg_Stoimost_Max.GrDost = Reg_Stoimost.GrDost
	|		And Reg_Stoimost_Max._Period = Reg_Stoimost._Period
	|) as Reg_Stoimost_Max1
	|	 On Reg_Stoimost_Max1._TT = Reg_Stoimost._Fld3966RRef
	|		And Reg_Stoimost_Max1.GrDost = Reg_Stoimost._Fld5570RRef
	|		And Reg_Stoimost_Max1._Period = Reg_Stoimost._Period
	|		And Reg_Stoimost_Max1.RecordDate = Reg_Stoimost._Fld5607
	|	 Inner Join IzbenkaFin.dbo._Reference27 as Spr_kontr (nolock)
	|	 On Spr_kontr._IDRRef = Reg_Stoimost._Fld3965RRef
	|	Where
	|		Reg_Stoimost._Fld3966RRef In
	|			(Select
	|				tabTT._tt
	|			From #tabTT as tabTT)) as VT_Stoimost   
	|Group By
	|	VT_Stoimost.id_kontr,
	|	VT_Stoimost._TT
	|
	|;
	|Select
	|   tabTT.UIN_TT as UIN_TT,
	|   tabTT.Vremya as Vremya, 
	|	tabTT.IsTransport,
	|   tabCFO.UIN_CFO as UIN_CFO,
	|   tabStoimost.id_kontr as id_kontr,
	|   IsNull(tabStoimost.Summa, 0) as Summa
	|From #tabTT as tabTT
	| Left Outer Join #tabCFO as tabCFO
	| On tabCFO._TT = tabTT._tt
	| Left Outer Join #tabStoimost as tabStoimost
	| On tabStoimost._TT = tabTT._tt
	|
	|;
	|Drop Table #tabTT
	|;
	|Drop Table #tabCFO
	|;
	|Drop Table #tabStoimost";
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговуюТочку(мДата, мТорговаяТочка) Экспорт
	
	ТекстДаты 			= Формат(мДата, "ДФ='yyyy-MM-dd'");
	ТекстНомераТочки 	= Формат(мТорговаяТочка.НомерТочки, "ЧГ=");
	
	ТекстЗапроса =
	"If OBJECT_ID('tempdb..#tabTT') Is Not Null
	|Drop Table #tabTT
	|;
	|If OBJECT_ID('tempdb..#tabCFO') Is Not Null
	|Drop Table #tabCFO
	|;
	|If OBJECT_ID('tempdb..#tabStoimost') Is Not Null
	|Drop Table #tabStoimost
	|   
	|;
	|Select
	|   SprStrEd._IDRRef as _tt,
	|	VT_TT.Vremya as Vremya
	|Into #tabTT
	|From
	|	(Select
	|		dbo_Pokazat_800_kod.Vremya as Vremya
	|	From
	|		SMS_Izbenka.dbo.Pokazat_800_kod as dbo_Pokazat_800_kod (nolock)
	|	Where
	|		dbo_Pokazat_800_kod.дата = '" + ТекстДаты + "'
	|       And dbo_Pokazat_800_kod.ShopNo = " + ТекстНомераТочки + " 
	|   
	|	Union All
	|   
	|	Select
	|		Min(Cast(TD.time_delivery as datetime))
	|	From
	|		SMS_Repl.dbo.TD_move as TD (nolock)
	|	Where
	|		Convert(Date, TD.opendate) = '" + ТекстДаты + "'
	|       And TD.ShopNo_rep = " + ТекстНомераТочки + "
	|       And TD.time_delivery is not null
	|       And Not TD.time_delivery = '00:00:00.0000000') as VT_TT
	| Inner Join IzbenkaFin.dbo._Reference42 as SprStrEd (nolock)
	| On SprStrEd._Fld2756 = " + ТекстНомераТочки + "
	|Where
	|	VT_TT.Vremya is not null
	|	And Not DateName(HOUR, VT_TT.Vremya) = 0
	|	And ((SprStrEd._Fld2375RRef = 0x9BB6516D4A2CBD01442F121AD79A4CEF
	|		And (DateName(HOUR, VT_TT.Vremya) > 10
	|			Or (DateName(HOUR, VT_TT.Vremya) = 10
	|				And DateName(MINUTE, VT_TT.Vremya) > 30)))
	|		Or ((SprStrEd._Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22
	|			And (DateName(HOUR, VT_TT.Vremya) > 8
	|				Or (DateName(HOUR, VT_TT.Vremya) = 8
	|					And DateName(MINUTE, VT_TT.Vremya) > 30)))))
    |
	|;
	|Select
	|	UINy_TT._Fld4946 as UIN_CFO
	|Into #tabCFO
	|From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
	| Inner Join
	|  (Select
	|		Reg_CFO._Fld822RRef as _TT,
	|		Max(Reg_CFO._Period) as _Period
	|	From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
	|	Group By
	|		Reg_CFO._Fld822RRef) as Reg_CFO_Max
	| On Reg_CFO_Max._TT = Reg_CFO._Fld822RRef
	|	And Reg_CFO_Max._Period = Reg_CFO._Period
	| Inner Join IzbenkaFin.dbo._InfoRg4943 as UINy_TT (nolock)
	| On UINy_TT._Fld4944_RRRef = Reg_CFO._Fld823RRef
	|Where
	|	Reg_CFO._Fld822RRef In
	|		(Select
	|			tabTT._tt
	|		From #tabTT as tabTT)
    |
 	|;
	|Select
	|	VT_Stoimost.id_kontr as id_kontr,
	|	SUM(VT_Stoimost.Stavka) as Summa
	|Into #tabStoimost
	|From
	|	(Select
	|		Spr_kontr._Fld1159 as id_kontr,
	|		Reg_Stoimost._Fld3967 * 0.5 as Stavka
	|	From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|	 Inner Join
	|		(Select
	|			Reg_Stoimost._Fld3966RRef as _TT,
	|			Reg_Stoimost._Fld5570RRef as GrDost,
	|			Max(Reg_Stoimost._Period) as _Period
	|		From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|		Group By
	|			Reg_Stoimost._Fld3966RRef,
	|			Reg_Stoimost._Fld5570RRef) as Reg_Stoimost_Max
	|	 On Reg_Stoimost_Max._TT = Reg_Stoimost._Fld3966RRef
	|		And Reg_Stoimost_Max.GrDost = Reg_Stoimost._Fld5570RRef
	|		And Reg_Stoimost_Max._Period = Reg_Stoimost._Period
	|	 Inner Join IzbenkaFin.dbo._Reference27 as Spr_kontr (nolock)
	|	 On Spr_kontr._IDRRef = Reg_Stoimost._Fld3965RRef
	|	Where
	|		Reg_Stoimost._Fld3966RRef In
	|			(Select
	|				tabTT._tt
	|			From #tabTT as tabTT)) as VT_Stoimost   
	|Group By
	|	VT_Stoimost.id_kontr
   	|
	|;
	|Select
	|   tabTT.Vremya as Vremya,
	|   tabCFO.UIN_CFO as UIN_CFO,
	|   tabStoimost.id_kontr as id_kontr,
	|   IsNull(tabStoimost.Summa, 0) as Summa
	|From #tabTT as tabTT
	| Left Outer Join #tabCFO as tabCFO
	| On 1 = 1
	| Left Outer Join #tabStoimost as tabStoimost
	| On 1 = 1
    |
	|;
	|Drop Table #tabTT
	|;
	|Drop Table #tabCFO
	|;
	|Drop Table #tabStoimost";
	
	Возврат ТекстЗапроса;
	
КонецФункции


///////////////////////////////////////////////
// АУТСОРСИНГ

Функция ПолучитьКонтрагентаСотрудника(ТекСотрудник)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаСотрудников", ТекСотрудник.ГруппаСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент
	|ИЗ
	|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(, ГруппаСотрудников = &ГруппаСотрудников) КАК КонтрагентыСотрудниковАутсорсингСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции
	
Процедура ДобавитьЗаписьВЖурналУчетаСотрудниковАутсорсинг() Экспорт
	
	Если НЕ ПараметрыСеанса.ТекущийПродавец.Пустая() Тогда
		ТекИД = ПараметрыСеанса.ТекущийПродавец.Код;
		Пока Лев(ТекИД, 1) = "0" Цикл
			ТекИД = Сред(ТекИД, 2);
		КонецЦикла;
		Попытка
			ТекСотрудникАутсорсинг = Справочники.СотрудникиАутсорсинг.НайтиПоРеквизиту("ИД", Число(ТекИД));
			Если НЕ ТекСотрудникАутсорсинг.Пустая()
					 И НЕ ПараметрыСеанса.ТорговаяТочкаПоАйпи.Пустая() Тогда
				МенеджерЗаписи = РегистрыСведений.ЖурналУчетаСотрудниковАутсорсинг.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ДатаОтметки 		= ТекущаяДата();
				МенеджерЗаписи.Сотрудник 		= ТекСотрудникАутсорсинг;
				МенеджерЗаписи.ТорговаяТочка 	= ПараметрыСеанса.ТорговаяТочкаПоАйпи;
				МенеджерЗаписи.Контрагент		= ПолучитьКонтрагентаСотрудника(ТекСотрудникАутсорсинг);
				МенеджерЗаписи.Должность		= ТекСотрудникАутсорсинг.Должность;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущуюГруппуСотрудниковАутсорсинг() Экспорт
	
	Если РольДоступна("ОтветственныйЗаРаботуСАутсорсингом")  //Тогда //РольДоступна("ОтветственныйЗаРаботуАутсорсинг") Тогда //+++---AK ziga  20173110
		ИЛИ РольДоступна("СотрудникАутсорсинг") 
			ИЛИ РольДоступна("СотрудникАутсорсингНСИ") Тогда //+++АК mika 2018.03.21 ИП-00018199
		Возврат ПараметрыСеанса.ТекущийПользователь.ГруппаСотрудниковАутсорсинг;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
