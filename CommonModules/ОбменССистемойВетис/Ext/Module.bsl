
///////////////////////////////////////////////////////////////
////////////// ФУНКЦИИ ПОДКЛЮЧЕНИЯ К API //////////////////////
///////////////////////////////////////////////////////////////

Процедура УстановитьЛогинПарольПрокси(Прокси,Настройки)
	//	Login: automacon-170503
	//Password: Ds8Zq8N5
	//APIKey: YmQ4ODE2NTItYjdkNS00YjgyLWE2ZDQtNWYyZDQ2Njg0MDU4ZDRlMjY0NzQtN2NjMy00MTYzLWFlNmYtYWRjZDA0YzQyMDI1
	//ServiceID: mercury-g2b.service
	//IssuerID: 
	//d4e26474-7cc3-4163-ae6f-adcd04c42025 (ООО ВКУСВИЛЛ), 
	//673849e1-6d71-4d06-b3a5-f6835b527433 (ООО Объединенная складская компания "ЮВиСи)
	//	ТекушийПользователь = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	////ПользовательСсылка = Справочники.Пользователи.НайтиПоКоду(СокрЛП(ТекушийПользователь));
	//	Настройки=справочники.МЙ_ПользовательВетис.НайтиПоРеквизиту("ФизЛицо", ТекушийПользователь);
	//Прокси.Пользователь = "automacon-170503";
	//Прокси.Пароль 		= "Ds8Zq8N5";	
	Прокси.Пользователь = настройки.ЛогинШлюза;
	Прокси.Пароль 		= настройки.ПарольШлюза;
	
КонецПроцедуры

Функция ПолучитьПроксиEnterprise(API) Экспорт
	
	Если API.ЭтоТестоваяСреда Тогда
		Прокси = Новый WSПрокси(
		Новый WSОпределения(API.WSDLenterprise, API.ЛогинШлюза ,API.ПарольШлюза),
		"http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort");
	Иначе
		Прокси = WSСсылки.WSEnterpriseServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort");
	КонецЕсли;
	
	УстановитьЛогинПарольПрокси(Прокси,API);
	Возврат(Прокси);
	
КонецФункции // ПолучитьПроксиEnterprise()

Функция ПолучитьПроксиDictionary(API) Экспорт
	
	Если API.ЭтоТестоваяСреда Тогда
		Прокси = Новый WSПрокси(
		Новый WSОпределения(API.WSDLdictionary, API.ЛогинШлюза ,API.ПарольШлюза),
		"http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort");
	Иначе
		Прокси = WSСсылки.WSDictionaryServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort");
	КонецЕсли;
	
	УстановитьЛогинПарольПрокси(Прокси,API);
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьПроксиProduct(API) Экспорт
	
	Если API.ЭтоТестоваяСреда Тогда
		Прокси = Новый WSПрокси(
		Новый WSОпределения(API.WSDLproduct, API.ЛогинШлюза ,API.ПарольШлюза),
		"http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService", "ProductServiceBindingQSPort");
	Иначе
		Прокси = WSСсылки.WSProductServiceBindingQSServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService", "ProductServiceBindingQSPort");
	КонецЕсли;
	
	УстановитьЛогинПарольПрокси(Прокси,API);
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьПроксиIkar(API) Экспорт
	
	Если API.ЭтоТестоваяСреда Тогда
		Прокси = Новый WSПрокси(
		Новый WSОпределения(API.WSDLikar, API.ЛогинШлюза ,API.ПарольШлюза),
		"http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService", "IkarServiceBindingQSPort");
	Иначе
		Прокси = WSСсылки.WSIkarService.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService", "IkarServiceBindingQSPort");
	КонецЕсли;
	
	УстановитьЛогинПарольПрокси(Прокси,API);
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьПараметрыПодключения(Фабрика, НастройкаAPI = Неопределено) Экспорт
	
	Если НастройкаAPI = Неопределено Тогда
		НастройкаAPI = ОсновнаяНастройкаАПИ();
	КонецЕсли; 
	
	Ответ = Новый Структура;
	
	Ответ.Вставить("serviceId", НастройкаAPI.serviceId);
	Ответ.Вставить("issuerId", НастройкаAPI.issuerId);
	Ответ.Вставить("apiKey", НастройкаAPI.apiKey);
	Ответ.Вставить("Адрес",	НастройкаAPI.адрес);
	Ответ.Вставить("Логин",	НастройкаAPI.ЛогинШлюза);
	Ответ.Вставить("Пароль", НастройкаAPI.ПарольШлюза);
	Ответ.Вставить("Порт", НастройкаAPI.Порт);
	
	Ответ.Вставить("НастройкаAPI", НастройкаAPI);
	
	Возврат Ответ;
	
КонецФункции


///////////////////////////////////////////////////////////////
///////////////// ФУНКЦИИ ЗАПРОСОВ К API //////////////////////
///////////////////////////////////////////////////////////////

//Наименование функции не всегда совпадает с наименование области. Поэтому есть параметр ПараметрыФункцииНаименование
Функция ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, ПараметрыФункцииНаименование = "", ТекстОшибки = Неопределено) Экспорт
	
	//
	Если ПараметрыФункцииНаименование = "" Тогда
		ПараметрыФункцииНаименование = ПараметрыФункции.Наименование;
	КонецЕсли;
	
	//
	ФункцияXD = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/mercury/applications", ПараметрыФункции.Наименование); 
	
	//
	ЗаполнитьЗначенияСвойств(ФункцияXD, ПараметрыФункции);
	
	//
	МассивСписков = Неопределено;
	Если ПараметрыФункции.Свойство("МассивСписков", МассивСписков) Тогда
		
		//
		Для Каждого НазваниеСписка из МассивСписков Цикл
			
			//
			ТекСписок = Неопределено;
			Если ПараметрыФункции.Свойство(НазваниеСписка, ТекСписок) Тогда
				
				//
				Для Каждого ЭлементСписка из ТекСписок Цикл
					ФункцияXD[НазваниеСписка].Добавить(ЭлементСписка.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//
	ApplicationDataWrapper 	= ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application", "ApplicationDataWrapper");
	ApplicationDataWrapper.Добавить(ФормаXML.Элемент, ФункцияXD.Тип().URIПространстваИмен, ПараметрыФункцииНаименование, ФункцияXD);
	
	//
	Application = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application", "Application");
	Application.serviceId = ПараметрыПодключения.serviceId;
	Application.issuerId = ПараметрыПодключения.issuerId;
	Application.issueDate = ТекущаяДата();
	Application.data = ApplicationDataWrapper;
	
	//
	SubmitRequestDO = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "submitApplicationRequest"); 
	SubmitRequestDO.apiKey = ПараметрыПодключения.apiKey;
	SubmitRequestDO.Application = Application;
	
	//
	EnvelopeDO = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	EnvelopeDO.Body = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Body");	
	EnvelopeDO.Body.Добавить(ФормаXML.Элемент, SubmitRequestDO.Тип().URIПространстваИмен, "submitApplicationRequest", SubmitRequestDO); 
	
	/////////////////////////////////
	//ЛОГИРОВАНИЕ
	
	//
	ТелоXML = Новый ЗаписьXML;  
	ТелоXML.УстановитьСтроку("UTF-8");  
	
	//
	ФабрикаXD.ЗаписатьXML(ТелоXML, EnvelopeDO);  
	
	//
	ТекстЗапроса = ТелоXML.Закрыть();
	
	//
	ОбменССистемойВетис.ЗаписатьВЖурналЗапросов(ПараметрыПодключения.НастройкаAPI, ПараметрыФункции.localTransactionId, ТекстЗапроса);
	
	/////////////////////////////////
	
	//
	РезультатЗапроса = ВыполнитьЗапрос(ТекстЗапроса, ПараметрыПодключения, ФабрикаXD, EnvelopeDO, ПараметрыФункции.localTransactionId, ТекстОшибки);
	
	//
	Возврат РезультатЗапроса;	
	
КонецФункции

Функция ВыполнитьЗапрос(Строка, ПараметрыПодключения, ФабрикаXD, EnvelopeDO, ИдентификаторЗапроса, ТекстОшибки = Неопределено) 
	
	Если EnvelopeDO = Неопределено Тогда
		EnvelopeDO = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	КонецЕсли;
	
	ЗапросWeb = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	ЗапросWeb.УстановитьТелоИзСтроки(Строка);  
	
	СоединениеWeb = Новый HTTPСоединение(ПараметрыПодключения.Адрес, ПараметрыПодключения.Порт, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,,Истина);  
	ОтветWeb = СоединениеWeb.ОтправитьДляОбработки(ЗапросWeb);  
	
	Если (ОтветWeb.КодСостояния <> 200) Тогда 
		ТекстОшибки = "Ошибка при отправке запроса"+Строка(ОтветWeb.КодСостояния);
		ОбменССистемойВетис.ЗаписатьВЖурналЗапросов(ПараметрыПодключения.НастройкаAPI, ИдентификаторЗапроса, ТекстОшибки, Истина);
		Сообщить(ТекстОшибки);		
		Возврат(""); 
	КонецЕсли;
	
	// десериализуем  
	ОтветXML = Новый ЧтениеXML;  
	ОтветXML.УстановитьСтроку(ОтветWeb.ПолучитьТелоКакСтроку("UTF-8"));  
	
	MercAppDO = ФабрикаXD.ПрочитатьXML(ОтветXML, EnvelopeDO.Тип()).Body.submitApplicationResponse.application;  
	
	// возможные статусы:  
	// ACCEPTED   Заявка принята.  
	// IN_PROCESS Заявка обрабатывается.  
	// COMPLETED  Заявка успешно обработана.  
	// REJECTED   Заявка отклонена.  
	Если НЕ (MercAppDO.status = "ACCEPTED") Тогда 
		ТекстОшибки = "Запрос вернулся со статусом " + MercAppDO.status;
		ОбменССистемойВетис.ЗаписатьВЖурналЗапросов(ПараметрыПодключения.НастройкаAPI, ИдентификаторЗапроса, ТекстОшибки, Истина);
		Сообщить(ТекстОшибки);
		Возврат(""); 
	КонецЕсли;
	
	receiveRequestDO = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "receiveApplicationResultRequest");
	receiveRequestDO.apiKey			= ПараметрыПодключения.apiKey;
	receiveRequestDO.issuerID 		= ПараметрыПодключения.issuerID;
	receiveRequestDO.applicationId 	= MercAppDO.applicationId;
	
	EnvelopeDO.Body = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Body");	
	EnvelopeDO.Body.Добавить(ФормаXML.Элемент, receiveRequestDO.Тип().URIПространстваИмен, "receiveApplicationResultRequest", receiveRequestDO);
	
	ТелоXML = Новый ЗаписьXML;  
	ТелоXML.УстановитьСтроку("UTF-8");  
	ФабрикаXD.ЗаписатьXML(ТелоXML, EnvelopeDO);  
	Строка = ТелоXML.Закрыть();
	
	ЗапросWeb = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	ЗапросWeb.УстановитьТелоИзСтроки(Строка);
	
	Пока Истина Цикл
		//ОбработкаПрерыванияПользователя();
		ОтветWeb = СоединениеWeb.ОтправитьДляОбработки(ЗапросWeb);
		Если (ОтветWeb.КодСостояния <> 200) Тогда 
			ТекстОшибки = "Ошибка при получении ответа на запрос";
			ОбменССистемойВетис.ЗаписатьВЖурналЗапросов(ПараметрыПодключения.НастройкаAPI, ИдентификаторЗапроса, ТекстОшибки, Истина);
			Сообщить(ТекстОшибки);
			Возврат(""); 
		КонецЕсли;
		
		// десериализуем  
		ОтветXML = Новый ЧтениеXML;  
		ОтветXML.УстановитьСтроку(ОтветWeb.ПолучитьТелоКакСтроку("UTF-8"));
		MercAppDO1 = ФабрикаXD.ПрочитатьXML(ОтветXML, EnvelopeDO.Тип()).Body.receiveApplicationResultResponse.application;
		Если MercAppDO1.Status = "IN_PROCESS" Тогда
			//Предупреждение("Ждем ответа", 1);			
		Иначе
			ОтветСтрока = ОтветWeb.ПолучитьТелоКакСтроку("UTF-8");
			ОбменССистемойВетис.ЗаписатьВЖурналЗапросов(ПараметрыПодключения.НастройкаAPI, ИдентификаторЗапроса, ОтветСтрока, Истина);			
			Если MercAppDO1.status <> "COMPLETED" Тогда
				Сообщить("Запрос к внешней системе вернулся со статусом " + MercAppDO1.status, СтатусСообщения.ОченьВажное);
				ТекстОшибки = ОтветWeb.ПолучитьТелоКакСтроку("UTF-8");				
				ОбменССистемойВетис.СообщитьОбОшибке(ТекстОшибки);
				Возврат("");
			Иначе
				Возврат(MercAppDO1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
	
КонецФункции 

//Так как безумная 1С-ка с локальным неймспейсом не дружит - разберем XML вручную по-быстрому
Процедура СообщитьОбОшибке(СтрокаXML) Экспорт
	ЧтениеXML = Новый ЧтениеXML;  
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "apl:error" Тогда
			Пока ЧтениеXML.Прочитать() И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Цикл
				Сообщить(ЧтениеXML.Значение);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры


///////////////////////////////////////////////////////////////
///////////// ФУНКЦИИ СОЗДАНИЯ/ЗАПОЛНЕНИЯ ОБЪЕКТОВ ////////////
///////////////////////////////////////////////////////////////

Функция ПолучитьListOptionsИзПрокси(Прокси) Экспорт
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 100;	
	Возврат(ListOptions);
КонецФункции

Функция ПолучитьListOptionsИзФабрики(Фабрика) Экспорт
	ListOptions = ПолучитьОбъектXDTO(Фабрика, "bs:ListOptions");
	ListOptions.count = 100;
	Возврат(ListOptions);
КонецФункции

Функция ПолучитьФабрикуXDTOApplicationManagements() Экспорт
	
	ОпределениеWS = WSСсылки.WSApplicationManagementsServiceTest.ПолучитьWSОпределения();
	// создаем врем. фабрику на основе пакетов из конфиги и web сервиса  
	// нам нужны 2 пакета из ws, но пакет с application нужен локальный  
	МассивURI = Новый Массив;  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	МассивURI.Добавить("http://schemas.xmlsoap.org/soap/envelope");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application");  
	МассивURI.Добавить("http:/api.vetrf.ru/schema/cdm/base");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/argus/common");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/cerberus/enterprise");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/ikar");  
	
	ФабрикаWS = Новый ФабрикаXDTO(ОпределениеWS.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURI), ФабрикаXDTO.Пакеты);  
	
	// добавим 2 пакета, которые нужны, но есть только локально  
	Пакеты = Новый Массив;  
	
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/cerberus/enterprise"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/production"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/common"));
	
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/vet-document"));
	
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	Для Каждого Пакет Из ФабрикаWS.Пакеты Цикл  
		Пакеты.Добавить(Пакет);  
	КонецЦикла;  
	
	// создаем общую фабрику  
	ФабрикаXD = Новый ФабрикаXDTO(, Пакеты);
	
	Возврат(ФабрикаXD);
	
КонецФункции // ПолучитьФабрикуXDTOApplication()

Функция ПолучитьФабрикуXDTOEnterpiseService() Экспорт
	
	ОпределениеWS = WSСсылки.WSEnterpriseServiceTest.ПолучитьWSОпределения();
	// создаем врем. фабрику на основе пакетов из конфиги и web сервиса  
	// нам нужны 2 пакета из ws, но пакет с application нужен локальный  
	МассивURI = Новый Массив;  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	МассивURI.Добавить("http://schemas.xmlsoap.org/soap/envelope");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application");  
	МассивURI.Добавить("http:/api.vetrf.ru/schema/cdm/base");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/argus/common");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/cerberus/enterprise");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/ikar");  
	
	ФабрикаWS = Новый ФабрикаXDTO(ОпределениеWS.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURI), ФабрикаXDTO.Пакеты);  
	
	// добавим 2 пакета, которые нужны, но есть только локально  
	Пакеты = Новый Массив;  
	
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/cerberus/enterprise"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/production"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/common"));
	
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/vet-document"));
	
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	Для Каждого Пакет Из ФабрикаWS.Пакеты Цикл  
		Пакеты.Добавить(Пакет);  
	КонецЦикла;  
	
	// создаем общую фабрику  
	ФабрикаXD = Новый ФабрикаXDTO(, Пакеты);
	
	Возврат(ФабрикаXD);
	
КонецФункции

Функция ПолучитьДатуИзФабрики(ФабрикаXD, Дата) Экспорт
	ДатаXD = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/base", "ComplexDate");
	ДатаXD.year		= Год(Дата);
	ДатаXD.month	= Формат(Месяц(Дата),"ЧЦ=2; ЧВН=");
	ДатаXD.day		= Формат(День(Дата),"ЧЦ=2; ЧВН=");
	ДатаXD.hour		= "00";
	Возврат(ДатаXD);	
КонецФункции

Функция ПолучитьСписокТиповПродуктов() Экспорт
	Список = Новый СписокЗначений();
	Список.Добавить(1, "Мясо и мясопродукты");
	Список.Добавить(2, "Корма и кормовые добавки");
	Список.Добавить(3, "Живые животные");
	Список.Добавить(4, "Лекарственные средства");
	Список.Добавить(5, "Пищевые продукты");
	Список.Добавить(6, "Непищевые продукты и другое");
	Список.Добавить(7, "Рыба и морепродукты");
	Список.Добавить(8, "--");
	Возврат(Список);
КонецФункции

Функция ПолучитьСписокСтатусовЗаписейЖурнала() Экспорт
	Список = Новый СписокЗначений();
	Список.Добавить("100", "Запись создана.");
	Список.Добавить("102", "Отправлена. Запись создана хозяйствующим субъектом и отправлена в ГВЭ на рассмотрение.");
	Список.Добавить("110", "Запись создана в результате объединения двух или более других.");
	Список.Добавить("120", "Запись создана в результате разделения другой.");
	Список.Добавить("200", "В запись были внесены изменения.");
	Список.Добавить("201", "Запись журнала аннулирована.");
	Список.Добавить("202", "Запись продукции изменена путём списания. Необязательно, чтобы продукция была списана полностью, может быть списана и часть объёма.");
	Список.Добавить("230", "Запись была обновлена в результате присоединения другой.");
	Список.Добавить("240", "Запись была обновлена в результате отделения от неё другой.");
	Список.Добавить("300", "Запись была перемещена в другую группу (для иерархических справочников).");
	Список.Добавить("400", "Запись была удалена.");
	Список.Добавить("410", "Запись была удалена в результате объединения.");
	Список.Добавить("420", "Запись была удалена в результате разделения.");
	Список.Добавить("430", "Запись была удалена в результате присоединения.");
	Возврат(Список);
КонецФункции // ПолучитьСписокСтатусовЗаписейЖурнала()

//Создает и заполняет объект "user"
//
Функция ПолучитьUserИзФабрики(Фабрика, ИмяПользователя = "", ИДПользователя = "") Экспорт
	
	User = ПолучитьОбъектXDTO(Фабрика, "argc:User");
	
	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		User.login = ИмяПользователя;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИДПользователя) Тогда
		User.uuid = ИДПользователя;
	КонецЕсли;
	
	Возврат(User);
	
КонецФункции

//Создает и заполняет свйоства ВСД "отправитель" или "получатель" по ГУИДу предприятия и хозсубъекта
//
Функция ВернутьОтправительПолучатель(ФабрикаXD, Guid, GuidBE) Экспорт
	
	КонтрагентXDTO = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:BusinessMember"); //!!!!!!!!!!!!!!!!!
	КонтрагентXDTO.businessEntity = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:BusinessEntity");
	КонтрагентXDTO.businessEntity.guid = GuidBE;
	КонтрагентXDTO.enterprise = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:Enterprise");
	КонтрагентXDTO.enterprise.guid = Guid;
	
	Возврат КонтрагентXDTO;
	
КонецФункции

Функция ПолучитьСтраннуюДату(ФабрикаXD, Фирсдата = '00010101', Секондата = '00010101') Экспорт
	СтраннаяДата = ПолучитьОбъектXDTO(ФабрикаXD, "vetd:GoodsDate");
	Если ЗначениеЗаполнено(Фирсдата) Тогда
		СтраннаяДата.firstDate = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "bs:ComplexDate");
		СтраннаяДата.firstDate.day = День(Фирсдата);
		СтраннаяДата.firstDate.hour = Час(Фирсдата);
		СтраннаяДата.firstDate.month = Месяц(Фирсдата);
		СтраннаяДата.firstDate.year = Год(Фирсдата);
	КонецЕсли;
	Если ЗначениеЗаполнено(Секондата) Тогда
		СтраннаяДата.secondDate = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "bs:ComplexDate");
		СтраннаяДата.secondDate.day = День(Секондата);
		СтраннаяДата.secondDate.hour = Час(Секондата);
		СтраннаяДата.secondDate.month = Месяц(Секондата);
		СтраннаяДата.secondDate.year = Год(Секондата);
	КонецЕсли;
	Возврат СтраннаяДата;
КонецФункции

//Создает объект XDTO по описанию "как в хэлпе"
//
Функция ПолучитьОбъектXDTO(Фабрика, Описание) Экспорт
	Разделитель = Найти(Описание, ":");
	ИмяУри = Лев(Описание, Разделитель - 1);
	Имя = Прав(Описание, СтрДлина(Описание) - Разделитель);
	Возврат Фабрика.Создать(СтруктураURI()[ИмяУри], Имя);
КонецФункции

//Сопоставление URI и описаний "как в хэлпе"
Функция СтруктураURI() Экспорт
	СтрОбозначений = Новый Структура;
	СтрОбозначений.Вставить("argc", "http://api.vetrf.ru/schema/cdm/argus/common");
	СтрОбозначений.Вставить("argpr", "http://api.vetrf.ru/schema/cdm/argus/production");
	СтрОбозначений.Вставить("bs", "http://api.vetrf.ru/schema/cdm/base");
	СтрОбозначений.Вставить("ent", "http://api.vetrf.ru/schema/cdm/cerberus/enterprise");
	СтрОбозначений.Вставить("ikar", "http://api.vetrf.ru/schema/cdm/ikar");
	СтрОбозначений.Вставить("shp", "http://api.vetrf.ru/schema/cdm/argus/shipment");
	СтрОбозначений.Вставить("vetd", "http://api.vetrf.ru/schema/cdm/mercury/vet-document");
	СтрОбозначений.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	Возврат СтрОбозначений;
КонецФункции


///////////////////////////////////////////////////////////////
///////////////// ФУНКЦИИ ПРЕОБРАЗОВАНИЯ //////////////////////
///////////////////////////////////////////////////////////////

Функция ПривестиКДате(Значение) Экспорт
	
	//
	Результат = Неопределено;
	
	ДатаСтрокой = "";
	
	Для Сч = 1 По СтрДлина(Значение) Цикл
		ОчереднойСимвол = Сред(Значение, Сч, 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(ОчереднойСимвол) Тогда
			ДатаСтрокой = ДатаСтрокой + ОчереднойСимвол;
		КонецЕсли; 
		
		Если СтрДлина(ДатаСтрокой) = 14 Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	//
	Попытка
		Результат = Дата(ДатаСтрокой);	
	Исключение
	КонецПопытки;
	
	//
	Возврат Результат;	
	
КонецФункции

Функция ПривестиКБулеву(Значение) Экспорт
	
	
	Если Значение = "true" Тогда
		Возврат Истина;		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции 


///////////////////////////////////////////////////////////////
///////////////////// СЛУЖЕБНЫЕ ФУНКЦИИ ///////////////////////
///////////////////////////////////////////////////////////////

Функция ПолучитьСвойствоОбъектаXDTO(ОбъектХDTO, ИмяСвойства) Экспорт
	
	Если ОбъектХDTO.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбъектХDTO[ИмяСвойства];
	КонецЕсли; 
	
КонецФункции

//Общая функция по определению текущей основной настройки АПИ
//
Функция ОсновнаяНастройкаАПИ() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_НастройкиAPI.Ссылка
	|ИЗ
	|	Справочник.МЙ_НастройкиAPI КАК МЙ_НастройкиAPI
	|ГДЕ
	|	НЕ МЙ_НастройкиAPI.ПометкаУдаления
	|	И МЙ_НастройкиAPI.ИспользоватьПоУмолчанию");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Сообщить("Не указана настройка подключения к ВЕТИС по умолчанию!", СтатусСообщения.ОченьВажное);
	
	Возврат Неопределено; 
КонецФункции

Функция НастройкаАпиПоОрганизации(Организация) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_НастройкиAPI.Ссылка
	|ИЗ
	|	Справочник.МЙ_НастройкиAPI КАК МЙ_НастройкиAPI
	|ГДЕ
	|	НЕ МЙ_НастройкиAPI.ПометкаУдаления
	|	И МЙ_НастройкиAPI.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Сообщить("Не указана настройка подключения к ВЕТИС по организации " + Строка(Организация), СтатусСообщения.ОченьВажное);
	
	Возврат Неопределено; 
КонецФункции





//Общая функция по определению пользователя ВЕТИС, ассоциированного с
//текущим пользователем системы либо общего пользователя ветис (если с текущим пользователем ничего не ассоциировано)
Функция ПолучитьАссоциированногоПользователя(Пользователь, Организация) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_ПользовательВетис.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА МЙ_ПользовательВетис.ПользовательСистемы = &Пользователь
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сортировщик
	|ИЗ
	|	Справочник.МЙ_ПользовательВетис КАК МЙ_ПользовательВетис
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МЙ_НастройкиAPI КАК МЙ_НастройкиAPI
	|		ПО (МЙ_НастройкиAPI.ИспользоватьПоУмолчанию)
	|			И (НЕ МЙ_НастройкиAPI.ПометкаУдаления)
	|ГДЕ
	|	НЕ МЙ_ПользовательВетис.ПометкаУдаления
	|	И МЙ_ПользовательВетис.Организация = &Организация
	|	И (МЙ_ПользовательВетис.ПользовательСистемы = &Пользователь
	|			ИЛИ МЙ_ПользовательВетис.ПользовательСистемы = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировщик");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Организация", Организация);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить("Не указан пользователь ВЕТИС для текущего пользователя системы или по умолчанию!", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;
	Выб = Рез.Выбрать();
	Выб.Следующий();
	Возврат Выб.Ссылка;
КонецФункции

Функция ПолучитьПараметрыФункции(НаименованиеФункции, ФабрикаXD, НастройкаAPI) Экспорт
	
	ПараметрыФункции = Новый Структура("Наименование", НаименованиеФункции);
	
	ПараметрыФункции.Вставить("localTransactionId",	Строка(Новый УникальныйИдентификатор));
	
	ПользовательВетис = ОбменССистемойВетис.ПолучитьАссоциированногоПользователя(ПараметрыСеанса.ТекущийПользователь, НастройкаAPI.Организация);		
	
	ПараметрыФункции.Вставить("initiator", ОбменССистемойВетис.ПолучитьUserИзФабрики(ФабрикаXD, ПользовательВетис.login));		
	
	Возврат ПараметрыФункции;
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////
///////////////////// ЛОГИРОВАНИЕ ЗАПРОСОВ /////////////////////////
////////////////////////////////////////////////////////////////////////////

Процедура ЗаписатьВЖурналЗапросов(НастройкаAPI, ИдентификаторЗапроса, Текст,  ЭтоОтвет = Ложь) Экспорт
	
	Если НЕ НастройкаAPI.ВестиЛогированиеЗапросов Тогда
		Возврат;
	КонецЕсли; 
	
	МЗ = РегистрыСведений.МЙ_ЖурналЗапросов.СоздатьМенеджерЗаписи();
	
	МЗ.ИдентификаторЗапроса = ИдентификаторЗапроса;
	
	МЗ.Прочитать();
	
	МЗ.ИдентификаторЗапроса = ИдентификаторЗапроса;
	
	Если ЭтоОтвет Тогда
		МЗ.Ответ = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных(9));
	Иначе
		МЗ.Запрос = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных(9));		
		МЗ.ДатаЗапроса = ТекущаяДата();
	КонецЕсли; 
	
	МЗ.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
///////////////////// ПРИКЛАДНЫЕ ФУНКЦИИ //////////////////////////
////////////////////////////////////////////////////////////////////////////

// Загружает данные по ВСД из Ветис. 
// Если указан UUID  - загружается один ВСД, при условии, что он не загружался ранее. Результат = UUID, если ВСД успешно загружен (или был загружен до этого).
// Если указан период - загружаются все ВСД, по которым были проведены изменения за указанный период. Результат содержит список UUID всех измененых ВСД
// При неудачной загрузке Результат = Неопределено.
Функция ЗагрузитьВСД(НастройкаAPI = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, UUID = Неопределено, СтруктурнаяЕдиница = Неопределено, Организация = Неопределено, ПроверитьЗагруженныеДанные = Ложь, Ошибка = "") Экспорт
	
	// По UUID загружаем только новые ВСД
	Если ЗначениеЗаполнено(UUID) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	МЙ_ВетеринарныеДокументы.UUID
		|ИЗ
		|	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
		|ГДЕ
		|	МЙ_ВетеринарныеДокументы.UUID = &UUID");
		
		Запрос.УстановитьПараметр("UUID", UUID);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Возврат UUID;
		КонецЕсли; 
	КонецЕсли;
	
	// Настройки подключения
	
	Если НастройкаAPI = Неопределено Тогда
		Если ЗначениеЗаполнено(Организация) = Истина Тогда
			НастройкаAPI = ОбменССистемойВетис.НастройкаАпиПоОрганизации(Организация);
		Иначе	
			НастройкаAPI = ОбменССистемойВетис.ОсновнаяНастройкаАПИ();		
		КонецЕсли;	
	КонецЕсли;			
	
	Если ЗначениеЗаполнено(НастройкаAPI) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Организация = НастройкаAPI.Организация;
	
	ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();
	
	ПараметрыПодключения 	= ОбменССистемойВетис.ПолучитьПараметрыПодключения(ФабрикаXD, НастройкаAPI);
	
	НовыеКонтрагентыGUID = Новый Массив;
	
	// Настройки вызова операции
	Если ЗначениеЗаполнено(UUID) Тогда
		
		ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("getVetDocumentByUuidRequest", ФабрикаXD, НастройкаAPI);
		
		ПараметрыФункции.Вставить("UUID", UUID);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	МЙ_ПоднадзорныеОбъекты.GUID
		|ИЗ
		|	РегистрСведений.МЙ_ПоднадзорныеОбъекты КАК МЙ_ПоднадзорныеОбъекты
		|ГДЕ
		|	МЙ_ПоднадзорныеОбъекты.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|	И МЙ_ПоднадзорныеОбъекты.Организация = &Организация");
		
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли; ;   
		
		ПараметрыФункции.Вставить("enterpriseGuid", Выборка.GUID);		
		
		Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения);
		
		Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
			Возврат Неопределено;
		КонецЕсли;		
		
		VetDocument = Ответ.result.getVetDocumentByUuidResponse.vetDocument;
		
		//+++АК LATV 2018.07.14 ИП-00019272
		Если ПроверитьЗагруженныеДанные
		   И Не ПроверитьВСД(VetDocument, ПараметрыФункции) Тогда
			Возврат Неопределено;
		КонецЕсли;
		//+++АК LATV Конец
		
		//++ХЖК Тип ТТН
		СерияТТН = ПолучитьСвойствоОбъектаXDTO(VetDocument, "waybillSeries");
		ТипТТН = ПолучитьСвойствоОбъектаXDTO(VetDocument, "waybillType");
		
		Если ТипТТН <> "1" Тогда 
			Ошибка = "Загружаемый ВСД будет невозможно погасить из 1С (ошибка - тип ТТН не равен ""Товарно-транспортная  накладная"")!."; 
		Иначе
			Если Не ПустаяСтрока(СокрЛП(СерияТТН)) Тогда
				Ошибка = "Загружаемый ВСД будет невозможно погасить из 1С ошибка - заполнена серия ТТН)!."; 
			КонецЕсли;
		КонецЕсли;
		//--ХЖК
		
		СоздатьОбновитьВСД(VetDocument, Организация, НовыеКонтрагентыGUID, НастройкаAPI);   
		
		Результат = UUID;
		
	Иначе
		
		ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("getVetDocumentChangesListRequest", ФабрикаXD, НастройкаAPI);
		
		ПараметрыФункции.Вставить("listOptions", ПолучитьListOptionsИзФабрики(ФабрикаXD));				
		ПараметрыФункции.listOptions.count = 1000;
		
		Если ДатаНачала = Неопределено Тогда
			ДатаНачала = НачалоДня(ТекущаяДата());
		КонецЕсли; 
		
		Если ДатаОкончания = Неопределено Тогда
			ДатаНачала = КонецДня(ДатаНачала);
		КонецЕсли; 
		
		updateDateInterval = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "bs:DateInterval");
		
		updateDateInterval.beginDate = ДатаНачала;
		updateDateInterval.endDate = ДатаОкончания;
		
		ПараметрыФункции.Вставить("updateDateInterval", updateDateInterval);
		
		// Получим созданные/измененные ВСД по каждой зарегистрированной структурной единице (подназдорному объекту)	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	МЙ_ПоднадзорныеОбъекты.GUID
		|ИЗ
		|	РегистрСведений.МЙ_ПоднадзорныеОбъекты КАК МЙ_ПоднадзорныеОбъекты
		|ГДЕ
		|	МЙ_ПоднадзорныеОбъекты.ЗагружатьВСД
		|	И МЙ_ПоднадзорныеОбъекты.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Результат = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			ПараметрыФункции.Вставить("enterpriseGuid", Выборка.Guid);
			
			ПродолжитьЗагрузку = Истина;
			Смещение = 0;
			
			Пока ПродолжитьЗагрузку Цикл
				ПараметрыФункции.ListOptions.offset = Смещение;
				
				Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения);
				
				Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
					ПродолжитьЗагрузку = Ложь;
					Продолжить;
				КонецЕсли;		
				
				ОтветСписок = Ответ.result.getVetDocumentChangesListResponse.vetDocumentList;
				
				Если Число(ОтветСписок.Count) = 0 Тогда 
					ПродолжитьЗагрузку = Ложь;
					Продолжить;
				КонецЕсли;		
				
				Смещение = Смещение + Число(ОтветСписок.Count);
				
				Если ТипЗНЧ(ОтветСписок.VetDocument) = Тип("СписокXDTO") Тогда
					Для Каждого VetDocument из ОтветСписок.VetDocument Цикл
						СоздатьОбновитьВСД(VetDocument, Организация, НовыеКонтрагентыGUID, НастройкаAPI);
						Результат.Добавить(ПолучитьСвойствоОбъектаXDTO(VetDocument, "UUID"));
					КонецЦикла;
				Иначе
					СоздатьОбновитьВСД(ОтветСписок.VetDocument, Организация, НовыеКонтрагентыGUID, НастройкаAPI);   
					Результат.Добавить(ПолучитьСвойствоОбъектаXDTO(ОтветСписок.VetDocument, "UUID"));			
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;    	
		
	КонецЕсли; 
	
	// Получим из Ветиса данные по новым контрагентам (ХС)
	Если НовыеКонтрагентыGUID.Количество() > 0 Тогда
		Прокси = ОбменССистемойВетис.ПолучитьПроксиEnterprise(НастройкаAPI);	
		
		Для Каждого GUID ИЗ НовыеКонтрагентыGUID Цикл
			СоздатьОбновитьСоответствиеКонтрагента(Прокси, GUID);
		КонецЦикла;  
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

//+++АК LATV 2018.07.19 ИП-00019319
Функция ПроверитьВСД(ОбъектВетис, ПараметрыФункции)

	//Обработка структуры XDTO ОбъектВетис скопирована из процедуры СоздатьОбновитьВСД
	
	Результат = Истина;
	
	// Загружаем в попытке, ибо в Ветисе возможны разнообразные нюансы
	Попытка 
		
		// Статус ВСД
		status = Справочники.МЙ_СтатусВСД.НайтиПоКоду(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "status"));
		Если status = Справочники.МЙ_СтатусВСД.WITHDRAWN Тогда //Аннулирован. Не действующий более сертификат.
			Результат = Ложь;
			
			ТекстОшибки = НСтр("ru = 'Документ аннулирован. Не действующий более сертификат'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ветис. Ошибка проверки загруженного ВСД: %1'"), ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "GUID");
		КонецЕсли;
		
		// Получатель
		consignee = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "consignee");	 
		
		Если consignee <> Неопределено Тогда
			Enterprise = ПолучитьСвойствоОбъектаXDTO(consignee , "Enterprise");	 
			
			Если Enterprise <> Неопределено Тогда
				consigneeGuid = consignee.Enterprise.Guid;	
				Если consigneeGuid <> ПараметрыФункции.enterpriseGuid Тогда
					Результат = Ложь;
					
					// Вывод сообщения
					Получатель = ПоднадзорныйОбъект(consigneeGuid);
					Если Получатель = Неопределено Тогда
						Получатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '<Не найден> (%1)'"), consigneeGuid);
					КонецЕсли;
					
					Текущий = ПоднадзорныйОбъект(ПараметрыФункции.enterpriseGuid);
					Если Текущий = Неопределено Тогда
						Текущий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '<Не найден> (%1)'"), ПараметрыФункции.enterpriseGuid);
					КонецЕсли;
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Получатель документа %1 отличается от выбранного %2'"), Получатель, Текущий);
						
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ветис. Ошибка проверки загруженного ВСД: %1'"), ТекстОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СтруктурнаяЕдиница");
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ветис. Ошибка проверки загруженного ВСД: %1'"), ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Результат = Ложь;
		
		ЗаписьЖурналаРегистрации("Ветис", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());		
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

//+++АК LATV 2018.07.14 ИП-00019272
Функция ПоднадзорныйОбъект(UUID)

	Результат = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МЙ_ПоднадзорныеОбъекты.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.МЙ_ПоднадзорныеОбъекты КАК МЙ_ПоднадзорныеОбъекты
		|ГДЕ
		|	МЙ_ПоднадзорныеОбъекты.GUID = &GUID");
	
	Запрос.УстановитьПараметр("GUID", UUID);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура СоздатьОбновитьВСД(ОбъектВетис, Организация, НовыеКонтрагентыGUID, НастройкаAPI = Неопределено) Экспорт
	
	Если НастройкаAPI = Неопределено Тогда
		НастройкаAPI = ОбменССистемойВетис.ОсновнаяНастройкаАПИ();
	КонецЕсли;
	
	// Загружаем в попытке, ибо в Ветисе возможны разнообразные нюансы
	Попытка 
		
		МЗ = РегистрыСведений.МЙ_ВетеринарныеДокументы.СоздатьМенеджерЗаписи();
		
		МЗ.UUID = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "UUID");				
		
		МЗ.Прочитать();
		
		МЗ.UUID = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "UUID");
		
		// Номер и дата ВСД
		МЗ.issueSeries = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "issueSeries");   
		МЗ.issueNumber = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "issueNumber");
		МЗ.issueDate = ОбменССистемойВетис.ПривестиКДате(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "issueDate"));		
		
		//Тип ВСД.
		МЗ.type = Справочники.МЙ_ТипВСД.НайтиПоКоду(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "type"));	
		
		// Форма ВСД
		МЗ.form = Справочники.МЙ_ФормаВетеринарногоСертификата.НайтиПоКоду(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "form"));			
		
		// Статус ВСД
		МЗ.status = Справочники.МЙ_СтатусВСД.НайтиПоКоду(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "status"));
		
		// Сведения о партии продукции
		Если ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "batch") <> Неопределено Тогда
			
			МЗ.productType=справочники.МЙ_ТипыПродукции.НайтиПоКоду(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "productType"));	//productType	Тип продукции. Первый уровень иерархического справочника продукции ИС Меркурий.	argpr:ProductType	0..1
			
			product = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "product"); //product	Продукция. Второй уровень иерархического справочника продукции ИС Меркурий.	argpr:Product	0..1
			
			Если product <> Неопределено Тогда
				МЗ.product = справочники.МЙ_ВидПродукцииВетис.НайтиПоРеквизиту("GUID",  product.GUID);				
				МЗ.productGuid = product.GUID;
				
				Если МЗ.product.Пустая() Тогда
					Сообщить("Не найден вид продукции ВЕТИС с идентификатором " + МЗ.productGuid + "!!!", СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли; 
			
			subProduct = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "subProduct");	//subProduct	Вид продукции. Третий уровень иерархического справочника продукции ИС Меркурий.	argpr:SubProduct	0..1
			
			Если subProduct <> Неопределено Тогда
				МЗ.subProduct = справочники.МЙ_ПродукцияВетис.НайтиПоРеквизиту("GUID", subProduct.GUID);			
				МЗ.subProductGuid = subProduct.GUID;
				
				Если МЗ.subProduct.Пустая() Тогда
					Сообщить("Не найдена продукция ВЕТИС с идентификатором " + МЗ.subProductGuid + "!!!", СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли; 
			
			productItem = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "productItem");	//	Наименование произведенной продукции в номенклатуре производителя.	argpr:ProductItem	0..1
			
			Если productItem <> Неопределено Тогда
				МЗ.productItem = ПолучитьСвойствоОбъектаXDTO(productItem, "name"); 	
				
				МЗ.productItemGuid = ПолучитьСвойствоОбъектаXDTO(productItem, "guid"); 	
				
				Если ПустаяСтрока(МЗ.productItem) И ЗначениеЗаполнено(МЗ.productItemGuid) Тогда
					Прокси = ОбменССистемойВетис.ПолучитьПроксиProduct(НастройкаAPI);
					Ответ = Прокси.GetProductItemByGuid(МЗ.productItemGuid);
					Если ТипЗнч(Ответ) = Тип("ОбъектXDTO") Тогда
						МЗ.productItem = ПолучитьСвойствоОбъектаXDTO(Ответ, "name"); 	
					КонецЕсли; 
				КонецЕсли;    
			КонецЕсли; 
			
			МЗ.volume=Число(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "volume")); //	Объем произведенной продукции. Значение должно быть больше нуля.	bs:Decimal	0..1
			
			unit = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "unit");	 //unit	Единица измерения объема произведенной продукции.	argc:Unit	0..1
			
			Если unit <> Неопределено Тогда
				МЗ.unit = справочники.МЙ_СоответствиеЕдиницИзмерения.НайтиПоРеквизиту("GUID", unit.GUID); 	
				МЗ.unitGUID = unit.GUID; 	
			КонецЕсли; 
			
			packingList = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "packingList");	 //packingList	Список видов упаковки, которые используются для производственной партии.	argc:PackingFormList	0..1
			
			Попытка 
				Если packingList <> Неопределено Тогда
					Если ТипЗнч(packingList.packingForm) = Тип("ОбъектXDTO") Тогда
						МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоКоду(packingList.packingForm.UUid);		
						Если НЕ ЗначениеЗаполнено(МЗ.packingList) Тогда
							МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоРеквизиту("UUID", packingList.packingForm.UUid);								
						КонецЕсли; 
					ИначеЕсли ТипЗнч(packingList.packingForm) = Тип("СписокXDTO") Тогда 
						МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоКоду(packingList.packingForm[0].UUid);						
						Если НЕ ЗначениеЗаполнено(МЗ.packingList) Тогда
							МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоРеквизиту("UUID", packingList.packingForm[0].UUid);								
						КонецЕсли; 
						
					КонецЕсли; 
				КонецЕсли; 
			Исключение
			КонецПопытки; 
			
			МЗ.packingAmount=Число(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "packingAmount")); //	//packingAmount	Общее количество единиц упаковки для производственной партии.	xs:int	0..1
			
			dateOfProduction = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "dateOfProduction");	 //dateOfProduction	Дата выработки продукции. Может быть указана тремя способами: датой, диапазоном дат, строкой. В случае точной даты выработки указывается только первая компонента - firstDate.	vetd:GoodsDate	0..1
			
			Если dateOfProduction <> Неопределено Тогда
				FirstDate = ПолучитьСвойствоОбъектаXDTO(dateOfProduction, "FirstDate");
				Если FirstDate <> Неопределено Тогда
					Попытка 
												
						hour = ПолучитьСвойствоОбъектаXDTO(FirstDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;							
						
						МЗ.dateOfProduction = Дата(FirstDate.year, FirstDate.month, FirstDate.day, hour, 0, 0);					
					Исключение
					КонецПопытки; 
				КонецЕсли; 
				
				//++ АК luza ИП-00018756 01.06.2018
				SecondDate = ПолучитьСвойствоОбъектаXDTO(dateOfProduction, "SecondDate");
				Если SecondDate <> Неопределено Тогда
					Попытка 
						
						hour = ПолучитьСвойствоОбъектаXDTO(SecondDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;	
						
						МЗ.dateOfProductionEnd = Дата(SecondDate.year, SecondDate.month, SecondDate.day, hour, 0, 0);					
					Исключение
					КонецПопытки; 
				КонецЕсли; 				
				//-- АК luza ИП-00018756 01.06.2018
			КонецЕсли; 
			
			expiryDate = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "expiryDate");	 //expiryDate	Дата окончания срока годности продукции. Может быть указана тремя способами: датой, диапазоном дат, строкой. В случае точной даты выработки указывается только первая компонента - firstDate.	vetd:GoodsDate	0..1
			
			Если expiryDate <> Неопределено Тогда
				FirstDate = ПолучитьСвойствоОбъектаXDTO(expiryDate, "FirstDate");
				Если  FirstDate <> Неопределено Тогда
					Попытка 
						
						hour = ПолучитьСвойствоОбъектаXDTO(FirstDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;		
						
						МЗ.expiryDate = Дата(FirstDate.year, FirstDate.month, FirstDate.day, hour, 0, 0);				
					Исключение
					КонецПопытки; 
				КонецЕсли; 
				
				//++ АК luza ИП-00018756 01.06.2018
				SecondDate = ПолучитьСвойствоОбъектаXDTO(expiryDate, "SecondDate");
				Если SecondDate <> Неопределено Тогда
					Попытка
						
						hour = ПолучитьСвойствоОбъектаXDTO(SecondDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;
						
						МЗ.expiryDateEnd = Дата(SecondDate.year, SecondDate.month, SecondDate.day, hour, 0, 0);					
					Исключение
					КонецПопытки; 
				КонецЕсли; 				
				//-- АК luza ИП-00018756 01.06.2018
				
			КонецЕсли; 
			
			МЗ.perishable=ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "perishable"); //perishable	Описывает, является ли продукция скоропортящейся, true – скоропортящаяся, false – не скоропортящаяся.	xs:boolean	0..1
			МЗ.lowGradeCargo=ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "lowGradeCargo"); 	//lowGradeCargo	Является ли продукция некачественной.	xs:boolean	0..1
			
			producerList = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "producerList");	 
			
			Если producerList <> Неопределено Тогда
				Если ТипЗНЧ(producerList.producer) = Тип("ОбъектXDTO") Тогда
					СоздатьОбновитьСведенияОПроизводителе(producerList.producer, МЗ.UUID, 1)
					
				ИначеЕсли ТипЗНЧ(producerList.producer) = Тип("СписокXDTO") Тогда 
					Сч = 1;
					Для Каждого ОбъектXDTO Из producerList.producer Цикл
						СоздатьОбновитьСведенияОПроизводителе(ОбъектXDTO, МЗ.UUID, Сч);
						Сч = Сч + 1;
					КонецЦикла;  
					
				КонецЕсли; 
			КонецЕсли; 
			
			
			productMarkingList = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "productMarkingList");	 
			
			Если productMarkingList <> Неопределено Тогда
				Если ТипЗНЧ(productMarkingList.productMarking) = Тип("СписокXDTO") Тогда 					
					//++ АК luza ИП-00018756 21.06.2018
					МЗ.productMarking = "Доп. значения";
					
					Сч = 1;
					Для Каждого ОбъектXDTO Из productMarkingList.productMarking Цикл
						СоздатьОбновитьСведенияОМаркировке(ОбъектXDTO, МЗ.UUID, Сч);
						Сч = Сч + 1;
					КонецЦикла;
					
					//-- АК luza ИП-00018756 21.06.2018
				Иначе
					МЗ.productMarking = productMarkingList.productMarking;
				КонецЕсли; 
				
			КонецЕсли; 
			
			countryOfOrigin = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "countryOfOrigin");	 
			
			Если countryOfOrigin <> Неопределено Тогда
				МЗ.countryOfOriginGUID = countryOfOrigin.guid;
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Дата и номер ТТН
		МЗ.waybillNumber=ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "waybillNumber");//waybillNumber	Номер товарно-транспортной накладной.	vetd:Batch	0..1
		МЗ.waybillNumber = СокрЛП(МЗ.waybillNumber);
		МЗ.waybillDate=ОбменССистемойВетис.ПривестиКДате(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "waybillDate"));//waybillDate	Дата товарно-транспортной накладной.	vetd:Batch	0..1
		
		//++ХЖК Тип ТТН
		МЗ.waybillType=ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "waybillType");//waybillType  тип товарно-транспортной накладной.	vetd:Batch	0..1
		МЗ.waybillSeries=ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "waybillSeries");
		//--ХЖК
		
		// Дополнительные сведения о транспорте и грузе
		transportInfo = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "transportInfo");	 
		
		Если transportInfo <> Неопределено Тогда
			vehicleNumber = ПолучитьСвойствоОбъектаXDTO(transportInfo.transportNumber, "vehicleNumber");	 
			Если vehicleNumber <> Неопределено Тогда
				МЗ.vehicleNumber = vehicleNumber;
			КонецЕсли; 		
			
			containerNumber = ПолучитьСвойствоОбъектаXDTO(transportInfo.transportNumber, "containerNumber");	 
			Если containerNumber <> Неопределено Тогда
				МЗ.containerNumber = containerNumber;
			КонецЕсли; 		
			
			trailerNumber = ПолучитьСвойствоОбъектаXDTO(transportInfo.transportNumber, "trailerNumber");	 
			Если trailerNumber <> Неопределено Тогда
				МЗ.trailerNumber = trailerNumber;
			КонецЕсли; 		
		КонецЕсли; 
		
		transportStorageType = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "transportStorageType");
		Если Метаданные.Перечисления.МЙ_СпособыХраненияПриПеревозке.ЗначенияПеречисления.Найти(transportStorageType) <> Неопределено Тогда
			МЗ.transportStorageType = Перечисления.МЙ_СпособыХраненияПриПеревозке[transportStorageType];
		КонецЕсли; 
		
		МЗ.cargoExpertized = ОбменССистемойВетис.ПривестиКБулеву(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "cargoExpertized")); 
		МЗ.cargoInspected = ОбменССистемойВетис.ПривестиКБулеву(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "cargoInspected")); 
		МЗ.locationProsperity = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "locationProsperity"); 
		
		broker = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "broker");
		
		Если broker <> Неопределено Тогда
			МЗ.broker = ПолучитьСвойствоОбъектаXDTO(broker, "GUID");
		КонецЕсли; 
		
		
		// Вет. врач
		confirmedBy = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "confirmedBy");	 
		
		Если confirmedBy <> Неопределено Тогда
			МЗ.confirmedBy=confirmedBy.FIO;
			post = ПолучитьСвойствоОбъектаXDTO(confirmedBy, "post");	 
			Если post <> Неопределено Тогда
				МЗ.confirmedBy=МЗ.confirmedBy + Символы.ПС + post;			
			КонецЕсли; 
		КонецЕсли; 
		
		//	Особые отметки.	
		МЗ.specialMarks = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "specialMarks"); 
		
		// Отправитель 
		consignor = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "consignor");	 
		
		Если consignor <> Неопределено Тогда
			
			// Отправителя сначала ищем среди наших площадок, потом - среди контрагентов		
			МЗ.Отправитель = Неопределено;
			
			Enterprise = ПолучитьСвойствоОбъектаXDTO(consignor , "Enterprise");	 
			
			Если Enterprise <> Неопределено Тогда
				МЗ.consignorGuid = consignor.Enterprise.Guid;	
				
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	МЙ_ПоднадзорныеОбъекты.СтруктурнаяЕдиница
				|ИЗ
				|	РегистрСведений.МЙ_ПоднадзорныеОбъекты КАК МЙ_ПоднадзорныеОбъекты
				|ГДЕ
				|	МЙ_ПоднадзорныеОбъекты.GUID = &GUID");
				
				Запрос.УстановитьПараметр("GUID", МЗ.consignorGuid);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					МЗ.Отправитель = Выборка.СтруктурнаяЕдиница;
				КонецЕсли;
				
			КонецЕсли; 
			
			BusinessEntity = ПолучитьСвойствоОбъектаXDTO(consignor, "BusinessEntity");	 
			
			Если BusinessEntity <> Неопределено Тогда
				МЗ.consignorGuidBE = consignor.BusinessEntity.Guid;	
				
				Если НЕ ЗначениеЗаполнено(МЗ.Отправитель) Тогда
					Запрос = Новый Запрос("ВЫБРАТЬ
					|	МЙ_СоответствиеКонтрагентов.Контрагент
					|ИЗ
					|	РегистрСведений.МЙ_СоответствиеКонтрагентов КАК МЙ_СоответствиеКонтрагентов
					|ГДЕ
					|	МЙ_СоответствиеКонтрагентов.GUID = &Guid");
					
					Запрос.УстановитьПараметр("Guid", МЗ.consignorGuidBE);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						МЗ.Отправитель = Выборка.Контрагент;			
					ИначеЕсли НовыеКонтрагентыGUID.Найти(МЗ.consignorGuidBE) = Неопределено Тогда
						НовыеКонтрагентыGUID.Добавить(МЗ.consignorGuidBE);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Получатель
		consignee = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "consignee");	 
		
		Если consignee <> Неопределено Тогда
			Enterprise = ПолучитьСвойствоОбъектаXDTO(consignee , "Enterprise");	 
			
			Если Enterprise <> Неопределено Тогда
				МЗ.consigneeGuid = consignee.Enterprise.Guid;	
				
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	МЙ_ПоднадзорныеОбъекты.СтруктурнаяЕдиница
				|ИЗ
				|	РегистрСведений.МЙ_ПоднадзорныеОбъекты КАК МЙ_ПоднадзорныеОбъекты
				|ГДЕ
				|	МЙ_ПоднадзорныеОбъекты.GUID = &GUID");
				
				Запрос.УстановитьПараметр("GUID", МЗ.consigneeGuid);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					МЗ.Получатель = Выборка.СтруктурнаяЕдиница;
				КонецЕсли; 
			КонецЕсли; 
			
			BusinessEntity = ПолучитьСвойствоОбъектаXDTO(consignee , "BusinessEntity");	 
			
			Если BusinessEntity <> Неопределено Тогда
				МЗ.consigneeGuidBE = consignee.BusinessEntity.Guid;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	МЙ_НастройкиAPI.Организация
				|ИЗ
				|	Справочник.МЙ_НастройкиAPI КАК МЙ_НастройкиAPI
				|ГДЕ
				|	МЙ_НастройкиAPI.issuerId = &issuerId";
				
				Запрос.УстановитьПараметр("issuerId", consignee.BusinessEntity.Guid);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					МЗ.Организация = Выборка.Организация;
				КонецЕсли; 				
			КонецЕсли;
			
			 
		КонецЕсли; 
		
		
		//
		Если ЗначениеЗаполнено(МЗ.Организация) = Ложь Тогда			
			МЗ.Организация = Организация;	
		КонецЕсли;
		МЗ.ДатаПоследнейЗагрузки = ТекущаяДата();
		
		МЗ.Записать();
		
	Исключение
		ЗаписьЖурналаРегистрации("Ветис", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());		
	КонецПопытки; 
	
КонецПроцедуры

Процедура СоздатьОбновитьСведенияОПроизводителе(ОбъектXDTO, UUID, НомерСтроки)
	
	МЗ = РегистрыСведений.МЙ_ДополнительныеСведенияПоВСД.СоздатьМенеджерЗаписи();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.producerGuid;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	
	МЗ.Прочитать();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.producerGuid;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	МЗ.Значение = ПолучитьСвойствоОбъектаXDTO(ОбъектXDTO.enterprise, "guid");
	
	МЗ.Записать();
	
	//
	МЗ = РегистрыСведений.МЙ_ДополнительныеСведенияПоВСД.СоздатьМенеджерЗаписи();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.producerRole;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	
	МЗ.Прочитать();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.producerRole;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	МЗ.Значение = ПолучитьСвойствоОбъектаXDTO(ОбъектXDTO, "role");
	
	МЗ.Записать();	
	
КонецПроцедуры 

//++ АК luza ИП-00018756 21.06.2018
Процедура СоздатьОбновитьСведенияОМаркировке(ОбъектXDTO, UUID, НомерСтроки)
	
	ЗначениеЗаписи = "";
	ЗначениеКласс = "UNDEFINED";
	Если типЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ЗначениеЗаписи = ОбъектXDTO.Последовательность().ПолучитьТекст(0);
		ЗначениеКласс = ПолучитьСвойствоОбъектаXDTO(ОбъектXDTO, "class"); 
	ИначеЕсли типЗнч(ОбъектXDTO) = Тип("Строка") Тогда			
		ЗначениеЗаписи = ОбъектXDTO;
	КонецЕсли;	
	
	МЗ = РегистрыСведений.МЙ_ДополнительныеСведенияПоВСД.СоздатьМенеджерЗаписи();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.productMarking;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	
	МЗ.Прочитать();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.productMarking;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	
	МЗ.Значение = ЗначениеЗаписи;
	
	МЗ.Записать();
	
	//
	МЗ = РегистрыСведений.МЙ_ДополнительныеСведенияПоВСД.СоздатьМенеджерЗаписи();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.productMarkingClass;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	
	МЗ.Прочитать();
	
	МЗ.UUID = UUID;
	МЗ.ТипСведений = Перечисления.МЙ_ТипыДополнительныхСведенийВСД.productMarkingClass;
	МЗ.НомерСтрокиСписка = НомерСтроки;
	МЗ.Значение = ЗначениеКласс;
	
	МЗ.Записать();	
	
КонецПроцедуры
//-- АК luza ИП-00018756 21.06.2018

Процедура СоздатьОбновитьСоответствиеКонтрагента(Прокси, GUID) Экспорт
	
	Попытка
		Ответ = Прокси.GetBusinessEntityByGuid(GUID);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	МЗ = РегистрыСведений.МЙ_СоответствиеКонтрагентов.СоздатьМенеджерЗаписи();
	
	МЗ.GUID = GUID;
	
	МЗ.Прочитать();
	
	ЗаполнитьЗначенияСвойств(МЗ, Ответ);
	МЗ.addressView = Ответ.juridicalAddress.addressView;
	
	МЗ.Записать();
	
КонецПроцедуры 

Процедура ОбновитьСоответствияКонтрагентовПоИНН() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_СоответствиеКонтрагентов.GUID КАК GUID,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	РегистрСведений.МЙ_СоответствиеКонтрагентов КАК МЙ_СоответствиеКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО МЙ_СоответствиеКонтрагентов.inn = Контрагенты.ИНН
	|ГДЕ
	|	МЙ_СоответствиеКонтрагентов.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.ПометкаУдаления
	|ИТОГИ ПО
	|	GUID");
	
	
	ВыборкаGUID = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивGUID = Новый Массив;
	
	Пока ВыборкаGUID.Следующий() Цикл
		Выборка = ВыборкаGUID.Выбрать();
		Выборка.Следующий();
		
		МЗ = РегистрыСведений.МЙ_СоответствиеКонтрагентов.СоздатьМенеджерЗаписи();
		МЗ.GUID = Выборка.GUID;
		МЗ.Прочитать();
		МЗ.Контрагент = Выборка.Контрагент;
		МЗ.Записать();
		
		МассивGUID.Добавить(Выборка.GUID);
	КонецЦикла;   	
	
КонецПроцедуры 

Процедура ОбновитьКонтрагентовВСД() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_ВетеринарныеДокументы.UUID,
	|	МЙ_СоответствиеКонтрагентов.Контрагент
	|ИЗ
	|	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МЙ_СоответствиеКонтрагентов КАК МЙ_СоответствиеКонтрагентов
	|		ПО МЙ_ВетеринарныеДокументы.consignorGuid = МЙ_СоответствиеКонтрагентов.GUID
	|ГДЕ
	|	МЙ_ВетеринарныеДокументы.Отправитель.Ссылка ЕСТЬ NULL
	|	И НЕ МЙ_СоответствиеКонтрагентов.Контрагент.Ссылка ЕСТЬ NULL");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.МЙ_ВетеринарныеДокументы.СоздатьМенеджерЗаписи();
		
		МЗ.UUID = Выборка.UUID;
		
		МЗ.Прочитать();
		
		МЗ.Отправитель = Выборка.Контрагент;
		
		Попытка 
			МЗ.Записать();	
		Исключение
		КонецПопытки; 
	КонецЦикла;   
	
КонецПроцедуры 


Процедура ВыполнитьЗагрузкуИСопоставлениеВСД() Экспорт
	
	
	НачалоПериода = НачалоДня(ТекущаяДата());
	
	
	Если ТекущаяДата() - НачалоПериода < 60*30 Тогда
		ПредыдущаяДата = НачалоДня(НачалоПериода - 1);
		
		ВыборкаАпи = Справочники.МЙ_НастройкиAPI.Выбрать();
		Пока ВыборкаАпи.Следующий() Цикл
			НастройкаАпи = ВыборкаАпи.Ссылка;
			Если ВыборкаАпи.ПометкаУдаления = Ложь Тогда
				ОбменССистемойВетис.ЗагрузитьЖурналПродукции(НастройкаАпи , ПредыдущаяДата, КонецДня(ПредыдущаяДата));
				ОбменССистемойВетис.ЗагрузитьВСД(НастройкаАпи , ПредыдущаяДата, КонецДня(ПредыдущаяДата));		
			КонецЕсли;	
		КонецЦикла;	 		
	КонецЕсли; 
	
	ВыборкаАпи = Справочники.МЙ_НастройкиAPI.Выбрать();
	
	БылаЗагрузка = Истина;

	Пока ВыборкаАпи.Следующий() Цикл
		НастройкаАпи = ВыборкаАпи.Ссылка;
		Если ВыборкаАпи.ПометкаУдаления = Ложь Тогда
			ОбменССистемойВетис.ЗагрузитьЖурналПродукции(НастройкаАпи , НачалоПериода, КонецДня(НачалоПериода));	
			Результат = ОбменССистемойВетис.ЗагрузитьВСД(НастройкаАпи , НачалоПериода, КонецДня(НачалоПериода));
			
			Если Результат = Неопределено Тогда
				БылаЗагрузка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Если БылаЗагрузка = Истина Тогда	
		ОбменССистемойВетис.ОбновитьСоответствияКонтрагентовПоИНН();
		ОбменССистемойВетис.ОбновитьКонтрагентовВСД();
	КонецЕсли;	
	
	
КонецПроцедуры 


Функция СопоставитьДокументыПоступленияИВСД(ПараметрыОтбора) Экспорт 
	
	НастройкиСопоставления = Новый Структура();
	
	НастройкиСопоставления.Вставить("СопоставлениеОтправитель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеПолучатель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеПродукция", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеНомерТТН", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеДатаТТН", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеСтатусВСД", Истина);
	
	ТаблицаСопоставлений = ПолучитьСопоставленныеДокументыПоступленияИВСД(ПараметрыОтбора, НастройкиСопоставления);
	
	ТаблицаОстатковПоВСД = ТаблицаСопоставлений.Скопировать();
	ТаблицаОстатковПоВСД.Свернуть("UUID_ВСД, packingAmount");
	
	ТаблицаОстатковПоДокументу = ТаблицаСопоставлений.Скопировать();
	ТаблицаОстатковПоДокументу.Свернуть("Документ, Номенклатура, КоличествоКоробок");
	
	// Сначала привязываем те позиции, по которым у нас внесенено наименование номенклатуры поставщика и те, по которым совпадает количество.
	ТаблицаСопоставлений.Сортировать("Документ, СовпадаетНоменклатураПоставщика Убыв, СовпадаетКоличествоУпаковок Убыв, НомерСтрокиДокумента");
	
	Для Каждого Строка Из ТаблицаСопоставлений Цикл
		
		СтрокаОстаткаВСД = ТаблицаОстатковПоВСД.Найти(Строка.UUID_ВСД, "UUID_ВСД");
		СтрокаОстаткаДокумент = ТаблицаОстатковПоДокументу.НайтиСтроки(Новый Структура("Документ, Номенклатура", Строка.Документ, Строка.Номенклатура))[0];
		
		Если СтрокаОстаткаВСД.packingAmount = 0 ИЛИ СтрокаОстаткаДокумент.КоличествоКоробок = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		МЗ = РегистрыСведений.ВетСвидетельстваПоступлений.СоздатьМенеджерЗаписи();
		
		МЗ.ДокПоступления = Строка.Документ;
		МЗ.Номенклатура = Строка.Номенклатура;
		МЗ.UUID_ВСД = Строка.UUID_ВСД;
		
		МЗ.КоличествоУпаковок = Мин(СтрокаОстаткаДокумент.КоличествоКоробок, СтрокаОстаткаВСД.packingAmount);
		Если Строка.packingAmount <> 0 Тогда
			МЗ.Количество = Строка.volume * МЗ.КоличествоУпаковок/ Строка.packingAmount;			
		КонецЕсли; 
		
		СтрокаОстаткаВСД.packingAmount = СтрокаОстаткаВСД.packingAmount - МЗ.КоличествоУпаковок;
		СтрокаОстаткаДокумент.КоличествоКоробок = СтрокаОстаткаДокумент.КоличествоКоробок - МЗ.КоличествоУпаковок;
		
		МЗ.ДанныеВетСвидетельствДата = Строка.issueDate;
		МЗ.ДанныеВетСвидетельствНомер = Строка.issueNumber;
		МЗ.ДанныеВетСвидетельствСерия = Строка.issueSeries;
		
		МЗ.ИнформацияОбИсследовании = СтрЗаменить(Строка.specialMarks, Символы.ПС, "; ");
		МЗ.КемВыдан = Строка.confirmedBy;
		
		МЗ.Записать();
	КонецЦикла;  
	
	Возврат ТаблицаСопоставлений.Количество();
	
КонецФункции

Функция ПолучитьСопоставленныеДокументыПоступленияИВСД(ПараметрыОтбора, НастройкиСопоставления) Экспорт 
	
	ПостроительЗапроса = Новый ПостроительЗапроса("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерСкладТовары.Ссылка КАК Документ,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА МЙ_ВетеринарныеДокументы.unit.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанВес,
	|	ВЫБОР
	|		КОГДА МЙ_ВетеринарныеДокументы.unit.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса
	|			ТОГДА ПриходныйОрдерСкладТовары.Количество * ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес
	|		ИНАЧЕ ПриходныйОрдерСкладТовары.Количество
	|	КОНЕЦ КАК КоличествоДокумент,
	|	ПриходныйОрдерСкладТовары.КоличествоКоробок КАК КоличествоКоробокДокумент,
	|	ПриходныйОрдерСкладТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	МЙ_ВетеринарныеДокументы.UUID КАК UUID_ВСД,
	|	ВЫБОР
	|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления = ПриходныйОрдерСкладТовары.Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВСДПривязан,
	|	МЙ_ВетеринарныеДокументы.issueSeries,
	|	МЙ_ВетеринарныеДокументы.issueNumber,
	|	МЙ_ВетеринарныеДокументы.issueDate,
	|	МЙ_ВетеринарныеДокументы.confirmedBy,
	|	МЙ_ВетеринарныеДокументы.specialMarks,
	|	МЙ_ВетеринарныеДокументы.volume,
	|	МЙ_ВетеринарныеДокументы.waybillDate,
	|	МЙ_ВетеринарныеДокументы.waybillNumber,
	|	МЙ_ВетеринарныеДокументы.subProduct,
	|	МЙ_ВетеринарныеДокументы.packingAmount,
	|	МЙ_ВетеринарныеДокументы.status,
	|	МЙ_ВетеринарныеДокументы.dateOfProduction,
	|	МЙ_ВетеринарныеДокументы.dateOfProductionEnd,
	|	ВетСвидетельстваПоступлений.Количество КАК КоличествоПривязано,
	|	ВетСвидетельстваПоступлений.КоличествоУпаковок КАК КоличествоУпаковокПривязано,
	|	ВЫБОР
	|		КОГДА МЙ_СоответствиеНоменклатурыКонтрагентов.productItem = МЙ_ВетеринарныеДокументы.productItem
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СовпадаетНоменклатураПоставщика,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА МЙ_ВетеринарныеДокументы.unit.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса
	|					ТОГДА ПриходныйОрдерСкладТовары.Количество * ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес
	|				ИНАЧЕ ПриходныйОрдерСкладТовары.Количество
	|			КОНЕЦ = МЙ_ВетеринарныеДокументы.volume
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СовпадаетКоличество,
	|	ВЫБОР
	|		КОГДА МЙ_ВетеринарныеДокументы.packingAmount = ПриходныйОрдерСкладТовары.КоличествоКоробок
	|				И МЙ_ВетеринарныеДокументы.packingAmount <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СовпадаетКоличествоУпаковок,
	|	МЙ_ВетеринарныеДокументы.Организация,
	|	МЙ_ВетеринарныеДокументы.unit КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МЙ_СоответствиеНоменклатуры КАК МЙ_СоответствиеНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА &СопоставлениеПродукция
	|					ТОГДА МЙ_СоответствиеНоменклатуры.ПродукцияВетис = МЙ_ВетеринарныеДокументы.subProduct
	|				КОГДА &СопоставлениеВидПродукции
	|					ТОГДА МЙ_СоответствиеНоменклатуры.ВидПродукции = МЙ_ВетеринарныеДокументы.product
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО (ВЫБОР
	|					КОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик ССЫЛКА Справочник.Склады
	|						ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик.Владелец
	|					ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Поставщик
	|				КОНЕЦ = МЙ_ВетеринарныеДокументы.Отправитель
	|				ИЛИ НЕ &СопоставлениеОтправитель)
	|			И (ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец = МЙ_ВетеринарныеДокументы.Получатель
	|				ИЛИ НЕ &СопоставлениеПолучатель)
	|			И (ПриходныйОрдерСкладТовары.Характеристика = МЙ_СоответствиеНоменклатуры.Характеристика
	|				ИЛИ ПриходныйОрдерСкладТовары.Номенклатура = МЙ_СоответствиеНоменклатуры.Номенклатура
	|					И МЙ_СоответствиеНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЛИ НЕ &СопоставлениеВидПродукции
	|					И НЕ &СопоставлениеПродукция)
	|			И (НАЧАЛОПЕРИОДА(ПриходныйОрдерСкладТовары.ДатаПроизводства, День) = НАЧАЛОПЕРИОДА(МЙ_ВетеринарныеДокументы.dateOfProduction, День)
	|				ИЛИ НЕ &СопоставлениеДатаПроизводства)
	|			И (ВЫБОР
	|					КОГДА МЙ_ВетеринарныеДокументы.unit.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса
	|						ТОГДА ПриходныйОрдерСкладТовары.Количество * ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес
	|					ИНАЧЕ ПриходныйОрдерСкладТовары.Количество
	|				КОНЕЦ = МЙ_ВетеринарныеДокументы.volume
	|				ИЛИ НЕ &СопоставлениеКоличество)
	|			И (ПриходныйОрдерСкладТовары.КоличествоКоробок = МЙ_ВетеринарныеДокументы.packingAmount
	|				ИЛИ НЕ &СопоставлениеКоличествоУпаковок)
	//+++АК KIRN 2018.07.31 ИП-00019315.000.00000002 
	|			И (Выбор когда ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаТТН = """" тогда ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаПоставщика Иначе ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаТТН Конец = МЙ_ВетеринарныеДокументы.waybillNumber
	|					И Выбор когда ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаТТН = """" тогда ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаПоставщика Иначе ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаТТН Конец <> """"
//	|			И (ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаПоставщика = МЙ_ВетеринарныеДокументы.waybillNumber
//	|					И ПриходныйОрдерСкладТовары.Ссылка.НомерДокументаПоставщика <> """"
	|				ИЛИ НЕ &СопоставлениеНомерТТН)
	|			И (НАЧАЛОПЕРИОДА(Выбор когда ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаТТН = ДатаВремя(1,1,1,0,0,0) тогда ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика Иначе ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаТТН Конец, День) = НАЧАЛОПЕРИОДА(МЙ_ВетеринарныеДокументы.waybillDate, День)
	|				ИЛИ НЕ &СопоставлениеДатаТТН)
	//|			И (ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика = МЙ_ВетеринарныеДокументы.waybillDate
	//|				ИЛИ НЕ &СопоставлениеДатаТТН)
	//---АК KIRN 
	|			И (МЙ_ВетеринарныеДокументы.status = ЗНАЧЕНИЕ(Справочник.МЙ_СтатусВСД.CONFIRMED)
	|				ИЛИ НЕ &СопоставлениеСтатусВСД)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО МЙ_ВетеринарныеДокументы.UUID = ВетСвидетельстваПоступлений.UUID_ВСД
	|			И (ПриходныйОрдерСкладТовары.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления)
	|			И (ПриходныйОрдерСкладТовары.Номенклатура = ВетСвидетельстваПоступлений.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МЙ_СоответствиеНоменклатурыКонтрагентов КАК МЙ_СоответствиеНоменклатурыКонтрагентов
	|		ПО МЙ_ВетеринарныеДокументы.Отправитель = МЙ_СоответствиеНоменклатурыКонтрагентов.Контрагент
	|			И (ПриходныйОрдерСкладТовары.Номенклатура = МЙ_СоответствиеНоменклатурыКонтрагентов.Номенклатура)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Номенклатура.ТребуетсяВетеринарныйСертификат
	|	И (ВетСвидетельстваПоступлений.UUID_ВСД ЕСТЬ NULL
	|			ИЛИ &СопоставлениеВключатьПривязанные
	|				И ВетСвидетельстваПоступлений.ДокПоступления = ПриходныйОрдерСкладТовары.Ссылка)
	|	И МЙ_ВетеринарныеДокументы.status <> ЗНАЧЕНИЕ(Справочник.МЙ_СтатусВСД.WITHDRAWN)
	//+++АК KIRN 2018.08.04  
	|		И (выбор
	|			КОГДА &СопоставлениеНаименованияНоменклатуры 
	|				Тогда 
	|					МЙ_СоответствиеНоменклатурыКонтрагентов.productItem = МЙ_ВетеринарныеДокументы.productItem
	|				Иначе Истина
	|		КОНЕЦ)
	//---АК KIRN 
    |	
	|{ГДЕ
	|	МЙ_ВетеринарныеДокументы.UUID КАК UUID,
	|	ПриходныйОрдерСкладТовары.Ссылка.* КАК ДокументПоступления,
	|	МЙ_ВетеринарныеДокументы.Организация КАК Организация}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтрокиДокумента
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Для Каждого Элемент ИЗ ПараметрыОтбора Цикл
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(Элемент.ПутьКДанным);
		ЭлементОтбора.ВидСравнения = Элемент.ВидСравнения;
		ЭлементОтбора.Значение = Элемент.Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;  
	
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеОтправитель", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеПолучатель", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеВидПродукции", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеПродукция", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеДатаПроизводства", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеКоличество", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеКоличествоУпаковок", Ложь);	
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеНомерТТН", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеДатаТТН", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеСтатусВСД", Ложь);
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеВключатьПривязанные", Ложь);
	//+++АК KIRN 2018.08.04 
	ПостроительЗапроса.Параметры.Вставить("СопоставлениеНаименованияНоменклатуры", Ложь);
	//---АК KIRN 
	
	Для Каждого КлючЗначение Из НастройкиСопоставления Цикл
		Если ПостроительЗапроса.Параметры.Свойство(КлючЗначение.Ключ) Тогда
			ПостроительЗапроса.Параметры[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли; 
	КонецЦикла;  
	
	ПостроительЗапроса.Выполнить();
	
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции


Функция ПолучитьМассивПривязокВСД(ПараметрыОтбора) Экспорт
	
	ПостроительЗапроса = Новый ПостроительЗапроса("ВЫБРАТЬ
	|	ВетСвидетельстваПоступлений.UUID_ВСД КАК UUID_ВСД,
	|	ВетСвидетельстваПоступлений.ДокПоступления,
	|	МЙ_ВетеринарныеДокументы.subProduct КАК Продукция,
	|	МЙ_ВетеринарныеДокументы.Организация КАК Организация,
	|	МЙ_ВетеринарныеДокументы.packingAmount КАК КоличествоУпаковокВСД,
	|	МЙ_ВетеринарныеДокументы.volume КАК КоличествоВСД,
	//+++АК KIRN 2018.07.31 ИП-00019315  
	|	ВЫБОР
	|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	|			ТОГДА Выбор когда ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаТТН = """" тогда ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаПоставщика Иначе ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаТТН Конец
	|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillNumber
	|	КОНЕЦ КАК НомерТТН,
	|	ВЫБОР
	|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	|			ТОГДА Выбор когда ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаТТН = ДатаВремя(1,1,1,0,0,0) тогда ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаПоставщика Иначе ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаТТН Конец
	|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillDate
	|	КОНЕЦ КАК ДатаТТН,
	//|	ВЫБОР
	//|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	//|			ТОГДА ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаПоставщика
	//|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillNumber
	//|	КОНЕЦ КАК НомерТТН,
	//|	ВЫБОР
	//|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	//|			ТОГДА ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаПоставщика
	//|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillDate
	//|	КОНЕЦ КАК ДатаТТН,
	//---АК KIRN 
	|	МЙ_ВетеринарныеДокументы.waybillDate КАК ДатаТТНВСД,
	|	МЙ_ВетеринарныеДокументы.waybillNumber КАК НомерТТНВСД,
	|	СУММА(ВетСвидетельстваПоступлений.Количество) КАК Количество,
	|	СУММА(ВетСвидетельстваПоступлений.КоличествоУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	|		ПО ВетСвидетельстваПоступлений.UUID_ВСД = МЙ_ВетеринарныеДокументы.UUID
	|ГДЕ
	|	МЙ_ВетеринарныеДокументы.status = ЗНАЧЕНИЕ(Справочник.МЙ_СтатусВСД.CONFIRMED)
	|{ГДЕ
	|	ВетСвидетельстваПоступлений.UUID_ВСД,
	|	ВетСвидетельстваПоступлений.ДокПоступления.* КАК ДокументПоступления}
	|
	|СГРУППИРОВАТЬ ПО
	|	ВетСвидетельстваПоступлений.UUID_ВСД,
	|	ВетСвидетельстваПоступлений.ДокПоступления,
	|	МЙ_ВетеринарныеДокументы.subProduct,
	|	МЙ_ВетеринарныеДокументы.Организация,
	|	МЙ_ВетеринарныеДокументы.packingAmount,
	|	МЙ_ВетеринарныеДокументы.volume,
	//+++АК KIRN 2018.07.31  ИП-00019315
	|	ВЫБОР
	|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	|			ТОГДА Выбор когда ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаТТН = """" тогда ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаПоставщика Иначе ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаТТН Конец
	|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillNumber
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	|			ТОГДА Выбор когда ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаТТН = ДатаВремя(1,1,1,0,0,0) тогда ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаПоставщика Иначе ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаТТН Конец
	|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillDate
	|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	//|			ТОГДА ВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаПоставщика
	//|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillNumber
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ВетСвидетельстваПоступлений.ДокПоступления ССЫЛКА Документ.ПриходныйОрдерСклад
	//|			ТОГДА ВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаПоставщика
	//|		ИНАЧЕ МЙ_ВетеринарныеДокументы.waybillDate
	//|	КОНЕЦ,
	//---АК KIRN 
	|	МЙ_ВетеринарныеДокументы.waybillDate,
	|	МЙ_ВетеринарныеДокументы.waybillNumber
	|ИТОГИ ПО
	|	UUID_ВСД");
	
	Для Каждого Элемент ИЗ ПараметрыОтбора Цикл
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(Элемент.ПутьКДанным);
		ЭлементОтбора.ВидСравнения = Элемент.ВидСравнения;
		ЭлементОтбора.Значение = Элемент.Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;  
	
	ПостроительЗапроса.Выполнить();
	
	ВыборкаВСД = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивПривязок = Новый Массив;
	
	Пока ВыборкаВСД.Следующий() Цикл
		Выборка = ВыборкаВСД.Выбрать();
		
		Если Выборка.Количество()>1 Тогда
			Сообщить("ВСД с идентификатором " + ВыборкаВСД.UUID_ВСД + " привязана к нескольким складским документам!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли; 
		
		Выборка.Следующий();
		
		ПараметрыПривязки = Новый Структура("UUID_ВСД, Организация, ДокПоступления, Продукция, Количество, КоличествоУпаковок, КоличествоВСД, КоличествоУпаковокВСД, НомерТТН, ДатаТТН, НомерТТНВСД, ДатаТТНВСД");
		ЗаполнитьЗначенияСвойств(ПараметрыПривязки, Выборка);
		МассивПривязок.Добавить(ПараметрыПривязки);
	КонецЦикла;  
	
	Возврат МассивПривязок;
	
КонецФункции

Процедура ДобавитьСведенияОПроизводителе(ФабрикаXD, ОбъектXDTO, producerGuid, producerRole)
	
	Producer = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:Producer");
	
	Producer.enterprise = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:Enterprise");
	Producer.enterprise.guid = producerGuid; 
	Producer.role = producerRole;
	
	ОбъектXDTO.Add(Producer);	
	
КонецПроцедуры 

//++ АК luza ИП-00018756 21.06.2018
Процедура ДобавитьСведенияОМаркировке(ФабрикаXD, ОбъектXDTO, productMarking, productMarkingClass)
	
	pm = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:ProductMarking");
	pm.class = productMarkingClass; 
	pm.__content = productMarking;
	
	ОбъектXDTO.Add(pm);	
	
КонецПроцедуры 
//-- АК luza ИП-00018756 21.06.2018

Процедура ЗаполнитьСведенияОПартииПродукции(ОбъектXDTO, ФабрикаXD, ПараметрыВСД, БезУпаковок = Ложь)
	
	ОбъектXDTO.productType = ПараметрыВСД.productType;
	ОбъектXDTO.Product = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argpr:Product");
	ОбъектXDTO.Product.GUID = ПараметрыВСД.productGuid;
	
	ОбъектXDTO.subProduct = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argpr:SubProduct");
	ОбъектXDTO.subProduct.guid = ПараметрыВСД.subProductGuid;
	
	ОбъектXDTO.productItem = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argpr:ProductItem");
	ОбъектXDTO.productItem.name = ПараметрыВСД.productItem;
	
	ОбъектXDTO.volume = ПараметрыВСД.volume;
	
	Если Не БезУпаковок И ЗначениеЗаполнено(ПараметрыВСД.packingList) Тогда
		ОбъектXDTO.packingList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:PackingFormList");
		ОбъектXDTO.packingList.packingForm.Add(ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:PackingForm"));
		ОбъектXDTO.packingList.packingForm[0].UUID = ПараметрыВСД.packingList.Код;
		ОбъектXDTO.packingAmount = ПараметрыВСД.packingAmount;
	КонецЕсли;
	
	ОбъектXDTO.unit = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:Unit");
	ОбъектXDTO.unit.GUID = ПараметрыВСД.unitGUID;
	
	//++ АК luza ИП-00018756 01.06.2018
	//ОбъектXDTO.dateOfProduction = ОбменССистемойВетис.ПолучитьСтраннуюДату(ФабрикаXD, ПараметрыВСД.dateOfProduction);
	ОбъектXDTO.dateOfProduction = ОбменССистемойВетис.ПолучитьСтраннуюДату(ФабрикаXD, ПараметрыВСД.dateOfProduction, ПараметрыВСД.dateOfProductionEnd);
	//-- АК luza ИП-00018756 01.06.2018
	
	//++ АК luza ИП-00018756 01.06.2018
	//ОбъектXDTO.expiryDate = ОбменССистемойВетис.ПолучитьСтраннуюДату(ФабрикаXD, ПараметрыВСД.expiryDate);
	ОбъектXDTO.expiryDate = ОбменССистемойВетис.ПолучитьСтраннуюДату(ФабрикаXD, ПараметрыВСД.expiryDate, ПараметрыВСД.expiryDateEnd);
	//-- АК luza ИП-00018756 01.06.2018
	
	
	ОбъектXDTO.perishable =  ПараметрыВСД.perishable;
	ОбъектXDTO.lowGradeCargo =  ПараметрыВСД.lowGradeCargo;
	
	ОбъектXDTO.countryOfOrigin =  ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ikar:Country");
	ОбъектXDTO.countryOfOrigin.guid = ПараметрыВСД.countryOfOriginGUID;
	
	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_ДополнительныеСведенияПоВСД.НомерСтрокиСписка,
	|	МЙ_ДополнительныеСведенияПоВСД.Значение КАК producerGuid,
	|	NULL КАК producerRole
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.МЙ_ДополнительныеСведенияПоВСД КАК МЙ_ДополнительныеСведенияПоВСД
	|ГДЕ
	|	МЙ_ДополнительныеСведенияПоВСД.UUID = &UUID
	|	И МЙ_ДополнительныеСведенияПоВСД.ТипСведений = ЗНАЧЕНИЕ(Перечисление.МЙ_ТипыДополнительныхСведенийВСД.producerGuid)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МЙ_ДополнительныеСведенияПоВСД.НомерСтрокиСписка,
	|	NULL,
	|	МЙ_ДополнительныеСведенияПоВСД.Значение
	|ИЗ
	|	РегистрСведений.МЙ_ДополнительныеСведенияПоВСД КАК МЙ_ДополнительныеСведенияПоВСД
	|ГДЕ
	|	МЙ_ДополнительныеСведенияПоВСД.UUID = &UUID
	|	И МЙ_ДополнительныеСведенияПоВСД.ТипСведений = ЗНАЧЕНИЕ(Перечисление.МЙ_ТипыДополнительныхСведенийВСД.producerRole)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.НомерСтрокиСписка КАК НомерСтрокиСписка,
	|	МАКСИМУМ(ВТ.producerGuid) КАК producerGuid,
	|	МАКСИМУМ(ВТ.producerRole) КАК producerRole
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.НомерСтрокиСписка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСписка");
	
	Запрос.УстановитьПараметр("UUID", ПараметрыВСД.UUID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбъектXDTO.producerList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:ProducerList");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДобавитьСведенияОПроизводителе(ФабрикаXD, ОбъектXDTO.producerList.producer, Выборка.producerGuid, Выборка.producerRole);
		КонецЦикла;   
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВСД.producerGuid) Тогда
		ОбъектXDTO.producerList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:ProducerList");		
		
		ДобавитьСведенияОПроизводителе(ФабрикаXD, ОбъектXDTO.producerList.producer, ПараметрыВСД.producerGuid, ПараметрыВСД.producerRole);
	КонецЕсли; 
	
	//	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_ДополнительныеСведенияПоВСД.НомерСтрокиСписка,
	|	МЙ_ДополнительныеСведенияПоВСД.Значение КАК productMarking,
	|	NULL КАК productMarkingClass
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.МЙ_ДополнительныеСведенияПоВСД КАК МЙ_ДополнительныеСведенияПоВСД
	|ГДЕ
	|	МЙ_ДополнительныеСведенияПоВСД.UUID = &UUID
	|	И МЙ_ДополнительныеСведенияПоВСД.ТипСведений = ЗНАЧЕНИЕ(Перечисление.МЙ_ТипыДополнительныхСведенийВСД.productMarking)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МЙ_ДополнительныеСведенияПоВСД.НомерСтрокиСписка,
	|	NULL,
	|	МЙ_ДополнительныеСведенияПоВСД.Значение
	|ИЗ
	|	РегистрСведений.МЙ_ДополнительныеСведенияПоВСД КАК МЙ_ДополнительныеСведенияПоВСД
	|ГДЕ
	|	МЙ_ДополнительныеСведенияПоВСД.UUID = &UUID
	|	И МЙ_ДополнительныеСведенияПоВСД.ТипСведений = ЗНАЧЕНИЕ(Перечисление.МЙ_ТипыДополнительныхСведенийВСД.productMarkingClass)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.НомерСтрокиСписка КАК НомерСтрокиСписка,
	|	МАКСИМУМ(ВТ.productMarking) КАК productMarking,
	|	МАКСИМУМ(ВТ.productMarkingClass) КАК productMarkingClass
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.НомерСтрокиСписка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСписка");
	
	Запрос.УстановитьПараметр("UUID", ПараметрыВСД.UUID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбъектXDTO.productMarkingList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:ProductMarkingList");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДобавитьСведенияОМаркировке(ФабрикаXD, ОбъектXDTO.productMarkingList.productMarking, Выборка.productMarking, Выборка.productMarkingClass);
		КонецЦикла;   
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВСД.productMarking) Тогда
		//ОбъектXDTO.productMarkingList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:ProductMarkingList");
		//ОбъектXDTO.productMarkingList.productMarking.Add(ПараметрыВСД.productMarking);
		ОбъектXDTO.productMarkingList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:ProductMarkingList");
		ДобавитьСведенияОМаркировке(ФабрикаXD, ОбъектXDTO.productMarkingList.productMarking, ПараметрыВСД.productMarking, "UNDEFINED");
	КонецЕсли; 
	
КонецПроцедуры 

Функция ПогаситьВСД(НастройкаAPI = Неопределено, ПараметрыПривязки, ПричинаАктаНесоответствия) Экспорт
	
	// Настройки подключения
	Если НастройкаAPI = Неопределено Тогда
		НастройкаAPI = ОбменССистемойВетис.ОсновнаяНастройкаАПИ();
		Если НастройкаAPI = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	ПользовательВетис = ОбменССистемойВетис.ПолучитьАссоциированногоПользователя(ПараметрыСеанса.ТекущийПользователь, НастройкаAPI.Организация);		
	
	ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();
	
	ПараметрыПодключения = ОбменССистемойВетис.ПолучитьПараметрыПодключения(ФабрикаXD, НастройкаAPI);
	
	UUID = ПараметрыПривязки.UUID_ВСД;
	
	// Параметры ВСД
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_ВетеринарныеДокументы.UUID,
	|	МЙ_ВетеринарныеДокументы.consigneeGuid,
	|	МЙ_ВетеринарныеДокументы.consigneeGuidBE,
	|	МЙ_ВетеринарныеДокументы.consignorGuid,
	|	МЙ_ВетеринарныеДокументы.consignorGuidBE,
	|	МЙ_ВетеринарныеДокументы.productType.Код КАК productType,
	|	МЙ_ВетеринарныеДокументы.productGuid,
	|	МЙ_ВетеринарныеДокументы.subProductGuid,
	|	МЙ_ВетеринарныеДокументы.productItem,
	|	МЙ_ВетеринарныеДокументы.unitGuid,
	|	МЙ_ВетеринарныеДокументы.dateOfProduction,
	|	МЙ_ВетеринарныеДокументы.dateOfProductionEnd,
	|	МЙ_ВетеринарныеДокументы.expiryDate,
	|	МЙ_ВетеринарныеДокументы.expiryDateEnd,
	|	МЙ_ВетеринарныеДокументы.perishable,
	|	МЙ_ВетеринарныеДокументы.countryOfOriginGUID,
	|	МЙ_ВетеринарныеДокументы.producerGuid,
	|	МЙ_ВетеринарныеДокументы.producerRole,
	|	МЙ_ВетеринарныеДокументы.lowGradeCargo,
	|	МЙ_ВетеринарныеДокументы.waybillDate,
	|	МЙ_ВетеринарныеДокументы.waybillNumber,
	|	МЙ_ВетеринарныеДокументы.broker,
	|	МЙ_ВетеринарныеДокументы.transportStorageType,
	|	МЙ_ВетеринарныеДокументы.vehicleNumber,
	|	МЙ_ВетеринарныеДокументы.containerNumber,
	|	МЙ_ВетеринарныеДокументы.trailerNumber,
	|	МЙ_ВетеринарныеДокументы.issueDate,
	|	МЙ_ВетеринарныеДокументы.issueNumber,
	|	МЙ_ВетеринарныеДокументы.issueSeries,
	|	МЙ_ВетеринарныеДокументы.cargoExpertized,
	|	МЙ_ВетеринарныеДокументы.cargoInspected,
	|	МЙ_ВетеринарныеДокументы.confirmedBy,
	|	МЙ_ВетеринарныеДокументы.locationProsperity,
	|	МЙ_ВетеринарныеДокументы.specialMarks,
	|	МЙ_ВетеринарныеДокументы.volume,
	|	МЙ_ВетеринарныеДокументы.form.Код КАК form,
	|	МЙ_ВетеринарныеДокументы.packingList,
	|	МЙ_ВетеринарныеДокументы.packingAmount,
	|	МЙ_ВетеринарныеДокументы.Организация,
	|	МЙ_ВетеринарныеДокументы.Получатель КАК СтруктурнаяЕдиница,
	|	МЙ_ВетеринарныеДокументы.productMarking
	|ИЗ
	|	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	|ГДЕ
	|	МЙ_ВетеринарныеДокументы.UUID = &UUID");
	
	Запрос.УстановитьПараметр("UUID", UUID);
	
	ПараметрыВСД = Запрос.Выполнить().Выбрать();
	
	Если НЕ ПараметрыВСД.Следующий() Тогда
		Сообщить("Выбранная ВСД не загружена из системы Ветис!" ); 
		Возврат Ложь;	
	КонецЕсли;  
	
	// Настройки вызова операции
	ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("ProcessIncomingConsignmentRequest", ФабрикаXD, НастройкаAPI);		
	
	// Delivery
	Delivery = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:Delivery");
	
	Delivery.deliveryDate = ТекущаяДата();
	
	Delivery.consignor = ОбменССистемойВетис.ВернутьОтправительПолучатель(ФабрикаXD, ПараметрыВСД.consignorGuid, ПараметрыВСД.consignorGuidBE);
	Delivery.consignee = ОбменССистемойВетис.ВернутьОтправительПолучатель(ФабрикаXD, ПараметрыВСД.consigneeGuid, ПараметрыВСД.consigneeGuidBE);
	
	//
	Delivery.Consignment.Add(ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:Consignment"));	
	ЗаполнитьСведенияОПартииПродукции(Delivery.Consignment[0], ФабрикаXD, ПараметрыВСД);
	Delivery.Consignment[0].volume = ПараметрыПривязки.Количество;
	Delivery.Consignment[0].packingAmount = ПараметрыПривязки.КоличествоУпаковок;
	
	//
	Delivery.accompanyingForms =  ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:ConsignmentDocumentList");
	Delivery.accompanyingForms.waybill =  ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:Waybill");
	Delivery.accompanyingForms.waybill.issueNumber = ПараметрыПривязки.НомерТТН;
	Если ЗначениеЗаполнено(ПараметрыПривязки.ДатаТТН) Тогда
		Delivery.accompanyingForms.waybill.issueDate = ПараметрыПривязки.ДатаТТН;		
	КонецЕсли; 
	Delivery.accompanyingForms.waybill.type = 1;
	Если ЗначениеЗаполнено(ПараметрыВСД.broker) Тогда
		Delivery.accompanyingForms.waybill.broker = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "ent:BusinessEntity");
		Delivery.accompanyingForms.waybill.broker.GUID = ПараметрыВСД.broker;
	КонецЕсли; 
	
	Delivery.accompanyingForms.waybill.transportInfo = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportInfo");
	Delivery.accompanyingForms.waybill.transportInfo.transportType = 1; //автомобильный
	Delivery.accompanyingForms.waybill.transportInfo.transportNumber = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportNumber");
	
	Delivery.accompanyingForms.waybill.transportInfo.transportNumber.vehicleNumber = ПараметрыВСД.vehicleNumber; 
	
	Если ЗначениеЗаполнено(ПараметрыВСД.containerNumber) Тогда
		Delivery.accompanyingForms.waybill.transportInfo.transportNumber.containerNumber = ПараметрыВСД.containerNumber; 		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыВСД.trailerNumber) Тогда
		Delivery.accompanyingForms.waybill.transportInfo.transportNumber.trailerNumber = ПараметрыВСД.trailerNumber; 		
	КонецЕсли; 
	
	Delivery.accompanyingForms.waybill.transportStorageType = ОбщегоНазначения.ПолучитьИмяЗначенияПеречисленияПоСсылке(ПараметрыВСД.transportStorageType); 
	
	//
	vetCertificate = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:VetDocument");
	
	vetCertificate.uuid = UUID;
	vetCertificate.issueSeries = ПараметрыВСД.issueSeries;
	vetCertificate.issueNumber = ПараметрыВСД.issueNumber;
	vetCertificate.issueDate = ПараметрыВСД.issueDate;
	vetCertificate.form = СокрЛП(ПараметрыВСД.form); 
	
	vetCertificate.consignor = ОбменССистемойВетис.ВернутьОтправительПолучатель(ФабрикаXD, ПараметрыВСД.consignorGuid, ПараметрыВСД.consignorGuidBE);
	vetCertificate.consignee = ОбменССистемойВетис.ВернутьОтправительПолучатель(ФабрикаXD, ПараметрыВСД.consigneeGuid, ПараметрыВСД.consigneeGuidBE);
	
	vetCertificate.batch = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:Batch");	
	ЗаполнитьСведенияОПартииПродукции(vetCertificate.batch, ФабрикаXD, ПараметрыВСД);
	
	vetCertificate.transportInfo = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportInfo");
	vetCertificate.transportInfo.transportType = Delivery.accompanyingForms.waybill.transportInfo.transportType;
	vetCertificate.transportInfo.transportNumber = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportNumber");
	
	vetCertificate.transportInfo.transportNumber.vehicleNumber = ПараметрыВСД.vehicleNumber;
	
	Если ЗначениеЗаполнено(ПараметрыВСД.containerNumber) Тогда
		vetCertificate.transportInfo.transportNumber.containerNumber = ПараметрыВСД.containerNumber; 		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыВСД.trailerNumber) Тогда
		vetCertificate.transportInfo.transportNumber.trailerNumber = ПараметрыВСД.trailerNumber; 		
	КонецЕсли; 
	
	vetCertificate.transportStorageType = ОбщегоНазначения.ПолучитьИмяЗначенияПеречисленияПоСсылке(ПараметрыВСД.transportStorageType); ;
	
	vetCertificate.cargoInspected = ПараметрыВСД.cargoInspected; 
	vetCertificate.cargoExpertized = ПараметрыВСД.cargoExpertized; 
	vetCertificate.expertiseInfo = ПараметрыВСД.specialMarks;
	vetCertificate.confirmedBy = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:User");
	vetCertificate.confirmedBy.fio = ПараметрыВСД.confirmedBy;
	vetCertificate.confirmedBy.post = "_";
	//vetCertificate.confirmedDate = ЭтотОбъект.createDate;
	vetCertificate.locationProsperity = ПараметрыВСД.locationProsperity;
	
	Delivery.accompanyingForms.vetCertificate.Add(vetCertificate);	
	
	ПараметрыФункции.Вставить("Delivery", Delivery);
	
	// DeliveryFacts
	ПользовательВетис = ОбменССистемойВетис.ПолучитьАссоциированногоПользователя(ПараметрыСеанса.ТекущийПользователь, НастройкаAPI.Организация);		
	
	DeliveryFacts = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:DeliveryFactList");
	DeliveryFacts.vetCertificatePresence = "ELECTRONIC";
	DeliveryFacts.docInspection = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:DeliveryInspection");
	//DeliveryFacts.docInspection.responsible = ПараметрыФункции.initiator;
	DeliveryFacts.docInspection.responsible = ОбменССистемойВетис.ПолучитьUserИзФабрики(ФабрикаXD, ПользовательВетис.login);
	DeliveryFacts.docInspection.result = "CORRESPONDS";
	
	DeliveryFacts.vetInspection = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:DeliveryInspection");
	//DeliveryFacts.vetInspection.responsible = ПараметрыФункции.initiator;
	DeliveryFacts.vetInspection.responsible =ОбменССистемойВетис.ПолучитьUserИзФабрики(ФабрикаXD, ПользовательВетис.login);
	DeliveryFacts.vetInspection.result = "CORRESPONDS";
	
	//Если Количество = ПараметрыВСД.volume Тогда
	DeliveryFacts.decision = "ACCEPT_ALL";
	//Иначе
	//	DeliveryFacts.decision = "PARTIALLY";
	//КонецЕсли;
	
	ПараметрыФункции.Вставить("DeliveryFacts", DeliveryFacts);
	
	// DiscrepancyReport
	Если ПараметрыПривязки.Количество <> ПараметрыВСД.volume ИЛИ
		ПараметрыПривязки.КоличествоУпаковок <> ПараметрыВСД.packingAmount ИЛИ
		ПараметрыПривязки.НомерТТН <> ПараметрыВСД.waybillNumber ИЛИ
		ПараметрыПривязки.ДатаТТН <> ПараметрыВСД.waybillDate Тогда
		
		discrepancyReport = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:DiscrepancyReport");
		//discrepancyReport.issueSeries = "ВК";
		//discrepancyReport.issueNumber = ПараметрыЗаполнения.Номер;
		discrepancyReport.issueDate = ТекущаяДата();
		discrepancyReport.description = " ";
		discrepancyReport.reason = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:DiscrepancyReason");
		discrepancyReport.reason.name = ПричинаАктаНесоответствия;
		//
		МассивСписковПараметровФункции = Новый Массив;
		МассивСписковПараметровФункции.Добавить("discrepancyReport");
		СписокdiscrepancyReport = Новый СписокЗначений;
		СписокdiscrepancyReport.Добавить(discrepancyReport);
		ПараметрыФункции.Вставить("МассивСписков", МассивСписковПараметровФункции);
		ПараметрыФункции.Вставить("discrepancyReport", СписокdiscrepancyReport);
	КонецЕсли;
	
	//
	Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, "processIncomingConsignmentRequest"); 
	
	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Сообщить("Ошибка выполнения запроса");
		Возврат Ложь;
	КонецЕсли;
	
	// Изменяем статус в регистре (не дожидаясь планового обновления ВСД)
	МЗ = РегистрыСведений.МЙ_ВетеринарныеДокументы.СоздатьМенеджерЗаписи();
	МЗ.UUID = UUID;
	МЗ.Прочитать();
	МЗ.status	 = Справочники.МЙ_СтатусВСД.UTILIZED;
	МЗ.Записать();
	
	// Добавляем запись журнала продукции (обязательно сразу - чтобы не потерять связку с ВСД)
	СоздатьОбновитьЗаписьЖурналаПродукции(Ответ.result.processIncomingConsignmentResponse.stockEntry, ПараметрыВСД.СтруктурнаяЕдиница, ПараметрыВСД.Организация, UUID);
	
	//
	Возврат Истина;
	
КонецФункции


Функция ЗагрузитьЖурналПродукции(НастройкаAPI = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Организация = Неопределено) Экспорт
	
	Результат = Новый СписокЗначений;
	
	// Интервал по умолчанию
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
	КонецЕсли; 
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаНачала = КонецДня(ДатаНачала);
	КонецЕсли; 
	
	// Настройки подключения
	Если НастройкаAPI = Неопределено Тогда
		НастройкаAPI = ОбменССистемойВетис.ОсновнаяНастройкаАПИ();
	КонецЕсли;
	
	Организация = НастройкаAPI.Организация;
	
	ПользовательВетис = ОбменССистемойВетис.ПолучитьАссоциированногоПользователя(ПараметрыСеанса.ТекущийПользователь, НастройкаAPI.Организация);
	
	Если ПользовательВетис = Неопределено Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();
	
	ПараметрыПодключения 	= ОбменССистемойВетис.ПолучитьПараметрыПодключения(ФабрикаXD,НастройкаAPI);
	
	// Настройки вызова операции
	ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("getStockEntryChangesListRequest", ФабрикаXD, НастройкаAPI);	
	
	ПараметрыФункции.Вставить("listOptions", ПолучитьListOptionsИзФабрики(ФабрикаXD));				
	ПараметрыФункции.listOptions.count = 1000;
	
	updateDateInterval = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "bs:DateInterval");
	updateDateInterval.beginDate = ДатаНачала;
	updateDateInterval.endDate = ДатаОкончания;
	ПараметрыФункции.Вставить("updateDateInterval", updateDateInterval);
	
	// Получим созданные/измененные записи журнала продукции по каждой зарегистрированной структурной единице (подназдорному объекту)	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МЙ_ПоднадзорныеОбъекты.GUID,
	|	МЙ_ПоднадзорныеОбъекты.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.МЙ_ПоднадзорныеОбъекты КАК МЙ_ПоднадзорныеОбъекты
	|ГДЕ
	|	МЙ_ПоднадзорныеОбъекты.ЗагружатьЖурналПродукции
	|	И МЙ_ПоднадзорныеОбъекты.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыФункции.Вставить("enterpriseGuid", Выборка.GUID);
		
		ПродолжитьЗагрузку = Истина;
		Смещение = 0;
		
		Пока ПродолжитьЗагрузку Цикл
			ПараметрыФункции.ListOptions.offset = Смещение;
			
			Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения);
			
			Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
				ПродолжитьЗагрузку = Ложь;				
				Продолжить;
			КонецЕсли;		
			
			ОтветСписок = Ответ.result.GetStockEntryChangesListResponse.stockEntryList;
			
			Если Число(ОтветСписок.Count) = 0 Тогда 
				ПродолжитьЗагрузку = Ложь;				
				Продолжить;
			КонецЕсли;		
			
			Смещение = Смещение + Число(ОтветСписок.Count);
			
			Если ТипЗНЧ(ОтветСписок.stockEntry) = Тип("СписокXDTO") Тогда
				Для Каждого stockEntry из ОтветСписок.stockEntry Цикл
					СоздатьОбновитьЗаписьЖурналаПродукции(stockEntry, Выборка.СтруктурнаяЕдиница, Организация);
					Результат.Добавить(ПолучитьСвойствоОбъектаXDTO(stockEntry, "GUID"));
				КонецЦикла;
			Иначе
				СоздатьОбновитьЗаписьЖурналаПродукции(ОтветСписок.stockEntry, Выборка.СтруктурнаяЕдиница, Организация);
				Результат.Добавить(ПолучитьСвойствоОбъектаXDTO(ОтветСписок.stockEntry, "GUID"));			
			КонецЕсли;
			
		КонецЦикла;    				
	КонецЦикла;    	
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьОбновитьЗаписьЖурналаПродукции(ОбъектВетис, СтруктурнаяЕдиница, Организация, UUID_ВСД = Неопределено) Экспорт
	
	Попытка 
		
		Если НЕ Булево(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "last"))  Тогда
			Возврат;
		КонецЕсли; 
		
		//	
		МЗ = РегистрыСведений.МЙ_ЖурналПродукции.СоздатьМенеджерЗаписи();
		
		МЗ.GUID = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "GUID");				
		
		МЗ.Прочитать();
		
		МЗ.GUID = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "GUID");
		МЗ.UUID = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "UUID");
		МЗ.ЗаписьАктивна = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "active");
		
		// Номер и дата 
		МЗ.entryNumber = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "entryNumber");   
		МЗ.createDate = ОбменССистемойВетис.ПривестиКДате(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "createDate"));		
		МЗ.updateDate = ОбменССистемойВетис.ПривестиКДате(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "updateDate"));		
		
		// Статус 
		МЗ.status = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "status");
		
		// Сведения о партии продукции
		Если ПолучитьСвойствоОбъектаXDTO(ОбъектВетис, "batch") <> Неопределено Тогда
			
			МЗ.productType=справочники.МЙ_ТипыПродукции.НайтиПоКоду(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "productType"));	//productType	Тип продукции. Первый уровень иерархического справочника продукции ИС Меркурий.	argpr:ProductType	0..1
			
			product = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "product"); //product	Продукция. Второй уровень иерархического справочника продукции ИС Меркурий.	argpr:Product	0..1
			
			Если product <> Неопределено Тогда
				МЗ.product = справочники.МЙ_ВидПродукцииВетис.НайтиПоРеквизиту("GUID",  product.GUID);				
				МЗ.productGuid = product.GUID;
				
				Если МЗ.product.Пустая() Тогда
					Сообщить("Не найден вид продукции ВЕТИС с идентификатором " + МЗ.productGuid + "!!!", СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли; 
			
			subProduct = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "subProduct");	//subProduct	Вид продукции. Третий уровень иерархического справочника продукции ИС Меркурий.	argpr:SubProduct	0..1
			
			Если subProduct <> Неопределено Тогда
				МЗ.subProduct = справочники.МЙ_ПродукцияВетис.НайтиПоРеквизиту("GUID", subProduct.GUID);			
				МЗ.subProductGuid = subProduct.GUID;
				
				Если МЗ.subProduct.Пустая() Тогда
					Сообщить("Не найдена продукция ВЕТИС с идентификатором " + МЗ.subProductGuid + "!!!", СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли; 
			
			productItem = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "productItem");	//	Наименование произведенной продукции в номенклатуре производителя.	argpr:ProductItem	0..1
			
			Если productItem <> Неопределено Тогда
				МЗ.productItem = ПолучитьСвойствоОбъектаXDTO(productItem, "name"); 	
			КонецЕсли; 
			
			МЗ.volume=Число(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "volume")); //	Объем произведенной продукции. Значение должно быть больше нуля.	bs:Decimal	0..1
			
			unit = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "unit");	 //unit	Единица измерения объема произведенной продукции.	argc:Unit	0..1
			
			Если unit <> Неопределено Тогда
				МЗ.unit = справочники.МЙ_СоответствиеЕдиницИзмерения.НайтиПоРеквизиту("GUID", unit.GUID); 	
			КонецЕсли; 
			
			packingList = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "packingList");	 //packingList	Список видов упаковки, которые используются для производственной партии.	argc:PackingFormList	0..1
			
			Попытка 
				Если packingList <> Неопределено Тогда
					Если ТипЗнч(packingList.packingForm) = Тип("ОбъектXDTO") Тогда
						МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоКоду(packingList.packingForm.UUid);		
						Если НЕ ЗначениеЗаполнено(МЗ.packingList) Тогда
							МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоРеквизиту("UUID", packingList.packingForm.UUid);								
						КонецЕсли; 
					ИначеЕсли ТипЗнч(packingList.packingForm) = Тип("СписокXDTO") Тогда 
						МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоКоду(packingList.packingForm[0].UUid);						
						Если НЕ ЗначениеЗаполнено(МЗ.packingList) Тогда
							МЗ.packingList = справочники.МЙ_ВидыУпаковки.НайтиПоРеквизиту("UUID", packingList.packingForm[0].UUid);								
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			Исключение
			КонецПопытки; 
			
			МЗ.packingAmount=Число(ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "packingAmount")); //	//packingAmount	Общее количество единиц упаковки для производственной партии.	xs:int	0..1
			
			dateOfProduction = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "dateOfProduction");	 //dateOfProduction	Дата выработки продукции. Может быть указана тремя способами: датой, диапазоном дат, строкой. В случае точной даты выработки указывается только первая компонента - firstDate.	vetd:GoodsDate	0..1
			
			Если dateOfProduction <> Неопределено Тогда
				FirstDate = ПолучитьСвойствоОбъектаXDTO(dateOfProduction, "FirstDate");
				Если FirstDate <> Неопределено Тогда
					Попытка 
						hour = ПолучитьСвойствоОбъектаXDTO(FirstDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;	
						
						МЗ.dateOfProduction = Дата(FirstDate.year, FirstDate.month, FirstDate.day, hour, 0, 0);					
					Исключение
					КонецПопытки; 
				КонецЕсли; 
				
				//++ АК luza ИП-00018756 01.06.2018
				SecondDate = ПолучитьСвойствоОбъектаXDTO(dateOfProduction, "SecondDate");
				Если SecondDate <> Неопределено Тогда
					Попытка 
						hour = ПолучитьСвойствоОбъектаXDTO(SecondDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;
						
						МЗ.dateOfProductionEnd = Дата(SecondDate.year, SecondDate.month, SecondDate.day, hour, 0, 0);					
					Исключение
					КонецПопытки; 
				КонецЕсли; 				
				//-- АК luza ИП-00018756 01.06.2018
				
			КонецЕсли; 
			
			expiryDate = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "expiryDate");	 //expiryDate	Дата окончания срока годности продукции. Может быть указана тремя способами: датой, диапазоном дат, строкой. В случае точной даты выработки указывается только первая компонента - firstDate.	vetd:GoodsDate	0..1
			
			Если expiryDate <> Неопределено Тогда
				FirstDate = ПолучитьСвойствоОбъектаXDTO(expiryDate, "FirstDate");
				Если  FirstDate <> Неопределено Тогда					
					
					Попытка 
						hour = ПолучитьСвойствоОбъектаXDTO(FirstDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;
						
						МЗ.expiryDate = Дата(FirstDate.year, FirstDate.month, FirstDate.day, hour, 0, 0);				
					Исключение
					КонецПопытки; 
				КонецЕсли; 
				
				//++ АК luza ИП-00018756 01.06.2018
				SecondDate = ПолучитьСвойствоОбъектаXDTO(expiryDate, "SecondDate");
				Если SecondDate <> Неопределено Тогда
					Попытка
						
						hour = ПолучитьСвойствоОбъектаXDTO(SecondDate, "hour");
						Если hour = Неопределено Тогда
							hour = 0;
						КонецЕсли;
						                                                                                 						
						МЗ.expiryDateEnd = Дата(SecondDate.year, SecondDate.month, SecondDate.day, hour, 0, 0);					
					Исключение
					КонецПопытки; 
				КонецЕсли; 				
				//-- АК luza ИП-00018756 01.06.2018
				
			КонецЕсли; 
			
			МЗ.perishable=ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "perishable"); //perishable	Описывает, является ли продукция скоропортящейся, true – скоропортящаяся, false – не скоропортящаяся.	xs:boolean	0..1
			МЗ.lowGradeCargo=ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "lowGradeCargo"); 	//lowGradeCargo	Является ли продукция некачественной.	xs:boolean	0..1
			
			producerList = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "producerList");	 
			
			Если producerList <> Неопределено Тогда
				Если ТипЗНЧ(producerList.producer) = Тип("ОбъектXDTO") Тогда
					МЗ.producerGuid = ПолучитьСвойствоОбъектаXDTO(producerList.producer.enterprise, "guid");
					МЗ.producerRole = ПолучитьСвойствоОбъектаXDTO(producerList.producer, "role");
				ИначеЕсли ТипЗНЧ(producerList.producer) = Тип("СписокXDTO") Тогда 
					МЗ.producerGuid = ПолучитьСвойствоОбъектаXDTO(producerList.producer[0].enterprise, "guid");
					МЗ.producerRole = ПолучитьСвойствоОбъектаXDTO(producerList.producer[0], "role");
				КонецЕсли; 
			КонецЕсли; 
			
			countryOfOrigin = ПолучитьСвойствоОбъектаXDTO(ОбъектВетис.batch, "countryOfOrigin");	 
			
			Если countryOfOrigin <> Неопределено Тогда
				МЗ.countryOfOriginGUID = countryOfOrigin.guid;
			КонецЕсли; 
			
		КонецЕсли; 
		
		//			
		МЗ.Организация = Организация;	
		МЗ.СтруктурнаяЕдиница = СтруктурнаяЕдиница;	
		МЗ.ДатаПоследнейЗагрузки = ТекущаяДата();
		
		Если UUID_ВСД <> Неопределено Тогда
			МЗ.UUID_ВСД = UUID_ВСД;
		КонецЕсли; 
		
		//
		МЗ.Записать();
		
	Исключение
		ЗаписьЖурналаРегистрации("Ветис", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры


Процедура ОбновитьВСД(ТЗ_ВСД) Экспорт
	
	
	Для каждого Стр Из ТЗ_ВСД Цикл
		
		НовыеКонтрагентыGUID = Новый Массив;
		
		НастройкаAPI = ОбменССистемойВетис.НастройкаАпиПоОрганизации(Стр.Организация);
		
		ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();	
		ПараметрыПодключения 	= ОбменССистемойВетис.ПолучитьПараметрыПодключения(ФабрикаXD, НастройкаAPI);	
	
		
		ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("getVetDocumentByUuidRequest", ФабрикаXD, НастройкаAPI);
		
		ПараметрыФункции.Вставить("UUID", Стр.GUID);   		       	
		ПараметрыФункции.Вставить("enterpriseGuid", Стр.consigneeGuid);		
		
		Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения);
		
		Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
			Продолжить;
		КонецЕсли;		
		
		VetDocument = Ответ.result.getVetDocumentByUuidResponse.vetDocument;
		
		ОбменССистемойВетис.СоздатьОбновитьВСД(VetDocument, Стр.Организация, НовыеКонтрагентыGUID, НастройкаAPI);   		
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция АннулироватьВСД_Списком(МассивВСД, ПричинаАннуляции, ВетВрач) Экспорт
	
	Если ЗначениеЗАполнено(ВетВрач) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗАполнено(ПричинаАннуляции) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МЙ_ВетеринарныеДокументы.UUID,
	               |	МЙ_ВетеринарныеДокументы.Организация КАК Организация
	               |ИЗ
	               |	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	               |ГДЕ
	               |	МЙ_ВетеринарныеДокументы.UUID В(&UUID)
	               |	И МЙ_ВетеринарныеДокументы.status = ЗНАЧЕНИЕ(Справочник.МЙ_СтатусВСД.CONFIRMED)
	               |ИТОГИ ПО 	
	               |	Организация";
	
	СписокГУИД = Новый СписокЗначений;
	СписокГУИД.ЗагрузитьЗначения(МассивВСД);
	
	Запрос.УстановитьПараметр("UUID", СписокГУИД); 
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НастройкаAPI = ОбменССистемойВетис.НастройкаАпиПоОрганизации(Выборка.Организация);
		Если НастройкаAPI = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ВыборкаДетали = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ПараметрыПривязки = Новый Структура("UUID_ВСД", ВыборкаДетали.UUID);
	    	Результат = АннулироватьВСД(НастройкаAPI, ПараметрыПривязки, ПричинаАннуляции, ВетВрач); 
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АннулироватьВСД(НастройкаAPI = Неопределено, ПараметрыПривязки, ПричинаАннуляции, ВетВрач) Экспорт
	
	// Настройки подключения
	Если НастройкаAPI = Неопределено Тогда
		НастройкаAPI = ОбменССистемойВетис.ОсновнаяНастройкаАПИ();
		Если НастройкаAPI = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗАполнено(ВетВрач) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗАполнено(ПричинаАннуляции) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПользовательВетис = ОбменССистемойВетис.ПолучитьАссоциированногоПользователя(ПараметрыСеанса.ТекущийПользователь, НастройкаAPI.Организация);		
	
	ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();
	
	ПараметрыПодключения = ОбменССистемойВетис.ПолучитьПараметрыПодключения(ФабрикаXD, НастройкаAPI);
	
	UUID = ПараметрыПривязки.UUID_ВСД;
	           	
	// Настройки вызова операции
	ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("WithdrawVetDocumentRequest", ФабрикаXD, НастройкаAPI);		
		
	ПараметрыФункции.Вставить("vetDocumentId",  UUID);	
	
	ПараметрыФункции.Вставить("withdrawReason",  СокрЛП(Лев(ПричинаАннуляции, 250)));	
	
	ПараметрыФункции.Вставить("withdrawDate",  ТекущаяДата());	
	
	ПараметрыФункции.Вставить("vetDoctor", ОбменССистемойВетис.ПолучитьUserИзФабрики(ФабрикаXD, ВетВрач.login));
	
	Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, "withdrawVetDocumentRequest"); 
	//
	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Сообщить("Ошибка выполнения запроса");
		Возврат Ложь;
	КонецЕсли;
	//
	//// Изменяем статус в регистре (не дожидаясь планового обновления ВСД)
	//МЗ = РегистрыСведений.МЙ_ВетеринарныеДокументы.СоздатьМенеджерЗаписи();
	//МЗ.UUID = UUID;
	//МЗ.Прочитать();
	//МЗ.status	 = Справочники.МЙ_СтатусВСД.WITHDRAWN;
	//МЗ.Записать();
	//	
	//
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьДокументыФоновымЗаданием(НастройкаАПИ = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ТекущееЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание(); 
	
	Фильтр = Новый Структура("ИмяМетода, Состояние", "ОбменССистемойВетис.ЗагрузитьДокументыФоновымЗаданием", СостояниеФоновогоЗадания.Активно);
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Фильтр);
	
	Для Каждого Задание Из МассивЗаданий Цикл
		Если ТекущееЗадание = Неопределено ИЛИ Задание.УникальныйИдентификатор <> ТекущееЗадание.УникальныйИдентификатор Тогда
			Возврат Задание;
		КонецЕсли; 
	КонецЦикла;  
		
	Если ТекущееЗадание = Неопределено Тогда		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(НастройкаАПИ);
		ПараметрыЗадания.Добавить(ДатаНачала);
		ПараметрыЗадания.Добавить(ДатаОкончания);
		
		Возврат ФоновыеЗадания.Выполнить("ОбменССистемойВетис.ЗагрузитьДокументыФоновымЗаданием", ПараметрыЗадания);
	КонецЕсли; 
	
	Результат = ОбменССистемойВетис.ЗагрузитьВСД(НастройкаАПИ , ДатаНачала, КонецДня(ДатаОкончания));
	//++ АК hamz ИП-00020278 01.10.2018
	Если Результат <> Неопределено Тогда	
		ОбменССистемойВетис.ОбновитьСоответствияКонтрагентовПоИНН();
		ОбменССистемойВетис.ОбновитьКонтрагентовВСД();
	КонецЕсли;	
	//++ АК hamz ИП-00020278 01.10.2018
	
КонецФункции


