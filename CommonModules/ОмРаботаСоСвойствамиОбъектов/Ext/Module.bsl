////Гиндин
//// Функция формирует список значений, содержащий объект отбора назначений свойств 
//// и всех его родителей. Список используется в качестве параметра запросов.
////
//// Параметры:
////  Нет.
////
//// Возвращаемое значение:
////  Cписок значений, содержащий объект отбора назначений и всех его родителей.
////
Функция СписокНазначенийСвойств(ОбъектОтбораЗначений) Экспорт
	СписокНазначенийСвойств = Новый СписокЗначений;
	Назначение = ОбъектОтбораЗначений;
	Попытка
		Пока ЗначениеЗаполнено(Назначение) Цикл
			СписокНазначенийСвойств.Добавить(Назначение);
			Назначение = Назначение.Родитель;
		КонецЦикла;
	Исключение
	КонецПопытки;
	СписокНазначенийСвойств.Добавить(Назначение);
	Возврат СписокНазначенийСвойств;
КонецФункции

// Процедура заполняет дерево или таблицу значений в формах, свойствами и значениями свойств объекта.
// НазначениеСвойств - значение реквизита, по которому отбораются свойства.
//
// Параметры:
// 		- ТаблицаСвойств - таблица или дерево значений, которое будет заполнятся
// 		- СтруктураПараметров - тип структура
//			элементы структуры:
//				- НазначениеСвойств - значение реквизита, по которому отбораются свойства
//				- Ссылка - объект, значения свойств которого отбираются
//				- СтруктурнаяЕдиница - структурная единица, по которой отбораются свойства 
//				- ОбходРезультатаЗапроса - порядок обхода записей результата запроса
//					для выгрузки либо в дерево, либо в таблицу
//		- СписокФильтров - список значений в котором добавлены условия формирования запроса
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ТаблицаСвойств,СтруктураПараметров,СписокФильтров=0) Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НазначениеСвойств",СтруктураПараметров.НазначениеСвойств);
	Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств(СтруктураПараметров.ОбъектОтбораНазначений));
	//Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктураПараметров.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ПустаяСтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство,
	|	СвойстваОбъектов.Код                                        КАК Код,
	|	СвойстваОбъектов.ЭтоГруппа                                  КАК ЭтоГруппа,
	|	СвойстваОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение            КАК ЗначениеСвойства,
	//|	РегистрСведений.ЗначенияСвойствОбъектов.СтруктурнаяЕдиница  КАК СтруктурнаяЕдиница,
	|ВЫБОР	
    |	Когда (СвойстваОбъектов.ЭтоГруппа = Ложь) И
	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 0
    |	Когда (СвойстваОбъектов.ЭтоГруппа = Истина) И
	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 1
    |	Когда (СвойстваОбъектов.ЭтоГруппа = Ложь) И
	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
	|		  (СвойстваОбъектов.ПометкаУдаления = Истина)			Тогда 2
    |	Когда (СвойстваОбъектов.ЭтоГруппа = Истина) И
	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
	|		  (СвойстваОбъектов.ПометкаУдаления = Истина)			Тогда 3
    |	Когда (СвойстваОбъектов.ЭтоГруппа = Ложь) И
	|		  (СвойстваОбъектов.Предопределенный = Истина) И
	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 4
    |	Когда (СвойстваОбъектов.ЭтоГруппа = Истина) И
	|		  (СвойстваОбъектов.Предопределенный = Истина) И
	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 5
	|КОНЕЦ КАК ДанныеКартинки,
	|
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение            КАК Значение
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.ЭтоГруппа           КАК ЭтоГруппа,
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка              КАК Ссылка,
	|		ПланВидовХарактеристик.СвойстваОбъектов.Код					КАК Код,
	|		ПланВидовХарактеристик.СвойстваОбъектов.ПометкаУдаления     КАК ПометкаУдаления,
	|		ПланВидовХарактеристик.СвойстваОбъектов.Предопределенный    КАК Предопределенный,
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства  КАК НазначениеСвойства
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|	
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В (&НазначениеСвойств )";
	
	// если характеристики, то группы не показываем
	Если СтруктураПараметров.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст+ "
		| И НЕ ПланВидовХарактеристик.СвойстваОбъектов.ЭтоГруппа";
	КонецЕсли;	
	
	N=0;
	Если СписокФильтров<>0 Тогда
		Если СписокФильтров.Количество()>0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ";
			Для Каждого Строка Из СписокФильтров цикл
				N=N+1;
				Если Строка.Пометка Тогда
					Запрос.Текст = Запрос.Текст+"НЕ (ПланВидовХарактеристик.СвойстваОбъектов."+Строка.Представление+" в ИЕРАРХИИ (&Фильтр"+N+"))";
				Иначе	
					Запрос.Текст = Запрос.Текст+"ПланВидовХарактеристик.СвойстваОбъектов."+Строка.Представление+" в ИЕРАРХИИ (&Фильтр"+N+")";
				КонецЕсли;
                Если СписокФильтров.Количество()<>N Тогда
					Запрос.Текст = Запрос.Текст+" И ";
				КонецЕсли;
			  	Запрос.УстановитьПараметр("Фильтр"+N,Строка.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//Если СтруктураПараметров.Ссылка.ЭтоГруппа Тогда
	//	Запрос.УстановитьПараметр("ДляГруппы",Перечисления.Использование.ДляГруппы);
	//	Запрос.УстановитьПараметр("ДляГруппыИЭлемента",Перечисления.Использование.ДляГруппыИЭлемента);
	//	Запрос.Текст = Запрос.Текст + "
	//	|		И (ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляГруппы
	//	|		ИЛИ ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляГруппыИЭлемента)";
	//Иначе
	//	Запрос.УстановитьПараметр("ДляЭлемента",Перечисления.Использование.ДляЭлемента);
	//	Запрос.УстановитьПараметр("ДляГруппыИЭлемента",Перечисления.Использование.ДляГруппыИЭлемента);
	//	Запрос.Текст = Запрос.Текст + "
	//	|		И (ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляЭлемента
	//	|		ИЛИ ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляГруппыИЭлемента)";
	//КонецЕсли;	
	Запрос.Текст = Запрос.Текст + "
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений
	|	
	//|	(РегистрСведений.ЗначенияСвойствОбъектов.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	//|	ИЛИ
	//|	РегистрСведений.ЗначенияСвойствОбъектов.СтруктурнаяЕдиница  = &ПустаяСтруктурнаяЕдиница)
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|
	//|ГДЕ
	//|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	//|	ИЛИ
	//|	РегистрСведений.НазначенияСвойствОбъектов.Объект В ( &СписокНазначенийСвойств )
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектов.Ссылка ИЕРАРХИЯ, СвойстваОбъектов.Код
	|	АВТОУПОРЯДОЧИВАНИЕ
	|";
	ТаблицаСвойств=Запрос.Выполнить().Выгрузить(СтруктураПараметров.ОбходРезультатаЗапроса);
КонецПроцедуры

//// Vold - Аналог предыдущей процедуры, но работает с регистром ПараметрыСУЗ
//Процедура ПрочитатьЗаполнитьСвойстваИЗначенияСУЗ(ТаблицаСвойств,СтруктураПараметров,СписокФильтров=0) Экспорт
//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("НазначениеСвойств",СтруктураПараметров.НазначениеСвойств);
//	Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    СтруктураПараметров.Ссылка);
//	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств(СтруктураПараметров.ОбъектОтбораНазначений));
//	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктураПараметров.СтруктурнаяЕдиница);
//	Запрос.УстановитьПараметр("ПустаяСтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
//	Запрос.Текст = "
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	СвойстваОбъектов.Ссылка                                     КАК Свойство,
//	|	СвойстваОбъектов.Код                                        КАК Код,
//	|	СвойстваОбъектов.ЭтоГруппа                                  КАК ЭтоГруппа,
//	|	СвойстваОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
//	|	РегистрСведений.ПараметрыСУЗ.Значение            КАК ЗначениеСвойства,
//	|	РегистрСведений.ПараметрыСУЗ.СтруктурнаяЕдиница  КАК СтруктурнаяЕдиница,
//	| "+?((Лев(ПараметрыСеанса.КодПродукта, 2) = "R2")," РегистрСведений.ПараметрыСУЗ.Характеристика  КАК Характеристика,","")+"
//	|ВЫБОР	
//	|	Когда (СвойстваОбъектов.ЭтоГруппа = Ложь) И
//	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
//	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 0
//	|	Когда (СвойстваОбъектов.ЭтоГруппа = Истина) И
//	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
//	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 1
//	|	Когда (СвойстваОбъектов.ЭтоГруппа = Ложь) И
//	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
//	|		  (СвойстваОбъектов.ПометкаУдаления = Истина)			Тогда 2
//	|	Когда (СвойстваОбъектов.ЭтоГруппа = Истина) И
//	|		  (СвойстваОбъектов.Предопределенный = Ложь) И
//	|		  (СвойстваОбъектов.ПометкаУдаления = Истина)			Тогда 3
//	|	Когда (СвойстваОбъектов.ЭтоГруппа = Ложь) И
//	|		  (СвойстваОбъектов.Предопределенный = Истина) И
//	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 4
//	|	Когда (СвойстваОбъектов.ЭтоГруппа = Истина) И
//	|		  (СвойстваОбъектов.Предопределенный = Истина) И
//	|		  (СвойстваОбъектов.ПометкаУдаления = Ложь)				Тогда 5
//	|КОНЕЦ КАК ДанныеКартинки,
//	|
//	|	РегистрСведений.ПараметрыСУЗ.Значение            КАК Значение
//	|
//	|ИЗ
//	|	(
//	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|		ПланВидовХарактеристик.СвойстваОбъектов.ЭтоГруппа           КАК ЭтоГруппа,
//	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка              КАК Ссылка,
//	|		ПланВидовХарактеристик.СвойстваОбъектов.Код					КАК Код,
//	|		ПланВидовХарактеристик.СвойстваОбъектов.ПометкаУдаления     КАК ПометкаУдаления,
//	|		ПланВидовХарактеристик.СвойстваОбъектов.Предопределенный    КАК Предопределенный,
//	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства  КАК НазначениеСвойства
//	|	ИЗ
//	|		ПланВидовХарактеристик.СвойстваОбъектов
//	|	
//	|	ГДЕ
//	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В (&НазначениеСвойств )";
//	
//	// если характеристики, то группы не показываем
//	Если СтруктураПараметров.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
//		Запрос.Текст = Запрос.Текст+ "
//		| И НЕ ПланВидовХарактеристик.СвойстваОбъектов.ЭтоГруппа";
//	КонецЕсли;	
//	
//	N=0;
//	Если СписокФильтров<>0 Тогда
//		Если СписокФильтров.Количество()>0 Тогда
//		Запрос.Текст = Запрос.Текст + "
//		|	И ";
//			Для Каждого Строка Из СписокФильтров цикл
//				N=N+1;
//				Если Строка.Пометка Тогда
//					Запрос.Текст = Запрос.Текст+"НЕ (ПланВидовХарактеристик.СвойстваОбъектов."+Строка.Представление+" в ИЕРАРХИИ (&Фильтр"+N+"))";
//				Иначе	
//					Запрос.Текст = Запрос.Текст+"ПланВидовХарактеристик.СвойстваОбъектов."+Строка.Представление+" в ИЕРАРХИИ (&Фильтр"+N+")";
//				КонецЕсли;
//				Если СписокФильтров.Количество()<>N Тогда
//					Запрос.Текст = Запрос.Текст+" И ";
//				КонецЕсли;
//			  	Запрос.УстановитьПараметр("Фильтр"+N,Строка.Значение);
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	Если СтруктураПараметров.Ссылка.ЭтоГруппа Тогда
//		Запрос.УстановитьПараметр("ДляГруппы",Перечисления.Использование.ДляГруппы);
//		Запрос.УстановитьПараметр("ДляГруппыИЭлемента",Перечисления.Использование.ДляГруппыИЭлемента);
//		Запрос.Текст = Запрос.Текст + "
//		|		И (ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляГруппы
//		|		ИЛИ ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляГруппыИЭлемента)";
//	Иначе
//		Запрос.УстановитьПараметр("ДляЭлемента",Перечисления.Использование.ДляЭлемента);
//		Запрос.УстановитьПараметр("ДляГруппыИЭлемента",Перечисления.Использование.ДляГруппыИЭлемента);
//		Запрос.Текст = Запрос.Текст + "
//		|		И (ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляЭлемента
//		|		ИЛИ ПланВидовХарактеристик.СвойстваОбъектов.Использование = &ДляГруппыИЭлемента)";
//	КонецЕсли;	
//	Запрос.Текст = Запрос.Текст + "
//	|	)                                                           КАК СвойстваОбъектов
//	|
//	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
//	|	РегистрСведений.ПараметрыСУЗ
//	|ПО
//	|	РегистрСведений.ПараметрыСУЗ.Свойство = СвойстваОбъектов.Ссылка
//	|	И
//	|	РегистрСведений.ПараметрыСУЗ.Объект = &ОбъектОтбораЗначений
//	// Vold: более не актуально, из - за этого условия сильно тормозит на файловой версии
//	|	И
//	|//  ВЫБОР КОГДА РегистрСведений.ПараметрыСУЗ.Свойство.ОбщееСвойСтво ТОГДА
//	|//   РегистрСведений.ПараметрыСУЗ.СтруктурнаяЕдиница  = &ПустаяСтруктурнаяЕдиница
//	|//  ИНАЧЕ
//	|//   РегистрСведений.ПараметрыСУЗ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
//	|//  КОНЕЦ
//	|	(РегистрСведений.ПараметрыСУЗ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
//	|	ИЛИ
//	|	РегистрСведений.ПараметрыСУЗ.СтруктурнаяЕдиница  = &ПустаяСтруктурнаяЕдиница)
//	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
//	|	РегистрСведений.НазначенияСвойствОбъектов
//	|ПО
//	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
//	|	И
//	|	РегистрСведений.ПараметрыСУЗ.Значение ЕСТЬ NULL
//	|
//	|ГДЕ
//	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
//	|	ИЛИ
//	|	РегистрСведений.НазначенияСвойствОбъектов.Объект В ( &СписокНазначенийСвойств )
//	|УПОРЯДОЧИТЬ ПО
//	|	СвойстваОбъектов.Ссылка ИЕРАРХИЯ, СвойстваОбъектов.Код
//	|	АВТОУПОРЯДОЧИВАНИЕ
//	|";
//	ТаблицаСвойств=Запрос.Выполнить().Выгрузить(СтруктураПараметров.ОбходРезультатаЗапроса);
//КонецПроцедуры

//// Процедура заполняет набор записей регистра из таблицы значений.
//// Вызывается из процедуры "ЗаписатьЗначенияСвойств"
////
//// Параметры:
//// 		- НаборЗаписейЗначенияСвойств - Набор записей регистра сведений "ЗначенияСвойствОбъектов"
////		- ОбъектОтбораЗначений - объект, значения свойств которого записываются
////		- СтруктурнаяЕдиница - структурная единица, для которой записываются свойства 
////
//Процедура ЗаполнитьЗначениямиИзТаблицы(НаборЗаписейЗначенияСвойств,ОбъектОтбораЗначений,ТаблицаСвойств,СтруктурнаяЕдиница, НаборЗаписейПараметрыСУЗ)
//	//Если СтруктурнаяЕдиница = Неопределено Тогда
//	Если СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
//		ОбщееСвойство = Истина;
//		СохранятьВМатрице = Ложь;
//	ИначеЕсли ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
//		ОбщееСвойство = Ложь;
//		СохранятьВМатрице = Ложь;
//	Иначе
//		ОбщееСвойство = Ложь;
//		СохранятьВМатрице = Истина;
//	КонецЕсли;	
//	Для каждого Строка Из ТаблицаСвойств Цикл
//		//Если НЕ ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Строка.Значение) Тогда
//		// Считаем, что записывать не нужно только в случае отсутствия и записи и редактирвания...
//		// 8726
//		Если Строка.Значение <> NULL Тогда
//			Если Строка.Свойство.ОбщееСвойство <> ОбщееСвойство Тогда
//				Продолжить;
//			КонецЕсли;	
//			Если Строка.Свойство.СохранятьВМатрице <> СохранятьВМатрице Тогда
//				Продолжить;
//			КонецЕсли;	
//			Если Строка.Свойство.Родитель = ПланыВидовХарактеристик.СвойстваОбъектов.Заказы Тогда
//				НаборЗаписейДляДобавления = НаборЗаписейПараметрыСУЗ;
//			Иначе
//				НаборЗаписейДляДобавления = НаборЗаписейЗначенияСвойств;
//			КонецЕсли; 
//			Запись = НаборЗаписейДляДобавления.Добавить();
//			Запись.Объект   = ОбъектОтбораЗначений;
//			Запись.Свойство = Строка.Свойство;
//			Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
//			Если Запись.Свойство=ПланыВидовХарактеристик.СвойстваОбъектов.ДеньЗаказа Тогда
//				Запись.Значение = Строка.ЗначениеСвойства;
//			Иначе
//				Запись.Значение = Строка.Значение;
//			КонецЕсли;	
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры

//// Процедура заполняет набор записей регистра из дерева значений.
//// Вызывается из процедуры "ЗаписатьЗначенияСвойств" и из самой себя
////
//// Параметры:
//// 		- НаборЗаписейЗначенияСвойств - Набор записей регистра сведений "ЗначенияСвойствОбъектов"
////		- ОбъектОтбораЗначений - объект, значения свойств которого записываются
////		- СтруктурнаяЕдиница - структурная единица, для которой записываются свойства 
////
//Процедура ЗаполнитьЗначениямиИзДерева(НаборЗаписейЗначенияСвойств,ОбъектОтбораЗначений,ТаблицаСвойств,СтруктурнаяЕдиница, НаборЗаписейПараметрыСУЗ)
//	//Если СтруктурнаяЕдиница = Неопределено Тогда
//	Если СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
//		ОбщееСвойство = Истина;
//		СохранятьВМатрице = Ложь;
//	ИначеЕсли ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
//		ОбщееСвойство = Ложь;
//		СохранятьВМатрице = Ложь;
//	Иначе
//		ОбщееСвойство = Ложь;
//		СохранятьВМатрице = Истина;
//	КонецЕсли;	
//	Для каждого Строка Из ТаблицаСвойств.Строки Цикл
//		Если Строка.Строки.Количество()=0 Тогда
//			//Если НЕ ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Строка.Значение) Тогда
//			// 8726
//			Если Строка.Значение <> NULL Тогда
//				Если Строка.Свойство.ОбщееСвойство <> ОбщееСвойство Тогда
//					Продолжить;
//				КонецЕсли;	
//				Если Строка.Свойство.СохранятьВМатрице <> СохранятьВМатрице Тогда
//					Продолжить;
//				КонецЕсли;	
//				Если Строка.Свойство.Родитель = ПланыВидовХарактеристик.СвойстваОбъектов.Заказы Тогда
//					НаборЗаписейДляДобавления = НаборЗаписейПараметрыСУЗ;
//				Иначе
//					НаборЗаписейДляДобавления = НаборЗаписейЗначенияСвойств;
//				КонецЕсли; 
//				Запись = НаборЗаписейДляДобавления.Добавить();
//				Запись.Объект   = ОбъектОтбораЗначений;
//				Запись.Свойство = Строка.Свойство;
//				Запись.Значение = Строка.ЗначениеСвойства;
//				Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
//				Если Запись.Свойство=ПланыВидовХарактеристик.СвойстваОбъектов.ДеньЗаказа Тогда
//					Запись.Значение = Строка.ЗначениеСвойства;
//				Иначе
//					Запись.Значение = Строка.Значение;
//				КонецЕсли;	
//			КонецЕсли;
//		Иначе
//			ЗаполнитьЗначениямиИзДерева(НаборЗаписейЗначенияСвойств,ОбъектОтбораЗначений,Строка,СтруктурнаяЕдиница, НаборЗаписейПараметрыСУЗ);
//		КонецЕсли;	
//	КонецЦикла;
//КонецПроцедуры

//// Функция записывает значения свойств в информационную базу.
////
//// Параметры:
//// 		- ТаблицаСвойств - таблица, дерево или список таблиц из которых получаем
////			данные для записи
////		- ОбъектОтбораЗначений - объект, значения свойств которого записываются
////		- СтруктурнаяЕдиница - структурная единица, для которой записываются свойства 
////
//// Возвращаемое значение:
////  Истина - если значения свойств были записаны, или их не требуется записывать
////  Ложь   - если значения свойств не удалось записать.
////
//Функция ЗаписатьЗначенияСвойствПоСтруктурнымЕдиницам(ТаблицаСвойств,ОбъектОтбораЗначений,СтруктурнаяЕдиница, ПоПодгруппам = Истина)
//	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
//	НаборЗаписейПараметрыСУЗ = РегистрыСведений.ПараметрыСУЗ.СоздатьНаборЗаписей();
//	Если ТипЗнч(ТаблицаСвойств) = Тип("Массив") Тогда
//		Для каждого ТаблицаМассива Из ТаблицаСвойств Цикл
//			Если ТипЗнч(ТаблицаМассива) = Тип("ДеревоЗначений") Тогда
//				ЗаполнитьЗначениямиИзДерева(НаборЗаписейЗначенияСвойств,ОбъектОтбораЗначений,ТаблицаМассива,СтруктурнаяЕдиница, НаборЗаписейПараметрыСУЗ);
//			Иначе
//				ЗаполнитьЗначениямиИзТаблицы(НаборЗаписейЗначенияСвойств,ОбъектОтбораЗначений,ТаблицаМассива,СтруктурнаяЕдиница, НаборЗаписейПараметрыСУЗ);
//			КонецЕсли;	
//		КонецЦикла;	
//	ИначеЕсли ТипЗнч(ТаблицаСвойств) = Тип("ДеревоЗначений") Тогда	
//		ЗаполнитьЗначениямиИзДерева(НаборЗаписейЗначенияСвойств,ОбъектОтбораЗначений,ТаблицаСвойств,СтруктурнаяЕдиница, НаборЗаписейПараметрыСУЗ);
//	Иначе
//		ЗаполнитьЗначениямиИзТаблицы(НаборЗаписейЗначенияСвойств,ОбъектОтбораЗначений,ТаблицаСвойств,СтруктурнаяЕдиница, НаборЗаписейПараметрыСУЗ);
//	КонецЕсли;	
//	НаборЗаписейЗначенияСвойств.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
//	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектОтбораЗначений);
//	
//	НаборЗаписейПараметрыСУЗ.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
//	НаборЗаписейПараметрыСУЗ.Отбор.Объект.Установить(ОбъектОтбораЗначений);
//	
//	Попытка
//		//НаборЗаписейЗначенияСвойств.Записать();
//		Для каждого элЗаписи Из НаборЗаписейЗначенияСвойств Цикл
//			ЗаписатьСвойствоИерархически(элЗаписи.Объект, элЗаписи.Свойство, элЗаписи.СтруктурнаяЕдиница, элЗаписи.Значение, ПоПодгруппам);
//		КонецЦикла; 
//		// Изменение параметров СУЗ производится только в управлении запасами
//		//НаборЗаписейПараметрыСУЗ.Записать();
//		// Из карточки
//		Для каждого элЗаписи Из НаборЗаписейПараметрыСУЗ Цикл
//			ЗаписатьСвойствоСуз(элЗаписи.Объект, элЗаписи.Свойство, элЗаписи.СтруктурнаяЕдиница, элЗаписи.Значение, ПоПодгруппам);
//		КонецЦикла; 
//	Исключение
//		Предупреждение("Не удалось записать значения свойств:" + Символы.ПС + ОписаниеОшибки());
//		Возврат Ложь;
//	КонецПопытки;
//	Возврат Истина;
//КонецФункции

//// Для ценников и этикеток...
//// на подгруппы назначает всегда.
//Процедура ЗаписатьСвойствоИерархически(Объект, Свойство, СтруктурнаяЕдиница, Значение, ПоПодгруппам = Истина) Экспорт
//	ПустоеЗначение = ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Значение);
//	ОбщееСвойство = Свойство.ОбщееСвойство;
//	ПустаяСЕ = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
//	Если ПустоеЗначение Тогда
//		текСЕ = СтруктурнаяЕдиница;
//	Иначе
//		Если ОбщееСвойство Тогда
//			текСЕ = ПустаяСЕ;
//		иначе	
//			текСЕ = ?(ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(СтруктурнаяЕдиница) , ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница, СтруктурнаяЕдиница);
//		КонецЕсли; 
//	КонецЕсли; 
//	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
//	Запись.Объект = Объект;
//	Запись.Свойство = Свойство;
//	Запись.СтруктурнаяЕдиница = текСЕ;
//	Если ПустоеЗначение Тогда
//		Запись.Удалить();
//	иначе
//		Запись.Значение = Значение;
//		Запись.Записать();
//	КонецЕсли; 
//	Если НЕ Объект.ЭтоГруппа Тогда
//		Возврат;
//	КонецЕсли; 
//	// Для ценников и этикеток...
//	Если НЕ ПоПодгруппам Тогда
//	 Возврат;
//	КонецЕсли; 
//	Если (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЦенника) 
//		или (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЦенникаДляРА) 	
//		или (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЭтикетки) 	
//		или (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЭтикеткиДляРА) 	
//		Тогда
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	Номенклатура.Ссылка КАК Группа
//		|ИЗ
//		|	Справочник.Номенклатура КАК Номенклатура
//		|ГДЕ
//		|	Номенклатура.ЭтоГруппа
//		|	И (НЕ Номенклатура.ПометкаУдаления)
//		|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Группа)
//		|АВТОУПОРЯДОЧИВАНИЕ");
//		Запрос.УстановитьПараметр("Группа", Объект);
//		ДерНоменклатура = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
//		Для каждого Строка Из ДерНоменклатура.Строки Цикл
//			ЗаписатьСвойствоИерархическиРекурсивно(Строка,Свойство, текСЕ, Значение, ПустоеЗначение);
//		КонецЦикла; 
//	КонецЕсли; 
//КонецПроцедуры

//Процедура ЗаписатьСвойствоИерархическиРекурсивно(Строка, Свойство, СтруктурнаяЕдиница, Значение, ПустоеЗначение)
//	Для каждого ТекСтрока Из Строка.Строки Цикл
//		Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
//		Запись.Объект = ТекСтрока.Группа;
//		Запись.Свойство = Свойство;
//		Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
//		Если ПустоеЗначение Тогда
//			Запись.Удалить();
//		иначе
//			Запись.Значение = Значение;
//			Запись.Записать();
//		КонецЕсли; 
//		ЗаписатьСвойствоИерархическиРекурсивно(ТекСтрока,Свойство, СтруктурнаяЕдиница, Значение, ПустоеЗначение);
//	КонецЦикла; 
//КонецПроцедуры

Функция ЗаписатьЗначенияСвойств(ТаблицаСвойств, ОбъектОтбораЗначений) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Для каждого Строка Из ТаблицаСвойств Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			Запись = НаборЗаписейЗначенияСвойств.Добавить();
			
			Запись.Объект   = ОбъектОтбораЗначений;
			Запись.Свойство = Строка.Свойство;
			Запись.Значение = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектОтбораЗначений);
	
	Попытка
		НаборЗаписейЗначенияСвойств.Записать();
	Исключение
		#Если Клиент Тогда
			Предупреждение("Не удалось записать значения свойств:" + Символы.ПС + ОписаниеОшибки());
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
	////ЗаписатьЗначенияСвойствПоСтруктурнымЕдиницам(ТаблицаСвойств,ОбъектОтбораЗначений,Неопределено);
	//ЗаписатьЗначенияСвойствПоСтруктурнымЕдиницам(ТаблицаСвойств,ОбъектОтбораЗначений,Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), ПоПодгруппам);
	//ЗаписатьЗначенияСвойствПоСтруктурнымЕдиницам(ТаблицаСвойств,ОбъектОтбораЗначений,СтруктурнаяЕдиница, ПоПодгруппам);
	////ЗаписатьЗначенияСвойствПоСтруктурнымЕдиницам(ТаблицаСвойств,ОбъектОтбораЗначений,СтруктурнаяЕдиница.АссортиментнаяМатрица);
КонецФункции

//// Процедура открывает форму новой группы свойств.
//// Предназначена для вызова из форм по кнопке.
////
//// Параметры:
////  СтруктураПараметров - тип структура
////		элементы структуры:
////			- ФормаВладелец - форма, из которой вызывается ввод нового элемента
////			- НазначениеСвойств - значение реквизита, по которому отбораются свойства
////			- Родитель - родительская группа
////
//Процедура СвойстваНоваяГруппа(СтруктураПараметров) Экспорт
//	ФормаНовогоСвойства = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуНовойГруппы(,СтруктураПараметров.ФормаВладелец, );
//	ФормаНовогоСвойства.НазначениеСвойства = СтруктураПараметров.НазначениеСвойств;
//	Родитель=Неопределено;
//	Если СтруктураПараметров.Свойство("Родитель",Родитель) Тогда
//		ФормаНовогоСвойства.Родитель = Родитель;
//	КонецЕсли;
//	ФормаНовогоСвойства.Использование = Перечисления.Использование.ДляГруппыИЭлемента;		
//	ФормаНовогоСвойства.Открыть();
//КонецПроцедуры

// Процедура открывает форму нового свойства.
// Предназначена для вызова из форм по кнопке.
//
// Параметры:
//  СтруктураПараметров - тип структура
//		элементы структуры:
//			- ФормаВладелец - форма, из которой вызывается ввод новой группы
//			- НазначениеСвойств - значение реквизита, по которому отбораются свойства
//			- Родитель - родительская группа
//
Процедура СвойстваНовыйЭлемент(СтруктураПараметров) Экспорт
	ФормаНовогоСвойства = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуНовогоЭлемента(,СтруктураПараметров.ФормаВладелец, );
	ФормаНовогоСвойства.НазначениеСвойства = СтруктураПараметров.НазначениеСвойств;
	Родитель=Неопределено;
	Если СтруктураПараметров.Свойство("Родитель",Родитель) Тогда
		ФормаНовогоСвойства.Родитель = Родитель;
	КонецЕсли;	
//	ФормаНовогоСвойства.Использование = Перечисления.Использование.ДляГруппыИЭлемента;		
	ФормаНовогоСвойства.ОткрытьМодально();
КонецПроцедуры

// Процедура приводит тип значения значения свойства к требуемому типу.
// Предназначена для вызова из форм при редактировании значения свойства.
//
// Параметры:
//		- ФормаВладелец - форма, из которой вызывается редактирование
//		- Элемент - строка дерева или таблицы значений
//
Процедура РедактированиеСвойств(ФормаВладелец,Ссылка,Элемент,глКомпоненты=0) Экспорт
	//Если (Элемент.ТекущиеДанные.Свойство=ПланыВидовХарактеристик.СвойстваОбъектов.ДеньЗаказа) И
	//	(Элемент.ТекущаяКолонка.Имя="Значение") Тогда
	//	глКомпоненты.ВыборДней.Значение = Элемент.ТекущиеДанные.ЗначениеСвойства;
	//	Форма=глКомпоненты.ВыборДней.ПолучитьФорму("Форма",ФормаВладелец);
	//	КомандаЗакрытия = Форма.ОткрытьМодально();
	//	Если КомандаЗакрытия = Истина Тогда
	//		Элемент.ТекущиеДанные.ЗначениеСвойства=глКомпоненты.ВыборДней.Значение;
	//	КонецЕсли;
	//Иначе
		Попытка
			Если Элемент.ТекущиеДанные.Свойство=ПланыВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения Тогда
				//Элемент.Колонки.Значение.ЭлементУправления.ОграничениеТипа =Новый ОписаниеТипов("СправочникСсылка.КлассификаторСтранМира");
				Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение) Тогда
					Элемент.ТекущиеДанные.Значение=Справочники.КлассификаторСтранМира.ПустаяСсылка();
				КонецЕсли; 
			КонецЕсли; 
			Элемент.Колонки.Значение.ЭлементУправления.ОграничениеТипа = Элемент.ТекущиеДанные.Свойство.ТипЗначения;
			Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.Свойство.ТипЗначения.ПривестиЗначение(Элемент.ТекущиеДанные.Значение);
		Исключение
		КонецПопытки;
	//	Попытка
	//		Если Элемент.ТекущиеДанные.Свойство=ПланыВидовХарактеристик.СвойстваОбъектов.ОсновнойДоговор Тогда
	//			ОсновнойПоставщик = ПолучитьЗначениеПоСвойству(Элемент,ПланыВидовХарактеристик.СвойстваОбъектов.ОсновнойПоставщик);
	//			Элемент.Колонки.Значение.ЭлементУправления.ВыборПоВладельцу = ОсновнойПоставщик;
	//		ИначеЕсли Элемент.ТекущиеДанные.Свойство.НазначениеСвойства.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.Значение.Владелец)) Тогда
	//			Элемент.Колонки.Значение.ЭлементУправления.ВыборПоВладельцу = Ссылка;
	//		Иначе
	//			Элемент.Колонки.Значение.ЭлементУправления.ВыборПоВладельцу = Элемент.ТекущиеДанные.Свойство;
	//		КонецЕсли;	
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
	//Элемент.Колонки.Свойство.ЭлементУправления.РедактированиеТекста = Ложь;
КонецПроцедуры

//Функция ПолучитьЗначениеПоСвойству(Таблица,Свойство) Экспорт
//	Строка = Таблица.Значение.Найти(Свойство,"Свойство");
//	Если Строка = Неопределено Тогда
//		Возврат Неопределено;
//	Иначе
//		Возврат Строка.Значение;
//	КонецЕсли;	
//КонецФункции	

//// Процедура снимает и устанавливает пометку удаления свойства.
//// Предназначена для вызова из обработчиков форм ТаблицаСвойствПередУдалением.
////
//// Параметры:
////  ТекущаяСтрока - текущая строка дерева.
////
//Процедура ИнвертироватьПометкуУдаленияСвойства(ТекущаяСтрока) Экспорт
//	ОбъектСвойство = ТекущаяСтрока.Свойство.ПолучитьОбъект();
//	Если ОбъектСвойство.Предопределенный Тогда
//		Сообщить("Не допускается удаление предопределенных элементов!",СтатусСообщения.Внимание);
//		Возврат;
//	КонецЕсли;
//	Попытка
//		ОбъектСвойство.УстановитьПометкуУдаления(НЕ ТекущаяСтрока.ПометкаУдаления, Истина);
//	Исключение
//		Предупреждение("Не удалось изменить пометку удаления свойства:" + Символы.ПС + ОписаниеОшибки());
//	КонецПопытки;
//	ТекущаяСтрока.ПометкаУдаления = ОбъектСвойство.ПометкаУдаления;
//	Если (ОбъектСвойство.ЭтоГруппа = Ложь) И
//		(ОбъектСвойство.Предопределенный = Ложь) И
//		(ОбъектСвойство.ПометкаУдаления = Ложь) Тогда
//		ТекущаяСтрока.ДанныеКартинки = 0;
//	ИначеЕсли (ОбъектСвойство.ЭтоГруппа = Истина) И
//		(ОбъектСвойство.Предопределенный = Ложь) И
//		(ОбъектСвойство.ПометкаУдаления = Ложь) Тогда
//		ТекущаяСтрока.ДанныеКартинки = 1;
//	ИначеЕсли (ОбъектСвойство.ЭтоГруппа = Ложь) И
//		(ОбъектСвойство.Предопределенный = Ложь) И
//		(ОбъектСвойство.ПометкаУдаления = Истина) Тогда
//		ТекущаяСтрока.ДанныеКартинки = 2;
//	ИначеЕсли (ОбъектСвойство.ЭтоГруппа = Истина) И
//		(ОбъектСвойство.Предопределенный = Ложь) И
//		(ОбъектСвойство.ПометкаУдаления = Истина) Тогда
//		ТекущаяСтрока.ДанныеКартинки = 3;
//	ИначеЕсли (ОбъектСвойство.ЭтоГруппа = Ложь) И
//		(ОбъектСвойство.Предопределенный = Истина) И
//		(ОбъектСвойство.ПометкаУдаления = Ложь) Тогда
//		ТекущаяСтрока.ДанныеКартинки = 4;
//	ИначеЕсли (ОбъектСвойство.ЭтоГруппа = Истина) И
//		(ОбъектСвойство.Предопределенный = Истина) И
//		(ОбъектСвойство.ПометкаУдаления = Ложь) Тогда
//		ТекущаяСтрока.ДанныеКартинки = 5;
//	КонецЕсли;		  
//КонецПроцедуры

//// Процедура заполняет реквизиты документа или справочника значениями по умолчанию,
//// которые определены для текущего пользователя
//// Предназначена для вызова из форм документов или справочников
//// перед открытием.
////
//// Параметры:
////		- ТаблицаСвойств - кеш таблицы значений со свойствами по умолчанию
////		для текущего пользователя
////		- Форма - форма, из которой вызывается процедура
////
//Процедура ЗаполнитьЗначениямиПоУмолчанию(ТаблицаСвойств,Форма=0) Экспорт
//	Если ТаблицаСвойств.Количество()=0 Тогда
//		НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Пользователи;
//		СтруктураПараметров = Новый Структура;
//		СтруктураПараметров.Вставить("НазначениеСвойств",НазначениеСвойств);
//		СтруктураПараметров.Вставить("Ссылка",ПараметрыСеанса.ТекущийПользователь);
//		СтруктураПараметров.Вставить("ОбъектОтбораНазначений",ПараметрыСеанса.ТекущийПользователь);
//		СтруктураПараметров.Вставить("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
//		СтруктураПараметров.Вставить("ОбходРезультатаЗапроса",ОбходРезультатаЗапроса.Прямой);
//		СписокФильтров= Новый СписокЗначений;
//		СписокФильтров.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.ПоУмолчанию,"Родитель");		
//		СписокФильтров.Добавить(Ложь,"ЭтоГруппа");		
//		ПрочитатьЗаполнитьСвойстваИЗначения(ТаблицаСвойств,СтруктураПараметров,СписокФильтров);
//	КонецЕсли;
//	Если Форма = 0 Тогда
//		Возврат;		
//	КонецЕсли;	
//	Для Каждого	СтрокаТаблицы Из ТаблицаСвойств Цикл
//		Попытка
//			Если ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Форма[Строка(СтрокаТаблицы.Свойство)]) Тогда
//				Форма[Строка(СтрокаТаблицы.Свойство)] = СтрокаТаблицы.Значение;
//			КонецЕсли;	
//		Исключение
//		КонецПопытки;	
//	КонецЦикла;
//КонецПроцедуры

//// Функция возвращает указанное значение по умолчанию,
//// которое определено для текущего пользователя.
////
//// Параметры:
////		- Значение - строковое название получаемого значения
////
//Функция ПолучитьЗначениеПоУмолчанию(ТаблицаСвойств,Значение) Экспорт
//	Если ТипЗнч(ТаблицаСвойств) = Тип("ТаблицаЗначений") Тогда
//		Если ТаблицаСвойств.Количество()=0 Тогда
//			ЗаполнитьЗначениямиПоУмолчанию(ТаблицаСвойств);
//		КонецЕсли;
//	Иначе
//		ЗаполнитьЗначениямиПоУмолчанию(ТаблицаСвойств);
//	КонецЕсли;
//	
//	Попытка
//		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов[Значение];
//	Исключение
//		Возврат	Неопределено;	
//	КонецПопытки;	
//	
//	СтрокаТаблицы = ТаблицаСвойств.Найти(Свойство,"Свойство");
//	Если СтрокаТаблицы = Неопределено Тогда
//		Возврат	Неопределено;	
//	Иначе
//		Возврат	СтрокаТаблицы.Значение;	
//	КонецЕсли;	
//КонецФункции


//// Процедура создает и устанавливает свойства колонок дерева свойств и значений. 
//// Предназначена для вызова после процедуры "ПрочитатьЗаполнитьСвойстваИЗначения".
////
//// Параметры:
////		- ТаблицаСвойств - элемент формы дерево или таблица значений, в которой
////		заполняются	свойства изначения
////
Процедура СоздатьКолонкиТаблицы(ТаблицаСвойств) Экспорт
	ТаблицаСвойств.СоздатьКолонки();
	//ТаблицаСвойств.Колонки["Свойство"].КартинкиСтрок=БиблиотекаКартинок.ГруппаИЭлемент;
	ТаблицаСвойств.Колонки["Свойство"].ДанныеКартинки="ДанныеКартинки";
	ТаблицаСвойств.Колонки["Свойство"].ЭлементУправления.КнопкаОткрытия = Истина;
	ТаблицаСвойств.Колонки["Свойство"].ЭлементУправления.КнопкаОчистки = Ложь;
	ТаблицаСвойств.Колонки["Свойство"].ЭлементУправления.КнопкаВыбора = Ложь;
	ТаблицаСвойств.Колонки["Свойство"].ЭлементУправления.РедактированиеТекста = Ложь;
	Попытка
		ТаблицаСвойств.Колонки["Свойство"].ЭлементУправления.УстановитьДействие("Очистка",Новый Действие("ТаблицаСвойствСвойствоОчистка"));
	Исключение
	Конецпопытки;
	ТаблицаСвойств.Колонки["ЭтоГруппа"].Видимость = Ложь;
	//Если (Лев(ПараметрыСеанса.КодПродукта, 2) = "R2") Тогда
	//	Попытка
	//		ТаблицаСвойств.Колонки["Характеристика"].Видимость = Ложь; 
	//	Исключение
	//	КонецПопытки;	
	//КонецЕсли; 
	ТаблицаСвойств.Колонки["ЗначениеСвойства"].Видимость = Ложь;
	ТаблицаСвойств.Колонки["ДанныеКартинки"].Видимость = Ложь;
	ТаблицаСвойств.Колонки["ПометкаУдаления"].Видимость = Ложь;
	//ТаблицаСвойств.Колонки["СтруктурнаяЕдиница"].Видимость = Ложь;
	ТаблицаСвойств.Колонки["Значение"].РежимРедактирования=РежимРедактированияКолонки.ВходПриВводе;
	ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.АвтоВыборНезаполненного = Истина;
	ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.ВыборНезаполненного = Истина;
	// Vold: Для числовых параметров сразу при входе выпадает калькулятор, что неудобно+++
	//ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.РежимВыбораНезаполненного=РежимВыбораНезаполненного.ПриАктивизации;
	ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.РежимВыбораНезаполненного=РежимВыбораНезаполненного.ПриНажатииEnter;
	// Vold: Для числовых параметров сразу при входе выпадает калькулятор, что неудобно---
	ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.УстановитьДействие("Очистка",Новый Действие("ТаблицаСвойствЗначениеОчистка"));
	ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.КнопкаОткрытия = Истина;
	//ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.КнопкаОчистки = Истина;
	//ТаблицаСвойств.Колонки["Значение"].ЭлементУправления.КнопкаВыбора = Истина;
КонецПроцедуры                      

//// Функция заполняет таблицу основными параметрами системы управления запасами.
////
//// Параметры:
////		- КешОсновныхПараметровСУЗ - кеш таблицы значений с основными параметрами СУЗ
////		для текущего сеанса
////
//// Возвращаемое значение:
////  	ТаблицаЗначений с основными параметрами СУЗ.
////
//Функция ЗаполнитьСписокОсновныхПараметровСУЗ(КешОсновныхПараметровСУЗ) Экспорт
//	Если КешОсновныхПараметровСУЗ.Количество()=0 Тогда
//		ЭтоММ = (Лев(ПараметрыСеанса.КодПродукта, 2) = "R2");
//		Запрос = Новый Запрос();
//		Запрос.УстановитьПараметр("Родитель",ПланыВидовХарактеристик.СвойстваОбъектов.Заказы);
//		Запрос.Текст = "
//		|	ВЫБРАТЬ
//		|		СвойстваОбъектов.Ссылка
//		|	ИЗ
//		|		ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
//		|		ПОЛНОЕ ВНЕШНЕЕ Соединение РегистрСведений.ПодчиненныеПараметрыСУЗ КАК ПодчиненныеПараметрыСУЗ
//		|		ПО ПодчиненныеПараметрыСУЗ.Параметр = СвойстваОбъектов.Ссылка
//		|
//		|	ГДЕ
//		|		СвойстваОбъектов.Ссылка.Родитель=(&Родитель) И
//		|		ПодчиненныеПараметрыСУЗ.СУЗ ЕСТЬ NULL"+?(ЭтоММ," И СвойстваОбъектов.Ссылка <> &РаспределениеОстатков",""); 
//		Если ЭтоММ Тогда
//			Запрос.УстановитьПараметр("РаспределениеОстатков",ПланыВидовХарактеристик.СвойстваОбъектов.РаспределениеОстатковПоВесовымКоэффициентам);
//		КонецЕсли; 
//		КешОсновныхПараметровСУЗ=Запрос.Выполнить().Выгрузить();
//	КонецЕсли;	
//	Возврат КешОсновныхПараметровСУЗ;
//КонецФункции

//// Функция заполняет таблицу подчиненными параметрами системы управления запасами.
////
//// Параметры:
////    СУЗ - элемент справочника "Виды СУЗ", для которого нужно найти подчиненные элементы.
////
//// Возвращаемое значение:
////  	ТаблицаЗначений с подчиненными параметрами СУЗ.
////
//Функция ЗаполнитьСписокПодчиненныхПараметровСУЗ(СУЗ) Экспорт
//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("СУЗ",СУЗ);
//	Запрос.Текст = "
//	|	ВЫБРАТЬ
//	|		ПодчиненныеПараметрыСУЗ.Параметр КАК Ссылка
//	|	ИЗ
//	|		РегистрСведений.ПодчиненныеПараметрыСУЗ КАК ПодчиненныеПараметрыСУЗ
//	|
//	|	ГДЕ
//	|		ПодчиненныеПараметрыСУЗ.СУЗ = &СУЗ";
//	//ТаблицаПараметров=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
//	ТаблицаПараметров=Запрос.Выполнить().Выгрузить();
//	Возврат ТаблицаПараметров;
//КонецФункции

//Функция ЗаписьОдногоСвойства(Объект,Свойство,СтруктурнаяЕдиница,Значение, СПодгруппами = Ложь, СТоварамиГруппы = Ложь, СтоварамиПодгрупп = Ложь) Экспорт
//	Если Свойство.Родитель = ПланыВидовХарактеристик.СвойстваОбъектов.Заказы Тогда
//		ЗаписатьСвойствоСуз(Объект,Свойство,СтруктурнаяЕдиница,Значение, СПодгруппами, СТоварамиГруппы, СтоварамиПодгрупп);
//		Возврат Истина;
//		//НаборЗаписей = РегистрыСведений.ПараметрыСУЗ.СоздатьНаборЗаписей();
//	Иначе
//		НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
//	КонецЕсли; 
//	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
//	НаборЗаписей.Отбор.Объект.Установить(Объект);
//	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
//	Если Свойство.ОбщееСвойство Тогда
//		НаборЗаписей.Прочитать();
//		НаборЗаписей.Очистить();
//		НаборЗаписей.Записать();
//	Иначе
//		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ПустаяСтруктурнаяЕдиница);
//		НаборЗаписей.Прочитать();
//		НаборЗаписей.Очистить();
//		НаборЗаписей.Записать();
//		//Если Свойство.СохранятьВМатрице Тогда
//		//	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница.АссортиментнаяМатрица);
//		//Иначе	
//			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
//		//КонецЕсли;
//	КонецЕсли;	
//	
//	Запись = НаборЗаписей.Добавить();
//	Запись.Объект   = Объект;
//	Запись.Свойство = Свойство;
//	Если Свойство.ОбщееСвойство Тогда
//		Запись.СтруктурнаяЕдиница = ПустаяСтруктурнаяЕдиница;
//	Иначе	
//		//Если Свойство.СохранятьВМатрице Тогда
//		//	Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница.АссортиментнаяМатрица;
//		//Иначе	
//			Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
//		//КонецЕсли;
//	КонецЕсли;	
//	Запись.Значение = Значение;
//	Попытка
//		Если ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Значение) ИЛИ 
//			(ТипЗнч(Значение) = Тип("Булево") И Значение = Ложь) Тогда
//			НаборЗаписей.Очистить();
//		КонецЕсли;
//		НаборЗаписей.Записать();
//		Флаг = Истина;
//	Исключение
//		Предупреждение("Не удалось записать значения свойства" + Символы.ПС + ОписаниеОшибки());
//		Флаг = Ложь;
//	КонецПопытки;
//	Возврат Флаг;
//КонецФункции


//Функция ПолучитьЗначениеСвойстваПоИерархии(ЗНАЧ Номенклатура,Отбор) Экспорт
//	Отбор.Вставить("Объект",Номенклатура);
//	Значение = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор).Значение;
//	Свойство = Отбор.Свойство;
//	Если (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЦенника) 
//		или (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЦенникаДляРА) 	
//		или (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЭтикетки) 	
//		или (Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЭтикеткиДляРА) 	
//		Тогда
//		Если (Номенклатура.ЭтоГруппа) ИЛИ (НЕ ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Значение)) Тогда
//			Возврат Значение;
//		КонецЕсли; 
//		Отбор.Вставить("Объект",Номенклатура.Родитель);
//		Возврат РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор).Значение;
//	иначе	
//		Пока (ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Значение)) И (НЕ Номенклатура.Пустая()) Цикл
//			Номенклатура = Номенклатура.Родитель;
//			Отбор.Вставить("Объект",Номенклатура);
//			Значение = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор).Значение;
//		КонецЦикла;	
//		Возврат Значение;
//	КонецЕсли;	
//КонецФункции 

//// Текст для соединения по номенклатуре и самостоятельных выборок, с получением свойства по иерархии
//// (элемент или родитель на настоящий момент - ценники и этикетки)
//// Параметры
////  <Отбор>  – Массив номенклатуры, или текст подзапроса
////  <Запрос>  – <Запрос> – для установки параметров, чтобы на вызывающей стороне не 
////                 заботиться этим. Текст запроса не модифицируется!!!
////
////  <Свойство> - свойство для получения, или массив свойств, если не указано - берет ценник
////  <ИмяРегистра> - ЗначенияСвойствОбъектов, или ПараметрыСУЗ
////   Текст запроса, поля - НоменклатураСвойства(если не переопределено параметром СинонимНоменклатуры), 
////   ЗначениеСвойства, если передано свойство, предопределенное имя - если передано массивом
////
//Функция ПолучитьТекстЗапросаСвойстваПоИерархии(Отбор, Запрос, Свойство = Неопределено, СтруктурнаяЕдиница = Неопределено, ИмяРегистра = "ЗначенияСвойствОбъектов", СинонимНоменклатуры = "НоменклатураСвойства") Экспорт
//	текстВыбораСвойства = "";
//	СХарактеристиками = (Лев(ПараметрыСеанса.КодПродукта, 2) = "R2") И (ИмяРегистра = "ПараметрыСУЗ");
//	Если ТипЗнч(Свойство) = Тип("Массив") Тогда
//		несколькоСвойств = Истина;
//		N = 0;
//		Для каждого тексвойство Из Свойство Цикл
//			ИмяПеременной = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьИмяПредопределенного(тексвойство);
//			N = N+1;
//			текстВыбораСвойства = текстВыбораСвойства + "
//			|	МАКСИМУМ(ВЫБОР
//			|			КОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Свойство, ПараметрыРодителя.Свойство) = &СвойствоТекстЗапросаСвойстваПоИерархии"+N+"
//			|				ТОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ПараметрыРодителя.Значение)
//			|		КОНЕЦ) КАК "+ИмяПеременной+",";
//			Запрос.УстановитьПараметр("СвойствоТекстЗапросаСвойстваПоИерархии"+N,тексвойство.Ссылка);
//		КонецЦикла; 
//		ТекстОтбораПоСвойству = " В (&мсвСвойствТекстЗапросаСвойстваПоИерархии)";
//		Запрос.УстановитьПараметр("мсвСвойствТекстЗапросаСвойстваПоИерархии", Свойство);
//	Иначе
//		несколькоСвойств = Ложь;
//		текстВыбораСвойства = 
//		"ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ПараметрыРодителя.Значение) КАК ЗначениеСвойства,";
//		Если Свойство = Неопределено Тогда
//			тексвойство = ПланыВидовХарактеристик.СвойстваОбъектов.ШаблонЦенника;
//		Иначе
//			тексвойство = Свойство;
//		КонецЕсли; 
//		ТекстОтбораПоСвойству = "= &СвойствоЗапросаСвойстваПоИерархии";
//		Запрос.УстановитьПараметр("СвойствоЗапросаСвойстваПоИерархии", тексвойство);
//	КонецЕсли; 
//	Если СтруктурнаяЕдиница = Неопределено Тогда
//		текСЕ = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
//	Иначе
//		текСЕ = СтруктурнаяЕдиница;
//	КонецЕсли; 
//	Если ТипЗнч(Отбор) = Тип("Массив") Тогда
//		Запрос.УстановитьПараметр("мсвОтбораНоменклатураЗапросаСвойстваПоИерархии", Отбор);
//		ТекстОтбора = "&мсвОтбораНоменклатураЗапросаСвойстваПоИерархии";
//	Иначе // ТекстПодзапроса
//		ТекстОтбора = Отбор;
//	КонецЕсли; 
//	Запрос.УстановитьПараметр("ПустаяСЕ", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
//	Запрос.УстановитьПараметр("СЕЗапросаСвойстваПоИерархии", текСЕ);
//	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
//	Возврат 
//	"ВЫБРАТЬ
//	|	"+текстВыбораСвойства+"
//	|	Номенклатура.Ссылка КАК "+СинонимНоменклатуры+"
//	|   "+?(СХарактеристиками, " , естьNULL(ЗначенияСвойствОбъектов.Характеристика, &ПустаяХарактеристика) КАК Характеристика ", "")+"
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	| "+?(несколькоСвойств, "внутреннее соединение ПланВидовХарактеристик.СвойстваОбъектов КАК СО по СО.ссылка "+ТекстОтбораПоСвойству, "")+"
//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ЗначенияСвойствОбъектов.Значение КАК Значение,
//	|            "+?(несколькоСвойств,"ЗначенияСвойствОбъектов.Свойство КАК Свойство, ","")+"
//	|			ЗначенияСвойствОбъектов.Объект КАК Объект
//	|		ИЗ
//	|			РегистрСведений."+ИмяРегистра+" КАК ЗначенияСвойствОбъектов
//	|		ГДЕ
//	|			ВЫБОР
//	|					КОГДА ЗначенияСвойствОбъектов.Свойство.ОбщееСвойство
//	|						ТОГДА ЗначенияСвойствОбъектов.СтруктурнаяЕдиница = &ПустаяСЕ
//	|					ИНАЧЕ ЗначенияСвойствОбъектов.СтруктурнаяЕдиница = &СЕЗапросаСвойстваПоИерархии
//	|				КОНЕЦ
//	|			И ЗначенияСвойствОбъектов.Свойство "+ТекстОтбораПоСвойству+"
//	|			И ЗначенияСвойствОбъектов.Объект.ЭтоГруппа
//	|			И ЗначенияСвойствОбъектов.Объект В
//	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|						Номенклатура.Родитель
//	|					ИЗ
//	|						справочник.Номенклатура КАК Номенклатура
//	|					ГДЕ
//	|						Номенклатура.Ссылка В("+ТекстОтбора+") )) КАК ПараметрыРодителя
//	|		ПО Номенклатура.Родитель = ПараметрыРодителя.Объект
//	|       "+?(несколькоСвойств, " И СО.Ссылка = ПараметрыРодителя.Свойство", "")+"
//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ЗначенияСвойствОбъектов.Значение КАК Значение,
//	|           "+?(СХарактеристиками, "ЗначенияСвойствОбъектов.Характеристика КАК Характеристика, ", "")+"
//	|            "+?(несколькоСвойств,"ЗначенияСвойствОбъектов.Свойство КАК Свойство, ","")+"
//	|			ЗначенияСвойствОбъектов.Объект КАК Объект
//	|		ИЗ
//	|			РегистрСведений."+ИмяРегистра+" КАК ЗначенияСвойствОбъектов
//	|		ГДЕ
//	|			ВЫБОР
//	|					КОГДА ЗначенияСвойствОбъектов.Свойство.ОбщееСвойство
//	|						ТОГДА ЗначенияСвойствОбъектов.СтруктурнаяЕдиница = &ПустаяСЕ
//	|					ИНАЧЕ ЗначенияСвойствОбъектов.СтруктурнаяЕдиница = &СЕЗапросаСвойстваПоИерархии
//	|				КОНЕЦ
//	|			И ЗначенияСвойствОбъектов.Свойство "+ТекстОтбораПоСвойству+"
//	|			И ЗначенияСвойствОбъектов.Объект В
//	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|						Номенклатура.Ссылка
//	|					ИЗ
//	|						справочник.Номенклатура КАК Номенклатура
//	|					ГДЕ
//	|						Номенклатура.Ссылка В("+ТекстОтбора+"))) КАК ЗначенияСвойствОбъектов
//	|		ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
//	|       "+?(несколькоСвойств, " И СО.Ссылка = ЗначенияСвойствОбъектов.Свойство", "")+"
//	|ГДЕ
//	|	Номенклатура.Ссылка В("+ТекстОтбора+")"+?(несколькоСвойств," сгруппировать по Номенклатура.Ссылка"+?(СХарактеристиками,", естьNULL(ЗначенияСвойствОбъектов.Характеристика, &ПустаяХарактеристика) ",""),"");
//КонецФункции 

//////////// СУЗЗЗЗ++++
//// Запросу установить параметры СтруктурнаяЕдиницаСвойстваОтбора, СвойствоОтбора, ЗначениеСвойстваОтбора
//Функция ПолучитьТекстПодзапросаОтбораПоСвойствуСУЗ() Экспорт
//	Возврат 
//	"ВЫБРАТЬ
//	|	Номенклатура.Ссылка КАК НоменклатураОтбораПоСвойствуСУЗ
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.Родитель В
//	|			(ВЫБРАТЬ
//	|				ПараметрыСУЗ.Объект КАК Объект
//	|			ИЗ
//	|				РегистрСведений.ПараметрыСУЗ КАК ПараметрыСУЗ
//	|			ГДЕ
//	|				ПараметрыСУЗ.Свойство = &СвойствоОтбора
//	|				И ПараметрыСУЗ.Значение = &ЗначениеСвойстваОтбора
//	|				И ПараметрыСУЗ.СтруктурнаяЕдиница = &СтруктурнаяЕдиницаСвойстваОтбора
//	|				И ПараметрыСУЗ.Объект.ЭтоГруппа)
//	|	И (НЕ Номенклатура.ЭтоГруппа)
//	|	И (НЕ Номенклатура.Ссылка В
//	|				(ВЫБРАТЬ
//	|					ПараметрыСУЗ.Объект КАК Объект
//	|				ИЗ
//	|					РегистрСведений.ПараметрыСУЗ КАК ПараметрыСУЗ
//	|				ГДЕ
//	|					ПараметрыСУЗ.Свойство = &СвойствоОтбора
//	|					И ПараметрыСУЗ.СтруктурнаяЕдиница = &СтруктурнаяЕдиницаСвойстваОтбора
//	|					И (НЕ ПараметрыСУЗ.Объект.ЭтоГруппа)))
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ПараметрыСУЗ.Объект
//	|ИЗ
//	|	РегистрСведений.ПараметрыСУЗ КАК ПараметрыСУЗ
//	|ГДЕ
//	|	ПараметрыСУЗ.Свойство = &СвойствоОтбора
//	|	И ПараметрыСУЗ.Значение = &ЗначениеСвойстваОтбора
//	|	И ПараметрыСУЗ.СтруктурнаяЕдиница = &СтруктурнаяЕдиницаСвойстваОтбора
//	|	И (НЕ ПараметрыСУЗ.Объект.ЭтоГруппа)";
//КонецФункции 
//// Для переданного массива номенклатуры получает параметры заказа (или только переданные в мсвПараметры) по текущей (указанной) структурной единице
//// Возвращает табличку:
////Имя	                        Тип
////Номенклатура                  СправочникСсылка.Номенклатура
////ВидСУЗ						СправочникСсылка.ВидыСистемУправленияЗапасами
////ДеньЗаказа					Строка
////ЕдиницаИзмеренияЗаказа		СправочникСсылка.ЕдиницыИзмерения
////МаксимальныйЗаказ	 			Число
////Максимум						Число
////Минимум						Число
////ОсновнойДоговор				СправочникСсылка.Договоры
////ОсновнойПоставщик				СправочникСсылка.Контрагенты, СправочникСсылка.СтруктурныеЕдиницы
////ПроцентЗаказа					Число
////РазмерЗаказа					Число
////СтатусНоменклатуры			СправочникСсылка.СтатусыНоменклатуры
////СтраховойЗапас				Число
//Функция ПолучитьТаблицуПараметровСуз(мсвНоменклатуры, СтруктурнаяЕдиница = Неопределено, мсвПараметры = Неопределено) Экспорт
//	Если СтруктурнаяЕдиница = Неопределено Тогда
//		ТекущаяСтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
//	Иначе
//		ТекущаяСтруктурнаяЕдиница = СтруктурнаяЕдиница;
//	КонецЕсли; 
//	Если мсвПараметры = Неопределено Тогда
//		Запрос = Новый Запрос;
//		Запрос.Текст = "
//		|ВЫБРАТЬ
//		|	СвойстваОбъектов.Ссылка КАК Свойство
//		|ИЗ
//		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
//		|ГДЕ
//		|	СвойстваОбъектов.Родитель = &Родитель
//		|	И СвойстваОбъектов.Ссылка <> &ЕдиницаИзмерения
//		|	И СвойстваОбъектов.Предопределенный = Истина";
//		Запрос.УстановитьПараметр("Родитель",ПланыВидовХарактеристик.СвойстваОбъектов.Заказы);
//		// По умолчанию не получаем единицу измерения заказа
//		Запрос.УстановитьПараметр("ЕдиницаИзмерения",ПланыВидовХарактеристик.СвойстваОбъектов.ЕдиницаИзмеренияЗаказа);
//		ВсеПараметры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
//	Иначе
//		ВсеПараметры = мсвПараметры;
//	КонецЕсли; 
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	ПолучитьТекстЗапросаСвойстваПоИерархии(мсвНоменклатуры, Запрос, 
//	ВсеПараметры, СтруктурнаяЕдиница, "ПараметрыСУЗ", "Номенклатура");
//	Возврат Запрос.Выполнить().Выгрузить();
//КонецФункции

//Функция ПолучитьЗначениеСвойстваСУЗ(ЗНАЧ Номенклатура,Отбор) Экспорт
//	Отбор.Вставить("Объект",Номенклатура);
//	Если (Лев(ПараметрыСеанса.КодПродукта, 2) = "R2") Тогда
//		Отбор.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
//	КонецЕсли; 
//	Значение = РегистрыСведений.ПараметрыСУЗ.Получить(Отбор).Значение;
//	Если (Номенклатура.ЭтоГруппа) ИЛИ (НЕ ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Значение)) Тогда
//		Возврат Значение;
//	КонецЕсли; 
//	Отбор.Вставить("Объект",Номенклатура.Родитель);
//	Возврат РегистрыСведений.ПараметрыСУЗ.Получить(Отбор).Значение;
//КонецФункции

//Процедура ЗаписатьСвойствоСуз(Объект, Свойство, СтруктурнаяЕдиница, Значение, СПодгруппами = Ложь, СТоварамиГруппы = Ложь, СтоварамиПодгрупп = Ложь) Экспорт
//	ПустоеЗначение = ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(Значение);
//	ОбщееСвойство = Свойство.ОбщееСвойство;
//	ПустаяСЕ = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
//	//Если ПустоеЗначение Тогда
//	//	текСЕ = СтруктурнаяЕдиница;
//	//Иначе
//		Если ОбщееСвойство Тогда
//			текСЕ = ПустаяСЕ;
//		иначе	
//			текСЕ = ?(ОмОбщиеПроцедурыИФункции.ЗначениеНеЗаполнено(СтруктурнаяЕдиница), ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница, СтруктурнаяЕдиница);
//		КонецЕсли; 
//	//КонецЕсли; 
//	Запись = РегистрыСведений.ПараметрыСУЗ.СоздатьМенеджерЗаписи();
//	Запись.Объект = Объект;
//	Запись.Свойство = Свойство;
//	Запись.СтруктурнаяЕдиница = текСЕ;
//	Если ПустоеЗначение Тогда
//		Запись.Удалить();
//	иначе
//		Запись.Значение = Значение;
//		Запись.Записать();
//	КонецЕсли; 
//	Если НЕ Объект.ЭтоГруппа Тогда
//		Возврат;
//	КонецЕсли; 
//	Если СПодгруппами Тогда
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	Номенклатура.Ссылка КАК Группа
//		|ИЗ
//		|	Справочник.Номенклатура КАК Номенклатура
//		|ГДЕ
//		|	Номенклатура.ЭтоГруппа
//		|	И (НЕ Номенклатура.ПометкаУдаления)
//		|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Группа)
//		|АВТОУПОРЯДОЧИВАНИЕ");
//		Запрос.УстановитьПараметр("Группа", Объект);
//		ДерНоменклатура = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
//		Для каждого Строка Из ДерНоменклатура.Строки Цикл
//			ЗаписатьСвойствоСузРекурсивно(Строка,Свойство, текСЕ, Значение, ПустоеЗначение);
//		КонецЦикла; 
//	КонецЕсли; 
//	Если СТоварамиГруппы Тогда
//		// Удалим назначение на товары группы, чтобы действовало назначенное на группу
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	ПараметрыСУЗ.Объект КАК Объект
//		|ИЗ
//		|	РегистрСведений.ПараметрыСУЗ КАК ПараметрыСУЗ
//		|ГДЕ
//		|	(НЕ ПараметрыСУЗ.Объект.ЭтоГруппа)
//		|	И (ПараметрыСУЗ.Объект.Родитель = &Объект)
//		|	И (ПараметрыСУЗ.Свойство = &Свойство)
//		|	И (ПараметрыСУЗ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)");
//		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", текСЕ);
//		Запрос.УстановитьПараметр("Свойство", Свойство);
//		Запрос.УстановитьПараметр("Объект", Объект);
//		ВыбЗапроса = Запрос.Выполнить().Выбрать();
//		Пока ВыбЗапроса.Следующий() Цикл
//			Запись = РегистрыСведений.ПараметрыСУЗ.СоздатьМенеджерЗаписи();
//			Запись.Объект = ВыбЗапроса.Объект;
//			Запись.Свойство = Свойство;
//			Запись.СтруктурнаяЕдиница = текСЕ;
//			Запись.Удалить();
//		КонецЦикла; 
//	КонецЕсли; 
//	Если СтоварамиПодгрупп Тогда
//		// Удалим назначение на товары подгрупп, чтобы действовало назначенное на группы
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	ПараметрыСУЗ.Объект КАК Объект
//		|ИЗ
//		|	РегистрСведений.ПараметрыСУЗ КАК ПараметрыСУЗ
//		|ГДЕ
//		|	(НЕ ПараметрыСУЗ.Объект.ЭтоГруппа)
//		|	И (ПараметрыСУЗ.Объект В ИЕРАРХИИ(&Объект))		
//		|	И (ПараметрыСУЗ.Объект.Родитель <> &Объект)
//		|	И (ПараметрыСУЗ.Свойство = &Свойство)
//		|	И (ПараметрыСУЗ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)");
//		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", текСЕ);
//		Запрос.УстановитьПараметр("Свойство", Свойство);
//		Запрос.УстановитьПараметр("Объект", Объект);
//		ВыбЗапроса = Запрос.Выполнить().Выбрать();
//		Пока ВыбЗапроса.Следующий() Цикл
//			Запись = РегистрыСведений.ПараметрыСУЗ.СоздатьМенеджерЗаписи();
//			Запись.Объект = ВыбЗапроса.Объект;
//			Запись.Свойство = Свойство;
//			Запись.СтруктурнаяЕдиница = текСЕ;
//			Запись.Удалить();
//		КонецЦикла; 
//	КонецЕсли; 
//КонецПроцедуры

//Процедура ЗаписатьСвойствоСузРекурсивно(Строка, Свойство, СтруктурнаяЕдиница, Значение, ПустоеЗначение)
//	Для каждого ТекСтрока Из Строка.Строки Цикл
//		Запись = РегистрыСведений.ПараметрыСУЗ.СоздатьМенеджерЗаписи();
//		Запись.Объект = ТекСтрока.Группа;
//		Запись.Свойство = Свойство;
//		Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
//		Если ПустоеЗначение Тогда
//			Запись.Удалить();
//		иначе
//			Запись.Значение = Значение;
//			Запись.Записать();
//		КонецЕсли; 
//		ЗаписатьСвойствоСузРекурсивно(ТекСтрока,Свойство, СтруктурнаяЕдиница, Значение, ПустоеЗначение);
//	КонецЦикла; 
//КонецПроцедуры

////Для получателя текста запроса необходимо установить параметры: СписокНоменклатуры, Свойство, ТекСе
//Функция ПолучитьТекстЗапросаПоСвойствуИерархическиДляОтчетов(СписокНоменклатуры,ИмяСвойства = "Значение")  экспорт
//	Инк = "";
//	
//	МаксУровеньНоменклатура = ОмЦенообразование.ПолучитьТекущийМаксимальныйУровеньИерархии("Номенклатура"); 
//	МаксУровеньНоменклатура = Макс(МаксуровеньНоменклатура,1);
//	
//	Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	Реальный.Ссылка как Номенклатура,
//	|	Реальный.Значение КАК "+ИмяСвойства+" , Реальный.СтруктурнаяЕдиница как СтруктурнаяЕдиница
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ВложенныйЗапрос.Ссылка КАК Ссылка,
//	|		МИНИМУМ(ВЫБОР ";
//	для сч = 1 по МаксУровеньНоменклатура цикл
//		Текст = Текст + "
//		|				КОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка"+Инк;
//		Текст = Текст + "
//		|					ТОГДА "+сч;
//		Инк = Инк+".Родитель";	
//	КонецЦикла;
//	Текст = Текст + "
//	|			КОНЕЦ) КАК Поле1    
//	|	ИЗ
//	|		(ВЫБРАТЬ
//	|			спрНоменклатура.Ссылка КАК Ссылка
//	|		ИЗ
//	|			Справочник.Номенклатура КАК спрНоменклатура
//	|		ГДЕ
//	|			(НЕ спрНоменклатура.ЭтоГруппа)   ";
//	Если ЗначениеЗаполнено(СписокНоменклатуры) тогда
//	Текст = Текст + "
//	|			И спрНоменклатура.Ссылка В(&СписокНоменклатуры)";
//	Конецесли;
//	Текст = Текст + ") КАК ВложенныйЗапрос
//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыСУЗ КАК ПараметрыСУЗ
//	|			ПО (ПараметрыСУЗ.Свойство = &Свойство)
//	|				И (ВЫБОР ";
//	Инк = "";
//	для сч = 1 по МаксУровеньНоменклатура цикл
//		Текст = Текст + "
//		|					КОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка"+инк;
//		Текст = Текст+"
//		|						ТОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка"+инк;
//		Инк = Инк+".Родитель";	
//	КонецЦикла;
//	Текст = Текст + "
//	|				КОНЕЦ)
//	|				И (ВЫБОР
//	|					КОГДА ПараметрыСУЗ.Свойство.ОбщееСвойство
//	|						ТОГДА ИСТИНА
//	|					ИНАЧЕ ПараметрыСУЗ.СтруктурнаяЕдиница = &ТекСе
//	|				КОНЕЦ)
//	|	
//	|	СГРУППИРОВАТЬ ПО
//	|		ВложенныйЗапрос.Ссылка) КАК Фиктивный
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ВложенныйЗапрос.Ссылка КАК Ссылка,
//	|			ВЫБОР       ";
//	Инк = "";
//	для сч = 1 по МаксУровеньНоменклатура цикл
//		Текст = Текст + "
//		|				КОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка"+инк;
//		Текст = Текст + "
//		|					ТОГДА "+сч;
//		Инк = Инк + ".Родитель";
//	КонецЦикла;
//	Текст = Текст + "
//	|			КОНЕЦ КАК Поле1,
//	|			ПараметрыСУЗ.Значение КАК Значение , ПараметрыСуз.СтруктурнаяЕдиница как СтруктурнаяЕдиница
//	|		ИЗ
//	|			(ВЫБРАТЬ
//	|				спрНоменклатура.Ссылка КАК Ссылка 
//	|			ИЗ
//	|				Справочник.Номенклатура КАК спрНоменклатура
//	|			ГДЕ
//	|				(НЕ спрНоменклатура.ЭтоГруппа)    ";
//	Если ЗначениеЗаполнено(СписокНоменклатуры) тогда
//	Текст = Текст + "
//	|				И спрНоменклатура.Ссылка В(&СписокНоменклатуры)";
//	Конецесли;
//	Текст = Текст + ") КАК ВложенныйЗапрос
//	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыСУЗ КАК ПараметрыСУЗ
//	|				ПО (ПараметрыСУЗ.Свойство = &Свойство)
//	|					И (ВЫБОР
//	|						КОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка
//	|							ТОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка
//	|						КОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка.Родитель
//	|							ТОГДА ПараметрыСУЗ.Объект = ВложенныйЗапрос.Ссылка.Родитель
//	|					КОНЕЦ)
//	|					И (ВЫБОР
//	|						КОГДА ПараметрыСУЗ.Свойство.ОбщееСвойство
//	|							ТОГДА ИСТИНА
//	|						ИНАЧЕ ПараметрыСУЗ.СтруктурнаяЕдиница = &ТекСе
//	|					КОНЕЦ)) КАК Реальный
//	|		ПО Фиктивный.Ссылка = Реальный.Ссылка
//	|			И Фиктивный.Поле1 = Реальный.Поле1";
//	Возврат Текст;
//КонецФункции

//////////// СУЗЗЗЗ----
