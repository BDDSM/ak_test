
///////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ФУНКЦИИ

// Функция время начала замера
//
// Параметры:
//  КодКлючевойОперации - Строка, код элемента справочника "КлючевыеОперации"
//
// Возвращаемое значение:
//  Число - время начала замера
//
Функция ЗафиксироватьВремяНачала(КлючеваяОперация, ВызовССервера, Описание = "") Экспорт
	
	Если ПараметрыСеанса.APDEX_НастройкиЗамеров.APDEX_ОтключитьЗамер тогда
		Возврат Ложь;
	КонецЕсли;

	Соответствие = ПолучитьПараметрСеанса();
	
	Если Соответствие = Неопределено тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;
	

	ВремяНачала = ТочноеВремя();

	Соответствие.Вставить(КлючеваяОперация, ВремяНачала);
	Если ЗначениеЗаполнено(Описание) тогда
		Соответствие.Вставить("%Описание"+КлючеваяОперация, Описание);
	КонецЕсли;
	УстановитьПараметрСеанса(Соответствие);
	
	УстановитьФлаг(Не ВызовССервера);
	
	Возврат ВремяНачала;
	
КонецФункции

Функция НомерСеансаИнформационнойБазыЛк()
	Возврат 0;
КонецФункции

// Процедура фиксирует время окончания замер
//
// Возвращаемое значение:
//  Число - время окончания замера
//
Функция ЗафиксироватьВремяОкончания(КлючеваяОперация = Неопределено, ВызовИзОбработчикаОжидания, Описание = "", ТекстЗапроса = "") Экспорт
	
	Если ПараметрыСеанса.APDEX_НастройкиЗамеров.APDEX_ОтключитьЗамер тогда
		Возврат Ложь;
	КонецЕсли;

	ВремяОкончания = ТочноеВремя();
	ДатаЗамера = ТекущаяДата();
	
	Соответствие = ПолучитьПараметрСеанса(Ложь);
	
	Если Соответствие = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверка, если обработчик ожидания подключен, то пользователь не должен сам завершать замер
	Если Не ВызовИзОбработчикаОжидания Тогда
		ОбработчикПодключен = Соответствие.Получить("%ОбработчикПодключен%");
		ОбработчикПодключен = ?(ОбработчикПодключен = Неопределено, Ложь, ОбработчикПодключен);
		Если ОбработчикПодключен Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	ВремяНачала = Неопределено;
	Если КлючеваяОперация = Неопределено Тогда // Параллельно выполняется замер только одной ключевой операции
		
		Если Соответствие.Количество() > 3 Тогда
			УстановитьПараметрСеанса(Неопределено);
            Возврат 0;
			//ВызватьИсключение "Начато несколько различных замеров.
			//				  |В таких случаях необходимо указывать какая ключевая операция завершилась.";
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Соответствие Цикл
			
			// Чтобы не читать значение ключа %ОбработчикПодключен%
			Если ТипЗнч(КлючИЗначение.Ключ) = Тип("СправочникСсылка.APDEX_КлючевыеОперации") тогда 
			//	или Лев(""+КлючИЗначение.Ключ,10)="Метаданные" Тогда
			//Если НЕ Лев(КлючИЗначение.Ключ,1) = "%" тогда
				КлючеваяОперация = КлючИЗначение.Ключ;
				ВремяНачала = КлючИЗначение.Значение;
				Если Описание = "" тогда
					Попытка
						Описание = Соответствие["%Описание"+КлючеваяОперация];
					Исключение
					КонецПопытки;
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ВремяНачала = Соответствие.Получить(КлючеваяОперация);
		
	КонецЕсли;
	
	Если ВремяНачала = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	
	Соответствие.Удалить(КлючеваяОперация);
	Попытка
		Соответствие.Удалить("%Описание"+КлючеваяОперация)
	Исключение
	КонецПопытки;
	УстановитьПараметрСеанса(Соответствие);
	
	Время = (ВремяОкончания - ВремяНачала - ?((ВремяОкончания - ВремяНачала) = 0,0,?(ВызовИзОбработчикаОжидания, 100*0, 0)) ) / 1000;
	Если Время < ПараметрыСеанса.APDEX_НастройкиЗамеров.APDEX_МинимальноеВремяЗамера тогда
		Возврат ВремяОкончания;
	КонецЕсли;
	
	//ДатаЗамера = ТекущаяДата();
	ТекПользователь = "";
	Попытка
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь; 
	Исключение
	КонецПопытки;
	
	APDEX_СпособЗаписиЗамеров = ПараметрыСеанса.APDEX_НастройкиЗамеров.APDEX_СпособЗаписиЗамеров;
	
	НомерСеанса = НомерСеансаИнформационнойБазы();
 
	
	
	Если APDEX_СпособЗаписиЗамеров = 0  тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ";", "$");
		СтрокаСведений = ""+ДатаЗамера+";"+КлючеваяОперация+";"+Время+";"+Описание+";"+ТекПользователь+";"+ТекстЗапроса+";"+НомерСеанса;
		ЗаписатьВЖурналРегистрации(СтрокаСведений);
		
	Иначе
		
		ПараметрыЗамера = Новый Структура;
		ПараметрыЗамера.Вставить("ДатаЗамера",ДатаЗамера);
		ПараметрыЗамера.Вставить("КлючеваяОперация",КлючеваяОперация);
		ПараметрыЗамера.Вставить("Информация",Описание);
		ПараметрыЗамера.Вставить("НомерСеанса",НомерСеанса);
		ПараметрыЗамера.Вставить("ВремяВыполнения",Время);
		ПараметрыЗамера.Вставить("Пользователь",ТекПользователь);
		ПараметрыЗамера.Вставить("ТекстЗапроса",ТекстЗапроса);
		ПараметрыЗамера.Вставить("Магазин",Неопределено);
		
		Попытка
			ПараметрыЗамера.Вставить("Магазин",ПараметрыСеанса.ТорговаяТочкаПоАйпи);
		Исключение
		КонецПопытки;	
		
		Если APDEX_СпособЗаписиЗамеров = 1 Тогда
			ЗаписатьЗамерВРегистр(ПараметрыЗамера);
		ИначеЕсли APDEX_СпособЗаписиЗамеров = 2 Тогда
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ПараметрыЗамера);
			
			
			ФоновыеЗадания.Выполнить("APDEX_ОценкаПроизводительностиСерверВызовСервера.ЗаписатьЗамерВРегистр",МассивПараметров,Новый УникальныйИдентификатор,"Фоновая фиксация замера APDEX");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВремяОкончания;
	
КонецФункции


Процедура ЗаписатьЗамерВРегистр(ПараметрыЗамера) Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ТекНабор = РегистрыСведений.APDEX_ЗамерыВремени.СоздатьНаборЗаписей();
	ТекНабор.Отбор.ДатаЗамера.Установить(ПараметрыЗамера.ДатаЗамера);
	ТекНабор.Отбор.КлючеваяОперация.Установить(ПараметрыЗамера.КлючеваяОперация);
	ТекНабор.Отбор.НомерСеанса.Установить(ПараметрыЗамера.НомерСеанса);
	
	Запись = ТекНабор.Добавить();
	Запись.ДатаЗамера = ПараметрыЗамера.ДатаЗамера;
	Запись.КлючеваяОперация = ПараметрыЗамера.КлючеваяОперация;
	Запись.Информация = ПараметрыЗамера.Информация;
	Запись.НомерСеанса = ПараметрыЗамера.НомерСеанса;
	Запись.ВремяВыполнения = ПараметрыЗамера.ВремяВыполнения;
	Запись.Пользователь = ПараметрыЗамера.Пользователь; 
	Запись.ТекстЗапроса = ПараметрыЗамера.ТекстЗапроса;
	Запись.Магазин = ПараметрыЗамера.Магазин;
	Попытка
		ТекНабор.Записать();
	Исключение
	КонецПопытки;
	
	
	
КонецПроцедуры	


// Процедура устанавливает флаг ОбработчикПодключен
//
// Параметры:
//  Значение - Булево, значение устанавливаемого флага
//
Процедура УстановитьФлаг(ОбработчикПодключен)
	
	Соответствие = ПолучитьПараметрСеанса();
	
	Соответствие.Вставить("%ОбработчикПодключен%", ОбработчикПодключен);
	
	УстановитьПараметрСеанса(Соответствие);
	
КонецПроцедуры

// Функция получает значение параметра сеанса ТекущийЗамерВремени
//
// Возвращаемое занчение:
//  Соответствие - параметр сеанса установлен
//  Неопределено - параметр сеанса не установлен
//
Функция ПолучитьПараметрСеанса(Создавать = Истина)
	
	Попытка
		Возврат ПараметрыСеанса.APDEX_ТекущийЗамерВремени.Получить();
	Исключение
		Если Создавать Тогда
			Возврат Новый Соответствие;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

// Процедура устанавливает значение параметра сеанса ТекущийЗамерВремени
// Параметры:
//  Соответствие - Произвольный тип данных, значение которое будет помещенов в параметр сеанса ТекущийЗамерВремени
//
Процедура УстановитьПараметрСеанса(Соответствие)
	
	ХранилищеЗначения = Новый ХранилищеЗначения(Соответствие);
	ПараметрыСеанса.APDEX_ТекущийЗамерВремени = ХранилищеЗначения;
	
КонецПроцедуры

// Функция получает точное время
//
// Возвращаемое значение:
//  Число - время с точностью до миллисекунд
Функция ТочноеВремя()
	
	ВремяВСекундах=0;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	стрВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	Если Число(Сред(стрВерсияПриложения, 5, 2))>=17 или Лев(стрВерсияПриложения,3) = "8.3" Тогда
		Выполнить("ВремяВСекундах=ТекущаяУниверсальнаяДатаВМиллисекундах();");
		Возврат ВремяВСекундах;
	Иначе
		
		Попытка
			
			//1 попытка
			//Получение времени средствами внешней компомненты 
			Инструменты = ПолучитьИнструменты();
			Возврат ЗначениеТаймера(Инструменты);
			
		Исключение
			Попытка
				
				//2 попытка
				//Получение времени средствами джава скрипта
				Возврат ПолучитьВремяСПомощьюЯваСкрипт();
				
			Исключение
				
				//3 попытка
				//Получение времени средствами 1С
				Возврат ПолучитьДату();
				
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВремяСПомощьюЯваСкрипт()

	мЯваСкрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
	мЯваСкрипт.Language = "javascript";
	ВремяЯваСкрипт = мЯваСкрипт.Eval("(new Date()).valueOf()");
	Если мЯваСкрипт <> Неопределено Тогда
		Возврат ВремяЯваСкрипт;
	Иначе 
		Возврат ПолучитьДату();
	КонецЕсли;

КонецФункции

Функция ПолучитьДату()
	Возврат (ТекущаяДата()-Дата(0001,1,1))*1000;
КонецФункции

// Процедура записывает данные в журнал регистрации
//
Процедура ЗаписатьВЖурналРегистрации(Текст)
 
 ЗаписьЖурналаРегистрации("Оценка производительности", 
        УровеньЖурналаРегистрации.Информация, 
        Метаданные.РегистрыСведений.APDEX_ЗамерыВремени, 
        "Оценка производительности", 
        Текст);
 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВНЕШНЕЙ КОМПОНЕНТОЙ

// Получить объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция ПолучитьИнструменты()
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьИнструменты();
	
КонецФункции // ПолучитьИнструменты()

// Создать объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция СоздатьИнструменты()
	
	Возврат Новый("Addin.ETP.Tools");
	
КонецФункции // СоздатьИнструменты()

// Подключить внешнюю компоненту КИП
//
Процедура ПодключитьВнешнийКомпонент()
	
	ИмяКомпонента = "ОбщийМакет.APDEX_ОценкаПроизводительностиВнешнийКомпонент";

	Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
		#Если Клиент Тогда
			УстановитьВнешнююКомпоненту(ИмяКомпонента);
		#КонецЕсли
		
		Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
			ВызватьИсключение "Ошибка подключения внешнего компонента.";
		КонецЕсли;
	КонецЕсли;
	
	Инструменты = СоздатьИнструменты();
	ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);
	ТребуемаяВерсия = "2.0.4.52";
	
	Если ПодключеннаяВерсия <> ТребуемаяВерсия Тогда
		ВызватьИсключение
			"Версия подключенного внешнего компонента ("
			+ ПодключеннаяВерсия
			+ ") не совпадает с требуемой версией ("
			+ ТребуемаяВерсия
			+ "). Для устранения несоответствия версий, выгрузите всех клиентов"
			" и перезагрузите сервер 1С:Предприятия этой информационной базы.";
	КонецЕсли;

	
КонецПроцедуры // ПодключитьВнешнийКомпонент()

// Выполнить метод внешнего компонента
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//
// Возвращаемое значение:
//   Произвольный - результат, возвращаемый методом
//
Функция ВыполнитьМетод(Объект, Имя, Параметры = Неопределено)
	
	ИменаПараметров = "";
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "Параметры." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");
	Исключение
		Если Объект <> Неопределено И Объект.ЕстьОшибка() Тогда
			ВызватьИсключение Объект.ОписаниеОшибки();
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции // ВыполнитьМетод()

// Получить значение таймера для замера интервала времени
//
// Параметры:
//  Инструменты - Объект внешнего компонента
//
// Возвращаемое значение:
//  Число - текущее значение таймера в миллисекундах
//
Функция ЗначениеТаймера(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ЗначениеТаймера");
	
КонецФункции // ЗначениеТаймера()

// Получить версию текущего компонента.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ВерсияКомпонента(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьВерсию");
	
КонецФункции // ВерсияКомпонента()

Функция ПолучитьОперацию(КлючеваяОперация) Экспорт
	
	Если ТипЗнч(КлючеваяОперация) = тип("СправочникСсылка.APDEX_КлючевыеОперации") тогда
		Возврат КлючеваяОперация;
	ИначеЕсли ТипЗнч(КлючеваяОперация) = Тип("Строка") тогда
		КлючеваяОперацияТекст = КлючеваяОперация;
		КлючеваяОперацияСсылка = Справочники.APDEX_КлючевыеОперации.НайтиПоНаименованию(КлючеваяОперацияТекст,Истина);
		Если НЕ ЗначениеЗаполнено(КлючеваяОперацияСсылка) тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	APDEX_КлючевыеОперации.Приоритет КАК Приоритет
			|ИЗ
			|	Справочник.APDEX_КлючевыеОперации КАК APDEX_КлючевыеОперации
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет УБЫВ";
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Приоритет = 1;
			Если Выборка.Следующий() тогда
				Приоритет = Выборка.Приоритет + 1; 
			КонецЕсли;
			
			КлючеваяОперацияОбъект = Справочники.APDEX_КлючевыеОперации.СоздатьЭлемент();
			КлючеваяОперацияОбъект.Наименование = КлючеваяОперацияТекст;
			КлючеваяОперацияОбъект.ЦелевоеВремя = 5;
			КлючеваяОперацияОбъект.Приоритет = Приоритет;
			КлючеваяОперацияОбъект.Описание = "";
			КлючеваяОперацияОбъект.Записать();
			КлючеваяОперацияСсылка = КлючеваяОперацияОбъект.Ссылка;
		КонецЕсли;
		Возврат КлючеваяОперацияСсылка;
	Иначе 
		Попытка
			КлючеваяОперацияТекст = ""+КлючеваяОперация.Метаданные();
			КлючеваяОперацияСсылка = Справочники.APDEX_КлючевыеОперации.НайтиПоНаименованию(КлючеваяОперацияТекст,Истина);
			Если НЕ ЗначениеЗаполнено(КлючеваяОперацияСсылка) тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	APDEX_КлючевыеОперации.Приоритет КАК Приоритет
				|ИЗ
				|	Справочник.APDEX_КлючевыеОперации КАК APDEX_КлючевыеОперации
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет УБЫВ";
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Приоритет = 1;
				Если Выборка.Следующий() тогда
					Приоритет = Выборка.Приоритет + 1; 
				КонецЕсли;
				
				КлючеваяОперацияОбъект = Справочники.APDEX_КлючевыеОперации.СоздатьЭлемент();
				КлючеваяОперацияОбъект.Наименование = КлючеваяОперацияТекст;
				КлючеваяОперацияОбъект.ЦелевоеВремя = 5;
				КлючеваяОперацияОбъект.Приоритет = Приоритет;
				КлючеваяОперацияОбъект.Описание = КлючеваяОперация.Метаданные().Синоним;
				КлючеваяОперацияОбъект.Записать();
				КлючеваяОперацияСсылка = КлючеваяОперацияОбъект.Ссылка;
			КонецЕсли;
			Возврат КлючеваяОперацияСсылка;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат КлючеваяОперация;
	
КонецФункции


Процедура ЗагрузитьЗамерыИзЖурналаРегистрации(ДатаНачала)
	
	ДатаН = ДатаНачала;
	ДатаК = КонецДня(ТекущаяДата());
	Фильтр = Новый Структура;
	Фильтр.Вставить("Событие","Оценка производительности");
	Фильтр.Вставить("StartDate  ",ДатаНачала);
	Фильтр.Вставить("EndDate ", КонецДня(ДатаК));
	
	
	ТаблицаАпдекса = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ТаблицаАпдекса,Фильтр,"Комментарий, Данные",);       
	Сч = 0;
	
	Для каждого ТекСтрока из ТаблицаАпдекса цикл
		
		ТекстСтроки = ТекСтрока.Комментарий;
		
		МассивСтрок = РазложитьСтрокуВМассив(ТекстСтроки,";");
		
		Попытка
			ДатаЗамера = Дата(МассивСтрок[0]);
		Исключение
			Попытка 
				Если Найти(МассивСтрок[0],"AM") > 0 Или Найти(МассивСтрок[0],"PM") > 0 Тогда
					
					// возможно, приехала дата из другой локали, в виде 6/20/2013 6:22:27 PM
					РазборДаты = СтрЗаменить(МассивСтрок[0],"/",Символы.ПС);
					РазборДаты = СтрЗаменить(РазборДаты,":",Символы.ПС);
					РазборДаты = СтрЗаменить(РазборДаты," ",Символы.ПС);
					
					ТипДаты = ВРег(СтрПолучитьСтроку(РазборДаты,7));
					
					Если ТипДаты="AM" Тогда
						НоваяДата = Дата(СтрПолучитьСтроку(РазборДаты,3),СтрПолучитьСтроку(РазборДаты,1),СтрПолучитьСтроку(РазборДаты,2), СтрПолучитьСтроку(РазборДаты,4),СтрПолучитьСтроку(РазборДаты,5), СтрПолучитьСтроку(РазборДаты,6));
					ИначеЕсли ТипДаты="PM" Тогда
						
						Часы = Число(СтрПолучитьСтроку(РазборДаты,4));
						
						Если Часы <> 12 Тогда
							Часы = 12+Число(СтрПолучитьСтроку(РазборДаты,4));
						Иначе
							Если ТипДаты="PM" Тогда
								Часы = 12;
							Иначе
								Часы = 0;
							КонецЕсли;	
						КонецЕсли;
					
						Часы = ?(Часы = 24,0,Часы);
						
						НоваяДата = Дата(СтрПолучитьСтроку(РазборДаты,3),СтрПолучитьСтроку(РазборДаты,1),СтрПолучитьСтроку(РазборДаты,2), Часы,СтрПолучитьСтроку(РазборДаты,5), СтрПолучитьСтроку(РазборДаты,6));
					КонецЕсли;
					ПроверочнаяДата = Формат(НоваяДата,"ДФ='M/d/yyyy h:mm:ss tt'");
					Если ПроверочнаяДата = МассивСтрок[0] Тогда
						ДатаЗамера = НоваяДата;
					Иначе
						Сообщить("Ошибка преобразования даты: "+МассивСтрок[0]+", обратитесь на форум http://gilev.ru/forum");
						Продолжить;
					КонецЕсли;
					
				Иначе
					
					// возможно, приехала дата из другой локали, в виде 22.08.2013 14:03:05
					РазборДаты = СтрЗаменить(МассивСтрок[0],".",Символы.ПС);
					РазборДаты = СтрЗаменить(РазборДаты,":",Символы.ПС);
					РазборДаты = СтрЗаменить(РазборДаты," ",Символы.ПС);
					НоваяДата = Дата(СтрПолучитьСтроку(РазборДаты,3),СтрПолучитьСтроку(РазборДаты,2),СтрПолучитьСтроку(РазборДаты,1), СтрПолучитьСтроку(РазборДаты,4),СтрПолучитьСтроку(РазборДаты,5), СтрПолучитьСтроку(РазборДаты,6));
					ПроверочнаяДата = Формат(НоваяДата,"ДФ='dd.MM.yyyy H:mm:ss'");
					Если ПроверочнаяДата = МассивСтрок[0] Тогда
						ДатаЗамера = НоваяДата;
					Иначе
						Сообщить("Ошибка преобразования даты: "+МассивСтрок[0]+", обратитесь на форум http://gilev.ru/forum");
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецПопытки;
		
		КлючеваяОперация = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию(МассивСтрок[1]);
		
		Время = Число(МассивСтрок[2]);
		
		Описание = МассивСтрок[3];
		
		ТекПользователь = МассивСтрок[4];
		
		ТекстЗапроса = МассивСтрок[5];
		
		НомерСеанса = МассивСтрок[6]; 
		
		Сч = Сч+1;
		
		ТекНабор = РегистрыСведений.APDEX_ЗамерыВремени.СоздатьНаборЗаписей();
		ТекНабор.Отбор.ДатаЗамера.Установить(ДатаЗамера);
		ТекНабор.Отбор.КлючеваяОперация.Установить(КлючеваяОперация);
		ТекНабор.Отбор.НомерСеанса.Установить(НомерСеанса);
		
		Запись = ТекНабор.Добавить();
		Запись.ДатаЗамера = ДатаЗамера;
		Запись.КлючеваяОперация = КлючеваяОперация;
		Запись.Информация = Описание;
		Запись.ВремяВыполнения = Время;
		Запись.Пользователь = ТекПользователь; 
		Запись.ТекстЗапроса = ТекстЗапроса;
		Запись.НомерСеанса = НомерСеанса;
		
		Попытка
			ТекНабор.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	
КонецПроцедуры


Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


Функция  ПолучитьПодключениеКБазе(СтруктураПараметров) Экспорт
    
	Попытка
		WS_Определение = Новый WSОпределения(СтруктураПараметров.APDEX_ИмяВебСервиса, СтруктураПараметров.APDEX_ПользовательВебСервиса, СтруктураПараметров.APDEX_ПарольВебСервиса);
	Исключение    //резервный сервис
		ИмяВебСервисаРезерв = СтруктураПараметров.APDEX_ИмяВебСервисаРезерв;
		
		Если ПустаяСтрока(ИмяВебСервисаРезерв) Тогда
			ИмяВебСервисаРезерв = "http://beta.gilev.ru:8080/ApdexWeb/ws/ApdexValue.1cws?wsdl";
		КонецЕсли;
		
		WS_Определение = Новый WSОпределения(ИмяВебСервисаРезерв, СтруктураПараметров.APDEX_ПользовательВебСервиса, СтруктураПараметров.APDEX_ПарольВебСервиса);
	КонецПопытки;

	
	Прокси = Новый WSПрокси(WS_Определение, 
			"http://www.ApdexValue.org/webservice",
			"ApdexValue",
			"ApdexValueSoap");

	
	
	Прокси.Пользователь = СтруктураПараметров.APDEX_ПользовательВебСервиса;
	Прокси.Пароль		= СтруктураПараметров.APDEX_ПарольВебСервиса;
	
    
    Возврат Прокси;
КонецФункции	

///////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ДАННЫХ APDEX
//
Процедура ВыгрузитьAPDEX() Экспорт
	
	
	APDEX_Настройки = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьНастройки();
	
	ДатаПоследнейВыгрузки =  Справочники.APDEX_ДополнительныеНастройки.ДополнительнаяНастройка.APDEX_ДатаПоследнейВыгрузкиЗамеров;
	
	
	Если НЕ ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда
		ДатаПоследнейВыгрузки = НачалоДня(ТекущаяДата());
	КонецЕсли;	

		
	
	Если APDEX_Настройки.APDEX_СпособЗаписиЗамеров = 0 Тогда
		ЗагрузитьЗамерыИзЖурналаРегистрации(ДатаПоследнейВыгрузки);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	APDEX_ЗамерыВремени.ДатаЗамера,
	|	APDEX_ЗамерыВремени.НомерСеанса КАК НомерСеанса,
	|	APDEX_ЗамерыВремени.ВремяВыполнения,
	|	APDEX_ЗамерыВремени.Пользователь КАК ИмяПользователя,
	|	APDEX_ЗамерыВремени.КлючеваяОперация.Наименование КАК КлючеваяОперация,
	|	APDEX_ЗамерыВремени.Информация,
	|	APDEX_ЗамерыВремени.ТекстЗапроса
	|ИЗ
	|	РегистрСведений.APDEX_ЗамерыВремени КАК APDEX_ЗамерыВремени
	|ГДЕ
	|	APDEX_ЗамерыВремени.ДатаЗамера > &Дата";
	Запрос.УстановитьПараметр("Дата",ДатаПоследнейВыгрузки -1);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	
	
	ИспользоватьПочту = APDEX_Настройки.APDEX_ФормироватьПочтовыеФайлы;
	
	
	Если Не  ИспользоватьПочту Тогда
		ИмяВебСервиса = APDEX_Настройки.APDEX_ИмяВебСервиса;
		
		Если НЕ ПустаяСтрока(ИмяВебСервиса) Тогда
			
			Прокси = ПолучитьПодключениеКБазе(APDEX_Настройки);
				
			
			
			ТаблицаЗамеров = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаЗамеров.Количество() > 0 Тогда
				
				ДатаВыгрузки = ТекущаяДата();
				
				ТаблицаЗамеровСтрокой = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(ТаблицаЗамеров,Новый СжатиеДанных(9)));
				
				
				СтрВозврат = Прокси.LoadList(APDEX_Настройки.APDEX_ИдентификаторБазыAPDEX,ТаблицаЗамеровСтрокой);
				
				Если СтрВозврат = "true" Тогда
					
					ОбъектДопНастройки = Справочники.APDEX_ДополнительныеНастройки.ДополнительнаяНастройка.ПолучитьОбъект();
					ОбъектДопНастройки.APDEX_ДатаПоследнейВыгрузкиЗамеров = ДатаВыгрузки;
					ОбъектДопНастройки.Записать();

					
					НаборЗаписей = РегистрыСведений.APDEX_ЛогОтправкиДанных.СоздатьНаборЗаписей();
					
					СтрокаНабора = НаборЗаписей.Добавить();
					СтрокаНабора.Период = ТекущаяДата();
					СтрокаНабора.КоличествоЗаписейОтправлено  = ТаблицаЗамеров.Количество();
					
					НаборЗаписей.Записать(Ложь);
					
				КонецЕсли;	
				
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		
		ТаблицаЗамеров = Запрос.Выполнить().Выгрузить();
		
		ДатаВыгрузки = ТекущаяДата();
				
		Если ТаблицаЗамеров.Количество() > 0 Тогда
			
			ТаблицаЗамеровСтрокой = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(ТаблицаЗамеров,Новый СжатиеДанных(9)));
			
			СформироватьФайлыПочтовыхВложений(ТаблицаЗамеровСтрокой,APDEX_Настройки.APDEX_ИдентификаторБазыAPDEX);
			
			ОбъектДопНастройки = Справочники.APDEX_ДополнительныеНастройки.ДополнительнаяНастройка.ПолучитьОбъект();
			ОбъектДопНастройки.APDEX_ДатаПоследнейВыгрузкиЗамеров = ДатаВыгрузки;
			ОбъектДопНастройки.Записать();

					
			
			НаборЗаписей = РегистрыСведений.APDEX_ЛогОтправкиДанных.СоздатьНаборЗаписей();
			
			СтрокаНабора = НаборЗаписей.Добавить();
			СтрокаНабора.Период = ДатаВыгрузки;
			СтрокаНабора.КоличествоЗаписейОтправлено  = ТаблицаЗамеров.Количество();
			
			НаборЗаписей.Записать(Ложь);
			
		КонецЕсли;	
			
	
		
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьФайлыПочтовыхВложений(ТаблицаЗамеров,ИдентификаторБазы)  
	
		
	Если ПустаяСтрока(ИдентификаторБазы) Тогда
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		"В настройках не указан идентификатор базы на сервере APDEX!!!"); 

		ВызватьИсключение "В настройках не указан идентификатор базы!!!";
	КонецЕсли;	
	
	
	APDEX_Настройки = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьНастройки();
	
	ИмяФайла =  APDEX_Настройки.APDEX_ПутьКФайламПочтовыхВложений;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		ИмяФайла = КаталогВременныхФайлов();
	КонецЕсли;
	
	ИмяФайла =  ИмяФайла+"\Apdex_"+ИдентификаторБазы+"_1_1_"+Формат(ТекущаяДата(),"ДФ='dd_MM_yyyy_HH_mm'")+".txt";
	
	
	
	ТекстовыйДокумент =  Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТаблицаЗамеров);
	ТекстовыйДокумент.Записать(ИмяФайла);
	
	
	ИмяИсходногоФайла = ИмяФайла;
	
	ИмяФайла = СтрЗаменить(ИмяФайла, ".txt", ".apdex");
	
	Архиватор = Новый ЗаписьZipФайла(ИмяФайла);
	Архиватор.Добавить(ИмяИсходногоФайла);
	Архиватор.Записать();		
	
	УдалитьФайлы(ИмяИсходногоФайла);
	
	СистемнаяУчетнаяЗапись = APDEX_Настройки.APDEX_СистемнаяУчетнаяЗаписьПочтыСервиса;
	
	АдресЭлектроннойПочты = APDEX_Настройки.APDEX_ЭлектроннаяПочтаСервиса;	
	
	Если ЗначениеЗаполнено(СистемнаяУчетнаяЗапись) и Не ПустаяСтрока(АдресЭлектроннойПочты) Тогда
		 ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись,АдресЭлектроннойПочты,ИмяФайла);
	КонецЕсли;	
	
КонецПроцедуры	


Функция ПолучитьПрофильИнтернетПочтовоеПодключения(УчетнаяЗапись) Экспорт

	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Логин;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	//Профиль.ИспользоватьSSLPOP3 = УчетнаяЗапись.ИспользоватьSSLPOP3;
	//Профиль.ИспользоватьSSLSMTP = УчетнаяЗапись.ИспользоватьSSLSMTP;
	//Профиль.ИспользоватьSSLIMAP = Истина;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;  
		Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;                 		
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.ПарольSMTP       = "";
		Профиль.ПользовательSMTP = "";
	КонецЕсли; 
	
	Возврат Профиль;

КонецФункции 

Процедура  ОтправитьПочтовоеСообщение(УчетнаяЗаписьОтправителя,АдресЭлектроннойПочты,ИмяФайла) Экспорт
	
	
	Профиль = ПолучитьПрофильИнтернетПочтовоеПодключения(УчетнаяЗаписьОтправителя);
	
	ИнтернетПочта = Новый ИнтернетПочта;
	Попытка
		
		ИнтернетПочта.Подключиться(Профиль);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		ОписаниеОшибки()); 
		
		
		ВызватьИсключение "Не удалось подключиться к почтовому серверу! Ошибка: " + ОписаниеОшибки();
		
	КонецПопытки;	
	
	ТекстСообщения = "";
	
	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ПочтовоеСообщение.Получатели.Добавить(АдресЭлектроннойПочты);
	
	
	ПочтовоеСообщение.ИмяОтправителя = УчетнаяЗаписьОтправителя.Наименование;
	ПочтовоеСообщение.Отправитель = УчетнаяЗаписьОтправителя.АдресЭлектроннойПочты;
	ПочтовоеСообщение.Тема = "Data for service";
	
	ПочтовоеСообщение.Вложения.Добавить(ИмяФайла);
	
	
	Попытка
		
		ИнтернетПочта.Послать(ПочтовоеСообщение);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		ОписаниеОшибки()); 
		
		ВызватьИсключение "Не удалось отправить сообщение об ошибке! Ошибка: " + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

Функция ПроверкаВебСервиса() Экспорт
	
	Ошибка="";
	
	APDEX_Настройки = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьНастройки();
	
	ИмяВебСервиса = APDEX_Настройки.APDEX_ИмяВебСервиса;
	
	Если НЕ ПустаяСтрока(ИмяВебСервиса) Тогда
		
		
		ПользовательВебСервиса = APDEX_Настройки.APDEX_ПользовательВебСервиса;
		ПарольПользователяВебСервиса = APDEX_Настройки.APDEX_ПарольВебСервиса;
		
		
		WS_Определение = Новый WSОпределения(ИмяВебСервиса, ПользовательВебСервиса, ПарольПользователяВебСервиса);
		
		Прокси = Новый WSПрокси(WS_Определение, 
		"http://www.ApdexValue.org/webservice",
		"ApdexValue",
		"ApdexValueSoap");
		
		Прокси.Пользователь = ПользовательВебСервиса;
		Прокси.Пароль		= ПарольПользователяВебСервиса;
		
		
		
		Попытка
			
			Прокси.WebAccess();
			
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		Ошибка = "В настройках не указано имя веб-сервиса!!!";
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

Функция ПолучитьНастройки() Экспорт
	
	СтруктураПараметров = Новый Структура;

	
	НаборЗаписей = РегистрыСведений.APDEX_Настройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Измерение.Установить(0);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Добавить();
	КонецЕсли; 
	
	ТЗНастроек = НаборЗаписей.Выгрузить();
	СтрокаТЗ = ТЗНастроек[0];
	
	КолекцияКолонок = ТЗНастроек.Колонки;
	
	Для каждого Колонка из КолекцияКолонок Цикл
		ИмяКолонки = Колонка.Имя;
		СтруктураПараметров.Вставить(ИмяКолонки,СтрокаТЗ[ИмяКолонки]);
	КонецЦикла;	
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция УстановитьНастройки(Запись) Экспорт
	НЗ = РегистрыСведений.APDEX_Настройки.СоздатьНаборЗаписей();
	НЗ.Отбор.Измерение.Установить(0);
	Запись2 = НЗ.Добавить();
	ЗаполнитьЗначенияСвойств(Запись2, Запись);
	НЗ.Записать();
КонецФункции
 
	
	
 
