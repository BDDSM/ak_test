Функция ПолучитьСвойстваСчета(Знач Счет, ИмяПланаСчетов = "Финансовый") Экспорт

	ДанныеСчета = Новый Структура;
	//+++susk
	//ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Финансовый.ПустаяСсылка());
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());
	//---susk
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");	
	//+++susk
	//ДанныеСчета.Вставить("Родитель"                         , ПланыСчетов.Финансовый.ПустаяСсылка());
	ДанныеСчета.Вставить("Родитель"                         , ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());
	//---susk
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("УчетПоПодразделениям"           , Ложь);
	ДанныеСчета.Вставить("НалоговыйУчет"                  , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто	= ПолучитьМаксКоличествоСубконто();
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Финансовый.Ссылка,
	|	Финансовый.Родитель,
	|	Финансовый.Код,
	|	Финансовый.Наименование,
	|	Финансовый.Вид,
	|	Финансовый.Забалансовый,
	|	Финансовый.ЗапретитьИспользоватьВПроводках,
	|	Финансовый.Валютный,
	|	Финансовый.Количественный,
	//+++АК Susk (Суслин К.В.) 2018.02.22 ИП-00017500	 
	|	" + ?(ИмяПланаСчетов = "Финансовый", "ЛОЖЬ", "Финансовый.УчетПоПодразделениям") + " КАК УчетПоПодразделениям,
	//|	ЛОЖЬ КАК УчетПоПодразделениям,
	|	" + ?(ИмяПланаСчетов = "Финансовый", "ЛОЖЬ", "Финансовый.НалоговыйУчет") + " КАК НалоговыйУчет
	//|	ЛОЖЬ КАК НалоговыйУчет
	//---АК Susk (Суслин К.В.) 
	|ИЗ
	|	ПланСчетов."+ИмяПланаСчетов+" КАК Финансовый
	|ГДЕ
	|	Финансовый.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ФинансовыйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ФинансовыйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ФинансовыйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ФинансовыйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	ФинансовыйВидыСубконто.Суммовой КАК Суммовой
	|ИЗ
	|	ПланСчетов."+ИмяПланаСчетов+".ВидыСубконто КАК ФинансовыйВидыСубконто
	|ГДЕ
	|	ФинансовыйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФинансовыйВидыСубконто.НомерСтроки";
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

Функция ПолучитьМаксКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Финансовый.МаксКоличествоСубконто;

КонецФункции

Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконто.Склады
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконто.Склады
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконто.Склады;

	Возврат УчетПоСкладам;

КонецФункции 

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	СвойстваСчета      = ПолучитьСвойстваСчета(Счет);

	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконто.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто1Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконто.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто2Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконто.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто3Суммовой;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	//СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

	//ПартионныйУчет = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
	//	ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
	//	ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

	Возврат Ложь;

КонецФункции 

Функция КомиссионныйТовар(Счет) Экспорт

	//Комиссионный = ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный")
	//	И Счет <> ПланыСчетов.Хозрасчетный.ПустаяСсылка()
	//	И Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);

	Возврат Ложь;

КонецФункции

Функция СчетОтноситсяКДеятельностиЕНВД(Счет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Рег.Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК Рег
	|ГДЕ
	|	Рег.Счет = &Счет";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции 

Функция СчетаВыручкиЕНВД() Экспорт

	Возврат БухгалтерскийУчетПереопределяемыйУФ.СчетаВыручкиЕНВД();

КонецФункции

Функция СчетаРасходовЕНВД() Экспорт

	Возврат БухгалтерскийУчетПереопределяемыйУФ.СчетаРасходовЕНВД();

КонецФункции

Функция СчетаУчетаЕНВД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаДоходовИРасходовЕНВД.Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

Функция МассивСчетовПереоценкиУСН() Экспорт
	
	//Запрос = Новый Запрос;
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	Хозрасчетный.Ссылка КАК Счет
	//|ИЗ
	//|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	//|ГДЕ
	//|	Хозрасчетный.Валютный
	//|		И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	//|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса), 
	//|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), 
	//|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета), 
	//|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета), 
	//|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))";
	//
	//ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	//
	//Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
	Возврат Новый Массив;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоДокументамРасчетов(Счет) Экспорт

	//СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	//УчетПоДокументамРасчетов = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
	//	ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
	//	ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;

	Возврат Ложь;

КонецФункции

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты;

	Возврат УчетПоКонтрагентам;

КонецФункции 

Функция НаСчетеВедетсяУчетПоДоговорам(Счет) Экспорт

	//СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	//УчетПоДоговорам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
	//	ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
	//	ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

	Возврат Ложь;

КонецФункции

Функция НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Счет) Экспорт
	
	//СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	//УчетПоНомГруппам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
	//	ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
	//	ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;

	Возврат Ложь;

КонецФункции

Функция НаСчетеВедетсяУчетПоСтатьямЗатрат(Счет) Экспорт
	
	//СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	//УчетПоСтатьямЗатрат = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
	//	ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
	//	ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;

	Возврат Ложь;

КонецФункции

Функция НаСчетеВедетсяУчетПоПрочимДоходамИРасходам(Счет) Экспорт
	
	//СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	//УчетПоПрочимДоходамИРасходам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
	//	ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
	//	ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;

	Возврат Ложь;

КонецФункции

Функция СчетВИерархии(Счет, Эталон) Экспорт

	Если ЗначениеЗаполнено(Счет) Тогда
		Возврат Счет = Эталон ИЛИ Счет.ПринадлежитЭлементу(Эталон);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Финансовый.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Финансовый КАК Финансовый
	|ГДЕ
	|	Финансовый.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

// Определяет вид актива для РБП.
//
// Параметры:
//  СчетСписания   - ПланСчетовСсылка - ссылка на счет, по которому определяется 
//                  вид актива (обязательный параметр).
//  
Функция ОпределитьВидАктиваРБП(СчетСписания) Экспорт
	
	Если Не ЗначениеЗаполнено(СчетСписания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВЫБОР
	//	|		КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет01)
	//	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ОсновныеСредства)
	//	|		ИНАЧЕ ВЫБОР
	//	|				КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет08)
	//	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеВнеоборотныеАктивы)
	//	|				ИНАЧЕ ВЫБОР
	//	|						КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетЗатрат)
	//	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.Запасы)
	//	|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)
	//	|					КОНЕЦ
	//	|			КОНЕЦ
	//	|	КОНЕЦ КАК ВидАктива
	//	|ИЗ
	//	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	//	|ГДЕ
	//	|	Хозрасчетный.Ссылка = &ТекущийСчет";

	//Запрос.УстановитьПараметр("ТекущийСчет", СчетСписания);
	//Запрос.УстановитьПараметр("Счет01", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	//Запрос.УстановитьПараметр("Счет08", ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	//Массив = Новый Массив;
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);

	//Запрос.УстановитьПараметр("СчетЗатрат", Массив);

	//Результат = Запрос.Выполнить().Выбрать();
	//Результат.Следующий();

	//Возврат Результат.ВидАктива;

	Возврат Неопределено;
	
КонецФункции

// Определяет счет учета материалов, переданных в переработку
Функция СчетУчетаМатериалыПереданныеВПереработку(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
	
	//Если ЗначениеЗаполнено(СчетВыбранныйПользователем)
	//	И СчетВыбранныйПользователем.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку) Тогда
		Возврат СчетВыбранныйПользователем;
	//Иначе
	//	Возврат ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
	//КонецЕсли;
	
КонецФункции

// Определяет счет учета материалов, принятых в переработку и затем использованных
Функция СчетУчетаМатериалыПринятыеВПереработкуВПроизводстве(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
	
	//Если ЗначениеЗаполнено(СчетВыбранныйПользователем) Тогда
		Возврат СчетВыбранныйПользователем;
	//Иначе
	//	Возврат ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
	//КонецЕсли;
	
КонецФункции

// Функция предназначена для определения названия объекта
// учета по его счету учета. Название объекта выдается в родительном падеже
Функция ПолучитьНазваниеОбъекта(СчетУчета) Экспорт

	//Если СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы) Тогда
	//	
	//	Если СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков) Тогда
	//		
	//		Возврат "земельных участков";
	//		
	//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования) Тогда
	//		
	//		Возврат "объектов природопользования";
	//		
	//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
	//		
	//		Возврат "объектов строительства";
	//		
	//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств) Тогда
	//		
	//		Возврат "оборудования";
	//		
	//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов) Тогда
	//		
	//		Возврат "нематериальных активов";
	//		
	//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР) Тогда
	//		
	//		Возврат "НИОКР";
	//		
	//	Иначе
	//		
	//		Возврат "внеоборотных активов";
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Материалы) Тогда
	//	
	//	Если СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности) Тогда
	//		
	//		Возврат "инвентаря";
	//		
	//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации) Тогда
	//		
	//		Возврат "спецодежды";
	//		
	//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации) Тогда
	//		
	//		Возврат "спецоснастки";
	//		
	//	Иначе
	//		
	//		Возврат "материалов";
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке) Тогда
	//	
	//	Возврат "оборудования";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) Тогда
	//	
	//	Возврат "продукции для давальца";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Полуфабрикаты) Тогда
	//	
	//	Возврат "полуфабрикатов";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Товары) Тогда
	//	
	//	Возврат "товаров";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТорговаяНаценка) Тогда
	//	
	//	Возврат "торговой наценки";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукция) Тогда
	//	
	//	Возврат "продукции";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыОтгруженные) Тогда
	//	
	//	Возврат "отгруженных товаров";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства) Тогда
	//	
	//	Возврат "арендованных основных средств";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение) Тогда
	//	
	//	Возврат "товаров (ответственное хранение)";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку_) Тогда
	//	
	//	Возврат "материалов в переработку";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию) Тогда
	//	
	//	Возврат "товаров комитента";
	//	
	//ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОборудованиеПринятоеДляМонтажа) Тогда
	//	
	//	Возврат "оборудования для монтажа";
	//	
	//Иначе
		
		Возврат "запасов";
		
	//КонецЕсли;

КонецФункции

//+++АК VERT 2018.03.06 ИП-00017500.01
// Получение соответствия счетов финансового регистра счетам бух учета
// Возвращаемое значение:
//   Соответствие   - Ключ - счет фин, результат массив счетов бух
Функция СоответствиеСчетовФинБух(СчетФин = Неопределено) Экспорт //+++АК Susk (Суслин К.В.) ИП-00019275 2018.07.24 добавил счет фин в параметры																 																  
	Перем Соответствие;
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеФинИБухПлановСчетов.ФинСчет КАК СчетФин,
		|	СоответствиеФинИБухПлановСчетов.БухСчет КАК Счетбух,
		|	СоответствиеФинИБухПлановСчетов.СоответствиеСубконто
		|ИЗ
		|	РегистрСведений.СоответствиеФинИБухПлановСчетов КАК СоответствиеФинИБухПлановСчетов
		//+++АК Susk (Суслин К.В.) ИП-00019275 2018.07.24 
		|ГДЕ &УсловиеСчет
		//---АК Susk (Суслин К.В.)  
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФинСчет,
		|	БухСчет";
		
	//+++АК Susk (Суслин К.В.) ИП-00019275 2018.07.24  	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСчет", ?(ЗначениеЗаполнено(СчетФин), "СоответствиеФинИБухПлановСчетов.ФинСчет = &СчетФин", "Истина"));
	Запрос.УстановитьПараметр("СчетФин", СчетФин);
	//---АК Susk (Суслин К.В.) 
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.СледующийПоЗначениюПоля("СчетФин") Цикл		
		МассивСчетов = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.СледующийПоЗначениюПоля("Счетбух") Цикл 
			СоответствиеСубконто = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СоответствиеСубконто), ЗначениеИзСтрокиВнутр(ВыборкаДетальныеЗаписи.СоответствиеСубконто), Неопределено) ;
			
			МассивСчетов.Добавить(Новый Структура("Счетбух, СоответствиеСубконто", 
						ВыборкаДетальныеЗаписи.Счетбух, 
						СоответствиеСубконто));
		КонецЦикла;                                                 
		Соответствие[ВыборкаДетальныеЗаписи.СчетФин] = МассивСчетов;
	КонецЦикла;
	
	Возврат Соответствие;

КонецФункции // СоответствиеСчетовФинБух()

//+++АК VERT 2018.03.06 ИП-00017500.01
// Получение соответствия счетов финансового регистра счетам бух учета
// Возвращаемое значение:
//   Соответствие   - Ключ - счет фин, результат массив счетов бух
Функция СоответствиеСчетовБухФин() Экспорт	 	
	Перем Соответствие;
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеФинИБухПлановСчетов.ФинСчет КАК СчетФин,
		|	СоответствиеФинИБухПлановСчетов.БухСчет КАК СчетБух,
		|	СоответствиеФинИБухПлановСчетов.СоответствиеСубконто
		|ИЗ
		|	РегистрСведений.СоответствиеФинИБухПлановСчетов КАК СоответствиеФинИБухПлановСчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	БухСчет,
		|	ФинСчет";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.СледующийПоЗначениюПоля("СчетБух") Цикл		
		МассивСчетов = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.СледующийПоЗначениюПоля("СчетФин") Цикл 
			СоответствиеСубконто = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СоответствиеСубконто), ЗначениеИзСтрокиВнутр(ВыборкаДетальныеЗаписи.СоответствиеСубконто), Неопределено) ;
			
			МассивСчетов.Добавить(Новый Структура("СчетФин, СоответствиеСубконто", 
						ВыборкаДетальныеЗаписи.СчетФин, 
						СоответствиеСубконто));
		КонецЦикла;
		Соответствие[ВыборкаДетальныеЗаписи.Счетбух] = МассивСчетов;
	КонецЦикла;
	
	Возврат Соответствие;

КонецФункции // СоответствиеСчетовФинБух()

//+++АК VERT 2018.03.06 ИП-00017500.01
Функция СчетФинПоКоду(КодСчета) Экспорт 
	Возврат ПланыСчетов.Финансовый.НайтиПоКоду(СокрЛП(КодСчета));
КонецФункции

//+++АК VERT 2018.03.06 ИП-00017500.01
Функция СчетбухПоКоду(КодСчета) Экспорт 
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду(СокрЛП(КодСчета));
КонецФункции

