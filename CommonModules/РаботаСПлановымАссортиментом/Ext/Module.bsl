#область Работа_JSON

Функция ПрочитатьJSONИзСтроки(ТекстJSON) Экспорт
	если ПустаяСтрока(ТекстJSON) или ТипЗнч(ТекстJSON) <> тип("Строка") тогда
		Возврат новый Структура;
	КонецЕсли;
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	Данные = ПрочитатьJSON(Чтение, Ложь);
	Возврат Данные;
КонецФункции


Функция ЗаписатьJSONВСтроку(Структура) Экспорт 
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Возврат Запись.Закрыть();
КонецФункции

#КонецОбласти

#область Работа_JSON

Процедура ЗаписьВЛог(УРЛ = "", Шаблон = "", Метод = "", JSON = "") Экспорт
	
	МЗ = РегистрыСведений.ЛогПлановогоАссортимента.СоздатьМенеджерЗаписи();
	МЗ.ДатаМс = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МЗ.УРЛ = УРЛ;
	МЗ.Шаблон = Шаблон;
	МЗ.Метод = Метод;
	МЗ.JSON = JSON;
	МЗ.ДатаВремя = ТекущаяДата();
	МЗ.Записать(Истина);
	
КонецПроцедуры

Функция ФорматироватьJSON(JSON) Экспорт;
	
	Попытка
		СтруктураJSON = ПрочитатьJSONИзСтроки(JSON);
		Возврат ЗаписатьJSONВСтроку(СтруктураJSON);	
	Исключение
		Возврат "";
	КонецПопытки;
		
КонецФункции

#КонецОбласти
	
#область Идеи

Функция ПолучитьИдеи(КодМенеджера = Неопределено, НомерИдеи = Неопределено) Экспорт
	
	МассивОшибок = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыйАссортимент.Ссылка,
	|	ПлановыйАссортимент.Код КАК id,
	|	ПлановыйАссортимент.Наименование КАК name,
	|	ЕСТЬNULL(ПлановыйАссортимент.Родитель.Код, """") КАК category_id,
	|	ВЫРАЗИТЬ(ПлановыйАссортимент.ОписаниеИдеи КАК СТРОКА(1024)) КАК description,
	|	ПлановыйАссортимент.ПлановаяДатаЗапуска КАК launch_at,
	|	"""" КАК ingredients,
	|	ПлановыйАссортимент.ВыручкаВДеньНаМагазин КАК sales_plan,
	|	ПлановыйАссортимент.Розница КАК retail_price,
	|	ЕСТЬNULL(ПлановыйАссортимент.ПродактМенеджер.Код, """") КАК manager_id,
	|	ЕСТЬNULL(ПлановыйАссортимент.Автор.ФизЛицо.Код, """") КАК author_id,
	|	ВЫРАЗИТЬ(ПлановыйАссортимент.Переписка КАК СТРОКА(1024)) КАК comments,
	|	ПлановыйАссортимент.ВыручкаНаСетьМагазинов КАК revenue_plan
	|ПОМЕСТИТЬ Идеи
	|ИЗ
	|	Справочник.ПлановыйАссортимент КАК ПлановыйАссортимент
	|ГДЕ
	|	ПлановыйАссортимент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПлановогоАссортимента.Идея)
	|	И &УсловиеМенеджер
	|	И НЕ ПлановыйАссортимент.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииОбъектов.Объект,
	|	МИНИМУМ(ВерсииОбъектов.ДатаВерсии) КАК Создан,
	|	МАКСИМУМ(ВерсииОбъектов.ДатаВерсии) КАК Изменен
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				Идеи.Ссылка
	|			ИЗ
	|				Идеи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Идеи.id КАК id,
	|	Идеи.name КАК name,
	|	Идеи.category_id КАК category_id,
	|	Идеи.description КАК description,
	|	Идеи.launch_at КАК launch_at,
	|	Идеи.ingredients КАК ingredients,
	|	Идеи.sales_plan КАК sales_plan,
	|	Идеи.retail_price КАК retail_price,
	|	Идеи.manager_id КАК manager_id,
	|	Идеи.author_id КАК author_id,
	|	ЕСТЬNULL(Версии.Создан, ДАТАВРЕМЯ(1, 1, 1)) КАК created_at,
	|	ЕСТЬNULL(Версии.Изменен, ДАТАВРЕМЯ(1, 1, 1)) КАК updated_at,
	|	ПлановыйАссортиментГруппыТехнологов.ГруппаТехнологов.Код КАК workgroup_id,
	|	Идеи.comments КАК comments,
	|	Идеи.revenue_plan КАК revenue_plan
	|ИЗ
	|	Идеи КАК Идеи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Идеи.Ссылка = Версии.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПлановыйАссортимент.ГруппыТехнологов КАК ПлановыйАссортиментГруппыТехнологов
	|		ПО Идеи.Ссылка = ПлановыйАссортиментГруппыТехнологов.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(name),
	|	МАКСИМУМ(category_id),
	|	МАКСИМУМ(description),
	|	МАКСИМУМ(launch_at),
	|	МАКСИМУМ(ingredients),
	|	МАКСИМУМ(sales_plan),
	|	МАКСИМУМ(retail_price),
	|	МАКСИМУМ(manager_id),
	|	МАКСИМУМ(author_id),
	|	МАКСИМУМ(created_at),
	|	МАКСИМУМ(updated_at),
	|	МАКСИМУМ(comments),
	|	МАКСИМУМ(revenue_plan)
	|ПО
	|	id");
	Если ЗначениеЗаполнено(КодМенеджера) ТОгда
		ПродактМенеджер = Справочники.ФизическиеЛица.НайтиПоКоду(КодМенеджера);
		Если ЗначениеЗаполнено(ПродактМенеджер) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеМенеджер", "ПлановыйАссортимент.ПродактМенеджер = &ПродактМенеджер");
		Иначе
			МассивОшибок.Добавить("Менеджер не найден");
			Результат = Новый Структура("error", МассивОшибок);
			Возврат ЗаписатьJSONВСтроку(Результат);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НомерИдеи) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеМенеджер", "ПлановыйАссортимент.Код = &Код");
		Запрос.УстановитьПараметр("Код", НомерИдеи);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеМенеджер", "Истина");
	КонецЕсли;
	
	РЗ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		ГруппыТехнологов = Новый Массив;
		ВыборкаГрТ = РЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГрТ.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаГрТ.workgroup_id) Тогда
				ГруппыТехнологов.Добавить(ВыборкаГрТ.workgroup_id);
			КонецЕсли;
		КонецЦикла;
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПлановыйАссортиментФайлы.WebID,
		|	ПлановыйАссортиментФайлы.ИмяФайла
		|ИЗ
		|	Справочник.ПлановыйАссортимент.Файлы КАК ПлановыйАссортиментФайлы
		|ГДЕ
		|	ПлановыйАссортиментФайлы.Ссылка.Код = &Код");
		Запрос.УстановитьПараметр("Код", РЗ.id);
		РЗ1 = Запрос.Выполнить().Выбрать();
		Картинки = Новый Массив;
		Пока РЗ1.Следующий() Цикл
			Картинки.Добавить(Новый Структура("url, filename, signed_id", "", РЗ1.ИмяФайла, РЗ1.WebID));
		КонецЦикла;
		СтруктураСтрокиЗапроса = Новый Структура("id, name, category_id, workgroup_ids, launch_at, description, ingredients, sales_plan, retail_price, revenue_plan, manager_id, author_id, created_at, updated_at, comments, images",
			РЗ.id, РЗ.name, РЗ.category_id,
			ГруппыТехнологов,
			РЗ.launch_at, РЗ.description, РЗ.ingredients, РЗ.sales_plan,
			РЗ.retail_price, РЗ.revenue_plan, РЗ.manager_id, РЗ.author_id, РЗ.created_at, РЗ.updated_at, РЗ.comments, Картинки
		);
		Если ЗначениеЗаполнено(НомерИдеи) ТОгда
			Результат = СтруктураСтрокиЗапроса;
			Прервать;
		Иначе
			Результат.Добавить(СтруктураСтрокиЗапроса);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ЗаписатьJSONВСтроку(Результат);
		
КонецФункции


Функция СоздатьИдею(Данные) Экспорт
	
	МассивОшибок = Новый Массив;
	
	// ОБЯЗАТЕЛЬНЫЕ ПОЛЯ
	
	Наименование = Неопределено;
	Если НЕ Данные.Свойство("name", Наименование) Тогда
		МассивОшибок.Добавить("Не указан name");
	Иначе
		СуществующаяИдея = Справочники.ПлановыйАссортимент.НайтиПоНаименованию(Наименование, Истина);
		Если ЗначениеЗаполнено(СуществующаяИдея) Тогда
			МассивОшибок.Добавить("Такая идея уже существует");	
		КонецЕсли;		
	КонецЕсли;
	
	НомерКатегории = Неопределено;
	Если НЕ Данные.Свойство("category_id", НомерКатегории) Тогда
		МассивОшибок.Добавить("Не указан category_id");
	Иначе
		Категория = Справочники.ПлановыйАссортимент.НайтиПоКоду(НомерКатегории);
		Если Не ЗначениеЗаполнено(Категория) ИЛИ НЕ Категория.ЭтоГруппа Тогда
			МассивОшибок.Добавить("Такой категории нет");	
		КонецЕсли;
	КонецЕсли;	
	
	КодАвтора = Неопределено;
	Если НЕ Данные.Свойство("author_id", КодАвтора) Тогда
		МассивОшибок.Добавить("Не указан author_id");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизЛицо.Код = &КодАвтора
		|	И НЕ Пользователи.ПометкаУдаления");
		Запрос.УстановитьПараметр("КодАвтора", КодАвтора);
		РЗ = Запрос.Выполнить().Выбрать();
		Если РЗ.Следующий() Тогда
			Автор = РЗ.Ссылка;
		Иначе
			МассивОшибок.Добавить("Автор по коду не найден");	
		КонецЕсли;	
	КонецЕсли;
		
	// НЕОБЯЗАТЕЛЬНЫЕ ПОЛЯ 
	
	ОписаниеИдеи = Неопределено;
	Если НЕ Данные.Свойство("description", ОписаниеИдеи) Тогда
		ОписаниеИдеи = "";	
	КонецЕсли;
	
	Ингредиенты = Неопределено;
	Если НЕ Данные.Свойство("ingredients", Ингредиенты) Тогда
		Ингредиенты = "";	
	КонецЕсли;	
	
	Розница = Неопределено;
	Если НЕ Данные.Свойство("retail_price", Розница) Тогда
		Розница = 0;
	КонецЕсли;		
	
	Закупка = Неопределено;
	Если НЕ Данные.Свойство("purchase_price", Закупка) Тогда
		Закупка = 0;
	КонецЕсли;		
		
	ВыручкаВДеньНаМагазин = Неопределено;
	Если НЕ Данные.Свойство("sales_plan", ВыручкаВДеньНаМагазин) Тогда
		ВыручкаВДеньНаМагазин = 0;	
	КонецЕсли;	
	
	Переписка = Неопределено;
	Если НЕ Данные.Свойство("comments", Переписка) Тогда
		Переписка = "";	
	КонецЕсли;		
	
	ПлановаяДатаЗапускаСтрока = Неопределено;
	Если НЕ Данные.Свойство("launch_at", ПлановаяДатаЗапускаСтрока) Тогда
		ПлановаяДатаЗапуска = Дата(1,1,1);
	Иначе
		ПлановаяДатаЗапуска = ПолучитьДату(ПлановаяДатаЗапускаСтрока);
		Если НЕ ЗначениеЗаполнено(ПлановаяДатаЗапуска) Тогда
			МассивОшибок.Добавить("Неправильный формат launch_at");
		КонецЕсли;		
	КонецЕсли;	
	
	КодМенеджера = Неопределено; 
	Если НЕ Данные.Свойство("manager_id", КодМенеджера) Тогда
		ПродактМенеджер = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		ПродактМенеджер = Справочники.ФизическиеЛица.НайтиПоКоду(КодМенеджера);
		Если Не ЗначениеЗаполнено(ПродактМенеджер) ИЛИ ПродактМенеджер.ЭтоГруппа Тогда
			ПродактМенеджер = Справочники.ФизическиеЛица.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;	
	
	РабочиеГруппы = Неопределено;
	ГруппыТехнологов = Новый Массив;
	Если Данные.Свойство("workgroup_ids", РабочиеГруппы) Тогда
		Если ТипЗнч(РабочиеГруппы) = Тип("Массив") Тогда
			Для Каждого Стр ИЗ РабочиеГруппы Цикл
				РабочаяГруппа = Справочники.ГруппыТехнологов.НайтиПоКоду(Стр);
				Если ЗначениеЗаполнено(РабочаяГруппа) Тогда
					ГруппыТехнологов.Добавить(РабочаяГруппа);
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивОшибок.Добавить("workgroup_ids не массив");
		КонецЕсли;
	КонецЕсли;		
	
	МассивКартинок = Неопределено;
	Если НЕ Данные.Свойство("images", МассивКартинок) Тогда
		МассивКартинок = Новый Массив;
	ИначеЕсли НЕ ТипЗнч(МассивКартинок) = Тип("Массив") Тогда
		МассивОшибок.Добавить("images - не массив");			
	КонецЕсли;		
	
	// если ошибки - ничего не создаем, возвращаем ошибки	
	Если ЗначениеЗаполнено(МассивОшибок) Тогда
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецЕсли;
	
	// создание новой идеи
	НоваяИдея							= Справочники.ПлановыйАссортимент.СоздатьЭлемент();
	НоваяИдея.Наименование				= Наименование;
	НоваяИдея.Родитель					= Категория;
	НоваяИдея.Статус					= Перечисления.СтатусыПлановогоАссортимента.Идея;
	НоваяИдея.ОписаниеИдеи				= ОписаниеИдеи;
	НоваяИдея.ПлановаяДатаЗапуска		= ПлановаяДатаЗапуска;
	НоваяИдея.Закупка					= Закупка;
	НоваяИдея.ВыручкаВДеньНаМагазин		= ВыручкаВДеньНаМагазин;
	НоваяИдея.Розница					= Розница;
	НоваяИдея.Переписка					= Переписка;
	НоваяИдея.ПродактМенеджер			= ПродактМенеджер;
	НоваяИдея.Автор						= Автор;
	НоваяИдея.Состав					= Ингредиенты;
	Для каждого ГТ Из ГруппыТехнологов Цикл
		НоваяСтрока = НоваяИдея.ГруппыТехнологов.Добавить();
		НоваяСтрока.ГруппаТехнологов = ГТ;	
	КонецЦикла; 
	
	//расчетные
	Если ЗначениеЗаполнено(ВыручкаВДеньНаМагазин) и ЗначениеЗаполнено(Розница) Тогда
		НоваяИдея.ПродажиНаМагазинВДеньШтук = ВыручкаВДеньНаМагазин/Розница;
		НоваяИдея.ПродажиНаМагазинВМесяцШтук = НоваяИдея.ПродажиНаМагазинВДеньШтук*30;
		КоличествоПодразделений = КоличествоПодразделений();
		НоваяИдея.ПродажиНаСетьМагазиновШтук = НоваяИдея.ПродажиНаМагазинВДеньШтук*КоличествоПодразделений;
		НоваяИдея.ВыручкаВМесяцНаМагазин = ВыручкаВДеньНаМагазин*30;
		НоваяИдея.ВыручкаНаСетьМагазинов = НоваяИдея.ВыручкаВМесяцНаМагазин*КоличествоПодразделений;
	КонецЕсли;
	
	Попытка
		НоваяИдея.Записать();
	Исключение
		МассивОшибок.Добавить(ОписаниеОшибки());
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецПопытки;
	
	Если МассивКартинок.Количество() > 0 Тогда
		Каталог = "Плановый ассортимент\" + НоваяИдея.Ссылка.УникальныйИдентификатор() + "\";
		Для каждого Стр Из МассивКартинок Цикл	
			Если НЕ НоваяИдея.Файлы.Найти(Стр.signed_id, "WebID") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОтносительноеИмяФайла = Каталог + Стр.filename;
			СоздатьКаталог(ПолучитьКаталог() + Каталог);
			УРЛ = СтрЗаменить(Стр.url, "http://degustation.vkusvill.ru/", "");
			Если СохранитьФайл(УРЛ, ОтносительноеИмяФайла) Тогда
				НоваяСтрока							= НоваяИдея.Файлы.Добавить();
				НоваяСтрока.WebID					= Стр.signed_id;
				НоваяСтрока.ИмяФайла				= Стр.filename;
				НоваяСтрока.ИдентификаторФотографии	= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ОтносительноеИмяФайла	= ОтносительноеИмяФайла;				
			КонецЕсли;
		КонецЦикла;
		Попытка
			НоваяИдея.Записать();
		Исключение
			МассивОшибок.Добавить(ОписаниеОшибки());
			Результат = Новый Структура("error", МассивОшибок);
			Возврат ЗаписатьJSONВСтроку(Результат);			
		КонецПопытки;		
	КонецЕсли;	
		
	Возврат ПолучитьИдеи(,НоваяИдея.Код);
		
КонецФункции


Функция ИзменитьИдею(НомерИдеи, Данные) Экспорт
	
	МассивОшибок = Новый Массив;
	
	Идея = Неопределено;
	Если ЗначениеЗаполнено(НомерИдеи) ТОгда
		Идея = Справочники.ПлановыйАссортимент.НайтиПоКоду(НомерИдеи);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идея) Тогда
		МассивОшибок.Добавить("Идея не найдена");
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);	
	ИначеЕсли Идея.ЭтоГруппа ТОгда
		МассивОшибок.Добавить("Это категория");
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);	
	КонецЕсли;
	
	ИО = Идея.ПолучитьОбъект();
	
	НомерКатегории = Неопределено;
	Если Данные.Свойство("category_id", НомерКатегории) Тогда
		Категория = Справочники.ПлановыйАссортимент.НайтиПоКоду(НомерКатегории);
		Если ЗначениеЗаполнено(Категория) И Категория.ЭтоГруппа Тогда
			ИО.Родитель = Категория;	
		КонецЕсли;
	КонецЕсли;	
	
	Наименование = Неопределено;
	Если Данные.Свойство("name", Наименование) Тогда
		ИО.Наименование = Наименование;		
	КонецЕсли;		
	
	ОписаниеИдеи = Неопределено;
	Если Данные.Свойство("description", ОписаниеИдеи) Тогда
		ИО.ОписаниеИдеи = ОписаниеИдеи;		
	КонецЕсли;	
	
	Ингредиенты = Неопределено;
	Если Данные.Свойство("ingredients", Ингредиенты) Тогда
		ИО.Состав = Ингредиенты;		
	КонецЕсли;	
	
	Розница = Неопределено;
	Если Данные.Свойство("retail_price", Розница) Тогда
		ИО.Розница = Розница;		
	КонецЕсли;			
	
	Закупка = Неопределено;
	Если Данные.Свойство("purchase_price", Закупка) Тогда
		ИО.Закупка = Закупка;	
	КонецЕсли;	
	
	ВыручкаВДеньНаМагазин = Неопределено;
	Если Данные.Свойство("sales_plan", ВыручкаВДеньНаМагазин) Тогда
		ИО.ВыручкаВДеньНаМагазин = ВыручкаВДеньНаМагазин;	
	КонецЕсли;	
	
	Переписка = Неопределено;
	Если Данные.Свойство("comments", Переписка) Тогда
		ИО.Переписка = Переписка;	
	КонецЕсли;		
	
	РабочиеГруппы = Неопределено;
	ГруппыТехнологов = Новый Массив;
	Если Данные.Свойство("workgroup_ids", РабочиеГруппы) Тогда
		Если ТипЗнч(РабочиеГруппы) = Тип("Массив") Тогда
			ИО.ГруппыТехнологов.Очистить();
			Для Каждого Стр ИЗ РабочиеГруппы Цикл
				РабочаяГруппа = Справочники.ГруппыТехнологов.НайтиПоКоду(Стр);
				Если ЗначениеЗаполнено(РабочаяГруппа) Тогда
					НоваяСтрока = ИО.ГруппыТехнологов.Добавить();
					НоваяСтрока.ГруппаТехнологов = РабочаяГруппа;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивОшибок.Добавить("workgroup_ids не массив");
		КонецЕсли;
	КонецЕсли;	
	
	МассивКартинок = Неопределено;
	Если НЕ Данные.Свойство("images", МассивКартинок) Тогда
		МассивОшибок.Добавить("Не указан images");
	ИначеЕсли НЕ ТипЗнч(МассивКартинок) = Тип("Массив") Тогда
		МассивОшибок.Добавить("images - не массив");			
	КонецЕсли;		
	
	//расчетные
	Если ЗначениеЗаполнено(ВыручкаВДеньНаМагазин) и ЗначениеЗаполнено(Розница) Тогда
		ИО.ПродажиНаМагазинВДеньШтук = ВыручкаВДеньНаМагазин/Розница;
		ИО.ПродажиНаМагазинВМесяцШтук = ИО.ПродажиНаМагазинВДеньШтук*30;
		КоличествоПодразделений = КоличествоПодразделений();
		ИО.ПродажиНаСетьМагазиновШтук = ИО.ПродажиНаМагазинВДеньШтук*КоличествоПодразделений;
		ИО.ВыручкаНаСетьМагазинов = ВыручкаВДеньНаМагазин*КоличествоПодразделений;
		ИО.ВыручкаВМесяцНаМагазин = ВыручкаВДеньНаМагазин*30;
	КонецЕсли;	
	
	Если МассивКартинок.Количество() > 0 Тогда
		Каталог = "Плановый ассортимент\" + ИО.Ссылка.УникальныйИдентификатор() + "\";
		Для каждого Стр Из МассивКартинок Цикл	
			Если НЕ ИО.Файлы.Найти(Стр.signed_id, "WebID") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОтносительноеИмяФайла = Каталог + Стр.filename;
			СоздатьКаталог(ПолучитьКаталог() + Каталог);
			Если СохранитьФайл(Стр.url, ОтносительноеИмяФайла) Тогда
				НоваяСтрока							= ИО.Файлы.Добавить();
				НоваяСтрока.WebID					= Стр.signed_id;
				НоваяСтрока.ИмяФайла				= Стр.filename;
				НоваяСтрока.ИдентификаторФотографии	= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ОтносительноеИмяФайла	= ОтносительноеИмяФайла;				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;			
	
	Если НЕ ЗначениеЗаполнено(МассивОшибок) И ИО.Модифицированность() Тогда
		ИО.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивОшибок) Тогда
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецЕсли;	
		
	Возврат ПолучитьИдеи(,НомерИдеи);
	
КонецФункции


Функция УдалитьИдею(НомерИдеи) Экспорт
	
	МассивОшибок = Новый Массив;
	
	Идея = Неопределено;
	Если ЗначениеЗаполнено(НомерИдеи) ТОгда
		Идея = Справочники.ПлановыйАссортимент.НайтиПоКоду(НомерИдеи);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идея) Тогда
		МассивОшибок.Добавить("Идея не найдена");
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);	
	ИначеЕсли Идея.ЭтоГруппа ТОгда
		МассивОшибок.Добавить("Это категория");
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);	
	КонецЕсли;
	
	ИдеяОбъект = Идея.ПолучитьОбъект();
	ИдеяОбъект.УстановитьПометкуУдаления(Истина);
	Возврат Неопределено;	
	
КонецФункции

#КонецОбласти

#область Образцы

Функция ПолучитьОбразцы(НомерИдеи = Неопределено, НомерОбразца = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыйАссортиментДегустация.УИН_Строки КАК id,
	|	ПлановыйАссортиментДегустация.Наименование КАК name,
	|	ПлановыйАссортиментДегустация.Ссылка.Код КАК idea_id,
	|	ПлановыйАссортиментДегустация.Описание КАК comment,
	|	ПлановыйАссортиментДегустация.Состав КАК ingredients,
	|	ЕСТЬNULL(ПлановыйАссортиментДегустация.Поставщик.Наименование, """") КАК supplier_name,
	|	ЕСТЬNULL(ПлановыйАссортиментДегустация.Поставщик.Код, """") КАК supplier_id,
	|	ПлановыйАссортиментДегустация.Дата КАК created_at,
	|	ПлановыйАссортиментДегустация.Дата КАК updated_at,
	|	ВЫБОР
	|		КОГДА ПлановыйАссортиментДегустация.Подходит
	|			ТОГДА ""yes""
	|		ИНАЧЕ ""no""
	|	КОНЕЦ КАК vote,
	|	ПлановыйАссортиментФайлыДегустации.ИмяФайла,
	|	ПлановыйАссортиментФайлыДегустации.WebID
	|ИЗ
	|	Справочник.ПлановыйАссортимент.Дегустация КАК ПлановыйАссортиментДегустация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПлановыйАссортимент.ФайлыДегустации КАК ПлановыйАссортиментФайлыДегустации
	|		ПО ПлановыйАссортиментДегустация.Ссылка = ПлановыйАссортиментФайлыДегустации.Ссылка
	|			И ПлановыйАссортиментДегустация.УИН_Строки = ПлановыйАссортиментФайлыДегустации.УИН_Строки
	|ГДЕ
	|	&УсловиеИдеи
	|	И НЕ ПлановыйАссортиментДегустация.Ссылка.ПометкаУдаления
	|	И &УсловиеОбразца
	|ИТОГИ
	|	МАКСИМУМ(name),
	|	МАКСИМУМ(idea_id),
	|	МАКСИМУМ(comment),
	|	МАКСИМУМ(ingredients),
	|	МАКСИМУМ(supplier_name),
	|	МАКСИМУМ(supplier_id),
	|	МАКСИМУМ(created_at),
	|	МАКСИМУМ(updated_at),
	|	МАКСИМУМ(vote)
	|ПО
	|	id");
	
		
	Если ЗначениеЗаполнено(НомерИдеи) ТОгда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИдеи", "ПлановыйАссортиментДегустация.Ссылка.Код = &Код");
		Запрос.УстановитьПараметр("Код", НомерИдеи);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИдеи", "Истина");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НомерОбразца) ТОгда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОбразца", "ПлановыйАссортиментДегустация.УИН_Строки = &НомерСтроки");
		Запрос.УстановитьПараметр("НомерСтроки", НомерОбразца);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОбразца", "Истина");
	КонецЕсли;
	
	РЗ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		РЗ1 = РЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Картинки = Новый Массив;
		Пока РЗ1.Следующий() Цикл
			Картинки.Добавить(Новый Структура("url, filename, signed_id", "", РЗ1.ИмяФайла, РЗ1.WebID));
		КонецЦикла;
		СтруктураСтрокиЗапроса = Новый Структура("id, name, idea_id, created_at, updated_at, supplier, vote, comment, ingredients, retail_price, sales_plan, revenue_plan, group_id, images",
			РЗ.id, РЗ.name, РЗ.idea_id, РЗ.created_at, РЗ.updated_at, Новый Структура("id, name", РЗ.supplier_id, РЗ.supplier_name), РЗ.vote,
			Новый Структура("content", РЗ.comment), РЗ.ingredients, 0, 0, 0, "", Картинки
		);
		Если ЗначениеЗаполнено(НомерОбразца) ТОгда
			Результат = СтруктураСтрокиЗапроса;
			Прервать;
		Иначе
			Результат.Добавить(СтруктураСтрокиЗапроса);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ЗаписатьJSONВСтроку(Результат);	
	
КонецФункции


Функция СоздатьОбразец(Данные) Экспорт
	
	МассивОшибок = Новый Массив;
	
	// ОБЯЗАТЕЛЬНЫЕ ПОЛЯ	
	
	Наименование = Неопределено;
	Если НЕ Данные.Свойство("name", Наименование) Тогда
		МассивОшибок.Добавить("Не указан name");	
	КонецЕсли;
	
	НомерИдеи = Неопределено;
	Если НЕ Данные.Свойство("idea_id", НомерИдеи) Тогда
		МассивОшибок.Добавить("Не указан idea_id");
	Иначе
		Идея = Справочники.ПлановыйАссортимент.НайтиПоКоду(НомерИдеи);
		Если Не ЗначениеЗаполнено(Идея) ИЛИ Идея.ЭтоГруппа ИЛИ Идея.ПометкаУдаления Тогда
			МассивОшибок.Добавить("Идея не найдена");	
		КонецЕсли;
	КонецЕсли;	
	
	ДатаОбразцаСтрока = Неопределено;
	Если НЕ Данные.Свойство("created_at", ДатаОбразцаСтрока) Тогда
		МассивОшибок.Добавить("Не указан created_at");
	Иначе
		ДатаОбразца = ПолучитьДату(ДатаОбразцаСтрока);
		Если НЕ ЗначениеЗаполнено(ДатаОбразца) Тогда
			МассивОшибок.Добавить("Неправильный формат created_at");
		КонецЕсли;			
	КонецЕсли;	
	
	// НЕОБЯЗАТЕЛЬНЫЕ ПОЛЯ
	
	Голос = Неопределено;
	Подходит = Ложь;
	Если Данные.Свойство("vote", Голос) Тогда
		Подходит = (Голос = "yes");
	КонецЕсли;
	
	Комментарий = Неопределено;
	Если НЕ Данные.Свойство("comment", Комментарий) Тогда
		Комментарий = "";
	КонецЕсли;	
	
	Ингредиенты = Неопределено;
	Если НЕ Данные.Свойство("ingredients", Ингредиенты) Тогда
		Ингредиенты = "";
	КонецЕсли;		
	
	//Розница = Неопределено;
	//Если НЕ Данные.Свойство("retail_price", Розница) Тогда
	//	МассивОшибок.Добавить("Не указан retail_price");	
	//КонецЕсли;	
	
	ЦенаЗакупочная = Неопределено;
	Если НЕ Данные.Свойство("purchase_price", ЦенаЗакупочная) Тогда
		ЦенаЗакупочная = 0;
	КонецЕсли;
	
	Единица = Неопределено;
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	Если НЕ Данные.Свойство("quantity_units", Единица) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	ИначеЕсли Единица = "gramm" Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("1");
	ИначеЕсли Единица = "pieces" Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("796");
	ИначеЕсли Единица = "liter" Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("112");
	ИначеЕсли Единица = "ml" Тогда		
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("111");
	КонецЕсли;
	
	ВесУсловнойЕдиницы = Неопределено;
	Если НЕ Данные.Свойство("unit_weight", ВесУсловнойЕдиницы) Тогда
		ВесУсловнойЕдиницы = 0;
	КонецЕсли;	
	
	Переписка = Неопределено;
	Если НЕ Данные.Свойство("comments", Переписка) Тогда
		Переписка = "";
	КонецЕсли;				
	
	МассивКартинок = Неопределено;
	Если НЕ Данные.Свойство("images", МассивКартинок) Тогда
		МассивКартинок = Новый Массив;
	ИначеЕсли НЕ ТипЗнч(МассивКартинок) = Тип("Массив") Тогда
		МассивОшибок.Добавить("images - не массив");			
	КонецЕсли;				
			
	// если ошибки - ничего не создаем, возвращаем ошибки	
	Если ЗначениеЗаполнено(МассивОшибок) Тогда
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецЕсли;
	
	// создание новой идеи
	ИдеяОбъект						= Идея.ПолучитьОбъект();
	НоваяСтрока						= ИдеяОбъект.Дегустация.Добавить();
	
	НоваяСтрока.Дата				= ДатаОбразца;
	НоваяСтрока.Наименование		= Наименование;
	НоваяСтрока.Описание			= Наименование;
	НоваяСтрока.Состав				= Ингредиенты;	
	НоваяСтрока.Комментарий			= Комментарий;
	НоваяСтрока.Подходит			= Подходит;
	НоваяСтрока.ЦенаЗакупочная		= ЦенаЗакупочная;
	НоваяСтрока.ЕдиницаИзмерения	= ЕдиницаИзмерения;
	НоваяСтрока.ВесУсловнойЕдиницы	= ВесУсловнойЕдиницы;
	НоваяСтрока.Переписка			= Переписка;
	
	УИН_Строки						= ЛЕВ(Строка(Новый УникальныйИдентификатор), 32);
	НоваяСтрока.УИН_Строки			= УИН_Строки;
		
	Попытка
		ИдеяОбъект.Записать();
	Исключение
		МассивОшибок.Добавить(ОписаниеОшибки());
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецПопытки;
	
	Если МассивКартинок.Количество() > 0 Тогда
		Каталог = "Плановый ассортимент\" + ИдеяОбъект.Ссылка.УникальныйИдентификатор() + "\";
		Для каждого Стр Из МассивКартинок Цикл	
			Если НЕ ИдеяОбъект.ФайлыДегустации.Найти(Стр.signed_id, "WebID") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОтносительноеИмяФайла = Каталог + Стр.filename;
			СоздатьКаталог(ПолучитьКаталог() + Каталог);
			Если СохранитьФайл(Стр.url, ОтносительноеИмяФайла) Тогда
				НоваяСтрока							= ИдеяОбъект.ФайлыДегустации.Добавить();
				НоваяСтрока.WebID					= Стр.signed_id;
				НоваяСтрока.УИН_Строки				= УИН_Строки;
				НоваяСтрока.ИмяФайла				= Стр.filename;
				НоваяСтрока.ИдентификаторФотографии	= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ОтносительноеИмяФайла	= ОтносительноеИмяФайла;				
			КонецЕсли;
		КонецЦикла;
		Попытка
			ИдеяОбъект.Записать();
		Исключение
			МассивОшибок.Добавить(ОписаниеОшибки());
			Результат = Новый Структура("error", МассивОшибок);
			Возврат ЗаписатьJSONВСтроку(Результат);			
		КонецПопытки;		
	КонецЕсли;
	
	Возврат ПолучитьОбразцы(,УИН_Строки);
	
КонецФункции


Функция ИзменитьОбразец(НомерОбразца, Данные) Экспорт
	
	МассивОшибок = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыйАссортиментДегустация.НомерСтроки КАК НомерСтроки,
	|	ПлановыйАссортиментДегустация.Ссылка КАК Идея
	|ИЗ
	|	Справочник.ПлановыйАссортимент.Дегустация КАК ПлановыйАссортиментДегустация
	|ГДЕ
	|	ПлановыйАссортиментДегустация.УИН_Строки = &НомерОбразца
	|	И НЕ ПлановыйАссортиментДегустация.Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("НомерОбразца", НомерОбразца);
	РЗ = Запрос.Выполнить().Выбрать();
	Если НЕ РЗ.Следующий() Тогда
		МассивОшибок.Добавить("Идея не найдена");
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);	
	КонецЕсли;
	
	Попытка
		ИО = РЗ.Идея.ПолучитьОбъект;
		Образец = ИО.Дегустация[РЗ.НомерСтроки];
	Исключение
		МассивОшибок.Добавить(ОписаниеОшибки());
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецПопытки;
	
	Наименование = Неопределено;
	Если Данные.Свойство("name", Наименование) Тогда
		Образец.Наименование = Наименование;		
	КонецЕсли;	
		
	Голос = Неопределено;
	Подходит = Ложь;
	Если Данные.Свойство("vote", Голос) Тогда
		Образец.Подходит = (Голос = "yes");
	КонецЕсли;
	
	Комментарий = Неопределено;
	Если Данные.Свойство("comment", Комментарий) Тогда
		Образец.Комментарий = Комментарий;
	КонецЕсли;	
	
	Ингредиенты = Неопределено;
	Если Данные.Свойство("ingredients", Ингредиенты) Тогда
		Образец.Ингредиенты = Ингредиенты;		
	КонецЕсли;	
	
	Розница = Неопределено;
	Если Данные.Свойство("retail_price", Розница) Тогда
		Образец.Розница = Розница;		
	КонецЕсли;	
	
	ЦенаЗакупочная = Неопределено;
	Если Данные.Свойство("purchase_price", ЦенаЗакупочная) Тогда
		Образец.ЦенаЗакупочная = ЦенаЗакупочная;	
	КонецЕсли;
	
	Единица = Неопределено;
	Если Данные.Свойство("quantity_units", Единица) Тогда
		Если Единица = "gramm" Тогда
			Образец.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("1");
		ИначеЕсли Единица = "pieces" Тогда
			Образец.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("796");
		ИначеЕсли Единица = "liter" Тогда
			Образец.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("112");
		ИначеЕсли Единица = "ml" Тогда		
			Образец.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("111");
		КонецЕсли;
	КонецЕсли;
	
	ВесУсловнойЕдиницы = Неопределено;
	Если Данные.Свойство("unit_weight", ВесУсловнойЕдиницы) Тогда
		Образец.ВесУсловнойЕдиницы = ВесУсловнойЕдиницы;	
	КонецЕсли;	
	
	Переписка = Неопределено;
	Если Данные.Свойство("comments", Переписка) Тогда
		Образец.Переписка = Переписка;	
	КонецЕсли;				
	
	МассивКартинок = Неопределено;
	Если НЕ Данные.Свойство("images", МассивКартинок) Тогда
		МассивОшибок.Добавить("Не указан images");
	ИначеЕсли НЕ ТипЗнч(МассивКартинок) = Тип("Массив") Тогда
		МассивОшибок.Добавить("images - не массив");			
	КонецЕсли;	
	
	Если МассивКартинок.Количество() > 0 Тогда
		Каталог = "Плановый ассортимент\" + ИО.Ссылка.УникальныйИдентификатор() + "\";
		Для каждого Стр Из МассивКартинок Цикл	
			Если НЕ ИО.ФайлыДегустации.Найти(Стр.signed_id, "WebID") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОтносительноеИмяФайла = Каталог + Стр.filename;
			СоздатьКаталог(ПолучитьКаталог() + Каталог);
			Если СохранитьФайл(Стр.url, ОтносительноеИмяФайла) Тогда
				НоваяСтрока							= ИО.ФайлыДегустации.Добавить();
				НоваяСтрока.WebID					= Стр.signed_id;
				НоваяСтрока.УИН_Строки				= Образец.УИН_Строки;
				НоваяСтрока.ИмяФайла				= Стр.filename;
				НоваяСтрока.ИдентификаторФотографии	= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ОтносительноеИмяФайла	= ОтносительноеИмяФайла;				
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(МассивОшибок) И ИО.Модифицированность() Тогда
		ИО.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивОшибок) Тогда
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецЕсли;		
		
	Возврат ПолучитьОбразцы(,НомерОбразца);
	
КонецФункции


Функция УдалитьОбразец(НомерОбразца) Экспорт
	
	МассивОшибок = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыйАссортиментДегустация.НомерСтроки КАК НомерСтроки,
	|	ПлановыйАссортиментДегустация.Ссылка КАК Идея
	|ИЗ
	|	Справочник.ПлановыйАссортимент.Дегустация КАК ПлановыйАссортиментДегустация
	|ГДЕ
	|	ПлановыйАссортиментДегустация.УИН_Строки = &НомерОбразца
	|	И НЕ ПлановыйАссортиментДегустация.Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("НомерОбразца", НомерОбразца);
	РЗ = Запрос.Выполнить().Выбрать();
	Если НЕ РЗ.Следующий() Тогда
		МассивОшибок.Добавить("Идея не найдена");
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);	
	КонецЕсли;
	
	Попытка
		ИО = РЗ.Идея.ПолучитьОбъект;
		Образец = ИО.Дегустация[РЗ.НомерСтроки];
		ИО.Дегустация.Удалить(РЗ.НомерСтроки);
		ИО.Записать();
	Исключение
		МассивОшибок.Добавить(ОписаниеОшибки());
		Результат = Новый Структура("error", МассивОшибок);
		Возврат ЗаписатьJSONВСтроку(Результат);			
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#область Справочники

Функция ПолучитьКатегории() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыйАссортимент.Код КАК id,
	|	ПлановыйАссортимент.Наименование КАК name,
	|	ЕСТЬNULL(ПлановыйАссортимент.Родитель.Код, """") КАК parent_id
	|ИЗ
	|	Справочник.ПлановыйАссортимент КАК ПлановыйАссортимент
	|ГДЕ
	|	ПлановыйАссортимент.ЭтоГруппа
	|	И НЕ ПлановыйАссортимент.ПометкаУдаления");
	
	РЗ = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		Результат.Добавить(Новый Структура("id, name, parent_id", РЗ.id, РЗ.name, РЗ.parent_id));
	КонецЦикла;
	
	Возврат ЗаписатьJSONВСтроку(Результат);
		
КонецФункции


Функция ПолучитьСотрудников() Экспорт
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	КонтактнаяИнформация.Объект КАК Сотрудник,
	//|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК email
	//|ПОМЕСТИТЬ Почта
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	//|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РолиПользователейСоставРоли.Сотрудник.Код КАК id,
	//|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК last_name,
	//|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК first_name,
	//|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК patronim,
	//|	"""" КАК role,
	//|	ЕСТЬNULL(Почта.email, """") КАК email
	//|ИЗ
	//|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ТД, ) КАК ФИОФизЛицСрезПоследних
	//|		ПО РолиПользователейСоставРоли.Сотрудник = ФИОФизЛицСрезПоследних.ФизЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Почта КАК Почта
	//|		ПО РолиПользователейСоставРоли.Сотрудник = Почта.Сотрудник
	//|ГДЕ
	//|	(РолиПользователейСоставРоли.Ссылка.Родитель В (&РолиПА)
	//|			ИЛИ РолиПользователейСоставРоли.Ссылка В (&РолиПА))
	//|	И НЕ РолиПользователейСоставРоли.Сотрудник.ПометкаУдаления
	//|	И НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РолиПользователейСоставРоли.Сотрудник.Наименование,
	//|	РолиПользователейСоставРоли.Сотрудник.Код,
	//|	ФИОФизЛицСрезПоследних.Фамилия,
	//|	ФИОФизЛицСрезПоследних.Имя,
	//|	ФИОФизЛицСрезПоследних.Отчество,
	//|	РолиПользователейСоставРоли.Сотрудник,
	//|	ЕСТЬNULL(Почта.email, """")");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Сотрудник,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК email
	|ПОМЕСТИТЬ Почта
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыТехнологовТехнологи.Ссылка,
	|	ГруппыТехнологовТехнологи.Технолог
	|ПОМЕСТИТЬ Роли
	|ИЗ
	|	Справочник.ГруппыТехнологов.Технологи КАК ГруппыТехнологовТехнологи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Роли.Ссылка,
	|	Роли.Технолог,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	|ПОМЕСТИТЬ БрендМенеджеры
	|ИЗ
	|	Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТД, ) КАК СоответствиеОбъектРольСрезПоследних
	|			ПО РолиПользователейТипыРолей.Ссылка = СоответствиеОбъектРольСрезПоследних.Объект
	|		ПО Роли.Технолог = РолиПользователейТипыРолей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Роли.Ссылка,
	|	Роли.Технолог,
	|	РолиПользователей.Ссылка КАК Помощник
	|ПОМЕСТИТЬ Помощники
	|ИЗ
	|	Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
	|		ПО Роли.Технолог = РолиПользователей.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Роли.Ссылка,
	|	Роли.Технолог,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	""2tech"" КАК Роль
	|ПОМЕСТИТЬ Состав
	|ИЗ
	|	Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО Роли.Технолог = РолиПользователейСоставРоли.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БрендМенеджеры.Ссылка,
	|	БрендМенеджеры.Технолог,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	""3manager""
	|ИЗ
	|	БрендМенеджеры КАК БрендМенеджеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО БрендМенеджеры.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Помощники.Ссылка,
	|	Помощники.Технолог,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	""1tech_assistant""
	|ИЗ
	|	Помощники КАК Помощники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО Помощники.Помощник = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состав.Сотрудник.Код КАК id_sotr,
	|	МАКСИМУМ(ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """")) КАК last_name,
	|	МАКСИМУМ(ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """")) КАК first_name,
	|	МАКСИМУМ(ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """")) КАК patronymic,
	|	МАКСИМУМ(ЕСТЬNULL(Почта.email, """")) КАК email,
	|	МАКСИМУМ(Состав.Роль) КАК role
	|ИЗ
	|	Состав КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ТД, ) КАК ФИОФизЛицСрезПоследних
	|		ПО Состав.Сотрудник = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Почта КАК Почта
	|		ПО Состав.Сотрудник = Почта.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	Состав.Сотрудник.Код");
	
	//МассивРолей = Новый Массив;
	//МассивРолей.Добавить(Справочники.РолиПользователей.НайтиПоНаименованию("Бренд-Менеджер", Истина));
	//МассивРолей.Добавить(Справочники.РолиПользователей.НайтиПоНаименованию("Плановый ассортимент", Истина));
	//Запрос.УстановитьПараметр("РолиПА", МассивРолей);
	Запрос.УстановитьПараметр("ТД", ТекущаяДата());
	
	РЗ = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока РЗ.Следующий() Цикл
		Роль = Сред(РЗ.role, 2);
		Результат.Добавить(Новый Структура("id, first_name, last_name, patronymic, role, email", РЗ.id_sotr, РЗ.first_name, РЗ.last_name, РЗ.patronymic, Роль, РЗ.email));
	КонецЦикла;
	
	Возврат ЗаписатьJSONВСтроку(Результат);	
	
КонецФункции


Функция ПолучитьРабочиеГруппы() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Сотрудник,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК email
	|ПОМЕСТИТЬ Почта
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыТехнологовТехнологи.Ссылка,
	|	ГруппыТехнологовТехнологи.Технолог
	|ПОМЕСТИТЬ Роли
	|ИЗ
	|	Справочник.ГруппыТехнологов.Технологи КАК ГруппыТехнологовТехнологи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Роли.Ссылка,
	|	Роли.Технолог,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	|ПОМЕСТИТЬ БрендМенеджеры
	|ИЗ
	|	Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТД, ) КАК СоответствиеОбъектРольСрезПоследних
	|			ПО РолиПользователейТипыРолей.Ссылка = СоответствиеОбъектРольСрезПоследних.Объект
	|		ПО Роли.Технолог = РолиПользователейТипыРолей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Роли.Ссылка,
	|	Роли.Технолог,
	|	РолиПользователей.Ссылка КАК Помощник
	|ПОМЕСТИТЬ Помощники
	|ИЗ
	|	Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
	|		ПО Роли.Технолог = РолиПользователей.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Роли.Ссылка,
	|	Роли.Технолог,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	""2tech"" КАК Роль
	|ПОМЕСТИТЬ Состав
	|ИЗ
	|	Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО Роли.Технолог = РолиПользователейСоставРоли.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БрендМенеджеры.Ссылка,
	|	БрендМенеджеры.Технолог,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	""3manager""
	|ИЗ
	|	БрендМенеджеры КАК БрендМенеджеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО БрендМенеджеры.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Помощники.Ссылка,
	|	Помощники.Технолог,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	""1tech_assistant""
	|ИЗ
	|	Помощники КАК Помощники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО Помощники.Помощник = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состав.Ссылка.Код КАК id,
	|	Состав.Ссылка.Наименование КАК name,
	|	Состав.Сотрудник.Код КАК id_sotr,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК last_name,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК first_name,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК patronymic,
	|	ЕСТЬNULL(Почта.email, """") КАК email,
	|	Состав.Роль КАК role
	|ИЗ
	|	Состав КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ТД, ) КАК ФИОФизЛицСрезПоследних
	|		ПО Состав.Сотрудник = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Почта КАК Почта
	|		ПО Состав.Сотрудник = Почта.Сотрудник
	|ИТОГИ
	|	МАКСИМУМ(name),
	|	МАКСИМУМ(last_name),
	|	МАКСИМУМ(first_name),
	|	МАКСИМУМ(patronymic),
	|	МАКСИМУМ(email),
	|	МАКСИМУМ(role)
	|ПО
	|	id,
	|	id_sotr");
	
	Запрос.УстановитьПараметр("ТД", ТекущаяДата());
	
	ВыборкаПоГруппам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Результат = Новый Массив;
	Пока ВыборкаПоГруппам.Следующий() Цикл
		ВС = ВыборкаПоГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СоставГруппы = Новый Массив;
		Пока ВС.Следующий() Цикл
			Роль = Сред(ВС.role, 2);
			СоставГруппы.Добавить(Новый Структура("id, first_name, last_name, patronymic, role, email", ВС.id_sotr, ВС.first_name, ВС.last_name, ВС.patronymic, Роль, ВС.email));	
		КонецЦикла;
		Результат.Добавить(Новый Структура("id, name, people", ВыборкаПоГруппам.id, ВыборкаПоГруппам.name, СоставГруппы));
	КонецЦикла;
	
	Возврат ЗаписатьJSONВСтроку(Результат);	
	
КонецФункции

#КонецОбласти

#область Функции

Функция Токен() Экспорт
	
	Возврат Константы.ТокенПлановогоАссортимента.Получить();
	
КонецФункции


Функция ПолучитьДату(Знач ДатаОбразцаСтрока)
	
	ДатаОбразцаСтрока = СтрЗаменить(ДатаОбразцаСтрока, ":", "");
	ДатаОбразцаСтрока = СтрЗаменить(ДатаОбразцаСтрока, "-", "");
	ДатаОбразцаСтрока = СтрЗаменить(ДатаОбразцаСтрока, "T", "");
	ДатаОбразцаСтрока = СтрЗаменить(ДатаОбразцаСтрока, " ", "");
	ДатаОбразцаСтрока = ЛЕВ(ДатаОбразцаСтрока, 14);
	
	Попытка
		Возврат Дата(ДатаОбразцаСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;		
	
КонецФункции


Функция КоличествоПодразделений() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Открыт)");
	Рез = Запрос.Выполнить().Выгрузить();
	Возврат Рез.Количество();	
	
КонецФункции


Функция ПолучитьФайлССервера(УРЛ, Имя)
	
	//Путь = КаталогВременныхФайлов() + Имя;
	//Соединение = Новый HTTPСоединение(Сервер);
	//Запрос = Новый HTTPЗапрос(УРЛ);
	//Ответ = Соединение.Получить(Запрос, Путь);
	//
	//Если НЕ Ответ.КодСостояния = 200 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//ФайлНаДиске = Новый Файл(Путь);
	//Если НЕ ФайлНаДиске.Существует() Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Файл = Справочники.Файлы.СоздатьЭлемент();
	//Файл.Расширение = ФайлНаДиске.Расширение;
	//Файл.Наименование = ФайлНаДиске.ИмяБезРасширения;
	//Файл.ИмяПодкаталога = "ПлановыйАссортимент";
	//Файл.Записать();
	//ИмяФайлаДляОбъекта = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка);
	//
	//ПереместитьФайл(Путь, ИмяФайлаДляОбъекта);
	//
	//Возврат Файл;
		
КонецФункции


Функция СохранитьФайл(УРЛ, ОтносительноеИмя, Сервер = "degustation.vkusvill.ru")
	
	КаталогФотографий = ПолучитьКаталог();
	
	ПолноеИмя = КаталогФотографий + ОтносительноеИмя;
	Соединение = Новый HTTPСоединение(Сервер);
	Запрос = Новый HTTPЗапрос(УРЛ);
	Ответ = Соединение.Получить(Запрос, ПолноеИмя);
	Если Ответ.КодСостояния = 302 Тогда
		НовыйУРЛ = Ответ.Заголовки["Location"];
		НовыйУРЛ = СтрЗаменить(НовыйУРЛ, "http://degustation.vkusvill.ru/", "");
		Запрос = Новый HTTPЗапрос(НовыйУРЛ);
		Ответ = Соединение.Получить(Запрос, ПолноеИмя);
	КонецЕсли;
	
	//Попытка
	//	КопироватьФайл(УРЛ, ПолноеИмя);
	//Исключение
	//	Возврат Ложь;
	//КонецПопытки;
	
	ФайлНаДиске = Новый Файл(ПолноеИмя);
	Если ФайлНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции


Функция ПолучитьКаталог()
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());

	Если ПустаяСтрока(КаталогФотографий) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	Возврат КаталогФотографий;
	
КонецФункции

#КонецОбласти