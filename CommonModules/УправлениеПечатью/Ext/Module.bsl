
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ РЕЗУЛЬТАТЫ ДЛЯ КОМАНД ПЕЧАТИ

// Сформировать печатные формы
Процедура СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати, 
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Получим менеджер печати
	МенеджерПечати = ПолучитьМенеджерОбъекта(ИмяМенеджераПечати);
	
	// Подготовим коллекцию для формируемых печатных форм
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов);
	
	// Подготовим структуру параметров вывода
	ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода();
	
	ОбъектыПечати = Новый СписокЗначений;
	
	// Сформируем печатные формы
	МенеджерПечати.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	// Проверим, все ли макеты были сформированы
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если Стр.ТабличныйДокумент = Неопределено Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                                     НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
			                                     Новый Структура("ИмяМакета", Стр.ИмяМакета));
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		Стр.ТабличныйДокумент.КоличествоЭкземпляров = Стр.Экземпляров;
		
		// Установим автомасштаб
		Если НЕ Стр.ТабличныйДокумент.АвтоМасштаб
			И НЕ ЗначениеЗаполнено(Стр.ТабличныйДокумент.ИмяПринтера) Тогда
			Стр.ТабличныйДокумент.АвтоМасштаб = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сформировать печатные формы для непосредственного вывода на принтер
Процедура СформироватьПечатныеФормыДляБыстройПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
	ТабличныеДокументы, ОбъектыПечати, ПараметрыВывода, Отказ) Экспорт
	
	Если НЕ ПравоДоступа("Вывод", Метаданные) Тогда
		Отказ = Истина;
		Возврат;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
	КоллекцияПечатныхФорм = Неопределено;
	ОбъектыПечати = Новый СписокЗначений;
	
	СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати, 
		КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		
	ТабличныеДокументы = Новый СписокЗначений;
	
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если (ТипЗнч(Стр.ТабличныйДокумент) = Тип("ТабличныйДокумент")) И (Стр.ТабличныйДокумент.ВысотаТаблицы <> 0) Тогда
			ТабличныеДокументы.Добавить(Стр.ТабличныйДокумент, Стр.СинонимМакета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сформировать печатные формы для непосредственного вывода на принтер
// в серверном режиме в обычном приложении
Процедура СформироватьПечатныеФормыДляБыстройПечатиОбычноеПриложение(
				ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
				Адрес, ОбъектыПечати, ПараметрыВывода, Отказ) Экспорт
	
	Перем ОбъектыПечатиСЗ, ТабличныеДокументы;
	
	СформироватьПечатныеФормыДляБыстройПечати(
			ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
			ТабличныеДокументы, ОбъектыПечатиСЗ, ПараметрыВывода, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыПечати = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ОбъектыПечатиСЗ Цикл
		ОбъектыПечати.Вставить(ОбъектПечати.Представление, ОбъектПечати.Значение);
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(ТабличныеДокументы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ, ИСПОЛЬЗУЕМЫЕ МОДУЛЯМИ МЕНЕДЖЕРОВ ОБЪЕКТОВ ПРИ ФОРМИРОВАНИИ ТАБЛИЧНЫХ ДОКУМЕНТОВ

// Проверить, нужно ли печатать макет
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ") <> Неопределено;
	
КонецФункции

// Вывести табличный документ в коллекцию печатных форм
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент, Картинка = Неопределено) Экспорт
	
	Стр = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	Если Стр <> Неопределено Тогда
		Стр.ТабличныйДокумент = ТабличныйДокумент;
		Стр.СинонимМакета = СинонимМакета;
		Стр.Картинка = Картинка;
	КонецЕсли;
	
КонецПроцедуры

// Задать область печати объекта в табличном документе
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ОбластьДокумента = ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, );
	ОбластьДокумента.Имя = ИмяОбласти;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ НЕЭКСПОРТНЫЕ ФУНКЦИИ

// По имени объекта получить его менеджер
//
Функция ПолучитьМенеджерОбъекта(ИмяМенеджера)
	
	Поз = Найти(ИмяМенеджера, ".");
	ИмяГруппы  = Лев(ИмяМенеджера,  Поз-1);
	ИмяОбъекта = Сред(ИмяМенеджера, Поз+1);
	
	Если ВРег(ИмяГруппы) = "СПРАВОЧНИК" Тогда
		Возврат Справочники[ИмяОбъекта];
		
	ИначеЕсли ВРег(ИмяГруппы) = "ДОКУМЕНТ" Тогда
		Возврат Документы[ИмяОбъекта];
		
	ИначеЕсли ВРег(ИмяГруппы) = "ОБРАБОТКА" Тогда
		Возврат Обработки[ИмяОбъекта];
		
	ИначеЕсли ВРег(ИмяГруппы) = "ОТЧЕТ" Тогда
		Возврат Отчеты[ИмяОбъекта];
		
	ИначеЕсли ВРег(ИмяГруппы) = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
		
	ИначеЕсли ВРег(ИмяГруппы) = "ЗАДАЧА" Тогда
		Возврат Задачи[ИмяОбъекта];
		
	Иначе
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                                     НСтр("ru = 'Не найден менеджер для %1'"),
		                                     Новый Структура("ИмяМенеджера", ИмяМенеджера));
		
		ВызватьИсключение(ТекстСообщенияОбОшибке);
		
	КонецЕсли;
	
КонецФункции

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм
//
Функция ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов)
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	
	СтрИмен = СтрЗаменить(ИменаМакетов, ",", Символы.ПС);
	Для Сч = 1 По СтрЧислоСтрок(СтрИмен) Цикл
		Имя = СтрПолучитьСтроку(СтрИмен, Сч);
		Стр = Макеты.Найти(Имя, "ИмяМакета");
		Если Стр = Неопределено Тогда
			Стр = Макеты.Добавить();
			Стр.ИмяМакета = Имя;
			Стр.ИмяВРЕГ   = ВРег(Имя);
			Стр.Экземпляров = 1;
		Иначе
			Стр.Экземпляров = Стр.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Подготовить структуру параметров вывода для менеджера объекта формирующего печатные формы
//
Функция ПодготовитьСтруктуруПараметровВывода()
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно",    Ложь);
	ПараметрыВывода.Вставить("ПолучательЭлектронногоПисьма",  Неопределено);
	ПараметрыВывода.Вставить("ОтправительЭлектронногоПисьма", Неопределено);
	
	Возврат ПараметрыВывода;
	
КонецФункции

Функция КомпонентаФормированияQRКода(Отказ)
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода'");
	
	Попытка
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", "QR") Тогда
			QRCodeGenerator = Новый("AddIn.QR.QRCodeExtension");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЕсли
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки, , , , Отказ);
	КонецПопытки;
	
	Возврат QRCodeGenerator;
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
//  ТекстОшибки      - Строка - в этот параметр помещается описание возникшей ошибки (если возникла).
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Отказ = Ложь;
	
	ГенераторQRКода = КомпонентаФормированияQRКода(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации("Формирование QR-кода",
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с шаблонами офисных документов.

// Добавляет к параметру НаборОбластей новую запись об области.
//
// Параметры:
//   ОбластиМакетаОфисногоДокумента - Массив - набор областей (массив структур) макета офисного документа.
//   ИмяОбласти                     - Строка - имя добавляемой области.
//   ТипОбласти                     - Строка - тип области:
//			ВерхнийКолонтитул
//			НижнийКолонтитул
//			Общая
//			СтрокаТаблицы
//			Список
//
// Пример:
//	Функция ОбластиМакетаОфисногоДокумента()
//	
//		Области = Новый Структура;
//	
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "НижнийКолонтитул",	"НижнийКолонтитул");
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "Заголовок",			"Общая");
//	
//		Возврат Области;
//	
//	КонецФункции
//
Процедура ДобавитьОписаниеОбласти(ОбластиМакетаОфисногоДокумента, Знач ИмяОбласти, Знач ТипОбласти) Экспорт
	
	НоваяОбласть = Новый Структура;
	
	НоваяОбласть.Вставить("ИмяОбласти", ИмяОбласти);
	НоваяОбласть.Вставить("ТипОбласти", ТипОбласти);
	
	ОбластиМакетаОфисногоДокумента.Вставить(ИмяОбласти, НоваяОбласть);
	
КонецПроцедуры

// Получает за один вызов всю необходимую информацию для печати: данные объектов по макетам, двоичные
// данные макетов, описание областей макетов.
// Для вызова из клиентских модулей печати форм по макетам офисных документов.
//
// Параметры:
//   ИмяМенеджераПечати - Строка - имя для обращения к менеджеру объекта, например "Документ.<Имя документа>".
//   ИменаМакетов       - Массив - имен макетов, по которым будут формироваться печатные формы.
//   СоставДокументов   - Массив - ссылки на объекты информационной базы (должны быть одного типа).
//
// Возвращаемое значение:
//  Соответствие - коллекция ссылок на объекты и их данные:
//   * Ключ - ЛюбаяСсылка - ссылка на объект информационной базы;
//   * Значение - Структура - макет и данные:
//       ** Ключ - Строка - имя макета;
//       ** Значение - Структура - данные объекта.
//
Функция МакетыИДанныеОбъектовДляПечати(Знач ИмяМенеджераПечати, Знач ИменаМакетов, Знач СоставДокументов) Экспорт
	
	МассивИменМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов, ", ");

	МенеджерОбъекта = ПолучитьМенеджерОбъекта(ИмяМенеджераПечати);
	МакетыИДанные = МенеджерОбъекта.ПолучитьДанныеПечати(СоставДокументов, МассивИменМакетов);
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	Возврат МакетыИДанные;
	
КонецФункции
