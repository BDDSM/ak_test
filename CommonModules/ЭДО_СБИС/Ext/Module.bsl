
#Область СБИС_API

/////////////////////////////////////////////////////////////////////////////////////
// СБИС API

// Авторизация
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,ТекстОшибки) Экспорт 	
// Авторизуется на online.sbis.ru по логину/паролю	
	МестныйКэш = Кэш;
	
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Логин", Логин);
	СтруктураПараметровЗапроса.Вставить("Пароль", Пароль);
	Заголовки = Новый Соответствие;
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/auth/service/", "СБИС.Аутентифицировать", СтруктураПараметровЗапроса, Заголовки);
	Если Результат.Свойство("result") Тогда
		Возврат Результат.result;
	Иначе
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось авторизоваться по логину/паролю.";
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
КонецФункции	


// Загрузка
Функция ПрочитатьДокумент(Кэш, ИдентификаторСессии, ИдДок) 
// Получает структуру документа СБИС	
	СтруктураПараметровЗапроса = Новый Структура("Документ",Новый Структура("Идентификатор", строка(ИдДок)));
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/?srv=1", "СБИС.ПрочитатьДокумент", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось прочитать документ на сервере.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтруктураРезультата.result;
КонецФункции

Функция СохранитьВложениеПоСсылкеВФайлНаСервере(Кэш, ИдентификаторСессии, Ссылка) 
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", ИдентификаторСессии);
	Результат = сбисОтправитьИОбработатьКомандуGET(Кэш.Парам, Кэш.СБИС, Ссылка, Заголовки);
	Если Результат = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьСписокИзменений(Кэш, Организация) Экспорт
	
	НастройкиОрганизации = Кэш.Организации[Организация];
	
// Получает статусы документов сбис
	МестныйКэш = Кэш;
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", НастройкиОрганизации.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	filter = Новый Структура; 
	filter.Вставить( "ПолныйСертификатЭП", "Нет");
	
	Если ЗначениеЗаполнено(НастройкиОрганизации.ИдентификаторПоследнегоСобытия) Тогда
		filter.Вставить( "ИдентификаторСобытия", НастройкиОрганизации.ИдентификаторПоследнегоСобытия);	
	Иначе
		ДатаС = Макс(НастройкиОрганизации.ДатаПоследнегоСобытия, НастройкиОрганизации.ДатаНачалаЗагрузки);
		filter.Вставить( "ДатаВремяС", Формат(ДатаС,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
	КонецЕсли;
	
	org = Новый Структура; 
	Если СтрДлина(СокрЛП(Организация.ИНН)) = 12 Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", Организация.ИНН); 
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", Организация.ИНН); 
		СвЮЛ.Вставить( "КПП", Организация.КПП);
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	filter.Вставить( "НашаОрганизация", org ); 

	navigation = Новый Структура; 
	navigation.Вставить( "РазмерСтраницы", "100" ); 
	navigation.Вставить( "Страница", 0); 
	filter.Вставить( "Навигация", navigation );
		
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Фильтр", filter);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.СписокИзменений", СтруктураПараметровЗапроса, Заголовки);
			
	Если НЕ Результат.Свойство("result") Тогда
		Если ЗначениеЗаполнено(НастройкиОрганизации.ИдентификаторПоследнегоСобытия) Тогда  // если событие на онлайне удалили, то пытаемся по дате запросить
			СтруктураПараметровЗапроса.Фильтр.Удалить("ИдентификаторСобытия"); 					
			
			ДатаС = Макс(НастройкиОрганизации.ДатаПоследнегоСобытия, НастройкиОрганизации.ДатаНачалаЗагрузки);
			СтруктураПараметровЗапроса.Фильтр.Вставить( "ДатаВремяС", Формат(ДатаС,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
			
			Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.СписокИзменений", СтруктураПараметровЗапроса, Заголовки);
		КонецЕсли;
	КонецЕсли;		
	
	Если НЕ Результат.Свойство("result") Тогда
		ТекстОшибки = Строка(Организация);
		
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = ТекстОшибки = ТекстОшибки  + Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = ТекстОшибки = ТекстОшибки  + "Не удалось получить список изменений.";
		КонецЕсли;
		
		Сообщить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ЭДО", УровеньЖурналаРегистрации.Ошибка, , , "СБИС. " + ТекстОшибки);									
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.result.Документ;
	
КонецФункции


// Подписание / отклонение
Функция сбисВыполнитьКоманду(Кэш, ИдентификаторСессии, Идентификатор,  ИмяКоманды, ПредставлениеПакета, Комментарий = "") 
// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	МестныйКэш = Кэш;
	
	//
	Результат = Новый Структура("ОперацияВыполнена", Ложь);
	
	// Прочитаем пакет   
	//+++АК sole 2018.09.25 ИП-00018241
	Если Кэш.АвторизацияПоСертификату Тогда

		Docflow = Кэш.Docflow;
	
		document_out = docflow.CreateSimpleObject();
		document_out.Write("Идентификатор", Идентификатор);

		document = docflow.ReadDocument( document_out );
		СоставПакета = СериализоватьObjectВСтруктуру(document);
	Иначе
		СоставПакета = ПрочитатьДокумент(Кэш, ИдентификаторСессии, Идентификатор);
	КонецЕсли;
	//---АК sole 2018.09.25 ИП-00018241
	
	Если СоставПакета = Неопределено Тогда
		Результат.Вставить("ОбновитьСессию", Истина);
		Возврат Результат;
	КонецЕсли; 
	
	СписокДоступныхЭтапов = Новый СписокЗначений;
	СписокДоступныхЭтапов.Добавить("Утверждение");
	СписокДоступныхЭтапов.Добавить("Утверждено");
	СписокДоступныхЭтапов.Добавить("Утвердить");
	СписокДоступныхЭтапов.Добавить("Сверить");
	
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("Утверждение", "Утвердить"); 
	СоответствиеДействий.Вставить("Утверждено", "Утвердить");
	СоответствиеДействий.Вставить("Утвердить", "Утвердить");
	
	СоответствиеДействий.Вставить("Отклонить", "Отклонить");
	СоответствиеДействий.Вставить("Отправить свой вариант", "Отклонить");
	
	
	Если СоставПакета.Свойство("Этап") И СписокДоступныхЭтапов.НайтиПоЗначению(СоставПакета.Этап[0].Название) <> Неопределено Тогда
		
		//Ищем действие соответсвующее команде
		Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
			Если СоответствиеДействий[Действие.Название] = ИмяКоманды Тогда
				//+++АК sole 2018.09.25 ИП-00018241
				Если Кэш.АвторизацияПоСертификату Тогда
					Результат.ОперацияВыполнена = сбисВыполнитьДействиеSDK(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);									
				Иначе
					Результат.ОперацияВыполнена = сбисВыполнитьДействие(Кэш, ИдентификаторСессии, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
				КонецЕсли;
				//---АК sole 2018.09.25 ИП-00018241
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция сбисВыполнитьДействие(Кэш, ИдентификаторСессии, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) 
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	Если НЕ Действие.Свойство("Сертификат") или  Действие.Сертификат.Количество()=0 Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(Кэш, ИдентификаторСессии, СоставПакета);
	Возврат сбисВыполнитьДействиеБезОбработкиСлужебных(Кэш, ИдентификаторСессии, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета);
КонецФункции

Функция сбисВыполнитьДействиеБезОбработкиСлужебных(Кэш, ИдентификаторСессии, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) 
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	certificate = Действие.Сертификат[0];

	// Назначение действие на этап
	action = Новый Структура;
	action.Вставить("Название", Действие.Название);
	Если Комментарий<>"" Тогда
		action.Вставить("Комментарий", Комментарий);
	КонецЕсли;	
	action.Вставить("Сертификат", certificate);
	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Идентификатор",Этап.Идентификатор); 
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	document_in.Вставить( "Этап", stage );
		
	СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	// Подготовка этапа
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ПодготовитьДействие", СтруктураПараметровЗапроса, Заголовки, Ложь);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось подготовить действие.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	prepared_document = СтруктураРезультата.result;
	
	attachmentList = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	
	Если СоставПакета.Свойство("Вложение") Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		Размер = attachmentList.Количество();
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentList[сч];
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Не Вложение.Свойство("Идентификатор") Тогда
				attachment = Новый Структура;
				file = Новый Структура;
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
				file.Вставить( "Имя", ИмяФайла ); 
			    file.Вставить( "ДвоичныеДанные", сбисСтрокаВBASE64(Вложение.XMLДокумента) ); 
				attachment.Вставить( "Файл", file );
				Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
					ИдВложения = ИдПодтвЗаказа; 
					attachmentList.Удалить(НомПодтвЗаказа);
				Иначе 
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				attachment.Вставить( "Идентификатор",  ИдВложения);
				attachmentList.Добавить( attachment );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	stage = prepared_document.Этап[0];
	action = prepared_document.Этап[0].Действие[0];
	stage.Вставить("Действие", action);
	stage.Вставить("Вложение", attachmentList);
	prepared_document.Вставить( "Этап", stage );
	
	// Завершение этапа
	СтруктураПараметровЗапроса = Новый Структура("Документ",prepared_document);
	
	// Подготовка этапа
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ВыполнитьДействие", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось выполнить действие.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция ОбработатьСлужебныеДокументыПоПакету(Кэш, ИдентификаторСессии, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", ИдентификаторСессии);
	param   = Новый Структура;
	param.Вставить("ИдентификаторДокумента",СоставПакета.Идентификатор);
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Фильтр", param);
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ИнформацияОСлужебныхЭтапах", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Возврат Ложь;
	КонецЕсли;

	РезультатНеобрДок = Неопределено;
	СтруктураРезультата.result.Свойство("ЧислоНеобработанныхЭтапов",РезультатНеобрДок); // Получаем количество необработанных служебных документов
	Если РезультатНеобрДок = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	Всего = Число(РезультатНеобрДок);
	
	Если Всего>0 Тогда
		Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/?srv=1", "СБИС.СписокСлужебныхЭтапов", СтруктураПараметровЗапроса, Заголовки);
		Если НЕ Результат.Свойство("result") Тогда

			Если Результат.Свойство("error") Тогда
				Попытка
					ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
				Исключение
				КонецПопытки;
			Иначе
				ТекстОшибки = "Не удалось получить список служебных этапов.";
			КонецЕсли;
			Сообщить(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого СоставПакета Из Результат.result.Документ Цикл
			Выполнено = сбисВыполнитьДействиеБезОбработкиСлужебных(Кэш, ИдентификаторСессии, СоставПакета, СоставПакета.Этап[0], СоставПакета.Этап[0].Действие[0], "", "");
		КонецЦикла;
	КонецЕсли;
КонецФункции


// Служебные
Функция сбисСформироватьПрокси(МестныйКэшПарам,Протокол) Экспорт
	
		Если МестныйКэшПарам.ТипПрокси = "Вручную" Тогда
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить(Протокол, МестныйКэшПарам.ПроксиСервер, МестныйКэшПарам.ПроксиПорт);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
			Прокси.Пользователь = МестныйКэшПарам.ПроксиЛогин;
			Прокси.Пароль       = МестныйКэшПарам.ПроксиПароль;
		ИначеЕсли МестныйКэшПарам.ТипПрокси = "Автоматически" Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция сбисСформироватьТекстЗапроса(Метод, СтруктураПараметровЗапроса) Экспорт
	ТекстЗапроса = "{""jsonrpc"":""2.0"",""method"":"""+Метод+""",""params"":{";
	ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса);
	ТекстЗапроса = ТекстЗапроса+"},""id"":1}";	
	Возврат ТекстЗапроса;	
КонецФункции
Функция сбисЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса) Экспорт
	ТекстЗапроса = "";
	Для Каждого Элемент Из СтруктураПараметровЗапроса Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+СтрЗаменить(Элемент.Значение, """", "\""")+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Неопределено") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":{"+сбисЗаписатьПараметрыЗапроса(Элемент.Значение)+"},";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":[";
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ТекстЗапроса = ТекстЗапроса+"{";
				ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(ЭлементМассива);
				ТекстЗапроса = ТекстЗапроса+"},";
			КонецЦикла;
			Если Прав(ТекстЗапроса, 1) = "," Тогда
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
			КонецЕсли;
 			ТекстЗапроса = ТекстЗапроса+"],";
		КонецЕсли;
	КонецЦикла;
	Если Прав(ТекстЗапроса, 1) = "," Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	КонецЕсли;
	Возврат ТекстЗапроса 	
КонецФункции
Функция сбисОтправитьИОбработатьКоманду(МестныйКэшПарам, МестныйКэшСБИС, АдресРесурса, Метод, СтруктураПараметровЗапроса, Заголовки, ПреобразовыватьДаты = Истина) Экспорт
	Протокол =  "https";
	Прокси = сбисСформироватьПрокси(МестныйКэшПарам,Протокол);
	Соединение = Новый HTTPСоединение(СтрЗаменить(МестныйКэшСБИС.АдресСервера,"https://",""), , , ,Прокси,,Новый ЗащищенноеСоединениеOpenSSL());
	
	ТекстЗапроса = сбисСформироватьТекстЗапроса(Метод,СтруктураПараметровЗапроса);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса,КодировкаТекста.Системная);
	//HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса,"UTF-8");
	Если ЗначениеЗаполнено(Заголовки) Тогда
		HTTPЗапрос.Заголовки = Заголовки;
	КонецЕсли;
	Попытка
		Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
        Ошибка = ОписаниеОшибки(); 
		Сообщить(Ошибка);
	КонецПопытки;
	Соединение = Неопределено;
	СтрокаРезультата = Результат.ПолучитьТелоКакСтроку();
	СтруктураРезультата = Новый Структура;
	Попытка
		СтруктураРезультата = сбисПрочитатьJSON(СтрокаРезультата, , , ПреобразовыватьДаты);
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				Ошибка = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
				Сообщить(Ошибка);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось получить ответ сервера.");  
	КонецПопытки;
 	Возврат СтруктураРезультата;

КонецФункции
Функция сбисОтправитьИОбработатьКомандуGET(МестныйКэшПарам, МестныйКэшСБИС, АдресРесурса, Заголовки) Экспорт
	
	Протокол =  "https";
	Прокси = сбисСформироватьПрокси(МестныйКэшПарам,Протокол);
	Соединение = Новый HTTPСоединение(СтрЗаменить(МестныйКэшСБИС.АдресСервера,"https://",""), , , ,Прокси,,Новый ЗащищенноеСоединениеOpenSSL());
	
	Результат = КаталогВременныхФайлов() + "answ1.tmp";
	HTTPЗапрос = Новый HTTPЗапрос(СтрЗаменить(СтрЗаменить(АдресРесурса,"https://online.sbis.ru",""),"https://fix-online.sbis.ru",""));
    
	Если ЗначениеЗаполнено(Заголовки) Тогда
		HTTPЗапрос.Заголовки = Заголовки;
	КонецЕсли;
	Попытка
		Соединение.Получить(HTTPЗапрос, Результат);
	Исключение
        Ошибка = ОписаниеОшибки(); 
		Сообщить(Ошибка);
		Возврат Ложь;
	КонецПопытки;
	Соединение = Неопределено;
	Возврат Результат;

КонецФункции

Функция сбисСтрокаВДату(ДатаСтрокой) Экспорт
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=10 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;		
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=19 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2), Сред(ДатаСтрокой,12, 2), Сред(ДатаСтрокой,15, 2), Сред(ДатаСтрокой,18, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции
Функция сбисСтрокаВBASE64(строка, кодировка = "windows-1251") экспорт
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(строка);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, кодировка);
	ТекстXMLBase64 = сбисФайлВBASE64(ИмяВрФ);  
	Попытка 
      УдалитьФайлы(ИмяВрФ); 
    Исключение 
	КонецПопытки;	
	Возврат ТекстXMLBase64;
КонецФункции
Функция сбисBASE64ВСтроку(ТекстXMLBase64) экспорт
	ДвоичныеДанныеXML = Base64Значение(ТекстXMLBase64);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ДвоичныеДанныеXML.Записать(ИмяВрФ);
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВрФ);
	html_text = ТекстДок.ПолучитьТекст();
	Попытка 
      УдалитьФайлы(ИмяВрФ); 
    Исключение 
    КонецПопытки;
	Возврат html_text;
КонецФункции
Функция сбисФайлВBASE64(ПолноеИмяФайла) экспорт
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ТекстXMLBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"");  
	Возврат ТекстXMLBase64;
КонецФункции

// JSON парсер.   ----------------------------------------------------------------------------
//
// Параметры:
//	Значение - Строка. Строка данных в формате JSON для парсинга;
//
//  Стандарт - Неопределено, Булево. Режим работы:
//		- Истина - стандартный режим (значение по умолчанию);
//		- Ложь - альтернативный режим;
//		- Неопределено - автоопределение режима;
//
//  ПредставленияСсылок - Неопределено, Булево. Режим передачи ссылочных типов, с их представлением или без:
//		- Истина - ссылки передаются вместе со своим представлением, как объекты с двумя свойствами содержащими саму ссылку и ее представление;
//		- Ложь - ссылки передаются без представления (значение по умолчанию).
//		- Неопределено - автоопределение режима.
// 
// Возвращаемое значение:
//  Набор данных согласно содержимому входящих данных. 
//
Функция сбисПрочитатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь, ПреобразовыватьДаты = Истина) Экспорт
	
	Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок, ПреобразовыватьДаты);
	
КонецФункции 

// ─────────────────────────────────────────────────────────────────────────────
//  НАСТРОЙКИ

// Функция управляющая настройкой "АвтоматическоеПриведениеОбъектаКСтруктуре".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется автоматическое приведение объекта к структуре; 
//		- Ложь - автоматическое приведение объекта к структуре не выполняется, все объекты преобразуются в соответствие. 
//
// Примечание:
//  Автоматическое приведение к структуре выполняется только для объектов имена свойств которых могут быть 
//  использованы как ключи структуры, все остальные объекты преобразуются в соответствие.
//
Функция НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
	
	Возврат Истина; // Измените для использования автоматического приведения объекта к структуре.
	
КонецФункции // НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
// Функция управляющая настройкой "ПолноеМаскированиеСимволов".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется полное маскирование символов некорректно обрабатываемых JavaScript-ом; 
//		- Ложь - маскирование выполняется только согласно стандарту и дополнительно маскируются специальные символы. 
//
// Примечание:
//	Маскирование специальных символов из диапазона [0x0000, 0x001f] выполняется в не зависимости от настройки.
//
Функция НастройкаПолноеМаскированиеСимволов()
	
	Возврат Истина;	// Измените для неполного маскирования символов.
	
КонецФункции // НастройкаПолноеМаскированиеСимволов()
// Функция управляющая настройкой "НеявноеПриведениеПримитивныхЗначенийКлюча".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется неявное приведение примитивных типов значений ключей соответствий к их строковому представлению в формате 1С; 
//		- Ложь - неявное приведение примитивных типов значений ключей соответствий к строковому представлению не выполняется. 
//
// Примечание:
//	Неявно приводимые типы: Null, Булево, Число, Дата, Строка, УникальныйИдентификатор.
//
Функция НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()
	
	Возврат Ложь;	// Измените для использования неявного приведения примитивных значений ключей соответствий к строке.
	
КонецФункции // НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()



// ─────────────────────────────────────────────────────────────────────────────
//  ПАРСЕР

Функция jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок, ПреобразовыватьДаты)
	
	// Проверка параметров.
	Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда 
		ВызватьИсключение ИсключениеНекорректныйПараметр("Стандарт"); 
	КонецЕсли; 
	Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда 
		ВызватьИсключение ИсключениеНекорректныйПараметр("ПредставленияСсылок"); 
	КонецЕсли; 
	
	// Схема подстановок шестнадцатиричной системы.
	СхемаПодстановок = Новый Соответствие; 
	ШестнадцатиричнаяСистема = "0123456789abcdef"; 
	ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл 
		Для ПервыйРазряд = 1 По 16 Цикл 
			СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); 
			ДесятичноеЧисло = ДесятичноеЧисло + 1; 
		КонецЦикла; 
	КонецЦикла;
	
	// Вспомогательные данные.
	ВспомогательныеДанные = Новый Структура("ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре",
	Тип("Строка"),
	СхемаПодстановок,
	(НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре() = Истина));
	
	// Стартовые значения.
	Индекс = 1; 
	Длина = СтрДлина(Значение);
	
	// Форматирование (первый шаг парсера).
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда 
		СимволыФорматирования = " " + Символы.ВК + Символы.ПС + Символы.Таб; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
	Иначе 
		СимволыФорматирования = ""; 
	КонецЕсли;
	Если (Индекс > Длина) Тогда 
		ВызватьИсключение ИсключениеПустойПакетДанных(); 
	КонецЕсли; 
	
	// Парсер.
	Возврат jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина, ПреобразовыватьДаты);
	
КонецФункции // jsonПрочитатьИнициализация()
Функция jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень, ПреобразовыватьДаты)
	
	Символ = Сред(Значение, Индекс, 1);
	Если (Символ = "[") Тогда																								// [
		
		// Массив.
		Результат = Новый Массив;
		
		Индекс = Индекс + 1; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); 
		КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); 
		Если (Символ = "]") Тогда														// ] 
			// Пустой массив.
			Индекс = Индекс + 1;
		Иначе
			Пока (Индекс <= Длина) Цикл
				// Значение.
				Результат.Добавить(jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь, ПреобразовыватьДаты));
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "]") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли (Символ = "{") Тогда																							// {
		
		// Объект.
		Индекс = Индекс + 1; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); 
		КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); 
		Если (Символ = "}") Тогда														// } 
			// Пустой объект.
			Индекс = Индекс + 1;
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; 
			Если ТолькоДопустимыеСтроки Тогда 
				РезультатСтруктура = Новый Структура; 
			Иначе 
				РезультатСоответствие = Новый Соответствие; 
			КонецЕсли;
			
		Иначе
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; 
			РезультатСоответствие = Новый Соответствие; 
			Если ТолькоДопустимыеСтроки Тогда 
				РезультатСтруктура = Новый Структура; 
			КонецЕсли; 
			ТипСтроки = ВспомогательныеДанные.ТипСтроки;
			
			Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс; 
				КлючЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь, ПреобразовыватьДаты); 
				Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда 
					ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); 
				КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ":") Тогда																					// :
					Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
				КонецЕсли;
				
				// Значение.
				ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь, ПреобразовыватьДаты);
				
				// Коллекция.
				РезультатСоответствие.Вставить(КлючЭлемента, ЗначениеЭлемента);
				Если ТолькоДопустимыеСтроки Тогда 
					Попытка 
						РезультатСтруктура.Вставить(КлючЭлемента, ЗначениеЭлемента); 
					Исключение
						// всегда формируем структуру. Поля с плохими именами не записываем
						//ТолькоДопустимыеСтроки = Ложь; 
					КонецПопытки; 
				КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "}") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; 
						jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
						Если (Индекс >= Длина) Тогда 
							ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); 
						КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		// Структуры.
		Если ТолькоДопустимыеСтроки Тогда   
			Результат = РезультатСтруктура; 
		Иначе
			Результат = РезультатСоответствие;
		КонецЕсли;
		
		// Ссылка.
		Если (ПредставленияСсылок = Истина) Или (ПредставленияСсылок = Неопределено) Тогда 
			Результат = jsonПрочитатьСсылку(Результат, ТолькоДопустимыеСтроки); 
		КонецЕсли;
		
	Иначе
		
		// Примитивные типы.
		Если (Символ = """") Или (Символ = "'") Тогда        																// " , '
			
			// Строка.
			Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; 
			Пока Истина Цикл
				Позиция = Найти(Подстрока, Символ);
				
				Если (Позиция > 0) Тогда
					Индекс = Индекс + Позиция; 
					Откат = Позиция - 1; 
					Маскировка = Ложь; 
					Пока (Сред(Подстрока, Откат, 1) = "\") И Булево(Откат) Цикл 
						Маскировка = Не Маскировка; 
						Откат = Откат - 1; 
					КонецЦикла;
					Если Маскировка Тогда 
						Подстрока = Сред(Подстрока, Позиция + 1); 
					Иначе 
						Прервать; 
					КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
				КонецЕсли;
				
			КонецЦикла;
			
			// Строка.
			Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = "'"));
			
			Если jsonПрочитатьОпределитьДату(Результат) Тогда
				// Дата.
				Если ПреобразовыватьДаты Тогда
					Результат = jsonПрочитатьДату(Результат, Начало);
				КонецЕсли;
				//ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
				//	// Идентификатор.
				//	Результат = jsonПрочитатьИдентификатор(Результат, Начало);
			ИначеЕсли (Стандарт = Ложь) Или (Стандарт = Неопределено) Тогда
				Если jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
					// Внутренний тип.
					Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
				КонецЕсли;
			КонецЕсли;
			
			// Корректировка индекса.
			Индекс = Индекс + 1;
			
		Иначе
			
			Если (Символ = "n") Тогда
				// Null.
				Если (Сред(Значение, Индекс, 4) = "null") Тогда 
					Индекс = Индекс + 4; Результат = Null; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "t") Тогда
				// Истина.
				Если (Сред(Значение, Индекс, 4) = "true") Тогда 
					Индекс = Индекс + 4; 
					Результат = Истина; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "f") Тогда
				// Ложь.
				Если (Сред(Значение, Индекс, 5) = "false") Тогда 
					Индекс = Индекс + 5; 
					Результат = Ложь; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "u") Тогда
				// Неопределено.
				Если (Сред(Значение, Индекс, 9) = "undefined") Тогда 
					Индекс = Индекс + 9; 
					Результат = Неопределено; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); 
				КонецЕсли;
			Иначе
				// Число.
				Начало = Индекс; 
				Пока Булево(Найти("-+0123456789.", Символ)) И (Индекс <= Длина) Цикл 
					Индекс = Индекс + 1; 
					Символ = Сред(Значение, Индекс, 1); 
				КонецЦикла;
				
				// Преобразование числа.
				Попытка
					Результат = Число(Сред(Значение, Начало, Индекс - Начало));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Экспоненциальная часть.
				Если (Символ = "E") Или (Символ = "e") Тогда
					
					// Степень.
					Индекс = Индекс + 1; 
					Позиция = Индекс; 
					Символ = Сред(Значение, Индекс, 1); 
					Пока Булево(Найти("-+0123456789", Символ)) И (Индекс <= Длина) Цикл 
						Индекс = Индекс + 1; 
						Символ = Сред(Значение, Индекс, 1); 
					КонецЦикла;
					
					// Преобразование степени.
					Попытка
						Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
					Исключение
						ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
					КонецПопытки;
					
					// Возвидение числа в степень.
					Результат = Результат * Pow(10, Степень);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматирование.
	jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
	Если ПервыйУровень Тогда 
		Если (Индекс <= Длина) Тогда 
			ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); 
		КонецЕсли; 
	Иначе 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // jsonПрочитать()
Функция jsonПрочитатьОпределитьДату(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 19) Тогда
		Если (Сред(Значение, 03, 1) = ".") И				// -
			(Сред(Значение, 06, 1) = ".") И				// -
			(Сред(Значение, 14, 1) = ".") И				// :
			(Сред(Значение, 17, 1) = ".") Тогда				// :
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 08, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
				// Месяц.
				Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 05, 1))) И
				// День.
				Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 02, 1))) И
				// Час.
				Булево(Найти("0123456789", Сред(Значение, 12, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 13, 1))) И
				// Минута.
				Булево(Найти("0123456789", Сред(Значение, 15, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 16, 1))) И
				// Секунда.
				Булево(Найти("0123456789", Сред(Значение, 18, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 19, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если (СтрДлина(Значение) = 10) Тогда
		Если (Сред(Значение, 03, 1) = ".") И				// -
			(Сред(Значение, 06, 1) = ".") Тогда				// :
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 08, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
				// Месяц.
				Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 05, 1))) И
				// День.
				Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 02, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()
Функция jsonПрочитатьОпределитьИдентификатор(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = "-") И					// -
			(Сред(Значение, 14, 1) = "-") И					// -
			(Сред(Значение, 19, 1) = "-") И					// -
			(Сред(Значение, 24, 1) = "-") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()
Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()
Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
	"\\",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
	"\/",			"/"),           // x2f
	"\b",			Символ(008)),	// x08
	"\t",			Символы.Таб),   // x09
	"\n",			Символы.ПС),    // x0a
	"\f",			Символы.ПФ),    // x0c
	"\r",			Символы.ВК),    // x0d
	"\""",			"""");          // x22
	
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, "\u"); Пока Булево(Позиция) Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
	КонецЦикла;
	
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");				
	
КонецФункции // jsonПрочитатьСтроку()
Функция jsonПрочитатьДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат сбисСтрокаВДату(Значение);
	Исключение
		ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()
Функция jsonПрочитатьСсылку(Значение, Структура)
	
	Перем Ссылка;
	
	// Ссылка.
	Если (Значение.Количество() = 2) Тогда 
		Если Структура Тогда
			Если Значение.Свойство("Представление") И Значение.Свойство("Ссылка", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
		Иначе
			Ссылка = Значение.Получить("Ссылка"); Если (Не Ссылка = Неопределено) И (Не Значение.Получить("Представление") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции // jsonПрочитатьСсылку()
Функция jsonПрочитатьИдентификатор(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Новый УникальныйИдентификатор(Значение);
	Исключение
		ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьИдентификатор()
Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)
	#Если ВебКлиент Или ТонкийКлиент Тогда
		ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение);
	#Иначе
		
		// Поиск.
		Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
		
		Если (Тип = "ref") Тогда
			Попытка
				Возврат ЗначениеИзСтрокиВнутр("{""#""," + СтрЗаменить(СтрЗаменить(Данные, "×", ":"), "÷", ",") + "}");
			Исключение
				ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
			КонецПопытки;
		КонецЕсли;
		
		ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
		
	#КонецЕсли
КонецФункции // jsonПрочитатьВнутреннийТип()
Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
	
	// Пропуск форматирования.
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда Пока (Индекс <= Длина) И Булево(Найти(СимволыФорматирования, Сред(Значение, Индекс, 1))) Цикл Индекс = Индекс + 1; КонецЦикла; КонецЕсли;
	// Пробел его не видно, \r, \n, \t .
	
КонецПроцедуры // jsonПрочитатьПропуститьФорматирование()

// ─────────────────────────────────────────────────────────────────────────────
//  ЛОКАЛИЗАЦИЯ

Функция Шаблон(Строка, Параметры) Экспорт
	
	Результат = Строка;
	
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Строка(Параметр.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // Шаблон()
Функция ИсключениеПустойПакетДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'");
	
КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()
Функция ИсключениеНекорректныйПакетДанных(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйПакетДанных()
Функция ИсключениеНеожиданноеОкончаниеПакетаДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'");
	
КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()
Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()
Функция ИсключениеНеожиданноеОкончаниеОбъетка(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()
Функция ИсключениеНекорректныйТипNull(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипNull()
Функция ИсключениеНекорректныйТипБулево(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипБулево()
Функция ИсключениеНекорректныйТипНеопределено(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипНеопределено()
Функция ИсключениеНекорректныйФорматСтроки(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйФорматСтроки()
Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНекорректныйФорматДаты()
Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение) Экспорт 
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат Шаблон(НСтр("ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));
		
	Иначе
		
		Возврат Шаблон(НСтр("ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНекорректныйФорматЧисла()
Функция ИсключениеНедопустимыйСимвол(Индекс, Символ) Экспорт 
	
	Если (Символ = Неопределено) Тогда
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));
		
	Иначе
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'"),
		Новый Структура("Индекс,Символ", Индекс, Символ(034) + Символ + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйСимвол()
Функция ИсключениеНеопознанныйТип(Индекс, Тип) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'"),
	Новый Структура("Индекс,Тип", Индекс, Символ(034) + Тип + Символ(034)));
	
КонецФункции // ИсключениеНеопознанныйТип()
Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНевозможноПреобразоватьЗначение()
Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте()
Функция ИсключениеНекорректныйПараметр(Параметр) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'"),
	Новый Структура("Параметр", Символ(034) + Параметр+ Символ(034)));
	
КонецФункции // ИсключениеНекорректныйПараметр()
Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение) Экспорт 
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'"),
		Новый Структура("Тип", ТипЗнч(Значение)));
		
	Иначе
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'"),
		Новый Структура("Индекс,Тип", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйТипКлюча()
Функция ИсключениеНевозможноВыполнитьЗапрос(Описание) Экспорт 
	
	Позиция = Найти(Описание, "}: "); Если Булево(Позиция) Тогда Позиция = Позиция + 3; Иначе Позиция = 1; КонецЕсли;
	Длина = Найти(Описание, Символы.ПС); Если Булево(Длина) Тогда Длина = Длина - Позиция; Иначе Длина = СтрДлина(Описание); КонецЕсли;
	Возврат НСтр("ru = 'JSON: Невозможно выполнить запрос. '; uk = 'JSON: Неможливо виконати запит. '") + Сред(Описание, Позиция, Длина) + ".";
	
КонецФункции // ИсключениеНевозможноВыполнитьЗапрос()
#КонецОбласти

#Область СБИС_SDK2
// Функции ниже взяты из формы "SDK2", обработки SBIS1C_UF.epf, скачанной с сайта СБИС
// Код в некоторых функциях был незначительно изменён.
// Для работы функций необходима установка "СБИС SDK" ( https://sbis.ru/help/integration/sdk )
// COM-компонент "СБИС SDK" 32-разрядный, поэтому для того чтобы этот код мог работать на
// серверной части необходима специальная настройка сервера: 
// - установка сертификатов для учётной записи службы 1С
// - настроика работы компонента "SBIS.Docflow" через COM+ по подбию описания в статье https://infostart.ru/public/195820/
// В настоящий момент серверы 1С не настроены, поэтому код этих функций работоспособен,
// только в толстом клиенте на стороне клиента.

//+++АК sole 2018.09.25 ИП-00018241
Функция сбисВыполнитьДействиеSDK(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	Если (НЕ Действие.Свойство("Сертификат") или  Действие.Сертификат.Количество()=0) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакетуSDK(Кэш, СоставПакета);
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Вложение.Свойство("Зашифрован") и Вложение.Зашифрован = "Да" Тогда
			Сообщить("Для корректной обработки зашифрованных документов выберите способ обмена ""extSDK"" на вкладке Настройки.");
			Возврат Ложь;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	// Назначение действие на этап
	action = Кэш.Docflow.CreateSimpleObject();
	action.Write("Название", Действие.Название);
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 Тогда
		certificate = СериализоватьСтруктуруВObject(Действие.Сертификат[0],Кэш);
		action.WriteObject("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Write("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = Кэш.Docflow.CreateSimpleObject();
	stage.Write("Название", Этап.Название);
	stage.Write("Идентификатор",Этап.Идентификатор); 
	stage.WriteObject("Действие", action);
	
	
	document_in = Кэш.Docflow.CreateSimpleObject();
	document_in.WriteObject( "Этап", stage );
	document_in.Write( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = Кэш.docflow.PrepareAction(document_in);
	Если prepared_document  = Неопределено Тогда
		сбисСообщитьОбОшибке(Кэш);
		Возврат Ложь
	КонецЕсли;
	
	attachmentListPrepared = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Вложение");     // вложения из ПодготовитьДействие
	Если attachmentListPrepared = Неопределено Тогда
		attachmentListPrepared = Кэш.Docflow.CreateSimpleObjectList();
	КонецЕсли;
	Размер = attachmentListPrepared.count;
	attachmentList = Кэш.Docflow.CreateSimpleObjectList();  // вложения, которые будем передавать в ВыполнитьДействие
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared.at(сч);
			attachment = Кэш.Docflow.CreateSimpleObject();
			attachment.Write( "Идентификатор",  Запись.Read("Идентификатор"));
			file = Кэш.Docflow.CreateSimpleObject();
			file.Write( "Имя", Запись.ReadObject("Файл").Read("Имя") );
			file.Write( "Хеш", Запись.ReadObject("Файл").Read("Хеш") ); 
			attachment.WriteObject( "Файл", file );
			attachmentList.Add( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
	
	ИдПодтвЗаказа = "";
	НомПодтвЗаказа = 0;
	Для сч=0 По Размер-1 Цикл
		Запись = attachmentListPrepared.at(сч);
		Если Запись.Read("Тип") = "ПодтверждениеЗаказа" Тогда
			ИдПодтвЗаказа = Запись.Read("Идентификатор");
			НомПодтвЗаказа = сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Идентификатор") Тогда
			attachment = Кэш.Docflow.CreateSimpleObject();
			file = Кэш.Docflow.CreateSimpleObject();
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
			file.Write( "Имя", ИмяФайла ); 
			file.Write( "ДвоичныеДанные", StreamHelper.StringToBase64(Вложение.XMLДокумента) ); 
			attachment.WriteObject( "Файл", file );
			Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Delete(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				ИдВложения = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			attachment.Write( "Идентификатор",  ИдВложения);
			attachmentList.Add( attachment );
		КонецЕсли;
	КонецЦикла;
	
	
	prepared_stage = prepared_document.ReadObjectList("Этап").at(0);
	prepared_action = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Действие").at(0);
	prepared_certificates = prepared_action.ReadObjectList("Сертификат");
	certificates = Кэш.Docflow.CreateSimpleObjectList();
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.count;
		Для сч=0 По КолСерт-1 Цикл
			certificate = Кэш.Docflow.CreateSimpleObject();
			certificate.Write( "Отпечаток", prepared_certificates.at(сч).Read("Отпечаток") );
			certificatekey = Кэш.Docflow.CreateSimpleObject();
			certificatekey.Write( "Тип", prepared_certificates.at(сч).ReadObject("Ключ").Read("Тип") );
			certificate.WriteObject( "Ключ", certificatekey );
			certificates.Add( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Кэш.Docflow.CreateSimpleObject();
	action.Write("Комментарий", prepared_action.Read("Комментарий"));
	action.Write("Название", prepared_action.Read("Название"));
	action.Write("Идентификатор", prepared_action.Read("Идентификатор"));
	action.WriteObjectList("Сертификат", certificates);
	action.Write("ТребуетПодписания", prepared_action.Read("ТребуетПодписания"));
	stage = Кэш.Docflow.CreateSimpleObject();
	stage.WriteObject("Действие", action);
	stage.WriteObjectList("Вложение", attachmentList);
	stage.Write("Идентификатор", prepared_stage.Read("Идентификатор"));
	stage.Write("Название", prepared_stage.Read("Название"));
	document_in = Кэш.Docflow.CreateSimpleObject();
	document_in.Write( "Идентификатор", prepared_document.Read("Идентификатор") );
	prepared_redact = prepared_document.ReadObjectList("Редакция");
	redactions = Кэш.Docflow.CreateSimpleObjectList();
	КолРедакций = prepared_redact.count;
	Для сч=0 По КолРедакций-1 Цикл
		redaction = Кэш.Docflow.CreateSimpleObject();
		redaction.Write( "Идентификатор", prepared_redact.at(сч).Read("Идентификатор") );
		redactions.Add( redaction );
	КонецЦикла;
	document_in.WriteObjectList( "Редакция", redactions );
	document_in.WriteObject( "Этап", stage );
	
	// Завершение этапа
	completed_document = Кэш.docflow.ExecuteAction(document_in);
	Если completed_document  = Неопределено Тогда 
		сбисСообщитьОбОшибке(Кэш);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//+++АК sole 2018.09.25 ИП-00018241
Функция ОбработатьСлужебныеДокументыПоПакетуSDK(Кэш, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	МестныйКэш = Кэш;
	param   = МестныйКэш.Docflow.CreateSimpleObject();
	param.Write("ИдентификаторДокумента",СоставПакета.Идентификатор);
	ИнформацияПоНеобработанным = МестныйКэш.Docflow.ReadServiceStagesInfo(param);
	Если ИнформацияПоНеобработанным = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке(Кэш);
	КонецЕсли;
	ИнформацияПоНеобработанным = СериализоватьObjectВСтруктуру(ИнформацияПоНеобработанным);
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		Результат = МестныйКэш.Docflow.ProcessServiceStagesEx(param);
		Если Результат = Неопределено Тогда //почему неопределено
			сбисСообщитьОбОшибке(Кэш);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//+++АК sole 2018.09.25 ИП-00018241
Функция СериализоватьObjectВСтруктуру(Object) Экспорт
	// сериализует  com-объект в структуру	
	Попытка 
		ИмяОбъекта = object.ReadFirst();
		Структура = Новый Структура();
		Пока ИмяОбъекта<>"" Цикл
			Тип = object.TypeOf(ИмяОбъекта);	
			Если Тип = "строка" Тогда
				Строка = object.Read(ИмяОбъекта);
				Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и (СтрДлина(Строка)=10 или СтрДлина(Строка)=19) Тогда //видимо это дата
					Попытка
						Если СтрДлина(Строка)=10 Тогда
							Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
						Иначе
							Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2))
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				Структура.Вставить(ИмяОбъекта,Строка);
			ИначеЕсли Тип = "объект" Тогда
				Структура.Вставить(ИмяОбъекта,СериализоватьObjectВСтруктуру(object.ReadObject(ИмяОбъекта)));
			ИначеЕсли Тип = "массив объектов" Тогда
				Структура.Вставить(ИмяОбъекта,Новый Массив());
				ObjectList = Object.ReadObjectList(ИмяОбъекта);
				ObjectListCount = ObjectList.count;
				Для сч=0 По ObjectListCount-1 Цикл
					Структура[ИмяОбъекта].Добавить(СериализоватьObjectВСтруктуру(ObjectList.at(сч)));
				КонецЦикла;	
			Иначе
				Сообщить("Обратитесь в техподдержку. Появился новый тип Object "+Тип);
			КонецЕсли;
			ИмяОбъекта = object.ReadNext();
		КонецЦикла;	
		Возврат Структура;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

//+++АК sole 2018.09.25 ИП-00018241
Функция СериализоватьСтруктуруВObject(Структура,Кэш) Экспорт
	// сериализует  com-объект в структуру	
	Object = Кэш.Docflow.CreateSimpleObject();
	Для Каждого Элемент Из Структура Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ObjectList = Кэш.Docflow.CreateSimpleObjectList(); 
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ObjectList.add(СериализоватьСтруктуруВObject(ЭлементМассива,Кэш));	
			КонецЦикла;
			Object.WriteObjectList(Элемент.Ключ, ObjectList);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Object.WriteObject(Элемент.Ключ, СериализоватьСтруктуруВObject(Элемент.Значение,Кэш));
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Object.Write(Элемент.Ключ,формат(Элемент.Значение, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Иначе
			Object.Write(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	Возврат Object;
КонецФункции

//+++АК sole 2018.09.25 ИП-00018241
Функция сбисСообщитьОбОшибке(Кэш, ИнформацияОПакете = "") Экспорт
	Ошибка = ПолучитьСообщениеОбОшибке(Кэш, Ложь);
	Если Не Кэш.ТихийРежим Тогда
		Сообщить(Ошибка.ТекстОшибки+Символы.ПС+ИнформацияОПакете + Ошибка.ИнформацияОбОшибке);
	КонецЕсли;
	Возврат Ошибка.ТекстОшибки;
КонецФункции

//+++АК sole 2018.09.25 ИП-00018241
Функция ПолучитьСообщениеОбОшибке(Кэш, Кратко = Истина) Экспорт
	// Получает последнюю ошибку SDK	
	Ошибка = Новый Структура();
	Error = Кэш.Docflow.ReadLastErrorEx();
	Попытка
		Ошибка.Вставить("ТекстОшибки", строка(Error.Read("Описание")));
		Ошибка.Вставить("ИнформацияОбОшибке", строка(Error.Read("ОписаниеРасширенное")));
	Исключение
		Ошибка.Вставить("ТекстОшибки", "");
		Ошибка.Вставить("ИнформацияОбОшибке", "");
	КонецПопытки;
	Ошибка.Вставить("ПолныйТекст",Ошибка.ТекстОшибки+?(Ошибка.ТекстОшибки<>Ошибка.ИнформацияОбОшибке," ("+Ошибка.ИнформацияОбОшибке+")","" ));
	Если(Кратко)Тогда
		Возврат Ошибка.ТекстОшибки;
	КонецЕсли;
	Возврат Ошибка;
КонецФункции

#КонецОбласти


/////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

Функция ФорматДаты(Дата)
	
	Возврат Формат(Дата, "ДФ=дд.ММ.гггг");	
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧЕНИЕ И АВТОРИЗАЦИЯ

Функция ПроизвестиАвторизацию(Кэш, Организация, Пользователь) Экспорт

	ПараметрыАвторизации = ЭДО_ОбщегоНазначения.ПолучитьПараметрыАвторизации(Справочники.ЭДО_КаналыОбмена.СБИС, Организация, Пользователь);
	
	Если ПараметрыАвторизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	//+++АК sole 2018.09.13 ИП-00018241
	ТекстОшибки = "";
		
	Если ПараметрыАвторизации.АвторизацияПоСертификату Тогда
		
		Результат = АвторизоватьсяПоСертификату(Кэш, ПараметрыАвторизации.ОтпечатокСертификата, ТекстОшибки);
		
	Иначе
		Логин = ПараметрыАвторизации.Логин;
		Пароль = ПараметрыАвторизации.Пароль.Получить();
	
		Результат = АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,ТекстОшибки);
	КонецЕсли;
	
	Кэш.Вставить("АвторизацияПоСертификату", ПараметрыАвторизации.АвторизацияПоСертификату);
	//---АК sole 2018.09.13 ИП-00018241
	
	Если Результат = Ложь Тогда
		ЭДО_ОбщегоНазначения.СообщитьОбОшибке("СБИС. Не удалось произвести авторизацию. " + ТекстОшибки);							
	КонецЕсли; 

	Возврат Результат; 
	
КонецФункции

//+++АК sole 2018.09.13 ИП-00018241
Функция АвторизоватьсяПоСертификату(Кэш, ОтпечатокСертификата, ТекстОшибки)
	
	///+++ АК luza 2018.11.28 ИП-00018241^01
	Попытка 
		Docflow = Новый COMОбъект("SBIS.Docflow");
	Исключение
		ПодключитьSBISDocflow();
		Попытка 
			Docflow = Новый COMОбъект("SBIS.Docflow");
		Исключение
			ТекстОшибки = ТекстОшибки + "Не удалось установить компоненту СБИС";
			Возврат Ложь;
		КонецПопытки;	
	КонецПопытки;	
	//--- АК luza
	
	Certificate = Docflow.CreateSimpleObject();
	Certificate.Write("Отпечаток",ВРег(ОтпечатокСертификата));
	Результат = Docflow.AuthenticateByCertificate(Certificate);
	
	Кэш.Вставить("Docflow", Docflow);
	
	Если Результат <> 0 Тогда
		ConnectionInfo = Docflow.ReadConnectionInfo();
		ИдентификаторСессии = ConnectionInfo.Read("ИдентификаторСессии");
		Возврат	ИдентификаторСессии;
	КонецЕсли;
	
	Попытка
		Error = Docflow.ReadLastErrorEx();
		Описание = строка(Error.Read("Описание"));
		ОписаниеРасширенное = строка(Error.Read("ОписаниеРасширенное"));	
		ТекстОшибки = ТекстОшибки + Описание +?(Описание <> ОписаниеРасширенное, (" " + ОписаниеРасширенное), ""); 
	Исключение
		ТекстОшибки = ТекстОшибки + "Не удалось авторизоваться по сертификату.";
	КонецПопытки;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьКэш(Пользователь = Неопределено) Экспорт
	
	Кэш = Новый Структура;
	
	Кэш.Вставить("Парам", Новый Структура());
	Кэш.Вставить("СБИС",Новый Структура);
	Кэш.Вставить("КаталогЗагрузкиФайлов", ЭДО_ОбщегоНазначения.ПолучитьКаталогЗагрузкиФайлов());
	
	Кэш.Парам.Вставить("Логин","");
	Кэш.Парам.Вставить("Пароль","");
	Кэш.Парам.Вставить("Сертификат","");
	Кэш.Парам.Вставить("ТипПрокси","Автоматически");
	Кэш.Парам.Вставить("ПроксиЛогин","");
	Кэш.Парам.Вставить("ПроксиПароль","");
	Кэш.Парам.Вставить("ПроксиПорт","");
	Кэш.Парам.Вставить("ПроксиСервер","");
	
	Кэш.СБИС.Вставить("АдресСервера", "https://online.sbis.ru/");

	Кэш.Вставить("Организации",  Новый Соответствие);	
	
	НастройкиОбменаПоОрганизациям = ЭДО_ОбщегоНазначения.ПолучитьНастройкиОбменаПоОрганизациям(Справочники.ЭДО_КаналыОбмена.СБИС);	
	
	Для Каждого НастройкиОбменаПоОрганизации Из НастройкиОбменаПоОрганизациям Цикл
		
		РезультатАвторизации = ПроизвестиАвторизацию(Кэш, НастройкиОбменаПоОрганизации.Организация, Пользователь);
		
		Если РезультатАвторизации = Ложь Тогда
			Продолжить;
		КонецЕсли; 

		НастройкиОрганизации = Новый Структура;
		
		НастройкиОрганизации.Вставить("ИдентификаторСессии", РезультатАвторизации);	
		НастройкиОрганизации.Вставить("ДатаНачалаЗагрузки", НастройкиОбменаПоОрганизации.ДатаНачалаЗагрузки);
		НастройкиОрганизации.Вставить("ИдентификаторПоследнегоСобытия", НастройкиОбменаПоОрганизации.ИдентификаторПоследнегоСобытия);
		НастройкиОрганизации.Вставить("ДатаПоследнегоСобытия", НастройкиОбменаПоОрганизации.ДатаПоследнегоСобытия);
		
		Кэш.Организации.Вставить(НастройкиОбменаПоОрганизации.Организация, НастройкиОрганизации);
	КонецЦикла;
	
	Возврат Кэш;
	
КонецФункции 

Функция ПодключитьSBISDocflow()
	// Подкючает SDK.dll из макета обработки	
	Каталог = КаталогПрограммы();   // сначала пытаемся в каталог программы положить, чтобы можно было зарегить под администратором и пользоваться всем остальным
	КаталогВФ = КаталогВременныхФайлов();  
	Если Прав(Каталог,1)<>"\" Тогда 
		Каталог = Каталог+"\";
	КонецЕсли;
	Если Прав(КаталогВФ,1)<>"\" Тогда 
		КаталогВФ = КаталогВФ+"\";
	КонецЕсли;
	ИмяФайла = Каталог+"Sbis3SDK_v_"+СтрЗаменить(ТребуемаяВерсияКомпоненты(), ".","_")+".dll";
	ИмяФайлаВФ = КаталогВФ+"Sbis3SDK_v_"+СтрЗаменить(ТребуемаяВерсияКомпоненты(), ".","_")+".dll";
	Попытка 
		ЗагрузитьВнешнююКомпоненту(ИмяФайла);	
	Исключение 
		Ошибка = ОписаниеОшибки();
		МакетSDK = Справочники.ЭДО_КаналыОбмена.ПолучитьМакет("SBIS_SDK");
		Попытка
			МакетSDK.записать(ИмяФайла);
			ЗагрузитьВнешнююКомпоненту(ИмяФайла);	
		Исключение
			Ошибка = ОписаниеОшибки();
			//Сообщить(Строка(Ошибка));
			Попытка 
				ЗагрузитьВнешнююКомпоненту(ИмяФайлаВФ);
			Исключение
				Ошибка = ОписаниеОшибки();
				МакетSDK.записать(ИмяФайлаВФ);
				Попытка
					ЗагрузитьВнешнююКомпоненту(ИмяФайлаВФ);
				Исключение
					Ошибка = ОписаниеОшибки();
					//Сообщить(Строка(Ошибка));
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

функция ТребуемаяВерсияКомпоненты() экспорт
	// Повышаем версию компоненты при обновлении SDK	
	Возврат "1.1.10";
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДОКУМЕНТОВ

Функция ПолучитьНаправлениеОбмена(Направление)
	
	Если  ВРег(СокрЛП(Направление)) = "ВХОДЯЩИЙ" Тогда
		Возврат Перечисления.ЭДО_НаправленияДокументов.Входящий;
	ИначеЕсли  ВРег(СокрЛП(Направление)) = "ИСХОДЯЩИЙ" Тогда
		Возврат Перечисления.ЭДО_НаправленияДокументов.Исходящий;
	КонецЕсли; 

КонецФункции 

Функция ПолучитьДанныеКонтрагента(КонтрагентСБИС)
	
	ДанныеКонтрагента = Новый Структура("Адрес");
	
	Если КонтрагентСБИС.Свойство("СвЮЛ") Тогда
		ДанныеКонтрагента.Вставить("ИНН", КонтрагентСБИС.СвЮЛ.ИНН);
		ДанныеКонтрагента.Вставить("КПП", КонтрагентСБИС.СвЮЛ.КПП);
		ДанныеКонтрагента.Вставить("Наименование", КонтрагентСБИС.СвЮЛ.Название);
	ИначеЕсли КонтрагентСБИС.Свойство("СвФЛ") Тогда
		ДанныеКонтрагента.Вставить("ИНН", КонтрагентСБИС.СвФЛ.ИНН);
		ДанныеКонтрагента.Вставить("КПП", "");
		ДанныеКонтрагента.Вставить("Наименование", КонтрагентСБИС.СвФЛ.Фамилия + " " + КонтрагентСБИС.СвФЛ.Имя + " " + КонтрагентСБИС.СвФЛ.Отчество);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции 

Функция ЭтоПолучениеДокумента(Событие) Экспорт
	
	Возврат Событие.Название = "Получение";
	
КонецФункции 

Функция ДокументБылЗагружен(Документ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭДО_Пакеты.ИдентификаторПакета
	                      |ИЗ
	                      |	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	                      |ГДЕ
	                      |	ЭДО_Пакеты.ИдентификаторПакета = &ИдентификаторПакета");
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", Документ.Идентификатор);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции 

Функция ПолучитьСписокСобытий(Кэш, Организация) Экспорт
	
	НастройкиОрганизации = Кэш.Организации[Организация];
	
	СписокИзменений = ПолучитьСписокИзменений(Кэш, Организация);
	
	СписокСобытий = Новый Массив;
	
	Для Каждого Документ Из СписокИзменений Цикл
		Если Документ.Событие.Количество() > 1 Тогда
			ТекстОшибки = "Больше одного события в документе. " + НастройкиОрганизации.ИдентификаторПоследнегоСобытия;
			ВызватьИсключение ТекстОшибки;
		КонецЕсли; 
		
		Событие = Документ.Событие[0];
		
		СтруктураСобытия = Новый Структура();
		
		СтруктураСобытия.Вставить("Событие",  Событие);
		СтруктураСобытия.Вставить("Документ",  Документ);
		СтруктураСобытия.Вставить("ИдентификаторСобытия",  Событие.Идентификатор);
		СтруктураСобытия.Вставить("ДатаСобытия",  Событие.ДатаВремя );
		
		СписокСобытий.Добавить(СтруктураСобытия);
	КонецЦикла;

	Возврат СписокСобытий;
	
КонецФункции 

	
Процедура ЗагрузитьПакет(Кэш, Организация, ДокументПакет, Событие = Неопределено, ОбновитьФайлы = Ложь)
	
	Если НЕ Кэш.Свойство("КаталогЗагрузкиФайлов") ИЛИ  Кэш.КаталогЗагрузкиФайлов = Неопределено Тогда
		Кэш.Вставить("КаталогЗагрузкиФайлов", ЭДО_ОбщегоНазначения.ПолучитьКаталогЗагрузкиФайлов());		
	КонецЕсли; 
	
	НастройкиОрганизации = Кэш.Организации[Организация];
	
	НаправлениеПакета = ПолучитьНаправлениеОбмена(ДокументПакет.Направление);
	
	Если НаправлениеПакета <> Перечисления.ЭДО_НаправленияДокументов.Входящий Тогда
		Возврат;	
	КонецЕсли; 
	
	ИНН = "";
	//Если ДокументПакет.НашаОрганизация.Свойство("СвЮЛ") ИЛИ ДокументПакет.НашаОрганизация.СвЮЛ <> Тогда
	
	
	// Создаем/обновляем данные 
	МЗ_Пакет = РегистрыСведений.ЭДО_Пакеты.СоздатьМенеджерЗаписи();

	МЗ_Пакет.ИдентификаторПакета = ДокументПакет.Идентификатор;
	МЗ_Пакет.Прочитать();
	
	МЗ_Пакет.ИдентификаторПакета = ДокументПакет.Идентификатор;
	МЗ_Пакет.КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС;
	МЗ_Пакет.Направление = НаправлениеПакета;
	МЗ_Пакет.Организация = Организация;
	
	ДанныеКонтрагента = ПолучитьДанныеКонтрагента(ДокументПакет.Контрагент);
	МЗ_Пакет.КонтрагентЭДО = ЭДО_ОбщегоНазначения.НайтиСоздатьКонтрагента(Справочники.ЭДО_КаналыОбмена.СБИС, ДанныеКонтрагента);	
	
	МЗ_Пакет.Статус = ЭДО_ОбщегоНазначения.НайтиСоздатьСтатусДокумента(Справочники.ЭДО_КаналыОбмена.СБИС, ДокументПакет.Состояние.Код, ДокументПакет.Состояние.Название);
	МЗ_Пакет.СтатусПакета = МЗ_Пакет.Статус.Статус;
	
	Если Событие <> Неопределено Тогда
		МЗ_Пакет.ДатаПоследнегоСобытия	= Событие.ДатаВремя ;			
		МЗ_Пакет.ИдентификаторПоследнегоСобытия = Событие.Идентификатор;
	КонецЕсли; 
	
	// Обрабатываем вложения
	Если Событие = Неопределено Тогда
		ПолныйСоставПакета = ДокументПакет; 
	Иначе
		ПолныйСоставПакета = Событие;
	КонецЕсли; 
	
	Если ПолныйСоставПакета.Свойство("Вложение") Тогда	
		
		Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
			Если Вложение.Свойство("Служебный") И Вложение.Служебный <> "Нет" Тогда
				Продолжить;
			КонецЕсли;
			
			//
			ДокументСсылка = Документы.ЭДО_ВходящийДокумент.НайтиПоРеквизиту("ИдентификаторДокумента", Вложение.Идентификатор);
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.ЭДО_ВходящийДокумент.СоздатьДокумент();	
				
				ДокументОбъект.ИдентификаторДокумента = Вложение.Идентификатор;

				Если ЗначениеЗаполнено(Вложение.Дата) Тогда
					ДокументОбъект.Дата = Вложение.Дата;
				Иначе
					ДокументОбъект.Дата = ДокументПакет.ДатаВремяСоздания;
				КонецЕсли; 
				
				ДокументОбъект.Номер = Вложение.Номер;
			КонецЕсли; 
			
			ДокументОбъект.ИдентификаторПакета = МЗ_Пакет.ИдентификаторПакета;
			ДокументОбъект.КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС;
			ДокументОбъект.Организация = Организация;
			ДокументОбъект.КонтрагентЭДО = МЗ_Пакет.КонтрагентЭДО;	
			ДокументОбъект.Статус = МЗ_Пакет.Статус;
			ДокументОбъект.ТипДокумента = ЭДО_ОбщегоНазначения.НайтиСоздатьТипДокумента(Справочники.ЭДО_КаналыОбмена.СБИС, Вложение.Тип);
			ДокументОбъект.ДатаЗагрузки = ТекущаяДата();
			ДокументОбъект.ПредставлениеДокумента = Вложение.Название;
			
			Попытка 
				ДокументОбъект.СуммаДокумента = Вложение.Сумма;
			Исключение
			КонецПопытки; 

			Если (НЕ ЗначениеЗаполнено(ДокументОбъект.ФайлXML) ИЛИ ОбновитьФайлы) И ЗначениеЗаполнено(Вложение.Файл.Имя) И НРег(РаботаСФайлами.ПолучитьРасширениеФайла(Вложение.Файл.Имя)) = "xml" Тогда
				ИмяЗагруженногоФайла = СохранитьВложениеПоСсылкеВФайлНаСервере(Кэш, НастройкиОрганизации.ИдентификаторСессии, Вложение.Файл.Ссылка);
				
				Если ЗначениеЗаполнено(ИмяЗагруженногоФайла) Тогда
					ПолноеИмяФайла = Кэш.КаталогЗагрузкиФайлов + "\" + Вложение.Файл.Имя;
					ПереместитьФайл(ИмяЗагруженногоФайла, ПолноеИмяФайла);				
					
					ДокументОбъект.ФайлXML = ЭДО_ОбщегоНазначения.СоздатьОбновитьФайлДокумента(Кэш.КаталогЗагрузкиФайлов, Вложение.Файл.Имя, "xml", ДокументОбъект.ФайлXML, ДокументОбъект.ИдентификаторДокумента, ДокументОбъект.Дата);		
				КонецЕсли; 
			КонецЕсли; 
			
			Если (НЕ ЗначениеЗаполнено(ДокументОбъект.ФайлPDF) ИЛИ ОбновитьФайлы) И ЗначениеЗаполнено(Вложение.СсылкаНаPDF) Тогда
				ИмяЗагруженногоФайла = СохранитьВложениеПоСсылкеВФайлНаСервере(Кэш, НастройкиОрганизации.ИдентификаторСессии, Вложение.СсылкаНаPDF);			
				
				Если ЗначениеЗаполнено(Вложение.Файл.Имя) Тогда
					ИмяФайла = Вложение.Файл.Имя;
					РаботаСФайлами.УстановитьРасширениеФайла(ИмяФайла, "pdf");
				Иначе
					ИмяФайла = Вложение.Тип + " № " + Вложение.Номер + " от  " + Вложение.Дата + ".pdf";
				КонецЕсли;
				
				//СохранитьВложениеПоСсылкеВФайлНаСервере(Кэш, Вложение.СсылкаНаPDF);
				
				ПолноеИмяФайла = Кэш.КаталогЗагрузкиФайлов + "\" + ИмяФайла ;
				ПереместитьФайл(ИмяЗагруженногоФайла, ПолноеИмяФайла);				
				
				ДокументОбъект.ФайлPDF = ЭДО_ОбщегоНазначения.СоздатьОбновитьФайлДокумента(Кэш.КаталогЗагрузкиФайлов, ИмяФайла, "pdf", ДокументОбъект.ФайлPDF, ДокументОбъект.ИдентификаторДокумента, ДокументОбъект.Дата);
			КонецЕсли; 
				
			ДокументОбъект.Записать();				
		КонецЦикла;	
		
	КонецЕсли;
	
	// Обновим статусы в ранее загруженных документах
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭДО_ВходящийДокумент.Ссылка
	                      |ИЗ
	                      |	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	                      |ГДЕ
	                      |	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	                      |	И ЭДО_ВходящийДокумент.Статус <> &Статус");
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", ДокументПакет.Идентификатор);
	Запрос.УстановитьПараметр("Статус", МЗ_Пакет.Статус);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.Статус = МЗ_Пакет.Статус;
		ДокументОбъект.Записать();
	КонецЦикла;   
	
	МЗ_Пакет.ПредставлениеДокументов = ЭДО_ОбщегоНазначения.ПолучитьПредставлениеДокументовПакета(МЗ_Пакет.ИдентификаторПакета);	
	
	Попытка 
		МЗ_Пакет.СуммаПакета = ДокументПакет.Сумма;		
	Исключение
	КонецПопытки; 

	МЗ_Пакет.Записать();
		
	Если НЕ ПустаяСтрока(Кэш.КаталогЗагрузкиФайлов) Тогда
		УдалитьФайлы(Кэш.КаталогЗагрузкиФайлов, "*.*");
	КонецЕсли; 
	
КонецПроцедуры 

Функция ЗагрузитьСобытие(Кэш, Организация, ДокументПакет,  Событие) Экспорт
	
	// Загружаем только новые изменения	
	МЗ_Пакет = РегистрыСведений.ЭДО_Пакеты.СоздатьМенеджерЗаписи();

	МЗ_Пакет.ИдентификаторПакета = ДокументПакет.Идентификатор;
	МЗ_Пакет.Прочитать();
	
	Если МЗ_Пакет.ДатаПоследнегоСобытия > Событие.ДатаВремя Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	// Загружаем пакет
	ЗагрузитьПакет(Кэш, Организация, ДокументПакет, Событие);
	
	Возврат ДокументПакет.Идентификатор;
	
КонецФункции

Процедура ПерезагрузитьПакет(Кэш, ИдентификаторПакета) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭДО_Пакеты.ИдентификаторПакета,
	                      |	ЭДО_Пакеты.Организация
	                      |ИЗ
	                      |	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	                      |ГДЕ
	                      |	ЭДО_Пакеты.ИдентификаторПакета = &ИдентификаторПакета");
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	
	ПараметрыДокумента = Запрос.Выполнить().Выбрать();
	
	Если НЕ ПараметрыДокумента.Следующий() Тогда
		Возврат;		
	КонецЕсли;
	
	Организация = ПараметрыДокумента.Организация;
	
	НастройкиОрганизации = Кэш.Организации[Организация];
	
	Если НастройкиОрганизации = Неопределено Тогда
		Сообщить("Для текущего пользователя не настроена возможность загрузки документов по организации " + Организация, СтатусСообщения.Важное);
		Возврат;	
	КонецЕсли;
	
	ДокументПакет = ПрочитатьДокумент(Кэш, НастройкиОрганизации.ИдентификаторСессии, ИдентификаторПакета);		
	
	ЗагрузитьПакет(Кэш, ПараметрыДокумента.Организация, ДокументПакет, , Истина);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДПИСАНИЯ ДОКУМЕНТОВ

Функция УтвердитьОтклонитьДокумент(Кэш, ИдентификаторДокумента, Утвердить, Комментарий = "") Экспорт

	Результат = Новый Структура("ОперацияВыполнена", Ложь);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭДО_Пакеты.ИдентификаторПакета,
	                      |	ЭДО_Пакеты.Организация,
	                      |	ЭДО_Пакеты.ПредставлениеДокументов,
	                      |	ЭДО_Пакеты.Статус.Статус КАК Статус
	                      |ИЗ
	                      |	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	                      |ГДЕ
	                      |	ЭДО_Пакеты.ИдентификаторПакета = &ИдентификаторПакета");
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторДокумента);
	
	ПараметрыДокумента = Запрос.Выполнить().Выбрать();
	
	Если НЕ ПараметрыДокумента.Следующий() Тогда
		Сообщить("Не найден входящий документ (пакет) с идентификатором " + ИдентификаторДокумента);
		Возврат Результат;	
		
	ИначеЕсли ПараметрыДокумента.Статус <> Перечисления.ЭДО_СтатусыДокументов.Получен Тогда
		Сообщить("Документ должен находиться в статусе ""Получен""!", СтатусСообщения.Важное);
		Возврат Результат;	
		
	КонецЕсли;
	
	Организация = ПараметрыДокумента.Организация;
	
	НастройкиОрганизации = Кэш.Организации[Организация];
	
	Если НастройкиОрганизации = Неопределено Тогда
		Сообщить("Для текущего пользователя не настроена возможность утверждения/отклонения документов по организации " + Организация, СтатусСообщения.Важное);
		Возврат Результат;	
	КонецЕсли;
	
	Действие = ?(Утвердить, "Утвердить", "Отклонить");

	Результат = сбисВыполнитьКоманду(Кэш, НастройкиОрганизации.ИдентификаторСессии, ИдентификаторДокумента, Действие, ПараметрыДокумента.ПредставлениеДокументов,  Комментарий);		
	
	Если НЕ Результат.ОперацияВыполнена Тогда
		Возврат Результат;
	КонецЕсли; 
	
	// Обновляем информацию по документу
	ДокументПакет = ПрочитатьДокумент(Кэш, НастройкиОрганизации.ИдентификаторСессии, ИдентификаторДокумента);		
	
	Если ДокументПакет = Неопределено Тогда
		Сообщить("Не удалось обновить статус документа");
		Возврат Результат;
	КонецЕсли; 	
	
	ЗагрузитьПакет(Кэш, ПараметрыДокумента.Организация, ДокументПакет, , Истина);
	
	Возврат Результат;
	
КонецФункции 

//
