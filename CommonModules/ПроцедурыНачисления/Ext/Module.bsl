
// Функция возвращает таблицу значений с данными о начислении пени. Предварительно анализируются параметры начисления пени,
// расчет суммы пени производится в соответствии со значениями этих параметров.
//
// Параметры:
//		ДоговорКонтрагента - договор контрагента, для которого анализируются задолженности по объектам аренды.
//		МоментВремени - момент времени начисления пени
Функция НачислениеПени(ДоговорКонтрагента,МоментВремени) Экспорт
	
	Периодичность = Строка(ДоговорКонтрагента.Периодичность);
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Строка(Константы.ПериодНачисленияАренднойПлаты.Получить());
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	//Количество дней просрочки = Дата начисления пени - (Срок оплаты + Отсрочка по оплате)
	//Если в настройках установлен признак "Использовать дату счета", то срок оплаты будет равен дате 
	//счета на оплату услуг. В противном случае срок оплаты - день в периоде взаиморасчетов по договору
	
	
	//Если ПараметрыНачисленияПени.СпособРасчетаПросрочки = Перечисления.СпособыРасчетаПросрочки.ПоДатеСчета Тогда
		ПолеСрокОплаты = "
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВзаиморасчетыПоАрендеСАрендателямиОстатки.СчетНаАренду <> &ПустойСчетНаАренду
		|				ТОГДА НАЧАЛОПЕРИОДА(ВзаиморасчетыПоАрендеСАрендателямиОстатки.СчетНаАренду.Дата, ДЕНЬ)
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(СчетНаАрендуСостав.Ссылка.Дата, ДЕНЬ)
		|		КОНЕЦ) КАК СрокОплаты 
		|";
		СоединениеСрокОплаты = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаАренду.Состав КАК СчетНаАрендуСостав
		|		ПО (ВзаиморасчетыПоАрендеСАрендателямиОстатки.Услуга = СчетНаАрендуСостав.Номенклатура)
		|			И (ВзаиморасчетыПоАрендеСАрендателямиОстатки.ОбъектАренды = СчетНаАрендуСостав.Ссылка.ОбъектАренды)
		|			И ((НЕ СчетНаАрендуСостав.Ссылка.ПометкаУдаления))
		|			И (ВзаиморасчетыПоАрендеСАрендателямиОстатки.ДокументРасчетов.НачалоПериода = СчетНаАрендуСостав.Ссылка.НачалоПериода
		|				И ВзаиморасчетыПоАрендеСАрендателямиОстатки.ДокументРасчетов.ОкончаниеПериода = СчетНаАрендуСостав.Ссылка.ОкончаниеПериода
		|				И ВзаиморасчетыПоАрендеСАрендателямиОстатки.ДоговорКонтрагента = СчетНаАрендуСостав.Ссылка.ДоговорКонтрагента)
		|";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоАрендеСАрендателями.Услуга,
	|	ВзаиморасчетыПоАрендеСАрендателями.ОбъектАренды,
	|	ВзаиморасчетыПоАрендеСАрендателями.СчетНаАренду,
	|	ВзаиморасчетыПоАрендеСАрендателями.ПериодОплаты,
	|	МАКСИМУМ(ВзаиморасчетыПоАрендеСАрендателями.ДатаРасчетаПени) КАК ДатаРасчетаПени
	|ПОМЕСТИТЬ ВТПериодРасчетаПени
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоАрендеСАрендателями КАК ВзаиморасчетыПоАрендеСАрендателями
	|ГДЕ
	|	ВзаиморасчетыПоАрендеСАрендателями.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ВзаиморасчетыПоАрендеСАрендателями.ДатаРасчетаПени <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	" + ?(ТипЗнч(МоментВремени) = Тип("Дата"), "И ВзаиморасчетыПоАрендеСАрендателями.Период < &МоментНачисленияПени", "И ВзаиморасчетыПоАрендеСАрендателями.МоментВремени < &МоментНачисленияПени") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоАрендеСАрендателями.Услуга,
	|	ВзаиморасчетыПоАрендеСАрендателями.ОбъектАренды,
	|	ВзаиморасчетыПоАрендеСАрендателями.СчетНаАренду,
	|	ВзаиморасчетыПоАрендеСАрендателями.ПериодОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.Услуга КАК УслугаАренды,
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.ОбъектАренды КАК ОбъектАренды,
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.СчетНаАренду КАК СчетНаАренду,
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.ПериодОплаты КАК ПериодАренды,
	|	СУММА(ВзаиморасчетыПоАрендеСАрендателямиОстатки.СуммаОстаток) КАК Сумма,
	|	" + ПолеСрокОплаты + "
	|ПОМЕСТИТЬ ВТЗадолженность
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоАрендеСАрендателями.Остатки(
	|			&МоментНачисленияПени,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И (НЕ Депозит)
	|				И (НЕ Пени)) КАК ВзаиморасчетыПоАрендеСАрендателямиОстатки
	|		" + СоединениеСрокОплаты + "
	|ГДЕ
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.Услуга,
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.ОбъектАренды,
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.СчетНаАренду,
	|	ВзаиморасчетыПоАрендеСАрендателямиОстатки.ПериодОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность.УслугаАренды КАК УслугаАренды,
	|	Задолженность.ОбъектАренды КАК ОбъектАренды,
	|	Задолженность.СчетНаАренду КАК СчетНаАренду,
	|	Задолженность.ПериодАренды КАК ПериодАренды,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СрокОплаты КАК СрокОплаты,
	|	РегламентированныйПроизводственныйКалендарьОграничитель.ДатаКалендаря КАК СрокОплатыСОтсрочкой
	|ПОМЕСТИТЬ ВТЗадолженность2
	|ИЗ
	|	ВТЗадолженность КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарьОграничитель
	|			ПО РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= РегламентированныйПроизводственныйКалендарьОграничитель.ДатаКалендаря
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= Задолженность.СрокОплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.ОбъектАренды,
	|	Задолженность.УслугаАренды,
	|	Задолженность.СчетНаАренду,
	|	Задолженность.ПериодАренды,
	|	Задолженность.СрокОплаты,
	|	Задолженность.Сумма,
	|	РегламентированныйПроизводственныйКалендарьОграничитель.ДатаКалендаря
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|           Когда Задолженность.СрокОплаты = РегламентированныйПроизводственныйКалендарьОграничитель.ДатаКалендаря Тогда 1
	|			ИНАЧЕ 1
	|		КОНЕЦ) = 1
	|   
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.УслугаАренды КАК УслугаАренды,
	|	ВложенныйЗапрос.ОбъектАренды КАК ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду КАК СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды КАК ПериодАренды,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
	|	МИНИМУМ(ВложенныйЗапрос.СрокОплатыСОтсрочкой) КАК СрокОплатыСОтсрочкой
	|ПОМЕСТИТЬ ВТЗадолженность3
	|ИЗ
	|	ВТЗадолженность2 КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.СрокОплаты,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗадолженность3.УслугаАренды,
	|	ВТЗадолженность3.ОбъектАренды,
	|	ВТЗадолженность3.СчетНаАренду,
	|	ВТЗадолженность3.ПериодАренды,
	|	ВТЗадолженность3.Сумма,
	|	ВТЗадолженность3.СрокОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТПериодРасчетаПени.ДатаРасчетаПени, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) > ВТЗадолженность3.СрокОплатыСОтсрочкой
	|			ТОГДА ВТПериодРасчетаПени.ДатаРасчетаПени
	|		ИНАЧЕ ВТЗадолженность3.СрокОплатыСОтсрочкой
	|	КОНЕЦ КАК СрокОплатыСОтсрочкой
	|ПОМЕСТИТЬ ВТЗадолженность4
	|ИЗ
	|	ВТЗадолженность3 КАК ВТЗадолженность3
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодРасчетаПени КАК ВТПериодРасчетаПени
	|		ПО ВТЗадолженность3.УслугаАренды = ВТПериодРасчетаПени.Услуга
	|			И ВТЗадолженность3.ОбъектАренды = ВТПериодРасчетаПени.ОбъектАренды
	|			И ВТЗадолженность3.СчетНаАренду = ВТПериодРасчетаПени.СчетНаАренду
	|			И ВТЗадолженность3.ПериодАренды = ВТПериодРасчетаПени.ПериодОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.УслугаАренды КАК Номенклатура,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды КАК ПериодНачисления,
	|	1 КАК Количество,
	|	1 КАК Коэффициент,
	|	ВложенныйЗапрос.Сумма КАК ДолгЗаПериод,
	|	ВложенныйЗапрос.СрокОплатыСОтсрочкой КАК СрокОплаты,
	|	0 КАК КоличествоДнейПросрочки,
	|	ВложенныйЗапрос.УслугаАренды.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК Цена,
	|	0 КАК Сумма
	|ИЗ
	|	ВТЗадолженность4 КАК ВложенныйЗапрос
	|		Внутреннее СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря > ВложенныйЗапрос.СрокОплатыСОтсрочкой И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаНачисленияПени)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СрокОплатыСОтсрочкой,
	|	ВложенныйЗапрос.УслугаАренды.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьТолькоРабочиеДниПросрочки
	|				ТОГДА ВЫБОР
	|						КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня В (&РабочийДень)
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0";

	СписокРабочихДней = Новый СписокЗначений;
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("РабочийДень", СписокРабочихДней);
	Запрос.УстановитьПараметр("ПустойСчетНаАренду",Документы.СчетНаАренду.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаНачисленияПени", ?(ТипЗнч(МоментВремени) = Тип("Дата"), НачалоДня(МоментВремени), НачалоДня(МоментВремени.Дата)));
	Запрос.УстановитьПараметр("МоментНачисленияПени", ?(ТипЗнч(МоментВремени) = Тип("Дата"), КонецДня(МоментВремени), МоментВремени));
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	
	ДанныеПоНачислениям = Запрос.Выполнить().Выгрузить();
	ДанныеПоНачислениям.Колонки.Добавить("Контрагент");
	ДанныеПоНачислениям.Колонки.Добавить("ДоговорКонтрагента");
	ДанныеПоНачислениям.Колонки.Добавить("СчетРасчетов");
	
	Возврат ДанныеПоНачислениям;
	
КонецФункции

// Процедура предназначена для расчета суммы начисления по известному периоду начисления и ставке
// Параметры:
//		Стр - строка таблицы значений с данными для расчета. В строке указывается период начисления и ставка
Процедура РассчитатьСтрокуНачисления(Стр) Экспорт
	
	ОдинДень = 60*60*24;
	КоличествоВремени = (НачалоДня(Стр.ПериодКонец) - НачалоДня(Стр.ПериодНачало))/ОдинДень; //количество дней
	Если КоличествоВремени = 0 Тогда
		КоличествоВремени = 1;
	КонецЕсли;
	
	Стр.КоличествоДней = КоличествоВремени;
	КоличествоДнейВГоду = ДеньГода(КонецГода(Стр.ПериодНачало));
	ПериодНачисления = Стр.СпособНачисления.ПериодНачисления;
	Если ПериодНачисления = Перечисления.Периодичность.Год Тогда
		
		Если Стр.ПериодНачало = НачалоМесяца(Стр.ПериодНачало) И 
			Стр.ПериодКонец = НачалоДня(КонецМесяца(Стр.ПериодНачало)) Тогда
			//в этом случае считаем что Сумма = Площадь*Ставка/12
			КоличествоВремениПриведенное = 1/12;
		Иначе
			КоличествоВремениПриведенное = КоличествоВремени/КоличествоДнейВГоду;
		КонецЕсли;
		
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Полугодие Тогда
		КоличествоВремениПриведенное = КоличествоВремени/(КоличествоДнейВГоду/2);
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Квартал Тогда
		
		Если Стр.ПериодНачало = НачалоКвартала(Стр.ПериодНачало) И 
			НачалоДня(Стр.ПериодКонец) = НачалоДня(КонецКвартала(Стр.ПериодКонец)) Тогда
			КоличествоВремениПриведенное = 1;
		ИначеЕсли Стр.ПериодНачало = НачалоМесяца(Стр.ПериодНачало) И 
			НачалоДня(Стр.ПериодКонец) = НачалоДня(КонецМесяца(Стр.ПериодКонец)) Тогда
			КоличествоВремениПриведенное = 1/3;
		Иначе
			ИспользоватьСреднийМесяц = Константы.ИспользоватьСреднийМесяц.Получить();
			Если ИспользоватьСреднийМесяц Тогда
				СреднийМесяц = Константы.СреднийМесяц.Получить();
				Если Не ЗначениеЗаполнено(СреднийМесяц) Тогда
					Сообщить("Не задано значение константы ""Средний месяц""!",СтатусСообщения.Важное);
					КоличествоВремениПриведенное = 0;	
				Иначе
					КоличествоВремениПриведенное = КоличествоВремени/(СреднийМесяц*3);
				КонецЕсли;
			Иначе
				КоличествоВремениПриведенное = КоличествоВремени/((НачалоДня(КонецКвартала(Стр.ПериодНачало))-НачалоКвартала(Стр.ПериодНачало))/86400);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Месяц Тогда
		
		Если Стр.ПериодНачало = НачалоМесяца(Стр.ПериодНачало) И 
			НачалоДня(Стр.ПериодКонец) = НачалоДня(КонецМесяца(Стр.ПериодНачало)) Тогда
			КоличествоВремениПриведенное = 1;
		Иначе
			ИспользоватьСреднийМесяц = Константы.ИспользоватьСреднийМесяц.Получить();
			Если ИспользоватьСреднийМесяц Тогда
				СреднийМесяц = Константы.СреднийМесяц.Получить();
				Если Не ЗначениеЗаполнено(СреднийМесяц) Тогда
					Сообщить("Не задано значение константы ""Средний месяц""!",СтатусСообщения.Важное);
					КоличествоВремениПриведенное = 0;	
				Иначе
					КоличествоВремениПриведенное = КоличествоВремени/СреднийМесяц;
				КонецЕсли;
			Иначе
				КоличествоВремениПриведенное = КоличествоВремени/День(КонецМесяца(Стр.ПериодНачало));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Неделя Тогда
		КоличествоВремениПриведенное = КоличествоВремени/7;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.День Тогда
		КоличествоВремениПриведенное = КоличествоВремени;
	Иначе
		КоличествоВремениПриведенное = КоличествоВремени;
	КонецЕсли;
	
	Коэффициент = КоличествоВремениПриведенное;
	
	Результат = Стр.Цена*?(Стр.СпособНачисления.ЗаОбъектВЦелом, 1, Стр.Количество)*Коэффициент;
	Стр.Сумма = Результат;
	
КонецПроцедуры

// Процедура предназначена для расчета суммы начисления по известному периоду начисления и ставке
// Параметры:
//		ДанныеУчета - таблица значений с данными для расчета. В строках таблицы указывается период начисления и ставка
Процедура РассчитатьСуммуНачисления(ДанныеУчета) Экспорт
	
	Для Каждого Стр Из ДанныеУчета Цикл
		
		РассчитатьСтрокуНачисления(Стр);
		
	КонецЦикла;
		
	
КонецПроцедуры

// Процедура предназначена для автоматического заполнения счета на аренду и начисления арендной платы в случае заполнения не по счетам услугами
// постоянной части оплаты
// Параметры:
//		Объект - документ-объект
//		ИмяТабличнойЧасти - имя табличной части, которая будет заполнена данными из выборки
Процедура ПолучитьПостояннуюЧастьОплаты(Объект, ИмяТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтавкиСрезПоследних.Период, ДЕНЬ) КАК ДатаЗаписи,
	|	СтавкиСрезПоследних.Услуга,
	|	СтавкиСрезПоследних.ОбъектАренды,
	|	СтавкиСрезПоследних.Ставка,
	|	СтавкиСрезПоследних.СпособНачисления,
	|	СтавкиСрезПоследних.Площадь
	|ПОМЕСТИТЬ ВТСтавки
	|ИЗ
	|	РегистрСведений.Ставки.СрезПоследних(КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ), Договор = &Договор) КАК СтавкиСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СтавкиСрезПоследних.Период, ДЕНЬ), ДЕНЬ, -1),
	|	СтавкиСрезПоследних.Услуга,
	|	СтавкиСрезПоследних.ОбъектАренды,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНачисленияАренднойПлаты.ПустаяСсылка),
	|	0
	|ИЗ
	|	РегистрСведений.Ставки.СрезПоследних(КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ), Договор = &Договор) КАК СтавкиСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Ставки.Период, ДЕНЬ),
	|	Ставки.Услуга,
	|	Ставки.ОбъектАренды,
	|	Ставки.Ставка,
	|	Ставки.СпособНачисления,
	|	Ставки.Площадь
	|ИЗ
	|	РегистрСведений.Ставки КАК Ставки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Ставки.Период, ДЕНЬ) > &НачалоПериода
	|	И НАЧАЛОПЕРИОДА(Ставки.Период, ДЕНЬ) <= &КонецПериода
	|	И Ставки.Договор = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавки.ДатаЗаписи,
	|	ВТСтавки.Услуга,
	|	ВТСтавки.ОбъектАренды,
	|	ВТСтавки.Ставка,
	|	ВТСтавки.СпособНачисления,
	|	ВТСтавки.Площадь,
	|	ВТСтавки.ДатаЗаписи КАК ДатаНачала
	|ПОМЕСТИТЬ ВТСтавкиДатаНачала
	|ИЗ
	|	ВТСтавки КАК ВТСтавки
	|ГДЕ
	|	ВТСтавки.ДатаЗаписи <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавки.ДатаЗаписи,
	|	ВТСтавки.Услуга,
	|	ВТСтавки.ОбъектАренды,
	|	ВТСтавки.СпособНачисления,
	|	ВТСтавки.Ставка,
	|	ВТСтавки.Площадь,
	|	ВТСтавки.ДатаЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиДатаНачала.ДатаЗаписи,
	|	ВТСтавкиДатаНачала.Услуга,
	|	ВТСтавкиДатаНачала.ОбъектАренды,
	|	ВТСтавкиДатаНачала.Ставка,
	|	ВТСтавкиДатаНачала.СпособНачисления,
	|	ВТСтавкиДатаНачала.Площадь,
	|	ВТСтавкиДатаНачала.ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиДатаОкончания.ДатаНачала, &КонецПериода)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСтавкиПоПериодам
	|ИЗ
	|	ВТСтавкиДатаНачала КАК ВТСтавкиДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиДатаНачала КАК ВТСтавкиДатаОкончания
	|		ПО ВТСтавкиДатаНачала.ОбъектАренды = ВТСтавкиДатаОкончания.ОбъектАренды
	|			И ВТСтавкиДатаНачала.Услуга = ВТСтавкиДатаОкончания.Услуга
	|			И ВТСтавкиДатаНачала.ДатаНачала < ВТСтавкиДатаОкончания.ДатаНачала
	|			И ВТСтавкиДатаНачала.ДатаЗаписи < ВТСтавкиДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатаНачала.СпособНачисления,
	|	ВТСтавкиДатаНачала.ОбъектАренды,
	|	ВТСтавкиДатаНачала.ДатаЗаписи,
	|	ВТСтавкиДатаНачала.ДатаНачала,
	|	ВТСтавкиДатаНачала.Услуга,
	|	ВТСтавкиДатаНачала.Ставка,
	|	ВТСтавкиДатаНачала.Площадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиПоПериодам.ДатаЗаписи,
	|	ВТСтавкиПоПериодам.Услуга,
	|	ВТСтавкиПоПериодам.ОбъектАренды,
	|	ВТСтавкиПоПериодам.Ставка КАК Ставка,
	|	ВТСтавкиПоПериодам.СпособНачисления,
	|	ВТСтавкиПоПериодам.Площадь,
	|	ВТСтавкиПоПериодам.ДатаНачала КАК ДатаНачала,
	|	ВТСтавкиПоПериодам.ДатаОкончания КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТСтавкиЧислоДатаНачала
	|ИЗ
	|	ВТСтавкиПоПериодам КАК ВТСтавкиПоПериодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи,
	|	ВТСтавкиЧислоДатаНачала.Услуга,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка,
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Площадь,
	|	ВТСтавкиЧислоДатаНачала.ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиЧислоДатаОкончания.ДатаНачала, ВТСтавкиЧислоДатаНачала.ДатаОкончанияПериода)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТГрафикИзмененияСтавок
	|ИЗ
	|	ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаОкончания
	|		ПО ВТСтавкиЧислоДатаНачала.Услуга = ВТСтавкиЧислоДатаОкончания.Услуга
	|			И ВТСтавкиЧислоДатаНачала.ОбъектАренды = ВТСтавкиЧислоДатаОкончания.ОбъектАренды
	|			И ВТСтавкиЧислоДатаНачала.ДатаНачала < ВТСтавкиЧислоДатаОкончания.ДатаНачала
	|			И ВТСтавкиЧислоДатаНачала.ДатаЗаписи = ВТСтавкиЧислоДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Услуга,
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи,
	|	ВТСтавкиЧислоДатаНачала.ДатаНачала,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка,
	|	ВТСтавкиЧислоДатаНачала.Площадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовАренды.Услуга КАК Номенклатура,
	|	СтатусыОбъектовАренды.ОбъектАренды КАК ОбъектАренды,
	|	ВЫБОР
	|		КОГДА ВТГрафикИзмененияСтавок.СпособНачисления.ЗаОбъектВЦелом
	|			ТОГДА 1
	|		ИНАЧЕ ВТГрафикИзмененияСтавок.Площадь
	|	КОНЕЦ КАК Количество,
	|	ВТГрафикИзмененияСтавок.Ставка КАК СтавкаСпособаНачисления,
	|	ВТГрафикИзмененияСтавок.Ставка КАК Цена,
	|	ВТГрафикИзмененияСтавок.СпособНачисления,
	|	ВЫБОР
	|		КОГДА ВТГрафикИзмененияСтавок.ДатаНачала < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ВТГрафикИзмененияСтавок.ДатаНачала
	|	КОНЕЦ КАК ПериодНачало,
	|	СтатусыОбъектовАренды.ДатаНачалаАренды,
	|	СтатусыОбъектовАренды.ДатаОкончанияАренды,
	|	СтатусыОбъектовАренды.Услуга.СтавкаНДС КАК СтавкаНДС,
	|	СтатусыОбъектовАренды.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовАренды.СрезПоследних(
	|			&МоментВремени,
	|			Договор = &Договор
	|				И Услуга.ПостояннаяЧастьОплаты
	|				И Статус = &ВАренде
	|				И ДатаНачалаАренды <= &КонецПериода
	|				И ДатаОкончанияАренды >= &НачалоПериода
	|				И ФормаОплаты = &ФормаОплаты) КАК СтатусыОбъектовАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикИзмененияСтавок КАК ВТГрафикИзмененияСтавок
	|		ПО СтатусыОбъектовАренды.Услуга = ВТГрафикИзмененияСтавок.Услуга
	|			И СтатусыОбъектовАренды.ОбъектАренды = ВТГрафикИзмененияСтавок.ОбъектАренды
	|			И (ВЫБОР
	|				КОГДА ВТГрафикИзмененияСтавок.ДатаНачала < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ ВТГрафикИзмененияСтавок.ДатаНачала
	|			КОНЕЦ МЕЖДУ СтатусыОбъектовАренды.ДатаНачалаАренды И СтатусыОбъектовАренды.ДатаОкончанияАренды)
	|			И (ВТГрафикИзмененияСтавок.ДатаОкончания > &НачалоПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ОбъектАренды,
	|	ПериодНачало
	|ИТОГИ ПО
	|	Номенклатура,
	|	ОбъектАренды";
				
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВАренде", Перечисления.СтатусыОбъектовАренды.ВАренде);
	Запрос.УстановитьПараметр("МоментВремени", Объект.МоментВремени());
	Запрос.УстановитьПараметр("ДатаКурса", КонецДня(Объект.ДатаКурса));
	Запрос.УстановитьПараметр("ФормаОплаты", Объект.ФормаОплаты);
	
	ДанныеУчета = Новый ТаблицаЗначений;
	ДанныеУчета.Колонки.Добавить("Номенклатура");
	ДанныеУчета.Колонки.Добавить("ОбъектАренды");
	ДанныеУчета.Колонки.Добавить("ПериодНачисления");
	ДанныеУчета.Колонки.Добавить("ПериодНачало");
	ДанныеУчета.Колонки.Добавить("ПериодКонец");
	ДанныеУчета.Колонки.Добавить("СтавкаСпособаНачисления");
	ДанныеУчета.Колонки.Добавить("Цена");
	ДанныеУчета.Колонки.Добавить("Количество");
	ДанныеУчета.Колонки.Добавить("Коэффициент");
	ДанныеУчета.Колонки.Добавить("СпособНачисления");
	ДанныеУчета.Колонки.Добавить("СтавкаНДС");
	ДанныеУчета.Колонки.Добавить("Сумма");
	ДанныеУчета.Колонки.Добавить("КоличествоДней");
	ДанныеУчета.Колонки.Добавить("Валюта");
	ДанныеУчета.Колонки.Добавить("Курс");
	ДанныеУчета.Колонки.Добавить("Кратность");
	
	ВыборкаУслуг = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУслуг.Следующий() Цикл
		//обход по услугам
		ВыборкаОбъектов = ВыборкаУслуг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОбъектов.Следующий() Цикл
			//обход по объектам аренды
			ВыборкаДанных = ВыборкаОбъектов.Выбрать();
			
			КоличествоПериодов = ВыборкаДанных.Количество();
			КоличествоОбработанныхПериодов = 0;
			
			Пока ВыборкаДанных.Следующий() Цикл
				//обход по периодам изменения параметров начисления арендной платы
				
				Если КоличествоОбработанныхПериодов>0 Тогда
					ДанныеУчета[ДанныеУчета.Количество()-1].ПериодКонец = НачалоДня(ВыборкаДанных.ПериодНачало-1);	
				КонецЕсли;
				
				Стр = ДанныеУчета.Добавить();
				ЗаполнитьЗначенияСвойств(Стр,ВыборкаДанных);
				Стр.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				Если Не ЗначениеЗаполнено(ВыборкаДанных.СтавкаНДС) Тогда
					Стр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
				
				Если (ТипЗнч(Стр.количество)=тип("null")) или (Стр.количество=0) тогда
					Стр.количество=1;	
				конецЕсли;
				
				КоличествоОбработанныхПериодов = КоличествоОбработанныхПериодов+1;
				Если КоличествоОбработанныхПериодов = КоличествоПериодов Тогда
					Стр.ПериодКонец = Мин(ВыборкаДанных.ДатаОкончанияАренды,Объект.ОкончаниеПериода);
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	//необходимо разбить все периоды по периодам договора
	НомерСтроки = 0;
	//Если Объект.ДоговорКонтрагента.ВестиВзаиморасчетыПоПериодам Тогда
		Периодичность = Объект.ДоговорКонтрагента.Периодичность;
		Пока НомерСтроки < ДанныеУчета.Количество() Цикл
			Стр = ДанныеУчета[НомерСтроки];
			Стр.ПериодНачисления = НачалоПериода(Стр.ПериодНачало, Периодичность);
			Если НачалоПериода(Стр.ПериодНачало, Периодичность) < НачалоПериода(Стр.ПериодКонец, Периодичность) Тогда
				НоваяСтр = ДанныеУчета.Вставить(НомерСтроки + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
				Стр.ПериодКонец = КонецПериода(Стр.ПериодНачало, Периодичность);
				НоваяСтр.ПериодНачало = КонецПериода(Стр.ПериодНачало, Периодичность) + 1;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	//Иначе
	//	Для Каждого СтрокаТаб Из ДанныеУчета Цикл
	//		СтрокаТаб.ПериодНачисления = СтрокаТаб.ПериодНачало;
	//	КонецЦикла;
	//КонецЕсли;
	
	// Установим цену по специальному курсу
	Для Каждого СтрокаТаб Из ДанныеУчета Цикл
		Если СтрокаТаб.Цена = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для объекта аренды """ + СтрокаТаб.ОбъектАренды + """ по услуге """ + СтрокаТаб.Номенклатура + """ на дату " + Формат(Объект.НачалоПериода, "ДФ=dd.MM.yyyy") + " не задана ставка!");
			Продолжить;
		КонецЕсли;
		Если (не Объект.ВалютаДокумента.Пустая()) и (не СтрокаТаб.Валюта.Пустая()) Тогда
			Если СтрокаТаб.Валюта <> Объект.ВалютаДокумента Тогда
				СтруктураКурсаДок = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса);
				СтруктураКурсаСтроки = ПолучитьКурсВалюты(СтрокаТаб.Валюта, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
				СтрокаТаб.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаб.Цена,
							СтрокаТаб.Валюта, Объект.ВалютаДокумента,
							СтруктураКурсаСтроки.Курс, СтруктураКурсаДок.Курс,
							СтруктураКурсаСтроки.Кратность, СтруктураКурсаДок.Кратность);
			КонецЕсли;															
		КонецЕсли;
	КонецЦикла;
		
	ПроцедурыНачисления.РассчитатьСуммуНачисления(ДанныеУчета);
	ВалютаРуб = Константы.ВалютаРегламентированногоУчета.Получить();
	ДанныеУчета.Свернуть("Номенклатура,ОбъектАренды,Цена,СтавкаСпособаНачисления,СпособНачисления,Количество,СтавкаНДС,Коэффициент, ПериодНачисления","Сумма,КоличествоДней");
	ДанныеУчета.ЗаполнитьЗначения(1, "Коэффициент");
	
	Для Каждого Стр Из ДанныеУчета Цикл
		СтрТЧ = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЧ,Стр);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрТЧ, Объект);	
		//Если ТипЗнч(Объект) = Тип("ДокументОбъект.НачислениеАренднойПлаты") Тогда
		//	ЗаполнитьДанныеПоАгентскимУслугам(СтрТЧ, Объект.Организация, Объект.ОкончаниеПериода);
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура предназначена для автоматического заполнения счета на аренду и начисления арендной платы в случае заполнения не по счетам услугами
// переменной части оплаты
// Параметры:
//		Объект - документ-объект
//		ИмяТабличнойЧасти - имя табличной части, которая будет заполнена данными из выборки
Процедура ПолучитьПеременнуюЧастьОплаты(Объект, ИмяТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтавкиСрезПоследних.Период, ДЕНЬ) КАК ДатаЗаписи,
	|	СтавкиСрезПоследних.Услуга,
	|	СтавкиСрезПоследних.ОбъектАренды,
	|	СтавкиСрезПоследних.Ставка,
	|	СтавкиСрезПоследних.СпособНачисления,
	|	СтавкиСрезПоследних.Площадь
	|ПОМЕСТИТЬ ВТСтавки
	|ИЗ
	|	РегистрСведений.Ставки.СрезПоследних(
	|			&НачалоПериода,
	|			НЕ Услуга.ПостояннаяЧастьОплаты
	|				И Услуга.ОплачиваетсяАвансом
	|				И Договор = &Договор) КАК СтавкиСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СтавкиСрезПоследних.Период, ДЕНЬ), ДЕНЬ, -1),
	|	СтавкиСрезПоследних.Услуга,
	|	СтавкиСрезПоследних.ОбъектАренды,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНачисленияАренднойПлаты.ПустаяСсылка),
	|	0
	|ИЗ
	|	РегистрСведений.Ставки.СрезПоследних(
	|			&НачалоПериода,
	|			НЕ Услуга.ПостояннаяЧастьОплаты
	|				И Услуга.ОплачиваетсяАвансом
	|				И Договор = &Договор) КАК СтавкиСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Ставки.Период, ДЕНЬ),
	|	Ставки.Услуга,
	|	Ставки.ОбъектАренды,
	|	Ставки.Ставка,
	|	Ставки.СпособНачисления,
	|	Ставки.Площадь
	|ИЗ
	|	РегистрСведений.Ставки КАК Ставки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Ставки.Период, ДЕНЬ) > &НачалоПериода
	|	И НАЧАЛОПЕРИОДА(Ставки.Период, ДЕНЬ) <= &КонецПериода
	|	И Ставки.Договор = &Договор
	|	И НЕ Ставки.Услуга.ПостояннаяЧастьОплаты
	|	И Ставки.Услуга.ОплачиваетсяАвансом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавки.ДатаЗаписи,
	|	ВТСтавки.Услуга,
	|	ВТСтавки.ОбъектАренды,
	|	ВТСтавки.Ставка,
	|	ВТСтавки.СпособНачисления,
	|	ВТСтавки.Площадь,
	|	ВТСтавки.ДатаЗаписи КАК ДатаНачала
	|ПОМЕСТИТЬ ВТСтавкиДатаНачала
	|ИЗ
	|	ВТСтавки КАК ВТСтавки
	|ГДЕ
	|	ВТСтавки.ДатаЗаписи <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавки.ДатаЗаписи,
	|	ВТСтавки.Услуга,
	|	ВТСтавки.ОбъектАренды,
	|	ВТСтавки.СпособНачисления,
	|	ВТСтавки.Ставка,
	|	ВТСтавки.Площадь,
	|	ВТСтавки.ДатаЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиДатаНачала.ДатаЗаписи,
	|	ВТСтавкиДатаНачала.Услуга,
	|	ВТСтавкиДатаНачала.ОбъектАренды,
	|	ВТСтавкиДатаНачала.Ставка,
	|	ВТСтавкиДатаНачала.СпособНачисления,
	|	ВТСтавкиДатаНачала.Площадь,
	|	ВТСтавкиДатаНачала.ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиДатаОкончания.ДатаНачала, &КонецПериода)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСтавкиПоПериодам
	|ИЗ
	|	ВТСтавкиДатаНачала КАК ВТСтавкиДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиДатаНачала КАК ВТСтавкиДатаОкончания
	|		ПО ВТСтавкиДатаНачала.ОбъектАренды = ВТСтавкиДатаОкончания.ОбъектАренды
	|			И ВТСтавкиДатаНачала.Услуга = ВТСтавкиДатаОкончания.Услуга
	|			И ВТСтавкиДатаНачала.ДатаНачала < ВТСтавкиДатаОкончания.ДатаНачала
	|			И ВТСтавкиДатаНачала.ДатаЗаписи < ВТСтавкиДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатаНачала.СпособНачисления,
	|	ВТСтавкиДатаНачала.ОбъектАренды,
	|	ВТСтавкиДатаНачала.ДатаЗаписи,
	|	ВТСтавкиДатаНачала.ДатаНачала,
	|	ВТСтавкиДатаНачала.Услуга,
	|	ВТСтавкиДатаНачала.Ставка,
	|	ВТСтавкиДатаНачала.Площадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиПоПериодам.ДатаЗаписи,
	|	ВТСтавкиПоПериодам.Услуга,
	|	ВТСтавкиПоПериодам.ОбъектАренды,
	|	ВТСтавкиПоПериодам.Ставка КАК Ставка,
	|	ВТСтавкиПоПериодам.СпособНачисления,
	|	ВТСтавкиПоПериодам.Площадь,
	|	ВТСтавкиПоПериодам.ДатаНачала КАК ДатаНачала,
	|	ВТСтавкиПоПериодам.ДатаОкончания КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТСтавкиЧислоДатаНачала
	|ИЗ
	|	ВТСтавкиПоПериодам КАК ВТСтавкиПоПериодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи,
	|	ВТСтавкиЧислоДатаНачала.Услуга,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка,
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Площадь,
	|	ВТСтавкиЧислоДатаНачала.ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиЧислоДатаОкончания.ДатаНачала, ВТСтавкиЧислоДатаНачала.ДатаОкончанияПериода)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТГрафикИзмененияСтавок
	|ИЗ
	|	ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаОкончания
	|		ПО ВТСтавкиЧислоДатаНачала.Услуга = ВТСтавкиЧислоДатаОкончания.Услуга
	|			И ВТСтавкиЧислоДатаНачала.ОбъектАренды = ВТСтавкиЧислоДатаОкончания.ОбъектАренды
	|			И ВТСтавкиЧислоДатаНачала.ДатаНачала < ВТСтавкиЧислоДатаОкончания.ДатаНачала
	|			И ВТСтавкиЧислоДатаНачала.ДатаЗаписи = ВТСтавкиЧислоДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Услуга,
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи,
	|	ВТСтавкиЧислоДатаНачала.ДатаНачала,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка,
	|	ВТСтавкиЧислоДатаНачала.Площадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовАренды.Услуга КАК Услуга,
	|	СтатусыОбъектовАренды.Услуга.СтавкаНДС КАК СтавкаНДС,
	|	СтатусыОбъектовАренды.ОбъектАренды КАК ОбъектАренды,
	|	СтатусыОбъектовАренды.Договор КАК Договор,
	|	ГрафикИзмененияСтавок.ДатаНачала КАК Период,
	|	0 КАК Количество,
	|	ГрафикИзмененияСтавок.Ставка,
	|	ГрафикИзмененияСтавок.СпособНачисления,
	|	СтатусыОбъектовАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	СтатусыОбъектовАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды
	|ПОМЕСТИТЬ ВТУслугиВАренде
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовАренды.СрезПоследних(
	|			&МоментВремени,
	|			Договор = &Договор
	|				И НЕ Услуга.ПостояннаяЧастьОплаты
	|				И Услуга.ОплачиваетсяАвансом
	|				И Статус = &ВАренде
	|				И (ДатаНачалаАренды <= &КонецПериода
	|					И ДатаОкончанияАренды >= &НачалоПериода)
	|				И ФормаОплаты = &ФормаОплаты) КАК СтатусыОбъектовАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикИзмененияСтавок КАК ГрафикИзмененияСтавок
	|		ПО (ГрафикИзмененияСтавок.ДатаОкончания = &КонецПериода)
	|			И СтатусыОбъектовАренды.Услуга = ГрафикИзмененияСтавок.Услуга
	|			И СтатусыОбъектовАренды.ОбъектАренды = ГрафикИзмененияСтавок.ОбъектАренды
	|			И (ВЫБОР
	|				КОГДА ГрафикИзмененияСтавок.ДатаНачала < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ ГрафикИзмененияСтавок.ДатаНачала
	|			КОНЕЦ МЕЖДУ СтатусыОбъектовАренды.ДатаНачалаАренды И СтатусыОбъектовАренды.ДатаОкончанияАренды)
	|			И (ГрафикИзмененияСтавок.ДатаОкончания = &КонецПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиВАренде.Услуга КАК Номенклатура,
	|	УслугиВАренде.ОбъектАренды КАК ОбъектАренды,
	|	УслугиВАренде.Ставка КАК СтавкаСпособаНачисления,
	|	УслугиВАренде.Ставка КАК Цена,
	|	УслугиВАренде.Количество КАК Количество,
	|	УслугиВАренде.СпособНачисления КАК СпособНачисления,
	|	УслугиВАренде.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	ВТУслугиВАренде КАК УслугиВАренде";
	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("МоментВремени", Объект.МоментВремени());
	Запрос.УстановитьПараметр("ВАренде", Перечисления.СтатусыОбъектовАренды.ВАренде);
	Запрос.УстановитьПараметр("ФормаОплаты", Объект.ФормаОплаты);
	
 	ДанныеУчета = Запрос.Выполнить().Выгрузить();
	ДанныеУчета.Колонки.Добавить("Коэффициент");
	ДанныеУчета.ЗаполнитьЗначения(1,"Коэффициент");
	
	ДанныеУчета.Колонки.Добавить("ПериодНачисления");
	ДанныеУчета.Колонки.Добавить("Валюта");
	ДанныеУчета.ЗаполнитьЗначения(Константы.ВалютаРегламентированногоУчета.Получить(), "Валюта");

	// Установим цену по специальному курсу
	Для Каждого СтрокаТаб Из ДанныеУчета Цикл
		Если СтрокаТаб.Цена = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для объекта аренды """ + СтрокаТаб.ОбъектАренды + """ по услуге """ + СтрокаТаб.Номенклатура + """ на дату " + Формат(Объект.ОкончаниеПериода, "ДФ=dd.MM.yyyy") + " не задана ставка!");
			Продолжить;
		КонецЕсли;
		Если (не Объект.ВалютаДокумента.Пустая()) и (не СтрокаТаб.Валюта.Пустая()) Тогда
			Если СтрокаТаб.Валюта <> Объект.ВалютаДокумента Тогда
				СтруктураКурсаДок = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса);
				СтруктураКурсаСтроки = ПолучитьКурсВалюты(СтрокаТаб.Валюта, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
				СтрокаТаб.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаб.Цена,
				СтрокаТаб.Валюта, Объект.ВалютаДокумента,
				СтруктураКурсаСтроки.Курс, СтруктураКурсаДок.Курс,
				СтруктураКурсаСтроки.Кратность, СтруктураКурсаДок.Кратность);
			КонецЕсли;															
		КонецЕсли;
		//Если Объект.ДоговорКонтрагента.ВестиВзаиморасчетыПоПериодам Тогда
			СтрокаТаб.ПериодНачисления = НачалоПериода(Объект.НачалоПериода, Объект.ДоговорКонтрагента.Периодичность);
		//Иначе
		//	СтрокаТаб.ПериодНачисления = Объект.НачалоПериода;			
		//КонецЕсли;
	КонецЦикла;

	Для Каждого Стр Из ДанныеУчета Цикл
		СтрТЧ = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЧ,Стр);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Стр, Объект);															 
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрТЧ, Объект);		
		//Если ТипЗнч(Объект) = Тип("ДокументОбъект.НачислениеАренднойПлаты") Тогда
		//	ЗаполнитьДанныеПоАгентскимУслугам(СтрТЧ, Объект.Организация, Объект.ОкончаниеПериода);
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса, Договор) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ДатаКурса", ДатаКурса);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Валюта, КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта) КАК Валюта,
	|	ВЫБОР
	|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета ЕСТЬ NULL 
	|			ТОГДА КурсыВалютСрезПоследних.Курс
	|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.Фиксированный)
	|			ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.Курс
	|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам)
	|			ТОГДА ВЫБОР
	|					КОГДА КурсыВалютСрезПоследних.Курс + КурсыВалютСрезПоследних2.Курс / 2 < КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница
	|						ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница
	|					КОГДА КурсыВалютСрезПоследних.Курс + КурсыВалютСрезПоследних2.Курс / 2 > КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
	|							И КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница > 0
	|						ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
	|					ИНАЧЕ КурсыВалютСрезПоследних.Курс + КурсыВалютСрезПоследних2.Курс / 2
	|				КОНЕЦ
	|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.КурсЦБ)
	|			ТОГДА КурсыВалютСрезПоследних.Курс
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент < КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница
	|					ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница
	|				КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент > КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
	|						И КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница > 0
	|					ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
	|				ИНАЧЕ ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент
	|			КОНЕЦ
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.Фиксированный)
	|			ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.Кратность
	|		ИНАЧЕ ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1)
	|	КОНЕЦ КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалютДляРасчетовПоАренде.СрезПоследних(&ДатаКурса, ДоговорКонтрагента = &Договор) КАК КурсыВалютДляРасчетовПоАрендеСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
	|		ПО (КурсыВалютСрезПоследних.Валюта = КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних2
	|		ПО (КурсыВалютСрезПоследних2.Валюта = КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта2)";
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЕСТЬNULL(КурсыВалютСрезПоследних.Валюта, КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта) КАК Валюта,
	//|	ВЫБОР
	//|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета ЕСТЬ NULL 
	//|			ТОГДА КурсыВалютСрезПоследних.Курс
	//|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.Фиксированный)
	//|			ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.Курс
	//|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам)
	//|			ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.Курс
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент < КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница
	//|					ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница
	//|				КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент > КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
	//|						И КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница > 0
	//|					ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
	//|				ИНАЧЕ ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент
	//|			КОНЕЦ
	//|	КОНЕЦ КАК Курс,
	//|	ВЫБОР
	//|		КОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.Фиксированный)
	//|			ТОГДА КурсыВалютДляРасчетовПоАрендеСрезПоследних.Кратность
	//|		ИНАЧЕ ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1)
	//|	КОНЕЦ КАК Кратность
	//|ИЗ
	//|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовПоАренде.СрезПоследних(
	//|				&ДатаКурса,
	//|				ДоговорКонтрагента = &Договор
	//|					И Валюта = &Валюта) КАК КурсыВалютДляРасчетовПоАрендеСрезПоследних
	//|		ПО КурсыВалютСрезПоследних.Валюта = КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовПоАренде.СрезПоследних(
	//|				&ДатаКурса,
	//|				ДоговорКонтрагента = &Договор
	//|					И Валюта2 = &Валюта) КАК КурсыВалютДляРасчетовПоАрендеСрезПоследних2
	//|		ПО КурсыВалютСрезПоследних.Валюта = КурсыВалютДляРасчетовПоАрендеСрезПоследних2.Валюта2";
	
	СтруктураКурса = Новый Структура("Курс, Кратность");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураКурса, Выборка);
	Иначе
		СтруктураКурса.Курс = 1;
		СтруктураКурса.Кратность = 1;
	КонецЕсли;
	
	Возврат СтруктураКурса;

КонецФункции // ПолучитьКурсВалюты()   

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалютыПоДокументу(ДатаКурса, Документ) Экспорт

	Если (Документ.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.ПустаяСсылка())
		ИЛИ (Документ.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ) Тогда
		пКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Документ.ВалютаСпособаНачисления)).Курс;
	ИначеЕсли Документ.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
		пКурс = Документ.Курс;
	ИначеЕсли Документ.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам Тогда
		пКурсВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Документ.ВалютаСпособаНачисления)).Курс;
		пКурсВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Документ.Валюта2СпособаНачисления)).Курс;
		ТекКурс = (пКурсВалюты1 + пКурсВалюты2) / 2;
		
		Если ТекКурс < Документ.НижняяГраница Тогда
			пКурс = Документ.НижняяГраница;
		ИначеЕсли (ТекКурс > Документ.ВерхняяГраница)
				И (Документ.ВерхняяГраница > 0) Тогда
			пКурс = Документ.ВерхняяГраница;
		Иначе
			пКурс = ТекКурс;
		КонецЕсли;
		
	ИначеЕсли Документ.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
		Если Документ.Курс * Документ.Коэффициент < Документ.НижняяГраница Тогда
			пКурс = Документ.НижняяГраница;
		ИначеЕсли (Документ.Курс * Документ.Коэффициент > Документ.ВерхняяГраница)
			И (Документ.ВерхняяГраница > 0) Тогда
			пКурс = Документ.ВерхняяГраница;
		Иначе
			пКурс = Документ.Курс * Документ.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Курс, Кратность", пКурс , 1);

КонецФункции // ПолучитьКурсВалюты()

Функция ПолучитьКурсВалютыПоДоговору(ДатаКурса, СтруктураКурса) Экспорт

	Если (СтруктураКурса.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.ПустаяСсылка())
			ИЛИ (СтруктураКурса.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ) Тогда
		пКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", СтруктураКурса.Валюта)).Курс;
	ИначеЕсли СтруктураКурса.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
		пКурс = СтруктураКурса.Курс;
	ИначеЕсли СтруктураКурса.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам Тогда
		пКурсВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", СтруктураКурса.Валюта)).Курс;
		пКурсВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", СтруктураКурса.Валюта2)).Курс;
		ТекКурс = (пКурсВалюты1 + пКурсВалюты2) / 2;
		
		Если ТекКурс < СтруктураКурса.НижняяГраница Тогда
			пКурс = СтруктураКурса.НижняяГраница;
		ИначеЕсли (ТекКурс > СтруктураКурса.ВерхняяГраница)
				И (СтруктураКурса.ВерхняяГраница > 0) Тогда
			пКурс = СтруктураКурса.ВерхняяГраница;
		Иначе
			пКурс = ТекКурс;
		КонецЕсли;
		
	ИначеЕсли СтруктураКурса.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
		ТекКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", СтруктураКурса.Валюта)).Курс;
		Если ТекКурс < СтруктураКурса.НижняяГраница Тогда
			пКурс = СтруктураКурса.НижняяГраница;
		ИначеЕсли (ТекКурс > СтруктураКурса.ВерхняяГраница)
				И (СтруктураКурса.ВерхняяГраница > 0) Тогда
			пКурс = СтруктураКурса.ВерхняяГраница;
		Иначе
			пКурс = ТекКурс;
		КонецЕсли;
		//Если СтруктураКурса.Курс * СтруктураКурса.Коэффициент < СтруктураКурса.НижняяГраница Тогда
		//	пКурс = СтруктураКурса.НижняяГраница;
		//ИначеЕсли (СтруктураКурса.Курс * СтруктураКурса.Коэффициент > СтруктураКурса.ВерхняяГраница)
		//	И (СтруктураКурса.ВерхняяГраница > 0) Тогда
		//	пКурс = СтруктураКурса.ВерхняяГраница;
		//Иначе
		//	пКурс = СтруктураКурса.Курс * СтруктураКурса.Коэффициент;
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Курс, Кратность", пКурс , 1);

КонецФункции // ПолучитьКурсВалюты()

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалютыДепозитаПоДокументу(ДатаКурса, Документ) Экспорт

	Если (Документ.СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.ПустаяСсылка())
		ИЛИ (Документ.СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.СуммаОплатыПоследнегоПериодаАренды) Тогда
		пКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Документ.ВалютаДепозита)).Курс;
	ИначеЕсли (Документ.СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.ФиксированнойСуммой) Тогда
		пКурс = 1;
	ИначеЕсли (Документ.СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.СуммаДвухКурсовВалютДеленнаяПололам) Тогда
		пКурсВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Документ.ВалютаДепозита)).Курс;
		пКурсВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Документ.ВалютаДепозита2)).Курс;
		пКурс = (пКурсВалюты1 + пКурсВалюты2) / 2;
	КонецЕсли;
	
	Возврат Новый Структура("Курс, Кратность", пКурс , 1);

КонецФункции // ПолучитьКурсВалюты()

Функция НачалоПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(Дата);
	Иначе
		Возврат НачалоДня(Дата);
	КонецЕсли;	
	
КонецФункции

Функция КонецПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат КонецДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат КонецГода(Дата);
	Иначе
		Возврат КонецДня(Дата);
	КонецЕсли;	
	
КонецФункции

// РаспределениеПоТабличнойЧасти4_4(Источник, КолонкаБаза, КолонкаСумма, СуммаКРаспределению)
//
// Распределение сумм по таблице значений (денег) - 2 знака после запятой
//
Процедура РаспределениеПоТабличнойЧасти4_4(Источник, КолонкаБаза, КолонкаСумма, СуммаКРаспределению) Экспорт
	
	// Проверим возможность распределения
	Если Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если (Найти(НРег(ТипЗнч(Источник)), "табличная часть") > 0)
			ИЛИ (Найти(НРег(ТипЗнч(Источник)), "tabular section") > 0) Тогда
		ТаблицаЗначений = Источник.Выгрузить(, КолонкаБаза);
	ИначеЕсли (Найти(НРег(ТипЗнч(Источник)), "таблица значений")) > 0
			ИЛИ (Найти(НРег(ТипЗнч(Источник)), "values table") > 0) Тогда
		ТаблицаЗначений = Источник.Скопировать(, КолонкаБаза);
	ИначеЕсли (Найти(НРег(ТипЗнч(Источник)), "дерева значений") > 0)
		ИЛИ (Найти(НРег(ТипЗнч(Источник)), "value tree") > 0) Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить(КолонкаБаза);
		Для Каждого Строка Из Источник Цикл
			НСтрока = ТаблицаЗначений.Добавить();
			НСтрока[КолонкаБаза] = Строка[КолонкаБаза];
		КонецЦикла;
	КонецЕсли;
	БазаРаспределения = ТаблицаЗначений.Итог(КолонкаБаза);
	Если БазаРаспределения = 0 Тогда
		ТаблицаЗначений.ЗаполнитьЗначения(100, КолонкаБаза);
		БазаРаспределения = ТаблицаЗначений.Итог(КолонкаБаза);
		ОбнулитьБазу = Истина;
	Иначе
		ОбнулитьБазу = Ложь;
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("СортировкаПоОтклонению", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 4)));
	ТаблицаЗначений.Колонки.Добавить("СуммаРаспределенная", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 4)));
	МассивСтрок = ТаблицаЗначений.НайтиСтроки(Новый Структура("СуммаРаспределенная", 0));

	//Если БазаРаспределения = 0 ИЛИ СуммаКРаспределению = 0 Тогда
	//	ТаблицаЗначений.ЗаполнитьЗначения(0, "СуммаРаспределенная");
	//Иначе	
		// Распределение по коэффициенту
		//+++АК SaMi 22.06.2015 		
		//Коэффициент = СуммаКРаспределению / БазаРаспределения;
		Сч = 1;
		Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл
			СтрокаТаблицыЗначений.СуммаРаспределенная = Окр(СуммаКРаспределению*Сч/ТаблицаЗначений.Количество(), 2) - ТаблицаЗначений.Итог("СуммаРаспределенная");
			
			//СуммаПоСтрокеБезОкругления = СтрокаТаблицыЗначений[0] * Коэффициент;
			//СуммаПоСтроке = Окр(СуммаПоСтрокеБезОкругления, 2);
			//СтрокаТаблицыЗначений[2] = СуммаПоСтроке;
			//СтрокаТаблицыЗначений[1] = СуммаПоСтроке - СуммаПоСтрокеБезОкругления;
			Сч = Сч+1;
		КонецЦикла;
		
		//// Проверка остатка
		//КорректировкаСтрок = СуммаКРаспределению - ТаблицаЗначений.Итог("СуммаРаспределенная");
		//Если КорректировкаСтрок < 0 Тогда
		//	// Заполним ТаблицаОтражения
		//	Если Найти(ТипЗнч(ТаблицаЗначений), "табличная часть") > 0 Тогда
		//		ТаблицаОтражения = ТаблицаЗначений.Выгрузить(, КолонкаБаза + ", СортировкаПоОтклонению");
		//	Иначе
		//		ТаблицаОтражения = ТаблицаЗначений.Скопировать(, КолонкаБаза + ", СортировкаПоОтклонению");
		//	КонецЕсли;
		//	ТаблицаОтражения.Колонки.Добавить("СтрокаТЗ");
		//	ТаблицаОтражения.ЗагрузитьКолонку(МассивСтрок, "СтрокаТЗ");
		//	ТаблицаОтражения.Сортировать("СортировкаПоОтклонению Убыв");
		//	
		//	Для Индекс = 0 По -1 - КорректировкаСтрок * 100 Цикл
		//		СтрокаТаблицыЗначений = ТаблицаОтражения[Индекс][2];
		//		СтрокаТаблицыЗначений[2] = СтрокаТаблицыЗначений[2] - 0.01;
		//	КонецЦикла;
		//ИначеЕсли КорректировкаСтрок > 0 Тогда
		//	// Заполним ТаблицаОтражения
		//	Если Найти(ТипЗнч(ТаблицаЗначений), "табличная часть") > 0 Тогда
		//		ТаблицаОтражения = ТаблицаЗначений.Выгрузить(, КолонкаБаза + ", СортировкаПоОтклонению");
		//	Иначе
		//		ТаблицаОтражения = ТаблицаЗначений.Скопировать(, КолонкаБаза + ", СортировкаПоОтклонению");
		//	КонецЕсли;
		//	ТаблицаОтражения.Колонки.Добавить("СтрокаТЗ");
		//	ТаблицаОтражения.ЗагрузитьКолонку(МассивСтрок, "СтрокаТЗ");
		//	ТаблицаОтражения.Сортировать("СортировкаПоОтклонению");
		//	
		//	Для Индекс = 0 По КорректировкаСтрок * 100 - 1 Цикл
		//		СтрокаТаблицыЗначений = ТаблицаОтражения[Индекс][2];
		//		СтрокаТаблицыЗначений[2] = СтрокаТаблицыЗначений[2] + 0.01;
		//	КонецЦикла;
		//КонецЕсли;
	//КонецЕсли;
	//---АК SaMi  22.06.2015 
	
	Если ОбнулитьБазу Тогда
		ТаблицаЗначений.ЗаполнитьЗначения(0, КолонкаБаза);
	КонецЕсли;
	
	Источник.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаРаспределенная"), КолонкаСумма);
	
КонецПроцедуры

Функция ПолучитьСуммыАрендыПоДням(ЗНАЧ пДатаНачала, ЗНАЧ пДатаОкончания, пДокумент, ЗНАЧ пСпособНачисления, ЗНАЧ пКоличество, ЗНАЧ пСтавка, ЗНАЧ Валюта = Неопределено) Экспорт
	
		
	Если Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		пСтавкаВал = 0;
		
	ИначеЕсли ЗначениеЗаполнено(Валюта) Тогда
		пСтавкаВал = пСтавка;
		пСтавка = пСтавка * РегистрыСведений.КурсыВалют.ПолучитьПоследнее(пДатаНачала, Новый Структура("Валюта", Валюта)).Курс;
		
	ИначеЕсли (пДокумент.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ)
			И (пДокумент.ВалютаСпособаНачисления = Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		пСтавкаВал = 0;
		
	Иначе
		пСтавкаВал = пСтавка;
		пСтавка = пСтавка * ПолучитьКурсВалютыПоДокументу(пДатаНачала, пДокумент).Курс;
	КонецЕсли;
	
	ДЗПериоды = РазложитьПериодПоПериодичности(пДатаНачала, пДатаОкончания, пСпособНачисления.ПериодНачисления);
	ДЗПериоды.Колонки.Добавить("Сумма");
	ДЗПериоды.Колонки.Добавить("СуммаВал");
	Для Каждого СтрокаПериод Из ДЗПериоды.Строки Цикл                                                              
		пВсегоДнейВПериоде = КонецПериодаРазвернутый(СтрокаПериод.ДатаОкончания, пСпособНачисления.ПериодНачисления) - НачалоПериода(СтрокаПериод.ДатаНачала, пСпособНачисления.ПериодНачисления);
		пДнейВПериоде = СтрокаПериод.ДатаОкончания - СтрокаПериод.ДатаНачала;
		пКоэффициент = (пДнейВПериоде+1) * 100 / (пВсегоДнейВПериоде+1);
		
		ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(СтрокаПериод.Строки, "Сумма", "Сумма", пСтавка * пКоэффициент / 100);
		ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(СтрокаПериод.Строки, "СуммаВал", "СуммаВал", пСтавкаВал * пКоэффициент / 100);		
	КонецЦикла;
	
	ТЗДни = Новый ТаблицаЗначений;
	ТЗДни.Колонки.Добавить("Дата");
	ТЗДни.Колонки.Добавить("Сумма");
	ТЗДни.Колонки.Добавить("СуммаВал");
	Для Каждого СтрокаПериод Из ДЗПериоды.Строки Цикл
		Для Каждого СтрокаДень Из СтрокаПериод.Строки Цикл
			ЗаполнитьЗначенияСвойств(ТЗДни.Добавить(), СтрокаДень);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗДни;
КонецФункции

Функция РазложитьПериодПоПериодичности(пПериодНачало, пПериодКонец, пПериодичность) Экспорт
	ДЗПериоды = Новый ДеревоЗначений;
	ДЗПериоды.Колонки.Добавить("ДатаНачала");
	ДЗПериоды.Колонки.Добавить("ДатаОкончания");
	ДЗПериоды.Колонки.Добавить("Дата");
	
	пТекДата = пПериодНачало;
    Пока пТекДата < пПериодКонец Цикл
        Строка = ДЗПериоды.Строки.Добавить();
        Строка.ДатаНачала = пТекДата;
        Строка.ДатаОкончания = Мин(КонецДня(пПериодКонец), КонецПериодаРазвернутый(пТекДата, пПериодичность));
        пТекДата = Строка.ДатаОкончания + 1;
	КонецЦикла;
	
	Для Каждого СтрокаПериод Из ДЗПериоды.Строки Цикл
		пТекДата = СтрокаПериод.ДатаНачала;
		Пока пТекДата < СтрокаПериод.ДатаОкончания Цикл
			НСтрока = СтрокаПериод.Строки.Добавить();
			НСтрока.Дата = пТекДата;
			
			пТекДата = пТекДата + 86400;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат ДЗПериоды;
КонецФункции

Функция КонецПериодаРазвернутый(пДата, пПериодичность) Экспорт
	Если пПериодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца(пДата);
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала(пДата);
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат КонецМесяца(Дата(Год(пДата), 6, 1));
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Год Тогда
		Возврат КонецГода(пДата);
	ИначеЕсли пПериодичность = Перечисления.Периодичность.День Тогда
		Возврат КонецДня(пДата);
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели(пДата);
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Декада Тогда
    	Если День(пДата) < 11 Тогда
        	Возврат КонецДня(Дата(Год(пДата), Месяц(пДата), 10));
    	ИначеЕсли День(пДата) < 21 Тогда
    		Возврат КонецДня(Дата(Год(пДата), Месяц(пДата), 30));
    	Иначе
       		Возврат КонецМесяца(пДата);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьТЗДоговорыПоДням(пОрганизация, пКонтрагент, пСтруктурнаяЕдиница, пФормаОплаты, пНачалоПериода, пКонецПериода) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", пОрганизация);
	Запрос.УстановитьПараметр("Контрагент", пКонтрагент);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", пСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ФормаОплаты", пФормаОплаты);
	Запрос.УстановитьПараметр("НачалоПериода", пНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", пКонецПериода);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	               |ПОМЕСТИТЬ ВТ_Периоды
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	               |ГДЕ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &НачалоПериода
	               |	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &КонецПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВложенныйЗапрос.ДатаКалендаря,
	               |	ВложенныйЗапрос.Договор,
	               |	ВложенныйЗапрос.Услуга,
	               |	ВложенныйЗапрос.ФормаОплаты,
	               |	ВложенныйЗапрос.СтавкаНДС,
	               |	ВложенныйЗапрос.СпособНачисления,
	               |	СУММА(ПланируемыеПлатежиПоДоговорамАренды.Сумма) КАК СуммаПлан,
	               |	ВложенныйЗапрос.Ставка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_Периоды.ДатаКалендаря КАК ДатаКалендаря,
	               |		ПланируемыеПлатежиПоДоговорамАренды.Договор КАК Договор,
	               |		ПланируемыеПлатежиПоДоговорамАренды.Услуга КАК Услуга,
	               |		ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты КАК ФормаОплаты,
	               |		МАКСИМУМ(ПланируемыеПлатежиПоДоговорамАренды.Период) КАК Период,
	               |		ПланируемыеПлатежиПоДоговорамАренды.СтавкаНДС КАК СтавкаНДС,
	               |		ПланируемыеПлатежиПоДоговорамАренды.СпособНачисления КАК СпособНачисления,
	               |		ПланируемыеПлатежиПоДоговорамАренды.Ставка КАК Ставка
	               |	ИЗ
	               |		ВТ_Периоды КАК ВТ_Периоды
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				ПланируемыеПлатежиПоДоговорамАренды.Договор КАК Договор,
	               |				ПланируемыеПлатежиПоДоговорамАренды.Услуга КАК Услуга,
	               |				ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты КАК ФормаОплаты,
	               |				ПланируемыеПлатежиПоДоговорамАренды.Период КАК Период,
	               |				ПланируемыеПлатежиПоДоговорамАренды.Дата КАК Дата,
	               |				ПланируемыеПлатежиПоДоговорамАренды.СтавкаНДС КАК СтавкаНДС,
	               |				ПланируемыеПлатежиПоДоговорамАренды.СпособНачисления КАК СпособНачисления,
	               |				ПланируемыеПлатежиПоДоговорамАренды.Ставка КАК Ставка
	               |			ИЗ
	               |				РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды КАК ПланируемыеПлатежиПоДоговорамАренды
	               |			ГДЕ
	               |				ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты = &ФормаОплаты
	               |				И ПланируемыеПлатежиПоДоговорамАренды.Контрагент = &Контрагент
	               |				И ПланируемыеПлатежиПоДоговорамАренды.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	               |				И ПланируемыеПлатежиПоДоговорамАренды.Организация = &Организация
	               |				И ПланируемыеПлатежиПоДоговорамАренды.Дата >= &НачалоПериода
	               |				И ПланируемыеПлатежиПоДоговорамАренды.Дата <= &КонецПериода) КАК ПланируемыеПлатежиПоДоговорамАренды
	               |			ПО ВТ_Периоды.ДатаКалендаря >= ПланируемыеПлатежиПоДоговорамАренды.Период
	               |				И ВТ_Периоды.ДатаКалендаря = ПланируемыеПлатежиПоДоговорамАренды.Дата
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПланируемыеПлатежиПоДоговорамАренды.Договор,
	               |		ПланируемыеПлатежиПоДоговорамАренды.Услуга,
	               |		ВТ_Периоды.ДатаКалендаря,
	               |		ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты,
	               |		ПланируемыеПлатежиПоДоговорамАренды.СтавкаНДС,
	               |		ПланируемыеПлатежиПоДоговорамАренды.СпособНачисления,
	               |		ПланируемыеПлатежиПоДоговорамАренды.Ставка) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПланируемыеПлатежиПоДоговорамАренды.Период КАК Период,
	               |			ПланируемыеПлатежиПоДоговорамАренды.Договор КАК Договор,
	               |			ПланируемыеПлатежиПоДоговорамАренды.Услуга КАК Услуга,
	               |			ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты КАК ФормаОплаты,
	               |			ПланируемыеПлатежиПоДоговорамАренды.Сумма КАК Сумма,
	               |			ПланируемыеПлатежиПоДоговорамАренды.Дата КАК Дата,
	               |			ПланируемыеПлатежиПоДоговорамАренды.СтавкаНДС КАК СтавкаНДС,
	               |			ПланируемыеПлатежиПоДоговорамАренды.СпособНачисления КАК СпособНачисления,
	               |			ПланируемыеПлатежиПоДоговорамАренды.Ставка КАК Ставка
	               |		ИЗ
	               |			РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды КАК ПланируемыеПлатежиПоДоговорамАренды
	               |		ГДЕ
	               |			ПланируемыеПлатежиПоДоговорамАренды.Организация = &Организация
	               |			И ПланируемыеПлатежиПоДоговорамАренды.Контрагент = &Контрагент
	               |			И ПланируемыеПлатежиПоДоговорамАренды.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	               |			И ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты = &ФормаОплаты
	               |			И ПланируемыеПлатежиПоДоговорамАренды.Дата >= &НачалоПериода
	               |			И ПланируемыеПлатежиПоДоговорамАренды.Дата <= &КонецПериода) КАК ПланируемыеПлатежиПоДоговорамАренды
	               |		ПО ВложенныйЗапрос.Период = ПланируемыеПлатежиПоДоговорамАренды.Период
	               |			И ВложенныйЗапрос.Договор = ПланируемыеПлатежиПоДоговорамАренды.Договор
	               |			И ВложенныйЗапрос.Услуга = ПланируемыеПлатежиПоДоговорамАренды.Услуга
	               |			И ВложенныйЗапрос.ФормаОплаты = ПланируемыеПлатежиПоДоговорамАренды.ФормаОплаты
	               |			И ВложенныйЗапрос.ДатаКалендаря = ПланируемыеПлатежиПоДоговорамАренды.Дата
	               |			И ВложенныйЗапрос.СтавкаНДС = ПланируемыеПлатежиПоДоговорамАренды.СтавкаНДС
	               |			И ВложенныйЗапрос.СпособНачисления = ПланируемыеПлатежиПоДоговорамАренды.СпособНачисления
	               |			И ВложенныйЗапрос.Ставка = ПланируемыеПлатежиПоДоговорамАренды.Ставка
	               |ГДЕ
	               |	НЕ ВложенныйЗапрос.Договор ЕСТЬ NULL 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ДатаКалендаря,
	               |	ВложенныйЗапрос.Договор,
	               |	ВложенныйЗапрос.Услуга,
	               |	ВложенныйЗапрос.ФормаОплаты,
	               |	ВложенныйЗапрос.СтавкаНДС,
	               |	ВложенныйЗапрос.СпособНачисления,
	               |	ВложенныйЗапрос.Ставка";
	 Возврат Запрос.Выполнить().Выгрузить();
 КонецФункции
 
Функция РаспределитьТаблицуПоДням(пТЗНачисления, пНачалоПериода, пКонецПериода) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", пНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", пКонецПериода);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	               |ГДЕ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &НачалоПериода
	               |	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &КонецПериода";
	ТЗДни = Запрос.Выполнить().Выгрузить();
	
	ТЗРез = пТЗНачисления.СкопироватьКолонки();
	ТЗРез.Колонки.Добавить("ДатаКалендаря");
	Для Каждого СтрокаНачисление Из пТЗНачисления Цикл
		ТЗВрем = пТЗНачисления.СкопироватьКолонки();
		ТЗВрем.Колонки.Добавить("ДатаКалендаря");
		Для Каждого СтрокаДень Из ТЗДни Цикл
			НСтрока = ТЗВрем.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока, СтрокаНачисление);
			ЗаполнитьЗначенияСвойств(НСтрока, СтрокаДень);
		КонецЦикла;
		ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗВрем, "Сумма", "Сумма", СтрокаНачисление.Сумма);
		Для Каждого СтрокаВрем Из ТЗВрем Цикл
			ЗаполнитьЗначенияСвойств(ТЗРез.Добавить(), СтрокаВрем);	
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗРез;
КонецФункции

//Процедура ЗаполнитьДанныеПоАгентскимУслугам(СтрокаТабличнойЧасти, Организация, Дата = '00010101') Экспорт
//	
//	ДанныеСобственника = ОбщиеПроцедуры.ПолучитьСобственника(СтрокаТабличнойЧасти.ОбъектАренды, Дата);
//	Если Не СтрокаТабличнойЧасти.Номенклатура.АгентскаяСхема ИЛИ Не ДанныеСобственника.АгентскаяСхема Тогда
//		СтрокаТабличнойЧасти.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
//		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
//		СтрокаТабличнойЧасти.СчетРасчетов = ПланыСчетов.Финансовый.ПустаяСсылка();
//	Иначе
//		СтрокаТабличнойЧасти.Контрагент = ДанныеСобственника.Собственник;
//		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
//			СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
//		КонецЕсли;
//		Если ЗначениеЗаполнено(ДанныеСобственника.ДоговорКонтрагента) И ДанныеСобственника.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
//			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДанныеСобственника.ДоговорКонтрагента;
//			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
//			СтрокаТабличнойЧасти.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
//		Иначе
//			Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Контрагент, Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
//				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
//				СтрокаТабличнойЧасти.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура ПроверитьЛимитыПоАрендеЗаявкиИОплаты(ДокументСсылка, ЗаявкаНаРасходованиеСредств = Неопределено, СуммаДокумента, ТорговаяТочка, ТипАренднойПлаты, ПериодАренды, Отказ) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств"));
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(20);
	
	ТаблицаДокумента = Новый ТаблицаЗначений;	
	ТаблицаДокумента.Колонки.Добавить("ЗаявкаНаРасходованиеСредств"	, Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеСредств"));
	ТаблицаДокумента.Колонки.Добавить("Сумма"						, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДокумента.Колонки.Добавить("ЭтоОплата"					, Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		Если ДокументСсылка.Пустая() Тогда
			НоваяСтрока.ЗаявкаНаРасходованиеСредств = "НоваяЗаявка";
		Иначе
			НоваяСтрока.ЗаявкаНаРасходованиеСредств = ДокументСсылка;
		КонецЕсли; 
		НоваяСтрока.ЭтоОплата =  Ложь;
	Иначе 
		НоваяСтрока.ЭтоОплата =  Истина;				
	КонецЕсли; 
	НоваяСтрока.Сумма =  СуммаДокумента;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ЗаявкаНаРасходованиеСредств,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.ЭтоОплата
	|ПОМЕСТИТЬ ВТ_Документ
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.СуммаДокумента
	|ПОМЕСТИТЬ ВТ_Оплаты
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ВидОперации = ВЫБОР
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
	|		КОНЕЦ
	|	И РасходИзБанка.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница = &ТорговаяТочка
	|	И РасходИзБанка.ПериодРегистрации = &Период
	|	И РасходИзБанка.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-ПоступлениеВБанк.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.Проведен
	|	И ПоступлениеВБанк.ВидОперации = ВЫБОР
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)
	|		КОНЕЦ
	|	И ПоступлениеВБанк.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница = &ТорговаяТочка
	|	И ПоступлениеВБанк.ПериодРегистрации = &Период
	|	И ПоступлениеВБанк.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации = ВЫБОР
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
	|		КОНЕЦ
	|	И РасходИзКассы.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница = &ТорговаяТочка
	|	И РасходИзКассы.ПериодРегистрации = &Период
	|	И РасходИзКассы.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗачетОплатыАрендыЗачетДепозита.Сумма
	|ИЗ
	|	Документ.ЗачетОплатыАренды.ЗачетДепозита КАК ЗачетОплатыАрендыЗачетДепозита
	|ГДЕ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.Проведен
	|	И ЗачетОплатыАрендыЗачетДепозита.Ссылка.ТорговаяТочка = &ТорговаяТочка
	|	И ЗачетОплатыАрендыЗачетДепозита.ТипАренднойПлаты = &ТипАренднойПлаты
	|	И ЗачетОплатыАрендыЗачетДепозита.ПериодРегистрации = &Период
	|	И ЗачетОплатыАрендыЗачетДепозита.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Документ.Сумма
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|ГДЕ
	|	ВТ_Документ.ЭтоОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка КАК ЗаявкаНаРасходованиеСредств,
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Заявки
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.Проведен
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка <> &Ссылка
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.ТипАренднойПлаты = &ТипАренднойПлаты
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Период = &Период
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.ТорговаяТочка = &ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Документ.ЗаявкаНаРасходованиеСредств,
	|	ВТ_Документ.Сумма
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|ГДЕ
	|	НЕ ВТ_Документ.ЭтоОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Оплаты.СуммаДокумента) КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТ_ЗаявкиИОплаты
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВТ_Заявки.Сумма)
	|ИЗ
	|	ВТ_Заявки КАК ВТ_Заявки
	|ГДЕ
	|	НЕ ВТ_Заявки.ЗаявкаНаРасходованиеСредств В
	|				(ВЫБРАТЬ
	|					РасходИзБанка.ЗаявкаНаРасходованиеСредств
	|				ИЗ
	|					Документ.РасходИзБанка КАК РасходИзБанка
	|				ГДЕ
	|					РасходИзБанка.Проведен)
	|	И НЕ ВТ_Заявки.ЗаявкаНаРасходованиеСредств В
	|				(ВЫБРАТЬ
	|					РасходИзКассы.ЗаявкаНаРасходованиеСредств
	|				ИЗ
	|					Документ.РасходИзКассы КАК РасходИзКассы
	|				ГДЕ
	|					РасходИзКассы.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЛимитыАренднойПлатыСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_МеткаПоследнегоИзменения
	|ИЗ
	|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
	|			,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И МесяцАренды <= &Период) КАК ЛимитыАренднойПлатыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Лимит,
	|	ЕСТЬNULL(СУММА(ВТ_ЗаявкиИОплаты.СуммаДокумента), 0) КАК Сумма
	|ИЗ
	|	ВТ_ЗаявкиИОплаты КАК ВТ_ЗаявкиИОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПостоянная
	|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПеременная
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(, ТорговаяТочка = &ТорговаяТочка) КАК ЛимитыАренднойПлатыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МеткаПоследнегоИзменения КАК ВТ_МеткаПоследнегоИзменения
	|		ПО ЛимитыАренднойПлатыСрезПоследних.Период = ВТ_МеткаПоследнегоИзменения.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|			ТОГДА ДопустимыеПревышенияЛимитовПоАренде.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрСведений.ДопустимыеПревышенияЛимитовПоАренде КАК ДопустимыеПревышенияЛимитовПоАренде
	|ГДЕ
	|	ДопустимыеПревышенияЛимитовПоАренде.ТипТорговойТочки = &ТипТорговойТочки
	|ИТОГИ
	|	ЕСТЬNULL(СУММА(Лимит), 0) КАК Лимит,
	|	ЕСТЬNULL(СУММА(Сумма), 0) КАК Сумма
	|ПО
	|	ОБЩИЕ";
							  
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка"			, ДокументСсылка);
	СтруктураПараметров.Вставить("ТипАренднойПлаты"	, ТипАренднойПлаты);
	СтруктураПараметров.Вставить("Период"			, ПериодАренды);
	СтруктураПараметров.Вставить("ТорговаяТочка"	, ТорговаяТочка);
	СтруктураПараметров.Вставить("ТипТорговойТочки"	, ТорговаяТочка.ТипРозничнойТочки);	
	СтруктураПараметров.Вставить("ТаблицаДокумента"	, ТаблицаДокумента);	
	
	СтруктураПараметров.Вставить("Текст"			, ТекстЗапроса);
	
	Выборка = ПолныеПрава.ВыполнитьЗапрос(СтруктураПараметров).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СуммаОплатИЗаявок = 0;
	Лимит = 0;
	
	Если Выборка.Следующий() Тогда
		СуммаОплатИЗаявок = Выборка.Сумма;
		Лимит = Выборка.Лимит;
		//+++АК GEYV 12.05.2015 Лимит переменной части расчитывается на основание показаний счетчика
		Если НачалоМесяца(Константы.ДатаКонтроляПеременнойЧастиПоСчетчикам.Получить()) >= НачалоМесяца(ПериодАренды)
				И ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
			
			Лимит = ПолучитьСуммуПоказанийСчетчика(ТорговаяТочка,ПериодАренды);	
			Если СуммаОплатИЗаявок  > Лимит   Тогда
				ОбщегоНазначения.СообщитьОбОшибке("По торговой точке <" + ТорговаяТочка + "> превышен лимит оплаты по аренде за " +
													Формат(ПериодАренды, "ДФ='ММММ гггг'") + " !" + Символы.ПС +
													"Сумма произведенных и запланированных оплат с учетом документа составляет: " +
													Формат(СуммаОплатИЗаявок , "ЧДЦ=2") + " руб. Лимит оплаты: " + Формат(Лимит, "ЧДЦ=2; ЧН=") + " руб." , Отказ);
				Возврат;
			КонецЕсли;
				
		КонецЕсли;
		//---АК
	КонецЕсли;
		
	Если СуммаОплатИЗаявок > Лимит Тогда
		
		// Зачет депозита позволяется при нулевом лимите, но не более чем на размер последнего ненулевого лимита
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗачетОплатыАренды")
				И Лимит = 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТипАренднойПлаты", ТипАренднойПлаты);
			Запрос.УстановитьПараметр("Период"			, ПериодАренды);
			Запрос.УстановитьПараметр("ТорговаяТочка"	, ТорговаяТочка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЛимитыАренднойПлатыСрезПоследних.Период) КАК Период
			|ПОМЕСТИТЬ ВТ_МеткаПоследнегоИзменения
			|ИЗ
			|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
			|			,
			|			ТорговаяТочка = &ТорговаяТочка
			|				И МесяцАренды <= &Период
			|				И ВЫБОР
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
			|						ТОГДА СуммаАрендаПостоянная
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
			|						ТОГДА СуммаАрендаПеременная
			|				КОНЕЦ <> 0) КАК ЛимитыАренднойПлатыСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
			|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПостоянная
			|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
			|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПеременная
			|	КОНЕЦ КАК Лимит
			|ИЗ
			|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
			|			,
			|			ТорговаяТочка = &ТорговаяТочка
			|				И МесяцАренды <= &Период
			|				И ВЫБОР
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
			|						ТОГДА СуммаАрендаПостоянная
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
			|						ТОГДА СуммаАрендаПеременная
			|				КОНЕЦ <> 0) КАК ЛимитыАренднойПлатыСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МеткаПоследнегоИзменения КАК ВТ_МеткаПоследнегоИзменения
			|		ПО ЛимитыАренднойПлатыСрезПоследних.Период = ВТ_МеткаПоследнегоИзменения.Период";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			СуммаПоследнегоЛимита = 0;
			
			Если Выборка.Следующий() Тогда
				СуммаПоследнегоЛимита = Выборка.Лимит;
			КонецЕсли; 
			
			Если  СуммаОплатИЗаявок <= СуммаПоследнегоЛимита Тогда
				Возврат;
			КонецЕсли; 

		КонецЕсли; 
		
		ОбщегоНазначения.СообщитьОбОшибке("По торговой точке <" + ТорговаяТочка + "> превышен лимит оплаты по аренде за " +
											Формат(ПериодАренды, "ДФ='ММММ гггг'") + " !" + Символы.ПС +
											"Сумма произведенных и запланированных оплат с учетом документа составляет: " +
											Формат(СуммаОплатИЗаявок , "ЧДЦ=2") + " руб. Лимит оплаты: " + Формат(Лимит, "ЧДЦ=2; ЧН=") + " руб." , Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЛимитыПоАрендеЗаявкаНаУслугиМатериалы(ДокументСсылка, Отказ) Экспорт
	
	Если НЕ (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю
				ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю
				//+++АК POZM 2018.02.13 ИП-00017693 
				ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету
				//---АК POZM 
				) Тогда
		Возврат;
	КонецЕсли;
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы"));
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(20);
	
	ТаблицаДокумента = Новый ТаблицаЗначений;	
	ТаблицаДокумента.Колонки.Добавить("ЗаявкаНаУслугиМатериалы"	, Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаУслугиМатериалы"));
	ТаблицаДокумента.Колонки.Добавить("Сумма"					, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДокумента.Колонки.Добавить("ЭтоОплата"				, Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		Если ДокументСсылка.Пустая() Тогда
			НоваяСтрока.ЗаявкаНаУслугиМатериалы = "НоваяЗаявка";
		Иначе
			НоваяСтрока.ЗаявкаНаУслугиМатериалы = ДокументСсылка;
		КонецЕсли; 
		НоваяСтрока.ЭтоОплата =  Ложь;
	Иначе 
		НоваяСтрока.ЭтоОплата =  Истина;				
	КонецЕсли; 
	НоваяСтрока.Сумма =  ДокументСсылка.СуммаДокумента;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка"				, ДокументСсылка);
	СтруктураПараметров.Вставить("ВидОперации"			, ДокументСсылка.ВидОперации);
	Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
		СтруктураПараметров.Вставить("ТипАренднойПлаты"	, Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть);
	Иначе
		СтруктураПараметров.Вставить("ТипАренднойПлаты"	, Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть);
	КонецЕсли;
	СтруктураПараметров.Вставить("Период"				, ДокументСсылка.НачалоПериодаАренды);
	СтруктураПараметров.Вставить("ТаблицаДокумента"		, ТаблицаДокумента);	
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧУслуги.СтруктурнаяЕдиница КАК ТорговаяТочка
	|ПОМЕСТИТЬ ВТ_ТорговыеТочки
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ТЧУслуги
	|ГДЕ
	|	ТЧУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	РасходИзБанка.СуммаДокумента
	|ПОМЕСТИТЬ ВТ_Оплаты
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ВидОперации = ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю)
	|					ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
	|		КОНЕЦ
	|	И РасходИзБанка.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ВТ_ТорговыеТочки.ТорговаяТочка
	|			ИЗ
	|				ВТ_ТорговыеТочки)
	|	И РасходИзБанка.ПериодРегистрации = &Период
	|	И РасходИзБанка.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеВБанк.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница,
	|	-ПоступлениеВБанк.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.Проведен
	|	И ПоступлениеВБанк.ВидОперации = ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю)
	|					ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)
	|		КОНЕЦ
	|	И ПоступлениеВБанк.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ВТ_ТорговыеТочки.ТорговаяТочка
	|			ИЗ
	|				ВТ_ТорговыеТочки)
	|	И ПоступлениеВБанк.ПериодРегистрации = &Период
	|	И ПоступлениеВБанк.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница,
	|	РасходИзКассы.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации = ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю)
	|					ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
	|		КОНЕЦ
	|	И РасходИзКассы.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ВТ_ТорговыеТочки.ТорговаяТочка
	|			ИЗ
	|				ВТ_ТорговыеТочки)
	|	И РасходИзКассы.ПериодРегистрации = &Период
	|	И РасходИзКассы.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.ТорговаяТочка,
	|	ЗачетОплатыАрендыЗачетДепозита.Сумма
	|ИЗ
	|	Документ.ЗачетОплатыАренды.ЗачетДепозита КАК ЗачетОплатыАрендыЗачетДепозита
	|ГДЕ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.Проведен
	|	И ЗачетОплатыАрендыЗачетДепозита.Ссылка.ТорговаяТочка В
	|			(ВЫБРАТЬ
	|				ВТ_ТорговыеТочки.ТорговаяТочка
	|			ИЗ
	|				ВТ_ТорговыеТочки)
	|	И ЗачетОплатыАрендыЗачетДепозита.ТипАренднойПлаты = &ТипАренднойПлаты
	|	И ЗачетОплатыАрендыЗачетДепозита.ПериодРегистрации = &Период
	|	И ЗачетОплатыАрендыЗачетДепозита.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧУслуги.Ссылка КАК ЗаявкаНаУслугиМатериалы,
	|	ТЧУслуги.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	ТЧУслуги.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Заявки
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ТЧУслуги
	|ГДЕ
	|	ТЧУслуги.Ссылка.Проведен
	|	И ТЧУслуги.Ссылка <> &Ссылка
	|	И (ТЧУслуги.Ссылка.ВидОперации = &ВидОперации
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету)
	|				И ТЧУслуги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю)
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю)
	|				И ТЧУслуги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету))
	|	И ТЧУслуги.Ссылка.НачалоПериодаАренды = &Период
	|	И ТЧУслуги.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ВТ_ТорговыеТочки.ТорговаяТочка
	|			ИЗ
	|				ВТ_ТорговыеТочки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧУслуги.Ссылка,
	|	ТЧУслуги.СтруктурнаяЕдиница,
	|	ТЧУслуги.Сумма
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ТЧУслуги
	|ГДЕ
	|	ТЧУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оплаты.ТорговаяТочка КАК ТорговаяТочка,
	|	СУММА(ВТ_Оплаты.СуммаДокумента) КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТ_ЗаявкиИОплаты
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оплаты.ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Заявки.ТорговаяТочка,
	|	СУММА(ВТ_Заявки.Сумма)
	|ИЗ
	|	ВТ_Заявки КАК ВТ_Заявки
	|ГДЕ
	|	НЕ ВТ_Заявки.ЗаявкаНаУслугиМатериалы В
	|				(ВЫБРАТЬ
	|					РасходИзБанка.ЗаявкаНаРасходованиеСредств
	|				ИЗ
	|					Документ.РасходИзБанка КАК РасходИзБанка
	|				ГДЕ
	|					РасходИзБанка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Заявки.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка,
	|	МАКСИМУМ(ЛимитыАренднойПлатыСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_МеткаПоследнегоИзменения
	|ИЗ
	|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
	|			,
	|			ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ВТ_ТорговыеТочки.ТорговаяТочка
	|					ИЗ
	|						ВТ_ТорговыеТочки)
	|				И МесяцАренды <= &Период) КАК ЛимитыАренднойПлатыСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ТорговаяТочка КАК ТорговаяТочка,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Лимит, 0)) КАК Лимит,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0)) КАК Сумма
	|ПОМЕСТИТЬ ВТПоследняя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ЗаявкиИОплаты.ТорговаяТочка КАК ТорговаяТочка,
	|		0 КАК Лимит,
	|		ВТ_ЗаявкиИОплаты.СуммаДокумента КАК Сумма
	|	ИЗ
	|		ВТ_ЗаявкиИОплаты КАК ВТ_ЗаявкиИОплаты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка,
	|		ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю)
	|				ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПостоянная
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю)
	|					ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету)
	|				ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПеременная
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
	|				,
	|				ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ВТ_ТорговыеТочки.ТорговаяТочка
	|					ИЗ
	|						ВТ_ТорговыеТочки)) КАК ЛимитыАренднойПлатыСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МеткаПоследнегоИзменения КАК ВТ_МеткаПоследнегоИзменения
	|			ПО ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка = ВТ_МеткаПоследнегоИзменения.ТорговаяТочка
	|				И ЛимитыАренднойПлатыСрезПоследних.Период = ВТ_МеткаПоследнегоИзменения.Период) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследняя.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТПоследняя.Лимит + ЕСТЬNULL(ДопустимыеПревышенияЛимитовПоАренде.Сумма, 0) КАК Лимит,
	|	ВТПоследняя.Сумма КАК Сумма
	|ИЗ
	|	ВТПоследняя КАК ВТПоследняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеПревышенияЛимитовПоАренде КАК ДопустимыеПревышенияЛимитовПоАренде
	|		ПО (ДопустимыеПревышенияЛимитовПоАренде.ТипТорговойТочки = ВТПоследняя.ТорговаяТочка.ТипРозничнойТочки)
	|			И (&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету))
	|ИТОГИ
	|	СУММА(Лимит),
	|	СУММА(Сумма)
	|ПО
	|	ТорговаяТочка";
							  
	СтруктураПараметров.Вставить("Текст", ТекстЗапроса);
	
	Выборка = ПолныеПрава.ВыполнитьЗапрос(СтруктураПараметров).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	СуммаОплатИЗаявок 	= 0;
	Лимит 				= 0;

	ТекстТипАренднойПлаты = " --- ";
	Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
		ТекстТипАренднойПлаты = "постоянная часть";
	//+++АК POZM 2018.02.13 ИП-00017693 
	//ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю Тогда
	Иначе
	//---АК POZM 
		ТекстТипАренднойПлаты = "переменная часть";
	КонецЕсли;
	
	//
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Сумма > Выборка.Лимит Тогда                                                                                                                                                                                                  
			ОбщегоНазначения.СообщитьОбОшибке("По торговой точке <" + Выборка.ТорговаяТочка +
												"> превышен лимит оплаты по аренде (" + ТекстТипАренднойПлаты + ") за " +
												Формат(ДокументСсылка.НачалоПериодаАренды, "ДФ='ММММ гггг'") + "!" + Символы.ПС +
												"Сумма начисленных оплат с учетом документа составляет: " + Формат(Выборка.Сумма, "ЧДЦ=2") +
												" руб. Лимит оплаты: " + Формат(Выборка.Лимит, "ЧДЦ=2; ЧН=") + " руб." , Отказ);
			//Отказ = Ложь; // убрать после проверки корректности работы процедуры
		КонецЕсли;
    КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЛимитыПоАрендеДокументыУчетаДоговоров(ТорговаяТочка, Дата, Отказ) Экспорт
	
		Возврат;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СтатусыДоговоровАрендыСрезПоследних.Регистратор
		                      |ПОМЕСТИТЬ ВТ_Регистраторы
		                      |ИЗ
		                      |	РегистрСведений.СтатусыДоговоровАренды.СрезПоследних(
		                      |			&Дата,
		                      |			НЕ Договор.Субаренда
		                      |				И ОбъектАренды.СтруктурнаяЕдиница = &ТорговаяТочка) КАК СтатусыДоговоровАрендыСрезПоследних
		                      |ГДЕ
		                      |	СтатусыДоговоровАрендыСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ДоговорКонтрагента КАК Договор,
		                      |	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Валюта,
		                      |	ВЫБОР
		                      |		КОГДА ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.СпособНачисления.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		                      |			ТОГДА ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ставка * 31
		                      |		ИНАЧЕ ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ставка
		                      |	КОНЕЦ КАК Сумма
		                      |ПОМЕСТИТЬ ВТ_СуммыПоДоговорам
		                      |ИЗ
		                      |	Документ.ЗаключениеДоговораАренды.ПостояннаяЧастьАренднойПлаты КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
		                      |ГДЕ
		                      |	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка В
		                      |			(ВЫБРАТЬ
		                      |				ВТ_Регистраторы.Регистратор
		                      |			ИЗ
		                      |				ВТ_Регистраторы)
		                      |	И ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем)
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ДоговорКонтрагента,
		                      |	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
		                      |	ВЫБОР
		                      |		КОГДА ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.СпособНачисления.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		                      |			ТОГДА ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ставка * 31
		                      |		ИНАЧЕ ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ставка
		                      |	КОНЕЦ
		                      |ИЗ
		                      |	Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты
		                      |ГДЕ
		                      |	ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка В
		                      |			(ВЫБРАТЬ
		                      |				ВТ_Регистраторы.Регистратор
		                      |			ИЗ
		                      |				ВТ_Регистраторы)
		                      |	И ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВТ_СуммыПоДоговорам.Сумма,
		                      |	ВЫБОР
		                      |		КОГДА ВТ_СуммыПоДоговорам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		                      |				И (КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта <> &ВалютаРегл
		                      |					ИЛИ КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.КурсЦБ)
		                      |						И КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.ПустаяСсылка))
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 0
		                      |	КОНЕЦ КАК ЕстьРасчетыВВалюте,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта2,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Курс,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Кратность,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница,
		                      |	КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
		                      |ИЗ
		                      |	ВТ_СуммыПоДоговорам КАК ВТ_СуммыПоДоговорам
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовПоАренде.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), ) КАК КурсыВалютДляРасчетовПоАрендеСрезПоследних
		                      |		ПО ВТ_СуммыПоДоговорам.Договор = КурсыВалютДляРасчетовПоАрендеСрезПоследних.ДоговорКонтрагента");
							  
							  
							  
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	Запрос.УстановитьПараметр("Дата", Дата);	
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаПоДоговорам = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьРасчетыВВалюте Тогда
			КурсВалюты = ПроцедурыНачисления.ПолучитьКурсВалютыПоДоговору(ТекущаяДата(), Выборка).Курс;	
			СуммаПоДоговорам = СуммаПоДоговорам + Выборка.Сумма * КурсВалюты;
		Иначе
			СуммаПоДоговорам = СуммаПоДоговорам + Выборка.Сумма;
		КонецЕсли;			
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПостоянная КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
	               |			,
	               |			ТорговаяТочка = &ТорговаяТочка
	               |				И МесяцАренды <= &МесяцАренды) КАК ЛимитыАренднойПлатыСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛимитыАренднойПлатыСрезПоследних.Период УБЫВ";
				   
	// Если документ начинается не с начала месяца - берем лимит следующего месяца				   
	Если НачалоМесяца(Дата) = НачалоДня(Дата) Тогда
		Запрос.УстановитьПараметр("МесяцАренды", НачалоМесяца(Дата));					   
	Иначе
		Запрос.УстановитьПараметр("МесяцАренды", ДобавитьМесяц(НачалоМесяца(Дата), 1));					   
	КонецЕсли; 				   
	
	Выборка = Запрос.Выполнить().Выбрать();				   
				   
	Лимит = 0;
	
	Если Выборка.Следующий() Тогда
		Лимит = Выборка.Сумма;
	КонецЕсли;
	
	Если СуммаПоДоговорам > Лимит  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По торговой точке <" + ТорговаяТочка + "> превышен лимит оплаты по аренде!" + Символы.ПС + "Сумма оплат по действующим договорам с учетом документа составляет: " + Формат(СуммаПоДоговорам, "ЧДЦ=2") + " руб. Лимит оплаты: " + Формат(Лимит, "ЧДЦ=2; ЧН=") + " руб." , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЛимитыПоАрендеНачислениеАренднойПлатыПоТипуАренднойПлаты(ДокументСсылка, Отказ, ТипАренднойПлаты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"			, ДокументСсылка);
	Запрос.УстановитьПараметр("ТипАренднойПлаты", ТипАренднойПлаты);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.СтруктурнаяЕдиница КАК ТорговаяТочка
	|ПОМЕСТИТЬ ВТ_ТорговыеТочки
	|ИЗ
	|	Документ.НачислениеАренднойПлатыОтАрендодателей.НачислениеАренды КАК НачислениеАренднойПлатыОтАрендодателейНачислениеАренды
	|ГДЕ
	|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка = &Ссылка
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ТипАренднойПлаты = &ТипАренднойПлаты
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ПериодРегистрации = &ПериодАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЛимитыАренднойПлатыСрезПоследних.Период) КАК Период,
	|	ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка
	|ПОМЕСТИТЬ ВТ_МеткиПоследнегоИзменения
	|ИЗ
	|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
	|			,
	|			ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ВТ_ТорговыеТочки.ТорговаяТочка
	|					ИЗ
	|						ВТ_ТорговыеТочки)
	|				И МесяцАренды <= &ПериодАренды) КАК ЛимитыАренднойПлатыСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Сумма КАК Сумма,
	|	0 КАК Лимит
	|ИЗ
	|	Документ.НачислениеАренднойПлатыОтАрендодателей.НачислениеАренды КАК НачислениеАренднойПлатыОтАрендодателейНачислениеАренды
	|ГДЕ
	|	(НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.Проведен
	|			ИЛИ НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка = &Ссылка)
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ТипАренднойПлаты = &ТипАренднойПлаты
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ВТ_ТорговыеТочки.ТорговаяТочка
	|			ИЗ
	|				ВТ_ТорговыеТочки)
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ПериодРегистрации = &ПериодАренды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка,
	|	0,
	|	ВЫБОР
	|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПеременная + ЕСТЬNULL(ДопустимыеПревышенияЛимитовПоАренде.Сумма, 0)
	|		ИНАЧЕ ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПостоянная
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
	|			,
	|			ТорговаяТочка В
	|				(ВЫБРАТЬ
	|					ВТ_ТорговыеТочки.ТорговаяТочка
	|				ИЗ
	|					ВТ_ТорговыеТочки)) КАК ЛимитыАренднойПлатыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МеткиПоследнегоИзменения КАК ВТ_МеткиПоследнегоИзменения
	|		ПО ЛимитыАренднойПлатыСрезПоследних.Период = ВТ_МеткиПоследнегоИзменения.Период
	|			И ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка = ВТ_МеткиПоследнегоИзменения.ТорговаяТочка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеПревышенияЛимитовПоАренде КАК ДопустимыеПревышенияЛимитовПоАренде
	|		ПО ЛимитыАренднойПлатыСрезПоследних.ТорговаяТочка.ТипРозничнойТочки = ДопустимыеПревышенияЛимитовПоАренде.ТипТорговойТочки
	|ИТОГИ
	|	ЕСТЬNULL(СУММА(Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(Лимит), 0) КАК Лимит
	|ПО
	|	ТорговаяТочка";
	
	//
	ТаблицаПериодовРегистрации = ДокументСсылка.НачислениеАренды.Выгрузить(, "ПериодРегистрации");
	ТаблицаПериодовРегистрации.Свернуть("ПериодРегистрации");
	
	Для Каждого СтрокаПериода Из ТаблицаПериодовРегистрации Цикл
		
		Запрос.УстановитьПараметр("ПериодАренды", СтрокаПериода.ПериодРегистрации);	
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.Сумма > Выборка.Лимит Тогда                                                                                                                                                                                                  
				ОбщегоНазначения.СообщитьОбОшибке("По торговой точке <" + Выборка.ТорговаяТочка +
													"> превышен лимит оплаты по аренде (" + ТипАренднойПлаты + ") за " +
													Формат(СтрокаПериода.ПериодРегистрации, "ДФ='ММММ гггг'") + "!" + Символы.ПС +
													"Сумма начисленных оплат с учетом документа составляет: " + Формат(Выборка.Сумма, "ЧДЦ=2") +
													" руб. Лимит оплаты: " + Формат(Выборка.Лимит, "ЧДЦ=2; ЧН=") + " руб." , Отказ);
			КонецЕсли;

		КонецЦикла;	
		
	КонецЦикла;  
	
		
КонецПроцедуры

Процедура ПроверитьЛимитыПоАрендеНачислениеАренднойПлаты(ДокументСсылка, Отказ) Экспорт
	
	ПроверитьЛимитыПоАрендеНачислениеАренднойПлатыПоТипуАренднойПлаты(ДокументСсылка, Отказ, Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть);
	ПроверитьЛимитыПоАрендеНачислениеАренднойПлатыПоТипуАренднойПлаты(ДокументСсылка, Отказ, Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть);
		
КонецПроцедуры

//+++АК GEYV 12.05.2015
Функция ПолучитьСуммуПоказанийСчетчика(ТорговаяТочка, ПериодАренды)
	 
	Лимит = 0;
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодАренды"	, НачалоМесяца(ПериодАренды));
	Запрос.УстановитьПараметр("ТорговаяТочка"	, ТорговаяТочка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА АК_ПоказанияСчетчиковПрошлыйМесяц.ПоказанияСчетчика > АК_ПоказанияСчетчиковТекущийМесяц.ПоказанияСчетчика
	|				ТОГДА АК_ПоказанияСчетчиковТекущийМесяц.ТипСчетчика.МаксимальноеЗначениеСчетчикаПриОбнуление - АК_ПоказанияСчетчиковПрошлыйМесяц.ПоказанияСчетчика + АК_ПоказанияСчетчиковТекущийМесяц.ПоказанияСчетчика
	|			ИНАЧЕ АК_ПоказанияСчетчиковТекущийМесяц.ПоказанияСчетчика - АК_ПоказанияСчетчиковПрошлыйМесяц.ПоказанияСчетчика
	|		КОНЕЦ * АК_ПоказанияСчетчиковТекущийМесяц.ТипСчетчика.ТарифЗаЕдиницу) КАК Лимит
	|ИЗ
	|	РегистрСведений.АК_ПоказанияСчетчиков.СрезПоследних(
	|			,
	|			МесяцАренды = &ПериодАренды
	|				И ТорговаяТочка = &ТорговаяТочка) КАК АК_ПоказанияСчетчиковТекущийМесяц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АК_ПоказанияСчетчиков.СрезПоследних(
	|				,
	|				МесяцАренды = ДОБАВИТЬКДАТЕ(&ПериодАренды, МЕСЯЦ, -1)
	|					И ТорговаяТочка = &ТорговаяТочка) КАК АК_ПоказанияСчетчиковПрошлыйМесяц
	|		ПО АК_ПоказанияСчетчиковТекущийМесяц.ТорговаяТочка = АК_ПоказанияСчетчиковПрошлыйМесяц.ТорговаяТочка
	|			И АК_ПоказанияСчетчиковТекущийМесяц.ТипСчетчика = АК_ПоказанияСчетчиковПрошлыйМесяц.ТипСчетчика";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось посчитать сумму переменной части! Проверьте внесение данных!";
		Сообщение.Сообщить();
		 
		Возврат Лимит;
		 
	КонецЕсли;
	 
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	 
	ВыборкаДетальныеЗаписи.Следующий();
	 
	Возврат ВыборкаДетальныеЗаписи.Лимит;
	 
КонецФункции
//---АК

//+++АК sils 29.01.2018 ИП-00017671
Процедура ПроверитьЛимитыПоАрендеЗаявкиИОплаты_НДФЛ(ДокументСсылка, ЗаявкаНаРасходованиеСредств = Неопределено, СуммаДокумента, ТорговаяТочка, ТипАренднойПлаты, ПериодАренды, Отказ) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств"));
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(20);
	
	ТаблицаДокумента = Новый ТаблицаЗначений;	
	ТаблицаДокумента.Колонки.Добавить("ЗаявкаНаРасходованиеСредств"	, Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеСредств"));
	ТаблицаДокумента.Колонки.Добавить("Сумма"						, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДокумента.Колонки.Добавить("ЭтоОплата"					, Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		Если ДокументСсылка.Пустая() Тогда
			НоваяСтрока.ЗаявкаНаРасходованиеСредств = "НоваяЗаявка";
		Иначе
			НоваяСтрока.ЗаявкаНаРасходованиеСредств = ДокументСсылка;
		КонецЕсли; 
		НоваяСтрока.ЭтоОплата =  Ложь;
	Иначе 
		НоваяСтрока.ЭтоОплата =  Истина;				
	КонецЕсли; 
	НоваяСтрока.Сумма =  СуммаДокумента;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ЗаявкаНаРасходованиеСредств,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.ЭтоОплата
	|ПОМЕСТИТЬ ВТ_Документ
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.СуммаДокумента
	|ПОМЕСТИТЬ ВТ_Оплаты
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ВидОперации = ВЫБОР
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|					ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|					ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
	|		КОНЕЦ
	|	И РасходИзБанка.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница = &ТорговаяТочка
	|	И РасходИзБанка.ПериодРегистрации = &Период
	|	И РасходИзБанка.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-ПоступлениеВБанк.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.Проведен
	|	И ПоступлениеВБанк.ВидОперации = ВЫБОР
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|					ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|					ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)
	|		КОНЕЦ
	|	И ПоступлениеВБанк.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница = &ТорговаяТочка
	|	И ПоступлениеВБанк.ПериодРегистрации = &Период
	|	И ПоступлениеВБанк.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации = ВЫБОР
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|					ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|					ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
	|		КОНЕЦ
	|	И РасходИзКассы.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница = &ТорговаяТочка
	|	И РасходИзКассы.ПериодРегистрации = &Период
	|	И РасходИзКассы.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗачетОплатыАрендыЗачетДепозита.Сумма
	|ИЗ
	|	Документ.ЗачетОплатыАренды.ЗачетДепозита КАК ЗачетОплатыАрендыЗачетДепозита
	|ГДЕ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.Проведен
	|	И ЗачетОплатыАрендыЗачетДепозита.Ссылка.ТорговаяТочка = &ТорговаяТочка
	|	И ЗачетОплатыАрендыЗачетДепозита.ТипАренднойПлаты = &ТипАренднойПлаты
	|	И ЗачетОплатыАрендыЗачетДепозита.ПериодРегистрации = &Период
	|	И ЗачетОплатыАрендыЗачетДепозита.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Документ.Сумма
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|ГДЕ
	|	ВТ_Документ.ЭтоОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка КАК ЗаявкаНаРасходованиеСредств,
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Заявки
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.Проведен
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка <> &Ссылка
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.ТипАренднойПлаты = &ТипАренднойПлаты
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Период = &Период
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.ТорговаяТочка = &ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Документ.ЗаявкаНаРасходованиеСредств,
	|	ВТ_Документ.Сумма
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|ГДЕ
	|	НЕ ВТ_Документ.ЭтоОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Оплаты.СуммаДокумента) КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТ_ЗаявкиИОплаты
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВТ_Заявки.Сумма)
	|ИЗ
	|	ВТ_Заявки КАК ВТ_Заявки
	|ГДЕ
	|	НЕ ВТ_Заявки.ЗаявкаНаРасходованиеСредств В
	|				(ВЫБРАТЬ
	|					РасходИзБанка.ЗаявкаНаРасходованиеСредств
	|				ИЗ
	|					Документ.РасходИзБанка КАК РасходИзБанка
	|				ГДЕ
	|					РасходИзБанка.Проведен)
	|	И НЕ ВТ_Заявки.ЗаявкаНаРасходованиеСредств В
	|				(ВЫБРАТЬ
	|					РасходИзКассы.ЗаявкаНаРасходованиеСредств
	|				ИЗ
	|					Документ.РасходИзКассы КАК РасходИзКассы
	|				ГДЕ
	|					РасходИзКассы.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЛимитыАренднойПлатыСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_МеткаПоследнегоИзменения
	|ИЗ
	|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
	|			,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И МесяцАренды <= &Период) КАК ЛимитыАренднойПлатыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Лимит,
	|	ЕСТЬNULL(СУММА(ВТ_ЗаявкиИОплаты.СуммаДокумента), 0) КАК Сумма
	|ИЗ
	|	ВТ_ЗаявкиИОплаты КАК ВТ_ЗаявкиИОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|				ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
	|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПостоянная
	|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|				ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
	|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПеременная
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(, ТорговаяТочка = &ТорговаяТочка) КАК ЛимитыАренднойПлатыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МеткаПоследнегоИзменения КАК ВТ_МеткаПоследнегоИзменения
	|		ПО ЛимитыАренднойПлатыСрезПоследних.Период = ВТ_МеткаПоследнегоИзменения.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|				ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
	|			ТОГДА ДопустимыеПревышенияЛимитовПоАренде.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрСведений.ДопустимыеПревышенияЛимитовПоАренде КАК ДопустимыеПревышенияЛимитовПоАренде
	|ГДЕ
	|	ДопустимыеПревышенияЛимитовПоАренде.ТипТорговойТочки = &ТипТорговойТочки
	|ИТОГИ
	|	ЕСТЬNULL(СУММА(Лимит), 0) КАК Лимит,
	|	ЕСТЬNULL(СУММА(Сумма), 0) КАК Сумма
	|ПО
	|	ОБЩИЕ";
							  
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка"			, ДокументСсылка);
	СтруктураПараметров.Вставить("ТипАренднойПлаты"	, ТипАренднойПлаты);
	СтруктураПараметров.Вставить("Период"			, ПериодАренды);
	СтруктураПараметров.Вставить("ТорговаяТочка"	, ТорговаяТочка);
	СтруктураПараметров.Вставить("ТипТорговойТочки"	, ТорговаяТочка.ТипРозничнойТочки);	
	СтруктураПараметров.Вставить("ТаблицаДокумента"	, ТаблицаДокумента);	
	
	СтруктураПараметров.Вставить("Текст"			, ТекстЗапроса);
	
	Выборка = ПолныеПрава.ВыполнитьЗапрос(СтруктураПараметров).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СуммаОплатИЗаявок = 0;
	Лимит = 0;
	
	Если Выборка.Следующий() Тогда
		СуммаОплатИЗаявок = Выборка.Сумма;
		Лимит = Выборка.Лимит;
		//+++АК GEYV 12.05.2015 Лимит переменной части расчитывается на основание показаний счетчика
		Если НачалоМесяца(Константы.ДатаКонтроляПеременнойЧастиПоСчетчикам.Получить()) >= НачалоМесяца(ПериодАренды)
				И ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
			
			Лимит = ПолучитьСуммуПоказанийСчетчика(ТорговаяТочка,ПериодАренды);	
			Если СуммаОплатИЗаявок  > Лимит   Тогда
				ОбщегоНазначения.СообщитьОбОшибке("По торговой точке <" + ТорговаяТочка + "> превышен лимит оплаты по аренде за " +
													Формат(ПериодАренды, "ДФ='ММММ гггг'") + " !" + Символы.ПС +
													"Сумма произведенных и запланированных оплат с учетом документа составляет: " +
													Формат(СуммаОплатИЗаявок , "ЧДЦ=2") + " руб. Лимит оплаты: " + Формат(Лимит, "ЧДЦ=2; ЧН=") + " руб." , Отказ);
				Возврат;
			КонецЕсли;
				
		КонецЕсли;
		//---АК
	КонецЕсли;
		
	Если СуммаОплатИЗаявок > Лимит Тогда
		
		// Зачет депозита позволяется при нулевом лимите, но не более чем на размер последнего ненулевого лимита
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗачетОплатыАренды")
				И Лимит = 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТипАренднойПлаты", ТипАренднойПлаты);
			Запрос.УстановитьПараметр("Период"			, ПериодАренды);
			Запрос.УстановитьПараметр("ТорговаяТочка"	, ТорговаяТочка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЛимитыАренднойПлатыСрезПоследних.Период) КАК Период
			|ПОМЕСТИТЬ ВТ_МеткаПоследнегоИзменения
			|ИЗ
			|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
			|			,
			|			ТорговаяТочка = &ТорговаяТочка
			|				И МесяцАренды <= &Период
			|				И ВЫБОР
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
			|							ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
			|						ТОГДА СуммаАрендаПостоянная
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
			|							ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
			|						ТОГДА СуммаАрендаПеременная
			|				КОНЕЦ <> 0) КАК ЛимитыАренднойПлатыСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
			|				ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
			|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПостоянная
			|		КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
			|				ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
			|			ТОГДА ЛимитыАренднойПлатыСрезПоследних.СуммаАрендаПеременная
			|	КОНЕЦ КАК Лимит
			|ИЗ
			|	РегистрСведений.ЛимитыАренднойПлаты.СрезПоследних(
			|			,
			|			ТорговаяТочка = &ТорговаяТочка
			|				И МесяцАренды <= &Период
			|				И ВЫБОР
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
			|							ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
			|						ТОГДА СуммаАрендаПостоянная
			|					КОГДА &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
			|							ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
			|						ТОГДА СуммаАрендаПеременная
			|				КОНЕЦ <> 0) КАК ЛимитыАренднойПлатыСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МеткаПоследнегоИзменения КАК ВТ_МеткаПоследнегоИзменения
			|		ПО ЛимитыАренднойПлатыСрезПоследних.Период = ВТ_МеткаПоследнегоИзменения.Период";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			СуммаПоследнегоЛимита = 0;
			
			Если Выборка.Следующий() Тогда
				СуммаПоследнегоЛимита = Выборка.Лимит;
			КонецЕсли; 
			
			Если  СуммаОплатИЗаявок <= СуммаПоследнегоЛимита Тогда
				Возврат;
			КонецЕсли; 

		КонецЕсли; 
		
		ОбщегоНазначения.СообщитьОбОшибке("По торговой точке <" + ТорговаяТочка + "> превышен лимит оплаты по аренде за " +
											Формат(ПериодАренды, "ДФ='ММММ гггг'") + " !" + Символы.ПС +
											"Сумма произведенных и запланированных оплат с учетом документа составляет: " +
											Формат(СуммаОплатИЗаявок , "ЧДЦ=2") + " руб. Лимит оплаты: " + Формат(Лимит, "ЧДЦ=2; ЧН=") + " руб." , Отказ);
	КонецЕсли;

КонецПроцедуры
