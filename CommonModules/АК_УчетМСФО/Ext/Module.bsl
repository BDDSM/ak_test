
Процедура КонтрольДатыВходящегоДокумента(ДокументОбъект,Отказ) Экспорт
	
	ДатаДокумента = ДокументОбъект.Дата;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда	
		
		Для каждого СтрокаТовар Из ДокументОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовар.ДатаВходящегоДокумента) Тогда
				СравнениеДат(ДатаДокумента,СтрокаТовар.ДатаВходящегоДокумента,Отказ);
			КонецЕсли;	
		КонецЦикла;	
		
		Для каждого СтрокаУслуга Из ДокументОбъект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаУслуга.ДатаВходящегоДокумента) Тогда
				СравнениеДат(ДатаДокумента,СтрокаУслуга.ДатаВходящегоДокумента,Отказ);
			КонецЕсли;	
		КонецЦикла;	
				
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") ИЛИ
		ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоДокумента) Тогда
			СравнениеДат(ДатаДокумента,ДокументОбъект.ДатаВходящегоДокумента,Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоСчетаФактуры) Тогда
			СравнениеДат(ДатаДокумента,ДокументОбъект.ДатаВходящегоСчетаФактуры,Отказ);
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры	
	
	
Процедура СравнениеДат(ДатаВходящегоДокумента,ДатаДокумента,Отказ)	
	
	Разность = Год(ДатаВходящегоДокумента) - Год(ДатаДокумента);
	// Проверка на заведомо неверные значение 0201 или 3017
	Если Разность > 5 или Разность < -5 Тогда
		
		Сообщить("Ошибка при заполнении даты входящего документа");
		Отказ = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОтразитьПринятиеКУчетуМСФО_Стар(ДокументСсылка,Движения) Экспорт
	
	Если ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ТаблицаОС = ДокументСсылка.Оборудование.Выгрузить();
	ИначеЕсли ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.ПоступлениеОС") Тогда 	
		ТаблицаОС = ДокументСсылка.Номенклатура.Выгрузить();
		НоваяКолонка = ТаблицаОС.Колонки.Добавить("ТорговаяТочка");
		Для каждого Строка из ТаблицаОС Цикл
			Строка.ТорговаяТочка = ДокументСсылка.Склад;		
		КонецЦикла;		
	КонецЕсли;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.Сумма КАК НачальнаяСтоимость,
		|	ТаблицаОС.ТорговаяТочка КАК ТорговаяТочка
		|ПОМЕСТИТЬ втОсновныеСредства
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОсновныеСредства.ОсновноеСредство,
		|	втОсновныеСредства.НачальнаяСтоимость,
		|	АК_ПараметрыУчетаОССрезПоследних.СчетУчетаАмортизация,
		|	АК_ПараметрыУчетаОССрезПоследних.СрокАмортизации,
		|	АК_ПараметрыУчетаОССрезПоследних.НачислятьАмортизацию,
		|	&Дата КАК Период,
		|	&Дата КАК ДатаВводаВЭксплуатацию,
		|	ИСТИНА КАК Активность,
		|	АК_ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	&Организация КАК Организация,
		|	втОсновныеСредства.ТорговаяТочка
		|ИЗ
		|	втОсновныеСредства КАК втОсновныеСредства,
		|	РегистрСведений.АК_ПараметрыУчетаОС.СрезПоследних(&Дата, Организация = &Организация) КАК АК_ПараметрыУчетаОССрезПоследних";
	
		
	Запрос.УстановитьПараметр("ТаблицаОС",ТаблицаОС);
	Запрос.УстановитьПараметр("Дата",ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Организация",ДокументСсылка.Организация);
	
	ДвиженияУчетОС = Запрос.Выполнить().Выгрузить();
		
	Движения.АК_УчетОС.Загрузить(ДвиженияУчетОС);
	Движения.АК_УчетОС.Записать();
	
КонецПроцедуры	

Функция ОСВведеноВЭксплуатацию(ОсновноеСредство,Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПринятыеКУчетуОССрезПоследних.ДатаВводаВЭксплуатацию
		|ИЗ
		|	РегистрСведений.ПринятыеКУчетуОС.СрезПоследних(&ДатаСреза, ОсновноеСредство = &ОсновноеСредство) КАК ПринятыеКУчетуОССрезПоследних";

	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции	

Процедура ОтразитьПринятиеКУчетуОС(ДокументОбъект) Экспорт

	ОтразитьДвиженияФинансовыйОС(ДокументОбъект);		
	ОтразитьСостояниеОС(ДокументОбъект);	
	
КонецПроцедуры

Функция СчетаУчетаОС() Экспорт
	
	ДоступныеСчета = Новый Массив;         
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ОборудованиеДляМонтажа);
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);
	//+++AK susk
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000);
	//---AK susk
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	
	Возврат ДоступныеСчета;
	
КонецФункции
 
Функция ЗатратыНаОС(ОсновноеСредство, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОстаткиИОбороты.Счет КАК СчетДт,
		|	ФинансовыйОстаткиИОбороты.СуммаКонечныйОстаток + ФинансовыйОстаткиИОбороты.СуммаОборотКт КАК Сумма,
		|	ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйОстаток + ФинансовыйОстаткиИОбороты.СуммаМСФООборотКт КАК СуммаМСФО
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(&Дата1, , , , Счет В (&СчетУчетаОС), , Субконто1 = &ОсновноеСредство) КАК ФинансовыйОстаткиИОбороты";

	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Дата));	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("СчетУчетаОС", СчетаУчетаОС());

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;		
	
КонецФункции
	

Функция СчетаЗатратОСПослеВводаВЭксплуатацию() Экспорт
	
	ДоступныеСчета = Новый Массив;         
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ЗатратыДляОтнесенияНаИнвестиции);
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ЗатратыДляРаспределения);
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения);
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения);	
	
	Возврат ДоступныеСчета;
	
КонецФункции

Функция СчетаУчетаОСПослеВводаВЭксплуатацию() Экспорт
	
	ДоступныеСчета = Новый Массив;         
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваВОрганизации);
	ДоступныеСчета.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваДо100000);
	
	Возврат ДоступныеСчета;
	
КонецФункции


Процедура ОтразитьДвиженияФинансовыйОС(ДокументОбъект) Экспорт
	
	ДвиженияФинансовый = ДокументОбъект.Движения.Финансовый;
	НастройкаОтраженияНДСПоОборудованию = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(
												Перечисления.ВидыОперацийВУчете.НДС_ОборудованиеПоступлениеТоваровИУслуг,
												ДокументОбъект.Дата);
												
	Отказ = Ложь;											
												
	Для Каждого СтрокаОС Из ДокументОбъект.Оборудование Цикл
		
		//Дт08 - Кт60.х
		Проводка = ДвиженияФинансовый.Добавить();
		Проводка.Период						= ДокументОбъект.Дата;
		Проводка.Организация				= ДокументОбъект.Организация;
		
		Сумма                            	= ?(ДокументОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле,СтрокаОС.Сумма-СтрокаОС.СуммаНДС,СтрокаОС.Сумма);
		Проводка.Сумма						= Сумма;
				
		Проводка.СчетДт						= СтрокаОС.СчетУчета;
		Проводка.СубконтоДт.ОсновныеСредства= СтрокаОС.ОсновноеСредство;
			
		Проводка.СчетКт						= ДокументОбъект.СчетУчетаРасчетовСКонтрагентом;
		
		//Пока субконто тоже заполняем
		Проводка.СубконтоКт.Организации		= ДокументОбъект.Организация;		
		Проводка.СубконтоКт.Контрагенты		= ДокументОбъект.Контрагент;
		
		АК_УчетМСФО.ВыделитьДвиженияПрошлогоГода(ДвиженияФинансовый,Проводка,ДокументОбъект.ДатаВходящегоДокумента,ДокументОбъект.Дата);
		//АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(ДвиженияФинансовый,Проводка,ДокументОбъект.ДатаВходящегоДокумента,ДокументОбъект.Дата,ДокументОбъект.ДатаОтраженияМСФО,Отказ);
		
		//НДС отдельно
		Если СтрокаОС.СуммаНДС > 0 Тогда
			Проводка = ДвиженияФинансовый.Добавить();	
			Проводка.Период						= ДокументОбъект.Дата;
			Проводка.Организация				= ДокументОбъект.Организация;
			
			Проводка.Сумма						= СтрокаОС.СуммаНДС;
				
			Проводка.СчетДт	= НастройкаОтраженияНДСПоОборудованию.Счет;
			Проводка.СубконтоДт.Организации				= ДокументОбъект.Организация;
			Проводка.СубконтоДт.ВидыНалогов 			= НастройкаОтраженияНДСПоОборудованию.ДопРеквизит;
			Проводка.СубконтоДт.СтавкиНДС 				= СтрокаОС.СтавкаНДС;
					
			Проводка.СчетКт						= ДокументОбъект.СчетУчетаРасчетовСКонтрагентом;
			
			//Пока субконто тоже заполняем
			Проводка.СубконтоКт.Организации		= ДокументОбъект.Организация;		
			Проводка.СубконтоКт.Контрагенты		= ДокументОбъект.Контрагент;
			
			АК_УчетМСФО.ВыделитьДвиженияПрошлогоГода(ДвиженияФинансовый,Проводка,ДокументОбъект.ДатаВходящегоДокумента,ДокументОбъект.Дата);
		//АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(ДвиженияФинансовый,Проводка,ДокументОбъект.ДатаВходящегоДокумента,ДокументОбъект.Дата,ДокументОбъект.ДатаОтраженияМСФО,Отказ);

			ЗаполнитьОрганизацию(ДвиженияФинансовый, ДокументОбъект.Организация); //+++АК SHEP 2018.05.03 ИП-00018492
			ДвиженияФинансовый.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// перепроведение расходных складских ордеров (если есть такие, проведенные после тек. документа)
	//ДопМодульСервер.Оборудование_ПерепроведениеРасходников(ЭтотОбъект.Дата, ЭтотОбъект.Склад, ЭтотОбъект.Оборудование.ВыгрузитьКолонку("ОсновноеСредство"));
	
КонецПроцедуры	

Процедура ОтразитьСостояниеОС(ДокументОбъект,Отказ = Ложь) Экспорт 
	
	ДокументОбъект.Движения.СостояниеОС.Очистить();			
	ДокументОбъект.Движения.СостояниеОС.Записывать = Истина;
	
	Если ДокументОбъект.Оборудование.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда 
		МассивОрдеров = ДокументОбъект.ПриходныеОрдера.Выгрузить().ВыгрузитьКолонку("ПриходныйОрдер");
	КонецЕсли;	
		
	Для Каждого СтрокаОС Из ДокументОбъект.Оборудование Цикл 
		
		ТекущееСостояние = ДокументОбъект.Движения.СостояниеОС.Добавить();
		
		ТекущееСостояние.Период = ДокументОбъект.Дата;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйОрдерСклад") Тогда
			ТекущееСостояние.Эксплуатируется = СтрокаОС.ЭксплуатируетсяНаСкладе;
			ТекущееСостояние.Местоположение = ДокументОбъект.Склад;
			ТекущееСостояние.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйОрдерСклад") Тогда 	
			ТекущееСостояние.Местоположение = ДокументОбъект.Получатель;	
			ТекущееСостояние.ОсновноеСредство = СтрокаОС.Оборудование;
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда 
			
			//+++AK susk
			//ЭтоПоступлениеНаСклад = (ДокументОбъект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад);																							
			ЭтоПоступлениеНаСклад = ЗначениеЗаполнено(ДокументОбъект.Склад);
			//---AK susk
			
			Если ЭтоПоступлениеНаСклад Тогда
				
				МестоположениеПоОрдеру = МестоположениеПоОрдеру(СтрокаОС.ОсновноеСредство,МассивОрдеров);
				Если ЗначениеЗаполнено(МестоположениеПоОрдеру) Тогда
					Если ДокументОбъект.Склад <> МестоположениеПоОрдеру тогда
						Сообщить("В приходном ордере по основному средству: " + СтрокаОС.ОсновноеСредство + " указан склад: " + МестоположениеПоОрдеру);	
						отказ = Истина;
					КонецЕсли;					
				КонецЕсли;
				ТекущееСостояние.Местоположение = ДокументОбъект.Склад;
			Иначе 
				ТекущееСостояние.Местоположение = СтрокаОС.ТорговаяТочка;
			КонецЕсли;	
				
			ТекущееСостояние.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			//Организацию пишем только при проведении бухгалтерских документов
			ТекущееСостояние.Организация = ДокументОбъект.Организация;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Функция МестоположениеПоОрдеру(ОсновноеСредство,СписокОдеров)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеОС.ОсновноеСредство,
		|	СостояниеОС.Местоположение
		|ИЗ
		|	РегистрСведений.СостояниеОС КАК СостояниеОС
		|ГДЕ
		|	СостояниеОС.Регистратор В (&СписокОдеров)
		|	И СостояниеОС.ОсновноеСредство = &ОсновноеСредство";

	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("СписокОдеров", СписокОдеров);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат  ВыборкаДетальныеЗаписи.Местоположение;
	КонецЦикла;

	Возврат Неопределено;
		
КонецФункции	

//+++АК VERT 2018.03.13 ИП-00017883
// Процедура - Установить дату отражения МСФО
// 1. Дата отражения МСФО меняется, если документ в открытом периоде и Дата входящего документа меньше даты закрытия периода по МСФО
// Параметры:
//  ДокументОбъект	 - объект документа
//
Процедура УстановитьДатуОтраженияМСФО(ДокументОбъект) Экспорт
		
	ТекущаяДатаЗапрета = ОбщегоНазначенияПовтИсп.ПолучитьДатуЗапретаМСФО();
	                    
	ДатаВходящегоДокумента = ДатаВходящегоДокумента(ДокументОбъект);
		
	Если Не ЗначениеЗаполнено(ТекущаяДатаЗапрета) 
		ИЛИ ДатаВходящегоДокумента > КонецДня(ТекущаяДатаЗапрета) 
		ИЛИ Не ЗначениеЗаполнено(ДокументОбъект.ДатаОтраженияМСФО) Тогда		
		ДокументОбъект.ДатаОтраженияМСФО = ДатаВходящегоДокумента;
		Возврат ;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОчиститьДляНепроведенныхДатуОтраженияМСФО(ДокументОбъект) Экспорт
	
	Если НЕ ДокументОбъект.Проведен Тогда
		ДокументОбъект.ДатаОтраженияМСФО = Дата(1,1,1);
	КонецЕсли;	
	
КонецПроцедуры	

Функция ДатаВходящегоДокумента(ДокументОбъект)	
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда	
		
		МинимальнаяДата = Дата(3999,1,1);
		Для каждого СтрокаТовар Из ДокументОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовар.ДатаВходящегоДокумента) и
				(СтрокаТовар.ДатаВходящегоДокумента < МинимальнаяДата) Тогда
				МинимальнаяДата = СтрокаТовар.ДатаВходящегоДокумента
			КонецЕсли;	
		КонецЦикла;	
		
		Для каждого СтрокаУслуга Из ДокументОбъект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаУслуга.ДатаВходящегоДокумента) и
				(СтрокаУслуга.ДатаВходящегоДокумента < МинимальнаяДата) Тогда
				МинимальнаяДата = СтрокаУслуга.ДатаВходящегоДокумента
			КонецЕсли;	
		КонецЦикла;	
		
		Если МинимальнаяДата = Дата(3999,1,1) Тогда
			Возврат Дата(1,1,1);
		Иначе 
			Возврат МинимальнаяДата;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") ИЛИ
		ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
		
		Возврат ДокументОбъект.ДатаВходящегоДокумента;
		
	КонецЕсли;	
КонецФункции	

//+++АК VERT 2018.03.15 ИП-00017883
Процедура КорректироватьПериодДвиженияМСФО(ДвиженияФинансовый,КорректируемаяПроводка,ДатаМСФО,ДатаУчета,ДатаОтраженияМСФО = Неопределено,Отказ=Ложь, НомерПроводки = -1) Экспорт
	
	// Выполняются корректировки только для 44 60
	Счет60 	 = ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками;
	Счет44 	 = ПланыСчетов.Финансовый.ЗатратыДляРаспределения;	
	Счет68_2 = ПланыСчетов.Финансовый.НалогиУН;
	
	Если (НЕ ОбщегоНазначенияПовтИсп.СчетВИерархии(КорректируемаяПроводка.СчетДТ, Счет44) И 
			НЕ КорректируемаяПроводка.СчетДТ = Счет68_2 ) ИЛИ 
		НЕ БухгалтерскийУчетВызовСервераПовтИспУФ.СчетВИерархии(КорректируемаяПроводка.СчетКТ, Счет60)
			Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаВеденияУчетаМСФО = ПолучитьДатуНачалаУчетаМСФО();
	
	Если Не ЗначениеЗаполнено(ДатаНачалаВеденияУчетаМСФО) Тогда 
		Возврат;	
	КонецЕсли;	
	
	Если КорректируемаяПроводка.Сумма = 0 Тогда 
		Возврат;	
	КонецЕсли;		
	
	Если ДатаУчета < ДатаНачалаВеденияУчетаМСФО Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнятьОрганизацию = ДатаМСФО > ДатаНачалаВеденияУчетаМСФО;
	
	//ДатаЗапретаБух = АК_УчетМСФОПривилегированный.ПолучитьДатуЗапретаБух();
	ДатаЗапретаМСФОГод = НачалоДня(ОбщегоНазначенияПовтИсп.ПолучитьДатуЗапретаМСФО());	
	
	ДатыЗаполнены = ЗначениеЗаполнено(ДатаМСФО) И ЗначениеЗаполнено(ДатаУчета);
	
	Если НЕ ДатыЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(ДатаУчета) < ДатаЗапретаМСФОГод ИЛИ НачалоДня(ДатаУчета) < НачалоДня(ДатаМСФО) Тогда
		Возврат;			
	КонецЕсли;	
	
	НеобходимаКорректировка = Год(ДатаМСФО) <> Год(ДатаУчета);	
			
	Если НеобходимаКорректировка Тогда
		Если ДатаМСФО >= ДатаЗапретаМСФОГод Тогда 
			Если БухгалтерскийУчетВызовСервераПовтИспУФ.СчетВИерархии(КорректируемаяПроводка.СчетДТ, Счет44) Тогда 
				// Формирование проводки 44 - 60 с суммаМСФО = Сумма и прошлым годом
				НоваяПроводка = СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка,,,ЗаполнятьОрганизацию);			
				НоваяПроводка.Период 	= ДатаМСФО;
				НоваяПроводка.СуммаМСФО = КорректируемаяПроводка.Сумма;			
				//Формирование проводки 80.3 60 с СуммаМСФО = - Сумма текущим годом
				НоваяПроводка = СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка,,,ЗаполнятьОрганизацию);			
				НоваяПроводка.СчетДТ = ПланыСчетов.Финансовый.ПрибыльПрошлыхМесяцев;
				НоваяПроводка.СубконтоДТ.Очистить();
				НоваяПроводка.СуммаМСФО = -КорректируемаяПроводка.Сумма;
				
			ИначеЕсли КорректируемаяПроводка.СчетДТ = Счет68_2 И (НомерПроводки = -1 ИЛИ
				БухгалтерскийУчетВызовСервераПовтИспУФ.СчетВИерархии(ДвиженияФинансовый[НомерПроводки - 1].СчетДт, Счет44)) Тогда 
				
				КорректируемаяПроводка.СуммаМСФО = -КорректируемаяПроводка.Сумма;
				НоваяПроводка = СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка,,,ЗаполнятьОрганизацию);
				НоваяПроводка.Сумма 	= 0;				
				НоваяПроводка.СуммаМСФО = КорректируемаяПроводка.Сумма;
				НоваяПроводка.Период	= ДатаМСФО;
				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура ВыделитьДвиженияПрошлогоГода(ДвиженияФинансовый,КорректируемаяПроводка,ДатаМСФО,ДатаУчета) Экспорт
		
	ДатаНачалаВеденияУчетаМСФО = ПолучитьДатуНачалаУчетаМСФО();
	
	Если Не ЗначениеЗаполнено(ДатаНачалаВеденияУчетаМСФО) Тогда 
		Возврат;	
	КонецЕсли;	
	
	Если КорректируемаяПроводка.Сумма = 0 Тогда 
		Возврат;	
	КонецЕсли;		
	
	Если ДатаУчета < ДатаНачалаВеденияУчетаМСФО Тогда
		Возврат;
	КонецЕсли;
	
	//ЗаполнятьОрганизацию = ДатаМСФО > ДатаНачалаВеденияУчетаМСФО;
	
	ДатыЗаполнены = ЗначениеЗаполнено(ДатаМСФО) И ЗначениеЗаполнено(ДатаУчета);
	
	Если НЕ ДатыЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(ДатаУчета) < НачалоДня(ДатаМСФО) Тогда
		Возврат;			
	КонецЕсли;	
	
	НеобходимаКорректировка = (НачалоГода(ДатаМСФО) < НачалоГода(ДатаУчета));
			
	Если НеобходимаКорректировка Тогда
						
		СчетДтКорректировка = СчетДтКорректировка(КорректируемаяПроводка.СчетДт);
		Если СчетДтКорректировка = Неопределено Тогда
			//Отказ = Истина;
			//Сообщить("Для счета " + КорректируемаяПроводка.СчетДт + " не предусмотрена корректировка МСФО ранее даты запрета редактирования");
			Возврат;
		КонецЕсли;				
		
		Если СчетДтКорректировка <> ПланыСчетов.Финансовый.НалогиУН Тогда 
				
			НоваяПроводка = СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка);	
			УстановитьСчет(НоваяПроводка,ПланыСчетов.Финансовый.ЗатратыПрошлыхПериодов,Истина);
			ЗаполнитьСубконтоКтПоДт(НоваяПроводка);
			НоваяПроводка.Сумма = -КорректируемаяПроводка.Сумма;
				
			НоваяПроводка = СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка);
			УстановитьСчет(НоваяПроводка,ПланыСчетов.Финансовый.ЗатратыПрошлыхПериодов,Истина);
			ЗаполнитьСубконтоКтПоДт(НоваяПроводка);
			УстановитьСчет(НоваяПроводка,ПланыСчетов.Финансовый.ПрибыльПрошлыхМесяцев);
			НоваяПроводка.Сумма = КорректируемаяПроводка.Сумма;
			
		Иначе 
				
			ПоледняяПроводка = ПоследняяСтрока(ДвиженияФинансовый);
			Если ПоледняяПроводка <> Неопределено Тогда
					
				НоваяПроводка = СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка);	
				УстановитьСчет(НоваяПроводка,ПланыСчетов.Финансовый.ЗатратыПрошлыхПериодов,Истина);
				ЗаполнитьСубконтоКтПоПоследней(ПоледняяПроводка,НоваяПроводка);
				НоваяПроводка.Сумма = -КорректируемаяПроводка.Сумма;
			
				НоваяПроводка = СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка);
				УстановитьСчет(НоваяПроводка,ПланыСчетов.Финансовый.ЗатратыПрошлыхПериодов,Истина);			 
				ЗаполнитьСубконтоКтПоПоследней(ПоледняяПроводка,НоваяПроводка);
				УстановитьСчет(НоваяПроводка,ПланыСчетов.Финансовый.ПрибыльПрошлыхМесяцев);
				НоваяПроводка.Сумма = КорректируемаяПроводка.Сумма;
				
			КонецЕсли;
				
		КонецЕсли;			
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура  ЗаполнитьСубконтоКтПоПоследней(ПоледняяПроводка,НоваяПроводка)	
	
	Для Каждого Субконто из НоваяПроводка.СубконтоКт Цикл
		
		НоваяПроводка.СубконтоКт.Удалить(Субконто.Ключ);	
		
	КонецЦикла;
	
	Если ПоледняяПроводка <> Неопределено Тогда
		Для каждого Субконто Из ПоледняяПроводка.СубконтоКт Цикл
			Если Субконто.Значение <> Неопределено Тогда
				НоваяПроводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

Функция ПоследняяСтрока(ДвиженияФинансовый)

	ВсегоСтрок = ДвиженияФинансовый.количество();
	Если ВсегоСтрок > 0 Тогда
		Для НомерСтроки = 0 по ВсегоСтрок-1 Цикл 	
			ДанныеСтроки = ДвиженияФинансовый[ВсегоСтрок-1-НомерСтроки]; 		 	
		    Если ДанныеСтроки.СчетКт = ПланыСчетов.Финансовый.ЗатратыПрошлыхПериодов Тогда
	       		Возврат ДанныеСтроки;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;		
	
КонецФункции	
	
Процедура ЗаполнитьСубконтоКтПоДт(НоваяПроводка)
	
	Если ТипЗнч(НоваяПроводка) = Тип("СтрокаТаблицыЗначений") Тогда
		Для НомерСубконто = 1 по 3 Цикл
			НоваяПроводка["СубконтоКт"+НомерСубконто] = НоваяПроводка["СубконтоДт"+НомерСубконто];		
			НоваяПроводка["ВидСубконтоКт"+НомерСубконто] = НоваяПроводка["ВидСубконтоДт"+НомерСубконто];			
		КонецЦикла;
	Иначе 	
		Для каждого Субконто Из НоваяПроводка.СубконтоДт Цикл
			Если Субконто.Значение <> Неопределено Тогда
				НоваяПроводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
КонецПроцедуры 

Процедура УстановитьСчет(Проводка,Счет,ЭтоКредит=Ложь)
	
	Если ЭтоКредит Тогда
		Проводка.СчетКт = Счет;
		Если ТипЗнч(Проводка) = Тип("РегистрБухгалтерииЗапись.Финансовый") Тогда

			Для Каждого Субконто из Проводка.СубконтоКт Цикл
				
				Если Проводка.СубконтоКт[Субконто.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;												
				СохранитьСубконто = Ложь;				
				Для каждого ВидСубконто из Счет.ВидыСубконто Цикл
					Если Субконто.Ключ = ВидСубконто.ВидСубконто Тогда
			    		СохранитьСубконто = Истина;
					КонецЕсли;	
				КонецЦикла;
				Если НЕ СохранитьСубконто Тогда				
					Проводка.СубконтоКт.Удалить(Субконто.Ключ);					
				КонецЕсли;
				
			КонецЦикла;	
		ИначеЕсли ТипЗнч(Проводка) = Тип("СтрокаТаблицыЗначений") Тогда	
			ОчиститьСубконтоВСтрокеТЗ(Проводка,ЭтоКредит);	
		КонецЕсли;			                      
	Иначе 
		Проводка.СчетДт = Счет;
		Если ТипЗнч(Проводка) = Тип("РегистрБухгалтерииЗапись.Финансовый") Тогда

			Для Каждого Субконто из Проводка.СубконтоДт Цикл
				
				Если Проводка.СубконтоДт[Субконто.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;												
				СохранитьСубконто = Ложь;				
				Для каждого ВидСубконто из Счет.ВидыСубконто Цикл
					Если Субконто.Ключ = ВидСубконто.ВидСубконто Тогда
			    		СохранитьСубконто = Истина;
					КонецЕсли;	
			    	СохранитьСубконто = Истина;
				КонецЦикла;
				Если НЕ СохранитьСубконто Тогда				
					Проводка.СубконтоДт.Удалить(Субконто.Ключ);					
				КонецЕсли;
				
			КонецЦикла;		
			
		ИначеЕсли ТипЗнч(Проводка) = Тип("СтрокаТаблицыЗначений") Тогда	
			ОчиститьСубконтоВСтрокеТЗ(Проводка,ЭтоКредит);		
			
		КонецЕсли;	
				
	КонецЕсли;
		
КонецПроцедуры

Процедура ОчиститьСубконтоВСтрокеТЗ(Проводка,ЭтоКредит)
	
	Если ЭтоКредит Тогда
		ДтКт = "Кт";
	Иначе 	
		ДтКт = "Дт";
	КонецЕсли;
	
	Для НомерСубконто = 1 по 3 Цикл
		Проводка["Субконто"+ДтКт+НомерСубконто] = Неопределено;
		Проводка["ВидСубконто"+ДтКт+НомерСубконто] = Неопределено;
	КонецЦикла;			
	
КонецПроцедуры

Функция ЭтоКорректировкаНДС(Счет)
	
	Если Лев(Счет,2) = "68" Тогда
		Возврат Истина;
	КонецЕсли;	
			
    Возврат Ложь;
	
КонецФункции	

Функция  СчетДтКорректировка(СчетДт)
	
	Если СчетДт.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения) ИЛИ
		 СчетДт = ПланыСчетов.Финансовый.НалогиУН тогда
		Возврат СчетДт;
	КонецЕсли;	
	//
	Возврат Неопределено;
	
КонецФункции	

Функция СоздатьКорректирующуюПроводку(ДвиженияФинансовый,КорректируемаяПроводка,ЗаполнитьДебет=Истина,ЗаполнитьКредит=Истина,ЗаполнитьОрганизацию=Истина)

 	НоваяПроводка = ДвиженияФинансовый.Добавить();
	
	Исключить = "Сумма,СуммаМСФО,ВалютнаяСуммаДт,ВалютнаяСуммаКт,КоличествоДт,КоличествоКт";
	Если не ЗаполнитьОрганизацию Тогда
		Исключить = Исключить + ",Организация";	
	КонецЕсли;	
				
	ЗаполнитьЗначенияСвойств(НоваяПроводка,КорректируемаяПроводка,,Исключить);
			
	Если ТипЗнч(НоваяПроводка) <> Тип("СтрокаТаблицыЗначений") Тогда
		ЗаполнитьСубконто(НоваяПроводка,КорректируемаяПроводка,ЗаполнитьДебет,ЗаполнитьКредит);
	КонецЕсли;	
	
	НоваяПроводка.Содержание = "(Корр. МСФО) " + НоваяПроводка.Содержание;
	
    СтруктураПроверки = Новый Структура("ИсходнаяПроводка",Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураПроверки,КорректируемаяПроводка);	
	Если СтруктураПроверки.ИсходнаяПроводка = Истина Тогда		
		КорректируемаяПроводка.ИсходнаяПроводка =Ложь;										
	КонецЕсли;	
		
	Возврат НоваяПроводка;

КонецФункции	
	
Функция  ДатаЗапретаМСФО(Организация) Экспорт

	Возврат АК_УчетМСФОПривилегированный.ПолучитьДатуЗапретаБух();
	
	//СоответствиеГраницЗапретаМСФО = ПолныеПрава.ПолучитьГраницыЗапретаИзмененияДанных(Истина).Получить();
	//
	//Результат = Дата(1,1,1);
	//Если СоответствиеГраницЗапретаМСФО = Неопределено Тогда
	//	Возврат Результат;
	//КонецЕсли;	

	//ГраницаПериодаПоОрганизацииМСФО = СоответствиеГраницЗапретаМСФО[Организация];	
	//ГраницаПериодаОбщаяПоОрганизацииМСФО = СоответствиеГраницЗапретаМСФО[Справочники.Организации.ПустаяСсылка()];       			
	//ГраницаПериодаОбщаяМСФО = СоответствиеГраницЗапретаМСФО["ОбщаяДатаЗапретаРедактирования"];

	//Если Результат < ГраницаПериодаПоОрганизацииМСФО Тогда
	//	Результат = ГраницаПериодаПоОрганизацииМСФО;	
	//КонецЕсли;
	//
	//Если Результат < ГраницаПериодаОбщаяПоОрганизацииМСФО Тогда
	//	Результат = ГраницаПериодаОбщаяПоОрганизацииМСФО;	
	//КонецЕсли;

	//Если Результат < ГраницаПериодаОбщаяМСФО Тогда
	//	Результат = ГраницаПериодаОбщаяМСФО;	
	//КонецЕсли;
	//
	//Возврат Результат;

КонецФункции

Процедура ЗаполнитьСубконто(НоваяПроводка,КорректируемаяПроводка,ЗаполнитьДебет=Истина,ЗаполнитьКредит=Истина) Экспорт
	
	Если  ЗаполнитьКредит Тогда
		Для каждого Субконто Из КорректируемаяПроводка.СубконтоКт Цикл
			Если Субконто.Значение <> Неопределено Тогда
				НоваяПроводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаполнитьДебет Тогда
		Для каждого Субконто Из КорректируемаяПроводка.СубконтоДт Цикл
			Если Субконто.Значение <> Неопределено Тогда
				НоваяПроводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОЗапретеПроведеннияКорректировкиМСФОВЗакрытомПериоде(ДатаЗапрета,КоличествоПроводокЗапрещено) Экспорт
	
	Если ТипЗнч(КоличествоПроводокЗапрещено) = Тип("Число") Тогда
		Если КоличествоПроводокЗапрещено > 0 Тогда
			Сообщить("Не проведены корректировки МСФО в закрытом периоде. Граница запрета: " + ДатаЗапрета );
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВыполнитьКорректировкуМСФОДляДокумента(Документ,ДобавлятьДвижения = Истина) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеДопРасходов")	Тогда
	
		НаборДвижения = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();	
		НаборДвижения.Отбор.Регистратор.Установить(Документ);
		НаборДвижения.Прочитать();
		ТаблицаДвижений = НаборДвижения.Выгрузить();
		
		Если ТаблицаДвижений.Количество() > 0 Тогда
			УдалитьКорректировкиМСФО(ТаблицаДвижений);	
			Если ДобавлятьДвижения Тогда
				ДобавитьКорректировкуМСФО(ТаблицаДвижений);
			КонецЕсли;	
			НаборДвижения.Загрузить(ТаблицаДвижений);
			НаборДвижения.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
		НаборДвижения = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();	
		НаборДвижения.Отбор.Регистратор.Установить(Документ);
		НаборДвижения.Прочитать();
		ТаблицаДвижений = НаборДвижения.Выгрузить();
		
		Если ТаблицаДвижений.Количество() > 0 Тогда
			УдалитьКорректировкиМСФО(ТаблицаДвижений);	
			Если ДобавлятьДвижения Тогда
				КорректировкаАваносовыйОтчет(Документ,ТаблицаДвижений);
			КонецЕсли;	
			НаборДвижения.Загрузить(ТаблицаДвижений);
			Попытка
				НаборДвижения.Записать();
			Исключение
				Сообщить("Не удалось корректировать документ: " + Документ);	
			КонецПопытки;	
		КонецЕсли;
		
				
	КонецЕсли;	
		
КонецПроцедуры	

//+++АК VERT 2018.03.15 ИП-00017883
Процедура ОткорректироватьДвиженияДокументаМСФО(ТаблицаДвижений, ДатаУчета, ДатаМСФО, ДатаОтраженияМСФО) Экспорт
	КоличествоСтрок = ТаблицаДвижений.КОличество(); //Для каждого не гарантирует порядок
	Для Счетчик = 0 ПО КоличествоСтрок - 1 Цикл
		Движение = ТаблицаДвижений[Счетчик];
		Если Движение.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;		
		
		АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(ТаблицаДвижений,Движение,ДатаМСФО, ДатаУчета, ДатаОтраженияМСФО, , Счетчик);
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура УдалитьКорректировкиМСФО(ТаблицаДвижений)
	
	ТаблицаДвижений.Колонки.Добавить("Удалить");
	
	Для каждого Строка из ТаблицаДвижений Цикл
		
		Если Строка.Сумма <> 0 Тогда
			Строка.СуммаМСФО = 0;
			Если Лев(Строка.Содержание,12) = "(Корр. МСФО)" Или Лев(Строка.Содержание,20) = "(Корректировка МСФО)" Тогда
				Если Строка.СчетКт = ПланыСчетов.Финансовый.ЗатратыПрошлыхПериодов Тогда
					Строка.Удалить = Истина;
				КонецЕсли;	
				Если Строка.СчетДт = ПланыСчетов.Финансовый.Вспомогательный Тогда
					Строка.Удалить = Истина;
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли Строка.СуммаМСФО <> 0 Тогда
			Строка.Удалить = Истина;	
		КонецЕсли;	
		
	КонецЦикла;                                                                                                         
	
	Отбор = Новый Структура("Удалить",Истина);
	НайтиСтроки = ТаблицаДвижений.НайтиСтроки(Отбор);
	
	Для каждого СтрокаУдалить из НайтиСтроки Цикл
		ТаблицаДвижений.Удалить(СтрокаУдалить);
	КонецЦикла;	
		
КонецПроцедуры


Процедура  ДобавитьКорректировкуМСФО(ТаблицаДвижений) Экспорт
	
	Для каждого Движение из ТаблицаДвижений Цикл 	
		
		Если Движение.СуммаМСФО <> 0 Тогда
			Продолжить;
		КонецЕсли;			
		
		Если НужнаКорректировка(Движение) Тогда	
		
			АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(ТаблицаДвижений,Движение,Движение.Регистратор.ДатаВходящегоДокумента,Движение.Регистратор.Дата);	
						
		КонецЕсли;	
		
	КонецЦикла;	
		
КонецПроцедуры

Функция НужнаКорректировка(Движение)
	
	Если ТипЗнч(Движение.Регистратор) =Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		ТипЗнч(Движение.Регистратор) =Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Если Лев(Движение.СчетКт.Код,2) = "60" ИЛИ Лев(Движение.СчетКт.Код,2) = "76" Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
		
	Если ТипЗнч(Движение.Регистратор) =Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Если Лев(Движение.СчетКт.Код,2) = "60" ИЛИ Лев(Движение.СчетКт.Код,2) = "76" Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Процедура КорректировкаАваносовыйОтчет(АваносовыйОтчет,ТаблицаДвижений)
	
	//Так как мы не знаем наверняка какая строка каку проводку создала
	НоваяКолонка = ТаблицаДвижений.Колонки.Добавить("ИсходнаяПроводка");
	
	Если АваносовыйОтчет.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.Наличные Тогда
		Счет = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами;
	Иначе
		Счет = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
	КонецЕсли;
	
	Для Каждого ТекСтрокаУслуги Из АваносовыйОтчет.Услуги Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаУслуги.ДатаВходящегоДокумента) Тогда
			Продолжить;
		КонецЕсли;	
			
		Если НачалоМесяца(ТекСтрокаУслуги.ДатаВходящегоДокумента) <> НачалоМесяца(АваносовыйОтчет.Дата) Тогда
		
			СуммаВсего = 0;
			СуммаНДСОтдельно = 0;
			Если АваносовыйОтчет.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
				СуммаВсего = ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаНДС;
			Иначе
				СуммаВсего = ТекСтрокаУслуги.Сумма;
			КонецЕсли;
			СуммаНДСОтдельно = ТекСтрокаУслуги.СуммаНДС;
					
			Проводка = ТаблицаДвижений.Добавить();
			Проводка.Активность = ИСТИНА;
			Проводка.НомерСтроки = ПолучитьНовыйНомерСтроки(ТаблицаДвижений);
			Проводка.Период	= АваносовыйОтчет.Дата;
			Проводка.СчетДт	= ТекСтрокаУслуги.СчетЗатрат;
			//ТекНоменклатура 		= ТекСтрокаУслуги.Номенклатура;
			
			
			УстановитьСубконтоТЗ(Проводка,"Дт", 1, ТекСтрокаУслуги.Субконто1);
			УстановитьСубконтоТЗ(Проводка,"Дт", 2, ТекСтрокаУслуги.Субконто2);
			УстановитьСубконтоТЗ(Проводка,"Дт", 3, ТекСтрокаУслуги.Субконто3);
			
			Проводка.Содержание				= ТекСтрокаУслуги.Содержание;
			
			Проводка.СчетКт	= Счет;
			УстановитьСубконтоТЗ(Проводка,"Кт", 1, АваносовыйОтчет.Организация);
			УстановитьСубконтоТЗ(Проводка,"Кт", 2, АваносовыйОтчет.ФизЛицо);
			
			
			Проводка.Организация 			= АваносовыйОтчет.Организация;
			Проводка.ИсходнаяПроводка = Истина;
			Проводка.Сумма 	= СуммаВсего;
			Проводка.Регистратор = АваносовыйОтчет;
			
			КорректироватьПериодДвиженияМСФО(ТаблицаДвижений,Проводка,ТекСтрокаУслуги.ДатаВходящегоДокумента,АваносовыйОтчет.Дата);
			
			Если Проводка.СуммаМСФО <> 0 Тогда
				Проводка.Сумма 	= 0;
				Проводка.ИсходнаяПроводка = Ложь;
			КонецЕсли;	
			
			НастройкаОтраженияНДСПоТоварам = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыПоступлениеТоваровИУслуг, АваносовыйОтчет.Дата);
			
			Если СуммаНДСОтдельно <> 0 Тогда
				Проводка = ТаблицаДвижений.Добавить();
				Проводка.Активность = ИСТИНА;
				Проводка.НомерСтроки = ПолучитьНовыйНомерСтроки(ТаблицаДвижений);
			
				Проводка.Период = АваносовыйОтчет.Дата;
				Проводка.СчетДт = НастройкаОтраженияНДСПоТоварам.Счет;
				
				
				УстановитьСубконтоТЗ(Проводка,"Дт", 1, АваносовыйОтчет.Организация);
				УстановитьСубконтоТЗ(Проводка,"Дт", 2, НастройкаОтраженияНДСПоТоварам.ДопРеквизит);
				УстановитьСубконтоТЗ(Проводка,"Дт", 3, ТекСтрокаУслуги.СтавкаНДС);
			
				Проводка.СчетКт 				= Счет;
				УстановитьСубконтоТЗ(Проводка,"Кт", 1, АваносовыйОтчет.Организация);
				УстановитьСубконтоТЗ(Проводка,"Кт", 2, АваносовыйОтчет.ФизЛицо);

				Проводка.Организация 			= АваносовыйОтчет.Организация;
				Проводка.ИсходнаяПроводка = Истина;

				Проводка.Сумма 					= СуммаНДСОтдельно;
				Проводка.Регистратор = АваносовыйОтчет;
				
				КорректироватьПериодДвиженияМСФО(ТаблицаДвижений,Проводка,ТекСтрокаУслуги.ДатаВходящегоДокумента,АваносовыйОтчет.Дата);
				
				Если Проводка.СуммаМСФО <> 0 Тогда
					Проводка.Сумма 	= 0;
					Проводка.ИсходнаяПроводка = Ложь;
				КонецЕсли;	
			КонецЕсли;
 			
		КонецЕсли;
	
	КонецЦикла;
	
	НастройкаОтраженияНДСПоТоварам = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыПоступлениеТоваровИУслуг, АваносовыйОтчет.Дата);
	
	Для Каждого ТекСтрокаТовары Из АваносовыйОтчет.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаТовары.ДатаВходящегоДокумента) Тогда
			Продолжить;
		КонецЕсли;	
				
		Если НачалоМесяца(ТекСтрокаТовары.ДатаВходящегоДокумента) <> НачалоМесяца(АваносовыйОтчет.Дата) Тогда
			
			СуммаВсего = 0;
			СуммаНДСОтдельно = 0;
			Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоТоварам.Счет) Тогда
				Если АваносовыйОтчет.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
					СуммаВсего = ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаНДС;
				Иначе
					СуммаВсего = ТекСтрокаТовары.Сумма;
				КонецЕсли;
				СуммаНДСОтдельно = ТекСтрокаТовары.СуммаНДС;
			Иначе	
				Если АваносовыйОтчет.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
					СуммаВсего = ТекСтрокаТовары.Сумма;
				Иначе
					СуммаВсего = ТекСтрокаТовары.Сумма + ТекСтрокаТовары.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			Проводка = ТаблицаДвижений.Добавить();
			Проводка.Активность = ИСТИНА;
			
			Проводка.НомерСтроки = ПолучитьНовыйНомерСтроки(ТаблицаДвижений);
			
			Проводка.Период 		= АваносовыйОтчет.Дата;
			Проводка.СчетДт 		= ТекСтрокаТовары.СчетУчета;
			ТекНоменклатура 		= ТекСтрокаТовары.Номенклатура;
			
			УстановитьСубконтоТЗ(Проводка,"Дт", 1, ТекСтрокаТовары.Субконто1);
			УстановитьСубконтоТЗ(Проводка,"Дт", 2, ТекСтрокаТовары.Субконто2);
			УстановитьСубконтоТЗ(Проводка,"Дт", 3, ТекСтрокаТовары.Субконто3);
			
			Проводка.Содержание				= ТекСтрокаТовары.Содержание;
			
			Проводка.СчетКт 				= Счет;
			
			УстановитьСубконтоТЗ(Проводка,"Кт", 1, АваносовыйОтчет.Организация);
			УстановитьСубконтоТЗ(Проводка,"Кт", 2, АваносовыйОтчет.ФизЛицо);
			
			Проводка.ИсходнаяПроводка = Истина;
			Проводка.Сумма = ТекСтрокаТовары.Сумма;   
			Проводка.Регистратор = АваносовыйОтчет;
			
			КорректироватьПериодДвиженияМСФО(ТаблицаДвижений,Проводка,ТекСтрокаТовары.ДатаВходящегоДокумента,АваносовыйОтчет.Дата);
			
			Если Проводка.СуммаМСФО <> 0 Тогда
				Проводка.Сумма 	= 0;
				Проводка.ИсходнаяПроводка = Ложь;
			КонецЕсли;	
			
			Если СуммаНДСОтдельно <> 0 Тогда
				Проводка = ТаблицаДвижений.Добавить();
				Проводка.Активность = ИСТИНА;
				Проводка.НомерСтроки = ПолучитьНовыйНомерСтроки(ТаблицаДвижений);
			
				Проводка.Период = АваносовыйОтчет.Дата;
				Проводка.СчетДт = НастройкаОтраженияНДСПоТоварам.Счет;
				
				УстановитьСубконтоТЗ(Проводка,"Дт", 1, АваносовыйОтчет.Организация);
				УстановитьСубконтоТЗ(Проводка,"Дт", 2, НастройкаОтраженияНДСПоТоварам.ДопРеквизит);
				УстановитьСубконтоТЗ(Проводка,"Дт", 3, ТекСтрокаУслуги.СтавкаНДС);

				
				Проводка.СчетКт 				= Счет;
				УстановитьСубконтоТЗ(Проводка,"Кт", 1, АваносовыйОтчет.Организация);
				УстановитьСубконтоТЗ(Проводка,"Кт", 2, АваносовыйОтчет.ФизЛицо);

				Проводка.Организация 			= АваносовыйОтчет.Организация;
				Проводка.ИсходнаяПроводка = Истина;

				Проводка.Сумма 					= СуммаНДСОтдельно;
				Проводка.Регистратор = АваносовыйОтчет;
				
				КорректироватьПериодДвиженияМСФО(ТаблицаДвижений,Проводка,ТекСтрокаТовары.ДатаВходящегоДокумента,АваносовыйОтчет.Дата);
				
                Если Проводка.СуммаМСФО <> 0 Тогда
					Проводка.Сумма 	= 0;
					Проводка.ИсходнаяПроводка = Ложь;
				КонецЕсли;	
				
			КонецЕсли;


		КонецЕсли;	
	КонецЦикла;
	
	ОтборИсходнаяПроводка = Новый Структура("ИсходнаяПроводка",Истина);
	СтрокиИсходнаяПроводка = ТаблицаДвижений.НайтиСтроки(ОтборИсходнаяПроводка);
	Для каждого СтрокаИсходнаяПроводка из СтрокиИсходнаяПроводка Цикл
		ТаблицаДвижений.Удалить(СтрокаИсходнаяПроводка);
	КонецЦикла;	
	
	
КонецПроцедуры	

Функция ПолучитьНовыйНомерСтроки(Таблица)
	Максимум = 0;
	для Каждого Строка из Таблица Цикл
		Если Строка.НомерСтроки > Максимум Тогда
			Максимум = Строка.НомерСтроки;	
	    КонецЕсли;
	КонецЦикла;	
	Возврат Максимум+1;
КонецФункции	

Процедура ЗаполнитьОрганизацию(ДвиженияФинансовый,Организация) Экспорт

	//+++АК ZICD 20.01.2017
	//ДатаНачалаУчетаМСФО = Константы.АК_НачалоВеденияУчетаМСФО.Получить();
	ДатаНачалаУчетаМСФО = ПолучитьДатуНачалаУчетаМСФО();
	//---АК
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаУчетаМСФО) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Запись Из ДвиженияФинансовый Цикл
		
		Если Запись.Период < ДатаНачалаУчетаМСФО Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.Организация = Организация;
		
	КонецЦикла;;	
	
КонецПроцедуры
	
Процедура УстановитьСубконтоТЗ(Проводка, ДтКт, ИмяСубконто, ЗначениеСубконто)
	
	Если ДтКт = "Кт" Тогда
		Счет = Проводка.СчетКт;
	Иначе 
		Счет = Проводка.СчетДт;
	КонецЕсли;	
		
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

     ВидыСубконтоСчета = Счет.ВидыСубконто;

	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда
		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;
		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;
	Иначе
		Если Метаданные.ПланыСчетов.Найти("Финансовый") <> Неопределено И ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Финансовый") Тогда
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконто[ИмяСубконто];
		ИначеЕсли Метаданные.ПланыСчетов.Найти("Хозрасчетный") <> Неопределено И ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];
		Иначе
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконто[ИмяСубконто];
		КонецЕсли;
		Если ВидыСубконтоСчета.Найти( ВидСубк) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Проводка["ВидСубконто"+ДтКт+ИмяСубконто] = ВидСубк;
	Проводка["Субконто"+ДтКт+ИмяСубконто] = ЗначениеСубконто;

КонецПроцедуры 

Процедура ЗаполнитьОрганизациюРегистратора(ДатаНачала,ДатаОкончания) Экспорт
	
	АК_УчетМСФОПривилегированный.ЗаполнитьОрганизациюРегистратора(ДатаНачала,ДатаОкончания);	
	
КонецПроцедуры	

//+++АК ZICD 27.12.2016 ИП-00014363
Функция ОрганизацияВкусВилл(ДатаПроводки = Неопределено, НачалоУчётаМСФО = Неопределено) Экспорт
	
	Если НачалоУчётаМСФО = Неопределено Тогда
		НачалоУчётаМСФО = ПолучитьДатуНачалаУчетаМСФО();
	КонецЕсли;
	
	Если НачалоУчётаМСФО = Дата("00010101000000") Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ДатаПроводки = Неопределено Тогда
		ДатаПроводки = ПолныеПрава.ТекущаяДатаСервера();
	КонецЕсли;
	
	Если НачалоУчётаМСФО > ДатаПроводки Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	
КонецФункции
//---АК

//+++АК ZICD 28.12.2016 ИП-00014363
Функция ПолучитьОрганизациюПоДоговору(Договор, ДатаПроводки = Неопределено, НачалоУчётаМСФО = Неопределено) Экспорт
	
	//+++АК ZICD 10.01.2016 ИП-00014363
	//
	//Если НачалоУчётаМСФО = Неопределено Тогда
	//	НачалоУчётаМСФО = АК_УчетМСФОПривилегированный.ПолучитьДатуНачалаУчетаМСФО();
	//КонецЕсли;
	//
	//Если НачалоУчётаМСФО = Дата("00010101000000") Тогда
	//	Возврат Справочники.Организации.ПустаяСсылка();
	//КонецЕсли;
	//
	//Если ДатаПроводки = Неопределено Тогда
	//	ДатаПроводки = ПолныеПрава.ТекущаяДатаСервера();
	//КонецЕсли;
	//
	//Если НачалоУчётаМСФО > ДатаПроводки Тогда
	//	Возврат Справочники.Организации.ПустаяСсылка();
	//КонецЕсли;
	//
	//Если Договор = Неопределено Или Договор.Пустая() Тогда
	//	Возврат Справочники.Организации.ПустаяСсылка();
	//КонецЕсли;
	//
	//Возврат Договор.Организация;
	Возврат ПолучитьОрганизациюИзСсылки(Договор, ДатаПроводки, НачалоУчётаМСФО);
	//---АК
	
КонецФункции
//---АК

//+++АК ZICD 10.01.2016 ИП-00014363
Функция ПолучитьОрганизациюИзСсылки(Ссылка, ДатаПроводки = Неопределено, НачалоУчётаМСФО = Неопределено) Экспорт
	
	Если НачалоУчётаМСФО = Неопределено Тогда
		НачалоУчётаМСФО = ПолучитьДатуНачалаУчетаМСФО();
	КонецЕсли;
	
	Если НачалоУчётаМСФО = Дата("00010101000000") Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ДатаПроводки = Неопределено Тогда
		ДатаПроводки = ПолныеПрава.ТекущаяДатаСервера();
	КонецЕсли;
	
	Если НачалоУчётаМСФО > ДатаПроводки Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если Ссылка = Неопределено Или Ссылка.Пустая() Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка.Организация;
	
КонецФункции
//---АК

//+++АК Susk (Суслин К.В.) 2017.12.21 ИП-00016528
Функция ПолучитьСчетУчетаПриобретенияОС(Партия, ОсновноеСредство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФинансовыйДвиженияССубконто.СчетДт КАК Счет,
	|	ФинансовыйДвиженияССубконто.СубконтоДт1 КАК ОС
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И Счет В (&Счета)
	|				И Субконто1 = &ОС,
	|			,
	|			) КАК ФинансовыйДвиженияССубконто";
	
	
	Запрос.УстановитьПараметр("Регистратор", Партия);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000);
	
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	Запрос.УстановитьПараметр("ОС", ОсновноеСредство);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		Возврат Выборка.Счет;
	КонецЕсли;
	
	Возврат ПланыСчетов.Финансовый.ПустаяСсылка();
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.02.08 ИП-00017835
Функция ВернутьСуммуДляОприходованияОСНа0110(Дата) Экспорт
 
	Возврат ?(Дата > Дата("20180101"), 40000, 100000);

КонецФункции

Функция ПолучитьДатуНачалаУчетаМСФО() Экспорт
	Возврат Дата("20170101000000");
КонецФункции
