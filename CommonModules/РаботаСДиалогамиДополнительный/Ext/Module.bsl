
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОСТАТКОВ ОТПУСКОВ

Функция ГрафикОтпусков_ЦветПлана() Экспорт
	
	Возврат WebЦвета.ТусклоОливковый;
	
КонецФункции

Функция ГрафикОтпусков_ЦветПланаНеУтвержденного() Экспорт
	
	Возврат WebЦвета.НейтральноСерый;
	
КонецФункции

Функция ГрафикОтпусков_ЦветФакта() Экспорт
	
	Возврат WebЦвета.ГолубойСоСтальнымОттенком;
	
КонецФункции

Функция ГрафикОтпусков_ЦветМероприятий() Экспорт
	
	Возврат WebЦвета.БледноМиндальный;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";
		
	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
//     Параметры:
//          Счет - выбранный счет
//          Форма - форма(или табличное поле) на которой расположены счет и субконто
//          Префикс - префекс наименования субконто. к префиксу добавляется номер субконто на счете
//                    для подписи с наименованием субконто предполагается имя
//                    вида "Надпись" + Префикс + НомерСубконто
//                    в случае если форма - это таб.поле, то надписи не устанавливаются
//
Процедура ПриВыбореСчета(Счет, Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3, ПолеСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,НадписьСубконто1,Субконто2,НадписьСубконто2,Субконто3,НадписьСубконто3", Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		ЭлементыСубконто["Субконто" + Сч].ВыбиратьТип = Ложь;
		
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение) <> ЭлементыСубконто["Субконто" + Сч].Значение Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение);
		КонецЕсли;

		ЭлементыСубконто["НадписьСубконто" + Сч].Заголовок = Счет.ВидыСубконто[Сч - 1].ВидСубконто.Наименование + ":";
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
		
		Если Не ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = Ложь;
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = Ложь;
		
	КонецЦикла;
	
	Если ПолеСчет <> НЕОПРЕДЕЛЕНО Тогда
		ПолеСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  Форма - Форма, в которой производится выбор
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год 4-мя цифрами или 2-мя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремяДня(Форма, ДатаВремен, ТекЭлемент, Пользователь, ПоГрафику = Истина, ПолныйГод = Истина, ВыбиратьТолькоВремя = Ложь, ДатаНачала = Неопределено) Экспорт

	ДлинаЧаса = 3600;
	
	Если ПоГрафику Тогда
		СтруктураРабочегоВремени = УправлениеКонтактами.ОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, ДатаВремен);
		
		НачалоРабочегоДняКонстанта    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДняКонстанта = СтруктураРабочегоВремени.ДатаОкончания;
	Иначе
		НачалоРабочегоДняКонстанта      = '00010101000000';
		ОкончаниеРабочегоДняКонстанта   = '00010101235959';
	КонецЕсли;
		
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ДатаВремен) + Час(НачалоРабочегоДняКонстанта) * ДлинаЧаса + Минута(НачалоРабочегоДняКонстанта)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ДатаВремен) + Час(ОкончаниеРабочегоДняКонстанта) * ДлинаЧаса + Минута(ОкончаниеРабочегоДняКонстанта)*60) - ДлинаЧаса;

	// Если в процедуру дата начала не передана, список начнется с даты начала рабочего дня
	// В противном случае, необходимо взять из даты начала время, а саму дату взять из ДатаВремен
	ВремяНачала = ?(ДатаНачала = Неопределено, НачалоРабочегоДня, НачалоДня(ДатаВремен) + (ДатаНачала - НачалоДня(ДатаНачала)));
	ВремяСписка = ВремяНачала;
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		Если НЕ ЗначениеЗаполнено(ВремяСписка) И ВыбиратьТолькоВремя Тогда
			ПредставлениеВремени = "00:00";
			
		Иначе
			Если ВыбиратьТолькоВремя Тогда
				ПредставлениеВремени = Формат(ВремяСписка,"ДФ=ЧЧ:мм");
				
			Иначе
				ПредставлениеВремени = Формат(ВремяСписка,"ДФ='дд.ММ.гг" + ?(ПолныйГод,"гг","") + " ЧЧ:мм'");
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			РазностьДат = (ВремяСписка - ВремяНачала) / ДлинаЧаса;
			
			Если РазностьДат = 0 Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (0 мин.)";
				
			ИначеЕсли РазностьДат = 0.5 Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (30 мин.)";
				
			Иначе
				ПредставлениеВремени = ПредставлениеВремени + " (" + РазностьДат + " час.)";
				
			КонецЕсли;
		КонецЕсли;
		
		СписокВремен.Добавить(ВремяСписка, ПредставлениеВремени);
		
		ВремяСписка = ВремяСписка + ДлинаЧаса / 2; // по полчаса
	КонецЦикла;

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли;

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // ВыбратьВремя()


////////////////////////////////////////////////////////////////////////////////

Процедура ПроверкаВыбранногоЗначения(Значение,СтандартнаяОбработка = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		 
		Если Значение.ПометкаУдаления = Истина Тогда
			СтандартнаяОбработка = Ложь;
			Значение = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
			Сообщить("Не допускается выбор помеченной на удаление статьи");
		КонецЕсли;	 
		 
	КонецЕсли; 
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
		 
		Если Значение.ПометкаУдаления = Истина Тогда
			СтандартнаяОбработка = Ложь;
			Значение = Справочники.СтатьиДоходовРасходов.ПустаяСсылка();
			Сообщить("Не допускается выбор помеченной на удаление статьи");
		КонецЕсли;	 
		 
	КонецЕсли; 
КонецПроцедуры	