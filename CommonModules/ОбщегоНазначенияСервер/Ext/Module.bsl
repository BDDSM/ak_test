////////////////////////////////////////////////////////////////////////////////
// Работа с массивами и таблицами значений

// Функция возвращает результат вычитания элементов множества таблицы
// ТаблицаВычитаемая из ТаблицаОсновная.
//
Функция ВычестьТаблицу(знач ТаблицаОсновная,
                       знач ТаблицаВычитаемая,
                       знач КолонкаСравненияОсновнойТаблицы = "",
                       знач КолонкаСравненияВычитаемойТаблицы = "") Экспорт
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияОсновнойТаблицы) Тогда
		КолонкаСравненияОсновнойТаблицы = "Значение";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияВычитаемойТаблицы) Тогда
		КолонкаСравненияВычитаемойТаблицы = "Значение";
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = ТаблицаОсновная.Скопировать();
	
	Для Каждого Элемент Из ТаблицаВычитаемая Цикл
		Значение = Элемент[КолонкаСравненияОсновнойТаблицы];
		НайденнаяСтрока = ТаблицаРезультат.Найти(Значение, КолонкаСравненияОсновнойТаблицы);
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаРезультат.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьТаблицуСравнения(ТаблицаИнициализации = Неопределено,
                                ИмяКолонкиСравнения = "Значение") Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить(ИмяКолонкиСравнения);
	
	Если ТаблицаИнициализации <> Неопределено Тогда
		
		МассивЗначений = ТаблицаИнициализации.ВыгрузитьКолонку(ИмяКолонкиСравнения);
		
		Для Каждого Элемент Из ТаблицаИнициализации Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Установить(0, Элемент[ИмяКолонкиСравнения]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции

Функция ЗапретитьОткрытиеНесколькихСеансов() Экспорт
	
	ЗапретитьОткрытиеНесколькихСеансов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапретитьОткрытиеНесколькихСеансов");
	
	Если НЕ ЗапретитьОткрытиеНесколькихСеансов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
	УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8") 
		   И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
		   И (НЕ ТекСоединение.Пользователь = неопределено)
		   И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
		  
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;	
	
	 Возврат Ложь;
	 
 КонецФункции // 

Функция ПолучитьПоследнююДатуДвиженияПоРегиструТоварыНаСкладах(Регистратор)Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ТоварыНаСкладах.Период) КАК Период
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ
	|	ТоварыНаСкладах.Регистратор = &Регистратор");
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()Тогда
		Возврат Выборка.Период;
	КонецЕсли;
	
	Возврат Дата(1,1,1);
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.12.04 ИП-00020497
Функция ПолучитьНастройкиОтраженияОперацийВУчете(ВидОперации, Период, Организация = Неопределено) Экспорт 
	
	//Отбор = Новый Структура("ВидОперации,Организация", ВидОперации, ?(Организация = Неопределено, Справочники.Организации.ПустаяСсылка(), Организация));
	//Возврат РегистрыСведений.НастройкаОтраженияОперацийВУчете.ПолучитьПоследнее(Период, Отбор);
	
	//переписал на запрос, плюс разрез по организации.	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Период,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Организация,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров41,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит1,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопСтатьяДвиженияТоваров,
	               |	ВЫБОР
	               |		КОГДА НастройкаОтраженияОперацийВУчетеСрезПоследних.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(
	               |			&Период,
	               |			ВидОперации = &ВидОперации
	               |				И (Организация = &Организация
	               |					ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", ?(Организация = Неопределено, Справочники.Организации.ПустаяСсылка(), Организация));
	
	СтруктураЗначений = Новый Структура("Период,ВидОперации,Счет,ЦФО,СтатьяДоходовРасходов,СтруктурнаяЕдиница,СтатьяДвиженияТоваров,СтатьяДвиженияТоваров41,ДопРеквизит,ДопРеквизит1,ДопСтатьяДвиженияТоваров");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЗначений, Выборка);		
	КонецЕсли;                   
	
	Возврат СтруктураЗначений;
		
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.12.04 ИП-00020497
Функция ПолучитьНастройкиОтраженияОперацийВУчетеДляГруппыОпераций(СписокВидовОпераций, Период, Организация = Неопределено) Экспорт 
	
	//переписал на запрос, плюс разрез по организации.	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Период,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Организация,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров41,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит1,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопСтатьяДвиженияТоваров
	               |ИЗ
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(
	               |			&Период,
	               |			ВидОперации В (&СписокВидовОпераций)
	               |				И Организация = &Организация) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
	
	Запрос.УстановитьПараметр("СписокВидовОпераций", СписокВидовОпераций);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", ?(Организация = Неопределено, Справочники.Организации.ПустаяСсылка(), Организация));
	
	СтруктураЗначений = Новый Структура("Период,ВидОперации,Счет,ЦФО,СтатьяДоходовРасходов,СтруктурнаяЕдиница,СтатьяДвиженияТоваров,СтатьяДвиженияТоваров41,ДопРеквизит,ДопРеквизит1,ДопСтатьяДвиженияТоваров");
	ТаблицаВозврата = Новый ТаблицаЗначений;
	ТаблицаВозврата.Колонки.Добавить("ВидОперации");
	ТаблицаВозврата.Колонки.Добавить("ЗначенияРеквизитов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураЗначений.Очистить();
		ЗаполнитьЗначенияСвойств(СтруктураЗначений, Выборка);
		
		НовСтр = ТаблицаВозврата.Добавить();
		НовСтр.ВидОперации = Выборка.ВидОперации;
		НовСтр.ЗначенияРеквизитов = СтруктураЗначений;
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции


Функция ПолучитьСтавкуНДСПриОтгрузкеБезНДС(Период)Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтавкиНачисленияНДСПоПоступлениямБезНДССрезПоследних.СтавкаНДС
	|ИЗ
	|	РегистрСведений.СтавкиНачисленияНДСПоПоступлениямБезНДС.СрезПоследних(&Период, ) КАК СтавкиНачисленияНДСПоПоступлениямБезНДССрезПоследних");
	Запрос.УстановитьПараметр("Период", Период);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПолучитьСебестоимостьЕдиницыСырья(Номенклатура, СчетУчета = Неопределено, Дата)Экспорт
	
	//Минеев Дмитрий
	//переделал получение себестоимости, правильнее брать с регистра себестоимости
	//по производительности лучше, ближе к реальным данным и при каждом перепроведении сумма не будет меняться
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СебестоимостьТоваровСрезПоследних.Себестоимость
	               |ИЗ
	               |	РегистрСведений.СебестоимостьТоваров.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК СебестоимостьТоваровСрезПоследних";
				   
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Себестоимость;
	КонецЕсли;	
	
	Возврат 0;
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ФинансовыйОстатки.СуммаОстатокДт / ВЫБОР
	//|		КОГДА ФинансовыйОстатки.КоличествоОстатокДт = 0
	//|			ТОГДА 1
	//|		ИНАЧЕ ФинансовыйОстатки.КоличествоОстатокДт
	//|	КОНЕЦ КАК Себестоимость
	//|ИЗ
	//|	РегистрБухгалтерии.Финансовый.Остатки(&Период, Счет = &Счет, &ВидыСубконто, Субконто1 = &Номенклатура) КАК ФинансовыйОстатки");
	//Запрос.УстановитьПараметр("Счет", 			СчетУчета);
	//Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	//Запрос.УстановитьПараметр("Период",			Дата);
	//
	//МассивСубконто = Новый Массив;
	//МассивСубконто.Добавить(?(СчетУчета = ПланыСчетов.Финансовый.Товары, ПланыВидовХарактеристик.ВидыСубконто.Товары, ПланыВидовХарактеристик.ВидыСубконто.Материалы));
	//Запрос.УстановитьПараметр("ВидыСубконто", МассивСубконто);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий()Тогда
	//	Возврат Выборка.Себестоимость;
	//КонецЕсли;
	//
	//Возврат 0;
	
КонецФункции

Функция ПолучитьСебестоимостьДляМассиваНоменклатур(Знач МассивНоменклатура, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(МассивНоменклатура) <> Тип("Массив") Тогда
		МассивН = Новый Массив();
		МассивН.Добавить(МассивНоменклатура);
		МассивНоменклатура = МассивН;
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка КАК Номенклатура,
	               |	ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК Себестоимость
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатура)) КАК СебестоимостьТоваровСрезПоследних
	               |		ПО СебестоимостьТоваровСрезПоследних.Номенклатура = НоменклатураСпр.Ссылка
	               |ГДЕ
	               |	НоменклатураСпр.Ссылка В(&МассивНоменклатура)";
				   
	Запрос.УстановитьПараметр("МассивНоменклатура", МассивНоменклатура);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

//+++АК LATV 2018.10.18 ИП-00020107
Функция ПолучитьНовыйУникальныйИдентификатор(ИмяСправочника, ИмяРеквизитаУИ = "") Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИД = 1;
	
	Если Найти(ИмяСправочника, ".") > 0
	 Или ПустаяСтрока(ИмяРеквизитаУИ) Тогда
		// Для нумерации строк табличный частей необходимо наращивать номер во время добавления каждой новой строки,
		//	т.к. в базу записываются все строки одновременно и получить номер строки по порядку не возможно.
		// Поэтому необходимо использовать независимый регистр для хранения уникальности номеров
		ИД = РегистрыСведений.НомераДокументов.ПолучитьИЗафиксироватьНовыйИдентификатор(ИмяСправочника);
		
	Иначе
		
		Запрос = Новый Запрос();
		Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Спр." + ИмяРеквизитаУИ + " КАК ИД
			|ИЗ
			|	Справочник." + ИмяСправочника + " КАК Спр
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	Справочник." + ИмяСправочника + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИД УБЫВ";
		
		Запрос.Текст = Текст;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ИД = Выборка.ИД + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИД;

КонецФункции

Функция ПолучитьСтатьюДДС_БУ(СтатьяДвиженияДенежныхСредств, ВидОперации) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		Возврат Справочники.СтатьиДвиженияДенежныхСредствБУ.ПустаяСсылка();
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяДДС_УУ", СтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("ВидОперации"	, ВидОперации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеСтатейДДС_БУ_УУ.ВидОперации,
	|	СоответствиеСтатейДДС_БУ_УУ.СтатьяДДС_БУ
	|ИЗ
	|	РегистрСведений.СоответствиеСтатейДДС_БУ_УУ КАК СоответствиеСтатейДДС_БУ_УУ
	|ГДЕ
	|	СоответствиеСтатейДДС_БУ_УУ.СтатьяДДС_УУ = &СтатьяДДС_УУ
	|	И (СоответствиеСтатейДДС_БУ_УУ.ВидОперации = &ВидОперации
	|			ИЛИ СоответствиеСтатейДДС_БУ_УУ.ВидОперации = НЕОПРЕДЕЛЕНО
	|			ИЛИ СоответствиеСтатейДДС_БУ_УУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка)
	|			ИЛИ СоответствиеСтатейДДС_БУ_УУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПустаяСсылка)
	|			ИЛИ СоответствиеСтатейДДС_БУ_УУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПустаяСсылка)
	|			ИЛИ СоответствиеСтатейДДС_БУ_УУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПустаяСсылка))";
	ТЗНастроек = Запрос.Выполнить().Выгрузить();
	
	Настройка = ТЗНастроек.Найти(ВидОперации);
	Если Настройка = Неопределено Тогда
		Если ТЗНастроек.Количество() > 0 Тогда
			Возврат ТЗНастроек[0].СтатьяДДС_БУ;
		Иначе	
	        Возврат Справочники.СтатьиДвиженияДенежныхСредствБУ.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат Настройка.СтатьяДДС_БУ;
	КонецЕсли;
	
КонецФункции

//+++АК LAGP 2017.11.17 ИП-00016940
Функция ПолучитьСтатьюДДС_БУ_ПоВидуОперации(ВидОперации) Экспорт
	
	МассивСтруктурДДС = Новый Массив();
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат МассивСтруктурДДС;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеСтатейДДС_БУ_УУ.ВидОперации,
	|	СоответствиеСтатейДДС_БУ_УУ.СтатьяДДС_БУ,
	|	СоответствиеСтатейДДС_БУ_УУ.СтатьяДДС_УУ
	|ИЗ
	|	РегистрСведений.СоответствиеСтатейДДС_БУ_УУ КАК СоответствиеСтатейДДС_БУ_УУ
	|ГДЕ
	|	СоответствиеСтатейДДС_БУ_УУ.ВидОперации = &ВидОперации";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат МассивСтруктурДДС;
	КонецЕсли;	
	
	ТЗСоответствийДДС = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗСоответствийДДС Из ТЗСоответствийДДС Цикл
		СтруктураДДС = Новый Структура();
		СтруктураДДС.Вставить("ДДС_УУ", СтрокаТЗСоответствийДДС.СтатьяДДС_УУ);
		СтруктураДДС.Вставить("ДДС_БУ", СтрокаТЗСоответствийДДС.СтатьяДДС_БУ);
		МассивСтруктурДДС.Добавить(СтруктураДДС);
	КонецЦикла;	
	
	Возврат МассивСтруктурДДС;	
	
КонецФункции

Процедура ЗаписатьБезКонтроляПрав(Стр) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Стр);
	
	Объект = ПрочитатьXML(Чтение);
	
	Чтение.Закрыть();
	
	Объект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры	

Функция ПолучитьФизЛицТипаРолиИсполнителя(Знач ТипРоли, Знач Номенклатура, Знач Характеристика, Знач СтруктурнаяЕдиница, Знач Технолог, Знач ДатаДок, Знач ТекФизЛицо, Знач ВесьСписок=ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТипРоли"				, ТипРоли);
	Запрос.УстановитьПараметр("ЭтоБрендМенеджер"	, (ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер));
	Запрос.УстановитьПараметр("ЭтоУправляющий"		, (ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоНаименованию("Управляющий по рознице")));
	Запрос.УстановитьПараметр("Номенклатура"		, Номенклатура);
	Если ТипЗнч(Характеристика) = Тип("Массив") Тогда
		Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
	Иначе	
		МасХ = Новый Массив;
		МасХ.Добавить(Характеристика);
		Запрос.УстановитьПараметр("Характеристика"	, МасХ);
	КонецЕсли; 
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Технолог"			, Технолог);
	Запрос.УстановитьПараметр("Дата"				, ДатаДок);
	Запрос.УстановитьПараметр("ФлПолныйСписок"		, (РольДоступна("ПолныеПрава") ИЛИ ВесьСписок));
	Запрос.УстановитьПараметр("ТекФизЛицо"			, ТекФизЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.Сотрудник.Наименование КАК СотрудникНаименование,
	|	РолиПользователейСоставРоли.Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект В (&Характеристика))
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних1.Объект,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних1.ТипРоли
	|ПОМЕСТИТЬ втБрендМенеджеры
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&Дата,
	|			ТипРоли = &ТипРоли
	|				И &ЭтоБрендМенеджер) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних1
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект,
	|	РолиПользователейТипыРолей.Ссылка КАК РольПользователя,
	|	РолиПользователейТипыРолей.ТипРоли
	|ПОМЕСТИТЬ втУправляющие
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, &ЭтоУправляющий) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейТипыРолей.ТипРоли = &ТипРоли)
	|			И СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель = РолиПользователейТипыРолей.Ссылка
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.СтруктурныеЕдиницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	ВЫБОР
	|		КОГДА ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница ЕСТЬ NULL
	|			ТОГДА СоответствиеОбъектРольСрезПоследних.Объект
	|		ИНАЧЕ ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|	КОНЕЦ КАК Объект,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.Автор
	|ПОМЕСТИТЬ втПолноеСоот
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&Дата,
	|			ТипРоли = &ТипРоли
	|				И НЕ(&ЭтоБрендМенеджер
	|						И &Технолог ЕСТЬ NULL)) КАК СоответствиеОбъектРольСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.Объект,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.Автор
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&Дата,
	|			ТипРоли = &ТипРоли
	|				И НЕ(&ЭтоБрендМенеджер
	|						И &Технолог ЕСТЬ NULL)) КАК СоответствиеОбъектРольСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование,
	|	МАКСИМУМ(РолиПользователейСоставРоли.Ссылка) КАК Ссылка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.Контрагенты
	|				ТОГДА 3
	|			КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.Номенклатура
	|				ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Приоритет
	|ПОМЕСТИТЬ втПриор
	|ИЗ
	|	вт КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПолноеСоот КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = &Номенклатура
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.Объект В (&Характеристика)
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.Объект = &СтруктурнаяЕдиница
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.Объект = &Технолог
	|				ИЛИ РолиПользователейСоставРоли.Производитель = СоответствиеОбъектРольСрезПоследних.Объект)
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли = &ТипРоли
	|	И ВЫБОР
	|			КОГДА &ФлПолныйСписок
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование,
	|	МАКСИМУМ(РолиПользователейСоставРоли.Ссылка),
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.Контрагенты
	|				ТОГДА 3
	|			КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.Номенклатура
	|				ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ)
	|ИЗ
	|	вт КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБрендМенеджеры КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = &Номенклатура
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.Объект В (&Характеристика)
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.Объект = &СтруктурнаяЕдиница
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.Объект = &Технолог
	|				ИЛИ РолиПользователейСоставРоли.Производитель = СоответствиеОбъектРольСрезПоследних.Объект)
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли = &ТипРоли
	|	И ВЫБОР
	|			КОГДА &ФлПолныйСписок
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование,
	|	МАКСИМУМ(РолиПользователейСоставРоли.Ссылка),
	|	2
	|ИЗ
	|	вт КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУправляющие КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = &СтруктурнаяЕдиница)
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли = &ТипРоли
	|	И ВЫБОР
	|			КОГДА &ФлПолныйСписок
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(втПриор.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втМаксПриор
	|ИЗ
	|	втПриор КАК втПриор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПриор.Сотрудник,
	|	втПриор.СотрудникНаименование,
	|	втПриор.Ссылка,
	|	втПриор.Приоритет
	|ИЗ
	|	втПриор КАК втПриор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПриор КАК втМаксПриор
	|		ПО втПриор.Приоритет = втМаксПриор.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПриор.Приоритет,
	|	втПриор.СотрудникНаименование";
	Выборка = Запрос.Выполнить().Выбрать();
	
    МасФЛ = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МасФЛ.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	Возврат МасФЛ;
	
КонецФункции

//+++АК sils 03.05.2018 ИП-00017858.04
// Функция находит "Расходные ордера (склад)", введенные на основании "Заявки на рекламные материалы"
// за последние пол года, в которых спецодежда, и на основании которых не введен "Акта прием-передачи ТМЦ сотруднику"
// (т.е. вроде товар отправлен, но не получен на месте), и выдает номенклатуру, документ, сотрудника и количество.
Функция ПолучитьНеполучРасхОрдера() Экспорт
	Дата2 = КонецДня(ТекущаяДата());
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", ДобавитьМесяц(НачалоМесяца(Дата2), -6));
	Запрос.УстановитьПараметр("Дата2", Дата2);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСклад.Ссылка
	               |ПОМЕСТИТЬ ДокНаОснованииЗаявки
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.Проведен
	               |	И РасходныйОрдерСклад.Дата МЕЖДУ &Дата1 И &Дата2
	               |	И РасходныйОрдерСклад.Основание ССЫЛКА Документ.ЗаявкаНаРекламныеМатериалы
	               |	И РасходныйОрдерСклад.Основание <> ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)
	               |	И НЕ РасходныйОрдерСклад.Ссылка В
	               |				(ВЫБРАТЬ
	               |					АК_АктПриемаПередачиТМЦСотруднику.ДокументОснование КАК ДокументОснование
	               |				ИЗ
	               |					Документ.АК_АктПриемаПередачиТМЦСотруднику КАК АК_АктПриемаПередачиТМЦСотруднику
	               |				ГДЕ
	               |					АК_АктПриемаПередачиТМЦСотруднику.Проведен)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявкиНаРекламныеМатериалы.Регистратор,
	               |	ЗаявкиНаРекламныеМатериалы.Номенклатура,
	               |	ЗаявкиНаРекламныеМатериалы.Характеристика,
	               |	ЗаявкиНаРекламныеМатериалы.Сотрудник,
	               |	ЗаявкиНаРекламныеМатериалы.Количество
	               |ИЗ
	               |	ДокНаОснованииЗаявки КАК ДокНаОснованииЗаявки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиНаРекламныеМатериалы КАК ЗаявкиНаРекламныеМатериалы
	               |		ПО (ЗаявкиНаРекламныеМатериалы.Регистратор = ДокНаОснованииЗаявки.Ссылка)
	               |ГДЕ
	               |	ЗаявкиНаРекламныеМатериалы.Номенклатура.ВидРекламногоМатериала = ЗНАЧЕНИЕ(Перечисление.ПодразделРекламныхМатериалов.ФормаДляДействующихВВ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДокНаОснованииЗаявки";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
КонецФункции

//+++АК sils 06.05.2018 ИП-00018394
Функция ПолучитьПринятыеРасхОрдера(ВернутьВсе = Ложь) Экспорт
	Дата2 = КонецДня(ТекущаяДата());
	Дата1 = ДобавитьМесяц(НачалоМесяца(Дата2), -6);
	
	УстановитьПривилегированныйРежим(Истина);
	ТЗ = ОбщегоНазначенияСервер.ПолучитьНеполучРасхОрдера();
	
	ТЗ1 = ТЗ.Скопировать(, "Регистратор, Номенклатура");
	ТЗ1.Колонки.Добавить("ТТ");
	ТекКол = ТЗ1.Количество();
	Пока ТекКол <> 0 Цикл
		стр = ТЗ1[ТекКол - 1];
		Если ТипЗнч(стр.Регистратор.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") и
			стр.Регистратор.Получатель <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
			стр.ТТ = стр.Регистратор.Получатель;
		Иначе
			ТЗ1.Удалить(стр);
		КонецЕсли;
		ТекКол = ТекКол - 1;
	КонецЦикла;
	
	ТЗ2 = ТЗ1.Скопировать();
	ТЗ3 = ТЗ1.Скопировать();
	
	ТЗ1.Свернуть("ТТ", "");
	МассивПолучателей = ТЗ1.ВыгрузитьКолонку("ТТ");
	СЗ_Получателей = Новый СписокЗначений;
	СЗ_Получателей.ЗагрузитьЗначения(МассивПолучателей);
	
	ТЗ2.Свернуть("Номенклатура", "");
	МассивНоменклатуры = ТЗ2.ВыгрузитьКолонку("Номенклатура");
	СЗ_Номенклатуры = Новый СписокЗначений;
	СЗ_Номенклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
	
	ТЗ3.Свернуть("Регистратор", "");
	СЗ_Регистратор = Новый СписокЗначений;
	СЗ_Регистратор.ЗагрузитьЗначения(ТЗ3.ВыгрузитьКолонку("Регистратор"));
	
	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(Дата1, Дата2, МассивПолучателей, МассивНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	Запрос.УстановитьПараметр("Получатель", СЗ_Получателей);
	Запрос.УстановитьПараметр("Номенклатура", СЗ_Номенклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерСклад.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Расходники
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.ДатаРаспределения >= &Дата1
	|	И РасходныйОрдерСклад.ДатаРаспределения <= &Дата2
	|	И РасходныйОрдерСклад.Получатель В(&Получатель)
	|	И РасходныйОрдерСклад.Проведен = ИСТИНА
	|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|		РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|		РасходныйОрдерСкладТовары.Количество КАК Количество,
	|		РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|		РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Получатель
	|	ИЗ
	|		Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Расходники КАК ВТ_Расходники
	|			ПО РасходныйОрдерСкладТовары.Ссылка = ВТ_Расходники.Ссылка
	|	ГДЕ
	|		РасходныйОрдерСкладТовары.Номенклатура В(&Номенклатура) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Количество УБЫВ,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Расходники";
	
	Результаты = Запрос.Выполнить();
	
	ТабРаспределение = Результаты.Выгрузить();
	ТабРаспределение.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Число"));
	ТабРаспределение.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Для Каждого СтрокаТаб Из ТабРаспределение Цикл
		ТекСсылка = СтрокаТаб.Ссылка;
		СтрокаТаб.Дата = НачалоДня(?(ЗначениеЗаполнено(ТекСсылка.ДатаРаспределения), ТекСсылка.ДатаРаспределения, ТекСсылка.Дата));
	КонецЦикла;

	//распределим принятое ТТ
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		СтрокиРаспределено = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура, Получатель, Дата", 
															СтрокаДанные.Номенклатура, СтрокаДанные.ТТ, СтрокаДанные.День));
		Для Каждого СтрокаТаб Из СтрокиРаспределено Цикл
			КолвоПоИтерации = Мин(СтрокаТаб.Количество, СтрокаДанные.Поступило);
			Если КолвоПоИтерации <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб.Поступило = СтрокаТаб.Поступило + КолвоПоИтерации;
			СтрокаТаб.Количество = СтрокаТаб.Количество - КолвоПоИтерации;
			СтрокаДанные.Поступило = СтрокаДанные.Поступило - КолвоПоИтерации;
		КонецЦикла;
		Если СтрокиРаспределено.Количество() > 0
			И СтрокаДанные.Поступило > 0 Тогда
			СтрокиРаспределено[0].Поступило = СтрокиРаспределено[0].Поступило + СтрокаДанные.Поступило;
		КонецЕсли;	
	КонецЦикла;
	ТекКол = ТабРаспределение.Количество();
	Пока ТекКол <> 0 Цикл
		стр = ТабРаспределение[ТекКол - 1];
		Если СЗ_Регистратор.НайтиПоЗначению(стр.Ссылка) = Неопределено Тогда
			ТабРаспределение.Удалить(стр);
		КонецЕсли;
		ТекКол = ТекКол - 1;
	КонецЦикла;
	
	Если ВернутьВсе Тогда
		Возврат Новый Структура("ТабРаспределение, ТЗ", ТабРаспределение, ТЗ);
	Иначе
		Возврат ТабРаспределение;
	КонецЕсли;
КонецФункции

Функция КаталогХраненияФайловНоменклатуры() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КаталогХраненияФайлов = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогХраненияФайлов = КаталогХраненияФайлов + ?(Прав(КаталогХраненияФайлов, 1) = "\", "", "\") + "Справочник.Номенклатура\";
	
	ФайлКаталогХраненияФайлов = Новый Файл(КаталогХраненияФайлов);
	Если НЕ ФайлКаталогХраненияФайлов.Существует() Тогда
		СоздатьКаталог(КаталогХраненияФайлов);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КаталогХраненияФайлов;
	
КонецФункции

//+++АК sils 19.06.2018 ИП-00018969
&НаСервере
Функция ПроверкаВводаРОСПоЗаявке(Заявка) Экспорт
	Если не ЗначениеЗаполнено(Заявка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСклад.Ссылка
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.Проведен
	               |	И РасходныйОрдерСклад.Основание = &Заявка";
	Запрос.УстановитьПараметр("Заявка", Заявка);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() >= 1 Тогда
		Возврат ТЗ[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
// Добавляет запись в регистр сведений СтатистикаИспользованияПодсистем
// (для отслеживания частоты использования объектов позльзователями)
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - Структура параметров
//                 Состав структуры:
//                 		Подсистема - <Тип.Строка> - Имя анализируемой подсистемы
//  					ИмяОбъекта - <Тип.Строка> - Имя объекта из которого был произведен вызов
// 						ИмяФормы - <Тип.Строка> - Имя формы из которой был произведен вызов
//                      ИмяЭлемента - <Тип.Строка> - Имя элемента формы (Кнопка/Команда.Элемент) 
//                      ДопИнформация - <Тип.Строка> - Дополнительная информация
//
Процедура СтатистикаИспользованияПодсистемДобавитьЗапись(СтруктураПараметров) Экспорт //+++АК mika 2018.08.09 ИП-00019475

	 МенеджерЗаписи = РегистрыСведений.СтатистикаИспользованияПодсистем.СоздатьМенеджерЗаписи();
	 
	 МенеджерЗаписи.Период       = ТекущаяДата();
	 МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	 
	 Попытка 
		 МенеджерЗаписи.Продавец = ПараметрыСеанса.ТекущийПродавец;
	 Исключение
	 КонецПопытки;
	 
	 Попытка 
		 МенеджерЗаписи.Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	 Исключение
	 КонецПопытки;
	 
	 Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл 
		   МенеджерЗаписи[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;     
	 КонецЦикла;
	 
	 МенеджерЗаписи.Записать();
	 
КонецПроцедуры // СтатистикаИспользованияПодсистем()

//+++АК POZM 2018.08.23 ИП-00018201 // Поиск и замена дублей, удаляет на клиенте, из-за чего выпрыгивало исключение, пришлось добавить это
Процедура УдалитьОбъект(Ссылка) Экспорт
	СпрОб = Ссылка.ПолучитьОбъект();
	СпрОб.Удалить();
КонецПроцедуры	
//---АК POZM 
//---АК POZM 