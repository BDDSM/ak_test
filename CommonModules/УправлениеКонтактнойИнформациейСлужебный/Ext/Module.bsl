
////////////////////////////////////////////////////////////////////////////////
//Область СлужебныйПрограммныйИнтерфейс

// Возвращает значение перечисления тип вида контактной информации.
//
//  Параметры:
//    ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - источник данных.
//
Функция ТипВидаКонтактнойИнформации(Знач ВидИнформации) Экспорт
	Результат = Неопределено;
	
	Тип = ТипЗнч(ВидИнформации);
	Если Тип = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Результат = ВидИнформации;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Результат = ВидИнформации.Тип;
	ИначеЕсли ВидИнформации <> Неопределено Тогда
		Данные = Новый Структура("Тип");
		ЗаполнитьЗначенияСвойств(Данные, ВидИнформации);
		Результат = Данные.Тип;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//Область ВзаимодействиеСАдреснымКлассификатором

//  Возвращает наименование региона по его коду.
//
//  Параметры:
//      Код - Строка, Число - код региона.
//
// Возвращаемое значение:
//      Строка - полное наименование региона с сокращением.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция РегионКода(Знач Код)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
	//	МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
	//	Возврат МодульАдресныйКлассификатор.НаименованиеРегионаПоКоду(Код);
	//КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//Область ОбщиеСлужебныеПроцедурыИФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Контактная информация'");
	
КонецФункции

// Возвращает представление контактной информации, сформированное из адреса в формате XML.
//
// Параметры:
//   XMLСтрока    -  Строка - Адрес в формат XML .
//   ФорматКонтактнойИнформации  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//    ВидКонтактнойИнформации - Структура - дополнительные параметры формирования представления для адресов:
//      * Тип - Строка - Тип контактной информации;
//      * ВключатьСтрануВПредставление - Булево - в представление будет включена страна адреса;
//      * ФорматАдреса                 - Строка - если указано "КЛАДР", то в представление адреса 
//                                                не включаются округ и внутригородской район.
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция ПредставлениеКонтактнойИнформации(Знач XMLСтрока, Знач ФорматКонтактнойИнформации) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, возвращаем саму строку.
		Возврат XMLСтрока;
	КонецЕсли;
	
	Вид = Новый Структура("Тип,ВключатьСтрануВПредставление,ФорматАдреса", "", Ложь, "КЛАДР");
	Если ФорматКонтактнойИнформации = Неопределено Тогда
		Вид.Тип = ТипКонтактнойИнформации(?(ЭтоСтрока, XMLСтрока, КонтактнаяИнформацияИзXML(XMLСтрока)));
	Иначе
		ЗаполнитьЗначенияСвойств(Вид, ФорматКонтактнойИнформации);
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	Если Не ПустаяСтрока(ОбъектXDTO.Представление) И Вид.ФорматАдреса = "ФИАС" Тогда
		Возврат ОбъектXDTO.Представление; // Возвращаем ранее сформированное представление.
	КонецЕсли;
	
	Возврат СформироватьПредставлениеКонтактнойИнформации(ОбъектXDTO, Вид);
	
КонецФункции

// Преобразует XML в объект XDTO контактной информации.
//
//  Параметры:
//      Текст            - Строка - строка XML контактной информации.
//      ОжидаемыйВид     - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//      РезультатПреобразования - Структура - если задана, то в свойства записываются сведения:
//        * ТекстОшибки - Строка - описание ошибок чтения. При этом возвращаемое значение функции будет 
//                                 корректного типа, но не заполнен.
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация, соответствующая XDTO-пакету КонтактнаяИнформация.
//   
Функция КонтактнаяИнформацияИзXML(Знач Текст, Знач ОжидаемыйВид = Неопределено, РезультатПреобразования = Неопределено) Экспорт
	
	ОжидаемыйТип = ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	ПеречислениеАдрес                 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПеречислениеАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПеречислениеВебСтраница           = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПеречислениеТелефон               = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПеречислениеДругое                = Перечисления.ТипыКонтактнойИнформации.Другое;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Текст) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		
		ТекстОшибки = Неопределено;
		Попытка
			Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		Исключение
			// Некорректный формат XML
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , Текст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ТипЗнч(ОжидаемыйВид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				ТекстОшибки = СтрЗаменить(НСтр("ru = 'Некорректный формат XML контактной информации для ""%1"", значения полей были очищены.'"),
					"%1", Строка(ОжидаемыйВид));
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректный формат XML контактной информации, значения полей были очищены.'");
			КонецЕсли;
		КонецПопытки;
		
		Если ТекстОшибки = Неопределено Тогда
			// Контролируем соответствие типов.
			НайденТип = ?(Результат.Состав = Неопределено, Неопределено, Результат.Состав.Тип());
			Если ОжидаемыйТип = ПеречислениеАдрес И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес электронной почты'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается веб-страница'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеДругое И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Прочее") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается ""другое""'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = Неопределено Тогда
			// Успешно прочитано
			Возврат Результат;
		КонецЕсли;
		
		// Проверим ошибку и вернем расширенную информацию.
		Если РезультатПреобразования = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли ТипЗнч(РезультатПреобразования) <> Тип("Структура") Тогда
			РезультатПреобразования = Новый Структура;
		КонецЕсли;
		РезультатПреобразования.Вставить("ТекстОшибки", ТекстОшибки);
		
		// Будет возвращен пустой объект.
		Текст = "";
	КонецЕсли;
	
	Если ТипЗнч(Текст) = Тип("СписокЗначений") Тогда
		Представление = "";
		ЭтоНовый = Текст.Количество() = 0;
	Иначе
		Представление = Строка(Текст);
		ЭтоНовый = ПустаяСтрока(Текст);
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	// Разбор
	Если ОжидаемыйТип = ПеречислениеАдрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = АдресXMLВXDTO(Текст, Представление, ОжидаемыйТип);
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = ДесериализацияТелефона(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеДругое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)    
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, не указан ожидаемый тип'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Формирует и возвращает представление контактной информации.
//
// Параметры:
//   Информация    - ОбъектXDTO, Строка - контактная информация.
//   ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры для формирования представления.
//   ФорматАдреса  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция СформироватьПредставлениеКонтактнойИнформации(Информация, ВидИнформации) Экспорт
	
	Если ТипЗнч(Информация) = Тип("ОбъектXDTO") Тогда
		Если Информация.Состав = Неопределено Тогда
			Возврат Информация.Представление;
		КонецЕсли;
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
		ТипИнформации    = Информация.Состав.Тип();
		Если ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Возврат ПредставлениеАдреса(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат ПредставлениеТелефона(Информация.Состав);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		// Заглушка на другие типы
		Если ТипЗнч(ТипИнформации) = Тип("ОбъектXDTO") И ТипИнформации.Свойства.Получить("Значение") <> Неопределено Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		Возврат Строка(Информация.Состав);
	КонецЕсли;
	
	// Старый формат или новый десериализованный.
	Если ВидИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НоваяИнфо = АдресXMLВXDTO(Информация,,Перечисления.ТипыКонтактнойИнформации.Адрес);
		Возврат СформироватьПредставлениеКонтактнойИнформации(НоваяИнфо, ВидИнформации);
	КонецЕсли;
	
	Возврат СокрЛП(Информация);
КонецФункции

// Преобразует строку в XDTO контактную информацию адреса.
//
//  Параметры:
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция АдресXMLВXDTO(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйТип = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ЗначенияПолей);
	РазбиратьПоПолям = (ТипЗначения = Тип("СписокЗначений") Или ТипЗначения = Тип("Структура") 
		Или (ТипЗначения = Тип("Строка") И Не ПустаяСтрока(ЗначенияПолей)));
	Если РазбиратьПоПолям Тогда
		// Разбираем из значений полей.
		Возврат ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип);
	КонецЕсли;
	
	// Разбираем адрес из его представления по классификатору.
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат СформироватьАдресПоПредставлению(Представление);
	//КонецЕсли;
	
	// Пустой объект с представлением.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	Возврат Результат;
	
КонецФункции

// Преобразует контактную информацию XDTO в XML.
//
//  Параметры:
//      ОбъектXDTOИнформации - ОбъектXDTO - контактная информация.
//
// Возвращаемое значение:
//      Строка - результат преобразования в формате XML.
//
Функция КонтактнаяИнформацияXDTOВXML(ОбъектXDTOИнформации) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	
	Если ОбъектXDTOИнформации <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTOИнформации);
	КонецЕсли;
	
	Результат = СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	Результат = СтрЗаменить(Результат, "<ВнутригРайон/>", "");// Совместимость с КЛАДР
	
	Возврат Результат;
	
КонецФункции

// Разбирает представление КИ и возвращает XDTO.
//
//  Параметры:
//      Текст        - Строка  - XML
//      ОжидаемыйВид - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация.
//
Функция КонтактнаяИнформацияXDTOПоПредставлению(Текст, ОжидаемыйВид) Экспорт
	
	ОжидаемыйТип = ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат АдресXMLВXDTO("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат ДесериализацияТелефона("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат ДесериализацияТелефонаФакса("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Преобразует строку в XDTO контактную информацию телефона.
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияТелефона(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO прочую контактную информацию.
//
// Параметры:
//   ЗначенияПолей - Строка - сериализованная информация, значения полей.
//   Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто.
//   ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
// Возвращаемое значение:
//   ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияПрочейКонтактнойИнформации(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление = Представление;
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		
	ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается другой тип'");
		
	КонецЕсли;
	
	Результат.Состав.Значение = Представление;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление для адреса по правилу:
// 1) Страна, если надо.
// 2) Индекс, субъект рф, округ, район, город, внутригородской район, населенный пункт, улица.
// 3) Здания, помещения
//
Функция ПредставлениеАдреса(Знач XDTOАдрес, Знач ВидИнформации) Экспорт
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	АдресРФ          = XDTOАдрес.Состав;
	Страна           = СокрЛП(XDTOАдрес.Страна);
	Если ЭтоРоссийскийАдрес(АдресРФ) Тогда
		
		Если ЗначениеЗаполнено(АдресРФ.Адрес_по_документу) Тогда
			Возврат АдресРФ.Адрес_по_документу;
		КонецЕсли;
		
		// Значимые части
		Адрес = Новый Массив;
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathПочтовогоИндекса()));
		Адрес.Добавить(АдресРФ.СубъектРФ);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.Округ);
		КонецЕсли;
		Адрес.Добавить(РайонАдреса(АдресРФ));
		Адрес.Добавить(АдресРФ.Город);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.ВнутригРайон);
		КонецЕсли;
		Адрес.Добавить(АдресРФ.НаселПункт);
		Адрес.Добавить(АдресРФ.Улица);
		
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathДополнительногоОбъектаАдресации(90, "СНТ"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathДополнительногоОбъектаАдресации(90, "ГСК"));
			Если ДополнительныйЭлементАдреса = Неопределено Тогда
				ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
				Если ДополнительныйЭлементАдреса = Неопределено Тогда
					ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathДополнительногоОбъектаАдресации(90));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Адрес.Добавить(ДополнительныйЭлементАдреса);
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathДополнительногоОбъектаАдресации(91)));
		
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
		// Строения и помещения
		НомерНеВыведен = Истина;
		Данные = ЗданияИПомещенияАдреса(АдресРФ);
		Для Каждого Строка Из Данные.Здания Цикл
			Здания = Новый Массив;
			Здания.Добавить(Представление); 
			Здания.Добавить(СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение));
			Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Здания);
			НомерНеВыведен = Ложь;
		КонецЦикла;
		
		Для Каждого Строка Из Данные.Помещения Цикл
			Помещения = Новый Массив;
			Помещения.Добавить(Представление);
			Помещения.Добавить(СокрЛП(Строка.Сокращение + " " + Строка.Значение));
			Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Помещения);
		КонецЦикла;
			
		// При пустом представлении страну нет смысла выводить.
		Если ПустаяСтрока(Представление) Тогда
			Страна = "";
		КонецЕсли;
	Иначе
		// Это иностранный адрес
		Представление = СокрЛП(АдресРФ);
	КонецЕсли;
	
	Если ВидИнформации.ВключатьСтрануВПредставление Тогда
		ДобавлениеСтраны = Новый Массив;
		ДобавлениеСтраны.Добавить(Страна);
		ДобавлениеСтраны.Добавить(Представление);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(ДобавлениеСтраны);
	КонецЕсли;
	Возврат Представление;
КонецФункции

Функция ПредставлениеТелефона(XDTOДанные) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
		
КонецФункции
	
Функция СформироватьАдресПоПредставлению(Представление)
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	
	Адрес = Результат.Состав;
	НаименованиеРоссии = "РОССИЯ";
	
	ДанныеАнализа = ЧастиАдресаТаблицей(Представление);
	Если ДанныеАнализа.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОпределитьСтрануИИндекс(ДанныеАнализа);
	СтрокаСтраны = ДанныеАнализа.Найти(-2, "Уровень");
	Если СтрокаСтраны = Неопределено Тогда
		Адрес.Страна = НаименованиеРоссии;
	Иначе
		Адрес.Страна = СокрЛП(ВРег(СтрокаСтраны.Значение));
		//// Проверка наличия страны в справочнике Страны мира и неявное добавление ее в случае отсутствия.
		//ДанныеСтраныМира = Справочники.СтраныМира.ДанныеСтраныМира(, Адрес.Страна);
		//Если ДанныеСтраныМира <> Неопределено И НЕ ЗначениеЗаполнено(ДанныеСтраныМира.Ссылка) Тогда
		//	СтранаМира = Справочники.СтраныМира.СсылкаПоДаннымКлассификатора(ДанныеСтраныМира);
		//КонецЕсли;
	КонецЕсли;
	
	//???
	Если Адрес.Страна = НаименованиеРоссии Тогда
		//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
			АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			АдресПоУровням = МодульАдресныйКлассификаторСлужебный.УстановитьСоответствиеЧастейАдресаИхУровню(ДанныеАнализа, УровниАдресныхОбъектов());
			Если АдресПоУровням <> Неопределено Тогда
				ПоместитьАдресВXDTO(АдресРФ, АдресПоУровням);
			КонецЕсли;
			
			Если АдресПоУровням.Найти(0, "Уровень") <> Неопределено Тогда
				// Что-то осталось, считаем адресом в свободной форме.
				АдресРФ.Адрес_По_Документу = Представление;
			КонецЕсли;
			Адрес.Состав = АдресРФ;
		//КонецЕсли;
	Иначе
		// Состав без страны, она остается в представлении.
		Позиция = СтрокаСтраны.Начало + СтрокаСтраны.Длина;
		Длина   = СтрДлина(Представление);
		Разделители = "," + Символы.ПС;
		Пока Позиция <= Длина И Найти(Разделители, Сред(Представление, Позиция, 1)) <= 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Пока Позиция <= Длина И Найти(Разделители, Сред(Представление, Позиция, 1)) > 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Адрес.Состав = СокрЛП(Лев(Представление, СтрокаСтраны.Начало - 1) + " " + СокрЛП(Сред(Представление, Позиция)));

	КонецЕсли;
		
	Возврат Результат;
КонецФункции	

//  Возвращает флаг того, что переданный адрес - российский.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоРоссийскийАдрес(XDTOАдрес) Экспорт
	Возврат РоссийскийАдрес(XDTOАдрес) <> Неопределено;
КонецФункции

//  Возвращает извлеченный XDTO российского адреса или Неопределено для адреса иностранного.
//
//  Параметры:
//      ОбъектИнформации - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      ОбъектXDTO - российский адрес.
//      Неопределено - нет российского адреса.
//
Функция РоссийскийАдрес(ОбъектИнформации) Экспорт
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");
	
	Если ТипЗнч(ОбъектИнформации) = ТипXDTO Тогда
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
		
		Если ОбъектИнформации.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Читает дополнительные элемент адреса по его пути.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      XPathЭлемента -  Строка - Путь к элементу.
//
//  Возвращаемое значение:
//      Строка - значение элемента.
Функция ДополнительныйЭлементАдреса(XDTOАдрес, XPathЭлемента) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = АдресРФ.Получить(XPathЭлемента);
	Если Результат <> Неопределено Тогда
		Возврат Результат.Значение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Читает и устанавливает район адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - новое значение.
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		
		Результат = Неопределено;
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathРайона() );
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

//  Читает и устанавливает здания и помещения адреса. 
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Структура  - устанавливаемое значение. Ожидаются поля:
//                          * Здания - ТаблицаЗначений с колонками:
//                                        ** Тип      - Строка - тип внутреннего классификатора дополнительных адресных
//                                                               объектов. Например "Корпус".
//                                        ** Значение - Строка  - значение номера дома, квартиры и т.п.
//                          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
//  Возвращаемое значение:
//      Структура - текущие данные. Содержит поля:
//          * Здания - ТаблицаЗначений с колонками:
//                        ** Тип        - Строка - тип внутреннего классификатора дополнительных адресных объектов.
//                                                 Например "Корпус".
//                        ** Сокращение - Строка - сокращение названия для использования в представлении.
//                        ** Значение   - Строка - значение номера дома, квартиры и т.п.
//                        ** ПутьXPath  - Строка - путь к значению объекта.
//          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
Функция ЗданияИПомещенияАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Результат = Новый Структура("Здания, Помещения", 
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"),
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"));
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НовоеЗначение <> Неопределено Тогда
		// Запись
		Если НовоеЗначение.Свойство("Здания") Тогда
			Для Каждого Строка Из НовоеЗначение.Здания Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Если НовоеЗначение.Свойство("Помещения") Тогда
			Для Каждого Строка Из НовоеЗначение.Помещения Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Возврат НовоеЗначение
	КонецЕсли;
	
	// Чтение
	Для Каждого ДопЭлемент Из АдресРФ.ДопАдрЭл Цикл
		Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = ДопЭлемент.Номер.Тип;
			ТипОбъекта = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено Тогда
				Вид = ТипОбъекта.Тип;
				Если Вид = 1 Или Вид = 2 Тогда
					НоваяСтрока = Результат.Здания.Добавить();
				ИначеЕсли Вид = 3 Тогда
					НоваяСтрока = Результат.Помещения.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.Тип        = ТипОбъекта.Наименование;
					НоваяСтрока.Значение   = ДопЭлемент.Номер.Значение;
					НоваяСтрока.Сокращение = ТипОбъекта.Сокращение;
					НоваяСтрока.ПутьXPath  = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(НоваяСтрока.Тип);
					НоваяСтрока.Вид        = Вид;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Здания.Сортировать("Вид");
	Результат.Помещения.Сортировать("Вид");
	
	Возврат Результат;
КонецФункции

Функция ЧастиАдресаТаблицей(Знач Текст)
	
	ТипСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(128));
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Уровень", ТипЧисло);
	Колонки.Добавить("Позиция", ТипЧисло);
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Наименование", ТипСтрока);
	Колонки.Добавить("Сокращение", ТипСтрока);
	Колонки.Добавить("Начало", ТипЧисло);
	Колонки.Добавить("Длина", ТипЧисло);
	Колонки.Добавить("Идентификатор", ТипСтрока);
	
	Номер = 1;
	Для Каждого Часть Из СловаТекстаТаблицей(Текст, "," + Символы.ПС) Цикл
		Значение = СокрЛП(Часть.Значение);
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Результат.Добавить();
		
		Строка.Уровень = 0;
		Строка.Позиция  = Номер;
		Номер = Номер + 1;
		
		Строка.Начало = Часть.Начало;
		Строка.Длина  = Часть.Длина;
		
		Позиция = СтрДлина(Значение);
		Пока Позиция > 0 Цикл
			Символ = Сред(Значение, Позиция, 1);
			Если ПустаяСтрока(Символ) Тогда
				Строка.Наименование = СокрЛП(Лев(Значение, Позиция-1));
				Прервать;
			КонецЕсли;
			Строка.Сокращение = Символ + Строка.Сокращение;
			Позиция = Позиция - 1;
		КонецЦикла;
		
		Если ПустаяСтрока(Строка.Наименование) Тогда
			Строка.Наименование = СокрЛП(Строка.Сокращение);
			Строка.Сокращение   = "";
		КонецЕсли;
		Строка.Значение = Строка.Наименование + " " + Строка.Сокращение; // Значение;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ОпределитьСтрануИИндекс(ДанныеАнализа)
	
	Макет = ПолучитьОбщийМакет("КлассификаторСтранМира");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Классификатор = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеАдреса.Наименование КАК Наименование,
	               |	ДанныеАдреса.Значение КАК ПолноеНаименование,
	               |	ДанныеАдреса.Позиция КАК Позиция,
	               |	ДанныеАдреса.Сокращение КАК Сокращение
	               |ПОМЕСТИТЬ ДанныеАдреса
	               |ИЗ
	               |	&ДанныеАдреса КАК ДанныеАдреса
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Наименование,
	               |	Позиция,
	               |	Сокращение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеАдреса.Наименование КАК Наименование,
	               |	ВЫБОР
	               |		КОГДА ДанныеАдреса.Наименование ПОДОБНО ""[0-9][0-9][0-9][0-9][0-9][0-9]""
	               |			ТОГДА -1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ДанныеАдреса.ПолноеНаименование В (&СтраныКлассификатора)
	               |					ТОГДА -2
	               |				ИНАЧЕ 0
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Уровень,
	               |	ДанныеАдреса.Позиция
	               |ИЗ
	               |	ДанныеАдреса КАК ДанныеАдреса";
	
	Запрос.УстановитьПараметр("ДанныеАдреса", ДанныеАнализа);
	Запрос.УстановитьПараметр("СтраныКлассификатора", Классификатор.ВыгрузитьКолонку("Наименование"));
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Если РезультатЗапроса.Уровень <> 0 Тогда
			ЭлементАдреса = ДанныеАнализа.Найти(РезультатЗапроса.Позиция, "Позиция");
			ЭлементАдреса.Уровень = РезультатЗапроса.Уровень;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УровниАдресныхОбъектов(ТипАдресногоОбъекта = "Полный")
	Уровни = Новый Массив;
	Если ТипАдресногоОбъекта = "Улица" Тогда
		Уровни.Добавить(7);
		Уровни.Добавить(90);
		Уровни.Добавить(91);
	ИначеЕсли ТипАдресногоОбъекта = "НаселенныйПункт" Тогда
		Уровни.Добавить(1);
		Уровни.Добавить(2);
		Уровни.Добавить(3);
		Уровни.Добавить(4);
		Уровни.Добавить(5);
		Уровни.Добавить(6);
	Иначе
		Уровни.Добавить(1);
		Уровни.Добавить(2);
		Уровни.Добавить(3);
		Уровни.Добавить(4);
		Уровни.Добавить(5);
		Уровни.Добавить(6);
		Уровни.Добавить(7);
		Уровни.Добавить(90);
		Уровни.Добавить(91);
	КонецЕсли;
	
	Возврат Уровни;
КонецФункции

Процедура ПоместитьАдресВXDTO(АдресРФ, АдресПоУровням)
	
	ТаблицаЗданийПомещений = Новый ТаблицаЗначений;
	ТаблицаЗданийПомещений.Колонки.Добавить("Тип");
	ТаблицаЗданийПомещений.Колонки.Добавить("Значение");

	Для каждого ЭлементАдреса Из АдресПоУровням Цикл
		// XPath
		Если ЭлементАдреса.Уровень = 1 Тогда
			Путь = "СубъектРФ";
		ИначеЕсли ЭлементАдреса.Уровень = 2 Тогда
			Путь = "Округ";
		ИначеЕсли ЭлементАдреса.Уровень = 3 Тогда
			Путь = "СвРайМО/Район";
		ИначеЕсли ЭлементАдреса.Уровень = 4 Тогда
			Путь = "Город";
		ИначеЕсли ЭлементАдреса.Уровень = 5 Тогда
			Путь = "ВнутригРайон";
		ИначеЕсли ЭлементАдреса.Уровень = 6 Тогда
			Путь = "НаселПункт";
		ИначеЕсли ЭлементАдреса.Уровень = 7 Тогда
			Путь = "Улица";
		ИначеЕсли ЭлементАдреса.Уровень = 90 Тогда
			ДобавитьДополнительныеЭлементыАдреса(АдресРФ, ЭлементАдреса.Значение, 90);
		ИначеЕсли ЭлементАдреса.Уровень = 91 Тогда
			ДобавитьДополнительныеЭлементыАдреса(АдресРФ, ЭлементАдреса.Значение, 91);
		ИначеЕсли ЭлементАдреса.Уровень = -3 Тогда
			Продолжить;
		ИначеЕсли ЭлементАдреса.Уровень = -1 Тогда
			ПочтовыйИндексАдреса(АдресРФ, ЭлементАдреса.Наименование);
		Иначе
			// Проверка на квартиру или здание.
			Тип = СокрЛП(СтрЗаменить(ЭлементАдреса.Наименование, "№", ""));
			Если УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(Тип) <> Неопределено Тогда
				 // Вставляем в начало, так как порядок результата запроса у нас обратный.
				НоваяСтрока = ТаблицаЗданийПомещений.Вставить(0);
				НоваяСтрока.Значение = СокрЛП(СтрЗаменить(ЭлементАдреса.Сокращение, "№", ""));
				НоваяСтрока.Тип      = Тип;
				ЭлементАдреса.Уровень = -3;
			КонецЕсли;

			Продолжить;
		КонецЕсли;
		
		Если ЭлементАдреса.Уровень > 0 И ЭлементАдреса.Уровень < 90 Тогда
			УстановитьСвойствоПоXPath(АдресРФ, Путь, ЭлементАдреса.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗданияИПомещения = Новый Структура("Здания, Помещения", ТаблицаЗданийПомещений, ТаблицаЗданийПомещений);
	ЗданияИПомещенияАдреса(АдресРФ, ЗданияИПомещения);
	
КонецПроцедуры

Функция СловаТекстаТаблицей(Знач Текст, Знач Разделители = Неопределено)
	
	// Удаление из текста спец. символов "точек, "номеров".
	Текст = СтрЗаменить(Текст, "№", "");
	
	НачалоСлова = 0;
	Состояние   = 0;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Начало",   ТипЧисло);
	Колонки.Добавить("Длина",    ТипЧисло);
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), Найти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Строка = Результат.Добавить();
			Строка.Начало = НачалоСлова;
			Строка.Длина  = Позиция-НачалоСлова;
			Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина);
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Строка = Результат.Добавить();
		Строка.Начало = НачалоСлова;
		Строка.Длина  = Позиция-НачалоСлова;
		Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина)
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Добавляет дополнительные элемент адреса по его пути.
//
Процедура ДобавитьДополнительныеЭлементыАдреса(XDTOАдрес, НовоеЗначение, Уровень) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Уровень = 90 Тогда
		НаименованиеИСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(НовоеЗначение);
		КодСериализацииДополнительногоОбъектаАдресации = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииДополнительногоОбъектаАдресации(90, НаименованиеИСокращение.Сокращение);
	ИначеЕсли Уровень = 91 Тогда
		КодСериализацииДополнительногоОбъектаАдресации = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииДополнительногоОбъектаАдресации(91);
	Иначе
		КодСериализацииДополнительногоОбъектаАдресации = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииДополнительногоОбъектаАдресации(0);
	КонецЕсли;

	XPathЭлемента = "ДопАдрЭл[ТипАдрЭл='" + КодСериализацииДополнительногоОбъектаАдресации + "']";
	ЗначениеПоля = АдресРФ.Получить(XPathЭлемента);
	Если ЗначениеПоля = Неопределено Тогда
		ЗначениеПоля = АдресРФ.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		ЗначениеПоля.ТипАдрЭл = КодСериализацииДополнительногоОбъектаАдресации;
	КонецЕсли;
	ЗначениеПоля.Значение = НовоеЗначение;
	
КонецПроцедуры

//  Читает и устанавливает почтовый индекс адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка     - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - почтовый индекс.
//
Функция ПочтовыйИндексАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		Результат = АдресРФ.Получить( УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathПочтовогоИндекса() );
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// Запись
	КодИндекса = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииПочтовогоИндекса();
	
	ЗаписьИндекса = АдресРФ.Получить(УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathПочтовогоИндекса());
	Если ЗаписьИндекса = Неопределено Тогда
		ЗаписьИндекса = АдресРФ.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип) );
		ЗаписьИндекса.ТипАдрЭл = КодИндекса;
	КонецЕсли;
	
	ЗаписьИндекса.Значение = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

// Установка глубокого свойства объекта.
Процедура УстановитьСвойствоПоXPath(ОбъектXTDO, XPath, Значение) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		ОбъектXTDO.Установить(СтрокаСвойств, Значение);
		Возврат;
	ИначеЕсли ЧислоСвойств < 1 Тогда
		Возврат;
	КонецЕсли;
		
	РодительскийОбъект = Неопределено;
	ТекущийОбъект      = ОбъектXTDO;
	Для Индекс = 1 По ЧислоСвойств Цикл
		
		ТекущееИмя = СтрПолучитьСтроку(СтрокаСвойств, Индекс);
		Если ТекущийОбъект.Установлено(ТекущееИмя) Тогда
			РодительскийОбъект = ТекущийОбъект;
			ТекущийОбъект = ТекущийОбъект.ПолучитьXDTO(ТекущееИмя);
		Иначе
			НовыйТип = ТекущийОбъект.Свойства().Получить(ТекущееИмя).Тип;
			ТипТипа = ТипЗнч(НовыйТип);
			Если ТипТипа = Тип("ТипОбъектаXDTO") Тогда
				НовыйОбъект = ФабрикаXDTO.Создать(НовыйТип);
				ТекущийОбъект.Установить(ТекущееИмя, НовыйОбъект);
				РодительскийОбъект = ТекущийОбъект;
				ТекущийОбъект = НовыйОбъект; 
			ИначеЕсли ТипТипа = Тип("ТипЗначенияXDTO") Тогда
				// Непосредственное значение
				ТекущийОбъект.Установить(ТекущееИмя, Значение);
				РодительскийОбъект = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РодительскийОбъект <> Неопределено Тогда
		РодительскийОбъект.Установить(ТекущееИмя, Значение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//Область СлужебныеПроцедурыИФункцииДляСовместимости

Функция ДесериализацияТелефонаФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	ИначеЕсли ОжидаемыйТип=Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон или факс'");
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав        = Данные;
	
	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ПолеПредставления = "";
	Если СписокЗначенийПолей <> Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);
			
			Если Поле = "КОДСТРАНЫ" Тогда
				Данные.КодСтраны = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "КОДГОРОДА" Тогда
				Данные.КодГорода = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "НОМЕРТЕЛЕФОНА" Тогда
				Данные.Номер = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ДОБАВОЧНЫЙ" Тогда
				Данные.Добавочный = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ПРЕДСТАВЛЕНИЕ" Тогда
				ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Представление с приоритетами.
		Если Не ПустаяСтрока(Представление) Тогда
			Результат.Представление = Представление;
		Иначе
			Результат.Представление = ПолеПредставления;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Разбираем из представления.
	
	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный. 
	// Добавочный включает в себя непробельные символы слева и справа.
	Позиция = 1;
	Данные.КодСтраны  = НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода = Позиция;
	
	Данные.КодГорода  = НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Номер      = НайтиПодстрокуЦифр(Представление, Позиция, " -");
	
	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если Лев(Добавочный, 1) = "," Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 3 ))= "ДОБ" Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 4));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.Добавочный = СокрЛП(Добавочный);
	
	// Корректируем возможные ошибки.
	Если ПустаяСтрока(Данные.Номер) Тогда
		Если Лев(СокрЛ(Представление),1)="+" Тогда
			// Была попытка явно указать код страны, оставляем страну в покое.
			Данные.КодГорода  = "";
			Данные.Номер      = СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.Добавочный = "";
		Иначе
			Данные.КодСтраны  = "";
			Данные.КодГорода  = "";
			Данные.Номер      = Представление;
			Данные.Добавочный = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат.Представление = Представление;
	Возврат Результат;
КонецФункции

// Внутреннее для сериализации.
Функция ДесериализацияАдресаОбщая(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	Если ОжидаемыйТип <> Неопределено Тогда
		Если ОжидаемыйТип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
		КонецЕсли;
	КонецЕсли;
	
	// Старый формат через разделитель строк и равенство.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	Результат.Комментарий = "";
	Результат.Состав      = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	АдресРоссийский = Истина;
	НазваниеРоссии  = "РОССИЯ";
	
	ЭлементКвартира = Неопределено;
	ЭлементКорпус   = Неопределено;
	ЭлементДом      = Неопределено;
	
	// Российский
	АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	
	// Общий состав
	Адрес = Результат.Состав;
	
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
			УправлениеКонтактнойИнформациейКлиентСервер.СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);
		
		Если ИмяПоля="ИНДЕКС" Тогда
			ЭлементИндекс = СоздатьДопАдрЭлемента(АдресРФ);
			ЭлементИндекс.ТипАдрЭл = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииПочтовогоИндекса();
			ЭлементИндекс.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Адрес.Страна = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеРоссии Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			;
			
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			АдресРФ.СубъектРФ = РегионКода(ЭлементСписка.Значение);
			
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			АдресРФ.СубъектРФ = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			Если АдресРФ.СвРайМО = Неопределено Тогда
				АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Тип().Свойства.Получить("СвРайМО").Тип )
			КонецЕсли;
			АдресРФ.СвРайМО.Район = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			АдресРФ.Город = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			АдресРФ.НаселПункт = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			АдресРФ.Улица = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементДом.Тип = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипДомаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементДом.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Тип = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКорпусаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Тип = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКвартирыНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		ЭлементДом.Тип = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации("Дом");
	КонецЕсли;
	
	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.Тип = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации("Корпус");
	КонецЕсли;
	
	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.Тип = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации("Квартира");
	КонецЕсли;
	
	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	Иначе
		Результат.Представление = ПолеПредставления;
	КонецЕсли;
	
	Адрес.Состав = ?(АдресРоссийский, АдресРФ, Результат.Представление);
	
	Возврат Результат;
КонецФункции

Функция СократитьНеЦифры(Текст, ДопустимоКромеЦифр = "", Направление = Истина)
	
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа    
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;
	
	Пока Индекс <> Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ >= "0" И Символ <= "9") Или Найти(ДопустимоКромеЦифр, Символ) = 0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;
	
	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;
	
	// Сокращение справа
	Возврат Лев(Текст, Индекс);
	
КонецФункции

// Получение глубокого свойства объекта.
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип );
	Возврат АдресРФ.СвРайМО;
КонецФункции

// Конструктор таблицы значений.
//
Функция ТаблицаЗначений(СписокКолонок, СписокИндексов = "")
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из (Новый Структура(СписокКолонок)) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	СтрокиИндексов = СтрЗаменить(СписокИндексов, "|", Символы.ПС);
	Для НомерИндекса = 1 По СтрЧислоСтрок(СтрокиИндексов) Цикл
		КолонкиИндекса = СокрЛП(СтрПолучитьСтроку(СтрокиИндексов, НомерИндекса));
		Для Каждого КлючЗначение Из (Новый Структура(КолонкиИндекса)) Цикл
			ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
КонецФункции

Процедура ВставитьЗданиеПомещение(XDTOАдрес, Тип, Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = XDTOАдрес.Получить(УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(Тип) );
	Если Запись = Неопределено Тогда
		Запись = XDTOАдрес.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип) );
		Запись.Номер = ФабрикаXDTO.Создать(Запись.Свойства().Получить("Номер").Тип);
		Запись.Номер.Значение = Значение;
		
		КодТипа = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(Тип);
		Если КодТипа = Неопределено Тогда
			КодТипа = Тип;
		КонецЕсли;
		Запись.Номер.Тип = КодТипа
	Иначе        
		Запись.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает первую подстроку из цифр в строке. Параметр ПозицияНачала изменяется на первую не цифру.
//
Функция НайтиПодстрокуЦифр(Текст, ПозицияНачала = Неопределено, ДопустимоКромеЦифр = "")
	
	Если ПозицияНачала = Неопределено Тогда
		ПозицияНачала = 1;
	КонецЕсли;
	
	Результат = "";
	ПозицияКонца = СтрДлина(Текст);
	ПоискНачала  = Истина;
	
	Пока ПозицияНачала <= ПозицияКонца Цикл
		Символ = Сред(Текст, ПозицияНачала, 1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";
		
		Если ПоискНачала Тогда
			Если ЭтоЦифра Тогда
				Результат = Результат + Символ;
				ПоискНачала = Ложь;
			КонецЕсли;
		Иначе
			Если ЭтоЦифра Или Найти(ДопустимоКромеЦифр, Символ) > 0 Тогда
				Результат = Результат + Символ;    
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПозицияНачала = ПозицияНачала + 1;
	КонецЦикла;
	
	// Убираем возможные висящие разделители справа.
	Возврат СократитьНеЦифры(Результат, ДопустимоКромеЦифр, Ложь);
	
КонецФункции

Функция СоздатьДопАдрЭлемента(АдресРФ)
	СвойствоДопАдрЭлемента = АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭлемента = ФабрикаXDTO.Создать(СвойствоДопАдрЭлемента.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭлемента);
	Возврат ДопАдрЭлемента;
КонецФункции

Функция СоздатьНомерДопАдрЭлемента(АдресРФ)
	ДопАдрЭл = СоздатьДопАдрЭлемента(АдресРФ);
	ДопАдрЭл.Номер = ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);
	Возврат ДопАдрЭл.Номер;
КонецФункции

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//Область СлужебныеПроцедурыИФункцииПоРаботеСXML

// Возвращает соответствующее значение перечисления "ТипыКонтактнойИнформации" по строке XML.
//
// Параметры:
//    XMLСтрока - Строка, описывающая контактную информацию.
//
// Возвращаемое значение:
//     ПеречислениеСсылка.ТипыКонтактнойИнформации - результат.
//
Функция ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(XMLСтрока) );
КонецФункции

// Десериализатор известных платформе типов.
Функция ЗначениеИзСтрокиXML(Знач Текст)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

// Преобразует текст XML контактной информации в перечисление типа.
//
// Параметры:
//    Текст - Строка - исходный XML.
//
// Возвращаемое значение:
//    Строка - сериализованное значение перечисления ТипыКонтактнойИнформации.
//
Функция XSLT_ТипКонтактнойИнформацииПоСтрокеXML(Знач Текст)
	
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|  xmlns:ci=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|
		|  <xsl:template match=""/"">
		|    <EnumRef.ТипыКонтактнойИнформации xmlns=""http://v8.1c.ru/8.1/data/enterprise/current-config"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""EnumRef.ТипыКонтактнойИнформации"">
		|      <xsl:call-template name=""enum-by-type"" >
		|        <xsl:with-param name=""type"" select=""ci:КонтактнаяИнформация/ci:Состав/@xsi:type"" />
		|      </xsl:call-template>
		|    </EnumRef.ТипыКонтактнойИнформации>
		|  </xsl:template>
		|
		|  <xsl:template name=""enum-by-type"">
		|    <xsl:param name=""type"" />
		|    <xsl:choose>
		|      <xsl:when test=""$type='Адрес'"">
		|        <xsl:text>Адрес</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='НомерТелефона'"">
		|        <xsl:text>Телефон</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='НомерФакса'"">
		|        <xsl:text>Факс</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='ЭлектроннаяПочта'"">
		|        <xsl:text>АдресЭлектроннойПочты</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='ВебСайт'"">
		|        <xsl:text>ВебСтраница</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='Прочее'"">
		|        <xsl:text>Другое</xsl:text>
		|      </xsl:when>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|</xsl:stylesheet>
		|");
		
	Возврат Преобразователь.ПреобразоватьИзСтроки(СокрЛ(Текст));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//Область СлужебныеПроцедурыИФункцииПоРаботеСXSLT

////////////////////////////////////////////////////////////////////////////////

