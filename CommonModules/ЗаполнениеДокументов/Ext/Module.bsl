////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект    - объект редактируемого документа,
//  ДокументОснование - объект документа основания,
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	ФлагОтражРеглУчете = ложь;
	// Организация.
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Организация") <> Неопределено Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
		ФлагОтражРеглУчете = ?( НЕ ЗначениеЗаполнено(ДокументОснование.Организация), Ложь, ДокументОснование.Организация.ОтражатьВРегламентированномУчете);
	КонецЕсли;

	// Подразделение.
	Если МетаданныеДокумента.Реквизиты.Найти("Подразделение") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
	КонецЕсли;

	// Склад.
	Если МетаданныеДокумента.Реквизиты.Найти("Склад") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Склад") <> Неопределено Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("Склад") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("СкладГруппа") <> Неопределено Тогда
		ДокументОбъект.Склад = ?(ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.Склады"), ДокументОснование.СкладГруппа, Неопределено);
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("СкладОрдер") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("СкладОрдер") <> Неопределено Тогда
		ДокументОбъект.СкладОрдер = ДокументОснование.СкладОрдер;
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("СкладОрдер") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Склад") <> Неопределено Тогда
		ДокументОбъект.СкладОрдер = ДокументОснование.Склад;
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("СкладОрдер") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("СкладГруппа") <> Неопределено Тогда
		ДокументОбъект.СкладОрдер = ?(ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.Склады"), ДокументОснование.СкладГруппа, Неопределено);
	КонецЕсли;

	// Контрагент.
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("Грузоотправитель") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Грузоотправитель") <> Неопределено Тогда
		ДокументОбъект.Грузоотправитель = ДокументОснование.Грузоотправитель;
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("Грузополучатель") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Грузополучатель") <> Неопределено Тогда
		ДокументОбъект.Грузополучатель = ДокументОснование.Грузополучатель;
	КонецЕсли;
	
	// ДоговорКонтрагента.
	Если МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено 
	   И (МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено 
	      ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

			// КратностьВзаиморасчетов.
			Если МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Касса
	Если МетаданныеДокумента.Реквизиты.Найти("Касса") <> Неопределено Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли МетаданныеДокументаОснования.Реквизиты.Найти("Касса") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОснование.Касса) Тогда
				ДокументОбъект.Касса = ДокументОснование.Касса;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет 
	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли МетаданныеДокументаОснования.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Банковский счет организации
	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации) Тогда
		   Если МетаданныеДокументаОснования.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет)Тогда
					ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
				КонецЕсли;
	       ИначеЕсли МетаданныеДокументаОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
				  И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	// Структурная единица
	Если МетаданныеДокумента.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница)
		  И ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)Тогда
			ДокументОбъект.СтруктурнаяЕдиница = ДокументОснование.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЕсли;
	
	// ВалютаДокумента.
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если МетаданныеДокумента.Реквизиты.Найти("Касса") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено Тогда
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ТекущаяДата());
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если МетаданныеДокумента.Реквизиты.Найти("ТипЦен") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// Дисконтная карта.
	Если МетаданныеДокумента.Реквизиты.Найти("ДисконтнаяКарта") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("ДисконтнаяКарта") <> Неопределено Тогда
		ДокументОбъект.ДисконтнаяКарта = ДокументОснование.ДисконтнаяКарта;
	КонецЕсли;

	// УчитыватьНДС.
	Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") <> Неопределено Тогда
		ДокументОбъект.УчитыватьНДС = ДокументОснование.УчитыватьНДС;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	//Заполнение признаков отражения в учете: из настроек пользователя по умолчанию
	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
		ДокументОбъект.ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
	КонецЕсли;
	Если ФлагОтражРеглУчете Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете" );
			Если ДокументОбъект.ОтражатьВБухгалтерскомУчете Тогда
				Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
					ДокументОбъект.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете" );
				КонецЕсли;
			КонецЕсли; 		
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ИспользоватьПлановуюСебестоимость") <> Неопределено Тогда
		Если МетаданныеДокументаОснования.Реквизиты.Найти("ИспользоватьПлановуюСебестоимость") <> Неопределено Тогда
			ДокументОбъект.ИспользоватьПлановуюСебестоимость = ДокументОснование.ИспользоватьПлановуюСебестоимость;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокументаПоОснованию()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект 					- объект редактируемого документа,
//  ТипОперации						- необязательный, строка вида операции ("Покупка", "Продажа", "ПокупкаКомиссия", "ПродажаКомиссия"),
//										если не передан, то реквизиты, зависящие от вида операции, не заполняются,
//  ОбъектКопирования				- ссылка на объект, с которого скопирован заполняемый документ,
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ТипОперации = "", ОбъектКопирования = Неопределено) Экспорт
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	//Подготовим структуру параметров для заполнения шапки документа
	СтруктураПараметров = новый Структура();
	//Заполним структуру реквизитами документа
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураПараметров.Вставить(Реквизит.Имя, ДокументОбъект[Реквизит.Имя]);
	КонецЦикла;
	//+++АК ZICD 11.01.2017 ИП-00014365
	Если ДокументОбъект.ЭтоНовый() Тогда
		ДокументОбъект.Дата = ПолныеПрава.ТекущаяДатаСервера();
	КонецЕсли;
	//---АК
	СтруктураПараметров.Вставить("Номер",ДокументОбъект.Номер);
	СтруктураПараметров.Вставить("Дата",ДокументОбъект.Дата);
	ПолныеПрава.ПодготовитьСтруктуруДляЗаполненияШапкиДокумента(СтруктураПараметров, ТипОперации, ОбъектКопирования);
	ЗаполнитьЗначенияСвойств(ДокументОбъект,СтруктураПараметров);
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект 					- объект редактируемого документа,
//  ТипОперации						- необязательный, строка вида операции ("Покупка", "Продажа", "ПокупкаКомиссия", "ПродажаКомиссия"),
//										если не передан, то реквизиты, зависящие от вида операции, не заполняются,
//  ОбъектКопирования				- ссылка на объект, с которого скопирован заполняемый документ,
//
Процедура ЗаполнитьШапкуДокументаУпрФорма(Объект, ТипОперации = "", МетаданныеДокумента, ОбъектКопирования = Неопределено) Экспорт
	//Подготовим структуру параметров для заполнения шапки документа
	СтруктураПараметров = новый Структура();
	//Заполним структуру реквизитами документа
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураПараметров.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	СтруктураПараметров.Вставить("Номер",Объект.Номер);
	СтруктураПараметров.Вставить("Дата",Объект.Дата);
	ПолныеПрава.ПодготовитьСтруктуруДляЗаполненияШапкиДокумента(СтруктураПараметров, ТипОперации, ОбъектКопирования);
	ЗаполнитьЗначенияСвойств(Объект,СтруктураПараметров);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Процедура заполняет кассу по сделке или значением по умолчанию
//
// Параметры:
//	ДокументОбъект - объект редактируемого документа
//	ТекПользователь - ссылка на справочник, определяет текущего пользователя  
//
Процедура ЗаполнитьКассу(ДокументОбъект, ТекПользователь) Экспорт
	
	// Если кассу уже заполнена ранее, то здесь ничего делать не надо
	Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
		Возврат;
	КонецЕсли;
	
	КассаПоУмолчанию=Неопределено;
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Сделка") <> Неопределено Тогда
		
		МетаданныеДокументаСделка = ДокументОбъект.Сделка.Метаданные();
		
		Если ЗначениеЗаполнено(ДокументОбъект.Сделка) Тогда
			Если МетаданныеДокументаСделка.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
				КассаПоУмолчанию = ДокументОбъект.Сделка.СтруктурнаяЕдиница;
			ИначеЕсли МетаданныеДокументаСделка.Реквизиты.Найти("Касса") <> Неопределено Тогда
				КассаПоУмолчанию = ДокументОбъект.Сделка.Касса;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КассаПоУмолчанию) Тогда
		КассаПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаПоУмолчанию) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда 
			
			ДокументОбъект.Касса=КассаПоУмолчанию;
			ДокументОбъект.ВалютаДокумента    = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		ИначеЕсли ДокументОбъект.ВалютаДокумента=КассаПоУмолчанию.ВалютаДенежныхСредств Тогда
			
			ДокументОбъект.Касса=КассаПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьКассу()

// Процедура предназначена для заполнения реквизитов для настройки доступа к возможностям документов выпуска продукции (услуг).
//
Процедура ЗаполнитьНастройкиДокументаВыпуска(ДокументОбъект, ТекПользователь) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить("АвтораспределениеВозвратныхОтходов");
	МассивНастроек.Добавить("АвтораспределениеМатериалов");
	МассивНастроек.Добавить("АвтораспределениеПрочихЗатрат");
	МассивНастроек.Добавить("АвтораспределениеТехнологическихОпераций");
	МассивНастроек.Добавить("ИспользоватьМатериалы");
	МассивНастроек.Добавить("ИспользоватьТехнологическиеОперации");
	МассивНастроек.Добавить("ИспользоватьПрочиеЗатраты");
	МассивНастроек.Добавить("ИспользоватьВозвратныеОтходы");
	МассивНастроек.Добавить("ИспользоватьНаработку");
	МассивНастроек.Добавить("ИспользоватьЗаданияНаПроизводство");
	МассивНастроек.Добавить("ИспользоватьЗаказы");
	МассивНастроек.Добавить("ИспользоватьЗаказыНаОбслуживаниеОС");
	МассивНастроек.Добавить("ИспользоватьНаправленияВыпуска");
	МассивНастроек.Добавить("ИспользоватьПодразделенияНЗП");
	
	МассивНастроекДляЗаполнения = Новый Массив;
	Для Каждого Настройка Из МассивНастроек Цикл
		
		Если МетаданныеДокумента.Реквизиты.Найти(Настройка) <> Неопределено Тогда
			МассивНастроекДляЗаполнения.Добавить(Настройка);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураЗначений = УправлениеПользователями.ПолучитьСтруктуруЗначенийПоУмолчанию(ТекПользователь, МассивНастроекДляЗаполнения);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураЗначений);
	
КонецПроцедуры // ЗаполнитьНастройкиДокументаВыпуска()

// Устанавливает тип сделки документа
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ЗаказПокупателя - признак заказа покупателю/поставщику
//
Процедура УстановитьТипСделки(ДокументОбъект, ЗаказПокупателя = Истина) Экспорт

	Сделка = Неопределено;

	ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			Сделка = Документы["Заказ"+?(ЗаказПокупателя, "Покупателя", "Поставщику")].ПустаяСсылка()

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда

			НадписьСделка = "Счет "+?(ЗаказПокупателя,"покупателю:", "поставщика:");
			Сделка = Документы["СчетНаОплату"+?(ЗаказПокупателя, "Покупателю", "Поставщика")].ПустаяСсылка()

		КонецЕсли;
	КонецЕсли;

	// Поменяем значение сделки, если она не того типа.
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Сделка)
	   И ТипЗнч(ДокументОбъект.Сделка) <> ТипЗнч(Сделка) Тогда

		ДокументОбъект.Сделка = Сделка;

	КонецЕсли;

КонецПроцедуры // УстановитьТипСделки()

// Процедура выполняет общие действия при изменнении контрагента
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//
Процедура ПриИзмененииЗначенияКонтрагента(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЕстьДоговорКонтрагента        = МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено;
	ЕстьКонтактноеЛицоКонтрагента = МетаданныеДокумента.Реквизиты.Найти("КонтактноеЛицоКонтрагента") <> Неопределено;
	
	Если ДокументОбъект.Контрагент = Неопределено Тогда
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 

	Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
				КонтактноеЛицоКонтрагента = "";
			Иначе
				КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
	Иначе

		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			Если  МожноИспользоватьДоговорДляДокумента(ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
			Иначе
				ДоговорКонтрагента = ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
			КонецЕсли;
		КонецЕсли;

		Если ЕстьКонтактноеЛицоКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицоКонтрагента)
			 ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицоКонтрагента) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
				КонтактноеЛицоКонтрагента = ОбщегоНазначения.ПолучитьОсновноеКонтактноеЛицоКонтрагента(ДокументОбъект.Контрагент);
			Иначе
				Если ДокументОбъект.КонтактноеЛицоКонтрагента.Владелец <> ДокументОбъект.Контрагент Тогда
					КонтактноеЛицоКонтрагента = ОбщегоНазначения.ПолучитьОсновноеКонтактноеЛицоКонтрагента(ДокументОбъект.Контрагент);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	Если ЕстьДоговорКонтрагента Тогда
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено
		   И ДоговорКонтрагента <> Неопределено 
		   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.Организация        = ДоговорКонтрагента.Организация;
			Если Не ПустаяСтрока(ДокументОбъект.Номер) Тогда
				ДокументОбъект.Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьКонтактноеЛицоКонтрагента 
	    И КонтактноеЛицоКонтрагента <> Неопределено Тогда
		ДокументОбъект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
	КонецЕсли; 

	Если МетаданныеДокумента.Реквизиты.Найти("Сделка") <> Неопределено Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ТипЦен") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
	   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
	   И Не ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;


	// проверка и показ заметок
	//УправлениеКонтактами.ПроверитьЗаметкиПоДокументу(ДокументОбъект);

КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Формирует структуру параметров для получения договора продажи со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – структура параметров для получения договора продажи.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()

// Формирует структуру параметров для получения договора покупки со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – структура параметров для получения договора покупки.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	//СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()

// Формирует структуру параметров для получения договора продажи заказа покупателя,
// используется вдокументе и WEB-приложении "Управление заказми".
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя() Экспорт

	СтруктураПараметровДляПолученияДоговора = ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	СписокДопустимыхВидовВзаиморасчетов = Новый СписокЗначений();
	СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);

	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя()

// Формирует структуру параметров для получения договора продажи со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – структура параметров для получения договора продажи.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораКомиссионера()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	//СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораКомиссионера()

// Формирует структуру параметров для получения договора покупки со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – структура параметров для получения договора покупки.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораКомитента()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	//СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораКомитента()

////////////////////////////////////////////////////////////////////////////////
// ОБМЕН ДАННЫМИ COMMERCEML

#Если Клиент Тогда
	
Процедура ВыгрузитьДокументВФайлCommerceML(СсылкаНаДокумент) Экспорт
		
	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ВыгрузитьИзДокумента(СсылкаНаДокумент);
	
КонецПроцедуры

Процедура ОтправитьДокументПоПочтеCommerceML(СсылкаНаДокумент) Экспорт
		
	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ОтправитьИзДокумента(СсылкаНаДокумент);
	
КонецПроцедуры

#КонецЕсли




// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета или не указана, то курс 1.
	Если ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		Возврат 1;
	Иначе
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КурсДокумента - его и вернем
		Если МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено Тогда
			Возврат ДокументОбъект.КурсДокумента;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Возврат ДокументОбъект.КурсВзаиморасчетов;
		Иначе
			Возврат 1;
		КонецЕсли;

	КонецЕсли;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета или не указана, то кратность 1.
	Если ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		Возврат 1;
	Иначе
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КратностьДокумента - его и вернем
		Если МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено Тогда
			Возврат ДокументОбъект.КратностьДокумента;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Возврат ДокументОбъект.КратностьВзаиморасчетов;
		Иначе
			Возврат 1;
		КонецЕсли;

	КонецЕсли;

КонецФункции // КратностьДокумента()

// Функция определяет конрагента, соответствующего указанной организации
//
// Параметры
//  Организация - организация, по которой определяется конрагент
//
// Возвращаемое значение:
//  Контрагент - контрагент, соответствующий указанной организации
//
Функция ПолучитьКонтрагентаПоОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Организация" , Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|   Контрагент
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ Объект     = &Организация
	|    И ВидСвязи = &ВидСвязи";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;

	Возврат Справочники.Контрагенты.ПустаяСсылка();

КонецФункции // ПолучитьКонтрагентаПоОрганизации()

// Функция определяет организацию, соответствующего указанному юр/физ лицу конрагента
//
// Параметры
//  Контрагент - конрагент, по которому определяется организация
//
// Возвращаемое значение:
//  Организации - организация, соответствующий указаннму юр/физ лицу конрагента
//
Функция ПолучитьОрганизациюПоКонтрагенту(Контрагент) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ВидСвязи"   , Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|   Объект
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ Контрагент = &Контрагент
	|    И ВидСвязи = &ВидСвязи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Объект;
	КонецЕсли;

	Возврат Справочники.Организации.ПустаяСсылка();

КонецФункции // ПолучитьОрганизациюПоКонтрагенту()

// Функция возвращает таблицу договоров данного контрагента, доступных для выбора
//
// Параметры
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
// 	ВозвращатьТолькоПервые                  - булево, Истина - нужно вернуть только первые два договора,
//                                          - ложь - нужно вернуть весь список.
//  Организация                             - необязательный, организация, по которой определяется договор,
//                                            если не передана, то возвращается список договоров по всем орагнизациям.
//  ДополнительныеРеквизиты                 - необязательный, массив дополнительных реквизитов договора,
//                                            которые необходимо вернуть в результате запроса.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, ВозвращатьТолькоПервые, Организация = Неопределено, ДополнительныеРеквизиты = Неопределено)

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора", СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 2","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
		
			Запрос.Текст = Запрос.Текст  + ", " + ПсевдонимТаблицы + "." + НаименованиеРеквизита;
		
		КонецЦикла; 		
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|");

	Если ЗначениеЗаполнено(Организация) Тогда 

		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ПарВалютаВзаиморасчетов
		|")
		+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ПарВидДоговора)
		|")
		+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
		|")
		+ "
		|	         ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьДоступныеДоговорыКонтрагента()

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента, а также переданным параметрам.
// Если всем параметрам удовлетворяет основной договор, то выбирается он.
//
// Параметры
//  Организация                             - организация, по которой определяется договор
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если не передана организация, то проверим, можно ли использовать основной договор. 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Договор = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(Контрагент);
		Если МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(Организация, Контрагент);
	//РезультатЗапроса = ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, Истина, Организация );
	//ТаблицаДоговоров = РезультатЗапроса.Выгрузить();

	//Если ТаблицаДоговоров.Количество() = 1 Тогда
	//	Возврат ТаблицаДоговоров[0].Договор;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;

КонецФункции // ПолучитьДоговорПоОрганизацииИКонтрагенту()



// Проверяет. можно ли использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, ложь - нельзя.
//
Функция МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора)

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;


	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе невыбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено 
	   И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду взаиморасчетов.
	Если СписокДопустимыхВидовВзаиморасчетов <> Неопределено 
	   И СписокДопустимыхВидовВзаиморасчетов.НайтиПоЗначению(Договор.ВедениеВзаиморасчетов) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // МожноИспользоватьДоговорДляДокумента()

// Процедура выполняет общие действия при изменнении договора взаиморасчетов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  СпособЗаполненияЦен            - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                   регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
//  СтараяВалютаВзаиморасчетов     - ссылка на справочник валют, определяет валюту взаиморасчетов 
//                                   до изменения договора;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа;
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа");
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ИмяТабличнойЧасти	           - имя табличной части
//  СтарыйДоговорКонтрагента       - старый договор контрагента, который был до изменения
//  СтруктураЗначений              - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
//
Процедура ПриИзмененииЗначенияДоговора(ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
	                             СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", ИмяТабличнойЧасти, 
	                             СтарыйДоговорКонтрагента = Неопределено,
	                             СтруктураЗначений = Неопределено) Экспорт

	Перем Договор, ТипЦенВДоговоре;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Договор = ДокументОбъект.ДоговорКонтрагента;
	
	//При изменении договора необходимо очистить Сделку
	Если МетаданныеДокумента.Реквизиты.Найти("Сделка") <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.Сделка) И 
			(ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ
			ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ
			ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") ИЛИ
            ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда

			Если Договор<>ДокументОбъект.Сделка.ДоговорКонтрагента Тогда
				ДокументОбъект.Сделка = Неопределено;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(Договор) Тогда

		// Если ДоговорКонтрагента не заполнен то не проводим никаких изменений.
		Возврат;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и догоров взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и догоров взаиморасчетов имеет тип не договор покупателя
		//СписокТиповОбъектовПоступлениеОборудования = Новый СписокЗначений;
		//СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументОбъект.ПоступлениеТоваровУслуг"));
		//СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументОбъект.ЗаказПоставщику"));
		//СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		//СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));

		//МожноПродолжать = Истина;

		//Если СписокТиповОбъектовПоступлениеОборудования.НайтиПоЗначению(ТипЗнч(ДокументОбъект)) <> Неопределено
		//   И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		//  ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
		//  ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Оборудование) Тогда

		//	Если Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		//		МожноПродолжать = Ложь;
		//		СтрокаВозможныхВыборов = "поставщиками";
		//	КонецЕсли;

		//Иначе

//			Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
//				 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)
//			 ИЛИ (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
//				 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда

//				МожноПродолжать = Ложь;
//				СтрокаВозможныхВыборов = ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, "покупателями или с комиссионерами", "поставщиками или комитентами");

//			КонецЕсли;

//		//КонецЕсли;

//		Если НЕ МожноПродолжать Тогда

//			Если НЕ ЗначениеЗаполнено(СтарыйДоговорКонтрагента) Тогда
//				ДокументОбъект.ДоговорКонтрагента = Неопределено;
//			Иначе
//#Если Клиент Тогда

//				ТекстПредупреждения = "В документе можно выбирать только договора с "
//									+ СтрокаВозможныхВыборов + "!" + Символы.ПС;

//				Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
//					ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
//					ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
//				Иначе
//					ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
//					ДокументОбъект.ДоговорКонтрагента = Неопределено;
//				КонецЕсли;

//				Предупреждение(ТекстПредупреждения);
//#КонецЕсли
//			КонецЕсли;

//			Возврат; // дальше ничего пересчитывать не надо

//		КонецЕсли;
	КонецЕсли;

	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда

		ДокументОбъект.Контрагент = Договор.Владелец;

	ИначеЕсли ЗначениеЗаполнено(Договор)
	        И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.
#Если Клиент Тогда
			Предупреждение("Выбранный договор принадлежит другому контрагенту. 
			               |Будет восстановлен старый договор.");
#КонецЕсли

			Договор = СтарыйДоговорКонтрагента;

	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.
	
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено
		 И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = Договор.Организация;
		ДокументОбъект.Номер = "";
	КонецЕсли;

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать = Ложь Тогда

		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено Тогда
				ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено Тогда
				ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
				ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

		//+++АК sils 21.02.2018 ИП-00017897
		//Если МетаданныеДокумента.Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("ТипЦен") <> Неопределено и
			Договор.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		//---АК
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
				ДокументОбъект.ТипЦен = Договор.ТипЦен;
				Если МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено 
				   И МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
				   И ДокументОбъект.УчитыватьНДС Тогда
					ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
		               |отличные от установленных в документе:";

		// Валюта документа
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено
		   И (ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
			НовыйВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
			Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
			КонецЕсли;
			Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
			КонецЕсли;

			Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
				НеобходимоПересчитать = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС + 
				                 "Валюта документа: """ +
				                ?(НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента), "Не задана",СокрЛП(ДокументОбъект.ВалютаДокумента)) +
				                  """, договора: """ +  СокрЛП(НовыйВалютаДокумента) + """.";
			КонецЕсли;
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		//+++АК sils 21.02.2018 ИП-00017897
		//Если МетаданныеДокумента.Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("ТипЦен") <> Неопределено и
			Договор.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		//---АК
			НовыйТипЦен = ДокументОбъект.ТипЦен;
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
				НовыйТипЦен = Договор.ТипЦен;
			КонецЕсли;

			Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать = Истина;
				НадоПередаватьНовыйТипЦен = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС +
				                 "Тип цен документа: """ +
				                 ?(НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен), "Не задан",СокрЛП(ДокументОбъект.ТипЦен)) +
				                   """, договора: """ + СокрЛП(НовыйТипЦен) + """.";
			КонецЕсли;
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с договором?";
#Если Клиент Тогда
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда

				// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
				СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииЗначенияДоговора");
				ЗаполнениеДокументов.ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,, СтруктураЗначений, ?(НадоПередаватьНовыйТипЦен, НовыйТипЦен, Неопределено));

				// Если в форме "Цены и валюта" бала нажата кнопка отмена то проверим реквизиты
				// КурсВзаиморасчетов и КратностьВзаиморасчетов на заполнение
				ЕстьКурсВзаиморасчетов      = МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено;
				ЕстьКратностьВзаиморасчетов = МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено;
				Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.КратностьВзаиморасчетов) Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;
#Иначе
			Если Истина Тогда
#КонецЕсли
				ЕстьКурсВзаиморасчетов      = МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено;
				ЕстьКратностьВзаиморасчетов = МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено;
				Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
		Иначе

			// Установим курс и кратность взаиморасчетов
			Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено 
			   И (ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				Если МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0

	// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной, 
	// очистим договор
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено 
	   И ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
	   И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

#Если Клиент Тогда

		Если НЕ ЗначениеЗаполнено(СтарыйДоговорКонтрагента) Тогда
			ДокументОбъект.ДоговорКонтрагента = Неопределено;
		Иначе
			ТекстПредупреждения = "Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!"
			                    + Символы.ПС;

			Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

			Предупреждение(ТекстПредупреждения);
		КонецЕсли;
#Иначе
		ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
#КонецЕсли
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДоговора()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АДРЕСОВ ДОСТАВКИ ТОВАРОВ

#Если Клиент Тогда

// Процедура вызова формы редактирования адреса доставки
Процедура РедактированиеАдресаДоставки(АдресДоставкиКонтрагента, ПолеВводаАдреса, ДокументОбъект) Экспорт
	Если СокрЛП(АдресДоставкиКонтрагента) = "" Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если  МетаданныеДокумента.Реквизиты.Найти("Грузополучатель") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.Грузополучатель) Тогда
		Получатель = ДокументОбъект.Грузополучатель;
	Иначе
		Если ДокументОбъект.Контрагент.Пустая() Тогда
			Возврат;
		КонецЕсли;
		Получатель = ДокументОбъект.Контрагент;
	КонецЕсли;
	
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресДоставкиКонтрагента);
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбработкаРедактирования.Объект = Получатель;
	ОбработкаРедактирования.ДоступностьОбъекта = Ложь;
	ОбработкаРедактирования.мВозвратСтруктуры = Истина;
		
	УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(ОбработкаРедактирования, СтруктураАдреса);
	
	//Определим вид контактной информации
	//Выполняется после вызова УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре,
	//	т.к. для поиска необходимо получить представление адреса доставки

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Вид,
	//В первую очередь берем адрес доставки, если такой есть
	|	ВЫБОР КОГДА Вид = Значение(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента) Тогда
	|		0
	|	Иначе
	|		1
	|	Конец КАК Сортировка
	|ИЗ РегистрСведений.КонтактнаяИнформация
	|ГДЕ Объект = &Объект
	|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И Представление ПОДОБНО &АдресДоставки
	|УПОРЯДОЧИТЬ ПО Сортировка");
	Запрос.УстановитьПараметр("Объект", Получатель);
	Запрос.УстановитьПараметр("АдресДоставки", СокрЛП(ОбработкаРедактирования.Представление));
	Вид = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Вид = Выборка.Вид;
	КонецЕсли;
	ОбработкаРедактирования.Вид = Вид;
	
	Форма = ОбработкаРедактирования.ПолучитьФорму("ФормаЗаписиАдреса", ПолеВводаАдреса);
	Форма.РежимВыбора = Истина;
	Форма.ЭлементыФормы.ПанельКомментарий.Свертка = РежимСверткиЭлементаУправления.Низ;
	Форма.Открыть();
	
КонецПроцедуры

#КонецЕсли

// Процедура заполнения реквизитов документа, относящихся к расчету стоимости доставки, при вводе документа по основанию
Процедура ЗаполнитьДанныеДоставкиПоОснованию(ДокументОбъект, ДокументОснование) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДокументОснование, "Грузополучатель, АдресДоставки, ДополнениеКАдресуДоставки");
	
КонецПроцедуры

// Функция возвращает строковое представление адреса доставки из контактной информации
// и комментарий из контактной информации соответсвующей строки
Функция ПолучитьАдресДоставкиСтрокой(Грузополучатель, КомментарийАдреса) Экспорт
	
	Результат = "";
	КомментарийАдреса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "                                       
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.*
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Грузополучатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		СтрокаТаблицыДоставки = ТаблицаЗапроса[0];
		Результат = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтрокаТаблицыДоставки);
		КомментарийАдреса = СтрокаТаблицыДоставки.Комментарий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если Клиент Тогда

// Процедура обрабатывает выбор адреса доставки из формы списка адресного классификатора
Процедура ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ДокументОбъект) Экспорт
	
	Перем Получатель;
	
	СтандартнаяОбработка = Ложь;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если  МетаданныеДокумента.Реквизиты.Найти("Грузополучатель") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.Грузополучатель) Тогда
		Получатель = ДокументОбъект.Грузополучатель;
	Иначе
		Если ДокументОбъект.Контрагент.Пустая() Тогда
			ВвестиЗначение(ДокументОбъект.Контрагент, "Выберите контрагента");
		КонецЕсли;
		Получатель = ДокументОбъект.Контрагент;
	КонецЕсли;

	Если ЗначениеЗаполнено(Получатель) Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.мВозвратДанныхКонтактнойИнформации = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Получатель;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		СтруктураАдреса = ФормаВыбора.ОткрытьМодально();

		// Устанавливаем адрес доставки и его комментарий
		Если СтруктураАдреса <> Неопределено Тогда
			ДокументОбъект.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтруктураАдреса);
			// Пустое дополнение к адресу меняем на непустое без дополнительных вопросов аользователю
			ИзменятьДополнениеКАдресуДоставки = НЕ ЗначениеЗаполнено(ДокументОбъект.ДополнениеКАдресуДоставки) 
											ИЛИ (ДокументОбъект.ДополнениеКАдресуДоставки = СтруктураАдреса.Комментарий);
			// спросим пользователя о необходимости изменить дополнение к адресу доставки
			Если НЕ ИзменятьДополнениеКАдресуДоставки Тогда
				Ответ = Вопрос("Дополнение к адресу доставки отличается от текущего значения в документе. Поменять дополнение к адресу доставки?", 
					РежимДиалогаВопрос.ДаНет, , , "Изменение дополнения к адресу доставки");

				ИзменятьДополнениеКАдресуДоставки = (Ответ = КодВозвратаДиалога.Да);	
			КонецЕсли;
			
			// Изменяем дополнение к адресу доставки при необходимости
			Если ИзменятьДополнениеКАдресуДоставки Тогда
				ДокументОбъект.ДополнениеКАдресуДоставки = СтруктураАдреса.Комментарий;
			КонецЕсли;	
						
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли



// Функция возвращает число рабочих дней между заданными датами по регламентированному производственному календарю
//
//Параметры:
// ДатаНач      - начальная дата
// ДатаКон      - конечная дата
//
Функция ЧислоРабочихДней(ДатаНач, ДатаКон) Экспорт
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",             ДатаКон);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕстьNull(СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
	|				ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК ЧислоРабочихДней
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаКон
	|	//РегламентированныйПроизводственныйКалендарь.Год = &Год";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЧислоРабочихДней;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Функция возвращает дату отстоящую на заданное количество рабочих дней от начальной в соответствии с
//регламентированным производственным календарем
//
//Параметры:
// ДатаНач      - начальная дата
// ЧислоДней    - количество рабочих дней, на которое искомая дата должна отстоять от начальной
//
Функция ОпределитьДату(ДатаНач, ЧислоДней) Экспорт
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ЧислоДней",           ЧислоДней);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Если ЧислоДней > 0 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря > &ДатаНач
		|	 И (РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
		|      ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень)
		|УПОРЯДОЧИТЬ ПО 
		|	ДатаКалендаря ВОЗР";
		
	Иначе
		ЧислоДней = -ЧислоДней;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря < &ДатаНач
		|	 И (РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
		|      ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень)
        |УПОРЯДОЧИТЬ ПО
		|	ДатаКалендаря УБЫВ
		|";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = ЧислоДней Тогда
		Пока Выборка.Следующий() Цикл
			ТекДата = Выборка.ДатаКалендаря;
		КонецЦикла;
		Возврат ТекДата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	



// Функция заполняет текст запроса подзапросами по границам данной последовательности
//
// Параметры
//  ТекстЗапроса      		- исходный текст запроса,
//  ИмяПоследовательности   - имя последовательности.
//
// Возвращаемое значение:
//  строка, содержащая текст запроса
//
Функция ДополнитьТекстЗапросаПоГраницам(ТекстЗапроса,ИмяПоследовательности)
	ДополненныйТекстЗапроса = ТекстЗапроса;
	Если Не ПустаяСтрока(ДополненныйТекстЗапроса) Тогда
		ДополненныйТекстЗапроса = ДополненныйТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ ";
	КонецЕсли;
	
	Если ПустаяСтрока(ДополненныйТекстЗапроса) Тогда
		ДополненныйТекстЗапроса = ДополненныйТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1";
	Иначе	
		ДополненныйТекстЗапроса = ДополненныйТекстЗапроса + "
		|ВЫБРАТЬ";
	КонецЕсли;
	ДополненныйТекстЗапроса = ДополненныйТекстЗапроса + "
	|	" + ИмяПоследовательности + "Границы.МоментВремени КАК МоментВремени
	|ИЗ
	|	Последовательность." + ИмяПоследовательности + ".Границы КАК " + ИмяПоследовательности + "Границы
	|ГДЕ
	|	" + ИмяПоследовательности + "Границы.Организация В (&Организации)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ИмяПоследовательности + ".МоментВремени
	|ИЗ
	|	Последовательность." + ИмяПоследовательности + " КАК " + ИмяПоследовательности + "
	|ГДЕ
	|	(НЕ " + ИмяПоследовательности + ".ПроведенВХронологическойПоследовательности)
	|	И " + ИмяПоследовательности + ".Организация В (&Организации)
	|";
	Возврат ДополненныйТекстЗапроса;
КонецФункции	



#Если Клиент Тогда

// Процедура - обработчик события ПриИзменении поля ввода Организация
//
//  ДокументОбъект                          - объект документ в форме которого произошло событие,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых видов взаиморасчетов, не обязетльный.
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект, СтруктураПараметровДляПолученияДоговора= Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда


		Если МетаданныеДокумента.Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено
		   И ЗначениеЗаполнено(ДокументОбъект.Организация)
		   И ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)
		   И Не ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда

			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Предупреждение("Выбранное подразделение не соответствует организации!");

		КонецЕсли;

		Если МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
				 Или ДокументОбъект.ДоговорКонтрагента.Организация <> ДокументОбъект.Организация Тогда
					ДокументОбъект.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
				КонецЕсли;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()


#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ЗНАЧЕНИЯ РЕКВИЗИТОВ НА ЗАПОЛНЕННОСТЬ ПРИ ПРОВЕДЕНИИ

// Процедура проверяет реквизиты на заполненность
// Если хотя бы один из них не заполнен то Отказ становится Истина и в сообщении
// пишется о незаполненном реквизите
// Паремтры:
// ОбъектПроверки - тот объект реквизиты которого нужно проверить на заполненность
// СписокИменРеквизитов - список реквизитов для проверки (В значении - Имя реквизиты, 
//										в представлении - строковое название реквизита)
// Отказ - есть ли незаполненный реквизит или нет
// ЖесткаяПроверка - Булевский параметр. В случае Ложь пишется только информация о незаполненных реквизитах, а Отказ не изменяется
Процедура ПроверитьЗаполнениеРеквизитов(ОбъектПроверки, СписокИменРеквизитов, Отказ, ЖесткаяПроверка = Истина) Экспорт
	
	Если (СписокИменРеквизитов = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокИменРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(ОбъектПроверки[ЭлементСписка.Значение]) Тогда
			
			СообщениеОНевозможностиЗаписи = "Реквизит """+СокрЛП(ЭлементСписка.Представление)+""" не заполнен!";
			
			Если ЖесткаяПроверка Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СообщениеОНевозможностиЗаписи);
				Отказ = Истина;
			Иначе
				Сообщить(СообщениеОНевозможностиЗаписи, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	//ПроверитьПринадлежностьКВидамУчета();

	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = Неопределено;
	МетаданныеРеквизиты         = Неопределено;
	ТабличнаяЧасть              = ДокументОбъект[ИмяТабличнойЧасти];

	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				Если ПредставлениеТабличнойЧасти = Неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;
				
				Если МетаданныеРеквизиты = Неопределено Тогда
					МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
				КонецЕсли;
				
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

//Проверяет соответствие реквизита ПериодРегистрации и даты документа
Процедура ПриПроведенииПроверитьЗаполнениеПериодаРегистрации(Источник, Отказ, РежимПроведения) Экспорт
	Если НачалоМесяца(Источник.ПериодРегистрации) <> НачалоМесяца(Источник.Дата) Тогда
		Заголовок = "";
		ОбщегоНазначения.СообщитьОбОшибке("Период регистрации не соответствует дате документа!", Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

// Процедура вызывает сервисный механизм для изменения общих для
// всей табличной части Товары реквизитов, таких, например, как
// тип цен, валюта и т. д.
//
// Параметры:
//  ДокументОбъект                     - объект редактируемого документа; 
//  СпособЗаполненияЦен                - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                       регистров ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр;
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураЗначений                  - для эмуляции ввода пользователем валюты, типа цен и пр. Применяется при
//                                       автоматическом заполнении документов.
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//  СтруктураНеобрабатываемыхТабличныхЧастей - структура, содержащая имена табличных частей, которые не надо 
//                                       обрабатывать при изменении цен/валюты;
//
Процедура ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, 
							   СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
							   ВалютаРегламентированногоУчета,
							   СкидкаУстановлена = Ложь,
							   СтруктураЗначений = Неопределено,
							   НовыйТипЦенДляУстановки = Неопределено,
							   СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт

	// Откроем модально форму "Цены и Налоги" и получим структуру старых и новых значений реквизитов документа
	Автозаполнение = Ложь;
	Если СтруктураЗначений = Неопределено Тогда

		СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
									  СтруктураНеРедактируемыхРеквизитов, ИмяТабличнойЧасти, НовыйТипЦенДляУстановки);

	Иначе
		Автозаполнение = Истина;

	КонецЕсли;

	// Если в форме отказались от изменений, то необходимо прекратить обработку
	Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	//обрабатываем изменения Товаров, Услуг, ВозвратнойТары и Оборудования
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл

		ТекущееИмяТабличнойЧасти = ТЧОбъекта.Имя;

		Если (СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено
			  ИЛИ Не СтруктураНеобрабатываемыхТабличныхЧастей.Свойство(ТекущееИмяТабличнойЧасти))
			И (   ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена",               МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма",              МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления",    МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления",   МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи",       МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи",      МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая",         МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая",        МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС",           МетаданныеДокумента, ТекущееИмяТабличнойЧасти)) Тогда

			Ценообразование.ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект,
												  СпособЗаполненияЦен,
												  СтруктураРеквизитовДокумента,
												  ТекущееИмяТабличнойЧасти,
												  ВалютаРегламентированногоУчета,
												  СкидкаУстановлена,
												  СтруктураЗначений,
												  Автозаполнение);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ИзменитьЦеныВалюту()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДБОРА БУХ СЧЕТОВ НА ОСНОВАНИИ СЧЕТОВ ФИН

//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
Функция ВернутьТаблицуДляСопоставления() Экспорт
	
	Проводки = Новый ТаблицаЗначений;
	Проводки.Колонки.Добавить("СчетДт");
	Проводки.Колонки.Добавить("СубконтоДт1");
	Проводки.Колонки.Добавить("СубконтоДт2");
	Проводки.Колонки.Добавить("СубконтоДт3");
	Проводки.Колонки.Добавить("СчетКт");
	Проводки.Колонки.Добавить("СубконтоКт1");
	Проводки.Колонки.Добавить("СубконтоКт2");
	Проводки.Колонки.Добавить("СубконтоКт3");
	
	Проводки.Колонки.Добавить("СчетДтБух");
	Проводки.Колонки.Добавить("СубконтоДтБух1");
	Проводки.Колонки.Добавить("СубконтоДтБух2");
	Проводки.Колонки.Добавить("СубконтоДтБух3");
	Проводки.Колонки.Добавить("СчетКтБух");
	Проводки.Колонки.Добавить("СубконтоКтБух1");
	Проводки.Колонки.Добавить("СубконтоКтБух2");
	Проводки.Колонки.Добавить("СубконтоКтБух3");
	
	Проводки.Колонки.Добавить("Сумма");	
	Проводки.Колонки.Добавить("НомерСтроки");
	
	Возврат Проводки;
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
Процедура ПроставитьСчетИСубконтоБУВДокумент(Документ, Проводки, ИмяТЧ, СчетчикСубконто, Префикс) Экспорт
	
	ТаблицаВозврата = ВернутьРезультатСопоставленияФинБухСчетов(Проводки);
	
	Для Каждого ЭлементПроводки Из Проводки Цикл
		
		СтрокаПроводки = Документ[ИмяТЧ].Найти(ЭлементПроводки.НомерСтроки, "НомерСтроки");
		
		Если СтрокаПроводки <> Неопределено Тогда 			
			
			СтрокаПроводки["СчетЗатрат" + Префикс] = ЭлементПроводки.СчетДТБух;			
			
			Для Сч = 1 По СчетчикСубконто Цикл
				СтрокаПроводки["Субконто" + Префикс + Строка(Сч)] = ЭлементПроводки["СубконтоДтБух" + Строка(Сч)];
			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
Функция ВернутьРезультатСопоставленияФинБухСчетов(Проводки) Экспорт	
		    	
	СоответсвиеСчетовФинБух = БухгалтерскийУчетВызовСервераПовтИспУФ.СоответствиеСчетовФинБух();
	СоответсвиеСчетовБухФин = БухгалтерскийУчетВызовСервераПовтИспУФ.СоответствиеСчетовБухФин();
	
	Для Каждого СтрокаТЗ Из Проводки Цикл
		// СЧЕТА ДТ
		Если ЗначениеЗаполнено(СтрокаТЗ.СчетДТ) И НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетДТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Дт", СоответсвиеСчетовФинБух);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетДТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетДТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Дт", СоответсвиеСчетовБухФин, "Фин");
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.СчетДТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетДТБух) Тогда
			ПроверитьСоответствиеСчетов(СтрокаТЗ,"Дт", СтрокаТЗ.СчетДт, СтрокаТЗ.СчетДТБух, СоответсвиеСчетовФинБух);
		КонецЕсли;
		
		// СЧЕТА КТ
		Если ЗначениеЗаполнено(СтрокаТЗ.СчетКТ) И НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетКТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Кт", СоответсвиеСчетовФинБух);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетКТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетКТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Кт", СоответсвиеСчетовБухФин, "Фин");
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.СчетКТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетКТБух) Тогда
			ПроверитьСоответствиеСчетов(СтрокаТЗ,"Кт", СтрокаТЗ.СчетКт, СтрокаТЗ.СчетКТБух, СоответсвиеСчетовФинБух);
		КонецЕсли;		

	КонецЦикла;
	
	Возврат Проводки;
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
Процедура ЗаполнитьСчетИСубконто(СтрокаТЗ, ВидСчета, СоответствиеСчетов, БазаСчета="Бух")
	
	БазаСчетаИсточника = ?(БазаСчета="Бух", "", "Бух");
	СчетИсточник = СтрокаТЗ["Счет" + ВидСчета + БазаСчетаИсточника];
	Соответствие = СоответствиеСчетов[СчетИсточник];
	
	Если Соответствие <> Неопределено И Соответствие.Количество() > 0 Тогда 
		СтрокаТЗ["Счет" + ВидСчета + ?(БазаСчета="Бух", БазаСчета, "") ] = Соответствие[0]["Счет"+БазаСчета];		
		ОбработатьЗаполнениеСубконто(СтрокаТЗ, ВидСчета, БазаСчета, Соответствие[0].СоответствиеСубконто);
	Иначе
		ТекстСоощения = "В строке %1 для счета %2 не настроены соответствия";
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоощения, 
			Строка(СтрокаТЗ.НомерСтроки),
			СтрокаТЗ["Счет" + ВидСчета + БазаСчетаИсточника]);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСоощения);		
	КонецЕсли;
	
КонецПроцедуры 

//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
Процедура ПроверитьСоответствиеСчетов(СтрокаТЗ,ВидСчета, СчетФин, СчетБух, СоответствиеФинБух)	
	
	Соответствие = СоответствиеФинБух[СчетФин]; // Массив счетов для счета ФИн
	Если Соответствие <> Неопределено И Соответствие.Количество() > 0 Тогда 
		СоответствиеСчетов = Ложь;
		ВозможныеСчета = "";
		Для Каждого ЭлементСчета Из Соответствие Цикл 
			Если ЭлементСчета.СчетБух = СчетБух Тогда 
				СоответствиеСчетов = Истина;				
				Прервать;
			КонецЕсли;			
			ВозможныеСчета = ВозможныеСчета + ?(ЗначениеЗаполнено(ВозможныеСчета), ",", "") + Строка(ЭлементСчета.СчетБух);
		КонецЦикла;
		Если НЕ СоответствиеСчетов Тогда 
			ТекстСообщения = "В строке %1 счет %2 не соответствует счету %3, возможны счета %4";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								Строка(СтрокаТЗ.НомерСтроки),
								Строка(СчетФин),
								Строка(СчетБух),
								ВозможныеСчета);
								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли  Соответствие = Неопределено Тогда  
		ТекстСообщения = "В строке %1 счет %2 не соответствует счету %3, соответствия не определены";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
		Строка(СтрокаТЗ.НомерСтроки),
		Строка(СчетФин),
		Строка(СчетБух));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры 

//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
Процедура ОбработатьЗаполнениеСУбконто(СтрокаТЗ, ВидСчета, БазаСчета, СоответствиеСубконто)
	БазаСчетаИсточника = ?(БазаСчета="Бух", "Фин", "Бух");
	
	Если ТипЗнч(СоответствиеСубконто) = Тип("ТаблицаЗначений") Тогда 		
		
		Для Каждого Соответствие Из СоответствиеСубконто Цикл 
			Если НЕ ЗначениеЗаполнено(Соответствие["Поле"+БазаСчета]) Тогда 
				Продолжить;
			КонецЕсли;
			ИмяПоля  = ИмяПоля(ВидСчета, Соответствие["Поле"+БазаСчета], БазаСчета);
			
			Если ЗначениеЗаполнено(Соответствие["Поле"+БазаСчетаИсточника]) Тогда 
				Значение 	= СтрокаТЗ[ИмяПоля(ВидСчета, Соответствие["Поле"+БазаСчетаИсточника], БазаСчетаИсточника)];
				Выражение   = Соответствие["Выражение" +БазаСчета];
				Если ЗначениеЗаполнено(Выражение) Тогда 
					// Значение должно быть задано, учитывая вычисленного значение, Например Значение.ФизЛицо
					СтрокаТЗ[ИмяПоля] = Вычислить(Выражение);
				Иначе
					//Значение 	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Значение, "Наименование");
					СтрокаТЗ[ИмяПоля] = Значение;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Соответствие.Значение) Тогда 
				СтрокаТЗ[ИмяПоля] = Соответствие.Значение;
			ИначеЕсли ЗначениеЗаполнено(Соответствие["Выражение" +БазаСчета]) Тогда 
				СтрокаТЗ[ИмяПоля] = Вычислить(Соответствие["Выражение" +БазаСчета]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
Функция ИмяПоля(ВидСчета, ИмяПоля, Знач БазаСчета="")
	//
	БазаСчета = ?(БазаСчета="Бух", БазаСчета, "");
	Если Лев(ИмяПоля, 8) = "Субконто" Тогда 
		Возврат "Субконто" + ВидСчета + БазаСчета + Прав(ИмяПоля, 1);
	Иначе
		Возврат ИмяПоля + ВидСчета + БазаСчета;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//+++АК Susk (Суслин К.В.) 2018.08.02 ИП-00019041.02   
Функция ПолучитьСтруктуруСтатьяДДССчетУчетаРасчетов(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	СчетУчета = ПланыСчетов.Финансовый.ПустаяСсылка();
		
	//1) Статья ДДС	
	//2) Счет учета
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеОбъекта) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ЗначенияРеквизитовДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств,СчетУчетаРасчетовСКонтрагентом");		
		СтатьяДДС = ЗначенияРеквизитовДоговора.СтатьяДвиженияДенежныхСредств;
		//Счет учета из договора
		СчетУчета = ЗначенияРеквизитовДоговора.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	//2) Счет учета продолжение
		
	//2.Если у всех строк Товары указан 41.2, тогда 60.5
	Если СчетУчета.Пустая() Тогда
		Если ОбщегоНазначения.ЕстьТабЧастьДокумента("Товары", МетаданныеОбъекта) И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчета", МетаданныеОбъекта, "Товары") Тогда
			
			ТЗ_Товары = Объект.Товары.Выгрузить();
			
			Если ТЗ_Товары.Количество() И ВоВсехСтрокахТаблицыУказаноЗначение(ТЗ_Товары, ПланыСчетов.Финансовый.МатералыДляВыпуска, "СчетУчета") Тогда
				СчетУчета = ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки;
			КонецЕсли;			
			
		КонецЕсли;
	КонецЕсли;
	
	//3. Если заполнена только ТЧ Товары, то 60.3
	ЕстьЗаполненныеТовары = ОбщегоНазначения.ЕстьТабЧастьДокумента("Товары", МетаданныеОбъекта) И Объект.Товары.Количество();
	ЕстьЗаполненныеУслуги = ОбщегоНазначения.ЕстьТабЧастьДокумента("Услуги", МетаданныеОбъекта) И Объект.Услуги.Количество();
	ЕстьЗаполненноеОборудование = ОбщегоНазначения.ЕстьТабЧастьДокумента("Оборудование", МетаданныеОбъекта) И Объект.Оборудование.Количество();
	
	Если СчетУчета.Пустая() Тогда
		Если ОбщегоНазначения.ЕстьТабЧастьДокумента("Товары", МетаданныеОбъекта) Тогда		
			Если НЕ ЕстьЗаполненныеУслуги И НЕ ЕстьЗаполненноеОборудование Тогда
				СчетУчета = ПланыСчетов.Финансовый.РасчетыСПоставщиками;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если заполнены только услуги, то ничего не возвращаем. Т.к. много документов по услугам чисто.
	Если НЕ ЕстьЗаполненныеТовары И ЕстьЗаполненныеУслуги Тогда
		СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		СчетУчета = ПланыСчетов.Финансовый.ПустаяСсылка();
	КонецЕсли;	
	
	//4. Получаем счет учета по статье ДДС
	Если СчетУчета.Пустая() И НЕ СтатьяДДС.Пустая() Тогда
		СчетУчета = АК_КонтрольЗадолженности.СчетРасчетовПоСтатьеДДС(Объект.Дата, СтатьяДДС);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СтатьяДДС", СтатьяДДС);
	СтруктураВозврата.Вставить("СчетУчета", СчетУчета);
	
	Возврат СтруктураВозврата;	
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.08.02 ИП-00019041.02 
Функция ВоВсехСтрокахТаблицыУказаноЗначение(ТЗ_Документа, ИскомоеЗначение, ИмяКолонки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ_Документа." + ИмяКолонки + " КАК ИмяКолонки
	               |ПОМЕСТИТЬ ТЗ_Документа
	               |ИЗ
	               |	&ТЗ_Документа КАК ТЗ_Документа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_Документа.ИмяКолонки,
	               |	ВЫБОР
	               |		КОГДА ТЗ_Документа.ИмяКолонки = &ИскомоеЗначение
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК УказаноИскомоеЗначение,
				   |	ВЫБОР
	               |		КОГДА НЕ ТЗ_Документа.ИмяКолонки = &ИскомоеЗначение
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НЕУказаноИскомоеЗначение
	               |ПОМЕСТИТЬ ПромежуточнаяТЗ
	               |ИЗ
	               |	ТЗ_Документа КАК ТЗ_Документа
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЗ_Документа.ИмяКолонки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТЗ_Документа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ	               
	               |	МАКСИМУМ(ПромежуточнаяТЗ.УказаноИскомоеЗначение) КАК УказаноИскомоеЗначение,
				   |	МАКСИМУМ(ПромежуточнаяТЗ.НЕУказаноИскомоеЗначение) КАК НеУказаноИскомоеЗначение
	               |ИЗ
	               |	ПромежуточнаяТЗ КАК ПромежуточнаяТЗ";
	
	Запрос.УстановитьПараметр("ТЗ_Документа", ТЗ_Документа);
	Запрос.УстановитьПараметр("ИскомоеЗначение", ИскомоеЗначение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УказаноИскомоеЗначение И НЕ Выборка.НеУказаноИскомоеЗначение;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.08.13 ИП-00019041.02  
Процедура ЗаполнитьСтатьюДДССчетУчетаРасчетовВОбъекте(Объект) Экспорт
	
	СтруктураСчетСтатья = ПолучитьСтруктуруСтатьяДДССчетУчетаРасчетов(Объект);
	
	Объект.СтатьяДДС = СтруктураСчетСтатья["СтатьяДДС"];
	Объект.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетСтатья["СчетУчета"];
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.29 опт
Функция ВернутьТаблицуЗначенийСвойств(МассивСвойств, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Свойство,
	               |	ЗначенияСвойствОбъектов.Значение,
	               |	ЗначенияСвойствОбъектов.Объект
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Объект В(&МассивОбъектов)
	               |	И ЗначенияСвойствОбъектов.Свойство В(&МассивСвойств)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
	
	ТзВозврат = Запрос.Выполнить().Выгрузить();   
	
	ТзВозврат.Индексы.Добавить("Объект");
	ТзВозврат.Индексы.Добавить("Свойство");
	
	Возврат ТзВозврат;
	
КонецФункции
	
	
 