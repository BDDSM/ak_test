//
Функция СформироватьСтрокуПараметровЗапроса(Параметры)
	
	СтрокаПараметров = "";
	Для каждого Параметр Из Параметры Цикл
		Если ЗначениеЗаполнено(Параметр.Значение) Тогда
			СтрокаПараметров = СтрокаПараметров + ?(СтрокаПараметров="", "", "&") + Параметр.Ключ + "=" +
				?(ТипЗнч(Параметр.Значение)=Тип("Число"), Формат(Параметр.Значение, "ЧН=0; ЧГ=0"), Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаПараметров;
	
КонецФункции

//
Функция CreateMethodGetFile(file_id) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("method", "getFile");
	Структура.Вставить("file_id", file_id);
	Результат = "/getFile?" + СформироватьСтрокуПараметровЗапроса(Структура);
	
	Возврат Результат;
	
КонецФункции	

//
Функция ВыполнитьМетодPOST(Знач Токен, ТекстЗапроса = "") Экспорт
	
	//
	Если НРег(Лев(Токен, 3)) <> "bot" Тогда
		Токен = "bot" + Токен;
	КонецЕсли;
			
	//
	Сервер = "https://api.telegram.org/";
		
	АдресСервера = Сервер + Токен + ТекстЗапроса;
				
	Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	
	Если Константы.ИспользоватьПрокси.Получить() Тогда	
		Соединение.SetProxy(2, Константы.АдресПрокси.Получить() + ":" + Константы.ПортПрокси.Получить());		
	КонецЕсли;	
	
	Соединение.Open("GET", АдресСервера);
	Соединение.Send();	
	ТекстJSON =  Соединение.ResponseText();
	Результат = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ТекстJSON);
	
	//
	Возврат Результат;
	
КонецФункции	

//
Функция База_РезультатЗапросВТаблицуЗначений(RecordSet) Экспорт
	
	Если RecordSet = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	КоличествоПолейТаблица=RecordSet.fields.Count-1;
    ТаблицаПоискаТаблица = Новый массив;
    Если (НЕ RecordSet.EOF) Тогда
        ТаблицаПоискаТаблица = RecordSet.GetRows().Выгрузить();
	КонецЕсли;
	
	тзРезультат = Новый ТаблицаЗначений;
	
	Если ТаблицаПоискаТаблица.Количество() = 0 Тогда
		Возврат ТзРезультат;
	КонецЕсли;
	
	Для сч = 0 По КоличествоПолейТаблица Цикл
		массив = Новый Массив;
		массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[0][сч]));
        тзРезультат.Колонки.Добавить(RecordSet.fields.item(сч).name,Новый ОписаниеТипов(массив));
    КонецЦикла;

    Для Каждого стрТаблица Из ТаблицаПоискаТаблица Цикл
        стр=тзРезультат.Добавить();
        Для сч = 0 По КоличествоПолейТаблица Цикл
			попытка
               	стр[сч] = СокрЛП(стрТаблица[сч]);
            исключение
               	сообщить(ОписаниеОшибки());
			конецпопытки;			
        КонецЦикла;
	КонецЦикла;
	Возврат тзРезультат;	
	
КонецФункции

//
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.ConnectionTimeOut = 90; //минеев добавил таймауты
		CurrentConnection.CommandTimeOut    = 90;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//
Функция База_ВыполнитьЗапрос(ТекстЗапроса, СтрокаПодключения = "") Экспорт
		
	СтрокаПодключения = ?(СтрокаПодключения = "",
		ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram"),		
		СтрокаПодключения);
	
	Попытка		
		CurrentConnection = База_Подключение(СтрокаПодключения);
		CurrentConnection.CursorLocation = 2;
		
		RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
		Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
			RecordSet=RecordSet.NextRecordSet();
		КонецЦикла;			
		
		Возврат RecordSet;
	Исключение	
		ЗаписьЖурналаРегистрации("ОшибкаЗапроса",УровеньЖурналаРегистрации.Предупреждение,,,"Запрос: " + Символы.ПС + ТекстЗапроса + Символы.ПС + "Ошибка:" + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;	
	
КонецФункции

//
Процедура База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, СтрокаПодключения = "")  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, СтрокаПодключения);	
		
КонецПроцедуры

//
Процедура СоздатьСообщение(ИдБота, ИдЧата, ТекстСообщения, Клавиатура, ТипСообщения, ТекстНаКнопку = "", Парсер = "HTML", type_distribusion = 0) Экспорт
	
	ТекстЗапроса = 
	"INSERT INTO [Telegram].[dbo].[outbox_telegram]
	|	([bot_id]
	|	,[user_id]
	|	,[message]
	|	,[keyboard_id]
	|	,[keyboard_parameter]
	|	,[message_type]
	|	,[add_date]
	|	,[send_date]
	|	,[incoming_message]
	//+++АК rakp@automacon.ru, 30.11.2017 15:26:20,  без задачи, поле ТИП рассылки в рассылке телеграмм
	|	,[type_distribusion])
	//---АК rakp@automacon.ru
	|VALUES
	|	(" + ИДБота + "
	|	," + Формат(ИдЧата, "ЧН=0; ЧГ=") + "
	|	,'" + ТекстСообщения + "'
	|	," + Формат(Клавиатура, "ЧН=0; ЧГ=") + "
	|	,'" + ТекстНаКнопку + "'
	|	," + Формат(ТипСообщения, "ЧН=0; ЧГ=") + "
	|	,GETDATE()
	|	,NULL
	|	,NULL
	//+++АК rakp@automacon.ru, 30.11.2017 15:26:20,  без задачи,  поле ТИП рассылки в рассылке телеграмм
	|	," +type_distribusion + ");";
	//---АК rakp@automacon.ru
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса);
	
КонецПроцедуры

//
Процедура СоздатьПуш(НомерКарты, ТекстПуша, ТекстСообщения, ТипПуша = 0, ДанныеПуша = "") Экспорт
	
	ТекстЗапроса =
	"INSERT INTO [Telegram].[dbo].[outbox_MP]
	|([oneSignalToken]
	|,[Heading_message]
	|,[Message]
	|,[Type_message]
	|,[date_message]
	|,[date_send]
	|,[Data_message]
	|,[number])
	|SELECT
	|OneSignalToken
	|,'" + ТекстПуша + "'
	|,'" + ТекстСообщения + "'
	|," + Строка(ТипПуша) + "
	|,GETDATE()
	|,'1900-01-01'
	|,'" + ДанныеПуша + "'
	|,'" + НомерКарты + "'
	|FROM [vv03].[dbo].[Cards] (nolock)
	|WHERE number = '" + НомерКарты + "' and ISNULL(OneSignalToken, '') <> ''";
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса);
	
КонецПроцедуры

//
Процедура ЗагрузитьОтзывы(Тест = Ложь, ТестНГ = Ложь) Экспорт
	
	Если Тест Тогда
		ТекстЗапроса =
		"SELECT top 10 user_id,file_description,add_date,bot_id,isNULL(id_tov,0) as id_tov,isNULL(CashID,0) as CashID
		|FROM Telegram.dbo.BOT_Complaints (nolock)
		|WHERE (message_type = 300 OR message_type = 301)  and (Doc_Ref is NULL OR Doc_Ref = '')
		|ORDER BY add_date desc";		
	Иначе
		ТекстЗапроса =
		"SELECT top 100 user_id,file_description,add_date,bot_id,isNULL(id_tov,0) as id_tov,isNULL(CashID,0) as CashID
		|FROM Telegram.dbo.BOT_Complaints (nolock)
		|WHERE (message_type = 300 OR message_type = 301) and (Doc_Ref is NULL OR Doc_Ref = '')
		|ORDER BY add_date desc";		
	КонецЕсли;	

	Если ТестНГ Тогда
		ТекстЗапроса =
		"SELECT top 100 user_id,file_description,add_date,bot_id,isNULL(id_tov,0) as id_tov,isNULL(CashID,0) as CashID
		|FROM Telegram.dbo.BOT_Complaints (nolock)
		|WHERE (message_type = 301)
		|ORDER BY add_date desc";	
	КонецЕсли;
	
	
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);
	ТЗ = База_РезультатЗапросВТаблицуЗначений(Результат);
	
	Для Каждого Стр ИЗ ТЗ Цикл	
		Если Не ЗначениеЗаполнено(Стр.file_description) ИЛИ НЕ ЗначениеЗаполнено(Стр.id_tov) ИЛИ НЕ ЗначениеЗаполнено(Стр.CashID) Тогда
			Продолжить;
		КонецЕсли;	
		Товар = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Стр.id_tov);
		Если НЕ ЗначениеЗаполнено(Товар) Тогда
			Продолжить;
		КонецЕсли;
		Сумма = Число(Стр.CashID);
		ЗагрузитьОтзыв(Стр.file_description, Товар, Сумма, Тест ИЛИ ТестНГ);	
	КонецЦикла;	
	
КонецПроцедуры

//
Процедура ЗагрузитьОтзыв(УИД, Товар, Сумма, Тест = Ложь) Экспорт
	
	ТекстЗапроса =
	"SELECT [user_id],[message_type],[message_text],[file_id],[file_description],[add_date],[bot_id],number
	|FROM [Telegram].[dbo].[BOT_Complaints] (nolock)
	|WHERE file_description = '" + УИД + "'
	|AND message_type<100 ORDER BY add_date";
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);
	ТЗ = База_РезультатЗапросВТаблицуЗначений(Результат);
	
	Если ТЗ.Количество() = 0 Тогда Возврат КонецЕсли;
	
	ИдТелеграма	= ТЗ[0].user_id;
	Бот			= ТЗ[0].bot_id;	
	ДатаОтзыва	= ТЗ[0].add_date;
	НомерКарты	= ТЗ[0].number;
	
	ТекстЗапроса = 
	"DECLARE @ret int,@number char(7),@Name varchar(255), @Phone char(10), @m varchar(max),@mt int
	|EXEC @ret = [Loyalty].[dbo].[BOT_Find_Customer]
	|@id_telegram = " + Формат(ИдТелеграма, "ЧГ=") + ",
	|@Phone_Number = @Phone OUTPUT,@number = @number OUTPUT,@Name = @Name OUTPUT,@message = @m OUTPUT,@message_Type = @mt OUTPUT
	|SELECT isNULL(@Phone, '') as phone, isNULL(@number, '') as number, isNULL(@Name, '') as name";
	Если ИдТелеграма = 0 Тогда
		ТекстЗапроса =
		"DECLARE @ret int,@number char(7) = '" + НомерКарты + "',@Name varchar(255), @Phone char(10), @m varchar(max),@mt int
		|EXEC @ret = [Loyalty].[dbo].[BOT_Find_Customer]
		|@id_telegram = NULL,
		|@Phone_Number = @Phone OUTPUT,@number = @number OUTPUT,@Name = @Name OUTPUT,@message = @m OUTPUT,@message_Type = @mt OUTPUT
		|SELECT isNULL(@Phone, '') as phone, isNULL(@number, '') as number, isNULL(@Name, '') as name";		
	КонецЕсли;
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);
	ТЗ1 = База_РезультатЗапросВТаблицуЗначений(Результат);
	Если ТЗ1.Количество() = 0 Тогда Возврат КонецЕсли;
	
	НовыйОтзыв				= Документы.ОтзывНГ.СоздатьДокумент();
	НовыйОтзыв.Дата			= ТекущаяДата();
	НовыйОтзыв.ДатаОтзыва	= ДатаОтзыва;
	НовыйОтзыв.ТоварНГ		= Товар;
	НовыйОтзыв.СуммаНГ		= Сумма;
	НовыйОтзыв.ИдТелеграм	= ИдТелеграма;
	НовыйОтзыв.УИД			= УИД;
	НовыйОтзыв.Бот			= Бот;

	НовыйОтзыв.Имя			= ТЗ1[0].name;
	НовыйОтзыв.НомерКарты	= ТЗ1[0].number;
	НовыйОтзыв.Телефон		= ТЗ1[0].phone;
	
	ТекстОтзыва = "";
	Для каждого Стр Из ТЗ Цикл	
		Если Стр.message_type = 1 Тогда
			ТекстОтзыва = ТекстОтзыва + ?(ТекстОтзыва = "", "", Символы.ПС) + Стр.message_text;	
		ИначеЕсли Стр.message_type < 5 Тогда
			НоваяКартинка = НовыйОтзыв.Картинки.Добавить();
			НоваяКартинка.ИД = Стр.file_id;
			НоваяКартинка.Тип = Стр.message_type;
			УРЛ = "";
			ИмяФайла = "";
			//+++ AK suvv 06.07.2018 ИП-00018768
			//НоваяКартинка.Хранилище = ЗагрузитьКартинку(Стр.file_id, Бот, ИмяФайла, УРЛ);
			НоваяКартинка.Файл = ЗагрузитьКартинку(Стр.file_id, Бот, ИмяФайла, УРЛ);
			//--- AK suvv
			НоваяКартинка.УРЛ = УРЛ;
			НоваяКартинка.ИмяФайла = ИмяФайла;
		Иначе
			НоваяКартинка = НовыйОтзыв.Картинки.Добавить();
			НоваяКартинка.ИД = Стр.file_id;
			НоваяКартинка.Тип = Стр.message_type;
			УРЛ = "";
			ИмяФайла = "";
			Расширение = "";
			КаталогФайлов = РегистрыСведений.ОбращенияПокупателей.ПолучитьКаталогХраненияФайлов(ТекущаяДата());	
			//+++ AK suvv 06.07.2018 ИП-00018768
			//НоваяКартинка.Хранилище = ЗагрузитьКартинку(Стр.file_id, Бот, ИмяФайла, УРЛ, КаталогФайлов, Расширение, Истина);
			НоваяКартинка.Файл = ЗагрузитьКартинку(Стр.file_id, Бот, ИмяФайла, УРЛ, КаталогФайлов, Расширение, Истина);
			//--- AK suvv
			НоваяКартинка.УРЛ = УРЛ;
			НоваяКартинка.ИмяФайла = ИмяФайла;			
		КонецЕсли; 	
	КонецЦикла; 
	
	НовыйОтзыв.ТекстОтзыва = ТекстОтзыва;
	
	НовыйОтзыв.Записать();
	
	Если Не Тест Тогда
		ГУИД = Строка(НовыйОтзыв.Ссылка.УникальныйИдентификатор());
		ТекстЗапроса =
		"UPDATE [Telegram].[dbo].[BOT_Complaints] SET [Doc_Ref] = '" + ГУИД + "'
		|WHERE [file_description] = '" + УИД + "'";
		База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса);
	КонецЕсли;
	
КонецПроцедуры

//
Процедура УстановитьСтатусНГ(Карта, Товар, Статус, Комментарий="") Экспорт
	
	ТекстЗапроса =
	"UPDATE [Loyalty].[dbo].[app_gourmet_offers]
	|SET [offer_status] = " + Строка(Статус) + ",
	|[comment] = '" + ЛЕВ(Комментарий, 500) + "'
	|WHERE number = '" + Карта + "' and id_tov = " + Формат(Товар, "ЧГ=") + " and offer_status = 1";
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса);
	
КонецПроцедуры

//
Функция ПолучитьКаталогКартинокМП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КаталогМП = СокрЛП(Константы.КаталогХраненияКартинокМПВВ.Получить());
	КаталогМП = КаталогМП + ?(Прав(КаталогМП, 1) = "\", "", "\");
	
	Возврат КаталогМП;
	
КонецФункции

//
Функция ЗагрузитьКартинку(ИД, Бот, ИмяФайла, ПолноеИмяФайла, Каталог="", Расш="", МП = Ложь)
	
	Результат = Неопределено;
	
	Если ИД = "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Бот = 1 Тогда
		Токен = "bot321974195:AAECpm0VZW1H4vYOmCKS2nYy9DIgOjLJU0M";
	ИначеЕсли Бот = 3 Тогда
		Токен = "bot377724905:AAEVeZMzqKRM2KcLFKsAJQPmDtQhBWJJGeY";
	ИначеЕсли Бот = 4 Тогда
		Токен = "bot360201566:AAHmliP1P_DxLUTlr4vC4k2XnnD40IoT_Tk";
	ИначеЕсли НЕ МП Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Если Каталог = "" Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "");
	Иначе
		КаталогСохранения = Каталог;
	КонецЕсли;
	
	Если МП Тогда
		
		// загрузка из МП
		КаталогМП = ПолучитьКаталогКартинокМП();
		ИмяФайла = ИД;		
		ПолноеИмяКартинки = КаталогМП + ИД;
		ФайлКартинки = Новый Файл(ПолноеИмяКартинки);
		Если НЕ ФайлКартинки.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;

		Попытка
			//+++ AK suvv 29.07.2018 ИП-00018768
			Файл = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка");				
			ИмяФайлаНаСервере =	ЗагрузитьФайлНаСервер(ПолноеИмяКартинки);
			Файл = АК_ИнструментыСервер.ОбновитьФайлВложение_Сервер(ПолноеИмяКартинки, ИмяФайлаНаСервере, Файл); 
			//--- AK suvv		
		Исключение
			Возврат Неопределено;
		КонецПопытки;		
		
	Иначе
		
		Ответ = ВыполнитьМетодPOST(Токен, CreateMethodGetFile(ИД));
		Если Ответ.Ok = "true" Тогда
			
			Путь = Ответ.result.file_path;
			Сервер = "https://api.telegram.org/file/" + Токен + "/" + Путь;
			Если Найти(Ответ.result.file_path, ".") > 0 Тогда
				Расш = Прав(Путь, СтрДлина(Путь) - Найти(Путь, ".")+1);
			Иначе
				расш = ".jpg";
			КонецЕсли;
			ИмяФайла = Формат(ИД, "ЧН=0; ЧГ=") +  Расш;
			ПолноеИмяФайла = КаталогСохранения + ИмяФайла;
			
			Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			Соединение.Open("GET", Сервер);
			Если Константы.ИспользоватьПрокси.Получить() Тогда	
				Соединение.SetProxy(2, Константы.АдресПрокси.Получить() + ":" + Константы.ПортПрокси.Получить());		
			КонецЕсли;	
			Соединение.Send();
			
			СтатусОтправки = Соединение.status;
			
			Если СтатусОтправки <> 200 Тогда
			    Возврат Результат;   
			КонецЕсли;        

			Стрим = Новый COMОбъект("ADODB.Stream");
			Стрим.Mode = 3;
			Стрим.Type = 1;
			Стрим.Open();
			Стрим.Write(Соединение.responseBody);

			Стрим.SaveToFile(ПолноеИмяФайла, 2);
			Стрим.Close();
			
		КонецЕсли;
		
		Попытка
			//+++ AK suvv 29.07.2018 ИП-00018768
			Файл = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка");
			FSO = Новый COMОбъект("Scripting.FileSystemObject");
			ФайлСуществует = FSO.FileExists(ПолноеИмяФайла);	
			Если ФайлСуществует Тогда
				ИмяФайлаНаСервере =	ЗагрузитьФайлНаСервер(ПолноеИмяФайла);
				Файл = АК_ИнструментыСервер.ОбновитьФайлВложение_Сервер(ПолноеИмяФайла, ИмяФайлаНаСервере, Файл); 	
			КонецЕсли;
			//--- AK suvv
		Исключение
			Возврат Неопределено;
		КонецПопытки;		
		
	КонецЕсли;
	
	//Попытка
	//	УдалитьФайлы(ПолноеИмяФайла);
	//Исключение
	//КонецПопытки;
	
	//+++ AK suvv 06.07.2018 ИП-00018768
	//Возврат ХР;
	Возврат Файл;
	//--- AK suvv
	
КонецФункции

//+++ AK suvv 29.07.2018 ИП-00018768
Функция ПолучитьРасширениеФайла(ИмяФайла) 
	
	Перем FSO;
	
	FSO = Новый COMОбъект("Scripting.FileSystemObject");
	Возврат FSO.GetExtensionName(ИмяФайла);  
	
КонецФункции //--- AK suvv

//+++ AK suvv 29.07.2018 ИП-00018768
Функция ЗагрузитьФайлНаСервер(ИмяФайла)
	
	Перем СтрокаBase64, РасширениеФайла, ИмяФайлаНаСервере;
	
	СтрокаBase64 = Base64Строка(Новый ДвоичныеДанные(ИмяФайла));
	РасширениеФайла = ПолучитьРасширениеФайла(ИмяФайла); 
	
	ИмяФайлаНаСервере = АК_ИнструментыСервер.СоздатьВременныйФайлНаСервере(СтрокаBase64, РасширениеФайла);
	
	Возврат ИмяФайлаНаСервере;
	
КонецФункции//---AK suvv

//
Функция ЗагрузитьКартинкуОбращение(ИД, Бот, ИмяФайла, ПолноеИмяФайла, Каталог="", Расш="", МП = Ложь)
	
	Результат = Неопределено;
	
	Если ИД = "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Бот = 1 Тогда
		Токен = "bot321974195:AAECpm0VZW1H4vYOmCKS2nYy9DIgOjLJU0M";
	ИначеЕсли Бот = 3 Тогда
		Токен = "bot377724905:AAEVeZMzqKRM2KcLFKsAJQPmDtQhBWJJGeY";
	ИначеЕсли Бот = 4 Тогда
		Токен = "bot360201566:AAHmliP1P_DxLUTlr4vC4k2XnnD40IoT_Tk";
	ИначеЕсли НЕ МП Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Если Каталог = "" Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "");
	Иначе
		КаталогСохранения = Каталог;
	КонецЕсли;
	
	Если МП Тогда
		
		// загрузка из МП
		КаталогМП = ПолучитьКаталогКартинокМП();
		ИмяФайла = ИД;		
		ПолноеИмяКартинки = КаталогМП + ИД;
		ФайлКартинки = Новый Файл(ПолноеИмяКартинки);
		ПолноеИмяФайла = КаталогСохранения + ИмяФайла + Расш;
		Если НЕ ФайлКартинки.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		КопироватьФайл(ПолноеИмяКартинки, ПолноеИмяФайла); 

	Иначе
		
		Ответ = ВыполнитьМетодPOST(Токен, CreateMethodGetFile(ИД));
		Если Ответ.Ok = "true" Тогда
			
			Путь = Ответ.result.file_path;
			Сервер = "https://api.telegram.org/file/" + Токен + "/" + Путь;
			Если Найти(Ответ.result.file_path, ".") > 0 Тогда
				Расш = Прав(Путь, СтрДлина(Путь) - Найти(Путь, ".")+1);
			Иначе
				расш = ".jpg";
			КонецЕсли;
			ИмяФайла = Формат(ИД, "ЧН=0; ЧГ=") +  Расш;
			ПолноеИмяФайла = КаталогСохранения + ИмяФайла;
			
			Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			Соединение.Open("GET", Сервер);
			Если Константы.ИспользоватьПрокси.Получить() Тогда	
				Соединение.SetProxy(2, Константы.АдресПрокси.Получить() + ":" + Константы.ПортПрокси.Получить());		
			КонецЕсли;	
			Соединение.Send();
			
			СтатусОтправки = Соединение.status;
			
			Если СтатусОтправки <> 200 Тогда
			    Возврат Результат;   
			КонецЕсли;        

			Стрим = Новый COMОбъект("ADODB.Stream");
			Стрим.Mode = 3;
			Стрим.Type = 1;
			Стрим.Open();
			Стрим.Write(Соединение.responseBody);

			Стрим.SaveToFile(ПолноеИмяФайла, 2);
			Стрим.Close();
			
		КонецЕсли;

	КонецЕсли;
	
	Попытка
		ХР = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ХР;

КонецФункции

//
&НаСервере
Процедура ЗагрузкаОценок(Тест = Ложь) Экспорт
	
	ТекстЗапроса =
	"SELECT TOP 100
	|id,CashID,CashCheckNo,id_tov,id_kontr,Reiting,date_add,date_ch
	|,date_proizv,a.number,insSource,comment,b.FullName,b.phone_card
	|FROM [Loyalty].[dbo].[BOT_Purchase_Tovar_Reiting] as a (nolock)
	|inner join [vv03].[dbo].[Cards] as b on a.number = b.number
	|WHERE NOT comment is NULL and [date_loaded_1C] is NULL
	|AND Reiting < 4 AND DATEDIFF(d, date_add, GETDATE()) <= 10
	|ORDER BY date_add desc";
	
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТЗО = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
	
	Для каждого Стр ИЗ ТЗО Цикл	
		//Создать обращение
		Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
		Запись.GUID_Загрузки = Новый УникальныйИдентификатор;
		Запись.ДатаДок = ТекущаяДата();
		Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.Telegram;	
		ТекстОбращения = "";
		Запись.Примечание		= Стр.comment;			
		Запись.ФИО_Покупателя	= Стр.FullName;
		Запись.Телефон			= Стр.phone_card;
		Запись.Номер_Карты_ОК	= Стр.number;	
		
		Запись.НомерКассы		= Стр.CashID;
		Если ЗначениеЗаполнено(Запись.НомерКассы) Тогда
			Запись.СтруктурнаяЕдиница = МагазинПоКассе(Запись.НомерКассы);
		КонецЕсли;
		Запись.Номер_Бланка		= Стр.CashCheckNo;
		
		check_date				= Стр.date_ch;
		Если ТипЗнч(check_date) = Тип("Дата") Тогда
			Запись.ДатаСобытия	= check_date;
		ИначеЕсли ТипЗнч(check_date) = Тип("Строка") и СтрДлина(check_date)=10 Тогда
			Попытка
				Запись.ДатаСобытия	= Дата(СтрЗаменить(check_date, "-", "") + "000000");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	
		
		Reiting					= Стр.Reiting;
		Запись.Оценка			= Reiting;
		Если Reiting = 0 Тогда
		ИначеЕсли Reiting < 4 Тогда
			Запись.ТипОбращения = Справочники.ТипыОбращенийПокупателей.НайтиПоНаименованию("19_Оценки в боте");
			Запись.ТипЖалобы	= Справочники.ТипыЖалоб.НайтиПоНаименованию("19_1 Оценки в боте");
		Иначе
			Запись.ТипОбращения = Справочники.ТипыОбращенийПокупателей.НайтиПоНаименованию("07 Благодарность за продукт");
			Запись.ТипЖалобы	= Справочники.ТипыЖалоб.НайтиПоНаименованию("07_1 Благодарность за продукт");				
		КонецЕсли;
		
		Запись.BOT_Purchase_Tovar_Reiting_ID = Стр.id;
		
		Если Стр.id_tov > 0 Тогда
			Запись.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Стр.id_tov);
		КонецЕсли;
		
		Если Стр.id_kontr > 0 Тогда
			Запись.Производитель = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", Стр.id_kontr);
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(Запись.Номенклатура) И ЗначениеЗаполнено(Запись.Производитель) Тогда
			Запись.Технолог			= РегистрыСведений.ОбращенияПокупателей.ПолучитьТехнолога(Запись.Номенклатура, Запись.Производитель, Запись.СтруктурнаяЕдиница, ТекущаяДата());
			Запись.ПродактМенеджер	= РегистрыСведений.ОбращенияПокупателей.ПолучитьПродактМенеджера(Запись.Номенклатура, Запись.Производитель);
		КонецЕсли;
		
		Запись.id_OK = РегистрыСведений.ОбращенияПокупателей.ПолучитьСледующийid_OK();
		
		Запись.Записать(Истина);
		
		Если Не Тест Тогда			
			ТекстЗапроса = 
			"UPDATE [Loyalty].[dbo].[BOT_Purchase_Tovar_Reiting]
			|SET [date_loaded_1C] = GETDATE()
			|WHERE id = " + Формат(Стр.id, "ЧГ=");
			Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
		КонецЕсли;		
				
	КонецЦикла;	
	
КонецПроцедуры

//
&НаСервере
Процедура ЗагрузкаОбращений() Экспорт
	ЗагрузкаОбращенийИзТелеграма(Ложь);
КонецПроцедуры

//
&НаСервере
Процедура ЗагрузкаОбращенийИзТелеграма(Оценки = Ложь, Тест = Ложь) Экспорт
	
	Если Оценки Тогда
		Возврат;
		ТекстЗапроса =
		"SELECT bc.[file_description] as ID ,max(isNULL(tr.Reiting, 0)) as Reiting,
		|max(isNULL(tr.id, 0)) as BOT_Purchase_Tovar_Reiting_ID,
		|max(isNULL(bc.CashID, 0)) as CashID, max(isNULL(bc.CashCheckNo, 0)) as CashCheckNo,
		|CASE WHEN max(bc.date_ch) is NULL THEN max(bc.add_date) ELSE max(bc.date_ch) END as check_date,
		|max(isNULL(bc.id_tov, 0)) as id_tov, max(isNULL(tr.id_kontr, 0)) as id_kontr, Doc_Ref
		|FROM [Telegram].[dbo].[BOT_Complaints] (nolock) as bc left JOIN [Loyalty].[dbo].[BOT_Purchase_Tovar_Reiting] (nolock) as tr
		|on bc.id_purch_tov_reiting = tr.id and bc.id_purch_tov_reiting<>0 and bc.id_tov = tr.id_tov and bc.CashID = tr.CashID
		|and bc.CashCheckNo = tr.CashCheckNo and NOT bc.id_tov is NULL and bc.CashID<>0 and bc.CashCheckNo<>0
		|WHERE message_type = 100 and DATEDIFF(d, add_date, GETDATE()) <= 3 and date_loaded_1C is NULL and worker_id = 1
		|GROUP by file_description, Doc_Ref";	
	ИначеЕсли Тест Тогда
		ТекстЗапроса =
		"SELECT bc.[file_description] as ID ,max(isNULL(tr.Reiting, 0)) as Reiting,
		|max(isNULL(tr.id, 0)) as BOT_Purchase_Tovar_Reiting_ID,
		|max(isNULL(bc.CashID, 0)) as CashID, max(isNULL(bc.CashCheckNo, 0)) as CashCheckNo,
		|CASE WHEN max(bc.date_ch) is NULL THEN max(bc.add_date) ELSE max(bc.date_ch) END as check_date,
		|max(isNULL(bc.id_tov, 0)) as id_tov, max(isNULL(tr.id_kontr, 0)) as id_kontr, Doc_Ref
		|FROM [Telegram].[dbo].[BOT_Complaints] (nolock) as bc left JOIN [Loyalty].[dbo].[BOT_Purchase_Tovar_Reiting] (nolock) as tr
		|on bc.id_purch_tov_reiting = tr.id and bc.id_purch_tov_reiting<>0 and bc.id_tov = tr.id_tov and bc.CashID = tr.CashID
		|and bc.CashCheckNo = tr.CashCheckNo and NOT bc.id_tov is NULL and bc.CashID<>0 and bc.CashCheckNo<>0
		|WHERE message_type = 100 and DATEDIFF(d, add_date, GETDATE()) <= 3
		|and not (worker_id is NULL OR worker_id = 1  OR worker_id = 0)
		|GROUP by file_description, Doc_Ref";			
	Иначе
		ТекстЗапроса =
		"SELECT bc.[file_description] as ID ,max(isNULL(tr.Reiting, 0)) as Reiting,
		|max(isNULL(tr.id, 0)) as BOT_Purchase_Tovar_Reiting_ID,
		|max(isNULL(bc.CashID, 0)) as CashID, max(isNULL(bc.CashCheckNo, 0)) as CashCheckNo,
		|CASE WHEN max(bc.date_ch) is NULL THEN max(bc.add_date) ELSE max(bc.date_ch) END as check_date,
		|max(isNULL(bc.id_tov, 0)) as id_tov, max(isNULL(tr.id_kontr, 0)) as id_kontr, Doc_Ref
		|FROM [Telegram].[dbo].[BOT_Complaints] (nolock) as bc left JOIN [Loyalty].[dbo].[BOT_Purchase_Tovar_Reiting] (nolock) as tr
		|on bc.id_purch_tov_reiting = tr.id and bc.id_purch_tov_reiting<>0 and bc.id_tov = tr.id_tov and bc.CashID = tr.CashID
		|and bc.CashCheckNo = tr.CashCheckNo and NOT bc.id_tov is NULL and bc.CashID<>0 and bc.CashCheckNo<>0
		|WHERE message_type = 100 and DATEDIFF(d, add_date, GETDATE()) <= 10
		|and bc.date_loaded_1C is NULL and not (worker_id is NULL OR worker_id = 1  OR worker_id = 0)
		|GROUP by file_description, Doc_Ref";	
	КонецЕсли; 	
	
	//"SELECT bc.[file_description] as ID ,max(isNULL(tr.Reiting, 0)) as Reiting,
	////+++АК SHEP 2017.12.05 ИП-00017251
	//|	max(isNULL(tr.id, 0)) as BOT_Purchase_Tovar_Reiting_ID,
	////---АК SHEP 2017.12.05
	//|max(isNULL(bc.CashID, 0)) as CashID, max(isNULL(bc.CashCheckNo, 0)) as CashCheckNo,
	//|CASE WHEN max(bc.date_ch) is NULL THEN max(bc.add_date) ELSE max(bc.date_ch) END as check_date,
	//|max(isNULL(bc.id_tov, 0)) as id_tov, max(isNULL(tr.id_kontr, 0)) as id_kontr, Doc_Ref
	//|FROM [Telegram].[dbo].[BOT_Complaints] as bc left JOIN [Loyalty].[dbo].[BOT_Purchase_Tovar_Reiting] as tr
	//
	////+++АК rakp@automacon.ru, 13.12.2017 22:37:04,  ИП-00017473 добавил доп связь
	////|on bc.user_id = tr.telegram_id and bc.id_tov = tr.id_tov and bc.CashID = tr.CashID and bc.CashCheckNo = tr.CashCheckNo and NOT bc.id_tov is NULL and bc.CashID<>0 and bc.CashCheckNo<>0
	//|on bc.id_purch_tov_reiting = tr.id and bc.id_purch_tov_reiting<>0 and bc.id_tov = tr.id_tov and bc.CashID = tr.CashID and bc.CashCheckNo = tr.CashCheckNo and NOT bc.id_tov is NULL and bc.CashID<>0 and bc.CashCheckNo<>0
	////---АК rakp@automacon.ru
	//|WHERE message_type = 100 and DATEDIFF(d, add_date, GETDATE()) <= 3
	//|GROUP by file_description, Doc_Ref";
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТЗО = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
	
	Для каждого Стр ИЗ ТЗО Цикл	
		ЗагрузитьОбращение(Стр.ID, Стр.Reiting, Стр.BOT_Purchase_Tovar_Reiting_ID, Стр.CashID, Стр.CashCheckNo, Стр.check_date, Стр.id_tov, Стр.id_kontr, Тест);
	КонецЦикла;
		
КонецПроцедуры

//
Функция МагазинПоКассе(ИДКассы) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО РабочиеМеста.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка
	|			И (РабочиеМеста.ИД = &ИД)
	|ГДЕ
	|	НЕ РабочиеМеста.ПометкаУдаления
	|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления");
	Запрос.УстановитьПараметр("ИД", ИДКассы);
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		Возврат РЗ.Ссылка;
	Иначе
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

//
Процедура ЗагрузитьОбращение(ID, Reiting=0, BOT_Purchase_Tovar_Reiting_ID=0, CashID=0, CashCheckNo=0, check_date=Неопределено, id_tov=0, id_kontr=0, Тест=Ложь) Экспорт
	
	Если check_date = Неопределено Тогда
		check_date = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбращенияПокупателей.id_OK
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	ОбращенияПокупателей.UIDTelegram = &UIDTelegram");
	Запрос.УстановитьПараметр("UIDTelegram", ID);
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() И НЕ Тест Тогда
		ТекстЗапроса =
		"UPDATE [Telegram].[dbo].[BOT_Complaints]
		|SET [date_loaded_1C] = GETDATE()
		|WHERE message_type = 100 and file_description = '" + ID + "'";
		Результат = База_ВыполнитьЗапрос(ТекстЗапроса);			
		Возврат;
	КонецЕсли;
			
	ТекстЗапроса =		
	"SELECT b.user_id, b.message_type, b.message_text, b.add_date, c.number, c.FullName, c.Phone 
	|FROM (
	|SELECT [user_id],[message_type],[message_text],[file_description],[add_date],[Doc_Ref], number  
	|FROM [Telegram].[dbo].[BOT_Complaints] (nolock) WHERE isNULL(inbox_outbox, 0) = 0 AND message_type < 100
	|) as b    
	|inner join (SELECT TOP 1 file_description, [Doc_Ref] ,[CashID] ,[CashCheckNo], CASE WHEN date_ch is NULL THEN add_date ELSE date_ch END as check_date 
	|FROM [Telegram].[dbo].[BOT_Complaints] (nolock) WHERE file_description = '" + ID + "' 
	|AND message_type = 100 ORDER BY add_date) as a on b.file_description = a.file_description or b.Doc_Ref = a.Doc_Ref and not a.Doc_Ref = ''
	|inner join 
	|(SELECT [FullName], number, [phone_card] as [Phone], telegram_id FROM [vv03].[dbo].[Cards] (nolock)) as c on b.number = c.number
	|ORDER BY add_date";
	
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	ТЗ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
	
	Если ТЗ.Количество() > 0 Тогда
		
		Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
		Запись.GUID_Загрузки = Новый УникальныйИдентификатор;
		Запись.ДатаДок = ТекущаяДата();
		Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.Telegram;	
		Запись.UIDTelegram = ID;
		ТекстОбращения = "";
		Для каждого СтрОбр Из ТЗ Цикл
			Если СтрОбр.message_type = 1 Тогда
				ТекстОбращения = ТекстОбращения + ?(ТекстОбращения = "", "", Символы.ПС) + СтрОбр.message_text;
			КонецЕсли;
		КонецЦикла; 
		
		Запись.Примечание		= ТекстОбращения;			
		Запись.ФИО_Покупателя	= ТЗ[0].FullName;
		Запись.Телефон			= ТЗ[0].Phone;
		Запись.Номер_Карты_ОК	= ТЗ[0].number;
		Запись.Оценка			= Reiting;
		
		Запись.НомерКассы = CashID;
		Если ЗначениеЗаполнено(Запись.НомерКассы) Тогда
			Запись.СтруктурнаяЕдиница = МагазинПоКассе(Запись.НомерКассы);
		КонецЕсли;
		Запись.Номер_Бланка = CashCheckNo;	
		Если ТипЗнч(check_date) = Тип("Дата") Тогда
			Запись.ДатаСобытия = check_date;
		КонецЕсли;
		
		Если Reiting = 0 Тогда
		ИначеЕсли Reiting < 4 Тогда
			Запись.ТипОбращения = Справочники.ТипыОбращенийПокупателей.НайтиПоНаименованию("19_Оценки в боте");
			Запись.ТипЖалобы	= Справочники.ТипыЖалоб.НайтиПоНаименованию("19_1 Оценки в боте");
		Иначе
			Запись.ТипОбращения = Справочники.ТипыОбращенийПокупателей.НайтиПоНаименованию("07 Благодарность за продукт");
			Запись.ТипЖалобы	= Справочники.ТипыЖалоб.НайтиПоНаименованию("07_1 Благодарность за продукт");				
		КонецЕсли;
		
		Запись.BOT_Purchase_Tovar_Reiting_ID = BOT_Purchase_Tovar_Reiting_ID; //+++АК SHEP 2017.12.05 ИП-00017251
		
		Если id_tov > 0 Тогда
			Запись.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", id_tov);
		КонецЕсли;
		
		Если id_kontr > 0 Тогда
			Запись.Производитель = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", id_kontr);
		КонецЕсли;			
		
		Запись.id_OK = РегистрыСведений.ОбращенияПокупателей.ПолучитьСледующийid_OK();
		
		//ЗагрузитьКартинкиИзТелеграма(Запись.id_OK, Запись.GUID_Загрузки, Запись.ДатаДок);			
		ЗагрузитьКартинкиИзТелеграма_НОВЫЙ(Запись);
		
		УстановитьПривилегированныйРежим(Истина);
		Запись.Записать(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если НЕ Тест Тогда
		ТекстЗапроса =
		"UPDATE [Telegram].[dbo].[BOT_Complaints]
		|SET [date_loaded_1C] = GETDATE()
		|WHERE message_type = 100 and file_description = '" + ID + "'";
		Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура ЗагрузитьКартинкиИзТелеграма_НОВЫЙ(Запись) Экспорт
	
	КаталогФайлов = РегистрыСведений.ОбращенияПокупателей.ПолучитьКаталогХраненияФайлов(ТекущаяДата());	
			
	ТекстЗапроса =
	"SELECT file_id, bot_id, message_type FROM [Telegram].[dbo].[BOT_Complaints] (nolock)
	|WHERE (message_type = 3 OR message_type = 5) AND inbox_outbox = 0
	|AND file_description = '" + Запись.UIDTelegram + "'";
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	ТЗ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
	Если ЗначениеЗаполнено(Запись.ПрикрепленныеФайлы) Тогда
		ТабДанные = ЗначениеИзСтрокиВнутр(Запись.ПрикрепленныеФайлы);
	Иначе
		ТабДанные = Новый ТаблицаЗначений;
		ТабДанные.Колонки.Добавить("ИмяФайла");
		ТабДанные.Колонки.Добавить("Идентификатор");
		ТабДанные.Колонки.Добавить("ДатаДобавления");
		ТабДанные.Колонки.Добавить("Расширение");
	КонецЕсли;
	
	Добавлено = Ложь;
	Для каждого Стр Из ТЗ Цикл
		Если НЕ ТабДанные.Найти(Стр.file_id, "Идентификатор") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Расширение = "";
		ДатаДобавления = ТекущаяДата();
		ЗагруженнаяКартинка = ЗагрузитьКартинкуОбращение(Стр.file_id, Стр.bot_id, "", "", КаталогФайлов, Расширение, Стр.message_type = 5);
		Если НЕ ЗагруженнаяКартинка = Неопределено Тогда
			Новая = ТабДанные.Добавить();
			Новая.ИмяФайла = Стр.file_id;
			Новая.Идентификатор = Стр.file_id;
			Новая.ДатаДобавления = ТекущаяДата();
			Новая.Расширение = Расширение;
			Добавлено = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если Добавлено Тогда	
		Запись.ПрикрепленныеФайлы = ЗначениеВСтрокуВнутр(ТабДанные);
	КонецЕсли;	
	
КонецПроцедуры

//
Процедура ЗагрузитьКартинкиИзТелеграма(id_OK, GUID_Загрузки, ДатаДок) Экспорт
	
	КаталогФайлов = РегистрыСведений.ОбращенияПокупателей.ПолучитьКаталогХраненияФайлов(ТекущаяДата());	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбращенияПокупателей.id_OK,
	|	ОбращенияПокупателей.GUID_Загрузки,
	|	ОбращенияПокупателей.ДатаДок,
	|	ОбращенияПокупателей.ПрикрепленныеФайлы,
	|	ОбращенияПокупателей.КоличествоПрикрепленныхФайлов,
	|	ОбращенияПокупателей.UIDTelegram
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	ОбращенияПокупателей.id_OK = &id_OK
	|	И ОбращенияПокупателей.GUID_Загрузки = &GUID_Загрузки");
	Запрос.УстановитьПараметр("id_OK", id_OK);
	Запрос.УстановитьПараметр("GUID_Загрузки", GUID_Загрузки);
	
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		
		ТекстЗапроса =
		"SELECT file_id, bot_id, message_type FROM [Telegram].[dbo].[BOT_Complaints] (nolock)
		|WHERE (message_type = 3 OR message_type = 5) AND inbox_outbox = 0
		|AND file_description = '" + РЗ.UIDTelegram + "'";
		Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
		ТЗ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
		Если ЗначениеЗаполнено(РЗ.ПрикрепленныеФайлы) Тогда
			ТабДанные = ЗначениеИзСтрокиВнутр(РЗ.ПрикрепленныеФайлы);
		Иначе
			ТабДанные = Новый ТаблицаЗначений;
			ТабДанные.Колонки.Добавить("ИмяФайла");
			ТабДанные.Колонки.Добавить("Идентификатор");
			ТабДанные.Колонки.Добавить("ДатаДобавления");
			ТабДанные.Колонки.Добавить("Расширение");
		КонецЕсли;
		
		Добавлено = Ложь;
		Для каждого Стр Из ТЗ Цикл
			Если НЕ ТабДанные.Найти(Стр.file_id, "Идентификатор") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Расширение = "";
			ДатаДобавления = ТекущаяДата();
			ЗагруженнаяКартинка = ЗагрузитьКартинкуОбращение(Стр.file_id, Стр.bot_id, "", "", КаталогФайлов, Расширение, Стр.message_type = 5);
			Если НЕ ЗагруженнаяКартинка = Неопределено Тогда
				Новая = ТабДанные.Добавить();
				Новая.ИмяФайла = Стр.file_id;
				Новая.Идентификатор = Стр.file_id;
				Новая.ДатаДобавления = ТекущаяДата();
				Новая.Расширение = Расширение;
				Добавлено = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		Если Добавлено Тогда	
			МЗ					= РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
			МЗ.id_OK			= id_OK;
			МЗ.GUID_Загрузки	= GUID_Загрузки;
			МЗ.ДатаДок			= ДатаДок;
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				МЗ.ПрикрепленныеФайлы = ЗначениеВСтрокуВнутр(ТабДанные);
				МЗ.Записать(Истина);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

//
Функция ЕстьРольОбработкаЗвонков() Экспорт
	
	РольОбработкиЗвонков = Справочники.РолиПользователей.НайтиПоНаименованию("Обработка звонков");
	Если Не ЗначениеЗаполнено(РольОбработкиЗвонков) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивРолей = Справочники.РолиПользователей.ПолучитьРолиПользователя(ПараметрыСеанса.ТекущийПользователь);
	Возврат НЕ (МассивРолей.Найти(РольОбработкиЗвонков) = Неопределено);
	
КонецФункции

//
Функция ЕстьНеобработанныеЗвонки() Экспорт
	
	ТекстЗапроса = 
	"SELECT [id] FROM [Loyalty].[dbo].[CashRequest_CallBack]
	|WHERE Request_Status = 0 AND Date_time > DATEADD(day, -3, GETDATE())
	|ORDER BY Date_time desc";
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса,
	ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty"));	
	ТЗ = База_РезультатЗапросВТаблицуЗначений(Результат);
	
	Возврат ТЗ.Количество() > 0;
	
	
КонецФункции


//+++ АК LUZA 2017.10.25 ИП-00016964
Функция ЕстьРольОператорСклада() Экспорт
	//
	Возврат ПолныеПрава.ПолучитьДоступностьРоли("ОператорСклада");	
	
КонецФункции
//--- АК LUZA 2017.10.25 ИП-00016964


//+++ АК LUZA 2017.10.25 ИП-00016964
Функция ЕстьОповещенияПоСкладу() Экспорт	
	//
	ТЗ = Обработки.АК_ИнформацияОРаспознаванииДокументовСклад.ПолучитьТаблицуПриходныхОрдеров(ПараметрыСеанса.ТекущийПользователь);
		
	Если ТЗ.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции
//--- АК LUZA 2017.10.25 ИП-00016964
