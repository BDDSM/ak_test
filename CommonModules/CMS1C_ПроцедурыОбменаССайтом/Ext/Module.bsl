
//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ ПО ПЛАНУ ОБМЕНА


//Функция ПолучитьМассивУзловДляРегистрации(РегистрацияДляТоваров = Истина) Экспорт
//	
//	МассивУзлов = Новый Массив();
//	
//	Если РегистрацияДляТоваров Тогда 
//		
//		Для Каждого Элемент Из ПараметрыСеанса.ВсеУзлыДляОбменаССайтомТоварами Цикл
//			МассивУзлов.Добавить(Элемент);
//		КонецЦикла;
//		
//	Иначе
//		
//		Для Каждого Элемент Из ПараметрыСеанса.ВсеУзлыДляОбменаССайтомЗаказами Цикл
//			МассивУзлов.Добавить(Элемент);
//		КонецЦикла;	
//		
//	КонецЕсли;
//	
//	Возврат МассивУзлов;
//	
//КонецФункции

//Процедура ЗарегистрироватьИзменения(Объект)
//	
//	Если Не ПараметрыСеанса.НаличиеОбменаССайтом Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТипОбъекта = ТипЗнч(Объект);
//	
//	// Номенклатура и картинки
//	Если ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов") Тогда
//		
//		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
//		Для каждого Запись Из Объект Цикл
//			
//			ТипДанных = ТипЗнч(Запись.Объект);
//			
//			Если ТипДанных = Тип("СправочникСсылка.Номенклатура") Тогда
//				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Объект);
//			ИначеЕсли ТипДанных = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
//				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Объект.Владелец);
//			КонецЕсли;	
//			
//		КонецЦикла;
//		
//	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах")
//		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда 
//		
//		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);  
//		Для каждого Запись Из Объект Цикл
//			
//			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Номенклатура);
//			
//		КонецЦикла;
//		
//	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ШтрихКоды") Тогда
//		
//		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
//		Для каждого Запись Из Объект Цикл
//			
//			Если ТипЗнч(Запись.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
//				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Владелец);
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации") Тогда		
//		
//		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
//		
//		Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Номенклатура")
//			И Объект.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение Тогда	
//			
//			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Объект);   
//			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
//			
//		КонецЕсли;	
//		
//	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры")
//		ИЛИ ТипОбъекта = Тип("СправочникОбъект.ЕдиницыИзмерения") Тогда			
//		
//		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда 
//			
//			МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);	  
//			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Владелец);
//			
//		КонецЕсли;
//		
//		// Заказы   
//		
//	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
//		
//		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Ложь);
//		Для каждого Запись Из Объект Цикл
//			
//			Если ЗначениеЗаполнено(Запись.ЗаказПокупателя) Тогда
//				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.ЗаказПокупателя);
//			КонецЕсли;	
//			
//		КонецЦикла;
//		
//	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСКонтрагентами") Тогда
//		
//		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Ложь);
//		Для каждого Запись Из Объект Цикл
//			
//			Если ТипЗнч(Запись.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
//				И ЗначениеЗаполнено(Запись.Сделка) Тогда
//				
//				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Сделка);
//				
//			КонецЕсли;	
//			
//		КонецЦикла;
//		
//	КонецЕсли;		
//	
//КонецПроцедуры	


Процедура ВыполнитьАвтообмен(Настройка, ФлагАвтообмена = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	ОбработкаОбмена = Обработки.ОбменССайтом.Создать();	
	ОбработкаОбмена.НастройкаСсылка = Настройка;
	//ОбработкаОбмена.Автообмен = ФлагАвтообмена;
	ОбработкаОбмена.ВыгрузитьДанные();	
	
КонецПроцедуры	


//Процедура ПриЗаписиСправочникаОбменССайтомПриЗаписи(Источник, Отказ) Экспорт
//	
//	//ЗарегистрироватьИзменения(Источник);
//	ЗарегистрироватьИзменения(Источник);
//КонецПроцедуры
//
//
//Процедура ПриЗаписиРегистраСведенийОбменССайтомПриЗаписи(Источник, Отказ, Замещение) Экспорт
//	
//	//ЗарегистрироватьИзменения(Источник);
//	ЗарегистрироватьИзменения(Источник);
//	
//КонецПроцедуры






// сервисные функции для работы обмена

Функция РазобратьАдресСайта(Знач АдресСайта) Экспорт
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	HTTPСервер		 = ""; 
	HTTPПорт		 = 0;
	HTTPАдресСкрипта = "";
	
	Если ЗначениеЗаполнено(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		АдресСайта = СтрЗаменить(АдресСайта, "http://", "");
		ПозицияСлэша = Найти(АдресСайта, "/");
		Если ПозицияСлэша > 0 Тогда
			HTTPСервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);	
			HTTPАдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			HTTPСервер 		 = АдресСайта;	
			HTTPАдресСкрипта = "";
		КонецЕсли;	
		ПозицияДвоеточия = Найти(HTTPСервер, ":");
		Если ПозицияДвоеточия > 0 Тогда
			HTTPСерверСПортом = HTTPСервер;
			HTTPСервер		  = Лев(HTTPСерверСПортом, ПозицияДвоеточия - 1);
			HTTPПортСтрока 	  = Прав(HTTPСерверСПортом, СтрДлина(HTTPСерверСПортом) - ПозицияДвоеточия);
		Иначе
			HTTPПортСтрока = "0";
		КонецЕсли;
		
		HTTPПорт = ОбщегоНазначения.ПривестиСтрокуКЧислу(HTTPПортСтрока);
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("HTTPСервер"	  , HTTPСервер); 
	СтруктураРезультата.Вставить("HTTPПорт"		  , HTTPПорт);
	СтруктураРезультата.Вставить("HTTPАдресСкрипта", HTTPАдресСкрипта);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ВыполнитьТестовоеПодключениеКСерверуHTTP(Объект, СтрокаСообщенияПользователю, 
	РезультатСоединения = Неопределено, ТипСоединения = "catalog") Экспорт
	
	СтруктураПараметровСайта = ПолучитьСтруктуруПараметровДляСоединения(Объект, Объект.HTTPОбменАдресСайта);
	
	ОБработка = Обработки.CMS1C_ОбработкаОбмена.Создать();
	ЗаполнитьЗначенияСвойств(Обработка,Объект);
	
	Соединение = ОБработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	//Соединение = ПроцедурыОбменаССайтом.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Возврат "Ошибка при установке соединения с сайтом.";
	КонецЕсли;
	
	ОтветСервера = "";
	РезультатСоединения = HTTPВыполнитьАвторизациюДляСоединения(Соединение, СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения);
	
	Если Не РезультатСоединения Тогда
		Возврат "Соединение с сайтом не установлено.";
	Иначе
		Возврат "Соединение выполнено успешно.";
	КонецЕсли;
	
КонецФункции


Функция ПолучитьСтруктуруПараметровДляСоединения(Объект, Знач НачалоАдресаСкрипта = "") Экспорт
	
	СтруктураПараметровСайта = Новый Структура;
	СтруктураПараметровСайта.Вставить("ИмяПользователя", Объект.HTTPОбменИмяПользователя);
	СтруктураПараметровСайта.Вставить("Пароль"		   , Объект.HTTPОбменПароль);
	
	Если Не ПустаяСтрока(НачалоАдресаСкрипта) Тогда
		
		СтруктураАдреса = РазобратьАдресСайта(НачалоАдресаСкрипта);
		
		HTTPОбменПорт = СтруктураАдреса.HTTPПорт;
		HTTPОбменСервер = СтруктураАдреса.HTTPСервер;
		НачалоАдресаСкрипта = СтруктураАдреса.HTTPАдресСкрипта;
		
		СтруктураПараметровСайта.Вставить("АдресСкрипта", НачалоАдресаСкрипта);
		СтруктураПараметровСайта.Вставить("Сервер"		, HTTPОбменСервер);
		СтруктураПараметровСайта.Вставить("Порт"		, HTTPОбменПорт);
		
	Иначе
		
		СтруктураПараметровСайта.Вставить("АдресСкрипта", Объект.HTTPОбменАдресСкрипта);
		СтруктураПараметровСайта.Вставить("Сервер"		, Объект.HTTPОбменСервер);
		СтруктураПараметровСайта.Вставить("Порт"		, Объект.HTTPОбменПорт);
		
	КонецЕсли;
	
	СтруктураПараметровСайта.Вставить("ПроксиСервер"		 , Объект.HTTPОбменПроксиСервер);
	СтруктураПараметровСайта.Вставить("ПроксиПорт"		     , Объект.HTTPОбменПроксиПорт);
	СтруктураПараметровСайта.Вставить("ПроксиИмяПользователя", Объект.HTTPОбменПроксиИмяПользователя);
	СтруктураПараметровСайта.Вставить("ПроксиПароль"		 , Объект.HTTPОбменПроксиПароль);
	СтруктураПараметровСайта.Вставить("ПроксиИспользование"  , Объект.HTTPОбменПроксиИспользование);	
	СтруктураПараметровСайта.Вставить("ПрямаяСвязьСMySQL"  , Объект.ПрямаяСвязьСMySQL);	
	СтруктураПараметровСайта.Вставить("ПортMySQL"  , Объект.ПортMySQL);	
	СтруктураПараметровСайта.Вставить("СерверMySQL"  , Объект.СерверMySQL);	
	СтруктураПараметровСайта.Вставить("КодировкаMySQL"  , Объект.КодировкаMySQL);	
	СтруктураПараметровСайта.Вставить("ЗащищенноеСоединение",Ложь);
	
	Возврат СтруктураПараметровСайта;
	
КонецФункции


Функция HTTPПолучитьДанныеССервера(Соединение, ПараметрыЗапроса="", Заголовки="", СтрокаСообщенияПользователю = "") Экспорт
	
	ОтветСервера   = Неопределено; 
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		СтрокаСообщенияПользователю = "Не удалось получить данные с сервера.Проверьте правильность адреса сервера, порт, имя пользователя и пароль,"
		+ Символы.ПС + "а также настройки подключения к Интернет.";
	КонецПопытки;	
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();	
		Иначе
			СтрокаСообщенияПользователю = "Получение данных с сервера: Получен пустой ответ сервера."; 	
		КонецЕсли;	
		
	Иначе	
		СтрокаСообщенияПользователю = "Получение данных с сервера: Ответ сервера не получен."; 
	КонецЕсли;	
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция HTTPВыполнитьАвторизациюДляСоединения(Соединение, СтруктураПараметровСайта, 
	ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения = "catalog") Экспорт
	
	Успешно    = Истина;
	//#Если Клиент Тогда
	//Состояние("Установка соединения с сервером...");
	//#КонецЕсли
	
	//Соединение = ПроцедурыОбменаССайтом.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		СтрокаСообщенияПользователю = "Не удалось установить соединение с сервером.";
		Возврат Ложь;
	КонецЕсли;
	
	//#Если Клиент Тогда
	//Состояние("Проверка имени пользователя и пароля...");
	//#КонецЕсли
	
	ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, СтруктураПараметровСайта.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth");
	
	Если ОтветСервера = Неопределено Тогда 
		СтрокаСообщенияПользователю = "Не удалось установить соединение с сервером. Авторизация пользователя не выполнена." + Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецЕсли;
	
	Если НРег(СтрПолучитьСтроку(ОтветСервера,1)) <> "success" Тогда
		СтрокаСообщенияПользователю = "Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль." + Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция HTTPУстановитьСоединение(СтруктураПараметровСайта) Экспорт
	
	Соединение = НеОпределено;
	
	ИнтернетПрокси = НеОпределено;
	
	Если СтруктураПараметровСайта.ПроксиИспользование Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Пользователь = СтруктураПараметровСайта.ПроксиИмяПользователя;
		ИнтернетПрокси.Пароль		= СтруктураПараметровСайта.ПроксиПароль;
		
		Если СтруктураПараметровСайта.ПроксиПорт = 0 Тогда
			ИнтернетПрокси.Установить("HTTP", СтруктураПараметровСайта.ПроксиСервер);
		Иначе	
			ИнтернетПрокси.Установить("HTTP", СтруктураПараметровСайта.ПроксиСервер, СтруктураПараметровСайта.ПроксиПорт);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Порт = ?(ЗначениеЗаполнено(СтруктураПараметровСайта.Порт), СтруктураПараметровСайта.Порт, 80);
	Попытка
		
		Соединение = Новый HTTPСоединение(СтруктураПараметровСайта.Сервер, Порт, СтруктураПараметровСайта.ИмяПользователя, СтруктураПараметровСайта.Пароль, ИнтернетПрокси);
		
	Исключение
		
		Сообщить("Не удалось установить соединение с сервером " + СтруктураПараметровСайта.Сервер + ":" + Строка(СтруктураПараметровСайта.Порт) + ".
		|Проверьте правильность адреса сервера, порт, имя пользователя и пароль.");
		
		Соединение = Неопределено;
		
	Конецпопытки;	
	
	Возврат Соединение;
	
КонецФункции




Процедура ЗаполнитьОтборПостроителя(ПостроительОбъект) Экспорт
	
	ОтборКоличество = ПостроительОбъект.Отбор.Количество();
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительОбъект.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;	
	
	ПостроительОбъект.Отбор.Добавить("Номенклатура", , "Номенклатура");
	
	//ПостроительОбъект.Отбор.Добавить("ТипЦен", , "Тип цен");
	//ПостроительОбъект.ДоступныеПоля.ТипЦен.Представление = "Тип цен";
	ПостроительОбъект.Отбор.Добавить("Склад", , "Склады");
	ПостроительОбъект.ДоступныеПоля.Склад.Представление = "Склады";
	//ПостроительОбъект.Отбор.Добавить("Остаток", , "Остаток");
	ПостроительОбъект.ДоступныеПоля.Остаток.Представление = "Остаток";
	
КонецПроцедуры

Функция ПолучитьЗаказыСОплатойИОтгрузкойПоКатегориям(МассивИзменений, МассивЗагруженныхДокументов) Экспорт
	
	Запрос = Новый Запрос();
	КоличествоЗаказовОграничения = МассивИзменений.Количество();
	
	СтрокаОграниченияПоЗаказам = ?(КоличествоЗаказовОграничения = 0, "", ", ЗаказПокупателя В (&МассивДокументовСсылок) ");	
	СтрокаОграниченияПоРасчетам = ?(КоличествоЗаказовОграничения = 0, "", ", Сделка В (&МассивДокументовСсылок) ");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|		Заказ.Ссылка КАК ДокументСсылка,
	|		ВЫБОР
	|			КОГДА ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток <= 0
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ КАК Отгружен,
	|		ВЫБОР
	|			КОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <= 0
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ КАК Оплачен,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ЗаказыПокупателей.Регистратор.Дата) ЕСТЬ NULL 
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИНАЧЕ МАКСИМУМ(ЗаказыПокупателей.Регистратор.Дата)
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ЗаказыПокупателей.Регистратор.Номер) ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ МАКСИМУМ(ЗаказыПокупателей.Регистратор.Номер)
	|		КОНЕЦ КАК НомерОтгрузки,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(РасчетыСКонтрагентами.Регистратор.Дата) ЕСТЬ NULL 
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИНАЧЕ МАКСИМУМ(РасчетыСКонтрагентами.Регистратор.Дата)
	|		КОНЕЦ КАК ДатаОплаты,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(РасчетыСКонтрагентами.Регистратор.Номер) ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ МАКСИМУМ(РасчетыСКонтрагентами.Регистратор.Номер)
	|		КОНЕЦ КАК НомерОплаты
	|	ИЗ
	|	
	|		Документ.ЗаказПокупателя КАК Заказ
	|		Внутреннее СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|		  ПО  КатегорииОбъектов.Объект = Заказ.Ссылка
	|		  И КатегорииОбъектов.Категория = Значение(Справочник.КатегорииОбъектов.ЗаказСWEBСайта)
	|		  
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(" + СтрокаОграниченияПоЗаказам + ") КАК ЗаказыПокупателейОстатки
	|			ПО Заказ.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(" + СтрокаОграниченияПоРасчетам + ") КАК РасчетыСКонтрагентамиОстатки
	|			ПО Заказ.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|			ПО Заказ.Ссылка = ЗаказыПокупателей.ЗаказПокупателя
	|			И (ЗаказыПокупателей.ВидДвижения = Значение(ВидДвиженияНакопления.расход))
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|			ПО Заказ.Ссылка = РасчетыСКонтрагентами.Сделка
	|			И (РасчетыСКонтрагентами.ВидДвижения = Значение(ВидДвиженияНакопления.расход))
	|";
	
	Если КоличествоЗаказовОграничения > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивДокументовСсылок", МассивИзменений);
		Запрос.Текст = Запрос.Текст + " ГДЕ Заказ.Ссылка В (&МассивДокументовСсылок)";
		
		
	ИначеЕсли МассивЗагруженныхДокументов.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивДокументовСсылокНеВыгружать", МассивЗагруженныхДокументов);
		Запрос.Текст = Запрос.Текст + " ГДЕ НЕ (Заказ.Ссылка В (&МассивДокументовСсылокНеВыгружать))";
		
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст
	+ "
	|СГРУППИРОВАТЬ ПО
	|Заказ.Ссылка,
	|ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток,
	|РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток";
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции

//ОБМЕН ЗАКАЗАМИ
Процедура ВыполнитьЗагрузкуЗаказов() Экспорт
	
	Выборка = Справочники.CMS1C_НастройкиСайтов.Выбрать();	
	Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Ссылка,Выборка.Наименование); 
	КонецЦикла; 
	Ссылка = Список.ВыбратьЭлемент("Выберите сайт для получения заказов..."); 
	Если Ссылка=Неопределено Тогда	 
		возврат   	 
	КонецЕсли; 
	
	//Если НЕ ЗначениеЗаполнено(Ссылка.Значение.СтатусЗаказаНовый) Тогда	 
	Если НЕ Ссылка.Значение.СтатусыДляЗагрузки.Количество() Тогда	 
		Сообщить("В настройке не заданы статусы загружаемых заказов");
		Ссылка.Значение.ПолучитьФорму().Открыть();
		возврат;
	КонецЕсли;
	
	НастройкаСайта =  Ссылка.Значение.ПолучитьОбъект();
	НастройкаСайта.ЗагрузитьЗаказы(Истина); 
	
КонецПроцедуры

Процедура ОтправкаСтатусаСайтаПриЗаписи(Источник, Отказ) Экспорт
	//Найдем записи регистра изменения статусов
	//Если Источник.НастройкаСайта.Пустая() Тогда
	//возврат;
	//КонецЕсли;
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Период,
	//|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.ТекстСообщения,
	//|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Статус
	//|ИЗ
	//|	РегистрСведений.CMS1C_ИзмененияСтатусовЗаказов.СрезПоследних(
	//|			,
	//|			Заказ = &Заказ
	//|				И (НЕ Отправлен)) КАК CMS1C_ИзмененияСтатусовЗаказовСрезПоследних
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Период УБЫВ";
	//
	//Запрос.УстановитьПараметр("Заказ",Источник.Ссылка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	//	
	////#Если Клиент Тогда
	//	Ответ= Вопрос("Выполнить отправку изменения статуса заказа на сайт?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Есть неотправленные на сайт статусы...");
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//	НастройкаСайта = Источник.НастройкаСайта.ПолучитьОбъект();   	 
	//	НастройкаСайта.УстановитьСтатусЗаказаНаСайте(Выборка.Статус,Источник.Ссылка,Выборка.ТекстСообщения);
	//	КонецЕсли;
	////#КонецЕсли	 
	//Иначе 
	//возврат;
	//КонецЕсли;
	//
	//ЗаписьИзменения = РегистрыСведений.CMS1C_ИзмененияСтатусовЗаказов.СоздатьМенеджерЗаписи();
	//ЗаписьИзменения.Заказ = Источник.Ссылка;
	//ЗаписьИзменения.Статус = Выборка.Статус;
	//ЗаписьИзменения.ТекстСообщения = Выборка.ТекстСообщения;
	//ЗаписьИзменения.Период = Выборка.Период;
	//ЗаписьИзменения.Отправлен = Ложь;
	//ЗаписьИзменения.Удалить(); //удаляем первоначальную запись
	//
	//ЗаписьИзменения = РегистрыСведений.CMS1C_ИзмененияСтатусовЗаказов.СоздатьМенеджерЗаписи();
	//ЗаписьИзменения.Заказ = Источник.Ссылка;
	//ЗаписьИзменения.Статус = Выборка.Статус;
	//ЗаписьИзменения.ТекстСообщения = Выборка.ТекстСообщения;
	//ЗаписьИзменения.Период = ТекущаяДата();
	//ЗаписьИзменения.Отправлен = Истина;
	//ЗаписьИзменения.Записать(Истина); //ставим на текущее время
	//	 
КонецПроцедуры

Процедура УстановитьОтветственныхИАдрес(Об,СтавитьГрузополучателяЕслиЕстьТовар=Ложь,УстанавливатьАдрес = Истина) Экспорт
	
	Если (Не СтавитьГрузополучателяЕслиЕстьТовар) ИЛИ (Об.Товары.Количество()>0) Тогда
		Если ТипЗнч(Об)=Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			Грузополучатель= Справочники.Контрагенты.НайтиПоНаименованию(Об.Организация);
			Грузоотправитель = Об.Контрагент;
		Иначе
			Грузополучатель = Об.Контрагент;
			Грузоотправитель =Справочники.Контрагенты.НайтиПоНаименованию(Об.Организация);
		КонецЕсли;
		
		Если НЕ  ЗначениеЗаполнено(Об.Грузополучатель) Тогда
			Об.Грузополучатель = Грузополучатель;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Об.Грузоотправитель) Тогда
			Об.Грузоотправитель = Грузоотправитель;
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	Если УстанавливатьАдрес Тогда
		Если Не ЗначениеЗаполнено(Об.АдресДоставки) Тогда
			З = Новый Запрос();
			з.Текст = "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента)
			|			ТОГДА 1
			|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
			|			ТОГДА 2
			|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
			|			ТОГДА 3
			|		ИНАЧЕ 5
			|	КОНЕЦ КАК ПорядокСортировки,
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Контрагент
			|	И КонтактнаяИнформация.Тип = &Адрес
			|	И ВЫБОР
			|			КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента)
			|				ТОГДА ИСТИНА
			|			КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
			|				ТОГДА ИСТИНА
			|			КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядокСортировки";
			
			з.УстановитьПараметр("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
			з.УстановитьПараметр("Контрагент",Об.Контрагент);
			Выб = з.Выполнить().Выбрать();
			Если Выб.Следующий() Тогда
				Об.АдресДоставки = Выб.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаданиеОбменССайтом(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.CMS1C_НастройкиОбменаССайтом.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНастройки = НастройкаОбмена.ПолучитьОбъект();
	Если НЕ ОбъектНастройки.ТолькоЗагружатьЗаказы Тогда
		ОбъектНастройки.ВыполнитьАвтообмен();
	КонецЕсли;
	
	Обработка = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(НастройкаОбмена.Владелец);
	Обработка.НастройкаСайта = НастройкаОбмена.Владелец;
	Обработка.ЗагрузитьЗаказы(Ложь);
	//ОбъектНастройки.ЗагрузитьЗаказы(Ложь);
КонецПроцедуры






////Транслитерация

Функция Транслитерация(РусскоеСлово,МаксимальныйРазмерСтрокиБезРасширения=122,ЭтоКартинка = Истина) Экспорт//Везде максимальный 122, а в категории 25
	КС = ПолучитьКомбинации();      
	Транслит   = "";
	Для Инд = 1 По СтрДлина(РусскоеСлово) Цикл 
		Если СокрЛП(Сред(РусскоеСлово,Инд,1))="" или КодСимвола(Сред(РусскоеСлово,Инд,1))=32 Тогда
			Транслит = Транслит + "_";
			продолжить;
		КонецЕсли;
		Транслит = Транслит +?(КС.Получить(Врег(Сред(РусскоеСлово,Инд,1))) = Неопределено,"_",Нрег(КС[Врег(Сред(РусскоеСлово,Инд,1))]));
	КонецЦикла;
	
	
	Транслит = СокрЛП(Транслит);
	НадоУдалятьСпецСимволы = Истина;
	Если НадоУдалятьСпецСимволы Тогда
		Пока Найти(Транслит,"  ")<> 0 Цикл
			Транслит = СтрЗаменить(Транслит,"  "," ");
		КонецЦикла;
		
		Пока Найти(Транслит,"__")<> 0 Цикл
			Транслит = СтрЗаменить(Транслит,"__","_");
		КонецЦикла;
		Транслит = СтрЗаменить(Транслит," ","-");
	Конецесли;
	
	ЗапрещенныеСимволы = "!№;%:?*()";
	Для Инд = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		ТекСимвол = Сред(ЗапрещенныеСимволы,Инд,1);
		Транслит = СтрЗаменить(Транслит,ТекСимвол,"");
	КонецЦикла;
	Транслит = СтрЗаменить(Транслит,"""","");
	
	
	
	
	
	Если ЭтоКартинка Тогда
		файл = Новый Файл(Транслит);
		
		ИмяБезРасширения = файл.ИмяБезРасширения;
		ИмяБезРасширения = стрЗаменить(ИмяБезРасширения,".","");
		ДлиннаИмени = СтрДлина(ИмяБезРасширения);
		
		Если ДлиннаИмени>МаксимальныйРазмерСтрокиБезРасширения тогда
			Транслит = Лев(ИмяБезРасширения,МаксимальныйРазмерСтрокиБезРасширения)+"."+файл.Расширение;
		Иначе
			Транслит  = ИмяБезРасширения+Файл.Расширение;
		КонецЕсли;
	Иначе
		Транслит = СтрЗаменить(Транслит,".","");
	КонецЕсли;
	
	Возврат Транслит;
КонецФункции    

Функция ПолучитьКомбинации()
	КС  = Новый Соответствие;
	КС.Вставить("А", "A");
	КС.Вставить("Б", "B");
	КС.Вставить("В", "V");
	КС.Вставить("Г", "G");
	КС.Вставить("Д", "D");
	КС.Вставить("Е", "E");
	КС.Вставить("Ё", "E");
	КС.Вставить("Ж", "ZH");
	КС.Вставить("З", "Z");
	КС.Вставить("И", "I");
	КС.Вставить("Й", "Y");
	КС.Вставить("К", "K");
	КС.Вставить("Л", "L");
	КС.Вставить("М", "M");
	КС.Вставить("Н", "N");
	КС.Вставить("О", "O");
	КС.Вставить("П", "P");
	КС.Вставить("Р", "R");
	КС.Вставить("С", "S");
	КС.Вставить("Т", "T");
	КС.Вставить("У", "U");
	КС.Вставить("Ф", "F");
	КС.Вставить("Х", "KH");
	КС.Вставить("Ц", "C");
	КС.Вставить("Ч", "CH");
	КС.Вставить("Ш", "SH");
	КС.Вставить("Щ", "SHCH");
	КС.Вставить("Ъ", "");
	КС.Вставить("Ы", "Y");
	КС.Вставить("Ь", "");
	КС.Вставить("Э", "E");
	КС.Вставить("Ю", "YU");
	КС.Вставить("Я", "YA");
	КС.Вставить("1", "1");
	КС.Вставить("2", "2");
	КС.Вставить("3", "3");
	КС.Вставить("4", "4");
	КС.Вставить("5", "5");
	КС.Вставить("6", "6");
	КС.Вставить("7", "7");
	КС.Вставить("8", "8");
	КС.Вставить("9", "9");
	КС.Вставить("0", "0");
	КС.Вставить("_", "_");
	КС.Вставить(".", ".");
	КС.Вставить(".", ".");
	КС.Вставить("A", "A");
	КС.Вставить("B", "B");
	КС.Вставить("C", "C");
	КС.Вставить("D", "D");
	КС.Вставить("E", "E");
	КС.Вставить("F", "F");
	КС.Вставить("G", "G");
	КС.Вставить("H", "H");
	КС.Вставить("I", "I");
	КС.Вставить("J", "J");
	КС.Вставить("K", "K");
	КС.Вставить("L", "L");
	КС.Вставить("M", "M");
	КС.Вставить("N", "N");
	КС.Вставить("O", "O");
	КС.Вставить("P", "P");
	КС.Вставить("Q", "Q");
	КС.Вставить("R", "R");
	КС.Вставить("S", "S");
	КС.Вставить("T", "T");
	КС.Вставить("U", "U");
	КС.Вставить("V", "V");
	КС.Вставить("W", "W");
	КС.Вставить("X", "X");
	КС.Вставить("Y", "Y");
	КС.Вставить("Z", "Z"); 	
	
	Возврат КС;
	
КонецФункции 
//////////////

Процедура КонтрольРазмещенияНоменклатурыВКатегорииПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.КонтрольРазмещенияНоменклатурыВКатегорииПриЗаписи(Источник, Отказ);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		ТаблицаКатегорий = ПолучитьТаблицуКатегорийСайтаДляНоменклатуры(Источник,ТекущаяCMS);
		
		Если Источник.ЭтоГруппа или Источник.Родитель.Пустая() или Источник.ДополнительныеСвойства.Свойство("НеКонтролироватьКатегориюСайта")
			
			//или НЕ Источник.Родитель.CMS1C_Категории.Количество()
			Или Не ТаблицаКАтегорий.Количество()
			Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		ЗапросПоДопДанным = Новый Запрос;
		ЗапросПоДопДанным.Текст = "ВЫБРАТЬ
		|	CMS1C_Номенклатура.Ссылка,
		|	CMS1C_Номенклатура.ОсновнойВариант,
		|	CMS1C_Номенклатура.ОсновнойВариант.Наименование,
		|	CMS1C_Номенклатура.ОсновнойВариант.Артикул
		|ИЗ
		|	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
		|ГДЕ
		|	CMS1C_Номенклатура.Владелец = &Номенклатура
		|	И CMS1C_Номенклатура.НастройкаСайта = &НастройкаСайта";
		
		Для каждого  СтрокаКатегорий из
			
			//Источник.Родитель.CMS1C_Категории
			ТаблицаКатегорий
			
			Цикл
			
			ЗапросПоДопДанным.УстановитьПараметр("Номенклатура",Источник.Ссылка);
			ЗапросПоДопДанным.УстановитьПараметр("НастройкаСайта",СтрокаКатегорий.НастройкаСайта);                   
			
			Выборка = ЗапросПоДопДанным.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Ссылка.Категория<>СтрокаКатегорий.Категория
					или Выборка.Ссылка.Наименование <> Источник.Наименование
					Или Выборка.ОсновнойВариантАртикул <> Источник.Артикул
					//Или Выборка.ОсновнойВариантНаименование <> Источник.Наименование
					Тогда // 
					Объект = Выборка.Ссылка.ПолучитьОбъект();
					Объект.ДополнительныеСвойства.Вставить("ИзменениеКатегории",Объект.Категория);
					Объект.Категория = СтрокаКатегорий.Категория;
					Объект.Наименование = Источник.Наименование;
					Попытка
						//Объект.ОбменДанными.Загрузка = Истина;
						Объект.Записать();
					Исключение
						Сообщить("Контроль размещения в группе номенклатуры"+Источник.Ссылка);
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			Иначе
				Объект = Справочники.CMS1C_Номенклатура.СоздатьЭлемент();
				Объект.Категория = СтрокаКатегорий.Категория;
				Объект.Владелец = Источник.Ссылка;
				Объект.НастройкаСайта = СтрокаКатегорий.НастройкаСайта;
				Объект.Наименование = Источник.Ссылка.Наименование;
				Объект.МожноКупить = Истина;
				//Объект.МинимальныйЗаказ = 1;
				//Объект.ТипТоваров = Объект.НастройкаСайта.ТипТоваровПоУмолчанию;
				Объект.Заполнить(Неопределено);
				ОБъект.ТипSKU = 0;
				Объект.Статус = Истина;
				Объект.ДополнительныеСвойства.Вставить("НеОчищатьОсновнуюКатегорию");
				Записался = Ложь;
				Попытка
					Объект.Записать();
					Записался = Истина;
				Исключение
					Сообщить("Контроль размещения в группе номенклатуры"+Источник.Ссылка);
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
				Если Записался Тогда
					Мен = РегистрыСведений.CMS1C_КатегорииНоменклатуры.СоздатьМенеджерЗаписи();
					Мен.НастройкаСайта = СтрокаКатегорий.НастройкаСайта;
					Мен.Номенклатура = Объект.Ссылка;
					Мен.Категория = СтрокаКатегорий.Категория;
					Мен.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

//Процедура КонтрольСоответствияРодителяНоменклатурыВКатегорииСайтаПередЗаписью(Источник, Отказ) Экспорт
//	возврат;
//	Если НЕ Источник.ЭтоГруппа или Источник.Родитель.Пустая() Тогда
//		возврат;
//	КонецЕсли;
//	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
//		возврат;
//	КонецЕсли;
//	НачатьТранзакцию();
//	Ошибки = Ложь;
//	
//	
//	ЗапросПоГруппаИзКоторыхНужноУдалитьТекущую = Новый Запрос;
//	ЗапросПоГруппаИзКоторыхНужноУдалитьТекущую.Текст = 
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	НоменклатураCMS1C_Категории.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура.CMS1C_Категории КАК НоменклатураCMS1C_Категории
//	|ГДЕ
//	|	НоменклатураCMS1C_Категории.Категория В(&МассивКатегорий)
//	|	"+?(Источник.ЭтоНовый(),"","И НЕ НоменклатураCMS1C_Категории.Ссылка = &Ссылка")+" ";
//	
//	МассивКатегорий = Источник.CMS1C_Категории.ВыгрузитьКолонку("Категория");
//	ЗапросПоГруппаИзКоторыхНужноУдалитьТекущую.УстановитьПараметр("МассивКатегорий",МассивКатегорий);
//	ЗапросПоГруппаИзКоторыхНужноУдалитьТекущую.УстановитьПараметр("Ссылка",Источник.Ссылка);
//	
//	Результат = ЗапросПоГруппаИзКоторыхНужноУдалитьТекущую.Выполнить();	
//	
//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
//	
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
//		
//		ОбъектГруппы = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
//		
//		Для каждого Категория из МассивКатегорий Цикл
//			Строка  =ОбъектГруппы.CMS1C_Категории.Найти(Категория); 
//			Если Строка<>Неопределено Тогда
//				ОбъектГруппы.CMS1C_Категории.Удалить(Строка);
//			КонецЕсли;			
//		КонецЦикла;	            			
//		ОбъектГруппы.Записать();
//	КонецЦикла;
//	
//	ЗапросПоДопДанным = Новый Запрос;
//	ЗапросПоДопДанным.Текст = "ВЫБРАТЬ
//	|	CMS1C_Категории.Ссылка
//	|ИЗ
//	|	Справочник.CMS1C_Категории КАК CMS1C_Категории
//	|ГДЕ
//	|	CMS1C_Категории.Владелец = &Сайт
//	|	И CMS1C_Категории.Родитель = &Родитель
//	|	И CMS1C_Категории.Наименование = &Наименование";
//	
//	ЗапросПоДопДанным.УстановитьПараметр("Наименование",Источник.Наименование);                   
//	
//	Для каждого  СтрокаКатегорий из Источник.CMS1C_Категории Цикл			
//		СтрокаРодитель = Источник.Родитель.CMS1C_Категории.Найти(СтрокаКатегорий.Сайт,"Сайт");
//		Если СтрокаРодитель<>Неопределено Тогда
//			Если СтрокаКатегорий.Категория.Родитель<>СтрокаРодитель.Категория Тогда
//				ОбъектКатегория = СтрокаКатегорий.Категория.ПолучитьОбъект();
//				Если ОбъектКатегория = Неопределено Тогда
//					продолжить;
//				КонецЕсли;
//				ОбъектКатегория.Родитель = СтрокаРодитель.Категория;				
//				Попытка
//					ОбъектКатегория.Записать();		 	 	
//				Исключение
//					Сообщить("Контроль автосоздания групп сайта!");
//					Сообщить(ОписаниеОшибки());
//					Ошибки = Истина;
//				КонецПопытки;
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЦикла;
//	
//	Для каждого  СтрокаКатегорий из Источник.CMS1C_Категории Цикл			
//		Если СтрокаКатегорий.Категория.Наименование<>Источник.Наименование Тогда
//			//ОбъектКатегория = СтрокаКатегорий.Категория.ПолучитьОбъект();
//			//Если ОбъектКатегория=Неопределено Тогда
//			Если НЕ СуществуетКатегорияСайта(СтрокаКатегорий.Категория) Тогда
//				Источник.CMS1C_Категории.Удалить(СтрокаКатегорий);	
//				продолжить;
//			КонецЕсли;
//			ОбъектКатегория = СтрокаКатегорий.Категория.ПолучитьОбъект();
//			ОбъектКатегория.Наименование = Источник.Наименование;				
//			ОбъектКатегория.Заголовок = Источник.Наименование;
//			Попытка
//				ОбъектКатегория.Записать();		 	 	
//			Исключение
//				Сообщить("Контроль автосоздания групп Сайта!");
//				Сообщить(ОписаниеОшибки());
//				Ошибки = Истина;
//			КонецПопытки;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Для каждого  СтрокаКатегорий из Источник.Родитель.CMS1C_Категории Цикл
//		Если НЕ СтрокаКатегорий.АвтоматическиСоздаватьГруппыСайта Тогда
//			продолжить;
//		КонецЕсли;		
//		
//		Если НЕ СуществуетКатегорияСайта(СтрокаКатегорий.Категория) Тогда
//			ОбъектРодитель = Источник.Родитель.ПолучитьОбъект();
//			Строка  = ОбъектРодитель.CMS1C_Категории.Найти(СтрокаКатегорий.НомерСтроки);
//			Если Строка<>Неопределено Тогда
//				ОбъектРодитель.CMS1C_Категории.Удалить(Строка);
//			КонецЕсли;			
//			ОбъектРодитель.Записать();
//			продолжить;
//		КонецЕсли;
//		
//		
//		ЗапросПоДопДанным.УстановитьПараметр("Родитель",СтрокаКатегорий.Категория);
//		ЗапросПоДопДанным.УстановитьПараметр("Сайт",СтрокаКатегорий.Сайт);                   
//		
//		Выборка = ЗапросПоДопДанным.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда			
//			Объект = Выборка.Ссылка;					
//		Иначе
//			Объект = Справочники.CMS1C_Категории.СоздатьЭлемент();
//			Объект.Родитель = СтрокаКатегорий.Категория;
//			Объект.Владелец = СтрокаКатегорий.Сайт;			
//			Объект.Наименование = Источник.Наименование;
//			Объект.Заголовок = Источник.Наименование;						
//			Объект.ПоказыватьПродуктыПодкатегорий = Истина;
//			Попытка
//				Объект.Записать();		 	 				
//			Исключение				
//				Сообщить("Контроль автосоздания групп Сайта!"+Источник.Ссылка);
//				Сообщить(ОписаниеОшибки());
//				Ошибки = Истина;
//			КонецПопытки;		 	 
//		КонецЕсли;
//		
//		СтрокаНаРедактирование = Источник.CMS1C_Категории.Найти(СтрокаКатегорий.Сайт,"Сайт");
//		
//		Если СтрокаНаРедактирование<>Неопределено Тогда
//			
//		Иначе
//			СтрокаНаРедактирование = Источник.CMS1C_Категории.Добавить();
//			СтрокаНаРедактирование.АвтоматическиСоздаватьГруппыСайта = Истина;	
//		КонецЕсли;
//		СтрокаНаРедактирование.Категория = Объект.Ссылка;
//		СтрокаНаРедактирование.Сайт = СтрокаКатегорий.Сайт; 	
//		
//	КонецЦикла;
//	
//	Если Ошибки Тогда
//		ОтменитьТранзакцию();
//	Иначе
//		ЗафиксироватьТранзакцию();
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура КонтрольСоответствияРодителяНоменклатурыВКатегории(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ Источник.ЭтоГруппа или Источник.Родитель.Пустая() Тогда
		возврат;
	КонецЕсли;
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		возврат;	
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS Из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.КонтрольСоответствияРодителяНоменклатурыВКатегории(Источник, Отказ);
		
		Если РЕзультат = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		
		//Проверяем есть ли запись в регистре сведений
		Запрос = новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_Категории.НастройкаСайта,
		|	CMS1C_Категории.ГруппаНоменклатуры,
		|	CMS1C_Категории.АвтоматическиСоздаватьГруппы,
		|	CMS1C_Категории.Категория
		|ИЗ
		|	РегистрСведений.CMS1C_Категории КАК CMS1C_Категории
		|ГДЕ
		|	CMS1C_Категории.АвтоматическиСоздаватьГруппы
		|	И CMS1C_Категории.ГруппаНоменклатуры = &ГруппаНоменклатуры";
		Запрос.УстановитьПараметр("ГруппаНоменклатуры",Источник.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Мен = РегистрыСведений.CMS1C_Категории.СоздатьМенеджерЗаписи();
			Мен.НастройкаСайта = Выборка.НастройкаСайта;
			Мен.ГруппаНоменклатуры =  Источник.ссылка;
			Мен.Прочитать();
			Если Мен.Категория.Пустая() Тогда
				НайдКатегорияПоНаименованию = Справочники.CMS1C_Категории.НайтиПоНаименованию(Источник.Наименование,Истина,Выборка.Категория,Выборка.НастройкаСайта);
				Если НайдКатегорияПоНаименованию.Пустая() Тогда
					Об = Справочники.CMS1C_Категории.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(Об,Выборка.Категория,,"Код,Родитель,ID,full_url,url");
					Об.Родитель = Выборка.Категория;
					Об.Наименование = Источник.Наименование;
					Попытка
						Об.Записать();
						НайдКатегорияПоНаименованию = Об.Ссылка;
					Исключение
						Сообщить("Контроль автосоздания групп сайта!");
						Сообщить(ОписаниеОшибки());
						Ошибки = Истина;
					КонецПопытки;;
				КонецЕсли;
				
				Мен.НастройкаСайта = Выборка.НастройкаСайта;
				Мен.ГруппаНоменклатуры = Источник.Ссылка;
				Мен.АвтоматическиСоздаватьГруппы = Истина;
				Мен.Категория = НайдКатегорияПоНаименованию;
				Мен.Записать();
			КонецЕсли;
		КонецЦикла;;
		//
		
		НачатьТранзакцию();
		Ошибки = Ложь;
		
		ЗапросРодителя = Новый Запрос;
		ЗапросРодителя.Текст = "ВЫБРАТЬ
		|	CMS1C_Категории.Категория КАК Категория,
		|	CMS1C_Категории.АвтоматическиСоздаватьГруппы
		|ИЗ
		|	РегистрСведений.CMS1C_Категории КАК CMS1C_Категории
		|ГДЕ
		|	CMS1C_Категории.НастройкаСайта = &НастройкаСайта
		|	И CMS1C_Категории.ГруппаНоменклатуры = &ГруппаНоменклатурыРодитель";
		ЗапросРодителя.УстановитьПараметр("ГруппаНоменклатурыРодитель",Источник.Родитель);
		
		
		НаборКатегорий = РегистрыСведений.CMS1C_Категории.Выбрать(Новый Структура("ГруппаНоменклатуры",Источник.Ссылка));
		Пока НаборКатегорий.Следующий() Цикл			
			ЗапросРодителя.УстановитьПараметр("НастройкаСайта",НаборКатегорий.НастройкаСайта);
			ВыборкаРодителя = ЗапросРодителя.Выполнить().Выбрать();
			Если ВыборкаРодителя.Следующий() Тогда
				Если НаборКатегорий.Категория.Родитель<>ВыборкаРодителя.Категория И ВыборкаРодителя.АвтоматическиСоздаватьГруппы Тогда
					
					ОбъектКатегория = НаборКатегорий.Категория.ПолучитьОбъект();
					НадоОбновитьРегистрСведений = Ложь;
					Если ОбъектКатегория=Неопределено Тогда//ДОпустим случай когда объект не найден
						НадоОбновитьРегистрСведений = Истина;
						ОбъектКАтегория = Справочники.CMS1C_Категории.СоздатьЭлемент();
						ОбъектКатегория.Владелец = НаборКатегорий.НастройкаСайта;
						ОбъектКАтегория.Наименование = Источник.Наименование;
					КонецЕсли;
					ОбъектКатегория.Родитель = ВыборкаРодителя.Категория;
					Попытка
						ОбъектКатегория.Записать();		 	 	
					Исключение
						Сообщить("Контроль автосоздания групп сайта!");
						Сообщить(ОписаниеОшибки());
						Ошибки = Истина;
					КонецПопытки;
					
					Если НЕ Ошибки И НадоОбновитьРегистрСведений Тогда
						//	//Источник.Категория = Об.Ссылка;
						Мен = РегистрыСведений.CMS1C_Категории.СоздатьМенеджерЗаписи();
						Мен.НастройкаСайта  = НаборКатегорий.НАстройкаСайта;
						Мен.ГруппаНоменклатуры = Источник.Ссылка;
						Мен.Прочитать();
						АвтоматическиСоздавать = Мен.АвтоматическиСоздаватьГруппы;
						Мен.НастройкаСайта = НаборКатегорий.НастройкаСайта;
						Мен.Категория = ОбъектКАтегория.Ссылка;
						Мен.КатегорияНоменклатуры = Источник.ссылка;
						Мен.АвтоматическиСоздаватьГруппы = АвтоматическиСоздавать;
						Мен.Записать();
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		НаборКатегорий = РегистрыСведений.CMS1C_Категории.Выбрать(Новый Структура("ГруппаНоменклатуры",Источник.Ссылка));
		Пока НаборКатегорий.Следующий() Цикл
			Мен = РегистрыСведений.CMS1C_Категории.СоздатьМенеджерЗаписи();
			Мен.НастройкаСайта = НаборКатегорий.НастройкаСайта;
			Мен.ГруппаНоменклатуры = Источник.Родитель;
			Мен.Прочитать();
			Если Не Мен.АвтоматическиСоздаватьГруппы Тогда
				Продолжить;
			КОнецесли;
			
			Если НаборКатегорий.Категория.Наименование<>Источник.Наименование Тогда
				ОбъектКатегория = НаборКатегорий.Категория.ПолучитьОбъект();			
				ОбъектКатегория.Наименование = Источник.Наименование;				
				ОбъектКатегория.Заголовок = Источник.Наименование;
				Попытка
					ОбъектКатегория.Записать();		 	 	
				Исключение
					Сообщить("Контроль автосоздания групп сайта!");
					Сообщить(ОписаниеОшибки());
					Ошибки = Истина;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Если Ошибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры



Процедура КонтрольПодчиненияКатегорииРодителюПриЗаписи(Источник, Отказ) Экспорт
	//Универсальная подписка для всех CMS
	УстановитьПривилегированныйРежим(Истина);
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		возврат;	
	КонецЕсли;
	
	Если Не Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Не Источник.ЭтоНовый() Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|	И Номенклатура.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель",Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока  Выборка.Следующий() Цикл
			Попытка
				ГруппаДляПерезаписи = Выборка.Ссылка.ПолучитьОбъект();
				ГруппаДляПерезаписи.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СинхронизироватьСвойстваСайтаИзСвойств1CПриЗаписи(Источник, Отказ, Замещение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Отказ Тогда возврат; КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияОбъекта = ТипЗнч(Источник.Отбор.Объект.Значение);
	
	Если ЗначениеЗаполнено(Источник.Отбор.Объект.Значение)
		И (Источник.Отбор.Объект.Использование)
		И ТипЗначенияОбъекта <> ТИп("СправочникСсылка.Номенклатура")
		И ТипЗначенияОбъекта <> Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Отбор.Найти("Объект")=Неопределено 
		или (НЕ ТипЗнч(Источник.Отбор.Объект.Значение)=Тип("СправочникСсылка.Номенклатура") )
		или Источник.Отбор.Объект.Значение.Пустая()
		или Источник.Отбор.Найти("Свойство")=Неопределено 
		или НЕ Источник.Отбор.Свойство.Значение.Пустая()
		Тогда
		Возврат;
	КонецЕсли;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.СинхронизироватьСвойстваСайтаИзСвойств1CПриЗаписи(Источник, Отказ,Замещение);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	CMS1C_НастройкиСайтов.Ссылка
		               |ИЗ
		               |	Справочник.CMS1C_НастройкиСайтов КАК CMS1C_НастройкиСайтов
		               |ГДЕ
		               |	CMS1C_НастройкиСайтов.СистемаУправленияСайтом = &СистемаУправленияСайтом
		               |	И CMS1C_НастройкиСайтов.СинхронизироватьСвойстваДопДанныхИзСвойствИРеквизитовНоменклатуры1С";
					   Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
					   
		
		//ВыборкаНастроек = Справочники.CMS1C_НастройкиСайтов.Выбрать();
		ВыборкаНастроек = Запрос.Выполнить().Выбрать();
		Пока ВыборкаНастроек.Следующий() Цикл
			Настройка = ВыборкаНастроек.Ссылка;
			//Если Не Настройка.СинхронизироватьСвойстваДопДанныхИзСвойствИРеквизитовНоменклатуры1С Тогда
			//	Продолжить;
			//КонецЕсли;
			
			//Если Источник.Отбор.Найти("Объект")=Неопределено 
			//	или (НЕ ТипЗнч(Источник.Отбор.Объект.Значение)=Тип("СправочникСсылка.Номенклатура") )
			//	или Источник.Отбор.Объект.Значение.Пустая()
			//	или Источник.Отбор.Найти("Свойство")=Неопределено 
			//	или НЕ Источник.Отбор.Свойство.Значение.Пустая()
			//	Тогда
			//	Продолжить;
			//КонецЕсли;
			
			НаборЗаписейСайта = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписейСайта.ДополнительныеСвойства.Вставить("ЗаписьСвойстваСайтаЗависимо");
			НОменклатура = Источник.Отбор.Объект.Значение;
			ОбъектСайта = Справочники.CMS1C_Номенклатура.НайтиПоРеквизиту("НастройкаСайта",Настройка,,НОменклатура);
			Если ОбъектСайта.Пустая() Тогда 
				Продолжить;
			КонецЕсли;
			НаборЗаписейСайта.Отбор.Объект.Установить(ОбъектСайта);
			НаборЗаписейСайта.Отбор.НастройкаСайта.Установить(Настройка);
			НаборЗаписейСайта.Прочитать();
			ЗаписиНаУдаление = Новый Массив;
			
			Для каждого ЗаписьНабора из НаборЗаписейСайта Цикл
				Если НЕ ЗаписьНабора.Свойство.ЭтоХарактеристика
					и НЕ ЗначениеЗаполнено(ЗаписьНабора.Свойство.РеквизитНоменклатуры)
					И ЗначениеЗаполнено(ЗаписьНабора.Свойство.СвойствоНоменклатуры)
					Тогда
					ЗаписиНаУдаление.Добавить(ЗаписьНабора);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ЗаписьНаУдаление из ЗаписиНаУдаление Цикл
				НаборЗаписейСайта.Удалить(ЗаписьНаУдаление);				
			КонецЦикла; 
			
			Для каждого Запись из Источник Цикл
				СвойствоСайта = НастройкаСоздатьВернутьСвойствоСайта(Запись.Свойство,Настройка,Ложь);
				Если СвойствоСайта.ЭтоХарактеристика Тогда
					продолжить;
				КонецЕсли;
				Если НЕ СвойствоСайта.Пустая() Тогда
					НайденноеЗначениеСайта = НайтиИлиСоздатьЗначениеСвойстваОбъекта(СвойствоСайта,Запись.Значение);
					УстановитьЗначениеСвойстваСайта(Номенклатура,СвойствоСайта,НайденноеЗначениеСайта,Запись.Объект,НаборЗаписейСайта);
				КонецЕсли;
			КонецЦикла;	
			
			Попытка 
				НаборЗаписейСайта.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьЗначениеСвойстваСайта(Номенклатура,Аттрибут,Значение,Объект,НаборСайта) Экспорт
	
	ЗаписьСайта = НаборСайта.Добавить();
	ЗаписьСайта.Номенклатура = Номенклатура ;
	ЗаписьСайта.НастройкаСайта = Аттрибут.НастройкаСайта;
	ЗаписьСайта.Объект = НаборСайта.Отбор.Объект.Значение;
	ЗаписьСайта.Свойство = Аттрибут;
	
	Если ТипЗнч(Значение)=Тип("Строка") Тогда
		ЗаписьСайта.Значение =Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов") Тогда
		ЗаписьСайта.Значение =Значение;
	Иначе
		//ЗаписьСайта.Значение =Справочники.CMS1C_ЗначенияСвойствОбъектов.НайтиПоНаименованию(Значение.Наименование,Истина,,Свойство);
		ЗаписьСайта.Значение = НайтиИлиСоздатьЗначениеСвойстваОбъекта(Аттрибут,Значение);
	КонецЕсли;	  
	
	Если Аттрибут.ПереключательТипаДанных <> 0 Тогда
		ЗаписьСайта.ПоУмолчанию = Истина;
	КонецеСли;
	
		
	
	//Если ПоУмолчанию <> Неопределено тогда
	//	ЗаписьСайта.ПоУмолчанию = ПоУмолчанию;
	//Конецесли;
КонецПроцедуры

Процедура УстановитьЗначениеАттрибутаСайта(Номенклатура,Свойство,Значение,Объект,НаборСайта) Экспорт
	
	ЗаписьСайта = НаборСайта.Добавить();
	ЗаписьСайта.Номенклатура = Номенклатура ;
	ЗаписьСайта.НастройкаСайта = Свойство.НастройкаСайта;
	ЗаписьСайта.Объект = НаборСайта.Отбор.Объект.Значение;
	ЗаписьСайта.Свойство = Свойство;
	
	Если ТипЗнч(Значение)=Тип("Строка") Тогда
		ЗаписьСайта.Значение =Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.CMS1C_ЗначенияАттрибутовОбъектов") Тогда
		ЗаписьСайта.Значение =Значение;
	Иначе
		//ЗаписьСайта.Значение =Справочники.CMS1C_ЗначенияСвойствОбъектов.НайтиПоНаименованию(Значение.Наименование,Истина,,Свойство);
		ЗаписьСайта.Значение = НайтиИлиСоздатьЗначениеАттрибутаОбъекта(СВойство,Значение);
	КонецЕсли;	  
	
	//Если ПоУмолчанию <> Неопределено тогда
	//	ЗаписьСайта.ПоУмолчанию = ПоУмолчанию;
	//Конецесли;
КонецПроцедуры

Функция НастройкаСоздатьВернутьСвойствоСайта(Свойство,Настройка,ЭтоХарактеристика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ первые 1
	|	CMS1C_СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
	|ГДЕ
	|	CMS1C_СвойстваОбъектов.НастройкаСайта = &НастройкаСайта
	|	И CMS1C_СвойстваОбъектов.СвойствоНоменклатуры = &СвойствоНоменклатуры";
	
	Запрос.УстановитьПараметр("НастройкаСайта",Настройка);			   
	Запрос.УстановитьПараметр("СвойствоНоменклатуры",Свойство);			   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;//ПланыВидовХарактеристик.CMS1C_СвойстваОбъектов.НайтиПоРеквизиту("СвойствоНоменклатуры",Свойство);
		Если НЕ Результат.Пустая() Тогда
			//Если Результат.Наименование<>Свойство.Наименование Тогда
			//	РезультатОбъект = Результат.ПолучитьОбъект();
			//	РезультатОбъект.Наименование = Свойство.Наименование;
			//	РезультатОбъект.Записать();
			//КонецЕсли;				
			Возврат Результат;
		КонецЕсли; 	
	КонецЕсли;
	
	Если Настройка.АвтодобавлениеСвойствПоСвойствамНоменклатуры Тогда
		ВыборкаСвойств = ПланыВидовХарактеристик.CMS1C_СвойстваОбъектов.Выбрать(,Новый Структура("НастройкаСайта",Настройка));
		Пока ВыборкаСвойств.Следующий() Цикл
			Результат = ВыборкаСвойств.Ссылка;
			Если Найти(Результат.Наименование,Свойство.Наименование)=1 Тогда
				Если Результат.Наименование<>Свойство.Наименование
					или Результат.СвойствоНоменклатуры<>Свойство Тогда
					РезультатОбъект = Результат.ПолучитьОбъект();
					РезультатОбъект.Наименование = Свойство.Наименование;
					РезультатОбъект.СвойствоНоменклатуры = Свойство;
					РезультатОбъект.Записать();
				КонецЕсли;
				возврат Результат;
			КонецЕсли;
			Если  НЕ ЗначениеЗаполнено(Результат.Наименование) Тогда
				РезультатОбъект = Результат.ПолучитьОбъект();
				РезультатОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
		
		РезультатОбъект = ПланыВидовХарактеристик.CMS1C_СвойстваОбъектов.СоздатьЭлемент();
		РезультатОбъект.Наименование = Свойство.Наименование;
		РезультатОбъект.СвойствоНоменклатуры = Свойство;
		РезультатОбъект.НастройкаСайта = Настройка;
		РезультатОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
		
		//Если Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура Тогда
		//	//Если тип значения строка то считаем что не выбор из списка а обычный текст
		//	//А если же не строка -- считаем что выбор из списка
		//	Если Свойство.ТипЗначения.СодержитТип(ТИп("Число")) Тогда
		//		РезультатОбъект.ТипИЗначенияХарактеристики = "double";
		//		РезультатОбъект.ДополнительныйТип= "double";
		//		РезультатОбъект.НазваниеТипаНаСайте = "double";
		//	ИНачеЕсли Свойство.ТИпЗначения.СодержитТип(Тип("Строка")) Тогда
		//		РезультатОбъект.ТипИЗначенияХарактеристики = "varchar";
		//		РезультатОбъект.ДополнительныйТип = "varchar";
		//	Иначе
		//		РезультатОбъект.ТипИЗначенияХарактеристики = "varchar";
		//		РезультатОбъект.ДополнительныйТип = "varchar";
		//		РезультатОбъект.ЕстьВыбор = Истина;
		//		РезультатОбъект.ТипИЗначенияХарактеристики = "Выпадающий список";
		//	Конецесли;
		//ИначеЕсли Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
		//	РезультатОбъект.ЕстьВыбор = Истина;
		//	РезультатОбъект.МножественныйВыбор = Истина;
		//	РезультатОбъект.ЭтоХарактеристика = Истина;
		//	РезультатОбъект.ТипИЗначенияХарактеристики= "Чекбоксы";
		//КонецЕсли;
		
		
		Если Не ЭтоХарактеристика Тогда
			//Если тип значения строка то считаем что не выбор из списка а обычный текст
			//А если же не строка -- считаем что выбор из списка
			Если Свойство.ТипЗначения.СодержитТип(ТИп("Число")) Тогда
				РезультатОбъект.ТипИЗначенияХарактеристики = "Значение";
				РезультатОбъект.ДополнительныйТип= "Произвольное число";
				РезультатОбъект.НазваниеТипаНаСайте = "double";
			ИНачеЕсли Свойство.ТИпЗначения.СодержитТип(Тип("Строка")) Тогда
				РезультатОбъект.ТипИЗначенияХарактеристики = "Текст";
				РезультатОбъект.ДополнительныйТип = "Текст";
				РезультатОбъект.НазваниеТипаНаСайте = "varchar";
			Иначе
				РезультатОбъект.ЕстьВыбор = Истина;
				РезультатОбъект.ТипИЗначенияХарактеристики = "Выпадающий список";
				РезультатОбъект.ДополнительныйТип = "Текст";
				РезультатОбъект.НазваниеТипаНаСайте = "varchar";
			Конецесли;
		Иначе//Если Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
			РезультатОбъект.ЕстьВыбор = Истина;
			РезультатОбъект.МножественныйВыбор = Истина;
			РезультатОбъект.ЭтоХарактеристика = Истина;
			РезультатОбъект.ДополнительныйТип = "Текст";
			РезультатОбъект.НазваниеТипаНаСайте = "varchar";
			РезультатОбъект.ТипИЗначенияХарактеристики= "Чекбоксы (множественный выбор)";
		КонецЕсли;
		
		РезультатОбъект.ВсеТипыТоваров = Истина;
		
		Попытка	
			РезультатОбъект.Записать();
			Возврат РезультатОбъект.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат ПланыВидовХарактеристик.CMS1C_СвойстваОбъектов.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Возврат ПланыВидовХарактеристик.CMS1C_СвойстваОбъектов.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция НастройкаСоздатьВернутьАттрибутСайта(Аттрибут,Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CMS1C_АттрибутыОбъектов.Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.CMS1C_АттрибутыОбъектов КАК CMS1C_АттрибутыОбъектов
	               |ГДЕ
	               |	CMS1C_АттрибутыОбъектов.НастройкаСайта = &НастройкаСайта
	               |	И CMS1C_АттрибутыОбъектов.СвойствоНоменклатуры = &СвойствоНоменклатуры";
	
	Запрос.УстановитьПараметр("НастройкаСайта",Настройка);			   
	Запрос.УстановитьПараметр("СвойствоНоменклатуры",Аттрибут);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;//ПланыВидовХарактеристик.CMS1C_СвойстваОбъектов.НайтиПоРеквизиту("СвойствоНоменклатуры",Свойство);
		Если НЕ Результат.Пустая() Тогда
			//Если Результат.Наименование<>Свойство.Наименование Тогда
			//	РезультатОбъект = Результат.ПолучитьОбъект();
			//	РезультатОбъект.Наименование = Свойство.Наименование;
			//	РезультатОбъект.Записать();
			//КонецЕсли;				
			Возврат Результат;
		КонецЕсли; 	
	КонецЕсли;
	
	Если Настройка.АвтодобавлениеСвойствПоСвойствамНоменклатуры Тогда
		ВыборкаАттрибутов = ПланыВидовХарактеристик.CMS1C_АттрибутыОбъектов.Выбрать(,Новый Структура("НастройкаСайта",Настройка));
		Пока ВыборкаАттрибутов.Следующий() Цикл
			Результат = ВыборкаАттрибутов.Ссылка;
			Если Найти(Результат.Наименование,Аттрибут.Наименование)=1 Тогда
				Если Результат.Наименование<>Аттрибут.Наименование
					или Результат.СвойствоНоменклатуры<>Аттрибут Тогда
					РезультатОбъект = Результат.ПолучитьОбъект();
					РезультатОбъект.Наименование = Аттрибут.Наименование;
					РезультатОбъект.СвойствоНоменклатуры = Аттрибут;
					РезультатОбъект.Записать();
				КонецЕсли;
				возврат Результат;
			КонецЕсли;
			Если  НЕ ЗначениеЗаполнено(Результат.Наименование) Тогда
				РезультатОбъект = Результат.ПолучитьОбъект();
				РезультатОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
		
		РезультатОбъект = ПланыВидовХарактеристик.CMS1C_АттрибутыОбъектов.СоздатьЭлемент();
		РезультатОбъект.Наименование = Аттрибут.Наименование;
		РезультатОбъект.СвойствоНоменклатуры = Аттрибут;
		РезультатОбъект.НастройкаСайта = Настройка;
		РезультатОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияАттрибутовОбъектов");
		
		Если Аттрибут.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура Тогда
			//Если тип значения строка то считаем что не выбор из списка а обычный текст
			//А если же не строка -- считаем что выбор из списка
			Если Аттрибут.ТипЗначения.СодержитТип(ТИп("Число")) Тогда
				РезультатОбъект.ТипИЗначенияХарактеристики = "double";
				РезультатОбъект.ДополнительныйТип= "double";
				РезультатОбъект.НазваниеТипаНаСайте = "double";
			ИНачеЕсли Аттрибут.ТИпЗначения.СодержитТип(Тип("Строка")) Тогда
				РезультатОбъект.ТипИЗначенияХарактеристики = "varchar";
				РезультатОбъект.ДополнительныйТип = "varchar";
			Иначе
				РезультатОбъект.ТипИЗначенияХарактеристики = "Выпадающий список";
				РезультатОбъект.ДополнительныйТип = "varchar";
				РезультатОбъект.ЕстьВыбор = Истина;
			Конецесли;
		ИначеЕсли Аттрибут.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
			РезультатОбъект.ЕстьВыбор = Истина;
			РезультатОбъект.МножественныйВыбор = Истина;
			РезультатОбъект.ЭтоХарактеристика = Истина;
			РезультатОбъект.ТипИЗначенияХарактеристики= "Чекбоксы";
		КонецЕсли;
		
		РезультатОбъект.ВсеТипыТоваров = Истина;
		
		
		
		Попытка	
			РезультатОбъект.Записать();
			Возврат РезультатОбъект.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат ПланыВидовХарактеристик.CMS1C_АттрибутыОбъектов.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Возврат ПланыВидовХарактеристик.CMS1C_АттрибутыОбъектов.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Процедура ЗаписатьСвойстваСайтаПриСозданииПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ Источник.ДополнительныеСвойства.Свойство("Создание") Тогда
		возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Источник.Владелец);
	НаборЗаписей.Прочитать();	
	НаборЗаписей.Записать();
	Источник.ДополнительныеСвойства.Удалить("Создание");
КонецПроцедуры

Процедура ЗаполнениеСвойствСайтаХарактеристикойПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Отказ Тогда возврат; КонецЕсли;
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		возврат;	
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	Характеристика = Источник.Отбор.Объект.Значение;
	
	Если НЕ ТипЗнч(Характеристика)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Характеристика.Владелец;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.ЗаполнениеСвойствСайтаХарактеристикойПриЗаписиПриЗаписи(Источник, Отказ);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		//ВыборкаНастроек = Справочники.CMS1C_НастройкиСайтов.Выбрать();	
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_НастройкиСайтов.Ссылка
		|ИЗ
		|	Справочник.CMS1C_НастройкиСайтов КАК CMS1C_НастройкиСайтов
		|ГДЕ
		|	CMS1C_НастройкиСайтов.СистемаУправленияСайтом = &СистемаУправленияСайтом
		|	И (CMS1C_НастройкиСайтов.СинхронизироватьСвойстваВариантовИзСвойствХарактеристик1С
		|			ИЛИ CMS1C_НастройкиСайтов.СинхронизироватьСвойстваДопДанныхИзСвойствХарактеристик1С
		|			ИЛИ CMS1C_НастройкиСайтов.СоздаватьВариантыНоменклатурыИзХарактеристикНоменклатуры)";
		Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
		ВыборкаНастроек = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаНастроек.Следующий() Цикл
			Настройка = ВыборкаНастроек.Ссылка;
			
			//Если (НЕ Настройка.СинхронизироватьСвойстваВариантовИзСвойствХарактеристик1С)
			//	И (Не Настройка.СинхронизироватьСвойстваДопДанныхИзСвойствХарактеристик1С)
			//	И (Не Настройка.СоздаватьВариантыНоменклатурыИзХарактеристикНоменклатуры) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			ОбъектСайта = Справочники.CMS1C_Номенклатура.НайтиПоРеквизиту("НастройкаСайта",Настройка,,НОменклатура);
			Если ОбъектСайта.Пустая() Тогда 
				Продолжить;
			КонецЕсли;
			
			ВариантНоменклатуры = Справочники.CMS1C_ВариантыНоменклатуры.НайтиПоРеквизиту("ХарактеристикаНоменклатуры",Характеристика,,ОбъектСайта);
			
			Если Настройка.ПриПометкеНаУдалениеХарактеристикНоменклатурыПомечатьНаУдалениеВариантыНоменклатуры Тогда
				Если Характеристика.ПометкаУдаления
					И ВариантНоменклатуры.Пустая() Тогда
					Продолжить;
				Конецесли;
				
				Если Не ВариантНоменклатуры.Пустая() Тогда
					Если Характеристика.пометкаУдаления <> ВариантНоменклатуры.ПометкаУдаления Тогда
						ОбВариант = ВариантНоменклатуры.ПолучитьОбъект();
						ОбВариант.ДополнительныеСвойства.Вставить("НадоЗаписать");
						ОбВариант.УстановитьПометкуУдаления(Характеристика.пометкаУдаления);
					КонецЕсли;
				КонецЕсли;
			Конецесли;
			
			Если ВариантНоменклатуры.Пустая() И Настройка.СоздаватьВариантыНоменклатурыИзХарактеристикНоменклатуры Тогда
				ОбВариант = Справочники.CMS1C_ВариантыНоменклатуры.СоздатьЭлемент();
				ОбВариант.НастройкаСайта = Настройка;
				ОбВариант.Владелец = ОбъектСайта;
				ОбВариант.ДоступенДляЗаказа = Истина;
				ОбВариант.ХарактеристикаНоменклатуры = Характеристика;
				ОбВариант.Наименование = Характеристика.Наименование;
				ОбВариант.Записать();
				
				ВариантНоменклатуры = ОбВариант.Ссылка;
			КонецЕсли;
			
			ЗапросПоСвойствам = Новый Запрос();
			ЗапросПоСвойствам.Текст = "ВЫБРАТЬ
			|	CMS1C_СвойстваОбъектов.Ссылка
			|ИЗ
			|	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
			|ГДЕ
			|	CMS1C_СвойстваОбъектов.ЭтоХарактеристика
			|	И CMS1C_СвойстваОбъектов.НастройкаСайта = &НастройкаСайта";
			ЗапросПоСвойствам.УстановитьПараметр("НастройкаСайта",Настройка);
			
			
			ВыборкаСвойствХарактеристик = ЗапросПоСвойствам.Выполнить().Выбрать();
			Пока ВыборкаСвойствХарактеристик.Следующий() Цикл
				СвойствоСайта = ВыборкаСвойствХарактеристик.Ссылка;
				
				Если Настройка.СинхронизироватьСвойстваДопДанныхИзСвойствХарактеристик1С ТОгда
					СинхронизироватьСвойстваДопДанныхИзСвойствХарактеристик1С(ОбъектСайта,Настройка,СвойствоСайта,Характеристика,Источник,Номенклатура);
				КонецЕсли;
				
				Если Настройка.СинхронизироватьСвойстваВариантовИзСвойствХарактеристик1С Тогда
					Если ЗначениеЗаполнено(ВариантНоменклатуры) Тогда
						СинхронизироватьСвойстваВариантовИзСвойствХарактеристик1С(ВариантНоменклатуры,Настройка,СвойствоСайта,Характеристика,Источник,Номенклатура);
						
						//+
						Если ВариантНоменклатуры.Наименование <> Характеристика.Наименование Тогда
							ОбВариант = ВариантНоменклатуры.ПолучитьОбъект();
							ОбВариант.Наименование = Характеристика.Наименование;
							//ОбВариант.ОбменДанными.Загрузка = Истина;
							ОбВариант.Записать();
						Конецесли;
						//-
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнениеКартинкиДопДанныхИзСпрНоменклатураПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Отказ
		или Источник.ВидДанных<>Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение	
		или ТипЗнч(Источник.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.объект.ОсновноеИзображение <> Источник.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.ЗаполнениеКартинкиДопДанныхИзСпрНоменклатураПриЗаписи(Источник, Отказ);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_НастройкиСайтов.Ссылка
		|ИЗ
		|	Справочник.CMS1C_НастройкиСайтов КАК CMS1C_НастройкиСайтов
		|ГДЕ
		|	CMS1C_НастройкиСайтов.СистемаУправленияСайтом = &СистемаУправленияСайтом
		|	И CMS1C_НастройкиСайтов.ПерезаписыватьПервуюКартинкуИзКартинкиСправочникаНоменклатура";
		Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
		
		//ВыборкаНастроек = Справочники.CMS1C_НастройкиСайтов.Выбрать(,,Новый Структура("ПерезаписыватьПервуюКартинкуИзКартинкиСправочникаНоменклатура",Истина));	
		ВыборкаНастроек = Запрос.Выполнить().Выбрать();
		Пока ВыборкаНастроек.Следующий() Цикл
			Настройка = ВыборкаНастроек.Ссылка;
			ВыборкаДопДанных = Справочники.CMS1C_Номенклатура.Выбрать(,Источник.Объект,Новый Структура("НастройкаСайта",Настройка));
			ДвоичныеДанные = Источник.Хранилище.Получить();
			Если ТипЗнч(ДвоичныеДанные) = Тип("Картинка") Тогда
				ТекФормат = Строка(ДвоичныеДанные.Формат());
				ОбработатьФормат(ТекФормат);
				ПолноеИмяФайла = ПолучитьИмяВременногоФайла(ТекФормат);
				Если ДвоичныеДанные <> Неопределено Тогда
					ДвоичныеДанные.Записать(ПолноеИмяФайла);
					Пока ВыборкаДопДанных.Следующий() Цикл
						УстановитьРисунок(Настройка,ПолноеИмяФайла,Источник.Объект,ВыборкаДопДанных.Ссылка,Источник.Наименование);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция УстановитьРисунок(НастройкаСайта,ПолноеИмяФайла,Знач Владелец,Знач ДопДанные,Наименование,Записывать=Истина) Экспорт
	ФайлКартинки = Новый Файл(ПолноеИмяФайла);
	Если НЕ ФайлКартинки.Существует() Тогда
		возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДопДанные)<>Тип("СправочникОбъект.CMS1C_Номенклатура") Тогда
		ДопДанные = ДопДанные.ПолучитьОбъект();
	КонецЕсли;
	
	Записываем = ложь;
	
	
	Если ЗначениеЗаполнено(ДопДанные.ОсновноеИзображение)
		И ТипЗнч(ДопДанные.ОсновноеИзображение) <> ТИп("Число")
		И ЗначениеЗаполнено(ДопДанные.ОсновноеИзображение.Код) Тогда
		ТекущиеДанные = допДанные.ОсновноеИзображение.ПОлучитьОбъект();
	Иначе
		ТекущиеДанные = Справочники.CMS1C_Изображения.СоздатьЭлемент();
		ТекущиеДанные.Владелец = ДопДанные.Ссылка;
		Записываем = Истина;
	Конецесли;
	
	Если Не Записываем Тогда
		//ТекДвоичные = ТекущиеДанные.Хранилище.Получить();
		ТекДвоичные = CMS1C_ПроцедурыОбменаССайтом.ПолучитьИзображениеCMS1C_Изображения(ТекущиеДанные,НастройкаСайта,"",Истина);
		
		
		Если текДвоичные = Неопределено Тогда
			Записываем = Истина;
		Конецесли;
	Конецесли;
	
	Если НЕ Записываем Тогда
		Если ТекДвоичные.Размер() <> фАйлКартинки.Размер() Тогда
			Записываем = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если не Записываем Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	
	
	ИмяНового = ?(ЗначениеЗаполнено(Наименование),Наименование,ФайлКартинки.Имя);
	
	Если НЕ ЗначениеЗаполнено(ИмяНового) Тогда
		ИмяНового = "Изображение";
	КонецЕсли;
	ТекущиеДанные.Расширение = СтрЗаменить(ФайлКартинки.Расширение,".","");
	ТекущиеДанные.Наименование = ИмяНового;
	
	//ПутьКНовому = ПолучитьИмяВременногоФайла(ТекущиеДанные.Расширение);
	img = Неопределено;
	СтруктураВЫсотыИШирины = ПолучитьВысотуИШиринуКартинки(ФайлКартинки.ПолноеИмя,img);
	Если ТипЗнч(СтруктураВЫсотыИШирины) = Тип("Структура") Тогда
		ТекущиеДанные.Высота = СтруктураВЫсотыИШирины.Высота;
		ТекущиеДанные.Ширина = СтруктураВЫсотыИШирины.Ширина;
	Иначе
		ТекущиеДанные.Высота = 0;
		ТекущиеДанные.Ширина = 0;
	КонецЕсли;
	
	ТекущиеДанные.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя),Новый СжатиеДанных(6));	
	ТекущиеДанные.Размер = ФайлКартинки.Размер();
	
	ТекущиеДанные.Сортировка = 0;
	
	Об = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(НастройкаСайта);
	Об.ОтредактироватьИзображенияПриДобавленииИнтерактивно(ТекущиеДанные,img,ФайлКартинки.ПолноеИмя,ТекущиеДанные.Владелец,Истина);
	
	
	ТекущиеДанные.Записать();
	
	Если ДОпданные.ОсновноеИзображение <> ТекущиеДанные Тогда
		ДопДанные.ОсновноеИзображение = ТекущиеДанные.Ссылка;
	Конецесли;
	
	Если Записывать тогда
		ДопДанные.Записать();
	КонецЕсли;
	
	//Попытка
	//	УдалитьФайлы(ПутьКНовому);	
	//Исключение КонецПопытки;
	
	Возврат ТекущиеДанные.Ссылка;
КонецФункции

Процедура ПодготовитьРисунок(ПутьКИсходнику,Ширина,Высота,ПутьКНовому,Вотермарка="",НастройкаСайта)  Экспорт
	ЕстьОбъект = Ложь;
	Ответ=Неопределено; 
	Попытка
		img = Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
		ЕстьОбъект = Истина;
	Исключение	КонецПопытки;
	Если НЕ ЕстьОбъект ТОгда
		Конверт = ПолучитьИмяВременногоФайла("zip");//КаталогПрограммы();
		ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_Magic");
		ПрогаИзПамяти.Записать(Конверт);
		ФайлАрхива = Новый ЧтениеZIPФайла(Конверт); 
		ФайлАрхива.ИзвлечьВсе(КаталогПрограммы(), РежимВосстановленияПутейФайловZIP.Восстанавливать); 
		ФайлАрхива.Закрыть();
		
		ЗапуститьПриложение("regsvr32 /c /s """+КаталогПрограммы()+"ImageMagickObject\ImageMagickObject.dll""",,Истина);
		
		Попытка
			img = Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
			ЕстьОбъект = Истина;
		Исключение	КонецПопытки;
		
	КонецЕсли;
	
	Если ЕстьОбъект Тогда
		Ответ = img.Convert(ПутьКИсходнику,"-thumbnail",Строка(Формат(Ширина,"ЧГ=0"))+"x"+Строка(Формат(Высота,"ЧГ=0"))+">",ПутьКНовому); 
	КонецЕсли;
	
	Если Ответ=Неопределено Тогда 	
		Конверт = КаталогПрограммы()+"convert.exe";
		Если НайтиФайлы(Конверт).Количество()=0 Тогда
			ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_convert"); 
			ПрогаИзПамяти.Записать(Конверт);
		КонецЕсли;	
		
		ИмяФайлаИсходника = ПолучитьИмяВременногоФайла(Прав(ПутьКИсходнику,3));
		ФайлИсходник = Новый ДвоичныеДанные(ПутьКИсходнику);
		ФайлИсходник.Записать(ИмяФайлаИсходника);
		ТекстПриложения = """"+Конверт + """ """+ИмяФайлаИсходника+""" -thumbnail"+" """+Строка(Формат(Ширина,"ЧГ=0"))+"x"+Строка(Формат(Высота,"ЧГ=0"))+">"""+" """+ПутьКНовому+"""";
		ЗапуститьПриложение(ТекстПриложения,,Истина);
		
		Если НайтиФайлы(ПутьКНовому).Количество()=0 Тогда
			Сообщить("Ошибка конвертации картинки по адресу: "+ПутьКИсходнику+" Проверьте целосность и тип, имя файла.",СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Ответ=Неопределено И Не ПустаяСтрока(Вотермарка) И ЗначениеЗаполнено(НастройкаСайта) И НастройкаСайта.НакладыватьWaterMark Тогда
		composite = КаталогПрограммы()+"ImageMagickObject\composite.exe";
		Файлcomposite  = Новый Файл(composite);
		Если Файлcomposite.Существует() Тогда
			
			Если Вотермарка="Средняя" Тогда
				ДвоичныеДанныйМарки = НастройкаСайта.WatermarkСред.Получить();
			Иначе
				ДвоичныеДанныйМарки = НастройкаСайта.Watermark.Получить();
			КонецЕсли;	
			Если ТипЗнч(ДвоичныеДанныйМарки) <> Тип("ДвоичныеДанные") Тогда
				Сообщить("Не установлен файл Watermark.",СтатусСообщения.Важное);
				возврат;
			КонецЕсли;
			ИмяВременногоФайлаМарки = КаталогПрограммы()+"ImageMagickObject\Watermark.png";			
			ДвоичныеДанныйМарки.Записать(ИмяВременногоФайлаМарки);
			
			Исходник =  КаталогПрограммы()+"ImageMagickObject\ImageWatermark.png";
			ФайлНовый  = Новый ДвоичныеДанные(ПутьКНовому);
			ФайлНовый.Записать(Исходник);
			
			ТекстПриложения = """"+composite + """ -dissolve "+НастройкаСайта.ПрозрачностьМарки+" -gravity "+НастройкаСайта.РасположениеМарки+" """+ИмяВременногоФайлаМарки+""" """+Исходник+""" """+Исходник+"""";
			ЗапуститьПриложение(ТекстПриложения,,Истина);
			//ЗапуститьПриложение(ТекстПриложения);
			
			ФайлНовый  = Новый ДвоичныеДанные(Исходник);
			ФайлНовый.Записать(ПутьКНовому);
			
		Иначе
			Сообщить("Нет файлов компоненты обработки фотографий ("+composite+"), будет произведена попытка удалить регистрацию объекта ImageMagickObject.dll, и дальнейшая переустановка компоненты.");
			Сообщить("Если проблема останется - попробуйте вручную удалить регистрацю компоненты ImageMagickObject.dll - через команду regsvr32 /u");
			Сообщить("Скорее всего текущее местоположение файлов отличается от ожидаемого ("+composite+")");
			ЗапуститьПриложение("regsvr32 /u /s """+КаталогПрограммы()+"ImageMagickObject\ImageMagickObject.dll""",,Истина);
			Попытка
				img = Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
				ЕстьОбъект = Истина;
			Исключение	КонецПопытки;
			Если НЕ ЕстьОбъект ТОгда
				Конверт = ПолучитьИмяВременногоФайла("zip");//КаталогПрограммы();
				ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_Magic");
				ПрогаИзПамяти.Записать(Конверт);
				ФайлАрхива = Новый ЧтениеZIPФайла(Конверт); 
				ФайлАрхива.ИзвлечьВсе(КаталогПрограммы(), РежимВосстановленияПутейФайловZIP.Восстанавливать); 
				ФайлАрхива.Закрыть();
				ЗапуститьПриложение("regsvr32 /c /s """+КаталогПрограммы()+"ImageMagickObject\ImageMagickObject.dll""",,Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВысотуИШиринуКартинки(ПутьКФайлу,img) Экспорт
	
	ЕстьОбъект = Ложь;
	Ответ=Неопределено; 
	Попытка
		img =  Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
		ЕстьОбъект = Истина;   		
	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если НЕ ЕстьОбъект ТОгда
		Конверт = ПолучитьИмяВременногоФайла("zip");//КаталогПрограммы();
		ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_Magic");
		ПрогаИзПамяти.Записать(Конверт);
		ФайлАрхива = Новый ЧтениеZIPФайла(Конверт); 
		ФайлАрхива.ИзвлечьВсе(КаталогПрограммы(), РежимВосстановленияПутейФайловZIP.Восстанавливать); 
		ФайлАрхива.Закрыть();
		ЗапуститьПриложение("regsvr32 /c /s """+КаталогПрограммы()+"ImageMagickObject\ImageMagickObject.dll""",,Истина);
		
		Попытка
			img = Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
			ЕстьОбъект = Истина;
		Исключение	
			возврат Неопределено;	
		КонецПопытки;
	КонецЕсли;
	Высота = 0;
	Ширина = 0;
	
	//Имя = ПолучитьИмяВременногоФайла();
	//Файл =  ПолучитьИзВременногоХранилища(ПутьКИсходнику);
	//Файл.Записать(Имя);
	
	
	Если ЕстьОбъект Тогда
		ПОпытка
			Высота = Число(img.identify("-format","%h",ПутьКФайлу));
			Ширина = Число(img.identify("-format","%w",ПутьКФайлу));
		Исключение
			Высота = 0;
			Ширина = 0;
		КонецПопытки;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ВЫсота",ВЫсота);
	СтруктураВозврата.Вставить("Ширина",Ширина);
	//Возврат СтруктураВозврата;
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ЗаполнениеСвойствСайтаИзРеквизитовПриСозданииПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Отказ Тогда возврат; КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.ЗаполнениеСвойствСайтаИзРеквизитовПриСозданииПриЗаписи(Источник, Отказ);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		Номенклатура = Источник.Владелец;
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
			Номенклатура = Источник.Ссылка;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_НастройкиСайтов.Ссылка
		|ИЗ
		|	Справочник.CMS1C_НастройкиСайтов КАК CMS1C_НастройкиСайтов
		|ГДЕ
		|	CMS1C_НастройкиСайтов.СистемаУправленияСайтом = &СистемаУправленияСайтом
		|	И CMS1C_НастройкиСайтов.СинхронизироватьСвойстваДопДанныхИзСвойствИРеквизитовНоменклатуры1С";
		Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
		
		//ВыборкаНастроек = Справочники.CMS1C_НастройкиСайтов.Выбрать(,,Новый Структура("СинхронизироватьСвойстваДопДанныхИзСвойствИРеквизитовНоменклатуры1С",Истина));		
		ВыборкаНастроек = запрос.Выполнить().Выбрать();
		
		Пока ВыборкаНастроек.Следующий() Цикл
			Настройка = ВыборкаНастроек.Ссылка;
			ВыборкаСвойств = ПланыВидовХарактеристик.CMS1C_СвойстваОбъектов.Выбрать(,Новый Структура("НастройкаСайта",Настройка));
			Пока ВыборкаСвойств.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаСвойств.РеквизитНоменклатуры) Тогда
					продолжить;
				КонецЕсли;
				
				НаборЗаписейСайта = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
				НаборЗаписейСайта.ДополнительныеСвойства.Вставить("ЗаписьСвойстваСайтаЗависимо");
				ОбъектСайта = Справочники.CMS1C_Номенклатура.НайтиПоРеквизиту("НастройкаСайта",Настройка,,Номенклатура);
				Если ОбъектСайта.Пустая() Тогда 
					Продолжить;
				КонецЕсли;
				//
				НаборЗаписейСайта.Отбор.Объект.Установить(ОбъектСайта);
				НаборЗаписейСайта.Отбор.НастройкаСайта.Установить(Настройка);
				НаборЗаписейСайта.Прочитать();
				ЗаписиНаУдаление = Новый Массив;
				Для каждого ЗаписьНабора из НаборЗаписейСайта Цикл
					Если ЗаписьНабора.Свойство = ВыборкаСвойств.Ссылка Тогда
						ЗаписиНаУдаление.Добавить(ЗаписьНабора);
					КонецЕсли;
				КонецЦикла;
				Для каждого ЗаписьНаУдаление из ЗаписиНаУдаление Цикл
					НаборЗаписейСайта.Удалить(ЗаписьНаУдаление);				
				КонецЦикла;            
				
				
				Значение = ОбъектСайта.Владелец[ВыборкаСвойств.РеквизитНоменклатуры];
				Если Значение = 0 Тогда
					Попытка
						НаборЗаписейСайта.ДополнительныеСвойства.Вставить("НадоЗаписать");
						НаборЗаписейСайта.Записать();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Значение) ТОгда
					Если ВыборкаСвойств.Ссылка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов")) Тогда
						Значение = НайтиИлиСоздатьЗначениеСвойстваОбъекта(ВыборкаСвойств.Ссылка,Значение);
					КонецЕсли;
					УстановитьЗначениеСвойстваСайта(Номенклатура,ВыборкаСвойств.Ссылка,Значение,Номенклатура,НаборЗаписейСайта);
				КонецЕсли;
				Попытка 
					НаборЗаписейСайта.ДополнительныеСвойства.Вставить("НадоЗаписать");
					НаборЗаписейСайта.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьОписанияВДопДанныеПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Источник.ОсновноеИзображение) Тогда
		ЗаполнениеКартинкиДопДанныхИзСпрНоменклатураПриЗаписи(Источник.ОсновноеИзображение.ПолучитьОбъект(), Ложь);
	Конецесли;
	
	Если ПустаяСтрока(Источник.ДополнительноеОписаниеНоменклатуры) или Источник.ДополнительныеСвойства.Свойство("Новый")  или Источник.ДополнительныеСвойства.Свойство("НеКонтролироватьКатегориюСайта") Тогда
		возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.ЗаписьОписанияВДопДанныеПриЗаписи(Источник, Отказ);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_Номенклатура.Ссылка
		|ИЗ
		|	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
		|ГДЕ
		|	CMS1C_Номенклатура.НастройкаСайта.СистемаУправленияСайтом = &СистемаУправленияСайтом
		|	И CMS1C_Номенклатура.Владелец = &Владелец";
		Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
		Запрос.УстановитьПараметр("Владелец",Источник.Ссылка);
		
		//ВыборкаОписаний = Справочники.CMS1C_Номенклатура.Выбрать(,Источник.Ссылка);	
		ВыборкаОписаний = Запрос.Выполнить().Выбрать();
		Пока ВыборкаОписаний.Следующий() Цикл		
			ДопОписание = ВыборкаОписаний.Ссылка;
			ДополнительноеОписаниеНоменклатуры = Источник.ДополнительноеОписаниеНоменклатуры;
			//ДополнительноеОписаниеНоменклатуры = СтрЗаменить(Источник.ДополнительноеОписаниеНоменклатуры,Символы.ВК,"<br>");
			//ДополнительноеОписаниеНоменклатуры = СтрЗаменить(ДополнительноеОписаниеНоменклатуры,Символы.ПС,"<p>");
			
			Если СокрЛП(ДопОписание.Описание)<>СокрЛП(ДополнительноеОписаниеНоменклатуры) Тогда
				ДопОписаниеОбект = ДопОписание.ПолучитьОбъект();	
				ДопОписаниеОбект.Описание =ДополнительноеОписаниеНоменклатуры; 
				Попытка
					ДопОписаниеОбект.Записать();
				Исключение
					Сообщить("Не удалось перезаписать описание для доп. данных вебасист."+ ОписаниеОшибки(), СтатусСообщения.Внимание);
				КонецПопытки;
				
			КонецЕсли;		
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

Процедура СинхронизироватьСвойства1СИзСвойствСайтаПриЗаписи(Источник, Отказ, Замещение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Отказ Тогда возврат; КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.СинхронизироватьСвойства1СИзСвойствСайтаПриЗаписи(Источник, Отказ,Замещение);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		
		Если НЕ Источник.Количество() Тогда
			Если ЗначениеЗаполнено(Источник.Отбор.Значение.Значение)
				И ЗначениеЗаполнено(Источник.Отбор.Свойство.значение)
				И ЗначениеЗаполнено(Источник.Отбор.Свойство.значение.СвойствоНоменклатуры)
				И ЗначениеЗаполнено(Источник.Отбор.Номенклатура.значение)
				И Не Источник.Отбор.Свойство.Значение.ЭтоХарактеристика
				Тогда
				ТекНОменклатура = Источник.Отбор.Номенклатура.значение;
				ТекСвойство = Источник.Отбор.Свойство.значение.СвойствоНоменклатуры;
				НЗ = РЕгистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
				НЗ.Отбор.Объект.Установить(ТекНОменклатура);
				НЗ.Отбор.Свойство.Установить(ТекСвойство);
				НЗ.Записать();
			Конецесли;
			возврат;
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоКопированиеСвойствДопДанныхДляДругихСайтов") Тогда
			возврат;
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ЗаписьСвойстваСайтаЗависимо") Тогда
			Источник.ДополнительныеСвойства.Удалить("ЗаписьСвойстваСайтаЗависимо");
			возврат;			
		КонецЕсли;
		
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
			возврат;	
		КонецЕсли;
		
		Если Источник.Отбор.Найти("Объект")=Неопределено
			или Не ЗначениеЗаполнено(Источник.Отбор.Объект.Значение)
			или Источник.Отбор.Найти("Свойство")=Неопределено
			Тогда
			возврат;
		КонецЕсли;
		
		Если Источник.Отбор.Свойство.Значение.Пустая() Тогда
			Если не Источник.ДополнительныеСвойства.Свойство("ПерезаписыватьСвойства1С") Тогда
				Возврат;
			Конецесли;
		Конецесли;
		
		Объект = Источник.Отбор.Объект.Значение;
		
		ЭтоДопДанные = Ложь;
		ЭтоВарианты = Ложь;
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.CMS1C_Номенклатура") Тогда
			ЭтоДопДанные = истина;
		Иначе
			ЭтоВарианты = Истина;
		КОнецесли;
		
		Если ЭтоДопДанные Тогда
			СинхронизироватьСвойстваНоменклатурыИзСвойствДопДанных(Источник);
		ИначеЕсли ЭтоВарианты Тогда
			СинхронизироватьСвойстваХарактеристикИзСвойствВариантов(Источник,Объект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура КопированиеИзмененийНаДругиеСайтыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоКопированиеДопДанныхДляДругихСайтов") Тогда
		возврат;
	КонецЕсли;
	
	МетаданныеДопДанных = Метаданные.Справочники.CMS1C_Номенклатура;
	ИсточникСсылка  =Источник.Ссылка;
	
	РеквизитыДляКопирования = Новый Массив;
	
	
	Для каждого Реквизит из МетаданныеДопДанных.Реквизиты Цикл
		Если Реквизит.Имя = "НастройкаСайта" Тогда
			продолжить;
		КонецЕсли;
		
		Если Реквизит.Имя = "Категория" Тогда
			продолжить;
		КонецЕсли;
		
		Если ИсточникСсылка[Реквизит.Имя] <> Источник[Реквизит.Имя] Тогда			
			РеквизитыДляКопирования.Добавить(Реквизит.Имя);
		КонецЕсли;
		
	КонецЦикла; 	
	НужноПерезаписыватьТЧ = Ложь;	
	Для каждого ТЧ из МетаданныеДопДанных.ТабличныеЧасти Цикл
		
		Если ИсточникСсылка[ТЧ.Имя].Количество() <> Источник[ТЧ.Имя].Количество() Тогда
			
			НужноПерезаписыватьТЧ = Истина;
			Прервать;	
			
		КонецЕсли;
		
		Для каждого Строка из ИсточникСсылка[ТЧ.Имя] Цикл
			СтрокаИсточника = Источник[ТЧ.Имя].Найти(Строка.НомерСтроки,"НомерСтроки");
			Для каждого Реквизит из ТЧ.Реквизиты Цикл
				Источник[ТЧ.Имя].Найти(Строка.НомерСтроки);
				Если Строка[Реквизит.Имя] <> СтрокаИсточника[Реквизит.Имя] Тогда			
					НужноПерезаписыватьТЧ = Истина;
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;
			
			Если НужноПерезаписыватьТЧ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
	Если НЕ РеквизитыДляКопирования.Количество() и НЕ НужноПерезаписыватьТЧ Тогда
		возврат;
	КонецЕсли;
	
	ВыборкаДопДанных = Справочники.CMS1C_Номенклатура.Выбрать(,Источник.Владелец);	
	
	Пока ВыборкаДопДанных.Следующий() Цикл		
		
		Если ВыборкаДопДанных.Ссылка = Источник.Ссылка или НЕ ВыборкаДопДанных.НастройкаСайта.ИмпортироватьИзмененияДругихСайтов Тогда
			продолжить;
		КонецЕсли;
		
		ДопДанныеДляПерезаписи = ВыборкаДопДанных.Ссылка.ПолучитьОбъект();
		Для каждого ИмяРеквизита из РеквизитыДляКопирования Цикл
			ДопДанныеДляПерезаписи[ИмяРеквизита] = Источник[ИмяРеквизита];
		КонецЦикла;
		
		Для каждого ТЧ из МетаданныеДопДанных.ТабличныеЧасти Цикл
			
			ДопДанныеДляПерезаписи[ТЧ.Имя].Загрузить(Источник[ТЧ.Имя].Выгрузить());
			
		КонецЦикла;
		
		ДопДанныеДляПерезаписи.ДополнительныеСвойства.Вставить("ЭтоКопированиеДопДанныхДляДругихСайтов");
		ДопДанныеДляПерезаписи.Записать();
		
	КонецЦикла;	
	
	
	
КонецПроцедуры

Процедура КопированиеЗначенийСвойствНаДругиеСайтыПриЗаписи(Источник, Отказ, Замещение) Экспорт
	Возврат;
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоКопированиеСвойствДопДанныхДляДругихСайтов") Тогда
		возврат;
	КонецЕсли;
	
	
	ТЗОбъектов = Источник.Выгрузить();
	КопияТзОбъектов = ТЗОбъектов.Скопировать();
	ТЗОбъектов.Свернуть("Объект,Свойство");
	
	Для каждого Строка из ТЗОбъектов Цикл
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Объект",Строка.Объект);
		СтруктураПоиска.Вставить("Свойство",Строка.свойство);
		НовыйНабор = КопияТзОбъектов.Скопировать(СтруктураПоиска);
		//НовыйНабор = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		//НовыйНабор.Отбор.Объект.Установить(Строка.Объект);
		//НовыйНабор.Отбор.Свойство.Установить(Строка.Свойство);
		//НовыйНабор.Прочитать();
		Если НЕ НовыйНабор.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеСвойства = Строка.Свойство.Наименование;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CMS1C_СвойстваОбъектов.Ссылка,
		|	CMS1C_СвойстваОбъектов.Владелец КАК Владелец
		|ИЗ
		|	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
		|ГДЕ
		|	CMS1C_СвойстваОбъектов.Владелец <> &Владелец
		|	И CMS1C_СвойстваОбъектов.Наименование ПОДОБНО &Наименование";
		
		Запрос.УстановитьПараметр("Владелец", Строка.Свойство.Владелец);
		Запрос.УстановитьПараметр("Наименование", НаименованиеСвойства);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПохожихСвойств = Результат.Выбрать();
		
		Пока ВыборкаПохожихСвойств.Следующий() Цикл
			//////////////////////
			ВыборкаДопДанных = Справочники.CMS1C_Номенклатура.НайтиПоРеквизиту("НастройкаСайта",ВыборкаПохожихСвойств.Владелец,,Строка.Объект.Владелец);	
			
			Если ВыборкаДопДанных.Пустая() Тогда		
				продолжить;
			КонецЕсли;
			
			Если НЕ ВыборкаДопДанных.НастройкаСайта.ИмпортироватьИзмененияДругихСайтов Тогда
				продолжить;
			КонецЕсли;
			
			ИзменяемыйНабор = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			ИзменяемыйНабор.Отбор.Объект.Установить(ВыборкаДопДанных);
			ИзменяемыйНабор.Отбор.Свойство.Установить(ВыборкаПохожихСвойств.Ссылка);
			ИзменяемыйНабор.Отбор.НастройкаСайта.Установить(ВыборкаПохожихСвойств.Владелец);
			
			ИзменяемыйНабор.Прочитать();
			
			ИзменяемыйНабор.Очистить();
			
			Для каждого СтрокаНового из НовыйНабор Цикл
				
				МенеджерЗаписи = ИзменяемыйНабор.Добавить();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаНового);
				МенеджерЗаписи.НастройкаСайта = ВыборкаПохожихСвойств.Владелец;
				МенеджерЗаписи.Свойство =        ВыборкаПохожихСвойств.Ссылка;
				МенеджерЗаписи.Объект = ВыборкаДопДанных.Ссылка;
				
				Если ТипЗнч(СтрокаНового.Значение)=Тип("Строка") Тогда
					МенеджерЗаписи.Значение =СтрокаНового.Значение; 					
				Иначе
					НайденноеЗначениеСайта = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Строка(СтрокаНового.Значение),Ложь,,ВыборкаПохожихСвойств.Ссылка);
					Если НайденноеЗначениеСайта.Пустая() Тогда
						НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
						НовоеЗначение.Наименование = Строка(СтрокаНового.Значение);
						НовоеЗначение.Владелец = ВыборкаПохожихСвойств.Ссылка;
						НовоеЗначение.Записать();
						НайденноеЗначениеСайта = НовоеЗначение.Ссылка;
					КонецЕсли;
					МенеджерЗаписи.Значение =Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(СтрокаНового.Значение.Наименование,Ложь,,ВыборкаПохожихСвойств.Ссылка);
				КонецЕсли;	
				
			КонецЦикла;	
			
			ИзменяемыйНабор.ДополнительныеСвойства.Вставить("ЭтоКопированиеСвойствДопДанныхДляДругихСайтов");
			Попытка
				ИзменяемыйНабор.Записать(Истина);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПриПометкеНаУдалениеХарактеристикиУдалитьЗаписьИзЗначенийСвойствСайтаПередЗаписью(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	//Если характеристику пометили или сняли с пометки -- вызываем запись регистра сведений
	//при записи характеристики вызываем подписку регистра сведений
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		Если Источник.ссылка.ПометкаУдаления <> Источник.ПометкаУдаления Тогда
			Источник.ДополнительныеСвойства.Вставить("ПерезаписатьСвойстваСайта");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПометкеНаУдалениеХарактеристикиУдалитьЗаписьИзЗначенийСвойствСайтаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДОполнительныеСвойства.Свойство("ПерезаписатьСвойстваСайта") Тогда
		Движ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		Движ.Отбор.Объект.Установить(Источник.Ссылка);
		Движ.Прочитать();
		Движ.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТаблицуКатегорийСайтаДляНоменклатуры(Номенклатура,СистемаУправленияСайтом)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_Категории.НастройкаСайта,
	               |	CMS1C_Категории.ГруппаНоменклатуры,
	               |	CMS1C_Категории.АвтоматическиСоздаватьГруппы,
	               |	CMS1C_Категории.Категория,
	               |	CMS1C_Категории.ТипТоваров
	               |ИЗ
	               |	РегистрСведений.CMS1C_Категории КАК CMS1C_Категории
	               |ГДЕ
	               |	CMS1C_Категории.ГруппаНоменклатуры = &ГруппаНоменклатуры
	               |	И CMS1C_Категории.НастройкаСайта.СистемаУправленияСайтом = &СистемаУправленияСайтом";
	
	
	Если Номенклатура.ЭтоГруппа Тогда
		Запрос.УстановитьПараметр("ГруппаНоменклатуры",Номенклатура.Ссылка);
	Иначе
		Запрос.УстановитьПараметр("ГруппаНоменклатуры",Номенклатура.Родитель);
	КонецЕсли;
	Запрос.УстановитьПараметр("СистемаУправленияСайтом",СистемаУправленияСайтом);
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
КонецФУнкции

Процедура СинхронизироватьСвойстваДопДанныхИзСвойствХарактеристик1С(ОбъектСайта,Настройка,СвойствоСайта,Характеристика,Источник,НОменклатура)
	НаборЗаписейСайта = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСайта.ДополнительныеСвойства.Вставить("ЗаписьСвойстваСайтаЗависимо");
	
	НаборЗаписейСайта.Отбор.Объект.Установить(ОбъектСайта);		
	НаборЗаписейСайта.Отбор.НастройкаСайта.Установить(Настройка);
	
	НаборЗаписейСайта.Отбор.Свойство.Установить(СвойствоСайта);
	НаборЗаписейСайта.Прочитать();
	
	СвойствоНоменклатуры = СвойствоСайта.СвойствоНоменклатуры;
	Если СвойствоНоменклатуры.Пустая() Тогда
		Возврат;
	Конецесли;
	
	Если СвойствоНоменклатуры.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросТекЗначенийСвойств = Новый Запрос;
	ЗапросТекЗначенийСвойств.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК ЗначениеНеобработанное
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления) КАК ВложенныйЗапрос
	|		ПО ЗначенияСвойствОбъектов.Объект = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	ЗапросТекЗначенийСвойств.УстановитьПараметр("Номенклатура", Характеристика.Владелец);
	//ЗапросТекЗначенийСвойств.УстановитьПараметр("Значение", Строка(ЗаписьНабора.Значение));
	ЗапросТекЗначенийСвойств.УстановитьПараметр("Свойство", СвойствоНоменклатуры);
	
	Результат = ЗапросТекЗначенийСвойств.Выполнить();
	
	ТЗДетальныеЗаписи = Результат.Выгрузить();
	
	ДЛя Каждого СтрТз из ТЗДетальныеЗаписи Цикл
		СтрТз.Значение = НРЕГ(СТрТз.Значение);
	КонецЦикла;
	
	ЗаписиНаУдаление = Новый Массив;
	Для каждого ЗаписьНабора из НаборЗаписейСайта Цикл
		СтрокаЗначения = ТЗДетальныеЗаписи.Найти(Строка(НРЕГ(ЗаписьНабора.Значение)),"Значение");
		
		Если СтрокаЗначения=Неопределено Тогда
			ЗаписиНаУдаление.Добавить(ЗаписьНабора);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаписьНаУдаление из ЗаписиНаУдаление Цикл
		НаборЗаписейСайта.Удалить(ЗаписьНаУдаление);				
	КонецЦикла;   
	
	Если НЕ СвойствоСайта.Пустая()  Тогда
		НаборЗаписейСвСтвХарк = Источник;
		
		Для каждого СтрокаНабора из НаборЗаписейСвСтвХарк Цикл
			Если СтрокаНабора.Свойство <> СвойствоНоменклатуры Тогда
				Продолжить;
			КонецЕсли;
			
			НайденноеЗначениеСайта = НайтиИлиСоздатьЗначениеСвойстваОбъекта(СвойствоСайта,СтрокаНабора.Значение);
			//НайденноеЗначениеСайта = Справочники.CMS1C_ЗначенияСвойствОбъектов.НайтиПоНаименованию(Строка(СтрокаНабора.Значение),Истина,,СвойствоСайта);
			//Если НайденноеЗначениеСайта.Пустая() Тогда
			//	НовоеЗначение = Справочники.CMS1C_ЗначенияСвойствОбъектов.СоздатьЭлемент();
			//	НовоеЗначение.Наименование = Строка(СтрокаНабора.Значение);
			//	НовоеЗначение.Владелец = СвойствоСайта;
			//	НовоеЗначение.Записать();
			//	НайденноеЗначениеСайта = НовоеЗначение.Ссылка;
			//КонецЕсли;
			//НайдХарактеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(СокрЛП(НайденноеЗначениеСайта),Истина,,Характеристика.Владелец);
			Если НЕ Характеристика.ПометкаУдаления Тогда
				УстановитьЗначениеСвойстваСайта(Номенклатура,СвойствоСайта,НайденноеЗначениеСайта,Характеристика.Владелец,НаборЗаписейСайта);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка 
		ТЗ = НаборЗаписейСайта.Выгрузить();
		ТЗ.Свернуть("Номенклатура,Объект,Свойство,НастройкаСайта,Значение","ПоУмолчанию");
		
		Если ТЗ.Количество() Тогда
			Если СвойствоСайта.ЭтоХарактеристика
				И СвойствоСайта.УстанавливатьХарактеристикуПоУмолчанию Тогда
				СтруктураПоиска = новый Структура();
				СтруктураПоиска.Вставить("ПоУмолчанию",Истина);
				МасНайд= тз.НайтиСтроки(СтруктураПоиска);
				Если МасНайд.Количество() = 0 Тогда
					тз.Колонки.Добавить("Сортировка");
					Для Каждого Стртз из тз Цикл
						СтрТз.Сортировка = СтрТз.Значение.Сортировка;
					КонецЦикла;
					тз.Сортировать("Сортировка");
					тз[0].ПоУмолчанию = Истина;
				ИначеЕсли МасНайд.Количество() >1 Тогда
					НС = 0;
					Для Каждого ЭлМасНайд из МасНайд Цикл
						Если НС = 0 Тогда
							НС = НС + 1;
							Продолжить;
						КонецЕсли;
						ЭлМасНайд.ПоУмолчанию = Ложь;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		НаборЗаписейСайта.Загрузить(ТЗ);
		НаборЗаписейСайта.ДополнительныеСвойства.Вставить("НадоЗаписать");
		НаборЗаписейСайта.Записать();
	Исключение
		Сообщить("Ошибка при заполеннии свойств сайта из характеристик номенклатуры "+Характеристика.Владелец,СтатусСообщения.Информация);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура СинхронизироватьСвойстваВариантовИзСвойствХарактеристик1С(ВариантНоменклатуры,Настройка,СвойствоСайта,Характеристика,Источник,Номенклатура)
	НаборЗаписейСайта = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСайта.ДополнительныеСвойства.Вставить("ЗаписьСвойстваСайтаЗависимо");
	
	НаборЗаписейСайта.Отбор.Объект.Установить(ВариантНоменклатуры);		
	НаборЗаписейСайта.Отбор.НастройкаСайта.Установить(Настройка);
	
	НаборЗаписейСайта.Отбор.Свойство.Установить(СвойствоСайта);
	НаборЗаписейСайта.Прочитать();
	
	ЗапросСвойствоХар = Новый Запрос;
	ЗапросСвойствоХар.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры)
	|	И ВЫБОР
	|			КОГДА &ВыбраноСвойство
	|				ТОГДА СвойстваОбъектов.Ссылка = &Свойство
	|			ИНАЧЕ СвойстваОбъектов.Наименование = &Наименование
	|		КОНЕЦ";
	ЗапросСвойствоХар.УстановитьПараметр("Наименование",СокрЛП(СвойствоСайта.Наименование));
	ЗапросСвойствоХар.УстановитьПараметр("Свойство",СвойствоСайта.СвойствоНоменклатуры);
	ЗапросСвойствоХар.УстановитьПараметр("ВыбраноСвойство",ЗначениеЗаполнено(СвойствоСайта.СвойствоНоменклатуры));
	Результат = ЗапросСвойствоХар.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаСвойствоХар = Результат.Выбрать();
	ВыборкаСвойствоХар.Следующий();
	СвойствоХар = ВыборкаСвойствоХар.Ссылка;
	Если СвойствоХар.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросТекЗначенийСвойств = Новый Запрос;
	ЗапросТекЗначенийСвойств.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК ЗначениеНеобработанное
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Объект = &Объект";
	
	ЗапросТекЗначенийСвойств.УстановитьПараметр("Номенклатура", Характеристика.Владелец);
	//ЗапросТекЗначенийСвойств.УстановитьПараметр("Значение", Строка(ЗаписьНабора.Значение));
	ЗапросТекЗначенийСвойств.УстановитьПараметр("Свойство", СвойствоХар);
	ЗапросТекЗначенийСвойств.УстановитьПараметр("Объект", Характеристика);
	
	Результат = ЗапросТекЗначенийСвойств.Выполнить();
	
	ТЗДетальныеЗаписи = Результат.Выгрузить();
	
	ДЛя Каждого СтрТз из ТЗДетальныеЗаписи Цикл
		СтрТз.Значение = НРЕГ(СТрТз.Значение);
	КонецЦикла;
	
	ЗаписиНаУдаление = Новый Массив;
	Для каждого ЗаписьНабора из НаборЗаписейСайта Цикл
		СтрокаЗначения = ТЗДетальныеЗаписи.Найти(Строка(НРЕГ(ЗаписьНабора.Значение)),"Значение");
		
		Если СтрокаЗначения=Неопределено Тогда
			ЗаписиНаУдаление.Добавить(ЗаписьНабора);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаписьНаУдаление из ЗаписиНаУдаление Цикл
		НаборЗаписейСайта.Удалить(ЗаписьНаУдаление);				
	КонецЦикла;   
	
	Если НЕ СвойствоСайта.Пустая()  Тогда
		НаборЗаписейСвСтвХарк = Источник;
		
		Для каждого СтрокаНабора из НаборЗаписейСвСтвХарк Цикл
			Если СтрокаНабора.Свойство <> СвойствоХар Тогда
				Продолжить;
			КонецЕсли;
			
			НайденноеЗначениеСайта = НайтиИлиСоздатьЗначениеСвойстваОбъекта(СвойствоСайта,СтрокаНабора.Значение);
			
			НайдХарактеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(СокрЛП(НайденноеЗначениеСайта),Истина,,Характеристика.Владелец);
			Если НЕ НайдХарактеристика.ПометкаУдаления Тогда
				УстановитьЗначениеСвойстваСайта(Номенклатура,СвойствоСайта,НайденноеЗначениеСайта,Характеристика.Владелец,НаборЗаписейСайта);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка 
		ТЗ = НаборЗаписейСайта.Выгрузить();
		ТЗ.Свернуть("Номенклатура,Объект,Свойство,НастройкаСайта,Значение");
		НаборЗаписейСайта.Загрузить(ТЗ);
		НаборЗаписейСайта.ДополнительныеСвойства.Вставить("НадоЗаписать");
		НаборЗаписейСайта.Записать();
	Исключение
		Сообщить("Ошибка при заполеннии свойств сайта из характеристик номенклатуры "+Характеристика.Владелец,СтатусСообщения.Информация);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура СинхронизироватьСвойстваНоменклатурыИзСвойствДопДанных(Источник)
	
	НастройкаСайта = Источник.Отбор.НастройкаСайта.Значение;
	
	ПоНастройкеСайтаИспользуютсяВариантыНоменклатуры = ПолучитьЗначениеФункциональнойОпции(НастройкаСайта.СистемаУправленияСайтом,"ИспользоватьВариантыНоменклатуры");
	
	Если ПоНастройкеСайтаИспользуютсяВариантыНоменклатуры = Неопределено Тогда
		ПоНастройкеСайтаИспользуютсяВариантыНоменклатуры = Ложь;
	Конецесли;
	
	Если Не НастройкаСайта.СинхронизироватьСвойстваНоменклатуры1СИзСвойствДопДанных Тогда
		Возврат;
	Конецесли;
	
	Если ЗначениеЗаполнено(Источник.Отбор.Значение.Значение)
		И ЗначениеЗаполнено(Источник.Отбор.Свойство.значение)
		И ЗначениеЗаполнено(Источник.Отбор.Свойство.значение.СвойствоНоменклатуры)
		И ЗначениеЗаполнено(Источник.Отбор.Номенклатура.значение)
		И Не Источник.Отбор.Свойство.Значение.ЭтоХарактеристика
		Тогда
		ТекНОменклатура = Источник.Отбор.Номенклатура.значение;
		ТекСвойство = Источник.Отбор.Свойство.значение.СвойствоНоменклатуры;
		НЗ = РЕгистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НЗ.Отбор.Объект.Установить(ТекНОменклатура);
		НЗ.Отбор.Свойство.Установить(ТекСвойство);
		НЗ.Записать();
	Конецесли;
	
	
	
	Для каждого Запись из Источник Цикл
		Номенклатура = Запись.Номенклатура;
		Если НЕ ЗначениеЗаполнено(Запись.Значение) Тогда
			продолжить;
		КонецЕсли;
		
		СвойствоСайта = Запись.Свойство;
		СвойствоНоменклатуры = СвойствоСайта.СвойствоНоменклатуры;
		ЭтоХарактеристика = Запись.Свойство.ЭтоХарактеристика;
		
		Если СвойствоСайта = НастройкаСайта.СвойствоВес Тогда
			ЗначениеВеса = Запись.Значение.ЗначениеЧисло;
			Если ЗначениеВеса = 0 Тогда
				Продолжить;
			Конецесли;
			Если Номенклатура.ЕдиницаХраненияОстатков.Вес <> Значениевеса Тогда
				Об = Номенклатура.ЕдиницаХраненияОстатков.ПолучитьОбъект();
				Об.Вес = ЗначениеВеса;
				Об.ДополнительныеСвойства.Свойство("НадоЗаписать");
				Об.Записать();
			КонецЕсли;
			Продолжить;
		Конецесли;
		
		
		Если СвойствоНоменклатуры.Пустая() Тогда
			продолжить;				
		КонецЕсли;
		
		Если НЕ ЭтоХарактеристика Тогда
			НЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НЗ.Отбор.Объект.Установить(Номенклатура);
			НЗ.Отбор.Свойство.Установить(СвойствоНоменклатуры);
			НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
			Мен = НЗ.Добавить();
			Мен.Объект = Номенклатура;
			Мен.Свойство = СвойствоНоменклатуры;
			НовоеЗначение = СвойствоНоменклатуры.ТипЗначения.ПривестиЗначение(Запись.Значение);
			
			Если ТипЗнч(НовоеЗначение)=Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
				ЗначениеНоменклатуры = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Строка(Запись.Значение),,,СвойствоНоменклатуры);
				Если ЗначениеНоменклатуры.Пустая() Тогда
					ЗначениеНоменклатуры =  Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
					ЗначениеНоменклатуры.Наименование = ?(НовоеЗначение.Пустая(),Запись.Значение,НовоеЗначение.Наименование);
					ЗначениеНоменклатуры.Владелец = СвойствоНоменклатуры;
					ЗначениеНоменклатуры.Записать();					
				КонецЕсли;
				НовоеЗначение = ЗначениеНоменклатуры.Ссылка;
			КонецЕсли;
			
			Мен.Значение = НовоеЗначение;
			
			Попытка 
				НЗ.Записать(Истина);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Если ПоНастройкеСайтаИспользуютсяВариантыНоменклатуры Тогда
				Продолжить;
			КонецЕсли;			
			
			Если Не ЗначениеЗаполнено(СвойствоНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(Запись.Значение,Истина,,Номенклатура);
			
			Если НЕ Номенклатура.ВестиУчетПоХарактеристикам Тогда
				НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
				НоменклатураОбъект.ВестиУчетПоХарактеристикам = Истина;
				НоменклатураОбъект.ДополнительныеСвойства.Вставить("НадоЗаписать");
				НоменклатураОбъект.Записать();
			КонецЕсли;	
			
			Если Характеристика.Пустая() Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				Характеристика.Владелец = Номенклатура;
				Характеристика.Наименование = Запись.Значение;
				Характеристика.ДополнительныеСвойства.Вставить("НадоЗаписать");
				Попытка
					Характеристика.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				Характеристика = Характеристика.Ссылка;
			КонецЕсли;
			
			НЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
			НЗ.Отбор.Объект.Установить(Характеристика);
			НЗ.Отбор.Свойство.Установить(СвойствоНоменклатуры);
			Мен = Нз.Добавить();
			Мен.Объект = Характеристика;
			Мен.Свойство = СвойствоНоменклатуры;
			НовоеЗначение = Запись.Значение;
			
			Если ТипЗнч(НовоеЗначение)=Тип("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов") Тогда
				ЗначениеНоменклатуры = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Строка(Запись.Значение),Истина,,СвойствоНоменклатуры);
				Если ЗначениеНоменклатуры.Пустая() Тогда
					ЗначениеНоменклатуры =  Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
					ЗначениеНоменклатуры.Наименование = ?(НовоеЗначение.Пустая(),Запись.Значение,НовоеЗначение.Наименование);
					ЗначениеНоменклатуры.Владелец = СвойствоНоменклатуры;
					ЗначениеНоменклатуры.Записать();					
				КонецЕсли;                                  					
				НовоеЗначение = ЗначениеНоменклатуры.Ссылка;
			КонецЕсли;
			Мен.Значение = НовоеЗначение;
			Попытка 
				НЗ.Записать(Истина);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			//-
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СинхронизироватьСвойстваХарактеристикИзСвойствВариантов(Источник,ВариантНоменклатуры)
	НастройкаСайта = ВариантНоменклатуры.НастройкаСайта;
	
	Если Не НастройкаСайта.СинхронизироватьСвойстваХарактеристик1СИзСвойствВариантов Тогда
		Возврат;
	КонецЕсли;
	
	
	ХарактеристикаНоменклатуры = ВариантНоменклатуры.ХарактеристикаНоменклатуры;
	Если Не ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		Возврат;
	Конецесли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_СвойстваОбъектов.Ссылка КАК СвойствоСайта,
	|	CMS1C_СвойстваОбъектов.СвойствоНоменклатуры КАК Свойство
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
	|ГДЕ
	|	CMS1C_СвойстваОбъектов.НастройкаСайта = &НастройкаСайта
	|	И CMS1C_СвойстваОбъектов.ЭтоХарактеристика
	|	И CMS1C_СвойстваОбъектов.СвойствоНоменклатуры <> &ПустоеСвойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЗначенияСвойствОбъектов.Значение.Представление
	|ПОМЕСТИТЬ ЗначенияСвойствХарактеристикиТекущие
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &ХарактеристикаНоменклатуры
	|	И ЗначенияСвойствОбъектов.Свойство В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВсеСВойства.Свойство
	|			ИЗ
	|				ВсеСВойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта КАК НастройкаСайта,
	|	CMS1C_ЗначенияСвойствОбъектов.Номенклатура,
	|	CMS1C_ЗначенияСвойствОбъектов.Объект КАК ВариантНоменклатуры,
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство КАК СвойствоСайта,
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство.СвойствоНоменклатуры КАК Свойство,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение.Представление
	|ПОМЕСТИТЬ ЗначенияСвойствКоторыеДолжныБыть
	|ИЗ
	|	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.Объект = &ВариантНоменклатуры
	|	И CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта = &НастройкаСайта
	|	И CMS1C_ЗначенияСвойствОбъектов.Номенклатура = &Номенклатура
	|	И CMS1C_ЗначенияСвойствОбъектов.Свойство В
	|			(ВЫБРАТЬ
	|				ВсеСвойства.СвойствоСайта
	|			ИЗ
	|				ВсеСвойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствХарактеристикиТекущие.Свойство,
	|	ЗначенияСвойствХарактеристикиТекущие.Значение КАК ТекущееЗначение,
	|	ЗначенияСвойствКоторыеДолжныБыть.Значение КАК ЗначениеДолжноБыть,
	|	ЕСТЬNULL(ЗначенияСвойствХарактеристикиТекущие.ЗначениеПредставление, """") КАК ТекущееПредставлениеЗначения,
	|	ЗначенияСвойствКоторыеДолжныБыть.ЗначениеПредставление КАК ПредставлениеЗначенияДолжноБыть,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствХарактеристикиТекущие.Значение ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТекущееЗначение,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствКоторыеДолжныБыть.Значение ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьЗначениеКотороеДолжноБыть,
	|	ЗначенияСвойствКоторыеДолжныБыть.СвойствоСайта
	|ИЗ
	|	ЗначенияСвойствХарактеристикиТекущие КАК ЗначенияСвойствХарактеристикиТекущие
	|		ПОЛНОЕ СОЕДИНЕНИЕ ЗначенияСвойствКоторыеДолжныБыть КАК ЗначенияСвойствКоторыеДолжныБыть
	|		ПО ЗначенияСвойствХарактеристикиТекущие.Свойство = ЗначенияСвойствКоторыеДолжныБыть.Свойство";
	
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Вариантноменклатуры",ВариантНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура",ХарактеристикаНоменклатуры.Владелец);
	Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
	Запрос.УстановитьПараметр("ПустоеСвойство",ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка());
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНаименованияХарактеристики = "";
	
	БылиИзменения = Ложь;
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.ЕстьТекущееЗначение И Не Выб.ЕстьЗначениеКотороеДолжноБыть Тогда //Удалить из значений свойств
			Мен = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Мен.Объект = ХарактеристикаНоменклатуры;
			Мен.Свойство = Выб.Свойство;
			Мен.Удалить();
			БылиИзменения = Истина;
		Иначе //В любом случае проверяем есть или нет и записываем
			ТекущееПредставление = СокрЛП(Выб.ТекущееПредставлениеЗначения);
			ПредставлениеДолжноБыть = СокрЛП(Выб.ПредставлениеЗначенияДолжноБыть);
			
			СтрокаНаименованияХарактеристики = СтрокаНаименованияХарактеристики + ПредставлениеДолжноБыть+ ", ";
			Если ТекущееПредставление = ПредставлениеДолжноБыть Тогда
				Продолжить;
			КонецЕсли;
			
			//1 может регистр букв?
			Если НРЕГ(ТекущееПредставление) = НРЕГ(ПредставлениеДолжноБыть) Тогда
				ТекЗначениеОбъект = Выб.ТекущееЗначение.получитьОбъект();
				ТекЗначениеОбъект.Наименование = СокрЛП(ПредставлениеДолжноБыть);
				ТекЗначениеОбъект.Записать();
				БылиИзменения = Истина;
				Продолжить;
			Иначе
				СвойствоСайта = Выб.СвойствоСайта;
				Свойство = СвойствоСайта.СвойствоНоменклатуры;
				НайдЗначение = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ПредставлениеДолжноБыть,Истина,Свойство);
				Если НайдЗначение.Пустая() Тогда
					ТекЗначениеОбъект = СПравочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
					ТекЗначениеОбъект.Наименование = ПредставлениеДолжноБыть;
					ТекЗначениеОбъект.Владелец = Свойство;
					ТекЗначениеОбъект.Записать();
					НайдЗначение = ТекЗначениеОбъект.Ссылка;
				ИначеЕсли НайдЗначение.Наименование <> ПредставлениеДолжноБыть Тогда//Правим регистр букв
					ТекЗначениеОбъект = НайдЗначение.ПолучитьОбъект();
					ТекЗначениеОбъект.Наименование = ПредставлениеДолжноБыть;
					ТекЗначениеОбъект.Записать();
					НайдЗначение = ТекЗначениеОбъект.Ссылка;
				Конецесли;
				
				Если НайдЗначение = Выб.ТекущееЗначение Тогда
					Продолжить;
				КонецЕсли;
				
				БылиИзменения = Истина;
				НЗ = РегистрыСВедений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
				НЗ.Отбор.Объект.Установить(ХарактеристикаНоменклатуры);
				НЗ.Отбор.Свойство.Установить(Свойство);
				ДобСтрНЗ = НЗ.Добавить();
				ДобСтрНЗ.Объект = ХарактеристикаНоменклатуры;
				ДобСтрНЗ.Свойство = Свойство;
				ДобСтрНЗ.Значение = НайдЗначение;
				//НЗ.ОбменДанными.Загрузка = Истина;
				НЗ.Записать();
			Конецесли;
		Конецесли;
	КонецЦикла;
	
	Если БылиИзменения Тогда//Поменяем наименование характеристики
		СтрокаНаименованияХарактеристики = Лев(СтрокаНаименованияХарактеристики,СтрДлина(СтрокаНаименованияХарактеристики)-2);
		Если ХарактеристикаНоменклатуры <> СтрокаНаименованияХарактеристики Тогда
			ОбъектХарактеристика = ХарактеристикаНоменклатуры.получитьОБъект();
			ОбъектХарактеристика.Наименование = СтрокаНаименованияХарактеристики;
			//ОбъектХарактеристика.ОбменДанными.Загрузка = Истина;
			ОбъектХарактеристика.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаданиеОбменССайтомЗаказы(КодНастройки) Экспорт
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.CMS1C_НастройкиОбменаССайтом.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	ОбъектНастройки = НастройкаОбмена.ПолучитьОбъект();
	ОбъектНастройки.ЗагрузитьЗаказы(Ложь);
КонецПроцедуры

Функция НайтиИлиСоздатьЗначениеСвойстваОбъекта(СвойствоСайта,Значение) Экспорт
	//1) смотрим какой тип. Есть double -- то значение числовое должно быть
	Запрос = Новый Запрос;
	Если СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Double Тогда
		СтрокаИлиЧисло = "Число";
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ТекЗначение = Число(Значение.Наименование);
		Иначе
			ТекЗначение = Число(Значение);
		Конецесли;
		Запрос.УстановитьПараметр("Значение",ТекЗначение);
	ИначеЕсли СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension Тогда
		СтрокаИлиЧисло = "Число";
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ТекЗначение = Число(Значение.Наименование);
		Иначе
			ТекЗначение = Число(Значение);
		Конецесли;
		Запрос.УстановитьПараметр("Значение",ТекЗначение);
	ИначеЕсли СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Range Тогда
		СтрокаИлиЧисло = "Число";
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ТекЗначение = Число(Значение.Наименование);
		Иначе
			ТекЗначение = Число(Значение);
		Конецесли;
		Запрос.УстановитьПараметр("Значение",ТекЗначение);
	ИначеЕсли СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar Тогда
		СтрокаИлиЧисло = "Строка";
		Запрос.УстановитьПараметр("Значение",СокрЛП(Значение));
	ИначеЕсли СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Color Тогда
		СтрокаИлиЧисло = "Строка";
		Запрос.УстановитьПараметр("Значение",СокрЛП(Значение));
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.Ссылка
	|ИЗ
	|	Справочник.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И CMS1C_ЗначенияСвойствОбъектов.Значение"+СтрокаИлиЧисло+"= &Значение";
	
	Запрос.УстановитьПараметр("Владелец",СвойствоСайта);
	
	Если СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Range Тогда
		Запрос.УстановитьПараметр("ЗначениеДо",Значение.ЗначениеДо);
		Запрос.Текст = Запрос.Текст + "
		|	И CMS1C_ЗначенияСвойствОбъектов.ЗначениеДо = &ЗначениеДо";
	КонецЕсли;
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Ссылка;
	Конецесли;
	
	Об = Справочники.CMS1C_ЗначенияСвойствОбъектов.СоздатьЭлемент();
	Об.Владелец = СвойствоСайта;
	Если СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Double Тогда
		Об.ЗначениеЧисло = Число(Значение);
		Об.Наименование = Об.ЗначениеЧисло;
	ИначеЕсли СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar Тогда
		Об.ЗначениеСтрока = СокрЛП(Значение);
		Об.Наименование = Об.ЗначениеСтрока;
	ИначеЕсли СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension Тогда
		Об.ЗначениеЧисло = Число(Значение);
		Об.Наименование = Об.ЗначениеЧисло;
	ИначеЕсли СвойствоСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Color Тогда
		Об.ЗначениеСтрока = СокрЛП(Значение);
		Об.Наименование = Об.ЗначениеСтрока;
	КонецЕсли;
	Об.Записать();
	Возврат Об.Ссылка;
КонецФУнкции

Функция НайтиИлиСоздатьЗначениеАттрибутаОбъекта(АттрибутСайта,Значение) Экспорт
	//1) смотрим какой тип. Есть double -- то значение числовое должно быть
	Запрос = Новый Запрос;
	Если АттрибутСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Double Тогда
		СтрокаИлиЧисло = "Число";
		Запрос.УстановитьПараметр("Значение",Число(Значение));
	ИначеЕсли АттрибутСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar Тогда
		СтрокаИлиЧисло = "Строка";
		Запрос.УстановитьПараметр("Значение",СокрЛП(Значение));
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_ЗначенияАттрибутовОбъектов.Ссылка
	|ИЗ
	|	Справочник.CMS1C_ЗначенияАттрибутовОбъектов КАК CMS1C_ЗначенияАттрибутовОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияАттрибутовОбъектов.Владелец = &Владелец
	|	И CMS1C_ЗначенияАттрибутовОбъектов.Значение"+СтрокаИлиЧисло+"= &Значение";
	
	Запрос.УстановитьПараметр("Владелец",АттрибутСайта);
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Ссылка;
	Конецесли;
	
	Об = Справочники.CMS1C_ЗначенияАттрибутовОбъектов.СоздатьЭлемент();
	Об.Владелец = АттрибутСайта;
	Если АттрибутСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Double Тогда
		Об.ЗначениеЧисло = Число(Значение);
		Об.Наименование = Об.ЗначениеЧисло;
	ИначеЕсли АттрибутСайта.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar Тогда
		Об.ЗначениеСтрока = СокрЛП(Значение);
		Об.Наименование = Об.ЗначениеСтрока;
	Конецесли;
	Об.Записать();
	Возврат Об.Ссылка;
КонецФУнкции

Функция ПолучитьМассивСистемУправленияСайтами()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CMS1C_НастройкиСайтов.СистемаУправленияСайтом
	|ИЗ
	|	Справочник.CMS1C_НастройкиСайтов КАК CMS1C_НастройкиСайтов
	|ГДЕ
	|	НЕ CMS1C_НастройкиСайтов.ПометкаУдаления";
	Массив = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СистемаУправленияСайтом");
	Возврат Массив;
КонецФункции

Процедура ПриКопированииСправочниковПриКопировании(Источник, ОбъектКопирования) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Источник.ID = 0;
КонецПроцедуры

Процедура ПроверкаУникальностиIDПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ID = 0 Тогда
		Возврат;
	Конецесли;
	
	
	
	Если УОбъектаIDНеуникальный(Источник,Источник.ID) Тогда
		Отказ = Истина;
		ИмяОбъектаМетаданных = Источник.Метаданные().Имя;
		Сообщить("У объекта "+ИмяОбъектаМетаданных+" "+Источник+" обнаружены дубли уникальных кодов ID "+Источник.ID);
	Конецесли;
КонецПроцедуры
                                       
Функция УОбъектаIDНеуникальный(Источник,ID) Экспорт
	
	ИмяОбъектаМетаданных = Источник.Метаданные().Имя;
	Если Метаданные.Справочники.Найти(ИмяОбъектаМетаданных) <> Неопределено Тогда
		НазваниеОбъектаМетаданных = "Справочник";
	Иначе
		НазваниеОбъектаМетаданных = "ПланВидовХарактеристик";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Если ИмяОбъектаМетаданных = "CMS1C_ЗначенияСвойствОбъектов" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	CMS1C_ЗначенияСвойствОбъектов.Ссылка
		               |ИЗ
		               |	Справочник.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
		               |ГДЕ
		               |	CMS1C_ЗначенияСвойствОбъектов.ID = &ID
		               |	И CMS1C_ЗначенияСвойствОбъектов.Ссылка <> &Ссылка
		               |	И CMS1C_ЗначенияСвойствОбъектов.Владелец.ТаблицаДляСвойства = &ТаблицаДляСвойства
		               |	И CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта = &НастройкаСайта";
		Запрос.УстановитьПараметр("ТаблицаДляСвойства",Источник.Владелец.ТаблицаДляСвойства);
		Запрос.УстановитьПараметр("НастройкаСайта",Источник.НастройкаСайта);
	Иначе
		Если Источник.Метаданные().Реквизиты.Найти("НастройкаСайта")<> Неопределено Тогда
			ИмяРеквизитаНастройкаСайта = "НастройкаСайта";
		Иначе
			ИмяРеквизитаНастройкаСайта = "Владелец";
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ТекСправочник.Ссылка
		|ИЗ
		|	"+НазваниеОбъектаМетаданных+"."+ИмяОбъектаМетаданных+" КАК ТекСправочник
		|ГДЕ
		|	ТекСправочник.ID = &ID
		|	И ТекСправочник."+ИмяРеквизитаНастройкаСайта+" = &НастройкаСайта
		|	И ТекСправочник.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("НастройкаСайта",Источник[ИмяРеквизитаНастройкаСайта]);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ID",ID);
	Запрос.УстановитьПараметр("Ссылка",Источник.ссылка);
	выб = запрос.Выполнить().Выбрать();
	Если Не Выб.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции


Процедура УдалитьВариантыНоменклатурыБезПривязокКХарактеристикамПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ВестиУчетПоХарактеристикам Тогда
		Возврат;
	Конецесли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") тогда
		Возврат;
	КонецЕсли;
	
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.УдалитьВариантыНоменклатурыБезПривязокКХарактеристикамПриЗаписи(Источник, Отказ);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	CMS1C_ВариантыНоменклатуры.Ссылка,
		               |	CMS1C_ВариантыНоменклатуры.Владелец
		               |ИЗ
		               |	Справочник.CMS1C_ВариантыНоменклатуры КАК CMS1C_ВариантыНоменклатуры
		               |ГДЕ
		               |	CMS1C_ВариантыНоменклатуры.Владелец.Владелец = &Номенклатура
		               |	И CMS1C_ВариантыНоменклатуры.НастройкаСайта.ЕслиУНоменклатурыИспользуетсяВедениеУчетаПоДопХарактеристикамУдалятьВариантыНоменклатурыБезПривязкиКХарактеристикам
		               |	И CMS1C_ВариантыНоменклатуры.НастройкаСайта.СоздаватьВариантыНоменклатурыИзХарактеристикНоменклатуры
		               |	И CMS1C_ВариантыНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		               |	И CMS1C_ВариантыНоменклатуры.НастройкаСайта.СистемаУправленияСайтом = &СистемаУправленияСайтом";
		Запрос.УстановитьПараметр("Номенклатура",Источник.Ссылка);
		Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
		Выб = Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Владелец = Выб.Владелец;
			
			Об = Выб.Ссылка.ПолучитьОбъект();
			Об.удалить();
			
			Если Не ЗначениеЗаполнено(Владелец.ОсновнойВариант)
				ИЛИ Не ЗначениеЗаполнено(Владелец.ОсновнойВариант.Код) Тогда
				Об = Владелец.получитьОбъект();
				Об.УстановитьОсновнойВариант();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура CMS1C_ПередУдалениемЗаписатьIDУдаленногоОбъектаПередУдалением(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.ID) Тогда
		Возврат;
	КонецЕсли;
	
	Мен = РегистрыСведений.CMS1C_УдаленныеОбъекты.СоздатьМенеджерЗаписи();
	
	ТекМетаданные = Источник.Метаданные();
	Если Метаданные.Справочники.Найти(ТекМетаданные.Имя) =ТекМетаданные Тогда
		ТипОбъекта = "Справочники";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ТекМетаданные.Имя) = ТекМетаданные Тогда
		ТипОбъекта = "ПланыВидовХарактеристик";
	Иначе
		Сообщить("Не найдены метаданные объекта "+ТекМетаданные);
		Возврат;
	КонецЕсли;
	
	Если ТекМетаданные.Реквизиты.Найти("НастройкаСайта") <> Неопределено Тогда
		ИмяРеквизитаНастройкаСайта = "НастройкаСайта";
	ИначеЕсли ТекМетаданные.Владельцы.Содержит(Метаданные.Справочники.CMS1C_НастройкиСайтов) Тогда
		ИмяРеквизитаНастройкаСайта = "Владелец";
	
	Иначе
		Сообщить("Не найдена настройка сайта у объекта "+ТекМетаданные);
		Возврат;
	Конецесли;
	
	Мен.НастройкаСайта = Источник[ИмяРеквизитаНастройкаСайта];
	Мен.ТипОбъекта = ТипОбъекта;
	Мен.ВидОбъекта = ТекМетаданные.Имя;
	Мен.ID = Источник.ID;
	Мен.Записать();
КонецПроцедуры

Процедура CMS1C_ЗарегистрироватьИзмененияДляУзловОбменаПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьИзменения") Тогда//Когда выгрузили на сайт справочник не надо его ещё раз регить
		Возврат;
	КонецЕсли;
	
	МассивУзлов = Новый Массив();
	Если ТипЗнч(Источник) = ТИп("СправочникОбъект.CMS1C_Номенклатура") Тогда
		запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбменаТоварами
		|ИЗ
		|	Справочник.CMS1C_НастройкиОбменаССайтом КАК CMS1C_НастройкиОбменаССайтом
		|ГДЕ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбменаТоварами <> ЗНАЧЕНИЕ(ПланОбмена.ОбменССайтомТоварами.ПустаяСсылка)
		|	И CMS1C_НастройкиОбменаССайтом.Владелец = &НастройкаСайта";
		Запрос.УстановитьПараметр("НастройкаСайта",Источник.НастройкаСайта);
		Выб = Запрос.Выполнить().Выбрать();
		Пока выб.Следующий() Цикл
			МассивУзлов.Добавить(Выб.УзелОбменаТоварами);
		КонецЦикла;
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник.Владелец);
	ИначеЕсли ТИпЗнч(Источник) = Тип("СправочникОбъект.CMS1C_ВариантыНоменклатуры") Тогда
		запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбменаТоварами
		|ИЗ
		|	Справочник.CMS1C_НастройкиОбменаССайтом КАК CMS1C_НастройкиОбменаССайтом
		|ГДЕ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбменаТоварами <> ЗНАЧЕНИЕ(ПланОбмена.ОбменССайтомТоварами.ПустаяСсылка)
		|	И CMS1C_НастройкиОбменаССайтом.Владелец = &НастройкаСайта";
		Запрос.УстановитьПараметр("НастройкаСайта",Источник.НастройкаСайта);
		
		Выб = Запрос.Выполнить().Выбрать();
		Пока выб.Следующий() Цикл
			МассивУзлов.Добавить(Выб.УзелОбменаТоварами);
		КонецЦикла;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник.Владелец.Владелец);
	ИначеЕсли ТИпЗнч(Источник) = Тип("СправочникОбъект.CMS1C_ЗначенияСвойствОбъектов") Тогда
		запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбмена
		|ИЗ
		|	Справочник.CMS1C_НастройкиОбменаССайтом КАК CMS1C_НастройкиОбменаССайтом
		|ГДЕ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбмена <> ЗНАЧЕНИЕ(ПланОбмена.CMS1C_ОбменССайтом.ПустаяСсылка)
		|	И CMS1C_НастройкиОбменаССайтом.Владелец = &НастройкаСайта";
		Запрос.УстановитьПараметр("НастройкаСайта",Источник.Владелец.НастройкаСайта);
		
		Выб = Запрос.Выполнить().Выбрать();
		Пока выб.Следующий() Цикл
			МассивУзлов.Добавить(Выб.УзелОбмена);
		КонецЦикла;
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник.Ссылка);
	Иначе
		запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбмена
		|ИЗ
		|	Справочник.CMS1C_НастройкиОбменаССайтом КАК CMS1C_НастройкиОбменаССайтом
		|ГДЕ
		|	CMS1C_НастройкиОбменаССайтом.УзелОбмена <> ЗНАЧЕНИЕ(ПланОбмена.CMS1C_ОбменССайтом.ПустаяСсылка)
		|	И CMS1C_НастройкиОбменаССайтом.Владелец = &НастройкаСайта";
		Если Источник.Метаданные().Реквизиты.Найти("НАстройкаСайта") <> Неопределено Тогда
			РеквизитНастройкаСайта = "НастройкаСайта";
		Иначе
			РеквизитНастройкаСайта = "Владелец";
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("НастройкаСайта",Источник[РеквизитНастройкаСайта]);
		Выб = Запрос.Выполнить().Выбрать();
		Пока выб.Следующий() Цикл
			МассивУзлов.Добавить(Выб.УзелОбмена);
		КонецЦикла;	
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура CMS1C_ЗарегистрироватьИзмененияДляКопированияНаДругиеСайтыПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьИзменения") Тогда//Когда выгрузили на сайт справочник не надо его ещё раз регить
		Возврат;
	КонецЕсли;
	
	МассивУзлов = Новый Массив();
	
	запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CMS1C_НастройкиСайтовКопированиеДанныхИзДругихСайтов.Ссылка.УзелОбменаКопированияДанныхИзДругихСайтов КАК УзелОбмена
	               |ИЗ
	               |	Справочник.CMS1C_НастройкиСайтов.КопированиеДанныхИзДругихСайтов КАК CMS1C_НастройкиСайтовКопированиеДанныхИзДругихСайтов
	               |ГДЕ
	               |	CMS1C_НастройкиСайтовКопированиеДанныхИзДругихСайтов.НастройкаСайта = &НастройкаСайта
	               |	И CMS1C_НастройкиСайтовКопированиеДанныхИзДругихСайтов.Использование
	               |	И CMS1C_НастройкиСайтовКопированиеДанныхИзДругихСайтов.Ссылка.РежимКопированияДанныхИзДругихСайтов = 2
	               |	И CMS1C_НастройкиСайтовКопированиеДанныхИзДругихСайтов.Ссылка.УзелОбменаКопированияДанныхИзДругихСайтов <> ЗНАЧЕНИЕ(ПланОбмена.CMS1C_НоменклатураДляКопированияНаДругиеСайты.ПустаяСсылка)";
	Запрос.УстановитьПараметр("НастройкаСайта",Источник.НастройкаСайта);
	Выб = Запрос.Выполнить().Выбрать();
	Пока выб.Следующий() Цикл
		МассивУзлов.Добавить(Выб.УзелОбмена);
	КонецЦикла;
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник.Владелец);
КонецПроцедуры

Процедура CMS1C_КопироватьДанныеНоменклатурыИзДругихНастроекСайта(CMS1C_Номенклатура,МассивНастроекСайта,ТаблицаРеквизитов,ТаблицаСсылочныхРеквизитов,НастройкаКопированияТегов,НастройкаКопированияЗначенийСвойствОбъектов,НастройкаКопированияИзображений) Экспорт
	ТекущаяНастройкаСайта = CMS1C_Номенклатура.НастройкаСайта;
	СоответствиеНастройкиСайтаИCMS1C_Номенклатуры = Новый Соответствие;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_Номенклатура.Ссылка,
	               |	CMS1C_Номенклатура.НастройкаСайта
	               |ИЗ
	               |	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
	               |ГДЕ
	               |	CMS1C_Номенклатура.НастройкаСайта В(&МассивНастроекСайта)
	               |	И CMS1C_Номенклатура.Владелец = &Владелец";
	Запрос.УстановитьПараметр("МассивНастроекСайта",МассивНастроекСайта);
	Запрос.УстановитьПараметр("Владелец",CMS1C_Номенклатура.Владелец);
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Вставить(Выб.НастройкаСайта,Выб.Ссылка);
	КонецЦИкла;
	
	БылиИзменения = Ложь;
	ОбъектНоменклатура = CMS1C_Номенклатура;
	
	ПомечатьНаУдаление = Ложь;
	НайдСтрокаПометкаНаУдаление = ТаблицаРеквизитов.Найти("ПометкаУдаления");
	Если НайдСтрокаПометкаНаУдаление <> Неопределено Тогда
		НоменклатураГлавнаяДляПометкиНаУдаление = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(НайдСтрокаПометкаНаУдаление.НастройкаСайта);
		Если ЗначениеЗаполнено(НоменклатураГлавнаяДляПометкиНаУдаление) Тогда
			ПомечатьНаУдаление = Истина;
		КонецЕсли;
		
		ТаблицаРеквизитов.Удалить(НайдСтрокаПометкаНаУдаление);
	КонецЕсли;
	
	
	//1.1) Реквизиты
	Для Каждого СтрТз из ТаблицаРеквизитов Цикл
		ГлавнаяCMS_Номенклатура = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(СтрТз.НастройкаСайта);
		Если Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектНоменклатура[СтрТз.ИмяРеквизита] = ГлавнаяCMS_Номенклатура[СтрТз.ИмяРеквизита] Тогда
			Продолжить;
		КонецЕсли;
		
		Если БылиИзменения = Ложь Тогда
			ОбъектНоменклатура = ОбъектНоменклатура.ПолучитьОБъект();
			БылиИзменения =  Истина;
		КонецЕСли;
		
		ОбъектНоменклатура[СтрТз.ИмяРеквизита] = ГлавнаяCMS_Номенклатура[СтрТз.ИмяРеквизита];
	КонецЦикла;
	
	//1.2) Ссылочные реквизиты
	БылиКатегории = Ложь;
	Для Каждого СтрТз из ТаблицаСсылочныхРеквизитов Цикл
		Если СтрТз.ИмяРеквизита = "Категория" Тогда
			БылиКатегории = Истина;
			ГлавнаяCMS_Номенклатура = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(СтрТз.НастройкаСайта);
			Если Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура) Тогда
				Продолжить;
			КОнецесли;
			
			КатегорияОбъекта = ОбъектНоменклатура.Категория;
			ГлавнаяКатегория = ГлавнаяCMS_Номенклатура.Категория;
			
			КатегорииСходятся = Истина;
			Если Не ЗначениеЗаполнено(ГлавнаяКатегория) Тогда
				Если ОбъектНоменклатура.Категория <> Справочники.CMS1C_Категории.ПустаяСсылка() Тогда
					Если Не БылиИзменения Тогда
						ОбъектНоменклатура = ОбъектНоменклатура.ПолучитьОбъект();
						БылиИзменения = Истина;
					КонецЕсли;
					ОбъектНоменклатура.Категория = Справочники.CMS1C_Категории.ПустаяСсылка();
					ОбъектНоменклатура.ДополнительныеСвойства.Вставить("НеОчищатьОсновнуюКатегорию");
					Продолжить;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(КатегорияОбъекта)
				И КатегорияОбъекта.Уровень() = ГлавнаяКатегория.Уровень()
				Тогда
				Пока Истина Цикл
					Если КатегорияОбъекта.Наименование <> ГлавнаяКатегория.Наименование Тогда
						КатегорииСходятся = Ложь;
						Прервать;
					КонецЕсли;
					
					ГлавнаяКатегория = ГлавнаяКатегория.РОдитель;
					КатегорияОбъекта = КатегорияОбъекта.Родитель;
					
					Если Не ЗначениеЗаполнено(ГлавнаяКатегория) и не ЗначениеЗаполнено(КатегорияОбъекта) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				КатегорииСходятся = Ложь;
			КонецЕсли;
			
			Если Не КатегорииСходятся Тогда
				ТекКатегория = НайтиКатегориюИзГлавной(ГлавнаяCMS_Номенклатура.Категория,CMS1C_Номенклатура.НастройкаСайта);
				
				Если ЗначениеЗаполнено(ТекКатегория) Тогда
					Если ОбъектНоменклатура.Категория <> ТекКатегория Тогда
						Если Не БылиИзменения Тогда
							ОбъектНоменклатура = ОбъектНоменклатура.ПолучитьОБъект();
							БылиИзменения = Истина;
						Конецесли;
						ОбъектНоменклатура.Категория = ТекКатегория;
						ОбъектНоменклатура.ДополнительныеСвойства.Вставить("НеОчищатьОсновнуюКатегорию");
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ОбъектНоменклатура.Категория) Тогда
						Если Не БылиИзменения Тогда
							ОбъектНоменклатура = ОбъектНоменклатура.ПолучитьОБъект();
							БылиИзменения = Истина;
						Конецесли;
						ОбъектНоменклатура.Категория = Справочники.CMS1C_Категории.ПустаяСсылка();
						ОбъектНоменклатура.ДополнительныеСвойства.Вставить("НеОчищатьОсновнуюКатегорию");
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли СтрТз.ИмяРеквизита = "Налог" Тогда
			ГлавнаяCMS_Номенклатура = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(СтрТз.НастройкаСайта);
			Если Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура) Тогда
				Продолжить;
			КОнецесли;

			
			
			
			Если ОбъектНоменклатура.Налог.Наименование = ГлавнаяCMS_Номенклатура.Налог.Наименование Тогда
				Продолжить;
			КонецЕсли;
			
			НайдНалог = Справочники.CMS1C_Налоги.НайтиПоНаименованию(ГлавнаяCMS_Номенклатура.Налог.Наименование,Истина,,CMS1C_Номенклатура.НастройкаСайта);
			Если Не НайдНалог.Пустая() Тогда
				Если НЕ БылиИзменения Тогда
					ОбъектНоменклатура = ОбъектНоменклатура.ПолучитьОБъект();
					БылиИзменения = Истина;
				КонецЕсли;
				ОбъектНоменклатура.Налог = НайдНалог;
			КонецЕсли;
		ИначеЕсли СтрТз.ИмяРеквизита = "ТипТоваров" Тогда
			
			ГлавнаяCMS_Номенклатура = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(СтрТз.НастройкаСайта);
			Если Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура) Тогда
				Продолжить;
			КОнецесли;

			Если ОбъектНоменклатура.ТипТоваров.Наименование = ГлавнаяCMS_Номенклатура.ТипТоваров.Наименование Тогда
				Продолжить;
			КонецЕсли;
			
			НайдТипТоваров = Справочники.CMS1C_ТипыТоваров.НайтиПоНаименованию(ГлавнаяCMS_Номенклатура.ТипТоваров.Наименование,Истина,,CMS1C_Номенклатура.НастройкаСайта);
			Если Не НайдТипТоваров.Пустая() Тогда
				Если НЕ БылиИзменения Тогда
					ОбъектНоменклатура = ОбъектНоменклатура.ПолучитьОБъект();
					БылиИзменения = Истина;
				КонецЕсли;
				ОбъектНоменклатура.ТипТоваров = НайдТипТоваров;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//2) Теги
	БылиИзмененияТегов = Ложь;
	Если НастройкаКопированияТегов <> Неопределено Тогда
		КопироватьТегиОбъекта(ОбъектНоменклатура,СоответствиеНастройкиСайтаИCMS1C_Номенклатуры,НастройкаКопированияТегов,БылиИзменения,ТекущаяНастройкаСайта);
	КонецЕсли;
		
	Если БылиИзменения Тогда
		ОбъектНоменклатура.Записать();
	КонецЕсли;
	
	Если БылиКатегории Тогда
		//мы не можем синхронизировать регистр категорий товаров, но можем хотя бы лишние записи поубивать
		//1) Проверяем есть ли в регистре нужная категория и если нет -- добавляем
		Если ЗначениеЗаполнено(ОбъектНоменклатура.Категория) Тогда
			ГлавнаяНЗ = РегистрыСведений.CMS1C_КатегорииНоменклатуры.СоздатьНаборЗаписей();
			ГлавнаяНЗ.Отбор.НастройкаСайта.Установить(ГлавнаяCMS_Номенклатура.НастройкаСайта);
			ГлавнаяНЗ.Отбор.Номенклатура.Установить(ГлавнаяCMS_Номенклатура);
			ГлавнаяНЗ.Прочитать();
			
			НЗ = РегистрыСведений.CMS1C_КатегорииНоменклатуры.СоздатьНаборЗаписей();
			НЗ.Отбор.НастройкаСайта.Установить(ОбъектНоменклатура.НастройкаСайта);
			НЗ.Отбор.Номенклатура.Установить(ОбъектНоменклатура.Ссылка);
			НЗ.Прочитать();
			
			ВДвухНастройкахПоОднойШтуке = ( НЗ.Количество() =1) И (ГлавнаяНЗ.Количество()=1);
			
			
			Мен = РегистрыСВедений.CMS1C_КатегорииНоменклатуры.СоздатьМенеджерЗаписи();
			Мен.НастройкаСайта = ОбъектНоменклатура.НастройкаСайта;
			Мен.Номенклатура = ОбъектНоменклатура.Ссылка;
			Мен.Категория = ОбъектНоменклатура.Категория;
			Мен.Прочитать();
			Если не Мен.Выбран() Тогда
				Если ВДвухНастройкахПоОднойШтуке Тогда
					НЗ.Очистить();
					Мен = НЗ.Добавить();
					Мен.НастройкаСайта = ОбъектНоменклатура.НастройкаСайта;
					Мен.Номенклатура = ОбъектНоменклатура.Ссылка;
					Мен.Категория = ОбъектНоменклатура.Категория;
					НЗ.Записать();
				Иначе//Ну тогда не знаю что делать. Просто добавлю запись
					Мен.НастройкаСайта = ОбъектНоменклатура.НастройкаСайта;
					Мен.Номенклатура = ОбъектНоменклатура.Ссылка;
					Мен.Категория = ОбъектНоменклатура.Категория;
					Мен.Записать();
				КонецЕсли;
			Иначе// уже точно нужная запись есть
				Если ГлавнаяНЗ.Количество()=1 и НЗ.Количество()>1  Тогда
					Мен = НЗ.Добавить();
					Мен.НастройкаСайта = ОбъектНоменклатура.НастройкаСайта;
					Мен.Номенклатура = ОбъектНоменклатура.Ссылка;
					Мен.Категория = ОбъектНоменклатура.Категория;
					НЗ.Записать();
					НЗ.Очистить();
				КонецЕсли;
				
				
				
			КонецЕсли;
		Иначе
			НЗ = РегистрыСведений.CMS1C_КатегорииНоменклатуры.СоздатьНаборЗаписей();
			НЗ.Отбор.НастройкаСайта.Установить(ОбъектНоменклатура.НастройкаСайта);
			НЗ.Отбор.Номенклатура.Установить(ОбъектНоменклатура.Ссылка);
			НЗ.Записать();
		КонецЕсли;
		//2) 
	КонецЕсли;
	
	
	Если ПомечатьНаУдаление Тогда
		Если НоменклатураГлавнаяДляПометкиНаУдаление.ПометкаУдаления И Не ОбъектНоменклатура.ПометкаУдаления Тогда
			Если НЕ БылиИзменения Тогда
				ОбъектНоменклатура.ПолучитьОбъект();
				БылиИзменения = Истина;
			КонецЕсли;
			ОбъектНоменклатура.УстановитьПометкуУдаления(Истина);
		ИначеЕСли Не НоменклатураГлавнаяДляПометкиНаУдаление.ПометкаУдаления и ОбъектНоменклатура.ПометкаУдаления Тогда
			Если НЕ БылиИзменения Тогда
				ОбъектНоменклатура.ПолучитьОбъект();
				БылиИзменения = Истина;
			КонецЕсли;
			ОбъектНоменклатура.УстановитьПометкуУдаления(Ложь);
		КонецЕслИ;
	КонецЕсли;
	
	
	//Категории номенклатуры будет по времени очень напряжно проверять
	//СинхронизироватьКатегорииНоменклатурыИзГлавнойCMS1C_Номенклатуры(ОбъектНоменклатура.Ссылка,ГлавнаяCMS_Номенклатура);
	//
	
	//3) Изображения
	Если НастройкаКопированияИзображений <> Неопределено Тогда
		КопироватьИзображенияОбъекта(ОбъектНоменклатура.Ссылка,СоответствиеНастройкиСайтаИCMS1C_Номенклатуры,НастройкаКопированияЗначенийСвойствОбъектов,ТекущаяНастройкаСайта);
	КонецЕсли;
	
	//4) Варианты и свойства вариантов
	Если НастройкаКопированияЗначенийСвойствОбъектов <> Неопределено Тогда
		КопироватьВариантыОбъекта(ОбъектНоменклатура.Ссылка,СоответствиеНастройкиСайтаИCMS1C_Номенклатуры,НастройкаКопированияЗначенийСвойствОбъектов,ТекущаяНастройкаСайта);
	КонецЕсли;	
	
	//5 значения свойств CMS1C_Номенклатура
	СинхронизироватьЗначенияСвойствCMS1C_НоменклатурыИзГлавнойCMS1C_Номенклатуры(ОбъектНоменклатура.Ссылка,ГлавнаяCMS_Номенклатура);
	//6 Выбранные свойства CMS1C_Номенклатура
	СинхронизироватьВыбранныеСвойстваCMS1C_НоменклатурыИзГлавнойCMS1C_Номенклатуры(ОбъектНоменклатура.Ссылка,ГлавнаяCMS_Номенклатура);
	
	//7 Аналоги
	СинхронизироватьАналогиCMS1C_НоменклатурыИзГлавнойCMS1C_Номенклатуры(ОбъектНоменклатура.Ссылка,ГлавнаяCMS_Номенклатура);
КонецПроцедуры

Функция получитьТегПоНаименованию(НаименованиеТега,НастройкаСайта) Экспорт
	НайдТег = Справочники.CMS1C_Теги.НайтиПоНаименованию(НаименованиеТега,Истина,,НастройкаСайта);
	Если Не НайдТег.Пустая() Тогда
		Возврат НайдТег;
	Конецесли;
	
	НовыйТег = Справочники.CMS1C_Теги.СоздатьЭлемент();
	НовыйТег.Наименование = НаименованиеТега;
	НовыйТег.Владелец = НастройкаСайта;
	НовыйТег.Записать();
	Возврат НовыйТег.Ссылка;
КонецФУнкции

Процедура КопироватьТегиОбъекта(ОбъектНоменклатура,СоответствиеНастройкиСайтаИCMS1C_Номенклатуры,НастройкаКопированияТегов,БылиИзменения,ТекущаяНастройкаСайта)
		ГлавнаяCMS_Номенклатура = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(НастройкаКопированияТегов);
		Если Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		БылиИзмененияТегов = Ложь;
				
		Если ОбъектНоменклатура.Теги.Количество() <> ГлавнаяCMS_Номенклатура.Теги.Количество() Тогда
			БылиИзмененияТегов = Истина;
		Конецесли;
		
		Если НЕ БылиИзмененияТегов Тогда
			НС = 0 ;
			Для Каждого ГлавнаяСтрТзТеги из ГлавнаяCMS_Номенклатура.Теги Цикл
				НС = НС + 1;
				СтрТзТеги = ОбъектНоменклатура.Теги[НС-1];
				Если ВРЕГ(ГлавнаяСтрТзТеги.Тег.Наименование) <> ВРЕГ(СтрТзТеги.Тег.Наименование) Тогда
					БылиИзмененияТегов = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если БылиИзмененияТегов Тогда
			Если НЕ БылиИзменения Тогда
				ОбъектНоменклатура = ОбъектНоменклатура.ПолучитьОбъект();
				БылиИзменения = Истина;
			КонецЕсли;
			
			ОбъектНоменклатура.Теги.Очистить();
			
			Для КАждого ГлавнаяСтрТзТеги из ГлавнаяCMS_Номенклатура.Теги Цикл
				ДобСтр = ОбъектНоменклатура.Теги.Добавить();
				ДобСтр.Тег = получитьТегПоНаименованию(ГлавнаяСтрТзТеги.Тег.Наименование,ТекущаяНастройкаСайта);
			КонецЦикла;
		КонецЕсли;
		
		Если БылиИзмененияТегов Тогда
			БылиИзменения = Истина;
		КонецЕсли;
КонецПроцедуры

Процедура КопироватьВариантыОбъекта(ОбъектНоменклатура,СоответствиеНастройкиСайтаИCMS1C_Номенклатуры,НастройкаКопированияЗначенийСвойствОбъектов,ТекущаяНастройкаСайта)
	ГлавнаяCMS_Номенклатура = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(НастройкаКопированияЗначенийСвойствОбъектов);
	Если Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура) Тогда
		Возврат;
	Конецесли;
	
	Если (Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура.ОсновнойВариант) или ТипЗнч(ГлавнаяCMS_Номенклатура.ОсновнойВариант) <> Тип("СправочникСсылка.CMS1C_ВариантыНоменклатуры"))
		И (ЗначениеЗаполнено(ОбъектНоменклатура.ОсновнойВариант) И ТипЗнч(ОбъектНоменклатура.ОсновнойВариант) = ТИп("СправочникСсылка.CMS1C_ВариантыНоменклатуры"))
		Тогда
		ОбНом = ОбъектНоменклатура.ПолучитьОбъект();
		ОбНом.ОсновнойВариант = Справочники.CMS1C_ВариантыНоменклатуры.ПустаяСсылка();
		ОбНом.ДополнительныеСвойства.Вставить("НадоЗаписать");
		ОбНом.Записать();
	КонецЕслИ;

	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_ВариантыНоменклатуры.Ссылка,
	               |	ЛОЖЬ КАК Синхронизирован,
	               |	CMS1C_ВариантыНоменклатуры.Артикул,
	               |	CMS1C_ВариантыНоменклатуры.ГлавныйВариант,
	               |	CMS1C_ВариантыНоменклатуры.Наименование
	               |ИЗ
	               |	Справочник.CMS1C_ВариантыНоменклатуры КАК CMS1C_ВариантыНоменклатуры
	               |ГДЕ
	               |	CMS1C_ВариантыНоменклатуры.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец",ГлавнаяCMS_Номенклатура);
	ГлавнаяТаблицаВариантовТоваров = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Владелец",ОбъектНоменклатура.Ссылка);
	ТаблицаВариантовТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ГлавнаяТаблицаВариантовТоваров.Количество() = 0
		и ТаблицаВариантовТоваров.Количество() = 0 Тогда//Вот так повезло ))))
		Возврат;
	КонецЕсли;
	
	//1-й вариант связки. Смотрим если у товара только один вариант в 1С и на сайте, и нету привязки к характеристике, тогда считаем что варианты связались
	Если ГлавнаяТаблицаВариантовТоваров.Количество() = 1
		И ТаблицаВариантовТоваров.Количество() = 1
		Тогда//Самый отличный вариант. Синхронизируем эти варианты и всё
		СинхронизироватьВариантИзГлавногоВарианта(ГлавнаяТаблицаВариантовТоваров[0].Ссылка,ТаблицаВариантовТоваров[0].Ссылка);
		Возврат;
	КонецЕсли;
	
	//2-й вариант. Если уже варианты сопоставлены
	Для Каждого СтрТз из ТаблицаВариантовТоваров Цикл
		Если ЗначениеЗаполнено(СтрТз.ГлавныйВариант)
			И СтрТз.ГлавныйВАриант.Владелец = ТекущаяНастройкаСайта
			Тогда
			НайдГлавныйВариант =  ГлавнаяТаблицаВариантовТоваров.Найти(СтрТз.ГлавныйВариант,"Ссылка");
			
			Если НайдГлавныйВариант <> Неопределено Тогда
				СтрТз.Синхронизирован = Истина;
				НайдГлавныйВариант.Синхронизирован = Истина;
				СинхронизироватьВариантИзГлавногоВарианта(НайдГлавныйВариант.Ссылка,СтрТз.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПродолжаемСверку = Истина;
	
	ГлавнаяТаблицаВариантовТоваров = ГлавнаяТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));	
	ТаблицаВариантовТоваров = ТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));
	Если ГлавнаяТаблицаВариантовТоваров.КОличество() = 0 И ТаблицаВариантовТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ГлавнаяТаблицаВариантовТоваров.Количество() = 0
		ИЛИ ТаблицаВариантовТоваров.Количество() = 0 Тогда
		ПродолжаемСверку = Ложь;
	КонецЕсли;
	
	
	//3-й вариант. Ищем по артикулу. Но только при условии что такой артикул у варианта заполнен и единственный
	Если ПродолжаемСверку Тогда
		Для Каждого СтрТз из ГлавнаяТаблицаВариантовТоваров Цикл
			Если Не ЗначениеЗаполнено(СтрТз.Артикул) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоискаАртикула = Новый Структура();
			СтруктураПоискаАртикула.Вставить("Артикул",СтрТз.Артикул);
			ГлавнаяМасНайд= ГлавнаяТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаАртикула);
			МасНайд = ТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаАртикула);
			
			Если ГлавнаяМасНайд.Количество() = 1
				И МасНайд.Количество() = 1 Тогда
				ГлавнаяМасНайд[0].Синхронизирован = Истина;
				МасНайд[0].Синхронизирован = Истина;
				СинхронизироватьВариантИзГлавногоВарианта(ГлавнаяМасНайд[0].Ссылка,МасНайд[0].Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		ГлавнаяТаблицаВариантовТоваров = ГлавнаяТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));	
		ТаблицаВариантовТоваров = ТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));
		Если ГлавнаяТаблицаВариантовТоваров.КОличество() = 0 И ТаблицаВариантовТоваров.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если ГлавнаяТаблицаВариантовТоваров.Количество() = 0
			ИЛИ ТаблицаВариантовТоваров.Количество() = 0 Тогда
			ПродолжаемСверку = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//4-й вариант. Ищем по наименованию по той же логике
	Если ПродолжаемСверку Тогда
		Для Каждого СтрТз из ГлавнаяТаблицаВариантовТоваров Цикл
			Если Не ЗначениеЗаполнено(СтрТз.Наименование) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоискаНаименования = Новый Структура();
			СтруктураПоискаНаименования.Вставить("Наименование",СтрТз.Наименование);
			ГлавнаяМасНайд = ГлавнаяТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаНаименования);
			МасНайд = ТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаНаименования);
			Если ГлавнаяМасНайд.Количество() = 1
				И МасНайд.Количество() = 1 Тогда
				ГлавнаяМасНайд[0].Синхронизирован = Истина;
				МасНайд[0].Синхронизирован = Истина;
				СинхронизироватьВариантИзГлавногоВарианта(ГлавнаяМасНайд[0].Ссылка,МасНайд[0].Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//5-й вариант
	
	ГлавнаяТаблицаВариантовТоваров = ГлавнаяТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));	
	ТаблицаВариантовТоваров = ТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));
	Если ГлавнаяТаблицаВариантовТоваров.КОличество() = 0 И ТаблицаВариантовТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ГлавнаяТаблицаВариантовТоваров.Количество() = 0 Тогда//Отличный вариант. Помечаем на удаление
		Для Каждого СтрТз Из ТаблицаВариантовТоваров Цикл
			Если Не СтрТз.Ссылка.ПометкаУдаления Тогда
				Об = СтрТз.Ссылка.ПолучитьОбъект();
				Об.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВариантовТоваров.Количество() = 0 Тогда//ТОже вариант супер. Создаём новые варианты
		Для КАждого СтрТз из ГлавнаяТаблицаВариантовТоваров Цикл
			СинхронизироватьВариантИзГлавногоВарианта(СтрТз.Ссылка,,ОбъектНоменклатура,ОбъектНоменклатура.НастройкаСайта);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	
	//6-й вариант самый грустный. Перебором хватаем варианты. Лишние помечаем на удаление, если не хватит какого -- добавляем
	НС = 0;
	КвоСтрокТзТаблицаВариантовТОваров = ТаблицаВариантовТоваров.Количество();
	Для Каждого ГлавнаяСтрТз Из ГлавнаяТаблицаВариантовТоваров Цикл
		НС = НС + 1;
		ГлавнаяСтрТз.Синхронизирован = ИСтина;
		Если КвоСтрокТзТаблицаВариантовТОваров>=НС Тогда
			СтрТз = ТаблицаВариантовТоваров[НС-1];
			СтрТз.Синхронизирован = Истина;
			ТекСсылка = СтрТз.Ссылка;
			ВладелецКуда = Неопределено;
			НастройкаСайтаКуда = Неопределено;
		ИНаче
			СтрТз = Неопределено;
			ТекСсылка = Неопределено;
			ВладелецКуда = ОбъектНоменклатура.Ссылка;
			НастройкаСайтаКуда = ВладелецКуда.НАстройкаСайта;
		КонецЕсли;
		СинхронизироватьВариантИзГлавногоВарианта(ГлавнаяСтрТз.Ссылка,ТекСсылка,ВладелецКуда,НастройкаСайтаКуда);
	КонецЦикла;
	
	//И может быть ситуация что надо пометить на удаление из текущих вариантов
	ТаблицаВариантовТоваров.НайтиСтроки(Новый Структура("Синхронизирован",Ложь));
	
	Для Каждого СтрТз из ТаблицаВариантовТоваров Цикл
		Если Не СтрТз.Ссылка.ПометкаУдаления Тогда
			Об = СтрТз.Ссылка.ПОлучитьОбъект();
			Об.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонеЦЦикла;
КонецПроцедуры

Процедура СинхронизироватьВариантИзГлавногоВарианта(ВариантОткуда,ВариантКуда=Неопределено,ВладелецКуда=Неопределено,НастройкаСайтаКуда = Неопределено)
	БылиИзменения = Ложь;
	Если ВариантКуда = Неопределено Тогда
		Об = Справочники.CMS1C_ВариантыНоменклатуры.СоздатьЭлемент();
		Об.НастройкаСайта = НастройкаСайтаКуда;
		Об.Владелец = ВладелецКуда;
		БылиИзменения = Истина;
	Иначе
		Об = ВариантКуда.ПолучитьОбъект();
	КонецЕсли;
	
	МассивРеквизитов = Новый массив();
	МассивРеквизитов.Добавить("Наименование");
	МассивРеквизитов.Добавить("ДоступенДляЗаказа");
	МассивРеквизитов.Добавить("ХарактеристикаНоменклатуры");
	МассивРеквизитов.Добавить("Артикул");
	МассивРеквизитов.Добавить("Сортировка");
	МассивРеквизитов.Добавить("Виртуальный");
	
	Для Каждого ЭлементМассива из МассивРеквизитов Цикл
		Если Об[ЭлементМассива]<> ВариантОткуда[ЭлементМассива] Тогда
			Об[ЭлементМассива] = ВариантОткуда[ЭлементМассива];
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦИкла;
	
	Если Об.ГлавныйВариант <> ВариантОткуда Тогда
		Об.ГлавныйВариант = ВариантОткуда;
		БылиИзменения = Истина;
	КонецЕсли;
	
	Если Об.ОсновноеИзображение.ГлавноеИзображение = ВариантОткуда.ОсновноеИзображение Тогда
		
	ИначеЕсли ЗначениеЗаполнено(ВариантОткуда.ОсновноеИзображение) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_Изображения.Ссылка
		|ИЗ
		|	Справочник.CMS1C_Изображения КАК CMS1C_Изображения
		|ГДЕ
		|	CMS1C_Изображения.НастройкаСайта = &НастройкаСайта
		|	И CMS1C_Изображения.Владелец = &Владелец
		|	И CMS1C_Изображения.ГлавноеИзображение = &ГлавноеИзображение";
		Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайтаКуда);
		Запрос.УстановитьПараметр("Владелец",ВладелецКуда);
		Запрос.УстановитьПараметр("ГлавноеИзображение",ВариантОткуда.ОсновноеИзображение);
		ВЫб = запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			Об.ОсновноеИзображение = ВЫб.Ссылка;
			БылиИзменения = Истина;
		КонецЕсли;
	Иначе
		Если Об.ОсновноеИзображение <> Справочники.CMS1C_Изображения.ПустаяСсылка() Тогда
			Об.ОсновноеИзображение = Справочники.CMS1C_Изображения.ПустаяСсылка();
			БылиИзменения = Истина;
		Конецесли;
	КонецЕсли;
	
	Если БылиИзменения Тогда
		Об.Записать();
	Конецесли;
	
	
	
	
	Если ВариантОткуда.ПометкаУдаления И Не Об.ПометкаУдаления Тогда
		Об.УстановитьПометкуУдаления(Истина);
	ИначеЕСли Не ВариантОткуда.ПометкаУдаления и Об.ПометкаУдаления Тогда
		Об.УстановитьПометкуУдаления(Ложь);
	КонецЕслИ;
	
	
	Если ВариантОткуда.Владелец.ОсновнойВариант = ВариантОткуда Тогда
		Если Об.Владелец.ОсновнойВариант <> Об.Ссылка Тогда
			ОбВладелецКуда = Об.Владелец.ПолучитьОбъект();
			ОбВладелецКуда.ОсновнойВариант = Об.Ссылка;
			ОбВладелецКуда.ДополнительныеСВойства.Вставить("НадоЗаписать");
			ОбВладелецКуда.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
		
	
	СинхронизироватьЗначенияСвойствВариантаИзГлавногоВарианта(Об.Ссылка);
КонецПроцедуры

Процедура КопироватьИзображенияОбъекта(ОбъектНоменклатура,СоответствиеНастройкиСайтаИCMS1C_Номенклатуры,НастройкаКопированияИзображений,ТекущаяНастройкаСайта)
	ГлавнаяCMS_Номенклатура = СоответствиеНастройкиСайтаИCMS1C_Номенклатуры.Получить(НастройкаКопированияИзображений);
	Если Не ЗначениеЗаполнено(ГлавнаяCMS_Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_Изображения.Ссылка,
	               |	ЛОЖЬ КАК Синхронизирован,
	               |	CMS1C_Изображения.ГлавноеИзображение
	               |ИЗ
	               |	Справочник.CMS1C_Изображения КАК CMS1C_Изображения
	               |ГДЕ
	               |	CMS1C_Изображения.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец",ГлавнаяCMS_Номенклатура);
	ГлавнаяТаблицаИзображенийТоваров = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Владелец",ОбъектНоменклатура.Ссылка);
	ТаблицаИзображенийТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ГлавнаяТаблицаИзображенийТоваров.Количество() = 0
		и ТаблицаИзображенийТоваров.Количество() = 0 Тогда//Вот так повезло ))))
		Возврат;
	КонецЕсли;
	
	//1-й вариант связки. Смотрим если у товара только одно изображение в 1С и на сайте,тогда считаем что изображения связались
	Если ГлавнаяТаблицаИзображенийТоваров.Количество() = 1
		И ТаблицаИзображенийТоваров.Количество() = 1
		Тогда//Самый отличный вариант. Синхронизируем эти изображения и всё
		СинхронизироватьИзображениеИзГлавногоИзображения(ГлавнаяТаблицаИзображенийТоваров[0].Ссылка,ТаблицаИзображенийТоваров[0].Ссылка);
		Возврат;
	КонецЕсли;
	
	//2-й вариант. Если уже варианты сопоставлены
	Для Каждого СтрТз из ТаблицаИзображенийТоваров Цикл
		Если ЗначениеЗаполнено(СтрТз.ГлавноеИзображение)
			И СтрТз.ГлавноеИзображение.Владелец = ТекущаяНастройкаСайта
			Тогда
			НайдГлавноеИзображение =  ГлавнаяТаблицаИзображенийТоваров.Найти(СтрТз.ГлавноеИзображение,"Ссылка");
			
			Если НайдГлавноеИзображение <> Неопределено Тогда
				СтрТз.Синхронизирован = Истина;
				НайдГлавноеИзображение.Синхронизирован = Истина;
				СинхронизироватьИзображениеИзГлавногоИзображения(НайдГлавноеИзображение.Ссылка,СтрТз.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПродолжаемСверку = Истина;
	
	ГлавнаяТаблицаИзображенийТоваров = ГлавнаяТаблицаИзображенийТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));	
	ТаблицаИзображенийТоваров = ТаблицаИзображенийТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));
	Если ГлавнаяТаблицаИзображенийТоваров.КОличество() = 0 И ТаблицаИзображенийТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ГлавнаяТаблицаИзображенийТоваров.Количество() = 0
		ИЛИ ТаблицаИзображенийТоваров.Количество() = 0 Тогда
		ПродолжаемСверку = Ложь;
	КонецЕсли;
	
	
	//3-й вариант. Ищем по артикулу. Но только при условии что такой артикул у варианта заполнен и единственный
	//Если ПродолжаемСверку Тогда
	//	Для Каждого СтрТз из ГлавнаяТаблицаИзображенийТоваров Цикл
	//		Если Не ЗначениеЗаполнено(СтрТз.Артикул) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		СтруктураПоискаАртикула = Новый Структура();
	//		СтруктураПоискаАртикула.Вставить("Артикул",СтрТз.Артикул);
	//		ГлавнаяМасНайд= ГлавнаяТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаАртикула);
	//		МасНайд = ТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаАртикула);
	//		
	//		Если ГлавнаяМасНайд.Количество() = 1
	//			И МасНайд.Количество() = 1 Тогда
	//			ГлавнаяМасНайд[0].Синхронизирован = Истина;
	//			МасНайд[0].Синхронизирован = Истина;
	//			СинхронизироватьВариантИзГлавногоВарианта(ГлавнаяМасНайд[0].Ссылка,МасНайд[0].Ссылка);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	ГлавнаяТаблицаВариантовТоваров = ГлавнаяТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));	
	//	ТаблицаВариантовТоваров = ТаблицаВариантовТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));
	//	Если ГлавнаяТаблицаВариантовТоваров.КОличество() = 0 И ТаблицаВариантовТоваров.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	Если ГлавнаяТаблицаВариантовТоваров.Количество() = 0
	//		ИЛИ ТаблицаВариантовТоваров.Количество() = 0 Тогда
	//		ПродолжаемСверку = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	//
	////4-й вариант. Ищем по наименованию по той же логике
	//Если ПродолжаемСверку Тогда
	//	Для Каждого СтрТз из ГлавнаяТаблицаВариантовТоваров Цикл
	//		Если Не ЗначениеЗаполнено(СтрТз.Наименование) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		СтруктураПоискаНаименования = Новый Структура();
	//		СтруктураПоискаНаименования.Вставить("Наименование",СтрТз.Наименование);
	//		ГлавнаяМасНайд = ГлавнаяТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаНаименования);
	//		МасНайд = ТаблицаВариантовТоваров.НайтиСтроки(СтруктураПоискаНаименования);
	//		Если ГлавнаяМасНайд.Количество() = 1
	//			И МасНайд.Количество() = 1 Тогда
	//			ГлавнаяМасНайд[0].Синхронизирован = Истина;
	//			МасНайд[0].Синхронизирован = Истина;
	//			СинхронизироватьВариантИзГлавногоВарианта(ГлавнаяМасНайд[0].Ссылка,МасНайд[0].Ссылка);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	//5-й вариант
	ГлавнаяТаблицаИзображенийТоваров = ГлавнаяТаблицаИзображенийТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));
	ТаблицаИзображенийТоваров = ТаблицаИзображенийТоваров.Скопировать(Новый Структура("Синхронизирован",Ложь));
	Если ГлавнаяТаблицаИзображенийТоваров.Количество() = 0 И ТаблицаИзображенийТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ГлавнаяТаблицаИзображенийТоваров.Количество() = 0 Тогда//Отличный вариант. Помечаем на удаление
		Для Каждого СтрТз Из ТаблицаИзображенийТоваров Цикл
			Об = СтрТз.Ссылка.ПолучитьОбъект();
			Об.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если ТаблицаИзображенийТоваров.Количество() = 0 Тогда//ТОже вариант супер. Создаём новые варианты
		Для Каждого СтрТз из ГлавнаяТаблицаИзображенийТоваров Цикл
			СинхронизироватьИзображениеИзГлавногоИзображения(СтрТз.Ссылка,,ОбъектНоменклатура.Ссылка,ОбъектНоменклатура.НастройкаСайта);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	//6-й вариант самый грустный. Перебором хватаем варианты. Лишние помечаем на удаление, если не хватит какого -- добавляем
	НС = 0;
	КвоСтрокТзТаблицаИзображенийТоваров = ТаблицаИзображенийТоваров.Количество();
	Для Каждого ГлавнаяСтрТз Из ГлавнаяТаблицаИзображенийТоваров Цикл
		НС = НС + 1;
		ГлавнаяСтрТз.Синхронизирован = ИСтина;
		Если КвоСтрокТзТаблицаИзображенийТоваров>=НС Тогда
			СтрТз = ТаблицаИзображенийТоваров[НС-1];
			СтрТз.Синхронизирован = Истина;
			ТекСсылка = СтрТз.Ссылка
		ИНаче
			СтрТз = Неопределено;
			ТекСсылка = Неопределено;
		КонецЕсли;
		СинхронизироватьИзображениеИзГлавногоИзображения(ГлавнаяСтрТз.Ссылка,ТекСсылка);
	КонецЦикла;
	
	//И может быть ситуация что надо пометить на удаление из текущих вариантов
	ТаблицаИзображенийТоваров.НайтиСтроки(Новый Структура("Синхронизирован",Ложь));
	
	Для Каждого СтрТз из ТаблицаИзображенийТоваров Цикл
		Об = СтрТз.Ссылка.ПОлучитьОбъект();
		Об.УстановитьПометкуУдаления();
	КонеЦЦикла;
КонецПроцедуры

Процедура СинхронизироватьИзображениеИзГлавногоИзображения(ИзображениеОткуда,ИзображениеКуда=Неопределено,ВладелецКуда=Неопределено,НастройкаСайтаКуда = Неопределено)
	БылиИзменения = Ложь;
	Если ИзображениеКуда = Неопределено Тогда
		Об = Справочники.CMS1C_Изображения.СоздатьЭлемент();
		Об.НастройкаСайта = НастройкаСайтаКуда;
		Об.Владелец = ВладелецКуда;
		БылиИзменения = Истина;
	Иначе
		Об = ИзображениеКуда.ПолучитьОбъект();
	КонецЕсли;
	
	МассивРеквизитовДляСверки = новый массив();
	МассивРеквизитовДляСверки.Добавить("Наименование");
	МассивРеквизитовДляСверки.Добавить("Сортировка");
	МассивРеквизитовДляСверки.Добавить("Размер");
	МассивРеквизитовДляСверки.Добавить("Ширина");
	МассивРеквизитовДляСверки.Добавить("Высота");
	МассивРеквизитовДляСверки.Добавить("Расширение");
	МассивРеквизитовДляСверки.Добавить("Описание");
	//МассивРе
	
	Для Каждого ЭлементМассива из МассивРеквизитовДляСверки Цикл
		Если об[ЭлементМассива]<> ИзображениеОткуда[ЭлементМассива] Тогда
			Об[ЭлементМассива] = ИзображениеОткуда[ЭлементМассива];
			БылиИзменения = Истина;
		КонецЕслИ;
	КонецЦИкла;
	
	Если Об.ГлавноеИзображение <> ИзображениеОткуда Тогда
		Об.ГлавноеИзображение = ИзображениеОткуда;
		БылиИзменения = Истина;
	КонецЕсли;
	
	Двоичные = ПолучитьИзображениеCMS1C_Изображения(ИзображениеОткуда,ИзображениеОткуда.НастройкаСайта,"Хранилище",Истина);
	
	ДвоичныеБыли = Об.Хранилище.Получить();
	//Если Двоичные.Размер() = 
	
	если Двоичные <> Неопределено Тогда
		Если ДвоичныеБыли = Неопределено Тогда
			об.Хранилище = Новый ХранилищеЗначения(Двоичные);
			БылиИзменения = Истина;
		ИначеЕсли ДвоичныеБыли.Размер() <> Двоичные.Размер() Тогда
			об.Хранилище = Новый ХранилищеЗначения(Двоичные);
			БылиИзменения = Истина;
		КонецЕсли;
	иначе
		Если ДвоичныеБыли <> Неопределено Тогда
			Об.Хранилище = новый ХранилищеЗначения(Неопределено);
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если БылиИзменения Тогда
		Об.Записать();
	КонецЕсли;
	
	Если ИзображениеОтКуда.ПометкаУдаления И Не Об.ПометкаУдаления Тогда
		Об.УстановитьПометкуУдаления(Истина);
	ИначеЕСли Не ИзображениеОтКуда.ПометкаУдаления и Об.ПометкаУдаления Тогда
		Об.УстановитьПометкуУдаления(Ложь);
	КонецЕслИ;
	
	
	Если ИзображениеОткуда.Владелец.ОсновноеИзображение = ИзображениеОткуда Тогда
		Если Об.Владелец.ОсновноеИзображение <> Об.Ссылка Тогда
			ОбВладелецКуда = Об.Владелец.ПолучитьОбъект();
			ОбВладелецКуда.ОсновноеИзображение = Об.Ссылка;
			ОбВладелецКуда.ДополнительныеСвойства.Вставить("НадоЗаписать");
			ОбВладелецКуда.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Если ДвоичныеДанные = Ложь тогда получаем картинку
Функция ПолучитьИзображениеCMS1C_Изображения(ТекИзображение,НастройкаСайта,ДобавкаКНаименованию,ПолучитьДвоичныеДанные) Экспорт
	ДвоичныеДанные = ТекИзображение["Хранилище"+ДобавкаКНаименованию].ПОлучить();
	Если ДвоичныеДанные = Неопределено тогда
		Если НастройкаСайта.ХранитьФайлыНаДиске
			//и ЗначениеЗаполнено(ТекИзображение.Владелец.ID) и ЗначениеЗаполнено(ТекИзображение.id)
			Тогда
			Об = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(НастройкаСайта);
			ПутьККартинке = Об.ПолучитьПутьККартинке(ТекИзображение,ДобавкаКНаименованию);
			//ПутьККартинке = получитьПутьККартинке(ТекИзображение,НастройкаСайта);
			
			Если ПутьККартинке = Неопределено Тогда
				Возврат Неопределено;
			Конецесли;
			
			Файл = Новый Файл(ПутьККартинке);
			Если Файл.Существует() Тогда
				Если Файл.ЭтоКаталог() Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Если ПолучитьДвоичныеДанные Тогда
					Возврат Новый ДвоичныеДанные(ПутьККартинке);
				Иначе
					Возврат Новый Картинка(ПутьККартинке);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПолучитьДвоичныеДанные Тогда
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				Возврат ДвоичныеДанные;
			ИначеЕсли ТипЗнч(ДвоичныеДанные) = Тип("Картинка") Тогда
				Возврат ДвоичныеДанные.ПолучитьДвоичныеДанные();
			КонецЕсли;
		Иначе
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				Возврат новый Картинка(ДвоичныеДанные);
			ИначеЕсли ТипЗнч(ДвоичныеДанные) = Тип("Картинка") Тогда
				Возврат ДвоичныеДанные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьПутьККартинке(ТекИзображение,НастройкаСайта) Экспорт
	IDТовара = Формат(ТекИзображение.Владелец.ID,"ЧГ=");
	IDКартинки = Формат(ТекИзображение.ID,"ЧГ=");
	Расширение = ТекИзображение.Расширение;
	ПерваяПапка = "";
	ВтораяПапка = "";
	ТретьяПапка = IDТовара;
	
	ДлинаIDТовара = СтрДлина(IDТовара);
	Если ДлинаIDТовара =1 Тогда
		ПерваяПапка = "0"+IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 2 Тогда
		ПерваяПапка = IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 3 Тогда
		ПерваяПапка = Прав(IDТовара,2);
		втораяПапка = "0"+Лев(IDТовара,1);
	Иначе
		ПерваяПапка = Прав(IDТовара,2);
		ВтораяПапка = Прав(IDТовара,4);
		ВтораяПапка = Лев(ВтораяПапка,2);
	КонецЕсли;
	
	ПутьКПапкеProtected = НастройкаСайта.ПутьКФайлам+"\"+ПерваяПапка + "\" + ВтораяПапка;
	ПутьКПапкеProtected = ПутьКПапкеProtected + "\" + IDТовара;
	ПутьКПапкеProtected = ПутьКПапкеProtected + "\"+"images";
	
	Если НастройкаСайта.НакладыватьWaterMark Тогда
		//	//сначала выгрузим в оригинал и наложим вотермарку
		ИмяКартинкиОригинал = IDКартинки+".original."+Расширение;
		ПутьККартинкеОригинал = ПутьКПапкеProtected+"\"+ИмяКартинкиОригинал;
		Если НайтиФайлы(ПутьККартинкеОригинал).Количество()>0 Тогда
			Возврат ПутьККартинкеОригинал;
		КонецЕсли;
	КонецЕсли;
	
	ИмяКартинки = IDКартинки+"."+Расширение;
	ПутьККартинке = ПутьКПапкеProtected+"\"+ИмяКартинки;
	Если НайтиФайлы(ПутьККартинке).Количество()>0 Тогда
		Возврат ПутьККартинке;
	КонецЕсли;
	Возврат Неопределено;
КонецФУнкции

Процедура СинхронизироватьЗначенияСвойствВариантаИзГлавногоВарианта(ВАриант)
	Если НЕ ЗначениеЗаполнено(Вариант.ГлавныйВариант) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство,
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство.Наименование,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение.Наименование
	|ПОМЕСТИТЬ Откуда
	|ИЗ
	|	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта = &НастройкаСайтаОткуда
	|	И CMS1C_ЗначенияСвойствОбъектов.Номенклатура = &Номенклатура
	|	И CMS1C_ЗначенияСвойствОбъектов.Объект = &ОбъектОткуда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство,
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство.Наименование,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение.Наименование
	|ПОМЕСТИТЬ Куда
	|ИЗ
	|	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта = &НастройкаСайтаКуда
	|	И CMS1C_ЗначенияСвойствОбъектов.Номенклатура = &Номенклатура
	|	И CMS1C_ЗначенияСвойствОбъектов.Объект = &ОбъектКуда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Откуда.Свойство, Куда.Свойство) КАК Свойство,
	|	ЕСТЬNULL(Откуда.Значение, Куда.Значение) КАК Значение,
	|	ВЫБОР
	|		КОГДА Откуда.Свойство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОткуда,
	|	ВЫБОР
	|		КОГДА Куда.Свойство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКуда
	|ИЗ
	|	Куда КАК Куда
	|		ПОЛНОЕ СОЕДИНЕНИЕ Откуда КАК Откуда
	|		ПО Куда.СвойствоНаименование = Откуда.СвойствоНаименование
	|			И Куда.ЗначениеНаименование = Откуда.ЗначениеНаименование
	|ГДЕ
	|	(Куда.Свойство ЕСТЬ NULL 
	|			ИЛИ Откуда.Свойство ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("НастройкаСайтаОткуда",Вариант.ГлавныйВариант.НастройкаСайта);
	Запрос.УстановитьПараметр("НастройкаСайтаКуда",Вариант.НастройкаСайта);
	Запрос.УстановитьПараметр("ОбъектОткуда",Вариант.ГлавныйВариант);
	Запрос.УстановитьПараметр("ОбъектКуда",Вариант);
	Запрос.УстановитьПараметр("Номенклатура",Вариант.Владелец.Владелец);
	
	Выб = запрос.Выполнить().Выбрать();
	//СоздаёмНЗ = Ложь;
	//Если Выб.Количество() > 0 Тогда
	//	СоздаёмНЗ = Истина;
	НЗ = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//Конецесли;
	
	Пока Выб.Следующий() Цикл
		Если Выб.ЕстьКуда Тогда
			Мен = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Мен.НастройкаСайта = Вариант.НастройкаСайта;
			Мен.Номенклатура = Вариант.Владелец.Владелец;
			Мен.Объект = Вариант;
			Мен.Свойство = Выб.Свойство;
			Мен.Значение = Выб.Значение;
			Мен.Удалить();
			Продолжить;
		КонецЕсли;
		
		ТекСвойство = НайтиСвойствоПоСвойствуГлавногоСайта(Выб.Свойство,Вариант.НастройкаСайта);
		Если НЕ ЗначениеЗаполнено(ТекСвойство) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЗначение = НайтиЗначениеПоЗначениюГлавногоСайта(Выб.Значение,ТекСвойство);
		
		ДобСтрНЗ = НЗ.Добавить();
		ДобСтрНЗ.НастройкаСайта = Вариант.НАстройкаСайта;
		ДобСтрНЗ.Номенклатура = Вариант.Владелец.Владелец;
		ДобСтрНЗ.Объект = Вариант;
		ДобСтрНЗ.Свойство = ТекСвойство;
		ДобСтрНЗ.Значение = ТекЗначение;
	КонецЦикла;
	
	Если НЗ.Количество() > 0 Тогда
		НЗ.Отбор.НастройкаСайта.Установить(Вариант.НастройкаСайта);
		НЗ.Отбор.Номенклатура.Установить(Вариант.Владелец.Владелец);
		НЗ.Отбор.Объект.Установить(ВАриант);
		НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
		НЗ.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьЗначенияСвойствCMS1C_НоменклатурыИзГлавнойCMS1C_Номенклатуры(CMS1C_Номенклатура,ГлавнаяCMS1C_Номенклатура)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство,
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство.Наименование,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение.Наименование
	|ПОМЕСТИТЬ Откуда
	|ИЗ
	|	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта = &НастройкаСайтаОткуда
	|	И CMS1C_ЗначенияСвойствОбъектов.Номенклатура = &Номенклатура
	|	И CMS1C_ЗначенияСвойствОбъектов.Объект = &ОбъектОткуда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство,
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство.Наименование,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение.Наименование
	|ПОМЕСТИТЬ Куда
	|ИЗ
	|	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта = &НастройкаСайтаКуда
	|	И CMS1C_ЗначенияСвойствОбъектов.Номенклатура = &Номенклатура
	|	И CMS1C_ЗначенияСвойствОбъектов.Объект = &ОбъектКуда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Откуда.Свойство, Куда.Свойство) КАК Свойство,
	|	ЕСТЬNULL(Откуда.Значение, Куда.Значение) КАК Значение,
	|	ВЫБОР
	|		КОГДА Откуда.Свойство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОткуда,
	|	ВЫБОР
	|		КОГДА Куда.Свойство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКуда
	|ИЗ
	|	Куда КАК Куда
	|		ПОЛНОЕ СОЕДИНЕНИЕ Откуда КАК Откуда
	|		ПО Куда.СвойствоНаименование = Откуда.СвойствоНаименование
	|			И Куда.ЗначениеНаименование = Откуда.ЗначениеНаименование
	|ГДЕ
	|	(Куда.Свойство ЕСТЬ NULL 
	|			ИЛИ Откуда.Свойство ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("НастройкаСайтаОткуда",ГлавнаяCMS1C_Номенклатура.НастройкаСайта);
	Запрос.УстановитьПараметр("НастройкаСайтаКуда",CMS1C_Номенклатура.НастройкаСайта);
	Запрос.УстановитьПараметр("ОбъектОткуда",ГлавнаяCMS1C_Номенклатура);
	Запрос.УстановитьПараметр("ОбъектКуда",CMS1C_Номенклатура);
	Запрос.УстановитьПараметр("Номенклатура",CMS1C_Номенклатура.Владелец);
	
	Выб = запрос.Выполнить().Выбрать();
	//Если Выб.Количество() > 0 Тогда
		НЗ = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//Конецесли;
	
	Пока Выб.Следующий() Цикл
		Если Выб.ЕстьКуда Тогда
			Мен = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Мен.НастройкаСайта = CMS1C_Номенклатура.НастройкаСайта;
			Мен.Номенклатура = CMS1C_Номенклатура.Владелец;
			Мен.Объект = CMS1C_Номенклатура;
			Мен.Свойство = Выб.Свойство;
			Мен.Значение = Выб.Значение;
			Мен.Удалить();
			Продолжить;
		КонецЕсли;
		
		ТекСвойство = НайтиСвойствоПоСвойствуГлавногоСайта(Выб.Свойство,CMS1C_Номенклатура.НастройкаСайта);
		Если НЕ ЗначениеЗаполнено(ТекСвойство) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЗначение = НайтиЗначениеПоЗначениюГлавногоСайта(Выб.Значение,ТекСвойство);
		
		ДобСтрНЗ = НЗ.Добавить();
		ДобСтрНЗ.НастройкаСайта = CMS1C_Номенклатура.НАстройкаСайта;
		ДобСтрНЗ.Номенклатура = CMS1C_Номенклатура.Владелец;
		ДобСтрНЗ.Объект = CMS1C_Номенклатура;
		ДобСтрНЗ.Свойство = ТекСвойство;
		ДобСтрНЗ.Значение = ТекЗначение;
	КонецЦикла;
	
	Если НЗ.Количество() > 0 Тогда
		НЗ.Отбор.НастройкаСайта.Установить(CMS1C_Номенклатура.НастройкаСайта);
		НЗ.Отбор.Номенклатура.Установить(CMS1C_Номенклатура.Владелец);
		НЗ.Отбор.Объект.Установить(CMS1C_Номенклатура);
		НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
		НЗ.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура СинхронизироватьВыбранныеСвойстваCMS1C_НоменклатурыИзГлавнойCMS1C_Номенклатуры(CMS1C_Номенклатура,ГлавнаяCMS1C_Номенклатура)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Свойство,
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Свойство.Наименование,
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Значение,
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Значение.Наименование
	               |ПОМЕСТИТЬ Откуда
	               |ИЗ
	               |	РегистрСведений.CMS1C_ВыбранныеСвойстваНоменклатуры КАК CMS1C_ВыбранныеСвойстваНоменклатуры
	               |ГДЕ
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.НастройкаСайта = &НастройкаСайтаОткуда
	               |	И CMS1C_ВыбранныеСвойстваНоменклатуры.Номенклатура = &НоменклатураОткуда
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Свойство,
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Свойство.Наименование,
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Значение,
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.Значение.Наименование
	               |ПОМЕСТИТЬ Куда
	               |ИЗ
	               |	РегистрСведений.CMS1C_ВыбранныеСвойстваНоменклатуры КАК CMS1C_ВыбранныеСвойстваНоменклатуры
	               |ГДЕ
	               |	CMS1C_ВыбранныеСвойстваНоменклатуры.НастройкаСайта = &НастройкаСайтаКуда
	               |	И CMS1C_ВыбранныеСвойстваНоменклатуры.Номенклатура = &НоменклатураКуда
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Откуда.Свойство, Куда.Свойство) КАК Свойство,
	               |	ЕСТЬNULL(Откуда.Значение, Куда.Значение) КАК Значение,
	               |	ВЫБОР
	               |		КОГДА Откуда.Свойство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьОткуда,
	               |	ВЫБОР
	               |		КОГДА Куда.Свойство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьКуда
	               |ИЗ
	               |	Куда КАК Куда
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Откуда КАК Откуда
	               |		ПО Куда.СвойствоНаименование = Откуда.СвойствоНаименование
	               |			И Куда.ЗначениеНаименование = Откуда.ЗначениеНаименование
	               |ГДЕ
	               |	(Куда.Свойство ЕСТЬ NULL 
	               |			ИЛИ Откуда.Свойство ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("НастройкаСайтаОткуда",ГлавнаяCMS1C_Номенклатура.НастройкаСайта);
	Запрос.УстановитьПараметр("НастройкаСайтаКуда",CMS1C_Номенклатура.НастройкаСайта);
	Запрос.УстановитьПараметр("НоменклатураОткуда",ГлавнаяCMS1C_Номенклатура);
	Запрос.УстановитьПараметр("НоменклатураКуда",CMS1C_Номенклатура);	
	
	Выб = запрос.Выполнить().Выбрать();
	//Если Выб.Количество() > 0 Тогда
		НЗ = РегистрыСведений.CMS1C_ВыбранныеСвойстваНоменклатуры.СоздатьНаборЗаписей();
	//Конецесли;
	
	Пока Выб.Следующий() Цикл
		Если Выб.ЕстьКуда Тогда
			Мен = РегистрыСведений.CMS1C_ВыбранныеСвойстваНоменклатуры.СоздатьМенеджерЗаписи();
			Мен.НастройкаСайта = CMS1C_Номенклатура.НастройкаСайта;
			Мен.Номенклатура = CMS1C_Номенклатура;
			Мен.Свойство = Выб.Свойство;
			Мен.Значение = Выб.Значение;
			Мен.Удалить();
			Продолжить;
		КонецЕсли;
		
		ТекСвойство = НайтиСвойствоПоСвойствуГлавногоСайта(Выб.Свойство,CMS1C_Номенклатура.НастройкаСайта);
		Если НЕ ЗначениеЗаполнено(ТекСвойство) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЗначение = НайтиЗначениеПоЗначениюГлавногоСайта(Выб.Значение,ТекСвойство);
		
		ДобСтрНЗ = НЗ.Добавить();
		ДобСтрНЗ.НастройкаСайта = CMS1C_Номенклатура.НАстройкаСайта;
		ДобСтрНЗ.Номенклатура = CMS1C_Номенклатура;
		ДобСтрНЗ.Свойство = ТекСвойство;
		ДобСтрНЗ.Значение = ТекЗначение;
	КонецЦикла;
	
	Если НЗ.Количество() > 0 Тогда
		Нз.Отбор.НастройкаСайта.Установить(CMS1C_Номенклатура.НастройкаСайта);
		Нз.Отбор.Номенклатура.Установить(CMS1C_Номенклатура);
		НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
		НЗ.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура СинхронизироватьАналогиCMS1C_НоменклатурыИзГлавнойCMS1C_Номенклатуры(CMS1C_Номенклатура,ГлавнаяCMS1C_Номенклатура)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_АналогиНоменклатуры.Аналог,
	               |	CMS1C_АналогиНоменклатуры.Аналог.Владелец,
	               |	CMS1C_АналогиНоменклатуры.ТипРекомендуемыхТоваров
	               |ПОМЕСТИТЬ Откуда
	               |ИЗ
	               |	РегистрСведений.CMS1C_АналогиНоменклатуры КАК CMS1C_АналогиНоменклатуры
	               |ГДЕ
	               |	CMS1C_АналогиНоменклатуры.НастройкаСайта = &НастройкаСайтаОткуда
	               |	И CMS1C_АналогиНоменклатуры.Номенклатура = &НоменклатураОткуда
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CMS1C_АналогиНоменклатуры.Аналог,
	               |	CMS1C_АналогиНоменклатуры.Аналог.Владелец,
	               |	CMS1C_АналогиНоменклатуры.ТипРекомендуемыхТоваров
	               |ПОМЕСТИТЬ Куда
	               |ИЗ
	               |	РегистрСведений.CMS1C_АналогиНоменклатуры КАК CMS1C_АналогиНоменклатуры
	               |ГДЕ
	               |	CMS1C_АналогиНоменклатуры.НастройкаСайта = &НастройкаСайтаКуда
	               |	И CMS1C_АналогиНоменклатуры.Номенклатура = &НоменклатураКуда
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Откуда.Аналог, Куда.Аналог) КАК Аналог,
	               |	ЕСТЬNULL(Откуда.АналогВладелец, Куда.АналогВладелец) КАК АналогВладелец,
	               |	ЕСТЬNULL(Откуда.ТипРекомендуемыхТоваров, Куда.ТипРекомендуемыхТоваров) КАК ТипРекомендуемыхТоваров,
	               |	ВЫБОР
	               |		КОГДА Откуда.АналогВладелец ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьОткуда,
	               |	ВЫБОР
	               |		КОГДА Куда.АналогВладелец ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьКуда
	               |ИЗ
	               |	Откуда КАК Откуда
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Куда КАК Куда
	               |		ПО Откуда.АналогВладелец = Куда.АналогВладелец
	               |			И Откуда.ТипРекомендуемыхТоваров = Куда.ТипРекомендуемыхТоваров
	               |ГДЕ
	               |	(Куда.АналогВладелец ЕСТЬ NULL 
	               |			ИЛИ Откуда.АналогВладелец ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("НастройкаСайтаОткуда",ГлавнаяCMS1C_Номенклатура.НастройкаСайта);
	Запрос.УстановитьПараметр("НастройкаСайтаКуда",CMS1C_Номенклатура.НастройкаСайта);
	Запрос.УстановитьПараметр("НоменклатураОткуда",ГлавнаяCMS1C_Номенклатура);
	Запрос.УстановитьПараметр("НоменклатураКуда",CMS1C_Номенклатура);
	
	Выб = запрос.Выполнить().Выбрать();
	//Если Выб.Количество() > 0 Тогда
		НЗ = РегистрыСведений.CMS1C_АналогиНоменклатуры.СоздатьНаборЗаписей();
	//Конецесли;
	
	Пока Выб.Следующий() Цикл
		Если Выб.ЕстьКуда Тогда
			Мен = РегистрыСведений.CMS1C_АналогиНоменклатуры.СоздатьМенеджерЗаписи();
			Мен.НастройкаСайта = CMS1C_Номенклатура.НастройкаСайта;
			Мен.Номенклатура = CMS1C_Номенклатура;
			Мен.Аналог = Выб.Аналог;
			Мен.ТипРекомендуемыхТоваров = Выб.ТипРекомендуемыхТоваров;
			Мен.Удалить();
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_Номенклатура.Ссылка
		|ИЗ
		|	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
		|ГДЕ
		|	CMS1C_Номенклатура.Владелец = &Владелец
		|	И CMS1C_Номенклатура.НастройкаСайта = &НастройкаСайта";
		Запрос.УстановитьПараметр("НастройкаСайта",CMS1C_Номенклатура.НастройкаСайта);
		Запрос.УстановитьПараметр("Владелец",Выб.АналогВладелец);
		ВыбАналог = Запрос.Выполнить().Выбрать();
		Если Не ВыбАналог.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		
		
		ДобСтрНЗ = НЗ.Добавить();
		ДобСтрНЗ.НастройкаСайта = CMS1C_Номенклатура.НАстройкаСайта;
		ДобСтрНЗ.Номенклатура = CMS1C_Номенклатура;
		ДобСтрНЗ.Аналог = ВыбАналог.Ссылка;
		ДобСтрНЗ.ТипРекомендуемыхТоваров = Выб.ТипРекомендуемыхТоваров;
	КонецЦикла;
	
	Если НЗ.Количество() > 0 Тогда
		НЗ.Отбор.НастройкаСайта.Установить(CMS1C_Номенклатура.НастройкаСайта);
		НЗ.Отбор.Номенклатура.Установить(CMS1C_Номенклатура);
		НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
		НЗ.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

//Процедура СинхронизироватьКатегорииНоменклатурыИзГлавнойCMS1C_Номенклатуры(CMS1C_Номенклатура,ГлавнаяCMS1C_Номенклатура)
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//	|	CMS1C_АналогиНоменклатуры.Аналог,
//	|	CMS1C_АналогиНоменклатуры.Аналог.Владелец,
//	|	CMS1C_АналогиНоменклатуры.ТипРекомендуемыхТоваров
//	|ПОМЕСТИТЬ Откуда
//	|ИЗ
//	|	РегистрСведений.CMS1C_АналогиНоменклатуры КАК CMS1C_АналогиНоменклатуры
//	|ГДЕ
//	|	CMS1C_АналогиНоменклатуры.НастройкаСайта = &НастройкаСайтаОткуда
//	|	И CMS1C_АналогиНоменклатуры.Номенклатура = &НоменклатураОткуда
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	CMS1C_АналогиНоменклатуры.Аналог,
//	|	CMS1C_АналогиНоменклатуры.Аналог.Владелец,
//	|	CMS1C_АналогиНоменклатуры.ТипРекомендуемыхТоваров
//	|ПОМЕСТИТЬ Куда
//	|ИЗ
//	|	РегистрСведений.CMS1C_АналогиНоменклатуры КАК CMS1C_АналогиНоменклатуры
//	|ГДЕ
//	|	CMS1C_АналогиНоменклатуры.НастройкаСайта = &НастройкаСайтаКуда
//	|	И CMS1C_АналогиНоменклатуры.Номенклатура = &НоменклатураКуда
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЕСТЬNULL(Откуда.Аналог, Куда.Аналог) КАК Аналог,
//	|	ЕСТЬNULL(Откуда.АналогВладелец, Куда.АналогВладелец) КАК АналогВладелец,
//	|	ЕСТЬNULL(Откуда.ТипРекомендуемыхТоваров, Куда.ТипРекомендуемыхТоваров) КАК ТипРекомендуемыхТоваров
//	|ИЗ
//	|	Откуда КАК Откуда
//	|		ПОЛНОЕ СОЕДИНЕНИЕ Куда КАК Куда
//	|		ПО Откуда.АналогВладелец = Куда.АналогВладелец
//	|			И Откуда.ТипРекомендуемыхТоваров = Куда.ТипРекомендуемыхТоваров
//	|ГДЕ
//	|	(Куда.АналогВладелец ЕСТЬ NULL 
//	|			ИЛИ Откуда.АналогВладелец ЕСТЬ NULL )";
//	Запрос.УстановитьПараметр("НастройкаСайтаОткуда",ГлавнаяCMS1C_Номенклатура.НастройкаСайта);
//	Запрос.УстановитьПараметр("НастройкаСайтаКуда",CMS1C_Номенклатура.НастройкаСайта);
//	Запрос.УстановитьПараметр("НоменклатураОткуда",ГлавнаяCMS1C_Номенклатура);
//	Запрос.УстановитьПараметр("НоменклатураКуда",CMS1C_Номенклатура);
//	
//	Выб = запрос.Выполнить().Выбрать();
//	//Если Выб.Количество() > 0 Тогда
//		НЗ = РегистрыСведений.CMS1C_АналогиНоменклатуры.СоздатьНаборЗаписей();
//	//Конецесли;
//	
//	Пока Выб.Следующий() Цикл
//		Если Выб.ЕстьКуда Тогда
//			Мен = РегистрыСведений.CMS1C_АналогиНоменклатуры.СоздатьМенеджерЗаписи();
//			Мен.НастройкаСайта = CMS1C_Номенклатура.НастройкаСайта;
//			Мен.Номенклатура = CMS1C_Номенклатура;
//			Мен.Аналог = Выб.Аналог;
//			Мен.ТипРекомендуемыхТоваров = Выб.ТипРекомендуемыхТоваров;
//			Мен.Удалить();
//			Продолжить;
//		КонецЕсли;
//		
//		Запрос = Новый Запрос();
//		Запрос.Текст = "ВЫБРАТЬ
//		|	CMS1C_Номенклатура.Ссылка
//		|ИЗ
//		|	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
//		|ГДЕ
//		|	CMS1C_Номенклатура.Владелец = &Владелец
//		|	И CMS1C_Номенклатура.НастройкаСайта = &НастройкаСайта";
//		Запрос.УстановитьПараметр("НастройкаСайта",CMS1C_Номенклатура.НастройкаСайта);
//		Запрос.УстановитьПараметр("Владелец",Выб.АналогВладелец);
//		ВыбАналог = Запрос.Выполнить().Выбрать();
//		Если Не ВыбАналог.Следующий() Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		
//		ДобСтрНЗ = НЗ.Добавить();
//		ДобСтрНЗ.НастройкаСайта = CMS1C_Номенклатура.НАстройкаСайта;
//		ДобСтрНЗ.Номенклатура = CMS1C_Номенклатура;
//		ДобСтрНЗ.Аналог = ВыбАналог.Ссылка;
//		ДобСтрНЗ.ТипРекомендуемыхТоваров = Выб.ТипРекомендуемыхТоваров;
//	КонецЦикла;
//	
//	Если НЗ.Количество() > 0 Тогда
//		НЗ.Отбор.НастройкаСайта.Установить(CMS1C_Номенклатура);
//		НЗ.Отбор.Номенклатура.Установить(CMS1C_Номенклатура);
//		НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
//		НЗ.Записать();
//	КонецЕсли;
//КонецПроцедуры

Функция НайтиСвойствоПоСвойствуГлавногоСайта(ГлавноеСвойство,НастройкаСайта)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_СвойстваОбъектов.Ссылка,
	|	CMS1C_СвойстваОбъектов.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
	|ГДЕ
	|	CMS1C_СвойстваОбъектов.НастройкаСайта = &НастройкаСайта
	|	И ВЫБОР
	|			КОГДА &ЗаполненоСвойство
	|				ТОГДА CMS1C_СвойстваОбъектов.СвойствоНоменклатуры = &СвойствоНоменклатуры
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И CMS1C_СвойстваОбъектов.ЭтоХарактеристика = &ЭтоХарактеристика
	|	И CMS1C_СвойстваОбъектов.Наименование = &Наименование
	|	И CMS1C_СвойстваОбъектов.ЕстьВыбор = &ЕстьВыбор
	|	И CMS1C_СвойстваОбъектов.МножественныйВыбор = &МножественныйВыбор";
	Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
	Запрос.УстановитьПараметр("ЗаполненоСвойство",ЗначениеЗаполнено(ГлавноеСвойство.СвойствоНоменклатуры));
	Запрос.УстановитьПараметр("СвойствоНоменклатуры",ГлавноеСвойство.СвойствоНоменклатуры);
	Запрос.УстановитьПараметр("ЭтоХарактеристика",ГлавноеСвойство.ЭтоХарактеристика);
	Запрос.УстановитьПараметр("Наименование",ГлавноеСвойство.Наименование);
	Запрос.УстановитьПараметр("ЕстьВыбор",ГлавноеСвойство.ЕстьВыбор);
	Запрос.УстановитьПараметр("МножественныйВыбор",ГлавноеСвойство.МножественныйВыбор);
	
	ВЫб= Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат ВЫб.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция НайтиЗначениеПоЗначениюГлавногоСайта(ГлавноеЗначение,Свойство)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.Ссылка
	|ИЗ
	|	Справочник.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И CMS1C_ЗначенияСвойствОбъектов.Наименование = &Наименование
	|	И CMS1C_ЗначенияСвойствОбъектов.ЗначениеЧисло = &ЗначениеЧисло
	|	И CMS1C_ЗначенияСвойствОбъектов.ЗначениеСтрока = &ЗначениеСтрока";
	Запрос.УстановитьПараметр("Владелец",Свойство);
	Запрос.УстановитьПараметр("Наименование",ГлавноеЗначение.Наименование);
	Запрос.УстановитьПараметр("ЗначениеЧисло",ГлавноеЗначение.ЗначениеЧисло);
	Запрос.УстановитьПараметр("ЗначениеСтрока",ГлавноеЗначение.ЗначениеСтрока);	
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.ссылка;
	КонецЕсли;
	
	Об = Справочники.CMS1C_ЗначенияСвойствОбъектов.СоздатьЭлемент();
	Об.Владелец = Свойство;
	Об.Наименование = ГлавноеЗначение.Наименование;
	Об.ЗначениеСтрока = ГлавноеЗначение.ЗначениеСтрока;
	Об.ЗначениеЧисло = ГлавноеЗначение.ЗначениеЧисло;
	Об.Сортировка = ГлавноеЗначение.Сортировка;
	Об.Записать();
	
	Возврат Об.Ссылка;
КонецФункции

Функция НайтиКатегориюИзГлавной(ГлавнаяКатегория,НастройкаСайта)
	Если Не ЗначениеЗаполнено(ГлавнаяКатегория) Тогда
		Возврат Справочники.CMS1C_Категории.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаКатегорий = Новый ТаблицаЗначений;
	ТаблицаКатегорий.Колонки.Добавить("Категория");
	ТаблицаКатегорий.Колонки.Добавить("НаименованиеКатегории");
	ТаблицаКатегорий.Колонки.Добавить("Уровень");
	
	ТекГлавнаяКатегория = ГлавнаяКатегория;
	Пока Истина Цикл
		ДобСтр = ТаблицаКатегорий.Добавить();
		ДобСтр.Категория = ТекГлавнаяКатегория;
		Добстр.НаименованиеКатегории = СокрЛП(ТекГлавнаяКатегория.Наименование);
		ДобСтр.Уровень = ТекГлавнаяКатегория.Уровень();
		
		ТекГлавнаяКатегория = ТекГлавнаяКатегория.Родитель;
		Если Не ЗначениеЗаполнено(ТекГлавнаяКатегория) Тогда
			Прервать;
		Конецесли;
	КонецЦикла;
	
	ТаблицаКатегорий.Сортировать("Уровень");
	ТекРодитель = Неопределено;
	НайдКатегория = Неопределено;
	Для Каждого СтрТз из ТаблицаКатегорий Цикл
		Если ТекРодитель = Неопределено Тогда
			НайдКАтегория = Справочники.CMS1C_Категории.НайтиПоНаименованию(СтрТз.НаименованиеКатегории,Истина,,НастройкаСайта);
		Иначе
			НайдКАтегория = Справочники.CMS1C_Категории.НайтиПоНаименованию(СтрТз.НаименованиеКатегории,Истина,ТекРодитель,НастройкаСайта);
		КонецЕсли;
		
			Если НайдКАтегория.Пустая() Тогда
				Возврат Неопределено;
			КонецЕсли;
			ТекРодитель = НайдКатегория;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НайдКатегория) Тогда
		Возврат НайдКатегория;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Процедура НайтиИлиСоздатьКаталог(Путь) Экспорт
	МасНайд = НайтиФайлы(Путь);
	Если МасНайд.Количество() = 0 Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьФайлWatermarkНаДиск(ПутьКФайлуWatermark,img,НастройкаСайта,ДобСловоWatermark="") Экспорт
	img = ПолучитьОбъектImagemagick();
	
	Если img = Неопределено Тогда
		ПутьКФайлуWatermark = Неопределено;
		Возврат;
	КонецЕсли;
	
	Картинка = НастройкаСайта["Watermark"+ДобСловоWatermark].Получить();
	Если Картинка = Неопределено Тогда
		ПутьКФайлуWatermark = Неопределено;
		Возврат;
	КонецЕсли;
	
	ТекФорматКартинки = Картинка.Формат();
	ПутьКФайлуWatermark = ПолучитьИмяВременногоФайла(СокрЛП(ТекФорматКартинки));
	
	Картинка.Записать(ПутьКФайлуWatermark);
КонецПроцедуры

Функция получитьОбъектImageMagick()
	ЕстьОбъект = Ложь;
	Ответ=Неопределено; 
	Попытка
		COM =  Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
		ЕстьОбъект = Истина;   		
	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если НЕ ЕстьОбъект ТОгда
		Конверт = ПолучитьИмяВременногоФайла("zip");//КаталогПрограммы();
		ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_Magic");
		ПрогаИзПамяти.Записать(Конверт);
		ФайлАрхива = Новый ЧтениеZIPФайла(Конверт); 
		ФайлАрхива.ИзвлечьВсе(КаталогПрограммы(), РежимВосстановленияПутейФайловZIP.Восстанавливать); 
		ФайлАрхива.Закрыть();
		ЗапуститьПриложение("regsvr32 /c /s """+КаталогПрограммы()+"ImageMagickObject\ImageMagickObject.dll""",,Истина);
		
		
		Попытка
			COM = Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
			ЕстьОбъект = Истина;
		Исключение	
			возврат Неопределено;	
		КонецПопытки;
		
	КонецЕсли;
	Возврат COM;
КонецФункции

Функция ПорезатьКартинкуПоФормату(ФорматИзображения,Ширина,Высота,ИзображениеСсылка,ПутьКартинки,НастройкаСайта,ПутьКартинкиКудаСкопировать) Экспорт
	ТекШиринаИзображения = ИзображениеСсылка.Ширина;
	ТекВысотаИзображения = ИзображениеСсылка.Высота;
	Если ФорматИзображения = Перечисления.CMS1C_ВидФорматаИзображения.МаксШиринаВысота Тогда
		ТекМаксимальнаяСторона = Макс(ТекШиринаИзображения,ТекВысотаИзображения);
		
		Если ТекМаксимальнаяСторона > Ширина Тогда
			НадоРезать = Истина;
		Иначе
			НадоРезать = Ложь;
		КонецЕсли;
		
		Если НадоРезать ТОгда
			ТекПутьКартинки = ПолучитьИмяВременногоФайла(ИзображениеСсылка.Расширение);
			
			Если ТекШиринаИзображения = ТекМаксимальнаяСторона Тогда
				НоваяШиринаИзображения = Ширина;
			Иначе
				НоваяШиринаИзображения = ОКР(Ширина/ТекМаксимальнаяСторона * ТекШиринаИзображения,0);
			КонецЕсли;
			
			Если ТекВысотаИзображения = ТекМаксимальнаяСторона Тогда
				НоваяВысотаИзображения = Ширина;
			Иначе
				НоваяВысотаИзображения = ОКР(Ширина/ТекМаксимальнаяСторона * ТекВысотаИзображения,0);
			КонецЕсли;
			CMS1C_ПроцедурыОбменаССайтом.ПодготовитьРисунок(ПутьКартинки,НоваяШиринаИзображения,НоваяВысотаИзображения,ТекПутьКартинки,"",НастройкаСайта);
		Иначе
			ТекПутьКартинки = ПутьКартинки;
		КонецЕсли;
	ИначеЕсли ФорматИзображения = Перечисления.CMS1C_ВидФорматаИзображения.ШиринаЗадаётсяВысотаАвто Тогда
		Если ТекШиринаИзображения > Ширина Тогда
			НадоРезать = Истина;
		Иначе
			НадоРезать = Ложь;
		КонецЕсли;
		
		Если НадоРезать ТОгда
			ТекПутьКартинки = ПолучитьИмяВременногоФайла(ИзображениеСсылка.Расширение);
			
			НоваяШиринаИзображения = Ширина;
			НоваяВысотаИзображения = ОКР(Ширина/ТекШиринаИзображения * ТекВысотаИзображения,0);
			
			CMS1C_ПроцедурыОбменаССайтом.ПодготовитьРисунок(ПутьКартинки,НоваяШиринаИзображения,НоваяВысотаИзображения,ТекПутьКартинки,"",НастройкаСайта);
		Иначе
			ТекПутьКартинки = ПутьКартинки;
		КонецЕсли;
	ИначеЕсли ФорматИзображения = Перечисления.CMS1C_ВидФорматаИзображения.ШиринаАвтоВысотаЗадаётся Тогда
		Если ТекВысотаИзображения > Высота Тогда
			НадоРезать = Истина;
		Иначе
			НадоРезать = Ложь;
		КонецЕсли;
		
		Если НадоРезать ТОгда
			ТекПутьКартинки = КаталогВременныхФайлов() + ПолучитьИмяВременногоФайла(ИзображениеСсылка.Расширение);;
			
			НоваяВысотаИзображения = Высота;
			НоваяШиринаИзображения = ОКР(Высота/ТекВысотаИзображения * ТекШиринаИзображения,0);
			
			CMS1C_ПроцедурыОбменаССайтом.ПодготовитьРисунок(ПутьКартинки,НоваяШиринаИзображения,НоваяВысотаИзображения,ТекПутьКартинки,"",НастройкаСайта);
		Иначе
			ТекПутьКартинки = ПутьКартинки;
		КонецЕсли;
	ИначеЕсли ФорматИзображения = Перечисления.CMS1C_ВидФорматаИзображения.КвадратнаяОбрезка Тогда
		ТекМаксимальнаяСторона = Макс(ТекШиринаИзображения,ТекВысотаИзображения);
		
		Если ТекМаксимальнаяСторона > Ширина Тогда
			НадоРезать = Истина;
		Иначе
			НадоРезать = Ложь;
		КонецЕсли;
		
		Если НадоРезать ТОгда
			ТекПутьКартинки = ПолучитьИмяВременногоФайла(ИзображениеСсылка.Расширение);
			
			Если ТекШиринаИзображения = ТекМаксимальнаяСторона Тогда
				НоваяШиринаИзображения = Ширина;
			Иначе
				НоваяШиринаИзображения = ОКР(Ширина/ТекМаксимальнаяСторона * ТекШиринаИзображения,0);
			КонецЕсли;
			
			Если ТекВысотаИзображения = ТекМаксимальнаяСторона Тогда
				НоваяВысотаИзображения = Ширина;
			Иначе
				НоваяВысотаИзображения = ОКР(Ширина/ТекМаксимальнаяСторона * ТекВысотаИзображения,0);
			КонецЕсли;
			CMS1C_ПроцедурыОбменаССайтом.ПодготовитьРисунок(ПутьКартинки,НоваяШиринаИзображения,НоваяВысотаИзображения,ТекПутьКартинки,"",НастройкаСайта);
		Иначе
			ТекПутьКартинки = ПутьКартинки;
		КонецЕсли;
	ИначеЕсли ФорматИзображения = Перечисления.CMS1C_ВидФорматаИзображения.ПрямоугольнаяОбрезка Тогда
		ТекМаксимальнаяСторона = Макс(ТекШиринаИзображения,ТекВысотаИзображения);
		
		Если ТекШиринаИзображения > Ширина
			ИЛИ ТекВысотаИзображения > Высота
			Тогда
			НадоРезать = Истина;
		Иначе
			НадоРезать = Ложь;
		КонецЕсли;
		
		Если НадоРезать ТОгда
			ТекПутьКартинки = ПолучитьИмяВременногоФайла(ИзображениеСсылка.Расширение);
			
			КэфШирины = ТекШиринаИзображения / Ширина;
			КэфВысоты = ТекВысотаИзображения / Высота;
			
			Если КэфШирины > КэфВысоты Тогда
				НоваяШиринаИзображения = Ширина;
				НоваяВысотаИзображения = ОКР(ТекВысотаИзображения / КэфШирины,0);
			Иначе
				НоваяВысотаИзображения = Высота;
				НоваяШиринаИзображения = ОКР(ТекШиринаИзображения / КэфВысоты,0);
			КонецЕсли;
			CMS1C_ПроцедурыОбменаССайтом.ПодготовитьРисунок(ПутьКартинки,НоваяШиринаИзображения,НоваяВысотаИзображения,ТекПутьКартинки,"",НастройкаСайта);
		Иначе
			ТекПутьКартинки = ПутьКартинки;
		КонецЕсли;
	КонецЕсли;
	
	КопироватьФайл(ТекПутьКартинки,ПутьКартинкиКудаСкопировать);
	Возврат ТекПутьКартинки;
КонецФункции

Функция обработатьФормат(Формат) Экспорт
	Формат = НРЕГ(Формат);
	Если Формат = "jpeg" тогда
		Формат = "jpg";
	Конецесли;
КонецФункции

Процедура ЗаполнитьИзображения(СсылкаНаОбъект,ТЧИзображения,НастройкаСайта) Экспорт
	ТЧИзображения.Очистить();
	Запрос = новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_Изображения.Ссылка,
	               |	CMS1C_Изображения.Владелец,
	               |	CMS1C_Изображения.Код,
	               |	CMS1C_Изображения.Наименование,
	               |	CMS1C_Изображения.Хранилище,
	               |	ВЫБОР
	               |		КОГДА CMS1C_Изображения.Ссылка = CMS1C_Изображения.Владелец.ОсновноеИзображение
	               |			ТОГДА -1
	               |		ИНАЧЕ CMS1C_Изображения.Сортировка
	               |	КОНЕЦ КАК ПорядокСортировки,
	               |	CMS1C_Изображения.Размер,
	               |	CMS1C_Изображения.Ширина,
	               |	CMS1C_Изображения.Высота,
	               |	CMS1C_Изображения.Расширение,
	               |	CMS1C_Изображения.ID,
	               |	CMS1C_Изображения.Описание,
	               |	CMS1C_Изображения.ХранилищеСред,
	               |	CMS1C_Изображения.ХранилищеМал,
	               |	CMS1C_Изображения.НаименованиеСред,
	               |	CMS1C_Изображения.НаименованиеМал
	               |ИЗ
	               |	Справочник.CMS1C_Изображения КАК CMS1C_Изображения
	               |ГДЕ
	               |	CMS1C_Изображения.Владелец = &Владелец
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядокСортировки";
	Запрос.УстановитьПараметр("Владелец",СсылкаНаОбъект);
	Выб = Запрос.Выполнить().Выбрать();
	НС = -1;
	Пока Выб.Следующий() Цикл
		НС = НС + 1;
		ДобСтр = ТЧИзображения.Добавить();
		ЗаполнитьЗначенияСвойств(ДобСтр,Выб);
		
		ДобСтр.Картинка = CMS1C_ПроцедурыОбменаССайтом.ПолучитьИзображениеCMS1C_Изображения(Выб.Ссылка,НастройкаСайта,"",Ложь);
		ДобСтр.КартинкаМал = CMS1C_ПроцедурыОбменаССайтом.ПолучитьИзображениеCMS1C_Изображения(Выб.Ссылка,НастройкаСайта,"Мал",Ложь);
		ДобСтр.КартинкаСред = CMS1C_ПроцедурыОбменаССайтом.ПолучитьИзображениеCMS1C_Изображения(Выб.Ссылка,НастройкаСайта,"Сред",Ложь);
		ДобСтр.Сортировка = НС;
		ДобСтр.СсылкаНаИзображение = Выб.Ссылка;
	КонецЦикла;
КонецПРоцедуры

Функция ВыполнитьТекстКода(ТекстКода,Параметры=Неопределено,НазваниеОбработчика = Неопределено) Экспорт
	Попытка
		 ВЫполнить(ТекстКода);
	 Исключение
		 Сообщить(ТекстКода);
		 Описаниеошибки = ОписаниеОшибки();
		 Сообщить(ОписаниеОшибки());
		 ВызватьИсключение Описаниеошибки;
	 КонецПопытки;
КонецФункции

Функция ВычислитьЗначениеЯчейки(СтрокаТаблицыРезультатаСинхронизации,Знач Выражение,Знач ТекущиеДанные,Знач Результат,Обработка) Экспорт
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ОписаниеОшибки = "";
	Попытка
		Выполнить(Выражение);
	Исключение
		ТекОписаниеОшибки = ОписаниеОшибки();
		Сообщить(Выражение);
		Сообщить(ТекОписаниеОшибки);
		ВызватьИсключение ТекОписаниеОшибки;
	КонецПопытки;
	
	Возврат Новый Структура("Результат,ОписаниеОшибки",Результат,ОписаниеОшибки);
КонецФункции
 
Функция ПолучитьЗначениеРЕквизитаОБъекта(Объект,ИмяРеквизита1,ИмяРеквизита2=Неопределено) Экспорт
	ЗначениеРеквизита = Объект[ИмяРеквизита1];
	
	Если ИмяРеквизита2=Неопределено Тогда
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	Возврат ЗначениеРеквизита[ИмяРеквизита2];
КонецФункции

Функция ЗначенияСвойстваСсылочные(ТекСвойство) Экспорт
	Об = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(ТекСвойство.НастройкаСайта);
	Возврат Об.ЗначенияСвойстваСсылочные(ТекСвойство);
КонецФункции

Процедура CMS1C_ЗаписатьВесНоменклатурыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	Конецесли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ЕдиницыИзмерения") Тогда
		 Если Источник.Ссылка <> Источник.Владелец.ЕдиницаХраненияОстатков Тогда
			 Возврат;
		 КонецЕсли;
		 ТекЕдиница = Источник.Ссылка;
	 Иначе
		 Если Источник.ЭтоГруппа Тогда
			 Возврат;
		 КонецЕсли;
		 
		 ТекЕдиница = Источник.ЕдиницаХраненияОстатков;
	 Конецесли;
	 
	 ТекВес = ТекЕдиница.Вес*1000;
	 
	 МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	 
	 Для Каждого ТекущаяCMS из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.ЗаписатьВесНоменклатурыПриЗаписи(ТекЕдиница);
		
		Если Результат = Истина Тогда //Не надо выполнять стандартный обработчик
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	CMS1C_Номенклатура.Ссылка
		               |ПОМЕСТИТЬ ВсеТовары
		               |ИЗ
		               |	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
		               |ГДЕ
		               |	CMS1C_Номенклатура.Владелец = &Владелец
		               |	И CMS1C_Номенклатура.НастройкаСайта.СистемаУправленияСайтом = &СистемаУправленияСайтом
		               |	И CMS1C_Номенклатура.НастройкаСайта.СвойствоВес <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.CMS1C_СвойстваОбъектов.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта,
		               |	CMS1C_ЗначенияСвойствОбъектов.Номенклатура,
		               |	CMS1C_ЗначенияСвойствОбъектов.Объект,
		               |	CMS1C_ЗначенияСвойствОбъектов.Свойство,
		               |	CMS1C_ЗначенияСвойствОбъектов.Значение,
		               |	CMS1C_ЗначенияСвойствОбъектов.ПоУмолчанию
		               |ПОМЕСТИТЬ ВсеЗначения
		               |ИЗ
		               |	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
		               |ГДЕ
		               |	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта.СистемаУправленияСайтом = &СистемаУправленияСайтом
		               |	И CMS1C_ЗначенияСвойствОбъектов.Номенклатура = &Владелец
		               |	И CMS1C_ЗначенияСвойствОбъектов.Свойство = CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта.СвойствоВес
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВсеЗначения.Номенклатура,
		               |	ВсеТовары.Ссылка КАК CMS1C_Номенклатура,
		               |	ВсеЗначения.Свойство,
		               |	ВсеЗначения.Значение,
		               |	ВсеЗначения.ПоУмолчанию,
		               |	ВсеТовары.Ссылка.НастройкаСайта.СистемаУправленияСайтом КАК СистемаУправленияСайтом,
		               |	ВсеТовары.Ссылка.НастройкаСайта КАК НастройкаСайта,
		               |	ВсеТовары.Ссылка.НастройкаСайта.СвойствоВес КАК СвойствоВес
		               |ИЗ
		               |	ВсеТовары КАК ВсеТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеЗначения КАК ВсеЗначения
		               |		ПО ВсеТовары.Ссылка = ВсеЗначения.Объект";
		Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
		Запрос.УстановитьПараметр("Владелец",ТекЕдиница.Владелец);
		
		//ВыборкаНастроек = Справочники.CMS1C_НастройкиСайтов.Выбрать(,,Новый Структура("СинхронизироватьСвойстваДопДанныхИзСвойствИРеквизитовНоменклатуры1С",Истина));
		
		Выб = запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Если ЗначениеЗаполнено(ТекВес) тогда
				ТекЗначение = НайтиИлиСоздатьЗначениеСвойстваОбъекта(Выб.СвойствоВес,ТекВес);
				
				Если Выб.Значение = NULL Тогда
					Мен = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Мен.НастройкаСайта = Выб.НастройкаСайта;
					мен.Номенклатура = Выб.CMS1C_Номенклатура.Владелец;
					Мен.Объект = Выб.CMS1C_Номенклатура;
					Мен.Свойство = Выб.СвойствоВес;
					Мен.Значение = ТекЗначение;
					Мен.Записать();
				ИначеЕсли ТекЗначение <> Выб.Значение Тогда
					Мен = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Мен.НастройкаСайта = Выб.НастройкаСайта;
					мен.Номенклатура = Выб.CMS1C_Номенклатура.Владелец;
					Мен.Объект = Выб.CMS1C_Номенклатура;
					Мен.Свойство = Выб.СвойствоВес;
					Мен.Значение = Выб.Значение;
					Мен.Удалить();
					
					Мен = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Мен.НастройкаСайта = Выб.НастройкаСайта;
					мен.Номенклатура = Выб.CMS1C_Номенклатура.Владелец;
					Мен.Объект = Выб.CMS1C_Номенклатура;
					Мен.Свойство = Выб.СвойствоВес;
					Мен.Значение = ТекЗначение;
					Мен.Записать();
				Иначе
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗначениеФункциональнойОпции(СистемаУправленияСайтом,ИмяПараметра)
	Запрос = НОвый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_ПараметрыФункциональныхОпций.СистемаУправленияСайтом,
	               |	CMS1C_ПараметрыФункциональныхОпций."+ИмяПараметра+"
	               |ИЗ
	               |	РегистрСведений.CMS1C_ПараметрыФункциональныхОпций КАК CMS1C_ПараметрыФункциональныхОпций
	               |ГДЕ
	               |	CMS1C_ПараметрыФункциональныхОпций.СистемаУправленияСайтом = &СистемаУправленияСайтом";
				   Запрос.УстановитьПараметр("СистемаУправленияСайтом",СистемаУправленияСайтом);
				   Выб = Запрос.Выполнить().Выбрать();
				   если ВЫб.Следующий() Тогда
					   Возврат Выб[ИмяПараметра];
				   КонецЕсли;
				   Возврат Неопределено;
КонецФункции

Процедура ПриЗаписиCMS1C_НоменклатурыЗаписатьДанныеНоменклатурыПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS Из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.ПриЗаписиCMS1C_НоменклатурыЗаписатьДанныеНоменклатурыПриЗаписи(Источник, Отказ);
		
		Если РЕзультат = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НадоЗаписатьНоменклатуру = Ложь;
		Если ЗначениеЗаполнено(Источник.Артикул)
			И Источник.Артикул = Источник.Владелец.Артикул Тогда
			НадоЗаписатьНоменклатуру = Истина;
		КонецЕсли;
		
		Если Источник.Наименование <> Источник.Владелец.Наименование Тогда
			НадоЗаписатьНоменклатуру = Истина;
		КонецЕсли;
		
		Если НадоЗаписатьНоменклатуру Тогда
			ОБ = Источник.Владелец.ПолучитьОбъект();
			Об.Артикул = Источник.Артикул;
			Об.Наименование = Источник.Наименование;
			Об.ДополнительныеСвойства.Вставить("НадоЗаписать");
			//Об.ОбменДанными.Загрузка = Истина;
			Об.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПриЗаписиНоменклатурыЗаписатьДанныеCMS1C_НоменклатурыПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	КонецЕсли;
	
	МассивCMS = ПолучитьМассивСистемУправленияСайтами();
	
	Для Каждого ТекущаяCMS Из МассивCMS Цикл
		Обработка = Обработки["CMS1C_"+СокрЛП(ТекущаяCMS)+"_ОбработкаОбмена"].Создать();
		Результат = Обработка.ПриЗаписиНоменклатурыЗаписатьДанныеCMS1C_НоменклатурыПриЗаписи(Источник, Отказ);
		
		Если РЕзультат = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	CMS1C_Номенклатура.Ссылка,
		               |	CMS1C_Номенклатура.Артикул,
		               |	CMS1C_Номенклатура.Вес,
		               |	CMS1C_Номенклатура.Наименование
		               |ИЗ
		               |	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
		               |ГДЕ
		               |	CMS1C_Номенклатура.Владелец = &Владелец
		               |	И CMS1C_Номенклатура.НастройкаСайта.СистемаУправленияСайтом = &СистемаУправленияСайтом";
					   Запрос.УстановитьПараметр("Владелец",Источник.Ссылка);
					   Запрос.УстановитьПараметр("СистемаУправленияСайтом",ТекущаяCMS);
		ВЫб = Запрос.Выполнить().Выбрать();
		Пока ВЫб.Следующий() Цикл
			НадоЗаписать = Ложь;
			
			Если ВЫб.Артикул <> Источник.Артикул Тогда
				НадоЗаписать = Истина;
			КонецеСли;
			
			Если ВЫб.Вес <> Источник.ЕдиницаХраненияОстатков.Вес Тогда
				НадоЗаписать = Истина;
			Конецесли;
			
			Если ВЫб.Наименование <> Источник.Наименование Тогда
				НадоЗаписать = Истина;
			КонецЕсли;
			
			Если НадоЗаписать Тогда
				Об = Выб.Ссылка.ПолучитьОбъект();
				Об.Наименование = Источник.Наименование;
				Об.Вес = Источник.ЕдиницаХраненияОстатков.Вес;
				Об.Артикул = Источник.Артикул;
				Об.ДополнительныеСвойства.Вставить("НадоЗаписать");
				Об.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьРезервПоЗаказу(ЗаказОбъект,НастройкаСайта,IDЗаказа) Экспорт
	Если ЗаказОбъект.ПРоведен Тогда
		ЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	Если ЗаказОбъект.ПометкаУдаления Тогда
		ЗаказОбъект.УстановитьПометкуУдаления(ЛОжь);
	Конецесли;
	
	ТекОтказ = Ложь;
	ТекРежимПРоведения = РежимПроведенияДокумента.Неоперативный;
	ПослеЗаписиЗаказаПокупателяПопытатьсяЗакрыть(ЗаказОбъект,ТекОтказ,ТекРежимПроведения);
	
	Если настройкаСайта.МетодРезервированияЗаказов = 1 Тогда
		Попытка
			БылаДата = ЗаказОбъект.Дата;
			ЗаказОбъект.Дата = ТекущаяДата();
			ОбособленныйУчет = ЗначениеЗаполнено(ЗаказОбъект.ДоговорКонтрагента)
			И ЗаказОбъект.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заказ",ЗаказОбъект);
			СтруктураПараметров.Вставить("РезервироватьПоСериям",ЛОЖь);
			СтруктураПараметров.Вставить("ОбособленныйУчет",Ложь);
			СтруктураПараметров.Вставить("Авторазмещение",Истина);
			СтруктураПараметров.Вставить("Авторезервирование",Истина);			
			СтруктураПараметров.Вставить("ВидимостьСерии",     Ложь);
			СтруктураПараметров.Вставить("СтратегияАвторезервированияПоЗаказам", Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаНаСкладахПотомВЗаказахПоставщикам);
			
			//УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(СтруктураПараметров, ЗаказОбъект.Товары, ЗаказОбъект.ВозвратнаяТара);
			ЗаказОбъект.Дата = БылаДата;
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			
			Сообщить("Проведен заказ № "+IDЗаказа);
		Исключение
			Сообщить("Не удалось зарезервировать и провести заказ № "+IDЗаказа);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	иначеЕсли настройкаСайта.МетодРезервированияЗаказов = 2 Тогда
		ОбРезервирование = Документы.РезервированиеТоваров.СоздатьДокумент();
		ОбРезервирование.Дата = ТекущаяДата();
		ОбРезервирование.Заполнить(ЗаказОбъект.Ссылка);
		ОбРезервирование.Дата = ТекущаяДата();
		спУд = новый СписокЗначений();
		для Каждого СтрТз из ОбРезервирование.Товары Цикл
			Если ЗначениеЗаполнено(СтрТз.ИсходноеРазмещение) Тогда
				спУд.Добавить(СтрТз);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлСпУд из спУд Цикл
			ОбРезервирование.Товары.Удалить(ЭлСпУд.Значение);
		КонецЦикла;
		
		Если ОбРезервирование.Товары.Количество() > 0 Тогда
			ОбРезервирование.Записать();
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидимостьСерии",     Ложь);
			СтруктураПараметров.Вставить("Авторезервирование", Истина);
			СтруктураПараметров.Вставить("Авторазмещение",     Истина);
			СтруктураПараметров.Вставить("СтратегияАвторезервированияПоЗаказам", Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаНаСкладахПотомВЗаказахПоставщикам);
			
			ОбРезервирование.ЗаполнитьТабличныеЧастиПередПроведениемУпр(СтруктураПараметров);
			
			
			спУд = Новый СписокЗначений();
			Для Каждого СтрТз из ОбРезервирование.Товары Цикл
				Если НЕ ЗначениеЗаполнено(СтрТз.НовоеРазмещение) Тогда
					СпУд.Добавить(СтрТз);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого элСпУд из спУд Цикл
				ОбРезервирование.Товары.Удалить(ЭлСпУд.Значение);
			КонецЦикла;
			
			Если ОбРезервирование.Товары.Количество() > 0 Тогда
				ОбРезервирование.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
				Сообщить("По заказу "+ЗаказОбъект+" создан документ "+ОбРезервирование);
			Иначе
				ОбРезервирование.Записать();
				ОбРезервирование.Удалить();
			КонецЕсли;
		КонецЕсли;
		УдалитьРезервИзТовараКоторогоНетВЗаказе(ЗаказОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьРезервИзТовараКоторогоНетВЗаказе(ТекЗаказ)
	Запрос=новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва КАК ДокументРезерва,
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.Склад,
	|	ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва.Ссылка КАК ЗаказПокупателя,
	|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва.Организация КАК Организация,
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ДокументРезерва) КАК ТоварыВРезервеНаСкладахОстатки
	|ГДЕ
	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументРезерва
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	ДокументРезерва
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДокументРезерва",ТекЗаказ);
	РезультатЗапроса=Запрос.Выполнить();
	
	тзНоменклатураДляРезерва = Новый ТаблицаЗначений();
	тзНоменклатураДляРезерва.Колонки.Добавить("Номенклатура");
	тзНоменклатураДляРезерва.Колонки.Добавить("ХарактеристикаНоменклатуры");
	тзНоменклатураДляРезерва.Колонки.Добавить("Количество");
	тзНоменклатураДляРезерва.Колонки.Добавить("Склад");
	тзНоменклатураДляРезерва.Колонки.Добавить("СерияНоменклатуры");
	тзНоменклатураДляРезерва.Колонки.Добавить("ЕдиницаИзмерения");
	тзНоменклатураДляРезерва.Колонки.Добавить("Коэффициент");
	ВыборкаДокументРезерва=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ДокументРезерва");
	Пока ВыборкаДокументРезерва.Следующий() цикл
		ТекущийЗаказ=ВыборкаДокументРезерва.ДокументРезерва;
		ВыборкаДетальныеЗаписи = ВыборкаДокументРезерва.Выбрать();
		
		тзНоменклатураДляРезерва.Очистить();
		
		НовоеРезервированиеТоваров=Документы.РезервированиеТоваров.СоздатьДокумент();
		НовоеРезервированиеТоваров.Дата=ТекущаяДата();
		НовоеРезервированиеТоваров.Заказ=ВыборкаДокументРезерва.ЗаказПокупателя;
		НовоеРезервированиеТоваров.ВидОперации=Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам;
		НовоеРезервированиеТоваров.Организация=ВыборкаДокументРезерва.Организация;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекущаяНоменклатура=ВыборкаДетальныеЗаписи.Номенклатура;
			ТекущаяХарактеристика=ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ТекущаяНоменклатура);
			ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущаяХарактеристика);
			НайденныеСтроки = ТекущийЗаказ.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда
				Продолжить;					
			КонецЕсли;
			
			тзНоваяСтрока=тзНоменклатураДляРезерва.Добавить();
			тзНоваяСтрока.Номенклатура=ТекущаяНоменклатура;
			тзНоваяСтрока.ХарактеристикаНоменклатуры=ТекущаяХарактеристика;
			тзНоваяСтрока.Количество=ВыборкаДетальныеЗаписи.КоличествоОстаток;
			тзНоваяСтрока.Склад=ВыборкаДетальныеЗаписи.Склад;
			тзНоваяСтрока.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры;
			тзНоваяСтрока.ЕдиницаИзмерения=ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
			тзНоваяСтрока.Коэффициент=ВыборкаДетальныеЗаписи.Коэффициент;
			
		КонецЦикла;
		
		Если тзНоменклатураДляРезерва.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовары из тзНоменклатураДляРезерва Цикл
			тзРезервированиеТоваров=НовоеРезервированиеТоваров.Товары.Добавить();
			
			тзРезервированиеТоваров.Номенклатура=ТекСтрокаТовары.Номенклатура;
			тзРезервированиеТоваров.ХарактеристикаНоменклатуры=ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			тзРезервированиеТоваров.Количество=ТекСтрокаТовары.Количество;
			тзРезервированиеТоваров.ИсходноеРазмещение=ТекСтрокаТовары.Склад;
			тзРезервированиеТоваров.СерияНоменклатуры=ТекСтрокаТовары.СерияНоменклатуры;
			тзРезервированиеТоваров.ЕдиницаИзмерения=ТекСтрокаТовары.ЕдиницаИзмерения;
			тзРезервированиеТоваров.Коэффициент=ТекСтрокаТовары.Коэффициент;			
			тзРезервированиеТоваров.НовоеРазмещение=Неопределено;
		КонецЦикла;
		
		НовоеРезервированиеТоваров.Записать();
		Попытка
			НовоеРезервированиеТоваров.Записать(РежимЗаписиДокумента.Проведение);
			
			#Если Клиент Тогда
				Сообщить("Проведен документ "+НовоеРезервированиеТоваров.Ссылка+", контрагент "+НовоеРезервированиеТоваров.Контрагент);
			#КонецЕсли
			
		Исключение
			#Если Клиент Тогда
				Сообщить("Документ "+НовоеРезервированиеТоваров+". Не удалось провести. Причина: "+ОписаниеОшибки());
			#КонецЕсли
			
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПослеЗаписиЗаказаПокупателяПопытатьсяЗакрыть(Источник, Отказ, РежимПроведения) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Статус
	               |ИЗ
	               |	РегистрСведений.CMS1C_ИзмененияСтатусовЗаказов.СрезПоследних(, Заказ = &Заказ) КАК CMS1C_ИзмененияСтатусовЗаказовСрезПоследних
	               |ГДЕ
	               |	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Статус.СтатусОтменен";
	Запрос.УстановитьПараметр("Заказ",Источник.Ссылка);
	Выб = Запрос.Выполнить().Выбрать();
	Если Не ВЫб.Следующий() Тогда
		Возврат;
	КонецЕСли;
	
	СоздатьЗакрытиеЗаказа(Источник.Ссылка);
КонецПроцедуры

Процедура СоздатьЗакрытиеЗаказа(ТекЗаказ)
	ЗакрытиеЗаказа = Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();	
	ЗакрытиеЗаказа.Заполнить(ТекЗаказ);
	ЗакрытиеЗаказа.Дата = ТекущаяДата();
	Попытка							
		ЗакрытиеЗаказа.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
	Исключение
		Сообщить("Ошибка при попытка закрыть отмененный заказ: "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	БылиДвижения = Ложь;
	Для Каждого ТекДвиж из ЗакрытиеЗаказа.Движения Цикл
		ТекДвиж.ПРочитать();
		Если ТекДвиж.Количество() > 0 Тогда
			БылиДвижения = Истина;
			Прервать;
		Конецесли;
	КонецЦикла;
	
	Если Не БылиДвижения Тогда
		ЗакрытиеЗаказа.Удалить();
	КОнецЕсли;
КонецПроцедуры

Процедура CMS1C_СоздатьЗакрытиеЗаказаПокупателяПриОтмененномСтатусеПриЗаписи(Источник, Отказ, Замещение) Экспорт
		ТекЗаказ = Источник.Отбор.Заказ.Значение;
	Если Не ЗначениеЗаполнено(ТекЗаказ) тогда
		Возврат;
	КонецеСли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Период,
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Заказ,
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.ТекстСообщения,
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Статус,
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.СинхронизироватьССайтом,
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.СинхронизированССайтом,
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.ОтправлятьПоПочтеКлиенту,
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.ОтправленПоПочтеКлиенту
	|ИЗ
	|	РегистрСведений.CMS1C_ИзмененияСтатусовЗаказов.СрезПоследних(, Заказ = &Заказ) КАК CMS1C_ИзмененияСтатусовЗаказовСрезПоследних
	|ГДЕ
	|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Статус.СтатусОтменен";
	Запрос.УстановитьПараметр("Заказ",ТекЗаказ);
	Выб = Запрос.Выполнить().Выбрать();
	Если Не Выб.Следующий() Тогда
		Возврат;
	Конецесли;
	
	СоздатьЗакрытиеЗаказа(ТекЗаказ);
КонецПроцедуры

Процедура CMS1C_ПриЗаписиЗначенийСвойствОбъектовПерезаписатьCMS1C_ЗначенияСвойствОбъектовПриЗаписи(Источник, Отказ) Экспорт
	 Запрос = Новый Запрос();
	 Запрос.Текст = "ВЫБРАТЬ
	                |	CMS1C_ЗначенияСвойствОбъектов.Ссылка,
	                |	CMS1C_ЗначенияСвойствОбъектов.ЗначениеСтрока
	                |ИЗ
	                |	Справочник.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	                |ГДЕ
	                |	CMS1C_ЗначенияСвойствОбъектов.ЗначениеСвойствОбъектов = &ЗначениеСвойствОбъектов";
	 Запрос.УстановитьПараметр("ЗначениеСвойствОбъектов",Источник.ссылка);
	 
	 Выб = Запрос.Выполнить().Выбрать();
	 Пока ВЫб.Следующий() Цикл
		 Если Выб.ЗначениеСтрока <> Источник.Наименование Тогда
			 Об = Выб.Ссылка.ПолучитьОбъект();
			 Об.ДополнительныеСвойства.Вставить("ЗаписатьИзЗначенияСвойствОбъектов");
			 Об.Записать();
		 КонецЕсли;
	 КОнецЦИкла;
 КонецПроцедуры

Функция УПользователяРольДоступна(ИмяРоли) Экспорт
	Возврат РольДоступна(ИмяРоли);
КонецФункции

Процедура CMS1C_ПриЗаписиНоменклатурыЗаписатьВыбранныеЗначенияCMS1C_НоменклатурыПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	Конецесли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НадоЗаписать") Тогда
		Возврат;
	Конецесли;
	
	ТекВладелец = Источник.ссылка;
	
	ВыбнастройкиСайтов = Справочники.CMS1C_НастройкиСайтов.Выбрать();
	Пока ВыбнастройкиСайтов.Следующий() Цикл
		Если Не ВыбнастройкиСайтов.ИзХарактеристикЗаполнятьВыбранныеЗначенияСвойствCMS1C_Номенклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ПОМЕСТИТЬ ВсеХарактеристикиНоменклатуры
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CMS1C_СвойстваОбъектов.СвойствоНоменклатуры,
		|	CMS1C_СвойстваОбъектов.Ссылка
		|ПОМЕСТИТЬ ВсеСвойстваНоменклатуры
		|ИЗ
		|	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
		|ГДЕ
		|	CMS1C_СвойстваОбъектов.ЭтоХарактеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CMS1C_ВыбранныеСвойстваНоменклатуры.Свойство,
		|	CMS1C_ВыбранныеСвойстваНоменклатуры.Значение,
		|	CMS1C_ВыбранныеСвойстваНоменклатуры.Значение.ЗначениеСтрока,
		|	CMS1C_ВыбранныеСвойстваНоменклатуры.Свойство.СвойствоНоменклатуры,
		|	CMS1C_ВыбранныеСвойстваНоменклатуры.Номенклатура
		|ПОМЕСТИТЬ ЗначенияСайта
		|ИЗ
		|	РегистрСведений.CMS1C_ВыбранныеСвойстваНоменклатуры КАК CMS1C_ВыбранныеСвойстваНоменклатуры
		|ГДЕ
		|	CMS1C_ВыбранныеСвойстваНоменклатуры.Номенклатура.Владелец = &Номенклатура
		|	И CMS1C_ВыбранныеСвойстваНоменклатуры.Свойство.ЭтоХарактеристика
		|	И CMS1C_ВыбранныеСвойстваНоменклатуры.НастройкаСайта = &НастройкаСайта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ Значения1С
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство В
		|			(ВЫБРАТЬ
		|				ВсеСвойстваНоменклатуры.СвойствоНоменклатуры
		|			ИЗ
		|				ВсеСвойстваНоменклатуры)
		|	И ЗначенияСвойствОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				ВсеХарактеристикиНоменклатуры.Ссылка
		|			ИЗ
		|				ВсеХарактеристикиНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗначенияСайта.Свойство, Значения1С.Свойство) КАК Свойство,
		|	ЕСТЬNULL(ЗначенияСайта.Значение, Значения1С.Значение) КАК Значение,
		|	ВЫБОР
		|		КОГДА Значения1С.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВ1С,
		|	ВЫБОР
		|		КОГДА ЗначенияСайта.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНаСайте,
		|	ЗначенияСайта.Номенклатура
		|ПОМЕСТИТЬ ГотоваяТаблица
		|ИЗ
		|	ЗначенияСайта КАК ЗначенияСайта
		|		ПОЛНОЕ СОЕДИНЕНИЕ Значения1С КАК Значения1С
		|		ПО ЗначенияСайта.СвойствоСвойствоНоменклатуры = Значения1С.Свойство
		|			И ЗначенияСайта.ЗначениеЗначениеСтрока = Значения1С.Значение.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГотоваяТаблица.Свойство,
		|	ГотоваяТаблица.Значение,
		|	ГотоваяТаблица.ЕстьВ1С,
		|	ГотоваяТаблица.ЕстьНаСайте,
		|	ГотоваяТаблица.Номенклатура
		|ИЗ
		|	ГотоваяТаблица КАК ГотоваяТаблица
		|ГДЕ
		|	(НЕ ГотоваяТаблица.ЕстьВ1С
		|			ИЛИ НЕ ГотоваяТаблица.ЕстьНаСайте)";
		Запрос.УстановитьПараметр("Номенклатура",Источник.Ссылка);
		Запрос.УстановитьПараметр("настройкаСайта",ВыбнастройкиСайтов.Ссылка);
		Запрос.УстановитьПараметр("Владелец",ТекВладелец);
		
		
		Выб = Запрос.Выполнить().Выбрать();
		Пока ВЫб.Следующий() Цикл
			Если Выб.ЕстьВ1С Тогда
				Мен = РегистрыСведений.CMS1C_ВыбранныеСвойстваНоменклатуры.СоздатьМенеджерЗаписи();
				Мен.НастройкаСайта = ВыбнастройкиСайтов.Ссылка;
				Мен.Номенклатура = ПолучитьCMS1C_НоменклатуруПономенклатуре(Источник.Ссылка,ВыбнастройкиСайтов.Ссылка);
				
				Если Мен.Номенклатура.ТипSKU =0 Тогда
					Об = Мен.Номенклатура.ПолучитьОбъект();
					Об.ТипSKU = 1;
					Об.ДополнительныеСвойства.Вставить("НадоЗаписать");
					Об.Записать();
				Конецесли;
				
				Мен.Свойство = ПолучитьCMS1C_СвойствоПоСвойству(Выб.Свойство,ВыбнастройкиСайтов.Ссылка);
				Мен.Значение = CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьЗначениеСвойстваОбъекта(Мен.Свойство,ВЫб.Значение);
				Мен.Записать();
				
			ИначеЕсли Выб.ЕстьнаСайте Тогда
				Мен = РегистрыСведений.CMS1C_ВыбранныеСвойстваНоменклатуры.СоздатьМенеджерЗаписи();
				Мен.НастройкаСайта = ВыбнастройкиСайтов.Ссылка;
				Мен.Номенклатура = Выб.Номенклатура;
				Мен.Свойство = Выб.Свойство;
				Мен.Значение = ВЫб.Значение;
				Мен.Удалить();
			КонецеСли;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_ВариантыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.CMS1C_ВариантыНоменклатуры КАК CMS1C_ВариантыНоменклатуры
		|ГДЕ
		|	CMS1C_ВариантыНоменклатуры.Владелец.Владелец = &Владелец
		|	И CMS1C_ВариантыНоменклатуры.НастройкаСайта = &НастройкаСайта
		|	И CMS1C_ВариантыНоменклатуры.Владелец.ТипSKU = 1
		|	И НЕ CMS1C_ВариантыНоменклатуры.Виртуальный";
		Запрос.УстановитьПараметр("Владелец",Источник.ссылка);
		Запрос.УстановитьПараметр("настройкаСайта",ВыбнастройкиСайтов.Ссылка);
		Выб = Запрос.Выполнить().Выбрать();
		Пока ВЫб.Следующий() Цикл
			Об = Выб.Ссылка.получитьОБъект();
			Об.Виртуальный = Истина;
			Об.ДОполнительныеСВойства.Вставить("НадоЗаписать");
			Об.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
 

Функция ПолучитьCMS1C_НоменклатуруПономенклатуре(Номенклатура,НастройкаСайта)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_Номенклатура.Ссылка
	|ИЗ
	|	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
	|ГДЕ
	|	CMS1C_Номенклатура.Владелец = &Владелец
	|	И CMS1C_Номенклатура.НастройкаСайта = &НастройкаСайта";
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	Запрос.УстановитьПараметр("настройкаСайта",НастройкаСайта);
	Выб = запрос.Выполнить().Выбрать();
	Выб.Следующий();
	Возврат ВЫб.Ссылка;
КонецФункции

Функция ПолучитьCMS1C_СвойствоПоСвойству(Свойство,НастройкаСайта)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
	|ГДЕ
	|	CMS1C_СвойстваОбъектов.НастройкаСайта = &НастройкаСайта
	|	И CMS1C_СвойстваОбъектов.СвойствоНоменклатуры = &СвойствоНоменклатуры";
	Запрос.УстановитьПараметр("СвойствоНоменклатуры",Свойство);
	Запрос.УстановитьПараметр("настройкаСайта",НастройкаСайта);
	Выб = запрос.Выполнить().Выбрать();
	Выб.Следующий();
	Возврат Выб.Ссылка;
КонецФункции

