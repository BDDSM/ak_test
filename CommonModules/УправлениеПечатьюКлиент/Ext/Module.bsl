
// Выполнить команду печати, которая открывает результат в форме печати документов
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ВладелецФормы, ПараметрыПечати) Экспорт
	
	// Проверим количество объектов
	Если НЕ ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим ключ уникальности открываемой формы
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	// Подготовим параметры для открываемой формы
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(ИмяМенеджераПечати, "ИмяМенеджераПечати");
	СписокПараметров.Добавить(ИменаМакетов,       "ИменаМакетов");
	СписокПараметров.Добавить(ПараметрКоманды,    "ПараметрКоманды");
	СписокПараметров.Добавить(ПараметрыПечати,    "ПараметрыПечати");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокПараметров", СписокПараметров);
	
	// Откроем форму печати документов
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументовУправляемая", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	
КонецПроцедуры

// Выполнить команду печати, которая результат выводит на принтер
Процедура ВыполнитьКомандуПечатиНаПринтер(ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ПараметрыПечати) Экспорт

	Перем ТабличныеДокументы, ОбъектыПечати, ПараметрыВывода, Адрес, ОбъектыПечатиСоотв, Отказ;
	
	// Проверим количество объектов
	Если НЕ ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем табличные документы
	ПараметрыВывода = Неопределено;
#Если ТолстыйКлиентОбычноеПриложение Тогда
	УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечатиОбычноеПриложение(
			ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ПараметрыПечати,
			Адрес, ОбъектыПечатиСоотв, ПараметрыВывода, Отказ);
	Если НЕ Отказ Тогда
		ОбъектыПечати = Новый СписокЗначений;
		ТабличныеДокументы = ПолучитьИзВременногоХранилища(Адрес);
		Для Каждого ОбъектПечати Из ОбъектыПечатиСоотв Цикл
			ОбъектыПечати.Добавить(ОбъектПечати.Значение, ОбъектПечати.Ключ);
		КонецЦикла;
	КонецЕсли;
#Иначе
	УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
			ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ПараметрыПечати,
			ТабличныеДокументы, ОбъектыПечати, ПараметрыВывода, Отказ);
#КонецЕсли

	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет прав для вывода печатной формы на принтер, обратитесь к администратору системы.'"));
		Возврат;
	КонецЕсли;
	
	// Распечатаем
	РаспечататьТабличныеДокументы(ТабличныеДокументы, ПараметрыВывода.ДоступнаПечатьПоКомплектно, ОбъектыПечати);
	
КонецПроцедуры

// Вывести табличные документы на принтер
Процедура РаспечататьТабличныеДокументы(ТабличныеДокументы, Знач ДоступнаПечатьПоКомплектно, ОбъектыПечати) Экспорт

	#Если ВебКлиент Тогда
		ДоступнаПечатьПоКомплектно = Ложь;
	#КонецЕсли
	
	Колво = ТабличныеДокументы.Количество();
	Счетчик = 1;
	Если Не ДоступнаПечатьПоКомплектно Тогда
		Для Каждого Элемент Из ТабличныеДокументы Цикл
			//Если Элемент.Представление = "Сертификаты" Тогда
				//ПечатьФайла(Элемент.Значение, Ложь);	
			//Иначе
				Состояние("Идет печать " + Элемент.Представление + " номер " + Строка(Счетчик) + " из " + Строка(Колво));
				ТабДок = Элемент.Значение;
				ТабДок.Напечатать(Истина);
				
				Счетчик = Счетчик + 1;
			//КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;

	

	Для Каждого Элемент Из ОбъектыПечати Цикл
		
		ИмяОбласти = Элемент.Представление;
		Для Каждого Элемент Из ТабличныеДокументы Цикл
			ТабДок = Элемент.Значение;
			Область = ТабДок.Области.Найти(ИмяОбласти);
			Если Область = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТабДок.ОбластьПечати = Область;
			ТабДок.Напечатать(Истина);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Перед выполнение команды печати проверить, был ли передан хотя бы один объект, так как
// для команд с множественным режимом использования может быть передан пустой массив.
Функция ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПечатьФайла(пИмяФайла, СразуПечать = Истина) Экспорт
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 ИЛИ Найти(НРег(Файл.Расширение), ".html") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		//ИначеЕсли Найти(Файл.Расширение, ".ppt") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		//ИначеЕсли Найти(Файл.Расширение, "vsd") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		//Если Найти(НРег(Файл.Расширение), ".doc") > 0 ИЛИ Найти(НРег(Файл.Расширение), ".html") > 0 Тогда
		//	пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
		//	пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		////ИначеЕсли Найти(Файл.Расширение, ".ppt") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		////ИначеЕсли Найти(Файл.Расширение, "vsd") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\mspaint.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\notepad.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
		//	пПрограмма = """C:\Program Files (x86)\Foxit Software\Foxit PhantomPDF\Foxit PhantomPDF.exe"" ""пИмяФайла""";
		//Иначе
		//	ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;
	
	//ИмяКаталога = "\\server00\Temp";//РаботаСФайлами.ПолучитьИмяКаталога(); 	
	
	
	//ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + ".pdf");
	//ДвоичныеДанные = пХранилище.Получить();
	//Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
	//	ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
	//	
	пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", пИмяФайла);
	Если СразуПечать Тогда	
		ЗапуститьПриложение(пПрограмма);
	Иначе
		ЗапуститьПриложение(пИмяФайла);
	КонецЕсли;	
	//КонецЕсли;    	
		
КонецПроцедуры

#Область РаботаСМакетамиОфисныхДокументов

////////////////////////////////////////////////////////////////////////////////
// Работа с макетами офисных документов.

//	Секция содержит интерфейсные функции (API), используемые при создании
//	печатных форм основанных на офисных документах. На данный момент поддерживается
//	два офисных пакета MS Office (шаблоны MS Word) и Open Office (шаблоны OO Writer) - этот пока не доработан, надо добовлять общий модуль УправлениеПечатьюOOWriterКлиент.
//
////////////////////////////////////////////////////////////////////////////////
//	Типы используемых данных (определяется конкретными реализациями).
//	СсылкаПечатнаяФорма	- ссылка на печатную форму.
//	СсылкаМакет			- ссылка на макет.
//	Область				- ссылка на область в печатной форме или макете (структура)
//						доопределяется в интерфейсном модуле служебной информацией
//						об области.
//	ОписаниеОбласти			- описание области макета (см. ниже).
//	ДанныеЗаполнения		- либо структура, либо массив структур (для случая
//							списков и таблиц.
////////////////////////////////////////////////////////////////////////////////
//	ОписаниеОбласти - структура, описывающая подготовленные пользователем области макета
//	ключ ИмяОбласти - имя области
//	ключ ТипТипОбласти - 	ВерхнийКолонтитул.
//							НижнийКолонтитул
//							Общая
//							СтрокаТаблицы
//							Список
//

////////////////////////////////////////////////////////////////////////////////
// Функции инициализации и закрытия ссылок.

// Создает соединение с выходной печатной формой.
// Необходимо вызвать перед любыми действиями над формой.
// Функция не работает в любых других браузерах кроме IE.
// Перед выполнением функции в веб-клиенте необходимо подключить расширение работы с файлами.
//
// Параметры:
//  ТипДокумента            - Строка - тип печатной формы "DOC" или "ODT";
//  НастройкиСтраницыМакета - Соответствие - параметры из структуры, возвращаемой функцией ИнициализироватьМакет
//                                           (параметр устарел, его следует пропускать и использовать параметр Макет);
//  Макет                   - Структура - результат функции ИнициализироватьМакет.
//
// Возвращаемое значение:
//  Структура - новая печатная форма.
// 
Функция ИнициализироватьПечатнуюФорму(Знач ТипДокумента, Знач НастройкиСтраницыМакета = Неопределено, Макет = Неопределено) Экспорт
	
	Если ВРег(ТипДокумента) = "DOC" Тогда
		Параметр = ?(Макет = Неопределено, НастройкиСтраницыМакета, Макет); // для обратной совместимости
		ПечатнаяФорма = УправлениеПечатьюMSWordКлиент.ИнициализироватьПечатнуюФормуMSWord(Параметр);
		ПечатнаяФорма.Вставить("Тип", "DOC");
		ПечатнаяФорма.Вставить("ПоследняяВыведеннаяОбласть", Неопределено);
		Возврат ПечатнаяФорма;
	//ИначеЕсли ВРег(ТипДокумента) = "ODT" Тогда
	//	ПечатнаяФорма = УправлениеПечатьюOOWriterКлиент.ИнициализироватьПечатнуюФормуOOWriter(Макет);
	//	ПечатнаяФорма.Вставить("Тип", "ODT");
	//	ПечатнаяФорма.Вставить("ПоследняяВыведеннаяОбласть", Неопределено);
	//	Возврат ПечатнаяФорма;
	КонецЕсли;
	
КонецФункции

// Создает COM-соединение с макетом. В дальнейшем это соединение используется при получении из него областей (тегов и
// таблиц).
// Функция не работает в любых других браузерах кроме IE.
// Перед выполнением функции в веб-клиенте необходимо подключить расширение работы с файлами.
//
// Параметры:
//  ДвоичныеДанныеМакета - ДвоичныеДанные - двоичные данные макета;
//  ТипМакета            - Строка - тип макета печатной формы "DOC" или "ODT";
//  ИмяМакета            - Строка - имя, которое будет использовано при создании временного файла макета.
//
// Возвращаемое значение:
//  Структура - макет.
//
Функция ИнициализироватьМакетОфисногоДокумента(Знач ДвоичныеДанныеМакета, Знач ТипМакета, Знач ИмяМакета = "") Экспорт
	
	Макет = Неопределено;
	ИмяВременногоФайла = "";
	
	#Если ВебКлиент Тогда
		Если ПустаяСтрока(ИмяМакета) Тогда
			ИмяВременногоФайла = Строка(Новый УникальныйИдентификатор) + "." + НРег(ТипМакета);
		Иначе
			ИмяВременногоФайла = ИмяМакета + "." + НРег(ТипМакета);
		КонецЕсли;
	#КонецЕсли
	
	Если ВРег(ТипМакета) = "DOC" Тогда
		Макет = УправлениеПечатьюMSWordКлиент.ПолучитьМакетMSWord(ДвоичныеДанныеМакета, ИмяВременногоФайла);
		Если Макет <> Неопределено Тогда
			Макет.Вставить("Тип", "DOC");
		КонецЕсли;
	//ИначеЕсли ВРег(ТипМакета) = "ODT" Тогда
	//	Макет = УправлениеПечатьюOOWriterКлиент.ПолучитьМакетOOWriter(ДвоичныеДанныеМакета, ИмяВременногоФайла);
	//	Если Макет <> Неопределено Тогда
	//		Макет.Вставить("Тип", "ODT");
	//		Макет.Вставить("НастройкиСтраницыМакета", Неопределено);
	//	КонецЕсли;
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

// Освобождает ссылки в созданном интерфейсе связи с офисным приложением.
// Необходимо вызывать каждый раз после завершения формирования макета и выводе печатной формы пользователю.
//
// Параметры:
//  ПечатнаяФорма     - Структура - результат функций ИнициализироватьПечатнуюФорму и ИнициализироватьМакетОфисногоДокумента;
//  ЗакрытьПриложение - Булево    - Истина, если требуется ли закрыть приложение.
//                                  Соединение с макетом требуется закрывать с закрытием приложения.
//                                  ПечатнуюФорму не требуется закрывать.
//
Процедура ОчиститьСсылки(ПечатнаяФорма, Знач ЗакрытьПриложение = Истина) Экспорт
	
	Если ПечатнаяФорма <> Неопределено Тогда
		Если ПечатнаяФорма.Тип = "DOC" Тогда
			УправлениеПечатьюMSWordКлиент.ЗакрытьСоединение(ПечатнаяФорма, ЗакрытьПриложение);
		//Иначе
		//	УправлениеПечатьюOOWriterКлиент.ЗакрытьСоединение(ПечатнаяФорма, ЗакрытьПриложение);
		КонецЕсли;
		ПечатнаяФорма = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функция отображения печатной формы пользователю.

// Показывает сформированный документ пользователю.
//
// Параметры:
//  ПечатнаяФорма - Структура - результат функции ИнициализироватьПечатнуюФорму.
//
Процедура ПоказатьДокумент(Знач ПечатнаяФорма) Экспорт
	
	Если ПечатнаяФорма.Тип = "DOC" Тогда
		УправлениеПечатьюMSWordКлиент.ПоказатьДокументMSWord(ПечатнаяФорма);
	//ИначеЕсли ПечатнаяФорма.Тип = "ODT" Тогда
	//	УправлениеПечатьюOOWriterКлиент.ПоказатьДокументOOWriter(ПечатнаяФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции получения областей из макета, вывода в печатную форму областей макета
// и заполнение параметров в них.

// Получает область из макета печатной формы.
//
// Параметры:
//   СсылкаНаМакет   - Структура - макет печатной формы.
//   ОписаниеОбласти - Структура - описание области.
//
// Возвращаемое значение:
//  Структура - область макета.
//
Функция ОбластьМакета(Знач СсылкаНаМакет, Знач ОписаниеОбласти) Экспорт
	
	Область = Неопределено;
	Если СсылкаНаМакет.Тип = "DOC" Тогда
		
		Если		ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" Тогда
			Область = УправлениеПечатьюMSWordКлиент.ПолучитьОбластьВерхнегоКолонтитула(СсылкаНаМакет);
		ИначеЕсли	ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул" Тогда
			Область = УправлениеПечатьюMSWordКлиент.ПолучитьОбластьНижнегоКолонтитула(СсылкаНаМакет);
		ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Общая" Тогда
			Область = УправлениеПечатьюMSWordКлиент.ПолучитьОбластьМакетаMSWord(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти, 1, 0);
		ИначеЕсли	ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" Тогда
			Область = УправлениеПечатьюMSWordКлиент.ПолучитьОбластьМакетаMSWord(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти);
		ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Список" Тогда
			Область = УправлениеПечатьюMSWordКлиент.ПолучитьОбластьМакетаMSWord(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти, 1, 0);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Тип области не указан или указан некорректно: %1.'"), ОписаниеОбласти.ТипОбласти);
		КонецЕсли;
		
		Если Область <> Неопределено Тогда
			Область.Вставить("ОписаниеОбласти", ОписаниеОбласти);
		КонецЕсли;
	//ИначеЕсли СсылкаНаМакет.Тип = "ODT" Тогда
	//	
	//	Если		ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" Тогда
	//		Область = УправлениеПечатьюOOWriterКлиент.ПолучитьОбластьВерхнегоКолонтитула(СсылкаНаМакет);
	//	ИначеЕсли	ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул" Тогда
	//		Область = УправлениеПечатьюOOWriterКлиент.ПолучитьОбластьНижнегоКолонтитула(СсылкаНаМакет);
	//	ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Общая"
	//			ИЛИ ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы"
	//			ИЛИ ОписаниеОбласти.ТипОбласти = "Список" Тогда
	//		Область = УправлениеПечатьюOOWriterКлиент.ПолучитьОбластьМакета(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти);
	//	Иначе
	//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Тип области не указан или указан некорректно: %1.'"), ОписаниеОбласти.ИмяОбласти);
	//	КонецЕсли;
	//	
	//	Если Область <> Неопределено Тогда
	//		Область.Вставить("ОписаниеОбласти", ОписаниеОбласти);
	//	КонецЕсли;
	КонецЕсли;
	
	Возврат Область;
	
КонецФункции

// Присоединяет область в печатную форму из макета.
// Применяется при одиночном выводе области.
//
// Параметры:
//  ПечатнаяФорма - Структура - печатная форма, см. ИнициализироватьПечатнуюФорму().
//  ОбластьМакета - Структура - см. ОбластьМакета().
//  ПереходНаСледующуюСтроку - Булево - Истина, если требуется вставить разрыв после вывода области.
//
Процедура ПрисоединитьОбласть(Знач ПечатнаяФорма, Знач ОбластьМакета, Знач ПереходНаСледующуюСтроку = Истина) Экспорт
	
	Если ОбластьМакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОписаниеОбласти = ОбластьМакета.ОписаниеОбласти;
		
		Если ПечатнаяФорма.Тип = "DOC" Тогда
			
			ВыведеннаяОбласть = Неопределено;
			
			Если		ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" Тогда
				УправлениеПечатьюMSWordКлиент.ДобавитьВерхнийКолонтитул(ПечатнаяФорма, ОбластьМакета);
			ИначеЕсли	ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул" Тогда
				УправлениеПечатьюMSWordКлиент.ДобавитьНижнийКолонтитул(ПечатнаяФорма, ОбластьМакета);
			ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Общая" Тогда
				ВыведеннаяОбласть = УправлениеПечатьюMSWordКлиент.ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
			ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Список" Тогда
				ВыведеннаяОбласть = УправлениеПечатьюMSWordКлиент.ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
			ИначеЕсли	ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" Тогда
				Если ПечатнаяФорма.ПоследняяВыведеннаяОбласть <> Неопределено
				   И ПечатнаяФорма.ПоследняяВыведеннаяОбласть.ТипОбласти = "СтрокаТаблицы"
				   И НЕ ПечатнаяФорма.ПоследняяВыведеннаяОбласть.ПереходНаСледующуюСтроку Тогда
					ВыведеннаяОбласть = УправлениеПечатьюMSWordКлиент.ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку, Истина);
				Иначе
					ВыведеннаяОбласть = УправлениеПечатьюMSWordКлиент.ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
				КонецЕсли;
			Иначе
				ВызватьИсключение ТекстТипОбластиУказанНекорректно();
			КонецЕсли;
			
			ОписаниеОбласти.Вставить("Область", ВыведеннаяОбласть);
			ОписаниеОбласти.Вставить("ПереходНаСледующуюСтроку", ПереходНаСледующуюСтроку);
			
			// Содержит тип области, и границы области (если требуется).
			ПечатнаяФорма.ПоследняяВыведеннаяОбласть = ОписаниеОбласти;
			
		//ИначеЕсли ПечатнаяФорма.Тип = "ODT" Тогда
		//	Если		ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" Тогда
		//		УправлениеПечатьюOOWriterКлиент.ДобавитьВерхнийКолонтитул(ПечатнаяФорма, ОбластьМакета);
		//	ИначеЕсли	ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул" Тогда
		//		УправлениеПечатьюOOWriterКлиент.ДобавитьНижнийКолонтитул(ПечатнаяФорма, ОбластьМакета);
		//	ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Общая"
		//			ИЛИ ОписаниеОбласти.ТипОбласти = "Список" Тогда
		//		УправлениеПечатьюOOWriterКлиент.УстановитьОсновнойКурсорНаТелоДокумента(ПечатнаяФорма);
		//		УправлениеПечатьюOOWriterКлиент.ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
		//	ИначеЕсли	ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" Тогда
		//		УправлениеПечатьюOOWriterКлиент.УстановитьОсновнойКурсорНаТелоДокумента(ПечатнаяФорма);
		//		УправлениеПечатьюOOWriterКлиент.ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку, Истина);
		//	Иначе
		//		ВызватьИсключение ТекстТипОбластиУказанНекорректно();
		//	КонецЕсли;
		//	// Содержит тип области, и границы области (если требуется).
		//	ПечатнаяФорма.ПоследняяВыведеннаяОбласть = ОписаниеОбласти;
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = СокрЛП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщениеОбОшибке = ?(Прав(СообщениеОбОшибке, 1) = ".", СообщениеОбОшибке, СообщениеОбОшибке + ".");
		СообщениеОбОшибке = СообщениеОбОшибке + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при попытке вывести область ""%1"" из макета.'"),
			ОбластьМакета.ОписаниеОбласти.ИмяОбласти);
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет параметры области печатной формы.
//
// Параметры:
//  ПечатнаяФорма - Структура - область печатной формы, либо сама печатная форма.
//  Данные - Структура - данные заполнения.
//
Процедура ЗаполнитьПараметры(Знач ПечатнаяФорма, Знач Данные) Экспорт
	
	ОписаниеОбласти = ПечатнаяФорма.ПоследняяВыведеннаяОбласть;
	
	Если ПечатнаяФорма.Тип = "DOC" Тогда
		Если		ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" Тогда
			УправлениеПечатьюMSWordКлиент.ЗаполнитьПараметрыВерхнегоКолонтитула(ПечатнаяФорма, Данные);
		ИначеЕсли	ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул" Тогда
			УправлениеПечатьюMSWordКлиент.ЗаполнитьПараметрыНижнегоКолонтитула(ПечатнаяФорма, Данные);
		ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Общая"
				ИЛИ ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы"
				ИЛИ ОписаниеОбласти.ТипОбласти = "Список" Тогда
			УправлениеПечатьюMSWordКлиент.ЗаполнитьПараметры(ПечатнаяФорма.ПоследняяВыведеннаяОбласть.Область, Данные);
		Иначе
			ВызватьИсключение ТекстТипОбластиУказанНекорректно();
		КонецЕсли;
	//ИначеЕсли ПечатнаяФорма.Тип = "ODT" Тогда
	//	Если		ПечатнаяФорма.ПоследняяВыведеннаяОбласть.ТипОбласти = "ВерхнийКолонтитул" Тогда
	//		УправлениеПечатьюOOWriterКлиент.УстановитьОсновнойКурсорНаВерхнийКолонтитул(ПечатнаяФорма);
	//	ИначеЕсли	ПечатнаяФорма.ПоследняяВыведеннаяОбласть.ТипОбласти = "НижнийКолонтитул" Тогда
	//		УправлениеПечатьюOOWriterКлиент.УстановитьОсновнойКурсорНаНижнийКолонтитул(ПечатнаяФорма);
	//	ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Общая"
	//			ИЛИ ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы"
	//			ИЛИ ОписаниеОбласти.ТипОбласти = "Список" Тогда
	//		УправлениеПечатьюOOWriterКлиент.УстановитьОсновнойКурсорНаТелоДокумента(ПечатнаяФорма);
	//	КонецЕсли;
	//	УправлениеПечатьюOOWriterКлиент.ЗаполнитьПараметры(ПечатнаяФорма, Данные);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет область в печатную форму из макета, при этом заменяя параметры в области значениями из данных объекта.
// Применяется при одиночном выводе области.
//
// Параметры:
//  ПечатнаяФорма - Структура - печатная форма, см. ИнициализироватьПечатнуюФорму().
//  ОбластьМакета - Структура - см. ОбластьМакета().
//  Данные - Структура - данные заполнения.
//  ПереходНаСледующуюСтроку - Булево - Истина, если требуется вставить разрыв после вывода области.
//
Процедура ПрисоединитьОбластьИЗаполнитьПараметры(Знач ПечатнаяФорма, Знач ОбластьМакета,
	Знач Данные, Знач ПереходНаСледующуюСтроку = Истина) Экспорт
	
	Если ОбластьМакета <> Неопределено Тогда
		ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
		ЗаполнитьПараметры(ПечатнаяФорма, Данные)
	КонецЕсли;
	
КонецПроцедуры

// Добавляет область в печатную форму из макета, при этом заменяя
// параметры в области значениями из данных объекта.
// Применяется при одиночном выводе области.
//
// Параметры:
//  ПечатнаяФорма - Структура - печатная форма, см. ИнициализироватьПечатнуюФорму().
//  ОбластьМакета - Структура - см. ОбластьМакета().
//  Данные - Массив - коллекция элементов типа Структура, данные объекта.
//  ПереходНаСледСтроку - Булево - Истина, если требуется вставить разрыв после вывода области.
//
Процедура ПрисоединитьИЗаполнитьКоллекцию(Знач ПечатнаяФорма,
										Знач ОбластьМакета,
										Знач Данные,
										Знач ПереходНаСледСтроку = Истина) Экспорт
	Если ОбластьМакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОбласти = ОбластьМакета.ОписаниеОбласти;
	
	Если ПечатнаяФорма.Тип = "DOC" Тогда
		Если		ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" Тогда
			УправлениеПечатьюMSWordКлиент.ПрисоединитьИЗаполнитьОбластьТаблицы(ПечатнаяФорма, ОбластьМакета, Данные, ПереходНаСледСтроку);
		ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Список" Тогда
			УправлениеПечатьюMSWordКлиент.ПрисоединитьИЗаполнитьНабор(ПечатнаяФорма, ОбластьМакета, Данные, ПереходНаСледСтроку);
		Иначе
			ВызватьИсключение ТекстТипОбластиУказанНекорректно();
		КонецЕсли;
	//ИначеЕсли ПечатнаяФорма.Тип = "ODT" Тогда
	//	Если		ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" Тогда
	//		УправлениеПечатьюOOWriterКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьМакета, Данные, Истина, ПереходНаСледСтроку);
	//	ИначеЕсли	ОписаниеОбласти.ТипОбласти = "Список" Тогда
	//		УправлениеПечатьюOOWriterКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьМакета, Данные, Ложь, ПереходНаСледСтроку);
	//	Иначе
	//		ВызватьИсключение ТекстТипОбластиУказанНекорректно();
	//	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вставляет разрыв между строками в виде символа перевода строки.
//
// Параметры:
//  ПечатнаяФорма - Структура - печатная форма, см. ИнициализироватьПечатнуюФорму().
//
Процедура ВставитьРазрывНаНовуюСтроку(Знач ПечатнаяФорма) Экспорт
	
	Если	  ПечатнаяФорма.Тип = "DOC" Тогда
		УправлениеПечатьюMSWordКлиент.ВставитьРазрывНаНовуюСтроку(ПечатнаяФорма);
	//ИначеЕсли ПечатнаяФорма.Тип = "ODT" Тогда
	//	УправлениеПечатьюOOWriterКлиент.ВставитьРазрывНаНовуюСтроку(ПечатнаяФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстТипОбластиУказанНекорректно()
	Возврат НСтр("ru = 'Тип области не указан или указан некорректно.'");
КонецФункции

#КонецОбласти

