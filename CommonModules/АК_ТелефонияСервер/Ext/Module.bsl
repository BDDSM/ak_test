////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ВНЕШНЕЙ КОМПОНЕНТОЙ
////////////////////////////////////////////////////////////////////////////////

Функция ЕстьРольТелефония() Экспорт
	Возврат РольДоступна("АК_Телефония");	
КонецФункции

Функция ПолучитьВнутренийНомер() Экспорт
	Возврат глЗначениеПеременной("глАК_ВнутреннийНомер");	
КонецФункции

Функция ПолучитьЗагруженаКомпонентаROMAsterisk() Экспорт
	Возврат глЗначениеПеременной("глАК_ЗагруженаКомпонентаROMAsterisk");	
КонецФункции

Процедура УстановитьЗагруженаКомпонентаROMAsterisk(Значение) Экспорт
	глЗначениеПеременнойУстановить("глАК_ЗагруженаКомпонентаROMAsterisk",Значение);
КонецПроцедуры

Функция ПолучитьTrunkName() Экспорт
	Возврат глЗначениеПеременной("глАК_TrunkName");	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ РАБОТЫ С ЛОГОМ ASTERISK
////////////////////////////////////////////////////////////////////////////////

Функция ОчиститьНомерТелефона(НомерТелефон, RegExp = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(НомерТелефон) Тогда
		Возврат "";
	КонецЕсли;
	//убираем не цифры
	НомерТелефон = RegExp_Replace(НомерТелефон, "[^0-9]",,RegExp);
	
	//меняем 7 на 8
	Если Лев(НомерТелефон,1) = "7"
		И СтрДлина(НомерТелефон) = 11 Тогда
		НомерТелефон = "8" + Сред(НомерТелефон, 2);
	ИначеЕсли СтрДлина(НомерТелефон) = 10 Тогда
		НомерТелефон = "8" + НомерТелефон;
	КонецЕсли;
	
	Возврат НомерТелефон;
КонецФункции

Функция ОчиститьНомерТелефонаКлиент(НомерТелефон) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НомерТелефон) Тогда
		Возврат "";
	КонецЕсли;
	
	//убираем не цифры
	НомерТелефон = RegExp_Replace(НомерТелефон, "[^0-9]");
	
	//меняем 7 на 8
	Если Лев(НомерТелефон, 1) = "7"
			И СтрДлина(НомерТелефон) = 11 Тогда
		НомерТелефон = "8" + Сред(НомерТелефон, 2);
	КонецЕсли;
	
	Возврат НомерТелефон;
	
КонецФункции

//Замена текста в подстроке
Функция RegExp_Replace(Текст, Паттерн, ЗначениеЗамены = "", RegExp = Неопределено)
    
	Если RegExp = Неопределено Тогда
		RegExp = Новый COMОбъект("VBScript.RegExp");
		RegExp.IgnoreCase 	= Истина; //Игнорировать регистр
	    RegExp.Global 		= Истина; //Поиск всех вхождений шаблона
	    RegExp.MultiLine 	= Истина; //Многострочный режим
    	RegExp.Pattern 		= Паттерн; 
	КонецЕсли;
    
    Возврат RegExp.Replace(Текст, ЗначениеЗамены); 
	
КонецФункции

Функция ПолучитьУсловиеМежду(Поле, НачальноеЗначение, КонечноеЗначение)
	
	Если НЕ ЗначениеЗаполнено(Поле) Тогда
		ВызватьИсключение "Поле для условия не указано";
	КонецЕсли;
	
	Возврат Поле + " BETWEEN " + ВнешниеДанные.ФорматПоля(НачальноеЗначение) + " AND " + ВнешниеДанные.ФорматПоля(КонечноеЗначение);
	
КонецФункции

Функция ПолучитьТелефоныИОбъекты() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерТелефона,
	|	ВложенныйЗапрос.ОбъектТелефона
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПривязкаТелефоновСрезПоследних.Номер.Код КАК НомерТелефона,
	|		ПривязкаТелефоновСрезПоследних.Привязка КАК ОбъектТелефона
	|	ИЗ
	|		РегистрСведений.ПривязкаТелефонов.СрезПоследних КАК ПривязкаТелефоновСрезПоследних
	|	ГДЕ
	|		ПривязкаТелефоновСрезПоследних.Номер.Код <> """"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КонтактнаяИнформация.Представление,
	|		КонтактнаяИнформация.Объект
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|		И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(15))) <> """") КАК ВложенныйЗапрос";

	ТаблицаНомеровИОбъектов = Запрос.Выполнить().Выгрузить();
	ТаблицаНомеровИОбъектов.Индексы.Добавить("НомерТелефона");
	RegExp = Неопределено;
	Для Каждого Строка Из ТаблицаНомеровИОбъектов Цикл
		Строка.НомерТелефона = ОчиститьНомерТелефона(Строка.НомерТелефона, RegExp);
	КонецЦикла;
	
	Возврат ТаблицаНомеровИОбъектов;
	
КонецФункции

Функция ПолучитьТелефоныИзSQL(НомерТелефона) Экспорт
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");	

	Запрос =
	"SELECT
	|	LastClientPhone.Phone,
	|	CustomerUID,
	|	Customer.FullName
	|FROM (
	|	Select
	|		Customer.Phone,
	|		Max(Customer.DateRegistration) as DateRegistration
	|	From Loyalty.dbo.Customer (nolock) as Customer
	|	Where
	|		Customer.Phone = '" + ?(СтрДлина(НомерТелефона) = 11, Сред(НомерТелефона, 2), НомерТелефона) + "'
	|	Group by Customer.Phone) as LastClientPhone
	| Left Join Loyalty.dbo.Customer (nolock) as Customer
	| On LastClientPhone.Phone = Customer.Phone
	|	 And LastClientPhone.DateRegistration = Customer.DateRegistration";
	
	rs = ADOСоединение.Execute(Запрос);
    ОбъектЗвонка = Неопределено;
	Пока НЕ rs.EOF() Цикл
		ОбъектЗвонка = rs.Fields("CustomerUID").Value;
		rs.MoveNext();
	КонецЦикла;

	ADOСоединение.Close();
	
	Возврат ОбъектЗвонка;
	
КонецФункции

Функция ПолучитьОбъектЗвонка(Знач НомерТелефона) Экспорт
	
	ТаблицаНомеровИОбъектов = ПолучитьТелефоныИОбъекты();	
	НомерТелефона = ОчиститьНомерТелефона(НомерТелефона);
	
	СтрокаТелефон = ТаблицаНомеровИОбъектов.Найти(НомерТелефона,"НомерТелефона");
	Если СтрокаТелефон = Неопределено Тогда
		Возврат ПолучитьТелефоныИзSQL(НомерТелефона);
	КонецЕсли;
	
	Возврат СтрокаТелефон.ОбъектТелефона;
	
КонецФункции

//+++АК SHEP 20160509: добавил Параметр "ОтправительПолучатель":
// 0 -- отправитель, 1 -- получатель, 2 -- отправитель и получатель
Функция ПрочитатьЛогAsterisk(НачалоПериода = Неопределено, КонецПериода = Неопределено, ОтборНомераТелефона = Неопределено, ТолькоНеотвеченые = Ложь, ОтправительПолучатель = 2) Экспорт
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");	

	Запрос = "IF OBJECT_ID('tempdb..#HistoryPhone') IS NOT NULL DROP Table #HistoryPhone
			|IF OBJECT_ID('tempdb..#HistoryPhoneBook') IS NOT NULL DROP Table #HistoryPhoneBook
			|IF OBJECT_ID('tempdb..#CustomerPhone') IS NOT NULL DROP Table #CustomerPhone
			|
			|SELECT CAST(calldate AS datetime) AS calldate, 
			|clid, 
			|CASE WHEN LEN(src) = 10 THEN src ELSE RIGHT(src,10) END as src, 
			|CASE WHEN LEN(dst) = 10 THEN dst ELSE RIGHT(dst,10) END as dst, dcontext, channel, dstchannel, lastapp, 
			|lastdata, duration, billsec, disposition, 
			|amaflags, accountcode, uniqueid, userfield, 
			|did, recordingfile, cnum, cnam, 
			|outbound_cnum, outbound_cnam, dst_cnam
			|  INTO #HistoryPhone
			|FROM OPENROWSET('MSDASQL','DSN=ASTERISK', 'SELECT * FROM asteriskcdrdb.cdr')
			//|FROM OPENROWSET('MSDASQL','DSN=ASTERISK', 'SELECT * FROM asteriskcdrdb.cel')
			|
			|CREATE INDEX index_src
			|ON #HistoryPhone(src)
			|
			|CREATE INDEX index_dst
			|ON #HistoryPhone(dst)
			|
			|CREATE INDEX index_srccalldate
			|ON #HistoryPhone(src,calldate)
			|
			|SELECT HistoryPhoneBook.Phone, HistoryPhoneBook.LastCall, HistoryPhone.disposition AS LastState 
			|INTO #HistoryPhoneBook
			|FROM (SELECT Phone, MAX(calldate) AS LastCall 
			|FROM(
			|SELECT src AS Phone, calldate from #HistoryPhone
			|UNION
			|SELECT dst, calldate from #HistoryPhone) AS HistoryPhoneBook
			|GROUP BY Phone) AS HistoryPhoneBook
			|LEFT JOIN #HistoryPhone AS HistoryPhone
			|ON HistoryPhoneBook.LastCall = HistoryPhone.calldate
			|AND (HistoryPhoneBook.Phone = HistoryPhone.src
			|OR HistoryPhoneBook.Phone = HistoryPhone.dst)
			|
			|CREATE INDEX index_dst
			|ON #HistoryPhoneBook(Phone)
			|
			|SELECT LastClientPhone.Phone,CustomerUID, Customer.FullName
			|  INTO #CustomerPhone 
			|  FROM (
			|SELECT Customer.Phone, Max(Customer.DateRegistration) AS DateRegistration from Loyalty.dbo.Customer (nolock) AS Customer
			|INNER JOIN #HistoryPhoneBook AS HistoryPhoneBook
			|ON HistoryPhoneBook.Phone = Customer.Phone
			|GROUP BY Customer.Phone) AS LastClientPhone
			|LEFT JOIN Loyalty.dbo.Customer (nolock) AS Customer
			|ON LastClientPhone.Phone = Customer.Phone
			|AND LastClientPhone.DateRegistration = Customer.DateRegistration
			|
			|SELECT HistoryPhone.calldate, HistoryPhone.clid, CASE WHEN LEN(HistoryPhone.src) = 10 THEN '8' + HistoryPhone.src ELSE HistoryPhone.src END AS src, 
			|CustomerPhoneSrc.CustomerUID AS CustomerUIDsrc, ISNULL(CustomerPhoneSrc.FullName,'') AS FullNamesrc, 
			|CASE WHEN LEN(HistoryPhone.dst) = 10 THEN '8' + HistoryPhone.dst ELSE HistoryPhone.dst END AS dst, 
			|CustomerPhoneDst.CustomerUID AS CustomerUIDdst, ISNULL(CustomerPhoneDst.FullName,'') AS FullNamedst, 
			|HistoryPhone.dcontext, HistoryPhone.channel, HistoryPhone.dstchannel, HistoryPhone.lastapp, 
			|HistoryPhone.lastdata, HistoryPhone.duration, HistoryPhone.billsec, HistoryPhone.disposition, HistoryPhone.amaflags, 
			|HistoryPhone.accountcode, HistoryPhone.uniqueid, HistoryPhone.userfield, HistoryPhone.did, HistoryPhone.recordingfile, 
			|HistoryPhone.cnum, HistoryPhone.cnam, HistoryPhone.outbound_cnum, HistoryPhone.outbound_cnam, HistoryPhone.dst_cnam, 
			|CASE WHEN ISNULL(HistoryPhoneBookSrc.LastState,'ANSWERED') <> 'ANSWERED' THEN 1 ELSE 0 END AS NotAnswered 
			|FROM #HistoryPhone AS HistoryPhone
			|	LEFT JOIN #HistoryPhoneBook AS HistoryPhoneBookSrc
			|		ON HistoryPhoneBookSrc.Phone = HistoryPhone.src
			|		AND HistoryPhoneBookSrc.LastCall = HistoryPhone.calldate
			|	LEFT JOIN #CustomerPhone AS CustomerPhoneSrc
			|		ON CustomerPhoneSrc.Phone = HistoryPhone.src
			|	LEFT JOIN #CustomerPhone AS CustomerPhoneDst
			|		ON CustomerPhoneDst.Phone = HistoryPhone.dst
			|-%WHERE%-
			|ORDER BY HistoryPhone.calldate Desc";
	
	Условие = "";
	//Отбор по датам
	Если ЗначениеЗаполнено(НачалоПериода) 
		И ЗначениеЗаполнено(КонецПериода) Тогда
		Условие = ПолучитьУсловиеМежду("HistoryPhone.calldate", НачалоПериода, КонецПериода);
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		Условие = "HistoryPhone.calldate >= " + ВнешниеДанные.ФорматПоля(НачалоПериода, Истина);
	ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
		Условие = "HistoryPhone.calldate <= " + ВнешниеДанные.ФорматПоля(КонецПериода, Истина); 
	КонецЕсли;
	
	//отбор по номеру
	Если ЗначениеЗаполнено(ОтборНомераТелефона) Тогда
		//+++АК SHEP 20160509: добавил Параметр "ОтправительПолучатель"
		//+++АК SHEP 20160512: отбор по списку телефонов
		Если Найти(ОтборНомераТелефона, ",") > 0 Тогда
			ОтборНомераТелефонаSQL = "'" + СтрЗаменить(ОтборНомераТелефона, ",", "','") + "'";
			Условие = ?(ЗначениеЗаполнено(Условие), Условие + " AND ", "") + "(src IN (" + ОтборНомераТелефонаSQL + ") or dst IN(" + ОтборНомераТелефонаSQL + "))";
		Иначе
		//Если ОтправительПолучатель = 2 Тогда
			Условие = ?(ЗначениеЗаполнено(Условие), Условие + " AND ", "") + "(src LIKE '" + ОтборНомераТелефона + "' or dst LIKE '" + ОтборНомераТелефона + "')";
		//ИначеЕсли ОтправительПолучатель = 1 Тогда
		//	Условие = ?(ЗначениеЗаполнено(Условие), Условие + " AND ", "") + "dst LIKE '" + ОтборНомераТелефона + "'";
		//ИначеЕсли ОтправительПолучатель = 0 Тогда
		//	Условие = ?(ЗначениеЗаполнено(Условие), Условие + " AND ", "") + "src LIKE '" + ОтборНомераТелефона + "'";
		КонецЕсли;
		//---АК SHEP 20160509
	КонецЕсли;
	
	//отбор по номеру
	Если ТолькоНеотвеченые = Истина Тогда
		Условие = ?(ЗначениеЗаполнено(Условие), Условие + " AND ", "") + "ISNULL(HistoryPhoneBookSrc.LastState,'ANSWERED') <> 'ANSWERED'";
	КонецЕсли;

	Условие = ?(ЗначениеЗаполнено(Условие),"WHERE ","") + Условие;
	rs = ADOСоединение.Execute(СтрЗаменить(Запрос,"-%WHERE%-", Условие));

	ТаблицаНомеровИОбъектов = ПолучитьТелефоныИОбъекты();
	
	ТабКешПродажи = Новый ТаблицаЗначений();
	ТабКешПродажи.Колонки.Добавить("Картинка");
	ТабКешПродажи.Колонки.Добавить("ВходящийПредставление");
	ТабКешПродажи.Колонки.Добавить("ВходящийОбъект");
	ТабКешПродажи.Колонки.Добавить("ИсходящийПредставление");
	ТабКешПродажи.Колонки.Добавить("ИсходящийОбъект");
	
	Попытка
	Пока НЕ rs = Неопределено Цикл
		Если rs.Fields.Count > 0 Тогда
			Для Каждого Field Из rs.Fields Цикл
				МассивТипов = Новый Массив;
				Если Field.Value = Null Тогда
					ТипValue = Тип("Строка");
				Иначе
					ТипValue = ТипЗнч(Field.Value);
				КонецЕсли;
				МассивТипов.Добавить(ТипValue);
				ТабКешПродажи.Колонки.Добавить(Field.Name, Новый ОписаниеТипов(МассивТипов));
			КонецЦикла;
			Прервать;
		КонецЕсли;
		rs = rs.NextRecordSet();
	КонецЦикла;

		Пока НЕ rs.EOF() Цикл
			СтруктураСтроки = Новый Структура();
			Для Каждого Field Из rs.Fields Цикл
				СтруктураСтроки.Вставить(Field.Name,Field.Value);
			КонецЦикла;
			
			//СтруктураСтроки.src = ОчиститьНомерТелефона(СтруктураСтроки.src);
			//СтруктураСтроки.dst = ОчиститьНомерТелефона(СтруктураСтроки.dst);
			
			Если Не ЗначениеЗаполнено(СтруктураСтроки.src)
				Или Не ЗначениеЗаполнено(СтруктураСтроки.dst) Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;
			
			СтрокаДоб = ТабКешПродажи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоб,СтруктураСтроки);
			
			СтрокаДоб.Картинка = ?(СтрДлина(СтрокаДоб.src)>5,0, ?(СтрДлина(СтрокаДоб.dst)>5,1,0));
			
			Если ЗначениеЗаполнено(СтрокаДоб.CustomerUIDsrc) Тогда
				СтрокаДоб.ВходящийОбъект = СтрокаДоб.CustomerUIDsrc;
				СтрокаДоб.ВходящийПредставление = СтрокаДоб.FullNamesrc + " (" + СтрокаДоб.src + ")";
			Иначе
				СтрокаТелефон = ТаблицаНомеровИОбъектов.Найти(СтрокаДоб.src,"НомерТелефона");
				Если СтрокаТелефон <> Неопределено Тогда
					СтрокаДоб.ВходящийОбъект = СтрокаТелефон.ОбъектТелефона;
					СтрокаДоб.ВходящийПредставление = Строка(СтрокаТелефон.ОбъектТелефона) + " (" + СтрокаДоб.src + ")";
				Иначе
					СтрокаДоб.ВходящийОбъект = "";
					СтрокаДоб.ВходящийПредставление = СтрокаДоб.src;
				КонецЕсли;			
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(СтрокаДоб.CustomerUIDdst) Тогда
				СтрокаДоб.ИсходящийОбъект = СтрокаДоб.CustomerUIDdst;
				СтрокаДоб.ИсходящийПредставление = СтрокаДоб.FullNamedst + " (" + СтрокаДоб.dst + ")";
			Иначе
				СтрокаТелефон = ТаблицаНомеровИОбъектов.Найти(СтрокаДоб.dst,"НомерТелефона");
				Если СтрокаТелефон <> Неопределено Тогда
					СтрокаДоб.ИсходящийОбъект = СтрокаТелефон.ОбъектТелефона;
					СтрокаДоб.ИсходящийПредставление = Строка(СтрокаТелефон.ОбъектТелефона) + " (" + СтрокаДоб.dst + ")";
				Иначе
					СтрокаДоб.ИсходящийОбъект = "";
					СтрокаДоб.ИсходящийПредставление = СтрокаДоб.dst;
				КонецЕсли;			
			КонецЕсли;			
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Текст = ОписаниеОшибки();
	КонецПопытки;

	ADOСоединение.Close();
	
	Если ТабКешПродажи.Колонки.Найти("calldate") <> Неопределено Тогда
		ТабКешПродажи.Сортировать("calldate Убыв");
	КонецЕсли;
	
	Возврат ТабКешПродажи;
	
КонецФункции

//+++АК SHEP 20160428
Функция АК_РегистрироватьОбращенияВТехподдержку(CallerID) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.АК_РегистрироватьОбращенияВТехподдержку.Получить() И НомераТехПоддержки().Найти(CallerID) <> Неопределено;
КонецФункции

Функция НомераТехПоддержки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивНомеровТехПоддержки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Константы.АК_НомераТехподдержки.Получить(), ",");
	Если МассивНомеровТехПоддержки.Количество() = 0 Тогда
		//МассивНомеровТехПоддержки.Добавить("2700");
		//МассивНомеровТехПоддержки.Добавить("2701");
		//МассивНомеровТехПоддержки.Добавить("2702");
		МассивНомеровТехПоддержки.Добавить("2703");
	КонецЕсли;
	
	Возврат МассивНомеровТехПоддержки;
	
КонецФункции

Функция ПодготовитьМассивСтруктурПоОтсутствующимОбращениямТехподдержки() Экспорт
	
	МассивСтруктурДляДокумента = Новый Массив;
	ВнутреннийНомер = ПолучитьВнутренийНомер();
	Если НЕ АК_РегистрироватьОбращенияВТехподдержку(ВнутреннийНомер) Тогда Возврат МассивСтруктурДляДокумента; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НомераТехподдержки = Константы.АК_НомераТехподдержки.Получить();
	Если НЕ ЗначениеЗаполнено(НомераТехподдержки) Тогда
		НомераТехподдержки = ВнутреннийНомер;
	КонецЕсли;
	
	ДатаНачалаЗвонковБез1С = Макс(Константы.АК_ДатаОбновленияОбращенийВТехподдержку.Получить() - 3600, НачалоДня(НачалоДня(ТекущаяДата())-1)); // берём со вчерашнего дня
	ДатаОкончанияЗвонковБез1С = КонецДня(ТекущаяДата());
	ТЗнЗвонков = ПрочитатьЛогAsterisk(ДатаНачалаЗвонковБез1С, ДатаОкончанияЗвонковБез1С, НомераТехподдержки);
	Константы.АК_ДатаОбновленияОбращенийВТехподдержку.Установить(ТекущаяДата());
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого СтрокаТЗнЗвонков Из ТЗнЗвонков Цикл
		UniqueID = СтрокаТЗнЗвонков.UniqueID;
		// ищем, записан ли у нас документ
		Если ЗначениеЗаполнено(Документы.АК_ОбращениеВТехподдержку.НайтиПоРеквизиту("UniqueID", UniqueID)) Тогда
			Продолжить;
		КонецЕсли;
		
		CallerID = ПолучитьКонтактПоНомеруТелефона(?(СтрДлина(СтрокаТЗнЗвонков.src)> 9, СтрокаТЗнЗвонков.src, СтрокаТЗнЗвонков.dst));
		
		СтруктураДокумента = Новый Структура("UniqueID,НомерТелефона,Дата", UniqueID, CallerID.Телефон, СтрокаТЗнЗвонков.calldate);
		Если ТипЗнч(CallerID.Объект) = Тип("Строка") Тогда
		ИначеЕсли ЗначениеЗаполнено(CallerID.Объект) Тогда
			Если ТипЗнч(CallerID.Объект) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				СтруктураДокумента.Вставить("ТорговаяТочка", CallerID.Объект);
			Иначе
				СтруктураДокумента.Вставить("Звонящий_Объект", CallerID.Объект);
			КонецЕсли;
		КонецЕсли;
		МассивСтруктурДляДокумента.Добавить(СтруктураДокумента);
		
	КонецЦикла;
	
	Возврат МассивСтруктурДляДокумента;
	
КонецФункции // ПодготовитьМассивСтруктурПоОтсутствующимОбращениямТехподдержки()

Функция ПолучитьКонтактПоНомеруТелефона(НомерТелефона)
	Возврат Новый Структура("Телефон,Объект", НомерТелефона, ПолучитьОбъектЗвонка(НомерТелефона));
КонецФункции

Процедура ОбновлениеСтатусовОбращенийВТехподдержкуИзЭлектроннойПочты() Экспорт
	
	УчёткаЭлектроннойПочты = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.Техподдержка");
	АдресЭПОтправителя = УчёткаЭлектроннойПочты.АдресЭлектроннойПочты;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаЭлектроннойПочты);
	Профиль.Пользователь = АдресЭПОтправителя;
	Профиль.ПользовательSMTP = АдресЭПОтправителя;
	Почта.Подключиться(Профиль);
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	КартинкиФорматДок = Новый Структура();
	
	//Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Попытка
			
			НужныйЗаголовок = "Обращение в техподдержку";
			МассивЗаголовковПисем = Почта.ПолучитьЗаголовки(Новый Структура("Тема,Прочитанные", НужныйЗаголовок, Ложь));
			
			Если МассивЗаголовковПисем.Количество() = 0 Тогда
				Почта.Отключиться();
				Возврат;
			КонецЕсли;
			
			Письма = Почта.Выбрать(Ложь, МассивЗаголовковПисем);
			Для Каждого Письмо Из Письма Цикл
				
				ТемаПисьма = Письмо.Тема;
				НомерОбращения = Найти(ТемаПисьма, НужныйЗаголовок);
				Если НомерОбращения = 0 Тогда Продолжить; КонецЕсли;
				
				НомерОбращения = СокрЛП(Сред(ТемаПисьма, НомерОбращения + СтрДлина(НужныйЗаголовок) + 1));
				НомерОбращения = СокрЛП(Лев(НомерОбращения, Найти(НомерОбращения, " ")));
				
				ДокументСсылка = Документы.АК_ОбращениеВТехподдержку.НайтиПоНомеру(НомерОбращения);
				Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда Продолжить; КонецЕсли;
				
				ТекстПисьмаПростой = "";
				Для Каждого ТекстПисьма Из Письмо.Тексты Цикл
					
					Если ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
						ТекстПисьмаПростой = ВРег(ТекстПисьма.Текст);
						Прервать;
						
					ИначеЕсли ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
						ФорматированныйДокумент.УстановитьHTML(ТекстПисьма.Текст, КартинкиФорматДок);
						ТекстПисьмаПростой = ВРег(ФорматированныйДокумент.ПолучитьТекст());
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПустаяСтрока(ТекстПисьмаПростой) Тогда Продолжить; КонецЕсли;
				
				// проставляем статус документа в соответствии с ответом в письме
				НовыйСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.ПустаяСсылка");
				
				Если Лев(ТекстПисьмаПростой, СтрДлина("ПРИН")) = "ПРИН" И ДокументСсылка.СтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Направлено") Тогда
					НовыйСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Принято");
				ИначеЕсли Лев(ТекстПисьмаПростой, СтрДлина("ОТМ")) = "ОТМ"
				И (ДокументСсылка.СтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Направлено")
				  ИЛИ ДокументСсылка.СтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Принято")
				  ИЛИ ДокументСсылка.СтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Выполнено")) Тогда
					НовыйСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Отменено");
				ИначеЕсли Лев(ТекстПисьмаПростой, СтрДлина("ВЫП")) = "ВЫП" И ДокументСсылка.СтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Принято") Тогда
					НовыйСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Выполнено");
				ИначеЕсли Лев(ТекстПисьмаПростой, СтрДлина("ПРОВ")) = "ПРОВ" И ДокументСсылка.СтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Выполнено") Тогда
					НовыйСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Проверено");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовыйСтатусОбращения) Тогда
				
					Попытка
						ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
						ДокументОбъект.СтатусОбращения = НовыйСтатусОбращения;
						ОтправительПисьма = Письмо.Отправитель;
						ДокументОбъект.Комментарий =
						  ?(ТипЗнч(ОтправительПисьма) = Тип("ИнтернетПочтовыйАдрес"), ОтправительПисьма.ОтображаемоеИмя + " <" + ОтправительПисьма.Адрес + ">", ОтправительПисьма);
						ДокументОбъект.Записать();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки; 
					
				КонецЕсли;
				
				Попытка
					// удаляем с сервера
					МассивЗаголовковПисем = Новый Массив;
					МассивЗаголовковПисем.Добавить(Письмо);
					Почта.Выбрать(Истина, МассивЗаголовковПисем);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки; 
				
			КонецЦикла;
			
			//Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
			//	ЗаписьЖурналаРегистрации("ПримечаниеМОС", УровеньЖурналаРегистрации.Примечание,,, "Отправка почты произведена успешно");
			//КонецЕсли;
			
		Исключение
			Сообщить(ОписаниеОшибки());
			ТекстОшибки = "Не удалось прочитать заголовки писем. Ошибка: " + ОписаниеОшибки();
			//Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
			//	ЗаписьЖурналаРегистрации("ОшибкаМОС", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при отправке почты");
			//КонецЕсли;
			Сообщить(ТекстОшибки);
		КонецПопытки;
	//КонецЕсли;	
	Почта.Отключиться();
	
КонецПроцедуры

//---АК SHEP 
