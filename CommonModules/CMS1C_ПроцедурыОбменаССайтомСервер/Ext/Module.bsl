// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",",УдалитьСпецсимволы = Ложь)
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				УбратьСпецсимволыИзСтроки(Стр);
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			
			ТекЗначение = Лев(Стр,Поз-1);
			Если УдалитьСпецсимволы Тогда
				УбратьСпецсимволыИзСтроки(ТекЗначение);
			КонецЕсли;
			МассивСтрок.Добавить(ТекЗначение);
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

ПРоцедура УбратьСпецсимволыИзСтроки(ТекСтрока)
	ТекСтрока = СтрЗаменить(ТекСтрока,"-","_");
КонецПроцедуры

Функция РазложитьСтрокуВМассивЗапросовПоТипу(Знач Стр, Тип)
	
	МассивСтрок = Новый Массив();
	
	Поз =1;
	Пока Истина Цикл
		Поз = Найти(Сред(Стр,2),Тип);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(Стр);
			Возврат МассивСтрок;
		КонецЕсли;
		СтрокаЗапроса = СокрЛП(Лев(Стр,Поз-1));
		Если СтрДлина(СтрокаЗапроса) Тогда
		МассивСтрок.Добавить(СтрокаЗапроса);
		КонецЕсли;
		Стр = Сред(Стр,Поз+1);
	КонецЦикла;
	
КонецФункции // глРазложить

Функция ЗапросSQLВерсия1(metod="",SQL="",Соединение,СтруктураПараметровСайта)Экспорт
	
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла("was"); //КаталогВременныхФайлов()+СокрЛП(СтруктураПараметровСайта.КодНастройки)+"data.was";//ПолучитьИмяВременногоФайла("was");
	ТекстЗапроса = Новый ТекстовыйДокумент();
	ТекстЗапроса.УстановитьТекст(SQL);	
	ТекстЗапроса.Записать(ИмяФайлаДанных,КодировкаТекста.Системная);
	//ТекстЗапроса.Прочитать();
	ОтветСервера = Неопределено;      	
	                                                //КаталогВыгрузки
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("was");//КаталогВременныхФайлов()+СокрЛП(СтруктураПараметровСайта.КодНастройки)+"responce.was";//ПолучитьИмяВременногоФайла("xml");  // "/xmlrpc/server.php"  "C:\responce.sql";
	//АдресСкриптаПолный = СтруктураПараметровСайта.АдресСкрипта+"?&usr="+СтруктураПараметровСайта.ИмяПользователя+"&pwd="+СтруктураПараметровСайта.Пароль+"&run="+metod+"&file="+СтрЗаменить(СтрЗаменить(СтруктураПараметровСайта.АдресСкрипта+"/zapros.txt","\","/")," ","+");
	//Boundary =  СтрЗаменить(Строка(Ссылка.УникальныйИдентификатор()), "-", "");
	Boundary = СтрЗаменить("boundaryemae", "-", "");
	//СодержимоеZIP = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДанных));
	//СодержимоеZIP 
	
	
	//Проверим размер кодированного файла.
	//Если СтрДлина(СодержимоеZIP) > ДопустимыйРазмерФайлаВБайтах Тогда
	////Какие-то ваши действия, возможно
	//Возврат "";
	//КонецЕсли;
	
	//Создаём файл отправки или содержимое POST-запроса.
	
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was"); //КаталогВременныхФайлов() +СокрЛП(СтруктураПараметровСайта.КодНастройки)+ "post.was";
	ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.Системная, Символы.ПС, ЛОЖЬ);
	
	//Определяем раздел двоичных данных
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """");
	
	//С таким же успехом в Content-Type можно указать application/x-octet-stream
	ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(ТекстЗапроса.ПолучитьТекст());
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	
	//Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	
	//Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку("1");
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""usr""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.ИмяПользователя); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""pwd""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.Пароль); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""run""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(metod); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	
	ФайлОтправки.Закрыть();
	
	
	
	ЗаголовокHTTP = Новый Соответствие();
	//Укажем формат данных Content-Type
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
		
	Попытка
		Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки,СтруктураПараметровСайта.АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP); 		
	Исключение
		Сообщить(ОписаниеОшибки());  
	КонецПопытки;
	
	//Попытка
	//	Соединение.Получить(АдресСкриптаПолный,ИмяФайлаОтвета,"Content-Type: application/x-www-form-urlencoded");
	//Исключение
	//	Сообщить(ОписаниеОшибки());  
	//КонецПопытки;	
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		Попытка
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		//ТекстОтвета.Записать(ИмяФайлаОтвета,КодировкаТекста.UTF8);
		//ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		Если ТекстОтвета.КоличествоСтрок()=0 Тогда
			Сообщить("Отправка файла запроса на сервер: Получен пустой ответ сервера."); 	
		КонецЕсли;	
		
		Исключение
		Сообщить("Ошибка чтения из файла "+ИмяФайлаОтвета); 
		КонецПопытки;	
		
	Иначе	
		Сообщить("Отправка файла на сервер: Ответ сервера не получен."); 
	КонецЕсли;	
	//Распарсим ответ
	
	Если (metod="load") или (metod="loadu") или (metod="clean") тогда
		//оставляем сырой ответ, только попытаемся привести его к числу;
		Попытка 
			Ответ = 0;
			Для стр=1 По ТекстОтвета.КоличествоСтрок() Цикл
				 Попытка 				 	
					Ответ = Ответ+ Число(ТекстОтвета.ПолучитьСтроку(стр));
				 Исключение 
				 Сообщить("Ошибка ответа сервера. Ответ:"+ ТекстОтвета.ПолучитьТекст());
				 КонецПопытки;//если исключение - значит там ошибка написана.
			КонецЦикла; 			
		Исключение КонецПопытки;//если исключение - значит там ошибка написана.
	ИначеЕсли metod="list" тогда
		//записываем ответ как ТЗ
		Если НЕ Найти(ТекстОтвета.ПолучитьСтроку(1),"{;}")>0 Тогда 
			Сообщить("Ошибка ответа сервера. Ответ:"+ ТекстОтвета.ПолучитьТекст());
			возврат "" ;
		КонецЕсли;	
		Ответ = Новый ТаблицаЗначений;
		ВсегоСтрок = ТекстОтвета.КоличествоСтрок();
		Для сч=1 по ВсегоСтрок Цикл 
			//#Если Клиент Тогда
			//Состояние("Преобразование данных запроса к серверу... обработано "+сч+" из "+ ВсегоСтрок); 
			//#КонецЕсли
			Строка = ТекстОтвета.ПолучитьСтроку(сч);
			//Пока Прав(СокрЛП(Строка),3)<>"<;>" Цикл
			//сч=сч+1;	
			//Строка = Строка+ТекстОтвета.ПолучитьСтроку(сч)	
			//КонецЦикла;
			Если сч=1 тогда
				Колонки = РазложитьСтрокуВМассивПодстрок(Строка,"{;}");
				Для каждого кол из Колонки Цикл
					Если кол="" Тогда
						продолжить;
					КонецЕсли;
					Ответ.Колонки.Добавить(кол);	
				КонецЦикла;
				продолжить;
			КонецЕсли;
			Колонки = РазложитьСтрокуВМассивПодстрок(Строка, "{;}");
			с=0;
			Строка = Ответ.Добавить();
			Для каждого кол из Колонки Цикл	
				Если с>=Ответ.Колонки.Количество() Тогда
					Продолжить
				КонецЕсли;
				Строка.Установить(с,кол); 
				с=с+1;    				
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		ответ = "Таблица пуста";
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), "*.was");
	Исключение
	КонецПопытки;
	
	Возврат ответ;
КонецФункции

Функция ODBCЗапросSQL(metod="",SQL="",Соединение,СтруктураПараметровСайта)
	
	SQL = " set names "+СокрЛП(СтруктураПараметровСайта.КодировкаMySQL)+ ";"+Символы.ПС+SQL;
	
	Если  metod="list" Тогда
		РазделительСтрок = "SELECT";
	ИначеЕсли metod="load"  Тогда
		РазделительСтрок = "INSERT";
	ИначеЕсли metod="loadu" Тогда
		РазделительСтрок = "UPDATE";
	ИначеЕсли metod="clean" Тогда
		РазделительСтрок = "DELETE";
	КонецЕсли;
	
	МассивЗапросов = РазложитьСтрокуВМассивЗапросовПоТипу(SQL, РазделительСтрок);
	
	НужноКоличество = НЕ metod="list";
	Результат = 0;
	Для Стр=0 По МассивЗапросов.Количество()-1 Цикл
		
		SQL = МассивЗапросов[Стр];
		Попытка
			
			Если Соединение.ВыполнитьЗапрос(SQL,,0) = 1 Тогда
				Если НЕ НужноКоличество Тогда
					Результат = Соединение.ПолучитьВсе();
				Иначе
					Результат = Результат + Соединение.КоличествоОбработанныхЗаписей();
				КонецЕсли;
			Иначе
			Сообщить("Ошибка выполнения запроса: "+SQL,СтатусСообщения.ОченьВажное);
			Сообщить(Соединение.ПоследняяОшибка(),СтатусСообщения.ОченьВажное);
			КонецЕсли;
		
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(СокрЛП(Соединение.ПоследняяОшибка()));
		КонецПопытки;					
		
	КонецЦикла;

	возврат Результат;
	
КонецФункции	

Функция УдалитьТегиГенератора(Знач Текст) Экспорт
	ТекстВрег = ВРЕГ(Текст);
	НачалоРезультата = Найти(ТекстВрег,"<BODY>")+6;
	КонецРезультата = Найти(ТекстВрег,"</BODY>")-1;
	Если КонецРезультата=-1 или НачалоРезультата = 6 или НачалоРезультата>КонецРезультата+1 Тогда
		возврат Текст;  //не нашли теги;
	КонецЕсли;
	Текст = СокрЛП(Сред(Текст,НачалоРезультата,КонецРезультата+1-НачалоРезультата));
	возврат Текст; 
КонецФункции

Функция ЗапросSQL(metod="",SQL="",Соединение,СтруктураПараметровСайта,seekrow=1,СтруктураПараметровЗапроса = Неопределено) Экспорт
	Перем НастройкиДляКолонокИЗначений,ВыводитьLastID,ФорматироватьНРЕГ,Отладка,МассивНовыхID;
	
	Если СтруктураПараметровЗапроса <> Неопределено Тогда
		СтруктураПараметровЗапроса.Свойство("НастройкиДляКолонокИЗначений",НастройкиДляКолонокИЗначений);
		Если НЕ СтруктураПараметровЗапроса.Свойство("ВыводитьLastID",ВыводитьLastID) Тогда
			ВыводитьLastID = Ложь;
		КонецЕсли;
		
		Если ВыводитьLastID И metod = "load" Тогда
			МассивНовыхID = Новый Массив;
		КонецЕсли;
		
		
		Если Не СтруктураПараметровЗапроса.Свойство("ФорматироватьНРЕГ",ФорматироватьНРЕГ) Тогда
			ФорматироватьНРЕГ = Ложь;
		КонецЕсли;
		
		
		Если НЕ СтруктураПараметровЗапроса.Свойство("Отладка",Отладка) Тогда
			Отладка = Ложь;
		КонецЕсли;
	Иначе
		ВыводитьLastID = Ложь;
		ФорматироватьНРЕГ = ЛОжь;
		НастройкиДляКолонокИЗначений = Неопределено;
		Отладка = Ложь;
	Конецесли;
	
	Если  СтруктураПараметровСайта.ПрямаяСвязьСMySQL Тогда
		возврат ODBCЗапросSQL(metod,SQL,Соединение,СтруктураПараметровСайта);		
	КонецЕсли;
	
	Для Инд = 1 по 20 Цикл
	
	//задержку 2 секунды
	ОтветСервера = Неопределено;      	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("was");
	
	ВручнуюСтавимЛимиты = Ложь;
	Если metod = "list" Тогда
		МаксимальноеКоличествоСтрокПолучаемыхИзБазы = СтруктураПараметровСайта.МаксимальноеКоличествоСтрокПолучаемыхИзБазы;
		Если Найти(SQL, " LIMIT ") = 0 Тогда
			SQLLIMIT = SQL + " LIMIT 0,"+(Формат(МаксимальноеКоличествоСтрокПолучаемыхИзБазы+1,"ЧГ="));
			ВручнуюСтавимЛимиты = Истина;
		Иначе
			SQLLIMIT = SQL;
		КонецЕсли;
		SeekrowБыло = seekrow;
		СчетчикЗапросов = 0;
	Иначе
		SQLLIMIT = SQL;
	КонецЕсли;
	
	НастройкаСайта = СтруктураПараметровСайта.НастройкаСайта;
	
    СформироватьФайлОтправкиИОтправитьДляОбработки(ИмяФайлаОтвета,metod,SQLLIMIT,Соединение,СтруктураПараметровСайта,seekrow,ВыводитьLastID);

	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);	
	
	Если ФайлОтвета.Существует() Тогда
		Если metod="list" тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	CMS1C_СпецсимволыДляЗамены.НастройкаСайта,
			               |	CMS1C_СпецсимволыДляЗамены.СимволКоторыйЗаменять,
			               |	CMS1C_СпецсимволыДляЗамены.СимволНаКоторыйЗаменять,
			               |	CMS1C_СпецсимволыДляЗамены.ЗаменятьПередСверкойИВернутьЗначениеОбратноПослеСверки,
			               |	CMS1C_СпецсимволыДляЗамены.ЗаменятьПослеСверки,
			               |	CMS1C_СпецсимволыДляЗамены.ЗаменятьПриЗагрузкеДанныхВТаблицуИзСайта,
			               |	CMS1C_СпецсимволыДляЗамены.ПорядокСортировки КАК ПорядокСортировки
			               |ИЗ
			               |	РегистрСведений.CMS1C_СпецсимволыДляЗамены КАК CMS1C_СпецсимволыДляЗамены
			               |ГДЕ
			               |	CMS1C_СпецсимволыДляЗамены.НастройкаСайта = &НастройкаСайта
			               |	И CMS1C_СпецсимволыДляЗамены.ЗаменятьПриЗагрузкеДанныхВТаблицуИзСайта
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ПорядокСортировки";
			Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
			ТаблицаСпецсимволовДляЗамены = Запрос.Выполнить().Выгрузить();
			
			
			
			Попытка
			//записываем ответ как ТЗ
			ТекстОтветаЗИПЧасть = Новый ТекстовыйДокумент();
			ТекстОтветаЗИПЧасть.УстановитьТипФайла(КодировкаТекста.UTF8);
			ФайлВременногоХранилищаОтвета =ПолучитьИмяВременногоФайла("was");	
			ТекстОтветаЗИПСтрока = Новый ЗаписьТекста(ФайлВременногоХранилищаОтвета, КодировкаТекста.UTF8);
			Пока Истина Цикл
				ЗИП = Новый ЧтениеZipФайла(ИмяФайлаОтвета);
				
				 ТекстЗаписи = "";
				Для каждого ФайлАрхива из ЗИП.Элементы Цикл
					ЗИП.Извлечь(ФайлАрхива,КаталогВременныхФайлов(),РежимВосстановленияПутейФайловZIP.НеВосстанавливать);	
					ТекстОтветаЗИПЧасть.Прочитать(КаталогВременныхФайлов()+ФайлАрхива.Имя,КодировкаТекста.UTF8);
					//ТекстЗаписи = ТекстОтветаЗИПЧасть.ПолучитьТекст();
					ВсегоСтрок = ТекстОтветаЗИПЧасть.КоличествоСтрок();
					ТекстЗаписи = ТекстОтветаЗИПЧасть.ПолучитьСтроку(ВсегоСтрок);
					
					НачалоДописки = Найти(ТекстЗаписи,"endrow-"); 										
					Если  НачалоДописки>0 Тогда 
					seekrow =  Число(СокрЛП(СтрЗаменить(Прав(ТекстЗаписи,СтрДлина(ТекстЗаписи)-НачалоДописки+1),"endrow-","")));
					ТекстЗаписи = Лев(ТекстЗаписи,НачалоДописки-1);
					ТекстОтветаЗИПЧасть.ЗаменитьСтроку(ВсегоСтрок,ТекстЗаписи);
					КонецЕсли; 

					Для НомерСтр = 1 По ВсегоСтрок-1 Цикл
						ТекстОтветаЗИПСтрока.ЗаписатьСтроку(ТекстОтветаЗИПЧасть.ПолучитьСтроку(НомерСтр));
					КонецЦикла;	
					

					ПоследняяСтрока = ТекстОтветаЗИПЧасть.ПолучитьСтроку(ВсегоСтрок);
					Если ПоследняяСтрока <> "" Тогда
						ТекстОтветаЗИПСтрока.ЗаписатьСтроку(ПоследняяСтрока);
					КонецЕСли;
					//КонецПопытки;
					//ТекстОтветаЗИПСтрока
				КонецЦикла;
				               
				Если НачалоДописки>0 Тогда 
					Если ВручнуюСтавимЛимиты Тогда
						СчетчикЗапросов = СчетчикЗапросов + 1;
						SQLLIMIT = SQL + " LIMIT " + Формат(СчетчикЗапросов*МаксимальноеКоличествоСтрокПолучаемыхИзБазы,"ЧГ=")+","+Формат(МаксимальноеКоличествоСтрокПолучаемыхИзБазы+1,"ЧГ=");
						SeekrowБыло = 0;
					Иначе
						SeekrowБыло = seekrow;
					КонецЕсли;
					
					СформироватьФайлОтправкиИОтправитьДляОбработки(ИмяФайлаОтвета,metod,SQLLIMIT,Соединение,СтруктураПараметровСайта,seekrowБыло,ВыводитьLastID);
				иначе 
				прервать;
				КонецЕсли; 
			КонецЦикла;		
			
            ТекстОтветаЗИПСтрока.Закрыть();
			ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("was");
			ТекстОтвета = Новый ЧтениеТекста(ФайлВременногоХранилищаОтвета,КодировкаТекста.UTF8);//Новый ТекстовыйДокумент();	
			Исключение
				ТекстОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета,КодировкаТекста.UTF8);//Новый ТекстовыйДокумент();
			КонецПопытки;
		Иначе
			ТекстОтвета = Новый ТекстовыйДокумент;
			ТекстОтвета.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);	
		КонецЕсли;
		
		
	Иначе	
		Сообщить("Отправка файла на сервер: Ответ сервера не получен."); 
	КонецЕсли;	
	//Распарсим ответ
	
	Если (metod="load") или (metod="loadu") или (metod="clean") тогда
		//оставляем сырой ответ, только попытаемся привести его к числу;
		Попытка 
			Ответ = 0;
			Для стр=1 По ТекстОтвета.КоличествоСтрок() Цикл
				БылоЧисло = Ложь;
				ТекущаяСтрокаТекстаОтвета = ТекстОтвета.ПолучитьСтроку(стр);
				Попытка 				 	
					Ответчисло = Число(ТекущаяСтрокаТекстаОтвета);
					БылоЧисло = Истина;
				Исключение
					ОтветЧисло = 0;
					
					Если metod = "load" И ВыводитьLastID Тогда
						Ответчисло = ТекущаяСтрокаТекстаОтвета;
					КонецЕсли;
				КонецПопытки;
				Если не БылоЧисло И Отладка Тогда
					Сообщить(ТекущаяСтрокаТекстаОтвета);
				КонецЕСли;
				Если metod = "load" И ВыводитьLastID Тогда
					МассивНовыхID.Добавить(Ответчисло);
				Иначе
					Ответ = Ответ+ Ответчисло;
				Конецесли;
			КонецЦикла; 			
		Исключение КонецПопытки;//если исключение - значит там ошибка написана.
	ИначеЕсли metod="list" тогда

		Ответ = Новый ТаблицаЗначений;
		сч=1;
		ПерваяСтрока = Истина;
		Пока  Истина Цикл 
			Строка = "";
			НашлиПереносСтроки = Ложь;
			ЭтоПерваяСтрокаЗаписи = Истина;
			Пока Не НашлиПереносСтроки Цикл
				НоваяСтрока = ТекстОтвета.ПрочитатьСтроку();
				
				Если НоваяСтрока = Неопределено Тогда
					Если Строка = "" Тогда
						Строка = Неопределено;
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
				
				Если ПерваяСтрока Тогда
					Строка = НоваяСтрока;
					НашлиПереносСтроки = Истина;
				Иначе
					Если Прав(НоваяСтрока,4)="{::}" Тогда
						НашлиПереносСтроки = Истина;
						НоваяСтрока = СтрЗаменить(НоваяСтрока,"{::}","");
					Иначе
						
					КонецЕсли;
					Если ЭтоПерваяСтрокаЗаписи Тогда
						Строка = Строка + НоваяСтрока;
						ЭтоПерваяСтрокаЗаписи = Ложь;
					Иначе
						Строка = Строка  + Символы.ПС + НоваяСтрока;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Строка = Неопределено Тогда
				прервать;
			КонецЕсли;
			Если ПерваяСтрока и (НЕ Найти(Строка,"{;}")>0) Тогда 
			Сообщить("Ошибка ответа сервера. Ответ:"+Символы.ПС+Строка);
			
			Если Отладка Тогда
				КоличествоСтрокВывести = 100;
				НСВывели = 1;
				Для Инд = НСВывели По КоличествоСтрокВывести Цикл
					Строка = ТекстОтвета.ПрочитатьСтроку();
					Если Строка = Неопределено Тогда
						Прервать;
					КонецЕсли;
					Сообщить(Строка);
				КонецЦикла;
			КонецЕсли;
			Сообщить("Запрос: " + SQL);
			
			
			возврат "" ;
			КонецЕсли;	
			ПерваяСтрока = Ложь;
			Если сч=1 тогда
				Колонки = РазложитьСтрокуВМассивПодстрок(Строка,"{;}",Истина);
				Для каждого кол из Колонки Цикл
					Если кол="" Тогда
						продолжить;
					КонецЕсли;
					Если НастройкиДляКолонокИЗначений = Неопределено Тогда
						Ответ.Колонки.Добавить(кол);
					Иначе
						НайдНастройкаДляКолонокИЗначений = НастройкиДляКолонокИЗначений.Найти(Кол,"ИмяКолонки");
						
						Если НайдНастройкаДляКолонокИЗначений = Неопределено Тогда
							НайдНастройкаДляКолонокИЗначений = НастройкиДляКолонокИЗначений.Найти("ПоУмолчанию","ИмяКолонки");
						КонецЕсли;
						
						Если НайдНастройкаДляКолонокИЗначений<> Неопределено Тогда
							Ответ.Колонки.Добавить(кол,НайдНастройкаДляКолонокИЗначений.ОписаниеТипов);
						Иначе
							Ответ.Колонки.Добавить(кол);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				сч=сч+1;
				продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицыСпецсимволов из ТаблицаСпецсимволовДляЗамены Цикл
				Строка = СтрЗаменить(Строка,СтрокаТаблицыСпецсимволов.СимволНаКоторыйЗаменять,СтрокаТаблицыСпецсимволов.СимволКоторыйЗаменять);
			КонецЦикла;
			
			Колонки = РазложитьСтрокуВМассивПодстрок(Строка, "{;}");
			с=0;
			Строка = Ответ.Добавить();
			Для каждого кол из Колонки Цикл	
				Если с>=Ответ.Колонки.Количество() Тогда
					Продолжить
				КонецЕсли;
				
				ТекЗначение = Кол;
				Если НастройкиДляКолонокИЗначений = Неопределено Тогда
					Строка.Установить(с,ТекЗначение);
				Иначе
					НайдНастройкаДляКолонокИЗначений = НастройкиДляКолонокИЗначений.Найти(Ответ.Колонки[с].Имя,"ИмяКолонки");
					
					Если НайдНастройкаДляКолонокИЗначений = Неопределено Тогда
						НайдНастройкаДляКолонокИЗначений = НастройкиДляКолонокИЗначений.Найти("ПоУмолчанию","ИмяКолонки");
					КонецЕсли;
					
					Если НайдНастройкаДляКолонокИЗначений = Неопределено Тогда
						Строка.Установить(с,ТекЗначение);
					Иначе
						Если НайдНастройкаДляКолонокИЗначений.ФорматироватьНРЕГ = Истина Тогда
							ТекЗначение = НРЕГ(ТекЗначение);
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
							Если НайдНастройкаДляКолонокИЗначений.НезаполненныеЗначенияNULL = Истина Тогда
								Если НайдНастройкаДляКолонокИЗначений.ОписаниеТипов.СодержитТип(Тип("Null")) Тогда
									ТекЗначение = NULL;
								КонецеСли;
							иначеЕсли НайдНастройкаДляКолонокИЗначений.ОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
								ТекЗначение = Дата(1,1,1,0,0,0);
							КонецЕсли;
						иначеЕсли НайдНастройкаДляКолонокИЗначений.ОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
							Если ТекЗначение = "0000-00-00 00:00:00"
								ИЛИ текЗначение = "0000_00_00 00:00:00"
								Тогда
								ТекЗначение = Дата(1,1,1,0,0,0);
							ИначеЕсли ТекЗначение = "" Тогда
								ТекЗначение = Дата(1,1,1,0,0,0);
							Иначе
								ТекЗначение = Дата(Лев(ТекЗначение,4),Сред(ТекЗначение,6,2),Сред(ТекЗначение,9,2),Сред(ТекЗначение,12,2),Сред(ТекЗначение,15,2),Прав(ТекЗначение,2));
							КонецЕсли;
							
						КонецЕсли;
						Строка.Установить(с,ТекЗначение);
					КонецЕсли;
				КонецЕсли;
				
				с=с+1;    
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли metod = "get_database_tables" Тогда
		ТаблицаТаблиц = Новый ТаблицаЗначений();
		ТаблицаТаблиц.Колонки.Добавить("ИмяТаблицы");
		ЕстьОшибки = Ложь;
		Для Инд = 1 По ТекстОтвета.КоличествоСтрок() Цикл
			ТекСтрока = ТекстОтвета.ПолучитьСтроку(ИНд);
			ДобСтрока = ТаблицаТаблиц.Добавить();
			ДобСтрока.ИмяТаблицы = ТекСтрока;
			
			Если Не ЕстьОшибки Тогда
				Если Найти(ТекСтрока,"<")<>0
					ИЛИ Найти(ТекСТрока," ") <> 0 
					ИЛИ Найти(ТекСТрока,"@") <> 0
					Тогда
					Сообщить("Ошибка подключения к базе данных MySQL. Причина:");
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьОшибки Тогда
				Сообщить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ТаблицаТаблиц;
	ИначеЕСли metod = "get_columns" Тогда
		ТаблицаКолонок = Новый ТаблицаЗначений();
		ТаблицаКолонок.Колонки.Добавить("Наименование");
		ТаблицаКолонок.Колонки.Добавить("Тип");
		ТаблицаКолонок.Колонки.Добавить("Размерность");
		ТаблицаКолонок.Колонки.Добавить("NULL");
		ТаблицаКолонок.Колонки.Добавить("ПоУмолчанию");
		ТаблицаКолонок.Колонки.Добавить("Индекс");
		ТаблицаКолонок.Колонки.Добавить("Экстра");
		Для Инд = 2 По ТекстОтвета.КоличествоСтрок() Цикл
			ТекСтрока = ТекстОтвета.ПолучитьСтроку(ИНд);
			МассивКОлонок = РазложитьСтрокуВМассивПодстрок(ТекСтрока,"{;}");
			ДобСтрока = ТаблицаКолонок.Добавить();
			ДобСтрока.Наименование = МассивКОлонок[0];
			ДобСтрока.Тип = МассивКОлонок[1];
			ДобСтрока.NULL = МассивКОлонок[2];
			ДобСтрока.Индекс = МассивКОлонок[3];
			ДобСтрока.ПоУмолчанию = МассивКОлонок[4];
			ДобСтрока.Экстра = МассивКОлонок[5];
		КонецЦИкла;
		Возврат ТаблицаКолонок;
	ИНачеЕсли metod = "get_files" Тогда
		ТаблицаФайлов = Новый ТаблицаЗначений();
		ТаблицаФайлов.Колонки.Добавить("ИмяФайла");
		ТаблицаФайлов.Колонки.Добавить("ЭтоПапка");
		ТаблицаФайлов.Колонки.Добавить("Хэш");
		ТаблицаФайлов.Колонки.Добавить("Размер");
		
		ДлинаНачальногоПути = СтрДлина(СтруктураПараметровСайта.path);
		Для Инд = 1 По ТекстОтвета.КоличествоСтрок() Цикл
			ТекСтрока = ТекстОтвета.ПолучитьСтроку(ИНд);
			ТекСтрока = СтрЗаменить(ТекСтрока,"""","");
			Колонки = РазложитьСтрокуВМассивПодстрок(ТекСтрока,";");
			
			Если Колонки.Количество() <> 4 Тогда
				ТекстСообщенияОбОшибке = "";
				КвоСтрок = ТекстОтвета.КоличествоСтрок();
				МаксимальноеКво = Мин(КвоСтрок,1000);
				Для Инд2 = 1 По МаксимальноеКво Цикл
					ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + ТекстОтвета.ПолучитьСтроку(ИНд2)+Символы.ПС;
				КонецЦикла;
				
				ТекстСообщенияОбОшибке = "При получении списка картинок возникла ошибка: ";
				Сообщить(ТекстСообщенияОбОшибке);
				ВызватьИсключение ТекстСообщенияОбОшибке;
			КонецЕсли;
			
			
			НефильтрованноеИмяФайла = Колонки[0];
			ИмяФайла = ОбработатьСтрокуИПолучитьИмяФайла(НефильтрованноеИмяФайла,СтруктураПараметровСайта.path,ДлинаНачальногоПути);
			
			ЭтоПапка = Колонки[1];
			Если ЭтоПапка = "d" Тогда
				ЭтоПапка = Истина;
			Иначе
				ЭтоПапка = Ложь;
			КонецЕсли;
			
			
			
			ДобСтрока = ТаблицаФайлов.Добавить();
			ДобСтрока.ИмяФайла = ИмяФайла;
			ДобСтрока.ЭтоПапка = ЭтоПапка;
			
			Если ЭтоПапка Тогда
				Продолжить;
			КонецЕсли;
			
			ДобСтрока.Хэш = Колонки[2];
			ДобСтрока.Размер = Число(Колонки[3]);
		КонецЦИкла;
		Возврат ТаблицаФайлов;
	ИначеЕсли metod = "searchIndex" Тогда
		КвоСтрок = ТекстОтвета.КоличествоСтрок();
		Если квоСтрок = 1 Тогда
			ТекСтрока = ТекстОтвета.ПолучитьСтроку(ИНд);
			Если ТекСтрока = "OK" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
	Иначе
		ответ = "Таблица пуста";
	КонецЕсли;
	ТекстОтвета = Неопределено;
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), "*.was");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Если metod = "load" И ВыводитьLastID Тогда
		Возврат МассивНовыхID;
	Иначе
		Возврат ответ;
	КонецЕсли;
КонецЦикла;
Возврат ответ;
КонецФункции

Процедура СформироватьФайлОтправкиИОтправитьДляОбработки(ИмяФайлаОтвета,metod,SQL,Соединение,СтруктураПараметровСайта,seekrow,ВыводитьLastID)
	Если ВыводитьLastID Тогда
		last_ID = "1";
	Иначе
		last_ID = "0";
	Конецесли;
	
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла("was");//КаталогВременныхФайлов()+СокрЛП(СтруктураПараметровСайта.КодНастройки)+"data.was";//ПолучитьИмяВременногоФайла("was");
	ТекстЗапроса = Новый ТекстовыйДокумент();
	ТекстЗапроса.УстановитьТипФайла(КодировкаТекста.UTF8);
	ТекстЗапроса.УстановитьТекст(SQL);	
	ТекстЗапроса.Записать(ИмяФайлаДанных,КодировкаТекста.UTF8);
	//ТекстЗапроса.Прочитать();
	ОтветСервера = Неопределено;      	
	//КаталогВыгрузки
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("was");
	
	Boundary = СтрЗаменить("boundaryemae", "-", "");
	
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	
	ФайлОтправки = Новый COMОбъект("ADODB.Stream");
	ФайлОтправки.Type     = 2;
	ФайлОтправки.Mode    = 3;
	ФайлОтправки.charset="UTF-8";
	ФайлОтправки.Open();
	
	Запрос = "";
	Запрос= Запрос+ Символы.ПС+ "--" + Boundary;	
	Запрос= Запрос+ Символы.ПС+"Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """";	
	Запрос= Запрос+ Символы.ПС+"Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+SQL;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""submit""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+"1";
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""usr""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.ИмяПользователя; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;          	
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""pwd""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.Пароль; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	//
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""last_ID""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+last_ID; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	//
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""maxrowscount""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+Формат(СтруктураПараметровСайта.МаксимальноеКоличествоСтрокПолучаемыхИзБазы,"ЧГ=");
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	
	Если metod = "searchIndex" Тогда
		Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""method""" + Символы.ПС;
		Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.method;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
		
		Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""ids""" + Символы.ПС;
		Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.ids;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	ИначеЕсли metod = "get_files" Тогда
		Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""key""" + Символы.ПС;
		Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.key;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
		
		Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""path""" + Символы.ПС;
		Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.path;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
		Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	КонецЕсли;
	//
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""run""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+metod; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;          	
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""seekrow""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+Формат(seekrow,"ЧГ=0"); 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	
	ФайлОтправки.WriteText(Запрос);
	ФайлОтправки.SaveToFile(ИмяФайлаОтправки,2);
	
	   
	// 
	
	Для НомерПопытки = 1 по 10 Цикл
	
		Попытка
		//Скрипт=Новый COMОбъект("MSScriptControl.ScriptControl");
		//Скрипт.Timeout = -1;
		//Скрипт.language="javascript";	
        WinHttpReq = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		
		Если metod = "get_files" Тогда
			WinHttpReq.SetTimeouts(0,0,0,0);
		КонецЕсли;
		
        
		//Скрипт.AddObject("WinHttpReq",WinHttpReq);
 	  	//Скрипт.Eval("WinHttpReq.Option(2)='utf-8'");//   windows-1251                                   
 	  	//Скрипт.Eval("WinHttpReq.Option(2)='windows-1251'");
		//WinHttpReq.Option(2,"'UTF-8'");
 	  	  //  Create an HTTP request.        
		  
		  Если ЗначениеЗаполнено(СтруктураПараметровСайта.Порт) Тогда
			  WinHttpReq.Open("POST", "http://"+СтруктураПараметровСайта.Сервер+":"+Формат(СтруктураПараметровСайта.Порт,"ЧГ=")+"/"+СтруктураПараметровСайта.АдресСкрипта, 0);
		  Иначе
			  WinHttpReq.Open("POST", "http://"+СтруктураПараметровСайта.Сервер+"/"+СтруктураПараметровСайта.АдресСкрипта, 0);
		  КонецЕсли;
		  
		//WinHttpReq.Open("POST", "c:"+, 0);
		WinHttpReq.SetRequestHeader("Content-Type", "multipart/form-data; boundary=" + Boundary);//+"; Charset=windows-1251"
		WinHttpReq.SetRequestHeader("Accept-Charset", "UTF-8");
		WinHttpReq.setRequestHeader("Content-Charset", "UTF-8"); 
	        
		Стрим = Новый COMОбъект("ADODB.Stream");
		//Стрим.charset = "Unicode";
		Стрим.Type = 1;
		Стрим.Mode = 3;
		Стрим.Open();
		Стрим.LoadFromFile(ИмяФайлаОтправки);
		//Скрипт.AddObject("Стрим",Стрим);		
		//Скрипт.Eval("WinHttpReq.Send(Стрим.Read())");//.toString()  Text(-1)
		
		СтримРид = Стрим.Read();
		
		WinHttpReq.Send(СтримРид);
		
		//Стрим.SaveToFile("c:\xxx3.txt",2);
		
		
		//WinHttpReq.Send(Стрим.ReadText(-1));
		//Стрим.Close();
		Стрим2 = Новый COMОбъект("ADODB.Stream");
		Стрим2.charset="UTF-8";
		Стрим2.Mode = 3;
	    Стрим2.Type = 1;
		
	    Стрим2.Open();                           
		//Скрипт.AddObject("Стрим2",Стрим2);		
		//Скрипт.Eval("Стрим2.Write(WinHttpReq.responseBody)");		
		Стрим2.Write(WinHttpReq.responseBody);
	    //Стрим2.SaveToFile(ПутьКФайлуКудаТест,2);
		Стрим2.SaveToFile(ИмяФайлаОтвета,2);
	    Стрим2.Close();
	    
		прервать;
		
		Исключение
		Сообщить(ОписаниеОшибки());
		Если НомерПопытки = 10 Тогда
			Сообщить("Не удалось отправить запрос:");
			Сообщить(SQL);
		КонецЕсли;			
		КонецПопытки;
	
    КонецЦикла;

	

	// ИмяФайлаДанных = ПолучитьИмяВременногоФайла("was");
	//
	//ТекстЗапроса = Новый ТекстовыйДокумент();
	//ТекстЗапроса.УстановитьТекст(SQL);	
	//ТекстЗапроса.Записать(ИмяФайлаДанных,КодировкаТекста.Системная);

	//ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	//Boundary = СтрЗаменить("boundaryemae", "-", "");
	//	
	////Создаём файл отправки или содержимое POST-запроса.
	//
	//ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.Системная, Символы.ПС, ЛОЖЬ);
	//
	////Определяем раздел двоичных данных
	//
	//ФайлОтправки.ЗаписатьСтроку(Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """");
	//
	////С таким же успехом в Content-Type можно указать application/x-octet-stream
	//ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(ТекстЗапроса.ПолучитьТекст());
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//
	////Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//
	////Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку("1");
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""usr""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.ИмяПользователя); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""pwd""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.Пароль); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""run""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(metod); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""seekrow""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(Формат(seekrow,"ЧГ=0")); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.Закрыть();

	////ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	//ФайлПроверки = Новый Файл(ИмяФайлаОтправки);
	//
	//ЗаголовокHTTP = Новый Соответствие();
	//
	////Укажем формат данных Content-Type
	//ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);	
	//ЗаголовокHTTP.Вставить("Content-Length", Строка(Формат(ФайлПроверки.Размер(),"ЧГ=0")));  //
	//
	//Попытка
	//	Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки,СтруктураПараметровСайта.АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP); 		
	//Исключение
	//	Сообщить("Ошибка при выполнении запроса:");  
	//	Сообщить(SQL);  
	//	Сообщить("Размер запроса:");  
	//	Сообщить(Строка(Формат(ФайлПроверки.Размер(),"ЧГ=0")));
	//	Сообщить(ОписаниеОшибки());	  
	//КонецПопытки;

КонецПроцедуры

Процедура СформироватьФайлОтправкиИОтправитьДляОбработки_Была(ИмяФайлаОтвета,metod,SQL,Соединение,СтруктураПараметровСайта,seekrow,ВыводитьLastID)
	
	
	Если ВыводитьLastID Тогда
		last_ID = "1";
	Иначе
		last_ID = "0";
	Конецесли;
	
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла("was");//КаталогВременныхФайлов()+СокрЛП(СтруктураПараметровСайта.КодНастройки)+"data.was";//ПолучитьИмяВременногоФайла("was");
	ТекстЗапроса = Новый ТекстовыйДокумент();
	ТекстЗапроса.УстановитьТекст(SQL);	
	ТекстЗапроса.Записать(ИмяФайлаДанных,КодировкаТекста.UTF16);
	//ТекстЗапроса.Прочитать();
	ОтветСервера = Неопределено;      	
	                                                //КаталогВыгрузки
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("was");
	
	Boundary = СтрЗаменить("boundaryemae", "-", "");

	//ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	
	//ФайлОтправки = Новый COMОбъект("ADODB.Stream");
    //ФайлОтправки.Type     = 2;
	//ФайлОтправки.Mode    = 3;
	//ФайлОтправки.charset="utf-8";
	//ФайлОтправки.charset="windows-1251";
	//ФайлОтправки.charset="unicode";
	//ФайлОтправки.Open();
	
	Запрос = "";
	Запрос= Запрос+ Символы.ПС+ "--" + Boundary;	
	Запрос= Запрос+ Символы.ПС+"Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """";	
	Запрос= Запрос+ Символы.ПС+"Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+SQL;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""submit""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+"1";
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""usr""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.ИмяПользователя; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;          	
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""pwd""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+СтруктураПараметровСайта.Пароль; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	//
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""last_ID""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+last_ID; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;          	
	//
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""maxrowscount""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+Формат(СтруктураПараметровСайта.МаксимальноеКоличествоСтрокПолучаемыхИзБазы,"ЧГ=");
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	//
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""run""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+metod; 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;
	Запрос= Запрос+ Символы.ПС+"--" + Boundary;          	
	Запрос= Запрос+ Символы.ПС+"Content-disposition: form-data; name=""seekrow""" + Символы.ПС;
	Запрос= Запрос+ Символы.ПС+Формат(seekrow,"ЧГ=0"); 
	Запрос= Запрос+ Символы.ПС+"--" + Boundary; 
	
	//ФайлОтправки.WriteText(Запрос);
	//ФайлОтправки.SaveToFile(ИмяФайлаОтправки,2);   
	
	   
	// 
	
	Для НомерПопытки = 1 по 10 Цикл
	
		Попытка
		//Скрипт=Новый COMОбъект("MSScriptControl.ScriptControl");
		//Скрипт.Timeout = -1;
		//Скрипт.language="javascript";	
        WinHttpReq = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
        
		//Скрипт.AddObject("WinHttpReq",WinHttpReq);
 	  	//Скрипт.Eval("WinHttpReq.Option(2)='utf-8'");//   windows-1251                                   
 	  	//Скрипт.Eval("WinHttpReq.Option(2)='windows-1251'");
		//WinHttpReq.Option(2)='windows-1251';
 	  	  //  Create an HTTP request.        
		WinHttpReq.Open("POST", "http://"+СтруктураПараметровСайта.Сервер+"/"+СтруктураПараметровСайта.АдресСкрипта, 0);
		WinHttpReq.SetRequestHeader("Content-Type", "multipart/form-data; boundary=" + Boundary);//+"; Charset=windows-1251"
		WinHttpReq.SetRequestHeader("Accept-Charset", "Unicode");
		WinHttpReq.setRequestHeader("Content-Charset", "Unicode"); 
	        
		//Стрим = Новый COMОбъект("ADODB.Stream");
		//Стрим.charset = "windows-1251";
	    //Стрим.Type = 1;
		//Стрим.Mode = 3;
	    //Стрим.Open();
		//Стрим.LoadFromFile(ИмяФайлаОтправки);
		//Скрипт.AddObject("Стрим",Стрим);		
		//Скрипт.Eval("WinHttpReq.Send(Стрим.Read())");//.toString()  Text(-1)
		WinHttpReq.Send(Запрос);
		//WinHttpReq.Send(Стрим.ReadText(-1));
		//Стрим.Close();
		Стрим2 = Новый COMОбъект("ADODB.Stream");
		Стрим2.charset="Unicode";
		Стрим2.Mode = 3;
	    Стрим2.Type = 1;
	    Стрим2.Open();                           
		//Скрипт.AddObject("Стрим2",Стрим2);		
		//Скрипт.Eval("Стрим2.Write(WinHttpReq.responseBody)");		
		Стрим2.Write(WinHttpReq.responseBody);
	    //Стрим2.SaveToFile(ПутьКФайлуКудаТест,2);
		Стрим2.SaveToFile(ИмяФайлаОтвета,2);
	    Стрим2.Close();
	    
		прервать;
		
		Исключение
		Сообщить(ОписаниеОшибки());
		Если НомерПопытки = 10 Тогда
			Сообщить("Не удалось отправить запрос:");
			Сообщить(SQL);
		КонецЕсли;			
		КонецПопытки;
	
    КонецЦикла;

	

	// ИмяФайлаДанных = ПолучитьИмяВременногоФайла("was");
	//
	//ТекстЗапроса = Новый ТекстовыйДокумент();
	//ТекстЗапроса.УстановитьТекст(SQL);	
	//ТекстЗапроса.Записать(ИмяФайлаДанных,КодировкаТекста.Системная);

	//ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	//Boundary = СтрЗаменить("boundaryemae", "-", "");
	//	
	////Создаём файл отправки или содержимое POST-запроса.
	//
	//ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.Системная, Символы.ПС, ЛОЖЬ);
	//
	////Определяем раздел двоичных данных
	//
	//ФайлОтправки.ЗаписатьСтроку(Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """");
	//
	////С таким же успехом в Content-Type можно указать application/x-octet-stream
	//ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(ТекстЗапроса.ПолучитьТекст());
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//
	////Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//
	////Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку("1");
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""usr""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.ИмяПользователя); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""pwd""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.Пароль); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""run""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(metod); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""seekrow""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку(Формат(seekrow,"ЧГ=0")); 
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	//ФайлОтправки.Закрыть();

	////ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	//ФайлПроверки = Новый Файл(ИмяФайлаОтправки);
	//
	//ЗаголовокHTTP = Новый Соответствие();
	//
	////Укажем формат данных Content-Type
	//ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);	
	//ЗаголовокHTTP.Вставить("Content-Length", Строка(Формат(ФайлПроверки.Размер(),"ЧГ=0")));  //
	//
	//Попытка
	//	Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки,СтруктураПараметровСайта.АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP); 		
	//Исключение
	//	Сообщить("Ошибка при выполнении запроса:");  
	//	Сообщить(SQL);  
	//	Сообщить("Размер запроса:");  
	//	Сообщить(Строка(Формат(ФайлПроверки.Размер(),"ЧГ=0")));
	//	Сообщить(ОписаниеОшибки());	  
	//КонецПопытки;

КонецПроцедуры

Процедура СформироватьФайлОтправкиИОтправитьДляОбработки2(ИмяФайлаОтвета,metod,SQL,Соединение,СтруктураПараметровСайта,seekrow)
	
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла("was");
	
	ТекстЗапроса = Новый ТекстовыйДокумент();
	ТекстЗапроса.УстановитьТекст(SQL);	
	ТекстЗапроса.Записать(ИмяФайлаДанных,КодировкаТекста.Системная);

	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	Boundary = СтрЗаменить("boundaryemae", "-", "");
		
	//Создаём файл отправки или содержимое POST-запроса.
	
	ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.Системная, Символы.ПС, ЛОЖЬ);
	
	//Определяем раздел двоичных данных
	
	ФайлОтправки.ЗаписатьСтроку(Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """");
	
	//С таким же успехом в Content-Type можно указать application/x-octet-stream
	ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(ТекстЗапроса.ПолучитьТекст());
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	
	//Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	
	//Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку("1");
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""usr""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.ИмяПользователя); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""pwd""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(СтруктураПараметровСайта.Пароль); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""run""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(metod); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);          	
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""seekrow""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку(Формат(seekrow,"ЧГ=0")); 
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
	ФайлОтправки.Закрыть();

	//ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("was");
	ФайлПроверки = Новый Файл(ИмяФайлаОтправки);
	
	ЗаголовокHTTP = Новый Соответствие();
	
	//Укажем формат данных Content-Type
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);	
	ЗаголовокHTTP.Вставить("Content-Length", Строка(Формат(ФайлПроверки.Размер(),"ЧГ=0")));  //
	
	Попытка
		Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки,СтруктураПараметровСайта.АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP); 		
	Исключение
		Сообщить("Ошибка при выполнении запроса:");  
		Сообщить(SQL);  
		Сообщить("Размер запроса:");  
		Сообщить(Строка(Формат(ФайлПроверки.Размер(),"ЧГ=0")));
		Сообщить(ОписаниеОшибки());	  
	КонецПопытки;

КонецПроцедуры

Процедура Задержка(КвоСекунд)
	ТекДата = ТекущаяДата();
	ДатуДождаться = ТекДата+КвоСекунд;
	Пока ТекДата <=ДатуДождаться Цикл
		ТекДата = ТекущаяДата();
	КонецЦикла;
КонецПроцедуры

///ХЕШИРОВАНИЕ

// Возвращает хеш по алгоритму MD5 для произвольной строки.
//
// Параметры:
//  Строка - Строка - произвольная строка любой длины
//
// Возвращаемое значение:
//  Строка - хеш, вычисленный из строки
Функция ВычислитьХешСтрокиПоАлгоритмуMD5(Знач Строка) Экспорт
	
	a = ЧислоВБинарныйМассив(1732584193); // 01 23 45 67; (шестнадцатеричное представление, сначала младший байт)
	b = ЧислоВБинарныйМассив(4023233417); // 89 AB CD EF;
	c = ЧислоВБинарныйМассив(2562383102); // FE DC BA 98;
	d = ЧислоВБинарныйМассив(271733878);  // 76 54 32 10;
	
	X = Новый Массив(16); // X - блок данных размером 512 бит, массив из 32-битных слов
	
	// разбиваем строку на блоки по 512 бит
	МассивБлоковИзСтроки = ПолучитьМассивБлоковБайтовИзСтроки(Строка);
	
	// для каждого блока производим расчет
	Для НомерБлока = 0 По МассивБлоковИзСтроки.Количество() - 1 Цикл 
		Блок = МассивБлоковИзСтроки[НомерБлока];
		Для НомерСлова = 0 по 15 Цикл
			Слово = 0;
			Для НомерБайта = 1 По 4 Цикл
				Слово = Слово + Блок[НомерСлова * 4 + НомерБайта - 1] * Pow(256, НомерБайта - 1);
			КонецЦикла;
			X[НомерСлова] = Слово; 
		КонецЦикла;
		
		// в последний блок дописываем длину строки в битах
		Если НомерБлока = МассивБлоковИзСтроки.Количество() - 1 Тогда
			РазмерСтрокиВБитах = СтрДлина(Строка) * 8;
			X[14] = РазмерСтрокиВБитах % Pow(2,32); // сначала младшие 4 байта
			X[15] = Цел(РазмерСтрокиВБитах / Pow(2,32)) % Pow(2,64); // если длина превосходит (2^64 − 1) бит, то старшие биты откидываем
		КонецЕсли;
		РассчитатьБлок(a, b, c, d, X);
	КонецЦикла;
	
	Результат = ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(a))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(b))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(c))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(d));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивБлоковБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Строка = Строка + Символ(128); // единичный бит + выравнивание нолями до байта
	Пока СтрДлина(Строка) > 0 Цикл
		БлокБайтов = ПолучитьБлокБайтовИзСтроки(Лев(Строка, 64));
		Результат.Добавить(БлокБайтов);
		
		// если последние 8 байт получились не нулевые, то добавляем ещё один нулевой блок
		Если СтрДлина(Строка) > 56 и СтрДлина(Строка) < 64 Тогда
			Результат.Добавить(ПолучитьБлокБайтовИзСтроки(""));
		КонецЕсли;
		
		Строка = Сред(Строка, 65);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьБлокБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Результат.Добавить(КодСимвола(Сред(Строка, Позиция, 1)));
	КонецЦикла;
	
	// дополняем блок нолями
	Для Индекс = Позиция По 64 Цикл
		Результат.Добавить(0);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура РассчитатьБлок(a, b, c, d, X)
	aa = СкопироватьМассив(a);
	bb = СкопироватьМассив(b);
	cc = СкопироватьМассив(c);
	dd = СкопироватьМассив(d);
	
	// раунд 1
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 0],  7, 3614090360); // 0xd76aa478 /* 1 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 1], 12, 3905402710); // 0xe8c7b756 /* 2 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 2], 17,  606105819); // 0x242070db /* 3 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 3], 22, 3250441966); // 0xc1bdceee /* 4 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 4],  7, 4118548399); // 0xf57c0faf /* 5 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 5], 12, 1200080426); // 0x4787c62a /* 6 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 6], 17, 2821735955); // 0xa8304613 /* 7 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 7], 22, 4249261313); // 0xfd469501 /* 8 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 8],  7, 1770035416); // 0x698098d8 /* 9 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 9], 12, 2336552879); // 0x8b44f7af /* 10 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[10], 17, 4294925233); // 0xffff5bb1 /* 11 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[11], 22, 2304563134); // 0x895cd7be /* 12 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[12],  7, 1804603682); // 0x6b901122 /* 13 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[13], 12, 4254626195); // 0xfd987193 /* 14 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[14], 17, 2792965006); // 0xa679438e /* 15 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[15], 22, 1236535329); // 0x49b40821 /* 16 */
	
	// раунд 2
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 1],  5, 4129170786); // 0xf61e2562 /* 17 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 6],  9, 3225465664); // 0xc040b340 /* 18 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[11], 14,  643717713); // 0x265e5a51 /* 19 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 0], 20, 3921069994); // 0xe9b6c7aa /* 20 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 5],  5, 3593408605); // 0xd62f105d /* 21 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[10],  9,   38016083); //  0x2441453 /* 22 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[15], 14, 3634488961); // 0xd8a1e681 /* 23 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 4], 20, 3889429448); // 0xe7d3fbc8 /* 24 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 9],  5,  568446438); // 0x21e1cde6 /* 25 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[14],  9, 3275163606); // 0xc33707d6 /* 26 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 3], 14, 4107603335); // 0xf4d50d87 /* 27 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 8], 20, 1163531501); // 0x455a14ed /* 28 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[13],  5, 2850285829); // 0xa9e3e905 /* 29 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 2],  9, 4243563512); // 0xfcefa3f8 /* 30 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 7], 14, 1735328473); // 0x676f02d9 /* 31 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[12], 20, 2368359562); // 0x8d2a4c8a /* 32 */
	
	// раунд 3
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 5],  4, 4294588738); // 0xfffa3942 /* 33 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 8], 11, 2272392833); // 0x8771f681 /* 34 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[11], 16, 1839030562); // 0x6d9d6122 /* 35 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[14], 23, 4259657740); // 0xfde5380c /* 36 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 1],  4, 2763975236); // 0xa4beea44 /* 37 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 4], 11, 1272893353); // 0x4bdecfa9 /* 38 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 7], 16, 4139469664); // 0xf6bb4b60 /* 39 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[10], 23, 3200236656); // 0xbebfbc70 /* 40 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[13],  4,  681279174); // 0x289b7ec6 /* 41 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 0], 11, 3936430074); // 0xeaa127fa /* 42 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 3], 16, 3572445317); // 0xd4ef3085 /* 43 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 6], 23,   76029189); //  0x4881d05 /* 44 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 9],  4, 3654602809); // 0xd9d4d039 /* 45 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[12], 11, 3873151461); // 0xe6db99e5 /* 46 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[15], 16,  530742520); // 0x1fa27cf8 /* 47 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 2], 23, 3299628645); // 0xc4ac5665 /* 48 */
	
	// раунд 4
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 0],  6, 4096336452); // 0xf4292244 /* 49 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 7], 10, 1126891415); // 0x432aff97 /* 50 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[14], 15, 2878612391); // 0xab9423a7 /* 51 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 5], 21, 4237533241); // 0xfc93a039 /* 52 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[12],  6, 1700485571); // 0x655b59c3 /* 53 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 3], 10, 2399980690); // 0x8f0ccc92 /* 54 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[10], 15, 4293915773); // 0xffeff47d /* 55 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 1], 21, 2240044497); // 0x85845dd1 /* 56 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 8],  6, 1873313359); // 0x6fa87e4f /* 57 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[15], 10, 4264355552); // 0xfe2ce6e0 /* 58 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 6], 15, 2734768916); // 0xa3014314 /* 59 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[13], 21, 1309151649); // 0x4e0811a1 /* 60 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 4],  6, 4149444226); // 0xf7537e82 /* 61 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[11], 10, 3174756917); // 0xbd3af235 /* 62 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 2], 15,  718787259); // 0x2ad7d2bb /* 63 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 9], 21, 3951481745); // 0xeb86d391 /* 64 */
	
	a = БинарнаяСумма(a, aa);
	b = БинарнаяСумма(b, bb);
	c = БинарнаяСумма(c, cc);
	d = БинарнаяСумма(d, dd);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейF(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, c), ПобитовоеИ(ПобитовоеНе(b), d)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейG(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, d), ПобитовоеИ(ПобитовоеНе(d), c)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейH(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключающееИли(ПобитовоеИсключающееИли(b, c), d), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейI(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключающееИли(ПобитовоеИли(ПобитовоеНе(d), b), c), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперацию(q, a, b, X, s, t)
	a = БинарнаяСумма(ЦиклическийСдвигВлево(БинарнаяСумма(БинарнаяСумма(a, q), ЧислоВБинарныйМассив((X + t) % Pow(2,32))), s), b);
КонецПроцедуры

Функция ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат = Новый Массив;
	ТекущийРазряд = 0;
	Пока ТекущийРазряд < ВсегоРазрядов Цикл
		ТекущийРазряд = ТекущийРазряд + 1;
		Результат.Добавить(Булево(Число % 2));
		Число = Цел(Число / 2);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.Количество()-1) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 4)
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаСимволов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПобитовоеИ(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] И БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] Или БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеИсключающееИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеНе(БинарныйМассив)
	Результат = Новый Массив;
	Для Каждого Элемент Из БинарныйМассив Цикл
		Результат.Добавить(Не Элемент);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ЦиклическийСдвигВлево(БинарныйМассив, КоличествоРазрядов)
	Результат = Новый Массив(БинарныйМассив.Количество());
	Для Разряд = 0 По БинарныйМассив.Количество()-1 Цикл
		Результат[(Разряд + КоличествоРазрядов) % БинарныйМассив.Количество()] = БинарныйМассив[Разряд];
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарнаяСумма(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	ДобавитьКРазряду = Ложь;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс] <> ДобавитьКРазряду);
		ДобавитьКРазряду = (0 + БинарныйМассив1[Индекс] + БинарныйМассив2[Индекс] + ДобавитьКРазряду) > 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СкопироватьМассив(Массив)
	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	Возврат Результат;
КонецФункции

////////
Функция ПолучитьСтрокуОтборовПоПолюДляСайта(МассивЭлементов,ПолноеИмяПоля,Знач НачалоУсловия = Неопределено,ЕслиСписокПустойВыдатьЛожь = Истина) Экспорт
	СтрокаУсловия = "";
	Если НачалоУсловия = Неопределено Тогда
		НачалоУсловия = " WHERE";
	КонецЕсли;
	
	Для Каждого ЭлМас из МассивЭлементов Цикл
		СтрокаУсловия = СтрокаУсловия+"'"+ЭлМас+"'"+",";
	КонецЦикла;
	
	ДлинаУсловия = СтрДлина(СтрокаУсловия)-1;
	Если ДлинаУсловия > 0 Тогда
		СтрокаУсловия = Лев(СтрокаУсловия,ДлинаУсловия);
	КонецЕсли;
	
	Если СтрокаУсловия = ""Тогда
		Если ЕслиСписокПустойВыдатьЛожь ТОгда
			Возврат " "+НачалоУсловия + " FALSE";
			
		Иначе
			Возврат "";
		Конецесли;
	КонецЕсли;
	
	
	СтрокаУсловия = " "+НачалоУсловия+" "+ПолноеИмяПоля + " IN ("+СтрокаУсловия+")";
	Возврат СтрокаУсловия;
КонецФункции
////////

&НаСервере
Процедура ВызватьАвтообмен(Ссылка) Экспорт 
	ОбъектНастройки = Ссылка.ПолучитьОбъект();	
	ОбъектНастройки.ВыполнитьАвтообмен();
КонецПРоцедуры

ФУнкция ПолучитьСтрокуФильтраДляКатегории(ТабЧастьКатегорий) Экспорт
	Стр = "";
	Для Каждого СТрТз из ТабЧастьКатегорий Цикл
		Если ТипЗнч(СтрТз.Свойство) = Тип("Строка") Тогда
			Стр = Стр + "price,";
		Иначе
			Если Не ЗначениеЗаполнено(СтрТз.СВойство.ID) Тогда
				Продолжить;
			КонецЕсли;
			Стр = Стр + Формат(СтрТз.СВойство.ID,"ЧГ=")+",";
		Конецесли;
	КонецЦИкла;
	
	Если СтрДлина(стр) <> 0 Тогда
		Стр = Лев(Стр,СТрДлина(Стр)-1);
	Конецесли;
	Возврат Стр;
КонецФУнкции

Функция ПолучитьСтрокуПараметровФильтрацииДляДинамическихКатегорий(Категория) Экспорт
	Стр = "";
	Если ЗначениеЗаполнено(Категория.ИспользоватьФильтрРейтинг) Тогда
		Стр = Стр + "rating"+ Формат(Категория.ФильтрРейтингВидСравнения,"БЛ=>=; БИ=<=")+Категория.Рейтинг+"&";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Категория.ИспользоватьФильтрЦена) Тогда
		Если Категория.ФильтрЦенаОт > 0 Тогда
			Стр = СТр + "price>="+Формат(КАтегория.ФильтрЦенаОт,"ЧРД=.; ЧГ=")+"&";
		Конецесли;
		
		Если Категория.ФильтрЦенаДо > 0 Тогда
			Стр = СТр + "price<="+Формат(КАтегория.ФильтрЦенаДо,"ЧРД=.; ЧГ=")+"&";
		КОнецЕсли;
	КонецЕсли;
	
	Если СтрДлина(Стр) > 0 Тогда
		Стр = Лев(Стр,СтрДлина(Стр)-1);
	КОнецесли;
	Возврат Стр;
	
	
	
КонецФункции


Функция ВернутьСсылкуНаНоменклатуруДоставки(ТипДоставки,Настройка) Экспорт
	
	Если ТипЗнч(ТипДоставки) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ТипДоставки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипДоставки) Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ЗапросПоДоставке = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	CMS1C_СоответствияНоменклатурыВ1СИТиповДоставкиНаСайте.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.CMS1C_СоответствияНоменклатурыВ1СИТиповДоставкиНаСайте КАК CMS1C_СоответствияНоменклатурыВ1СИТиповДоставкиНаСайте
		|ГДЕ
		|	CMS1C_СоответствияНоменклатурыВ1СИТиповДоставкиНаСайте.НастройкаСайта = &НастройкаСайта
		|	И &НаСайте ПОДОБНО ""%"" + CMS1C_СоответствияНоменклатурыВ1СИТиповДоставкиНаСайте.НаСайте + ""%""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура");
		
		ЗапросПоДоставке.УстановитьПараметр("НастройкаСайта",Настройка);
		ЗапросПоДоставке.УстановитьПараметр("НаСайте",ТипДоставки);
		Результат = ЗапросПоДоставке.Выполнить();
		Если Результат.Пустой() Тогда
			Сообщить("Не указано соответствие типа доставки сайта и номенклатуры 1С для типа доставки "+ТипДоставки+". Заполните соответствие");
			Возврат Справочники.Номенклатура.ПустаяСсылка();//стр.ТипДоставки= СокрЛП(стр.ТипДоставки);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Номенклатура;
		КонецЕсли;
	//возврат CMS1C_ПроцедурыОбменаССайтомСерверСВызовом.ВернутьСсылкуНаНоменклатуруДоставки(ТипДоставки,Настройка);
КонецФункции 

ФУнкция ПолучитьТаблицуЗначенийИСвойствВариантов(Вариант,НастройкаСайта) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_ПринадлежностьСвойствКТипамТоваров.Свойство,
	               |	CMS1C_ПринадлежностьСвойствКТипамТоваров.Сортировка КАК Сортировка
	               |ПОМЕСТИТЬ НесвернутаяГотоваяТаблица
	               |ИЗ
	               |	РегистрСведений.CMS1C_ПринадлежностьСвойствКТипамТоваров КАК CMS1C_ПринадлежностьСвойствКТипамТоваров
	               |ГДЕ
	               |	CMS1C_ПринадлежностьСвойствКТипамТоваров.ТипТоваров = &ТипТоваров
	               |	И CMS1C_ПринадлежностьСвойствКТипамТоваров.Свойство.МножественныйВыбор
	               |	И CMS1C_ПринадлежностьСвойствКТипамТоваров.Свойство.ЕстьВыбор
	               |	И CMS1C_ПринадлежностьСвойствКТипамТоваров.Свойство.ВсеТипыТоваров = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CMS1C_СвойстваОбъектов.Ссылка,
	               |	CMS1C_СвойстваОбъектов.СортировкаХарактеристикДляВариантов
	               |ИЗ
	               |	ПланВидовХарактеристик.CMS1C_СвойстваОбъектов КАК CMS1C_СвойстваОбъектов
	               |ГДЕ
	               |	CMS1C_СвойстваОбъектов.НастройкаСайта = &НастройкаСайта
	               |	И CMS1C_СвойстваОбъектов.ВсеТипыТоваров
	               |	И CMS1C_СвойстваОбъектов.ЕстьВыбор
	               |	И CMS1C_СвойстваОбъектов.МножественныйВыбор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НесвернутаяГотоваяТаблица.Свойство КАК Свойство,
	               |	МАКСИМУМ(НесвернутаяГотоваяТаблица.Сортировка) КАК Сортировка,
	               |	ЗНАЧЕНИЕ(Справочник.CMS1C_ЗначенияСвойствОбъектов.ПустаяСсылка) КАК Значения
	               |ИЗ
	               |	НесвернутаяГотоваяТаблица КАК НесвернутаяГотоваяТаблица
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НесвернутаяГотоваяТаблица.Свойство
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сортировка,
	               |	Свойство
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ТипТоваров",Вариант.Владелец.ТипТоваров);
	Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
	тз = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрТз из тз Цикл
		СтрТз.Значения = ПолучитьЗначенияСвойства(СтрТз.Свойство,Вариант,НастройкаСайта);
	КонецЦикла;
	Возврат тз;
КонецФУнкции

Функция ПолучитьЗначенияСвойства(Свойство,Вариант,НастройкаСайта)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	CMS1C_ЗначенияСвойствОбъектов.Объект,
	|	CMS1C_ЗначенияСвойствОбъектов.Свойство,
	|	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта,
	|	CMS1C_ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	|ГДЕ
	|	CMS1C_ЗначенияСвойствОбъектов.Объект = &Объект
	|	И CMS1C_ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта = &НастройкаСайта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Объект",Вариант);
	Запрос.УстановитьПараметр("Свойство",Свойство);
	Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
	
	Стр = "";
	Выб = Запрос.Выполнить().Выбрать();
	
	БылиЗначения = Ложь;
	Пока Выб.Следующий() Цикл
		БылиЗначения = Истина;
		//Если Свойство.ТипЗначения = Перечисления.ТипыСвойств.ВыпадающийСписок Тогда
		Возврат Выб.Значение;
	КонецЦикла;
	
	Возврат Справочники.CMS1C_ЗначенияСвойствОбъектов.ПустаяСсылка();
КонецФункции

Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

 // Процедура удаляет все элементы настройки компоновки данных из объекта
//
Процедура ОчиститьНастройкиКомпоновкиДанных(Настройки) Экспорт
	
	Если Настройки = Неопределено или ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Значение = Неопределено;
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Для каждого Параметр Из Настройки.ПараметрыВывода.Элементы Цикл
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	Настройки.Структура.Очистить();
	
КонецПроцедуры

Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

ФУнкция ОбработатьСтрокуИПолучитьИмяФайла(НефильтрованноеИмяФайла,НачальныйПуть,ДлинаНачальногоПути)
	НайдНом = Найти(НефильтрованноеИмяФайла,НачальныйПуть);
	
	Возврат Сред(НефильтрованноеИмяФайла,НайдНом+ДлинаНачальногоПути);
КонецФУнкции

Функция ПолучитьОбработкуПоСистемеУправленияСайтом(СистемаУправленияСайтомИлиНастройкаСайта) Экспорт
	Если ТИпЗнч(СистемаУправленияСайтомИлиНастройкаСайта) = Тип("СправочникСсылка.CMS1C_НастройкиСайтов") Тогда
		СистемаУправленияСайтом = СистемаУправленияСайтомИлиНастройкаСайта.СистемаУправленияСайтом;
		
		Если Не ЗначениеЗаполнено(СистемаУправленияСайтом) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Об = Обработки["cms1C_"+СокрЛП(СистемаУправленияСайтом)+"_ОбработкаОбмена"].Создать();
		Об.НАстройкаСайта = СистемаУправленияСайтомИлиНастройкаСайта;
		Об.СистемаУправленияСайтом = СистемаУправленияСайтом;
		
	ИНаче
		СистемаУправленияСайтом = СистемаУправленияСайтомИлиНастройкаСайта;
		
		Если Не ЗначениеЗаполнено(СистемаУправленияСайтом) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Об = Обработки["cms1C_"+СокрЛП(СистемаУправленияСайтом)+"_ОбработкаОбмена"].Создать();
		Об.СистемаУправленияСайтом = СистемаУправленияСайтом;
	КонецЕсли;
	Возврат Об;
КонецФУнкции

Процедура CMS1C_УстановкаВесаПередЗаписью(Источник, Отказ) Экспорт
	Если ТипЗнч(Источник) = тип("СправочникОбъект.ЕдиницыИзмерения") Тогда
	Если Источник.Владелец.ЕдиницаХраненияОстатков <> Источник.Ссылка Тогда
		Возврат;
	КонецЕсли;
	УстановитьВес(Источник.Владелец);
Иначе
	УстановитьВес(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВес(Номенклатура)
	ЕдИзм = Номенклатура.ЕдиницаХраненияОстатков;
	Если Не ЗначениеЗаполнено(ЕдИзм) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВеса = ЕдИзм.Вес;
	
	
	Запрос = новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CMS1C_Номенклатура.Ссылка,
	               |	CMS1C_Номенклатура.НастройкаСайта,
	               |	CMS1C_Номенклатура.НастройкаСайта.СвойствоВес,
	               |	&ЗначениеВеса
	               |ПОМЕСТИТЬ ВсеДопы
	               |ИЗ
	               |	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
	               |ГДЕ
	               |	CMS1C_Номенклатура.Владелец = &Номенклатура
	               |	И CMS1C_Номенклатура.НастройкаСайта.СвойствоВес <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.CMS1C_СвойстваОбъектов.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CMS1C_ЗначенияСвойствОбъектов.НастройкаСайта,
	               |	CMS1C_ЗначенияСвойствОбъектов.Объект,
	               |	CMS1C_ЗначенияСвойствОбъектов.Свойство,
	               |	CMS1C_ЗначенияСвойствОбъектов.Значение
	               |ПОМЕСТИТЬ ЗначенияСвойств
	               |ИЗ
	               |	РегистрСведений.CMS1C_ЗначенияСвойствОбъектов КАК CMS1C_ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	CMS1C_ЗначенияСвойствОбъектов.Номенклатура = &Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеДопы.Ссылка,
	               |	ВсеДопы.НастройкаСайта,
	               |	ВсеДопы.НастройкаСайтаСвойствоВес,
	               |	ЗначенияСвойств.Значение,
	               |	ЗначенияСвойств.Значение.ЗначениеЧисло
	               |ИЗ
	               |	ВсеДопы КАК ВсеДопы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойств КАК ЗначенияСвойств
	               |		ПО ВсеДопы.Ссылка = ЗначенияСвойств.Объект
	               |			И ВсеДопы.НастройкаСайтаСвойствоВес = ЗначенияСвойств.Свойство
	               |			И ВсеДопы.ЗначениеВеса = ЗначенияСвойств.Значение.ЗначениеЧисло";
				   Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
				   Запрос.УстановитьПараметр("ЗначениеВеса",ЗначениеВеса);
				   
				   Выб = Запрос.Выполнить().Выбрать();
				   ПОка Выб.Следующий() Цикл
					   Если Выб.ЗначениеЗначениеЧисло =NULL Тогда
						   Добавлять = Истина;
						   ИначеЕсли Выб.ЗначениеЗначениеЧисло <> ЗначениеВеса Тогда
						   Добавлять = Истина;
					   Иначе
						   Продолжить;
					   КонецЕсли;
					   
					   
					   Если ЗначениеВеса = 0 Тогда
						   Мен = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
						   Мен.НастройкаСайта = Выб.НастройкаСайта;
						   Мен.Номенклатура = Номенклатура;
						   Мен.Объект = Выб.Ссылка;
						   Мен.Свойство = Выб.НастройкаСайтаСвойствоВес;
						   ТекЗначение = CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьЗначениеСвойстваОбъекта(Мен.Свойство,ЗначениеВеса);
						   Мен.Значение = ТекЗначение;
						   Мен.Удалить();
					   Иначе
						   НЗ = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
						   НЗ.Отбор.НастройкаСайта.Установить(выб.настройкаСайта);
						   НЗ.Отбор.Номенклатура.Установить(Номенклатура);
						   НЗ.Отбор.Объект.Установить(Выб.Ссылка);
						   НЗ.Отбор.Свойство.Установить(Выб.НастройкаСайтаСвойствоВес);
						   Мен = НЗ.Добавить();
						   Мен.НастройкаСайта = Выб.НастройкаСайта;
						   Мен.Номенклатура = Номенклатура;
						   Мен.Объект = Выб.Ссылка;
						   Мен.Свойство = Выб.НастройкаСайтаСвойствоВес;
						   ТекЗначение = CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьЗначениеСвойстваОбъекта(Мен.Свойство,ЗначениеВеса);
						   Мен.Значение = ТекЗначение;
						   НЗ.ДополнительныеСвойства.Вставить("НадоЗаписать");
						   НЗ.Записать();
						   
						   
						   //НЗ = РегистрыСведений.CMS1C_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
						   //НЗ.Отбор.НастройкаСайта.Установить(выб.настройкаСайта);
						   //НЗ.Отбор.Номенклатура.Установить(Номенклатура);
						   //НЗ.Отбор.Объект.Установить(Выб.Ссылка);
						   //НЗ.Отбор.Свойство.Установить(Выб.НастройкаСайтаСвойствоВес);
						   //нз.Прочитать();
						   //сообщить(нз.Количество());
					   Конецесли;
					   
					   
						
					   
					   
					   
					   
					   
				   КонецЦикла;
				   
	
	
	
	
		
	
	
КонецПроцедуры

Функция ВычислитьЦену(Обработка,Элемент,ТипЦен,Характеристика=Неопределено,ПолучитьСтруктуруМинМакс = Ложь) Экспорт
	ТаблицаЦен = Обработка.ТаблицаЦен;
	ВалютаЦен= Обработка.ВалютаЦен;
	 
	// Если НЕ ТипЦен.Рассчитывается Тогда
		 Структ = Новый Структура();
		 Структ.Вставить("Номенклатура",Элемент);
		 Структ.Вставить("ХарактеристикаНоменклатуры",?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),Характеристика));
		 Структ.Вставить("ТипЦен",ТипЦен);
		
		 МасНайд = ТаблицаЦен.НайтиСтроки(Структ);
		 
		 Если МасНайд.Количество() = 0 И Характеристика = Неопределено Тогда
			 Структ.Удалить("ХарактеристикаНоменклатуры");
		 	 МасНайд = ТаблицаЦен.Скопировать(Структ);
			 МасНайд.Сортировать("Цена");
		 КонецЕСли;
		 
		 
		 
		 Если МасНайд.Количество() = 0 Тогда
			 Если ПолучитьСтруктуруМинМакс = ЛОжь Тогда
			 	Возврат 0;
			Иначе
				Возврат Новый Структура("МинимальнаяЦена,МаксимальнаяЦена",0,0);
			 КонецЕсли;
		 КонецЕсли;
		 Если ПолучитьСтруктуруМинМакс = Ложь Тогда
			 Возврат МасНайд[0].Цена;
		 Иначе
			 Возврат МасНайд[0];
		 КонецЕсли;
	 //КонецЕсли;
	 
	 Если ПолучитьСтруктуруМинМакс = Ложь Тогда
		 Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Элемент,Характеристика,ТипЦен,,,ВалютаЦен);
		 
		 Если Не ЗначениеЗаполнено(Цена) И НЕ ЗначениеЗаполнено(Характеристика) Тогда
			 МинЦена = 999999999999999999999;
			 Выб = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Элемент);
			 Пока ВЫб.Следующий() Цикл
				 ТекЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Элемент,Выб.Ссылка,ТипЦен,,,ВалютаЦен);
				 
				 Если ТекЦена >=0 Тогда
				 	МинЦена = Мин(МинЦена,ТекЦена);
				КонецЕсли;
			КонецЦикла;
			
			Если МинЦена <> 999999999999999999999 Тогда
				Возврат МинЦена;
			КонецЕсли
		 Конецесли;
		 
		 Если ЗначениеЗаполнено(Цена) Тогда
			 возврат Цена;
		 Иначе
			 Возврат 0;
		 КонецЕсли;
	 КонецЕСли;
	 
	 //Самый грустный вариант. Цена динамическая а надо получить мин макс цену товара
	 МинЦена = 9999999999999999999999;
	 МаксЦена = 0;
	 Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Элемент,,ТипЦен,,,ВалютаЦен);
	 МинЦена = Мин(МинЦена,Цена);
	 МаксЦена = Макс(МаксЦена,Цена);
	 Выб = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Элемент);
	 Пока Выб.Следующий() Цикл
		 Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Элемент,Выб.Ссылка,ТипЦен,,,ВалютаЦен);
		 МинЦена = Мин(МинЦена,Цена);
	 	 МаксЦена = Макс(МаксЦена,Цена);
	 КонецЦикла;
	 
	 Если МинЦена=9999999999999999999999 Тогда
		 МинЦена = 0;
	 Конецесли;
	 Структ = Новый Структура();
	 Структ.Вставить("МинимальнаяЦена",МинЦена);
	 Структ.Вставить("МаксимальнаяЦена",МаксЦена);
	 Возврат Структ;
 КонецФункции
 
 Процедура СформироватьТаблицуЦен(Обработка,МассивНоменклатуры) Экспорт
	 ТипЦен = Обработка.ТипЦен;
	 ТипЦенСтараяЦена = Обработка.ТипЦенСтараяЦена;
	 ТипЦенЗакупочнаяЦена = Обработка.ТипЦенЗакупочнаяЦена;
	 ВалютаЦен = Обработка.ВалютаЦен;
	 СписокТиповЦен = Новый СписокЗначений;
	 
	 Если ЗначениеЗаполнено(ТипЦен) Тогда
		 //Если НЕ ТипЦен.Рассчитывается Тогда
			 СписокТиповЦен.Добавить(ТипЦен);
			 //Сообщить("Тип цен "+ТипЦен+" не может быть динамическим. Цены рассчитаны не будут");
			 //Возврат;
		 //КонецЕсли;
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(ТипЦенСтараяЦена) Тогда
		 //Если НЕ ТипЦенСтараяЦена.Рассчитывается Тогда
			 //Сообщить("Тип цен "+ТипЦенСтараяЦена+" не может быть динамическим. Цены рассчитаны не будут");
			 //Возврат;
			 Если СписокТиповЦен.НайтиПоЗначению(ТипЦенСтараяЦена) = Неопределено Тогда
			 	СписокТиповЦен.Добавить(ТипЦенСтараяЦена);
		 	 КонецЕслИ;
		 //КонецЕсли;	
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(ТипЦенЗакупочнаяЦена) Тогда
		 //Если НЕ ТипЦенЗакупочнаяЦена.Рассчитывается Тогда
			 //Сообщить("Тип цен "+ТипЦенЗакупочнаяЦена+" не может быть динамическим. Цены рассчитаны не бдут");
			 //Возврат;
			 Если СписокТиповЦен.НайтиПоЗначению(ТипЦенЗакупочнаяЦена) = Неопределено Тогда
			 	СписокТиповЦен.Добавить(ТипЦенЗакупочнаяЦена);
		 	 КонецЕслИ;
		 //КонецЕсли;
	 КонецЕсли;	
	 
	 Если СписокТиповЦен.Количество() = 0 Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если Не ЗначениеЗаполнено(ВалютаЦен) Тогда
		 Сообщить("Не выбрана валюта расчета цен");
		 Возврат;
	 КонецЕсли;
	 
	 Запрос = новый Запрос();
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	                |	ЦеныНоменклатуры.Характеристика КАК ХарактеристикаНоменклатуры,
	                |	ЦеныНоменклатуры.ТипЦен КАК ТипЦен,
	                |	ЦеныНоменклатуры.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &КурсВалютыОтчета КАК Цена
	                |ПОМЕСТИТЬ ВсеЦены
	                |{ВЫБРАТЬ
	                |	ЦеныНоменклатуры.Номенклатура.* КАК Номенклатура,
	                |	ЦеныНоменклатуры.Характеристика.* КАК ХарактеристикаНоменклатуры,
	                |	ЦеныНоменклатуры.ТипЦен.* КАК ТипЦен,
	                |	(КОНЕЦПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ)) КАК ПериодЦен,
	                |	(0) КАК ПроцентОтклоненияОтЦеныКомпании}
	                |ИЗ
	                |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                |			&ДатаОтчета,
	                |			Номенклатура В (&СписокНоменклатуры)
	                |				И ТипЦен В (&СписокТиповЦен)) КАК ЦеныНоменклатуры
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета, ) КАК КурсыВалютСрезПоследних
	                |		ПО ЦеныНоменклатуры.Валюта = КурсыВалютСрезПоследних.Валюта
	                |{ГДЕ
	                |	ЦеныНоменклатуры.Номенклатура.* КАК Номенклатура,
	                |	ЦеныНоменклатуры.Характеристика.* КАК ХарактеристикаНоменклатуры,
	                |	ЦеныНоменклатуры.ТипЦен.* КАК ТипЦен,
	                |	(КОНЕЦПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ)) КАК ПериодЦен}
	                |{УПОРЯДОЧИТЬ ПО
	                |	Номенклатура.* КАК Номенклатура,
	                |	ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	                |	ТипЦен.* КАК ТипЦен}
	                |{ИТОГИ ПО
	                |	Номенклатура.* КАК Номенклатура,
	                |	ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	                |	ТипЦен.* КАК ТипЦен}
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВсеЦены.Номенклатура,
	                |	ВсеЦены.ТипЦен,
	                |	МАКСИМУМ(ВсеЦены.Цена) КАК МаксимальнаяЦена,
	                |	МИНИМУМ(ВсеЦены.Цена) КАК МинимальнаяЦена
	                |ПОМЕСТИТЬ МаксимальнаяИМинимальнаяЦены
	                |ИЗ
	                |	ВсеЦены КАК ВсеЦены
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВсеЦены.ТипЦен,
	                |	ВсеЦены.Номенклатура
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВсеЦены.Номенклатура КАК Номенклатура,
	                |	ВсеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                |	ВсеЦены.ТипЦен КАК ТипЦен,
	                |	ВЫРАЗИТЬ(ВсеЦены.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
	                |	ВЫРАЗИТЬ(МаксимальнаяИМинимальнаяЦены.МинимальнаяЦена КАК ЧИСЛО(15, 3)) КАК МинимальнаяЦена,
	                |	ВЫРАЗИТЬ(МаксимальнаяИМинимальнаяЦены.МаксимальнаяЦена КАК ЧИСЛО(15, 3)) КАК МаксимальнаяЦена
	                |ИЗ
	                |	ВсеЦены КАК ВсеЦены
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальнаяИМинимальнаяЦены КАК МаксимальнаяИМинимальнаяЦены
	                |		ПО ВсеЦены.Номенклатура = МаксимальнаяИМинимальнаяЦены.Номенклатура
	                |			И ВсеЦены.ТипЦен = МаксимальнаяИМинимальнаяЦены.ТипЦен
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номенклатура,
	                |	ХарактеристикаНоменклатуры,
	                |	ТипЦен,
	                |	Цена
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 СтруктураКурсЦены = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЦен, ТекущаяДата());
	 КурсЦены          = СтруктураКурсЦены.Курс;
	 КратностьЦены     = СтруктураКурсЦены.Кратность;
	 Если КратностьЦены = 0 Тогда
		 КратностьЦены = 1;
	 КонецЕсли; 
	 
	 Запрос.УстановитьПараметр("КурсВалютыОтчета",КурсЦены/КратностьЦены);
	 Запрос.УстановитьПараметр("ДатаОтчета",ТекущаяДата());
	 Запрос.УстановитьПараметр("СписокНоменклатуры",МассивНоменклатуры);
	 Запрос.УстановитьПараметр("СписокТиповЦен",СписокТиповЦен);
	 ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	 Обработка.ТаблицаЦен = ТаблицаЦен;
 КонецПРоцедуры
 
 &НаСервере
Процедура ЗаписатьИзображения(Объект,Форма) Экспорт
	ТЧИзображения = Форма.ТЧИзображения;
	НС = -1;
	Для Каждого СтрТз из ТЧИзображения Цикл
		НС = НС + 1;
		СтрТз.Сортировка = НС;
		
		НадоСохранять = Ложь;
		
		Если НЕ ЗначениеЗаполнено(СтрТз.СсылкаНаИзображение) Тогда
			НадоСохранять = Истина;
		КонецЕсли;
		
		Если СтРТз.Сортировка <> СтрТз.СсылкаНаИзображение.Сортировка Тогда
			НадоСохранять = Истина;
		КонецЕсли;
		
		Если СтРТз.ID <> СтрТз.СсылкаНаИзображение.ID Тогда
			НадоСохранять = Истина;
		КонецЕсли;
		
		Если Не НадоСохранять Тогда
			Если СтрТз.СсылкаНаИзображение.Хранилище.Получить() <> Неопределено Тогда
				НадоСохранять = истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НадоСохранять Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрТз.СсылкаНаИзображение) Тогда
			Об = Справочники.CMS1C_Изображения.СоздатьЭлемент();
			Об.Владелец = Объект.Ссылка;
		Иначе
			Об = СтрТз.СсылкаНаИзображение.ПолучитьОБъект();
			Об.Владелец = Объект.Ссылка;
		КонецЕсли;
		
		Об.ID = СтрТз.ID;
		Об.Высота = СтрТз.Высота;
		об.Ширина = СтрТз.Ширина;
		Об.Наименование = СтрТз.Наименование;
		Об.НаименованиеСред = СтрТз.НаименованиеСред;
		Об.НаименованиеМал = СтрТз.НаименованиеМал;
		Об.Описание = СтрТз.Описание;
		Об.Размер = СтрТз.Размер;
		Об.Расширение = СтрТз.Расширение;
		Об.Хранилище = Новый ХранилищеЗначения(СтрТз.Картинка.ПолучитьДвоичныеДанные());
		ДвоичныеСред = СтрТз.КартинкаСред.ПолучитьДвоичныеДанные();
		Если ДвоичныеСред.Размер() <> 0 Тогда
			Об.ХранилищеСред = Новый ХранилищеЗначения(ДвоичныеСред);
		Иначе
			Об.ХранилищеСред = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
		ДвоичныеМал = СтрТз.КартинкаМал.ПолучитьДвоичныеДанные();
		Если ДвоичныеМал.Размер() <> 0 Тогда
			Об.ХранилищеМал = Новый ХранилищеЗначения(ДвоичныеМал);
		Иначе
			Об.ХранилищеМал = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
		об.сортировка = СтрТз.Сортировка;
		Об.Записать();
		СтрТз.СсылкаНаИзображение = Об.Ссылка;
	КонецЦикла;
	
	Запрос = новый Запрос();
	Запрос.Текст= "ВЫБРАТЬ
	|	CMS1C_Изображения.Ссылка
	|ИЗ
	|	Справочник.CMS1C_Изображения КАК CMS1C_Изображения
	|ГДЕ
	|	CMS1C_Изображения.Владелец = &Владелец
	|	И НЕ CMS1C_Изображения.Ссылка В (&СписокСсылок)";
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	тз = ДанныеФормыВЗначение(ТЧИзображения,Тип("ТаблицаЗначений"));
	Запрос.УстановитьПараметр("СписокСсылок",тз.Скопировать(,"СсылкаНаИзображение").ВыгрузитьКолонку("СсылкаНаИзображение"));
	Выб = Запрос.Выполнить().Выбрать();
	пока Выб.Следующий() Цикл
		Об = ВЫб.Ссылка.ПолучитьОБъект();
		Об.ДополнительныеСвойства.Вставить("НадоЗаписать");
		Об.Удалить();
	КонецЦикла;
	
	Если ТЧИзображения.Количество() = 0 Тогда
		Если Объект.ОсновноеИзображение <> ПредопределенноеЗначение("Справочник.CMS1C_Изображения.ПустаяСсылка") Тогда
			Объект.ОсновноеИзображение = ПредопределенноеЗначение("Справочник.CMS1C_Изображения.ПустаяСсылка");
		Конецесли;
	Иначе
		Если Объект.ОсновноеИзображение <> ТЧИзображения[0].СсылкаНаИзображение Тогда
			Объект.ОсновноеИзображение = ТЧИзображения[0].СсылкаНаИзображение;
		КОнецесли;
	КонецЕсли;
КонецПроцедуры
 
Функция ПолучитьИмяОбъектаМетаданных(Ссылка,ИмяТипа) ЭКспорт
	ТекМетаданные = Ссылка.Метаданные();
	ИМяМетаданных = ТекМетаданные.Имя;
	
	НайдМетаданныеСправочника = Метаданные.Справочники.Найти(ИмяМетаданных);
	Если НайдМетаданныеСправочника<> Неопределено Тогда
		ИмяТипа = "Справочник";
		Возврат НайдМетаданныеСправочника.ИМя;
	КонецЕсли;
	
	НайдМетаданныеПВХ = Метаданные.ПланыВидовХарактеристик.Найти(ИМяМетаданных);
	Если НайдМетаданныеПВХ <> Неопределено Тогда
		ИмяТипа = "ПланВидовХарактеристик";
		Возврат НайдМетаданныеПВХ.Имя;
	КонецЕсли;
КонецФункции

Функция УОбработкиЕстьНужнаяФорма(ИмяОбработки,ТекИмяФормы) ЭКспорт
	Попытка
		Возврат Метаданные.Обработки[ИмяОбработки].Формы.Найти(ТекИмяФормы)<> Неопределено;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ПоместитьКартинкуВСтроку(ПутьКИсходнику,СтрокаТаблицыЗначений,Знач КоллекцияТЧИзображения,НастройкаСайта,СсылкаНаОбъект) Экспорт
	ЕстьОбъект = Ложь;
	Ответ=Неопределено; 
	Попытка
		img =  Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
		ЕстьОбъект = Истина;   		
	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ПОпытка
		ТЧИзображения = КоллекцияТЧИзображения.Выгрузить();
	Исключение
		ТЧИзображения = ДанныеФормыВЗначение(КоллекцияТЧИзображения,Тип("ТаблицаЗначений"));
	КонецПопытки;
	
	Если НЕ ЕстьОбъект ТОгда
		Конверт = ПолучитьИмяВременногоФайла("zip");//КаталогПрограммы();
		ПрогаИзПамяти = ПолучитьОбщийМакет("CMS1C_Magic");
		ПрогаИзПамяти.Записать(Конверт);
		ФайлАрхива = Новый ЧтениеZIPФайла(Конверт); 
		ФайлАрхива.ИзвлечьВсе(КаталогПрограммы(), РежимВосстановленияПутейФайловZIP.Восстанавливать); 
		ФайлАрхива.Закрыть();
		ЗапуститьПриложение("regsvr32 /c /s """+КаталогПрограммы()+"ImageMagickObject\ImageMagickObject.dll""",,Истина);
		
		Попытка
			img = Новый COMОбъект("ImageMagickObject.MagickImage.1"); 
			ЕстьОбъект = Истина;
		Исключение	
			возврат Неопределено;	
		КонецПопытки;
	КонецЕсли;
	Высота = 0;
	Ширина = 0;
	
	Имя = ПолучитьИмяВременногоФайла();
	Файл =  ПолучитьИзВременногоХранилища(ПутьКИсходнику);
	Файл.Записать(Имя);
	
	
	Если ЕстьОбъект Тогда
		ПОпытка
			Высота = Число(img.identify("-format","%h",Имя));
			Ширина = Число(img.identify("-format","%w",Имя));
		Исключение
			Высота = 0;
			Ширина = 0;
		КонецПопытки;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ВЫсота",ВЫсота);
	СтруктураВозврата.Вставить("Ширина",Ширина);
	//Возврат СтруктураВозврата;
	
	//НашОбъект = РеквизитФормыВЗначение("Объект");
	КартинкаИзВременногоХранилища = Новый ДвоичныеДанные(Имя);
	
	//СтрокаТЗ = ТЧИзображения.НайтиПоИдентификатору(ИндексСтроки);
	//ТекИндекс = ТЧИзображения.Индекс(СтрокаТЗ);
	//
	СтрокаТаблицыЗначений.Картинка = Новый Картинка(КартинкаИзВременногоХранилища);
	СтрокаТаблицыЗначений.Ширина = Ширина;
	СтрокаТаблицыЗначений.Высота = Высота;
	
	//НашОбъект.Записать();
	//ЗначениеВДанныеФормы(НашОбъект,Объект);
	Модифицированность = Истина;
	
	//тз = ДанныеФормыВЗначение(ТЧИзображения,Тип("ТаблицаЗначений"));
	//Стртз = тз[ТекИндекс];
	
	Об = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(НастройкаСайта);
	Об.ОтредактироватьИзображенияПриДобавленииИнтерактивно(СтрокаТаблицыЗначений,ТЧИзображения,img,Имя,СсылкаНаОбъект);
	Возврат СтруктураВозврата;
КонецФункции

Функция ЗарегистрироватьКонтрагента(Стр,НастройкаСайта) Экспорт
	 Обработка = ОБработки.CMS1C_ОбработкаОбмена.Создать();
	 ЗаполнитьЗначенияСвойств(Обработка,Стр.НастройкаСайта);
	 ОБработка.НастройкаСайтаДляОбмена = Стр.НастройкаСайта;
	 Обработка.НастройкаСайтаДляПодключения = Стр.НастройкаСайта;
	 
	 ТекущаяОрганизацияДляЗаказа = ОБработка.ПолучитьОрганизациюДляЗаказа(Стр.ТипОплаты);
	 
	 ВыбГруппаКонтрагентов = НастройкаСайта.ПапкаКонтрагентовСайта;
	 
	 Если ТипЗнч(Стр.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		 НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	 Иначе
		 НовыйКонтрагент = Стр.Контрагент.получитьОбъект();
	 КонецЕсли;
	 
	 НовыйКонтрагент.Родитель                   = ВыбГруппаКонтрагентов;
	 НовыйКонтрагент.Наименование               = СокрЛП(Стр.Контрагент);
	 НовыйКонтрагент.НаименованиеПолное         = СокрЛП(Стр.Контрагент);
	 НовыйКонтрагент.ЮрФизЛицо                  = Перечисления.ЮрФизЛицо.ФизЛицо;
	 НовыйКонтрагент.Покупатель                 = Истина;
	 НовыйКонтрагент.ДополнительныеСвойства.Вставить("Организация",ТекущаяОрганизацияДляЗаказа);
	 
	 НовыйКонтрагент.ОсновнойМенеджерПокупателя = глЗначениеПеременной("глТекущийПользователь");
	 НоваяСтрокаТЧ = НовыйКонтрагент.МенеджерыПокупателя.Добавить();
	 НоваяСтрокаТЧ.МенеджерПокупателя = глЗначениеПеременной("глТекущийПользователь");
	 
	 НачатьТранзакцию();
	 
	 ФиксироватьТранзакцию = Истина;
	 
	 Если НовыйКонтрагент.ЭтоНовый() Тогда
		 НовыйКонтрагент.УстановитьНовыйКод();
	 КонецЕСли;
	 
	 НаборКонтактнойИнформации = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	 НаборКонтактнойИнформации.Отбор.Объект.Установить(НовыйКонтрагент.Ссылка);
	 
	 // Контактная инфомация контрагента
	 // Телефон контрагента
	 Если НЕ ПустаяСтрока(Стр.Телефон) Тогда
		 НоваяЗапись = НаборКонтактнойИнформации.Добавить();
		 НоваяЗапись.Вид    = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		 НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Телефон;
		 НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		 НоваяЗапись.Поле3  = Стр.Телефон;
		 УправлениеКонтактнойИнформацией.СформироватьПредставлениеТелефона(НоваяЗапись);
	 КонецЕсли;
	 
	 // Адрес электронной почты контрагента
	 Если НЕ ПустаяСтрока(стр.Почта) Тогда
		 
		 НоваяЗапись = НаборКонтактнойИнформации.Добавить();
		 
		 НоваяЗапись.Вид    = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
		 НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		 НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		 
		 НоваяЗапись.Представление = стр.Почта;
		 
	 КонецЕсли;
	 
	 Если Не ПустаяСтрока(Стр.АдресДоставки) Тогда
		 НоваяЗапись = НаборКонтактнойИнформации.Добавить();
		 
		 НоваяЗапись.Вид    = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		 НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Адрес;
		 НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		 НоваяЗапись.Поле1 = Стр.ИндексДоставки;
		 НоваяЗапись.Поле2 = Стр.РегионДоставки;
		 НоваяЗапись.Поле4 = Стр.ГородДоставки;
		 НоваяЗапись.Поле6 = Стр.УлицаДоставки;
		 НоваяЗапись.Представление = стр.АдресДоставки;
	 КонецЕсли;
	 
	 Если Не ПустаяСтрока(Стр.АдресДоставки) Тогда
		 НоваяЗапись = НаборКонтактнойИнформации.Добавить();
		 
		 НоваяЗапись.Вид    = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		 НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Адрес;
		 НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		 НоваяЗапись.Поле1 = Стр.ИндексДоставки;
		 НоваяЗапись.Поле2 = Стр.РегионДоставки;
		 НоваяЗапись.Поле4 = Стр.ГородДоставки;
		 НоваяЗапись.Поле6 = Стр.УлицаДоставки;
		 
		 НоваяЗапись.Представление = стр.АдресДоставки;
	 КонецЕсли;
	 
	 
	 Попытка
		 ЭтоНовый = НовыйКонтрагент.ЭтоНовый();
		 
		 Попытка
			 Если ЭтоНовый Тогда
				 //Поиск в контрагентах если не найден.
				 ПоискДублей       = Обработки.ПоискИЗаменаДублирующихсяЭлементов.Создать();
				 СтруктураПоиска = Новый Структура("Код,Наименование,НаименованиеПолное",Неопределено,"=","=");
				 НайденныеОбъекты  = ПоискДублей.НайтиДубли(НовыйКонтрагент,СтруктураПоиска);
				 
				 Если НайденныеОбъекты.Количество() > 0 Тогда
					 ФормаПоискаДублей = ПоискДублей.ПолучитьФорму("ФормаПоиска");
					 ФормаПоискаДублей.НайденныеОбъекты = НайденныеОбъекты;
					 Результат = ФормаПоискаДублей.ОткрытьМодально();
					 Если Результат = Неопределено Тогда
						 //продолжаем и записываем		
					 ИначеЕсли Не Результат = Истина Тогда 						
						 НовыйКонтрагент = Результат.ПолучитьОбъект();	
					 КонецЕсли;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
		 Исключение КонецПопытки;
		 
		 Если НовыйКонтрагент.Модифицированность() Тогда
			 НовыйКонтрагент.Записать(); //он не выбран из дублей
		 КонецЕсли;
		 Отказ = Ложь;
		 Если ЭтоНовый Тогда			
			 НовыйОсновнойДоговорУказан = Ложь;
			 
			 
			 
			// Обработка.ПроверитьОсновнойДоговорКонтрагента(Отказ, НовыйОсновнойДоговорУказан,НовыйКонтрагент,ТекущаяОрганизацияДляЗаказа);
			 ФиксироватьТранзакцию = ?(Отказ,Отказ,ФиксироватьТранзакцию);
			 Если НовыйОсновнойДоговорУказан Тогда
				 НовыйКонтрагент.Записать();
			 КонецЕсли;	
		 КонецЕсли;                         		
		 УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, НовыйКонтрагент.Ссылка, Отказ);
		 
	 Исключение
		 Сообщить("Не удалось записать контрагента: " + ОписаниеОшибки());
		 ФиксироватьТранзакцию = Ложь;
	 КонецПопытки;
	 
	 Запись = РегистрыСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте.СоздатьМенеджерЗаписи();	
	 Запись.Контрагент = НовыйКонтрагент.Ссылка;
	 Запись.НастройкаСайта = НастройкаСайта;
	 Запись.Номер = Стр.IDКонтрагента;
	 Запись.Записать(Истина);
	 Стр.Контрагент = НовыйКонтрагент.Ссылка;
	 
	 
	 Если ФиксироватьТранзакцию Тогда
		 ЗафиксироватьТранзакцию();
	 Иначе
		 ОтменитьТранзакцию();
		 Возврат Неопределено;
	 КонецЕсли;
КонецФУнкции

Функция ОтправитьСообщениеОСменеСтатуса(НастройкаСайта,ИмяПолучателя="",АдресПолучателя,ТекстСообщения) Экспорт
	 
	 //Обработка.ОтобразитьСостояние("Отправка письма контрагенту о смене статуса заказа...");
	 
	 Если НЕ (ЗначениеЗаполнено(НастройкаСайта.УчетнаяЗапись)
		 И ЗначениеЗаполнено(АдресПолучателя)
		 И ЗначениеЗаполнено(ТекстСообщения)) Тогда		
		 Сообщить("Не удалось отправить письмо о смене статуса, т.к. не задана учетная запись для отправки, текст письма в настройках обмена, либо не указан адрес эл. почты получателя");
		 Возврат Ложь;                                   		
	 КонецЕсли;	
	 // все проверки пройдены, нужно письмо отсылать
	 Попытка
		 
		 Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(НастройкаСайта.УчетнаяЗапись);
		 
		 ИнтернетПочта = Новый ИнтернетПочта;
		 
		 Попытка
			 ИнтернетПочта.Подключиться(Профиль);
		 Исключение
			 Сообщить("Не удалось отправить письмо о смене статуса: "+Строка(НастройкаСайта.УчетнаяЗапись) + ". " + ОписаниеОшибки());
			 возврат Ложь;				
		 КонецПопытки;
		 
		 ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
		 
		 КодировкаСообщения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию");
		 Если Не ЗначениеЗаполнено(КодировкаСообщения) Тогда
			 КодировкаСообщения = "utf-8";
		 КонецЕсли;		
		 
		 ПочтовоеСообщение.Кодировка = КодировкаСообщения;
		 
		 // Общие свойства письма
		 ПочтовоеСообщение.ИмяОтправителя  = НастройкаСайта.УчетнаяЗапись.Наименование;
		 ПочтовоеСообщение.Отправитель     = НастройкаСайта.УчетнаяЗапись.АдресЭлектроннойПочты;
		 ПочтовоеСообщение.Тема            = НастройкаСайта.ТемаУведомления;
		 Получатель = ПочтовоеСообщение.Получатели.Добавить();
		 Получатель.Адрес           = АдресПолучателя;
		 Получатель.ОтображаемоеИмя = ИмяПолучателя;
		 Получатель.Кодировка       = КодировкаСообщения;
		 
		 ТекстПисьма = ПочтовоеСообщение.Тексты.Добавить();
		 ТекстПисьма.Кодировка = КодировкаСообщения;
		 ТекстПисьма.Текст     = ТекстСообщения;
		 ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;							
		 
		 Попытка
			 
			 ИнтернетПочта.Послать(ПочтовоеСообщение);								
			 
		 Исключение
			 Сообщить("Не удалось отправить письмо о смене статуса, т.к. " + ОписаниеОшибки());
			 возврат Ложь;
		 КонецПопытки;		
		 
		 Сообщить("Письмо для "+ИмяПолучателя+ " отправлено на "+АдресПолучателя);
		 
	 Исключение
		 
		 Сообщить("Не удалось отправить письмо о смене статуса, т.к. " + ОписаниеОшибки());
		 Возврат Ложь;
	 Конецпопытки;
	 Возврат Истина;
 КонецФункции
 
 Функция НайтиИлиСоздатьДоговорПоОрганизации(Контрагент,Организация,НастройкаСайта,НаименованиеДоговора = Неопределено) Экспорт
	 Запрос = Новый Запрос();
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ДоговорыКонтрагентов.Ссылка
	 |ИЗ
	 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	 |ГДЕ
	 |	ДоговорыКонтрагентов.Владелец = &Владелец
	 |	И ДоговорыКонтрагентов.Организация = &Организация";
	 Запрос.УстановитьПараметр("Владелец",Контрагент);
	 Запрос.УстановитьПараметр("Организация",Организация);
	 ВыборкаДОговоров =Запрос.Выполнить().Выбрать();
	 //ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(, Объект.Ссылка,Новый Структура("Организация",ОрганизацияВЗаказах));
	 
	 Если ВыборкаДоговоров.Следующий() Тогда
		 Возврат ВыборкаДоговоров.Ссылка;
	 КонецЕсли;
	 
	 
	 НайденныйДоговорОбъект              = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	 Если ЗначениеЗаполнено(НаименованиеДоговора) Тогда
		 НайденныйДоговорОбъект.Наименование = 	НаименованиеДоговора;
	 ИНачеЕсли ЗначениеЗаполнено(НастройкаСайта.НаименованиеДоговора) Тогда
		 НайденныйДоговорОбъект.Наименование = 	НастройкаСайта.НаименованиеДоговора;
	 Иначе
		 НайденныйДоговорОбъект.Наименование = "Основной договор";
	 КонецЕсли;
	 
	 НайденныйДоговорОбъект.ВалютаВзаиморасчетов = НастройкаСайта.ВалютаЗаказаПоУмолчанию;
	 
	 Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
		 НайденныйДоговорОбъект.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
	 КонецЕсли;
	 Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
		 НайденныйДоговорОбъект.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
	 КонецЕсли;
	 НайденныйДоговорОбъект.Организация = Организация;
	 
	 НайденныйДоговорОбъект.Владелец           =  Контрагент;
	 НайденныйДоговорОбъект.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	 
	 Если Контрагент.Покупатель Тогда
		 НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		 НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	 ИначеЕсли Контрагент.Поставщик Тогда
		 НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		 НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
	 Иначе
		 НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	 КонецЕсли;
	 
	 Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		 НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	 Иначе
		 НайденныйДоговорОбъект.ВедениеВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеВедениеВзаиморасчетовПоДоговорам");
		 Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
			 НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
		 КонецЕсли;
		 НайденныйДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДокументамСКонтрагентами");
		 
	 КонецЕсли;
	 
	 
	 Если (НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		 ИЛИ  НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		 И НайденныйДоговорОбъект.ВалютаВзаиморасчетов <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		 НайденныйДоговорОбъект.РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
	 КонецЕсли;
	 
	 Если Контрагент.НеЯвляетсяРезидентом И НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		 НайденныйДоговорОбъект.РеализацияНаЭкспорт = Истина;
	 КонецЕсли;
	 
	 Если НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 ИЛИ НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		 НайденныйДоговорОбъект.ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
	 КонецЕсли;
	 
	 Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		 НайденныйДоговорОбъект.ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
	 КонецЕсли;
	 
	 Попытка
		 НайденныйДоговорОбъект.Записать();
	 Исключение
		 Сообщить(""+ОписаниеОшибки()+". Не удалось записать договор контрагента "+Контрагент+ " для организации "+Организация);
		 Отказ = Истина;
		 Возврат Неопределено;
	 КонецПопытки;
	 Возврат НайденныйДоговорОбъект.Ссылка;
	 
 КонецФункции