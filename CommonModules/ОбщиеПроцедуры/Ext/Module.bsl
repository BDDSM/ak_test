
// Процедура предназначена для выбора договора контрагента с признаком "Арендный"
// Параметры:
//		Объект - документ-объект, для которого выбирается договор контрагента
Процедура ВыборАрендногоДоговораКонтрагента(Объект) Экспорт
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не указана организация!");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщить("Не указан контрагент");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;
		
		ОтборВСписке = ФормаВыбора.СправочникСписок.Отбор;
		
		ОтборВСписке.Владелец.Использование = Истина;
		ОтборВСписке.Владелец.Значение = Объект.Контрагент;

	
		ОтборВСписке.Организация.Использование = Истина;
		ОтборВСписке.Организация.Значение = Объект.Организация;
    
		                                                                             
		ОтборВСписке.ТипДоговора.Использование = Истина;
		ОтборВСписке.ТипДоговора.Значение = Перечисления.ТипыДоговоровСПоставщиком.Аренда;
		
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаключениеДоговораАренды") Тогда
			ОтборВСписке.ВидДоговора.Использование 	= Истина;
			ОтборВСписке.ВидДоговора.Значение 		= ?(Объект.ВидОперации = Перечисления.ВидыОперацийДоговоровАренды.САрендатором,
															Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
															Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ДополнительноеСоглашение")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.РасторжениеДоговораАренды") Тогда
			ОтборВСписке.ВидДоговора.Использование = Истина;
			ОтборВСписке.ВидДоговора.Значение 		= ?(Объект.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДоговоровАренды.САрендатором,
															Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
															Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		КонецЕсли;
	
		ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Объект.ДоговорКонтрагента = ВыбранноеЗначение;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Фукнция добавляет стандартный период к определенной дате. Возвращает новый период
// Параметры:
//		ПериодНач - исходная дата
// 		Период - одно из перечислений (Год, Полугодие, Квартал, Месяц, Неделя, День)
// 		Количество - количество периодов
Функция ДобавитьПериод(ПериодНач, Период, Количество) Экспорт
	
	ОдинДень = 60*60*24;
	
	Если Период = Перечисления.Периодичность.Год Тогда
		Возврат ДобавитьМесяц(ПериодНач, 12*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Полугодие Тогда
		Возврат ДобавитьМесяц(ПериодНач, 6*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Квартал Тогда
		Возврат ДобавитьМесяц(ПериодНач, 3*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Месяц Тогда
		Возврат ДобавитьМесяц(ПериодНач, 1*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Неделя Тогда
		Возврат ПериодНач + ОдинДень*7*Количество;
	ИначеЕсли Период = Перечисления.Периодичность.День Тогда
		Возврат ПериодНач + ОдинДень*Количество;
	КонецЕсли;
		
КонецФункции

// Процедура предназначена для подбора услуги в табличные части документов.
// Параметры:
//		СтрокаТЧ - строка табличной части, в которую подбирается элемент
//		ПостояннаяЧастьОплаты - значение отбора по реквизиту ПостояннаяЧастьОплаты
//		УчитыватьПризнакПостояннойЧастиОплаты - флаг использования отбора
Процедура ВыборУслуги(СтрокаТЧ, ПостояннаяЧастьОплаты, УчитыватьПризнакПостояннойЧастиОплаты = Истина, ИмяРеквизита = "Услуга") Экспорт
	
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора();
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение = Перечисления.ВидыНоменклатуры.Услуга;
	ФормаВыбора.НачальноеЗначениеВыбора = СтрокаТЧ[ИмяРеквизита];
	
	Если УчитыватьПризнакПостояннойЧастиОплаты Тогда
		ФормаВыбора.СправочникСписок.Отбор.ПостояннаяЧастьОплаты.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.ПостояннаяЧастьОплаты.Значение = ПостояннаяЧастьОплаты;
	КонецЕсли;
	
	
	Результат = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаТЧ[ИмяРеквизита] = Результат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для выбора счета на аренду с заданным отбором.
// Параметры:
//		Объект - некоторый объект (документ, справочник), которому будет передано значение выбранного счета
//		Организация - значение отбора по реквизиту Организация
//		Контрагент - значение отбора по реквизиту Контрагент
//		ДоговорКонтрагента - значение отбора по реквизиту ДоговорКонтрагента
//		ИмяРеквизита - имя реквизита Объекта (так, как задано в метаданных объекта), в который будет записана ссылка
//					   на выбранный счет
Процедура ВыборСчетаНаАренду(Объект, Организация, Контрагент, ДоговорКонтрагента, ИмяРеквизита = "СчетНаАренду") Экспорт
	
	ФормаВыбора = Документы.СчетНаАренду.ПолучитьФормуВыбора();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ФормаВыбора.ДокументСписок.Отбор.Контрагент.Использование = Истина;
		ФормаВыбора.ДокументСписок.Отбор.Контрагент.Значение = Контрагент;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ДоговорКонтрагента.Использование = Истина;
		ФормаВыбора.ДокументСписок.Отбор.ДоговорКонтрагента.Значение = ДоговорКонтрагента;
	КонецЕсли;	
	
	ФормаВыбора.НачальноеЗначениеВыбора = Объект[ИмяРеквизита];
	
	Результат = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект[ИмяРеквизита] = Результат;
	КонецЕсли;
	
КонецПроцедуры
  
// Процедура предназначена для подбора способа начисления в табличные части документов.
// Параметры:
//		СтрокаТЧ - строка табличной части, в которую подбирается элемент
Процедура ВыборСпособаНачисления(СтрокаТЧ) Экспорт
	
	ФормаВыбора = Справочники.СпособыНачисленияАренднойПлаты.ПолучитьФормуВыбора();
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ЕдиницаИзмерения.Использование 	= Истина;
	ФормаВыбора.СправочникСписок.Отбор.ЕдиницаИзмерения.Значение 		= СтрокаТЧ.Услуга.БазоваяЕдиницаИзмерения;
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		СтрокаТЧ.СпособНачисления = РезультатВыбора;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокЦФОПользователя(пДата, пПользователь, ВернутьМассив = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник"	, пПользователь);
	Запрос.УстановитьПараметр("Дата"		, пДата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиПоЦФОСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК ПользователиПоЦФОСрезПоследних";
	
	спРез = Новый СписокЗначений;
	Результат = Запрос.Выполнить().Выгрузить();
	Если ВернутьМассив Тогда
		спРез = Результат.ВыгрузитьКолонку("ЦФО");
	Иначе	
		спРез.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("ЦФО"));
	КонецЕсли;	
	
	Возврат спРез;
	
КонецФункции

Функция ПолучитьСписокСтатейДДСДляАкцептированияПользователя(пПользователь, ВернутьМассив = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	РегистрСведений.ПраваНаАкцептованиеЗаявокПоСтатьямДДС КАК ПраваНаАкцептованиеЗаявокПоСтатьямДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств = СтатьиДвиженияДенежныхСредств.Ссылка
	|				ИЛИ ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств = СтатьиДвиженияДенежныхСредств.Ссылка.Родитель
	|				ИЛИ ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств = СтатьиДвиженияДенежныхСредств.Ссылка.Родитель.Родитель
	|				ИЛИ ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств = СтатьиДвиженияДенежныхСредств.Ссылка.Родитель.Родитель.Родитель)
	|ГДЕ
	|	ПраваНаАкцептованиеЗаявокПоСтатьямДДС.Пользователь = &Пользователь";
	
	спРез = Новый СписокЗначений;
	Результат = Запрос.Выполнить().Выгрузить();
	Если ВернутьМассив Тогда
		спРез = Результат.ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств");
	Иначе
		спРез.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств"));
	КонецЕсли;	
	
	Возврат спРез;
	
КонецФункции


#Если Клиент Тогда
	
// Процедура предназначена для корректного выбора периода (периодичность устанавливается в договоре контрагента)
Процедура ВыборПериодаПоДоговору(НачалоПериода,ОкончаниеПериода,ДоговорКонтрагента,Многократность=Ложь) Экспорт
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(ОкончаниеПериода='0001-01-01', ОкончаниеПериода, КонецДня(ОкончаниеПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Ложь;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда // И ДоговорКонтрагента.ВестиВзаиморасчетыПоПериодам
		Периодичность = ДоговорКонтрагента.Периодичность;
		Если Периодичность = Перечисления.Периодичность.Год Тогда
			НастройкаПериода.ВариантПериода = ВариантПериода.Месяц;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			НастройкаПериода.ВариантПериода = ВариантПериода.Квартал;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие ИЛИ
			Периодичность = Перечисления.Периодичность.Неделя Тогда
			НастройкаПериода.ВариантПериода = ВариантПериода.ПроизвольныйИнтервал;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			НастройкаПериода.ВариантПериода = ВариантПериода.Месяц;
		ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
			НастройкаПериода.ВариантПериода = ВариантПериода.День;
		КонецЕсли;
	Иначе
		Периодичность = Перечисления.Периодичность.ПустаяСсылка();
	КонецЕсли;	
	
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		ОкончаниеПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;	
	
КонецПроцедуры
	
#КонецЕсли

// Процедура предназначена для проверки периода, определенного параметрами НачалоПериода и ОкончаниеПериода,
// на соответствие периодичности, заданной в договоре ДоговорКонтрагента. Параметры Заголовок и СтрНазначение 
// используются при формировании пользователю строки с сообщением об ошибке.
Процедура ПроверитьПериодПоДоговору(Заголовок,Отказ,СтрНазначение,НачалоПериода,ОкончаниеПериода,ДоговорКонтрагента) Экспорт
	
	
КонецПроцедуры
	
// Функция возвращает результат проверки указанного периода, определенного параметрами НачалоПериода и 
// ОкончаниеПериода на кратность периодичности, заданной параметром Периодичность.
Функция ПроверитьПериодНаКратностьПериодичности(НачалоПериода,ОкончаниеПериода,Периодичность) Экспорт
	Перем КорректноеНачалоПериода, КорректноеОкончаниеПериода; 
	
	Отказ = Ложь;
	Если НачалоПериода>ОкончаниеПериода Тогда
		Отказ = Истина;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		КорректноеНачалоПериода = НачалоГода(НачалоПериода);
		КорректноеОкончаниеПериода = НачалоДня(КонецГода(ОкончаниеПериода));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		КорректноеНачалоПериода = НачалоКвартала(НачалоПериода);
		КорректноеОкончаниеПериода = НачалоДня(КонецКвартала(ОкончаниеПериода));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КорректноеНачалоПериода = НачалоМесяца(НачалоПериода);
		КорректноеОкончаниеПериода = НачалоДня(КонецМесяца(ОкончаниеПериода));
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		КорректноеНачалоПериода = НачалоДня(НачалоПериода);
		КорректноеОкончаниеПериода = НачалоДня(ОкончаниеПериода);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если НЕ ((Месяц(НачалоПериода)=1 ИЛИ Месяц(НачалоПериода)=7) И День(НачалоПериода)=1) ИЛИ 
			НЕ ((Месяц(ОкончаниеПериода)=6 И День(ОкончаниеПериода)=30) ИЛИ (Месяц(ОкончаниеПериода)=12 И День(ОкончаниеПериода)=31)) Тогда
			Отказ = Истина;
		Иначе
			КорректноеНачалоПериода = НачалоПериода;
			КорректноеОкончаниеПериода = ОкончаниеПериода;
		КонецЕсли;
	ИначеЕсли Периодичность= Перечисления.Периодичность.Неделя Тогда
		КорректноеНачалоПериода = НачалоНедели(НачалоПериода);
		КорректноеОкончаниеПериода = НачалоДня(КонецНедели(ОкончаниеПериода));
	КонецЕсли;

	Если НачалоПериода<>КорректноеНачалоПериода ИЛИ ОкончаниеПериода<>КорректноеОкончаниеПериода Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

//// Процедура предназначена для расчета суммы залога по заданному способу. 
//// Параметры:
////		ДокументОбъект - передается документ-объект, из которого выбираются данные для расчета суммы залога. 
////		СпособРасчетаЗалога должен принимать значение перечисления СпособРасчетаЗалога.
//Процедура РассчитатьЗалог(ДокументОбъект,СпособРасчетаЗалога) Экспорт
//	
//	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасторжениеДоговораАренды") Тогда
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СтатусыОбъектовАрендыСрезПоследних.Регистратор.СпособРасчетаЗалога КАК СпособРасчетаЗалога
//		|ИЗ
//		|	РегистрСведений.СтатусыОбъектовАренды.СрезПоследних(
//		|			&МоментВремени,
//		|			) КАК СтатусыОбъектовАрендыСрезПоследних";
//		Запрос.УстановитьПараметр("ЗаключениеДоговора",ДокументОбъект.ДокументОснование);
//		Запрос.УстановитьПараметр("МоментВремени",ДокументОбъект.МоментВремени());
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			СпособРасчетаЗалога = Выборка.СпособРасчетаЗалога;
//		КонецЕсли;
//		
//	КонецЕсли;	
//	
//	
//	Если Не ЗначениеЗаполнено(СпособРасчетаЗалога) Тогда
//		Сообщить("Не определен способ расчета залога",СтатусСообщения.Важное);
//		Возврат;
//	КонецЕсли;
//	
//	
//	Если СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.СуммаОплатыПоследнегоПериодаАренды Тогда 
//		
//		
//		//Если Не ДокументОбъект.ДоговорКонтрагента.ВестиВзаиморасчетыПоПериодам Тогда
//		//	Сообщить("Для договора контрагента взаиморасчеты не ведутся по периодам. Автоматический расчет суммы залога по заданному способу невозможен.");
//		//	Возврат;
//		//КонецЕсли;
//		
//		ИмяТаблицыДокумента = ДокументОбъект.Метаданные().Имя;
//		
//		//рассчитываем сумму оплаты последнего периода аренды
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ПостояннаяЧасть.Услуга,
//		|	ПостояннаяЧасть.Ссылка.ОбъектАренды,
//		|	ПостояннаяЧасть.ДатаОкончанияСрокаАренды КАК ПериодКонец,
//		|	ПостояннаяЧасть.Ставка КАК Цена,
//		|	ПостояннаяЧасть.СпособНачисления,
//		|	ВЫБОР 
//		|		КОГДА ПостояннаяЧасть.СпособНачисления.ЗаОбъектВЦелом ТОГДА
//		|			1
//		|		ИНАЧЕ
//		|			ПостояннаяЧасть.Количество
//		|	КОНЕЦ КАК Количество,
//		|	ПостояннаяЧасть.Услуга.СтавкаНДС КАК СтавкаНДС
//		|ИЗ
//		|	Документ."+ИмяТаблицыДокумента+".ПостояннаяЧастьАренднойПлаты КАК ПостояннаяЧасть
//		|ГДЕ
//		|	ПостояннаяЧасть.Ссылка = &Ссылка";
//		
//		Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
//		Выборка = Запрос.Выполнить().Выбрать();

//		ДанныеУчета = Новый ТаблицаЗначений;
//		ДанныеУчета.Колонки.Добавить("Услуга");
//		ДанныеУчета.Колонки.Добавить("ОбъектАренды");
//		ДанныеУчета.Колонки.Добавить("ПериодНачало");
//		ДанныеУчета.Колонки.Добавить("ПериодКонец");
//		ДанныеУчета.Колонки.Добавить("Цена");
//		ДанныеУчета.Колонки.Добавить("Количество");
//		ДанныеУчета.Колонки.Добавить("СпособНачисления");
//		ДанныеУчета.Колонки.Добавить("СтавкаНДС");
//		ДанныеУчета.Колонки.Добавить("Сумма");
//		ДанныеУчета.Колонки.Добавить("СуммаНДС");
//		ДанныеУчета.Колонки.Добавить("КоличествоДней");
//		
//		Периодичность = ДокументОбъект.ДоговорКонтрагента.Периодичность;
//	
//		Пока Выборка.Следующий() Цикл
//		
//			Стр = ДанныеУчета.Добавить();
//			ЗаполнитьЗначенияСвойств(Стр,Выборка);
//			Если Не ЗначениеЗаполнено(Выборка.СтавкаНДС) Тогда
//				Стр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
//			КонецЕсли;
//			Стр.ПериодНачало = НачалоМесяца(Стр.ПериодКонец);
//			
//		КонецЦикла;	
//		
//		ПроцедурыНачисления.РассчитатьСуммуНачисления(ДанныеУчета);
//		ДокументОбъект.СуммаЗалога = ДанныеУчета.Итог("Сумма");
//			
//	ИначеЕсли СпособРасчетаЗалога<>Перечисления.СпособРасчетаЗалога.ФиксированнойСуммой Тогда
//		Сообщить("Данный способ расчета в программе не поддерживается");
//	ИначеЕсли СпособРасчетаЗалога<>Перечисления.СпособРасчетаЗалога.СуммаДвухКурсовВалютДеленнаяПололам Тогда
//		Сообщить("Данный способ расчета в программе не поддерживается");
//	КонецЕсли;
//		
//КонецПроцедуры

// Функция возвращает начало стандартного периода по выбранной дате
// Параметры:
//		Дата - исходная дата в периоде
//		ДоговорКонтрагента - договор контрагента, по которому выбираются данные о периодичности.
Функция ОпределитьНачалоПериодаОплатыПоДоговору(Дата,ДоговорКонтрагента) Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		//Если ДоговорКонтрагента.ВестиВзаиморасчетыПоПериодам Тогда
			Периодичность = ДоговорКонтрагента.Периодичность;
		//Иначе
		//	Периодичность = Константы.ПериодНачисленияАренднойПлаты.Получить();
		//КонецЕсли;
		Если Периодичность = Перечисления.Периодичность.Год Тогда
			НачалоПериода = НачалоГода(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			НачалоПериода = НачалоКвартала(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			НачалоПериода = НачалоМесяца(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
			НачалоПериода = НачалоДня(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			Если Месяц(НачалоПериода)<7 Тогда
				НачалоПериода = НачалоГода(Дата);
			Иначе
				НачалоПериода = ДобавитьМесяц(НачалоГода(Дата),6);
			КонецЕсли;
		ИначеЕсли Периодичность= Перечисления.Периодичность.Неделя Тогда
			НачалоПериода = НачалоНедели(Дата);
		КонецЕсли;
		
		Возврат НачалоПериода;
	Иначе
		Возврат НачалоДня(Дата);
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСтатусДоговора(Период, ОбъектАренды) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектАренды", ОбъектАренды);
	Запрос.УстановитьПараметр("Период"		, ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецДня(ТекущаяДата())));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СтатусыДоговоровАренды.ОбъектАренды КАК ОбъектАренды,
	|	СтатусыДоговоровАренды.Период КАК ДатаНачала,
	|	СтатусыДоговоровАренды.ДатаОкончанияАренды КАК ДатаОкончания,
	|	СтатусыДоговоровАренды.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДоговоровАренды.СрезПоследних(&Период, ) КАК СтатусыДоговоровАренды
	|ГДЕ
	|	СтатусыДоговоровАренды.ДатаНачалаАренды <= &Период
	|	И СтатусыДоговоровАренды.ДатаОкончанияАренды >= &Период
	|	И СтатусыДоговоровАренды.ОбъектАренды = &ОбъектАренды
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	Иначе
		Возврат Перечисления.СтатусыДоговоровКонтрагентов.НеПодписан;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокУслугДляПодбора(Текст, ПостояннаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Шаблон"					, Текст + "%");
	Запрос.УстановитьПараметр("ПостояннаяЧастьОплаты"	, ПостояннаяЧасть);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(НЕ Номенклатура.ЭтоГруппа)
	|	И Номенклатура.Наименование ПОДОБНО &Шаблон
	|	И Номенклатура.ПостояннаяЧастьОплаты = &ПостояннаяЧастьОплаты
	|	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)";
	
	СписокУслуг = Новый СписокЗначений;
	СписокУслуг.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокУслуг;	
	
КонецФункции


// Проверяет правильность заполнения Ф.И.О.
//
Функция ФИОНаписаноПоРусски(Знач СтрокаПараметр)
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);
	
	СписокДопустимыхЗначений = Новый Соответствие;
	СписокДопустимыхЗначений.Вставить(КодСимвола(" "), " ");
	СписокДопустимыхЗначений.Вставить(КодСимвола("-"), "-");
	СписокДопустимыхЗначений.Вставить(КодСимвола("ё"), "ё");
	СписокДопустимыхЗначений.Вставить(КодСимвола("Ё"), "Ё");
	
	КодА = КодСимвола("А");
	КодЯ = КодСимвола("я");
	
	Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
		
		Код = КодСимвола(СтрокаПараметр, Сч);
		
		Если ((Код >= КодА) И (Код <= КодЯ)) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
			Продолжить;
			
		Иначе
			Возврат 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ФИОНаписаноВерно()

// Функция склоняет переданую фразу
// Параметры:
//  Фраза (обязательный), тип строка
//   Параметр должен содержать фразу. Каждое слово фразы будет просклонено отдельно
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
Функция Просклонять(Знач Фраза = "", Падеж = 1, Результат, Пол = Неопределено) Экспорт
		
	Результат = "";
	
	#Если Клиент Тогда
		
		Попытка
			// Загружаем внешнюю компоненту
			ЗагрузитьВнешнююКомпоненту("NameDecl.dll");
			Компонента = Новый("AddIn.NameDeclension");
		Исключение
			// Не удалось выполнить операции с внешней компонентой
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
			Возврат Ложь;
		КонецПопытки;
		
		МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Фраза, " ");
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			Если ПустаяСтрока(СтрокаМассива) ИЛИ НЕ ФИОНаписаноПоРусски(СтрокаМассива) Тогда
				Результат = Результат + СтрокаМассива + " ";
				Продолжить;
			КонецЕсли;
			
			Попытка
				Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
					Результат = Результат + Компонента.Просклонять(СтрокаМассива, Падеж, 1) + " ";
					
				ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
					Результат = Результат + Компонента.Просклонять(СтрокаМассива, Падеж, 2) + " ";
					
				Иначе
					Результат = Результат + Компонента.Просклонять(СтрокаМассива, Падеж) + " ";
					
				КонецЕсли;
				
			Исключение
				Результат = Фраза;
				Возврат Ложь;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Результат = СокрЛП(Результат);
		
		Возврат Истина;
		
	#Иначе
		
		Возврат Ложь;
		
	#КонецЕсли
	
КонецФункции // Просклонять()

// Функция склоняет ФИО
// Параметры:
//  ФИО (обязательный), тип строка
//   Параметр должен содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. Фамилия, имя и отчество
//   должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.
//   Допустимы следующие сочетания фамилии, имени и отчества: ФИО, ИОФ, ИО, ИФ, ФИ, Ф, И, О.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФИО(Знач ФИО = "", Падеж = 1, Пол = Неопределено, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	#Если Клиент Тогда
		Попытка
			// Загружаем внешнюю компоненту
			ЗагрузитьВнешнююКомпоненту("NameDecl.dll");
			Компонента = Новый("AddIn.NameDeclension");
		Исключение
			// Не удалось выполнить операции с внешней компонентой
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
			Возврат Ложь;
		КонецПопытки;
		//Попытка
		//	ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаNameDecl", "Склонение", ТипВнешнейКомпоненты.Native);
		//	Компонента = Новый("AddIn.Склонение.NameDeclension");
		//Исключение
		//КонецПопытки;
		//Если Компонента=Неопределено Тогда
		//   Попытка
		//		УстановитьВнешнююКомпоненту("ОбщийМакет.КомпонентаNameDecl");
		//		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаNameDecl", "Склонение", ТипВнешнейКомпоненты.Native);
		//		Компонента = Новый("AddIn.Склонение.NameDeclension");
		//   Исключение
		//		ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
		//		Возврат Ложь;
		//   КонецПопытки; 
		//КонецЕсли; 
	#Иначе
		
		Возврат Ложь;
		
	#КонецЕсли
	
	Результат = ФИО;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустой.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ФИОНаписаноПоРусски(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени и отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		
		Попытка
			Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
			ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
			Иначе
				Результат = Компонента.Просклонять(ФИО, Падеж);
				
			КонецЕсли;
			
		Исключение
			Возврат Ложь;
			
		КонецПопытки;
		
		Возврат Истина;
		
	#Иначе
		
		Возврат Ложь;
		
	#КонецЕсли
	
КонецФункции // ПросклонятьФИО()

// Функция склоняет Фамилию, Имя и Отчество
// Параметры:
//  Фамилия, Имя, Отчество (обязательный), тип строка
//   Параметры должены содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. 
//   Внутри фамилии, имени, отчества пробелов быть не должно.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФамилиюИмяОтчество(Компонента, Знач Фамилия = "", Знач Имя = "", Знач Отчество = "", Падеж = 1, Пол = Неопределено, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	#Если Клиент Тогда
		Попытка
			// Загружаем внешнюю компоненту
			ЗагрузитьВнешнююКомпоненту("NameDecl.dll");
			Компонента = Новый("AddIn.NameDeclension");
		Исключение
			// Не удалось выполнить операции с внешней компонентой
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
			Возврат Ложь;
		КонецПопытки;
		
			
		#Иначе
		
		Возврат Ложь;
		
	#КонецЕсли
	
	ФамилияНовая	= Фамилия;
	ИмяНовое		= Имя;
	ОтчествоНовое	= Отчество;
	
	Результат = Фамилия + " " + Имя + " " + Отчество;
	
	// Двойные и тройные ФИО, если указаны с пробелами, исправим на использование дефиса
	НужноИсправитьФамилию	= Найти(Фамилия, " ") > 0;
	НужноИсправитьИмя		= Найти(Имя, " ") > 0;
	НужноИсправитьОтчество	= Найти(Отчество, " ") > 0;
	Если НужноИсправитьФамилию Тогда
		ФамилияНовая = СтрЗаменить(Фамилия, " ", "-");
	КонецЕсли;
	Если НужноИсправитьИмя Тогда
		ИмяНовое = СтрЗаменить(Имя, " ", "-");
	КонецЕсли;
	Если НужноИсправитьОтчество Тогда
		ОтчествоНовое = СтрЗаменить(Отчество, " ", "-");
	КонецЕсли;
	
	ФИО = ФамилияНовая + " " + ИмяНовое + " " + ОтчествоНовое;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустая.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ФИОНаписаноПоРусски(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
		Иначе
			Результат = Компонента.Просклонять(ФИО, Падеж);
				
		КонецЕсли;
		
		// Вернем пробелы в составные ФИО обратно, если до этого их изменили
		Если НужноИсправитьФамилию ИЛИ НужноИсправитьИмя ИЛИ НужноИсправитьОтчество Тогда
			
			МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Результат, " ");
			
			Результат = "";
			
			ИндексФИО = 0;
			
			Если Не ПустаяСтрока(Фамилия) Тогда
				ФамилияНовая = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьФамилию Тогда
					
					Если СтрЧислоВхождений(Фамилия, "-") > 0 Тогда
						
						МассивФамилия = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ФамилияНовая, "-");
						ФамилияНовая = МассивФамилия[0];
						ИндексФамилия = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Фамилия, " ");
							ПозДефис  = Найти(Фамилия, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ФамилияНовая = ФамилияНовая + " ";
								Фамилия = Сред(Фамилия, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ФамилияНовая = ФамилияНовая + "-";
								Фамилия = Сред(Фамилия, ПозДефис+1);
								
							КонецЕсли;
							
							ФамилияНовая = ФамилияНовая + МассивФамилия[ИндексФамилия];
							ИндексФамилия = ИндексФамилия + 1;
							
						КонецЦикла;
						
					Иначе
						ФамилияНовая = СтрЗаменить(ФамилияНовая, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = Результат + ФамилияНовая;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Имя) Тогда
				ИмяНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьИмя Тогда
					
					Если СтрЧислоВхождений(Имя, "-") > 0 Тогда
						
						МассивИмя = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяНовое, "-");
						ИмяНовое = МассивИмя[0];
						ИндексИмя = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Имя, " ");
							ПозДефис  = Найти(Имя, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ИмяНовое = ИмяНовое + " ";
								Имя = Сред(Имя, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ИмяНовое = ИмяНовое + "-";
								Имя = Сред(Имя, ПозДефис+1);
								
							КонецЕсли;
							
							ИмяНовое = ИмяНовое + МассивИмя[ИндексИмя];
							ИндексИмя = ИндексИмя + 1;
							
						КонецЦикла;
						
					Иначе
						ИмяНовое = СтрЗаменить(ИмяНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ИмяНовое);
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Отчество) Тогда
				ОтчествоНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьОтчество Тогда
					
					Если СтрЧислоВхождений(Отчество, "-") > 0 Тогда
						
						МассивОтчество = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОтчествоНовое, "-");
						ОтчествоНовое = МассивОтчество[0];
						ИндексОтчество = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Отчество, " ");
							ПозДефис  = Найти(Отчество, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ОтчествоНовое = ОтчествоНовое + " ";
								Отчество = Сред(Отчество, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ОтчествоНовое = ОтчествоНовое + "-";
								Отчество = Сред(Отчество, ПозДефис+1);
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
							ОтчествоНовое = ОтчествоНовое + МассивОтчество[ИндексОтчество];
							ИндексОтчество = ИндексОтчество + 1;
							
						КонецЦикла;
						
					Иначе
						ОтчествоНовое = СтрЗаменить(ОтчествоНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ОтчествоНовое);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	#Иначе
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // ПросклонятьФИО()

//////////////////////////////////////////////////////////////////
// Печать шаблонов Word

#Если Клиент Тогда
	
// Функция возвращает значение реквизита объекта
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	
	Если ИмяРеквизита = "ЮридическийАдресОрганизации" Тогда
		Значение = СокрЛП(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Объект.Организация, ТекущаяДата()).ЮридическийАдрес);
	ИначеЕсли ИмяРеквизита = "ТелефоныОрганизации" Тогда
		Значение = СокрЛП(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Объект.Организация, ТекущаяДата()).Телефоны);
	ИначеЕсли ИмяРеквизита = "РуководительОрганизации" Тогда
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Объект.Организация, ТекущаяДата(),);
		Значение = СокрЛП(Руководители.Руководитель);
	ИначеЕсли ИмяРеквизита = "ЮридическийАдресКонтрагента" Тогда
		Значение = СокрЛП(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Объект.Контрагент, ТекущаяДата()).ЮридическийАдрес);
	ИначеЕсли ИмяРеквизита = "ТелефоныКонтрагента" Тогда
		Значение = СокрЛП(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Объект.Контрагент, ТекущаяДата()).Телефоны);
	ИначеЕсли ИмяРеквизита = "ОбщаяПлощадь" Тогда
		Значение = ОбщегоНазначения.ФорматСумм(Объект.ПостояннаяЧастьАренднойПлаты.Итог("Количество"));
	ИначеЕсли ИмяРеквизита = "ОбщаяСуммаПостояннойЧасти" Тогда
		ИтогоСумма = 0;
		Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
			ИтогоСумма = ИтогоСумма + Окр(ПолучитьСтавку(СтрокаТЧ.Ставка) * ?(СтрокаТЧ.СпособНачисления.ЗаОбъектВЦелом, 1, СтрокаТЧ.Количество), 2);
		КонецЦикла;
		Значение = ОбщегоНазначения.ФорматСумм(ИтогоСумма);
	ИначеЕсли ИмяРеквизита = "Ставка" Тогда
		Значение = ПолучитьСтавку(Объект.Ставка);
	Иначе
		ПозицияСкобки = Найти(ИмяРеквизита,"(");
		Если ПозицияСкобки > 0 тогда
			ФрмСтрока = Сред(ИмяРеквизита,ПозицияСкобки+1,СтрДлина(ИмяРеквизита)-ПозицияСкобки-1);
			ИмяРеквизита = Лев(ИмяРеквизита,ПозицияСкобки-1);
		КонецЕСли;
		ПозицияТочки = Найти(ИмяРеквизита, ".");
		Если ПозицияТочки > 0 Тогда
			ИмяСубРеквизита = Сред(ИмяРеквизита, ПозицияТочки + 1);
			ИмяРеквизита = Лев(ИмяРеквизита, ПозицияТочки - 1);
		КонецЕсли;
		Значение = "";
		Попытка
			Значение = ?(ПозицияТочки > 0, ПолучитьЗначениеРеквизита(Объект[ИмяРеквизита], ИмяСубРеквизита), Объект[ИмяРеквизита]);
			Значение = ?(ПозицияСкобки > 0, СокрЛП(Формат(Значение, ФрмСтрока)), СокрЛП(Значение));
		Исключение 
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат "___________";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьКолонтитул(НомерСекции, НомерКолонтитула, WD, WordDoc, СсылкаНаОбъект)
	
	ЧислоПолей = WordDoc.Sections(НомерСекции).Headers(НомерКолонтитула).Range.Fields.Count;
	Для Инд = 1 По ЧислоПолей Цикл
		Ном = ЧислоПолей - Инд + 1;
		Если Ном > ЧислоПолей Тогда 
			Продолжить 
		КонецЕсли;
		WordDoc.Sections(НомерСекции).Headers(НомерКолонтитула).Range.Fields(Ном).Select(); 
		ИмяРеквизита = WD.Selection.Text;
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			WD.ActiveWindow.View.ShowFieldCodes = -1;
			WD.Selection.Delete();
			WD.ActiveWindow.View.ShowFieldCodes = 0;
			Продолжить;
		КонецЕсли;                                  
		Значение = ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита);
		Если Значение <> Неопределено Тогда
			Wd.ActiveWindow.View.ShowFieldCodes = -1;
			Wd.Selection.Text = Значение;
			Wd.ActiveWindow.View.ShowFieldCodes = 0;
		КонецЕсли;
	КонецЦикла;

	ЧислоПолей = WordDoc.Sections(НомерСекции).Footers(НомерКолонтитула).Range.Fields.Count;
	Для Инд = 1 По ЧислоПолей Цикл
		Ном = ЧислоПолей - Инд + 1;
		Если Ном > ЧислоПолей Тогда 
			Продолжить 
		КонецЕсли;
		WordDoc.Sections(НомерСекции).Footers(НомерКолонтитула).Range.Fields(Ном).Select(); 
		ИмяРеквизита = WD.Selection.Text;
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			WD.ActiveWindow.View.ShowFieldCodes = -1;
			WD.Selection.Delete();
			WD.ActiveWindow.View.ShowFieldCodes = 0;
			Продолжить;
		КонецЕсли;                                  
		Значение = ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита);
		Если Значение <> Неопределено Тогда
			Wd.ActiveWindow.View.ShowFieldCodes = -1;
			Wd.Selection.Text = Значение;
			Wd.ActiveWindow.View.ShowFieldCodes = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция заполняет и открывает вородовский шаблон по переданному документу
Функция ПечатьШаблонаВорд(Шаблон, СсылкаНаОбъект, ДополнительныеПараметры = Неопределено) Экспорт
	
	Перем ПолноеИмяФайла;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Если Не (ДополнительныеПараметры = Неопределено) Тогда
			Шаблон = Справочники.ШаблоныДокументов.НайтиПоКоду(ДополнительныеПараметры.Код);
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не СохранитьФайлВорд(Шаблон, ПолноеИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	WD = Новый COMOBject("Word.Application");
	Попытка
		WordDoc = WD.Documents.Open(ПолноеИмяФайла,,0);
		//ДобавитьОбработчик WordDoc.Close, ЗакрытиеДокумента;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	WordDoc = WD.ActiveDocument;
	wdWord = 2;
	wdExtend = 1;
	wdWindowStateMaximize = 1;
	WD.ActiveWindow.View.ShowFieldCodes = 0;
	NumOfFields = WordDoc.Fields.Count;
	
	// Колонтитулы
	Для Сч = 1 по WordDoc.Sections.Count Цикл
		ЗаполнитьКолонтитул(Сч, 1, WD, WordDoc, СсылкаНаОбъект);
		ЗаполнитьКолонтитул(Сч, 2, WD, WordDoc, СсылкаНаОбъект);
		ЗаполнитьКолонтитул(Сч, 3, WD, WordDoc, СсылкаНаОбъект);
	КонецЦикла;	
	          
	//Шапка
	Для Инд = 1 по WordDoc.Fields.Count Цикл
		Ном = NumOfFields - Инд + 1;
		Если Ном > WordDoc.Fields.Count Тогда 
			Продолжить 
		КонецЕсли;
		WordDoc.Fields(Ном).Select(); 
		ИмяРеквизита = WD.Selection.Text;
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			WD.ActiveWindow.View.ShowFieldCodes = -1;
			WD.Selection.Delete();
			WD.ActiveWindow.View.ShowFieldCodes = 0;
			Продолжить;
		КонецЕсли;                                  
		Значение = ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита);
		Если Значение <> Неопределено Тогда
			Wd.ActiveWindow.View.ShowFieldCodes = -1;
			Wd.Selection.Text = Значение;
			Wd.ActiveWindow.View.ShowFieldCodes = 0;
		КонецЕсли;
	КонецЦикла;	
	
	// Табличная часть
	ВсегоТЧ = СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Количество();
	Для WordDocTableNuber = 1 По WordDoc.Tables.Count() Цикл
		TC = WordDoc.Tables(WordDocTableNuber);
		
		// Обходим все строки таблицы в документе Ворд
		НомерСтрокиДок = 1;
		Попытка
			СтрокаТаблицы = TC.Rows(НомерСтрокиДок);
		Исключение
			// Есть строки объединеные по вертикали
			Продолжить;
		КонецПопытки;
		//Для Каждого СтрокаТаблицы Из TC.Rows Цикл
		Пока НомерСтрокиДок <= TC.Rows.Count() Цикл
			СтрокаТаблицы = TC.Rows(НомерСтрокиДок);
			// Ищем реквизит ТЧ
			НашлиРеквизитТЧ = Ложь;
			КоличествоПолей = СтрокаТаблицы.Range.Fields.Count;
			Если КоличествоПолей > 0 Тогда
				Для Инд = 1 По КоличествоПолей Цикл
					Ном = КоличествоПолей - Инд + 1;
					СтрокаТаблицы.Range.Fields(Ном).Select(); 
					ИмяРеквизита = WD.Selection.Text;						
					Если ПустаяСтрока(ИмяРеквизита) Тогда
						Продолжить;
					КонецЕсли;                                  
					ПоследнийСимвол = Прав(ИмяРеквизита, 1);
					Если Найти("0123456789", ПоследнийСимвол) Тогда // Это число
						ИндексТЧ = Число(ПоследнийСимвол);
						НашлиРеквизитТЧ = Истина;
					Иначе
						Продолжить;
					КонецЕсли;
					Если ИндексТЧ > ВсегоТЧ - 1 Тогда
						ИндексТЧ = 0;
					КонецЕсли;
					ТабличнаяЧасть = СсылкаНаОбъект[СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Получить(ИндексТЧ).Имя];
					Прервать;
				КонецЦикла;					
			КонецЕсли;
			
			Если Не НашлиРеквизитТЧ Тогда
				НомерСтрокиДок = НомерСтрокиДок + 1;
				Продолжить;
			КонецЕсли;
			
			// Добавляем пустые строки по количеству строк в ТЧ документа
			ПерваяСтрока = Истина;
			Если ТабличнаяЧасть.Количество() = 0 Тогда
				СтрокаТаблицы.Range.Cut();
			Иначе
				Для Каждого СтрТЧ из ТабличнаяЧасть Цикл
					Если ПерваяСтрока Тогда
						ПерваяСтрока = Ложь;
						СтрокаТаблицы.Range.Copy();
					Иначе	
						СтрокаТаблицы.Range.Paste();
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			// Обход таблицы документа по столбцам и заполняем строки
			Для Каждого СтрТЧ Из ТабличнаяЧасть Цикл
				НомерСтрокиТЧ = НомерСтрокиДок + СтрТЧ.НомерСтроки - 1;
				СтрокаТаблицы = TC.Rows(НомерСтрокиТЧ);
				КоличествоПолей = СтрокаТаблицы.Range.Fields.Count;
				Если КоличествоПолей > 0 Тогда
					Для Инд = 1 По КоличествоПолей Цикл
						Ном = КоличествоПолей - Инд + 1;
						СтрокаТаблицы.Range.Fields(Ном).Select(); 
						ИмяРеквизита = WD.Selection.Text;						
						Если ПустаяСтрока(ИмяРеквизита) Тогда
							Продолжить;
						КонецЕсли;                                  
						ПоследнийСимвол = Прав(ИмяРеквизита, 1);
						Если Найти("0123456789", ПоследнийСимвол) Тогда // Это реквзит ТЧ
							ИмяРеквизита = Лев(ИмяРеквизита, СтрДлина(ИмяРеквизита) - 1);
							Значение = ПолучитьЗначениеРеквизита(СтрТЧ, ИмяРеквизита);
							Если Значение <> Неопределено Тогда
								Wd.ActiveWindow.View.ShowFieldCodes = -1;
								Wd.Selection.Text = Значение;
								Wd.ActiveWindow.View.ShowFieldCodes = 0;
							КонецЕсли;
						Иначе // Это реквизит документа
							Значение = ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита);
							Если Значение <> Неопределено Тогда
								Wd.ActiveWindow.View.ShowFieldCodes = -1;
								Wd.Selection.Text = Значение;
								Wd.ActiveWindow.View.ShowFieldCodes = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;					
				КонецЕсли;
			КонецЦикла;
			
			НомерСтрокиДок = НомерСтрокиДок + ?(ТабличнаяЧасть.Количество() = 0, 1, ТабличнаяЧасть.Количество());
			
		КонецЦикла;
	КонецЦикла;	

	WordDoc.Save();
	Wd.Visible=-1; 
	Wd.Activate();        
	Wd.WindowState = wdWindowStateMaximize;
	
	Если WD.ActiveWindow.View.SplitSpecial = 0 Тогда
		WD.ActiveWindow.ActivePane.View.Type = 3;
	Иначе
		WD.ActiveWindow.View.Type = 3;
	КонецЕсли;  	
	
	Если Константы.СохранятьДокументWord.Получить() Тогда
		Ответ = Вопрос("Вы желаете сохранить сформированный документ в базе?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				WordDoc.Save();
				WordDoc.Close();
				Если Wd.Documents.Count = 0 Тогда 
					Wd.Quit();
				КонецЕсли;
				WordDoc = Неопределено;
			Исключение
			КонецПопытки;
			
			ВнешнийФайл = Новый ДвоичныеДанные(ПолноеИмяФайла);
			НовыйФайл = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			НовыйФайл.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			НовыйФайл.Объект = СсылкаНаОбъект;
			НовыйФайл.ИмяФайла = Шаблон.Шаблон.ИмяФайла;
			НовыйФайл.Наименование = Шаблон.Наименование;
			НовыйФайл.Хранилище = Новый ХранилищеЗначения(ВнешнийФайл);
			НовыйФайл.Записать();
		КонецЕсли;
	КонецЕсли;

	WordDoc = Неопределено;

	Возврат Неопределено;
	
КонецФункции	

// Процедура сохраняет значение реквизита Хранилище (двоичные данные) на диск.
// При необходимости открывает файл с использованием ассоциированного с ним приложения.
//
// Параметры:
//  ИмяВнешнегоФайла - путь, имя файла дле сохранения на диске
//  Запустить - булево, признак запускать ассоциированное с файлом приложение.
//
Функция СохранитьФайлВорд(Шаблон, ПолноеИмяФайла)
	
	ИмяФайла = Шаблон.Шаблон.ИмяФайла;
	
	// Получить расширение файла.
	РасширениеВременногоФайла = Прав(ИмяФайла, 4);
	
	Если Лев(РасширениеВременногоФайла, 1) = "." Тогда
		// Получить имя временного файла. Установить расширение временного файла.
		РасширениеВременногоФайла = Прав(ИмяФайла, 3);
	КонецЕсли;
	
	Если ВРег(РасширениеВременногоФайла) <> "DOC" И  ВРег(РасширениеВременногоФайла) <> "DOCX" Тогда // Файл не является word-овским
		Сообщить("Файл шаблона не является файлом Word", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(РасширениеВременногоФайла);
	
	// Если не указано имя файла прервать выполнение процедуры
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Предупреждение("Не указано имя файла!");
		Возврат Ложь;
	КонецЕсли;
	
	// Сохранить файл на диске
	ВнешнийФайл = Шаблон.Шаблон.Хранилище.Получить();
	Попытка
		ВнешнийФайл.Записать(ПолноеИмяФайла);
	Исключение
		Сообщить("Ошибка при сохранении файла: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
		
КонецФункции // СохранитьЗапуститьФайл()
     	
#КонецЕсли

// Работа с графиком ставок

Функция ПолучитьСтавку(Ставка, Дата = '00010101') Экспорт
	
	Если ТипЗнч(Ставка) = Тип("Число") Тогда
		Возврат Ставка;
	Иначе
		Возврат 0;
	КонецЕсли;  
	
КонецФункции

// Работа по агентской схеме

//Функция ПолучитьСобственника(ОбъектАренды, Дата = '00010101') Экспорт
//	
//	СтруктураДанных = Новый Структура("Собственник, АгентскаяСхема, ДоговорКонтрагента");
//	СтруктураДанных.Собственник = Справочники.Контрагенты.ПустаяСсылка();
//	СтруктураДанных.АгентскаяСхема = Ложь;
//	СтруктураДанных.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
//	
//	Если ЗначениеЗаполнено(ОбъектАренды) Тогда
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("Ссылка", ОбъектАренды);
//		Запрос.УстановитьПараметр("Период", Дата);
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	СобственникиОбъектовАрендыСрезПоследних.Собственник,
//		|	СобственникиОбъектовАрендыСрезПоследних.АгентскаяСхема КАК АгентскаяСхема,
//		|	СобственникиОбъектовАрендыСрезПоследних.Договор КАК ДоговорКонтрагента
//		|ИЗ
//		|	РегистрСведений.СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = &Ссылка) КАК СобственникиОбъектовАрендыСрезПоследних
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	СобственникиОбъектовАрендыСрезПоследних.Собственник,
//		|	СобственникиОбъектовАрендыСрезПоследних.АгентскаяСхема,
//		|	СобственникиОбъектовАрендыСрезПоследних.Договор
//		|ИЗ
//		|	РегистрСведений.СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = ЗНАЧЕНИЕ(Справочник.ОбъектыАренды.ПустаяСсылка)) КАК СобственникиОбъектовАрендыСрезПоследних
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок";
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
//		КонецЕсли; 
//	КонецЕсли;
//	
//	Возврат СтруктураДанных;
//	
//КонецФункции

Процедура ОткрытьФормуНастроекПрограммы() Экспорт
	ПолучитьОбщуюФорму("НастройкиПрограммы").Открыть();
КонецПроцедуры

Функция ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Дата"				, Дата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЦФО;
	Иначе
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ПровестиДокументПоРегиструВзаиморасчетыПоАренде(пДокументОбъект, Отказ) Экспорт	
	Если (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.ПоступлениеВБанк"))
		ИЛИ (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.ПоступлениеВКассу")) Тогда
		Если (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаДепозитаОтАрендатора)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПостояннойЧастиАрендыОтАрендатора)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПеременнойЧастиАрендыОтАрендатора)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаДепозитаОтАрендатора) Тогда
			Коэффициент = 1;
		ИначеЕсли (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратПостояннойЧастиАрендыОтАрендодателя)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратПеременнойЧастиАрендыОтАрендодателя)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДепозитаОтАрендодателя) Тогда
			Коэффициент = -1;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.РасходИзБанка"))
		ИЛИ (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.РасходИзКассы")) Тогда
		Если (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаДепозитаАрендодателю) Тогда
			Коэффициент = 1;
		ИначеЕсли (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору)
			ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДепозитаАрендатору) Тогда
			Коэффициент = -1;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПостояннойЧастиАрендыОтАрендатора)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратПостояннойЧастиАрендыОтАрендодателя)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору) Тогда
		пТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
		пДепозит = Ложь;
	ИначеЕсли (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПеременнойЧастиАрендыОтАрендатора)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратПеременнойЧастиАрендыОтАрендодателя)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору) Тогда
		пТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
		пДепозит = Ложь;
	ИначеЕсли (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаДепозитаОтАрендатора)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаДепозитаОтАрендатора)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДепозитаОтАрендодателя)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаДепозитаАрендодателю)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору)
		ИЛИ (пДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДепозитаАрендатору) Тогда
		пТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
		пДепозит = Истина;
	КонецЕсли;
	
	Если (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.ПоступлениеВБанк"))
		ИЛИ (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.РасходИзБанка")) Тогда
		пФормаОплаты = Перечисления.ФормыОплаты.Безналичные;
	ИначеЕсли (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.РасходИзБанка"))
		ИЛИ (ТипЗнч(пДокументОбъект) = Тип("ДокументОбъект.РасходИзКассы")) Тогда
		пФормаОплаты = Перечисления.ФормыОплаты.Наличные;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пДокументОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан договор контрагента");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//+++АК susk
	// В расходе из банка убрал проверку периодичности.
	//Если Не ЗначениеЗаполнено(пДокументОбъект.ДоговорКонтрагента.Периодичность) Тогда
	Если Не ЗначениеЗаполнено(пДокументОбъект.ДоговорКонтрагента.Периодичность) И ТипЗнч(пДокументОбъект) <> Тип("ДокументОбъект.РасходИзБанка") Тогда
	//---AK susk
		ОбщегоНазначения.СообщитьОбОшибке("В договоре " + пДокументОбъект.ДоговорКонтрагента + " (" + пДокументОбъект.Контрагент + ") по документу " + пДокументОбъект + " не указана периодичность");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекНачалоПериода = НачалоМесяца(пДокументОбъект.ПериодРегистрации);
	ТекКонецПериода = ПроцедурыНачисления.КонецПериодаРазвернутый(пДокументОбъект.ПериодРегистрации, пДокументОбъект.ДоговорКонтрагента.Периодичность);
	ТЗВзаиморасчеты = Новый ТаблицаЗначений;
	ТЗВзаиморасчеты.Колонки.Добавить("Контрагент");
	ТЗВзаиморасчеты.Колонки.Добавить("Договор");
	ТЗВзаиморасчеты.Колонки.Добавить("Сумма");
	НСтрока = ТЗВзаиморасчеты.Добавить();
	НСтрока.Контрагент = пДокументОбъект.Контрагент;
	НСтрока.Договор = пДокументОбъект.ДоговорКонтрагента;
	НСтрока.Сумма = пДокументОбъект.СуммаДокумента * Коэффициент;
	ТЗВзаиморасчеты = ПроцедурыНачисления.РаспределитьТаблицуПоДням(ТЗВзаиморасчеты, пДокументОбъект.ПериодРегистрации, КонецМесяца(пДокументОбъект.ПериодРегистрации));
	
	пДокументОбъект.Движения.ВзаиморасчетыПоДоговорамАренды.Записывать = Истина;
	
	Для Каждого СтрокаДень Из ТЗВзаиморасчеты Цикл	 
		Движение = пДокументОбъект.Движения.ВзаиморасчетыПоДоговорамАренды.Добавить();
		Движение.Период = пДокументОбъект.Дата;
		Движение.Дата = СтрокаДень.ДатаКалендаря;
		Движение.Депозит = пДепозит;
		Движение.Договор = СтрокаДень.Договор;
		Движение.Документ = пДокументОбъект.Ссылка;
		Движение.Контрагент = пДокументОбъект.Контрагент;
		Движение.ОбъектАренды = СтрокаДень.Договор.ОбъектАренды;
		Движение.Организация = пДокументОбъект.Организация;
		Движение.ФормаОплаты = пФормаОплаты;
		Движение.ТипАренднойПлаты = пТипАренднойПлаты;
		Движение.Сумма = СтрокаДень.Сумма;
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьСуммыОплатПоЗаявкамНаРасходование(спЗаявки) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("спЗаявки", спЗаявки);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МИНИМУМ(ЗаявкаНаРасходованиеСредств.Дата) КАК МинДата,
	               |	МАКСИМУМ(ЗаявкаНаРасходованиеСредств.Дата) КАК МаксДата
	               |ИЗ
	               |	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	               |ГДЕ
	               |	ЗаявкаНаРасходованиеСредств.Ссылка В(&спЗаявки)";
				   
	МинДата = '00010101';
	МаксДата = '00010101';
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МинДата = Выборка.МинДата;
		МаксДата = Выборка.МаксДата;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("НачДата", ДобавитьМесяц(МинДата, -1));
	Запрос.УстановитьПараметр("КонДата", ДобавитьМесяц(МаксДата, 6));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЗ_Запрос.ЗаявкаНаРасходованиеСредств,
	               |	СУММА(ВЗ_Запрос.Приход) КАК Приход,
	               |	СУММА(ВЗ_Запрос.Расход) КАК Расход,
	               |	СУММА(ВЗ_Запрос.Отправлено) КАК Отправлено
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВзаиморасчетыСКонтрагентамиОбороты.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств,
	               |		ВзаиморасчетыСКонтрагентамиОбороты.СуммаПриход КАК Приход,
	               |		ВзаиморасчетыСКонтрагентамиОбороты.СуммаРасход КАК Расход,
	               |		0 КАК Отправлено
	               |	ИЗ
	               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&НачДата, &КонДата, , ЗаявкаНаРасходованиеСредств В (&спЗаявки)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ОтправленныеПлатежиВБанкОбороты.ЗаявкаНаРасходованиеСредств,
	               |		0,
	               |		0,
	               |		ОтправленныеПлатежиВБанкОбороты.СуммаОборот
	               |	ИЗ
	               |		РегистрНакопления.ОтправленныеПлатежиВБанк.Обороты(&НачДата, &КонДата, , ЗаявкаНаРасходованиеСредств В (&спЗаявки)) КАК ОтправленныеПлатежиВБанкОбороты) КАК ВЗ_Запрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЗ_Запрос.ЗаявкаНаРасходованиеСредств";
		
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОбозначениеДокументаПоСтатусуОплаты(СтатусОплаты, ПометкаУдаления = Ложь, ДатаОплаты = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ДатаОплаты) Тогда
		ОплатаПросрочена = Ложь;
	Иначе
		ОплатаПросрочена = (НачалоДня(ДатаОплаты) <= ТекущаяДата());
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатусОплаты", СтатусОплаты);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ОплатаПросрочена", ОплатаПросрочена);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ОбозначенияДокументовПоСтатусамОплаты.Красный,
	               |	ОбозначенияДокументовПоСтатусамОплаты.Зеленый,
	               |	ОбозначенияДокументовПоСтатусамОплаты.Синий
	               |ИЗ
	               |	РегистрСведений.ОбозначенияДокументовПоСтатусамОплаты КАК ОбозначенияДокументовПоСтатусамОплаты
	               |ГДЕ
	               |	ОбозначенияДокументовПоСтатусамОплаты.СтатусОплаты = &СтатусОплаты
	               |	И ОбозначенияДокументовПоСтатусамОплаты.ОплатаПросрочена = &ОплатаПросрочена
	               |	И ОбозначенияДокументовПоСтатусамОплаты.ПометкаУдаления = &ПометкаУдаления";						
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Рез = Новый Структура("Красный, Зеленый, Синий", Выборка.Красный, Выборка.Зеленый, Выборка.Синий);	
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;	
КонецФункции

Функция ПолучитьОбозначениеДокументаПоСтатусу(Статус) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", Статус);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ОбозначенияДокументовПоСтатусам.Красный,
	               |	ОбозначенияДокументовПоСтатусам.Зеленый,
	               |	ОбозначенияДокументовПоСтатусам.Синий
	               |ИЗ
	               |	РегистрСведений.ОбозначенияДокументовПоСтатусам КАК ОбозначенияДокументовПоСтатусам
	               |ГДЕ
	               |	ОбозначенияДокументовПоСтатусам.Статус = &Статус";						
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Рез = Новый Структура("Красный, Зеленый, Синий", Выборка.Красный, Выборка.Зеленый, Выборка.Синий);	
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;	
КонецФункции

Функция ПолучитьСтатусОплаты(СуммаПлан, СуммаФакт) Экспорт
	Если СуммаФакт = 0 Тогда
		Возврат Перечисления.СтатусыОплаты.НеОплачено;
	ИначеЕсли СуммаФакт < СуммаПлан Тогда
		Возврат Перечисления.СтатусыОплаты.ЧастичноОплачено;
	Иначе
		Возврат Перечисления.СтатусыОплаты.ПолностьюОплачено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСтатусОтправкиВБанк(СуммаПлан, СуммаФакт) Экспорт
	Если СуммаФакт = 0 Тогда
		Возврат Перечисления.СтатусыОтправкиПлатежейВБанк.НеОтправлено;
	Иначе
		Возврат Перечисления.СтатусыОтправкиПлатежейВБанк.Отправлено;
	КонецЕсли;
КонецФункции

//+++АК SUVV 2018.02.28 ИП-00017941
//Функция ПолучитьСтатьюДРПоСтатьеДДС(пСтатьяДвиженияДенежныхСредств) Экспорт
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("СтатьяДДС", пСтатьяДвиженияДенежныхСредств);
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	               |	МАКСИМУМ(СоответствияСтатейСчетов.СтатьяДР) КАК СтатьяДР
//	               |ИЗ
//	               |	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
//	               |ГДЕ
//	               |	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.СтатьяДР;
//	Иначе
//		Возврат Справочники.СтатьиДоходовРасходов.ПустаяСсылка();
//	КонецЕсли;
//КонецФункции
Функция ПолучитьСтатьюДРПоСтатьеДДС(ВыбДата, пСтатьяДвиженияДенежныхСредств) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяДДС", пСтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("ВыбДата", ВыбДата);
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//+++AK suvv 19.03.2018 ИП-00017941
	//|	СоответствияСтатейСчетов.СтатьяДР
	|   МАКСИМУМ(СоответствияСтатейСчетов.СтатьяДР) КАК СтатьяДР
	//---AK suvv
	|ИЗ
	|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
	|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатьяДР;
	Иначе
		Возврат Справочники.СтатьиДоходовРасходов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 
//---АК SUVV

Функция ПолучитьСчетДляРКОПоСтатьеДДС(пСтатьяДвиженияДенежныхСредств) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяДДС", пСтатьяДвиженияДенежныхСредств);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоответствиеСтатьиДДСИСчетаДляРКО.СчетУчета
	               |ИЗ
	               |	РегистрСведений.СоответствиеСтатьиДДСИСчетаДляРКО КАК СоответствиеСтатьиДДСИСчетаДляРКО
	               |ГДЕ
	               |	СоответствиеСтатьиДДСИСчетаДляРКО.СтатьяДДС = &СтатьяДДС";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СчетУчета;
	Иначе
		Возврат ПланыСчетов.Финансовый.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьОрганизациюФизЛица(ФизЛицо, Дата) Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	СотрудникиОрганизаций.Ссылка
	             |ИЗ
	             |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	             |ГДЕ
	             |	НЕ СотрудникиОрганизаций.ПометкаУдаления
	             |	И СотрудникиОрганизаций.Физлицо = &Физлицо
	             |	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1) ИЛИ СотрудникиОрганизаций.ДатаУвольнения >=&Дата)
	             |	И СотрудникиОрганизаций.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.Пустаяссылка)";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Физлицо"	, ФизЛицо);
	Запрос.УстановитьПараметр("Дата"	, Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка.Организация;
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции	

//+++АК GEYV 23.06.2015

// Функция склоняет переданую фразу
// Параметры:
//  Фраза (обязательный), тип строка
//   Параметр должен содержать фразу. Каждое слово фразы будет просклонено отдельно
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
Функция Просклонять82(Знач Фраза = "", Падеж = 1, Результат, Пол = Неопределено) Экспорт

	Результат = "";
	ПутьККомпоненте="C:\NAMEDECL.DLL"   ;
	NameDecl = "Скл";
	
	Попытка
		
		Если ПодключитьВнешнююКомпоненту(ПутьККомпоненте,NameDecl)ТОгда
			Функ = Новый ("AddIn.Скл.NameDeclension"); 
			Результат = функ.Просклонять(Фраза,Падеж); 
		КонецЕсли; 
		
	Исключение
		
		Сообщить("Не удалось загрузить внешнюю компаненту по причине: "+ОписаниеОшибки());
		
	КонецПопытки;
	
		
КонецФункции

//---АК

//+++АК obue 20160303 
//Функция получает Организацию по структруной единице
Функция ПолучитьОрганизациюПоСтруктурнойЕдинице(СтруктурнаяЕдиница) Экспорт
	
	//
	Результат = Неопределено;
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Организация
	               |ИЗ
	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК Таблица
	               |";
				   
	//				   
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат =  Выборка.Организация;
	КонецЕсли;
	
	//
	Возврат Результат;
	
КонецФункции
//---АК obue

Функция ПолучитьУчетнуюЗаписьДляРассылки(Email = Неопределено) Экспорт
	
	//ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	//СлучЧисло = ГСЧ.СлучайноеЧисло(0, 9);
	//Имя = "no-reply" + ?(СлучЧисло = 0, "", СлучЧисло) + "@vkusvill.ru";
	//Имя = "no-reply@vkusvill.ru";
	//
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Имя);
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	УчетныеЗаписиЭлектроннойПочты.Ссылка
	//			   |ИЗ
	//			   |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	//			   |ГДЕ
	//			   |	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
	//			   
	//Выборка = Запрос.Выполнить().Выбрать();
	//Выборка.Следующий();
	//Возврат Выборка.Ссылка;
	//+++AK GREK 13.12.2017 
	//Хочется, что бы можно было отправлять рассылку с прозвольного адреса, а если такого в базе нет, то пусть рассылка идет с общего.
	Если Email<>Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты",Email);
		Если УчетнаяЗапись <> ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка") Тогда
			Возврат УчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	//---AK
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
КонецФункции	


Процедура УстановкаНовогоНомераПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПрефиксПериферийнойБазы) Тогда
		Префикс = ПараметрыСеанса.ПрефиксПериферийнойБазы;
	ИначеЕсли НЕ ЗначениеЗаполнено(Префикс) Тогда
		Префикс = "0";
	КонецЕсли;
	
КонецПроцедуры

//+++АК_Кибарев, 12.09.17, ИП-00016684
&НаКлиенте
Процедура АК_ОткрытьФормуСпискаСтрукЕдСОтбором() Экспорт
	
	ОткрытьФорму("Обработка.АК_РозничныеМагазины.Форма.ФормаСписка");
	
КонецПроцедуры

//---АК_Кибарев, 12.09.17, ИП-00016684

//+++АК Susk (Суслин К.В.) 2018.01.22 ИП-00016321.01
Функция ПолучитьСтатьюЗатратБухПоСтатьеДР(Разрез = "", Статья, Счет, КорСчет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	               |ИЗ
	               |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	               |ГДЕ
	               |	СоответствиеСтатейДРСтатьямБУ.Статья = &Статья
	               |	И СоответствиеСтатейДРСтатьямБУ.Счет = &Счет И СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА &Разрез
	               |	И СоответствиеСтатейДРСтатьямБУ.КорСчет = &КорСчет";
		 
	Запрос.УстановитьПараметр("Статья", Статья);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("КорСчет", ?(КорСчет = Неопределено, ПланыСчетов.Финансовый.ПустаяСсылка(), КорСчет));
	
	Если ЗначениеЗаполнено(Разрез) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Разрез", "Справочник." + Разрез);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА &Разрез", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатьяБУ;
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции


//+++АК KIRN 2018.03.19 ИП-00018103
Процедура НоменклатураФормаУпрПриСозданииНаСервере(Форма, Список) Экспорт
	
	ЭтоПродавец = Ложь;
	ПОпытка
		ТекущийПродавец = ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПродавец)
	Исключение
		ТекущийПродавец = ЛОжь;
	КонецПопытки;
	
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	РольПродавец    = РольДоступна("Продавец");

	ЭтоПродавец = РольПродавец И НЕ РольПолныеПрава И ТекущийПродавец;
	
	Форма[Список].Параметры.УстановитьЗначениеПараметра("ЭтоПродавец", ЭтоПродавец);
	Форма[Список].Параметры.УстановитьЗначениеПараметра("ТипРозничнойТочки", ?(ЗначениеЗаполнено(ПараметрыСеанса.ТорговаяТочкаПоАйпи),ПараметрыСеанса.ТорговаяТочкаПоАйпи.ТипРозничнойТочки,Перечисления.ТипыРозничныхТочек.ПустаяСсылка()));

КонецПРоцедуры

//+++АК KIRN 2018.05.25 ИП-00018663.000.00000002
Функция ПолучитьТЗТоварыДляРО(пСписокРО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Ссылка КАК РасходныйОрдер,
				   //+++АК sils 19.10.2018 ИП-00020171
				   //|	РасходныйОрдерСкладТовары.Ссылка.Получатель.КонтрагентСтороннейРозницы КАК Контрагент,
	               |	ВЫБОР
	               |		КОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.Контрагенты
	               |				И РасходныйОрдерСкладТовары.Ссылка.Организация.ИНН = ""7734675810""
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Получатель.КонтрагентСтороннейРозницы
	               |	КОНЕЦ КАК Контрагент,
				   //---АК
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	ВЫБОР
	               |		КОГДА ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
	               |			ТОГДА РасходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоКомплект,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТТ,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК ПоРасходнымОрдерам,
	               |	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства1
	               |ПОМЕСТИТЬ втО_Предв
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	               |	И РасходныйОрдерСкладТовары.Ссылка В(&СписокОрдеров)
	               |	И РасходныйОрдерСкладТовары.Количество > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Ссылка,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства,
	               |	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков,
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель,
	               |	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
				   //+++АК sils 19.10.2018 ИП-00020171
				   //|	РасходныйОрдерСкладТовары.Ссылка.Получатель.КонтрагентСтороннейРозницы,
	               |	ВЫБОР
	               |		КОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.Контрагенты
	               |				И РасходныйОрдерСкладТовары.Ссылка.Организация.ИНН = ""7734675810""
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Получатель.КонтрагентСтороннейРозницы
	               |	КОНЕЦ,
				   //---АК
	               |	ВЫБОР
	               |		КОГДА ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
	               |			ТОГДА РасходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.РасходныйОрдер,
	               |	РасходныйОрдерСкладТовары.Контрагент,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.ТТ,
	               |	РасходныйОрдерСкладТовары.Количество КАК Количество,
	               |	РасходныйОрдерСкладТовары.ПоРасходнымОрдерам,
	               |	РасходныйОрдерСкладТовары.Коэффициент КАК Коэффициент,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства1 КАК ДатаПроизводства1
	               |ПОМЕСТИТЬ втО_Общее
	               |ИЗ
	               |	втО_Предв КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	НЕ РасходныйОрдерСкладТовары.ЭтоКомплект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.РасходныйОрдер,
	               |	РасходныйОрдерСкладТовары.Контрагент,
	               |	СоставКомплектаСрезПоследних.ТоварКомплекта,
	               |	СоставКомплектаСрезПоследних.ТоварКомплекта.ЕдиницаХраненияОстатков,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства,
	               |	СоставКомплектаСрезПоследних.Составляющая,
	               |	РасходныйОрдерСкладТовары.ТТ,
	               |	РасходныйОрдерСкладТовары.Количество * СоставКомплектаСрезПоследних.Количество,
	               |	РасходныйОрдерСкладТовары.ПоРасходнымОрдерам * СоставКомплектаСрезПоследних.Количество,
	               |	РасходныйОрдерСкладТовары.Коэффициент,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства1
	               |ИЗ
	               |	РегистрСведений.СоставКомплекта.СрезПоследних(
	               |			&период,
	               |			(Комплект, Характеристика) В
	               |				(ВЫБРАТЬ
	               |					втО_Предв.Номенклатура,
	               |					втО_Предв.Характеристика
	               |				ИЗ
	               |					втО_Предв КАК втО_Предв)) КАК СоставКомплектаСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втО_Предв КАК РасходныйОрдерСкладТовары
	               |		ПО (РасходныйОрдерСкладТовары.Номенклатура = СоставКомплектаСрезПоследних.Комплект)
	               |			И (РасходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика)
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.ЭтоКомплект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.РасходныйОрдер,
	               |	РасходныйОрдерСкладТовары.Контрагент,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.ТТ,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	               |	СУММА(РасходныйОрдерСкладТовары.ПоРасходнымОрдерам) КАК ПоРасходнымОрдерам,
	               |	РасходныйОрдерСкладТовары.Коэффициент КАК Коэффициент,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства1 КАК ДатаПроизводства1
	               |ПОМЕСТИТЬ втО
	               |ИЗ
	               |	втО_Общее КАК РасходныйОрдерСкладТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.РасходныйОрдер,
	               |	РасходныйОрдерСкладТовары.Контрагент,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.ТТ,
	               |	РасходныйОрдерСкладТовары.Коэффициент,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныРеализацииСрезПоследних.Период,
	               |	ЦеныРеализацииСрезПоследних.Номенклатура,
	               |	ЦеныРеализацииСрезПоследних.ЕдиницаИзмерения,
	               |	ЦеныРеализацииСрезПоследних.Характеристика,
	               |	ЦеныРеализацииСрезПоследних.Контрагент,
	               |	ЦеныРеализацииСрезПоследних.Цена,
	               |	ЦеныРеализацииСрезПоследних.БезНДС,
	               |	ЦеныРеализацииСрезПоследних.ЦенаБезНДС
	               |ПОМЕСТИТЬ втЦены
	               |ИЗ
	               |	РегистрСведений.ЦеныРеализации.СрезПоследних(
	               |			&период,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втО.Номенклатура
	               |					ИЗ
	               |						втО)
	               |				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяССылка)) КАК ЦеныРеализацииСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втО.РасходныйОрдер
	               |ИЗ
	               |	втО КАК втО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втО.Номенклатура,
	               |	втО.ЕдиницаИзмерения,
	               |	втО.Характеристика,
	               |	втО.ДатаПроизводства,
	               |	втО.ТТ,
	               |	СУММА(втО.Количество) КАК Количество,
	               |	СУММА(втО.ПоРасходнымОрдерам) КАК ПоРасходнымОрдерам,
	               |	СУММА(втО.Количество) КАК КоличествоОтгружено,
	               |	втО.Коэффициент,
	               |	втО.ДатаПроизводства КАК ДатаПроизводства1,
	               |	МАКСИМУМ(ЕСТЬNULL(втЦены.ЦенаБезНДС, 0) * ВЫБОР
	               |			КОГДА втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |					ИЛИ втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |				ТОГДА 1.1
	               |			КОГДА втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |					ИЛИ втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |				ТОГДА 1.18
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Цена,
	               |	МАКСИМУМ(втЦены.БезНДС) КАК БезНДС,
	               |	МАКСИМУМ(ЕСТЬNULL(втЦены.ЦенаБезНДС, 0)) КАК ЦенаБезНДС,
	               |	СУММА(втО.Количество * ЕСТЬNULL(втЦены.ЦенаБезНДС, 0) * ВЫБОР
	               |			КОГДА втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |					ИЛИ втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |				ТОГДА 1.1
	               |			КОГДА втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |					ИЛИ втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |				ТОГДА 1.18
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Сумма,
	               |	СУММА(втО.Количество * ЕСТЬNULL(втЦены.ЦенаБезНДС, 0)) КАК СуммаБезНДС,
	               |	СУММА(втО.Количество * ЕСТЬNULL(втЦены.ЦенаБезНДС, 0) * ВЫБОР
	               |			КОГДА втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |					ИЛИ втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |				ТОГДА 1.1
	               |			КОГДА втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |					ИЛИ втО.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |				ТОГДА 1.18
	               |			ИНАЧЕ 1
	               |		КОНЕЦ - втО.Количество * ЕСТЬNULL(втЦены.ЦенаБезНДС, 0)) КАК СуммаНДС,
	               |	втО.Номенклатура.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	втО КАК втО
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	               |		ПО втО.Номенклатура = втЦены.Номенклатура
	               |			И втО.ЕдиницаИзмерения = втЦены.ЕдиницаИзмерения
	               |			И втО.Контрагент = втЦены.Контрагент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втО.Номенклатура,
	               |	втО.ЕдиницаИзмерения,
	               |	втО.Характеристика,
	               |	втО.ТТ,
	               |	втО.Коэффициент,
	               |	втО.ДатаПроизводства,
	               |	втО.Номенклатура.СтавкаНДС,
	               |	втО.ДатаПроизводства";
	Запрос.УстановитьПараметр("СписокОрдеров", пСписокРО);
	Запрос.УстановитьПараметр("Период", пСписокРО[0].Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если  РезультатЗапроса[РезультатЗапроса.Количество()-1].Пустой() Тогда
		Сообщ = Новый СообщениеПользователю;
		Сообщ.Текст = "пусто";
		Сообщ.Сообщить();
		Возврат Неопределено;
	КонецЕСли;

	тзТовары = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
	
	тзТовары.Колонки.Добавить("СрокГодности");   	
	тзТовары.Колонки.Добавить("СерийныйНомер");
	тзТовары.Колонки.Добавить("СчетУчета");
	тзТовары.Колонки.Добавить("СтатьяТовародвижения");
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275		 
	МассивНоменклатуры = тзТовары.ВыгрузитьКолонку("Номенклатура");	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры);
	//---АК Susk (Суслин К.В.) 
	
	Для Каждого СтрокаТЧ из тзТовары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			
			//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаТЧ.Номенклатура);			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСчетов);		
			
			//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
			
			#Область ЗакоментКод_ПолучитьТЗТоварыДляРО
			//Если СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
			//	ИЛИ СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			//	
			//	СчетУчета = ПланыСчетов.Финансовый.Товары;
			//	
			//ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
			//	
			//	СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
			//	
			//КонецЕсли;
			//
			//СтрокаТЧ.СчетУчета 				= ?(Не ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
			#КонецОбласти
			
			//---АК Susk (Суслин К.В.) 
			
			СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000019");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДатаПроизводства) Тогда
			СтрокаТЧ.СерийныйНомер = ""+Формат(СтрокаТЧ.ДатаПроизводства,"ДФ=yyyyMMdd")+ДеньГода(ТекущаяДата());
			Если СтрокаТЧ.Характеристика.ТипСрокаГодности.Наименование = "Час" Тогда
				СтрокаТЧ.СрокГодности = СтрокаТЧ.ДатаПроизводства + СтрокаТЧ.Характеристика.СрокГодности*3600;
			ИначеЕсли СтрокаТЧ.Характеристика.ТипСрокаГодности.Наименование = "Сутки" Тогда
				СтрокаТЧ.СрокГодности = СтрокаТЧ.ДатаПроизводства + СтрокаТЧ.Характеристика.СрокГодности*86400
			ИначеЕсли СтрокаТЧ.Характеристика.ТипСрокаГодности.Наименование = "Месяц" Тогда
				СтрокаТЧ.СрокГодности = ДобавитьМесяц(СтрокаТЧ.ДатаПроизводства, СтрокаТЧ.Характеристика.СрокГодности);
			ИначеЕсли СтрокаТЧ.Характеристика.ТипСрокаГодности.Наименование = "Год" Тогда
				СтрокаТЧ.СрокГодности = ДобавитьМесяц(СтрокаТЧ.ДатаПроизводства, СтрокаТЧ.Характеристика.СрокГодности*12);
			КонецЕСли;
		КонецЕСли;
	КонецЦикла;
	
	спРО = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить().ВыгрузитьКолонку("РасходныйОрдер");
	
	Возврат Новый Структура("тзТовары, списокРО",тзТовары,спРО);	

КонецФункции

//+++АК KIRN 2018.04.11 
Функция СоздатьРТУДляРасходногоОрдера(пСписокРО, пРТУ = Неопределено, ОбновленаДатаЗавершенияПогрузки = Ложь) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	//+++АК SHEP 2018.10.08 ИП-00020060
	//Если ЗначениеЗаполнено(пРТУ) ТОгда
	Если ТипЗнч(пРТУ) = Тип("ДокументОбъект.РеализацияТоваровУслуг") ИЛИ ЗначениеЗаполнено(пРТУ) Тогда
	//---АК SHEP 2018.10.08
		//+++АК KIRN 2018.04.23 ИП-00018209^01 ИП-00018663.000.00000002
		Если пРТУ.EDI_ГотовКОбмену И ЕстьДвиженияПоДОкументуВРегистре_КонтурEDI_СтатусыДокументов(пРТУ) 
			и (НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетИзменятьДанныеРТУПослеОтправкиEDI, Ложь)) 
			и (НЕ ОбновленаДатаЗавершенияПогрузки) ТОгда
			Возврат пРТУ;
		//+++АК SHEP 2018.10.08 ИП-00020060
		ИначеЕсли ТипЗнч(пРТУ) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			РТУ = пРТУ;
		//---АК SHEP 2018.10.08
		Иначе
			РТУ = пРТУ.ПолучитьОбъект();
		КонецЕСли;
		//---АК KIRN 
	Иначе
		РТУ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		РТУ.Дата = пСписокРО[0].Дата;
		РТУ.ДатаИсходящегоДокумента = РТУ.Дата;
		РТУ.УстановитьНовыйНомер();		
		РТУ.НомерИсходящегоДокумента = Число(РТУ.Номер);
		//РТУ.НомерИсходящегоДокумента = РТУ.Номер;
	КонецЕсли;
	
	стОбновленныеТЧ = ПолучитьТЗТоварыДляРО(пСписокРО);
	
	пСписокРО.Очистить();
	пСписокРО = стОбновленныеТЧ.СписокРО;
	тзТовары = стОбновленныеТЧ.тзТовары;
	
	пРО = пСписокРО[0];

		
	РТУ.Комментарий = "###Авт.";
	//+++АК SHEP 2018.10.09 ИП-00020060
	//РТУ.Заполнить(пРО);
	рту.ЗаполнитьПоРасходномуОрдеру(пРО);
	//+++АК SHEP 2018.10.09
	
	//+++АК SHEP 2018.10.10 ИП-00020100
	// в т.ч. заменил пРО.Получатель на АК_Получатель
	АК_Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(пРО, "Получатель");
	ЭтоСторонняяРозница = Ложь;
	//---АК SHEP 2018.10.10
	Если ТипЗнч(АК_Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") ТОгда
		ЭтоСторонняяРозница = ОбщегоНазначенияКлиентСервер.ЭтоСторонняяРозница(АК_Получатель); //+++АК SHEP 2018.10.05 ИП-00020071
		РТУ.Контрагент = АК_Получатель.КонтрагентСтороннейРозницы;
		РТУ.ДоговорКонтрагента = Обработки.МаршрутныеЛисты.ПолучитьДоговорКонтрагентаСтороннейРозницы(РТУ.Контрагент, АК_Получатель, РТУ.Организация, РТУ.Дата); //+++АК LAGP 2018.05.09 ИП-00018465 Для подстановки в РТУ Тилси-Перекресток
		//+++АК SHEP 2018.10.10 ИП-00020100
		//ЭтоВкусомат = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АК_Получатель, "ТипРозничнойТочки") = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Вкусомат"));
		Если НЕ ЗначениеЗаполнено(РТУ.ДоговорКонтрагента) Тогда
			МассивВидовДоговоров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
			РТУ.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(РТУ.Организация, РТУ.Контрагент, КонецДня(РТУ.Дата), МассивВидовДоговоров);
		КонецЕсли;
		//+++АК SHEP 2018.10.10 ИП-00020100
		РТУ.EDI_ТочкаДоставки = АК_Получатель;
	КонецЕСли;
	
	//СоответствиеРеквизитовРО = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(пСписокРО, "Получатель");
	РТУ.РасходныеОрдера.Очистить();
	ДЛя Каждого СтрО из пСписокРО Цикл
		НС = РТУ.РасходныеОрдера.Добавить();
		НС.РасходныйОрдер = СтрО;	
		//+++АК SHEP 2018.10.05 ИП-00020071
		//АК_Получатель = СоответствиеРеквизитовРО.Получить(СтрО);
		//Если АК_Получатель <> Неопределено И ОбщегоНазначенияКлиентСервер.ЭтоСторонняяРозница(АК_Получатель) Тогда
		//	Если ЭтоСторонняяРозница = Неопределено Тогда
		//		ЭтоСторонняяРозница = Истина;
		//	КонецЕсли;
		//Иначе
		//	ЭтоСторонняяРозница = Ложь;
		//КонецЕсли;
		//---АК SHEP 2018.10.05
	КонецЦикла;
	
	РТУ.Товары.Загрузить(тзТовары);
	РТУ.EDI_Товары.Загрузить(тзТовары);
	
	//+++АК ILIK 2018.06.04 ИП-00018886
	// организация Тилси
	//+++АК SHEP 2018.10.05 ИП-00020071
	//Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РТУ.Организация, "ИНН") = "7734410589" Тогда
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РТУ.Организация, "ИНН") = "7734410589" ИЛИ ЭтоСторонняяРозница = Истина Тогда
	//---АК SHEP 2018.10.05
		РТУ.Товары.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена, СтавкаНДС, СчетУчета, СтатьяТовародвижения", "Количество, Сумма, СуммаНДС, ПоРасходнымОрдерам");
	КонецЕсли;
	//---АК ILIK
	//+++АК sils 19.10.2018 ИП-00020171
	Если ТипЗнч(РТУ) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РТУ.Организация, "ИНН") = "7734675810" Тогда
			РТУ.Товары.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена, СтавкаНДС, СчетУчета, СтатьяТовародвижения, СтруктурнаяЕдиница", "Количество, Сумма, СуммаНДС, ПоРасходнымОрдерам");
		КонецЕсли;
	КонецЕсли;
	//---АК
	
	флПроведен = Истина;
	//РТУ.ДополнительныеСвойства.Вставить("ПроводитьВЗакрытомПериоде", Истина);
	Если ОбновленаДатаЗавершенияПогрузки Тогда
		РТУ.ДополнительныеСвойства.Вставить("ОбновленаДатаЗавершенияПогрузки", ОбновленаДатаЗавершенияПогрузки);
	КонецЕсли;
	
	//+++АК SHEP 2018.10.05 ИП-00020071
	РТУ.ОбновитьЦеныБезНДС(); // пересчитаем цены
	
	Если ТипЗнч(пРТУ) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Возврат Неопределено; 
	КонецЕсли;
	//---АК SHEP 2018.10.08
	
	Попытка
		РТУ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		флПроведен = Ложь;
		
		ТекстИзвещения = "<h3> не проведен документ РТУ"+РТУ+" пользователем "+глЗначениеПеременной("глТекущийПользователь")+"</h3>";
		ТекстИзвещения = ТекстИзвещения+"<h4> описание ошибки: "+ОписаниеОшибки()+"</h4>";
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		
		Почта = Новый ИнтернетПочта;
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Почта.Подключиться(Профиль);
		Письмо.Тема = "РТУ по Тилси "+РТУ+" не проведен";
		
		Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
		Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = "miha@automacon.ru";
		Получатель.ОтображаемоеИмя = "miha@automacon.ru";
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = "kirn@automacon.ru";
		Получатель.ОтображаемоеИмя = "kirn@automacon.ru";
		

		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = ТекстИзвещения;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
		//ТекстДокумент = Неопределено;
		Почта.Послать(Письмо);
		Почта.Отключиться();

	КонецПопытки;
	Если НЕ флПроведен ТОгда
		Попытка
			РТУ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстИзвещения = "<h3> не записан документ РТУ"+РТУ+" пользователем "+глЗначениеПеременной("глТекущийПользователь")+"</h3>";
			ТекстИзвещения = ТекстИзвещения+"<h4> описание ошибки: "+ОписаниеОшибки()+"</h4>";
			ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
			
			Почта = Новый ИнтернетПочта;
			УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
			Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Почта.Подключиться(Профиль);
			Письмо.Тема = "РТУ по Тилси "+РТУ+" не записан";
			
			Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
			Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = "marp@automacon.ru";
			Получатель.ОтображаемоеИмя = "marp@automacon.ru";
			
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = "kirn@automacon.ru";
			Получатель.ОтображаемоеИмя = "kirn@automacon.ru";
			
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     = ТекстИзвещения;
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			
			//ТекстДокумент = Неопределено;
			Почта.Послать(Письмо);
			Почта.Отключиться();
		КонецПопытки;
	КонецЕСли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РТУ.Ссылка;
КонецФункции

//+++АК KIRN 2018.04.11 ИП-00018209      
Функция ЭтоВнешняяОрганизация(пОрганизация) Экспорт
	Если пОрганизация = Справочники.Организации.НайтиПоРеквизиту("ИНН","7734410589") Тогда
		Возврат Истина;
	КонецЕСли;
	
	Возврат Ложь;
КонецФункции

//+++АК LATV 2018.11.21 ИП-00020500
//Используется общая процедура для заполнения РТУ, в т.ч. для ввода на основании
Функция ОбновитьРТУПоОрдерам(пДоки, ОбновленаДатаЗавершенияПогрузки = Ложь, ДокРеализацияТоваровУслугОбъект = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
		|	РасходныйОрдерСклад.Получатель КАК Получатель,
		|	РасходныйОрдерСклад.Дата КАК Дата
		|ПОМЕСТИТЬ втРО
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&РасходныйОрдер)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка КАК Ссылка,
		|	РасходныйОрдерСклад.Получатель,
		|	НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.Дата, ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ втВсеРОЗаДень
		|ИЗ
		|	втРО КАК втРО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ПО втРО.Получатель = РасходныйОрдерСклад.Получатель
		|			И (НАЧАЛОПЕРИОДА(втРО.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.Дата, ДЕНЬ))
		|			И втРО.СтруктурнаяЕдиница = РасходныйОрдерСклад.Склад.Владелец
		|			И (НЕ РасходныйОрдерСклад.ПометкаУдаления)
		|			И (РасходныйОрдерСклад.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугРасходныеОрдера.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер КАК РасходныйОрдер,
		|	РеализацияТоваровУслуг.EDI_ТочкаДоставки КАК Получатель,
		|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ втРТУ
		|ИЗ
		|	втВсеРОЗаДень КАК втВсеРОЗаДень
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ПО РеализацияТоваровУслугРасходныеОрдера.Ссылка = РеализацияТоваровУслуг.Ссылка
		|				И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
		|		ПО втВсеРОЗаДень.Ссылка = РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка,
		|	втРО.Ссылка,
		|	РеализацияТоваровУслуг.EDI_ТочкаДоставки,
		|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ)
		|ИЗ
		|	втРО КАК втРО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО втРО.Получатель = РеализацияТоваровУслуг.EDI_ТочкаДоставки
		|			И (НАЧАЛОПЕРИОДА(втРО.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ))
		|			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК РТУ,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК НоменклатураР,
		|	РеализацияТоваровУслугТовары.Количество КАК КоличествоР,
		|	втРТУ.Получатель КАК Получатель,
		|	втРТУ.Дата КАК Дата,
		|	втРТУ.РасходныйОрдер
		|ПОМЕСТИТЬ втРТУ_Товары
		|ИЗ
		|	втРТУ КАК втРТУ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО втРТУ.Ссылка = РеализацияТоваровУслугТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерСкладТовары.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(втВсеРОЗаДень.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
		|			ТОГДА РасходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомплект,
		|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
		|	втВсеРОЗаДень.Получатель КАК Получатель,
		|	втВсеРОЗаДень.Дата КАК Дата,
		|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втРО_ТоварыСКомплектами
		|ИЗ
		|	втВсеРОЗаДень КАК втВсеРОЗаДень
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|		ПО втВсеРОЗаДень.Ссылка = РасходныйОрдерСкладТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	РасходныйОрдерСкладТовары.Характеристика,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(втВсеРОЗаДень.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
		|			ТОГДА РасходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	втВсеРОЗаДень.Получатель,
		|	втВсеРОЗаДень.Дата,
		|	РасходныйОрдерСкладТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРО_ТоварыСКомплектами.Номенклатура КАК Номенклатура,
		|	втРО_ТоварыСКомплектами.Количество КАК Количество,
		|	втРО_ТоварыСКомплектами.Получатель КАК Получатель,
		|	втРО_ТоварыСКомплектами.Дата КАК Дата,
		|	втРО_ТоварыСКомплектами.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втРО_ТоварыБезКомплектов
		|ИЗ
		|	втРО_ТоварыСКомплектами КАК втРО_ТоварыСКомплектами
		|ГДЕ
		|	НЕ втРО_ТоварыСКомплектами.ЭтоКомплект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.ТоварКомплекта,
		|	втРО_ТоварыСКомплектами.Количество * СоставКомплектаСрезПоследних.Количество,
		|	втРО_ТоварыСКомплектами.Получатель,
		|	втРО_ТоварыСКомплектами.Дата,
		|	втРО_ТоварыСКомплектами.Ссылка
		|ИЗ
		|	втРО_ТоварыСКомплектами КАК втРО_ТоварыСКомплектами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(
		|				&ДатаРО,
		|				(Комплект, Характеристика) В
		|					(ВЫБРАТЬ
		|						втРО_ТоварыСКомплектами.Номенклатура,
		|						втРО_ТоварыСКомплектами.Характеристика
		|					ИЗ
		|						втРО_ТоварыСКомплектами КАК втРО_ТоварыСКомплектами)) КАК СоставКомплектаСрезПоследних
		|		ПО втРО_ТоварыСКомплектами.Номенклатура = СоставКомплектаСрезПоследних.Комплект
		|			И втРО_ТоварыСКомплектами.Характеристика = СоставКомплектаСрезПоследних.Характеристика
		|ГДЕ
		|	втРО_ТоварыСКомплектами.ЭтоКомплект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура КАК НоменклатураО,
		|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК КоличествоО,
		|	втВсеРОЗаДень.Получатель КАК Получатель,
		|	втВсеРОЗаДень.Дата КАК Дата,
		|	РасходныйОрдерСкладТовары.Ссылка КАК РасходныйОрдер
		|ПОМЕСТИТЬ втРО_Товары
		|ИЗ
		|	втВсеРОЗаДень КАК втВсеРОЗаДень
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРО_ТоварыБезКомплектов КАК РасходныйОрдерСкладТовары
		|		ПО втВсеРОЗаДень.Ссылка = РасходныйОрдерСкладТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	втВсеРОЗаДень.Получатель,
		|	втВсеРОЗаДень.Дата,
		|	РасходныйОрдерСкладТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРТУ_Товары.РасходныйОрдер КАК РасходныйОрдер,
		|	втРТУ_Товары.РТУ КАК РТУ,
		|	втРТУ_Товары.НоменклатураР КАК НоменклатураР,
		|	втРТУ_Товары.КоличествоР КАК КОличествоР,
		|	втРТУ_Товары.Получатель КАК ПОлучательР,
		|	втРТУ_Товары.Дата КАК ДатаР,
		|	втРО_Товары.РасходныйОрдер КАК РасходныйОрдерО,
		|	втРО_Товары.НоменклатураО КАК НоменклатураО,
		|	втРО_Товары.КоличествоО КАК КОличествоО,
		|	втРО_Товары.Получатель КАК ПОлучательО,
		|	втРО_Товары.Дата КАК ДатаО,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втРО_Товары.РасходныйОрдер, ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)) <> ЕСТЬNULL(втРТУ_Товары.РасходныйОрдер, ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка))
		|				ИЛИ ЕСТЬNULL(втРО_Товары.НоменклатураО, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЕСТЬNULL(втРТУ_Товары.НоменклатураР, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|				ИЛИ ЕСТЬNULL(втРО_Товары.КоличествоО, 0) <> ЕСТЬNULL(втРТУ_Товары.КоличествоР, 0)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьИзменения
		|ПОМЕСТИТЬ втСверка
		|ИЗ
		|	втРТУ_Товары КАК втРТУ_Товары
		|		ПОЛНОЕ СОЕДИНЕНИЕ втРО_Товары КАК втРО_Товары
		|		ПО втРТУ_Товары.РасходныйОрдер = втРО_Товары.РасходныйОрдер
		|			И втРТУ_Товары.Получатель = втРО_Товары.Получатель
		|			И втРТУ_Товары.НоменклатураР = втРО_Товары.НоменклатураО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(втСверка.ПОлучательО, втСверка.ПОлучательР) КАК Получатель,
		|	ЕСТЬNULL(втСверка.ДатаО, втСверка.ДатаР) КАК Дата,
		|	втСверка.ЕстьИзменения
		|ПОМЕСТИТЬ втИзменения
		|ИЗ
		|	втСверка КАК втСверка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсеРОЗаДень.Ссылка КАК РасходныйОрдер,
		|	втВсеРОЗаДень.Получатель,
		|	втВсеРОЗаДень.Дата,
		|	втРТУ.Ссылка КАК РТУ,
		|	СУММА(втИзменения.ЕстьИзменения) КАК ЕстьИзменения
		|ИЗ
		|	втВсеРОЗаДень КАК втВсеРОЗаДень
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИзменения КАК втИзменения
		|		ПО втВсеРОЗаДень.Получатель = втИзменения.Получатель
		|			И (НАЧАЛОПЕРИОДА(втВсеРОЗаДень.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(втИзменения.Дата, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРТУ КАК втРТУ
		|		ПО (втРТУ.Получатель = втИзменения.Получатель)
		|			И (НАЧАЛОПЕРИОДА(втРТУ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(втИзменения.Дата, ДЕНЬ))
		|
		|СГРУППИРОВАТЬ ПО
		|	втВсеРОЗаДень.Ссылка,
		|	втВсеРОЗаДень.Получатель,
		|	втВсеРОЗаДень.Дата,
		|	втРТУ.Ссылка";
	
	Запрос.УстановитьПараметр("РасходныйОрдер",	пДоки);
	Запрос.УстановитьПараметр("ДатаРО",			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(пДоки[0], "Дата"));
	
	тзДоки = Запрос.Выполнить().Выгрузить();
	тзТТ = тзДоки.Скопировать();
	тзТТ.Свернуть("Получатель, Дата", "ЕстьИзменения");
	мсРТУ = Новый Массив;
	Для Каждого Стр из тзТТ Цикл
		тзОрдера = тзДОки.СКопировать(Новый Структура("Получатель, Дата",Стр.Получатель,Стр.Дата));
		мсОрдера = тзОрдера.ВыгрузитьКолонку("РасходныйОрдер");
		Если Стр.ЕстьИзменения ТОгда
			ДокРТУСсылка = тзОрдера[0].РТУ;
			ДокРТУСсылка = ?(ТипЗнч(ДокРеализацияТоваровУслугОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") И НЕ ЗначениеЗаполнено(ДокРТУСсылка), ДокРеализацияТоваровУслугОбъект, ДокРТУСсылка);
			НовыйРТУ = СоздатьРТУДляРасходногоОрдера(мсОрдера, ДокРТУСсылка, ОбновленаДатаЗавершенияПогрузки);
			ЕСЛИ ЗначениеЗаполнено(НовыйРТУ) ТОгда
				Если мсРТУ.Найти(НовыйРТУ.ССылка) = Неопределено Тогда 
					мсРТУ.Добавить(НовыйРТУ.ССылка);
				КонецЕСлИ;
			КонецЕСли;
		Иначе
			Если ЗначениеЗаполнено(тзОрдера[0].РТУ) Тогда //старый
				Если НЕ тзОрдера[0].РТУ.Проведен Тогда
					Попытка
						Об = тзОрдера[0].РТУ.ПолучитьОбъект();
						Об.ОбновитьЦеныБезНДС(); //+++АК SHEP 2018.10.05 ИП-00020071: пересчитаем цены
						Об.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
					КонецПОпытки;
				КонецЕСли;
				Если мсРТУ.Найти(тзОрдера[0].РТУ) = Неопределено Тогда 
					мсРТУ.Добавить(тзОрдера[0].РТУ);
				КонецЕСлИ;
			КонецЕСли;
		КонецЕСли;
	КонецЦикла;
	
	Возврат мсРТУ;

КонецФункции

//+++АК KIRN 2018.05.23 ИП-00018663 
Функция ОбновитьРТУПоМаршрутномуЛисту(пРейс) Экспорт
	ЗапросРТУ = Новый Запрос;
	ЗапросРТУ.Текст = "ВЫБРАТЬ
	|	МаршрутныйЛистРасходныеОрдера.Документ
	|ПОМЕСТИТЬ втОрдера
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка = &Рейс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ втОрдера.Документ ИЗ втОрдера;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	ЗапросРТУ.УстановитьПараметр("Рейс", пРейс.Ссылка);
	СписокРО = ЗапросРТУ.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	мсРТУ = ОбновитьРТУПоОрдерам(СписокРО, Истина);
	
	Для каждого РТУ из мсРТУ Цикл
		ЕСли НЕ РТУ.EDI_ГотовКОбмену ТОгда
			Об = РТУ.ПОлучитьОбъект();
			об.EDI_ГотовКОбмену = Истина;
			об.ДополнительныеСвойства.Вставить("ОбновленаДатаЗавершенияПогрузки", Истина);
			Попытка
				об.Записать();
			Исключение
			КонецПопытки;
		КонецЕСли;
	КонецЦикла;
КонецФункции

//+++АК KIRN 2018.04.24  ИП-00018209^02   
Функция ЕстьДвиженияПоДОкументуВРегистре_КонтурEDI_СтатусыДокументов(пДок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КонтурEDI_СтатусыДокументов.Документ КАК Док
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_СтатусыДокументов КАК КонтурEDI_СтатусыДокументов
	               |ГДЕ
	               |	КонтурEDI_СтатусыДокументов.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ",пДок);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕСли;
	
	Возврат Ложь;
КонецФункции

//+++АК KIRN 2018.04.26 ИП-00018243
Функция МассивЧиселВСтроку(Массив, Разделитель) Экспорт 
	Текст = "";
	
	Для каждого элем Из Массив Цикл			
		Текст = Текст + ?(Текст = "", "", Разделитель) + Формат(элем,"ЧГ=0");			
	КонецЦикла;
	
	Возврат Текст;
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.11.29 ИП-00020589
Функция ПолучитьВыборкуПоНеПолностьюНадежнымПоставщикам(СтруктураУсловий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НеПолностьюНадежныеПоставщики.Контрагент,
	               |	НеПолностьюНадежныеПоставщики.ДатаС,
	               |	НеПолностьюНадежныеПоставщики.ДатаПо,
	               |	НеПолностьюНадежныеПоставщики.Причина,
	               |	НеПолностьюНадежныеПоставщики.Автор,
	               |	НеПолностьюНадежныеПоставщики.Документ
	               |ИЗ
	               |	РегистрСведений.НеПолностьюНадежныеПоставщики КАК НеПолностьюНадежныеПоставщики
	               |ГДЕ
	               |	&Условие";
	
	ТекстУсловия = "";
	
	Для Каждого ЭлементУсловия Из СтруктураУсловий Цикл
		ТекстУсловия = ТекстУсловия + ?(ЗначениеЗаполнено(ТекстУсловия), "И ", "") + "НеПолностьюНадежныеПоставщики." + ЭлементУсловия.Ключ + " = &" + ЭлементУсловия.Ключ + " ";		
		Запрос.УстановитьПараметр(ЭлементУсловия.Ключ, ЭлементУсловия.Значение);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Возврат Запрос.Выполнить().Выбрать();	
	
КонецФункции

 
