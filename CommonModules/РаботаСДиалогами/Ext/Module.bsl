// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.

#Если ТолстыйКлиентОбычноеПриложение Тогда

///////////////// ПРИ ИЗМЕНЕНИИ ////////////////////////

// Процедура выполняет общие действия при изменнении даты документа
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//
Процедура ПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено) Экспорт

	МетаданныеДокумента            = ДокументОбъект.Метаданные();
	ЕстьВалютаДокумента            = МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено;
	ЕстьДоговорКонтрагента         = МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено;
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;

	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = ДокументОбъект.ДоговорКонтрагента;

			Если ЗначениеЗаполнено(Договор) Тогда
				Валюта = Договор.ВалютаВзаиморасчетов;
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДокументОбъект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	ЕстьКурсДокумента           = (МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено);
	ЕстьКратностьДокумента      = (МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено);
	ЕстьКурсВзаиморасчетов      = (МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено);
	ЕстьКратностьВзаиморасчетов = (МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено);

	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов
	   И ЕстьКурсВзаиморасчетов
	   И ЕстьКратностьВзаиморасчетов
	   И ЕстьКурсДокумента
	   И ЕстьКратностьДокумента Тогда

		ВалютаВзаиморасчетов          = Валюта;
		ВалютаДокумента               = ДокументОбъект.ВалютаДокумента;

		СтарыйКурсВзаиморасчетов      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратностьВзаиморасчетов = ДокументОбъект.КратностьВзаиморасчетов;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДокументОбъект.Дата);
		НовыйКурсВзаиморасчетов       = СтруктураВалюты.Курс;
		НоваяКратностьВзаиморасчетов  = СтруктураВалюты.Кратность;

		СтарыйКурсДокумента           = ДокументОбъект.КурсДокумента;
		СтараяКратностьДокумента      = ДокументОбъект.КратностьДокумента;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		НовыйКурсДокумента            = СтруктураВалюты.Курс;
		НоваяКратностьДокумента       = СтруктураВалюты.Кратность;

	ИначеЕсли ПроверкаПоВалютеВзаиморасчетов
	        И ЕстьКурсВзаиморасчетов
	        И ЕстьКратностьВзаиморасчетов Тогда

		ВалютаВзаиморасчетов          = Валюта;
		ВалютаДокумента               = Неопределено;

		СтарыйКурсВзаиморасчетов      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратностьВзаиморасчетов = ДокументОбъект.КратностьВзаиморасчетов;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДокументОбъект.Дата);
		НовыйКурсВзаиморасчетов       = СтруктураВалюты.Курс;
		НоваяКратностьВзаиморасчетов  = СтруктураВалюты.Кратность;

		СтарыйКурсДокумента           = 0;
		СтараяКратностьДокумента      = 0;

		НовыйКурсДокумента            = 0;
		НоваяКратностьДокумента       = 0;

	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов
	        И ЕстьКурсДокумента
	        И ЕстьКратностьДокумента Тогда

		ВалютаВзаиморасчетов          = Неопределено;
		ВалютаДокумента               = Валюта;

		СтарыйКурсВзаиморасчетов      = 0;
		СтараяКратностьВзаиморасчетов = 0;

		НовыйКурсВзаиморасчетов       = 0;
		НоваяКратностьВзаиморасчетов  = 0;

		СтарыйКурсДокумента           = ДокументОбъект.КурсДокумента;
		СтараяКратностьДокумента      = ДокументОбъект.КратностьДокумента;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		НовыйКурсДокумента            = СтруктураВалюты.Курс;
		НоваяКратностьДокумента       = СтруктураВалюты.Кратность;

	Иначе
		Возврат;
	КонецЕсли;

	ИзменилсяКурсВзаиморасчетов = НЕ (НовыйКурсВзаиморасчетов = СтарыйКурсВзаиморасчетов И НоваяКратностьВзаиморасчетов = СтараяКратностьВзаиморасчетов);
	ИзменилсяКурсДокумента      = НЕ (НовыйКурсДокумента      = СтарыйКурсДокумента      И НоваяКратностьДокумента      = СтараяКратностьДокумента);

	// Контроль изменений курса.
	Если ИзменилсяКурсВзаиморасчетов
	   И ИзменилсяКурсДокумента Тогда

		// Изменился курс документа и взаиморасчетов.
		ТекстВопроса = "На дату документа у валюты документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,      СтарыйКурсДокумента,      СтараяКратностьДокумента,      ВалютаРегламентированногоУчета, Истина)) +
		               " и валюты взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, СтарыйКурсВзаиморасчетов, СтараяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
		               " был задан другой курс." +
		               Символы.ПС +
		               "Установить курс документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,      НовыйКурсДокумента,      НоваяКратностьДокумента,      ВалютаРегламентированногоУчета, Истина)) +
		               " и курс взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, НовыйКурсВзаиморасчетов, НоваяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
		               " в соответствии с курсом валют?";

	ИначеЕсли ИзменилсяКурсВзаиморасчетов
	     И НЕ ИзменилсяКурсДокумента Тогда

		// Изменился курс взаиморасчетов.
		ТекстВопроса = "На дату документа у валюты взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, СтарыйКурсВзаиморасчетов, СтараяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
		               " был задан другой курс." +
		               Символы.ПС +
		               "Установить курс взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, НовыйКурсВзаиморасчетов,  НоваяКратностьВзаиморасчетов,  ВалютаРегламентированногоУчета, Истина)) +
		               " в соответствии с курсом валюты?";

	ИначеЕсли ИзменилсяКурсДокумента Тогда

		// Изменился курс документа.
		ТекстВопроса = "На дату документа у валюты документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, СтарыйКурсДокумента, СтараяКратностьДокумента, ВалютаРегламентированногоУчета, Истина)) +
		               " был задан другой курс." +
		               Символы.ПС +
		               "Установить курс документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, НовыйКурсДокумента,  НоваяКратностьДокумента,  ВалютаРегламентированногоУчета, Истина)) +
		               " в соответствии с курсом валюты?";

	Иначе
		// Если курс неизменился, то выход.
		Возврат;
	КонецЕсли;

	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Если ИзменилсяКурсДокумента Тогда
			Если ЕстьКурсДокумента Тогда
				ДокументОбъект.КурсДокумента           = НовыйКурсДокумента;
			КонецЕсли;
			Если ЕстьКратностьДокумента Тогда
				ДокументОбъект.КратностьДокумента      = НоваяКратностьДокумента;
			КонецЕсли;
		КонецЕсли;

		Если ИзменилсяКурсВзаиморасчетов Тогда
			Если ЕстьКурсВзаиморасчетов Тогда
				ДокументОбъект.КурсВзаиморасчетов      = НовыйКурсВзаиморасчетов;
			КонецЕсли;
			Если ЕстьКратностьВзаиморасчетов Тогда
				ДокументОбъект.КратностьВзаиморасчетов = НоваяКратностьВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;

		ФлагИзмененияКурса = Истина;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()

// Процедура вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа и предлагает пересчитать сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств,ПересчитыватьСумму=Истина) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СатрыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		// Надо предложить пересчитать сумму.
		Ответ = Вопрос("Изменилась валюта документа. Пересчитать сумму документа?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СатрыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);
		Иначе
			ПересчитыватьСумму=Ложь;								
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКассыБанковскогоСчета()

//////////////// НАЧАЛО ВЫБОРА //////////////////////////

// Процедура выполняет стандартные действия при начале выбора документа расчетов с контрагентом в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента по сделке;
//  Сделка                - ссылка на документ, определяет собственно сделку;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  СтрокаВидаДвижения    - строка, "Приход" или "Расход", определяет какие документы могут выступать
//                          в качестве расчетных: если документ выполняет расход по регистру то берем те,
//                          которые выполняют приход, и наоборот.
//
Процедура НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ФормаДокумента, ЭлементФормы, ДоговорКонтрагента, Сделка,
	                          СтандартнаяОбработка, СтрокаВидаДвижения) Экспорт

	// Тип выбираемого значения зависит от договора.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбран договор контрагента!");
		//в шапке документа может не быть реквизита Контрагент - например, в Авансовом отчете
		Если ФормаДокумента.ЭлементыФормы.Найти("Контрагент") <> Неопределено Тогда		
			ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

	Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

		// Заполним возможный список типов документов, которые могут быть расчетными.
		СписокТипов = Новый СписокЗначений;
		Если СтрокаВидаДвижения = "Приход" Тогда

			// Заполним список документов, которые могут делать расход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,               Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Имя, 	   Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Представление());
				
				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,               Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,           Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				КонецЕсли;
				
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,                  Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПолучениеУслугПоПереработке"].Имя, 			   Метаданные.Документы["ПолучениеУслугПоПереработке"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,                   Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,                  Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Имя, 			   Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Имя,     Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Представление());
				
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Имя, 	   Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Представление());
				
			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,               Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,                  Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,                   Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,                  Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Имя, 
				                                                                                           Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Имя,     Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Представление());
				
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());

			КонецЕсли;
		Иначе

			// Заполним список документов, которые могут делать приход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Имя,    Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,            Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,                Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Имя,   Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПередачаОС"].Имя,                            Метаданные.Документы["ПередачаОС"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());
                СписокТипов.Добавить(Метаданные.Документы["РеализацияУслугПоПереработке"].Имя,         Метаданные.Документы["РеализацияУслугПоПереработке"].Представление());

			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                        Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,              Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Имя, 
				                                                                                        Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,           Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,           Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				КонецЕсли;
			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                        Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Имя,    Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,              Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Имя, 
				                                                                                        Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,            Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,                Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Имя,   Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПередачаОС"].Имя,                            Метаданные.Документы["ПередачаОС"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

			КонецЕсли;
		КонецЕсли;
		СписокТипов.Добавить(Метаданные.Документы["ДокументРасчетовСКонтрагентом"].Имя,                 Метаданные.Документы["ДокументРасчетовСКонтрагентом"].Представление());
		
		// Пользователь выбирает тип расчетного документа
		
		СписокТипов.СортироватьПоПредставлению();
		
		Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		
			ИмяНачальногоТипа = ЭлементФормы.Значение.Метаданные().Имя;
			НачальноеЗначение = СписокТипов.НайтиПоЗначению(ИмяНачальногоТипа);
			
		Иначе
			
			НачальноеЗначение = Неопределено;
			
		КонецЕсли;
		
		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы, НачальноеЗначение);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаРасчетов = ВыбранныйЭлемент.Значение;

	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаРасчетов].ПолучитьФормуВыбора(,ЭлементФормы,);
	
	Если ТипДокументаРасчетов = "ДокументРасчетовСКонтрагентом" Тогда
		
		СтруктураОтбора = Новый Структура;
		
		СтруктураОтбора.Вставить("Дата",               ДокументОбъект.Дата);
		СтруктураОтбора.Вставить("Контрагент",         ДоговорКонтрагента.Владелец);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Организация",        ДоговорКонтрагента.Организация);
		ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");
			
		БухгалтерскийУчет.ОбработатьВыборСубконто(ЭлементФормы, Ложь, ДоговорКонтрагента.Организация, СтруктураОтбора, ОграничениеТипа);
		Возврат;
		
	Иначе
		// Отфильтруем список документов по договору.
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Установить(ДоговорКонтрагента);
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияДокументаСоставногоТипа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
	                   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти,ОграничениеТипов = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;
	
	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл
			
			Если не ОграничениеТипов = Неопределено Тогда
			    Если ОграничениеТипов.Найти(ЭлементМассива) = Неопределено Тогда
				 	// Тип не вписывается в полученные ограничения
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 

			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли; 

	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	Иначе // Форма выбора этого документа специфична. Отсутствует отбор.
		Если ВыбранныйТип = "ДокументРасчетовСКонтрагентом" Тогда
			//СтруктураОтбора = Новый Структура;
			////
			//СписокПараметров = Новый Структура;
			//СписокПараметров.Вставить("Дата",               ДокументОбъект.Дата);
			//
			//Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("Контрагент") Тогда
			//	СписокПараметров.Вставить("Контрагент",         СтруктураОтбора.Контрагент);
			//КонецЕсли; 
			//
			//Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
			//	СписокПараметров.Вставить("ДоговорКонтрагента",         СтруктураОтбора.ДоговорКонтрагента);
			//КонецЕсли; 
			//
			//Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("Организация") Тогда
			//	СписокПараметров.Вставить("Организация",         СтруктураОтбора.Организация);
			//КонецЕсли; 
			//
			Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и не СтруктураОтбора.Свойство("Дата") Тогда
				СтруктураОтбора.Вставить("Дата", ДокументОбъект.Дата);
			КонецЕсли; 
			
			БухгалтерскийУчет.ОбработатьВыборСубконто(ЭлементФормы, Ложь, ДокументОбъект.Организация, СтруктураОтбора);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Проверка возможности отбора по сделке
	Если СтруктураОтбора.Свойство("Сделка") Тогда
		Если ФормаВыбора.Отбор.Найти("Сделка")= Неопределено Тогда
			СтруктураОтбора.Удалить("Сделка");
		КонецЕсли;
	КонецЕсли;

	// Отфильруем список документов.
	Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
		Иначе
			Если НЕ ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ТипЗначения.СодержитТип(ТипЗнч(ЭлементСтруктуры.Значение)) Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
	КонецЦикла; 
	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа;
//  ФормаДокумента                 - форма редактируемого документа;
//  ЭлементФормы                   - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,          - булево, признак выполнения стандартной (системной) обработки события 
//                                   начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияСтруктурнойЕдиницы(ДокументОбъект, ФормаДокумента, ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
    Если ЭлементФормы.Значение = Неопределено Тогда
		//выбор типа
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Метаданные.Справочники.БанковскиеСчета.Имя, Метаданные.Справочники.БанковскиеСчета.Синоним);
		СписокТипов.Добавить(Метаданные.Справочники.Кассы.Имя, Метаданные.Справочники.Кассы.Синоним);
		
		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ВыбранныйЭлемент.Значение = Метаданные.Справочники.БанковскиеСчета.Имя Тогда
			ЭлементФормы.Значение = Справочники.БанковскиеСчета.ПустаяСсылка();
		Иначе
			ЭлементФормы.Значение = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;
	
	ЕстьДоговорКонтрагента = (ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено);
	Если ЕстьДоговорКонтрагента И ДокументОбъект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ВалютаБанковскогоСчетаКассы = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Иначе
		ВалютаБанковскогоСчетаКассы = ДокументОбъект.ВалютаДокумента;
	КонецЕсли; 
	
	Если ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		НачалоВыбораЗначенияБанковскогоСчета(ДокументОбъект.Организация, ЭлементФормы, СтандартнаяОбработка, ВалютаБанковскогоСчетаКассы); 
	ИначеЕсли ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка.Кассы") Тогда
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники.Кассы.ПолучитьФормуВыбора(,ЭлементФормы,);
		ФормаВыбора.ПараметрОтборПоВладельцу = ДокументОбъект.Организация;
		Если ЗначениеЗаполнено(ВалютаБанковскогоСчетаКассы) Тогда
			ФормаВыбора.Отбор.ВалютаДенежныхСредств.Значение = ВалютаБанковскогоСчетаКассы;
			ФормаВыбора.Отбор.ВалютаДенежныхСредств.Использование = Истина;
		КонецЕсли;
		ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // НачалоВыбораЗначенияСтруктурнойЕдиницы()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ВладелецБанковскогоСчета - ссылка на справочник, определяет владельца банковского счета;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//  ВалютаБанковскогоСчета   - ссылка на справочник, определяет валюту банковского счета,
//                             если неп заполнено, то список банковских счетов не фильтруется по валюте;
//
Процедура НачалоВыбораЗначенияБанковскогоСчета(ВладелецБанковскогоСчета,ЭлементФормы, СтандартнаяОбработка, 
	                                   ВалютаБанковскогоСчета = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбораБанковскогоСчета = Справочники.БанковскиеСчета.ПолучитьФормуСписка(, ЭлементФормы);
	ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;

	Если ЗначениеЗаполнено(ВалютаБанковскогоСчета) Тогда

		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Значение      = ВалютаБанковскогоСчета;
		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;

	КонецЕсли;

	ФормаВыбораБанковскогоСчета.РежимВыбора = Истина;
	ФормаВыбораБанковскогоСчета.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
	ФормаВыбораБанковскогоСчета.Открыть();


КонецПроцедуры // НачалоВыбораЗначенияБанковскогоСчета()

// Процедура выполняет стандартные действия при начале выбора размещения в формах документов.
//
// Параметры:
//  ФормаДокумента           - форма редактируемого документа;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияСкладаГруппы(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Справочники.ГруппыДоступностиСкладов.Имя, Метаданные.Справочники.ГруппыДоступностиСкладов.Синоним);
	СписокТипов.Добавить(Метаданные.Справочники.Склады.Имя, Метаданные.Справочники.Склады. Синоним);

	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныйЭлемент.Значение = Метаданные.Справочники.ГруппыДоступностиСкладов.Имя Тогда

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
        Если ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
			ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
		КонецЕсли;

	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

		// уберем из выбора НТТ
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НТТ;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравнения.НеРавно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
        Если ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка."+ВыбранныйЭлемент.Значение) Тогда
			ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
		КонецЕсли;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСкладаГруппы()

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ФормаДокумента                    - форма редактируемого документа;
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  Контрагент                        - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента                - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов         - вид договора взаиморасчетов для отбора, значение перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязаетльный,
//                                      ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора (если не задан, то Ложь).
//
Процедура НачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
                                                  ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
                                                  СтруктураДополнительныхПараметров = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	//+++AK obue 20160312 Для возможности вызова с управляемых форм              
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	иначе
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
	//---AK obue

	//// Тип выбираемого значения зависит от договора.
	//Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//	Предупреждение("Не выбран контрагент!");
	//	ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
	//	Возврат;
	//КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда

		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;

	// Еще надо фильтровать по организации, если она заполнена
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ДокументОбъект.Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;

	//// Еще надо фильтровать по валюте документа, если она заполнена
	//Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено
	//   И ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
	//	ФормаВыбора.СправочникСписок.Отбор.ВалютаВзаиморасчетов.Значение                            = ДокументОбъект.ВалютаДокумента;
	//	ФормаВыбора.СправочникСписок.Отбор.ВалютаВзаиморасчетов.Использование                       = Истина;
	//	ФормаВыбора.СправочникСписок.Отбор.ВалютаВзаиморасчетов.ВидСравнения                        = ВидСравнения.Равно;
	//	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаВзаиморасчетов.Доступность = Ложь;
	//КонецЕсли;
	
	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ФормаВыбора.НачальноеЗначениеВыбора = ДоговорКонтрагента;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()


// Процедура выполняет стандартные действия при начале выбора приходного ордера в формах документов.
//
// Параметры:
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  Организация			- организация, по которой необходимо установить отбор
//	ВидОперации 		- вид операции, по которой необходимо установить отбор
Процедура НачалоВыбораПриходногоОрдера(ЭлементФормы, СтандартнаяОбработка, Организация, ВидОперации) Экспорт
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,ЭлементФормы,);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение      = ВидОперации;
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
	КонецЕсли;
	
	// Надо отфильтровать список по организации
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.Отбор.Организация.Использование = Истина;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();
	
КонецПроцедуры //НачалоВыбораПриходногоОрдера


// Вызывается в обработчике события "Начало выбора" при выборе номенклатуры поставщика.
//
Процедура НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, Номенклатура) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.КонтрагентОтбораНоменклатуры = Контрагент;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Номенклатура;
    ФормаВыбора.НачальноеЗначениеВыбора = Номенклатура;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = Элемент.ВыборГруппИЭлементов;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",Номенклатура);
	СтруктураОтбора.Вставить("Контрагент",Контрагент);
	ФормаВыбора.ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущаяСтрока = РегистрыСведений.НоменклатураКонтрагентов.СоздатьКлючЗаписи(СтруктураОтбора);

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура выполняет стандартные действия при начале выбора спецификации в формах документов.
//
// Параметры:
//  Номенклатура - ссылка на справочник, определяет продукцию, которая указана в спецификации;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияСпецификации(Номенклатура, ЭлементФормы, СтандартнаяОбработка, ТолькоАктивные = Истина) Экспорт

	СтандартнаяОбработка    = Ложь;
	ФормаВыбораСпецификации = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора(, ЭлементФормы);

	ФормаВыбораСпецификации.Отбор.СпецификацииИзделийПоНоменклатуре.ВидСравнения  = ВидСравнения.Равно;
	ФормаВыбораСпецификации.Отбор.СпецификацииИзделийПоНоменклатуре.Значение      = Номенклатура;
	ФормаВыбораСпецификации.Отбор.СпецификацииИзделийПоНоменклатуре.Использование = Истина;
	
	Если ТолькоАктивные Тогда
		ФормаВыбораСпецификации.Отбор.Активная.Установить(Истина);
	КонецЕсли;

	ФормаВыбораСпецификации.РежимВыбора                  = Истина;
	ФормаВыбораСпецификации.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;

	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбораСпецификации.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбораСпецификации.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСпецификации()

// Функция формирует таблицу значений со структурой колононк, используемых при установке отборов
//
Функция СоздатьТаблицуДляОтбора() Экспорт
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить( "Имя",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Таб.Колонки.Добавить( "ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	Таб.Колонки.Добавить( "НеИзменять",   Новый ОписаниеТипов("Булево"));
	Таб.Колонки.Добавить( "Значение");
	
	Возврат Таб;
	
КонецФункции // СоздатьТаблицуДляОтбора()

// Функция формирует таблицу значений для установки отбора нематериальных 
// производственных статей затрат.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений с заполненными значениями для отбора 
//
Функция СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат() Экспорт
	
	ТаблицаОтбора = СоздатьТаблицуДляОтбора();
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя = "ВидЗатрат";
	НоваяСтрока.ВидСравнения = ВидСравнения.НеРавно;
	НоваяСтрока.Значение = Перечисления.ВидыЗатрат.Материальные;
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя = "ХарактерЗатрат";
	НоваяСтрока.ВидСравнения = ВидСравнения.Равно;
	НоваяСтрока.Значение = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	
	Возврат ТаблицаОтбора;
	
КонецФункции // СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат()

// Функция формирует таблицу значений для установки отбора нематериальных статей затрат.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений с заполненными значениями для отбора 
//
Функция СформироватьТаблицуОтбораНематериальныхСтатейЗатрат() Экспорт
	
	ТаблицаОтбора = СоздатьТаблицуДляОтбора();
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя = "ВидЗатрат";
	НоваяСтрока.ВидСравнения = ВидСравнения.НеРавно;
	НоваяСтрока.Значение = Перечисления.ВидыЗатрат.Материальные;
	
	Возврат ТаблицаОтбора;
	
КонецФункции // СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат()

// Процедура выполняет стандартные действия при начале выбора статьи затрат в формах.
//
// Параметры:
//	ЗначениеОтбора       - 1) Характер затрат, по которому следует установить отбор.
//						 - 2) Объект типа отбор. Используют поля Имя, Вид сравнения и Значение.
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораСтатьиЗатрат(ЗначениеОтбора, ЭлементФормы, СтандартнаяОбработка, ВидЗатрат = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.СтатьиЗатрат.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.РежимВыбора = Истина;
	Если ТипЗнч(ЗначениеОтбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекОтбор Из ЗначениеОтбора Цикл
			ФормаВыбора.Отбор[ТекОтбор.Имя].ВидСравнения  = ТекОтбор.ВидСравнения;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Значение      = ТекОтбор.Значение;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Использование = Истина;
			Если ТекОтбор.НеИзменять Тогда
				ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ТекОтбор.Имя].Доступность = НЕ ТекОтбор.НеИзменять;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеОтбора = Неопределено Тогда
		// Ничего не делаем
	Иначе // ЗначениеОтбора = Характер затрат
		ФормаВыбора.Отбор.ХарактерЗатрат.Установить(ЗначениеОтбора, Истина);
	КонецЕсли;
	
	Если ВидЗатрат <> Неопределено Тогда
		ФормаВыбора.Отбор.ВидЗатрат.Установить(ВидЗатрат, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСтатьиЗатрат()

// Процедура выполняет стандартные действия при начале выбора Подразделения в формах.
//
// Параметры:
//	ЗначениеОтбора       - 1) ВидПодразделения, по которому следует установить отбор.
//						 - 2) Объект типа отбор. Используют поля Имя, Вид сравнения и Значение.
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораПодразделения(ЗначениеОтбора, ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Подразделения.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.РежимВыбора = Истина;
	Если ТипЗнч(ЗначениеОтбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекОтбор Из ЗначениеОтбора Цикл
			ФормаВыбора.Отбор[ТекОтбор.Имя].ВидСравнения  = ТекОтбор.ВидСравнения;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Значение      = ТекОтбор.Значение;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Использование = Истина;
			Если ТекОтбор.НеИзменять Тогда
				ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ТекОтбор.Имя].Доступность = НЕ ТекОтбор.НеИзменять;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеОтбора = Неопределено Тогда
		// Ничего не делаем
	Иначе // ЗначениеОтбора = Вид подразделения
		ФормаВыбора.Отбор.ВидПодразделения.Установить(ЗначениеОтбора, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораПодразделения()

// Процедура выполняет стандартные действия при начале выбора Подразделения в формах.
//
// Параметры:
//	ЗначениеОтбора       - 1) ВидПодразделения, по которому следует установить отбор.
//						 - 2) Объект типа отбор. Используют поля Имя, Вид сравнения и Значение.
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораПодразделенияОрганизации(ЗначениеОтбора, ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.РежимВыбора = Истина;
	Если ТипЗнч(ЗначениеОтбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекОтбор Из ЗначениеОтбора Цикл
			ФормаВыбора.Отбор[ТекОтбор.Имя].ВидСравнения  = ТекОтбор.ВидСравнения;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Значение      = ТекОтбор.Значение;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Использование = Истина;
			Если ТекОтбор.НеИзменять Тогда
				ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ТекОтбор.Имя].Доступность = НЕ ТекОтбор.НеИзменять;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеОтбора = Неопределено Тогда
		// Ничего не делаем
	Иначе // ЗначениеОтбора = Вид подразделения
		ФормаВыбора.Отбор.ВидПодразделения.Установить(ЗначениеОтбора, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементФормы.ВыборПоВладельцу) Тогда
		ФормаВыбора.ПараметрВыборПоВладельцу = ЭлементФормы.ВыборПоВладельцу;
		ФормаВыбора.ПараметрОтборПоВладельцу = ЭлементФормы.ВыборПоВладельцу;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораПодразделенияОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Активизирует первый не заполненный реквизит в форме
// Вызывается при открытии формы
//
// Параметры:
//  Объект				- Объект 
//  ФормаДокумента		- Форма объекта
//  СтруктураРеквизитов	- Реквизиты которые необходимо актив
//  ТабличнаяЧасть		- Имя ТЧ на каторую будет установлен фокус, если все обязательные реквизиты заполнены
//  СтраницыСТабЧастями	- структура типа ("имя страницы",	"имя таблицы размещенной на этой странице"),
//						т.е. в параметр "ТабличнаяЧасть" можно передать имя страницы на каторой размещена ТЧ,
//						а структура "СтраницыСТабЧастями" необходима для поиска ТЧ по имени страницы.
//
Функция АктивизироватьРеквизитВФорме(Объект, ФормаОбъекта, СтруктураРеквизитов = Неопределено, ТабличнаяЧасть = неопределено, СтраницыСТабЧастями = неопределено) Экспорт

	Если СтруктураРеквизитов = Неопределено 
		ИЛИ ТипЗнч(СтруктураРеквизитов) <> Тип("Структура") Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Дата");
		СтруктураРеквизитов.Вставить("Организация");
		СтруктураРеквизитов.Вставить("Касса");
		СтруктураРеквизитов.Вставить("СчетОрганизации");
		СтруктураРеквизитов.Вставить("БанковскийСчет");
		СтруктураРеквизитов.Вставить("Склад");
		СтруктураРеквизитов.Вставить("СкладОрдер");
		СтруктураРеквизитов.Вставить("Контрагент");
		СтруктураРеквизитов.Вставить("Получатель");
		СтруктураРеквизитов.Вставить("Плательщик");
		СтруктураРеквизитов.Вставить("ФизЛицо");
		СтруктураРеквизитов.Вставить("ПериодРегистрации");
		СтруктураРеквизитов.Вставить("Сотрудник");
		СтруктураРеквизитов.Вставить("Исполнитель");
		СтруктураРеквизитов.Вставить("КурсОбучения");
		СтруктураРеквизитов.Вставить("ДатаЗавершенияКурса");
		СтруктураРеквизитов.Вставить("Мероприятие");
	КонецЕсли;
	
	Для каждого Элемент Из СтруктураРеквизитов Цикл
		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаОбъекта.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления <> Неопределено
			И ЭлементУправления.Видимость
			И ЭлементУправления.Доступность 
			И НЕ ЗначениеЗаполнено(ЭлементУправления.Значение) Тогда 
			
			// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл
			ФормаОбъекта.ТекущийЭлемент = ЭлементУправления;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Если есть ТЧ то необходимо фокус передать ей
	Если ТабличнаяЧасть <> Неопределено Тогда
		ЭлементУправления = ФормаОбъекта.ЭлементыФормы.Найти(ТабличнаяЧасть.Имя);
		Если ТипЗнч(ЭлементУправления) = Тип("ТабличноеПоле") Тогда
			ФормаОбъекта.ТекущийЭлемент = ЭлементУправления;
			Возврат Истина;
		ИначеЕсли СтраницыСТабЧастями <> неопределено Тогда
			ЭлементУправления = ФормаОбъекта.ЭлементыФормы.Найти(СтраницыСТабЧастями.НайтиПоЗначению(ТабличнаяЧасть.Имя));
			Если ТипЗнч(ЭлементУправления) = Тип("ТабличноеПоле") Тогда
				ФормаОбъекта.ТекущийЭлемент = ЭлементУправления;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если все поля заполнены но нет ТЧ то передадим фокус панели, в результате
	// визуально будет казаться что фокус не установлен ни на одном ЭФ.
	// Хотелось бы фокус установить на кнопке "Закрыть", но технически не предоставляется такой возможности.
	ЭлементУправления = ФормаОбъекта.ЭлементыФормы.Найти("ОсновныеДействияФормы");
	Если ЭлементУправления <> Неопределено Тогда
		ФормаОбъекта.ТекущийЭлемент = ЭлементУправления;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции// АктивизироватьРеквизитВФорме()

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.Ссылка.Пустая() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Устанавливает текст надписи заголовка суммы взаиморасчетов на форме документа
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьНадписьСуммыВзаиморасчетов(ДокументОбъект, ФормаДокумента) Экспорт

	ВалютаВзаиморасчетовПоДоговору = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
	Иначе	
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
	КонецЕсли;	

КонецПроцедуры // УстановитьНадписьСуммыВзаиморасчетов()

// Устанавливает видимость переданных колонок в табличной части документа.
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых надор установить,
//  ПризнакВидимости - булево, признак видимости.
//
Процедура УстановитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ПризнакВидимости) Экспорт

	Если ПризнакВидимости Тогда
		Для Каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Истина;
		КонецЦикла;
	Иначе
		Для Каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Ложь;
			КолонкиТабПоля[ИмяКолонки].Видимость         = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонок()

// Устанавлеивает видимость колонки "Склад" в табличной части формы документа 
// в зависимости от настройки использования складов в табличных частях документов.
//
// Параметры:
//  КолонкиТовары            – коллекция колонок табличного поля "Товары",
//  КолонкиВозвратнаяТара    – коллекция колонок табличного поля "ВозвратнаяТара", 
//                             необязательный, если не передан, то видимость колонки не устанавливается,
//  ЭУСклад                  - ЭУ формы, в который вводится склад в шапке,
//  ИмяКолонкиСклад          - Строка, имя колонки склада, в которые вводится склад в ТЧ (имена должны быть одинаковыми в обоих ТЧ),
//  ИспользоватьКолонкуСклад - булево, определяет указываеются ли склады в табличной части документа или они указываются только в шапке.
//
Процедура УстановитьВидимостьОбязательностьСклада(КолонкиТовары, КолонкиВозвратнаяТара = Неопределено, ЭУСклад, 
                                                  ИмяКолонкиСклад = "Склад", ИспользоватьКолонкуСклад, 
                                                  КолонкиОборудование = Неопределено) Экспорт

	ИспользоватьВозвратнуюТару = Константы.ИспользоватьВозвратнуюТару.Получить();

	// Установим видимость колонки
	СтруктураКолонок = Новый Структура("Склад");

	УстановитьВидимостьКолонок(КолонкиТовары, СтруктураКолонок, ИспользоватьКолонкуСклад);
	Если КолонкиОборудование <> Неопределено Тогда
		УстановитьВидимостьКолонок(КолонкиОборудование, СтруктураКолонок, ИспользоватьКолонкуСклад);
	КонецЕсли;	

	Если ИспользоватьВозвратнуюТару И КолонкиВозвратнаяТара <> Неопределено Тогда
		УстановитьВидимостьКолонок(КолонкиВозвратнаяТара, СтруктураКолонок, ИспользоватьКолонкуСклад);
	КонецЕсли;

	//Установим автоотметки незаполненного.
	Если ИспользоватьКолонкуСклад Тогда
		КолонкиТовары[ИмяКолонкиСклад].АвтоотметкаНеЗаполненного = Истина;
		Если ИспользоватьВозвратнуюТару И КолонкиВозвратнаяТара <> Неопределено Тогда
			КолонкиВозвратнаяТара[ИмяКолонкиСклад].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;
		Если КолонкиОборудование <> Неопределено Тогда
			КолонкиОборудование[ИмяКолонкиСклад].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;		
		ЭУСклад.АвтоотметкаНеЗаполненного   = Ложь;
		ЭУСклад.ОтметкаНеЗаполненного       = Ложь;
	Иначе
		ЭУСклад.АвтоотметкаНеЗаполненного = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонкиСклад()

// Процедура устанавливает отбор по основной организации в указанно форме
//
Процедура УстановитьОтборПоОрганизации(Форма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Организация") Экспорт

	// В том случае если учет ведется по одной организации необходимо установить мягкий отбор.
	// т.е. отбор, с возможностью его изменения.
	УчетПоВсемОрганизациям = НЕ ЗначениеЗаполнено(ОсновнаяОрганизация);

	Если НЕ УчетПоВсемОрганизациям Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			// Проверим - Если это связанный регитср сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке ПЕрейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = ОсновнаяОрганизация;

			Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;

		КонецЕсли;

		Если СкрыватьКолонку Тогда

			Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоОрганизации()

// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью
//
// Параметры:
//	Объект				- документ, форма которого открывается;
//	Панель				- панель формы документа, страницы которой следует переключить;
//	СтраницыСТабчастями	- список значений, каждый элемент которого представляет
//							собой имя страницы, а его представление - имя табличной части;
//	СтраницаПоУмолчанию	- имя страницы, которую следует сделать текущей, если ни на одной
//							из перечисленных страниц нет заполненной табличной части.
//									
Процедура УстановкаТекущейСтраницы(Объект, Панель, СтраницыСТабЧастями, СтраницаПоУмолчанию = Неопределено) Экспорт
	
	ТекущаяСтраницаНеУстановлена = Истина;
	
	Для Каждого ЭлементСписка из СтраницыСТабЧастями Цикл
		ИмяСтраницы = ЭлементСписка.Значение;
		ИмяТаблЧасти = ЭлементСписка.Представление;
		Страница = Панель.Страницы[ИмяСтраницы];
		
		Если Страница.Видимость Тогда
			Если Объект[ИмяТаблЧасти].Количество() > 0 Тогда 
				Панель.ТекущаяСтраница = Страница;
				ТекущаяСтраницаНеУстановлена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтраницаНеУстановлена Тогда
		Если СтраницаПоУмолчанию = Неопределено Тогда
			СтраницаПоУмолчанию = Панель.Страницы[СтраницыСТабЧастями[0].Значение].Имя;
		КонецЕсли;
		
		Панель.ТекущаяСтраница = Панель.Страницы[СтраницаПоУмолчанию];
	КонецЕсли;
	
КонецПроцедуры // УстановкаТекущейСтраницы()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(НачальнаяДатаДокумента) - НачалоДня(ДокументОбъект.Дата);

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()

// Процедура проверяет соответсвие ИНН требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  ИНН  - ИНН Организации
//  ПолеВвода  - поле ввода в котором вводится ИНН
//  ЮрФИзЛицо - значение перечисления ЮрФИзЛицо
//
Процедура ПроверитьИННОформитьПолеВвода(ИНН, ПолеВвода, ЮрФИзЛицо) Экспорт
	
	Если ЗначениеЗаполнено(ИНН) и Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ИНН, ЮрФИзЛицо) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в ИНН";
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьИННОформитьПолеВвода()

// Процедура проверяет соответсвие ОГРН требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  ОГРН  - ОГРН Организации
//  ЮрФизЛицо - вид юлица
//  ПолеВвода  - поле ввода в котором вводится ИНН
//
Процедура ПроверитьОГРНОформитьПолеВвода(ОГРН, ЮрФизЛицо, ПолеВвода) Экспорт
	
	ТекстСообщенияОшибки = "";
	Если ЗначениеЗаполнено(ОГРН) и Не ОбщегоНазначенияПереопределяемый.ОГРНСоответствуетТребованиям(ОГРН, ЮрФизЛицо, ТекстСообщенияОшибки) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = ТекстСообщенияОшибки;
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОГРНОформитьПолеВвода()

// Процедура проверяет соответсвие КПП требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  КПП  - КПП Организации
//  ЮрФизЛицо - вид юлица
//  ПолеВвода  - поле ввода в котором вводится ИНН
//
Процедура ПроверитьКППОрганизацииОформитьПолеВвода(КПП, ЮрФизЛицо, ПолеВвода) Экспорт
	
	ТекстСообщенияОшибки = "";
	Если ЗначениеЗаполнено(КПП) и Не ОбщегоНазначенияПереопределяемый.КППОрганизацииСоответствуетТребованиям(КПП, ТекстСообщенияОшибки) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = ТекстСообщенияОшибки;
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКППОрганизацииОформитьПолеВвода()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "(", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, ")", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

// Формирует текст о долге контрагента для вывода его в форме документа
//
// Параметры: 
//  ДоговорКонтрагента - ссылка на элемент справочника, определяет договор контрагента
//  Долг                  - число, сумма долга.
//
// Возвращаемое значение:
//  Строка, сформированный текст про долг контрагента.
//
Функция ПолучитьТекстДолга(ДоговорКонтрагента, Знач Долг)

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат "Введена не вся информация для расчета долга.";
	КонецЕсли;

	ТекстПодписи = ?(ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом,
	               "По договору","По сделке");

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ТекстПодписи = ТекстПодписи + " """ + Нрег(ДоговорКонтрагента.ВидДоговора) + """";
	Иначе
		ТекстПодписи = ТекстПодписи + " " + Нрег(ДоговорКонтрагента.ВидДоговора);
	КонецЕсли;

	Если Долг = Неопределено Тогда
		ТекстПодписи = ТекстПодписи + " долг не рассчитан";

	ИначеЕсли Долг = 0 Тогда
		ТекстПодписи = ТекстПодписи + " нет долга";

	Иначе
		Если Долг > 0 Тогда
			ТекстПодписи = ТекстПодписи + " долг контрагента";
		Иначе
			ТекстПодписи = ТекстПодписи + " долг компании";
			Долг = (-1) * Долг;
		КонецЕсли;

		ТекстПодписи = ТекстПодписи + " " +
		               ОбщегоНазначения.ФорматСумм(Долг, ДоговорКонтрагента.ВалютаВзаиморасчетов);

	КонецЕсли;

	Возврат ТекстПодписи;

КонецФункции // ПолучитьТекстДолга()

//Функция возвращает массив недоступных видов операций
Функция ПолучитьМассивНедоступныхВидовОпераций()
	МассивНедоступныхВидовОпераций = новый Массив;
	МетаданныеПеречисления = Метаданные.Перечисления;
	
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийЗаказПокупателя.ЗначенияПеречисления.Переработка);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийЗаказПоставщику.ЗначенияПеречисления.Переработка);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийВозвратТоваров.ЗначенияПеречисления.ОтЗаказчика);
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийВозвратТоваров.ЗначенияПеречисления.ИзПереработки);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийВозвратТоваровПоставщику.ЗначенияПеречисления.ИзПереработки);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийКомплектацияНоменклатуры.ЗначенияПеречисления.ВыпускПродукции);
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийКомплектацияНоменклатуры.ЗначенияПеречисления.ПоступлениеОтПереработчика);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийПоступлениеТоваровУслуг.ЗначенияПеречисления.ВПереработку);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийПриходныйОрдер.ЗначенияПеречисления.ИзПереработки);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийРасходныйОрдер.ЗначенияПеречисления.ВПереработку);
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийРасходныйОрдер.ЗначенияПеречисления.ИзПереработки);
	//
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийПередачаТоваров.ЗначенияПеречисления.ИзПереработки);
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийПередачаТоваров.ЗначенияПеречисления.ВПереработкуБрак);
	//МассивНедоступныхВидовОпераций.Добавить(МетаданныеПеречисления.ВидыОперацийПередачаТоваров.ЗначенияПеречисления.ВПереработку);

	Возврат МассивНедоступныхВидовОпераций;
КонецФункции

// Процедура удаляет кнопку "Права" из командной панели формы
//
// Параметры
//  Кнопки  – <КнопкиКоманднойПанели> – <описание параметра>
//
Процедура УдалитьКнопкуПрава(Кнопки) Экспорт

	Если Кнопки.Найти("Права") <> Неопределено Тогда
		Если НЕ ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей 
			ИЛИ НЕ УправлениеДопПравамиПользователей.ЕстьПравоАдминистрированияПользователей() Тогда
			
			Кнопки.Удалить(Кнопки.Права);
			Кнопки.Удалить(Кнопки.РазделительПрава);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры // УдалитьКнопкуПрава()

//настройка подменю Клиент-Банк
Процедура УстановкаПодменюКлиентБанк(Кнопка, Объект) Экспорт

	Если Объект.РеквизитыКонтрагента.Количество() = 0 Тогда
		Кнопка.Доступность =Ложь;
	Иначе
		Кнопка.Доступность =Истина;
	КонецЕсли; 

КонецПроцедуры // УстановкаПодменюКлиентБанк()

// Возвращает массив документов из оформления строк табличного поля,
// если видна хотя бы одна из колонок
Функция ПолучитьМассивДокументов(ОформленияСтрок, КоллекцияКолонокТабличногоПоля, СтруктураКолонок, ИмяРеквизита) Экспорт

	МассивДокументов = Новый Массив;
	
	ЗаполнитьМассив = Ложь;
	Для каждого Свойство Из СтруктураКолонок Цикл
		Если КоллекцияКолонокТабличногоПоля[Свойство.Ключ].Видимость Тогда
			ЗаполнитьМассив = Истина;
			Прервать
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ЗаполнитьМассив Тогда
		Возврат МассивДокументов;
	КонецЕсли; 
	
	Для каждого Строка Из ОформленияСтрок Цикл
		ДанныеСтроки = Строка.ДанныеСтроки;
		Если НЕ ДанныеСтроки[ИмяРеквизита].Пустая() Тогда
			МассивДокументов.Добавить(ДанныеСтроки[ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивДокументов;
	
КонецФункции // ПолучитьМассивДокументов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ


// Процедура выполняет запись и проведение документа
//
// Параметры
//  <форма>         – <форма>  – <форма документа которую необходимо записать>
//  <НеПроведен>    - <Булево> - ссылочный параметр, признак успешного проведения текущей процедурой документа
//  <Предупреждать> - <Булево> - выводить предупреждение в случае неудачного проведения документа
//
Процедура ПровестиДокументВФормеОперативно(форма, НеПроведен = Ложь, Предупреждать = Истина) Экспорт

	РежимДокумента = форма.ИспользоватьРежимПроведения;
	форма.ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Оперативный;
	Попытка
		форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	Исключение
		НеПроведен = Истина;
		Если Предупреждать Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
	КонецПопытки;
	форма.ИспользоватьРежимПроведения = РежимДокумента;

КонецПроцедуры // ПровестиДокументВФормеОперативно()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ) Экспорт
	
	Результат = Ложь;
	
	Если Документ.Модифицированность() Тогда
		
		Проведен = ?(Документ.Проведен, " и провести","");
		
		Ответ = ЗадатьВопрос("Документ изменен. Для печати его необходимо записать"+ Проведен +"." + Символы.ПС + "Записать" + Проведен + "?", РежимДиалогаВопрос.ОКОтмена, КодВозвратаДиалога.Отмена, "Документ изменен");
		
		Если Ответ = КодВозвратаДиалога.ОК Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			
			Если Документ.Проведен Тогда
				
				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());
				
				Попытка
					
					Если ДатаДока >= ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;
					
				Исключение
					
					ВывестиПредупреждение(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
					Возврат Результат = Истина;
					
				КонецПопытки;
				
			Иначе
				Документ.Записать();
			КонецЕсли;
			
			Результат = Истина;
			
		КонецЕсли;
		
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа / справочника перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Объект - (ДокументОбъект.*, СправочникОбъект.*) - проверяемый документ / справочник
//  Форма    - форма проверяемого документа / справочника
//
Функция ПроверитьМодифицированностьВФорме(Объект, Форма) Экспорт
	
	Результат = Ложь;
	
	Если Форма.Модифицированность Тогда
		
		Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = ЗадатьВопрос("Документ изменен. Для печати его необходимо записать "+ СтрПроведен +".
		|Записать" + СтрПроведен + "?",
		РежимДиалогаВопрос.ОКОтмена, 
		КодВозвратаДиалога.Отмена,
		"Документ изменен");
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			Если Проведен Тогда
				
				Попытка
					
					Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
					
				Исключение
					
					ВывестиПредупреждение("Операция не выполнена!");
					Возврат Результат = Истина;
					
				КонецПопытки;
				
				Если Отказ Тогда
					Возврат Результат = Истина;
				КонецЕсли;
			Иначе
				Отказ = Не Форма.ЗаписатьВФорме();
				Если Отказ Тогда
					Возврат Результат = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Результат = Истина;
			
		КонецЕсли;
		
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа перед заполнением на основании
// 
// Параметры
//  Документ - проверяемый документ основания
//
Функция ПроверитьМодифицированностьДокументаОснования(Документ) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Документ) Тогда

		ФормаДокумента = Документ.ПолучитьФорму();

		Если ФормаДокумента.Модифицированность() Тогда
			ОчиститьСообщения();
			ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Документ) + " был изменен! Сначала следует записать документ!");
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированностьДокументаОснования()

// Процедура вызывается для вывода сообщений пользователю
//
// Параметры:
//  СсылкаСправочника - ссылка на справочник, объект которого проверяется;
//  ИмяРеквизита - строка, имя реквизита, который не заполнен.
//
Процедура СообщитьПользователюНезаполненРеквизит(СсылкаСправочника, ИмяРеквизита) Экспорт

	ТекстСообщения = "Перед записью в элементе справочника """ + СсылкаСправочника.Метаданные().Синоним + """ необходимо заполнить """ + ИмяРеквизита + """!";

	Сообщить(ТекстСообщения, СтатусСообщения.Важное);

КонецПроцедуры // СообщитьПользователюНезаполненРеквизит()

// Записывает документ спросив об этом у пользователя
//
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
//
Функция ЗаписатьДокументПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстВопроса) Экспорт

	Если Объект.Модифицированность() Тогда
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 	
	
	Возврат Истина;

КонецФункции // ЗаписатьДокументПередВыполнениемДействия()

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстДействие  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстДействие = НеОпределено, ТекстВопрос1 = НеОпределено, ТекстВопрос2 = НеОпределено) Экспорт

	Если Объект.Проведен Тогда
		
		Если ТекстВопрос1 = Неопределено Тогда
			Если Вопрос("Автоматически "+ТекстДействие+" документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Вопрос(ТекстВопрос1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли; 
		
		Попытка
			Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Возврат Ложь;
		КонецПопытки;
				
	ИначеЕсли Объект.Модифицированность() Тогда
		
		Если ТекстВопрос2 = Неопределено Тогда
			Если Вопрос("Автоматически "+ТекстДействие+" документ можно только после его записи. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Вопрос(ТекстВопрос2, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ЗаписатьДокументОтменивПроведение()

// Записывает документ в режиме отмены проведения, проверяет необходимость очистки табличных частей, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса1 и ТекстВопроса2  – Тип – Строка
//                 текст вопроса
//  ЗаписыватьДокумент - параметр определяет, производить запись документа или нет, с параметром Ложь функция
//						 вызывается при заполнении списком, т.е. запись документа необходимо произвести
//						 только если пользователь не откажется от заполнения списком в обработчике ОбработкаВыбора формы
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(Объект, ФормаОбъекта, ТабличныеЧасти, ТекстВопроса1, ТекстВопроса2, ЗаписыватьДокумент = Истина) Экспорт
	
	Если Объект.Проведен Тогда
		
		//документ проведен, необходимо записать документ отменив проведение и очистить табличные части
		
		Если Вопрос(ТекстВопроса1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если ЗаписыватьДокумент Тогда
			Попытка
				ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		// документ не проведен, необходимо записать документ и очистиить табличные части, вопросы
		// пользователю задаем только по поводу очистки табличных частей
		НадоОчищатьТабличныеЧасти = Ложь;
		Если НЕ ТабличныеЧасти = Неопределено Тогда
			//проверим заполнение табличных частей			
			Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				НадоОчищатьТабличныеЧасти = ТабличнаяЧасть.Количество() > 0;
				Если НадоОчищатьТабличныеЧасти Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НадоОчищатьТабличныеЧасти Тогда
				
				Ответ = Вопрос(ТекстВопроса2, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
				
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаписыватьДокумент И Объект.Модифицированность() Тогда //запишем документ
			
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.НазначениеСвойств      = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ДокументОбъект.Ссылка);
	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьКатегорииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.ОбъектОтбораКатегорий = ФормаДокумента.Ссылка;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры // ОткрытьКатегорииДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка .с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;
	
	СохранятьСписокИстории = Ложь;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	ТипСписокЗначений = Тип("СписокЗначений");
	ТипЗначенияЭлементов = Неопределено;

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		
		КолвоЭлементовКоллекции = СписокИстории.Количество(); 
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		     ЭлементСписка = СписокИстории[КолвоЭлементовКоллекции - ОбратныйИндекс];
			 Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
				СохранятьСписокИстории = Истина;
				Продолжить;
			КонецЕсли;
			ЗначениеЭлементаСписка = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
			Если ТипЗнч(ЗначениеЭлементаСписка) = ТипСписокЗначений Тогда												
				ЗначениеЭлементаСписка = ЗначениеЭлементаСписка[0].Значение;
				Если ТипЗнч(ЗначениеЭлементаСписка) = ТипСписокЗначений Тогда
					СписокИстории.Удалить(ЭлементСписка);
					СохранятьСписокИстории = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭлементСписка.Значение = ЗначениеЭлементаСписка;
			
			Если ТипЗначенияЭлементов = Неопределено Тогда
				// Тип значения определяет первый элемент списка
				ТипЗначенияЭлементов = ТипЗнч(ЭлементСписка.Значение);
			КонецЕсли;			
			
		КонецЦикла;
		
		Если ТипЗначенияЭлементов <> Тип("Строка") Тогда
			ОпределитьПредставлениеЭлементовСписка(ТипЗначенияЭлементов, СписокИстории, СохранятьСписокИстории);
		КонецЕсли;
		
		//Если СохранятьСписокИстории Тогда
		//	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));
		//КонецЕсли;			
			
		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()

// Процедура по для переданной строке пути и строковому представлению //
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
//
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	НайденныйЭлемент = СписокИстории.НайтиПоЗначению(Значение);
	Пока НайденныйЭлемент <> Неопределено Цикл
		 СписокИстории.Удалить(НайденныйЭлемент);
		 НайденныйЭлемент = СписокИстории.НайтиПоЗначению(Значение);
	КонецЦикла;

	СписокИстории.Вставить(0, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(5);
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если КолонкиТабПоля.Код.Видимость Тогда
		Если Номенклатура <> Неопределено Тогда
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
		Иначе
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

	Если КолонкиТабПоля.Артикул.Видимость Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
		Иначе
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()

// Процедура добавляет информацию о сумме без скидок в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля      - коллекция колонок табличного поля,
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля,
//  Цена                - число, цена номенклатуры в строке,
//  Количество          - число, количество номенклатуры в строке.
//
Процедура ПоказатьСуммуБезСкидок(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Цена, Количество) Экспорт

	Если КолонкиТабПоля.СуммаБезСкидок.Видимость Тогда

		Сумма = ОбщегоНазначения.ФорматСумм(Цена * Количество);
		ЯчейкиСтрокиТабПоля.СуммаБезСкидок.Выравнивание = ГоризонтальноеПоложение.Право;
		ЯчейкиСтрокиТабПоля.СуммаБезСкидок.УстановитьТекст(Сумма);

	КонецЕсли;

КонецПроцедуры // ПоказатьСуммуБезСкидок()

// Процедура добавляет информацию о коэффициенте мест в ячеки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  ЕдиницаИзмерения - СправочникСсылка.ЕдиницаИзмерения, единица измерения по которой надо коэффициент мест
//
Процедура ПоказатьКоэффициентМест(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, ЕдиницаИзмерения) Экспорт

	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Истина;
	Иначе
		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Ложь;

		Если КолонкиТабПоля.КоэффициентМест.Видимость Тогда
			Коэффициент = ЕдиницаИзмерения.Коэффициент;

			Если Коэффициент > 0 Тогда
				ЯчейкиСтрокиТабПоля.КоэффициентМест.УстановитьТекст(Формат(Коэффициент, "ЧЦ=10; ЧДЦ=3"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКоэффициентМест()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Печатает составы по указанной номенклатуре.
//
// Параметры:
//  МассивНоменклатуры - массив, содержащий номенклатуру, для которой печатается состав
//
// Возвращаемое значение:
//  Сформированный табличный документ.
//
Функция НапечататьКомплектующие(МассивНоменклатуры) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура                  КАК Номенклатура,
	|	ХарактеристикаНоменклатуры    КАК ХарактеристикаНоменклатуры,
	|	Комплектующая                 КАК Комплектующая,
	|	ХарактеристикаКомплектующей   КАК ХарактеристикаКомплектующей,
	|	Количество                    КАК Количество,
	|	ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ДоляСтоимости                 КАК ДоляСтоимости
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|
	|ГДЕ
	|	Номенклатура В ИЕРАРХИИ (&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьОбщийМакет("СписокКомплектующих");

	ТабДокумент = Новый ТабличныйДокумент;
	
	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаНоменклатуры") Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ОбластьМакета.Параметры.Заполнить(Выборка);
			НомерСтроки = 1;
			Если Выборка.Номенклатура.Набор Тогда
				ОбластьМакета.Параметры.ТекстЗаголовка = "Состав набора """+СокрЛП(Выборка.Номенклатура)+"""";
			Иначе
				ОбластьМакета.Параметры.ТекстЗаголовка = "Состав комплекта """+СокрЛП(Выборка.Номенклатура)+"""";
				Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					ОбластьМакета.Параметры.ТекстЗаголовка = ОбластьМакета.Параметры.ТекстЗаголовка + " ("+СокрЛП(Выборка.ХарактеристикаНоменклатуры)+")";
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("Строка"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции // НапечататьКомплектующие()

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт
	
	Форма = Отчеты.ДвиженияДокумента.ПолучитьФорму(,,Новый УникальныйИдентификатор);
	Форма.Открыть();
	Форма.Документ = ДокументСсылка;
	Форма.СформироватьИВывестиОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()


// Процедура открывает форму выбора документа и устанавливает отбор
//	Параметры:
//		ФормаДокумента  - форма редактируемого документа;
//		ЭлементФормы    - элемент формы документа, который надо заполнить;
//		СписокТипов     - список типов документов (необязательный);
//		СтруктураОтбора - структура отбора, который надо установить при открытии формы.
//		                  либо таблица значений с параметрами отбора. Структура таблицы значений формируется функцией СоздатьТаблицуДляОтбора()
//
Процедура ОткрытьФормуДокументаСОтбором(ФормаДокумента, ЭлементФормы, СписокТипов = Неопределено, СтруктураОтбора) Экспорт

	Если СписокТипов = Неопределено Тогда
		
		ИмяДокумента = ЭлементФормы.Значение.Метаданные().Имя; // считаем, что в этом случае составного типа не будет.
	Иначе

		// Пользователь выбирает тип документа
		Если СписокТипов.Количество() = 1 Тогда
			ВыбранныйЭлемент = СписокТипов[0];
		Иначе
			ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);
		КонецЕсли;

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ИмяДокумента = ВыбранныйЭлемент.Значение;

	КонецЕсли;

	ФормаВыбора = Документы[ИмяДокумента].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов.
	Если ТипЗнч(СтруктураОтбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекОтбор Из СтруктураОтбора Цикл
			ФормаВыбора.Отбор[ТекОтбор.Имя].ВидСравнения  = ТекОтбор.ВидСравнения;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Значение      = ТекОтбор.Значение;
			ФормаВыбора.Отбор[ТекОтбор.Имя].Использование = Истина;
			Если ТекОтбор.НеИзменять Тогда
				ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ТекОтбор.Имя].Доступность = НЕ ТекОтбор.НеИзменять;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
			КонецЕсли;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Сделка            = ЭлементФормы.Значение;
	ЕстьДоговор       = (ФормаДокумента.ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено);
	ЕстьДоговорСделки = ?(НЕ ЗначениеЗаполнено(Сделка),          Ложь, Сделка.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено);
	Если ЕстьДоговор И ЕстьДоговорСделки Тогда
		Если Сделка.ДоговорКонтрагента = ФормаДокумента.ДокументОбъект.ДоговорКонтрагента Тогда
			ФормаВыбора.НачальноеЗначениеВыбора = Сделка;
		КонецЕсли;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // ОткрытьФормуДокументаСОтбором()

// Процедура устанавливает видимость колонок суммы таб. части
//
Процедура УстановитьПараметрыКолонокСуммы( ФормаТабЧасть, УпрУчет, БухУчет) Экспорт
	
	ФормаТабЧасть.Колонки.Сумма    .Видимость = УпрУчет;
	ФормаТабЧасть.Колонки.СуммаРегл.Видимость = БухУчет;
	ФормаТабЧасть.Колонки.Сумма    .ИзменятьВидимость = Ложь;
	ФормаТабЧасть.Колонки.СуммаРегл.ИзменятьВидимость = Ложь;
	
	Если УпрУчет Тогда
		ФормаТабЧасть.Колонки.Цена.ТекстШапки = "Цена";
	ИначеЕсли БухУчет Тогда
		ФормаТабЧасть.Колонки.Цена.ТекстШапки = "Цена (регл.)";
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыКолонокСуммы()

// Процедура выводить форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры

// Вызывается в обработчике события "Начало выбора" при выборе счета.
// используется для фильтрации по признаку забалансовый
//
Процедура ВыборСчета(Элемент, СтандартнаяОбработка, Забалансовый) Экспорт

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Забалансовый", Забалансовый);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Финансовый.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Финансовый КАК Финансовый
	|ГДЕ
	|	Финансовый.Забалансовый = &Забалансовый";
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Финансовый.ПолучитьФормуВыбора("ФормаВыбора", Элемент,);

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

Конецпроцедуры // ВыборСчета

// Процедура заполняет список счетами с субконто "Контрагент" и "Договор"
//
Процедура ЗаполнитьСписокСчетамиССубконтоКонтрагентДоговор(СписокСчетов, ИмяПланаСчетов)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПланСчетовЗапроса.Ссылка
	               |ИЗ
	               |	ПланСчетов." + ИмяПланаСчетов + " КАК ПланСчетовЗапроса
	               |ГДЕ
	               |	&СубконтоКонтрагент В
	               |			(ВЫБРАТЬ
	               |				ПланСчетовВидыСубконто.ВидСубконто
	               |			ИЗ
	               |				ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ПланСчетовВидыСубконто
	               |			ГДЕ
	               |				ПланСчетовВидыСубконто.Ссылка = ПланСчетовЗапроса.Ссылка)
				   |И
	               |	&СубконтоДоговор В
	               |			(ВЫБРАТЬ
	               |				ПланСчетовВидыСубконто.ВидСубконто
	               |			ИЗ
	               |				ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ПланСчетовВидыСубконто
	               |			ГДЕ
	               |				ПланСчетовВидыСубконто.Ссылка = ПланСчетовЗапроса.Ссылка)";
	 
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СубконтоКонтрагент", ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	Запрос.УстановитьПараметр("СубконтоДоговор", ПланыВидовХарактеристик.ВидыСубконто.Договоры);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСчетов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСписокСчетамиССубконтоКонтрагентДоговор
 
Функция ПолучитьСписокСчетовПоНазначениюСчета(НазначениеСчета, Элемент, ИмяПланаСчетов)
	
	ПланСчетовМенеджер = ПланыСчетов[ИмяПланаСчетов];
	
	СписокСчетов = Новый СписокЗначений;
	
	// СчетаУчетаНоменклатуры
	Если НазначениеСчета = "СчетУчета" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.Материалы);
		СписокСчетов.Добавить(ПланСчетовМенеджер.Товары);
		СписокСчетов.Добавить(ПланСчетовМенеджер.ГотоваяПродукция);
		СписокСчетов.Добавить(ПланСчетовМенеджер.ПриобретениеОбъектовОсновныхСредств);
		СписокСчетов.Добавить(ПланСчетовМенеджер.Полуфабрикаты);
		СписокСчетов.Добавить(ПланСчетовМенеджер.ОборудованиеКУстановке);
		
	ИначеЕсли НазначениеСчета = "СчетУчетаЗабалансовый" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.ТоварыНаСкладе);
		Если ИмяПланаСчетов = "Финансовый" Тогда
			СписокСчетов.Добавить(ПланСчетовМенеджер.ТМЦпринятыеНаОтветственноеХранение);
			СписокСчетов.Добавить(ПланСчетовМенеджер.МатериалыПринятыеВПереработку);
		КонецЕсли; 
		
	ИначеЕсли НазначениеСчета = "СчетУчетаПередачи" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.ТоварыОтгруженные);
		СписокСчетов.Добавить(ПланСчетовМенеджер.МатериалыПереданныеВПереработку);
		
	ИначеЕсли НазначениеСчета = "СчетУчетаПередачиЗабалансовый" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.ТоварыПереданныеНаКомиссию);
		Если ИмяПланаСчетов = "Финансовый" Тогда
			СписокСчетов.Добавить(ПланСчетовМенеджер.МатериалыПринятыеВПереработкуВПроизводстве);
		КонецЕсли; 
		
	ИначеЕсли НазначениеСчета = "СчетДоходовОтРеализации" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.Выручка);
		СписокСчетов.Добавить(ПланСчетовМенеджер.ПрочиеДоходы);
		
	ИначеЕсли НазначениеСчета = "СчетРасходов" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.СебестоимостьПродаж);
		СписокСчетов.Добавить(ПланСчетовМенеджер.ПрочиеРасходы);
		
	ИначеЕсли НазначениеСчета = "СчетУчетаВРознице" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.ТоварыВРозничнойТорговле);
		
	ИначеЕсли НазначениеСчета = "СчетДоходовВРознице" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.Выручка);
		СписокСчетов.Добавить(ПланСчетовМенеджер.ПрочиеДоходы);
		
	ИначеЕсли НазначениеСчета = "СчетРасходовВРознице" Тогда
		
		Если ИмяПланаСчетов = "Финансовый" Тогда
			СписокСчетов.Добавить(ПланСчетовМенеджер.СебестоимостьПродаж);
		КонецЕсли; 
		
	ИначеЕсли НазначениеСчета = "СчетУчетаНДС" Тогда
		
		Если ИмяПланаСчетов = "Финансовый" Тогда
			СписокСчетов.Добавить(ПланСчетовМенеджер.НДСпоПриобретеннымЦенностям);
		КонецЕсли; 
		
	ИначеЕсли НазначениеСчета = "СчетУчетаНДСУплаченногоНаТаможне" Тогда
		
		Если ИмяПланаСчетов = "Финансовый" Тогда
			СписокСчетов.Добавить(ПланСчетовМенеджер.НДСпоПриобретеннымЦенностям);
		КонецЕсли; 
		
	// КонтрагентыОрганизаций
	ИначеЕсли НазначениеСчета = "СчетУчетаРасчетовСПоставщиком"
		ИЛИ НазначениеСчета = "СчетУчетаРасчетовСПокупателем"
		ИЛИ НазначениеСчета = "СчетУчетаРасчетовСКомитентом"
		ИЛИ НазначениеСчета = "СчетУчетаРасчетовПоТареСПокупателем"
		ИЛИ НазначениеСчета = "СчетУчетаРасчетовПоТареСПоставщиком"
		ИЛИ НазначениеСчета = "СчетУчетаАвансовВыданных"
		ИЛИ НазначениеСчета = "СчетУчетаАвансовПолученных"
		Тогда
		
		ЗаполнитьСписокСчетамиССубконтоКонтрагентДоговор(СписокСчетов, ИмяПланаСчетов);
		
	ИначеЕсли НазначениеСчета = "СчетУчетаДоходовПоТареБУ"
		ИЛИ НазначениеСчета = "СчетУчетаДоходовПоТареНУ" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.ПрочиеДоходы);
		
	ИначеЕсли НазначениеСчета = "СчетУчетаРасходовПоТареБУ"
		ИЛИ НазначениеСчета = "СчетУчетаРасходовПоТареНУ" Тогда
		
		СписокСчетов.Добавить(ПланСчетовМенеджер.ПрочиеРасходы);
		
	КонецЕсли; 
		
	Возврат СписокСчетов;
	
КонецФункции //ПолучитьСписокСчетовПоНазначениюСчета 
 
// Процедура открывает диалог выбора счета с установленным отбором
// Отбор задается согласно назначению счета
//
Процедура ВыборСчетаСОтборомПоНазначениюСчета(НазначениеСчета, Элемент, ИмяПланаСчетов, СписокСчетов = Неопределено) Экспорт

	ФормаВыбора = ПланыСчетов[ИмяПланаСчетов].ПолучитьФормуВыбора(, Элемент, "ВыборСчетаСОтборомПоНазначениюСчета");

	//Если СписокСчетов не передан - получим его по Назначению
	Если СписокСчетов = Неопределено Тогда
		СписокСчетов = ПолучитьСписокСчетовПоНазначениюСчета(НазначениеСчета, Элемент, ИмяПланаСчетов);
	КонецЕсли;
	
	Если СписокСчетов.Количество() > 0 Тогда
		ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСпискеПоИерархии;
		ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
		ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;
		
		ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;
	КонецЕсли; 
	
	// Если в поле ввода выбрано значение, то установим выбор на него, если это значение есть в списке 
	НачальноеЗначениеВыбора = Элемент.Значение;
	Если ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда
		УстановитьНачальноеЗначениеВыбора = Истина;
		
		Если СписокСчетов.НайтиПоЗначению(НачальноеЗначениеВыбора) = Неопределено Тогда
			УстановитьНачальноеЗначениеВыбора = Ложь;
			Для каждого ЭлСчет Из СписокСчетов Цикл
				Если НачальноеЗначениеВыбора = ЭлСчет.Значение 
					ИЛИ НачальноеЗначениеВыбора.ПринадлежитЭлементу(ЭлСчет.Значение) Тогда
					
					УстановитьНачальноеЗначениеВыбора = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		Если УстановитьНачальноеЗначениеВыбора Тогда
			ФормаВыбора.ПараметрТекущаяСтрока = НачальноеЗначениеВыбора;
		КонецЕсли; 
	КонецЕсли; 
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры //ВыборСчетаСОтборомПоНазначениюСчета
 
// Функция возвращает форму объекта с учетом доступа на просмотр к объекту
//
// Параметры
//	МетаданныеОбъекта	- <ОбъектМетаданных>
//	ВидФормы			- <строка>.
//	ИмяФормы			- <строка>. Имя формы, как оно задано в конфигураторе
//
Функция ВернутьФормуЕслиДоступна(МетаданныеОбъекта, МенеджерОбъекта, ВидФормы = "", ИмяФормы = Неопределено) Экспорт
	
	Если НЕ ПравоДоступа("Просмотр", МетаданныеОбъекта) Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	Результат = Неопределено; 
	
	ВидФормы = НРег(ВидФормы);
	
	Если ВидФормы = "" Тогда
		Результат = МенеджерОбъекта.ПолучитьФорму(ИмяФормы);
	ИначеЕсли ВидФормы = "формавыбора" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуВыбора(ИмяФормы);
	ИначеЕсли ВидФормы = "формавыборагруппы" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуВыбораГруппы(ИмяФормы);
	ИначеЕсли ВидФормы = "формановоговидарасчета" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуНовогоВидаРасчета(ИмяФормы);
	ИначеЕсли ВидФормы = "формановогодокумента" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуНовогоДокумента(ИмяФормы);
	ИначеЕсли ВидФормы = "формановогосчета" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуНовогоСчета(ИмяФормы);
	ИначеЕсли ВидФормы = "формановогоузла" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуНовогоУзла(ИмяФормы);
	ИначеЕсли ВидФормы = "Формановогоэлемента" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуНовогоЭлемента(ИмяФормы);
	ИначеЕсли ВидФормы = "формановойгруппы" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуНовойГруппы(ИмяФормы);
	ИначеЕсли ВидФормы = "формановойзадачи" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуНовойЗадачи(ИмяФормы);
	ИначеЕсли ВидФормы = "формаредактированиязаписи" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуРедактированияЗаписи(ИмяФормы);
	ИначеЕсли ВидФормы = "формасписка" Тогда
		Результат = МенеджерОбъекта.ПолучитьФормуСписка(ИмяФормы);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ВернутьФормуЕслиДоступна

// Процедура устанавливает доступность кнопки "ОплатитьКартой".
//
// Параметры:
//  КнопкиКоманднойПанели - Кнопки, среди которых содержится кнопка "ОплатитьКартой".
//
Процедура УстановитьДоступностьКнопкиОплатитьКартой(КнопкиКоманднойПанели) Экспорт

	Если ПолучитьСерверТО().ПолучитьСписокУстройств(
	   Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема).Количество() = 0 Тогда
		КнопкиКоманднойПанели.Удалить(КнопкиКоманднойПанели.ОплатитьКартой);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Функция подбирает из справочника организаций первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – подбор только среди головных организаций
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПодобратьОрганизацию (ТолькоГоловныеОрганизации = Ложь) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация,
	|	Организации.ПометкаУдаления
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Если ТолькоГоловныеОрганизации Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Код";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПодобратьОрганизацию ()

// Функция возвращает организацию, указанную для пользователя по умолчанию
// а если она пустая, то первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – вернуть головную организацию
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПолучитьОрганизацию(ТолькоГоловныеОрганизации = Ложь) Экспорт
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если ТолькоГоловныеОрганизации и Не Организация.Пустая() Тогда
		// получим головную организацию
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	Если Организация.Пустая() Или Не ОбщегоНазначения.ЭтоДоступнаяОрганизация(Организация) Тогда
		//для пользователя не задана организация по умолчанию, подберем первую разрешенную
		Организация = ПодобратьОрганизацию(ТолькоГоловныеОрганизации);
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции // ПолучитьОрганизацию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Процедура устанавливает видимость переданных страниц формы на основании прав доступа текущего пользователя
// вызывается из обработчика формы ПередОткрытием 
//
// Параметры
//		ОбъектыМетаданных - соответствие, ключ - ЭУ страница формы, значение - объекты метаданных 
//		РеквизитыФормы	  - соответствие, ключ - ЭУ страница формы, значение - реквизиты формы для изменения доступности
//
Процедура СформироватьСтраницыФормы(ОбъектыМетаданных, РеквизитыФормы) Экспорт
	
	// цикл по страницам формы
	Для каждого ЭлементСоответствия Из ОбъектыМетаданных Цикл
		
		// это элемент управления - страницы формы
		СтраницаФормы = ЭлементСоответствия.Ключ; 
		
		// Массив содержащий объекты метаданных, редактируемые на странице формы
		МассивОбъектовМетаданных = ЭлементСоответствия.Значение;
		
		ДоступенПросмотр = МассивОбъектовМетаданных <> Неопределено;
		Если ДоступенПросмотр Тогда
			
			РазрешеноРедактирование = Истина;
			
			// цикл по объектам метаданных на странице
			Для каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
				
				РазрешеноРедактирование = РазрешеноРедактирование и ПравоДоступа("Редактирование", ОбъектМетаданных);
				ДоступенПросмотр 		= ДоступенПросмотр 		  и ПравоДоступа("Просмотр", ОбъектМетаданных);
				
				Если Не РазрешеноРедактирование и Не ДоступенПросмотр Тогда
					//на странице есть объект, по которому у пользователя нет прав
					//не проверяем другие объекты этой страницы
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтраницаФормы.Видимость = ДоступенПросмотр;
		Если ДоступенПросмотр и Не РазрешеноРедактирование Тогда
			// если доступен только просмотр страницы, запретим редактирование реквизитов этой страницы
			МассивЭлементовУправления = РеквизитыФормы.Получить(СтраницаФормы);
			Для каждого Элемент Из МассивЭлементовУправления Цикл
				Если ТипЗнч(Элемент) = Тип("ПолеВвода") или ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
					Элемент.ТолькоПросмотр = Истина;
				ИначеЕсли ТипЗнч(Элемент) = Тип("Флажок") или ТипЗнч(Элемент) = Тип("Переключатель")
					или ТипЗнч(Элемент) = Тип("Надпись") Тогда
					Элемент.Доступность = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСтраницыФормы()

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
//     Параметры:
//          Счет - выбранный счет
//          Форма - форма(или табличное поле) на которой расположены счет и субконто
//          Префикс - префекс наименования субконто. к префиксу добавляется номер субконто на счете
//                    для подписи с наименованием субконто предполагается имя
//                    вида "Надпись" + Префикс + НомерСубконто
//                    в случае если форма - это таб.поле, то надписи не устанавливаются
//
Процедура ПриВыбореСчета(Счет, Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3, ПолеСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,НадписьСубконто1,Субконто2,НадписьСубконто2,Субконто3,НадписьСубконто3", Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		ЭлементыСубконто["Субконто" + Сч].ВыбиратьТип = Ложь;
		
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение) <> ЭлементыСубконто["Субконто" + Сч].Значение Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение);
		КонецЕсли;

		ЭлементыСубконто["НадписьСубконто" + Сч].Заголовок = Счет.ВидыСубконто[Сч - 1].ВидСубконто.Наименование + ":";
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
		
		Если Не ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = Ложь;
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = Ложь;
		
	КонецЦикла;
	
	Если ПолеСчет <> НЕОПРЕДЕЛЕНО Тогда
		ПолеСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
// Параметры:
//      Счет - выбранный счет
//      Форма - форма(или табличное поле) на которой расположены счет и субконто
//      Префикс - префекс наименования субконто. к префиксу добавляется номер субконто на счете
//                для подписи с наименованием субконто предпологается имя
//                вида "Надпись" + Префикс + НомерСубконто
//                в случае если форма - это таб.поле, то надписи не устанавливаются
//
Процедура ПриВыбореСчетаВТабличномПоле(Счет, Субконто1, КолонкаСубконто1, Субконто2, КолонкаСубконто2, Субконто3, КолонкаСубконто3, КолонкаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,КолонкаСубконто1,Субконто2,КолонкаСубконто2,Субконто3,КолонкаСубконто3", Субконто1, КолонкаСубконто1, Субконто2, КолонкаСубконто2, Субконто3, КолонкаСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["КолонкаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["КолонкаСубконто" + Сч]) = Тип("ПолеВвода") Тогда
			ЭлементыСубконто["КолонкаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
			ЭлементыСубконто["КолонкаСубконто" + Сч].КнопкаОчистки = (ТипСубк.Типы().Количество() > 1);	
		Иначе
			ЭлементыСубконто["КолонкаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = ?(ТипСубк = Неопределено, Ложь, (ТипСубк.Типы().Количество() > 1));
		КонецЕсли; 
			
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк <> Неопределено Тогда
			Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
				ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		//ЭлементыСубконто["КолонкаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
	КонецЦикла;
	
	//Если КолонкаСчет <> Неопределено Тогда
	//	КолонкаСчет.ТолькоПросмотр = ТолькоПросмотр;
	//КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

Процедура УстановитьДоступностьЯчееекПоСчету(Счет, Субконто1, Субконто2, Субконто3) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ЭлементыСубконто["Субконто" + Сч].Доступность = (Сч <= ЧислоАктивныхСубконто);
	КонецЦикла;
	
КонецПроцедуры

//Функция возвращает список подразделений организации, соответствующих 
//подразделению и организации в регистре сведений 
//СоответствиеПодразделенийИПодразделенийОрганизаций 
// Параметры:
//  Подразделение - Справочник Подразделения,
//  Организации   - Справочник Организации,
Функция ПолучитьСписокПодразделенийОрганизаций(Подразделение,Организация)Экспорт 
	
	СписокВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
	               |ИЗ
	               |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	               |
	               |ГДЕ
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение И
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации <> &ПустоеПодразделениеОрганизации И
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация";
				   
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделениеОрганизации",Справочники.ПодразделенияОрганизаций.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.ПодразделениеОрганизации);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

// Процедура вызывается из обработчиков событий изменения организации и принадлежности к бухучету
// заполняет подразделение организации если может:))
Процедура ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
													   ПодразделениеОрганизации,
													   Подразделение,
													   Организация) Экспорт
													   
	Если Не  ОтражатьВБухгалтерскомУчете Или  НЕ ЗначениеЗаполнено(Подразделение) 
		 Или НЕ ЗначениеЗаполнено(Организация) тогда
		 // тут делать нечего
		Возврат;
	КонецЕсли;
													   
	СписокВыбора = ПолучитьСписокПодразделенийОрганизаций(Подразделение,Организация);
	
	Если СписокВыбора.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	// если в списке 1 элемент и подразделение организации заполнено -
	// спросим все - таки пользователя хочет ли он такого заполнения
	// если не заполнено - просто подставляем
	Если СписокВыбора.Количество()=1 тогда
		мПодразделениеОрганизации = СписокВыбора[0].Значение;
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) тогда
			ПодразделениеОрганизации = мПодразделениеОрганизации;
		ИначеЕсли ПодразделениеОрганизации <> мПодразделениеОрганизации тогда
			Если Вопрос("Заменить значение подразделения организации """
				+ ПодразделениеОрганизации+ """ на """
				+ мПодразделениеОрганизации+ """ ?",
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
				ПодразделениеОрганизации = мПодразделениеОрганизации;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из обработчика события выбора из списка подразделения организации
// показывает список выбора у соответствующего элемента формы
Процедура ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
												   ЭлементФормыПодразделениеОрганизации,
												   ПодразделениеОрганизации,
												   Подразделение,
												   Организация,
												   ЭтаФорма,
												   ВызыватьПриИзмененииПодразделенияОрганизации = Истина) Экспорт
													   
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(Подразделение) 
		 и  НЕ ЗначениеЗаполнено(Организация) тогда
		 // тут делать нечего
		Возврат;
	КонецЕсли;
													   
	СписокВыбора = ПолучитьСписокПодразделенийОрганизаций(Подразделение,Организация);
	
	Если СписокВыбора.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПоУмолчанию = СписокВыбора.НайтиПоЗначению(ПодразделениеОрганизации);
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка( СписокВыбора,
												 ЭлементФормыПодразделениеОрганизации, 
												 ЭлементПоУмолчанию);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПодразделениеОрганизации = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Если ВызыватьПриИзмененииПодразделенияОрганизации Тогда
		Попытка
			ЭтаФорма.ПриИзмененииПодразделенияОрганизации();
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры


// Процедура изменяет значение склада в табличных частях документа при изменении склада в шапке.
// Изменяются только те значения в таб.частях, которые совпадают со старым значением склада.
//
//		Параметры:
//			- ДокОбъект    - Обрабатываемый документ
//			- НовыйСклад   - Новое значение склада
//			- ТекСклад     - Текущее (старое) значение склада
//			- СтрТабЧасти  - Строка, с именами таб. частей в которых делается замена. Имя таб.частей разделены ",".
//			- ИмяРеквСклад - Имя реквизита склад в таб. частях.
//
Процедура ИзменитьЗначениеСкладаВТабЧастях(ДокОбъект, НовыйСклад, ТекЗначСклад, СтрТабЧасти, ИмяРеквСклад = "Склад") Экспорт
	
	ТекСклад     = ТекЗначСклад;
	ТекЗначСклад = НовыйСклад; // Обновим значение склада, в форме документа, из которого был вызов
	ОбъектыПредупреждения = Новый Соответствие();
	ОбъектыПредупреждения.Вставить(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"), Новый Структура("СовпадающиеРазличные, СовпадающиеНеРазличные, НеСовпадающиеРазличные, НеСовпадающиеПустые", "Приходные ордера", "документа", "приходного ордера", "приходного ордера"));
	ОбъектыПредупреждения.Вставить(Тип("СправочникСсылка.Склады"), Новый Структура("СовпадающиеРазличные, СовпадающиеНеРазличные, НеСовпадающиеРазличные, НеСовпадающиеПустые", "Склады", "склада", "склада", "склада"));

	Если НовыйСклад = ТекСклад Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовыйСклад) Тогда // Старые склады в таб.частях не очищаем - оставляем без изменений.
		Возврат;
	КонецЕсли;
	
	СтруктТабЧастей       = Новый Структура(СтрТабЧасти);
	МассивУдалитьТабЧасть = Новый Массив;

	// В зависимости от значений указанных флагов будем формировать текст вопроса
	// пользователю и формировать логику замены значений
	ЕстьРазличныеЗнач     = Ложь; // В табличной части есть непустые значения несовпадающие с пред. значением склада из шапки
	ЕстьСовпадающЗнач     = Ложь; // В табличной части есть непустые значения совпадающие с пред. значением склада из шапки
	ЕстьПустыеЗнач        = Ложь; // В табличной части есть пустые значения склада

	Для Каждого ТабЧасть Из СтруктТабЧастей Цикл

		// 1. Проверка на заполненность таб.части
		Если ДокОбъект[ТабЧасть.Ключ].Количество() = 0 Тогда
			МассивУдалитьТабЧасть.Добавить(ТабЧасть.Ключ);
			Продолжить;
		КонецЕсли;

		// 2. Проверить наличие "кандидатов" на замену.
		//    Если таковых в данной таб. части нет - можно её исключить из дальнейшей обработки
		ЕстьРазличныеЗначТЧ   = Ложь; // В табличной части есть непустые значения несовпадающие с пред. значением склада из шапки
		ЕстьСовпадающЗначТЧ   = Ложь; // В табличной части есть непустые значения совпадающие с пред. значением склада из шапки
		ЕстьПустыеЗначТЧ      = Ложь; // В табличной части есть пустые значения склада
		ЕстьСовпадающиеНовСклад = Ложь; //В табличной части есть непустые значения совпадающие с настоящим значением склада из шапки
		ЕстьРазличныеНовСклад   = Ложь; //В табличной части есть непустые значения несовпадающие с настоящим значением склада из шапки
		Для Каждого СтрокаТЧ Из ДокОбъект[ТабЧасть.Ключ] Цикл

			ПустойСклад = НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад]);

			ЕстьПустыеЗначТЧ      = ЕстьПустыеЗначТЧ    ИЛИ ПустойСклад;
			ЕстьРазличныеЗначТЧ   = ЕстьРазличныеЗначТЧ ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] <> ТекСклад);
			ЕстьСовпадающЗначТЧ   = ЕстьСовпадающЗначТЧ ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] =  ТекСклад);

			ЕстьСовпадающиеНовСклад = ЕстьСовпадающиеНовСклад ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] =  НовыйСклад);
			ЕстьРазличныеНовСклад   = ЕстьРазличныеНовСклад   ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] <> НовыйСклад);

		КонецЦикла;

		Если (НЕ ЕстьСовпадающЗначТЧ И НЕ ЕстьПустыеЗначТЧ И НЕ ЕстьРазличныеЗначТЧ) ИЛИ (ЕстьСовпадающиеНовСклад И НЕ ЕстьРазличныеНовСклад) Тогда
			МассивУдалитьТабЧасть.Добавить(ТабЧасть.Ключ);
		КонецЕсли;

		ЕстьПустыеЗнач    = ЕстьПустыеЗнач    ИЛИ ЕстьПустыеЗначТЧ;
		ЕстьРазличныеЗнач = ЕстьРазличныеЗнач ИЛИ ЕстьРазличныеЗначТЧ;
		ЕстьСовпадающЗнач = ЕстьСовпадающЗнач ИЛИ ЕстьСовпадающЗначТЧ;
		
	КонецЦикла;

	Для Каждого ТабЧастьИмя Из МассивУдалитьТабЧасть Цикл
		СтруктТабЧастей.Удалить(ТабЧастьИмя);
	КонецЦикла;

	Если СтруктТабЧастей.Количество() = 0 Тогда // Нет таб. частей для обработки
		Возврат;
	КонецЕсли;

	Если ЕстьСовпадающЗнач И ЕстьРазличныеЗнач Тогда
		ТекстВопроса = ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["СовпадающиеРазличные"] + ", которые отличаются от """ + ТекСклад + """, в табличной части изменены не будут, поскольку они были установлены вручную." + Символы.ПС +
					   "Заменить в табличных частях значение " + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["СовпадающиеНеРазличные"] + " """ + ТекСклад + """ на """ + НовыйСклад + """?";
	ИначеЕсли ЕстьСовпадающЗнач И НЕ ЕстьРазличныеЗнач Тогда
		ТекстВопроса = "Заменить в табличных частях значение " + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["СовпадающиеНеРазличные"] + " """ + ТекСклад + """ на """ + НовыйСклад + """?";
	ИначеЕсли (НЕ ЕстьСовпадающЗнач И ЕстьРазличныеЗнач) Тогда
		ТекстВопроса = "Заменить в табличных частях" + ?(ЕстьПустыеЗнач, ", не пустые значения, ", " значение ") + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["НеСовпадающиеРазличные"] + " на " + НовыйСклад + " ?";
	ИначеЕсли НЕ ЕстьСовпадающЗнач И ЕстьПустыеЗнач Тогда
		ТекстВопроса = "Заполнить пустые значения " + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["НеСовпадающиеПустые"] + " в табличных частях?";
	Иначе // ничего не делаем
		Возврат;
	КонецЕсли;

	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Новое значение склада (ордера)");
	Если Ответ = КодВозвратаДиалога.Да Тогда

		Для Каждого ТабЧасть Из СтруктТабЧастей Цикл
			Для Каждого СтрокаТЧ Из ДокОбъект[ТабЧасть.Ключ] Цикл
				Если (ЕстьСовпадающЗнач И СтрокаТЧ[ИмяРеквСклад] = ТекСклад)
						ИЛИ (НЕ ЕстьСовпадающЗнач И ЕстьРазличныеЗнач И ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад])) Тогда
					СтрокаТЧ[ИмяРеквСклад] = НовыйСклад;
				ИначеЕсли НЕ ЕстьСовпадающЗнач И ЕстьПустыеЗнач И НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад]) Тогда
					Если НЕ ЕстьСовпадающЗнач И ЕстьРазличныеЗнач И НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад]) Тогда
						продолжить;
					Иначе
						СтрокаТЧ[ИмяРеквСклад] = НовыйСклад;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ИзменитьЗначениеСкладаВТабЧастях()

// Функция открывает окно выбора склада из документа основания, в случае когда
// при вводе на основании в документе-основании склад есть в таб.части, а в вводимом документе - склад в шапке
// т.е. из списка складов надо выбрать только один склад.
//
Функция ВыбратьСкладИзДокументаОснования(ДокОснование, СтруктПараметры, ВернутьВсеСклады = Ложь) Экспорт

	// Выберем список складов
	ТекстЗапроса = "";
	МетаДок = ДокОснование.Метаданные();
	Для Каждого ТабЧасть Из СтруктПараметры.ТабЧасти Цикл
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			    |
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	" + ТабЧасть.Значение + " КАК Склад,
			|	" + ТабЧасть.Значение + ".Представление КАК СкладПредставление
			|ИЗ
			|	Документ." + МетаДок.Имя + "." + ТабЧасть.Ключ + " КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка = &ДокСсылка
			|   И ДокОснование." + ТабЧасть.Значение + " ССЫЛКА Справочник.Склады
			|   И ДокОснование." + ТабЧасть.Значение + " <> &ПустСклад";
	КонецЦикла;	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Склад КАК Склад,
		|	СкладПредставление КАК СкладПредставление
		|ИЗ
		|	(" + ТекстЗапроса + ") КАК Док
		|
		|УПОРЯДОЧИТЬ ПО
		|	СкладПредставление";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокСсылка", ДокОснование.Ссылка);
	Запрос.УстановитьПараметр("ПустСклад", Справочники.Склады.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокСкладов = Новый СписокЗначений;
	
	ВсеСклады = Ложь;
	Если СтруктПараметры.Свойство("ВсеСклады", ВсеСклады) Тогда
		Если ВсеСклады Тогда
			СписокСкладов.Добавить("ВсеСклады", "<Все склады>");
		КонецЕсли;
	КонецЕсли;
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		СписокСкладов.Добавить(Обход.Склад, Обход.СкладПредставление);
	КонецЦикла;
	
	Если ВернутьВсеСклады Тогда
		Возврат СписокСкладов;
	КонецЕсли;
	
	// Один склад, нечего спрашивать.
	Если СписокСкладов.Количество() = 1 Тогда
		Возврат СписокСкладов[0].Значение;
	КонецЕсли;
	
	СтруктПараметрыФормы = Новый Структура;
	СтруктПараметрыФормы.Вставить("СписокСкладов", СписокСкладов);
	СтруктПараметрыФормы.Вставить("НачЗначение",   ДокОснование[СтруктПараметры.ИмяСкладаВШапке]);
	
	ФормаВыбораСклада = ПолучитьОбщуюФорму("ФормаВыбораСклада");
	ФормаВыбораСклада.НачальноеЗначениеВыбора = СтруктПараметрыФормы;
	ВыбрСклад = ФормаВыбораСклада.ОткрытьМодально();
	
	Возврат ВыбрСклад;
	
КонецФункции // ВыбратьСкладИзДокументаОснования()

// Функция открывает окно выбора контрагента/договора/заказа из документа основания, в случае когда
// при вводе на основании в документе-основании заказ (контрагент-договор) есть в таб.части,
// а в вводимом документе - заказ (контрагент-договор) в шапке
//
Функция ВыбратьКонтрагентДоговорЗаказИзДокументаОснования(ДокОснование, СтруктПараметры) Экспорт

	// Выберем список заказов
	ТекстЗапроса = "";
	МетаДок = ДокОснование.Метаданные();
	Для Каждого ТабЧасть Из СтруктПараметры.ТабЧасти Цикл
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			    |
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	" + ТабЧасть.Значение + " КАК Заказ,
			|	" + ТабЧасть.Значение + ".Контрагент КАК Контрагент,
			|	" + ТабЧасть.Значение + ".ДоговорКонтрагента КАК Договор
			|ИЗ
			|	Документ." + МетаДок.Имя + "." + ТабЧасть.Ключ + " КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка = &ДокСсылка
			|	И НЕ ДокОснование." + ТабЧасть.Значение + ".Контрагент ЕСТЬ NULL
			|	И НЕ ДокОснование." + ТабЧасть.Значение + ".ДоговорКонтрагента ЕСТЬ NULL
			|";
	КонецЦикла;	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Заказ КАК Заказ,
		|	Представление(Заказ) КАК ЗаказПредставление,
		|	Контрагент КАК Контрагент,
		|	Представление(Контрагент) КАК КонтрагентПредставление,
		|	Договор КАК Договор,
		|	Представление(Договор) КАК ДоговорПредставление,
		|	0 КАК ВсегоКонтрагентов,
		|	0 КАК ВсегоДоговоров,
		|	0 КАК ВсегоЗаказов
		|ИЗ
		|	(" + ТекстЗапроса + ") КАК Док
		|
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ)      КАК ВсегоЗаказов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент) КАК ВсегоКонтрагентов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договор)    КАК ВсегоДоговоров
		|ПО
		|	ОБЩИЕ,
		|	Контрагент,
		|	Договор,
		|	Заказ
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокСсылка", ДокОснование.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктВозврат = Новый Структура;
	СтруктВозврат.Вставить("ВыборСделан", Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктВозврат;
	КонецЕсли;
	
	ФиксироватьКонтрагента = Неопределено;
	ФиксироватьДоговор     = Неопределено;
	ФиксироватьЗаказ       = Неопределено;
	
	ОбходОбщиеИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходОбщиеИтоги.Следующий() Цикл
		ОбходКонтрагент = ОбходОбщиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходКонтрагент.Следующий() Цикл
			Если ОбходОбщиеИтоги.ВсегоКонтрагентов = 1 Тогда
				ФиксироватьКонтрагента = ОбходКонтрагент.Контрагент;
			КонецЕсли;
			ОбходДоговор = ОбходКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходДоговор.Следующий() Цикл
				Если ОбходОбщиеИтоги.ВсегоДоговоров = 1 Тогда
					ФиксироватьДоговор = ОбходДоговор.Договор;
				КонецЕсли;
				ОбходЗаказ = ОбходДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходЗаказ.Следующий() Цикл
					Если ОбходОбщиеИтоги.ВсегоЗаказов = 1 Тогда
						ФиксироватьЗаказ = ОбходЗаказ.Заказ;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ФиксироватьКонтрагента = Неопределено ИЛИ ФиксироватьДоговор = Неопределено ИЛИ ФиксироватьЗаказ = Неопределено Тогда
	
		ДеревоЗаказов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктПараметрыФормы = Новый Структура;
		СтруктПараметрыФормы.Вставить("ДеревоЗаказов",   ДеревоЗаказов);
		СтруктПараметрыФормы.Вставить("Контрагент",      ФиксироватьКонтрагента);
		СтруктПараметрыФормы.Вставить("Договор",         ФиксироватьДоговор);
		СтруктПараметрыФормы.Вставить("Заказ",           ФиксироватьЗаказ);
		СтруктПараметрыФормы.Вставить("ТолькоОдинЗаказ", НЕ СтруктПараметры.ЗаказВТабЧасти);
		
		ФормаВыбораСклада = ПолучитьОбщуюФорму("ФормаВыбораКонтрагентаДоговораЗаказа");
		ФормаВыбораСклада.НачальноеЗначениеВыбора = СтруктПараметрыФормы;
		Выбор = ФормаВыбораСклада.ОткрытьМодально();
		Если Выбор <> Неопределено Тогда
			СтруктВозврат.Вставить("Контрагент",  Выбор.Контрагент);
			СтруктВозврат.Вставить("Договор",     Выбор.Договор);
			СтруктВозврат.Вставить("Заказ",       Выбор.Заказ);
			СтруктВозврат.Вставить("ВыборСделан", Выбор.ВыборСделан);
		КонецЕсли;
		
	Иначе
	
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ФиксироватьЗаказ);
		
		СтруктВозврат.Вставить("Контрагент",  ФиксироватьКонтрагента);
		СтруктВозврат.Вставить("Договор",     ФиксироватьДоговор);
		СтруктВозврат.Вставить("Заказ",       МассивЗаказов);
		СтруктВозврат.Вставить("ВыборСделан", Истина);
		
	КонецЕсли;
	
	Возврат СтруктВозврат;
	
КонецФункции // ВыбратьКонтрагентДоговорЗаказИзДокументаОснования()

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		Или Не ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;

	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
	КонецЦикла;

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
	КонецЦикла;

КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()

// Функция возврашает Ложь, если "Нет" или Истина, если "Да" на вопрос об необходимости перезаполнения счетов учета в ТЧ документа
// Используется при изменени договора, организации, вида операции, склада и при изменения меток "Отражать в НУ" и "Отражать в БУ"
//
// Вниамние!!! Если функция вызывается при изменении метки "Отражать в НУ" то параметр ОтражатьВБухгалтерскомУчете должен быть пуст!
//
// Параметры
//  ОтражатьВБухгалтерскомУчете  – заполняется если проверяется необходимость заполнения счетов бух. учета 
//  ОтражатьВНалоговомУчете      – заполняется если проверяется необходимость заполнения счетов нал. учета
//  ПрименениеУСН                - Применяется ли УСН, если орг. на УСН то не спрашиваем о перезаполнении счетов НУ.
Функция НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете= неопределено, ОтражатьВНалоговомУчете  = неопределено, ПрименениеУСН = Ложь) Экспорт
	
	Если ОтражатьВБухгалтерскомУчете<>неопределено и ОтражатьВБухгалтерскомУчете тогда
		
		Если ОтражатьВНалоговомУчете <> неопределено Тогда
			СпрашиватьОНУ = (Не ПрименениеУСН) И ОтражатьВНалоговомУчете;
		Иначе
			СпрашиватьОНУ = Не ПрименениеУСН;
		КонецЕсли;    
		
		ТекстВопроса = "Установить счета бухгалтерского"+?(СпрашиватьОНУ," и налогового","")+" учета в соответствии со значениями по умолчанию?"
												
	ИначеЕсли ОтражатьВНалоговомУчете<>неопределено и ОтражатьВНалоговомУчете тогда
		
		ТекстВопроса = "Установить счета налогового учета в соответствии со значениями по умолчанию?"
		
	Иначе
		
		Возврат ложь;
		
	КонецЕсли;
	
	Возврат  Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета") = КодВозвратаДиалога.Да;

КонецФункции //НеобходимоПерезаполнитьСчетаУчета


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПЕРИОДА РЕГИСТРАЦИИ ДОКУМЕНТА

// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

// Процедура обрабатывает событие регулирования в поле периода регистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
// Процедура исполняется только на клиенте
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если Найти(Текст, ".") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли Найти(Текст, ",") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли Найти(Текст, "-") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли Найти(Текст, "/") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли Найти(Текст, "\") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
            Если СписокМесяцев.Количество() = 1 Тогда
                ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
                СписокВозврата.Добавить("");
            Иначе
                Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции

// подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
//
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	КомпонентаСклоненияФИО = глЗначениеПеременной("глКомпонентаСклоненияФИО");
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		УниверсальныеМеханизмы.Просклонять(КомпонентаСклоненияФИО, Представление, 2, , Представление);
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        ТекстАвтоПодбора = Список[0];
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        Значение = Текст;
    Иначе
        Значение = Список;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции




// Процедура выполняет открытие общей формы "ФормаПараметрыЭлектронногоОбменаДокументами".
//
// Параметры:
//  ДокументОбъект - Объект документа, для которого открыта форма.
//
Процедура ОткрытьФормуПараметрыЭлектронногоОбменаДокументами(ДокументОбъект) Экспорт

	Форма = ПолучитьОбщуюФорму("ФормаПараметрыЭлектронногоОбменаДокументами");
	Форма.мДокументОбъект = ДокументОбъект;
	Форма.ОткрытьМодально();

КонецПроцедуры // ОткрытьФормуПараметрыЭлектронногоОбменаДокументами()

// Процедура устанавливает доступность кнопки "ПолучитьВес" в переданной командной панели.
//
// Параметры:
//  КнопкиКоманднойПанели - кнопки командная панель, в которой необходимо установить доступнойть кнопки.
//  Весы - массив доступных электронных весов.
//
Процедура УстановитьДоступностьКнопкиПолучитьВес(КнопкиКоманднойПанели, Весы) Экспорт

	Если Весы.Количество() = 0 Тогда
		КнопкиКоманднойПанели.Удалить(КнопкиКоманднойПанели.ПолучитьВес);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиПолучитьВес()

// Процедура открывает из документов форму обработки "Печать раскладки номенклатуры по местам хранения".
//
// Параметры:
//  ДокументОбъект - Объект документа, из которого вызвана процедура.
//
Процедура ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ДокументОбъект) Экспорт

	Если ПроверитьМодифицированность(ДокументОбъект) Тогда
		Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().ОткрытьФормуНастройкиИзДокумента(ДокументОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуНастройкиБланкаТоварногоНаполнения()

// Процедура осуществляет открытие формы проверки штрихкодов.
//
// Параметры:
//  Форма                 - <Форма>
//                        - Форма документа, используемая в качестве владельца
//                          открываемой формы проверки.
//
//  ДокументОбъект        - <ДокументОбъект.*>
//                        - Проверяемый документ.
//
//  ПараметрыСвязиСтрокТЧ - <Соответствие>
//                        - Параметры связи строк табличных частей документа.
//
//  ИмяТЧ                 - <Строка>
//                        - Имя проверяемой табличной части.
//
Процедура ОткрытьФормуПроверкиШтрихкодов(Форма, ДокументОбъект, ПараметрыСвязиСтрокТЧ, ИмяТЧ = "Товары") Экспорт

	ФормаОбработки = Обработки.ПроверкаШтрихкодов.ПолучитьФорму(, Форма);
	Если ФормаОбработки.Открыта() Тогда
		ФормаОбработки.Активизировать();
	Иначе
		ФормаОбработки.мПараметрыСвязиСтрокТЧ = ПараметрыСвязиСтрокТЧ;
		ФормаОбработки.ЗаполнитьТаблицу(ДокументОбъект, ИмяТЧ);
		ФормаОбработки.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуПроверкиШтрихкодов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // КартинкаУрл()

Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: справка еще не загружена");
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: не найден элемент " + Ид);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементHTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(ЭлементHTML.pathname, ЭлементHTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(ЭлементHTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + ЭлементHTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(ЭлементHTML, НазваниеТега)
	
	ТекущийЭлементHTML = ЭлементHTML;
	Пока Истина Цикл
		Если ТекущийЭлементHTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлементHTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлементHTML;
		Иначе
			ТекущийЭлементHTML = ТекущийЭлементHTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 0;
			ЭлементHTML.style.paddingright		= 3;
			ЭлементHTML.style.paddingbottom		= 2;
			ЭлементHTML.style.paddingleft		= 3;
			ЭлементHTML.style.borderwidth		= 1;
			ЭлементHTML.style.borderstyle		= "solid";
			ЭлементHTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		ЭлементHTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 1;
			ЭлементHTML.style.paddingright		= 4;
			ЭлементHTML.style.paddingbottom		= 3;
			ЭлементHTML.style.paddingleft		= 4;
			ЭлементHTML.style.borderstyle		= "none";
			ЭлементHTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= "";
		ЭлементHTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(0, 0, 0);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина, ОтображатьСправкуФормы, Форма, ИмяЭлементаУправленияОграничитель, СтруктураОбработчикиИзмененияДанных) Экспорт
	Перем ЭлементыФормы;

	ЭлементыФормы = Форма.ЭлементыФормы;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	Если (ОтображатьСправкуФормы И ЭлементыФормы.ПанельСправкиФормы.Свертка = РежимСверткиЭлементаУправления.Нет) ИЛИ
		(НЕ ОтображатьСправкуФормы И ЭлементыФормы.ПанельСправкиФормы.Свертка <> РежимСверткиЭлементаУправления.Нет) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельСправкиФормы.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
		
		ЭлементыФормы[ИмяЭлементаУправленияОграничитель].Ширина = ЭлементыФормы[ИмяЭлементаУправленияОграничитель].Ширина + ЭлементыФормы.РазделительСправкиФормы.Ширина;
		ЭлементыФормы.ПанельСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.РазделительСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельСправкиФормы, ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.ПанельСправкиФормы.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.РазделительСправкиФормы.Свертка = РежимСверткиЭлементаУправления.Право;
		
	Иначе
		
		ЭлементыФормы.РазделительСправкиФормы.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельСправкиФормы.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.ПанельСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.РазделительСправкиФормы, ГраницаЭлементаУправления.Право);
		ЭлементыФормы[ИмяЭлементаУправленияОграничитель].Ширина = ЭлементыФормы[ИмяЭлементаУправленияОграничитель].Ширина - ЭлементыФормы.РазделительСправкиФормы.Ширина;
		
	КонецЕсли;
	
	Для каждого ОбработчикИзмененияДанных из СтруктураОбработчикиИзмененияДанных цикл
		Если ОтображатьСправкуФормы Тогда
			Форма.ПодключитьОбработчикИзмененияДанных(ОбработчикИзмененияДанных.Ключ, ОбработчикИзмененияДанных.Значение);
		Иначе
			Форма.ОтключитьОбработчикИзмененияДанных(ОбработчикИзмененияДанных.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПанельСправкиФормы(Форма, ИмяЭлементаУправленияОграничитель) Экспорт
	ШиринаПанелиСправкаФормы = 224;
	ШиринаРазделителяСправкаФормы = 6;
	ВысотаНадписиЗакрытьСправкуФормы = 35;
	
	ЭлементУправленияОграничитель = Форма.ЭлементыФормы[ИмяЭлементаУправленияОграничитель];

	// ПанельСправкиФормы
	ПанельСправкиФормыВерх = ЭлементУправленияОграничитель.Верх;
	ПанельСправкиФормыЛево = ЭлементУправленияОграничитель.Лево + ЭлементУправленияОграничитель.Ширина - ШиринаПанелиСправкаФормы;
	ПанельСправкиФормыШирина = ШиринаПанелиСправкаФормы;
	ПанельСправкиФормыВысота = ЭлементУправленияОграничитель.Высота;
		
	ПанельСправкиФормы = Форма.ЭлементыФормы.Добавить(Тип("Панель"), "ПанельСправкиФормы");
	ПанельСправкиФормы.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ПанельСправкиФормы.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	ПанельСправкиФормы.Верх = ПанельСправкиФормыВерх;
	ПанельСправкиФормы.Лево = ПанельСправкиФормыЛево;
	ПанельСправкиФормы.Ширина = ПанельСправкиФормыШирина;
	ПанельСправкиФормы.Высота = ПанельСправкиФормыВысота;
	
	// ВстроеннаяСправка
	ВстроеннаяСправка = Форма.ЭлементыФормы.Добавить(Тип("ПолеHTMLДокумента"), "ВстроеннаяСправка",, ПанельСправкиФормы);
	ВстроеннаяСправка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ВстроеннаяСправка.Верх = 0;
	ВстроеннаяСправка.Лево = 0;
	ВстроеннаяСправка.Ширина = ПанельСправкиФормыШирина;
	ВстроеннаяСправка.Высота = ПанельСправкиФормыВысота - ВысотаНадписиЗакрытьСправкуФормы;
	ВстроеннаяСправка.УстановитьДействие("onclick", Новый Действие("ВстроеннаяСправкаonclick"));
	ВстроеннаяСправка.УстановитьДействие("onmouseout", Новый Действие("ВстроеннаяСправкаonmouseout"));
	ВстроеннаяСправка.УстановитьДействие("onmouseover", Новый Действие("ВстроеннаяСправкаonmouseover"));
	
	// НадписиЗакрытьСправкуФормы
	НадписиЗакрытьСправкуФормы = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписиЗакрытьСправкуФормы",, ПанельСправкиФормы);
	НадписиЗакрытьСправкуФормы.Заголовок = "Скрыть эту информацию";
	НадписиЗакрытьСправкуФормы.ГиперСсылка = Истина;
	НадписиЗакрытьСправкуФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	НадписиЗакрытьСправкуФормы.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписиЗакрытьСправкуФормы.Верх = ПанельСправкиФормыВысота - ВысотаНадписиЗакрытьСправкуФормы;
	НадписиЗакрытьСправкуФормы.Лево = 0;
	НадписиЗакрытьСправкуФормы.Ширина = ПанельСправкиФормыШирина;
	НадписиЗакрытьСправкуФормы.Высота = ВысотаНадписиЗакрытьСправкуФормы;
	НадписиЗакрытьСправкуФормы.УстановитьДействие("Нажатие", Новый Действие("ПереключитьВидимостьСправкиФормы"));
	
	// РазделительСправкиФормы
	РазделительСправкиФормыВерх = ЭлементУправленияОграничитель.Верх;
	РазделительСправкиФормыЛево = ЭлементУправленияОграничитель.Лево + ЭлементУправленияОграничитель.Ширина - ШиринаПанелиСправкаФормы - ШиринаРазделителяСправкаФормы;
	РазделительСправкиФормыШирина = ШиринаРазделителяСправкаФормы;
	РазделительСправкиФормыВысота = ЭлементУправленияОграничитель.Высота;
		
	РазделительСправкиФормы = Форма.ЭлементыФормы.Добавить(Тип("Разделитель"), "РазделительСправкиФормы");
	РазделительСправкиФормы.Верх = РазделительСправкиФормыВерх;
	РазделительСправкиФормы.Лево = РазделительСправкиФормыЛево;
	РазделительСправкиФормы.Ширина = РазделительСправкиФормыШирина;
	РазделительСправкиФормы.Высота = РазделительСправкиФормыВысота;
	
	//Установка привязок
	ПервыйЭлемент = Неопределено;
	ГраницаПервогоЭлемента = Неопределено;
	ВторойЭлемент = Неопределено;
	ГраницаВторогоЭлемента = Неопределено;
	
	ЭлементУправленияОграничитель.ПолучитьПривязку(ГраницаЭлементаУправления.Верх, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	ПанельСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	РазделительСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	
	ЭлементУправленияОграничитель.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	ПанельСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	РазделительСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	
	ПанельСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РазделительСправкиФормы, ГраницаЭлементаУправления.Право);
	ПанельСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
	
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПанельСправкиФормы, ГраницаЭлементаУправления.Лево);
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельСправкиФормы, ГраницаЭлементаУправления.Право);
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельСправкиФормы, ГраницаЭлементаУправления.Верх);
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельСправкиФормы, ГраницаЭлементаУправления.Низ);
	
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПанельСправкиФормы, ГраницаЭлементаУправления.Лево);
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельСправкиФормы, ГраницаЭлементаУправления.Право);
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельСправкиФормы, ГраницаЭлементаУправления.Низ);
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельСправкиФормы, ГраницаЭлементаУправления.Низ);
	
	РазделительСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РазделительСправкиФормы, ГраницаЭлементаУправления.Право);
	РазделительСправкиФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
	
	ЭлементУправленияОграничитель.Ширина = ЭлементУправленияОграничитель.Ширина - ШиринаПанелиСправкаФормы - ШиринаРазделителяСправкаФормы;
	ЭлементУправленияОграничитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, РазделительСправкиФормы, ГраницаЭлементаУправления.Право);

КонецПроцедуры

 // Процедура вычисления даты окончания действия учетной политики
// параметры
// ТекПериод - дата начала дейстия учетной политики
// ТекОрганизация - организация, учетная политика которой рассматривается
Функция НайтиДатуОкончанияДействия(ТекПериод, ТекОрганизация) Экспорт
	
	УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаРегл");	
	
	УчетнаяПолитикаКопия = УчетнаяПолитика.Скопировать();	
	УчетнаяПолитикаКопия.Сортировать("Период Возр");
	
	ДатаОкончания = ТекПериод;
	
	Для Каждого Строка Из УчетнаяПолитикаКопия Цикл
		Если Строка.Организация = ТекОрганизация 
			И Строка.Период > ДатаОкончания Тогда
			
			ДатаОкончания = Строка.Период - 1;
			
			Возврат ДатаОкончания;
			
		КонецЕсли;
	КонецЦикла;
	
	ДатаОкончания = ?(ТекПериод > РабочаяДата, КонецГода(ТекПериод), КонецГода(ДатаОкончания));
	Возврат ДатаОкончания;

КонецФункции

Функция ВставитьКолонкуВТабличноеПоле(НомерКолонки = Неопределено, ТабличноеПоле, Имя, ТекстШапки, 
									Данные = Неопределено, ДанныеФлажка = Неопределено, Подсказка = "", Видимость = Истина, 
									ТипЭлементаУправления = Неопределено, Положение = Неопределено, Ширина = Неопределено,
									КнопкаВыбора = Неопределено, КнопкаОткрытия = Неопределено, КнопкаОчистки = Неопределено) Экспорт
	
	Если НомерКолонки = Неопределено Тогда
		НоваяКолонка = ТабличноеПоле.Колонки.Добавить(Имя, ТекстШапки);
	Иначе
		НоваяКолонка = ТабличноеПоле.Колонки.Вставить(НомерКолонки, ТекстШапки);
		НоваяКолонка.Имя = Имя;
	КонецЕсли;
	
	Если ТипЭлементаУправления <> Неопределено Тогда
		НоваяКолонка.УстановитьЭлементУправления(ТипЭлементаУправления);
		Если КнопкаВыбора <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаВыбора = КнопкаВыбора;
		КонецЕсли;
		Если КнопкаОткрытия <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОткрытия = КнопкаОткрытия;
		КонецЕсли;
		Если КнопкаОчистки <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОчистки = КнопкаОчистки;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		НоваяКолонка.Данные = Данные;
	КонецЕсли;
	
	Если ДанныеФлажка <> Неопределено Тогда
		НоваяКолонка.ДанныеФлажка = ДанныеФлажка;
	КонецЕсли;
	
	Если Положение <> Неопределено Тогда
		НоваяКолонка.Положение = Положение;
	Иначе
		НоваяКолонка.Положение = ПоложениеКолонки.НоваяКолонка;
	КонецЕсли;
	
	Если Ширина <> Неопределено Тогда
		НоваяКолонка.Ширина = Ширина;
	КонецЕсли;
	
	НоваяКолонка.ПодсказкаВШапке = Подсказка;
	НоваяКолонка.Видимость = Видимость;
	
	Возврат НоваяКолонка
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ ВЫПАДАЮЩИХ СПИСКОВ ПОСЛЕДНИХ 10 ЗНАЧЕНИЙ

// Процедура восстанавливает список 10 последних выпавших значений элемента
Процедура ВосстановитьСписокЗначенийУнивер(СписокЗначений, ИмяПараметраДляСохранения = "", СписокЭлементаВизуализации) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений.Очистить();
	
	ВосстановленноеЗначение = ВосстановитьЗначение(ИмяПараметраДляСохранения);
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
		СписокЗначений = ВосстановленноеЗначение;
		СписокЭлементаВизуализации = СписокЗначений.Скопировать();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет в список последних 10-ти значений элементов
// Параметры :
//		СписокСохраняемыхЗначений - список значений куда нужно поместить очередной элемент
//      ИмяПараметраДляСохранения - под каким именем сохранить значение (если пустая - то ничего не сохраняем)
//      ЭлементСписка			  - выбранный элемент списка
Процедура ДобавитьВСписокЗначенийУнивер(СписокСохраняемыхЗначений, ИмяПараметраДляСохранения = "", ЭлементСписка, 
	Знач ЗначениеПоиска = "") Экспорт

	Если ПустаяСтрока(ЗначениеПоиска) Тогда
		ДобавляемоеЗначение = ЭлементСписка.Значение;
	Иначе
		ДобавляемоеЗначение = ЗначениеПоиска;
    КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ДобавляемоеЗначение);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ДобавляемоеЗначение);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
		СохранитьЗначение(ИмяПараметраДляСохранения, СписокСохраняемыхЗначений.Скопировать());
	КонецЕсли;
	
	ЭлементСписка.СписокВыбора = СписокСохраняемыхЗначений.Скопировать();

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ ОСТАТКОВ НОМЕНКЛАТУРЫ

// Процедура вызывается при выводе строки дерева остатков номенклатуры на складах.
//
Процедура ПриВыводеСтрокиБезЦены(Элемент, ОформлениеСтроки, ДанныеСтроки, ОтображатьСклады, НоменклатураТекущиеДанные) Экспорт

	Если ДанныеСтроки.Родитель = Неопределено Тогда
		Если ОтображатьСклады Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ХарактеристикаСклад) Тогда
			Если НоменклатураТекущиеДанные <> Неопределено
			   И НЕ НоменклатураТекущиеДанные.ЭтоГруппа
			   И НЕ НоменклатураТекущиеДанные.ВестиУчетПоХарактеристикам Тогда
				ОформлениеСтроки.Ячейки.ХарактеристикаСклад.Текст = "Учет по характеристикам не ведется";
			Иначе
				ОформлениеСтроки.Ячейки.ХарактеристикаСклад.Текст = "<без характеристики>";
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ХарактеристикаСклад) Тогда
			ОформлениеСтроки.Ячейки.ХарактеристикаСклад.Текст = "Склад не указан";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает событие Выбор табличного поля остатков товаров на складах.
//
Процедура ОбработатьВыборТаблицаОстатков(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ТекущаяНоменклатура) Экспорт

	Если Колонка.Имя = "СвободныйОжидаемый"
	   И ЗначениеЗаполнено(ВыбраннаяСтрока.СвободныйОжидаемый)
	   И ВыбраннаяСтрока.Родитель = Неопределено Тогда
	
		Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
		
		СтруктураНостроек = Новый Структура;
		СтруктураНостроек.Вставить("ИмяРегистра", "ЗаказыПоставщикам");
		СтруктураНостроек.Вставить("ДатаКон", ТекущаяДата());
		
		СоответствиеОтбора = Новый Соответствие;
		СоответствиеОтбора.Вставить("Номенклатура", ТекущаяНоменклатура);
		СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.ХарактеристикаСклад);
		СтруктураНостроек.Вставить("Отбор",СоответствиеОтбора);
		
		СоответствиеГруппировок = Новый Соответствие;
		СоответствиеГруппировок.Вставить("ЗаказПоставщику.ДатаПоступления");
		СоответствиеГруппировок.Вставить("ЗаказПоставщику");
		СтруктураНостроек.Вставить("ГруппировкиСтрок", СоответствиеГруппировок);
		
		СтруктураНостроек.Вставить("ВыбранныеПоля",  Новый Структура("Цена", "Цена"));
		СтруктураНостроек.Вставить("РаскрашиватьИзмерения", Истина);
		
		Отчет.Настроить(СтруктураНостроек);
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		ФормаОтчета.ОбновитьОтчет();
		ФормаОтчета.Открыть();
	
	ИначеЕсли Колонка.Имя = "ВРезерве"
	   И ЗначениеЗаполнено(ВыбраннаяСтрока.ВРезерве) Тогда
	
		Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
		
		СтруктураНостроек = Новый Структура;
		СтруктураНостроек.Вставить("ИмяРегистра", "ТоварыВРезервеНаСкладах");
		СтруктураНостроек.Вставить("ДатаКон", ТекущаяДата());
		
		СоответствиеОтбора = Новый Соответствие;
		СоответствиеОтбора.Вставить("Номенклатура", ТекущаяНоменклатура);
		Если ВыбраннаяСтрока.Родитель = Неопределено Тогда
			СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.ХарактеристикаСклад);
		Иначе
			СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.Родитель.ХарактеристикаСклад);
			СоответствиеОтбора.Вставить("Склад", ВыбраннаяСтрока.ХарактеристикаСклад);
		КонецЕсли; 
		СтруктураНостроек.Вставить("Отбор",СоответствиеОтбора);
		
		СоответствиеГруппировок = Новый Соответствие;
		СоответствиеГруппировок.Вставить("ДокументРезерва");
		СтруктураНостроек.Вставить("ГруппировкиСтрок", СоответствиеГруппировок);
		
		СоответствиеПолей= Новый Соответствие;
		СоответствиеПолей.Вставить("ДокументРезерва.ДатаОтгрузки");
		СтруктураНостроек.Вставить("ВыбранныеПоля",  СоответствиеПолей);
		
		СтруктураНостроек.Вставить("РаскрашиватьИзмерения", Истина);
		СтруктураНостроек.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", Истина);
		
		Отчет.Настроить(СтруктураНостроек);
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		ФормаОтчета.ОбновитьОтчет();
		ФормаОтчета.Открыть();
	
	ИначеЕсли Колонка.Имя = "МестоХранения"
		    И ЗначениеЗаполнено(ВыбраннаяСтрока.ХарактеристикаСклад)
			И ТипЗнч(ВыбраннаяСтрока.ХарактеристикаСклад) = Тип("СправочникСсылка.Склады") Тогда
		СписокРегистра = РегистрыСведений.МестаХраненияНоменклатуры.ПолучитьФормуСписка();
		СписокРегистра.Отбор.Номенклатура.Значение      = ТекущаяНоменклатура;
		СписокРегистра.Отбор.Номенклатура.Использование = Истина;
		СписокРегистра.Отбор.Склад.Значение             = ВыбраннаяСтрока.ХарактеристикаСклад;
		СписокРегистра.Отбор.Склад.Использование        = Истина;
		СписокРегистра.Открыть();
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает порядок столбцов сумм такой же как порядок следования строк типов цен	
Процедура УстановитьПорядокКолонокСуммТабПоле(ТабПоле, СписокЦенОстатков, КоличествоБазовыхКолонок) Экспорт
	
	НомерКолонкиВСписке = КоличествоБазовыхКолонок;
	Для Каждого Элемент Из СписокЦенОстатков Цикл
		
		Если НЕ Элемент.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка = ТабПоле.Колонки.Найти(Элемент.Префикс + "Цена");
		Если Колонка = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// только позицию у колонки установим и все
		РеальнаяПозицияКолонки = ТабПоле.Колонки.Индекс(Колонка);
		Если РеальнаяПозицияКолонки <> НомерКолонкиВСписке Тогда
			ТабПоле.Колонки.Сдвинуть(Колонка, НомерКолонкиВСписке - РеальнаяПозицияКолонки);	
		КонецЕсли;
		
		// очередной номер колонки в списке
		НомерКолонкиВСписке = НомерКолонкиВСписке + 1;
	КонецЦикла;
		
КонецПроцедуры	

// Процедура перемещает строку типа цен либо вверх либо вниз
Процедура ПереместитьТипЦен(ТабПолеСписокЦен, ТабПолеОстаткиИЦены, СписокЦенОстатков, КоличествоБазовыхКолонок, ПереместитьВверх) Экспорт
	
	СтрокаТиповЦен = ТабПолеСписокЦен.ТекущиеДанные;
	Если СтрокаТиповЦен = Неопределено Тогда
		Возврат
	КонецЕсли;
	КоличествоТиповЦен = СписокЦенОстатков.Количество();
	ИндексСтроки = СписокЦенОстатков.Индекс(СтрокаТиповЦен);
	
	Если ПереместитьВверх Тогда
		
		Если ИндексСтроки <> 0 Тогда 
			// перемещаем строку на 1 позицию вверх
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, -1);
		Иначе
			// перемещаем в самый низ
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, КоличествоТиповЦен - 1);
		КонецЕсли;
	
	Иначе
		
		Если ИндексСтроки <> КоличествоТиповЦен - 1 Тогда 
			// перемещаем строку на 1 позицию вниз
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, 1);
		Иначе
			// перемещаем в самый верх
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, - КоличествоТиповЦен + 1);
		КонецЕсли;
	
	КонецЕсли;
	
	// если тип цен выводится - то надо колонки поменять в соответвии с порядком следования типов цен
	Если СтрокаТиповЦен.Пометка Тогда
		// Осталось только позиции колонок в гриде установить нужные
		УстановитьПорядокКолонокСуммТабПоле(ТабПолеОстаткиИЦены, СписокЦенОстатков, КоличествоБазовыхКолонок);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет или удаляет колонки сумм по типам сумм для номенклатуры у табличного поля
Процедура ОбновитьКолонкиСуммТабПоле(ТабПоле, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, ОбновлятьШапкиКолонок = Истина, КоличествоБазовыхКолонок) Экспорт
	
	ВыводитьВУстановленнойВалюте = НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены);
	ПостфиксЦены = ?(ВыводитьВУстановленнойВалюте, " Цена, " + СокрЛП(ВалютаЦены), " Цена");
	
	НомерКолонкиВСписке = КоличествоБазовыхКолонок;
	Для Каждого Элемент Из СписокЦенОстатков Цикл
		
		Если Элемент.Пометка Тогда
			// а колонка уже есть - ничего делать не надо
			Колонка = ТабПоле.Колонки.Найти(Элемент.Префикс + "Цена");
							
			Если Колонка <> Неопределено Тогда
				
				// только позицию ее установим и все
				РеальнаяПозицияКолонки = ТабПоле.Колонки.Индекс(Колонка);
				Если РеальнаяПозицияКолонки <> НомерКолонкиВСписке Тогда
					ТабПоле.Колонки.Сдвинуть(Колонка, НомерКолонкиВСписке - РеальнаяПозицияКолонки);	
				КонецЕсли;
				
				Если ОбновлятьШапкиКолонок Тогда
					Колонка.ТекстШапки = Элемент.Наименование + ПостфиксЦены;
				КонецЕсли;
				
			Иначе	
	 		
				НоваяКолонка = ТабПоле.Колонки.Вставить(НомерКолонкиВСписке);
				НоваяКолонка.ИзменятьНастройку = Ложь;
				НоваяКолонка.ИзменятьВидимость = Ложь;
				НоваяКолонка.Имя = Элемент.Префикс + "Цена";
				НоваяКолонка.Данные = Элемент.Префикс + "Цена";
				НоваяКолонка.ТекстШапки = Элемент.Наименование + ПостфиксЦены;
			
			КонецЕсли;
			
			// очередной номер колонки в списке
			НомерКолонкиВСписке = НомерКолонкиВСписке + 1;
		Иначе
			Колонка = ТабПоле.Колонки.Найти(Элемент.Префикс + "Цена");
			Если Колонка <> Неопределено Тогда
				ТабПоле.Колонки.Удалить(Колонка);
			КонецЕсли;
     					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет тексты шапок колонок остатков (добавляет к ним единицы измерения)
Процедура ОбновитьШапкиКолонокОстатков(ТабПоле, ЕдиницаХранения) Экспорт
	
	СтрокаПредставленияЕдиницы = ?(НЕ ЗначениеЗаполнено(ЕдиницаХранения), "", (", " + СокрЛП(ЕдиницаХранения)));
			
	ТабПоле.Колонки.Общий.ТекстШапки              = "Общий"      + СтрокаПредставленияЕдиницы;
	ТабПоле.Колонки.Свободный.ТекстШапки          = "Свободный"  + СтрокаПредставленияЕдиницы;
	ТабПоле.Колонки.СвободныйОжидаемый.ТекстШапки = "Своб.ожид." + СтрокаПредставленияЕдиницы;
	ТабПоле.Колонки.ВРезерве.ТекстШапки           = "В резерве"  + СтрокаПредставленияЕдиницы;

КонецПроцедуры
	
// Процедура в нужном формате формирует суммы к выводу
Процедура ПриВыводеСуммОстатковНоменклатуры(ОформлениеСтроки, ДанныеСтроки, СписокПрефиксовИмен, ВВалютеЦены) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СписокПрефиксовИмен) ИЛИ (СписокПрефиксовИмен.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокПрефиксовИмен Цикл
		СтрокаПрефикса = Элемент.Значение;
		
		ТекстЦены = СокрЛП(Формат(ДанныеСтроки[СтрокаПрефикса + "Цена"], "ЧЦ=15; ЧДЦ=2"));
		
		Если ЗначениеЗаполнено(ТекстЦены) Тогда
			
			ЕдиницаЦены = СокрЛП(ДанныеСтроки[СтрокаПрефикса + "ЕдиницаЦены"]);
			Если ЗначениеЗаполнено(ЕдиницаЦены) Тогда
				ТекстЦены = ТекстЦены + ", " + ЕдиницаЦены;
			КонецЕсли; 
			
			ВалютаЦены = СокрЛП(ДанныеСтроки[СтрокаПрефикса + "ВалютаЦены"]);
			Если ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
				ТекстЦены = ТекстЦены + " (" + ВалютаЦены + ")";
			КонецЕсли; 
			
			ОформлениеСтроки.Ячейки[СтрокаПрефикса + "Цена"].Текст = ТекстЦены;
		
		КонецЕсли;
		
		Если НЕ ДанныеСтроки[СтрокаПрефикса + "ФлагЦены"] Тогда
			ОформлениеСтроки.Ячейки[СтрокаПрефикса + "Цена"].ЦветТекста = WebЦвета.Синий;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Процедура отмечает все элементы из списка
Процедура ОтметитьЭлементыСписка(Список, ФлагОтметки) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Список Цикл
		ЭлементСписка.Пометка = ФлагОтметки;	
	КонецЦикла;
	
КонецПроцедуры

// Процедура открывает форму выбора справочника "Склады" с переданным отбором по виду склада.
//
// Параметры:
//  ЭлементФормы - элемент формы, в котором инициирован выбор.
//  ВидСклада - нужный вид склада.
//  СтандартнаяОбработка - Флаг стандартной обработки выбора. Здесь сбрасывается.
//
Процедура НачалоВыбораСклада(ЭлементФормы, ВидСклада, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Установить(ВидСклада);
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСклада()

// процедура позволяет настрить период (ограничения по датам для отчета)
Процедура ОбработчикНастройкаПериодаНажатие(ДатаНач, ДатаКон) Экспорт

	НП = Новый НастройкаПериода;
	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры


// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, Метаданные, ФормаПодбора = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные;
	
	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл

		ИмяРеквизита = ЭлементСтруктурыПараметров.Ключ;

		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
		Иначе
			Если ИмяРеквизита = "Склад" Тогда

				ИмяРеквизита = "СкладОрдер";
				Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;
				КонецЕсли;

				ИмяРеквизита = "СкладОтправитель";
				Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;
				КонецЕсли;

				ИмяРеквизита = "СкладГруппа";
				Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();

КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект     - объект документа, в котором производится подбор.
//  ФормаДокумента     - форма документа, в который осуществляется подбор,
//  ПолноеИмяРеквизита - полное имя реквизита, который изменился.
//
Процедура ОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаДокумента, ПолноеИмяРеквизита) Экспорт

	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);

	Если ФормаПодбора.Открыта() Тогда

		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");
		ИмяКлюча     = ?(ИмяРеквизита = "СкладОрдер" ИЛИ ИмяРеквизита = "СкладОтправитель" ИЛИ ИмяРеквизита = "СкладГруппа", "Склад", ИмяРеквизита);

		Если ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяКлюча) Тогда

			ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяКлюча, ДокументОбъект[ИмяРеквизита]);
			СтруктураЗапроса = ФормаПодбора.ЭлементыФормы.СписокВидовПодбора.Значение;
			Родитель         = ФормаПодбора.ПолучитьТекущегоРодителя();

			ФормаПодбора.ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса);
			ФормаПодбора.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
			Если СтруктураЗапроса = Неопределено ИЛИ СтруктураЗапроса = "Спецификации" Тогда
				Если СтруктураЗапроса = "Спецификации" Тогда
					ФормаПодбора.ЭлементыФормы.СправочникСпецификации.Значение.Обновить();
				ИначеЕсли СтруктураЗапроса = Неопределено Тогда
					ФормаПодбора.ЭлементыФормы.СправочникНоменклатура.Значение.Обновить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыИФормуПодбора()

// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИмяСтраницы, Панель) Экспорт
	
	Для Каждого Страница Из Панель.Страницы Цикл
		Если НЕ Страница.Имя=ИмяСтраницы Тогда
			Страница.Видимость=Ложь;
		Иначе
			Страница.Видимость=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Панель.ТекущаяСтраница=Панель.Страницы[ИмяСтраницы];
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

//Процедура управляет доступностью признаков отражения в БУ и НУ в документах в зависимости от реквизита организации ОтражатьВРегламентированномУчете
//Также процедура может изменять значения реквизитов ОтражатьВБУ и ОтражатьВНУ
//	Может вызываться из обработчиков формы ПриОткрытии, ОрганизацияПриИзменении
//Параметры:
//	Объект - Документ-объект
//	Форма - форма документа
//	ИмяОтражатьВБУ - имя элемента формы, связанного с реквизитом ОтражатьВБУ
//  ИмяОтражатьВНУ - имя элемента формы, связанного с реквизитом ОтражатьВНУ
//  мОтражатьВРегламентированномУчете - переменная формы, передается в процедуру для изменения.
//		далее может использоваться в логике формы в индивидуальном порядке для каждого документа.
//	флИзменятьРеквизитыБУНУ - признак необходимости изменять реквизиты документа ОтражатьвБУ, ОтражатьВНУ
//		Устанавливается если процедура вызывается при изменении значения организации в документе
Процедура УправлениеПризнакомОтраженияВРеглУчете(Объект, Форма,ИмяОтражатьВБУ = "ОтражатьВБухгалтерскомУчете",ИмяОтражатьВНУ = "ОтражатьВНалоговомУчете",мОтражатьВРегламентированномУчете,флИзменятьРеквизитыБУНУ=ложь) Экспорт
	мОтражатьВРегламентированномУчете = Объект.Организация.ОтражатьВРегламентированномУчете;
	
	Если флИзменятьРеквизитыБУНУ или Объект.ЭтоНовый() Тогда
		Если мОтражатьВРегламентированномУчете Тогда
			ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
			//организация в РУ отражается. Флаги БУ и НУ необходимо установить в соотв. с настройками пользователя по умолчанию
			Объект.ОтражатьВБухгалтерскомУчете=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
			Если ИмяОтражатьВНУ<>"" Тогда
				Если Объект.ОтражатьВБухгалтерскомУчете Тогда
					Объект.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
				Иначе
					Объект.ОтражатьВНалоговомУчете = ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			//организация в РУ не отражается - необходимо сбросить флаги отражения в БУ и НУ
			Если Объект.ОтражатьВБухгалтерскомУчете  Тогда
				Объект.ОтражатьВБухгалтерскомУчете = Ложь;
			КонецЕсли;
	        Если ИмяОтражатьВНУ<>"" Тогда
				Если Объект.ОтражатьВНалоговомУчете Тогда
					Объект.ОтражатьВНалоговомУчете = Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЭлементыФормы[ИмяОтражатьВБУ].Доступность = мОтражатьВРегламентированномУчете;
	//такого элемента на форме может и не быть
	Если ИмяОтражатьВНУ<>"" Тогда
		Форма.ЭлементыФормы[ИмяОтражатьВНУ].Доступность = Объект.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьПредставлениеЭлементовСписка(ТипЗначенияЭлементов, СписокИстории, СохранятьСписокИстории)
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗначенияЭлементов);
	Если МетаданныеТипа = Неопределено
		 ИЛИ НЕ(Метаданные.Справочники.Содержит(МетаданныеТипа) 
		 		ИЛИ Метаданные.Документы.Содержит(МетаданныеТипа)
		 		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа)) Тогда
		СписокИстории.Очистить();
		Возврат;
	КонецЕсли;	
	
	ИмяТаблицы = МетаданныеТипа.ПолноеИмя();
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Ссылка КАК Ссылка, 
	|	ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление 
	|ИЗ " + ИмяТаблицы + " ГДЕ Ссылка В (&СписокЗначений)";
	
	Запрос.УстановитьПараметр("СписокЗначений", СписокИстории);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КолвоЭлементовКоллекции = СписокИстории.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		ЭлементСписка = СписокИстории[КолвоЭлементовКоллекции - ОбратныйИндекс];
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ЭлементСписка.Значение, "Ссылка") Тогда
			ЭлементСписка.Представление = Выборка.Представление;
		Иначе
			СписокИстории.Удалить(ЭлементСписка);
			СохранятьСписокИстории = Истина;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОСТАТКОВ ОТПУСКОВ

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ПериодПодобратьПоТексту(Текст, Периодичность, ДатаПоТексту = Неопределено)
	
	СписокВозврата = Новый СписокЗначений;
	
	ТекущаяДата		= ОбщегоНазначения.ПолучитьРабочуюДату();
	ТекущийГод		= Год(ТекущаяДата);
	ТекущийКвартал	= Цел(Месяц(ТекущаяДата) / 4) + 1;
	ТекущийМесяц	= Месяц(ТекущаяДата);
	ТекущаяНеделя	= НеделяГода(ТекущаяДата);
	ТекущийДень		= День(ТекущаяДата);
	
	НачалоГода		= НачалоГода(ТекущаяДата);
	НачалоМесяца	= НачалоМесяца(ТекущаяДата);
	КонецГода		= КонецГода(ТекущаяДата);
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
		ИспользуемыйРазделитель = ".";
		
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
		ИспользуемыйРазделитель = ",";
		
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
		ИспользуемыйРазделитель = "-";
		
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
		ИспользуемыйРазделитель = "/";
		
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
		ИспользуемыйРазделитель = "\";
		
	Иначе
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
		ИспользуемыйРазделитель = " ";
		
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		КонецПериода = День(КонецМесяца(ТекущаяДата));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		КонецПериода = НеделяГода(КонецГода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КонецПериода = 12;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериода = 4;
		
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 И Периодичность <> Перечисления.Периодичность.Год Тогда
		// единственное слово - пытаемся получить период
		
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
			ПериодЧислом = Число(Текст);
			
			Если ПериодЧислом >= 1 И ПериодЧислом <= КонецПериода Тогда
				Если Периодичность = Перечисления.Периодичность.День Тогда
					ДатаПоТексту = ОбщегоНазначения.ДобавитьИнтервал(НачалоМесяца, Периодичность, ПериодЧислом - 1);
				Иначе
					ДатаПоТексту = ОбщегоНазначения.ДобавитьИнтервал(НачалоГода, Периодичность, ПериодЧислом - 1);
				КонецЕсли;
				
				Если Периодичность = Перечисления.Периодичность.День Тогда
					Если СтрДлина(Текст) = 1 Тогда
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=d/MM/yyyy");
					Иначе
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=dd/MM/yyyy");
					КонецЕсли;
					
				ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
					ФорматированнаяДата = Текст + Формат(ДатаПоТексту, "ДФ=/yyyy");
					
				ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
					ФорматированнаяДата = Текст + Формат(ДатаПоТексту, "ДФ=/yyyy");
					
				ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
					Если СтрДлина(Текст) = 1 Тогда
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=M/yyyy");
					Иначе
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=MM/yyyy");
					КонецЕсли;
					
				Иначе // Год
					ФорматированнаяДата = Текст;
					
				КонецЕсли;
				
				СписокВозврата.Добавить(ФорматированнаяДата);
			КонецЕсли;
				
		Иначе
			Если Периодичность = Перечисления.Периодичность.Месяц Тогда
				СписокМесяцев = СписокМесяцевПоСтроке(Текст);
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг ""г""'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		Если Периодичность = Перечисления.Периодичность.День Тогда
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Месяц				= Число(Подстроки[1]);
				Если Месяц >= 1 И Месяц <= КонецПериода Тогда
					ФорматДляМесяца	= Прав("MM", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
					Месяц				= ТекущийМесяц;
					ФорматДляМесяца		= "MM";
				Иначе
					СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[1]);
					Если СписокМесяцев.Количество() = 1 Тогда
						Месяц				= СписокМесяцев[0];
						ФорматДляМесяца		= "MMMM";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Подстроки.Количество() >= 3 И Не ПустаяСтрока(Подстроки[2]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[2]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[2])) + Подстроки[2]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[2]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				День				= Число(Подстроки[0]);
				Если День >= 1 И Месяц <> Неопределено И День <= День(КонецМесяца(Дата(Год, Месяц, 1))) Тогда
					ФорматДляДня	= Прав("dd", СтрДлина(Подстроки[0]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, Месяц, День);
			
			Если Подстроки.Количество() < 3 ИЛИ ПустаяСтрока(Подстроки[2]) Тогда
				ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ='" + ФорматДляДня + ИспользуемыйРазделитель + ФорматДляМесяца + ИспользуемыйРазделитель + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[1])) + Подстроки[1]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Неделя	= Число(Подстроки[0]) - 1;
				Если Неделя < 1 ИЛИ Неделя > НеделяГода(Дата(Год, 12, 31)) Тогда
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			ДатаПоТексту = ОбщегоНазначения.ДобавитьИнтервал(Дата(Год, 1, 1), Периодичность, Неделя);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата	= Подстроки[0] + ИспользуемыйРазделитель + Формат(ДатаПоТексту, "ДФ='" + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Месяц			= Число(Подстроки[0]);
				Если Месяц >= 1 И Месяц <= КонецПериода Тогда
					ФорматДляМесяца	= Прав("MM", СтрДлина(Подстроки[0]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[1])) + Подстроки[1]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, Месяц, 1);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ='" + ФорматДляМесяца + ИспользуемыйРазделитель + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Квартал	= (Число(Подстроки[0]));
				Если Квартал < 1 ИЛИ Квартал > КонецПериода Тогда
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[1])) + Подстроки[1]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, (Квартал - 1) * 3 + 1, 1);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата	= Подстроки[0] + ИспользуемыйРазделитель + Формат(ДатаПоТексту, "ДФ='" + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[0])) + Подстроки[0]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[0]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, 1, 1);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата = Подстроки[0] + " год";
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		КонецЕсли;
		
		СписокВозврата.Добавить(ФорматированнаяДата);
		
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

Процедура ПериодАвтоПодборТекста(Текст, ТекстАвтоПодбора, Периодичность, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПериодПодобратьПоТексту(Текст, Периодичность);
	Если Список.Количество() = 1 Тогда
		ТекстАвтоПодбора = Список[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПериодОкончаниеВводаТекста(Текст, Значение, Периодичность, СтандартнаяОбработка, ДатаПоТексту = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПериодПодобратьПоТексту(Текст, Периодичность, ДатаПоТексту);
	Если Список.Количество() = 1 Тогда
		Значение = Список[0].Значение;
	Иначе
		Значение = Список;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьФормыДляРедактирования(ДокументОбъект, ФормаДокумента) Экспорт
	
	Если НЕ ФормаДокумента.ТолькоПросмотр Тогда
		ФормаДокумента.ТолькоПросмотр = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры	// УстановитьДоступностьФормыДляРедактирования

// Процедура устанавливает доступность кнопки "ЗаполнитьИзТерминалаСбораДанных"
// в подменю "Заполнить" командной панели "КоманднаяПанельТовары".
//
// Параметры:
//  Форма - Форма документа, в из которого вызвана процедура.
//  Терминалы - массив доступных терминалов сбора данных.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(Форма, Терминалы) Экспорт

	КнопкиКоманднойПанели = Форма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки;
	КнопкаЗаполнить = КнопкиКоманднойПанели.ПодменюЗаполнить;

	Если Терминалы.Количество() = 0 Тогда
		КнопкаЗаполнить.Кнопки.Удалить(КнопкаЗаполнить.Кнопки.ИзТерминалаСбораДанных);
	КонецЕсли;

	Если КнопкаЗаполнить.Кнопки.Количество() = 0 Тогда
		КнопкиКоманднойПанели.Удалить(КнопкаЗаполнить);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных()


// Процедура перезапуска сеанса работы с программой
Процедура ПерезапуститьСеансРаботыСПрограммой() Экспорт
	
	глЗапрашиватьПодтверждениеПриЗакрытии = глЗначениеПеременной("глЗапрашиватьПодтверждениеПриЗакрытии");
	Если глЗапрашиватьПодтверждениеПриЗакрытии Тогда
		глЗначениеПеременнойУстановить("глЗапрашиватьПодтверждениеПриЗакрытии", Ложь);	
	КонецЕсли;
	ЗавершитьРаботуСистемы(Истина, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ КОМАНД ГЛАВНОГО МЕНЮ И РАБОЧЕГО СТОЛА

//Процедура открывает список выбора внешних обработок
Процедура ОткрытьСписокВнешнихОбработок() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры 

//Процедура открывает список выбора внешних отчетов
Процедура ОткрытьСписокВнешнихОтчетов() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры 

//Процедура открывает список выбора внешних печатных форм
Процедура ОткрытьСписокВнешнихПечатныхФорм() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры   

//Процедура открывает список выбора внешних обработок заполнения табличных частей
Процедура ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ ОЧИЩАЕМЫХ РЕКВИЗИТОВ ОБЪЕКТА

// Сохраняет значение реквизита объекта и очищает реквизит. 
//
Процедура СохранитьЗначениеРеквизитаФормы(ИмяРеквизита, Форма, СтруктураРеквизитов) Экспорт
	
	Если НЕ Форма.ЭлементыФормы[ИмяРеквизита].Доступность Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, Форма.ЭлементыФормы[ИмяРеквизита].Значение);
	
	Форма.ЭлементыФормы[ИмяРеквизита].Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Форма.ЭлементыФормы[ИмяРеквизита].Значение));
	
КонецПроцедуры // СохранитьЗначениеРеквизита()

// Восстанавливает значение реквизита объекта.
//
Процедура ВосстановитьЗначениеРеквизитаФормы(ИмяРеквизита, Форма, СтруктураРеквизитов) Экспорт
	
	Если СтруктураРеквизитов.Свойство(ИмяРеквизита) Тогда
		Форма.ЭлементыФормы[ИмяРеквизита].Значение = СтруктураРеквизитов[ИмяРеквизита];
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьЗначениеРеквизита()

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиДополненияКОписанию()Экспорт
	
	ФормаОбновлений = Обработки.ОбновлениеИнформационнойБазы.ПолучитьФорму();
	ФормаОбновлений.ВывестиМакетОписаниеОбновлений();
	ФормаОбновлений.Открыть();
	
КонецПроцедуры

Процедура ВывестиПредупреждение(Текст = "", Заголовок = "") Экспорт

	Предупреждение(Текст, , Заголовок);

КонецПроцедуры

Функция ЗадатьВопрос(ТекстВопроса = "", Режим = "", КнопкаПоУмолчанию = Неопределено, Заголовок = "") Экспорт

	Возврат Вопрос(ТекстВопроса, Режим, , КнопкаПоУмолчанию, Заголовок)

КонецФункции

// Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияВажнойИнформации;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()

Процедура ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ФормаОбъекта) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если ФормаОбъекта.Модифицированность Тогда
		Ответ = РаботаСДиалогами.ЗадатьВопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			//Запишем документ
			Попытка
				Отказ = Не ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				РаботаСДиалогами.ВывестиПредупреждение("Операция не выполнена!");
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсходный.Свертка = РежимСверткиЭлементаУправления.Нет;
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсправление.Свертка = РежимСверткиЭлементаУправления.Нет;
	
КонецПроцедуры

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  МассивИсключений              - значения элементов коллекции ОбъектЗаполнения, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, МассивИсключений = Неопределено) Экспорт
	
	Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
			ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, 
				ТипКнопкиКоманднойПанели.Действие, ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

//// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
//// соответствующей перечислению видов операций для данного документа.
//// Всем кнопкам назначается одно переданное действие.
//// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
//// формы документа значениями перечисления "Вид операции" для данного вида документа
////
//// Параметры:
////  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
////  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
////  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
////
//Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт
//	Перем МассивНедоступныхВидовОпераций;
//	МассивНедоступныхВидовОпераций = ПолучитьМассивНедоступныхВидовОпераций();
//	Для Каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
//		Если Лев(ЭлементЗаполнения.Имя,7) = "Удалить"
//			ИЛИ МассивНедоступныхВидовОпераций.Найти(ЭлементЗаполнения) <> Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
//												ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
//		ПунктМеню.ИзменяетДанные = Истина;
//	КонецЦикла;

//КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

Процедура ВыбратьВидОперации(ДокументОбъект, Отказ, МассивИсключений = Неопределено) Экспорт
		
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) 
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗапрашиватьВидОперацииПриВводеНового") Тогда
		
		Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
			МассивИсключений = Новый Массив;
		КонецЕсли;
		
		СписокВидов = Новый СписокЗначений();
		Для каждого ЭлементЗаполнения из ДокументОбъект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
			Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
				СписокВидов.Добавить(ЭлементЗаполнения.Имя, ЭлементЗаполнения.Синоним);
			КонецЕсли;
		КонецЦикла;
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор вида операции документа");
		
		Если НЕ Вид = Неопределено Тогда
			ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][Вид.Значение];
		Иначе
			Отказ = Истина;
		Конецесли;

	КонецЕсли;
	
КонецПроцедуры


#КонецЕсли