
#Область ФиксированныеПараметры

Функция КонтрагентыКонсолидированныйБаланс() Экспорт 
	
	КонтрагентыКБ = Новый Массив;
	КонтрагентыКБ.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000561"));
	КонтрагентыКБ.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000155"));	
	
	Возврат КонтрагентыКБ;	
	
КонецФункции	
	
Функция ОрганизацииКонсолидированныйБаланс() Экспорт 

	ОрганизацииКБ = Новый Массив;
	ОрганизацииКБ.Добавить(Справочники.Организации.НайтиПоКоду("000000006"));
	ОрганизацииКБ.Добавить(Справочники.Организации.НайтиПоКоду("000000004"));
	
	Возврат ОрганизацииКБ;	
	
КонецФункции

Функция СчетаРасшифровкаСубконто1() Экспорт
	
	СписокСубконто1 = Новый Массив;
	СписокСубконто1.Добавить("01");
	СписокСубконто1.Добавить("02");
	СписокСубконто1.Добавить("07");
	СписокСубконто1.Добавить("08");
	СписокСубконто1.Добавить("09");
	СписокСубконто1.Добавить("77");
	СписокСубконто1.Добавить("10");
	СписокСубконто1.Добавить("19");
	СписокСубконто1.Добавить("50");
	СписокСубконто1.Добавить("97");
	
	Возврат	СписокСубконто1;
	
КонецФункции	

Функция СчетаБезРасшифровки() Экспорт
	
	СписокСчетаБезРасшифровки = Новый Массив;
	СписокСчетаБезРасшифровки.Добавить("44");
	СписокСчетаБезРасшифровки.Добавить("44.1");
	СписокСчетаБезРасшифровки.Добавить("44.2");
	СписокСчетаБезРасшифровки.Добавить("44.3");
	СписокСчетаБезРасшифровки.Добавить("44.4");
	СписокСчетаБезРасшифровки.Добавить("44.5");
	СписокСчетаБезРасшифровки.Добавить("90");
	СписокСчетаБезРасшифровки.Добавить("90.1");
	СписокСчетаБезРасшифровки.Добавить("90.2");
	СписокСчетаБезРасшифровки.Добавить("90.3");
	СписокСчетаБезРасшифровки.Добавить("90.4");
	СписокСчетаБезРасшифровки.Добавить("90.5");
	СписокСчетаБезРасшифровки.Добавить("90.9");
	
	Возврат СписокСчетаБезРасшифровки;
	
	
КонецФункции	

Функция СчетаРазделениеВзаиморасчетов() Экспорт

	СчетаРазделение = Новый Массив;
	СчетаРазделение.Добавить("60.4");
	СчетаРазделение.Добавить("60.7");
	СчетаРазделение.Добавить("60.4 ВВ");
	СчетаРазделение.Добавить("60.7 ВВ");
	СчетаРазделение.Добавить("60.4 ЛП");
	СчетаРазделение.Добавить("60.7 ЛП");

	Возврат СчетаРазделение;
	
КонецФункции	

Функция КонтрагентыБонусыСертификаты() Экспорт

	КонтрагентыБонусыСертификаты = Новый Массив;
	КонтрагентыБонусыСертификаты.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000405"));
	КонтрагентыБонусыСертификаты.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000970"));

	Возврат КонтрагентыБонусыСертификаты;
	
КонецФункции

Функция СчетаБезГруппировки() Экспорт	
	
	СписокСчетаБезГруппировки = Новый Массив;
	СписокСчетаБезГруппировки.Добавить("60.4");
	СписокСчетаБезГруппировки.Добавить("60.7");
	СписокСчетаБезГруппировки.Добавить("68.1");
	СписокСчетаБезГруппировки.Добавить("68.2");
	
	Возврат СписокСчетаБезГруппировки;
	
КонецФункции

Функция СвязанныеСтороны() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000170"));
	Результат.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000187"));
	Результат.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000171"));
	Результат.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000168"));
	
	Возврат Результат;
	
КонецФункции

Функция КонтрагентыБанки(Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияБалансМСФОСрезПоследних.РеквизитМСФО КАК Контрагент
		|ИЗ
		|	РегистрСведений.СведенияБалансМСФО.СрезПоследних(&Дата, ТипСведенийМСФО = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийБалансМСФО.КонтрагентВГруппеБанки)) КАК СведенияБалансМСФОСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Контрагент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Список(Массив)
	
	Результат = Новый СписокЗначений;	
	Для каждого Элемент из Массив Цикл
		
		Результат.Добавить(Элемент);	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область БалансМСФО

Функция СоздатьЗапросБалансМСФО(Текст) 
	
	Запрос = Новый Запрос;	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("УчитыватьКорректировкуМСФО",Истина);
	Запрос.УстановитьПараметр("ОрганизацииКБ", Список(ОтчетностьМСФО.ОрганизацииКонсолидированныйБаланс()));
	Запрос.УстановитьПараметр("КонтрагентыКБ", Список(ОтчетностьМСФО.КонтрагентыКонсолидированныйБаланс()));
	Запрос.УстановитьПараметр("КонсолидированныйБаланс", Истина);
	Запрос.УстановитьПараметр("ВыводитьЗабалансовыеСчета",Ложь);
	Запрос.УстановитьПараметр("СписокСубконто1",Список(ОтчетностьМСФО.СчетаРасшифровкаСубконто1()));
	Запрос.УстановитьПараметр("СписокСчетаБезРасшифровки",Список(ОтчетностьМСФО.СчетаБезРасшифровки()));
	Запрос.УстановитьПараметр("СписокСчетаБезГруппировки",Список(ОтчетностьМСФО.СчетаБезГруппировки()));
	Запрос.УстановитьПараметр("КонтрагентыБонусыСертификаты",Список(ОтчетностьМСФО.КонтрагентыБонусыСертификаты()));
	Запрос.УстановитьПараметр("СчетаРазделение",Список(ОтчетностьМСФО.СчетаРазделениеВзаиморасчетов()));
	
	Возврат Запрос;
		
КонецФункции

Функция  ПолучитьТаблицуРазделБаланса(Раздел,ТекущаяСтрока,Дата,ЭтоДзКз=Ложь,ЭтоКОДДС = Ложь) Экспорт

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("ТекущаяСтрока");
	ТаблицаРезультат.Колонки.Добавить("СчетКод");
	ТаблицаРезультат.Колонки.Добавить("Сумма");
	ТаблицаРезультат.Колонки.Добавить("СуммаОкончание");
	
	Текст = ПолучитьТекстЗапросаБалансаМСФО();
	ТекстПростой = ПолучитьТекстЗапросаБалансаПростой();
	Запрос = СоздатьЗапросБалансМСФО(Текст);
	ЗапросПростой = СоздатьЗапросБалансМСФО(ТекстПростой);
	//+++АК sils 10.10.2018 ИП-00019914
	//Счета = ОтчетностьМСФО.СчетаПоРазделуБалансМСФО(Раздел,Истина,Ложь);
	Если ЭтоКОДДС Тогда
		Счета = ОтчетностьМСФО.СчетаПоРазделуБалансМСФО(Раздел,Истина,Ложь, НачалоМесяца(Дата), ЭтоКОДДС);
	Иначе
		Счета = ОтчетностьМСФО.СчетаПоРазделуБалансМСФО(Раздел,Истина,Ложь);
	КонецЕсли;
	//---АК
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(Дата));
	ЗапросПростой.УстановитьПараметр("НачалоПериода",НачалоМесяца(Дата));
	ЗапросПростой.УстановитьПараметр("КонецПериода",КонецМесяца(Дата));
	
	Для каждого Счет из Счета Цикл
		ЭтоПростойЗапрос = ОтчетностьМСФО.ЭтоПростойЗапрос(Счет.КодСчета);
		//+++
		//НеРазделятьДтКт = НеРазделятьДтКт(Счет.КодСчета);
		НеРазделятьДтКт = НеРазделятьДтКт(Счет.КодСчета, ЭтоКОДДС);
		//---
		Если ЭтоДзКз Тогда
			Если НеРазделятьДтКт Тогда 
				СуммироватьДтКт = Ложь;
			Иначе 
				СуммироватьДтКт = НЕ ЭтоПростойЗапрос;
			КонецЕсли;	
		Иначе 
			СуммироватьДтКт = НЕ СчетаДтИКт(Счет.КодСчета);	
		КонецЕсли;	
			
			
		Если ЭтоПростойЗапрос Тогда
			ЗапросПростой.УстановитьПараметр("Счета",Счет.КодСчета);
			Результат = ЗапросПростой.Выполнить().Выгрузить();		
		Иначе 			
			Запрос.УстановитьПараметр("Счета",Счет.КодСчета);
			Результат = Запрос.Выполнить().Выгрузить();
			СтруктураОтбора = Новый Структура("Фильтр",Истина);
			Результат = Результат.Скопировать(СтруктураОтбора);
		КонецЕсли;
		
		ВыполнитьДополнительныеПроверки(Результат,ТекущаяСтрока,Счет.КодСчета);
		
		Слагаемое=0;
		Если Результат.Количество() > 0 тогда
						
			Результат.Свернуть(,"СуммаДт,СуммаКт");
			Если СуммироватьДтКт Тогда
				Если  Счет.СторонаПроводки = "Дт" Тогда
					Слагаемое = ?(Счет.Сторно,-Результат.Итог("СуммаДт")+Результат.Итог("СуммаКт"),Результат.Итог("СуммаДт")-Результат.Итог("СуммаКт"));
				Иначе
					Слагаемое = ?(Счет.Сторно,-Результат.Итог("СуммаКт")+Результат.Итог("СуммаДт"),Результат.Итог("СуммаКт")-Результат.Итог("СуммаДт"));
				КонецЕсли;
			Иначе 
				Если  Счет.СторонаПроводки = "Дт" Тогда
					Слагаемое = ?(Счет.Сторно,-Результат.Итог("СуммаДт"),Результат.Итог("СуммаДт"));
				Иначе
					Слагаемое = ?(Счет.Сторно,-Результат.Итог("СуммаКт"),Результат.Итог("СуммаКт"));
				КонецЕсли;				
			КонецЕсли;
			
		КонецЕсли;
				
		Если НЕ ЭтоДзКз ИЛИ Слагаемое > 0 ИЛИ НеРазделятьДтКт тогда
			НоваяСтрока = ТаблицаРезультат.Добавить();
			НоваяСтрока.ТекущаяСтрока = ТекущаяСтрока;
			НоваяСтрока.Сумма = Слагаемое; 
			НоваяСтрока.СчетКод = Счет.КодСчета;
		КонецЕсли;
		
	КонецЦикла;	

	Возврат ТаблицаРезультат;
	
КонецФункции	

Функция СчетаДтИКт(КодСчета)
	
	МассивРазделение = Новый Массив;	
	МассивРазделение.Добавить("50");
	Если МассивРазделение.Найти(КодСчета) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции	


Функция НеРазделятьДтКт(КодСчета, ЭтоКОДДС)
	
	МассивРазделение = ОтчетностьМСФО.СчетаРазделениеВзаиморасчетов();
	МассивРазделение.Добавить("70 + 58.1 ФЛ");
	МассивРазделение.Добавить("58.1 ЮЛ");
	МассивРазделение.Добавить("68.2");
	МассивРазделение.Добавить("68.2 ВВ");
	МассивРазделение.Добавить("68.2 ЛП");
	МассивРазделение.Добавить("68.1");
	МассивРазделение.Добавить("68.1 ВВ");
	МассивРазделение.Добавить("68.1 ЛП");
	МассивРазделение.Добавить("96.ДЗ");
	
	//+++ AK suvv 2018.09.03 ИП-00019490
	Если ЭтоКОДДС Тогда
		
		МассивРазделение.Добавить("60.2");
		МассивРазделение.Добавить("60.2 ВВ");
		МассивРазделение.Добавить("60.2 ЛП");
		
		МассивРазделение.Добавить("60.22");
		МассивРазделение.Добавить("60.22 ВВ");
		МассивРазделение.Добавить("60.22 ЛП");
		
		МассивРазделение.Добавить("60.3");
		МассивРазделение.Добавить("60.3 ВВ");
		МассивРазделение.Добавить("60.3 ЛП");
		
		МассивРазделение.Добавить("60.5");
		МассивРазделение.Добавить("60.5 ВВ");
		МассивРазделение.Добавить("60.5 ЛП");
		
		МассивРазделение.Добавить("60.Р");
		МассивРазделение.Добавить("60.Р ВВ");
		МассивРазделение.Добавить("60.Р ЛП");
		
		//+++АК sils 10.10.2018 ИП-00019914
		МассивРазделение.Добавить("60.2Р");
		МассивРазделение.Добавить("60.2Р ВВ");
		МассивРазделение.Добавить("60.2Р ЛП");
		//---АК
		
		МассивРазделение.Добавить("62.1");
		МассивРазделение.Добавить("62.1 ВВ");
		МассивРазделение.Добавить("62.1 ЛП");
		
		МассивРазделение.Добавить("62.2");
		МассивРазделение.Добавить("62.2 ВВ");
		МассивРазделение.Добавить("62.2 ЛП");
		
	КонецЕсли;
	//--- AK suvv
	
	Если МассивРазделение.Найти(КодСчета) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыполнитьДополнительныеПроверки(ТаблицаРезультат,ТекущаяСтрока,КодСчета)
	
	//Проверяем ДЗ на налоги
	Если ТекущаяСтрока = 11 Тогда
		Если Лев(КодСчета,4) = "68.2" Тогда
			НалогБСРФ	=	Справочники.ВидыНалогов.НайтиПоКоду("000000002");
			НалогФБРФ	=	Справочники.ВидыНалогов.НайтиПоКоду("000000003");	
			Для каждого Строка  Из ТаблицаРезультат Цикл
				Если Строка.Расшифровка = НалогБСРФ ИЛИ Строка.Расшифровка = НалогФБРФ Тогда
					Строка.СуммаДт = 0;
					Строка.СуммаКт = 0;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

Функция НеДополнять(КодСчета)
	
	МассивРазделение = Новый Массив;
	МассивРазделение.Добавить("60.Р");
	МассивРазделение.Добавить("60.Р ЛП");
	МассивРазделение.Добавить("60.Р ВВ");
	Если МассивРазделение.Найти(КодСчета) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//+++АК sils 10.10.2018 ИП-00019914
//Функция СчетаПоРазделуБалансМСФО(Раздел,КонсолидированныйБаланс,ВыводитьЗабалансовыеСчета) Экспорт
Функция СчетаПоРазделуБалансМСФО(Раздел,КонсолидированныйБаланс,ВыводитьЗабалансовыеСчета, НачалоПериода = '00010101', ЭтоКОДДС = Ложь) Экспорт
//---АК	
	
	СхемаКомпоновкиДанных = Отчеты.БалансМСФО.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Статьи;
	Запрос = Новый Запрос(НаборДанных.Запрос);
	Запрос.УстановитьПараметр("КонсолидированныйБаланс",КонсолидированныйБаланс);
	Запрос.УстановитьПараметр("ВыводитьЗабалансовыеСчета",ВыводитьЗабалансовыеСчета);
	//+++АК sils 10.10.2018 ИП-00019914
	Если ЭтоКОДДС Тогда
		Запрос.Текст = Отчеты.БалансМСФО.ИзменитьЗапросС_1_1_2018(Запрос.Текст);
		Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	КонецЕсли;
	//---АК
	Результат = Запрос.Выполнить().Выгрузить(); 
	СтруктураОтбора = Новый Структура("Статья",Раздел);
	Результат = Результат.Скопировать(СтруктураОтбора);	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстЗапросаБалансаМСФО()  Экспорт
	
	СхемаКомпоновкиДанных = Отчеты.БалансМСФО.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.ДанныеУчета;
	ИсходныйТекстЗапроса = НаборДанных.Запрос;	
	МассивВложенныхЗапросов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИсходныйТекстЗапроса,";");
	ТекстЗапроса = МассивВложенныхЗапросов[0]+ ";" + 
	               МассивВложенныхЗапросов[1]+ ";" +
				   МассивВложенныхЗапросов[2]+ ";" +
				   МассивВложенныхЗапросов[3]+ ";" +
				   СтрЗаменить(МассивВложенныхЗапросов[4],"ПОМЕСТИТЬ ВТ_ДанныеУчета","");
				   
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЭтоПростойЗапрос(КодСчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Финансовый.Ссылка
		|ИЗ
		|	ПланСчетов.Финансовый КАК Финансовый
		|ГДЕ
		|	Финансовый.Код = &Код
		|	И Финансовый.Код <> ""А60.4""
		|			И Финансовый.Код <> ""А60.7""
		|			И Финансовый.Код <> ""70""
		|			И Финансовый.Код <> ""58.1""
		|			И Финансовый.Код <> ""58.2""
		|			И НЕ Финансовый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(плансчетов.финансовый.расчетыспоставщикамииподрядчиками))
		|			И НЕ Финансовый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(плансчетов.финансовый.расчетыспокупателями))
		|			И НЕ Финансовый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(плансчетов.финансовый.РасчетыПоНалогам))
		|			И Финансовый.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗаймУчредителя)";
	
	Запрос.УстановитьПараметр("Код", КодСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТекстЗапросаБалансаПростой()  Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ФинансовыйОстаткиИОбороты.Счет.Код,
	|	ФинансовыйОстаткиИОбороты.ПериодМесяц,
	|	ВЫБОР
	|		КОГДА &УчитыватьКорректировкуМСФО
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт, 0) + ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокДт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокКт, 0) > 0
	|						ТОГДА ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт, 0) + ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокДт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокКт, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт, 0)
	|	КОНЕЦ КАК СуммаДт,
	|	ВЫБОР
	|		КОГДА &УчитыватьКорректировкуМСФО
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт, 0) + ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокКт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокДт, 0) > 0
	|						ТОГДА ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт, 0) + ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокКт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт, 0) - ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаМСФОКонечныйРазвернутыйОстатокДт, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ФинансовыйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт, 0)
	|	КОНЕЦ КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			ДвиженияИГраницыПериода,
	|			Счет.Код В (&Счета),
	|			,
	|			Организация.Код = ""000000004""
	|				ИЛИ Организация.Код = ""000000006"") КАК ФинансовыйОстаткиИОбороты";				   
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОтчетОПУ

Функция ПолучитьТекстЗапросаОПУ(ИмяРаздела,МассивЗапросовОПУ) Экспорт
	
	Для Каждого элементМассива из МассивЗапросовОПУ Цикл		
		Если элементМассива.Имя = ИмяРаздела Тогда
			Возврат элементМассива.Запрос; 
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТекстыЗапросаОПУ() Экспорт
	
	СхемаКомпоновкиДанных = Отчеты.ОтчетОПрибыляхИУбыткахМСФО.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Объединение;
	
	МассивРезультат = Новый Массив;
	
	Для каждого ЭлементНабора из НаборДанных.Элементы Цикл
		
		Структура = Новый Структура("Имя,Запрос");
		ЗаполнитьЗначенияСвойств(Структура,ЭлементНабора);
		КорректироватьЗапросОПУ(Структура);
		
		МассивРезультат.Добавить(Структура);
		
	КонецЦикла;	
	
	Возврат МассивРезультат;
	
КонецФункции

Функция ПолучитьСуммуРазделаОПУ(МассивЗапросов,ИмяРаздела,Измерение,ДатаНачала,ДатаОкончания) Экспорт
	
	ТекстЗапроса =  ОтчетностьМСФО.ПолучитьТекстЗапросаОПУ(ИмяРаздела,МассивЗапросов);
	//ДополнитьТекстЗпроса(ТекстЗапроса);
		
	Запрос = СоздатьЗапросОПУ(ТекстЗапроса);
	УстановитьПараметрыЗапросаОПУ(Запрос);
	Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",ДатаОкончания);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();;		
	
	Если Измерение = "СуммаМСФО" Тогда
		Возврат РезультатЗапроса.Итог("Сумма") + РезультатЗапроса.Итог("СуммаКорр");		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Итог(Измерение);
	
КонецФункции

Функция ПолучитьСуммуПоСтатьямРазделаОПУ(МассивЗапросов,ИмяРаздела,МассивСтатей,Измерение,ДатаНачала,ДатаОкончания) Экспорт
	
	ТекстЗапроса =  ОтчетностьМСФО.ПолучитьТекстЗапросаОПУ(ИмяРаздела,МассивЗапросов);
	//ДополнитьТекстЗпроса(ТекстЗапроса);
		
	Запрос = СоздатьЗапросОПУ(ТекстЗапроса);
	УстановитьПараметрыЗапросаОПУ(Запрос);
	Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",ДатаОкончания);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();;		
	
	Сумма = 0;
	Для каждого Строка из РезультатЗапроса Цикл
		//+++ AK suvv 13.08.2018 ИП-00019490
		ПоискСтатей = МассивСтатей.Найти(Строка.Аналитика_1);
		//--- AK suvv
		Если ПоискСтатей <> Неопределено Тогда
			Если Измерение = "Сумма" Тогда
				Сумма = Сумма + Строка.Сумма;	
			ИначеЕсли Измерение = "СуммаКорр" Тогда
				Сумма = Сумма + Строка.СуммаКорр;
			Иначе 	
			   	Сумма = Сумма + Строка.СуммаКорр + Строка.Сумма;
			КонецЕсли; 
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Функция СоздатьЗапросОПУ(ТекстЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	УстановитьПараметрыЗапросаОПУ(Запрос);
	
	Возврат Запрос;	
	 
КонецФункции

Процедура КорректироватьЗапросОПУ(Структура)
	
	//Если Структура.Имя <> "07_РасходыПоНалогуНаПрибыль" Тогда
		Структура.Запрос = СтрЗаменить(Структура.Запрос,"Таблица.Регистратор,","Ложь,");
		Структура.Запрос = СтрЗаменить(Структура.Запрос,"Таблица.Регистратор КАК","Ложь КАК");
	//КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаОПУ(Запрос)
	
	Запрос.УстановитьПараметр("СтатьяДР_ДоходыОтНачисленияПроцентов",Справочники.СтатьиДоходовРасходов.НайтиПоКоду("31017"));	
	Запрос.УстановитьПараметр("СтатьяДР_РезервНаДисконтированиеДепозитов",Справочники.СтатьиДоходовРасходов.НайтиПоКоду("21306"));	
	Запрос.УстановитьПараметр("ОрганизацииКО",Список(ОрганизацииКонсолидированныйБаланс()));
	Запрос.УстановитьПараметр("КонсолидированнаяОтчетность",Истина);
	Запрос.УстановитьПараметр("СтатьяДР_ПроцентыПолученные",Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39395"));
	Запрос.УстановитьПараметр("СтатьиОС",Справочники.СтатьиДоходовРасходов.НайтиПоКоду("391"));
	Запрос.УстановитьПараметр("КоммерческиеРасходы",Справочники.ВидыДоходовРасходов.НайтиПоКоду("000000001"));	
	//+++ AK suvv 2018.09.03 ИП-00019490
	Запрос.УстановитьПараметр("СтатьиДР_Инвестиции",Справочники.СтатьиДоходовРасходов.НайтиПоКоду("6    "));
	СписокСтатейИсключений_Инвестиции = Новый СписокЗначений;
	СписокСтатейИсключений_Инвестиции.Добавить(Справочники.СтатьиДоходовРасходов.НайтиПоКоду("61018")); //Амортизация НМА
	СписокСтатейИсключений_Инвестиции.Добавить(Справочники.СтатьиДоходовРасходов.НайтиПоКоду("61014")); //Выбытие ОС
	Запрос.УстановитьПараметр("СписокСтатейИсключений_Инвестиции", СписокСтатейИсключений_Инвестиции);
	//--- AK suvv
КонецПроцедуры

#КонецОбласти

#Область ФиксированныеОбороты 

Функция ПолучитьСуммуНалогНаПрибыль(ДатаНачала,ДатаОкончания) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕстьNULL(ФинансовыйОборотыДтКт.СуммаОборот,0) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.НалогиУН),
		|			,
		|			СчетКт В Иерархии (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Банк)),
		|			,
		|			СубконтоДт2 В (&СубконтоДт2)
		|				И Организация В (&Организации)) КАК ФинансовыйОборотыДтКт";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организации", Список(ОтчетностьМСФО.ОрганизацииКонсолидированныйБаланс()));
	СписокСубконто2 = Новый СписокЗначений;
	СписокСубконто2.Добавить(Справочники.ВидыНалогов.НайтиПоКоду("000000002"));
	СписокСубконто2.Добавить(Справочники.ВидыНалогов.НайтиПоКоду("000000003"));	
	Запрос.УстановитьПараметр("СубконтоДт2", СписокСубконто2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат  ВыборкаДетальныеЗаписи.Сумма;
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция ПолучитьПроцентыПолученные(Измерение,ДатаНачала,ДатаОкончания) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОбороты.СуммаМСФООборот КАК СуммаКорр,
		|	ФинансовыйОбороты.СуммаОборот КАК Сумма,
		|	ФинансовыйОбороты.СуммаОборот + ФинансовыйОбороты.СуммаМСФООборот КАК СуммаМСФО
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ВыручкаПрочая),
		|			,
		|			Субконто2 = &СтатьяДР
		|				И Организация В (&Организации),
		|			,
		|			) КАК ФинансовыйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организации", Список(ОтчетностьМСФО.ОрганизацииКонсолидированныйБаланс()));
	Запрос.УстановитьПараметр("СтатьяДР", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39395"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
	Возврат РезультатЗапроса.Итог(Измерение);
	
КонецФункции

Функция ПолучитьИзменениеЗаемныхСредствСвязанныхСторон(Измерение,ДатаНачала,ДатаОкончания) Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ФинансовыйОбороты.СуммаОборотДт + ФинансовыйОбороты.СуммаМСФООборотДт КАК СуммаДт,
	//	|	ФинансовыйОбороты.СуммаОборотКт + ФинансовыйОбороты.СуммаМСФООборотКт КАК СуммаКт
	//	|ИЗ
	//	|	РегистрБухгалтерии.Финансовый.Обороты(
	//	|			&ДатаНачала,
	//	|			&ДатаОкончания,
	//	|			,
	//	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеЗаймыВыданные),
	//	|			,
	//	|			Субконто1 В (&ОтборСубконто)
	//	|				И Организация В (&ОтборОрганизации),
	//	|			,
	//	|			) КАК ФинансовыйОбороты";
	//
	//Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	//Запрос.УстановитьПараметр("ОтборОрганизации", Список(ОтчетностьМСФО.ОрганизацииКонсолидированныйБаланс()));
	//Запрос.УстановитьПараметр("ОтборСубконто",Список(ОтчетностьМСФО.СвязанныеСтороны()));
	//
	//РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//
	//Сумма = РезультатЗапроса.Итог(Измерение);
	
	Сумма = 0;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		|	ФинансовыйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		|	ФинансовыйОстаткиИОбороты.СуммаОборотДт,
		|	ФинансовыйОстаткиИОбороты.СуммаОборотКт,
		|	ФинансовыйОстаткиИОбороты.СуммаМСФОНачальныйОстатокДт,
		|	ФинансовыйОстаткиИОбороты.СуммаМСФОНачальныйОстатокКт,
		|	ФинансовыйОстаткиИОбороты.СуммаМСФООборотДт,
		|	ФинансовыйОстаткиИОбороты.СуммаМСФООборотКт,
		|	ФинансовыйОстаткиИОбороты.СуммаНачальныйОстатокДт + ФинансовыйОстаткиИОбороты.СуммаОборотДт + ФинансовыйОстаткиИОбороты.СуммаМСФОНачальныйОстатокДт + ФинансовыйОстаткиИОбороты.СуммаМСФООборотДт КАК СуммаДт,
		|	ФинансовыйОстаткиИОбороты.СуммаНачальныйОстатокКт + ФинансовыйОстаткиИОбороты.СуммаОборотКт + ФинансовыйОстаткиИОбороты.СуммаМСФОНачальныйОстатокКт + ФинансовыйОстаткиИОбороты.СуммаМСФООборотКт КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.КредитыПолученные),
		|			,
		|			Субконто2 В (&ОтборСубконто2)
		|				И Организация В (&ОтборОрганизация)) КАК ФинансовыйОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ОтборОрганизация", Список(ОтчетностьМСФО.ОрганизацииКонсолидированныйБаланс()));
	Запрос.УстановитьПараметр("ОтборСубконто2", ОтчетностьМСФО.СвязанныеСтороны());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Сумма = Сумма + РезультатЗапроса.Итог(Измерение);

	Возврат Сумма;
	
КонецФункции

//+++АК sils 10.10.2018 ИП-00019914
//Функция ПолучитьАмортизацию(Измерение,ДатаНачала,ДатаОкончания) Экспорт
Функция ПолучитьАмортизацию(Измерение,ДатаНачала,ДатаОкончания, ЭтоКОДДС = Ложь) Экспорт
//---АК	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОбороты.СуммаОборотКт КАК Сумма,
		|	ФинансовыйОбороты.СуммаМСФООборотКт КАК СуммаКорр,
		|	ФинансовыйОбороты.СуммаОборотКт + ФинансовыйОбороты.СуммаМСФООборотКт КАК СуммаМСФО
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(&ДатаНачала, &ДатаОкончания, , Счет В ИЕРАРХИИ (&ГруппаАмортизация), , Организация В (&Организации), , ) КАК ФинансовыйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организации", Список(ОтчетностьМСФО.ОрганизацииКонсолидированныйБаланс()));
	//+++АК sils 10.10.2018 ИП-00019914
	//Запрос.УстановитьПараметр("ГруппаАмортизация",ПланыСчетов.Финансовый.НайтиПоКоду("02"));
	Если ЭтоКОДДС Тогда
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("02"));
		Если ДатаНачала >= '20180101' Тогда
			СЗ.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("04"));
		КонецЕсли;
		Запрос.УстановитьПараметр("ГруппаАмортизация", СЗ);
	Иначе
		Запрос.УстановитьПараметр("ГруппаАмортизация",ПланыСчетов.Финансовый.НайтиПоКоду("02"));
	КонецЕсли;
	//---АК
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.Итог(Измерение);
	
КонецФункции

Функция ПолучитьПриобретениеНематериальныхАктивов(ДатаНачала,ДатаОкончания) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОбороты.СуммаОборотДт,
		|	ФинансовыйОбороты.СуммаМСФООборотДт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(&ДатаНачала, &ДатаОкончания, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредстваУчетНМА), , Организация В (&Организации), , ) КАК ФинансовыйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организации",Список(ОрганизацииКонсолидированныйБаланс()));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат  РезультатЗапроса.Итог("СуммаОборотДт") +  РезультатЗапроса.Итог("СуммаМСФООборотДт");
	
КонецФункции

Функция ПолучитьПоступленияОтПродажиОС(Измерение,ДатаНачала,ДатаОкончания)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОбороты.СуммаОборотДт КАК СуммаДт,
		|	ФинансовыйОбороты.СуммаОборотКт КАК СуммаКт,
		|	ФинансовыйОбороты.СуммаМСФООборотДт КАК СуммаКоррДт,
		|	ФинансовыйОбороты.СуммаМСФООборотКт КАК СуммаКоррКт,
		|	ФинансовыйОбороты.СуммаОборотДт + ФинансовыйОбороты.СуммаМСФООборотДт КАК СуммаМСФОДт,
		|	ФинансовыйОбороты.СуммаОборотКт + ФинансовыйОбороты.СуммаМСФООборотКт КАК СуммаМСФОКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(&ДатаНачала, &ДатаОкончания, Авто, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ВыручкаПрочая), , Субконто2 В (&СтатьяДР), , ) КАК ФинансовыйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("СтатьяДР", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("10110"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат  РезультатЗапроса.Итог(Измерение);
	
КонецФункции

Функция ПолучитьСуммуЗаймыВыданныеСвязаннымСторонам(ДатаНачала,ДатаОкончания,Измерение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОбороты.СуммаОборотДт КАК СуммаДт,
		|	ФинансовыйОбороты.СуммаОборотКт КАК СуммаКт,
		|	ФинансовыйОбороты.СуммаОборотДт + ФинансовыйОбороты.СуммаМСФООборотДт КАК СуммаМСФОДт,
		|	ФинансовыйОбороты.СуммаОборотКт + ФинансовыйОбороты.СуммаМСФООборотКт КАК СуммаМСФОКт,
		|	ФинансовыйОбороты.СуммаМСФООборотКт КАК СуммаКоррКт,
		|	ФинансовыйОбороты.СуммаМСФООборотДт КАК СуммаКоррДт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеЗаймыВыданные),
		|			,
		|			Субконто1 В (&СписокСубконто)
		|				И Организация В (&Организации),
		|			,
		|			) КАК ФинансовыйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организации", Список(ОтчетностьМСФО.ОрганизацииКонсолидированныйБаланс()));
	Запрос.УстановитьПараметр("СписокСубконто", Список(ОтчетностьМСФО.СвязанныеСтороны()));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат  РезультатЗапроса.Итог(Измерение)
	
КонецФункции

Функция ПолучитьСуммуЗаймыВыданныеТретьимЛицам(ДатаНачала,ДатаОкончания,Измерение) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОбороты.СуммаОборотДт КАК СуммаДт,
		|	ФинансовыйОбороты.СуммаОборотКт КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеЗаймыВыданные),
		|			,
		|			НЕ Субконто1 В (&СвязанныеСтороны)
		|				И НЕ Субконто1 В (&Банки)
		|				И Организация В (&Организации),
		|			,
		|			) КАК ФинансовыйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организации", Список(ОрганизацииКонсолидированныйБаланс()));	
	СвязанныеСтороны = ОтчетностьМСФО.СвязанныеСтороны();
	
	Запрос.УстановитьПараметр("СвязанныеСтороны", Список(ОтчетностьМСФО.СвязанныеСтороны()));
	Запрос.УстановитьПараметр("Банки", Список(ОтчетностьМСФО.КонтрагентыБанки(ДатаОкончания)));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат  РезультатЗапроса.Итог(Измерение)
	
КонецФункции	


#КонецОбласти

#Область ОтчетДДС

Функция Счет(КодСчета)
	
	НайденныйСчет = ПланыСчетов["Финансовый"].НайтиПоКоду(КодСчета);
	
	Если НайденныйСчет = Неопределено Тогда
		ВызватьИсключение "Ошибка. Не определен счет " + КодСчета + " в соответствии счетов";
	КонецЕсли;
	
	Возврат НайденныйСчет;
	
КонецФункции

//Процедура ИтоговыйРезультатОДДС(мБухИтоги,НачалоПериодаОтчета, КонецПериодаОтчета)
//	
//	СчетаДДС = Новый Массив;
//	СчетаДДС.Добавить(Счет("50"));
//	СчетаДДС.Добавить(Счет("51"));
//	СчетаДДС.Добавить(Счет("57"));
//		
//	// Бухгалтерские итоги и оборты по счетам по аналитике "Статья движения денежных средств"
//	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт";
//	мБухИтоги.РассчитатьИтоги("Финансовый", Итоги, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаДДС, , , , "Организация", мОрганизация);
//	
//	// Обороты между счетами
//	ИтогиРС = "КорОборотДт, КорОборотКт";
//	мБухИтогиРС.РассчитатьИтоги("Финансовый", ИтогиРС, "Сумма", "Счет, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , , , , , "Организация",мОрганизация);

//	
//	ТЗнОборотыШаблон = Новый ТаблицаЗначений;
//	ТЗнОборотыШаблон.Колонки.Добавить("Знак");
//	ТЗнОборотыШаблон.Колонки.Добавить("СчётДт");
//	ТЗнОборотыШаблон.Колонки.Добавить("СчётКт");
//	
//	ПараметрыВывода = Новый Структура;
//	
//	НомерСтроки        = "4111";
//	НаименованиеСтроки = "поступления от продажи продукции, товаров, работ и услуг";
//	ФормулаРасчета     = "ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "90"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "90"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "-", "90", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "-", "60", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "62.ВГ"));
//	
//	
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ТаблицаРасчет,ПараметрыВывода);
//	
//	НомерСтроки        = "4112";
//	НаименованиеСтроки = "поступления от арендных платежей, лицензионных платежей, роялти, комиссионных и иных аналогичных платежей";
//	ФормулаРасчета     = "ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "62.2"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "62.2"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "-", "62.2", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "-", "62.2", "51"));
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ТаблицаРасчет,ПараметрыВывода);
//	
//	НомерСтроки        = "4119";
//	НаименованиеСтроки = "прочие поступления";
//	ФормулаРасчета     = "ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "44"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "60"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "68"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "70"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "71"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "76"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "44"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "58"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "60"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "70"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "71"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "62.1"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "62.1"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "-", "62.1", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "-", "62.1", "51"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "44"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "71"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "50", "80"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "80"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "58"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "76"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "80"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "68.2"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "57", "68.1"));
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ТаблицаРасчет,ПараметрыВывода);
//	
//	НомерСтроки        = "4121";
//	НаименованиеСтроки = "платежи поставщикам (подрядчикам) за сырье, материалы, работы, услуги";
//	ФормулаРасчета     = "-ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "60", "51"));
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ТаблицаРасчет,ПараметрыВывода);
//	
//	НомерСтроки        = "4122";
//	НаименованиеСтроки = "платежи в связи с оплатой труда работников";
//	ФормулаРасчета     = "-ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "70", "51"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "68.1", "51"));
//	//+++АК sils ИП-00016013
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "68.1", "57"));
//	//---АК
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "70", "50"));
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ТаблицаРасчет,ПараметрыВывода);
//	
//	НомерСтроки        = "4123";
//	НаименованиеСтроки = "уплата процентов по долговым обязательствам";
//	ФормулаРасчета     = "-ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4124";
//	НаименованиеСтроки = "уплата налога на прибыль";
//	ФормулаРасчета     = "-ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "68.2", "51"));
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ТаблицаРасчет,ПараметрыВывода);
//	
//	НомерСтроки        = "4129";
//	НаименованиеСтроки = "прочие платежи";
//	ФормулаРасчета     = "-ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "76", "51"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "71", "51"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "44", "51"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "44", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "71", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "44", "57"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "71", "57"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "80", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "80", "51"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "76", "57"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "80", "57"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "68.2", "57"));
//	//ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "68.1", "57"));

//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ТаблицаРасчет,ПараметрыВывода);
//	
//	НомерСтроки        = "4211";
//	НаименованиеСтроки = "поступления от продажи внеоборотных активов (кроме финансовых вложений)";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4212";
//	НаименованиеСтроки = "поступления от продажи акций (долей участия) в других организациях";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4213";
//	НаименованиеСтроки = "поступления от возврата предоставленных займов, от продажи долговых ценных бумаг (прав требования денежных средств к другим лицам)";
//	ФормулаРасчета     = "ОБ";
//	
//	НомерСтроки        = "4214";
//	НаименованиеСтроки = "поступление дивидендов, процентов по долговым финансовым вложениям и аналогичных поступлений от долевого участия в других организациях";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4219";
//	НаименованиеСтроки = "прочие поступления";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4221";
//	НаименованиеСтроки = "платежи в связи с приобретением, созданием, модернизацией, реконструкцией и подготовкой к использованию внеоборотных активов";
//	ФормулаРасчета     = "-ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4222";
//	НаименованиеСтроки = "платежи в связи с приобретением акций (долей участия) в других организациях";
//	ФормулаРасчета     = "-ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4223";
//	НаименованиеСтроки = "платежи в связи с приобретением долговых ценных бумаг (прав требования денежных средств к другим лицам), предоставление займов другим лицам";
//	ФормулаРасчета     = "-ОБ";
//		
//	НомерСтроки        = "4224";
//	НаименованиеСтроки = "выплата процентов по долговым обязательствам, включаемым в стоимость инвестиционного актива";
//	ФормулаРасчета     = "-ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4229";
//	НаименованиеСтроки = "прочие платежи";
//	ФормулаРасчета     = "-ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4311";
//	НаименованиеСтроки = "получение кредитов и займов";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4312";
//	НаименованиеСтроки = "поступление денежных вкладов собственников (участников)";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4313";
//	НаименованиеСтроки = "поступления от выпуска акций, увеличения долей участия";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4314";
//	НаименованиеСтроки = "поступления от выпуска облигаций, вескелей и других долговых ценных бумаг и др.";
//	ФормулаРасчета     = "ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4319";
//	НаименованиеСтроки = "прочие поступления";
//	ФормулаРасчета     = "ОБ";
//	

//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "51", "58"));
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	
//	НомерСтроки        = "4321";
//	НаименованиеСтроки = "платежи собственникам (участникам) в связи с выкупом у них акций (долей участия) организации или их выходом из состава участников";
//	ФормулаРасчета     = "-ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4322";
//	НаименованиеСтроки = "на выплату дивидендов и иных платежей по распределению прибыли в пользу собственников (участников)";
//	ФормулаРасчета     = "-ОБ";
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	//ВывестиСтрокуОДДС(ПараметрыВывода);
//	
//	НомерСтроки        = "4323";
//	НаименованиеСтроки = "платежи в связи с погашением (выкупом) векселей и других долговых ценных бумаг, возврат кредитов и займов";
//	ФормулаРасчета     = "-ОБ";
//	
//	ТЗнОбороты = ТЗнОборотыШаблон.Скопировать();
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "58", "50"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "58", "51"));
//	ЗаполнитьЗначенияСвойств(ТЗнОбороты.Добавить(), Новый Структура("Знак,СчётДт,СчётКт", "+", "58", "57"));
//	ПараметрыВывода.Вставить("ТЗнОбороты", ТЗнОбороты);
//	
//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
//	ВывестиСтрокуОДДС(ПараметрыВывода);

//	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
//	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
//	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);

//	
//КонецПроцедуры

Функция ВывестиСтрокуОДДС(мИтоговыйРезультатОДДС,ПараметрыВывода)
	
	НомерСтроки        = ПараметрыВывода.НомерСтроки;
	НаименованиеСтроки = ПараметрыВывода.НаименованиеСтроки;
	ФормулаРасчета     = ПараметрыВывода.ФормулаРасчета;
	ТЗнОбороты         = ПараметрыВывода.ТЗнОбороты;
	
	Вычитаемый = (ФормулаРасчета = "-ОБ");
	
	ЗначениеПоказателя = 0;
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого СтрокаТЗнОбороты Из ТЗнОбороты Цикл
						
		СчётДт = Счет(СтрокаТЗнОбороты.СчётДт);
		СчётКт = Счет(СтрокаТЗнОбороты.СчётКт);
		ЗнакПоказателя = СтрокаТЗнОбороты.Знак;
		Слагаемое = ОтчетностьМСФО.ОБ(СчётДт, СчётКт,);
		Слагаемое = ?(ЗнакПоказателя = "-", -Слагаемое, Слагаемое);
			
		НаименованиеСоставляющей = "!ОБ"; 
		ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
									
	КонецЦикла;
	
	ДобавитьВТаблицуОДДС(мИтоговыйРезультатОДДС,НомерСтроки,ЗначениеПоказателя);	
	
КонецФункции

Процедура ДобавитьВТаблицуОДДС(мИтоговыйРезультатОДДС,НомерСтроки,ЗначениеПоказателя)

	СтруктураПоиска = Новый Структура("НомерСтроки",НомерСтроки);
	ПоискСтрока =  мИтоговыйРезультатОДДС.НайтиСтроки(СтруктураПоиска);	
	
	Если ПоискСтрока.Количество()>0 Тогда
		Строка = ПоискСтрока[0];
	Иначе 	
	    Строка = мИтоговыйРезультатОДДС.Добавить();
		Строка.НомерСтроки = НомерСтроки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Сумма) Тогда
		Строка.Сумма = Строка.Сумма+ЗначениеПоказателя;
	Иначе
		Строка.Сумма = ЗначениеПоказателя;
	КонецЕсли;	
	
КонецПроцедуры

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(мБухИтоги,Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНК(мБухИтоги,Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(мБухИтоги,Знач Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКК(мБухИтоги,Знач Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции

Функция СНДВ(мБухИтоги,Счет, ВидИтогов = "С", Валюта = Неопределено)

	Перем Итог;

	Если ВидИтогов = "С" Тогда
		Если Валюта = Неопределено Тогда
			// Сумма в рублях
			Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);
		Иначе
			// Суммах в рубюлях по валюте
			Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет, Валюта", Счет, Валюта);
		КонецЕсли;
	ИначеЕсли ВидИтогов = "В" Тогда
		// Валютная сумма
		Итог = мБухИтоги.ПолучитьИтог("ВалютнаяСуммаНачальныйОстатокДт", "Счет, Валюта", Счет, Валюта);
	КонецЕсли;

	Возврат Итог;

КонецФункции // СНДВ()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(мБухИтоги,мБухИтогиРС,СчетД, СчетК, БухИтоги = Неопределено)

	Перем Итог;

	//Если ТипЗнч(СчетД) = Тип("Строка") Тогда
	//	Если мСчет[СчетД] = Неопределено Тогда
	//		Предупреждение("Ошибка. Не определен счет " + СчетД + " в соответствии счетов");
	//	КонецЕсли;
	//	СчетД = мСчет[СчетД];
	//КонецЕсли;
	//
	//Если ТипЗнч(СчетК) = Тип("Строка") Тогда
	//	Если мСчет[СчетК] = Неопределено Тогда
	//		Предупреждение("Ошибка. Не определен счет " + СчетК + " в соответствии счетов");
	//	КонецЕсли;
	//	СчетК = мСчет[СчетК];
	//КонецЕсли;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
	КонецЕсли;

	Возврат Итог;

КонецФункции

#КонецОбласти
