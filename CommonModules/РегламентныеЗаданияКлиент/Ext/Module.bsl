
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СИСТЕМНЫХ СОБЫТИЙ
//

// Обработчик события ПриНачалеРаботыСистемы вызывается
// для выполнения действий, требуемых для подсистемы РегламентныеЗадания.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	Если Найти(ПараметрЗапуска, "DoScheduledJobs") <> 0 Тогда
		Предупреждать  = (Найти(ПараметрЗапуска, "SkipMessageBox") =  0);
		ОтдельныйСеанс = (Найти(ПараметрЗапуска, "AloneIBSession") <> 0);
		#Если ВебКлиент Тогда
			ЗавершитьРаботуСистемы(Ложь);
		#КонецЕсли
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			ЗаданияВыполняютсяНормально = Неопределено;
			ОписаниеОшибки = "";
			Если РегламентныеЗаданияСервер.ТекущийСеансВыполняетРегламентныеЗадания(ЗаданияВыполняютсяНормально, Истина, ОписаниеОшибки) Тогда
				УстановитьЗаголовокПриложения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнение регламентных заданий: %1'"),
				                                                                                      ПолучитьЗаголовокПриложения() ));
				Если ОтдельныйСеанс Тогда
					// Выполнять в отдельном сеансе.
					ОсновноеОкно = ОсновноеОкно();
					Если ОсновноеОкно = Неопределено Тогда
						ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РабочийСтолОтдельногоСеансаВыполненияРегламентныхЗаданий" );
					Иначе
						ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РабочийСтолОтдельногоСеансаВыполненияРегламентныхЗаданий",,,, ОсновноеОкно);
					КонецЕсли;
					Если ОткрытьФормуМодально("Обработка.РегламентныеИФоновыеЗадания.Форма.ВыполнениеРегламентныхЗаданий") = "Перезапустить" Тогда
						ЗавершитьРаботуСистемы(Ложь, Истина, " /C""" + ПараметрЗапуска + """");
					КонецЕсли;
					ЗавершитьРаботуСистемы(Ложь);
				Иначе
					// Выполнять в этом сеансе.
					ПодключитьОбработчикОжидания("ВыполнениеРегламентныхЗаданийВОсновномСеансе", 1, Истина);
				КонецЕсли;
			Иначе
				Если Предупреждать Тогда
					Если ЗаданияВыполняютсяНормально Тогда
						Предупреждение(НСтр("ru = 'Сеанс, обрабатывающий регламентные задания, уже открыт!'"));
					Иначе
						Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сеанс, выполняющий регламентные задания, уже открыт!
						                                                                                  | 
						                                                                                  |%1'"), ОписаниеОшибки ));
					КонецЕсли;
				КонецЕсли;
				Если ОтдельныйСеанс Тогда
					ЗавершитьРаботуСистемы(Ложь);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Предупреждать Тогда
				Предупреждение(НСтр("ru = 'Регламентные задания выполняются на сервере!'"));
			КонецЕсли;
			Если ОтдельныйСеанс Тогда
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		ПараметрыТолькоЧтение = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий;
		
		Если ПараметрыТолькоЧтение.Отказ Тогда
			ПриОшибкеВыполненияРегламентныхЗаданий(ПараметрыТолькоЧтение.ОписаниеОшибки);
		ИначеЕсли ПараметрыТолькоЧтение.ТребуетсяОткрытьОтдельныйСеанс Тогда
			ПодключитьОбработчикОжидания("ЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданийЧерезОбработчикОжидания", 1, Истина);
		КонецЕсли;
		
		Если ПараметрыТолькоЧтение.УведомлятьОНекорректномВыполнении Тогда
			ПодключитьОбработчикОжидания("УведомлятьОНекорректномВыполненииРегламентныхЗаданий", ПараметрыТолькоЧтение.ПериодУведомления * 60, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРИКЛАДНОГО РАЗРАБОТЧИКА
//

// Функция ЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий() запускает новый сеанс,
// выполняющий регламентные задания.
//  Только для тонкого и обычного клиентов (Web не поддерживается).
//
// Возвращаемое значение:
//  Структура
//    Отказ             - Булево.
//    ОписаниеОшибки    - Строка.
// 
Функция ЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий() Экспорт
                                                          
	Параметры = РегламентныеЗаданияСервер.ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Ложь);
	
	Если НЕ Параметры.Отказ И Параметры.ТребуетсяОткрытьОтдельныйСеанс Тогда
		ПопыткаЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Функция ПолучитьРасписаниеРегламентногоЗадания возвращает
// расписание регламентного задания по идентификатору
//
// Параметры:
//  Идентификатор - Строка уникального идентификатора РегламентногоЗадания
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания
//
Функция ПолучитьРасписаниеРегламентногоЗадания(Знач Идентификатор) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(РегламентныеЗаданияСервер.ПолучитьРасписаниеРегламентногоЗаданияВСтруктуре(Идентификатор));
	
КонецФункции

// Функция УстановитьРасписаниеРегламентногоЗадания устанавливает
// расписание регламентного задания по идентификатору
//
// Параметры:
//  Идентификатор - Строка уникального идентификатора РегламентногоЗадания
//  Расписание    - РасписаниеРегламентногоЗадания
//
Процедура УстановитьРасписаниеРегламентногоЗадания(Знач Идентификатор, Знач Расписание) Экспорт
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗаданияИзСтруктуры(Идентификатор, ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ
//

// Процедура ПопыткаЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий()
// делает попытку открытия нового сеанса, обрабатывающего регламентные задания.
//
// Параметры:
//  Параметры    - Структура, используемые свойства:
//                   ДополнительныеПараметрыКоманднойСтроки - Строка.
//                   Отказ                                  - Булево, выходной параметр.
//                   ОписаниеОшибки                         - Строка, выходной параметр.
// 
Процедура ПопыткаЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий(Знач Параметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		Попытка
			Параметры.ВыполненаПопыткаОткрытия = Истина;
			ЗапуститьСистему(
				?(Найти(ВРег(ПараметрЗапуска), "/DEBUG") = 0, "", "/DEBUG ")
				+ Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Исключение
			Параметры.ОписаниеОшибки = ОписаниеОшибки();
			Параметры.Отказ = Истина;
		КонецПопытки;
	#Иначе
		Параметры.Отказ = Истина;
		Параметры.ОписаниеОшибки = НСтр("ru = 'Выполнение регламентных заданий в
		                                      |отдельном сеансе веб-клиента невозможна!
		                                      |
		                                      |Для выполнения регламентных заданий, необходимо,
		                                      |чтобы администратор настроил запуск обычного
		                                      |или тонкого клиента на веб-сервере!'");
	#КонецЕсли
	Параметры.ОписаниеОшибки =
		?(ПустаяСтрока(Параметры.ОписаниеОшибки),
		  "",
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия сеанса для выполнения регламентных заданий:
				           |
				           |%1'"),
				Параметры.ОписаниеОшибки));
	
КонецПроцедуры

// Процедура ПриОшибкеВыполненияРегламентныхЗаданий вызывается
// из процедуры РегламентныеЗаданияГлобальный.УведомлятьОНекорректномВыполненииРегламентныхЗаданий()
// и РегламентныеЗаданияКлиент.ПриНачалеРаботыСистемы().
//  Вызов происходит, если обнаружено, что что-то не так в выполнении регламентных заданий:
// нет сеанса выполнения или сеанс есть, но "висит" (долго "не работает").
//
// Параметры:
//  ОписаниеОшибки - Строка
//
Процедура ПриОшибкеВыполненияРегламентныхЗаданий(ОписаниеОшибки) Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий.ТекущийПользовательАдминистратор Тогда
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Регламентные задания не выполняются.'"),
				"e1cib/app/Обработка.РегламентныеИФоновыеЗадания",
				ОписаниеОшибки,
				БиблиотекаКартинок.ОшибкаВыполненияРегламентныхЗаданий);
	Иначе
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Регламентные задания не выполняются.'"),
				,
				ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Обратитесь к администратору.'"),
				БиблиотекаКартинок.ОшибкаВыполненияРегламентныхЗаданий);
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура ПодключитьГлобальныйОбработчикОжидания() применяется
// из экранных форм, т.к. в модуле формы метод переопределен.
//
Процедура ПодключитьГлобальныйОбработчикОжидания(ИмяПроцедуры, Интервал, Однократно = Ложь) Экспорт

	ПодключитьОбработчикОжидания(ИмяПроцедуры, Интервал, Однократно);
	
КонецПроцедуры

// Процедура ОтключитьГлобальныйОбработчикОжидания() применяется
// из экранных форм, т.к. в модуле формы метод переопределен.
//
Процедура ОтключитьГлобальныйОбработчикОжидания(ИмяПроцедуры) Экспорт
	
	ОтключитьОбработчикОжидания(ИмяПроцедуры);

КонецПроцедуры

// Процедура предназначена для внутреннего использования
Функция ОсновноеОкно() Экспорт
	
	ОсновноеОкно = Неопределено;
	
	Окна = ПолучитьОкна();
	Если Окна <> Неопределено Тогда
		Для каждого Окно Из Окна Цикл
			Если Окно.Основное Тогда
				ОсновноеОкно = Окно;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОсновноеОкно;
	
КонецФункции

Процедура ОтправитьСообщениеОбИсполненыхПлатежныхПоручений() Экспорт
	
	ТаблицаУведомлений = Новый ТаблицаЗначений;
	ТаблицаУведомлений.Колонки.Добавить("Документ");
	ТаблицаУведомлений.Колонки.Добавить("Контрагент");
	ТаблицаУведомлений.Колонки.Добавить("ЭлАдрес");
	ТаблицаУведомлений.Колонки.Добавить("ИмяФайла");
	
	ТекущийДеньНедели = ДеньНедели(ТекущаяДата());
	
	Если ТекущийДеньНедели = 1 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24*3;	
	ИначеЕсли ТекущийДеньНедели = 2 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	ИначеЕсли ТекущийДеньНедели = 3 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	ИначеЕсли ТекущийДеньНедели = 4 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	ИначеЕсли ТекущийДеньНедели = 5 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходИзБанка.Ссылка,
	               |	РасходИзБанка.Контрагент
	               |ПОМЕСТИТЬ ТЗ_ИсполненныеПП
	               |ИЗ
	               |	Документ.РасходИзБанка КАК РасходИзБанка
	               |ГДЕ
	               |	РасходИзБанка.Проведен
	               |	И РасходИзБанка.Оплачено
	               |	И РасходИзБанка.ДатаОплаты МЕЖДУ &ДатаНач И &ДатаКон
	               |	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
	               |	И (РасходИзБанка.Контрагент.Родитель = &Родитель
	               |			ИЛИ РасходИзБанка.Контрагент.Родитель.Родитель = &Родитель
	               |			ИЛИ РасходИзБанка.Контрагент.Родитель.Родитель.Родитель = &Родитель
	               |			ИЛИ РасходИзБанка.Контрагент.Родитель.Родитель.Родитель.Родитель = &Родитель)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Объект
	               |ПОМЕСТИТЬ ТЗ_ПочтовыеАдресаКонтрагентов
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект В
	               |			(ВЫБРАТЬ
	               |				ТЗ_ИсполненныеПП.Контрагент
	               |			ИЗ
	               |				ТЗ_ИсполненныеПП КАК ТЗ_ИсполненныеПП)
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_ИсполненныеПП.Ссылка КАК Документ,
	               |	ТЗ_ИсполненныеПП.Контрагент,
	               |	ЕСТЬNULL(ТЗ_ПочтовыеАдресаКонтрагентов.Представление, """") КАК ЭлАдрес
	               |ИЗ
	               |	ТЗ_ИсполненныеПП КАК ТЗ_ИсполненныеПП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ПочтовыеАдресаКонтрагентов КАК ТЗ_ПочтовыеАдресаКонтрагентов
	               |		ПО ТЗ_ИсполненныеПП.Контрагент = ТЗ_ПочтовыеАдресаКонтрагентов.Объект";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОплаты));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОплаты));
    Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Запрос.УстановитьПараметр("Родитель", Справочники.Контрагенты.НайтиПоНаименованию("Поставщики ТОВАРА"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если НЕ ЗначениеЗаполнено(Выборка.ЭлАдрес) Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = ТаблицаУведомлений.Добавить();
	    ЗаполнитьЗначенияСвойств(НовСтрока, Выборка); 
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаУведомлений Цикл
		ОбъектДок = Строка.Документ.ПолучитьОбъект();
		ТабДок = ОбъектДок.ПечатьПлатежногоПоручения();
		мИмяФайла = КаталогВременныхФайлов() + Строка.Документ.Номер + ".PDF";
		Попытка
			ТабДок.Записать(мИмяФайла, ТипФайлаТабличногоДокумента.PDF); 
			Строка.ИмяФайла = мИмяФайла;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();  // no-reply@vkusvill.ru
	Для Каждого Строка Из ТаблицаУведомлений Цикл		
		
		НомерПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(Строка.Документ);
		
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Попытка
			Почта.Подключиться(Профиль);
			Письмо.Тема 			= Строка(Строка.Документ.Организация) + ". Выполненное платежное поручение №" + НомерПечать;
			Письмо.ИмяОтправителя  	= СокрЛП(УчетнаяЗапись.Наименование);
			Письмо.Отправитель     	= Письмо.ИмяОтправителя;
			МассивЭлАдресов = РазобратьСтрокуЭлАдресов(Строка.ЭлАдрес);
			Для Каждого ЭлАдрес Из МассивЭлАдресов Цикл
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес           = ЭлАдрес;
				Получатель.ОтображаемоеИмя = Строка(Строка.Документ.Контрагент);
			КонецЦикла;;
			
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     =  Строка(Строка.Документ.Организация) + ". Выполненное платежное поручение №" + НомерПечать;
			//ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст; 			
			
			Письмо.Вложения.Добавить(Строка.ИмяФайла, НомерПечать);			
			
			Почта.Послать(Письмо);
			Почта.Отключиться();
			
		Исключение
			Продолжить;
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ВременныйФайл = Новый Файл(Строка.ИмяФайла);          
		Если ВременныйФайл.Существует() Тогда
			Попытка
				УдалитьФайлы(Строка.ИмяФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ОбъектДок = Строка.Документ.ПолучитьОбъект();
		ОбъектДок.ОбменДанными.Загрузка = Истина;
		ОбъектДок.СообщениеКлиентуОтправлено = Истина;
		ОбъектДок.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция РазобратьСтрокуЭлАдресов(Знач СтрокаЭлАдресов)
	МассивВозврата = Новый Массив;
	Если ТипЗнч(СтрокаЭлАдресов) <> Тип("Строка") Тогда
		Возврат МассивВозврата;
	КонецЕсли;
	Пока СтрДлина(СтрокаЭлАдресов) > 0 Цикл
		ПозицияРазделителя = Найти(СтрокаЭлАдресов, ";");
		Если ПозицияРазделителя > 1 Тогда
			МассивВозврата.Добавить(Лев(СтрокаЭлАдресов,ПозицияРазделителя -1));
			СтрокаЭлАдресов = СокрЛП(Сред(СтрокаЭлАдресов, ПозицияРазделителя + 1));
		Иначе
			МассивВозврата.Добавить(СтрокаЭлАдресов);
			СтрокаЭлАдресов = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции	
	
