Процедура ЗагрузитьТТ() Экспорт
	СтрСоединенияДанныеТовародвижение = ПолучитьСтрокуСоединения("ДанныеТовародвижение");
//	СтрСоединенияДанныеТовародвижение = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D:\Izbenka\База\Данные Товародвижение.mdb";
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	СоответствиеИДСкладов = Новый Соответствие;
	Строгино 	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",30).Ссылка;
	Марьино 	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",8).Ссылка;
	
	ГДСоответствиеИДСкладов = Новый Соответствие;
	ГДСтрогино 	= Справочники.ГруппыДоступаСтруктурныхЕдиниц.НайтиПоКоду("000000002").Ссылка;
	ГДМарьино 	= Справочники.ГруппыДоступаСтруктурныхЕдиниц.НайтиПоКоду("000000001").Ссылка;
	
	
	//Склады
	СоответствиеИДСкладов.Вставить(8	,Марьино);
	СоответствиеИДСкладов.Вставить(128	,Марьино);
	СоответствиеИДСкладов.Вставить(301	,Марьино);
	СоответствиеИДСкладов.Вставить(457	,Марьино);
	СоответствиеИДСкладов.Вставить(30	,Строгино);
	СоответствиеИДСкладов.Вставить(77	,Строгино);
	СоответствиеИДСкладов.Вставить(208	,Строгино);
	СоответствиеИДСкладов.Вставить(422	,Строгино);
	СоответствиеИДСкладов.Вставить(560	,Марьино);
	
	//Группы доступа
	ГДСоответствиеИДСкладов.Вставить(8	,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(128,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(301,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(457,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(30	,ГДСтрогино);
	ГДСоответствиеИДСкладов.Вставить(77	,ГДСтрогино);
	ГДСоответствиеИДСкладов.Вставить(208,ГДСтрогино);
	ГДСоответствиеИДСкладов.Вставить(422,ГДСтрогино);
	ГДСоответствиеИДСкладов.Вставить(560,ГДМарьино);
	
	
	//1. Получаем данные из Access 
	
	РезультатЗапроса = ВыполнитьЗапрос("SELECT sklad_max.id_tt AS ИД_ТТ, TT.name_TT AS НаименованиеТТ, TT.start_date AS ДатаОткрытияТТ, TT.close_date AS ДатаЗакрытияТТ, TT.type_tt AS ТипТТ, tt_sklad.id_sklad, tt_sklad.id_group, TT.is_active
	|FROM TT INNER JOIN (tt_sklad INNER JOIN [select id_tt, id_group, max(date) as max_date
	|from tt_sklad
	|group by  id_tt, id_group]. AS sklad_max ON (tt_sklad.date = sklad_max.max_date) AND (tt_sklad.id_group = sklad_max.id_group) AND (tt_sklad.id_tt = sklad_max.id_tt)) ON (sklad_max.id_tt = TT.id_TT) AND (TT.id_TT = tt_sklad.id_tt) AND (TT.id_TT = tt_sklad.id_tt)
	|WHERE (((tt_sklad.id_group)=33) AND ((TT.is_active)=True));");

	Для Каждого Выборка ИЗ РезультатЗапроса Цикл
		Модифицирован = Ложь;
		Если Выборка.ТипТТ		<> "торговая" Тогда //АК добавлена обработка только торговых точек
			Продолжить;
		КонецЕсли;	
		СЕ = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Выборка.ИД_ТТ).Ссылка;
		Если СЕ.Пустая() Тогда
			СЕ = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
			СЕ.УстановитьНовыйКод("Р");
			СЕ.id_TT				= Выборка.ИД_ТТ;
			Модифицирован = Истина;
			ЭтоНовая = Истина;
		Иначе
			СЕ = СЕ.ПолучитьОбъект();
			ЭтоНовая = Ложь;
		КонецЕсли;
		
		Если Выборка.ТипТТ		= "торговая" Тогда
			ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
			ЕстьКасса 			= Истина;
		ИначеЕсли Выборка.ТипТТ = "производ" Тогда
			ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство;
			ЕстьКасса 			= Ложь;
		ИначеЕсли Выборка.ТипТТ = "склад" Тогда
			ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
			ЕстьКасса 			= Ложь;
		КонецЕсли;
		
		ПроверкаМодифицированности(СЕ,"ТипСтруктурнойЕдиницы"		,ТипСтруктурнойЕдиницы	,Модифицирован);
		ПроверкаМодифицированности(СЕ,"ЕстьКасса"					,ЕстьКасса				,Модифицирован);
		
		Наименование 		= Выборка.НаименованиеТТ;
		ДатаОткрытия			= Макс(ПолучитьПервуюДатуЛУ(СЕ.Ссылка, ЭтоНовая), ?(Выборка.ДатаОткрытияТТ = Null, Дата("00010101"), Выборка.ДатаОткрытияТТ));
		Если ДатаОткрытия = Null Тогда
			ДатаОткрытия = Дата("00010101000000");
		КонецЕсли;
		ДатаЗакрытия			= Выборка.ДатаЗакрытияТТ;
		Если ДатаЗакрытия = Null Тогда
			ДатаЗакрытия = Дата("00010101000000");
		КонецЕсли;
		ГД = ГДСоответствиеИДСкладов.Получить(Выборка.id_sklad);
		
		ПроверкаМодифицированности(СЕ,"Наименование"		,Наименование ,Модифицирован);
		ПроверкаМодифицированности(СЕ,"ДатаОткрытия"		,ДатаОткрытия ,Модифицирован);
		ПроверкаМодифицированности(СЕ,"ДатаЗакрытия"		,ДатаЗакрытия ,Модифицирован);
		ПроверкаМодифицированности(СЕ,"ГруппаДоступаСтруктурнойЕдиницы"		,ГД ,Модифицирован);
		
		Если Модифицирован Тогда
			СЕ.Записать();
		КонецЕсли;
		
		
		Если Выборка.ТипТТ		= "торговая" Тогда
			Склад = СоответствиеИДСкладов.Получить(Выборка.id_sklad);
			Отбор = Новый Структура;
			Отбор.Вставить("ТорговаяТочка",СЕ.Ссылка);
			стрРезультата = РегистрыСведений.СкладыТорговыхТочек.ПолучитьПоследнее(,Отбор);
			Если стрРезультата.Склад <> Склад Тогда
				МенеджерЗаписиРегистра = РегистрыСведений.СкладыТорговыхТочек.СоздатьМенеджерЗаписи();
				МенеджерЗаписиРегистра.Период   = Дата("20111001");
				МенеджерЗаписиРегистра.Склад	= Склад;
				МенеджерЗаписиРегистра.ТорговаяТочка = СЕ.Ссылка;
				МенеджерЗаписиРегистра.Записать();
			КонецЕсли;
			
			//Если ЭтоНовая Тогда
			//	ЦФО =   Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003").Ссылка;
			//	МенеджерЗаписиРегистра = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
			//	МенеджерЗаписиРегистра.Период   = Дата("20111001");
			//	МенеджерЗаписиРегистра.ЦФО	= ЦФО;
			//	МенеджерЗаписиРегистра.СтруктурнаяЕдиница = СЕ.Ссылка;
			//	МенеджерЗаписиРегистра.Записать();
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
КонецПроцедуры

Функция ПолучитьПервуюДатуЛУ(пТорговаяТочка, пЭтоНовая)
	Если пЭтоНовая Тогда
		Возврат Дата("00010101");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка", пТорговаяТочка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(МИНИМУМ(ЛистУчета.Дата), ДАТАВРЕМЯ(1, 1, 1)) КАК Дата
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.ТорговаяТочка = &ТорговаяТочка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Дата;
	Иначе
		Возврат Дата("00010101");
	КонецЕсли;
КонецФункции

Функция ПолучитьГраницуЗапретаИзменений() Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |    Границы.ГраницаЗапретаИзменений               
				   |ИЗ
				   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
				   |ГДЕ
				   |    Границы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				   |	И Границы.Пользователь = НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		Возврат Выборка.ГраницаЗапретаИзменений;    
	Иначе
		Возврат Дата("20111001000000");
	КонецЕсли;
КонецФункции

Процедура ЗагрузкаКассовыхОперацийПоЛистамУчета() Экспорт
//	Попытка
		ТЧ = Новый ОписаниеТипов ("Число",,Новый КвалификаторыЧисла(5,2));
		
		СтрСоединенияДанныеТовародвижение = ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	//	СтрСоединенияДанныеТовародвижение = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D:\Izbenka\База\Данные Товародвижение.mdb";
	//	ЗагрузитьТТ();
		//ЗагрузитьРозничныеГруппы();
		
		пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
		ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
		ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
		
		//НачалоВремен = Дата("20110930235959");
		НачалоВремен = Дата("20140101000000");
		//ГраницаЗапретаИзменений = ПолучитьГраницуЗапретаИзменений();
		//НачалоВремен = Макс(ГраницаЗапретаИзменений,НачалоВремен);
		
		КонецВремен = Дата("20140202235959");
		//КонецВремен = Дата("20131215235959");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	List_Ucheta.id_LU КАК ИД,
		               |	List_Ucheta.id_TT КАК ИД_ТТ,
		               |	List_Ucheta.date КАК Дата,
		               |	List_Ucheta.Z_otchet + List_Ucheta.OplataBonus КАК Отчет,
		               |	List_Ucheta.return_m + List_Ucheta.return КАК Возврат,
		               |	List_Ucheta.BezNal + List_Ucheta.BezNal_korr КАК СуммаБНал,
		               |	List_Ucheta.OplataBonus КАК ОплатаБаллами,
		               |	List_Ucheta.Raznica КАК Отклонение,
		               |	List_Ucheta.Inkass КАК Инкассация,
		               |	List_Ucheta.Cupon КАК Купон,
		               |	List_Ucheta.id_gr КАК ЦФО,
		               |	List_Ucheta.id_UL КАК Организация,
		               |	List_Ucheta.return_m КАК СторноОшибочно
		               |ИЗ
		               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.List_Ucheta КАК List_Ucheta
		               |ГДЕ
		               |	List_Ucheta.date > &НачалоВремен
		               |	И List_Ucheta.date <= &КонецВремен
		               |	И List_Ucheta.id_UL <> 5
		               |	И List_Ucheta.id_TT > 0";
	//	               |	И (List_Ucheta.Z_otchet <> 0
	//	               |			ИЛИ List_Ucheta.Inkass <> 0
	//	               |			ИЛИ List_Ucheta.BezNal <> 0
	//	               |			ИЛИ List_Ucheta.Raznica <> 0) ";
		Запрос.УстановитьПараметр("НачалоВремен",НачалоВремен);
		Запрос.УстановитьПараметр("КонецВремен",КонецВремен);
		ТабДанныеЛУ = Запрос.Выполнить().Выгрузить();
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеЛУ.Дата,
		               |	ДанныеЛУ.ИД,
		               |	ДанныеЛУ.ИД_ТТ,
					   |	ВЫБОР КОГДА ДанныеЛУ.Дата < &Дата_20120701 ТОГДА 
					   |		ВЫРАЗИТЬ(ДанныеЛУ.Отчет КАК ЧИСЛО (15,2)) 
					   |	ИНАЧЕ (ВЫРАЗИТЬ(ДанныеЛУ.Отчет КАК ЧИСЛО (15,2)) - ВЫРАЗИТЬ(ДанныеЛУ.Возврат КАК ЧИСЛО (15,2))) КОНЕЦ КАК Отчет,
		               |	ВЫРАЗИТЬ(ДанныеЛУ.СуммаБНал КАК ЧИСЛО (15,2)) КАК СуммаБНал,
					   |	ВЫРАЗИТЬ(ДанныеЛУ.ОплатаБаллами КАК ЧИСЛО (15,2)) КАК ОплатаБаллами,
		               |	ВЫРАЗИТЬ(ДанныеЛУ.Отклонение КАК ЧИСЛО (15,2)) КАК Отклонение,
		               |	ВЫРАЗИТЬ(ДанныеЛУ.Инкассация КАК ЧИСЛО (15,2)) КАК Инкассация,
		               |	ВЫРАЗИТЬ(ДанныеЛУ.Купон КАК ЧИСЛО (15,2)) КАК Купон,
		               |	ВЫРАЗИТЬ(ДанныеЛУ.ЦФО КАК ЧИСЛО (10,0)) КАК ЦФО,
					   |	ВЫРАЗИТЬ(ДанныеЛУ.СторноОшибочно КАК ЧИСЛО (10,0)) КАК СторноОшибочно,
					   |	ВЫРАЗИТЬ(ДанныеЛУ.Организация КАК ЧИСЛО (10,0)) КАК Организация
		               |ПОМЕСТИТЬ ВременнаяТаблица
		               |ИЗ
		               |	&ДанныеЛУ КАК ДанныеЛУ";
		Запрос.УстановитьПараметр("ДанныеЛУ",ТабДанныеЛУ);
		Запрос.УстановитьПараметр("Дата_20120701",Дата("20120701000000"));
		Результат = Запрос.Выполнить();
		ТабДанныеЛУ = 0;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЛистУчета.Ссылка КАК ОРП,
		               |	ДанныеЛУ.Дата,
		               |	ДанныеЛУ.ИД,
		               |	ДанныеЛУ.ИД_ТТ,
		               |	ДанныеЛУ.Отчет,
		               |	ДанныеЛУ.СуммаБНал,
					   |	ДанныеЛУ.ОплатаБаллами,
		               |	ДанныеЛУ.Отклонение,
		               |	ДанныеЛУ.Инкассация,
					   |	ДанныеЛУ.СторноОшибочно,
		               |	ДанныеЛУ.Купон,
		               |	ДанныеЛУ.ЦФО,
		               |	ДанныеЛУ.Организация
		               |ИЗ
		               |	ВременнаяТаблица КАК ДанныеЛУ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
		               //|		ПО ДанныеЛУ.ИД = ЛистУчета.ИД
					   |		ПО ДанныеЛУ.ИД_ТТ = ЛистУчета.ТорговаяТочка.id_TT
					   |		И НАЧАЛОПЕРИОДА(ДанныеЛУ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)
		               |ГДЕ
		               |	(НЕ(ЛистУчета.СуммаДокумента = ДанныеЛУ.Отчет
		               |				И ЛистУчета.ЦФО.id_ЦФО = ДанныеЛУ.ЦФО
		               |				И ЛистУчета.СуммаЭквайринг = ДанныеЛУ.СуммаБНал
		               |				И ЛистУчета.СуммаИнкассации = ДанныеЛУ.Инкассация
		               |				И ЛистУчета.ОплатаБаллами = ДанныеЛУ.ОплатаБаллами
		               |				И ЛистУчета.Купон = ДанныеЛУ.Купон
		               |				И ЛистУчета.Отклонение = ДанныеЛУ.Отклонение
					   |				И ЛистУчета.СторноОшибочно = ДанныеЛУ.СторноОшибочно))";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
				
			ЛистУчета 					= Выборка.ОРП.ПолучитьОбъект();
	//		ЛистУчета.Дата				= Выборка.Дата;
	//		ЛистУчета.ИД					= Выборка.ИД;
	//		ЛистУчета.ТорговаяТочка		= ТорговаяТочка;
			ЛистУчета.СуммаНал				= ТЧ.ПривестиЗначение(Выборка.Отчет)-ТЧ.ПривестиЗначение(Выборка.СуммаБНал)+ТЧ.ПривестиЗначение(Выборка.Отклонение);
			ЛистУчета.СуммаДокумента		= Выборка.Отчет;
			ЛистУчета.СуммаЭквайринг		= Выборка.СуммаБНал;
			ЛистУчета.СуммаИнкассации		= Выборка.Инкассация;
			ЛистУчета.ОплатаБаллами			= Выборка.ОплатаБаллами;
			ЛистУчета.Купон					= Выборка.Купон;
			ЛистУчета.Отклонение			= Выборка.Отклонение;
			ЛистУчета.СторноОшибочно		= Выборка.СторноОшибочно;
			//Если (ЛистУчета.ТорговаяТочка.id_TT = 51)
			//	И (Не ЗначениеЗаполнено(ЛистУчета.Терминал)) Тогда
			//	ЛистУчета.Терминал = Справочники.Терминалы.НайтиПоКоду("42561201");
			//КонецЕсли;
			ЛистУчета.Терминал = ЛистУчета.ТорговаяТочка.Терминал;
			
			ЦФО = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО",Выборка.ЦФО);
			ЛистУчета.ЦФО					= ЦФО;
			Организация = Справочники.Организации.НайтиПоРеквизиту("ИД",Выборка.Организация);
			ЛистУчета.Организация			= Организация;
			
			//Отбор = Новый Структура;
			//Отбор.Вставить("ТорговаяТочка",ТорговаяТочка);
			//СтруктураРезультата = РегистрыСведений.СкладыТорговыхТочек.ПолучитьПоследнее(Выборка.Дата,Отбор);
			//СтруктурнаяиЕдиницаПриемаИнкассации = СтруктураРезультата.Склад;
			//
			//ЛистУчета.ДатаПриемаИнкассации=Выборка.Дата+24*60*60;
			//ЛистУчета.СуммаПриемаИнкассации=Выборка.Инкассация;
			//ЛистУчета.СтруктурнаяиЕдиницаПриемаИнкассации = СтруктурнаяиЕдиницаПриемаИнкассации;
			
			//Если ПриниматьИнкассацию Тогда
			//	ЛистУчета.ИнкассацияПринята=Истина;
			//КонецЕсли;
			ЛистУчета.Записать(РежимЗаписиДокумента.Проведение);
	//		Сообщить(ЛистУчета);
			
		КонецЦикла;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеЛУ.Дата,
		               |	ДанныеЛУ.ИД,
		               |	ДанныеЛУ.ИД_ТТ,
		               |	ДанныеЛУ.Отчет,
		               |	ДанныеЛУ.СуммаБНал,
					   |	ДанныеЛУ.ОплатаБаллами,
		               |	ДанныеЛУ.Отклонение,
		               |	ДанныеЛУ.Инкассация,
					   |	ДанныеЛУ.СторноОшибочно,
		               |	ДанныеЛУ.Купон,
		               |	ДанныеЛУ.ЦФО,
		               |	ДанныеЛУ.Организация
		               |ИЗ
		               |	ВременнаяТаблица КАК ДанныеЛУ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
		               |		ПО НАЧАЛОПЕРИОДА(ДанныеЛУ.Дата,ДЕНЬ) = НАЧАЛОПЕРИОДА(ЛистУчета.Дата,ДЕНЬ)
		               |			И ДанныеЛУ.ИД_ТТ = ЛистУчета.ТорговаяТочка.id_TT
		               |ГДЕ
		               |	ЛистУчета.Ссылка ЕСТЬ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Выборка.ИД_ТТ).Ссылка;
			Если ТорговаяТочка.Пустая() Тогда
				Сообщить("Не найдена ТТ с ИД "+Выборка.ИД_ТТ);
				Продолжить;
			КонецЕсли;
				
			ЛистУчета = Документы.ЛистУчета.СоздатьДокумент();
			ЛистУчета.Дата				= Выборка.Дата;
			ЛистУчета.ИД					= Выборка.ИД;
			ЛистУчета.ТорговаяТочка		= ТорговаяТочка;
			ЛистУчета.СуммаНал			= ТЧ.ПривестиЗначение(Выборка.Отчет)-ТЧ.ПривестиЗначение(Выборка.СуммаБНал)+ТЧ.ПривестиЗначение(Выборка.Отклонение);
			ЛистУчета.СуммаДокумента		= Выборка.Отчет;
			ЛистУчета.СуммаЭквайринг		= Выборка.СуммаБНал;
			ЛистУчета.ОплатаБаллами			= Выборка.ОплатаБаллами;
			ЛистУчета.СуммаИнкассации		= Выборка.Инкассация;
			ЛистУчета.Купон					= Выборка.Купон;
			ЛистУчета.Отклонение			= Выборка.Отклонение;
			ЛистУчета.СторноОшибочно		= Выборка.СторноОшибочно;
			//Если (ЛистУчета.ТорговаяТочка.id_TT = 51) Тогда
			//	ЛистУчета.Терминал = Справочники.Терминалы.НайтиПоКоду("42561201");
			//КонецЕсли;
			ЛистУчета.Терминал = ЛистУчета.ТорговаяТочка.Терминал;
			
			ЦФО = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО",Выборка.ЦФО);
			ЛистУчета.ЦФО					= ЦФО;
			Организация = Справочники.Организации.НайтиПоРеквизиту("ИД",Выборка.Организация);
			ЛистУчета.Организация			= Организация;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ТорговаяТочка",ТорговаяТочка);
			СтруктураРезультата = РегистрыСведений.СкладыТорговыхТочек.ПолучитьПоследнее(Выборка.Дата,Отбор);
			СтруктурнаяиЕдиницаПриемаИнкассации = СтруктураРезультата.Склад;
			
			ЛистУчета.ДатаПриемаИнкассации	=Выборка.Дата+24*60*60;
			ЛистУчета.СуммаПриемаИнкассации	=Выборка.Инкассация;
			ЛистУчета.СтруктурнаяиЕдиницаПриемаИнкассации = СтруктурнаяиЕдиницаПриемаИнкассации;
			
			//Если ПриниматьИнкассацию Тогда
			//	ЛистУчета.ИнкассацияПринята=Истина;
			//КонецЕсли;
			 Если Выборка.СуммаБНал > 0 И ЛистУчета.Терминал.Пустая() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	МАКСИМУМ(Терминалы.Ссылка) КАК Терминал,
				               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Терминалы.Ссылка) КАК КоличествоТерминалов
				               |ИЗ
				               |	Справочник.Терминалы КАК Терминалы
				               |ГДЕ
				               |	Терминалы.Владелец = &СЕ
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	Терминалы.Владелец";
				Запрос.УстановитьПараметр("СЕ",ТорговаяТочка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					КоличествоТерминалов = Выборка.КоличествоТерминалов;
				КонецЕсли;
				
				Если КоличествоТерминалов = 1 Тогда
					ЛистУчета.Терминал = Выборка.Терминал;
				КонецЕсли;
			КонецЕсли;
			
			ЛистУчета.Записать(РежимЗаписиДокумента.Проведение);
	//		Сообщить(ЛистУчета);
			
		КонецЦикла;
		
		ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	//Исключение
	//	пОписаниеОшибки = ОписаниеОшибки();
	//	обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	//	обЗадача.Дата = ТекущаяДата();
	//	обЗадача.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Туманов Сергей");	
	//	обЗадача.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Туманов Сергей");	
	//	обЗадача.Оповещение = Истина;
	//	обЗадача.СрокИсполнения = НачалоДня(ТекущаяДата());
	//	обЗадача.СрокОповещения = НачалоДня(ТекущаяДата());
	//	обЗадача.Наименование = пОписаниеОшибки;
	//	обЗадача.КомментарийИсполнителя = пОписаниеОшибки;
	//	обЗадача.Записать();
	//КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаДокументовПоПоставщикам() Экспорт
	СтрСоединенияДанныеТовародвижение = ПолучитьСтрокуСоединения("ДанныеТовародвижение");
//	СтрСоединенияДанныеТовародвижение = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D:\Izbenka\База\Данные Товародвижение.mdb";
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	НачалоВремен = Дата("20110930235959");
	ГраницаЗапретаИзменений = ПолучитьГраницуЗапретаИзменений();
	НачалоВремен = Макс(ГраницаЗапретаИзменений,НачалоВремен);
	КонецВремен = Дата("20131114000000");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Поставки.id_UL КАК Организация_ИД,
	               |	Поставки.id_kontr КАК Контрагент_ИД,
	               |	Поставки.nova_kontr КАК Контрагент,
	               |	Поставки.ИНН КАК Контрагент_ИНН,
	               |	Поставки.НДС КАК Контрагент_НДС,
	               |	Поставки.id_supply КАК Поставка_ИД,
	               |	Поставки.date КАК Поставка_Дата,
	               |	Поставки.Summa КАК Поставка_Сумма,
	               |	Поставки.Primechanie КАК Поставка_Комментарий,
	               |	Поставки.id_TT КАК ТТ_ИД,
	               |	Поставки.N_post КАК НомерВходящегоДокумента,
	               |	Поставки.N_Factur КАК НомерВходящегоСчетаФактуры,
	               |	Поставки.Date_Factur КАК ДатаВходящегоСчетаФактуры
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Kontr.id_kontr КАК id_kontr,
	               |		Kontr.nova_kontr КАК nova_kontr,
	               |		Kontr.kontacti КАК kontacti,
	               |		Kontr.is_active КАК is_active,
	               |		Kontr.zak_po_tt КАК zak_po_tt,
	               |		Kontr.Dni_post КАК Dni_post,
	               |		Kontr.Dni_razm КАК Dni_razm,
	               |		Kontr.Lag_post КАК Lag_post,
	               |		Kontr.id_ul_post КАК id_ul_post,
	               |		Kontr.sms_k КАК sms_k,
	               |		Kontr.descr КАК descr,
	               |		Kontr.ОКПО КАК ОКПО,
	               |		Kontr.Директор КАК Директор,
	               |		Kontr.Гл_Бухгалтер КАК Гл_Бухгалтер,
	               |		Kontr.ИНН КАК ИНН,
	               |		Kontr.НДС КАК НДС,
	               |		З1.id_TT КАК id_TT,
	               |		З1.id_post КАК id_post,
	               |		З1.id_supply КАК id_supply,
	               |		З1.date КАК date,
	               |		З1.Summa КАК Summa,
	               |		З1.Primechanie КАК Primechanie,
	               |		З1.id_UL КАК id_UL,
	               |		З1.N_post КАК N_post,
	               |		З1.N_Factur КАК N_Factur,
	               |		З1.Date_Factur КАК Date_Factur
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Supply.id_TT КАК id_TT,
	               |			Supply.id_post КАК id_post,
	               |			Supply.id_supply КАК id_supply,
	               |			Supply.date КАК date,
	               |			Supply.Summa КАК Summa,
	               |			Supply.Primechanie КАК Primechanie,
	               |			Supply.id_UL КАК id_UL,
	               |			Supply.N_post КАК N_post,
	               |			Supply.N_Factur КАК N_Factur,
	               |			Supply.Date_Factur КАК Date_Factur
	               |		ИЗ
	               |			ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Supply КАК Supply
	               |		ГДЕ
	               |			Supply.Summa <> 0
	               |			И Supply.date > &НачалоВремен
	               |			И Supply.date < &КонецВремен) КАК З1
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |			ПО (Kontr.id_kontr = З1.id_post)
	               |	ГДЕ
	               |		Kontr.id_kontr <> 12) КАК Поставки";
	Запрос.УстановитьПараметр("НачалоВремен",НачалоВремен);
	Запрос.УстановитьПараметр("КонецВремен",КонецВремен);
	ТабДанныеТД = Запрос.Выполнить().Выгрузить();
	ТабДанныеТД.Колонки.Добавить("ИНН",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	Для КАЖДОГО СтрокаТД ИЗ ТабДанныеТД Цикл
		СтрокаТД.ИНН = Формат(СтрокаТД.Контрагент_ИНН,"ЧГ=0");
	КонецЦикла;
	//ТабДанныеТД.ВыбратьСтроку();
	//Возврат;
	
	//Добываем поступления из Access
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеТД.Организация_ИД,
	               |	ДанныеТД.Контрагент_ИД,
	               |	ДанныеТД.Контрагент,
	               |	ДанныеТД.ИНН,
	               |	ВЫРАЗИТЬ(ДанныеТД.Контрагент_НДС КАК ЧИСЛО (15,2)) КАК Контрагент_НДС,
	               |	ДанныеТД.Поставка_ИД,
	               |	ДанныеТД.Поставка_Дата,
	               |	ВЫРАЗИТЬ(ДанныеТД.Поставка_Сумма КАК ЧИСЛО (15,2)) КАК Поставка_Сумма,
	               |	ДанныеТД.Поставка_Комментарий,
	               |	ДанныеТД.ТТ_ИД,
				   |	ДанныеТД.НомерВходящегоДокумента,
				   |	ДанныеТД.НомерВходящегоСчетаФактуры,
				   |	ДанныеТД.ДатаВходящегоСчетаФактуры
	               |ПОМЕСТИТЬ ВременнаяТаблица
	               |ИЗ
	               |	&ТабДанныеТД КАК ДанныеТД
				   |ГДЕ ДанныеТД.Поставка_Сумма > 0";
	Запрос.УстановитьПараметр("ТабДанныеТД",ТабДанныеТД);
				   
	Результат = Запрос.Выполнить();
	
	//Создаем недостающие постуления
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	               |	ДанныеТД.Организация_ИД,
	               |	ДанныеТД.Контрагент_ИД,
	               |	ДанныеТД.Контрагент,
	               |	ДанныеТД.ИНН,
	               |	ДанныеТД.Контрагент_НДС,
	               |	ДанныеТД.Поставка_ИД,
	               |	ДанныеТД.Поставка_Дата,
	               |	ДанныеТД.Поставка_Сумма,
	               |	ДанныеТД.Поставка_Комментарий,
	               |	ДанныеТД.ТТ_ИД,
				   |	ДанныеТД.НомерВходящегоДокумента,
				   |	ДанныеТД.НомерВходящегоСчетаФактуры,
				   |	ДанныеТД.ДатаВходящегоСчетаФактуры
	               |ИЗ
	               |	ВременнаяТаблица КАК ДанныеТД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |		ПО ДанныеТД.Поставка_ИД = ПоступлениеТоваровУслуг.ИД
	               |			И (НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) > &НачалоВремен)
	               |			И (КОНЕЦПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) < &КонецВремен)
	               |ГДЕ
	               |	ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ";
				   
	//Запрос.Выполнить().Выгрузить().ВыбратьСтроку();				   
	//Возврат;
	
	ТЧ = Новый ОписаниеТипов ("Число",,Новый КвалификаторыЧисла(5,2));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПоступлениеТоваровУслуг = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		
		Организация = Справочники.Организации.НайтиПоРеквизиту("ИД",Выборка.Организация_ИД).Ссылка;
		ТТСсылка	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Выборка.ТТ_ИД).Ссылка;
		
		ПоступлениеТоваровУслуг.Организация = Организация;
		ПоступлениеТоваровУслуг.Дата		= Выборка.Поставка_Дата;
		ПоступлениеТоваровУслуг.НомерВходящегоДокумента		= Выборка.НомерВходящегоДокумента;
		ПоступлениеТоваровУслуг.ДатаВходящегоДокумента		= Выборка.Поставка_Дата;
		ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры		= Выборка.НомерВходящегоСчетаФактуры;
		ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры		= Выборка.ДатаВходящегоСчетаФактуры;
		ПоступлениеТоваровУслуг.СуммаДокумента = Выборка.Поставка_Сумма;
		ПоступлениеТоваровУслуг.ВидОперации	= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ПоступлениеТоваровУслуг.Комментарий	= Выборка.Поставка_Комментарий;
		ПоступлениеТоваровУслуг.ИД			= Выборка.Поставка_ИД;
		ПоступлениеТоваровУслуг.СтруктурнаяЕдиница= ТТСсылка;
		ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПоставщиками;
		
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Выборка.ИНН);
		Если Контрагент.Пустая() Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование		=  Выборка.Контрагент;
			Контрагент.НаименованиеПолное	=  Выборка.Контрагент;
			Контрагент.ИНН				=  Выборка.ИНН;
			Контрагент.ИД				= Выборка.Контрагент_ИД;
			
			НДС = Окр(ТЧ.ПривестиЗначение(Выборка.Контрагент_НДС),1);
			Если НДС = 0.1 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли НДС = 0 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			Контрагент.Записать();
			Сообщить("Создан контрагент "+Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Контрагент.ИД) Тогда
			КонтрагентОбъект = Контрагент.Ссылка.ПолучитьОбъект();
			КонтрагентОбъект.ИД				= Выборка.Контрагент_ИД;
			КонтрагентОбъект.Записать();
			Сообщить("Обновили ИД контрагента "+Контрагент);
		КонецЕсли;
		ПоступлениеТоваровУслуг.Контрагент = Контрагент.Ссылка;
		
		ПоступлениеТоваровУслуг.Товары.Очистить();
		НоваяСтрока = ПоступлениеТоваровУслуг.Товары.Добавить();
		ВсеТовары			= Справочники.Номенклатура.НайтиПоКоду("000000042").Ссылка;
		НоваяСтрока.Номенклатура			= ВсеТовары;
		НоваяСтрока.ЕдиницаИзмерения		= ВсеТовары.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент				= 1;
		НоваяСтрока.Цена					= Выборка.Поставка_Сумма;
		НоваяСтрока.Количество				= 1;
		НоваяСтрока.Сумма					= Выборка.Поставка_Сумма;
		НоваяСтрока.СтавкаНДС				= Контрагент.СтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ПоступлениеТоваровУслуг);
		НоваяСтрока.СчетУчета				= ПланыСчетов.Финансовый.Товары;
		НоваяСтрока.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		Попытка
			ПоступлениеТоваровУслуг.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Сообщить("Создан документ поступления "+ПоступлениеТоваровУслуг);
	КонецЦикла;
	
	//Корректируем измененнные поступления
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	               |	ДанныеТД.Организация_ИД,
	               |	ДанныеТД.Контрагент_ИД,
	               |	ДанныеТД.Контрагент,
	               |	ДанныеТД.ИНН,
	               |	ДанныеТД.Контрагент_НДС,
	               |	ДанныеТД.Поставка_ИД,
	               |	ДанныеТД.Поставка_Дата,
	               |	ДанныеТД.Поставка_Сумма,
	               |	ДанныеТД.Поставка_Комментарий,
	               |	ДанныеТД.ТТ_ИД
	               |ИЗ
	               |	ВременнаяТаблица КАК ДанныеТД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |		ПО ДанныеТД.Поставка_ИД = ПоступлениеТоваровУслуг.ИД
	               |ГДЕ
	               |	(НЕ ПоступлениеТоваровУслуг.СуммаДокумента = ДанныеТД.Поставка_Сумма
	               |			ИЛИ НЕ НАЧАЛОПЕРИОДА(ДанныеТД.Поставка_Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ)
	               |			ИЛИ НЕ ДанныеТД.Организация_ИД = ПоступлениеТоваровУслуг.Организация.ИД
	               |			ИЛИ НЕ ДанныеТД.Контрагент_ИД = ПоступлениеТоваровУслуг.Контрагент.ИД
	               |			ИЛИ НЕ ДанныеТД.ТТ_ИД = ПоступлениеТоваровУслуг.СтруктурнаяЕдиница.id_TT)
	               |	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) > &НачалоВремен
	               |	И КОНЕЦПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) < &КонецВремен";
				   
	//Запрос.Выполнить().Выгрузить().ВыбратьСтроку();				   
	//Возврат;
	
	ТЧ = Новый ОписаниеТипов ("Число",,Новый КвалификаторыЧисла(5,2));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПоступлениеТоваровУслуг = Выборка.Ссылка.ПолучитьОбъект();
		Если ПоступлениеТоваровУслуг.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Организация = Справочники.Организации.НайтиПоРеквизиту("ИД",Выборка.Организация_ИД).Ссылка;
		ТТСсылка	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Выборка.ТТ_ИД).Ссылка;
		
		Если НЕ Год(ПоступлениеТоваровУслуг.Дата) = Год(Выборка.Поставка_Дата) Тогда
			НужноМенятьНомер=Истина;
		Иначе
			НужноМенятьНомер=Ложь;
		КонецЕсли;
		
		ПоступлениеТоваровУслуг.Организация = Организация;
		ПоступлениеТоваровУслуг.Дата		= Выборка.Поставка_Дата;
		ПоступлениеТоваровУслуг.СуммаДокумента = Выборка.Поставка_Сумма;
		ПоступлениеТоваровУслуг.ВидОперации	= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ПоступлениеТоваровУслуг.Комментарий	= Выборка.Поставка_Комментарий;
		ПоступлениеТоваровУслуг.ИД			= Выборка.Поставка_ИД;
		ПоступлениеТоваровУслуг.СтруктурнаяЕдиница= ТТСсылка;
		ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПоставщиками;
		
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Выборка.ИНН);
		Если Контрагент.Пустая() Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование		=  Выборка.Контрагент;
			Контрагент.НаименованиеПолное	=  Выборка.Контрагент;
			Контрагент.ИНН				=  Выборка.ИНН;
			Контрагент.ИД				= Выборка.Контрагент_ИД;
			
			НДС = Окр(ТЧ.ПривестиЗначение(Выборка.Контрагент_НДС),1);
			Если НДС = 0.1 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли НДС = 0 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			Контрагент.Записать();
			Сообщить("Создан контрагент "+Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Контрагент.ИД) Тогда
			КонтрагентОбъект = Контрагент.Ссылка.ПолучитьОбъект();
			КонтрагентОбъект.ИД				= Выборка.Контрагент_ИД;
			КонтрагентОбъект.Записать();
			Сообщить("Обновили ИД контрагента "+Контрагент);
		КонецЕсли;
		ПоступлениеТоваровУслуг.Контрагент = Контрагент.Ссылка;
		
		ПоступлениеТоваровУслуг.Товары.Очистить();
		НоваяСтрока = ПоступлениеТоваровУслуг.Товары.Добавить();
		ВсеТовары			= Справочники.Номенклатура.НайтиПоКоду("000000042").Ссылка;
		НоваяСтрока.Номенклатура			= ВсеТовары;
		НоваяСтрока.ЕдиницаИзмерения		= ВсеТовары.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент				= 1;
		НоваяСтрока.Цена					= Выборка.Поставка_Сумма;
		НоваяСтрока.Количество				= 1;
		НоваяСтрока.Сумма					= Выборка.Поставка_Сумма;
		НоваяСтрока.СтавкаНДС				= Контрагент.СтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ПоступлениеТоваровУслуг);
		НоваяСтрока.СчетУчета				= ПланыСчетов.Финансовый.Товары;
		НоваяСтрока.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		Попытка
			Если НужноМенятьНомер Тогда
				ПоступлениеТоваровУслуг.УстановитьНовыйНомер(Организация.Префикс);
			КонецЕсли;
			ПоступлениеТоваровУслуг.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Сообщить("Обновлен документ поступления "+ПоступлениеТоваровУслуг);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//Добываем возвраты из Access
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДанныеТД.Организация_ИД,
				   |	ДанныеТД.Контрагент_ИД,
				   |	ДанныеТД.Контрагент,
				   |	ДанныеТД.ИНН,
				   |	ВЫРАЗИТЬ(ДанныеТД.Контрагент_НДС КАК ЧИСЛО (15,2)) КАК Контрагент_НДС,
				   |	ДанныеТД.Поставка_ИД,
				   |	ДанныеТД.Поставка_Дата,
				   |	-ДанныеТД.Поставка_Сумма КАК Поставка_Сумма,
				   |	ДанныеТД.Поставка_Комментарий,
				   |	ДанныеТД.ТТ_ИД
				   |ПОМЕСТИТЬ ВременнаяТаблица
				   |ИЗ
				   |	&ТабДанныеТД КАК ДанныеТД
				   |ГДЕ ДанныеТД.Поставка_Сумма < 0";
	Запрос.УстановитьПараметр("ТабДанныеТД",ТабДанныеТД);
				   
	Результат = Запрос.Выполнить();
	
	//Создаем недостающие возвраты
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	               |	ДанныеТД.Организация_ИД,
	               |	ДанныеТД.Контрагент_ИД,
	               |	ДанныеТД.Контрагент,
	               |	ДанныеТД.ИНН,
	               |	ДанныеТД.Контрагент_НДС,
	               |	ДанныеТД.Поставка_ИД,
	               |	ДанныеТД.Поставка_Дата,
	               |	ДанныеТД.Поставка_Сумма,
	               |	ДанныеТД.Поставка_Комментарий,
	               |	ДанныеТД.ТТ_ИД
	               |ИЗ
	               |	ВременнаяТаблица КАК ДанныеТД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |		ПО ДанныеТД.Поставка_ИД = ВозвратТоваровПоставщику.ИД
	               |			И (НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) > &НачалоВремен)
	               |			И (КОНЕЦПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) < &КонецВремен)
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL";
				   
	//Запрос.Выполнить().Выгрузить().ВыбратьСтроку();				   
	//Возврат;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозвратТоваровПоставщику = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		Организация = Справочники.Организации.НайтиПоРеквизиту("ИД",Выборка.Организация_ИД).Ссылка;
		ТТСсылка	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Выборка.ТТ_ИД).Ссылка;
		
		ВозвратТоваровПоставщику.Организация = Организация;
		ВозвратТоваровПоставщику.Дата		= Выборка.Поставка_Дата;
		ВозвратТоваровПоставщику.СуммаДокумента = Выборка.Поставка_Сумма;
		ВозвратТоваровПоставщику.ВидОперации	= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ВозвратТоваровПоставщику.Комментарий	= Выборка.Поставка_Комментарий;
		ВозвратТоваровПоставщику.ИД			= Выборка.Поставка_ИД;
		ВозвратТоваровПоставщику.СтруктурнаяЕдиница= ТТСсылка;
		
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Выборка.ИНН);
		Если Контрагент.Пустая() Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование		=  Выборка.Контрагент;
			Контрагент.НаименованиеПолное	=  Выборка.Контрагент;
			Контрагент.ИНН				=  Выборка.ИНН;
			Контрагент.ИД				= Выборка.Контрагент_ИД;
			
			НДС = Окр(ТЧ.ПривестиЗначение(Выборка.Контрагент_НДС),1);
			Если НДС = 0.1 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли НДС = 0 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			Контрагент.Записать();
			Сообщить("Создан контрагент "+Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Контрагент.ИД) Тогда
			КонтрагентОбъект = Контрагент.Ссылка.ПолучитьОбъект();
			КонтрагентОбъект.ИД				= Выборка.Контрагент_ИД;
			КонтрагентОбъект.Записать();
			Сообщить("Обновили ИД контрагента "+Контрагент);
		КонецЕсли;
		ВозвратТоваровПоставщику.Контрагент = Контрагент;
		
		ВозвратТоваровПоставщику.Товары.Очистить();
		НоваяСтрока = ВозвратТоваровПоставщику.Товары.Добавить();
		ВсеТовары			= Справочники.Номенклатура.НайтиПоКоду("000000042").Ссылка;
		НоваяСтрока.Номенклатура			= ВсеТовары;
		НоваяСтрока.ЕдиницаИзмерения		= ВсеТовары.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент				= 1;
		НоваяСтрока.Цена					= Выборка.Поставка_Сумма;
		НоваяСтрока.Количество				= 1;
		НоваяСтрока.Сумма					= Выборка.Поставка_Сумма;
		НоваяСтрока.СтавкаНДС				= Контрагент.СтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ВозвратТоваровПоставщику);
		НоваяСтрока.СчетУчета				= ПланыСчетов.Финансовый.Товары;
		НоваяСтрока.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		Попытка
			ВозвратТоваровПоставщику.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		Сообщить("Создан документ возврата "+ВозвратТоваровПоставщику);
						
	КонецЦикла;
	
	//Корректируем измененнные возвраты	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	               |	ДанныеТД.Организация_ИД,
	               |	ДанныеТД.Контрагент_ИД,
	               |	ДанныеТД.Контрагент,
	               |	ДанныеТД.ИНН,
	               |	ДанныеТД.Контрагент_НДС,
	               |	ДанныеТД.Поставка_ИД,
	               |	ДанныеТД.Поставка_Дата,
	               |	ДанныеТД.Поставка_Сумма,
	               |	ДанныеТД.Поставка_Комментарий,
	               |	ДанныеТД.ТТ_ИД
	               |ИЗ
	               |	ВременнаяТаблица КАК ДанныеТД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |		ПО ДанныеТД.Поставка_ИД = ВозвратТоваровПоставщику.ИД
	               |ГДЕ
	               |	(НЕ ВозвратТоваровПоставщику.СуммаДокумента = ДанныеТД.Поставка_Сумма
	               |			ИЛИ НЕ НАЧАЛОПЕРИОДА(ДанныеТД.Поставка_Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ)
	               |			ИЛИ НЕ ДанныеТД.Организация_ИД = ВозвратТоваровПоставщику.Организация.ИД
	               |			ИЛИ НЕ ДанныеТД.Контрагент_ИД = ВозвратТоваровПоставщику.Контрагент.ИД
	               |			ИЛИ НЕ ДанныеТД.ТТ_ИД = ВозвратТоваровПоставщику.СтруктурнаяЕдиница.id_TT)
	               |	И НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) > &НачалоВремен
	               |	И КОНЕЦПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) < &КонецВремен";
				   
	//Запрос.Выполнить().Выгрузить().ВыбратьСтроку();				   
	//Возврат;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозвратТоваровПоставщику = Выборка.Ссылка.ПолучитьОбъект();
		Организация = Справочники.Организации.НайтиПоРеквизиту("ИД",Выборка.Организация_ИД).Ссылка;
		ТТСсылка	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Выборка.ТТ_ИД).Ссылка;
		
		Если НЕ Год(ВозвратТоваровПоставщику.Дата) = Год(Выборка.Поставка_Дата) Тогда
			НужноМенятьНомер=Истина;
		Иначе
			НужноМенятьНомер=Ложь;
		КонецЕсли;
		
		ВозвратТоваровПоставщику.Организация = Организация;
		ВозвратТоваровПоставщику.Дата		= Выборка.Поставка_Дата;
		ВозвратТоваровПоставщику.СуммаДокумента = Выборка.Поставка_Сумма;
		ВозвратТоваровПоставщику.ВидОперации	= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ВозвратТоваровПоставщику.Комментарий	= Выборка.Поставка_Комментарий;
		ВозвратТоваровПоставщику.ИД			= Выборка.Поставка_ИД;
		ВозвратТоваровПоставщику.СтруктурнаяЕдиница= ТТСсылка;
		
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Выборка.ИНН);
		Если Контрагент.Пустая() Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование		=  Выборка.Контрагент;
			Контрагент.НаименованиеПолное	=  Выборка.Контрагент;
			Контрагент.ИНН				=  Выборка.ИНН;
			Контрагент.ИД				= Выборка.Контрагент_ИД;
			
			НДС = Окр(ТЧ.ПривестиЗначение(Выборка.Контрагент_НДС),1);
			Если НДС = 0.1 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли НДС = 0 Тогда
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			Контрагент.Записать();
			Сообщить("Создан контрагент "+Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Контрагент.ИД) Тогда
			КонтрагентОбъект = Контрагент.Ссылка.ПолучитьОбъект();
			КонтрагентОбъект.ИД				= Выборка.Контрагент_ИД;
			КонтрагентОбъект.Записать();
			Сообщить("Обновили ИД контрагента "+Контрагент);
		КонецЕсли;
		ВозвратТоваровПоставщику.Контрагент = Контрагент;
		
		ВозвратТоваровПоставщику.Товары.Очистить();
		НоваяСтрока = ВозвратТоваровПоставщику.Товары.Добавить();
		ВсеТовары			= Справочники.Номенклатура.НайтиПоКоду("000000042").Ссылка;
		НоваяСтрока.Номенклатура			= ВсеТовары;
		НоваяСтрока.ЕдиницаИзмерения		= ВсеТовары.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент				= 1;
		НоваяСтрока.Цена					= Выборка.Поставка_Сумма;
		НоваяСтрока.Количество				= 1;
		НоваяСтрока.Сумма					= Выборка.Поставка_Сумма;
		НоваяСтрока.СтавкаНДС				= Контрагент.СтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ВозвратТоваровПоставщику);
		НоваяСтрока.СчетУчета				= ПланыСчетов.Финансовый.Товары;
		НоваяСтрока.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		Попытка
			Если НужноМенятьНомер Тогда
				ВозвратТоваровПоставщику.УстановитьНовыйНомер(Организация.Префикс);
			КонецЕсли;
			ВозвратТоваровПоставщику.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Сообщить("Обновлен документ возврата "+ВозвратТоваровПоставщику);
						
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДанныеТД.Организация_ИД,
				   |	ДанныеТД.Контрагент_ИД,
				   |	ДанныеТД.Контрагент,
				   |	ДанныеТД.ИНН,
				   |	ВЫРАЗИТЬ(ДанныеТД.Контрагент_НДС КАК ЧИСЛО (15,2)) КАК Контрагент_НДС,
				   |	ДанныеТД.Поставка_ИД,
				   |	ДанныеТД.Поставка_Дата,
				   |	ДанныеТД.Поставка_Сумма КАК Поставка_Сумма,
				   |	ДанныеТД.Поставка_Комментарий,
				   |	ДанныеТД.ТТ_ИД
				   |ПОМЕСТИТЬ ВременнаяТаблица
				   |ИЗ
				   |	&ТабДанныеТД КАК ДанныеТД";
	Запрос.УстановитьПараметр("ТабДанныеТД",ТабДанныеТД);
	Результат = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	               |	ДанныеТД.Поставка_ИД
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ДанныеТД
	               |		ПО (ДанныеТД.Поставка_ИД = ПоступлениеТоваровУслуг.ИД)
	               |ГДЕ
	               |	ДанныеТД.Поставка_ИД ЕСТЬ NULL 
	               |	И ПоступлениеТоваровУслуг.ИД > 0
	               |	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) > &НачалоВремен
	               |	И КОНЕЦПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) < &КонецВремен
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка,
	               |	ДанныеТД.Поставка_ИД
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ДанныеТД
	               |		ПО (ДанныеТД.Поставка_ИД = ВозвратТоваровПоставщику.ИД)
	               |ГДЕ
	               |	ДанныеТД.Поставка_ИД ЕСТЬ NULL 
	               |	И ВозвратТоваровПоставщику.ИД > 0
	               |	И НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) > &НачалоВремен
	               |	И КОНЕЦПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) < &КонецВремен";
				   
	Выборка = Запрос.Выполнить().Выбрать();				   
	ПОка Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		//+++АК Susk (Суслин К.В.) 2018.08.30 оптимизация		 
		//ДокументОбъект.Удалить();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		//---АК Susk (Суслин К.В.) 
		
		Сообщить("Удален документ "+ВозвратТоваровПоставщику);
	КонецЦикла;

	ТабДанныеТД = 0;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
КонецПроцедуры

Функция ПолучитьСтрокуСоединения(База) Экспорт
	
	//+++АК Susk (Суслин К.В.) 2018.08.10 
	ЛогинSQL = Константы.ЛогинSQL.Получить();
	ПарольSQL = Константы.ПарольSQL.Получить();
	//
	
	//Если НРег(База) = "данныетовародвижение" Тогда
	//	СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\10.0.0.40\Shared2\test\Данные Товародвижение.mdb";
	//ИначеЕсли НРег(База) = "данныетовародвижение_2" Тогда
	//	СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\10.0.0.40\Shared2\test\Данные Товародвижение_2.mdb";
	//ИначеЕсли НРег(База) = "данныетовародвижение_4" Тогда
	//	СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\10.0.0.40\Shared2\test\Данные Товародвижение_4.mdb";
	//СтрСоединения = НРег(СтрокаСоединенияИнформационнойБазы());
	//СтрСоединения = СтрЗаменить(СтрСоединения, "10.0.0.40", "srv-sql01");
	//ЭтоКопияБазы = НРег(Константы.СтрокаПодключенияКБазе.Получить()) <> СтрСоединения;
	Если НРег(База) = "данныетовародвижение" Тогда
		СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\10.0.0.90\база\Данные Товародвижение.mdb";
	ИначеЕсли НРег(База) = "данныетовародвижение_2" Тогда
		СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\10.0.0.90\база\Данные Товародвижение_2.mdb";
	ИначеЕсли НРег(База) = "данныетовародвижение_4" Тогда
		СтрСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\10.0.0.90\база\Данные Товародвижение_4.mdb";
	ИначеЕсли НРег(База) = "loyalty" Тогда
		СтрСоединения = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=Loyalty;LANGUAGE=русский; OLE DB Services=-2;";
	ИначеЕсли НРег(База) = "sms_union" Тогда
		//Если ЭтоКопияБазы Тогда
		//	СтрСоединения = "DRIVER={SQL Server Native Client 10.0};SERVER=SRV-SQL01;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_UNION_DEB;LANGUAGE=русский";
		//Иначе
			СтрСоединения = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_UNION;LANGUAGE=русский; OLE DB Services=-2;";
		//КонецЕсли;
	ИначеЕсли НРег(База) = "sms_repl" Тогда
		//Если ЭтоКопияБазы Тогда
		//	СтрСоединения = "DRIVER={SQL Server Native Client 10.0};SERVER=SRV-SQL01;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_UNION_DEB;LANGUAGE=русский";
		//Иначе
			СтрСоединения = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_REPL;LANGUAGE=русский; OLE DB Services=-2;";
		//КонецЕсли;	
	ИначеЕсли НРег(База) = "sms_union_deb" Тогда
		СтрСоединения = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_UNION_DEB;LANGUAGE=русский; OLE DB Services=-2;";	
	ИначеЕсли НРег(База) = "sms_izbenka" Тогда
		//Если ЭтоКопияБазы Тогда
		//	СтрСоединения = "DRIVER={SQL Server Native Client 10.0};SERVER=SRV-SQL01;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_Izbenka_Deb;LANGUAGE=русский";
		//Иначе	
			СтрСоединения = "DRIVER=SQL Server;SERVER=SRV-SQL01;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_Izbenka;LANGUAGE=русский";
			//СтрСоединения = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_Izbenka;LANGUAGE=русский; OLE DB Services=-2;";
		//КонецЕсли;	
	ИначеЕсли НРег(База) = "sms_izbenka_deb" Тогда
		СтрСоединения = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=SMS_Izbenka_Deb;LANGUAGE=русский; OLE DB Services=-2;";	
	ИначеЕсли НРег(База) = "m2" Тогда
		СтрСоединения = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";DATABASE=M2;LANGUAGE=русский; OLE DB Services=-2;";	
	ИначеЕсли НРег(База) = "olap" Тогда
		СтрСоединения  = "SERVER=10.0.0.40; DRIVER=SQL Server; UID=" + ЛогинSQL + "; PWD=" + ПарольSQL + "; DATABASE=OLAP; LANGUAGE=русский; OLE DB Services=-2;";
	ИначеЕсли НРег(База) = "smsgate" Тогда
		СтрСоединения  = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";WSID=SERVER00;DATABASE=SMSGate;LANGUAGE=русский; OLE DB Services=-2;";	
	ИначеЕсли НРег(База) = "vv" Тогда
		СтрСоединения  = "DRIVER=SQL Server;SERVER=10.0.0.40;UID=" + ЛогинSQL + ";PWD=" + ПарольSQL + ";LANGUAGE=русский; OLE DB Services=-2;";
	Иначе
		СтрСоединения = Неопределено;
	КонецЕсли;
	Возврат СтрСоединения;
КонецФункции

Функция ВыполнитьЗапрос(ТекстЗапроса)
	
	//Сообщить(ТекстЗапроса);
	ДанныеИзAccess = Новый ТаблицаЗначений;
	
	СтрокаПодключения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\server00\База\Данные Товародвижение.mdb";
	//СтрокаПодключения 	= "Driver={Microsoft Access Driver (*.mdb)};"; 
	//СтрокаПодключения 	= СтрокаПодключения + "Dbq=\\server00\База\Данные Товародвижение.mdb;"; 
	//СтрокаПодключения 	= СтрокаПодключения + "Uid=" + ИмяПользователя + ";"; 
	//СтрокаПодключения 	= СтрокаПодключения + "Pwd=" + Пароль + ";"; 
	
	Connection = Новый COMОбъект("ADODB.Connection"); 
	Connection.ConnectionString = СтрокаПодключения; 
	Connection.Open();
	
	RS = Новый COMОбъект("ADODB.Recordset"); 
	
	Попытка
		RS.Open(ТекстЗапроса, Connection); 
		
		//СоответствиеКолонокТаблицы.Очистить();
		//СоответствиеИменКолонокТаблицы.Очистить();
		
		// Колонки
		Для iCount = 0 По RS.Fields.Count-1 Цикл
			
			ИмяПоля = RS.Fields.Item(iCount).Name;
			
			//ИдПоля = "К" + iCount;
			
			ДанныеИзAccess.Колонки.Добавить(ИмяПоля);
			
			//СоответствиеКолонокТаблицы.Вставить(ИдПоля, ИмяПоля); 
			//СоответствиеИменКолонокТаблицы.Вставить(ИмяПоля, ИдПоля);
			
		КонецЦикла;
		
		// Строки
		Пока RS.EOF() = 0 Цикл 
			
			НоваяСтрокаТаблицы = ДанныеИзAccess.Добавить(); 
			Для Каждого ТекущееПоле Из ДанныеИзAccess.Колонки Цикл
				//ИмяПоля = СоответствиеКолонокТаблицы.Получить(ТекущееПоле.Имя);  
				НоваяСтрокаТаблицы[ТекущееПоле.Имя] = RS.Fields(ТекущееПоле.Имя).Value; 
			КонецЦикла;	
			
			RS.MoveNext(); 
		КонецЦикла; 
		
		RS.Close(); 
		Connection.Close(); 
		Возврат ДанныеИзAccess;
	Исключение
		Connection.Close();
		Сообщить(ОписаниеОшибки(),СтатусСообщения.Внимание);
		Сообщить(ТекстЗапроса,СтатусСообщения.Информация);
	КонецПопытки;	
	
КонецФункции // ()


Процедура _ЗагрузитьТТ() 
	СтрСоединенияДанныеТовародвижение = ПолучитьСтрокуСоединения("ДанныеТовародвижение");
//	СтрСоединенияДанныеТовародвижение = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D:\Izbenka\База\Данные Товародвижение.mdb";
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	СоответствиеИДСкладов = Новый Соответствие;
	Строгино 	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",30).Ссылка;
	Марьино 	= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",8).Ссылка;
	
	ГДСоответствиеИДСкладов = Новый Соответствие;
	ГДСтрогино 	= Справочники.ГруппыДоступаСтруктурныхЕдиниц.НайтиПоКоду("000000002").Ссылка;
	ГДМарьино 	= Справочники.ГруппыДоступаСтруктурныхЕдиниц.НайтиПоКоду("000000001").Ссылка;
	
	
	//Склады
	СоответствиеИДСкладов.Вставить(8	,Марьино);
	СоответствиеИДСкладов.Вставить(128	,Марьино);
	СоответствиеИДСкладов.Вставить(301	,Марьино);
	СоответствиеИДСкладов.Вставить(457	,Марьино);
	СоответствиеИДСкладов.Вставить(30	,Строгино);
	СоответствиеИДСкладов.Вставить(77	,Строгино);
	СоответствиеИДСкладов.Вставить(208	,Строгино);
	СоответствиеИДСкладов.Вставить(422	,Строгино);
	
	//Группы доступа
	ГДСоответствиеИДСкладов.Вставить(8	,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(128,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(301,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(457,ГДМарьино);
	ГДСоответствиеИДСкладов.Вставить(30	,ГДСтрогино);
	ГДСоответствиеИДСкладов.Вставить(77	,ГДСтрогино);
	ГДСоответствиеИДСкладов.Вставить(208,ГДСтрогино);
	ГДСоответствиеИДСкладов.Вставить(422,ГДСтрогино);
	
	
	//1. Получаем данные из Access 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	TT.id_TT КАК ИД_ТТ,
	               |	TT.name_TT КАК НаименованиеТТ,
	               |	TT.start_date КАК ДатаОткрытияТТ,
				   |	TT.close_date КАК ДатаЗакрытияТТ,
	               |	TT.type_tt КАК ТипТТ,
	               |	TT_sklad.id_sklad
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT КАК TT
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT_sklad КАК TT_sklad
	               |		ПО TT.id_TT = TT_sklad.id_tt
	               |ГДЕ
	               |	TT.is_active = ИСТИНА
	               |	И TT_sklad.id_group = 33";
	//ТТ = Запрос.Выполнить().Выгрузить();		
	//ТТ.ВыбратьСтроку();
	//Возврат;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СЕ = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Выборка.ИД_ТТ).Ссылка;
		Если СЕ.Пустая() Тогда
			СЕ = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
			СЕ.УстановитьНовыйКод("Р");
			СЕ.id_TT				= Выборка.ИД_ТТ;
			ЭтоНовая = Истина;
		Иначе
			СЕ = СЕ.ПолучитьОбъект();
			ЭтоНовая = Ложь;
		КонецЕсли;
		
		Если Выборка.ТипТТ		= "торговая" Тогда
			СЕ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
			СЕ.ЕстьКасса 			= Истина;
		ИначеЕсли Выборка.ТипТТ = "производ" Тогда
			СЕ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство;
			СЕ.ЕстьКасса 			= Ложь;
		ИначеЕсли Выборка.ТипТТ = "склад" Тогда
			СЕ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
			СЕ.ЕстьКасса 			= Ложь;
		КонецЕсли;
		СЕ.Наименование 		= Выборка.НаименованиеТТ;
		СЕ.ДатаОткрытия			= Макс(ПолучитьПервуюДатуЛУ(СЕ.Ссылка, ЭтоНовая), ?(Выборка.ДатаОткрытияТТ = Null, Дата("00010101"), Выборка.ДатаОткрытияТТ));
		СЕ.ДатаЗакрытия			= Выборка.ДатаЗакрытияТТ;
		ГД = ГДСоответствиеИДСкладов.Получить(Выборка.id_sklad);
		СЕ.ГруппаДоступаСтруктурнойЕдиницы = ГД;
		СЕ.Записать();
		
		Если Выборка.ТипТТ		= "торговая" Тогда
			Склад = СоответствиеИДСкладов.Получить(Выборка.id_sklad);
			МенеджерЗаписиРегистра = РегистрыСведений.СкладыТорговыхТочек.СоздатьМенеджерЗаписи();
			МенеджерЗаписиРегистра.Период   = Дата("20111001");
			МенеджерЗаписиРегистра.Склад	= Склад;
			МенеджерЗаписиРегистра.ТорговаяТочка = СЕ.Ссылка;
			МенеджерЗаписиРегистра.Записать();
			
			//Если ЭтоНовая Тогда
			//	ЦФО =   Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003").Ссылка;
			//	МенеджерЗаписиРегистра = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
			//	МенеджерЗаписиРегистра.Период   = Дата("20111001");
			//	МенеджерЗаписиРегистра.ЦФО	= ЦФО;
			//	МенеджерЗаписиРегистра.СтруктурнаяЕдиница = СЕ.Ссылка;
			//	МенеджерЗаписиРегистра.Записать();
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
КонецПроцедуры

Процедура ПроверкаМодифицированности(Объект,ИмяРеквизита,НовоеЗначениеРеквизита,Модифицирован) Экспорт
	СтароеЗначениеРеквизита = Объект[ИмяРеквизита];
	Если ТипЗнч(Объект[ИмяРеквизита])=Тип("Строка") Тогда
		СтароеЗначениеРеквизита = СокрЛП(СтароеЗначениеРеквизита);
	КонецЕсли;
	Если НовоеЗначениеРеквизита = NULL Тогда
		НовоеЗначениеРеквизитаДляЗаписи = 0;
	Иначе
		НовоеЗначениеРеквизитаДляЗаписи = НовоеЗначениеРеквизита;
	КонецЕсли;
	Если ТипЗнч(НовоеЗначениеРеквизитаДляЗаписи)=Тип("Строка") Тогда
		НовоеЗначениеРеквизитаДляЗаписи = СокрЛП(НовоеЗначениеРеквизитаДляЗаписи);
	КонецЕсли;
	
	Если НЕ СтароеЗначениеРеквизита = НовоеЗначениеРеквизитаДляЗаписи Тогда
		Объект[ИмяРеквизита] = НовоеЗначениеРеквизитаДляЗаписи;
		Модифицирован = Истина;
	КонецЕсли;
КонецПроцедуры

//koro 13.11.17 17080 
Функция ПолучитьТаблицуЧековSQL(ДатаЧек) Экспорт
	
		
	ТекстЗапроса = "SELECT   Ch.CashID, Ch.ShopNo,  Ch.CashID, Ch.CashCheckNo, Ch.CloseDate,
	|			Ch.BaseSum, Ch.Discount, Ch.BONUSCARD, Ch.SummCash, Ch.SummBank, Ch.SummBonus, Ch.OperationType, 
	|			NULL as terminal_bank
	|			  
	|			FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
	|			WHERE cast(Ch.CloseDate as date) >= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"' and cast(Ch.CloseDate as date) <= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"'	
	|	
	| UNION ALL
	|
	|				SELECT  Ch.CashID, Ch.ShopNo, Ch.CashID, Ch.CashCheckNo, Ch.CloseDate,
	|			Ch.BaseSum, Ch.Discount, Ch.BONUSCARD, Ch.SummCash, Ch.SummBank, Ch.SummBonus, Ch.OperationType,
	|			 Ch.terminal_bank
	|			  
	|			FROM [SMS_UNION].[dbo].[Checks] as Ch (nolock) 
	|			WHERE cast(Ch.CloseDate as date) >= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"' and cast(Ch.CloseDate as date) <= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"'";
	

	//Ch.LoadDateTime, Ch.HistoryLineNo, Ch.OperationTypeOrig	
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = СтрСоединенияДанныеТовародвижение;
	ADOСоединение.Open();
	
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	
	ВыборкаSQLПоЧекам = Новый ТаблицаЗначений;
	ВыборкаSQLПоЧекам.Колонки.Добавить("CashID");
	ВыборкаSQLПоЧекам.Колонки.Добавить("ShopNo");
	ВыборкаSQLПоЧекам.Колонки.Добавить("CloseDate");	
	ВыборкаSQLПоЧекам.Колонки.Добавить("BaseSum");
	ВыборкаSQLПоЧекам.Колонки.Добавить("CashCheckNo");
	ВыборкаSQLПоЧекам.Колонки.Добавить("SummBank");
	ВыборкаSQLПоЧекам.Колонки.Добавить("terminal_bank");
	ВыборкаSQLПоЧекам.Колонки.Добавить("ТерминалID");
	
	попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Стр = ВыборкаSQLПоЧекам.Добавить();
			Стр.CashID = rs.Fields("CashID").Value;
			Стр.ShopNo = rs.Fields("ShopNo").Value;
			Стр.CloseDate = Дата(rs.Fields("CloseDate").Value);			
			Стр.CashCheckNo = rs.Fields("CashCheckNo").Value;
			Стр.BaseSum = rs.Fields("BaseSum").Value;
			Стр.terminal_bank = rs.Fields("terminal_bank").Value;
			Стр.SummBank   =  rs.Fields("SummBank").Value;
			Если Стр.CashID > 100000 Тогда
				Стр.ТерминалID = Стр.ShopNo*10+1;
			Иначе 	
				Стр.ТерминалID = Стр.CashID;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Возврат	 ВыборкаSQLПоЧекам;
	КонецПопытки;	
	
	Возврат ВыборкаSQLПоЧекам;
	
КонецФункции
