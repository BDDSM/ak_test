
// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = ПолучитьГраницыЗапретаИзмененияДанных();	
	
КонецПроцедуры

Функция ПолучитьГраницыЗапретаИзмененияДанных() Экспорт
		
	МСФО=Ложь;
	
	Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		Возврат Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));	
    КонецЕсли;
    
    ТекстЗапросаПоОрганизациям = "
    |ВЫБРАТЬ
    |       Значение(Справочник.Организации.ПустаяСсылка) как Организация
    |   ОБЪЕДИНИТЬ ВСЕ
    |   ВЫБРАТЬ
    |       Организации.Ссылка
    |   ИЗ 
    |       Справочник.Организации КАК Организации ";
	
    ТекстЗапросаПоОбщейДатеЗапретаРедактирования = "ВЫБРАТЬ
                                                   |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений, ДатаВремя(1,1,1)) КАК ОбщаяДата,
												   |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзмененийМСФО, ДатаВремя(1,1,1)) КАК ОбщаяДатаМСФО
                                                   |ИЗ
                                                   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
                                                   |ГДЕ
                                                   |    ГраницыЗапретаИзмененияДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
                                                   |    И ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
    ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
                                       |    Границы.Организация КАК Организация,
                                       |    Границы.Пользователь КАК Пользователь,
                                       |    ВЫБОР
                                       |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |            ТОГДА 3
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
                                       |                И ГруппыПользователей.Пользователь = &Пользователь
                                       |            ТОГДА 2
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
                                       |                И Границы.Пользователь = &Пользователь
                                       |            ТОГДА 1
                                       |    КОНЕЦ КАК Приоритет,
                                       |    Границы.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений,
									   |    Границы.ГраницаЗапретаИзмененийМСФО КАК ГраницаЗапретаИзмененийМСФО
                                       |ИЗ
                                       |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                                       |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователей
                                       |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
                   |    Организации.Организация как Организация,
				   |    ВЫБОР КОГДА &МСФО <> ИСТИНА Тогда
                   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ОбщаяДатаЗапрета.ОбщаяДата)) ИНАЧЕ 
				   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзмененийМСФО, ОбщаяДатаЗапрета.ОбщаяДатаМСФО))  КОНЕЦ КАК ГраницаЗапретаИзменений,
				   |    ВЫБОР КОГДА &МСФО <> ИСТИНА Тогда
                   |    ОбщаяДатаЗапрета.ОбщаяДата ИНАЧЕ
				   |    ОбщаяДатаЗапрета.ОбщаяДатаМСФО КОНЕЦ как ОбщаяДата				   
                   |ИЗ
                   | (" + ТекстЗапросаПоОрганизациям+") Как Организации  
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |            Границы.Организация КАК Организация,
                   |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
                   |        ИЗ
                   |            РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                   |                ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
                   |                ПО Границы.Организация = Приоритеты.Организация
                   |                    И Границы.Пользователь = Приоритеты.Пользователь
                   |        
                   |        СГРУППИРОВАТЬ ПО
                   |            Границы.Организация) КАК ТаблицаПриоритетов
                   |        ПО ТаблицаПриоритетов.Организация = Организации.Организация
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
                   |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
                   |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет,
                   | (" + ТекстЗапросаПоОбщейДатеЗапретаРедактирования + ") Как ОбщаяДатаЗапрета
                   |СГРУППИРОВАТЬ ПО
				    |Организации.Организация, ОбщаяДата, ОбщаяДатаМСФО";
	
	Запрос.УстановитьПараметр("МСФО", МСФО);
    Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
        ОбщаяДатаЗапрета = Неопределено;
		
		ОбщаяДатаЗапретаНДС = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			Соответствие[Выборка.Организация] = ?(ЗначениеЗаполнено(Выборка.ГраницаЗапретаИзменений), КонецДня(Выборка.ГраницаЗапретаИзменений), Выборка.ГраницаЗапретаИзменений);          
			
			Если ОбщаяДатаЗапрета = Неопределено Тогда
                ОбщаяДатаЗапрета = ?(ЗначениеЗаполнено(Выборка.ОбщаяДата), КонецДня(Выборка.ОбщаяДата), Выборка.ОбщаяДата);
            КонецЕсли;            
        КонецЦикла;
        
        Если НЕ ОбщаяДатаЗапрета = Неопределено Тогда
            Соответствие["ОбщаяДатаЗапретаРедактирования"] = ОбщаяДатаЗапрета;
        КонецЕсли;
        
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	Возврат Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));
	
КонецФункции

 //++ АК luza 11.01.2017 ИП-00017231.01
Функция ПолучитьГраницыЗапретаИзмененияДанныхНДС() Экспорт
		
	МСФО=Ложь;
	
	Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		Возврат Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));	
    КонецЕсли;
    
    ТекстЗапросаПоОрганизациям = "
    |ВЫБРАТЬ
    |       Значение(Справочник.Организации.ПустаяСсылка) как Организация
    |   ОБЪЕДИНИТЬ ВСЕ
    |   ВЫБРАТЬ
    |       Организации.Ссылка
    |   ИЗ 
    |       Справочник.Организации КАК Организации ";
	
    ТекстЗапросаПоОбщейДатеЗапретаРедактирования = "ВЫБРАТЬ
                                                   |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзмененийНДС, ДатаВремя(1,1,1)) КАК ОбщаяДата,
												   |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзмененийМСФО, ДатаВремя(1,1,1)) КАК ОбщаяДатаМСФО
												   |ИЗ
                                                   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
                                                   |ГДЕ
                                                   |    ГраницыЗапретаИзмененияДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
                                                   |    И ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
    ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
                                       |    Границы.Организация КАК Организация,
                                       |    Границы.Пользователь КАК Пользователь,
                                       |    ВЫБОР
                                       |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |            ТОГДА 3
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
                                       |                И ГруппыПользователей.Пользователь = &Пользователь
                                       |            ТОГДА 2
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
                                       |                И Границы.Пользователь = &Пользователь
                                       |            ТОГДА 1
                                       |    КОНЕЦ КАК Приоритет,
                                       |    Границы.ГраницаЗапретаИзмененийНДС КАК ГраницаЗапретаИзменений,
									   |    Границы.ГраницаЗапретаИзмененийМСФО КАК ГраницаЗапретаИзмененийМСФО									   
                                       |ИЗ
                                       |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                                       |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователей
                                       |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
                   |    Организации.Организация как Организация,
				   |    ВЫБОР КОГДА &МСФО <> ИСТИНА Тогда
                   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ОбщаяДатаЗапрета.ОбщаяДата)) ИНАЧЕ 
				   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзмененийМСФО, ОбщаяДатаЗапрета.ОбщаяДатаМСФО))  КОНЕЦ КАК ГраницаЗапретаИзменений,
				   |    ВЫБОР КОГДА &МСФО <> ИСТИНА Тогда
                   |    ОбщаяДатаЗапрета.ОбщаяДата ИНАЧЕ
				   |    ОбщаяДатаЗапрета.ОбщаяДатаМСФО КОНЕЦ как ОбщаяДата				   
                   |ИЗ
                   | (" + ТекстЗапросаПоОрганизациям+") Как Организации  
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |            Границы.Организация КАК Организация,
                   |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
                   |        ИЗ
                   |            РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                   |                ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
                   |                ПО Границы.Организация = Приоритеты.Организация
                   |                    И Границы.Пользователь = Приоритеты.Пользователь
                   |        
                   |        СГРУППИРОВАТЬ ПО
                   |            Границы.Организация) КАК ТаблицаПриоритетов
                   |        ПО ТаблицаПриоритетов.Организация = Организации.Организация
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
                   |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
                   |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет,
                   | (" + ТекстЗапросаПоОбщейДатеЗапретаРедактирования + ") Как ОбщаяДатаЗапрета
                   |СГРУППИРОВАТЬ ПО				   
				   |Организации.Организация, ОбщаяДата, ОбщаяДатаМСФО";
	
	Запрос.УстановитьПараметр("МСФО", МСФО);
    Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
        ОбщаяДатаЗапрета = Неопределено;
		
		ОбщаяДатаЗапретаНДС = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			Соответствие[Выборка.Организация] = ?(ЗначениеЗаполнено(Выборка.ГраницаЗапретаИзменений), КонецДня(Выборка.ГраницаЗапретаИзменений), Выборка.ГраницаЗапретаИзменений);          
			
			Если ОбщаяДатаЗапрета = Неопределено Тогда
                ОбщаяДатаЗапрета = ?(ЗначениеЗаполнено(Выборка.ОбщаяДата), КонецДня(Выборка.ОбщаяДата), Выборка.ОбщаяДата);
            КонецЕсли;            
        КонецЦикла;
        
        Если НЕ ОбщаяДатаЗапрета = Неопределено Тогда
            Соответствие["ОбщаяДатаЗапретаРедактирования"] = ОбщаяДатаЗапрета;
        КонецЕсли;
        
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	Возврат Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));
	
КонецФункции
 //-- АК luza 11.01.2017 ИП-00017231.01

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

// Функция определяет наличение движения по регистрам для документа
//
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("Имя");
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Функция определяет наличие хотя бы одной записи в регистре сведений
//
// Параметры
//  ИмяРегистра - строка
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьЗаписиВРегистреСведений(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегСв.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегСв";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции // ЕстьЗаписиВРегистреСведений()

Процедура ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки)
	
	Попытка
		НаборПрав.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьПраваДоступаПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт
	
	// Проверим, что пользователь имеет права для использования процедуры
	Если НЕ УправлениеДопПравамиПользователей.ЕстьПравоАдминистрированияПользователей() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа!",, ШапкаОшибки);
		Возврат;
	КонецЕсли;	
	
	НаборПрав   = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если Не ЭлементСтруктуры.Ключ = "ВладелецПравДоступа" Тогда
			НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим набор на корректность установленных отборов
	Если НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
		ОтборПоОбъектуДоступа = Истина;
		ОбъектДоступа = НаборПрав.Отбор.ОбъектДоступа.Значение;
		НаборПрав.Отбор.ВладелецПравДоступа.Установить(ОбъектДоступа);
		НаборПрав.Отбор.ОбъектДоступа.Использование = Ложь;
	ИначеЕсли НаборПрав.Отбор.Пользователь.Использование Тогда
		
		ОтборПоОбъектуДоступа = Ложь;
		НаборПрав.Отбор.НаследованаОтВсеПользователи.Установить(Ложь);		
		
		Если НЕ ЗначениеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаРазличияСтрок   = НаборПрав.Выгрузить();
	ТаблицаРазличияЗаписей = НаборПрав.Выгрузить();
	
	НаборПрав.Прочитать();
	
	ТаблицаСтарогоНабора = НаборПрав.Выгрузить();
	
	ТаблицаНовогоНабора  = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаНабораПрав);
	
	НаборПрав.Загрузить(ТаблицаНовогоНабора);
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав);
	
	Если ОтборПоОбъектуДоступа Тогда
		НастройкаПравДоступа.ДополнитьНаборПравДоступаГруппамиПользователей(НаборПрав);
	КонецЕсли;
		
	ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки);
	
КонецПроцедуры // ЗаписатьПраваДоступаПользователей 

////////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ = Ложь) Экспорт

	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДоступа.Установить(СсылкаНового);
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписей, СсылкаНового, Родитель);
		
	ЗаписатьНаборПрав(НаборЗаписей, Отказ, "Не удалось записать права доступа к объекту!")
	
КонецПроцедуры
	
Функция ОбновитьПраваДоступаПользователейПоВладельцуДоступа(Ссылка, ОбновляемыйОбъект = Неопределено) Экспорт
	
	ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(Ссылка);
	ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(Ссылка);
	
	ПраваДоступаПользователей.Прочитать();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Ложь;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(ПраваДоступаПользователей);
		
	Попытка
		ПраваДоступаПользователей.Записать(Истина);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // () 

////////////////////////////////////////////////////////////////////////////////

//+++АК SHEP 2018.03.14
Функция ПолучитьПравоПользователяУпр(Право, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Возврат УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(Право, ЗначениеПоУмолчанию);
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьРезультатЗапросаПоВыборкеОрганизаций(ИмяСправочника, ИмяРеквизита, ИмяРеквизитаОрганизации, СсылкаНаСправочник) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Спр." + ИмяРеквизитаОрганизации + " КАК Организация
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр." + ИмяРеквизита + " = &СсылкаНаЭлемент";
				   
	Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ПРОВЕРКИ ЗАПОЛНЕНИЯ ОТЧЕТОВ ПОД РЛС

// Функция проверяет есть используються ли роли с ограничением прав доступа на уровне записи
//
Функция ИспользуетсяОграниченияПравДоступаНаУровнеЗаписей() Экспорт 
    ИспользуетсяРЛС = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
    ИспользуетсяРЛС = ИспользуетсяРЛС И Не РольДоступна("ПолныеПрава");
    Возврат ИспользуетсяРЛС;
КонецФункции

Процедура УстановитьПараметрыМеханизмаОграниченияПравДоступа() Экспорт
	
	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
	Если ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВидыОбъектовДоступа.Ссылка,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ПользователиГруппы.Ссылка ЕСТЬ NULL 
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа ЕСТЬ NULL 
		               |						ТОГДА ЛОЖЬ
		               |					ИНАЧЕ ИСТИНА
		               |				КОНЕЦ
		               |		КОНЕЦ) КАК ЕстьОграничение
		               |ИЗ
		               |	Перечисление.ВидыОбъектовДоступа КАК ВидыОбъектовДоступа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
		               |		ПО (ПользователиГруппы.Пользователь = &ТекущийПОльзователь)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		               |		ПО (НазначениеВидовОбъектовДоступа.ГруппаПользователей = ПользователиГруппы.Ссылка)
		               |			И (НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ВидыОбъектовДоступа.Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВидыОбъектовДоступа.Ссылка";
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		ВидыОбъектовДоступаЗначения = Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления; 
		Пока Выборка.Следующий() Цикл
			ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидыОбъектовДоступаЗначения.Получить(Перечисления.ВидыОбъектовДоступа.Индекс(Выборка.Ссылка)).Имя] = Выборка.ЕстьОграничение;
		КонецЦикла;
		
			
	Иначе
		
		Для Каждого ВидОбъектаДоступа Из Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления Цикл			
			ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидОбъектаДоступа.Имя] = Ложь;			
		КонецЦикла;
		
	КонецЕсли;
	
	//+++ АК Pans 20150122
	//МС1 = Новый Массив;
	//МС1.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000452"));
	//
	//МСРез = Новый Массив;
	//
	//Запрос1 = Новый Запрос;
	//Запрос1.Текст = 
	//"ВЫБРАТЬ
	//|	Контрагенты.Ссылка
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.ЭтоГруппа = ИСТИНА
	//|	И Контрагенты.Ссылка В ИЕРАРХИИ(&ГруппаПоставщиковТоваров)";
	//
	//Запрос1.УстановитьПараметр("ГруппаПоставщиковТоваров", МС1);
	//
	//Рез1 = Запрос1.Выполнить();
	//Выб1 = Рез1.Выбрать();
	//
	//Пока Выб1.Следующий() Цикл
	//	МСРез.Добавить(Выб1.Ссылка);
	//КонецЦикла; 
	//ПараметрыСеанса.ГруппыКонтрагентовПоставщикиТоваров = Новый ФиксированныйМассив(МСРез);
	//--- АК Pans 20150122
	
	//ПараметрыСеанса.ПравоВидетьЗаявкиНаРасходованиеПоВсемЦФО = РольДоступна("ПравоВидетьЗаявкиНаРасходованиеПоВсемЦФО");
	//ПараметрыСеанса.ПравоВидетьЗаявкиНаРасходованиеТолькоНаНаличные = РольДоступна("ПравоВидетьЗаявкиНаРасходованиеТолькоНаНаличные");
	//ПараметрыСеанса.ПравоВидетьЗаявкиНаРасходованиеТолькоНаБезналичные = РольДоступна("ПравоВидетьЗаявкиНаРасходованиеТолькоНаБезналичные");
	
	//ПараметрыСеанса.МассивЦФОПросмотрЗаявок = Новый ФиксированныйМассив(ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ТекущаяДата(), ПараметрыСеанса.ТекущийПользователь, Истина));
	//ПараметрыСеанса.МассивСтатьиПросмотрЗаявок = Новый ФиксированныйМассив(ОбщиеПроцедуры.ПолучитьСписокСтатейДДСДляАкцептированияПользователя(ПараметрыСеанса.ТекущийПользователь, Истина));
	//МассивПользователиЗаявок = Новый Массив();
	//МассивПользователиЗаявок.Добавить(ПараметрыСеанса.ТекущийПользователь);
	//Если ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Курвяков Евгений") Тогда
	//	МассивПользователиЗаявок.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Крылова Наталья"));
	//ИначеЕсли ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Машкина Олеся") Тогда
	//	МассивПользователиЗаявок.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Несифорова Алена"));
	//КонецЕсли;
	//ПараметрыСеанса.МассивПользователейПросмотрЗаявок = Новый ФиксированныйМассив(МассивПользователиЗаявок);
	
	//+++ АК Pans 20151123
	// Установка параметра "ДоступныеРакурсы"
	//МассивРолей = МеханизмОбменаСообщениями.ПолучитьРолиПользователяИлиФизЛица(ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	//
	//МассивДР = Новый Массив;
	//Запрос1 = Новый Запрос;
	//Запрос1.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РолиПользователейДоступныеРакурсы.Ракурс
	//|ИЗ
	//|	Справочник.РолиПользователей.ДоступныеРакурсы КАК РолиПользователейДоступныеРакурсы
	//|ГДЕ
	//|	РолиПользователейДоступныеРакурсы.Ссылка.ПометкаУдаления = ЛОЖЬ
	//|	И РолиПользователейДоступныеРакурсы.Ссылка В(&Роли)";
	//
	//Запрос1.УстановитьПараметр("Роли", МассивРолей);
	//
	//Рез1 = Запрос1.Выполнить();
	//Выб1 = Рез1.Выбрать();
	//
	//Пока Выб1.Следующий() Цикл
	//	МассивДР.Добавить(Выб1.Ракурс);
	//КонецЦикла;
	//ПараметрыСеанса.ДоступныеРакурсы = Новый ФиксированныйМассив(МассивДР);
	//--- АК Pans 20151123
	
КонецПроцедуры


// Процедура удаляет из регистра сведений данные
// незарегистрированного контрагента.
//
Процедура УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ) Экспорт

	НаборЗаписей = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРегистратор.Использование = Истина;
	НаборЗаписей.Отбор.ОбъектРегистратор.Значение      = Ссылка;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПРИ ЗАПИСИ НОМЕНКЛАТУРЫ

// Функция проверяет, существуют ли ссылки на единицу измерения в движениях регистров накопления.
// Если есть - нельзя менять коэффицент
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция Номенклатура_СуществуютСсылки(Ссылка, СуществуютСсылки) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано
	КонецЕсли;
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ТекущийВладелец", Ссылка);

	ТипНоменклатура = ТипЗнч(Справочники.Номенклатура.ПустаяСсылка());

	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипНоменклатура) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегистрНакопления."+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+" КАК Номенклатура
				|ГДЕ
				|	"+РеквизитРегистра.Имя+" = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции //  СуществуютСсылки()

// Функция проверяет, существуют ли ссылки на серию  в движениях регистров накопления.
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция Номенклатура_СуществуютСсылкиНаСерииВРегистрахНакопления(Ссылка) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Запрос.УстановитьПараметр("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	ТипСерия	 = ТипЗнч(Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипСерия) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|   ИСТИНА
				|ИЗ
				|	РегистрНакопления."+РегистрНакопления.Имя+" КАК "+РегистрНакопления.Имя+"
				|ГДЕ
				|   "+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+" <> &СерияНоменклатуры
				|И "+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+".Владелец = &Номенклатура
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	СуществуютСерии = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСерии;

КонецФункции //СуществуютСсылкиНаСерииВРегистрахНакопления()

// Функция проверяет, существуют ли ссылки на вид номенклатуры в справочнике "Номенклатура".
// Если есть - нельзя менять коэффицент
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция ВидыНоменклатуры_СуществуютСсылкиВНоменклатуре(Ссылка, СуществуютСсылки) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры = &ТекущийЭлемент
	|";
	
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции //  СуществуютСсылки()

////////////////////////////////////////////////////////////////////////////////

// Функция проверяет, существуют ли ссылки на статью затрат в движениях регистров накопления.
//
// Параметры:
//	Ссылка - СправочникСсылка.СтатьиЗатрат - Статья затрат
//
// Возвращаемое значение:
//  Булево - Истина - если есть движения, 
//			 Ложь - если нет.
//
Функция СтатьяЗатрат_СуществуютСсылкиВРегистрахНакопления(Ссылка) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СтатьяЗатрат", Ссылка);
	
	ТипЗначения = ТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.УчетЗатрат.АналитикаУчетаЗатрат
	|ГДЕ
	|	АналитикаУчетаЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Ссылка
	|       ИЗ
	|       	РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ГДЕ
	|			СтатьяЗатрат = &СтатьяЗатрат
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.УчетЗатратРегл.АналитикаУчетаЗатрат
	|ГДЕ
	|	АналитикаУчетаЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Ссылка
	|       ИЗ
	|       	РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ГДЕ
	|			СтатьяЗатрат = &СтатьяЗатрат
	|		)
	|";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипЗначения) Тогда
				Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|   ИСТИНА
				|ИЗ
				|	РегистрНакопления." + РегистрНакопления.Имя + " КАК " + РегистрНакопления.Имя + "
				|ГДЕ
				|   " + РегистрНакопления.Имя + "." + РеквизитРегистра.Имя + " = &СтатьяЗатрат
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции // СтатьяЗатрат_СуществуютСсылкиВРегистрахНакопления()

Процедура ОбновитьПраваДоступаКПрошлымРодителям(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ) Экспорт
	
	ОбновляемыеОбъекты = Новый Массив;
	ОбновляемыеОбъекты.Добавить(ПрошлыйИзмененныйРодительОбъектаДоступа);
	НастройкаПравДоступа.ПолучитьМассивРодительскихЭлементов(ПрошлыйИзмененныйРодительОбъектаДоступа, ОбновляемыеОбъекты);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа = НастройкиПравДоступаПользователей.ВладелецПравДоступа И 
	|	НастройкиПравДоступаПользователей.ОбъектДоступа В (&ОбновляемыеОбъекты)";
	
	Запрос.УстановитьПараметр("ОбновляемыеОбъекты", ОбновляемыеОбъекты);	
	
	ОбновляемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ОбновляемыйОбъект Из ОбновляемыеОбъекты Цикл
		
		МассивЭлементов = НастройкаПравДоступа.ПолучитьМассивДочернихЭлементов(Ссылка);
		МассивЭлементов.Добавить(Ссылка);
		
		Для Каждого ПодчиненныйЭлемент ИЗ МассивЭлементов Цикл
		
			ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
		
			ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(ПодчиненныйЭлемент);
			ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(ОбновляемыйОбъект);
			
			Попытка
				ПраваДоступаПользователей.Записать();		
			Исключение
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки() + Символы.ПС+ " .Не записаны права доступа к объекту: " + Ссылка);
				Возврат;
			КонецПопытки;
		
		КонецЦикла;
			
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьСписокОбновляемыхОбъектовПриПереносеВГруппу(Ссылка, ОбновляемыеОбъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа = НастройкиПравДоступаПользователей.ВладелецПравДоступа и 
	|	(НастройкиПравДоступаПользователей.ОбъектДоступа В (&ОбновляемыеОбъекты)";
	
	Если НастройкаПравДоступа.ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка) = "Родитель" Тогда
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ НастройкиПравДоступаПользователей.ОбъектДоступа В ИЕРАРХИИ (&Ссылка))";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Иначе
		Запрос.Текст = Запрос.Текст + ")";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОбновляемыеОбъекты", ОбновляемыеОбъекты);	
	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция Кассы_СуществуютСсылки(Касса) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РегистрНакопления.ДенежныеСредства.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства
	|ГДЕ
	|	РегистрНакопления.ДенежныеСредства.БанковскийСчетКасса = &Касса";

	Запрос.УстановитьПараметр("Касса", Касса);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция Категории_СуществуютСсылки(Категория) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.КатегорииОбъектов.Категория КАК Категория
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов
	|
	|ГДЕ
	|	РегистрСведений.КатегорииОбъектов.Категория = &Категория
	|";

	Запрос.УстановитьПараметр("Категория", Категория);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция СвойстваОбъектов_СуществуютСсылки(Свойство) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = &Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.НазначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = &Свойство
	|";

	Запрос.УстановитьПараметр("Свойство", Свойство);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция СерииНоменклатуры_СуществуютСсылки(СерияНоменклатуры) Экспорт

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыНаСкладах.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыОрганизаций.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровНаСкладах.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыВНТТ.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|";

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция Склад_СуществуютСсылки(Склад) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыНаСкладах.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ
	|	ТоварыНаСкладах.Склад = &Склад
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыВРознице.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыВРознице КАК ТоварыВРознице
	|ГДЕ
	|	ТоварыВРознице.Склад = &Склад
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыВНТТ.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ КАК ТоварыВНТТ
	|ГДЕ
	|	ТоварыВНТТ.Склад = &Склад
	|";

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Процедура записывает набор записей на сервере (привилегированно)
//
Процедура ЗаписатьНаборЗаписейНаСервере(ИмяРегистра, Регистратор, ТаблицаДвижений = Неопределено, ТипРегистра = "РегистрНакопления", РазрешитьЗаписьБезПроверки = Ложь) Экспорт
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		
		Если ТаблицаДвижений <> Неопределено Тогда
			Набор.мТаблицаДвижений = ТаблицаДвижений;
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Набор);		
		КонецЕсли;
		
	Иначе
		Если ТипРегистра = "РегистрБухгалтерии" Тогда
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			Если ИмяРегистра = "Финансовый" Тогда
				Набор.РазрешитьЗаписьБезПроверки = РазрешитьЗаписьБезПроверки;
			КонецЕсли;
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли; 
		
		Если ТаблицаДвижений <> Неопределено Тогда
			Набор.Загрузить(ТаблицаДвижений);
		КонецЕсли;
	КонецЕсли; 
	
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Набор.Записать();
	
КонецПроцедуры

Функция ПолучитьВыборкуПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерия) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ЗначениеКритерия)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РегистрацияОбъектовДоступаДокумента(ДокументСсылка, ОбъектыДоступа, Замещать = Истина) Экспорт
	
	ОбъектыДоступа.Свернуть("ОбъектДоступа, ВидОбъектаДоступа");
	ОбъектыДоступа.Колонки.Добавить("ДокументСсылка");
	ОбъектыДоступа.ЗаполнитьЗначения(ДокументСсылка, "ДокументСсылка");
		
	Набор = РегистрыСведений.ОбъектыДоступаДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Набор.Загрузить(ОбъектыДоступа);
	Набор.Записать(Замещать);

КонецПроцедуры

// Возвращает текущий максимальный номер строки в наборе записей регистра
//
Функция МаксНомерСтрокиВНабореЗаписей(ИмяРегистра, Регистратор, ВидРегистра = "РегистрНакопления", УчитыватьДвиженияПартионногоУчета = Ложь) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(Рег.НомерСтроки) КАК МаксНомерСтроки
	                      |ИЗ
	                      |"+ВидРегистра+"." +ИмяРегистра+ " КАК Рег
	                      |
	                      |ГДЕ
	                      |	Рег.Регистратор = &Регистратор");
						  
	Если УчитыватьДвиженияПартионногоУчета тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ","ГДЕ Рег.СписаниеПартий = Ложь И");
	КонецЕсли;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МаксНомерСтроки = Выборка.МаксНомерСтроки;
	Иначе
		МаксНомерСтроки = 0;
	КонецЕсли;
	
	Возврат МаксНомерСтроки;

КонецФункции //МаксНомерСтрокиВНабореЗаписей

// Функция получает должность, подразделение и табельный номер сотрудника организации.
//
// Параметры
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//  Организация - организация, для которой необходимо получить данные
//  Сотрудник   - Сотрудник, для которго необходимо получить данные
//
// Возвращаемое значение:
//   Структура с данными
//
Функция СведенияОСотруднике(ФизЛицо, ДатаПериода, Организация = Неопределено, Сотрудник = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПериода", ДатаПериода);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Для совместимости
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подразделение.Представление КАК Подразделение,
		|	Подразделение.Код КАК КодПодразделения,
		|	Должность.Представление     КАК Должность
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(&ДатаПериода, ФизЛицо = &ФизЛицо)
		|";
		
	ИначеЕсли ЗначениеЗаполнено(Сотрудник) Тогда
		
		// Если известен сотрудник, получим данные из регистра сведений "РаботникиОрганизаций"
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаПериода
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Представление
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Представление
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаПериода
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Представление
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Представление
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаПериода
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Код
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Код
		|	КОНЕЦ КАК КодПодразделения,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаПериода, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних"	
		
	Иначе
		
		// Если сотрудник не передан, тогда произведем поиск этого сотрудника в справочнике по физлицу и организации, 
		// и затем произведем поиск данных в регистре сведений "РаботникиОрганизаций"
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизаций.Код КАК ТабельныйНомер,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаПериода
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Представление
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Представление
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаПериода
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Код
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Код
		|	КОНЕЦ КАК КодПодразделения,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаПериода
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Представление
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Представление
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА 0
		|		КОГДА СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет,
		|	РаботникиОрганизацийСрезПоследних.Период КАК Период
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаПериода,
		|				Сотрудник В
		|						(ВЫБРАТЬ
		|							СотрудникиОрганизаций.Ссылка
		|						ИЗ
		|							Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|						ГДЕ
		|							СотрудникиОрганизаций.Физлицо = &Физлицо
		|							И (НЕ СотрудникиОрганизаций.ПометкаУдаления)
		|							И СотрудникиОрганизаций.Организация = &Организация)) КАК РаботникиОрганизацийСрезПоследних
		|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизаций.Физлицо = &Физлицо
		|	И СотрудникиОрганизаций.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Период УБЫВ"
		
		
	КонецЕсли; 	
	
	Результат = Новый Структура("ТабельныйНомер, ПодразделениеОрганизации, КодПодразделения, Должность");
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат,ВыборкаЗапроса)
	Иначе
		// Если в запросе ничего не нашли тогда вернем вместо табельного номера код физ.лица
		Результат.ТабельныйНомер = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.Код,"")
	КонецЕсли; 
	
	Возврат Результат
	
КонецФункции // СведенияОСотруднике()

////////////////////////////////////////////////////////////////////////////////
// Подготовка структуры для заполнения шапки документа

//Функция проверяет наличие свойства в структуре по ключу, и его заполненность
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - проверяемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//Возвращаемое значение - булево (Истина если свойство есть и оно заполнено)
Функция СвойствоЕстьИОноЗаполнено(ИмяСвойства, СтруктураПараметров)
	
	Возврат СтруктураПараметров.Свойство(ИмяСвойства) И ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]);

КонецФункции

//Функция проверяет наличие свойства в структуре и его заполненность
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - проверяемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//Возвращаемое значение - булево (Истина если свойство есть и оно НЕ заполнено)
Функция СвойствоЕстьИОноНЕЗаполнено(ИмяСвойства, СтруктураПараметров)
	
	Возврат СтруктураПараметров.Свойство(ИмяСвойства) И НЕ ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]);

КонецФункции

//Процедура заполняет свойство в структуре значением по умолчанию
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - проверяемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//			ИмяНастройки - строка, имя настройки пользователя, по которой необходимо заполнить значение в структуре
//			ЗаполнятьТолькоНезаполненные - булево, признак того что заполнять необходимо только если свойство еще не заполнено
Процедура ЗаполнитьСвойствоЗначениемПоУмолчанию(ИмяСвойства, ИмяНастройки, СтруктураПараметров, ЗаполнятьТолькоНезаполненные = Ложь)
	// если нет такого свойства, то сразу уходим
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства) Тогда 
		Возврат; 
	КонецЕсли;
	
	//Если свойство заполнено, и необходимо заполнять только незаполненные свойства - ничего делать не надо
	Если ЗаполнятьТолькоНезаполненные И ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров[ИмяСвойства] = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), ИмяНастройки);
КонецПроцедуры

//Процедура заполняет свойство в структуре значением по умолчанию. При этом проверяется, соответствует ли заполненное свойство организации.
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - обрабатываемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//			ИмяНастройки - строка, имя настройки пользователя, по которой необходимо заполнить значение в структуре
Процедура ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации(ИмяСвойства, ИмяНастройки, СтруктураПараметров) 
	// имеет смысл, если только свойство есть 
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;

	// если свойство не заполнено, то установим его в значение по умолчанию 
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) Тогда
		СтруктураПараметров[ИмяСвойства] = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), ИмяНастройки);
	КонецЕсли;
	
	// Если свойство установлено, Организация есть и установлена, и свойство не соответствует организации, то придется очистить свойство
	Если ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) 
			И СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров) 
			И СтруктураПараметров[ИмяСвойства].Владелец <> СтруктураПараметров.Организация Тогда
		СтруктураПараметров[ИмяСвойства] = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

//Процедура заполняет свойство в структуре банковским счетом владельца
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
// Параметры: СтруктураПараметров - обрабатываемая структура
//			ИмяСвойства - строка, имя проверяемого заполняемого (ключ структуры)
//			ИмяВладельца: строка, имя свойства содержащего владельца банковского счета ("Организация" или "Контрагент")
Процедура ЗаполнитьСвойствоБанковскимСчетомВладельца(ИмяСвойства, ИмяВладельца, СтруктураПараметров)
	// Перед вызовом процедуры проверяется, что Владелец есть и он заполнен. 
	//Поэтому внутри процедуры свойство ИмяВладельца на заполненность не проверяется

	// имеет смысл, если только свойство есть 
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	// если свойство не заполнено, то заполнить по Владельцу
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) Тогда
		
		СтруктураПараметров[ИмяСвойства] = СтруктураПараметров[ИмяВладельца].ОсновнойБанковскийСчет;
		
	// Свойство заполнено, значит надо проверить, соответствует ли оно Владельцу (что Владелец есть и он установлен, мы проверили до вызова процедуры)
	ИначеЕсли СтруктураПараметров[ИмяСвойства].Владелец <> СтруктураПараметров[ИмяВладельца] Тогда
		// Если свойство не соответствует Владельцу, то следует очистить его
		СтруктураПараметров[ИмяСвойства] = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается из процедуры ЗаполнитьШапкуДокумента.
//
//  СтруктураПараметров				- структура параметров для заполнения, содержит реквизиты шапки заполняемого документа,
//  ТипОперации						- строка вида операции ("Покупка", "Продажа", "ПокупкаКомиссия", "ПродажаКомиссия"),
//										если передана пустая строка, то реквизиты, зависящие от вида операции, не заполняются,
//  ОбъектКопирования				- ссылка на объект, с которого скопирован заполняемый документ,
//
Процедура ПодготовитьСтруктуруДляЗаполненияШапкиДокумента(СтруктураПараметров, ТипОперации, ОбъектКопирования) Экспорт
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	ЗаполнитьСвойствоЗначениемПоУмолчанию("Ответственный", "ОсновнойОтветственный", СтруктураПараметров);
	ЗаполнитьСвойствоЗначениемПоУмолчанию("Организация", "ОсновнаяОрганизация", СтруктураПараметров, Истина);
	
	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	//ЗаполнитьСвойствоЗначениемПоУмолчанию("ОтражатьВУправленческомУчете", "ОтражатьДокументыВУправленческомУчете", СтруктураПараметров);

	////		
	//		Если СтруктураПараметров.Свойство("ОтражатьВНалоговомУчете") Тогда
	//			Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
	//				//флаг может устанавливаться только если установлено отражение в БУ
	//				СтруктураПараметров.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
	//			Иначе
	//				СтруктураПараметров.ОтражатьВНалоговомУчете = Ложь;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	Иначе
	//		СтруктураПараметров.ОтражатьВБухгалтерскомУчете = Ложь;
	//		Если СтруктураПараметров.Свойство("ОтражатьВНалоговомУчете") Тогда
	//			СтруктураПараметров.ОтражатьВНалоговомУчете = Ложь;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли; //Если СтруктураПараметров.Свойство("Организация") И СтруктураПараметров.Свойство("ОтражатьВБухгалтерскомУчете") Тогда
	//
	//// Определяем дату для вычисления периода регистрации, курса валюты и учетной политики (используется ниже) 
	//ДатаДокумента = ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.Дата),ОбщегоНазначения.ПолучитьРабочуюДату(),СтруктураПараметров.Дата);

	//Если СтруктураПараметров.Свойство("ПериодРегистрации") Тогда
	//	СтруктураПараметров.ПериодРегистрации = НачалоМесяца(ДатаДокумента);
	//КонецЕсли;

	////если документ скопирован - другие реквизиты шапки не заполняем
	//Если ОбъектКопирования <> Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ЗаполнитьСвойствоЗначениемПоУмолчанию("Подразделение", "ОсновноеПодразделение", СтруктураПараметров, Истина);
	//ЗаполнитьСвойствоЗначениемПоУмолчанию("ДоговорЭквайринга", "ОсновнойДоговорЭквайринга", СтруктураПараметров);
	////Вид операции заполним первым по счету значением соответствующего перечисления
	//Если СвойствоЕстьИОноНЕЗаполнено("ВидОперации", СтруктураПараметров) Тогда
	//	СтруктураПараметров.ВидОперации = Перечисления[СтруктураПараметров.ВидОперации.Метаданные().Имя][0];
	//КонецЕсли;

	//ЗаполнитьСвойствоЗначениемПоУмолчанию("Склад", "ОсновнойСклад", СтруктураПараметров, Истина);

	//Если СвойствоЕстьИОноНЕЗаполнено("СкладОрдер", СтруктураПараметров) И СвойствоЕстьИОноНЕЗаполнено("ВидПоступления", СтруктураПараметров) Тогда
	//	СтруктураПараметров.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
	//	СтруктураПараметров.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	//КонецЕсли;
	//
	//Если СвойствоЕстьИОноНЕЗаполнено("ВидПередачи", СтруктураПараметров) Тогда
	//	СтруктураПараметров.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	//КонецЕсли;
	//ЗаполнитьСвойствоЗначениемПоУмолчанию("СтавкаНДС", "ОсновнаяСтавкаНДС", СтруктураПараметров, Истина);
	//
	//ЗаполнитьСвойствоЗначениемПоУмолчанию("УсловиеПродаж", "ОсновноеУсловиеПродаж", СтруктураПараметров, Истина); 

	////Заполним банковский счет по организации
	//Если СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров)  Тогда
	//	ЗаполнитьСвойствоБанковскимСчетомВладельца("БанковскийСчет",	"Организация", СтруктураПараметров);
	//	ЗаполнитьСвойствоБанковскимСчетомВладельца("СчетОрганизации",	"Организация", СтруктураПараметров);
	//	ЗаполнитьСвойствоБанковскимСчетомВладельца("СтруктурнаяЕдиница", "Организация", СтруктураПараметров);
	//	ЗаполнитьСвойствоБанковскимСчетомВладельца("БанковскийСчетОрганизации", "Организация", СтруктураПараметров);
	//КонецЕсли;
	//
	////Для заполнения этого свойства не используется процедура ЗаполнитьСвойствоЗначениемПоУмолчанию, 
	////	т.к. внутри этой процедуры применяется ЗначениеЗаполнено,	которое для булевых значений всегда возвращает Истина
	//Если СтруктураПараметров.Свойство("ИспользоватьПлановуюСебестоимость") И НЕ СтруктураПараметров.ИспользоватьПлановуюСебестоимость Тогда
	//	СтруктураПараметров.ИспользоватьПлановуюСебестоимость = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ИспользоватьПлановуюСебестоимость");
	//КонецЕсли;
	//
	//Если СтруктураПараметров.Свойство("Контрагент") Тогда
	//	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
	//		//В зависимости от типа операции выбираем настройку, по которой будет заполнен Контрагент. 
	//		//Заполняем свойство, только если оно еще не заполнено 
	//		ИмяНастройки = "";
	//		Если ТипОперации = "Покупка" ИЛИ ТипОперации = "ПокупкаКомиссия" Тогда
	//			ИмяНастройки = "ОсновнойПоставщик";
	//		ИначеЕсли ТипОперации = "Продажа" ИЛИ ТипОперации = "ПродажаКомиссия" Тогда
	//			ИмяНастройки = "ОсновнойПокупатель";
	//		КонецЕсли;
	//		Если ИмяНастройки <> "" Тогда
	//			ЗаполнитьСвойствоЗначениемПоУмолчанию("Контрагент", ИмяНастройки, СтруктураПараметров);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент)
	//		И ТипЗнч(СтруктураПараметров.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	
	//		Если СвойствоЕстьИОноНЕЗаполнено("КонтактноеЛицоКонтрагента", СтруктураПараметров) Тогда
	//			СтруктураПараметров.КонтактноеЛицоКонтрагента = СтруктураПараметров.Контрагент.ОсновноеКонтактноеЛицо;
	//		КонецЕсли;
	//		ЗаполнитьСвойствоБанковскимСчетомВладельца("БанковскийСчетКонтрагента", "Контрагент", СтруктураПараметров);
	//		
	//		Если СтруктураПараметров.Свойство("ДоговорКонтрагента") Тогда
	//			//Если договор заполнен - проверим что он соответствует контрагенту и организации
	//			//При необходимости очистим
	//			Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) 
	//				И (СтруктураПараметров.ДоговорКонтрагента.Владелец <> СтруктураПараметров.Контрагент 
	//				ИЛИ (СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров) 
	//				И СтруктураПараметров.ДоговорКонтрагента.Организация <> СтруктураПараметров.Организация)) Тогда
	//				СтруктураПараметров.ДоговорКонтрагента = Неопределено; 
	//			КонецЕсли;
	//			// Договор не заполнен - получим договор по организации (если есть), контрагенту и типу операции
	//			Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда
	//				Если ТипОперации = "Продажа" Тогда
	//					СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	//				ИначеЕсли ТипОперации = "ПродажаКомиссия" Тогда
	//					СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораКомиссионера();
	//				ИначеЕсли ТипОперации = "Покупка" Тогда
	//					СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	//				ИначеЕсли ТипОперации = "ПокупкаКомиссия" Тогда
	//					СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораКомитента();
	//				Иначе
	//					СтруктураПараметровДляПолученияДоговора = Неопределено;
	//				КонецЕсли;
	//				СтруктураПараметров.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(
	//											?(СтруктураПараметров.Свойство("Организация"),СтруктураПараметров.Организация, Неопределено), 
	//											СтруктураПараметров.Контрагент, 
	//											СтруктураПараметровДляПолученияДоговора);
	//			КонецЕсли;
	//			
	//			Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда

	//				//тип сделки имеет смысл устанавливать только в том случае, если договор заполнен 
	//				Если СтруктураПараметров.Свойство("Сделка") Тогда
	//					ЭтоЗаказПокупателя = Истина;
	//					Если СтруктураПараметров.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
	//					  ИЛИ СтруктураПараметров.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//						ЭтоЗаказПокупателя = Ложь;
	//					КонецЕсли;
	//					ЗаполнениеДокументов.УстановитьТипСделки(СтруктураПараметров, ЭтоЗаказПокупателя);
	//				КонецЕсли;
	//				
	//				// если в документе есть реквизит Организация и он не заполнен, то заполняем его из договора
	//				Если СвойствоЕстьИОноНЕЗаполнено("Организация", СтруктураПараметров) Тогда
	//					СтруктураПараметров.Организация = СтруктураПараметров.ДоговорКонтрагента.Организация;
	//				КонецЕсли;
	//				
	//				// тип цен - по договору
	//				Если СвойствоЕстьИОноНЕЗаполнено("ТипЦен", СтруктураПараметров) Тогда
	//					СтруктураПараметров.ТипЦен = СтруктураПараметров.ДоговорКонтрагента.ТипЦен;
	//				КонецЕсли;
	//			КонецЕсли; // Договор заполнен
	//		КонецЕсли; // есть реквизит договор
	//	КонецЕсли; //Контрагент заполнен
	//КонецЕсли; //есть реквизит Контрагент
	//
	//// кассу, ККМ и подразделение организации устанавливаем в значения по умолчанию, только если они соответствуют Владельцу - Организации 
	//// заполняем именно здесь (то есть ПОСЛЕ, а не ДО обработки Договора), потому что Организация может измениться в зависимости от договора
	//ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации("Касса", "ОсновнаяКасса", СтруктураПараметров); 
	//ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации("КассаККМ", "ОсновнаяКассаККМ", СтруктураПараметров); 
	//ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации("ПодразделениеОрганизации", "ОсновноеПодразделениеОрганизации", СтруктураПараметров); 

	//// Валюта документа
	//Если СвойствоЕстьИОноНЕЗаполнено("ВалютаДокумента", СтруктураПараметров) Тогда
	//	Если СвойствоЕстьИОноЗаполнено("Касса", СтруктураПараметров) Тогда
	//		СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.Касса.ВалютаДенежныхСредств;
	//	ИначеЕсли СвойствоЕстьИОноЗаполнено("СчетОрганизации", СтруктураПараметров) Тогда
	//		СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.СчетОрганизации.ВалютаДенежныхСредств;
	//	ИначеЕсли СвойствоЕстьИОноЗаполнено("ДоговорКонтрагента", СтруктураПараметров) Тогда
	//		СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//	Иначе
	//		СтруктураПараметров.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	//	КонецЕсли;
	//КонецЕсли;
	//
	////Курс и Кратность
	//Если СвойствоЕстьИОноЗаполнено("ВалютаДокумента", СтруктураПараметров) Тогда
	//	СтруктураКурсаДокумента = Неопределено;
	//	Если СвойствоЕстьИОноНЕЗаполнено("КурсДокумента", СтруктураПараметров) Тогда
	//		СтруктураКурсаДокумента      = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаДокумента, ДатаДокумента);
	//		СтруктураПараметров.КурсДокумента = СтруктураКурсаДокумента.Курс;

	//		Если СтруктураПараметров.Свойство("КратностьДокумента") Тогда
	//			СтруктураПараметров.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	//		КонецЕсли;
	//	КонецЕсли;

	//	Если СвойствоЕстьИОноНЕЗаполнено("КурсВзаиморасчетов", СтруктураПараметров) Тогда
	//		Если СтруктураКурсаДокумента = Неопределено Тогда
	//			СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаДокумента, ДатаДокумента);
	//		КонецЕсли;
	//		СтруктураПараметров.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;

	//		Если СтруктураПараметров.Свойство("КратностьВзаиморасчетов") Тогда
	//			СтруктураПараметров.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// флаг нужен для установки определения реквизитов (флагов) "УчитыватьНДС" и "СуммаВключаетНДС"
	//флСуммаВключаетНДС = Истина;
	//
	//Если СтруктураПараметров.Свойство("ТипЦен") Тогда
	//	// Если тип цен оказался не заполненным, то берем его из установок пользователя
	//	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ТипЦен) И (ТипОперации = "Продажа" ИЛИ ТипОперации = "ПродажаКомиссия") Тогда
	//		СтруктураПараметров.ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойТипЦенПродажи");
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(СтруктураПараметров.ТипЦен) Тогда
	//		// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
	//		// то флаги включения налогов надо брать из базовой цены
	//		Если ТипЗнч(СтруктураПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И СтруктураПараметров.ТипЦен.Рассчитывается Тогда
	//			флСуммаВключаетНДС = СтруктураПараметров.ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
	//		Иначе
	//			флСуммаВключаетНДС = СтруктураПараметров.ТипЦен.ЦенаВключаетНДС;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если СтруктураПараметров.Свойство("УчитыватьНДС") И НЕ СтруктураПараметров.УчитыватьНДС Тогда
	//	Если СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров) Тогда
	//		СтруктураПараметров.УчитыватьНДС = НЕ НалоговыйУчетУСН.ПрименениеУСН(СтруктураПараметров.Организация, ДатаДокумента);
	//	Иначе
	//		СтруктураПараметров.УчитыватьНДС = Истина;
	//	КонецЕсли;
	//	
	//	Если СтруктураПараметров.Свойство("СуммаВключаетНДС") Тогда
	//		СтруктураПараметров.СуммаВключаетНДС = СтруктураПараметров.УчитыватьНДС И флСуммаВключаетНДС;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры // ПодготовитьСтруктуруДляЗаполненияШапкиДокумента()

////////////////////////////////////////////////////////////////////////////////

//Регистрация документа в регистре сведений ДокументыТребующиеДопроведения
//Процедура вызывается из процедуры ОтложенноеПроведениеДокументов.ПриПроведенииРегистрацияОтложенногоПроведения, которая в свою очередь
//		вызывается из соответствующей подписки на событие.
//		Запись в регистр происходит при проведении документа в режиме отложенного проведения
//		Удаление записи происходит при перепроведении и отмене проведенияв универсальной процедуре УдалитьДвиженияРегистратора 
//Параметры:
//	ДокументСсылка 	- документ, который проводится
//	Организация 	- организация, указанная в документе
//
Процедура РегистрацияОтложенногоПроведения(ДокументСсылка, Организация) Экспорт
	Набор = РегистрыСведений.ДокументыТребующиеДопроведения.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументСсылка);
	Запись 				= Набор.Добавить();
	Запись.Организация 	= Организация;
	Запись.Период 		= ДокументСсылка.Дата;
	Запись.Регистратор 	= ДокументСсылка;
	Запись.Активность 	= Истина;
	Набор.Записать();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ
// (Создание и управление регламентными заданиями разрешено только пользователям, имеющим административные права.)

// Создает регламентное задание, если задания с переданным идентификатором не существует
// 
// Параметры
//  МетаданныеРегламентноеЗадание - метаданные или имя регламентного задания
//  Идентификатор - строка, уникальный идентификатор регламентного задания.
//                  В случае, если задание создано, то в параметр помещается строка 
//                  с уникальным идентификатором созданного задания.
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - задание существует или было успешно создано
//  Ложь - нет гарантии существования задания с указанным идентификатором
Функция ОбеспечитьРегламентноеЗадание(МетаданныеРегламентноеЗадание, Идентификатор, Сообщение = "", Заголовок = "") Экспорт
	
	// Проверим, возможно регл. задание уже есть
	Если НЕ ПустаяСтрока(Идентификатор) Тогда
		
		Попытка
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
			Возврат Ложь;
		КонецПопытки;
		
		Если Задание <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	// Создаем новое регламентное задание
	Попытка
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеРегламентноеЗадание);
		Задание.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Идентификатор = Задание.УникальныйИдентификатор;
	
	Возврат Истина;
		
КонецФункции

// Получает данные из регламентного задания
// 
// Параметры
//  УникальныйИдентификатор - уникальный идентификатор регламентного задания (тип: УникальныйИдентификатор)
//  СтруктураСвойств - структура, в которую будут помещены значения прочитанных свойств регламентного задания.
//                     Следует передавать структуру с перечнем свойств, которые должны быть получены.
//	                   Будут заполнены только существующие в переданной структуре ключи.
//                     Расписание регламентного задания будет передано внутри ХранилищеЗначения,
//                     для того, чтобы избежать попытки передачи с сервера мутабельного значения.
//                     В свойстве Метаданные будет передана строка - имя метаданного регламентного задания.
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - свойства прочитаны
//  Ложь - задание с переданным идентификатором не существует или произошла ошибка при получении задания
Функция ПрочитатьРегламентноеЗадание(УникальныйИдентификатор, СтруктураСвойств, Сообщение = "", Заголовок = "") Экспорт
	
	Попытка
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Добавим в структуру нужные параметры регламентного задания
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, Задание);
	
	// Мутабельные параметры представим в виде, позволющем передать их на клиента
	// Структура не должна содержать свойства "ПоследнееЗадание"
	Если СтруктураСвойств.Свойство("Расписание") Тогда
		СтруктураСвойств.Вставить("Расписание", Новый ХранилищеЗначения(СтруктураСвойств.Расписание));
	КонецЕсли;
	
	Если СтруктураСвойств.Свойство("Метаданные") Тогда
		СтруктураСвойств.Вставить("Метаданные", СтруктураСвойств.Метаданные.Имя);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Изменяет свойства регламентного задания
// 
// Параметры
//  УникальныйИдентификатор - уникальный идентификатор регламентного задания (тип: УникальныйИдентификатор)
//  СтруктураСвойств - структура, значения свойств которой будут записаны в реквизиты свойства регламентного задания.
//                     Ключи - имена свойств, значения - значения свойств.
//                     Нельзя передавать имена свойств, которые не могут быть установлены у регламентного задания.
//                     Расписание регламентного задания должно быть передано внутри ХранилищеЗначения,
//                     для того, чтобы избежать попытки передачи с сервера мутабельного значения
//                     (свойство с ключем Расписание должно иметь тип ХранилищеЗначения, 
//                     в хранилище должно быть помещено значение типа Расписание).
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - задание записано
//  Ложь - задание не существует или не записано
Функция ИзменитьРегламентноеЗадание(УникальныйИдентификатор, Знач СтруктураСвойств, Сообщение = "", Заголовок = "") Экспорт
	
	Попытка
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Мутабельные параметры передаются на сервер внутри ХранилищеЗначения, 
	// получим их в "обычном" виде
	Если СтруктураСвойств.Свойство("Расписание") Тогда
		СтруктураСвойств.Вставить("Расписание", СтруктураСвойств.Расписание.Получить());
	КонецЕсли;
	
	Попытка
		ЗаполнитьЗначенияСвойств(Задание, СтруктураСвойств);
		Задание.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Удаляет регламентное задание
// 
// Параметры
//  УникальныйИдентификатор - уникальный идентификатор регламентного задания (тип: УникальныйИдентификатор)
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - задания не существует (не найдено или удалено)
//  Ложь - ошибка при удалении задания, задание может существовать
Функция УдалитьРегламентноеЗадание(УникальныйИдентификатор, Сообщение = "", Заголовок = "") Экспорт
	
	Попытка
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Попытка
		Задание.Удалить();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Проверяет запрос за наличие ошибки доступа
//
Функция ОшибкаДоступа(МассивПараметровЗапроса, ИспользоватьМенеджерВременныхТаблиц = истина) Экспорт
	Запрос = Новый Запрос;
	Если ИспользоватьМенеджерВременныхТаблиц тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	ОшибкаВЗапросе = ложь;
	Для каждого ПараметрыЗапроса из МассивПараметровЗапроса Цикл
		Для каждого ПараметрЗапроса из ПараметрыЗапроса Цикл
			Если ПараметрЗапроса.Ключ = "Текст" тогда
				Запрос.Текст = ПараметрЗапроса.Значение;
			Иначе
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЕсли;
		КонецЦикла;
		ОшибкаВЗапросе = ложь;
		Попытка 
			Запрос.Выполнить();
		Исключение
			ОшибкаВЗапросе = Истина;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Запрос = Неопределено;
	Возврат Не ОшибкаВЗапросе;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ЭЛЕКТРОННОЙ ПОЧТЫ

// Устанавливает свойства объекта основания в привилегированном режиме
//
Процедура УстановитьСвойстваОбъектаОснования(ОснованиеОбъектСсылка, Ответ, Переадресация, СтатусПисьма, УчетнаяЗапись, мЭтоНовый) Экспорт
	
	УправлениеЭлектроннойПочтой.УстановитьСвойстваОбъектаОснования(ОснованиеОбъектСсылка, Ответ, Переадресация, СтатусПисьма, УчетнаяЗапись, мЭтоНовый);
	
КонецПроцедуры

Функция ВыполнитьЗапрос(СтруктураПараметров) Экспорт
	Запрос = Новый Запрос;
	Для Каждого Элемент Из СтруктураПараметров Цикл
		Если Элемент.Ключ <> "Текст" Тогда
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		Иначе
			Запрос.Текст = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат Запрос.Выполнить();
КонецФункции

Процедура ОтметитьОтправкуУведомленияВЗаявкеНаРасходование(ЗаявкаСсылка)Экспорт
	
	ЗаявкаОбъект = ЗаявкаСсылка.ПолучитьОбъект();
	ЗаявкаОбъект.ОбменДанными.Загрузка = Истина;
	ЗаявкаОбъект.УведомлениеОтветственномуОтправлено = Истина;
	ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Функция ПолучитьТаблицуТоваровПереданныхВТТ(Дата, Склад, ТТ = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТТ,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	(НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &Дата
	               |			ИЛИ РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				И НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения, ДЕНЬ) = &Дата)
	               //|	И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &Владелец
	               |	И (РасходныйОрдерСкладТовары.Ссылка.Получатель = &ТТ
	               |			ИЛИ &ТТ = НЕОПРЕДЕЛЕНО)
	               |	И РасходныйОрдерСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	               |	И РасходныйОрдерСкладТовары.Ссылка.Получатель <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель";
				   
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	//Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
	//	Запрос.УстановитьПараметр("Владелец", Склад.Владелец);
	//Иначе
	//	Запрос.УстановитьПараметр("Владелец", Склад);
	//КонецЕсли;	
	Запрос.УстановитьПараметр("ТТ", ТТ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция ТекущаяДатаСервера() Экспорт
	
	Возврат ТекущаяДата();
	
КонецФункции	

Процедура УстановитьТекущуюТочкуПоАйпиПодключения(МассивАйпи) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницыАйпиДляОпределенияТочкиПриПодключении.Ссылка,
	               |	СтруктурныеЕдиницыАйпиДляОпределенияТочкиПриПодключении.Ссылка.id_TT,
	               |	СтруктурныеЕдиницыАйпиДляОпределенияТочкиПриПодключении.Ссылка.НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы.АйпиДляОпределенияТочкиПриПодключении КАК СтруктурныеЕдиницыАйпиДляОпределенияТочкиПриПодключении
	               |ГДЕ
	               |	СтруктурныеЕдиницыАйпиДляОпределенияТочкиПриПодключении.Айпи В(&Айпи)";
				   
	Запрос.УстановитьПараметр("Айпи", МассивАйпи);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыСеанса.ТорговаяТочкаПоАйпи = Выборка.Ссылка;
		ПараметрыСеанса.НомерТочкиПоАйпи = Выборка.НомерТочки;
		ПараметрыСеанса.АйдиТочкиПоАйпи = Выборка.id_TT;
	Иначе
		ПараметрыСеанса.ТорговаяТочкаПоАйпи = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		ПараметрыСеанса.НомерТочкиПоАйпи = 0;
		ПараметрыСеанса.АйдиТочкиПоАйпи = 0;
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьТорговуюТочкуИзПараметровСеанса() Экспорт
	Возврат ПараметрыСеанса.ТорговаяТочкаПоАйпи;
КонецФункции

Процедура УстановитьТекущийМагазин(Магазин) Экспорт
	
	ПараметрыСеанса.ТорговаяТочкаПоАйпи = Магазин;
	ПараметрыСеанса.НомерТочкиПоАйпи = Магазин.НомерТочки;
	ПараметрыСеанса.АйдиТочкиПоАйпи = Магазин.id_TT;
	
КонецПроцедуры

Функция ПолучитьСеансыИнфБазы() Экспорт
	
	МассивВозврат = Новый Массив();
	МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из МассивСеансов Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("1CV8")
			И Сеанс.НомерСеанса <> НомерСеансаИнформационнойБазы() Тогда 
			МассивВозврат.Добавить(Сеанс.ИмяКомпьютера);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивВозврат;
	
КонецФункции

Функция ПолучитьДоступностьРоли(ИмяРоли) Экспорт
	
	Возврат РольДоступна(ИмяРоли);
	
КонецФункции	

Процедура ВыполнитьПодключениеКSMS_Repl() Экспорт
	
	//СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("Sms_repl");
	//
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения = СтрСоединенияДанныеТовародвижение;
	//ВнешниеИсточникиДанных.SMS_Repl.УстановитьОбщиеПараметрыСоединения(пСоед);
	//ВнешниеИсточникиДанных.SMS_Repl.УстановитьСоединение();
	//ВнешниеИсточникиДанных.SMS_Repl.РазорватьСоединение();
	
КонецПроцедуры	

Процедура УстановитьРежимОткрытияОконВЗакладках(УдалятьПрочиеНастройки = Ложь) Экспорт
	
	Если УдалятьПрочиеНастройки Тогда
		Фильтр = Новый Структура;
		Фильтр.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь());
		
		Настр = ХранилищеСистемныхНастроек.Выбрать(Фильтр);
		Пока Настр.Следующий() Цикл
			Если Настр.КлючОбъекта = "Общее/НастройкиКлиентскогоПриложения"
				ИЛИ Настр.КлючОбъекта = "Общее/МасштабФотоРакурсов" Тогда
				Продолжить;
			КонецЕсли;	
			ХранилищеСистемныхНастроек.Удалить(Настр.КлючОбъекта, Настр.КлючНастроек, Настр.Пользователь);
		КонецЦикла;
	КонецЕсли;	
	
	Настройка = ЗначениеИзСтрокиВнутр("{""#"",c2884475-436b-4b59-9fc6-98d34c0cf3d5,
			|{0,17}
			|}");

	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", Настройка);
	
КонецПроцедуры	

Функция ПолучитьЗаголовокСистемыДляМагазина() Экспорт
	
	Возврат ПараметрыСеанса.ТорговаяТочкаПоАйпи.Наименование;
	
КонецФункции	

//+++АК SHEP 2018.06.14 ИП-00018711: добавил параметр ПросмотрВсехМагазиновВНовойВкусвилл
//Функция ПолучитьМассивМагазинов(СТорговымиТочками = Ложь) Экспорт
Функция ПолучитьМассивМагазинов(СТорговымиТочками = Ложь, Знач ПросмотрВсехМагазиновВНовойВкусвилл = Неопределено, СторонняяРозница = Ложь, ТипРозничнойТочки = Неопределено) Экспорт //+++АК mika 2018.07.05 ИП-00018775.01 добавлен параметр СторонняяРозница //+++АК mika 2018.07.09 ИП-ИП-00019250 добавлен параметр ТипРозничноТочки 
	
	ПросмотрВсехМагазиновВНовойВкусвилл = ?(ПросмотрВсехМагазиновВНовойВкусвилл = Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "ПросмотрВсехМагазиновВНовойВкусвилл"), ПросмотрВсехМагазиновВНовойВкусвилл);      
//---АК SHEP 2018.06.14                                                                                                                                                                                                             
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаЗакрытия", ДобавитьМесяц(ТекущаяДата(), -1));
	//+++АК SHEP 2018.06.14 ИП-00018711
	//Запрос.УстановитьПараметр("ПросмотрВсехМагазинов", ПараметрыСеанса.ТекущийПользователь.ПросмотрВсехМагазиновВНовойВкусвилл);
	Запрос.УстановитьПараметр("ПросмотрВсехМагазинов", ПросмотрВсехМагазиновВНовойВкусвилл);
	//---АК SHEP 2018.06.14
	
	//+++АК mika 2018.07.05 ИП-00018775.01
	Запрос.УстановитьПараметр("СторонняяРозница", СторонняяРозница);
	//---АК mika 
	
	//+++АК mika 2018.07.05 ИП-00018775.01
	Запрос.УстановитьПараметр("ТипРозничнойТочки", ?(ЗначениеЗаполнено(ТипРозничнойТочки), ТипРозничнойТочки, Перечисления.ТипыРозничныхТочек.ПустаяСсылка()));
	//---АК mika 
	
	Если СТорговымиТочками Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктурныеЕдиницы.Ссылка
		               |ИЗ
		               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		               |ГДЕ
		               |	(СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ СтруктурныеЕдиницы.ДатаЗакрытия >= &ДатаЗакрытия)
		               |	И (&ПросмотрВсехМагазинов
		               |			ИЛИ СтруктурныеЕдиницы.Ссылка В
		               |				(ВЫБРАТЬ
		               |					СоответствиеОбъектРольСрезПоследних.Объект
		               |				ИЗ
		               |					РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
		               |				ГДЕ
					   //+++ AK suvv 2018.06.08 ИП-00018376.01
					   //|					СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
					   |					(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
					   |                     ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
					   //--- AK suvv
					   |					И СоответствиеОбъектРольСрезПоследних.РольПользователя В
		               |						(ВЫБРАТЬ
		               |							РолиПользователейСоставРоли.Ссылка
		               |						ИЗ
		               |							Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		               |								ПО
		               |									Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
		               |						ГДЕ
		               |							Пользователи.Ссылка = &Сотрудник))
		               |			ИЛИ СтруктурныеЕдиницы.Ссылка В
		               |				(ВЫБРАТЬ
		               |					СоответствиеОбъектРольСрезПоследних.Объект
		               |				ИЗ
		               |					РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
		               |				ГДЕ
					   //+++ AK suvv 2018.06.08 ИП-00018376.01
					   //|					СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
					   |					(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
					   |                     ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
					   //--- AK suvv
		               |					И СоответствиеОбъектРольСрезПоследних.РольПользователя В
		               |						(ВЫБРАТЬ
		               |							РолиПользователей.Ссылка
		               |						ИЗ
		               |							Справочник.РолиПользователей КАК РолиПользователей
		               |						ГДЕ
		               |							РолиПользователей.Родитель В
		               |								(ВЫБРАТЬ
		               |									РолиПользователейСоставРоли.Ссылка
		               |								ИЗ
		               |									Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		               |										ПО
		               |											Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
		               |								ГДЕ
		               |									Пользователи.Ссылка = &Сотрудник))))
		               |	И СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПустаяСсылка)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	СтруктурныеЕдиницы.НомерТочки";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	(СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СтруктурныеЕдиницы.ДатаЗакрытия >= &ДатаЗакрытия)
		|	И СтруктурныеЕдиницы.ДатаЗапускаНовойСистемыУчета <> ДАТАВРЕМЯ(1, 1, 1)
		//+++АК mika 2018.06.05 ИП-00018913
		//|	И (СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)  
		|	И (СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		
		//+++АК mika 2018.10.19 Без Задачи (По просьбе Чиркова) Отобразать в форме магазины сторонней розницы любых типов
		//|       ИЛИ СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Микромаркет)
		//|        ИЛИ  СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток) 
		//|           ИЛИ СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Пятерочка))  //+++АК mika 2018.06.05 ИП-00018913
		//+++АК BELN 2018.12.06 ИП-00020532.01 
		|       ИЛИ СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПространствоВкуса)
		//---АК BELN 2018.12.06 
		|       ИЛИ СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Микромаркет)
		|  			ИЛИ  СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница))
		//---АК mika
		
		//---АК mika ИП-00018913
		//+++АК mika 2018.07.09 ИП-ИП-00019250 добавлен параметр ТипРозничноТочки
		|	И (&ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПустаяСсылка)
		|			ИЛИ СтруктурныеЕдиницы.ТипРозничнойТочки = &ТипРозничнойТочки)
		//---АК mika
		
		|	И (&ПросмотрВсехМагазинов
		|			ИЛИ СтруктурныеЕдиницы.Ссылка В
		|				(ВЫБРАТЬ
		|					СоответствиеОбъектРольСрезПоследних.Объект
		|				ИЗ
		|					РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
		|				ГДЕ
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|					СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|					(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|                    ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
		//--- AK suvv
		|					И СоответствиеОбъектРольСрезПоследних.РольПользователя В
		|						(ВЫБРАТЬ
		|							РолиПользователейСоставРоли.Ссылка
		|						ИЗ
		|							Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|								ПО
		|									Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
		|						ГДЕ
		|							Пользователи.Ссылка = &Сотрудник))
		|			ИЛИ СтруктурныеЕдиницы.Ссылка В
		|				(ВЫБРАТЬ
		|					СоответствиеОбъектРольСрезПоследних.Объект
		|				ИЗ
		|					РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
		|				ГДЕ
		//+++ AK suvv 2018.06.05 ИП-00018376.01
		//|					СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|					(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|                     ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
		//--- AK suvv
		|					И СоответствиеОбъектРольСрезПоследних.РольПользователя В
		|						(ВЫБРАТЬ
		|							РолиПользователей.Ссылка
		|						ИЗ
		|							Справочник.РолиПользователей КАК РолиПользователей
		|						ГДЕ
		|							РолиПользователей.Родитель В
		|								(ВЫБРАТЬ
		|									РолиПользователейСоставРоли.Ссылка
		|								ИЗ
		|									Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|										ПО
		|											Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
		|								ГДЕ
		|									Пользователи.Ссылка = &Сотрудник))))
		//+++АК mika 2018.07.05 ИП-00018775.01
		|	И ВЫБОР
		|			КОГДА &СторонняяРозница = ИСТИНА
		|				ТОГДА СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		//---АК mika
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтруктурныеЕдиницы.НомерТочки";
		
	КонецЕсли;				   
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

Процедура ЗагрузитьЗаказыССайта() Экспорт
	
	ОбменССайтом.ЗагрузитьЗаказыССайта();
	
КонецПроцедуры	

Функция ПолучитьРеквизитыПоЗаявкеНаДС(Ссылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаРасходованиеСредств.Ссылка,
	               |	ЗаявкаНаРасходованиеСредств.Ответственный,
	               |	ЗаявкаНаРасходованиеСредств.ТорговыеТочкиСписок
	               |ИЗ
	               |	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	               |ГДЕ
	               |	ЗаявкаНаРасходованиеСредств.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	СтруктураВозврат = Новый Структура();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврат.Вставить("Ответственный", Выборка.Ответственный);
		СтруктураВозврат.Вставить("ТорговыеТочкиСписок", Выборка.ТорговыеТочкиСписок);
	КонецЕсли;	
	
	Возврат СтруктураВозврат;
	
КонецФункции	

Процедура УстановитьТелефонМагазинаПриЗапускеМагазина(Телефон) Экспорт
	
	Если ЗначениеЗаполнено(Телефон)
		И ПараметрыСеанса.ТорговаяТочкаПоАйпи.ТелефонныйНомер2 <> Телефон Тогда
		СпрОб = ПараметрыСеанса.ТорговаяТочкаПоАйпи.ПолучитьОбъект();
		СпрОб.ТелефонныйНомер2 = Телефон;
		СпрОб.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

Функция РольРедактированияТренинговДоступна() Экспорт
	Возврат РольДоступна("ВнешнееРедактированиеТренингов");
КонецФункции

//+++АК SHEP 20161031
Процедура _ОбновитьНумерациюОбъектов(МетаданныеМД) Экспорт
	ОбновитьНумерациюОбъектов(МетаданныеМД);
КонецПроцедуры
//---АК SHEP 20161031

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ВыполнитьОтложенныеДвиженияПоБухРегистру() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОтложенныеДвиженияДокументовПоБухРегистру.Документ,
		|	ОтложенныеДвиженияДокументовПоБухРегистру.Документ.Проведен КАК Проведен
		|ИЗ
		|	РегистрСведений.ОтложенныеДвиженияДокументовПоБухРегистру КАК ОтложенныеДвиженияДокументовПоБухРегистру
		|ГДЕ
		|	(ОтложенныеДвиженияДокументовПоБухРегистру.ДатаПомещенияЗаписи <= &Дата
		|			ИЛИ ОтложенныеДвиженияДокументовПоБухРегистру.РасчитатьПринудительно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтложенныеДвиженияДокументовПоБухРегистру.РасчитатьПринудительно УБЫВ,
		|	ОтложенныеДвиженияДокументовПоБухРегистру.Документ.Дата,
		|	ОтложенныеДвиженияДокументовПоБухРегистру.ДатаПомещенияЗаписи";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 3600);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Проведен Тогда
			Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ИнвентаризацияСклад") Тогда
				ДвиженияДокумента = Документы.ИнвентаризацияСклад.ДвиженияДокумента(Выборка.Документ);
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
				ДвиженияДокумента = Документы.РасходныйОрдерСклад.ДвиженияДокумента(Выборка.Документ);
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.МаршрутныйЛист") Тогда
				ДвиженияДокумента = Документы.МаршрутныйЛист.ДвиженияДокумента(Выборка.Документ);
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
				ДвиженияДокумента = Документы.ПриходныйОрдерСклад.ДвиженияДокумента(Выборка.Документ);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ТабБухДвижения = ДвиженияДокумента.Финансовый;
			Если ТабБухДвижения = Неопределено Тогда // При формировании движения возникли ошибки
				Продолжить;
			КонецЕсли;
			
			ДвиженияФинансовый = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
			ДвиженияФинансовый.Отбор.Регистратор.Установить(Выборка.Документ);
			ДвиженияФинансовый.Загрузить(ТабБухДвижения);
			Попытка
				ДвиженияФинансовый.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("Отложенное движение по бух регистру",,,, ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		// Удаление записи из отложенного проведения
		Набор = РегистрыСведений.ОтложенныеДвиженияДокументовПоБухРегистру.СоздатьНаборЗаписей();
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		
		Попытка
			Набор.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Отложенное движение по бух регистру",,,, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

//+++ZEZA 20170807

//
//
Функция ИзменитьРеквизитОбъекта(Ссылка, ИмяРеквизита, Значение) Экспорт
	
	//
	ВсеОК = Истина;
	
	//
	Попытка
	
		//
		_Объект = Ссылка.ПолучитьОбъект();
		_Объект[ИмяРеквизита] = Значение;
		_Объект.Записать();
		
	Исключение
		
		//
		ВсеОК = Ложь;
		
	КонецПопытки;	
	
	//
	Возврат ВсеОК;

КонецФункции

//---ZEZA 20170807

Процедура ЗаписатьОтладочнуюИнформацию(НетПрав) Экспорт//mind
	
	Запись = РегистрыСведений.Врем_ПодготовкаКОбновлению_Удалить.СоздатьМенеджерЗаписи();
	Запись.Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	Запись.НетПравАдмина = НетПрав;
	Запись.Записать();
КонецПроцедуры	

Функция ПолучитьВерсиюКомОбъекта_Бух() Экспорт //mind
	
	КомОбъект = Константы.ВерсияКомОбъекта_Бух.Получить();
	Если НЕ ЗначениеЗаполнено(КомОбъект) Тогда
		КомОбъект = "V83";
	КонецЕсли;
	Возврат КомОбъект;
	
КонецФункции

Функция ПолучитьВерсиюКомОбъекта_Зуп() Экспорт //mind
	
	КомОбъект = Константы.ВерсияКомОбъекта_Зуп.Получить();
	Если НЕ ЗначениеЗаполнено(КомОбъект) Тогда
		КомОбъект = "V83";
	КонецЕсли;
	Возврат КомОбъект;
	
КонецФункции

Функция ПолучитьСтрокуПодключения_Бух() Экспорт //mind
	
	СтрокаПодключения = Константы.СтрокаПодключенияКБух.Получить();
	Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда
		СтрокаПодключения = "Srvr=""10.0.0.15:1641""; Ref=""BP_CORP""; Usr=""Обмен""; Pwd=""123321""";
	КонецЕсли;
	Возврат СтрокаПодключения;
	
КонецФункции

Функция ПолучитьСтрокуПодключенияСтруктурой_Бух() Экспорт //mind
	
	СтрокаПодключения = Константы.СтрокаПодключенияКБух.Получить();
	Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда
		СтрокаПодключения = "Srvr=""10.0.0.15:1641""; Ref=""BP_CORP""; Usr=""Обмен""; Pwd=""123321""";
	КонецЕсли;
	
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, ";", Символы.ПС);
	СтруктураВозврат = Новый Структура("ИмяСервера, ИмяБазы, Пользователь, Пароль");
	Для н = 1 По СтрЧислоСтрок(СтрокаПодключения) Цикл
		СтрокаКРазбору = СокрЛП(СтрПолучитьСтроку(СтрокаПодключения, н));
		Если Найти(ВРег(СтрокаКРазбору), "SRVR=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 6);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.ИмяСервера = СтрокаКРазбору;
		ИначеЕсли Найти(ВРег(СтрокаКРазбору), "REF=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 5);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.ИмяБазы = СтрокаКРазбору;
		ИначеЕсли Найти(ВРег(СтрокаКРазбору), "USR=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 5);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.Пользователь = СтрокаКРазбору;
		ИначеЕсли Найти(ВРег(СтрокаКРазбору), "PWD=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 5);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.Пароль = СтрокаКРазбору;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СтруктураВозврат;
	
КонецФункции

Функция ПолучитьСтрокуПодключения_Зуп() Экспорт //mind
	
	СтрокаПодключения = Константы.СтрокаПодключенияКЗуп.Получить();
	Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда
		//+++АК sole 2018.08.16 ИП-00019363
		СтрокаПодключения = "Srvr=""10.0.0.21""; Ref=""HRM""; Usr=""Обмен""; Pwd=""123321""";
		//---АК sole 2018.08.16 ИП-00019363
	КонецЕсли;
	Возврат СтрокаПодключения;
	
КонецФункции

Функция ПолучитьСтрокуПодключенияСтруктурой_Зуп() Экспорт //mind
	
	СтрокаПодключения = Константы.СтрокаПодключенияКЗуп.Получить();
	Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда
		СтрокаПодключения = "Srvr=""10.0.0.15:1641""; Ref=""HRM""; Usr=""Обмен""; Pwd=""123321""";
	КонецЕсли;
	
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, ";", Символы.ПС);
	СтруктураВозврат = Новый Структура("ИмяСервера, ИмяБазы, Пользователь, Пароль");
	Для н = 1 По СтрЧислоСтрок(СтрокаПодключения) Цикл
		СтрокаКРазбору = СокрЛП(СтрПолучитьСтроку(СтрокаПодключения, н));
		Если Найти(ВРег(СтрокаКРазбору), "SRVR=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 6);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.ИмяСервера = СтрокаКРазбору;
		ИначеЕсли Найти(ВРег(СтрокаКРазбору), "REF=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 5);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.ИмяБазы = СтрокаКРазбору;
		ИначеЕсли Найти(ВРег(СтрокаКРазбору), "USR=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 5);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.Пользователь = СтрокаКРазбору;
		ИначеЕсли Найти(ВРег(СтрокаКРазбору), "PWD=") > 0 Тогда
			СтрокаКРазбору = Сред(СтрокаКРазбору, 5);
			СтрокаКРазбору = СтрЗаменить(СтрокаКРазбору, """", "");
			СтруктураВозврат.Пароль = СтрокаКРазбору;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СтруктураВозврат;
	
КонецФункции

Функция ПолучитьЯрлыкДляЗапускаВМагазинах() Экспорт //mind
	
	Возврат ПолучитьОбщийМакет("БатФайлЯрлыкВМагазины");
	
КонецФункции	

//mind выгрузка остатков в инстамарт
Процедура ВыгрузитьОстаткиВИнстамарт(СерверФтп, ПользовательФтп, ПарольФтп, ДополнительныеПараметры = Неопределено) Экспорт
	
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	Попытка
		Сервер = Новый FTPСоединение(СерверФтп,
		21,
		ПользовательФТП,
		ПарольФТП,,Истина); 
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в инстамарт", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с сервером фтп. " + ОписаниеОшибки());		
		Возврат; 
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Магазин", Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", 951));
	Запрос.УстановитьПараметр("Страна", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Страна происхождения"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	НоменклатураСпр.id_tov,
	|	НоменклатураСпр.Наименование,
	|	НоменклатураСпр.Описание,
	|	НоменклатураСпр.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
	|	НоменклатураСпр.ПищеваяЦенность,
	|	НоменклатураСпр.МассаУпаковки,
	|	НоменклатураСпр.Состав,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
	|	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
	|	ШтриховыеКоды.ШтрихКод,
	|	НоменклатураСпр.СрокГодности,
	|	НоменклатураСпр.ОднаУпаковкаСодержит,
	|	ВЫБОР
	|		КОГДА НоменклатураСпр.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		КОГДА НоменклатураСпр.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			ТорговаяТочка В
	//+++АК ILIK 2018.07.16 ИП-00019094
	|				(ВЫБРАТЬ
    |					СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
    |				ИЗ
    |					РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
    |				ГДЕ
    |					СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.Инстамарт))) КАК ТоварныйАссортиментТочекСрезПоследних
	//---АК ILIK
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = НоменклатураСпр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &Страна)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|	И НоменклатураСпр.ВыгружатьНаСайт = ИСТИНА
	|	И НоменклатураСпр.Выведена = ЛОЖЬ
	|	И НоменклатураСпр.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКартинки.КлючСтроки,
	|	НоменклатураКартинки.Расширение,
	|	НоменклатураКартинки.Ссылка КАК Ссылка,
	|	НоменклатураКартинки.ИД,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение
	|ИЗ
	|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ";
	
	ИмяФайлаИксмл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКартинки = Результаты[1].Выгрузить();
	
	ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
	
	Если ВключенаВыгрузкаОстатков Тогда
		//+++АК ILIK 2018.09.20 ИП-00019838
		ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
		//---АК ILIK
	КонецЕсли;
	
	//+++АК ILIK 2018.09.20 ИП-00019838
	ТабРейтингиТоваров = ПолучитьРейтингиТоваров();
	//---АК ILIK
	
	ТабКартинкиНаФтп = Новый ТаблицаЗначений();
	ТабКартинкиНаФтп.Колонки.Добавить("Имя");
	
	ФайлыФтп = Сервер.НайтиФайлы("images", "*.*");
	Для Каждого ЭлментФайл Из ФайлыФтп Цикл
		СтрокаДоб = ТабКартинкиНаФтп.Добавить();
		СтрокаДоб.Имя = ЭлментФайл.Имя;
	КонецЦикла;
	
//+++АК KOPA 2018.04.19 ИП-00018238.01
	ВыгружатьАкции = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") и ДополнительныеПараметры.Свойство("Акции");
	Если ВыгружатьАкции Тогда
		//+++АК ILIK 2018.07.16 ИП-00019094
		//ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата());
		ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), Справочники.СлужбыКурьерскойДоставки.Инстамарт);
		//---АК ILIK
	КонецЕсли;
//---АК KOPA

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		
		ОписаниеСтрока = СокрЛП(Выборка.Описание);
		//+++АК MIND 2017.11.22 закомментил, попросили грузить с форматированием
		//НомерОткр = Найти(ОписаниеСтрока, "<");
		//НомерЗакр = Найти(ОписаниеСтрока, ">");
		//Пока НомерОткр > 0 И НомерЗакр > 0 Цикл
		//	ОписаниеСтрока = Сред(ОписаниеСтрока, 1, НомерОткр - 1) + Сред(ОписаниеСтрока, НомерЗакр + 1);
		//	НомерОткр = Найти(ОписаниеСтрока, "<");
		//	НомерЗакр = Найти(ОписаниеСтрока, ">");
		//КонецЦикла;	
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ОписаниеСтрока);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcode");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(СтрДлина(Выборка.ШтрихКод) <= 7, "", Выборка.ШтрихКод));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("category");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатурыРодитель));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("subcategory");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатуры));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("koef");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("nds");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Ставка, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Рейтинг = 0;
		СтрокаРейтинг = ТабРейтингиТоваров.Найти(Выборка.Номенклатура, "Товар");
		Если СтрокаРейтинг <> Неопределено Тогда
			Рейтинг = СтрокаРейтинг.Рейтинг;
		КонецЕсли;	
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Рейтинг, "ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ЗначениеЗаполнено(Выборка.СтранаОвощи) Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("country");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтранаОвощи));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		Иначе	
			ЭлементДом = ДокументДом.СоздатьЭлемент("country");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтранаОбщая));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		КонецЕсли;
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ВключенаВыгрузкаОстатков Тогда
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
				СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
				Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
					Если СтрокаОстаток.Остаток <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
					ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("id");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(Цел(СтрокаОстаток.НомерМагазина), "ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("amount");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаОстаток.Остаток, "ЧРД=.; ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
				КонецЦикла;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если СтрокиКартинки.Количество() > 0 Тогда
			ТекстКартинки = "";
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				Если ЗначениеЗаполнено(СтрокаКартинка.КлючСтроки) Тогда
					ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					Файл = Новый Файл(ИмяФайлаКартинки);
					Если Файл.Существует() Тогда
						ИмяФайлаКартинкиПолучатель = "images\" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						ИмяФайлаКартинкиПолучательФтп = "images/" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						СтрокаФайлФтп = ТабКартинкиНаФтп.Найти(Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение, "Имя");
						Если СтрокаФайлФтп = Неопределено Тогда
							Сервер.Записать(ИмяФайлаКартинки, ИмяФайлаКартинкиПолучательФтп);
							СтрокаДоб = ТабКартинкиНаФтп.Добавить();
							СтрокаДоб.Имя = Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						КонецЕсли;
						ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
//+++АК KOPA 2018.04.19 ИП-00018238.01		
		Если ВыгружатьАкции Тогда
			ДобавитьАкцииНоменклатуры(ДокументДом, ЭлементУзелДом, Выборка.Номенклатура, ВыборкаНоменклатураАкции);
		КонецЕсли;
//---АК KOPA
	КонецЦикла;
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	//+++АК ILIK 2018.07.02 ИП-00019021
	//Сервер.Записать(ИмяФайлаИксмл, "goods" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".xml");
	Сервер.Записать(ИмяФайлаИксмл, "goods" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + ".xml");
	//---АК ILIK
	
//+++АК KOPA 2018.04.27 ИП-00018238.01
	ИспользоватьДополнительныеПараметры = ТипЗнч(ДополнительныеПараметры) = Тип("Структура");	
	Если ИспользоватьДополнительныеПараметры и ДополнительныеПараметры.Свойство("ИмяФайла") Тогда
		КопироватьФайл(ИмяФайлаИксмл, ДополнительныеПараметры.ИмяФайла);	
	КонецЕсли;
//---АК KOPA	
	
	УдалитьФайлы(ИмяФайлаИксмл);
	
КонецПроцедуры

//+++АК MIND 2017.12.26 реализуем выгрузку данных в SaveTime
Процедура ВыгрузитьОстаткиВSaveTime(СерверФтп, ПользовательФтп, ПарольФтп, ДополнительныеПараметры = Неопределено) Экспорт
	
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	ТабФайлыФтп = Новый ТаблицаЗначений();
	ТабФайлыФтп.Колонки.Добавить("Имя");
	ТабФайлыФтп.Колонки.Добавить("Размер");
	ТабФайлыФтп.Колонки.Добавить("ДатаИзменения");
	
	Попытка
        
        //Задаем параметры подключения
        sessionOptions = Новый COMОбъект("WinSCP.SessionOptions"); //Создаем объект SessionOptions
        sessionOptions.HostName = СерверФтп;
        sessionOptions.UserName = ПользовательФтп;
        sessionOptions.Password = ПарольФтп;
        //sessionOptions.SshHostKeyFingerprint = "ssh-rsa 1024 11:11:11:11:11:11:11:11:11:11:11:11:11:11:11:11";
		sessionOptions.SshHostKeyFingerprint = "ssh-rsa 2048 77:cb:04:b7:83:d2:04:b9:cc:9b:4a:fd:0e:bd:1b:05";
        
        
        session = Новый COMОбъект("WinSCP.Session"); //Создаем объект Session
        
        // Подключаемся
        session.Open(sessionOptions);
		
		Если НЕ session.FileExists("uploads/images") Тогда
			session.CreateDirectory("uploads/images");
		КонецЕсли;	
		
		СписокФайлов = session.ListDirectory("uploads/images");
		Для Каждого ФайлФтп Из СписокФайлов.Files Цикл
			СтрокаДоб = ТабФайлыФтп.Добавить();
			СтрокаДоб.Имя = ФайлФтп.Name;
			СтрокаДоб.Размер = ФайлФтп.Length;
			СтрокаДоб.ДатаИзменения = ФайлФтп.LastWriteTime;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Страна", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Страна происхождения"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
		|	НоменклатураСпр.id_tov,
		|	НоменклатураСпр.Наименование,
		|	НоменклатураСпр.Описание,
		|	НоменклатураСпр.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
		|	НоменклатураСпр.ПищеваяЦенность,
		|	НоменклатураСпр.МассаУпаковки,
		|	НоменклатураСпр.Состав,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
		|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.ИД, -1) КАК ГруппаИД,
		|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
		|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Родитель.ИД, -1) КАК ГруппаИДРодитель,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки КАК НомерТочки,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
		|	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
		|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
		|	ШтриховыеКоды.ШтрихКод,
		|	НоменклатураСпр.СрокГодности,
		|	НоменклатураСпр.ОднаУпаковкаСодержит,
		|	ВЫБОР
		|		КОГДА НоменклатураСпр.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|			ТОГДА 10
		|		КОГДА НоменклатураСпр.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|			ТОГДА 18
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Ставка,
		|	ЕСТЬNULL(ШтриховыеКоды.ЕдиницаИзмерения.Вес, 0) КАК Вес
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			&ТекДата,
		|			ТорговаяТочка В
		//+++АК ILIK 2018.07.16 ИП-00019094
		|				(ВЫБРАТЬ
	    |					СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	    |				ИЗ
	    |					РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	    |				ГДЕ
	    |					СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.SaveTime))) КАК ТоварныйАссортиментТочекСрезПоследних
		//---АК ILIK
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = НоменклатураСпр.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
		|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = &Страна)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
		|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ШтриховыеКоды.Характеристика
		|ГДЕ
		|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
		|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
		|	И НоменклатураСпр.ВыгружатьНаСайт = ИСТИНА
		|	И НоменклатураСпр.Выведена = ЛОЖЬ
		|	И НоменклатураСпр.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураКартинки.КлючСтроки,
		|	НоменклатураКартинки.Расширение,
		|	НоменклатураКартинки.Ссылка КАК Ссылка,
		|	НоменклатураКартинки.ИД,
		|	НоменклатураКартинки.ЭтоОсновноеИзображение
		|ИЗ
		|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураАкции.Ссылка,
		|	НоменклатураАкции.НазваниеАкции,
		|	НоменклатураАкции.ДатаНачала,
		|	НоменклатураАкции.ДатаОкончания,
		|	НоменклатураАкции.ПриПокупкеШтук,
		|	НоменклатураАкции.ДействуетЦена_Скидка,
		|	НоменклатураАкции.ДействуетВМагазине.НомерТочки КАК НомерМагазина,
		|	НоменклатураАкции.КомментарийНаЦенник
		|ИЗ
		|	Справочник.Номенклатура.Акции КАК НоменклатураАкции
		|ГДЕ
		|	&ТекДата МЕЖДУ НоменклатураАкции.ДатаНачала И НоменклатураАкции.ДатаОкончания
		|	И НоменклатураАкции.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыАкцийПоТоварам.ПриПокупкеНесколькихШтук)";
		
		ИмяФайлаИксмл = ПолучитьИмяВременногоФайла("xml");
		ЗаписьИКСМЛ = Новый ЗаписьXML();
		ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
		ДокументДом = Новый ДокументDOM("http://items", "list");
		КорневойЭлемент = ДокументДом.ЭлементДокумента;
		
		Результаты = Запрос.ВыполнитьПакет();
		Выборка = Результаты[0].Выбрать();
		ТабКартинки = Результаты[1].Выгрузить();
		ТабАкцииПоКоличеству = Результаты[2].Выгрузить();
		
		ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
		
		Если ВключенаВыгрузкаОстатков Тогда
			//+++АК ILIK 2018.09.20 ИП-00019838
			ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
			//---АК ILIK
		КонецЕсли;
		
		//+++АК ILIK 2018.09.20 ИП-00019838
		ТабРейтингиТоваров = ПолучитьРейтингиТоваров();
		//---АК ILIK
		
//+++АК KOPA 2018.04.19 ИП-00018238.01
		ВыгружатьАкции = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") и ДополнительныеПараметры.Свойство("Акции");		
		Если ВыгружатьАкции Тогда
			//+++АК ILIK 2018.07.16 ИП-00019094
			//ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), "ВыгружатьОстаткиВSaveTime");
			ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), Справочники.СлужбыКурьерскойДоставки.SaveTime);
			//---АК ILIK
		КонецЕсли;
//---АК KOPA

		Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
			
			ОписаниеСтрока = СокрЛП(Выборка.Описание);
			//+++АК MIND 2017.11.22 закомментил, попросили грузить с форматированием
			//НомерОткр = Найти(ОписаниеСтрока, "<");
			//НомерЗакр = Найти(ОписаниеСтрока, ">");
			//Пока НомерОткр > 0 И НомерЗакр > 0 Цикл
			//	ОписаниеСтрока = Сред(ОписаниеСтрока, 1, НомерОткр - 1) + Сред(ОписаниеСтрока, НомерЗакр + 1);
			//	НомерОткр = Найти(ОписаниеСтрока, "<");
			//	НомерЗакр = Найти(ОписаниеСтрока, ">");
			//КонецЦикла;	
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("item");
			ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("id");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("title");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("description");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ОписаниеСтрока);
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("barcode");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(СтрДлина(Выборка.ШтрихКод) <= 7, "", Выборка.ШтрихКод));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("category");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатурыРодитель));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("categoryid");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.ГруппаИДРодитель), "ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("subcategory");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатуры));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("subcategoryid");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.ГруппаИД), "ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("price");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("koef");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("nds");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Ставка, "ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Рейтинг = 0;
			СтрокаРейтинг = ТабРейтингиТоваров.Найти(Выборка.Номенклатура, "Товар");
			Если СтрокаРейтинг <> Неопределено Тогда
				Рейтинг = СтрокаРейтинг.Рейтинг;
			КонецЕсли;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Рейтинг, "ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			Если ЗначениеЗаполнено(Выборка.СтранаОвощи) Тогда
				ЭлементДом = ДокументДом.СоздатьЭлемент("country");
				ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтранаОвощи));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
			Иначе	
				ЭлементДом = ДокументДом.СоздатьЭлемент("country");
				ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтранаОбщая));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
			КонецЕсли;
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
//+++АК KOPA 2018.04.19 ИП-00018238.01			
			ДобавитьДочернийЭлементИмяЗначение(ДокументДом, ЭлементУзелДом, "product_weight", Формат(Выборка.Вес, "ЧН=0; ЧГ="));//Вес товара из единицы измерения
//---АК KOPA

			Если ВключенаВыгрузкаОстатков Тогда
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
				ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
					СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
					Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
						Если СтрокаОстаток.Остаток <= 0 Тогда
							Продолжить;
						КонецЕсли;	
						ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
						ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
						
						ЭлементДом = ДокументДом.СоздатьЭлемент("id");
						ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
						ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(Цел(СтрокаОстаток.НомерМагазина), "ЧН=; ЧГ=0")));
						ТекУзелДом.ДобавитьДочерний(ТекстДом);
						
						ЭлементДом = ДокументДом.СоздатьЭлемент("amount");
						ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
						ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаОстаток.Остаток, "ЧРД=.; ЧН=; ЧГ=0")));
						ТекУзелДом.ДобавитьДочерний(ТекстДом);
					КонецЦикла;
					
				КонецЦикла;	
				
			КонецЕсли;
			
			СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
			ЭлементДом = ДокументДом.СоздатьЭлемент("image");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Если СтрокиКартинки.Количество() > 0 Тогда
				ТекстКартинки = "";
				Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
					Если ЗначениеЗаполнено(СтрокаКартинка.КлючСтроки) Тогда
						ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						Файл = Новый Файл(ИмяФайлаКартинки);
						СтрокаФайлФтп = ТабФайлыФтп.Найти(Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение, "Имя");
						Если Файл.Существует() Тогда
							ИмяФайлаКартинкиПолучатель = "images\" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
							
							Если СтрокаФайлФтп = Неопределено ИЛИ СтрокаФайлФтп.Размер <> Файл.Размер() ИЛИ СтрокаФайлФтп.ДатаИзменения <> Файл.ПолучитьВремяИзменения() Тогда
								session.PutFiles(ИмяФайлаКартинки, "uploads/images/" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение);
							КонецЕсли;	
							
							ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
			Иначе	
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
			КонецЕсли;	
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("promo_kolvo");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
				СтрокиАкции = ТабАкцииПоКоличеству.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
				Для Каждого СтрокаАкция Из СтрокиАкции Цикл
					Если СтрокаОстаток.Остаток <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
					ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("id");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(ЗначениеЗаполнено(СтрокаАкция.НомерМагазина), Формат(СтрокаАкция.НомерМагазина, "ЧН=; ЧГ=0"), "0"));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("startdate");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаАкция.ДатаНачала, "ДФ=dd.MM.yyyy")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("enddate");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаАкция.ДатаОкончания, "ДФ=dd.MM.yyyy")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("name");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(СтрокаАкция.НазваниеАкции));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("kolvofrom");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаАкция.ПриПокупкеШтук, "ЧРД=.; ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("pricenew");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаАкция.ДействуетЦена_Скидка, "ЧРД=.; ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("comment");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(СтрокаАкция.КомментарийНаЦенник));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
				КонецЦикла;
				
			КонецЦикла;	
				
//+++АК KOPA 2018.04.19 ИП-00018238.01	
			Если ВыгружатьАкции Тогда
				ДобавитьАкцииНоменклатуры(ДокументДом, ЭлементУзелДом, Выборка.Номенклатура, ВыборкаНоменклатураАкции);
			КонецЕсли;
//---АК KOPA


		КонецЦикла;
		
		ЗаписьДом = Новый ЗаписьDOM();
		ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
		ЗаписьИКСМЛ.Закрыть();
		ЗаписьИКСМЛ = Неопределено;
		
		session.PutFiles(ИмяФайлаИксмл, "uploads/goods.xml");
//+++АК KOPA 2018.04.19 ИП-00018238.01		
		ИспользоватьДополнительныеПараметры = ТипЗнч(ДополнительныеПараметры) = Тип("Структура");
		
		Если ИспользоватьДополнительныеПараметры и ДополнительныеПараметры.Свойство("ИмяФайла") Тогда
			КопироватьФайл(ИмяФайлаИксмл, ДополнительныеПараметры.ИмяФайла);	
		КонецЕсли;
//---АК KOPA		
		УдалитьФайлы(ИмяФайлаИксмл);
		
		//+++АК ILIK 2018.07.10
		//Разрываем соединение
		session.Dispose();
		//---АК ILIK
		
    Исключение
        ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в SaveTime", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Сообщить(ОписаниеОшибки());
    КонецПопытки;
	
КонецПроцедуры	

//mind выгрузка остатков в dostavista
Процедура ВыгрузитьОстаткиВDostavista(СерверФтп) Экспорт
	
	//здесь в отличие от других выгрузка идет в локальный каталог
	
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	//Попытка
	//	Сервер = Новый FTPСоединение(СерверФтп,
	//	21,
	//	ПользовательФТП,
	//	ПарольФТП,,Истина); 
	//Исключение
	//	ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в dostavista", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с сервером фтп. " + ОписаниеОшибки());		
	//	Возврат; 
	//КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Страна", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Страна происхождения"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	НоменклатураСпр.id_tov,
	|	НоменклатураСпр.Наименование,
	|	НоменклатураСпр.Описание,
	|	НоменклатураСпр.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
	|	НоменклатураСпр.ПищеваяЦенность,
	|	НоменклатураСпр.МассаУпаковки,
	|	НоменклатураСпр.Состав,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.ИД, -1) КАК ГруппаИД,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Родитель.ИД, -1) КАК ГруппаИДРодитель,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
	|	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
	|	ШтриховыеКоды.ШтрихКод,
	|	НоменклатураСпр.СрокГодности,
	|	НоменклатураСпр.ОднаУпаковкаСодержит,
	|	ВЫБОР
	|		КОГДА НоменклатураСпр.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		КОГДА НоменклатураСпр.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			ТорговаяТочка В
	//+++АК ILIK 2018.07.16 ИП-00019094
	|				(ВЫБРАТЬ
    |					СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
    |				ИЗ
    |					РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
    |				ГДЕ
    |					СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.Dostavista))) КАК ТоварныйАссортиментТочекСрезПоследних
	//---АК ILIK
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = НоменклатураСпр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &Страна)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|	И НоменклатураСпр.ВыгружатьНаСайт = ИСТИНА
	|	И НоменклатураСпр.Выведена = ЛОЖЬ
	|	И НоменклатураСпр.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКартинки.КлючСтроки,
	|	НоменклатураКартинки.Расширение,
	|	НоменклатураКартинки.Ссылка КАК Ссылка,
	|	НоменклатураКартинки.ИД,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение
	|ИЗ
	|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ";
	
	ИмяФайлаИксмл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКартинки = Результаты[1].Выгрузить();
	
	ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
	
	Если ВключенаВыгрузкаОстатков Тогда
		//+++АК ILIK 2018.09.20 ИП-00019838
		ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
		//---АК ILIK
	КонецЕсли;
	
	//+++АК ILIK 2018.09.20 ИП-00019838
	ТабРейтингиТоваров = ПолучитьРейтингиТоваров();
	//---АК ILIK
	
	ТабКартинкиНаФтп = Новый ТаблицаЗначений();
	ТабКартинкиНаФтп.Колонки.Добавить("Имя");
	
	ФайлыФтп = НайтиФайлы(СерверФтп + "images", "*.*");
	Для Каждого ЭлментФайл Из ФайлыФтп Цикл
		СтрокаДоб = ТабКартинкиНаФтп.Добавить();
		СтрокаДоб.Имя = ЭлментФайл.Имя;
	КонецЦикла;	
	
	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		
		ОписаниеСтрока = СокрЛП(Выборка.Описание);
		//+++АК MIND 2017.11.22 закомментил, попросили грузить с форматированием
		//НомерОткр = Найти(ОписаниеСтрока, "<");
		//НомерЗакр = Найти(ОписаниеСтрока, ">");
		//Пока НомерОткр > 0 И НомерЗакр > 0 Цикл
		//	ОписаниеСтрока = Сред(ОписаниеСтрока, 1, НомерОткр - 1) + Сред(ОписаниеСтрока, НомерЗакр + 1);
		//	НомерОткр = Найти(ОписаниеСтрока, "<");
		//	НомерЗакр = Найти(ОписаниеСтрока, ">");
		//КонецЦикла;	
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ОписаниеСтрока);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcode");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(СтрДлина(Выборка.ШтрихКод) <= 7, "", Выборка.ШтрихКод));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("category");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатурыРодитель));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("categoryid");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.ГруппаИДРодитель), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("subcategory");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатуры));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("subcategoryid");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.ГруппаИД), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("koef");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("nds");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Ставка, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Рейтинг = 0;
		СтрокаРейтинг = ТабРейтингиТоваров.Найти(Выборка.Номенклатура, "Товар");
		Если СтрокаРейтинг <> Неопределено Тогда
			Рейтинг = СтрокаРейтинг.Рейтинг;
		КонецЕсли;	
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Рейтинг, "ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ЗначениеЗаполнено(Выборка.СтранаОвощи) Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("country");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтранаОвощи));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		Иначе	
			ЭлементДом = ДокументДом.СоздатьЭлемент("country");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтранаОбщая));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		КонецЕсли;
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ВключенаВыгрузкаОстатков Тогда
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
				СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
				Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
					Если СтрокаОстаток.Остаток <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
					ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("id");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(Цел(СтрокаОстаток.НомерМагазина), "ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("amount");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаОстаток.Остаток, "ЧРД=.; ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
				КонецЦикла;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		//\\izb-fs01\Dostavista
		
		СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если СтрокиКартинки.Количество() > 0 Тогда
			ТекстКартинки = "";
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				Если ЗначениеЗаполнено(СтрокаКартинка.КлючСтроки) Тогда
					ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					Файл = Новый Файл(ИмяФайлаКартинки);
					Если Файл.Существует() Тогда
						ИмяФайлаКартинкиПолучатель = "images\" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						ИмяФайлаКартинкиПолучательФтп = "images/" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						СтрокаФайлФтп = ТабКартинкиНаФтп.Найти(Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение, "Имя");
						Если СтрокаФайлФтп = Неопределено Тогда
							КопироватьФайл(ИмяФайлаКартинки, СерверФтп + ИмяФайлаКартинкиПолучатель);
							//Сервер.Записать(ИмяФайлаКартинки, ИмяФайлаКартинкиПолучательФтп);
							СтрокаДоб = ТабКартинкиНаФтп.Добавить();
							СтрокаДоб.Имя = Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						КонецЕсли;
						ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
	КонецЦикла;
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	КопироватьФайл(ИмяФайлаИксмл, СерверФтп + "goods.xml");
	//Сервер.Записать(ИмяФайлаИксмл, "goods" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".xml");
	
	УдалитьФайлы(ИмяФайлаИксмл);
	
КонецПроцедуры

//+++АК ILIK 2018.09.20 ИП-00019838
Функция ПолучитьОстаткиМагазинов()
	ТабОстаткиМагазинов = Новый ТаблицаЗначений();
	ТабОстаткиМагазинов.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабОстаткиМагазинов.Колонки.Добавить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабОстаткиМагазинов.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТабОстаткиМагазинов.Колонки.Добавить("id_tt", Новый ОписаниеТипов("Число"));
	ТабОстаткиМагазинов.Колонки.Добавить("НомерМагазина", Новый ОписаниеТипов("Число"));
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	СтрЗапрос = "create table #ls1(id_tt int, id_tov int, q numeric(15, 3)) 
	|					
	|Insert into #ls1
	|EXEC [SMS_REPL].[dbo].[OST_for_WEB_BOT]
	|
	|CREATE INDEX index_idtt
	|ON #ls1(id_tt)
	|
	|CREATE INDEX index_id_tov
	|ON #ls1(id_tov)
	|					
	|SELECT
	|CAST(UINTov._Fld4946 as nvarchar(36)) TovUid
	|, CAST(UINTT._Fld4946 as nvarchar(36)) TTUid
	|, CAST(ls.q as numeric(15, 3)) q, ls.id_tt, TTSPr.N ShopNo
	|FROM #ls1 as ls
	|INNER JOIN M2.dbo.tt as TTSpr ON ls.id_tt = TTSpr.id_TT and TTSpr.tt_format = 2
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON ls.id_tt = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON ls.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|
	|where CAST(ls.q as numeric(15, 3)) > 0 or CAST(ls.q as numeric(15, 3)) = -99999";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТаб = ТабОстаткиМагазинов.Добавить();
			//СтрокаТаб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUid").Value));
			СтрокаТаб.Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovUid").Value));
			СтрокаТаб.Остаток = Окр(Rs.Fields("q").Value, 1);
			СтрокаТаб.id_tt = Rs.Fields("id_tt").Value;
			СтрокаТаб.НомерМагазина = Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТабОстаткиМагазинов.Индексы.Добавить("Товар, id_tt");
	
	Возврат ТабОстаткиМагазинов;
КонецФункции

//+++АК ILIK 2018.09.20 ИП-00019838
Функция ПолучитьРейтингиТоваров()
	ТабРейтингиТоваров = Новый ТаблицаЗначений();
	ТабРейтингиТоваров.Колонки.Добавить("Товар");
	ТабРейтингиТоваров.Колонки.Добавить("Рейтинг");
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрЗапрос = "SELECT UINTov._Fld4946 as TovarUID
	|      ,MAX(RT.reiting_avg) reiting_avg
	|FROM [Reports].[dbo].[reiting_tov] as RT (nolock)
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON RT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|where RT.id_kontr is null
	|GROUP BY
	|	UINTov._Fld4946";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТаб = ТабРейтингиТоваров.Добавить();
			СтрокаТаб.Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаТаб.Рейтинг = Rs.Fields("reiting_avg").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат ТабРейтингиТоваров;
КонецФункции

//+++АК ILIK 2018.06.21 ИП-00018481
Процедура ВыгрузитьОстаткиВGolamago(ИмяСервера, ИмяРесурса, СерверФтп, ПользовательФтп, ДополнительныеПараметры = Неопределено) Экспорт
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	// для отправки изображений
	ТабКартинкиНаФтп = Новый ТаблицаЗначений();
	ТабКартинкиНаФтп.Колонки.Добавить("Имя");
	ТабКартинкиНаФтп.Колонки.Добавить("Размер");
	ТабКартинкиНаФтп.Колонки.Добавить("ДатаИзменения");
	Попытка
		ФайлLamaKey = КаталогВременныхФайлов() + "lamakey.ppk";
		МакетGolamagoSFTP = ПолучитьОбщийМакет("GolamagoSFTP");
		МакетGolamagoSFTP.Записать(ФайлLamaKey);
		
		// Задаем параметры подключения
	    sessionOptions = Новый COMОбъект("WinSCP.SessionOptions"); //создаем объект SessionOptions
	    sessionOptions.HostName = СерверФтп;
	    sessionOptions.UserName = ПользовательФтп;
	    //sessionOptions.Password = "";
		sessionOptions.SshHostKeyFingerprint = "ssh-rsa 2048 84:eb:3f:3c:ff:4c:3d:00:67:cd:c9:01:62:d9:23:97";
		sessionOptions.SshPrivateKeyPath = ФайлLamaKey;
		
		session = Новый COMОбъект("WinSCP.Session"); //создаем объект Session
	    // Подключаемся
	    session.Open(sessionOptions);
		
		Если НЕ session.FileExists("uploads/images") Тогда
			session.CreateDirectory("uploads/images");
		КонецЕсли;	
		
		СписокФайлов = session.ListDirectory("uploads/images");
		Для Каждого ФайлФтп Из СписокФайлов.Files Цикл
			НовСтр = ТабКартинкиНаФтп.Добавить();
			НовСтр.Имя = ФайлФтп.Name;
			НовСтр.Размер = ФайлФтп.Length;
			НовСтр.ДатаИзменения = ФайлФтп.LastWriteTime;
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в Golamago", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с SFTP-сервером. " + ОписаниеОшибки());
		Возврат; 
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.id_tov КАК id_tov,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Описание КАК Описание,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ПищеваяЦенность КАК ПищеваяЦенность,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.МассаУпаковки КАК МассаУпаковки,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Состав КАК Состав,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
	|	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
	|	ШтриховыеКоды.ШтрихКод,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СрокГодности КАК СрокГодности,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит,
	|	ВЫБОР
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ставка
	//+++АК ILIK 2018.11.01 ИП-00020275
	|,	ЕСТЬNULL(ЗначенияСвойствОбъектовПроизводитель.Значение.Наименование, """") КАК Производитель,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектовПроизводитель.Значение.ИД, """") КАК ПроизводительИД
	//---АК ILIK
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			Номенклатура.ВыгружатьНаСайт
	|				И НЕ Номенклатура.Выведена
	|				И НЕ Номенклатура.ПометкаУдаления
	|				И ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	|					ИЗ
	|						РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	|					ГДЕ
	|						СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.golamago))) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ШтриховыеКоды.Характеристика
	//+++АК ILIK 2018.11.01 ИП-00020275
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовПроизводитель
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектовПроизводитель.Объект
	|			И (ЗначенияСвойствОбъектовПроизводитель.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	//---АК ILIK
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКартинки.КлючСтроки,
	|	НоменклатураКартинки.Расширение,
	|	НоменклатураКартинки.Ссылка КАК Ссылка,
	|	НоменклатураКартинки.ИД,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение
	|ИЗ
	|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|ГДЕ
	|	НоменклатураКартинки.КлючСтроки <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныйАссортиментТочек.Номенклатура,
	|	ШтриховыеКоды.ШтрихКод
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочек.Характеристика = ШтриховыеКоды.Характеристика
	|			И (ТоварныйАссортиментТочек.Номенклатура.ВыгружатьНаСайт)
	|			И (НЕ ТоварныйАссортиментТочек.Номенклатура.Выведена)
	|			И (НЕ ТоварныйАссортиментТочек.Номенклатура.ПометкаУдаления)
	|			И (НЕ ТоварныйАссортиментТочек.Выведена)
	|			И (НЕ ТоварныйАссортиментТочек.Запрещена)
	|			И (ТоварныйАссортиментТочек.ТорговаяТочка В
	|				(ВЫБРАТЬ
	|					СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	|				ИЗ
	|					РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	|				ГДЕ
	|					СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.golamago)))";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКартинки = Результаты[1].Выгрузить();
	ТабШтрихкоды = Результаты[2].Выгрузить();
	
	ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
	
	Если ВключенаВыгрузкаОстатков Тогда
		//+++АК ILIK 2018.09.20 ИП-00019838
		ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
		//---АК ILIK
	КонецЕсли;
	
	//+++АК ILIK 2018.09.20 ИП-00019838
	ТабРейтингиТоваров = ПолучитьРейтингиТоваров();
	//---АК ILIK
	
	//+++АК KOPA 2018.04.19 ИП-00018238.01
	ВыгружатьАкции = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Акции");
	Если ВыгружатьАкции Тогда
		//+++АК ILIK 2018.07.16 ИП-00019094
		//ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), "ВыгружатьОстаткиВGolamago");
		ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), Справочники.СлужбыКурьерскойДоставки.Golamago);
		//---АК ILIK
	КонецЕсли;
	//---АК KOPA
	
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		// удаление тегов и комментариев
		ОписаниеСтрока = СокрЛП(Выборка.Описание);
		НомерОткр = Найти(ОписаниеСтрока, "<");
		НомерЗакр = Найти(ОписаниеСтрока, ">");
		Пока НомерОткр > 0 И НомерЗакр > 0 Цикл
			ОписаниеСтрока = Сред(ОписаниеСтрока, 1, НомерОткр - 1) + Сред(ОписаниеСтрока, НомерЗакр + 1);
			НомерОткр = Найти(ОписаниеСтрока, "<");
			НомерЗакр = Найти(ОписаниеСтрока, ">");
		КонецЦикла;
		
		НомерОткр = Найти(ОписаниеСтрока, "***");
		Если НомерОткр > 0 Тогда
			ОписаниеСтрока = СокрЛП(Лев(ОписаниеСтрока, НомерОткр - 1));
		КонецЕсли;
		ОписаниеСтрока = СокрЛП(СтрЗаменить(ОписаниеСтрока, "&nbsp;", Символы.ПС));
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК ILIK 2018.09.20 ИП-00019863
		НаименованиеКакВЧеке = СокрЛП(Выборка.Наименование + "," + Выборка.ЕдИзм);
		НаименованиеКакВЧеке = СтрЗаменить(НаименованиеКакВЧеке, ";", " ");
		НаименованиеКакВЧеке = СтрЗаменить(НаименованиеКакВЧеке, "#", " ");	
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("receiptTitle");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(НаименованиеКакВЧеке);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//---АК ILIK
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ОписаниеСтрока);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcode");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(СтрДлина(Выборка.ШтрихКод) <= 7, "", Выборка.ШтрихКод));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("category");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатурыРодитель));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("subcategory");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатуры));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("koef");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("nds");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Ставка, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Рейтинг = 0;
		СтрокаРейтинг = ТабРейтингиТоваров.Найти(Выборка.Номенклатура, "Товар");
		Если СтрокаРейтинг <> Неопределено Тогда
			Рейтинг = СтрокаРейтинг.Рейтинг;
		КонецЕсли;	
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Рейтинг, "ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("country");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(ЗначениеЗаполнено(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОбщая)));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ВключенаВыгрузкаОстатков Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
				//+++АК ILIK 2018.11.01 ИП-00020275
				Остаток = 0;
				СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
				Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
					Остаток = Макс(Остаток, СтрокаОстаток.Остаток);
				КонецЦикла;
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
				ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("id");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.НомерТочки, "ЧН=; ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("amount");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Остаток, "ЧРД=.; ЧН=; ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("supplierid");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ПроизводительИД, "ЧН=; ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("supplier");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Производитель));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				//---АК ILIK
			КонецЦикла;
		КонецЕсли;
		
		СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если СтрокиКартинки.Количество() > 0 Тогда
			ТекстКартинки = "";
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
				Файл = Новый Файл(ИмяФайлаКартинки);
				Если Файл.Существует() Тогда
					ИмяФайлаКартинкиПолучатель = "images\" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					СтрокаФайлФтп = ТабКартинкиНаФтп.Найти(Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение, "Имя");
					Если СтрокаФайлФтп = Неопределено Или СтрокаФайлФтп.Размер <> Файл.Размер() Или СтрокаФайлФтп.ДатаИзменения <> Файл.ПолучитьВремяИзменения() Тогда
						session.PutFiles(ИмяФайлаКартинки, "uploads/images/" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение);
					КонецЕсли;
					ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
				КонецЕсли;
			КонецЦикла;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		// все штрихкоды
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcodes");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		
		ТекстШтрихкоды = "";
		НайденныеСтроки = ТабШтрихкоды.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекстШтрихкоды = ТекстШтрихкоды + ?(ЗначениеЗаполнено(ТекстШтрихкоды), ";", "") + НайденнаяСтрока.Штрихкод;
		КонецЦикла;
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстШтрихкоды);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК KOPA 2018.04.19 ИП-00018238.01		
		Если ВыгружатьАкции Тогда
			ДобавитьАкцииНоменклатуры(ДокументДом, ЭлементУзелДом, Выборка.Номенклатура, ВыборкаНоменклатураАкции);
		КонецЕсли;
		//---АК KOPA
	КонецЦикла;

	ИмяФайлаИксмл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	// для отправки файла выгрузки
	ИмяПередаваемогоФайла = ПолучитьИмяВременногоФайла("txt");
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку("--" + Boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-disposition: form-data; name=""file""; filename=""goods_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + ".xml""");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: application/x-octet-stream");
	ЗаписьТекста.ЗаписатьСтроку("");
	
	ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("--" + Boundary + "--");
	ЗаписьТекста.Закрыть();
	
	МассивФайловДляОбъединения = Новый Массив;
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
	МассивФайловДляОбъединения.Добавить(ИмяФайлаИксмл);
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяПередаваемогоФайла);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	ФайлОтправки = Новый Файл(ИмяПередаваемогоФайла);
	ЗаголовокHTTP.Вставить("Content-Length", XMLСтрока(ФайлОтправки.Размер()));
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(ИмяРесурса, ЗаголовокHTTP);
		HTTPЗапрос.УстановитьИмяФайлаТела(ИмяПередаваемогоФайла);

		HTTPСоединение = Новый HTTPСоединение(ИмяСервера,,,,,, Новый ЗащищенноеСоединениеOpenSSL());
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в Golamago", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с HTTP-сервером. " + ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		//Разрываем соединение
		session.Dispose();
		
		УдалитьФайлы(ФайлLamaKey);
		УдалитьФайлы(ИмяФайлаИксмл);
		УдалитьФайлы(ИмяПередаваемогоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

//+++ АК MOSD 2018.11.28 ИП-00020523 
Процедура ВыгрузитьОстаткиВGetFaster(СерверFTP, ПользовательFTP, ПарольFTP, ДополнительныеПараметры = Неопределено) Экспорт
	
	Попытка
		СоединениеFTP = Новый FTPСоединение(СерверFTP, 21, ПользовательFTP, ПарольFTP,, Истина, 60);
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в GetFaster", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с FTP-сервером. " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	// для отправки изображений
	ТабКартинкиНаФтп = Новый ТаблицаЗначений();
	ТабКартинкиНаФтп.Колонки.Добавить("Имя");
	ТабКартинкиНаФтп.Колонки.Добавить("Размер");
	ТабКартинкиНаФтп.Колонки.Добавить("ДатаИзменения");
	
	ПутьКПапкеСКартинкамиFTP = "/images/";
	ПутьКПапкеСКартинками    = "\images\";
	
	Попытка
		//проверка существования каталога
		НайденныеФайлыFTP = СоединениеFTP.НайтиФайлы(ПутьКПапкеСКартинкамиFTP);
		Если НайденныеФайлыFTP.Количество() = 0 Тогда
			СоединениеFTP.СоздатьКаталог(ПутьКПапкеСКартинкамиFTP);
		КонецЕсли;
		
		//поиск картинок на сервере
		НайденныеФайлыFTP = СоединениеFTP.НайтиФайлы(ПутьКПапкеСКартинкамиFTP, "*.*");
		Для Каждого ФайлФтп Из НайденныеФайлыFTP Цикл
			НовСтр = ТабКартинкиНаФтп.Добавить();
			НовСтр.Имя           = ФайлФтп.Имя;
			НовСтр.Размер        = ФайлФтп.Размер();
			НовСтр.ДатаИзменения = ФайлФтп.ПолучитьВремяИзменения();
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в GetFaster", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось получить список файлов картинок. " + ОписаниеОшибки());
		Возврат; 
	КонецПопытки;
	
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	//выгрузка данных	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	#Область ТекстЗапроса
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.id_tov КАК id_tov,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Описание КАК Описание,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ПищеваяЦенность КАК ПищеваяЦенность,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.МассаУпаковки КАК МассаУпаковки,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Состав КАК Состав,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
	|	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
	|	ШтриховыеКоды.ШтрихКод,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СрокГодности КАК СрокГодности,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит,
	|	ВЫБОР
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ставка
	//+++АК ILIK 2018.11.01 ИП-00020275
	|,	ЕСТЬNULL(ЗначенияСвойствОбъектовПроизводитель.Значение.Наименование, """") КАК Производитель,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектовПроизводитель.Значение.ИД, """") КАК ПроизводительИД
	//---АК ILIK
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			Номенклатура.ВыгружатьНаСайт
	|				И НЕ Номенклатура.Выведена
	|				И НЕ Номенклатура.ПометкаУдаления
	|				И ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	|					ИЗ
	|						РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	|					ГДЕ
	|						СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.GetFaster))) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ШтриховыеКоды.Характеристика
	//+++АК ILIK 2018.11.01 ИП-00020275
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовПроизводитель
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектовПроизводитель.Объект
	|			И (ЗначенияСвойствОбъектовПроизводитель.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	//---АК ILIK
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКартинки.КлючСтроки,
	|	НоменклатураКартинки.Расширение,
	|	НоменклатураКартинки.Ссылка КАК Ссылка,
	|	НоменклатураКартинки.ИД,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение
	|ИЗ
	|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|ГДЕ
	|	НоменклатураКартинки.КлючСтроки <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныйАссортиментТочек.Номенклатура,
	|	ШтриховыеКоды.ШтрихКод
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочек.Характеристика = ШтриховыеКоды.Характеристика
	|			И (ТоварныйАссортиментТочек.Номенклатура.ВыгружатьНаСайт)
	|			И (НЕ ТоварныйАссортиментТочек.Номенклатура.Выведена)
	|			И (НЕ ТоварныйАссортиментТочек.Номенклатура.ПометкаУдаления)
	|			И (НЕ ТоварныйАссортиментТочек.Выведена)
	|			И (НЕ ТоварныйАссортиментТочек.Запрещена)
	|			И (ТоварныйАссортиментТочек.ТорговаяТочка В
	|				(ВЫБРАТЬ
	|					СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	|				ИЗ
	|					РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	|				ГДЕ
	|					СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.GetFaster)))";
	
	#КонецОбласти
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКартинки = Результаты[1].Выгрузить();
	ТабШтрихкоды = Результаты[2].Выгрузить();
	
	ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
	
	Если ВключенаВыгрузкаОстатков Тогда
		//+++АК ILIK 2018.09.20 ИП-00019838
		ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
		//---АК ILIK
	КонецЕсли;
	
	//+++АК ILIK 2018.09.20 ИП-00019838
	ТабРейтингиТоваров = ПолучитьРейтингиТоваров();
	//---АК ILIK
	
	//+++АК KOPA 2018.04.19 ИП-00018238.01
	ВыгружатьАкции = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Акции");
	Если ВыгружатьАкции Тогда
		//+++АК ILIK 2018.07.16 ИП-00019094
		//ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), "ВыгружатьОстаткиВGolamago");
		ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), Справочники.СлужбыКурьерскойДоставки.GetFaster);
		//---АК ILIK
	КонецЕсли;
	//---АК KOPA
	
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		// удаление тегов и комментариев
		ОписаниеСтрока = СокрЛП(Выборка.Описание);
		НомерОткр = Найти(ОписаниеСтрока, "<");
		НомерЗакр = Найти(ОписаниеСтрока, ">");
		Пока НомерОткр > 0 И НомерЗакр > 0 Цикл
			ОписаниеСтрока = Сред(ОписаниеСтрока, 1, НомерОткр - 1) + Сред(ОписаниеСтрока, НомерЗакр + 1);
			НомерОткр = Найти(ОписаниеСтрока, "<");
			НомерЗакр = Найти(ОписаниеСтрока, ">");
		КонецЦикла;
		
		НомерОткр = Найти(ОписаниеСтрока, "***");
		Если НомерОткр > 0 Тогда
			ОписаниеСтрока = СокрЛП(Лев(ОписаниеСтрока, НомерОткр - 1));
		КонецЕсли;
		ОписаниеСтрока = СокрЛП(СтрЗаменить(ОписаниеСтрока, "&nbsp;", Символы.ПС));
		
	#Область ВыгрузкаОписанияНоменклатуры
	
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК ILIK 2018.09.20 ИП-00019863
		НаименованиеКакВЧеке = СокрЛП(Выборка.Наименование + "," + Выборка.ЕдИзм);
		НаименованиеКакВЧеке = СтрЗаменить(НаименованиеКакВЧеке, ";", " ");
		НаименованиеКакВЧеке = СтрЗаменить(НаименованиеКакВЧеке, "#", " ");	
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("receiptTitle");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(НаименованиеКакВЧеке);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//---АК ILIK
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ОписаниеСтрока);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcode");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(СтрДлина(Выборка.ШтрихКод) <= 7, "", Выборка.ШтрихКод));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("category");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатурыРодитель));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("subcategory");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатуры));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("koef");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("nds");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Ставка, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Рейтинг = 0;
		СтрокаРейтинг = ТабРейтингиТоваров.Найти(Выборка.Номенклатура, "Товар");
		Если СтрокаРейтинг <> Неопределено Тогда
			Рейтинг = СтрокаРейтинг.Рейтинг;
		КонецЕсли;	
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Рейтинг, "ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("country");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(ЗначениеЗаполнено(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОбщая)));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ВключенаВыгрузкаОстатков Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
				//+++АК ILIK 2018.11.01 ИП-00020275
				Остаток = 0;
				СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
				Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
					Остаток = Макс(Остаток, СтрокаОстаток.Остаток);
				КонецЦикла;
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
				ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("id");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.НомерТочки, "ЧН=; ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("amount");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Остаток, "ЧРД=.; ЧН=; ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("supplierid");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ПроизводительИД, "ЧН=; ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("supplier");
				ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Производитель));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				//---АК ILIK
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если СтрокиКартинки.Количество() > 0 Тогда
			ТекстКартинки = "";
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
				Файл = Новый Файл(ИмяФайлаКартинки);
				Если Файл.Существует() Тогда
					ИмяКартинкиВБазе = Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					ИмяФайлаКартинкиПолучатель = "images\" + ИмяКартинкиВБазе;
					СтрокаФайлФтп = ТабКартинкиНаФтп.Найти(ИмяКартинкиВБазе, "Имя");
					Если СтрокаФайлФтп = Неопределено Или СтрокаФайлФтп.Размер <> Файл.Размер() Или СтрокаФайлФтп.ДатаИзменения <> Файл.ПолучитьВремяИзменения() Тогда
						СоединениеFTP.Записать(ИмяФайлаКартинки, ПутьКПапкеСКартинкамиFTP + ИмяКартинкиВБазе);
					КонецЕсли;
					ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
				КонецЕсли;
			КонецЦикла;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		// все штрихкоды
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcodes");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		
		ТекстШтрихкоды = "";
		НайденныеСтроки = ТабШтрихкоды.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекстШтрихкоды = ТекстШтрихкоды + ?(ЗначениеЗаполнено(ТекстШтрихкоды), ";", "") + НайденнаяСтрока.Штрихкод;
		КонецЦикла;
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстШтрихкоды);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК KOPA 2018.04.19 ИП-00018238.01		
		Если ВыгружатьАкции Тогда
			ДобавитьАкцииНоменклатуры(ДокументДом, ЭлементУзелДом, Выборка.Номенклатура, ВыборкаНоменклатураАкции);
		КонецЕсли;
		//---АК KOPA
	КонецЦикла;

	ИмяФайлаИксмл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	// для отправки файла выгрузки
	ИмяПередаваемогоФайла = ПолучитьИмяВременногоФайла("txt");
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку("--" + Boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-disposition: form-data; name=""file""; filename=""goods_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + ".xml""");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: application/x-octet-stream");
	ЗаписьТекста.ЗаписатьСтроку("");
	
	ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("--" + Boundary + "--");
	ЗаписьТекста.Закрыть();
	
	МассивФайловДляОбъединения = Новый Массив;
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
	МассивФайловДляОбъединения.Добавить(ИмяФайлаИксмл);
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяПередаваемогоФайла);
	
	Попытка
		СоединениеFTP.Записать(ИмяПередаваемогоФайла,"data.xml");
		СоединениеFTP = "";
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в GetFaster", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось записать файл с данными. " + ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяФайлаИксмл);
		УдалитьФайлы(ИмяПередаваемогоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры
//--- АК MOSD 

//+++АК ILIK 2018.07.18 ИП-00019103
Процедура ВыгрузитьОстаткиВМинутка(СерверФтп, ПользовательФтп, ПарольФтп, ДополнительныеПараметры = Неопределено) Экспорт
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	ТабКартинкиНаФтп = Новый ТаблицаЗначений();
	ТабКартинкиНаФтп.Колонки.Добавить("Имя");
	
	Попытка
		Сервер = Новый FTPСоединение(СерверФтп, 21, ПользовательФТП, ПарольФТП,, Истина); 
		
		ФайлыФтп = Сервер.НайтиФайлы("images", "*.*");
		Для Каждого ЭлментФайл Из ФайлыФтп Цикл
			СтрокаДоб = ТабКартинкиНаФтп.Добавить();
			СтрокаДоб.Имя = ЭлментФайл.Имя;
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в Минутка", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с FTP-сервером. " + ОписаниеОшибки());		
		Возврат; 
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.id_tov КАК id_tov,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Описание КАК Описание,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ПищеваяЦенность КАК ПищеваяЦенность,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.МассаУпаковки КАК МассаУпаковки,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Состав КАК Состав,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
	|	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
	|	ШтриховыеКоды.ШтрихКод,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СрокГодности КАК СрокГодности,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит,
	|	ВЫБОР
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			Номенклатура.ВыгружатьНаСайт
	|				И НЕ Номенклатура.Выведена
	|				И НЕ Номенклатура.ПометкаУдаления
	|				И ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	|					ИЗ
	|						РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	|					ГДЕ
	|						СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.Минутка))) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКартинки.КлючСтроки,
	|	НоменклатураКартинки.Расширение,
	|	НоменклатураКартинки.Ссылка КАК Ссылка,
	|	НоменклатураКартинки.ИД,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение
	|ИЗ
	|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|ГДЕ
	|	НоменклатураКартинки.КлючСтроки <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКартинки = Результаты[1].Выгрузить();
	
	ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
	
	Если ВключенаВыгрузкаОстатков Тогда
		//+++АК ILIK 2018.09.20 ИП-00019838
		ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
		//---АК ILIK
	КонецЕсли;
	
	//+++АК ILIK 2018.09.20 ИП-00019838
	ТабРейтингиТоваров = ПолучитьРейтингиТоваров();
	//---АК ILIK
	
	//+++АК KOPA 2018.04.19 ИП-00018238.01
	ВыгружатьАкции = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Акции");
	Если ВыгружатьАкции Тогда
		ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), Справочники.СлужбыКурьерскойДоставки.Минутка);
	КонецЕсли;
	//---АК KOPA
	
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Описание));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcode");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(СтрДлина(Выборка.ШтрихКод) <= 7, "", Выборка.ШтрихКод));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("category");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатурыРодитель));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("subcategory");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатуры));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("koef");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("nds");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Ставка, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Рейтинг = 0;
		СтрокаРейтинг = ТабРейтингиТоваров.Найти(Выборка.Номенклатура, "Товар");
		Если СтрокаРейтинг <> Неопределено Тогда
			Рейтинг = СтрокаРейтинг.Рейтинг;
		КонецЕсли;	
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Рейтинг, "ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("country");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(ЗначениеЗаполнено(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОбщая)));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ВключенаВыгрузкаОстатков Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
				СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
				Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
					Если СтрокаОстаток.Остаток <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
					ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("id");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(Цел(СтрокаОстаток.НомерМагазина), "ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("amount");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаОстаток.Остаток, "ЧРД=.; ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если СтрокиКартинки.Количество() > 0 Тогда
			ТекстКартинки = "";
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
				Файл = Новый Файл(ИмяФайлаКартинки);
				Если Файл.Существует() Тогда
					ИмяФайлаКартинкиПолучатель = "images\" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					ИмяФайлаКартинкиПолучательФтп = "images/" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					СтрокаФайлФтп = ТабКартинкиНаФтп.Найти(Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение, "Имя");
					Если СтрокаФайлФтп = Неопределено Тогда
						Сервер.Записать(ИмяФайлаКартинки, ИмяФайлаКартинкиПолучательФтп);
						СтрокаДоб = ТабКартинкиНаФтп.Добавить();
						СтрокаДоб.Имя = Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					КонецЕсли;
					ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
				КонецЕсли;
			КонецЦикла;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК KOPA 2018.04.19 ИП-00018238.01		
		Если ВыгружатьАкции Тогда
			ДобавитьАкцииНоменклатуры(ДокументДом, ЭлементУзелДом, Выборка.Номенклатура, ВыборкаНоменклатураАкции);
		КонецЕсли;
		//---АК KOPA
	КонецЦикла;

	ИмяФайлаИксмл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	Попытка
		Сервер.Записать(ИмяФайлаИксмл, "goods.xml");
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в Минутка", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось передать файл на FTP-сервер. " + ОписаниеОшибки());
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаИксмл);
КонецПроцедуры

//+++АК ILIK 2018.09.20 ИП-00019838
Процедура ВыгрузитьОстаткиВEVS(СерверФтп, ПользовательФтп, ПарольФтп, ДополнительныеПараметры = Неопределено) Экспорт
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	ТабКартинкиНаФтп = Новый ТаблицаЗначений();
	ТабКартинкиНаФтп.Колонки.Добавить("Имя");
	
	Попытка
		Сервер = Новый FTPСоединение(СерверФтп, 21, ПользовательФТП, ПарольФТП,, Истина); 
		
		ФайлыФтп = Сервер.НайтиФайлы("images", "*.*");
		Для Каждого ЭлементФайл Из ФайлыФтп Цикл
			СтрокаДоб = ТабКартинкиНаФтп.Добавить();
			СтрокаДоб.Имя = ЭлементФайл.Имя;
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в EVS", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с FTP-сервером. " + ОписаниеОшибки());		
		Возврат; 
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.id_tov КАК id_tov,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Описание КАК Описание,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ПищеваяЦенность КАК ПищеваяЦенность,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.МассаУпаковки КАК МассаУпаковки,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Состав КАК Состав,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
	|	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
	|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
	|	ШтриховыеКоды.ШтрихКод,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СрокГодности КАК СрокГодности,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ОднаУпаковкаСодержит КАК ОднаУпаковкаСодержит,
	|	ВЫБОР
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			Номенклатура.ВыгружатьНаСайт
	|				И НЕ Номенклатура.Выведена
	|				И НЕ Номенклатура.ПометкаУдаления
	|				И ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	|					ИЗ
	|						РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	|					ГДЕ
	|						СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.EVS))) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКартинки.КлючСтроки,
	|	НоменклатураКартинки.Расширение,
	|	НоменклатураКартинки.Ссылка КАК Ссылка,
	|	НоменклатураКартинки.ИД,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение
	|ИЗ
	|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|ГДЕ
	|	НоменклатураКартинки.КлючСтроки <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКартинки = Результаты[1].Выгрузить();
	
	ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
	
	Если ВключенаВыгрузкаОстатков Тогда
		ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
	КонецЕсли;
	
	ТабРейтингиТоваров = ПолучитьРейтингиТоваров();
	
	//+++АК KOPA 2018.04.19 ИП-00018238.01
	ВыгружатьАкции = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Акции");
	Если ВыгружатьАкции Тогда
		ВыборкаНоменклатураАкции = ПолучитьВыборкуАкции_ДляВыгрузки(ТекущаяДата(), Справочники.СлужбыКурьерскойДоставки.EVS);
	КонецЕсли;
	//---АК KOPA
	
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Описание));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("barcode");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(СтрДлина(Выборка.ШтрихКод) <= 7, "", Выборка.ШтрихКод));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("category");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатурыРодитель));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("subcategory");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГруппаНоменклатуры));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("koef");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ОднаУпаковкаСодержит, "ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("nds");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Ставка, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Рейтинг = 0;
		СтрокаРейтинг = ТабРейтингиТоваров.Найти(Выборка.Номенклатура, "Товар");
		Если СтрокаРейтинг <> Неопределено Тогда
			Рейтинг = СтрокаРейтинг.Рейтинг;
		КонецЕсли;	
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Рейтинг, "ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("country");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(ЗначениеЗаполнено(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОбщая)));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если ВключенаВыгрузкаОстатков Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			Пока Выборка.СледующийПоЗначениюПоля("id_TT") Цикл
				СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
				Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
					Если СтрокаОстаток.Остаток <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					ЭлементДом = ДокументДом.СоздатьЭлемент("Shop");
					ТекУзелМагазин = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("id");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(Цел(СтрокаОстаток.НомерМагазина), "ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
					
					ЭлементДом = ДокументДом.СоздатьЭлемент("amount");
					ТекУзелДом = ТекУзелМагазин.ДобавитьДочерний(ЭлементДом);
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Формат(СтрокаОстаток.Остаток, "ЧРД=.; ЧН=; ЧГ=0")));
					ТекУзелДом.ДобавитьДочерний(ТекстДом);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Номенклатура));
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если СтрокиКартинки.Количество() > 0 Тогда
			ТекстКартинки = "";
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
				Файл = Новый Файл(ИмяФайлаКартинки);
				Если Файл.Существует() Тогда
					ИмяФайлаКартинкиПолучатель = "images\" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					ИмяФайлаКартинкиПолучательФтп = "images/" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					СтрокаФайлФтп = ТабКартинкиНаФтп.Найти(Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение, "Имя");
					Если СтрокаФайлФтп = Неопределено Тогда
						Сервер.Записать(ИмяФайлаКартинки, ИмяФайлаКартинкиПолучательФтп);
						СтрокаДоб = ТабКартинкиНаФтп.Добавить();
						СтрокаДоб.Имя = Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					КонецЕсли;
					ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
				КонецЕсли;
			КонецЦикла;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК KOPA 2018.04.19 ИП-00018238.01		
		Если ВыгружатьАкции Тогда
			ДобавитьАкцииНоменклатуры(ДокументДом, ЭлементУзелДом, Выборка.Номенклатура, ВыборкаНоменклатураАкции);
		КонецЕсли;
		//---АК KOPA
	КонецЦикла;

	ИмяФайлаИксмл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	Попытка
		Сервер.Записать(ИмяФайлаИксмл, "goods.xml");
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в EVS", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось передать файл на FTP-сервер. " + ОписаниеОшибки());
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаИксмл);
КонецПроцедуры

//+++АК ILIK 2018.10.10 ИП-00019776
Процедура ВыгрузитьОстаткиВIGooods(Сервер, Пользователь, Пароль, ДополнительныеПараметры = Неопределено) Экспорт
	ПолнаяВыгрузка = Ложь;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ПолнаяВыгрузка") Тогда
		ПолнаяВыгрузка = ДополнительныеПараметры.ПолнаяВыгрузка;
	КонецЕсли;
	
	КаталогТекущаяДата = Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd");
	
	ФайлыДляОтправки = Новый ТаблицаЗначений;
	ФайлыДляОтправки.Колонки.Добавить("ФайлИсточник");
	ФайлыДляОтправки.Колонки.Добавить("ФайлПриемник");
	
	Если ПолнаяВыгрузка Тогда
		КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(КаталогКартинок, 1) <> "\" Тогда
			КаталогКартинок = КаталогКартинок + "\";
		КонецЕсли;
		
		КартинкиНаСервере = Новый ТаблицаЗначений();
		КартинкиНаСервере.Колонки.Добавить("Имя");
		КартинкиНаСервере.Колонки.Добавить("Размер");
	КонецЕсли;
	
	Попытка
		sessionOptions = Новый COMОбъект("WinSCP.SessionOptions");
		sessionOptions.HostName = Сервер;
		sessionOptions.UserName = Пользователь;
		sessionOptions.Password = Пароль;
		sessionOptions.SshHostKeyFingerprint = "ssh-rsa 2048 68:37:b1:7e:a3:2e:c5:ca:4a:35:96:1b:9a:ff:eb:64";
		
		session = Новый COMОбъект("WinSCP.Session");
		session.AddRawConfiguration("Interface\CopyParam\ResumeSupport", "2");
		session.Open(sessionOptions);
		
		Если ПолнаяВыгрузка Тогда
			Если НЕ session.FileExists("/igooods_vkusvill/images") Тогда
				session.CreateDirectory("/igooods_vkusvill/images");
			КонецЕсли;
			
			СписокКаталогов = session.ListDirectory("/igooods_vkusvill/images");
			Для Каждого Каталог Из СписокКаталогов.Files Цикл
				Если Не Каталог.IsDirectory Тогда
					Продолжить;
				КонецЕсли;
				
				СписокФайлов = session.ListDirectory(Каталог.FullName);
				Для Каждого Файл Из СписокФайлов.Files Цикл
					Если Файл.IsDirectory Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтр = КартинкиНаСервере.Добавить();
					НовСтр.Имя = Файл.FullName;
					НовСтр.Размер = Файл.Length;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в IGooods", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с SFTP-сервером. " + ОписаниеОшибки());
		Возврат; 
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	               |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	               |ПОМЕСТИТЬ ВТТоварныйАссортимент
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |			&ТекДата,
	               |			Номенклатура.ВыгружатьНаСайт
	               |				И НЕ Номенклатура.Выведена
	               |				И НЕ Номенклатура.ПометкаУдаления
	               |				И ТорговаяТочка В
	               |					(ВЫБРАТЬ
	               |						СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	               |					ИЗ
	               |						РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	               |					ГДЕ
	               |						СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.IGooods))) КАК ТоварныйАссортиментТочекСрезПоследних
	               |ГДЕ
	               |	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	               |	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТоварныйАссортимент.ТорговаяТочка КАК ТорговаяТочка,
	               |	ВТТоварныйАссортимент.ТорговаяТочка.НомерТочки КАК НомерТочки,
	               |	ВТТоварныйАссортимент.ТорговаяТочка.id_TT КАК id_TT,
	               |	ВТТоварныйАссортимент.Номенклатура КАК Номенклатура,
	               |	ВТТоварныйАссортимент.Номенклатура.Наименование КАК Наименование,
	               |	ВТТоварныйАссортимент.Номенклатура.id_tov КАК id_tov,
	               |	ВЫБОР
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.Весовой
	               |			ТОГДА ""w""
	               |		ИНАЧЕ ""p""
	               |	КОНЕЦ КАК ТипТовара,
	               |	ВЫБОР
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |			ТОГДА 10
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |			ТОГДА 18
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СтавкаНДС
	               |ПОМЕСТИТЬ ВТТоварныйАссортиментСМагазинами
	               |ИЗ
	               |	ВТТоварныйАссортимент КАК ВТТоварныйАссортимент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница,
	               |	НоменклатураАкции.Ссылка,
	               |	НоменклатураАкции.НомерСтроки,
	               |	НоменклатураАкции.ДатаОкончания,
	               |	НоменклатураАкции.ПриПокупкеШтук,
	               |	НоменклатураАкции.ДействуетЦена_Скидка,
	               |	НоменклатураАкции.ТипСкидки
	               |ПОМЕСТИТЬ ВТАкцииВМагазинах
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НоменклатураАкции.Ссылка КАК Ссылка,
	               |		НоменклатураАкции.НомерСтроки КАК НомерСтроки,
	               |		НоменклатураАкции.ДатаОкончания КАК ДатаОкончания,
	               |		НоменклатураАкции.ПриПокупкеШтук КАК ПриПокупкеШтук,
	               |		НоменклатураАкции.ДействуетЦена_Скидка КАК ДействуетЦена_Скидка,
	               |		НоменклатураАкции.ТипСкидки КАК ТипСкидки,
	               |		НоменклатураАкции.ДействуетВМагазине КАК ДействуетВМагазине
	               |	ИЗ
	               |		Справочник.Номенклатура.Акции КАК НоменклатураАкции
	               |	ГДЕ
	               |		НоменклатураАкции.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТТоварныйАссортиментСМагазинами.Номенклатура
	               |				ИЗ
	               |					ВТТоварныйАссортиментСМагазинами)
	               |		И &ТекДата МЕЖДУ НоменклатураАкции.ДатаНачала И КОНЕЦПЕРИОДА(НоменклатураАкции.ДатаОкончания, ДЕНЬ)) КАК НоменклатураАкции
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	               |		ПО (НоменклатураАкции.ДействуетВМагазине = СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	               |				ИЛИ НоменклатураАкции.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	               |			И (СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.IGooods))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТАкцииВМагазинах.СтруктурнаяЕдиница,
	               |	ВТАкцииВМагазинах.Ссылка,
	               |	ВТАкцииВМагазинах.ДатаОкончания,
	               |	ВТАкцииВМагазинах.ПриПокупкеШтук,
	               |	ВТАкцииВМагазинах.ДействуетЦена_Скидка,
	               |	ВТАкцииВМагазинах.ТипСкидки
	               |ПОМЕСТИТЬ ВТАкцииВМагазинахИтог
	               |ИЗ
	               |	ВТАкцииВМагазинах КАК ВТАкцииВМагазинах
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТАкцииВМагазинах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |			ВТАкцииВМагазинах.Ссылка КАК Ссылка,
	               |			МАКСИМУМ(ВТАкцииВМагазинах.НомерСтроки) КАК НомерСтроки
	               |		ИЗ
	               |			ВТАкцииВМагазинах КАК ВТАкцииВМагазинах
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТАкцииВМагазинах.СтруктурнаяЕдиница,
	               |			ВТАкцииВМагазинах.Ссылка) КАК МаксНомерСтроки
	               |		ПО ВТАкцииВМагазинах.СтруктурнаяЕдиница = МаксНомерСтроки.СтруктурнаяЕдиница
	               |			И ВТАкцииВМагазинах.Ссылка = МаксНомерСтроки.Ссылка
	               |			И ВТАкцииВМагазинах.НомерСтроки = МаксНомерСтроки.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	               |	ШтриховыеКоды.ШтрихКод
	               |ПОМЕСТИТЬ ВТШтрихкоды
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	               |		ПО ТоварныйАссортиментТочек.Характеристика = ШтриховыеКоды.Характеристика
	               |			И (ТоварныйАссортиментТочек.Номенклатура.ВыгружатьНаСайт)
	               |			И (НЕ ТоварныйАссортиментТочек.Номенклатура.Выведена)
	               |			И (НЕ ТоварныйАссортиментТочек.Номенклатура.ПометкаУдаления)
	               |			И (НЕ ТоварныйАссортиментТочек.Выведена)
	               |			И (НЕ ТоварныйАссортиментТочек.Запрещена)
	               |			И (ТоварныйАссортиментТочек.ТорговаяТочка В
	               |				(ВЫБРАТЬ
	               |					СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
	               |				ИЗ
	               |					РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
	               |				ГДЕ
	               |					СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыКурьерскойДоставки.IGooods)))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТоварныйАссортиментСМагазинами.ТорговаяТочка КАК ТорговаяТочка,
	               |	ВТТоварныйАссортиментСМагазинами.НомерТочки,
	               |	ВТТоварныйАссортиментСМагазинами.id_TT,
	               |	ВТТоварныйАссортиментСМагазинами.Номенклатура КАК Номенклатура,
	               |	ВТТоварныйАссортиментСМагазинами.Наименование,
	               |	ВТТоварныйАссортиментСМагазинами.id_tov,
	               |	ВТТоварныйАссортиментСМагазинами.ТипТовара,
	               |	ВТТоварныйАссортиментСМагазинами.СтавкаНДС,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	ВЫБОР
	               |		КОГДА ВТАкцииВМагазинахИтог.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте)
	               |			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (100 - ЕСТЬNULL(ВТАкцииВМагазинахИтог.ДействуетЦена_Скидка, 0)) / 100 КАК ЧИСЛО(15, 0))
	               |		КОГДА ВТАкцииВМагазинахИтог.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыАкцийПоТоварам.ПриПокупкеНесколькихШтук)
	               |			ТОГДА ЕСТЬNULL(ВТАкцииВМагазинахИтог.ДействуетЦена_Скидка, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК АкцияЦена,
	               |	ЕСТЬNULL(ВТАкцииВМагазинахИтог.ПриПокупкеШтук, """") КАК АкцияПриПокупкеШтук,
	               |	ЕСТЬNULL(ВТАкцииВМагазинахИтог.ДатаОкончания, """") КАК АкцияДатаОкончания,
	               |	ЕСТЬNULL(ВТШтрихкоды.ШтрихКод, """") КАК Штрихкод
	               |ИЗ
	               |	ВТТоварныйАссортиментСМагазинами КАК ВТТоварныйАссортиментСМагазинами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ТекДата,
	               |				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ВТТоварныйАссортиментСМагазинами.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТАкцииВМагазинахИтог КАК ВТАкцииВМагазинахИтог
	               |		ПО ВТТоварныйАссортиментСМагазинами.ТорговаяТочка = ВТАкцииВМагазинахИтог.СтруктурнаяЕдиница
	               |			И ВТТоварныйАссортиментСМагазинами.Номенклатура = ВТАкцииВМагазинахИтог.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкоды КАК ВТШтрихкоды
	               |		ПО ВТТоварныйАссортиментСМагазинами.Номенклатура = ВТШтрихкоды.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТорговаяТочка,
	               |	Номенклатура" + ?(ПолнаяВыгрузка, "
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТоварныйАссортимент.Номенклатура КАК Номенклатура,
	               |	ВТТоварныйАссортимент.Номенклатура.Наименование КАК Наименование,
	               |	ВТТоварныйАссортимент.Номенклатура.id_tov КАК id_tov,
	               |	ВЫБОР
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.Весовой
	               |			ТОГДА ""w""
	               |		ИНАЧЕ ""p""
	               |	КОНЕЦ КАК ТипТовара,
	               |	ВЫБОР
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |			ТОГДА 10
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |			ТОГДА 18
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СтавкаНДС,
	               |	ВТТоварныйАссортимент.Номенклатура.Описание КАК Описание,
	               |	ВТТоварныйАссортимент.Номенклатура.ПищеваяЦенность КАК ПищеваяЦенность,
	               |	ВТТоварныйАссортимент.Номенклатура.Состав КАК Состав,
	               |	ЕСТЬNULL(ВТТоварныйАссортимент.Номенклатура.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	               |	ВТТоварныйАссортимент.Номенклатура.СрокГодности КАК СрокГодности,
	               //+++АК ILIK 2018.11.23 ИП-00019776.01
   	               |	ВЫБОР
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.Весовой
	               |			ТОГДА ВТТоварныйАссортимент.Номенклатура.ОднаУпаковкаСодержит
	               |		ИНАЧЕ ЕСТЬNULL(ВТТоварныйАссортимент.Номенклатура.ЕдиницаХраненияОстатков.Вес, 0)
	               |	КОНЕЦ КАК ВесУпаковки,
	               |	ВЫБОР
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.Весовой
	               |			ТОГДА """"
	               |		ИНАЧЕ ВТТоварныйАссортимент.Номенклатура.МассаУпаковки
	               |	КОНЕЦ КАК ТипУпаковки,
	               |	ВЫБОР
	               |		КОГДА ВТТоварныйАссортимент.Номенклатура.БезУпаковки
	               |			ТОГДА ""y""
	               |		ИНАЧЕ ""n""
	               |	КОНЕЦ КАК БезУпаковки,
				   //---АК ILIK
	               |	ВТТоварныйАссортимент.Характеристика
	               |ПОМЕСТИТЬ ВТТоварныйАссортиментБезМагазинов
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВТТоварныйАссортимент.Номенклатура КАК Номенклатура,
	               |		ВТТоварныйАссортимент.Характеристика КАК Характеристика
	               |	ИЗ
	               |		ВТТоварныйАссортимент КАК ВТТоварныйАссортимент) КАК ВТТоварныйАссортимент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТоварныйАссортиментБезМагазинов.Номенклатура КАК Номенклатура,
	               |	ВТТоварныйАссортиментБезМагазинов.Наименование,
	               |	ВТТоварныйАссортиментБезМагазинов.id_tov,
	               |	ВТТоварныйАссортиментБезМагазинов.ТипТовара,
	               |	ВТТоварныйАссортиментБезМагазинов.СтавкаНДС,
	               |	ВТТоварныйАссортиментБезМагазинов.Описание,
	               |	ВТТоварныйАссортиментБезМагазинов.ПищеваяЦенность,
	               |	ВТТоварныйАссортиментБезМагазинов.Состав,
	               |	ВТТоварныйАссортиментБезМагазинов.ГруппаНоменклатуры,
	               |	ВТТоварныйАссортиментБезМагазинов.СрокГодности,
	               |	ВТТоварныйАссортиментБезМагазинов.ВесУпаковки,
				   //+++АК ILIK 2018.11.23 ИП-00019776.01
	               |	ВТТоварныйАссортиментБезМагазинов.ТипУпаковки,
	               |	ВТТоварныйАссортиментБезМагазинов.БезУпаковки,
				   //---АК ILIK
	               |	ЭтикеткиНаОвощиСрезПоследних.СтранаПроисхождения КАК СтранаОвощи,
	               |	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК СтранаОбщая,
	               |	ЕСТЬNULL(ВТШтрихкоды.ШтрихКод, """") КАК Штрихкод
	               |ИЗ
	               |	ВТТоварныйАссортиментБезМагазинов КАК ВТТоварныйАссортиментБезМагазинов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи.СрезПоследних(&ТекДата, ) КАК ЭтикеткиНаОвощиСрезПоследних
	               |		ПО ВТТоварныйАссортиментБезМагазинов.Характеристика = ЭтикеткиНаОвощиСрезПоследних.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ВТТоварныйАссортиментБезМагазинов.Характеристика = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкоды КАК ВТШтрихкоды
	               |		ПО ВТТоварныйАссортиментБезМагазинов.Номенклатура = ВТШтрихкоды.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	Штрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураКартинки.Ссылка КАК Ссылка,
	               |	НоменклатураКартинки.Ссылка.id_tov,
	               |	НоменклатураКартинки.КлючСтроки,
	               |	НоменклатураКартинки.Расширение,
	               |	НоменклатураКартинки.ИД,
	               |	НоменклатураКартинки.ЭтоОсновноеИзображение
	               |ИЗ
	               |	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	               |ГДЕ
	               |	НоменклатураКартинки.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТТоварныйАссортиментБезМагазинов.Номенклатура
	               |			ИЗ
	               |				ВТТоварныйАссортиментБезМагазинов)
	               |	И НоменклатураКартинки.КлючСтроки <> """"
	               |ИТОГИ ПО
	               |	Ссылка", "");
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабОстаткиМагазинов = ПолучитьОстаткиМагазинов();
	
	// выгружаем данные по магазинам
	Выборка = Результаты[5].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ТорговаяТочка") Цикл
		МассивТоваров = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("id", Формат(Выборка.id_tov, "ЧН=0; ЧГ=0"));
			СтруктураДанных.Вставить("type", Выборка.ТипТовара);
			СтруктураДанных.Вставить("name", СокрЛП(Выборка.Наименование));
			СтруктураДанных.Вставить("price", Цел(Выборка.Цена));
			СтруктураДанных.Вставить("vat", Выборка.СтавкаНДС);
			
			Если ЗначениеЗаполнено(Выборка.АкцияЦена) Тогда
				СтруктураДанных.Вставить("promo_price", Выборка.АкцияЦена);
				СтруктураДанных.Вставить("promo_to", Формат(Выборка.АкцияДатаОкончания, "ДФ=yyyy-MM-dd"));
				Если ЗначениеЗаполнено(Выборка.АкцияПриПокупкеШтук) Тогда
					СтруктураДанных.Вставить("group_sale_qty", Выборка.АкцияПриПокупкеШтук);
				КонецЕсли;
			КонецЕсли;
			
			МассивШтрихкодов = Новый Массив;
			Пока Выборка.СледующийПоЗначениюПоля("Штрихкод") Цикл
				МассивШтрихкодов.Добавить(Выборка.Штрихкод);
			КонецЦикла;
			СтруктураДанных.Вставить("code", МассивШтрихкодов);
			
			Остаток = 0;
			НайденныеСтроки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар, id_tt", Выборка.Номенклатура, Выборка.id_TT));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Остаток = НайденныеСтроки[0].Остаток;
			КонецЕсли;
			СтруктураДанных.Вставить("stock", Макс(0, Остаток));
			
			МассивТоваров.Добавить(СтруктураДанных);
		КонецЦикла;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("json");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайла);
		ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
		ЗаписьJSON.Закрыть();
		
		НовСтр = ФайлыДляОтправки.Добавить();
		НовСтр.ФайлИсточник = ИмяФайла;
		НовСтр.ФайлПриемник = "/igooods_vkusvill/" + КаталогТекущаяДата + "/" + Формат(Выборка.НомерТочки, "ЧГ=0") + ".json";
	КонецЦикла;
	
	Если ПолнаяВыгрузка Тогда
		// выгружаем общие данные
		Выборка = Результаты[7].Выбрать();
		МассивТоваров = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
			// удаление тегов и комментариев
			ОписаниеСтрока = СокрЛП(Выборка.Описание);
			НомерОткр = Найти(ОписаниеСтрока, "<");
			НомерЗакр = Найти(ОписаниеСтрока, ">");
			Пока НомерОткр > 0 И НомерЗакр > 0 Цикл
				ОписаниеСтрока = Сред(ОписаниеСтрока, 1, НомерОткр - 1) + Сред(ОписаниеСтрока, НомерЗакр + 1);
				НомерОткр = Найти(ОписаниеСтрока, "<");
				НомерЗакр = Найти(ОписаниеСтрока, ">");
			КонецЦикла;
			НомерОткр = Найти(ОписаниеСтрока, "***");
			Если НомерОткр > 0 Тогда
				ОписаниеСтрока = СокрЛП(Лев(ОписаниеСтрока, НомерОткр - 1));
			КонецЕсли;
			ОписаниеСтрока = СокрЛП(СтрЗаменить(ОписаниеСтрока, "&nbsp;", Символы.ПС));
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("id", Формат(Выборка.id_tov, "ЧН=0; ЧГ=0"));
			СтруктураДанных.Вставить("type", Выборка.ТипТовара);
			СтруктураДанных.Вставить("name", СокрЛП(Выборка.Наименование));
			//+++АК ILIK 2018.11.23 ИП-00019776.01
			СтруктураДанных.Вставить("weight", Выборка.ВесУпаковки);
			СтруктураДанных.Вставить("packtype", СокрЛП(Выборка.ТипУпаковки));
			СтруктураДанных.Вставить("nopack", Выборка.БезУпаковки);
			//---АК ILIK
			СтруктураДанных.Вставить("category", СокрЛП(Выборка.ГруппаНоменклатуры));
			СтруктураДанных.Вставить("description", ОписаниеСтрока);
			СтруктураДанных.Вставить("nutrition", СокрЛП(Выборка.ПищеваяЦенность));
			СтруктураДанных.Вставить("composition", СокрЛП(Выборка.Состав));
			СтруктураДанных.Вставить("country", ?(ЗначениеЗаполнено(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОвощи), СокрЛП(Выборка.СтранаОбщая)));
			СтруктураДанных.Вставить("vat", Выборка.СтавкаНДС);
			СтруктураДанных.Вставить("expire_at", СокрЛП(Выборка.СрокГодности));
			
			МассивШтрихкодов = Новый Массив;
			Пока Выборка.СледующийПоЗначениюПоля("Штрихкод") Цикл
				МассивШтрихкодов.Добавить(Выборка.Штрихкод);
			КонецЦикла;
			СтруктураДанных.Вставить("code", МассивШтрихкодов);
				
			МассивТоваров.Добавить(СтруктураДанных);
		КонецЦикла;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("json");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайла);
		ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
		ЗаписьJSON.Закрыть();
			
		НовСтр = ФайлыДляОтправки.Добавить();
		НовСтр.ФайлИсточник = ИмяФайла;
		НовСтр.ФайлПриемник = "/igooods_vkusvill/master/master.json";
	
		Попытка
			// выгрузка изображений
			Выборка = Результаты[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				УникальныйИдентификаторТовара = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				ВыборкаДетали = Выборка.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					ИмяФайлаИсточник = КаталогКартинок + УникальныйИдентификаторТовара + "_" + Строка(ВыборкаДетали.КлючСтроки) + ?(Лев(ВыборкаДетали.Расширение, 1) = ".", "", ".") + ВыборкаДетали.Расширение;
					ФайлИсточник = Новый Файл(ИмяФайлаИсточник);
					Если ФайлИсточник.Существует() Тогда
						ИмяФайлаПолучатель = "/igooods_vkusvill/images/" + Формат(ВыборкаДетали.id_tov, "ЧН=0; ЧГ=0") + "/" + Формат(ВыборкаДетали.ИД, "ЧН=0; ЧГ=0") + ?(ВыборкаДетали.ЭтоОсновноеИзображение, "_main", "") + ?(Лев(ВыборкаДетали.Расширение, 1) = ".", "", ".") + ВыборкаДетали.Расширение;
						СтрокаКартинкаНаСервере = КартинкиНаСервере.Найти(ИмяФайлаПолучатель, "Имя");
						Если СтрокаКартинкаНаСервере = Неопределено Или СтрокаКартинкаНаСервере.Размер <> ФайлИсточник.Размер() Тогда
							session.PutFiles(ИмяФайлаИсточник, ИмяФайлаПолучатель);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Исключение
			ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в IGooods", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось передать файл на SFTP-сервер. " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Для Каждого Стр Из ФайлыДляОтправки Цикл
			session.PutFiles(Стр.ФайлИсточник, Стр.ФайлПриемник);
			УдалитьФайлы(Стр.ФайлИсточник);
		КонецЦикла;
		
		session.Dispose();
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки в IGooods", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось передать файл на SFTP-сервер. " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

//mind 2017-10-19 механизм загрузки поставки рекламных материалов на магазины в спец регистр остатков рекламных материалов по магазинам
Процедура ЗагрузкаПоставокРекламныхМатериаловНаМагазинахВРегистр(НачинатьСДаты = Неопределено) Экспорт
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	Если НачинатьСДаты = Неопределено Тогда
		ДатаОбработки = НачалоДня(ТекущаяДата() - 86400*2);
	Иначе
		ДатаОбработки = НачалоДня(НачинатьСДаты);
	КонецЕсли;	
	Пока ДатаОбработки <= ТекущаяДата() Цикл
		ТабДанные = Новый ТаблицаЗначений();
		ТабДанные.Колонки.Добавить("ДокЗаявка"	, Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРекламныеМатериалы"));
		ТабДанные.Колонки.Добавить("Расходник"	, Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
		ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТабДанные.Колонки.Добавить("Поступило"			, Новый ОписаниеТипов("Число"));
		
		ТекстЗапроса = "IF OBJECT_ID('tempdb..#ls') IS NOT NULL DROP Table #ls
						|SELECT 
						|	TD.ShopNo_rep as ShopNo, TD.id_doc
						|	,TD.id_tov
						|	,SUM(CASE WHEN TD.operation_type = 400 THEN TD.quantity ELSE TD.quantity * -1 END) post
						|INTO #ls	
						|FROM [SMS_REPL].[dbo].[TD_move] (nolock) as TD
	                    |
						|where TD.closedate between " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаОбработки)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаОбработки)) + " and TD.operation_type in (400, 401) and TD.confirm_type = 1
						|
						|GROUP BY 
						|	TD.ShopNo_rep, TD.id_doc
						|	,TD.id_tov
						|	
						|CREATE INDEX index_ShopNo
						|ON #ls(ShopNo)
						|
						|CREATE INDEX index_id_tov
						|ON #ls(id_tov)
						|
						|SELECT 
						|	UINTT._Fld4946 as TTUID
						|	,UINTov._Fld4946 as TovarUID
						|	,DTT.post post
						|	,Cast(DTT.id_doc as nvarchar(36)) id_doc
						|	
						|FROM #ls DTT (nolock) 
						|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON DTT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
						|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 TovSpr (nolock) ON DTT.id_tov = TovSpr._Fld760
						|LEFT OUTER JOIN IzbenkaFin.dbo._Reference42 TTSpr (nolock) ON DTT.ShopNo = TTSpr._Fld2756
						|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON TTSpr._Fld758 = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
						|WHERE TovSpr._Fld6851 = 1 and TTSpr._Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22
	                    |order by TTUID
						|";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабДанные.Добавить();
				Если Rs.Fields("TovarUID").Value <> NULL Тогда
					СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
				КонецЕсли;
				Если Rs.Fields("TTUID").Value <> NULL Тогда
					СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
				КонецЕсли;
				СтрокаДоб.Поступило = Rs.Fields("post").Value;
				ДокРасход = Документы.РасходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("id_doc").Value));
				СтрокаДоб.Расходник = ДокРасход;
				
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ЗапросКеш = Новый Запрос();
		ЗапросКеш.УстановитьПараметр("ДокиРасход", ТабДанные.ВыгрузитьКолонку("Расходник"));
		ЗапросКеш.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
		ЗапросКеш.Текст = "ВЫБРАТЬ
		                  |	РасходныйОрдерСклад.Ссылка,
		                  |	РасходныйОрдерСклад.Основание
		                  |ИЗ
		                  |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		                  |ГДЕ
		                  |	РасходныйОрдерСклад.Ссылка В(&ДокиРасход)
		                  |;
		                  |
		                  |////////////////////////////////////////////////////////////////////////////////
		                  |ВЫБРАТЬ
		                  |	КорректировкаЗаписейРегистровНакопления.Ссылка
		                  |ИЗ
		                  |	Документ.КорректировкаЗаписейРегистровНакопления КАК КорректировкаЗаписейРегистровНакопления
		                  |ГДЕ
		                  |	НАЧАЛОПЕРИОДА(КорректировкаЗаписейРегистровНакопления.Дата, ДЕНЬ) = &ДатаОбработки
		                  |	И КорректировкаЗаписейРегистровНакопления.СпецПризнакДокумента = 1";
		
		Результаты = ЗапросКеш.ВыполнитьПакет();
		ТабКеш = Результаты[0].Выгрузить();
		Для Каждого СтрокаКеш Из ТабКеш Цикл
			СтрокиДанные = ТабДанные.НайтиСтроки(Новый Структура("Расходник", СтрокаКеш.Ссылка));
			Для Каждого СтрокаДанные Из СтрокиДанные Цикл
				СтрокаДанные.ДокЗаявка = СтрокаКеш.Основание;
			КонецЦикла;
		КонецЦикла;	
		
		ВыборкаДок = Результаты[1].Выбрать();
		Если ВыборкаДок.Следующий() Тогда
			ДокОб = ВыборкаДок.Ссылка.ПолучитьОбъект();
		Иначе
			ДокОб = Документы.КорректировкаЗаписейРегистровНакопления.СоздатьДокумент();
		КонецЕсли;
		ДокОб.СпецПризнакДокумента = 1;
		ДокОб.Дата = ДатаОбработки;
		ДокОб.ТаблицаРегистровНакопления.Очистить();
		СтрокаДоб = ДокОб.ТаблицаРегистровНакопления.Добавить();
		СтрокаДоб.Имя = "РекламныеМатериалыВМагазинах";
		СтрокаДоб.Представление = "Рекламные материалы в магазинах";
		Для Каждого СтрокаТаб Из ТабДанные Цикл
			Движение = ДокОб.Движения.РекламныеМатериалыВМагазинах.ДобавитьПриход();
			Движение.Период = ДатаОбработки;
			Движение.Магазин = СтрокаТаб.ТТ;
			Движение.Номенклатура = СтрокаТаб.Номенклатура;
			Движение.Количество = СтрокаТаб.Поступило;
			Движение.Заявка = СтрокаТаб.ДокЗаявка;
		КонецЦикла;	
		
		ДокОб.Комментарий = "Формирование прихода по спец регистру рекламных материалов в магазинах";
		Если НЕ ДокОб.ЭтоНовый() ИЛИ ДокОб.Движения.РекламныеМатериалыВМагазинах.Количество() > 0 Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
		
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры

Процедура ЗагрузкаПоставокРекламныхМатериаловНаМагазинахВРегистр_РеглЗадание() Экспорт
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ДатаОбработки = НачалоДня(ТекущаяДата() - 86400);
	Пока ДатаОбработки <= ТекущаяДата() Цикл
		ТабДанные = Новый ТаблицаЗначений();
		ТабДанные.Колонки.Добавить("ДокЗаявка"	, Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРекламныеМатериалы"));
		ТабДанные.Колонки.Добавить("Расходник"	, Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
		ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТабДанные.Колонки.Добавить("Поступило"			, Новый ОписаниеТипов("Число"));
		
		ТекстЗапроса = "IF OBJECT_ID('tempdb..#ls') IS NOT NULL DROP Table #ls
						|SELECT 
						|	TD.ShopNo_rep as ShopNo, TD.id_doc
						|	,TD.id_tov
						|	,SUM(CASE WHEN TD.operation_type = 400 THEN TD.quantity ELSE TD.quantity * -1 END) post
						|INTO #ls	
						|FROM [SMS_REPL].[dbo].[TD_move] (nolock) as TD
	                    |
						|where TD.closedate between " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаОбработки)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаОбработки)) + " and TD.operation_type in (400, 401) and TD.confirm_type = 1
						|
						|GROUP BY 
						|	TD.ShopNo_rep, TD.id_doc
						|	,TD.id_tov
						|	
						|CREATE INDEX index_ShopNo
						|ON #ls(ShopNo)
						|
						|CREATE INDEX index_id_tov
						|ON #ls(id_tov)
						|
						|SELECT 
						|	UINTT._Fld4946 as TTUID
						|	,UINTov._Fld4946 as TovarUID
						|	,DTT.post post
						|	,Cast(DTT.id_doc as nvarchar(36)) id_doc
						|	
						|FROM #ls DTT (nolock) 
						|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON DTT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
						|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 TovSpr (nolock) ON DTT.id_tov = TovSpr._Fld760
						|LEFT OUTER JOIN IzbenkaFin.dbo._Reference42 TTSpr (nolock) ON DTT.ShopNo = TTSpr._Fld2756
						|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON TTSpr._Fld758 = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
						|WHERE TovSpr._Fld6851 = 1 and TTSpr._Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22
	                    |order by TTUID
						|";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабДанные.Добавить();
				Если Rs.Fields("TovarUID").Value <> NULL Тогда
					СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
				КонецЕсли;
				Если Rs.Fields("TTUID").Value <> NULL Тогда
					СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
				КонецЕсли;
				СтрокаДоб.Поступило = Rs.Fields("post").Value;
				ДокРасход = Документы.РасходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("id_doc").Value));
				СтрокаДоб.Расходник = ДокРасход;
				
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ЗапросКеш = Новый Запрос();
		ЗапросКеш.УстановитьПараметр("ДокиРасход", ТабДанные.ВыгрузитьКолонку("Расходник"));
		ЗапросКеш.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
		ЗапросКеш.Текст = "ВЫБРАТЬ
		                  |	РасходныйОрдерСклад.Ссылка,
		                  |	РасходныйОрдерСклад.Основание
		                  |ИЗ
		                  |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		                  |ГДЕ
		                  |	РасходныйОрдерСклад.Ссылка В(&ДокиРасход)
		                  |;
		                  |
		                  |////////////////////////////////////////////////////////////////////////////////
		                  |ВЫБРАТЬ
		                  |	КорректировкаЗаписейРегистровНакопления.Ссылка
		                  |ИЗ
		                  |	Документ.КорректировкаЗаписейРегистровНакопления КАК КорректировкаЗаписейРегистровНакопления
		                  |ГДЕ
		                  |	НАЧАЛОПЕРИОДА(КорректировкаЗаписейРегистровНакопления.Дата, ДЕНЬ) = &ДатаОбработки
		                  |	И КорректировкаЗаписейРегистровНакопления.СпецПризнакДокумента = 1";
		
		Результаты = ЗапросКеш.ВыполнитьПакет();
		ТабКеш = Результаты[0].Выгрузить();
		Для Каждого СтрокаКеш Из ТабКеш Цикл
			СтрокиДанные = ТабДанные.НайтиСтроки(Новый Структура("Расходник", СтрокаКеш.Ссылка));
			Для Каждого СтрокаДанные Из СтрокиДанные Цикл
				СтрокаДанные.ДокЗаявка = СтрокаКеш.Основание;
			КонецЦикла;
		КонецЦикла;	
		
		ВыборкаДок = Результаты[1].Выбрать();
		Если ВыборкаДок.Следующий() Тогда
			ДокОб = ВыборкаДок.Ссылка.ПолучитьОбъект();
		Иначе
			ДокОб = Документы.КорректировкаЗаписейРегистровНакопления.СоздатьДокумент();
		КонецЕсли;
		ДокОб.СпецПризнакДокумента = 1;
		ДокОб.Дата = ДатаОбработки;
		ДокОб.ТаблицаРегистровНакопления.Очистить();
		СтрокаДоб = ДокОб.ТаблицаРегистровНакопления.Добавить();
		СтрокаДоб.Имя = "РекламныеМатериалыВМагазинах";
		СтрокаДоб.Представление = "Рекламные материалы в магазинах";
		Для Каждого СтрокаТаб Из ТабДанные Цикл
			Движение = ДокОб.Движения.РекламныеМатериалыВМагазинах.ДобавитьПриход();
			Движение.Период = ДатаОбработки;
			Движение.Магазин = СтрокаТаб.ТТ;
			Движение.Номенклатура = СтрокаТаб.Номенклатура;
			Движение.Количество = СтрокаТаб.Поступило;
			Движение.Заявка = СтрокаТаб.ДокЗаявка;
		КонецЦикла;	
		
		ДокОб.Комментарий = "Формирование прихода по спец регистру рекламных материалов в магазинах";
		Если НЕ ДокОб.ЭтоНовый() ИЛИ ДокОб.Движения.РекламныеМатериалыВМагазинах.Количество() > 0 Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
		
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры

Процедура ЗагрузитьРейтингиТоваров() Экспорт
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.Текст = "ВЫБРАТЬ
	                  |	ХарактеристикиНоменклатуры.Ссылка,
	                  |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК Ид,
	                  |	ХарактеристикиНоменклатуры.Владелец КАК Товар
	                  |ИЗ
	                  |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                  |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	                  |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))";
	
	ТабКеш = ЗапросКеш.Выполнить().Выгрузить();
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT UINTov._Fld4946 as TovarUID
					|      ,RT.id_kontr
					|      ,MAX(RT.reiting_avg) reiting_avg
					|FROM [Reports].[dbo].[reiting_tov] as RT (nolock)
					|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON RT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
					|GROUP BY
					|	UINTov._Fld4946
					|      ,RT.id_kontr";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Номенклатура");
	ТабДанные.Колонки.Добавить("Характеристика");
	ТабДанные.Колонки.Добавить("Рейтинг");
	ТабДанные.Колонки.Добавить("ДатаОбновления");
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Ид = Rs.Fields("id_kontr").Value;
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			Характеристика = Неопределено;
			Если ЗначениеЗаполнено(Ид) Тогда
				СтрокиКеш = ТабКеш.НайтиСтроки(Новый Структура("Товар, Ид", Номенклатура, Ид));
				Если СтрокиКеш.Количество() = 0 Тогда
					rs.MoveNext();
					Продолжить;
				Иначе
					Характеристика = СтрокиКеш[0].Ссылка;
				КонецЕсли;	
			КонецЕсли;	
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.Номенклатура = Номенклатура;
			СтрокаДоб.Характеристика = Характеристика;
			СтрокаДоб.Рейтинг = Rs.Fields("reiting_avg").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ТабДанные.ЗаполнитьЗначения(ТекущаяДата(), "ДатаОбновления");
	Набор = РегистрыСведений.РейтингиТоваров.СоздатьНаборЗаписей();
	Набор.Загрузить(ТабДанные);
	Набор.Записать();
	
КонецПроцедуры	


//+++АК KIRN 2018.04.23 ИП-00018243
Процедура ЗагрузитьРейтингиТоваров_50(пДата = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(пДата) ТОгда
		пДата = ТекущаяДата();
	КонецЕсли;
	ПредДата = ДобавитьМесяц(пДата, -1);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТоварыСРейтингом.Номенклатура,
	               |	ТоварыСРейтингом.Номенклатура.id_tov КАК id_tov,
	               |	ТоварыСРейтингом.Рейтинг,
	               |	ТоварыСРейтингом.ДатаОбновления
	               |ИЗ
	               |	РегистрСведений.ТоварыСРейтингом КАК ТоварыСРейтингом
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ТоварыСРейтингом.Период, МЕСЯЦ) = &ДатаОбновления
	               |	И ТоварыСРейтингом.Рейтинг <> 0";

	Запрос.УстановитьПараметр("ДатаОбновления", НачалоМесяца(ПредДата));
	тзПредНом = Запрос.Выполнить().Выгрузить();
	мНом = тзПредНом.ВыгрузитьКолонку("id_tov");
	список_id_tov = ОбщиеПроцедуры.МассивЧиселВСтроку(мНом, ",");
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT top 50 UINTov._Fld4946 as TovarUID
					|    ,MAX(RT.reiting_avg) reiting_avg, MAX(date_update) date_update
					|FROM [Reports].[dbo].[reiting_tov] as RT (nolock)
					|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON RT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
					|where id_kontr is null 
					|"+?(мНом.Количество()=0,"","and RT.id_tov NOT IN ("+список_id_tov+")")+"
					|GROUP BY
					|	UINTov._Fld4946";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Номенклатура");
	ТабДанные.Колонки.Добавить("Период");
	ТабДанные.Колонки.Добавить("Рейтинг");
	ТабДанные.Колонки.Добавить("ДатаОбновления");
	ТабДанные.Колонки.Добавить("Комментарий");
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			//Ид = Rs.Fields("id_kontr").Value;
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.Номенклатура = Номенклатура;
			СтрокаДоб.Период = пДата;
			СтрокаДоб.Рейтинг = Rs.Fields("reiting_avg").Value;
			СтрокаДоб.ДатаОбновления = Rs.Fields("date_update").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	//ТабДанные.ЗаполнитьЗначения(пДата, "ДатаОбновления");
	Для Каждого Стр из тзПредНом Цикл
		НС = ТабДанные.Добавить();
		НС.Номенклатура = Стр.Номенклатура;
		НС.Период = пДата;
		НС.Комментарий = "Обнуление рейтинга";
		НС.Рейтинг = 0;
	КонецЦикла;

	Набор = РегистрыСведений.ТоварыСРейтингом.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Значение = НачалоМЕсяца(пДата);
	Набор.Отбор.Период.Использование = Истина;
	Набор.Прочитать();
	Набор.Загрузить(ТабДанные);
	Набор.Записать();
	
КонецПроцедуры	

//+++АК KIRN 2018.05.17 ИП-00018237
Функция СозданиеИнвентаризацииЗаблокировано() Экспорт
	ЗапросSQL = "select jobs.dbo.Get_Flag_Disable_Value('Inventar') as result";
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	rs = ADOСоединение.Execute(ЗапросSQL);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;

	флагБлокировки = Ложь;
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			флагБлокировки = Булево(Rs.Fields("result").Value);
		КонецЕСли;
	Исключение
	КонецПопытки;
	Возврат флагБлокировки;
КонецФункции

//+++АК MIND 2017.12.12 полностью меняется механизм ценников, теперь в системе будут готовые макеты ценников и это регл задание для их переформирования
//в параметр ТоварыКПересчету можно передать массив товаров или один товар
Процедура ПодготовитьМакетыЦенников(ТоварыКПересчету = Неопределено, ПринудительноеФормирование = Ложь) Экспорт
	
	МассивТовары = Новый Массив();
	Если ТипЗнч(ТоварыКПересчету) = Тип("СправочникСсылка.Номенклатура") Тогда
		МассивТовары.Добавить(ТоварыКПересчету);
	ИначеЕсли ТипЗнч(ТоварыКПересчету) = Тип("Массив") Тогда
		МассивТовары = ТоварыКПересчету;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата"			, НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Товары"				, МассивТовары);
	Запрос.УстановитьПараметр("ЕстьОтборПоТовару"	, МассивТовары.Количество() > 0);
	Запрос.УстановитьПараметр("ПринудительноеФормирование", ПринудительноеФормирование);
	Запрос.УстановитьПараметр("УпаковкаДляЦенника"	, ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("УпаковкаДляЦенника"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|ГДЕ
	|	(НоменклатураСпр.Ссылка В (&Товары)
	|			ИЛИ &ЕстьОтборПоТовару = ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураФишкиНаЦенник.Ссылка КАК Ссылка,
	|	НоменклатураФишкиНаЦенник.НомерСтроки КАК НомерСтроки,
	|	НоменклатураФишкиНаЦенник.Фишка.Наименование КАК ФишкаНаименование,
	|	НоменклатураФишкиНаЦенник.Фишка.Пиктограмма КАК ФишкаПиктограмма,
	|	НоменклатураФишкиНаЦенник.Фишка КАК Фишка
	|ПОМЕСТИТЬ ВТ_Фишки
	|ИЗ
	|	Справочник.Номенклатура.ФишкиНаЦенник КАК НоменклатураФишкиНаЦенник
	|ГДЕ
	|	НоменклатураФишкиНаЦенник.Ссылка В
	|			(ВЫБРАТЬ
	|				Таб.Номенклатура
	|			ИЗ
	|				ВТ_Товары КАК Таб)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	МАКСИМУМ(СправочникНоменклатура.Наименование) КАК Наименование,
	|	МАКСИМУМ(СправочникНоменклатура.БазоваяЕдиницаИзмерения.Наименование) КАК ЕдИзмеренияНаименование,
	|	МАКСИМУМ(СправочникНоменклатура.ПозицияРазделителяДляЦенника) КАК ПозицияРазделителяДляЦенника,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ТекущаяДата МЕЖДУ СправочникНоменклатура.ДатаНачалаВыводаНаСинийЦенник И СправочникНоменклатура.ДатаОкончанияВыводаНаСинийЦенник
	|				ТОГДА СправочникНоменклатура.ТекстВместоФишки
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ТекстВместоФишки,
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияСвойствОбъектов.Свойство = &УпаковкаДляЦенника
	|				ТОГДА ЗначенияСвойствОбъектов.Значение
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК УпаковкаДляЦенника,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения)
	|				ТОГДА ЗначенияСвойствОбъектов.Значение
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК СтранаПроисхождения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления > 0
	|				ТОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления
	|			ИНАЧЕ ХарактеристикиНоменклатуры.СрокГодности
	|		КОНЕЦ) КАК СрокГодности,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления > 0
	|				ТОГДА ЕСТЬNULL(ХарактеристикиНоменклатуры.ТипСрокаГодности_ПослеИзготовления.ПараметрыПрописиНаРусском, """")
	|			ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.ТипСрокаГодности.ПараметрыПрописиНаРусском, """")
	|		КОНЕЦ) КАК ТипСрокаГодностиПараметрыПрописиНаРусском,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления > 0
	|				ТОГДА ХарактеристикиНоменклатуры.ТипСрокаГодности_ПослеИзготовления
	|			ИНАЧЕ ХарактеристикиНоменклатуры.ТипСрокаГодности
	|		КОНЕЦ) КАК ТипСрокаГодности,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления > 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.СрокГодностиНеограничен, ЛОЖЬ)
	|		КОНЕЦ) КАК СрокНеограничен,
	|	МАКСИМУМ(СправочникНоменклатура.ДатаНачалаВыводаНаСинийЦенник) КАК ДатаНачалаВыводаНаСинийЦенник,
	|	МАКСИМУМ(СправочникНоменклатура.ДатаОкончанияВыводаНаСинийЦенник) КАК ДатаОкончанияВыводаНаСинийЦенник
	|ПОМЕСТИТЬ ВТ_ЧастьДанных1
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|					&ТекущаяДата,
	|					ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|						И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|						И Номенклатура В
	|							(ВЫБРАТЬ
	|								Таб.Номенклатура
	|							ИЗ
	|								ВТ_Товары КАК Таб)) КАК ЦеныНоменклатурыСрезПоследних) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|		ПО СправочникНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				Таб.Номенклатура
	|			ИЗ
	|				ВТ_Товары КАК Таб)
	|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЧастьДанных1.Номенклатура КАК Номенклатура,
	|	ВТ_ЧастьДанных1.Характеристика КАК Характеристика,
	|	ВТ_ЧастьДанных1.Наименование,
	|	ВТ_ЧастьДанных1.ПозицияРазделителяДляЦенника,
	|	ВТ_ЧастьДанных1.ТекстВместоФишки,
	|	ВТ_ЧастьДанных1.Цена,
	|	ВТ_ЧастьДанных1.УпаковкаДляЦенника,
	|	ВТ_ЧастьДанных1.СтранаПроисхождения,
	|	ВТ_ЧастьДанных1.СрокГодности,
	|	ВТ_ЧастьДанных1.ТипСрокаГодности,
	|	ВТ_ЧастьДанных1.ТипСрокаГодностиПараметрыПрописиНаРусском,
	|	ВТ_ЧастьДанных1.СрокНеограничен,
	|	ВЗ_Фишка1.ФишкаНаименование КАК ФишкаНаименование1,
	|	ВЗ_Фишка1.ФишкаПиктограмма КАК ФишкаПиктограмма1,
	|	ВЗ_Фишка2.ФишкаНаименование КАК ФишкаНаименование2,
	|	ВЗ_Фишка2.ФишкаПиктограмма КАК ФишкаПиктограмма2,
	|	ЕСТЬNULL(ВЗ_Фишка1.Фишка, ЗНАЧЕНИЕ(Справочник.ФишкиКратко.ПустаяСсылка)) КАК ФишкаКратко1,
	|	ЕСТЬNULL(ВЗ_Фишка2.Фишка, ЗНАЧЕНИЕ(Справочник.ФишкиКратко.ПустаяСсылка)) КАК ФишкаКратко2,
	|	ЕСТЬNULL(РейтингиТоваров.Рейтинг, ЕСТЬNULL(ВЗ_ОбщийРейтинг.Рейтинг, 0)) КАК Рейтинг,
	|	ВТ_ЧастьДанных1.ДатаНачалаВыводаНаСинийЦенник,
	|	ВТ_ЧастьДанных1.ДатаОкончанияВыводаНаСинийЦенник,
	|	ВТ_ЧастьДанных1.ЕдИзмеренияНаименование
	|ПОМЕСТИТЬ ВТ_ПолныеДанные
	|ИЗ
	|	ВТ_ЧастьДанных1 КАК ВТ_ЧастьДанных1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Фишки КАК ВЗ_Фишка1
	|		ПО ВТ_ЧастьДанных1.Номенклатура = ВЗ_Фишка1.Ссылка И ВЗ_Фишка1.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Фишки КАК ВЗ_Фишка2
	|		ПО ВТ_ЧастьДанных1.Номенклатура = ВЗ_Фишка2.Ссылка И ВЗ_Фишка1.НомерСтроки = 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РейтингиТоваров КАК РейтингиТоваров
	|		ПО ВТ_ЧастьДанных1.Номенклатура = РейтингиТоваров.Номенклатура
	|			И ВТ_ЧастьДанных1.Характеристика = РейтингиТоваров.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РейтингиТоваров.Рейтинг КАК Рейтинг,
	|			РейтингиТоваров.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.РейтингиТоваров КАК РейтингиТоваров
	|		ГДЕ
	|			РейтингиТоваров.Номенклатура В
	|					(ВЫБРАТЬ
	|						Таб.Номенклатура
	|					ИЗ
	|						ВТ_Товары КАК Таб)
	|			И РейтингиТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ВЗ_ОбщийРейтинг
	|		ПО ВТ_ЧастьДанных1.Номенклатура = ВЗ_ОбщийРейтинг.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтриховыеКоды.Номенклатура,
	|	ШтриховыеКоды.Характеристика,
	|	ШтриховыеКоды.ЛожныйШтрихКод
	|ИЗ
	|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|ГДЕ
	|	ШтриховыеКоды.Номенклатура В
	|			(ВЫБРАТЬ
	|				Таб.Номенклатура
	|			ИЗ
	|				ВТ_Товары КАК Таб)
	|	И ШтриховыеКоды.ЛожныйШтрихКод <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПолныеДанные.Номенклатура КАК Номенклатура,
	|	ВТ_ПолныеДанные.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_КПереформированию
	|ИЗ
	|	ВТ_ПолныеДанные КАК ВТ_ПолныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенникиГотовыеКПечати КАК ЦенникиГотовыеКПечати
	|		ПО ВТ_ПолныеДанные.Номенклатура = ЦенникиГотовыеКПечати.Номенклатура
	|			И ВТ_ПолныеДанные.Характеристика = ЦенникиГотовыеКПечати.Характеристика
	|ГДЕ
	|	(&ПринудительноеФормирование = ИСТИНА
	|			ИЛИ ВТ_ПолныеДанные.Наименование <> ЕСТЬNULL(ЦенникиГотовыеКПечати.НаименованиеТовара, """")
	|			ИЛИ ВТ_ПолныеДанные.ПозицияРазделителяДляЦенника <> ЕСТЬNULL(ЦенникиГотовыеКПечати.ПозицияРазделителя, 0)
	|			ИЛИ ВТ_ПолныеДанные.ТекстВместоФишки <> ЕСТЬNULL(ЦенникиГотовыеКПечати.ДопТекст, """")
	|			ИЛИ ВТ_ПолныеДанные.Цена <> ЕСТЬNULL(ЦенникиГотовыеКПечати.Цена, """")
	|			ИЛИ ВТ_ПолныеДанные.СтранаПроисхождения <> ЕСТЬNULL(ЦенникиГотовыеКПечати.Страна, """")
	|			ИЛИ ВТ_ПолныеДанные.СрокГодности <> ЕСТЬNULL(ЦенникиГотовыеКПечати.СрокГодностиЧисло, 0)
	|			ИЛИ ВТ_ПолныеДанные.ТипСрокаГодности <> ЕСТЬNULL(ЦенникиГотовыеКПечати.ТипСрокаГодности, """")
	|			ИЛИ ВТ_ПолныеДанные.ФишкаКратко1 <> ЕСТЬNULL(ЦенникиГотовыеКПечати.ФишкаКартинка1, 0)
	|			ИЛИ ВТ_ПолныеДанные.ФишкаКратко2 <> ЕСТЬNULL(ЦенникиГотовыеКПечати.ФишкаКартинка2, 0)
	|			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(ЦенникиГотовыеКПечати.ДатаПоследнегоПереформирования, ДАТАВРЕМЯ(2017, 1, 1)), &ТекущаяДата, ДЕНЬ) >= 7)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПолныеДанные.Номенклатура,
	|	ВТ_ПолныеДанные.Характеристика,
	|	ВТ_ПолныеДанные.Наименование,
	|	ВТ_ПолныеДанные.ПозицияРазделителяДляЦенника,
	|	ВТ_ПолныеДанные.ТекстВместоФишки,
	|	ВТ_ПолныеДанные.Цена,
	|	ВТ_ПолныеДанные.УпаковкаДляЦенника,
	|	ВТ_ПолныеДанные.СтранаПроисхождения,
	|	ВТ_ПолныеДанные.СрокГодности,
	|	ВТ_ПолныеДанные.ТипСрокаГодности,
	|	ВТ_ПолныеДанные.ТипСрокаГодностиПараметрыПрописиНаРусском,
	|	ВТ_ПолныеДанные.СрокНеограничен,
	|	ВТ_ПолныеДанные.ФишкаНаименование1,
	|	ВТ_ПолныеДанные.ФишкаПиктограмма1,
	|	ВТ_ПолныеДанные.ФишкаНаименование2,
	|	ВТ_ПолныеДанные.ФишкаПиктограмма2,
	|	ВТ_ПолныеДанные.ФишкаКратко1,
	|	ВТ_ПолныеДанные.ФишкаКратко2,
	|	ВТ_ПолныеДанные.Рейтинг,
	|	ВТ_ПолныеДанные.ДатаНачалаВыводаНаСинийЦенник,
	|	ВТ_ПолныеДанные.ДатаОкончанияВыводаНаСинийЦенник,
	|	ВТ_ПолныеДанные.ЕдИзмеренияНаименование
	|ИЗ
	|	ВТ_ПолныеДанные КАК ВТ_ПолныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КПереформированию КАК ВТ_КПереформированию
	|		ПО ВТ_ПолныеДанные.Номенклатура = ВТ_КПереформированию.Номенклатура
	|			И ВТ_ПолныеДанные.Характеристика = ВТ_КПереформированию.Характеристика";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабЛожныеШК = Результаты[4].Выгрузить();
	ТабЛожныеШК.Индексы.Добавить("Номенклатура, Характеристика");
	ВыборкаПереформирование = Результаты[6].Выбрать();
	Пока ВыборкаПереформирование.Следующий() Цикл
		СтруктураПолейДляЦенника = Новый Структура("СрокГодности, УпаковкаДляЦенника, Цена, СтранаПроисхождения, ФишкаКратко1, ФишкаКратко2
													|, ДатаНачалаВыводаНаСинийЦенник, ДатаОкончанияВыводаНаСинийЦенник, ТекстВместоФишки, ЕдИзмеренияНаименование
													|, Наименование, ПозицияРазделителяДляЦенника, ФишкаНаименование1, ФишкаНаименование2, ФишкаПиктограмма1, ФишкаПиктограмма2",
													"", "", 0, "", "", ""
													, '00010101', '00010101', "", ""
													, "", 0, "", "", Неопределено, Неопределено);
													
		Если ЗначениеЗаполнено(ВыборкаПереформирование.СрокГодности) Тогда
			СрокГодности 	= ЧислоПрописью(ВыборкаПереформирование.СрокГодности, "НД=Ложь", ВыборкаПереформирование.ТипСрокаГодностиПараметрыПрописиНаРусском);
			СрокГодности 	= СтрЗаменить(СрокГодности, " ", Символы.ПС);
			Если СтрЧислоСтрок(СрокГодности) > 0 Тогда
				СрокГодности = Формат(ВыборкаПереформирование.СрокГодности, "ЧГ=0") + " " + СтрПолучитьСтроку(СрокГодности, СтрЧислоСтрок(СрокГодности));
			КонецЕсли;
		КонецЕсли;	
		Если ВыборкаПереформирование.СрокНеограничен = Истина Тогда
			СрокГодности = "Не ограничен";
		КонецЕсли;
		СтруктураПолейДляЦенника.Вставить("СрокГодности", СрокГодности);
		СтруктураПолейДляЦенника.Вставить("УпаковкаДляЦенника", ВыборкаПереформирование.УпаковкаДляЦенника);
		СтруктураПолейДляЦенника.Вставить("Цена", ВыборкаПереформирование.Цена);
		СтруктураПолейДляЦенника.Вставить("СтранаПроисхождения", ВыборкаПереформирование.СтранаПроисхождения);
		
		СтруктураПолейДляЦенника.Вставить("ФишкаКратко1", ВыборкаПереформирование.ФишкаКратко1);
		СтруктураПолейДляЦенника.Вставить("ФишкаКратко2", ВыборкаПереформирование.ФишкаКратко2);
		СтруктураПолейДляЦенника.Вставить("ДатаНачалаВыводаНаСинийЦенник", ВыборкаПереформирование.ДатаНачалаВыводаНаСинийЦенник);
		СтруктураПолейДляЦенника.Вставить("ДатаОкончанияВыводаНаСинийЦенник", ВыборкаПереформирование.ДатаОкончанияВыводаНаСинийЦенник);
		СтруктураПолейДляЦенника.Вставить("ТекстВместоФишки", ВыборкаПереформирование.ТекстВместоФишки);
		СтруктураПолейДляЦенника.Вставить("ЕдИзмеренияНаименование", ВыборкаПереформирование.ЕдИзмеренияНаименование);
		СтруктураПолейДляЦенника.Вставить("Наименование", ВыборкаПереформирование.Наименование);
		СтруктураПолейДляЦенника.Вставить("ПозицияРазделителяДляЦенника", ВыборкаПереформирование.ПозицияРазделителяДляЦенника);
		СтруктураПолейДляЦенника.Вставить("ФишкаНаименование1", ВыборкаПереформирование.ФишкаНаименование1);
		СтруктураПолейДляЦенника.Вставить("ФишкаНаименование2", ВыборкаПереформирование.ФишкаНаименование2);
		СтруктураПолейДляЦенника.Вставить("ФишкаПиктограмма1", ВыборкаПереформирование.ФишкаПиктограмма1);
		СтруктураПолейДляЦенника.Вставить("ФишкаПиктограмма2", ВыборкаПереформирование.ФишкаПиктограмма2);
		
		СтруктураПолейДляЦенника.Вставить("Рейтинг", ВыборкаПереформирование.Рейтинг);
		
		СтрокиДробныйЦенник = ТабЛожныеШК.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", ВыборкаПереформирование.Номенклатура, ВыборкаПереформирование.Характеристика));
		Если СтрокиДробныйЦенник.Количество() > 0 Тогда
			СтруктураПолейДляЦенника.Вставить("ЛожныйШтрихКод", СтрокиДробныйЦенник[0].ЛожныйШтрихКод);
		Иначе
			СтруктураПолейДляЦенника.Вставить("ЛожныйШтрихКод", "");
		КонецЕсли;
		
		Для н = 0 По 3 Цикл
			СтруктураВыведенногоЦенника = Неопределено;
			Если н = 0 Тогда
				Область = Справочники.Номенклатура.ПолучитьЦенник_80_60(ВыборкаПереформирование.Номенклатура, ВыборкаПереформирование.Характеристика,,,, СтруктураВыведенногоЦенника, Истина,,, Ложь, СтруктураПолейДляЦенника);
			ИначеЕсли н = 1 Тогда
				Область = Справочники.Номенклатура.ПолучитьЦенник_80_60(ВыборкаПереформирование.Номенклатура, ВыборкаПереформирование.Характеристика,,,, СтруктураВыведенногоЦенника, Истина,,, Истина, СтруктураПолейДляЦенника);
			ИначеЕсли н = 2 Тогда
				Область = Справочники.Номенклатура.ПолучитьЦенник_80_60(ВыборкаПереформирование.Номенклатура, ВыборкаПереформирование.Характеристика,,,, СтруктураВыведенногоЦенника, Ложь,,, Ложь, СтруктураПолейДляЦенника);	
			ИначеЕсли н = 3 Тогда
				Область = Справочники.Номенклатура.ПолучитьЦенник_80_60(ВыборкаПереформирование.Номенклатура, ВыборкаПереформирование.Характеристика,,,, СтруктураВыведенногоЦенника, Ложь,,, Истина, СтруктураПолейДляЦенника);		
			КонецЕсли;	
			Запись = РегистрыСведений.ЦенникиГотовыеКПечати.СоздатьМенеджерЗаписи();
			Запись.Номенклатура = ВыборкаПереформирование.Номенклатура;
			Запись.Характеристика = ВыборкаПереформирование.Характеристика;
			Запись.ВидЦенника = н;
			Запись.Ценник = Новый ХранилищеЗначения(Область, Новый СжатиеДанных(9));
			Запись.Цена = ВыборкаПереформирование.Цена;
			Запись.Страна = ВыборкаПереформирование.СтранаПроисхождения;
			Запись.СрокГодностиЧисло = ВыборкаПереформирование.СрокГодности;
			Запись.ДопТекст = ВыборкаПереформирование.ТекстВместоФишки;
			Запись.НаименованиеТовара = ВыборкаПереформирование.Наименование;
			Запись.ПозицияРазделителя = ВыборкаПереформирование.ПозицияРазделителяДляЦенника;
			Запись.Вес = СтруктураВыведенногоЦенника.Вес;
			Запись.ФишкаКартинка1 = ВыборкаПереформирование.ФишкаКратко1;
			Запись.ФишкаКартинка2 = ВыборкаПереформирование.ФишкаКратко2;
			Запись.Рейтинг = ВыборкаПереформирование.Рейтинг;
			Запись.ТипСрокаГодности = ВыборкаПереформирование.ТипСрокаГодности;
			Запись.СрокГодности = СтруктураВыведенногоЦенника.СрокГодности;
			Запись.ДатаПоследнегоПереформирования = ТекущаяДата();
			Запись.Записать();
		КонецЦикла;	
			
	КонецЦикла;	
	
КонецПроцедуры	

//Выполняет вызов функции которая формирует массив структур параметров 
// (Подтверждение требуемых действий, справочника "Правила работы сотрудников")
//
Функция ПолучитьМассивПараметровОтображенияФормыКонтроля() Экспорт//АК mika 2017.12.16 ИП-00017045
	
	Возврат РегистрыСведений.ПравилаРаботыСотрудниковКонтроль.ПолучитьПараметрыОтображенияФормыКонтроля();

КонецФункции // ОткрытьФормуОтображенияПравилРаботыПользователей()

#Область ИП_00018238_01

//+++АК KOPA 2018.04.19 ИП-00018238.01
//+++АК ILIK 2018.07.16 ИП-00019094
//Функция ПолучитьВыборкуАкции_ДляВыгрузки(ТекДата, ИмяРеквизитаВыгрузки = "ВыгружатьОстаткиВИнстамарт") Экспорт 
Функция ПолучитьВыборкуАкции_ДляВыгрузки(ТекДата, СлужбаДоставки) Экспорт
//---АК ILIK

	Запрос = Новый Запрос;
	Запрос.Текст = 
	//+++АК ILIK 2018.05.31 ИП-00018649, 2018.06.01 ИП-00018849
	// тут был старый запрос, его удалил и переделал, т.к. он выдавал дубли
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТТоварныйАссортиментТочек
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			&ТекДата,
		|			Номенклатура.ВыгружатьНаСайт
		|				И НЕ Номенклатура.Выведена
		|				И НЕ Номенклатура.ПометкаУдаления
		//+++АК ILIK 2018.07.16 ИП-00019094
		|				И ТорговаяТочка В
        |					(ВЫБРАТЬ
        |						СлужбыКурьерскойДоставкиМагазинов.СтруктурнаяЕдиница
        |					ИЗ
        |						РегистрСведений.СлужбыКурьерскойДоставкиМагазинов КАК СлужбыКурьерскойДоставкиМагазинов
        |					ГДЕ
        |						СлужбыКурьерскойДоставкиМагазинов.СлужбаДоставки = &СлужбаДоставки)) КАК ТоварныйАссортиментТочекСрезПоследних
		//---АК ILIK
		|ГДЕ
		|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
		|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
		|	НоменклатураАкции.НазваниеАкции,
		|	НоменклатураАкции.ДатаНачала,
		|	НоменклатураАкции.ДатаОкончания,
		|	НоменклатураАкции.ПриПокупкеШтук,
		|	НоменклатураАкции.ДействуетЦена_Скидка,
		|	ПРЕДСТАВЛЕНИЕ(НоменклатураАкции.ТипСкидки),
		|	НоменклатураАкции.КомментарийНаЦенник,
		|	НоменклатураАкции.ТипСкидки.Порядок,
		|	НоменклатураАкции.ТипСкидки,
		|	ВЫБОР
		|		КОГДА НоменклатураАкции.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|			ТОГДА """"
		|		ИНАЧЕ НоменклатураАкции.ДействуетВМагазине
		|	КОНЕЦ КАК Магазин,
		|	ЕСТЬNULL(НоменклатураАкции.ДействуетВМагазине.Наименование, """") КАК МагазинНаименование,
		|	ЕСТЬNULL(НоменклатураАкции.ДействуетВМагазине.НомерТочки, """") КАК МагазинНомерТочки
		|ИЗ
		|	ВТТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Акции КАК НоменклатураАкции
		|		ПО ТоварныйАссортиментТочек.Номенклатура = НоменклатураАкции.Ссылка
		|			И (КОНЕЦПЕРИОДА(НоменклатураАкции.ДатаОкончания, ДЕНЬ) >= &ТекДата)
		|ИТОГИ ПО
		|	Номенклатура";
	//---АК ILIK
	
	//+++АК ILIK 2018.07.16 ИП-00019094
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружатьОстаткиВИнстамарт", ИмяРеквизитаВыгрузки);
	Запрос.УстановитьПараметр("СлужбаДоставки", СлужбаДоставки);
	//---АК ILIK
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Выборка;
КонецФункции//---АК KOPA

//+++АК KOPA 2018.04.19 ИП-00018238.01
Функция ДобавитьАкцииНоменклатуры(ДокументДом, УзелРодитель, Номенклатура, ВыборкаНоменклатура)
	ВыборкаНоменклатура.Сбросить();
		
	Если Не ВыборкаНоменклатура.НайтиСледующий(Новый Структура("Номенклатура", Номенклатура)) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ЭлементДом = ДокументДом.СоздатьЭлемент("discounts");//Список скидок	
	УзелРодитель.ДобавитьДочерний(ЭлементДом);
	
	ВыборкаАкции = ВыборкаНоменклатура.Выбрать();  
	
	Пока ВыборкаАкции.Следующий() Цикл
		ДобавитьАкциюНоменклатуры(ДокументДом, ЭлементДом, ВыборкаАкции);	
	КонецЦикла;
КонецФункции//---АК KOPA

//+++АК KOPA 2018.04.19 ИП-00018238.01
Процедура ДобавитьАкциюНоменклатуры(ДокументДом, Родитель, ДанныеАкции)		
	АкцияДом = ДокументДом.СоздатьЭлемент("discount");//Список скидок	
	Родитель.ДобавитьДочерний(АкцияДом);
		
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "НазваниеАкции", ДанныеАкции.НазваниеАкции);
	
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ДатаНачала", XMLСтрока(ДанныеАкции.ДатаНачала));
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ДатаОкончания", XMLСтрока(ДанныеАкции.ДатаОкончания));
	
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ПриПокупкеШтук", Формат(ДанныеАкции.ПриПокупкеШтук, "ЧГ="));
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ДействуетЦена_Скидка", XMLСтрока(ДанныеАкции.ДействуетЦена_Скидка));
	
	Если ЗначениеЗаполнено(ДанныеАкции.ТипСкидки) Тогда	
		ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ТипСкидки", ДанныеАкции.ТипСкидкиПредставление);
		ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ТипСкидкиПорядок", Формат(ДанныеАкции.ТипСкидкиПорядок, "ЧН=0; ЧГ="));
	Иначе 
		ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ТипСкидки", "");
		ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "ТипСкидкиПорядок", "");
	КонецЕсли;	
		
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "МагазинНаименование", ДанныеАкции.МагазинНаименование);
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "МагазинНомерТочки", Формат(ДанныеАкции.МагазинНомерТочки, "ЧГ="));			
	
	Если ЗначениеЗаполнено(ДанныеАкции.Магазин) Тогда	
		ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "Магазин", "" + ДанныеАкции.Магазин.УникальныйИдентификатор());
	Иначе 
		ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "Магазин", "");
	КонецЕсли;
		
	ДобавитьДочернийЭлементИмяЗначение(ДокументДом, АкцияДом, "КомментарийНаЦенник", ДанныеАкции.КомментарийНаЦенник);	
КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.04.19 ИП-00018238.01
Функция ДобавитьДочернийЭлементИмяЗначение(ДокументДом, Родитель, Имя, Значение)
	ЭлементДом = ДокументДом.СоздатьЭлемент(Имя);
	ТекУзелДом = Родитель.ДобавитьДочерний(ЭлементДом);	
		
	ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Значение);
	ТекУзелДом.ДобавитьДочерний(ТекстДом);			 
КонецФункции//---АК KOPA
	
#КонецОбласти

//+++АК POZM 2018.05.31 ИП-00018739 
Процедура ЗарегистрироватьОтложенныйРасчетНаличияПоступленийПоЗаявке(СсылкаНаЗаявку) Экспорт
	Запись = РегистрыСведений.ОтложенныйРасчетНаличияПоступленийПоЗаявкам.СоздатьМенеджерЗаписи();
	Запись.Заявка = СсылкаНаЗаявку;
	Запись.Записать();
КонецПроцедуры
//---АК POZM 

//+++АК ILIK 2018.07.19 ИП-00019130
Процедура ОбработатьДокументыЗаявкаНаКомпенсациюСпортаИМедицины() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Получатель.Код КАК Код,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Организация.ИНН КАК ИНН
	               |ИЗ
	               |	Документ.ЗаявкаНаКомпенсациюСпортаИМедицины КАК ЗаявкаНаКомпенсациюСпортаИМедицины
	               |ГДЕ
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.ДокументНачисления = НЕОПРЕДЕЛЕНО
	               |	И ЗаявкаНаКомпенсациюСпортаИМедицины.Акцептовано
	               |	И НЕ ЗаявкаНаКомпенсациюСпортаИМедицины.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Ссылка,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Дата,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.ВидЗаявки,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Организация,
				   |	ЗаявкаНаКомпенсациюСпортаИМедицины.Организация.ИНН КАК ИНН,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Получатель,
				   |	ЗаявкаНаКомпенсациюСпортаИМедицины.Получатель.Код КАК Код,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Акцептант,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.СуммаДокумента,
	               |	НАЧАЛОПЕРИОДА(ЗаявкаНаКомпенсациюСпортаИМедицины.Дата, МЕСЯЦ) КАК ПериодНачисления,
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.Представление
	               |ИЗ
	               |	Документ.ЗаявкаНаКомпенсациюСпортаИМедицины КАК ЗаявкаНаКомпенсациюСпортаИМедицины
	               |ГДЕ
	               |	ЗаявкаНаКомпенсациюСпортаИМедицины.ДокументНачисления = НЕОПРЕДЕЛЕНО
	               |	И ЗаявкаНаКомпенсациюСпортаИМедицины.Акцептовано
	               |	И НЕ ЗаявкаНаКомпенсациюСпортаИМедицины.ПометкаУдаления";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		Коннектор = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Зуп() + ".COMConnector");
		СоединениеБазаЗУП = Коннектор.Connect(ПолныеПрава.ПолучитьСтрокуПодключения_Зуп());
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание обработки документов ""Заявка на компенсацию спорта и медицины""", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка подключения к базе ЗУП. " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	ТаблицаФизлиц = СоединениеБазаЗУП.NewObject("ТаблицаЗначений");
	ТаблицаФизлиц.Колонки.Добавить("Код", СоединениеБазаЗУП.NewObject("ОписаниеТипов", "Строка", СоединениеБазаЗУП.NewObject("КвалификаторыСтроки", 10)));
	ТаблицаФизлиц.Колонки.Добавить("ИНН", СоединениеБазаЗУП.NewObject("ОписаниеТипов", "Строка", СоединениеБазаЗУП.NewObject("КвалификаторыСтроки", 12)));

	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = ТаблицаФизлиц.Добавить();
		НовСтр.Код = Выборка.Код;
		НовСтр.ИНН = Выборка.ИНН;
	КонецЦикла;

	Запрос = СоединениеБазаЗУП.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаФизлиц.Код,
	               |	ТаблицаФизлиц.ИНН
	               |ПОМЕСТИТЬ ВТФизлица
	               |ИЗ
	               |	&ТаблицаФизлиц КАК ТаблицаФизлиц
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиОрганизаций.Физлицо.Код КАК Код,
	               |	СотрудникиОрганизаций.ТекущееОбособленноеПодразделение.ИНН КАК ИНН,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Продавец-консультант""
	               |					ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Работник торгового зала""
	               |					ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Кассир""
	               |					ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Пекарь""
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ЭтоПродавец,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Администрация""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Информационное управление""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Исполнительное управление""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление единой концепцией""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление качества""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по обеспечению""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по финансовому контролю и учету""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление проектами""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по персоналу""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по развитию""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление расчета заказов""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление финансами""
	               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Центральный офис""
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ЭтоОфисныйСотрудник
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |ГДЕ
	               |	СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	               |	И НЕ СотрудникиОрганизаций.ПометкаУдаления
	               |	И (СотрудникиОрганизаций.ТекущееПодразделениеОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |			ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка))
	               |	И (СотрудникиОрганизаций.Физлицо.Код, СотрудникиОрганизаций.ТекущееОбособленноеПодразделение.ИНН) В
	               |			(ВЫБРАТЬ
	               |				ВТФизлица.Код,
	               |				ВТФизлица.ИНН
	               |			ИЗ
	               |				ВТФизлица КАК ВТФизлица)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиОрганизаций.Физлицо.Код,
	               |	СотрудникиОрганизаций.ТекущееОбособленноеПодразделение.ИНН";
	Запрос.УстановитьПараметр("ТаблицаФизлиц", ТаблицаФизлиц);

	ТаблицаФизлиц = Новый ТаблицаЗначений;
	ТаблицаФизлиц.Колонки.Добавить("Код");
	ТаблицаФизлиц.Колонки.Добавить("ИНН");
	ТаблицаФизлиц.Колонки.Добавить("ЭтоПродавец");
	ТаблицаФизлиц.Колонки.Добавить("ЭтоОфисныйСотрудник");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = ТаблицаФизлиц.Добавить();
		НовСтр.Код = Выборка.Код;
		НовСтр.ИНН = Выборка.ИНН;
		НовСтр.ЭтоПродавец = Выборка.ЭтоПродавец;
		НовСтр.ЭтоОфисныйСотрудник = Выборка.ЭтоОфисныйСотрудник;
	КонецЦикла;

	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = ТаблицаФизлиц.НайтиСтроки(Новый Структура("Код, ИНН", Выборка.Код, Выборка.ИНН));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НайденныеСтроки[0].ЭтоОфисныйСотрудник Тогда
			ДокНачислениеПремии = Документы.НачислениеПремииОфиснымРаботникам.СоздатьДокумент();
			ДокНачислениеПремии.ВидПремии = Справочники.ВидыПремий.Премия;
		ИначеЕсли НайденныеСтроки[0].ЭтоПродавец Тогда
			ДокНачислениеПремии = Документы.НачислениеПремии.СоздатьДокумент();
			ДокНачислениеПремии.Организация = Выборка.Организация;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ДокНачислениеПремии.Дата = Выборка.Дата;
		ДокНачислениеПремии.Утверждено = Истина;
		ДокНачислениеПремии.Утверждающий = Выборка.Акцептант;
		ДокНачислениеПремии.СуммаДокумента = Выборка.СуммаДокумента;
		ДокНачислениеПремии.ПериодНачисления = Выборка.ПериодНачисления;
		ДокНачислениеПремии.Комментарий = Выборка.Представление;
		
		НовСтр = ДокНачислениеПремии.Состав.Добавить();
		НовСтр.ФизЛицо = Выборка.Получатель;
		НовСтр.Сумма = Выборка.СуммаДокумента;
		НовСтр.Комментарий = Выборка.ВидЗаявки;
		
		Попытка
			НачатьТранзакцию();
			
			ДокНачислениеПремии.Записать(РежимЗаписиДокумента.Проведение);
			
			ДокЗаявкаНаКомпенсацию = Выборка.Ссылка.ПолучитьОбъект();
			ДокЗаявкаНаКомпенсацию.ДокументНачисления = ДокНачислениеПремии.Ссылка;
			ДокЗаявкаНаКомпенсацию.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ЗаписьЖурналаРегистрации("Регламентное задание обработки документов ""Заявка на компенсацию спорта и медицины""", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось запись документ. " + ОписаниеОшибки());
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

//+++АК SHEP 2018.08.10 б/н
Функция ПолучитьИПодключитьВнешнююОбработку(НаименованиеОбработки) Экспорт
	
	ВнешниеОбработкиСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию(НаименованиеОбработки);
	Если НЕ ЗначениеЗаполнено(ВнешниеОбработкиСсылка) Тогда Возврат Неопределено; КонецЕсли;
	
	ДвоичныеДанные = ВнешниеОбработкиСсылка.ХранилищеВнешнейОбработки.Получить();
	
	#Если Сервер Тогда
		ОписаниеЗащитыОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
		ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
	#Иначе
		ИмяОбработки = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные.Записать(ИмяОбработки); 
	#КонецЕсли
	
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь);
	
	Возврат Обработка;
	
КонецФункции
