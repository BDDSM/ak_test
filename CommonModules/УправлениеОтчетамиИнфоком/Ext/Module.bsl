
////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕРФЕЙСА ОТЧЕТОВ

// Связывает поля отбора на основной форме с данными, устанавливает представления, прячет лишние

// Процедура-обработчик изменения поля настройки
Процедура ПолеНастройкиПриИзменении(Элемент, Отбор, СтруктураСвязиЭУсДанными=Неопределено) Экспорт

	Поз = Найти(Элемент.Имя, "ПолеНастройки");
	Если Поз>0 Тогда
		
		Если ТипЗнч(СтруктураСвязиЭУсДанными)= Тип("Структура") Тогда
			
			// Имяполя отбора найдем из пути к данным
			ПутьКДанным="";
			Если СтруктураСвязиЭУсДанными.Свойство(Элемент.Имя, ПутьКДанным) Тогда
				
				ПутьКДанным = Сред(ПутьКДанным, Найти(ПутьКДанным, "Отбор.")+СтрДлина("Отбор."));
				ИмяПоля = Лев(ПутьКДанным, Найти(ПутьКДанным, ".")-1);
				
			КонецЕсли;
		Иначе
			ИмяПоля = Сред(Элемент.Имя, СтрДлина("ПолеНастройки")+1);
		КонецЕсли;
		
		МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Значение));
		Если МетаданныеЗначения <> Неопределено Тогда
			Если Метаданные.Справочники.Найти(МетаданныеЗначения.Имя) <> Неопределено Тогда
				Если Элемент.Значение.ЭтоГруппа Тогда
					Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВИерархии;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Элемент.ТипЗначения.Типы().Количество() = 2 Тогда
				ПустойСписок = Новый СписокЗначений;
				Если Элемент.ТипЗначения.СодержитТип(Тип("СписокЗначений")) Тогда
					ТипНеСписок = ?(Элемент.ТипЗначения.Типы()[0] = Тип("СписокЗначений"), Элемент.ТипЗначения.Типы()[1], Элемент.ТипЗначения.Типы()[0]);
					
					Если НЕ ЗначениеЗаполнено(Элемент.Значение) или (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") и Элемент.Значение.Количество() = 0) Тогда
						Если (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВСписке)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВСпискеПоИерархии)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.НеВСписке)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.НеВСпискеПоИерархии) Тогда
							МассивСТипом = Новый массив(1);
							
							МассивСТипом[0] = ТипНеСписок;
							
							ПустойСписок.ТипЗначения = Новый ОписаниеТипов(МассивСТипом);
							
							Элемент.Значение = ПустойСписок;
						Иначе
							Элемент.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипНеСписок);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ (НЕ ЗначениеЗаполнено(Элемент.Значение) или (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") и Элемент.Значение.Количество() = 0)) Тогда
			Отбор[ИмяПоля].Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПолеНастройкиПриИзменении()


// Процедура-обработчик изменения поля вида сравнения
Процедура ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы) Экспорт

	ИмяОтбора = Сред(Элемент.Имя, Найти(Элемент.Имя, "ПолеВидаСравнения")+СтрДлина("ПолеВидаСравнения"));
	
	// Управление полями настройки в зависимости от вида сравнения
		Если Элемент.Значение = ВидСравнения.Интервал
			ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяГраницы 
			ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяНачало 
			ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
			Если ЭлементыФормы.Найти("ПолеНастройки" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройки"+ИмяОтбора].Видимость = Ложь;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиС" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиС"+ИмяОтбора].Видимость = Истина;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиПо" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиПо"+ИмяОтбора].Видимость = Истина;
			КонецЕсли;
		
		Иначе
		
			Если ЭлементыФормы.Найти("ПолеНастройки" + ИмяОтбора) <> НеОпределено Тогда
				ПолеНастройки = ЭлементыФормы["ПолеНастройки"+ИмяОтбора];
				ПолеНастройки.Видимость = Истина;
				Если Элемент.Значение = ВидСравнения.ВСписке
					ИЛИ Элемент.Значение = ВидСравнения.НеВСписке
					ИЛИ Элемент.Значение = ВидСравнения.ВСпискеПоИерархии
					ИЛИ Элемент.Значение = ВидСравнения.НеВСпискеПоИерархии Тогда
					ПолеНастройки.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
				Иначе
					ПолеНастройки.ОграничениеТипа = Новый ОписаниеТипов(ПолеНастройки.ТипЗначения,, "СписокЗначений");
				КонецЕсли;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиС" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиС"+ИмяОтбора].Видимость = Ложь;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиПо" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиПо"+ИмяОтбора].Видимость = Ложь;
			КонецЕсли;
		
		КонецЕсли;

КонецПроцедуры // ПолеВидаСравненияПриИзменении()

// Формирует список допустимых значений Вида Сравнения
//
// Параметры: 
//	ОпТипов - Описание Типов поля
//
// Возвращаемое значение: 
//	список значений, содержащийимена всех регистров остатков
//
Функция ПолучитьСписокВидовСравненияПоТипу(ОпТипов) Экспорт
	
	ТаблицаДоступныхЗначений = Новый ТаблицаЗначений;
	ТаблицаДоступныхЗначений.Колонки.Добавить("ВидСравнения");
	ТаблицаДоступныхЗначений.Колонки.Добавить("ЧислоВида");
	
	Для каждого ТипОписания Из ОпТипов.Типы() Цикл
	
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Равно;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеРавно;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВСписке;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВСписке;
		НоваяСтрокаТаблицы.ЧислоВида = 1;

		Если Справочники.ТипВсеСсылки().СодержитТип(ТипОписания) И Метаданные.НайтиПоТипу(ТипОписания).Иерархический Тогда
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
		ИначеЕсли ТипОписания = Тип("Число")
			  ИЛИ ТипОписания = Тип("Строка")
			  ИЛИ ТипОписания = Тип("Дата") Тогда
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Больше;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Меньше;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Интервал;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
		КонецЕсли;
		
		Если ТипОписания = Тип("Строка") Тогда
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Содержит;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДоступныхЗначений.Свернуть("ВидСравнения", "ЧислоВида");
	
	СписокВидовСравнения = Новый СписокЗначений;
	КолТипов = ОпТипов.Типы().Количество();
	
	Для каждого СтрокаТаблицы Из ТаблицаДоступныхЗначений Цикл
		Если СтрокаТаблицы.ЧислоВида = КолТипов Тогда
			СписокВидовСравнения.Добавить(СтрокаТаблицы.ВидСравнения);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат СписокВидовСравнения;
	
Конецфункции //


// Процедура инициализирует отправку печатного документа по электронной почте
//
// Параметры: 
//  Документ - табличный документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ОтправитьДокументПоЭлектроннойПочте(Документ, ИмяФайлаВложения = "") Экспорт

	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Отправлять документы по электронной почте можно только из встроенного почтового клиента.
		|В настоящее время в настройках параметров учета установлено использование основного почтового клиента операционной системы.");
		#Если Клиент Тогда
		Предупреждение("Операция не выполнена");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ФормаОтправкиДокумента = ПолучитьОбщуюФорму("НастройкаОтправкиОтчета");
	ФормаОтправкиДокумента.Отчет            = Документ;
	ФормаОтправкиДокумента.ИмяФайлаВложения = СтрЗаменить(ИмяФайлаВложения, ".", " ");
	ФормаОтправкиДокумента.ТемаСообщения    = ИмяФайлаВложения;
	ФормаОтправкиДокумента.ОткрытьМодально();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТЧЕТОВ НА ПОСТРОИТЕЛЕ ОТЧЕТОВ

// В текст для построителя отчета вставляет свойства и категории
//Процедура ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
//											  СтруктураПараметры, ТекстИсточникиСведений="", ТекстПоляКатегорий="", 
//											  ТекстПоляСвойств="", ТекстПоляСгруппироватьПо = "", 
//											  ЗаменятьСвойства = "//СВОЙСТВА", ЗаменятьКатегории = "//КАТЕГОРИИ", 
//											  ЗаменятьСоединения = "//СОЕДИНЕНИЯ", ЗаменятьСгруппироватьПо = "//СГРУППИРОВАТЬПО",
//											  ИдентификаторыПараметровДляОтборовПоКатегориям = "") Экспорт

//	// Добавляемые фрагменты запроса
//	ТекстПоляКатегорийДляГруппировки ="";
//	ТекстПоляСвойствДляГруппировки = "";
//	ТекстИсточникиСведений ="";
//	ТекстПоляКатегорий = "";
//	ТекстПоляСвойств = "";
//	
//	Если НЕ ТипЗнч(ИдентификаторыПараметровДляОтборовПоКатегориям)=Тип("Структура") Тогда
//		
//		ИдентификаторыПараметровДляОтборовПоКатегориям = Новый Структура;
//		
//	КонецЕсли;

//	Индекс = 0;

//	Выборка = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать();
//	Пока Выборка.Следующий() Цикл

//		Если Выборка.ЭтоГруппа ИЛИ Выборка.ПометкаУдаления Тогда
//			Продолжить;
//		КонецЕсли;

//		НайденнаяСтрока = ТаблицаПолей.Найти(Выборка.НазначениеСвойства, "Назначение");
//		Если НайденнаяСтрока <> Неопределено Тогда

//			// Для списка всех полей
//			ТекстПоляСвойств = ТекстПоляСвойств + ",
//			|	Свойство"+Индекс+".Значение" + " КАК " + "Свойство"+Индекс+"Значение";
//			
//			ТекстПоляСвойствДляГруппировки = ТекстПоляСвойствДляГруппировки + ",
//			|	Свойство"+Индекс+".Значение";

//			// Источник для свойств
//			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
//			"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойство"+Индекс+"
//			|ПО Свойство"+Индекс+".Объект = " + НайденнаяСтрока.ПутьКДанным + "
//			|И  Свойство"+Индекс+".Свойство = &ПараметрСвойство"+Индекс+ "}";

//			СтруктураПараметры.Вставить("ПараметрСвойство"+Индекс, Выборка.Ссылка);

//			СтруктураПредставлениеПолей.Вставить("Свойство"+Индекс+"Значение", Выборка.Наименование + " (св-во " + НайденнаяСтрока.Представление + ")");

//			мСоответствиеНазначений.Вставить(Выборка.Наименование + " (св-во " + НайденнаяСтрока.Представление + ")", Выборка.Ссылка);

//			Индекс = Индекс + 1;

//		КонецЕсли;

//	КонецЦикла;

//	Индекс = 0;

//	Для Каждого Строка Из ТаблицаПолей Цикл

//		Если НЕ (Строка.НетКатегорий=Истина) Тогда

//			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
//			"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК Категории"+Индекс+"
//			|ПО Категории"+Индекс+".Объект = " + Строка.ПутьКДанным + "
//			|И  Категории"+Индекс+".Категория В (&ПараметрКатегории"+Индекс+")}";

//			ТекстПоляКатегорий = ТекстПоляКатегорий + ",
//			|	ВЫБОР
//			|		КОГДА Категории"+Индекс+".Категория ЕСТЬ НЕ NULL 
//			|			ТОГДА Категории"+Индекс+".Категория
//			|	ИНАЧЕ "+Строка.ПутьКДанным + "
//			|	КОНЕЦ КАК Категории"+Индекс+"Категория";

//			ТекстПоляКатегорийДляГруппировки = ТекстПоляКатегорийДляГруппировки + ",
//			|	Категории"+Индекс+".Категория";

//			СтруктураПредставлениеПолей.Вставить("Категории"+Индекс+"Категория", "Категории " + Строка.Представление);

//			ИдентификаторыПараметровДляОтборовПоКатегориям.Вставить("Категории"+Индекс+"Категория", "ПараметрКатегории"+Индекс);

//			мСоответствиеНазначений.Вставить("Категории " + Строка.Представление, Строка.Назначение);
//			
//			Индекс = Индекс + 1;
//			
//		КонецЕсли;
//	
//	КонецЦикла;
//	
//	Индекс = 0;


//	//ВЫБРАТЬ РАЗЛИЧНЫЕ съедает достаточно много ресурсов - поэтому если 
//	//не надо, то обойдемся без него.
//	Если ТекстПоляКатегорийДляГруппировки <> "" Тогда

//		Текст = СтрЗаменить(Текст, "//РАЗЛИЧНЫЕ", "РАЗЛИЧНЫЕ");

//	КонецЕсли;
//	
//	Текст = СтрЗаменить(Текст, ЗаменятьСвойства, ТекстПоляСвойств);
//	Текст = СтрЗаменить(Текст, ЗаменятьКатегории, ТекстПоляКатегорий);
//	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);
//	Текст = СтрЗаменить(Текст, ЗаменятьСгруппироватьПо, ТекстПоляСвойствДляГруппировки + ТекстПоляКатегорийДляГруппировки);

//КонецПроцедуры // ДобавитьВТекстСвойстваИКатегории()

// В текст запроса построителя вносит изменения с целью выборки всей информации о физлице
// Параметры:
// 	ТекстЗапроса 				- модифицируемый текст запроса построителя,
// 	СтруктураПредставлениеПолей - структура, в которую ложится представление добавленных полей физлица,
// 	СтруктураФорматаПолей 		- структура, в которую ложится формат добавленных полей физлица,
// 	ИмяОсновнойВыборки 			- имя таблицы запроса, к которой присоединяется информация о физлице
// 	ИмяПоляФизЛицо 				- имя реквизита основной выборки, имеющего тип "СправочникСсылка.ФизическиеЛица"
Процедура ДобавитьВТекстПостроителяДанныеОФизлице(ТекстЗапроса, СтруктураПредставлениеПолей, СтруктураФорматаПолей, ИмяОсновнойВыборки, ИмяПоляФизЛицо) Экспорт
	
	ПолноеИмяПоляФизЛицо = ИмяОсновнойВыборки + "." + ИмяПоляФизЛицо;
	ТипДата = Тип("Дата");
	
	// данные о физлице
	ТекстОписаниеПолей = ",
	|	" + ПолноеИмяПоляФизЛицо +".ДатаРождения 		КАК ДатаРождения,
	|	" + ПолноеИмяПоляФизЛицо +".ИНН 				КАК ИНН,
	|	" + ПолноеИмяПоляФизЛицо +".КодИМНС 			КАК КодИМНС,
	|	" + ПолноеИмяПоляФизЛицо +".Комментарий 		КАК Комментарий,
	|	" + ПолноеИмяПоляФизЛицо +".СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	" + ПолноеИмяПоляФизЛицо +".Пол 				КАК Пол,
	|	" + ПолноеИмяПоляФизЛицо +".МестоРождения 		КАК МестоРождения,
	|	" + ПолноеИмяПоляФизЛицо +".МестоРожденияКодПоОКАТО КАК МестоРожденияКодПоОКАТО,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, " + ПолноеИмяПоляФизЛицо + ".Наименование) КАК ФиоПолное,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ, " + ПолноеИмяПоляФизЛицо +".Наименование) КАК ФиоКраткое,
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) + ВЫБОР КОГДА (Месяц(" + ПолноеИмяПоляФизЛицо +".ДатаРождения)*100+День(" + ПолноеИмяПоляФизЛицо +".ДатаРождения)) > (&ДатаАктуальности_Месяц*100+&ДатаАктуальности_День) ТОГДА -1 ИНАЧЕ 0 КОНЕЦ КОНЕЦ КАК Возраст,";
	
	ТекстСоединения = "
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизЛиц
	|		ПО " + ПолноеИмяПоляФизЛицо + " = ФИОФизЛиц.ФизЛицо}";
	
	// данные из табличных частей физлица
	МетаданныеФизЛица = Метаданные.Справочники.ФизическиеЛица;
	Для каждого ОписаниеТЧФизЛица Из МетаданныеФизЛица.ТабличныеЧасти Цикл
		ИмяТЧ = ОписаниеТЧФизЛица.Имя;
		Если ИмяТЧ = "Стажи" Тогда
			ТекстОписаниеПолей = ТекстОписаниеПолей + "
			|	СтажиФизЛица.ВидСтажа КАК СтажиВидСтажа,";
			СтруктураПредставлениеПолей.Вставить("СтажиВидСтажа", "Вид стажа");
			// сам стаж пока не выводим ...
		Иначе
			// из остальных т.ч. выводим данные без дополнительной обработки
			Для каждого ОписаниеРеквизита Из ОписаниеТЧФизЛица.Реквизиты Цикл
				ИмяРеквизита = ОписаниеРеквизита.Имя;
				ТекстОписаниеПолей = ТекстОписаниеПолей + "
				|	" + ИмяТЧ + "ФизЛица." + ИмяРеквизита + " КАК " + ИмяТЧ + ИмяРеквизита + ",";
				СтруктураПредставлениеПолей.Вставить(ИмяТЧ + ИмяРеквизита, ОписаниеРеквизита.Синоним);
				Если ОписаниеРеквизита.Тип.СодержитТип(ТипДата) Тогда
					СтруктураФорматаПолей.Вставить(ИмяТЧ + ИмяРеквизита, "ДФ=dd.MM.yyyy");
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		ТекстСоединения = ТекстСоединения + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица." + ИмяТЧ + " КАК " + ИмяТЧ + "ФизЛица
		|		ПО " + ПолноеИмяПоляФизЛицо + " = " + ИмяТЧ + "ФизЛица.Ссылка}";
	КонецЦикла; 
	
	// данные из регистров сведений о физлице
	МассивРегистров = Новый Массив;
	МассивРегистров.Добавить("ПаспортныеДанныеФизЛиц");
	МассивРегистров.Добавить("ГражданствоФизЛиц");
	МассивРегистров.Добавить("ВоинскийУчет");
	МассивРегистров.Добавить("СемейноеПоложениеФизЛиц");
	МассивРегистров.Добавить("СведенияОбИнвалидностиФизлиц");
	МассивРегистров.Добавить("СведенияОСтажеРаботыНаСевере");
	
	Для каждого ИмяРегистра Из МассивРегистров Цикл
	
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
		Для каждого ОписаниеРесурса Из МетаданныеРегистра.Ресурсы Цикл
			ИмяРесурса = ОписаниеРесурса.Имя;
			ТекстОписаниеПолей = ТекстОписаниеПолей + "
			|	" + ИмяРегистра + "." + ИмяРесурса + " КАК " + ИмяРегистра + ИмяРесурса + ",";
			СтруктураПредставлениеПолей.Вставить(ИмяРегистра + ИмяРесурса, ОписаниеРесурса.Синоним);
			Если ОписаниеРесурса.Тип.СодержитТип(ТипДата) Тогда
				СтруктураФорматаПолей.Вставить(ИмяРегистра + ИмяРесурса, "ДФ=dd.MM.yyyy");
			КонецЕсли;	
		КонецЦикла;
		
		ТекстСоединения = ТекстСоединения + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + ?(МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический,"",".СрезПоследних(&ДатаАктуальности)") + " КАК " + ИмяРегистра + "
		|		ПО " + ПолноеИмяПоляФизЛицо + " = " + ИмяРегистра + ".ФизЛицо}";
		
	КонецЦикла;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ", Лев(ТекстОписаниеПолей,СтрДлина(ТекстОписаниеПолей)-1));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДАННЫЕ О ФИЗЛИЦЕ: СОЕДИНЕНИЯ", ТекстСоединения);
	
	// ПРЕДСТАВЛЕНИЕ ПОЛЕЙ
	
	//данные физлица
	СтруктураПредставлениеПолей.Вставить("ДатаРождения", "Дата рождения");
	СтруктураПредставлениеПолей.Вставить("КодИМНС", "Код ИМНС");
	СтруктураПредставлениеПолей.Вставить("СтраховойНомерПФР", "Страховой номер ПФР");
	СтруктураПредставлениеПолей.Вставить("МестоРождения", "Место рождения");
	СтруктураПредставлениеПолей.Вставить("МестоРожденияКодПоОКАТО", "Код по ОКАТО места рождения");
	СтруктураПредставлениеПолей.Вставить("ФиоПолное", "ФИО (полностью)");
	СтруктураПредставлениеПолей.Вставить("ФиоКраткое", "Фамилия И. О. ");
	// трудовая деятельность
	СтруктураПредставлениеПолей.Вставить("ТрудоваяДеятельностьОрганизация", "Трудовая деятельность: организация");
	СтруктураПредставлениеПолей.Вставить("ТрудоваяДеятельностьДатаНачала", "Трудовая деятельность: начало работы");
	СтруктураПредставлениеПолей.Вставить("ТрудоваяДеятельностьДатаОкончания", "Трудовая деятельность: окончание работы");
	СтруктураПредставлениеПолей.Вставить("ТрудоваяДеятельностьДолжность", "Трудовая деятельность: должность");
	
	// ФОРМАТ ПОЛЕЙ
	СтруктураФорматаПолей.Вставить("ДатаРождения", "ДФ=dd.MM.yyyy");
	
КонецПроцедуры // ДобавитьВТекстПостроителяДанныеОФизлице()


// форматируем числа интервалов для формирования строк запроса
//
// Параметры:
//	Значение       - форматируемое число
//
// Возвращаемое значение:
//	строка - отформатированная число
//
Функция ЗнчВТекстЗапроса(Значение) 
	
	Если ТипЗнч(Значение)=Тип("Число") Тогда
		Результат = Формат(Значение,"ЧГ=0;ЧРД=.;ЧН=");
	ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
		Результат = """"+Значение+"""";
	ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
		Результат = "ДатаВремя("
		+ЗнчВТекстЗапроса(Год(Значение))+","
		+ЗнчВТекстЗапроса(Месяц(Значение))+","
		+ЗнчВТекстЗапроса(День(Значение))+","
		+ЗнчВТекстЗапроса(Час(Значение))+","
		+ЗнчВТекстЗапроса(Минута(Значение))+","
		+ЗнчВТекстЗапроса(Секунда(Значение))+")";
	Иначе
		Результат="0";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	 

// Процедура заполняет представления элементов всех коллекций построителя отчета на
//  основании соответствия имен и представдлений переданных в параметре
//
// Параметры
//  СтруктураСоответствияИмен - Структура, ключ - имя поля, значение - представление поля
//  ПостроительОтчета         - ПостроительОтчета
//
//  Возвращаемое значение
//   НЕТ
//
Процедура ЗаполнитьПредставленияПолей(СтруктураСоответствияИмен, ПостроительОтчета) Экспорт

	СтруктураКоллекцийПостроителяОтчета = Новый Структура("ДоступныеПоля, ВыбранныеПоля, ИзмеренияКолонки, ИзмеренияСтроки, Отбор");
	
	Для каждого ЭлементСтруктуры Из СтруктураКоллекцийПостроителяОтчета Цикл
		Для а = 0 По ПостроительОтчета[ЭлементСтруктуры.Ключ].Количество() - 1 Цикл
			Если ПустаяСтрока(ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя) Тогда
				Продолжить;
			КонецЕсли;
			Если СтруктураСоответствияИмен.Свойство(ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя) Тогда
				ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Представление = СтруктураСоответствияИмен[ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя];
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьПредставленияПолей()

// Добавляет в параметры построителя отчета использованные в отборах категории
//
// Параметры:
//	ПостроительОтчета              - Построитель, отбор которого обрабатывается, и в Параметры 
//                                    которого добавляются категории
//	СтруктураДляОтбораПоКатегориям - структура, связывающая пути к данным Отборов Построителя и 
//                                    идентицфикаторы параметров
//
// Возвращаемое значение:
//	Истина, если добавление параметров произошло успешно
//	Ложь, если есть повторный отбор по одной и той же категории.
//
// Вообще-то, повторный отбор по одной и той же категории невозможен не всегда - 
//  можно отобрать два раза с видом сравнения "не равно". Контроль возвращаемого
//  этой функцией значения отключить можно, но нужно после этого понимать,
//  что два отбора по одной категории с видом сравнения "Равно" приведут к тому,
//  что отчет окажется пустым.
//
Функция ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, СтруктураДляОтбораПоКатегориям) Экспорт

	Если ТипЗнч(СтруктураДляОтбораПоКатегориям) = ТипЗнч(Новый Структура) Тогда

		Для Каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			//Прочищаем все, независимо от использования элемента отбора
			НазваниеПараметра = "";
			Если Найти(ЭлементОтбора.ПутьКДанным, ".") = 0 Тогда
				Если СтруктураДляОтбораПоКатегориям.Свойство(ЭлементОтбора.ПутьКДанным, НазваниеПараметра) Тогда
					Если ПостроительОтчета.Параметры.Свойство(НазваниеПараметра) Тогда
						ПостроительОтчета.Параметры.Удалить(НазваниеПараметра);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Для Каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл

			Если Найти(ЭлементОтбора.ПутьКДанным, ".") > 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ЭлементОтбора.Использование Тогда

				ИдентификаторПараметра = "";

				Если СтруктураДляОтбораПоКатегориям.Свойство(ЭлементОтбора.ПутьКДанным, ИдентификаторПараметра) Тогда

					МассивЗначенийКатегорий = НеОпределено;

					Если НЕ ПостроительОтчета.Параметры.Свойство(ИдентификаторПараметра, МассивЗначенийКатегорий) Тогда
						МассивЗначенийКатегорий = Новый Массив;
					Иначе
						#Если Клиент Тогда
						Предупреждение("Нельзя использовать несколько отборов по одной и той же категории!");
						#КонецЕсли
						Возврат Ложь;
					КонецЕсли;

					Если ТипЗнч(ЭлементОтбора.Значение) = ТипЗнч(Новый СписокЗначений) Тогда
						Для Каждого ЗначениеКатегории Из ЭлементОтбора.Значение Цикл
							МассивЗначенийКатегорий.Добавить(ЗначениеКатегории.Значение);
						КонецЦикла;
					Иначе
						МассивЗначенийКатегорий.Добавить(ЭлементОтбора.Значение);
					КонецЕсли;

					ПостроительОтчета.Параметры.Вставить(ИдентификаторПараметра, МассивЗначенийКатегорий);

				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;

	Возврат Истина;

КонецФункции // ЗадатьПараметрыОтбораПоКатегориям()

// Устанавливает типы значений доступных полей отбора, соответствующих свойствам и категориям
//
// Параметры:
//	ПостроительОтчета      - ПостроительОтчета, его доступные поля анализируются
//	ТекстПоляКатегорий,
//	ТекстПоляСвойств       - Строки, используются для определений того, является ли
//                            ДоступноеПоле значением свойства или категрии
//	мСоотвествиеНазначений - Соответствие между представлениями и ПВХ,
//                            используется для установки правильных типов Свойств
//
Процедура УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей) Экспорт
	Для Каждого КлИЗначение из СтруктураПредставлениеПолей Цикл
		Если Найти(ТекстПоляСвойств, "КАК "+КлИЗначение.Ключ)>0 Тогда

			Назначение = мСоответствиеНазначений.Получить(КлИЗначение.Значение);
				Если Назначение = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(КлИЗначение.Ключ);
				Если ДоступноеПоле = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Если ДоступноеПоле.Отбор Тогда
					ДоступноеПоле.ТипЗначения = Назначение.ТипЗначения;
				КонецЕсли;

			ИначеЕсли Найти(ТекстПоляКатегорий, "КАК "+КлИЗначение.Ключ)>0 Тогда

				ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(КлИЗначение.Ключ);

				Если ДоступноеПоле <> Неопределено Тогда
					ДоступноеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КатегорииОбъектов");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры // УстановитьТипыЗначенийСвойствИКатегорийДляОтбора()


// Процедура добавляет показатель в выбранные поля. Вызывается перед выполнением запроса.
// 
// Параметры:
//	ИмяПоляПостроителя - строка, идентификатор поля построителя
//	ПостроительОтчета  - Построитель отчета
//

// Устанавливает связь полей отбора на основной форме с отбором
Процедура УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, Отбор, СтруктураСвязиЭлементовСДанными = Неопределено, ПутьКОтбору = "ОтчетОбъект.ПостроительОтчета.Отбор") Экспорт

	Инд=0;
	СтруктураНаборовСвязываемыхЭлементов = Новый Структура;
	//Перебираем элементы формы
	Пока Инд<ЭлементыФормы.Количество() Цикл

		Элемент = ЭлементыФормы[Инд];
		
		Если (Найти(Элемент.Имя, "ПолеНастройки")
			ИЛИ Найти(Элемент.Имя, "ФлажокНастройки")
			ИЛИ Найти(Элемент.Имя, "ПолеВидаСравнения")) Тогда

			//Если имя элемента формы содержит что-то, нас интересующее,
			//добавляем его в соответствующую структуру

			//Это может плохо работать, например, для "ПолеНастройкиПоПорядку"
			//процедура решит, что это "ПолеНастройкиПо" для "Порядку". Вывод - используем маленькую
			//букву - "ПолеНастройкиПопопрядку"!!!
			Если (Найти(Элемент.Имя, "ПолеНастройкиПо")) и (ВРег(Сред(Элемент.Имя, 16, 1)) = Сред(Элемент.Имя, 16, 1)) Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеНастройкиПо", "");
			ИначеЕсли Найти(Элемент.Имя, "ПолеНастройкиС") и (ВРег(Сред(Элемент.Имя, 15, 1)) = Сред(Элемент.Имя, 15, 1)) Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеНастройкиС", "");
			ИначеЕсли Найти(Элемент.Имя, "ПолеНастройки") Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеНастройки", "");
			ИначеЕсли Найти(Элемент.Имя, "ПолеВидаСравнения") Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеВидаСравнения", "");
			Иначе
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ФлажокНастройки", "");
			КонецЕсли;
			
			СтрНабор = "";
			Если НЕ СтруктураНаборовСвязываемыхЭлементов.Свойство(ИмяПоляОтбора) Тогда
				//Ключами структуры "СтруктураНаборовСвязываемыхЭлементов" являются 
				//идентификаторы полей отбора, значениями - структуры СтрНабор.
				СтрНабор = Новый Структура;
				СтруктураНаборовСвязываемыхЭлементов.Вставить(ИмяПоляОтбора, СтрНабор);
				Иначе СтрНабор = СтруктураНаборовСвязываемыхЭлементов[ИмяПоляОтбора];
			КонецЕсли;
			//В СтрНабор мы складываем в качестве ключа, например, "ПолеНастройки", 
			//значение - ЭУ формы. В общем, откусываем идентификатор отбора
			СтрНабор.Вставить(СтрЗаменить(Элемент.Имя, ИмяПоляОтбора, ""), Элемент);
			
		КонецЕсли;
		
		Инд=Инд+1;
	
	КонецЦикла; 

	// Структура для хранения связи э.у. с данными
	СтруктураСвязиЭлементовСДанными = Новый Структура;

	Для Сч = 0 По Отбор.Количество()-1 Цикл

		ПолеОтбора = Отбор[Сч];
		
		Если ПустаяСтрока(ПолеОтбора.Имя) Тогда
			Продолжить;
		КонецЕсли; 

		Если СтруктураНаборовСвязываемыхЭлементов.Свойство(ПолеОтбора.Имя) Тогда
			//Тогда имеет место комплект (возможно, неполный) контролов для него
			
			КомплектКонтролов = СтруктураНаборовСвязываемыхЭлементов[ПолеОтбора.Имя];
			//напоминаю - ключи - тип ЭУ, значения - сами ЭУ
			//Связываем их с данными.
			
			ТипОтбора = Отбор[ПолеОтбора.Имя].ТипЗначения;
			
			Если КомплектКонтролов.Свойство("ФлажокНастройки") Тогда
				КомплектКонтролов.ФлажокНастройки.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".Использование";
				СтруктураСвязиЭлементовСДанными.Вставить("ФлажокНастройки"+ПолеОтбора.Имя,   ПутьКОтбору+"."+ПолеОтбора.Имя+".Использование");
			КонецЕсли;
			
			Если КомплектКонтролов.Свойство("ПолеНастройки") Тогда
				КомплектКонтролов.ПолеНастройки.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".Значение";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройки"+ПолеОтбора.Имя,     ПутьКОтбору+"."+ПолеОтбора.Имя+".Значение");
			КонецЕсли;

			Если КомплектКонтролов.Свойство("ПолеНастройкиС") Тогда
				КомплектКонтролов.ПолеНастройкиС.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеС";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиС"+ПолеОтбора.Имя,    ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеС");
			КонецЕсли;

			Если КомплектКонтролов.Свойство("ПолеНастройкиПо") Тогда
				КомплектКонтролов.ПолеНастройкиПо.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеПо";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиПо"+ПолеОтбора.Имя,   ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеПо");
			КонецЕсли;

			Если КомплектКонтролов.Свойство("ПолеВидаСравнения") Тогда
				КомплектКонтролов.ПолеВидаСравнения.СписокВыбора = ПолучитьСписокВидовСравненияПоТипу(ТипОтбора);
				КомплектКонтролов.ПолеВидаСравнения.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".ВидСравнения";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеВидаСравнения"+ПолеОтбора.Имя, ПутьКОтбору+"."+ПолеОтбора.Имя+".ВидСравнения");

				//Установим видимость ЭУ "ПолеНастройки*" в зависимости от 
				//уже установленного вида сравнения
				ПолеВидаСравненияПриИзменении(КомплектКонтролов.ПолеВидаСравнения, ЭлементыФормы);

			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // УстановитьСвязьПолейБыстрогоОтбораНаФорме()


// Заполняет отборы ПостроителяОтчета
//
// Параметры:
//	МассивОтбора - Массив, содержащий идентификаторы отборов
Процедура ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета) Экспорт
	Для Каждого Элемент Из МассивОтбора Цикл

		ПолеОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);

	КонецЦикла; 
КонецПроцедуры // ЗаполнитьОтбор()

// Функция формирует строку представления отборов объекта Отбор
//
// Параметры
//  Отбор - Отбор, по которому формируем строку
//
// Возвращаемое значение:
//   Строка - представление отбора
//
Функция СформироватьСтрокуОтборов(Отбор) Экспорт

	Если ТипЗнч(Отбор) <> Тип("Отбор") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаОтборов = "";
	
	Для а = 0 По Отбор.Количество() - 1 Цикл
		
		ЭлементОтбора = Отбор[а];
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 

		Если ЭлементОтбора.Имя = "Периодичность" Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
			СтрокаОтборов = СтрокаОтборов + ", ";
		КонецЕсли; 
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " = "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <> "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке по иерархии "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке по иерархии "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " > "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " >= "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " < "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <= "+ ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " < " + ЭлементОтбора.Представление + " < "+ ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " <= " + ЭлементОтбора.Представление + " <= "+ ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " <= " + ЭлементОтбора.Представление + " < "+ ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " < " + ЭлементОтбора.Представление + " <= "+ ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		КонецЕсли; 

	КонецЦикла; 
	
	Возврат СтрокаОтборов;

КонецФункции // СформироватьСтрокуОтборов()

// Функция формирует строку представления измерений построителя отчета
//
// Параметры
//  КоллекцияИзмерений - ИзмеренияПостроителяОтчета, коллекция измерений построителя отчета
//
// Возвращаемое значение:
//   Строка - представление измерений построителя отчета
//
Функция СформироватьСтрокуИзмерений(КоллекцияИзмерений) Экспорт

	Если ТипЗнч(КоллекцияИзмерений) <> Тип("ИзмеренияПостроителяОтчета") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаИзмерений = "";
	
	Для а = 0 По КоллекцияИзмерений.Количество() - 1 Цикл
		Если а > 0 Тогда
			СтрокаИзмерений = СтрокаИзмерений + ", ";
		КонецЕсли;
		СтрокаИзмерений = СтрокаИзмерений + КоллекцияИзмерений[а].Представление;
	КонецЦикла;
	
	Возврат СтрокаИзмерений;

КонецФункции // СформироватьСтрокуГруппировок()

//// Функция формирует строку представления порядков построителя отчетов
////
//// Параметры
////  КоллекцияПорядок - Порядок, коллекция порядков построителя отчета
////
//// Возвращаемое значение:
////   Строка - представление порядков построителя отчета
////
//Функция СформироватьСтрокуПорядка(КоллекцияПорядок) Экспорт

//	Если ТипЗнч(КоллекцияПорядок) <> Тип("Порядок") Тогда
//		Возврат "";
//	КонецЕсли; 
//	
//	СтрокаПорядка = "";
//	
//	Для а = 0 По КоллекцияПорядок.Количество() - 1 Цикл
//		Если а > 0 Тогда
//			СтрокаПорядка = СтрокаПорядка + ", ";
//		КонецЕсли;
//		СтрокаПорядка = СтрокаПорядка + КоллекцияПорядок[а].Представление + " " + КоллекцияПорядок[а].Направление;
//	КонецЦикла;
//	
//	Возврат СтрокаПорядка;

//КонецФункции // СформироватьСтрокуПорядка()

//// Процедура используется в формах настройки отчетов для выбора категории
//// или для подбора категорий в список. Использование обусловлено тем,
//// что Категории при выборе надо указывать владельца
////
//// Параметры:
////	Элемент - элемент управления, в который выбирают категорию
////	Назначение - элемент ПВХ, назначение для категории, известное форме настройки
////	ФормаНастройки - сама форма
////	СтандартнаяОбработка - необходимый параметр процедуры - обработчика события
////
//Процедура ОсуществитьВыборКатегории(Элемент, Назначение, ФормаНастройки, СтандартнаяОбработка) Экспорт

//	Если ТипЗнч(Элемент.Значение) <> ТипЗнч(Новый СписокЗначений) Тогда

//		СтандартнаяОбработка = Ложь;

//		ФормаВыбораКатегории= Справочники.КатегорииОбъектов.ПолучитьФормуВыбора(, Элемент,);
//		ФормаВыбораКатегории.РежимВыбора = Истина;
//		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Установить(Назначение);
//		ФормаВыбораКатегории.Открыть();
//		
//	КонецЕсли;
//КонецПроцедуры // ОсуществитьВыборКатегории()

//// Процедура используется в формах настройки отчетов для выбора значения свойства
//// или для подбора значений свойств в список. Использование обусловлено тем,
//// что свойству при выборе надо указывать не только тип значения, но еще и владельца
////
//// Параметры:
////	Элемент - элемент управления, в который выбирают свойство
////	Назначение - элемент ПВХ, назначение для свойства, известное форме настройки
////	ФормаНастройки - сама форма
////	СтандартнаяОбработка - необходимый параметр процедуры - обработчика события
////
//Процедура ОсуществитьВыборСвойства(Элемент, Свойство, ФормаНастройки, СтандартнаяОбработка) Экспорт
//// Ограничение списка свойств
//	Если ТипЗнч(Элемент.Значение) <> Тип("СписокЗначений") Тогда

//		Если Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
//			Попытка
//				Элемент.ВыборПоВладельцу = Свойство;
//				СтандартнаяОбработка = Истина;
//			Исключение
//				МенеджерДанных = Новый("СправочникМенеджер."+Элемент.Значение.Метаданные().Имя);
//				ФормаДанных = МенеджерДанных.ПолучитьФормуВыбора(, Элемент);
//				ФормаДанных.РежимВыбора = Истина;
//				ФормаДанных.МножественныйВыбор = Ложь;
//				ФормаДанных.ЭлементыФормы.СправочникСписок.Значение.Отбор.Владелец.Значение = Свойство;
//				ФормаДанных.ЭлементыФормы.СправочникСписок.Значение.Отбор.Владелец.Использование = Истина;
//				ФормаДанных.Открыть();
//				СтандартнаяОбработка = Ложь;
//			КонецПопытки;
//		Иначе
//			СтандартнаяОбработка = истина;
//		КонецЕсли;

//	КонецЕсли;

//КонецПроцедуры // ОсуществитьВыборСвойства()

// Функция определяет, доступен ли элемент отбора с указанным именем для изменения имени, удаления, переименования
// используется в формах настройки отчетов на базе Построителя Отчетов для того, чтобы не удалить в форме
// настройки отбор, связанный с "быстрым отбором", находящимся на основной форме.
//
// Параметры:
//	ИмяЭлементаОтбора               - строка, содержит имя элемента отбора.
//	СтруктураСвязиЭлементовСДанными - структура, возвращаемая в один из параметров методом 
//                                    отУстановитьСвязьПолейБыстрогоОтбораНаФорме
//
Функция ОтборСвязанСДанными(ИмяЭлементаОтбора, СтруктураСвязиЭлементовСДанными) Экспорт

	Если СтруктураСвязиЭлементовСДанными.Свойство("ФлажокНастройки"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеВидаСравнения"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеНастройки"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеНастройкиС"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеНастройкиПо"+ИмяЭлементаОтбора) Тогда

		Возврат Истина;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции //отОтборСвязанСДанными()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С КОЛОНТИТУЛАМИ

// Чтение настроек колонтитулов из константы. Если константа не заполнена, то формируются пустые настройки.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Структура   – Настройки колонтитулов
//
Функция ПолучитьНастройкиКолонтитулов()

	Настройка = Константы.НастройкиКолонтитуловПоУмолчанию.Получить().Получить();
	
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		// Если константа не заполнена, то заполним структуру настройками пустых колонтитулов
		
		Настройка = Новый Структура;
		
		Верхний = Новый Структура;
		Нижний = Новый Структура;
		
		Верхний.Вставить("Выводить", Ложь);
		Верхний.Вставить("НачальнаяСтраница", 1);
		Верхний.Вставить("ТекстСлева",   "");
		Верхний.Вставить("ТекстВЦентре", "");
		Верхний.Вставить("ТекстСправа",  "");
		
		Нижний.Вставить("Выводить", Ложь);
		Нижний.Вставить("НачальнаяСтраница", 1);
		Нижний.Вставить("ТекстСлева",   "");
		Нижний.Вставить("ТекстВЦентре", "");
		Нижний.Вставить("ТекстСправа",  "");
		
		Настройка.Вставить("ВерхнийКолонтитул", Верхний);
		Настройка.Вставить("НижнийКолонтитул",  Нижний);
		
	Иначе
		// Если константа заполнена, но нет нужных нам полей, то заполним структуру настройками пустых колонтитулов
	
		Если Не Настройка.Свойство("ВерхнийКолонтитул") Тогда
			
			Верхний = Новый Структура;
			
			Верхний.Вставить("Выводить", Ложь);
			Верхний.Вставить("НачальнаяСтраница", 1);
			Верхний.Вставить("ТекстСлева",   "");
			Верхний.Вставить("ТекстВЦентре", "");
			Верхний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("ВерхнийКолонтитул", Верхний);
			
		КонецЕсли;
		
		Если Не Настройка.Свойство("НижнийКолонтитул") Тогда
			
			Нижний = Новый Структура;
			
			Нижний.Вставить("Выводить", Ложь);
			Нижний.Вставить("НачальнаяСтраница", 1);
			Нижний.Вставить("ТекстСлева",   "");
			Нижний.Вставить("ТекстВЦентре", "");
			Нижний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("НижнийКолонтитул",  Нижний);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройка;

КонецФункции // ПолучитьНастройкиКолонтитулов()

// Проставление в тексте вместо шаблонов, значений
//
// Параметры
//  Текст           – Строка – Исходный текст шаблона
//  НазваниеОтчета  – Строка – Название отчета
//  Пользователь    – Строка – Имя пользователя
//
// Возвращаемое значение:
//   Строка   – результурующий текст для колонтитула
//
Функция ЗаполнитьТекстКолонтитула(Текст, НазваниеОтчета, Пользователь)

	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[&НазваниеОтчета]", НазваниеОтчета);
	Результат = СтрЗаменить(Результат, "[&Пользователь]", Пользователь);
	
	Возврат Результат;

КонецФункции // ЗаполнитьТекстКолонтитула()

// Установка колонтитулов для отчета
//
// Параметры
//  ТабличныйДокумент  – ТабличныйДокумент – Отчет, у которого необходимо установить колонтитулы
//  НазваниеОтчета     – Строка            – Название отчета для вывода в колонтитул
//  Пользователь       – Строка            – Имя пользователя для вывода в колонтитул
//
Процедура УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, НазваниеОтчета, Пользователь) Экспорт

	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить          = Настройка.ВерхнийКолонтитул.Выводить;
	ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = Настройка.ВерхнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить          = Настройка.НижнийКолонтитул.Выводить;
	ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = Настройка.НижнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
КонецПроцедуры // УстановитьКолонтитулы()


#Если Клиент Тогда

Функция НайтиВладельцаПоФорме(ОтчетОбъект, ЭтаФорма, Элемент, ПолеОтбора, ПолеЗначения) Экспорт
	ЗначениеВладельца = Неопределено;
	Отбор = ТиповыеОтчеты.ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, Элемент);
	Если Отбор.СтрокаОтбора.Поле = ПолеОтбора или ПолеОтбора.НайтиПоЗначению(Отбор.СтрокаОтбора.Поле) <> Неопределено тогда
		Отбор = ТиповыеОтчеты.ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, ПолеЗначения);
		Если Отбор <> Неопределено тогда
			ЗначениеВладельца = Отбор.Значение;
		КонецЕсли;
		Параметр = ТиповыеОтчеты.ПолучитьПараметрИзФормы(ОтчетОбъект, ЭтаФорма, ПолеЗначения);
		Если ЗначениеВладельца = Неопределено и Параметр <> Неопределено тогда
			ЗначениеВладельца = Параметр.Значение;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеВладельца) = Тип("СписокЗначений") тогда
			Если ЗначениеВладельца.Количество() > 0 тогда
				ЗначениеВладельца = ЗначениеВладельца.Получить(0).Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеВладельца) = Тип("ТаблицаЗначений") тогда
			Если ЗначениеВладельца.Количество() > 0 тогда
				ЗначениеВладельца = ЗначениеВладельца.Получить(0).Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЗначениеВладельца;
КонецФункции
#КонецЕсли


 // Процедура меняет название полей, содержащих название организации, на учереждение
 //
 Процедура ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных) Экспорт
	Для каждого НаборДанных из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле из НаборДанных.Поля Цикл
			Поле.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(Поле.Заголовок);
		КонецЦикла;
	КонецЦикла;
	Для каждого Поле из СхемаКомпоновкиДанных.ВычисляемыеПоля Цикл
		Поле.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(Поле.Заголовок);
	КонецЦикла;
	Для каждого Параметр из СхемаКомпоновкиДанных.Параметры Цикл
		Параметр.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(Параметр.Заголовок);
	КонецЦикла;
	Параметр = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	Параметр.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(Параметр.Значение);
Конецпроцедуры


/////////////////////////////////////////////////////////////////////////////
// ВЫЧИСЛЕНИЕ СОТРУДНИКА

//////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЧИСЛЕНИЯ ПОЛУЧЕНИЯ ДАННЫХ ПО СОТРУДНИКУ

Процедура ПолучитьТаблицуРаботников(Запрос = Неопределено, ТекстЗапроса = Неопределено, НазваниеТаблицы = Неопределено, УдалятьПредыдущийЗапрос = ложь) Экспорт
	
	ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	     |	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо,
	     |	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
	     |	ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение КАК Организация,
	     |	ОсновныеНачисленияРаботниковОрганизаций.Организация КАК ГоловнаяОрганизация,
	     |	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	     |	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяССылка) КАК ПодразделениеОрганизации,
	     |	ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяССылка) КАК Должность
	     |ПОМЕСТИТЬ НеСотрудники
	     |ИЗ
	     |	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |		ПО ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |		ПО ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |			И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |ГДЕ
	     |	РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	     |	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник ЕСТЬ NULL 
	     |	И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо,
	     |	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник,
	     |	ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
	     |	ДополнительныеНачисленияРаботниковОрганизаций.Организация,
	     |	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ),
	     |	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяССылка),
	     |	ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяССылка)
	     |ИЗ
	     |	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |		ПО ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |		ПО ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |			И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |ГДЕ
	     |	РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	     |	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник ЕСТЬ NULL 
	     |	И ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	ОсновныеРаботники.ФизЛицо,
	     |	ОсновныеРаботники.ГоловнаяОрганизация,
	     |	ОсновныеРаботники.Период КАК ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Дата,
	     |	ОсновныеРаботники.Сотрудник,
	     |	ОсновныеРаботники.Состояние
	     |ПОМЕСТИТЬ ОсновныеРаботники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.ФизЛицо КАК ФизЛицо,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Период КАК Период,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		МАКСИМУМ(РаботникиОрганизаций.Сотрудник) КАК Сотрудник,
	     |		МАКСИМУМ(ВЫБОР
	     |				КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	     |						И РаботникиОрганизаций.ПериодЗавершения <= ДатыПоследнихДвижений.Дата
	     |					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	     |				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	     |			КОНЕЦ) КАК Состояние
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.ДАТА КАК Дата,
	     |			ТаблицаДвижений.Физлицо КАК ФизЛицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |				ПО ТаблицаДвижений.ДАТА >= РаботникиОрганизаций.Период
	     |					И ТаблицаДвижений.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	     |					И ТаблицаДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |		ГДЕ
	     |			(РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	     |					ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.ДАТА,
	     |			ТаблицаДвижений.Физлицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |			ПО ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	     |				И ДатыПоследнихДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |				И (РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	     |					ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
	     |				И ДатыПоследнихДвижений.Период = РаботникиОрганизаций.Период
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.ФизЛицо,
	     |		ДатыПоследнихДвижений.Период,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата) КАК ОсновныеРаботники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	Договорники.ФизЛицо,
	     |	Договорники.ГоловнаяОрганизация,
	     |	Договорники.Дата,
	     |	Договорники.ДатаНачала,
	     |	Договорники.Договор,
	     |	Договорники.Договор.Сотрудник КАК Сотрудник
	     |ПОМЕСТИТЬ Договорники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.ФизЛицо КАК ФизЛицо,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала КАК ДатаНачала,
	     |		МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.Ссылка) КАК Договор
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.ДАТА КАК Дата,
	     |			ТаблицаДвижений.Физлицо КАК ФизЛицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |				ПО ТаблицаДвижений.ДАТА >= ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |					И ТаблицаДвижений.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо
	     |					И (ТаблицаДвижений.ГоловнаяОрганизация = ВЫБОР
	     |						КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |							ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |						ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |					КОНЕЦ)
	     |					И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.ДАТА,
	     |			ТаблицаДвижений.Физлицо,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |			ПО ДатыПоследнихДвижений.ФизЛицо = ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо
	     |				И (ДатыПоследнихДвижений.ГоловнаяОрганизация = ВЫБОР
	     |					КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |						ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |					ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |				КОНЕЦ)
	     |				И ДатыПоследнихДвижений.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.ФизЛицо,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала) КАК Договорники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	ТаблицаДвижений.ДАТА,
	     |	ТаблицаДвижений.Физлицо,
	     |	ТаблицаДвижений.ГоловнаяОрганизация,
	     |	ВЫБОР
	     |		КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |				И ОсновныеРаботники.Сотрудник ЕСТЬ NULL 
	     |				И Договорники.Сотрудник ЕСТЬ NULL 
	     |			ТОГДА НеСотрудники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	     |				ИЛИ ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	     |			ТОГДА ОсновныеРаботники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |				И ОсновныеРаботники.ДатаПоследнегоДвижения >= НАЧАЛОПЕРИОДА(ОсновныеРаботники.Дата, МЕСЯЦ)
	     |				И ОсновныеРаботники.ДатаПоследнегоДвижения <= ОсновныеРаботники.Дата
	     |			ТОГДА ОсновныеРаботники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние ЕСТЬ NULL 
	     |			ТОГДА Договорники.Сотрудник
	     |		КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |				И ОсновныеРаботники.ДатаПоследнегоДвижения <= НАЧАЛОПЕРИОДА(ТаблицаДвижений.ДАТА, МЕСЯЦ)
	     |			ТОГДА ВЫБОР
	     |					КОГДА Договорники.Сотрудник ЕСТЬ NULL 
	     |						ТОГДА ОсновныеРаботники.Сотрудник
	     |					КОГДА Договорники.Сотрудник ЕСТЬ НЕ NULL 
	     |						ТОГДА ВЫБОР
	     |								КОГДА Договорники.Договор.ДатаНачала <= ТаблицаДвижений.ДАТА
	     |										И ТаблицаДвижений.ДАТА <= Договорники.Договор.ДатаОкончания
	     |									ТОГДА Договорники.Сотрудник
	     |								КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |										И ОсновныеРаботники.ДатаПоследнегоДвижения >= Договорники.Договор.ДатаОкончания
	     |									ТОГДА ОсновныеРаботники.Сотрудник
	     |								КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |										И ОсновныеРаботники.ДатаПоследнегоДвижения <= Договорники.Договор.ДатаОкончания
	     |									ТОГДА Договорники.Сотрудник
	     |								ИНАЧЕ NULL
	     |							КОНЕЦ
	     |				КОНЕЦ
	     |		ИНАЧЕ ВЫБОР
	     |				КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |					ТОГДА НеСотрудники.Сотрудник
	     |				ИНАЧЕ NULL
	     |			КОНЕЦ
	     |	КОНЕЦ КАК Сотрудник,
	     |	Договорники.Договор,
	     |	ОсновныеРаботники.ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Состояние
	     |ПОМЕСТИТЬ РаботникиПредприятия
	     |ИЗ
	     |	ТаблицаДвижений КАК ТаблицаДвижений
	     |		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеРаботники КАК ОсновныеРаботники
	     |		ПО ТаблицаДвижений.ДАТА = ОсновныеРаботники.Дата
	     |			И ТаблицаДвижений.Физлицо = ОсновныеРаботники.ФизЛицо
	     |			И ТаблицаДвижений.ГоловнаяОрганизация = ОсновныеРаботники.ГоловнаяОрганизация
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Договорники КАК Договорники
	     |		ПО ТаблицаДвижений.ДАТА = Договорники.Дата
	     |			И ТаблицаДвижений.Физлицо = Договорники.ФизЛицо
	     |			И ТаблицаДвижений.ГоловнаяОрганизация = Договорники.ГоловнаяОрганизация
	     |		ЛЕВОЕ СОЕДИНЕНИЕ НеСотрудники КАК НеСотрудники
	     |		ПО ТаблицаДвижений.Физлицо = НеСотрудники.ФизЛицо
	     |			И ТаблицаДвижений.ГоловнаяОрганизация = НеСотрудники.ГоловнаяОрганизация
	     |ГДЕ
	     |	ВЫБОР
	     |			КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |					И ОсновныеРаботники.Сотрудник ЕСТЬ NULL 
	     |					И Договорники.Сотрудник ЕСТЬ NULL 
	     |				ТОГДА НеСотрудники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	     |					ИЛИ ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	     |				ТОГДА ОсновныеРаботники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |					И ОсновныеРаботники.ДатаПоследнегоДвижения >= НАЧАЛОПЕРИОДА(ОсновныеРаботники.Дата, МЕСЯЦ)
	     |					И ОсновныеРаботники.ДатаПоследнегоДвижения <= ОсновныеРаботники.Дата
	     |				ТОГДА ОсновныеРаботники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние ЕСТЬ NULL 
	     |				ТОГДА Договорники.Сотрудник
	     |			КОГДА ОсновныеРаботники.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	     |					И ОсновныеРаботники.ДатаПоследнегоДвижения <= НАЧАЛОПЕРИОДА(ТаблицаДвижений.ДАТА, МЕСЯЦ)
	     |				ТОГДА ВЫБОР
	     |						КОГДА Договорники.Сотрудник ЕСТЬ NULL 
	     |							ТОГДА ОсновныеРаботники.Сотрудник
	     |						КОГДА Договорники.Сотрудник ЕСТЬ НЕ NULL 
	     |							ТОГДА ВЫБОР
	     |									КОГДА Договорники.Договор.ДатаНачала <= ТаблицаДвижений.ДАТА
	     |											И ТаблицаДвижений.ДАТА <= Договорники.Договор.ДатаОкончания
	     |										ТОГДА Договорники.Сотрудник
	     |									КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |											И ОсновныеРаботники.ДатаПоследнегоДвижения >= Договорники.Договор.ДатаОкончания
	     |										ТОГДА ОсновныеРаботники.Сотрудник
	     |									КОГДА ТаблицаДвижений.ДАТА >= Договорники.Договор.ДатаОкончания
	     |											И ОсновныеРаботники.ДатаПоследнегоДвижения <= Договорники.Договор.ДатаОкончания
	     |										ТОГДА Договорники.Сотрудник
	     |									ИНАЧЕ NULL
	     |								КОНЕЦ
	     |					КОНЕЦ
	     |			ИНАЧЕ ВЫБОР
	     |					КОГДА НеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	     |						ТОГДА НеСотрудники.Сотрудник
	     |					ИНАЧЕ NULL
	     |				КОНЕЦ
	     |		КОНЕЦ ЕСТЬ НЕ NULL ";
		 
		 
		
	Если НазваниеТаблицы <> Неопределено тогда
		ТЗ = СтрЗаменить(ТЗ, "ТаблицаДвижений КАК", НазваниеТаблицы+" КАК");
	КонецЕсли;
	Если Запрос <> Неопределено тогда
		ТекстЗапроса = Запрос.Текст;
		Запрос.Текст = ТЗ;
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапроса;
	ИначеЕсли ТекстЗапроса <> Неопределено тогда
		Если УдалятьПредыдущийЗапрос тогда
			ПозицияНачала = Найти(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ");
			ПозицияНачала = ПозицияНачала + 20;
			ПозицияКонца  = Найти(ТекстЗапроса, "//КОНЕЦ ТАБЛИЦАРАБОТНИКОВ");
			ПозицияКонца  = ПозицияКонца  + 27;
			Если ПозицияНачала > 20 И ПозицияКонца > 27 тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Сред(ТекстЗапроса,  ПозицияНачала, ПозицияКонца - ПозицияНачала), "");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ", ТЗ + ";");
			Иначе
				РаботникиПредприятия = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Дата,
				|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ГоловнаяОрганизация,
				|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) КАК Сотрудник,
				|	ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка) КАК Договор,
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаПоследнегоДвижения,
				|	"""" КАК Состояние
				|ПОМЕСТИТЬ РаботникиПредприятия
				|;";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, РаботникиПредприятия, ТЗ + ";");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры


Процедура ПолучитьТаблицуДатуПоследнегоДвижения(Запрос = Неопределено, ТекстЗапроса = Неопределено, НазваниеТаблицы = Неопределено, УдалятьПредыдущийЗапрос = ложь) Экспорт
	
	ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	ОсновныеРаботники.ГоловнаяОрганизация,
	     |	ОсновныеРаботники.Период КАК ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Дата,
	     |	ОсновныеРаботники.Сотрудник,
	     |	ОсновныеРаботники.Состояние
	     |ПОМЕСТИТЬ ОсновныеРаботники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.Сотрудник КАК Сотрудник,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Период КАК Период,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		МАКСИМУМ(ВЫБОР
	     |				КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	     |						И РаботникиОрганизаций.ПериодЗавершения <= ДатыПоследнихДвижений.Дата
	     |					ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	     |				ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	     |			КОНЕЦ) КАК Состояние
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.Дата КАК Дата,
	     |			ТаблицаДвижений.Сотрудник КАК Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |				ПО ТаблицаДвижений.Дата >= РаботникиОрганизаций.Период
	     |					И ТаблицаДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |					И ТаблицаДвижений.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.Дата,
	     |			ТаблицаДвижений.Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	     |			ПО ДатыПоследнихДвижений.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	     |				И ДатыПоследнихДвижений.Период = РаботникиОрганизаций.Период
	     |				И ДатыПоследнихДвижений.Сотрудник = РаботникиОрганизаций.Сотрудник
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.Сотрудник,
	     |		ДатыПоследнихДвижений.Период,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата) КАК ОсновныеРаботники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	     |	Договорники.ГоловнаяОрганизация,
	     |	Договорники.Дата,
	     |	Договорники.Сотрудник,
	     |	Договорники.ДатаНачала,
	     |	Договорники.Договор
	     |ПОМЕСТИТЬ Договорники
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ДатыПоследнихДвижений.Сотрудник КАК Сотрудник,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата КАК Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала КАК ДатаНачала,
	     |		МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.Ссылка) КАК Договор
	     |	ИЗ
	     |		(ВЫБРАТЬ
	     |			ТаблицаДвижений.Дата КАК Дата,
	     |			ТаблицаДвижений.Сотрудник КАК Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	     |			МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала) КАК ДатаНачала
	     |		ИЗ
	     |			ТаблицаДвижений КАК ТаблицаДвижений
	     |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |				ПО ТаблицаДвижений.Дата >= ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |					И (ТаблицаДвижений.ГоловнаяОрганизация = ВЫБОР
	     |						КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |							ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |						ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |					КОНЕЦ)
	     |					И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
	     |					И ТаблицаДвижений.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |		
	     |		СГРУППИРОВАТЬ ПО
	     |			ТаблицаДвижений.Дата,
	     |			ТаблицаДвижений.Сотрудник,
	     |			ТаблицаДвижений.ГоловнаяОрганизация) КАК ДатыПоследнихДвижений
	     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	     |			ПО ДатыПоследнихДвижений.Сотрудник = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	     |				И ДатыПоследнихДвижений.ГоловнаяОрганизация = ВЫБОР
	     |						КОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	     |							ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.Организация
	     |						ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ГоловнаяОрганизация
	     |					КОНЕЦ
	     |				И ДатыПоследнихДвижений.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ДатыПоследнихДвижений.Сотрудник,
	     |		ДатыПоследнихДвижений.ГоловнаяОрганизация,
	     |		ДатыПоследнихДвижений.Дата,
	     |		ДатыПоследнихДвижений.ДатаНачала) КАК Договорники
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ОсновныеРаботники.ГоловнаяОрганизация,
	     |	ОсновныеРаботники.ДатаПоследнегоДвижения,
	     |	ОсновныеРаботники.Дата,
	     |	ОсновныеРаботники.Сотрудник,
	     |	ОсновныеРаботники.Состояние,
	     |	NULL КАК Договор
	     |ПОМЕСТИТЬ РаботникиПредприятия
	     |ИЗ
	     |	ОсновныеРаботники КАК ОсновныеРаботники
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	Договорники.ГоловнаяОрганизация,
	     |	Договорники.Дата,
	     |	Договорники.Сотрудник,
	     |	Договорники.ДатаНачала,
	     |	NULL,
	     |	Договорники.Договор
	     |ИЗ
	     |	Договорники КАК Договорники";
		 
		 
		
	Если НазваниеТаблицы <> Неопределено тогда
		ТЗ = СтрЗаменить(ТЗ, "ТаблицаДвижений КАК", НазваниеТаблицы+" КАК");
	КонецЕсли;
	Если Запрос <> Неопределено тогда
		ТекстЗапроса = Запрос.Текст;
		Запрос.Текст = ТЗ;
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапроса;
	ИначеЕсли ТекстЗапроса <> Неопределено тогда
		Если УдалятьПредыдущийЗапрос тогда
			ПозицияНачала = Найти(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ");
			ПозицияНачала = ПозицияНачала + 20;
			ПозицияКонца  = Найти(ТекстЗапроса, "//КОНЕЦ ТАБЛИЦАРАБОТНИКОВ");
			ПозицияКонца  = ПозицияКонца  + 27;
			Если ПозицияНачала > 20 И ПозицияКонца > 27 тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Сред(ТекстЗапроса,  ПозицияНачала, ПозицияКонца - ПозицияНачала), "");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТАБЛИЦАРАБОТНИКОВ", ТЗ + ";");
			Иначе
				РаботникиПредприятия = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Дата,
				|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) КАК Сотрудник,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ГоловнаяОрганизация,
				|	ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка) КАК Договор,
				|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаПоследнегоДвижения,
				|	"""" КАК Состояние
				|ПОМЕСТИТЬ РаботникиПредприятия
				|;";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, РаботникиПредприятия, ТЗ + ";");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



Процедура ПодставитьРасчетПолей(ТекстЗапроса, ТаблицаВычисленияРаботника, ТаблицаДанныхОРаботниках, ИмяПоляПодразделения = Неопределено, ИмяПоляДолжность = Неопределено, ИмяПоляОрганизация = Неопределено) Экспорт
	
	ПолеПодразделние = "ВЫБОР
	|КОГДА РаботникиПредприятия.ДатаПоследнегоДвижения ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, ДЕНЬ) < НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|				ТОГДА РаботникиПредприятия.Договор.ПодразделениеОрганизации
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|				КОНЕЦ
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние ЕСТЬ NULL 
	|	ТОГДА РаботникиПредприятия.Договор.ПодразделениеОрганизации
	|КОНЕЦ";
	
	ПолеДолжность = "ВЫБОР
	|КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|		И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	ТОГДА РаботникиОрганизаций.ДолжностьЗавершения
	|ИНАЧЕ РаботникиОрганизаций.Должность
	|КОНЕЦ";
	
	ПолеОрганизация = "ВЫБОР
	|КОГДА РаботникиПредприятия.ДатаПоследнегоДвижения ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Состояние = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И НАЧАЛОПЕРИОДА(РаботникиПредприятия.ДатаПоследнегоДвижения, ДЕНЬ) < НАЧАЛОПЕРИОДА(РаботникиПредприятия.Дата, МЕСЯЦ)
	|	ТОГДА ВЫБОР
	|			КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|				ТОГДА РаботникиПредприятия.Договор.организация
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиПредприятия.Дата
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
	|				КОНЕЦ
	|		КОНЕЦ
	|КОГДА РаботникиПредприятия.Договор ЕСТЬ НЕ NULL 
	|		И РаботникиПредприятия.Состояние ЕСТЬ NULL 
	|	ТОГДА РаботникиПредприятия.Договор.Организация
	|КОНЕЦ";
	
	ПолеПодразделние = СтрЗаменить(ПолеПодразделние, "РаботникиПредприятия", ТаблицаВычисленияРаботника);
	ПолеДолжность   = СтрЗаменить(ПолеДолжность, "РаботникиПредприятия", ТаблицаВычисленияРаботника);
	ПолеОрганизация = СтрЗаменить(ПолеОрганизация, "РаботникиПредприятия", ТаблицаВычисленияРаботника);
	
	ПолеПодразделние = СтрЗаменить(ПолеПодразделние, "РаботникиОрганизаций", ТаблицаДанныхОРаботниках);
	ПолеДолжность   = СтрЗаменить(ПолеДолжность, "РаботникиОрганизаций", ТаблицаДанныхОРаботниках);
	ПолеОрганизация = СтрЗаменить(ПолеОрганизация, "РаботникиОрганизаций", ТаблицаДанныхОРаботниках);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Подразделение""", ПолеПодразделние);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Должность""", ПолеДолжность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Организация""", ПолеОрганизация);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Подразделение.*""", "("+ПолеПодразделние+").*");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Должность.*""", "("+ПолеДолжность+").*");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """УправлениеОтчетаВезде.ПодставитьРасчетПолей.Организация.*""", "("+ПолеОрганизация+").*");
	
	
	//подстановка выбора реквизитов
	Если ИмяПоляПодразделения = Неопределено И ИмяПоляДолжность = Неопределено И ИмяПоляОрганизация = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ИсправляемыйТекстЗапроса = ТекстЗапроса;
	
	НомерПозиции = Найти(ТекстЗапроса, "{ВЫБРАТЬ");
	
	Пока НомерПозиции > 0 Цикл
		ИсправляемыйТекстЗапроса = Прав(ИсправляемыйТекстЗапроса, СтрДлина(ИсправляемыйТекстЗапроса) - НомерПозиции + 1); 
		ТекстЗамены = ИсправляемыйТекстЗапроса;
		КонецВыбора = Найти(ТекстЗамены, "}");
		Если КонецВыбора = 0 тогда
			Прервать;
		КонецЕсли;
		ТекстЗамены = Лев(ТекстЗамены, КонецВыбора + 1);
		КопияТекста = ТекстЗамены;
		Если ИмяПоляПодразделения <> Неопределено тогда
			ТекстЗамены = СтрЗаменить(ТекстЗамены, ИмяПоляПодразделения+",", ИмяПоляПодразделения+".*,");
		КонецЕсли;
		
		Если ИмяПоляДолжность <> Неопределено тогда
			ТекстЗамены = СтрЗаменить(ТекстЗамены, ИмяПоляДолжность+",", ИмяПоляДолжность+".*,");
		КонецЕсли;
		
		Если ИмяПоляОрганизация <> Неопределено тогда
			ТекстЗамены = СтрЗаменить(ТекстЗамены, ИмяПоляОрганизация+",", ИмяПоляОрганизация+".*,");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, КопияТекста, ТекстЗамены);
		
		ИсправляемыйТекстЗапроса = Прав(ИсправляемыйТекстЗапроса, СтрДлина(ИсправляемыйТекстЗапроса) - 9);
		НомерПозиции = Найти(Прав(ИсправляемыйТекстЗапроса, СтрДлина(ИсправляемыйТекстЗапроса) - 9), "{ВЫБРАТЬ");
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует представление периода по дате начала и дате окончания.
//
// Параметры
//  ДатаНачала	   – Дата – дата начала периода.
//  ДатаОкончания  – Дата – дата окончания периода.
//  МесяцКратко  - когда Истина, месяц выводится первыми тремя символами
//  СДатами	   – Булево – признак того, что описание периода будет сформирован 
//					 без указания чисел месяца.
//  ГодКратко - когда Истина, год выводится 2-мя знаками
//
// Возвращаемое значение:
//   Строка   – строковое представление периода.
//
Функция ОписаниеПериода(ДатаНачала, ДатаОкончания, МесяцКратко = Истина, СДатами = Истина, ГодКратко = Истина) Экспорт
	
	ЧислоНачала		= День(ДатаНачала);
	ЧислоОкончания	= День(ДатаОкончания);
	
	ФорматГода = ?(ГодКратко, "ДФ = 'гг'", "ДФ = 'гггг'");
	
	Если МесяцКратко Тогда
		ОписаниеМесяцаГода = Лев(Формат(ДатаНачала,   "ДФ = 'MMMM'"),3) + " " + Формат(ДатаНачала,    ФорматГода);
		ОписаниеМесяца2    = Лев(Формат(ДатаОкончания,"ДФ = 'MMMM'"),3) + " " + Формат(ДатаОкончания, ФорматГода);
	Иначе
		Месяц	= Формат(ДатаНачала, "ДФ=MMMM");
		УниверсальныеМеханизмыИнфоком.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 4, , Месяц);
		ОписаниеМесяцаГода = Месяц + " " + Формат(ДатаНачала,    ФорматГода);
		Месяц	= Формат(ДатаОкончания, "ДФ=MMMM");
		УниверсальныеМеханизмыИнфоком.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 4, , Месяц);
		ОписаниеМесяца2    = Месяц + " " + Формат(ДатаОкончания, ФорматГода);
	КонецЕсли;
	
	Если Месяц(ДатаНачала) <> Месяц(ДатаОкончания) Тогда  
		
		Если (ДатаНачала = НачалоМесяца(ДатаНачала)) Или Не СДатами Тогда
			Месяц	= Формат(ДатаНачала, "ДФ=MMMM");
			УниверсальныеМеханизмыИнфоком.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, , Месяц);
			Перваяполовинадат = Месяц + " " + Формат(ДатаНачала,    ФорматГода);
		Иначе
			Перваяполовинадат = "" + ЧислоНачала + " " + ОписаниеМесяцаГода; 
		КонецЕсли;
		
		Если (ДатаОкончания = КонецМесяца(ДатаОкончания)) Или Не СДатами Тогда
			Месяц	= Формат(ДатаОкончания, "ДФ=MMMM");
			УниверсальныеМеханизмыИнфоком.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, , Месяц);
			ВтораяПоловинаДат = Месяц + " " + Формат(ДатаОкончания,    ФорматГода);
		Иначе
			ВтораяПоловинаДат = "" + ЧислоОкончания + " " + ОписаниеМесяца2;
		КонецЕсли;
		
		Возврат Перваяполовинадат + "-" + ВтораяПоловинаДат;
		
	Иначе
		
		Если ДатаНачала = НачалоМесяца(ДатаНачала) И ДатаОкончания + 86399 = КонецМесяца(ДатаОкончания) Или Не СДатами Тогда
			Месяц	= Формат(ДатаНачала, "ДФ=MMMM");
			УниверсальныеМеханизмыИнфоком.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, , Месяц);
			Возврат Месяц + " " + Формат(ДатаНачала,    ФорматГода);
		ИначеЕсли ЧислоНачала = ЧислоОкончания Тогда
			Возврат "" + ЧислоНачала + " " + ОписаниеМесяцаГода;
		Иначе
			Возврат "" + ЧислоНачала + "-" + ЧислоОкончания + " " + ОписаниеМесяцаГода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции	// ОписаниеПериода 
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ДИАГРАММА ГАНТА


// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//	ДопСтрока 	  - строка, выводится справа от группировки. по умолчанию пустая
//
Функция ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель)

	Если ТочкаРодитель = Неопределено Тогда
		СтруктураРодитель = Новый Структура;
	Иначе
		СтруктураРодитель = ТочкаРодитель.Значение
	КонецЕсли;

	СтруктураГруппировок = Новый Структура;
	Для каждого Элемент Из СтруктураРодитель Цикл
	    СтруктураГруппировок.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	ИмяГруппировки  = Выборка.Группировка();
	ЗначениеГруппировки = Выборка[ИмяГруппировки];
	СтруктураГруппировок.Вставить(ИмяГруппировки,ЗначениеГруппировки);
	
	Попытка 
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки + "Представление"];
	Исключение
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки];
	КонецПопытки;	
	
	Если ПустаяСтрока(ПредставлениеГруппировки) Тогда
		ПредставлениеГруппировки = "<...>";
	КонецЕсли;
	
	Диаграмма = СтруктураПараметров.Диаграмма;
	Точка = Диаграмма.УстановитьТочку(СтруктураГруппировок, СтруктураРодитель);
	Точка.Расшифровка = ЗначениеГруппировки;
	Точка.Цвет               = WebЦвета.СветлоЗеленый;
	Точка.ДополнительныйЦвет = WebЦвета.СветлоЗеленый;
	Точка.Текст = ПредставлениеГруппировки;
	
	Возврат Точка;
	
КонецФункции // ВывестиСтрокуГруппировки()

// Вывод отрезков диаграммы.
// Параметры:
//	Выборка -       Выборка из результата запроса по периоду
//	СтруктураПараметров - структура общих параметров
//	ИмяПоказателя - Имя поля показателя. По умолчанию "РесурсЧисло".
//	ЦветОтрезка - Цвет. Если задан, отрезки будут окрашены таким цветом, иначе - цветом из макета
//
Процедура ВывестиИнтервалы(Выборка, СтруктураПараметров, Точка, ПараметрыОтчета)

	Диаграмма = СтруктураПараметров.Диаграмма;
	
	Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
		
		Серия = СтруктураПараметров["Серия" + Выборка.Серия];
		МассивТочек = Диаграмма.ПолучитьЗначение(Точка, Серия);										
		
		НачалоИнтервалов = ПараметрыОтчета.ДатаКон;
		КонецИнтервалов = Дата(1,1,1);
		
		ТекстПодсказки = "";
		Сч = 3;
		
		Пока Выборка.Следующий() Цикл
			
			Сч = Сч - 1;
			Если ТекстПодсказки <> "" и Сч <> 0 тогда
				ТекстПодсказки = ТекстПодсказки + ";";
			КонецЕсли;
			// Если построение слишком долгое, например, выбрана слишком мелкая периодичность, 
			// то его можно прервать (Ctrl+Break)
			#Если Клиент тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
			НачИнтервала = Макс(Выборка.НачалоИнтервала, ПараметрыОтчета.ДатаНач);
			
			КонИнтервала = ?(Выборка.КонецИнтервала = NULL, ПараметрыОтчета.ДатаКон, Мин(Выборка.КонецИнтервала, ПараметрыОтчета.ДатаКон));
			
			НачалоИнтервалов = Мин(НачалоИнтервалов,НачИнтервала);
			КонецИнтервалов = Макс(КонецИнтервалов,КонИнтервала);
			
			Интервал = МассивТочек.Добавить();
			Интервал.Начало = НачИнтервала;
			Интервал.Конец 	= КонИнтервала;
			Если Выборка.Серия = "План" тогда
				Интервал.Цвет = ПараметрыОтчета.мСтильДиаграммыПланУтвержденный;
			Иначе
				Интервал.Цвет = ПараметрыОтчета.мСтильДиаграммыФакт;
			КонецЕсли;
			Интервал.Значение.ДополнительныйЦвет = Интервал.Цвет;
			Интервал.Расшифровка = Выборка.Регистратор;
			Если ПараметрыОтчета.Периодичность = 1 Тогда
				Если сч > 0 тогда
					ТекстПодсказки = ТекстПодсказки + "" + Формат(НачИнтервала, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонИнтервала, "ДФ='ЧЧ:мм дд.ММ'");
				ИначеЕсли сч = 0 тогда
					ТекстПодсказки = ТекстПодсказки + "..."
				КонецЕсли;	
				Интервал.Текст = "" + Формат(НачИнтервала, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонИнтервала, "ДФ='ЧЧ:мм дд.ММ'");;
			Иначе	
				Если сч > 0 тогда
					ТекстПодсказки = ТекстПодсказки + "" + Формат(НачИнтервала, "ДФ=dd.MM.yyyy") + " - " + Формат(КонИнтервала, "ДФ=dd.MM.yyyy");
				ИначеЕсли сч = 0 тогда
					ТекстПодсказки = ТекстПодсказки + "..."
				КонецЕсли;
				Интервал.Текст = ""  + Формат(НачИнтервала, "ДФ=dd.MM.yyyy") + " - " + Формат(КонИнтервала, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
			
			// добавим текущий интервал во все родительские точки
			ТочкаРодитель = Точка.Родитель;
			Пока ТочкаРодитель <> Неопределено Цикл
				
				МассивТочекРодителя = Диаграмма.ПолучитьЗначение(ТочкаРодитель, Серия);										
				ТочкаРодитель = ТочкаРодитель.Родитель;
			КонецЦикла; 
		КонецЦикла;
		
		МассивТочек.Текст = ТекстПодсказки;
		
	КонецЦикла; 
	

КонецПроцедуры

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, ТочкаРодитель = Неопределено, ПараметрыОтчета)
	#Если Клиент тогда
 	Состояние("Вывод отчета");
	ОбработкаПрерыванияПользователя();
	#КонецЕсли

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	
	// Берутся группировки все подряд
	Пока Выборка.Следующий() Цикл

		ПоследняяГруппировка = (Номер = ВсегоГруппировок-1);
		
		// Для каждого значения группировки строим строку диаграммы
		Точка = ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель);
		
		Если НЕ ПоследняяГруппировка Тогда
			ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, Точка, ПараметрыОтчета);
		Иначе	
			ВыборкаДетальныхЗаписей = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ВывестиИнтервалы(ВыборкаДетальныхЗаписей, СтруктураПараметров, Точка, ПараметрыОтчета);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиВыборку()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьДиаграмму(ДиаграммаГанта, ПараметрыОтчета) Экспорт
	
	мЧасДень 			= 0;
	мДеньНеделяМесяц	= 1;
	мНеделяМесяцГод		= 2;
	мМесяцГод		    = 3;
	
	Если ПараметрыОтчета.Периодичность < 0 ИЛИ ПараметрыОтчета.Периодичность > 3 Тогда
		#Если Клиент тогда
			Предупреждение("Не выбрана периодичность!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ДатаНач > ПараметрыОтчета.ДатаКон И ПараметрыОтчета.ДатаКон <> '00010101000000' Тогда
		#Если Клиент тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		#КонецЕсли
		Возврат;
	КонецЕсли; 

	Если ПараметрыОтчета.ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		#Если Клиент тогда
		Предупреждение("Не выбрано ни одной группировки!");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Если ПараметрыОтчета.ДатаНач <> Дата('00010101') Тогда
		ПараметрыОтчета.ДатаНач = НачалоДня(ПараметрыОтчета.ДатаНач);
	КонецЕсли; 
	Если ПараметрыОтчета.ДатаКон <> Дата('00010101') Тогда
		ПараметрыОтчета.ДатаКон = КонецДня(ПараметрыОтчета.ДатаКон);
	КонецЕсли; 
	
	//РезультатЗапроса = СформироватьЗапрос(Регистратор);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("НачалоПериода", НачалоДня(ПараметрыОтчета.ДатаНач));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("КонецПериода",  КонецДня(ПараметрыОтчета.ДатаКон));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаНач", НачалоДня(ПараметрыОтчета.ДатаНач));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоМинуты(КонецДня(ПараметрыОтчета.ДатаКон)));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаСведений", ПараметрыОтчета.ДатаКон);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаПослеНачала", ПараметрыОтчета.ДатаНач + 1);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ТекущаяДата", КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("РаботникОрганизацииВОтпуске", Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	//ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ПомещениеСвободно", Перечисления.Занятость.Свободно);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("Свободен", Перечисления.ТипыПериодическихЗадачРаботника.Свободен);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("Отпуск", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ПараметрыОтчета.ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПараметрыОтчета.ПостроительОтчета.Результат;
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Плоский;
	ДиаграммаГанта.Очистить();
	
	//ДиаграммаГанта.ОбластьЗаголовка.Текст = СформироватьЗаголовок();
	
	// Оформление шкалы времени
	ЭлементыШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	// очистим коллекцию
	ПервыйЭлемент = ЭлементыШкалыВремени[0];// нельзя полностью очитить коллекцию (один элемент будет всегда)
	Для Н = 1 по ЭлементыШкалыВремени.Количество()-1 Цикл
		ЭлементыШкалыВремени.Удалить(ЭлементыШкалыВремени[1]);
	КонецЦикла; 
	
	// заполним коллекцию
	Если ПараметрыОтчета.Периодичность = мДеньНеделяМесяц Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.День;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		Элемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мЧасДень Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.День;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Час;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мНеделяМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
	КонецЕсли;

	// Вывод данных
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Диаграмма", ДиаграммаГанта);
	СтруктураПараметров.Вставить("ВсегоГруппировок", ПараметрыОтчета.ПостроительОтчета.ИзмеренияСтроки.Количество());
	
	Для каждого Серия из ПараметрыОтчета.мМассивПараметров Цикл
		СтруктураПараметров.Вставить("Серия"+Серия, ДиаграммаГанта.УстановитьСерию(Серия));
		Если Серия = "План" тогда
			СтруктураПараметров.СерияПлан.Цвет = ПараметрыОтчета.мСтильДиаграммыПланУтвержденный;
		ИначеЕсли Серия = "Факт" тогда
			СтруктураПараметров.СерияФакт.Цвет = ПараметрыОтчета.мСтильДиаграммыФакт;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиВыборку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, , ПараметрыОтчета);
	
	ДиаграммаГанта.ПоказатьУровеньТочек(0);
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры // СформироватьОтчет()

// Процедура заменяет шаблон запроса к регламентированному календарю на автосгенерированный запрос.
//
Процедура ЗаменитьВСКДТекстЗапросКалендаря(СКД, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов) Экспорт
	
	СоответствиеНаборовДанныхИЗапросов =  Новый Соответствие;
	
	ТекстЗапПоКалендарю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
					   
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
	|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
		|";
		ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	КонецЦикла;
	
	ЗаменитьЗапросККалендарю(СКД.НаборыДанных, ТекстЗапПоКалендарю, ТекстЗапросаЗамены, СоответствиеНаборовДанныхИЗапросов);
	
КонецПроцедуры

Процедура ЗаменитьЗапросККалендарю(НаборыДанных, ТекстЗапросККалендарю, ТекстЗапросЗамены, СоответствиеНаборовДанныхИЗапросов)
	
	Для каждого НаборДанных из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") тогда
			СоответствиеНаборовДанныхИЗапросов.Вставить(НаборДанных.Имя, НаборДанных.Запрос);
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, ТекстЗапросККалендарю, ТекстЗапросЗамены);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") тогда
			ЗаменитьЗапросККалендарю(НаборДанных.Элементы, ТекстЗапросККалендарю, ТекстЗапросЗамены, СоответствиеНаборовДанныхИЗапросов)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗапросыСКДПоСоответсвию(НаборыДанных, СоответствиеНаборовДанныхИЗапросов) Экспорт
	
	Для каждого НаборДанных из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") тогда
			НаборДанных.Запрос = 	СоответствиеНаборовДанныхИЗапросов.Получить(НаборДанных.Имя);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") тогда
			УстановитьЗапросыСКДПоСоответсвию(НаборДанных.Элементы, СоответствиеНаборовДанныхИЗапросов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСписокМесяцев(ТекстЗапроса, НачалоПериода, КонецПериода) Экспорт
	
	ТекстЗапПоКалендарю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
	
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
	|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ПериодРегистрации
		|";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗапПоКалендарю, ТекстЗапросаЗамены);
	
	Возврат ТекстЗапроса;
	
КонецФункции //ЗаменитьРегистрРегламентированныйПроизводственныйКалендарь

Функция ЗаменитьОбращениеКРегиструСведенийКалендарь(ТекстЗапроса,  НачалоПериода, КонецПериода) Экспорт
	
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
	|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ДатаКалендаря";
	ДтНачМесяца = ДтНачМесяца + 86400;
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ("+Формат(ДтНачМесяца, "ДФ=yyyy")+", "+Месяц(ДтНачМесяца)+", "+День(ДтНачМесяца)+") КАК ДатаКалендаря
		|";
		ДтНачМесяца = ДтНачМесяца + 86400;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.РегламентированныйПроизводственныйКалендарь", "("+ТекстЗапросаЗамены+")");
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает инициалы и фамилию ответсвенного лица используется для получения ФИО a формате И.О. Фамилия
//
Функция ФамилияИнициалыОтветсвенногоЛица(ФизЛицо, Фамилия = "", Имя = "", Отчество = "") Экспорт
	
	Если ТипЗнч(ФизЛицо) = Тип("Строка") и Найти(ФизЛицо, ".") = 2 тогда
		Возврат ФизЛицо;
	Иначе
		ФамилияТекст  = ?(Фамилия <> Неопределено и Фамилия <> Null, Фамилия, "");
		ИмяТекст      = ?(Имя <> Неопределено и Имя <> Null, Имя, "");
		ОтчествоТекст = ?(Отчество <> Неопределено и Отчество <> Null, Отчество, "");
		Возврат ОбщегоНазначения.ИнициалыФизЛицаФамилия(ФизЛицо, ФамилияТекст, ИмяТекст, ОтчествоТекст);
	КонецЕсли;
	
КонецФункции