Функция ПолучитьСписокПодразделений(ИмяСписка) Экспорт
	
	СЗ1 = Новый СписокЗначений;
	ТекДата = ТекущаяДатаСеанса();
	
	
	ДопУсловие1 = "";
	Если ИмяСписка = "Магазины" Тогда
		ДопУсловие1 = ДопУсловие1 + "
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		|	И СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)";
	КонецЕсли;
	
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.ДатаОткрытия
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
	|	И СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И СтруктурныеЕдиницы.ДатаОткрытия <= &ДатаОткрытия
	|	И СтруктурныеЕдиницы.Активное = ИСТИНА" +  ДопУсловие1 + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктурныеЕдиницы.НомерТочки";
	
	Запрос1.УстановитьПараметр("ДатаОткрытия", НачалоДня(ТекДата) + 7*86400); 
	
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	// добавим сначала обычные подразделения
	Пока Выб1.Следующий() Цикл
		Если Выб1.ДатаОткрытия <= НачалоДня(ТекДата) Тогда
			СЗ1.Добавить(Выб1.Ссылка, Строка(Выб1.Ссылка));
		КонецЕсли;
	КонецЦикла;
	
	Выб1.Сбросить();
	
	// а затем новые, готовящиеся к открытию
	Пока Выб1.Следующий() Цикл
		Если Выб1.ДатаОткрытия > НачалоДня(ТекДата) Тогда
			СЗ1.Добавить(Выб1.Ссылка, "(нов.) " + Строка(Выб1.Ссылка));
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат СЗ1;
	
КонецФункции // ()

Функция ПолучитьДобавкуКЗаголовкуОкна() Экспорт
	
	ТекДата = ПолучитьРабочуюДатуМОС();
	СтрокаРез = ". Раб. дата - " + Формат(ТекДата, "ДЛФ=Д") + ". Пользователь - " + Строка(ПараметрыСеанса.ТекущийПользователь);
	Возврат СтрокаРез;
	
КонецФункции

Функция ПолучитьРабочуюДатуМОС() Экспорт

	ТекДата = ТекущаяДатаСеанса();
	Если МеханизмОбменаСообщениямиПовтИсп.ЭтоТестовыйРежимМОС() Тогда
		Дата1 = Константы.ДатаТестированияМОС.Получить();
		Если ЗначениеЗаполнено(Дата1) Тогда
			Время1 = ТекДата - НачалоДня(ТекДата);
			Дата1 = Дата1 + Время1;
		Иначе
			Дата1 = ТекДата;
		КонецЕсли;
	Иначе
		Дата1 = ТекДата;
	КонецЕсли;
	Возврат Дата1;
	
КонецФункции // ()

Функция ПолучитьЗначениеTTL() Экспорт

	Возврат 30;

КонецФункции // ()

Функция ПолучитьТекущуюДатуСеанса() Экспорт

	Возврат ТекущаяДатаСеанса();

КонецФункции // ()

Функция ПолучитьТЗСмен(Дата1 = Неопределено) Экспорт
	
	Если Дата1 = Неопределено Тогда
		Дата1 = ПолучитьРабочуюДатуМОС();
	КонецЕсли;
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	ТабельРаботыПродавцов.Сотрудник,
	|	ТабельРаботыПродавцов.ТорговаяТочка КАК Магазин,
	|	ТабельРаботыПродавцов.Период КАК ДатаСмены,
	|	ВЫБОР
	|		КОГДА ТабельРаботыПродавцов.СвойствоПродавца = 2
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСтаршийСмены
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Период = &Период";
	
	Запрос1.УстановитьПараметр("Период", НачалоДня(Дата1));
		
	Возврат Запрос1.Выполнить().Выгрузить();
	
КонецФункции // ()

Функция ПолучитьСтаршегоТекущейСмены(ТорговаяТочка, Дата1 = Неопределено) Экспорт

	ТЗСмен = ПолучитьТЗСмен(Дата1);
	Для каждого СтрокаТЗСмен Из ТЗСмен Цикл
		Если СтрокаТЗСмен.Магазин = ТорговаяТочка И СтрокаТЗСмен.ЭтоСтаршийСмены Тогда
			Возврат СтрокаТЗСмен.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ()

Функция СоздатьИОтправитьСообщение(ПараметрыСообщения, ВозвращатьСсылку = ЛОЖЬ) Экспорт
	
	ДокОбъект = Документы.СообщениеМОС.СоздатьДокумент();
	Если НЕ ПараметрыСообщения.Свойство("Дата") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.Дата) Тогда
		ПараметрыСообщения.Вставить("Дата", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если НЕ ПараметрыСообщения.Свойство("ТипСообщения") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.ТипСообщения) Тогда
		ПараметрыСообщения.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
	КонецЕсли;
	
	Если НЕ ПараметрыСообщения.Свойство("ВидПолучателей") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.ВидПолучателей) Тогда
		ПараметрыСообщения.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.УказаннаяРоль);
	КонецЕсли;
	
	Если НЕ ПараметрыСообщения.Свойство("Тема") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.Тема) Тогда
		Возврат "Не указана или не заполнена тема сообщения";
	КонецЕсли;
	
	Если НЕ ПараметрыСообщения.Свойство("РольПолучателя") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.РольПолучателя) Тогда
		Если ДокОбъект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
			Возврат "Не указана или не заполнена роль получателя";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыСообщения.Свойство("ТекстСообщения") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.ТекстСообщения) Тогда
		Возврат "Не указан или не заполнен текст сообщения";
	КонецЕсли;
	
	Если НЕ ПараметрыСообщения.Свойство("Автор") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.Автор) Тогда
		ПараметрыСообщения.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Если НЕ ПараметрыСообщения.Свойство("СрокАктуальностиСообщения") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.СрокАктуальностиСообщения) Тогда
		ПараметрыСообщения.Вставить("СрокАктуальностиСообщения", МеханизмОбменаСообщениями.ПолучитьЗначениеTTL());
	КонецЕсли;
	
	//Если НЕ ПараметрыСообщения.Свойство("Отправитель") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.Отправитель) Тогда
	//	Возврат "Не указана или не заполнена роль отправителя";
	//КонецЕсли;
		
	Если ПараметрыСообщения.Свойство("Товар") И НЕ ЗначениеЗаполнено(ПараметрыСообщения.Товар) Тогда
		Возврат "Указан, но не заполнен товар";
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("Основание") И НЕ ЗначениеЗаполнено(ПараметрыСообщения.Основание) Тогда
		Возврат "Указано, но не заполнено основание";
	КонецЕсли;
	
	ШаблонСообщений = "";
	Если ПараметрыСообщения.Свойство("ШаблонСообщений", ШаблонСообщений) И НЕ ЗначениеЗаполнено(ШаблонСообщений) Тогда
		Возврат "Указан, но не заполнен шаблон сообщений";
	КонецЕсли;
	
	Если ПараметрыСообщения.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
		Если НЕ ПараметрыСообщения.Свойство("ТипИнцидента") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.ТипИнцидента) Тогда
			Возврат "Не указан или не заполнен тип инцидента";
		КонецЕсли;
		Если НЕ ПараметрыСообщения.Свойство("СтатусИнцидента") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСообщения.СтатусИнцидента) Тогда
			ПараметрыСообщения.Вставить("СтатусИнцидента", 1);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСообщения.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов Тогда
		Если НЕ ПараметрыСообщения.Свойство("СписокМагазинов") Тогда
			Возврат "Не указан список магазинов";
		ИначеЕсли ТипЗнч(ПараметрыСообщения.СписокМагазинов) <> Тип("Массив") Тогда
			Возврат "Указанный список магазинов должен иметь тип ""Массив""";
		ИначеЕсли ПараметрыСообщения.СписокМагазинов.Количество() = 0 Тогда
			Возврат "Указанный список магазинов не заполнен";
		КонецЕсли;
	ИначеЕсли ПараметрыСообщения.ВидПолучателей = Перечисления.ВидыПолучателейМОС.ВсеМагазины Тогда
		СЗ1 = ПолучитьСписокПодразделений("Магазины");
		ПараметрыСообщения.Вставить("СписокМагазинов", СЗ1.ВыгрузитьЗначения());
	КонецЕсли;

	Если ПараметрыСообщения.Свойство("СтруктурныеЕдиницы") Тогда
		Для каждого СтрокаТЗ1 Из ПараметрыСообщения.СтруктурныеЕдиницы Цикл
			СтрокаТЧ1 = ДокОбъект.СтруктурныеЕдиницы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ1, СтрокаТЗ1);
		КонецЦикла;
	КонецЕсли;
	//+++АК SHEP 20160504
	Если ПараметрыСообщения.Свойство("РолиПолучателей") Тогда
		Для Каждого СтрокаТЧ Из ПараметрыСообщения.РолиПолучателей Цикл
			ЗаполнитьЗначенияСвойств(ДокОбъект.РолиПолучателей.Добавить(), СтрокаТЧ);
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 20160504
	//+++АК SHEP 20160627: заполняем по шаблону
	Если ЗначениеЗаполнено(ШаблонСообщений) Тогда
		МассивТЧДляЗаполнения = Новый Массив;
		МассивТЧДляЗаполнения.Добавить("РолиПолучателей");
		МассивТЧДляЗаполнения.Добавить("АдресаЭП");
		Для Каждого ИмяТЧ Из МассивТЧДляЗаполнения Цикл
			ШаблонСообщенийТЧ = ШаблонСообщений[ИмяТЧ];
			Для Каждого СтрокаТЧ Из ШаблонСообщенийТЧ Цикл
				ЗаполнитьЗначенияСвойств(ДокОбъект[ИмяТЧ].Добавить(), СтрокаТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 20160627
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПараметрыСообщения);
	
	Если ПараметрыСообщения.Свойство("ПрямыеПолучатели") Тогда
		ДокОбъект.ПрямыеПолучатели.Загрузить(ПараметрыСообщения.ПрямыеПолучатели);
	КонецЕсли;
	
	Если ПараметрыСообщения.ВидПолучателей = Перечисления.ВидыПолучателейМОС.ВсеМагазины
			ИЛИ ПараметрыСообщения.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов Тогда
		ТЗСмен = ПолучитьТЗСмен(ДокОбъект.Дата);
		Для каждого Магазин1 Из ПараметрыСообщения.СписокМагазинов Цикл
			СтрокаТЧП = ДокОбъект.СтруктурныеЕдиницы.Добавить();
			СтрокаТЧП.СтруктурнаяЕдиница = Магазин1;
			
			СО1 = Новый Структура("Магазин, ЭтоСтаршийСмены", Магазин1, Истина);
			МСС1 = ТЗСмен.НайтиСтроки(СО1);
			Если МСС1.Количество() > 0 Тогда
				СтрокаТЧП.СтаршийСмены = МСС1[0].Сотрудник;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Номер) Тогда
		ДокОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("ВложенияКПисьму") Тогда
		ВложенияКПисьму = ПараметрыСообщения.ВложенияКПисьму;
		Если ВложенияКПисьму.Количество() > 0 Тогда
			НомерСообщения = СокрЛП(ДокОбъект.Номер);
			ПолныйКаталог2 = СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "MessAtt\"  + НомерСообщения;
			МСРез2 = НайтиФайлы(ПолныйКаталог2);
			Если МСРез2.Количество() = 0 Тогда
				СоздатьКаталог(ПолныйКаталог2);
			КонецЕсли;
			Для каждого СтрокаТЗВП Из ВложенияКПисьму Цикл
				ПолноеИмяФайла2 = ПолныйКаталог2 + "\" + СтрокаТЗВП.ИмяФайла;
				КопироватьФайл(СтрокаТЗВП.ПолноеИмяФайла, ПолноеИмяФайла2);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыСообщения.Свойство("ФлХТМЛ") Тогда
		ДокОбъект.ФлХТМЛ=ПараметрыСообщения.ФлХТМЛ;	
	КонецЕсли;
	Если ПараметрыСообщения.Свойство("ХТМЛТекст") Тогда
		ДокОбъект.ХТМЛТекст=ПараметрыСообщения.ХТМЛТекст;	
	КонецЕсли;
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);

	Если ВозвращатьСсылку Тогда
		Возврат ДокОбъект.Ссылка;
	Иначе	
		Возврат "";
	КонецЕсли;	
		
	
КонецФункции // ()

Процедура СоздатьИОтправитьАвтоматическоеСообщение(ПараметрыСообщения, Событие) Экспорт

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователей.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей.СобытияАвторассылки КАК РолиПользователей
	|ГДЕ
	|	РолиПользователей.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РолиПользователей.Событие = &Событие
	|	И РолиПользователей.РассылатьДочернимРолям = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователей.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|ГДЕ
	|	РолиПользователей.ПометкаУдаления = ЛОЖЬ
	|	И РолиПользователей.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РолиПользователейСобытияАвторассылки.Ссылка
	|			ИЗ
	|				Справочник.РолиПользователей.СобытияАвторассылки КАК РолиПользователейСобытияАвторассылки
	|			ГДЕ
	|				РолиПользователейСобытияАвторассылки.Ссылка.ПометкаУдаления = ЛОЖЬ
	|				И РолиПользователейСобытияАвторассылки.Событие = &Событие
	|				И РолиПользователейСобытияАвторассылки.РассылатьДочернимРолям = ИСТИНА)";
	
	Запрос1.УстановитьПараметр("Событие", Событие);
	
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	Пока Выб1.Следующий() Цикл
		ПараметрыСообщения.Вставить("РольПолучателя", Выб1.Ссылка);
		СоздатьИОтправитьСообщение(ПараметрыСообщения);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСкладПоставщикТовара(Товар, Подразделение, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ПолучитьРабочуюДатуМОС();
	КонецЕсли;
	
	
	//ГруппаТоваров = Товар;
	//Пока ЗначениеЗаполнено(ГруппаТоваров) Цикл
	//	Запрос1 = Новый Запрос;
	//	Запрос1.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик КАК СкладПоставщик
	//	|ИЗ
	//	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	//	|			&ДатаСреза,
	//	|			ГруппаНоменклатуры = &ГруппаНоменклатуры
	//	|				И ТорговаяТочка = &ТорговаяТочка) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
	//	
	//	Запрос1.УстановитьПараметр("ДатаСреза", Дата);
	//	Запрос1.УстановитьПараметр("ГруппаНоменклатуры", ГруппаТоваров);
	//	Запрос1.УстановитьПараметр("ТорговаяТочка", Подразделение);
	//	
	//	
	//	Рез1 = Запрос1.Выполнить();
	//	Если НЕ Рез1.Пустой() Тогда
	//		Выб1 = Рез1.Выбрать();
	//		Выб1.Следующий();
	//		Возврат Выб1.СкладПоставщик;
	//	КонецЕсли;
	//	
	//	ГруппаТоваров = ГруппаТоваров.Родитель;
	//КонецЦикла;
	
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик КАК СкладПоставщик
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ГруппаУРЗ = &ГруппаУРЗ
	|				И ТорговаяТочка = &ТорговаяТочка) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
	
	Запрос1.УстановитьПараметр("ДатаСреза", Дата);
	Запрос1.УстановитьПараметр("ГруппаУРЗ", Товар.ГруппаНоменклатурыУРЗ);
	Запрос1.УстановитьПараметр("ТорговаяТочка", Подразделение);
	
	Рез1 = Запрос1.Выполнить();
	Если НЕ Рез1.Пустой() Тогда
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.СкладПоставщик;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ()

Функция ПолучитьСтруктурнуюЕдиницуПоКоду(Знач Код) Экспорт

	Если МеханизмОбменаСообщениямиПовтИсп.ЭтоТестовыйРежимМОС() Тогда
		Если Код = 99999 Тогда
			Возврат Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", 191);
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", Код);

КонецФункции // ()



//Функция ПолучитьРольПользователяПоСкладу(Склад) Экспорт

//	Запрос1 = Новый Запрос;
//	Запрос1.Текст = 
//	"ВЫБРАТЬ
//	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
//	|ИЗ
//	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
//	|			&Дата,
//	|			ТипРоли = &ТипРоли
//	|				И Объект = &Объект) КАК СоответствиеОбъектРольСрезПоследних";
//	
//	Запрос1.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ОператорСклада);
//	Запрос1.УстановитьПараметр("Объект", Склад);
//	Запрос1.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
//	
//	Рез1 = Запрос1.Выполнить();
//	Если Рез1.Пустой() Тогда
//		Возврат Неопределено;
//	Иначе
//		Выб1 = Рез1.Выбрать();
//		Выб1.Следующий();
//		Возврат Выб1.РольПользователя;
//	КонецЕсли;

//КонецФункции // ()

Функция ПолучитьРасчетчикаПоТоваруИМагазину(Товар, Магазин) Экспорт
	
	// Найдём склад-поставщик
	СкладПоставщик = ПолучитьСкладПоставщикТовара(Товар, Магазин);
	Если НЕ ЗначениеЗаполнено(СкладПоставщик) Тогда
		ТекстСообщения = "Не найден склад-поставщик (необходим для поиска расчётчика)! Исходные данные:"
		+ Символы.ПС + "Товар: " + Строка(Товар)
		+ Символы.ПС + "Структурная единица: " + Строка(Магазин);
		Сообщить(ТекстСообщения);
		//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	//  получим расчётчика по складу-поставщику и товару
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	РасчетчикиГруппыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	|ГДЕ
	|	РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РасчетчикиГруппыНоменклатуры.Ссылка.Склад = &Склад
	|	И РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры";
	
	Запрос1.УстановитьПараметр("ГруппаНоменклатуры", Товар);
	Запрос1.УстановитьПараметр("Склад", СкладПоставщик);
	
	Родитель1 = Товар;
	Пока ЗначениеЗаполнено(Родитель1) Цикл
		Запрос1.УстановитьПараметр("ГруппаНоменклатуры", Родитель1);
		Рез1 = Запрос1.Выполнить();
		Если НЕ Рез1.Пустой() Тогда
			Выб1 = Рез1.Выбрать();
			Выб1.Следующий();
			Возврат Выб1.Ссылка;
		КонецЕсли;
		Родитель1 = Родитель1.Родитель;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ()

//Функция ПолучитьРольПользователяПоРасчетчику(Расчетчик) Экспорт
//	
//	Запрос1 = Новый Запрос;
//	Запрос1.Текст = 
//	"ВЫБРАТЬ
//	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
//	|ИЗ
//	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
//	|			&Дата,
//	|			ТипРоли = &ТипРоли
//	|				И Объект = &Объект) КАК СоответствиеОбъектРольСрезПоследних";
//	
//	Запрос1.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.Расчетчики);
//	Запрос1.УстановитьПараметр("Объект", Расчетчик);
//	Запрос1.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
//	
//	Рез1 = Запрос1.Выполнить();
//	Если Рез1.Пустой() Тогда
//		Возврат Неопределено;
//	Иначе
//		Выб1 = Рез1.Выбрать();
//		Выб1.Следующий();
//		Возврат Выб1.РольПользователя;
//	КонецЕсли;
//	
//КонецФункции // ()

Функция ПолучитьРольПользователяПоТипуРолиИОбъекту(ТипРоли, Объект, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&Дата,
	|			ТипРоли = &ТипРоли
	|				И Объект = &Объект) КАК СоответствиеОбъектРольСрезПоследних";
	
	Запрос1.УстановитьПараметр("ТипРоли", ТипРоли);
	Запрос1.УстановитьПараметр("Объект", Объект);
	Запрос1.УстановитьПараметр("Дата", Дата);	
	Рез1 = Запрос1.Выполнить();
	
	Если Рез1.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.РольПользователя;
	КонецЕсли;
	
КонецФункции // ()

Функция ПолучитьРольПолучателяДляИнцидента(Сообщение) Экспорт

	//Если Сообщение.КодНаправления = 0 Тогда
	//	Магазин = Сообщение.ОтИмени;
	//Иначе
		Магазин = Сообщение.Отправитель;
	//КонецЕсли;
	
	//Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", "");
	
	Товар = Сообщение.Товар;
	Производитель = Сообщение.Производитель;
	ХотЛайнИТ = ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("HotLineIT");
	
	Если Сообщение.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
		// если на основании предопределённого шаблона, то адресуем в зависимости от шаблона
		// если на основании обычного шаблона, то адресуем по аналогии с претензией по качеству
	
		Если Сообщение.ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.ПретензияКСкладу Тогда
		
			//ищем склад-поставщик для данного товара
			СкладПоставщик = ПолучитьСкладПоставщикТовара(Товар, Магазин);
			Если НЕ ЗначениеЗаполнено(СкладПоставщик) Тогда
				ТекстСообщения = "Не найден склад-поставщик! Исходные данные:"
						+ Символы.ПС + "Товар: " + Строка(Товар)
						+ Символы.ПС + "Структурная единица: " + Строка(Магазин);
				
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		
			//  по складу ищем роль и, если всё нашли, то заполняем эту роль
			Сообщение.РольПолучателя = ПолучитьРольПользователяПоТипуРолиИОбъекту(ПланыВидовХарактеристик.ТипыРолейПользователя.ОператорСклада, СкладПоставщик);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль для склада! Исходные данные:"
						+ Символы.ПС + "Склад: " + Строка(СкладПоставщик);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Сообщение.ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.ПретензияРасчетчику Тогда	
			
			// вычислим расчётчика по товару
			Расчетчик = ПолучитьРасчетчикаПоТоваруИМагазину(Товар, Магазин);
			Если НЕ ЗначениеЗаполнено(Расчетчик) Тогда
				ТекстСообщения = "Не удалось найти расчетчика по товару и магазину! Исходные данные:"
						+ Символы.ПС + "Товар: " + Строка(Товар);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
							
			// найдём роль по найденному расчётчику
			Сообщение.РольПолучателя = ПолучитьРольПользователяПоТипуРолиИОбъекту(ПланыВидовХарактеристик.ТипыРолейПользователя.Расчетчики, Расчетчик);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль для расчетчика! Исходные данные:"
						+ Символы.ПС + "Расчетчик: " + Строка(Расчетчик);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Сообщение.ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.ПретензияПоКачеству Тогда	
			ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству;
			Сообщение.РольПолучателя = ПолучитьРольТехнологаПоКачествуПоТоваруИПроизводителю(Товар, Производитель, ТипРоли);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль ответственных по качеству! Исходные данные:"
						+ Символы.ПС + "Товар: " + Строка(Товар);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Сообщение.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству Тогда	
			ТипРоли = Сообщение.ШаблонСообщений.ТипИнцидента.ТипРоли;
			Сообщение.РольПолучателя = ПолучитьРольТехнологаПоКачествуПоТоваруИПроизводителю(Товар, Производитель, ТипРоли);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль ответственных по качеству для типа роли """ + Строка(ТипРоли) + """! Исходные данные:"
						+ Символы.ПС + "Товар: " + Строка(Товар)
						+ Символы.ПС + "Производитель: " + Строка(Производитель);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Сообщение.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер Тогда	
			Сообщение.РольПолучателя = ПолучитьРольПользователяПоТипуРолиИОбъекту(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер, Товар);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль с типом ""Бренд-менеджер""! Исходные данные:"
						+ Символы.ПС + "Товар: " + Строка(Товар);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Сообщение.ШаблонСообщений.ТипИнцидента.ТипРоли = ХотЛайнИТ Тогда	
			Сообщение.РольПолучателя = ПолучитьРольПользователяПоТипуРолиИОбъекту(ХотЛайнИТ, Магазин.ТипРозничнойТочки);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль с типом ""Горячая поддержка IT""! Исходные данные:"
						+ Символы.ПС + "Тип розничной точки: " + Строка(Магазин.ТипРозничнойТочки);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Сообщение.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТранспортРазвоз Тогда	
			
			СкладПоставщик = ПолучитьСкладПоставщикТовара(Товар, Магазин);
			Если НЕ ЗначениеЗаполнено(СкладПоставщик) Тогда
				ТекстСообщения = "Не найден склад-поставщик! Исходные данные:"
						+ Символы.ПС + "Товар: " + Строка(Товар)
						+ Символы.ПС + "Структурная единица: " + Строка(Магазин);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			
			Сообщение.РольПолучателя = ПолучитьРольПользователяПоТипуРолиТранспортРазвоз(Магазин, СкладПоставщик);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль с типом ""Транспорт: Развоз""! Исходные данные:"
						+ Символы.ПС + "Товар: " + Строка(Магазин.ТипРозничнойТочки);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			ЕстьТипыКромеСтруктурныхЕдиниц = Ложь;
			ТипРолиСодержитСтруктурнуюЕдиницу = Ложь;
			ОТ1 = Сообщение.ТипИнцидента.ТипРоли.ТипЗначения;
			Если ТипЗнч(ОТ1) = Тип("ОписаниеТипов") Тогда
				Для каждого Тип1 Из ОТ1.Типы() Цикл
					Если Тип1 = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
						ТипРолиСодержитСтруктурнуюЕдиницу = Истина;
					Иначе
						ЕстьТипыКромеСтруктурныхЕдиниц = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 
						Если ЕстьТипыКромеСтруктурныхЕдиниц И НЕ ЗначениеЗаполнено(Сообщение.ОбъектИнцидента) Тогда
				ТекстСообщения = "Не заполнен ""Объект инцидента""";
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);
				//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
				Возврат Ложь;
			ИначеЕсли ТипРолиСодержитСтруктурнуюЕдиницу И НЕ ЕстьТипыКромеСтруктурныхЕдиниц Тогда
				Если ЗначениеЗаполнено(Сообщение.Отправитель) И ТипЗнч(Сообщение.Отправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
					Сообщение.ОбъектИнцидента =Сообщение.Отправитель;
				Иначе
					Сообщение.ОбъектИнцидента = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
				КонецЕсли; 
			КонецЕсли;
			Сообщение.РольПолучателя = ПолучитьРольПользователяПоТипуРолиИОбъекту(Сообщение.ТипИнцидента.ТипРоли, Сообщение.ОбъектИнцидента);
			Если НЕ ЗначениеЗаполнено(Сообщение.РольПолучателя) Тогда
				ТекстСообщения = "Не найдена роль с типом """ + Строка(Сообщение.ТипИнцидента.ТипРоли) + """! Исходные данные:"
						+ Символы.ПС + "Объект: " + Строка(Сообщение.ОбъектИнцидента);
				Сообщить(ТекстСообщения);
				Сообщение.ДополнительныеСвойства.Вставить("ТекстОшибки", ТекстСообщения);

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПолучитьРольТехнологаПоКачествуПоТоваруИПроизводителю(Товар, Производитель, ТипРоли)
	
	МСРолей = ПолучитьРолиПоТоваруИПроизводителю(Товар, Производитель);
	Для каждого Роль1 Из МСРолей Цикл
		// посмотрим, есть ли в типах ролей технолог по качеству
		СтрокаТЧ1 = Роль1.ТипыРолей.Найти(ТипРоли, "ТипРоли");
		Если СтрокаТЧ1 <> Неопределено Тогда
			Возврат Роль1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ()


Функция ПолучитьРольПользователяПоТипуРолиТранспортРазвоз(Магазин, Склад)

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольДляТипаРолиТранспортРазвозСрезПоследних.РольПользователя
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРольДляТипаРолиТранспортРазвоз.СрезПоследних(
	|			&Дата1,
	|			Откуда = &Откуда
	|				И Куда = &Куда) КАК СоответствиеОбъектРольДляТипаРолиТранспортРазвозСрезПоследних";
	
	Запрос1.УстановитьПараметр("Дата1", ТекущаяДатаСеанса());
	Запрос1.УстановитьПараметр("Откуда", Склад);
	Запрос1.УстановитьПараметр("Куда", Магазин);
	
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Запрос1.УстановитьПараметр("Куда", Магазин.ТипРозничнойТочки);
		Рез1 = Запрос1.Выполнить();
		Если Рез1.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Выб1 = Рез1.Выбрать();
	Выб1.Следующий();
	Возврат Выб1.РольПользователя;
	
КонецФункции // ()


Функция ПолучитьРолиПоТоваруИПроизводителю(Товар, Производитель)

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ЗначенияСвойствОбъектов_Производители.Значение КАК Производитель
	|ПОМЕСТИТЬ ТЗ_Номенклатура
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов_Производители
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов_Производители.Объект
	|			И (ЗначенияСвойствОбъектов_Производители.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И ЗначенияСвойствОбъектов_Производители.Значение = &Производитель
	|	И ХарактеристикиНоменклатуры.Владелец = &Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователей.Ссылка КАК Родитель,
	|	РолиПользователей.Ссылка КАК Роль
	|ПОМЕСТИТЬ ТЗ_Роли
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РолиПользователей.Родитель,
	|	РолиПользователей.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_Номенклатура.Номенклатура,
	|	ТЗ_Номенклатура.Характеристика,
	|	ТЗ_Номенклатура.Производитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|			ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	|		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|			ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	|	КОНЕЦ КАК Роль
	|ПОМЕСТИТЬ ТЗ_НоменклатураИРоли
	|ИЗ
	|	ТЗ_Номенклатура КАК ТЗ_Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Характеристика
	|		ПО (ТЗ_Номенклатура.Характеристика = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Характеристика.Объект КАК Справочник.ХарактеристикиНоменклатуры)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Производитель
	|		ПО (ТЗ_Номенклатура.Производитель = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Производитель.Объект КАК Справочник.Контрагенты)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_НоменклатураИРоли.Номенклатура,
	|	ТЗ_НоменклатураИРоли.Характеристика,
	|	ТЗ_НоменклатураИРоли.Производитель,
	|	ТЗ_Роли.Роль КАК Роль,
	|	ВЫБОР
	|		КОГДА ТЗ_НоменклатураИРоли.Роль = ТЗ_Роли.Роль
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакЭтоПомощник
	|ИЗ
	|	ТЗ_НоменклатураИРоли КАК ТЗ_НоменклатураИРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Роли КАК ТЗ_Роли
	|		ПО ТЗ_НоменклатураИРоли.Роль = ТЗ_Роли.Родитель";
	
	Запрос1.УстановитьПараметр("Товар", Товар);
	Запрос1.УстановитьПараметр("Производитель", Производитель);
	Выб1 = Запрос1.Выполнить().Выбрать();
	
	МСРез = Новый Массив;
	Пока Выб1.Следующий() Цикл
		ЭлМС1 = МСРез.Найти(Выб1.Роль);
		Если ЭлМС1 = Неопределено И ЗначениеЗаполнено(Выб1.Роль) Тогда
			МСРез.Добавить(Выб1.Роль);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МСРез;
	
КонецФункции // ()


Функция ПолучитьРолиПользователяИлиФизЛица(Пользователь_ФизЛицо) Экспорт

	Если ТипЗнч(Пользователь_ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизЛицо = Пользователь_ФизЛицо;
	ИначеЕсли ТипЗнч(Пользователь_ФизЛицо) = Тип("СправочникСсылка.Пользователи") Тогда
		ФизЛицо = Пользователь_ФизЛицо.ФизЛицо;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	МСРез = Новый Массив;
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|ГДЕ
	|	РолиПользователейСоставРоли.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник";
	
	Запрос1.УстановитьПараметр("Сотрудник", ФизЛицо);
	
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	Пока Выб1.Следующий() Цикл
		МСРез.Добавить(Выб1.Ссылка);
	КонецЦикла;
	
	// добавим подчинённые роли
	Запрос1.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователей.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|ГДЕ
	|	РолиПользователей.Ссылка В ИЕРАРХИИ(&Роли)";
	
	Запрос1.УстановитьПараметр("Роли", МСРез);
	
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	Пока Выб1.Следующий() Цикл
		Если МСРез.Найти(Выб1.Ссылка) = Неопределено  Тогда
			МСРез.Добавить(Выб1.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МСРез;

КонецФункции // ()

Процедура РЗ_ОбработкаСообщений() Экспорт

	ТекДата = ТекущаяДатаСеанса();
	ТЗСмен = ПолучитьТЗСмен(НачалоДня(ТекДата));
	//ТЗСмен2 = ПолучитьТЗСмен(НачалоДня(ТекДата) + 86400);
		
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	СообщениеМОС.Ссылка
	|ИЗ
	|	Документ.СообщениеМОС КАК СообщениеМОС
	|ГДЕ
	|	СообщениеМОС.Проведен = ИСТИНА
	|	И СообщениеМОС.ВсемСменам = ИСТИНА
	|	И ДОБАВИТЬКДАТЕ(СообщениеМОС.Дата, ДЕНЬ, СообщениеМОС.СрокАктуальностиСообщения) >= &ТекДата";
	
	Запрос1.УстановитьПараметр("ТекДата", ТекДата);
	
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	Пока Выб1.Следующий() Цикл
		ДобавитьСменуПолучатель(Выб1.Ссылка, ТЗСмен);
		//ДобавитьСменуПолучатель(Выб1.Ссылка, ТЗСмен2);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСменуПолучатель(Ссылка, ТЗСмен)

	Если НЕ Ссылка.ВсемСменам Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	
	Если Ссылка.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов Тогда
		// в этом случае подразделения берём из документа
		ТЗВрем = ДокОбъект.СтруктурныеЕдиницы.Выгрузить(,"СтруктурнаяЕдиница");
		ТЗВрем.Свернуть("СтруктурнаяЕдиница");
		Для каждого СтрокаТЗ Из ТЗВрем Цикл
			СО1 = Новый Структура;
			СО1.Вставить("Магазин", СтрокаТЗ.СтруктурнаяЕдиница);
			СО1.Вставить("ЭтоСтаршийСмены", Истина);
			СтрокиТЗСмен = ТЗСмен.НайтиСтроки(СО1);
			Для каждого СтрокаТЗСмен Из СтрокиТЗСмен Цикл
				СО2 = Новый Структура;
				СО2.Вставить("СтруктурнаяЕдиница", СтрокаТЗСмен.Магазин);
				СО2.Вставить("СтаршийСмены", СтрокаТЗСмен.Сотрудник);
				СтрокиТЧ1 = ДокОбъект.СтруктурныеЕдиницы.НайтиСтроки(СО2);
				Если СтрокиТЧ1.Количество() = 0 Тогда
					СтрокаТЧ1 = ДокОбъект.СтруктурныеЕдиницы.Добавить();
					СтрокаТЧ1.СтруктурнаяЕдиница = СтрокаТЗСмен.Магазин;
					СтрокаТЧ1.СтаршийСмены = СтрокаТЗСмен.Сотрудник;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Ссылка.ВидПолучателей = Перечисления.ВидыПолучателейМОС.ВсеМагазины Тогда
		// добавляем всё из ТЗСмен
		Для каждого СтрокаТЗСмен Из ТЗСмен Цикл
			Если СтрокаТЗСмен.ЭтоСтаршийСмены Тогда
				СО2 = Новый Структура;
				СО2.Вставить("СтруктурнаяЕдиница", СтрокаТЗСмен.Магазин);
				СО2.Вставить("СтаршийСмены", СтрокаТЗСмен.Сотрудник);
				СтрокиТЧ1 = ДокОбъект.СтруктурныеЕдиницы.НайтиСтроки(СО2);
				Если СтрокиТЧ1.Количество() = 0 Тогда
					СтрокаТЧ1 = ДокОбъект.СтруктурныеЕдиницы.Добавить();
					СтрокаТЧ1.СтруктурнаяЕдиница = СтрокаТЗСмен.Магазин;
					СтрокаТЧ1.СтаршийСмены = СтрокаТЗСмен.Сотрудник;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДокОбъект.Записать();

КонецПроцедуры

Функция ПолучитьРольПоТипуРолиИПодразделению(ТипРоли, Подразделение) Экспорт

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРоль.РольПользователя КАК Роль
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРоль
	|ГДЕ
	|	СоответствиеОбъектРоль.ТипРоли = &ТипРоли
	|	И СоответствиеОбъектРоль.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеОбъектРоль.Период УБЫВ";
	
	Запрос1.УстановитьПараметр("ТипРоли", ТипРоли);
	Запрос1.УстановитьПараметр("Объект", Подразделение);
	
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.Роль;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьШаблоныМагазина() Экспорт
	
	СЗРез = Новый СписокЗначений;
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныСообщенийМОС.Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщенийМОС КАК ШаблоныСообщенийМОС
	|ГДЕ
	|	ШаблоныСообщенийМОС.ПометкаУдаления = ЛОЖЬ
	|	И ШаблоныСообщенийМОС.ПрименяетсяВМагазине = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныСообщенийМОС.Наименование";
	
		
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	Пока Выб1.Следующий() Цикл
		СЗРез.Добавить(Выб1.Ссылка);
	КонецЦикла;
	
	Возврат СЗРез;

КонецФункции // ()

Функция СформироватьСообщениеИзExchMessages() Экспорт

	СоединениеСБДSQL = МеханизмОбменаСообщениямиПовтИсп.ПолучитьСоединениеСБДSQL("SMS_REPL");
	
	ТекстЗапросаКSQL = "
	|USE SMS_REPL;
	|SELECT
	|	CAST([Id] AS char(36)) AS IdStr
	|	,Id
    |	,[TypeAddr]
    |	,Cast(master.dbo.Binary2UID([Role_]) as nvarchar(36)) AS Role
    |	,[Direction]
    |	,[MessageText]
    |	,[MessageType]
  	|	,Cast(master.dbo.Binary2UID([Author]) as nvarchar(36)) AS Author
    |	,[AddDateTime]
    |	,[Status]
    |	,[subject]
	|FROM [SMS_REPL].[dbo].[exch_Messages] (nolock) 
	|WHERE Status = 0
	|ORDER BY [AddDateTime] DESC";
	
	МассивИД = Новый Массив;
	ResultQuery = СоединениеСБДSQL.Execute(ТекстЗапросаКSQL);
	Если ResultQuery <> Неопределено Тогда
		Пока НЕ ResultQuery.Eof() Цикл
			ДатаИВремяСоздания = ResultQuery.Fields("AddDateTime").Value;
			SQL_ID = ResultQuery.Fields("ID").Value;
			Направление = ResultQuery.Fields("Direction").Value;
			
			// сначала поищем это сообщение
			ДокСсылка = Документы.СообщениеМОС.НайтиПоРеквизиту("SQL_ID", SQL_ID);
			Если ЗначениеЗаполнено(ДокСсылка) Тогда
				ДокОбъект = ДокСсылка.ПолучитьОбъект();
			Иначе
				ДокОбъект = Документы.СообщениеМОС.СоздатьДокумент();
				ДокОбъект.Дата = ДатаИВремяСоздания;
				ДокОбъект.SQL_ID = SQL_ID;
			КонецЕсли;
			ТипСообщения = ResultQuery.Fields("MessageType").Value;
			Если ТипСообщения = 2 Тогда
				ДокОбъект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент;
			ИначеЕсли ТипСообщения = 3 Тогда
				ДокОбъект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача;
			Иначе
				ДокОбъект.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение;
			КонецЕсли;
			
			ДокОбъект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов;
			ДокОбъект.КодНаправления = Направление;
			ДокОбъект.Отправитель = Справочники.РолиПользователей.Администратор;
			ДокОбъект.СрокАктуальностиСообщения = ПолучитьЗначениеTTL();
			
			Тема = ResultQuery.Fields("Subject").Value;
			ДокОбъект.Тема = СокрЛП(Тема);
			
			Текст = ResultQuery.Fields("MessageText").Value;
			ДокОбъект.ТекстСообщения = СокрЛП(Текст);
			
			ДокОбъект.Автор = Неопределено;
			УИДАвтора = ResultQuery.Fields("Author").Value;
			ГУИДПользователя = Новый УникальныйИдентификатор(УИДАвтора);
			ПользовательИБ1 = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ГУИДПользователя);
			Если ПользовательИБ1 <> Неопределено Тогда
				Имя1 = ПользовательИБ1.Имя;
				Пользователь1 = Справочники.Пользователи.НайтиПоКоду(Имя1);
				ДокОбъект.Автор = Пользователь1;
			КонецЕсли;
			
			ТипАдресации = ResultQuery.Fields("TypeAddr").Value;
			Если ТипАдресации = 2 Тогда
				ДокОбъект.ВсемСменам = Истина;
			Иначе
				ДокОбъект.ВсемСменам = Ложь;
			КонецЕсли;
			
			ДокОбъект.СтруктурныеЕдиницы.Очистить();
			
			ТекстЗапросаКSQL2 = "
			|SELECT
			|	Id,
			|	IdMes,
			|	ShopNo
		    |FROM [SMS_REPL].[dbo].[exch_Recipients] (nolock) 
			|WHERE IdMes = " + Формат(SQL_ID, "ЧГ = 0");
			
			ResultQuery2 = СоединениеСБДSQL.Execute(ТекстЗапросаКSQL2);
			Если ResultQuery2 <> Неопределено Тогда
				Пока НЕ ResultQuery2.Eof() Цикл
					КодСЕ = ResultQuery2.Fields("ShopNo").Value;
					Магазин = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(КодСЕ);
					Если ЗначениеЗаполнено(Магазин) Тогда
						СтаршийСмены = ПолучитьСтаршегоТекущейСмены(Магазин);
						СтрокаТЧ1 = ДокОбъект.СтруктурныеЕдиницы.Добавить();
						СтрокаТЧ1.СтруктурнаяЕдиница = Магазин;
						СтрокаТЧ1.СтаршийСмены = СтаршийСмены;
					КонецЕсли;
					ResultQuery2.MoveNext();
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				// запишем статус и дату-время формирования сообщения
				ТекстКомандыSQL3 = "UPDATE SMS_REPL.dbo.exch_messages SET Status = 1, Date_Take = '" + Строка(ТекущаяДатаСеанса()) + "' WHERE id = " + Формат(SQL_ID, "ЧГ=0"); 
				СоединениеСБДSQL.Execute(ТекстКомандыSQL3);
			Исключение
				s=1;
			КонецПопытки;
			ResultQuery.MoveNext();
		КонецЦикла;
	КонецЕсли;

КонецФункции // ()

Функция ПолучитьКоличествоНепрочитанныхСообщений() Экспорт

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СообщениеМОС.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.СообщениеМОС КАК СообщениеМОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеМОС.СтруктурныеЕдиницы КАК СообщениеМОССтруктурныеЕдиницы
	|		ПО СообщениеМОС.Ссылка = СообщениеМОССтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	СообщениеМОС.ДатаАктуальности >= &ТекущаяДата
	|	И СообщениеМОССтруктурныеЕдиницы.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И СообщениеМОС.ПометкаУдаления = ЛОЖЬ
	|	И СообщениеМОССтруктурныеЕдиницы.СтаршийСмены = &СтаршийСмены
	|	И (СообщениеМОС.ТипСообщения В (&ТипыСообщений)
	|				И СообщениеМОССтруктурныеЕдиницы.Прочитал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И СообщениеМОС.КодНаправления = 0
	|			ИЛИ СообщениеМОС.СтатусИнцидентаИзменен = ИСТИНА)
	|	И СообщениеМОС.ДатаДоставки <= &ТекущаяДата";
	
	ТекДата = ТекущаяДатаСеанса();
	МассивТС = Новый Массив;
	МассивТС.Добавить(Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
	МассивТС.Добавить(Перечисления.ТипыСообщенийМОС.Задача);
	СтаршийСмены = МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос1.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос1.УстановитьПараметр("ТипыСообщений", МассивТС);
	Запрос1.УстановитьПараметр("ТекущаяДата", ТекДата);
	Запрос1.УстановитьПараметр("СтаршийСмены", СтаршийСмены);
		
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Возврат 0;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.Ссылка;
	КонецЕсли;
	
КонецФункции // ()

Функция ПолучитьНовыйУИДКартинки() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеМОСКартинки.ИД КАК ИД
	               |ИЗ
	               |	Документ.СообщениеМОС.Картинки КАК СообщениеМОСКартинки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИД УБЫВ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИД = Выборка.ИД + 1;
		Возврат ИД;
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьСообщенияСПочтовыхЯщиковМагазинов()

	//УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	//Почта = Новый ИнтернетПочта;
	//Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	//Письмо = Новый ИнтернетПочтовоеСообщение;
	//
	//Почта.Подключиться(Профиль);
	//Письмо.Тема = "Непоступившие заказы за "+Формат(ТекущаяДата(),"ДФ='dd MMMM yyyy'");
	//Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
	//Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	//Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
	//Для Каждого ПолучательЭлемент Из СписокКому Цикл
	//	Получатель = Письмо.Получатели.Добавить();
	//	Получатель.Адрес           = ПолучательЭлемент.Значение;
	//КонецЦикла;	
	//
	//ТекстСообщения = Письмо.Тексты.Добавить();
	//ТекстСообщения.Текст     = "Во вложении находится перечень непоступивших заказов за "+Формат(ТекущаяДата(),"ДФ='dd MMMM yyyy'");
	//ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	//
	//Письмо.Вложения.Добавить(ИмяФайла);
	
	//Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
	//	Почта.Послать(Письмо);
	//КонецЕсли;	
	//Почта.Отключиться();

КонецФункции // ()

Функция ПолучитьСообщенияСПочтовогоЯщика(АдресЭлектроннойПочты) Экспорт
	
	УчетнаяЗапись = ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭлектроннойПочты);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Текст1 = "Не найдена служебная учетная запись для адреса """ + АдресЭлектроннойПочты + """";
		//Сообщить(Текст1);
		//ЗаписьЖурналаРегистрации("Формирование сообщений МОС", УровеньЖурналаРегистрации.Ошибка,,, Текст1);
		Возврат Неопределено;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	СП1 = ПолучитьНастройкиУчетнойЗаписи(УчетнаяЗапись);
	
	СП1.Вставить("Пользователь", АдресЭлектроннойПочты);
	СП1.Вставить("ПользовательSMTP", АдресЭлектроннойПочты);
	СП1.Вставить("ПользовательIMAP", АдресЭлектроннойПочты);
	
	Если Найти(АдресЭлектроннойПочты, "vkusvill.ru") > 0 Тогда
		Профиль.АдресСервераIMAP = "imap.yandex.ru"; 
	ИначеЕсли Найти(АдресЭлектроннойПочты, "gmail.com") > 0 Тогда
		Профиль.АдресСервераIMAP = "imap.gmail.ru"; 
	Иначе
		Текст1 = "Нестандартный адрес ящика """ + АдресЭлектроннойПочты + """";
		ЗаписьЖурналаРегистрации("Формирование сообщений МОС", УровеньЖурналаРегистрации.Ошибка,,, Текст1);
		Возврат Неопределено;
	КонецЕсли;
	
	Профиль.ПарольIMAP = СП1.Пароль; 
	Профиль.ПортIMAP = 143; 

	ЗаполнитьЗначенияСвойств(Профиль, СП1,, "АутентификацияSMTP");
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации[СП1.АутентификацияSMTP];
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Коммент1 = "Поз02 - " + Строка(ТекущаяДатаСеанса()) + ". Адрес ЭП - " + АдресЭлектроннойПочты;
		ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
	КонецЕсли;
	
	Попытка
		//Почта.Подключиться(Профиль);
		Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
		Почта.ТекущийПочтовыйЯщик = "INBOX"; 
		//Сообщить("Подключение выполнено");
	Исключение
		Текст1 = "Ошибка при подключении - " + ОписаниеОшибки();
		//Сообщить(Текст1);
		ЗаписьЖурналаРегистрации("Формирование сообщений МОС", УровеньЖурналаРегистрации.Ошибка,,, Текст1);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Коммент1 = "Поз03 (Подключение почты) - " + Строка(ТекущаяДатаСеанса()) + ". Адрес ЭП - " + АдресЭлектроннойПочты;
		ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
	КонецЕсли;
	
	МСРез = Новый Массив;
	
	СО1 = Новый Структура;
	СО1.Вставить("Новый", Истина);
	ПослеДаты = НачалоДня(ТекущаяДатаСеанса());
	//СО1.Вставить("ПослеДатыОтправления", '20160301');
	
	//СО1.Вставить("ПослеДатыОтправления", НачалоДня(ТекущаяДатаСеанса()));
	МСЗ2 = Почта.ПолучитьЗаголовки(СО1);
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		КолВоЗаголовков = МСЗ2.Количество();
		Коммент1 = "Поз04 (Заголовки) - " + Строка(ТекущаяДатаСеанса()) + ". Адрес ЭП - " + АдресЭлектроннойПочты + ". Кол-во заголовков - " + Строка(КолВоЗаголовков);
		ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
	КонецЕсли;
	
	МСЗ1 = Новый Массив;
	Для каждого Эл1 Из МСЗ2 Цикл
		Если Эл1.ДатаОтправления >= ПослеДаты Тогда
			МСЗ1.Добавить(Эл1);
		КонецЕсли;
	КонецЦикла;
	
	Письма = Почта.Выбрать(Ложь, МСЗ1);
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		КолВоЗаголовков = МСЗ2.Количество();
		Коммент1 = "Поз05 (Выборка писем) - " + Строка(ТекущаяДатаСеанса()) + ". Адрес ЭП - " + АдресЭлектроннойПочты + ". Кол-во заголовков - " + Строка(КолВоЗаголовков);
		ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
	КонецЕсли;
	
	Для каждого Письмо Из Письма Цикл
		СП1 = Новый Структура;
		СП1.Вставить("Идентификатор", Письмо.Идентификатор);
		СП1.Вставить("ИдентификаторСообщения", Письмо.ИдентификаторСообщения);
		СП1.Вставить("ДатаОтправления", Письмо.ДатаОтправления);
		СП1.Вставить("Тема", Письмо.Тема);
		Если Письмо.Тексты.Количество() > 0 Тогда
			СП1.Вставить("ТекстСообщения", Письмо.Тексты[0].Текст);
		КонецЕсли;
		
		СП1.Вставить("Заголовок", Письмо.Заголовок);
		СП1.Вставить("Отправитель", Письмо.Отправитель);
		
		//Сообщить("Дата - " + Строка(Письмо.ДатаОтправления));
		//Сообщить("Тема - " + Письмо.Тема);
		//Сообщить("ИД - " + Письмо.Идентификатор);
		//Сообщить("ИДСообщения - " + Письмо.ИдентификаторСообщения);
		//Сообщить("Заголовок - " + Письмо.Заголовок);
		
		МСРез.Добавить(СП1);
		
	КонецЦикла;
	
	Почта.Отключиться();
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		КолВоЗаголовков = МСЗ2.Количество();
		Коммент1 = "Поз06 (Отключение почты) - " + Строка(ТекущаяДатаСеанса()) + ". Адрес ЭП - " + АдресЭлектроннойПочты + ". Кол-во заголовков - " + Строка(КолВоЗаголовков);
		ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
	КонецЕсли;
	
	Возврат МСРез;

КонецФункции // ()

Функция ПолучитьНастройкиУчетнойЗаписи(УчетнаяЗапись)

	СП1 = Новый Структура;
	СП1.Вставить("АдресСервераPOP3", УчетнаяЗапись.POP3Сервер);
	СП1.Вставить("АдресСервераSMTP", УчетнаяЗапись.SMTPСервер);
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		СП1.Вставить("ВремяОжидания", УчетнаяЗапись.ВремяОжиданияСервера);
	КонецЕсли; 
	
	СП1.Вставить("Пароль", УчетнаяЗапись.Пароль);
	СП1.Вставить("Пользователь", УчетнаяЗапись.Логин);
	СП1.Вставить("ПортPOP3", УчетнаяЗапись.ПортPOP3);
	СП1.Вставить("ПортSMTP", УчетнаяЗапись.ПортSMTP);
	
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		СП1.Вставить("АутентификацияSMTP", "ПоУмолчанию");
		СП1.Вставить("ПарольSMTP", УчетнаяЗапись.ПарольSMTP);
		СП1.Вставить("ПользовательSMTP", УчетнаяЗапись.ЛогинSMTP);
	Иначе
		СП1.Вставить("АутентификацияSMTP", "БезАутентификации");
		СП1.Вставить("ПарольSMTP", "");
		СП1.Вставить("ПользовательSMTP", "");
	КонецЕсли; 
	
	Возврат СП1;

КонецФункции // ()

Функция ПолучитьУчетнуюЗаписьПоАдресу(АдресЭлектроннойПочты) Экспорт

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныеЗаписиЭлектроннойПочты.Код УБЫВ";
	
	Запрос1.УстановитьПараметр("АдресЭлектроннойПочты", СокрЛП(АдресЭлектроннойПочты));
	
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.Ссылка;
	КонецЕсли;
	
КонецФункции // ()

Процедура СоздатьИС_ОПочтовыхСообщениях(СтруктурнаяЕдиница) Экспорт
	
	АдресЭлектроннойПочты = СокрЛП(СтруктурнаяЕдиница.АдресЭлектроннойПочты);
	Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		Возврат;
	КонецЕсли;
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Коммент1 = "Поз01 - " + Строка(ТекущаяДатаСеанса());
		ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
	КонецЕсли;
	МССообщений = ПолучитьСообщенияСПочтовогоЯщика(АдресЭлектроннойПочты);
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Коммент1 = "Поз99 - " + Строка(ТекущаяДатаСеанса());
		ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
	КонецЕсли;
	Если МССообщений <> Неопределено Тогда
		Для каждого ПочтовоеСообщение1 Из МССообщений Цикл
			// сначала посмотрим, нет ли уже такого сообщения
			АдресИИДПС = СокрЛП(АдресЭлектроннойПочты) + "_-_" + СокрЛП(ПочтовоеСообщение1.ИдентификаторСообщения);
			Запрос1 = Новый Запрос;
			Запрос1.Текст = 
			"ВЫБРАТЬ
			|	СообщениеМОС.Ссылка
			|ИЗ
			|	Документ.СообщениеМОС КАК СообщениеМОС
			|ГДЕ
			|	СообщениеМОС.ПометкаУдаления = ЛОЖЬ
			|	И СообщениеМОС.АдресИ_ИД_ПочтовогоСообщения = &АдресИ_ИД_ПочтовогоСообщения";
			
			Запрос1.УстановитьПараметр("АдресИ_ИД_ПочтовогоСообщения", АдресИИДПС);
			
			Рез1 = Запрос1.Выполнить();
			Если Рез1.Пустой() Тогда
				ДокОбъект1 = Документы.СообщениеМОС.СоздатьДокумент();
				ДокОбъект1.АдресИ_ИД_ПочтовогоСообщения = АдресИИДПС;
				ДокОбъект1.Дата = ТекущаяДатаСеанса();
				ДокОбъект1.СрокАктуальностиСообщения = МеханизмОбменаСообщениями.ПолучитьЗначениеTTL();
				ДокОбъект1.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение;
				ДокОбъект1.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов;
				ДокОбъект1.Тема = "Получено письмо на почтовый ящик """ + СокрЛП(АдресЭлектроннойПочты) + """";
				Если ТипЗнч(ПочтовоеСообщение1.Отправитель) = Тип("Строка") Тогда
					Отправитель = СокрЛП(ПочтовоеСообщение1.Отправитель);
				ИначеЕсли ТипЗнч(ПочтовоеСообщение1.Отправитель) = Тип("ИнтернетПочтовыйАдрес") Тогда
					Отправитель = СокрЛП(ПочтовоеСообщение1.Отправитель.Адрес);
				Иначе 
					Отправитель = "";
				КонецЕсли;
				
				ДокОбъект1.ТекстСообщения = "Новое входящее письмо в почтовом ящике """ + СокрЛП(АдресЭлектроннойПочты) + """. Тема письма: " + ПочтовоеСообщение1.Тема 
						+ Символы.ПС + "Отправитель: " + Отправитель;
				СтрокаТЧ1 = ДокОбъект1.СтруктурныеЕдиницы.Добавить();
				СтрокаТЧ1.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				СтрокаТЧ1.СтаршийСмены = ПолучитьСтаршегоТекущейСмены(СтруктурнаяЕдиница);
				ДокОбъект1.Записать(РежимЗаписиДокумента.Проведение);
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры


Процедура СформироватьИСПоПочте() Экспорт
	
	ВОЗВРАТ;
	
	ДелатьПоВсемМагазинам = Истина;
	
	// в дальнейшем необходимо доработать, чтобы до полуночи
	// выполнялось по работающим магазинам (ДелатьПоВсемМагазинам = Истина),
	// а после полуночи - по всем (и один раз)
	Если ДелатьПоВсемМагазинам Тогда
		СЗМагазинов = ПолучитьСписокПодразделений("Магазины");
		Для каждого ЭлСЗМ Из СЗМагазинов Цикл
			СЕ1 = ЭлСЗМ.Значение;
			//Если СЕ1.Код = "000000473" Тогда
				ПП1 = Новый Массив;
				ПП1.Добавить(СЕ1);
				Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
					Коммент1 = "Поз_100 (Начало ФЗ) - " + ТекущаяДатаСеанса() + ". СЕ - " + СЕ1;
					ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
				КонецЕсли;
				
				ФоновыеЗадания.Выполнить("МеханизмОбменаСообщениями.СоздатьИС_ОПочтовыхСообщениях", ПП1,, "Создание ИС по письмам для " + Строка(СЕ1));
				
				Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
					Коммент1 = "Поз_999 (Конец ФЗ) - " + ТекущаяДатаСеанса() + ". СЕ - " + СЕ1;
					ЗаписьЖурналаРегистрации("ТестМОС_01", УровеньЖурналаРегистрации.Предупреждение,,, Коммент1);
				КонецЕсли;
				
				//СоздатьИС_ОПочтовыхСообщениях(СЕ1);
			//КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭлектроннойПочты) Экспорт

	// сначала определим домен адреса
	ПозицияСобачки = Найти(АдресЭлектроннойПочты, "@");
	Если ПозицияСобачки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Домен = СокрЛП(Сред(АдресЭлектроннойПочты + "  ", ПозицияСобачки + 1));
	АдресСлужебнойУчЗаписи = "m@" + Домен;
		
	УчетнаяЗапись = ПолучитьУчетнуюЗаписьПоАдресу(АдресСлужебнойУчЗаписи);
	
	Возврат УчетнаяЗапись;

КонецФункции // ()
