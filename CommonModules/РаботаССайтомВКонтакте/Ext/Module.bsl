
////////////////////////////////////////////////////////////////             
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьСтрокуПараметровЗапроса(Параметры, access_token) Экспорт
	
	СтрокаПараметров = "";
	Для каждого Параметр Из Параметры Цикл
		Если ЗначениеЗаполнено(Параметр.Значение) Тогда
			//СтрокаПараметров = СтрокаПараметров + Параметр.Ключ + "=" + РаботаСВнешнимВебСервером.URLEncode(Параметр.Значение) + "&";
			СтрокаПараметров = СтрокаПараметров + Параметр.Ключ + "=" +
				?(ТипЗнч(Параметр.Значение)=Тип("Число"), Формат(Параметр.Значение, "ЧГ=0"), Параметр.Значение) + "&"
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПараметров = СтрокаПараметров + "access_token=" + access_token;
	
	Возврат СтрокаПараметров;
	
КонецФункции

Функция СформироватьТекстОшибкиAPI(ОписаниеОшибки, ОтветСервера) Экспорт
	
	ТекстОшибки = ОписаниеОшибки;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки + ": ";
	КонецЕсли;
	
	error_msg = "";
	Если ОтветСервера.Свойство("error_msg", error_msg) Тогда
		Если ЗначениеЗаполнено(error_msg) Тогда
			ТекстОшибки = ТекстОшибки + error_msg + " (Код: " + ОтветСервера.error_code + ")";
		Иначе
			ТекстОшибки = ТекстОшибки + "Код = " + ОтветСервера.error_code;
		КонецЕсли;
		
	ИначеЕсли ОтветСервера.Свойство("error_desc", error_msg) Тогда
		Если ЗначениеЗаполнено(error_msg) Тогда
			ТекстОшибки = ТекстОшибки + error_msg + " (Код: " + ОтветСервера.error_code + ")";
		Иначе
			ТекстОшибки = ТекстОшибки + "Код = " + ОтветСервера.error_code;
		КонецЕсли;
		
	Иначе
		ТекстОшибки = ТекстОшибки + "Код = " + ОтветСервера.error_code;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПрочитатьОтветAPI(ИмяФайла, УдалитьФайл=Истина)
	
	Ответ = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ЛокальноеИмя = "response" Тогда
		// нормальный ответ - заполним все поля
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Ответ.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ЛокальноеИмя = "error" Тогда
		// ошибка - считаем только данные об ошибке
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "error_code" ИЛИ
				ЧтениеXML.ЛокальноеИмя = "error_msg"
			Тогда
				Ответ.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Если УдалитьФайл Тогда
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции


////////////////////////////////////////////////////////////////
// МЕТОДЫ РАБОТЫ С ПАРАМЕТРАМИ (в т.ч. access_token)
#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Функция ПолучитьЗначениеПараметра(ИмяПараметра) Экспорт
	Возврат РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(Справочники.ИсточникиОбращений.ВКонтакте, ИмяПараметра);
КонецФункции

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Функция access_tokenПолучить() Экспорт
	
	Возврат ПолучитьЗначениеПараметра("access_token");
	
КонецФункции

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра) Экспорт
	РегистрыСведений.ПараметрыРаботыССоцСетями.УстановитьЗначениеПараметра(Справочники.ИсточникиОбращений.ВКонтакте, ИмяПараметра, ЗначениеПараметра);
КонецПроцедуры

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура access_tokenУстановить(access_token) Экспорт
	УстановитьЗначениеПараметра("access_token", access_token);
КонецПроцедуры

////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ ОБРАЩЕНИЯ К VK API

Функция ВызватьМетодAPI(ИмяМетода, Параметры, access_token, ОтветВВидеXML=Ложь, ИспользоватьWinHTTP=Истина) Экспорт
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Если Не ИспользоватьWinHTTP Тогда
		
		// Не на всех системах корректно работает HTTPСоединение по защищенному протоколу SSL
		// (ошибка SSL connection error). Поэтому рекомендуется использовать COM объект WinHTTP
		
		Соединение = Новый HTTPСоединение("api.vk.com",,,,, Истина);
		
		Соединение.Получить("method/" + ИмяМетода + ".xml?" +
					?(ТипЗнч(Параметры) = Тип("Строка"), Параметры + ?(ЗначениеЗаполнено(Параметры), "&", "") + "access_token="+access_token,
					СформироватьСтрокуПараметровЗапроса(Параметры, access_token)),
					ИмяВыходногоФайла);
					
	Иначе
					
		АдресСервера = "https://api.vk.com/method/" + ИмяМетода + ".xml?" +
					?(ТипЗнч(Параметры) = Тип("Строка"), Параметры + ?(ЗначениеЗаполнено(Параметры), "&", "") + "access_token="+access_token,
					СформироватьСтрокуПараметровЗапроса(Параметры, access_token));
					
		Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		Соединение.Open("GET", АдресСервера);
		Соединение.Send();
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВыходногоФайла);
		ЗаписьТекста.Записать(Соединение.ResponseText());
		ЗаписьТекста.Закрыть();
		
	КонецЕсли;
	
	Если ОтветВВидеXML Тогда
		Возврат ИмяВыходногоФайла;
	КонецЕсли;
	
	Возврат ПрочитатьОтветAPI(ИмяВыходногоФайла);
	
КонецФункции

////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ РАБОТЫ СО СТЕНОЙ

Функция РазместитьЗаписьНаСтене(access_token, owner_id="", message, attachments="", services="", from_group="", signed="", friends_only="") Экспорт
	
	ПараметрыЗапроса = Новый Структура("owner_id,message,attachments,services,from_group,signed,friends_only",
										owner_id,message,attachments,services,from_group,signed,friends_only);
										
	ОтветСервера = ВызватьМетодAPI("wall.post", ПараметрыЗапроса, access_token);
	
	Если ОтветСервера.Свойство("error_code") Тогда
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при размещении записи", ОтветСервера);
	КонецЕсли;
	
	Возврат ОтветСервера.post_id;
										
КонецФункции

Процедура УдалитьЗаписьСоСтены(access_token, owner_id="", post_id) Экспорт
	
	ПараметрыЗапроса = Новый Структура("owner_id,post_id", owner_id, post_id);
	
	ОтветСервера = ВызватьМетодAPI("wall.delete", ПараметрыЗапроса, access_token);
	
	Если ОтветСервера.Свойство("error_code") Тогда
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при удалении записи", ОтветСервера);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ РАБОТЫ С КОММЕНТАРИЯМИ

Функция ДобавитьКомментарийКЗаписиНаСтене(access_token, owner_id="", post_id, text, reply_to_cid="", attachments="", from_group = "1") Экспорт
	
	ПараметрыЗапроса = Новый Структура("owner_id,post_id,text,reply_to_cid,attachments,from_group",
										owner_id,post_id,text,reply_to_cid,attachments,from_group);
	
	ОтветСервера = ВызватьМетодAPI("wall.createComment", ПараметрыЗапроса, access_token);
	
	Если ОтветСервера.Свойство("error_code") Тогда
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при добавлении комментария к записи на стене", ОтветСервера);
	КонецЕсли;
	
	Возврат ОтветСервера.cid;
	
КонецФункции

Функция ПрочитатьЗаписиСоСтены(access_token, owner_id="", domain="", offset="", count="", filter="", extended = "", fields = "") Экспорт
	
	ПараметрыЗапроса = Новый Структура("owner_id,domain,offset,count,filter,extended,fields",
										owner_id,domain,offset,count,filter,extended,fields);
	
	ОтветСервера = ВызватьМетодAPI("wall.get", ПараметрыЗапроса, access_token, Истина);
	
	
	Комментарии = Новый Массив;
	Профили = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ОтветСервера);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ЛокальноеИмя = "response" Тогда
		// нормальный ответ - заполним все поля
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			ЛокальноеИмяXML = ЧтениеXML.ЛокальноеИмя;
			
			Если ЛокальноеИмяXML = "post" Тогда
				Комментарии.Добавить(РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаXML(ЧтениеXML));
				
			ИначеЕсли ЛокальноеИмяXML = "wall" Тогда
				
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "post" Тогда
						Комментарии.Добавить(РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаXML(ЧтениеXML));
					ИначеЕсли ЧтениеXML.ЛокальноеИмя = ЛокальноеИмяXML И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Прервать;
					Иначе
						РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЛокальноеИмяXML = "profiles" Тогда
				
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "user" Тогда
						СтруктураПрофиля = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаXML(ЧтениеXML);
						Если СтруктураПрофиля.Свойство("uid") Тогда
							Профили.Вставить(СтруктураПрофиля.uid, СтруктураПрофиля.first_name + " " + СтруктураПрофиля.last_name);
						КонецЕсли;
					ИначеЕсли ЧтениеXML.ЛокальноеИмя = ЛокальноеИмяXML И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Прервать;
					Иначе
						РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЛокальноеИмяXML = "groups" Тогда
				
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "group" Тогда
						СтруктураПрофиля = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаXML(ЧтениеXML);
						Если СтруктураПрофиля.Свойство("gid") Тогда
							Профили.Вставить("-" + СтруктураПрофиля.gid, СтруктураПрофиля.name);
						КонецЕсли;
					ИначеЕсли ЧтениеXML.ЛокальноеИмя = ЛокальноеИмяXML И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Прервать;
					Иначе
						РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ЛокальноеИмя = "error" Тогда
		// ошибка - считаем только данные об ошибке
		
		ОписаниеОшибки = Новый Структура;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "error_code" ИЛИ
				ЧтениеXML.ЛокальноеИмя = "error_msg"
			Тогда
				ОписаниеОшибки.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
				
			КонецЕсли;
		КонецЦикла;
		
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при получении комментариев к записи на стене", ОписаниеОшибки);
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Попытка
		УдалитьФайлы(ОтветСервера);
	Исключение
	КонецПопытки;
	
	Если Профили.Количество() > 0 Тогда
		Возврат Новый Структура("Комментарии,Профили", Комментарии, Профили);
	КонецЕсли;
	
	Возврат Комментарии;
	
КонецФункции

Процедура УдалитьКомментарийКЗаписиНаСтене(access_token, owner_id="", cid) Экспорт
	
	ПараметрыЗапроса = Новый Структура("owner_id,cid", owner_id, cid);
	
	ОтветСервера = ВызватьМетодAPI("wall.deleteComment", ПараметрыЗапроса, access_token);
	
	Если ОтветСервера.Свойство("error_code") Тогда
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при добавлении комментария к записи на стене", ОтветСервера);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКомментарииКЗаписиНаСтене(access_token, owner_id="", post_id, sort="", need_likes="", offset="", count="", preview_length="0", start_comment_id="") Экспорт
	
	ПараметрыЗапроса = Новый Структура("owner_id,post_id,sort,need_likes,offset,count,preview_length,start_comment_id",
										owner_id,post_id,sort,need_likes,offset,count,preview_length,start_comment_id);
	
	ОтветСервера = ВызватьМетодAPI("wall.getComments", ПараметрыЗапроса, access_token, Истина);
	
	
	Комментарии = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ОтветСервера);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ЛокальноеИмя = "response" Тогда
		// нормальный ответ - заполним все поля
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "comment" Тогда
				Комментарии.Добавить(РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ЛокальноеИмя = "error" Тогда
		// ошибка - считаем только данные об ошибке
		
		ОписаниеОшибки = Новый Структура;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "error_code" ИЛИ
				ЧтениеXML.ЛокальноеИмя = "error_msg"
			Тогда
				ОписаниеОшибки.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
				
			КонецЕсли;
		КонецЦикла;
		
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при получении комментариев к записи на стене", ОписаниеОшибки);
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Попытка
		УдалитьФайлы(ОтветСервера);
	Исключение
	КонецПопытки;
	
	Возврат Комментарии;
	
КонецФункции


////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ РАБОТЫ С ПОЛЬЗОВАТЕЛЯМИ

Функция ПолучитьИнформациюОПользователях(access_token, uids, fields="", name_case="") Экспорт
Перем Пользователи;
	
	ПараметрыЗапроса = Новый Структура("uids,fields,name_case", uids, fields, name_case);
	
	ОтветСервера = ВызватьМетодAPI("users.get", ПараметрыЗапроса, access_token, Истина);
	
	Пользователи = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ОтветСервера);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ЛокальноеИмя = "response" Тогда
		// нормальный ответ - заполним все поля
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "user" Тогда
				Пользователи.Добавить(РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ЛокальноеИмя = "error" Тогда
		// ошибка - считаем только данные об ошибке
		
		ОписаниеОшибки = Новый Структура;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "error_code" ИЛИ
				ЧтениеXML.ЛокальноеИмя = "error_msg"
			Тогда
				ОписаниеОшибки.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
				
			КонецЕсли;
		КонецЦикла;
		
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при получении информации о пользователях", ОписаниеОшибки);
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Попытка
		УдалитьФайлы(ОтветСервера);
	Исключение
	КонецПопытки;
	
	Возврат Пользователи;
	
КонецФункции

Функция ПолучитьЗначениеПоляПользователя(access_token, uid, field, name_case="") Экспорт
Перем Пользователи;
	
	Пользователи = ПолучитьИнформациюОПользователях(access_token, uid, field, name_case);
	Если Пользователи.Количество() = 0 Тогда
		ВызватьИсключение "Произошла неизвестная ошибка при получении значения поля пользователя";
	КонецЕсли;
	
	ЗначениеПоля = "";
	Если Пользователи[0].Свойство(field, ЗначениеПоля) Тогда
		Возврат ЗначениеПоля;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ РАБОТЫ С ФОТОГРАФИЯМИ

Функция ПолучитьАдресДляЗагрузкиФотографийНаСтену(access_token, uid="", gid="") Экспорт
	
	ПараметрыЗапроса = Новый Структура("uid,gid", uid, gid);
	
	ОтветСервера = ВызватьМетодAPI("photos.getWallUploadServer", ПараметрыЗапроса, access_token);
	
	Если ОтветСервера.Свойство("error_code") Тогда
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при получении адреса для загрузки фотографии на стену", ОтветСервера);
	КонецЕсли;
	
	Возврат ОтветСервера.upload_url;
	
КонецФункции

Функция ЗагрузитьФотографиюНаСтену(access_token, uid="", gid="", Изображение) Экспорт
	
	АдресЗагрузки = СтрЗаменить(ПолучитьАдресДляЗагрузкиФотографийНаСтену(access_token, uid, gid), "http://", "");
	
	АдресСайта = "";
	АдресРесурса = "";
	
	Поз1 = Найти(АдресЗагрузки, "/");
	Если Поз1 = 0 Тогда
		АдресСайта = АдресЗагрузки;
		
	Иначе
		АдресСайта = Лев(АдресЗагрузки, Поз1-1);
		АдресРесурса = Сред(АдресЗагрузки, Поз1+1);
	КонецЕсли;
	
	ИмяВходногоФайла = ПолучитьИмяВременногоФайла("in");
	ИмяВходногоФайла1 = ПолучитьИмяВременногоФайла("in1");
	ИмяВходногоФайла2 = ПолучитьИмяВременногоФайла("in2");
	ИмяВходногоФайла3 = ПолучитьИмяВременногоФайла("in2");
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("out");
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ВходнойФайл = Новый ЗаписьТекста(ИмяВходногоФайла1, КодировкаТекста.ANSI, Символы.ПС);
	ВходнойФайл.ЗаписатьСтроку("--"+Boundary);
	ВходнойФайл.ЗаписатьСтроку("Content-Disposition: form-data; name=""photo""; filename=""image.jpg""");
	ВходнойФайл.ЗаписатьСтроку("Content-Type: image/jpeg");
	ВходнойФайл.ЗаписатьСтроку("");
	ВходнойФайл.Закрыть();
	
	Изображение.Записать(ИмяВходногоФайла2);
	
	ВходнойФайл = Новый ЗаписьТекста(ИмяВходногоФайла3, КодировкаТекста.ANSI, Символы.ПС);
	ВходнойФайл.ЗаписатьСтроку("");
	ВходнойФайл.ЗаписатьСтроку("--"+Boundary);
	ВходнойФайл.Закрыть();
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ИмяВходногоФайла1);
	МассивФайлов.Добавить(ИмяВходногоФайла2);
	МассивФайлов.Добавить(ИмяВходногоФайла3);
	
	ОбъединитьФайлы(МассивФайлов, ИмяВходногоФайла);
	
	ФайлОтправки = Новый Файл(ИмяВходногоФайла);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ЗаголовокHTTP = Новый Соответствие;
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Соединение = Новый HTTPСоединение(АдресЗагрузки);
	Соединение.ОтправитьДляОбработки(ИмяВходногоФайла, АдресРесурса, ИмяВыходногоФайла, ЗаголовокHTTP);
	
	ВыходнойФайл = Новый ТекстовыйДокумент;
	ВыходнойФайл.Прочитать(ИмяВыходногоФайла);
	//Результат = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ВыходнойФайл.ПолучитьТекст());
	РезультатСтр = ВыходнойФайл.ПолучитьТекст();
	
	Результат = Новый Структура;
	
	Поз1 = Найти(РезультатСтр, ":");
	Поз2 = Найти(РезультатСтр, ",");
	Результат.Вставить("server", Сред(РезультатСтр,Поз1+1,Поз2-Поз1-1));
	
	РезультатСтр = Сред(РезультатСтр, Поз2+1);
	
	Поз1 = Найти(РезультатСтр, ":");
	Поз2 = Найти(РезультатСтр, ",""hash""");
	Результат.Вставить("photo", СтрЗаменить(Сред(РезультатСтр,Поз1+2,Поз2-Поз1-3), "\""", """"));
	
	РезультатСтр = Сред(РезультатСтр, Поз2+1);
	
	Поз1 = Найти(РезультатСтр, ":");
	РезультатСтр = Сред(РезультатСтр, Поз1+2);
	Результат.Вставить("hash", Лев(РезультатСтр,СтрДлина(РезультатСтр)-2));
	
	Попытка
		УдалитьФайлы(ИмяВходногоФайла);
		УдалитьФайлы(ИмяВходногоФайла1);
		УдалитьФайлы(ИмяВходногоФайла2);
		УдалитьФайлы(ИмяВходногоФайла3);
		УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьЗагруженнуюФотографиюНаСтене(access_token, server, photo, hash, uid="", gid="") Экспорт
	
	ПараметрыЗапроса = Новый Структура("server,photo,hash,uid,gid", server, photo, hash, uid, gid);
	
	ОтветСервера = ВызватьМетодAPI("photos.saveWallPhoto", ПараметрыЗапроса, access_token, Истина);
	
	ПараметрыФото = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ОтветСервера);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ЛокальноеИмя = "response" Тогда
		// нормальный ответ - заполним все поля
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "photo" Тогда
				ПараметрыФото.Добавить(РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ЛокальноеИмя = "error" Тогда
		// ошибка - считаем только данные об ошибке
		
		ОписаниеОшибки = Новый Структура;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "error_code" ИЛИ
				ЧтениеXML.ЛокальноеИмя = "error_msg"
			Тогда
				ОписаниеОшибки.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
				
			КонецЕсли;
		КонецЦикла;
		
		// произошла ошибка
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при сохранении фотографии на стене", ОписаниеОшибки);
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Попытка
		УдалитьФайлы(ОтветСервера);
	Исключение
	КонецПопытки;
	
	Если ПараметрыФото.Количество() = 0 Тогда
		ВызватьИсключение "Произошла неизвестаня ошибка при сохранении фотографии на стене";
	КонецЕсли;
	
	Возврат ПараметрыФото[0];
	
КонецФункции

////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ПРОЦЕДУРЫ
#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура ЗагрузкаОбращенийПокупателейСоСтены() Экспорт
	
	ИсточникОбращения = Справочники.ИсточникиОбращений.ВКонтакте;
	
	access_token = ПолучитьЗначениеПараметра("access_token");
	Если access_token = Неопределено Тогда Возврат; КонецЕсли;
	
	domain = ПолучитьЗначениеПараметра("domain");
	Если domain = Неопределено Тогда Возврат; КонецЕсли;
	
	owner_id = ПолучитьЗначениеПараметра("owner_id");
	Если owner_id = Неопределено Тогда Возврат; КонецЕсли;
	
	СсылкаНаСайт = "https://vk.com/" + domain + "?w=wall" + owner_id + "_";
	СмещениеВЧасах = ПолучитьЗначениеПараметра("СмещениеВЧасах");
	СмещениеВСекундах = ?(СмещениеВЧасах = Неопределено, Неопределено, СмещениеВЧасах * 3600);
	
	ПоследняяЗаписьСоСтены = ПолучитьЗначениеПараметра("ПоследняяЗаписьСоСтены");
	ПоследняяЗаписьСоСтены = ?(ТипЗнч(ПоследняяЗаписьСоСтены) = Тип("Число"), ПоследняяЗаписьСоСтены, 0);
	
	count = 100;
	filter = "others";
	extended = Истина;
	fields = "first_name,last_name,name,screen_name";
	
	//Попытка
		МассивКомментариев = ПрочитатьЗаписиСоСтены(access_token, owner_id, domain,, count, filter,
			?(extended, "1", ""), ?(extended, fields, "")); // дополнительные поля
		
		Профили = Новый Соответствие;
		Если ТипЗнч(МассивКомментариев) = Тип("Структура") Тогда
			Профили = МассивКомментариев.Профили;
			МассивКомментариев = МассивКомментариев.Комментарии;
		КонецЕсли;
		
		// считываем записи с конца
		КвоЗаписей = МассивКомментариев.ВГраница();
		Если КвоЗаписей = -1 Тогда Возврат; КонецЕсли;
		
		Для Сч = 0 По КвоЗаписей Цикл
			
			СтруктураКомментарий = МассивКомментариев[КвоЗаписей - Сч];
			НомерЗаписиСоСтены = Число(СтруктураКомментарий.id);
			Если НомерЗаписиСоСтены <= ПоследняяЗаписьСоСтены Тогда Продолжить; КонецЕсли;
			
			Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
			Запись.GUID_Загрузки = Новый УникальныйИдентификатор();
			Запись.ДатаДок = РаботаСВнешнимВебСервером.ПолучитьДатуВремяИзUnixTime(СтруктураКомментарий.date);
			Запись.ДатаДок = ?(СмещениеВСекундах = Неопределено, МестноеВремя(Запись.ДатаДок), Запись.ДатаДок + СмещениеВСекундах);
			Запись.ИсточникОбращения = ИсточникОбращения;
			
			Запись.Примечание = СокрЛП(СтрЗаменить(СтруктураКомментарий.text, "<br>", Символы.ПС));
			Запись.СсылкаНаСайт = СсылкаНаСайт + СтруктураКомментарий.id + "&from_id=" + СтруктураКомментарий.from_id;
			
			ФИО_Покупателя = Профили.Получить(СтруктураКомментарий.from_id);
			Если ФИО_Покупателя <> Неопределено Тогда
				Запись.ФИО_Покупателя = ФИО_Покупателя;
			КонецЕсли;
			
			Запись.id_OK = РегистрыСведений.ОбращенияПокупателей.ПолучитьСледующийid_OK();
			Запись.Записать();
			
			УстановитьЗначениеПараметра("ПоследняяЗаписьСоСтены", НомерЗаписиСоСтены);
			
		КонецЦикла;
		
	//Исключение
	//	Сообщить("Ошибка чтения записей со стены: " + ОписаниеОшибки());
	//КонецПопытки;
	
КонецПроцедуры

//#Если ТонкийКлиент Тогда
//&НаСервере
//#КонецЕсли
Процедура ЗагрузкаОбращенийПокупателейИзЭлектроннойПочты() Экспорт
	
	ИсточникОбращения = Справочники.ИсточникиОбращений.ЭлектроннаяПочта;
	
	РегСведПараметрыРаботыССоцСетями = РегистрыСведений.ПараметрыРаботыССоцСетями;
	
	ДатаПоследнегоПисьма = РегСведПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(ИсточникОбращения, "ДатаПоследнегоПисьма");
	Если ТипЗнч(ДатаПоследнегоПисьма) <> Тип("Дата") Тогда ВызватьИсключение "Не задано значение параметра ДатаПоследнегоПисьма"; КонецЕсли;
	
	АдресЭПОтправителя = "info@izbenka.msk.ru";
	УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭПОтправителя);
	Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
		УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу("m@gmail.com");
		Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаЭлектроннойПочты);
	Профиль.Пользователь = АдресЭПОтправителя;
	Профиль.ПользовательSMTP = АдресЭПОтправителя;
	Профиль.ПользовательIMAP = АдресЭПОтправителя;
	Профиль.Пароль = "iz09benka";
	Профиль.ПарольSMTP = Профиль.Пароль;
	Профиль.ПарольIMAP = Профиль.Пароль;
	Профиль.ПортIMAP = 993;
	Профиль.ИспользоватьSSLIMAP = Истина;
	Профиль.АдресСервераIMAP = "imap.gmail.com";
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	КартинкиФорматДок = Новый Структура();
	
	//Попытка
	
		// ОТБОРЫ В 8.2 НЕ ВСЕ РАБОТАЮТ!!!
		//МассивЗаголовковПисем = Почта.ПолучитьЗаголовки(Новый Структура("Прочитанные,ПослеДатыОтправления", Ложь, ДатаПоследнегоПисьма));
		//ПараметрыОтбораIMAP = Новый Структура;
		//ПараметрыОтбораIMAP.Вставить("ПослеДатыОтправления", Дата("20160717"));
		//МассивЗаголовковПисем = Почта.ПолучитьИдентификаторы(, ПараметрыОтбораIMAP);
		//МассивЗаголовковПисем = Почта.ПолучитьЗаголовки(Новый Структура("ПослеДатыОтправления", НачалоДня(ДатаПоследнегоПисьма)));
		//МассивЗаголовковПисем = Почта.ПолучитьЗаголовки();
		//МассивЗаголовковПисем = Почта.ПолучитьЗаголовки(Новый Структура("ДатаОтправления", ДатаПоследнегоПисьма));
		
		МассивЗаголовковПисем = Почта.ПолучитьЗаголовки(Новый Структура("Прочитанные", Ложь));
		МассивЗаголовковПисемПослеДаты = Новый Массив;
		Для Каждого ЗаголовокПисьма Из МассивЗаголовковПисем Цикл
			Если ЗаголовокПисьма.ДатаОтправления > ДатаПоследнегоПисьма Тогда
				МассивЗаголовковПисемПослеДаты.Добавить(ЗаголовокПисьма);
			КонецЕсли;
		КонецЦикла;
		
		МассивЗаголовковПисем = Новый Массив;
		Если МассивЗаголовковПисемПослеДаты.Количество() = 0 Тогда
			Почта.Отключиться();
			Возврат;
		КонецЕсли;
		
		КвоПисем = 0;
		Письма = Почта.Выбрать(Ложь, МассивЗаголовковПисемПослеДаты);
		
		// считываем записи с конца
		КвоЗаписей = Письма.ВГраница();
		Если КвоЗаписей = -1 Тогда Возврат; КонецЕсли;
		
		Для Сч = 0 По КвоЗаписей Цикл
			
			Письмо = Письма[КвоЗаписей - Сч];
			ДатаПисьма = Письмо.ДатаОтправления;
			Если ДатаПисьма <= ДатаПоследнегоПисьма Тогда Продолжить; КонецЕсли;
			
			ТекстПисьмаПростой = "";
			Для Каждого ТекстПисьма Из Письмо.Тексты Цикл
				
				Если ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
					ТекстПисьмаПростой = СокрЛП(ТекстПисьма.Текст);
					Прервать;
					
				ИначеЕсли ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
					ФорматированныйДокумент.УстановитьHTML(ТекстПисьма.Текст, КартинкиФорматДок);
					ТекстПисьмаПростой = СокрЛП(ФорматированныйДокумент.ПолучитьТекст());
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПустаяСтрока(ТекстПисьмаПростой) Тогда Продолжить; КонецЕсли;
			
			Попытка
			
				Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
				Запись.GUID_Загрузки = Новый УникальныйИдентификатор();
				Запись.ДатаДок = ДатаПисьма;
				Запись.ИсточникОбращения = ИсточникОбращения;
				Запись.СсылкаНаСайт = СокрЛП(Письмо.Тема) + "#ИдентификаторСообщения_In-Reply-To#" + Письмо.ИдентификаторСообщения;
				
				ОтправительПисьма = Письмо.Отправитель;
				Запись.email = ОтправительПисьма.Адрес;
				Запись.ФИО_Покупателя = ?(ПустаяСтрока(ОтправительПисьма.ОтображаемоеИмя), ОтправительПисьма.Пользователь, ОтправительПисьма.ОтображаемоеИмя);
				
				Запись.Примечание = ТекстПисьмаПростой;
				
				Запись.id_OK = РегистрыСведений.ОбращенияПокупателей.ПолучитьСледующийid_OK();
				Запись.Записать();
				
			Исключение
				Сообщить(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			//Попытка //!!!
			//	// удаляем с сервера
			//	МассивЗаголовковПисем = Новый Массив;
			//	МассивЗаголовковПисем.Добавить(Письмо);
			//	Почта.Выбрать(Истина, МассивЗаголовковПисем);
			//Исключение
			//	Сообщить(ОписаниеОшибки());
			//	Продолжить;
			//КонецПопытки; 
			//
			//КвоПисем = КвоПисем + 1;
			//Если КвоПисем > 1 Тогда
			//	Прервать; //!!!
			//КонецЕсли;
			
			РегСведПараметрыРаботыССоцСетями.УстановитьЗначениеПараметра(ИсточникОбращения, "ДатаПоследнегоПисьма", ДатаПисьма);
		КонецЦикла;
		
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	ТекстОшибки = "Не удалось прочитать заголовки писем. Ошибка: " + ОписаниеОшибки();
	//	Сообщить(ТекстОшибки);
	//КонецПопытки;
	
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ЗагрузкаОбращенийПокупателейСФорума() Экспорт
	ИсточникОбращения=Справочники.ИсточникиОбращений.НайтиПоНаименованию("3 форум");
	ПоследнееСообщение=РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(ИсточникОбращения, "ПоследняяТема");
	ЧтениеXML= Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл("http://vkusvill.ru/forum/new_forum_posts.xml?id="+СтрЗаменить(СтрЗаменить(Строка(ПоследнееСообщение)," ",""),Символы.НПП,""));
	ТаблицаОбращений=Новый ТаблицаЗначений;
	ТаблицаОбращений.Колонки.Добавить("Узел");
	ТаблицаОбращений.Колонки.Добавить("НомерСообщения");
	ТаблицаОбращений.Колонки.Добавить("Дата");
	ТаблицаОбращений.Колонки.Добавить("Автор");
	ТаблицаОбращений.Колонки.Добавить("Ссылка");
	ТаблицаОбращений.Колонки.Добавить("Текст");
	ТаблицаОбращений.Колонки.Добавить("Почта");
		
	Пока ЧтениеXML.Прочитать() цикл
		Если ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
			Если ЧтениеXML.Имя="id" тогда
				СтрТЗ=ТаблицаОбращений.Добавить();
			КонецЕсли;
			Если ТаблицаОбращений.Количество()>0 тогда
				СтрТЗ.Узел=ЧтениеXML.Имя;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.Текст тогда
			Если СтрТЗ.Узел="id" тогда
				СтрТЗ.НомерСообщения=Число(ЧтениеXML.Значение);
			ИначеЕсли СтрТЗ.Узел="title" тогда
				СтрТЗ.Текст=ЧтениеXML.Значение;
			ИначеЕсли СтрТЗ.Узел="body" тогда
				СтрТЗ.Текст=СтрТЗ.Текст+". "+ЧтениеXML.Значение;
			ИначеЕсли СтрТЗ.Узел="path" тогда
				СтрТЗ.Ссылка=ЧтениеXML.Значение;
			ИначеЕсли СтрТЗ.Узел="author" тогда
				СтрТЗ.Автор=ЧтениеXML.Значение;
			ИначеЕсли СтрТЗ.Узел="date" тогда
				СтрТЗ.Дата=ПолучитьДатуИзФорматаСайта(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли СтрТЗ.Узел="email" тогда
				СтрТЗ.Почта=ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦИкла;
	ТаблицаОбращений.Колонки.Удалить("Узел");
	ТаблицаОбращений.Сортировать("НомерСообщения");
	Для Каждого СтрТЗ из ТаблицаОбращений цикл
		Если СтрТЗ.НомерСообщения<=ПоследнееСообщение или 
			СтрТЗ.Дата<=Дата(2016,10,13,0,0,0) тогда
			Продолжить;
		Иначе
			ПоследнееСообщение=СтрТЗ.НомерСообщения;
		КонецЕсли;
		Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
		Запись.GUID_Загрузки = Новый УникальныйИдентификатор();
		Запись.ДатаДок = СтрТЗ.Дата;
		Запись.ИсточникОбращения=Справочники.ИсточникиОбращений.НайтиПоНаименованию("3 форум");
		Запись.Примечание = СтрТЗ.Текст;
		Запись.СсылкаНаСайт = СтрТЗ.Ссылка;
		Запись.ФИО_Покупателя=СтрТЗ.Автор;
		Запись.email=СтрТЗ.Почта;
		Запись.id_OK = РегистрыСведений.ОбращенияПокупателей.ПолучитьСледующийid_OK();
		Запись.Записать();
	КонецЦикла;
	РегистрыСведений.ПараметрыРаботыССоцСетями.УстановитьЗначениеПараметра(ИсточникОбращения, "ПоследняяТема",ПоследнееСообщение);

КонецПроцедуры

Функция ПолучитьДатуИзФорматаСайта(ДатаСтрокой)
	ГодЧислом=Число(Сред(ДатаСтрокой,7,4));
	МесяцЧислом=Число(Сред(ДатаСтрокой,4,2));
	ДеньЧислом=Число(Лев(ДатаСтрокой,2));
	ЧасЧислом=Число(Сред(ДатаСтрокой,17,2));
	МинутаЧислом=Число(Прав(ДатаСтрокой,2));
	ДатаВНужномФормате=Дата(ГодЧислом,МесяцЧислом,ДеньЧислом,ЧасЧислом,МинутаЧислом,0);
	Возврат ДатаВНужномФормате;	
КонецФункции

////////////////////////// ТЕЛЕГРАМ ////////////////////////////

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса) Экспорт
	
	СтрокаПодключенияТелеграм = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
	
	Попытка
		
		CurrentConnection = База_Подключение(СтрокаПодключенияТелеграм);
		
		ЕСли CurrentConnection = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		//CurrentConnection.CursorLocation = 2;
		
		RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
		Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
			RecordSet=RecordSet.NextRecordSet();
		КонецЦикла;				
		
		Возврат RecordSet;
	Исключение	
		//ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

&НаСервере
Процедура ЗагрузкаОбращенийИзТелеграма() Экспорт
		
	ТекстЗапроса =
	"SELECT file_description as ID
	//+++АК SHEP 2017.12.08 ИП-00017251
	|	, max(isNULL(tr.id, 0)) as BOT_Purchase_Tovar_Reiting_ID
	//---АК SHEP 2017.12.08
	|FROM [Telegram].[dbo].[BOT_Complaints]
	//+++АК SHEP 2017.12.08 ИП-00017251
	|	AS bc (NOLOCK)
	|	LEFT JOIN [Loyalty].[dbo].[BOT_Purchase_Tovar_Reiting] as tr
	|	ON bc.user_id = tr.telegram_id and bc.id_tov = tr.id_tov and bc.CashID = tr.CashID and bc.CashCheckNo = tr.CashCheckNo and NOT bc.id_tov is NULL and bc.CashID<>0 and bc.CashCheckNo<>0
	//---АК SHEP 2017.12.08
	|WHERE message_type = 100 and DATEDIFF(d, add_date, GETDATE()) <= 7
	|GROUP BY file_description";
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТЗО = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
	
	Для каждого Стр ИЗ ТЗО Цикл
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбращенияПокупателей.id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.UIDTelegram = &UIDTelegram");
		Запрос.УстановитьПараметр("UIDTelegram", Стр.ID);
		РЗ = Запрос.Выполнить().Выбрать();
		Если РЗ.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =
		"SELECT b.user_id, b.message_type, b.message_text, b.add_date, a.CashCheckNo, a.CashID, a.check_date, c.Email, c.FullName, c.Phone
		|FROM
		|(SELECT [user_id]
		|      ,[CashID]
		|      ,[CashCheckNo]
		|      ,[message_type]
		|      ,[message_text]
		|      ,[file_description]
		|      ,[add_date]
		|      ,[Doc_Ref]
		|  FROM [Telegram].[dbo].[BOT_Complaints] 
		|  WHERE inbox_outbox = 0 AND message_type < 100) as b 
		|  inner join (SELECT TOP 1 [Doc_Ref] ,[CashID] ,[CashCheckNo], add_date as check_date FROM [Telegram].[dbo].[BOT_Complaints]
		|WHERE file_description = '" + Стр.ID + "' AND message_type = 100
		|ORDER BY add_date) as a on b.Doc_Ref = a.Doc_Ref
		|inner join (SELECT [FullName], [Email], [Phone], telegram_id FROM [Loyalty].[dbo].[Customer]) as c on b.user_id = c.telegram_id
		|ORDER BY add_date";
		Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
		ТЗ = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
		Если ТЗ.Количество() > 0 Тогда
			Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
			Запись.GUID_Загрузки = Новый УникальныйИдентификатор;
			Запись.ДатаДок = ТекущаяДата();
			Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.Telegram;	
			Запись.UIDTelegram = Стр.ID;
			ТекстОбращения = "";
			Для каждого СтрОбр Из ТЗ Цикл
				Если СтрОбр.message_type = 1 Тогда
					ТекстОбращения = ТекстОбращения + ?(ТекстОбращения = "", "", Символы.ПС) + СтрОбр.message_text;
				КонецЕсли;
			КонецЦикла; 
			Запись.Примечание = ТекстОбращения;			
			
			Запись.BOT_Purchase_Tovar_Reiting_ID = Стр.BOT_Purchase_Tovar_Reiting_ID; //+++АК SHEP 2017.12.08 ИП-00017251
			
			Запись.ФИО_Покупателя = ТЗ[0].FullName;
			Запись.Телефон = ТЗ[0].Phone;
			Запись.Номер_Карты_ОК = ТЗ[0].Email;
			
			Запись.НомерКассы = ТЗ[0].CashID;
			Если ЗначениеЗаполнено(Запись.НомерКассы) Тогда
				Запись.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", ЦЕЛ(Число(Запись.НомерКассы)/10));
			КонецЕсли;
			Запись.Номер_Бланка = ТЗ[0].CashCheckNo;	
			Если ТипЗнч(ТЗ[0].check_date) = Тип("Дата") Тогда
				Запись.ДатаСобытия = ТЗ[0].check_date;
			КонецЕсли;
			Запись.id_OK = РегистрыСведений.ОбращенияПокупателей.ПолучитьСледующийid_OK();
			
			Запись.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры