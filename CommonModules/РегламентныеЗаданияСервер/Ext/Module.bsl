
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВНУТРЕННЕГО ИСПОЛЬЗОВАНИЯ
// Общего назначения
//

// Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования вызывает исключение, если у пользователя нет права администрирования.
//
Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования()
	
	ВыполняетсяПроцедураВыполнитьРегламентныеЗадания = ХранилищеОбщихНастроек.Загрузить("ВыполняетсяПроцедураВыполнитьРегламентныеЗадания", , , "");
	Если НЕ ТипЗнч(ВыполняетсяПроцедураВыполнитьРегламентныеЗадания) = Тип("Булево") Тогда
		ВыполняетсяПроцедураВыполнитьРегламентныеЗадания = Ложь;
	КонецЕсли;
	
	Если НЕ ВыполняетсяПроцедураВыполнитьРегламентныеЗадания
		И НЕ ПравоДоступа("Администрирование", Метаданные, ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
		ВызватьИсключение(НСтр("ru = 'У пользователя нет права администрирования!'"));
	КонецЕсли;
	
КонецПроцедуры

// Функция ТекущийСеансВыполняетРегламентныеЗадания определяет, что текущий сеанс выполняет регламентные задания,
// если это не так и указано установить текущий сеанс в этом качестве, то производится попытка установки.
//
// Параметры:
//  ЗаданияВыполняютсяНормально - Булево - Истина, если нет отклонений в выполнении заданий.
//  УстановитьТекущийСеансКакСеансВыполняющийРегламентныеЗадания - Булево - Истина,
//                 если требуется установить текущий сеанс, как сеанс, в котором будет происходить выполнение регламентных заданий,
//                 если не удалось установить, тогда функция вернет Ложь.
//  ОписаниеОшибки - Строка - Если НЕ ЗаданияВыполняютсяНормально, тогда описание отклонения: либо выполнение долго не начинается, либо выполнение слишком затянулось.
//
// Возвращаемое значение:
//  Булево.
//
Функция ТекущийСеансВыполняетРегламентныеЗадания(ЗаданияВыполняютсяНормально = Неопределено,
	Знач УстановитьТекущийСеансКакСеансВыполняющийРегламентныеЗадания = Ложь,
	ОписаниеОшибки = "") Экспорт
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ЗаданияВыполняютсяНормально = Истина;
		ОписаниеОшибки = НСтр("ru = 'Задания выполняются на сервере!'");
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Состояние = ПолучитьСостояниеВыполненияРегламентныхЗаданий();
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	НайденСеансВыполняющийЗадания             = Ложь;
	ТекущийСеансВыполняетРегламентныеЗадания  = Ложь;
	ЗаданияВыполняютсяНормально               = Истина;
	
	// Поиск сеанса выполняющего регламентные задания,
	// установленного в структуре СостояниеВыполненияРегламентныхЗаданий,
	// среди активных сеансов
	// Поиск текущего сеанса (начало текущего сеанса может понадобится
	// для инициализации Структуры).
	Для каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеансаИнформационнойБазы() Тогда
			ТекущийСеанс = Сеанс;
		КонецЕсли;
		Если Сеанс.НомерСеанса  = Состояние.НомерСеанса
			И Сеанс.НачалоСеанса = Состояние.НачалоСеанса Тогда
			//
			НайденныйСеанс = Сеанс;
			НайденСеансВыполняющийЗадания = Истина;
			ТекущийСеансВыполняетРегламентныеЗадания  = (Сеанс.НомерСеанса = НомерСеансаИнформационнойБазы());
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденСеансВыполняющийЗадания
		И УстановитьТекущийСеансКакСеансВыполняющийРегламентныеЗадания Тогда
		МоментТекущегоВремени                           = ТекущаяДата();
		Состояние.НомерСеанса                           = ТекущийСеанс.НомерСеанса;
		Состояние.НачалоСеанса                          = ТекущийСеанс.НачалоСеанса;
		Состояние.ИмяКомпьютера                         = ИмяКомпьютера();
		Состояние.ИмяПриложения                         = ТекущийСеанс.ИмяПриложения;
		Состояние.ИмяПользователя                       = ИмяПользователя();
		Состояние.ИдентификаторОчередногоЗадания        = Неопределено;
		Состояние.НачалоВыполненияОчередногоЗадания     = МоментТекущегоВремени;
		Состояние.ОкончаниеВыполненияОчередногоЗадания  = МоментТекущегоВремени;
		СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние);
		НайденСеансВыполняющийЗадания = Истина;
		ТекущийСеансВыполняетРегламентныеЗадания  = Истина;
	КонецЕсли;
	
	Если НЕ НайденСеансВыполняющийЗадания Тогда
		ОписаниеОшибки = НСтр("ru = 'Нет сеанса, выполняющего регламентные задания!'");
		ЗаданияВыполняютсяНормально = Ложь;
		//
	ИначеЕсли НЕ ЗначениеЗаполнено(Состояние.ОкончаниеВыполненияОчередногоЗадания) Тогда
		// Если после завершения очередного задания прошло более часа, значит задержка запуска.
		Если ТекущаяДата() - 360 > Состояние.ОкончаниеВыполненияОчередногоЗадания Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнение регламентных заданий не начинается уже более 1 часа!
			|Возможно требуется проверка и перезапуск сеанса. Выполнение ожидается
			|    на компьютере:         %1,
			|    в приложении:          %2,
			|    от имени пользователя: %3,
			|    в сеансе номер:        %4.'"),
			Строка(Состояние.ИмяКомпьютера),
			Строка(Состояние.ИмяПриложения),
			Строка(Состояние.ИмяПользователя),
			Строка(Состояние.НомерСеанса) );
			ЗаданияВыполняютсяНормально = Ложь;
		КонецЕсли;
	Иначе
		// Если выполнение продолжается более 1 часа, значить она слишком затянулось.
		Если ТекущаяДата() - 360 > Состояние.НачалоВыполненияОчередногоЗадания Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнение регламентного задания происходит непрерывно более 1 часа!
			|Возможно требуется проверка и перезапуск сеанса. Выполнение происходит
			|    на компьютере:         %1,
			|    в приложении:          %2,
			|    от имени пользователя: %3,
			|    в сеансе номер:        %4.'"),
			Строка(Состояние.ИмяКомпьютера),
			Строка(Состояние.ИмяПриложения),
			Строка(Состояние.ИмяПользователя),
			Строка(Состояние.НомерСеанса));
			ЗаданияВыполняютсяНормально = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСеансВыполняетРегламентныеЗадания;
	
КонецФункции

// Функция РодительскийСеансЗаданИЗавершен проверяет, что сеанс, открывший этот дополнительный сеанс для выполнения регламентных заданий, завершен, если задан.
//
// Параметры:
//  ПараметрЗапуска 		- Строка - значение глобального свойства ПараметрЗапуска, требуется указывать, т.к. свойство недоступно на сервере.
//  РодительскийСеансЗадан 	- Булево - возвращает Истина, если родительский сеанс задан, иначе возвращает Ложь.
//
// Возвращаемое значение:
//  Булево.
//
Функция РодительскийСеансЗаданИЗавершен(Знач ПараметрЗапуска) Экспорт
	
	РодительскийСеансЗадан = Ложь;
	Если Найти(ПараметрЗапуска, "DoScheduledJobs") <> 0 Тогда
		ИндексНомераСеанса = Найти(ПараметрЗапуска, "SessionNumber=");
		ИндексНачалаСеанса = Найти(ПараметрЗапуска, "SessionStarted=");
		Если ИндексНомераСеанса <> 0
			И ИндексНачалаСеанса <> 0
			И ИндексНомераСеанса < ИндексНачалаСеанса Тогда
			РодительскийСеансЗадан = Истина;
			Сеансы = ПолучитьСеансыИнформационнойБазы();
			Для каждого Сеанс Из Сеансы Цикл
				Если Найти(ПараметрЗапуска, "SessionNumber="  + Сеанс.НомерСеанса)  <> 0
					И Найти(ПараметрЗапуска, "SessionStarted=" + Сеанс.НачалоСеанса) <> 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВНУТРЕННЕГО ИСПОЛЬЗОВАНИЯ
// Для работы с регламентными заданиями
//

// Процедура ВыполнитьРегламентныеЗадания() эмулирует в тонком клиенте системную процедуру ВыполнитьОбработкуЗаданий(), но может применяться и в толстом клиенте.
//
//  Место хранения экземпляров фоновых заданий - ВременноеХранилище.
// Время хранения экземпляров - до закрытия сеанса клиента, выполняющего регламентные задания.
// Максимальное количество одновременно хранимых фоновых заданий: 1000.
//
//  Идентификатор сеанса, выполняющего регламентные задания находится в структуре
// СостояниеВыполненияРегламентныхЗаданий (ХранилищеЗначения), содержащее структуру
// со свойствами: 
// НомерСеанса, НачалоСеанса, ИдентификаторОчередногоЗадания,
// НачалоВыполненияОчередногоЗадания, ОкончаниеВыполненияОчередногоЗадания и др.
//  Логика проверки выполнения регламентных заданий в текущем сеансе:
// Если <НомерСеанса> и  <НачалоСеанса> совпадают с текущим,
// тогда выполнение в текущем сеансе, если нет,
// тогда проверяется существует ли сеанс в списке сеансов,
// если не существует, тогда выполнение в текущем сеансе,
// если существует тогда нет выполнения в текущем сеансе, а вместо этого
// проверятся период выполнения/простоя. Если "выполняется"/"простаивает" дольше
// 1 час происходит уведомление пользователя (ошибка с соответствующим описанием).
//  Логика порядка выполнения заданий. Задания выполняются последовательно,
// регистрируется последнее начатое задание. При новой проверке, проверятся
// задание, следующее за заданием, начатым в прошлый раз,
// чтобы получился эффект параллельности выполнения.
//  Логика проверки расписания. Если произошла ошибка тогда используется аварийное
// расписание, иначе - основное.
// 
// Параметры:
//  ВремяВыполнения - Число(10.0) - время (в секундах) выполнения очередной порции регламентных заданий. Если время не задано, будет выполнен
//                 только один цикл выполнения (до завершения одного фонового задания или выполнения всех регламентных заданий без фоновых,
//                 т.е. только проверка расписания).
//
Процедура ВыполнитьРегламентныеЗадания(ВремяВыполнения = 0) Экспорт
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ТекущийСеансВыполняетРегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = ПолучитьСостояниеВыполненияРегламентныхЗаданий();
	
	// Разрешение вызова привилегированных функций на время выполнения регламентных заданий.
	ХранилищеОбщихНастроек.Сохранить("ВыполняетсяПроцедураВыполнитьРегламентныеЗадания", , Истина, , "");
	
	ВремяВыполнения = ?(ТипЗнч(ВремяВыполнения) = Тип("Число"), ВремяВыполнения, 0);
	
	Задания                        = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	ВыполнениеЗавершено            = Ложь; // Определяет, что ВремяВыполнения закончилось, или
	// все возможные регламентные задания выполнены.
	НачалоВыполнения               = ТекущаяДата();
	КоличествоВыполненныхЗаданий   = 0;
	ФоновоеЗаданиеВыполнялось      = Ложь;
	ИдентификаторПоследнегоЗадания = Состояние.ИдентификаторОчередногоЗадания;
	
	// Количество заданий проверяется каждый раз при начале выполнения,
	// т.к. задания могут быть удалены в другом сеансе, а тогда будет зацикливание.
	Пока НЕ ВыполнениеЗавершено И Задания.Количество() > 0 Цикл
		ПервоеЗаданиеНайдено           = (ИдентификаторПоследнегоЗадания = Неопределено);
		ОчередноеЗаданиеНайдено        = Ложь;
		Для каждого Задание ИЗ Задания Цикл
			// Завершение выполнения, если:
			// а) время задано и вышло;
			// б) время не задано и хоть одно фоновое задание выполнено;
			// в) время не задано и все регламентные задания выполнены по количеству.
			Если ( ВремяВыполнения = 0 И
				( ФоновоеЗаданиеВыполнялось ИЛИ
				КоличествоВыполненныхЗаданий >= Задания.Количество() ) ) ИЛИ
				( ВремяВыполнения <> 0 И
				НачалоВыполнения + ВремяВыполнения <= ТекущаяДата() ) Тогда
				ВыполнениеЗавершено = Истина;
				Прервать;
			КонецЕсли;
			Если НЕ ПервоеЗаданиеНайдено Тогда
				Если Строка(Задание.УникальныйИдентификатор) = ИдентификаторПоследнегоЗадания Тогда
					// Найдено последнее выполненное регламентное задание, значит следующее
					// регламентное задание нужно проверять на необходимость выполнения фонового задания.
					ПервоеЗаданиеНайдено = Истина;
				КонецЕсли;
				// Если первое регламентное задание, которое нужно проверить на необходимость
				// выполнения фонового задания ещё не найдено, тогда текущее задание пропускается.
				Продолжить;
			КонецЕсли;
			ОчередноеЗаданиеНайдено = Истина;
			КоличествоВыполненныхЗаданий = КоличествоВыполненныхЗаданий + 1;
			Состояние.ИдентификаторОчередногоЗадания       = Строка(Задание.УникальныйИдентификатор);
			Состояние.НачалоВыполненияОчередногоЗадания    = ТекущаяДата();
			Состояние.ОкончаниеВыполненияОчередногоЗадания = '00010101';
			СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние,
			"ИдентификаторОчередногоЗадания,
			|НачалоВыполненияОчередногоЗадания,
			|ОкончаниеВыполненияОчередногоЗадания");
			Если Задание.Использование Тогда
				ВыполнитьРегламентноеЗадание = Ложь;
				СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
				
				Если СвойстваПоследнегоФоновогоЗадания <> Неопределено И
					СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					// Проверка аварийного расписания.
					Если СвойстваПоследнегоФоновогоЗадания.ПопыткаЗапуска <= Задание.КоличествоПовторовПриАварийномЗавершении Тогда
						Если СвойстваПоследнегоФоновогоЗадания.Конец + Задание.ИнтервалПовтораПриАварийномЗавершении <= ТекущаяДата() Тогда
							// Повторный запуск фонового задания по регламентному заданию.
							ВыполнитьРегламентноеЗадание = Истина;
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Проверяем стандартное расписание.
					ВыполнитьРегламентноеЗадание = Задание.Расписание.ТребуетсяВыполнение(
					ТекущаяДата(),
					?(СвойстваПоследнегоФоновогоЗадания = Неопределено, '00010101', СвойстваПоследнегоФоновогоЗадания.Начало),
					?(СвойстваПоследнегоФоновогоЗадания = Неопределено, '00010101', СвойстваПоследнегоФоновогоЗадания.Конец ));
				КонецЕсли;
				Если ВыполнитьРегламентноеЗадание Тогда
					ФоновоеЗаданиеВыполнялось = ВыполнитьРегламентноеЗадание(Задание);
				КонецЕсли;
			КонецЕсли;
			Состояние.ОкончаниеВыполненияОчередногоЗадания = ТекущаяДата();
			СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние, "ОкончаниеВыполненияОчередногоЗадания");
		КонецЦикла;
		// Если последнее выполненное задание найти не удалось, тогда
		// его Идентификатор сбрасывается,
		// чтобы начать проверку регламентных заданий, начиная с первого.
		ИдентификаторПоследнегоЗадания = Неопределено;
	КонецЦикла;
	
	// Запрет вызова привилегированных функций после выполнения регламентных заданий.
	ХранилищеОбщихНастроек.Сохранить("ВыполняетсяПроцедураВыполнитьРегламентныеЗадания", , Ложь, , "");
	
КонецПроцедуры

// Процедура УстановитьНастройкиВыполненияРегламентныхЗаданий устанавливает настройки выполнения регламентных заданий для файлового режима.
// 
// Параметры:
//  Настройки - Структура.
//
Процедура УстановитьНастройкиВыполненияРегламентныхЗаданий(Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ПроверитьНастройки(Настройки);
	
	ХранилищеОбщихНастроек.Сохранить("НастройкиВыполненияРегламентныхЗаданий", , Новый ХранилищеЗначения(Настройки), , "");
	
КонецПроцедуры

// Функция ПолучитьНастройкиВыполненияРегламентныхЗаданий получает настройки выполнения регламентных заданий для файлового режима.
// 
// Возвращаемое значение:
//  Настройки - Структура.
//
Функция ПолучитьНастройкиВыполненияРегламентныхЗаданий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("НастройкиВыполненияРегламентныхЗаданий", , , "");
	Настройки = ?(ТипЗнч(Настройки) = Тип("ХранилищеЗначения"), Настройки.Получить(), Неопределено);
	
	Возврат ПроверитьНастройки(Настройки);
	
КонецФункции

// Функция возвращает представление регламентного задания,
// это по порядку исключения незаполненных реквизитов:
// Наименование, Метаданные.Синоним, Метаданные.Имя.
//
// Параметры:
//  Задание - РегламентноеЗадание, Строка - если строка, тогда УникальныйИдентификатор строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПредставлениеРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		РегламентноеЗадание = Задание;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Задание));
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Представление = РегламентноеЗадание.Наименование;
		Если ПустаяСтрока(РегламентноеЗадание.Наименование) Тогда
			// Применим синоним вместо наименования
			Представление = РегламентноеЗадание.Метаданные.Синоним;
			Если ПустаяСтрока(Представление) Тогда
				// Применим имя вместо синонима
				Представление = РегламентноеЗадание.Метаданные.Имя;
			КонецЕсли
		КонецЕсли;
	Иначе
		Представление = ТекстНеОпределено();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Служебная функция, возвращающая текст "<не определено>" с локализацией.
// Используется для целей локализации
//
Функция ТекстНеОпределено() Экспорт
	
	Возврат НСтр("ru = '<не определено>'");
	
КонецФункции

// Функция ПолучитьРегламентноеЗадание получает РегламентноеЗадание из информационной
// базы по строке уникального идентификатора.
//
// Параметры:
//  Идентификатор - Строка уникального идентификатора РегламентногоЗадания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание.
//
Функция ПолучитьРегламентноеЗадание(Знач Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Идентификатор));
	
	Если РегламентноеЗадание = Неопределено Тогда
		ВызватьИсключение( НСтр("ru = 'Задание не найдено в списке!
		|Возможно, оно удалено другим пользователем!'") );
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Процедура ВыполнитьРегламентноеЗаданиеВручную предназначена для "ручного" немедленного выполнения процедуры регламентного задания
// либо в сеансе клиента (в файловой ИБ), либо в фоновом задании на сервере (в серверной ИБ)
// Применяется в любом режиме соединения
// "Ручной" режим запуска не влияет на выполнение регламентного задания по аварийному
// и основному расписаниям, т.к. не указывается ссылка на регламентное задание у фонового задания
// Тип ФоновоеЗадание не допускает установки такой ссылки, поэтому для файлового режима применяется
// тоже правило
// 
// Параметры:
//  Задание       -   РегламентноеЗадание, Строка - уникального идентификатора РегламентногоЗадания
//  МоментЗапуска -   Неопределено, Дата
//                    Для файловой ИБ устанавливает переданный момент, как момент запуска
//                    метода регламентного задания
//                    Для серверной ИБ - возвращает момент запуска фонового задания по факту
//  ИдентификаторФоновогоЗадания - Строка
//                    Для серверной ИБ возвращает идентификатор запущенного фонового задания
//  МоментОкончания - Неопределено, Дата
//                    Для файловой ИБ возвращает момент завершения метода регламентного задания
//
Функция ВыполнитьРегламентноеЗаданиеВручную(Знач Задание,
	МоментЗапуска = Неопределено,
	ИдентификаторФоновогоЗадания = "",
	МоментОкончания = Неопределено,
	НомерСеанса = Неопределено,
	НачалоСеанса = Неопределено,
	ПредставлениеФоновогоЗадания = "",
	ПроцедураУжеВыполняется = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	ПроцедураУжеВыполняется = Ложь;
	Задание = ?(ТипЗнч(Задание) = Тип("РегламентноеЗадание"), Задание, ПолучитьРегламентноеЗадание(Задание));
	Если НЕ Задание.Использование Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запуск = Ложь;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Запуск = ВыполнитьРегламентноеЗадание(Задание, Истина, МоментЗапуска, МоментОкончания, НомерСеанса, НачалоСеанса);
	Иначе
		СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
		Если СвойстваПоследнегоФоновогоЗадания <> Неопределено
			И СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			//
			МоментЗапуска  = СвойстваПоследнегоФоновогоЗадания.Начало;
			Если ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Наименование) Тогда
				ПредставлениеФоновогоЗадания = СвойстваПоследнегоФоновогоЗадания.Наименование;
			Иначе
				ПредставлениеФоновогоЗадания = ПредставлениеРегламентногоЗадания(Задание);
			КонецЕсли;
		Иначе
			НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запуск вручную: %1'"), ПредставлениеРегламентногоЗадания(Задание));
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(Задание.Метаданные.ИмяМетода, Задание.Параметры, Строка(Задание.УникальныйИдентификатор), НаименованиеФоновогоЗадания);
			ИдентификаторФоновогоЗадания = Строка(ФоновоеЗадание.УникальныйИдентификатор);
			МоментЗапуска = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание.УникальныйИдентификатор).Начало;
			Запуск = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПроцедураУжеВыполняется = НЕ Запуск;
	
	Возврат Запуск;
	
КонецФункции

// Функция НужноУведомлятьОНекорректномВыполненииРегламентныхЗаданий возвращает значение флажка настройки выполнения регламентных заданий.
//
// Возвращаемое значение:
//  Булево.
//
Функция НужноУведомлятьОНекорректномВыполненииРегламентныхЗаданий(ПериодУведомления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УведомлятьОНекорректномСостоянии = Ложь;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Настройки = ПолучитьНастройкиВыполненияРегламентныхЗаданий();
		ПериодУведомления = Настройки.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий;
		ПериодУведомления = ?(ПериодУведомления <= 0, 1, ПериодУведомления);
		УведомлятьОНекорректномСостоянии = Настройки.УведомлятьОНекорректномВыполненииРегламентныхЗаданий;
	Иначе
		ПериодУведомления = 1;
	КонецЕсли;
	
	Возврат УведомлятьОНекорректномСостоянии;
	
КонецФункции

// Функция СообщенияИОписанияОшибокРегламентногоЗадания возвращает многострочную Строку, содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// последнее фоновое задание найдено по идентификатору регламентного задания и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - РегламентноеЗадание, Строка - УникальныйИдентификатор
//                 РегламентногоЗадания строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция СообщенияИОписанияОшибокРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(Задание) = Тип("РегламентноеЗадание"), Строка(Задание.УникальныйИдентификатор), Задание);
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
	Возврат ?(СвойстваПоследнегоФоновогоЗадания = Неопределено,
	"",
	СообщенияИОписанияОшибокФоновогоЗадания(СвойстваПоследнегоФоновогоЗадания.Идентификатор) );
	
КонецФункции

// Возвращает параметры запуска отдельного сеанса выполнения регламентных заданий.
//
// Параметры:
//  ПоНастройкеАвтоОткрытия - Булево - открывать сеанс, если настроен
//                 автоматический запуск отдельного сеанса и не серверная ИБ и не Веб-клиент и
//                 сеанс уже не открыт. В других случаях устанавливается Отказ.
//
// Возвращаемое значение:
//  Структура -    ТребуетсяОткрытьОтдельныйСеанс             - Булево - Истина.
//                 ДополнительныеПараметрыКоманднойСтроки     - Строка - дополнительные параметры командной строки для
//                                                              запуска сеанса выполнения регламентных заданий.
//                 ВыполненаПопыткаОткрытия                   - Булево - Ложь, для использования в вызывающей процедуре.
//                 УведомлятьОНекорректномВыполнении          - Булево.
//                 ПериодУведомления                          - Число.
//                 Отказ                                      - Булево.
//                 ОписаниеОшибки                             - Строка.
//
Функция ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Знач ПоНастройкеАвтоОткрытия = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяОткрытьОтдельныйСеанс"			, Ложь);
	Результат.Вставить("ВыполненаПопыткаОткрытия"				, Ложь);
	Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки"	, "");
	Результат.Вставить("УведомлятьОНекорректномВыполнении"		, Ложь);
	Результат.Вставить("ПериодУведомления"						, Неопределено);
	Результат.Вставить("Отказ"									, Ложь);
	Результат.Вставить("ОписаниеОшибки"							, "");
	
	Если ПоНастройкеАвтоОткрытия Тогда
		Результат.Вставить("ТекущийПользовательАдминистратор"	, ПравоДоступа("Администрирование", Метаданные, ПользователиИнформационнойБазы.ТекущийПользователь()));
	КонецЕсли;
	
	Результат.УведомлятьОНекорректномВыполнении = НужноУведомлятьОНекорректномВыполненииРегламентныхЗаданий(Результат.ПериодУведомления);
	
	Настройки = ПолучитьНастройкиВыполненияРегламентныхЗаданий();
	Если ПоНастройкеАвтоОткрытия
		И НЕ Настройки.АвтоматическиЗапускатьОтдельныйСеансДляВыполненияРегламентныхЗаданий Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Если ПоНастройкеАвтоОткрытия Тогда
			Возврат Результат;
		Иначе
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = НСтр("ru = 'Регламентные задания выполняются на сервере!'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаданияВыполняютсяНормально = Неопределено;
	ТекущийСеансВыполняетРегламентныеЗадания(ЗаданияВыполняютсяНормально);
	Если ЗаданияВыполняютсяНормально Тогда
		Если ПоНастройкеАвтоОткрытия Тогда
			Возврат Результат;
		Иначе
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = НСтр("ru = 'Сеанс, выполняющий регламентные задания, уже открыт!'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
	// Определение начала текущего сеанса.
	НачалоТекущегоСеанса = '00010101';
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерТекущегоСеанса Тогда
			НачалоТекущегоСеанса = Сеанс.НачалоСеанса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ДополнительныеПараметрыКоманднойСтроки = """"
	+ " /C""DoScheduledJobs SkipMessageBox AloneIBSession "
	+ "SessionNumber=" + НомерТекущегоСеанса + " SessionStarted=" + НачалоТекущегоСеанса + """";
	
	Результат.ТребуетсяОткрытьОтдельныйСеанс = Истина;
	
	Возврат Результат;
	
КонецФункции

// Процедура предназначена для внутреннего использования
Функция ПолучитьРасписаниеРегламентногоЗаданияВСтруктуре(Знач Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Возврат ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(ПолучитьРегламентноеЗадание(Идентификатор).Расписание);
	
КонецФункции

// Процедура предназначена для внутреннего использования
Процедура УстановитьРасписаниеРегламентногоЗаданияИзСтруктуры(Знач Идентификатор, Знач РасписаниеВСтруктуре) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = ПолучитьРегламентноеЗадание(Идентификатор);
	Задание.Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(РасписаниеВСтруктуре);
	Задание.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВНУТРЕННЕГО ИСПОЛЬЗОВАНИЯ
// Для работы с фоновыми заданиями
//

// Функция ПолучитьТаблицуСвойствФоновыхЗаданий() "эмулирует" функцию
// ФоновыеЗадания.ПолучитьФоновыеЗадания() для серверной и файловой ИБ.
//  Структуру таблицы  смотри в функции ПустаяТаблицаСвойствФоновыхЗаданий().
// 
// Параметры:
//  Отбор        - Структура - допустимые поля:
//                 УникальныйИдентификатор, Ключ, Состояние, Начало, Конец,
//                 Наименование, ИмяМетода, РегламентноеЗадание. 
//  ВсегоЗаданий - Число - возвращает общее количество заданий без учета отбора.
//  ПрочитанноеСостояние - Неопределено, только для внутреннего использования.
//
// Возвращаемое значение:
//  ТаблицаЗначений  - возвращается таблица после отбора.
//
Функция ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор = Неопределено, ВсегоЗаданий = 0) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Таблица = ПустаяТаблицаСвойствФоновыхЗаданий();
	
	Если Отбор <> Неопределено
		И Отбор.Свойство("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания") Тогда
		Отбор.Удалить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
		ПолучитьПоследнее = Истина;
	Иначе
		ПолучитьПоследнее = Ложь;
	КонецЕсли;
	
	// Добавление истории фоновых заданий, полученных с сервера.
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Если Отбор <> Неопределено
			И Отбор.Свойство("ИдентификаторРегламентногоЗадания")
			И ЗначениеЗаполнено(Отбор.ИдентификаторРегламентногоЗадания) Тогда
			//
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			Если РегламентноеЗадание <> Неопределено Тогда
				ПоследнееФоновоеЗадание = РегламентноеЗадание.ПоследнееЗадание;
				Если ПолучитьПоследнее
					И ПоследнееФоновоеЗадание <> Неопределено Тогда
					МассивФоновыхЗаданий = Новый Массив;
					МассивФоновыхЗаданий.Добавить(ПоследнееФоновоеЗадание);
					ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
				Иначе
					ПервыйОтбор = Новый Структура("РегламентноеЗадание", РегламентноеЗадание);
					ДобавитьСвойстваФоновыхЗаданий(ФоновыеЗадания.ПолучитьФоновыеЗадания(ПервыйОтбор), Таблица);
				КонецЕсли;
			КонецЕсли;
			ВторойОтбор = Новый Структура("Ключ", Отбор.ИдентификаторРегламентногоЗадания);
			ДобавитьСвойстваФоновыхЗаданий(ФоновыеЗадания.ПолучитьФоновыеЗадания(ВторойОтбор), Таблица);
		Иначе
			ДобавитьСвойстваФоновыхЗаданий(ФоновыеЗадания.ПолучитьФоновыеЗадания(), Таблица);
		КонецЕсли;
	КонецЕсли;
	
	// Добавление состояний регламентных заданий
	Для каждого РегламентноеЗадание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания() Цикл
		ИдентификаторРегламентногоЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);
		Свойства = ХранилищеОбщихНастроек.Загрузить("СостояниеРегламентногоЗадания_" + ИдентификаторРегламентногоЗадания, , , "");
		Свойства = ?(ТипЗнч(Свойства) = Тип("ХранилищеЗначения"), Свойства.Получить(), Неопределено);
		//
		Если ТипЗнч(Свойства) = Тип("Структура")
			И Свойства.ИдентификаторРегламентногоЗадания = ИдентификаторРегламентногоЗадания
			И Таблица.НайтиСтроки(Новый Структура("Идентификатор, НаСервере", Свойства.Идентификатор, Свойства.НаСервере)).Количество() = 0 Тогда
			//
			Если Свойства.НаСервере Тогда
				ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + ИдентификаторРегламентногоЗадания, , Неопределено, , "");
			Иначе
				Если Свойства.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					НайденСеансВыполняющийЗадания = Ложь;
					Для каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
						Если Сеанс.НомерСеанса  = Свойства.НомерСеанса
							И Сеанс.НачалоСеанса = Свойства.НачалоСеанса Тогда
							//
							НайденСеансВыполняющийЗадания = НомерСеансаИнформационнойБазы() <> Сеанс.НомерСеанса;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ НайденСеансВыполняющийЗадания Тогда
						Свойства.Конец = ТекущаяДата();
						Свойства.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно;
						Свойства.ОписаниеИнформацииОбОшибке = НСтр("ru = 'Не найден сеанс, выполняющий процедуру регламентного задания.'");
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Свойства);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Таблица.Сортировать("Начало Убыв, Конец Убыв");
	
	ВсегоЗаданий = Таблица.Количество();
	
	// Отбор фоновых заданий.
	Если Отбор <> Неопределено Тогда
		Начало    = Неопределено;
		Конец     = Неопределено;
		Состояние = Неопределено;
		Если Отбор.Свойство("Начало") Тогда
			Начало = ?(ЗначениеЗаполнено(Отбор.Начало), Отбор.Начало, Неопределено);
			Отбор.Удалить("Начало");
		КонецЕсли;
		Если Отбор.Свойство("Конец") Тогда
			Конец = ?(ЗначениеЗаполнено(Отбор.Конец), Отбор.Конец, Неопределено);
			Отбор.Удалить("Конец");
		КонецЕсли;
		Если Отбор.Свойство("Состояние") Тогда
			Если ТипЗнч(Отбор.Состояние) = Тип("Массив") Тогда
				Состояние = Отбор.Состояние;
				Отбор.Удалить("Состояние");
			КонецЕсли;
		КонецЕсли;
		
		Если Отбор.Количество() <> 0 Тогда
			Строки = Таблица.НайтиСтроки(Отбор);
		Иначе
			Строки = Таблица;
		КонецЕсли;
		// Выполнение дополнительной фильтрации по периоду и состоянию (если отбор определен).
		НомерЭлемента = Строки.Количество() - 1;
		Пока НомерЭлемента >= 0 Цикл
			Если Начало    <> Неопределено И Начало > Строки[НомерЭлемента].Начало ИЛИ
				Конец     <> Неопределено И Конец  < ?(ЗначениеЗаполнено(Строки[НомерЭлемента].Конец), Строки[НомерЭлемента].Конец, ТекущаяДата()) ИЛИ
				Состояние <> Неопределено И Состояние.Найти(Строки[НомерЭлемента].Состояние) = Неопределено Тогда
				Строки.Удалить(НомерЭлемента);
			КонецЕсли;
			НомерЭлемента = НомерЭлемента - 1;
		КонецЦикла;
		// Удаление лишних строк из таблицы.
		Если ТипЗнч(Строки) = Тип("Массив") Тогда
			НомерСтроки = ВсегоЗаданий - 1;
			Пока НомерСтроки >= 0 Цикл
				Если Строки.Найти(Таблица[НомерСтроки]) = Неопределено Тогда
					Таблица.Удалить(Таблица[НомерСтроки]);
				КонецЕсли;
				НомерСтроки = НомерСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Функция возвращает свойства ФоновогоЗадания по строке уникального идентификатора.
//
// Параметры:
//  Идентификатор - Строка - уникального идентификатора ФоновогоЗадания.
//  ИменаСвойств  - Строка, если заполнено, возвращается структура с указанными свойствами.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Структура - свойства ФоновогоЗадания.
//
Функция ПолучитьСвойстваФоновогоЗадания(Идентификатор, ИменаСвойств = "") Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Отбор = Новый Структура("Идентификатор", Идентификатор);
	ТаблицаСвойствФоновыхЗаданий = ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ИменаСвойств) Тогда
			Результат = Новый Структура(ИменаСвойств);
			ЗаполнитьЗначенияСвойств(Результат, ТаблицаСвойствФоновыхЗаданий[0]);
		Иначе
			Результат = ТаблицаСвойствФоновыхЗаданий[0];
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания возвращает
// свойства последнего фонового задания выполненного при выполнении регламентного задания, если оно есть.
// Процедура работает, как в файл-серверном, так и в клиент-серверном режимах.
//
// Параметры:
//  РегламентноеЗадание - РегламентноеЗадание, Строка - строка уникального идентификатора РегламентногоЗадания.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено.
//
Функция ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(РегламентноеЗадание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(РегламентноеЗадание) = Тип("РегламентноеЗадание"), Строка(РегламентноеЗадание.УникальныйИдентификатор), РегламентноеЗадание);
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторРегламентногоЗадания", ИдентификаторРегламентногоЗадания);
	Отбор.Вставить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
	ТаблицаСвойствФоновыхЗаданий = ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	ТаблицаСвойствФоновыхЗаданий.Сортировать("Конец Возр");
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() = 0 Тогда
		СвойстваФоновогоЗадания = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТаблицаСвойствФоновыхЗаданий[0].Конец) Тогда
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[0];
	Иначе
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[ТаблицаСвойствФоновыхЗаданий.Количество()-1];
	КонецЕсли;
	
	СохраняемоеЗначение = Новый ХранилищеЗначения(?(СвойстваФоновогоЗадания = Неопределено, Неопределено, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СвойстваФоновогоЗадания)));
	ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + ИдентификаторРегламентногоЗадания, , СохраняемоеЗначение, , "");
	
	Возврат СвойстваФоновогоЗадания;
	
КонецФункции

// Процедура ОтменитьФоновоеЗадание отменяет фоновое задание, если
// это возможно, а именно, если оно выполняется на сервере, и активно.
//
// Параметры:
//  Идентификатор  - Строка уникального идентификатора ФоновогоЗадания.
// 
// Возвращаемое значение:
//  Булево       - НЕ Отказ.
//
Процедура ОтменитьФоновоеЗадание(Идентификатор) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение( НСтр("ru ='Фоновые задания не используются
		|в файловой информационной базе.'"));
	КонецЕсли;
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Отбор = Новый Структура("УникальныйИдентификатор", Новый УникальныйИдентификатор(Идентификатор));
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() = 1 Тогда
		ФоновоеЗадание = МассивФоновыхЗаданий[0];
	Иначе
		ВызватьИсключение( НСтр("ru = 'Фоновое задание не найдено на сервере!'") );
	КонецЕсли;
	
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ВызватьИсключение( НСтр("ru = 'Задание не выполняется, его нельзя отменить!'") );
	КонецЕсли;
	
	ФоновоеЗадание.Отменить();
	
КонецПроцедуры

// Функция СообщенияИОписанияОшибокФоновогоЗадания возвращает
// многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// если фоновое задание найдено по идентификатору и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - Строка - УникальныйИдентификатор ФоновогоЗадания строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция СообщенияИОписанияОшибокФоновогоЗадания(Идентификатор, СвойстваФоновогоЗадания = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Если СвойстваФоновогоЗадания = Неопределено Тогда
		СвойстваФоновогоЗадания = ПолучитьСвойстваФоновогоЗадания(Идентификатор);
	КонецЕсли;
	
	Строка = "";
	Если СвойстваФоновогоЗадания <> Неопределено Тогда
		Для каждого Сообщение Из СвойстваФоновогоЗадания.СообщенияПользователю Цикл
			Строка = Строка + ?(Строка = "",
			Сообщение,
			"
			|
			|" + Сообщение);
		КонецЦикла;
		Если ЗначениеЗаполнено(СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке) Тогда
			Строка = Строка + ?(Строка = "",
			СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке,
			"
			|
			|" + СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

// Функция ПустаяТаблицаСвойствФоновыхЗаданий.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПустаяТаблицаСвойствФоновыхЗаданий()
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("НаСервере",                         Новый ОписаниеТипов("Булево"));
	НоваяТаблица.Колонки.Добавить("Идентификатор",                     Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Наименование",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Ключ",                              Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Начало",                            Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("Конец",                             Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("ИдентификаторРегламентногоЗадания", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Состояние",                         Новый ОписаниеТипов("СостояниеФоновогоЗадания"));
	НоваяТаблица.Колонки.Добавить("ИмяМетода",                         Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расположение",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ОписаниеИнформацииОбОшибке",        Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ПопыткаЗапуска",                    Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("СообщенияПользователю",             Новый ОписаниеТипов("Массив"));
	НоваяТаблица.Колонки.Добавить("НомерСеанса",                       Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("НачалоСеанса",                      Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Индексы.Добавить("Идентификатор, Начало");
	
	Возврат НоваяТаблица;
	
КонецФункции

// Функция ПроверитьНастройки служит для заполнения/восстановления структуры свойств
// настроек, хранимых в структуре "Состояние" свойства Настройки.
//
// Параметры:
//  Настройки - Неопределено, Структура.
//
// Возвращаемое значение:
//  Структура - обновленные настройки.
//
Функция ПроверитьНастройки(Знач Настройки = Неопределено)
	
	НоваяСтруктураНастроек = Новый Структура();
	// Если нужно и можно, то при запуске клиентского приложения автоматически открывать сеанс выполнения регламентных заданий.
	НоваяСтруктураНастроек.Вставить("АвтоматическиЗапускатьОтдельныйСеансДляВыполненияРегламентныхЗаданий", Ложь);
	// Если задания не выполняются или выполнение "висит", уведомлять пользователя.
	НоваяСтруктураНастроек.Вставить("УведомлятьОНекорректномВыполненииРегламентныхЗаданий",                 Ложь);
	//  Период, минут.
	НоваяСтруктураНастроек.Вставить("ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий",          15);
	
	// Копирование существующих свойств.
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Для каждого КлючИзначение Из НоваяСтруктураНастроек Цикл
			Если Настройки.Свойство(КлючИзначение.Ключ) Тогда
				Если ТипЗнч(НоваяСтруктураНастроек[КлючИзначение.Ключ]) = ТипЗнч(Настройки[КлючИзначение.Ключ]) Тогда
					НоваяСтруктураНастроек[КлючИзначение.Ключ] = Настройки[КлючИзначение.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ (НоваяСтруктураНастроек.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий >= 1 И
		НоваяСтруктураНастроек.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий <= 99 ) Тогда
		
		НоваяСтруктураНастроек.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий = 15;
	КонецЕсли;
	
	Возврат НоваяСтруктураНастроек;
	
КонецФункции

// Функция ПолучитьСостояниеВыполненияРегламентныхЗаданий возвращает
// структуру, описывающую состояние выполнения регламентных заданий.
//
Функция ПолучитьСостояниеВыполненияРегламентныхЗаданий(Заблокировать = Ложь)
	
	// Подготовка данных для проверки или начальной установки свойств прочитанного состояния.
	НоваяСтруктура = Новый Структура();
	// Хранение истории выполнения фоновых заданий.
	НоваяСтруктура.Вставить("НомерСеанса",                          0);
	НоваяСтруктура.Вставить("НачалоСеанса",                         '00010101');
	НоваяСтруктура.Вставить("ИмяКомпьютера",                        "");
	НоваяСтруктура.Вставить("ИмяПриложения",                        "");
	НоваяСтруктура.Вставить("ИмяПользователя",                      "");
	НоваяСтруктура.Вставить("ИдентификаторОчередногоЗадания",       "");
	НоваяСтруктура.Вставить("НачалоВыполненияОчередногоЗадания",    '00010101');
	НоваяСтруктура.Вставить("ОкончаниеВыполненияОчередногоЗадания", '00010101');
	
	Состояние = ХранилищеОбщихНастроек.Загрузить("СостояниеВыполненияРегламентныхЗаданий", , , "");
	Состояние = ?(ТипЗнч(Состояние) = Тип("ХранилищеЗначения"), Состояние.Получить(), Неопределено);
	
	// Копирование существующих свойств.
	Если ТипЗнч(Состояние) = Тип(НоваяСтруктура) Тогда
		Для каждого КлючИзначение Из НоваяСтруктура Цикл
			Если Состояние.Свойство(КлючИзначение.Ключ) Тогда
				Если ТипЗнч(НоваяСтруктура[КлючИзначение.Ключ]) = ТипЗнч(Состояние[КлючИзначение.Ключ]) Тогда
					НоваяСтруктура[КлючИзначение.Ключ] = Состояние[КлючИзначение.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НоваяСтруктура;
	
КонецФункции

// Процедура СохранитьСостояниеВыполненияРегламентныхЗаданий() сохраняет
// в структуре СостояниеВыполненияРегламентныхЗаданий переданное состояние.
//
// Параметры:
//  Состояние - Структура - изменённое значение функции
//                 ПолучитьСостояниеВыполненияРегламентныхЗаданий().
//  ИзмененныеСвойства - Неопределено, Строка;
//                       Неопределено - требуется записать состояние, иначе сохранить только указанные свойства
//                       Строка       - список имен свойств, разделенный запятыми,
//                                      которые необходимо сохранить
//
Процедура СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние, Знач ИзмененныеСвойства = Неопределено)
	
	Если ИзмененныеСвойства <> Неопределено Тогда
		ТекущееСостояние = ПолучитьСостояниеВыполненияРегламентныхЗаданий();
		ЗаполнитьЗначенияСвойств(ТекущееСостояние, Состояние, ИзмененныеСвойства);
		Состояние = ТекущееСостояние;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("СостояниеВыполненияРегламентныхЗаданий", , Новый ХранилищеЗначения(Состояние), , "");
	
КонецПроцедуры

// Функция ВыполнитьРегламентноеЗадание предназначена
// только для режима "файл-сервер", используется в процедуре
// ВыполнитьРегламентныеЗадания()
// 
// Параметры:
//  Состояние       - Структура.
//  Задание         - РегламентноеЗадание.
//  ЗапускВручную   - Булево.
//  МоментЗапуска   - Неопределено, Дата - Устанавливает момент запуска или возвращает момент запуска
//  МоментОкончания - Неопределено, Дата - Возвращает момент окончание
//
// Возвращаемое значение
//  Булево. Если Ложь, значит процедура регламентного задания уже выполняется
//
Функция ВыполнитьРегламентноеЗадание(Знач Задание,
	Знач ЗапускВручную = Ложь,
	МоментЗапуска = Неопределено,
	МоментОкончания = Неопределено,
	НомерСеанса = Неопределено,
	НачалоСеанса = Неопределено)
	
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
	
	Если СвойстваПоследнегоФоновогоЗадания <> Неопределено
		И СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		//
		НомерСеанса  = СвойстваПоследнегоФоновогоЗадания.НомерСеанса;
		НачалоСеанса = СвойстваПоследнегоФоновогоЗадания.НачалоСеанса;
		Возврат Ложь;
	КонецЕсли;
	
	ИмяМетода = Задание.Метаданные.ИмяМетода;
	НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	?(ЗапускВручную,
	НСтр("ru = 'Запуск вручную: %1'"),
	НСтр("ru = 'Автозапуск: %1'")),
	ПредставлениеРегламентногоЗадания(Задание));
	
	МоментЗапуска = ?(ТипЗнч(МоментЗапуска) <> Тип("Дата")
	ИЛИ НЕ ЗначениеЗаполнено(МоментЗапуска), ТекущаяДата(), МоментЗапуска);
	
	// Создание свойств нового фонового псевдо задания
	СвойстваФоновогоЗадания = ПустаяТаблицаСвойствФоновыхЗаданий().Добавить();
	СвойстваФоновогоЗадания.Идентификатор  = Строка(Новый УникальныйИдентификатор());
	СвойстваФоновогоЗадания.ПопыткаЗапуска = ?(СвойстваПоследнегоФоновогоЗадания <> Неопределено И
	СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно,
	СвойстваПоследнегоФоновогоЗадания.ПопыткаЗапуска + 1,
	1);
	СвойстваФоновогоЗадания.Наименование                      = НаименованиеФоновогоЗадания;
	СвойстваФоновогоЗадания.ИдентификаторРегламентногоЗадания = Строка(Задание.УникальныйИдентификатор);
	СвойстваФоновогоЗадания.Расположение                      = "\\" + ИмяКомпьютера();
	СвойстваФоновогоЗадания.ИмяМетода                         = ИмяМетода;
	СвойстваФоновогоЗадания.Состояние                         = СостояниеФоновогоЗадания.Активно;
	СвойстваФоновогоЗадания.Начало                            = МоментЗапуска;
	СвойстваФоновогоЗадания.НомерСеанса                       = НомерСеансаИнформационнойБазы();
	Для каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если Сеанс.НомерСеанса = СвойстваФоновогоЗадания.НомерСеанса Тогда
			СвойстваФоновогоЗадания.НачалоСеанса = Сеанс.НачалоСеанса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка команды для выполнения метода вместо фонового задания.
	СтрокаПараметров = "";
	Индекс = 0;
	Пока Индекс < Задание.Параметры.Количество() Цикл
		СтрокаПараметров = СтрокаПараметров + "Задание.Параметры[" + Индекс + "]";
		Если Индекс < (Задание.Параметры.Количество()-1) Тогда
			СтрокаПараметров = СтрокаПараметров + ",";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Сохранение информации о запуске
	СохраняемоеЗначение = Новый ХранилищеЗначения(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СвойстваФоновогоЗадания));
	ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + Строка(Задание.УникальныйИдентификатор), , СохраняемоеЗначение, , "");
	
	ПолучитьСообщенияПользователю(Истина);
	Попытка
		Выполнить("" + ИмяМетода + "(" + СтрокаПараметров + ");");
		СвойстваФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Завершено;
	Исключение
		СвойстваФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно;
		СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Фиксация окончания выполнения метода.
	МоментОкончания = ТекущаяДата();
	СвойстваФоновогоЗадания.Конец = МоментОкончания;
	СвойстваФоновогоЗадания.СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	
	Свойства = ХранилищеОбщихНастроек.Загрузить("СостояниеРегламентногоЗадания_" + Строка(Задание.УникальныйИдентификатор), , , "");
	Свойства = ?(ТипЗнч(Свойства) = Тип("ХранилищеЗначения"), Свойства.Получить(), Неопределено);
	
	Если Свойства.НомерСеанса = СвойстваФоновогоЗадания.НомерСеанса
		И Свойства.НачалоСеанса = СвойстваФоновогоЗадания.НачалоСеанса Тогда
		// Маловероятной перезаписи из-за отсутствия блокировки не произошло, поэтому можно записать свойства
		СохраняемоеЗначение = Новый ХранилищеЗначения(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СвойстваФоновогоЗадания));
		ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + Строка(Задание.УникальныйИдентификатор), , СохраняемоеЗначение, , "");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьСвойстваФоновыхЗаданий(Знач МассивФоновыхЗаданий, Знач ТаблицаСвойствФоновыхЗаданий)
	
	Индекс = МассивФоновыхЗаданий.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ФоновоеЗадание = МассивФоновыхЗаданий[Индекс];
		Строка = ТаблицаСвойствФоновыхЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ФоновоеЗадание);
		Строка.НаСервере = Истина;
		Строка.Идентификатор = ФоновоеЗадание.УникальныйИдентификатор;
		РегламентноеЗадание = ФоновоеЗадание.РегламентноеЗадание;
		Если РегламентноеЗадание = Неопределено
			И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ФоновоеЗадание.Ключ) Тогда
			//
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ФоновоеЗадание.Ключ));
		КонецЕсли;
		Строка.ИдентификаторРегламентногоЗадания 	= ?(РегламентноеЗадание = Неопределено, "", РегламентноеЗадание.УникальныйИдентификатор);
		Строка.ОписаниеИнформацииОбОшибке 			= ?(ФоновоеЗадание.ИнформацияОбОшибке = Неопределено, "", ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьКассовыеДокументыВБухгалтерию() Экспорт
	
	//Возврат; // отключено по просьбе Веры Умаровой 2014-05-12
	
	пОбработка = Обработки.ВыгрузкаПлатежныхДокументовВБухгалтерию.Создать();
	пОбработка.ИмяФайлаПравилОбмена 				= "Правила обмена загружены";
	пОбработка.НепосредственноеЧтениеВИБПриемнике 	= Истина;
	пОбработка.ТипИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= "V82";
	////пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= "10.0.0.15";
	//пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= "srv-sql02";
	//пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= "BP_CORP";
	//пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ПользовательИнформационнойБазыДляПодключения 			= "Обмен";
	//пОбработка.ПарольИнформационнойБазыДляПодключения 					= "123321";
	пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух();
	СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
	пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= СтруктураПодключения.ИмяСервера;
	пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= СтруктураПодключения.ИмяБазы;
	пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
	пОбработка.ПользовательИнформационнойБазыДляПодключения 			= СтруктураПодключения.Пользователь;
	пОбработка.ПарольИнформационнойБазыДляПодключения 					= СтруктураПодключения.Пароль;
	пОбработка.ИспользоватьТранзакции 				= Истина;
	пОбработка.КоличествоОбъектовНаТранзакцию 		= 1000000;
	пОбработка.ФлагРежимОтладки 					= Истина;
	пОбработка.РежимОбмена = "Выгрузка";
	
	пОбработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки=2;
	//
	//пОбработка.ДатаНачала = НачалоДня(ТекущаяДата() - 86400);
	//пОбработка.ДатаОкончания = КонецДня(ТекущаяДата() - 86400);
	
	пОбработка.ИмяМакета = "ПравилаОбменаДанными";
	
	//+++АК Susk (Суслин К.В.) 2017.12.20 ИП-00016868
	
	//пМакет = пОбработка.ПолучитьМакет("ПравилаОбменаДанными");
	//пОбработка.ЗагрузитьПравилаОбмена(пМакет.ПолучитьТекст(), "Строка");
	
	ЗагрузитьПравилаОБменаДаннымиРеглОбмен(пОбработка, "ПравилаОбменаДанными");
	//---АК Susk (Суслин К.В.)
	
	пОбработка.ИнициализироватьПервоначальныеЗначенияПараметров();
	
	Узел = ОбщегоНазначенияПовтИсп.ПолучитьУзелОбменаПоКоду("БП");
	
	СтрокиДереваПравилВыгрузки = пОбработка.ТаблицаПравилВыгрузки.Строки;
	
	// документы
	ПравилаВсе = СтрокиДереваПравилВыгрузки[0].Строки;
	Для каждого Правило из ПравилаВсе Цикл
		//Если Правило.Имя="РасходИзКассы" Или Правило.Имя="ПоступлениеВКассу" Тогда
		Если Правило.Имя = "АвансовыйОтчет" Или Правило.Имя="ПоступлениеВКассу"
			ИЛИ Правило.Имя = "РасходИзКассы"
			//+++АК SHEP 20170228: закомментировал, грузим в бухии, иначе может не проставиться документ прихода (партия)
			//ИЛИ Правило.Имя = "ПоступлениеДопРасходов"
			//---АК SHEP 20170228
			
			//+++AK susk 11082017 раскоментировал, т.к. исправил правила и партия будет нормально подставляться.
			//ИЛИ Правило.Имя = "ПоступлениеДопРасходов" - перенес в отдельное задание 19/10/2017
			ИЛИ Правило.Имя = "ОперацияПоТипамОпераций"
			//ИП-00016525
			ИЛИ Правило.Имя = "КорректировкаВзаиморасчетовОперация"
			//ИП-00017676
			//ИЛИ Правило.Имя = "СчетФактураПолученный"
			//ИП-00016796.01
			ИЛИ Правило.Имя = "НачислениеПроцентовПоДоговорам" Тогда
			//---AK susk
			
			// +++ АиК Зайцева А. 30.01.2017
			
			//+++АК Susk (Суслин К.В.) 2017.10.19 16877 - перенес в отдельное задание				 
			//ИЛИ Правило.Имя = "ВводВЭксплуатацию"
			//ИЛИ Правило.Имя = "СписаниеОС"
			//				ИЛИ Правило.Имя = "ОприходованиеОС" - было закоменчено ранее
			//ИЛИ Правило.Имя = "ИнвентаризацияОС" Тогда
			//---АК Susk (Суслин К.В.) 
			
			// --- АиК 
			//ИЛИ Правило.Имя = "ПередачаВПереработку"
			//ИЛИ Правило.Имя = "ВозвратИзПереработки"
			//ИЛИ Правило.Имя = "ПоступлениеИзПереработки" Тогда
			Правило.Включить 			= 1;
			Правило.СсылкаНаУзелОбмена	= Узел;
		Иначе	
			Правило.Включить 			= 0;
		КонецЕсли;	
	КонецЦикла;	
	
	//// справочники
	Для каждого Правило из СтрокиДереваПравилВыгрузки Цикл
		Если Правило.Имя = "Справочники" Тогда
			Правило.Включить = 1;
		КонецЕсли;	
	КонецЦикла;	
	ПравилаВсе = СтрокиДереваПравилВыгрузки[1].Строки;
	Для каждого Правило из ПравилаВсе Цикл
		Если Правило.Имя = "Номенклатура_СтавкаНДС" Тогда
			Правило.Включить 			= 1;
			Правило.СсылкаНаУзелОбмена	= Узел;
		Иначе	
			Правило.Включить 			= 0;
		КонецЕсли;	
	КонецЦикла;	
	
	пОбработка.ВыполнитьВыгрузку();
	
	//+++АК Susk (Суслин К.В.) 2018.03.22 б/н	 
	ВыгрузитьСчетФактурыВБухгалтерию();
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.03.22 б/н
Процедура ВыгрузитьСчетФактурыВБухгалтерию()
	
	пОбработка = ВернутьПроинициализированнуюОбработкуОбмена();
	пОбработка.ПользовательИнформационнойБазыДляПодключения 			= "ОбменСчетФактур";
	пОбработка.ПарольИнформационнойБазыДляПодключения 					= "19283746";
	
	Узел = ОбщегоНазначенияПовтИсп.ПолучитьУзелОбменаПоКоду("БП");
	
	СтрокиДереваПравилВыгрузки = пОбработка.ТаблицаПравилВыгрузки.Строки;
	
	// документы
	ПравилаВсе = СтрокиДереваПравилВыгрузки[0].Строки;
	Для каждого Правило из ПравилаВсе Цикл
		Если Правило.Имя = "СчетФактураПолученный" Тогда
			Правило.Включить 			= 1;
			Правило.СсылкаНаУзелОбмена	= Узел;
		Иначе	
			Правило.Включить 			= 0;
		КонецЕсли;	
	КонецЦикла;		
	
	пОбработка.ВыполнитьВыгрузку();		
	
КонецПроцедуры 

//+++АК Susk (Суслин К.В.) 2018.03.10 ИП-00017968 
Функция ВернутьПроинициализированнуюОбработкуОбмена(НазваниеМакета = "")
	
	Возврат ОбменСБП2_0.ИнициализироватьОбработкуОбмена(, НазваниеМакета);
	
	#Область ВременноКомментТекст
	//пОбработка = Обработки.ВыгрузкаПлатежныхДокументовВБухгалтерию.Создать();
	//пОбработка.ИмяФайлаПравилОбмена 				= "Правила обмена загружены";
	//пОбработка.НепосредственноеЧтениеВИБПриемнике 	= Истина;
	//пОбработка.ТипИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух();
	//СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
	//пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= СтруктураПодключения.ИмяСервера;
	//пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= СтруктураПодключения.ИмяБазы;
	//пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ПользовательИнформационнойБазыДляПодключения 			= СтруктураПодключения.Пользователь;
	//пОбработка.ПарольИнформационнойБазыДляПодключения 					= СтруктураПодключения.Пароль;
	//пОбработка.ИспользоватьТранзакции 				= Истина;
	//пОбработка.КоличествоОбъектовНаТранзакцию 		= 1000000;
	//пОбработка.ФлагРежимОтладки 					= Истина;	
	//пОбработка.РежимОбмена = "Выгрузка";
	//	
	//пОбработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки=0;
	//
	//пОбработка.ИмяМакета = ?(ЗначениеЗаполнено(НазваниеМакета), НазваниеМакета, "ПравилаОбменаДанными");
	//
	////+++АК Susk (Суслин К.В.) 2017.12.20 ИП-00016868
	//
	////пМакет = пОбработка.ПолучитьМакет("ПравилаОбменаДанными");
	////пОбработка.ЗагрузитьПравилаОбмена(пМакет.ПолучитьТекст(), "Строка");
	//
	//ЗагрузитьПравилаОБменаДаннымиРеглОбмен(пОбработка, ?(ЗначениеЗаполнено(НазваниеМакета), НазваниеМакета, "ПравилаОбменаДанными"));
	////---АК Susk (Суслин К.В.)	
	//
	//пОбработка.ИнициализироватьПервоначальныеЗначенияПараметров();
	//
	//Возврат пОбработка;
	#КонецОбласти

КонецФункции

//+++АК Susk (Суслин К.В.) 2017.10.19 ИП-00016877  
Процедура ВыгрузитьДокументыПоОСВБухгалтерию() Экспорт
	
	пОбработка = ВернутьПроинициализированнуюОбработкуОбмена();
	
	ДополнитьОбработкуОбменаЛогированием(пОбработка);
	
	Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");
	
	СтрокиДереваПравилВыгрузки = пОбработка.ТаблицаПравилВыгрузки.Строки;
	
	// документы
	ПравилаВсе = СтрокиДереваПравилВыгрузки[0].Строки;
	Для каждого Правило из ПравилаВсе Цикл
		Если Правило.Имя = "ПоступлениеДопРасходов"
			ИЛИ Правило.Имя = "ВводВЭксплуатацию"
			ИЛИ Правило.Имя = "СписаниеОС"
			ИЛИ Правило.Имя = "ИнвентаризацияОС" 
			ИЛИ Правило.Имя = "РеализацияОС" 
			ИЛИ Правило.Имя = "ПеремещениеОС"
			ИЛИ Правило.Имя = "КорректировкаПоступления"
			ИЛИ Правило.Имя = "ВозвратТоваровПоставщику"
			ИЛИ Правило.Имя = "НачислениеАренднойПлатыОтАрендодателей"			
			ИЛИ Правило.Имя = "ТребованиеНакладная" Тогда
			Правило.Включить 			= 1;
			Правило.СсылкаНаУзелОбмена	= Узел;
		Иначе	
			Правило.Включить 			= 0;
		КонецЕсли;	
	КонецЦикла;		
	
	пОбработка.ВыполнитьВыгрузку();	
	
	//Отдельно мутные/замутные всякие правила для прочих алгоритмов
	Для каждого Правило из ПравилаВсе Цикл
		Если НЕ Правило.Имя = "ТН_Из_ЗМ" Тогда
			Правило.Включить 			= 0;			
		Иначе	
			Правило.Включить 			= 1;
		КонецЕсли;	
	КонецЦикла;
	
	пОбработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки=0;
	пОбработка.ВыполнитьВыгрузку();		
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.03.10 ИП-00017968 
Процедура ВыгрузитьДокументыПрочееВБухгалтерию() Экспорт
	
	пОбработка = ВернутьПроинициализированнуюОбработкуОбмена();
	
	ДополнитьОбработкуОбменаЛогированием(пОбработка, "Прочее");
	
	Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП2");
	
	СтрокиДереваПравилВыгрузки = пОбработка.ТаблицаПравилВыгрузки.Строки;
	
	// документы
	ПравилаВсе = СтрокиДереваПравилВыгрузки[0].Строки;
	Для каждого Правило из ПравилаВсе Цикл
		Если Правило.Имя = "РеализацияТоваровУслуг"
			ИЛИ Правило.Имя = "ВозвратТоваровОтПокупателя" 
			ИЛИ Правило.Имя = "ПоступлениеТоваровУслуг" Тогда
			Правило.Включить 			= 1;
			Правило.СсылкаНаУзелОбмена	= Узел;
		Иначе	
			Правило.Включить 			= 0;
		КонецЕсли;	
	КонецЦикла;		
	
	пОбработка.ВыполнитьВыгрузку();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.03.10 ИП-00017968
Процедура ДополнитьОбработкуОбменаЛогированием(пОбработка, Префикс = "")
	
	Каталог = Константы.КаталогФайловИстории.Получить();
	
	Если НЕ ЗначениеЗаполнено(Каталог) Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = Каталог + ?(Прав(Каталог, 1) <> "\", "\", "");
	КаталогДляСохранения = Каталог + "ЛогОбмена\";
	КаталогПолный = КаталогДляСохранения + Формат(ТекущаяДата(), "ДФ=yyyyMM") + "\" + Формат(ТекущаяДата(), "ДФ=dd") + "\";
	СоздатьКаталог(КаталогПолный);
	
	ФайлПротокола = КаталогПолный + "Обмен" + Префикс + Формат(ТекущаяДата(), "ДФ=dd-MM-yyyy-HH-mm-ss") + ".txt";
	ФайлПротоколаКОМ = КаталогПолный + "ОбменCOM" + Префикс + Формат(ТекущаяДата(), "ДФ=dd-MM-yyyy-HH-mm-ss") + ".txt";
	
	пОбработка.ИмяФайлаПротоколаОбмена = ФайлПротокола;
	пОбработка.ИмяФайлаПротоколаОбменаЗагрузка = ФайлПротоколаКОМ;	
	
КонецПроцедуры

Процедура ВыгрузитьКонтрагентовВБухгалтерию() Экспорт
	
	пОбработка = Обработки.ВыгрузкаПлатежныхДокументовВБухгалтерию.Создать();
	пОбработка.ИмяФайлаПравилОбмена 				= "Правила обмена загружены";
	пОбработка.НепосредственноеЧтениеВИБПриемнике 	= Истина;
	пОбработка.ТипИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= "V82";
	//пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= "10.0.0.15";
	//пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= "BP_CORP";
	//пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ПользовательИнформационнойБазыДляПодключения 			= "Обмен";
	//пОбработка.ПарольИнформационнойБазыДляПодключения 					= "123321";
	пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух();
	СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
	пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= СтруктураПодключения.ИмяСервера;
	пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= СтруктураПодключения.ИмяБазы;
	пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
	пОбработка.ПользовательИнформационнойБазыДляПодключения 			= СтруктураПодключения.Пользователь;
	пОбработка.ПарольИнформационнойБазыДляПодключения 					= СтруктураПодключения.Пароль;
	пОбработка.ИспользоватьТранзакции 				= Истина;
	пОбработка.КоличествоОбъектовНаТранзакцию 		= 1000000;
	пОбработка.ФлагРежимОтладки						= Истина;
	пОбработка.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена 		= Истина;
	пОбработка.КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена = 1000000;
	пОбработка.ИспользоватьОтборПоДатеДляВсехОбъектов 					= Ложь;
	//пОбработка.ДатаНачала = НачалоДня(ТекущаяДата() - 86400);
	//пОбработка.ДатаОкончания = КонецДня(ТекущаяДата() - 86400);
	пОбработка.ИмяМакета = "ПравилаОбменаДанными_Контрагенты";
	
	//+++АК Susk (Суслин К.В.) 2017.12.20 ИП-00016868
	
	//пМакет = пОбработка.ПолучитьМакет("ПравилаОбменаДанными_Контрагенты");
	//пОбработка.ЗагрузитьПравилаОбмена(пМакет.ПолучитьТекст(), "Строка");
	
	ЗагрузитьПравилаОБменаДаннымиРеглОбмен(пОбработка, "ПравилаОбменаДанными_Контрагенты");
	//---АК Susk (Суслин К.В.)	
	
	пОбработка.ИнициализироватьПервоначальныеЗначенияПараметров();
	пОбработка.УстановитьУзелОбменаУСтрокДерева(пОбработка.ТаблицаПравилВыгрузки.Строки, ПланыОбмена.ОбменСБухгалтерией.НайтиПоКоду("БУХ"));
	
	пОбработка.ВыполнитьВыгрузку();
	
	Если НЕ пОбработка.ФлагОшибки Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.ОбменСБухгалтерией.НайтиПоКоду("БУХ"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКорпКартыВБухгалтерию() Экспорт
	
	пОбработка = Обработки.ВыгрузкаПлатежныхДокументовВБухгалтерию.Создать();
	пОбработка.ИмяФайлаПравилОбмена 				= "Правила обмена загружены";
	пОбработка.НепосредственноеЧтениеВИБПриемнике 	= Истина;
	пОбработка.ТипИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= "V82";
	//пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= "10.0.0.15";
	//пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= "BP_CORP";
	//пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
	//пОбработка.ПользовательИнформационнойБазыДляПодключения 			= "Обмен";
	//пОбработка.ПарольИнформационнойБазыДляПодключения 					= "123321";
	пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух();
	СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
	пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= СтруктураПодключения.ИмяСервера;
	пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= СтруктураПодключения.ИмяБазы;
	пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
	пОбработка.ПользовательИнформационнойБазыДляПодключения 			= СтруктураПодключения.Пользователь;
	пОбработка.ПарольИнформационнойБазыДляПодключения 					= СтруктураПодключения.Пароль;
	пОбработка.ИспользоватьТранзакции 				= Истина;
	пОбработка.КоличествоОбъектовНаТранзакцию 		= 1000000;
	пОбработка.ФлагРежимОтладки						= Истина;
	пОбработка.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена 		= Истина;
	пОбработка.КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена = 1000000;
	пОбработка.ИспользоватьОтборПоДатеДляВсехОбъектов 					= Ложь;
	//пОбработка.ДатаНачала = НачалоДня(ТекущаяДата() - 86400);
	//пОбработка.ДатаОкончания = КонецДня(ТекущаяДата() - 86400);
	пОбработка.ИмяМакета = "ПравилаОбменаДанными_КорпоративныеКарты";
	пМакет = пОбработка.ПолучитьМакет("ПравилаОбменаДанными_КорпоративныеКарты");
	пОбработка.ЗагрузитьПравилаОбмена(пМакет.ПолучитьТекст(), "Строка");
	пОбработка.ИнициализироватьПервоначальныеЗначенияПараметров();
	//пОбработка.УстановитьУзелОбменаУСтрокДерева(пОбработка.ТаблицаПравилВыгрузки.Строки, ПланыОбмена.ОбменСБухгалтерией.НайтиПоКоду("БУХ"));
	
	пОбработка.ВыполнитьВыгрузку();
	
	//Если НЕ пОбработка.ФлагОшибки Тогда
	//	ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.ОбменСБухгалтерией.НайтиПоКоду("БУХ"));
	//КонецЕсли;
	
КонецПроцедуры

Процедура УдалениеПомеченныхОбъектов() Экспорт
	
	Обр = Обработки.УдалениеПомеченныхОбъектов.Создать();
	Обр.вОбновитьПомеченныеНаУдаление();
	Обр.вКонтроль();
	Обр.вУдалить();
	
КонецПроцедуры

Процедура ОповещенияПоНеотправленнымПлатежкам() Экспорт
	
	Обраб = Обработки.СозданиеЗадачПоНеотправленнымПлатежкам.Создать();
	Обраб.СоздатьЗадачи();
	
КонецПроцедуры

Процедура ОповещенияПоНеоплаченнымЗаявкамНаРасходование() Экспорт
	
	Обраб = Обработки.СозданиеЗадачПоНеоплаченнымЗаявкамНаРасходование.Создать();
	Обраб.СоздатьЗадачи();
	
КонецПроцедуры

Процедура ЗагрузкаРКОИзАстора() Экспорт
	
	Обр = Обработки.ЗагрузкаРКОИзАстора.Создать();
	Обр.ЗагрузитьРКО();
	
КонецПроцедуры

Процедура СинхронизацияПродавцовСАкцес() Экспорт
	
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОПродавцах();
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОСотрудниках();
	
КонецПроцедуры

Процедура ПривязкаТорговыхТочекКЦФО() Экспорт
	
	Возврат;
	
	Обр = Обработки.ПривязкаТорговыхТочекКЦФО.Создать();
	Обр.ЗаполнитьРегистр();
	
КонецПроцедуры

Процедура ЗагрузкаДанныхИзАкцес() Экспорт
	
	//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОГруппахТорговыхТочек();
	//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОПоставщиках();
	//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеТорговыхТочек();
	//доп обработка торговых точек
	//ОбменСAccess.ЗагрузитьТТ();
	//Попытка
	//	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОНоменклатуре();
	//Исключение
	//КонецПопытки;	
	//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОХарактеристиках();
	//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОЦенахЗакупки(НачалоДня(ТекущаяДата()));
	
	//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОНачальныхЦенахЗакупки(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1)));
	//ДатаОбработки = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1)) + 86400;
	//Пока ДатаОбработки <= ТекущаяДата() Цикл
	//	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОЦенахЗакупки(ДатаОбработки);
	//	ДатаОбработки = ДатаОбработки + 86400;
	//КонецЦикла;	
	
	Попытка
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьНачальныеДанныеОПорядкеОбеспеченияТорговыхТочек(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1)));
	Исключение
	КонецПопытки;
	
	Попытка
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОТоварномАссортиментеНаТорговыхТочках(ТекущаяДата());
	Исключение
	КонецПопытки;
	
	Попытка
		ДатаОбработки = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1)) + 86400;
		Пока ДатаОбработки <= ТекущаяДата() Цикл
			Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОПорядкеОбеспеченияТорговыхТочек(ДатаОбработки);
			ДатаОбработки = ДатаОбработки + 86400;
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	//Попытка
	//	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеПоРозничнымЦенам(НачалоДня(ТекущаяДата()));
	//Исключение
	//КонецПопытки;
	
	Попытка
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьПоставщиковОрганизаций();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаЗаказовПоставщику() Экспорт
	
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОЗаказахПоставщику(НачалоДня(ТекущаяДата()) + 86400);
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОЗаказахПоставщику(НачалоДня(ТекущаяДата()) + 86400 * 2);
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОЗаказахПоставщику(НачалоДня(ТекущаяДата()) + 86400 * 3);
	
КонецПроцедуры

Функция ПолучитьСебестоимость(Номенклатура, ТабСебестоимость)
	
	ЗначениеВозврата = Неопределено;
	СтрокаСебестоимость = ТабСебестоимость.Найти(Номенклатура, "Номенклатура");
	Если СтрокаСебестоимость = Неопределено Тогда
		//СтрокаЦена = ТабЦены.Найти(Номенклатура, "Номенклатура");
		//Если СтрокаЦена <> Неопределено Тогда
		//	ЗначениеВозврата = ?(ТипЗнч(СтрокаЦена.Цена) = Тип("Число"), СтрокаЦена.Цена, 0);
		//КонецЕсли;
		ЗначениеВозврата = Неопределено;
	Иначе
		ЗначениеВозврата = СтрокаСебестоимость.Себестоимость;
		//Если ЗначениеВозврата = 0 Тогда
		//	СтрокаЦена = ТабЦены.Найти(Номенклатура, "Номенклатура");
		//	Если СтрокаЦена <> Неопределено Тогда
		//		ЗначениеВозврата = ?(ТипЗнч(СтрокаЦена.Цена) = Тип("Число"), СтрокаЦена.Цена, 0);
		//	КонецЕсли;
		//КонецЕсли;	
	КонецЕсли;
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьСебестоимостьМатериал(Номенклатура, Организация, СчетУчета, ТабСебестоимость)
	
	ЗначениеВозврата = Неопределено;
	СтрокиСебестоимость = ТабСебестоимость.НайтиСтроки(Новый Структура("Организация, СчетУчета, Номенклатура", Организация, СчетУчета, Номенклатура));
	Если СтрокиСебестоимость.Количество() = 0 Тогда
		//СтрокаЦена = ТабЦены.Найти(Номенклатура, "Номенклатура");
		//Если СтрокаЦена <> Неопределено Тогда
		//	ЗначениеВозврата = ?(ТипЗнч(СтрокаЦена.Цена) = Тип("Число"), СтрокаЦена.Цена, 0);
		//КонецЕсли;
		ЗначениеВозврата = Неопределено;
	Иначе
		ЗначениеВозврата = СтрокиСебестоимость[0].Себестоимость;
		//Если ЗначениеВозврата = 0 Тогда
		//	СтрокаЦена = ТабЦены.Найти(Номенклатура, "Номенклатура");
		//	Если СтрокаЦена <> Неопределено Тогда
		//		ЗначениеВозврата = ?(ТипЗнч(СтрокаЦена.Цена) = Тип("Число"), СтрокаЦена.Цена, 0);
		//	КонецЕсли;
		//КонецЕсли;	
	КонецЕсли;
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура ПересчитатьСебестоимостьПоКомплектующим(МесяцОбработки) Экспорт
	
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатералыДляВыпуска = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	ОргЛуг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка КАК Товар
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&ДатаКон, ) КАК Спецификации
	               |		ПО НоменклатураСпр.Ссылка = Спецификации.НоменклатураСырье
	               |ГДЕ
	               |	НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И НоменклатураСпр.ЭтоКомплект = ЛОЖЬ
	               |	И НЕ Спецификации.НоменклатураСырье ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ 
	               |
	               |ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты.Номенклатура
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчетаПроизводство.Обороты(&ДатаНач, &ДатаКон, , НоменклатураПродукция.Ссылка ЕСТЬ НЕ NULL ) КАК ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Товар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |	КОНЕЦ КАК Номенклатура,
	               |	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма,
	               |	СУММА(ФинансовыйДвиженияССубконто.КоличествоДт) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Приходы
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	               |				И НЕ Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
	               |				И НЕ Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
	               |				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	               |				И (СторонаПроводкиДляПересчетаПоСебестоимости = """"
	               |					ИЛИ СторонаПроводкиДляПересчетаПоСебестоимости = ""КТ""),
	               |			,
	               |			) КАК ФинансовыйДвиженияССубконто
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |	И ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |	КОНЕЦ КАК Номенклатура,
	               |	СУММА(ФинансовыйДвиженияССубконто.Сумма * -1) КАК Сумма,
	               |	СУММА(ФинансовыйДвиженияССубконто.КоличествоКт * -1) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Расходы
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	               |				И (Регистратор ССЫЛКА Документ.Операция
	               |					И СторонаПроводкиДляПересчетаПоСебестоимости = """"),
	               |			,
	               |			) КАК ФинансовыйДвиженияССубконто
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |	И ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйОстатки.Субконто2
	               |		ИНАЧЕ ФинансовыйОстатки.Субконто1
	               |	КОНЕЦ КАК Номенклатура,
	               |	ФинансовыйОстатки.СуммаОстатокДт,
	               |	ФинансовыйОстатки.КоличествоОстатокДт
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаНачОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ)), , Организация <> &ОргЛуг) КАК ФинансовыйОстатки
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйОстатки.Субконто2
	               |			ИНАЧЕ ФинансовыйОстатки.Субконто1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Запрос.Номенклатура,
	               |	СУММА(ВЗ_Запрос.Сумма) КАК Сумма,
	               |	СУММА(ВЗ_Запрос.Количество) КАК Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_Остатки.Номенклатура КАК Номенклатура,
	               |		ВТ_Остатки.СуммаОстатокДт КАК Сумма,
	               |		ВТ_Остатки.КоличествоОстатокДт КАК Количество
	               |	ИЗ
	               |		ВТ_Остатки КАК ВТ_Остатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_Приходы.Номенклатура,
	               |		ВТ_Приходы.Сумма,
	               |		ВТ_Приходы.Количество
	               |	ИЗ
	               |		ВТ_Приходы КАК ВТ_Приходы
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_Расходы.Номенклатура,
	               |		ВТ_Расходы.Сумма,
	               |		ВТ_Расходы.Количество
	               |	ИЗ
	               |		ВТ_Расходы КАК ВТ_Расходы) КАК ВЗ_Запрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЗ_Запрос.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ФинансовыйДвиженияССубконто.Регистратор КАК Регистратор,
	               |	НАЧАЛОПЕРИОДА(ФинансовыйДвиженияССубконто.Регистратор.Дата, ДЕНЬ) КАК Дата
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	               |				И НЕ Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	               |				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	               |				И СторонаПроводкиДляПересчетаПоСебестоимости <> """",
	               |			,
	               |			) КАК ФинансовыйДвиженияССубконто
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_МаксПериод.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА (ВЗ_МаксПериод.Номенклатура.ХозТовар
	               |				ИЛИ ВЗ_МаксПериод.Номенклатура.РекламныйМатериал) И ВЗ_МаксПериод.Номенклатура.ВидНоменклатуры <> Значение(Перечисление.ВидыНоменклатуры.Товар)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НеСтавитьЦену,
	               |	ВЫБОР
	               |		КОГДА ВЗ_МаксПериод.Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоУпаковка,
	               |	МАКСИМУМ(ЦеныПоставщиков.Цена / ВЫБОР
	               |			КОГДА ЦеныПоставщиков.Поставщик.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС))
	               |				ТОГДА 1
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ВЗ_МаксПериод.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |						ТОГДА 1.1
	               |					КОГДА ВЗ_МаксПериод.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |						ТОГДА 1.18
	               |					ИНАЧЕ 1
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК Цена
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	               |		МАКСИМУМ(ЦеныПоставщиковСрезПоследних.Период) КАК Период
	               |	ИЗ
	               |		РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	               |				&КонецМесяца,
	               |				Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Номенклатура.Товар
	               |					ИЗ
	               |						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ЦеныПоставщиковСрезПоследних
	               |	ГДЕ
	               |		ЦеныПоставщиковСрезПоследних.Цена > 0
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЦеныПоставщиковСрезПоследних.Номенклатура) КАК ВЗ_МаксПериод
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	               |		ПО ВЗ_МаксПериод.Период = ЦеныПоставщиков.Период
	               |			И ВЗ_МаксПериод.Номенклатура = ЦеныПоставщиков.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЗ_МаксПериод.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ВЗ_МаксПериод.Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ВЗ_МаксПериод.Номенклатура.ХозТовар
	               |				ИЛИ ВЗ_МаксПериод.Номенклатура.РекламныйМатериал
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Остатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Приходы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Расходы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Номенклатура";
	
	Запрос.УстановитьПараметр("МесяцОбработки", МесяцОбработки);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(МесяцОбработки));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачОстатки", Новый Граница(НачалоМесяца(МесяцОбработки) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ОргЛуг", ОргЛуг);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабСебестоимость = Результаты[4].Выгрузить();
	ТабСебестоимость.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	ТабСебестоимость.Индексы.Добавить("Номенклатура");
	
	ТабЦены = Результаты[6].Выгрузить();
	ТабЦены.Индексы.Добавить("Номенклатура");
	
	Для Каждого СтрокаДляРасчета Из ТабСебестоимость Цикл
		СтрокаДляРасчета.Себестоимость = ?(СтрокаДляРасчета.Количество = 0, 0, СтрокаДляРасчета.Сумма / СтрокаДляРасчета.Количество);
		Если СтрокаДляРасчета.Себестоимость < 0 Тогда
			СтрокаДляРасчета.Себестоимость = 0;
		КонецЕсли;
		СтрокаЦенаПоставщик = ТабЦены.Найти(СтрокаДляРасчета.Номенклатура, "Номенклатура");
		//+++АК SaMi 2018.06.13 ИП-00018553
		//Если СтрокаЦенаПоставщик <> Неопределено
		//	И СтрокаЦенаПоставщик.ЭтоУпаковка
		//	И СтрокаЦенаПоставщик.Цена > 0
		//	И СтрокаДляРасчета.Себестоимость / СтрокаЦенаПоставщик.Цена >= 3 Тогда
		//	СтрокаДляРасчета.Себестоимость = СтрокаЦенаПоставщик.Цена;
		//КонецЕсли;	
		//---АК SaMi  2018.06.13 
		Запись = РегистрыСведений.СебестоимостьТоваров.СоздатьМенеджерЗаписи();
		Запись.Период = МесяцОбработки;
		Запись.Номенклатура = СтрокаДляРасчета.Номенклатура;
		Запись.Себестоимость = СтрокаДляРасчета.Себестоимость;
		Запись.Записать();
		Если СтрокаДляРасчета.Себестоимость > 0 Тогда
			Если СтрокаЦенаПоставщик <> Неопределено Тогда
				ТабЦены.Удалить(СтрокаЦенаПоставщик);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаЦена Из ТабЦены Цикл
		Запись = РегистрыСведений.СебестоимостьТоваров.СоздатьМенеджерЗаписи();
		Запись.Период = МесяцОбработки;
		Запись.Номенклатура = СтрокаЦена.Номенклатура;
		Запись.Себестоимость = ?(СтрокаЦена.НеСтавитьЦену, 0, СтрокаЦена.Цена);
		Запись.ДобавленаИзРегистраЦенПоставщиков = Истина;
		Запись.Записать();
		СтрокаСебестоимость = ТабСебестоимость.Добавить();
		СтрокаСебестоимость.Номенклатура = СтрокаЦена.Номенклатура;
		СтрокаСебестоимость.Себестоимость = ?(СтрокаЦена.НеСтавитьЦену, 0, СтрокаЦена.Цена);
	КонецЦикла;	
	
	ЗатратыДляРаспределения = ПланыСчетов.Финансовый.ЗатратыДляРаспределения;
	ЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
	СчетТМЦ = ПланыСчетов.Финансовый.ТМЦ;
	НачалоМесяцаОбработки = НачалоМесяца(МесяцОбработки);
	
	ОргЛугДаПоле = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	ВыборкаРегистраторов = Результаты[5].Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборДвижения = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
		НаборДвижения.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборДвижения.Прочитать();
		НаборДвижения.РазрешитьЗаписьБезПроверки = Истина;
		БылоИзменение = Ложь;
		
		Для Каждого Движение Из НаборДвижения Цикл
			
			Если Движение.СторонаПроводкиДляПересчетаПоСебестоимости = ""
				ИЛИ Движение.Период < НачалоМесяцаОбработки Тогда
				Продолжить;
			КонецЕсли;	
			
			СторонаДляРасчета = Движение.СторонаПроводкиДляПересчетаПоСебестоимости;
			НоменклатураРасчета = Неопределено;
			
			Если ВРег(СторонаДляРасчета) = "КТ" Тогда
				Если Движение.СчетКт = СчетТовары Тогда
					НоменклатураРасчета = Движение.СубконтоКт.Товары;
				Иначе
					НоменклатураРасчета = Движение.СубконтоКт.Материалы;
				КонецЕсли;
			Иначе
				Если Движение.СчетДт = СчетТовары Тогда
					НоменклатураРасчета = Движение.СубконтоДт.Товары;
				Иначе
					НоменклатураРасчета = Движение.СубконтоДт.Материалы;
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(СторонаДляРасчета)
				ИЛИ НЕ ЗначениеЗаполнено(НоменклатураРасчета) Тогда
				Продолжить;
			КонецЕсли;	
			
			Себестоимость = ПолучитьСебестоимость(НоменклатураРасчета, ТабСебестоимость);
			Если Себестоимость <> Неопределено Тогда
				Если Движение.Организация = ОргЛугДаПоле Тогда
					Сумма = Окр(Движение["Количество" + СторонаДляРасчета] * Себестоимость * 1.1, 2);
				Иначе	
					Сумма = Окр(Движение["Количество" + СторонаДляРасчета] * Себестоимость, 2);
				КонецЕсли;	
				Если Сумма <> Движение.Сумма Тогда
					Движение.Сумма = Сумма;
					БылоИзменение = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если БылоИзменение Тогда
			НаборДвижения.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПересчитатьСебестоимостьПоТоварам(МесяцОбработки) Экспорт
	
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатералыДляВыпуска = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	ОргЛуг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка КАК Товар
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&ДатаКон, ) КАК Спецификации
	               |		ПО НоменклатураСпр.Ссылка = Спецификации.НоменклатураСырье
	               |ГДЕ
	               |	НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И НоменклатураСпр.ЭтоКомплект = ЛОЖЬ
	               |	И Спецификации.НоменклатураСырье ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Товар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |	КОНЕЦ КАК Номенклатура,
	               |	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма,
	               |	СУММА(ФинансовыйДвиженияССубконто.КоличествоДт) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Приходы
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	               |				И НЕ Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
	               |				И НЕ Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
	               |				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	               |				И (СторонаПроводкиДляПересчетаПоСебестоимости = """"
	               |					ИЛИ СторонаПроводкиДляПересчетаПоСебестоимости = ""КТ""),
	               |			,
	               |			) КАК ФинансовыйДвиженияССубконто
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |	И ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |	КОНЕЦ КАК Номенклатура,
	               |	СУММА(ФинансовыйДвиженияССубконто.Сумма * -1) КАК Сумма,
	               |	СУММА(ФинансовыйДвиженияССубконто.КоличествоКт * -1) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Расходы
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	               |				И (Регистратор ССЫЛКА Документ.Операция
	               |					И СторонаПроводкиДляПересчетаПоСебестоимости = """"),
	               |			,
	               |			) КАК ФинансовыйДвиженияССубконто
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |	И ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |			ТОГДА ФинансовыйОстатки.Субконто2
	               |		ИНАЧЕ ФинансовыйОстатки.Субконто1
	               |	КОНЕЦ КАК Номенклатура,
	               |	ФинансовыйОстатки.СуммаОстатокДт,
	               |	ФинансовыйОстатки.КоличествоОстатокДт
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаНачОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ)), , Организация <> &ОргЛуг) КАК ФинансовыйОстатки
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйОстатки.Субконто2
	               |			ИНАЧЕ ФинансовыйОстатки.Субконто1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Запрос.Номенклатура,
	               |	СУММА(ВЗ_Запрос.Сумма) КАК Сумма,
	               |	СУММА(ВЗ_Запрос.Количество) КАК Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_Остатки.Номенклатура КАК Номенклатура,
	               |		ВТ_Остатки.СуммаОстатокДт КАК Сумма,
	               |		ВТ_Остатки.КоличествоОстатокДт КАК Количество
	               |	ИЗ
	               |		ВТ_Остатки КАК ВТ_Остатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_Приходы.Номенклатура,
	               |		ВТ_Приходы.Сумма,
	               |		ВТ_Приходы.Количество
	               |	ИЗ
	               |		ВТ_Приходы КАК ВТ_Приходы
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_Расходы.Номенклатура,
	               |		ВТ_Расходы.Сумма,
	               |		ВТ_Расходы.Количество
	               |	ИЗ
	               |		ВТ_Расходы КАК ВТ_Расходы) КАК ВЗ_Запрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЗ_Запрос.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ФинансовыйДвиженияССубконто.Регистратор КАК Регистратор,
	               |	НАЧАЛОПЕРИОДА(ФинансовыйДвиженияССубконто.Регистратор.Дата, ДЕНЬ) КАК Дата
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	               |				И НЕ Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	               |				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	               |				И СторонаПроводкиДляПересчетаПоСебестоимости <> """",
	               |			,
	               |			) КАК ФинансовыйДвиженияССубконто
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	               |			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	               |				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	               |		КОНЕЦ В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Товар
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_МаксПериод.Номенклатура,
				   //+++АК Susk (Суслин К.В.) 2018.09.24 ИП-00019621^02				    
				   //|	ВЫБОР
				   //|		КОГДА (ВЗ_МаксПериод.Номенклатура.ХозТовар
				   //|				ИЛИ ВЗ_МаксПериод.Номенклатура.РекламныйМатериал) И ВЗ_МаксПериод.Номенклатура.ВидНоменклатуры <> Значение(Перечисление.ВидыНоменклатуры.Товар)
				   //|			ТОГДА ИСТИНА
				   //|		ИНАЧЕ ЛОЖЬ
				   //|	КОНЕЦ КАК НеСтавитьЦену,
				   |	ВЫБОР
	               |		КОГДА (ВЗ_МаксПериод.Номенклатура.ВидНоменклатуры <> Значение(Перечисление.ВидыНоменклатуры.Материал) И ВЗ_МаксПериод.Номенклатура.ВидНоменклатуры <> Значение(Перечисление.ВидыНоменклатуры.Товар))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НеСтавитьЦену,
				   //---АК Susk (Суслин К.В.) 
	               |	ВЫБОР
	               |		КОГДА ВЗ_МаксПериод.Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоУпаковка,
	               |	МАКСИМУМ(ЦеныПоставщиков.Цена / ВЫБОР
	               |			КОГДА ЦеныПоставщиков.Поставщик.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС))
	               |				ТОГДА 1
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ВЗ_МаксПериод.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |						ТОГДА 1.1
	               |					КОГДА ВЗ_МаксПериод.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |						ТОГДА 1.18
	               |					ИНАЧЕ 1
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК Цена
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	               |		МАКСИМУМ(ЦеныПоставщиковСрезПоследних.Период) КАК Период
	               |	ИЗ
	               |		РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	               |				&КонецМесяца,
	               |				Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Номенклатура.Товар
	               |					ИЗ
	               |						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ЦеныПоставщиковСрезПоследних
	               |	ГДЕ
	               |		ЦеныПоставщиковСрезПоследних.Цена > 0
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЦеныПоставщиковСрезПоследних.Номенклатура) КАК ВЗ_МаксПериод
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	               |		ПО ВЗ_МаксПериод.Период = ЦеныПоставщиков.Период
	               |			И ВЗ_МаксПериод.Номенклатура = ЦеныПоставщиков.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЗ_МаксПериод.Номенклатура,
	               //+++АК Susk (Суслин К.В.) 2018.09.24 ИП-00019621^02				    
				   //|	ВЫБОР
				   //|		КОГДА (ВЗ_МаксПериод.Номенклатура.ХозТовар
				   //|				ИЛИ ВЗ_МаксПериод.Номенклатура.РекламныйМатериал) И ВЗ_МаксПериод.Номенклатура.ВидНоменклатуры <> Значение(Перечисление.ВидыНоменклатуры.Товар)
				   //|			ТОГДА ИСТИНА
				   //|		ИНАЧЕ ЛОЖЬ
				   //|	КОНЕЦ,
				   |	ВЫБОР
	               |		КОГДА (ВЗ_МаксПериод.Номенклатура.ВидНоменклатуры <> Значение(Перечисление.ВидыНоменклатуры.Материал) И ВЗ_МаксПериод.Номенклатура.ВидНоменклатуры <> Значение(Перечисление.ВидыНоменклатуры.Товар))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ,
				   //---АК Susk (Суслин К.В.) 

	               |	ВЫБОР
	               |		КОГДА ВЗ_МаксПериод.Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Остатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Приходы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Расходы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Номенклатура";
	
	Запрос.УстановитьПараметр("МесяцОбработки", МесяцОбработки);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(МесяцОбработки));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачОстатки", Новый Граница(НачалоМесяца(МесяцОбработки) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ОргЛуг", ОргЛуг);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабСебестоимость = Результаты[4].Выгрузить();
	ТабСебестоимость.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	ТабСебестоимость.Индексы.Добавить("Номенклатура");
	
	ТабЦены = Результаты[6].Выгрузить();
	ТабЦены.Индексы.Добавить("Номенклатура");
	
	Для Каждого СтрокаДляРасчета Из ТабСебестоимость Цикл
		СтрокаДляРасчета.Себестоимость = ?(СтрокаДляРасчета.Количество = 0, 0, СтрокаДляРасчета.Сумма / СтрокаДляРасчета.Количество);
		Если СтрокаДляРасчета.Себестоимость < 0 Тогда
			СтрокаДляРасчета.Себестоимость = 0;
		КонецЕсли;
		СтрокаЦенаПоставщик = ТабЦены.Найти(СтрокаДляРасчета.Номенклатура, "Номенклатура");
		//+++АК SaMi 2018.06.14 ИП-00018553 
		//Если СтрокаЦенаПоставщик <> Неопределено
		//	И СтрокаЦенаПоставщик.ЭтоУпаковка
		//	И СтрокаЦенаПоставщик.Цена > 0
		//	И СтрокаДляРасчета.Себестоимость / СтрокаЦенаПоставщик.Цена >= 3 Тогда
		//	СтрокаДляРасчета.Себестоимость = СтрокаЦенаПоставщик.Цена;
		//КонецЕсли;
		//---АК SaMi  2018.06.14 
		Запись = РегистрыСведений.СебестоимостьТоваров.СоздатьМенеджерЗаписи();
		Запись.Период = МесяцОбработки;
		Запись.Номенклатура = СтрокаДляРасчета.Номенклатура;
		Запись.Себестоимость = СтрокаДляРасчета.Себестоимость;
		Запись.Записать();
		Если СтрокаДляРасчета.Себестоимость > 0 Тогда
			Если СтрокаЦенаПоставщик <> Неопределено Тогда
				ТабЦены.Удалить(СтрокаЦенаПоставщик);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаЦена Из ТабЦены Цикл
		Запись = РегистрыСведений.СебестоимостьТоваров.СоздатьМенеджерЗаписи();
		Запись.Период = МесяцОбработки;
		Запись.Номенклатура = СтрокаЦена.Номенклатура;
		Запись.Себестоимость = ?(СтрокаЦена.НеСтавитьЦену, 0, СтрокаЦена.Цена);
		Запись.ДобавленаИзРегистраЦенПоставщиков = Истина;
		Запись.Записать();
		СтрокаСебестоимость = ТабСебестоимость.Добавить();
		СтрокаСебестоимость.Номенклатура = СтрокаЦена.Номенклатура;
		СтрокаСебестоимость.Себестоимость = ?(СтрокаЦена.НеСтавитьЦену, 0, СтрокаЦена.Цена);
	КонецЦикла;	
	
	ЗатратыДляРаспределения = ПланыСчетов.Финансовый.ЗатратыДляРаспределения;
	ЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
	СчетТМЦ = ПланыСчетов.Финансовый.ТМЦ;
	НачалоМесяцаОбработки = НачалоМесяца(МесяцОбработки);
	
	ОргЛугДаПоле = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	ВыборкаРегистраторов = Результаты[5].Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборДвижения = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
		НаборДвижения.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборДвижения.Прочитать();
		НаборДвижения.РазрешитьЗаписьБезПроверки = Истина;
		БылоИзменение = Ложь;
		
		Для Каждого Движение Из НаборДвижения Цикл
			
			Если Движение.СторонаПроводкиДляПересчетаПоСебестоимости = ""
				ИЛИ Движение.Период < НачалоМесяцаОбработки Тогда
				Продолжить;
			КонецЕсли;	
			
			СторонаДляРасчета = Движение.СторонаПроводкиДляПересчетаПоСебестоимости;
			НоменклатураРасчета = Неопределено;
			
			Если ВРег(СторонаДляРасчета) = "КТ" Тогда
				Если Движение.СчетКт = СчетТовары Тогда
					НоменклатураРасчета = Движение.СубконтоКт.Товары;
				Иначе
					НоменклатураРасчета = Движение.СубконтоКт.Материалы;
				КонецЕсли;
			Иначе
				Если Движение.СчетДт = СчетТовары Тогда
					НоменклатураРасчета = Движение.СубконтоДт.Товары;
				Иначе
					НоменклатураРасчета = Движение.СубконтоДт.Материалы;
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(СторонаДляРасчета)
				ИЛИ НЕ ЗначениеЗаполнено(НоменклатураРасчета) Тогда
				Продолжить;
			КонецЕсли;	
			
			Себестоимость = ПолучитьСебестоимость(НоменклатураРасчета, ТабСебестоимость);
			Если Себестоимость <> Неопределено Тогда
				Если Движение.Организация = ОргЛугДаПоле Тогда
					Сумма = Окр(Движение["Количество" + СторонаДляРасчета] * Себестоимость * 1.1, 2);
				Иначе	
					Сумма = Окр(Движение["Количество" + СторонаДляРасчета] * Себестоимость, 2);
				КонецЕсли;
				Если Сумма <> Движение.Сумма Тогда
					Движение.Сумма = Сумма;
					БылоИзменение = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если БылоИзменение Тогда
			НаборДвижения.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПересчитатьСебестоимостьПоКомплектам(МесяцОбработки) Экспорт
	
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатералыДляВыпуска = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	ОргЛуг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка КАК Товар
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|ГДЕ
	|	НоменклатураСпр.ЭтоКомплект = Истина
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	|	КОНЕЦ КАК Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ФинансовыйДвиженияССубконто.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК БылоСамостоятельноеПоступление,
	|	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма,
	|	СУММА(ФинансовыйДвиженияССубконто.КоличествоДт) КАК Количество
	|ПОМЕСТИТЬ ВТ_Приходы
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	|				И НЕ Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
	|				И НЕ Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	|				И НЕ Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
	|				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	|				И (СторонаПроводкиДляПересчетаПоСебестоимости = """"
	|					ИЛИ СторонаПроводкиДляПересчетаПоСебестоимости = ""КТ""),
	|			,
	|			) КАК ФинансовыйДвиженияССубконто
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	|			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	|		КОНЕЦ В
	|			(ВЫБРАТЬ
	|				ВТ_Номенклатура.Товар
	|			ИЗ
	|				ВТ_Номенклатура КАК ВТ_Номенклатура)
	|	И ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	|		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ФинансовыйДвиженияССубконто.Сумма * -1) КАК Сумма,
	|	СУММА(ФинансовыйДвиженияССубконто.КоличествоКт * -1) КАК Количество
	|ПОМЕСТИТЬ ВТ_Расходы
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	|				И (Регистратор ССЫЛКА Документ.Операция
	|					И СторонаПроводкиДляПересчетаПоСебестоимости = """"),
	|			,
	|			) КАК ФинансовыйДвиженияССубконто
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	|			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	|		КОНЕЦ В
	|			(ВЫБРАТЬ
	|				ВТ_Номенклатура.Товар
	|			ИЗ
	|				ВТ_Номенклатура КАК ВТ_Номенклатура)
	|	И ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	|		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйОстатки.Субконто2
	|		ИНАЧЕ ФинансовыйОстатки.Субконто1
	|	КОНЕЦ КАК Номенклатура,
	|	ФинансовыйОстатки.СуммаОстатокДт,
	|	ФинансовыйОстатки.КоличествоОстатокДт
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&ДатаНачОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ)), , Организация <> &ОргЛуг) КАК ФинансовыйОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ТОГДА ФинансовыйОстатки.Субконто2
	|			ИНАЧЕ ФинансовыйОстатки.Субконто1
	|		КОНЕЦ В
	|			(ВЫБРАТЬ
	|				ВТ_Номенклатура.Товар
	|			ИЗ
	|				ВТ_Номенклатура КАК ВТ_Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.Номенклатура,
	|	МАКСИМУМ(ВЗ_Запрос.БылоСамостоятельноеПоступление) КАК БылоСамостоятельноеПоступление,
	|	СУММА(ВЗ_Запрос.Сумма) КАК Сумма,
	|	СУММА(ВЗ_Запрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Остатки.Номенклатура КАК Номенклатура,
	|		ВТ_Остатки.СуммаОстатокДт КАК Сумма,
	|		ВТ_Остатки.КоличествоОстатокДт КАК Количество,
	|		ЛОЖЬ КАК БылоСамостоятельноеПоступление
	|	ИЗ
	|		ВТ_Остатки КАК ВТ_Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приходы.Номенклатура,
	|		ВТ_Приходы.Сумма,
	|		ВТ_Приходы.Количество,
	|		ВТ_Приходы.БылоСамостоятельноеПоступление
	|	ИЗ
	|		ВТ_Приходы КАК ВТ_Приходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Расходы.Номенклатура,
	|		ВТ_Расходы.Сумма,
	|		ВТ_Расходы.Количество,
	|		ЛОЖЬ
	|	ИЗ
	|		ВТ_Расходы КАК ВТ_Расходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Номенклатура.Товар,
	|		0,
	|		0,
	|		ЛОЖЬ
	|	ИЗ
	|		ВТ_Номенклатура КАК ВТ_Номенклатура) КАК ВЗ_Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФинансовыйДвиженияССубконто.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(ФинансовыйДвиженияССубконто.Регистратор.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
	|				И НЕ Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	|				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	|				И СторонаПроводкиДляПересчетаПоСебестоимости <> """",
	|			,
	|			) КАК ФинансовыйДвиженияССубконто
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт2
	|			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоКт1
	|			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
	|			КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|				ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
	|		КОНЕЦ В
	|			(ВЫБРАТЬ
	|				ВТ_Номенклатура.Товар
	|			ИЗ
	|				ВТ_Номенклатура КАК ВТ_Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_МаксПериод.Номенклатура,
	|	МАКСИМУМ(ЦеныПоставщиков.Цена / ВЫБОР
	|			КОГДА ЦеныПоставщиков.Поставщик.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС))
	|				ТОГДА 1
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВЗ_МаксПериод.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|						ТОГДА 1.1
	|					КОГДА ВЗ_МаксПериод.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|						ТОГДА 1.18
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	|		МАКСИМУМ(ЦеныПоставщиковСрезПоследних.Период) КАК Период
	|	ИЗ
	|		РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|				&КонецМесяца,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_Номенклатура.Товар
	|					ИЗ
	|						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ЦеныПоставщиковСрезПоследних
	|	ГДЕ
	|		ЦеныПоставщиковСрезПоследних.Цена > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЦеныПоставщиковСрезПоследних.Номенклатура) КАК ВЗ_МаксПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|		ПО ВЗ_МаксПериод.Период = ЦеныПоставщиков.Период
	|			И ВЗ_МаксПериод.Номенклатура = ЦеныПоставщиков.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_МаксПериод.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Приходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Расходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Номенклатура";
	
	Запрос.УстановитьПараметр("МесяцОбработки", МесяцОбработки);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(МесяцОбработки));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачОстатки", Новый Граница(НачалоМесяца(МесяцОбработки) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ОргЛуг", ОргЛуг);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабСебестоимость = Результаты[4].Выгрузить();
	ТабСебестоимость.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	ТабСебестоимость.Индексы.Добавить("Номенклатура");
	
	ТабЦены = Результаты[6].Выгрузить();
	ТабЦены.Индексы.Добавить("Номенклатура");
	
	Для Каждого СтрокаДляРасчета Из ТабСебестоимость Цикл
		СтрокаДляРасчета.Себестоимость = ?(СтрокаДляРасчета.Количество = 0, 0, СтрокаДляРасчета.Сумма / СтрокаДляРасчета.Количество);
		Если СтрокаДляРасчета.Себестоимость < 0 Тогда
			СтрокаДляРасчета.Себестоимость = 0;
		КонецЕсли;
		Запись = РегистрыСведений.СебестоимостьТоваров.СоздатьМенеджерЗаписи();
		Запись.Период = МесяцОбработки;
		Запись.Номенклатура = СтрокаДляРасчета.Номенклатура;
		Запись.Себестоимость = СтрокаДляРасчета.Себестоимость;
		Если НЕ СтрокаДляРасчета.БылоСамостоятельноеПоступление Тогда
			СтрокаЦена = ТабЦены.Найти(СтрокаДляРасчета.Номенклатура, "Номенклатура");
			Если СтрокаЦена <> Неопределено Тогда
				Запись.Себестоимость = Макс(Запись.Себестоимость, СтрокаЦена.Цена);
			КонецЕсли;
		КонецЕсли;	
		Запись.Записать();
	КонецЦикла;
	
	ЗатратыДляРаспределения = ПланыСчетов.Финансовый.ЗатратыДляРаспределения;
	ЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
	СчетТМЦ = ПланыСчетов.Финансовый.ТМЦ;
	НачалоМесяцаОбработки = НачалоМесяца(МесяцОбработки);
	
	ОргЛугДаПоле = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	ВыборкаРегистраторов = Результаты[5].Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборДвижения = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
		НаборДвижения.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборДвижения.Прочитать();
		НаборДвижения.РазрешитьЗаписьБезПроверки = Истина;
		БылоИзменение = Ложь;
		
		Для Каждого Движение Из НаборДвижения Цикл
			
			Если Движение.СторонаПроводкиДляПересчетаПоСебестоимости = ""
				ИЛИ Движение.Период < НачалоМесяцаОбработки Тогда
				Продолжить;
			КонецЕсли;	
			
			СторонаДляРасчета = Движение.СторонаПроводкиДляПересчетаПоСебестоимости;
			НоменклатураРасчета = Неопределено;
			
			Если ВРег(СторонаДляРасчета) = "КТ" Тогда
				Если Движение.СчетКт = СчетТовары Тогда
					НоменклатураРасчета = Движение.СубконтоКт.Товары;
				Иначе
					НоменклатураРасчета = Движение.СубконтоКт.Материалы;
				КонецЕсли;
			Иначе
				Если Движение.СчетДт = СчетТовары Тогда
					НоменклатураРасчета = Движение.СубконтоДт.Товары;
				Иначе
					НоменклатураРасчета = Движение.СубконтоДт.Материалы;
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(СторонаДляРасчета)
				ИЛИ НЕ ЗначениеЗаполнено(НоменклатураРасчета) Тогда
				Продолжить;
			КонецЕсли;	
			
			Себестоимость = ПолучитьСебестоимость(НоменклатураРасчета, ТабСебестоимость);
			Если Себестоимость <> Неопределено Тогда
				Если Движение.Организация = ОргЛугДаПоле Тогда
					Сумма = Окр(Движение["Количество" + СторонаДляРасчета] * Себестоимость * 1.1, 2);
				Иначе	
					Сумма = Окр(Движение["Количество" + СторонаДляРасчета] * Себестоимость, 2);
				КонецЕсли;
				Если Сумма <> Движение.Сумма Тогда
					Движение.Сумма = Сумма;
					БылоИзменение = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если БылоИзменение Тогда
			НаборДвижения.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура РасчитатьОбщиеКоличестваПроводокПоЛУ(МесяцОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ПроводкиЛистовУчетаЗаМесяцПоЛУ.СоздатьНаборЗаписей();
	Набор.Записать(); //вычистим все, чтобы мусора не сохранялось
	
	Набор = РегистрыСведений.ПроводкиЛистовУчетаЗаМесяцПоЛУ.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(МесяцОбработки);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МесяцОбработки", НачалоМесяца(МесяцОбработки));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(МесяцОбработки), ВидГраницы.Включая));
	Запрос.Текст = "ВЫБРАТЬ
	|	&МесяцОбработки КАК Период,
	|	ФинансовыйДвиженияССубконто.СчетДт,
	|	ФинансовыйДвиженияССубконто.СубконтоДт1,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоДт1,
	|	ФинансовыйДвиженияССубконто.СубконтоДт2,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоДт2,
	|	ФинансовыйДвиженияССубконто.СубконтоДт3,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоДт3,
	|	ФинансовыйДвиженияССубконто.СчетКт,
	|	ФинансовыйДвиженияССубконто.СубконтоКт1,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоКт1,
	|	ФинансовыйДвиженияССубконто.СубконтоКт2,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоКт2,
	|	ФинансовыйДвиженияССубконто.СубконтоКт3,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ИЛИ ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ""КТ""
	|		ИНАЧЕ ""ДТ""
	|	КОНЕЦ КАК СторонаРасчета,
	|	СУММА(ФинансовыйДвиженияССубконто.КоличествоДт) КАК КоличествоДт,
	|	СУММА(ФинансовыйДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(&ДатаНач, &ДатаКон, Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ), , ) КАК ФинансовыйДвиженияССубконто
	|ГДЕ
	|	ФинансовыйДвиженияССубконто.Регистратор ССЫЛКА Документ.ЛистУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйДвиженияССубконто.СчетДт,
	|	ФинансовыйДвиженияССубконто.СубконтоДт1,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоДт1,
	|	ФинансовыйДвиженияССубконто.СубконтоДт2,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоДт2,
	|	ФинансовыйДвиженияССубконто.СубконтоДт3,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоДт3,
	|	ФинансовыйДвиженияССубконто.СчетКт,
	|	ФинансовыйДвиженияССубконто.СубконтоКт1,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоКт1,
	|	ФинансовыйДвиженияССубконто.СубконтоКт2,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоКт2,
	|	ФинансовыйДвиженияССубконто.СубконтоКт3,
	|	ФинансовыйДвиженияССубконто.ВидСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ИЛИ ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|			ТОГДА ""КТ""
	|		ИНАЧЕ ""ДТ""
	|	КОНЕЦ";
	
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры	

Процедура ПересчитатьСебестоимостьПоМатериалам(МесяцОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МесяцОбработки"	, МесяцОбработки);
	Запрос.УстановитьПараметр("КонецМесяца"		, КонецМесяца(МесяцОбработки));
	Запрос.УстановитьПараметр("ДатаНач"			, Новый Граница(НачалоМесяца(МесяцОбработки)	, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон"			, Новый Граница(КонецМесяца(МесяцОбработки)		, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачОстатки"	, Новый Граница(НачалоМесяца(МесяцОбработки) - 1, ВидГраницы.Включая));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Финансовый.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	ПланСчетов.Финансовый КАК Финансовый
	|ГДЕ
	|	Финансовый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Материалы))
	|	И Финансовый.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Инвентарь)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйДвиженияССубконто.Организация КАК Организация,
	|	ФинансовыйДвиженияССубконто.СчетДт КАК СчетУчета,
	|	ФинансовыйДвиженияССубконто.СубконтоДт1 КАК Номенклатура,
	|	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма,
	|	СУММА(ФинансовыйДвиженияССубконто.КоличествоДт) КАК Количество
	|ПОМЕСТИТЬ ВТ_Приходы
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			СчетДт В
	|					(ВЫБРАТЬ
	|						Таб.Ссылка
	|					ИЗ
	|						ВТ_Счета КАК Таб)
	|				И НЕ Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
	|				И НЕ Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
	|				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	|				И (СторонаПроводкиДляПересчетаПоСебестоимости = """"
	|					ИЛИ СторонаПроводкиДляПересчетаПоСебестоимости = ""КТ""),
	|			,
	|			) КАК ФинансовыйДвиженияССубконто
	|ГДЕ
	|	ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйДвиженияССубконто.СубконтоДт1,
	|	ФинансовыйДвиженияССубконто.Организация,
	|	ФинансовыйДвиженияССубконто.СчетДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйДвиженияССубконто.Организация КАК Организация,
	|	ФинансовыйДвиженияССубконто.СчетКт КАК СчетУчета,
	|	ФинансовыйДвиженияССубконто.СубконтоКт1 КАК Номенклатура,
	|	СУММА(ФинансовыйДвиженияССубконто.Сумма * -1) КАК Сумма,
	|	СУММА(ФинансовыйДвиженияССубконто.КоличествоКт * -1) КАК Количество
	|ПОМЕСТИТЬ ВТ_Расходы
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			СчетКт В
	|					(ВЫБРАТЬ
	|						Таб.Ссылка
	|					ИЗ
	|						ВТ_Счета КАК Таб)
	|				И (Регистратор ССЫЛКА Документ.Операция
	|					И СторонаПроводкиДляПересчетаПоСебестоимости = """"),
	|			,
	|			) КАК ФинансовыйДвиженияССубконто
	|ГДЕ
	|	ФинансовыйДвиженияССубконто.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйДвиженияССубконто.СубконтоКт1,
	|	ФинансовыйДвиженияССубконто.Организация,
	|	ФинансовыйДвиженияССубконто.СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйОстатки.Субконто1 КАК Номенклатура,
	|	ФинансовыйОстатки.СуммаОстатокДт,
	|	ФинансовыйОстатки.КоличествоОстатокДт,
	|	ФинансовыйОстатки.Организация,
	|	ФинансовыйОстатки.Счет КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&ДатаНачОстатки,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Таб.Ссылка
	|				ИЗ
	|					ВТ_Счета КАК Таб),
	|			,
	|			) КАК ФинансовыйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.Номенклатура,
	|	СУММА(ВЗ_Запрос.Сумма) КАК Сумма,
	|	СУММА(ВЗ_Запрос.Количество) КАК Количество,
	|	ВЗ_Запрос.Организация,
	|	ВЗ_Запрос.СчетУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Остатки.Номенклатура КАК Номенклатура,
	|		ВТ_Остатки.СуммаОстатокДт КАК Сумма,
	|		ВТ_Остатки.КоличествоОстатокДт КАК Количество,
	|		ВТ_Остатки.Организация КАК Организация,
	|		ВТ_Остатки.СчетУчета КАК СчетУчета
	|	ИЗ
	|		ВТ_Остатки КАК ВТ_Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приходы.Номенклатура,
	|		ВТ_Приходы.Сумма,
	|		ВТ_Приходы.Количество,
	|		ВТ_Приходы.Организация,
	|		ВТ_Приходы.СчетУчета
	|	ИЗ
	|		ВТ_Приходы КАК ВТ_Приходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Расходы.Номенклатура,
	|		ВТ_Расходы.Сумма,
	|		ВТ_Расходы.Количество,
	|		ВТ_Расходы.Организация,
	|		ВТ_Расходы.СчетУчета
	|	ИЗ
	|		ВТ_Расходы КАК ВТ_Расходы) КАК ВЗ_Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.Организация,
	|	ВЗ_Запрос.СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФинансовыйДвиженияССубконто.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(ФинансовыйДвиженияССубконто.Регистратор.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Счет В
	|					(ВЫБРАТЬ
	|						Таб.Ссылка
	|					ИЗ
	|						ВТ_Счета КАК Таб)
	|				И НЕ Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	|				И НЕ Регистратор ССЫЛКА Документ.ЛистУчета
	|				И СторонаПроводкиДляПересчетаПоСебестоимости <> """",
	|			,
	|			) КАК ФинансовыйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Счета.Ссылка
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Приходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Расходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Счета";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабСебестоимость = Результаты[4].Выгрузить();
	ТабСебестоимость.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	ТабСебестоимость.Индексы.Добавить("Организация, СчетУчета, Номенклатура");
	
	МассивСчета = Результаты[6].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого СтрокаДляРасчета Из ТабСебестоимость Цикл
		СтрокаДляРасчета.Себестоимость = ?(СтрокаДляРасчета.Количество = 0, 0, СтрокаДляРасчета.Сумма / СтрокаДляРасчета.Количество);
		Если СтрокаДляРасчета.Себестоимость < 0 Тогда
			СтрокаДляРасчета.Себестоимость = 0;
		КонецЕсли;
		Запись = РегистрыСведений.СебестоимостьМатериалов.СоздатьМенеджерЗаписи();
		Запись.Период 			= МесяцОбработки;
		Запись.Организация 		= СтрокаДляРасчета.Организация;
		Запись.СчетУчета 		= СтрокаДляРасчета.СчетУчета;
		Запись.Номенклатура 	= СтрокаДляРасчета.Номенклатура;
		Запись.Себестоимость 	= СтрокаДляРасчета.Себестоимость;
		Запись.Записать();
	КонецЦикла;
	
	ЗатратыДляРаспределения 		= ПланыСчетов.Финансовый.ЗатратыДляРаспределения;
	ЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
	НачалоМесяцаОбработки = НачалоМесяца(МесяцОбработки);
	
	ВыборкаРегистраторов = Результаты[5].Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		НаборДвижения = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
		НаборДвижения.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборДвижения.Прочитать();
		НаборДвижения.РазрешитьЗаписьБезПроверки = Истина;
		БылоИзменение = Ложь;
		
		Для Каждого Движение Из НаборДвижения Цикл
			
			Если Движение.СторонаПроводкиДляПересчетаПоСебестоимости = ""
				ИЛИ Движение.Период < НачалоМесяцаОбработки Тогда
				Продолжить;
			КонецЕсли;	
			
			СторонаДляРасчета = Движение.СторонаПроводкиДляПересчетаПоСебестоимости;
			НоменклатураРасчета = Неопределено;
			СчетУчета = Неопределено;
			
			Если ВРег(СторонаДляРасчета) = "КТ" Тогда
				НоменклатураРасчета = Движение.СубконтоКт.Материалы;
				СчетУчета = Движение.СчетКт;
			Иначе
				НоменклатураРасчета = Движение.СубконтоДт.Материалы;
				СчетУчета = Движение.СчетДт;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(СторонаДляРасчета)
				ИЛИ НЕ ЗначениеЗаполнено(НоменклатураРасчета) Тогда
				Продолжить;
			КонецЕсли;	
			
			Себестоимость = ПолучитьСебестоимостьМатериал(НоменклатураРасчета, Движение.Организация, СчетУчета, ТабСебестоимость);
			Если Себестоимость <> Неопределено Тогда
				Сумма = Окр(Движение["Количество" + СторонаДляРасчета] * Себестоимость, 2);
				Если Сумма <> Движение.Сумма Тогда
					Движение.Сумма = Сумма;
					БылоИзменение = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если БылоИзменение Тогда
			НаборДвижения.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПересчитатьСебестоимостьВПроводках(НачалоПересчета = Неопределено) Экспорт
	
	//если граница последовательности установлена на теущем месяце, тогда пересчитываем только текущий месяц
	//иначе последовательно пересчитываем каждый месяц, включая текущий
	
	//расчет себестоимости происходит в два этапа, сначала расчитывается себестоимость комплектующих (номенклатура у которой нет спецификаций)
	//затем выполняется расчет оставшейся продукции
	
	//пока построю алгоритм на расчет таким образом - беру весь приход сумм на счет 41 и делю на весь приход количества
	//получаю себестоимость и обрабатываю все проводки где счет 41 проходит по кредиту с заполненым субконто товары
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Истина;
	
	Если НачалоПересчета = Неопределено Тогда
		ТекГраница = Последовательности.Себестоимость.ПолучитьГраницу();
		Если ТипЗнч(ТекГраница) <> Тип("МоментВремени") Тогда
			Возврат;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ТекГраница.Дата) Тогда
			Возврат;
		КонецЕсли;
		МесяцОбработки = НачалоМесяца(ТекГраница.Дата);
	Иначе
		МесяцОбработки = НачалоМесяца(НачалоПересчета);
	КонецЕсли;	
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Пересчет себестоимости и закрытие месяца");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	//отменим проведения закрытия месяца
	ЗапросЗакрытиеМесяца = Новый Запрос;
	ЗапросЗакрытиеМесяца.УстановитьПараметр("МесяцОбработки", НачалоМесяца(МесяцОбработки));
	ЗапросЗакрытиеМесяца.Текст =
	"ВЫБРАТЬ
	|	ЗакрытиеМесяца.Ссылка
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) = &МесяцОбработки
	|	И ЗакрытиеМесяца.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = ЗапросЗакрытиеМесяца.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъектЗакрытие = Выборка.Ссылка.ПолучитьОбъект();
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.ОтменаПроведения, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.) 
	КонецЦикла;
	
	//+++AK sole 2018.04.05 ИП-00017896.01
	АК_ВыполнитьРаспределениеОстатковПрочихСкладовМагазинов(МесяцОбработки);
	//---AK sole 2018.04.05 ИП-00017896.01   
	
	ПересчитатьСебестоимостьПоМатериалам(МесяцОбработки);
	
	//+++АК sole 2018.04.17 ИП-00018345
	//отрубаем старый механизм разбиения комплектов в закрытии месяца
	Если МесяцОбработки < Константы.АК_ГраницаОтказаОтКомплектовНа41Счете.Получить() Тогда
		
		//сразу выполним необходимое проведение по комплектам для дальнейшего расчета
		ПересчитатьСебестоимостьПоКомплектам(МесяцОбработки);
		ЗапросЗакрытиеМесяца.Текст =
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) = &МесяцОбработки
		|	И ЗакрытиеМесяца.ПометкаУдаления = ЛОЖЬ
		|	И ЗакрытиеМесяца.ВидЗакрытия = 3";
	
		Выборка = ЗапросЗакрытиеМесяца.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокОбъектЗакрытие = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);			
			//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
			//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
			ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
			//---АК Susk (Суслин К.В.) 
		Иначе
			ДокОбъектЗакрытие = Документы.ЗакрытиеМесяца.СоздатьДокумент();
			ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
			ДокОбъектЗакрытие.ВидЗакрытия = 3;
			//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
			//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
			ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
			//---АК Susk (Суслин К.В.)
		КонецЕсли;
	КонецЕсли;
	//---АК sole 2018.04.17 ИП-00018345
	
	ПересчитатьСебестоимостьПоКомплектующим(МесяцОбработки);
	
	//+++АК SaMi 2018.04.25 ИП-00018340.01 Проводим закрытие по производству в магазинах
	ПровестиЗакрытиеМесяца(15, МесяцОбработки);	
	//---АК SaMi  2018.04.25 
	
	ПересчитатьСебестоимостьПоТоварам(МесяцОбработки);
	
	ЗапросЗакрытиеМесяца = Новый Запрос;
	ЗапросЗакрытиеМесяца.УстановитьПараметр("МесяцОбработки", НачалоМесяца(МесяцОбработки));
	ЗапросЗакрытиеМесяца.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, МЕСЯЦ) = &МесяцОбработки
	|	И ВозвратТоваровПоставщику.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакрытиеМесяца.Ссылка,
	|	ЗакрытиеМесяца.ВидЗакрытия
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) = &МесяцОбработки
	|	И ЗакрытиеМесяца.ПометкаУдаления = ЛОЖЬ";
	
	Результаты = ЗапросЗакрытиеМесяца.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
	ТабДокиЗакрытия = Результаты[1].Выгрузить();
	Для н = 0 По 13 Цикл
		Если н = 3 ИЛИ н = 1 ИЛИ н = 10 Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаТаб = ТабДокиЗакрытия.Найти(н, "ВидЗакрытия");
		Если СтрокаТаб <> Неопределено Тогда
			ДокОбъектЗакрытие = СтрокаТаб.Ссылка.ПолучитьОбъект();
			ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
			//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
			//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
			ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
			//---АК Susk (Суслин К.В.)
		Иначе
			ДокОбъектЗакрытие = Документы.ЗакрытиеМесяца.СоздатьДокумент();
			ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
			ДокОбъектЗакрытие.ВидЗакрытия = н;
			//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
			//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
			ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
			//---АК Susk (Суслин К.В.)
		КонецЕсли;	
	КонецЦикла;	
	
	СтрокаТаб = ТабДокиЗакрытия.Найти(1, "ВидЗакрытия");
	Если СтрокаТаб <> Неопределено Тогда
		ДокОбъектЗакрытие = СтрокаТаб.Ссылка.ПолучитьОбъект();
		ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	Иначе
		ДокОбъектЗакрытие = Документы.ЗакрытиеМесяца.СоздатьДокумент();
		ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
		ДокОбъектЗакрытие.ВидЗакрытия = 1;
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	КонецЕсли;
	
	СтрокаТаб = ТабДокиЗакрытия.Найти(10, "ВидЗакрытия");
	Если СтрокаТаб <> Неопределено Тогда
		ДокОбъектЗакрытие = СтрокаТаб.Ссылка.ПолучитьОбъект();
		ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	Иначе
		ДокОбъектЗакрытие = Документы.ЗакрытиеМесяца.СоздатьДокумент();
		ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
		ДокОбъектЗакрытие.ВидЗакрытия = 10;
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	КонецЕсли;
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Ложь;
	
	//+++ ZICD 26.01.2017 ИП-00014365
	АК_УчетМСФОПривилегированный.ВыполнитьРаспределение44Счёта(МесяцОбработки);
	//--- ZICD
	
КонецПроцедуры	

//+++AK sole 2018.04.05 ИП-00017896.01
Процедура АК_ВыполнитьРаспределениеОстатковПрочихСкладовМагазинов(МесяцОбработки)
	
	ДатаДокумента = КонецМесяца(МесяцОбработки);
	
	Если ДатаДокумента > ТекущаяДата() Тогда
		// Распределение остатков выполняется только тогда, когда месяц завершён.
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
"ВЫБРАТЬ
|	ЗакрытиеМесяца.Ссылка
|ИЗ
|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
|ГДЕ
|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) = &МесяцОбработки
|	И ЗакрытиеМесяца.ПометкаУдаления = ЛОЖЬ
|	И ЗакрытиеМесяца.ВидЗакрытия = 14
|";
	
	Запрос.УстановитьПараметр("МесяцОбработки", НачалоМесяца(МесяцОбработки));

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокОбъектЗакрытие = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъектЗакрытие.Дата = ДатаДокумента;
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	Иначе
		ДокОбъектЗакрытие = Документы.ЗакрытиеМесяца.СоздатьДокумент();
		ДокОбъектЗакрытие.Дата = ДатаДокумента;
		ДокОбъектЗакрытие.ВидЗакрытия = 14;
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	КонецЕсли;
	
КонецПроцедуры

//+++АК SaMi 2018.05.08 ИП-00018340.01 
Процедура ПровестиЗакрытиеМесяца(ВидЗакрытия, МесяцОбработки)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МесяцОбработки", НачалоМесяца(МесяцОбработки));
	Запрос.УстановитьПараметр("ВидЗакрытия", ВидЗакрытия);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗакрытиеМесяца.Ссылка
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) = &МесяцОбработки
	|	И ЗакрытиеМесяца.ПометкаУдаления = ЛОЖЬ
	|	И ЗакрытиеМесяца.ВидЗакрытия = &ВидЗакрытия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокОбъектЗакрытие = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	Иначе
		ДокОбъектЗакрытие = Документы.ЗакрытиеМесяца.СоздатьДокумент();
		ДокОбъектЗакрытие.Дата = КонецМесяца(МесяцОбработки);
		ДокОбъектЗакрытие.ВидЗакрытия = ВидЗакрытия;
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643		 
		//ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
		ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента.Проведение, "ПересчитатьСебестоимостьВПроводках");
		//---АК Susk (Суслин К.В.)
	КонецЕсли;

КонецПроцедуры 

//---АК SaMi  2018.05.08 

Процедура ЗакрытиеОстатковПоЗакрытымЗаявкам() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаСкладахОстатки.Заявка
	|ИЗ
	|	РегистрНакопления.ЗаявкаНаСкладах.Остатки КАК ЗаявкаНаСкладахОстатки
	|ГДЕ
	|	ЗаявкаНаСкладахОстатки.Заявка.Закрыта";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Заявка.ПолучитьОбъект();
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеОжидаемойВыручкиТТНаЗавтра() Экспорт
	
	//+++АК MOSD 2018.12.05 ИП-00020544
	ОграниченияВыручки = Справочники.СтруктурныеЕдиницы.ПолучитьОграниченияВыручкиПоМагазинам();
	//---АК MOSD 
	
	мДатаНачала		= НачалоДня(ТекущаяДата()) - 7*86400;
	мДатаОкончания 	= НачалоДня(ТекущаяДата()) - 1;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"create table #ls (id_tt int, summa numeric(15, 3)) 
	|
	|Insert into #ls
	|exec ( 
	|	'SELECT 
	|		DTT.id_tt, 
	|		SUM((dtt.quantity - dtt.discount50_qty - dtt.discount50_sms_qty) * dtt.price) as summa
	|	
	|	FROM [vv03].[dbo].[DTT] DTT (nolock) 
	|
	|	Where 
	|		date_tt Between '" + ВнешниеДанные.ФорматПоля(мДатаНачала) + "'	And '" + ВнешниеДанные.ФорматПоля(мДатаОкончания) + "'
	|	GROUP BY 
	|		DTT.id_tt') at [SRV-SQL03]
	|	
	|CREATE INDEX index_idtt
	|ON #ls(id_tt)
	|
	|Select
	|	dtt.TTUID AS TTUID,
	|	ISNULL(dtt.summa, 0) * procenty_po_dnyam._Fld2899 / 100000 As Summa_1,
	|	ISNULL(dtt.summa, 0) * procenty_po_dnyam._Fld2900 / 100000 As Summa_2,
	|	ISNULL(dtt.summa, 0) * procenty_po_dnyam._Fld2901 / 100000 As Summa_3,
	|	ISNULL(dtt.summa, 0) * procenty_po_dnyam._Fld2902 / 100000 As Summa_4,
	|	ISNULL(dtt.summa, 0) * procenty_po_dnyam._Fld2903 / 100000 As Summa_5,
	|	ISNULL(dtt.summa, 0) * procenty_po_dnyam._Fld2904 / 100000 As Summa_6,
	|	ISNULL(dtt.summa, 0) * procenty_po_dnyam._Fld2905 / 100000 As Summa_7
	|From IzbenkaFin.._InfoRg2895 as procenty_po_dnyam (nolock)
	| Left Outer Join
	| 	(Select
	|		VT_tt.Ref as tt,
	|		dtt.id_tt as id_tt,
	|		tabuidytt.UID AS TTUID,
	|		SUM(dtt.summa) as summa
	|	From #ls as dtt (nolock)
	| 	 Inner Join M2..tt as VT_tt (nolock)
	| 	 ON VT_tt.id_tt = dtt.id_tt
	| 	 Inner Join IzbenkaFin..TTBin2UID as tabuidytt (nolock)
	| 	 ON tabuidytt.id_tt = dtt.id_tt
	|	Group by
	|		VT_tt.Ref,
	|		dtt.id_tt,
	|		tabuidytt.UID
	|	Having
	|		Not SUM(summa) = 0) As dtt
	| ON dtt.tt = procenty_po_dnyam._Fld2897RRef
	|Where
	|	procenty_po_dnyam._Fld2898_RRRef = 0x00000000000000000000000000000000
	|	And dtt.tt is not null";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Пока Выборка <> Неопределено
		И Выборка.Fields.Count <= 0 Цикл
		Выборка=Выборка.NextRecordSet();
	КонецЦикла;
	
	СпрТорговыеТочки = Справочники.СтруктурныеЕдиницы;
	ДеньНеделиЗавтра = ДеньНедели(ТекущаяДата());
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Истина;
	//Если НЕ Выборка.EOF() Тогда
	
	Выборка.MoveFirst();
	
	Пока НЕ Выборка.EOF() Цикл
		
		ТекТТУИД 	= Выборка.Fields("TTUID").Value;
		Если НЕ ТекТТУИД = NULL Тогда
			ТекТТ = СпрТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Выборка.Fields("TTUID").Value, 2, 36)));
		Иначе
			Выборка.MoveNext();
			Продолжить;
		КонецЕсли;
		
		ТекВыручка = Выборка.Fields("Summa_" + ДеньНеделиЗавтра).Value;
		
		ОбъектСправочника = ТекТТ.ПолучитьОбъект();
		ОбъектСправочника.ОжидаемаяВыручкаНаЗавтра = Окр(Выборка.Fields("Summa_" + ДеньНеделиЗавтра).Value);  // в тысячах рублей, округленно
		
		//+++АК MOSD 2018.12.05 ИП-00020544
		СтруктураОграничений = ОграниченияВыручки.Получить(ОбъектСправочника.id_TT);
		Если СтруктураОграничений <> Неопределено Тогда
			ОбъектСправочника.ОжидаемаяВыручкаНаЗавтра = Мин(Макс(ОбъектСправочника.ОжидаемаяВыручкаНаЗавтра,СтруктураОграничений.НижнийПредел),СтруктураОграничений.ВерхнийПредел);
		КонецЕсли;
		//---АК MOSD 
		
		Попытка
			ОбъектСправочника.Записать();
		Исключение
		КонецПопытки;
		
		Выборка.MoveNext();
		
	КонецЦикла;
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Ложь;
	//КонецЕсли;
	ADOСоединение.Close();
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()) + 86400);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПланыПродажПоДнямНедели.ТорговаяТочка,
	//|	СУММА(ПланыПродажПоДнямНедели.Количество * ПланыПродажПоДнямНедели.Цена) / 1000 КАК Сумма
	//|ИЗ
	//|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	//|ГДЕ
	//|	ПланыПродажПоДнямНедели.Дата = &ТекДата
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПланыПродажПоДнямНедели.ТорговаяТочка
	//|
	//|ИМЕЮЩИЕ
	//|	СУММА(ПланыПродажПоДнямНедели.Количество * ПланыПродажПоДнямНедели.Цена) > 0";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ОбъектСправочника = Выборка.ТорговаяТочка.ПолучитьОбъект();
	//	ОбъектСправочника.ОжидаемаяВыручкаНаЗавтра = Окр(Выборка.Сумма);  // в тысячах рублей, округленно
	//	Попытка
	//		ОбъектСправочника.Записать();
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
	
КонецПроцедуры

Процедура УдалениеПросроченныхЗаявокНаРасходСредств() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"		, ДобавитьМесяц(ТекущаяДата(), -6));
	Запрос.УстановитьПараметр("ДатаКон"		, ДобавитьМесяц(ТекущаяДата(), 1));
	Запрос.УстановитьПараметр("ДатаРасхода"	, НачалоДня(ТекущаяДата()) - 86400 * 2);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредств.Ссылка КАК Ссылка,
	|	ЗаявкаНаРасходованиеСредств.СуммаДокумента
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредств.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаявкаНаРасходованиеСредств.Проведен = ИСТИНА
	|	И ЗаявкаНаРасходованиеСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеСредств.Акцептована)
	|	И ЗаявкаНаРасходованиеСредств.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	|	И ЗаявкаНаРасходованиеСредств.ДатаРасхода <= &ДатаРасхода
	|	И ЗаявкаНаРасходованиеСредств.ПринятоКОплате = ИСТИНА
	|	И ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств.Код <> ""310310""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВЗ_Оплаты.СуммаРасход, 0) КАК Оплачено,
	|	ВТ_Документы.Ссылка КАК Заявка
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиОбороты.СуммаРасход КАК СуммаРасход,
	|			ВзаиморасчетыСКонтрагентамиОбороты.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					,
	|					ЗаявкаНаРасходованиеСредств В
	|						(ВЫБРАТЬ
	|							ВТ_Документы.Ссылка
	|						ИЗ
	|							ВТ_Документы КАК ВТ_Документы)) КАК ВзаиморасчетыСКонтрагентамиОбороты) КАК ВЗ_Оплаты
	|		ПО ВТ_Документы.Ссылка = ВЗ_Оплаты.ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЕСТЬNULL(ВЗ_Оплаты.СуммаРасход, 0) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Документы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокОбъект = Выборка.Заявка.ПолучитьОбъект();
			//ДокОбъект.ПринятоКОплате = Ложь;
			//ДокОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
			ДокОбъект.ВыполнятьЗаписьБезПроверок = Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			ДокОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка удаления заявки", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;
	
	//пометим на удаление письма, где стоит помечанная на удаление заявка на расход
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", ДобавитьМесяц(ТекущаяДата(), -6));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредств.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Заявки
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредств.Дата >= &ДатаНач
	|	И ЗаявкаНаРасходованиеСредств.ПометкаУдаления = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмо.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ВЫРАЗИТЬ(ЭлектронноеПисьмо.ОснованиеПисьма КАК Документ.ЗаявкаНаРасходованиеСредств) В
	|			(ВЫБРАТЬ
	|				ВТ_Заявки.Ссылка
	|			ИЗ
	|				ВТ_Заявки КАК ВТ_Заявки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ВЫРАЗИТЬ(ЗадачаИсполнителя.ОбъектЗадачи КАК Документ.ЗаявкаНаРасходованиеСредств) В
	|			(ВЫБРАТЬ
	|				ВТ_Заявки.Ссылка
	|			ИЗ
	|				ВТ_Заявки КАК ВТ_Заявки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Заявки";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.ОснованиеПисьма = Неопределено;
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать();
	КонецЦикла;
	
	Выборка = Результаты[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.ОбъектЗадачи 		= Неопределено;
		ДокОбъект.ПометкаУдаления 	= Истина;
		ДокОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаИПерезагрузкаПоИзбенке(ДатаПроверки, КоличествоИтерацийПоИзбенке)
	
	МассивТТКПерезагрузке = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	, ДатаПроверки);
	Запрос.УстановитьПараметр("ДатаНач"	, ДатаПроверки);
	Запрос.УстановитьПараметр("ДатаКон"	, КонецДня(ДатаПроверки));
	Запрос.УстановитьПараметр("ККМ"		, "%ККМ%");
	Запрос.УстановитьПараметр("ЧПМ"		, "%ЧПМ%");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛистУчета.ТорговаяТочка.id_TT КАК id_tt,
	|	ЛистУчета.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ЛистУчета.СуммаДокумента,
	|	ЛистУчета.СуммаЭквайринг,
	|	ЛистУчета.СуммаНал,
	|	ЛистУчета.ВозвратПокупателю,
	|	ЛистУчета.ВозвратПокупателюБезнал,
	|	ЛистУчета.СторноОшибочно,
	|	ЛистУчета.Терминал,
	|	ЛистУчета.ТорговаяТочка.Терминал,
	|	ЛистУчета.Безнал,
	|	ЛистУчета.ОплатаБаллами,
	|	ЛистУчета.СкидкаКопеек,
	|	ЛистУчета.Организация
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
	|	И ЛистУчета.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	|	И ЛистУчета.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка.id_TT КАК id_tt,
	|	ЛистУчетаZОтчеты.Касса,
	|	СУММА(ЛистУчетаZОтчеты.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЛистУчета.ZОтчеты КАК ЛистУчетаZОтчеты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЛистУчетаZОтчеты.Ссылка.Дата, ДЕНЬ) = &Дата
	|	И ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	|	И ЛистУчетаZОтчеты.Ссылка.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка,
	|	ЛистУчетаZОтчеты.Касса,
	|	ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка.id_TT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.id_TT,
	|	СтруктурныеЕдиницы.Терминал,
	|	СтруктурныеЕдиницы.НомерТочки,
	|	СтруктурныеЕдиницы.Организация
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(dbo_Shifts.CloseDateTime, СЕКУНДА, -dbo_Shifts.Second_lag), ДЕНЬ) КАК Дата,
	|	dbo_Shifts.CashID,
	|	СУММА(dbo_Checks.BaseSum) КАК BaseSum,
	|	СУММА(dbo_Checks.SummBonus) КАК SummBonus,
	|	dbo_Checks.ShopNo
	|ИЗ
	|	ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_Shifts КАК dbo_Shifts
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_Checks КАК dbo_Checks
	|		ПО dbo_Shifts.ShiftUID = dbo_Checks.ShiftUID
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(dbo_Shifts.CloseDateTime, СЕКУНДА, -dbo_Shifts.Second_lag) >= &ДатаНач
	|	И ДОБАВИТЬКДАТЕ(dbo_Shifts.CloseDateTime, СЕКУНДА, -dbo_Shifts.Second_lag) <= &ДатаКон
	|	И dbo_Checks.OperationType > 0
	|	И dbo_Checks.BaseSum - dbo_Checks.SummBonus > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	dbo_Shifts.CashID,
	|	dbo_Checks.ShopNo,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(dbo_Shifts.CloseDateTime, СЕКУНДА, -dbo_Shifts.Second_lag), ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка,
	|	ОсновныеСредства.ЗаводскойНомер,
	|	ВЫБОР
	|	КОГДА ОсновныеСредства.Наименование ПОДОБНО &ККМ
	|		ТОГДА ВЫБОР
	|				КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК ЭтоККМ,
	|ВЫБОР
	|	КОГДА ОсновныеСредства.Наименование ПОДОБНО &ЧПМ
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ВЫБОР
	|			КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|КОНЕЦ КАК ЭтоЧПМ
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	(ОсновныеСредства.Наименование ПОДОБНО &ККМ
	|			ИЛИ ОсновныеСредства.Наименование ПОДОБНО &ЧПМ)";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабЛисты 	= Результаты[0].Выгрузить();
	ТабЗОтчеты 	= Результаты[1].Выгрузить();
	ТабЗОтчетыСкл = ТабЗОтчеты.СкопироватьКолонки();
	ТабТТ 		= Результаты[2].Выгрузить();
	ТабЗОтчетыСкл_Темп = Результаты[3].Выгрузить();
	ТабКешККМ 	= Результаты[4].Выгрузить();
	
	ОргСП = Справочники.Организации.НайтиПоКоду("000000003");
	
	Для Каждого СтрокаЗ Из ТабЗОтчетыСкл_Темп Цикл
		СтрокаТТ 	= ТабТТ.Найти(СтрокаЗ.ShopNo	, "НомерТочки");
		СтрокаЛист 	= ТабЛисты.Найти(СтрокаЗ.ShopNo	, "НомерТочки");
		Если СтрокаЛист <> Неопределено Тогда
			Организация = СтрокаЛист.Организация;
		Иначе
			Организация = СтрокаТТ.Организация;
		КонецЕсли;	
		Если Организация = ОргСП Тогда
			СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаЗ.CashID, "ЧРГ=; ЧГ=0"), Истина));
		Иначе
			СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаЗ.CashID, "ЧРГ=; ЧГ=0"), Истина));
		КонецЕсли;	
		Если СтрокиККМ.Количество() > 0 Тогда
			СтрокаДоб = ТабЗОтчетыСкл.Добавить();
			СтрокаДоб.id_tt = СтрокаТТ.id_tt;
			СтрокаДоб.Касса = СтрокиККМ[0].Ссылка;
			СтрокаДоб.Сумма = СтрокаЗ.BaseSum - СтрокаЗ.SummBonus;
		КонецЕсли;
	КонецЦикла;	
	
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ТабЛистыПоСкл = Новый ТаблицаЗначений();
	ТабЛистыПоСкл.Колонки.Добавить("id_tt"					, Новый ОписаниеТипов("Число"));
	ТабЛистыПоСкл.Колонки.Добавить("СуммаДокумента"			, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("СуммаЭквайринг"			, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("СуммаНал"				, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("ВозвратПокупателюБезнал", ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("ВозвратПокупателю"		, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("СторноОшибочно"			, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("Безнал"					, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("ВозвратБезнал"			, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("Возврат201Безнал"		, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("ОплатаБаллами"			, ТипЧисло);
	ТабЛистыПоСкл.Колонки.Добавить("СкидкаКопеек"			, ТипЧисло);
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT Ch.ShopNo,
	|  SUM(CASE WHEN Ch.OperationType = 1 THEN Ch.BaseSum ELSE 0 END) as Summa,
	|  SUM(CASE WHEN Ch.OperationType = 1 THEN Ch.SummBank ELSE 0 END) as Beznal,
	|  SUM(CASE WHEN Ch.OperationType IN (3, 202, 203) THEN Ch.SummCash ELSE 0 END) as SummaVozvratNal,
	|  SUM(CASE WHEN Ch.OperationType IN (3, 202, 203) THEN Ch.SummBank ELSE 0 END) as SummaVozvratBezNal,
	|  SUM(CASE WHEN Ch.OperationType = 201 THEN Ch.SummCash WHEN Ch.OperationType = 211 THEN Ch.SummCash * -1 ELSE 0 END) as SummaVozvrat201Nal,
	|  SUM(CASE WHEN Ch.OperationType = 201 THEN Ch.SummBank WHEN Ch.OperationType = 211 THEN Ch.SummBank * -1 ELSE 0 END) as SummaVozvrat201BezNal,
	|  SUM(CASE WHEN Ch.OperationType IN (1, 3, 202, 203) THEN Ch.SummBonus ELSE 0 END) as SummaBallami,
	|  SUM(ISNULL(Chl.SkidkaKopeek, 0)) as SkidkaKopeek
	|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
	|LEFT OUTER JOIN (SELECT Chl.CheckUID,
	|  				SUM(CASE WHEN Chl.OperationType_cl IN (1, 3, 202, 203) and Chl.BaseSum <> 0 THEN Chl.BaseSum - Chl.BasePrice * Chl.Quantity ELSE 0 END * (-1)) as SkidkaKopeek
	|  				FROM [SMS_IZBENKA].[dbo].[Checkline] as Chl (nolock) where Chl.date_ch = '" + Формат(ДатаПроверки, "ДФ=yyyy-MM-dd") + "' and Chl.OperationType_cl IN (1, 3, 201, 202, 203) GROUP BY Chl.CheckUID) as Chl
	|  				ON Ch.CheckUID = Chl.CheckUID
	|where CONVERT(date, CloseDate) = '" + Формат(ДатаПроверки, "ДФ=yyyy-MM-dd") + "' and Ch.OperationType IN (1, 3, 201, 211, 202, 203) 
	|GROUP BY Ch.ShopNo";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабЛистыПоСкл.Добавить();
			СтрокаДоб.Безнал 			= Rs.Fields("Beznal").Value;   
			СтрокаДоб.ВозвратБезНал 	= Rs.Fields("SummaVozvratBezNal").Value;
			СтрокаДоб.Возврат201БезНал 	= Rs.Fields("SummaVozvrat201BezNal").Value;
			СтрокаДоб.ВозвратПокупателю = Rs.Fields("SummaVozvrat201Nal").Value;
			СтрокаДоб.СторноОшибочно 	= Rs.Fields("SummaVozvratNal").Value;
			СтрокаДоб.ОплатаБаллами 	= Rs.Fields("SummaBallami").Value;
			СтрокаДоб.СкидкаКопеек 		= Rs.Fields("SkidkaKopeek").Value;
			СтрокаДоб.Безнал 			= СтрокаДоб.Безнал - СтрокаДоб.ВозвратБезНал;
			СтрокаДоб.ВозвратПокупателюБезнал = СтрокаДоб.Возврат201БезНал;
			
			СтрокаТТ = ТабТТ.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
			СтрокаДоб.id_tt = СтрокаТТ.Id_tt;
			
			ВозвратСумма = СтрокаДоб.ВозвратПокупателю + СтрокаДоб.СторноОшибочно + СтрокаДоб.ВозвратПокупателюБезнал;
			//
			СтрокаДоб.СуммаДокумента = ?(ТипЗнч(Rs.Fields("Summa").Value) = Тип("Число"), Rs.Fields("Summa").Value, 0) - ВозвратСумма;
			СтрокаДоб.СуммаЭквайринг = СтрокаДоб.Безнал;
			СтрокаДоб.СуммаНал = СтрокаДоб.СуммаДокумента - СтрокаДоб.ОплатаБаллами - СтрокаДоб.Безнал;
			
			Если СтрокаДоб.СуммаЭквайринг > 0 Тогда
				Если Не ЗначениеЗаполнено(СтрокаТТ.Терминал) Тогда
					СтрокаДоб.СуммаНал = СтрокаДоб.СуммаНал + СтрокаДоб.СуммаЭквайринг - СтрокаДоб.ВозвратПокупателюБезнал;
					СтрокаДоб.СуммаЭквайринг = 0;
					СтрокаДоб.ВозвратПокупателюБезнал = 0;
				КонецЕсли;	
			КонецЕсли;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ADOСоединение.Close();
	
	//теперь сверим заполненные таблицы
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТабПоБазе"	, ТабЛисты);
	Запрос.УстановитьПараметр("ТабПоСкл"	, ТабЛистыПоСкл);
	Запрос.УстановитьПараметр("ТабПоБазеЗ"	, ТабЗОтчеты);
	Запрос.УстановитьПараметр("ТабПоСклЗ"	, ТабЗОтчетыСкл);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.id_TT КАК id_tt,
	|	Таб.СуммаДокумента,
	|	Таб.СуммаЭквайринг,
	|	Таб.СуммаНал,
	|	Таб.ВозвратПокупателю,
	|	Таб.ВозвратПокупателюБезнал,
	|	Таб.СторноОшибочно,
	|	Таб.Безнал,
	|	Таб.ОплатаБаллами,
	|	Таб.СкидкаКопеек
	|ПОМЕСТИТЬ ВТ_ПоБазе
	|ИЗ
	|	&ТабПоБазе КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.id_TT КАК id_tt,
	|	Таб.СуммаДокумента,
	|	Таб.СуммаЭквайринг,
	|	Таб.СуммаНал,
	|	Таб.ВозвратПокупателю,
	|	Таб.ВозвратПокупателюБезнал,
	|	Таб.СторноОшибочно,
	|	Таб.Безнал,
	|	Таб.ОплатаБаллами,
	|	Таб.СкидкаКопеек
	|ПОМЕСТИТЬ ВТ_ПоСкл
	|ИЗ
	|	&ТабПоСкл КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.id_TT КАК id_tt,
	|	Таб.Касса,
	|	Таб.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ЗОтчетыПоБазе
	|ИЗ
	|	&ТабПоБазеЗ КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.id_TT КАК id_tt,
	|	Таб.Касса,
	|	Таб.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ЗОтчетыПоСкл
	|ИЗ
	|	&ТабПоСклЗ КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЗ_Запрос.id_tt
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ВТ_ПоБазе.id_tt, ВТ_ПоСкл.id_tt) КАК id_tt
	|	ИЗ
	|		ВТ_ПоБазе КАК ВТ_ПоБазе
	|			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПоСкл КАК ВТ_ПоСкл
	|			ПО ВТ_ПоБазе.id_tt = ВТ_ПоСкл.id_tt
	|	ГДЕ
	|		(ЕСТЬNULL(ВТ_ПоБазе.СуммаДокумента, 0) <> ЕСТЬNULL(ВТ_ПоСкл.СуммаДокумента, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.СуммаЭквайринг, 0) <> ЕСТЬNULL(ВТ_ПоСкл.СуммаЭквайринг, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.СуммаНал, 0) <> ЕСТЬNULL(ВТ_ПоСкл.СуммаНал, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.ВозвратПокупателю, 0) <> ЕСТЬNULL(ВТ_ПоСкл.ВозвратПокупателю, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.ВозвратПокупателюБезнал, 0) <> ЕСТЬNULL(ВТ_ПоСкл.ВозвратПокупателюБезнал, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.СторноОшибочно, 0) <> ЕСТЬNULL(ВТ_ПоСкл.СторноОшибочно, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.Безнал, 0) <> ЕСТЬNULL(ВТ_ПоСкл.Безнал, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.ОплатаБаллами, 0) <> ЕСТЬNULL(ВТ_ПоСкл.ОплатаБаллами, 0)
	|				ИЛИ ЕСТЬNULL(ВТ_ПоБазе.СкидкаКопеек, 0) <> ЕСТЬNULL(ВТ_ПоСкл.СкидкаКопеек, 0))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(ВТ_ЗОтчетыПоБазе.id_tt, ВТ_ЗОтчетыПоСкл.id_tt)
	|	ИЗ
	|		ВТ_ЗОтчетыПоБазе КАК ВТ_ЗОтчетыПоБазе
	|			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗОтчетыПоСкл КАК ВТ_ЗОтчетыПоСкл
	|			ПО ВТ_ЗОтчетыПоБазе.id_tt = ВТ_ЗОтчетыПоСкл.id_tt
	|				И ВТ_ЗОтчетыПоБазе.Касса = ВТ_ЗОтчетыПоСкл.Касса
	|	ГДЕ
	|		ЕСТЬNULL(ВТ_ЗОтчетыПоБазе.Сумма, 0) <> ЕСТЬNULL(ВТ_ЗОтчетыПоСкл.Сумма, 0)) КАК ВЗ_Запрос";
	
	МассивID = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("id_tt");
	
	Если МассивID.Количество() > 0 Тогда
		МассивНомера = Новый Массив();
		Для Каждого ЭлементИД Из МассивID Цикл
			МассивНомера.Добавить(ТабТТ.Найти(ЭлементИД, "id_TT").НомерТочки);
		КонецЦикла;	
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам(ДатаПроверки, МассивНомера, МассивID);
		КоличествоИтерацийПоИзбенке = КоличествоИтерацийПоИзбенке + 1;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроверкаИПерезагрузкаЛистов() Экспорт
	
	ДатаЗапрета = ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400;
	МинДата = ТекущаяДата() - 86400 * 45;
	
	МинДата = НачалоДня(Макс(ДатаЗапрета, МинДата));
	ТекДата = ТекущаяДата() - 86400 * 2;
	КоличествоИтерацийПоИзбенке = 1;
	Пока МинДата <= ТекДата Цикл
		//Если КоличествоИтерацийПоИзбенке > 10 Тогда //чтобы обработка надолго не затягивалась, а обрабатывало порциями
		//	Прервать;
		//КонецЕсли;	
		ПроверкаИПерезагрузкаПоИзбенке(МинДата, КоличествоИтерацийПоИзбенке);
		МинДата = МинДата + 86400;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверкаИПерезагрузкаЛистовПоТоварам(ЗаДату = '00010101') Экспорт
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Истина;
	
	ДатаЗапрета = ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400;
	Если ЗначениеЗаполнено(ЗаДату) Тогда
		МинДата = ЗаДату;
	Иначе	
		МинДата = ТекущаяДата() - 86400 * 45;
	КонецЕсли;	
	
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//ДатаУсеченияБазы = '00010101';
	//СтрЗапрос = "SELECT CAST([SMS_REPL].[dbo].[date_arc] () as datetime) as date";
	//rs = ADOСоединение.Execute(СтрЗапрос);
	//Попытка
	//	rs.MoveFirst();
	//	Если НЕ rs.EOF() Тогда
	//		ДатаУсеченияБазы = Rs.Fields("date").Value;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	//
	//ADOСоединение = Неопределено;
	
	//МинДата = НачалоДня(Макс(ДатаЗапрета, МинДата, КонецДня(ДатаУсеченияБазы) + 1));
	МинДата = НачалоДня(Макс(ДатаЗапрета, МинДата));
	Если ЗначениеЗаполнено(ЗаДату) Тогда
		ТекДата = ЗаДату;
	Иначе	
		ТекДата = ТекущаяДата() - 86400 * 2;
	КонецЕсли;	
	Пока МинДата <= ТекДата Цикл
		Если МинДата > ТекДата Тогда
			Прервать;
		КонецЕсли;	
		ТабРасхождений = Отчеты.ОтчетПоРасхождениямДвиженийЛистовУчетаИSQL.ПолучитьТаблицуРасхождений(МинДата, МинДата, Ложь, Новый Массив());
		ТабРасхождений.Свернуть("ТорговаяТочка");
		Если ТабРасхождений.Количество() > 0 Тогда
			МассивId_TT = Новый Массив();
			МассивНомераМагазинов = Новый Массив();
			Для Каждого СтрокаТаб Из ТабРасхождений Цикл
				МассивId_TT.Добавить(СтрокаТаб.ТорговаяТочка.id_tt);
				МассивНомераМагазинов.Добавить(СтрокаТаб.ТорговаяТочка.НомерТочки);
			КонецЦикла;	
			Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам(МинДата, МассивНомераМагазинов, МассивId_TT);
			Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам_БезЧековПродажи(МинДата, МассивНомераМагазинов, МассивId_TT);
			Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл(МинДата, МассивНомераМагазинов, МассивId_TT);
			Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл_БезЧековПродажи(МинДата, МассивНомераМагазинов, Массивid_TT);
		КонецЕсли;	
		МинДата = МинДата + 86400;
	КонецЦикла;
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Ложь;
	
КонецПроцедуры	

Процедура ПроверкаИПерезагрузкаЛистовПоТоварамРеглЗадание() Экспорт
	
	ПроверкаИПерезагрузкаЛистовПоТоварам();
	
КонецПроцедуры	

Процедура ОтправкаУведомленийПоАктамКМ3() Экспорт
	
	ЗапросАкты = Новый Запрос;
	ЗапросАкты.УстановитьПараметр("Дата", КонецДня(Константы.ДатаЗапретаРедактированияАктовКМ3.Получить()));
	ЗапросАкты.Текст =
	"ВЫБРАТЬ
	|	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	ЛистУчетаАктыКМ3.Ссылка.Дата,
	|	ЛистУчетаАктыКМ3.ККМ,
	|	ЛистУчетаАктыКМ3.ОсновноеСредство,
	|	ЛистУчетаАктыКМ3.ЭтоВозвратБезнал,
	|	ВЫБОР
	|		КОГДА ЛистУчетаАктыКМ3.ПолученаСумма <> 0
	|			ТОГДА ЛистУчетаАктыКМ3.ПолученаСумма
	|		ИНАЧЕ ЛистУчетаАктыКМ3.Сумма
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.ЛистУчета.АктыКМ3 КАК ЛистУчетаАктыКМ3
	|ГДЕ
	|	ЛистУчетаАктыКМ3.Ссылка.Проведен = ИСТИНА
	|	И ЛистУчетаАктыКМ3.Ссылка.Дата > &Дата
	|	И ЛистУчетаАктыКМ3.АктПолучен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛистУчетаАктыКМ3.Ссылка.Дата,
	|	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка.НомерТочки";
	
	Результат = ЗапросАкты.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		ТекстПисьма = "Не обработаны следующие акты КМ-3:" + Символы.ПС;
		Пока Выборка.Следующий() Цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС + "Дата акта: " + Выборка.Дата + "    ТТ: " + Выборка.ТорговаяТочка + "   Касса: " + 
			?(ЗначениеЗаполнено(Выборка.ОсновноеСредство), Выборка.ОсновноеСредство, Выборка.ККМ) + "    сумма: " + Формат(Выборка.Сумма, "ЧДЦ=2") + ?(Выборка.ЭтоВозвратБезнал, " (безнал)", "");
		КонецЦикла;	
		
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Попытка
			Почта.Подключиться(Профиль);
			Письмо.Тема = "Акты КМ-3";
			Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
			Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
			Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = "buh6@izbenka.msk.ru";
			Получатель.ОтображаемоеИмя = "Татьяна Сухарева";
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = "buxizbenka.kortieva@mail.ru";
			Получатель.ОтображаемоеИмя = "Марина Кортиева";
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = "izbywka30@gmail.com";
			Получатель.ОтображаемоеИмя = "Елена Шабарова";
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = "olga.vodolazskaya@bk.ru";
			Получатель.ОтображаемоеИмя = "Ольга Водолазская";
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = "buh7@izbenka.msk.ru";
			Получатель.ОтображаемоеИмя = "Вера Умарова";
			
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     = ТекстПисьма;
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			
			Почта.Послать(Письмо);
			Почта.Отключиться();
			
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура РасчетЗаработнойПлатыПродавцов() Экспорт
	
	ОбработкаОбъект = Обработки.РасчетЗаработнойПлатыПродавцов.Создать();
	
	ГраницаЗапретаРасчетаЗП 		= Константы.ГраницаЗапретаРасчетаЗППродавцов.Получить() + 86400;
	ГраницаЗапретаРедактирования 	= НачалоДня(ОбменСAccess.ПолучитьГраницуЗапретаИзменений()) + 86400;
	
	ОбщаяГраница = Макс(ГраницаЗапретаРасчетаЗП, ГраницаЗапретаРедактирования);
	
	ОбработкаОбъект.НачалоПериода 	= Макс(НачалоДня(ТекущаяДата()) - 7 * 86400, Макс(ОбщаяГраница, '20140501'));
	ОбработкаОбъект.КонецПериода 	= КонецДня(ТекущаяДата());
	ОбработкаОбъект.РасчитатьЗарплатуПродавцов();
	
КонецПроцедуры

Процедура ОтправкаСМСНаСервер() Экспорт
	
	Обработки.ГрупповоеДобавлениеКупонов.ОтправитьSMSНаСервер();
	
КонецПроцедуры

Процедура СверитьИПровестиУпаковкуВПоступленияхТоваровИУслуг(МесяцОбработки) Экспорт
	
	//+++АК MIND 2018.01.25 запросом по переданному месяцу проверяем всю списанную упаковку по поступлениям с эталонным списанием, все выявленнное перепроводим
	//вызывается на момент написания перед перерасчетом себестоимости за месяц
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(МесяцОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(МесяцОбработки));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОбороты.Период,
	               |	ФинансовыйОбороты.Регистратор,
	               |	ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент КАК Контрагент,
	               |	ФинансовыйОбороты.Субконто1 КАК Товар,
	               |	СУММА(ФинансовыйОбороты.КоличествоОборот) КАК КоличествоОборот
	               |ПОМЕСТИТЬ ВТ_ТоварыПоПоступлениям
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Товары), , , ) КАК ФинансовыйОбороты
	               |ГДЕ
	               |	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыйОбороты.Период,
	               |	ФинансовыйОбороты.Регистратор,
	               |	ФинансовыйОбороты.Субконто1,
	               |	ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФинансовыйОбороты.Период,
	               |	ФинансовыйОбороты.Регистратор,
	               |	ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент КАК Контрагент,
	               |	ФинансовыйОбороты.Субконто1 КАК Материал,
	               |	ФинансовыйОбороты.КорСубконто1 КАК Товар,
	               |	СУММА(ФинансовыйОбороты.КоличествоОборот * -1) КАК КоличествоОборот
	               |ПОМЕСТИТЬ ВТ_УпаковкаПоПоступлениям
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Материалы), , КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Товары)) КАК ФинансовыйОбороты
	               |ГДЕ
	               |	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыйОбороты.Период,
	               |	ФинансовыйОбороты.Регистратор,
	               |	ФинансовыйОбороты.Субконто1,
	               |	ФинансовыйОбороты.КорСубконто1,
	               |	ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Макс.Период,
	               |	ВЗ_Макс.Регистратор,
	               |	ВЗ_Макс.Контрагент,
	               |	ВЗ_Макс.Товар,
	               |	ВЗ_Макс.КоличествоОборот,
	               |	МАКСИМУМ(ЦеныПоставщиков.Характеристика) КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ТоварыСХарактеристикамиПоПоступлениям
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ТоварыПоПоступлениям.Период КАК Период,
	               |		ВТ_ТоварыПоПоступлениям.Регистратор КАК Регистратор,
	               |		ВТ_ТоварыПоПоступлениям.Контрагент КАК Контрагент,
	               |		ВТ_ТоварыПоПоступлениям.Товар КАК Товар,
	               |		ВТ_ТоварыПоПоступлениям.КоличествоОборот КАК КоличествоОборот,
	               |		МАКСИМУМ(ЦеныПоставщиков.Период) КАК ПериодМакс
	               |	ИЗ
	               |		ВТ_ТоварыПоПоступлениям КАК ВТ_ТоварыПоПоступлениям
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	               |			ПО ВТ_ТоварыПоПоступлениям.Период >= ЦеныПоставщиков.Период
	               |				И ВТ_ТоварыПоПоступлениям.Контрагент = ЦеныПоставщиков.Поставщик
	               |				И ВТ_ТоварыПоПоступлениям.Товар = ЦеныПоставщиков.Номенклатура
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ТоварыПоПоступлениям.Период,
	               |		ВТ_ТоварыПоПоступлениям.Регистратор,
	               |		ВТ_ТоварыПоПоступлениям.Контрагент,
	               |		ВТ_ТоварыПоПоступлениям.Товар,
	               |		ВТ_ТоварыПоПоступлениям.КоличествоОборот) КАК ВЗ_Макс
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	               |		ПО ВЗ_Макс.ПериодМакс = ЦеныПоставщиков.Период
	               |			И ВЗ_Макс.Контрагент = ЦеныПоставщиков.Поставщик
	               |			И ВЗ_Макс.Товар = ЦеныПоставщиков.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЗ_Макс.Период,
	               |	ВЗ_Макс.Регистратор,
	               |	ВЗ_Макс.Контрагент,
	               |	ВЗ_Макс.Товар,
	               |	ВЗ_Макс.КоличествоОборот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТоварыПоПоступлениям
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Запрос.Период КАК Период,
	               |	ВЗ_Запрос.Регистратор КАК Регистратор,
	               |	ВЗ_Запрос.Контрагент,
	               |	ВЗ_Запрос.Товар,
	               |	ВЗ_Запрос.КоличествоОборот,
	               |	ВЗ_Запрос.Характеристика,
	               |	СпецификацииПоставщиков.НоменклатураСырье,
	               |	ВЫРАЗИТЬ(СпецификацииПоставщиков.Количество * ВЗ_Запрос.КоличествоОборот * СпецификацииПоставщиков.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 0)) КАК КолвоСырья
	               |ПОМЕСТИТЬ ВТ_ДолжноБытьСписаноПоДокам
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Период КАК Период,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Регистратор КАК Регистратор,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Контрагент КАК Контрагент,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Товар КАК Товар,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.КоличествоОборот КАК КоличествоОборот,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Характеристика КАК Характеристика,
	               |		МАКСИМУМ(СпецификацииПоставщиков.Период) КАК ПериодМакс,
	               |		СпецификацииПоставщиков.НоменклатураСырье КАК НоменклатураСырье
	               |	ИЗ
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям КАК ВТ_ТоварыСХарактеристикамиПоПоступлениям
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков КАК СпецификацииПоставщиков
	               |			ПО ВТ_ТоварыСХарактеристикамиПоПоступлениям.Период >= СпецификацииПоставщиков.Период
	               |				И ВТ_ТоварыСХарактеристикамиПоПоступлениям.Контрагент = СпецификацииПоставщиков.Поставщик
	               |				И ВТ_ТоварыСХарактеристикамиПоПоступлениям.Товар = СпецификацииПоставщиков.Номенклатура
	               |				И ВТ_ТоварыСХарактеристикамиПоПоступлениям.Характеристика = СпецификацииПоставщиков.Характеристика
	               |				И (НАЧАЛОПЕРИОДА(ВТ_ТоварыСХарактеристикамиПоПоступлениям.Период, ДЕНЬ) <= СпецификацииПоставщиков.ДатаКонца
	               |					ИЛИ СпецификацииПоставщиков.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1))
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Период,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Регистратор,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Контрагент,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Товар,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.КоличествоОборот,
	               |		ВТ_ТоварыСХарактеристикамиПоПоступлениям.Характеристика,
	               |		СпецификацииПоставщиков.НоменклатураСырье) КАК ВЗ_Запрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков КАК СпецификацииПоставщиков
	               |		ПО ВЗ_Запрос.ПериодМакс = СпецификацииПоставщиков.Период
	               |			И ВЗ_Запрос.Контрагент = СпецификацииПоставщиков.Поставщик
	               |			И ВЗ_Запрос.Товар = СпецификацииПоставщиков.Номенклатура
	               |			И ВЗ_Запрос.Характеристика = СпецификацииПоставщиков.Характеристика
	               |			И ВЗ_Запрос.НоменклатураСырье = СпецификацииПоставщиков.НоменклатураСырье
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	АналогУпаковкиУПереработчика.СтандартнаяЭтикетка,
	               |	АналогУпаковкиУПереработчика.Аналог,
	               |	АналогУпаковкиУПереработчика.Товар,
	               |	АналогУпаковкиУПереработчика.Контрагент
	               |ПОМЕСТИТЬ ВТ_ВсеВозможныеАналогикКСписанию
	               |ИЗ
	               |	РегистрНакопления.АналогУпаковкиУПереработчика КАК АналогУпаковкиУПереработчика
	               |ГДЕ
	               |	АналогУпаковкиУПереработчика.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, ДЕНЬ, -180) И &ДатаКон
	               |	И АналогУпаковкиУПереработчика.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_УпаковкаПоПоступлениям.Период,
	               |	ВТ_УпаковкаПоПоступлениям.Регистратор,
	               |	ВТ_УпаковкаПоПоступлениям.Контрагент,
	               |	ВТ_УпаковкаПоПоступлениям.Материал,
	               |	ВТ_УпаковкаПоПоступлениям.Товар,
	               |	ВТ_УпаковкаПоПоступлениям.КоличествоОборот,
	               |	МАКСИМУМ(ВТ_ВсеВозможныеАналогикКСписанию.СтандартнаяЭтикетка) КАК СтандартнаяЭтикетка
	               |ПОМЕСТИТЬ ВТ_УпаковкаСВозможнымиАналогами
	               |ИЗ
	               |	ВТ_УпаковкаПоПоступлениям КАК ВТ_УпаковкаПоПоступлениям
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеВозможныеАналогикКСписанию КАК ВТ_ВсеВозможныеАналогикКСписанию
	               |		ПО ВТ_УпаковкаПоПоступлениям.Контрагент = ВТ_ВсеВозможныеАналогикКСписанию.Контрагент
	               |			И ВТ_УпаковкаПоПоступлениям.Товар = ВТ_ВсеВозможныеАналогикКСписанию.Товар
	               |			И ВТ_УпаковкаПоПоступлениям.Материал = ВТ_ВсеВозможныеАналогикКСписанию.Аналог
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_УпаковкаПоПоступлениям.Период,
	               |	ВТ_УпаковкаПоПоступлениям.Регистратор,
	               |	ВТ_УпаковкаПоПоступлениям.Контрагент,
	               |	ВТ_УпаковкаПоПоступлениям.Материал,
	               |	ВТ_УпаковкаПоПоступлениям.Товар,
	               |	ВТ_УпаковкаПоПоступлениям.КоличествоОборот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЕСТЬNULL(ВЗ_Полный.Регистратор, ВЗ_Полный.Регистратор1) КАК Регистратор
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДолжноБытьСписаноПоДокам.Регистратор КАК Регистратор,
	               |		ВТ_ДолжноБытьСписаноПоДокам.Товар КАК Товар,
	               |		ВТ_ДолжноБытьСписаноПоДокам.Характеристика КАК Характеристика,
	               |		ВТ_ДолжноБытьСписаноПоДокам.НоменклатураСырье КАК НоменклатураСырье,
	               |		ЕСТЬNULL(ВТ_ДолжноБытьСписаноПоДокам.КолвоСырья, 0) КАК КолвоСырья,
	               |		ВТ_УпаковкаСВозможнымиАналогами.Регистратор КАК Регистратор1,
	               |		ВТ_УпаковкаСВозможнымиАналогами.Товар КАК Товар1,
	               |		СУММА(ЕСТЬNULL(ВТ_УпаковкаСВозможнымиАналогами.КоличествоОборот, 0)) КАК КоличествоСырьяПоДоку
	               |	ИЗ
	               |		ВТ_ДолжноБытьСписаноПоДокам КАК ВТ_ДолжноБытьСписаноПоДокам
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_УпаковкаСВозможнымиАналогами КАК ВТ_УпаковкаСВозможнымиАналогами
	               |			ПО ВТ_ДолжноБытьСписаноПоДокам.Период = ВТ_УпаковкаСВозможнымиАналогами.Период
	               |				И ВТ_ДолжноБытьСписаноПоДокам.Регистратор = ВТ_УпаковкаСВозможнымиАналогами.Регистратор
	               |				И ВТ_ДолжноБытьСписаноПоДокам.Контрагент = ВТ_УпаковкаСВозможнымиАналогами.Контрагент
	               |				И ВТ_ДолжноБытьСписаноПоДокам.Товар = ВТ_УпаковкаСВозможнымиАналогами.Товар
	               |				И (ВТ_ДолжноБытьСписаноПоДокам.НоменклатураСырье = ВТ_УпаковкаСВозможнымиАналогами.Материал
	               |					ИЛИ ВТ_ДолжноБытьСписаноПоДокам.НоменклатураСырье = ВТ_УпаковкаСВозможнымиАналогами.СтандартнаяЭтикетка)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДолжноБытьСписаноПоДокам.Регистратор,
	               |		ВТ_ДолжноБытьСписаноПоДокам.Товар,
	               |		ВТ_ДолжноБытьСписаноПоДокам.Характеристика,
	               |		ВТ_ДолжноБытьСписаноПоДокам.НоменклатураСырье,
	               |		ВТ_ДолжноБытьСписаноПоДокам.КолвоСырья,
	               |		ВТ_УпаковкаСВозможнымиАналогами.Регистратор,
	               |		ВТ_УпаковкаСВозможнымиАналогами.Товар) КАК ВЗ_Полный
	               |ГДЕ
	               |	ВЗ_Полный.КолвоСырья <> ВЗ_Полный.КоличествоСырьяПоДоку";
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.Регистратор.ПолучитьОбъект();
		//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643	 
		//ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Попытка
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Исключение	
			ОтправитьПисьмоСИсключением("susk@automacon.ru", ОписаниеОШибки(), "СверитьИПровестиУпаковкуВПоступленияхТоваровИУслуг");  
		КонецПопытки;
		//---АК Susk (Суслин К.В.) 
		
	КонецЦикла;
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Ложь;
	
КонецПроцедуры	

Процедура РасчетСебестоимостиТекущегоМесяца() Экспорт
	
	ДатаЗапрета = ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400;
	Пока НачалоМесяца(ДатаЗапрета) <= НачалоМесяца(ТекущаяДата()) Цикл
		СверитьИПровестиУпаковкуВПоступленияхТоваровИУслуг(ДатаЗапрета);
		РегламентныеЗаданияСервер.ПересчитатьСебестоимостьВПроводках(НачалоМесяца(ДатаЗапрета));
		ДатаЗапрета = ДобавитьМесяц(ДатаЗапрета, 1);
	КонецЦикла;
	
	//+++АК Susk (Суслин К.В.) 2018.11.27 закрытие месяца
	ВыгрузитьПроводкиПо10_6_В_Бухгалтерию();
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

Процедура УстановитьНаименование(НовыйОбъект)
	
	Если ЗначениеЗаполнено(НовыйОбъект.МестоВыкладки)
		И ЗначениеЗаполнено(НовыйОбъект.Владелец) Тогда
		
		НаименованиеМагазина = НовыйОбъект.Владелец.Наименование;
		КодМагазина="";
		Для Сч=1 По СтрДлина(НаименованиеМагазина) Цикл
			Симв=Сред(НаименованиеМагазина,Сч,1);
			Если Найти("0123456789",Симв)<>0 Тогда
				КодМагазина=КодМагазина+Симв;
			Иначе	
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		КодМагазина = Прав("0000000" + КодМагазина, 4);
		
		Префикс = КодМагазина + "-" + НовыйОбъект.МестоВыкладки.КодДляДатчиков;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", "%" + Префикс + "%");
		Запрос.УстановитьПараметр("Ссылка"		, НовыйОбъект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Датчики.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Датчики КАК Датчики
		|ГДЕ
		|	Датчики.Наименование ПОДОБНО &Наименование
		|	И Датчики.Ссылка <> &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование УБЫВ";
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			НаименованиеПоследнее = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ЦифраПосл = Прав(НаименованиеПоследнее, 1);
			Если Найти("01234567890", ЦифраПосл) > 0 Тогда
				ТекНомер = Число(ЦифраПосл) + 1;
			Иначе
				ТекНомер = 1;
			КонецЕсли; 
		Иначе
			ТекНомер = 1;
		КонецЕсли;   
		НовыйОбъект.Наименование = Префикс + Строка(ТекНомер);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПересчетЗакрытияМесяцаПоКонстанте() Экспорт
	
	Возврат; //mind отключил этот функционал
	
	МесяцЗакрытия = НачалоМесяца(Константы.МесяцДляПересчетаЗакрытия.Получить());
	Если ЗначениеЗаполнено(МесяцЗакрытия) Тогда
		ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Минеев Дмитрий");
		ДатаЗапрета = НастройкаПравДоступа.ПолучитьОбщуюДатуЗапретаДляПользователя();
		Если ДатаЗапрета >= МесяцЗакрытия Тогда
			Возврат;
		КонецЕсли;	
		РегламентныеЗаданияСервер.ПересчитатьСебестоимостьВПроводках(НачалоМесяца(МесяцЗакрытия));
		Константы.МесяцДляПересчетаЗакрытия.Установить('00010101');
	КонецЕсли;	
	
КонецПроцедуры

Процедура СинхронизацияРозничныхЦенСУНФ() Экспорт
	
	//теперь цены вводят в финансах и они переносятся в астор
	Возврат;
	
	ДатаОбработки = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
	Пока ДатаОбработки <= ТекущаяДата() Цикл
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеПоРозничнымЦенам(ДатаОбработки);
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеПоИнкассацииВкусвилл() Экспорт
	//	
	//	ДатаЗапрета = ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400;
	//	МинДата = ТекущаяДата() - 86400 * 30;
	//	
	//	ДатаОбработки = Макс(МинДата, ДатаЗапрета);
	//	
	//	Пока ДатаОбработки <= ТекущаяДата() Цикл
	//		
	//		ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//		ADOСоединение.ConnectionTimeOut = 0;
	//		ADOСоединение.CommandTimeOut    = 0;
	//		ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
	//		ADOСоединение.Open();
	//		
	//		СтрЗапрос =
	//		"SELECT TTSpr._Fld1530 as Id, SUM(VZ_Dannie.Summa) as Summa
	//		|FROM (SELECT 
	//		|	  Ostatki._Fld6477_RTRef as TypeDenCell,
	//		|	  Ostatki._Fld6477_RRRef as DenCell,
	//		|	  Ostatki._Fld6480 as Summa
	//		|  FROM [VV].[dbo].[_AccumRgT6484] as Ostatki (nolock)
	//		|  WHERE Ostatki._Period IN (SELECT MAX(Ostatki._Period) FROM [VV].[dbo].[_AccumRgT6484] as Ostatki (nolock))
	//		|   and Ostatki._Fld6477_RTRef = 0x0000006B
	//		|  
	//		|  UNION ALL
	//		|  
	//		|  SELECT 
	//		|	  Ostatki._Fld6477_RTRef as TypeDenCell,
	//		|	  Ostatki._Fld6477_RRRef as DenCell,
	//		|	  Ostatki._Fld6480 * Case Ostatki._RecordKind WHEN 0 THEN -1 ELSE 1 END as Summa
	//		|  FROM [VV].[dbo].[_AccumRg6476] as Ostatki (nolock)
	//		|  WHERE DATEADD(YEAR, -2000, Ostatki._Period) > '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ostatki._Fld6477_RTRef = 0x0000006B) as VZ_Dannie
	//		|  INNER JOIN [VV].[dbo].[_Reference107] as DenCellSpr (nolock)
	//		|  ON VZ_Dannie.DenCell = DenCellSpr._IDRRef
	//		|  INNER JOIN [VV].[dbo].[_Reference176] as TTSpr (nolock)
	//		|  ON DenCellSpr._OwnerIDRRef = TTSpr._IDRRef
	//		|  
	//		|  Where TTSpr._Fld1530 <> 0
	//		|  
	//		|  GROUP BY TTSpr._Fld1530";
	//		
	//		rs = ADOСоединение.Execute(СтрЗапрос);
	//		
	//		табКонСуммы = Новый ТаблицаЗначений;
	//		табКонСуммы.Колонки.Добавить("ИД"	, Новый ОписаниеТипов("Число"));
	//		табКонСуммы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	//		
	//		Попытка
	//			rs.MoveFirst();
	//			
	//			Пока НЕ rs.EOF() Цикл
	//				СтрокаДоб = табКонСуммы.Добавить();
	//				СтрокаДоб.ИД 	= Rs.Fields("Id").Value;
	//				СтрокаДоб.Сумма = Rs.Fields("Summa").Value;
	//				rs.MoveNext();
	//			КонецЦикла;
	//		Исключение
	//		КонецПопытки;
	//		
	//		ADOСоединение.Close();
	//		
	//		Запрос = Новый Запрос;
	//		Запрос.УстановитьПараметр("Дата"		, НачалоДня(ДатаОбработки));
	//		Запрос.УстановитьПараметр("Таб"			, табКонСуммы);
	//		Запрос.УстановитьПараметр("Фальшивка"	, Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39311"));
	//		Запрос.Текст =
	//		"ВЫБРАТЬ
	//		|	ВЗ_Суммы.ТТ,
	//		|	СУММА(ВЗ_Суммы.СуммаДокумента) КАК СуммаДокумента
	//		|ПОМЕСТИТЬ ВТ_Данные
	//		|ИЗ
	//		|	(ВЫБРАТЬ
	//		|		РасходИзКассы.СтруктурнаяЕдиница КАК ТТ,
	//		|		РасходИзКассы.СуммаДокумента КАК СуммаДокумента
	//		|	ИЗ
	//		|		Документ.РасходИзКассы КАК РасходИзКассы
	//		|	ГДЕ
	//		|		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &Дата
	//		|		И РасходИзКассы.Проведен = ИСТИНА
	//		|		И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
	//		|	
	//		|	ОБЪЕДИНИТЬ ВСЕ
	//		|	
	//		|	ВЫБРАТЬ
	//		|		РасходИзКассы.СтруктурнаяЕдиница,
	//		|		РасходИзКассы.СуммаДокумента
	//		|	ИЗ
	//		|		Документ.РасходИзКассы КАК РасходИзКассы
	//		|	ГДЕ
	//		|		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &Дата
	//		|		И РасходИзКассы.Проведен = ИСТИНА
	//		|		И РасходИзКассы.СубконтоДт2 = &Фальшивка) КАК ВЗ_Суммы
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ВЗ_Суммы.ТТ
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	Таб.ИД,
	//		|	Таб.Сумма
	//		|ПОМЕСТИТЬ ВТ_Астор_Врем
	//		|ИЗ
	//		|	&Таб КАК Таб
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_Астор_Врем.ИД,
	//		|	СУММА(ВТ_Астор_Врем.Сумма) КАК Сумма
	//		|ПОМЕСТИТЬ ВТ_Астор
	//		|ИЗ
	//		|	(ВЫБРАТЬ
	//		|		Таб.ИД КАК ИД,
	//		|		Таб.Сумма КАК Сумма
	//		|	ИЗ
	//		|		ВТ_Астор_Врем КАК Таб
	//		|	
	//		|	ОБЪЕДИНИТЬ ВСЕ
	//		|	
	//		|	ВЫБРАТЬ
	//		|		СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка.id_TT,
	//		|		МАКСИМУМ(СтруктурныеЕдиницыКорректировкаОстаткаАстор.Сумма)
	//		|	ИЗ
	//		|		Справочник.СтруктурныеЕдиницы.КорректировкаОстаткаАстор КАК СтруктурныеЕдиницыКорректировкаОстаткаАстор
	//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//		|				СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка КАК Ссылка,
	//		|				МАКСИМУМ(СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС) КАК ДействуетС
	//		|			ИЗ
	//		|				Справочник.СтруктурныеЕдиницы.КорректировкаОстаткаАстор КАК СтруктурныеЕдиницыКорректировкаОстаткаАстор
	//		|			ГДЕ
	//		|				СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС <= &Дата
	//		|			
	//		|			СГРУППИРОВАТЬ ПО
	//		|				СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка) КАК ВЗ_Макс
	//		|			ПО СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка = ВЗ_Макс.Ссылка
	//		|				И СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС = ВЗ_Макс.ДействуетС
	//		|	
	//		|	СГРУППИРОВАТЬ ПО
	//		|		СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка,
	//		|		СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка.id_TT) КАК ВТ_Астор_Врем
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ВТ_Астор_Врем.ИД
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ЛистУчета.ТорговаяТочка,
	//		|	СУММА(ЛистУчета.СуммаИнкассации) КАК СуммаИнкассации,
	//		|	ЛистУчета.Ссылка КАК ЛистУчета,
	//		|	СУММА(ЛистУчета.КонечныйОстатокПоАстору) КАК КонечныйОстатокПоАстору
	//		|ПОМЕСТИТЬ ВТ_ЛистыУчета
	//		|ИЗ
	//		|	Документ.ЛистУчета КАК ЛистУчета
	//		|ГДЕ
	//		|	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
	//		|	И ЛистУчета.Проведен = ИСТИНА
	//		|	И ЛистУчета.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ЛистУчета.ТорговаяТочка,
	//		|	ЛистУчета.Ссылка
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_ЛистыУчета.ЛистУчета,
	//		|	ВТ_ЛистыУчета.ТорговаяТочка
	//		|ИЗ
	//		|	ВТ_ЛистыУчета КАК ВТ_ЛистыУчета
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
	//		|		ПО ВТ_ЛистыУчета.ТорговаяТочка = ВТ_Данные.ТТ
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Астор КАК ВТ_Астор
	//		|		ПО ВТ_ЛистыУчета.ТорговаяТочка.id_TT = ВТ_Астор.ИД
	//		|ГДЕ
	//		|	(ВТ_ЛистыУчета.СуммаИнкассации <> ЕСТЬNULL(ВТ_Данные.СуммаДокумента, 0)
	//		|			ИЛИ ВТ_ЛистыУчета.КонечныйОстатокПоАстору <> ЕСТЬNULL(ВТ_Астор.Сумма, 0))
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_Данные.ТТ,
	//		|	ВТ_Данные.СуммаДокумента
	//		|ИЗ
	//		|	ВТ_Данные КАК ВТ_Данные
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_Астор.ИД,
	//		|	ВТ_Астор.Сумма
	//		|ИЗ
	//		|	ВТ_Астор КАК ВТ_Астор
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|УНИЧТОЖИТЬ ВТ_ЛистыУчета
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|УНИЧТОЖИТЬ ВТ_Данные
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|УНИЧТОЖИТЬ ВТ_Астор
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|УНИЧТОЖИТЬ ВТ_Астор_Врем";
	//					   
	//		Результаты = Запрос.ВыполнитьПакет();
	//		ТабИнкас = Результаты[5].Выгрузить();
	//		ТабАстор = Результаты[6].Выгрузить();
	//		Выборка = Результаты[4].Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			СтрокаИнкас = ТабИнкас.Найти(Выборка.ТорговаяТочка, "ТТ");
	//			СтрокаАстор = ТабАстор.Найти(Выборка.ТорговаяТочка.id_TT, "ИД");
	//			ЛистОбъект = Выборка.ЛистУчета.ПолучитьОбъект();
	//			ЛистОбъект.СуммаИнкассации 			= ?(СтрокаИнкас = Неопределено, 0, СтрокаИнкас.СуммаДокумента);
	//			ЛистОбъект.КонечныйОстатокПоАстору 	= ?(СтрокаАстор = Неопределено, 0, СтрокаАстор.Сумма);
	//			ЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		КонецЦикла;	
	//		ДатаОбработки = ДатаОбработки + 86400;			   
	//	КонецЦикла;				   
	//	
КонецПроцедуры	

Процедура ПериодическиеЗадания() Экспорт
	
	Перем ТекущаяОбработка;
	
	Если ОбменССайтом.ЭтоКопияБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПЗ = Новый Запрос;
	ЗапросПЗ.УстановитьПараметр("ДатаНач", ТекущаяДата() - 86400 / 4);
	ЗапросПЗ.Текст =
	"ВЫБРАТЬ
	|	ПериодическиеЗадания.Ссылка,
	|	ПериодическиеЗадания.СтрокаАлгоритм,
	//+++shae 2018.10.08 ИП-00019345.01 
	|	ПериодическиеЗадания.ТекстЗапроса,
	|	ПериодическиеЗадания.ПростаяНастройка,
	|	ПериодическиеЗадания.Код,
	|	ПериодическиеЗадания.Наименование,	 
	|	ПериодическиеЗадания.ТекстПисьма,
	|	ПериодическиеЗадания.ОтправлятьСообщениеВсегда,	 
	|	ПериодическиеЗадания.ПолучателиРассылки.*,	 
	|	ПериодическиеЗадания.Параметры.*,	 	
	//---shae 2018.10.08 ИП-00019345.01  	
	|	ПериодическиеЗадания.ХранилищеРасписания,
	|	ЕСТЬNULL(ПериодическиеЗадания_ЖурналСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПосл
	|ИЗ
	|	Справочник.ПериодическиеЗадания КАК ПериодическиеЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодическиеЗадания_Выполняемые КАК ПериодическиеЗадания_Выполняемые
	|		ПО ПериодическиеЗадания.Ссылка = ПериодическиеЗадания_Выполняемые.Задание
	|			И (ПериодическиеЗадания_Выполняемые.ДатаНачала >= &ДатаНач)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодическиеЗадания_Журнал.СрезПоследних КАК ПериодическиеЗадания_ЖурналСрезПоследних
	|		ПО ПериодическиеЗадания.Ссылка = ПериодическиеЗадания_ЖурналСрезПоследних.Задание
	|ГДЕ
	|	ПериодическиеЗадания.НеВыполнять = ЛОЖЬ 	
	|	И ВЫБОР
	|			КОГДА ПериодическиеЗадания.НеВыполнятьЗаданиеЕслиИдетВыполнение
	|				ТОГДА ВЫБОР
	|						КОГДА ПериодическиеЗадания_Выполняемые.Задание ЕСТЬ NULL 
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ПериодическиеЗадания.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаПЗ = ЗапросПЗ.Выполнить().Выбрать();
	Пока ВыборкаПЗ.Следующий() Цикл
		Попытка
			
			ТекущаяОбработка = ВыборкаПЗ.Ссылка;
			Расписание = ВыборкаПЗ.ХранилищеРасписания.Получить();
			
			ЗапросТест = Новый Запрос;
			ЗапросТест.УстановитьПараметр("ДатаНач"	, ТекущаяДата() - 86400 / 4);
			ЗапросТест.УстановитьПараметр("Ссылка"	, ТекущаяОбработка);
			ЗапросТест.Текст =
			"ВЫБРАТЬ
			|	ПериодическиеЗадания.Ссылка,
			|	ЕСТЬNULL(ПериодическиеЗадания_ЖурналСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПосл
			|ИЗ
			|	Справочник.ПериодическиеЗадания КАК ПериодическиеЗадания
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодическиеЗадания_Выполняемые КАК ПериодическиеЗадания_Выполняемые
			|		ПО ПериодическиеЗадания.Ссылка = ПериодическиеЗадания_Выполняемые.Задание
			|			И (ПериодическиеЗадания_Выполняемые.ДатаНачала >= &ДатаНач)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодическиеЗадания_Журнал.СрезПоследних КАК ПериодическиеЗадания_ЖурналСрезПоследних
			|		ПО ПериодическиеЗадания.Ссылка = ПериодическиеЗадания_ЖурналСрезПоследних.Задание
			|ГДЕ
			|	ПериодическиеЗадания.НеВыполнять = ЛОЖЬ
			|	И ВЫБОР
			|			КОГДА ПериодическиеЗадания.НеВыполнятьЗаданиеЕслиИдетВыполнение
			|				ТОГДА ВЫБОР
			|						КОГДА ПериодическиеЗадания_Выполняемые.Задание ЕСТЬ NULL 
			|							ТОГДА ИСТИНА
			|						ИНАЧЕ ЛОЖЬ
			|					КОНЕЦ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	И ПериодическиеЗадания.ПометкаУдаления = ЛОЖЬ
			|	И ПериодическиеЗадания.Ссылка = &Ссылка";
			
			Результат = ЗапросТест.Выполнить();
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаДоп = Результат.Выбрать();
			ВыборкаДоп.Следующий();
			
			
			Если ТипЗнч(Расписание) <> Тип("РасписаниеРегламентногоЗадания")
				ИЛИ ПустаяСтрока(ВыборкаПЗ.СтрокаАлгоритм) И ВыборкаПЗ.ПростаяНастройка = Ложь
				//+++shae 2018.10.08 ИП-00019345.01 
	 	        ИЛИ ПустаяСтрока(ВыборкаПЗ.ТекстЗапроса)И ВыборкаПЗ.ПростаяНастройка
				//---shae 2018.10.08 ИП-00019345.01  				
				ИЛИ НЕ Расписание.ТребуетсяВыполнение(, ВыборкаДоп.ДатаПосл) Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = РегистрыСведений.ПериодическиеЗадания_Выполняемые.СоздатьМенеджерЗаписи();
			Запись.Задание 		= ВыборкаПЗ.Ссылка;
			Запись.ДатаНачала 	= ТекущаяДата();
			Запись.Записать();
			
			//+++shae 2018.10.08 ИП-00019345.01 
			Если ВыборкаПЗ.ПростаяНастройка Тогда 
				ТекущийОбъект = Новый Структура("Код,Наименование,ТекстПисьма,ОтправлятьСообщениеВсегда,ТекстЗапроса",ВыборкаПЗ.Код, ВыборкаПЗ.Наименование, ВыборкаПЗ.ТекстПисьма, ВыборкаПЗ.ОтправлятьСообщениеВсегда, ВыборкаПЗ.ТекстЗапроса);
				Справочники.ПериодическиеЗадания.ВыполнитьПоПростойНастройке(ТекущийОбъект, ВыборкаПЗ.ПолучателиРассылки.Выгрузить(), ВыборкаПЗ.Параметры.Выгрузить());
			Иначе
			//---shae 2018.10.08 ИП-00019345.01 			
				Выполнить(ВыборкаПЗ.СтрокаАлгоритм);
			КонецЕсли;
			
			Набор = РегистрыСведений.ПериодическиеЗадания_Выполняемые.СоздатьНаборЗаписей();
			Набор.Отбор.Задание.Установить(ВыборкаПЗ.Ссылка);
			Набор.Записать();
			
			Запись = РегистрыСведений.ПериодическиеЗадания_Журнал.СоздатьМенеджерЗаписи();
			Запись.Период 		= ТекущаяДата();
			Запись.Задание 		= ВыборкаПЗ.Ссылка;
			Запись.Результат 	= "Выполнено успешно";
			Запись.Записать();
		Исключение
			Набор = РегистрыСведений.ПериодическиеЗадания_Выполняемые.СоздатьНаборЗаписей();
			Набор.Отбор.Задание.Установить(ВыборкаПЗ.Ссылка);
			Набор.Записать();
			Запись = РегистрыСведений.ПериодическиеЗадания_Журнал.СоздатьМенеджерЗаписи();
			Запись.Период 		= ТекущаяДата();
			Запись.Задание 		= ВыборкаПЗ.Ссылка;
			Запись.Результат 	= ОписаниеОшибки();
			Запись.Записать();
		КонецПопытки;	
	КонецЦикла;	
	
КонецПроцедуры


Процедура СформироватьДокументыДоставкаНаСклад() Экспорт
	
	//
	ОбъектОбработки = Обработки.ФормированиеТранспортныхРасходовДоставкаНаСклад.Создать();
	ОбъектОбработки.ДатаСоздания = НачалоДня(ТекущаяДата() - 86400);
	
	Если НЕ НачалоДня(ТекущаяДата() - 86400) < Дата(2016, 12, 1) Тогда
		ОбъектОбработки.ФормироватьМаршрутныеЛисты 		= Истина;
		ОбъектОбработки.ФормироватьТранспортныеРасходы 	= Ложь;
		
		// проверка на существование документов "Маршрутный лист" (доставка на склад) в этот день. Если существуют - удалять совсем.
		МассивСсылок = ОбъектОбработки.ПолучитьСозданныеМаршрутныеЛисты();
		Если МассивСсылок.Количество() > 0 Тогда
			ОбъектОбработки.УдалитьСуществующиеДокументы(МассивСсылок, Ложь); // без вывода сообщений
		КонецЕсли;
		
		// создание новых документов "Маршрутный лист" (доставка на склад)
		ОбъектОбработки.СоздатьДокументы(Ложь, Истина, Ложь); // без вывода сообщений
	Иначе
		ОбъектОбработки.ФормироватьМаршрутныеЛисты 		= Ложь;
		ОбъектОбработки.ФормироватьТранспортныеРасходы 	= Истина;
		
		// проверка на существование документов "Транспортные расходы" в этот день. Если существуют - удалять совсем.
		МассивСсылок = ОбъектОбработки.ПолучитьСозданныеТранспортныеРасходы();
		Если МассивСсылок.Количество() > 0 Тогда
			ОбъектОбработки.УдалитьСуществующиеДокументы(МассивСсылок, Ложь); // без вывода сообщений
		КонецЕсли;
		
		// создание новых документов "Транспортные расходы"
		ОбъектОбработки.СоздатьДокументы(Истина, Ложь, Ложь); // без вывода сообщений
	КонецЕсли;
	
	ОбъектОбработки = Неопределено;
	
КонецПроцедуры

Процедура СформироватьДокументыДоставкиНаТТ() Экспорт
	
	ОбъектОбработки = Обработки.ФормированиеДокументовДоставкиНаТТ.Создать();
	
	//+++АК sole 2018.06.27 ИП-00018321.05
	//Основная поставка
	ОбъектОбработки.ПричинаПеревозки = Перечисления.ПричиныПеревозки.ОсновнаяПоставка;
	ОбъектОбработки.ДатаСоздания = КонецДня(ТекущаяДата()) + 1; // на завтра
	
	СоздатьДокументыДоставкиНаТТ(ОбъектОбработки);
	
	//Дополнительная поставка
	ОбъектОбработки.ПричинаПеревозки = Перечисления.ПричиныПеревозки.ПустаяСсылка();
	ОбъектОбработки.ДатаСоздания = НачалоДня(ТекущаяДата()- 86400);
	
	СоздатьДокументыДоставкиНаТТ(ОбъектОбработки);
	//---АК sole 2018.06.27 ИП-00018321.05
	
КонецПроцедуры

//+++АК sole 2018.06.27 ИП-00018321.05
Процедура СоздатьДокументыДоставкиНаТТ(ОбъектОбработки)
	
	// проверка на существование документов "Рейс" (доставка на ТТ) в этот день. Если существуют - удалять совсем.
	МассивСсылок = ОбъектОбработки.ПолучитьСозданныеДокументы();
	Если МассивСсылок.Количество() > 0 Тогда
		ОбъектОбработки.УдалитьСуществующиеДокументы(МассивСсылок, Ложь); // без вывода сообщений
	КонецЕсли;
	
	// создание новых документов "Рейс" (доставка на ТТ)
	ОбъектОбработки.СоздатьДокументы(Ложь); // без вывода сообщений
	
КонецПроцедуры

//+++АК sole 2018.07.16 ИП-00018320.04
Процедура СформироватьДокументыРейсовВозвратПоставщику() Экспорт
	
	ОбъектОбработки = Обработки.ФормированиеРейсовВозвратПоставщику.Создать();
	ОбъектОбработки.ДатаРейсов = ТекущаяДата();
	
	МассивСсылок = ОбъектОбработки.ПолучитьСозданныеДокументы();
	Если МассивСсылок.Количество() > 0 Тогда
		ОбъектОбработки.УдалитьСуществующиеДокументы(МассивСсылок);
	КонецЕсли;
	
	ОбъектОбработки.СформироватьДокументы();
	
КонецПроцедуры

Процедура ВыгрузкаПодразделенийВЗУП() Экспорт
	
	ОбъектОбработки = Обработки.ВыгрузкаПодразделенийВЗУП.Создать();
	ОбъектОбработки.ВыгрузитьВЗУП();
	ОбъектОбработки.ИмпортПривязкиФизлицКПодразделениям();
	
КонецПроцедуры


Процедура ОповеститьОМинусовыхОстаткахПоСчету02() Экспорт
	
	ОбъектОбработки = Обработки.СозданиеОповещенияОбОтрицательныхОстаткахПоСчету02.Создать();
	ОбъектОбработки.ПослатьОповещение();
	
КонецПроцедуры

Процедура НазначениеРолейПолучателейМОС() Экспорт
	
	Обработки.СообщенияМОС.ОпределитьРольДляСообщенийИзМагазинов();
	
КонецПроцедуры

Процедура ПересчитатьКоличествоВКоробкахПоДням(ДатаНач, ДатаКон) Экспорт
	
	ДатаОбработки = ДатаНач;
	Пока ДатаОбработки <= ДатаКон Цикл
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаОбработки));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&ДатаСреза, ДЕНЬ) КАК День,
		|	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	КоличествоВКоробкеСрезПоследних.Номенклатура КАК Номенклатура,
		|	КоличествоВКоробкеСрезПоследних.Характеристика КАК Характеристика,
		|	КоличествоВКоробкеСрезПоследних.Количество
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ
		|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
		|			&ДатаСреза,
		|			Характеристика В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					КоличествоВКоробке.Характеристика
		|				ИЗ
		|					РегистрСведений.КоличествоВКоробке КАК КоличествоВКоробке
		|				ГДЕ
		|					КоличествоВКоробке.Период >= ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -6))) КАК КоличествоВКоробкеСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	День,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Срез.Количество, 0) КАК Проверка
		|ИЗ
		|	(ВЫБРАТЬ
		|		КоличествоВКоробкеПоДням.День КАК День,
		|		КоличествоВКоробкеПоДням.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|		КоличествоВКоробкеПоДням.Номенклатура КАК Номенклатура,
		|		КоличествоВКоробкеПоДням.Характеристика КАК Характеристика,
		|		КоличествоВКоробкеПоДням.Количество КАК Количество
		|	ИЗ
		|		РегистрСведений.КоличествоВКоробкеПоДням КАК КоличествоВКоробкеПоДням
		|	ГДЕ
		|		КоличествоВКоробкеПоДням.День = НАЧАЛОПЕРИОДА(&ДатаСреза, ДЕНЬ)) КАК КоличествоВКоробкеПоДням
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Срез КАК ВТ_Срез
		|		ПО КоличествоВКоробкеПоДням.День = ВТ_Срез.День
		|			И КоличествоВКоробкеПоДням.СтруктурнаяЕдиница = ВТ_Срез.СтруктурнаяЕдиница
		|			И КоличествоВКоробкеПоДням.Номенклатура = ВТ_Срез.Номенклатура
		|			И КоличествоВКоробкеПоДням.Характеристика = ВТ_Срез.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ВТ_Срез.Количество, 0) <> ЕСТЬNULL(КоличествоВКоробкеПоДням.Количество, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Срез.День,
		|	ВТ_Срез.СтруктурнаяЕдиница,
		|	ВТ_Срез.Номенклатура,
		|	ВТ_Срез.Характеристика,
		|	ВТ_Срез.Количество
		|ИЗ
		|	ВТ_Срез КАК ВТ_Срез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Срез";
		
		Результаты = Запрос.ВыполнитьПакет();
		Если НЕ Результаты[1].Пустой() Тогда
			Набор = РегистрыСведений.КоличествоВКоробкеПоДням.СоздатьНаборЗаписей();
			Набор.Отбор.День.Установить(ДатаОбработки);
			Набор.Загрузить(Результаты[2].Выгрузить());
			Набор.Записать();
		КонецЕсли;	
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
КонецПроцедуры	


Процедура ПересчетКоличестваКоробок() Экспорт
	
	ДатаНач = ДобавитьМесяц(ТекущаяДата(), -3);
	ПересчитатьКоличествоВКоробкахПоДням(ДатаНач, ТекущаяДата() + 86400);
	
КонецПроцедуры

Процедура ПерезагрузитьЛистыУчетаПоРегиструПерезагрузки() Экспорт
	
	ДатаЗапрета = ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400;
	
	ТекДата = НачалоДня(ТекущаяДата() - 86400 * 1);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПерезагружатьСДаты", ТекДата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТорговыеТочкиКПерезагрузкеВЛисты.ПерезагружатьСДаты) КАК ПерезагружатьСДаты
	|ИЗ
	|	РегистрСведений.ТорговыеТочкиКПерезагрузкеВЛисты КАК ТорговыеТочкиКПерезагрузкеВЛисты
	|ГДЕ
	|	ТорговыеТочкиКПерезагрузкеВЛисты.ПерезагружатьСДаты <= &ПерезагружатьСДаты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Если ТипЗнч(Выборка.ПерезагружатьСДаты) <> Тип("Дата") Тогда
			Возврат;
		КонецЕсли;	
		МинДата = НачалоДня(Макс(ДатаЗапрета, Выборка.ПерезагружатьСДаты));
		Пока МинДата <= ТекДата Цикл
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ПерезагружатьСДаты", МинДата);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ТорговаяТочка,
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ТорговаяТочка.id_TT КАК id_TT,
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ТорговаяТочка.НомерТочки КАК НомерТочки,
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки
			|ИЗ
			|	РегистрСведений.ТорговыеТочкиКПерезагрузкеВЛисты КАК ТорговыеТочкиКПерезагрузкеВЛисты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СтруктурныеЕдиницы.Ссылка КАК Ссылка,
			|			СтруктурныеЕдиницы.id_TT КАК id_TT,
			|			СтруктурныеЕдиницы.НомерТочки КАК НомерТочки,
			|			СтруктурныеЕдиницы.ТипРозничнойТочки КАК ТипРозничнойТочки
			|		ИЗ
			|			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|		ГДЕ
			|			СтруктурныеЕдиницы.id_TT > 0
			|			И СтруктурныеЕдиницы.НомерТочки > 0
			|			И СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПустаяСсылка)) КАК ВЗ_ТТ
			|		ПО (ТорговыеТочкиКПерезагрузкеВЛисты.ТорговаяТочка = ВЗ_ТТ.Ссылка
			|				ИЛИ ТорговыеТочкиКПерезагрузкеВЛисты.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
			|ГДЕ
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ПерезагружатьСДаты <= &ПерезагружатьСДаты";
			ТабТочки = Запрос.Выполнить().Выгрузить();
			
			СтрокиТТ = ТабТочки.НайтиСтроки(Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Избенка));
			Если СтрокиТТ.Количество() > 0 Тогда
				Массивid_TT = Новый Массив();
				МассивНомера = Новый Массив();
				Для Каждого СтрокаТ Из СтрокиТТ Цикл
					Массивid_TT.Добавить(СтрокаТ.id_TT);
					МассивНомера.Добавить(СтрокаТ.НомерТочки);
				КонецЦикла;	
				Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам(МинДата, МассивНомера, Массивid_TT);
				//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам_БезЧековПродажи(ДатаОбработки, МассивНомера, Массивid_TT);
			КонецЕсли;
			
			СтрокиТТ = ТабТочки.НайтиСтроки(Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин));
			Если СтрокиТТ.Количество() > 0 Тогда
				Массивid_TT = Новый Массив();
				МассивНомера = Новый Массив();
				Для Каждого СтрокаТ Из СтрокиТТ Цикл
					Массивid_TT.Добавить(СтрокаТ.id_TT);
					МассивНомера.Добавить(СтрокаТ.НомерТочки);
				КонецЦикла;	
				Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл(МинДата, МассивНомера
				, Массивid_TT);
				
				Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл_БезЧековПродажи(МинДата, МассивНомера
				, Массивid_TT);
			КонецЕсли;
			//+++АК BELN 2018.06.05 
			СтрокиТТ = ТабТочки.НайтиСтроки(Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Микромаркет));
			Если СтрокиТТ.Количество() > 0 Тогда
				Массивid_TT = Новый Массив();
				МассивНомера = Новый Массив();
				Для Каждого СтрокаТ Из СтрокиТТ Цикл
					Массивid_TT.Добавить(СтрокаТ.id_TT);
					МассивНомера.Добавить(СтрокаТ.НомерТочки);
				КонецЦикла;	
				Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл(МинДата, МассивНомера
				, Массивid_TT);
				
				Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл_БезЧековПродажи(МинДата, МассивНомера
				, Массивid_TT);
			КонецЕсли;
			//---АК BELN 2018.06.05 
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ПерезагружатьСДаты,
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ТорговаяТочка
			|ИЗ
			|	РегистрСведений.ТорговыеТочкиКПерезагрузкеВЛисты КАК ТорговыеТочкиКПерезагрузкеВЛисты
			|ГДЕ
			|	ТорговыеТочкиКПерезагрузкеВЛисты.ПерезагружатьСДаты <= &ПерезагружатьСДаты";
			
			ВыборкаЗаписи = Запрос.Выполнить().Выбрать();
			Пока ВыборкаЗаписи.Следующий() Цикл
				Запись = РегистрыСведений.ТорговыеТочкиКПерезагрузкеВЛисты.СоздатьМенеджерЗаписи();
				Запись.ПерезагружатьСДаты 	= ВыборкаЗаписи.ПерезагружатьСДаты;
				Запись.ТорговаяТочка 		= ВыборкаЗаписи.ТорговаяТочка;
				Запись.Удалить();
				Если МинДата < ТекДата Тогда
					Запись = РегистрыСведений.ТорговыеТочкиКПерезагрузкеВЛисты.СоздатьМенеджерЗаписи();
					Запись.ПерезагружатьСДаты 	= МинДата + 86400;
					Запись.ТорговаяТочка 		= ВыборкаЗаписи.ТорговаяТочка;
					Запись.Записать();
				КонецЕсли;	
			КонецЦикла;	
			
			МинДата = МинДата + 86400;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗагрузитьИнкассациюПоНовойСистеме() Экспорт
	
	МинДата = НачалоДня(Макс(ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400, ТекущаяДата() - 86400 * 20));
	
	Если МинДата < '20160906' Тогда
		МинДата = '20160906';
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.НомерТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.НомерТочки <> 0";
	
	ТабКешТТ = Запрос.Выполнить().Выгрузить();
	ТабКешТТ.Индексы.Добавить("НомерТочки");
	
	ТабДокументы = Новый ТаблицаЗначений();
	ТабДокументы.Колонки.Добавить("id_doc", Новый ОписаниеТипов("Строка"));
	ТабДокументы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РасходИзКассы"));
	ТабДокументы.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДокументы.Колонки.Добавить("НомерСумки", Новый ОписаниеТипов("Строка"));
	ТабДокументы.Колонки.Добавить("Банк", Новый ОписаниеТипов("Строка"));
	ТабДокументы.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабДокументы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТабДокументы.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТабДокументы.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса =	"SELECT CAST(CM.id_doc as nvarchar(36)) as id_doc, CM.Cash_sum, CM.Confirm_type, CM.closedate, ISNULL(CM.N_inkass, '') as N_inkass, ISNULL(CM.Bank_inkass, '') as Bank_inkass, CM.Descr, CM.ShopNo_rep
	|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
	|WHERE CM.operation_type = 3
	|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(МинДата);
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаКешТТ = ТабКешТТ.Найти(rs.Fields("ShopNo_rep").Value, "НомерТочки");
			Если СтрокаКешТТ <> Неопределено Тогда
				СтрокаДоб = ТабДокументы.Добавить();
				СтрокаДоб.id_doc 	= rs.Fields("id_doc").Value;
				СтрокаДоб.Дата 		= НачалоДня(rs.Fields("closedate").Value);
				СтрокаДоб.Магазин 		= СтрокаКешТТ.Ссылка;
				СтрокаДоб.Ссылка 	= Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДоб.id_doc));
				Если Найти(СтрокаДоб.Ссылка, "не найден") > 0 Тогда
					СтрокаДоб.Ссылка 	= Неопределено;
				КонецЕсли;	
				СтрокаДоб.Сумма 		= rs.Fields("Cash_sum").Value;
				СтрокаДоб.Проведен 		= rs.Fields("Confirm_type").Value > 0;
				СтрокаДоб.ПометкаУдаления 	= Ложь;
				Если Найти(rs.Fields("Descr").Value, "Отменен операцией") > 0 Тогда
					СтрокаДоб.Проведен 	= Ложь;
					СтрокаДоб.ПометкаУдаления 	= Истина;
				КонецЕсли;	
				СтрокаДоб.НомерСумки 	= rs.Fields("N_inkass").Value;
				СтрокаДоб.Банк 			= СокрЛП(rs.Fields("Bank_inkass").Value);
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабДокументы);
	Запрос.УстановитьПараметр("Дата", НачалоДня(МинДата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Id_doc,
	               |	Таб.Дата,
	               |	Таб.Магазин,
	               |	Таб.Ссылка,
	               |	Таб.НомерСумки,
	               |	Таб.Банк,
	               |	Таб.Сумма,
	               |	Таб.Проведен,
	               |	Таб.ПометкаУдаления
	               |ПОМЕСТИТЬ ВТ_Документы
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасходИзКассы.Ссылка,
	               |	РасходИзКассы.Проведен,
	               |	РасходИзКассы.ПометкаУдаления,
	               |	РасходИзКассы.СуммаДокумента КАК Сумма,
	               |	РасходИзКассы.СтруктурнаяЕдиница КАК Магазин,
	               |	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК Дата
	               |ПОМЕСТИТЬ ВТ_Фин
	               |ИЗ
	               |	Документ.РасходИзКассы КАК РасходИзКассы
	               |ГДЕ
	               |	РасходИзКассы.Дата >= &Дата
	               |	И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
	               |	И РасходИзКассы.СтруктурнаяЕдиница.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_Документы.Ссылка, ЗНАЧЕНИЕ(Документ.РасходИзКассы.ПустаяСсылка)) КАК ДокументВСкл,
	               |	ЕСТЬNULL(ВТ_Фин.Ссылка, ЗНАЧЕНИЕ(Документ.РасходИзКассы.ПустаяСсылка)) КАК ДокументВФинансах,
	               |	ВТ_Документы.Дата,
	               |	ВТ_Документы.Магазин,
	               |	ВТ_Документы.НомерСумки,
	               |	ВТ_Документы.Банк,
	               |	ВТ_Документы.Сумма,
	               |	ВТ_Документы.Проведен,
	               |	ВТ_Документы.ПометкаУдаления,
	               |	ВТ_Фин.ПометкаУдаления КАК ПометкаУдаленияФин,
	               |	ВТ_Документы.Id_doc,
	               |	СтруктурныеЕдиницы.ИнкассируемыйБанк,
	               |	СтруктурныеЕдиницы.НомерПТК,
	               |	СтруктурныеЕдиницы.КонтрагентИнкассатор
	               |ИЗ
	               |	ВТ_Документы КАК ВТ_Документы
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Фин КАК ВТ_Фин
	               |		ПО ВТ_Документы.Ссылка = ВТ_Фин.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ПО ВТ_Документы.Магазин = СтруктурныеЕдиницы.Ссылка
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_Документы.Магазин, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Фин.Магазин, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_Документы.Сумма, 0) <> ЕСТЬNULL(ВТ_Фин.Сумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_Документы.Проведен, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Фин.Проведен, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_Документы.ПометкаУдаления, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Фин.ПометкаУдаления, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_Документы.Дата, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Фин.Дата, ДАТАВРЕМЯ(1, 1, 1)))";
	
	Орг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДокументВФинансах)
			И НЕ ЗначениеЗаполнено(Выборка.ДокументВСкл) Тогда
			Если НЕ Выборка.ПометкаУдаленияФин Тогда
				ДокОбъект = Выборка.ДокументВФинансах.ПолучитьОбъект();
				ДокОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Выборка.ДокументВФинансах) Тогда
			ДокОбъект = Документы.РасходИзКассы.СоздатьДокумент();
			ДокОбъект.УстановитьСсылкуНового(Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.id_doc)));
			ДокОбъект.Организация = Орг;
			ДокОбъект.Дата = Выборка.Дата;
			ДокОбъект.УстановитьНовыйНомер("0");
			ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация;
			ДокОбъект.СтруктурнаяЕдиница = Выборка.Магазин;
			ДокОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010");
			ДокОбъект.Основание = "Сдача наличных денежных средств в банк";
			
			//+++АК LAGP 2018.06.30 ИП-00018925 Подтягивать контрагента в РКО из стр. единицы магазина
			//ДокОбъект.Выдать = Выборка.Банк;
			ДокОбъект.Выдать = Выборка.ИнкассируемыйБанк;
			//---АК LAGP
			
			Если ДокОбъект.Выдать = "Самоинкассация" Тогда
				//ДокОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Т0002607"); //МКБ
				ДокОбъект.НомерПТК = Выборка.НомерПТК;
			Иначе
				ДокОбъект.НомерСумки = Выборка.НомерСумки;
			КонецЕсли;
			//+++АК MIND 2017.12.25 контрагерта инкассции теперь можно указать в структурной единице
			
			//+++АК LAGP 2018.07.24 б/н В структурной единице разделили на "Контрагент размен" и "Контрагент инкассатор"
			//ДокОбъект.Контрагент = Выборка.ИнкассируемыйБанк;
			ДокОбъект.Контрагент = ?(ЗначениеЗаполнено(Выборка.КонтрагентИнкассатор), Выборка.КонтрагентИнкассатор, Выборка.ИнкассируемыйБанк);
			//---АК LAGP
			
			ДокОбъект.Приложение = "Квитанция к сумке № " + Выборка.НомерСумки;
			ДокОбъект.Комментарий = "Загружено из SQL";
			ДокОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			ДокОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПереводыВПути;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда
				ДокОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;	
		Иначе
			ДокОбъект = Выборка.ДокументВФинансах.ПолучитьОбъект();
			ДокОбъект.Дата = Выборка.Дата;
		КонецЕсли;	
		ДокОбъект.СуммаДокумента = Выборка.Сумма;
		ДокОбъект.СтатьяДвиженияДенежныхСредствБУ = ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ДокОбъект.СтатьяДвиженияДенежныхСредств,ДокОбъект.ВидОперации);
		ДокОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
		ДокОбъект.Проведен = Выборка.Проведен;
		Если ДокОбъект.ЭтоНовый() Тогда
			ДокОбъект.Записать(?(ДокОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Иначе
			ДокОбъект.Записать(?(ДокОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьИнкассациюПоНовойСистеме_() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки,
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ДатаЗапускаНовойСистемыУчета <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СтруктурныеЕдиницы.НомерТочки <> 0 И СтруктурныеЕдиницы.НомерТочки <> 999";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МинДата = Мин(ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400, ТекущаяДата() - 86400 * 10);
	Орг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	Пока Выборка.Следующий() Цикл
		ТабДокументы = Новый ТаблицаЗначений();
		ТабДокументы.Колонки.Добавить("id_doc");
		ТабДокументы.Колонки.Добавить("Ссылка");
		ТабДокументы.Колонки.Добавить("НомерСумки");
		ТабДокументы.Колонки.Добавить("Банк");
		ТабДокументы.Колонки.Добавить("Дата");
		ТабДокументы.Колонки.Добавить("Сумма");
		ТабДокументы.Колонки.Добавить("Проведен");
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		СтрокаЗапроса =
		"SELECT CAST(CM.id_doc as nvarchar(36)) as id_doc, CM.Cash_sum, CM.Confirm_type, CM.closedate, ISNULL(CM.N_inkass, '') as N_inkass, ISNULL(CM.Bank_inkass, '') as Bank_inkass, CM.Descr
		|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
		|WHERE CM.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Выборка.НомерТочки) + " and CM.operation_type = 3
		|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(МинДата);
		
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабДокументы.Добавить();
				СтрокаДоб.id_doc 	= rs.Fields("id_doc").Value;
				СтрокаДоб.Дата 		= rs.Fields("closedate").Value;
				СтрокаДоб.Ссылка 	= Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДоб.id_doc));
				Если Найти(СтрокаДоб.Ссылка, "не найден") > 0 Тогда
					СтрокаДоб.Ссылка 	= Неопределено;
				КонецЕсли;	
				СтрокаДоб.Сумма 		= rs.Fields("Cash_sum").Value;
				СтрокаДоб.Проведен 		= rs.Fields("Confirm_type").Value > 0;
				Если Найти(rs.Fields("Descr").Value, "Отменен операцией") > 0 Тогда
					СтрокаДоб.Проведен 	= Ложь;
				КонецЕсли;	
				СтрокаДоб.НомерСумки 	= rs.Fields("N_inkass").Value;
				СтрокаДоб.Банк 			= rs.Fields("Bank_inkass").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		Для Каждого СтрокаТаб Из ТабДокументы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.Ссылка) Тогда
				ДокОбъект = Документы.РасходИзКассы.СоздатьДокумент();
				ДокОбъект.УстановитьСсылкуНового(Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.id_doc)));
				ДокОбъект.Организация = Орг;
				ДокОбъект.Дата = СтрокаТаб.Дата;
				ДокОбъект.УстановитьНовыйНомер(Орг.Префикс);
				ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация;
				ДокОбъект.СтруктурнаяЕдиница = Выборка.Ссылка;
				ДокОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010");
				ДокОбъект.Основание = "Сдача наличных денежных средств в банк";
				ДокОбъект.Выдать = СтрокаТаб.Банк;
				ДокОбъект.Приложение = "Квитанция к сумке № " + СтрокаТаб.НомерСумки;
				ДокОбъект.Комментарий = "Загружено из SQL";
				ДокОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
				ДокОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПереводыВПути;
				ДокОбъект.НомерСумки = СтрокаТаб.НомерСумки;
			Иначе
				Если СтрокаТаб.Ссылка.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;	
				Если СтрокаТаб.Сумма = СтрокаТаб.Ссылка.СуммаДокумента Тогда
					Продолжить;
				КонецЕсли;	
				ДокОбъект = СтрокаТаб.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			//+++АК SHEP 20160810 ИП-00013284: чтобы не устанавливался в БП флаг модифицированности в РКО
			Если ДокОбъект.Контрагент = Неопределено Тогда
				ДокОбъект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			КонецЕсли;
			//---АК SHEP 20160810
			ДокОбъект.СуммаДокумента = СтрокаТаб.Сумма;
			ДокОбъект.СтатьяДвиженияДенежныхСредствБУ=ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ДокОбъект.СтатьяДвиженияДенежныхСредств,ДокОбъект.ВидОперации);
			Если ДокОбъект.ЭтоНовый() Тогда
				ДокОбъект.Записать(?(СтрокаТаб.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Иначе
				ДокОбъект.Записать(?(СтрокаТаб.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
			КонецЕсли;	
			
		КонецЦикла;	
		
		ADOСоединение.Close();
	КонецЦикла;	
	
КонецПроцедуры


Процедура ЗагрузитьВозвратыПоНовойСистеме() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки,
	|	СтруктурныеЕдиницы.Ссылка,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	СтруктурныеЕдиницы.ДатаЗапускаНовойСистемыУчета <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СтруктурныеЕдиницы.НомерТочки <> 0
	|	И СтруктурныеЕдиницы.НомерТочки <> 999";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МинДата = НачалоДня(Макс(ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400, ТекущаяДата() - 86400 * 20));
	Орг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	Пока Выборка.Следующий() Цикл
		ТабДокументы = Новый ТаблицаЗначений();
		ТабДокументы.Колонки.Добавить("id_doc");
		ТабДокументы.Колонки.Добавить("Ссылка");
		ТабДокументы.Колонки.Добавить("Дата");
		ТабДокументы.Колонки.Добавить("ДатаНачалоДня");
		ТабДокументы.Колонки.Добавить("Сумма");
		ТабДокументы.Колонки.Добавить("Проведен");
		//+++АК SaMi 2018.07.17 ИП-00019214 
		ТабДокументы.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Массив"));
		//---АК SaMi  2018.07.17 
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		//+++АК SaMi 2018.07.17 ИП-00019214 
		//СтрокаЗапроса =
		//"SELECT CAST(CM.id_doc as nvarchar(36)) as id_doc, CM.Cash_sum, CM.Confirm_type, CM.closedate
		//|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
		//|WHERE CM.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Выборка.НомерТочки) + " and CM.operation_type = 201
		//|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(МинДата);
		
		СтрокаЗапроса =
		"SELECT CAST(CM.id_doc as nvarchar(36)) as id_doc, CM.Cash_sum, CM.Confirm_type, CM.closedate,TD_move.id_tov
		|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
		|LEFT JOIN SMS_REPL.dbo.TD_move (nolock) ON TD_move.N_int = CM.CashCheckNo and TD_move.ShopNo_rep = CM.ShopNo_rep and CONVERT(date, TD_move.closedate) = CONVERT(date, CM.closedate)
		|WHERE CM.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Выборка.НомерТочки) + " and CM.operation_type = 201
		|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(МинДата) + "
		|ORDER BY	CM.id_doc";
		//---АК SaMi  2018.07.17 
		
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		
		Текущий_id_doc = Неопределено;
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				Если Текущий_id_doc <> rs.Fields("id_doc").Value Тогда
					СтрокаДоб = ТабДокументы.Добавить();
					СтрокаДоб.id_doc 		= rs.Fields("id_doc").Value;
					СтрокаДоб.Дата 			= rs.Fields("closedate").Value;
					СтрокаДоб.ДатаНачалоДня = НачалоДня(СтрокаДоб.Дата);
					СтрокаДоб.Ссылка 		= Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДоб.id_doc));
					Если Найти(СтрокаДоб.Ссылка, "не найден") > 0 Тогда
						СтрокаДоб.Ссылка 	= Неопределено;
					КонецЕсли;	
					СтрокаДоб.Сумма 		= rs.Fields("Cash_sum").Value;
					СтрокаДоб.Проведен 		= rs.Fields("Confirm_type").Value > 0;
					
					Текущий_id_doc = rs.Fields("id_doc").Value; 
				КонецЕсли; 
				
				СтрокаДоб.id_tov.Добавить(rs.Fields("id_tov").Value);
			
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		//+++АК SaMi 2018.07.17 ИП-00019214 
		//СтрокаЗапроса =
		//"SELECT CAST(CM.id_doc as nvarchar(36)) as id_doc, CM.Cash_sum, CM.Confirm_type, CM.closedate
		//|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
		//|WHERE CM.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Выборка.НомерТочки) + " and CM.operation_type = 211
		//|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(МинДата) + " and CM.Confirm_type > 0";
		
		СтрокаЗапроса =
		"SELECT CAST(CM.id_doc as nvarchar(36)) as id_doc, CM.Cash_sum, CM.Confirm_type, CM.closedate, MAX(TD_move.id_tov) id_tov	
		|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
		|LEFT JOIN SMS_REPL.dbo.TD_move (nolock) ON TD_move.N_int = CM.CashCheckNo and TD_move.ShopNo_rep = CM.ShopNo_rep and CONVERT(date, TD_move.closedate) = CONVERT(date, CM.closedate)		
		|WHERE CM.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Выборка.НомерТочки) + " and CM.operation_type = 211
		|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(МинДата) + " and CM.Confirm_type > 0
		|GROUP BY CM.id_doc, CM.Cash_sum, CM.Confirm_type, CM.closedate";
		//---АК SaMi  2018.07.17 
		
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаВозвратаНайдена = Ложь;
				
				СтрокиНаСумму = ТабДокументы.НайтиСтроки(Новый Структура("Сумма, Проведен, ДатаНачалоДня", rs.Fields("Cash_sum").Value, Истина, НачалоДня(rs.Fields("closedate").Value)));
				
				Для Каждого СтрокаНаСумму ИЗ СтрокиНаСумму Цикл
					Если СтрокаНаСумму.id_tov.Найти(rs.Fields("id_tov").Value) <> Неопределено Тогда
						СтрокаНаСумму.Сумма = 0;
						СтрокаВозвратаНайдена = Истина;						
						Прервать;
					КонецЕсли;
				КонецЦикла;  
				
				Если СтрокаВозвратаНайдена Тогда
					rs.MoveNext();
					Продолжить;
				КонецЕсли; 
				
				СтрокиДоки = ТабДокументы.НайтиСтроки(Новый Структура("Проведен, ДатаНачалоДня", Истина, НачалоДня(rs.Fields("closedate").Value)));
				СуммаДляРазложения = rs.Fields("Cash_sum").Value;
				Для Каждого СтрокаРазл Из СтрокиДоки Цикл
					Если СтрокаРазл.id_tov.Найти(rs.Fields("id_tov").Value) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если СуммаДляРазложения <= 0 Тогда
						Прервать;
					КонецЕсли;
					МинСумма = Мин(СуммаДляРазложения, СтрокаРазл.Сумма);
					Если МинСумма <= 0 Тогда
						Продолжить;
					КонецЕсли;
					СтрокаРазл.Сумма = СтрокаРазл.Сумма - МинСумма;
					СуммаДляРазложения = СуммаДляРазложения - МинСумма;
				КонецЦикла;	
				
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		Для Каждого СтрокаТаб Из ТабДокументы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.Ссылка) Тогда
				ДокОбъект = Документы.РасходИзКассы.СоздатьДокумент();
				ДокОбъект.УстановитьСсылкуНового(Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.id_doc)));
				ДокОбъект.Организация = Орг;
				ДокОбъект.ЦФО = Выборка.ЦФО;
				ДокОбъект.Дата = СтрокаТаб.Дата;
				ДокОбъект.УстановитьНовыйНомер(Орг.Префикс);
				ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
				ДокОбъект.СтруктурнаяЕдиница = Выборка.Ссылка;
				ДокОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110102");
				//ДокОбъект.Основание = "Сдача наличных денежных средств в банк";
				//ДокОбъект.Выдать = СтрокаТаб.Банк;
				//ДокОбъект.Приложение = "Квитанция к сумке № " + СтрокаТаб.НомерСумки;
				ДокОбъект.Комментарий = "Загружено из SQL";
				ДокОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
				ДокОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
				ДокОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				ДокОбъект.СчетУчетаРасчетовПоАвансамБУ = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
				ДокОбъект.СубконтоДт1 = Выборка.Ссылка;
				ДокОбъект.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
				ДокОбъект.СубконтоДт3 = Выборка.ЦФО;
				ДокОбъект.НомерВАсторе = СтрокаТаб.id_doc;
			Иначе
				Если СтрокаТаб.Ссылка.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаТаб.Сумма = СтрокаТаб.Ссылка.СуммаДокумента И СтрокаТаб.Проведен = СтрокаТаб.Ссылка.Проведен Тогда
					Продолжить;
				КонецЕсли;	
				ДокОбъект = СтрокаТаб.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			//+++АК SHEP 20160810 ИП-00013284: чтобы не устанавливался в БП флаг модифицированности в РКО
			Если ДокОбъект.Контрагент = Неопределено Тогда
				ДокОбъект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			КонецЕсли;
			//---АК SHEP 20160810
			ДокОбъект.СуммаДокумента = СтрокаТаб.Сумма;
			ДокОбъект.СтатьяДвиженияДенежныхСредствБУ =
			ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ДокОбъект.СтатьяДвиженияДенежныхСредств, ДокОбъект.ВидОперации);
			Если ДокОбъект.ЭтоНовый() Тогда
				ДокОбъект.Записать(?(СтрокаТаб.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Иначе
				ДокОбъект.Записать(?(СтрокаТаб.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
			КонецЕсли;	
			
		КонецЦикла;	
		
		ADOСоединение.Close();
	КонецЦикла;	
	
КонецПроцедуры


Процедура _ВыгрузитьДебиторскуюЗадолженностьНаSQL() Экспорт
	
	ЭтоКопияБазы = ОбщегоНазначения.ЭтоКопияБазы();
	Если ЭтоКопияБазы Тогда
		Возврат;
	КонецЕсли;	
	//
	ТекДата = ТекущаяДатаСеанса();
	
	МассивКонтрагентовИскл = Новый Массив;
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000561")); // Вкусвилл
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000155")); // Луг да поле
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000170")); // Молочный проект
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000187")); // Проект Избенка
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000171")); // Сельские продукты
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000168")); // Экоферма
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"	, ТекДата);
	Запрос.УстановитьПараметр("НачалоПредМес"	, НачалоМесяца(НачалоМесяца(ТекДата)-1));
	Запрос.УстановитьПараметр("МассивКонтрИскл"	, МассивКонтрагентовИскл);
	Запрос.УстановитьПараметр("ИнициаторКлимчук", Справочники.ФизическиеЛица.НайтиПоНаименованию("Климчук Анатолий Алексеевич"));
	
	МассивВидыСубконто = Новый Массив;
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Организации);
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	
	Запрос.УстановитьПараметр("ВидыСубконто1",МассивВидыСубконто);
	
	МассивСчетаАренды = Новый Массив;
	МассивСчетаАренды.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	МассивСчетаАренды.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
	
	Запрос.УстановитьПараметр("СчетаАренды",МассивСчетаАренды);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Таблица.Счет КАК Счет,
	|	ВЫРАЗИТЬ(Таблица.Субконто1 КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(Таблица.Субконто2 КАК Справочник.Контрагенты) КАК Контрагент,
	|	Таблица.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ЕСТЬNULL(Лимиты_Организация_Контрагент.Сумма, 0) КАК Лимит_Организация_Контрагент
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&Период {(&Период)},
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПокупателями), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами)),
	|			&ВидыСубконто1,
	|			НЕ Субконто2 В ИЕРАРХИИ
	|					(ВЫБРАТЬ
	|						Таблица.Ссылка
	|					ИЗ
	|						Справочник.Контрагенты КАК Таблица
	|					ГДЕ
	|						Таблица.Код = ""000000518"") {(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации)).* КАК Организация, (ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты)).* КАК Контрагент}) КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ЛимитыДебиторскойЗадолженности.СрезПервых(&Период {(&Период)}, ) КАК Лимиты_Организация_Контрагент
	|		ПО Таблица.Счет = Лимиты_Организация_Контрагент.РазделУчета
	|			И Таблица.Субконто1 = Лимиты_Организация_Контрагент.Организация
	|			И Таблица.Субконто2 = Лимиты_Организация_Контрагент.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Организация,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбороты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТЗ_НенужныеРегистраторы
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(
	|			ДАТАВРЕМЯ(2015, 12, 31),
	|			ДАТАВРЕМЯ(2017, 1, 1) {(&Период)},
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПокупателями), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами)),
	|			&ВидыСубконто1,
	|			Субконто1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_Остатки.Организация
	|					ИЗ
	|						ВТ_Остатки)
	|				И Субконто2 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_Остатки.Контрагент
	|					ИЗ
	|						ВТ_Остатки) {(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации)).* КАК Организация, (ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты)).* КАК Контрагент},
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Вспомогательный),
	|			) КАК ТаблицаОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Счет КАК Счет,
	|	ВТ_Остатки.Организация КАК Субконто1,
	|	ВТ_Остатки.Контрагент КАК Субконто2,
	|	ВТ_Остатки.СуммаОстатокДт,
	|	ВТ_Остатки.Лимит_Организация_Контрагент КАК СуммаЛимит_Организация_Контрагент,
	|	ТаблицаОбороты.Период КАК Период,
	|	ТаблицаОбороты.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТаблицаОбороты.Регистратор = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаОбороты.СуммаКонечныйОстатокДт
	|		ИНАЧЕ ТаблицаОбороты.СуммаОборотДт
	|	КОНЕЦ КАК СуммаОборотДт,
	|	ТаблицаОбороты.СуммаНачальныйОстаток,
	|	ТаблицаОбороты.СуммаНачальныйОстатокДт,
	|	ТаблицаОбороты.СуммаНачальныйОстатокКт,
	|	ТаблицаОбороты.СуммаКонечныйОстаток,
	|	ТаблицаОбороты.СуммаКонечныйОстатокДт,
	|	ТаблицаОбороты.СуммаКонечныйОстатокКт
	|ПОМЕСТИТЬ ТЗ_ОстаткиИОбороты
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(ДАТАВРЕМЯ(2014, 1, 1), &Период {(&Период)}, Регистратор, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПокупателями), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами)), &ВидыСубконто1, {(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации)).* КАК Организация, (ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты)).* КАК Контрагент}) КАК ТаблицаОбороты
	|		ПО ВТ_Остатки.Счет = ТаблицаОбороты.Счет
	|			И ВТ_Остатки.Организация = ТаблицаОбороты.Субконто1
	|			И ВТ_Остатки.Контрагент = ТаблицаОбороты.Субконто2
	|			И (НЕ ТаблицаОбороты.Регистратор ССЫЛКА Документ.ЛистУчета)
	|			И (НЕ(ТаблицаОбороты.Период = &Период
	|					И ТаблицаОбороты.Регистратор = НЕОПРЕДЕЛЕНО))
	|			И (НЕ ТаблицаОбороты.Регистратор В
	|					(ВЫБРАТЬ
	|						ТЗ_НенужныеРегистраторы.Регистратор
	|					ИЗ
	|						ТЗ_НенужныеРегистраторы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Счет,
	|	Субконто1,
	|	Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТЗ_ОстаткиИОбороты.Период) КАК Период,
	|	ТЗ_ОстаткиИОбороты.Счет КАК Счет,
	|	ТЗ_ОстаткиИОбороты.Субконто1 КАК Организация,
	|	ТЗ_ОстаткиИОбороты.Субконто2 КАК Контрагент
	|ПОМЕСТИТЬ ТЗ_Периоды
	|ИЗ
	|	ТЗ_ОстаткиИОбороты КАК ТЗ_ОстаткиИОбороты
	|ГДЕ
	|	(ТЗ_ОстаткиИОбороты.СуммаНачальныйОстаток = 0
	|			ИЛИ ТЗ_ОстаткиИОбороты.СуммаКонечныйОстаток = 0
	|			ИЛИ ТЗ_ОстаткиИОбороты.СуммаНачальныйОстаток = ТЗ_ОстаткиИОбороты.СуммаКонечныйОстаток)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ_ОстаткиИОбороты.Счет,
	|	ТЗ_ОстаткиИОбороты.Субконто1,
	|	ТЗ_ОстаткиИОбороты.Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_Периоды.Счет КАК Счет,
	|	ТЗ_Периоды.Организация КАК Организация,
	|	ТЗ_Периоды.Контрагент КАК Контрагент,
	|	Таблица_ТекущийДокумент.СуммаОстатокДт,
	|	Таблица_ТекущийДокумент.СуммаЛимит_Организация_Контрагент,
	|	Таблица_ТекущийДокумент.Период,
	|	Таблица_ТекущийДокумент.Регистратор КАК Документ,
	|	Таблица_ТекущийДокумент.Регистратор.ЗаявкаНаРасходованиеСредств КАК Заявка,
	|	Таблица_ТекущийДокумент.Регистратор.СубконтоДт3 КАК ТорговаяТочка,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	Таблица_ТекущийДокумент.СуммаОборотДт КАК СуммаДокумента,
	|	Таблица_ТекущийДокумент.СуммаОборотДт КАК СуммаОборотДт,
	|	СУММА(ЕСТЬNULL(Таблица_ПромежуточныеОбороты.СуммаОборотДт, 0)) КАК СуммаДокументаПромежуточная,
	|	ВЫБОР
	|		КОГДА Таблица_ТекущийДокумент.СуммаОстатокДт - СУММА(ЕСТЬNULL(Таблица_ПромежуточныеОбороты.СуммаОборотДт, 0)) < 0
	|			ТОГДА 0
	|		КОГДА Таблица_ТекущийДокумент.СуммаОстатокДт - СУММА(ЕСТЬNULL(Таблица_ПромежуточныеОбороты.СуммаОборотДт, 0)) >= Таблица_ТекущийДокумент.СуммаОборотДт
	|			ТОГДА Таблица_ТекущийДокумент.СуммаОборотДт
	|		ИНАЧЕ Таблица_ТекущийДокумент.СуммаОстатокДт - СУММА(ЕСТЬNULL(Таблица_ПромежуточныеОбороты.СуммаОборотДт, 0))
	|	КОНЕЦ КАК СуммаДЗ
	|ПОМЕСТИТЬ ТЗ_ДебиторскаяЗадолженность
	|ИЗ
	|	ТЗ_Периоды КАК ТЗ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_ОстаткиИОбороты КАК Таблица_ТекущийДокумент
	|		ПО ТЗ_Периоды.Счет = Таблица_ТекущийДокумент.Счет
	|			И ТЗ_Периоды.Организация = Таблица_ТекущийДокумент.Субконто1
	|			И ТЗ_Периоды.Контрагент = Таблица_ТекущийДокумент.Субконто2
	|			И ТЗ_Периоды.Период <= Таблица_ТекущийДокумент.Период
	|			И (Таблица_ТекущийДокумент.СуммаОборотДт > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ОстаткиИОбороты КАК Таблица_ПромежуточныеОбороты
	|		ПО ТЗ_Периоды.Счет = Таблица_ПромежуточныеОбороты.Счет
	|			И ТЗ_Периоды.Организация = Таблица_ПромежуточныеОбороты.Субконто1
	|			И ТЗ_Периоды.Контрагент = Таблица_ПромежуточныеОбороты.Субконто2
	|			И ТЗ_Периоды.Период <= Таблица_ПромежуточныеОбороты.Период
	|			И (Таблица_ПромежуточныеОбороты.СуммаОборотДт > 0)
	|			И (ВЫБОР
	|				КОГДА Таблица_ТекущийДокумент.Период <> Таблица_ПромежуточныеОбороты.Период
	|					ТОГДА Таблица_ТекущийДокумент.Период < Таблица_ПромежуточныеОбороты.Период
	|				ИНАЧЕ Таблица_ТекущийДокумент.Регистратор < Таблица_ПромежуточныеОбороты.Регистратор
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ_Периоды.Счет,
	|	ТЗ_Периоды.Организация,
	|	ТЗ_Периоды.Контрагент,
	|	Таблица_ТекущийДокумент.СуммаОстатокДт,
	|	Таблица_ТекущийДокумент.Период,
	|	Таблица_ТекущийДокумент.Регистратор,
	|	Таблица_ТекущийДокумент.СуммаОборотДт,
	|	Таблица_ТекущийДокумент.СуммаЛимит_Организация_Контрагент,
	|	Таблица_ТекущийДокумент.Регистратор.ЗаявкаНаРасходованиеСредств,
	|	Таблица_ТекущийДокумент.Регистратор.СубконтоДт3,
	|	Таблица_ТекущийДокумент.СуммаОборотДт
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА Таблица_ТекущийДокумент.СуммаОстатокДт - СУММА(ЕСТЬNULL(Таблица_ПромежуточныеОбороты.СуммаОборотДт, 0)) < 0
	|			ТОГДА 0
	|		КОГДА Таблица_ТекущийДокумент.СуммаОстатокДт - СУММА(ЕСТЬNULL(Таблица_ПромежуточныеОбороты.СуммаОборотДт, 0)) >= Таблица_ТекущийДокумент.СуммаОборотДт
	|			ТОГДА Таблица_ТекущийДокумент.СуммаОборотДт
	|		ИНАЧЕ Таблица_ТекущийДокумент.СуммаОстатокДт - СУММА(ЕСТЬNULL(Таблица_ПромежуточныеОбороты.СуммаОборотДт, 0))
	|	КОНЕЦ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗ_НенужныеРегистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗ_ОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗ_Периоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Счет,
	|	Таблица.Организация,
	|	Таблица.Контрагент,
	|	Таблица.СуммаЛимит_Организация_Контрагент,
	|	Таблица.Период,
	|	Таблица.Документ,
	|	Таблица.Заявка,
	|	Таблица.ТорговаяТочка,
	|	Таблица.СуммаДокумента,
	|	Таблица.СуммаДЗ,
	|	Таблица.ДатаПогашения,
	|	ВЫБОР
	|		КОГДА Таблица.ДатаПогашения >= Таблица.Период
	|				И Таблица.ДатаПогашения <= &Период
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакПросрочено
	|ПОМЕСТИТЬ ТЗ_ДЗ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Счет КАК Счет,
	|		Таблица.Организация КАК Организация,
	|		Таблица.Контрагент КАК Контрагент,
	|		Таблица.СуммаЛимит_Организация_Контрагент КАК СуммаЛимит_Организация_Контрагент,
	|		Таблица.Период КАК Период,
	|		Таблица.Документ КАК Документ,
	|		Таблица.Заявка КАК Заявка,
	|		Таблица.ТорговаяТочка КАК ТорговаяТочка,
	|		Таблица.СуммаДокумента КАК СуммаДокумента,
	|		Таблица.СуммаДЗ КАК СуммаДЗ,
	|		ВЫБОР
	|			КОГДА Таблица.Документ = НЕОПРЕДЕЛЕНО
	|				ТОГДА Таблица.Период
	|			КОГДА Таблица.Документ ССЫЛКА Документ.Операция
	|				ТОГДА Таблица.Период
	|			КОГДА ЛОЖЬ
	|					И Таблица.Документ ССЫЛКА Документ.АвансовыйОтчет
	|				ТОГДА ДОБАВИТЬКДАТЕ(Таблица.Период, ЧАС, -1)
	|			КОГДА ЛОЖЬ
	|					И Таблица.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)
	|				ТОГДА ДОБАВИТЬКДАТЕ(Таблица.Период, ЧАС, -1)
	|			КОГДА ЛОЖЬ
	|					И Таблица.Заявка ССЫЛКА Документ.ЗаявкаНаРасходованиеСредств
	|					И ЕСТЬNULL(Таблица.Заявка.Аванс, ЛОЖЬ)
	|				ТОГДА Таблица.Период
	|			КОГДА ЛОЖЬ
	|					И Таблица.Заявка ССЫЛКА Документ.ЗаявкаНаРасходованиеСредств
	|					И ЕСТЬNULL(Таблица.Заявка.ВсеДокументыВНаличии, ЛОЖЬ)
	|					И ЕСТЬNULL(Таблица.Заявка.ДатаПолученияУслуги, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДОБАВИТЬКДАТЕ(Таблица.Заявка.ДатаПолученияУслуги, ЧАС, -1)
	|			КОГДА Таблица.Заявка ССЫЛКА Документ.ЗаявкаНаУслугиМатериалы
	|					И ЕСТЬNULL(Таблица.Заявка.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Таблица.Заявка.ДатаПоступления
	|			КОГДА ЛОЖЬ
	|					И Таблица.Заявка ССЫЛКА Документ.СделкаСПоставщиком
	|					И ЕСТЬNULL(Таблица.Заявка.ДатаДокументаПоставщика, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Таблица.Заявка.ДатаДокументаПоставщика
	|			КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОбеспечительныйВзнос)
	|				ТОГДА Таблица.Документ.ДоговорКонтрагента.СрокДействия
	|			КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыПоАренде)
	|				ТОГДА ВЫБОР
	|						КОГДА НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) > НАЧАЛОПЕРИОДА(Таблица.Документ.ПериодРегистрации, МЕСЯЦ)
	|							ТОГДА Таблица.Период
	|						КОГДА НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Таблица.Документ.ПериодРегистрации, МЕСЯЦ)
	|							ТОГДА КОНЕЦПЕРИОДА(Таблица.Период, МЕСЯЦ)
	|						КОГДА НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) < НАЧАЛОПЕРИОДА(Таблица.Документ.ПериодРегистрации, МЕСЯЦ)
	|							ТОГДА КОНЕЦПЕРИОДА(Таблица.Документ.ПериодРегистрации, МЕСЯЦ)
	|						ИНАЧЕ Таблица.Период
	|					КОНЕЦ
	|			КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщиками)
	|				ТОГДА Таблица.Период
	|			КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочаяЗадолженность)
	|				ТОГДА Таблица.Период
	|			КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиУпаковки)
	|				ТОГДА Таблица.Период
	|			КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиПоБонусам)
	|				ТОГДА Таблица.Период
	|			КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиОборудования)
	|				ТОГДА Таблица.Период
	|			ИНАЧЕ Таблица.Период
	|		КОНЕЦ КАК ДатаПогашения
	|	ИЗ
	|		ТЗ_ДебиторскаяЗадолженность КАК Таблица) КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗ_ДебиторскаяЗадолженность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Счет,
	|	Таблица.Организация,
	|	Таблица.Контрагент,
	|	Таблица.СуммаЛимит_Организация_Контрагент,
	|	Таблица.Период,
	|	Таблица.Документ,
	|	Таблица.Заявка,
	|	Таблица.ТорговаяТочка,
	|	Таблица.СуммаДокумента,
	|	Таблица.СуммаДЗ,
	|	Таблица.ДатаПогашения,
	|	СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)) КАК Сумма,
	|	ВЫБОР
	|		КОГДА Таблица.ПризнакПросрочено <> ИСТИНА
	|			ТОГДА Таблица.СуммаДЗ
	|		КОГДА Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)) < 0
	|			ТОГДА 0
	|		КОГДА Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)) >= Таблица.СуммаДЗ
	|			ТОГДА Таблица.СуммаДЗ
	|		КОГДА Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)) < Таблица.СуммаДЗ
	|			ТОГДА Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДЗ_Хорошая,
	|	ВЫБОР
	|		КОГДА Таблица.ПризнакПросрочено <> ИСТИНА
	|			ТОГДА 0
	|		КОГДА Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)) < 0
	|			ТОГДА Таблица.СуммаДЗ
	|		КОГДА Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)) >= Таблица.СуммаДЗ
	|			ТОГДА 0
	|		КОГДА Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)) <= Таблица.СуммаДЗ
	|			ТОГДА Таблица.СуммаДЗ - (Таблица.СуммаЛимит_Организация_Контрагент - СУММА(ЕСТЬNULL(ТаблицаПромежуточныеИтоги.СуммаДЗ, 0)))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДЗ_Плохая
	|ПОМЕСТИТЬ ТЗ_ДебиторскаяЗадолженность
	|ИЗ
	|	ТЗ_ДЗ КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ДЗ КАК ТаблицаПромежуточныеИтоги
	|		ПО Таблица.Счет = ТаблицаПромежуточныеИтоги.Счет
	|			И Таблица.Организация = ТаблицаПромежуточныеИтоги.Организация
	|			И Таблица.Контрагент = ТаблицаПромежуточныеИтоги.Контрагент
	|			И Таблица.ДатаПогашения >= ТаблицаПромежуточныеИтоги.ДатаПогашения
	|			И (Таблица.СуммаЛимит_Организация_Контрагент > 0)
	|			И (Таблица.ПризнакПросрочено = ИСТИНА)
	|			И (ТаблицаПромежуточныеИтоги.ПризнакПросрочено = ИСТИНА)
	|			И (ВЫБОР
	|				КОГДА Таблица.ДатаПогашения = ТаблицаПромежуточныеИтоги.ДатаПогашения
	|					ТОГДА Таблица.Документ > ТаблицаПромежуточныеИтоги.Документ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Счет,
	|	Таблица.Организация,
	|	Таблица.Контрагент,
	|	Таблица.СуммаЛимит_Организация_Контрагент,
	|	Таблица.Период,
	|	Таблица.Документ,
	|	Таблица.Заявка,
	|	Таблица.ТорговаяТочка,
	|	Таблица.СуммаДокумента,
	|	Таблица.СуммаДЗ,
	|	Таблица.ДатаПогашения,
	|	Таблица.ПризнакПросрочено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ДебиторскаяЗадолженность.Счет,
	|	ТЗ_ДебиторскаяЗадолженность.Организация,
	|	ТЗ_ДебиторскаяЗадолженность.Контрагент,
	|	МАКСИМУМ(ТЗ_ДебиторскаяЗадолженность.Период) КАК Период
	|ПОМЕСТИТЬ ТЗ_Периоды
	|ИЗ
	|	ТЗ_ДебиторскаяЗадолженность КАК ТЗ_ДебиторскаяЗадолженность
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ_ДебиторскаяЗадолженность.Счет,
	|	ТЗ_ДебиторскаяЗадолженность.Организация,
	|	ТЗ_ДебиторскаяЗадолженность.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_Периоды.Счет,
	|	ТЗ_Периоды.Организация,
	|	ТЗ_Периоды.Контрагент,
	|	ТЗ_Периоды.Период,
	|	МАКСИМУМ(ТЗ_ДебиторскаяЗадолженность.Документ) КАК Документ
	|ПОМЕСТИТЬ ТЗ_ПоследниеОперации
	|ИЗ
	|	ТЗ_Периоды КАК ТЗ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_ДебиторскаяЗадолженность КАК ТЗ_ДебиторскаяЗадолженность
	|		ПО ТЗ_Периоды.Счет = ТЗ_ДебиторскаяЗадолженность.Счет
	|			И ТЗ_Периоды.Организация = ТЗ_ДебиторскаяЗадолженность.Организация
	|			И ТЗ_Периоды.Контрагент = ТЗ_ДебиторскаяЗадолженность.Контрагент
	|			И ТЗ_Периоды.Период = ТЗ_ДебиторскаяЗадолженность.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ_Периоды.Счет,
	|	ТЗ_Периоды.Организация,
	|	ТЗ_Периоды.Контрагент,
	|	ТЗ_Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Счет,
	|	Таблица.Субконто1 КАК Организация,
	|	Таблица.Субконто2 КАК Контрагент,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Период = &НачалоПредМес
	|				ТОГДА Таблица.СуммаНачальныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СальдоПредМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Период = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|				ТОГДА Таблица.СуммаНачальныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СальдоТекМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Период = &НачалоПредМес
	|				ТОГДА Таблица.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДтПредМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Период = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|				ТОГДА Таблица.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДтТекМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Период = &НачалоПредМес
	|				ТОГДА Таблица.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКтПредМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Период = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|				ТОГДА Таблица.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКтТекМесяца
	|ПОМЕСТИТЬ ОстаткиИОбороты
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
	|			&НачалоПредМес,
	|			&Период,
	|			Месяц,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_Остатки.Счет
	|				ИЗ
	|					ВТ_Остатки),
	|			&ВидыСубконто1,
	|			Субконто1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_Остатки.Организация
	|					ИЗ
	|						ВТ_Остатки)
	|				И Субконто2 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_Остатки.Контрагент
	|					ИЗ
	|						ВТ_Остатки) {(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации)).* КАК Организация, (ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты)).* КАК Контрагент}) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Счет,
	|	Таблица.Субконто1,
	|	Таблица.Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Счет КАК Счет,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.Период,
	|	Таблица.Документ КАК Регистратор,
	|	Таблица.СуммаДокумента,
	|	Таблица.СуммаДЗ КАК Задолженность,
	|	Таблица.ДЗ_Хорошая КАК ХорошаяДЗ,
	|	Таблица.ДЗ_Плохая КАК ПлохаяДЗ,
	|	Таблица.СуммаЛимит_Организация_Контрагент КАК Лимит,
	|	ВЫБОР
	|		КОГДА Таблица.Документ ССЫЛКА Документ.РасходИзБанка
	|				И НЕ Таблица.Заявка = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Таблица.Заявка.ДокументОснование ССЫЛКА Документ.КомплектацияМагазинаПоСделкамСПоставщиком
	|							И НЕ Таблица.Заявка.ДокументОснование = ЗНАЧЕНИЕ(Документ.КомплектацияМагазинаПоСделкамСПоставщиком.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА НЕ Таблица.Заявка.ДокументОснование.Ответственный.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|									ТОГДА Таблица.Заявка.ДокументОснование.Ответственный.ФизЛицо
	|								ИНАЧЕ ""Коимчук""
	|							КОНЕЦ
	|					КОГДА НЕ Таблица.Заявка.ИнициаторЗаявки = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|							И НЕ Таблица.Заявка.ИнициаторЗаявки.НеЯвляетсяИнициаторомЗаявокНаРасходДС
	|						ТОГДА Таблица.Заявка.ИнициаторЗаявки
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ Таблица.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Таблица.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо
	|							ИНАЧЕ Таблица.Контрагент.ОсновнойМенеджерПокупателя
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ Таблица.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА Таблица.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо
	|				ИНАЧЕ Таблица.Контрагент.ОсновнойМенеджерПокупателя
	|			КОНЕЦ
	|	КОНЕЦ КАК Ответственный,
	|	ТЗ_ПоследниеОперации.Период КАК ДатаПослОперации,
	|	ВЫБОР
	|		КОГДА Таблица.Документ = ТЗ_ПоследниеОперации.Документ
	|			ТОГДА Таблица.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПоследнейОперации,
	|	ОстаткиИОбороты.СальдоПредМесяца КАК СальдоПредМесяца,
	|	ОстаткиИОбороты.СальдоТекМесяца КАК СальдоТекМесяца,
	|	ОстаткиИОбороты.ОборотДтПредМесяца КАК ОборотДтПредМесяца,
	|	ОстаткиИОбороты.ОборотДтТекМесяца КАК ОборотДтТекМесяца,
	|	ОстаткиИОбороты.ОборотКтПредМесяца КАК ОборотКтПредМесяца,
	|	ОстаткиИОбороты.ОборотКтТекМесяца КАК ОборотКтТекМесяца,
	|	ЕСТЬNULL(Таблица.Документ.НазначениеПлатежа, """") КАК ЗаЧто,
	|	ЕСТЬNULL(Комментарии.Комментарий, """") КАК Комментарий,
	|	ЕСТЬNULL(Комментарии.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСоздания
	|ИЗ
	|	ТЗ_ДебиторскаяЗадолженность КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиИОбороты КАК ОстаткиИОбороты
	|		ПО Таблица.Счет = ОстаткиИОбороты.Счет
	|			И Таблица.Организация = ОстаткиИОбороты.Организация
	|			И Таблица.Контрагент = ОстаткиИОбороты.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_КомментарииКДебЗадолженности.СрезПоследних КАК Комментарии
	|		ПО Таблица.Документ = Комментарии.ДокументЗадолженности
	|			И Таблица.Контрагент = Комментарии.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ПоследниеОперации КАК ТЗ_ПоследниеОперации
	|		ПО Таблица.Счет = ТЗ_ПоследниеОперации.Счет
	|			И Таблица.Организация = ТЗ_ПоследниеОперации.Организация
	|			И Таблица.Контрагент = ТЗ_ПоследниеОперации.Контрагент
	|			И Таблица.Документ = ТЗ_ПоследниеОперации.Документ
	|ИТОГИ
	|	СУММА(Задолженность),
	|	СУММА(ХорошаяДЗ),
	|	СУММА(ПлохаяДЗ),
	|	МАКСИМУМ(ДатаПослОперации),
	|	СУММА(СуммаПоследнейОперации),
	|	МАКСИМУМ(СальдоПредМесяца),
	|	МАКСИМУМ(СальдоТекМесяца),
	|	МАКСИМУМ(ОборотДтПредМесяца),
	|	МАКСИМУМ(ОборотДтТекМесяца),
	|	МАКСИМУМ(ОборотКтПредМесяца),
	|	МАКСИМУМ(ОборотКтТекМесяца)
	|ПО
	|	Контрагент,
	|	Счет,
	|	Организация,
	|	Ответственный";
	
	
	//+++ZEZA			   
	
	//
	Попытка //на период горячего запуска. позже убрать.
		
		//
		МакетСКД = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");			   
		//+++АК bara 15.11.17    16682.02    надо было бы поменять отчет на вариант .._Минусы и тут тоже, но вызовов процедуры нигде нету в базе, поэтому оставлю так на всякий случай.
		//МакетСКД = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам_РасчетыСКонтрагентами_Минусы.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");			   
		//---АК
		//
		НаборДанных = МакетСКД.НаборыДанных.Получить(0);
		Запрос.Текст = НаборДанных.Запрос;
		
		//
		Запрос.Текст = Запрос.Текст + Символы.ПС; 
		Запрос.Текст = Запрос.Текст + "ИТОГИ
		|	СУММА(Задолженность),
		|	СУММА(ХорошаяДЗ),
		|	СУММА(ПлохаяДЗ),
		|	МАКСИМУМ(ДатаПослОперации),
		|	СУММА(СуммаПоследнейОперации),
		|	МАКСИМУМ(СальдоПредМесяца),
		|	МАКСИМУМ(СальдоТекМесяца),
		|	МАКСИМУМ(ОборотДтПредМесяца),
		|	МАКСИМУМ(ОборотДтТекМесяца),
		|	МАКСИМУМ(ОборотКтПредМесяца),
		|	МАКСИМУМ(ОборотКтТекМесяца)
		|ПО
		|	Контрагент,
		|	Счет,
		|	Организация,
		|	Ответственный";
	Исключение
	КонецПопытки;								   
	
	
	Запрос.УстановитьПараметр("ПоследняяОперация_НП", '00010101');
	Запрос.УстановитьПараметр("ПоследняяОперация_КП", '30010101');
	
	//---ZEZA			   
	
	//
	Сч = 0;
	ТекстКоманды = "";
	
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//ТЗ.ВыбратьСтроку();
	//Возврат;
	ВыборкаКонтрагент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
		ТекКонтрагент = ВыборкаКонтрагент.Контрагент;
		
		ВыборкаСчет = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.Следующий() Цикл
			
			ВыборкаОрг = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаОрг.Следующий()Цикл
				
				ВыборкаОтветственный = ВыборкаОрг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаОтветственный.Следующий() Цикл
					ТекОтветственный = ВыборкаОтветственный.Ответственный;
					
					
					//---
					//// Получение строки "За что"
					строкаЗаЧто = "";
					счетчик = 1;
					выборкаЗаЧто = ВыборкаОтветственный.Выбрать();
					Пока (выборкаЗаЧто.Следующий()
						И счетчик <= 3) Цикл
						Если ВыборкаЗаЧто.ЗаЧто <>"" Тогда
							строкаЗаЧто = строкаЗаЧто + "; " + выборкаЗаЧто.ЗаЧто;
							счетчик = счетчик + 1;
						КонецЕсли;
					КонецЦикла;
					
					//---
					// Запись данных в результат
					Если Цел(Сч / 500) = Сч / 500 Тогда
						ТекстКоманды = ТекстКоманды + Символы.ПС +
						"Insert Into Reports..Deb_Zadolgennost
						|	(id_org,
						|	name_org,
						|	id_kontr,
						|	name_kontr,
						|	otvetstvennyi,
						|	deb_zadolgennost,
						|	deb_zadolgennost_good,
						|	posl_op_dt_date,
						|	posl_op_dt_sum,
						|	ostatok_proshlyi,
						|	saldo_proshlyi,
						|	ostatok_tek,
						|	saldo_tek,
						|	za_chto,
						|	date_add,
						|	Oborot_proshlyi_DT,
						|	Oborot_proshlyi_KT,
						|	Oborot_tek_DT,
						|	Oborot_tek_KT,
						|	schet,
						|	DneiOtsrochki)
						|VALUES " + Символы.ПС;
					КонецЕсли;
					
					ТекстКоманды = ТекстКоманды + Символы.ПС + ?(Прав(ТекстКоманды, 1) = ")", ", ", "") +
					"(0, '"+
					ВыборкаОрг.Организация.Наименование+ "', "+
					Формат(ТекКонтрагент.ИД	, "ЧГ=0; ЧН=") 	+ ", '" +
					СокрЛП(ТекКонтрагент.Наименование) 		+ "', '" +
					?(ЗначениеЗаполнено(ТекОтветственный), СокрЛП(ТекОтветственный), "<Не указан>") 	+ "', " +
					Формат(ВыборкаОтветственный.Задолженность, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(ВыборкаОтветственный.ХорошаяДЗ				, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", '" +
					Формат(ВыборкаОтветственный.ДатаПослОперации	, "ДФ='yyyy-MM-ddTHH:mm:ss'") 	+ "', " +
					Формат(ВыборкаОтветственный.СуммаПоследнейОперации, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(ВыборкаОтветственный.СальдоПредМесяца		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(ВыборкаОтветственный.СальдоПредМесяца		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(ВыборкаОтветственный.СальдоТекМесяца		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(ВыборкаОтветственный.СальдоТекМесяца		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", '" +
					Лев(строкаЗаЧто, 150) + "', '" +
					Формат(ТекДата, "ДФ='yyyy-MM-ddTHH:mm:ss'") + "', " +
					Формат(ВыборкаОтветственный.ОборотДтПредМесяца, "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					Формат(ВыборкаОтветственный.ОборотКтПредМесяца, "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					Формат(ВыборкаОтветственный.ОборотДтТекМесяца, "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					Формат(ВыборкаОтветственный.ОборотКтТекМесяца, "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					ВыборкаОтветственный.Счет.Код+ ", "+
					Формат(ТекКонтрагент.КоличествоДнейОтсрочки, "ЧН=; ЧГ=0") + ")";
					
					Сч = Сч + 1;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	сообщить(ТекстКоманды);
	Если НЕ ТекстКоманды = "" Тогда
		
		// ДОБАВЛЕНИЕ В ТАБЛИЦУ НА SQL
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		СтрокаСоединенияСБазойСКЛ = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(,,"Reports",,,"LANGUAGE=русский");
		ADOСоединение.Open(СтрокаСоединенияСБазойСКЛ);
		
		ADOКоманда = Новый COMОбъект("ADODB.Command");
		ADOКоманда.ActiveConnection = ADOСоединение;
		
		ADOКоманда.CommandText = ТекстКоманды;
		Попытка
			ADOКоманда.Execute();
		Исключение
		КонецПопытки;
		
		ADOСоединение.Close();
		
	КонецЕсли;
КонецПроцедуры



Функция Null_0(Значение)
	Возврат ?(ЗначениеЗаполнено(Значение), Значение, 0);
КонецФункции	

Процедура ВыгрузитьДебиторскуюЗадолженностьНаSQL() Экспорт
	
	ЭтоКопияБазы = ОбщегоНазначения.ЭтоКопияБазы();
	Если ЭтоКопияБазы Тогда
		Возврат;
	КонецЕсли;	
	//
	ТекДата = ТекущаяДатаСеанса();
	
	МассивКонтрагентовИскл = Новый Массив;
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000561")); // Вкусвилл
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000155")); // Луг да поле
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000170")); // Молочный проект
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000187")); // Проект Избенка
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000171")); // Сельские продукты
	МассивКонтрагентовИскл.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000168")); // Экоферма
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"	, ТекДата);
	Запрос.УстановитьПараметр("НачалоПредМес"	, НачалоМесяца(НачалоМесяца(ТекДата)-1));
	Запрос.УстановитьПараметр("МассивКонтрИскл"	, МассивКонтрагентовИскл);
	Запрос.УстановитьПараметр("ИнициаторКлимчук", Справочники.ФизическиеЛица.НайтиПоНаименованию("Климчук Анатолий Алексеевич"));
	
	МассивВидыСубконто = Новый Массив;
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Организации);
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	
	Запрос.УстановитьПараметр("ВидыСубконто1",МассивВидыСубконто);
	
	МассивСчетаАренды = Новый Массив;
	МассивСчетаАренды.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	МассивСчетаАренды.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
	
	Запрос.УстановитьПараметр("СчетаАренды",МассивСчетаАренды);
	
	
	//+++ZEZA			   
	
	//
	Попытка //на период горячего запуска. позже убрать.
		
		//
		МакетСКД = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");			   
		//+++АК bara 15.11.17    16682.02    запрос отчета переделывают , поэтому пока не менял вариант отчета тут.
		//МакетСКД = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам_РасчетыСКонтрагентами_Минусы.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");			   
		//---АК
		
		//
		НаборДанных = МакетСКД.НаборыДанных.Получить(0);
		Запрос.Текст = НаборДанных.Запрос;
		
		//
		Запрос.Текст = Запрос.Текст + Символы.ПС; 
		Запрос.Текст = Запрос.Текст + "ИТОГИ
		|	СУММА(Задолженность),
		|	СУММА(ХорошаяДЗ),
		|	СУММА(ПлохаяДЗ),
		|	МАКСИМУМ(ДатаПослОперации),
		|	СУММА(СуммаПоследнейОперации),
		|	МАКСИМУМ(СальдоПредМесяца),
		|	МАКСИМУМ(СальдоТекМесяца),
		|	МАКСИМУМ(ОборотДтПредМесяца),
		|	МАКСИМУМ(ОборотДтТекМесяца),
		|	МАКСИМУМ(ОборотКтПредМесяца),
		|	МАКСИМУМ(ПризнакЭтоАрендодатель),
		|	МАКСИМУМ(ПризнакОшибкаСчета),
		|	МАКСИМУМ(ОтветственныйБухгалтер),
		|	МАКСИМУМ(АктСверки_Дата),
		|	МАКСИМУМ(АктСверки_Сумма),
		|	МАКСИМУМ(АктСверки_Номер),
		|	Сумма(ПлохаяДЗ_Согласовано),
		|	Сумма(ПлохаяДЗ_НеСогласовано),
		|	МАКСИМУМ(ОборотКтТекМесяца)
		|ПО
		|	Контрагент,
		|	Счет,
		|	Организация,
		|	Ответственный";
	Исключение
	КонецПопытки;								   
	
	
	Запрос.УстановитьПараметр("ПоследняяОперация_НП", '00010101');
	Запрос.УстановитьПараметр("ПоследняяОперация_КП", '30010101');
	
	//---ZEZA			   
	
	//
	Сч = 0;
	ТекстКоманды = "";
	
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//ТЗ.ВыбратьСтроку();
	//Возврат;
	ВыборкаКонтрагент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
		ТекКонтрагент = ВыборкаКонтрагент.Контрагент;
		
		ВыборкаСчет = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.Следующий() Цикл
			
			ВыборкаОрг = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаОрг.Следующий()Цикл
				
				ВыборкаОтветственный = ВыборкаОрг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаОтветственный.Следующий() Цикл
					ТекОтветственный = ВыборкаОтветственный.Ответственный;
					
					
					//---
					//// Получение строки "За что"
					строкаЗаЧто = "";
					счетчик = 1;
					выборкаЗаЧто = ВыборкаОтветственный.Выбрать();
					Пока (выборкаЗаЧто.Следующий()
						И счетчик <= 3) Цикл
						Если ВыборкаЗаЧто.ЗаЧто <>"" Тогда
							строкаЗаЧто = строкаЗаЧто + "; " + выборкаЗаЧто.ЗаЧто;
							счетчик = счетчик + 1;
						КонецЕсли;
					КонецЦикла;
					строкаЗаЧто=СтрЗаменить(строкаЗаЧто,Символы.ПС," ");
					СтрокаЗаЧто = Лев(СтрокаЗаЧто,150);
					
					//---
					// Запись данных в результат
					Если Цел(Сч / 100) = Сч / 100 Тогда
						ТекстКоманды = ТекстКоманды + Символы.ПС +
						"Insert Into [Reports].[dbo].[Deb_Zadolgennost]
						|	(id_org,
						|	name_org,
						|	id_kontr,
						|	name_kontr,
						|	otvetstvennyi,
						|	deb_zadolgennost,
						|	deb_zadolgennost_good,
						|	posl_op_dt_date,
						|	posl_op_dt_sum,
						|	ostatok_proshlyi,
						|	saldo_proshlyi,
						|	ostatok_tek,
						|	saldo_tek,
						|	za_chto,
						|	date_add,
						|	Oborot_proshlyi_DT,
						|	Oborot_proshlyi_KT,
						|	Oborot_tek_DT,
						|	Oborot_tek_KT,
						|	schet,
						|	IsLease,
						|	IsAccError,
						|	buh,
						|	Act,
						|	ActSumm,
						|	Agreed,
						|	DneiOtsrochki)
						|VALUES " + Символы.ПС;
					КонецЕсли;
					АктСверки = ?(ЗначениеЗаполнено(ВыборкаОтветственный.АктСверки_Дата),"'"+Строка(ВыборкаОтветственный.АктСверки_Номер)+
					" от "+ Формат(ВыборкаОтветственный.АктСверки_Дата,"ДФ=dd.MM.yy")+"'","''");
					Сообщить(АктСверки);
					
					ТекстКоманды = ТекстКоманды + Символы.ПС + ?(Прав(ТекстКоманды, 1) = ")", ", ", "") +
					"(0, '"+
					ВыборкаОрг.Организация.Наименование+ "', "+
					Формат(ТекКонтрагент.ИД	, "ЧГ=0; ЧН=") 	+ ", '" +
					СокрЛП(ТекКонтрагент.Наименование) 		+ "', '" +
					?(ЗначениеЗаполнено(ТекОтветственный), СокрЛП(ТекОтветственный), "<Не указан>") 	+ "', " +
					Формат(ВыборкаОтветственный.Задолженность, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(ВыборкаОтветственный.ХорошаяДЗ				, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", '" +
					Формат(ВыборкаОтветственный.ДатаПослОперации	, "ДФ='yyyy-MM-ddTHH:mm:ss'") 	+ "', " +
					Формат(Null_0(ВыборкаОтветственный.СуммаПоследнейОперации), "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(Null_0(ВыборкаОтветственный.СальдоПредМесяца)		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(Null_0(ВыборкаОтветственный.СальдоПредМесяца)		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(Null_0(ВыборкаОтветственный.СальдоТекМесяца)		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", " +
					Формат(Null_0(ВыборкаОтветственный.СальдоТекМесяца)		, "ЧРД=.; ЧН=; ЧГ=0") 			+ ", '" +
					Лев(строкаЗаЧто, 150) + "', '" +
					Формат(ТекДата, "ДФ='yyyy-MM-ddTHH:mm:ss'") + "', " +
					Формат(Null_0(ВыборкаОтветственный.ОборотДтПредМесяца), "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					Формат(Null_0(ВыборкаОтветственный.ОборотКтПредМесяца), "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					Формат(Null_0(ВыборкаОтветственный.ОборотДтТекМесяца), "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					Формат(Null_0(ВыборкаОтветственный.ОборотКтТекМесяца), "ЧРД=.; ЧН=; ЧГ=0") + ", " +
					ВыборкаОтветственный.Счет.Код+ ", "+
					?(ВыборкаОтветственный.ПризнакЭтоАрендодатель,"1","0")+", "+
					?(ВыборкаОтветственный.ПризнакОшибкаСчета,"1","0")+", "+
					"'"+?(ЗначениеЗаполнено(ВыборкаОтветственный.ОтветственныйБухгалтер),ВыборкаОтветственный.ОтветственныйБухгалтер.Наименование,"")+"', "+
					АктСверки+", " +
					Формат(Null_0(ВыборкаОтветственный.АктСверки_Сумма),"ЧРД=.; ЧН=; ЧГ=0")+", "+
					Формат(Null_0(ВыборкаОтветственный.ПлохаяДЗ_Согласовано),"ЧРД=.;ЧН=;ЧГ=0")+", "+
					Формат(ТекКонтрагент.КоличествоДнейОтсрочки, "ЧН=; ЧГ=0") + ")";
					
					Сч = Сч + 1;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	сообщить(ТекстКоманды);
	Если НЕ ТекстКоманды = "" Тогда
		
		// ДОБАВЛЕНИЕ В ТАБЛИЦУ НА SQL
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		СтрокаСоединенияСБазойСКЛ = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(,,"Reports",,,"LANGUAGE=русский");
		ADOСоединение.Open(СтрокаСоединенияСБазойСКЛ);
		
		ADOКоманда = Новый COMОбъект("ADODB.Command");
		ADOКоманда.ActiveConnection = ADOСоединение;
		
		ADOКоманда.CommandText = ТекстКоманды;
		Попытка
			ADOКоманда.Execute();
		Исключение
			#Если НЕ Сервер Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;
		
		ADOСоединение.Close();
		
	КонецЕсли;
КонецПроцедуры






Функция ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговыеТочки(мДата) Экспорт
	
	ТекстДаты = Формат(мДата, "ДФ='yyyy-MM-dd'");
	
	ТекстЗапроса =
	"If OBJECT_ID('tempdb..#tabTT') Is Not Null
	|Drop Table #tabTT
	|;
	|If OBJECT_ID('tempdb..#tabCFO') Is Not Null
	|Drop Table #tabCFO
	|;
	|If OBJECT_ID('tempdb..#tabStoimost') Is Not Null
	|Drop Table #tabStoimost
	|
	|
	|
	|
	|
	|   
	|;
	|Select
	|   SprStrEd._IDRRef as _tt,
	|	UINy_TT._Fld4946 as UIN_TT,
	|   VT_TT.ShopNo as NomerTochki,
	|	VT_TT.Vremya as Vremya
	|Into #tabTT
	|From
	|	(Select
	|		dbo_Pokazat_800_kod.ShopNo as ShopNo,
	|		dbo_Pokazat_800_kod.Vremya as Vremya
	|	From
	|		SMS_Izbenka.dbo.Pokazat_800_kod as dbo_Pokazat_800_kod (nolock)
	|	Where
	|		dbo_Pokazat_800_kod.дата = '" + ТекстДаты + "'
	|   
	|	Union All
	|   
	|	SELECT ISNULL(TransportSystem._Fld2756, TD_Data.ShopNo_rep) as ShopNo, 
	|	CASE WHEN TransportSystem._Fld9407 IS null THEN TD_Data.TimeDelivery ELSE DATEADD(YEAR, -2000, TransportSystem._Fld9407) END as TimeDelivery
	|FROM (SELECT
	|	T2._Fld2756,
	|	T1._Fld9407
	|	FROM IzbenkaFin.dbo._Document3036_VT3639 T1 WITH(NOLOCK)
	|	LEFT OUTER JOIN IzbenkaFin.dbo._Reference42 T2 WITH(NOLOCK)
	|	ON T1._Fld3641RRef = T2._IDRRef
	|	LEFT OUTER JOIN IzbenkaFin.dbo._Document3036 T3 WITH(NOLOCK)
	|	ON T1._Document3036_IDRRef = T3._IDRRef
	|	WHERE (T1._Fld9407 <> '2001-01-01T00:00:00') AND (T3._Marked = 0x00)
	|		AND CONVERT(date, DATEADD(YEAR, -2000, T3._Date_Time)) = '" + ТекстДаты + "') as TransportSystem
	|		
	|FULL OUTER JOIN (Select
	|			TD.ShopNo_rep,
	|			MAX(Cast(TD.time_delivery as datetime)) as TimeDelivery
	|		From
	|			SMS_Repl.dbo.TD_move as TD (nolock)
	|		Where
	|			Convert(Date, TD.opendate) = '" + ТекстДаты + "'
	|		   And TD.time_delivery is not null
	|		   And Not TD.time_delivery = '00:00:00.0000000'
	|		   GROUP BY TD.ShopNo_rep) as TD_Data
	|		ON TransportSystem._Fld2756 = TD_Data.ShopNo_rep) as VT_TT
	| Inner Join IzbenkaFin.dbo._Reference42 as SprStrEd (nolock)
	| 		Inner Join IzbenkaFin.dbo._enum2374 as tipTT on SprStrEd._fld2375rref=tipTT._idRref and tipTT._enumorder=1
	| On SprStrEd._Fld2756 = VT_TT.ShopNo
	| Inner Join IzbenkaFin.dbo._InfoRg4943 as UINy_TT (nolock)
	| On UINy_TT._Fld4944_RRRef = SprStrEd._IDRRef
	|Where
	|	VT_TT.Vremya is not null
	|	And Not DateName(HOUR, VT_TT.Vremya) = 0
	|	And ((SprStrEd._Fld2375RRef = 0x9BB6516D4A2CBD01442F121AD79A4CEF
	|		And (DateName(HOUR, VT_TT.Vremya) > 10
	|			Or (DateName(HOUR, VT_TT.Vremya) = 10
	|				And DateName(MINUTE, VT_TT.Vremya) > 30)))
	|		Or ((SprStrEd._Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22
	|			And (DateName(HOUR, VT_TT.Vremya) > 8
	|				Or (DateName(HOUR, VT_TT.Vremya) = 8
	|					And DateName(MINUTE, VT_TT.Vremya) > 30)))))
	|
	|;
	|Select
	|	Reg_CFO._Fld822RRef as _TT,
	|	UINy_TT._Fld4946 as UIN_CFO
	|Into #tabCFO
	|From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
	| Inner Join
	|  (Select
	|		Reg_CFO._Fld822RRef as _TT,
	|		Max(Reg_CFO._Period) as _Period
	|	From IzbenkaFin.dbo._InfoRg821 as Reg_CFO (nolock)
	|	Group By
	|		Reg_CFO._Fld822RRef) as Reg_CFO_Max
	| On Reg_CFO_Max._TT = Reg_CFO._Fld822RRef
	|	And Reg_CFO_Max._Period = Reg_CFO._Period
	| Inner Join IzbenkaFin.dbo._InfoRg4943 as UINy_TT (nolock)
	| On UINy_TT._Fld4944_RRRef = Reg_CFO._Fld823RRef
	|Where
	|	Reg_CFO._Fld822RRef In
	|		(Select
	|			tabTT._tt
	|		From #tabTT as tabTT)
	|
	|;
	|Select
	|	VT_Stoimost.id_kontr as id_kontr,
	|	VT_Stoimost._TT as _TT,
	|	SUM(VT_Stoimost.Stavka) as Summa
	|Into #tabStoimost
	|From
	|	(Select
	|		Spr_kontr._Fld1159 as id_kontr,
	|		Reg_Stoimost._Fld3966RRef as _TT,
	|		Reg_Stoimost._Fld3967 * 0.5 as Stavka
	|	From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|	 Inner Join(Select Reg_Stoimost_Max._TT as _TT, Reg_Stoimost_Max.GrDost as GrDost, Reg_Stoimost_Max._Period as _Period, Reg_Stoimost.RecordDate  as RecordDate
	|
	|From
	|		(Select
	|			Reg_Stoimost._Fld3966RRef as _TT,
	|			Reg_Stoimost._Fld5570RRef as GrDost,
	|			Max(Reg_Stoimost._Period) as _Period
	|		From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|		Group By
	|			Reg_Stoimost._Fld3966RRef,
	|			Reg_Stoimost._Fld5570RRef) as Reg_Stoimost_Max
	|	 Inner Join
	|		(Select
	|			Reg_Stoimost._Fld3966RRef as _TT,
	|			Reg_Stoimost._Fld5570RRef as GrDost, 
	|			Reg_Stoimost._Period as _Period,
	|			Max(Reg_Stoimost._Fld5607) as RecordDate
	|		From IzbenkaFin.dbo._InfoRg3964 as Reg_Stoimost (nolock)
	|		Group By
	|			Reg_Stoimost._Fld3966RRef,
	|			Reg_Stoimost._Fld5570RRef,
	|			Reg_Stoimost._Period) as Reg_Stoimost
	|	 On Reg_Stoimost_Max._TT = Reg_Stoimost._TT
	|		And Reg_Stoimost_Max.GrDost = Reg_Stoimost.GrDost
	|		And Reg_Stoimost_Max._Period = Reg_Stoimost._Period
	|) as Reg_Stoimost_Max1
	|	 On Reg_Stoimost_Max1._TT = Reg_Stoimost._Fld3966RRef
	|		And Reg_Stoimost_Max1.GrDost = Reg_Stoimost._Fld5570RRef
	|		And Reg_Stoimost_Max1._Period = Reg_Stoimost._Period
	|		And Reg_Stoimost_Max1.RecordDate = Reg_Stoimost._Fld5607
	|	 Inner Join IzbenkaFin.dbo._Reference27 as Spr_kontr (nolock)
	|	 On Spr_kontr._IDRRef = Reg_Stoimost._Fld3965RRef
	|	Where
	|		Reg_Stoimost._Fld3966RRef In
	|			(Select
	|				tabTT._tt
	|			From #tabTT as tabTT)) as VT_Stoimost   
	|Group By
	|	VT_Stoimost.id_kontr,
	|	VT_Stoimost._TT
	|
	|;
	|Select
	|   tabTT.UIN_TT as UIN_TT,
	|   tabTT.Vremya as Vremya,
	|   tabCFO.UIN_CFO as UIN_CFO,
	|   tabStoimost.id_kontr as id_kontr,
	|   IsNull(tabStoimost.Summa, 0) as Summa
	|From #tabTT as tabTT
	| Left Outer Join #tabCFO as tabCFO
	| On tabCFO._TT = tabTT._tt
	| Left Outer Join #tabStoimost as tabStoimost
	| On tabStoimost._TT = tabTT._tt
	|
	|;
	|Drop Table #tabTT
	|;
	|Drop Table #tabCFO
	|;
	|Drop Table #tabStoimost";
	
	Возврат ТекстЗапроса;
	
КонецФункции


Процедура СформироватьДокументыШтрафыПриДоставкеНаТорговыеТочки() Экспорт
	
	Сегодня = НачалоДня(ТекущаяДата());
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса = ДопМодульСервер.ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговыеТочки(Сегодня);
	Попытка
		Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru='Формирование документов ""Штрафы при доставке на торговые точки""'"), 
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат;
	КонецПопытки;
	
	
	// создание документа
	ТекПричинаШтрафа 		= Перечисления.ПричиныШтрафовПриДоставкеНаТочки.ДоставкаНаТТ;
	СпрСтруктурныеЕдиницы 	= Справочники.СтруктурныеЕдиницы;
	СпрКонтрагенты 			= Справочники.Контрагенты;
	
	НовыйДокумент = Документы.ШтрафыПриДоставкеНаТорговыеТочки.СоздатьДокумент();
	НовыйДокумент.Дата 			= ТекущаяДата();
	НовыйДокумент.Автор 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Организация 	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	НовыйДокумент.ДатаДоставки 	= Сегодня;
	
	ТЧТорговыеТочки = НовыйДокумент.ТорговыеТочки;
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = ТЧТорговыеТочки.Добавить();
				Если НЕ Выборка.Fields("UIN_CFO").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Выборка.Fields("UIN_CFO").Value);
					НоваяСтрока.ЦФО 			= СпрСтруктурныеЕдиницы.ПолучитьСсылку(мУникальныйИД);
				КонецЕсли;
				Если НЕ Выборка.Fields("UIN_TT").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Выборка.Fields("UIN_TT").Value);
					НоваяСтрока.ТорговаяТочка 	= СпрСтруктурныеЕдиницы.ПолучитьСсылку(мУникальныйИД);
				КонецЕсли;
				
				НоваяСтрока.ВремяДоставки 	= Выборка.Fields("Vremya").Value;
				НоваяСтрока.ПричинаШтрафа 	= ТекПричинаШтрафа;
				НоваяСтрока.ДанныеИзТранспортнойСистемы = Выборка.Fields("IsTransport").Value;
				ТекИДПеревозчика = Выборка.Fields("id_kontr").Value;
				Если НЕ ТекИДПеревозчика = NULL Тогда
					НоваяСтрока.Перевозчик 	= СпрКонтрагенты.НайтиПоРеквизиту("ИД", ТекИДПеревозчика);
				КонецЕсли;
				НоваяСтрока.Сумма			= Выборка.Fields("Summa").Value;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ADOСоединение.Close();		
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru='Формирование документов ""Штрафы при доставке на торговые точки""'"), 
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
КонецПроцедуры	

Процедура СформироватьДокументыРазнесениеБоя() Экспорт
	
	Сегодня = НачалоДня(ТекущаяДата());
	
	//ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//ADOСоединение.ConnectionTimeOut = 0;
	//ADOСоединение.CommandTimeOut    = 0;
	//ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	//ADOСоединение.Open();
	//
	//ТекстЗапроса = ДопМодульСервер.ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговыеТочки(Сегодня);
	//
	//Попытка
	//	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	//Исключение
	//	ИнформацияОбОшибке = ИнформацияОбОшибке();
	//	ЗаписьЖурналаРегистрации(НСтр("ru='Формирование документов ""Штрафы при доставке на торговые точки""'"), 
	//								УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	//	Возврат;
	//КонецПопытки;
	
	
	// создание документа
	НовыйДокумент = Документы.АК_РазнесениеБояТоваров.СоздатьДокумент();
	НовыйДокумент.Дата 	= ТекущаяДата();
	//+++АК БЕЛН 29.07.2016
	НовыйДокумент.Склад=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"); 	
	
	//---АК БЕЛН 29.07.2016
	Документы.АК_РазнесениеБояТоваров.ЗаполнитьНаСервере(НовыйДокумент);
	НовыйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
	//
	//
	//ТекПричинаШтрафа 		= Перечисления.ПричиныШтрафовПриДоставкеНаТочки.ДоставкаНаТТ;
	//СпрСтруктурныеЕдиницы 	= Справочники.СтруктурныеЕдиницы;
	//СпрКонтрагенты 			= Справочники.Контрагенты;
	//
	//НовыйДокумент = Документы.ШтрафыПриДоставкеНаТорговыеТочки.СоздатьДокумент();
	//НовыйДокумент.Дата 			= ТекущаяДата();
	//НовыйДокумент.Автор 		= ПараметрыСеанса.ТекущийПользователь;
	//НовыйДокумент.Организация 	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	//НовыйДокумент.ДатаДоставки 	= Сегодня;
	//
	//ТЧТорговыеТочки = НовыйДокумент.ТорговыеТочки;
	//Пока НЕ Выборка = Неопределено Цикл
	//	Если Выборка.Fields.Count > 0 Тогда
	//		Пока НЕ Выборка.EOF Цикл
	//			
	//			НоваяСтрока = ТЧТорговыеТочки.Добавить();
	//			Если НЕ Выборка.Fields("UIN_CFO").Value = NULL Тогда
	//				мУникальныйИД = Новый УникальныйИдентификатор(Выборка.Fields("UIN_CFO").Value);
	//				НоваяСтрока.ЦФО 			= СпрСтруктурныеЕдиницы.ПолучитьСсылку(мУникальныйИД);
	//			КонецЕсли;
	//			Если НЕ Выборка.Fields("UIN_TT").Value = NULL Тогда
	//				мУникальныйИД = Новый УникальныйИдентификатор(Выборка.Fields("UIN_TT").Value);
	//				НоваяСтрока.ТорговаяТочка 	= СпрСтруктурныеЕдиницы.ПолучитьСсылку(мУникальныйИД);
	//			КонецЕсли;
	//			
	//			НоваяСтрока.ВремяДоставки 	= Выборка.Fields("Vremya").Value;
	//			НоваяСтрока.ПричинаШтрафа 	= ТекПричинаШтрафа;
	//			ТекИДПеревозчика = Выборка.Fields("id_kontr").Value;
	//			Если НЕ ТекИДПеревозчика = NULL Тогда
	//				НоваяСтрока.Перевозчик 	= СпрКонтрагенты.НайтиПоРеквизиту("ИД", ТекИДПеревозчика);
	//			КонецЕсли;
	//			НоваяСтрока.Сумма			= Выборка.Fields("Summa").Value;
	//			
	//			Если НЕ Выборка.EOF Тогда
	//				Выборка.MoveNext();
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//	Выборка = Выборка.NextRecordSet();
	//КонецЦикла;
	//
	//ADOСоединение.Close();		
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru='Формирование документов ""Разнесение боя""'"), 
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	//+++АК БЕЛН 29.07.2016
	// создание документа
	НовыйДокумент = Документы.АК_РазнесениеБояТоваров.СоздатьДокумент();
	НовыйДокумент.Дата 	= ТекущаяДата();
	НовыйДокумент.Склад=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"); 	
	
	Документы.АК_РазнесениеБояТоваров.ЗаполнитьНаСервере(НовыйДокумент);
	НовыйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru='Формирование документов ""Разнесение боя""'"), 
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	//---АК БЕЛН 29.07.2016
	
КонецПроцедуры	

Процедура СформироватьДокументыРазнесениеСписанийПоКачеству() Экспорт
	
	Сегодня = НачалоДня(ТекущаяДата());
	
	ЗапросДнТехнологи = Новый Запрос;
	ЗапросДнТехнологи.УстановитьПараметр("ТекДата", Сегодня);
	ЗапросДнТехнологи.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователя,
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной)) КАК СоответствиеОбъектРольСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РольПользователя,
	|	РолиПользователейСоставРоли.НомерСтроки,
	|	РолиПользователейСоставРоли.Сотрудник";
	
	Выборка = ЗапросДнТехнологи.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("РольПользователя") Цикл
		// создание документа
		НовыйДокумент = Документы.АК_РазнесениеСписанийНаКачество.СоздатьДокумент();
		НовыйДокумент.Дата 				= ТекущаяДата();
		НовыйДокумент.ДневнойТехнолог 	= Выборка.Сотрудник;
		Документы.АК_РазнесениеСписанийНаКачество.ЗаполнитьНаСервере(НовыйДокумент);
		НовыйДокумент.Автор 			= ПараметрыСеанса.ТекущийПользователь;
		
		Попытка
			Если НовыйДокумент.ТорговыеТочки.Количество() > 0 Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru='Формирование документов ""Разнесение списаний на качество""'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;	
	
	// создание документа на пустого технолога
	НовыйДокумент = Документы.АК_РазнесениеСписанийНаКачество.СоздатьДокумент();
	НовыйДокумент.Дата 	= ТекущаяДата();
	Документы.АК_РазнесениеСписанийНаКачество.ЗаполнитьНаСервере(НовыйДокумент);
	НовыйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Комментарий = "По магазинам не привязанным к дневным технологам";
	
	Попытка
		Если НовыйДокумент.ТорговыеТочки.Количество() > 0 Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru='Формирование документов ""Разнесение списаний на качество""'"), 
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
КонецПроцедуры	

Процедура ОповещениеОНепоступившихЗаказах() Экспорт
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД = Отчеты.НепоступившиеЗаказыПоставщикам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
	
	ТабДок=Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИмяФайла=Новый УникальныйИдентификатор;
	ИмяФайла=КаталогВременныхФайлов()+ИмяФайла+".xls";
	
	ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	//Отправка письма
	
	СписокКому = Новый СписокЗначений;
	СписокКому.Добавить("mr-voroshilovsv@yandex.ru"	, "mr-voroshilovsv@yandex.ru");
	СписокКому.Добавить("ceo@izbenka.msk.ru"		, "ceo@izbenka.msk.ru");
	СписокКому.Добавить("operator.2013@list.ru"		, "operator.2013@list.ru");
	СписокКому.Добавить("sklad1@izbenka.msk.ru"		, "sklad1@izbenka.msk.ru");
	
	//СписокКому.Добавить("pozm@automacon.ru", "pozm@automacon.ru");
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = "Непоступившие заказы за " + Формат(ТекущаяДата(), "ДФ='dd MMMM yyyy'");
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	Для Каждого ПолучательЭлемент Из СписокКому Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = ПолучательЭлемент.Значение;
	КонецЦикла;	
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = "Во вложении находится перечень непоступивших заказов за " + Формат(ТекущаяДата(), "ДФ='dd MMMM yyyy'");
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	Письмо.Вложения.Добавить(ИмяФайла);
	
	Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Почта.Послать(Письмо);
	КонецЕсли;	
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ОтправитьСообщениеОбИсполненыхПлатежныхПоручений() Экспорт
	
	ТаблицаУведомлений = Новый ТаблицаЗначений;
	ТаблицаУведомлений.Колонки.Добавить("Документ");
	ТаблицаУведомлений.Колонки.Добавить("Контрагент");
	ТаблицаУведомлений.Колонки.Добавить("ЭлАдрес");
	ТаблицаУведомлений.Колонки.Добавить("ИмяФайла");
	
	ТекущийДеньНедели = ДеньНедели(ТекущаяДата());
	
	Если ТекущийДеньНедели = 1 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24*3;	
	ИначеЕсли ТекущийДеньНедели = 2 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	ИначеЕсли ТекущийДеньНедели = 3 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	ИначеЕсли ТекущийДеньНедели = 4 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	ИначеЕсли ТекущийДеньНедели = 5 Тогда
		ДатаОплаты = ТекущаяДата() - 60*60*24;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"	, НачалоДня(ДатаОплаты));
	Запрос.УстановитьПараметр("ДатаКон"	, КонецДня(ДатаОплаты));
	Запрос.УстановитьПараметр("Родитель", Справочники.Контрагенты.НайтиПоНаименованию("Поставщики ТОВАРА"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходИзБанка.Ссылка,
	|	РасходИзБанка.Контрагент
	|ПОМЕСТИТЬ ТЗ_ИсполненныеПП
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.Оплачено
	|	И РасходИзБанка.ДатаОплаты МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
	|	И (РасходИзБанка.Контрагент.Родитель = &Родитель
	|			ИЛИ РасходИзБанка.Контрагент.Родитель.Родитель = &Родитель
	|			ИЛИ РасходИзБанка.Контрагент.Родитель.Родитель.Родитель = &Родитель
	|			ИЛИ РасходИзБанка.Контрагент.Родитель.Родитель.Родитель.Родитель = &Родитель)
	|	И НЕ РасходИзБанка.СообщениеКлиентуОтправлено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Объект
	|ПОМЕСТИТЬ ТЗ_ПочтовыеАдресаКонтрагентов
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				ТЗ_ИсполненныеПП.Контрагент
	|			ИЗ
	|				ТЗ_ИсполненныеПП КАК ТЗ_ИсполненныеПП)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ИсполненныеПП.Ссылка КАК Документ,
	|	ТЗ_ИсполненныеПП.Контрагент,
	|	ЕСТЬNULL(ТЗ_ПочтовыеАдресаКонтрагентов.Представление, """") КАК ЭлАдрес
	|ИЗ
	|	ТЗ_ИсполненныеПП КАК ТЗ_ИсполненныеПП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ПочтовыеАдресаКонтрагентов КАК ТЗ_ПочтовыеАдресаКонтрагентов
	|		ПО ТЗ_ИсполненныеПП.Контрагент = ТЗ_ПочтовыеАдресаКонтрагентов.Объект";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если НЕ ЗначениеЗаполнено(Выборка.ЭлАдрес) Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = ТаблицаУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка); 
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаУведомлений Цикл
		ОбъектДок = Строка.Документ.ПолучитьОбъект();
		ТабДок = ОбъектДок.ПечатьПлатежногоПоручения();
		мИмяФайла = КаталогВременныхФайлов() + Строка.Документ.Номер + ".PDF";
		Попытка
			ТабДок.Записать(мИмяФайла, ТипФайлаТабличногоДокумента.PDF); 
			Строка.ИмяФайла = мИмяФайла;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	//
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();  // no-reply@vkusvill.ru
	Для Каждого Строка Из ТаблицаУведомлений Цикл		
		
		НомерПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(Строка.Документ);
		
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Попытка
			Почта.Подключиться(Профиль);
			Письмо.Тема 			= Строка(Строка.Документ.Организация) + ". Выполненное платежное поручение №" + НомерПечать;
			Письмо.ИмяОтправителя  	= СокрЛП(УчетнаяЗапись.Наименование);
			Письмо.Отправитель     	= Письмо.ИмяОтправителя;
			МассивЭлАдресов = РазобратьСтрокуЭлАдресов(Строка.ЭлАдрес);
			Для Каждого ЭлАдрес Из МассивЭлАдресов Цикл
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес           = ЭлАдрес;
				Получатель.ОтображаемоеИмя = Строка(Строка.Документ.Контрагент);
			КонецЦикла;;
			
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     =  Строка(Строка.Документ.Организация) + ". Выполненное платежное поручение №" + НомерПечать;
			//ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст; 			
			
			Письмо.Вложения.Добавить(Строка.ИмяФайла, НомерПечать);			
			
			Почта.Послать(Письмо);
			Почта.Отключиться();
			
		Исключение
			Продолжить;
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ВременныйФайл = Новый Файл(Строка.ИмяФайла);          
		Если ВременныйФайл.Существует() Тогда
			Попытка
				УдалитьФайлы(Строка.ИмяФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ОбъектДок = Строка.Документ.ПолучитьОбъект();
		ОбъектДок.ОбменДанными.Загрузка = Истина;
		ОбъектДок.СообщениеКлиентуОтправлено = Истина;
		ОбъектДок.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьСтрокуЭлАдресов(Знач СтрокаЭлАдресов)
	
	МассивВозврата = Новый Массив;
	Если ТипЗнч(СтрокаЭлАдресов) <> Тип("Строка") Тогда
		Возврат МассивВозврата;
	КонецЕсли;
	
	Пока СтрДлина(СтрокаЭлАдресов) > 0 Цикл
		ПозицияРазделителя = Найти(СтрокаЭлАдресов, ";");
		Если ПозицияРазделителя > 1 Тогда
			МассивВозврата.Добавить(Лев(СтрокаЭлАдресов,ПозицияРазделителя -1));
			СтрокаЭлАдресов = СокрЛП(Сред(СтрокаЭлАдресов, ПозицияРазделителя + 1));
		Иначе
			МассивВозврата.Добавить(СтрокаЭлАдресов);
			СтрокаЭлАдресов = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции	

Процедура ВыгрузитьБаннерыНаСайт() Экспорт
	
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	АдресФТП 					= СокрЛП(Константы.ВыгрузкаБаннеров_АдресФТП.Получить());
	ПользовательФТП 			= СокрЛП(Константы.ВыгрузкаБаннеров_Пользователь.Получить());
	ПарольФТП					= СокрЛП(Константы.ВыгрузкаБаннеров_Пароль.Получить());
	
	Попытка
		Сервер = Новый FTPСоединение(АдресФТП,
		21,
		ПользовательФТП,
		ПарольФТП,,Истина); 
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки на сайт", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с сервером фтп. " + ОписаниеОшибки());		
		Возврат; 
	КонецПопытки; 
	
	Сервер.Удалить("img", "*.*");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка,
	|	НоменклатураСпр.id_tov,
	|	НоменклатураСпр.Наименование,
	|	ЕСТЬNULL(ВЗ_Картинки.КлючСтроки, """") КАК КлючСтроки,
	|	ЕСТЬNULL(ВЗ_Картинки.Расширение, """") КАК Расширение,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураКартинки.Расширение КАК Расширение,
	|			НоменклатураКартинки.КлючСтроки КАК КлючСтроки,
	|			НоменклатураКартинки.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|		ГДЕ
	|			НоменклатураКартинки.ЭтоОсновноеИзображение = ИСТИНА) КАК ВЗ_Картинки
	|		ПО НоменклатураСпр.Ссылка = ВЗ_Картинки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаСреза,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	НоменклатураСпр.ВыгружатьНаСайт = ИСТИНА
	|	И НоменклатураСпр.БаннерНаГлавную = ИСТИНА";
	
	ИмяФайлаИксмл = КаталогВременныхФайлов() + "\goods.xml";
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если ЗначениеЗаполнено(Выборка.КлючСтроки) Тогда
			ИмяФайлаКартинки = КаталогКартинок + Строка(Выборка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(Выборка.КлючСтроки) + ?(Лев(Выборка.Расширение, 1) = ".", "", ".") + Выборка.Расширение;
			ИмяФайлаКартинкиПолучатель = "img/" + Формат(Выборка.id_tov, "ЧН=; ЧГ=0") + ?(Лев(Выборка.Расширение, 1) = ".", "", ".") + Выборка.Расширение;
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ИмяФайлаКартинкиПолучатель);
			Сервер.Записать(ИмяФайлаКартинки, ИмяФайлаКартинкиПолучатель);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("link");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел("http://dostavka-vkusvill.ru/" + Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
	КонецЦикла;	
	
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	Сервер.Записать(ИмяФайлаИксмл, "goods.xml");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.ДатаОткрытия,
	|	СтруктурныеЕдиницы.id_TT,
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.Город,
	|	СтруктурныеЕдиницы.Адрес,
	|	СтруктурныеЕдиницы.КоординатыШирота,
	|	СтруктурныеЕдиницы.КоординатыДолгота,
	|	СтруктурныеЕдиницы.ТипРозничнойТочки,
	|	СтруктурныеЕдиницы.СтатусТорговойТочки,
	|	СтруктурныеЕдиницы.КомментарийДляСайта,
	|	ЕстьNULL(ГрафикиРаботыМагазинаСрезПоследних.График.Наименование, СтруктурныеЕдиницы.ГрафикРаботыМагазина.Наименование) КАК ГрафикРаботы,
	|	СтруктурныеЕдиницы.НазваниеДляСайта,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.СкороОткрытие)
	|			ТОГДА СтруктурныеЕдиницы.ДатаОткрытияДляСайта
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДатаОткрытияДляСайта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыМагазина.СрезПоследних(&ТекДата, ) КАК ГрафикиРаботыМагазинаСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = ГрафикиРаботыМагазинаСрезПоследних.Магазин
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	И СтруктурныеЕдиницы.НомерТочки <> 0
	|	И СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Открыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.СкороОткрытие))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницыСтанцииМетро.Ссылка,
	|	СтруктурныеЕдиницыСтанцииМетро.Метро
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.СтанцииМетро КАК СтруктурныеЕдиницыСтанцииМетро";
	
	ИмяФайлаИксмл = КаталогВременныхФайлов() + "\TT.xml";
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;			   
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКешМетро = Результаты[1].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id_TT");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_TT, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.НазваниеДляСайта));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("city");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Город));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		СтрокаМетро = "";
		СтрокиКешМетро = ТабКешМетро.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		Для Каждого СтрокаКеш Из СтрокиКешМетро Цикл
			СтрокаМетро = СтрокаМетро + ?(ЗначениеЗаполнено(СтрокаМетро), ";", "") + СтрокаКеш.Метро;
		КонецЦикла;	
		ЭлементДом = ДокументДом.СоздатьЭлемент("metro");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(СтрокаМетро));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("address");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Адрес));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("latitude");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.КоординатыШирота, "ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("longitude");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.КоординатыДолгота, "ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		// По указанию Alexandr Kulinich удаляю атрибут ntype
		////+++АК PISH 2018.11.20 ИП-00020287
		//ЭлементДом = ДокументДом.СоздатьЭлемент("ntype");
		//ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.ПространствоВкуса Тогда 
		//	ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Муравейник");
		//Иначе
		//	ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Избенка");
		//КонецЕсли;		
		//ТекУзелДом.ДобавитьДочерний(ТекстДом);
		////---АК PISH
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("type");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("ВкусВилл");
			//+++АК vasa 2018.12.03 ИП-00020287.01
		ИначеЕсли Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.ПространствоВкуса Тогда
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Муравейник");
			//+++АК vasa
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Избёнка");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("status");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтатусТорговойТочки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("openingdate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.ДатаОткрытияДляСайта);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.КомментарийДляСайта);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("workhours");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГрафикРаботы));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
	КонецЦикла;	
	
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	
	Сервер.Записать(ИмяФайлаИксмл, "TT.xml");
	
	Сервер = Неопределено;
	
	
КонецПроцедуры

Процедура ВыгрузитьБаннерыНаСайт_Новый() Экспорт
	
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	АдресФТП		= СокрЛП(Константы.ВыгрузкаБаннеров_АдресФТП.Получить());
	ПользовательФТП = СокрЛП(Константы.ВыгрузкаБаннеров_Пользователь.Получить());
	ПарольФТП		= СокрЛП(Константы.ВыгрузкаБаннеров_Пароль.Получить());
	
	Попытка
		Сервер = Новый FTPСоединение(АдресФТП,
		21,
		ПользовательФТП,
		ПарольФТП,,Истина); 
	Исключение
		ЗаписьЖурналаРегистрации("Регламентное задание выгрузки на сайт", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось соединиться с сервером фтп. " + ОписаниеОшибки());		
		Возврат; 
	КонецПопытки;
	
	Сервер2 = Неопределено;
	Попытка
		//+++АК KIRN 2018.02.27 перехали 
		//Сервер2 = Новый FTPСоединение("dev.vkusvill.ru",
		Сервер2 = Новый FTPСоединение("10.1.241.32",
		21,
		ПользовательФТП,
		ПарольФТП,,Истина); 
		//---АК KIRN 
	Исключение
	КонецПопытки;
	
	//Сервер.Удалить("img", "*.*");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.УстановитьПараметр("ФруктыОвощи", Справочники.Номенклатура.НайтиПоКоду("000618813"));
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Страна происхождения"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка,
	|	НоменклатураСпр.id_tov,
	|	НоменклатураСпр.Наименование,
	|	ЕСТЬNULL(ВЗ_Картинки.КлючСтроки, """") КАК КлючСтроки,
	|	ЕСТЬNULL(ВЗ_Картинки.Расширение, """") КАК Расширение,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	НоменклатураСпр.Описание,
	|	НоменклатураСпр.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм,
	|	НоменклатураСпр.Состав,
	|	НоменклатураСпр.ПищеваяЦенность,
	|	НоменклатураСпр.СрокГодности,
	|	НоменклатураСпр.МассаУпаковки,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Наименование, """") КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.ПорядокСортировки, 0) КАК ПорядокСортировкиГруппаНоменклатуры,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Родитель.Наименование, """") КАК ГруппаНоменклатурыРодитель,
	|	ЕСТЬNULL(НоменклатураСпр.ГруппаНоменклатуры.Родитель.ПорядокСортировки, 0) КАК ПорядокСортировкиГруппаНоменклатурыРодитель,
	|	НоменклатураСпр.БаннерНаГлавную,
    //+++ AK suvv 2018.11.15 ИП-00020445
	|	ВЫБОР
	|		КОГДА НоменклатураСпр.ДатаОкончанияВыводаНаСинийЦенник > &ДатаСреза
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Новинка,
	//--- AK suvv
	//+++ AK suvv 2018.08.28 ИП-00019646
	|   НоменклатураСпр.ЕдиницаИзмеренияДляСайта,
	|   НоменклатураСпр.ОднаУпаковкаСодержит * 1000 КАК ОднаУпаковкаСодержит,
	//--- AK suvv
	|	ВЫБОР
	|		КОГДА НЕ ВЗ_Изменения.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БылиИзменения
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураКартинки.Расширение КАК Расширение,
	|			НоменклатураКартинки.КлючСтроки КАК КлючСтроки,
	|			НоменклатураКартинки.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|		ГДЕ
	|			НоменклатураКартинки.ЭтоОсновноеИзображение = ИСТИНА) КАК ВЗ_Картинки
	|		ПО НоменклатураСпр.Ссылка = ВЗ_Картинки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаСреза,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НоменклатураИзменения.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменССайтом КАК ОбменССайтом
	|				ПО НоменклатураИзменения.Узел = ОбменССайтом.Ссылка) КАК ВЗ_Изменения
	|		ПО НоменклатураСпр.Ссылка = ВЗ_Изменения.Ссылка
	|ГДЕ
	|	НоменклатураСпр.ВыгружатьНаСайт = ИСТИНА
	|	И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКартинки.КлючСтроки,
	|	НоменклатураКартинки.Расширение,
	|	НоменклатураКартинки.Ссылка КАК Ссылка,
	|	НоменклатураКартинки.ИД
	|ИЗ
	|	Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НоменклатураКартинки.ЭтоОсновноеИзображение УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПризнакиДляСайта.Ссылка,
	|	ПризнакиДляСайта.РасширениеФайлаПиктограммы,
	|	ПризнакиДляСайта.Пиктограмма
	|ИЗ
	|	Справочник.ФишкиКратко КАК ПризнакиДляСайта
	|ГДЕ
	|	ПризнакиДляСайта.РасширениеФайлаПиктограммы <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСвойстваДляСайта.Ссылка,
	|	НоменклатураСвойстваДляСайта.Фишка,
	|	НоменклатураСвойстваДляСайта.Фишка.Наименование
	|ИЗ
	|	Справочник.Номенклатура.ФишкиНаЦенник КАК НоменклатураСвойстваДляСайта
	|ГДЕ
	|	НоменклатураСвойстваДляСайта.Фишка <> ЗНАЧЕНИЕ(Справочник.ФишкиКратко.ПустаяСсылка)
	|	И НоменклатураСвойстваДляСайта.Фишка.РасширениеФайлаПиктограммы <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАкции.Ссылка,
	|	НоменклатураАкции.ТипСкидки,
	|	НоменклатураАкции.ПриПокупкеШтук,
	|	НоменклатураАкции.ДействуетЦена_Скидка,
	|	НоменклатураАкции.ДатаОкончания,
	|	НоменклатураАкции.ДатаНачала
	|ИЗ
	|	Справочник.Номенклатура.Акции КАК НоменклатураАкции
	|ГДЕ
	|	НоменклатураАкции.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(&ДатаСреза, ДЕНЬ) МЕЖДУ НоменклатураАкции.ДатаНачала И НоменклатураАкции.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Владелец,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК СТРОКА(150)) КАК Место
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|	И ХарактеристикиНоменклатуры.Владелец В ИЕРАРХИИ(&ФруктыОвощи)";
	
	ИмяФайлаИксмл = КаталогВременныхФайлов() + "\goods" + Формат(ТекущаяДата(), "ДФ=HHssmm") + ".xml";
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКартинки = Результаты[1].Выгрузить();
	ТабСвойства = Результаты[2].Выгрузить();
	ТабСвойства.Колонки.Добавить("ФайлНаСайте");
	ТабСвойстваТоваров = Результаты[3].Выгрузить();
	ТабАкции = Результаты[4].Выгрузить();
	ТабМеста = Результаты[5].Выгрузить();
	
	Для Каждого СтрокаСвойство Из ТабСвойства Цикл
		СтрокаСвойство.ФайлНаСайте = "img/prop/" + Строка(СтрокаСвойство.Ссылка.УникальныйИдентификатор()) + СтрокаСвойство.РасширениеФайлаПиктограммы;
		ИмяВремФайла = ПолучитьИмяВременногоФайла(СтрокаСвойство.РасширениеФайлаПиктограммы);
		СтрокаСвойство.Пиктограмма.Получить().Записать(ИмяВремФайла);
		Попытка
			Сервер.Записать(ИмяВремФайла, СтрокаСвойство.ФайлНаСайте);
		Исключение
		КонецПопытки;
		УдалитьФайлы(ИмяВремФайла);
	КонецЦикла;
	
	ВключенаВыгрузкаОстатков = Истина; // пока не включено, включил 2016-11-21
	ТекДатаЮникс = ТекущаяДата() - '19700101';
	
	ТабРейтингиТоваров = Новый ТаблицаЗначений();
	ТабРейтингиТоваров.Колонки.Добавить("Товар");
	ТабРейтингиТоваров.Колонки.Добавить("Рейтинг");
	
	ТабРейтингиМагазинов = Новый ТаблицаЗначений();
	ТабРейтингиМагазинов.Колонки.Добавить("Магазин");
	ТабРейтингиМагазинов.Колонки.Добавить("Рейтинг");
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрЗапрос = "SELECT UINTov._Fld4946 as TovarUID
	|      ,MAX(RT.reiting_avg) reiting_avg
	|FROM [Reports].[dbo].[reiting_tov] as RT (nolock)
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON RT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|where RT.id_kontr is null
	|GROUP BY
	|	UINTov._Fld4946";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТаб = ТабРейтингиТоваров.Добавить();
			СтрокаТаб.Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаТаб.Рейтинг = Rs.Fields("reiting_avg").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	СтрЗапрос = "SELECT CAST(master.dbo.Binary2UID(TT.Ref) as nvarchar(36)) as TTUID
	|     ,MAX(Rates.reiting_avg) as reiting_avg
	| FROM [Reports].[dbo].[reiting_Shop] Rates
	| LEFT OUTER JOIN [M2].[dbo].[tt] as TT ON Rates.ShopNo = TT.N
	|GROUP BY CAST(master.dbo.Binary2UID(TT.Ref) as nvarchar(36))";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТаб = ТабРейтингиМагазинов.Добавить();
			СтрокаТаб.Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
			СтрокаТаб.Рейтинг = Rs.Fields("reiting_avg").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если ВключенаВыгрузкаОстатков Тогда
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		СтрЗапрос = "create table #ls1(id_tt int, id_tov int, q numeric(15, 3)) 
		|					
		|Insert into #ls1
		|EXEC [SMS_REPL].[dbo].[OST_for_WEB_BOT]
		|
		|CREATE INDEX index_idtt
		|ON #ls1(id_tt)
		|
		|CREATE INDEX index_id_tov
		|ON #ls1(id_tov)
		|					
		|SELECT
		|CAST(UINTov._Fld4946 as nvarchar(36)) TovUid
		|, CAST(UINTT._Fld4946 as nvarchar(36)) TTUid
		|, CAST(ls.q as numeric(15, 3)) q, ls.id_tt
		|FROM #ls1 as ls
		|INNER JOIN M2.dbo.tt as TTSpr ON ls.id_tt = TTSpr.id_TT and TTSpr.tt_format = 2
		|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON ls.id_tt = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
		|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON ls.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
		|
		|where CAST(ls.q as numeric(15, 3)) > 0 or CAST(ls.q as numeric(15, 3)) = -99999";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		ТабОстаткиМагазинов = Новый ТаблицаЗначений();
		ТабОстаткиМагазинов.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТабОстаткиМагазинов.Колонки.Добавить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабОстаткиМагазинов.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТабОстаткиМагазинов.Колонки.Добавить("id_tt", Новый ОписаниеТипов("Число"));
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаТаб = ТабОстаткиМагазинов.Добавить();
				//СтрокаТаб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUid").Value));
				СтрокаТаб.Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovUid").Value));
				СтрокаТаб.Остаток = Окр(Rs.Fields("q").Value, 1);
				СтрокаТаб.id_tt = Rs.Fields("id_tt").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		СтрЗапрос = "create table #act_ost ( id_tt int , id_tov int, q numeric(15,3), dateost date)
		|declare @ДатаСверки datetime = GETDATE()
		|insert into #act_ost
		|exec SMS_IZBENKA.dbo.OST_for_List_Ucheta @ДатаСверки
		|
		|select CAST(Tov.UIN as nvarchar(36)) TovUid
		|			, CAST(TT.UID as nvarchar(36)) TTUid
		|			, CAST(Ost.q as numeric(15, 3)) q, TT.id_tt
		|		from #act_ost as Ost
		|		INNER JOIN IzbenkaFin.dbo.TovBin2UID as Tov ON Ost.id_tov = Tov.id
		|		INNER JOIN IzbenkaFin.dbo.TTBin2UID as TT ON Ost.id_tt = TT.id_tt
		|		where CAST(Ost.q as numeric(15, 3)) > 0";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаТаб = ТабОстаткиМагазинов.Добавить();
				//СтрокаТаб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUid").Value));
				СтрокаТаб.Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovUid").Value));
				СтрокаТаб.Остаток = Окр(Rs.Fields("q").Value, 1);
				СтрокаТаб.id_tt = Rs.Fields("id_tt").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ТабОстаткиМагазинов.Индексы.Добавить("Товар");
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК KIRN 2018.03.19 ИП-00018161 
		//ЭлементДом = ДокументДом.СоздатьЭлемент("upd");
		//ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(Выборка.БылиИзменения, "1", ""));
		//ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//---АК KIRN 
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Описание));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		ЭлементДом = ДокументДом.СоздатьЭлемент("image");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если СтрокиКартинки.Количество() > 0 Тогда
			ТекстКартинки = "";
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				Если ЗначениеЗаполнено(СтрокаКартинка.КлючСтроки) Тогда
					ИмяФайлаКартинки = КаталогКартинок + Строка(СтрокаКартинка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
					Файл = Новый Файл(ИмяФайлаКартинки);
					Если Файл.Существует() Тогда
						ИмяФайлаКартинкиПолучатель = "img/" + Формат(СтрокаКартинка.ИД, "ЧН=; ЧГ=0") + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
						ФайлыФтп = Сервер.НайтиФайлы(ИмяФайлаКартинкиПолучатель);
						Если ФайлыФтп.Количество() = 0
							ИЛИ ФайлыФтп[0].Размер() <> Файл.Размер() Тогда
							Сервер.Записать(ИмяФайлаКартинки, ИмяФайлаКартинкиПолучатель);
						КонецЕсли;
						ТекстКартинки = ТекстКартинки + ?(ЗначениеЗаполнено(ТекстКартинки), ";", "") + ИмяФайлаКартинкиПолучатель;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстКартинки);
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//ЭлементДом = ДокументДом.СоздатьЭлемент("new");
		//ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.БаннерНаГлавную, "БЛ=0; БИ=1"));
		//ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("price");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Цел(Выборка.Цена), "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("unit");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ЕдИзм));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("consist");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Состав));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("caloric");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ПищеваяЦенность));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("shelflife");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СрокГодности));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		Если Выборка.ЕдИзм <> "кг" Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.МассаУпаковки));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//+++ AK suvv 2018.08.28 ИП-00019646
	    ИначеЕсли Выборка.ЕдиницаИзмеренияДляСайта = "Уп" Тогда
		    ЭлементДом = ДокументДом.СоздатьЭлемент("weight");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ?(Выборка.ОднаУпаковкаСодержит <> 0, ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ОднаУпаковкаСодержит) + " г"), ДокументДом.СоздатьТекстовыйУзел(""));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//--- AK suvv
		КонецЕсли;
		
		Категории = СокрЛП(Выборка.ГруппаНоменклатуры) + ?(ЗначениеЗаполнено(Выборка.ГруппаНоменклатурыРодитель), "|" + СокрЛП(Выборка.ГруппаНоменклатурыРодитель), "");
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("category");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Категории);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		КатегорииПорядок = Формат(Выборка.ПорядокСортировкиГруппаНоменклатуры, "ЧН=; ЧГ=0") + ?(ЗначениеЗаполнено(Выборка.ПорядокСортировкиГруппаНоменклатурыРодитель), "|" + Формат(Выборка.ПорядокСортировкиГруппаНоменклатурыРодитель, "ЧН=; ЧГ=0"), "");
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("categorySort");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(КатегорииПорядок);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("new");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Новинка));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("newm");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если Выборка.Новинка И ТабКартинки.Найти(Выборка.Ссылка, "Ссылка") <> Неопределено Тогда
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("1");
		Иначе
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("0");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		СтрокиСвойство = ТабСвойстваТоваров.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		Для Каждого СтрокаСвойство Из СтрокиСвойство Цикл
			ЭлементДом = ДокументДом.СоздатьЭлемент("properties");
			ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ЭлементДом = ДокументДом.СоздатьЭлемент("property");
			ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(СтрокаСвойство.ФишкаНаименование));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			СтрокаИмяФайла = ТабСвойства.Найти(СтрокаСвойство.Фишка, "Ссылка");
			ЭлементДом = ДокументДом.СоздатьЭлемент("icon");
			ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(СтрокаИмяФайла.ФайлНаСайте));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		КонецЦикла;
		
		СтрокаАкции = ТабАкции.Найти(Выборка.Ссылка, "Ссылка");
		Если СтрокаАкции <> Неопределено Тогда
			Если СтрокаАкции.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте Тогда
				ЭлементДом = ДокументДом.СоздатьЭлемент("startdate");
				ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ДатаНачала - '19700101', "ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("cardprice");
				ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				ЭлементДом = ДокументДом.СоздатьЭлемент("value");
				ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Окр(Выборка.Цена - Выборка.Цена*СтрокаАкции.ДействуетЦена_Скидка / 100, 0), "ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				//ЭлементДом = ДокументДом.СоздатьЭлемент("startdate");
				//ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				//ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ДатаНачала - '19700101', "ЧГ=0"));
				//ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("enddate");
				ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				Если СтрокаАкции.ДатаОкончания >= '20700101' Тогда
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
				Иначе	
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ДатаОкончания - '19700101', "ЧГ=0"));
				КонецЕсли;	
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
			ИначеЕсли СтрокаАкции.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.ПриПокупкеНесколькихШтук Тогда
				ЭлементДом = ДокументДом.СоздатьЭлемент("startdate");
				ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ДатаНачала - '19700101', "ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("fewunitsprice");
				ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("value");
				ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ДействуетЦена_Скидка, "ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("quantity");
				ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ПриПокупкеШтук, "ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("startdate");
				ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ДатаНачала - '19700101', "ЧГ=0"));
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
				
				ЭлементДом = ДокументДом.СоздатьЭлемент("enddate");
				ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
				Если СтрокаАкции.ДатаОкончания >= '20700101' Тогда
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел("");
				Иначе	
					ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(СтрокаАкции.ДатаОкончания - '19700101', "ЧГ=0"));
				КонецЕсли;	
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
			КонецЕсли;	
		КонецЕсли;	
		
		//+++АК KIRN 2018.03.19 ИП-00018161 
		//ТекстОстатков = "";
		//
		//Если ВключенаВыгрузкаОстатков Тогда
		//	
		//	ЭлементДом = ДокументДом.СоздатьЭлемент("time");
		//	ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//	ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(ТекДатаЮникс, "ЧГ=0"));
		//	ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//	ТекстОстатков = "";
		//	
		//	СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар", Выборка.Ссылка));
		//	ЕстьНеМинусовые = Ложь;
		//	Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
		//		Если СтрокаОстаток.Остаток > 0 Тогда
		//			ЕстьНеМинусовые = Истина;
		//		КонецЕсли;	
		//		ТекстОстатков = ТекстОстатков + ?(ЗначениеЗаполнено(ТекстОстатков), "|", "") + СокрЛП(Формат(Цел(СтрокаОстаток.id_tt), "ЧН=; ЧГ=0"))
		//		+ ":" + СокрЛП(Формат(СтрокаОстаток.Остаток, "ЧРД=.; ЧН=; ЧГ=0"));
		//		
		//	КонецЦикла;
		//КонецЕсли;
		//
		//Если ЕстьНеМинусовые = Ложь Тогда
		//	ТекстОстатков = "";
		//КонецЕсли;	
		//
		//ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
		//ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстОстатков);
		//ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//---АК KIRN ИП-00018161
		
		СтрокиМеста = ТабМеста.НайтиСтроки(Новый Структура("Владелец", Выборка.Ссылка));
		Места = "";
		Для Каждого СтрокаМеста Из СтрокиМеста Цикл
			Места = Места + ?(ЗначениеЗаполнено(Места), "; ", "") + СокрЛП(СтрокаМеста.Место);
		КонецЦикла;
		
		Места = ""; //+++АК MIND 2018.01.23 отключена передача мест по просьбе Марии Петровской
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("location");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Места);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		СтрокаСРейтингом = ТабРейтингиТоваров.Найти(Выборка.Ссылка, "Товар");
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(?(СтрокаСРейтингом = Неопределено, 0, СтрокаСРейтингом.Рейтинг), "ЧДЦ=1; ЧРД=.; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
	КонецЦикла;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.ОбменССайтом.НайтиПоКоду("Сайт"));
	
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	Сервер.Записать(ИмяФайлаИксмл, "goods-new.xml");
	Если Сервер2 <> Неопределено Тогда
		Сервер2.Записать(ИмяФайлаИксмл, "goods-new.xml");
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаИксмл);
	
	//теперь выгрузим остатки товаров
	
	//Если ВключенаВыгрузкаОстатков Тогда
	//	ИмяФайлаИксмл = КаталогВременныхФайлов() + "\goods_availability.xml";
	//	ЗаписьИКСМЛ = Новый ЗаписьXML();
	//	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	//	ДокументДом = Новый ДокументDOM("http://items", "list");
	//	КорневойЭлемент = ДокументДом.ЭлементДокумента;
	//	
	//	Выборка.Сбросить();
	//	Пока Выборка.Следующий() Цикл
	//		
	//		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
	//		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
	//		
	//		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
	//		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
	//		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_tov, "ЧН=; ЧГ=0"));
	//		ТекУзелДом.ДобавитьДочерний(ТекстДом);
	//		
	//		ТекстОстатков = "";
	//		
	//		ЭлементДом = ДокументДом.СоздатьЭлемент("time");
	//		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
	//		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(ТекДатаЮникс, "ЧГ=0"));
	//		ТекУзелДом.ДобавитьДочерний(ТекстДом);
	//		ТекстОстатков = "";
	//		
	//		СтрокиОстатки = ТабОстаткиМагазинов.НайтиСтроки(Новый Структура("Товар", Выборка.Ссылка));
	//		Для Каждого СтрокаОстаток Из СтрокиОстатки Цикл
	//			ТекстОстатков = ТекстОстатков + ?(ЗначениеЗаполнено(ТекстОстатков), "|", "") + СокрЛП(Формат(Цел(СтрокаОстаток.id_tt), "ЧН=; ЧГ=0"))
	//			+ ":" + СокрЛП(Формат(СтрокаОстаток.Остаток, "ЧРД=.; ЧН=; ЧГ=0"));
	//			
	//		КонецЦикла;
	//		
	//		ЭлементДом = ДокументДом.СоздатьЭлемент("shops");
	//		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
	//		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ТекстОстатков);
	//		ТекУзелДом.ДобавитьДочерний(ТекстДом);
	//		
	//	КонецЦикла;
	//КонецЕсли;	
	//			
	//ЗаписьДом = Новый ЗаписьDOM();
	//ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	//ЗаписьИКСМЛ.Закрыть();
	//
	//Сервер.Записать(ИмяФайлаИксмл, "goods_availability.xml");
	
	
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.ДатаОткрытия,
	|	СтруктурныеЕдиницы.id_TT,
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.Город.ПолноеНаименование КАК Город,
	|	СтруктурныеЕдиницы.Адрес,
	//+++ AK suvv 2018.10.15 ИП-00019795
	//|	СтруктурныеЕдиницы.ЗакажиИЗабери,
	|	ЕСТЬNULL(СвойстаСЕЗакажиИЗабери.Значение, ЛОЖЬ) КАК ЗакажиИЗабери,
	//--- AK suvv
	//+++ AK suvv 21.08.2018 ИП-00019300
	|	СтруктурныеЕдиницы.Собеседования,
	|	СтруктурныеЕдиницы.Собеседования1,
	|	СтруктурныеЕдиницы.Собеседования2,
	|	СтруктурныеЕдиницы.Собеседования3,
	|	СтруктурныеЕдиницы.Собеседования4,
	//--- AK suvv
	|	СтруктурныеЕдиницы.ТелефонныйНомер1,
	|	СтруктурныеЕдиницы.ТелефонныйНомер2,
	|	СтруктурныеЕдиницы.КоординатыШирота,
	|	СтруктурныеЕдиницы.КоординатыДолгота,
	|	СтруктурныеЕдиницы.ТипРозничнойТочки,
	|	СтруктурныеЕдиницы.СтатусТорговойТочки,
	|	СтруктурныеЕдиницы.КомментарийДляСайта,
	|	ЕСТЬNULL(ГрафикиРаботыМагазинаСрезПоследних.График.Наименование, СтруктурныеЕдиницы.ГрафикРаботыМагазина.Наименование) КАК ГрафикРаботы,
	|	СтруктурныеЕдиницы.НазваниеДляСайта,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.СкороОткрытие)
	//+++ AK suvv 2018.09.11 ИП-00019795
	|				ИЛИ СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен)
	//--- AK suvv
	|			ТОГДА СтруктурныеЕдиницы.ДатаОткрытияДляСайта
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДатаОткрытияДляСайта,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Флагман)
	|			ТОГДА ""Да""
	|		ИНАЧЕ ""Нет""
	|	КОНЕЦ КАК ЭтоФлагман,
	//+++ AK suvv 2018.10.15 ИП-00019795
	//|	ВЫБОР
	//|		КОГДА СтруктурныеЕдиницы.ДляДетей
	//|			ТОГДА ""Для детей""
	//|		ИНАЧЕ """"
	//|	КОНЕЦ КАК ДляДетей,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СвойстваСЕДляДетей.Значение, """") = ИСТИНА
	|			ТОГДА ""Для детей""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДляДетей,
	//--- AK suvv
	|	ЕСТЬNULL(СтруктурныеЕдиницы.Город.РегионДляСайта.Код, 0) КАК КодРегиона
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыМагазина.СрезПоследних(&ТекДата, ) КАК ГрафикиРаботыМагазинаСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = ГрафикиРаботыМагазинаСрезПоследних.Магазин
	//+++ AK suvv 2018.10.15 ИП-00019795
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК СвойстваСЕДляДетей
	|		ПО (СтруктурныеЕдиницы.Ссылка = СвойстваСЕДляДетей.СтруктурнаяЕдиница
	|				И СвойстваСЕДляДетей.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ДляДетей))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК СвойстаСЕЗакажиИЗабери
	|		ПО (СтруктурныеЕдиницы.Ссылка = СвойстаСЕЗакажиИЗабери.СтруктурнаяЕдиница
	|				И СвойстаСЕЗакажиИЗабери.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ЗакажиИЗабери))
	//--- AK suvv
	//+++АК CISA 2018.11.14 ИП-00019730
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК ЗначенияСвойствСтруктурныхЕдиниц
	|		ПО (СтруктурныеЕдиницы.Ссылка = ЗначенияСвойствСтруктурныхЕдиниц.СтруктурнаяЕдиница
	|			И ЗначенияСвойствСтруктурныхЕдиниц.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ВыездноеМероприятие))
    //---АК CISA
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	И СтруктурныеЕдиницы.НомерТочки <> 0
	//+++ AK suvv 2018.08.29 ИП-00019413.01 - добавлен статус "Приостановлен"
	|	И СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Открыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.СкороОткрытие), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
	//+++АК mika 2018.05.24 ИП-00018792 (Микромаркет)
	|	И СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Микромаркет)
	//---АК mika
	//+++АК CISA 2018.11.14 ИП-00019730
	|	И (ЗначенияСвойствСтруктурныхЕдиниц.Значение ЕСТЬ NULL ИЛИ НЕ ЗначенияСвойствСтруктурныхЕдиниц.Значение)
	//---АК CISA
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницыСтанцииМетро.Ссылка,
	|	СтруктурныеЕдиницыСтанцииМетро.Метро
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.СтанцииМетро КАК СтруктурныеЕдиницыСтанцииМетро
	//+++АК CISA 2018.11.14 ИП-00019730
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК ЗначенияСвойствСтруктурныхЕдиниц
	|		ПО (СтруктурныеЕдиницыСтанцииМетро.Ссылка = ЗначенияСвойствСтруктурныхЕдиниц.СтруктурнаяЕдиница
	|			И ЗначенияСвойствСтруктурныхЕдиниц.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ВыездноеМероприятие))
	//---АК CISA
	//+++АК mika 2018.05.24 ИП-00018792 (Микромаркет)
	|ГДЕ
	|	СтруктурныеЕдиницыСтанцииМетро.Ссылка.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Микромаркет)
	//+++АК CISA 2018.11.14 ИП-00019730
	|	И (ЗначенияСвойствСтруктурныхЕдиниц.Значение ЕСТЬ NULL ИЛИ НЕ ЗначенияСвойствСтруктурныхЕдиниц.Значение)
	//---АК CISA
	|";
	
	ИмяФайлаИксмл = КаталогВременныхФайлов() + "\TT" + Формат(ТекущаяДата(), "ДФ=HHssmm") + ".xml";
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;			   
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКешМетро = Результаты[1].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id_TT");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id_TT, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.НазваниеДляСайта));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("city");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Город));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		СтрокаМетро = "";
		СтрокиКешМетро = ТабКешМетро.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		Для Каждого СтрокаКеш Из СтрокиКешМетро Цикл
			СтрокаМетро = СтрокаМетро + ?(ЗначениеЗаполнено(СтрокаМетро), ";", "") + СтрокаКеш.Метро;
		КонецЦикла;	
		ЭлементДом = ДокументДом.СоздатьЭлемент("metro");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(СтрокаМетро));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("address");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Адрес));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("latitude");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.КоординатыШирота, "ЧРД=.; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("longitude");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.КоординатыДолгота, "ЧРД=.; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("type");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("ВкусВилл");
			//+++АК vasa 2018.12.03 ИП-00020287.01
		ИначеЕсли Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.ПространствоВкуса Тогда
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Муравейник");
			//+++АК vasa
		Иначе	
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Избёнка");
		КонецЕсли;	
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК vasa 2018.12.07 ИП-00020672
		ВыгрузкаНаСайтТелефоны(ДокументДом, ЭлементУзелДом, Выборка);
		//+++АК vasa
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("status");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.СтатусТорговойТочки));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("openingdate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.ДатаОткрытияДляСайта);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++АК KIRN 2018.03.19 ИП-00018161, ИП-00018161.01
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(""+Выборка.КомментарийДляСайта);		
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++ AK suvv 21.08.2018 ИП-00019300
		//Если ЗначениеЗаполнено(Выборка.ДляДетей) или Выборка.ЗакажиИЗабери Тогда
		Если ЗначениеЗаполнено(Выборка.ДляДетей) или Выборка.ЗакажиИЗабери или Выборка.Собеседования Тогда
		//--- AK suvv	
			ЭлементДом = ДокументДом.СоздатьЭлемент("features");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			
			Если ЗначениеЗаполнено(Выборка.ДляДетей) Тогда
				ЭлементДом2 = ДокументДом.СоздатьЭлемент("feature");
				ТекУзелДом2 = ТекУзелДом.ДобавитьДочерний(ЭлементДом2);
				ТекстДом2 = ДокументДом.СоздатьТекстовыйУзел("Для детей");		
				ТекУзелДом2.ДобавитьДочерний(ТекстДом2);
			КонецЕСли;
			Если Выборка.ЗакажиИЗабери Тогда
				ЭлементДом2 = ДокументДом.СоздатьЭлемент("feature");
				ТекУзелДом2 = ТекУзелДом.ДобавитьДочерний(ЭлементДом2);
				ТекстДом2 = ДокументДом.СоздатьТекстовыйУзел("Закажи и забери");		
				ТекУзелДом2.ДобавитьДочерний(ТекстДом2);
			КонецЕСли;
		КонецЕСли;
		
		//ЭлементДом = ДокументДом.СоздатьЭлемент("order");
		//ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(Выборка.ЗакажиИЗабери,"1","0"));
		//ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//+++ AK suvv 2018.09.04 ИП-00019300
		ЭлементДом = ДокументДом.СоздатьЭлемент("interview");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(Выборка.Собеседования, ПолучитьВремяПроведенияСобеседований(Выборка), ""));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		//--- AK suvv
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("mphone");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(Выборка.ЗакажиИЗабери,""+СокрЛП(Выборка.ТелефонныйНомер1)+?(ЗначениеЗаполнено(СокрЛП(Выборка.ТелефонныйНомер2)),", "+СокрЛП(Выборка.ТелефонныйНомер2),""),""));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);

		//ЭлементДом = ДокументДом.СоздатьЭлемент("flagman");
		//ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.ЭтоФлагман);
		//ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//ЭлементДом = ДокументДом.СоздатьЭлемент("kids");
		//ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		//ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.ДляДетей);
		//ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		//---АК KIRN 
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("workhours");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ГрафикРаботы));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);

		ЭлементДом = ДокументДом.СоздатьЭлемент("reg");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.КодРегиона, "ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		СтрокаСРейтингом = ТабРейтингиМагазинов.Найти(Выборка.Ссылка, "Магазин");
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("rate");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(?(СтрокаСРейтингом = Неопределено, 0, СтрокаСРейтингом.Рейтинг), "ЧДЦ=1; ЧРД=.; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
	КонецЦикла;	
	
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	Сервер.Записать(ИмяФайлаИксмл, "TT.xml");
	Если Сервер2 <> Неопределено Тогда
		Сервер2.Записать(ИмяФайлаИксмл, "TT.xml");
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаИксмл);
	
	МассивОбращений = Новый Массив();
	МассивОбращений.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("1"));
	МассивОбращений.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("2"));
	МассивОбращений.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("3"));
	МассивОбращений.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("4"));
	МассивОбращений.Добавить(Справочники.ИсточникиОбращений.НайтиПоКоду("5"));
	ЗапросОбращения = Новый Запрос();
	ЗапросОбращения.УстановитьПараметр("ДатаНачГода", НачалоГода(ТекущаяДата()));
	ЗапросОбращения.УстановитьПараметр("ДатаКонГода", КонецГода(ТекущаяДата()));
	ЗапросОбращения.УстановитьПараметр("МассивОбращений", МассивОбращений);
	ЗапросОбращения.Текст = "ВЫБРАТЬ
	|	СУММА(1) КАК Колво
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	ОбращенияПокупателей.ДатаДок МЕЖДУ &ДатаНачГода И &ДатаКонГода
	|	И ОбращенияПокупателей.ИсточникОбращения В(&МассивОбращений)";
	
	Выборка = ЗапросОбращения.Выполнить().Выбрать();
	
	ИмяФайлаИксмл = КаталогВременныхФайлов() + "\support_sum" + Формат(ТекущаяДата(), "ДФ=HHssmm") + ".xml";
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;
	
	
	
	ЭлементДом = ДокументДом.СоздатьЭлемент("sum");
	ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
	Если Выборка.Следующий() Тогда
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.Колво, "ЧГ=0"));
	Иначе
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел("0");
	КонецЕсли;	
	ЭлементУзелДом.ДобавитьДочерний(ТекстДом);
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	Сервер.Записать(ИмяФайлаИксмл, "support_sum.xml");
	Если Сервер2 <> Неопределено Тогда
		Сервер2.Записать(ИмяФайлаИксмл, "support_sum.xml");
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаИксмл);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДатаМинус30", ТекущаяДата() - 30*86400);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОписаниеАкцийДляСайта.Ссылка,
	|	ОписаниеАкцийДляСайта.Наименование,
	|	ОписаниеАкцийДляСайта.ДатаНачала,
	|	ОписаниеАкцийДляСайта.ДатаОкончания,
	|	ОписаниеАкцийДляСайта.Избенка,
	|	ОписаниеАкцийДляСайта.Вкусвилл,
	|	ОписаниеАкцийДляСайта.ОписаниеСрокаДействия,
	|	ОписаниеАкцийДляСайта.Анонс,
	|	ОписаниеАкцийДляСайта.Описание,
	|	ОписаниеАкцийДляСайта.РасширениеФайла,
	|	ОписаниеАкцийДляСайта.ИД,
	|	ОписаниеАкцийДляСайта.Активная
	|ИЗ
	|	Справочник.ОписаниеАкцийДляСайта КАК ОписаниеАкцийДляСайта
	|ГДЕ
	|	ОписаниеАкцийДляСайта.НеВыгружатьНаСайт = ЛОЖЬ
	|	И ОписаниеАкцийДляСайта.ДатаОкончания >= &ТекДатаМинус30
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписаниеАкцийДляСайтаТовары.Ссылка,
	|	ОписаниеАкцийДляСайтаТовары.Номенклатура.id_tov КАК id_tov
	|ИЗ
	|	Справочник.ОписаниеАкцийДляСайта.Товары КАК ОписаниеАкцийДляСайтаТовары
	|ГДЕ
	|	ОписаниеАкцийДляСайтаТовары.Ссылка.НеВыгружатьНаСайт = ЛОЖЬ
	|	И ОписаниеАкцийДляСайтаТовары.Ссылка.ДатаОкончания >= &ТекДатаМинус30";
	
	ИмяФайлаИксмл = КаталогВременныхФайлов() + "\sales_final" + Формат(ТекущаяДата(), "ДФ=HHssmm") + ".xml";
	ЗаписьИКСМЛ = Новый ЗаписьXML();
	ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
	ДокументДом = Новый ДокументDOM("http://items", "list");
	КорневойЭлемент = ДокументДом.ЭлементДокумента;			   
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКешТовары = Результаты[1].Выгрузить();
	
	КаталогАкций = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогАкций, 1) <> "\" Тогда
		КаталогАкций = КаталогАкций + "\";
	КонецЕсли;	
	КаталогАкций = КаталогАкций + "АкцииДляСайта\";
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("item");
		ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("id");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ИД, "ЧН=; ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("title");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("types");
		ТекУзелСвойства = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		Если Выборка.Избенка Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("type");
			ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Избенка");
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		КонецЕсли;
		
		Если Выборка.Вкусвилл Тогда
			ЭлементДом = ДокументДом.СоздатьЭлемент("type");
			ТекУзелДом = ТекУзелСвойства.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел("Вкусвилл");
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РасширениеФайла) Тогда
			ИмяФайлаКартинки = КаталогАкций + Строка(Выборка.Ссылка.УникальныйИдентификатор()) + ?(Лев(Выборка.РасширениеФайла, 1) = ".", "", ".") + Выборка.РасширениеФайла;
			Файл = Новый Файл(ИмяФайлаКартинки);
			Если Файл.Существует() Тогда
				ИмяФайлаКартинкиПолучатель = "img/sales/" + Строка(Выборка.Ссылка.УникальныйИдентификатор()) + ?(Лев(Выборка.РасширениеФайла, 1) = ".", "", ".") + Выборка.РасширениеФайла;
				ФайлыФтп = Сервер.НайтиФайлы(ИмяФайлаКартинкиПолучатель);
				Если ФайлыФтп.Количество() = 0
					ИЛИ ФайлыФтп[0].Размер() <> Файл.Размер() Тогда
					Сервер.Записать(ИмяФайлаКартинки, ИмяФайлаКартинкиПолучатель);
				КонецЕсли;
				ЭлементДом = ДокументДом.СоздатьЭлемент("image");
				ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
				ТекстДом = ДокументДом.СоздатьТекстовыйУзел(ИмяФайлаКартинкиПолучатель);
				ТекУзелДом.ДобавитьДочерний(ТекстДом);
			КонецЕсли;
		КонецЕсли;	
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("start");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ДатаНачала - '19700101', "ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("end");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(КонецДня(Выборка.ДатаОкончания) - '19700101', "ЧГ=0"));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("duration");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.ОписаниеСрокаДействия));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("summary");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Анонс));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("description");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Описание));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("active");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Активная));
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
		СтрокиТовары = ТабКешТовары.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		СтрокаТовары = "";
		Для Каждого СтрокаТовар Из СтрокиТовары Цикл
			СтрокаТовары = СтрокаТовары + ?(ЗначениеЗаполнено(СтрокаТовары), "|", "") + Формат(СтрокаТовар.id_tov, "ЧГ=0");
		КонецЦикла;	
		
		ЭлементДом = ДокументДом.СоздатьЭлемент("products");
		ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
		ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СтрокаТовары);
		ТекУзелДом.ДобавитьДочерний(ТекстДом);
		
	КонецЦикла;	
	
	
	ЗаписьДом = Новый ЗаписьDOM();
	ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
	ЗаписьИКСМЛ.Закрыть();
	ЗаписьИКСМЛ = Неопределено;
	
	Сервер.Записать(ИмяФайлаИксмл, "sales.xml");
	Если Сервер2 <> Неопределено Тогда
		Сервер2.Записать(ИмяФайлаИксмл, "sales.xml");
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаИксмл);
	
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Зуп();	
	V82COMConnector= Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Зуп() + ".COMConnector");
	Попытка
		Base1С_ZUP = V82COMConnector.Connect(СтрокаПодключения);
	Исключение
		
		Base1С_ZUP = Неопределено;
		//Предупреждение("Ошибка подключения!");
	КонецПопытки;
	
	Если Base1С_ZUP <> Неопределено Тогда
		
		ИмяФайлаИксмл = КаталогВременныхФайлов() + "\vacancy" + Формат(ТекущаяДата(), "ДФ=HHssmm") + ".xml";
		ЗаписьИКСМЛ = Новый ЗаписьXML();
		ЗаписьИКСМЛ.ОткрытьФайл(ИмяФайлаИксмл);
		ДокументДом = Новый ДокументDOM("http://items", "list");
		КорневойЭлемент = ДокументДом.ЭлементДокумента;			   
		
		Запрос = Base1С_ZUP.NewObject("Запрос");
		Запрос.Текст = "ВЫБРАТЬ
		|	АК_ВакансииДляСайта.Департамент КАК Департамент,
		|	АК_ВакансииДляСайта.ПорядокСортировки КАК ПорядокСортировки,
		|	АК_ВакансииДляСайта.Условия,
		|	АК_ВакансииДляСайта.Обязанности,
		|	АК_ВакансииДляСайта.Требования,
		|	АК_ВакансииДляСайта.id,
		|	АК_ВакансииДляСайта.Наименование,
		|	АК_ВакансииДляСайта.Ссылка
		|ИЗ
		|	Справочник.АК_ВакансииДляСайта КАК АК_ВакансииДляСайта
		|ГДЕ
		|	АК_ВакансииДляСайта.ВыгружатьНаСайт = ИСТИНА
		|	И АК_ВакансииДляСайта.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Департамент,
		|	ПорядокСортировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АК_ВакансииДляСайтаГорода.Ссылка,
		|	АК_ВакансииДляСайтаГорода.Город
		|ИЗ
		|	Справочник.АК_ВакансииДляСайта.Города КАК АК_ВакансииДляСайтаГорода";
		
		
		Результаты = Запрос.ВыполнитьПакет();
		Выборка = Результаты.Получить(0).Выбрать();
		ТабГорода = Результаты.Получить(1).Выгрузить();
		
		МассивПрефиксыРегионов = Новый Массив();
		МассивПрефиксыРегионов.Добавить("");
		МассивПрефиксыРегионов.Добавить("klg.");
		МассивПрефиксыРегионов.Добавить("vla.");
		МассивПрефиксыРегионов.Добавить("tul.");
		МассивПрефиксыРегионов.Добавить("ryz.");
		МассивПрефиксыРегионов.Добавить("yar.");
		МассивПрефиксыРегионов.Добавить("tvr.");
		
		Пока Выборка.Следующий() Цикл
			ЭлементДом = ДокументДом.СоздатьЭлемент("item");
			ЭлементУзелДом = КорневойЭлемент.ДобавитьДочерний(ЭлементДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("id");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.id, "ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("title");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Наименование));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("dep");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(СокрЛП(Выборка.Департамент));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("dep_ord");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Формат(Выборка.ПорядокСортировки, "ЧН=; ЧГ=0"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("cond");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.Условия);
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("resp");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.Обязанности);
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("req");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(Выборка.Требования);
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			ТекстГорода = "";
			
			СтрокиКеш = ТабГорода.НайтиСтроки(Base1С_ZUP.NewObject("Структура", "Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаКеш Из СтрокиКеш Цикл
				Если ЗначениеЗаполнено(СтрокаКеш.Город) Тогда
					ГородСсылка = Справочники.РегионыДляСайта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаКеш.Город));
					Если Найти(ГородСсылка, "Объект не найден") = 0 Тогда
						ГородНаим = Формат(ГородСсылка.Код, "ЧГ=0");
						ТекстГорода = ТекстГорода + ?(ЗначениеЗаполнено(ТекстГорода), "|", "") + ГородНаим;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
			ЭлементДом = ДокументДом.СоздатьЭлемент("reg");
			ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
			ТекстДом = ДокументДом.СоздатьТекстовыйУзел(?(ЗначениеЗаполнено(ТекстГорода), ТекстГорода, "1"));
			ТекУзелДом.ДобавитьДочерний(ТекстДом);
			
			Для Каждого ЭлементМассив Из МассивПрефиксыРегионов Цикл
				ИмяФайла = ПолучитьИмяВременногоФайла(".xml");
				
				СерверДляЗапроса = ЭлементМассив + "vkusvill.ru";
				ТекстДляЗапроса = "vacancys/all_vacancys.xml?id=" + Формат(Выборка.id, "ЧН=; ЧГ=0");
				Соединение = Новый HTTPСоединение(СерверДляЗапроса);
				Соединение.Получить(ТекстДляЗапроса,ИмяФайла);
				
				Файл = Новый ЧтениеТекста(ИмяФайла);
				
				СтрокаФайл = Файл.ПрочитатьСтроку();
				Пока СтрокаФайл <> Неопределено Цикл
					Начало = Найти(СтрокаФайл, "<path>");
					Конец = Найти(СтрокаФайл, "</path>");
					Если Начало = 0 Тогда
						СтрокаФайл = Файл.ПрочитатьСтроку();
						Продолжить;
					КонецЕсли;	
					ТекстКаталога = Сред(СтрокаФайл, Начало + 6, Конец - Начало - 6);
					Попытка
						СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
						Если СпрОбъект.АйдиНаСайте <> ТекстКаталога Тогда
							СпрОбъект.АйдиНаСайте = ТекстКаталога;
							СпрОбъект.Записать();
						КонецЕсли;	
						Прервать;
					Исключение
					КонецПопытки;	
					СтрокаФайл = Файл.ПрочитатьСтроку();
				КонецЦикла;	
				Файл.Закрыть();
				
				УдалитьФайлы(ИмяФайла);
			КонецЦикла;	
			
		КонецЦикла;	
		
		ЗаписьДом = Новый ЗаписьDOM();
		ЗаписьДом.Записать(ДокументДом, ЗаписьИКСМЛ);
		ЗаписьИКСМЛ.Закрыть();
		ЗаписьИКСМЛ = Неопределено;
		
		Сервер.Записать(ИмяФайлаИксмл, "vacancy.xml");
		Если Сервер2 <> Неопределено Тогда
			Сервер2.Записать(ИмяФайлаИксмл, "vacancy.xml");
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайлаИксмл);
		
	КонецЕсли;
	
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Истина;
	
	//+++АК MIND 2018.01.29 данные по товарам будем прогружать только в определенные часы, для оптимизации
	МассивЧасов = Новый Массив();
	МассивЧасов.Добавить(6);
	МассивЧасов.Добавить(7);
	МассивЧасов.Добавить(22);
	МассивЧасов.Добавить(23);
	Если МассивЧасов.Найти(Час(ТекущаяДата())) <> Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла(".xml");
		
		SSL = Новый ЗащищенноеСоединениеOpenSSL(); 
		
		СерверДляЗапроса = "vkusvill.ru";
		ТекстДляЗапроса = "goods/all_goods.xml";
		Соединение = Новый HTTPСоединение(СерверДляЗапроса,,,,,,SSL);
						
		//
		Заголовки = Новый Соответствие;
		
		Заголовки.Вставить("type", "POST");
		Заголовки.Вставить("token", "708a3d4a-436e-4a5a-9cf0-7317108cab81");
		
		Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded");		
		
		//
		HTTPЗапрос = Новый HTTPЗапрос(ТекстДляЗапроса, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки("token=708a3d4a-436e-4a5a-9cf0-7317108cab81", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайла);
			
		ЧтениеКсмл = Новый ЧтениеXML();
		ЧтениеКсмл.ОткрытьФайл(ИмяФайла);
		
		ПостроителбДом = Новый ПостроительDOM();
		ДокументДом = ПостроителбДом.Прочитать(ЧтениеКсмл);
		
		ТабДанные = Новый ТаблицаЗначений();
		ТабДанные.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
		ТабДанные.Колонки.Добавить("ИдНаСайте", Новый ОписаниеТипов("Число"));
		ТабДанные.Колонки.Добавить("СсылкаНаКартинку", Новый ОписаниеТипов("Строка"));
		ТабДанные.Колонки.Добавить("СсылкаНаКартинку_Малое", Новый ОписаниеТипов("Строка"));
		
		Для Каждого ЭлементВерхний Из ДокументДом.ДочерниеУзлы Цикл
			Для Каждого ЭлементСписка Из ЭлементВерхний.ДочерниеУзлы Цикл
				СтрокаДоб = ТабДанные.Добавить();
				Для Каждого ЭлементАтрибут Из ЭлементСписка.ДочерниеУзлы Цикл
					Если ЭлементАтрибут.ИмяУзла = "id" Тогда
						СтрокаДоб.ИД = Число(ЭлементАтрибут.ТекстовоеСодержимое);
					ИначеЕсли ЭлементАтрибут.ИмяУзла = "path" Тогда	
						СтрокаДоб.ИдНаСайте = Число(СтрЗаменить(ЭлементАтрибут.ТекстовоеСодержимое, "/goods/", ""));
					ИначеЕсли ЭлементАтрибут.ИмяУзла = "img" Тогда		
						СтрокаДоб.СсылкаНаКартинку = СокрЛП(ЭлементАтрибут.ТекстовоеСодержимое);
					ИначеЕсли ЭлементАтрибут.ИмяУзла = "img_s" Тогда		
						СтрокаДоб.СсылкаНаКартинку_Малое = СокрЛП(ЭлементАтрибут.ТекстовоеСодержимое);	
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Таб", ТабДанные);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.ИД,
		               |	Таб.ИдНаСайте,
		               |	Таб.СсылкаНаКартинку,
					   |	Таб.СсылкаНаКартинку_Малое
		               |ПОМЕСТИТЬ ВТ_Данные
		               |ИЗ
		               |	&Таб КАК Таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Номенклатура.Ссылка,
		               |	ВТ_Данные.ИдНаСайте,
		               |	ВТ_Данные.СсылкаНаКартинку,
					   |	ВТ_Данные.СсылкаНаКартинку_Малое
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
		               |		ПО Номенклатура.id_tov = ВТ_Данные.ИД
		               |ГДЕ
		               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
		               |	И Номенклатура.ВыгружатьНаСайт = ИСТИНА
		               |	И (Номенклатура.АйдиТовараНаСайте <> ВТ_Данные.ИдНаСайте
		               |			ИЛИ (ВЫРАЗИТЬ(Номенклатура.СсылкаНаОсновноеИзображение КАК СТРОКА(200))) <> (ВЫРАЗИТЬ(ВТ_Данные.СсылкаНаКартинку КАК СТРОКА(200)))
					   |			ИЛИ (ВЫРАЗИТЬ(Номенклатура.СсылкаНаОсновноеИзображение_Малое КАК СТРОКА(200))) <> (ВЫРАЗИТЬ(ВТ_Данные.СсылкаНаКартинку_Малое КАК СТРОКА(200))))";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СпрОбъект.АйдиТовараНаСайте = Выборка.ИдНаСайте;
				СпрОбъект.СсылкаНаОсновноеИзображение = Выборка.СсылкаНаКартинку;
				СпрОбъект.СсылкаНаОсновноеИзображение_Малое = Выборка.СсылкаНаКартинку_Малое;
				СпрОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ЧтениеКсмл.Закрыть();
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;	
	
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".xml");
	
	СерверДляЗапроса = "vkusvill.ru";
	ТекстДляЗапроса = "shops/all_shops.xml";
	Соединение = Новый HTTPСоединение(СерверДляЗапроса);
	Соединение.Получить(ТекстДляЗапроса, ИмяФайла);
		
	ЧтениеКсмл = Новый ЧтениеXML();
	ЧтениеКсмл.ОткрытьФайл(ИмяФайла);
	
	ПостроителбДом = Новый ПостроительDOM();
	ДокументДом = ПостроителбДом.Прочитать(ЧтениеКсмл);
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ИдНаСайте", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементВерхний Из ДокументДом.ДочерниеУзлы Цикл
		Для Каждого ЭлементСписка Из ЭлементВерхний.ДочерниеУзлы Цикл
			СтрокаДоб = ТабДанные.Добавить();
			Для Каждого ЭлементАтрибут Из ЭлементСписка.ДочерниеУзлы Цикл
				Если ЭлементАтрибут.ИмяУзла = "Id" Тогда
					СтрокаДоб.ИД = Число(ЭлементАтрибут.ТекстовоеСодержимое);
				ИначеЕсли ЭлементАтрибут.ИмяУзла = "path" Тогда	
					СтрокаДоб.ИдНаСайте = Число(СтрЗаменить(ЭлементАтрибут.ТекстовоеСодержимое, "/shops/", ""));
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабДанные);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ИД,
	               |	Таб.ИдНаСайте
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	ВТ_Данные.ИдНаСайте
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
	               |		ПО СтруктурныеЕдиницы.id_TT = ВТ_Данные.ИД
	               |ГДЕ
	               |	СтруктурныеЕдиницы.АйдиНаСайте <> ВТ_Данные.ИдНаСайте";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.АйдиНаСайте = Выборка.ИдНаСайте;
			СпрОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ЧтениеКсмл.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	//+++АК MIND 2018.02.08 выгрузим плановый ассортимент на сайт в формате xls файла
	ТабДок = Новый ТабличныйДокумент();
	Макет = ПолучитьОбщийМакет("ПлановыйАссортиментДляСайта");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.ДатаДок = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	ТабДок.Вывести(Область);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыйАссортимент.Наименование КАК Наименование,
	               |	ПлановыйАссортимент.Родитель.Наименование КАК Подкатегория,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПлановыйАссортимент.Родитель.Родитель, ЗНАЧЕНИЕ(Справочник.ПлановыйАссортимент.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ПлановыйАссортимент.ПустаяСсылка)
	               |			ТОГДА ""_Категория не указана""
	               |		ИНАЧЕ ПлановыйАссортимент.Родитель.Родитель.Наименование
	               |	КОНЕЦ КАК Категория,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПлановыйАссортимент.Родитель.Родитель, ЗНАЧЕНИЕ(Справочник.ПлановыйАссортимент.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ПлановыйАссортимент.ПустаяСсылка)
	               |			ТОГДА 9
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПорядокСортировки
	               |ИЗ
	               |	Справочник.ПлановыйАссортимент КАК ПлановыйАссортимент
	               |ГДЕ
	               |	ПлановыйАссортимент.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПлановогоАссортимента.План), ЗНАЧЕНИЕ(Перечисление.СтатусыПлановогоАссортимента.ВРаботе))
	               |	И ПлановыйАссортимент.ПометкаУдаления = ЛОЖЬ
	               |	И ЕСТЬNULL(ПлановыйАссортимент.Родитель.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядокСортировки,
	               |	Категория,
	               |	Подкатегория,
	               |	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Область);
	КонецЦикла;	
	
	ИмяФайлаПлановые = ПолучитьИмяВременногоФайла("xls");
	ТабДок.Записать(ИмяФайлаПлановые, ТипФайлаТабличногоДокумента.XLS);
	
	Сервер.Записать(ИмяФайлаПлановые, "plan.xls");
	Если Сервер2 <> Неопределено Тогда
		Сервер2.Записать(ИмяФайлаПлановые, "plan.xls");
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаПлановые);
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Ложь;
	
	Сервер = Неопределено;
	
КонецПроцедуры

//+++ AK suvv 21.08.2018 ИП-00019300
Функция ПолучитьВремяПроведенияСобеседований(Выборка)
	
	ВремяПроведенияСобеседований = "";
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ВремяН");
	ТЗ.Колонки.Добавить("ВремяК");
	
	Если Выборка.Собеседования1 Тогда 
		НовСтрока = ТЗ.Добавить();
		НовСтрока.ВремяН = "11:00";
		НовСтрока.ВремяК = "13:00";
	КонецЕсли;
	
	Если Выборка.Собеседования2 Тогда 
		НовСтрока = ТЗ.Добавить();
		НовСтрока.ВремяН = "13:00";
		НовСтрока.ВремяК = "15:00";
	КонецЕсли;
	
	Если Выборка.Собеседования3 Тогда 
		НовСтрока = ТЗ.Добавить();
		НовСтрока.ВремяН = "15:00";
		НовСтрока.ВремяК = "17:00";
	КонецЕсли;
	
	Если Выборка.Собеседования4 Тогда 
		НовСтрока = ТЗ.Добавить();
		НовСтрока.ВремяН = "17:00";
		НовСтрока.ВремяК = "20:00";
	КонецЕсли;
	
	КолВоСтрокТЗ = ТЗ.Количество();
	ТекИндекс = 0;
	
	Пока ТекИндекс < ТЗ.Количество() Цикл
		Если ТекИндекс = ТЗ.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		ТекСтрока  = ТЗ[ТекИндекс];
		СледСтрока = ТЗ[ТекИндекс + 1];
		Если ТекСтрока.ВремяК = СледСтрока.ВремяН Тогда 
			ТекСтрока.ВремяК = СледСтрока.ВремяК;
			ТЗ.Удалить(СледСтрока);
		Иначе
			ТекИндекс = ТекИндекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр из ТЗ Цикл
		ВремяПроведенияСобеседований = ВремяПроведенияСобеседований + Стр.ВремяН + "-" + Стр.ВремяК + "; "; 
	КонецЦикла;
	ВремяПроведенияСобеседований = ?(ВремяПроведенияСобеседований <> "", Лев(ВремяПроведенияСобеседований, СтрДлина(ВремяПроведенияСобеседований) - 2), ВремяПроведенияСобеседований);
	
    Возврат ВремяПроведенияСобеседований;
	
КонецФункции //--- AK suvv

//+++АК GEYV 23.06.2015
Процедура ОтправкаУведомленийОПроведениеМероприятий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументПриказОПроведениеМероприятия.Ссылка,
	|	КонтактнаяИнформация.Представление КАК Адрес,
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДокументПриказОПроведениеМероприятия.КонецМероприятия, ДЕНЬ, 5), ДЕНЬ), НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ДЕНЬ) КАК ДнейПросрочено,
	|	ДокументПриказОПроведениеМероприятия.Номер,
	|	ДокументПриказОПроведениеМероприятия.Дата
	|ИЗ
	|	Документ.ПриказОПроведениеМероприятия КАК ДокументПриказОПроведениеМероприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ДокументПриказОПроведениеМероприятия.Ответственный.ФизЛицо = КонтактнаяИнформация.Объект
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ ДокументПриказОПроведениеМероприятия.ОтчетСформирован
	|					И НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДокументПриказОПроведениеМероприятия.КонецМероприятия, ДЕНЬ, 5), ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	|	И ДокументПриказОПроведениеМероприятия.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДнейПросрочено
	|ИТОГИ ПО
	|	Объект";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОбъект = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъект.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаОбъект.Выбрать();
		
		АдресПочты = "";
		
		ТекстПисьма = "Доброе утро, " + Строка(ВыборкаОбъект.Объект) + "!" + Символы.ПС + Символы.ПС + "Не сформирован отчет по:" + Символы.ПС;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если АдресПочты = "" Тогда
				
				АдресПочты = СокрЛП(ВыборкаДетальныеЗаписи.Адрес);
				
			КонецЕсли;
			
			ТекстПисьма = ТекстПисьма + Строка(ВыборкаДетальныеЗаписи.Ссылка) + " просрочено дней " + Строка(ВыборкаДетальныеЗаписи.ДнейПросрочено) + Символы.ПС;
			
		КонецЦикла;
		
		ИПП=Новый ИнтернетПочтовыйПрофиль;
		
		ИПП.АдресСервераSMTP 	= "10.0.0.30";
		//ИПП.Пользователь="no-reply@vkusvill.ru";
		ИПП.ПортSMTP 			= 25;
		//
		//Если УЗ.ТребуетсяSMTPАутентификация Тогда
		//	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		//	ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
		//	ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		//Иначе
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		ИПП.ПарольSMTP         = "";
		ИПП.ПользовательSMTP   = "";
		//КонецЕсли;
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Письмо.Отправитель = "no-reply@vkusvill.ru";
		
		Письмо.Получатели.Добавить(АдресПочты);
		
		Письмо.Тема = "Просроченные приказы о проведение мероприятий!";
		
		Письмо.Тексты.Добавить(ТекстПисьма);
		
		Почта=Новый ИнтернетПочта;
		
		
		Попытка
			Почта.Подключиться(ИПП);
			Почта.Послать(Письмо);
			Почта.Отключиться();
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
//---АК


Функция ПолучитьПредставлениеМесяца(мДата)
	
	Если Месяц(мДата) = 1 Тогда
		Возврат "Январь";
	ИначеЕсли Месяц(мДата) = 2 Тогда
		Возврат "Февраль";
	ИначеЕсли Месяц(мДата) = 3 Тогда
		Возврат "Март";
	ИначеЕсли Месяц(мДата) = 4 Тогда
		Возврат "Апрель";
	ИначеЕсли Месяц(мДата) = 5 Тогда
		Возврат "Май";
	ИначеЕсли Месяц(мДата) = 6 Тогда
		Возврат "Июнь";
	ИначеЕсли Месяц(мДата) = 7 Тогда
		Возврат "Июль";
	ИначеЕсли Месяц(мДата) = 8 Тогда
		Возврат "Август";
	ИначеЕсли Месяц(мДата) = 9 Тогда
		Возврат "Сентябрь";   
	ИначеЕсли Месяц(мДата) = 10 Тогда
		Возврат "Октябрь";
	ИначеЕсли Месяц(мДата) = 11 Тогда
		Возврат "Ноябрь";
	Иначе
		Возврат "Декабрь";
	КонецЕсли;
	
КонецФункции

Процедура СформироватьПланРеглРаботВМагазинах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_УсловияРегламентныхРабот.Контрагент КАК Контрагент,
	|	АК_УсловияРегламентныхРабот.Услуга КАК Услуга,
	|	АК_УсловияРегламентныхРабот.Периодичность,
	|	АК_УсловияРегламентныхРабот.Период КАК Период,
	|	АК_УсловияРегламентныхРабот.ДатаНачала,
	|	АК_УсловияРегламентныхРабот.ДатаОкончания,
	|	АК_УсловияРегламентныхРабот.Статус,
	|	АК_УсловияРегламентныхРабот.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.АК_УсловияРегламентныхРабот КАК АК_УсловияРегламентныхРабот
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Услуга,
	|	СтруктурнаяЕдиница,
	|	Период";
	ТаблицаУсловий = Запрос.Выполнить().Выгрузить();
	послУсловия = Неопределено;
	ТожеУсловие = Ложь;
	Для Каждого Условия из ТаблицаУсловий Цикл
		Если не послУсловия = Неопределено Тогда
			Если послУсловия.Контрагент = Условия.Контрагент
				И послУсловия.Услуга = Условия.Услуга
				И послУсловия.СтруктурнаяЕдиница = Условия.СтруктурнаяЕдиница Тогда
				ТожеУсловие = Истина;
				послУсловия.ДатаОкончания = Условия.ДатаНачала-3600*24;
			Иначе
				ТожеУсловие = Ложь;
				послУсловия.ДатаОкончания = Дата("20990101000000");
			КонецЕсли;
			послУсловия.ДатаНачала 		= НачалоМесяца(послУсловия.ДатаНачала);
			послУсловия.ДатаОкончания 	= НачалоДня(КонецМесяца(послУсловия.ДатаОкончания));	
		КонецЕсли;
		послУсловия = Условия;
	КонецЦикла;
	послУсловия.ДатаОкончания 	= Дата("20990101000000");
	послУсловия.ДатаНачала 		= НачалоМесяца(послУсловия.ДатаНачала);
	послУсловия.ДатаОкончания 	= НачалоДня(КонецМесяца(послУсловия.ДатаОкончания));
	
	
	//Удаление, перезаполенение
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаУсловий", ТаблицаУсловий);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаУсловий.Контрагент,
	|	ТаблицаУсловий.Услуга,
	|	ТаблицаУсловий.Периодичность,
	|	ТаблицаУсловий.ДатаНачала,
	|	ТаблицаУсловий.ДатаОкончания,
	|	ТаблицаУсловий.Статус,
	|	ТаблицаУсловий.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_УсловияДоговоров
	|ИЗ
	|	&ТаблицаУсловий КАК ТаблицаУсловий
	|ГДЕ
	|	ТаблицаУсловий.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналРегламентныхРаботВМагазинах.ТорговаяТочка,
	|	ЖурналРегламентныхРаботВМагазинах.Контрагент,
	|	ЖурналРегламентныхРаботВМагазинах.Услуга,
	|	ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода,
	|	ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода,
	|	ЖурналРегламентныхРаботВМагазинах.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ВТ_УсловияДоговоров.Периодичность ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьУсловие,
	|	ВЫБОР
	|		КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|			ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, ГОД), ДЕНЬ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|					ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, КВАРТАЛ), ДЕНЬ)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ)
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОкончанияПериодаПрав,
	|	ВЫБОР
	|		КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|			ТОГДА НАЧАЛОПЕРИОДА(НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, ГОД), ДЕНЬ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|					ТОГДА НАЧАЛОПЕРИОДА(НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, КВАРТАЛ), ДЕНЬ)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ)
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаНачалаПериодаПрав,
	|	ЕСТЬNULL(ЗНАЧЕНИЕ(перечисление.периодичность.пустаяссылка), ВТ_УсловияДоговоров.Периодичность) КАК Периодичность
	|ИЗ
	|	РегистрСведений.ЖурналРегламентныхРаботВМагазинах КАК ЖурналРегламентныхРаботВМагазинах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УсловияДоговоров КАК ВТ_УсловияДоговоров
	|		ПО ЖурналРегламентныхРаботВМагазинах.ТорговаяТочка = ВТ_УсловияДоговоров.СтруктурнаяЕдиница
	|			И ЖурналРегламентныхРаботВМагазинах.Контрагент = ВТ_УсловияДоговоров.Контрагент
	|			И ЖурналРегламентныхРаботВМагазинах.Услуга = ВТ_УсловияДоговоров.Услуга
	|			И (ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода >= ВТ_УсловияДоговоров.ДатаНачала
	|					И ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода < ВТ_УсловияДоговоров.ДатаОкончания
	|				ИЛИ ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода >= ВТ_УсловияДоговоров.ДатаНачала
	|					И ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода < ВТ_УсловияДоговоров.ДатаОкончания)
	|ГДЕ
	|	НЕ ЖурналРегламентныхРаботВМагазинах.ВнеплановаяРабота
	|	И ЖурналРегламентныхРаботВМагазинах.Услуга ССЫЛКА Справочник.Номенклатура
	|	И НЕ ЖурналРегламентныхРаботВМагазинах.Услуга.ЭтоГруппа
	|	И (ВТ_УсловияДоговоров.Периодичность ЕСТЬ NULL 
	|			ИЛИ ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода <> ВЫБОР
	|				КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|					ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, ГОД), ДЕНЬ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|							ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, КВАРТАЛ), ДЕНЬ)
	|						ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ)
	|					КОНЕЦ
	|			КОНЕЦ
	|			ИЛИ ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода <> ВЫБОР
	|				КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|					ТОГДА НАЧАЛОПЕРИОДА(НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, ГОД), ДЕНЬ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_УсловияДоговоров.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|							ТОГДА НАЧАЛОПЕРИОДА(НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, КВАРТАЛ), ДЕНЬ)
	|						ИНАЧЕ НАЧАЛОПЕРИОДА(НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ)
	|					КОНЕЦ
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	//а=Запрос.Выполнить().Выгрузить();
	// Запись плановых данных в журнал
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() ЦИкл
		Если Выборка.ЕстьУсловие Тогда
			НаборЗаписей = РегистрыСведений.ЖурналРегламентныхРаботВМагазинах.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);
			НаборЗаписей.Отбор.Контрагент.Установить(Выборка.Контрагент);
			НаборЗаписей.Отбор.Услуга.Установить(Выборка.Услуга);
			НаборЗаписей.Отбор.ДатаНачалаПериода.Установить(Выборка.ДатаНачалаПериода);
			НаборЗаписей.Отбор.ДатаОкончанияПериода.Установить(Выборка.ДатаОкончанияПериода);
			НаборЗаписей.Прочитать();
			МенеджерНовойЗаписи = РегистрыСведений.ЖурналРегламентныхРаботВМагазинах.СоздатьМенеджерЗаписи();
			Для каждого Запись из НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(МенеджерНовойЗаписи,Запись);
				МенеджерНовойЗаписи.ДатаНачалаПериода 		= Выборка.ДатаНачалаПериодаПрав;
				МенеджерНовойЗаписи.ДатаОкончанияПериода 	= Выборка.ДатаОкончанияПериодаПрав;
				МенеджерНовойЗаписи.ПредставлениеПериода	= ПолучитьПредставлениеПериода(Выборка.Периодичность, Выборка.ДатаНачалаПериодаПрав, Выборка.ДатаОкончанияПериодаПрав);
			КонецЦикла;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			МенеджерНовойЗаписи.Записать();
		иначе
			Если НЕ ЗначениеЗаполнено(Выборка.Дата)
				ИЛИ Выборка.Услуга.ФормироватьПлатежкуСразу Тогда
				НаборЗаписей = РегистрыСведений.ЖурналРегламентныхРаботВМагазинах.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);
				НаборЗаписей.Отбор.Контрагент.Установить(Выборка.Контрагент);
				НаборЗаписей.Отбор.Услуга.Установить(Выборка.Услуга);
				НаборЗаписей.Отбор.ДатаНачалаПериода.Установить(Выборка.ДатаНачалаПериода);
				НаборЗаписей.Отбор.ДатаОкончанияПериода.Установить(Выборка.ДатаОкончанияПериода);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДатаМесяца = ТекущаяДата();
	
	//Заполнение
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"	, ДатаМесяца);
	Запрос.УстановитьПараметр("Родитель", Справочники.Номенклатура.НайтиПоКоду("000621370"));
	Запрос.УстановитьПараметр("ТекДата1", ДобавитьМесяц(ДатаМесяца,-1));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Услуга,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Стоимость,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ФормаОплаты,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|			ТОГДА ВЫБОР
	|					КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 1), ГОД)
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|								ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 1), КВАРТАЛ)
	|							ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 1), МЕСЯЦ)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий)
	|					ТОГДА ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|								ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, -1), ГОД)
	|							ИНАЧЕ ВЫБОР
	|									КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|										ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, -1), КВАРТАЛ)
	|									ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -1), МЕСЯЦ)
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|							ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, ГОД)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|									ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, КВАРТАЛ)
	|								ИНАЧЕ НАЧАЛОПЕРИОДА(&ТекДата, МЕСЯЦ)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|			ТОГДА ВЫБОР
	|					КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|						ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 1), ГОД)
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|								ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 1), КВАРТАЛ)
	|							ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 1), МЕСЯЦ)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий)
	|					ТОГДА ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|								ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, -1), ГОД)
	|							ИНАЧЕ ВЫБОР
	|									КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|										ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, -1), КВАРТАЛ)
	|									ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -1), МЕСЯЦ)
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|							ТОГДА КОНЕЦПЕРИОДА(&ТекДата, ГОД)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|									ТОГДА КОНЕЦПЕРИОДА(&ТекДата, КВАРТАЛ)
	|								ИНАЧЕ КОНЕЦПЕРИОДА(&ТекДата, МЕСЯЦ)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Периодичность,
	|	АК_УсловияРегламентныхРаботСрезПоследних.НеТребуетРегистрацииВыполнения КАК УслугаФормироватьПлатежкуСразу,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.СтатусТорговойТочки КАК ТорговаяТочкаСтатусТорговойТочки,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.ДатаЗакрытия КАК ТорговаяТочкаДатаЗакрытия,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаНачала,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплатыКонец
	|ПОМЕСТИТЬ ВТ_Действующие
	|ИЗ
	|	РегистрСведений.АК_УсловияРегламентныхРабот.СрезПоследних(&ТекДата) КАК АК_УсловияРегламентныхРаботСрезПоследних
	|ГДЕ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И АК_УсловияРегламентныхРаботСрезПоследних.Услуга.Родитель = &Родитель 
	
	|;ВЫБРАТЬ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Услуга,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Стоимость,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ФормаОплаты,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|			ТОГДА ВЫБОР
	|					КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 1), ГОД)
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|								ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 1), КВАРТАЛ)
	|							ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 1), МЕСЯЦ)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий)
	|					ТОГДА ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|								ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, -1), ГОД)
	|							ИНАЧЕ ВЫБОР
	|									КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|										ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, -1), КВАРТАЛ)
	|									ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -1), МЕСЯЦ)
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|							ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, ГОД)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|									ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, КВАРТАЛ)
	|								ИНАЧЕ НАЧАЛОПЕРИОДА(&ТекДата, МЕСЯЦ)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|			ТОГДА ВЫБОР
	|					КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|						ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 1), ГОД)
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|								ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 1), КВАРТАЛ)
	|							ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 1), МЕСЯЦ)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий)
	|					ТОГДА ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|								ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, -1), ГОД)
	|							ИНАЧЕ ВЫБОР
	|									КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|										ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, -1), КВАРТАЛ)
	|									ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -1), МЕСЯЦ)
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|							ТОГДА КОНЕЦПЕРИОДА(&ТекДата, ГОД)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|									ТОГДА КОНЕЦПЕРИОДА(&ТекДата, КВАРТАЛ)
	|								ИНАЧЕ КОНЕЦПЕРИОДА(&ТекДата, МЕСЯЦ)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Периодичность,
	|	АК_УсловияРегламентныхРаботСрезПоследних.НеТребуетРегистрацииВыполнения КАК УслугаФормироватьПлатежкуСразу,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.СтатусТорговойТочки КАК ТорговаяТочкаСтатусТорговойТочки,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.ДатаЗакрытия КАК ТорговаяТочкаДатаЗакрытия,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаНачала,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплатыКонец
	|ПОМЕСТИТЬ ВТ_Сводная
	|ИЗ
	|	РегистрСведений.АК_УсловияРегламентныхРабот.СрезПоследних(&ТекДата) КАК АК_УсловияРегламентныхРаботСрезПоследних
	|ГДЕ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И АК_УсловияРегламентныхРаботСрезПоследних.Услуга.Родитель = &Родитель 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Услуга,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Стоимость,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ФормаОплаты,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|			ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, ГОД)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|					ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, КВАРТАЛ)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(&ТекДата, МЕСЯЦ)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|			ТОГДА КОНЕЦПЕРИОДА(&ТекДата, ГОД)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|					ТОГДА КОНЕЦПЕРИОДА(&ТекДата, КВАРТАЛ)
	|				ИНАЧЕ КОНЕЦПЕРИОДА(&ТекДата, МЕСЯЦ)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Периодичность,
	|	АК_УсловияРегламентныхРаботСрезПоследних.НеТребуетРегистрацииВыполнения,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.СтатусТорговойТочки,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.ДатаЗакрытия,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаНачала,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплатыКонец
	|ИЗ
	|	РегистрСведений.АК_УсловияРегламентныхРабот.СрезПоследних(&ТекДата1) КАК АК_УсловияРегламентныхРаботСрезПоследних
	|ГДЕ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И АК_УсловияРегламентныхРаботСрезПоследних.Услуга.Родитель = &Родитель
	|	И АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий) И
	|  		(АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Услуга,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница) в (выбрать Контрагент,Услуга,СтруктурнаяЕдиница из ВТ_Действующие)
	
	|Объединить все
	|ВЫБРАТЬ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Услуга,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Стоимость,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ФормаОплаты,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|			ТОГДА ВЫБОР
	|					КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 0), ГОД)
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|								ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 0), КВАРТАЛ)
	|							ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 0), МЕСЯЦ)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий)
	|					ТОГДА ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|								ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 0), ГОД)
	|							ИНАЧЕ ВЫБОР
	|									КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|										ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 0), КВАРТАЛ)
	|									ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 0), МЕСЯЦ)
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|							ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, ГОД)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|									ТОГДА НАЧАЛОПЕРИОДА(&ТекДата, КВАРТАЛ)
	|								ИНАЧЕ НАЧАЛОПЕРИОДА(&ТекДата, МЕСЯЦ)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий)
	|			ТОГДА ВЫБОР
	|					КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|						ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 0), ГОД)
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|								ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 0), КВАРТАЛ)
	|							ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 0), МЕСЯЦ)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий)
	|					ТОГДА ВЫБОР
	|							КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|								ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, 0), ГОД)
	|							ИНАЧЕ ВЫБОР
	|									КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|										ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, КВАРТАЛ, 0), КВАРТАЛ)
	|									ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, 0), МЕСЯЦ)
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.год)
	|							ТОГДА КОНЕЦПЕРИОДА(&ТекДата, ГОД)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА АК_УсловияРегламентныхРаботСрезПоследних.Периодичность = ЗНАЧЕНИЕ(перечисление.периодичность.Квартал)
	|									ТОГДА КОНЕЦПЕРИОДА(&ТекДата, КВАРТАЛ)
	|								ИНАЧЕ КОНЕЦПЕРИОДА(&ТекДата, МЕСЯЦ)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Периодичность,
	|	АК_УсловияРегламентныхРаботСрезПоследних.НеТребуетРегистрацииВыполнения КАК УслугаФормироватьПлатежкуСразу,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.СтатусТорговойТочки КАК ТорговаяТочкаСтатусТорговойТочки,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница.ДатаЗакрытия КАК ТорговаяТочкаДатаЗакрытия,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаНачала,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплатыКонец
	|ИЗ
	|	РегистрСведений.АК_УсловияРегламентныхРабот.СрезПоследних(&ТекДата) КАК АК_УсловияРегламентныхРаботСрезПоследних
	|ГДЕ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И АК_УсловияРегламентныхРаботСрезПоследних.Услуга.Родитель = &Родитель 
	|	И (АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Предыдущий) ИЛИ АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыПериодовОплатыАренды.Следующий))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СводнаяТаблица.Контрагент,
	|	ВТ_СводнаяТаблица.Услуга,
	|	ВТ_СводнаяТаблица.ТорговаяТочка,
	|	ВТ_СводнаяТаблица.ДатаНачалаПериода,
	|	НАЧАЛОПЕРИОДА(ВТ_СводнаяТаблица.ДатаОкончанияПериода, ДЕНЬ) КАК ДатаОкончанияПериода,
	|	ВТ_СводнаяТаблица.Стоимость,
	|	ВТ_СводнаяТаблица.ЧислоОплаты,
	|	ВТ_СводнаяТаблица.Периодичность,
	|	ВТ_СводнаяТаблица.ФормаОплаты,
	|	ВТ_СводнаяТаблица.УслугаФормироватьПлатежкуСразу,
	|	ВТ_СводнаяТаблица.ТорговаяТочкаСтатусТорговойТочки,
	|	ВТ_СводнаяТаблица.ТорговаяТочкаДатаЗакрытия,
	|	ВТ_СводнаяТаблица.ПериодОплаты,
	|	ВТ_СводнаяТаблица.ЧислоОплатыКонец
	|ПОМЕСТИТЬ ВТ_СводнаяТаблицаУсловий
	|ИЗ
	|	ВТ_Сводная КАК ВТ_СводнаяТаблица
	|ГДЕ
	|	(НЕ ВТ_СводнаяТаблица.ТорговаяТочкаСтатусТорговойТочки = ЗНАЧЕНИЕ(перечисление.статусыторговыхточек.закрыт)
	|			ИЛИ ВТ_СводнаяТаблица.ТорговаяТочкаДатаЗакрытия >= ВТ_СводнаяТаблица.ДатаОкончанияПериода)
	|	И (ВТ_СводнаяТаблица.ДатаНачалаПериода >= ВТ_СводнаяТаблица.ДатаНачала
	|				И ВТ_СводнаяТаблица.ДатаНачала <= ВТ_СводнаяТаблица.ДатаОкончания
	|			ИЛИ ВТ_СводнаяТаблица.ДатаОкончанияПериода >= ВТ_СводнаяТаблица.ДатаНачала
	|				И ВТ_СводнаяТаблица.ДатаОкончанияПериода <= ВТ_СводнаяТаблица.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СводнаяТаблицаУсловий.Контрагент,
	|	ВТ_СводнаяТаблицаУсловий.Услуга,
	|	ВТ_СводнаяТаблицаУсловий.ТорговаяТочка,
	|	ВТ_СводнаяТаблицаУсловий.ДатаНачалаПериода,
	|	ВТ_СводнаяТаблицаУсловий.Стоимость,
	|	ВТ_СводнаяТаблицаУсловий.ЧислоОплаты,
	|	ВЫБОР
	|		КОГДА ВТ_СводнаяТаблицаУсловий.УслугаФормироватьПлатежкуСразу ТОГДА
	|			 ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_СводнаяТаблицаУсловий.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ, ВТ_СводнаяТаблицаУсловий.ЧислоОплаты - 1)
	|		ИНАЧЕ ЖурналРегламентныхРабот.Дата
	|	КОНЕЦ 
	|	КАК Дата,
	| ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_СводнаяТаблицаУсловий.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ, ВТ_СводнаяТаблицаУсловий.ЧислоОплаты - 1) КАК ДатаДоп,
	|	ВЫБОР
	|		КОГДА ВТ_СводнаяТаблицаУсловий.УслугаФормироватьПлатежкуСразу
	|			ТОГДА ВТ_СводнаяТаблицаУсловий.Стоимость
	|		ИНАЧЕ ЖурналРегламентныхРабот.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВТ_СводнаяТаблицаУсловий.Периодичность,
	|	ВТ_СводнаяТаблицаУсловий.ПериодОплаты,
	|	ВТ_СводнаяТаблицаУсловий.ДатаОкончанияПериода,
	|	ВТ_СводнаяТаблицаУсловий.ЧислоОплатыКонец
	|ИЗ
	|	ВТ_СводнаяТаблицаУсловий КАК ВТ_СводнаяТаблицаУсловий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегламентныхРаботВМагазинах КАК ЖурналРегламентныхРабот
	|		ПО ВТ_СводнаяТаблицаУсловий.Контрагент = ЖурналРегламентныхРабот.Контрагент
	|			И ВТ_СводнаяТаблицаУсловий.Услуга = ЖурналРегламентныхРабот.Услуга
	|			И ВТ_СводнаяТаблицаУсловий.ТорговаяТочка = ЖурналРегламентныхРабот.ТорговаяТочка
	|			И ВТ_СводнаяТаблицаУсловий.ДатаНачалаПериода = ЖурналРегламентныхРабот.ДатаНачалаПериода
	|			И ВТ_СводнаяТаблицаУсловий.ДатаОкончанияПериода = ЖурналРегламентныхРабот.ДатаОкончанияПериода
	|ГДЕ
	|	ЖурналРегламентныхРабот.ТорговаяТочка ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Запись плановых данных в журнал
	мРегистр = РегистрыСведений.ЖурналРегламентныхРаботВМагазинах;
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.ПредставлениеПериода = ПолучитьПредставлениеПериода(Выборка.Периодичность, Выборка.ДатаНачалаПериода, Выборка.ДатаОкончанияПериода);
		МенеджерЗаписи.Записать();
	КонецЦикла;	
	мРегистр 		= Неопределено;
	МенеджерЗаписи 	= Неопределено;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПериода(Знач мПериодичность, мДатаНачала, мДатаОкончания)
	
	Если НЕ ЗначениеЗаполнено(мПериодичность) Тогда
		ОпределитьПериодичность(мПериодичность, мДатаНачала, мДатаОкончания);	
	КонецЕсли;
	
	ТекПредставлениеПериода = "";
	Если мПериодичность = Перечисления.Периодичность.День Тогда
		ТекПредставлениеПериода = Формат(мДатаНачала, "ДЛФ=Д");
	ИначеЕсли мПериодичность = Перечисления.Периодичность.Неделя Тогда
		ТекПредставлениеПериода = Формат(мДатаНачала, "ДЛФ=Д") + " - " + Формат(мДатаОкончания, "ДЛФ=Д");
	ИначеЕсли мПериодичность = Перечисления.Периодичность.Месяц Тогда
		ТекПредставлениеПериода = ПолучитьПредставлениеМесяца(мДатаНачала) + " " + Формат(Год(мДатаНачала), "ЧГ=") + "г.";
	ИначеЕсли мПериодичность = Перечисления.Периодичность.Год Тогда
		ТекПредставлениеПериода = Формат(Год(мДатаНачала), "ЧГ=") + "г.";
	ИначеЕсли мПериодичность = Перечисления.Периодичность.Квартал Тогда
		Квартал = Цел((Месяц(мДатаНачала) - 1) / 3) + 1;
		ТекПредставлениеПериода = "" + Квартал + " квартал " + Формат(мДатаНачала, "ДФ=yyyy") + "г.";
	КонецЕсли;
	
	Возврат ТекПредставлениеПериода;
	
КонецФункции

//Определяет периодинчость: Месяц, Квартал, Год
Процедура ОпределитьПериодичность(мПериодичность, мДатаНачала, мДатаОкончания);
	
	Если мДатаНачала = НачалоМесяца(мДатаНачала)
		И КонецДня(мДатаОкончания) = КонецМесяца(мДатаОкончания) Тогда
		Разность = РазностьДат(мДатаНачала, мДатаОкончания);
		Если Разность = 0 Тогда
			мПериодичность = Перечисления.Периодичность.Месяц;
		ИначеЕсли Разность = 2
			И мДатаНачала = НачалоКвартала(мДатаНачала) Тогда
			мПериодичность = Перечисления.Периодичность.Квартал;
		ИначеЕсли Разность = 11
			И мДатаНачала = НачалоГода(мДатаНачала) Тогда
			мПериодичность = Перечисления.Периодичность.Год;
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

Функция РазностьДат(Дата1, Дата2)
	
	ДатаНач = ?(Дата1 < Дата2, Дата1, Дата2);	
	ДатаКон = ?(Дата1 < Дата2, Дата2, Дата1);
	
	Годы 	= Год(ДатаКон) 		- Год(ДатаНач);
	Месяцы 	= Месяц(ДатаКон) 	- Месяц(ДатаНач);
	
	Возврат Месяцы + (Годы * 12);
	
КонецФункции

//+++АК LATV 2018.09.18 ИП-00019818
Процедура ОтправитьОповещенияПоАренде() Экспорт

	// получение тех ТТ и договоров их аренды, у которых подходит срок уведомления о перезаключении договора в связи с истечением сроком действия
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыДоговоровАренды.Договор.Владелец КАК Контрагент,
		|	СтатусыДоговоровАренды.Договор,
		|	СтатусыДоговоровАренды.ОбъектАренды.СтруктурнаяЕдиница КАК ТорговаяТочка,
		|	СтатусыДоговоровАренды.ДатаОкончанияАренды,
		|	СтатусыДоговоровАренды.СрокУведомленияОПерезаключении
		|ПОМЕСТИТЬ ВТОсновная
		|ИЗ
		|	РегистрСведений.СтатусыДоговоровАренды.СрезПоследних(, ) КАК СтатусыДоговоровАренды
		|ГДЕ
		|	СтатусыДоговоровАренды.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И НЕ ВЫБОР
		|				КОГДА НЕ СтатусыДоговоровАренды.СрокУведомленияОПерезаключении = 0
		|					ТОГДА СтатусыДоговоровАренды.СрокУведомленияОПерезаключении
		|				ИНАЧЕ СтатусыДоговоровАренды.ЗаключениеДоговора.СрокУведомленияОПерезаключении
		|			КОНЕЦ = 0
		|	И РАЗНОСТЬДАТ(&ТекДата, СтатусыДоговоровАренды.ДатаОкончанияАренды, ДЕНЬ) - 10 = ВЫБОР
		|			КОГДА НЕ СтатусыДоговоровАренды.СрокУведомленияОПерезаключении = 0
		|				ТОГДА СтатусыДоговоровАренды.СрокУведомленияОПерезаключении
		|			ИНАЧЕ СтатусыДоговоровАренды.ЗаключениеДоговора.СрокУведомленияОПерезаключении
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОсновная.Контрагент,
		|	ВТОсновная.Договор,
		|	ВТОсновная.ТорговаяТочка,
		|	ВТОсновная.ДатаОкончанияАренды,
		|	ВТОсновная.СрокУведомленияОПерезаключении
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТОсновная.ТорговаяТочка.НомерТочки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТОсновная.ТорговаяТочка
		|ИЗ
		|	ВТОсновная КАК ВТОсновная";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// массив ТТ
	РезультатЗапроса = РезультатыЗапроса[2];
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивТТ = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
	// определение получателей писем оповещения
	ЗапросПолучатели = Новый Запрос;
	ЗапросПолучатели.УстановитьПараметр("МассивТТ", МассивТТ);
	ЗапросПолучатели.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОбъектРоль.Объект КАК ТТ,
		|	СоответствиеОбъектРоль.РольПользователя КАК МенеджерПоАренде,
		|	СоответствиеОбъектРоль.РольПользователя.Родитель КАК РуководительОтделаАренды
		|ПОМЕСТИТЬ ВТТорговыеТочки
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.МенеджерПоАренде)
		|				И Объект В (&МассивТТ)) КАК СоответствиеОбъектРоль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТорговыеТочки.ТТ КАК ТТ,
		|	СоставРолиМенеджеры.Сотрудник КАК ФизЛицо
		|ПОМЕСТИТЬ ВТОсновная
		|ИЗ
		|	ВТТорговыеТочки КАК ВТТорговыеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК СоставРолиМенеджеры
		|		ПО (СоставРолиМенеджеры.Ссылка = ВТТорговыеТочки.МенеджерПоАренде)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТТорговыеТочки.ТТ,
		|	СоставРолиМенеджеры.Сотрудник
		|ИЗ
		|	ВТТорговыеТочки КАК ВТТорговыеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК СоставРолиМенеджеры
		|		ПО (СоставРолиМенеджеры.Ссылка = ВТТорговыеТочки.РуководительОтделаАренды)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОсновная.ТТ КАК ТТ,
		|	ВТОсновная.ФизЛицо КАК ФизЛицо,
		|	КонтактнаяИнформация.Представление КАК ЭлектронныйАдрес
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Объект = ВТОсновная.ФизЛицо)
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))";
	
	ТаблицаПолучателей = ЗапросПолучатели.Выполнить().Выгрузить();
	
	Ответственные = Новый Массив;
	Ответственные.Добавить(Справочники.ФизическиеЛица.НайтиПоКоду("0000002617")); //Федотова Юлия Сергеевна
	АдресаОтветственных = УправлениеЭлектроннойПочтой.ЭлектронныеАдресаФизическихЛиц(Ответственные);
	
	// отправка писем с оповещением
	Почта = Новый ИнтернетПочта;
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP 	= "10.0.0.30";
	ИПП.ПортSMTP 			= 25;
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	
	Попытка
		Почта.Подключиться(ИПП);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	СтруктураОтбора = Новый Структура("ТТ");
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора.ТТ = Выборка.ТорговаяТочка;
		СтрокиТаблицы = ТаблицаПолучателей.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель = "no-reply@vkusvill.ru";
		
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Получатель = Письмо.Получатели.Добавить(СтрокаТаблицы.ЭлектронныйАдрес);
			Получатель.ОтображаемоеИмя = СтрокаТаблицы.ФизЛицо;
		КонецЦикла;
		
		Для Каждого СтрокаПолучатель Из АдресаОтветственных Цикл
			Получатель = Письмо.Копии.Добавить(СтрокаПолучатель.Адрес);
			Получатель.ОтображаемоеИмя	= СтрокаПолучатель.Представление;
		КонецЦикла;
		
		Письмо.Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Приближение окончания срока действия договора аренды (%1)'"), Выборка.ТорговаяТочка);
		
		ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект аренды ""%1"": через %2 дней (%3) заканчивается срок действия договора.'")
			, Выборка.ТорговаяТочка, Выборка.СрокУведомленияОПерезаключении + 10, Формат(Выборка.ДатаОкончанияАренды, "ДЛФ=Д"));
		Письмо.Тексты.Добавить(ТекстПисьма);
		
		Попытка
			Почта.Послать(Письмо);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Почта.Отключиться();

КонецПроцедуры

Функция ПолучитьТекстHTMLТаблицаУсловийПоДоговорамАренды(СтрокиТаблицы, ВыводитьШапку = Истина)
	
	ТекстХТМЛ = "<table border='2'>" +
	?(ВыводитьШапку, "<tr align='center'><td>Объект аренды</td><td>Тип арендной платы</td><td>Услуга</td><td>Ставка</td><td>Способ начисления</td><td>Ставка НДС</td><td>Форма оплаты</td></tr>", "");
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ТТ) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ТипАренднойПлаты) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Услуга) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Ставка, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.СпособНачисления) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.СтавкаНДС) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ФормаОплаты) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Функция ПолучитьТекстHTMLТаблицаУсловийПоДепозитам(СтрокиТаблицы, ВыводитьШапку = Истина)
	
	ТекстХТМЛ = "<table border='2'>" +
	?(ВыводитьШапку, "<tr align='center'><td>Объект аренды</td><td>Способ расчета залога</td><td>Валюта</td><td>Валюта 2</td><td>Сумма залога (наличные)</td><td>Сумма залога (безнал.)</td><td>Ставка НДС залога (наличные)</td><td>Ставка НДС залога (безнал.)</td></tr>", "");
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ТТ) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.СпособРасчетаЗалога) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ВалютаДепозита) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ВалютаДепозита2) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.СуммаЗалогаНаличные, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.СуммаЗалогаБезналичные, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СтрокаТаблицы.СтавкаНДСЗалогаНаличные + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СтрокаТаблицы.СтавкаНДСЗалогаБезналичные + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Функция ПолучитьТекстHTMLТаблицаУсловийПоКурсамВалют(СтрокиТаблицы, ВыводитьШапку = Истина)
	
	ТекстХТМЛ = "<table border='2'>" +
	?(ВыводитьШапку, "<tr align='center'><td>Объект аренды</td><td>Валюта</td><td>Валюта 2</td><td>Курс</td><td>Кратность</td><td>Способ расчета</td><td>Коэффициент</td><td>Нижняя граница</td><td>Верхняя граница</td></tr>", "");
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ТТ) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Валюта) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Валюта2) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Курс, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Кратность, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.СпособРасчета) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Коэффициент, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.НижняяГраница, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.ВерхняяГраница, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Процедура ОтправитьОповещенияОбИзмененииУсловийАренды() Экспорт
	
	КолвоДней = 35;
	
	// определение получателей писем оповещения
	ЗапросПолучатели = Новый Запрос;
	ЗапросПолучатели.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектРоль.Объект КАК ТТ,
	|	СоответствиеОбъектРоль.РольПользователя КАК МенеджерПоАренде,
	|	СоответствиеОбъектРоль.РольПользователя.Родитель КАК РуководительОтделаАренды
	|ПОМЕСТИТЬ ВТТорговыеТочки
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.МенеджерПоАренде)) КАК СоответствиеОбъектРоль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТорговыеТочки.ТТ КАК ТТ,
	|	СоставРолиМенеджеры.Сотрудник КАК ФизЛицо
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	ВТТорговыеТочки КАК ВТТорговыеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК СоставРолиМенеджеры
	|		ПО (СоставРолиМенеджеры.Ссылка = ВТТорговыеТочки.МенеджерПоАренде)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТТорговыеТочки.ТТ,
	|	СоставРолиМенеджеры.Сотрудник
	|ИЗ
	|	ВТТорговыеТочки КАК ВТТорговыеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК СоставРолиМенеджеры
	|		ПО (СоставРолиМенеджеры.Ссылка = ВТТорговыеТочки.РуководительОтделаАренды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ТТ КАК ТТ,
	|	ВТОсновная.ФизЛицо КАК ФизЛицо,
	|	КонтактнаяИнформация.Представление КАК ЭлектронныйАдрес
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = ВТОсновная.ФизЛицо)
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))";
	
	ТаблицаПолучателей = ЗапросПолучатели.Выполнить().Выгрузить();
	
	
	//
	мДатаДоп 	= НачалоДня(ТекущаяДата()) + КолвоДней * 86400;
	мДатаСреза 	= Новый Граница(мДатаДоп, ВидГраницы.Исключая);
	
	// УслугиПоДоговорамАренды
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДоп"		, мДатаДоп);
	Запрос.УстановитьПараметр("ДатаСреза"	, мДатаСреза);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительноеСоглашение.ОбъектАренды КАК ТТ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть) КАК ТипАренднойПлаты,
	|	ТЧПостояннаяЧастьАренднойПлаты.Услуга,
	|	ТЧПостояннаяЧастьАренднойПлаты.Ставка,
	|	ТЧПостояннаяЧастьАренднойПлаты.СпособНачисления,
	|	ТЧПостояннаяЧастьАренднойПлаты.Количество,
	|	ТЧПостояннаяЧастьАренднойПлаты.СтавкаНДС,
	|	ТЧПостояннаяЧастьАренднойПлаты.ФормаОплаты
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ТЧПостояннаяЧастьАренднойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|		ПО (ДополнительноеСоглашение.Ссылка = ТЧПостояннаяЧастьАренднойПлаты.Ссылка)
	|			И (НАЧАЛОПЕРИОДА(ДополнительноеСоглашение.Дата, ДЕНЬ) = &ДатаДоп)
	|			И (НЕ ДополнительноеСоглашение.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительноеСоглашение.ОбъектАренды,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть),
	|	ТЧПеременнаяЧастьАренднойПлаты.Услуга,
	|	ТЧПеременнаяЧастьАренднойПлаты.Ставка,
	|	ТЧПеременнаяЧастьАренднойПлаты.СпособНачисления,
	|	ТЧПеременнаяЧастьАренднойПлаты.Количество,
	|	ТЧПеременнаяЧастьАренднойПлаты.СтавкаНДС,
	|	ТЧПеременнаяЧастьАренднойПлаты.ФормаОплаты
	|ИЗ
	|	Документ.ДополнительноеСоглашение.ПеременнаяЧастьАренднойПлаты КАК ТЧПеременнаяЧастьАренднойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|		ПО (ДополнительноеСоглашение.Ссылка = ТЧПеременнаяЧастьАренднойПлаты.Ссылка)
	|			И (НАЧАЛОПЕРИОДА(ДополнительноеСоглашение.Дата, ДЕНЬ) = &ДатаДоп)
	|			И (НЕ ДополнительноеСоглашение.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ТТ,
	|	ВТОсновная.ТипАренднойПлаты,
	|	ВТОсновная.Услуга,
	|	ВТОсновная.Ставка,
	|	ВТОсновная.СпособНачисления,
	|	ВТОсновная.Количество,
	|	ВТОсновная.СтавкаНДС,
	|	ВТОсновная.ФормаОплаты
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиПоДоговорамАрендыСрезПоследних.Период,
	|	УслугиПоДоговорамАрендыСрезПоследних.ОбъектАренды,
	|	УслугиПоДоговорамАрендыСрезПоследних.Услуга,
	|	УслугиПоДоговорамАрендыСрезПоследних.ФормаОплаты,
	|	УслугиПоДоговорамАрендыСрезПоследних.СтавкаНДС,
	|	УслугиПоДоговорамАрендыСрезПоследних.СпособНачисления,
	|	УслугиПоДоговорамАрендыСрезПоследних.Ставка,
	|	УслугиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты
	|ПОМЕСТИТЬ ВТУсловия
	|ИЗ
	|	РегистрСведений.УслугиПоДоговорамАренды.СрезПоследних(
	|			&ДатаСреза,
	|			ОбъектАренды В
	|				(ВЫБРАТЬ
	|					ВТОсновная.ТТ
	|				ИЗ
	|					ВТОсновная)) КАК УслугиПоДоговорамАрендыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУсловия.ОбъектАренды КАК ТТ,
	|	ВТУсловия.Услуга,
	|	ВТУсловия.ФормаОплаты,
	|	ВТУсловия.СтавкаНДС,
	|	ВТУсловия.СпособНачисления,
	|	ВТУсловия.Ставка,
	|	ВТУсловия.ТипАренднойПлаты
	|ИЗ
	|	ВТУсловия КАК ВТУсловия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТУсловия.ОбъектАренды КАК ОбъектАренды,
	|			МАКСИМУМ(ВТУсловия.Период) КАК Период
	|		ИЗ
	|			ВТУсловия КАК ВТУсловия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТУсловия.ОбъектАренды) КАК МаксПериоды
	|		ПО (МаксПериоды.ОбъектАренды = ВТУсловия.ОбъектАренды)
	|			И (МаксПериоды.Период = ВТУсловия.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОсновная.ТТ КАК ТТ
	|ИЗ
	|	ВТОсновная КАК ВТОсновная";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТабУсловия 				= РезультатыЗапроса[1].Выгрузить();
	ТабПредыдущиеУсловия 	= РезультатыЗапроса[3].Выгрузить();
	МассивТТ 				= РезультатыЗапроса[4].Выгрузить().ВыгрузитьКолонку("ТТ");
	
	
	// ДепозитыПоДоговорамАренды
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДоп"		, мДатаДоп);
	Запрос.УстановитьПараметр("ДатаСреза"	, мДатаСреза);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительноеСоглашение.ДоговорКонтрагента,
	|	ДополнительноеСоглашение.ОбъектАренды КАК ТТ,
	|	ДополнительноеСоглашение.СпособРасчетаЗалога,
	|	ДополнительноеСоглашение.СуммаЗалогаНаличные,
	|	ДополнительноеСоглашение.СуммаЗалогаБезналичные,
	|	ДополнительноеСоглашение.СтавкаНДСЗалогаБезналичные,
	|	ДополнительноеСоглашение.СтавкаНДСЗалогаНаличные,
	|	ДополнительноеСоглашение.ВалютаДепозита,
	|	ДополнительноеСоглашение.ВалютаДепозита2
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДополнительноеСоглашение.Дата, ДЕНЬ) = &ДатаДоп
	|	И ДополнительноеСоглашение.УчитыватьЗалог
	|	И (ДополнительноеСоглашение.СуммаЗалогаНаличные > 0
	|			ИЛИ ДополнительноеСоглашение.СуммаЗалогаБезналичные > 0)
	|	И НЕ ДополнительноеСоглашение.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ДоговорКонтрагента,
	|	ВТОсновная.ТТ,
	|	ВТОсновная.СпособРасчетаЗалога,
	|	ВТОсновная.СуммаЗалогаНаличные,
	|	ВТОсновная.СуммаЗалогаБезналичные,
	|	ВТОсновная.СтавкаНДСЗалогаБезналичные,
	|	ВТОсновная.СтавкаНДСЗалогаНаличные,
	|	ВТОсновная.ВалютаДепозита,
	|	ВТОсновная.ВалютаДепозита2
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДепозитыПоДоговорамАрендыСрезПоследних.Период,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.ДоговорКонтрагента,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.СпособРасчетаЗалога,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.ВалютаДепозита,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.ВалютаДепозита2,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.СтавкаНДСЗалогаБезналичные,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.СтавкаНДСЗалогаНаличные,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.СуммаЗалогаБезналичные,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.СуммаЗалогаНаличные
	|ПОМЕСТИТЬ ВТДепозиты
	|ИЗ
	|	РегистрСведений.ДепозитыПоДоговорамАренды.СрезПоследних(
	|			&ДатаСреза,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ВТОсновная.ДоговорКонтрагента
	|				ИЗ
	|					ВТОсновная)) КАК ДепозитыПоДоговорамАрендыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДепозиты.ДоговорКонтрагента.ОбъектАренды КАК ТТ,
	|	ВТДепозиты.ДоговорКонтрагента,
	|	ВТДепозиты.СпособРасчетаЗалога,
	|	ВТДепозиты.ВалютаДепозита,
	|	ВТДепозиты.ВалютаДепозита2,
	|	ВТДепозиты.СуммаЗалогаБезналичные,
	|	ВТДепозиты.СуммаЗалогаНаличные,
	|	ВТДепозиты.СтавкаНДСЗалогаБезналичные,
	|	ВТДепозиты.СтавкаНДСЗалогаНаличные
	|ИЗ
	|	ВТДепозиты КАК ВТДепозиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТДепозиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			МАКСИМУМ(ВТДепозиты.Период) КАК Период
	|		ИЗ
	|			ВТДепозиты КАК ВТДепозиты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТДепозиты.ДоговорКонтрагента) КАК МаксПериоды
	|		ПО (МаксПериоды.ДоговорКонтрагента = ВТДепозиты.ДоговорКонтрагента)
	|			И (МаксПериоды.Период = ВТДепозиты.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОсновная.ТТ КАК ТТ
	|ИЗ
	|	ВТОсновная КАК ВТОсновная";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТабДепозиты 			= РезультатыЗапроса[1].Выгрузить();
	ТабПредыдущиеДепозиты 	= РезультатыЗапроса[3].Выгрузить();
	ТекМассивТТ 			= РезультатыЗапроса[4].Выгрузить().ВыгрузитьКолонку("ТТ");
	Для Каждого ТекТТ Из ТекМассивТТ Цикл
		Если МассивТТ.Найти(ТекТТ) = Неопределено Тогда
			МассивТТ.Добавить(ТекТТ);
		КонецЕсли;
	КонецЦикла;
	
	
	// КурсыВалютДляРасчетовПоАренде
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДоп"		, мДатаДоп);
	Запрос.УстановитьПараметр("ДатаСреза"	, мДатаСреза);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительноеСоглашение.ДоговорКонтрагента,
	|	ДополнительноеСоглашение.ОбъектАренды КАК ТТ,
	|	ДополнительноеСоглашение.ВалютаСпособаНачисления,
	|	ДополнительноеСоглашение.Валюта2СпособаНачисления,
	|	ДополнительноеСоглашение.Курс,
	|	ДополнительноеСоглашение.Кратность,
	|	ДополнительноеСоглашение.СпособРасчета,
	|	ДополнительноеСоглашение.Коэффициент,
	|	ДополнительноеСоглашение.НижняяГраница,
	|	ДополнительноеСоглашение.ВерхняяГраница
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДополнительноеСоглашение.Дата, ДЕНЬ) = &ДатаДоп
	|	И НЕ ДополнительноеСоглашение.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ДоговорКонтрагента,
	|	ВТОсновная.ТТ,
	|	ВТОсновная.ВалютаСпособаНачисления КАК Валюта,
	|	ВТОсновная.Валюта2СпособаНачисления КАК Валюта2,
	|	ВТОсновная.Курс,
	|	ВТОсновная.Кратность,
	|	ВТОсновная.СпособРасчета,
	|	ВТОсновная.Коэффициент,
	|	ВТОсновная.НижняяГраница,
	|	ВТОсновная.ВерхняяГраница
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.ДоговорКонтрагента.ОбъектАренды КАК ТТ,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта2,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Курс,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Кратность,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница
	|ИЗ
	|	РегистрСведений.КурсыВалютДляРасчетовПоАренде.СрезПоследних(
	|			&ДатаСреза,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ВТОсновная.ДоговорКонтрагента
	|				ИЗ
	|					ВТОсновная)) КАК КурсыВалютДляРасчетовПоАрендеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОсновная.ТТ КАК ТТ
	|ИЗ
	|	ВТОсновная КАК ВТОсновная";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТабКурсыВалют 			= РезультатыЗапроса[1].Выгрузить();
	ТабПредыдущиеКурсыВалют	= РезультатыЗапроса[2].Выгрузить();
	ТекМассивТТ 			= РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("ТТ");
	Для Каждого ТекТТ Из ТекМассивТТ Цикл
		Если МассивТТ.Найти(ТекТТ) = Неопределено Тогда
			МассивТТ.Добавить(ТекТТ);
		КонецЕсли;
	КонецЦикла;
	
	
	///////////////////////////////////////////
	// отправка писем с оповещением
	СтруктураОтбора = Новый Структура("ТТ");
	Для Каждого ТекТТ Из МассивТТ Цикл
		
		СтруктураОтбора.ТТ = ТекТТ.СтруктурнаяЕдиница;
		СтрокиПолучателей = ТаблицаПолучателей.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПолучателей.Количество() = 0 Тогда    						// нет получателей для этой торговой точки (((
			Продолжить;
		КонецЕсли;
		
		//
		ИПП = Новый ИнтернетПочтовыйПрофиль;
		
		ИПП.АдресСервераSMTP 	= "10.0.0.30";
		ИПП.ПортSMTP 			= 25;
		ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации.БезАутентификации;
		ИПП.ПарольSMTP         	= "";
		ИПП.ПользовательSMTP   	= "";
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель = "no-reply@vkusvill.ru";
		
		Для Каждого СтрокаТаблицы Из СтрокиПолучателей Цикл
			ТекАдрес = Письмо.Получатели.Добавить(СтрокаТаблицы.ЭлектронныйАдрес);
			ТекАдрес.ОтображаемоеИмя = СтрокаТаблицы.ФизЛицо;
		КонецЦикла;	
		
		Письмо.Тема = "Приближение срока изменения условий по договору аренды (" + ТекТТ + ")";
		
		ТекстПисьма = "Объект аренды """ + ТекТТ + """: через " + Формат(КолвоДней, "ЧГ=") + " дней (" + Формат(мДатаДоп, "ДЛФ=Д") +
		") изменение условий по договору.";
		Письмо.Тексты.Добавить(ТекстПисьма);
		
		//
		СтруктураОтбора.ТТ = ТекТТ;
		СтрокиТаблицы = ТабУсловия.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицы.Количество() > 0 Тогда 
			Письмо.Тексты.Добавить(Символы.ПС + "Изменение условий платы по договору.");
			
			СтрокиТаблицыПред = ТабПредыдущиеУсловия.НайтиСтроки(СтруктураОтбора);
			ЕстьПредУсловия = (СтрокиТаблицыПред.Количество() > 0);
			Если ЕстьПредУсловия Тогда
				Письмо.Тексты.Добавить("Действующие условия:");
				ТекстХТМЛ = ПолучитьТекстHTMLТаблицаУсловийПоДоговорамАренды(СтрокиТаблицыПред);
				Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
			КонецЕсли;
			Письмо.Тексты.Добавить("Новые условия:");
			ТекстХТМЛ = ПолучитьТекстHTMLТаблицаУсловийПоДоговорамАренды(СтрокиТаблицы);//, НЕ ЕстьПредУсловия);
			Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
		КонецЕсли;
		
		//
		СтрокиТаблицы = ТабДепозиты.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицы.Количество() > 0 Тогда 
			Письмо.Тексты.Добавить(Символы.ПС + "Изменение условий по депозитам.");
			
			СтрокиТаблицыПред = ТабПредыдущиеДепозиты.НайтиСтроки(СтруктураОтбора);
			ЕстьПредУсловия = (СтрокиТаблицыПред.Количество() > 0);
			Если ЕстьПредУсловия Тогда
				Письмо.Тексты.Добавить("Действующие условия:");
				ТекстХТМЛ = ПолучитьТекстHTMLТаблицаУсловийПоДепозитам(СтрокиТаблицыПред);
				Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
			КонецЕсли;
			Письмо.Тексты.Добавить("Новые условия:");
			ТекстХТМЛ = ПолучитьТекстHTMLТаблицаУсловийПоДепозитам(СтрокиТаблицы);//, НЕ ЕстьПредУсловия);
			Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
		КонецЕсли;
		
		//
		СтрокиТаблицы = ТабКурсыВалют.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицы.Количество() > 0 Тогда 
			Письмо.Тексты.Добавить(Символы.ПС + "Изменение условий по курсам валют.");
			
			СтрокиТаблицыПред = ТабПредыдущиеКурсыВалют.НайтиСтроки(СтруктураОтбора);
			ЕстьПредУсловия = (СтрокиТаблицыПред.Количество() > 0);
			Если ЕстьПредУсловия Тогда
				Письмо.Тексты.Добавить("Действующие условия:");
				ТекстХТМЛ = ПолучитьТекстHTMLТаблицаУсловийПоКурсамВалют(СтрокиТаблицыПред);
				Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
			КонецЕсли;
			Письмо.Тексты.Добавить("Новые условия:");
			ТекстХТМЛ = ПолучитьТекстHTMLТаблицаУсловийПоКурсамВалют(СтрокиТаблицы);//, НЕ ЕстьПредУсловия);
			Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
		КонецЕсли;
		
		//
		Почта = Новый ИнтернетПочта;
		
		Попытка
			Почта.Подключиться(ИПП);
			Почта.Послать(Письмо);
			Почта.Отключиться();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();		
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////////////
// Товарный ассортимент

Функция ПолучитьРезультатыЗапросаИзменениеТоварногоАссортимента(мОбщий = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, НачалоДня(ТекущаяДата()) - 86400);
	Запрос.УстановитьПараметр("ДатаОкончания"	, НачалоДня(ТекущаяДата()) - 1);
	
	Если мОбщий Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварныйАссортиментТочек.Период,
		|	ТоварныйАссортиментТочек.ТорговаяТочка,
		|	ТоварныйАссортиментТочек.Номенклатура,
		|	ТоварныйАссортиментТочек.Характеристика,
		|	ТоварныйАссортиментТочек.Выведена,
		|	ТоварныйАссортиментТочек.Запрещена,
		|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
		|ГДЕ
		|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ТоварныйАссортиментТочек.Выведена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварныйАссортиментТочек.ТорговаяТочка.id_TT,
		|	ТоварныйАссортиментТочек.Номенклатура.id_tov,
		|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварныйАссортиментТочек.Период,
		|	ТоварныйАссортиментТочек.ТорговаяТочка,
		|	ТоварныйАссортиментТочек.Номенклатура,
		|	ТоварныйАссортиментТочек.Характеристика,
		|	ТоварныйАссортиментТочек.Выведена,
		|	ТоварныйАссортиментТочек.Запрещена,
		|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаНачала, ) КАК ТАСрезПоследних
		|		ПО (ТАСрезПоследних.ТорговаяТочка = ТоварныйАссортиментТочек.ТорговаяТочка)
		|			И (ТАСрезПоследних.Номенклатура = ТоварныйАссортиментТочек.Номенклатура)
		|ГДЕ
		|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ТАСрезПоследних.ТорговаяТочка ЕСТЬ NULL 
		|	И НЕ ТоварныйАссортиментТочек.Выведена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварныйАссортиментТочек.ТорговаяТочка.id_TT,
		|	ТоварныйАссортиментТочек.Номенклатура.id_tov,
		|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи";
		
		Возврат Запрос.ВыполнитьПакет();
		
	Иначе
		
		ВремТаблица = Новый ТаблицаЗначений;
		ВремТаблица.Колонки.Добавить("УчетнаяЗаписьЭлектроннойПочты", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты"));
		ВремТаблица.Колонки.Добавить("Адрес"						, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
		ВыборкаСпр = Справочники.Расчетчики.Выбрать();
		Пока ВыборкаСпр.Следующий() Цикл
			Если ВыборкаСпр.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ТекАдрес = ВыборкаСпр.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты;
			ПозРазделителя = Найти(ТекАдрес, ";");
			Пока ПозРазделителя > 0 Цикл
				НоваяСтрока = ВремТаблица.Добавить();
				НоваяСтрока.УчетнаяЗаписьЭлектроннойПочты 	= ВыборкаСпр.УчетнаяЗаписьЭлектроннойПочты;
				НоваяСтрока.Адрес 							= СокрЛП(Лев(ТекАдрес, ПозРазделителя - 1));
				ТекАдрес = Сред(ТекАдрес, ПозРазделителя + 1);
				ПозРазделителя = Найти(ТекАдрес, ";");
			КонецЦикла;
			Если НЕ ТекАдрес = "" Тогда
				НоваяСтрока = ВремТаблица.Добавить();
				НоваяСтрока.УчетнаяЗаписьЭлектроннойПочты 	= ВыборкаСпр.УчетнаяЗаписьЭлектроннойПочты;
				НоваяСтрока.Адрес 							= СокрЛП(ТекАдрес);
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("ВремТаблица", ВремТаблица);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВремТаблица.УчетнаяЗаписьЭлектроннойПочты КАК УчетнаяЗаписьЭлектроннойПочты,
		|	ВремТаблица.Адрес КАК Адрес
		|ПОМЕСТИТЬ ВТАдреса
		|ИЗ
		|	&ВремТаблица КАК ВремТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТАдреса.Адрес КАК Адрес,
		|	ВложенныйЗапрос.Флаг КАК Флаг,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.ТорговаяТочка,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Выведена,
		|	ВложенныйЗапрос.Запрещена,
		|	ВложенныйЗапрос.ДатаСозданияЗаписи
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныйАссортиментТочек.Период КАК Период,
		|		ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка,
		|		ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
		|		ТоварныйАссортиментТочек.Характеристика КАК Характеристика,
		|		ТоварныйАссортиментТочек.Выведена КАК Выведена,
		|		ТоварныйАссортиментТочек.Запрещена КАК Запрещена,
		|		ТоварныйАссортиментТочек.ДатаСозданияЗаписи КАК ДатаСозданияЗаписи,
		|		2 КАК Флаг
		|	ИЗ
		|		РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
		|	ГДЕ
		|		ТоварныйАссортиментТочек.ДатаСозданияЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И ТоварныйАссортиментТочек.Выведена
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварныйАссортиментТочек.Период,
		|		ТоварныйАссортиментТочек.ТорговаяТочка,
		|		ТоварныйАссортиментТочек.Номенклатура,
		|		ТоварныйАссортиментТочек.Характеристика,
		|		ТоварныйАссортиментТочек.Выведена,
		|		ТоварныйАссортиментТочек.Запрещена,
		|		ТоварныйАссортиментТочек.ДатаСозданияЗаписи,
		|		1
		|	ИЗ
		|		РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаНачала, ) КАК ТАСрезПоследних
		|			ПО (ТАСрезПоследних.ТорговаяТочка = ТоварныйАссортиментТочек.ТорговаяТочка)
		|				И (ТАСрезПоследних.Номенклатура = ТоварныйАссортиментТочек.Номенклатура)
		|	ГДЕ
		|		ТоварныйАссортиментТочек.ДатаСозданияЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И ТАСрезПоследних.ТорговаяТочка ЕСТЬ NULL 
		|		И НЕ ТоварныйАссортиментТочек.Выведена) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
		|		ПО (НЕ ТЧГруппыНоменклатуры.Ссылка.УчетнаяЗаписьЭлектроннойПочты = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка))
		|			И (НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления)
		|			И (ТЧГруппыНоменклатуры.ГруппаНоменклатуры = ВложенныйЗапрос.Номенклатура)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаНачала, ) КАК ПорядокОбеспеченияТорговыхТочек
		|		ПО (ПорядокОбеспеченияТорговыхТочек.ГруппаУРЗ = ТЧГруппыНоменклатуры.ГруппаНоменклатуры.ГруппаНоменклатурыУРЗ)
		|			И (ПорядокОбеспеченияТорговыхТочек.Расчетчик = ТЧГруппыНоменклатуры.Ссылка.Склад)
		|			И (ПорядокОбеспеченияТорговыхТочек.ТорговаяТочка = ВложенныйЗапрос.ТорговаяТочка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАдреса КАК ВТАдреса
		|		ПО (ВТАдреса.УчетнаяЗаписьЭлектроннойПочты = ТЧГруппыНоменклатуры.Ссылка.УчетнаяЗаписьЭлектроннойПочты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Флаг,
		|	ВложенныйЗапрос.ТорговаяТочка.id_TT,
		|	ВложенныйЗапрос.Номенклатура.Наименование
		|ИТОГИ ПО
		|	Адрес,
		|	Флаг";
		
		Возврат Запрос.Выполнить();
		
	КонецЕсли;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция ПолучитьТекстHTMLТаблицаТА(РезультатЗапроса)
	
	ТекстХТМЛ = "<table border='2'><tr align='center'><td>Период</td><td>Торговая точка</td><td>Номенклатура</td><td>Характеристика</td><td>Выведена</td><td>Запрещена</td><td>Дата создания записи</td></tr>";
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.Период, "ДЛФ=Д") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.ТорговаяТочка) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Номенклатура) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Характеристика) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + ?(Выборка.Выведена	, "v", " ") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + ?(Выборка.Запрещена	, "v", " ") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.ДатаСозданияЗаписи, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Процедура ОтправитьОповещениеОбИзмененииТоварногоАссортимента() Экспорт
	
	////////////////////////////////
	// СНАЧАЛА - ОБЩИЕ
	РезультатыЗапросаОбщие = ПолучитьРезультатыЗапросаИзменениеТоварногоАссортимента(Истина);
	
	РезультатДобавленные 	= РезультатыЗапросаОбщие[1];
	РезультатВыведенные 	= РезультатыЗапросаОбщие[0];
	Если РезультатДобавленные.Пустой()
		И РезультатВыведенные.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP 	= "10.0.0.30";
	ИПП.ПортSMTP 			= 25;
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	
	//
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель = "no-reply@vkusvill.ru";
	
	Письмо.Получатели.Добавить("zakaz@izbenka.msk.ru");   // Максиму Федорову
	
	мТемаПисем = "Изменения товарного ассортимента (" + Формат(НачалоДня(ТекущаяДата()) - 1, "ДЛФ=Д") + ")";
	Письмо.Тема = мТемаПисем;
	
	Если НЕ РезультатДобавленные.Пустой() Тогда 
		Письмо.Тексты.Добавить("Добавлен товарный ассортимент (" + Формат(НачалоДня(ТекущаяДата()) - 1, "ДЛФ=Д") + "):");
		ТекстХТМЛ = ПолучитьТекстHTMLТаблицаТА(РезультатДобавленные);
		Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
	КонецЕсли;
	
	Если НЕ РезультатВыведенные.Пустой() Тогда
		Письмо.Тексты.Добавить("Выведен товарный ассортимент (" + Формат(НачалоДня(ТекущаяДата()) - 1, "ДЛФ=Д") + "):");
		ТекстХТМЛ = ПолучитьТекстHTMLТаблицаТА(РезультатВыведенные);
		Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(ИПП);
		Почта.Послать(Письмо);
		Почта.Отключиться();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();		
	КонецПопытки;
	
	
	////////////////////////////////
	// ПОТОМ - ПО РАСЧЕТЧИКАМ
	РезультатЗапроса = ПолучитьРезультатыЗапросаИзменениеТоварногоАссортимента();
	
	ВыборкаПоУчеткам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Адрес");
	Пока ВыборкаПоУчеткам.Следующий() Цикл
		
		//
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель = "no-reply@vkusvill.ru";
		
		Письмо.Получатели.Добавить(СокрЛП(ВыборкаПоУчеткам.Адрес));   // расчетчику
		
		Письмо.Тема = мТемаПисем;
		
		ВыборкаПоТипу = ВыборкаПоУчеткам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Флаг");
		Пока ВыборкаПоТипу.Следующий() Цикл
			
			Письмо.Тексты.Добавить(?(ВыборкаПоТипу.Флаг = 1, "Добавлен", "Выведен") + " товарный ассортимент (" + Формат(НачалоДня(ТекущаяДата()) - 1, "ДЛФ=Д") + "):");
			ТекстХТМЛ = ПолучитьТекстHTMLТаблицаТА(ВыборкаПоТипу);
			Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
			
		КонецЦикла;
		
		Почта = Новый ИнтернетПочта;
		
		Попытка
			Почта.Подключиться(ИПП);
			Почта.Послать(Письмо);
			Почта.Отключиться();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();		
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьТекстHTMLТаблицаТАВыведенный(СтрокиТаблицы)
	
	ТекстХТМЛ = "<table border='2'><tr align='center'><td>Номенклатура</td><td>Характеристика</td><td>Дата создания записи</td></tr>";
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Номенклатура) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Характеристика) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.ДатаСозданияЗаписи, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Процедура ОтправитьПисьмоОВыведенномАссортименте(мАдрес, ТаблицаВыведенные, мМассивТТ)
	
	//
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP 	= "10.0.0.30";
	ИПП.ПортSMTP 			= 25;
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	
	//
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Товары, выведенные из ассортимента (" + Формат(НачалоДня(ТекущаяДата()) - 1, "ДЛФ=Д") + ")";
	
	Письмо.Отправитель = "no-reply@vkusvill.ru";
	Письмо.Получатели.Добавить(мАдрес);
	
	Письмо.Тексты.Добавить("Выведен товарный ассортимент (" + Формат(НачалоДня(ТекущаяДата()) - 1, "ДЛФ=Д") + "):");
	Для Каждого ТекТТ Из мМассивТТ Цикл
		Письмо.Тексты.Добавить(Символы.ПС + Строка(ТекТТ));
		СтрокиВыведенные = ТаблицаВыведенные.НайтиСтроки(Новый Структура("ТорговаяТочка", ТекТТ));
		ТекстХТМЛ = ПолучитьТекстHTMLТаблицаТАВыведенный(СтрокиВыведенные);
		Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(ИПП);
		Почта.Послать(Письмо);
		Почта.Отключиться();
	Исключение
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = ОписаниеОшибки();
		//Сообщение.Сообщить();		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьСМСОВыведенномАссортименте(мНомерТелефона, ТаблицаВыведенные, мМассивТТ)
	
	мНомерТелефона = СтрЗаменить(мНомерТелефона, " ", "");
	мНомерТелефона = СтрЗаменить(мНомерТелефона, "-", "");
	мНомерТелефона = СтрЗаменить(мНомерТелефона, "(", "");
	мНомерТелефона = СтрЗаменить(мНомерТелефона, ")", "");
	мНомерТелефона = Прав(мНомерТелефона, 10);
	
	Если НЕ СтрДлина(мНомерТелефона) = 10 Тогда
		Возврат;
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
	
	Если ADOСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекТТ Из мМассивТТ Цикл
		
		СообщениеSMS = "С магазина " + ТекТТ + " выведены: ";
		
		СтрокиТаблицы = ТаблицаВыведенные.НайтиСтроки(Новый Структура("ТорговаяТочка", ТекТТ));
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			СообщениеSMS = СообщениеSMS + СтрокаТаблицы.Номенклатура + ";";
		КонецЦикла;
		
		СообщениеSMS = Лев(СообщениеSMS, 70);
		
		ТекстЗапроса = "/****** Сценарий для команды SelectTopNRows среды SSMS  ******/
		|insert into IES..Outgoing
		|	(Number,
		|	Message,
		|	AddDate,
		//+++АК SHEP 2018.08.27 ИП-00019339
		//|	DiscountCardUID,
		//---АК SHEP 2018.08.27
		|	type_BV,
		|	Project,
		|	user_add)
		|VALUES 
		|	 ('7' + Left('" + мНомерТелефона + "', 10),
		|	'" + СообщениеSMS + "',
		|	'" + ТекущаяДата() + "',
		//+++АК SHEP 2018.08.27 ИП-00019339
		//|	NULL,
		//---АК SHEP 2018.08.27
		|	'9',
		|	'РассылкаТТ',
		|	'" + СокрЛП(ПараметрыСеанса.ТекущийПользователь) + "')
		|;";
		
		Попытка
			ADOСоединение.Execute(ТекстЗапроса);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	ADOСоединение.Close();
	
КонецПроцедуры

Процедура ОтправитьОповещенияОВыведенномАссортименте() Экспорт
	
	// торговые точки, выведенные за предыдущий день
	РезультатыЗапроса = ПолучитьРезультатыЗапросаИзменениеТоварногоАссортимента(Истина);
	
	ТаблицаВыведенные = РезультатыЗапроса[0].Выгрузить();
	Если ТаблицаВыведенные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВремТаблица = ТаблицаВыведенные.Скопировать();
	ВремТаблица.Свернуть("ТорговаяТочка");
	МассивТорговыхТочек = ВремТаблица.ВыгрузитьКолонку("ТорговаяТочка");
	
	
	// помощники и их адреса эл. почты, телефоны
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, МассивТорговыхТочек);
	Запрос.УстановитьПараметр("ТекДата"				, ТекущаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналИзмененийПомощниковУправляющих.СтруктурнаяЕдиница,
	|	ЖурналИзмененийПомощниковУправляющих.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТПомощники
	|ИЗ
	|	РегистрСведений.ЖурналИзмененийПомощниковУправляющих КАК ЖурналИзмененийПомощниковУправляющих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЖурналИзмененийПомощниковУправляющих.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			МАКСИМУМ(ЖурналИзмененийПомощниковУправляющих.ДатаИзменения) КАК ДатаИзменения
	|		ИЗ
	|			РегистрСведений.ЖурналИзмененийПомощниковУправляющих КАК ЖурналИзмененийПомощниковУправляющих
	|		ГДЕ
	|			ЖурналИзмененийПомощниковУправляющих.ВидОперации = ""Привязка помощника""
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЖурналИзмененийПомощниковУправляющих.СтруктурнаяЕдиница) КАК СлужТаблица
	|		ПО (СлужТаблица.ДатаИзменения = ЖурналИзмененийПомощниковУправляющих.ДатаИзменения)
	|			И (СлужТаблица.СтруктурнаяЕдиница = ЖурналИзмененийПомощниковУправляющих.СтруктурнаяЕдиница)
	|ГДЕ
	|	ЖурналИзмененийПомощниковУправляющих.СтруктурнаяЕдиница В(&МассивТорговыхТочек)
	|	И ЖурналИзмененийПомощниковУправляющих.ВидОперации = ""Привязка помощника""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(300)) КАК Адрес
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&ТекДата, РуководительОтдела) КАК ПользователиПоЦФОСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ТекДата, СтруктурнаяЕдиница В (&МассивТорговыхТочек)) КАК ЦФОСтруктурныхЕдиниц
	|		ПО (ЦФОСтруктурныхЕдиниц.ЦФО = ПользователиПоЦФОСрезПоследних.ЦФО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо)
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	|ИТОГИ ПО
	|	Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПомощники.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(300)) КАК Адрес
	|ИЗ
	|	ВТПомощники КАК ВТПомощники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ВТПомощники.ФизическоеЛицо = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	|ИТОГИ ПО
	|	Адрес";
	//|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	//|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаТерУправляющиеАдреса = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ВыборкаПомощникиАдреса 		= РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	//////////////////////////////////////////////////////////////
	// 1. Отправка сообщений на торговые точки
	мИзбенка = Перечисления.ТипыРозничныхТочек.Избенка;
	ДопТаблица_1 = Новый ТаблицаЗначений;
	ДопТаблица_1.Колонки.Добавить("ТорговаяТочка");
	ДопТаблица_1.Колонки.Добавить("Адрес");
	ДопТаблица_2 = Новый ТаблицаЗначений;
	ДопТаблица_2.Колонки.Добавить("ТорговаяТочка");
	ДопТаблица_2.Колонки.Добавить("Телефон");
	Для Каждого ТекТорговаяТочка Из МассивТорговыхТочек Цикл
		Если ТекТорговаяТочка.ТипРозничнойТочки = мИзбенка Тогда
			СтрокаТаблицы = ДопТаблица_2.Добавить();
			СтрокаТаблицы.ТорговаяТочка = ТекТорговаяТочка;
			СтрокаТаблицы.Телефон		= ТекТорговаяТочка.ТелефонныйНомер1;
		Иначе
			СтрокаТаблицы = ДопТаблица_1.Добавить();
			СтрокаТаблицы.ТорговаяТочка = ТекТорговаяТочка;
			СтрокаТаблицы.Адрес			= ТекТорговаяТочка.АдресЭлектроннойПочты;
		КонецЕсли;
	КонецЦикла;
	
	ДопТаблица_1.Сортировать("Адрес");
	ДопТаблица_2.Сортировать("Телефон");
	
	мАдрес 		= Неопределено;
	мМассивТТ 	= Новый Массив;
	Для Каждого СтрокаТаблицы Из ДопТаблица_1 Цикл
		Если НЕ СтрокаТаблицы.Адрес = мАдрес
			И НЕ мАдрес = Неопределено Тогда
			ОтправитьПисьмоОВыведенномАссортименте(мАдрес, ТаблицаВыведенные, мМассивТТ);
			мМассивТТ.Очистить();
		КонецЕсли;
		мМассивТТ.Добавить(СтрокаТаблицы.ТорговаяТочка);
		мАдрес = СтрокаТаблицы.Адрес;
	КонецЦикла;
	Если НЕ мАдрес = Неопределено Тогда
		ОтправитьПисьмоОВыведенномАссортименте(мАдрес, ТаблицаВыведенные, мМассивТТ);
		мМассивТТ.Очистить();
	КонецЕсли;
	
	мНомерТелефона	= Неопределено;
	мМассивТТ 		= Новый Массив;
	Для Каждого СтрокаТаблицы Из ДопТаблица_2 Цикл
		Если НЕ СтрокаТаблицы.Телефон = мНомерТелефона
			И НЕ мНомерТелефона = Неопределено Тогда
			ОтправитьСМСОВыведенномАссортименте(мНомерТелефона, ТаблицаВыведенные, мМассивТТ);
			мМассивТТ.Очистить();
		КонецЕсли;
		мМассивТТ.Добавить(СтрокаТаблицы.ТорговаяТочка);
		мНомерТелефона = СтрокаТаблицы.Телефон;
	КонецЦикла;
	Если НЕ мНомерТелефона = Неопределено Тогда
		ОтправитьСМСОВыведенномАссортименте(мНомерТелефона, ТаблицаВыведенные, мМассивТТ);
		мМассивТТ.Очистить();
	КонецЕсли;
	
	
	//////////////////////////////////////////////////////////////
	// 2. Отправка эл. писем тер. управляющим и помощникам
	//Пока ВыборкаПомощникиАдреса.Следующий() Цикл 
	//	мАдрес = СокрЛП(ВыборкаПомощникиАдреса.Адрес);
	//	мМассивТТ = Новый Массив;
	//	Выборка = ВыборкаПомощникиАдреса.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		мМассивТТ.Добавить(Выборка.ТорговаяТочка);
	//	КонецЦикла;
	//	Если мМассивТТ.Количество() > 0 Тогда
	//		ОтправитьПисьмоОВыведенномАссортименте(мАдрес, ТаблицаВыведенные, мМассивТТ);
	//	КонецЕсли;
	//КонецЦикла;
	Пока ВыборкаТерУправляющиеАдреса.Следующий() Цикл 
		мАдрес = СокрЛП(ВыборкаТерУправляющиеАдреса.Адрес);
		мМассивТТ = Новый Массив;
		Выборка = ВыборкаТерУправляющиеАдреса.Выбрать();
		Пока Выборка.Следующий() Цикл
			мМассивТТ.Добавить(Выборка.ТорговаяТочка);
		КонецЦикла;
		Если мМассивТТ.Количество() > 0 Тогда
			ОтправитьПисьмоОВыведенномАссортименте(мАдрес, ТаблицаВыведенные, мМассивТТ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьРезультатЗапросаИзменениеТоварногоАссортимента(ДатаНачала, ДатаОкончания, мОбщий = Ложь)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, ДатаОкончания);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	|	2 КАК Флаг
	|ПОМЕСТИТЬ ВТВыведеноДобавлено
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТоварныйАссортиментТочек.ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И ТоварныйАссортиментТочек.ТорговаяТочка.Активное
	|	И ТоварныйАссортиментТочек.Выведена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка,
	|	ТоварныйАссортиментТочек.Номенклатура,
	|	1
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				&ДатаНачала,
	|				ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|					И ТорговаяТочка.Активное) КАК ТАСрезПоследних
	|		ПО (ТАСрезПоследних.ТорговаяТочка = ТоварныйАссортиментТочек.ТорговаяТочка)
	|			И (ТАСрезПоследних.Номенклатура = ТоварныйАссортиментТочек.Номенклатура)
	|ГДЕ
	|	ТоварныйАссортиментТочек.ДатаСозданияЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТоварныйАссортиментТочек.ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И ТоварныйАссортиментТочек.ТорговаяТочка.Активное
	|	И ТАСрезПоследних.ТорговаяТочка ЕСТЬ NULL 
	|	И НЕ ТоварныйАссортиментТочек.Выведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Номенклатура,
	|	ПорядокОбеспеченияТорговыхТочек.Расчетчик КАК Склад,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварныйАссортиментТочек.ТорговаяТочка) КАК КолТТ
	|ПОМЕСТИТЬ ВТТоварныйАссортиментНачальный
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаНачала,
	|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное) КАК ТоварныйАссортиментТочек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаНачала, ) КАК ПорядокОбеспеченияТорговыхТочек
	|		ПО (ПорядокОбеспеченияТорговыхТочек.ГруппаУРЗ = ТоварныйАссортиментТочек.Номенклатура.ГруппаНоменклатурыУРЗ)
	|			И (ПорядокОбеспеченияТорговыхТочек.ТорговаяТочка = ТоварныйАссортиментТочек.ТорговаяТочка)
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочек.Номенклатура,
	|	ПорядокОбеспеченияТорговыхТочек.Расчетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыведеноДобавлено.Номенклатура,
	|	ПорядокОбеспеченияТорговыхТочек.Расчетчик КАК Склад,
	|	СУММА(ВЫБОР
	|			КОГДА ВТВыведеноДобавлено.Флаг = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДобавлено,
	|	СУММА(ВЫБОР
	|			КОГДА ВТВыведеноДобавлено.Флаг = 2
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВыведено
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	ВТВыведеноДобавлено КАК ВТВыведеноДобавлено
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаНачала, ) КАК ПорядокОбеспеченияТорговыхТочек
	|		ПО (ПорядокОбеспеченияТорговыхТочек.ГруппаУРЗ = ВТВыведеноДобавлено.Номенклатура.ГруппаНоменклатурыУРЗ)
	|			И (ПорядокОбеспеченияТорговыхТочек.ТорговаяТочка = ВТВыведеноДобавлено.ТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыведеноДобавлено.Номенклатура,
	|	ПорядокОбеспеченияТорговыхТочек.Расчетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если мОбщий Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВТОсновная.Номенклатура,
		|	ВТОсновная.Склад,
		|	ВТОсновная.КоличествоДобавлено,
		|	ВТОсновная.КоличествоВыведено,
		|	ЕСТЬNULL(ВТТоварныйАссортиментНачальный.КолТТ, 0) КАК КоличествоНач
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварныйАссортиментНачальный КАК ВТТоварныйАссортиментНачальный
		|		ПО (ВТТоварныйАссортиментНачальный.Номенклатура = ВТОсновная.Номенклатура)
		|			И (ВТТоварныйАссортиментНачальный.Склад = ВТОсновная.Склад)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТОсновная.Номенклатура.Наименование,
		|	ВТОсновная.Склад.Наименование";
		
	Иначе
		
		ВремТаблица = Новый ТаблицаЗначений;
		ВремТаблица.Колонки.Добавить("Расчетчик", Новый ОписаниеТипов("СправочникСсылка.Расчетчики"));
		ВремТаблица.Колонки.Добавить("Адрес"	, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
		ВыборкаСпр = Справочники.Расчетчики.Выбрать();
		Пока ВыборкаСпр.Следующий() Цикл
			Если ВыборкаСпр.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ТекАдрес = ВыборкаСпр.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты;
			ПозРазделителя = Найти(ТекАдрес, ";");
			Пока ПозРазделителя > 0 Цикл
				НоваяСтрока = ВремТаблица.Добавить();
				НоваяСтрока.Расчетчик 	= ВыборкаСпр.Ссылка;
				НоваяСтрока.Адрес 		= СокрЛП(Лев(ТекАдрес, ПозРазделителя - 1));
				ТекАдрес = Сред(ТекАдрес, ПозРазделителя + 1);
				ПозРазделителя = Найти(ТекАдрес, ";");
			КонецЦикла;
			Если НЕ ТекАдрес = "" Тогда
				НоваяСтрока = ВремТаблица.Добавить();
				НоваяСтрока.Расчетчик 	= ВыборкаСпр.Ссылка;
				НоваяСтрока.Адрес 		= СокрЛП(ТекАдрес);
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("ВремТаблица", ВремТаблица);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВремТаблица.Расчетчик КАК Расчетчик,
		|	ВремТаблица.Адрес КАК Адрес
		|ПОМЕСТИТЬ ВТАдреса
		|ИЗ
		|	&ВремТаблица КАК ВремТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВТАдреса.Адрес КАК Адрес,
		|	ВТОсновная.Номенклатура,
		|	ВТОсновная.Склад,
		|	ВТОсновная.КоличествоДобавлено,
		|	ВТОсновная.КоличествоВыведено,
		|	ЕСТЬNULL(ВТТоварныйАссортиментНачальный.КолТТ, 0) КАК КоличествоНач
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварныйАссортиментНачальный КАК ВТТоварныйАссортиментНачальный
		|		ПО (ВТТоварныйАссортиментНачальный.Номенклатура = ВТОсновная.Номенклатура)
		|			И (ВТТоварныйАссортиментНачальный.Склад = ВТОсновная.Склад)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
		|		ПО (ТЧГруппыНоменклатуры.ГруппаНоменклатуры = ВТОсновная.Номенклатура)
		|			И (ТЧГруппыНоменклатуры.Ссылка.Склад = ВТОсновная.Склад)
		|			И (НЕ ТЧГруппыНоменклатуры.Ссылка.УчетнаяЗаписьЭлектроннойПочты = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка))
		|			И (НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАдреса КАК ВТАдреса
		|		ПО (ВТАдреса.Расчетчик = ТЧГруппыНоменклатуры.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТОсновная.Номенклатура.Наименование,
		|	ВТОсновная.Склад.Наименование
		|ИТОГИ ПО
		|	Адрес";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьТекстHTMLТаблицаТА_Кол(РезультатЗапроса)
	
	ТекстХТМЛ = "<table border='2'><tr align='center'><td>№ п/п</td><td>Номенклатура</td><td>Склад</td><td>Количество ВВ(ТТ)</td><td>Выведено</td><td>Заведено</td></tr>";
	
	н = 1;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(н, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Номенклатура) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Склад) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.КоличествоНач, "ЧГ=0;ЧДЦ=0") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.КоличествоВыведено, "ЧГ=0;ЧДЦ=0") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.КоличествоДобавлено, "ЧГ=0;ЧДЦ=0") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
		н = н + 1;
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Процедура ОповещениеОбИзмененииТоварногоАссортиментаЗаПериод(мДатаНачала, мДатаОкончания, ЗаНеделю = Ложь)
	
	// торговые точки, выведенные за предыдущий день
	РезультатЗапроса = ПолучитьРезультатЗапросаИзменениеТоварногоАссортимента(мДатаНачала, мДатаОкончания, Истина);	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	//
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP 	= "10.0.0.30";
	ИПП.ПортSMTP 			= 25;
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	
	//
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель = "no-reply@vkusvill.ru";
	
	Письмо.Получатели.Добавить("zakaz@izbenka.msk.ru");   // Максиму Федорову
	
	мТемаПисем = "Изменение товарного ассортимента (" + Формат(мДатаНачала, "ДЛФ=Д") + ?(ЗаНеделю, "-" + Формат(мДатаОкончания, "ДЛФ=Д"), "") + ")";
	Письмо.Тема = мТемаПисем;
	
	Письмо.Тексты.Добавить(мТемаПисем + ":");
	ТекстХТМЛ = ПолучитьТекстHTMLТаблицаТА_Кол(РезультатЗапроса);
	Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(ИПП);
		Почта.Послать(Письмо);
		Почта.Отключиться();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();		
	КонецПопытки;
	
	
	////////////////////////////////
	// ПОТОМ - ПО РАСЧЕТЧИКАМ
	РезультатЗапроса = ПолучитьРезультатЗапросаИзменениеТоварногоАссортимента(мДатаНачала, мДатаОкончания);	
	
	ВыборкаПоУчеткам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Адрес");
	Пока ВыборкаПоУчеткам.Следующий() Цикл
		
		//
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель = "no-reply@vkusvill.ru";
		
		Письмо.Получатели.Добавить(СокрЛП(ВыборкаПоУчеткам.Адрес));   // расчетчику
		
		Письмо.Тема = мТемаПисем;
		
		Письмо.Тексты.Добавить(мТемаПисем + ":");
		ТекстХТМЛ = ПолучитьТекстHTMLТаблицаТА_Кол(ВыборкаПоУчеткам);
		Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
		
		Почта = Новый ИнтернетПочта;
		
		Попытка
			Почта.Подключиться(ИПП);
			Почта.Послать(Письмо);
			Почта.Отключиться();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();		
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОповещениеОбИзмененииТоварногоАссортимента() Экспорт
	
	мДатаОкончания 	= НачалоДня(ТекущаяДата()) - 1;
	
	// ежедневная рассылка
	мДатаНачала 	= НачалоДня(мДатаОкончания);
	ОповещениеОбИзмененииТоварногоАссортиментаЗаПериод(мДатаНачала, мДатаОкончания);
	
	// еженедельная рассылка
	Если НачалоДня(ТекущаяДата()) = НачалоНедели(ТекущаяДата()) Тогда
		мДатаНачала = НачалоНедели(мДатаОкончания);
		ОповещениеОбИзмененииТоварногоАссортиментаЗаПериод(мДатаНачала, мДатаОкончания, Истина);
	КонецЕсли;
	
КонецПроцедуры


Функция ОпределитьПравильныйТоварДляТочкиТовАссортимент(ТорговаяТочка, МассивТоваров, ТабСамыеЧастыеТовары, ТабСкладыМагазинов)
	
	СтрокаКешСклад = ТабСкладыМагазинов.Найти(ТорговаяТочка, "ТорговаяТочка");
	Если СтрокаКешСклад = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	ТабПоТоварам = Новый ТаблицаЗначений();
	ТабПоТоварам.Колонки.Добавить("Товар");
	ТабПоТоварам.Колонки.Добавить("Колво");
	
	Для Каждого ЭлементТовар Из МассивТоваров Цикл
		СтрокиПоТовару = ТабСамыеЧастыеТовары.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаКешСклад.ОсновнойСклад, ЭлементТовар));
		СтрокаДоб = ТабПоТоварам.Добавить();
		СтрокаДоб.Товар = ЭлементТовар;
		СтрокаДоб.Колво = ?(СтрокиПоТовару.Количество() = 0, 0, СтрокиПоТовару[0].Колво);
	КонецЦикла;
	
	ТабПоТоварам.Сортировать("Колво убыв");
	Возврат ТабПоТоварам[0].Товар;
	
КонецФункции

Функция ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(ТорговаяТочка, Товар, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки=Неопределено)
	
	СтрокаКешСклад = ТабСкладыМагазинов.Найти(ТорговаяТочка, "ТорговаяТочка");
	Если СтрокаКешСклад <> Неопределено Тогда
		ТабПоТоварам = Новый ТаблицаЗначений();
		ТабПоТоварам.Колонки.Добавить("Харка");
		ТабПоТоварам.Колонки.Добавить("Колво");
		//+++АК BELN 2018.11.20 ИП-00020410
		ТабПоТоварам.Колонки.Добавить("СтатусАктивностиХарактеристики");
		//---АК BELN      
		СтрокиПоХарке = ТабСамыеЧастыеХарки.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаКешСклад.ОсновнойСклад, Товар));
		
		Для Каждого СтрокаХар Из СтрокиПоХарке Цикл
			СтрокаДоб = ТабПоТоварам.Добавить();
			СтрокаДоб.Харка = СтрокаХар.Характеристика;
			СтрокаДоб.Колво = СтрокаХар.Колво;
			//+++АК BELN 2018.11.20 ИП-00020410
			Если НЕ ТабАктивныеХарки=Неопределено Тогда
				СтрокаДоб.СтатусАктивностиХарактеристики = СтрокаХар.СтатусАктивностиХарактеристики;
			КонецЕсли; 
			//---АК BELN      
		КонецЦикла;
		
		ТабПоТоварам.Сортировать("Колво убыв");
		//+++АК BELN 2018.11.20 ИП-00020410 
		Если НЕ ТабАктивныеХарки=Неопределено Тогда
			ИскХар=Неопределено;
			Для Каждого СтрокаХар Из ТабПоТоварам Цикл
				Если НЕ СтрокаХар.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Выведена
					И НЕ СтрокаХар.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Неактивная 
					Тогда
					ИскХар=СтрокаХар.Харка;
					Прервать;
				
				КонецЕсли; 
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ИскХар) Тогда
				СтрокиПоХарке = ТабАктивныеХарки.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаКешСклад.ОсновнойСклад, Товар));
				Если СтрокиПоХарке.Количество() Тогда
					ИскХар=СтрокиПоХарке[0].Характеристика;
				КонецЕсли; 
			КонецЕсли; 
			//Возврат ?(ТабПоТоварам.Количество() > 0, ТабПоТоварам[0].Харка, Неопределено);
			Возврат ?(ЗначениеЗаполнено(ИскХар),ИскХар,?(ТабПоТоварам.Количество() > 0, ТабПоТоварам[0].Харка, Неопределено));
		Иначе
			Возврат ?(ТабПоТоварам.Количество() > 0, ТабПоТоварам[0].Харка, Неопределено);
		КонецЕсли; 
			//---АК BELN      
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура ФормированиеТоварногоАссортимента(ОтборПоМагазину = Неопределено, ПринудительноКакДляФормата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//закешируем наиболее часто встречающуюся характеристику для складов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"		, ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("Кавказский"	, Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
	//+++АК BELN 2018.11.20 ИП-00020410      
	Запрос.УстановитьПараметр("СтатусХарактеристики1"	, Перечисления.СтатусыХарактеристик.Приостановлена);
	Запрос.УстановитьПараметр("СтатусХарактеристики2"	, Перечисления.СтатусыХарактеристик.НаВывод);
	
	Запрос.УстановитьПараметр("СтатусАктивностиХарактеристики1"	, Перечисления.СтатусыАктивностиХарактеристик.Выведена);
	Запрос.УстановитьПараметр("СтатусАктивностиХарактеристики2"	, Перечисления.СтатусыАктивностиХарактеристик.Неактивная);
	//---АК BELN  
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад КАК ОсновнойСклад,
	|	СУММА(1) КАК Колво,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика.СтатусАктивностиХарактеристики КАК СтатусАктивностиХарактеристики
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад КАК ОсновнойСклад,
	|	СУММА(1) КАК Колво
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ОсновнойСклад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &Кавказский
	|		ИНАЧЕ СтруктурныеЕдиницы.ОсновнойСклад
	|	КОНЕЦ КАК ОсновнойСклад
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница КАК ОсновнойСклад
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|		ПО ХарактеристикиНоменклатуры.Владелец = ДоступностьТоваровНаСкладах.Номенклатура
	|ГДЕ
	|	(НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = &СтатусАктивностиХарактеристики1 И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = &СтатусАктивностиХарактеристики2)
	|	И (НЕ ХарактеристикиНоменклатуры.Статус= &СтатусХарактеристики1 И НЕ ХарактеристикиНоменклатуры.Статус = &СтатусХарактеристики2)
	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабСамыеЧастыеХарки = Результаты[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСамыеЧастыеТовары = Результаты[1].Выгрузить();
	ТабСамыеЧастыеТовары.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов = Результаты[2].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	//+++АК BELN 2018.11.20 ИП-00020410      
	ТабАктивныеХарки = Результаты[3].Выгрузить();
	ТабАктивныеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	//---АК BELN 2018.11.20 

	//сначала выведем полностью заменяемые аналоги
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	АналогиНоменклатурыТовары1.Номенклатура КАК Номенклатура1,
	|	АналогиНоменклатурыТовары.Ссылка КАК СсылкаАналог
	|ПОМЕСТИТЬ ВТ_Аналоги
	|ИЗ
	|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары1
	|		ПО АналогиНоменклатурыТовары.Ссылка = АналогиНоменклатурыТовары1.Ссылка
	|ГДЕ
	|	АналогиНоменклатурыТовары.Ссылка.ПолностьюЗаменяемыйТовар = ИСТИНА
	|	И АналогиНоменклатурыТовары.Номенклатура <> АналогиНоменклатурыТовары1.Номенклатура
	|	И АналогиНоменклатурыТовары.Номенклатура.Выведена = ЛОЖЬ
	|	И АналогиНоменклатурыТовары1.Номенклатура.Выведена = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТ_Аналоги.СсылкаАналог КАК СсылкаАналог,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|ПОМЕСТИТЬ ВТ_ТоварныйАссортимент
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ_Аналоги.Номенклатура
	|				ИЗ
	|					ВТ_Аналоги КАК ВТ_Аналоги)) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Аналоги КАК ВТ_Аналоги
	|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВТ_Аналоги.Номенклатура
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|	И (ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	СсылкаАналог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварныйАссортимент.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТ_ТоварныйАссортимент.СсылкаАналог КАК СсылкаАналог,
	|	ВТ_ТоварныйАссортимент.Номенклатура,
	|	ВТ_ТоварныйАссортимент1.Номенклатура КАК Номенклатура1
	|ИЗ
	|	ВТ_ТоварныйАссортимент КАК ВТ_ТоварныйАссортимент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТоварныйАссортимент КАК ВТ_ТоварныйАссортимент1
	|		ПО ВТ_ТоварныйАссортимент.ТорговаяТочка = ВТ_ТоварныйАссортимент1.ТорговаяТочка
	|			И ВТ_ТоварныйАссортимент.СсылкаАналог = ВТ_ТоварныйАссортимент1.СсылкаАналог
	|ГДЕ
	|	ВТ_ТоварныйАссортимент.Номенклатура <> ВТ_ТоварныйАссортимент1.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТорговаяТочка,
	|	СсылкаАналог";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ТорговаяТочка") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("СсылкаАналог") Цикл
			МассивАналогов = Новый Массив();
			Пока Выборка.Следующий() Цикл
				МассивАналогов.Добавить(Выборка.Номенклатура);
			КонецЦикла;
			ТоварПравильный = ОпределитьПравильныйТоварДляТочкиТовАссортимент(Выборка.ТорговаяТочка, МассивАналогов, ТабСамыеЧастыеТовары, ТабСкладыМагазинов);
			
			Если ЗначениеЗаполнено(ТоварПравильный) Тогда
				СтрокаУстановитьАналог = Строка(ТоварПравильный);
				Для Каждого ЭлементАналог Из МассивАналогов Цикл
					Если ЭлементАналог <> ТоварПравильный Тогда
					
						Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
						Запись.Период 			= ТекущаяДата();
						Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
						Запись.Номенклатура 	= ЭлементАналог;
						Запись.Выведена 		= Истина;
						Запись.Комментарий 		= "Авт. обработка: выведена из-за присутствия полного аналога " + СтрокаУстановитьАналог;
						
						//+++АК mika 2018.11.21 ИП-00020481
						Если РегистрыСведений.ТоварныйАссортиментТочек.ПроверкаПрограмногоВыводаПозицииИзАссортиментаАвто(Выборка.ТорговаяТочка, ЭлементАналог, Ложь, "БезУведомлений") Тогда
							Запись.Комментарий = РегистрыСведений.ТоварныйАссортиментТочек.ПолучитьКомментарийОбходаКонтроляАвтовывода(Запись.Комментарий, "ЗаменяемыеАналоги"); //+++АК mika 2018.12.14 ИП-00020392.02 
						КонецЕсли;
						//---АК mika
						
						Попытка
							Запись.Записать();
						Исключение
							ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
						КонецПопытки;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	//формирование обязательного ассортимента
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ПризнакДляДетей", Справочники.ПризнакиУчетаНоменклатуры.НайтиПоНаименованию("Детские товары"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Обяз.Магазин,
	|	Обяз.Номенклатура,
	|	ВЗ_Харки.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЗ_Запрос.Магазин КАК Магазин,
	|		ВЗ_Запрос.Номенклатура КАК Номенклатура
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|			НоменклатураСпр.Ссылка КАК Номенклатура
	|		ИЗ
	|			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|				ПО (ИСТИНА)
	|		ГДЕ
	|			СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|			И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|			И НоменклатураСпр.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обязательный)
	|			И НоменклатураСпр.Выведена = ЛОЖЬ
	|			И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ
	//+++АК KIRN 2018.03.02 ИП-00018034
	|			И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 	
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЗ_СпецАкции.Магазин,
	|			ВЗ_СпецАкции.Номенклатура
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|				НоменклатураСпр.Ссылка КАК Номенклатура
	|			ИЗ
	|				Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|					ПО (ИСТИНА)
	|			ГДЕ
	|				СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|				И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|				И &ТекДата МЕЖДУ НоменклатураСпр.ОбязателенВАссортиментеМагазиновС И НоменклатураСпр.ОбязателенВАссортиментеМагазиновПо
	|				И НоменклатураСпр.Выведена = ЛОЖЬ
	//+++АК KIRN 2018.03.02 ИП-00018034
	|				И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 
	|				И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК ВЗ_СпецАкции
	|				ЛЕВОЕ СОЕДИНЕНИЕ (
	|				ВЫБРАТЬ
	|					СпецАссорт.Ссылка КАК Номенклатура,
	|					СпецАссорт.Магазин КАК Магазин
	|				ИЗ
	|					Справочник.Номенклатура.СпецАссортиментМожноВывестиСМагазинов КАК СпецАссорт
	//+++АК KIRN 2018.03.02 ИП-00018034
	|				ГДЕ
	|					СпецАссорт.Ссылка.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//+++АК KIRN 2018.03.02 ИП-00018034 
	|					) КАК МожноВывести
	|				ПО ВЗ_СпецАкции.Номенклатура = МожноВывести.Номенклатура
	|					И ВЗ_СпецАкции.Магазин = МожноВывести.Магазин
	|		ГДЕ
	|			МожноВывести.Магазин ЕСТЬ NULL
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СтруктурныеЕдиницы.Ссылка,
	|			НоменклатураСпр.Ссылка
	|		ИЗ
	|			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ПризнакиУчетаНоменклатуры КАК НоменклатураСпр
	|				ПО (ИСТИНА)
	//+++ AK suvv 2018.10.15 ИП-00019795                                                                        
	|               ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК СвойстваСЕДляДетей
	|			    ПО (СтруктурныеЕдиницы.Ссылка = СвойстваСЕДляДетей.СтруктурнаяЕдиница
	|					            И СвойстваСЕДляДетей.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ДляДетей))
	//--- AK suvv 
	|		ГДЕ
	|			СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|			И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	//+++ AK suvv 2018.10.15 ИП-00019795
	//|			И СтруктурныеЕдиницы.ДляДетей = ИСТИНА
	|           И ЕСТЬNULL(СвойстваСЕДляДетей.Значение, ЛОЖЬ) = ИСТИНА
	//--- AK suvv
	|			И НоменклатураСпр.Признак = &ПризнакДляДетей
	|			И НоменклатураСпр.Ссылка.Выведена = ЛОЖЬ
	|			И НоменклатураСпр.Ссылка.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК ВЗ_Запрос) КАК Обяз
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ГДЕ
	|			(ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|					ИЛИ ТоварныйАссортиментТочекСрезПоследних.Запрещена = ИСТИНА)) КАК ТовАссортимент
	|		ПО Обяз.Магазин = ТовАссортимент.ТорговаяТочка
	|			И Обяз.Номенклатура = ТовАссортимент.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка,
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Харки
	|		ПО Обяз.Номенклатура = ВЗ_Харки.Владелец
	|ГДЕ
	|	ТовАссортимент.ТорговаяТочка ЕСТЬ NULL
	|	И (Обяз.Магазин.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ РАЗНОСТЬДАТ(Обяз.Магазин.ДатаОткрытия, &ТекДата, ДЕНЬ) <= 7)
	|	И НЕ ВЗ_Харки.Ссылка ЕСТЬ NULL
	|	И (Обяз.Магазин = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|	И Обяз.Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Ссылка,
	|	АналогиНоменклатурыТовары.Номенклатура
	|ИЗ
	|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|ГДЕ
	|	АналогиНоменклатурыТовары.Номенклатура.Выведена = ЛОЖЬ
	|	И АналогиНоменклатурыТовары.Ссылка.ПолностьюЗаменяемыйТовар = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|	И (ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	ТабАналоги = Результаты[1].Выгрузить();
	ТабАналоги.Индексы.Добавить("Номенклатура");
	ТабТовАссортимент = Результаты[2].Выгрузить();
	ТабТовАссортимент.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	Пока Выборка.Следующий() Цикл
		//проверим, может товар уже есть как аналог
		УжеЕстьАналог = Ложь;
		СтрокиВАналогах = ТабАналоги.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаАналог Из СтрокиВАналогах Цикл
			СтрокиСоставАналога = ТабАналоги.НайтиСтроки(Новый Структура("Ссылка", СтрокаАналог.Ссылка));
			Для Каждого СтрокаСоставАналог Из СтрокиСоставАналога Цикл
				Если СтрокаСоставАналог.Номенклатура = Выборка.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				Если ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", Выборка.Магазин, СтрокаСоставАналог.Номенклатура)).Количество() > 0 Тогда
					УжеЕстьАналог = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если УжеЕстьАналог Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если УжеЕстьАналог = Ложь Тогда
			Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.Магазин;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Выборка.Магазин, Выборка.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки);
			Если Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Выборка.Характеристика;
			КонецЕсли;	
			Запись.Выведена 	= Ложь;
			Запись.Запрещена 	= Ложь;
			Запись.Комментарий 	= ?(ПринудительноКакДляФормата <> Неопределено, "Принудительно как для формата: " + ПринудительноКакДляФормата, "") + ". Авт. обработка: по признаку магазина (все), по признаку товара (обязательный)";
			Попытка
				Запись.Записать();
				
				ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Запись.ТорговаяТочка, Запись.Номенклатура);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	//новинки
	//новинки заводим на все магазины кроме развития
	//+++АК SHEP 2018.05.17 ИП-00018539: разрешаем новинки для Развития	//---АК SHEP 2018.05.17
	//если уже были записи в ассортименте, то не двигаем ее там больше
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ПринудительноФормат", ПринудительноКакДляФормата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Исключить
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтруктурныеЕдиницы.НеТоргуетАлкольнойПродукцией = ИСТИНА
	|	И Номенклатура.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обяз.Магазин,
	|	Обяз.Номенклатура,
	|	ВЗ_Харки.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|		НоменклатураСпр.Ссылка КАК Номенклатура
	|	ИЗ
	|		Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|		И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	//+++АК SHEP 2018.05.17 ИП-00018539: разрешаем новинки для Развития
	//|		И НЕ ВЫБОР
	//|					КОГДА &ПринудительноФормат <> НЕОПРЕДЕЛЕНО
	//|						ТОГДА &ПринудительноФормат
	//|					ИНАЧЕ СтруктурныеЕдиницы.ФорматМагазинаВВ
	//|				КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Развитие))
	//---АК SHEP 2018.05.17
	|		И НоменклатураСпр.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Новинки)
	|		И НоменклатураСпр.Выведена = ЛОЖЬ
	//+++АК KIRN 2018.03.02 ИП-00018034 
	|		И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)	
	//---АК KIRN 
	|		И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК Обяз
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних) КАК ТовАссортимент
	|		ПО Обяз.Магазин = ТовАссортимент.ТорговаяТочка
	|			И Обяз.Номенклатура = ТовАссортимент.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка,
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Харки
	|		ПО Обяз.Номенклатура = ВЗ_Харки.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключить КАК ВТ_Исключить
	|		ПО Обяз.Магазин = ВТ_Исключить.Магазин
	|			И Обяз.Номенклатура = ВТ_Исключить.Номенклатура
	|ГДЕ
	|	ТовАссортимент.ТорговаяТочка ЕСТЬ NULL
	|	И НЕ ВЗ_Харки.Ссылка ЕСТЬ NULL
	|	И (Обяз.Магазин = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|	И ВТ_Исключить.Магазин ЕСТЬ NULL
	|	И Обяз.Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)";
	
	Результаты = Запрос.ВыполнитьПакет();			   
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		//проверим, может товар уже есть как аналог
		УжеЕстьАналог = Ложь;
		СтрокиВАналогах = ТабАналоги.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаАналог Из СтрокиВАналогах Цикл
			СтрокиСоставАналога = ТабАналоги.НайтиСтроки(Новый Структура("Ссылка", СтрокаАналог.Ссылка));
			Для Каждого СтрокаСоставАналог Из СтрокиСоставАналога Цикл
				Если СтрокаСоставАналог.Номенклатура = Выборка.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				Если ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", Выборка.Магазин, СтрокаСоставАналог.Номенклатура)).Количество() > 0 Тогда
					УжеЕстьАналог = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если УжеЕстьАналог Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если УжеЕстьАналог = Ложь Тогда
			Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.Магазин;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Выборка.Магазин, Выборка.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки);
			Если Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Выборка.Характеристика;
			КонецЕсли;
			Запись.Выведена 	= Ложь;
			Запись.Запрещена 	= Ложь;
			Запись.Комментарий 	= ?(ПринудительноКакДляФормата <> Неопределено, "Принудительно как для формата: " + ПринудительноКакДляФормата, "") + ". Авт. обработка: по признаку магазина (флагман, обычный), по признаку товара (новинки)";
			Попытка
				Запись.Записать();
				
				ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Запись.ТорговаяТочка, Запись.Номенклатура);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	//+++АК MIND 2017.12.17 для всех остальных случаев теперь отрабатываем только для магазинов открытых 7 дней назад
	
	//обычный товар для магазина развитие
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ПринудительноФормат", ПринудительноКакДляФормата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Исключить
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтруктурныеЕдиницы.НеТоргуетАлкольнойПродукцией = ИСТИНА
	|	И СпрНоменклатура.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	//+++АК KIRN 2018.03.02 ИП-00018034 
	|	И СпрНоменклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обяз.Магазин,
	|	Обяз.Номенклатура,
	|	ВЗ_Харки.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|		НоменклатураСпр.Ссылка КАК Номенклатура
	|	ИЗ
	|		Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|		И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|		И (СтруктурныеЕдиницы.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РАЗНОСТЬДАТ(СтруктурныеЕдиницы.ДатаОткрытия, &ТекДата, ДЕНЬ) <= 7)
	|		И ВЫБОР
	|				КОГДА &ПринудительноФормат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА &ПринудительноФормат
	|				ИНАЧЕ СтруктурныеЕдиницы.ФорматМагазинаВВ
	|			КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Развитие))
	|		И НоменклатураСпр.КатегорияАссортимента В (ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обычный), ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Необязательный))
	|		И НоменклатураСпр.Выведена = ЛОЖЬ
	//+++АК KIRN 2018.03.02 ИП-00018034
	|		И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 	
	|		И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК Обяз
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|		ИЗ
	//+++АК SHEP 2018.05.17 ИП-00018539
	//|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	//|		ГДЕ
	//|			(ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	//|					ИЛИ ТоварныйАссортиментТочекСрезПоследних.Запрещена = ИСТИНА)) КАК ТовАссортимент
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних) КАК ТовАссортимент
	//---АК SHEP 2018.05.17
	|		ПО Обяз.Магазин = ТовАссортимент.ТорговаяТочка
	|			И Обяз.Номенклатура = ТовАссортимент.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка,
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Харки
	|		ПО Обяз.Номенклатура = ВЗ_Харки.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключить КАК ВТ_Исключить
	|		ПО Обяз.Магазин = ВТ_Исключить.Магазин
	|			И Обяз.Номенклатура = ВТ_Исключить.Номенклатура
	|ГДЕ
	|	ТовАссортимент.ТорговаяТочка ЕСТЬ NULL
	|	И НЕ ВЗ_Харки.Ссылка ЕСТЬ NULL
	|	И (Обяз.Магазин = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|	И ВТ_Исключить.Магазин ЕСТЬ NULL
	|	И Обяз.Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		//проверим, может товар уже есть как аналог
		УжеЕстьАналог = Ложь;
		СтрокиВАналогах = ТабАналоги.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаАналог Из СтрокиВАналогах Цикл
			СтрокиСоставАналога = ТабАналоги.НайтиСтроки(Новый Структура("Ссылка", СтрокаАналог.Ссылка));
			Для Каждого СтрокаСоставАналог Из СтрокиСоставАналога Цикл
				Если СтрокаСоставАналог.Номенклатура = Выборка.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				Если ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", Выборка.Магазин, СтрокаСоставАналог.Номенклатура)).Количество() > 0 Тогда
					УжеЕстьАналог = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если УжеЕстьАналог Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если УжеЕстьАналог = Ложь Тогда
			Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.Магазин;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Выборка.Магазин, Выборка.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки);
			Если Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Выборка.Характеристика;
			КонецЕсли;
			Запись.Выведена 	= Ложь;
			Запись.Запрещена 	= Ложь;
			Запись.Комментарий 	= ?(ПринудительноКакДляФормата <> Неопределено, "Принудительно как для формата: " + ПринудительноКакДляФормата, "") + ". Авт. обработка: по признаку магазина (развитие), по признаку товара (обычный, необязательный)";
			Попытка
				Запись.Записать();
				
				ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Запись.ТорговаяТочка, Запись.Номенклатура);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	//обычный товар для магазина флагман и обычный
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ПринудительноФормат", ПринудительноКакДляФормата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|	НоменклатураСпр.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Исключить
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтруктурныеЕдиницы.НеТоргуетАлкольнойПродукцией = ИСТИНА
	|	И НоменклатураСпр.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	//+++АК KIRN 2018.03.02 ИП-00018034
	|	И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	//+++АК KIRN 2018.03.05 ИП-00018034 
	|
	|ВЫБРАТЬ
	|	ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	|	ВыкладкаПланограммы.МестоВыкладки.Родитель КАК МестоВыкладкиРодитель
	//|	МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки.Родитель) КАК МестоВыкладкиРодитель
	|ПОМЕСТИТЬ вт_Выкладка
	|ИЗ
	|	РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|ГДЕ
	|	ВыкладкаПланограммы.Планограмма.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	|
	//|СГРУППИРОВАТЬ ПО
	//|	ВыкладкаПланограммы.Номенклатура
	|;
	//---АК KIRN 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обяз.Магазин,
	|	Обяз.Номенклатура,
	|	ВЗ_Харки.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЗ_ТовТТ.Магазин КАК Магазин,
	|		ВЗ_ТовТТ.Номенклатура КАК Номенклатура
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|			НоменклатураСпр.Ссылка КАК Номенклатура
	|		ИЗ
	|			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|				ПО (ИСТИНА)
	|		ГДЕ
	|			СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|			И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|			И (СтруктурныеЕдиницы.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ РАЗНОСТЬДАТ(СтруктурныеЕдиницы.ДатаОткрытия, &ТекДата, ДЕНЬ) <= 7)
	|			И ВЫБОР
	|					КОГДА &ПринудительноФормат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА &ПринудительноФормат
	|					ИНАЧЕ СтруктурныеЕдиницы.ФорматМагазинаВВ
	|				КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Флагман), ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Обычный))
	|			И НоменклатураСпр.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обычный)
	|			И НоменклатураСпр.Выведена = ЛОЖЬ
	//+++АК KIRN 2018.03.02 ИП-00018034
	|			И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 	
	|			И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК ВЗ_ТовТТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВЗ_РодительВПланограмме.Номенклатура КАК Номенклатура,
	|				МестаХраненияВМагазинах.Магазин КАК Магазин,
	|				ЕСТЬNULL(МестаХраненияВМагазинах.Хватает, ЛОЖЬ) КАК Хватает
	|			ИЗ
	//+++АК KIRN 2018.03.05 ИП-00018034
	|			вт_Выкладка  КАК ВЗ_РодительВПланограмме
	//|				(ВЫБРАТЬ
	//|					ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	//|					МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки.Родитель) КАК МестоВыкладкиРодитель
	//|				ИЗ
	//|					РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	//|				
	//|				СГРУППИРОВАТЬ ПО
	//|					ВыкладкаПланограммы.Номенклатура) КАК ВЗ_РодительВПланограмме
	//---АК KIRN 
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияВМагазинах КАК МестаХраненияВМагазинах
	|					ПО ВЗ_РодительВПланограмме.МестоВыкладкиРодитель = МестаХраненияВМагазинах.МестоВыкладки
	|			ГДЕ
	|				ЕСТЬNULL(МестаХраненияВМагазинах.Хватает, ЛОЖЬ) = ИСТИНА) КАК ВЗ_Хватает
	|			ПО ВЗ_ТовТТ.Магазин = ВЗ_Хватает.Магазин
	|				И ВЗ_ТовТТ.Номенклатура = ВЗ_Хватает.Номенклатура
	|	ГДЕ
	|		ЕСТЬNULL(ВЗ_Хватает.Хватает, ЛОЖЬ) = ИСТИНА) КАК Обяз
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ГДЕ
	|			(ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|					ИЛИ ТоварныйАссортиментТочекСрезПоследних.Запрещена = ИСТИНА)) КАК ТовАссортимент
	|		ПО Обяз.Магазин = ТовАссортимент.ТорговаяТочка
	|			И Обяз.Номенклатура = ТовАссортимент.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка,
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Харки
	|		ПО Обяз.Номенклатура = ВЗ_Харки.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключить КАК ВТ_Исключить
	|		ПО Обяз.Магазин = ВТ_Исключить.Магазин
	|			И Обяз.Номенклатура = ВТ_Исключить.Номенклатура
	|ГДЕ
	|	ТовАссортимент.ТорговаяТочка ЕСТЬ NULL
	|	И НЕ ВЗ_Харки.Ссылка ЕСТЬ NULL
	|	И (Обяз.Магазин = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|	И ВТ_Исключить.Магазин ЕСТЬ NULL
	|	И Обяз.Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	//+++АК KIRN 2018.03.05 ИП-00018034 
	//Выборка = Результаты[1].Выбрать();
	Выборка = Результаты[Результаты.Количество()-1].Выбрать();
	//---АК KIRN 
	Пока Выборка.Следующий() Цикл
		//проверим, может товар уже есть как аналог
		УжеЕстьАналог = Ложь;
		СтрокиВАналогах = ТабАналоги.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаАналог Из СтрокиВАналогах Цикл
			СтрокиСоставАналога = ТабАналоги.НайтиСтроки(Новый Структура("Ссылка", СтрокаАналог.Ссылка));
			Для Каждого СтрокаСоставАналог Из СтрокиСоставАналога Цикл
				Если СтрокаСоставАналог.Номенклатура = Выборка.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				Если ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", Выборка.Магазин, СтрокаСоставАналог.Номенклатура)).Количество() > 0 Тогда
					УжеЕстьАналог = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если УжеЕстьАналог Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если УжеЕстьАналог = Ложь Тогда
			Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.Магазин;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Выборка.Магазин, Выборка.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки);
			Если Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Выборка.Характеристика;
			КонецЕсли;
			Запись.Выведена 	= Ложь;
			Запись.Запрещена 	= Ложь;
			Запись.Комментарий 	= ?(ПринудительноКакДляФормата <> Неопределено, "Принудительно как для формата: " + ПринудительноКакДляФормата, "") + ". Авт. обработка: по признаку магазина (флагман, обычный), по признаку товара (обычный), по признаку места (хватает)";
			Попытка
				Запись.Записать();
				ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Запись.ТорговаяТочка, Запись.Номенклатура);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	//необязательный товар для магазина флагман и обычный
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ПринудительноФормат", ПринудительноКакДляФормата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|	НоменклатураСпр.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Исключить
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтруктурныеЕдиницы.НеТоргуетАлкольнойПродукцией = ИСТИНА
	|	И НоменклатураСпр.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	//+++АК KIRN 2018.03.02 ИП-00018034
	|	И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	//+++АК KIRN 2018.03.05 ИП-00018034 
	|
	|ВЫБРАТЬ
	|	ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	|	ВыкладкаПланограммы.МестоВыкладки.Родитель КАК МестоВыкладкиРодитель
	//|	МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки.Родитель) КАК МестоВыкладкиРодитель
	|ПОМЕСТИТЬ вт_Выкладка
	|ИЗ
	|	РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|ГДЕ
	|	ВыкладкаПланограммы.Планограмма.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	|
	//|СГРУППИРОВАТЬ ПО
	//|	ВыкладкаПланограммы.Номенклатура
	|;
	//---АК KIRN 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обяз.Магазин,
	|	Обяз.Номенклатура,
	|	ВЗ_Харки.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЗ_ТовТТ.Магазин КАК Магазин,
	|		ВЗ_ТовТТ.Номенклатура КАК Номенклатура
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|			НоменклатураСпр.Ссылка КАК Номенклатура
	|		ИЗ
	|			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|				ПО (ИСТИНА)
	|		ГДЕ
	|			СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|			И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|			И (СтруктурныеЕдиницы.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ РАЗНОСТЬДАТ(СтруктурныеЕдиницы.ДатаОткрытия, &ТекДата, ДЕНЬ) <= 7)
	|			И ВЫБОР
	|					КОГДА &ПринудительноФормат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА &ПринудительноФормат
	|					ИНАЧЕ СтруктурныеЕдиницы.ФорматМагазинаВВ
	|				КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Флагман), ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Обычный))
	|			И НоменклатураСпр.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Необязательный)
	|			И НоменклатураСпр.Выведена = ЛОЖЬ
	//+++АК KIRN 2018.03.02 ИП-00018034
	|			И НоменклатураСпр.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	//---АК KIRN 
	|			И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК ВЗ_ТовТТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВЗ_РодительВПланограмме.Номенклатура КАК Номенклатура,
	|				МестаХраненияВМагазинах.Магазин КАК Магазин,
	|				ЕСТЬNULL(МестаХраненияВМагазинах.Хватает, ЛОЖЬ) КАК Хватает
	|			ИЗ
	//+++АК KIRN 2018.03.05 ИП-00018034
	|			вт_Выкладка  КАК ВЗ_РодительВПланограмме
	//|				(ВЫБРАТЬ
	//|					ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	//|					МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки.Родитель) КАК МестоВыкладкиРодитель
	//|				ИЗ
	//|					РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	//|				
	//|				СГРУППИРОВАТЬ ПО
	//|					ВыкладкаПланограммы.Номенклатура) КАК ВЗ_РодительВПланограмме
	//---АК KIRN 
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияВМагазинах КАК МестаХраненияВМагазинах
	|					ПО ВЗ_РодительВПланограмме.МестоВыкладкиРодитель = МестаХраненияВМагазинах.МестоВыкладки
	|			ГДЕ
	|				ЕСТЬNULL(МестаХраненияВМагазинах.Хватает, ЛОЖЬ) = ИСТИНА) КАК ВЗ_Хватает
	|			ПО ВЗ_ТовТТ.Магазин = ВЗ_Хватает.Магазин
	|				И ВЗ_ТовТТ.Номенклатура = ВЗ_Хватает.Номенклатура
	|	ГДЕ
	|		ЕСТЬNULL(ВЗ_Хватает.Хватает, ЛОЖЬ) = ИСТИНА) КАК Обяз
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних) КАК ТовАссортимент
	|		ПО Обяз.Магазин = ТовАссортимент.ТорговаяТочка
	|			И Обяз.Номенклатура = ТовАссортимент.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка,
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Харки
	|		ПО Обяз.Номенклатура = ВЗ_Харки.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключить КАК ВТ_Исключить
	|		ПО Обяз.Магазин = ВТ_Исключить.Магазин
	|			И Обяз.Номенклатура = ВТ_Исключить.Номенклатура
	|ГДЕ
	|	ТовАссортимент.ТорговаяТочка ЕСТЬ NULL
	|	И НЕ ВЗ_Харки.Ссылка ЕСТЬ NULL
	|	И (Обяз.Магазин = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|	И ВТ_Исключить.Магазин ЕСТЬ NULL
	|	И Обяз.Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	//+++АК KIRN 2018.03.05 ИП-00018034 
	//Выборка = Результаты[1].Выбрать();
	Выборка = Результаты[Результаты.Количество()-1].Выбрать();
	//---АК KIRN 
	Пока Выборка.Следующий() Цикл
		//проверим, может товар уже есть как аналог
		УжеЕстьАналог = Ложь;
		СтрокиВАналогах = ТабАналоги.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаАналог Из СтрокиВАналогах Цикл
			СтрокиСоставАналога = ТабАналоги.НайтиСтроки(Новый Структура("Ссылка", СтрокаАналог.Ссылка));
			Для Каждого СтрокаСоставАналог Из СтрокиСоставАналога Цикл
				Если СтрокаСоставАналог.Номенклатура = Выборка.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				Если ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", Выборка.Магазин, СтрокаСоставАналог.Номенклатура)).Количество() > 0 Тогда
					УжеЕстьАналог = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если УжеЕстьАналог Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если УжеЕстьАналог = Ложь Тогда
			Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.Магазин;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Выборка.Магазин, Выборка.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки);
			Если Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Выборка.Характеристика;
			КонецЕсли;
			Запись.Выведена 	= Ложь;
			Запись.Запрещена 	= Ложь;
			Запись.Комментарий 	= ?(ПринудительноКакДляФормата <> Неопределено, "Принудительно как для формата: " + ПринудительноКакДляФормата, "") + ". Авт. обработка: по признаку магазина (флагман, обычный), по признаку товара (необязательный), по признаку места (хватает)";
			Попытка
				Запись.Записать();
				ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Запись.ТорговаяТочка, Запись.Номенклатура);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	//+++АК KIRN 2018.03.02 ИП-00018034
	//формирование обязательного ассортимента для мини и обычный для типов розничных точек - Перекресток
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ПризнакДляДетей", Справочники.ПризнакиУчетаНоменклатуры.НайтиПоНаименованию("Детские товары"));
	Запрос.УстановитьПараметр("ТорговаяМарка", Справочники.ТорговыеМарки.ЗеленаяЛиния);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|	СтруктурныеЕдиницы.ФорматМагазинаВВ КАК ФорматМагазинаВВ
	|ПОМЕСТИТЬ вт_ТТ
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	//|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток)
	|	ЛОЖЬ И(СтруктурныеЕдиницы.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Мини)
	|		или СтруктурныеЕдиницы.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Обычный))
	|			И (СтруктурныеЕдиницы.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ РАЗНОСТЬДАТ(СтруктурныеЕдиницы.ДатаОткрытия, &ТекДата, ДЕНЬ) <= 7)
	|	И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|	И (СтруктурныеЕдиницы.Ссылка = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|;
	|////////////////////////////////////////////
	|Выбрать СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.КатегорияАссортимента,
	|	СпрНоменклатура.ТорговаяМарка,
	|	СпрНоменклатура.Выведена,
	|	СпрНоменклатура.НеВключатьАвтоматическиВАссортимент,
	|	СпрНоменклатура.ОбязателенВАссортиментеМагазиновС,
	|	СпрНоменклатура.ОбязателенВАссортиментеМагазиновПо
	|ПОМЕСТИТЬ вт_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния);
	|////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СпецАссорт.Ссылка КАК Номенклатура,
	|	СпецАссорт.Магазин КАК Магазин
	|ПОМЕСТИТЬ вт_Спец
	|ИЗ
	|	вт_Номенклатура 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура.СпецАссортиментМожноВывестиСМагазинов КАК СпецАссорт
	|	ПО вт_Номенклатура.Ссылка = СпецАссорт.Ссылка
	|ГДЕ
	|	&ТекДата МЕЖДУ вт_Номенклатура.ОбязателенВАссортиментеМагазиновС И вт_Номенклатура.ОбязателенВАссортиментеМагазиновПо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|	ВЫБРАТЬ
	|	Обяз.Магазин,
	|	Обяз.Номенклатура,
	|	ВЗ_Харки.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЗ_Запрос.Магазин КАК Магазин,
	|		ВЗ_Запрос.Номенклатура КАК Номенклатура
	|	ИЗ
	|		(ВЫБРАТЬ
	|			вт_ТТ.Магазин КАК Магазин,
	|			НоменклатураСпр.Ссылка КАК Номенклатура
	|		ИЗ
	|			вт_ТТ
	|				ЛЕВОЕ СОЕДИНЕНИЕ вт_Номенклатура КАК НоменклатураСпр
	|				ПО (ИСТИНА)
	|		ГДЕ
	|			НоменклатураСпр.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обязательный)
	|			И НоменклатураСпр.Выведена = ЛОЖЬ
	|			И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЗ_СпецАкции.Магазин,
	|			ВЗ_СпецАкции.Номенклатура
	|		ИЗ
	|			(ВЫБРАТЬ
	|				вт_ТТ.Магазин КАК Магазин,
	|				НоменклатураСпр.Ссылка КАК Номенклатура
	|			ИЗ
	|				вт_ТТ
	|					ЛЕВОЕ СОЕДИНЕНИЕ вт_Номенклатура КАК НоменклатураСпр
	|					ПО (ИСТИНА)
	|			ГДЕ
	|				&ТекДата МЕЖДУ НоменклатураСпр.ОбязателенВАссортиментеМагазиновС И НоменклатураСпр.ОбязателенВАссортиментеМагазиновПо
	|				И НоменклатураСпр.Выведена = ЛОЖЬ
	|				И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК ВЗ_СпецАкции
	|				ЛЕВОЕ СОЕДИНЕНИЕ вт_Спец КАК МожноВывести
	|				ПО ВЗ_СпецАкции.Номенклатура = МожноВывести.Номенклатура
	|					И ВЗ_СпецАкции.Магазин = МожноВывести.Магазин
	|		ГДЕ
	|			МожноВывести.Магазин ЕСТЬ NULL
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			вт_ТТ.Магазин КАК Магазин,
	|			НоменклатураСпр.Ссылка
	|		ИЗ
	|			вт_ТТ
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ПризнакиУчетаНоменклатуры КАК НоменклатураСпр_Признаки
	|					ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ вт_Номенклатура КАК НоменклатураСпр 
	|					ПО НоменклатураСпр_Признаки.Ссылка = НоменклатураСпр.Ссылка
	|		ГДЕ
	|			НоменклатураСпр_Признаки.Признак = &ПризнакДляДетей
	|			И НоменклатураСпр.Выведена = ЛОЖЬ
	|			И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК ВЗ_Запрос) КАК Обяз
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ГДЕ
	|			(ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|					ИЛИ ТоварныйАссортиментТочекСрезПоследних.Запрещена = ИСТИНА)) КАК ТовАссортимент
	|		ПО Обяз.Магазин = ТовАссортимент.ТорговаяТочка
	|			И Обяз.Номенклатура = ТовАссортимент.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка,
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Харки
	|		ПО Обяз.Номенклатура = ВЗ_Харки.Владелец
	|ГДЕ
	|	ТовАссортимент.ТорговаяТочка ЕСТЬ NULL
	|	И НЕ ВЗ_Харки.Ссылка ЕСТЬ NULL
	|";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[Результаты.Количество()-1].Выбрать();
	//ТабАналоги = Результаты[Результаты.Количество()-2].Выгрузить();
	//ТабАналоги.Индексы.Добавить("Номенклатура");
	//ТабТовАссортимент = Результаты[Результаты.Количество()-1].Выгрузить();
	//ТабТовАссортимент.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	Пока Выборка.Следующий() Цикл
		//проверим, может товар уже есть как аналог
		УжеЕстьАналог = Ложь;
		СтрокиВАналогах = ТабАналоги.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаАналог Из СтрокиВАналогах Цикл
			СтрокиСоставАналога = ТабАналоги.НайтиСтроки(Новый Структура("Ссылка", СтрокаАналог.Ссылка));
			Для Каждого СтрокаСоставАналог Из СтрокиСоставАналога Цикл
				Если СтрокаСоставАналог.Номенклатура = Выборка.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				Если ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", Выборка.Магазин, СтрокаСоставАналог.Номенклатура)).Количество() > 0 Тогда
					УжеЕстьАналог = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если УжеЕстьАналог Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если УжеЕстьАналог = Ложь Тогда
			Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.Магазин;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Выборка.Магазин, Выборка.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки);
			Если Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Выборка.Характеристика;
			КонецЕсли;	
			Запись.Выведена 	= Ложь;
			Запись.Запрещена 	= Ложь;
			Запись.Комментарий 	= "#"+?(ПринудительноКакДляФормата <> Неопределено, "Принудительно как для формата: " + ПринудительноКакДляФормата, "") + ". Авт. обработка: по признаку магазина (все), по признаку товара (обязательный)";
			Попытка
				Запись.Записать();
				ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Запись.ТорговаяТочка, Запись.Номенклатура);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	
	//обычный товар для формата обычный для перекрестка
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.УстановитьПараметр("ПринудительноФормат", ПринудительноКакДляФормата);
	Запрос.Текст =
	"	
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|	СтруктурныеЕдиницы.ФорматМагазинаВВ КАК ФорматМагазинаВВ
	|ПОМЕСТИТЬ вт_ТТ
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	//|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток)
	| ЛОЖЬ И СтруктурныеЕдиницы.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Обычный)
	|	И СтруктурныеЕдиницы.СтатусТорговойТочки <> ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|			И (СтруктурныеЕдиницы.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ РАЗНОСТЬДАТ(СтруктурныеЕдиницы.ДатаОткрытия, &ТекДата, ДЕНЬ) <= 7)
	|	И (СтруктурныеЕдиницы.Ссылка = &ОтборМагазин
	|			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	|;
	|///////////////////////////////////////////////////////////////////
	//+++АК KIRN 2018.03.05 ИП-00018034 
	|
	|ВЫБРАТЬ
	|	ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	|	ВыкладкаПланограммы.МестоВыкладки.Родитель КАК МестоВыкладкиРодитель
	//|	МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки.Родитель) КАК МестоВыкладкиРодитель
	|ПОМЕСТИТЬ вт_Выкладка
	|ИЗ
	|	РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|ГДЕ
	|	ВыкладкаПланограммы.Планограмма.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	|
	//|СГРУППИРОВАТЬ ПО
	//|	ВыкладкаПланограммы.Номенклатура
	|;
	//---АК KIRN 
	|////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	вт_ТТ.Магазин КАК Магазин,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Исключить
	|ИЗ
	|	вт_ТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (ИСТИНА)
	|ГДЕ
	|	вт_ТТ.Магазин.НеТоргуетАлкольнойПродукцией = ИСТИНА
	|	И Номенклатура.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|Выбрать СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.КатегорияАссортимента,
	|	СпрНоменклатура.ТорговаяМарка,
	|	СпрНоменклатура.Выведена,
	|	СпрНоменклатура.НеВключатьАвтоматическиВАссортимент,
	|	СпрНоменклатура.ОбязателенВАссортиментеМагазиновС,
	|	СпрНоменклатура.ОбязателенВАссортиментеМагазиновПо
	|ПОМЕСТИТЬ вт_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния);
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обяз.Магазин,
	|	Обяз.Номенклатура,
	|	ВЗ_Харки.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЗ_ТовТТ.Магазин КАК Магазин,
	|		ВЗ_ТовТТ.Номенклатура КАК Номенклатура
	|	ИЗ
	|		(ВЫБРАТЬ
	|			вт_ТТ.Магазин КАК Магазин,
	|			НоменклатураСпр.Ссылка КАК Номенклатура
	|		ИЗ
	|			вт_ТТ
	|				ЛЕВОЕ СОЕДИНЕНИЕ вт_Номенклатура КАК НоменклатураСпр
	|				ПО (ИСТИНА)
	|		ГДЕ
	|			НоменклатураСпр.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обычный)
	|			И НоменклатураСпр.Выведена = ЛОЖЬ
	|			И НоменклатураСпр.НеВключатьАвтоматическиВАссортимент = ЛОЖЬ) КАК ВЗ_ТовТТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВЗ_РодительВПланограмме.Номенклатура КАК Номенклатура,
	|				МестаХраненияВМагазинах.Магазин КАК Магазин,
	|				ЕСТЬNULL(МестаХраненияВМагазинах.Хватает, ЛОЖЬ) КАК Хватает
	|			ИЗ
	//+++АК KIRN 2018.03.05 ИП-00018034 
	|			вт_Выкладка КАК ВЗ_РодительВПланограмме
	//|				(ВЫБРАТЬ
	//|					ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	//|					МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки.Родитель) КАК МестоВыкладкиРодитель
	//|				ИЗ
	//|					РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	//|				
	//|				СГРУППИРОВАТЬ ПО
	//|					ВыкладкаПланограммы.Номенклатура) КАК ВЗ_РодительВПланограмме
	//---АК KIRN 
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияВМагазинах КАК МестаХраненияВМагазинах
	|				ПО ВЗ_РодительВПланограмме.МестоВыкладкиРодитель = МестаХраненияВМагазинах.МестоВыкладки
	|			ГДЕ
	|				ЕСТЬNULL(МестаХраненияВМагазинах.Хватает, ЛОЖЬ) = ИСТИНА) КАК ВЗ_Хватает
	|			ПО ВЗ_ТовТТ.Магазин = ВЗ_Хватает.Магазин
	|				И ВЗ_ТовТТ.Номенклатура = ВЗ_Хватает.Номенклатура
	|	ГДЕ
	|		ЕСТЬNULL(ВЗ_Хватает.Хватает, ЛОЖЬ) = ИСТИНА) КАК Обяз
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ГДЕ
	|			(ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|					ИЛИ ТоварныйАссортиментТочекСрезПоследних.Запрещена = ИСТИНА)) КАК ТовАссортимент
	|		ПО Обяз.Магазин = ТовАссортимент.ТорговаяТочка
	|			И Обяз.Номенклатура = ТовАссортимент.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка,
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Харки
	|		ПО Обяз.Номенклатура = ВЗ_Харки.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключить КАК ВТ_Исключить
	|		ПО Обяз.Магазин = ВТ_Исключить.Магазин
	|			И Обяз.Номенклатура = ВТ_Исключить.Номенклатура
	|ГДЕ
	|	ТовАссортимент.ТорговаяТочка ЕСТЬ NULL
	|	И НЕ ВЗ_Харки.Ссылка ЕСТЬ NULL
	|	И ВТ_Исключить.Магазин ЕСТЬ NULL
	|	И Обяз.Номенклатура.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	//+++АК KIRN 2018.03.05 ИП-00018034 
	//Выборка = Результаты[2].Выбрать();
	Выборка = Результаты[Результаты.Количество()-1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//проверим, может товар уже есть как аналог
		УжеЕстьАналог = Ложь;
		СтрокиВАналогах = ТабАналоги.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаАналог Из СтрокиВАналогах Цикл
			СтрокиСоставАналога = ТабАналоги.НайтиСтроки(Новый Структура("Ссылка", СтрокаАналог.Ссылка));
			Для Каждого СтрокаСоставАналог Из СтрокиСоставАналога Цикл
				Если СтрокаСоставАналог.Номенклатура = Выборка.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				Если ТабТовАссортимент.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", Выборка.Магазин, СтрокаСоставАналог.Номенклатура)).Количество() > 0 Тогда
					УжеЕстьАналог = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если УжеЕстьАналог Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если УжеЕстьАналог = Ложь Тогда
			Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.Магазин;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Выборка.Магазин, Выборка.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов,ТабАктивныеХарки);
			Если Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
				Запись.Характеристика = Выборка.Характеристика;
			КонецЕсли;
			Запись.Выведена 	= Ложь;
			Запись.Запрещена 	= Ложь;
			Запись.Комментарий 	= "#"+?(ПринудительноКакДляФормата <> Неопределено, "Принудительно как для формата: " + ПринудительноКакДляФормата, "") + ". Авт. обработка: по признаку магазина (флагман, обычный), по признаку товара (обычный), по признаку места (хватает)";
			Попытка
				Запись.Записать();
				ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Запись.ТорговаяТочка, Запись.Номенклатура);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование ассортимента", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	//---АК KIRN 
	

	//+++АК MIND 2017.12.17 выведем алкогольные позиции, если они стоят в ассортименте на магазинах, где нельзя торговать алкоголем
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтборМагазин", ОтборПоМагазину);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ТТ
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НеТоргуетАлкольнойПродукцией = ИСТИНА
	               |	И (СтруктурныеЕдиницы.Ссылка = &ОтборМагазин
	               |			ИЛИ &ОтборМагазин = НЕОПРЕДЕЛЕНО)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
				   |	
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	               |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	               |	ТоварныйАссортиментТочекСрезПоследних.id_TT
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |			&ТекДата,
	               |			ТорговаяТочка В
	               |					(ВЫБРАТЬ
	               |						ВТ_ТТ.Ссылка
	               |					ИЗ
	               |						ВТ_ТТ КАК ВТ_ТТ)
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Товары.Ссылка
	               |					ИЗ
	               |						ВТ_Товары КАК ВТ_Товары)) КАК ТоварныйАссортиментТочекСрезПоследних
	               |ГДЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
		Набор.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Движение = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Период = ТекущаяДата();
		Движение.Комментарий = "У магазина стоит признак ""Не торгует алкогольной продукцией""";
		Движение.Выведена = Истина;
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры
Процедура ФормированиеТоварногоАссортимента_РеглЗадание() Экспорт
	
	ФормированиеТоварногоАссортимента();
	
КонецПроцедуры	

//
////////////////////////////////////////////////////////////////////////////////////////


Процедура ПроведениеТранспортныхРасходов() Экспорт
	
	ТекДатаЗапретаРедактирования = НастройкаПравДоступа.ПолучитьОбщуюДатуЗапретаДляПользователя() + 86400;
	
	//
	Если НЕ НачалоДня(ТекущаяДата() - 86400) < Дата(2016, 12, 1) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала", Макс(НачалоДня(ТекущаяДата() - 40 * 86400), ТекДатаЗапретаРедактирования));
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МаршрутныйЛист.Ссылка КАК ДокДоставкаНаСклад,
		|	МаршрутныйЛист.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
		|		ПО (МаршрутныйЛистПриходныеОрдера.Ссылка = МаршрутныйЛист.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
		|		ПО (ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер = МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер)
		|			И (ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Проведен)
		|ГДЕ
		|	МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
		|	И НЕ МаршрутныйЛист.Дата < &ДатаНачала
		|	И НЕ МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер ЕСТЬ NULL 
		|	И НЕ МаршрутныйЛист.Проведен
		|	И НЕ МаршрутныйЛист.ПометкаУдаления";
		
		Если День(ТекущаяДата()) > 4
			И День(ТекущаяДата()) < 11 Тогда  // если 5-е число - можно перепроводить все непроведенные тр. расходы за предыдущий месяц (если период не закрыт)
			
			Запрос.УстановитьПараметр("НачалоМесяца"	, НачалоМесяца(ТекущаяДата()));
			Запрос.УстановитьПараметр("НачалоПрошМесяца", Макс(НачалоМесяца(НачалоМесяца(ТекущаяДата()) - 1), ТекДатаЗапретаРедактирования));
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	МаршрутныйЛист.Ссылка,
			|	МаршрутныйЛист.МоментВремени
			|ИЗ
			|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
			|		ПО (МаршрутныйЛистПриходныеОрдера.Ссылка = МаршрутныйЛист.Ссылка)
			|ГДЕ
			|	МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
			|	И МаршрутныйЛист.Дата < &НачалоМесяца
			|	И НЕ МаршрутныйЛист.Дата < &НачалоПрошМесяца
			|	И НЕ МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер ЕСТЬ NULL 
			|	И НЕ МаршрутныйЛист.Проведен
			|	И НЕ МаршрутныйЛист.ПометкаУдаления";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	МаршрутныйЛист.МоментВремени";
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала", Макс(НачалоДня(ТекущаяДата() - 40 * 86400), ТекДатаЗапретаРедактирования));
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТранспортныеРасходы.Ссылка КАК ДокДоставкаНаСклад,
		|	ТранспортныеРасходы.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.ТранспортныеРасходы КАК ТранспортныеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
		|		ПО (ТранспортныеРасходыПриходныеОрдера.Ссылка = ТранспортныеРасходы.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
		|		ПО (ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер = ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер)
		|			И (ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Проведен)
		|ГДЕ
		|	НЕ ТранспортныеРасходы.Дата < &ДатаНачала
		|	И НЕ ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер ЕСТЬ NULL 
		|	И НЕ ТранспортныеРасходы.Проведен
		|	И НЕ ТранспортныеРасходы.ПометкаУдаления";
		
		Если День(ТекущаяДата()) > 4
			И День(ТекущаяДата()) < 11 Тогда  // если 5-е число - можно перепроводить все непроведенные тр. расходы за предыдущий месяц (если период не закрыт)
			
			Запрос.УстановитьПараметр("НачалоМесяца"	, НачалоМесяца(ТекущаяДата()));
			Запрос.УстановитьПараметр("НачалоПрошМесяца", Макс(НачалоМесяца(НачалоМесяца(ТекущаяДата()) - 1), ТекДатаЗапретаРедактирования));
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТранспортныеРасходы.Ссылка,
			|	ТранспортныеРасходы.МоментВремени
			|ИЗ
			|	Документ.ТранспортныеРасходы КАК ТранспортныеРасходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
			|		ПО (ТранспортныеРасходыПриходныеОрдера.Ссылка = ТранспортныеРасходы.Ссылка)
			|ГДЕ
			|	ТранспортныеРасходы.Дата < &НачалоМесяца
			|	И НЕ ТранспортныеРасходы.Дата < &НачалоПрошМесяца
			|	И НЕ ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер ЕСТЬ NULL 
			|	И НЕ ТранспортныеРасходы.Проведен
			|	И НЕ ТранспортныеРасходы.ПометкаУдаления";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТранспортныеРасходы.МоментВремени";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектДокумента = Выборка.ДокДоставкаНаСклад.ПолучитьОбъект();
		Попытка
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


Процедура СозданиеФайловМиниатюрКФайламРакурсов() Экспорт
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если ПустаяСтрока(КаталогФотографий) Тогда
		Возврат;
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	ИмяФайлаПрограммы = ПолучитьИмяВременногоФайла("exe");
	Утилита = ПолучитьОбщийМакет("УтилитаСозданияМиниатюр");
	Утилита.Записать(ИмяФайлаПрограммы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 86400 * 5);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МП_ФотографииКЗадачам.Ссылка,
	|	МП_ФотографииКЗадачам.РасширениеФайла,
	|	МП_ФотографииКЗадачам.ОтносительноеИмяФайла
	|ИЗ
	|	Документ.МП_ЗадачаМагазина КАК МП_ЗадачаМагазина
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	|		ПО МП_ЗадачаМагазина.Ссылка = МП_ФотографииКЗадачам.Задача
	|ГДЕ
	|	МП_ЗадачаМагазина.Дата >= &Дата";
	
	
	МассивКаталоги = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
			ИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
			ФайлОригинал = Новый Файл(ИмяФайла);
			ИмяФайлаМиниатюра = ФайлОригинал.Путь + ФайлОригинал.ИмяБезРасширения + "thumb" + ФайлОригинал.Расширение;
		Иначе	
			ИмяФайла = КаталогФотографий + Выборка.Ссылка.УникальныйИдентификатор() + ?(ПустаяСтрока(Выборка.РасширениеФайла), "", "." + Выборка.РасширениеФайла);
			ИмяФайлаМиниатюра = КаталогФотографий + Выборка.Ссылка.УникальныйИдентификатор() + "thumb" + ?(ПустаяСтрока(Выборка.РасширениеФайла), "", "." + Выборка.РасширениеФайла);
		КонецЕсли;	
		ФайлОригинал = Новый Файл(ИмяФайла);
		ФайлМиниатюра = Новый Файл(ИмяФайлаМиниатюра);
		Если ФайлОригинал.Существует()
			И НЕ ФайлМиниатюра.Существует() Тогда
			Если МассивКаталоги.Найти(ФайлОригинал.Путь) = Неопределено Тогда
				МассивКаталоги.Добавить(ФайлОригинал.Путь);
			КонецЕсли;	
			Попытка
				ЗапуститьПриложение(ИмяФайлаПрограммы + " """ + ИмяФайла + """" + " """ + ИмяФайлаМиниатюра + """",, Истина);
			Исключение
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;
	
	УдалитьФайлы(ИмяФайлаПрограммы);
	Для Каждого КаталогОбр Из МассивКаталоги Цикл
		ФайлыПустышки = НайтиФайлы(КаталогОбр, "*.", Истина);
		Для Каждого ФайлПустышка Из ФайлыПустышки Цикл
			Если ФайлПустышка.Размер() = 0 Тогда
				УдалитьФайлы(ФайлПустышка.ПолноеИмя);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	//
	//ФайлыПустышки = НайтиФайлы(КаталогФотографий, "*.");
	//Для Каждого ФайлПустышка Из ФайлыПустышки Цикл
	//	УдалитьФайлы(ФайлПустышка.ПолноеИмя);
	//КонецЦикла;	
	
КонецПроцедуры	

Процедура ОчиститьЖурналОбменаМП() Экспорт
	
	ДатаНачала = НачалоДня(ТекущаяДата()) - 7*24*60*60;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МП_ЖурналОбмена.МобильныйКлиент
	|ИЗ
	|	РегистрСведений.МП_ЖурналОбмена КАК МП_ЖурналОбмена
	|ГДЕ
	|	МП_ЖурналОбмена.Период < &Период");
	
	Запрос.УстановитьПараметр("Период", ДатаНачала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//Сообщить(Выборка.МобильныйКлиент);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	МП_ЖурналОбмена.*
		|ИЗ
		|	РегистрСведений.МП_ЖурналОбмена КАК МП_ЖурналОбмена
		|ГДЕ
		|	МП_ЖурналОбмена.МобильныйКлиент = &МобильныйКлиент
		|	И МП_ЖурналОбмена.Период >= &Период");
		
		Запрос.УстановитьПараметр("Период"			, ДатаНачала);
		Запрос.УстановитьПараметр("МобильныйКлиент"	, Выборка.МобильныйКлиент);
		
		НЗ = РегистрыСведений.МП_ЖурналОбмена.СоздатьНаборЗаписей();		
		НЗ.Отбор.МобильныйКлиент.Установить(Выборка.МобильныйКлиент);
		
		НЗ.Загрузить(Запрос.Выполнить().Выгрузить());
		
		НЗ.Записать();
	КонецЦикла;   
	
КонецПроцедуры 

// Pans 20151130
Процедура Генерация_МП_ЗадачМагазина() Экспорт
	
	Обр1 = Обработки.МП_ЗаполнениеЗадачПоШаблону.Создать();
	Обр1.ДатаВыполнения = ТекущаяДата();
	Обработки.МП_ЗаполнениеЗадачПоШаблону.ЗаполнитьСписокМагазинов(Обр1);
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	МП_ШаблоныЗадач.Ссылка
	|ИЗ
	|	Справочник.МП_ШаблоныЗадач КАК МП_ШаблоныЗадач
	|ГДЕ
	|	МП_ШаблоныЗадач.ПометкаУдаления = ЛОЖЬ
	|	И МП_ШаблоныЗадач.КодВидаГенерацииЗадачМагазина > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	МП_ШаблоныЗадач.Код";
	
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	Пока Выб1.Следующий() Цикл
		Обр1.Шаблон = Выб1.Ссылка;
		Обработки.МП_ЗаполнениеЗадачПоШаблону.СформироватьНаСервере(Обр1);
	КонецЦикла;
	
	//
	ОчиститьЖурналОбменаМП();
	
КонецПроцедуры

Процедура ОбработкаСтатусовХарактеристик() Экспорт
	
	//сначала проставим статус активности характеристикам
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОбработки", НачалоДня(ТекущаяДата() - 86400));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	ХарактеристикиНоменклатуры.НеОбрабатыватьСтатусАвтоматически = ЛОЖЬ
	|	И ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Новая))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.Характеристика,
	|	МАКСИМУМ(ВЗ_Запрос.Ссылка) КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика) КАК Характеристика,
	|		МАКСИМУМ(ВЗ_Запрос.Ссылка) КАК Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПредзаказТовары.Характеристика КАК Характеристика,
	|			ПредзаказТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.Предзаказ.Товары КАК ПредзаказТовары
	|		ГДЕ
	|			ПредзаказТовары.Ссылка В
	|					(ВЫБРАТЬ
	|						ЗаказПоставщикуПредзаказы.Документ
	|					ИЗ
	|						Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|					ГДЕ
	|						ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления >= &ДатаОбработки
	|						И ЗаказПоставщикуПредзаказы.Ссылка.Проведен = ИСТИНА)
	|			И ПредзаказТовары.Характеристика В
	|					(ВЫБРАТЬ
	|						ВТ_Характеристики.Ссылка
	|					ИЗ
	|						ВТ_Характеристики КАК ВТ_Характеристики)
	|			И ПредзаказТовары.Количество > 0) КАК ВЗ_Запрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаОбработки, ) КАК СоставКомплектаСрезПоследних
	|			ПО ВЗ_Запрос.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЗ_Запрос.Характеристика,
	|		МАКСИМУМ(ВЗ_Запрос.Ссылка)
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПредзаказТовары.Характеристика КАК Характеристика,
	|			ПредзаказТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.Предзаказ.Товары КАК ПредзаказТовары
	|		ГДЕ
	|			ПредзаказТовары.Ссылка В
	|					(ВЫБРАТЬ
	|						ЗаказПоставщикуПредзаказы.Документ
	|					ИЗ
	|						Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|					ГДЕ
	|						ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления >= &ДатаОбработки
	|						И ЗаказПоставщикуПредзаказы.Ссылка.Проведен = ИСТИНА)
	|			И ПредзаказТовары.Характеристика В
	|					(ВЫБРАТЬ
	|						ВТ_Характеристики.Ссылка
	|					ИЗ
	|						ВТ_Характеристики КАК ВТ_Характеристики)
	|			И ПредзаказТовары.Количество > 0) КАК ВЗ_Запрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЗ_Запрос.Характеристика) КАК ВЗ_Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Характеристика";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			//проверим характеристики по данному холдингу
			ЗапросХолдинг = Новый Запрос();
			ЗапросХолдинг.УстановитьПараметр("Ссылка"	, Выборка.Характеристика);
			ЗапросХолдинг.УстановитьПараметр("Владелец"	, Выборка.Характеристика.Владелец);
			ЗапросХолдинг.Текст =
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Ссылка,
			|	ХарактеристикиНоменклатуры.ДатаВывода,
			|	ХарактеристикиНоменклатуры.Статус,
			|	ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата,
			|	ХарактеристикиНоменклатуры.Причина
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
			|ГДЕ
			|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Новая))
			|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ГоловнойКонтрагент В
			|			(ВЫБРАТЬ
			|				ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ГоловнойКонтрагент
			|			ИЗ
			|				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|					ПО
			|						ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
			|							И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
			|			ГДЕ
			|				ХарактеристикиНоменклатуры.Ссылка = &Ссылка)
			|	И ХарактеристикиНоменклатуры.Владелец = &Владелец
			|	И ХарактеристикиНоменклатуры.Ссылка <> &Ссылка";
			
			ТабРезультат = ЗапросХолдинг.Выполнить().Выгрузить();
			Если ТабРезультат.Количество() > 1 Тогда
				Продолжить;
			КонецЕсли;	
			
			СпрОбъект = Выборка.Характеристика.ПолучитьОбъект();
			СпрОбъект.НеЛогироватьСменуАктивности 		= Истина;
			СпрОбъект.СтатусАктивностиХарактеристики 	= Перечисления.СтатусыАктивностиХарактеристик.Активна;
			СпрОбъект.Записать();
			
			Запись = РегистрыСведений.ЛогированиеСменыСтатусовАктивности.СоздатьМенеджерЗаписи();
			Запись.Период = ТекущаяДата();
			Запись.Объект = Выборка.Характеристика;
			//Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.Предзаказ") Тогда
				Запись.Комментарий = "Автоматическая обработка характеристик. Характеристика есть в документах заказа (" + Строка(Выборка.Ссылка) + " Дата поступления по предзаказу: " + Выборка.Ссылка.ДатаПоступления + "). Статус изменен на Активна";
			Иначе
				Запись.Комментарий = "Автоматическая обработка характеристик. Характеристика есть в документах заказа (" + Выборка.Ссылка + "). Статус изменен на Активна";
			КонецЕсли;	
			//+++АК BELN 2017.12.09 
			Запись.Комментарий=Запись.Комментарий+" Причина "+Выборка.Причина+" Статус "+Строка(Выборка.Статус)+" Дата вывода/приостановки "+Строка(Формат(Выборка.ДатаВывода,"ДФ=dd.MM.yy"))+" Дата ожидаемого возврата "+Строка(Формат(Выборка.ДатаОжидаемогоВозврата,"ДФ=dd.MM.yy"));
			//---АК BELN 2017.12.09 
			Запись.Статус = Перечисления.СтатусыАктивностиХарактеристик.Активна;
			Запись.Записать();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	//теперь нужно характеристики выведенные отработать в неактивные
	//к сроку годности прибавляется 10 процентов от сока годности, но не менее 7 дней и не более 14
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЗ_Запрос.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ВЗ_Запрос.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриходныйОрдерСкладТовары.Характеристика КАК Характеристика,
	|		МАКСИМУМ(ПриходныйОрдерСкладТовары.Ссылка.Дата) КАК Дата
	|	ИЗ
	|		Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|	ГДЕ
	|		ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|		И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|		И ПриходныйОрдерСкладТовары.Характеристика В
	|				(ВЫБРАТЬ
	|					ХарактеристикиНоменклатуры.Ссылка
	|				ИЗ
	|					Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|				ГДЕ
	|					ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПриходныйОрдерСкладТовары.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоставКомплекта.Составляющая,
	|		МАКСИМУМ(ПриходныйОрдерСкладТовары.Ссылка.Дата)
	|	ИЗ
	|		Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(, ) КАК СоставКомплекта
	|			ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплекта.Характеристика
	|	ГДЕ
	|		ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|		И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|		И СоставКомплекта.Составляющая В
	|				(ВЫБРАТЬ
	|					ХарактеристикиНоменклатуры.Ссылка
	|				ИЗ
	|					Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|				ГДЕ
	|					ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СоставКомплекта.Составляющая) КАК ВЗ_Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Характеристики.Ссылка КАК Объект,
	|	ВЗ_Характеристики.Ссылка.СтатусАктивностиХарактеристики КАК БылСтатусАктивностиХарактеристики,
	|	ВЗ_Характеристики.Ссылка.ДатаВывода КАК ДатаВывода,
	|	ВЗ_Характеристики.Ссылка.ДатаОжидаемогоВозврата КАК ДатаОжидаемогоВозврата,
	|	ВЗ_Характеристики.Ссылка.Статус КАК Статус,
	|	ВЗ_Характеристики.Ссылка.Причина КАК Причина
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|		ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках * ХарактеристикиНоменклатуры.СрокГодности + ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках * ХарактеристикиНоменклатуры.СрокГодности * 0.1 < 7
	|				ТОГДА 7
	|			КОГДА ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках * ХарактеристикиНоменклатуры.СрокГодности * 0.1 > 14
	|				ТОГДА 14
	|			ИНАЧЕ ВЫРАЗИТЬ(ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках * ХарактеристикиНоменклатуры.СрокГодности * 0.1 КАК ЧИСЛО(10, 0))
	|		КОНЕЦ КАК СрокВДнях
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ГДЕ
	|		ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)) КАК ВЗ_Характеристики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВЗ_Даты
	|		ПО ВЗ_Характеристики.Ссылка = ВЗ_Даты.Характеристика
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ВЗ_Даты.Дата, ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -2000)), &ТекДата, ДЕНЬ) > ВЗ_Характеристики.СрокВДнях
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики,
	|	ХарактеристикиНоменклатуры.ДатаВывода,
	|	ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата,
	|	ХарактеристикиНоменклатуры.Статус,
	|	ХарактеристикиНоменклатуры.Причина
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_Характеристики.Характеристика
	|				ИЗ
	|					ВТ_Характеристики КАК ВТ_Характеристики)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			СпрОбъект = Выборка.Объект.ПолучитьОбъект();
			СпрОбъект.НеЛогироватьСменуАктивности 		= Истина;
			СпрОбъект.СтатусАктивностиХарактеристики 	= Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
			СпрОбъект.Записать();
			
			Запись = РегистрыСведений.ЛогированиеСменыСтатусовАктивности.СоздатьМенеджерЗаписи();
			Запись.Период = ТекущаяДата();
			Запись.Объект = Выборка.Объект;
			Запись.Комментарий = "Автоматическая обработка характеристик. Характеристика переведена в неактивные по сроку годности. Отладка: Был статус " + Выборка.БылСтатусАктивностиХарактеристики;
			//+++АК BELN 2017.12.09 
			Запись.Комментарий=Запись.Комментарий+" Причина "+Выборка.Причина+" Статус "+Строка(Выборка.Статус)+" Дата вывода/приостановки "+Строка(Формат(Выборка.ДатаВывода,"ДФ=dd.MM.yy"))+" Дата ожидаемого возврата "+Строка(Формат(Выборка.ДатаОжидаемогоВозврата,"ДФ=dd.MM.yy"));
			//---АК BELN 2017.12.09 
			
			Запись.Статус = Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
			Запись.Записать();
		Исключение
		КонецПопытки;	
	КонецЦикла;	
	
//проставим признак выведена в товарный ассортимент точек
	//+++АК MIND 2018.02.06 при возможности сразу заменим на активную характеристику
	//+++АК KIRN 2018.11.07 ИП-00017846.01
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварныйАссортиментТочекСрезПоследних.Период,
	               |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	               |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	               |	ВложенныйЗапрос.Ссылка КАК ЗаменитьНаХарактеристику
	               |ПОМЕСТИТЬ тт
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	               |			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка
	               |		ИЗ
	               |			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойства
	               |				ПО ХарактеристикиНоменклатуры.Ссылка = Свойства.Объект
	               |					И (Свойства.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	               |		ГДЕ
	               |			ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ХарактеристикиНоменклатуры.Владелец) КАК ВложенныйЗапрос
	               |		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВложенныйЗапрос.Владелец
	               |ГДЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	               |	И ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.Активное = ИСТИНА
	               |	И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналогиНоменклатурыТовары.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(АналогиНоменклатурыТовары1.Номенклатура) КАК Номенклатура1,
	               |	АналогиНоменклатурыТовары.Ссылка КАК СсылкаАналог
	               |ПОМЕСТИТЬ ВТ_Аналоги
	               |ИЗ
	               |	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары1
	               |		ПО АналогиНоменклатурыТовары.Ссылка = АналогиНоменклатурыТовары1.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			тт.Номенклатура КАК Номенклатура
	               |		ИЗ
	               |			тт КАК тт
	               |		ГДЕ
	               |			тт.ЗаменитьНаХарактеристику ЕСТЬ NULL) КАК втНом1
	               |		ПО АналогиНоменклатурыТовары.Номенклатура = втНом1.Номенклатура
	               |ГДЕ
	               |	АналогиНоменклатурыТовары.Ссылка.ПолностьюЗаменяемыйТовар = ИСТИНА
	               |	И АналогиНоменклатурыТовары.Номенклатура <> АналогиНоменклатурыТовары1.Номенклатура
	               |	И АналогиНоменклатурыТовары.Номенклатура.Выведена = ЛОЖЬ
	               |	И АналогиНоменклатурыТовары1.Номенклатура.Выведена = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АналогиНоменклатурыТовары.Номенклатура,
	               |	АналогиНоменклатурыТовары.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СпрХар.Ссылка) КАК Характеристика,
	               |	СпрХар.Владелец КАК Номенклатура1,
	               |	вт_аналоги.Номенклатура,
	               |	вт_аналоги.СсылкаАналог
	               |ПОМЕСТИТЬ вт_аналоги_хар
	               |ИЗ
	               |	ВТ_Аналоги КАК вт_аналоги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХар
	               |		ПО (СпрХар.Владелец = вт_аналоги.Номенклатура1)
	               |ГДЕ
	               |	СпрХар.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СпрХар.Владелец,
	               |	вт_аналоги.Номенклатура,
	               |	вт_аналоги.СсылкаАналог
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	вт_аналоги.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	               |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	               |	ТоварныйАссортиментТочекСрезПоследних.Выведена,
	               |	вт_аналоги_хар.Номенклатура1 КАК Номенклатура1,
	               |	вт_аналоги_хар.Характеристика КАК Характеристика1,
	               |	вт_аналоги_хар.СсылкаАналог КАК СсылкаАналог
	               |ПОМЕСТИТЬ тт2
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |			&ТекДата,
	               |			Номенклатура В
	               |				(ВЫБРАТЬ
	               |					вт_аналоги_хар.Номенклатура
	               |				ИЗ
	               |					вт_аналоги_хар)) КАК ТоварныйАссортиментТочекСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_аналоги_хар КАК вт_аналоги_хар
	               |		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = вт_аналоги_хар.Номенклатура
	               |ГДЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.Активное = ИСТИНА
	               |	И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тт.Период,
	               |	тт.ТорговаяТочка,
	               |	тт.Номенклатура,
	               |	тт.Характеристика,
	               |	тт.ЗаменитьНаХарактеристику,
	               |	тт2.Номенклатура1,
	               |	тт2.Характеристика1,
	               |	тт2.СсылкаАналог
	               |ИЗ
	               |	тт КАК тт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ тт2 КАК тт2
	               |		ПО тт.Номенклатура = тт2.Номенклатура
	               |			И тт.ТорговаяТочка = тт2.ТорговаяТочка";
	
	Набор1 = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	Набор2 = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ЗаменитьНаХарактеристику) Тогда
			Запись = Набор1.Добавить();
			//Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			Запись.Период 			= ТекущаяДата();
			Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
			Запись.Номенклатура 	= Выборка.Номенклатура;
			Запись.Характеристика 	= Выборка.ЗаменитьНаХарактеристику;
			Запись.Комментарий		= "#Замена неактивной характеристики на активную";
			//Попытка
			//	Запись.Записать();
			//Исключение
			//	ЗаписьЖурналаРегистрации("Обработка статуса характеристик", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
			//КонецПОпытки;
		Иначе
			Если ЗначениеЗаполнено(Выборка.Номенклатура1) и ЗначениеЗаполнено(Выборка.Характеристика1) Тогда
				Запись = Набор2.Добавить();
				Запись.Период 			= ТекущаяДата();
				Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
				Запись.Номенклатура 	= Выборка.Номенклатура;
				Запись.Характеристика 	= Выборка.Характеристика;
				Запись.Комментарий		= "#Выведение неактивной номенклатуры и характеристики для последующей замены";
				Запись.Выведена = Истина;
				
				Запись = Набор1.Добавить();
				Запись.Период 			= ТекущаяДата();
				Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
				Запись.Номенклатура 	= Выборка.Номенклатура1;
				Запись.Характеристика 	= Выборка.Характеристика1;
				Запись.Комментарий		= "#Замена неактивной номенклатуры и характеристики на полный аналог";
			Иначе
				
				Запись = Набор2.Добавить();
				Запись.Период 			= ТекущаяДата();
				Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
				Запись.Номенклатура 	= Выборка.Номенклатура;
				Запись.Характеристика 	= Выборка.Характеристика;
				Запись.Комментарий		= "#Выведение неактивной номенклатуры и характеристики";
				Запись.Выведена = Истина;
				
				//Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
				//Запись.Период 			= Выборка.Период;
				//Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
				//Запись.Номенклатура 	= Выборка.Номенклатура;
				//Запись.Прочитать();
				//
				//Запись2 = Набор2.Добавить();
				//ЗаполнитьЗначенияСвойств(Запись2, Запись);
				//Запись2.Комментарий		= "#Выведение неактивной номенклатуры и характеристики";
				//Запись2.Выведена = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Набор2.Количество()>0 Тогда
		Попытка
			Набор2.ОбменДанными.Загрузка = Истина;
			Набор2.Записать(ЛОЖЬ);
		Исключение
			ЗаписьЖурналаРегистрации("Обработка статуса характеристик", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи набора2 в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
		КонецПопытки;
	КонецЕсли;

	
	Если Набор1.Количество()>0 Тогда
		Попытка
			Набор1.ОбменДанными.Загрузка = Истина;
			Набор1.Записать(ЛОЖЬ);
		Исключение
			ЗаписьЖурналаРегистрации("Обработка статуса характеристик", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи набора1 в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
		КонецПопытки;
	КонецЕсли;
	
	
	
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ТоварныйАссортиментТочекСрезПоследних.Период,
	//|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	//|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	//|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	//|	ВложенныйЗапрос.Ссылка КАК ЗаменитьНаХарактеристику
	//|ИЗ
	//|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	//|			МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Ссылка
	//|		ИЗ
	//|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//|		ГДЕ
	//|			ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			ХарактеристикиНоменклатуры.Владелец) КАК ВложенныйЗапрос
	//|		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВложенныйЗапрос.Владелец
	//|ГДЕ
	//|	ТоварныйАссортиментТочекСрезПоследних.Характеристика.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	//|	И ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	//|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если ЗначениеЗаполнено(Выборка.ЗаменитьНаХарактеристику) Тогда
	//		Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
	//		Запись.Период 			= ТекущаяДата();
	//		Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
	//		Запись.Номенклатура 	= Выборка.Номенклатура;
	//		Запись.Характеристика 	= Выборка.ЗаменитьНаХарактеристику;
	//		Запись.Комментарий		= "Замена неактивной характеристики на активную";
	//		Попытка
	//			Запись.Записать();
	//		Исключение
	//			ЗаписьЖурналаРегистрации("Обработка статуса характеристик", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
	//		КонецПОпытки;
	//	Иначе	
	//		Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
	//		Запись.Период 			= Выборка.Период;
	//		Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
	//		Запись.Номенклатура 	= Выборка.Номенклатура;
	//		Запись.Прочитать();
	//		Запись.Выведена = Истина;
	//		Попытка
	//			Запись.Записать();
	//		Исключение
	//			ЗаписьЖурналаРегистрации("Обработка статуса характеристик", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при записи в рс ТоварныйАссортиментТочек: " + ОписаниеОшибки());							
	//		КонецПОпытки;
	//	КонецЕсли;	
	//КонецЦикла;
	//---АК KIRN 

КонецПроцедуры


Процедура ФормированиеТелефонногоСправочникаHTML() Экспорт
	
	ОбработкаОбъект = Обработки.ТелефонныйСправочникHTML.Создать();
	ОбработкаОбъект.СформироватьИСохранить();
	
КонецПроцедуры

//Беляк 28.01.2016+
Процедура Генерация_МП_ПроцентовТайногоПокупателя() Экспорт
	Если НачалоДня(Константы.ДатаГенерацииПроцентовТайногоПокупателя.Получить())<>НачалоДня(ТекущаяДата()) и Час(ТекущаяДата())=23 Тогда
		Константы.ДатаГенерацииПроцентовТайногоПокупателя.Установить(ТекущаяДата());
		Обр1 = Обработки.МП_ЗаполнениеПроцентыТайногоПокупателя.Создать();
		Дата1=?(День(ТекущаяДата())>7,НачалоМесяца(ТекущаяДата()),ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-1));
		Дата2=НачалоДня(ТекущаяДата());
		ДатаЗапрета = ПолныеПрава.ПолучитьГраницыЗапретаИзмененияДанных().Получить().Получить("ОбщаяДатаЗапретаРедактирования")+1;
		Дата1=Макс(Дата1,ДатаЗапрета);
		Пока Дата1<=Дата2 Цикл
			Обр1.ДатаВыполнения = Дата1;
			Обработки.МП_ЗаполнениеПроцентыТайногоПокупателя.ЗаполнитьСписокМагазинов(Обр1);
			Обработки.МП_ЗаполнениеПроцентыТайногоПокупателя.СформироватьНаСервере(Обр1);
			Дата1=Дата1+24*60*60;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

//Беляк 28.01.2016-

Процедура ВзаимозачетОтклоненийПоЛистамУчета() Экспорт
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Истина;
	
	ТТ = Неопределено;
	ДатаЗапрета = ОбменСAccess.ПолучитьГраницуЗапретаИзменений() + 86400;
	МинДата = ТекущаяДата() - 86400 * 20;
	
	МинДата = НачалоДня(Макс(ДатаЗапрета, МинДата));
	ТекДата = ТекущаяДата() - 86400 * 2;
	
	Пока МинДата <= ТекДата Цикл
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач"			, МинДата);
		Если Месяц(МинДата) <> Месяц(ТекДата) Тогда
			Запрос.УстановитьПараметр("ДатаКон"			, КонецМесяца(МинДата));
		Иначе	
			Запрос.УстановитьПараметр("ДатаКон"			, КонецДня(ТекДата));
		КонецЕсли;	
		Запрос.УстановитьПараметр("ТорговаяТочка"	, ТТ);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛистУчета.Ссылка,
		|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
		|	ЛистУчета.Отклонение
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ЛистУчета.Обработан = ИСТИНА
		|	И ЛистУчета.Проведен = ИСТИНА
		|	И ЛистУчета.Отклонение <> 0
		|	И (ЛистУчета.ТорговаяТочка = &ТорговаяТочка
		|			ИЛИ &ТорговаяТочка = НЕОПРЕДЕЛЕНО)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТорговаяТочка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("ТорговаяТочка") Цикл
			
			ТабПоложительныеРазницы = Новый ТаблицаЗначений();
			ТабПоложительныеРазницы.Колонки.Добавить("ЛистУчета");
			ТабПоложительныеРазницы.Колонки.Добавить("Сумма");
			
			ТабОтрицательныеРазницы = ТабПоложительныеРазницы.СкопироватьКолонки();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Отклонение > 0 Тогда
					СтрокаДоб = ТабПоложительныеРазницы.Добавить();
					СтрокаДоб.ЛистУчета = Выборка.Ссылка;
					СтрокаДоб.Сумма 	= Выборка.Отклонение;
				Иначе
					СтрокаДоб = ТабОтрицательныеРазницы.Добавить();
					СтрокаДоб.ЛистУчета = Выборка.Ссылка;
					СтрокаДоб.Сумма 	= Выборка.Отклонение;
				КонецЕсли;	
			КонецЦикла;
			
			Если ТабПоложительныеРазницы.Количество() > 0
				И ТабОтрицательныеРазницы.Количество() > 0 Тогда
				ТабИзмененияВЛисты = Новый ТаблицаЗначений();
				ТабИзмененияВЛисты.Колонки.Добавить("Лист");
				ТабИзмененияВЛисты.Колонки.Добавить("ЛистСвязанный");
				ТабИзмененияВЛисты.Колонки.Добавить("Сумма");
				Для Каждого СтрокаПоложительные Из ТабПоложительныеРазницы Цикл
					Для Каждого СтрокаОтрицательный Из ТабОтрицательныеРазницы Цикл
						МинСумма = Мин(СтрокаПоложительные.Сумма, СтрокаОтрицательный.Сумма * (-1));
						Если МинСумма = 0 Тогда
							Прервать;
						КонецЕсли;	
						СтрокаДоб = ТабИзмененияВЛисты.Добавить();
						СтрокаДоб.Лист 			= СтрокаПоложительные.ЛистУчета;
						СтрокаДоб.ЛистСвязанный = СтрокаОтрицательный.ЛистУчета;
						СтрокаДоб.Сумма 		= МинСумма * (-1);
						
						СтрокаДоб = ТабИзмененияВЛисты.Добавить();
						СтрокаДоб.Лист 			= СтрокаОтрицательный.ЛистУчета;
						СтрокаДоб.ЛистСвязанный = СтрокаПоложительные.ЛистУчета;
						СтрокаДоб.Сумма 		= МинСумма;
						СтрокаПоложительные.Сумма = СтрокаПоложительные.Сумма - МинСумма;
						СтрокаОтрицательный.Сумма = СтрокаОтрицательный.Сумма + МинСумма;
					КонецЦикла;	
				КонецЦикла;
				
				ТабЛисты = ТабИзмененияВЛисты.Скопировать(, "Лист");
				ТабЛисты.Свернуть("Лист");
				
				Попытка
					НачатьТранзакцию();
					Для Каждого СтрокаЛист Из ТабЛисты Цикл
						ДокОбъект = СтрокаЛист.Лист.ПолучитьОбъект();
						СтрокиИзменения = ТабИзмененияВЛисты.НайтиСтроки(Новый Структура("Лист", СтрокаЛист.Лист));
						Для Каждого СтрокаИзменение Из СтрокиИзменения Цикл
							СтрокаДоб = ДокОбъект.ВзаимозачетОтклоненийДС.Добавить();
							СтрокаДоб.ЛистУчета = СтрокаИзменение.ЛистСвязанный;
							СтрокаДоб.Сумма 	= СтрокаИзменение.Сумма;
						КонецЦикла;	
						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЦикла;
					ЗафиксироватьТранзакцию();
				Исключение
					Сообщить(ОписаниеОшибки());
					ОтменитьТранзакцию();
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		МинДата = КонецМесяца(МинДата) + 1;
	КонецЦикла;
	
	ПараметрыСеанса.НеСохранятьВерсииОбъектов = Ложь;
	
КонецПроцедуры

//+++AK obue 20160217

//
//
Процедура _ПолучениеЗаявокНаПечатьЭтикеток() Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	ЗаполнитьЗначенияСвойств(Профиль,УчетнаяЗапись);
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.Пользователь = УчетнаяЗапись.Логин;
	Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;
	Почта = Новый ИнтернетПочта;
	
	Сообщ = Новый СообщениеПользователю();
	
	Попытка
		Почта.Подключиться(Профиль);
		// Получаем все сообщения из почтового ящика
		Заголовки = Почта.ПолучитьЗаголовки();
		МассивСообщений = Новый Массив;
		МассивСообщений = Почта.Выбрать(Ложь, Заголовки);
	Исключение
		// Ошибка при подключении к серверу или при приеме сообщения обмена
		Сообщ.Текст = " - Ошибка при подключении или приеме" + ОписаниеОшибки();
		Сообщ.Сообщить();
		Возврат;
	КонецПопытки;
	
	Если МассивСообщений.Количество() = 0 Тогда
		// Сообщений в почтовом ящике нет
		Сообщ.Текст = " - Сообщений в почтовом ящике нет.";
		Сообщ.Сообщить();
		Возврат;
	КонецЕсли;
	
	//
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ШтрихКод"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаСообщений.Колонки.Добавить("АдресОтправителя", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	ТаблицаСообщений.Колонки.Добавить("ТекстПростой"	, Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("ТекстHTML"		, Новый ОписаниеТипов("Строка"));
	Для каждого Сообщение Из МассивСообщений Цикл
		стр = ТаблицаСообщений.Добавить();
		стр.ШтрихКод 			= СокрЛП(Сообщение.Тема);
		стр.АдресОтправителя 	= СокрЛП(Сообщение.Отправитель.Адрес);
		ЗаполнитьТексты(стр, Сообщение);
	КонецЦикла;
	ТаблицаСообщений.Свернуть("ШтрихКод, АдресОтправителя, ТекстПростой, ТекстHTML");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСообщений", ТаблицаСообщений); 
	Запрос.УстановитьПараметр("ТекДата"			, ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСообщений.ШтрихКод,
	|	ТаблицаСообщений.АдресОтправителя,
	|	ТаблицаСообщений.ТекстПростой,
	|	ТаблицаСообщений.ТекстHTML
	|ПОМЕСТИТЬ ВТ_ТаблицаСообщений
	|ИЗ
	|	&ТаблицаСообщений КАК ТаблицаСообщений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПоставщиковСрезПоследних.Спецификация,
	|	ЗначенияСвойствОбъектов.Объект
	|ПОМЕСТИТЬ ВТ_СпецификацииПоставщика
	|ИЗ
	|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних КАК СпецификацииПоставщиковСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО СпецификацииПоставщиковСрезПоследних.Поставщик = ЗначенияСвойствОбъектов.Значение
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель) И СпецификацииПоставщиковСрезПоследних.Спецификация<>Значение(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСообщений.ШтрихКод,
	|	ВТ_ТаблицаСообщений.АдресОтправителя,
	|	ШтриховыеКоды.Номенклатура,
	|	ШтриховыеКоды.ЕдиницаИзмерения,
	|	ШтриховыеКоды.Характеристика,
	|	ВЫБОР
	|		КОГДА ШтриховыеКоды.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НашелШтрихКод,
	|	""%"" + ВТ_ТаблицаСообщений.АдресОтправителя + ""%"" КАК АдресОтправителяПодобно,
	|	ВТ_СпецификацииПоставщика.Спецификация
	|ПОМЕСТИТЬ ВТ_ТаблицаСоШтрихКодами
	|ИЗ
	|	ВТ_ТаблицаСообщений КАК ВТ_ТаблицаСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпецификацииПоставщика КАК ВТ_СпецификацииПоставщика
	|			ПО ШтриховыеКоды.Характеристика = ВТ_СпецификацииПоставщика.Объект
	|				И ШтриховыеКоды.Номенклатура = ВТ_СпецификацииПоставщика.Спецификация.Владелец
	|		ПО ВТ_ТаблицаСообщений.ШтрихКод = ШтриховыеКоды.ШтрихКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	КонтактнаяИнформация.Объект КАК Контрагент,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура КАК НоменклатураШапка,
	|	ВТ_ТаблицаСоШтрихКодами.Спецификация
	|ПОМЕСТИТЬ ВТ_ТаблицаАдресовКонтрагентов
	|ИЗ
	|	ВТ_ТаблицаСоШтрихКодами КАК ВТ_ТаблицаСоШтрихКодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами))
	|			И (КонтактнаяИнформация.Представление ПОДОБНО ВТ_ТаблицаСоШтрихКодами.АдресОтправителяПодобно)
	|ГДЕ
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	МАКСИМУМ(ВТ_ТаблицаСоШтрихКодами.Номенклатура) КАК НоменклатураШапка,
	|	ВТ_ТаблицаАдресовКонтрагентов.Контрагент,
	|	ВТ_ТаблицаСоШтрихКодами.Спецификация
	|ПОМЕСТИТЬ ВТ_СводнаяТаблицаБезЭтикетов
	|ИЗ
	|	ВТ_ТаблицаСоШтрихКодами КАК ВТ_ТаблицаСоШтрихКодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаАдресовКонтрагентов КАК ВТ_ТаблицаАдресовКонтрагентов
	|		ПО ВТ_ТаблицаСоШтрихКодами.ШтрихКод = ВТ_ТаблицаАдресовКонтрагентов.ШтрихКод
	|ГДЕ
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаАдресовКонтрагентов.Контрагент,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СводнаяТаблицаБезЭтикетов.ШтрихКод КАК ШтрихКод,
	|	ВТ_СводнаяТаблицаБезЭтикетов.АдресОтправителя КАК АдресОтправителя,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура КАК Номенклатура,
	|	ВТ_СводнаяТаблицаБезЭтикетов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Характеристика КАК Характеристика,
	|	ВТ_СводнаяТаблицаБезЭтикетов.НашелШтрихКод КАК НашелШтрихКод,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Контрагент КАК Контрагент,
	|	ВЫРАЗИТЬ(НоменклатураЭтикетки.ИмяФайла КАК СТРОКА(1000)) КАК ИмяФайла,
	|	НоменклатураЭтикетки.Характеристика КАК ХарактеристикаЭтикетки,
	|	ВТ_СводнаяТаблицаБезЭтикетов.НоменклатураШапка КАК НоменклатураШапка,
	|	Выбор когда СпецификацииПоставщиков.НоменклатураСырье Есть Null или СпецификацииПоставщиков.НоменклатураСырье=Значение(Справочник.Номенклатура.ПустаяСсылка) Тогда СпецификацииСостав.Номенклатура Иначе СпецификацииПоставщиков.НоменклатураСырье Конец КАК Этикетка
	|ПОМЕСТИТЬ ВТ_ИтогБезТекстов
	|ИЗ
	|	ВТ_СводнаяТаблицаБезЭтикетов КАК ВТ_СводнаяТаблицаБезЭтикетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура = СпецификацииСостав.Ссылка.Владелец
	|			И ВТ_СводнаяТаблицаБезЭтикетов.Спецификация = СпецификацииСостав.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Этикетки КАК НоменклатураЭтикетки
	|		ПО ВТ_СводнаяТаблицаБезЭтикетов.Характеристика = НоменклатураЭтикетки.Характеристика
	|			И ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура = НоменклатураЭтикетки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних() КАК СпецификацииПоставщиков
	|		ПО ВТ_СводнаяТаблицаБезЭтикетов.Характеристика = СпецификацииПоставщиков.Характеристика
	|			И ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура = СпецификацииПоставщиков.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СводнаяТаблицаБезЭтикетов.АдресОтправителя,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура,
	|	ВТ_СводнаяТаблицаБезЭтикетов.ЕдиницаИзмерения,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Характеристика,
	|	ВТ_СводнаяТаблицаБезЭтикетов.НашелШтрихКод,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Контрагент,
	|	ВЫРАЗИТЬ(НоменклатураЭтикетки.ИмяФайла КАК СТРОКА(1000)),
	|	НоменклатураЭтикетки.Характеристика,
	|	ВТ_СводнаяТаблицаБезЭтикетов.НоменклатураШапка,
	|	ВТ_СводнаяТаблицаБезЭтикетов.ШтрихКод,
	|	Выбор когда СпецификацииПоставщиков.НоменклатураСырье Есть Null или СпецификацииПоставщиков.НоменклатураСырье=Значение(Справочник.Номенклатура.ПустаяСсылка) Тогда СпецификацииСостав.Номенклатура Иначе СпецификацииПоставщиков.НоменклатураСырье Конец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	ВТ_ТаблицаСообщений.ТекстПростой,
	|	ВТ_ТаблицаСообщений.ТекстHTML
	|ИЗ
	|	ВТ_ТаблицаСоШтрихКодами КАК ВТ_ТаблицаСоШтрихКодами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСообщений КАК ВТ_ТаблицаСообщений
	|		ПО ВТ_ТаблицаСоШтрихКодами.ШтрихКод = ВТ_ТаблицаСообщений.ШтрихКод
	|			И ВТ_ТаблицаСоШтрихКодами.АдресОтправителя = ВТ_ТаблицаСообщений.АдресОтправителя
	|ГДЕ
	|	НЕ ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтогБезТекстов.ШтрихКод КАК ШтрихКод,
	|	ВТ_ИтогБезТекстов.АдресОтправителя КАК АдресОтправителя,
	|	ВТ_ИтогБезТекстов.Номенклатура,
	|	ВТ_ИтогБезТекстов.ЕдиницаИзмерения,
	|	ВТ_ИтогБезТекстов.Характеристика КАК Характеристика,
	|	ВТ_ИтогБезТекстов.НашелШтрихКод,
	|	ВТ_ИтогБезТекстов.Контрагент КАК Контрагент,
	|	ВТ_ИтогБезТекстов.ИмяФайла,
	|	ВТ_ИтогБезТекстов.ХарактеристикаЭтикетки,
	|	ВТ_ИтогБезТекстов.НоменклатураШапка КАК НоменклатураШапка,
	|	ВТ_ТаблицаСообщений.ТекстПростой КАК ТекстПростой,
	|	ВТ_ТаблицаСообщений.ТекстHTML КАК ТекстHTML,
	|	ВТ_ИтогБезТекстов.Этикетка
	|ИЗ
	|	ВТ_ИтогБезТекстов КАК ВТ_ИтогБезТекстов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСообщений КАК ВТ_ТаблицаСообщений
	|		ПО ВТ_ИтогБезТекстов.ШтрихКод = ВТ_ТаблицаСообщений.ШтрихКод
	|			И ВТ_ИтогБезТекстов.АдресОтправителя = ВТ_ТаблицаСообщений.АдресОтправителя
	|ИТОГИ
	|	МАКСИМУМ(АдресОтправителя),
	|	МАКСИМУМ(Характеристика),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(НоменклатураШапка),
	|	МАКСИМУМ(ТекстПростой),
	|	МАКСИМУМ(ТекстHTML)
	|ПО
	|	ШтрихКод";
	Выборка = Запрос.ВыполнитьПакет();
	
	//ТаблицаЗаявок = Выборка[3].Выгрузить();
	ТаблицаОтказ = Выборка[6].Выгрузить();
	Для каждого ОтказШтрих Из ТаблицаОтказ Цикл
		ОтправитьПисьмо(Почта, ОтказШтрих.АдресОтправителя, ОтказШтрих.ТекстПростой, ОтказШтрих.ТекстHTML, ОтказШтрих.ШтрихКод, УчетнаяЗапись, "Заявка на упаковку не принята");
	КонецЦикла;
	ВыборкаЗаявок = Выборка[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявок.Следующий() Цикл
		ТекстПростой = ВыборкаЗаявок.ТекстПростой;
		Пока Найти(ТекстПростой, Символ(1)) Цикл
			ТекстПростой = СтрЗаменить(ТекстПростой,Символ(1),"");	
		КонецЦикла;
		ТекстHTML = ВыборкаЗаявок.ТекстHTML;
		Пока Найти(ТекстHTML, Символ(1)) Цикл
			ТекстHTML = СтрЗаменить(ТекстHTML,Символ(1),"");	
		КонецЦикла;
		ЗаявкаОбъект = Документы.ЗаявкаНаПечатьЭтикетки.СоздатьДокумент();
		ЗаявкаОбъект.Дата 				= ТекущаяДата();
		ЗаявкаОбъект.ТекстПисьмаHTML 	= ТекстHTML;
		ЗаявкаОбъект.ТекстПисьмаПростой = ТекстПростой; 
		ЗаявкаОбъект.АдресОтправителя 	= ВыборкаЗаявок.АдресОтправителя; 
		ЗаявкаОбъект.Поставщик 			= ВыборкаЗаявок.Контрагент;
		ЗаявкаОбъект.СтатусЗаявки 		= Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано;
		ЗаявкаОбъект.Тема               = ВыборкаЗаявок.ШтрихКод;
		
		ЗаявкаОбъект.Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", 727);//Склад_Упаковки_Котляково
		
		//Поиск контрагента по характеристике
		//Если не ЗначениеЗаполнено(ЗаявкаОбъект.Поставщик) Тогда
		Характеристика = ВыборкаЗаявок.Характеристика;	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
		//Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Характеристика,
		|	ЦеныПоставщиковСрезПоследних.Поставщик
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних КАК ЦеныПоставщиковСрезПоследних
		|ГДЕ
		|	ЦеныПоставщиковСрезПоследних.Характеристика = &Характеристика";
		//"ВЫБРАТЬ
		//|	ЗначенияСвойствОбъектов.Значение
		//|ИЗ
		//|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		//|ГДЕ
		//|	ЗначенияСвойствОбъектов.Объект = &Объект
		//|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаявкаОбъект.Поставщик = Выборка.Поставщик;		
		КонецЦикла;
		//КонецЕсли;
		
		ВыборкаСтрокЭтикеток = ВыборкаЗаявок.Выбрать();
		Пока ВыборкаСтрокЭтикеток.Следующий() Цикл
			стр = ЗаявкаОбъект.Этикетки.Добавить();
			стр.Товар 			= ВыборкаСтрокЭтикеток.Номенклатура;
			стр.Характеристика 	= ВыборкаСтрокЭтикеток.Характеристика;
			стр.ИмяФайла 		= ВыборкаСтрокЭтикеток.ИмяФайла;
			стр.Этикетка 		= ВыборкаСтрокЭтикеток.Этикетка;
		КонецЦикла;
		ЗаявкаОбъект.ЗаполнитьОстаткиНаСкладеПоставщика();
		ЗаявкаОбъект.Записать();
		ТекстПисьма = "Принята заявка №" + ЗаявкаОбъект.Номер + " на этикетку к товару " + ВыборкаЗаявок.НоменклатураШапка + Символы.ПС + Символы.ПС +
		"Re:" + Символы.ПС + ВыборкаЗаявок.ТекстПростой;
		ОтправитьПисьмо(Почта, ЗаявкаОбъект.АдресОтправителя, ЗаявкаОбъект.ТекстПисьмаПростой, ВыборкаЗаявок.ТекстHTML, ВыборкаЗаявок.ШтрихКод, УчетнаяЗапись, ТекстПисьма);
		Если ЗначениеЗаполнено(Справочники.УчетныеЗаписиЭлектроннойПочты.ОтветсвенныйЗаЗаявки.Логин) Тогда
			ОтправитьПисьмо(Почта, Справочники.УчетныеЗаписиЭлектроннойПочты.ОтветсвенныйЗаЗаявки.Логин, ЗаявкаОбъект.ТекстПисьмаПростой, ВыборкаЗаявок.ТекстHTML, ВыборкаЗаявок.ШтрихКод, УчетнаяЗапись, ТекстПисьма);	
		КонецЕсли;
	КонецЦикла;
	
	Почта.Отключиться();
	
КонецПроцедуры


//
Процедура ВыполнитьОтменуУстаревшихЗаявокНаПроизводствоУпаковки()
	
	//
	Возврат;
	
	//
	ТЗ = "ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Этикетка
	|ПОМЕСТИТЬ ТЗ_ЗаявкиИЭтикетки
	|ИЗ
	|	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО Таблица.Ссылка = ПриходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки
	|			И (ПриходныйОрдерСкладТовары.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ПО Таблица.Ссылка = РасходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки
	|			И (РасходныйОрдерСкладТовары.Ссылка.Проведен)
	|ГДЕ
	|	Таблица.Ссылка.Проведен
	|	И Таблица.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена)
	|	И ПриходныйОрдерСкладТовары.Ссылка ЕСТЬ NULL 
	|	И РасходныйОрдерСкладТовары.Ссылка ЕСТЬ NULL 
	|	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Таблица.Ссылка.Дата, ДЕНЬ), НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ) > 7
	|	И Таблица.Ссылка.Поставщик.ИД <> 152
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье КАК Этикетка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецификацииПоставщиковСрезПоследних.Поставщик) КАК Поставщик
	|ПОМЕСТИТЬ ТЗ_УниверсальныеУпаковки
	|ИЗ
	|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних КАК СпецификацииПоставщиковСрезПоследних
	|ГДЕ
	|	(СпецификацииПоставщиковСрезПоследних.ДатаКонца > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|			ИЛИ СпецификацииПоставщиковСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1))
	|	И СпецификацииПоставщиковСрезПоследних.НоменклатураСырье В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Таблица.Этикетка
	|			ИЗ
	|				ТЗ_ЗаявкиИЭтикетки КАК Таблица)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецификацииПоставщиковСрезПоследних.Поставщик) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ЗаявкиИЭтикетки.Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ТЗ_УниверсальныеУпаковки.Этикетка ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНеУниверсальныхЭтикеток
	|ИЗ
	|	ТЗ_ЗаявкиИЭтикетки КАК ТЗ_ЗаявкиИЭтикетки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_УниверсальныеУпаковки КАК ТЗ_УниверсальныеУпаковки
	|		ПО ТЗ_ЗаявкиИЭтикетки.Этикетка = ТЗ_УниверсальныеУпаковки.Этикетка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ_ЗаявкиИЭтикетки.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТЗ_УниверсальныеУпаковки.Этикетка ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЗ_ЗаявкиИЭтикетки.Ссылка.Дата";
	
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ТекущаяДата = ТекущаяДата();
	ПЗ.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		//
		ДокументОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена;
		ДокументОбъект.Комментарий = "#ОтмененаАвтоматически " + ТекущаяДата;
		
		//
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;	
	
КонецПроцедуры	

//
//
Процедура ПолучениеЗаявокНаПечатьЭтикеток() Экспорт
	
	//+++ZEZA
	Документы.ЗаявкаНаПечатьЭтикетки.ПолучениеЗаявокНаПечатьЭтикеток();
	Возврат;
	//---ZEZA
	
	
	//
	Сообщ = Новый СообщениеПользователю();
	
	//
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;
	
	//
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	ЗаполнитьЗначенияСвойств(Профиль,УчетнаяЗапись);
	
	//
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.Пользователь = УчетнаяЗапись.Логин;
	Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;
	
	//
	Почта = Новый ИнтернетПочта;
	
	//
	Попытка
		
		//
		Почта.Подключиться(Профиль);
		
		// Получаем все сообщения из почтового ящика
		Заголовки = Почта.ПолучитьЗаголовки();
		
		//
		МассивСообщений = Новый Массив;
		МассивСообщений = Почта.Выбрать(Ложь, Заголовки);
		
	Исключение
		
		// Ошибка при подключении к серверу или при приеме сообщения обмена
		Сообщ.Текст = " - Ошибка при подключении или приеме" + ОписаниеОшибки();
		Сообщ.Сообщить();
		Возврат;
		
	КонецПопытки;
	
	//
	Если МассивСообщений.Количество() = 0 Тогда
		
		// Сообщений в почтовом ящике нет
		Сообщ.Текст = " - Сообщений в почтовом ящике нет.";
		Сообщ.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	//
	ТаблицаСообщений = Новый ТаблицаЗначений;
	
	//
	ТаблицаСообщений.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
	
	//
	ТаблицаСообщений.Колонки.Добавить("ШтрихКод"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаСообщений.Колонки.Добавить("АдресОтправителя", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	ТаблицаСообщений.Колонки.Добавить("ТекстПростой"	, Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("ТекстHTML"		, Новый ОписаниеТипов("Строка"));
	
	//	
	Для Каждого Сообщение Из МассивСообщений Цикл
		
		//
		Если ВРЕГ(СокрЛП(УчетнаяЗапись.АдресЭлектроннойПочты)) = ВРЕГ(СокрЛП(Сообщение.Отправитель.Адрес)) Тогда
			
			//
			МассивСообщенийКУдалению = Новый Массив;
			МассивСообщенийКУдалению.Добавить(СокрЛП(Сообщение.Идентификатор[0]));
			
			//
			Почта.УдалитьСообщения(МассивСообщенийКУдалению);
			
			//
			Продолжить;
			
		КонецЕсли;	
		
		//
		Если Сообщение.ДатаОтправления < (ТекущаяДата() - 10*60) Тогда
			//Продолжить;
		КонецЕсли;	
		
		//
		НоваяСтрока = ТаблицаСообщений.Добавить();
		НоваяСтрока.ШтрихКод = СокрЛП(Сообщение.Тема);
		НоваяСтрока.АдресОтправителя = СокрЛП(Сообщение.Отправитель.Адрес);
		
		//
		ЗаполнитьТексты(НоваяСтрока, Сообщение);
		
		//
		НоваяСтрока.ID = СокрЛП(СокрЛП(Сообщение.Идентификатор[0]));
		
	КонецЦикла;
	
	//
	ТаблицаСообщений.Свернуть("ID, ШтрихКод, АдресОтправителя, ТекстПростой, ТекстHTML");
	
	//
	Запрос = Новый Запрос;
	
	//
	Запрос.УстановитьПараметр("ТаблицаСообщений", ТаблицаСообщений); 
	Запрос.УстановитьПараметр("ТекДата"			, ТекущаяДата());
	
	//
	Запрос.Текст = 	"ВЫБРАТЬ
	|	ТаблицаСообщений.ID,
	|	ТаблицаСообщений.ШтрихКод,
	|	ТаблицаСообщений.АдресОтправителя,
	|	ТаблицаСообщений.ТекстПростой,
	|	ТаблицаСообщений.ТекстHTML
	|ПОМЕСТИТЬ ВТ_ТаблицаСообщений
	|ИЗ
	|	&ТаблицаСообщений КАК ТаблицаСообщений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПоставщиковСрезПоследних.Спецификация,
	|	ЗначенияСвойствОбъектов.Объект
	|ПОМЕСТИТЬ ВТ_СпецификацииПоставщика
	|ИЗ
	|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних КАК СпецификацииПоставщиковСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО СпецификацииПоставщиковСрезПоследних.Поставщик = ЗначенияСвойствОбъектов.Значение
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	СпецификацииПоставщиковСрезПоследних.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаСообщений.ID,
	|	ВТ_ТаблицаСообщений.ШтрихКод,
	|	ВТ_ТаблицаСообщений.АдресОтправителя,
	|	ШтриховыеКоды.Номенклатура,
	|	ШтриховыеКоды.ЕдиницаИзмерения,
	|	ШтриховыеКоды.Характеристика,
	|	ВЫБОР
	|		КОГДА ШтриховыеКоды.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НашелШтрихКод,
	|	""%"" + ВТ_ТаблицаСообщений.АдресОтправителя + ""%"" КАК АдресОтправителяПодобно,
	|	ВТ_СпецификацииПоставщика.Спецификация
	|ПОМЕСТИТЬ ВТ_ТаблицаСоШтрихКодами
	|ИЗ
	|	ВТ_ТаблицаСообщений КАК ВТ_ТаблицаСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпецификацииПоставщика КАК ВТ_СпецификацииПоставщика
	|			ПО ШтриховыеКоды.Характеристика = ВТ_СпецификацииПоставщика.Объект
	|				И ШтриховыеКоды.Номенклатура = ВТ_СпецификацииПоставщика.Спецификация.Владелец
	|		ПО ВТ_ТаблицаСообщений.ШтрихКод = ШтриховыеКоды.ШтрихКод
	|			И (НЕ ШтриховыеКоды.ВыведенИзМагазинов)
	|			И (НЕ ШтриховыеКоды.Номенклатура.Выведена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоШтрихКодами.ID,
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	КонтактнаяИнформация.Объект КАК Контрагент,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура КАК НоменклатураШапка,
	|	ВТ_ТаблицаСоШтрихКодами.Спецификация
	|ПОМЕСТИТЬ ВТ_ТаблицаАдресовКонтрагентов
	|ИЗ
	|	ВТ_ТаблицаСоШтрихКодами КАК ВТ_ТаблицаСоШтрихКодами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВТ_ТаблицаСоШтрихКодами.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""Производитель"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами))
	|			И (КонтактнаяИнформация.Представление ПОДОБНО ВТ_ТаблицаСоШтрихКодами.АдресОтправителяПодобно)
	|			И (КонтактнаяИнформация.Объект = ЗначенияСвойствОбъектов.Значение)
	|ГДЕ
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоШтрихКодами.ID,
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	МАКСИМУМ(ВТ_ТаблицаСоШтрихКодами.Номенклатура) КАК НоменклатураШапка,
	|	ВТ_ТаблицаАдресовКонтрагентов.Контрагент,
	|	ВТ_ТаблицаСоШтрихКодами.Спецификация
	|ПОМЕСТИТЬ ВТ_СводнаяТаблицаБезЭтикетов
	|ИЗ
	|	ВТ_ТаблицаСоШтрихКодами КАК ВТ_ТаблицаСоШтрихКодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаАдресовКонтрагентов КАК ВТ_ТаблицаАдресовКонтрагентов
	|		ПО ВТ_ТаблицаСоШтрихКодами.ШтрихКод = ВТ_ТаблицаАдресовКонтрагентов.ШтрихКод
	|ГДЕ
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаАдресовКонтрагентов.Контрагент,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.ID,
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СводнаяТаблицаБезЭтикетов.ID КАК ID,
	|	ВТ_СводнаяТаблицаБезЭтикетов.ШтрихКод КАК ШтрихКод,
	|	ВТ_СводнаяТаблицаБезЭтикетов.АдресОтправителя КАК АдресОтправителя,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура КАК Номенклатура,
	|	ВТ_СводнаяТаблицаБезЭтикетов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Характеристика КАК Характеристика,
	|	ВТ_СводнаяТаблицаБезЭтикетов.НашелШтрихКод КАК НашелШтрихКод,
	|	ВТ_СводнаяТаблицаБезЭтикетов.Контрагент КАК Контрагент,
	|	ВЫРАЗИТЬ(НоменклатураЭтикетки.ИмяФайла КАК СТРОКА(1000)) КАК ИмяФайла,
	|	НоменклатураЭтикетки.Характеристика КАК ХарактеристикаЭтикетки,
	|	ВТ_СводнаяТаблицаБезЭтикетов.НоменклатураШапка КАК НоменклатураШапка,
	|	ВЫБОР
	|		КОГДА СпецификацииПоставщиков.НоменклатураСырье ЕСТЬ NULL 
	|				ИЛИ СпецификацииПоставщиков.НоменклатураСырье = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА СпецификацииСостав.Номенклатура
	|		ИНАЧЕ СпецификацииПоставщиков.НоменклатураСырье
	|	КОНЕЦ КАК Этикетка
	|ПОМЕСТИТЬ ВТ_ИтогБезТекстов
	|ИЗ
	|	ВТ_СводнаяТаблицаБезЭтикетов КАК ВТ_СводнаяТаблицаБезЭтикетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура = СпецификацииСостав.Ссылка.Владелец
	|			И ВТ_СводнаяТаблицаБезЭтикетов.Спецификация = СпецификацииСостав.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Этикетки КАК НоменклатураЭтикетки
	|		ПО ВТ_СводнаяТаблицаБезЭтикетов.Характеристика = НоменклатураЭтикетки.Характеристика
	|			И ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура = НоменклатураЭтикетки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, ) КАК СпецификацииПоставщиков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(СпецификацииПоставщиковСрезПоследних.Период) КАК Период,
	|				СпецификацииПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	|				СпецификацииПоставщиковСрезПоследних.Характеристика КАК Характеристика
	|			ИЗ
	|				РегистрСведений.СпецификацииПоставщиков.СрезПоследних КАК СпецификацииПоставщиковСрезПоследних
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СпецификацииПоставщиковСрезПоследних.Номенклатура,
	|				СпецификацииПоставщиковСрезПоследних.Характеристика) КАК ВложенныйЗапрос
	|			ПО СпецификацииПоставщиков.Номенклатура = ВложенныйЗапрос.Номенклатура
	|				И СпецификацииПоставщиков.Характеристика = ВложенныйЗапрос.Характеристика
	|				И СпецификацииПоставщиков.Период = ВложенныйЗапрос.Период
	|		ПО ВТ_СводнаяТаблицаБезЭтикетов.Характеристика = СпецификацииПоставщиков.Характеристика
	|			И ВТ_СводнаяТаблицаБезЭтикетов.Номенклатура = СпецификацииПоставщиков.Номенклатура
	|			И (СпецификацииПоставщиков.ДатаКонца > НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	|				ИЛИ СпецификацииПоставщиков.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоШтрихКодами.ID,
	|	ВТ_ТаблицаСоШтрихКодами.ШтрихКод,
	|	ВТ_ТаблицаСоШтрихКодами.АдресОтправителя,
	|	ВТ_ТаблицаСоШтрихКодами.Номенклатура,
	|	ВТ_ТаблицаСоШтрихКодами.ЕдиницаИзмерения,
	|	ВТ_ТаблицаСоШтрихКодами.Характеристика,
	|	ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод,
	|	ВТ_ТаблицаСообщений.ТекстПростой,
	|	ВТ_ТаблицаСообщений.ТекстHTML
	|ИЗ
	|	ВТ_ТаблицаСоШтрихКодами КАК ВТ_ТаблицаСоШтрихКодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСообщений КАК ВТ_ТаблицаСообщений
	|		ПО ВТ_ТаблицаСоШтрихКодами.ШтрихКод = ВТ_ТаблицаСообщений.ШтрихКод
	|			И ВТ_ТаблицаСоШтрихКодами.АдресОтправителя = ВТ_ТаблицаСообщений.АдресОтправителя
	|ГДЕ
	|	НЕ ВТ_ТаблицаСоШтрихКодами.НашелШтрихКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ИтогБезТекстов.ID КАК ID,
	|	ВТ_ИтогБезТекстов.ШтрихКод КАК ШтрихКод,
	|	ВТ_ИтогБезТекстов.АдресОтправителя КАК АдресОтправителя,
	|	ВТ_ИтогБезТекстов.Номенклатура,
	|	ВТ_ИтогБезТекстов.ЕдиницаИзмерения,
	|	ВТ_ИтогБезТекстов.Характеристика КАК Характеристика,
	|	ВТ_ИтогБезТекстов.НашелШтрихКод,
	|	ЕСТЬNULL(ВТ_ИтогБезТекстов.Контрагент, ЗначенияСвойствОбъектов.Значение) КАК Контрагент,
	|	ВТ_ИтогБезТекстов.ИмяФайла,
	|	ВТ_ИтогБезТекстов.ХарактеристикаЭтикетки,
	|	ВТ_ИтогБезТекстов.НоменклатураШапка КАК НоменклатураШапка,
	|	ВЫРАЗИТЬ(ВТ_ТаблицаСообщений.ТекстПростой КАК СТРОКА(1000)) КАК ТекстПростой,
	|	ВЫРАЗИТЬ(ВТ_ТаблицаСообщений.ТекстHTML КАК СТРОКА(1000)) КАК ТекстHTML,
	|	ВТ_ИтогБезТекстов.Этикетка
	|ИЗ
	|	ВТ_ИтогБезТекстов КАК ВТ_ИтогБезТекстов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСообщений КАК ВТ_ТаблицаСообщений
	|		ПО ВТ_ИтогБезТекстов.ШтрихКод = ВТ_ТаблицаСообщений.ШтрихКод
	|			И ВТ_ИтогБезТекстов.АдресОтправителя = ВТ_ТаблицаСообщений.АдресОтправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВТ_ИтогБезТекстов.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""Производитель"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаПечатьЭтикетки КАК ЗаявкаНаПечатьЭтикетки
	|		ПО ВТ_ИтогБезТекстов.ID = ЗаявкаНаПечатьЭтикетки.ИдентификаторПочтовогоСообщения
	|			И (ЗаявкаНаПечатьЭтикетки.Проведен)
	|ГДЕ
	|	ЗаявкаНаПечатьЭтикетки.Ссылка ЕСТЬ NULL 
	|ИТОГИ
	|	МАКСИМУМ(ID),
	|	МАКСИМУМ(АдресОтправителя),
	|	МАКСИМУМ(Характеристика),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(НоменклатураШапка),
	|	МАКСИМУМ(ТекстПростой),
	|	МАКСИМУМ(ТекстHTML)
	|ПО
	|	ШтрихКод";
	
	
	//				
	Выборка = Запрос.ВыполнитьПакет();
	
	//
	ТаблицаОтказ = Выборка[6].Выгрузить();
	Для Каждого ОтказШтрих Из ТаблицаОтказ Цикл
		
		//
		ОтправитьПисьмо(Почта, ОтказШтрих.АдресОтправителя, ОтказШтрих.ТекстПростой, ОтказШтрих.ТекстHTML, ОтказШтрих.ШтрихКод, УчетнаяЗапись, "Заявка на упаковку не принята");
		
		//
		МассивСообщенийКУдалению = Новый Массив;
		МассивСообщенийКУдалению.Добавить(ОтказШтрих.ID);
		
		//
		Почта.УдалитьСообщения(МассивСообщенийКУдалению);
		
	КонецЦикла;
	
	//
	ВыборкаЗаявок = Выборка[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявок.Следующий() Цикл
		
		//
		Характеристика = ВыборкаЗаявок.Характеристика;	
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
		
		//
		Запрос.Текст = "ВЫБРАТЬ
		|	Таблица.Характеристика,
		|	Таблица.Поставщик
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних КАК Таблица
		|ГДЕ
		|	Таблица.Характеристика = &Характеристика";
		
		//
		Поставщик = Неопределено;
		
		//					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Поставщик = Выборка.Поставщик;		
		КонецЦикла;
		
		//
		Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
			Поставщик = ВыборкаЗаявок.Контрагент;
		КонецЕсли; 
		
		//
		Если ЗначениеЗаполнено(Поставщик) И Поставщик.ПризнакНеПриниматьЗаявкиНаУпаковку Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		ТекстПростой = ВыборкаЗаявок.ТекстПростой;
		Пока Найти(ТекстПростой, Символ(1)) Цикл
			ТекстПростой = СтрЗаменить(ТекстПростой,Символ(1),"");	
		КонецЦикла;
		
		//
		ТекстHTML = ВыборкаЗаявок.ТекстHTML;
		Пока Найти(ТекстHTML, Символ(1)) Цикл
			ТекстHTML = СтрЗаменить(ТекстHTML,Символ(1),"");	
		КонецЦикла;
		
		//
		ЗаявкаОбъект = Документы.ЗаявкаНаПечатьЭтикетки.СоздатьДокумент();
		
		//
		ЗаявкаОбъект.ИдентификаторПочтовогоСообщения = ВыборкаЗаявок.ID; 
		
		ЗаявкаОбъект.Дата 				= ТекущаяДата();
		
		ЗаявкаОбъект.ТекстПисьмаHTML 	= ТекстHTML;
		ЗаявкаОбъект.ТекстПисьмаПростой = ТекстПростой; 
		ЗаявкаОбъект.АдресОтправителя 	= ВыборкаЗаявок.АдресОтправителя; 
		ЗаявкаОбъект.Поставщик			= Поставщик;
		ЗаявкаОбъект.СтатусЗаявки 		= Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано;
		ЗаявкаОбъект.Тема 				= ВыборкаЗаявок.ШтрихКод;
		
		//
		ЗаявкаОбъект.Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", 727);//Склад_Упаковки_Котляково
		
		//
		ВыборкаСтрокЭтикеток = ВыборкаЗаявок.Выбрать();
		Пока ВыборкаСтрокЭтикеток.Следующий() Цикл
			
			//
			НоваяСтрока = ЗаявкаОбъект.Этикетки.Добавить();
			НоваяСтрока.Товар 			= ВыборкаСтрокЭтикеток.Номенклатура;
			НоваяСтрока.Характеристика 	= ВыборкаСтрокЭтикеток.Характеристика;
			НоваяСтрока.ИмяФайла 		= ВыборкаСтрокЭтикеток.ИмяФайла;
			НоваяСтрока.Этикетка 		= ВыборкаСтрокЭтикеток.Этикетка;
			
		КонецЦикла;
		
		//
		ЗаявкаОбъект.ЗаполнитьОстаткиНаСкладеПоставщика();
		
		//
		Попытка
			
			//
			ЗаявкаОбъект.Записать();
			
			//
			МассивСообщенийКУдалению = Новый Массив;
			МассивСообщенийКУдалению.Добавить(ВыборкаЗаявок.ID);
			
			//
			Почта.УдалитьСообщения(МассивСообщенийКУдалению);
			
		Исключение
		КонецПопытки;	
		
		//
		ТекстПисьма = "Принята заявка №" + ЗаявкаОбъект.Номер + " на этикетку к товару " + ВыборкаЗаявок.НоменклатураШапка + Символы.ПС + Символы.ПС +
		"Re:" + Символы.ПС + ВыборкаЗаявок.ТекстПростой;
		
		//				
		ОтправитьПисьмо(Почта, ЗаявкаОбъект.АдресОтправителя, ЗаявкаОбъект.ТекстПисьмаПростой, ВыборкаЗаявок.ТекстHTML, ВыборкаЗаявок.ШтрихКод, УчетнаяЗапись, ТекстПисьма);
		Если ЗначениеЗаполнено(Справочники.УчетныеЗаписиЭлектроннойПочты.ОтветсвенныйЗаЗаявки.Логин) Тогда
			ОтправитьПисьмо(Почта, Справочники.УчетныеЗаписиЭлектроннойПочты.ОтветсвенныйЗаЗаявки.Логин, ЗаявкаОбъект.ТекстПисьмаПростой, ВыборкаЗаявок.ТекстHTML, ВыборкаЗаявок.ШтрихКод, УчетнаяЗапись, ТекстПисьма);	
		КонецЕсли;
		
	КонецЦикла;
	
	//
	Почта.Отключиться();
	
	//Заодно проверим на наличие заявок, по которым не забирают Этикетки и отменим Их
	ВыполнитьОтменуУстаревшихЗаявокНаПроизводствоУпаковки();
	
КонецПроцедуры

//
//
Процедура ЗаполнитьТексты(стр, Сообщение)
	
	Для Каждого ТекстСообщения из Сообщение.Тексты Цикл
		Если ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			стр.ТекстПростой = ТекстСообщения.Текст;
		ИначеЕсли ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			стр.ТекстHTML = ТекстСообщения.Текст;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура ОтправитьПисьмо(Почта, АдресОтправителя, ТекстПростой, ТекстHTML, ШтрихКод, УчетнаяЗапись, ТекстПисьма)
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Re: " + ШтрихКод;
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = АдресОтправителя;
	
	ТекстПиьсма = Письмо.Тексты.Добавить();
	ТекстПиьсма.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
	ТекстПиьсма.Текст 		= ТекстПисьма;
	
	Почта.Послать(Письмо);
	
КонецПроцедуры

//---AK

Процедура АрхивированиеКартинок() Экспорт
	
	КаталогФотографийРакурсов = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	
	Если Прав(КаталогФотографийРакурсов, 1) <> "\" Тогда
		КаталогФотографийРакурсов = КаталогФотографийРакурсов + "\";
	КонецЕсли;
	
	КаталогКартинок = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКартинок, 1) <> "\" Тогда
		КаталогКартинок = КаталогКартинок + "\";
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата() - 45*86400);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МП_ЗадачаМагазина.Ссылка КАК Ссылка,
	|	МП_ФотографииКЗадачам.ОтносительноеИмяФайла
	|ИЗ
	|	Документ.МП_ЗадачаМагазина КАК МП_ЗадачаМагазина
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	|		ПО МП_ЗадачаМагазина.Ссылка = МП_ФотографииКЗадачам.Задача
	|ГДЕ
	|	МП_ЗадачаМагазина.Дата <= &ДатаНач
	|	И МП_ЗадачаМагазина.ВАрхиве = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
				УдалитьФайлы(КаталогФотографийРакурсов + Выборка.ОтносительноеИмяФайла);
			КонецЕсли;	
		КонецЦикла;
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ВАрхиве = Истина;
		ДокОбъект.Записать();
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата() - 45*86400);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭкзаменыПродавцовВидеоЗаписи.Ссылка КАК Ссылка,
	|	ЭкзаменыПродавцовВидеоЗаписи.ПутьКФайлуВидео
	|ИЗ
	|	Документ.ЭкзаменыПродавцов.ВидеоЗаписи КАК ЭкзаменыПродавцовВидеоЗаписи
	|ГДЕ
	|	ЭкзаменыПродавцовВидеоЗаписи.Ссылка.ВАрхиве = ЛОЖЬ
	|	И ЭкзаменыПродавцовВидеоЗаписи.Ссылка.Дата <= &ДатаНач
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ПутьКФайлуВидео) Тогда
				УдалитьФайлы(Выборка.ПутьКФайлуВидео);
			КонецЕсли;	
		КонецЦикла;
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ВАрхиве = Истина;
		ДокОбъект.Записать();
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДобавления", ТекущаяДата() - 45*86400);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрикрепленныеФотоКОбъектам.Номенклатура,
	|	ПрикрепленныеФотоКОбъектам.Характеристика,
	|	ПрикрепленныеФотоКОбъектам.Объект,
	|	ПрикрепленныеФотоКОбъектам.ТипЗаписи,
	|	ПрикрепленныеФотоКОбъектам.УинЗаписи,
	|	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
	|ГДЕ
	|	ПрикрепленныеФотоКОбъектам.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПриложенныхКартинок.СписаниеНаМагазине)
	|	И НЕ ПрикрепленныеФотоКОбъектам.ТипОперацииМагазина В (201, 103)
	|	И НЕ ПрикрепленныеФотоКОбъектам.ВАрхиве
	|	И ПрикрепленныеФотоКОбъектам.ДатаДобавления <= &ДатаДобавления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегФото = РегистрыСведений.ПрикрепленныеФотоКОбъектам;
	Пока Выборка.Следующий() Цикл
		Набор = РегФото.СоздатьНаборЗаписей();
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		Набор.Отбор.ТипЗаписи.Установить(Выборка.ТипЗаписи);
		Набор.Отбор.УинЗаписи.Установить(Выборка.УинЗаписи);
		Набор.Прочитать();
		УдалитьФайлы(КаталогКартинок + Выборка.ОтносительноеИмяФайла);
		Для Каждого Запись Из Набор Цикл
			Запись.ВАрхиве = Истина;
		КонецЦикла;	
		Набор.Записать();
	КонецЦикла;	
	
КонецПроцедуры

//+++АК LATV 2018.09.26 ИП-00019899
Процедура РассылкаОНеобходимостиПредоставитьОтчетОВыручкеАрендодателю() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительноеСоглашение.ДоговорКонтрагента,
		|	ДополнительноеСоглашение.Ссылка,
		|	ДополнительноеСоглашение.Контрагент,
		|	ДополнительноеСоглашение.ПериодичностьПредоставленияОтчетаОВыручке
		|ПОМЕСТИТЬ ВТ_ДопСоглашения
		|ИЗ
		|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
		|ГДЕ
		|	ДополнительноеСоглашение.ДатаЗаключенияДоговора <= &Дата
		|	И КОНЕЦПЕРИОДА(ДополнительноеСоглашение.ДатаОкончанияДоговора, ДЕНЬ) >= &Дата
		|	И ДополнительноеСоглашение.Проведен = ИСТИНА
		|	И НЕ ДополнительноеСоглашение.ДоговорКонтрагента В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					РасторжениеДоговораАренды.ДоговорКонтрагента
		|				ИЗ
		|					Документ.РасторжениеДоговораАренды КАК РасторжениеДоговораАренды
		|				ГДЕ
		|					РасторжениеДоговораАренды.Проведен = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаключениеДоговораАренды.ДоговорКонтрагента,
		|	ЗаключениеДоговораАренды.Ссылка,
		|	ЗаключениеДоговораАренды.Контрагент,
		|	ЗаключениеДоговораАренды.ПериодичностьПредоставленияОтчетаОВыручке
		|ИЗ
		|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
		|ГДЕ
		|	ЗаключениеДоговораАренды.ДатаЗаключенияДоговора <= &Дата
		|	И КОНЕЦПЕРИОДА(ЗаключениеДоговораАренды.ДатаОкончанияДоговора, ДЕНЬ) >= &Дата
		|	И ЗаключениеДоговораАренды.Проведен = ИСТИНА
		|	И НЕ ЗаключениеДоговораАренды.ДоговорКонтрагента В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					РасторжениеДоговораАренды.ДоговорКонтрагента
		|				ИЗ
		|					Документ.РасторжениеДоговораАренды КАК РасторжениеДоговораАренды
		|				ГДЕ
		|					РасторжениеДоговораАренды.Проведен = ИСТИНА)
		|	И НЕ ЗаключениеДоговораАренды.ДоговорКонтрагента В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВТ_ДопСоглашения.ДоговорКонтрагента
		|				ИЗ
		|					ВТ_ДопСоглашения КАК ВТ_ДопСоглашения)
		|	И ЗаключениеДоговораАренды.ПериодичностьПредоставленияОтчетаОВыручке <> ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительноеСоглашение.ДоговорКонтрагента,
		|	ДополнительноеСоглашение.Ссылка,
		|	ДополнительноеСоглашение.Контрагент,
		|	ДополнительноеСоглашение.ПериодичностьПредоставленияОтчетаОВыручке
		|ИЗ
		|	ВТ_ДопСоглашения КАК ДополнительноеСоглашение
		|ГДЕ
		|	ДополнительноеСоглашение.ПериодичностьПредоставленияОтчетаОВыручке <> ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Контрагент");
	ТабДанные.Колонки.Добавить("Документ");
	ТабДанные.Колонки.Добавить("Договор");
	ТабДанные.Колонки.Добавить("ДатаУведомления");
	ТабДанные.Колонки.Добавить("Периодичность");
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТабДанные.Добавить();
		СтрокаДоб.Контрагент 	= Выборка.Контрагент;
		СтрокаДоб.Документ 		= Выборка.Ссылка;
		СтрокаДоб.Договор 		= Выборка.ДоговорКонтрагента;
		СтрокаДоб.Периодичность = Выборка.ПериодичностьПредоставленияОтчетаОВыручке;
		Если СтрокаДоб.Периодичность = Перечисления.Периодичность.Месяц Тогда
			СтрокаДоб.ДатаУведомления = НачалоДня(КонецМесяца(ТекущаяДата()));
		ИначеЕсли СтрокаДоб.Периодичность = Перечисления.Периодичность.Квартал Тогда
			СтрокаДоб.ДатаУведомления = НачалоДня(КонецКвартала(ТекущаяДата()));
		ИначеЕсли СтрокаДоб.Периодичность = Перечисления.Периодичность.Год Тогда
			СтрокаДоб.ДатаУведомления = НачалоДня(КонецГода(ТекущаяДата()));	
		КонецЕсли;
	КонецЦикла;
	
	КолвоСтрок = ТабДанные.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если НЕ ЗначениеЗаполнено(ТабДанные[КолвоСтрок - н].ДатаУведомления)
			ИЛИ ТабДанные[КолвоСтрок - н].ДатаУведомления > ТекущаяДата() Тогда
			ТабДанные.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;
	
	Если ТабДанные.Количество() > 0 Тогда
		
		ТабДанные.Сортировать("Контрагент");
		
		Макет = Справочники.ПериодическиеЗадания.ПолучитьМакет("РассылкеОНеобходимостиПредоставитьОтчетОВыручке");
		ТабДок = Новый ТабличныйДокумент();
		Область = Макет.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(Область);
		Для Каждого СтрокаТаб Из ТабДанные Цикл
			Область = Макет.ПолучитьОбласть("Строка");
			ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаТаб);
			ТабДок.Вывести(Область);
		КонецЦикла;
		
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Почта.Подключиться(Профиль);
		Письмо.Тема = "Нужно предоставить отчет о выручке арендодателям";
		Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = "zamgb@vkusvill.ru"; // Леуткина
		Получатель.ОтображаемоеИмя = "zamgb@vkusvill.ru";
		//+++АК bara 09.11.2017 16984
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = "buh19@vkusvill.ru";
		Получатель.ОтображаемоеИмя = "buh19@vkusvill.ru";
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = "isag@automacon.ru";
		Получатель.ОтображаемоеИмя = "isag@automacon.ru";
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = "buh49@vkusvill.ru";
		Получатель.ОтображаемоеИмя = "buh49@vkusvill.ru";
		//---АК bara 
		
		ВремФайл = ПолучитьИмяВременногоФайла("htm");
		ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
		
		ТекстДокумент = Новый ТекстовыйДокумент();
		ТекстДокумент.Прочитать(ВремФайл);
		
		Текст = ТекстДокумент.ПолучитьТекст();
		НачалоБлокаСтиль = Найти(Текст, "<STYLE");
		КонецБлокаСтиль = Найти(Текст, "</STYLE");
		ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
		НачалоБлокаТело = Найти(Текст, "<BODY");
		КонецБлокаТело = Найти(Текст, "</BODY");
		ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
		
		ТекстПолный = "<HTML>" + Символы.ПС + ТекстСтиль + Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
		ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; border = 5");
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = ТекстПолный;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
		//Письмо.Вложения.Добавить(ВремКаталог+"Отчет.xlsx","Отчет.xlsx");
		ТекстДокумент = Неопределено;
		УдалитьФайлы(ВремФайл);
		Почта.Послать(Письмо);
		Почта.Отключиться();
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьНеобходимостьПечатиЦенников(Знач Магазины = Неопределено, Знач Товары = Неопределено, РасчитатьНаДату = Неопределено) Экспорт
	
	//+++АК MIND 2017.11.23 процедура доработана под учетом ценников с рейтингами
	
	Если ТипЗнч(Магазины) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ВремМагазины = Магазины;
		Магазины = Новый Массив();
		Магазины.Добавить(ВремМагазины);
	КонецЕсли;
	
	Если ТипЗнч(Товары) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВремТовар = Товары;
		Товары = Новый Массив();
		Товары.Добавить(ВремТовар);
	КонецЕсли;
	
	
	ЗапросМагазины = Новый Запрос();
	ЗапросМагазины.УстановитьПараметр("ТекДата"				, ?(РасчитатьНаДату = Неопределено, КонецДня(ТекущаяДата()), КонецДня(РасчитатьНаДату)));
	ЗапросМагазины.УстановитьПараметр("Магазины"			, ?(ТипЗнч(Магазины) = Тип("Массив"), Магазины, Новый Массив()));
	ЗапросМагазины.УстановитьПараметр("ЕстьОтборПоМагазинам", ?(ТипЗнч(Магазины) = Тип("Массив") И Магазины.Количество() > 0, Истина, Ложь));
	ЗапросМагазины.Текст = "ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|	И (СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СтруктурныеЕдиницы.ДатаЗакрытия > &ТекДата)
	|	И (СтруктурныеЕдиницы.Ссылка В (&Магазины)
	|			ИЛИ &ЕстьОтборПоМагазинам = ЛОЖЬ)";
	
	Результат = ЗапросМагазины.Выполнить(); 
	ВыборкаМагазины = Результат.Выбрать();
	МВТ = Новый МенеджерВременныхТаблиц;
	ЗапросВрТаб = Новый Запрос;
	ЗапросВрТаб.УстановитьПараметр("ДатаНач"	, ДобавитьМесяц(ТекущаяДата(), -2));
	ЗапросВрТаб.УстановитьПараметр("ТекДата"	, ?(РасчитатьНаДату = Неопределено, КонецДня(ТекущаяДата()), КонецДня(РасчитатьНаДату)));
	ЗапросВрТаб.УстановитьПараметр("Магазины"	, Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ЗапросВрТаб.УстановитьПараметр("Товары"		, ?(ТипЗнч(Товары) = Тип("Массив"), Товары, Новый Массив()));
	ЗапросВрТаб.УстановитьПараметр("ЕстьОтборПоТоварам"	, ?(ТипЗнч(Товары) = Тип("Массив") И Товары.Количество() > 0, Истина, Ложь));

	ЗапросВрТаб.МенеджерВременныхТаблиц = МВТ;
	ЗапросВрТаб.Текст =
	"ВЫБРАТЬ
	|	ВЗ_Макс.Получатель КАК Получатель,
	|	ЕСТЬNULL(ВЗ_Комплекты.СоставляющаяВладелец, ВЗ_Макс.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ВЗ_Комплекты.Составляющая, РасходныйОрдерСкладТовары.Характеристика)) КАК Характеристика
	|ПОМЕСТИТЬ ВТ_РАСХОДНИКИ
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РасходныйОрдерСкладТовары.Ссылка.Дата) КАК Дата,
	|			РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Получатель,
	|			РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|		ИЗ
	|			Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ГДЕ
	|			РасходныйОрдерСкладТовары.Ссылка.Дата >= &ДатаНач
	|			И РасходныйОрдерСкладТовары.Ссылка.Получатель В(&Магазины)
	|			И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|			И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|			И (РасходныйОрдерСкладТовары.Номенклатура В (&Товары)
	|					ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасходныйОрдерСкладТовары.Ссылка.Получатель,
	|			РасходныйОрдерСкладТовары.Номенклатура) КАК ВЗ_Макс
	|		ПО РасходныйОрдерСкладТовары.Ссылка.Дата = ВЗ_Макс.Дата
	|			И РасходныйОрдерСкладТовары.Ссылка.Получатель = ВЗ_Макс.Получатель
	|			И РасходныйОрдерСкладТовары.Номенклатура = ВЗ_Макс.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СоставКомплектаСрезПоследних.Характеристика КАК Характеристика,
	|			СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
	|			СоставКомплектаСрезПоследних.Составляющая КАК Составляющая
	|		ИЗ
	|			РегистрСведений.СоставКомплекта.СрезПоследних(&ТекДата, ) КАК СоставКомплектаСрезПоследних
	|		ГДЕ
	|			СоставКомплектаСрезПоследних.Количество <> 0) КАК ВЗ_Комплекты
	|		ПО РасходныйОрдерСкладТовары.Характеристика = ВЗ_Комплекты.Характеристика
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка.Дата >= &ДатаНач
	|	И РасходныйОрдерСкладТовары.Ссылка.Получатель В(&Магазины)
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И (РасходныйОрдерСкладТовары.Номенклатура В (&Товары)
	|			ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Макс.Получатель,
	|	ЕСТЬNULL(ВЗ_Комплекты.СоставляющаяВладелец, ВЗ_Макс.Номенклатура)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Получатель,
	|	Номенклатура";
	ЗапросВрТаб.Выполнить();
	//+++АК MIND 2017.12.17 цикл специально, потому что он отрабатывает слудющий запрос быстрее
	Пока ВыборкаМагазины.Следующий() Цикл
		
		//+++АК MIND 2017.11.23 тестовый запуск рейтингов пока только на магазине 1303, прописываю прям в запросе этот принцип
		//+++АК MIND 2017.12.04 рейтинги внедряем на полную, берем ночные магазины для ценников с рейтингами
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач"				, ДобавитьМесяц(ТекущаяДата(), -2));
		Запрос.УстановитьПараметр("ТекДата"				, ?(РасчитатьНаДату = Неопределено, КонецДня(ТекущаяДата()), КонецДня(РасчитатьНаДату)));
		Запрос.УстановитьПараметр("Магазин"			, ВыборкаМагазины.Ссылка);
		Запрос.УстановитьПараметр("Товары"				, ?(ТипЗнч(Товары) = Тип("Массив"), Товары, Новый Массив()));
		Запрос.УстановитьПараметр("ЕстьОтборПоТоварам"	, ?(ТипЗнч(Товары) = Тип("Массив") И Товары.Количество() > 0, Истина, Ложь));
		Запрос.УстановитьПараметр("УпаковкаДляЦенника"	, ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("УпаковкаДляЦенника"));
		запрос.МенеджерВременныхТаблиц = МВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЗ_Запрос.ТорговаяТочка,
		|	ВЗ_Запрос.Номенклатура,
		|	ВЗ_Запрос.Характеристика,
		|	ВЗ_Запрос.Цена,
		|	ВЗ_Запрос.Наименование,
		|	ВЗ_Запрос.Фишка,
		|	ВЗ_Запрос.ДатаДобавления КАК ДатаДобавления,
		|	ВЫБОР
		|		КОГДА ВЗ_Запрос.Характеристика.СрокГодности_ПослеИзготовления > 0
		|			ТОГДА ВЗ_Запрос.Характеристика.СрокГодности_ПослеИзготовления
		|		ИНАЧЕ ВЗ_Запрос.Характеристика.СрокГодности
		|	КОНЕЦ КАК СрокГодности,
		|	ВЫБОР
		|		КОГДА ВЗ_Запрос.Характеристика.СрокГодности_ПослеИзготовления > 0
		|			ТОГДА ВЗ_Запрос.Характеристика.ТипСрокаГодности_ПослеИзготовления.ПараметрыПрописиНаРусском
		|		ИНАЧЕ ВЗ_Запрос.Характеристика.ТипСрокаГодности.ПараметрыПрописиНаРусском
		|	КОНЕЦ КАК ПараметрыПрописиНаРусском,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов_Страна.Значение, """") КАК СтранаПроисхождения,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов_Упаковка.Значение, """") КАК ВесОбъем,
		|	ВЗ_Запрос.БылаПричина,
		|	ВЫБОР
		|		КОГДА ВЗ_Запрос.Характеристика.СрокГодности_ПослеИзготовления > 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЗ_Запрос.Характеристика.СрокГодностиНеограничен
		|	КОНЕЦ КАК СрокНеограничен,
		|	ЕСТЬNULL(РейтингиТоваровОбщие.Рейтинг, 0) КАК Рейтинг,
		|	ЕСТЬNULL(РейтингиТоваровОбщие.Комментарий, """") КАК КомментарийРейтинга,
		|	ВЗ_Запрос.Номенклатура.Родитель.НеПересчитыватьЦенникПоРейтингу КАК НеПересчитыватьЦенникПоРейтингу,
		|	ЕСТЬNULL(ВЗ_Фишка1.Фишка, ЗНАЧЕНИЕ(Справочник.ФишкиКратко.ПустаяСсылка)) КАК ФишкаКратко1,
		|	ЕСТЬNULL(ВЗ_Фишка2.Фишка, ЗНАЧЕНИЕ(Справочник.ФишкиКратко.ПустаяСсылка)) КАК ФишкаКратко2
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
		|		ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
		|		ЕСТЬNULL(ЦенникиКПечатиВМагазинах.ДатаДобавления, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДобавления,
		|		ЕСТЬNULL(ВЗ_Приходники.Характеристика, ТоварныйАссортиментТочекСрезПоследних.Характеристика) КАК Характеристика,
		|		ЕСТЬNULL(ВЗ_Цены.Цена, 0) КАК Цена,
		|		ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Наименование КАК Наименование,
		|		ВЫБОР
		|			КОГДА &ТекДата МЕЖДУ ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ДатаНачалаВыводаНаСинийЦенник И ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ДатаОкончанияВыводаНаСинийЦенник
		|				ТОГДА ТоварныйАссортиментТочекСрезПоследних.Номенклатура.ТекстВместоФишки
		|			ИНАЧЕ ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Фишка
		|		КОНЕЦ КАК Фишка,
		|		ЕСТЬNULL(ЦенникиКПечатиВМагазинах.ОписаниеПричиныПечати, """") КАК БылаПричина
		|	ИЗ
		|		РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|				&ТекДата,
		|				ТорговаяТочка = &Магазин
		|					И (Номенклатура В (&Товары)
		|						ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
		|					И Номенклатура.ЭтоКомплект = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенникиКПечатиВМагазинах КАК ЦенникиКПечатиВМагазинах
		|			ПО ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ЦенникиКПечатиВМагазинах.Магазин
		|				И ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ЦенникиКПечатиВМагазинах.Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|				ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|			ИЗ
		|				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|						&ТекДата,
		|						(Номенклатура В (&Товары)
		|							ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
		|							И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|							И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВЗ_Цены
		|			ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВЗ_Цены.Номенклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РАСХОДНИКИ КАК ВЗ_Приходники
		|			ПО ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ВЗ_Приходники.Получатель
		|				И ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВЗ_Приходники.Номенклатура
		|	ГДЕ
		|		ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
		|		И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
		|		И (ЦенникиКПечатиВМагазинах.Магазин ЕСТЬ NULL
		|				ИЛИ ЦенникиКПечатиВМагазинах.ДатаДобавления < ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1))
		|		И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.Активное = ИСТИНА) КАК ВЗ_Запрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов_Страна
		|		ПО ВЗ_Запрос.Характеристика = ЗначенияСвойствОбъектов_Страна.Объект
		|			И (ЗначенияСвойствОбъектов_Страна.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов_Упаковка
		|		ПО ВЗ_Запрос.Характеристика = ЗначенияСвойствОбъектов_Упаковка.Объект
		|			И (ЗначенияСвойствОбъектов_Упаковка.Свойство = &УпаковкаДляЦенника)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВЗ_Запрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыСРейтингом КАК РейтингиТоваровОбщие
		|		ПО ВЗ_Запрос.Номенклатура = РейтингиТоваровОбщие.Номенклатура
		|			И (РейтингиТоваровОбщие.Период = НАЧАЛОПЕРИОДА(&ТекДата, МЕСЯЦ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НоменклатураФишкиНаЦенник.Ссылка КАК Ссылка,
		|			НоменклатураФишкиНаЦенник.Фишка.Наименование КАК ФишкаНаименование,
		|			НоменклатураФишкиНаЦенник.Фишка.Пиктограмма КАК ФишкаПиктограмма,
		|			НоменклатураФишкиНаЦенник.Фишка КАК Фишка
		|		ИЗ
		|			Справочник.Номенклатура.ФишкиНаЦенник КАК НоменклатураФишкиНаЦенник
		|		ГДЕ
		|			НоменклатураФишкиНаЦенник.НомерСтроки = 1) КАК ВЗ_Фишка1
		|		ПО ВЗ_Запрос.Номенклатура = ВЗ_Фишка1.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НоменклатураФишкиНаЦенник.Ссылка КАК Ссылка,
		|			НоменклатураФишкиНаЦенник.Фишка.Наименование КАК ФишкаНаименование,
		|			НоменклатураФишкиНаЦенник.Фишка.Пиктограмма КАК ФишкаПиктограмма,
		|			НоменклатураФишкиНаЦенник.Фишка КАК Фишка
		|		ИЗ
		|			Справочник.Номенклатура.ФишкиНаЦенник КАК НоменклатураФишкиНаЦенник
		|		ГДЕ
		|			НоменклатураФишкиНаЦенник.НомерСтроки = 2) КАК ВЗ_Фишка2
		|		ПО ВЗ_Запрос.Номенклатура = ВЗ_Фишка2.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) <> 0
		|	И ВЗ_Запрос.Номенклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЗ_Запрос.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураАкции.Ссылка КАК Номенклатура,
		|	НоменклатураАкции.ТипСкидки КАК ТипСкидки,
		|	МАКСИМУМ(НоменклатураАкции.ДействуетЦена_Скидка) КАК ДействуетЦена_Скидка,
		|	МАКСИМУМ(НоменклатураАкции.НазваниеАкции) КАК НазваниеАкции,
		|	МАКСИМУМ(НоменклатураАкции.КомментарийНаЦенник) КАК КомментарийНаЦенник,
		|	НоменклатураАкции.ДействуетВМагазине
		|ИЗ
		|	Справочник.Номенклатура.Акции КАК НоменклатураАкции
		|ГДЕ
		|	НоменклатураАкции.ДатаНачала <= &ТекДата
		|	И КОНЕЦПЕРИОДА(НоменклатураАкции.ДатаОкончания, ДЕНЬ) >= &ТекДата
		|	И (НоменклатураАкции.Ссылка В (&Товары)
		|			ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураАкции.Ссылка,
		|	НоменклатураАкции.ТипСкидки,
		|	НоменклатураАкции.ДействуетВМагазине
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспечатанныеЦенникиМагазинов.Номенклатура,
		|	РаспечатанныеЦенникиМагазинов.Магазин,
		|	РаспечатанныеЦенникиМагазинов.Цена,
		|	РаспечатанныеЦенникиМагазинов.Страна,
		|	РаспечатанныеЦенникиМагазинов.СрокГодности,
		|	РаспечатанныеЦенникиМагазинов.Фишка,
		|	РаспечатанныеЦенникиМагазинов.ЦенаПоАкции,
		|	РаспечатанныеЦенникиМагазинов.НазваниеАкции,
		|	РаспечатанныеЦенникиМагазинов.КомментарийАкции,
		|	РаспечатанныеЦенникиМагазинов.НаименованиеТовара,
		|	РаспечатанныеЦенникиМагазинов.Вес,
		|	РаспечатанныеЦенникиМагазинов.Рейтинг,
		|	РаспечатанныеЦенникиМагазинов.ФишкаКартинка1,
		|	РаспечатанныеЦенникиМагазинов.ФишкаКартинка2
		|ИЗ
		|	РегистрСведений.РаспечатанныеЦенникиМагазинов КАК РаспечатанныеЦенникиМагазинов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаспечатанныеЦенникиМагазинов.Номенклатура КАК Номенклатура,
		|			РаспечатанныеЦенникиМагазинов.Магазин КАК Магазин,
		|			МАКСИМУМ(РаспечатанныеЦенникиМагазинов.ДатаПечати) КАК ДатаПечати
		|		ИЗ
		|			РегистрСведений.РаспечатанныеЦенникиМагазинов КАК РаспечатанныеЦенникиМагазинов
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РаспечатанныеЦенникиМагазинов.Номенклатура,
		|			РаспечатанныеЦенникиМагазинов.Магазин) КАК ВЗ_Макс
		|		ПО РаспечатанныеЦенникиМагазинов.ДатаПечати = ВЗ_Макс.ДатаПечати
		|			И РаспечатанныеЦенникиМагазинов.Магазин = ВЗ_Макс.Магазин
		|			И РаспечатанныеЦенникиМагазинов.Номенклатура = ВЗ_Макс.Номенклатура
		|ГДЕ
		|	РаспечатанныеЦенникиМагазинов.Магазин = &Магазин
		|	И (РаспечатанныеЦенникиМагазинов.Номенклатура В (&Товары)
		|			ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)";
		
		Результаты = Запрос.ВыполнитьПакет();
		ТабКешАкции = Результаты[1].Выгрузить();
		ТабКешАкции.Индексы.Добавить("ДействуетВМагазине, Номенклатура");
		ТабКешРаспечатанные = Результаты[2].Выгрузить();
		ТабКешРаспечатанные.Индексы.Добавить("Магазин, Номенклатура");	
		
		Выборка = Результаты[0].Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ТорговаяТочка") Цикл
			НачатьТранзакцию();
			Пока Выборка.Следующий() Цикл
				НаименованиеТовара = Выборка.Наименование;
				Вес = Выборка.ВесОбъем;
				СрокГодности = "";
				Если ЗначениеЗаполнено(Выборка.СрокГодности) Тогда
					СрокГодности 	= ЧислоПрописью(Выборка.СрокГодности, "НД=Ложь", Выборка.ПараметрыПрописиНаРусском);
					СрокГодности 	= СтрЗаменить(СрокГодности, " ", Символы.ПС);
					Если СтрЧислоСтрок(СрокГодности) > 0 Тогда
						СрокГодности	= Формат(Выборка.СрокГодности, "ЧГ=0") + " " + СтрПолучитьСтроку(СрокГодности, СтрЧислоСтрок(СрокГодности));
					КонецЕсли;
					Если Выборка.СрокНеограничен Тогда
						СрокГодности = "Не ограничен";
					КонецЕсли;
				КонецЕсли;
				Цена			= Выборка.Цена;
				СтранаПроисхождения = Выборка.СтранаПроисхождения;
				Фишка = Выборка.Фишка;
				
				ЦенаПоАкции = 0;
				КомментарийАкции = "";
				НазваниеАкции = "";
				СтрокиАкции = ТабКешАкции.НайтиСтроки(Новый Структура("ДействуетВМагазине, Номенклатура", Выборка.ТорговаяТочка, Выборка.Номенклатура));
				Если СтрокиАкции.Количество() > 0 Тогда
					Если СтрокиАкции[0].ТипСкидки = Перечисления.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте Тогда
						ЦенаПоАкции = Окр(Выборка.Цена - СтрокиАкции[0].ДействуетЦена_Скидка * Выборка.Цена / 100, 0, РежимОкругления.Окр15как20);
					Иначе
						ЦенаПоАкции = СтрокиАкции[0].ДействуетЦена_Скидка;
					КонецЕсли;
					НазваниеАкции 		= СтрокиАкции[0].НазваниеАкции;
					КомментарийАкции 	= СтрокиАкции[0].КомментарийНаЦенник;
				Иначе
					СтрокиАкции = ТабКешАкции.НайтиСтроки(Новый Структура("ДействуетВМагазине, Номенклатура", Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), Выборка.Номенклатура));
					Если СтрокиАкции.Количество() > 0 Тогда
						Если СтрокиАкции[0].ТипСкидки = Перечисления.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте Тогда
							ЦенаПоАкции = Окр(Выборка.Цена - СтрокиАкции[0].ДействуетЦена_Скидка * Выборка.Цена / 100, 0, РежимОкругления.Окр15как20);
						Иначе
							ЦенаПоАкции = СтрокиАкции[0].ДействуетЦена_Скидка;
						КонецЕсли;
						НазваниеАкции 		= СтрокиАкции[0].НазваниеАкции;
						КомментарийАкции 	= СтрокиАкции[0].КомментарийНаЦенник;
					КонецЕсли;	
				КонецЕсли;
				
				
				СтрокиВРаспечатанных = ТабКешРаспечатанные.НайтиСтроки(Новый Структура("Магазин, Номенклатура", Выборка.ТорговаяТочка, Выборка.Номенклатура));
				Если СтрокиВРаспечатанных.Количество() = 0 Тогда
					Запись = РегистрыСведений.ЦенникиКПечатиВМагазинах.СоздатьМенеджерЗаписи();
					Запись.Магазин 					= Выборка.ТорговаяТочка;
					Запись.Номенклатура 			= Выборка.Номенклатура;
					Запись.ОписаниеПричиныПечати 	= "Ценник не был распечатан ни разу";
					Запись.Записать();
				Иначе
					ПолнаяПричина = "";
					ЕстьИзменение = Ложь;
					Если Цена <> СтрокиВРаспечатанных[0].Цена Тогда
						ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новая цена: " + Формат(Цена, "ЧГ=0");
						ЕстьИзменение = Истина;
					КонецЕсли;
					
					Если ЦенаПоАкции <> СтрокиВРаспечатанных[0].ЦенаПоАкции Тогда
						Если ЦенаПоАкции = 0 Тогда
							ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Акция закончена";
						Иначе	
							ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новая цена по акции: " + Формат(ЦенаПоАкции, "ЧГ=0");
						КонецЕсли;
						ЕстьИзменение = Истина;
					КонецЕсли;
					
					Если НаименованиеТовара <> СтрокиВРаспечатанных[0].НаименованиеТовара Тогда
						ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новое название товара: " + НаименованиеТовара;
						ЕстьИзменение = Истина;
					КонецЕсли;	
					Если Вес <> СтрокиВРаспечатанных[0].Вес Тогда
						ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новый вес упаковки: " + Вес;
						ЕстьИзменение = Истина;
					КонецЕсли;	
					Если СрокГодности <> СтрокиВРаспечатанных[0].СрокГодности Тогда
						ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новый срок годности: " + СрокГодности;
						ЕстьИзменение = Истина;
					КонецЕсли;	
					Если СтранаПроисхождения <> СтрокиВРаспечатанных[0].Страна Тогда
						ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новая страна происхождения: " + СтранаПроисхождения;
						ЕстьИзменение = Истина;
					КонецЕсли;	
					//Если Фишка <> СтрокиВРаспечатанных[0].Фишка Тогда
					//	ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новая фишка: " + Фишка;
					//	ЕстьИзменение = Истина;
					//КонецЕсли;
					Если НазваниеАкции <> СтрокиВРаспечатанных[0].НазваниеАкции Тогда
						ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новое название акции: " + НазваниеАкции;
						ЕстьИзменение = Истина;
					КонецЕсли;
					Если КомментарийАкции <> СтрокиВРаспечатанных[0].КомментарийАкции Тогда
						ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Новый комментарий акции: " + КомментарийАкции;
						ЕстьИзменение = Истина;
					КонецЕсли;
					
					//Если Выборка.НеПересчитыватьЦенникПоРейтингу = Ложь Тогда
						Если Выборка.ФишкаКратко1 <> СтрокиВРаспечатанных[0].ФишкаКартинка1
							ИЛИ Выборка.ФишкаКратко2 <> СтрокиВРаспечатанных[0].ФишкаКартинка2 Тогда
							ПолнаяПричина = ПолнаяПричина + ?(ЗначениеЗаполнено(ПолнаяПричина), Символы.ПС, "") + "Изменились фишки на ценнике";
							ЕстьИзменение = Истина;
						КонецЕсли;
					//КонецЕсли;
					
					Если ЕстьИзменение
						И Выборка.БылаПричина <> ПолнаяПричина Тогда
						Запись = РегистрыСведений.ЦенникиКПечатиВМагазинах.СоздатьМенеджерЗаписи();
						Запись.Магазин 					= Выборка.ТорговаяТочка;
						Запись.Номенклатура 			= Выборка.Номенклатура;
						Запись.ОписаниеПричиныПечати 	= ПолнаяПричина;
						Запись.ДатаДобавления 			= ТекущаяДата();
						Запись.Характеристика			= Выборка.Характеристика;
						Запись.Записать();
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЦикла;	
			ЗафиксироватьТранзакцию();
		КонецЦикла;	
		
	КонецЦикла;	
КонецПроцедуры	

Процедура ПересчитатьНеобходимостьПечатиЦенниковТТ(Знач Магазины = Неопределено, Знач Товары = Неопределено, РасчитатьНаДату = Неопределено) Экспорт
	
	Возврат; //минеев пока это вообще не используется
	
	Если ТипЗнч(Магазины) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ВремМагазины = Магазины;
		Магазины = Новый Массив();
		Магазины.Добавить(ВремМагазины);
	КонецЕсли;
	
	Если ТипЗнч(Товары) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВремТовар = Товары;
		Товары = Новый Массив();
		Товары.Добавить(ВремТовар);
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"				, ДобавитьМесяц(ТекущаяДата(), -2));
	Запрос.УстановитьПараметр("ТекДата"				, ?(РасчитатьНаДату = Неопределено, КонецДня(ТекущаяДата()), КонецДня(РасчитатьНаДату)));
	Запрос.УстановитьПараметр("Магазины"			, ?(ТипЗнч(Магазины) = Тип("Массив"), Магазины, Новый Массив()));
	Запрос.УстановитьПараметр("Товары"				, ?(ТипЗнч(Товары) = Тип("Массив"), Товары, Новый Массив()));
	Запрос.УстановитьПараметр("ЕстьОтборПоМагазинам", ?(ТипЗнч(Магазины) = Тип("Массив") И Магазины.Количество() > 0, Истина, Ложь));
	Запрос.УстановитьПараметр("ЕстьОтборПоТоварам"	, ?(ТипЗнч(Товары) = Тип("Массив") И Товары.Количество() > 0, Истина, Ложь));
	Запрос.УстановитьПараметр("УпаковкаДляЦенника"	, ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("УпаковкаДляЦенника"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЗ_Запрос.ТорговаяТочка КАК ТорговаяТочка,
	|	ВЗ_Запрос.Номенклатура КАК Номенклатура,
	|	ВЗ_Запрос.Характеристика,
	|	ВЗ_Запрос.Цена,
	|	ВЗ_Запрос.Наименование,
	|	ВЗ_Запрос.ДатаДобавления КАК ДатаДобавления,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов_Страна.Значение, """") КАК СтранаПроисхождения,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов_Упаковка.Значение, """") КАК ВесОбъем,
	|	ВЗ_Запрос.БылаПричина
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|		ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЕСТЬNULL(ЦенникиКПечатиВМагазинах.ДатаДобавления, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДобавления,
	|		ЕСТЬNULL(ВЗ_Приходники.Характеристика, ТоварныйАссортиментТочекСрезПоследних.Характеристика) КАК Характеристика,
	|		ЕСТЬNULL(ВЗ_Цены.Цена, 0) КАК Цена,
	|		ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|		ЕСТЬNULL(ЦенникиКПечатиВМагазинах.ОписаниеПричиныПечати, """") КАК БылаПричина
	|	ИЗ
	|		РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				&ТекДата,
	|				(ТорговаяТочка В (&Магазины)
	|					ИЛИ &ЕстьОтборПоМагазинам = ЛОЖЬ)
	|					И (Номенклатура В (&Товары)
	|						ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
	|					И ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	|					И Номенклатура.ЭтоКомплект = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенникиКПечатиВМагазинах КАК ЦенникиКПечатиВМагазинах
	|			ПО ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ЦенникиКПечатиВМагазинах.Магазин
	|				И ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ЦенникиКПечатиВМагазинах.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|				ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|						&ТекДата,
	|						(Номенклатура В (&Товары)
	|							ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
	|							И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|							И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВЗ_Цены
	|			ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВЗ_Цены.Номенклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВЗ_Макс.Получатель КАК Получатель,
	|				ЕСТЬNULL(ВЗ_Комплекты.СоставляющаяВладелец, ВЗ_Макс.Номенклатура) КАК Номенклатура,
	|				МАКСИМУМ(ЕСТЬNULL(ВЗ_Комплекты.Составляющая, РасходныйОрдерСкладТовары.Характеристика)) КАК Характеристика
	|			ИЗ
	|				Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						МАКСИМУМ(РасходныйОрдерСкладТовары.Ссылка.Дата) КАК Дата,
	|						РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Получатель,
	|						РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|					ИЗ
	|						Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|					ГДЕ
	|						РасходныйОрдерСкладТовары.Ссылка.Дата >= &ДатаНач
	|						И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|						И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|						И (РасходныйОрдерСкладТовары.Номенклатура В (&Товары)
	|								ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
	|					
	|					СГРУППИРОВАТЬ ПО
	|						РасходныйОрдерСкладТовары.Ссылка.Получатель,
	|						РасходныйОрдерСкладТовары.Номенклатура) КАК ВЗ_Макс
	|					ПО РасходныйОрдерСкладТовары.Ссылка.Дата = ВЗ_Макс.Дата
	|						И РасходныйОрдерСкладТовары.Ссылка.Получатель = ВЗ_Макс.Получатель
	|						И РасходныйОрдерСкладТовары.Номенклатура = ВЗ_Макс.Номенклатура
	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						СоставКомплектаСрезПоследних.Характеристика КАК Характеристика,
	|						СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
	|						СоставКомплектаСрезПоследних.Составляющая КАК Составляющая
	|					ИЗ
	|						РегистрСведений.СоставКомплекта.СрезПоследних(&ТекДата, ) КАК СоставКомплектаСрезПоследних
	|					ГДЕ
	|						СоставКомплектаСрезПоследних.Количество <> 0) КАК ВЗ_Комплекты
	|					ПО РасходныйОрдерСкладТовары.Характеристика = ВЗ_Комплекты.Характеристика
	|			ГДЕ
	|				РасходныйОрдерСкладТовары.Ссылка.Дата >= &ДатаНач
	|				И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|				И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|				И (РасходныйОрдерСкладТовары.Номенклатура В (&Товары)
	|						ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВЗ_Макс.Получатель,
	|				ЕСТЬNULL(ВЗ_Комплекты.СоставляющаяВладелец, ВЗ_Макс.Номенклатура)) КАК ВЗ_Приходники
	|			ПО ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка = ВЗ_Приходники.Получатель
	|				И ТоварныйАссортиментТочекСрезПоследних.Номенклатура = ВЗ_Приходники.Номенклатура
	|	ГДЕ
	|		ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|		И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|		И (ЦенникиКПечатиВМагазинах.Магазин ЕСТЬ NULL 
	|				ИЛИ ЦенникиКПечатиВМагазинах.ДатаДобавления < ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1))
	|		И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.Активное = ИСТИНА) КАК ВЗ_Запрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов_Страна
	|		ПО ВЗ_Запрос.Характеристика = ЗначенияСвойствОбъектов_Страна.Объект
	|			И (ЗначенияСвойствОбъектов_Страна.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов_Упаковка
	|		ПО ВЗ_Запрос.Характеристика = ЗначенияСвойствОбъектов_Упаковка.Объект
	|			И (ЗначенияСвойствОбъектов_Упаковка.Свойство = &УпаковкаДляЦенника)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВЗ_Запрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспечатанныеЦенникиМагазинов.Номенклатура КАК Номенклатура,
	|	РаспечатанныеЦенникиМагазинов.Магазин КАК Магазин,
	|	РаспечатанныеЦенникиМагазинов.Цена,
	|	РаспечатанныеЦенникиМагазинов.Страна КАК СтранаПроисхождения,
	|	РаспечатанныеЦенникиМагазинов.НаименованиеТовара,
	|	РаспечатанныеЦенникиМагазинов.Вес КАК ВесОбъем
	|ПОМЕСТИТЬ ВТ_Распечатанные
	|ИЗ
	|	РегистрСведений.РаспечатанныеЦенникиМагазинов КАК РаспечатанныеЦенникиМагазинов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаспечатанныеЦенникиМагазинов.Номенклатура КАК Номенклатура,
	|			РаспечатанныеЦенникиМагазинов.Магазин КАК Магазин,
	|			МАКСИМУМ(РаспечатанныеЦенникиМагазинов.ДатаПечати) КАК ДатаПечати
	|		ИЗ
	|			РегистрСведений.РаспечатанныеЦенникиМагазинов КАК РаспечатанныеЦенникиМагазинов
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаспечатанныеЦенникиМагазинов.Номенклатура,
	|			РаспечатанныеЦенникиМагазинов.Магазин) КАК ВЗ_Макс
	|		ПО РаспечатанныеЦенникиМагазинов.ДатаПечати = ВЗ_Макс.ДатаПечати
	|			И РаспечатанныеЦенникиМагазинов.Магазин = ВЗ_Макс.Магазин
	|			И РаспечатанныеЦенникиМагазинов.Номенклатура = ВЗ_Макс.Номенклатура
	|ГДЕ
	|	(РаспечатанныеЦенникиМагазинов.Магазин В (&Магазины)
	|			ИЛИ &ЕстьОтборПоМагазинам = ЛОЖЬ)
	|	И (РаспечатанныеЦенникиМагазинов.Номенклатура В (&Товары)
	|			ИЛИ &ЕстьОтборПоТоварам = ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ТорговаяТочка,
	|	ВТ_Данные.Номенклатура,
	|	ВТ_Данные.Цена,
	|	ВТ_Данные.Наименование КАК НаименованиеТовара,
	|	ВТ_Данные.СтранаПроисхождения КАК Страна,
	|	ВТ_Данные.ВесОбъем КАК Вес,
	|	ЕСТЬNULL(ВТ_Распечатанные.Цена, 0) КАК ЦенаБыла,
	|	ЕСТЬNULL(ВТ_Распечатанные.СтранаПроисхождения, """") КАК СтранаБыла,
	|	ЕСТЬNULL(ВТ_Распечатанные.НаименованиеТовара, """") КАК НаименованиеТовараБыло,
	|	ЕСТЬNULL(ВТ_Распечатанные.ВесОбъем, """") КАК ВесБыл,
	|	ВЫБОР
	|		КОГДА ВТ_Распечатанные.НаименованиеТовара ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеБылРаспечатан,
	|	ВТ_Данные.Характеристика
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Распечатанные КАК ВТ_Распечатанные
	|		ПО ВТ_Данные.ТорговаяТочка = ВТ_Распечатанные.Магазин
	|			И ВТ_Данные.Номенклатура = ВТ_Распечатанные.Номенклатура
	|ГДЕ
	|	(ВТ_Данные.Цена <> ЕСТЬNULL(ВТ_Распечатанные.Цена, 0)
	|			ИЛИ ВТ_Данные.СтранаПроисхождения <> ЕСТЬNULL(ВТ_Распечатанные.СтранаПроисхождения, """")
	|			ИЛИ ВТ_Данные.Наименование <> ЕСТЬNULL(ВТ_Распечатанные.НаименованиеТовара, """")
	|			ИЛИ ВТ_Данные.ВесОбъем <> ЕСТЬNULL(ВТ_Распечатанные.ВесОбъем, """"))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		Движение = РегистрыСведений.ЦенникиКПечатиВМагазинах.СоздатьМенеджерЗаписи();
		Движение.Номенклатура = Выборка.Номенклатура;
		Движение.Магазин = Выборка.ТорговаяТочка;
		ОписаниеИзменения = "";
		Если Выборка.НеБылРаспечатан Тогда
			ОписаниеИзменения = "Ценник не был ни разу распечатан";
		Иначе
			Если Выборка.Цена <> Выборка.ЦенаБыла Тогда
				ОписаниеИзменения = ОписаниеИзменения + ?(ЗначениеЗаполнено(ОписаниеИзменения), Символы.ПС, "") + "Новая цена: " + Выборка.Цена + ". Была цена: " + Выборка.ЦенаБыла;
			КонецЕсли;
			Если Выборка.Страна <> Выборка.СтранаБыла Тогда
				ОписаниеИзменения = ОписаниеИзменения + ?(ЗначениеЗаполнено(ОписаниеИзменения), Символы.ПС, "") + "Новая страна: " + Выборка.Страна + ". Была страна: " + Выборка.СтранаБыла;
			КонецЕсли;
			Если Выборка.НаименованиеТовара <> Выборка.НаименованиеТовараБыло Тогда
				ОписаниеИзменения = ОписаниеИзменения + ?(ЗначениеЗаполнено(ОписаниеИзменения), Символы.ПС, "") + "Новое наименование товара: " + Выборка.НаименованиеТовара + ". Было наименование: " + Выборка.НаименованиеТовараБыло;
			КонецЕсли;
			Если Выборка.Вес <> Выборка.ВесБыл Тогда
				ОписаниеИзменения = ОписаниеИзменения + ?(ЗначениеЗаполнено(ОписаниеИзменения), Символы.ПС, "") + "Новый вес: " + Выборка.Вес + ". Был вес: " + Выборка.ВесБыл;
			КонецЕсли;
		КонецЕсли;	
		Движение.ОписаниеПричиныПечати = ОписаниеИзменения;
		Движение.ДатаДобавления = ТекущаяДата();
		Движение.Характеристика = Выборка.Характеристика;
		Движение.Записать();
	КонецЦикла;	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

Процедура ПересчетНеобходимостиПечатиЦенников() Экспорт
	
	ПересчитатьНеобходимостьПечатиЦенников();
	
КонецПроцедуры

Процедура ПересчетНеобходимостиПечатиЦенникаТТ() Экспорт
	
	//ПересчитатьНеобходимостьПечатиЦенниковТТ();
	
КонецПроцедуры

Процедура ФоновоеСчитываниеДанныхДляРасходногоОрдера(АдресДляСохранения, Дата, Получатель, Ссылка, Знач ТабДокумента, Склад) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаОтборТовары = "999999";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТабДокумента.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Товары)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаОтборТовары = СтрокаОтборТовары + "," + Формат(Выборка.id_tov, "ЧГ=0");
	КонецЦикла;	
	
	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(Дата
	, Дата
	, Получатель);
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса =
	"SELECT TovBin.UIN as TovarUID
	|	  ,CAST(master.dbo.Binary2UID(Reg._Fld5577RRef) as nvarchar(36)) as  HarUid
	|	  ,Reg._Fld5578 as kolvo
	|  FROM [IzbenkaFin].[dbo].[_InfoRg5575] (nolock) as Reg
	|INNER JOIN (SELECT [_Period]
	|	  ,[_Fld6243RRef]
	|	  ,[_Fld5576RRef]
	|	  ,[_Fld5577RRef]
	|	  ,ROW_NUMBER() OVER (PARTITION BY _Fld6243RRef, _Fld5576RRef, _Fld5577RRef ORDER BY _Period desc) as rn
	|  FROM [IzbenkaFin].[dbo].[_InfoRg5575] (nolock)
	|  WHERE _Fld6243RRef = (SELECT _Idrref FROM [IzbenkaFin].[dbo].[_Reference42] (nolock) where _Fld758 = " + ВнешниеДанные.ФорматПоля(Склад.Владелец.id_TT) + ")
	|	and _Active = 1) as VZ_Max
	|	ON Reg._Fld6243RRef = VZ_Max._Fld6243RRef and Reg._Fld5576RRef = VZ_Max._Fld5576RRef and Reg._Fld5577RRef = VZ_Max._Fld5577RRef and Reg._Period = VZ_Max._Period and VZ_Max.rn = 1
	|LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID as TovBin ON Reg._Fld5576RRef = TovBin.Ref
	|WHERE Reg._Fld6243RRef = (SELECT _Idrref FROM [IzbenkaFin].[dbo].[_Reference42] (nolock) where _Fld758 = " + ВнешниеДанные.ФорматПоля(Склад.Владелец.id_TT) + ")
	|	and Reg._Active = 1 and Reg._Fld5576RRef IN (SELECT _IdRRef FROM [IzbenkaFin].[dbo].[_Reference29] (nolock) where _Fld760 IN (" + СтрокаОтборТовары + "))	
	|
	|SELECT TovBin.UIN TovarUID, TD.Quantity Quantity
	|	
	|FROM [SMS_REPL].[dbo].[TD_move] (nolock) as TD
	|LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID as TovBin ON TD.id_tov = TovBin.id
	|where ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Получатель.НомерТочки) + " and CONVERT(date, opendate) = CONVERT(date, " + ВнешниеДанные.ФорматПоля(Дата) + ") and operation_type = -400
	|	and TD.id_tov IN (" + СтрокаОтборТовары + ")";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено
		И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабКолвоВКоробке = Новый ТаблицаЗначений();
	ТабКолвоВКоробке.Колонки.Добавить("Номенклатура");
	ТабКолвоВКоробке.Колонки.Добавить("Характеристика");
	ТабКолвоВКоробке.Колонки.Добавить("Количество");
	
	ТабКолвоВКоробке.Индексы.Добавить("Номенклатура, Характеристика");
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабКолвоВКоробке.Добавить();
			СтрокаДоб.Номенклатура 		= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаДоб.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("HarUid").Value));
			СтрокаДоб.Количество 		= Rs.Fields("kolvo").Value;;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТабПоступилоНоНеПроведено = Новый ТаблицаЗначений();
	ТабПоступилоНоНеПроведено.Колонки.Добавить("Номенклатура");
	ТабПоступилоНоНеПроведено.Колонки.Добавить("Количество");
	
	rs = rs.NextRecordSet();
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПоступилоНоНеПроведено.Добавить();
			СтрокаДоб.Номенклатура 	= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаДоб.Количество 	= Rs.Fields("Quantity").Value;;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	//ЗапросРеквизитовНоменклатуры = Новый Запрос;
	//ЗапросРеквизитовНоменклатуры.УстановитьПараметр("Номенклатура", ТабДокумента.ВыгрузитьКолонку("Номенклатура"));
	//ЗапросРеквизитовНоменклатуры.Текст =
	//"ВЫБРАТЬ
	//|	Номенклатура.Ссылка
	//|ИЗ
	//|	Справочник.Номенклатура КАК Номенклатура
	//|ГДЕ
	//|	Номенклатура.Ссылка В (&Номенклатура)
	//|	И НЕ Номенклатура.БезОстатков";
	//ТабНеСлужебные = ЗапросРеквизитовНоменклатуры.Выполнить().Выгрузить();
	
	//КолвоСтрок = ТоварыТТНеотправленныеСоСклада.Количество();
	//Для н = 1 По КолвоСтрок Цикл
	//	Если ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Количество = 0
	//		ИЛИ ТабНеСлужебные.Найти(ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Номенклатура, "Ссылка") = Неопределено Тогда
	//		ТоварыТТНеотправленныеСоСклада.Удалить(КолвоСтрок - н);
	//	КонецЕсли;	
	//КонецЦикла;	
	
	Если ТабДокумента.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТабДокумента.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого СтрокаТаб Из ТабДокумента Цикл
		СтрокаТаб.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДока"			, КонецДня(Дата));
	Запрос.УстановитьПараметр("Таб"					, ТабДокумента);
	//Запрос.УстановитьПараметр("МассивТоваров", ТабНеСлужебные.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("ДатаРаспределения"	, НачалоДня(Дата));
	Запрос.УстановитьПараметр("Ссылка"				, Ссылка);
	Запрос.УстановитьПараметр("Получатель"			, Получатель);
	Запрос.УстановитьПараметр("Склад"				, Склад.Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерСкладТовары.Количество,
	|	&Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТекТовары
	|ИЗ
	|	&Таб КАК РасходныйОрдерСкладТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерСклад.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Расходники
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.ДатаРаспределения, ДЕНЬ) = &ДатаРаспределения
	|	И РасходныйОрдерСклад.Получатель = &Получатель
	|	И РасходныйОрдерСклад.Ссылка <> &Ссылка
	|	И РасходныйОрдерСклад.Проведен = ИСТИНА
	|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.Номенклатура КАК Номенклатура,
	|	ВЗ_Запрос.Количество КАК Количество,
	|	ВЗ_Запрос.Ссылка КАК Ссылка,
	|	ВЗ_Запрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|		РасходныйОрдерСкладТовары.Количество КАК Количество,
	|		РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|		РасходныйОрдерСкладТовары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расходники КАК ВТ_Расходники
	|			ПО РасходныйОрдерСкладТовары.Ссылка = ВТ_Расходники.Ссылка
	|	ГДЕ
	|		РасходныйОрдерСкладТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ_ТекТовары.Номенклатура
	|				ИЗ
	|					ВТ_ТекТовары КАК ВТ_ТекТовары)
	|		И НЕ ВТ_Расходники.Ссылка ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходныйОрдерСкладТовары.Номенклатура,
	|		РасходныйОрдерСкладТовары.Количество,
	|		РасходныйОрдерСкладТовары.Ссылка,
	|		РасходныйОрдерСкладТовары.НомерСтроки
	|	ИЗ
	|		ВТ_ТекТовары КАК РасходныйОрдерСкладТовары) КАК ВЗ_Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Количество УБЫВ,
	|	НомерСтроки,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТекТовары";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабРаспределение = Результаты[2].Выгрузить();
	ТабРаспределение.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Число"));
	
	//распределим принятое ТТ
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		СтрокиРаспределено = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
		Для Каждого СтрокаТаб Из СтрокиРаспределено Цикл
			КолвоПоИтерации = Мин(СтрокаТаб.Количество, СтрокаДанные.Поступило);
			Если КолвоПоИтерации <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб.Поступило = СтрокаТаб.Поступило + КолвоПоИтерации;
			СтрокаТаб.Количество = СтрокаТаб.Количество - КолвоПоИтерации;
			СтрокаДанные.Поступило = СтрокаДанные.Поступило - КолвоПоИтерации;
		КонецЦикла;
		Если СтрокиРаспределено.Количество() > 0
			И СтрокаДанные.Поступило > 0 Тогда
			СтрокиРаспределено[0].Поступило = СтрокиРаспределено[0].Поступило + СтрокаДанные.Поступило;
		КонецЕсли;	
	КонецЦикла;
	
	ТабРаспределениеНеПроведено = Результаты[2].Выгрузить();
	ТабРаспределениеНеПроведено.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Число"));
	
	//распределим принятое ТТ, но не проведенное
	Для Каждого СтрокаДанные Из ТабПоступилоНоНеПроведено Цикл
		СтрокиРаспределено = ТабРаспределениеНеПроведено.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
		Для Каждого СтрокаТаб Из СтрокиРаспределено Цикл
			КолвоПоИтерации = Мин(СтрокаТаб.Количество, СтрокаДанные.Количество);
			Если КолвоПоИтерации <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб.Поступило = СтрокаТаб.Поступило + КолвоПоИтерации;
			СтрокаТаб.Количество = СтрокаТаб.Количество - КолвоПоИтерации;
			СтрокаДанные.Количество = СтрокаДанные.Количество - КолвоПоИтерации;
		КонецЦикла;
		Если СтрокиРаспределено.Количество() > 0
			И СтрокаДанные.Количество > 0 Тогда
			СтрокиРаспределено[0].Поступило = СтрокиРаспределено[0].Поступило + СтрокаДанные.Количество;
		КонецЕсли;	
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Новый Структура("ТабДанные, ТабПоступилоНоНеПроведено, ТабРаспределениеНеПроведено, ТабКолвоВКоробке, ТабРаспределение"
	, ТабДанные, ТабПоступилоНоНеПроведено, ТабРаспределениеНеПроведено, ТабКолвоВКоробке, ТабРаспределение), АдресДляСохранения);
	
КонецПроцедуры	

Процедура БРЕД_ФоноваяОбработкаЗаявокНаЭтикетку() Экспорт
	
	//+++AK obue 20160418 00012461	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.КоличествоПриход,
	|	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.КоличествоРасход,
	|	ВложенныйЗапрос.Ссылка КАК Заявка,
	|	ВложенныйЗапрос.Этикетка,
	|	ВложенныйЗапрос.КоличествоЗаказано,
	|	ВложенныйЗапрос.СтатусЗаявки,
	|	ВложенныйЗапрос.ВысланаПФЗаявки
	|ПОМЕСТИТЬ ВТ_Заявки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка КАК Ссылка,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка КАК Этикетка,
	|		СУММА(ЗаявкаНаПечатьЭтикеткиЭтикетки.КоличествоЗаказано) КАК КоличествоЗаказано,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.СтатусЗаявки КАК СтатусЗаявки,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.ВысланаПФЗаявки КАК ВысланаПФЗаявки
	|	ИЗ
	|		Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.СтатусЗаявки,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.ВысланаПФЗаявки) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(, , , ) КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты
	|		ПО ВложенныйЗапрос.Ссылка = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.ЗаявкаНаПроизводствоПерсональнойУпаковке
	|			И ВложенныйЗапрос.Этикетка = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заявки.Этикетка,
	|	ВТ_Заявки.КоличествоЗаказано,
	|	ВТ_Заявки.КоличествоПриход,
	|	ВТ_Заявки.ВысланаПФЗаявки КАК ВысланаПФЗаявки,
	|	ВТ_Заявки.Заявка КАК Заявка,
	|	ВТ_Заявки.КоличествоРасход,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заявки.КоличествоПриход, 0) < ВТ_Заявки.КоличествоЗаказано
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеХватаетПриход,
	|	ВТ_Заявки.СтатусЗаявки КАК СтатусЗаявки
	|ИЗ
	|	ВТ_Заявки КАК ВТ_Заявки
	|ИТОГИ
	|	МАКСИМУМ(ВысланаПФЗаявки),
	|	МАКСИМУМ(НеХватаетПриход),
	|	МАКСИМУМ(СтатусЗаявки)
	|ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заявки.Этикетка,
	|	ВТ_Заявки.КоличествоЗаказано,
	|	ВТ_Заявки.КоличествоПриход,
	|	ВТ_Заявки.ВысланаПФЗаявки,
	|	ВТ_Заявки.Заявка КАК Заявка,
	|	ВТ_Заявки.КоличествоРасход,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заявки.КоличествоРасход, 0) < ВТ_Заявки.КоличествоЗаказано
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеХватаетРасход,
	|	ВТ_Заявки.СтатусЗаявки КАК СтатусЗаявки
	|ИЗ
	|	ВТ_Заявки КАК ВТ_Заявки
	|ИТОГИ
	|	МАКСИМУМ(НеХватаетРасход),
	|	МАКСИМУМ(СтатусЗаявки)
	|ПО
	|	Заявка";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	//приход
	ВыборкаПриход = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПриход.Следующий() Цикл
		Если ВыборкаПриход.НеХватаетПриход Тогда
			Продолжить;
		КонецЕсли;
		Если ВыборкаПриход.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано
			ИЛИ НЕ ВыборкаПриход.ВысланаПФЗаявки Тогда
			ЗаявкаОбъект = ВыборкаПриход.Заявка.ПолучитьОбъект();
			Если ВыборкаПриход.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано Тогда
				ЗаявкаОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено;
			КонецЕсли;
			Если НЕ ВыборкаПриход.ВысланаПФЗаявки Тогда
				ЗаявкаОбъект.ОтправитьПисьмоПроизведено();
				ЗаявкаОбъект.ВысланаПФЗаявки = Истина;
			КонецЕсли;
			ЗаявкаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//расход
	ВыборкаРасход = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	мСтатусВыполнено = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено;
	Пока ВыборкаРасход.Следующий() Цикл
		Если ВыборкаРасход.НехватаетРасход Тогда
			Продолжить;
		КонецЕсли;
		ЗаявкаОбъект = ВыборкаРасход.Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.СтатусЗаявки = мСтатусВыполнено;
		ЗаявкаОбъект.ОтправитьПисьмоЗакрыта();
		ЗаявкаОбъект.Записать();
	КонецЦикла;
	
	//---AK	
КонецПроцедуры

//
Процедура ФоноваяОбработкаЗаявокНаЭтикетку() Экспорт
	
	//+++AK
	ТЗ = "ВЫБРАТЬ
	|	Таблица.Заявка,
	|	Таблица.Заявка.СтатусЗаявки КАК СтатусЗаявки,
	|	Таблица.КоличествоЗаказаноПриход,
	|	Таблица.КоличествоЗаказаноРасход,
	|	Таблица.КоличествоКОтгрузкеПриход,
	|	Таблица.КоличествоКОтгрузкеРасход,
	|	Таблица.КоличествоКПроизводствуПриход,
	|	Таблица.КоличествоКПроизводствуРасход
	|ИЗ
	|	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(
	|			,
	|			,
	|			,
	|			НЕ Заявка.Поставщик.Ссылка ЕСТЬ NULL
	|				И Заявка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена)
	|				И Заявка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено)
	|				И Заявка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена)) КАК Таблица
	|ГДЕ
	|	Таблица.КоличествоЗаказаноПриход > 0";
	
	//АК BARA ИП-00018105 2018.03.13 добавил в запрос условие, так как статус приостановленно при проведении менялся на другие.      И Заявка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена)	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		
		//
		Если (Выборка.КоличествоЗаказаноПриход > 0) И (Выборка.КоличествоЗаказаноПриход <= Выборка.КоличествоЗаказаноРасход) Тогда
			
			//
			ВсеОК = Истина;
			
			//
			Если Выборка.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено Тогда
				
				
				//
				ДокументОбъект = Выборка.Заявка.ПолучитьОбъект();
				ДокументОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено;
				
				//
				Попытка
					
					//
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
				
				//
				Если ВсеОК Тогда
					
					//
					ДокументОбъект.ОтправитьПисьмоЗакрыта();
					
				КонецЕсли; 
				
			КонецЕсли;	
			
			//
		ИначеЕсли (Выборка.КоличествоКПроизводствуПриход > 0) И (Выборка.КоличествоКПроизводствуПриход <= Выборка.КоличествоКПроизводствуРасход) Тогда	
			
			//
			ВсеОК = Истина;
			
			//
			Если Выборка.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено Тогда
				
				
				//
				ДокументОбъект = Выборка.Заявка.ПолучитьОбъект();
				ДокументОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено;
				
				//
				Попытка
					
					//
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
				
			КонецЕсли;	
			
			//
		ИначеЕсли (Выборка.КоличествоЗаказаноПриход > 0) И (Выборка.КоличествоЗаказаноПриход <= Выборка.КоличествоКОтгрузкеПриход) Тогда	
			
			//
			ВсеОК = Истина;
			
			//
			Если Выборка.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено Тогда
				
				
				//
				ДокументОбъект = Выборка.Заявка.ПолучитьОбъект();
				ДокументОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено;
				
				//
				Попытка
					
					//
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
				
			КонецЕсли;	
			
			
			//	
		ИначеЕсли (Выборка.КоличествоЗаказаноПриход > 0) Тогда	
			
			//
			ВсеОК = Истина;
			
			//
			Если Выборка.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано Тогда
				
				//
				ДокументОбъект = Выборка.Заявка.ПолучитьОбъект();
				ДокументОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано;
				
				//
				Попытка
					
					//
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
					ВсеОК = Ложь;
				КонецПопытки;
				
			КонецЕсли;	
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры


Процедура ФоновоеДобавлениеВПромоАкции() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
	
	Если ADOСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"declare @id_promo int = 0
	|
	|CREATE TABLE #НаЗапись
	|(id_promo int, id_tt int)
	|
	|DECLARE crs CURSOR LOCAL FOR
	|
	|Select
	|	Pr.id_promo
	|From Promo.dbo.Promo as Pr (nolock)
	|Where
	|	Pr.All_tt = 1
	|
	|OPEN crs
	|
	|FETCH crs INTO @id_promo
	|
	|
	|
	|WHILE NOT @@fetch_status = -1
	|
	|BEGIN
	|
	|Insert Into #НаЗапись (id_promo, id_tt)
	|Select
	|	@id_promo,
	|	T1._Fld758 
	|From IzbenkaFin.dbo._Reference42 as T1 (nolock)
	| Left Outer Join Promo.dbo.promo_tt as PrTT (nolock)
	| ON T1._Fld758 = PrTT.id_tt
	| 	 And PrTT.id_promo = @id_promo
	|Where
	|   T1._Fld758 <> 0
	|   and T1._Fld2756 <> 0
	|   and T1._Fld318RRef = 0x86AF486AD1B9CEE248DECEF0516F8BB9
	|   and T1._Fld2375RRef = 0x9BB6516D4A2CBD01442F121AD79A4CEF
	|	and PrTT.id_tt is null
	|
	|
	|FETCH NEXT FROM crs INTO @id_promo
	|
	|END
	|
	|CLOSE crs
	|
	|DEALLOCATE crs
	|
	|DECLARE crs1 CURSOR LOCAL FOR
	|
	|Select
	|	Pr.id_promo
	|FROM Promo.dbo.Promo as Pr (nolock)
	|Where
	|  	Pr.All_VV = 1
	|
	|OPEN crs1
	|
	|FETCH crs1 INTO @id_promo
	|
	|
	|
	|WHILE NOT @@fetch_status = -1
	|
	|BEGIN
	|
	|INSERT INTO #НаЗапись (id_promo, id_tt)
	|SELECT
	|  	@id_promo,
	|  	T1._Fld758 
	|FROM IzbenkaFin.dbo._Reference42 as T1 (nolock)
	| LEFT OUTER JOIN Promo.dbo.promo_tt as PrTT (nolock)
	| ON T1._Fld758 = PrTT.id_tt
	|  	 and PrTT.id_promo = @id_promo
	|WHERE
	|  	(T1._Fld758 <> 0)
	|  	AND T1._Fld2756 <> 0
	|  	AND (T1._Fld318RRef = 0x86AF486AD1B9CEE248DECEF0516F8BB9)
	|  	AND (T1._Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22)
	|	and PrTT.id_tt is null
	|
	|
	|FETCH NEXT FROM crs1 INTO @id_promo
	|
	|END
	|
	|CLOSE crs1
	|
	|DEALLOCATE crs1
	|
	|INSERT INTO Promo.dbo.promo_tt
	|	(id_promo,
	|	 id_tt,
	|	 is_pok,
	|	 plan_pr)
	|SELECT
	|  	#НаЗапись.id_promo,
	|  	#НаЗапись.id_tt,
	|  	1,
	|  	0
	|FROM #НаЗапись";
	
	ADOСоединение.Execute(ТекстЗапроса);
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	
КонецПроцедуры	

Процедура РассылкаОтчетаПоНовойНоменклатуре() Экспорт
	
	//Адрес = Константы.ЭлектронныйАдресРассылкиОтчетаПоНовойНоменклатуре.Получить();
	
	//Если Адрес = "" Тогда Возврат
	//КонецЕсли;
	
	//Если ДатаОтчета = Неопределено Тогда
	ДатаОтчета = НачалоДня(ТекущаяДата())-1;
	//КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Дата", ДатаОтчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Наименование,
	|	Номенклатура.Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ДатаСоздания >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И Номенклатура.ДатаСоздания <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТекстХТМЛ = "<table border='2'><tr align='center'><td>Код</td><td>Наименование</td></tr>";
	
	Для Каждого СтрокаТаблицы Из ТЗ Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Код) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрЗаменить(СтрокаТаблицы.Наименование, """", "&quot;")) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";	
	
	//
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Номенклатурные позиции, созданные за " + Формат(ДатаОтчета, "ДФ=dd.MM.yyyy");
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = "buh09@vkusvill.ru";	
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = "zamgb@vkusvill.ru";		
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
	ТекстПисьма.Текст 		= ТекстХТМЛ;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ФоновоеСозданиеЗаявкиНаПоставкуУпаковки(ОбъектСсылка) Экспорт
	
	Если ОбъектСсылка.Проведен Тогда 
		
		Для Каждого СтрокаТЧ Из ОбъектСсылка.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ЗаявкаНаПроизводствоПерсональнойУпаковки) Тогда
				Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмоПроизведено(СтрокаТЧ.ЗаявкаНаПроизводствоПерсональнойУпаковки, ОбъектСсылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОповещениеОСписанияхНаКачествоСоСклада() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаМинусНеделя"	, НачалоДня(ТекущаяДата() - 7*86400));
	Запрос.УстановитьПараметр("ДатаНачала"		, НачалоДня(ТекущаяДата() - 86400));
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(ТекущаяДата() - 86400));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйОрдерСклад.ВидОперации КАК ВидОперации,
	|	РасходныйОрдерСклад.ПризкакПодтвержденияВФинУчете КАК Подтв,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК КоличествоНеделя,
	|	СУММА(ЕСТЬNULL(ФинансовыйОбороты.СуммаОборот, 0)) КАК СуммаНеделя,
	|	СУММА(ВЫБОР
	|			КОГДА РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|				ТОГДА РасходныйОрдерСкладТовары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВчера,
	|	СУММА(ВЫБОР
	|			КОГДА РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|				ТОГДА ЕСТЬNULL(ФинансовыйОбороты.СуммаОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВчера
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ПО (РасходныйОрдерСклад.Ссылка = РасходныйОрдерСкладТовары.Ссылка)
	|			И (РасходныйОрдерСклад.Дата МЕЖДУ &ДатаМинусНеделя И &ДатаОкончания)
	|			И (РасходныйОрдерСклад.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.Утилизация), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.УтилизацияБой)))
	|			И (РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке))
	|			И (РасходныйОрдерСклад.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Обороты(&ДатаМинусНеделя, &ДатаОкончания, Запись, , , , КорСчет В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)), ) КАК ФинансовыйОбороты
	|		ПО (ФинансовыйОбороты.Регистратор = РасходныйОрдерСкладТовары.Ссылка)
	|			И (ФинансовыйОбороты.КорСубконто1 = РасходныйОрдерСкладТовары.Номенклатура
	|				ИЛИ ФинансовыйОбороты.КорСубконто2 = РасходныйОрдерСкладТовары.Номенклатура)
	|			И (ФинансовыйОбороты.КоличествоКорОборот = РасходныйОрдерСкладТовары.Количество)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСклад.ВидОперации,
	|	РасходныйОрдерСклад.ПризкакПодтвержденияВФинУчете,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерСклад.ВидОперации,
	|	СуммаНеделя УБЫВ,
	|	РасходныйОрдерСкладТовары.Номенклатура.Наименование
	|ИТОГИ
	|	СУММА(СуммаНеделя),
	|	СУММА(СуммаВчера)
	|ПО
	|	ВидОперации";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	//
	//
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Списания на качество со складов за " + Формат(ТекущаяДата() - 86400, "ДФ=dd.MM.yyyy");
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = "product_1@vkusvill.ru";	
	
	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидОперации.Следующий() Цикл
		
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
		ТекстПисьма.Текст 		= СокрЛП(Строка(ВыборкаВидОперации.ВидОперации));
		
		ТекстХТМЛ = "<table border='2'><tr align='center'><td>подтв.</td><td>Номенклатура</td><td>Характеристика</td><td>Ед.изм.</td><td>Количество (неделя)</td><td>Сумма (неделя)</td><td>Количество (вчера)</td><td>Сумма (вчера)</td></tr>";
		
		Выборка = ВыборкаВидОперации.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстХТМЛ = ТекстХТМЛ + "<tr>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + ?(Выборка.Подтв, "v", "") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрЗаменить(Выборка.Номенклатура.Наименование, """", "&quot;")) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрЗаменить(Выборка.Характеристика.Наименование, """", "&quot;")) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.ЕдиницаИзмерения.Наименование) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.КоличествоНеделя, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.СуммаНеделя, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.КоличествоВчера, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.СуммаВчера, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "</tr>";
		КонецЦикла;
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td> </td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>ИТОГО:</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td> </td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td> </td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td> </td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(ВыборкаВидОперации.СуммаНеделя, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td> </td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(ВыборкаВидОперации.СуммаВчера, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
		
		ТекстХТМЛ = ТекстХТМЛ + "</table>";	
		
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
		ТекстПисьма.Текст 		= ТекстХТМЛ;
		
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
		ТекстПисьма.Текст 		= Символы.ПС;
		
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ОповещениеОСписанияхНаХозНужды() Экспорт
	
	мДатаНачала		= НачалоДня(ТекущаяДата()) - 7*86400;
	мДатаОкончания 	= НачалоДня(ТекущаяДата()) - 1;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"If OBJECT_ID('tempdb..#ls') Is Not Null	Drop Table #ls
	|-----------------------------------------------------------------------------------------------
	|Create table #ls (id_tt int, id_tov int, summa numeric(15, 2)) 
	|
	|Insert into #ls
	|Exec ( 
	|	'Select 
	|		DTT.id_tt, 
	|		DTT.id_tov, 
	|		SUM(dtt.digust * dtt.price) as summa
	|	From vv03..DTT as DTT (nolock) 
	|	Where 
	|		date_tt Between '" + ВнешниеДанные.ФорматПоля(мДатаНачала) + "'	And '" + ВнешниеДанные.ФорматПоля(мДатаОкончания) + "'
	|	Group by
	|		DTT.id_tt, 
	|		DTT.id_tov
	|	Having
	|		Not SUM(dtt.digust * dtt.price) = 0' 
	|	) at [SRV-SQL03]
	|	
	|CREATE INDEX index_idtt
	|ON #ls(id_tt)
	|CREATE INDEX index_idtov
	|ON #ls(id_tov)
	|
	|Select
	|	Spr_StrEd._Description as name_tt,
	|	convert(nvarchar(1000), ISNULL(dtt.tovary_dlya_nujd, '')) as tovary_dlya_nujd,
	|	convert(numeric(15, 2), ISNULL(dtt.summa, 0)) as summa,
	|	convert(numeric(15, 2), ISNULL(dtt.summa_nujdy, 0)) as summa_nujdy,
	|	ISNULL(Spr_StrEd._Fld4145, '') as email_tt,
	|	SUBSTRING((
	|				Select
	|					'; '+  isnull(a.email, '')
	|				From (Select Distinct
	|						Pomoschniki.email as email,
	|						Pomoschniki.id_tt as id_tt
	|					  From Reports..Pomoschniki as Pomoschniki (nolock)) as a
	|				Where
	|					a.id_tt = dtt.id_tt
	|				for xml path ('')), 2, 1000) as email_pom									-- ISNULL(Pomoschniki.email, '') as email_pom
	|From (Select
	|			dtt.id_tt as id_tt,
	|			dtt.tovary_dlya_nujd as tovary_dlya_nujd,
	|			SUM(dtt.summa) as summa,
	|			SUM(Case When Spr_Nom._Fld10955 = 1	Then dtt.summa Else 0 End) as summa_nujdy 	-- товар используется на нужды магазина
	|		From (
	|           Select
	|				dtt.id_tt as id_tt,
	|				dtt.id_tov as id_tov,
	|				dtt.summa as summa,
	|				SUBSTRING((
	|					Select
	|						'; '+  isnull(a.Description, '')
	|					From (Select
	|							Spr_Nom._Description as Description,
	|							ls.id_tt as id_tt
	|						  From #ls as ls
	| 							Inner Join IzbenkaFin.._Reference29 as Spr_Nom (nolock)
	| 							on Spr_Nom._Fld760 = ls.id_tov
	|						  		And Spr_Nom._Fld10955 = 1) as a
	|					Where
	|						a.id_tt = dtt.id_tt
	|					for xml path ('')), 2, 1000) as tovary_dlya_nujd
	|			From #ls as dtt) as dtt
	| 		Inner Join IzbenkaFin.._Reference29 as Spr_Nom (nolock)
	| 		on Spr_Nom._Fld760 = dtt.id_tov
	|		Group by
	|			dtt.id_tt,
	|			dtt.tovary_dlya_nujd
	|		Having
	|			Not SUM(dtt.summa) = 0) as dtt
	| Inner Join IzbenkaFin.._Reference42 as Spr_StrEd (nolock)
	| on Spr_StrEd._Fld758 = dtt.id_tt
	|-----------------------------------------------------------------------------------------------
	|Drop Table	#ls";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Пока Выборка <> Неопределено
		И Выборка.Fields.Count <= 0 Цикл
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ТаблицаКОтправке = Новый ТаблицаЗначений;
	ТаблицаКОтправке.Колонки.Добавить("email"			, Новый ОписаниеТипов("Строка"));
	ТаблицаКОтправке.Колонки.Добавить("name_tt"			, Новый ОписаниеТипов("Строка"));
	ТаблицаКОтправке.Колонки.Добавить("summa"			, Новый ОписаниеТипов("Строка"));
	ТаблицаКОтправке.Колонки.Добавить("summa_nujdy"		, Новый ОписаниеТипов("Строка"));
	ТаблицаКОтправке.Колонки.Добавить("tovary_dlya_nujd", Новый ОписаниеТипов("Строка"));
	
	Попытка
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			
			СтрокаИмя 			= СокрЛП(Выборка.Fields("name_tt").Value);
			СтрокаСумма 		= Формат(Выборка.Fields("summa").Value, "ЧГ=");
			СтрокаСуммаНужды 	= Формат(Выборка.Fields("summa_nujdy").Value, "ЧГ=");
			СтрокаТоварыНужды 	= СокрЛП(Выборка.Fields("tovary_dlya_nujd").Value);
			
			Тек_email = СокрЛП(Выборка.Fields("email_tt").Value);
			Если ЗначениеЗаполнено(Тек_email) Тогда
				НоваяСтрока = ТаблицаКОтправке.Добавить();
				НоваяСтрока.email 				= Тек_email;
				НоваяСтрока.name_tt 			= СтрокаИмя;
				НоваяСтрока.summa 				= СтрокаСумма;
				НоваяСтрока.summa_nujdy 		= СтрокаСуммаНужды;
				НоваяСтрока.tovary_dlya_nujd 	= СтрокаТоварыНужды;
			КонецЕсли;
			
			Тек_email = СокрЛП(Выборка.Fields("email_pom").Value);
			Если ЗначениеЗаполнено(Тек_email) Тогда
				МассивПолучателей = Новый Массив;
				ПозТочкиСЗапятой = Найти(Тек_email, "; ");
				Если ПозТочкиСЗапятой > 0 Тогда
					Пока ПозТочкиСЗапятой > 0 Цикл
						МассивПолучателей.Добавить(Лев(Тек_email, ПозТочкиСЗапятой - 1));
						Тек_email = Сред(Тек_email, ПозТочкиСЗапятой + 2);
						ПозТочкиСЗапятой = Найти(Тек_email, "; ");
					КонецЦикла;
				КонецЕсли;
				Если НЕ Тек_email = "" Тогда
					МассивПолучателей.Добавить(Тек_email);
				КонецЕсли;
				Для Каждого ТекПолучатель Из МассивПолучателей Цикл
					НоваяСтрока = ТаблицаКОтправке.Добавить();
					НоваяСтрока.email 				= ТекПолучатель;
					НоваяСтрока.name_tt 			= СтрокаИмя;
					НоваяСтрока.summa 				= СтрокаСумма;
					НоваяСтрока.summa_nujdy 		= СтрокаСуммаНужды;
					НоваяСтрока.tovary_dlya_nujd 	= СтрокаТоварыНужды;
				КонецЦикла;
			КонецЕсли;
			
			Выборка.MoveNext();
			
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	//
	Если ТаблицаКОтправке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКОтправке.Сортировать("email, name_tt");
	
	
	УчетнаяЗапись 	= ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Профиль 		= УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
	
	ТекПолучатель 	= Неопределено;
	ТекстХТМЛСтр	= "";
	ШапкаХТМЛ		= "<table border='2'><tr align='center'><td>Торговая точка</td><td>Сумма</td><td>Сумма (нужды магазина)</td><td>Товары (нужды магазина)</td></tr>";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКОтправке Цикл
		
		Если ЗначениеЗаполнено(ТекПолучатель)
			И НЕ СтрокаТаблицы.email = ТекПолучатель Тогда
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Тема = "Списания товаров на дегустацию за период с " + Формат(мДатаНачала, "ДЛФ=Д") + " по " + Формат(мДатаОкончания, "ДЛФ=Д");
			
			Письмо.Отправитель 		= УчетнаяЗапись.Логин;
			Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
			
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = ТекПолучатель;
			
			Письмо.Тексты.Добавить(Письмо.Тема + ":");
			Письмо.Тексты.Добавить(ШапкаХТМЛ + ТекстХТМЛСтр + "</table>", ТипТекстаПочтовогоСообщения.HTML);
			ТекстХТМЛСтр = "";		
			
			Почта.Послать(Письмо);
			
		КонецЕсли;
		
		ТекстХТМЛСтр = ТекстХТМЛСтр + "<tr>";
		ТекстХТМЛСтр = ТекстХТМЛСтр + "<td>" + СтрокаТаблицы.name_tt 			+ "</td>";
		ТекстХТМЛСтр = ТекстХТМЛСтр + "<td>" + СтрокаТаблицы.summa 				+ "</td>";
		ТекстХТМЛСтр = ТекстХТМЛСтр + "<td>" + СтрокаТаблицы.summa_nujdy 		+ "</td>";
		ТекстХТМЛСтр = ТекстХТМЛСтр + "<td>" + СтрокаТаблицы.tovary_dlya_nujd 	+ "</td>";
		ТекстХТМЛСтр = ТекстХТМЛСтр + "</tr>";
		
		
		ТекПолучатель = СтрокаТаблицы.email;	
		
	КонецЦикла;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Списания товаров на дегустацию за период с " + Формат(мДатаНачала, "ДЛФ=Д") + " по " + Формат(мДатаОкончания, "ДЛФ=Д");
	
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = ТекПолучатель;
	
	Письмо.Тексты.Добавить(Письмо.Тема + ":");
	Письмо.Тексты.Добавить(ШапкаХТМЛ + ТекстХТМЛСтр + "</table>", ТипТекстаПочтовогоСообщения.HTML);
	
	Почта.Послать(Письмо);
	
	//
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ОповещениеОРазницеМеждуВозвратамиВОбращенияхИПродажами() Экспорт
	
	мДатаОкончания 	= НачалоДня(ТекущаяДата()) - 1;
	мДатаНачала 	= НачалоМесяца(мДатаОкончания);
	//
	
	ТаблицаНедель = Новый ТаблицаЗначений;
	ТаблицаНедель.Колонки.Добавить("НомерНедели"	, Новый ОписаниеТипов("Число"));
	ТаблицаНедель.Колонки.Добавить("ДатаНачала"		, Новый ОписаниеТипов("Дата"));
	ТаблицаНедель.Колонки.Добавить("ДатаОкончания"	, Новый ОписаниеТипов("Дата"));
	
	ТекДата = мДатаНачала;
	Пока ТекДата < КонецНедели(мДатаОкончания) Цикл
		СтрокаНедель = ТаблицаНедель.Добавить();
		СтрокаНедель.НомерНедели 	= НеделяГода(ТекДата);
		СтрокаНедель.ДатаНачала 	= Макс(НачалоНедели(ТекДата), НачалоМесяца(ТекДата));
		СтрокаНедель.ДатаОкончания 	= Мин(КонецНедели(ТекДата), НачалоДня(мДатаОкончания));
		
		ТекДата = ТекДата + 7*86400;
	КонецЦикла;
	
	// получение таблицы из SQL
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса = 
	"If OBJECT_ID('tempdb..#VTProizvoditeli') Is Not Null	Drop Table #VTProizvoditeli
	|If OBJECT_ID('tempdb..#Obrascheniya_Base') Is Not Null	Drop Table #Obrascheniya_Base
	|If OBJECT_ID('tempdb..#VT_PricePost_Predv') Is Not Null	Drop Table #VT_PricePost_Predv
	|If OBJECT_ID('tempdb..#VT_PricePost') Is Not Null		Drop Table #VT_PricePost
	|If OBJECT_ID('tempdb..#VT_Obrascheniya') Is Not Null	Drop Table #VT_Obrascheniya
	|If OBJECT_ID('tempdb..#dtt') Is Not Null				Drop Table #dtt
	|If OBJECT_ID('tempdb..#dtt_sokr') Is Not Null			Drop Table #dtt_sokr
	|If OBJECT_ID('tempdb..#tov_obr') Is Not Null			Drop Table #tov_obr
	|If OBJECT_ID('tempdb..#VT_obr_bezTT') Is Not Null		Drop Table #VT_obr_bezTT
	|If OBJECT_ID('tempdb..#TovAss_sokr') Is Not Null		Drop Table #TovAss_sokr
	|If OBJECT_ID('tempdb..#dtt_week') Is Not Null			Drop Table #dtt_week
	|
	|-----------------------------------------------------------------------------------------
	|Select
	|	Kontr._IDRRef as Kontr,
	|	Proizv._Fld394_RRRef as har,
	|	SprHar._OwnerIDRRef as Tovar
	|Into #VTProizvoditeli
	|From IzbenkaFin.._InfoRg393 as Proizv (nolock) 
	| Inner join IzbenkaFin.._Reference27 as Kontr (nolock)
	| On Proizv._Fld396_RRRef = Kontr._IDRRef
	| Inner Join IzbenkaFin.._Reference2539 as SprHar (nolock)
	| On SprHar._IDRRef = Proizv._Fld394_RRRef
	|Where
	|	Proizv._Fld395RRef = 0x9B0FBEA8EE4FEDDB4CAF6656F51808B7
	|
	|-----------------------------------------------------------------------------------------
	|Select
	|	DATENAME(week, Reg_Obrascheniya._Fld3661) as Num_Week,
	|	Reg_Obrascheniya._Fld3526RRef as TT,
	|	Reg_Obrascheniya._Fld3531RRef as Tovar,
	|	Reg_Obrascheniya._Fld3532RRef as Proizvoditel,
	|	Reg_Obrascheniya._Fld3661 as DataDoc,
	|	1 as schetchik
	|Into #Obrascheniya_Base
	|From IzbenkaFin.._InfoRg3518 as Reg_Obrascheniya (nolock)
	|Where
	|	Year(Reg_Obrascheniya._Fld3661) > 4000
	|	And (DateAdd(Year, -2000, Reg_Obrascheniya._Fld3661) Between " + ВнешниеДанные.ФорматПоля(мДатаНачала) + " And " + ВнешниеДанные.ФорматПоля(мДатаОкончания) + ")
	|	And Not Reg_Obrascheniya._Fld3531RRef = 0x00000000000000000000000000000000
	|	And (Reg_Obrascheniya._Fld3522RRef in (0xBC22005056A0010611E5ECD8BE7CCEC7,       -- тип обращения
	|											0xBC22005056A0010611E5ECD8CBA33BB5,
	|											0xBC22005056A0010611E5ECD8E8988AA6,
	|											0xBC22005056A0010611E5ECD902842F32,
	|											0xBC22005056A0010611E5ECD96529905C)
	|		 Or	Reg_Obrascheniya._Fld8859RRef in (0xAEF8005056A0010611E47C60082C8660,	 -- тип списания/возврата
	|												0xAEF8005056A0010611E47C60082C8661,
	|												0xA326005056A06B0B11E7097A37B61CD1,
	|												0xAEF8005056A0010611E47C60082C8662,
	|												0xAEF8005056A0010611E47C60082C8664,
	|												0xAEF8005056A0010611E47C60082C866C,
	|												0xAEF8005056A0010611E47C60082C8666,
	|												0xAEF8005056A0010611E47C60082C8667,
	|												0xAEF8005056A0010611E47C60082C8665,
	|												0xAEF8005056A0010611E47C60082C8669))
	|
	|-----------------------------------------------------------------------------------------
	|Select Distinct
	|	VT_Obrascheniya.Num_Week as Num_Week,
	|	VT_Obrascheniya.Tovar as Tovar,
	|	Tovari.id_tov as id_tov
	|Into #tov_obr
	|From #Obrascheniya_Base as VT_Obrascheniya
	| Inner Join M2..Tovari as Tovari (nolock)
	| On Tovari.Ref = VT_Obrascheniya.Tovar
	| 
	|-----------------------------------------------------------------------------------------
	|Select
	|	Obrascheniya_Base.Num_Week as Num_Week,
	|	Obrascheniya_Base.Tovar as Tovar,
	|	Obrascheniya_Base.Proizvoditel as Proizvoditel,
	|	Proizv.har as har
	|Into #VT_obr_bezTT
	|From #Obrascheniya_Base as Obrascheniya_Base (nolock)
	| Left join #VTProizvoditeli as Proizv
	| On Proizv.Tovar = Obrascheniya_Base.Tovar
	|	And Proizv.Kontr = Obrascheniya_Base.Proizvoditel
	|Where
	|	Obrascheniya_Base.TT = 0x00000000000000000000000000000000			-- ТТ не указана 
	|	
	|-----------------------------------------------------------------------------------------
	|Select
	|	TovAss._Fld3958RRef as TT,
	|	TovAss._Fld3959RRef as Tovar,
	|	TovAss._Fld3960RRef as har,
	|	TovAss._Fld3961 as vivedena,
	|	TovAss.id_tt_1C as id_tt,
	|	TovAss.id_tov_1C as id_tov,
	|	Convert(Date, DateAdd(Year, -2000, TovAss._Period)) as _Period
	|Into #TovAss_sokr
	|From IzbenkaFin.._InfoRg3957 as TovAss (nolock)
	| Inner Join #tov_obr as tov_obr
	| On tov_obr.id_tov = TovAss.id_tov_1C
	|Where 
	|   Year(TovAss._Period) > 4000 
	| 
	|-----------------------------------------------------------------------------------------
	|Select
	|	PricePost._Period as Period,
	|	PricePost._Fld3218RRef as Tovar,
	|	PricePost._Fld3221RRef as har,
	|	PricePost._Fld5209RRef as Postavschik
	|Into #VT_PricePost_Predv
	|From IzbenkaFin.._InfoRg3217 as PricePost (nolock)
	| Inner Join #tov_obr as tov_obr
	| On PricePost._Fld3218RRef = tov_obr.Tovar
	|
	|Select
	|	PricePost.Tovar as Tovar,
	|	PricePost.har as har,
	|	PricePost.Postavschik as Postavschik
	|Into #VT_PricePost
	|From #VT_PricePost_Predv as PricePost
	| Inner Join
	|	(Select
	|		Tovar as Tovar, 
	|		har as har,
	|		MAX(Period) as Period
	|	 From #VT_PricePost_Predv
	|	 Group by
	|		Tovar, 
	|		har) as Max_Periody
	| On Max_Periody.Tovar = PricePost.Tovar
	|	And Max_Periody.har = PricePost.har
	|	And Max_Periody.Period = PricePost.Period
	|
	|-----------------------------------------------------------------------------------------
	|Select
	|	VT_Obrascheniya.Num_Week as Num_Week,
	|	VT_Obrascheniya.Tovar as Tovar,
	|	Tovari.id_tov as id_tov,
	|	ISNULL(Tovari.Name_tov, '') as Name_tov,
	|	VT_Obrascheniya.Kontr as Proizvoditel,
	|	SUM(Convert(numeric(10, 2), VT_Obrascheniya.schetchik)) as schetchik
	|Into #VT_Obrascheniya
	|From 
	|	(Select
	|		VTObr.Num_Week as Num_Week,
	|		VTObr.tov as Tovar,
	|		VT_PricePost.Postavschik as Kontr,
	|		1 as schetchik
	|	From (Select
	|			Obrascheniya_Base.Num_Week as Num_Week,
	|			Obrascheniya_Base.Tovar as tov,
	|			Obrascheniya_Base.DataDoc as DataDoc,
	|			TovAss.har as har,
	|			ROW_NUMBER() OVER (partition by
	|								Obrascheniya_Base.TT,
	|								Obrascheniya_Base.Tovar,
	|								Obrascheniya_Base.DataDoc
	|							   Order by TovAss._period Desc) as rn
	|		From #Obrascheniya_Base as Obrascheniya_Base (nolock)
	|		 Left join #TovAss_sokr as TovAss (nolock)
	|		 On TovAss.TT = Obrascheniya_Base.TT
	|			And TovAss.Tovar = Obrascheniya_Base.Tovar
	|			And TovAss._period <= Obrascheniya_Base.DataDoc
	|		Where
	|			Not Obrascheniya_Base.TT = 0x00000000000000000000000000000000	-- ТТ указана: характеристика и производитель из тов. ассортимента
	|		) as VTObr
	|	 Left join #VT_PricePost as VT_PricePost
	|	 On VT_PricePost.har = VTObr.har
	|	Where
	|		VTObr.rn = 1	
	|		And VT_PricePost.Postavschik is not null
	|	
	|	Union All -- ТТ не указана, но производитель из обращения есть в производителях характеристик товара
	|
	|	Select
	|		VT_obr_bezTT.Num_Week,
	|		VT_obr_bezTT.Tovar,
	|		VT_PricePost.Postavschik,
	|		1
	|	From #VT_obr_bezTT as VT_obr_bezTT
	|	 Left join #VT_PricePost as VT_PricePost
	|	 On VT_PricePost.har = VT_obr_bezTT.har
	|	Where
	|		VT_obr_bezTT.har is not null
	|	
	|	Union All -- ТТ не указана, и производителя из обращения нет в производителях характеристик товара, это поставщик
	|
	|	Select
	|		VT_obr_bezTT.Num_Week,
	|		VT_obr_bezTT.Tovar,
	|		VT_obr_bezTT.Proizvoditel,
	|		1
	|	From #VT_obr_bezTT as VT_obr_bezTT
	|	Where
	|		VT_obr_bezTT.har is null
	|	) as VT_Obrascheniya
	| Left Join M2..Tovari as Tovari (nolock)
	| On Tovari.Ref = VT_Obrascheniya.Tovar
	|Group by
	|	VT_Obrascheniya.Num_Week,
	|	VT_Obrascheniya.Tovar,
	|	Tovari.id_tov,
	|	ISNULL(Tovari.Name_tov, ''),
	|	VT_Obrascheniya.Kontr
	|	
	|
	|----------------------------------------------------------------------
	|create table #dtt (
	|	id_tt int,
	|	id_tov int,
	|	date_tt date,
	|	num_week numeric(2, 0),
	|	summa numeric(15, 2)) 
	|
	|Insert into #dtt
	|Exec (
	|	'Select
	|		DTT.id_tt,
	|		DTT.id_tov,
	|		Convert(date, DTT.date_tt),
	|		DateName(week, DTT.date_tt),
	|		SUM((DTT.quantity - DTT.discount50_qty - DTT.discount50_sms_qty))-- * dtt.price)
	|	From vv03..DTT as DTT (nolock) 
	|	Where
	|		DTT.date_tt Between '" + ВнешниеДанные.ФорматПоля(мДатаНачала) + "' and '" + ВнешниеДанные.ФорматПоля(мДатаОкончания) + "'
	|	Group by
	|		DTT.id_tt,
	|		DTT.id_tov,
	|		Convert(date, DTT.date_tt),
	|		DateName(week, DTT.date_tt)')at [SRV-SQL03]
	|	 
	|Select
	|	dtt.id_tt,
	|	dtt.id_tov,
	|	dtt.date_tt,
	|	dtt.num_week,
	|	dtt.summa
	|Into #dtt_sokr
	|From #dtt as dtt
	| Inner Join #tov_obr as tov_obr
	| On tov_obr.num_week = dtt.num_week
	|	And tov_obr.id_tov = dtt.id_tov
	|
	|Select
	|	dtt_.Num_Week as Num_Week,
	|	dtt_.id_tov as id_tov,
	|	VT_PricePost.Postavschik as Kontr,
	|	SUM(dtt_.summa) as summa
	|Into #dtt_week
	|From
	|	(Select
	|		dtt.num_week as num_week,
	|		dtt.id_tov as id_tov,
	|		dtt.summa as summa,
	|		TovAss.har as har,
	|		ROW_NUMBER() OVER (partition by
	|							dtt.id_tt,
	|							dtt.id_tov,
	|							dtt.date_tt
	|						   Order by TovAss._period Desc) as rn
	|	From #dtt_sokr as dtt
	|	 Left join #TovAss_sokr as TovAss
	|	 On dtt.id_tt = TovAss.id_tt
	|		And dtt.id_tov = TovAss.id_tov
	|		And TovAss._period <= dtt.date_tt) as dtt_
	|	 Left join #VT_PricePost as VT_PricePost
	|	 On VT_PricePost.har = dtt_.har
	|	Where
	|		dtt_.rn = 1	
	|		And VT_PricePost.Postavschik is not null
	|Group by
	|	dtt_.Num_Week,
	|	dtt_.id_tov,
	|	VT_PricePost.Postavschik
	|
	|------------------------------------------------------------	
	|
	|
	|Select
	|	Osnovnaya.Num_Week as Num_Week,
	|	Osnovnaya.Name_tov as Name_tov,
	|	ISNULL(SprKontr._Description, '') as Name_Kontr,
	|	SUM(Osnovnaya.Kol_Obr) as Kol_Obr,
	|	SUM(Osnovnaya.Kol_Obr_Common) as Kol_Obr_Common,
	|	Case
	|		When SUM(Osnovnaya.Kol_Obr_Common) > 0
	|		Then Convert(numeric(6, 2), SUM(Osnovnaya.Kol_Obr) * 100 / SUM(Osnovnaya.Kol_Obr_Common)) Else 0
	|	End as Procent_Obr,
	|	SUM(Osnovnaya.Summa) as Summa,
	|	SUM(Osnovnaya.Summa_Common) as Summa_Common,
	|	Case
	|		When SUM(Osnovnaya.Summa_Common) <> 0
	|		Then Convert(numeric(6, 2), SUM(Osnovnaya.Summa) * 100 / SUM(Osnovnaya.Summa_Common)) Else 0
	|	End as Procent_Sale,
	|	Case
	|		When SUM(Osnovnaya.Kol_Obr_Common) > 0
	|		Then Convert(numeric(6, 2), SUM(Osnovnaya.Kol_Obr) * 100 / SUM(Osnovnaya.Kol_Obr_Common)) Else 0
	|	End - Case
	|		When SUM(Osnovnaya.Summa_Common) <> 0
	|		Then Convert(numeric(6, 2), SUM(Osnovnaya.Summa) * 100 / SUM(Osnovnaya.Summa_Common)) Else 0
	|	End as Raznica
	|From 
	|	(Select
	|		VT_Obrascheniya.Num_Week as Num_Week,
	|		VT_Obrascheniya.Name_tov as Name_tov,
	|		VT_Obrascheniya.Proizvoditel as Kontr,
	|		VT_Obrascheniya.schetchik as Kol_Obr,
	|		Obr_Common.Kol_Obr as Kol_Obr_Common,
	|		0 as Summa,
	|		0 as Summa_Common
	|	From #VT_Obrascheniya as VT_Obrascheniya
	|	 Inner join
	|		(Select
	|			VT_Obrascheniya.Num_Week as Num_Week,
	|			VT_Obrascheniya.Tovar as Tovar,
	|			SUM(VT_Obrascheniya.schetchik) as Kol_Obr
	|		From #VT_Obrascheniya as VT_Obrascheniya
	|		Group by
	|			VT_Obrascheniya.Num_Week,
	|			VT_Obrascheniya.Tovar) as Obr_Common
	|		On Obr_Common.Num_Week = VT_Obrascheniya.Num_Week
	|			And Obr_Common.Tovar = VT_Obrascheniya.Tovar
	|
	|	Union All
	|
	|	Select
	|		dtt.Num_Week,
	|		ISNULL(Tovari.Name_tov, ''),
	|		dtt.Kontr,
	|		0,
	|		0,
	|		dtt.summa,
	|		dtt_Common.summa
	|	From #dtt_week as dtt
	|	 Inner join
	|		(Select
	|			dtt_week.Num_Week as Num_Week,
	|			dtt_week.id_tov as id_tov,
	|			SUM(dtt_week.summa) as summa
	|		From #dtt_week as dtt_week
	|		Group by
	|			dtt_week.Num_Week,
	|			dtt_week.id_tov) as dtt_Common
	|		On dtt_Common.Num_Week = dtt.Num_Week
	|			And dtt_Common.id_tov = dtt.id_tov
	|	 Left Join M2..Tovari as Tovari (nolock)
	|	 On Tovari.id_tov = dtt.id_tov) as Osnovnaya
	| Inner Join IzbenkaFin.._Reference27 as SprKontr (nolock)
	| On SprKontr._IDRRef = Osnovnaya.Kontr	
	|Group by
	|	Osnovnaya.Num_Week,
	|	Osnovnaya.Name_tov,
	|	ISNULL(SprKontr._Description, '')
	|Order by
	|	Osnovnaya.Name_tov,
	|	ISNULL(SprKontr._Description, ''),
	|	Osnovnaya.Num_Week
	|
	|------------------------------------------------------------	
	|Drop Table #VTProizvoditeli
	|Drop Table #Obrascheniya_Base
	|Drop Table #VT_PricePost_Predv	
	|Drop Table #VT_PricePost	
	|Drop Table #VT_Obrascheniya	
	|Drop Table #dtt
	|Drop Table #dtt_sokr
	|Drop Table #tov_obr
	|Drop Table #VT_obr_bezTT
	|Drop Table #TovAss_sokr
	|Drop Table #dtt_week";
	
	//ТекстХТМЛ = "<table border='2'><tr align='center'><td>Товар</td><td>Склад</td><td>Номенклатура</td><td>Характ.</td><td>Кол-во заказано</td></tr>";
	ТаблицаОтчета = Новый ТаблицаЗначений;
	ТаблицаОтчета.Колонки.Добавить("Товар");
	ТаблицаОтчета.Колонки.Добавить("Контрагент");
	Для Каждого ТекНеделя Из ТаблицаНедель Цикл
		ТаблицаОтчета.Колонки.Добавить("ПроцентОбращ_" 		+ Формат(ТекНеделя.НомерНедели, "ЧГ="));
		ТаблицаОтчета.Колонки.Добавить("ПроцентПродажи_" 	+ Формат(ТекНеделя.НомерНедели, "ЧГ="));
		ТаблицаОтчета.Колонки.Добавить("Разница_" 			+ Формат(ТекНеделя.НомерНедели, "ЧГ="));
	КонецЦикла;
	ТаблицаОтчета.Колонки.Добавить("ПроцентОбращ_Общий");
	ТаблицаОтчета.Колонки.Добавить("ПроцентПродажи_Общий");
	ТаблицаОтчета.Колонки.Добавить("Разница_Общий");
	
	ТекНоменклатура = Неопределено;
	ТекКонтрагент 	= Неопределено;
	СтрокаОтчета 	= Неопределено;
	КолОбр 			= 0;
	КолОбр_Общ 		= 0;
	КолПродажи 		= 0;
	КолПродажи_Общ 	= 0;
	
	//
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
				
				ЗначениеНоменклатуры 	= Выборка.Fields("Name_Tov").Value;
				ЗначениеКонтрагент 		= Выборка.Fields("Name_Kontr").Value;
				Если (НЕ ЗначениеНоменклатуры = ТекНоменклатура)
					ИЛИ НЕ ЗначениеКонтрагент = ТекКонтрагент Тогда
					Если НЕ СтрокаОтчета = Неопределено Тогда	// итоговые значения
						
						СтрокаОтчета.ПроцентОбращ_Общий 	= ?(НЕ КолОбр_Общ = 0		, Окр(КолОбр * 100 / КолОбр_Общ, 2)			, 0);
						СтрокаОтчета.ПроцентПродажи_Общий 	= ?(НЕ КолПродажи_Общ = 0	, Окр(КолПродажи * 100 / КолПродажи_Общ, 2)	, 0);
						СтрокаОтчета.Разница_Общий 			= СтрокаОтчета.ПроцентОбращ_Общий - СтрокаОтчета.ПроцентПродажи_Общий;
						
						КолОбр 			= 0;
						КолОбр_Общ 		= 0;
						КолПродажи 		= 0;
						КолПродажи_Общ 	= 0;
					КонецЕсли;
					
					СтрокаОтчета = ТаблицаОтчета.Добавить();
					СтрокаОтчета.Товар 		= ЗначениеНоменклатуры;
					СтрокаОтчета.Контрагент = ЗначениеКонтрагент;
					
					ТекНоменклатура = ЗначениеНоменклатуры;
					ТекКонтрагент 	= ЗначениеКонтрагент;
				КонецЕсли;
				
				ТекНомерНедели = Формат(Выборка.Fields("Num_Week").Value, "ЧГ=");
				СтрокаОтчета["ПроцентОбращ_" 	+ ТекНомерНедели] = Выборка.Fields("Procent_Obr").Value;
				СтрокаОтчета["ПроцентПродажи_" 	+ ТекНомерНедели] = Выборка.Fields("Procent_Sale").Value;
				СтрокаОтчета["Разница_" 		+ ТекНомерНедели] = Выборка.Fields("Raznica").Value;
				КолОбр 			= КолОбр 			+ Выборка.Fields("Kol_Obr").Value;
				КолОбр_Общ 		= КолОбр_Общ 		+ Выборка.Fields("Kol_Obr_Common").Value;
				КолПродажи 		= КолПродажи 		+ Выборка.Fields("Summa").Value;
				КолПродажи_Общ 	= КолПродажи_Общ 	+ Выборка.Fields("Summa_Common").Value;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	Если НЕ СтрокаОтчета = Неопределено Тогда	// итоговые значения
		СтрокаОтчета.ПроцентОбращ_Общий 	= ?(НЕ КолОбр_Общ = 0		, Окр(КолОбр * 100 / КолОбр_Общ, 2)			, 0);
		СтрокаОтчета.ПроцентПродажи_Общий 	= ?(НЕ КолПродажи_Общ = 0	, Окр(КолПродажи * 100 / КолПродажи_Общ, 2)	, 0);
		СтрокаОтчета.Разница_Общий 			= СтрокаОтчета.ПроцентОбращ_Общий - СтрокаОтчета.ПроцентПродажи_Общий;
	КонецЕсли;
	
	ADOСоединение.Close();		
	
	
	//
	ТаблицаОтчета.Сортировать("Разница_Общий Убыв, Товар, Контрагент");
	
	
	// вывод в отчет
	
	//
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP 	= "10.0.0.30";
	ИПП.ПортSMTP 			= 25;
	ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         	= "";
	ИПП.ПользовательSMTP   	= "";
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель = "no-reply@vkusvill.ru";
	
	Письмо.Получатели.Добавить("product_1@vkusvill.ru");
	//Письмо.Получатели.Добавить("tuta@automacon.ru");
	Письмо.Тема = "Соотношение жалоб/возвратов к продажам товаров по поставщикам за период с " + Формат(мДатаНачала, "ДЛФ=Д") + " по " + Формат(мДатаОкончания, "ДЛФ=Д");
	
	
	Письмо.Тексты.Добавить("По общему соотношению за период:" + Символы.ПС);
	
	ТекстХТМЛ = ПолучитьТекстХТМЛРазницаМеждуВозвратамиВОбращенияхИПродажами(ТаблицаОтчета, ТаблицаНедель);
	Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
	
	Письмо.Тексты.Добавить(Символы.ПС + Символы.ПС + "По товарам:" + Символы.ПС);
	ТаблицаОтчета.Сортировать("Товар, Разница_Общий Убыв, Контрагент");
	ТекстХТМЛ = ПолучитьТекстХТМЛРазницаМеждуВозвратамиВОбращенияхИПродажами(ТаблицаОтчета, ТаблицаНедель);
	Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
	
	//
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(ИПП);
		Почта.Послать(Письмо);
		Почта.Отключиться();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();		
	КонецПопытки;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// АУТСОРСИНГ

Процедура ОтправкаФактаПриходаУходаСотрудниковАутсорсинг() Экспорт
	
	// выборка из журнала
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИДКонтрагента", 13251); // пока только для КЛЕВЕР СТАФФ
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖурналУчетаСотрудниковАутсорсинг.ДатаОтметки,
	|	ЖурналУчетаСотрудниковАутсорсинг.Сотрудник,
	|	ЖурналУчетаСотрудниковАутсорсинг.ЛистУчета,
	|	ЖурналУчетаСотрудниковАутсорсинг.Сотрудник.Наименование КАК ФИО,
	|	ЖурналУчетаСотрудниковАутсорсинг.Сотрудник.ИД КАК ИДСотрудника,
	|	ЖурналУчетаСотрудниковАутсорсинг.ТорговаяТочка.Наименование КАК НаименованиеТТ,
	|	ЖурналУчетаСотрудниковАутсорсинг.ТорговаяТочка.id_TT КАК id_TT,
	|	ЖурналУчетаСотрудниковАутсорсинг.ТорговаяТочка.Адрес КАК АдресТТ,
	|	ЖурналУчетаСотрудниковАутсорсинг.ТорговаяТочка.НомерТочки КАК НомерТТ
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковАутсорсинг КАК ЖурналУчетаСотрудниковАутсорсинг
	|ГДЕ
	|	ЖурналУчетаСотрудниковАутсорсинг.ДатаОтметки >= ДАТАВРЕМЯ(2016, 7, 1)
	|	И ЖурналУчетаСотрудниковАутсорсинг.Контрагент.ИД = &ИДКонтрагента
	|	И НЕ ЖурналУчетаСотрудниковАутсорсинг.ОтправленоWeb";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	
	// подготовка данных к отправке
	ТаблицаКОтправке = ТаблицаЗапроса.Скопировать(,	"ДатаОтметки, ФИО, ИДСотрудника, НаименованиеТТ, id_TT, АдресТТ, НомерТТ");
	//ТаблицаКОтправке = ТаблицаЗапроса.Скопировать(Новый Структура("ИДКонтрагента", 13251),
	//												"ДатаОтметки, ФИО, ИДСотрудника, НаименованиеТТ, id_TT, АдресТТ, НомерТТ");
	
	ТаблицаКОтправке.Колонки.Добавить("ШтрихКод", Новый ОписаниеТипов("Строка"));
	СпрПерсоналККМ = Справочники.ПерсоналККМ;
	Для Каждого СтрокаТаблицы Из ТаблицаКОтправке Цикл
		ТекПерсоналККМ = СпрПерсоналККМ.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаТаблицы.ИДСотрудника, "ЧГ=0"), 10));
		Если НЕ ТекПерсоналККМ.Пустая() Тогда
			СтрокаТаблицы.ШтрихКод = ТекПерсоналККМ.Пароль;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтправки = Новый Структура("Логин, ТаблицаДанных", "Izbenka", ТаблицаКОтправке);
	
	ХранилищеОтправки = Новый ХранилищеЗначения(СтруктураОтправки);
	
	
	// запуск веб-сервиса стороннего
	WSОпределения = Новый WSОпределения("http://obmenout.oak24.ru:6698/obmenout/ws/WS_OuterService?wsdl", "Izbenka", "666");
	WSПрокси = Новый WSПрокси(WSОпределения, "WS_OuterService", "WS_OuterService", "WS_OuterServiceSoap");
	WSПрокси.Пользователь 	= "izbenka";             
	WSПрокси.Пароль 		= "666";     
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("WS_OuterService").Получить("ОтметкаПриходаУхода");
	WSПараметр     = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	
	WSПараметр.InputData = ХранилищеОтправки;
	
	Ответ = WSПрокси.ОтметкаПриходаУхода(ХранилищеОтправки);
	
	
	// регистрация в поле ОтправленоWeb записей регистра журнала
	Если Ответ = Истина Тогда
		РегЖурнал = РегистрыСведений.ЖурналУчетаСотрудниковАутсорсинг;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегЖурнал.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДатаОтметки 	= Выборка.ДатаОтметки;
			МенеджерЗаписи.Сотрудник 	= Выборка.Сотрудник;
			МенеджерЗаписи.ЛистУчета 	= Выборка.ЛистУчета;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ОтправленоWeb = Истина;
				Попытка
					МенеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаИзмененийПотребностиВСотрудникахАутсорсинг() Экспорт
	
	// выборка из истории изменений
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИДКонтрагента", 13251); // пока только для КЛЕВЕР СТАФФ
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияИзменений.Период КАК ДатаРегистрации,
	|	ИсторияИзменений.ДатаНачала,
	|	ИсторияИзменений.Контрагент,
	|	ИсторияИзменений.Должность,
	|	ИсторияИзменений.Должность.Код КАК КодДолжности,
	|	ИсторияИзменений.ТорговаяТочка,
	|	ИсторияИзменений.ТорговаяТочка.Наименование КАК НаименованиеТТ,
	|	ИсторияИзменений.ТорговаяТочка.id_TT КАК id_TT,
	|	ИсторияИзменений.ТорговаяТочка.Адрес КАК АдресТТ,
	|	ИсторияИзменений.ТорговаяТочка.НомерТочки КАК НомерТТ,
	|	ИсторияИзменений.КоличествоЧеловек КАК Количество,
	|	ИсторияИзменений.НачалоСмены,
	|	ИсторияИзменений.ОкончаниеСмены,
	|	ИсторияИзменений.Отмена
	|ИЗ
	|	РегистрСведений.ИсторияИзмененийПотребностиВПерсоналеАутсорсинг КАК ИсторияИзменений
	|ГДЕ
	|	ИсторияИзменений.Период > ДАТАВРЕМЯ(2016, 6, 30)
	|	И ИсторияИзменений.Контрагент.ИД = &ИДКонтрагента
	|	И НЕ ИсторияИзменений.ОтправленоWeb";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	// подготовка данных к отправке
	ТаблицаКОтправке = РезультатЗапроса.Выгрузить().Скопировать(, "ДатаРегистрации, ДатаНачала, КодДолжности, НаименованиеТТ, id_TT, АдресТТ, НомерТТ, Количество, НачалоСмены, ОкончаниеСмены, Отмена");
	//ТаблицаКОтправке = РезультатЗапроса.Выгрузить().Скопировать(Новый Структура("ИДКонтрагента", 13251),
	//			"ДатаРегистрации, ДатаНачала, КодДолжности, НаименованиеТТ, id_TT, АдресТТ, НомерТТ, Количество, НачалоСмены, ОкончаниеСмены, Отмена");
	
	СтруктураОтправки = Новый Структура("Логин, ТаблицаДанных", "Izbenka", ТаблицаКОтправке);
	
	ХранилищеОтправки = Новый ХранилищеЗначения(СтруктураОтправки);
	
	
	// запуск веб-сервиса стороннего
	WSОпределения = Новый WSОпределения("http://obmenout.oak24.ru:6698/obmenout/ws/WS_OuterService?wsdl", "Izbenka", "666");
	WSПрокси = Новый WSПрокси(WSОпределения, "WS_OuterService", "WS_OuterService", "WS_OuterServiceSoap");
	WSПрокси.Пользователь 	= "izbenka";             
	WSПрокси.Пароль 		= "666";     
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("WS_OuterService").Получить("ИзмененияВПотребностиПерсонала");
	WSПараметр     = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	
	WSПараметр.InputData = ХранилищеОтправки;
	
	Ответ = WSПрокси.ИзмененияВПотребностиПерсонала(ХранилищеОтправки);
	
	
	// регистрация в поле ОтправленоWeb записей регистра истории изменений
	Если Ответ = Истина Тогда
		РегЖурнал = РегистрыСведений.ИсторияИзмененийПотребностиВПерсоналеАутсорсинг;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегЖурнал.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 			= Выборка.ДатаРегистрации;
			МенеджерЗаписи.Контрагент 		= Выборка.Контрагент;
			МенеджерЗаписи.ТорговаяТочка 	= Выборка.ТорговаяТочка;
			МенеджерЗаписи.ДатаНачала 		= Выборка.ДатаНачала;
			МенеджерЗаписи.Должность 		= Выборка.Должность;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ОтправленоWeb = Истина;
				Попытка
					МенеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		МенеджерЗаписи = Неопределено;// забота о памяти приложения 1С
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаЖурналаУчетаСотрудниковАутсорсинг() Экспорт
	
	//
	ДатаПоследнейЗагрузки = Константы.ДатаЗагрузкиПриходовУходовАутсорсинг.Получить();
	Если НЕ ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда
		Константы.ДатаЗагрузкиПриходовУходовАутсорсинг.Установить(НачалоДня(ТекущаяДата()) - 86400);
		ДатаПоследнейЗагрузки = НачалоДня(ТекущаяДата()) - 86400;
	КонецЕсли;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	Константы.ДатаЗагрузкиПриходовУходовАутсорсинг.Установить(ТекущаяДата());
	
	//
	ЗапросТТ = Новый Запрос;
	ЗапросТТ.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.НомерТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)";
	ТабТТ = ЗапросТТ.Выполнить().Выгрузить();
	ТабТТ.Индексы.Добавить("НомерТочки");
	
	//
	ЗапросСотрудники = Новый Запрос;
	ЗапросСотрудники.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиАутсорсинг.Ссылка,
	|	СотрудникиАутсорсинг.ИД,
	|	СотрудникиАутсорсинг.Должность,
	|	СотрудникиАутсорсинг.ГруппаСотрудников
	|ИЗ
	|	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг";
	ТабСотрудники = ЗапросСотрудники.Выполнить().Выгрузить();
	ТабСотрудники.Индексы.Добавить("ИД");
	
	//
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыСотрудников.ГруппаСотрудников,
	|	КонтрагентыСотрудников.Контрагент
	|ИЗ
	|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(, ) КАК КонтрагентыСотрудников";
	ТабКонтрагентовСотрудников = ЗапросКонтрагенты.Выполнить().Выгрузить();
	ТабКонтрагентовСотрудников.Индексы.Добавить("ГруппаСотрудников");
	
	ПустойКонтрагент 	= Справочники.Контрагенты.ПустаяСсылка();
	ПустойЛистУчета 	= Документы.ЛистУчета.ПустаяСсылка();
	РегСв 				= РегистрыСведений.ЖурналУчетаСотрудниковАутсорсинг;
	
	// тип розничной точки - Магазин
	ТекстЗапроса =
	"SELECT
	|	CONVERT(date, dbo_Checks.CloseDate) as CloseDate,
	|	dbo_Checks.ShopNo as ShopNo,
	|	dbo_Checks.CashierID as CashierID,
	|   MIN(dbo_Checks.CloseDate) as ДатаПервого,
	|   MAX(dbo_Checks.CloseDate) as ДатаПоследнего
	|FROM
	|	SMS_Union.dbo.Checks as dbo_Checks (nolock)
	|WHERE
	|	dbo_Checks.CloseDate >= '" + Формат(ДатаПоследнейЗагрузки + 1, "ДФ=yyyy-MM-ddTHH:mm:ss") + "' 
	|GROUP BY
	|	CONVERT(date, dbo_Checks.CloseDate),
	|	dbo_Checks.ShopNo,
	|	dbo_Checks.CashierID";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Если НЕ Выборка.EOF() Тогда
		
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			
			мНомерТочки 	= Выборка.Fields("ShopNo").Value;
			СтрокаТТ = ТабТТ.Найти(мНомерТочки, "НомерТочки");
			Если СтрокаТТ = Неопределено Тогда
				Выборка.MoveNext();
				Продолжить;
			КонецЕсли;
			мИДСотрудника 	= Выборка.Fields("CashierID").Value;
			СтрокаСотрудник = ТабСотрудники.Найти(мИДСотрудника, "ИД");
			Если СтрокаСотрудник = Неопределено Тогда
				Выборка.MoveNext();
				Продолжить;
			КонецЕсли;
			СтрокаКонтр = ТабКонтрагентовСотрудников.Найти(СтрокаСотрудник.ГруппаСотрудников, "ГруппаСотрудников");
			
			мДатаПервого 	= Выборка.Fields("ДатаПервого").Value;
			Если ЗначениеЗаполнено(мДатаПервого) Тогда
				МенеджерЗаписи = РегСв.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ДатаОтметки 	= мДатаПервого;
				МенеджерЗаписи.Сотрудник 	= СтрокаСотрудник.Ссылка;
				МенеджерЗаписи.ЛистУчета 	= ПустойЛистУчета;  
				МенеджерЗаписи.Прочитать();
				Если НЕ МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.ДатаОтметки 		= мДатаПервого;             
					МенеджерЗаписи.Сотрудник 		= СтрокаСотрудник.Ссылка;
					МенеджерЗаписи.ЛистУчета 		= ПустойЛистУчета;
					МенеджерЗаписи.ТорговаяТочка 	= СтрокаТТ.Ссылка;
					Если НЕ СтрокаКонтр = Неопределено Тогда
						МенеджерЗаписи.Контрагент 	= СтрокаКонтр.Контрагент;
					КонецЕсли;
					МенеджерЗаписи.Должность 		= СтрокаСотрудник.Должность;
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			мДатаПоследнего = Выборка.Fields("ДатаПоследнего").Value;
			Если ЗначениеЗаполнено(мДатаПоследнего) Тогда
				МенеджерЗаписи = РегСв.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ДатаОтметки 	= мДатаПоследнего;
				МенеджерЗаписи.Сотрудник 	= СтрокаСотрудник.Ссылка;
				МенеджерЗаписи.ЛистУчета 	= ПустойЛистУчета;
				МенеджерЗаписи.Прочитать();
				Если НЕ МенеджерЗаписи.Выбран() Тогда                           
					МенеджерЗаписи.ДатаОтметки 		= мДатаПоследнего;
					МенеджерЗаписи.Сотрудник 		= СтрокаСотрудник.Ссылка;
					МенеджерЗаписи.ЛистУчета 		= ПустойЛистУчета;
					МенеджерЗаписи.ТорговаяТочка 	= СтрокаТТ.Ссылка;
					Если НЕ СтрокаКонтр = Неопределено Тогда
						МенеджерЗаписи.Контрагент 	= СтрокаКонтр.Контрагент;
					КонецЕсли;
					МенеджерЗаписи.Должность 		= СтрокаСотрудник.Должность;
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	ADOСоединение.Close();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

//+++АК VERN 2016.10.11 12873 
Процедура АК_ПолучениеПредложенийПоставщиков(ИмяФайла = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Справочники.АК_ПоступающиеПредложения.АК_ПолучениеПредложенийПоставщиков(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации("Предложения поставщиков", УровеньЖурналаРегистрации.Ошибка,,, "" + ОписаниеОшибки());
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура АК_ПолучениеПредложенийПоставщиковРегламентноеЗадание() Экспорт
	
	АК_ПолучениеПредложенийПоставщиков();
	
КонецПроцедуры
//+++АК VERN 2016.10.11 12873 

Процедура СформироватьЗаданияПоЦенникам() Экспорт
	
	ОбменМобильноеПриложениеПереопределяемый.СформироватьЗаданияПоЦенникам();	
	
КонецПроцедуры 

//+++АК LOBV 29.07.2016
Функция ПолучитьЭлПочтуОтветственного(Ответственный)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект"	, Ответственный);
	Отбор.Вставить("Тип"	, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Отбор.Вставить("Вид"	, Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	
	ЭлПочта = РегистрыСведений.КонтактнаяИнформация.Получить(Отбор).Представление;
	
	Возврат ЭлПочта;
	
КонецФункции

Процедура АК_ОтправкаУведомленийПоОбращениямПокупателей() Экспорт
	
	ДатаОтправки = ТекущаяДата();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментОтправки", ДатаОтправки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_УведомленияПоОбращениямПокупателей.СписокПолучателей КАК СписокПолучателей,
	|	АК_УведомленияПоОбращениямПокупателей.МоментОтправки,
	|	АК_УведомленияПоОбращениямПокупателей.ОбращениеПокупателя,
	|	ОбращенияПокупателей.Ответственный КАК Ответственный,
	|	ОбращенияПокупателей.РегулярностьУведомления,
	|	ОбращенияПокупателей.ОкончаниеПериодаУведомления,
	|	ОбращенияПокупателей.ДатаДок КАК ДатаОбращения,
	|	ОбращенияПокупателей.ФИО_Покупателя КАК Автор,
	|	ОбращенияПокупателей.Телефон,
	|	ОбращенияПокупателей.Номер_Карты_ОК КАК НомерКарты,
	|	ОбращенияПокупателей.GUID_Загрузки КАК Бланк,
	|	ОбращенияПокупателей.Примечание КАК СутьОбращения
	|ИЗ
	|	РегистрСведений.АК_УведомленияПоОбращениямПокупателей КАК АК_УведомленияПоОбращениямПокупателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|		ПО АК_УведомленияПоОбращениямПокупателей.ОбращениеПокупателя = ОбращенияПокупателей.id_OK
	|ГДЕ
	|	АК_УведомленияПоОбращениямПокупателей.МоментОтправки <= &МоментОтправки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ответственный,
	|	СписокПолучателей";
	Выборка=Запрос.Выполнить().Выбрать();
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Пока Выборка.Следующий() Цикл
		
		//Отправим сообщение
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Почта.Подключиться(Профиль);
		Письмо.Тема = "Необходимо дать ответ на обращение покупателя";
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = 
		"По обращению покупателя от " + Строка(Формат(Выборка.ДатаОбращения, "ДЛФ=Д")) + " необходимо дать ответ." + Символы.ПС +
		"Данные покупателя: "		+ Символы.ПС +
		"Автор: "					+ Строка(Выборка.Автор) + Символы.ПС +
		"Телефон: "					+ Строка(Выборка.Телефон) + Символы.ПС +
		"Номер карты: "				+ Строка(Выборка.НомерКарты) + Символы.ПС + Символы.ПС +
		"Информация об обращении:"	+ Символы.ПС +
		"Номер бланка: "			+ Строка(Выборка.Бланк) + Символы.ПС +
		"Суть обращения: "			+ Строка(Выборка.СутьОбращения) + Символы.ПС + Символы.ПС +
		"Ответственный сотрудник: "	+ Строка(Выборка.Ответственный) + "." + Символы.ПС;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		
		Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		
		ЭлПочтаОтветственного = ПолучитьЭлПочтуОтветственного(Выборка.Ответственный);
		Если ЗначениеЗаполнено(ЭлПочтаОтветственного) Тогда
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = ЭлПочтаОтветственного;
			Получатель.ОтображаемоеИмя = СокрЛП(Строка(Выборка.Ответственный));
		КонецЕсли;
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = "annyllat@gmail.com";
		Получатель.ОтображаемоеИмя = "Латыпова Анна";		
		
		Если ЗначениеЗаполнено(Выборка.СписокПолучателей) Тогда
			Для Каждого СтрокаПолучатель Из Выборка.СписокПолучателей.Получатели Цикл
				Если ЗначениеЗаполнено(СтрокаПолучатель.ЭлектроннаяПочта) Тогда
					Получатель = Письмо.Получатели.Добавить();
					Получатель.Адрес           = СтрокаПолучатель.ЭлектроннаяПочта;
					Получатель.ОтображаемоеИмя = ?(ЗначениеЗаполнено(СтрокаПолучатель.Получатель),СокрЛП(Строка(СтрокаПолучатель.Получатель)),СтрокаПолучатель.ЭлектроннаяПочта);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
		Почта.Послать(Письмо);
		Почта.Отключиться();
		
		//Найдем старые записи и удалим
		МенеджерЗаписи = РегистрыСведений.АК_УведомленияПоОбращениямПокупателей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбращениеПокупателя = Выборка.ОбращениеПокупателя;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
		//Проверка, нужна ли новая запись
		Если (Выборка.РегулярностьУведомления = "Период"
			И ДатаОтправки >= Выборка.ОкончаниеПериодаУведомления)
			ИЛИ	Выборка.РегулярностьУведомления = "Дата" Тогда
			Продолжить;
		ИначеЕсли (Выборка.РегулярностьУведомления = "Период"
			И ДатаОтправки < Выборка.ОкончаниеПериодаУведомления)
			ИЛИ	Выборка.РегулярностьУведомления = "День" Тогда
			МоментОтправки = НачалоДня(ДатаОтправки + 24*60*60);
		ИначеЕсли Выборка.РегулярностьУведомления = "Неделя" Тогда
			МоментОтправки = НачалоДня(ДатаОтправки + 7*24*60*60);
		Иначе
			МоментОтправки = НачалоЧаса(ДатаОтправки + 60*60);
		КонецЕсли;
		
		//
		НаборЗаписей = РегистрыСведений.АК_УведомленияПоОбращениямПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбращениеПокупателя.Установить(Выборка.ОбращениеПокупателя);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбращениеПокупателя	= Выборка.ОбращениеПокупателя;
		НоваяЗапись.СписокПолучателей	= Выборка.СписокПолучателей;
		НоваяЗапись.МоментОтправки		= МоментОтправки;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
//---AK LOBV

//+++АК BELN 2017.11.07 ИП-00017153
Процедура ЗакрытьПлановыйАссортимент() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыйАссортимент.Номенклатура,
	|	ПлановыйАссортимент.Номенклатура.id_tov,
	|	ПлановыйАссортимент.Ссылка
	|ИЗ
	|	Справочник.ПлановыйАссортимент КАК ПлановыйАссортимент
	|ГДЕ
	|	ПлановыйАссортимент.ПометкаУдаления = ЛОЖЬ
	|	И ПлановыйАссортимент.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ПлановыйАссортимент.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПлановогоАссортимента.Закрыт)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗНом = РезультатЗапроса.Выгрузить();
	
	СтрНом="";
	Для каждого Стр Из ТЗНом Цикл
		СтрНом=СтрНом+","+СтрЗаменить(Строка(Стр.Номенклатураid_tov)," ","");	
	КонецЦикла; 
	СтрНом=Прав(СтрНом,СтрДлина(СтрНом)-1);
	Если ТЗНом.Количество() Тогда
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		ADOСоединение.ConnectionTimeOut = 0;
		ADOСоединение.CommandTimeOut    = 0;
		СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
		ADOСоединение.ConnectionString  = СтрПодкл;
		ADOСоединение.Open();
		Если ADOСоединение.State() = 0 Тогда
			Возврат;
		Иначе         
		КонецЕсли;
		//
		
		
		
		
		СтрЗапрос =	"SELECT 
		|Min(Prodagi.date_tt) as date_tt,
		|Prodagi.id_tov as id_tov
		|
		|FROM [Reports].[dbo].[DTT] as Prodagi (nolock)
		|Where Prodagi.id_tov in ("+СтрНом+")
		|group by id_tov
		|having Min(Prodagi.date_tt) between "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата()-24*60*60))+" and "+ВнешниеДанные.ФорматПоля(КонецДня(ТекущаяДата()));
		rs = ADOСоединение.Execute(СтрЗапрос);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				ТоварИД = Rs.Fields("id_tov").Value;
				СтрокаТаб=ТЗНом.Найти(ТоварИД);
				Если СтрокаТаб<>Неопределено Тогда
					ОбПланАссортимент=СтрокаТаб.Ссылка.ПолучитьОбъект();
					ОбПланАссортимент.Статус=Перечисления.СтатусыПлановогоАссортимента.Закрыт;
					ОбПланАссортимент.Записать();	
				КонецЕсли; 
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		ADOСоединение.Close();
		ADOСоединение = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры
//---АК BELN 2017.11.07 

//+++АК BELN 2017.11.27 ИП-00016995
Процедура  СделатьРассылкуПоДолиПродажСписанийПоДрузьямНоменклатуры() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Не ДеньНедели(ТекущаяДата())=1 Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрузьяНоменклатурыТовары.Номенклатура,
	|	ДрузьяНоменклатурыТовары.Ссылка,
	|	ДрузьяНоменклатурыТовары.Номенклатура.id_tov,
	|	ДрузьяНоменклатурыТовары.Ссылка.Автор.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ДрузьяНоменклатурыТовары.Номенклатура.Родитель = &Архив
	|			ТОГДА ДрузьяНоменклатурыТовары.Номенклатура.ГруппаДоПомещенияВАрхив
	|		ИНАЧЕ ДрузьяНоменклатурыТовары.Номенклатура.Родитель
	|	КОНЕЦ КАК Подкатегория
	|ИЗ
	|	Справочник.ДрузьяНоменклатуры.Товары КАК ДрузьяНоменклатурыТовары
	|ГДЕ
	|	ДрузьяНоменклатурыТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДрузьяНоменклатурыТовары.Номенклатура,
	|	ДрузьяНоменклатурыТовары.Ссылка,
	|	ДрузьяНоменклатурыТовары.Номенклатура.id_tov,
	|	ДрузьяНоменклатурыТовары.Ссылка.Автор.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ДрузьяНоменклатурыТовары.Номенклатура.Родитель = &Архив
	|			ТОГДА ДрузьяНоменклатурыТовары.Номенклатура.ГруппаДоПомещенияВАрхив
	|		ИНАЧЕ ДрузьяНоменклатурыТовары.Номенклатура.Родитель
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Архив",Справочники.Номенклатура.НайтиПоКоду("000620699"));
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗНом = РезультатЗапроса.Выгрузить();
	
	СтрНом="";
	Для каждого Стр Из ТЗНом Цикл
		СтрНом=СтрНом+","+СтрЗаменить(Строка(Стр.Номенклатураid_tov)," ","");	
	КонецЦикла; 
	СтрНом=Прав(СтрНом,СтрДлина(СтрНом)-1);
	Если ТЗНом.Количество() Тогда
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		ADOСоединение.ConnectionTimeOut = 0;
		ADOСоединение.CommandTimeOut    = 0;
		СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
		ADOСоединение.ConnectionString  = СтрПодкл;
		ADOСоединение.Open();
		Если ADOСоединение.State() = 0 Тогда
			Возврат;
		Иначе         
		КонецЕсли;
		//
		
		
		
		
		СтрЗапрос =	"SELECT 
		|Min(Prodagi.date_tt) as date_tt,
		|Prodagi.id_tov as id_tov
		|
		|FROM [Reports].[dbo].[DTT] as Prodagi (nolock)
		|Where Prodagi.id_tov in ("+СтрНом+")
		|group by id_tov
		|having Min(Prodagi.date_tt) between "+ВнешниеДанные.ФорматПоля(НачалоНедели(НачалоДня(ТекущаяДата())-1-4*7*24*60*60))+" and "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата())-1-4*7*24*60*60);
		rs = ADOСоединение.Execute(СтрЗапрос);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		ТЗПозиции=ТЗНом.СкопироватьКолонки();
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				ТоварИД = Rs.Fields("id_tov").Value;
				МасСтр=ТЗНом.НайтиСтроки(Новый Структура("Номенклатураid_tov",ТоварИД));
				Для каждого СтрокаТаб Из МасСтр Цикл
					ЗаполнитьЗначенияСвойств(ТЗПозиции.Добавить(),СтрокаТаб);	
				КонецЦикла; 
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		ADOСоединение.Close();
		ADOСоединение = Неопределено;
		
		
		
		Дата1=(НачалоНедели(ТекущаяДата())-42*24*60*60);
		Дата2=(НачалоНедели(ТекущаяДата())-1);
		//
		//Дата1=НачалоДня(НачалоНедели(ТекущаяДата())-1);
		//Дата2=(НачалоНедели(ТекущаяДата())-1);
		
		ДанныеПоЧекам = ПолучитьДвиженияТоваровПолная(Дата1,Дата2 , );
		
		
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Период1", Дата1);
		Запрос.УстановитьПараметр("Период2", Дата2);
		Запрос.УстановитьПараметр("Номенклатура", ДанныеПоЧекам.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ПодКатегория", ТЗПозиции.ВыгрузитьКолонку("ПодКатегория"));
		Запрос.УстановитьПараметр("Продакты", ТЗПозиции.ВыгрузитьКолонку("ФизЛицо"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Неделя,
		|	Таб.Номенклатура,
		|	Таб.Продано,
		|	Таб.Списание,
		|	Таб.СуммаСкидок,
		|	Таб.СписаниеПоКачеству,Таб.Маржа
		|ПОМЕСТИТЬ Таб
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Номенклатура1.Родитель = &Архив
		|			ТОГДА Номенклатура1.ГруппаДоПомещенияВАрхив
		|		ИНАЧЕ Номенклатура1.Родитель
		|	КОНЕЦ КАК Подкатегория,
		|	Таб.Неделя КАК Неделя,
		|	СУММА(Таб.Продано) КАК Продано,
		|	СУММА(Таб.Списание) КАК Списание,
		|	СУММА(Таб.СуммаСкидок) КАК СуммаСкидок,
		|	СУММА(Таб.СписаниеПоКачеству) КАК СписаниеПоКачеству,
		|	СУММА(Таб.Маржа) КАК Маржа,
		|	ВЫБОР
		|		КОГДА Номенклатура1.Родитель = &Архив
		|			ТОГДА Номенклатура1.ГруппаДоПомещенияВАрхив.Родитель
		|		ИНАЧЕ Номенклатура1.Родитель.Родитель
		|	КОНЕЦ КАК Категория,
		|	Номенклатура1.Ссылка КАК Номенклатура
		|ИЗ
		|	Таб КАК Таб
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
		|		ПО Таб.Номенклатура = Номенклатура1.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Номенклатура1.Родитель = &Архив
		|				ТОГДА Номенклатура1.ГруппаДоПомещенияВАрхив
		|			ИНАЧЕ Номенклатура1.Родитель
		|		КОНЕЦ В ИЕРАРХИИ (&Подкатегория)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Номенклатура1.Родитель = &Архив
		|			ТОГДА Номенклатура1.ГруппаДоПомещенияВАрхив
		|		ИНАЧЕ Номенклатура1.Родитель
		|	КОНЕЦ,
		|	Таб.Неделя,
		|	ВЫБОР
		|		КОГДА Номенклатура1.Родитель = &Архив
		|			ТОГДА Номенклатура1.ГруппаДоПомещенияВАрхив.Родитель
		|		ИНАЧЕ Номенклатура1.Родитель.Родитель
		|	КОНЕЦ,
		|	Номенклатура1.Ссылка";
		Запрос.УстановитьПараметр("Архив", Справочники.Номенклатура.НайтиПоНаименованию("Архив"));
		Запрос.УстановитьПараметр("Таб", ДанныеПоЧекам);
		Результат = Запрос.Выполнить();
		
		ТЗНоменклатура = Результат.Выгрузить();
		ТЗНоменклатура.Индексы.Добавить("Номенклатура");		
		
		ТЗПодКатегории = ТЗНоменклатура.Скопировать();
		ТЗПодКатегории.Свернуть("Категория,Подкатегория,Номенклатура,Неделя","Продано,Списание,СуммаСкидок,СписаниеПоКачеству,Маржа");
		
		ТЗКатегории=ТЗПодКатегории.Скопировать();
		ТЗКатегории.Свернуть("Категория,Неделя","Продано,Списание,СуммаСкидок,СписаниеПоКачеству,Маржа");
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
		|	ТоварныйАссортиментТочек.Характеристика
		|ПОМЕСТИТЬ втХар
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&Период2, Номенклатура В (&Номенклатура)) КАК ТоварныйАссортиментТочек
		|ГДЕ
		|	ТоварныйАссортиментТочек.Выведена = ЛОЖЬ
		|	И ТоварныйАссортиментТочек.Запрещена = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втХар.Номенклатура,
		|	втХар.Характеристика,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель
		|ПОМЕСТИТЬ втХарИтог
		|ИЗ
		|	втХар КАК втХар
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО втХар.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|
		|СГРУППИРОВАТЬ ПО
		|	втХар.Номенклатура,
		|	втХар.Характеристика,
		|	ЗначенияСвойствОбъектов.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель = &Архив
		|			ТОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.ГруппаДоПомещенияВАрхив
		|		ИНАЧЕ ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель
		|	КОНЕЦ КАК ПодКатегория,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель = &Архив
		|			ТОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.ГруппаДоПомещенияВАрхив.Родитель
		|		ИНАЧЕ ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель.Родитель
		|	КОНЕЦ КАК Категория,
		|	1 КАК Приоритет,
		|	СоответствиеОбъектРольСрезПоследних1.Объект
		|ПОМЕСТИТЬ втРоли
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период2, ТипРоли = &ТипРоли1) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				&Период2,
		|				ТипРоли = &ТипРоли
		|					И Объект В
		|						(ВЫБРАТЬ
		|							втХарИтог.Характеристика
		|						ИЗ
		|							втХарИтог)) КАК СоответствиеОбъектРольСрезПоследних1
		|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|			И (СоответствиеОбъектРольСрезПоследних.РольПользователя.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
		|
		|СГРУППИРОВАТЬ ПО
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель = &Архив
		|			ТОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.ГруппаДоПомещенияВАрхив
		|		ИНАЧЕ ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель = &Архив
		|			ТОГДА ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.ГруппаДоПомещенияВАрхив.Родитель
		|		ИНАЧЕ ВЫРАЗИТЬ(СоответствиеОбъектРольСрезПоследних1.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Родитель.Родитель
		|	КОНЕЦ,
		|	СоответствиеОбъектРольСрезПоследних1.Объект
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ВЫБОР
		|		КОГДА втХарИтог.Номенклатура.Родитель = &Архив
		|			ТОГДА втХарИтог.Номенклатура.ГруппаДоПомещенияВАрхив
		|		ИНАЧЕ втХарИтог.Номенклатура.Родитель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА втХарИтог.Номенклатура.Родитель = &Архив
		|			ТОГДА втХарИтог.Номенклатура.ГруппаДоПомещенияВАрхив.Родитель
		|		ИНАЧЕ втХарИтог.Номенклатура.Родитель.Родитель
		|	КОНЕЦ,
		|	2,
		|	втХарИтог.Характеристика
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период2, ТипРоли = &ТипРоли1) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				&Период2,
		|				ТипРоли = &ТипРоли
		|					И Объект В
		|						(ВЫБРАТЬ
		|							втХарИтог.Производитель
		|						ИЗ
		|							втХарИтог)) КАК СоответствиеОбъектРольСрезПоследних1
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втХарИтог КАК втХарИтог
		|			ПО СоответствиеОбъектРольСрезПоследних1.Объект = втХарИтог.Производитель
		|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|			И (СоответствиеОбъектРольСрезПоследних.РольПользователя.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
		|
		|СГРУППИРОВАТЬ ПО
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ВЫБОР
		|		КОГДА втХарИтог.Номенклатура.Родитель = &Архив
		|			ТОГДА втХарИтог.Номенклатура.ГруппаДоПомещенияВАрхив
		|		ИНАЧЕ втХарИтог.Номенклатура.Родитель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА втХарИтог.Номенклатура.Родитель = &Архив
		|			ТОГДА втХарИтог.Номенклатура.ГруппаДоПомещенияВАрхив.Родитель
		|		ИНАЧЕ втХарИтог.Номенклатура.Родитель.Родитель
		|	КОНЕЦ,
		|	втХарИтог.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(втРоли.Приоритет) КАК Приоритет,
		|	втРоли.Объект
		|ПОМЕСТИТЬ втРолиМин
		|ИЗ
		|	втРоли КАК втРоли
		|
		|СГРУППИРОВАТЬ ПО
		|	втРоли.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРоли.Сотрудник КАК Сотрудник,
		|	втРоли.Категория КАК Категория,
		|	втРоли.ПодКатегория КАК ПодКатегория,
		|	втРоли.Объект.Владелец КАК Номенклатура
		|ИЗ
		|	втРоли КАК втРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРолиМин КАК втРолиМин
		|		ПО втРоли.Объект = втРолиМин.Объект
		|			И втРоли.Приоритет = втРолиМин.Приоритет
		|
		|СГРУППИРОВАТЬ ПО
		|	втРоли.Сотрудник,
		|	втРоли.Категория,
		|	втРоли.ПодКатегория,
		|	втРоли.Объект.Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Категория,
		|	ПодКатегория
		|ИТОГИ ПО
		|	Сотрудник";
		
		
		Запрос.УстановитьПараметр("ТипРоли"	, ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
		Запрос.УстановитьПараметр("ТипРоли1", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
		Результат = Запрос.Выполнить();
		
		Выб = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МасФЛ=Новый Массив;
		
		Пока Выб.Следующий() Цикл
			МасФЛ.Добавить(Выб.Сотрудник);	
			ВыбНом=Выб.Выбрать();
			Пока ВыбНом.Следующий() Цикл
				МасСтрНом=ТЗПозиции.НайтиСтроки(Новый Структура("Номенклатура",ВыбНом.Номенклатура));
				Для каждого ЭлНом Из МасСтрНом Цикл
					ЭлНом.ФизЛицо=Выб.Сотрудник;
				КонецЦикла; 
			КонецЦикла;
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", МасФЛ);
		Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		СоотЭлПочты=Новый Соответствие;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.Представление)) Тогда
				СоотЭлПочты.Вставить(ВыборкаДетальныеЗаписи.Объект,ВыборкаДетальныеЗаписи.Представление);
			КонецЕсли; 
		КонецЦикла;
		
		Выб.Сбросить();
		Пока Выб.Следующий() Цикл
			ЭлПочта=СоотЭлПочты.Получить(Выб.Сотрудник);
			Если НЕ ЗначениеЗаполнено(ЭлПочта) Тогда
				Продолжить;
			КонецЕсли; 
			
			ВыбНом=Выб.Выбрать();
			ТЗОтп=ТЗКатегории.СкопироватьКолонки();
			ТЗОтп.Колонки.Добавить("ДоляПотерьВВыручке",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтп.Колонки.Добавить("ДоляПотерьВВыручкеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			
			ТЗОтп.Колонки.Добавить("ПроданоДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтп.Колонки.Добавить("СписаниеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтп.Колонки.Добавить("СписаниеПоКачествуДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтп.Колонки.Добавить("СуммаСкидокДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			
			
			ТЗОтпПодКат=ТЗПодКатегории.СкопироватьКолонки();
			ТЗОтпПодКат.Колонки.Добавить("ДоляПотерьВВыручке",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтпПодКат.Колонки.Добавить("ДоляПотерьВВыручкеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			
			ТЗОтпПодКат.Колонки.Добавить("ПроданоДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтпПодКат.Колонки.Добавить("СписаниеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтпПодКат.Колонки.Добавить("СписаниеПоКачествуДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТЗОтпПодКат.Колонки.Добавить("СуммаСкидокДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			
			СоотКат=Новый Соответствие;
			ТекКатегория=Неопределено;
			ТЗКатВсе=ТЗПодКатегории.Скопировать();
			ТЗКатВсе.Свернуть("Категория,Подкатегория");
			
			Для  каждого Стр Из ТЗКатВсе  Цикл
				Если Не ЗначениеЗаполнено(Стр.Категория) Тогда
					Продолжить;
				КонецЕсли; 
				МасКат=ТЗКатегории.НайтиСтроки(Новый Структура("Категория",Стр.Категория));
				ИтогоПоКат=0;
				Если ТЗОтп.НайтиСтроки(Новый Структура("Категория",Стр.Категория)).Количество()=0 Тогда
					Для каждого Эл Из МасКат Цикл
						ИтогоПоКат=ИтогоПоКат+Эл.Продано;
						НовСтр=ТЗОтп.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр,Эл);
						НовСтр.ДоляПотерьВВыручке=?(Эл.Продано=0,0,(Эл.Списание+Эл.СуммаСкидок)/Эл.Продано*100);
					КонецЦикла; 
					СоотКат.Вставить(Стр.Категория,ИтогоПоКат);
				Иначе
					ИтогоПоКат=СоотКат.Получить(Стр.Категория);
				КонецЕсли; 
				
			КонецЦикла; 
			
			
			
			ВыбНом.Сбросить();
			
			Пока ВыбНом.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыбНом.Категория) Тогда
					Продолжить;
				КонецЕсли; 
				
				МасКат=ТЗНоменклатура.НайтиСтроки(Новый Структура("Номенклатура",ВыбНом.Номенклатура));//ТЗКатегории.НайтиСтроки(Новый Структура("Категория",ВыбНом.Категория));
				Для каждого Эл Из МасКат Цикл
					НовСтр=ТЗОтпПодКат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,Эл);
				КонецЦикла;
				
				
			КонецЦикла; 
			
			ТЗОтпПодКат.Свернуть("Категория,ПодКатегория,Номенклатура,Неделя","Продано,Списание,СуммаСкидок,СписаниеПоКачеству,ДоляПотерьВВыручке,ДоляПотерьВВыручкеДоп,ПроданоДоп,СписаниеДоп,СуммаСкидокДоп,СписаниеПоКачествуДоп,Маржа");
			Для каждого Стр Из ТЗОтпПодКат Цикл
				Стр.ДоляПотерьВВыручке=?(Стр.Продано=0,0,(Стр.Списание+Стр.СуммаСкидок)/Стр.Продано*100);
				
			КонецЦикла; 
			
			
			
			//
			Если ТЗОтпПодКат.Количество()>0 Тогда
				Кол=ТЗОтпПодКат.Количество()-1;
				Для Ит=0 по Кол Цикл
					СтрКат=ТЗОтпПодКат[Ит];
					Для Сч=1 По 6 Цикл
						МасКатНед=ТЗОтпПодКат.НайтиСтроки(Новый Структура("Подкатегория,Неделя",СтрКат.Подкатегория,Сч));
						Если МасКатНед.Количество()=0 Тогда
							НовСтрКатНед=ТЗОтпПодКат.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрКатНед,СтрКат,"Категория,Подкатегория");
							НовСтрКатНед.Неделя=Сч;
							НовСтрКатНед.Продано=0;
							НовСтрКатНед.Списание=0;
							НовСтрКатНед.СписаниеПоКачеству=0;
							НовСтрКатНед.СуммаСкидок=0;
							НовСтрКатНед.Маржа=0;
							Кол=Кол+1;
						Иначе
							НовСтрКатНед=МасКатНед[0];
						КонецЕсли; 
						
						Если СтрКат.Неделя=1 Тогда
							НовСтрКатНед.ПроданоДоп=СтрКат.Продано;
							НовСтрКатНед.СписаниеДоп=СтрКат.Списание;
							НовСтрКатНед.СписаниеПоКачествуДоп=СтрКат.СписаниеПоКачеству;
							НовСтрКатНед.СуммаСкидокДоп=СтрКат.СуммаСкидок;
							НовСтрКатНед.ДоляПотерьВВыручкеДоп=?(СтрКат.Продано=0,0,(СтрКат.Списание+СтрКат.СуммаСкидок)/СтрКат.Продано*100);
						КонецЕсли; 
						
					КонецЦикла; 
				КонецЦикла; 
				ТЗОтпПодКат.Сортировать("Неделя,ДоляПотерьВВыручкеДоп убыв");
				
				МасСтрФЛ=ТЗПозиции.НайтиСтроки(Новый Структура("ФизЛицо",Выб.Сотрудник));
				МасНом=Новый Массив;
				
				Для каждого ЭлФЛ Из МасСтрФЛ Цикл
					МасНомДрузья=ТЗНом.НайтиСтроки(Новый Структура("Ссылка",ЭлФЛ.Ссылка));
					СтрПодкатегория="";
					МасПодкат=Новый Массив;
					
					Для каждого Стр Из МасНомДрузья Цикл
						Если МасПодкат.Найти(Стр.Подкатегория)=Неопределено Тогда
							МасПодкат.Добавить(Стр.Подкатегория);
						КонецЕсли; 
					КонецЦикла;   
					
					Для каждого Эл Из МасПодкат Цикл
						СтрПодкатегория=СтрПодкатегория+", "+Эл;
					КонецЦикла; 
					СтрПодкатегория=Прав(СтрПодкатегория,СтрДлина(СтрПодкатегория)-2);
					
					ТЗОтпПодКатДляЭтойНоменклатуры=ТЗОтпПодКат.Скопировать();
					
					Кол=ТЗОтпПодКатДляЭтойНоменклатуры.Количество();
					
					Для Сч=0 По Кол-1 Цикл
						ТекПодкатегория=ТЗОтпПодКатДляЭтойНоменклатуры[Кол-1-Сч].Подкатегория;
						Фл=Истина;
						Для каждого ЭлДрузья Из МасНомДрузья Цикл
							Если ЭлДрузья.ПодКатегория=ТекПодкатегория Тогда
								Фл=Ложь;
								Прервать;
							КонецЕсли; 
						КонецЦикла; 
						Если Фл Тогда
							ТЗОтпПодКатДляЭтойНоменклатуры.Удалить(Кол-1-Сч);
						КонецЕсли; 
					КонецЦикла; 
					
					ТЗОтпПодКатДляЭтойНоменклатуры.Свернуть("Неделя","Продано,Списание,СуммаСкидок,СписаниеПоКачеству,ДоляПотерьВВыручке,ДоляПотерьВВыручкеДоп,ПроданоДоп,СписаниеДоп,СуммаСкидокДоп,СписаниеПоКачествуДоп,Маржа");
					Для каждого Стр Из ТЗОтпПодКатДляЭтойНоменклатуры Цикл
						Стр.ДоляПотерьВВыручке=?(Стр.Продано=0,0,(Стр.Списание+Стр.СуммаСкидок)/Стр.Продано*100);
					КонецЦикла; 
					
					
					
					ТЗОтпДрузейДляЭтойНоменклатуры=ТЗОтпПодКат.Скопировать();
					
					Кол=ТЗОтпДрузейДляЭтойНоменклатуры.Количество();
					
					Для Сч=0 По Кол-1 Цикл
						ТекНоменклатура=ТЗОтпДрузейДляЭтойНоменклатуры[Кол-1-Сч].Номенклатура;
						Фл=Истина;
						Для каждого ЭлДрузья Из МасНомДрузья Цикл
							Если ЭлДрузья.Номенклатура=ТекНоменклатура Тогда
								Фл=Ложь;
								Прервать;
							КонецЕсли; 
						КонецЦикла; 
						Если Фл Тогда
							ТЗОтпДрузейДляЭтойНоменклатуры.Удалить(Кол-1-Сч);
						КонецЕсли; 
					КонецЦикла; 
					ТЗОтпДрузейДляЭтойНоменклатуры.Свернуть("Неделя","Продано,Списание,СуммаСкидок,СписаниеПоКачеству,ДоляПотерьВВыручке,ДоляПотерьВВыручкеДоп,ПроданоДоп,СписаниеДоп,СуммаСкидокДоп,СписаниеПоКачествуДоп,Маржа");
					Для каждого Стр Из ТЗОтпДрузейДляЭтойНоменклатуры Цикл
						Стр.ДоляПотерьВВыручке=?(Стр.Продано=0,0,(Стр.Списание+Стр.СуммаСкидок)/Стр.Продано*100);
					КонецЦикла;
					ДокументРезультат=Новый ТабличныйДокумент;
					Мак=ПолучитьОбщийМакет("МакетРассылкиПоДолиПродажСписанийДрузейНоменклатуры");
					ОблШапка=Мак.ПолучитьОбласть("Шапка|Колонка");
					ОблШапка.Параметры.Показатель="Доли";
					ДокументРезультат.Вывести(ОблШапка);
					ТекНомерНедели=(НачалоНедели(ТекущаяДата())-'20090504')/(7*24*60*60);
					Для Сч=1 По 6 Цикл
						ОблШапка=Мак.ПолучитьОбласть("Шапка|Колонка");
						ОблШапка.Параметры.Показатель=Строка(ТекНомерНедели-(7-Сч))+" неделя"+?(Сч=3,"(заход "+ЭлФЛ.Номенклатура+")","");
						ДокументРезультат.Присоединить(ОблШапка);	
					КонецЦикла; 
					ОблШапка=Мак.ПолучитьОбласть("Шапка|Колонка");
					ОблШапка.Параметры.Показатель="Соотношение до и после";
					ДокументРезультат.Присоединить(ОблШапка);	
					
					ОблШапка=Мак.ПолучитьОбласть("Шапка|Колонка");
					ОблШапка.Параметры.Показатель="Динамика в рублях";
					ДокументРезультат.Присоединить(ОблШапка);	
					
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель="Доля списаний "+ЭлФЛ.Ссылка+" в списаниях подгруппы "+СтрПодкатегория;
					ДокументРезультат.Вывести(ОблСтрока);
					
					СписанияДрузей1=0;
					ПродажиДрузей1=0;
					Списания1=0;
					Продажи1=0;
					МаржаДрузей1=0;
					Маржа1=0;
					
					СписанияДрузей6=0;
					ПродажиДрузей6=0;
					Списания6=0;
					Продажи6=0;
					МаржаДрузей6=0;
					Маржа6=0;
					
					Для Сч=1 По 6 Цикл
						МасСтр1=ТЗОтпПодКатДляЭтойНоменклатуры.НайтиСтроки(Новый Структура("Неделя",7-Сч));
						Если МасСтр1.Количество() И Сч=1 Тогда
							Списания1=МасСтр1[0].Списание+МасСтр1[0].СуммаСкидок;
						КонецЕсли; 
						Если МасСтр1.Количество() И Сч=6 Тогда
							Списания6=МасСтр1[0].Списание+МасСтр1[0].СуммаСкидок;
						КонецЕсли; 
						
						
						МасСтр2=ТЗОтпДрузейДляЭтойНоменклатуры.НайтиСтроки(Новый Структура("Неделя",7-Сч));
						Если МасСтр2.Количество() И Сч=1 Тогда
							СписанияДрузей1=МасСтр2[0].Списание+МасСтр2[0].СуммаСкидок;
						КонецЕсли; 
						Если МасСтр2.Количество() И Сч=6 Тогда
							СписанияДрузей6=МасСтр2[0].Списание+МасСтр2[0].СуммаСкидок;
						КонецЕсли; 
						
						Если МасСтр1.Количество() И МасСтр2.Количество() Тогда
							ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
							ОблСтрока.Параметры.Показатель=Окр((МасСтр2[0].Списание+МасСтр2[0].СуммаСкидок)/
							(МасСтр1[0].Списание+МасСтр1[0].СуммаСкидок),2);
							ДокументРезультат.Присоединить(ОблСтрока);
						Иначе	
							ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
							ОблСтрока.Параметры.Показатель="-";
							ДокументРезультат.Присоединить(ОблСтрока);
						КонецЕсли; 
						
					КонецЦикла; 
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель=?(СписанияДрузей1=0 ИЛИ Списания1=0 ИЛИ Списания6=0,"-",Окр((СписанияДрузей6/Списания6)/(СписанияДрузей1/Списания1),2));
					ДокументРезультат.Присоединить(ОблСтрока);
					
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель=Окр(СписанияДрузей6-СписанияДрузей1,2);
					ДокументРезультат.Присоединить(ОблСтрока);
					
					//Вывод продаж					
					
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель="Доля продаж "+ЭлФЛ.Ссылка+" в продажах подгруппы "+СтрПодкатегория;
					ДокументРезультат.Вывести(ОблСтрока);
					
					
					Для Сч=1 По 6 Цикл
						МасСтр1=ТЗОтпПодКатДляЭтойНоменклатуры.НайтиСтроки(Новый Структура("Неделя",7-Сч));
						Если МасСтр1.Количество() И Сч=1 Тогда
							Продажи1=МасСтр1[0].Продано;
						КонецЕсли; 
						Если МасСтр1.Количество() И Сч=6 Тогда
							Продажи6=МасСтр1[0].Продано;
						КонецЕсли; 
						
						МасСтр2=ТЗОтпДрузейДляЭтойНоменклатуры.НайтиСтроки(Новый Структура("Неделя",7-Сч));
						Если МасСтр2.Количество() И Сч=1 Тогда
							ПродажиДрузей1=МасСтр2[0].Продано;
						КонецЕсли; 
						Если МасСтр2.Количество() И Сч=6 Тогда
							ПродажиДрузей6=МасСтр2[0].Продано;
						КонецЕсли; 
						Если МасСтр1.Количество() И МасСтр2.Количество() Тогда
							ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
							ОблСтрока.Параметры.Показатель=Окр((МасСтр2[0].Продано)/
							(МасСтр1[0].Продано),2);
							ДокументРезультат.Присоединить(ОблСтрока);
						Иначе	
							ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
							ОблСтрока.Параметры.Показатель="-";
							ДокументРезультат.Присоединить(ОблСтрока);
						КонецЕсли; 
					КонецЦикла; 
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель=?(Продажи6=0 ИЛИ ПродажиДрузей1=0 ИЛИ Продажи1=0,"-",Окр((ПродажиДрузей6/Продажи6)/(ПродажиДрузей1/Продажи1),2));
					ДокументРезультат.Присоединить(ОблСтрока);
					
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель=Окр(ПродажиДрузей6-ПродажиДрузей1,2);
					ДокументРезультат.Присоединить(ОблСтрока);
					
					//Вывод маржи					
					
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель="Доля маржи "+ЭлФЛ.Ссылка+" в марже подгруппы "+СтрПодкатегория;
					ДокументРезультат.Вывести(ОблСтрока);
					
					
					Для Сч=1 По 6 Цикл
						МасСтр1=ТЗОтпПодКатДляЭтойНоменклатуры.НайтиСтроки(Новый Структура("Неделя",7-Сч));
						Если МасСтр1.Количество() И Сч=1 Тогда
							Маржа1=МасСтр1[0].Маржа;
						КонецЕсли; 
						Если МасСтр1.Количество() И Сч=6 Тогда
							Маржа6=МасСтр1[0].Маржа;
						КонецЕсли; 
						
						МасСтр2=ТЗОтпДрузейДляЭтойНоменклатуры.НайтиСтроки(Новый Структура("Неделя",7-Сч));
						Если МасСтр2.Количество() И Сч=1 Тогда
							МаржаДрузей1=МасСтр2[0].Маржа;
						КонецЕсли; 
						Если МасСтр2.Количество() И Сч=6 Тогда
							МаржаДрузей6=МасСтр2[0].Маржа;
						КонецЕсли; 
						Если МасСтр1.Количество() И МасСтр2.Количество() Тогда
							ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
							ОблСтрока.Параметры.Показатель=Окр((МасСтр2[0].Маржа)/
							(МасСтр1[0].Маржа),2);
							ДокументРезультат.Присоединить(ОблСтрока);
						Иначе	
							ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
							ОблСтрока.Параметры.Показатель="-";
							ДокументРезультат.Присоединить(ОблСтрока);
						КонецЕсли; 
					КонецЦикла; 
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель=?(Маржа6=0 ИЛИ МаржаДрузей1=0 ИЛИ Маржа1=0,"-",Окр((МаржаДрузей6/Маржа6)/(МаржаДрузей1/Маржа1),2));
					ДокументРезультат.Присоединить(ОблСтрока);
					
					ОблСтрока=Мак.ПолучитьОбласть("Строка|Колонка");
					ОблСтрока.Параметры.Показатель=Окр(МаржаДрузей6-МаржаДрузей1,2);
					ДокументРезультат.Присоединить(ОблСтрока);
					
					
					ОтправитьПисьмоПоКатегориям(ЭлПочта,ДокументРезультат,"Изменения доли "+ЭлФЛ.Ссылка+" после запуска "+ЭлФЛ.Номенклатура);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры
//---АК BELN 2017.11.27 

//+++АК BELN 2017.12.22 ИП-00017348
Процедура ЗаполнитьРасходникиПоданнымРазборки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто
	|ПОМЕСТИТЬ втРасходники
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СоставПаллетыЗаданияНаРазборку.Ссылка) КАК Ссылка,
	|	СоставПаллетыЗаданияНаРазборку.Номенклатура,
	|	СоставПаллетыЗаданияНаРазборку.Характеристика,
	|	СоставПаллетыЗаданияНаРазборку.Задание,
	|	СоставПаллетыЗаданияНаРазборку.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ втПаллеты
	|ИЗ
	|	Справочник.СоставПаллеты.ЗаданияНаРазборку КАК СоставПаллетыЗаданияНаРазборку
	|ГДЕ
	|	СоставПаллетыЗаданияНаРазборку.Задание В
	|			(ВЫБРАТЬ
	|				втРасходники.ЗаданиеНаРазборку
	|			ИЗ
	|				втРасходники
	|			ГДЕ
	|				втРасходники.Закрыто = ЛОЖЬ)
	|	И СоставПаллетыЗаданияНаРазборку.Задание.Проведен
	|	И СоставПаллетыЗаданияНаРазборку.Задание.Закрыто = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставПаллетыЗаданияНаРазборку.Номенклатура,
	|	СоставПаллетыЗаданияНаРазборку.Характеристика,
	|	СоставПаллетыЗаданияНаРазборку.Задание,
	|	СоставПаллетыЗаданияНаРазборку.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставПаллетыЗаданияНаРазборку.Ссылка,
	|	СоставПаллетыЗаданияНаРазборку.НомерСтроки,
	|	СоставПаллетыЗаданияНаРазборку.Номенклатура,
	|	СоставПаллетыЗаданияНаРазборку.Характеристика,
	|	СоставПаллетыЗаданияНаРазборку.ДатаПроизводства,
	|	СоставПаллетыЗаданияНаРазборку.Количество,
	|	СоставПаллетыЗаданияНаРазборку.Задание,
	|	СоставПаллетыЗаданияНаРазборку.СтруктурнаяЕдиница,
	|	ЛОЖЬ КАК Отработано,
	|	СоставПаллетыЗаданияНаРазборку.Задание.Склад КАК Склад
	|ИЗ
	|	Справочник.СоставПаллеты.ЗаданияНаРазборку КАК СоставПаллетыЗаданияНаРазборку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПаллеты КАК втПаллеты
	|		ПО СоставПаллетыЗаданияНаРазборку.Номенклатура = втПаллеты.Номенклатура
	|			И СоставПаллетыЗаданияНаРазборку.Характеристика = втПаллеты.Характеристика
	|			И СоставПаллетыЗаданияНаРазборку.СтруктурнаяЕдиница = втПаллеты.СтруктурнаяЕдиница
	|			И СоставПаллетыЗаданияНаРазборку.Задание = втПаллеты.Задание
	|			И СоставПаллетыЗаданияНаРазборку.Ссылка = втПаллеты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасходники.Ссылка
	|ИЗ
	|	втРасходники КАК втРасходники
	|ГДЕ
	|	втРасходники.Закрыто = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	втРасходники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасходники.Ссылка,
	|	втРасходники.ЗаданиеНаРазборку
	|ИЗ
	|	втРасходники КАК втРасходники
	|ГДЕ
	|	втРасходники.Закрыто = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	втРасходники.Ссылка,
	|	втРасходники.ЗаданиеНаРазборку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасходники.Ссылка,
	|	втРасходники.ЗаданиеНаРазборку
	|ИЗ
	|	втРасходники КАК втРасходники
	|ГДЕ
	|	втРасходники.Закрыто = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	втРасходники.Ссылка,
	|	втРасходники.ЗаданиеНаРазборку";
	
	
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()+24*60*60));
	Пакет=Запрос.ВыполнитьПакет();
	ВыбДок=Пакет[3].Выбрать();
	ТЗТовары=Пакет[2].Выгрузить();
	ТЗРасходники=Пакет[4].Выгрузить();
	ТЗРасходники.Колонки.Добавить("ОтработаноЗадание");
	ТЗРасходникиЗакр=Пакет[5].Выгрузить();
	МасИскл=Новый Массив;
	МасОтработанныхЗаданий=Новый Массив;
	Пока ВыбДок.Следующий() Цикл
		ДокОбъект = ВыбДок.Ссылка.ПолучитьОбъект();
		МасНомСтр=Новый Массив;
		ТоварыВДокументе = ДокОбъект.Товары.Выгрузить();
		ДокОбъект.Товары.Очистить();
		
		Для каждого Стр Из ТоварыВДокументе Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ЗаданиеНаРазборку)
				ИЛИ ТЗРасходники.НайтиСтроки(Новый Структура("Ссылка,ЗаданиеНаРазборку",ДокОбъект.Ссылка,Стр.ЗаданиеНаРазборку)).Количество()=0
				Тогда
				МасНомСтр.Добавить(Стр.НомерСтроки);
			КонецЕсли; 
		КонецЦикла; 
		Фл=Ложь;
		Для Сч=0 По ТЗТовары.Количество()-1 Цикл
			СтрокаТаб=ТЗТовары[Сч];
			Если СтрокаТаб.Отработано ИЛИ СтрокаТаб.СтруктурнаяЕдиница<>ДокОбъект.Получатель ИЛИ СтрокаТаб.Склад<>ДокОбъект.Склад Тогда
				Продолжить;
			КонецЕсли; 
			Номенклатура = СтрокаТаб.Номенклатура;
			Характеристика = СтрокаТаб.Характеристика;
			
			
			СтрокиВДоке = ТоварыВДокументе.НайтиСтроки(Новый Структура("ЗаданиеНаРазборку,Номенклатура, Характеристика, ДатаПроизводства",
			СтрокаТаб.Задание, Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
			Если СтрокиВДоке.Количество() > 0 Тогда
				СтрокаВДоке = СтрокиВДоке[0];
			ИначеЕсли СтрокиВДоке.Количество() = 0 И ЗначениеЗаполнено(СтрокаТаб.ДатаПроизводства) Тогда
				СтрокаВДоке = ТоварыВДокументе.Добавить();
				СтрокаВДоке.ЗаданиеНаРазборку = СтрокаТаб.Задание;
				СтрокаВДоке.Номенклатура = Номенклатура;
				СтрокаВДоке.Характеристика = Характеристика;
				СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
				СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
			Иначе
				СтрокиВДоке = ТоварыВДокументе.НайтиСтроки(Новый Структура("ЗаданиеНаРазборку,Номенклатура, Характеристика",
				СтрокаТаб.Задание, Номенклатура, Характеристика));
				Если СтрокиВДоке.Количество() > 0 Тогда
					СтрокаВДоке = СтрокиВДоке[0];
				Иначе
					//Если ТоварыВДокументе.НайтиСтроки(Новый Структура("ЗаданиеНаРазборку,Номенклатура",СтрокаТаб.Задание, Номенклатура)).Количество()<>0 Тогда
					//	СтрокаВДоке = ТоварыВДокументе.Добавить();
					//	СтрокаВДоке.Номенклатура = Номенклатура;
					//	СтрокаВДоке.Характеристика = Характеристика;
					//	СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
					//	СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
					//Иначе
					Продолжить;	
					//КонецЕсли; 
				КонецЕсли;	
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаВДоке.ДатаПроизводства) И ЗначениеЗаполнено(СтрокаТаб.ДатаПроизводства) Тогда
				СтрокаВДоке.ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
			КонецЕсли; 
			Фл=Истина;
			СтрокаВДоке.Количество = ?(МасНомСтр.Найти(СтрокаВДоке.НомерСтроки)=Неопределено,0,СтрокаВДоке.Количество) + СтрокаТаб.Количество;
			МасНомСтр.Добавить(СтрокаВДоке.НомерСтроки);
			СтрокаТаб.Отработано=Истина;
			МасОтработанныхЗаданий.Добавить(СтрокаТаб.Задание);
			МасСтрЗ=ТЗРасходники.НайтиСтроки(Новый Структура("Ссылка,ЗаданиеНаРазборку",ДокОбъект.Ссылка,СтрокаВДоке.ЗаданиеНаРазборку));
			Если МасСтрЗ.Количество() Тогда
				МасСтрЗ[0].ОтработаноЗадание=Истина;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Фл Тогда
			Продолжить;	
		КонецЕсли; 
		
		
		
		
		Фл=Истина;
		Если МасНомСтр.Количество()>0 Тогда
			Для Каждого СтрокаТаб Из ТоварыВДокументе Цикл
				Если МасНомСтр.Найти(СтрокаТаб.НомерСтроки)=Неопределено Тогда
					Если ЗначениеЗаполнено(СтрокаТаб.ЗаданиеНаРазборку) И 
					ТЗРасходники.НайтиСтроки(Новый Структура("ЗаданиеНаРазборку",СтрокаТаб.ЗаданиеНаРазборку)).Количество() Тогда
						МасСтрЗ=ТЗРасходники.НайтиСтроки(Новый Структура("Ссылка,ЗаданиеНаРазборку",ДокОбъект.Ссылка,СтрокаТаб.ЗаданиеНаРазборку));
						Если МасСтрЗ.Количество() Тогда
							Если МасСтрЗ[0].ОтработаноЗадание=Истина Тогда
								СтрокаТаб.Количество=0;
							Иначе	
								МасИскл.Добавить(СтрокаТаб.ЗаданиеНаРазборку);
								Фл=Ложь;
							КонецЕсли; 
						Иначе	
							МасИскл.Добавить(СтрокаТаб.ЗаданиеНаРазборку);
							Фл=Ложь;
						КонецЕсли; 
						
						
						//
						//Если МасОтработанныхЗаданий.Найти(СтрокаТаб.ЗаданиеНаРазборку)=Неопределено Тогда
						//	МасИскл.Добавить(СтрокаТаб.ЗаданиеНаРазборку);
						//	Фл=Ложь;
						//Иначе
						//	СтрокаТаб.Количество=0;
						//КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		Если НЕ Фл Тогда
			Продолжить;	
		КонецЕсли; 
		
		
		ДокОбъект.Товары.Загрузить(ТоварыВДокументе);
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Для каждого Стр Из ДокОбъект.Товары Цикл
				Если ЗначениеЗаполнено(Стр.ЗаданиеНаРазборку) Тогда
					МасИскл.Добавить(Стр.ЗаданиеНаРазборку);
				КонецЕсли; 
			КонецЦикла; 
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	
	
	МасЗаданий=Новый Массив;
	Для каждого Стр Из ТЗРасходники Цикл
		Если МасИскл.Найти(Стр.ЗаданиеНаРазборку)=Неопределено И МасЗаданий.Найти(Стр.ЗаданиеНаРазборку)=Неопределено
			И НЕ МасОтработанныхЗаданий.Найти(Стр.ЗаданиеНаРазборку)=Неопределено Тогда
			ОбДок=Стр.ЗаданиеНаРазборку.ПолучитьОбъект();
			ОбДок.Закрыто=Истина;
			ОбДок.Записать(РежимЗаписиДокумента.Запись);
			МасЗаданий.Добавить(Стр.ЗаданиеНаРазборку);
			ЗаполнитьЗначенияСвойств(ТЗРасходникиЗакр.Добавить(),Стр);
		КонецЕсли; 
	КонецЦикла; 
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	РасходныйОрдерСкладТовары.Ссылка,
	//|	МИНИМУМ(РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто) КАК Закрыто
	//|ИЗ
	//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	//|ГДЕ
	//|	РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	//|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	//|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	//|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	//|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	//|	И РасходныйОрдерСкладТовары.Ссылка.СборкаТерминаломЗакончена = ЛОЖЬ
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РасходныйОрдерСкладТовары.Ссылка
	//|
	//|ИМЕЮЩИЕ
	//|	МИНИМУМ(РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто) = ИСТИНА";
	//ВыбИтог=Запрос.Выполнить().Выбрать();
	//
	//Пока ВыбИтог.Следующий() Цикл
	//	ДокОбъект=ВыбИтог.Ссылка.ПолучитьОбъект();
	//	
	//	
	//	
	//	
	//	
	//	ДокОбъект.СборкаТерминаломЗакончена = Истина;
	//	ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
	//	ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
	//	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	//	Попытка
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
	//		Мен.Период=ТекущаяДата();
	//		Мен.Ордер=ДокОбъект.Ссылка;
	//		Мен.Статус=Перечисления.СтатусПаллета.Собран;
	//		Мен.Записать();
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла; 
	
КонецПроцедуры
//---АК BELN 2017.12.22

//+++АК BELN 2018.03.13 ИП-00017800      
Процедура ЗаполнитьПозицииТребующиеОтдельныйКонтроль() Экспорт
	
	// Вставить содержимое обработчика.
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат;
	Иначе           
	КонецЕсли;
	НЗ=РегистрыСведений.ПозицииТребующиеВнимания.СоздатьНаборЗаписей();	
	НЗ.Записать();
	
	ТекДата=НачалоДня(ТекущаяДата());
	СтрЗапрос =	
	"EXEC   SMS_REPL.dbo.[sp_List_email_Verdict_Send]
    |@Verdict = N'Усилить контроль',
    |@isReport = 0";

	
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТЗВердикты=Новый ТаблицаЗначений;
	ТЗВердикты.Колонки.Добавить("id_tov",Новый ОписаниеТипов("Число"));
	ТЗВердикты.Колонки.Добавить("id_kontr",Новый ОписаниеТипов("Число"));
	ТЗВердикты.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТЗВердикты.Колонки.Добавить("Результат",Новый ОписаниеТипов("Строка"));
	ТЗВердикты.Колонки.Добавить("ДатаПартии",Новый ОписаниеТипов("Строка"));
	
	
	Попытка
		rs.MoveFirst();
		//
		Сч=0;
		Пока НЕ rs.EOF() Цикл
			Сч=Сч+1;
			Если Сч=100 Тогда
				//прервать;
			КонецЕсли;
			Если НачалоДня(Rs.Fields("ДатаВердикт").Value)=ТекДата-2*24*60*60 
				ИЛИ НачалоДня(Rs.Fields("ДатаВердикт").Value)=ТекДата-24*60*60 ИЛИ НачалоДня(Rs.Fields("ДатаВердикт").Value)=ТекДата И Час(Rs.Fields("ДатаВердикт").Value)<18 Тогда
				НовСтр=ТЗВердикты.Добавить();
				НовСтр.id_tov=Rs.Fields("id_tov").Value;
				НовСтр.id_kontr=Rs.Fields("id_kontr").Value;
				НовСтр.Дата=Rs.Fields("ДатаВердикт").Value;
				НовСтр.Результат=Rs.Fields("Bad_result").Value;
				НовСтр.ДатаПартии=Rs.Fields("ДатаПартии").Value;
			
			
			КонецЕсли; 
			
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если ТЗВердикты.Количество()=0 Тогда
		Возврат;
		
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	РолиПользователейСоставРоли.Сотрудник,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|			ПО (КонтактнаяИнформация.Объект = РолиПользователейСоставРоли.Сотрудник)
		|				И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка";
	
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваНочной);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Кому=Новый СписокЗначений;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
	Кому.Добавить("product_1@vkusvill.ru");
	Кому.Добавить("annyllat@gmail.com");
	Кому.Добавить("svetlanca-sv@mail.ru");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.id_tov,
		|	ТЗ.Дата,
		|	ТЗ.Результат,
		|	ТЗ.ДатаПартии,
		|	ТЗ.id_kontr
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	НАЧАЛОПЕРИОДА(вт.Дата, ДЕНЬ) КАК Дата,
		|	вт.Результат,
		|	вт.ДатаПартии
		|ПОМЕСТИТЬ втНом
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО вт.id_kontr = Контрагенты.ИД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО вт.id_tov = Номенклатура.id_tov
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Характеристика,
		|	втНом.Номенклатура КАК Номенклатура,
		|	втНом.Контрагент,
		|	втНом.Дата КАК Дата,
		|	втНом.Результат,
		|	втНом.ДатаПартии
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНом КАК втНом
		|		ПО (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|			И ЗначенияСвойствОбъектов.Значение = втНом.Контрагент
		|			И (ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = втНом.Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Дата";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗВердикты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНом = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Если Час(ТекущаяДата())=12 Тогда
		Час1=18;
		Час2=12;
		ТекДата1=ТекДата-24*60*60;
	Иначе	
		Час1=12;
		Час2=18;
		ТекДата1=ТекДата;
	КонецЕсли; 
	
	
	Текст="";
	Пока ВыборкаНом.Следующий() Цикл
		ВыборкаХар = ВыборкаНом.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХар.Следующий() Цикл
			ВыборкаДата = ВыборкаХар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДата.Следующий() Цикл
				Если НачалоДня(ВыборкаДата.Дата)=ТекДата1 И Час(ВыборкаДата.Дата)>=Час1
				ИЛИ НачалоДня(ВыборкаДата.Дата)=ТекДата И Час(ВыборкаДата.Дата)<Час2 Тогда
					Текст=Текст+Символы.ПС+Строка(ВыборкаХар.Номенклатура)+" "+Строка(ВыборкаХар.Характеристика);
					//Текст=Текст+Символы.ПС+Строка(Формат(ВыборкаДата.Дата,"ДФ=dd.MM.yyyy"))+" ";
					Выборка = ВыборкаДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Выборка.Следующий() Цикл
						Текст=Текст+" "+Выборка.Результат+?(ЗначениеЗаполнено(Выборка.ДатаПартии)," Дата партии "+Выборка.ДатаПартии,"");
					КонецЦикла;
				
					
				
				КонецЕсли; 
				Мен=РегистрыСведений.ПозицииТребующиеВнимания.СоздатьМенеджерЗаписи();
				Мен.Номенклатура=ВыборкаХар.Номенклатура;
				Мен.Характеристика=ВыборкаХар.Характеристика;
				Мен.Период=ВыборкаДата.Дата;
				Мен.Записать();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если Текст="" Тогда
		Возврат;
	КонецЕсли; 
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	СтруктураНовогоПисьма.Вставить("Тема", "Позиции, требующие усиления контроля");
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	//
	СтруктураНовогоПисьма.Вставить("Тело", Текст);
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо ");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	

КонецПроцедуры
//---АК BELN 2018.03.13 

Процедура СоздатьПриход(ADOСоединение,ДатаЗагрузки,НомерТочки,Провести=Ложь)
	ВремяПоставки = '00010101';
	ТекстSQL = "declare @time time = CAST(" + ВнешниеДанные.ФорматПоля(ВремяПоставки) + " as time)
				|exec [SMS_Repl].[dbo].[InsertTDMoveOperations] @ShopNo = " + ВнешниеДанные.ФорматПоля(НомерТочки) + ", @Data = " + ВнешниеДанные.ФорматПоля(ДатаЗагрузки) 
				+ ", @CashierId = " + ВнешниеДанные.ФорматПоля("") + ", @Type = 1, @Time_delivery = @time";
				
	rs = ADOСоединение.Execute(ТекстSQL);
	Если Провести Тогда
		ИмяБд = "SMS_Repl";
		ДатаЗакрытия = (ДатаЗагрузки+61);
		ЗапросСкуль = "UPDATE [" + ИмяБд + "].[dbo].[TD_Move]
	   				|SET closedate = " + ВнешниеДанные.ФорматПоля(ДатаЗакрытия)+",opendate = " + ВнешниеДанные.ФорматПоля(ДатаЗакрытия) + ", operation_type = " + ВнешниеДанные.ФорматПоля(400) + ", operation_type_orig = " + ВнешниеДанные.ФорматПоля(400) + "
				  |,balance_ost = TD_move.Quantity * OpType.znak + TD_ost.Ost_kon
				  |
				  |	FROM [" + ИмяБд + "].[dbo].[TD_move] as TD_move with (rowlock, index (ind1))
				  |	LEFT OUTER JOIN [" + ИмяБд + "].[dbo].[TD_ost] as TD_ost (nolock) ON TD_move.id_tov = TD_ost.id_tov and TD_ost.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерТочки) + "
				  |	LEFT OUTER JOIN (SELECT [Znak], [code_operation] FROM [" + ИмяБд + "].[dbo].[Types_Operation] (nolock) where [table_operation] = 'td_move' and [field_operation] = 'operation_type_orig') as OpType ON TD_move.operation_type = OpType.code_operation
				  | WHERE TD_move.opendate>="+ВнешниеДанные.ФорматПоля(ДатаЗагрузки)+"and TD_move.opendate<"+ВнешниеДанные.ФорматПоля(ДатаЗагрузки+24*60*60)+" and TD_move.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерТочки) + " and operation_type =-400";
		ЗапросПолный = "declare @err int =1
					|while @err=1
					|begin
					| begin try
					|" + ЗапросСкуль + "
					|select @err=0
					| 
					| END TRY
					|  BEGIN CATCH
					| 
					|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
					|begin
					|-- запись в лог факта блокировки
					|	set @err=1
					|end
					|else
					|begin
					| 
					|-- прочая ошибка - выход  
					| return
					| end
					| 
					|  END CATCH 
					|end -- while";
					
		//ЗамерПроизводительностиSQLЗапросов.НачатьЗамерSQLЗапроса(ТекущаяДата(), "Проведение документа Товародвижения", ЗапросПолный,,,"Проведение документа Товародвижения", ДопКлючЗамера);
		
		Попытка	
			ADOСоединение.Execute(ЗапросПолный);
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка проведения документа", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ЗапросСкуль);
			флУспешно = Ложь;
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры


Процедура СоздатьПриходыМикромаркетов(КодУзла=Неопределено) Экспорт
	ТТ=Неопределено;
	Если НЕ КодУзла=Неопределено Тогда
		УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодУзла);
		ТТ=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Магазин");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.НомерТочки
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипРозничнойТочки = &ТипРозничнойТочки И (СтруктурныеЕдиницы.Ссылка=&ТТ ИЛИ &ТТ=Неопределено)
	//+++АК ILIK 2018.08.08 ИП-00019413
	//	|	И НЕ СтруктурныеЕдиницы.СтатусТорговойТочки = &СтатусТорговойТочки";
		|	И НЕ СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))";
	//
	//Запрос.УстановитьПараметр("СтатусТорговойТочки", Перечисления.СтатусыТорговыхТочек.Закрыт);
	//---АК ILIK
	Запрос.УстановитьПараметр("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Микромаркет);
	Запрос.УстановитьПараметр("ТТ", ТТ);
	РезультатЗапроса = Запрос.Выполнить();
	ДатаЗагрузки = НачалоДня(ТекущаяДата());

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 СоздатьПриход(ADOСоединение,ДатаЗагрузки-2*24*60*60,ВыборкаДетальныеЗаписи.НомерТочки,Ложь);
		 СоздатьПриход(ADOСоединение,ДатаЗагрузки-24*60*60,ВыборкаДетальныеЗаписи.НомерТочки,Ложь);
		 СоздатьПриход(ADOСоединение,ДатаЗагрузки,ВыборкаДетальныеЗаписи.НомерТочки,Ложь);
	КонецЦикла;
	

	ADOСоединение.Close();
	

КонецПроцедуры


//+++АК БЕЛН 09.10.2016 ИП-00015602.02
Процедура СоздатьЗаявкиНаРемонт() Экспорт
	// Вставить содержимое обработчика.
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат;
	Иначе         
	КонецЕсли;
	//
	
	
	Дата1=НачалоДня(ТекущаяДата()-2*24*60*60);
	Дата2=КонецДня(ТекущаяДата());
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.Магазин,
	|	ЗаявкаНаРемонт.Дата
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|ГДЕ
	|	ЗаявкаНаРемонт.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ЗаявкаНаРемонт.ИД <> """"";
	
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗЗаявки=РезультатЗапроса.Выгрузить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтрИД="";	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрИД=СтрИД+","+ВыборкаДетальныеЗаписи.ИД;
	КонецЦикла;
	СтрИД=Прав(СтрИД,СтрДлина(СтрИД)-1);
	Если СтрИД<>"" Тогда
		УсловиеИД=" and not TemraSensorData_Notification.id in ("+СтрИД+")"
	Иначе	
		УсловиеИД="";
	КонецЕсли; 
	СтрЗапрос =	"	declare @date1 as datetime , @date2 as datetime
	|set @date1="+ВнешниеДанные.ФорматПоля(Дата1)+"
	|set @date2 = "+ВнешниеДанные.ФорматПоля(Дата2)+"
	
	|Select * From  [m2].[dbo].[TemraSensorData_Notification_bot] (nolock) TemraSensorData_Notification
	|Where  date_add between @date1 and @date2 and needs_repair=2 and repairdate is null "+УсловиеИД; 
	
	
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	//ТЗ=Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("Место");
	//ТЗ.Колонки.Добавить("Сенсор");
	//ТЗ.Колонки.Добавить("Shop_name");
	//ТЗ.Колонки.Добавить("mest_name");
	//ТЗ.Колонки.Добавить("Ответ");
	//ТЗ.Колонки.Добавить("Дата");
	//ТЗ.Колонки.Добавить("is_made");
	//ТЗ.Колонки.Добавить("ShopNo");
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.НомерТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗТТ = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.АК_УсловияРегламентныхРабот.СрезПоследних(&ТекДата, Услуга = &Услуга) КАК АК_УсловияРегламентныхРаботСрезПоследних
	|ГДЕ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И (АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания >= НачалоПериода(&Текдата,День))";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Услуга", Справочники.Номенклатура.НайтиПоКоду("000615698"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРемкомпании = РезультатЗапроса.Выгрузить();
	
	
	
	Попытка
		rs.MoveFirst();
		//
		Сч=0;
		Пока НЕ rs.EOF() Цикл
			Сч=Сч+1;
			Если Сч=100 Тогда
				//прервать;
				
				
			КонецЕсли; 
			МасСтр=ТЗТТ.НайтиСтроки(Новый Структура("НомерТочки",Rs.Fields("ShopNo").Value));
			Если Не МасСтр.Количество() Тогда
				rs.MoveNext();
				Продолжить;	
			КонецЕсли; 
			ДатаДок=Rs.Fields("date_add").Value;
			
			//RecordSet    = Новый COMОбъект("ADODB.Recordset");
			//RecordSet.CursorLocation    = 3;
			//RecordSet.LockType			= 2;
			//Запрос = "SELECT Grafik_file FROM [M2].[dbo].[TemraSensorData_Notification] (nolock) WHERE id = " + ВнешниеДанные.ФорматПоля(Rs.Fields("id").Value);
			//RecordSet.Open(Запрос, ADOСоединение);
			//RecordSet.MoveFirst();
			//
			//Stream        = Новый COMОбъект("ADODB.Stream");
			//Stream.Type = 1;
			//Stream.Open();
			//Stream.Write(RecordSet.Fields("Grafik_file").Value);
			//ИмяФайла = ПолучитьИмяВременногоФайла("bmp");
			//Stream.SaveToFile(ИмяФайла);
			//Stream.Close();
			ИДзаписи=СтрЗаменить(Строка(Rs.Fields("id").Value)," ","");
			
			//ИДзаписи=Лев(ИДзаписи,СтрДлина(ИДзаписи)-1);
			//ИДзаписи=Прав(ИДзаписи,СтрДлина(ИДзаписи)-1);
			Док=Документы.ЗаявкаНаРемонт.СоздатьДокумент();
			Док.Дата=Rs.Fields("date_add").Value;
			ФайлКартинки = Новый Файл("\\10.0.0.51\1c$\Graphics\"+ИДзаписи+".jpeg");
			Если ФайлКартинки.Существует() Тогда
				
				ИдентификаторФотографии = Строка(Новый УникальныйИдентификатор);
				//ДанныеФотографии = Новый Структура("ИдентификаторФотографии, Расширение", ИдентификаторФотографии, ФайлКартинки.Расширение);
				//ОтносительноеИмяФайла = ОбменМобильноеПриложениеПереопределяемый.ОбновитьФайлФотографииНаДиске(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя), Док.Ссылка, ДанныеФотографии);
				//Если Не ОтносительноеИмяФайла = Неопределено Тогда
				
				СтрокаФотографии = Док.Файлы.Добавить();
				СтрокаФотографии.ИмяФайла = ФайлКартинки.Имя;
				СтрокаФотографии.ИдентификаторФотографии = ИдентификаторФотографии;
				СтрокаФотографии.ОтносительноеИмяФайла = "Graphics\"+ИДзаписи+".jpeg";
				
				
			КонецЕсли; 
			
			//КонецЕсли;
			//УдалитьФайлы(ИмяФайла);	
			
			Док.ИД=ИДзаписи;
			Док.Срочность=Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно;
			Док.СуточныйПериод=Перечисления.СуточныйПериод.НеИмеетЗначения;
			
			Док.Магазин=МасСтр[0].Ссылка;
			МасСтр=ТЗРемкомпании.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница",Док.Магазин));
			Если МасСтр.Количество() Тогда
				Док.ИсполнительКонтрагент=МасСтр[0].Контрагент;
			КонецЕсли; 
			
			//Док.Описание=Rs.Fields("comment").Value;
			Док.ВидЗаявки=Перечисления.ВидыЗаявокНаРемонт.РемонтХолодильников;
			Док.Записать(РежимЗаписиДокумента.Проведение);
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//---АК БЕЛН 09.10.2016 ИП-00015602.02
//+++АК BELN 2017.12.19 
Процедура РассылкаПоНевыполненнымОбещаниям() Экспорт
	//АК БЕЛН+

	СКД = Отчеты.НевыполненныеОбещания.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	СКД1 = Отчеты.НевыполненныеОбещания.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных1");
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ТекстЗапроса=СКД.НаборыДанных.НаборДанных1.Запрос;
	ТекстЗапроса=ТекстЗапроса+
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	Выразить(КонтактнаяИнформация.Представление как Строка(1000)) Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И КонтактнаяИнформация.Объект Ссылка Справочник.ФизическиеЛица И НЕ КонтактнаяИнформация.Объект.ЭтоГруппа
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабельРаботыПродавцов.Сотрудник,
	|	ТабельРаботыПродавцов.ТорговаяТочка.АдресЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2";
	
	
	
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаОтчета",ТекущаяДата());
    КонецНедели=НачалоДня(ТекущаяДата())-1;
	НачалоНедели=ДобавитьМесяц(НачалоДня(НачалоДня(ТекущаяДата())-6*24*60*60-1),-2);	
	Запрос.УстановитьПараметр("Дата1", НачалоНедели);
	Запрос.УстановитьПараметр("Дата2", КонецНедели);
	Список7=новый СписокЗначений;
	Стр7="";
	Для Сч=1 По 500 Цикл
		Список7.Добавить(Сч*7);
		Стр7=Стр7+","+СтрЗаменить(Строка(Сч*7)," ","");
	КонецЦикла; 
	Стр7=Прав(Стр7,СтрДлина(Стр7)-1);	
	Список30=новый СписокЗначений;
	Стр30="";
	Для Сч=1 По 500 Цикл
		Список30.Добавить(Сч*30);
		Стр30=Стр30+","+СтрЗаменить(Строка(Сч*30)," ","");
	КонецЦикла; 
	Стр30=Прав(Стр30,СтрДлина(Стр30)-1);	
	
	Запрос.УстановитьПараметр("Список7",Список7);
	Запрос.УстановитьПараметр("Список30",Список30);
	
	
	Результат = Запрос.ВыполнитьПакет();
	ТЗПоОтчету = Результат[9].Выгрузить();
	ТабАдресов = Результат[10].Выгрузить();
	
	
	
	
	ТЗПолучателей=Новый ТаблицаЗначений;
	ТЗПолучателей.Колонки.Добавить("Получатель");
	Для Каждого Стр ИЗ ТЗПоОтчету Цикл
		Если (Стр.ВозрастКратен7 И (Стр.Оценка = Перечисления.ОценкаКачестваИсполнения.ЧастичноИсполняется 
			или Стр.Оценка = Перечисления.ОценкаКачестваИсполнения.ПолностьюНеИсполняется))	Тогда
			Если ЗначениеЗаполнено(Стр.Исполнитель) Тогда
				НС=ТЗПолучателей.Добавить();
				НС.Получатель = Стр.Исполнитель;
			КонецЕсли;	
			Если ЗначениеЗаполнено(Стр.Заказчик) Тогда
				НС=ТЗПолучателей.Добавить();
				НС.Получатель = Стр.Заказчик;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	ТЗПолучателей.Свернуть("Получатель");
	
	ТЗПолучателей.Колонки.Добавить("Адрес");
	Для Каждого Стр Из ТЗПолучателей Цикл
		СтрокиАдреса = ТабАдресов.НайтиСтроки(Новый Структура("Объект",Стр.Получатель));
		Для Каждого СтрокаАдреса Из СтрокиАдреса Цикл
			Стр.Адрес = ""+Стр.Адрес+СтрокаАдреса.Представление+";";
		КонецЦикла;	
	КонецЦикла;	
	ТЗПолучателей.Сортировать("Получатель Возр");
	//ТЗСКД=ТЗПоОтчету.Скопировать();	
	//Кол=ТЗСКД.Количество();
	//Для Сч=0 По Кол-1 Цикл
	//	Если ТипЗнч(ТЗСКД[Кол-1-Сч].Исполнитель)<>Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипЗнч(ТЗСКД[Кол-1-Сч].Заказчик)<>Тип("СправочникСсылка.ФизическиеЛица") Тогда
	//		ТЗСКД.Удалить(Кол-1-Сч);
	//	КонецЕсли; 
	//КонецЦикла; 
	Для Каждого Стр ИЗ ТЗПолучателей Цикл
		ТабДок = Новый ТабличныйДокумент;
		Настройки=СКД1.НастройкиПоУмолчанию;
		//СКД.НаборыДанных.НаборДанных1.Запрос=СтрЗаменить(СКД.НаборыДанных.НаборДанных1.Запрос,"&Список7",Стр7);
		//СКД.НаборыДанных.НаборДанных1.Запрос=СтрЗаменить(СКД.НаборыДанных.НаборДанных1.Запрос,"&Список30",Стр30);
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗПоОтчету);
		ПараметрДанных = Настройки.ПараметрыДанных.Элементы.Найти("ПолучательОтчета");
	    ПараметрДанных.Значение = Стр.Получатель;
	    ПараметрДанных.Использование = Истина;
		
		
	
		МакетКомп=КомпоновщикМакета.Выполнить(СКД1,Настройки, ДанныеРасшифровки, ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцКД=Новый ПроцессорКомпоновкиДанных;
		ПроцКД.Инициализировать(МакетКомп,ВнешниеНаборыДанных);
		ПроцВыв=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТЗРезультат=Новый ТаблицаЗначений;
		ПроцВыв.УстановитьОбъект(ТЗРезультат);
		
		ПроцВыв.НачатьВывод();
		Ит=0;
		Пока Истина Цикл
			ЭлементРезультатаКомпоновкиДанных = 
			ПроцКД.Следующий();
			Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
				Прервать;
			КонецЕсли;
			ПроцВыв.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
			Ит=Ит+1;
			Если Ит=201 Тогда
				//Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		ПроцВыв.ЗакончитьВывод();	
		ТЗРезультат.Свернуть("Исполнитель,ДокументОбещания,ДатаИзменения,ВозрастОбещанияВДнях,Оценка,ТекстОбещания");
		ТзОтправленные=Новый ТаблицаЗначений;
		ТзОтправленные.Колонки.Добавить("Исполнитель");
		ТзОтправленные.Колонки.Добавить("Заказчик");
		ТзОтправленные.Колонки.Добавить("ДокументОбещания");
		
		
		Для каждого СтрРез Из ТЗРезультат Цикл
			Если ЗначениеЗаполнено(СтрРез.ДокументОбещания) Тогда
				
				Если СтрРез.Оценка=Перечисления.ОценкаКачестваИсполнения.ЧастичноИсполняется ИЛИ СтрРез.Оценка=Перечисления.ОценкаКачестваИсполнения.ПолностьюНеИсполняется Тогда
					МасСтр=ТЗПоОтчету.НайтиСтроки(Новый Структура("ДокументОбещания,Исполнитель,Оценка,ВозрастКратен7,ДатаИзменения",
					СтрРез.ДокументОбещания,Стр.Получатель,СтрРез.Оценка,Истина,НачалоДня(СтрРез.ДатаИзменения)));
				Иначе
					Продолжить;
				КонецЕсли;
				
				
				Если МасСтр.Количество()=0 Тогда
					Продолжить;	
				КонецЕсли;
				МасОбещ=Новый Массив;
				
				Для каждого Эл из МасСтр Цикл
					Если Эл.ВозрастКратен30 Тогда
						МасОбещ.Добавить(Эл.ДокументОбещания);	
					КонецЕсли;
				КонецЦикла;
				
					
				Адрес = СокрЛП(Стр.Адрес);
				СписокКому = Новый СписокЗначений;
				ФлНеБылоОтправки=Ложь;
				ДопСообщение="";
				Если ЗначениеЗаполнено(Адрес) Тогда
					СпАдресов=Новый СписокЗначений;
					МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
					Для каждого ЭлАдр Из МассивАдресов Цикл
						Если ЗначениеЗаполнено(ЭлАдр) Тогда
							СписокКому.Добавить(СокрЛП(ЭлАдр));
						КонецЕсли; 
					КонецЦикла; 
				
				Иначе
					Если ТипЗнч(Стр.Получатель)=тип("СправочникСсылка.ФизическиеЛица") Тогда
						СписокКому.Добавить("zakaz_u@izbenka.msk.ru");
						СписокКому.Добавить("sp@vkusvill.ru");
						Сообщить("Письмо не отправлено! Не заполнен адрес электронной почты "+Стр.Получатель);
						ДопСообщение=ДопСообщение+Символы.ПС+"Не заполнена почта исполнителя!!!";

			       	Иначе
						ФлНеБылоОтправки=Истина;
					КонецЕсли; 
					//Продолжить;
				КонецЕсли;
				СтрЗаказчик="";
				ФлБылаОтправка=Ложь;
				СтрОписание="";
				УжеБыло=Ложь;
				МасЗаказ=Новый Массив;
				Для каждого Эл из МасСтр Цикл
					Если ТзОтправленные.НайтиСтроки(Новый Структура("Исполнитель,Заказчик,ДокументОбещания",Эл.Исполнитель,Эл.Заказчик,Эл.ДокументОбещания)).Количество()
						И МасОбещ.Количество()=0 Тогда
						УжеБыло=Истина;
						Продолжить;
					КонецЕсли; 
					ЗаполнитьЗначенияСвойств(ТзОтправленные.Добавить(),Эл);
					МасЗаказ.Добавить(Эл.Заказчик);
					Адрес="";
					СтрокиАдреса = ТабАдресов.НайтиСтроки(Новый Структура("Объект",Эл.Заказчик));
					Для Каждого СтрокаАдреса Из СтрокиАдреса Цикл
						Адрес = ""+Стр.Адрес+СтрокаАдреса.Представление+";";
					КонецЦикла;	
					СтрЗаказчик=СтрЗаказчик+?(Найти(СтрЗаказчик,Строка(Эл.Заказчик))=0,", "+Строка(Эл.Заказчик),"");
					Адрес = СокрЛП(Адрес);
					Если Адрес<>"" Тогда
						СпАдресов=Новый СписокЗначений;
						МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
						Для каждого ЭлАдр Из МассивАдресов Цикл
							Если ЗначениеЗаполнено(ЭлАдр) Тогда
								СписокКому.Добавить(СокрЛП(ЭлАдр));
							КонецЕсли; 
						КонецЦикла; 
						ФлБылаОтправка=Истина;
					Иначе
						Если ТипЗнч(Эл.Заказчик)=Тип("СправочникСсылка.ФизическиеЛица") Тогда
							СписокКому.Добавить("zakaz_u@izbenka.msk.ru");
							СписокКому.Добавить("sp@vkusvill.ru");
							ДопСообщение=ДопСообщение+Символы.ПС+"Не заполнена почта заказчика!!! - "+Эл.Заказчик;
							ФлБылаОтправка=Истина;
						КонецЕсли; 
					КонецЕсли;
					СтрОписание=СтрОписание+?(ЗначениеЗаполнено(Сокрлп(Эл.Описание)),Эл.Описание+Символы.ПС,"");
				КонецЦикла;

				
				Если (ФлНеБылоОтправки=Истина И ФлБылаОтправка=Ложь И МасОбещ.Количество()=0) ИЛИ МасЗаказ.Количество()=0  Тогда
					Продолжить;
					
				
				КонецЕсли; 
				
				
				Если МасОбещ.Количество() Тогда
					СписокКому.Добавить("retail2@izbenka.msk.ru");
					СписокКому.Добавить("krivenko.andy@yandex.ru");
					СписокКому.Добавить("r@vkusvill.ru");
					СписокКому.Добавить("zakaz_u@izbenka.msk.ru");
					СписокКому.Добавить("product_1@vkusvill.ru");
					СписокКому.Добавить("zakaz@izbenka.msk.ru");
					СписокКому.Добавить("retail5@izbenka.msk.ru");
					СписокКому.Добавить("retail1@izbenka.msk.ru");
					СписокКому.Добавить("kolianxxx@mail.ru");
					СписокКому.Добавить("concept@izbenka.msk.ru");  
					СписокКому.Добавить("lopatina-s-v@ya.ru");  
				КонецЕсли;
				
				УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
				
				Почта = Новый ИнтернетПочта;
				Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
				Письмо = Новый ИнтернетПочтовоеСообщение;
				
				Почта.Подключиться(Профиль);
				Письмо.Тема = "Не выполнено обещание "+СтрРез.ДокументОбещания+" на дату "+Формат(ТекущаяДата(),"ДЛФ=DDT");
				Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
				Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
				Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
				Для Каждого ПолучательЭлемент Из СписокКому Цикл
					Получатель = Письмо.Получатели.Добавить();
					Получатель.Адрес = ПолучательЭлемент.Значение;
				КонецЦикла;	
				
				ТекстСообщения = Письмо.Тексты.Добавить();
				ТекстСообщения.Текст     = "Заказчик - "+Прав(СтрЗаказчик,СтрДлина(СтрЗаказчик)-2)+Символы.ПС+
				"Исполнитель - "+СтрРез.Исполнитель+Символы.ПС+
				"Документ - "+СтрРез.ДокументОбещания+Символы.ПС+
				"Дата изменения - "+Формат(СтрРез.ДатаИзменения,"ДЛФ=DDT")+Символы.ПС+
				"Возраст обещания в днях - "+СтрРез.ВозрастОбещанияВДнях+Символы.ПС+
				"Оценка - "+СтрРез.Оценка+Символы.ПС+
				"Содержание - "+СтрРез.ТекстОбещания+Символы.ПС+?(ЗначениеЗаполнено(СтрОписание),"Причина - "+СтрОписание,"")+Символы.ПС+ДопСообщение;
				ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
				сообщить(ТекстСообщения.Текст);
				//Письмо.Вложения.Добавить(ИмяФайла);
						
				Почта.Послать(Письмо);
				
				Почта.Отключиться();
				
				Сообщить("Отправлено письмо "+Стр.Получатель);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;	


//АК БЕЛН-		
	

КонецПроцедуры
//---АК BELN 2017.12.19 

//+++АК BELN 2018.08.10 ИП-00018874
Процедура РассылкаПоВозможноУстаревшимОбещаниям() Экспорт
	//АК БЕЛН+
	
	СКД = Отчеты.НевыполненныеОбещания.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных2");
	СКД1 = Отчеты.НевыполненныеОбещания.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных3");
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбещаниеЗаказчики.Ссылка,
	|	ОбещаниеЗаказчики.Ссылка.Заказчик КАК ТипРоли,
	|	ОбещаниеЗаказчики.Заказчик КАК Сотрудник
	|ИЗ
	|	Документ.Обещание.Заказчики КАК ОбещаниеЗаказчики
	|ГДЕ
	|	ОбещаниеЗаказчики.Ссылка.Заказчик ССЫЛКА ПланВидовХарактеристик.ТипыРолейПользователя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбещаниеИсполнители.Ссылка,
	|	ОбещаниеИсполнители.Ссылка.Исполнитель,
	|	ОбещаниеИсполнители.Исполнитель
	|ИЗ
	|	Документ.Обещание.Исполнители КАК ОбещаниеИсполнители
	|ГДЕ
	|	ОбещаниеИсполнители.Ссылка.Исполнитель ССЫЛКА ПланВидовХарактеристик.ТипыРолейПользователя
	|	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбещаниеИсполнители.Ссылка,
	|	ОбещаниеИсполнители.Ссылка.Заказчик,
	|	ОбещаниеИсполнители.Заказчик
	|ИЗ
	|	Документ.Обещание.Исполнители КАК ОбещаниеИсполнители
	|ГДЕ
	|	ОбещаниеИсполнители.Ссылка.Заказчик ССЫЛКА ПланВидовХарактеристик.ТипыРолейПользователя
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбещаниеИсполнители.Ссылка,
	|	ОбещаниеИсполнители.Ссылка.Заказчик,
	|	ОбещаниеИсполнители.Заказчик
	|ИЗ
	|	Документ.Обещание.ОбъектыПривязки КАК ОбещаниеИсполнители
	|ГДЕ
	|	ОбещаниеИсполнители.Ссылка.Заказчик ССЫЛКА ПланВидовХарактеристик.ТипыРолейПользователя И ОбещаниеИсполнители.Ссылка.Исполнитель ССЫЛКА ПланВидовХарактеристик.ТипыРолейПользователя

	|	";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРоли = РезультатЗапроса.Выгрузить();
	
	ТзРоли1=ТЗРоли.СкопироватьКолонки();
	
	
	ТекстЗапроса=СКД.НаборыДанных.НаборДанных1.Запрос;
	ТекстЗапроса=ТекстЗапроса+
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	Выразить(КонтактнаяИнформация.Представление как Строка(1000)) Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И КонтактнаяИнформация.Объект Ссылка Справочник.ФизическиеЛица И НЕ КонтактнаяИнформация.Объект.ЭтоГруппа
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабельРаботыПродавцов.Сотрудник,
	|	ТабельРаботыПродавцов.ТорговаяТочка.АдресЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2";
	
	
	
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаОтчета",ТекущаяДата());
	КонецНедели=НачалоДня(ТекущаяДата())-1;
	НачалоНедели=ДобавитьМесяц(НачалоДня(НачалоДня(ТекущаяДата())-6*24*60*60-1),-2);	
	Запрос.УстановитьПараметр("Дата1", НачалоНедели);
	Запрос.УстановитьПараметр("Дата2", КонецНедели);
	
	
	Результат = Запрос.ВыполнитьПакет();
	ТЗПоОтчету = Результат[9].Выгрузить();
	ТабАдресов = Результат[10].Выгрузить();
	
	
	ТЗПолучателей=Новый ТаблицаЗначений;
	ТЗПолучателей.Колонки.Добавить("Получатель");
	Для Каждого Стр ИЗ ТЗПоОтчету Цикл
		Если (Стр.ВозрастКратен7 И (Стр.Оценка = Перечисления.ОценкаКачестваИсполнения.ПолностьюИсполняется 
			ИЛИ НЕ ЗначениеЗаполнено(Стр.Оценка))) Тогда
			Если ЗначениеЗаполнено(Стр.Исполнитель) Тогда
				НС=ТЗПолучателей.Добавить();
				НС.Получатель = Стр.Исполнитель;
				Если ТипЗнч(Стр.Исполнитель)=Тип("ПланВидовХарактеристикСсылка.ТипыРолейПользователя") Тогда
					МасСтрТРП=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка,ТипРоли",Стр.ДокументОбещания,Стр.Исполнитель));
					Для каждого ЭлТРП Из МасСтрТРП Цикл
						ЗаполнитьЗначенияСвойств(ТзРоли1.Добавить(),ЭЛТРП);
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли;	
			Если ЗначениеЗаполнено(Стр.Заказчик) Тогда
				НС=ТЗПолучателей.Добавить();
				НС.Получатель = Стр.Заказчик;
				Если ТипЗнч(Стр.Заказчик)=Тип("ПланВидовХарактеристикСсылка.ТипыРолейПользователя") Тогда
					МасСтрТРП=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка,ТипРоли",Стр.ДокументОбещания,Стр.Заказчик));
					Для каждого ЭлТРП Из МасСтрТРП Цикл
						ЗаполнитьЗначенияСвойств(ТзРоли1.Добавить(),ЭЛТРП);
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	ТЗПолучателей.Свернуть("Получатель");
	
	ТЗПолучателей.Колонки.Добавить("Адрес");
	Для Каждого Стр Из ТЗПолучателей Цикл
		Если ТипЗнч(Стр.Получатель)=Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СтрокиАдреса = ТабАдресов.НайтиСтроки(Новый Структура("Объект",Стр.Получатель));
			Для Каждого СтрокаАдреса Из СтрокиАдреса Цикл
				Стр.Адрес = ""+Стр.Адрес+СтрокаАдреса.Представление+";";
			КонецЦикла;	
			
		Иначе	
			МасСтрРоли=ТЗРоли1.НайтиСтроки(Новый Структура("ТипРоли",Стр.Получатель));
			Для каждого Эл Из МасСтрРоли Цикл
				СтрокиАдреса = ТабАдресов.НайтиСтроки(Новый Структура("Объект",Эл.Сотрудник));
				Для Каждого СтрокаАдреса Из СтрокиАдреса Цикл
					Стр.Адрес = ""+Стр.Адрес+СтрокаАдреса.Представление+";";
				КонецЦикла;	
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;	
	ТЗПолучателей.Сортировать("Получатель Возр");
	МасОтпрОбещ=Новый Массив;
	
	
	Для Каждого Стр ИЗ ТЗПолучателей Цикл
		ТабДок = Новый ТабличныйДокумент;
		Настройки=СКД1.НастройкиПоУмолчанию;
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗПоОтчету);
		ПараметрДанных = Настройки.ПараметрыДанных.Элементы.Найти("ПолучательОтчета");
		ПараметрДанных.Значение = Стр.Получатель;
		ПараметрДанных.Использование = Истина;
		
		МакетКомп=КомпоновщикМакета.Выполнить(СКД1,Настройки, ДанныеРасшифровки, ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцКД=Новый ПроцессорКомпоновкиДанных;
		ПроцКД.Инициализировать(МакетКомп,ВнешниеНаборыДанных);
		ПроцВыв=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТЗРезультат=Новый ТаблицаЗначений;
		ПроцВыв.УстановитьОбъект(ТЗРезультат);
		
		ПроцВыв.НачатьВывод();
		Ит=0;
		Пока Истина Цикл
			ЭлементРезультатаКомпоновкиДанных = 
			ПроцКД.Следующий();
			Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
				Прервать;
			КонецЕсли;
			ПроцВыв.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
			Ит=Ит+1;
		КонецЦикла;
		
		ПроцВыв.ЗакончитьВывод();	
		ТЗРезультат.Свернуть("Исполнитель,Заказчик,ДокументОбещания,ДатаИзменения,ВозрастОбещанияВДнях,Оценка,ТекстОбещания");
		ТзОтправленные=Новый ТаблицаЗначений;
		ТзОтправленные.Колонки.Добавить("Исполнитель");
		ТзОтправленные.Колонки.Добавить("Заказчик");
		ТзОтправленные.Колонки.Добавить("ДокументОбещания");
		
		
		Для каждого СтрРез Из ТЗРезультат Цикл
			Если ЗначениеЗаполнено(СтрРез.ДокументОбещания) Тогда
				ЭтоЗаказчик=Ложь;
				Если (СтрРез.Оценка=Перечисления.ОценкаКачестваИсполнения.ПолностьюИсполняется ИЛИ НЕ ЗначениеЗаполнено(СтрРез.Оценка))
					И МасОтпрОбещ.Найти(СтрРез.ДокументОбещания)=Неопределено Тогда
					МасСтр=ТЗПоОтчету.НайтиСтроки(Новый Структура("ДокументОбещания,Заказчик,Оценка,ВозрастКратен7,ДатаИзменения",
					СтрРез.ДокументОбещания,Стр.Получатель,СтрРез.Оценка,Истина,НачалоДня(СтрРез.ДатаИзменения)));
					ЭтоЗаказчик=Истина;
					Если МасСтр.Количество()=0 Тогда
						МасСтр=ТЗПоОтчету.НайтиСтроки(Новый Структура("ДокументОбещания,Исполнитель,Оценка,ВозрастКратен7,ДатаИзменения",
						СтрРез.ДокументОбещания,Стр.Получатель,СтрРез.Оценка,Истина,НачалоДня(СтрРез.ДатаИзменения)));
						ЭтоЗаказчик=Ложь;
					КонецЕсли; 
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если МасСтр.Количество()=0 Тогда
					Продолжить;	
				КонецЕсли;
				МасОбещ=Новый Массив;
				
				Для каждого Эл из МасСтр Цикл
					Если Эл.ВозрастКратен30 Тогда
						МасОбещ.Добавить(Эл.ДокументОбещания);	
					КонецЕсли;
				КонецЦикла;
				
				
				Адрес = СокрЛП(Стр.Адрес);
				СписокКому = Новый СписокЗначений;
				ФлНеБылоОтправки=Ложь;
				ДопСообщение="";
				Если ЗначениеЗаполнено(Адрес) Тогда
					СпАдресов=Новый СписокЗначений;
					МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
					Для каждого ЭлАдр Из МассивАдресов Цикл
						Если ЗначениеЗаполнено(ЭлАдр) Тогда
							СписокКому.Добавить(СокрЛП(ЭлАдр));
						КонецЕсли; 
					КонецЦикла; 
					
				Иначе
					Если ТипЗнч(Стр.Получатель)=тип("СправочникСсылка.ФизическиеЛица") Тогда
						СписокКому.Добавить("zakaz_u@izbenka.msk.ru");
						СписокКому.Добавить("sp@vkusvill.ru");
						Сообщить("Письмо не отправлено! Не заполнен адрес электронной почты "+Стр.Получатель);
						ДопСообщение=ДопСообщение+Символы.ПС+"Не заполнена почта "+?(ЭтоЗаказчик,"заказчика","исполнителя")+"!!!";
						
					Иначе
						//ФлНеБылоОтправки=Истина;
					КонецЕсли; 
					//Продолжить;
				КонецЕсли;
				
				
				
				Если ЭтоЗаказчик Тогда
					МасСтрДрУчастника=ТЗПолучателей.НайтиСтроки(Новый Структура("Получатель",СтрРез.Исполнитель));
				Иначе	
					МасСтрДрУчастника=ТЗПолучателей.НайтиСтроки(Новый Структура("Получатель",СтрРез.Заказчик));
				КонецЕсли; 
					
				Если МасСтрДрУчастника.Количество() Тогда
					Адрес=МасСтрДрУчастника[0].Адрес;
					Если ЗначениеЗаполнено(Адрес) Тогда
						СпАдресов=Новый СписокЗначений;
						МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
						Для каждого ЭлАдр Из МассивАдресов Цикл
							Если ЗначениеЗаполнено(ЭлАдр) Тогда
								СписокКому.Добавить(СокрЛП(ЭлАдр));
							КонецЕсли; 
						КонецЦикла; 
						
					Иначе
						Если ТипЗнч(МасСтрДрУчастника[0].Получатель)=тип("СправочникСсылка.ФизическиеЛица") Тогда
							СписокКому.Добавить("zakaz_u@izbenka.msk.ru");
							СписокКому.Добавить("sp@vkusvill.ru");
							Сообщить("Письмо не отправлено! Не заполнен адрес электронной почты "+МасСтрДрУчастника[0].Получатель);
							ДопСообщение=ДопСообщение+Символы.ПС+"Не заполнена почта "+?(НЕ ЭтоЗаказчик,"заказчика","исполнителя")+"!!!";
							
						Иначе
							//ФлНеБылоОтправки=Истина;
						КонецЕсли; 
						//Продолжить;
					КонецЕсли;
				
				КонецЕсли; 	
				
				
				СтрЗаказчик="";
				ФлБылаОтправка=Ложь;
				СтрОписание="";
				УжеБыло=Ложь;
				МасЗаказ=Новый Массив;
				Для каждого Эл из МасСтр Цикл
					Если ТзОтправленные.НайтиСтроки(Новый Структура("Исполнитель,Заказчик,ДокументОбещания",Эл.Исполнитель,Эл.Заказчик,Эл.ДокументОбещания)).Количество()
						И МасОбещ.Количество()=0 Тогда
						УжеБыло=Истина;
						Продолжить;
					КонецЕсли; 
					ЗаполнитьЗначенияСвойств(ТзОтправленные.Добавить(),Эл);
					МасЗаказ.Добавить(Эл.Заказчик);
					Адрес="";
					СтрокиАдреса = ТабАдресов.НайтиСтроки(Новый Структура("Объект",Эл.Заказчик));
					Для Каждого СтрокаАдреса Из СтрокиАдреса Цикл
						Адрес = ""+Стр.Адрес+СтрокаАдреса.Представление+";";
					КонецЦикла;	
					СтрЗаказчик=СтрЗаказчик+?(Найти(СтрЗаказчик,Строка(Эл.Заказчик))=0,", "+Строка(Эл.Заказчик),"");
					Адрес = СокрЛП(Адрес);
					Если Адрес<>"" Тогда
						СпАдресов=Новый СписокЗначений;
						МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
						Для каждого ЭлАдр Из МассивАдресов Цикл
							Если ЗначениеЗаполнено(ЭлАдр) Тогда
								СписокКому.Добавить(СокрЛП(ЭлАдр));
							КонецЕсли; 
						КонецЦикла; 
						ФлБылаОтправка=Истина;
					Иначе
						//Если ТипЗнч(Эл.Заказчик)=Тип("СправочникСсылка.ФизическиеЛица") Тогда
						//	СписокКому.Добавить("zakaz_u@izbenka.msk.ru");
						//	СписокКому.Добавить("sp@vkusvill.ru");
						//	ДопСообщение=ДопСообщение+Символы.ПС+"Не заполнена почта заказчика!!! - "+Эл.Заказчик;
						ФлБылаОтправка=Истина;
						//КонецЕсли; 
					КонецЕсли;
					СтрОписание=СтрОписание+?(ЗначениеЗаполнено(Сокрлп(Эл.Описание)),Эл.Описание+Символы.ПС,"");
				КонецЦикла;
				
				
				Если (ФлНеБылоОтправки=Истина И ФлБылаОтправка=Ложь И МасОбещ.Количество()=0) ИЛИ МасЗаказ.Количество()=0  Тогда
					Продолжить;
					
					
				КонецЕсли; 
				
				Если СписокКому.Количество()=0 Тогда
					Продолжить;
				КонецЕсли; 
				
				//Если МасОбещ.Количество() Тогда
				//	СписокКому.Добавить("retail2@izbenka.msk.ru");
				//	СписокКому.Добавить("krivenko.andy@yandex.ru");
				//	СписокКому.Добавить("r@vkusvill.ru");
				Если МасОтпрОбещ.Найти(СтрРез.ДокументОбещания)=Неопределено Тогда
					СписокКому.Добавить("zakaz_u@izbenka.msk.ru");
				КонецЕсли; 
				//	СписокКому.Добавить("product_1@vkusvill.ru");
				//	СписокКому.Добавить("zakaz@izbenka.msk.ru");
				//	СписокКому.Добавить("retail5@izbenka.msk.ru");
				//	СписокКому.Добавить("retail1@izbenka.msk.ru");
				//	СписокКому.Добавить("kolianxxx@mail.ru");
				//	СписокКому.Добавить("concept@izbenka.msk.ru");  
				//	СписокКому.Добавить("lopatina-s-v@ya.ru");  
				//КонецЕсли;
				
				УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
				
				Почта = Новый ИнтернетПочта;
				Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
				Письмо = Новый ИнтернетПочтовоеСообщение;
				
				Почта.Подключиться(Профиль);
				Письмо.Тема = "Возможно устаревшее "+СтрРез.ДокументОбещания+" на дату "+Формат(ТекущаяДата(),"ДЛФ=DDT");
				Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
				Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
				Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
				Для Каждого ПолучательЭлемент Из СписокКому Цикл
					Получатель = Письмо.Получатели.Добавить();
					Получатель.Адрес = ПолучательЭлемент.Значение;
					Сообщить(Получатель.Адрес);
				КонецЦикла;	
				
				ТекстСообщения = Письмо.Тексты.Добавить();
				ТекстСообщения.Текст     = "Заказчик - "+СтрРез.Заказчик+Символы.ПС+
				"Исполнитель - "+СтрРез.Исполнитель+Символы.ПС+
				"Документ - "+СтрРез.ДокументОбещания+Символы.ПС+
				"Дата изменения - "+Формат(СтрРез.ДатаИзменения,"ДЛФ=DDT")+Символы.ПС+
				"Возраст обещания в днях - "+СтрРез.ВозрастОбещанияВДнях+Символы.ПС+
				"Оценка - "+СтрРез.Оценка+Символы.ПС+
				"Содержание - "+СтрРез.ТекстОбещания+Символы.ПС+?(ЗначениеЗаполнено(СтрОписание),"Причина - "+СтрОписание,"")+Символы.ПС+ДопСообщение+
				Символы.ПС+"Возможно нужно открыть обещание и перевести его статус на ""снятое обещание""";
				ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
				сообщить(ТекстСообщения.Текст);
				//Письмо.Вложения.Добавить(ИмяФайла);
				
				Почта.Послать(Письмо);
				МасОтпрОбещ.Добавить(СтрРез.ДокументОбещания);
				//
				Почта.Отключиться();
				Сообщить("Отправлено письмо "+Стр.Получатель);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;	
	
	
	//АК БЕЛН-		
	
	
КонецПроцедуры
//---АК BELN 2018.08.10 

//+++АК BELN 2018.04.10 ИП-00018268 
Процедура ЗаполнитьМестоположениеТС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестоположениеТС.Контрагент,
		|	МестоположениеТС.Период,
		|	МестоположениеТС.ИДТС
		|ИЗ
		|	РегистрСведений.МестоположениеТС КАК МестоположениеТС
		|ГДЕ
		|	МестоположениеТС.Период МЕЖДУ &Дата1 И &Дата2";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Мен=РегистрыСведений.МестоположениеТС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Мен,ВыборкаДетальныеЗаписи);
		Мен.Удалить();
	КонецЦикла;
	

	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПаролиГлонассПеревозчиков.Контрагент,
		|	ПаролиГлонассПеревозчиков.Логин,
		|	ПаролиГлонассПеревозчиков.Пароль,
		|	ПаролиГлонассПеревозчиков.Адрес,
		|	ПаролиГлонассПеревозчиков.Организация,
		|	ПаролиГлонассПеревозчиков.Регионы
		|ИЗ
		|	РегистрСведений.ПаролиГлонассПеревозчиков КАК ПаролиГлонассПеревозчиков";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьМестоположениеТСПоПеревозчику(ВыборкаДетальныеЗаписи.Контрагент,ВыборкаДетальныеЗаписи.Логин,ВыборкаДетальныеЗаписи.Пароль,
		ВыборкаДетальныеЗаписи.Адрес,ВыборкаДетальныеЗаписи.Организация,ВыборкаДетальныеЗаписи.Регионы);

	КонецЦикла;
	

	

КонецПроцедуры
//---АК BELN 2018.04.10 
//+++АК BELN 2018.04.10 ИП-00018268 
Процедура ЗаполнитьМестоположениеТСПоПеревозчику(Контрагент,Логин,Пароль,Адрес,Организация,Регионы)
	//адрес="http://kain.online.omnicomm.ru:8001";
	Попытка
		WSОпределения = Новый WSОпределения(Адрес + "/AnalyticalServer/ws?wsdl");
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка создания определения веб-сервиса GPS Omnicomm. Возможно неверно указан адрес. (Подробности см. в журнале регистрации)';en='NTRS'");
		Сообщить(ТекстОшибки);
	КонецПопытки;
	
	Попытка
		WSПрокси = Новый WSПрокси(WSОпределения, "http://omnicomm.ru/analyticalserver", "AnalyticalServer", "AnalyticalServerPort");
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка создания прокси веб-сервиса GPS Omnicomm. (Подробности см. в журнале регистрации)';en='NTRS'");
		Сообщить(ОписаниеОшибки());
		Возврат ;
	КонецПопытки;
	
	//Контрагент=Справочники.Контрагенты.НайтиПоНаименованию("АТК40 ООО");
	
	Попытка
		//signInResult = WSПрокси.signIn("atk40", "atk40atk40");
		signInResult = WSПрокси.signIn(Логин, Пароль);
		ИдентификаторСессии = signInResult.return.sessionId;
		Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
			Сообщить("Не авторизовались");
			Возврат ;
			
		КонецЕсли; 
	Исключение
		
		WSПрокси = Неопределено;
		
		ТекстОшибки = НСтр("ru='Возникла ошибка при выполнении запроса авторизации. (Подробности см. в журнале регистрации)';en='Error occurred during authorization request execution. (For details, see event log)'");
		Сообщить(ТекстОшибки);
		Возврат ;
	КонецПопытки;
	
	
	МассивИдТС = Новый Массив;
	Попытка
		getObjectSetResult = WSПрокси.getObjectSet(ИдентификаторСессии);
		
		Для каждого ТекОбъект Из getObjectSetResult.return.objects Цикл
			Если МассивИдТС.Найти(Формат(ТекОбъект.id, "ЧН=0; ЧГ=0"))=Неопределено Тогда
				МассивИдТС.Добавить(Формат(ТекОбъект.id, "ЧН=0; ЧГ=0"));
			КонецЕсли; 
		КонецЦикла;
	Исключение
		
		WSПрокси = Неопределено;
		
		Сообщить(ОписаниеОшибки());
		
		Возврат ;
	КонецПопытки;
	
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ТС");
	
	ТаблицаСобытий.Колонки.Добавить("Период");
	ТаблицаСобытий.Колонки.Добавить("ЗначениеОдометра");
	ТаблицаСобытий.Колонки.Добавить("ЗначениеСчетчикаМоточасов");
	ТаблицаСобытий.Колонки.Добавить("ПотребленноеТопливо");
	ТаблицаСобытий.Колонки.Добавить("УровеньТоплива");
	ТаблицаСобытий.Колонки.Добавить("Лат");
	ТаблицаСобытий.Колонки.Добавить("Лон");
	ТаблицаСобытий.Колонки.Добавить("Скорость");
	ТаблицаСобытий.Колонки.Добавить("ТТ");
	ТаблицаСобытий.Колонки.Добавить("ВидТТ");
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("ВремяВыезда");
	
	ТаблицаСобытий.Колонки.Добавить("Автомобиль");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист0");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист1");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист2");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист3");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист4");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист5");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист6");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист7");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист8");
	ТаблицаСобытий.Колонки.Добавить("МаршЛист9");
	
	ТаблицаСобытий.Колонки.Добавить("Контрагент");
	ТаблицаСобытий.Колонки.Добавить("НомерЗаезда");
	ТаблицаСобытий.Колонки.Добавить("ИзРегистра",Новый ОписаниеТипов("Булево"));
	ТаблицаСобытий.Очистить();
	
	ТаблКУдалению=ТаблицаСобытий.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестоположениеТС.Период КАК Период,
		|	МестоположениеТС.Контрагент,
		|	МестоположениеТС.ИДТС КАК ТС,
		|	МестоположениеТС.Лат,
		|	МестоположениеТС.Лон,
		|	МестоположениеТС.Скорость,
		|	МестоположениеТС.Автомобиль,
		|	МестоположениеТС.ТТ,
		|	МестоположениеТС.МаршЛист0,
		|	МестоположениеТС.МаршЛист1,
		|	МестоположениеТС.МаршЛист2,
		|	МестоположениеТС.МаршЛист3,
		|	МестоположениеТС.МаршЛист4,
		|	МестоположениеТС.МаршЛист5,
		|	МестоположениеТС.НомерЗаезда,
		|	МестоположениеТС.МаршЛист6,
		|	МестоположениеТС.МаршЛист7,
		|	МестоположениеТС.МаршЛист8,
		|	МестоположениеТС.МаршЛист9,
		|	МестоположениеТС.ВидТТ,
		|	МестоположениеТС.ВремяВыезда,
		|	ИСТИНА КАК ИзРегистра
		|ИЗ
		|	РегистрСведений.МестоположениеТС КАК МестоположениеТС
		|ГДЕ
		|	МестоположениеТС.Период МЕЖДУ &Дата1 И &Дата2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаСобытий.Добавить(),ВыборкаДетальныеЗаписи);
	КонецЦикла;

	
	
	
	ПараметрыРеглЗадания = Новый Структура;
	Если Не ПараметрыРеглЗадания.Свойство("ПериодичностьХранения") Тогда
		ПараметрыРеглЗадания.Вставить("ПериодичностьХранения", 3);
	КонецЕсли;
	ИнтервалДетализации = ПараметрыРеглЗадания.ПериодичностьХранения;
	
	
		
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутныйЛистТорговыеТочки.Ссылка.Автомобиль,
		|	1 КАК Часть,
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница,
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница.КоординатыДолгота КАК КоординатыДолгота,
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница.КоординатыШирота КАК КоординатыШирота,
		|	МаршрутныйЛистТорговыеТочки.Ссылка,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|			ТОГДА МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|		ИНАЧЕ МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту
		|	КОНЕЦ КАК ВремяВыезда
		|ИЗ
		|	Документ.МаршрутныйЛист.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
		|ГДЕ
		|	МаршрутныйЛистТорговыеТочки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|	И МаршрутныйЛистТорговыеТочки.Ссылка.Проведен
		|	И МаршрутныйЛистТорговыеТочки.Ссылка.Перевозчик = &Перевозчик
		|	И НЕ МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту = НЕОПРЕДЕЛЕНО
		|	И (МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут.Организация = &Организация или &Организация=Значение(Справочник.Организации.ПустаяСсылка))
		|  И Выбор когда &Регионы=Истина Тогда МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница.Регион<>&Москва Иначе Истина Конец = Истина
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	2,
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.КоординатыДолгота,
		|	СтруктурныеЕдиницы.КоординатыШирота,
		|	NULL,
		|	NULL
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.склад)";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Перевозчик", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Регионы", Регионы);
	Запрос.УстановитьПараметр("Москва", Справочники.Регионы.НайтиПоКоду(77));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗМарш = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Автомобили.Ссылка,
		|	Автомобили.ИДГлонасс
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|ГДЕ
		|	Автомобили.ПометкаУдаления = ЛОЖЬ
		|	И Автомобили.ИДГлонасс <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗАвто = РезультатЗапроса.Выгрузить();
	
	Д1=НачалоДня(ТекущаяДата())-0.5*60*60;
	Д2=НачалоДня(ТекущаяДата())-0*60*60;
	
	Для Сч=1 По 28 Цикл
		Д1= Д1+30*60;
		Д2= Д2+30*60;
		TSДатаНачала = ПолучитьTimestamp(Д1, 3);
		TSДатаКонца = ПолучитьTimestamp(Д2, 3);
		сообщить(Сч);
		
		Для каждого ТекТС Из МассивИдТС Цикл
			TimeZone=3;
			
			Попытка
				getIntervalsInfoResult = WSПрокси.getIntervalsInfo(ИдентификаторСессии, ТекТС, TSДатаНачала, TSДатаКонца, Истина, ИнтервалДетализации, Ложь, Ложь);
				
				Результат = getIntervalsInfoResult.return;
				
				//Если Не Результат.status Тогда
				//	 Продолжить;
				//КонецЕсли;
				
				Если Результат.Свойства().Получить("intervalsData") <> Неопределено Тогда
					Для каждого ТекИнтервал Из Результат.intervalsData Цикл
						НоваяСтрока = ТаблицаСобытий.Добавить();
						//МасСтр=ТЗАвто.НайтиСтроки(Новый Структура("ИДГлонасс",ТекТС));
						//Если МасСтр.Количество() Тогда
						//	НоваяСтрока.Автомобиль = МасСтр[0].Ссылка;
						//КонецЕсли; 
						НоваяСтрока.ТС = ТекТС;
						
						Если ТекИнтервал.Свойства().Получить("timeIntervalEnd") <> Неопределено Тогда
							НоваяСтрока.Период = ПолучитьДатуИзTimestamp(ТекИнтервал.timeIntervalEnd, TimeZone) - 1;
						КонецЕсли;
						
						//Если ТекИнтервал.Свойства().Получить("statData") <> Неопределено И ТекИнтервал.statData.Свойства().Получить("mileage") <> Неопределено Тогда
						//	
						//	НоваяСтрока.ЗначениеОдометра = ТекИнтервал.statData.mileage;
						//КонецЕсли;
						//
						//Если ТекИнтервал.Свойства().Получить("engineData") <> Неопределено И ТекИнтервал.engineData.Свойства().Получить("engineOnTime") <> Неопределено Тогда
						//	
						//	//МЧвСек = ТекИнтервал.engineData.engineOnTime;
						//	//мЧасы = Цел(МЧвСек / 3600);
						//	//мМинуты = (МЧвСек / 3600 - Цел(МЧвСек / 3600)) * 60;
						//	//НоваяСтрока.ЗначениеСчетчикаМоточасов = мЧасы + мМинуты / 60;
						//КонецЕсли;
						//
						//Если ТекИнтервал.Свойства().Получить("fuelData") <> Неопределено И ТекИнтервал.fuelData.Количество() Тогда
						//	СтрокаТоплива = ТекИнтервал.fuelData[0];
						//	
						//	Если СтрокаТоплива.Свойства().Получить("fuelConsumption") <> Неопределено Тогда
						//		НоваяСтрока.ПотребленноеТопливо = СтрокаТоплива.fuelConsumption;
						//	КонецЕсли;
						//	
						//	Если СтрокаТоплива.Свойства().Получить("endFuelLevel") <> Неопределено Тогда
						//		НоваяСтрока.УровеньТоплива = СтрокаТоплива.endFuelLevel;
						//	КонецЕсли;
						//КонецЕсли;
						
						Если ТекИнтервал.Свойства().Получить("gpsData") <> Неопределено Тогда
							Если ТекИнтервал.gpsData.Свойства().Получить("endLatitude") <> Неопределено Тогда
								НоваяСтрока.Лат = ТекИнтервал.gpsData.endLatitude;
							КонецЕсли;
							
							Если ТекИнтервал.gpsData.Свойства().Получить("endLongitude") <> Неопределено Тогда
								НоваяСтрока.Лон = ТекИнтервал.gpsData.endLongitude;
							КонецЕсли;
							
							Если ТекИнтервал.gpsData.Свойства().Получить("endSpeed") <> Неопределено Тогда
								НоваяСтрока.Скорость = ТекИнтервал.gpsData.endSpeed;
							КонецЕсли;
						КонецЕсли;
						Если ТипЗнч(НоваяСтрока.Лат)=Тип("Число") И ТипЗнч(НоваяСтрока.Лон)=Тип("Число") И НоваяСтрока.Скорость<5 Тогда
							Для каждого СтрК Из ТЗМарш Цикл
								Если ?(НоваяСтрока.Лат-СтрК.КоординатыШирота>0,НоваяСтрока.Лат-СтрК.КоординатыШирота,-НоваяСтрока.Лат+СтрК.КоординатыШирота)<=0.00500000000 И
									?(НоваяСтрока.Лон-СтрК.КоординатыДолгота>0,НоваяСтрока.Лон-СтрК.КоординатыДолгота,-НоваяСтрока.Лон+СтрК.КоординатыДолгота)<=0.00500000000 Тогда
								    НоваяСтрока.ТТ=СтрК.СтруктурнаяЕдиница;
								    НоваяСтрока.ВидТТ=СтрК.Часть;
								    НоваяСтрока.Ссылка=СтрК.Ссылка;
									//Если ЗначениеЗаполнено(СтрК.ВремяВыезда) Тогда
								    	НоваяСтрока.ВремяВыезда=СтрК.ВремяВыезда;
									//КонецЕсли; 
									Прервать;
								
								КонецЕсли; 
							
						
							КонецЦикла; 
						Иначе 
						
						КонецЕсли; 
						//Если ТипЗнч(НоваяСтрока.Скорость)=Тип("Число") И НоваяСтрока.Скорость<5 И ЗначениеЗаполнено(НоваяСтрока.ТТ) И НЕ ЗначениеЗаполнено(НоваяСтрока.Автомобиль) Тогда
						//	МасСтр=ТЗМарш.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница,Часть",НоваяСтрока.ТТ,1));
						//	Если МасСтр.Количество() Тогда
						//		НоваяСтрока.Автомобиль=МасСтр[0].Автомобиль;
						//		Если ЗначениеЗаполнено(МасСтр[0].Автомобиль) Тогда
						//			ОбСпр=МасСтр[0].Автомобиль.ПолучитьОбъект();
						//			ОбСпр.ИДГлонасс=НоваяСтрока.ТС;
						//			ОбСпр.Записать();
						//			НовСтрАвто=ТЗАвто.Добавить();
						//			НовСтрАвто.Ссылка=МасСтр[0].Автомобиль;
						//			НовСтрАвто.ИДГлонасс=НоваяСтрока.ТС;
						//		КонецЕсли; 
						//	КонецЕсли; 
						//КонецЕсли; 
					КонецЦикла;
				КонецЕсли;
				
				
				
			Исключение
				
				//WSПрокси = Неопределено;
				
				ТекстОшибки = НСтр("ru='Возникла ошибка при получении данных по ТС. (Подробности см. в журнале регистрации)';en='NTRS'");
				Сообщить(ОписаниеОшибки());
				//Возврат ;
			КонецПопытки;
			//прервать;
		КонецЦикла;
	КонецЦикла; 
	Кол=ТаблицаСобытий.Количество();
	Для каждого ТекТС Из МассивИдТС Цикл
		ТекМаршЛист=Новый Массив;;
		Склад=Неопределено;
		НомерЗаезда=0;
		Для Сч=0 по Кол-1 Цикл
			Если  ТаблицаСобытий[Кол-1-Сч].ТС=ТекТС И ТаблицаСобытий[Кол-1-Сч].ИзРегистра=Ложь Тогда
				Если ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].ТТ) Тогда
					Если ЗначениеЗаполнено(Склад) И ТаблицаСобытий[Кол-1-Сч].ТТ<>Склад И ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].ТТ) Тогда
						ТекМаршЛист=Новый Массив;;
						Склад=Неопределено;
						НомерЗаезда=НомерЗаезда+1;
					
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].ТТ) Тогда
						Если ТаблицаСобытий[Кол-1-Сч].ВидТТ=1 Тогда
							ТаблицаСобытий[Кол-1-Сч].МаршЛист0=ТаблицаСобытий[Кол-1-Сч].Ссылка;
							Если ТекМаршЛист.Найти(ТаблицаСобытий[Кол-1-Сч].Ссылка)=Неопределено Тогда
								ТекМаршЛист.Добавить(ТаблицаСобытий[Кол-1-Сч].Ссылка);
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли; 
					
					Если   ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].ТТ) И НЕ ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].МаршЛист0) Тогда
						Если ТаблицаСобытий[Кол-1-Сч].ВидТТ=2 Тогда
							Склад=ТаблицаСобытий[Кол-1-Сч].ТТ;
							ТаблицаСобытий[Кол-1-Сч].НомерЗаезда=НомерЗаезда;
							Если ТекМаршЛист.Количество() И ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].ТТ) Тогда
								Ит=0;
								Для каждого Эл Из ТекМаршЛист Цикл
									Если Ит<10 Тогда
										ТаблицаСобытий[Кол-1-Сч]["МаршЛист"+Строка(Ит)]=ТекМаршЛист[Ит];
									КонецЕсли; 
									Ит=Ит+1;
								КонецЦикла; 
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	
	Кол=ТаблицаСобытий.Количество();
	Для Сч=0 По Кол-1 Цикл
		Если ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].ТТ) И ЗначениеЗаполнено(ТаблицаСобытий[Кол-1-Сч].МаршЛист0) 
			И ТаблицаСобытий[Кол-1-Сч].ВидТТ=1  И ТаблицаСобытий[Кол-1-Сч].ИзРегистра=Ложь Тогда
			ТекИДТС=ТаблицаСобытий[Кол-1-Сч].ТС;
			
			
			МасСтрВрВыезда1=ТаблицаСобытий.НайтиСтроки(Новый Структура("ВидТТ,ТС,ИзРегистра",2,ТекИДТС,Ложь));
			ВрВыезда1=Неопределено;
			Для каждого ЭлВр Из МасСтрВрВыезда1 Цикл
				Если ЭлВр.Период<ТаблицаСобытий[Кол-1-Сч].Период И (ЭлВр.МаршЛист0=ТаблицаСобытий[Кол-1-Сч].МаршЛист0 
					ИЛИ ЭлВр.МаршЛист1=ТаблицаСобытий[Кол-1-Сч].МаршЛист0 ИЛИ ЭлВр.МаршЛист2=ТаблицаСобытий[Кол-1-Сч].МаршЛист0
					 ИЛИ ЭлВр.МаршЛист3=ТаблицаСобытий[Кол-1-Сч].МаршЛист0 ИЛИ ЭлВр.МаршЛист4=ТаблицаСобытий[Кол-1-Сч].МаршЛист0 ИЛИ ЭлВр.МаршЛист5=ТаблицаСобытий[Кол-1-Сч].МаршЛист0 
					 ИЛИ ЭлВр.МаршЛист6=ТаблицаСобытий[Кол-1-Сч].МаршЛист0
					 ИЛИ ЭлВр.МаршЛист7=ТаблицаСобытий[Кол-1-Сч].МаршЛист0  ИЛИ ЭлВр.МаршЛист8=ТаблицаСобытий[Кол-1-Сч].МаршЛист0 ИЛИ ЭлВр.МаршЛист9=ТаблицаСобытий[Кол-1-Сч].МаршЛист0) Тогда
				     ВрВыезда1=ЭлВр.Период;
				КонецЕсли; 
			КонецЦикла; 
			Если ВрВыезда1=Неопределено Тогда
				ТаблицаСобытий.Удалить(Кол-1-Сч);
				Продолжить;
			КонецЕсли; 
			
			
			ЕстьДрЗаезды=Ложь;
			МасСтр=ТаблицаСобытий.НайтиСтроки(Новый Структура("ТТ",ТаблицаСобытий[Кол-1-Сч].ТТ));
			Фл=Ложь;
			Для каждого Эл Из МасСтр Цикл
				Если Эл.ТС<>ТекИДТС Тогда
					
					
					МасСтрВрВыезда2=ТаблицаСобытий.НайтиСтроки(Новый Структура("ВидТТ,ТС",2,Эл.ТС));
					ВрВыезда2=Неопределено;
					Для каждого ЭлВр Из МасСтрВрВыезда2 Цикл
						Если ЭлВр.Период<Эл.Период И (ЭлВр.МаршЛист0=Эл.МаршЛист0 ИЛИ ЭлВр.МаршЛист1=Эл.МаршЛист0 ИЛИ ЭлВр.МаршЛист2=Эл.МаршЛист0
							 ИЛИ ЭлВр.МаршЛист3=Эл.МаршЛист0 ИЛИ ЭлВр.МаршЛист4=Эл.МаршЛист0 ИЛИ ЭлВр.МаршЛист5=Эл.МаршЛист0 ИЛИ ЭлВр.МаршЛист6=Эл.МаршЛист0
							 ИЛИ ЭлВр.МаршЛист7=Эл.МаршЛист0  ИЛИ ЭлВр.МаршЛист8=Эл.МаршЛист0 ИЛИ ЭлВр.МаршЛист9=Эл.МаршЛист0) Тогда
						     ВрВыезда2=ЭлВр.Период;
						КонецЕсли; 
					КонецЦикла; 
					Если ВрВыезда2=Неопределено Тогда
						Если Эл.ИзРегистра Тогда
							ЗаполнитьЗначенияСвойств(ТаблКУдалению.Добавить(),Эл);
						КонецЕсли; 
						Продолжить;
					КонецЕсли; 
					
					//Сообщить(ТаблицаСобытий[Кол-1-Сч].тт);
					//Сообщить(""+ВрВыезда1+" "+Типзнч(ВрВыезда1));
					//Сообщить(""+ТаблицаСобытий[Кол-1-Сч].ВремяВыезда+" "+Типзнч(ТаблицаСобытий[Кол-1-Сч].ВремяВыезда));
					
					Секунд1=(ВрВыезда1-НачалоДня(ВрВыезда1))-(ТаблицаСобытий[Кол-1-Сч].ВремяВыезда-Дата(1,1,1));
					Если Секунд1<0 Тогда
						Секунд1=-Секунд1;	
					КонецЕсли; 
					Секунд2=(ВрВыезда2-НачалоДня(ВрВыезда2))-(Эл.ВремяВыезда-Дата(1,1,1));
					Если Секунд2<0 Тогда
						Секунд2=-Секунд2;	
					КонецЕсли; 
					
					
					
					
					Если Секунд1>Секунд2 Тогда
						ТаблицаСобытий.Удалить(Кол-1-Сч);
						Фл=Истина;
						Прервать;
					Иначе
						Если Эл.ИзРегистра Тогда
							ЗаполнитьЗначенияСвойств(ТаблКУдалению.Добавить(),Эл);
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
		КонецЕсли; 	
	КонецЦикла; 

	//
	
	Для каждого Стр Из ТаблицаСобытий Цикл
		Если ЗначениеЗаполнено(Стр.ТТ) И ЗначениеЗаполнено(Стр.МаршЛист0) И Стр.ИзРегистра=Ложь Тогда
			Мен=РегистрыСведений.МестоположениеТС.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Мен,Стр);
			Мен.ИДТС=Стр.ТС;
			Мен.Контрагент=Контрагент;
			Мен.Записать();
		КонецЕсли; 	
	КонецЦикла; 
		
	ТаблКУдалению.Свернуть("Период,ТС,Контрагент");
	Для каждого Стр Из ТаблКУдалению Цикл
		Мен=РегистрыСведений.МестоположениеТС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Мен,Стр);
		Мен.ИДТС=Стр.ТС;
		Мен.Удалить();
	КонецЦикла; 
КонецПроцедуры
//---АК BELN 2018.04.10 
//+++АК BELN 2018.04.10 ИП-00018268 
Функция ПолучитьДатуИзTimestamp(Timestamp, TimeZone = 0)
	Дата1С = Число(Timestamp) + TimeZone * 3600;
	
	Возврат Дата('19700101000000') + Дата1С;
	
КонецФункции
//---АК BELN 2018.04.10 
//+++АК BELN 2018.04.10 ИП-00018268 
Функция ПолучитьTimestamp(ИсходнаяДата, TimeZone = 0)
	Timestamp = ИсходнаяДата - Дата('19700101000000');
	Timestamp = Timestamp - TimeZone * 3600;
	Timestamp = Формат(Timestamp, "ЧГ=0");
	
	Возврат Timestamp;
	
КонецФункции
//---АК BELN 2018.04.10 

Процедура РассылкаОВыполненныхЗаявкахНаРемонт() Экспорт
	Если Не ДеньНедели(ТекущаяДата())=1 Тогда
		Возврат;
	КонецЕсли; 
	Папка1= "\\10.0.0.51\1c$\";
	Папка2= СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить())+"\";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРоли = РезультатЗапроса.Выгрузить();
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Магазин КАК Магазин,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Описание,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.ИсполнительКонтрагент,
	|	ЗаявкаНаРемонт.ИсполнительФизЛицо,
	|	ЗаявкаНаРемонт.ЧислоРассылокНачальнику,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяПомощник,
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.ОбъектРемонта,
	|	ЗаявкаНаРемонт.Магазин.ТелефонныйНомер1 КАК ТелефонныйНомер1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата1, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО (СоответствиеОбъектРольСрезПоследних.Объект = ЗаявкаНаРемонт.Магазин)
	|ГДЕ
	|	ЗаявкаНаРемонт.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаявкаНаРемонт.Проведен
	|	И ЗаявкаНаРемонт.ПометкаУдаления = ЛОЖЬ
	|	И ДОБАВИТЬКДАТЕ(ЗаявкаНаРемонт.Дата, ЧАС, ЗаявкаНаРемонт.Срочность.Дней) МЕЖДУ &Дата1 И &Дата2
	|	И ЗаявкаНаРемонт.Выполнено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователяПомощник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	
	Запрос.УстановитьПараметр("Дата1", НачалоНедели(НачалоДня(ТекущаяДата())-1));
	Запрос.УстановитьПараметр("Дата2", НачалоДня(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("ДатаНач", НачалоНедели(НачалоДня(ТекущаяДата())-1)-7*24*60*60);
	Запрос.УстановитьПараметр("ДатаКон", НачалоДня(ТекущаяДата())-1+7*24*60*60);
	
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			Сообщение="Выполнена заявка на ремонт в магазинах - ";
			СписокФайловВложений = Новый СписокЗначений;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение=Сообщение+Символы.ПС+Строка(ВыборкаДетальныеЗаписи.Магазин)+" ("+Строка(ВыборкаДетальныеЗаписи.ТелефонныйНомер1)+") "+" - "+ВыборкаДетальныеЗаписи.Ссылка+Символы.ПС+
				ВыборкаДетальныеЗаписи.Описание+Символы.ПС+"Срок выполнения - "+Строка(ВыборкаДетальныеЗаписи.Срочность)+
				?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Срочность.Дней)," ("+Строка(ВыборкаДетальныеЗаписи.Срочность.Дней)+" часов."+").","")
				+Символы.ПС+"Суточный период - "+ВыборкаДетальныеЗаписи.СуточныйПериод+Символы.ПС
				+?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРемонта),"","Объект ремонта - "+ВыборкаДетальныеЗаписи.ОбъектРемонта)+Символы.ПС;
				Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Файлы Цикл
					Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
						СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИД),Папка1,Папка2)+Стр.ОтносительноеИмяФайла));
					КонецЕсли;
				КонецЦикла; 
				
			КонецЦикла;
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыбПом.РольПользователяПомощник));
			Если МасСтр.Количество() Тогда
				СтруктураНовогоПисьма = Новый Структура;
				СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
				
				
				
				СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
				Кому = Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					Кому.Добавить(Эл.Представление);
				КонецЦикла; 
				
				МассивАдресов=Новый Массив;
				
				
				СтруктураНовогоПисьма.Вставить("Тема", "Выполнены заявки на ремонт в магазинах.");
				СтруктураНовогоПисьма.Вставить("Тело", Сообщение);
				
				
				
				
				СтруктураНовогоПисьма.Вставить("Кому", Кому);
				СтрКому = "";
				Для каждого Эл Из Кому Цикл
					СтрКому = СтрКому + Эл.Значение + "; ";
				КонецЦикла; 
				Попытка
					ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
					Сообщить("Отправлено письмо с информацией на " + СтрКому);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры


Процедура РассылкаОНевыполненныхЗаявкахНаРемонт() Экспорт
	
	
	Папка1= "\\10.0.0.51\1c$\";
	Папка2= СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить())+"\";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРоли = РезультатЗапроса.Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Магазин КАК Магазин,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Описание,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.ИсполнительКонтрагент,
	|	ЗаявкаНаРемонт.ИсполнительФизЛицо,
	|	ЗаявкаНаРемонт.ЧислоРассылокНачальнику,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяПомощник,
	|	ЗаявкаНаРемонт.ПодтвержденоИсполнителем,
	|	ЗаявкаНаРемонт.ОтветПолучен,
	|	ЗаявкаНаРемонт.ВидЗаявки,
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.ОбъектРемонта,
	|	ЗаявкаНаРемонт.Магазин.ТелефонныйНомер1 КАК ТелефонныйНомер1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата1, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата1, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|			ПО (ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = СоответствиеОбъектРольСрезПоследних.Объект)
	|		ПО (ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница = ЗаявкаНаРемонт.Магазин)
	|ГДЕ
	|	ЗаявкаНаРемонт.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЗаявкаНаРемонт.Проведен
	|	И ЗаявкаНаРемонт.ПометкаУдаления = ЛОЖЬ
	|	И ДОБАВИТЬКДАТЕ(ЗаявкаНаРемонт.Дата, ЧАС, ЗаявкаНаРемонт.Срочность.Дней) МЕЖДУ &Дата1 И &Дата2
	|	И НЕ(ЗаявкаНаРемонт.Дата МЕЖДУ &Дата1 И &Дата2)
	|	И ЗаявкаНаРемонт.Срочность.Дней > 0
	|	И ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.РемонтХолодильников)
	|	И ЗаявкаНаРемонт.Выполнено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователяПомощник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.СпециалистПоХолодильномуОборудованию);
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	Запрос.УстановитьПараметр("ДатаНач", (НачалоДня(ТекущаяДата()))-7*24*60*60);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата())+7*24*60*60);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			СписокФайловВложений = Новый СписокЗначений;
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			Сообщение="Не выполнена заявка на ремонт в магазинах - ";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение=Сообщение+Символы.ПС+Строка(ВыборкаДетальныеЗаписи.Магазин)+" ("+Строка(ВыборкаДетальныеЗаписи.ТелефонныйНомер1)+") "+" - "+ВыборкаДетальныеЗаписи.Ссылка+Символы.ПС+
				ВыборкаДетальныеЗаписи.Описание+Символы.ПС+"Срок выполнения - "+Строка(ВыборкаДетальныеЗаписи.Срочность)+
				?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Срочность.Дней)," ("+Строка(ВыборкаДетальныеЗаписи.Срочность.Дней)+" часов."+").","")
				+Символы.ПС+"Суточный период - "+ВыборкаДетальныеЗаписи.СуточныйПериод+Символы.ПС
				+?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРемонта),"","Объект ремонта - "+ВыборкаДетальныеЗаписи.ОбъектРемонта)+Символы.ПС+
				?(ВыборкаДетальныеЗаписи.ВидЗаявки=Перечисления.ВидыЗаявокНаРемонт.РемонтХолодильников,"Ответ от исполнителя "+Строка(ВыборкаДетальныеЗаписи.ИсполнительКонтрагент)
				+" "+?(ВыборкаДетальныеЗаписи.ОтветПолучен,"получен "+?(ВыборкаДетальныеЗаписи.ПодтвержденоИсполнителем,"положительный ","отрицательный"),"не получен")+Символы.ПС,"");
				Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Файлы Цикл
					Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
						СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИД),Папка1,Папка2)+Стр.ОтносительноеИмяФайла));
					КонецЕсли;
				КонецЦикла; 
				
				
			КонецЦикла;
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыбПом.РольПользователяПомощник));
			Если МасСтр.Количество() Тогда
				СтруктураНовогоПисьма = Новый Структура;
				СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
				
				
				
				СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
				Кому = Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					Кому.Добавить(Эл.Представление);
				КонецЦикла; 
				
				МассивАдресов=Новый Массив;
				
				
				СтруктураНовогоПисьма.Вставить("Тема", "Не выполнены заявки на ремонт в магазинах");
				СтруктураНовогоПисьма.Вставить("Тело", Сообщение);
				
				
				
				
				СтруктураНовогоПисьма.Вставить("Кому", Кому);
				СтрКому = "";
				Для каждого Эл Из Кому Цикл
					СтрКому = СтрКому + Эл.Значение + "; ";
				КонецЦикла; 
				Попытка
					ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
					Сообщить("Отправлено письмо с информацией на " + СтрКому);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Магазин КАК Магазин,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Описание,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.ИсполнительКонтрагент,
	|	ЗаявкаНаРемонт.ИсполнительФизЛицо,
	|	ЗаявкаНаРемонт.ЧислоРассылокНачальнику,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяПомощник,
	|	ЗаявкаНаРемонт.ПодтвержденоИсполнителем,
	|	ЗаявкаНаРемонт.ОтветПолучен,
	|	ЗаявкаНаРемонт.ВидЗаявки,
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.ОбъектРемонта,
	|	ЗаявкаНаРемонт.Магазин.ТелефонныйНомер1 КАК ТелефонныйНомер1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата1, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата1, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|			ПО (ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = СоответствиеОбъектРольСрезПоследних.Объект)
	|		ПО (ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница = ЗаявкаНаРемонт.Магазин)
	|ГДЕ
	|	ЗаявкаНаРемонт.Проведен
	|	И (ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.РемонтХолодильников)
	|			ИЛИ ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.ТекущийРемонт)
	|				И ЗаявкаНаРемонт.ПодтвержденоПомощником = ЗНАЧЕНИЕ(Перечисление.ПодтверждениеПомощником.ПодтвержденоПомощником))
	|	И ЗаявкаНаРемонт.ПометкаУдаления = ЛОЖЬ
	|	И ДОБАВИТЬКДАТЕ(ЗаявкаНаРемонт.Дата, ЧАС, ЗаявкаНаРемонт.Срочность.Дней) МЕЖДУ &Дата1 И &Дата2
	|	И НЕ(ЗаявкаНаРемонт.Дата МЕЖДУ &Дата1 И &Дата2)
	|	И ЗаявкаНаРемонт.Срочность.Дней > 0
	|	И ЗаявкаНаРемонт.Выполнено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователяПомощник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.АК_НачальникЭксплуатации);
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			СписокФайловВложений = Новый СписокЗначений;
			Сообщение="Не выполнена заявка на ремонт в магазинах - ";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение=Сообщение+Символы.ПС+Строка(ВыборкаДетальныеЗаписи.Магазин)+" ("+Строка(ВыборкаДетальныеЗаписи.ТелефонныйНомер1)+") "+" - "+ВыборкаДетальныеЗаписи.Ссылка+Символы.ПС+
				ВыборкаДетальныеЗаписи.Описание+Символы.ПС+"Срок выполнения - "+Строка(ВыборкаДетальныеЗаписи.Срочность)+
				?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Срочность.Дней)," ("+Строка(ВыборкаДетальныеЗаписи.Срочность.Дней)+" часов."+").","")
				+Символы.ПС+"Суточный период - "+ВыборкаДетальныеЗаписи.СуточныйПериод+Символы.ПС
				+?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРемонта),"","Объект ремонта - "+ВыборкаДетальныеЗаписи.ОбъектРемонта)+Символы.ПС+
				?(ВыборкаДетальныеЗаписи.ВидЗаявки=Перечисления.ВидыЗаявокНаРемонт.РемонтХолодильников,"Ответ от исполнителя "+Строка(ВыборкаДетальныеЗаписи.ИсполнительКонтрагент)
				+" "+?(ВыборкаДетальныеЗаписи.ОтветПолучен,"получен "+?(ВыборкаДетальныеЗаписи.ПодтвержденоИсполнителем,"положительный ","отрицательный"),"не получен")+Символы.ПС,"");
				
				Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Файлы Цикл
					Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
						СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИД),Папка1,Папка2)+Стр.ОтносительноеИмяФайла));
					КонецЕсли;
				КонецЦикла; 
				
			КонецЦикла;
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыбПом.РольПользователяПомощник));
			Если МасСтр.Количество() Тогда
				СтруктураНовогоПисьма = Новый Структура;
				СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
				
				
				
				СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
				Кому = Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					Кому.Добавить(Эл.Представление);
				КонецЦикла; 
				
				МассивАдресов=Новый Массив;
				
				
				СтруктураНовогоПисьма.Вставить("Тема", "Не выполнены заявки на ремонт в магазинах");
				СтруктураНовогоПисьма.Вставить("Тело", Сообщение);
				
				
				
				
				СтруктураНовогоПисьма.Вставить("Кому", Кому);
				СтрКому = "";
				Для каждого Эл Из Кому Цикл
					СтрКому = СтрКому + Эл.Значение + "; ";
				КонецЦикла; 
				Попытка
					ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
					Сообщить("Отправлено письмо с информацией на " + СтрКому);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Магазин КАК Магазин,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Описание,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.ИсполнительКонтрагент,
	|	ЗаявкаНаРемонт.ИсполнительФизЛицо,
	|	ЗаявкаНаРемонт.ЧислоРассылокНачальнику,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяПомощник,
	|	ЗаявкаНаРемонт.ПодтвержденоИсполнителем,
	|	ЗаявкаНаРемонт.ОтветПолучен,
	|	ЗаявкаНаРемонт.ВидЗаявки,
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.ОбъектРемонта,
	|	ЗаявкаНаРемонт.Магазин.ТелефонныйНомер1 КАК ТелефонныйНомер1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата1, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО (СоответствиеОбъектРольСрезПоследних.Объект = ЗаявкаНаРемонт.Магазин)
	|ГДЕ
	|	ЗаявкаНаРемонт.Проведен
	|	И ЗаявкаНаРемонт.ПометкаУдаления = ЛОЖЬ
	|	И ДОБАВИТЬКДАТЕ(ЗаявкаНаРемонт.Дата, ЧАС, ЗаявкаНаРемонт.Срочность.Дней) МЕЖДУ &Дата1 И &Дата2
	|	И НЕ(ЗаявкаНаРемонт.Дата МЕЖДУ &Дата1 И &Дата2)
	|	И (ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.РемонтХолодильников)
	|			ИЛИ ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.ТекущийРемонт)
	|				И ЗаявкаНаРемонт.ПодтвержденоПомощником = ЗНАЧЕНИЕ(Перечисление.ПодтверждениеПомощником.ПодтвержденоПомощником))
	|	И ЗаявкаНаРемонт.Срочность.Дней > 0
	|	И ЗаявкаНаРемонт.Выполнено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователяПомощник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			Сообщение="Не выполнена заявка на ремонт в магазинах - ";
			СписокФайловВложений = Новый СписокЗначений;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение=Сообщение+Символы.ПС+Строка(ВыборкаДетальныеЗаписи.Магазин)+" ("+Строка(ВыборкаДетальныеЗаписи.ТелефонныйНомер1)+") "+" - "+ВыборкаДетальныеЗаписи.Ссылка+Символы.ПС+
				ВыборкаДетальныеЗаписи.Описание+Символы.ПС+"Срок выполнения - "+Строка(ВыборкаДетальныеЗаписи.Срочность)+
				?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Срочность.Дней)," ("+Строка(ВыборкаДетальныеЗаписи.Срочность.Дней)+" часов."+").","")
				+Символы.ПС+"Суточный период - "+ВыборкаДетальныеЗаписи.СуточныйПериод+Символы.ПС
				+?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРемонта),"","Объект ремонта - "+ВыборкаДетальныеЗаписи.ОбъектРемонта)+Символы.ПС+
				?(ВыборкаДетальныеЗаписи.ВидЗаявки=Перечисления.ВидыЗаявокНаРемонт.РемонтХолодильников,"Ответ от исполнителя "+Строка(ВыборкаДетальныеЗаписи.ИсполнительКонтрагент)
				+" "+?(ВыборкаДетальныеЗаписи.ОтветПолучен,"получен "+?(ВыборкаДетальныеЗаписи.ПодтвержденоИсполнителем,"положительный ","отрицательный"),"не получен")+Символы.ПС,"");
				
				Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Файлы Цикл
					Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
						СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИД),Папка1,Папка2)+Стр.ОтносительноеИмяФайла));
					КонецЕсли;
				КонецЦикла; 
				
				
			КонецЦикла;
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыбПом.РольПользователяПомощник));
			Если МасСтр.Количество() Тогда
				СтруктураНовогоПисьма = Новый Структура;
				СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
				
				
				
				СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
				Кому = Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					Кому.Добавить(Эл.Представление);
				КонецЦикла; 
				
				МассивАдресов=Новый Массив;
				
				
				СтруктураНовогоПисьма.Вставить("Тема", "Не выполнены заявки на ремонт в магазинах");
				СтруктураНовогоПисьма.Вставить("Тело", Сообщение);
				
				
				
				
				СтруктураНовогоПисьма.Вставить("Кому", Кому);
				СтрКому = "";
				Для каждого Эл Из Кому Цикл
					СтрКому = СтрКому + Эл.Значение + "; ";
				КонецЦикла; 
				Попытка
					ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
					Сообщить("Отправлено письмо с информацией на " + СтрКому);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры


Процедура РассылкаОСозданииТекущихЗаявокНаРемонт() Экспорт
	Если Час(ТекущаяДата())<10 Тогда
		Возврат;
	КонецЕсли; 	
	Папка1= "\\10.0.0.51\1c$\";
	Папка2= СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить())+"\";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРоли = РезультатЗапроса.Выгрузить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Магазин КАК Магазин,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Описание,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.ИсполнительКонтрагент,
	|	ЗаявкаНаРемонт.ИсполнительФизЛицо,
	|	ЗаявкаНаРемонт.ЧислоРассылокНачальнику,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяПомощник,
	|	ЗаявкаНаРемонт.ВидЗаявки,
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.ОбъектРемонта,
	|	ЗаявкаНаРемонт.Магазин.ТелефонныйНомер1 КАК ТелефонныйНомер1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата1, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата1, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|			ПО (ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = СоответствиеОбъектРольСрезПоследних.Объект)
	|		ПО (ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница = ЗаявкаНаРемонт.Магазин)
	|ГДЕ
	|	ЗаявкаНаРемонт.Дата МЕЖДУ &Дата1 И &Дата2
	|	И (ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.РемонтХолодильников)
	|			ИЛИ ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.ТекущийРемонт)
	|				И ЗаявкаНаРемонт.ПодтвержденоПомощником = ЗНАЧЕНИЕ(Перечисление.ПодтверждениеПомощником.ПодтвержденоПомощником))
	|	И ЗаявкаНаРемонт.Проведен
	|	И ЗаявкаНаРемонт.ПометкаУдаления = ЛОЖЬ
	|	И ЗаявкаНаРемонт.Срочность <> &Срочность
	|	И ЗаявкаНаРемонт.ЧислоРассылокНачальнику < 3
	|	И ЗаявкаНаРемонт.Выполнено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователяПомощник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.АК_НачальникЭксплуатации);
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	
	РезультатЗапроса = Запрос.Выполнить();
	МасЗаявок=Новый ТаблицаЗначений;
	МасЗаявок.Колонки.Добавить("Ссылка");
	МасЗаявок.Колонки.Добавить("ЧислоРассылокНачальнику");
	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			Сообщение="Необходимо провести ремонт в следующих магазинах:";
			СписокФайловВложений = Новый СписокЗначений;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение=Сообщение+Символы.ПС+Строка(ВыборкаДетальныеЗаписи.Магазин)+" ("+Строка(ВыборкаДетальныеЗаписи.ТелефонныйНомер1)+") "+" - Создана заявка на ремонт "+ВыборкаДетальныеЗаписи.Ссылка+Символы.ПС+
				ВыборкаДетальныеЗаписи.Описание+Символы.ПС+"Срок выполнения - "+Строка(ВыборкаДетальныеЗаписи.Срочность)+
				?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Срочность.Дней)," ("+Строка(ВыборкаДетальныеЗаписи.Срочность.Дней)+" часов."+").","")
				+Символы.ПС+"Суточный период - "+ВыборкаДетальныеЗаписи.СуточныйПериод+Символы.ПС
				+?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРемонта),"","Объект ремонта - "+ВыборкаДетальныеЗаписи.ОбъектРемонта)+Символы.ПС+
				?(ВыборкаДетальныеЗаписи.ВидЗаявки=Перечисления.ВидыЗаявокНаРемонт.ТекущийРемонт И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсполнительФизЛицо),"Начальнику эксплуатации необходимо выбрать исполнителя","")+Символы.ПС;
				Если МасЗаявок.Найти(ВыборкаДетальныеЗаписи.Ссылка)=Неопределено Тогда
					НовСтр=МасЗаявок.Добавить();
					НовСтр.Ссылка=ВыборкаДетальныеЗаписи.Ссылка;
					НовСтр.ЧислоРассылокНачальнику=ВыборкаДетальныеЗаписи.ЧислоРассылокНачальнику;
				КонецЕсли;
				Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Файлы Цикл
					Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
						СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИД),Папка1,Папка2)+Стр.ОтносительноеИмяФайла));
					КонецЕсли;
				КонецЦикла; 
				
			КонецЦикла;
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыбПом.РольПользователяПомощник));
			Если МасСтр.Количество() Тогда
				СтруктураНовогоПисьма = Новый Структура;
				СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
				
				
				
				СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
				Кому = Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					Кому.Добавить(Эл.Представление);
				КонецЦикла; 
				
				МассивАдресов=Новый Массив;
				
				
				СтруктураНовогоПисьма.Вставить("Тема", "Необходимо провести ремонт. Созданы заявки на ремонт.");
				СтруктураНовогоПисьма.Вставить("Тело", Сообщение);
				
				
				
				
				СтруктураНовогоПисьма.Вставить("Кому", Кому);
				СтрКому = "";
				Для каждого Эл Из Кому Цикл
					СтрКому = СтрКому + Эл.Значение + "; ";
				КонецЦикла; 
				Попытка
					ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
					Сообщить("Отправлено письмо с информацией на " + СтрКому);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Для каждого Стр Из МасЗаявок Цикл
		Об=Стр.Ссылка.ПолучитьОбъект();
		Об.ЧислоРассылокНачальнику=Стр.ЧислоРассылокНачальнику+1;
		Об.Записать();
	КонецЦикла; 	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Магазин КАК Магазин,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Описание,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.ИсполнительКонтрагент,
	|	ЗаявкаНаРемонт.ИсполнительФизЛицо,
	|	ЗаявкаНаРемонт.ЧислоРассылокНачальнику,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяПомощник,
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.ОбъектРемонта,
	|	ЗаявкаНаРемонт.Магазин.ТелефонныйНомер1 КАК ТелефонныйНомер1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата1, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата1, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|			ПО (ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = СоответствиеОбъектРольСрезПоследних.Объект)
	|		ПО (ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница = ЗаявкаНаРемонт.Магазин)
	|ГДЕ
	|	ЗаявкаНаРемонт.Ссылка В(&Ссылка)
	|	И ЗаявкаНаРемонт.ВидЗаявки = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаРемонт.РемонтХолодильников)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователяПомощник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.СпециалистПоХолодильномуОборудованию);
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	Запрос.УстановитьПараметр("Ссылка", МасЗаявок.ВыгрузитьКолонку("Ссылка"));
	
	РезультатЗапроса = Запрос.Выполнить();
	МасЗаявок=Новый ТаблицаЗначений;
	МасЗаявок.Колонки.Добавить("Ссылка");
	МасЗаявок.Колонки.Добавить("ЧислоРассылокНачальнику");
	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			СписокФайловВложений = Новый СписокЗначений;
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			Сообщение="Необходимо провести ремонт в следующих магазинах:";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение=Сообщение+Символы.ПС+Строка(ВыборкаДетальныеЗаписи.Магазин)+" ("+Строка(ВыборкаДетальныеЗаписи.ТелефонныйНомер1)+") "+" - Создана заявка на ремонт "+ВыборкаДетальныеЗаписи.Ссылка+Символы.ПС+
				ВыборкаДетальныеЗаписи.Описание+Символы.ПС+"Срок выполнения - "+Строка(ВыборкаДетальныеЗаписи.Срочность)+
				?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Срочность.Дней)," ("+Строка(ВыборкаДетальныеЗаписи.Срочность.Дней)+" часов."+").","")
				+Символы.ПС+"Суточный период - "+ВыборкаДетальныеЗаписи.СуточныйПериод+Символы.ПС
				+?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРемонта),"","Объект ремонта - "+ВыборкаДетальныеЗаписи.ОбъектРемонта)+Символы.ПС;
				Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Файлы Цикл
					Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
						СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИД),Папка1,Папка2)+Стр.ОтносительноеИмяФайла));
					КонецЕсли;
				КонецЦикла; 
				
			КонецЦикла;
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыбПом.РольПользователяПомощник));
			Если МасСтр.Количество() Тогда
				СтруктураНовогоПисьма = Новый Структура;
				СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
				
				
				
				СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
				Кому = Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					Кому.Добавить(Эл.Представление);
				КонецЦикла; 
				
				МассивАдресов=Новый Массив;
				
				
				СтруктураНовогоПисьма.Вставить("Тема", "Необходимо провести ремонт. Созданы заявки на ремонт.");
				СтруктураНовогоПисьма.Вставить("Тело", Сообщение);
				
				
				
				
				СтруктураНовогоПисьма.Вставить("Кому", Кому);
				СтрКому = "";
				Для каждого Эл Из Кому Цикл
					СтрКому = СтрКому + Эл.Значение + "; ";
				КонецЦикла; 
				Попытка
					ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
					Сообщить("Отправлено письмо с информацией на " + СтрКому);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	
	
	
	Если Час(ТекущаяДата())<18 Тогда
		Возврат;
	КонецЕсли; 	
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Магазин КАК Магазин,
	|	ЗаявкаНаРемонт.СуточныйПериод,
	|	ЗаявкаНаРемонт.Описание,
	|	ЗаявкаНаРемонт.Срочность,
	|	ЗаявкаНаРемонт.ИсполнительКонтрагент,
	|	ЗаявкаНаРемонт.ИсполнительФизЛицо,
	|	ЗаявкаНаРемонт.ЧислоРассылокНачальнику,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяПомощник,
	|	ЗаявкаНаРемонт.ИД,
	|	ЗаявкаНаРемонт.ОбъектРемонта,
	|	ЗаявкаНаРемонт.Магазин.ТелефонныйНомер1 КАК ТелефонныйНомер1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО (СоответствиеОбъектРольСрезПоследних.Объект = ЗаявкаНаРемонт.Магазин)
	|ГДЕ
	|	ЗаявкаНаРемонт.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ЗаявкаНаРемонт.Проведен
	|	И ЗаявкаНаРемонт.ПометкаУдаления = ЛОЖЬ
	|	И ЗаявкаНаРемонт.Срочность <> &Срочность
	|	И ЗаявкаНаРемонт.РассылкаПомощникам = ЛОЖЬ
	|	И ЗаявкаНаРемонт.Выполнено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователяПомощник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			Сообщение="Необходимо провести ремонт в следующих магазинах:";
			СписокФайловВложений = Новый СписокЗначений;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение=Сообщение+Символы.ПС+Строка(ВыборкаДетальныеЗаписи.Магазин)+" ("+Строка(ВыборкаДетальныеЗаписи.ТелефонныйНомер1)+") "+" - Создана заявка на ремонт "+ВыборкаДетальныеЗаписи.Ссылка+Символы.ПС+
				ВыборкаДетальныеЗаписи.Описание+Символы.ПС+"Срок выполнения - "+Строка(ВыборкаДетальныеЗаписи.Срочность)+
				?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Срочность.Дней)," ("+Строка(ВыборкаДетальныеЗаписи.Срочность.Дней)+" часов."+").","")
				+Символы.ПС+"Суточный период - "+ВыборкаДетальныеЗаписи.СуточныйПериод+Символы.ПС
				+?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРемонта),"","Объект ремонта - "+ВыборкаДетальныеЗаписи.ОбъектРемонта)+Символы.ПС;
				Об=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Об.РассылкаПомощникам=Истина;
				Об.Записать();
				Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Файлы Цикл
					Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
						СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИД),Папка1,Папка2)+Стр.ОтносительноеИмяФайла));
					КонецЕсли;
				КонецЦикла; 
				
			КонецЦикла;
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыбПом.РольПользователяПомощник));
			Если МасСтр.Количество() Тогда
				СтруктураНовогоПисьма = Новый Структура;
				СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
				
				СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
				Кому = Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					Кому.Добавить(Эл.Представление);
				КонецЦикла; 
				
				МассивАдресов=Новый Массив;
				
				
				СтруктураНовогоПисьма.Вставить("Тема", "Необходимо провести ремонт. Созданы заявки на ремонт.");
				СтруктураНовогоПисьма.Вставить("Тело", Сообщение);
				
				
				
				
				СтруктураНовогоПисьма.Вставить("Кому", Кому);
				СтрКому = "";
				Для каждого Эл Из Кому Цикл
					СтрКому = СтрКому + Эл.Значение + "; ";
				КонецЦикла; 
				Попытка
					ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
					Сообщить("Отправлено письмо с информацией на " + СтрКому);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Процедура СделатьРассылкуОтчетОПоставщике() Экспорт
	Если День(ТекущаяДата())=1 Тогда
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		ADOСоединение.ConnectionTimeOut = 0;
		ADOСоединение.CommandTimeOut    = 0;
		СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
		//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
		ADOСоединение.ConnectionString  = СтрПодкл;
		ADOСоединение.Open();
		Если ADOСоединение.State() = 0 Тогда
			Возврат;
		Иначе         
		КонецЕсли;
		//
		
		
		Дата1=НачалоМесяца(НачалоДня(ТекущаяДата())-1);
		Дата2=НачалоДня(ТекущаяДата())-1;
		
		
		
		СтрЗапрос =	"If OBJECT_ID('tempdb..#VTProizvoditeli') Is Not Null	Drop Table #VTProizvoditeli
		|If OBJECT_ID('tempdb..#Obrascheniya_Base') Is Not Null	Drop Table #Obrascheniya_Base
		|If OBJECT_ID('tempdb..#VT_PricePost_Predv') Is Not Null	Drop Table #VT_PricePost_Predv
		|If OBJECT_ID('tempdb..#VT_PricePost') Is Not Null		Drop Table #VT_PricePost
		|If OBJECT_ID('tempdb..#VT_Obrascheniya') Is Not Null	Drop Table #VT_Obrascheniya
		|If OBJECT_ID('tempdb..#dtt') Is Not Null				Drop Table #dtt
		|If OBJECT_ID('tempdb..#dtt_sokr') Is Not Null			Drop Table #dtt_sokr
		|If OBJECT_ID('tempdb..#tov_obr') Is Not Null			Drop Table #tov_obr
		|If OBJECT_ID('tempdb..#VT_obr_bezTT') Is Not Null		Drop Table #VT_obr_bezTT
		|If OBJECT_ID('tempdb..#TovAss_sokr') Is Not Null		Drop Table #TovAss_sokr
		|If OBJECT_ID('tempdb..#dtt_week') Is Not Null			Drop Table #dtt_week
		|declare @date1 as datetime , @date2 as datetime
		|set @date1="+ВнешниеДанные.ФорматПоля(Дата1)+"
		|set @date2 = "+ВнешниеДанные.ФорматПоля(Дата2)+"
		|create table #ls (Period date,  id_tov int, id_tt int, Summa numeric(15, 3), vozvrat_pok numeric(15, 3)
		|) 
		|
		|Insert into #ls
		|exec ('
		|declare @date1 as datetime , @date2 as datetime
		|set @date1='"+ВнешниеДанные.ФорматПоля(Дата1)+"'
		|set @date2 = '"+ВнешниеДанные.ФорматПоля(Дата2)+"'
		|
		|
		|SELECT Cast([date_tt] as date)  Period
		|	,DTT.id_tov,DTT.id_tt
		|	,SUM([Summa]) Summa
		|	,SUM([vozvrat_pok]*[price]) vozvrat_pok
		|FROM [vv03].[dbo].[DTT] DTT (nolock) 
		|
		|where date_tt between @date1 and @date2 
		|
		|GROUP BY Cast([date_tt] as date)
		|	,DTT.id_tov,DTT.id_tt') at [SRV-SQL03]
		|-----------------------------------------------
		|Select
		|	TovAss._Fld3958RRef as TT,
		|	TovAss._Fld3959RRef as Tovar,
		|	TovAss._Fld3960RRef as har,
		|	TovAss._Fld3961 as vivedena,
		|	TovAss.id_tt_1C as id_tt,
		|	TovAss.id_tov_1C as id_tov,
		|	Convert(Date, DateAdd(Year, -2000, TovAss._Period)) as _Period
		|Into #TovAss_sokr
		|From IzbenkaFin.._InfoRg3957 as TovAss (nolock)
		|Where 
		|   Year(TovAss._Period) > 4000  and TovAss.id_tov_1C in (Select ls.id_tov from #ls ls )  and Convert(Datetime, DateAdd(Year, -2000, TovAss._Period))<= @date2
		|-----------------------------------------------
		|create table #NomHarMax ( id_tt int,  id_tov int, Periodls date, Period date
		|) 
		|
		|Insert into #NomHarMax
		|Select
		|	TovAss_sokr.id_tt as id_tt,
		|	TovAss_sokr.id_tov as id_tov,ls.Period periodls,
		|	Max(TovAss_sokr._Period) as Period
		|	From #TovAss_sokr TovAss_sokr
		|	Inner join #ls ls on TovAss_sokr.id_tov=ls.id_tov and TovAss_sokr.id_tt=ls.id_tt and TovAss_sokr._Period<=ls.Period
		|GROUP BY TovAss_sokr.id_tt,
		|	TovAss_sokr.id_tov,ls.Period  	
		|-----------------------------------------------
		|create table #TovAssHar ( id_tt int,  id_tov int,
		|	Har binary(16), Tovar binary(16),
		|	Period date,Periodls date, Summa numeric(15, 3), vozvrat_pok numeric(15, 3)
		|) 
		|
		|Insert into #TovAssHar
		|Select
		|	TovAss_sokr.id_tt as id_tt,
		|	TovAss_sokr.id_tov as id_tov
		|	,TovAss_sokr.har as har, TovAss_sokr.Tovar as Tovar,
		|	NomHarMax.Period Period,ls.Period Periodls, ls.Summa Summa, ls.vozvrat_pok vozvrat_pok
		|	From #ls ls
		|	Inner join #NomHarMax NomHarMax	
		|	Inner join  #TovAss_sokr TovAss_sokr  on TovAss_sokr.id_tov=NomHarMax.id_tov and TovAss_sokr.id_tt=NomHarMax.id_tt and TovAss_sokr._Period=NomHarMax.Period
		|     on ls.id_tov=NomHarMax.id_tov and ls.id_tt=NomHarMax.id_tt and ls.Period=NomHarMax.periodls
		
		
		
		
		|-----------------------------------------------
		|Select
		//|	PricePost._Period as Period,
		|	Convert(Date, DateAdd(Year, -2000, PricePost._Period)) as Period,
		|	PricePost._Fld3218RRef as Tovar,
		|	PricePost._Fld3221RRef as har,
		|	PricePost._Fld5209RRef as Postavschik
		|Into #VT_PricePost_Predv
		|From IzbenkaFin.._InfoRg3217 as PricePost (nolock)
		|-----------------------------------------------
		|create table #TovAssHarSPostMax ( id_tt int,  id_tov int, Har binary(16), Tovar binary(16),  Periodls date ,  PeriodPost date
		|) 
		|
		|Insert into #TovAssHarSPostMax
		|Select
		|	TovAss_sokr.id_tt as id_tt,
		|	TovAss_sokr.id_tov as id_tov,
		|	TovAss_sokr.har as har, TovAss_sokr.Tovar as Tovar, TovAss_sokr.Periodls Periodls, Max(VT_PricePost_Predv.Period) PeriodPost
		|	From #TovAssHar TovAss_sokr
		|	Inner join #VT_PricePost_Predv VT_PricePost_Predv on  TovAss_sokr.Periodls>=VT_PricePost_Predv.Period
		|	and TovAss_sokr.Tovar=VT_PricePost_Predv.Tovar and TovAss_sokr.har=VT_PricePost_Predv.har 
		|group by
		|	TovAss_sokr.id_tt,
		|	TovAss_sokr.id_tov,
		|	TovAss_sokr.har, TovAss_sokr.Tovar, TovAss_sokr.Periodls
		|-----------------------------------------------
		|create table #TovAssHarSPostMaxItog (id_tt int,  id_tov int, Har binary(16), Tovar binary(16), Postavschik binary(16), Periodls date
		|) 
		
		|Insert into #TovAssHarSPostMaxItog
		|Select
		|	TovAss_sokr.id_tt as id_tt,
		|	TovAss_sokr.id_tov as id_tov,
		|	TovAss_sokr.har as har, TovAss_sokr.Tovar as Tovar, (VT_PricePost_Predv.Postavschik) Postavschik, TovAss_sokr.Periodls Periodls
		|	
		|	From   #TovAssHarSPostMax TovAss_sokr
		|		Inner join #VT_PricePost_Predv VT_PricePost_Predv
		//| 			Inner join IzbenkaFin.._Reference27 as Kontr (nolock) on Kontr._idrref=VT_PricePost_Predv.Postavschik
		
		|	 on  TovAss_sokr.PeriodPost=VT_PricePost_Predv.Period 	and TovAss_sokr.Tovar=VT_PricePost_Predv.Tovar and TovAss_sokr.har=VT_PricePost_Predv.har
		|	
		|-----------определим количество недопоставок--------------
		|if OBJECT_ID('tempdb..#NePost') is not null drop table #NePost    
		|create table #NePost (id_tov int, id_kontr int, Kol_Zakaz decimal(15,2), kol_postup decimal(15,2), [%НеВыполнЗаказ]  decimal(15,2))
		| 
		|insert into #NePost(id_tov, id_kontr, Kol_Zakaz, kol_postup,[%НеВыполнЗаказ])
		|exec reports..Get_Post_Zakaz_date @date1,@date2
		| 
		|delete from #NePost where [%НеВыполнЗаказ]<=0    
		|-----------------------------------------------
		|create table #NePostItog (  id_kontr int, ProcentNedopost  decimal(15,2))
		| 
		|insert into #NePostItog( id_kontr, ProcentNedopost)
		
		|Select NePost.id_kontr,100*Case when Sum(pr.price*NePost.Kol_Zakaz)=0 Then 0 else Sum(pr.price*NePost.Kol_Zakaz-pr.price*NePost.kol_postup)/Sum(pr.price*NePost.Kol_Zakaz) end ProcentNedopost
		|From #NePost NePost
		| inner join Reports..Price_1C_tov as pr on NePost.id_tov=pr.id_tov
		|Group by NePost.id_kontr
		|-----------------------------------------------
		|create table #ItogVyr ( id_kontr int,  Summa numeric(15, 3),  vozvrat_pok numeric(15, 3) 
		|) 
		|
		|Insert into #ItogVyr
		|Select
		//|	TovAss_sokr.id_tt as id_tt,
		//|	TovAss_sokr.id_tov as id_tov,
		//|	TovAss_sokr.har as har, TovAss_sokr.Tovar as Tovar, (VT_PricePost_Predv.Postavschik) Postavschik, TovAss_sokr.Periodls Period,
		//|   (VT_PricePost_Predv.Postavschik) Postavschik,Kontr._description as NaimPost, 
		|	Kontr._fld1159 id_kontr,Sum(TovAssHar.Summa) Summa,Sum(TovAssHar.vozvrat_pok) vozvrat_pok  
		|	From  #TovAssHar TovAssHar
		|	Inner join #TovAssHarSPostMaxItog TovAss_sokr
		| 			Inner join IzbenkaFin.._Reference27 as Kontr (nolock) on Kontr._idrref=TovAss_sokr.Postavschik
		|	on  TovAss_sokr.Periodls=TovAssHar.Periodls  and TovAss_sokr.Tovar=TovAssHar.Tovar and TovAss_sokr.har=TovAssHar.har and TovAss_sokr.id_tt=TovAssHar.id_tt 
		|   group by
		|Kontr._fld1159
		|-----------------------------------------------
		|   if OBJECT_ID ('tempdb..#Complaint') is not null drop table #Complaint
		|
		|   select  c.id_kontr,count(*) Zhalob
		|   into #Complaint
		|   from Reports..Customer_Complaint as c 
		|   where id_TipGalobi in(190,236,198,197,196,195,194,193,192,191,200,201,189,202,188,206,203,153,204,205,237,133) and  date_  between @date1    and @date2
		|   group by c.id_kontr
		|-----------------------------------------------
		|Select 
		|	round(100*Case When ItogVyr.Summa=0 Then 0 else ItogVyr.vozvrat_pok/ItogVyr.Summa end,2) ProcentVozvr, ItogVyr.id_kontr,ItogVyr.Summa,round(100*Case When ItogVyr.Summa=0 Then 0 else  isnull(Complaint.Zhalob,0)*100000/ItogVyr.Summa end,2) Zhalob, isnull(NePostItog.ProcentNedopost,0) ProcentNedopost
		|	From #ItogVyr ItogVyr 
		|	Left join #Complaint Complaint on ItogVyr.id_kontr=Complaint.id_kontr
		|	Left join #NePostItog NePostItog on ItogVyr.id_kontr=NePostItog.id_kontr
		|";
		
		
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		//ТЗ=Новый ТаблицаЗначений;
		//ТЗ.Колонки.Добавить("Место");
		//ТЗ.Колонки.Добавить("Сенсор");
		//ТЗ.Колонки.Добавить("Shop_name");
		//ТЗ.Колонки.Добавить("mest_name");
		//ТЗ.Колонки.Добавить("Ответ");
		//ТЗ.Колонки.Добавить("Дата");
		//ТЗ.Колонки.Добавить("is_made");
		//ТЗ.Колонки.Добавить("ShopNo");
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИД
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТЗКонтрагенты = РезультатЗапроса.Выгрузить();
		
		
		
		
		ТабДанные = Новый ТаблицаЗначений();
		
		ТабДанные.Колонки.Добавить("Контрагент"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		////ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		//ТабДанные.Колонки.Добавить("Неделя"		, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("ДатаНачала"		, Новый ОписаниеТипов("Дата"));
		//ТабДанные.Колонки.Добавить("ДатаОкончания"		, Новый ОписаниеТипов("Дата"));
		//
		
		ТабДанные.Колонки.Добавить("Выручка"			, Новый ОписаниеТипов("Число"));
		ТабДанные.Колонки.Добавить("ПроцентВозвратов"			, Новый ОписаниеТипов("Число"));
		ТабДанные.Колонки.Добавить("ПроцентНедопоставок"			, Новый ОписаниеТипов("Число"));
		ТабДанные.Колонки.Добавить("Жалоб"			, Новый ОписаниеТипов("Число"));
		ТабДанные.Колонки.Добавить("МаркерАудита"			, Новый ОписаниеТипов("Строка"));
		ТабДанные.Колонки.Добавить("МаркерыЛабораторныхПроверок"			, Новый ОписаниеТипов("Строка"));
		
		//
		//ТабДанные.Колонки.Добавить("ПроцентПродажСоСкидкойКВыручке"			, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("ПроцентСписанийПоСрокуКВыручке"			, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("ПроцентСписанийПоКачествуКВыручке"	, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("ПовторныеПокупки"				, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("ПокупкиОбщие"				, Новый ОписаниеТипов("Число"));
		//
		//ТабДанные.Колонки.Добавить("Частота"				, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("ПродажиСоСкидкой"				, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("СписанияПоСроку"				, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("СписанияПоКачеству"				, Новый ОписаниеТипов("Число"));
		//ТабДанные.Колонки.Добавить("id_tov"				, Новый ОписаниеТипов("Число"));
		
		//Попытка
		rs.MoveFirst();
		//
		Сч=0;
		Пока НЕ rs.EOF() Цикл
			Сч=Сч+1;
			Если Сч=100 Тогда
				//прервать;
				
				
			КонецЕсли; 
			МасСтр=ТЗКонтрагенты.НайтиСтроки(Новый Структура("ИД",Rs.Fields("id_kontr").Value));
			Если Не МасСтр.Количество() Тогда
				rs.MoveNext();
				Продолжить;	
			КонецЕсли; 
			Если Rs.Fields("Summa").Value<=0 Тогда
				rs.MoveNext();
				Продолжить;	
			КонецЕсли; 
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.Контрагент=	МасСтр[0].Ссылка;
			
			//
			СтрокаДоб.Выручка = Rs.Fields("Summa").Value;
			СтрокаДоб.ПроцентВозвратов = Rs.Fields("ProcentVozvr").Value;
			СтрокаДоб.ПроцентНедопоставок = Rs.Fields("ProcentNedopost").Value;
			СтрокаДоб.Жалоб = Rs.Fields("Zhalob").Value;   
			
			rs.MoveNext();
		КонецЦикла;
		//Исключение
		//КонецПопытки;
		
		
		Запрос = Новый Запрос;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура,
		|	ЦеныПоставщиковСрезПоследних.Характеристика,
		|	ЦеныПоставщиковСрезПоследних.Поставщик,
		|	НачалоПериода(&Дата2,День) КАК Период
		|ПОМЕСТИТЬ втПоставщики
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&Дата2, ) КАК ЦеныПоставщиковСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура,
		|	ЦеныПоставщиковСрезПоследних.Характеристика,
		|	ЦеныПоставщиковСрезПоследних.Поставщик,
		|	&Дата1
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&Дата1, ) КАК ЦеныПоставщиковСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЦеныПоставщиков.Номенклатура,
		|	ЦеныПоставщиков.Характеристика,
		|	ЦеныПоставщиков.Поставщик,
		|	ЦеныПоставщиков.Период
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
		|ГДЕ
		|	ЦеныПоставщиков.Период > &Дата1
		|	И ЦеныПоставщиков.Период < &Дата2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.ХарактеристикаНоменклатуры,
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Дата,
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка,ПроверкаКачестваТоваровСоставПоказателей.НомерСтроки,
		|	ПроверкаКачестваТоваровСоставПоказателей.Маркер
		|ПОМЕСТИТЬ втПроверки
		|ИЗ
		|	Документ.ПроверкаКачестваТоваров.СоставПоказателей КАК ПроверкаКачестваТоваровСоставПоказателей
		|ГДЕ
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Проведен
		|	И ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЖурналаПроверкиКачестваТоваров.ПроверкаВыполнена)
		|	И ПроверкаКачестваТоваровСоставПоказателей.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПроверкаКачестваТоваровСоставПоказателей.Маркер <> ЗНАЧЕНИЕ(Перечисление.МаркерыДляАудита.Пустаяссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроверки.ХарактеристикаНоменклатуры,
		|	втПроверки.Дата,
		|	втПроверки.Ссылка
		|ПОМЕСТИТЬ втПроверкиБезМаркеров
		|ИЗ
		|	втПроверки КАК втПроверки
		|
		|СГРУППИРОВАТЬ ПО
		|	втПроверки.ХарактеристикаНоменклатуры,
		|	втПроверки.Дата,
		|	втПроверки.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоставщики.Характеристика,
		|	втПоставщики.Период,
		|	втПоставщики.Поставщик,
		|	МАКСИМУМ(втПроверки.Дата) КАК ПериодДок
		|ПОМЕСТИТЬ втПроверкиМаксПериод
		|ИЗ
		|	втПроверкиБезМаркеров КАК втПроверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоставщики КАК втПоставщики
		|		ПО втПроверки.ХарактеристикаНоменклатуры = втПоставщики.Характеристика
		|			И втПроверки.Дата <= втПоставщики.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	втПоставщики.Характеристика,
		|	втПоставщики.Период,
		|	втПоставщики.Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроверкиМаксПериод.Характеристика,
		|	втПроверки.Ссылка,
		|	втПроверкиМаксПериод.Поставщик
		|ПОМЕСТИТЬ втПроверкиИтог
		|ИЗ
		|	втПроверкиМаксПериод КАК втПроверкиМаксПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроверкиБезМаркеров КАК втПроверки
		|		ПО (втПроверки.ХарактеристикаНоменклатуры = втПроверкиМаксПериод.Характеристика)
		|			И (втПроверки.Дата = втПроверкиМаксПериод.ПериодДок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеАудитору.Ссылка.Маркер,
		|	ЗаданиеАудитору.ХарактеристикаНоменклатуры,
		|	ЗаданиеАудитору.Ссылка,
		|	ЗаданиеАудитору.Ссылка.Дата
		|ПОМЕСТИТЬ втХарактеристики
		|ИЗ
		|	Документ.ЗаданиеАудитору.Товары КАК ЗаданиеАудитору
		|ГДЕ
		|	ЗаданиеАудитору.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЗаданиеАудитору.Ссылка.Статус В(&Статус)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоставщики.Характеристика,
		|	втПоставщики.Период,
		|	втПоставщики.Поставщик,
		|	МАКСИМУМ(втХарактеристики.Дата) КАК ПериодДок
		|ПОМЕСТИТЬ втПоставщикиМаксПериод
		|ИЗ
		|	втХарактеристики КАК втХарактеристики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоставщики КАК втПоставщики
		|		ПО втХарактеристики.ХарактеристикаНоменклатуры = втПоставщики.Характеристика
		|			И втХарактеристики.Дата <= втПоставщики.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	втПоставщики.Характеристика,
		|	втПоставщики.Период,
		|	втПоставщики.Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоставщикиМаксПериод.Характеристика,
		|	втХарактеристики.Ссылка,
		|	втПоставщикиМаксПериод.Поставщик
		|ПОМЕСТИТЬ втПоставщикиИтог
		|ИЗ
		|	втПоставщикиМаксПериод КАК втПоставщикиМаксПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втХарактеристики КАК втХарактеристики
		|		ПО (втХарактеристики.ХарактеристикаНоменклатуры = втПоставщикиМаксПериод.Характеристика)
		|			И (втХарактеристики.Дата = втПоставщикиМаксПериод.ПериодДок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоставщикиИтог.Поставщик КАК Поставщик,
		|	втХарактеристики.Маркер,
		|	втХарактеристики.Дата КАК Дата
		|ИЗ
		|	втХарактеристики КАК втХарактеристики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоставщикиИтог КАК втПоставщикиИтог
		|		ПО втХарактеристики.ХарактеристикаНоменклатуры = втПоставщикиИтог.Характеристика
		|			И втХарактеристики.Ссылка = втПоставщикиИтог.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	втПоставщикиИтог.Поставщик,
		|	втХарактеристики.Маркер,
		|	втХарактеристики.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|ИТОГИ ПО
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроверки.Маркер,
		|	втПроверкиИтог.Поставщик КАК Поставщик,втПроверки.НомерСтроки,
		|	втПроверки.Дата КАК Дата
		|ИЗ
		|	втПроверки КАК втПроверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроверкиИтог КАК втПроверкиИтог
		|		ПО втПроверки.Ссылка = втПроверкиИтог.Ссылка
		|			И втПроверки.ХарактеристикаНоменклатуры = втПроверкиИтог.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	втПроверки.Маркер,
		|	втПроверкиИтог.Поставщик,втПроверки.НомерСтроки,
		|	втПроверки.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|ИТОГИ ПО
		|	Поставщик";
		
		
		
		МасСтатус=Новый Массив;
		МасСтатус.Добавить(Перечисления.СтатусыЗаданийАудиторам.ПервичныйАудитПроведен);
		МасСтатус.Добавить(Перечисления.СтатусыЗаданийАудиторам.ПовторныйАудитПроведен);
		Запрос.УстановитьПараметр("Статус", МасСтатус);
		Запрос.УстановитьПараметр("Дата1", Дата1);
		Запрос.УстановитьПараметр("Дата2", Дата2);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыбПоставщики = РезультатЗапроса[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыбПроверки = РезультатЗапроса[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		
		Для каждого Стр Из ТабДанные Цикл
			Пока ВыбПоставщики.Следующий() Цикл
				Если ВыбПоставщики.Поставщик=Стр.Контрагент Тогда
					Выб=ВыбПоставщики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если Выб.Следующий() Тогда
						Стр.МаркерАудита=Строка(Выб.Маркер);
					КонецЕсли; 
					Прервать;
				КонецЕсли; 
			КонецЦикла; 	
			Пока ВыбПроверки.Следующий() Цикл
				Если ВыбПроверки.Поставщик=Стр.Контрагент Тогда
					Выб=ВыбПроверки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Сч=0;
					СтрМаркеры="";
					Пока Выб.Следующий() Цикл
						Сч=Сч+1;
						СтрМаркеры=СтрМаркеры+Строка(Выб.Маркер)+", ";
						Если Сч=5 Тогда
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					Стр.МаркерыЛабораторныхПроверок=Лев(СтрМаркеры,СтрДлина(СтрМаркеры)-2);
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			ВыбПоставщики.Сбросить();
			ВыбПроверки.Сбросить();
			
		КонецЦикла; 
		ТабДанные.Сортировать("Контрагент");
		
		Мак=ПолучитьОбщийМакет("МакетРассылкиОтчетОПоставщике");
		ТабДок=Новый ТабличныйДокумент;
		Обл=Мак.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(Обл);
		Для каждого Стр Из ТабДанные Цикл
			Обл=Мак.ПолучитьОбласть("Строка");
			Обл.Параметры.Заполнить(Стр);
			ТабДок.Вывести(Обл);
		КонецЦикла; 
		ОтправитьПисьмоПоКатегориям("reklama@izbenka.msk.ru;product_1@vkusvill.ru",ТабДок,"Отчет о поставщике (жалобы, возвраты, аудиты)");
	КонецЕсли;
КонецПроцедуры

Процедура СделатьРассылкуПоНовинкамАутсорс() Экспорт
	Если ДеньНедели(ТекущаяДата())=1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияПокупателей.ДатаДок,
		|	ОбращенияПокупателей.Номенклатура,
		|	ОбращенияПокупателей.Производитель,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.Примечание,
		|	ОбращенияПокупателей.Технолог,
		|	ОбращенияПокупателей.ДатаПервойПродажи
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.ТипОбращения В(&ТипОбращения)
		|	И ОбращенияПокупателей.Новинка
		|	И ОбращенияПокупателей.Номенклатура <> &Номенклатура
		|	И ОбращенияПокупателей.Производитель <> &Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Производитель,
		|	вт.Номенклатура,
		|	вт.ТипЖалобы,
		|	вт.Технолог
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	вт КАК вт
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.ТипЖалобы,
		|	вт.Производитель,
		|	вт.Номенклатура,
		|	вт.Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.ДатаДок) КАК Колво,
		|	ОбращенияПокупателей.Номенклатура,
		|	ОбращенияПокупателей.Производитель,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.Технолог
		|ПОМЕСТИТЬ втВсе
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.ДатаДок <= &Дата2
		|	И ОбращенияПокупателей.ТипОбращения В(&ТипОбращения)
		|	И ОбращенияПокупателей.Номенклатура <> &Номенклатура
		|	И ОбращенияПокупателей.Производитель <> &Производитель
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбращенияПокупателей.Номенклатура,
		|	ОбращенияПокупателей.Производитель,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбращенияПокупателей.ДатаДок,
		|	ОбращенияПокупателей.Номенклатура,
		|	ОбращенияПокупателей.Производитель,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.Примечание,
		|	ОбращенияПокупателей.Технолог,
		|	ОбращенияПокупателей.ДатаПервойПродажи
		|ПОМЕСТИТЬ втВсеНеделя
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
		|		ПО ОбращенияПокупателей.Номенклатура = втТовары.Номенклатура
		|			И ОбращенияПокупателей.Производитель = втТовары.Производитель
		|			И ОбращенияПокупателей.ТипЖалобы = втТовары.ТипЖалобы
		|			И ОбращенияПокупателей.Технолог = втТовары.Технолог
		|ГДЕ
		|	ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.ТипОбращения В(&ТипОбращения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.ДатаДок КАК ДатаДок,
		|	вт.Номенклатура,
		|	вт.Производитель,
		|	вт.ТипЖалобы,
		|	вт.Примечание,
		|	вт.Технолог,
		|	ЕСТЬNULL(втВсе.Колво, 0) КАК Колво,
		|	вт.ДатаПервойПродажи
		|ИЗ
		|	втВсеНеделя КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВсе КАК втВсе
		|		ПО вт.Номенклатура = втВсе.Номенклатура
		|			И вт.Производитель = втВсе.Производитель
		|			И вт.ТипЖалобы = втВсе.ТипЖалобы
		|			И вт.Технолог = втВсе.Технолог
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок";
		
		Запрос.УстановитьПараметр("Дата1", НачалоНедели(ТекущаяДата())-7*24*60*60);
		Запрос.УстановитьПараметр("Дата2", НачалоНедели(ТекущаяДата())-1);
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
		Запрос.УстановитьПараметр("Производитель", Справочники.Контрагенты.ПустаяСсылка());
		
		МасТипы=Новый Массив;
		МасТипы.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("201"));
		МасТипы.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("202"));
		МасТипы.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("203"));
		МасТипы.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("204"));
		МасТипы.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("211"));
		
		Запрос.УстановитьПараметр("ТипОбращения", МасТипы);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Мак=ПолучитьОбщийМакет("МакетРассылкиНовинки");
			ТабДок=Новый ТабличныйДокумент;
			Обл=Мак.ПолучитьОбласть("Шапка");
			ТабДок.Вывести(Обл);
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Обл=Мак.ПолучитьОбласть("Строка");
				Обл.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ТабДок.Вывести(Обл);
			КонецЦикла; 
			ОтправитьПисьмоПоКатегориям("annyllat@gmail.com",ТабДок,"Отчет по обращениям (Новинки)");
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияПокупателей.ДатаДок,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.ПомощникУправляющего,
		|	ОбращенияПокупателей.СтруктурнаяЕдиница,
		|	ОбращенияПокупателей.ИсточникОбращения,
		|	ОбращенияПокупателей.СтатусЖалобы,
		|	ВЫБОР
		|		КОГДА ОбращенияПокупателей.Продавец1 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА ОбращенияПокупателей.ПродавецАутсорс
		|		ИНАЧЕ ОбращенияПокупателей.Продавец1
		|	КОНЕЦ КАК Продавец1,
		|	ВЫБОР
		|		КОГДА ОбращенияПокупателей.КассирПоЧеку = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА ОбращенияПокупателей.КассирАутсорс
		|		ИНАЧЕ ОбращенияПокупателей.КассирПоЧеку
		|	КОНЕЦ КАК КассирПоЧеку
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|	И ОбращенияПокупателей.Аутсорс
		|	И ОбращенияПокупателей.ТипЖалобы <> &ТипЖалобы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбращенияПокупателей.ДатаДок,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.ПомощникУправляющего,
		|	ОбращенияПокупателей.СтруктурнаяЕдиница,
		|	ОбращенияПокупателей.ИсточникОбращения,
		|	ОбращенияПокупателей.СтатусЖалобы,
		|	ВЫБОР
		|		КОГДА ОбращенияПокупателей.Продавец1 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА ОбращенияПокупателей.ПродавецАутсорс
		|		ИНАЧЕ ОбращенияПокупателей.Продавец1
		|	КОНЕЦ КАК Продавец1,
		|	ВЫБОР
		|		КОГДА ОбращенияПокупателей.КассирПоЧеку = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА ОбращенияПокупателей.КассирАутсорс
		|		ИНАЧЕ ОбращенияПокупателей.КассирПоЧеку
		|	КОНЕЦ КАК КассирПоЧеку
		|ПОМЕСТИТЬ втВсе
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата0 И &Дата2
		|	И ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|	И ОбращенияПокупателей.Аутсорс
		|	И ОбращенияПокупателей.ТипЖалобы <> &ТипЖалобы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсе.ПомощникУправляющего,
		|	КОЛИЧЕСТВО(втВсе.ДатаДок) КАК ДатаДок
		|ПОМЕСТИТЬ втПомощники
		|ИЗ
		|	втВсе КАК втВсе
		|
		|СГРУППИРОВАТЬ ПО
		|	втВсе.ПомощникУправляющего
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсе.СтруктурнаяЕдиница,
		|	КОЛИЧЕСТВО(втВсе.ДатаДок) КАК ДатаДок
		|ПОМЕСТИТЬ втТТ
		|ИЗ
		|	втВсе КАК втВсе
		|
		|СГРУППИРОВАТЬ ПО
		|	втВсе.СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсе.Продавец1,
		|	КОЛИЧЕСТВО(втВсе.ДатаДок) КАК ДатаДок
		|ПОМЕСТИТЬ втПродавцы
		|ИЗ
		|	втВсе КАК втВсе
		|
		|СГРУППИРОВАТЬ ПО
		|	втВсе.Продавец1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсе.КассирПоЧеку,
		|	КОЛИЧЕСТВО(втВсе.ДатаДок) КАК ДатаДок
		|ПОМЕСТИТЬ втКассиры
		|ИЗ
		|	втВсе КАК втВсе
		|
		|СГРУППИРОВАТЬ ПО
		|	втВсе.КассирПоЧеку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.ДатаДок,
		|	вт.СтруктурнаяЕдиница,
		|	вт.ПомощникУправляющего,
		|	вт.ТипЖалобы,
		|	вт.ИсточникОбращения,
		|	вт.СтатусЖалобы,
		|	вт.Продавец1,
		|	вт.КассирПоЧеку,
		|	ЕСТЬNULL(втТТ.ДатаДок, 0) КАК КолВоТТ,
		|	ЕСТЬNULL(втПомощники.ДатаДок, 0) КАК КолВоПом,
		|	ЕСТЬNULL(втПродавцы.ДатаДок, 0) КАК КолвоПродавец,
		|	ЕСТЬNULL(втКассиры.ДатаДок, 0) КАК КолвоКассир
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПомощники КАК втПомощники
		|		ПО вт.ПомощникУправляющего = втПомощники.ПомощникУправляющего
		|			И (вт.ПомощникУправляющего <> &ПустФЛ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТТ КАК втТТ
		|		ПО вт.СтруктурнаяЕдиница = втТТ.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПродавцы КАК втПродавцы
		|		ПО вт.Продавец1 = втПродавцы.Продавец1
		|			И (вт.Продавец1 <> &ПустФЛ И вт.Продавец1 <> &ПустСотр)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКассиры КАК втКассиры
		|		ПО вт.КассирПоЧеку = втКассиры.КассирПоЧеку
		|			И (вт.КассирПоЧеку <> &ПустФЛ И вт.КассирПоЧеку <> &ПустСотр)";
		
		Запрос.УстановитьПараметр("Дата1", НачалоНедели(ТекущаяДата())-7*24*60*60);
		Запрос.УстановитьПараметр("Дата2", НачалоНедели(ТекущаяДата())-1);
		Запрос.УстановитьПараметр("Дата0", ДобавитьМесяц(НачалоНедели(ТекущаяДата()),-6));
		
		Запрос.УстановитьПараметр("ТипОбращения", Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("206"));
		Запрос.УстановитьПараметр("ТипЖалобы", Справочники.ТипыЖалоб.НайтиПоКоду("216"));
		Запрос.УстановитьПараметр("ПустФЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустСотр", Справочники.СотрудникиАутсорсинг.ПустаяСсылка());
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Мак=ПолучитьОбщийМакет("МакетРассылкиАутсорс");
			ТабДок=Новый ТабличныйДокумент;
			Обл=Мак.ПолучитьОбласть("Шапка");
			ТабДок.Вывести(Обл);
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Обл=Мак.ПолучитьОбласть("Строка");
				Обл.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ТабДок.Вывести(Обл);
				
			КонецЦикла; 
			ОтправитьПисьмоПоКатегориям("annyllat@gmail.com",ТабДок,"Отчёт по обращениям (аутсорс)");
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

//+++АК БЕЛН 09.10.2016 ИП-00016941
Процедура СброситьОценкиОбещанийУволенных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СотрудникиОрганизаций.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ФизическиеЛица.Активный
	|		КОНЕЦ) КАК Активный
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО (СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка)
	|			И (СотрудникиОрганизаций.ПометкаУдаления = ЛОЖЬ)
	|			И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СотрудникиОрганизаций.ДатаУвольнения > &Дата)
	|			И (СотрудникиОрганизаций.Организация = &Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Ссылка";
	Запрос.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоКоду("000000006"));
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗФЛ = РезультатЗапроса.Выгрузить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоКоду("000000006"));
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СотрудникиОрганизаций.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ФизическиеЛица.Активный
	|		КОНЕЦ) КАК Активный
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО (СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка)
	|			И (СотрудникиОрганизаций.ПометкаУдаления = ЛОЖЬ)
	|			И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СотрудникиОрганизаций.ДатаУвольнения > &Дата)
	|			И (СотрудникиОрганизаций.Организация = &Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбещаниеОбъектыПривязки.Ссылка
	|ИЗ
	|	Документ.Обещание.ОбъектыПривязки КАК ОбещаниеОбъектыПривязки
	|		Левое СОЕДИНЕНИЕ вт КАК вт
	|		ПО ОбещаниеОбъектыПривязки.Исполнитель = вт.Ссылка
	|		Левое СОЕДИНЕНИЕ вт КАК вт1
	|		ПО ОбещаниеОбъектыПривязки.Заказчик = вт1.Ссылка
	|ГДЕ
	|	(вт1.Активный = ЛОЖЬ
	|			ИЛИ вт.Активный = ЛОЖЬ) 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбещаниеОбъектыПривязки.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ДокОбещание=ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
	//	МасИсп=Новый Массив;
	//	Для каждого Стр Из ДокОбещание.ОбъектыПривязки Цикл
	//		СтрФЛ=ТЗФЛ.Найти(Стр.Исполнитель);
	//		Если СтрФЛ<>Неопределено Тогда
	//			ИсполнительАктивный=СтрФЛ.Активный;
	//		Иначе	
	//			ИсполнительАктивный=Истина;
	//		КонецЕсли; 
	//		СтрФЛ=ТЗФЛ.Найти(Стр.Заказчик);
	//		Если СтрФЛ<>Неопределено Тогда
	//			ЗаказчикАктивный=СтрФЛ.Активный;
	//		Иначе	
	//			ЗаказчикАктивный=Истина;
	//		КонецЕсли; 
	//		
	//		
	//		Если (ИсполнительАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Исполнитель))
	//			ИЛИ (ЗаказчикАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Заказчик))  Тогда
	//			Стр.Оценка=Перечисления.ОценкаКачестваИсполнения.ПолностьюИсполняется;
	//			
	//			Если МасИсп.Найти(Стр.Исполнитель)=Неопределено Тогда
	//				МасИсп.Добавить(Стр.Исполнитель);
	//			КонецЕсли; 
	//		КонецЕсли;
	//		
	//	КонецЦикла; 
	//	Для каждого Эл Из МасИсп Цикл
	//		Документы.Обещание.ОбъектыПривязкиОценкаПриИзмененииПоИсполнителямСервер(Эл,ДокОбещание);
	//	КонецЦикла; 
	//	Документы.Обещание.ОбъектыПривязкиОценкаПриИзмененииСервер(ДокОбещание);
	//	//ДокОбещание.ДатаКонтроляОценки=ТекущаяДата();	
	//	ДокОбещание.Записать();
	//КонецЦикла;
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбещание=ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
		МасИсп=Новый Массив;
		
		Кол=ДокОбещание.ОбъектыПривязки.Количество();
		Для Сч=0 по Кол-1 Цикл
			Стр=ДокОбещание.ОбъектыПривязки[Кол-1-Сч];
			СтрФЛ=ТЗФЛ.Найти(Стр.Исполнитель);
			Если СтрФЛ<>Неопределено Тогда
				ИсполнительАктивный=СтрФЛ.Активный;
			Иначе	
				ИсполнительАктивный=Истина;
			КонецЕсли; 
			СтрФЛ=ТЗФЛ.Найти(Стр.Заказчик);
			Если СтрФЛ<>Неопределено Тогда
				ЗаказчикАктивный=СтрФЛ.Активный;
			Иначе	
				ЗаказчикАктивный=Истина;
			КонецЕсли; 
			
			
			Если (ИсполнительАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Исполнитель))
				ИЛИ (ЗаказчикАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Заказчик))  Тогда
				Стр.Оценка=Перечисления.ОценкаКачестваИсполнения.ПолностьюИсполняется;
				
				
				
				
				
				МасСтрИсп=ДокОбещание.ОбъектыПривязки.НайтиСтроки(Новый Структура("Исполнитель",Стр.Исполнитель));
				Если МасСтрИсп.Количество()=1 Тогда
					Кол1=ДокОбещание.Исполнители.Количество()-1;
					Для СчИсп=0 По Кол1 Цикл
						Если ДокОбещание.Исполнители[Кол1-СчИсп].Исполнитель=Стр.Исполнитель Тогда
							ДокОбещание.Исполнители.Удалить(Кол1-СчИсп);
						КонецЕсли; 
					КонецЦикла;
					Если НЕ МасИсп.Найти(Стр.Исполнитель)=Неопределено Тогда
						Ит=-1;
						КолМас=МасИсп.Количество()-1;
						Для  СчМас=0 по КолМас Цикл
							Если МасИсп[СчМас]=Стр.Исполнитель Тогда
								Ит=СчМас;
								Прервать;
							КонецЕсли; 
						КонецЦикла; 
						Если Ит>0 Тогда
							МасИсп.Удалить(Ит);
						КонецЕсли; 
					КонецЕсли; 
					ДокОбещание.ОбъектыПривязки.Удалить(Стр);
				Иначе
					Если МасИсп.Найти(Стр.Исполнитель)=Неопределено Тогда
						МасИсп.Добавить(Стр.Исполнитель);
					КонецЕсли; 
					ДокОбещание.ОбъектыПривязки.Удалить(Стр);
				КонецЕсли;
			КонецЕсли;
			
			
			
					
			
			
		КонецЦикла; 
		Для каждого Эл Из МасИсп Цикл
			Документы.Обещание.ОбъектыПривязкиОценкаПриИзмененииПоИсполнителямСервер(Эл,ДокОбещание);
		КонецЦикла; 
		Документы.Обещание.ОбъектыПривязкиОценкаПриИзмененииСервер(ДокОбещание);
		//ДокОбещание.ДатаКонтроляОценки=ТекущаяДата();	
		ДокОбещание.Записать();
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоКоду("000000006"));
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СотрудникиОрганизаций.Ссылка ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ФизическиеЛица.Активный
		|		КОНЕЦ) КАК Активный
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО (СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка)
		|			И (СотрудникиОрганизаций.ПометкаУдаления = ЛОЖЬ)
		|			И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СотрудникиОрганизаций.ДатаУвольнения > &Дата)
		|			И (СотрудникиОрганизаций.Организация = &Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛица.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбещаниеОбъектыПривязки.Ссылка
		|ИЗ
		|	Документ.Обещание.Заказчики КАК ОбещаниеОбъектыПривязки
		|		Левое СОЕДИНЕНИЕ вт КАК вт
		|		ПО ОбещаниеОбъектыПривязки.Заказчик = вт.Ссылка
		|		Левое СОЕДИНЕНИЕ вт КАК вт1
		|		ПО ОбещаниеОбъектыПривязки.Исполнитель = вт1.Ссылка
		|ГДЕ
		|	(вт.Активный = ЛОЖЬ
		|			ИЛИ вт1.Активный = ЛОЖЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбещаниеОбъектыПривязки.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ДокОбещание=ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
	//	Для каждого Стр Из ДокОбещание.Заказчики Цикл
	//		СтрФЛ=ТЗФЛ.Найти(Стр.Исполнитель);
	//		Если СтрФЛ<>Неопределено Тогда
	//			ИсполнительАктивный=СтрФЛ.Активный;
	//		Иначе	
	//			ИсполнительАктивный=Истина;
	//		КонецЕсли; 
	//		СтрФЛ=ТЗФЛ.Найти(Стр.Заказчик);
	//		Если СтрФЛ<>Неопределено Тогда
	//			ЗаказчикАктивный=СтрФЛ.Активный;
	//		Иначе	
	//			ЗаказчикАктивный=Истина;
	//		КонецЕсли; 
	//		
	//		
	//		Если (ИсполнительАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Исполнитель))
	//			ИЛИ (ЗаказчикАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Заказчик))  Тогда
	//			
	//			
	//			Стр.Оценка=Перечисления.ОценкаКачестваИсполнения.ПолностьюИсполняется;
	//			
	//		КонецЕсли; 
	//		
	//	КонецЦикла; 
	//	ОбъектыПривязкиЗаказчикиОценкаПриИзмененииСервер(ДокОбещание);
	//	//ДокОбещание.ДатаКонтроляОценки=ТекущаяДата();	
	//	ДокОбещание.Записать();
	//КонецЦикла;
	
	
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбещание=ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
		МасИсп=Новый Массив;
		
		Кол=ДокОбещание.Заказчики.Количество();
		Для Сч=0 по Кол-1 Цикл
			Стр=ДокОбещание.Заказчики[Кол-1-Сч];
			СтрФЛ=ТЗФЛ.Найти(Стр.Исполнитель);
			Если СтрФЛ<>Неопределено Тогда
				ИсполнительАктивный=СтрФЛ.Активный;
			Иначе	
				ИсполнительАктивный=Истина;
			КонецЕсли; 
			СтрФЛ=ТЗФЛ.Найти(Стр.Заказчик);
			Если СтрФЛ<>Неопределено Тогда
				ЗаказчикАктивный=СтрФЛ.Активный;
			Иначе	
				ЗаказчикАктивный=Истина;
			КонецЕсли; 
			
			
			Если (ИсполнительАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Исполнитель))
				ИЛИ (ЗаказчикАктивный = ЛОЖЬ И ЗначениеЗаполнено(Стр.Заказчик))  Тогда
				
				
				Стр.Оценка=Перечисления.ОценкаКачестваИсполнения.ПолностьюИсполняется;
				ДокОбещание.Заказчики.Удалить(Стр);
			КонецЕсли; 
			
		КонецЦикла; 
		ОбъектыПривязкиЗаказчикиОценкаПриИзмененииСервер(ДокОбещание);
		//ДокОбещание.ДатаКонтроляОценки=ТекущаяДата();	
		ДокОбещание.Записать();
	КонецЦикла;
	
	
	
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбещаниеОбъектыПривязки.Ссылка
		|ИЗ
		|	Документ.Обещание.ОбъектыПривязки КАК ОбещаниеОбъектыПривязки
		|ГДЕ
		|	ОбещаниеОбъектыПривязки.Дата < &Дата
		|			И ОбещаниеОбъектыПривязки.Дата <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ОбещаниеОбъектыПривязки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОбещаниеОбъектыПривязки.Ссылка.Статус <> &Статус
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбещаниеОбъектыПривязки.Ссылка";
	
	Запрос.УстановитьПараметр("Дата", (ДобавитьМесяц(ТекущаяДата(),-24)));
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусОбещания.СнятоеОбещание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбещание=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Кол=ДокОбещание.ОбъектыПривязки.Количество();
		МасИсп=Новый Массив;
		Для Сч=0 По Кол-1 Цикл
			Если ЗначениеЗаполнено(ДокОбещание.ОбъектыПривязки[Кол-1-Сч].Дата) И ДокОбещание.ОбъектыПривязки[Кол-1-Сч].Дата<(ДобавитьМесяц(ТекущаяДата(),-24)) Тогда
				ТекИсполнитель=ДокОбещание.ОбъектыПривязки[Кол-1-Сч].Исполнитель;
				ДокОбещание.ОбъектыПривязки.Удалить(Кол-1-Сч);
				Если МасИсп.Найти(ТекИсполнитель)=Неопределено Тогда
					МасИсп.Добавить(ТекИсполнитель);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		Для каждого Эл Из МасИсп Цикл
			Документы.Обещание.ОбъектыПривязкиОценкаПриИзмененииПоИсполнителямСервер(Эл,ДокОбещание);
		КонецЦикла; 
		
		Документы.Обещание.ОбъектыПривязкиОценкаПриИзмененииСервер(ДокОбещание);
		ДокОбещание.Записать();
	КонецЦикла;
	

	
	
КонецПроцедуры

Процедура ОбъектыПривязкиЗаказчикиОценкаПриИзмененииСервер(ДокОбещание)
	ТЗ=ДокОбещание.Заказчики.Выгрузить();
	ТЗ.Свернуть("Оценка");
	Если ТЗ.Количество()=1 Тогда
		Оценка=ТЗ[0].Оценка;
	Иначе	
		Оценка=Перечисления.ОценкаКачестваИсполнения.ЧастичноИсполняется;
	КонецЕсли;
	Если НЕ ДокОбещание.Оценка=Оценка Тогда
		ДокОбещание.Оценка=Оценка;	
		ДокОбещание.ДатаИзменения=ТекущаяДата();
	КонецЕсли; 
КонецПроцедуры
//---АК БЕЛН 09.10.2016 ИП-00016941
Процедура ВыполнитьОценкуОбещаний() Экспорт
	
	//Попытка
	СоотПисемОбОценках1 = Новый ТаблицаЗначений;
	СоотПисемОбОценках1.Колонки.Добавить("ФизЛицо");
	СоотПисемОбОценках1.Колонки.Добавить("Текст");
	СоотПисемОбОценках1.Колонки.Добавить("Ответственный");
	СоотПисемОбОценках=ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(СоотПисемОбОценках1), Новый УникальныйИдентификатор);
	
	Док = Документы.Обещание.НайтиПоНомеру("000000014",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док = Документы.Обещание.НайтиПоНомеру("000000037",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	//Док=Документы.Обещание.НайтиПоНомеру("000000015",'20160101');
	//Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  Тогда
	//	ДокОбещание=Док.ПолучитьОбъект();
	//	Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	//КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000016",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000017",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000020",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000019",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000003",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000004",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000010",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	Док=Документы.Обещание.НайтиПоНомеру("000000176",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	Док=Документы.Обещание.НайтиПоНомеру("000000011",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	Док=Документы.Обещание.НайтиПоНомеру("000000022",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	Док=Документы.Обещание.НайтиПоНомеру("000000007",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	Док=Документы.Обещание.НайтиПоНомеру("000000008",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	Док=Документы.Обещание.НайтиПоНомеру("000000018",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	//Док=Документы.Обещание.НайтиПоНомеру("000000006",'20160101');
	//Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
	//	ДокОбещание=Док.ПолучитьОбъект();
	//	Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	//КонецЕсли;
	Док=Документы.Обещание.НайтиПоНомеру("000000001",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата())  И Час(ТекущаяДата())>22 Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	Док=Документы.Обещание.НайтиПоНомеру("000000184",'20160101');
	Если НачалоДня(Док.ДатаКонтроляОценки)<>НачалоДня(ТекущаяДата()) И Час(ТекущаяДата())>22  Тогда
		ДокОбещание=Док.ПолучитьОбъект();
		Документы.Обещание.ВыполнитьОценку(ДокОбещание,СоотПисемОбОценках);
	КонецЕсли;
	
	//
	ТЗСоотПисемОбОценках=ПолучитьИзВременногоХранилища(СоотПисемОбОценках).Получить();
	
	
	ТЗФизЛица=ТЗСоотПисемОбОценках.Скопировать();
	ТЗОтветственные=ТЗСоотПисемОбОценках.Скопировать();
	ТЗФизЛица.Свернуть("ФизЛицо");
	ТЗОтветственные.Свернуть("Ответственный");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ТЗФизЛица.ВыгрузитьКолонку("ФизЛицо"));
    КонецНедели=НачалоДня(ТекущаяДата())-1;
	НачалоНедели=ДобавитьМесяц(НачалоДня(НачалоДня(ТекущаяДата())-6*24*60*60-1),-2);	
	Запрос.УстановитьПараметр("Дата1", НачалоНедели);
	Запрос.УстановитьПараметр("Дата2", КонецНедели);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление,
	|	КонтактнаяИнформация.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабельРаботыПродавцов.ТорговаяТочка.АдресЭлектроннойПочты,
	|	ТабельРаботыПродавцов.Сотрудник
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Сотрудник В(&Объект)
	|	И ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2";
	ТЗАдреса = Запрос.Выполнить().Выгрузить();
	
	
	
	
	
	
	Для каждого Стр Из  ТЗФизЛица Цикл
		Кому = Новый СписокЗначений;
		Для каждого СтрАдр Из ТЗАдреса Цикл
			Если СтрАдр.Объект=Стр.Физлицо Тогда
				Кому.Добавить(СтрАдр.Представление);
			КонецЕсли; 
		КонецЦикла; 
		ОтправитьПисьмоОбИндивилуальныхОценках(Стр.Физлицо,СоотПисемОбОценках,Ложь,Кому);
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("Объект", ТЗОтветственные.ВыгрузитьКолонку("Ответственный"));
	ТЗАдреса = Запрос.Выполнить().Выгрузить();
	
	
	
	Для каждого Стр Из  ТЗОтветственные Цикл
		Кому = Новый СписокЗначений;
		Для каждого СтрАдр Из ТЗАдреса Цикл
			Если СтрАдр.Объект=Стр.Ответственный Тогда
				Кому.Добавить(СтрАдр.Представление);
			КонецЕсли; 
		КонецЦикла; 
		ОтправитьПисьмоОбИндивилуальныхОценках(Стр.Ответственный,СоотПисемОбОценках,Истина,Кому);
	КонецЦикла; 
	//Исключение
	//КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьПисьмоОбИндивилуальныхОценках(Физлицо,СоотПисемОбОценках,ФлОтветственный,Кому)
	
	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	//Для каждого Стр Из Объект.ПрикрепленныеФайлы Цикл
	//	СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл)));
	//КонецЦикла; 
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	Текст="";
	
	ТЗСоотПисемОбОценках=ПолучитьИзВременногоХранилища(СоотПисемОбОценках).Получить();	
	Если ФлОтветственный=Ложь Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Изменены оценки по обещаниям  для исполнителя " + Строка(ФизЛицо) + ".");
		МасОтв=ТЗСоотПисемОбОценках.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
	Иначе	
		СтруктураНовогоПисьма.Вставить("Тема", "Изменены оценки по обещаниям  для исполнителей ответственного " + Строка(ФизЛицо) + ".");
		МасОтв=ТЗСоотПисемОбОценках.НайтиСтроки(Новый Структура("Ответственный", ФизЛицо));
	КонецЕсли; 
	Для каждого Эл Из МасОтв Цикл
		Текст=Текст+Символы.ПС+Символы.ПС+?(Эл.Текст=Неопределено,"",Эл.Текст);
	КонецЦикла; 
	
	СтруктураНовогоПисьма.Вставить("Тело",Текст);
	СтрКому="";
	Для каждого Эл Из Кому Цикл
		СтрКому=СтрКому+Эл.Значение+"; ";
	КонецЦикла; 
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией об измененной оценке на "+СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

Функция ПолучитьПапку()
	КаталогФайнРидер = Константы.КаталогФайнРидер.Получить();
	
	Если Прав(КаталогФайнРидер, 1) <> "\" Тогда
		КаталогФайнРидер = КаталогФайнРидер + "\";
	КонецЕсли;	
	
	КаталогФайнРидер=СтрЗаменить(врег(КаталогФайнРидер),врег("\sticker\"),"");
	
	КаталогРезультат1=КаталогФайнРидер+"\DOC\";
	Возврат КаталогРезультат1;	
	
КонецФункции

Процедура РаспознаваниеСканов() Экспорт
	Возврат;
	КаталогРезультат=ПолучитьПапку();
	Файлы = НайтиФайлы(КаталогРезультат, "*.docx");
	
	СоотТекст=Новый Соответствие;
	МасФайлов=Новый Массив;
	Для Каждого Файл Из Файлы Цикл
		ИмяБезРасширения=Прав(Файл.ИмяБезРасширения,36);
		Попытка
			ФайлСсылка=Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИмяБезРасширения));
		Исключение
			Продолжить;
		КонецПопытки;
		Если Не ЗначениеЗаполнено(ФайлСсылка) Тогда
			Продолжить;
		КонецЕсли;
		МасФайлов.Добавить(ФайлСсылка);
		//Сообщить(ФайлСсылка);
		//Текст = Новый ТекстовыйДокумент;
		ИмяФайла = КаталогРезультат + ИмяБезРасширения  + ".docx";
		//Текст.Прочитать(ИмяФайла);
		//СтрТекст=Текст.ПолучитьТекст();
		
		
		ПриложениеWord=Новый COMОбъект("Word.Application");
		ПриложениеWord.displayalerts=0;
		ПриложениеWord.Documents.Open(ИмяФайла);
		//Сообщить(ИмяФайла);
		Документ = ПриложениеWord.ActiveDocument();
		СтрТекст="";
		Для НомерТаблицы = 1 по Документ.Shapes.Count Цикл
			Таблица=Документ.Shapes.Item(НомерТаблицы);
			Если Таблица.TextFrame.hastext=Ложь Тогда
				Продолжить;
			КонецЕсли; 
			//Сообщить(строка(Таблица.TextFrame.TextRange.Text));	
			СтрТекст=СтрТекст+Символы.ПС+строка(Таблица.TextFrame.TextRange.Text);			
		КонецЦикла;
		
		Документ.Close(); 
		ПриложениеWord.Quit();	
		//Прервать;
		СоотТекст.Вставить(ФайлСсылка,СтрТекст);
		
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
	КонецЦикла;  
	ДобавитьЗамечанияПоРаспознанию(МасФайлов,СоотТекст);
	//Возврат;
КонецПроцедуры

Процедура ДобавитьЗамечанияПоРаспознанию(МасФайлов,СоотТекст)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка,
	|	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка.Поставщик,
	|	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка.Поставщик.ИНН
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.ПрикрепленныеФайлы КАК ПриходныйОрдерСкладПрикрепленныеФайлы
	|ГДЕ
	|	ПриходныйОрдерСкладПрикрепленныеФайлы.Файл В(&Файл)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка";
	
	Запрос.УстановитьПараметр("Файл", МасФайлов);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ФлТорг12=Ложь;
		ФлИННКонтр=Ложь;
		ФлУПД=Ложь;
		
		Для каждого Стр Из Объект.ПрикрепленныеФайлы Цикл
			Если  стр.ЭтоВетСвидетельство Тогда
				Продолжить;                                                                       
			КонецЕсли;
			ТекстРаспоз=СоотТекст.Получить(Стр.Файл);
			
			Если МасФайлов.Найти(Стр.Файл)<>Неопределено Тогда
				Стр.РаспознанныйТекст=ТекстРаспоз;
				Стр.Распознано=Истина;
			КонецЕсли; 
			Если Не Стр.Распознано Тогда
				Продолжить;
			КонецЕсли; 
			Если Найти(врег(Стр.РаспознанныйТекст),"ТОРГ-12")>0 и не ФлТорг12 и не ФлУПД Тогда
				ФлТорг12=Истина;
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Поставщик)=Тип("СправочникСсылка.Контрагенты") и Найти((Стр.РаспознанныйТекст),ВыборкаДетальныеЗаписи.ПоставщикИНН)>0  Тогда
					ФлИННКонтр=Истина;
				КонецЕсли; 
			КонецЕсли;
			
			Если Найти(врег(Стр.РаспознанныйТекст),"УНИВЕРС")>0 и
				Найти(врег(Стр.РаспознанныйТекст),"ПЕРЕДАТ")>0 и
				Найти(врег(Стр.РаспознанныйТекст),"ДОКУМЕНТ")>0 
				и не ФлТорг12 и не ФлУПД Тогда
				ФлУПД=Истина;
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Поставщик)=Тип("СправочникСсылка.Контрагенты") и Найти((Стр.РаспознанныйТекст),ВыборкаДетальныеЗаписи.ПоставщикИНН)>0  Тогда
					ФлИННКонтр=Истина;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЦикла; 
		Замечание="";
		Если Не ФлТорг12 и Не ФлУПД Тогда
			Замечание="Не найден Торг-12 (УПД) среди прикрепленных сканов";
		ИначеЕсли (ФлТорг12 или ФлУПД) и не ФлИННКонтр и ТипЗнч(ВыборкаДетальныеЗаписи.Поставщик)=Тип("СправочникСсылка.Контрагенты")  Тогда
			Замечание="Неверный ИНН поставщика в скане Торг-12 (УПД)";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Замечание) Тогда
			Объект.ЗамечанияПоРаспознаванию=Замечание;            
			Объект.ЕстьЗамечанияПоРаспознаванию=Истина;
		Иначе
			Объект.ЗамечанияПоРаспознаванию=Замечание;            
			Объект.ЕстьЗамечанияПоРаспознаванию=Ложь;
		КонецЕсли;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура РассылкаРеестраНовинокДоп() Экспорт
	
	Если НачалоДня(ТекущаяДата()) <> НачалоДня(Константы.ДатаПоследнейОтправки.Получить())
		И Час(ТекущаяДата()) > 18 Тогда
		
		Константы.ДатаПоследнейОтправки.Установить(НачалоДня(ТекущаяДата()));
		
		Рассылка = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000086");
		Если ЗначениеЗаполнено(Рассылка) Тогда
			Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Рассылка);
		КонецЕсли;
		Рассылка = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000080");
		Если ЗначениеЗаполнено(Рассылка) Тогда
			Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Рассылка);
		КонецЕсли;
		Рассылка = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000082");
		Если ЗначениеЗаполнено(Рассылка) Тогда
			Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Рассылка);
		КонецЕсли;
		Рассылка = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000085");
		Если ЗначениеЗаполнено(Рассылка) Тогда
			Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Рассылка);
		КонецЕсли;
		Рассылка = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000083");
		Если ЗначениеЗаполнено(Рассылка) Тогда
			Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Рассылка);
		КонецЕсли;
		Рассылка = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000084");
		Если ЗначениеЗаполнено(Рассылка) Тогда
			Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Рассылка);
		КонецЕсли;
		Рассылка = Справочники.ПравилаРаботыСотрудников.НайтиПоКоду("000000087");
		Если ЗначениеЗаполнено(Рассылка) Тогда
			Справочники.ПравилаРаботыСотрудников.ОбработатьЭлементСДинамическойЧастью(Рассылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаВремениВыезда() Экспорт
	
	Если НачалоДня(ТекущаяДата())<>НачалоДня(Константы.ДатаПоследнейУстановкиВремениВыезда.Получить())
		И Час(ТекущаяДата()) > 6 Тогда
		
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаПланирования", НачалоДня(ТекущаяДата()));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
		|ПОМЕСТИТЬ втБезМаг
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(, ДатаПланирования = &ДатаПланирования) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		|ГДЕ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Отменен = ЛОЖЬ
		|	И ПланируемыеМаршрутыПеревозчикаСрезПоследних.ОчиститьМагазины = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Подрядчик,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут,
		|	МАКСИМУМ(ПланируемыеМаршрутыПеревозчикаСрезПоследних.ДатаПланирования) КАК ДатаПланирования
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(
		|			,
		|			ДатаПланирования < &ДатаПланирования
		|				И НЕ Маршрут В
		|						(ВЫБРАТЬ
		|							втБезМаг.Маршрут
		|						ИЗ
		|							втБезМаг)) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ПО ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут = МаршрутыТорговыеТочки.Ссылка
		|ГДЕ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Подрядчик,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ВремяВыезда,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ПропущенныхНомеровМаршрута КАК ПропущенныхНомеровМаршрута,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Подрядчик,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ОчиститьМагазины,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Регистратор.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(, ДатаПланирования < &ДатаПланирования) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО ПланируемыеМаршрутыПеревозчикаСрезПоследних.Подрядчик = вт.Подрядчик
		|			И ПланируемыеМаршрутыПеревозчикаСрезПоследних.ДатаПланирования = вт.ДатаПланирования
		|			И ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут = вт.Маршрут
		|ГДЕ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Отменен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ВремяВыезда,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ПропущенныхНомеровМаршрута,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Подрядчик,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ОчиститьМагазины,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Регистратор.Склад
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(, ДатаПланирования = &ДатаПланирования) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеМагазиныПеревозчика КАК ПланируемыеМагазиныПеревозчика
		//|		ПО ПланируемыеМаршрутыПеревозчикаСрезПоследних.Регистратор = ПланируемыеМагазиныПеревозчика.Регистратор
		//|			И ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут = ПланируемыеМагазиныПеревозчика.Маршрут
		|ГДЕ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Отменен = ЛОЖЬ И ПланируемыеМаршрутыПеревозчикаСрезПоследних.ОчиститьМагазины = Ложь";
		Выборка = Запрос.Выполнить().Выбрать();
		
		МасМарш=Новый ТаблицаЗначений;
		МасМарш.Колонки.Добавить("Маршрут",Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
		МасМарш.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		
		Пока Выборка.Следующий() Цикл
			Стр=МасМарш.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Выборка);		
			
		КонецЦикла; 
		МасМарш.Свернуть("Маршрут,Склад");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ВремяВыезда,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ПропущенныхНомеровМаршрута КАК ПропущенныхНомеровМаршрута,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Подрядчик,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ОчиститьМагазины,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Регистратор.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(, ДатаПланирования = &ДатаПланирования) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		|ГДЕ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Отменен = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		МасПеревоз = Новый Массив;
		МасСклад = Новый Массив;
		
		БГ=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243")	;
		Пока Выборка.Следующий() Цикл
			МасПеревоз.Добавить(Выборка.Подрядчик);
			МасСклад.Добавить(Выборка.Склад);
			//Стр=МасМарш.Добавить();
			//ЗаполнитьЗначенияСвойств(Стр,Выборка);		
			
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Перевозчик", МасПеревоз);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршруты.Ссылка,
		|	Маршруты.СтруктурноеПодразделение
		|ИЗ
		|	Справочник.Маршруты КАК Маршруты
		|ГДЕ
		|	Маршруты.ПропущенныхНомеровМаршрута > 0
		|	И Маршруты.Перевозчик В(&Перевозчик)";
		Результат = Запрос.Выполнить();
		Выб = Результат.Выбрать();
		
		Пока Выб.Следующий() Цикл
			Если МасСклад.Найти(Выб.СтруктурноеПодразделение)<>Неопределено Тогда
				ОбСпр = Выб.Ссылка.ПолучитьОбъект();
				ОбСпр.ВремяВыездаЗаполненаАвтоматически	= Истина;
				ОбСпр.ПропущенныхНомеровМаршрута		= 0;
				ОбСпр.Записать();
			КонецЕсли;
		КонецЦикла; 
		
		
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			ОбСпр = Выборка.Маршрут.ПолучитьОбъект();
			ОбСпр.ВремяВыездаЗаполненаАвтоматически	= Истина;
			ОбСпр.ПланируемоеВремяВыездаПоМаршруту	= Выборка.ВремяВыезда;
			ОбСпр.ПропущенныхНомеровМаршрута		= Выборка.ПропущенныхНомеровМаршрута;
			ОбСпр.ПометкаУдаления=Ложь;
			
			Если Выборка.ОчиститьМагазины Тогда
				ОбСпр.ТорговыеТочки.Очистить();
			КонецЕсли; 
			ОбСпр.Записать();
		КонецЦикла;
		
		МасМаршИтог=МасМарш.ВыгрузитьКолонку("Маршрут");
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МаршрутныйЛист.Ссылка.Маршрут,
			|	МаршрутныйЛист.Ссылка.Маршрут.СтруктурноеПодразделение КАК Склад
			//|ПОМЕСТИТЬ вт
			|ИЗ
			|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛист
			|ГДЕ
			|	МаршрутныйЛист.Ссылка.ПометкаУдаления = ЛОЖЬ
			|	И МаршрутныйЛист.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
			|	И МаршрутныйЛист.Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
			|
			|СГРУППИРОВАТЬ ПО
			|	МаршрутныйЛист.Ссылка.Маршрут,
			|	МаршрутныйЛист.Ссылка.Маршрут.СтруктурноеПодразделение";
		
		Запрос.УстановитьПараметр("Ссылка", МасМаршИтог);
		Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
		РезультатЗапроса = Запрос.Выполнить();

		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		МасМарш.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НовСтр=МасМарш.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		

		
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"));
		Запрос.УстановитьПараметр("Маршруты", МасМарш.ВыгрузитьКолонку("Маршрут"));
		Запрос.УстановитьПараметр("Вкусвилл", Справочники.Организации.НайтиПоКоду("000000006"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршруты.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Маршруты.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|			ТОГДА Маршруты.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|		ИНАЧЕ Маршруты.ПланируемоеВремяВыездаПоМаршруту
		|	КОНЕЦ КАК ПланируемоеВремяВыездаПоМаршруту,
		|	Маршруты.НеУчаствуетВТранспортнойСистеме,
		|	Маршруты.ПометкаУдаления,
		|	Маршруты.Наименование,
		|	Маршруты.ПланируемоеВремяВыездаПоМаршруту КАК ПланируемоеВремяВыездаПоМаршруту1,
		|	Маршруты.ПропущенныхНомеровМаршрута,
		|	Маршруты.ПропущенныхНомеровМаршрута КАК ПолеСорт,
		|	ВЫБОР
		|		КОГДА Маршруты.Организация = ЗНАЧЕНИЕ(Справочник.организации.ПустаяСсылка)
		|			ТОГДА &Вкусвилл
		|		ИНАЧЕ Маршруты.Организация
		|	КОНЕЦ КАК Организация
		|ИЗ
		|	Справочник.Маршруты КАК Маршруты
		|ГДЕ
		|	Маршруты.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И Маршруты.Ссылка В(&Маршруты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланируемоеВремяВыездаПоМаршруту,
		|	ПолеСорт
		|ИТОГИ ПО
		|	Организация";
		//Результат = Запрос.Выполнить();
		//
		//ВыборкаДетальныеЗаписи = Результат.Выбрать();
		//Ит = 0;
		//ПропущенныхНомеровМаршрута=0;
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	Ит=Ит+1;
		//	Ит=Ит+ПропущенныхНомеровМаршрута;
		//	Если ВыборкаДетальныеЗаписи.Наименование<>Строка(Ит) Тогда
		//		Об=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		//		Об.ВремяВыездаЗаполненаАвтоматически=Истина;
		//		//Об.ПолноеНаименование=Об.Наименование;
		//		Об.Наименование=Строка(Ит);
		//		Об.НомерПоВремениВыезда=(Ит);
		//		Об.Записать();
		//		//Мен=РегистрыСведений.НомераМаршрутов.СоздатьМенеджерЗаписи();              
		//		//Мен.Период=ТекущаяДата();
		//		//Мен.Маршрут=ВыборкаДетальныеЗаписи.Ссылка;
		//		//Мен.Номер=Строка(Ит);
		//		//Мен.Записать();
		//	КонецЕсли; 
		//	ПропущенныхНомеровМаршрута = ВыборкаДетальныеЗаписи.ПропущенныхНомеровМаршрута;
		//КонецЦикла;

		
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
		Результат = Запрос.Выполнить();
		
		ВыбОрг= Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбОрг.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыбОрг.Выбрать();
			Ит = 0;
			ПропущенныхНомеровМаршрута=0;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Ит=Ит+1;
				//Ит=Ит+ПропущенныхНомеровМаршрута;
				Если ВыборкаДетальныеЗаписи.Наименование<>Строка(Ит) Тогда
					Об=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Об.ВремяВыездаЗаполненаАвтоматически=Истина;
					//Об.ПолноеНаименование=Об.Наименование;
					Об.Наименование=Строка(Ит);
					Об.НомерПоВремениВыезда=(Ит);
					Об.Записать();
					//Мен=РегистрыСведений.НомераМаршрутов.СоздатьМенеджерЗаписи();              
					//Мен.Период=ТекущаяДата();
					//Мен.Маршрут=ВыборкаДетальныеЗаписи.Ссылка;
					//Мен.Номер=Строка(Ит);
					//Мен.Записать();
				КонецЕсли; 
				ПропущенныхНомеровМаршрута = ВыборкаДетальныеЗаписи.ПропущенныхНомеровМаршрута;
			КонецЦикла;
		
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаМагазины.Маршрут,
		|	ПланируемыеМаршрутыПеревозчикаМагазины.Склад
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	&СтруктурнаяЕдиница КАК ПланируемыеМаршрутыПеревозчикаМагазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Маршруты.Ссылка,
		|	Маршруты.СтруктурноеПодразделение
		|ПОМЕСТИТЬ втМарш
		|ИЗ
		|	Справочник.Маршруты КАК Маршруты
		|ГДЕ
		|	Маршруты.СтруктурноеПодразделение В(&СтруктурноеПодразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМарш.Ссылка,
		|	втМарш.СтруктурноеПодразделение
		|ИЗ
		|	втМарш КАК втМарш
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО втМарш.Ссылка = вт.Маршрут
		|ГДЕ
		|	вт.Маршрут ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", МасМарш.ВыгрузитьКолонку("Склад"));
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", МасМарш);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.СтруктурноеПодразделение=БГ Тогда
				Продолжить;
			КонецЕсли; 
			Об=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Об.ВремяВыездаЗаполненаАвтоматически=Истина;
			//Об.ПолноеНаименование=Об.Наименование;
			Об.НомерПоВремениВыезда=(0);
			Об.Наименование=Строка(0);
			Об.Записать();
		КонецЦикла;
		
		
		
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеМагазиныПеревозчикаСрезПоследних.Маршрут КАК Маршрут,
		|	ПланируемыеМагазиныПеревозчикаСрезПоследних.Магазин КАК СтруктурнаяЕдиница,
		|	ПланируемыеМагазиныПеревозчикаСрезПоследних.Стоимость,
		|	ПланируемыеМагазиныПеревозчикаСрезПоследних.ПорядокДоставки,
		|	ПланируемыеМагазиныПеревозчикаСрезПоследних.ПоставкаВСетках,
		|	ПланируемыеМагазиныПеревозчикаСрезПоследних.Регистратор.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.ПланируемыеМагазиныПеревозчика.СрезПоследних(, ДатаПланирования = &ДатаПланирования) КАК ПланируемыеМагазиныПеревозчикаСрезПоследних
		|ИТОГИ ПО
		|	Маршрут";
		
		Запрос.УстановитьПараметр("ДатаПланирования", НачалоДня(ТекущаяДата()));
		
		Результат = Запрос.Выполнить();
		
		ВыборкаМаршрут = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МасМарш=Новый ТаблицаЗначений;
		МасМарш.Колонки.Добавить("СтруктурнаяЕдиница",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		МасМарш.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		Пока ВыборкаМаршрут.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаМаршрут.Выбрать();            
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Стр=МасМарш.Добавить();
				ЗаполнитьЗначенияСвойств(Стр,ВыборкаДетальныеЗаписи);
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаМагазины.СтруктурнаяЕдиница,
		|	ПланируемыеМаршрутыПеревозчикаМагазины.Склад
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	&СтруктурнаяЕдиница КАК ПланируемыеМаршрутыПеревозчикаМагазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыТорговыеТочки.Ссылка,
		|	МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение как СтруктурноеПодразделение
		|ИЗ
		|	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО МаршрутыТорговыеТочки.СтруктурнаяЕдиница = вт.СтруктурнаяЕдиница
		|			И МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение = вт.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыТорговыеТочки.Ссылка,
		|	МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение";
		
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", МасМарш);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//Если МасМарш.Найти(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница)<>Неопределено Тогда
			Об=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Об.ВремяВыездаЗаполненаАвтоматически=Истина;
			Кол=Об.ТорговыеТочки.Количество();
			Для Сч=0 По Кол-1 Цикл
				Если МасМарш.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Склад",
					Об.ТорговыеТочки[Кол-1-Сч].СтруктурнаяЕдиница,ВыборкаДетальныеЗаписи.СтруктурноеПодразделение)).Количество()>0 Тогда
					Об.ТорговыеТочки.Удалить(Кол-1-Сч);
				КонецЕсли; 
			КонецЦикла; 
			Об.Записать();
			//КонецЕсли; 
		КонецЦикла;
		
		
		
		
		
		
		ВыборкаМаршрут.Сбросить();
		Пока ВыборкаМаршрут.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаМаршрут.Выбрать();            
			Об=ВыборкаМаршрут.Маршрут.ПолучитьОбъект();
			Об.ВремяВыездаЗаполненаАвтоматически=Истина;
			Об.ТорговыеТочки.Очистить();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Стр=Об.ТорговыеТочки.Добавить();
				ЗаполнитьЗначенияСвойств(Стр,ВыборкаДетальныеЗаписи);
			КонецЦикла;
			ЗаполнитьСуммуСервер(Об);
			Об.Записать();
		КонецЦикла;
		//+++АК BELN 2018.12.17 ИП-00020725	
		СделатьРассылкуПоИзменениямМаршрутов();
		//---АК BELN 
		Константы.ДатаПоследнейУстановкиВремениВыезда.Установить(НачалоДня(ТекущаяДата()));
	КонецЕсли; 
	
КонецПроцедуры

//+++АК BELN 2018.12.17 ИП-00020725      
Процедура СделатьРассылкуПоИзменениямМаршрутов()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата1",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2",КонецДня(ТекущаяДата()));
	
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Вкусвилл", Справочники.Организации.НайтиПоКоду("000000006"));
	
	Запрос.УстановитьПараметр("Владелец",Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Получатель КАК СтруктурнаяЕдиница,
		|	МаршрутныйЛистТорговыеТочки.ПоставкаВСетках КАК КолвоСетокВПоставке,
		|	ВЫБОР
		|		КОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ЕСТЬ NULL
		|				ИЛИ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВЫБОР
		|					КОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|						ТОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|					ИНАЧЕ МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|					ТОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|				ИНАЧЕ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту
		|			КОНЕЦ
		|	КОНЕЦ КАК ВремяВыходаВРейс,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Комментарий КАК Примечание,
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Сборщик КАК Сборщик,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад.Владелец,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад,
		|	МаршрутныйЛистРасходныеОрдера.Документ.КоличествоПаллет КАК КоличествоПаллет,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Статус КАК Статус,
		|	МаршрутныйЛистРасходныеОрдера.Документ.СборкаТерминаломЗакончена КАК СборкаТерминаломЗакончена,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель КАК Водитель,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПогрузкаНачата,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ДатаЗавершенияПогрузки,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.Номер, МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование) КАК МаршрутНаименование,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.НомерПоВремениВыезда, МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.НомерПоВремениВыезда) КАК МаршрутНомерПоВремениВыезда,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследнихВчера.НомерПоВремениВыезда, ""0"") КАК МаршрутНаименованиеВчера,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад.ДляШтучногоТовара КАК ДляШтучногоТовара,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ДатаПодачиМашины,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование КАК ПолноеНаименование,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Организация КАК Организация
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
		|		ПО МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут = МаршрутныйЛистТорговыеТочки.Ссылка
		|			И МаршрутныйЛистРасходныеОрдера.Документ.Получатель = МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераМаршрутов.СрезПоследних(ДОБАВИТЬКДАТЕ(&Дата2, ДЕНЬ, 0), ) КАК НомераМаршрутовСрезПоследних
		|		ПО МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут = НомераМаршрутовСрезПоследних.Маршрут
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераМаршрутов.СрезПоследних(ДОБАВИТЬКДАТЕ(&Дата2, ДЕНЬ, -1), ) КАК НомераМаршрутовСрезПоследнихВчера
		|		ПО МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут = НомераМаршрутовСрезПоследнихВчера.Маршрут
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (ВЫБОР
		|				КОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Организация = ЗНАЧЕНИЕ(Справочник.организации.ПустаяСсылка)
		|					ТОГДА &Вкусвилл
		|				ИНАЧЕ МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Организация
		|			КОНЕЦ = &Организация
		|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	И МаршрутныйЛистРасходныеОрдера.Ссылка.Проведен
		|	И МаршрутныйЛистРасходныеОрдера.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|	И МаршрутныйЛистРасходныеОрдера.Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
		|	И МаршрутныйЛистРасходныеОрдера.Документ.Склад.Владелец = &Владелец
		|	И МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут <> ЗНАЧЕНИЕ(Справочник.Маршруты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.Номер, МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование),
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	ВЫБОР
		|		КОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ЕСТЬ NULL
		|				ИЛИ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВЫБОР
		|					КОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|						ТОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|					ИНАЧЕ МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|					ТОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|				ИНАЧЕ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту
		|			КОНЕЦ
		|	КОНЕЦ,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка,
		|	МаршрутныйЛистТорговыеТочки.ПоставкаВСетках,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Получатель,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Комментарий,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Сборщик,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад.Владелец,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад,
		|	МаршрутныйЛистРасходныеОрдера.Документ.КоличествоПаллет,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Статус,
		|	МаршрутныйЛистРасходныеОрдера.Документ.СборкаТерминаломЗакончена,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПогрузкаНачата,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ДатаЗавершенияПогрузки,
		|	МаршрутныйЛистРасходныеОрдера.Документ.Склад.ДляШтучногоТовара,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ДатаПодачиМашины,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.НомерПоВремениВыезда, МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.НомерПоВремениВыезда),
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследнихВчера.НомерПоВремениВыезда, ""0""),
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияМаршрутов.Маршрут,
		|	МАКСИМУМ(ИсторияМаршрутов.Период) КАК Период
		|ПОМЕСТИТЬ втМаршрутаПериодМакс
		|ИЗ
		|	РегистрСведений.ИсторияМаршрутов КАК ИсторияМаршрутов
		|ГДЕ
		|	ИсторияМаршрутов.Маршрут В
		|			(ВЫБРАТЬ
		|				вт.Маршрут
		|			ИЗ
		|				вт)
		|	И ИсторияМаршрутов.Период < &Дата1
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияМаршрутов.Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияМаршрутов.Маршрут,
		|	ИсторияМаршрутов.ТорговаяТочка,
		|	ИсторияМаршрутов.ТорговаяТочка.НомерТочки КАК НомерТочки,
		|	ИсторияМаршрутов.Маршрут.ПолноеНаименование КАК ПолноеНаименование
		|ИЗ
		|	втМаршрутаПериодМакс КАК втМаршрутаПериодМакс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМаршрутов КАК ИсторияМаршрутов
		|		ПО втМаршрутаПериодМакс.Маршрут = ИсторияМаршрутов.Маршрут
		|			И (втМаршрутаПериодМакс.Период = ИсторияМаршрутов.Период
		|				ИЛИ ДОБАВИТЬКДАТЕ(ИсторияМаршрутов.Период, СЕКУНДА, -1) = втМаршрутаПериодМакс.Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Маршрут КАК Маршрут,
		|	вт.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	вт.Сборщик,
		|	МАКСИМУМ(вт.КолвоСетокВПоставке) КАК Сетки,
		|	вт.ВремяВыходаВРейс,
		|	ВЫБОР
		|		КОГДА вт.Маршрут.Наименование = ""0""
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
		|		ИНАЧЕ вт.ВремяВыходаВРейс
		|	КОНЕЦ КАК ВремяВыходаВРейс1,
		|	вт.Водитель КАК Водитель,
		|	МАКСИМУМ(вт.ПогрузкаНачата) КАК ПогрузкаНачата,
		|	МИНИМУМ(вт.ДатаЗавершенияПогрузки) КАК ДатаЗавершенияПогрузки,
		|	вт.МаршрутНаименование КАК МаршрутНаименование,
		|	вт.МаршрутНомерПоВремениВыезда КАК МаршрутНомерПоВремениВыезда,
		|	вт.МаршрутНаименованиеВчера КАК МаршрутНаименованиеВчера,
		|	вт.ДляШтучногоТовара,
		|	СУММА(вт.Документ.КоличествоПаллет) КАК КоличествоПаллет,
		|	МИНИМУМ(вт.ДатаПодачиМашины) КАК ДатаПодачиМашины,
		|	вт.ДокументСклад КАК Склад,
		|	ВЫРАЗИТЬ(вт.СтруктурнаяЕдиница КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК НомерТочки,
		|	вт.ПолноеНаименование КАК ПолноеНаименование,
		|	вт.Организация КАК Организация
		|ИЗ
		|	вт КАК вт
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.Маршрут,
		|	вт.СтруктурнаяЕдиница,
		|	вт.Сборщик,
		|	вт.ВремяВыходаВРейс,
		|	ВЫБОР
		|		КОГДА вт.Маршрут.Наименование = ""0""
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
		|		ИНАЧЕ вт.ВремяВыходаВРейс
		|	КОНЕЦ,
		|	вт.Водитель,
		|	вт.МаршрутНаименование,
		|	вт.МаршрутНомерПоВремениВыезда,
		|	вт.МаршрутНаименованиеВчера,
		|	вт.ДляШтучногоТовара,
		|	вт.ДокументСклад,
		|	вт.ПолноеНаименование,
		|	вт.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяВыходаВРейс1,
		|	вт.ВремяВыходаВРейс,
		|	МаршрутНомерПоВремениВыезда,
		|	МаршрутНаименование
		|ИТОГИ ПО
		|	Организация,
		|	Маршрут,
		|	ПолноеНаименование,
		|	МаршрутНаименованиеВчера,
		|	МаршрутНаименование";
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыбОрг=РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТЗСтарыеМагазины=РезультатЗапроса[2].Выгрузить();
		ТЗНомераМаршрутов=Новый ТаблицаЗначений;
		ТЗНомераМаршрутов.Колонки.Добавить("Организация");
		ТЗНомераМаршрутов.Колонки.Добавить("Маршрут",Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
		ТЗНомераМаршрутов.Колонки.Добавить("ПолноеНаименование");
		ТЗНомераМаршрутов.Колонки.Добавить("СегодняшнийНомер");
		ТЗНомераМаршрутов.Колонки.Добавить("ВчерашнийНомер");
		
		ТЗМагазиныСегодня=Новый ТаблицаЗначений;
		ТЗМагазиныСегодня.Колонки.Добавить("Магазин");
		ТЗМагазиныСегодня.Колонки.Добавить("НомерТочки");
		ТЗМагазиныСегодня.Колонки.Добавить("МаршрутТекущий");
		ТЗМагазиныСегодня.Колонки.Добавить("МаршрутПолноеНаименованиеТекущий");
		ТЗМагазиныСегодня.Колонки.Добавить("МаршрутВчера");
		ТЗМагазиныСегодня.Колонки.Добавить("МаршрутПолноеНаименованиеВчера");
		
		Пока ВыбОрг.Следующий() Цикл
			ВыбМарш=ВыбОрг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыбМарш.Следующий() Цикл
				ВыбПН=ВыбМарш.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыбПН.Следующий() Цикл
					ВыбНомерВч=ВыбПН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыбНомерВч.Следующий() Цикл
						ВыбНомер=ВыбНомерВч.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыбНомер.Следующий() Цикл
							Если Сокрлп(ВыбНомер.МаршрутНаименованиеВчера)<>Сокрлп(ВыбНомер.МаршрутНаименование) Тогда
								НовСтрМарш=ТЗНомераМаршрутов.Добавить();
								НовСтрМарш.Маршрут=ВыбНомер.Маршрут;
								НовСтрМарш.ВчерашнийНомер=ВыбНомер.МаршрутНаименованиеВчера;
								НовСтрМарш.СегодняшнийНомер=ВыбНомер.МаршрутНаименование;
								НовСтрМарш.Организация=ВыбНомер.Организация;
								НовСтрМарш.ПолноеНаименование=ВыбНомер.ПолноеНаименование;
							КонецЕсли; 
							
							Выб=ВыбНомер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока Выб.СледующийПоЗначениюПоля("СтруктурнаяЕдиница") Цикл
								НовСтрМарш=ТЗМагазиныСегодня.Добавить();
								НовСтрМарш.МаршрутТекущий=ВыбНомер.Маршрут;
								НовСтрМарш.Магазин=Выб.СтруктурнаяЕдиница;
								НовСтрМарш.НомерТочки=Выб.НомерТочки;
								НовСтрМарш.МаршрутПолноеНаименованиеТекущий=ВыбНомер.ПолноеНаименование;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		ТЗМагазиныСегодня.Сортировать("НомерТочки");
		Для каждого Стр Из ТЗМагазиныСегодня Цикл
			МасСтр=ТЗСтарыеМагазины.НайтиСтроки(Новый Структура("ТорговаяТочка",Стр.Магазин));
			Если МасСтр.Количество() Тогда
				Стр.МаршрутВчера=МасСтр[0].Маршрут;
				Стр.МаршрутПолноеНаименованиеВчера=МасСтр[0].ПолноеНаименование;
			КонецЕсли; 
		
		КонецЦикла; 
		Кол=ТЗМагазиныСегодня.Количество();
		Для Сч=0 По Кол-1 Цикл
			Если СокрЛП(ТЗМагазиныСегодня[Кол-1-Сч].МаршрутВчера)=СокрЛП(ТЗМагазиныСегодня[Кол-1-Сч].МаршрутТекущий) Тогда
				ТЗМагазиныСегодня.Удалить(Кол-1-Сч);
			КонецЕсли; 
		КонецЦикла; 
		Если ТЗНомераМаршрутов.Количество() ИЛИ ТЗМагазиныСегодня.Количество() Тогда
			Мак=Справочники.Маршруты.ПолучитьМакет("МакетРассылки");
			ТабДок=Новый ТабличныйДокумент;
			Если ТЗНомераМаршрутов.Количество() Тогда
				Обл=Мак.ПолучитьОбласть("ШапкаМаршруты");
				ТабДок.Вывести(Обл);
				
				Обл=Мак.ПолучитьОбласть("СтрокаМаршруты");
				Для каждого Стр Из ТЗНомераМаршрутов Цикл
					ЗаполнитьЗначенияСвойств(Обл.Параметры,Стр);
					ТабДок.Вывести(Обл);
				КонецЦикла; 
			КонецЕсли; 
			Если ТЗМагазиныСегодня.Количество() Тогда
				Обл=Мак.ПолучитьОбласть("ШапкаМагазины");
				ТабДок.Вывести(Обл);
				
				Обл=Мак.ПолучитьОбласть("СтрокаМагазины");
				Для каждого Стр Из ТЗМагазиныСегодня Цикл
					ЗаполнитьЗначенияСвойств(Обл.Параметры,Стр);
					ТабДок.Вывести(Обл);
				КонецЦикла; 
			КонецЕсли; 
			ОтправитьПисьмоПоКатегориям("operator.2013@list.ru;sklad2@izbenka.msk.ru;voroshilov_sv@mail.ru",ТабДок,"Изменения в маршрутах");
		КонецЕсли; 
	

КонецПроцедуры
//---АК BELN 2018.12.17 

Процедура ОбновлениеВариантовАутсорс() Экспорт
	
	Если НачалоДня(ТекущаяДата())<>НачалоДня(Константы.ДатаПроверкиВариантовАутсорс.Получить()) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Константы.ДатаПроверкиВариантовАутсорс.Установить(НачалоДня(ТекущаяДата()));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка,
		|	МАКСИМУМ(ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ втРег
		|ИЗ
		|	РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СрезПоследних КАК ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка,
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ВариантОбеспеченияПерсоналом
		|ПОМЕСТИТЬ втСтарыеВарианты
		|ИЗ
		|	РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СрезПоследних КАК ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРег КАК втРег
		|		ПО ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка = втРег.ТорговаяТочка
		|			И ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ДатаНачала = втРег.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК ТТ,
		|	втСтарыеВарианты.ВариантОбеспеченияПерсоналом,
		|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки
		|ИЗ
		|	втСтарыеВарианты КАК втСтарыеВарианты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО втСтарыеВарианты.ТорговаяТочка = СтруктурныеЕдиницы.Ссылка
		|			И (СтруктурныеЕдиницы.СтатусТорговойТочки = &СтатусТорговойТочки)
		|			И (СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = &ТипСтруктурнойЕдиницы)
		|			И (СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("СтатусТорговойТочки", Перечисления.СтатусыТорговыхТочек.Открыт);
		Запрос.УстановитьПараметр("ТипСтруктурнойЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Эл=Справочники.ВариантыОбеспеченияПерсоналомАутсорсинг.НайтиПоНаименованию("Удаленные");
		Если Не ЗначениеЗаполнено(Эл) Тогда
			Об=Справочники.ВариантыОбеспеченияПерсоналомАутсорсинг.СоздатьГруппу();
			Об.Наименование="Удаленные";
			Об.Записать();
			Эл=Об.Ссылка;
		КонецЕсли; 
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Об=ВыборкаДетальныеЗаписи.ВариантОбеспеченияПерсоналом.ПолучитьОбъект();
			Об.Автоматически=истина;
			Об.ПометкаУдаления=истина;
			Об.Родитель=Эл;
			Об.Записать();
		Конеццикла;	 
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка,
		|	МАКСИМУМ(ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ втРег
		|ИЗ
		|	РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СрезПоследних КАК ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка,
		|	ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ВариантОбеспеченияПерсоналом
		|ПОМЕСТИТЬ втСтарыеВарианты
		|ИЗ
		|	РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СрезПоследних КАК ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРег КАК втРег
		|		ПО ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ТорговаяТочка = втРег.ТорговаяТочка
		|			И ВариантыОбеспеченияТТПерсоналомАутсорсингСрезПоследних.ДатаНачала = втРег.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК ТТ,
		|	втСтарыеВарианты.ВариантОбеспеченияПерсоналом,
		|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтарыеВарианты КАК втСтарыеВарианты
		|		ПО (втСтарыеВарианты.ТорговаяТочка = СтруктурныеЕдиницы.Ссылка)
		|			И (втСтарыеВарианты.ВариантОбеспеченияПерсоналом.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	втСтарыеВарианты.ВариантОбеспеченияПерсоналом ЕСТЬ NULL 
		|	И СтруктурныеЕдиницы.СтатусТорговойТочки = &СтатусТорговойТочки
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = &ТипСтруктурнойЕдиницы
		|	И СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТочки";
		
		Запрос.УстановитьПараметр("СтатусТорговойТочки", Перечисления.СтатусыТорговыхТочек.Открыт);
		Запрос.УстановитьПараметр("ТипСтруктурнойЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НовЭл=Справочники.ВариантыОбеспеченияПерсоналомАутсорсинг.СоздатьЭлемент();
			НовЭл.Автоматически=истина;
			НовЭл.Наименование=Строка(ВыборкаДетальныеЗаписи.ТТ);
			НовЭл.Записать();
			Мен=РегистрыСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СоздатьМенеджерЗаписи();
			Мен.ДатаНачала=ТекущаяДата();
			Мен.Период=ТекущаяДата();
			Мен.ВариантОбеспеченияПерсоналом=НовЭл.Ссылка;
			Мен.ТорговаяТочка=ВыборкаДетальныеЗаписи.ТТ;
			Мен.Записать();
		КонецЦикла;
		
		
		
	КонецЕсли; 
	
КонецПроцедуры


Процедура ЗаполнитьСуммуСервер(Объект)
	
	Объект.Сумма = Объект.ТорговыеТочки.Итог("Стоимость");
	
	РассчитатьСуммуНДС(Объект);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДС(Объект)
	
	мСуммаВключаетНДС = (Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Объект.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Объект.Сумма,
	Истина, мСуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

Процедура СделатьРассылкуООбОтсутствииОтветаПроверокКачества() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"				, ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаПрикрепления3"	, НачалоДня(ТекущаяДата()) - 3*24*60*60);
	Запрос.УстановитьПараметр("ДатаПрикрепления5"	, НачалоДня(ТекущаяДата()) - 5*24*60*60);
	Запрос.УстановитьПараметр("ДатаПрикрепления7"	, НачалоДня(ТекущаяДата()) - 7*24*60*60);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроверкаКачестваТоваров.Ссылка,
	|	ПроверкаКачестваТоваров.Ссылка.ХарактеристикаНоменклатуры,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель
	|ПОМЕСТИТЬ втДоки
	|ИЗ
	|	Документ.ПроверкаКачестваТоваров.СоставПоказателей КАК ПроверкаКачестваТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ПроверкаКачестваТоваров.Ссылка.ХарактеристикаНоменклатуры)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ПроверкаКачестваТоваров.Ссылка.РассылкаОбОтсутствииОтветаПоставщика <> 7
	|	И (НАЧАЛОПЕРИОДА(ПроверкаКачестваТоваров.Ссылка.ДатаПрикрепления, ДЕНЬ) = &ДатаПрикрепления3
	|				И ПроверкаКачестваТоваров.Ссылка.РассылкаОбОтсутствииОтветаПоставщика = 0
	|			ИЛИ НАЧАЛОПЕРИОДА(ПроверкаКачестваТоваров.Ссылка.ДатаПрикрепления, ДЕНЬ) = &ДатаПрикрепления5
	|				И ПроверкаКачестваТоваров.Ссылка.РассылкаОбОтсутствииОтветаПоставщика = 3
	|			ИЛИ НАЧАЛОПЕРИОДА(ПроверкаКачестваТоваров.Ссылка.ДатаПрикрепления, ДЕНЬ) = &ДатаПрикрепления7
	|				И ПроверкаКачестваТоваров.Ссылка.РассылкаОбОтсутствииОтветаПоставщика = 5)
	|	И ПроверкаКачестваТоваров.Ссылка.Проведен
	|	И (ВЫРАЗИТЬ(ПроверкаКачестваТоваров.Ссылка.ИмяФайлаОтвета КАК СТРОКА(100))) = """"
	|	И (ВЫРАЗИТЬ(ПроверкаКачестваТоваров.Ссылка.Ответ КАК СТРОКА(100))) = """"
	|	И (ПроверкаКачестваТоваров.Маркер = ЗНАЧЕНИЕ(Перечисление.МаркерыДляАудита.Желтый)
	|			ИЛИ ПроверкаКачестваТоваров.Маркер = ЗНАЧЕНИЕ(Перечисление.МаркерыДляАудита.Красный))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверкаКачестваТоваров.Ссылка,
	|	ПроверкаКачестваТоваров.Ссылка.ХарактеристикаНоменклатуры,
	|	ЗначенияСвойствОбъектов.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	1 КАК Приоритет,
	|	втДоки.Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоки КАК втДоки
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = втДоки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	2,
	|	втДоки.Ссылка
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоки КАК втДоки
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = втДоки.Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	1 КАК Приоритет,
	|	втДоки.Ссылка
	|ПОМЕСТИТЬ вт1
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоки КАК втДоки
	|			ПО СоответствиеОбъектРольСрезПоследних1.Объект = втДоки.ХарактеристикаНоменклатуры
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	2,
	|	втДоки.Ссылка
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоки КАК втДоки
	|			ПО СоответствиеОбъектРольСрезПоследних1.Объект = втДоки.Производитель
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(вт.Приоритет) КАК Приоритет,
	|	вт.Ссылка
	|ПОМЕСТИТЬ втМин
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(вт.Приоритет) КАК Приоритет,
	|	вт.Ссылка
	|ПОМЕСТИТЬ втМин1
	|ИЗ
	|	вт1 КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.РольПользователя,
	|	вт.Ссылка КАК Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	вт.Ссылка.Номенклатура КАК Номенклатура,
	|	вт.Ссылка.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	вт.Ссылка.РассылкаОбОтсутствииОтветаПоставщика КАК РассылкаОбОтсутствииОтветаПоставщика
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин КАК втМин
	|		ПО вт.Приоритет = втМин.Приоритет
	|			И вт.Ссылка = втМин.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО вт.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РолиПользователей.Ссылка,
	|	вт.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	вт.Ссылка.Номенклатура,
	|	вт.Ссылка.ХарактеристикаНоменклатуры,
	|	вт.Ссылка.РассылкаОбОтсутствииОтветаПоставщика
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин КАК втМин
	|				ПО вт.Приоритет = втМин.Приоритет
	|					И вт.Ссылка = втМин.Ссылка
	|			ПО РолиПользователей.Родитель = вт.РольПользователя
	|				И (РолиПользователей.ПометкаУдаления = ЛОЖЬ)
	|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователей.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт1.РольПользователя,
	|	вт1.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	вт1.Ссылка.Номенклатура,
	|	вт1.Ссылка.ХарактеристикаНоменклатуры,
	|	вт1.Ссылка.РассылкаОбОтсутствииОтветаПоставщика
	|ИЗ
	|	вт1 КАК вт1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин1 КАК втМин1
	|		ПО вт1.Приоритет = втМин1.Приоритет
	|			И вт1.Ссылка = втМин1.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО вт1.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	МассивАдресов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Выб = ВыборкаДетальныеЗаписи.Выбрать();
		//МассивАдресов = Новый Массив;
		Пока Выб.Следующий() Цикл
			//Для каждого Стр Из Выб.РольПользователя.СоставРоли Цикл
			Если МассивАдресов.Найти(Выб.Сотрудник)=Неопределено Тогда
				МассивАдресов.Добавить(Выб.Сотрудник);
			КонецЕсли; 
			//КонецЦикла; 
		КонецЦикла;
	КонецЦикла;
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Запрос.УстановитьПараметр("Объект"	, МассивАдресов);
	Запрос.УстановитьПараметр("Тип"		, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И (КонтактнаяИнформация.Тип = &Тип)";
	Результат = Запрос.Выполнить();
	СоотЭлПочта=Новый Соответствие;
	ВыборкаДетальныеЗаписи1 = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи1.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СоотЭлПочта.Вставить(ВыборкаДетальныеЗаписи1.Объект,ВыборкаДетальныеЗаписи1.Представление);
		КонецЕсли; 
	КонецЦикла;
	
	
	//
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Выб = ВыборкаДетальныеЗаписи.Выбрать();
		МассивАдресов = Новый Массив;
		Кому = Новый СписокЗначений;
		Пока Выб.Следующий() Цикл
			//Для каждого Стр Из Выб.Сотрудник Цикл
			//Если МассивАдресов.Найти(Выб.Сотрудник)=Неопределено Тогда
			//	МассивАдресов.Добавить(Выб.Сотрудник);
			ЭлПочта=СоотЭлПочта.Получить(Выб.Сотрудник);
			Если ЗначениеЗаполнено(ЭлПочта) Тогда
				Кому.Добавить(ЭлПочта);
			КонецЕсли; 
			//КонецЕсли; 
			//КонецЦикла; 
		КонецЦикла;
		СтруктураНовогоПисьма = Новый Структура;
		СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
		//
		//Запрос.УстановитьПараметр("Объект", МассивАдресов);
		//Запрос.Текст =                                                                                   
		//"ВЫБРАТЬ
		//|	КонтактнаяИнформация.Представление,
		//|	КонтактнаяИнформация.Тип,
		//|	КонтактнаяИнформация.Объект
		//|ИЗ
		//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		//|ГДЕ
		//|	КонтактнаяИнформация.Объект В(&Объект)
		//|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		//|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))";
		//
		//Результат = Запрос.Выполнить();
		
		//ВыборкаДетальныеЗаписи1 = Результат.Выбрать();
		//Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
		//	Если ВыборкаДетальныеЗаписи1.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		//	КонецЕсли; 
		//КонецЦикла;
		
		Если (ВыборкаДетальныеЗаписи.РассылкаОбОтсутствииОтветаПоставщика=5) Тогда
			Кому.Добавить("product_1@vkusvill.ru");
		КонецЕсли; 
		СтруктураНовогоПисьма.Вставить("Кому", Кому);
		СтруктураНовогоПисьма.Вставить("Тема", "Нет ответа поставщика по нарушению при проверке " + ВыборкаДетальныеЗаписи.Номенклатура+" "+ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры+" "+ВыборкаДетальныеЗаписи.Ссылка );
		СтруктураНовогоПисьма.Вставить("Тело", "Нет ответа поставщика по нарушению при проверке " + ВыборкаДетальныеЗаписи.Номенклатура+" "+ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры+" "+ВыборкаДетальныеЗаписи.Ссылка );
		
		СтрКому = "";
		Для каждого Эл Из Кому Цикл
			СтрКому = СтрКому + Эл.Значение + "; ";
		КонецЦикла; 
		Попытка
			ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
			Сообщить("Отправлено письмо с информацией на " + СтрКому);
			ОбъектДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если ВыборкаДетальныеЗаписи.РассылкаОбОтсутствииОтветаПоставщика = 0 Тогда
				ОбъектДок.РассылкаОбОтсутствииОтветаПоставщика = 3;
			ИначеЕсли ВыборкаДетальныеЗаписи.РассылкаОбОтсутствииОтветаПоставщика = 3 Тогда
				ОбъектДок.РассылкаОбОтсутствииОтветаПоставщика = 5;
			Иначе
				ОбъектДок.РассылкаОбОтсутствииОтветаПоставщика = 7;
			КонецЕсли;
			ОбъектДок.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма, ФлХТМЛ = Ложь)  
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	СпАдресов = Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение, ";");
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТабДок=СтруктураНовогоПисьма.Тело;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = 	ТабДок;
	Если Не ФлХТМЛ Тогда
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе	
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	КонецЕсли; 
	Если СтруктураНовогоПисьма.Свойство("ТабДок") Тогда
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = 	СтруктураНовогоПисьма.ТабДок;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
	КонецЕсли; 	
	
	Если СтруктураНовогоПисьма.Свойство("ФайлВложение") Тогда //+++АК LAGP ИП-00017361 Не стал использовать закомменченный участок кода с вложением, если его открыть, то начнут работать те вложения тоже
		Письмо.Вложения.Добавить(СтруктураНовогоПисьма.ФайлВложение);		 
	КонецЕсли;	 
		 
	//Для каждого Эл1 Из СтруктураНовогоПисьма.СписокФайловВложений Цикл //+++АК LAGP ИП-00017361 Если начнёте задействовать этот функционал, просьба - прицепить то что выше (ИП-00017361), к своему (или дать мне знать, чтобы сам прицепил).
	//	Письмо.Вложения.Добавить(Эл1.Значение.ИмяФайла);
	//КонецЦикла;
	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес.Значение;
	КонецЦикла;
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ЗаполнитьДатуОткрытия() Экспорт
	
	Если НачалоДня(ТекущаяДата()) <> НачалоДня(Константы.ДатаЗаполненияДатыОткрытия.Получить()) И Час(ТекущаяДата())>2 Тогда
		
		Константы.ДатаЗаполненияДатыОткрытия.Установить(НачалоДня(ТекущаяДата()));
		
		Запрос = Новый Запрос;
		Дата2 = ТекущаяДата();
		Запрос.УстановитьПараметр("Дата1", НачалоДня(Дата2 - 3*24*60*60));
		Запрос.УстановитьПараметр("Дата2", Дата2);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛистУчета.ТорговаяТочка,
		|	ЛистУчета.Дата
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И НЕ ЛистУчета.ТорговаяТочка.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.ТорговаяТочка,
		|	МИНИМУМ(вт.Дата) КАК Дата
		|ПОМЕСТИТЬ втТТ
		|ИЗ
		|	вт КАК вт
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.ТорговаяТочка
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(вт.Дата) МЕЖДУ &Дата1 И &Дата2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТТ.ТорговаяТочка,
		|	втТТ.Дата,
		|	СтруктурныеЕдиницы.ДатаОткрытия
		|ИЗ
		|	втТТ КАК втТТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО втТТ.ТорговаяТочка = СтруктурныеЕдиницы.Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НачалоДня(Выборка.ДатаОткрытия) <> НачалоДня(Выборка.Дата) Тогда
				ОбъектМагазина = Выборка.ТорговаяТочка.ПолучитьОбъект();
				ОбъектМагазина.ДатаОткрытия = НачалоДня(Выборка.Дата);
				ОбъектМагазина.Записать();
			КонецЕсли; 
			Сообщить("" + Выборка.ТорговаяТочка + " " + Выборка.Дата);	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнениеПотерянных(ТекДата)
	// Вставить содержимое обработчика.
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат;
	Иначе           
	КонецЕсли;
	СтрЗапрос =	"create table #cheki ( ShopNo int, chekov decimal(15,3))
	|
	|
	|insert into #cheki( ShopNo , chekov)
	|	select ShopNo, Count(Distinct CheckUID) chekov 
	|from SMS_UNION..Checks as cl with(nolock)
	|where OperationType=1  and CloseDate between "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+" and "+ВнешниеДанные.ФорматПоля(КонецДня(ТекДата))+"  	
	|group by ShopNo
	|union all
	|select ShopNo, Count(Distinct CheckUID) 
	|from SMS_izbenka..Checks as cl with(nolock)
	|where OperationType=1  and CloseDate between "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+" and "+ВнешниеДанные.ФорматПоля(КонецДня(ТекДата))+"
	|group by ShopNo
	|--------------------
	
	//|create table #lost_sales_max ( id_tov_ls int, id_tt_ls int, date_ls date)
	//|
	//|
	//|insert into #lost_sales_max(id_tov_ls, id_tt_ls, date_ls)
	//|	select lost_sales.id_tov_ls, lost_sales.id_tt_ls, max(lost_sales.date_ls) date_ls from M2..lost_sales lost_sales with(nolock)
	//|where lost_sales.date_ls<="+ВнешниеДанные.ФорматПоля(КонецДня(ТекДата))+ " and lost_sales.chastota>0 
	//| group by lost_sales.id_tov_ls, lost_sales.id_tt_ls
	//|CREATE INDEX index_lost_sales_max
	//|ON #lost_sales_max(id_tov_ls, id_tt_ls, date_ls)
	|--------------------
	|	create table #lost_sales ( id_tov_ls int, id_tt_ls int, chastota  decimal(15,10))
	|
	|
	|insert into #lost_sales(id_tov_ls, id_tt_ls, chastota )
	|	select ls.id_tov_ls, ls.id_tt_ls,  ls.chastota from M2..lost_sales ls with(nolock) where ls.date_ls="+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+ " and ls.chastota>0
	//|	inner join #lost_sales_max lost_sales_max on lost_sales_max.id_tov_ls=ls.id_tov_ls and lost_sales_max.id_tt_ls=ls.id_tt_ls and lost_sales_max.date_ls=ls.date_ls
	|CREATE INDEX index_lost_sales
	|ON #lost_sales(id_tov_ls, id_tt_ls)
	|--------------------
	|	create table #lost_sales_baza ( id_tov_ls int, id_tt_ls int)
	|insert into #lost_sales_baza(id_tov_ls, id_tt_ls )
	|
	|Select
	|	c.id_tov_ls,
	|	p.id_tt_ls
	|From (Select
	|			ls.id_tov_ls,
	|			SUM([sales_fact]) / SUM(ls.checks_1 + case when ls.konost_ls >= 0.1 
	|														then ls.checks_2 
	|														else 0 
	|													end
	|									) as c
	|		from M2..Lost_sales (nolock) as ls
	|		where
	|			date_ls = {d" + ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата), Истина) + "} 
	|		group by
	|			ls.id_tov_ls
	|		having SUM([sales_fact]) > 0
	|	) as c
	|	inner join (select top 1 with ties id_tt_ls,
	|										ls.checks_1 + ls.checks_2 p
	|				from [M2].[dbo].[Lost_sales] (nolock) ls
	|					inner join [M2].[dbo].[tt] m
	|						on m.id_TT = ls.id_tt_ls
	|				where date_ls = {d" + ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата), Истина) + "} 
	|					and    m.is_active = 1
	|					and m.tt_format = 2    
	|				order by row_number() over (PARTITION BY id_tt_ls ORDER BY id_tt_ls)
	|				) p
	|		on 1 = 1
	|	left join (select id_tov_ls,
	|					id_tt_ls,
	|					[sales_fact] + ls.konost_ls + is_matrix n    
	|				from [M2].[dbo].[Lost_sales] (nolock) ls
	|				where ls.date_ls = {d" + ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата), Истина) + "} 
	|				) ls
	|		on ls.id_tov_ls = c.id_tov_ls 
	|			and ls.id_tt_ls = p.id_tt_ls
	|where
	|	ISNULL(ls.n, 0) <= 0.1
	
	//|Select Spr_tov._fld760 id_tov_ls, Spr_tt._fld758 id_tt_ls 
	//|from IzbenkaFin.dbo._Inforg2693 as lost_sales (nolock) 
	//|	 Inner Join IzbenkaFin.dbo._Reference42 as Spr_tt (nolock) on Spr_tt._idrref=lost_sales._fld2695rref
	//| and DateAdd(Year, -2000,lost_sales._fld2694) = "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+" 
	//|	 Inner Join IzbenkaFin.dbo._Reference29 as Spr_tov (nolock) on Spr_tov._idrref=lost_sales._fld2696rref
	//| and DateAdd(Year, -2000,lost_sales._fld2694) = "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+" 
	//|group by Spr_tov._fld760, Spr_tt._fld758
	
	|CREATE INDEX index_lost_sales_baza
	|ON #lost_sales_baza(id_tov_ls, id_tt_ls)
	|----------------------------------
	|create table #chekitt (id_tt int, chekov decimal(15,3))
	|
	|insert into #chekitt (id_tt, chekov)
	|Select Spr_tt._fld758 id_tt,cheki.chekov 
	|from #cheki cheki
	|inner join IzbenkaFin.dbo._Reference42 as Spr_tt (nolock)
	|on cheki.ShopNo=Spr_tt._fld2756
	|----------------------------------
	|	create table #lost_sales_all ( id_tov_ls int, id_tt_ls int, lost decimal(15,3))
	|insert into #lost_sales_all(id_tov_ls, id_tt_ls, lost)
	
	
	| Select 
	//|	UINTT._Fld4946 as TTUID
	//|	,UINTov._Fld4946 as TovarUID,
	|analogi.id_tov_ls, analogi.id_tt_ls, isnull(lost_sales.chastota,0)*isnull(cheki.chekov,0) lost  
	|from    #lost_sales_baza analogi 
	|Left join #lost_sales lost_sales on lost_sales.id_tov_ls=analogi.id_tov_ls and lost_sales.id_tt_ls=analogi.id_tt_ls
	|Left Join #chekitt cheki on cheki.id_tt=lost_sales.id_tt_ls
	//|inner JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON lost_sales.id_tt_ls = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
	//|inner JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON lost_sales.id_tov_ls = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|CREATE INDEX index_lost_sales_all
	|ON #lost_sales_all(id_tov_ls, id_tt_ls)
	|----------------------------------
	|	create table #lost_sales_nol ( id_tov_ls int)
	|insert into #lost_sales_nol(id_tov_ls)
	| Select 
	|lost_sales_all.id_tov_ls  
	|from    #lost_sales_all lost_sales_all 
	|where	lost_sales_all.lost=0
	|group by lost_sales_all.id_tov_ls
	|----------------------------------
	|	create table #AssortMax (id_tt int, id_tov int, date_ls date)
	|insert into #AssortMax(id_tt, id_tov, date_ls)
	|Select
	|	TovAss.id_tt_1C as id_tt,
	|	TovAss.id_tov_1C as id_tov,
	|	Max(Convert(Date, DateAdd(Year, -2000, TovAss._Period))) as date_ls
	|From IzbenkaFin.._InfoRg3957 as TovAss (nolock)
	|inner join #lost_sales_nol as lost_sales_nol (nolock) on  lost_sales_nol.id_tov_ls=TovAss.id_tov_1C 
	|  and Year(TovAss._Period) > 4000    and Convert(Datetime, DateAdd(Year, -2000, TovAss._Period))<= "+ВнешниеДанные.ФорматПоля(КонецДня(ТекДата))+"
	|group by TovAss.id_tt_1C, TovAss.id_tov_1C
	|CREATE INDEX index_AssortMax
	|ON #AssortMax(id_tov, id_tt,date_ls)
	|-----------------------------------------------
	|	create table #Assort (id_tt int, id_tov int,ch int)
	|insert into #Assort(id_tt, id_tov,ch)
	|Select
	|	TovAss.id_tt_1C as id_tt,
	|	TovAss.id_tov_1C as id_tov,0 ch
	|From IzbenkaFin.._InfoRg3957 as TovAss (nolock)
	|inner join #AssortMax AssortMax on  Convert(Date, DateAdd(Year, -2000, TovAss._Period))=AssortMax.date_ls and AssortMax.id_tt=TovAss.id_tt_1C and AssortMax.id_tov=TovAss.id_tov_1C
	|Where 
	|   TovAss._Fld3961="+ВнешниеДанные.ФорматПоля(Ложь)+"
	|CREATE INDEX index_Assort
	|ON #Assort(id_tov, id_tt)
	|-----------------------------------------------
	|	create table #TTAssort (id_tt int)
	|insert into #TTAssort(id_tt)
	|Select
	|	id_tt
	|From #Assort Assort
	|group by id_tt
	|-----------------------------------------------
	|	create table #TTVyr (id_tt int,Summa decimal(15,3))
	|insert into #TTVyr(id_tt,Summa)
	|Select
	|	dtt.id_tt,Sum(dtt.summa) summa
	|from Reports..dtt dtt (nolock)
	|inner join #TTAssort TTAssort on TTAssort.id_tt=dtt.id_tt
	|where DTT.date_tt between  "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+" and "+ВнешниеДанные.ФорматПоля(КонецДня(ТекДата))+"
	|group by dtt.id_tt
	|-----------------------------------------------
	|	create table #TovSales (id_tov int,kol decimal(15,3),summa decimal(15,3),price decimal(15,3))
	|insert into #TovSales(id_tov,kol,summa,price)
	|Select
	|	dtt.id_tov,Sum(dtt.quantity-dtt.discount50_qty) kol,Sum(TTVyr.Summa) Summa,Max(dtt.price) price
	|from Reports..dtt dtt (nolock)
	|inner join #Assort Assort on Assort.id_tt=dtt.id_tt and Assort.id_tov=dtt.id_tov
	|and DTT.date_tt between  "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+" and "+ВнешниеДанные.ФорматПоля(КонецДня(ТекДата))+"
	|inner join #TTVyr TTVyr  on TTVyr.id_tt=dtt.id_tt
	|and DTT.date_tt between  "+ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата))+" and "+ВнешниеДанные.ФорматПоля(КонецДня(ТекДата))+"
	|group by dtt.id_tov
	|-----------------------------------------------
	|	create table #lost_sales_itog (id_tov_ls int, id_tt_ls int, lost decimal(15,3))
	|insert into #lost_sales_itog (id_tov_ls, id_tt_ls, lost)
	|Select Assort.id_tov,Assort.id_tt,case when TovSales.Summa=0 Then 0 else TovSales.kol*TTVyr.Summa/(TovSales.Summa) end lost
	|From #Assort Assort
	|inner join #TovSales TovSales on Assort.id_tov=TovSales.id_tov 
	|inner join #TTVyr TTVyr  on TTVyr.id_tt=Assort.id_tt
	|union all
	| Select 
	|lost_sales_all.id_tov_ls,lost_sales_all.id_tt_ls, lost_sales_all.lost  
	|from    #lost_sales_all lost_sales_all 
	|left join #Assort Assort on Assort.id_tov=lost_sales_all.id_tov_ls and Assort.id_tt=lost_sales_all.id_tt_ls
	|where	lost_sales_all.lost>0 and Assort.ch is null
	|-----------------------------------------------
	|select
	|	UINTT._Fld4946 as TTUID
	|	,UINTov._Fld4946 as TovarUID,
	|lost_sales_itog.id_tov_ls, lost_sales_itog.id_tt_ls, lost_sales_itog.lost  
	|from    #lost_sales_itog lost_sales_itog 
	|inner JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON lost_sales_itog.id_tt_ls = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
	|inner JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON lost_sales_itog.id_tov_ls = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|";
	
	
	
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("Номенклатура");
	ТабДанные.Колонки.Добавить("ТТ");
	ТабДанные.Колонки.Добавить("Потерянные");
	
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	
	
	//Попытка
	rs.MoveFirst();
	//
	Сч=0;
	Пока НЕ rs.EOF() Цикл
		Сч=Сч+1;
		Если Сч=100 Тогда
			//прервать;
		КонецЕсли;
		СтрокаДоб = РегистрыСведений.ПотерянныеПродажиПоТочкам.СоздатьМенеджерЗаписи();

		Если Rs.Fields("TovarUID").Value <> NULL Тогда
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
		КонецЕсли;
		Если Rs.Fields("TTUID").Value <> NULL Тогда
			СтрокаДоб.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
		КонецЕсли;
		СтрокаДоб.Количество = Rs.Fields("lost").Value;
		СтрокаДоб.Дата			= НачалоДня(ТекДата);
		СтрокаДоб.Записать();
		
		rs.MoveNext();
	КонецЦикла;
	//Исключение
	//КонецПопытки;
	

КонецПроцедуры
 

Процедура ЗаполнениеПотерянных(ТекДата)
	
	// Вставить содержимое обработчика.
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат;
	Иначе           
	КонецЕсли;
	
	//СтрЗапрос = "SELECT * 
	
	//ТекДата=ТекущаяДата()-24*60*60;
	СтрЗапрос =
	"Select
	|	p.id_tt_ls,
	|	c.id_tov_ls,
	|	c.c * p.p потерянные6
	|From (Select
	|			ls.id_tov_ls,
	|			SUM([sales_fact]) / SUM(ls.checks_1 + case when ls.konost_ls >= 0.1 
	|														then ls.checks_2 
	|														else 0 
	|													end
	|									) as c
	|		from M2..Lost_sales (nolock) as ls
	|		where
	|			date_ls = {d" + ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата), Истина) + "} 
	|		group by
	|			ls.id_tov_ls
	|		having SUM([sales_fact]) > 0
	|	) as c
	|	inner join (select top 1 with ties id_tt_ls,
	|										ls.checks_1 + ls.checks_2 p
	|				from [M2].[dbo].[Lost_sales] (nolock) ls
	|					inner join [M2].[dbo].[tt] m
	|						on m.id_TT = ls.id_tt_ls
	|				where date_ls = {d" + ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата), Истина) + "} 
	|					and    m.is_active = 1
	|					and m.tt_format = 2    
	|				order by row_number() over (PARTITION BY id_tt_ls ORDER BY id_tt_ls)
	|				) p
	|		on 1 = 1
	|	left join (select id_tov_ls,
	|					id_tt_ls,
	|					[sales_fact] + ls.konost_ls + is_matrix n    
	|				from [M2].[dbo].[Lost_sales] (nolock) ls
	|				where ls.date_ls = {d" + ВнешниеДанные.ФорматПоля(НачалоДня(ТекДата), Истина) + "} 
	|				) ls
	|		on ls.id_tov_ls = c.id_tov_ls 
	|			and ls.id_tt_ls = p.id_tt_ls
	|where
	|	ISNULL(ls.n, 0) <= 0.1";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	ТЗНоменклатура = Новый ТаблицаЗначений;
	ТЗНоменклатура.Колонки.Добавить("Номенклатура");
	ТЗНоменклатура.Колонки.Добавить("ТТ");
	ТЗНоменклатура.Колонки.Добавить("СписокЧастот");
	ТЗНоменклатура.Колонки.Добавить("Медиана");
	ТЗНоменклатура.Колонки.Добавить("СуммаТТ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.id_tov,
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура";
	ТЗНом = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.id_TT
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	ТЗТТ = Запрос.Выполнить().Выгрузить();
	
	
	//
	Попытка
		rs.MoveFirst();
		//
		Сч = 0;
		Пока НЕ rs.EOF() Цикл
			
			Сч = Сч + 1;
			Если сч = 1000 Тогда
				//прервать;
			КонецЕсли;
			
			Мас = ТЗНом.НайтиСтроки(Новый Структура("id_tov", Rs.Fields("id_tov_ls").Value));
			Если Мас.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Номенклатура = Мас[0].Ссылка;//Справочники.Номенклатура.НайтиПоРеквизиту("id_tov",Rs.Fields("id_tov_ls").Value);
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Мас = ТЗТТ.НайтиСтроки(Новый Структура("id_TT", Rs.Fields("id_tt_ls").Value));
			Если Мас.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТТ = Мас[0].Ссылка;//Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",Rs.Fields("id_tt_ls").Value);
			Если НЕ ЗначениеЗаполнено(ТТ) Тогда
				Продолжить;
			КонецЕсли;
			
			//
			Мен = РегистрыСведений.ПотерянныеПродажиПоТочкам.СоздатьМенеджерЗаписи();
			Мен.Дата			= НачалоДня(ТекДата);
			Мен.Номенклатура	= Номенклатура;
			Мен.ТорговаяТочка	= ТТ;
			Мен.Количество		= Rs.Fields("потерянные6").Value;
			Мен.Записать();
			
			rs.MoveNext();
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьВАссортимент(ТекДата)
	
	//
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата"	, НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекДата));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПотерянныеПродажиПоТочкам.Номенклатура,
	|	ПотерянныеПродажиПоТочкам.ТорговаяТочка
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	РегистрСведений.ПотерянныеПродажиПоТочкам КАК ПотерянныеПродажиПоТочкам
	|ГДЕ
	|	ПотерянныеПродажиПоТочкам.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, -1) И &КонецДня
	|	И ПотерянныеПродажиПоТочкам.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотерянныеПродажиПоТочкам.Номенклатура,
	|	ПотерянныеПродажиПоТочкам.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Ссылка КАК ЭлементСАналогами,
	|	АналогиНоменклатурыТовары.Номенклатура
	|ПОМЕСТИТЬ втАналоги
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|		ПО втНоменклатура.Номенклатура = АналогиНоменклатурыТовары.Номенклатура
	|ГДЕ
	|	АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	АналогиНоменклатурыТовары.Ссылка,
	|	АналогиНоменклатурыТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Номенклатура КАК Аналог,
	|	втАналоги.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втВсеАналоги
	|ИЗ
	|	втАналоги КАК втАналоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|		ПО втАналоги.ЭлементСАналогами = АналогиНоменклатурыТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	втНоменклатура.ТорговаяТочка,
	|	втВсеАналоги.Аналог
	|ПОМЕСТИТЬ втНоменклатураСАналогами
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеАналоги КАК втВсеАналоги
	|		ПО втНоменклатура.Номенклатура = втВсеАналоги.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСАналогами.Номенклатура,
	|	втНоменклатураСАналогами.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Период
	|ПОМЕСТИТЬ втТоварыВнеАссортимента
	|ИЗ
	|	втНоменклатураСАналогами КАК втНоменклатураСАналогами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&КонецДня, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА втНоменклатураСАналогами.Аналог ЕСТЬ NULL 
	|					ТОГДА втНоменклатураСАналогами.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|				ИНАЧЕ втНоменклатураСАналогами.Аналог = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|			КОНЕЦ)
	|			И втНоменклатураСАналогами.ТорговаяТочка = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	|			И (ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатураСАналогами.Номенклатура,
	|	втНоменклатураСАналогами.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыВнеАссортимента.Номенклатура,
	|	втТоварыВнеАссортимента.ТорговаяТочка,
	|	МАКСИМУМ(втТоварыВнеАссортимента.Период) КАК Период
	|ПОМЕСТИТЬ втТоварыВнеАссортиментаГрупп
	|ИЗ
	|	втТоварыВнеАссортимента КАК втТоварыВнеАссортимента
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварыВнеАссортимента.Номенклатура,
	|	втТоварыВнеАссортимента.ТорговаяТочка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(втТоварыВнеАссортимента.Период) ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыВнеАссортимента.ТорговаяТочка,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0)) КАК КоличествоВУпаковке,
	|	МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках) КАК СрокГодности
	|ПОМЕСТИТЬ втНоменклатураДляДобавления
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТоварыВнеАссортиментаГрупп КАК втТоварыВнеАссортимента
	|		ПО ХарактеристикиНоменклатуры.Владелец = втТоварыВнеАссортимента.Номенклатура
	|ГДЕ
	|	ХарактеристикиНоменклатуры.СрокГодности > 0
	|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
	|	И ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец,
	|	втТоварыВнеАссортимента.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураДляДобавления.ТорговаяТочка,
	|	втНоменклатураДляДобавления.Номенклатура,
	|	втНоменклатураДляДобавления.КоличествоВУпаковке,
	|	СУММА(ЕСТЬNULL(ПотерянныеПродажиПоТочкам.Количество, 0)) КАК КоличествоПотерянных,
	|	втНоменклатураДляДобавления.СрокГодности
	|ПОМЕСТИТЬ ВтПотерянныеЗаПериод
	|ИЗ
	|	втНоменклатураДляДобавления КАК втНоменклатураДляДобавления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПотерянныеПродажиПоТочкам КАК ПотерянныеПродажиПоТочкам
	|		ПО втНоменклатураДляДобавления.Номенклатура = ПотерянныеПродажиПоТочкам.Номенклатура
	|			И втНоменклатураДляДобавления.ТорговаяТочка = ПотерянныеПродажиПоТочкам.ТорговаяТочка
	|			И (ПотерянныеПродажиПоТочкам.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -((ВЫРАЗИТЬ(втНоменклатураДляДобавления.СрокГодности / 2 КАК ЧИСЛО(10, 0))) - 1)))
	|			И (ПотерянныеПродажиПоТочкам.Дата <= &КонецДня)
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатураДляДобавления.ТорговаяТочка,
	|	втНоменклатураДляДобавления.Номенклатура,
	|	втНоменклатураДляДобавления.КоличествоВУпаковке,
	|	втНоменклатураДляДобавления.СрокГодности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПотерянныеЗаПериод.ТорговаяТочка,
	|	ВтПотерянныеЗаПериод.Номенклатура,
	|	ВтПотерянныеЗаПериод.КоличествоВУпаковке,
	|	ВтПотерянныеЗаПериод.КоличествоПотерянных,
	|	ВтПотерянныеЗаПериод.СрокГодности КАК СрокГодностиВДнях
	|ПОМЕСТИТЬ втКДобавлениюТовары
	|ИЗ
	|	ВтПотерянныеЗаПериод КАК ВтПотерянныеЗаПериод
	|ГДЕ
	|	ВтПотерянныеЗаПериод.КоличествоПотерянных > ВтПотерянныеЗаПериод.КоличествоВУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКДобавлениюТовары.ТорговаяТочка,
	|	втКДобавлениюТовары.Номенклатура,
	|	втКДобавлениюТовары.КоличествоВУпаковке,
	|	втКДобавлениюТовары.КоличествоПотерянных,
	|	втКДобавлениюТовары.СрокГодностиВДнях,
	|	ВЫБОР
	|		КОГДА втКДобавлениюТовары.СрокГодностиВДнях = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * втКДобавлениюТовары.КоличествоПотерянных / втКДобавлениюТовары.СрокГодностиВДнях
	|	КОНЕЦ КАК Выигрыш
	|ПОМЕСТИТЬ втВыигрыш
	|ИЗ
	|	втКДобавлениюТовары КАК втКДобавлениюТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&КонецДня,
	|				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							втКДобавлениюТовары.Номенклатура
	|						ИЗ
	|							втКДобавлениюТовары КАК втКДобавлениюТовары)
	|					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО втКДобавлениюТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втВыигрыш.Выигрыш) КАК Выигрыш,
	|	втВыигрыш.ТорговаяТочка
	|ПОМЕСТИТЬ втВыигрышМакс
	|ИЗ
	|	втВыигрыш КАК втВыигрыш
	|
	|СГРУППИРОВАТЬ ПО
	|	втВыигрыш.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыигрыш.ТорговаяТочка,
	|	втВыигрыш.Номенклатура,
	|	втВыигрыш.КоличествоВУпаковке,
	|	втВыигрыш.КоличествоПотерянных,
	|	втВыигрыш.СрокГодностиВДнях,
	|	втВыигрыш.Выигрыш
	|ПОМЕСТИТЬ втИтогБезХар
	|ИЗ
	|	втВыигрыш КАК втВыигрыш
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВыигрышМакс КАК втВыигрышМакс
	//|		ПО втВыигрыш.Выигрыш = втВыигрышМакс.Выигрыш
	//|			И втВыигрыш.ТорговаяТочка = втВыигрышМакс.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтогБезХар.ТорговаяТочка,
	|	втИтогБезХар.Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатуры.Ссылка) КАК КолХар,
	|	втИтогБезХар.КоличествоВУпаковке,
	|	втИтогБезХар.КоличествоПотерянных,
	|	втИтогБезХар.СрокГодностиВДнях,
	|	втИтогБезХар.Выигрыш
	|ПОМЕСТИТЬ втКолХар
	|ИЗ
	|	втИтогБезХар КАК втИтогБезХар
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО втИтогБезХар.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|			И (НЕ ХарактеристикиНоменклатуры.Неактивная)
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтогБезХар.ТорговаяТочка,
	|	втИтогБезХар.Номенклатура,
	|	втИтогБезХар.КоличествоВУпаковке,
	|	втИтогБезХар.КоличествоПотерянных,
	|	втИтогБезХар.СрокГодностиВДнях,
	|	втИтогБезХар.Выигрыш
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКолХар.ТорговаяТочка,
	|	втКолХар.Номенклатура,
	|	втКолХар.КоличествоВУпаковке,
	|	втКолХар.КоличествоПотерянных,
	|	втКолХар.СрокГодностиВДнях,
	|	втКолХар.Выигрыш,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	втКолХар КАК втКолХар
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО втКолХар.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|			И (НЕ ХарактеристикиНоменклатуры.Неактивная)
	|			И (втКолХар.КолХар = 1)
	|ГДЕ
	|	втКолХар.Выигрыш >= 500";
	Результат = Запрос.Выполнить();
	//
	//Запрос.Текст="выбрать* из втТоварыВнеАссортиментаГрупп";
	//Результат = Запрос.Выполнить();
	
	ТЗХарактеристики = Результат.Выгрузить();
	//   ТабличноеПоле1=ТЗХарактеристики;
	//ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"		, ТекущаяДата());
	Запрос.УстановитьПараметр("Кавказский"	, Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад КАК ОсновнойСклад,
	|	СУММА(1) КАК Колво
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ОсновнойСклад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &Кавказский
	|		ИНАЧЕ СтруктурныеЕдиницы.ОсновнойСклад
	|	КОНЕЦ КАК ОсновнойСклад
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабСамыеЧастыеХарки = Результаты[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов 	= Результаты[1].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	
	Для каждого СтрокаТаблицы Из ТЗХарактеристики Цикл
		Мен = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		Мен.Период				= НачалоДня(ТекущаяДата());
		Мен.ДатаСозданияЗаписи	= ТекущаяДата();
		Мен.Номенклатура		= СтрокаТаблицы.Номенклатура;
		Мен.ТорговаяТочка		= СтрокаТаблицы.ТорговаяТочка;
		Мен.ИзПотерянных		= Истина;
		Мен.Характеристика = ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(СтрокаТаблицы.ТорговаяТочка, СтрокаТаблицы.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов);
		Если НЕ ЗначениеЗаполнено(Мен.Характеристика) Тогда
			Мен.Характеристика 	= СтрокаТаблицы.Характеристика;	
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Мен.Характеристика) Тогда
			Продолжить;	
		КонецЕсли; 
		Мен.id_TT				= Мен.ТорговаяТочка.id_TT;
		Попытка
			//Мен.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла; 	
	
КонецПроцедуры

Процедура ДобавитьВАссортиментИзПотерянных() Экспорт
	
	Если НачалоДня(ТекущаяДата()) <> НачалоДня(Константы.ДатаДобавленияВАссортиментПотерянных.Получить()) И Час(ТекущаяДата())>=1 Тогда
		
		Константы.ДатаДобавленияВАссортиментПотерянных.Установить(НачалоДня(ТекущаяДата()));
		
		//ЗаполнениеПотерянных(ТекущаяДата() - 24*60*60);
		ДоЗаполнениеПотерянных(ТекущаяДата() - 24*60*60);
		//+++АК SHEP 2018.06.01 ИП-00018827. Внимание! Таблицу [loyalty].[dbo].[TransactionHistory] нельзя использовать!
		//---АК SHEP 2018.06.01 (не я закомментировал следующую строку)
		//ПолучитьТаблицуКДобавлению(НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПисьмоОбИзмененииСтатусаСервер(Ссылка)
	
	//
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	СтруктураНовогоПисьма.Вставить("Тема", "Осталась неделя до возврата приостановленной  характеристики " + Строка(Ссылка) + " номенклатуры - " + Строка(Ссылка.Владелец) + ".");
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	СписокКому 		= Новый СписокЗначений;
	МассивФизлиц 	= Новый Массив;
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер		, null, Ссылка, null, null,	ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивФизлиц.Добавить(Эл);
	КонецЦикла; 
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству	, null, Ссылка, null, null,	ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивФизлиц.Добавить(Эл);
	КонецЦикла;
	// помощники технолога
	МасФЛ = ДопМодульСервер.ПолучитьПомощниковТехнологаПоХарактеристике(Ссылка);
	Для каждого Эл Из МасФЛ Цикл
		МассивФизлиц.Добавить(Эл);
	КонецЦикла; 
	
	//+++АК SHEP 2017.12.26 ИП-00017537: перенёс сюда (ниже) и добавил условие
	Если МассивФизлиц.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Сезонный вывод"));
		Запрос.Текст =     
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НастройкиПользователей.Пользователь КАК Справочник.Пользователи).ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Право = &Настройка
		|	И НастройкиПользователей.Значение = ИСТИНА";
		ВыборкаПользователей = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПользователей.Следующий() Цикл
			МассивФизлиц.Добавить(ВыборкаПользователей.ФизЛицо);
		КонецЦикла; 
	КонецЕсли;
	//---АК SHEP 2017.12.26
	
	// +++ АК mirv 22.11.2017 [ИП-00016613]
	// Добавим помощников технолога по качеству
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.Ссылка.Родитель,
	|	РолиПользователейТипыРолей.Ссылка.Родитель.Родитель
	|ПОМЕСТИТЬ ПомощникиТехнолога
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли = &ТипРоли
	|	И НЕ РолиПользователейТипыРолей.Ссылка.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	ПомощникиТехнолога КАК ПомощникиТехнолога
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
	|		ПО ПомощникиТехнолога.Ссылка = Сотрудники.Ссылка";
	
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//		МассивФизлиц.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);     Пока ничего не добавляем
	КонецЦикла;  	
	// --- АК mirv  
	
	//
	Запрос.УстановитьПараметр("Объект", МассивФизлиц);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Если СписокКому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
				СписокКому.Добавить(Выборка.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		СписокКому.Добавить("sp@vkusvill.ru");
	КонецЕсли; 
	
	СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
	
	//
	СтруктураНовогоПисьма.Вставить("Тело", "Осталась неделя до возврата приостановленной  характеристики " + Строка(Ссылка) + " номенклатуры - " + Строка(Ссылка.Владелец) + ".");
	
	СтрКому = "";
	Для каждого Эл Из СписокКому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией об измененном статусе " + Ссылка + " на " + СтрКому);
		// +++ АК mirv 28.11.2017 [ИП-00016613]
		ЗаписьЖурналаРегистрации("Рассылка", , , , "Отправлено письмо с информацией об измененном статусе " + Ссылка + " на " + СтрКому); 
		// --- АК mirv  
	Исключение
		Сообщить(ОписаниеОшибки());
		// +++ АК mirv 28.11.2017 [ИП-00016613]
		ЗаписьЖурналаРегистрации("Рассылка", , , , "Не Отправлено письмо с информацией об измененном статусе " + Ссылка + " на " + СтрКому + ":" + ОписаниеОшибки()); 
		// --- АК mirv  
	КонецПопытки; 
	
	//УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
КонецПроцедуры

Процедура ОтправитьПисьмоОбИзмененииСтатусаСерверПовторно(Ссылка, ПоТовару = Ложь)
	
	СтруктураНовогоПисьма 	= Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	
	СписокФайловВложений 	= Новый СписокЗначений;
	//
	//СтруктураНовогоПисьма.Вставить("Тема", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	
	Если Ссылка.Статус = Перечисления.СтатусыХарактеристик.НаВывод Тогда
		
		СтруктураНовогоПисьма.Вставить("Тема", "Выводим " 			+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(Ссылка.ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Ссылка.Владелец) + " " + Строка(Ссылка));
		
	ИначеЕсли Ссылка.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		
		СтруктураНовогоПисьма.Вставить("Тема", "Приостанавливаем " 	+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(Ссылка.ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Ссылка.Владелец) + " " + Строка(Ссылка));
		
	ИначеЕсли Ссылка.Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		
		СтруктураНовогоПисьма.Вставить("Тема", "Оживляем " 			+ ?(ПоТовару, "продукт", "поставщика") +" " +
		Строка(Ссылка.Владелец) + " " + Строка(Ссылка));
		
	КонецЕсли; 	
	
	СтруктураНовогоПисьма.Вставить("Тело", ?(ЗначениеЗаполнено(СтруктураНовогоПисьма.Тема), СтруктураНовогоПисьма.Тема, "") +
	?(Ссылка.Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", Символы.ПС + "Причина - " + Ссылка.Причина));
	
	//СтруктураНовогоПисьма.Вставить("Тело", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка)+Символы.ПС+"Причина - "+Ссылка.Причина);
	//
	//Если Ссылка.Статус= Перечисления.СтатусыХарактеристик.Рабочая Тогда
	//	СтруктураНовогоПисьма.Вставить("Тело","Оживляем"+" "+
	//	Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	//КонецЕсли; 	
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	Кому 			= Новый СписокЗначений;
	МассивАдресов	= Новый Массив;
	
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Сезонный вывод"));
	//Запрос.Текст =     
	//"ВЫБРАТЬ
	//|	ВЫРАЗИТЬ(НастройкиПользователей.Пользователь КАК Справочник.Пользователи).ФизЛицо КАК ФизЛицо
	//|ИЗ
	//|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
	//|ГДЕ
	//|	НастройкиПользователей.Право = &Настройка
	//|	И НастройкиПользователей.Значение = ИСТИНА";
	//ВыборкаПользователей = Запрос.Выполнить().Выбрать();
	//Пока ВыборкаПользователей.Следующий() Цикл
	//	МассивАдресов.Добавить(ВыборкаПользователей.ФизЛицо);
	//КонецЦикла; 
	//
	//МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	//Для каждого Эл Из МасФЛ Цикл
	//	МассивАдресов.Добавить(Эл);
	//КонецЦикла; 
	//
	//МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	//Для каждого Эл Из МасФЛ Цикл
	//	МассивАдресов.Добавить(Эл);
	//КонецЦикла; 
	
	ЗапросР = Новый Запрос;
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Ссылка.Владелец);
	ЗапросР.Текст = 
	"ВЫБРАТЬ
	|	РасчетчикиГруппыНоменклатуры.Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	|ГДЕ
	|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	|	И НЕ РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетчикиГруппыНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка";
	Выборка = ЗапросР.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для каждого Стр Из Выборка.РольПользователя.СоставРоли Цикл
			МассивАдресов.Добавить(Стр.Сотрудник);
		КонецЦикла; 
	КонецЦикла;
	
	Если ПоТовару Тогда
		Мерч = Справочники.РолиПользователей.НайтиПоНаименованию("Мерчендайзинг");
		Если ЗначениеЗаполнено(Мерч) Тогда
			Для каждого Стр Из Мерч.СоставРоли Цикл
				МассивАдресов.Добавить(Стр.Сотрудник);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
				Кому.Добавить(Выборка.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Кому.Добавить("sp@vkusvill.ru");
	КонецЕсли;
	
	Если ПоТовару Тогда
		Кому.Добавить("masher_33@mail.ru");
		Кому.Добавить("gnytovadg@rambler.ru"); 
		Кому.Добавить("dotsenko_89@list.ru");
		Кому.Добавить("poly.stepanyuk@yandex.ru");
		Кому.Добавить("e-tutmina@mail.ru");
		Кому.Добавить("yulya.parfenova.00@bk.ru");
		Кому.Добавить("yuliashev04@mail.ru");
		Кому.Добавить("marie.petrovskaya@yandex.ru");
		Кому.Добавить("irissokolova@yandex.ru"); 
		Кому.Добавить("annyllat@gmail.com");
	КонецЕсли; 
	
	//
	ЗапросР = Новый Запрос;
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Ссылка.Владелец);
	ЗапросР.Текст = 
	"ВЫБРАТЬ
	|	РасчетчикиГруппыНоменклатуры.Ссылка.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	|ГДЕ
	|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	|	И НЕ РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетчикиГруппыНоменклатуры.Ссылка.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты";
	Выборка = ЗапросР.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочты) Тогда
			Кому.Добавить(Выборка.АдресЭлектроннойПочты);
		КонецЕсли; 
	КонецЦикла; 
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//СтруктураНовогоПисьма.Вставить("Тело", "Изменен статус характеристики "+Строка(Ссылка)+" номенклатуры - "+Строка(Владелец)+" на "+Строка(Статус)+".");
	
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией об измененном статусе на " + СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", Ссылка);                                                
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Кому = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(СокрЛП(Выборка.АдресЭлектроннойПочты)) Тогда
			Кому.Добавить(СокрЛП(Выборка.АдресЭлектроннойПочты));
		КонецЕсли; 
	КонецЦикла;
	Кому.Добавить(СокрЛП("reklama@izbenka.msk.ru"));
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", Ссылка); 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель = РолиПользователейСоставРоли.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(, ) КАК ТовАссортимент
	|		ПО (ТовАссортимент.ТорговаяТочка = СоответствиеОбъектРольСрезПоследних.Объект)
	|			И (ТовАссортимент.Характеристика = &Характеристика)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивАдресов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивАдресов.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
				Кому.Добавить(Выборка.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Кому.Добавить("sp@vkusvill.ru");
	КонецЕсли; 
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	//Попытка
	ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
	//Сообщить("Отправлено письмо с информацией об измененном статусе на " + СтрКому);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
	//УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
КонецПроцедуры

Процедура СоздатьНапоминанияОПриостановленныхХарактеристиках() Экспорт
	
	Если НачалоДня(ТекущаяДата()) <> НачалоДня(Константы.ДатаПроверкиХарактеристики.Получить())
		И Час(ТекущаяДата()) > 0  Тогда
		
		ВидЗадачиУточнениеПоЗаявкеНаРасходование 	= Справочники.ВидыЗадачПользователей.УточнениеПоЗаявкеНаРасходование;
		мЗадачаИсполнителя 							= Задачи.ЗадачаИсполнителя;
		ТипРолиБрендМенеджер						= ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер;
		
		//
		Константы.ДатаПроверкиХарактеристики.Установить(НачалоДня(ТекущаяДата()));
		
		//		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОжидаемогоВозврата", НачалоДня((ТекущаяДата() + 7 * 86400)));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата = &ДатаОжидаемогоВозврата
		|	И НЕ ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата = ДАТАВРЕМЯ(1, 1, 1)
		|	И ХарактеристикиНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена)
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОтправитьПисьмоОбИзмененииСтатусаСервер(Выборка.Ссылка);			
		КонецЦикла; 
		//Запрос = Новый Запрос;
		//Запрос.Текст =                                                          
		//	"ВЫБРАТЬ
		//	|	НастройкиПользователей.Пользователь
		//	|ИЗ
		//	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		//	|ГДЕ
		//	|	НастройкиПользователей.Настройка = &Настройка
		//	|	И НастройкиПользователей.Значение = ИСТИНА";
		
		//Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("Напоминание о приостановленных характеристиках"));
		
		//Результат = Запрос.Выполнить();
		
		//ВыборкаПользователей = Результат.Выбрать();
		
		//
		ЗапросПольз = Новый Запрос;
		ЗапросПольз.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.ФизЛицо
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
		ТЗПольз = ЗапросПольз.Выполнить().Выгрузить();
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОжидаемогоВозврата", НачалоДня((ТекущаяДата())));
		 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.Владелец
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата <= &ДатаОжидаемогоВозврата
		|	И НЕ ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата = ДАТАВРЕМЯ(1, 1, 1)
		|	И ХарактеристикиНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена)
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		ВыборкаХарактеристик = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			МасПольз = Новый Массив;
			
			//Сообщить(ВыборкаХарактеристик.ссылка);
			МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ТипРолиБрендМенеджер, null, ВыборкаХарактеристик.Ссылка, null, null, ТекущаяДата(), null, Истина);
			//Для каждого Эл Из МасФЛ Цикл
			//	//Сообщить(Эл);
			//	Польз=Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Эл);
			//	Если ЗначениеЗаполнено(Польз) Тогда
			//		МасПольз.Добавить(Польз);
			//	КонецЕсли; 
			//КонецЦикла;
			
			
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("ФизЛицо", МасФЛ);
			//Запрос.Текст = 
			//"ВЫБРАТЬ
			//|	Пользователи.Ссылка
			//|ИЗ
			//|	Справочник.Пользователи КАК Пользователи
			//|ГДЕ
			//|	Пользователи.ФизЛицо В(&ФизЛицо)";
			//Выборка = Запрос.Выполнить().Выбрать();
			//Пока Выборка.Следующий() Цикл
			//	МасПольз.Добавить(Выборка.Ссылка);
			//КонецЦикла;
			Для каждого ЭлФл Из МасФЛ Цикл
				МасСтр = ТЗПольз.НайтиСтроки(Новый Структура("ФизЛицо", ЭлФл));
				Для каждого СтрПольз Из МасСтр Цикл
					МасПольз.Добавить(СтрПольз.Ссылка);
				КонецЦикла; 
			КонецЦикла; 
			
			
			Для каждого ТекПользователь Из МасПольз Цикл
				обЗадача = мЗадачаИсполнителя.СоздатьЗадачу();
				обЗадача.ВидЗадачи 		= ВидЗадачиУточнениеПоЗаявкеНаРасходование;
				обЗадача.Дата 			= ТекущаяДата();
				обЗадача.ОбъектЗадачи 	= ВыборкаХарактеристик.Ссылка;
				//обЗадача.Ответственный = Ответственный;	
				обЗадача.Исполнитель 	= ТекПользователь;	
				//обЗадача.Организация = пДокумент.Организация;
				обЗадача.Оповещение 	= Истина;
				обЗадача.СрокИсполнения = НачалоДня(ТекущаяДата());
				обЗадача.СрокОповещения = НачалоДня(ТекущаяДата());
				обЗадача.Наименование 	= "Характеристика " + ВыборкаХарактеристик.Ссылка + " позиции " + ВыборкаХарактеристик.Владелец + " - необходимо вернуть статус ""Рабочая""";
				обЗадача.Записать();
			КонецЦикла;
			
		КонецЦикла;
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаВывода", НачалоДня(ТекущаяДата()));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод), ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена))
		|	И ХарактеристикиНоменклатуры.ДатаВывода МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаВывода, ДЕНЬ, -ХарактеристикиНоменклатуры.СрокГодности * ЕСТЬNULL(ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках, 0)) И &ДатаВывода
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбХар = Выборка.Ссылка.ПолучитьОбъект();
			ОбХар.СтатусАктивностиХарактеристики	= Перечисления.СтатусыАктивностиХарактеристик.Выведена;
			ОбХар.Неактивная						= Истина;
			//ОбХар.Статус=Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			//ОбХар.ДатаВывода=Дата(1,1,1);
			//ОбХар.ДатаОжидаемогоВозврата=Дата(1,1,1);
			ОбХар.Записать();
		КонецЦикла;
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОжидаемогоВозврата"	, НачалоДня(ТекущаяДата()));
		Мас = Новый Массив;
		Мас.Добавить(Перечисления.СтатусыАктивностиХарактеристик.Выведена);
		Мас.Добавить(Перечисления.СтатусыАктивностиХарактеристик.Неактивная);
		Мас.Добавить(Перечисления.СтатусыАктивностиХарактеристик.Новая);
		Мас.Добавить(Перечисления.СтатусыАктивностиХарактеристик.Активна);
		Запрос.УстановитьПараметр("Статус"					, Мас);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.Владелец,
		//+++АК SHEP 2018.05.28 ИП-00018185
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.ПричинаПриостановки.ПереходитьВСтатусРабочаяАвтоматически, ЛОЖЬ) КАК ПереходитьВСтатусРабочаяАвтоматически,
		//---АК SHEP 2018.05.28
		|	ХарактеристикиНоменклатуры1.Ссылка КАК Нехватка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры1
		|		ПО ХарактеристикиНоменклатуры.Владелец = ХарактеристикиНоменклатуры1.Владелец
		|			И (ХарактеристикиНоменклатуры1.Наименование = ""Нехватка товара"")
		|ГДЕ
		|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В(&Статус)
		//+++АК SHEP 2018.05.28 ИП-00018185
		|	И ЕСТЬNULL(ХарактеристикиНоменклатуры.ПричинаПриостановки.ПереходитьВСтатусРабочаяАвтоматически, ЛОЖЬ)
		//---АК SHEP 2018.05.28
		|	И ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата = &ДатаОжидаемогоВозврата";
		Выборка = Запрос.Выполнить().Выбрать();
		
		МасНомДляПроверки = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МасНомДляПроверки.Добавить(Выборка.Владелец);	
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель
		|ПОМЕСТИТЬ ВТОсновная
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТОсновная.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
		|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
		|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
		|ГДЕ
		|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
		
		Выб = Запрос.Выполнить().Выбрать();
		МасНомИскл = Новый Массив;
		Пока Выб.Следующий() Цикл
			Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
			Сообщить(Выб.Номенклатура);
			МасНомИскл.Добавить(Выб.Номенклатура);
		КонецЦикла; 
		
		Выборка.Сбросить();
		
		МасНом = Новый Массив;
		мНоменклатураАрхив = Справочники.Номенклатура.НайтиПоНаименованию("Архив");
		Пока Выборка.Следующий() Цикл
			
			Если МасНомИскл.Найти(Выборка.Владелец) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ОбХар = Выборка.Ссылка.ПолучитьОбъект();
			ОбХар.СтатусАктивностиХарактеристики	= Перечисления.СтатусыАктивностиХарактеристик.Новая;
			ОбХар.Статус							= Перечисления.СтатусыХарактеристик.Рабочая;
			ОбХар.ДатаОжидаемогоВозврата			= Дата(1, 1, 1);
			ОбХар.ДатаВывода						= Дата(1, 1, 1);
			ОбХар.Неактивная						= Ложь;
			ОбХар.Причина							= "";
			ОбХар.ПричинаПриостановки				= ПредопределенноеЗначение("Справочник.ПричиныПриостановкиНоменклатуры.ПустаяСсылка"); //+++АК SHEP 2018.05.28 ИП-00018185
			ОбХар.Записать();
			
			Нехватка = Выборка.Нехватка;
			Если ЗначениеЗаполнено(Нехватка) Тогда
				ОбНехватка									= Выборка.Нехватка.ПолучитьОбъект();
				ОбНехватка.СтатусАктивностиХарактеристики	= Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
				ОбНехватка.Неактивная						= Истина;
				ОбНехватка.Записать();
			КонецЕсли;
			
			ОбНом = Выборка.Владелец.ПолучитьОбъект();
			ОбНом.Выведена			= Ложь;
			ОбНом.ПометкаУдаления	= Ложь;
			Если ОбНом.ПринадлежитЭлементу(мНоменклатураАрхив) Тогда
				ОбНом.Родитель 		= ОбНом.ГруппаДоПомещенияВАрхив;
			КонецЕсли;
			ОбНом.Записать();
			
			МасНом.Добавить(Выборка.Владелец);	
		КонецЦикла;
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", МасНом);
		Запрос.УстановитьПараметр("МасНомИскл"	, МасНомИскл);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Планограммы.Ссылка КАК Планограмма,
		|	ВЗ_Выкладка.МестоВыкладки КАК МестоВыкладки,
		|	ВЗ_Выкладка.ТоварВыведен,
		|	Планограммы.НеАктуальная КАК НеАктуальная,
		|	ВЗ_Выкладка.Номенклатура
		|ИЗ
		|	Справочник.Планограммы КАК Планограммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВыкладкаПланограммы.Планограмма КАК Планограмма,
		|			ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки,
		|			ВыкладкаПланограммы.ТоварВыведен КАК ТоварВыведен,
		|			ВыкладкаПланограммы.Номенклатура КАК Номенклатура
		|		ИЗ
		|			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
		|		ГДЕ
		|			ВыкладкаПланограммы.Номенклатура В(&Номенклатура)
		|			И НЕ ВыкладкаПланограммы.Номенклатура В (&МасНомИскл)) КАК ВЗ_Выкладка
		|		ПО Планограммы.Ссылка = ВЗ_Выкладка.Планограмма
		|
		|УПОРЯДОЧИТЬ ПО
		|	НеАктуальная";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбПланограмма = Выборка.Планограмма.ПолучитьОбъект();
			ОбПланограмма.НеАктуальная		= Ложь;
			ОбПланограмма.ПометкаУдаления	= Ложь;
			ОбПланограмма.Записать();
			Мен = РегистрыСведений.ВыкладкаПланограммы.СоздатьМенеджерЗаписи();
			Мен.Планограмма		= Выборка.Планограмма;
			Мен.Номенклатура	= Выборка.Номенклатура;
			Мен.Прочитать();
			Если Мен.Выбран() Тогда
				Мен.ТоварВыведен = Ложь;
				Мен.Записать();
			КонецЕсли; 
		КонецЕсли;
		
		// АК закомментировано 2017.03.24, теперь это в процедуре ОповещениеОСменеСтатусаХарактеристик()
		////
		//Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("ДатаПовторнойРассылки", НачалоДня(ТекущаяДата()));
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ХарактеристикиНоменклатуры.Ссылка,
		//|	ХарактеристикиНоменклатуры.ПоТовару
		//|ИЗ
		//|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		//|ГДЕ
		//|	ХарактеристикиНоменклатуры.ДатаПовторнойРассылки = &ДатаПовторнойРассылки";
		//Выборка = Запрос.Выполнить().Выбрать();
		
		//Пока Выборка.Следующий() Цикл
		//	ОтправитьПисьмоОбИзмененииСтатусаСерверПовторно(Выборка.Ссылка, Выборка.ПоТовару);
		//КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПисьмоОбИзмененииСтатусаПриВыводе(Ссылка, Статус, ДатаВывода, Номенклатура, Причина, ТабДок, ПоТовару = Ложь)
	
	СтруктураНовогоПисьма 	= Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	
	СписокФайловВложений 	= Новый СписокЗначений;
	//
	//СтруктураНовогоПисьма.Вставить("Тема", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	Если ПоТовару Тогда
		СтрХар = "";
		Для каждого Эл Из Ссылка Цикл
			СтрХар = СтрХар + Строка(Эл) + ", ";
		КонецЦикла; 
		СтрХар = Лев(СтрХар, СтрДлина(СтрХар) - 2);
	КонецЕсли; 
	
	
	Если Статус = Перечисления.СтатусыХарактеристик.НаВывод Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Выводим " 			+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Приостанавливаем " 	+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Оживляем " 			+ ?(ПоТовару, "продукт", "поставщика") +" " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	Иначе
		Возврат;
	КонецЕсли; 	
	СтруктураНовогоПисьма.Вставить("Тело", ?(ЗначениеЗаполнено(СтруктураНовогоПисьма.Тема), СтруктураНовогоПисьма.Тема, "") +
	?(Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", Символы.ПС + "Причина - " + Причина));
	
	//СтруктураНовогоПисьма.Вставить("Тело", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка)+Символы.ПС+"Причина - "+Ссылка.Причина);
	//
	//Если Ссылка.Статус= Перечисления.СтатусыХарактеристик.Рабочая Тогда
	//	СтруктураНовогоПисьма.Вставить("Тело","Оживляем"+" "+
	//	Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	//КонецЕсли; 	
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	//СтруктураНовогоПисьма.Вставить("ТабДок", ТабДок);
	Кому 			= Новый СписокЗначений;
	МассивАдресов	= Новый Массив;
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	//+++АК SHEP 2018.01.17 ИП-00017661
	// помощники технолога
	МасФЛ = ДопМодульСервер.ПолучитьПомощниковТехнологаПоХарактеристике(Ссылка);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	//перенёс сюда (ниже) и добавил условие
	Если МассивАдресов.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Сезонный вывод"));
		Запрос.Текст =     
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НастройкиПользователей.Пользователь КАК Справочник.Пользователи).ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Право = &Настройка
		|	И НастройкиПользователей.Значение = ИСТИНА";
		ВыборкаПользователей = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПользователей.Следующий() Цикл
			МассивАдресов.Добавить(ВыборкаПользователей.ФизЛицо);
		КонецЦикла; 
	КонецЕсли;
	//---АК SHEP 2018.01.17
	
	//+++АК SHEP 2018.09.18 ИП-00017814.01: разкомментировал, подправил, переместил выше (сюда)
	ЗапросР = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(Расчетчики.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты, """") КАК АдресЭлектроннойПочты,
		|	ЕСТЬNULL(Расчетчики.ОсновнойПользователь.ФизЛицо, """") КАК ОсновнойПользовательФизЛицо
		|ИЗ
		|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расчетчики КАК Расчетчики
		|		ПО РасчетчикиГруппыНоменклатуры.Ссылка = Расчетчики.Ссылка
		|ГДЕ
		|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
		|	И Расчетчики.ПометкаУдаления = ЛОЖЬ");
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Номенклатура);
	
	РезультатЗапросаР = ЗапросР.Выполнить();
	Если НЕ РезультатЗапросаР.Пустой() Тогда
		
		Выборка = РезультатЗапросаР.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ОсновнойПользовательФизЛицо) Тогда
				МассивАдресов.Добавить(Выборка.ОсновнойПользовательФизЛицо);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочты) Тогда
				МассивКомуВрем = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.АдресЭлектроннойПочты, ";", Истина, Истина);
				Для Каждого ЭлтМассива Из МассивКомуВрем Цикл
					Если Кому.НайтиПоЗначению(ЭлтМассива) = Неопределено Тогда
						Кому.Добавить(ЭлтМассива);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 2018.09.18
	
	//
	//ЗапросР = Новый Запрос;
	//ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Ссылка.Владелец);
	//ЗапросР.Текст = 
	//"ВЫБРАТЬ
	//|	РасчетчикиГруппыНоменклатуры.Ссылка
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	//|ГДЕ
	//|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	//|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РасчетчикиГруппыНоменклатуры.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	//|ИЗ
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка";
	//Выборка = ЗапросР.Выполнить().Выбрать();
	
	//Пока Выборка.Следующий() Цикл
	//	Для каждого Стр Из Выборка.РольПользователя.СоставРоли Цикл
	//		МассивАдресов.Добавить(Стр.Сотрудник);
	//	КонецЦикла; 
	//КонецЦикла;
	//
	//Если ПоТовару Тогда
	//	Мерч = Справочники.РолиПользователей.НайтиПоНаименованию("Мерчендайзинг");
	//	Если ЗначениеЗаполнено(Мерч) Тогда
	//		Для каждого Стр Из Мерч.СоставРоли Цикл
	//			МассивАдресов.Добавить(Стр.Сотрудник);
	//		КонецЦикла; 
	//	КонецЕсли; 
	//КонецЕсли; 
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()>0 Тогда
		Пока Выборка.Следующий() Цикл
			Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
				Кому.Добавить(Выборка.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Кому.Добавить("sp@vkusvill.ru");
	КонецЕсли;
	
	//+++АК SHEP 2018.06.04 ИП-00017814: расчётчикам отправляем с привязкой по номенклатуре (см. выше)
	//Кому.Добавить("izbenka.msv@gmail.com");
	//Кому.Добавить("izbenkaet@gmail.com");
	//Кому.Добавить("izbenka.d.t.v@gmail.com");
	//Кому.Добавить("zakaz01@vkusvill.ru"); 
	//Кому.Добавить("zakaz02@vkusvill.ru");
	//Кому.Добавить("zakaz03@vkusvill.ru");
	//---АК SHEP 2018.06.04
	Кому.Добавить("zakaz04@vkusvill.ru");
	Кому.Добавить("zakaz05@vkusvill.ru");
	Кому.Добавить("zakaz06@vkusvill.ru");
	
	//	Кому.Добавить("marie.petrovskaya@yandex.ru");
	//Если ПоТовару Тогда
	//	Кому.Добавить("masher_33@mail.ru");
	//	Кому.Добавить("gnytovadg@rambler.ru"); 
	//	Кому.Добавить("dotsenko_89@list.ru");
	//	Кому.Добавить("poly.stepanyuk@yandex.ru");
	//	Кому.Добавить("e-tutmina@mail.ru");
	//	Кому.Добавить("yulya.parfenova.00@bk.ru");
	//	Кому.Добавить("yuliashev04@mail.ru");
	//	Кому.Добавить("marie.petrovskaya@yandex.ru");
	//	Кому.Добавить("irissokolova@yandex.ru"); 
	//	Кому.Добавить("annyllat@gmail.com");
	//КонецЕсли; 
	
	ВремФайл = ПолучитьИмяВременногоФайла("htm");
	ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
	
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль = Найти(Текст, "<STYLE");
	КонецБлокаСтиль = Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело = Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстПолный = "<HTML>" + Символы.ПС +ТекстСтиль +Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; CELLPADDING=5; border = 0");
	
	СтруктураНовогоПисьма.Вставить("ТабДок", ТекстПолный);
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//СтруктураНовогоПисьма.Вставить("Тело", "Изменен статус характеристики "+Строка(Ссылка)+" номенклатуры - "+Строка(Владелец)+" на "+Строка(Статус)+".");
	
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

Процедура ОтправитьПисьмоОСменеСтатусаХарактеристик(МассивПолучателей, РезультатЗапроса)
	
	//
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP 	= "10.0.0.30";
	ИПП.ПортSMTP 			= 25;
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	
	//
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель = "no-reply@vkusvill.ru";
	
	Для Каждого АдресПолучателя Из МассивПолучателей Цикл
		Письмо.Получатели.Добавить(АдресПолучателя);
	КонецЦикла;
	
	Письмо.Тема = "Изменение статуса характеристик товара за " + Формат(НачалоДня(ТекущаяДата()) - 1, "ДЛФ=Д");
	
	Письмо.Тексты.Добавить(Письмо.Тема + ":");
	
	ТекстХТМЛ = "<table border='2'><tr align='center'><td>Статус</td><td>Дата вывода</td><td>Объект вывода</td><td>Причина</td><td>Производитель</td><td>Товар</td></tr>";
	
	СтатусНаВывод 			= Перечисления.СтатусыХарактеристик.НаВывод;
	СтатусПриостановлена 	= Перечисления.СтатусыХарактеристик.Приостановлена;
	СтатусРабочая 			= Перечисления.СтатусыХарактеристик.Рабочая;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		Если Выборка.Статус = СтатусНаВывод Тогда
			ТекстСтатус = "Вывод";
		ИначеЕсли Выборка.Статус = СтатусПриостановлена Тогда
			ТекстСтатус = "Приостановка";
		ИначеЕсли Выборка.Статус = СтатусРабочая Тогда
			ТекстСтатус = "Оживление";
		Иначе
			ТекстСтатус = "";
		КонецЕсли;
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + ТекстСтатус + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.ДатаВывода, "ДЛФ=Д") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + ?(Выборка.ПоТовару, "Продукт", "Поставщик") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Причина) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Производитель.Наименование) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Номенклатура.Наименование) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	Письмо.Тексты.Добавить(ТекстХТМЛ, ТипТекстаПочтовогоСообщения.HTML);
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(ИПП);
		Почта.Послать(Письмо);
		Почта.Отключиться();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОповещениеОСменеСтатусаХарактеристик() Экспорт
	
	ТаблицаКомуПоТовару = Новый ТаблицаЗначений;
	ТаблицаКомуПоТовару.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "masher_33@mail.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "gnytovadg@rambler.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "dotsenko_89@list.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "poly.stepanyuk@yandex.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "e-tutmina@mail.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "yulya.parfenova.00@bk.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "yuliashev04@mail.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "marie.petrovskaya@yandex.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "irissokolova@yandex.ru";
	НоваяСтрока = ТаблицаКомуПоТовару.Добавить();
	НоваяСтрока.Адрес = "reklama@izbenka.msk.ru";
	
	
	////////////////////////////////////////////////////////////////////
	// Оповещение расчетчиков
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПовторнойРассылки"		, НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("РольПользователяМерчендайзер", Справочники.РолиПользователей.НайтиПоНаименованию("Мерчендайзинг"));
	Запрос.УстановитьПараметр("ТаблицаКомуПоТовару"			, ТаблицаКомуПоТовару);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура,
	|	СоставРоли.Сотрудник КАК Пользователь,
	|	0 КАК ТолькоПоТовару
	|ПОМЕСТИТЬ ВТПользователи
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК СоставРоли
	|		ПО (СоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	|		ПО (РасчетчикиГруппыНоменклатуры.Ссылка = СоответствиеОбъектРольСрезПоследних.Объект)
	|			И (НЕ РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	СоставРоли.Сотрудник,
	|	1
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК СоставРоли
	|ГДЕ
	|	СоставРоли.Ссылка = &РольПользователяМерчендайзер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПользователи.Номенклатура,
	|	ВТПользователи.ТолькоПоТовару,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(500)) КАК Адрес
	|ПОМЕСТИТЬ ВТАдреса
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователи КАК ВТПользователи
	|		ПО (ВТПользователи.Пользователь = КонтактнаяИнформация.Объект)
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаКомуПоТовару.Адрес КАК СТРОКА(500)) КАК Адрес
	|ПОМЕСТИТЬ ВТАдресаПоТоваруПоУмолчанию
	|ИЗ
	|	&ТаблицаКомуПоТовару КАК ТаблицаКомуПоТовару
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.ДатаВывода КАК ДатаВывода,
	|	ХарактеристикиНоменклатуры.Статус КАК Статус,
	|	ВЫРАЗИТЬ(ХарактеристикиНоменклатуры.Причина КАК СТРОКА(1000)) КАК Причина,
	|	ХарактеристикиНоменклатуры.ПоТовару КАК ПоТовару,
	|	ЕСТЬNULL(ВТЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель,
	|	ЕСТЬNULL(Адреса.Адрес, """") КАК Адрес
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура,
	|			ВЫРАЗИТЬ(РасчетчикиГруппыНоменклатуры.Ссылка.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты КАК СТРОКА(500)) КАК Адрес,
	|			0 КАК ТолькоПоТовару
	|		ИЗ
	|			Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	|		ГДЕ
	|			НЕ РасчетчикиГруппыНоменклатуры.Ссылка.УчетнаяЗаписьЭлектроннойПочты = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
	|			И НЕ РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВТАдреса.Номенклатура,
	|			ВТАдреса.Адрес,
	|			ВТАдреса.ТолькоПоТовару
	|		ИЗ
	|			ВТАдреса КАК ВТАдреса
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|			ВЫРАЗИТЬ(""sp@vkusvill.ru"" КАК СТРОКА(500)),
	|			0
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|			ВТАдресаПоТоваруПоУмолчанию.Адрес,
	|			1
	|		ИЗ
	|			ВТАдресаПоТоваруПоУмолчанию КАК ВТАдресаПоТоваруПоУмолчанию) КАК Адреса
	|		ПО (Адреса.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|				ИЛИ Адреса.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И (Адреса.ТолькоПоТовару = 0
	|				ИЛИ ХарактеристикиНоменклатуры.ПоТовару)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ВТЗначенияСвойствОбъектов
	|		ПО (ВТЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ВТЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.ДатаПовторнойРассылки = &ДатаПовторнойРассылки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец.Наименование,
	|	ХарактеристикиНоменклатуры.Наименование
	|ИТОГИ ПО
	|	Адрес";
	
	ВыборкаПоАдресам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивАдресов = Новый Массив;
	Пока ВыборкаПоАдресам.Следующий() Цикл
		
		ТекАдрес = СокрЛП(ВыборкаПоАдресам.Адрес);
		Если ТекАдрес = "" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПолучателей = Новый Массив;
		ПозТочкиСЗапятой = Найти(ТекАдрес, "; ");
		Если ПозТочкиСЗапятой > 0 Тогда
			Пока ПозТочкиСЗапятой > 0 Цикл
				МассивАдресов.Добавить(Лев(ТекАдрес, ПозТочкиСЗапятой - 1));
				МассивПолучателей.Добавить(Лев(ТекАдрес, ПозТочкиСЗапятой - 1));
				ТекАдрес = Сред(ТекАдрес, ПозТочкиСЗапятой + 2);
				ПозТочкиСЗапятой = Найти(ТекАдрес, "; ");
			КонецЦикла;
		КонецЕсли;
		Если НЕ ТекАдрес = "" Тогда
			МассивАдресов.Добавить(ТекАдрес);
			МассивПолучателей.Добавить(ТекАдрес);
		КонецЕсли;
		
		ОтправитьПисьмоОСменеСтатусаХарактеристик(МассивПолучателей, ВыборкаПоАдресам);
		
	КонецЦикла;
	
	
	////////////////////////////////////////////////////////////////////
	// Оповещение помощников
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПовторнойРассылки", НачалоДня(ТекущаяДата()));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Владелец.Наименование КАК НоменклатураНаименование,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.ДатаВывода КАК ДатаВывода,
	|	ХарактеристикиНоменклатуры.Статус КАК Статус,
	|	ВЫРАЗИТЬ(ХарактеристикиНоменклатуры.Причина КАК СТРОКА(1000)) КАК Причина,
	|	ХарактеристикиНоменклатуры.ПоТовару КАК ПоТовару,
	|	ЕСТЬNULL(ВТЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель
	|ПОМЕСТИТЬ ВТХарактеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ВТЗначенияСвойствОбъектов
	|		ПО (ВТЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ВТЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.ДатаПовторнойРассылки = &ДатаПовторнойРассылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТовАссортимент.Характеристика КАК Характеристика,
	|	РолиПользователейСоставРоли.Сотрудник КАК Пользователь
	|ПОМЕСТИТЬ ВТПользователи
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|				ИЛИ СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель = РолиПользователейСоставРоли.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТХарактеристики.Номенклатура
	|					ИЗ
	|						ВТХарактеристики)) КАК ТовАссортимент
	|		ПО (ТовАссортимент.ТорговаяТочка = СоответствиеОбъектРольСрезПоследних.Объект)
	|			И (НЕ ТовАссортимент.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПользователи.Характеристика,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(500)) КАК Адрес
	|ПОМЕСТИТЬ ВТАдреса
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователи КАК ВТПользователи
	|		ПО (ВТПользователи.Пользователь = КонтактнаяИнформация.Объект)
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТХарактеристики.Характеристика КАК Характеристика,
	|	ВТХарактеристики.Номенклатура КАК Номенклатура,
	|	ВТХарактеристики.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ВТХарактеристики.Наименование КАК Наименование,
	|	ВТХарактеристики.ДатаВывода КАК ДатаВывода,
	|	ВТХарактеристики.Статус КАК Статус,
	|	ВТХарактеристики.Причина КАК Причина,
	|	ВТХарактеристики.ПоТовару КАК ПоТовару,
	|	ВТХарактеристики.Производитель КАК Производитель,
	|	ЕСТЬNULL(Адреса.Адрес, """") КАК Адрес
	|ИЗ
	|	ВТХарактеристики КАК ВТХарактеристики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.Характеристика КАК Характеристика,
	|			ВЫРАЗИТЬ(ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.АдресЭлектроннойПочты КАК СТРОКА(500)) КАК Адрес
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|					,
	|					Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТХарактеристики.Номенклатура
	|						ИЗ
	|							ВТХарактеристики)) КАК ТоварныйАссортиментТочекСрезПоследних
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВТАдреса.Характеристика,
	|			ВТАдреса.Адрес
	|		ИЗ
	|			ВТАдреса КАК ВТАдреса
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|			ВЫРАЗИТЬ(""reklama@izbenka.msk.ru"" КАК СТРОКА(500))) КАК Адреса
	|		ПО (Адреса.Характеристика = ВТХарактеристики.Характеристика
	|				ИЛИ Адреса.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТХарактеристики.НоменклатураНаименование,
	|	ВТХарактеристики.Наименование
	|ИТОГИ ПО
	|	Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТАдреса";
	
	ВыборкаПоАдресам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоАдресам.Следующий() Цикл
		
		ТекАдрес = СокрЛП(ВыборкаПоАдресам.Адрес);
		Если ТекАдрес = "" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПолучателей = Новый Массив;
		ПозТочкиСЗапятой = Найти(ТекАдрес, "; ");
		Если ПозТочкиСЗапятой > 0 Тогда
			Пока ПозТочкиСЗапятой > 0 Цикл
				Если МассивАдресов.Найти(Лев(ТекАдрес, ПозТочкиСЗапятой - 1)) = Неопределено Тогда
					МассивПолучателей.Добавить(Лев(ТекАдрес, ПозТочкиСЗапятой - 1));
				КонецЕсли;
				ТекАдрес = Сред(ТекАдрес, ПозТочкиСЗапятой + 2);
				ПозТочкиСЗапятой = Найти(ТекАдрес, "; ");
			КонецЦикла;
		КонецЕсли;
		Если НЕ ТекАдрес = "" Тогда
			Если МассивАдресов.Найти(ТекАдрес) = Неопределено Тогда
				МассивПолучателей.Добавить(ТекАдрес);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивПолучателей.Количество() > 0 Тогда
			ОтправитьПисьмоОСменеСтатусаХарактеристик(МассивПолучателей, ВыборкаПоАдресам);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеПоказанийДатчиков() Экспорт
	Возврат;
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат;
	Иначе           
	КонецЕсли;
	
	//СтрЗапрос = "SELECT * 
	//			  |  	  FROM IzbenkaFin.._Reference5118 (nolock)";
	СтрЗапрос ="SELECT [id]
	|,[date_add] 
	|,[is_made]
	|,[ShopNo] 
	|,[id_mesto]
	|,[id_sensor]
	|,[Sensor_value]
	|
	|, tt._Description Shop_name
	|,m._Description mest_name
	|FROM (SELECT [id]
	|	,[date_add] 
	|	,[is_made]
	|	,[ShopNo] 
	|	,[id_mesto]
	|	,[id_sensor]
	|	,[Sensor_value]
	|	FROM [M2].[dbo].[TemraSensorData] (nolock) as ts
	|	where is_made=0) as ts 
	|inner join IzbenkaFin.._Reference42 (nolock) as tt on ts.ShopNo=tt._Fld2756
	|inner join IzbenkaFin.._Reference5118 (nolock) as m on ts.id_mesto=m._Fld5280";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	ТЗ=Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Место");
	ТЗ.Колонки.Добавить("Сенсор");
	ТЗ.Колонки.Добавить("Shop_name");
	ТЗ.Колонки.Добавить("mest_name");
	ТЗ.Колонки.Добавить("Ответ");
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("is_made");
	ТЗ.Колонки.Добавить("ShopNo");
	ТЗ.Колонки.Добавить("Параметр");
	
	ТЗДляЗапроса=Новый ТаблицаЗначений;
	ТЗДляЗапроса.Колонки.Добавить("Сенсор", Новый ОписаниеТипов("Число"));
	ТЗДляЗапроса.Колонки.Добавить("Shop_name",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТЗДляЗапроса.Колонки.Добавить("mest_name", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			//Место = Rs.Fields("id_mesto").Value;
			//Сенсор = Rs.Fields("id_sensor").Value;
			//Shop_name = Rs.Fields("Shop_name").Value;
			//mest_name = Rs.Fields("mest_name").Value;
			//Ответ= Rs.Fields("Sensor_value").Value;
			//Дата= Rs.Fields("date_add").Value;
			//ShopNo=Rs.Fields("ShopNo").Value;
			
			СтрНов=ТЗ.Добавить();
			СтрНов.Место=Rs.Fields("id_mesto").Value;
			СтрНов.Сенсор=Rs.Fields("id_sensor").Value;
			СтрНов.Shop_name=Rs.Fields("Shop_name").Value;
			СтрНов.mest_name= Rs.Fields("mest_name").Value;
			СтрНов.Ответ= Rs.Fields("Sensor_value").Value;
			СтрНов.Дата= Rs.Fields("date_add").Value;
			СтрНов.is_made= Rs.Fields("is_made").Value;
			СтрНов.ShopNo= Rs.Fields("ShopNo").Value;
			
			СтрНов=ТЗДляЗапроса.Добавить();
			СтрНов.Сенсор=Rs.Fields("id_sensor").Value;
			СтрНов.Shop_name=Rs.Fields("Shop_name").Value;
			СтрНов.mest_name= Rs.Fields("mest_name").Value;
			
			rs.MoveNext();
		КонецЦикла;
		ТЗДляЗапроса.Свернуть("Сенсор,Shop_name,mest_name");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.Сенсор,
		|	ТЗ.Shop_name,
		|	ТЗ.mest_name
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
		|	вт.Shop_name,
		|	вт.Сенсор
		|ПОМЕСТИТЬ втМагазины
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО СтруктурныеЕдиницы.Наименование = вт.Shop_name
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаВыкладки.Ссылка КАК МВ,
		|	МестаВыкладки.Родитель КАК МВРодитель,
		|	вт.mest_name,
		|	МестаВыкладки.ЭтоГруппа
		|ИЗ
		|	Справочник.МестаВыкладки КАК МестаВыкладки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО МестаВыкладки.Наименование = вт.mest_name
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМагазины.Магазин,
		|	втМагазины.Сенсор,
		|	Датчики.Ссылка КАК Датчик
		|ИЗ
		|	Справочник.Датчики КАК Датчики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМагазины КАК втМагазины
		|		ПО Датчики.ИД = втМагазины.Сенсор
		|			И Датчики.Владелец = втМагазины.Магазин
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМагазины.Магазин,
		|	втМагазины.Shop_name
		|ИЗ
		|	втМагазины КАК втМагазины";
		
		Запрос.УстановитьПараметр("ТЗ", ТЗДляЗапроса);
		
		Результаты = Запрос.ВыполнитьПакет();
		ТабМВ = Результаты[2].Выгрузить();
		ТабДатчики = Результаты[3].Выгрузить();
		ТабМагазины = Результаты[4].Выгрузить();
		
		
		
		Для каждого СтрНов Из ТЗ Цикл
			Место=СтрНов.Место;
			Сенсор=СтрНов.Сенсор;
			Shop_name=СтрНов.Shop_name;
			mest_name=СтрНов.mest_name ;
			Ответ=СтрНов.Ответ;
			Дата=СтрНов.Дата;
			//СтрНов.is_made= Rs.Fields("is_made").Value;
			ShopNo=СтрНов.ShopNo;
			
			
			//Мен=РегистрыСведений.РеестрСостоянийДатчиков.СоздатьМенеджерЗаписи();
			//Мен.Период=Дата;
			
			СтрМагазин=ТабМагазины.НайтиСтроки(Новый Структура("Shop_name",Shop_name));
			Если СтрМагазин.Количество()=0 Тогда
				Продолжить;
			Иначе
				Магазин=СтрМагазин[0].Магазин;
			КонецЕсли; 
			
			СтрДатчик=ТабДатчики.НайтиСтроки(Новый Структура("Сенсор,Магазин",Сенсор,Магазин));
			Если СтрДатчик.Количество()=0 Тогда
				Продолжить;
			Иначе
				Датчик=СтрДатчик[0].Датчик;
			КонецЕсли; 
			
			СтрМВ=ТабМВ.НайтиСтроки(Новый Структура("mest_name",mest_name));
			Если СтрМВ.Количество()=0 Тогда
				МВ=Неопределено;
				МВРодитель=Неопределено;
				МВЭтоГруппа=Неопределено;
				
			Иначе
				МВ=СтрМВ[0].МВ;
				МВРодитель=СтрМВ[0].МВРодитель;
				МВЭтоГруппа=СтрМВ[0].ЭтоГруппа;
			КонецЕсли; 
			
			
			//Мен.Магазин=Магазин;
			//Датчик=Датчик;
			//МВ=Справочники.МестаВыкладки.НайтиПоНаименованию(mest_name);
			Если ЗначениеЗаполнено(МВ)   Тогда
				Если МВЭтоГруппа=Ложь Тогда
					МВ=МВРодитель;
				КонецЕсли; 
			Иначе	
				МВ=Датчик.МестоВыкладки;
			КонецЕсли; 
			
			//Мен.МестоВыкладки=МВ;
			Если Не ЗначениеЗаполнено(Датчик) Тогда
				НовыйОбъект=Справочники.Датчики.СоздатьЭлемент();
				НовыйОбъект.Владелец=Магазин;
				НовыйОбъект.МестоВыкладки=МВ;
				НовыйОбъект.ИД=Сенсор;
				НовыйОбъект.Наименование=Сенсор;
				//НовыйОбъект.ИзмеряемыйПараметр = ТипДатчика;
				УстановитьНаименование(НовыйОбъект);
				НовыйОбъект.Записать();
				Датчик=НовыйОбъект.Ссылка;
				//МенМХ=РегистрыСведений.ДатчикиВМестахХранения.СоздатьМенеджерЗаписи();
				//МенМХ.Датчик=Датчик;
				//МенМХ.Магазин=Мен.Магазин;
				//МенМХ.МестоВыкладки=Мен.МестоВыкладки;
				//МенМХ.Прочитать();
				//Если НЕ МенМХ.Выбран() Тогда
				//	МенМХ.Датчик=Датчик;
				//	МенМХ.Магазин=Мен.Магазин;
				//	МенМХ.МестоВыкладки=Мен.МестоВыкладки;
				//	МенМХ.Записать();
				//КонецЕсли; 
			КонецЕсли;
			//Мен.Датчик=Датчик;
			//Мен.ИзмеряемыйПараметр = Датчик.ИзмеряемыйПараметр;
			//Если СтрЗаменить(Строка(Ответ)," ","")="1000" Тогда
			//	Мен.Ответ="Необработанная ошибка";
			//ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1001" Тогда
			//	Мен.Ответ="Поломка датчика";
			//ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1002" Тогда
			//	Мен.Ответ="Поломка модуля";
			//ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1003" Тогда
			//	Мен.Ответ="Драйвер модуля не установлен";
			//ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1004" Тогда
			//	Мен.Ответ="Нет связи с компьютером";
			//ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1005" Тогда
			//	Мен.Ответ="Нет связи с магазином";
			//Иначе
			//	Мен.Ответ=Ответ;
			//КонецЕсли; 
			//Мен.Записать();
			
			СтрЗапрос = "UPDATE [M2].[dbo].[TemraSensorData]
			|SET [is_made] = 1
			|WHERE id_mesto = " + ВнешниеДанные.ФорматПоля(Место) + " and id_sensor = " + ВнешниеДанные.ФорматПоля(Сенсор) + " and date_add = " + ВнешниеДанные.ФорматПоля(Дата)+" and ShopNo="+ВнешниеДанные.ФорматПоля(ShopNo);
			rs1 = ADOСоединение.Execute(СтрЗапрос);
			
			
		КонецЦикла; 
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура КонтрольТемпературыДатчиков() Экспорт
	
	//АК БЕЛН 30.08.2017++
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
	
	Если ADOСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОкончание	= ТекущаяДата();
	ДатаНачала		= ТекущаяДата() - 60*60;
	ТекстЗапросаSQL =
	"SELECT [id]
	|,[date_add] 
	|,[is_made]
	|,[ShopNo] 
	|,[id_mesto]
	|,[id_sensor]
	|,[Sensor_value],[Vid]
	|
	|, tt._Description Shop_name
	|,m._Description mest_name
	|FROM (SELECT [id]
	|	,[date_add] 
	|	,[is_made]
	|	,[ShopNo] 
	|	,[id_mesto]
	|	,[id_sensor]
	|	,[Sensor_value],1 Vid
	|	FROM [M2].[dbo].[TemraSensorData] (nolock) as ts
	|	where ts.date_add between " + ВнешниеДанные.ФорматПоля(ДатаНачала) + " and " + ВнешниеДанные.ФорматПоля(ДатаОкончание) + "
	| and ts.Sensor_type = " + ВнешниеДанные.ФорматПоля(0) + "
	| Union All
	|	SELECT [id]
	|	,[date_add] 
	|	,0
	|	,[ShopNo] 
	|	,[id_mesto]
	|	,[id_sensor]
	|	,1000,2
	|	FROM [M2].[dbo].[TemraSensorData_Notification] (nolock) as ts
	|	where ts.date_add between " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаНачала)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаОкончание)) + "
	|) as ts 
	|inner join IzbenkaFin.._Reference42 (nolock) as tt on ts.ShopNo=tt._Fld2756
	|inner join IzbenkaFin.._Reference5118 (nolock) as m on ts.id_mesto=m._Fld5280";
	
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Место");
	ТЗ.Колонки.Добавить("Сенсор");
	ТЗ.Колонки.Добавить("Shop_name");
	ТЗ.Колонки.Добавить("mest_name");
	ТЗ.Колонки.Добавить("Ответ");
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("is_made");
	ТЗ.Колонки.Добавить("ShopNo");
	ТЗ.Колонки.Добавить("Параметр");
	ТЗ.Колонки.Добавить("Вид");
	
	ТЗДляЗапроса = Новый ТаблицаЗначений;
	ТЗДляЗапроса.Колонки.Добавить("Shop_name", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТЗДляЗапроса.Колонки.Добавить("mest_name", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			//Место = Rs.Fields("id_mesto").Value;
			//Сенсор = Rs.Fields("id_sensor").Value;
			//Shop_name = Rs.Fields("Shop_name").Value;
			//mest_name = Rs.Fields("mest_name").Value;
			//Ответ= Rs.Fields("Sensor_value").Value;
			//Дата= Rs.Fields("date_add").Value;
			//ShopNo=Rs.Fields("ShopNo").Value;
			
			СтрНов = ТЗ.Добавить();
			СтрНов.Место		= Rs.Fields("id_mesto").Value;
			СтрНов.Сенсор		= Rs.Fields("id_sensor").Value;
			СтрНов.Shop_name	= Rs.Fields("Shop_name").Value;
			СтрНов.mest_name	= Rs.Fields("mest_name").Value;
			СтрНов.Ответ		= Rs.Fields("Sensor_value").Value;
			СтрНов.Дата			= Rs.Fields("date_add").Value;
			СтрНов.is_made		= Rs.Fields("is_made").Value;
			СтрНов.ShopNo		= Rs.Fields("ShopNo").Value;
			СтрНов.Вид		= Rs.Fields("Vid").Value;
			
			СтрНов = ТЗДляЗапроса.Добавить();
			СтрНов.Shop_name	= Rs.Fields("Shop_name").Value;
			СтрНов.mest_name	= Rs.Fields("mest_name").Value;
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТЗДляЗапроса.Свернуть("Shop_name, mest_name");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗДляЗапроса);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Shop_name,
	|	ТЗ.mest_name
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	|	вт.Shop_name
	|ПОМЕСТИТЬ втМагазины
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО СтруктурныеЕдиницы.Наименование = вт.Shop_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаВыкладки.Ссылка КАК МВ,
	|	МестаВыкладки.Родитель КАК МВРодитель,
	|	вт.mest_name,
	|	МестаВыкладки.ЭтоГруппа
	|ИЗ
	|	Справочник.МестаВыкладки КАК МестаВыкладки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО МестаВыкладки.Наименование = вт.mest_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМагазины.Магазин,
	|	втМагазины.Shop_name
	|ИЗ
	|	втМагазины КАК втМагазины";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабМВ 		= Результаты[2].Выгрузить();
	ТабМагазины = Результаты[3].Выгрузить();
	
	
	ТЗДляЗапроса = Новый ТаблицаЗначений;
	Мас = Новый Массив;
	Мас.Добавить(Тип("Число"));
	Мас.Добавить(Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТЗДляЗапроса.Колонки.Добавить("Ответ"			, Новый ОписаниеТипов(Мас));
	ТЗДляЗапроса.Колонки.Добавить("Магазин"			, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТЗДляЗапроса.Колонки.Добавить("МестоВыкладки"	, Новый ОписаниеТипов("СправочникСсылка.МестаВыкладки"));
	
	ТЗПоломок = Новый ТаблицаЗначений;
	ТЗПоломок.Колонки.Добавить("Магазин"			, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТЗПоломок.Колонки.Добавить("МестоВыкладки"	, Новый ОписаниеТипов("СправочникСсылка.МестаВыкладки"));
	Для каждого СтрНов Из ТЗ Цикл
		Место=СтрНов.Место;
		Сенсор=СтрНов.Сенсор;
		Shop_name=СтрНов.Shop_name;
		mest_name=СтрНов.mest_name ;
		Ответ=СтрНов.Ответ;
		Дата=СтрНов.Дата;
		//СтрНов.is_made= Rs.Fields("is_made").Value;
		ShopNo=СтрНов.ShopNo;
		
		
		
		СтрМагазин=ТабМагазины.НайтиСтроки(Новый Структура("Shop_name",Shop_name));
		Если СтрМагазин.Количество()=0 Тогда
			Продолжить;
		Иначе
			Магазин=СтрМагазин[0].Магазин;
		КонецЕсли; 
		
		
		СтрМВ=ТабМВ.НайтиСтроки(Новый Структура("mest_name",mest_name));
		Если СтрМВ.Количество()=0 Тогда
			МВ=Неопределено;
			МВРодитель=Неопределено;
			МВЭтоГруппа=Неопределено;
			
		Иначе
			МВ=СтрМВ[0].МВ;
			МВРодитель=СтрМВ[0].МВРодитель;
			МВЭтоГруппа=СтрМВ[0].ЭтоГруппа;
		КонецЕсли; 
		
		
		//Мен.Магазин=Магазин;
		//Датчик=Датчик;
		//МВ=Справочники.МестаВыкладки.НайтиПоНаименованию(mest_name);
		Если ЗначениеЗаполнено(МВ)   Тогда
			Если МВЭтоГруппа=Ложь Тогда
				МВ=МВРодитель;
			КонецЕсли; 
		Иначе	
		КонецЕсли; 
		
		Если СтрНов.Вид=2 Тогда
			Мен=ТЗПоломок.Добавить();
			Мен.Магазин=Магазин;
			Мен.МестоВыкладки=МВ;
			Продолжить;
		КонецЕсли; 
		Мен=ТЗДляЗапроса.Добавить();
		
		Мен.Магазин=Магазин;
		
		Мен.МестоВыкладки=МВ;
		Если СтрЗаменить(Строка(Ответ)," ","")="1000" Тогда
			Мен.Ответ="Необработанная ошибка";
		ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1001" Тогда
			Мен.Ответ="Поломка датчика";
		ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1002" Тогда
			Мен.Ответ="Поломка модуля";
		ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1003" Тогда
			Мен.Ответ="Драйвер модуля не установлен";
		ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1004" Тогда
			Мен.Ответ="Нет связи с компьютером";
		ИначеЕсли СтрЗаменить(Строка(Ответ)," ","")="1005" Тогда
			Мен.Ответ="Нет связи с магазином";
		Иначе
			Мен.Ответ=Ответ;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого Стр Из ТЗПоломок Цикл
		//Если ТЗДляЗапроса.НайтиСтроки(Новый Структура("Магазин,МестоВыкладки",Стр.Магазин,Стр.МестоВыкладки)).Количество()=0 Тогда
		Мен=ТЗДляЗапроса.Добавить();
		Мен.Магазин=Стр.Магазин;
		Мен.МестоВыкладки=Стр.МестоВыкладки;
		Мен.Ответ=999999;
		//КонецЕсли;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата2"	, ТекущаяДата());
	Запрос.УстановитьПараметр("Дата1"	, ТекущаяДата() - 60*60);
	Запрос.УстановитьПараметр("Датчики"	, ТЗДляЗапроса);
	Запрос.Текст ="ВЫБРАТЬ 
	|	Датчики.Ответ,
	|	Датчики.Магазин,
	|	Датчики.МестоВыкладки
	|ПОМЕСТИТЬ втДатчикиЗначения
	|ИЗ
	|	&Датчики КАК Датчики
	|;
	
	|ВЫБРАТЬ
	|	РеестрСостоянийДатчиков.Магазин КАК Магазин,
	|	РеестрСостоянийДатчиков.МестоВыкладки КАК МестоВыкладки,
	|	КОЛИЧЕСТВО(РеестрСостоянийДатчиков.Ответ) КАК Отклонение
	|ИЗ
	|	втДатчикиЗначения КАК РеестрСостоянийДатчиков
	|ГДЕ
	|	 ((ВЫРАЗИТЬ(РеестрСостоянийДатчиков.Ответ КАК ЧИСЛО(15, 3))) >= РеестрСостоянийДатчиков.МестоВыкладки.ТемпературныйРежимДляОповещения.ВерхнийПределТемпературы
	|			ИЛИ (ВЫРАЗИТЬ(РеестрСостоянийДатчиков.Ответ КАК ЧИСЛО(15, 3))) <= РеестрСостоянийДатчиков.МестоВыкладки.ТемпературныйРежимДляОповещения.НижнийПределТемпературы)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрСостоянийДатчиков.Магазин,
	|	РеестрСостоянийДатчиков.МестоВыкладки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин,
	|	МестоВыкладки";
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
	//Запрос.УстановитьПараметр("Дата1", ТекущаяДата() - 60*60);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	РеестрСостоянийДатчиков.Магазин КАК Магазин,
	//|	РеестрСостоянийДатчиков.МестоВыкладки КАК МестоВыкладки,
	//|	КОЛИЧЕСТВО(РеестрСостоянийДатчиков.Ответ) КАК Отклонение
	//|ИЗ
	//|	РегистрСведений.РеестрСостоянийДатчиков КАК РеестрСостоянийДатчиков
	//|ГДЕ
	//|	РеестрСостоянийДатчиков.Период МЕЖДУ &Дата1 И &Дата2
	//|	И ((ВЫРАЗИТЬ(РеестрСостоянийДатчиков.Ответ КАК ЧИСЛО(15, 3))) >= РеестрСостоянийДатчиков.МестоВыкладки.ТемпературныйРежимДляОповещения.ВерхнийПределТемпературы
	//|			ИЛИ (ВЫРАЗИТЬ(РеестрСостоянийДатчиков.Ответ КАК ЧИСЛО(15, 3))) <= РеестрСостоянийДатчиков.МестоВыкладки.ТемпературныйРежимДляОповещения.НижнийПределТемпературы)
	//|	И РеестрСостоянийДатчиков.Датчик.ИзмеряемыйПараметр = ЗНАЧЕНИЕ(Перечисление.ИзмеряемыеПараметрыДатчиков.Температура)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РеестрСостоянийДатчиков.Магазин,
	//|	РеестрСостоянийДатчиков.МестоВыкладки
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Магазин,
	//|	МестоВыкладки";
	//АК БЕЛН 30.08.2017--
	Результат = Запрос.Выполнить();
	ТЗДатчики = Результат.Выгрузить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	СоотФЛ = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестаВыкладкиКонтролеры.Ссылка,
		|	МестаВыкладкиКонтролеры.НомерСтроки,
		|	МестаВыкладкиКонтролеры.ФизЛицо
		|ИЗ
		|	Справочник.МестаВыкладки.Контролеры КАК МестаВыкладкиКонтролеры";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗКонтролеры = РезультатЗапроса.Выгрузить();
	
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСтрКонтролеры=ТЗКонтролеры.НайтиСтроки(Новый Структура("Ссылка",ВыборкаДетальныеЗаписи.МестоВыкладки));
		Для каждого СтрФЛ Из МасСтрКонтролеры Цикл
			Если СоотФЛ.Получить(СтрФЛ.ФизЛицо) = Неопределено Тогда
				ТЗ = Новый ТаблицаЗначений;
				ТЗ.Колонки.Добавить("Магазин");
				ТЗ.Колонки.Добавить("МестоВыкладки");
				ТЗ.Колонки.Добавить("Отклонение");
			Иначе
				ТЗ = СоотФЛ.Получить(СтрФЛ.ФизЛицо);
			КонецЕсли; 
			Если ТЗ.НайтиСтроки(Новый Структура("Магазин,МестоВыкладки",ВыборкаДетальныеЗаписи.Магазин,ВыборкаДетальныеЗаписи.МестоВыкладки)).Количество()=0 Тогда
				НовСтр = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаДетальныеЗаписи);
				СоотФЛ.Вставить(СтрФЛ.ФизЛицо, ТЗ);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРоли = РезультатЗапроса.Выгрузить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	Датчики.Отклонение,
	|	Датчики.Магазин,
	|	Датчики.МестоВыкладки
	|ПОМЕСТИТЬ втДатчикиЗначения
	|ИЗ
	|	&Датчики КАК Датчики
	|;
	| ВЫБРАТЬ
	|	втДатчикиЗначения.Отклонение,
	|	втДатчикиЗначения.Магазин,
	|	втДатчикиЗначения.МестоВыкладки,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователя
	|ИЗ
	|	втДатчикиЗначения КАК втДатчикиЗначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата1, ТипРоли = &ТипРоли ИЛИ ТипРоли = &ТипРоли1) КАК СоответствиеОбъектРольСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата1, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|			ПО (ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = СоответствиеОбъектРольСрезПоследних.Объект)
	|		ПО (ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница = втДатчикиЗначения.Магазин)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ ПО
	|	РольПользователя";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.СпециалистПоХолодильномуОборудованию);
	Запрос.УстановитьПараметр("ТипРоли1",ПланыВидовХарактеристик.ТипыРолейПользователя.АК_НачальникЭксплуатации);
	Запрос.УстановитьПараметр("Датчики",ТЗДатчики);
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Срочность", Справочники.СрочностьВыполненияЗаявкиНаРемонт.Срочно);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//СоотФЛ=Новый Соответствие;	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыбПом= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбПом.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыбПом.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Ссылка",ВыборкаДетальныеЗаписи.РольПользователя));
				
				Для каждого СтрФЛ Из МасСтр Цикл
					Если СоотФЛ.Получить(СтрФЛ.Сотрудник) = Неопределено Тогда
						ТЗ = Новый ТаблицаЗначений;
						ТЗ.Колонки.Добавить("Магазин");
						ТЗ.Колонки.Добавить("МестоВыкладки");
						ТЗ.Колонки.Добавить("Отклонение");
					Иначе
						ТЗ = СоотФЛ.Получить(СтрФЛ.Сотрудник);
					КонецЕсли; 
					Если ТЗ.НайтиСтроки(Новый Структура("Магазин,МестоВыкладки",ВыборкаДетальныеЗаписи.Магазин,ВыборкаДетальныеЗаписи.МестоВыкладки)).Количество()=0 Тогда
						НовСтр = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаДетальныеЗаписи);
						СоотФЛ.Вставить(СтрФЛ.Сотрудник, ТЗ);
						
					КонецЕсли; 
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла;
		
	КонецЕсли;
	
	МассивАдресов = Новый Массив;
	Для каждого Эл из СоотФЛ Цикл
		МассивАдресов.Добавить(Эл.Ключ);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Объект"	, МассивАдресов);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Результат = Запрос.Выполнить();
	СоотЭлПочта=Новый Соответствие;
	ВыборкаДетальныеЗаписи1 = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи1.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СоотЭлПочта.Вставить(ВыборкаДетальныеЗаписи1.Объект,ВыборкаДетальныеЗаписи1.Представление);
		КонецЕсли; 
	КонецЦикла;
	
	
	
	Для каждого Эл из СоотФЛ Цикл
		ЭлПочта=СоотЭлПочта.Получить(Эл.Ключ);
		Если Не ЗначениеЗаполнено(ЭлПочта) Тогда
			Продолжить;
		КонецЕсли; 
		Кому = Новый СписокЗначений;
		Кому.Добавить(ЭлПочта);
		СтруктураНовогоПисьма = Новый Структура;
		
		Макет = Справочники.МестаВыкладки.ПолучитьМакет("МакетРассылки");
		
		ТабДок = Новый ТабличныйДокумент;
		Область = Макет.ПолучитьОбласть("Шапка");
		
		ТабДок.Вывести(Область);
		ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
		Для каждого Стр Из Эл.Значение Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,стр);
			Если ТЗПоломок.НайтиСтроки(Новый Структура("Магазин,МестоВыкладки",Стр.Магазин,Стр.МестоВыкладки)).Количество() Тогда
				ОбластьСтрока.Параметры.Отклонение="Поломка";
			КонецЕсли; 
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ВремФайл = ПолучитьИмяВременногоФайла("htm");
		ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
		
		ТекстДокумент = Новый ТекстовыйДокумент();
		ТекстДокумент.Прочитать(ВремФайл);
		
		Текст = ТекстДокумент.ПолучитьТекст();
		НачалоБлокаСтиль = Найти(Текст, "<STYLE");
		КонецБлокаСтиль = Найти(Текст, "</STYLE");
		ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
		НачалоБлокаТело = Найти(Текст, "<BODY");
		КонецБлокаТело = Найти(Текст, "</BODY");
		ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
		
		ТекстПолный = "<HTML>" + Символы.ПС +ТекстСтиль +Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
		ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; CELLPADDING=5; border = 0");
		СтруктураНовогоПисьма.Вставить("Тело",ТекстПолный);
		
		
		СтруктураНовогоПисьма.Вставить("Кому", Кому);
		СтруктураНовогоПисьма.Вставить("Тема", "Отчет по отклонениям температуры" );
		
		СтрКому = "";
		Для каждого Эл Из Кому Цикл
			СтрКому = СтрКому + Эл.Значение + "; ";
		КонецЦикла; 
		Попытка
			ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма, Истина);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура СделатьРассылкуДинамикаДолиПотерьНаСкидкахИСписанияхПоКатегориям() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Если ДеньНедели(ТекущаяДата())=1 И НачалоДня(ТекущаяДата())<>Константы.ДатаРассылкиДинамикаДолиПотерьНаСкидкахИСписанияхПоКатегориям.Получить() Тогда //+++АК LAGP 2018.10.16 ИП-00018590 Тестовая рассылка после исправления
	Если ДеньНедели(ТекущаяДата())<=5 И НачалоДня(ТекущаяДата())<>Константы.ДатаРассылкиДинамикаДолиПотерьНаСкидкахИСписанияхПоКатегориям.Получить() Тогда
		ДатаПроверки = ТекущаяДата(); 
		Дата1=НачалоДня(НачалоНедели(ДатаПроверки)-21*24*60*60);  //+++АК LAGP 2017.12.23 ИП-00017361 было 28 вместо 21, а в задании сказано про 3 недели
		Дата2=КонецДня(НачалоНедели(ДатаПроверки)-24*60*60);
		
		//+++АК LAGP 2017.12.23 ИП-00017361 
		//Общий смысл: формируем запросов SQL ТЗ "Данные по чекам" и ТЗ "Недопоставок", В каждой выводим через родителя - категорию и подкатегорию.
		//Затем объединяем для того чтобы добавить колонку недопоставок в основную таблицу. Протаскиваем через СКД и отправляем обработанные результаты письмом.
		//Временные файлы пишутся в КаталогВременныхФайлов()
		Темп = КаталогВременныхФайлов(); //каталог для записей ТЗПоЧекам, ТЗНедопоставок, макета СКД (для преобразования в тело письма), вложений (xls)
		//Темп = "\\10.0.0.51\1c$\tmp\"; //+++АК LAGP 2018.10.16 ИП-00018590 Тестовая рассылка после исправления
		ДанныеПоЧекам = ПолучитьДвиженияТоваровПолнаяПоКатегориям(Дата1,Дата2 , );
		
		ДанныеПоЧекам.Колонки.Добавить("КоличествоПришло", Новый ОписаниеТипов("Число"));
		ДанныеПоЧекам.Колонки.Добавить("ОтправилСклад"	 , Новый ОписаниеТипов("Число"));
		ДанныеПоЧекам.Свернуть("ТТ,Категория,Подкатегория,Неделя,Номенклатура","Продано,Списание,СуммаСкидок,СписаниеПоКачеству, СредСписание, СредВыручка, СредПродажа50, КоличествоПришло, ОтправилСклад");
		
		//ТЗ СтруктурныхЕдиниц для запроса недопоставок
		ТЗТТ = ДанныеПоЧекам.Скопировать(,"ТТ");
		ТЗТТ.Свернуть("ТТ");
		
		//Выясняю количество позиций в каждой группе
		ДанныеПоЧекам.Колонки.Добавить("КоличествоПозиций");
		ДанныеПоЧекам.Колонки.Добавить("КоличествоПозицийПоПодкатегории");
		
		ТЗДляКоличестваПозицийПоПодкатегории = ДанныеПоЧекам.Скопировать(,"Категория,Подкатегория,Неделя,Номенклатура,КоличествоПозицийПоПодкатегории");
		ТЗДляКоличестваПозицийПоПодкатегории.Свернуть("Категория,Подкатегория,Неделя,Номенклатура","КоличествоПозицийПоПодкатегории");
		ТЗДляКоличестваПозицийПоПодкатегории.ЗаполнитьЗначения(1, "КоличествоПозицийПоПодкатегории");				
		ТЗДляКоличестваПозицийПоПодкатегории.Свернуть("Категория,Подкатегория,Неделя","КоличествоПозицийПоПодкатегории");
		
		ДанныеПоЧекам.ЗаполнитьЗначения(1, "КоличествоПозиций");			
		ДанныеПоЧекам.Свернуть("Категория, Подкатегория, ТТ, Неделя","Продано, Списание, СуммаСкидок, СписаниеПоКачеству, СредСписание, СредВыручка, СредПродажа50, КоличествоПозиций, КоличествоПришло, ОтправилСклад, КоличествоПозицийПоПодкатегории");
				
		Для каждого СтрокаТЗ ИЗ ТЗДляКоличестваПозицийПоПодкатегории Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Категория",СтрокаТЗ.Категория);
			Отбор.Вставить("Подкатегория",СтрокаТЗ.Подкатегория);
			Отбор.Вставить("Неделя",СтрокаТЗ.Неделя);
			МассивНайденныхСтрокТЗПодКатегории = ДанныеПоЧекам.НайтиСтроки(Отбор);
			Если МассивНайденныхСтрокТЗПодКатегории.Количество() > 0 Тогда
					МассивНайденныхСтрокТЗПодКатегории[0].КоличествоПозицийПоПодкатегории = СтрокаТЗ.КоличествоПозицийПоПодкатегории;	
			КонецЕсли;			
		КонецЦикла;	
		ТЗДляКоличестваПозицийПоПодкатегории = Неопределено;
		//освобождаю память
		ВремФайлДанныеПоЧекам = ЗначениеВФайл(Темп + "ДанныеПоЧекам.tmp", ДанныеПоЧекам);		
		ДанныеПоЧекам = Неопределено;
		
		//ТЗНедопоставок состав: "Номенклатура, ТТ, Неделя, КоличествоПришло, ОтправилСклад"
		ПутьДоФайлаТЗНедопоставок = СформироватьТЗНедопоставок(Дата1, Дата2, ТЗТТ, Темп);      		
		
		ДанныеПоЧекам = ЗначениеИзФайла(Темп + "ДанныеПоЧекам.tmp");		                                           
		УдалитьФайлы(Темп + "ДанныеПоЧекам.tmp",);
		
		//записываю информацию о недопоставках в основную таблицу ДанныеПоЧекам
		Если ЗначениеЗаполнено(ПутьДоФайлаТЗНедопоставок) Тогда
			ТЗНедопоставок = ЗначениеИзФайла(ПутьДоФайлаТЗНедопоставок);
			УдалитьФайлы(ПутьДоФайлаТЗНедопоставок,);	
			Для каждого СтрокаТЗНедопоставок Из ТЗНедопоставок Цикл
				СтрокаДанныеПоЧекам = ДанныеПоЧекам.Добавить();
				СтрокаДанныеПоЧекам.Категория = СтрокаТЗНедопоставок.Категория;
				СтрокаДанныеПоЧекам.Подкатегория = СтрокаТЗНедопоставок.Подкатегория;
				//СтрокаДанныеПоЧекам.ТТ = СтрокаТЗНедопоставок.ТТ;
				СтрокаДанныеПоЧекам.Неделя = СтрокаТЗНедопоставок.Неделя;
				СтрокаДанныеПоЧекам.ОтправилСклад = СтрокаТЗНедопоставок.ОтправилСклад;
				СтрокаДанныеПоЧекам.КоличествоПришло = СтрокаТЗНедопоставок.КоличествоПришло;
			КонецЦикла;				
		КонецЕсли;	
		
		ТЗНедопоставок = Неопределено;
		
		ДанныеПоЧекам.Свернуть("Категория, Подкатегория, Неделя","Продано, Списание, СуммаСкидок, СписаниеПоКачеству, СредСписание, СредВыручка, СредПродажа50, КоличествоПозиций, КоличествоПришло, ОтправилСклад, КоличествоПозицийПоПодкатегории");		
				
		//Запоминаю сумму итога продаж по категории для вычесления в СКД доли вхождения в группу
		ДанныеПоЧекам.Колонки.Добавить("СуммаПродажПоКатегории");
		ТЗДляДолиПродажПоКатегориям = ДанныеПоЧекам.Скопировать(,"Категория,Неделя,Продано");
		ТЗДляДолиПродажПоКатегориям.Свернуть("Категория,Неделя","Продано");	
		
		Для каждого СтрокаТЗ ИЗ ТЗДляДолиПродажПоКатегориям Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Категория",СтрокаТЗ.Категория);
			Отбор.Вставить("Неделя",СтрокаТЗ.Неделя);
			МассивНайденныхСтрокТЗПодКатегории = ДанныеПоЧекам.НайтиСтроки(Отбор);
			Если МассивНайденныхСтрокТЗПодКатегории.Количество() > 0 Тогда
				Для каждого ЭлементМассива из МассивНайденныхСтрокТЗПодКатегории Цикл
					ЭлементМассива.СуммаПродажПоКатегории = СтрокаТЗ.Продано;
				КонецЦикла	
			КонецЕсли;			
		КонецЦикла;	
		ТЗДляДолиПродажПоКатегориям = Неопределено;
		
		ТЗКатегории=ДанныеПоЧекам.Скопировать();
		ТЗКатегории.Свернуть("Категория,Неделя,СуммаПродажПоКатегории","Продано,Списание,СуммаСкидок,СписаниеПоКачеству, СредСписание, СредВыручка, СредПродажа50, КоличествоПозиций, КоличествоПришло, ОтправилСклад, КоличествоПозицийПоПодкатегории");	
				
		//формирую список адресов для отправки
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ПОМЕСТИТЬ втРолиПользователей
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли = &ТипРоли
		|				ИЛИ ТипРоли = &ТипРоли2) КАК СоответствиеОбъектРольСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ втОтобранныеСотрудники
		|ИЗ
		|	втРолиПользователей КАК втРолиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО втРолиПользователей.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Сотрудник
		|ИЗ
		|	втОтобранныеСотрудники КАК втОтобранныеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО втОтобранныеСотрудники.Сотрудник = ФизическиеЛица.Ссылка
		|ГДЕ
		|	ФизическиеЛица.Активный = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование";		
		//---АК LAGP 2017.12.23
		
		Запрос.УстановитьПараметр("ТипРоли"	, ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
		Запрос.УстановитьПараметр("ТипРоли2", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
		Результат = Запрос.Выполнить(); 
		
		Выб = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МасФЛ=Новый Массив;
		
		Пока Выб.Следующий() Цикл
			МасФЛ.Добавить(Выб.Сотрудник);	
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", МасФЛ);
		Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		МассивЭлПочты=Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.Представление)) Тогда
				МассивЭлПочты.Добавить(ВыборкаДетальныеЗаписи.Представление);
			КонецЕсли; 
		КонецЦикла;
		
		ТЗОтп=ТЗКатегории.СкопироватьКолонки();
		ТЗОтп.Колонки.Добавить("ДоляПотерьВВыручке",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтп.Колонки.Добавить("ДоляПотерьВВыручкеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		ТЗОтп.Колонки.Добавить("ПроданоДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтп.Колонки.Добавить("СписаниеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтп.Колонки.Добавить("СписаниеПоКачествуДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтп.Колонки.Добавить("СуммаСкидокДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		ТЗОтпПодКат=ДанныеПоЧекам.СкопироватьКолонки();
		ТЗОтпПодКат.Колонки.Добавить("ДоляПотерьВВыручке",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтпПодКат.Колонки.Добавить("ДоляПотерьВВыручкеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		ТЗОтпПодКат.Колонки.Добавить("ПроданоДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтпПодКат.Колонки.Добавить("СписаниеДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтпПодКат.Колонки.Добавить("СписаниеПоКачествуДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТЗОтпПодКат.Колонки.Добавить("СуммаСкидокДоп",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		//
		ТЗКатВсе=ДанныеПоЧекам.Скопировать();
		ТЗКатВсе.Свернуть("Категория,Подкатегория");
		ТЗКатВсе.Сортировать("Категория,Подкатегория");
		
		СоотКат=Новый Соответствие;
		Для  каждого Стр Из ТЗКатВсе  Цикл
			Если Не ЗначениеЗаполнено(Стр.Категория) Тогда
				Продолжить;
			КонецЕсли; 
			МасКат=ТЗКатегории.НайтиСтроки(Новый Структура("Категория",Стр.Категория));
			ИтогоПоКат=0;
			Если ТЗОтп.НайтиСтроки(Новый Структура("Категория",Стр.Категория)).Количество()=0 Тогда
				Для каждого Эл Из МасКат Цикл
					ИтогоПоКат=ИтогоПоКат+Эл.Продано;
					НовСтр=ТЗОтп.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,Эл);
					НовСтр.ДоляПотерьВВыручке=?(Эл.Продано=0,0,(Эл.Списание+Эл.СписаниеПоКачеству+Эл.СуммаСкидок)/Эл.Продано*100);
				КонецЦикла; 
				СоотКат.Вставить(Стр.Категория,ИтогоПоКат);
			Иначе
				ИтогоПоКат=СоотКат.Получить(Стр.Категория);
			КонецЕсли; 
			
			//Если ИтогоПоКат/ТЗКатегории.Итог("Продано")>=0.03 Тогда
			МасПодКат=ДанныеПоЧекам.НайтиСтроки(Новый Структура("ПодКатегория",Стр.ПодКатегория));
			Для каждого Эл Из МасПодКат Цикл
				НовСтр=ТЗОтпПодКат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Эл);
				НовСтр.ДоляПотерьВВыручке=?(Эл.Продано=0,0,(Эл.Списание+Эл.СписаниеПоКачеству+Эл.СуммаСкидок)/Эл.Продано*100);
			КонецЦикла; 					
			//КонецЕсли; 
		КонецЦикла; 
		
		//Запоминаю сумму итога продаж по неделе для вычесления в СКД доли вхождения в группу
		
		ТЗОтп.Колонки.Добавить("СуммаПродажПоНеделе");
		ТЗДляДолиПродажПоНеделе = ТЗОтп.Скопировать(,"Неделя,Продано");
		ТЗДляДолиПродажПоНеделе.Свернуть("Неделя","Продано");	
		
		Для каждого СтрокаТЗ ИЗ ТЗДляДолиПродажПоНеделе Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Неделя",СтрокаТЗ.Неделя);
			МассивНайденныхСтрокТЗОтп = ТЗОтп.НайтиСтроки(Отбор);
			Если МассивНайденныхСтрокТЗОтп.Количество() > 0 Тогда
				Для каждого ЭлементМассива из МассивНайденныхСтрокТЗОтп Цикл
					ЭлементМассива.СуммаПродажПоНеделе = СтрокаТЗ.Продано;
				КонецЦикла	
			КонецЕсли;			
		КонецЦикла;	
		ТЗДляДолиПродажПоНеделе = Неопределено;
		
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗОтп); 	//+++АК LAGP 2017.12.23 ИП-00017361 Было ТЗОтП
		ДокументРезультатКатегории=Новый ТабличныйДокумент; //+++АК LAGP 2017.12.23 ИП-00017361 Было ДокументРезультат
		//Макет компоновки 
		
		Мак=ПолучитьОбщийМакет("МакетРассылкиПоКатегориям");
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Мак, Мак.НастройкиПоУмолчанию, );
		
		//Компоновка данных
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, );
		
		//Вывод результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультатКатегории);     //+++АК LAGP 2017.12.23 ИП-00017361 было ДокументРезультат
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		ОбработатьТабДок(ДокументРезультатКатегории);                       //+++АК LAGP 2017.12.23 ИП-00017361 Отправлять буду как тело будущего письма
			
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗОтпПодКат);  //+++АК LAGP 2017.12.23 ИП-00017361 былоТЗОтпПодКат
		ДокументРезультат=Новый ТабличныйДокумент;
		//Макет компоновки 
		
		Мак=ПолучитьОбщийМакет("МакетРассылкиПоПодКатегориям");
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Мак, Мак.НастройкиПоУмолчанию, );
		
		//Компоновка данных
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, );
		
		//Вывод результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		ОбработатьТабДок(ДокументРезультат);
		
		//+++АК LAGP 2017.12.23 ИП-00017361 Высылаю письмо всем продактам
		МассивЭлПочты.Добавить("reklama@izbenka.msk.ru");
		МассивЭлПочты.Добавить("product_1@vkusvill.ru");
		МассивЭлПочты.Добавить("productmanager1@vkusvill.ru");
		МассивЭлПочты.Добавить("concept@izbenka.msk.ru");
		
		//МассивЭлПочты = Новый Массив; //+++АК LAGP 2018.05.17 ИП-00018590 Поиск причины некорректных данных на некоторых подкатегориях
		МассивЭлПочты.Добавить("lagp@automacon.ru");
		
		МассивИсключаемых = Новый Массив;   // Андрей Белугин попросил убрать данных лиц из рассылки
		МассивИсключаемых.Добавить("pr@izbenka.msk.ru");  			//Щепин Е.В.
		МассивИсключаемых.Добавить("izb.mlr18@mail.ru");  			//Радченко М.Л.
		МассивИсключаемых.Добавить("derbyshev-sergey@yandex.ru"); 	//Дербышев С.В.
		МассивИсключаемых.Добавить("pr@vkusvill.ru");               //Пурим М.М.

		Для каждого ЭлементМассиваИсключаемых Из МассивИсключаемых Цикл
			ИсключаемоеЛицо = МассивЭлПочты.Найти(ЭлементМассиваИсключаемых);
			Если ЗначениеЗаполнено(ИсключаемоеЛицо) Тогда
				МассивЭлПочты.Удалить(ИсключаемоеЛицо);		
			КонецЕсли;				
		КонецЦикла;	
		
		//тест
		//МассивЭлПочты = Новый Массив;
		МассивЭлПочты.Добавить("lagp@automacon.ru");
		
		Попытка
			ОтправитьПисьмоПоКатегориямСВложениемИТелом(МассивЭлПочты, ДокументРезультат, ДокументРезультатКатегории, "Динамика доли потерь на скидках и списаниях по подкатегориям от " + Формат(ТекущаяДата(), "ДФ=d.M.yy")); //+++АК LAGP 2017.12.23 ИП-00017361 Добавлена таблица "ДокументРезультатКатегории" для тела и адреса продактов				 			
		Исключение
			МассивЭлПочты = Новый Массив;
			МассивЭлПочты.Добавить("lagp@automacon.ru");
			ДокументРезультат = Новый ТабличныйДокумент;
			ДокументРезультатКатегории = Новый ТабличныйДокумент;
			ОтправитьПисьмоПоКатегориямСВложениемИТелом(МассивЭлПочты, ДокументРезультат, ДокументРезультатКатегории, "СБОЙ ОТПРАВКИ! Динамика доли потерь на скидках и списаниях по подкатегориям от " + Формат(ТекущаяДата(), "ДФ=d.M.yy")); //+++АК LAGP 2017.12.23 ИП-00017361 Добавлена таблица "ДокументРезультатКатегории" для тела и адреса продактов				
		КонецПопытки;	
		Константы.ДатаРассылкиДинамикаДолиПотерьНаСкидкахИСписанияхПоКатегориям.Установить(ТекущаяДата()); //перенес с начала процедуры
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработатьТабДок(ДокументРезультат)
	
	ВремФайл = ПолучитьИмяВременногоФайла("mxl");
	ДокументРезультат.Записать(ВремФайл, ТипФайлаТабличногоДокумента.MXL);
	ТД=Новый ТабличныйДокумент;
	ТД.Прочитать(ВремФайл);
	
	//+++АК LAGP 2017.12.23 ИП-00017361 эта функция создана для раскрашивания ТабДока, объединения полей и прочего.
	НачалоСтрок 	= ?(ДокументРезультат.Область(2,1,2,1).Текст = "Подкатегория", 4, 3);     //выясняю, что передо мной, файл подкатегорий или категорий
	УдалитьФайлы(ВремФайл,); 

	Неделя=0;	
	
	Для Сч=1 По 3 Цикл  // было 4, не понял, зачем         
		Попытка                                          
			НеделяТек=Число(Лев(ДокументРезультат.Область(1,4+(11*(Сч-1)),1,3+(11*(Сч))).Текст,1));	 //берет текст из шапки, выясняет, сколько недель в документе, "ЭтоПодКатегории" т.к. в таблицах разное кол-во колонок 
		Исключение
			Продолжить;
		КонецПопытки; 
		Неделя=Макс(Неделя,НеделяТек);	
	КонецЦикла; 
	
	Для Ит=1 По Неделя Цикл
		Для Сч=1 По 3 Цикл   // было 4
			Попытка
				НеделяТек=Число(Лев(ДокументРезультат.Область(1,4+(11*(Сч-1)),1,3+(11*(Сч))).Текст,1));	
			Исключение
				Продолжить;
			КонецПопытки; 
			Если НеделяТек=Ит Тогда
				ТД.ВставитьОбласть(ДокументРезультат.Область(1,4+11*(Сч-1), ДокументРезультат.ВысотаТаблицы,3+11*(Сч)),
				ТД.Область(1,4+11*(НеделяТек-1),ДокументРезультат.ВысотаТаблицы,3+11*(НеделяТек)));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	ДокументРезультат=ТД;
	
	//Светофор	
	Для Сч = 1 по 3 Цикл
		СписаниеНеделя = Новый Соответствие;
		ДоляПродажНеделя = Новый Соответствие;
		
		СписаниеНеделя.Вставить(Сч, Сч);
		ДоляПродажНеделя.Вставить(Сч, Сч);
	КонецЦикла;
	
	Для Сч = НачалоСтрок По ДокументРезультат.ВысотаТаблицы Цикл
		//Попытка
		
		Для СчНеделя = 1 По 3 Цикл    //11, 22, 33 - колонки средних списаний подкатегорий, 11, 21, 31 - категорий  используем "ЭтоКатегории" = 1
									  //8, 19, 30 - колонки "Доля потерь в выручке, %"
			//СписаниеНеделя[СчНеделя] = Число(?(ЗначениеЗаполнено(ДокументРезультат.Область(Сч, 11 * СчНеделя, Сч, 11 * СчНеделя).Текст), ДокументРезультат.Область(Сч, 11 * СчНеделя, Сч, 11 * СчНеделя).Текст, 0));
			СписаниеНеделя[СчНеделя] = Число(?(ЗначениеЗаполнено(ДокументРезультат.Область(Сч, 11 * СчНеделя - 3, Сч, 11 * СчНеделя - 3).Текст), ДокументРезультат.Область(Сч, 11 * СчНеделя - 3, Сч, 11 * СчНеделя - 3).Текст, 0));
		КонецЦикла;		
		Если СписаниеНеделя[1] > СписаниеНеделя[2] И СписаниеНеделя[2] > СписаниеНеделя[3] Тогда
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Красный";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Красный;
		ИначеЕсли СписаниеНеделя[1] > СписаниеНеделя[2] И СписаниеНеделя[2] < СписаниеНеделя[3] Тогда
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Оранжевый";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Оранжевый;		
		ИначеЕсли СписаниеНеделя[1] < СписаниеНеделя[2] И СписаниеНеделя[2] < СписаниеНеделя[3] Тогда
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Бирюзовый";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Бирюзовый;
		ИначеЕсли СписаниеНеделя[1] < СписаниеНеделя[2] И СписаниеНеделя[2] > СписаниеНеделя[3] Тогда	
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Изумрудный";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.ЗеленоватоЖелтый;
		ИначеЕсли СписаниеНеделя[1] > СписаниеНеделя[2] И СписаниеНеделя[2] = СписаниеНеделя[3] Тогда
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Жёлтый";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Желтый;
		ИначеЕсли СписаниеНеделя[1] < СписаниеНеделя[2] И СписаниеНеделя[2] = СписаниеНеделя[3] Тогда	
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Зелёный";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Зеленый;
		ИначеЕсли СписаниеНеделя[1] = СписаниеНеделя[2] И СписаниеНеделя[2] > СписаниеНеделя[3] Тогда
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Белый";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Белый;
		ИначеЕсли СписаниеНеделя[1] = СписаниеНеделя[2] И СписаниеНеделя[2] < СписаниеНеделя[3] Тогда		
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Зелёный";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Зеленый;
		ИначеЕсли СписаниеНеделя[1] = СписаниеНеделя[2] И СписаниеНеделя[2] = СписаниеНеделя[3] Тогда	
			ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Белый";	
			ДокументРезультат.Область(Сч,2,Сч,2).ЦветФона = WebЦвета.Белый;		
		КонецЕсли;			
		Для СчНеделя = 1 По 3 Цикл    
			СписаниеНеделя[СчНеделя] = 0;
		КонецЦикла;
		
		//Если ЭтоКатегории = 0 Тогда
			Для СчНеделя = 1 По 3 Цикл    //12, 23, 34 - колонки долей продаж
				ДоляПродажНеделя[СчНеделя] = Число(?(ЗначениеЗаполнено(ДокументРезультат.Область(Сч, 11 * СчНеделя + 1, Сч, 11 * СчНеделя + 1).Текст), ДокументРезультат.Область(Сч, 11 * СчНеделя + 1, Сч, 11 * СчНеделя + 1).Текст, 0));
			КонецЦикла;			
			Если ДоляПродажНеделя[1] > ДоляПродажНеделя[2] И ДоляПродажНеделя[2] > ДоляПродажНеделя[3] Тогда
				ДокументРезультат.Область(Сч,3,Сч,3).Текст = "Бирюзовый";	       
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Бирюзовый;
			ИначеЕсли ДоляПродажНеделя[1] > ДоляПродажНеделя[2] И ДоляПродажНеделя[2] < ДоляПродажНеделя[3] Тогда
				ДокументРезультат.Область(Сч,3,Сч,3).Текст = "Изумрудный";	
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.ЗеленоватоЖелтый;		
			ИначеЕсли ДоляПродажНеделя[1] < ДоляПродажНеделя[2] И ДоляПродажНеделя[2] < ДоляПродажНеделя[3] Тогда
				ДокументРезультат.Область(Сч,3,Сч,3).Текст = "Красный";	         
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Красный;		
			ИначеЕсли ДоляПродажНеделя[1] < ДоляПродажНеделя[2] И ДоляПродажНеделя[2] > ДоляПродажНеделя[3] Тогда	
				ДокументРезультат.Область(Сч,3,Сч,3).Текст = "Оранжевый";	
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Оранжевый;
			ИначеЕсли ДоляПродажНеделя[1] > ДоляПродажНеделя[2] И ДоляПродажНеделя[2] = ДоляПродажНеделя[3] Тогда
				ДокументРезультат.Область(Сч,3,Сч,2).Текст = "Зелёный";	           
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Зеленый;			
			ИначеЕсли ДоляПродажНеделя[1] < ДоляПродажНеделя[2] И ДоляПродажНеделя[2] = ДоляПродажНеделя[3] Тогда	
				ДокументРезультат.Область(Сч,3,Сч,3).Текст = "Оранжевый";	           
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Оранжевый;    
			ИначеЕсли ДоляПродажНеделя[1] = ДоляПродажНеделя[2] И ДоляПродажНеделя[2] > ДоляПродажНеделя[3] Тогда
				//ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Белый";	
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Белый;
			ИначеЕсли ДоляПродажНеделя[1] = ДоляПродажНеделя[2] И ДоляПродажНеделя[2] < ДоляПродажНеделя[3] Тогда		
				//ДокументРезультат.Область(Сч,2,Сч,2).Текст = "Белый";	
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Белый;
			ИначеЕсли ДоляПродажНеделя[1] = ДоляПродажНеделя[2] И ДоляПродажНеделя[2] = ДоляПродажНеделя[3] Тогда	
				ДокументРезультат.Область(Сч,3,Сч,3).Текст = "Белый";	
				ДокументРезультат.Область(Сч,3,Сч,3).ЦветФона = WebЦвета.Белый;		
			КонецЕсли;					
			Для СчНеделя = 1 По 3 Цикл   
				ДоляПродажНеделя[СчНеделя] = 0;
			КонецЦикла;
		//КонецЕсли;	
	КонецЦикла; 
	
	ДокументРезультат.Область(1,2,НачалоСтрок - 1,2).Объединить();      //объединяю поля индикаторов (группировки в СКД объединились, а нам надо светофор на них тоже вешать)
	ДокументРезультат.Область(1,3,НачалоСтрок - 1,3).Объединить();	
	//---АК LAGP 2017.12.23
	
	//+++АК LAGP 2017.12.31 ИП-00017361.01 Описание индикаторов (светофора)
	КолонкаОписанияИндикаторов 	= 38;
 	ДокументРезультат.Область(,КолонкаОписанияИндикаторов,,КолонкаОписанияИндикаторов).ШиринаКолонки = 40;
	
	ДокументРезультат.Область(2,КолонкаОписанияИндикаторов,2,КолонкаОписанияИндикаторов).Текст = "Описание индикаторов:";
	
	//+списания
	ДокументРезультат.Область(3,КолонкаОписанияИндикаторов,3,КолонкаОписанияИндикаторов).Текст = "Индикаторы списаний:";
	
	ДокументРезультат.Область(4,КолонкаОписанияИндикаторов,4,КолонкаОписанияИндикаторов).Текст = "Красный: растет две недели";	
	ДокументРезультат.Область(4,КолонкаОписанияИндикаторов,4,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Красный;	
	
	ДокументРезультат.Область(5,КолонкаОписанияИндикаторов,5,КолонкаОписанияИндикаторов).Текст = "Оранжевый: последнюю неделю рост";	
	ДокументРезультат.Область(5,КолонкаОписанияИндикаторов,5,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Оранжевый;
	
	ДокументРезультат.Область(6,КолонкаОписанияИндикаторов,6,КолонкаОписанияИндикаторов).Текст = "Белый: все три недели равны";	
	ДокументРезультат.Область(6,КолонкаОписанияИндикаторов,6,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Белый;
	
	ДокументРезультат.Область(7,КолонкаОписанияИндикаторов,7,КолонкаОписанияИндикаторов).Текст = "Бирюзовый: две недели падение";	
	ДокументРезультат.Область(7,КолонкаОписанияИндикаторов,7,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Бирюзовый;
	
	ДокументРезультат.Область(8,КолонкаОписанияИндикаторов,8,КолонкаОписанияИндикаторов).Текст = "Изумрудный: одну неделю падение";	
	ДокументРезультат.Область(8,КолонкаОписанияИндикаторов,8,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.ЗеленоватоЖелтый;
	
	ДокументРезультат.Область(9,КолонкаОписанияИндикаторов,9,КолонкаОписанияИндикаторов).Текст = "Жёлтый: одну неделю росло, другую было равно";	
	ДокументРезультат.Область(9,КолонкаОписанияИндикаторов,9,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Желтый;
	
	ДокументРезультат.Область(10,КолонкаОписанияИндикаторов,10,КолонкаОписанияИндикаторов).Текст = "Зелёный: одну неделю падало, другую было равно";	
	ДокументРезультат.Область(10,КолонкаОписанияИндикаторов,10,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Зеленый;
	//-списания	
	
	//+доля продаж
	ДокументРезультат.Область(12,КолонкаОписанияИндикаторов,12,КолонкаОписанияИндикаторов).Текст = "Индикаторы доли продаж:";
	
	ДокументРезультат.Область(13,КолонкаОписанияИндикаторов,13,КолонкаОписанияИндикаторов).Текст = "Красный: падает две недели";	
	ДокументРезультат.Область(13,КолонкаОписанияИндикаторов,13,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Красный;	
	
	ДокументРезультат.Область(14,КолонкаОписанияИндикаторов,14,КолонкаОписанияИндикаторов).Текст = "Оранжевый: последнюю неделю падение";	
	ДокументРезультат.Область(14,КолонкаОписанияИндикаторов,14,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Оранжевый;
	
	ДокументРезультат.Область(15,КолонкаОписанияИндикаторов,15,КолонкаОписанияИндикаторов).Текст = "Белый: все три недели равны";	
	ДокументРезультат.Область(15,КолонкаОписанияИндикаторов,15,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Белый;
	
	ДокументРезультат.Область(16,КолонкаОписанияИндикаторов,16,КолонкаОписанияИндикаторов).Текст = "Бирюзовый: две недели рост";	
	ДокументРезультат.Область(16,КолонкаОписанияИндикаторов,16,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Бирюзовый;
	
	ДокументРезультат.Область(17,КолонкаОписанияИндикаторов,17,КолонкаОписанияИндикаторов).Текст = "Изумрудный: одну неделю рост";	
	ДокументРезультат.Область(17,КолонкаОписанияИндикаторов,17,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.ЗеленоватоЖелтый;
	
	ДокументРезультат.Область(18,КолонкаОписанияИндикаторов,18,КолонкаОписанияИндикаторов).Текст = "Жёлтый: одну неделю падало, другую было равно";	
	ДокументРезультат.Область(18,КолонкаОписанияИндикаторов,18,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Желтый;
	
	ДокументРезультат.Область(19,КолонкаОписанияИндикаторов,19,КолонкаОписанияИндикаторов).Текст = "Зелёный: одну неделю росло, другую было равно";	
	ДокументРезультат.Область(19,КолонкаОписанияИндикаторов,19,КолонкаОписанияИндикаторов).ЦветФона = WebЦвета.Зеленый;
	//-доля продаж
	
	//---АК LAGP 2017.12.31
	
КонецПроцедуры

Функция ПолучитьДвиженияТоваровПолная(ДатаНачала, ДатаКонца, ТорговаяТочка = Неопределено, Номенклатура = Неопределено, РазбиватьПоДатам = Истина) Экспорт
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("TTUID"	, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("TovarUID"	, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	Если РазбиватьПоДатам Тогда
		ТабДанные.Колонки.Добавить("День"			, Новый ОписаниеТипов("Дата"));
	КонецЕсли;	
	ТабДанные.Колонки.Добавить("Поступило"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПоступилоБезВозврата"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Дегустация"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Списание"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СписаниеПоКачеству"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Бой"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Акция"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Разница"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВозвратПокупателя"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Продано"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПродажиККМ"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("РазницаДляРасчета"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПолученоСДругихТТ"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ОтправленоНаДругиеТТ", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Комплектация"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаСкидок"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Маржа"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Неделя"		, Новый ОписаниеТипов("Число"));
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
	
	Если ADOСоединение = Неопределено Тогда
		Возврат ТабДанные;
	КонецЕсли;
	
	//ТекстЗапроса = "create table #ls (" + ?(РазбиватьПоДатам, "Period datetime,", "") + "  id_tov int, post numeric(15, 3), digust numeric(15, 3)
	//|	, spisanie numeric(15, 3), spisanie_kach numeric(15, 3), boi numeric(15, 3)
	//|	, akcia numeric(15, 3), razniza numeric(15, 3), raznizaRaschet numeric(15, 3)
	//|	, summa numeric(15, 3), rashod numeric(15, 3), rashodKKM numeric(15, 3)
	//|	, vozvrat_pok numeric(15, 3), polucheno numeric(15, 3), peremesheno numeric(15, 3), complect numeric(15, 3),  discount50 numeric(15, 3),  price numeric(15, 3)) 
	//|
	//|Insert into #ls
	//|exec ('SELECT " + ?(РазбиватьПоДатам, "cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime) as Period,", "") + "
	//|	DTT.id_tov
	//|	,SUM([post]) post
	//|	,SUM([digust]) digust
	//|	,SUM(([spisanie] + [spisanie_dost])*[price]) spisanie
	//|	,SUM([spisanie_kach]*[price]) spisanie_kach
	//|	,SUM([boi]) boi
	//|	,SUM([akcia]) akcia
	//|	,SUM([razniza]) razniza
	//|	,SUM([razniza]) raznizaRaschet
	//|	,SUM([summa]) summa
	//|	,SUM([quantity]) rashod
	//| ,SUM([quantity]) rashodKKM
	//|	,SUM([vozvrat_pok]) vozvrat_pok
	//|	,SUM([peremPlus]) polucheno
	//|	,SUM([peremMinus]) peremesheno
	//|	,SUM([complect]) complect
	//|	,SUM([discount50]) discount50
	//|	,Avg([price]) price
	//|FROM [vv03].[dbo].[DTT] DTT (nolock) 
	//|
	//|where date_tt >= '" + ВнешниеДанные.ФорматПоля(ДатаНачала, Истина) + "' and date_tt <= '" + ВнешниеДанные.ФорматПоля(ДатаКонца, Истина) + "'
	//|";
	//
	//
	//
	//ТекстЗапроса = ТекстЗапроса + "			
	//|GROUP BY 
	//|	 DTT.id_tov " + ?(РазбиватьПоДатам, ", cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime)", "") + "') at [SRV-SQL03]
	//|CREATE INDEX index_id_tov
	//|ON #ls(id_tov)
	//|
	//|SELECT " + ?(РазбиватьПоДатам, "Cast(DTT.Period as datetime) as Period,", "") + "
	//|	UINTov._Fld4946 as TovarUID
	//|	,[post] post
	//|	,[digust] digust
	//|	,( [spisanie]) spisanie
	//|	,([spisanie_kach])  spisanie_kach
	//|	,[boi] boi
	//|	,[akcia] akcia
	//|	,[razniza] razniza
	//|	,[razniza] raznizaRaschet
	//|	,[summa] summa
	//|	,[rashod]  rashod
	//| ,[rashodKKM] rashodKKM
	//|	,[vozvrat_pok] vozvrat_pok
	//|	,[polucheno] polucheno
	//|	,[peremesheno] peremesheno
	//|	,[complect] complect,[discount50] Discount
	//|FROM #ls DTT (nolock)
	////|left outer join(
	////|SELECT
	////|	Checks.id_tov_cl  id_tov, 
	////|	sum(Checks.BaseSum) BaseSum,
	////|	sum(Checks.Quantity) Quantity,
	////|	sum(Checks.Discount) Discount,
	////|   cast(cast(Checks.CloseDate-datepart(weekday,Checks.CloseDate)+1 as date)as datetime) CloseDate
	////|   from(Select  dbo_CheckLine.id_tov_cl,
	////|   dbo_CheckLine.BaseSum,
	////|   dbo_CheckLine.Quantity,
	////|	Case when dbo_Checks.BaseSum=0 then 0 else dbo_Checks.Discount_all*dbo_CheckLine.BaseSum/dbo_Checks.BaseSum end Discount,
	////|   dbo_Checks.CloseDate
	////| FROM [SMS_UNION].[dbo].[CheckLine] (nolock) as dbo_CheckLine
	////|	inner join 	 SMS_Union.dbo.Checks (nolock) as dbo_Checks on (dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
	////|	and dbo_Checks.CloseDate BETWEEN " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаНачала))+" and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаКонца))+ "
	////| and dbo_Checks.OperationType IN (1))
	////| Union all
	////|	Select  dbo_CheckLine.id_tov_cl,
	////|   dbo_CheckLine.BaseSum,
	////|   dbo_Checks.Discount,
	////|	Case when dbo_Checks.BaseSum=0 then 0 else dbo_Checks.Discount*dbo_CheckLine.BaseSum/dbo_Checks.BaseSum end,
	////|   dbo_Checks.CloseDate
	////| FROM [SMS_izbenka].[dbo].[CheckLine] (nolock) as dbo_CheckLine
	////|	inner join 	 SMS_izbenka.dbo.Checks (nolock) as dbo_Checks on (dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
	////|	and dbo_Checks.CloseDate BETWEEN " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаНачала))+" and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаКонца))+ "
	////| and dbo_Checks.OperationType IN (1))) Checks
	////|
	////|
	////|
	////|group by Checks.id_tov_cl,
	////|cast(cast(Checks.CloseDate-datepart(weekday,Checks.CloseDate)+1 as date)as datetime)) vt  on vt.CloseDate=dtt.period and vt.id_tov=dtt.id_tov 
	//
	//
	//
	//
	//
	//|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON DTT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	//|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 TovSpr (nolock) ON DTT.id_tov = TovSpr._Fld760
	//|WHERE TovSpr._Fld3860 = 0
	//|
	//|";
	
	
	
	ТекстЗапроса ="
	|if OBJECT_ID('tempdb..##reportsmarge_chast_total') is not null drop table ##reportsmarge_chast_total
	|--declare @tt_format as int = 2
	
	
	|if OBJECT_ID ('tempdb..#Kontr') is not null drop table #Kontr
	|if OBJECT_ID ('tempdb..#tk_new') is not null drop table #tk_new
	|if OBJECT_ID ('tempdb..#chast') is not null drop table #chast
	|if OBJECT_ID ('tempdb..#d') is not null drop table #d
	|if OBJECT_ID ('tempdb..#sebest_pr') is not null drop table #sebest_pr
	|if OBJECT_ID ('tempdb..#email_assist') is not null drop table #email_assist
	|if OBJECT_ID ('tempdb..#email_tk_assist') is not null drop table #email_tk_assist
	|if OBJECT_ID ('tempdb..#email') is not null drop table #email
	|if OBJECT_ID ('tempdb..#email_tk') is not null drop table #email_tk
	|if OBJECT_ID ('tempdb..#email_teh') is not null drop table #email_teh
	|if OBJECT_ID ('tempdb..#email_assist') is not null drop table #email_assist
	|if OBJECT_ID ('tempdb..#generalUK') is not null drop table #generalUK
	|if OBJECT_ID ('tempdb..#TCorrect') is not null drop table #TCorrect
	|if OBJECT_ID ('tempdb..#VTSums') is not null drop table #VTSums
	
	|declare @date1 as datetime , @date2 as datetime, @tov as int
	|set @date1="+ВнешниеДанные.ФорматПоля(ДатаНачала)+"
	|set @date2 = "+ВнешниеДанные.ФорматПоля(ДатаКонца)+"
	|set @tov = "+ВнешниеДанные.ФорматПоля(21255)+"
	|	  
	|select DTT.id_tov , sum((quantity-dtt.discount50_qty-dtt.discount50_sms_qty)*price) summa 
	|	, sum((quantity-dtt.discount50_qty-dtt.discount50_sms_qty)) post, cast(cast( Cast(DTT.date_tt as datetime)-datepart(weekday, Cast(DTT.date_tt as datetime))+1 as date)as datetime) date_ls
	|into #d
	|from Reports..dtt (nolock)
	|where DTT.date_tt between @date1 and @date2 --and dtt.id_tov=@tov
	|group by DTT.id_tov, cast(cast( Cast(DTT.date_tt as datetime)-datepart(weekday, Cast(DTT.date_tt as datetime))+1 as date)as datetime)
	|-------------------------------------------
	
	|SELECT id_tov ,  convert(decimal(15,2),sum(Summa+transp) / sum(kolvo))  Себест ,convert(decimal(15,2),sum(transp) / sum(kolvo)) Трансп
	|			,  convert(decimal(15,2),sum(SummUpakovka) / sum(kolvo)) [Стоимость Упак], convert(decimal(15,2),AVG(price)) [ЦенаЗакупки с НДС]
	|, cast(cast( Cast(sp.date_r as datetime)-datepart(weekday, Cast(sp.date_r as datetime))+1 as date)as datetime) date_ls
	
	|into #sebest_pr
	|FROM [Reports].[dbo].[Sebest_proizvod_old] sp with(nolock)
	|where date_r between @date1 and @date2	 --and id_tov=@tov
	
	|group by  id_tov, cast(cast( Cast(sp.date_r as datetime)-datepart(weekday, Cast(sp.date_r as datetime))+1 as date)as datetime) 
	|having sum(kolvo)>0
	|--------------------------------------------
	|if OBJECT_ID ('tempdb..#povtpok') is not null drop table #povtpok
	|create table #povtpok (  id_tov_cl int, cn int, cntotal int, date_ls datetime)
	|
	|----------------------------------------------------
	
	|create table #ls (" + ?(РазбиватьПоДатам, "Period datetime,", "") + "  id_tov int, post numeric(15, 3), digust numeric(15, 3)
	|	, spisanie numeric(15, 3), spisanie_kach numeric(15, 3), boi numeric(15, 3)
	|	, akcia numeric(15, 3), razniza numeric(15, 3), raznizaRaschet numeric(15, 3)
	|	, summa numeric(15, 3), rashod numeric(15, 3), rashodKKM numeric(15, 3)
	|	, vozvrat_pok numeric(15, 3), polucheno numeric(15, 3), peremesheno numeric(15, 3), complect numeric(15, 3),  discount50 numeric(15, 3)
	|,  rashodavg numeric(15, 3)--,  price numeric(15, 3)
	|) 
	|
	|Insert into #ls
	|exec ('
	|declare  @tov as int
	|set @tov = "+ВнешниеДанные.ФорматПоля(21255)+"
	|SELECT [period]
	|	,DTT.id_tov
	|	,SUM(DTT.post) post
	|	,SUM(DTT.digust) digust
	|	,SUM(DTT.spisanie) 
	|	,SUM(DTT.spisanie_kach)
	|	,SUM(DTT.boi) boi
	|	,SUM(DTT.akcia) akcia
	|	,SUM(DTT.razniza) razniza
	|	,SUM(DTT.raznizaRaschet) 
	|	,SUM(DTT.summa) summa
	|	,SUM(DTT.rashod) rashod
	| ,SUM(DTT.rashodKKM) rashodKKM
	|	,SUM(DTT.vozvrat_pok) vozvrat_pok
	|	,SUM(DTT.polucheno) polucheno
	|	,SUM(DTT.peremesheno) peremesheno
	|	,SUM(DTT.complect) complect
	|	,SUM(DTT.discount50) discount50
	|	,avg(dtt.rashod) rashodavg--,Avg([price]) price
	|FROM 				(
	|
	|SELECT cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime) as Period
	|	,DTT.id_tov
	|	,DTT.id_tt
	|	,SUM([post]) post
	|	,SUM([digust]) digust
	|	,SUM(([spisanie] + [spisanie_dost])*[price]) spisanie
	|	,SUM([spisanie_kach]*[price]) spisanie_kach
	|	,SUM([boi]) boi
	|	,SUM([akcia]) akcia
	|	,SUM([razniza]) razniza
	|	,SUM([razniza]) raznizaRaschet
	|	,SUM([quantity]) rashod
	| ,SUM([quantity]) rashodKKM
	|	,SUM([vozvrat_pok]) vozvrat_pok
	|	,SUM([peremPlus]) polucheno
	|	,SUM([peremMinus]) peremesheno
	|	,SUM([complect]) complect,SUM([discount50]) discount50,SUM([Summa]) Summa--,Avg([price])
	|FROM [vv03].[dbo].[DTT] DTT (nolock) 
	|
	|where  date_tt >= '" + ВнешниеДанные.ФорматПоля(ДатаНачала, Истина) + "' and date_tt <= '" + ВнешниеДанные.ФорматПоля(ДатаКонца, Истина) + "' --and id_tov=@tov
	|
	|GROUP BY 
	|	 DTT.id_tov,DTT.id_tt, cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime)) as dtt
	|GROUP BY 
	|	 DTT.id_tov,DTT.Period') at [SRV-SQL03]
	|-----------------------------------------------
	|
	|SELECT " + ?(РазбиватьПоДатам, "Cast(DTT.Period as datetime) as Period,", "") + "
	|	UINTov._Fld4946 as TovarUID
	|	,DTT.post post
	|	,DTT.digust digust
	|	,DTT.spisanie spisanie
	|	,DTT.spisanie_kach  spisanie_kach
	|	,DTT.boi boi
	|	,DTT.akcia akcia
	|	,DTT.razniza razniza
	|	,DTT.razniza raznizaRaschet
	|	,DTT.summa summa
	|	,DTT.rashod  rashod
	| ,DTT.rashodKKM rashodKKM
	|	,DTT.vozvrat_pok vozvrat_pok
	|	,DTT.polucheno polucheno
	|	,DTT.peremesheno peremesheno
	|	,DTT.complect complect,DTT.discount50 Discount
	|		,convert(decimal(15,1),round(b.Себест,1)) Себестоим		 
	|		,round(case when d.post >0 then DTT.summa / (1 + isnull(t.nds,0.18) ) /d.post - b.Себест end*isnull(dtt.rashod,0),1) Маржа
	|from  #ls DTT (nolock)
	|	inner join M2..Tovari t on DTT.id_tov=t.id_tov 
	|	inner join #d d on d.id_tov=DTT.id_tov and d.date_ls=DTT.Period
	|	left join #sebest_pr b on DTT.id_tov=b.id_tov  and b.date_ls=DTT.Period
	|
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON DTT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 TovSpr (nolock) ON DTT.id_tov = TovSpr._Fld760";
	
	
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			Если Rs.Fields("TovarUID").Value <> NULL Тогда
				СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			КонецЕсли;
			//Если Rs.Fields("TTUID").Value <> NULL Тогда
			//	СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
			//КонецЕсли;
			Если РазбиватьПоДатам Тогда
				СтрокаДоб.День = Rs.Fields("Period").Value;
			КонецЕсли;
			СтрокаДоб.Поступило = Rs.Fields("post").Value;
			СтрокаДоб.ПоступилоБезВозврата = СтрокаДоб.Поступило;
			СтрокаДоб.Продано = Rs.Fields("Summa").Value;   
			СтрокаДоб.Дегустация = Rs.Fields("digust").Value;
			СтрокаДоб.Списание = Rs.Fields("spisanie").Value;
			СтрокаДоб.СписаниеПоКачеству = Rs.Fields("spisanie_kach").Value;
			СтрокаДоб.Бой = Rs.Fields("boi").Value;
			СтрокаДоб.Акция = Rs.Fields("akcia").Value;
			СтрокаДоб.Разница = Rs.Fields("razniza").Value;
			СтрокаДоб.ПродажиККМ = Rs.Fields("rashodKKM").Value;
			СтрокаДоб.РазницаДляРасчета = Rs.Fields("raznizaRaschet").Value;
			СтрокаДоб.ВозвратПокупателя = Rs.Fields("vozvrat_pok").Value;
			СтрокаДоб.Сумма = Rs.Fields("Summa").Value;
			СтрокаДоб.ПолученоСДругихТТ = Rs.Fields("polucheno").Value;
			СтрокаДоб.ОтправленоНаДругиеТТ = Rs.Fields("peremesheno").Value;
			СтрокаДоб.Комплектация = Rs.Fields("complect").Value;
			СтрокаДоб.СуммаСкидок = Rs.Fields("discount").Value;
			СтрокаДоб.Маржа = Rs.Fields("Маржа").Value;
			
			СтрокаДоб.Неделя=	(НачалоНедели(ТекущаяДата())-СтрокаДоб.День)/(7*24*60*60);
			rs.MoveNext();
			//rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Возврат ТабДанные;
	
КонецФункции	

//+++АК LAGP 2017.12.23 ИП-00017361 Добавлена информация по категориям/подкатегориям для рассылки "Динамика доли потерь". Основная таблица.
Функция ПолучитьДвиженияТоваровПолнаяПоКатегориям(ДатаНачала, ДатаКонца, ТорговаяТочка = Неопределено, Номенклатура = Неопределено, РазбиватьПоДатам = Истина) Экспорт
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("TTUID"				, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("TovarUID"			, Новый ОписаниеТипов("Строка"));	
	ТабДанные.Колонки.Добавить("Категория"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("Подкатегория"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	Если РазбиватьПоДатам Тогда
		ТабДанные.Колонки.Добавить("День"			, Новый ОписаниеТипов("Дата"));
	КонецЕсли;	
	ТабДанные.Колонки.Добавить("Поступило"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПоступилоБезВозврата", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Дегустация"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Списание"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СписаниеПоКачеству"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Бой"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Акция"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Разница"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВозвратПокупателя"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Продано"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПродажиККМ"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("РазницаДляРасчета"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПолученоСДругихТТ"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ОтправленоНаДругиеТТ", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Комплектация"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаСкидок"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СредВыручка"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СредПродажа50"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СредСписание"		, Новый ОписаниеТипов("Число"));
	
	ТабДанные.Колонки.Добавить("Неделя"		, Новый ОписаниеТипов("Число"));
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
	
	Если ADOСоединение = Неопределено Тогда
		Возврат ТабДанные;
	КонецЕсли;
	
	ТекстЗапроса = "create table #ls (" + ?(РазбиватьПоДатам, "Period datetime,", "") + " id_tt int, id_tov int, podkategoriya int, kategoriya int, post numeric(15, 3), digust numeric(15, 3)
	|	, spisanie numeric(15, 3), spisanie_kach numeric(15, 3), boi numeric(15, 3)
	|	, akcia numeric(15, 3), razniza numeric(15, 3), raznizaRaschet numeric(15, 3)
	|	, summa numeric(15, 3), rashod numeric(15, 3), rashodKKM numeric(15, 3)
	|	, vozvrat_pok numeric(15, 3), polucheno numeric(15, 3), peremesheno numeric(15, 3), complect numeric(15, 3),  discount50 numeric(15, 3)  
	|	, AvgViruchka numeric(15, 3), AvgProdaja50 numeric(15, 3), AvgSpisanie numeric(15, 3))
	|
	|Insert into #ls
	|exec ('SELECT " + ?(РазбиватьПоДатам, "cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime) as Period,", "") + "
	|  DTT.id_tt
	|  ,DTT.id_tov
	|  ,NULL as podkategoriya
	|  ,NULL as kategoriya
	|  ,SUM([post]) post
	|  ,SUM([digust]) digust
	|  ,SUM([spisanie]*[price]) spisanie
	|  ,SUM([spisanie_kach]*[price]) spisanie_kach
	|  ,SUM([boi]) boi
	|  ,SUM([akcia]) akcia
	|  ,SUM([razniza]) razniza
	|  ,SUM([razniza]) raznizaRaschet
	|  ,SUM([summa]) summa
	|  ,SUM([quantity]) rashod
	|  ,SUM([quantity]) rashodKKM
	|  ,SUM([vozvrat_pok]) vozvrat_pok
	|  ,SUM([peremPlus]) polucheno
	|  ,SUM([peremMinus]) peremesheno
	|  ,SUM([complect]) complect
	|  ,SUM([discount50]) discount50
	|  ,SUM([summa]) AvgViruchka
	|  ,SUM([discount50]) AvgProdaja50
	|  ,SUM([spisanie]*[price]) AvgSpisanie
	|FROM [vv03].[dbo].[DTT] DTT (nolock) 
	|
	|where date_tt >= '" + ВнешниеДанные.ФорматПоля(ДатаНачала, Истина) + "' and date_tt <= '" + ВнешниеДанные.ФорматПоля(ДатаКонца, Истина) + "'
	|";	
	
	ТекстЗапроса = ТекстЗапроса + "			
	|GROUP BY 
	|	 DTT.id_tt, DTT.id_tov " + ?(РазбиватьПоДатам, ", cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime)", "") + "') at [SRV-SQL03]
	|CREATE INDEX index_idtt
	|ON #ls(id_tt)
	|CREATE INDEX index_id_tov
	|ON #ls(id_tov)
	|
	|SELECT " + ?(РазбиватьПоДатам, "Cast(DTT.Period as datetime) as Period,", "") + "  
	|	UINTT._Fld4946 as TTUID
	|	,UINTov._Fld4946 as TovarUID
	|	,CASE WHEN (TovSpr._ParentIDRRef = 0x96B2005056A0010611E58C5FD1A4F329) THEN CAST(master.dbo.Binary2UID(TovSprFolder._IDRRef) AS nvarchar(36)) ELSE CAST(master.dbo.Binary2UID(TovSprFolder._IDRRef) AS nvarchar(36)) END as podkategoriya
	|	,CASE WHEN (TovSpr._ParentIDRRef = 0x96B2005056A0010611E58C5FD1A4F329) THEN CAST(master.dbo.Binary2UID(TovSprFolder2._IDRRef) AS nvarchar(36)) ELSE CAST(master.dbo.Binary2UID(TovSprFolder._ParentIDRRef) AS nvarchar(36)) END as kategoriya
	|	,[post] post
	|	,[digust] digust
	|	,([spisanie]) spisanie
	|	,([spisanie_kach])  spisanie_kach
	|	,[boi] boi
	|	,[akcia] akcia
	|	,[razniza] razniza
	|	,[razniza] raznizaRaschet
	|	,[summa] summa
	|	,[rashod]  rashod
	| 	,[rashodKKM] rashodKKM
	|	,[vozvrat_pok] vozvrat_pok
	|	,[polucheno] polucheno
	|	,[peremesheno] peremesheno
	|	,[complect] complect
	|	,[discount50] Discount
	|	,[AvgViruchka] AvgViruchka
	|	,[AvgProdaja50] AvgProdaja50
	|	,[AvgSpisanie] AvgSpisanie
	|FROM #ls DTT (nolock)
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON DTT.id_tt = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON DTT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 TovSpr (nolock) ON DTT.id_tov = TovSpr._Fld760
	|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 AS TovSprFolder WITH (nolock) 
	|  ON (TovSpr._ParentIDRRef <> 0x96B2005056A0010611E58C5FD1A4F329 and TovSpr._ParentIDRRef = TovSprFolder._IDRRef)
	|  or (TovSpr._ParentIDRRef = 0x96B2005056A0010611E58C5FD1A4F329 and TovSpr._Fld7579RRef = TovSprFolder._IDRRef)
	|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 AS TovSprFolder2 WITH (nolock) ON TovSprFolder._ParentIDRRef = TovSprFolder2._IDRRef
	|WHERE TovSpr._Fld3860 = 0
	|";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ДатаПроверки = ТекущаяДата();
		
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			Если Rs.Fields("TovarUID").Value <> NULL Тогда
				СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			КонецЕсли;
			Если Rs.Fields("TTUID").Value <> NULL Тогда
				СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
			КонецЕсли;
			Если Rs.Fields("kategoriya").Value <> NULL Тогда
				СтрокаДоб.Категория = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("kategoriya").Value));
			КонецЕсли;
			Если Rs.Fields("podkategoriya").Value <> NULL Тогда
				СтрокаДоб.Подкатегория = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("podkategoriya").Value));
			КонецЕсли;
			Если РазбиватьПоДатам Тогда
				СтрокаДоб.День = Rs.Fields("Period").Value;
			КонецЕсли;
			СтрокаДоб.Поступило = Rs.Fields("post").Value;
			СтрокаДоб.ПоступилоБезВозврата = СтрокаДоб.Поступило;
			СтрокаДоб.Продано = Rs.Fields("Summa").Value;   
			СтрокаДоб.Дегустация = Rs.Fields("digust").Value;
			СтрокаДоб.Списание = Rs.Fields("spisanie").Value;
			СтрокаДоб.СписаниеПоКачеству = Rs.Fields("spisanie_kach").Value;
			СтрокаДоб.Бой = Rs.Fields("boi").Value;
			СтрокаДоб.Акция = Rs.Fields("akcia").Value;
			СтрокаДоб.Разница = Rs.Fields("razniza").Value;
			СтрокаДоб.ПродажиККМ = Rs.Fields("rashodKKM").Value;
			СтрокаДоб.РазницаДляРасчета = Rs.Fields("raznizaRaschet").Value;
			СтрокаДоб.ВозвратПокупателя = Rs.Fields("vozvrat_pok").Value;
			СтрокаДоб.Сумма = Rs.Fields("Summa").Value;
			СтрокаДоб.ПолученоСДругихТТ = Rs.Fields("polucheno").Value;
			СтрокаДоб.ОтправленоНаДругиеТТ = Rs.Fields("peremesheno").Value;
			СтрокаДоб.Комплектация = Rs.Fields("complect").Value;
			СтрокаДоб.СуммаСкидок = Rs.Fields("discount").Value; 
			СтрокаДоб.СредВыручка = Rs.Fields("AvgViruchka").Value;
			СтрокаДоб.СредПродажа50 = Rs.Fields("AvgProdaja50").Value;
			СтрокаДоб.СредСписание = Rs.Fields("AvgSpisanie").Value;
			
			СтрокаДоб.Неделя=	(НачалоНедели(ДатаПроверки)-СтрокаДоб.День)/(7*24*60*60); 
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	//+++АК LAGP 2018.01.15 ИП-00017361 Иногда приходят сюда одинаковые поля, которые задваивают информацию по количеству позиций.
	Для каждого СтрокаТаб Из ТабДанные Цикл
		Если СтрокаТаб.Категория = СтрокаТаб.Подкатегория Тогда
			//ТабДанные.Удалить(СтрокаТаб);
			СтрокаТаб.Категория = СтрокаТаб.Подкатегория.Родитель; //+++АК LAGP 2018.05.18 ИП-00018590 В некоторых случаях, приходит категория = подкатегория.
		КонецЕсли;			
	КонецЦикла;	
	//---АК LAGP
	
	Возврат ТабДанные;
	
КонецФункции	

//+++АК LAGP 2017.12.23 ИП-00017361 Для рассылки "Динамика доли потерь". Вспомогательная таблица.
Функция СформироватьТЗНедопоставок(ДатаНачала, ДатаОкончания, ТЗТТ, Темп)
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("ИдТовара"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ИдПроизводитель"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Характеристика"		, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабДанные.Колонки.Добавить("ВскрытаУпаковка"	, Новый ОписаниеТипов("Строка"));	
	ТабДанные.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("Наименование"		, Новый ОписаниеТипов("Строка"));	
	ТабДанные.Колонки.Добавить("НомерТТ"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Получатель"			, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));	
	ТабДанные.Колонки.Добавить("Количество"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Цена"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ДатаСоздания"		, Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.Дата))); //само подставит начало дня
	ТабДанные.Колонки.Добавить("ДатаПроизводства"	, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("Неделя"				, Новый ОписаниеТипов("Число"));
		
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//добавляю ограничение по СтруктурнымЕдиницам, беру только те, что есть в таблице ДанныеПоЧекам
	СтрМаг="";
	Если ТЗТТ.Количество() > 0 Тогда
		СтрМаг = " and (";
		ТЗТТ.Колонки.Добавить("НомерТочки");
		Для каждого СтрокаТЗТТ Из ТЗТТ Цикл
			Если НЕ СтрокаТЗТТ.ТТ.НомерТочки = 0 Тогда				
				СтрокаТЗТТ.НомерТочки = СтрокаТЗТТ.ТТ.НомерТочки;
				СтрМаг = СтрМаг + "TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(СтрокаТЗТТ.ТТ.НомерТочки) + " or ";
			КонецЕсли;	
		КонецЦикла;	
		СтрМаг = Лев(СтрМаг, СтрДлина(СтрМаг) - 4) + ")";
	КонецЕсли;
	
	ТекстЗапросаSQL = "SELECT DISTINCT 
	|TD.ShopNo_rep
	|, TD.Id_doc
	|, TD.opendate
	|, TD.closedate
	|, TD.id_tov
	|, TD.id_kontr
	|, CAST(CASE WHEN ISNULL(TD.Date_proizv, '1900-01-01') < '2000-01-01' THEN '1900-01-01' ELSE TD.Date_proizv END as datetime) as Date_proizv
	|, TD.Quantity as Quantity
	|, TD.Quantity_inv as Quantity_inv
	|, TD.operation_type
	|, TD.Corr_id_tt
	|, TD.Upakovka_Opened
	|, TD.Confirm_type
	|, TD.Confirm_date
	|, CAST(TD.Confirm_reason as integer) as Confirm_reason
	|, TD.id_reason
	|, TD.balance_ost
	|, TD.Descr
	|, TD.Quantity_inv
	|, TD.Basesum
	|, TD.id_vikl
	|, TD.CashierID
	|, CONVERT(datetime, TD.time_delivery) as time_delivery
	|, ISNULL(TD.Komment_raspr, '') as Komment_raspr
	|FROM  SMS_Repl.dbo.TD_move as TD with (nolock)
	|inner join(SELECT distinct  TD.id_tov
	|FROM  SMS_Repl.dbo.TD_move as TD with (nolock)
	|WHERE TD.Operation_type =400 and TD.opendate>="+ВнешниеДанные.ФорматПоля(ДатаНачала) +" and TD.opendate<="+ВнешниеДанные.ФорматПоля(ДатаОкончания) +  "
	|	and td.quantity>0 and (TD.Confirm_reason <> 8 or TD.Confirm_reason is null) and TD.Upakovka_Opened=2
	|) as Tov on Tov.id_tov=Td.id_tov
	| WHERE TD.Operation_type =400 and TD.opendate>="+ВнешниеДанные.ФорматПоля(ДатаНачала) +" and TD.opendate<="+ВнешниеДанные.ФорматПоля(ДатаОкончания) +  "
	|	and td.quantity>0 and (TD.Confirm_reason <> 8 or TD.Confirm_reason is null)" + СтрМаг;	
	
	ДокЗакрыт = Ложь;
	ИнвентаризацияРаспечатана = Ложь;
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НовСтр = ТабДанные.Добавить();
			НовСтр.ИдТовара = rs.Fields("id_tov").Value;
			НовСтр.ИдПроизводитель = rs.Fields("id_kontr").Value;
			НовСтр.ДатаПроизводства = ?(rs.Fields("Date_proizv").Value < '2000-01-01', '00010101', rs.Fields("Date_proizv").Value);
			НовСтр.Количество = rs.Fields("Quantity").Value;
			НовСтр.Сумма = rs.Fields("Basesum").Value;
			НовСтр.Цена = ?(НовСтр.Количество = 0, 0, НовСтр.Сумма / НовСтр.Количество);			
			НовСтр.ДатаСоздания = rs.Fields("opendate").Value; 
			НовСтр.НомерТТ = rs.Fields("ShopNo_rep").Value;
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
		
	//По номеру точки получаю ссылки структурных единиц
	Для каждого СтрокаТЗНедопоставок из ТабДанные Цикл	
		НайденнаяТТ = ТЗТТ.Найти(СтрокаТЗНедопоставок.НомерТТ, "НомерТочки");
		Если ЗначениеЗаполнено(НайденнаяТТ) Тогда
			СтрокаТЗНедопоставок.Получатель = НайденнаяТТ.ТТ;
		КонецЕсли;
		
		СтрокаТЗНедопоставок.Неделя = Окр((НачалоДня(ДатаОкончания)-СтрокаТЗНедопоставок.ДатаСоздания)/(7*24*60*60) + 0.5, 0, 0); //вычисление недели с округлением всегда в большую сторону (0.1 -> 1)
		Если СтрокаТЗНедопоставок.Неделя = 0 Тогда
			СтрокаТЗНедопоставок.Неделя = 1;	
		КонецЕсли;
	КонецЦикла;
	
	СписокИд = ТабДанные.ВыгрузитьКолонку("ИдТовара");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov КАК ИД,
	|	Номенклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.id_tov В(&СписокИд)";
	
	Запрос.УстановитьПараметр("СписокИд", СписокИд);
	
	ТзНом = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ТабДанные Цикл
		
		НайдСтр = ТзНом.Найти(Стр.ИдТовара, "Ид");
		
		Если Не НайдСтр = Неопределено Тогда
			Стр.Номенклатура = НайдСтр.Ссылка;
			Стр.Наименование = НайдСтр.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Номенклатура", ТзНом.ВыгрузитьКолонку("Ссылка"));
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Характеристика,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Номенклатура,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИДПроизв
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец В (&Номенклатура)";
	
	ТзХар = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ТабДанные Цикл
		
		НайдСтр = ТзХар.НайтиСтроки(Новый Структура("Номенклатура, ИДПроизв", Стр.Номенклатура,Стр.ИдПроизводитель));
		
		Если НайдСтр.Количество() > 0 Тогда
			Стр.Характеристика = НайдСтр[0].Характеристика;
		КонецЕсли;
		
	КонецЦикла;
	
	ДатыДР = ТабДанные.Скопировать(,"ДатаСоздания");
	ДатыДР.Свернуть("ДатаСоздания");
	ДатыДР = ДатыДР.ВыгрузитьКолонку("ДатаСоздания");
	ТЗТТ = ТЗТТ.ВыгрузитьКолонку("ТТ");
	
	//вычисляет, сколько отправил склад, а сколько пришло на структурную единицу
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ДатыДР);    
	Запрос.УстановитьПараметр("ТЗТТ", ТЗТТ);  
	Запрос.УстановитьПараметр("ТЗОперации", ТабДанные); 
	Запрос.УстановитьПараметр("Архив", Справочники.Номенклатура.НайтиПоНаименованию("Архив"));
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗОперации.Номенклатура КАК Номенклатура,
	|	ТЗОперации.Характеристика КАК Характеристика,
	|	ТЗОперации.ДатаПроизводства КАК ДатаПроизводства,
	|	ТЗОперации.ДатаСоздания КАК ДатаСоздания,
	|	ТЗОперации.Получатель КАК Получатель,
	|	ТЗОперации.Количество,
	|	ТЗОперации.ВскрытаУпаковка,
	|	ТЗОперации.Неделя
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&ТЗОперации КАК ТЗОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОпераций.Номенклатура,
	|	ВЫБОР
	|		КОГДА втОпераций.Номенклатура = &Архив
	|			ТОГДА втОпераций.Номенклатура.ГруппаДоПомещенияВАрхив
	|		ИНАЧЕ втОпераций.Номенклатура.Родитель
	|	КОНЕЦ КАК Подкатегория,
	|	ВЫБОР
	|		КОГДА втОпераций.Номенклатура = &Архив
	|			ТОГДА втОпераций.Номенклатура.ГруппаДоПомещенияВАрхив
	|		ИНАЧЕ втОпераций.Номенклатура.Родитель.Родитель
	|	КОНЕЦ КАК Категория
	|ПОМЕСТИТЬ втКатегории
	|ИЗ
	|	вт КАК втОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика КАК Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения КАК ДатаРаспределения,
	|	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Получатель,
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК ОтправилСклад
	|ПОМЕСТИТЬ втРасходники
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения, ДЕНЬ) В (&Дата)
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен
	|	И РасходныйОрдерСкладТовары.Ссылка.Получатель В(&ТЗТТ)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения,
	|	РасходныйОрдерСкладТовары.Ссылка.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Номенклатура КАК Номенклатура,
	|	вт.Характеристика,
	|	вт.ДатаПроизводства,
	|	вт.ДатаСоздания КАК ДатаСоздания,
	|	вт.Получатель КАК ТТ,
	|	вт.Количество КАК КоличествоПришло,
	|	вт.ВскрытаУпаковка,
	|	ЕСТЬNULL(РасходныйОрдерСкладТовары.ОтправилСклад, 0) КАК ОтправилСклад,
	|	вт.Неделя
	|ПОМЕСТИТЬ втФинал
	|ИЗ
	|	вт КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРасходники КАК РасходныйОрдерСкладТовары
	|		ПО (вт.Характеристика = РасходныйОрдерСкладТовары.Характеристика)
	|			И (вт.Получатель = РасходныйОрдерСкладТовары.Получатель)
	|			И (вт.ДатаПроизводства = РасходныйОрдерСкладТовары.ДатаПроизводства)
	|			И (вт.ДатаСоздания = РасходныйОрдерСкладТовары.ДатаРаспределения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРасходники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФинал.ТТ,
	|	втФинал.Неделя,
	|	СУММА(втФинал.КоличествоПришло) КАК КоличествоПришло,
	|	СУММА(втФинал.ОтправилСклад) КАК ОтправилСклад,
	|	втКатегории.Подкатегория,
	|	втКатегории.Категория
	|ИЗ
	|	втФинал КАК втФинал
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКатегории КАК втКатегории
	|		ПО втФинал.Номенклатура = втКатегории.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	втФинал.Номенклатура,
	|	втФинал.ТТ,
	|	втФинал.Неделя,
	|	втКатегории.Подкатегория,
	|	втКатегории.Категория";
	
	ВыборкаЗапросаНедопоставок = Запрос.Выполнить().Выбрать();
	
	ПутьДоТЗНедопоставокНаДиске = "";
	ТЗНедопоставок = Новый ТаблицаЗначений;
	ТЗНедопоставок.Колонки.Добавить("ТТ"				, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТЗНедопоставок.Колонки.Добавить("Неделя"			, Новый ОписаниеТипов("Число"));
	ТЗНедопоставок.Колонки.Добавить("Подкатегория"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗНедопоставок.Колонки.Добавить("Категория"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗНедопоставок.Колонки.Добавить("КоличествоПришло"	, Новый ОписаниеТипов("Число"));
	ТЗНедопоставок.Колонки.Добавить("ОтправилСклад"		, Новый ОписаниеТипов("Число"));	
	
	//не хватало памяти, сделал через выборку
	Пока ВыборкаЗапросаНедопоставок.Следующий() Цикл
		СтрокаТЗНедопоставок = ТЗНедопоставок.Добавить();
		СтрокаТЗНедопоставок.ТТ 				= ВыборкаЗапросаНедопоставок.ТТ;                                        
		СтрокаТЗНедопоставок.Неделя 			= ВыборкаЗапросаНедопоставок.Неделя;
		СтрокаТЗНедопоставок.Подкатегория 		= ВыборкаЗапросаНедопоставок.Подкатегория;
		СтрокаТЗНедопоставок.Категория 			= ВыборкаЗапросаНедопоставок.Категория;
		СтрокаТЗНедопоставок.КоличествоПришло 	= ВыборкаЗапросаНедопоставок.КоличествоПришло;
		СтрокаТЗНедопоставок.ОтправилСклад 		= ВыборкаЗапросаНедопоставок.ОтправилСклад;
	КонецЦикла;	
	
	Если ТЗНедопоставок.Количество() > 0 Тогда
		ЗначениеВФайл(Темп + "ТзНедопоставок.tmp", ТЗНедопоставок);
		ПутьДоТЗНедопоставокНаДиске = Темп + "ТзНедопоставок.tmp";

	КонецЕсли;	
	
	Возврат ПутьДоТЗНедопоставокНаДиске;
	
КонецФункции	


Процедура ОтправитьПисьмоПоКатегориям(ЭлПочта,ТабДок,Тема)
	
	
	//Для каждого Стр Из Выб.МестоВыкладки.Контролеры Цикл
	//	Если МассивАдресов.Найти(Стр.ФизЛицо)=Неопределено Тогда
	//		МассивАдресов.Добавить(Стр.ФизЛицо);
	//	КонецЕсли; 
	//КонецЦикла;
	Кому = Новый СписокЗначений;
	Кому.Добавить(ЭлПочта);
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	
	
	ВремФайл = ПолучитьИмяВременногоФайла("htm");
	ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
	
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль = Найти(Текст, "<STYLE");
	КонецБлокаСтиль = Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело = Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстПолный = "<HTML>" + Символы.ПС +ТекстСтиль +Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; CELLPADDING=5; border = 0");
	//ТекстПолный = СтрЗаменить(ТекстПолный, "border-left-style: none", "");
	//ТекстПолный = СтрЗаменить(ТекстПолный, "border-top-style: none", "");
	СтруктураНовогоПисьма.Вставить("Тело",ТекстПолный);
	
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	СтруктураНовогоПисьма.Вставить("Тема", Тема);
	//СтруктураНовогоПисьма.Вставить("Тело", Тело);
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	
	//УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
КонецПроцедуры

//+++АК LAGP 2017.12.23 ИП-00017361 ТабДокТело преобразуется в HTML и запишется в тело, ТабДок запишется как файл XLS и заархивируется во вложение
Процедура ОтправитьПисьмоПоКатегориямСВложениемИТелом(ЭлПочта, ТабДок, ТабДокТело, Тема)
	
	Кому = Новый СписокЗначений;
	
	Для каждого ЭлементМассиваАдресов Из ЭлПочта Цикл
		Кому.Добавить(ЭлементМассиваАдресов);
	КонецЦикла;	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);

	Темп = КаталогВременныхФайлов();
	ИмяФайлаТемп = "ДинамикаДолиПотерь_" + Формат(ТекущаяДата(), "ДФ=d.M.yy");
	
	ТабДок.Записать(Темп + ИмяФайлаТемп + ".xlsx", ТипФайлаТабличногоДокумента.XLSX);
	ФайлАрхива = Новый ЗаписьZipФайла(Темп + ИмяФайлаТемп + ".zip", , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ФайлАрхива.Добавить(Темп + ИмяФайлаТемп + ".xlsx", РежимСохраненияПутейZIP.СохранятьОтносительныеПути,РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);    
	ФайлАрхива.Записать(); 
	
	СтруктураНовогоПисьма.Вставить("ФайлВложение", Темп + ИмяФайлаТемп + ".zip");
	
	УдалитьФайлы(Темп + ИмяФайлаТемп + ".xlsx",);	
	
	ВремФайл = ПолучитьИмяВременногоФайла("html");	
	
	ТабДокТело.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
	
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль = Найти(Текст, "<STYLE");
	КонецБлокаСтиль = Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело = Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстТело = СтрЗаменить(ТекстТело, "<BODY STYLE=", "<BODY yandex STYLE=");
	
	ТекстПолный = "<HTML>" + Символы.ПС +ТекстСтиль +Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; CELLPADDING=5; border = 1");
	СтруктураНовогоПисьма.Вставить("Тело",ТекстПолный);
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	СтруктураНовогоПисьма.Вставить("Тема", Тема);
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	УдалитьФайлы(ВремФайл,);
	УдалитьФайлы(Темп + ИмяФайлаТемп + ".zip",);
	
КонецПроцедуры


Процедура СделатьРассылкуПриВыводеТовара() Экспорт
	
	// Вставить содержимое обработчика.
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат;
	Иначе         
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Владелец.id_tov КАК id_tov,
	|	ХарактеристикиНоменклатуры.Причина,
	|	ХарактеристикиНоменклатуры.Статус,
	|	ХарактеристикиНоменклатуры.ДатаВывода
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец.НеобходимаРассылка
	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	
	
	Результат = Запрос.Выполнить();
	ТЗНом=Результат.Выгрузить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	МасНом=Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МасНом.Найти(ВыборкаДетальныеЗаписи.id_tov)=Неопределено Тогда
			МасНом.Добавить(ВыборкаДетальныеЗаписи.id_tov);
		КонецЕсли; 
	КонецЦикла;
	
	Если МасНом.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	
	Дата1=НачалоНедели(ТекущаяДата())-7*7*24*60*60;
	Дата2=КонецНедели(ТекущаяДата());
	СтрНом="";
	Для каждого Эл Из МасНом Цикл
		СтрНом=СтрНом+СтрЗаменить(Строка(ВнешниеДанные.ФорматПоля(Эл))," ","")+",";
	КонецЦикла;
	СтрНом=Лев(СтрНом,СтрДлина(СтрНом)-1);
	
	
	
	
	СтрЗапрос ="
	|if OBJECT_ID('tempdb..##reportsmarge_chast_total') is not null drop table ##reportsmarge_chast_total
	|--declare @tt_format as int = 2
	
	
	|if OBJECT_ID ('tempdb..#Kontr') is not null drop table #Kontr
	|if OBJECT_ID ('tempdb..#tk_new') is not null drop table #tk_new
	|if OBJECT_ID ('tempdb..#chast') is not null drop table #chast
	|if OBJECT_ID ('tempdb..#d') is not null drop table #d
	|if OBJECT_ID ('tempdb..#sebest_pr') is not null drop table #sebest_pr
	|if OBJECT_ID ('tempdb..#email_assist') is not null drop table #email_assist
	|if OBJECT_ID ('tempdb..#email_tk_assist') is not null drop table #email_tk_assist
	|if OBJECT_ID ('tempdb..#email') is not null drop table #email
	|if OBJECT_ID ('tempdb..#email_tk') is not null drop table #email_tk
	|if OBJECT_ID ('tempdb..#email_teh') is not null drop table #email_teh
	|if OBJECT_ID ('tempdb..#email_assist') is not null drop table #email_assist
	|if OBJECT_ID ('tempdb..#generalUK') is not null drop table #generalUK
	|if OBJECT_ID ('tempdb..#TCorrect') is not null drop table #TCorrect
	|if OBJECT_ID ('tempdb..#VTSums') is not null drop table #VTSums
	
	|declare @date1 as datetime , @date2 as datetime, @tov as int
	|set @date1="+ВнешниеДанные.ФорматПоля(Дата1)+"
	|set @date2 = "+ВнешниеДанные.ФорматПоля(Дата2)+"
	|set @tov = "+ВнешниеДанные.ФорматПоля(999)+"
	|	  
	|select DTT.id_tov , sum((quantity-dtt.discount50_qty-dtt.discount50_sms_qty)*price) summa 
	|	, sum((quantity-dtt.discount50_qty-dtt.discount50_sms_qty)) post, cast(cast( Cast(DTT.date_tt as datetime)-datepart(weekday, Cast(DTT.date_tt as datetime))+1 as date)as datetime) date_ls
	|into #d
	|from Reports..dtt (nolock)
	|where DTT.date_tt between @date1 and @date2 and dtt.id_tov=@tov
	|group by DTT.id_tov, cast(cast( Cast(DTT.date_tt as datetime)-datepart(weekday, Cast(DTT.date_tt as datetime))+1 as date)as datetime)
	|-------------------------------------------
	
	|if OBJECT_ID ('tempdb..#chast2') is not null drop table #chast2
	|create table #chast2 ( id_tov_ls int, частота decimal(15,3),date_ls datetime)
	|
	|
	|insert into #chast2( id_tov_ls , частота,date_ls)
	
	|select ls.id_tov_ls  
	|, case when SUM ( ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end) > 0 then
	|						  SUM (ls.sales_fact)  / 
	|						  SUM (ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end)  * 10 else 0 end частота 
	|, cast(cast( Cast(ls.date_ls as datetime)-datepart(weekday, Cast(ls.date_ls as datetime))+1 as date)as datetime) date_ls
	|																				 
	|	  from m2..Lost_sales (nolock) ls
	|	  where ls.date_ls between @date1 and @date2 and ls.sales_fact>0 --and ls.chastota >0 
	|	  group by ls.id_tov_ls,cast(cast( Cast(ls.date_ls as datetime)-datepart(weekday, Cast(ls.date_ls as datetime))+1 as date)as datetime) 
	
	
	|-------------------------------------------------------------------------
	|SELECT id_tov ,  convert(decimal(15,2),sum(Summa+transp) / sum(kolvo))  Себест ,convert(decimal(15,2),sum(transp) / sum(kolvo)) Трансп
	|			,  convert(decimal(15,2),sum(SummUpakovka) / sum(kolvo)) [Стоимость Упак], convert(decimal(15,2),AVG(price)) [ЦенаЗакупки с НДС]
	|, cast(cast( Cast(sp.date_r as datetime)-datepart(weekday, Cast(sp.date_r as datetime))+1 as date)as datetime) date_ls
	
	|into #sebest_pr
	|FROM [Reports].[dbo].[Sebest_proizvod_old] sp with(nolock)
	|where date_r between @date1 and @date2	 and id_tov=@tov
	
	|group by  id_tov, cast(cast( Cast(sp.date_r as datetime)-datepart(weekday, Cast(sp.date_r as datetime))+1 as date)as datetime) 
	|having sum(kolvo)>0
	|--------------------------------------------
	|if OBJECT_ID ('tempdb..#povtpok') is not null drop table #povtpok
	|create table #povtpok (  id_tov_cl int, cn int, cntotal int, date_ls datetime)
	|
	|
	|insert into #povtpok( id_tov_cl, cn,cntotal, date_ls)
	
	|select  a.id_tov_cl, sum(case when cn=1 then 0 else 1 end) cn, count(a.BonusCard_cl) cntotal, a.date_ls
	|From(
	|select a.BonusCard_cl, a.id_tov_cl, count(a.rn) cn, a.date_ls
	|from (
	|select BonusCard_cl, id_tov_cl, BonusCard_cl rn 
	|, cast(cast( Cast(date_ch as datetime)-datepart(weekday, Cast(date_ch as datetime))+1 as date)as datetime)  date_ls
	|from SMS_UNION..Checkline as cl with(nolock)
	|where OperationType_cl=1  and date_ch between @date1 and @date2  and id_tov_cl=@tov
	
	|union all
	|select BonusCard_cl, id_tov_cl, BonusCard_cl 
	|, cast(cast( Cast(date_ch as datetime)-datepart(weekday, Cast(date_ch as datetime))+1 as date)as datetime) 
	
	|from SMS_izbenka..Checkline as cl with(nolock)
	|where OperationType_cl=1  and date_ch between @date1 and @date2  and   id_tov_cl=@tov
	
	|) a
	//|where a.rn>1
	|group by a.BonusCard_cl, a.id_tov_cl,a.date_ls
	|)a  group by  a.id_tov_cl,a.date_ls
	|----------------------------------------------------
	|create table #ls (Period datetime,  id_tov int--, post numeric(15, 3), digust numeric(15, 3)
	|	, spisanie numeric(15, 3), spisanie_kach numeric(15, 3),spisanieavg numeric(15, 3), spisanie_kachavg numeric(15, 3)--, boi numeric(15, 3)
	|	--, akcia numeric(15, 3), razniza numeric(15, 3), raznizaRaschet numeric(15, 3)
	|	, rashod numeric(15, 3), rashodavg numeric(15, 3)--, rashodKKM numeric(15, 3)
	|	--, vozvrat_pok numeric(15, 3), polucheno numeric(15, 3), peremesheno numeric(15, 3), complect numeric(15, 3)
	|, discount50 numeric(15, 3), Vyruchka numeric(15, 3), Summaavg numeric(15, 3)
	|) 
	|
	|Insert into #ls
	|exec ('
	|declare @date1 as datetime , @date2 as datetime, @tov as int
	
	|set @date1='"+ВнешниеДанные.ФорматПоля(Дата1)+"'
	|set @date2 = '"+ВнешниеДанные.ФорматПоля(Дата2)+"'
	|set @tov = "+ВнешниеДанные.ФорматПоля(999)+"
	|
	|Select dtt.period,DTT.id_tov,sum(dtt.spisanie) spisanie,sum(dtt.spisanie_kach) spisanie_kach ,avg(dtt.spisanie) spisanieavg,
	|avg(dtt.spisanie_kach) spisanie_kachavg
	|,sum(dtt.rashod) rashod,
	|avg(dtt.rashod) rashodavg,SUM(dtt.discount50) discount50,SUM(dtt.Summa) Vyruchka,avg(dtt.Summa) Summaavg
	| from(
	|
	|SELECT cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime) as Period
	|	,DTT.id_tov
	|	,DTT.id_tt
	|	,SUM([post]) post
	|	,SUM([digust]) digust
	|	,SUM(([spisanie] + [spisanie_dost])*[price]) spisanie
	|	,SUM([spisanie_kach]*[price]) spisanie_kach
	|	,SUM([boi]) boi
	|	,SUM([akcia]) akcia
	|	,SUM([razniza]) razniza
	|	,SUM([razniza]) raznizaRaschet
	|	,SUM([quantity]) rashod
	| ,SUM([quantity]) rashodKKM
	|	,SUM([vozvrat_pok]) vozvrat_pok
	|	,SUM([peremPlus]) polucheno
	|	,SUM([peremMinus]) peremesheno
	|	,SUM([complect]) complect,SUM([discount50]) discount50,SUM([Summa]) Summa
	|FROM [vv03].[dbo].[DTT] DTT (nolock) 
	|
	|where date_tt between @date1 and @date2 and id_tov=@tov
	|
	|GROUP BY 
	|	 DTT.id_tov,DTT.id_tt, cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime)) as dtt
	| GROUP BY dtt.period,  DTT.id_tov') at [SRV-SQL03]
	|-----------------------------------------------
	|
	|select  t.id_tov,t.Name_tov ТОВ   
	|		 ,UINTov._Fld4946 as TovarUID,
	|		round(a.частота,3) частота 
	//|		,round(a.частота*pr.Price,3) частота_руб
	|		,isnull(povtpok.cn,0) ПовтПокупки
	|		,isnull(povtpok.cntotal,0) ПокупкиОбщие
	|		,convert(decimal(15,1),round(b.Себест,1)) Себестоим		 
	|		,round(case when d.post >0 then summa / (1 + isnull(t.nds,0.18) ) /d.post - b.Себест end*isnull(dtt.rashodavg,0),1) Маржа
	|		,round(isnull(dtt.spisanie,0),3) СписаниеСрок
	|		,round(isnull(dtt.spisanie_kach,0),3)  СписаниеКачество
	|		,isnull(dtt.summaavg,0)  СредВыручка
	|		,isnull(dtt.Vyruchka,0)  Выручка
	|		,round(isnull(dtt.rashodavg,0),3) Оборот
	|		,round(isnull(dtt.Discount50,0),3) СуммаСкидки
	|		,round(isnull(vt.SalesCountavg,0),3) СлучаевПродаж
	|		,a.date_ls НачалоНедели
	|from #chast2 a
	|	inner join M2..Tovari t on a.id_tov_ls=t.id_tov 
	//|	inner join Reports..Price_1C_tov as pr on a.id_tov_ls=pr.id_tov
	|	inner join #d d on d.id_tov=a.id_tov_ls and d.date_ls=a.date_ls
	|	left join #povtpok povtpok on povtpok.id_tov_cl=a.id_tov_ls  and povtpok.date_ls=a.date_ls
	|	left join #sebest_pr b on a.id_tov_ls=b.id_tov  and b.date_ls=a.date_ls
	|
	|left outer join #ls DTT (nolock)  on  DTT.id_tov=a.id_tov_ls  and DTT.Period=a.date_ls
	|inner join(
	| select
	|	Checks.id_tov,
	|	sum(Checks.BaseSum) BaseSum,
	|	sum(Checks.Quantity) Quantity,
	|	sum(Checks.Discount) Discount,
	|	avg(Checks.BaseSum) BaseSumavg,
	|	avg(Checks.Quantity) Quantityavg,
	|	avg(Checks.Discount) Discountavg, avg(Checks.SalesCount) SalesCountavg,
	|   Checks.CloseDate
	|   from(
	|SELECT
	|	Checks.id_tov_cl  id_tov,
	|	Checks.id_tt,
	|	sum(Checks.BaseSum) BaseSum,
	|	sum(Checks.Quantity) Quantity,sum(Checks.SalesCount) SalesCount,
	|	sum(Checks.Discount) Discount,
	|   cast(cast(Checks.CloseDate-datepart(weekday,Checks.CloseDate)+1 as date)as datetime) CloseDate
	|   from(
	|		Select  dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl id_tt,
	|   Sum(dbo_CheckLine.BaseSum) BaseSum,
	|   Sum(dbo_CheckLine.Quantity) Quantity,Count(dbo_CheckLine.Quantity) SalesCount,
	|	Sum(Case when dbo_Checks.Discount_all=0 then 0 else dbo_CheckLine.BaseSum end) Discount,
	|   cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime) CloseDate
	| FROM [SMS_UNION].[dbo].[CheckLine] (nolock) as dbo_CheckLine
	|	inner join 	 SMS_Union.dbo.Checks (nolock) as dbo_Checks on (dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
	|	and dbo_Checks.CloseDate between @date1 and @date2  and dbo_CheckLine.id_tov_cl=@tov
	| and dbo_Checks.OperationType IN (1))
	|group by dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl,
	|cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime)
	| Union all
	
	|	
	|		Select  dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl , 
	|   Sum(dbo_CheckLine.BaseSum) ,
	|   Sum(dbo_CheckLine.Quantity) , Count(dbo_CheckLine.Quantity),
	|	Sum(Case when dbo_Checks.Discount=0 then 0 else dbo_CheckLine.BaseSum end) ,
	|   cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime) 
	| FROM [SMS_Izbenka].[dbo].[CheckLine] (nolock) as dbo_CheckLine
	|	inner join 	 SMS_Izbenka.dbo.Checks (nolock) as dbo_Checks on (dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
	|	and dbo_Checks.CloseDate between @date1 and @date2  and dbo_CheckLine.id_tov_cl=@tov
	| and dbo_Checks.OperationType IN (1))
	|group by dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl,
	|cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime)
	|) Checks
	|
	|
	|
	|group by Checks.id_tov_cl,
	|	Checks.id_tt,
	|cast(cast(Checks.CloseDate-datepart(weekday,Checks.CloseDate)+1 as date)as datetime)) Checks
	|group by Checks.id_tov,
	|	Checks.CloseDate
	|) vt  on  vt.id_tov=a.id_tov_ls   and vt.CloseDate=a.date_ls
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON a.id_tov_ls = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|";
	
	
	
	СтрЗапрос=СтрЗаменить(СтрЗапрос,"=@tov"," in ("+СтрНом+")");
	
	
	//СтрЗапрос = "SELECT * 
	//			  |  	  FROM IzbenkaFin.._Reference5118 (nolock)";
	
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	//ТЗ=Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("Место");
	//ТЗ.Колонки.Добавить("Сенсор");
	//ТЗ.Колонки.Добавить("Shop_name");
	//ТЗ.Колонки.Добавить("mest_name");
	//ТЗ.Колонки.Добавить("Ответ");
	//ТЗ.Колонки.Добавить("Дата");
	//ТЗ.Колонки.Добавить("is_made");
	//ТЗ.Колонки.Добавить("ShopNo");
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	
	ТабДанные = Новый ТаблицаЗначений();
	//ТабДанные.Колонки.Добавить("TTUID"	, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("TovarUID"	, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Неделя"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ДатаНачала"		, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ДатаОкончания"		, Новый ОписаниеТипов("Дата"));
	
	
	ТабДанные.Колонки.Добавить("Выручка"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВыручкаОбщ"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Оборот"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Маржа"			, Новый ОписаниеТипов("Число"));
	
	ТабДанные.Колонки.Добавить("ПроцентПродажСоСкидкойКВыручке"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПроцентСписанийПоСрокуКВыручке"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПроцентСписанийПоКачествуКВыручке"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПовторныеПокупки"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПокупкиОбщие"				, Новый ОписаниеТипов("Число"));
	
	ТабДанные.Колонки.Добавить("Частота"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПродажиСоСкидкой"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СписанияПоСроку"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СписанияПоКачеству"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СлучаевПродаж"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("id_tov"				, Новый ОписаниеТипов("Число"));
	
	//Попытка
	rs.MoveFirst();
	//
	Сч=0;
	Пока НЕ rs.EOF() Цикл
		СтрокаДоб = ТабДанные.Добавить();
		Если Rs.Fields("TovarUID").Value <> NULL Тогда
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
		КонецЕсли;
		//Если Rs.Fields("TTUID").Value <> NULL Тогда
		//	СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
		//КонецЕсли;
		СтрокаДоб.Неделя=	(НачалоНедели(ТекущаяДата())-Rs.Fields("НачалоНедели").Value)/(7*24*60*60);
		СтрокаДоб.ДатаНачала=	НачалоНедели(Rs.Fields("НачалоНедели").Value);
		СтрокаДоб.ДатаОкончания=	КонецНедели(Rs.Fields("НачалоНедели").Value);
		
		
		СтрокаДоб.Выручка = Rs.Fields("СредВыручка").Value;
		СтрокаДоб.ВыручкаОбщ = Rs.Fields("Выручка").Value;
		СтрокаДоб.Оборот = Rs.Fields("Оборот").Value;
		СтрокаДоб.Маржа = Rs.Fields("Маржа").Value;   
		СтрокаДоб.ПроцентПродажСоСкидкойКВыручке = 100*?(Rs.Fields("Выручка").Value=0,0,(Rs.Fields("СуммаСкидки").Value)/Rs.Fields("Выручка").Value);
		СтрокаДоб.ПроцентСписанийПоСрокуКВыручке = 100*?(Rs.Fields("Выручка").Value=0,0,Rs.Fields("СписаниеСрок").Value/Rs.Fields("Выручка").Value);
		СтрокаДоб.ПроцентСписанийПоКачествуКВыручке = 100*?(Rs.Fields("Выручка").Value=0,0,Rs.Fields("СписаниеКачество").Value/Rs.Fields("Выручка").Value);
		СтрокаДоб.ПовторныеПокупки = Rs.Fields("ПовтПокупки").Value;
		СтрокаДоб.ПокупкиОбщие = Rs.Fields("ПокупкиОбщие").Value;
		СтрокаДоб.ПродажиСоСкидкой = Rs.Fields("СуммаСкидки").Value;
		СтрокаДоб.СписанияПоСроку = Rs.Fields("СписаниеСрок").Value;
		СтрокаДоб.СписанияПоКачеству = Rs.Fields("СписаниеКачество").Value;
		СтрокаДоб.id_tov = Rs.Fields("id_tov").Value;
		СтрокаДоб.Частота = Rs.Fields("частота").Value;
		СтрокаДоб.СлучаевПродаж = Rs.Fields("СлучаевПродаж").Value;
		
		rs.MoveNext();
	КонецЦикла;
	//Исключение
	//КонецПопытки;
	
	
	
	
	Для каждого Эл Из МасНом Цикл
		ТЗОтп=ТабДанные.СкопироватьКолонки();
		Для каждого Стр Из ТабДанные Цикл
			Если Стр.id_tov=Эл Тогда
				НовСтр=ТЗОтп.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			КонецЕсли; 
		КонецЦикла; 
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗОтп);
		ДокументРезультат = Новый ТабличныйДокумент;
		//Макет компоновки 
		
		Мак = ПолучитьОбщийМакет("МакетРассылкиПриВыводеТовара");
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Мак, Мак.НастройкиПоУмолчанию, );
		
		//Компоновка данных
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, );
		
		//Вывод результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);                               
		//ДокументРезультат.Показать();
		
		
		Если ТЗОтп.Количество()>0 Тогда
			Если ЗначениеЗаполнено(ТЗОтп[0].Номенклатура) Тогда
				МасХар=Новый Массив;
				МасСтрХар=ТЗНом.НайтиСтроки(Новый Структура("Номенклатура", ТЗОтп[0].Номенклатура));
				Сч=0;
				СчСтроки=0;
				Для каждого ЭлХар Из МасСтрХар Цикл
					МасХар.Добавить(ЭлХар.Характеристика);
					Если СчСтроки=0 И (МасСтрХар[Сч].Статус = Перечисления.СтатусыХарактеристик.НаВывод ИЛИ
						МасСтрХар[Сч].Статус = Перечисления.СтатусыХарактеристик.Приостановлена ИЛИ
						МасСтрХар[Сч].Статус = Перечисления.СтатусыХарактеристик.Рабочая) Тогда
					    СчСтроки=Сч;
					КонецЕсли; 
					Сч=Сч+1;
				КонецЦикла; 
				ОтправитьПисьмоОбИзмененииСтатусаПриВыводе(МасХар, МасСтрХар[СчСтроки].Статус, МасСтрХар[СчСтроки].ДатаВывода, ТЗОтп[0].Номенклатура, МасСтрХар[СчСтроки].Причина, ДокументРезультат, Истина);
				
				
				ОбНом = ТЗОтп[0].Номенклатура.ПолучитьОбъект();
				ОбНом.НеобходимаРассылка=Ложь;
				ОбНом.Записать();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры


Процедура СделатьРассылкуЛентыКартинок() Экспорт
	
	Дата = НачалоДня(ТекущаяДата() - 86400);	
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ВременныйКаталог);
	//БиблиотекаКартинок.ПоказатьДанные.Записать(ВременныйКаталог + "\Show.png");
	//БиблиотекаКартинок.ЗаписатьИЗакрыть.Записать(ВременныйКаталог + "\Accepted.png");
	//БиблиотекаКартинок.Удалить.Записать(ВременныйКаталог + "\Canceled.png");
	//БиблиотекаКартинок.Выбрать.Записать(ВременныйКаталог + "\Unknown.png");
	//БиблиотекаКартинок.Записать.Записать(ВременныйКаталог + "\SaveAs.png");
	//БиблиотекаКартинок.Сортировка.Записать(ВременныйКаталог + "\Rotate.png");
	//БиблиотекаКартинок.ПрочитатьИзменения.Записать(ВременныйКаталог + "\Trim.png");
	//БиблиотекаКартинок.ПиктограммаФайла_PDF.Записать(ВременныйКаталог + "\pdf.jpg");
	
	ТаблицаСтруктурыФайлов = Новый ТаблицаЗначений;
	ТаблицаСтруктурыФайлов.Колонки.Добавить("УинКартинки");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("АдресВХранилище");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("Расширение");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("СтатусФото");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("ТолькоМиниатюра");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("Номенклатура");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("Характеристика");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("НоменклатураНаименование");	
	ТаблицаСтруктурыФайлов.Колонки.Добавить("ХарактеристикаНаименование");	
	
	
	ТаблицаСтруктурыФайловПоГруппам = Новый ТаблицаЗначений;
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("УинКартинки");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("АдресВХранилище");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("Расширение");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("СтатусФото");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("ТолькоМиниатюра");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("Номенклатура");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("Характеристика");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("НоменклатураНаименование");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("ХарактеристикаНаименование");		
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("Группа");	
	ТаблицаСтруктурыФайловПоГруппам.Колонки.Добавить("Сотрудник");	
	
	СписокКартинок = Новый СписокЗначений;	
	
	Тэги = Новый ТаблицаЗначений;
	Тэги.Колонки.Добавить("УинКартинки");	
	Тэги.Колонки.Добавить("Тэг");	
	
	ПрочиеТэги = Новый ТаблицаЗначений;
	ПрочиеТэги.Колонки.Добавить("УинКартинки");	
	ПрочиеТэги.Колонки.Добавить("Тэг");	
	
	СписокВыведенных = Новый СписокЗначений;
	ОбновитьЛентуСервер(Дата, ТаблицаСтруктурыФайлов, СписокКартинок, Тэги, ПрочиеТэги, СписокВыведенных, ТаблицаСтруктурыФайловПоГруппам);
	
	
	ПолныйТекстHTML =
	" <html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=EmulateIE7"" />
	|<style type=""text/css"">
	|body{margin:0px;padding:8px;overflow:hidden;width:100%;height:100%;}
	|p{line-height:1.15;margin:0px;}
	|ol,ul{margin-top:0px;margin-bottom:0px;}
	|img{border: none;}
	|</style>
	|</head>
	|<body><p>Лента</p>";
	
	
	
	
	СчКарт = 1;
	СтрДоб = "";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПоИнтересамСотрудники.Сотрудник
	|ИЗ
	|	Справочник.ГруппыПоИнтересам.Сотрудники КАК ГруппыПоИнтересамСотрудники
	|ГДЕ
	|	ГруппыПоИнтересамСотрудники.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыПоИнтересамСотрудники.Сотрудник ";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		СтрокиГруппы = ТаблицаСтруктурыФайловПоГруппам.НайтиСтроки(Новый Структура("Сотрудник", ВыборкаСсылка.Сотрудник));
		Если СтрокиГруппы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого Элемент ИЗ СтрокиГруппы Цикл
			Если СчКарт =10  Тогда
				//Прервать;
			КонецЕсли;
			//Если СчКарт<>1 Тогда
			СтрокиСтруктуры=ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", Элемент.УинКартинки));
			Если СтрокиСтруктуры.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			ТекКартинкаСтруктура = СтрокиСтруктуры[0];
			Если ЗначениеЗаполнено(ТекКартинкаСтруктура.АдресВХранилище) Тогда
				Картинка =  Новый Картинка(ТекКартинкаСтруктура.АдресВХранилище);
				//Попытка
				Картинка.Записать(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки +  "." + ТекКартинкаСтруктура.Расширение);
				Файл=Новый Файл(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки +  "." + ТекКартинкаСтруктура.Расширение);
				ИмяФайла=Файл.ПолноеИмя;
				//Исключение
				//КонецПопытки;
			КонецЕсли;
			
			Если НРег(Файл.Расширение) = ".pdf" Тогда
				Попытка
					ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\TotalPdfConverter\PDFConverter.exe """ + Файл.ПолноеИмя + """ """ + Файл.Путь + Файл.ИмяБезРасширения + ".jpg" + """" + " -jq 1 -fo -c jpg",, Истина);
					ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".jpg";
					Файл = Новый Файл(ИмяФайла);
					ТекКартинкаСтруктура.Расширение = "jpg";
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если НРег(Файл.Расширение) = ".jpg" Тогда
				Попытка
					ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\CompressJPG\AKCompressJPG.exe """ + ИмяФайла + """ """ + ИмяФайла + """",, Истина);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			
			
			СтрДоб = СтрДоб +
			"<p>
			|<img    width=" + Формат(Цел(600), "ЧГ=0") + " height=" + Формат(Цел(600 ), "ЧГ=0") + " src = """ + СтрЗаменить(ИмяФайла, "\", "/") + """>
			|</p>";
			ТекТэги			= Тэги.НайтиСтроки(Новый Структура("УинКартинки", ТекКартинкаСтруктура.УинКартинки));
			ТекПрочиеТэги	= ПрочиеТэги.НайтиСтроки(Новый Структура("УинКартинки", ТекКартинкаСтруктура.УинКартинки));
			
			СтрДоб1="";
			Для каждого Эл Из ТекТэги Цикл
				СтрДоб1 = СтрДоб1 +" "+Эл.Тэг;
			КонецЦикла;
			Для каждого Эл Из ТекПрочиеТэги Цикл
				СтрДоб1 = СтрДоб1  +" "+Эл.Тэг;
			КонецЦикла;   		
			СтрДоб=СтрДоб+"
			|<p>"+СтрДоб1+"</p>";
			СтрДоб = СтрДоб + "<a  href = ""file:///" + СтрЗаменить(ТекКартинкаСтруктура.АдресВХранилище, "\", "/") + """>" + ТекКартинкаСтруктура.АдресВХранилище + "</a>";
			
			
			//КонецЕсли;
			СчКарт=СчКарт+1;
		КонецЦикла;	
		ПолныйТекстHTML = ПолныйТекстHTML + СтрДоб+"</body>
		|</html>";
		//
		ДокументHTML = ПолныйТекстHTML;
		HTML=ДокументHTML;
		//
		
		МасСотр = Новый Массив;
		МасСотр.Добавить(ВыборкаСсылка.Сотрудник);	
		
		
		ОтправитьПочтовыеСообщения("no-reply@vkusvill.ru", "Лента картинок", МасСотр, ДокументHTML);	
		
	КонецЦикла;
	
	//
	УдалитьФайлы(ВременныйКаталог);
	
КонецПроцедуры


Функция ПолучитьУчетнуюЗаписьПоАдресу(АдресЭлектроннойПочты)
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныеЗаписиЭлектроннойПочты.Код УБЫВ";
	
	Запрос1.УстановитьПараметр("АдресЭлектроннойПочты", СокрЛП(АдресЭлектроннойПочты));
	
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.Ссылка;
	КонецЕсли;
	
КонецФункции // ()

Процедура ОтправитьПочтовыеСообщения(АдресЭПОтправителя, Тема,ГруппаРассылки,  Знач ТекстХТМЛ)
	
	УчеткаДляНастройки = ПолучитьУчетнуюЗаписьПоАдресу(АдресЭПОтправителя);
	Если НЕ ЗначениеЗаполнено(УчеткаДляНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАдресовЭП = "";
	
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактнаяИнформация.Объект КАК Сотрудник,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП
	|ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		где КонтактнаяИнформация.Объект в (&Объект)
	|			И (КонтактнаяИнформация.Вид = &ВидКИ)
	|			И ((ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """")" );
	
	
	
	Запрос.УстановитьПараметр("Объект", ГруппаРассылки);
	Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	МассивАдресовЭП = Новый Массив;
	
	Рез1 = Запрос.Выполнить();
	Выб1 = Рез1.Выбрать();
	Пока Выб1.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выб1.АдресЭП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
			СтрокаАдресовЭП = СтрокаАдресовЭП + ", ";
		КонецЕсли;
		СтрокаАдресовЭП = СтрокаАдресовЭП + СокрЛП(Выб1.АдресЭП);
		МассивАдресовЭП.Добавить(СокрЛП(Выб1.АдресЭП));
	КонецЦикла;
	Если МассивАдресовЭП.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	//МассивАдресовЭП.Добавить("nikolaybelyak@yandex.ru");
	Отправитель = "Лента картинок";
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчеткаДляНастройки);
	Профиль.Пользователь = АдресЭПОтправителя;
	Профиль.ПользовательSMTP = АдресЭПОтправителя;
	Почта.Подключиться(Профиль);
	
	//АК БЕЛН 28.04.2017+
	КолАдр=МассивАдресовЭП.Количество();
	КолИтер=Цел(КолАдр/21)+1;
	
	Для Ит=1 По КолИтер Цикл
		//УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		СпАдресов=Новый СписокЗначений;
		
		Для Сч= (Ит-1)*20+1 По Мин(МассивАдресовЭП.Количество(),Ит*20) Цикл
			ЭлСп=МассивАдресовЭП[Сч-1];
			МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп,";");	
			Для каждого Эл Из МассивАдресов Цикл
				Если ЗначениеЗаполнено(Эл) Тогда
					СпАдресов.Добавить(Сокрлп(Эл));
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = Тема;
		Письмо.ИмяОтправителя = Строка(Отправитель);
		Письмо.Отправитель.Адрес = АдресЭПОтправителя;
		//Письмо.Отправитель.Адрес = АдресЭПОтправителя;
		СтрАдреса="";
		Для Каждого Адрес1 Из СпАдресов Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = Адрес1;
			СтрАдреса=СтрАдреса+", "+ Адрес1;
		КонецЦикла;
		СтрАдреса=Прав(СтрАдреса,СтрДлина(СтрАдреса)-2);
		
		//Текст1 = Письмо.Тексты.Добавить();
		//Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		//Заголовок=Строка(Ссылка);
		//Текст1.Текст = Заголовок;
		//
		Текст1 = Письмо.Тексты.Добавить();
		Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
		//Если Картинки.Количество() > 0 Тогда
		//	Для Каждого Картинка Из Картинки Цикл
		//		ИмяВремФайла = ПолучитьИмяВременногоФайла("");
		//		Картинка.Значение.Записать(ИмяВремФайла);
		//		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
		//		
		//		//Письмо.Вложения.Добавить(Картинка.Значение.ПолучитьДвоичныеДанные(), Картинка.Ключ);
		//		//Письмо.Вложения.Добавить(ИмяВремФайла, Картинка.Ключ);
		//	КонецЦикла;
		//КонецЕсли;
		Текст1.Текст = ТекстХТМЛ;
		
		//Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Попытка
			Почта.Послать(Письмо);
			Сообщить("Письма отправлены на "+СтрАдреса);
		Исключение
			Сообщить(ОписаниеОшибки());
			ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
			Сообщить(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	//КонецЕсли;	
	Почта.Отключиться();
	
	
	
	//
	//
	//Письмо = Новый ИнтернетПочтовоеСообщение;
	//Письмо.Тема = Тема;
	//Письмо.ИмяОтправителя = Строка(Отправитель);
	//Письмо.Отправитель.Адрес = АдресЭПОтправителя;
	//Для Каждого Адрес1 Из МассивАдресовЭП Цикл
	//	Получатель = Письмо.Получатели.Добавить();
	//	Получатель.Адрес = Адрес1;
	//КонецЦикла;
	//Текст1 = Письмо.Тексты.Добавить();
	//Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	//
	//Если Картинки.Количество() > 0 Тогда
	//	Для Каждого Картинка Из Картинки Цикл
	//		ИмяВремФайла = ПолучитьИмяВременногоФайла("");
	//		Картинка.Значение.Записать(ИмяВремФайла);
	//		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
	//		
	//		//Письмо.Вложения.Добавить(Картинка.Значение.ПолучитьДвоичныеДанные(), Картинка.Ключ);
	//		//Письмо.Вложения.Добавить(ИмяВремФайла, Картинка.Ключ);
	//	КонецЦикла;
	//КонецЕсли;
	//Текст1.Текст = ТекстХТМЛ;
	//
	////Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
	//	Попытка
	//		Почта.Послать(Письмо);
	//		Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
	//			ЗаписьЖурналаРегистрации("ПримечаниеМОС", УровеньЖурналаРегистрации.Примечание,,, "Отправка почты произведена успешно");
	//		КонецЕсли;
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//		ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
	//		Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
	//			ЗаписьЖурналаРегистрации("ОшибкаМОС", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при отправке почты");
	//		КонецЕсли;
	//		Сообщить(ТекстОшибки);
	//	КонецПопытки;
	////КонецЕсли;	
	//Почта.Отключиться();
	//АК БЕЛН 28.04.2017-
	
КонецПроцедуры

Процедура ОбновитьЛентуСервер(ДатаНачала,ТаблицаСтруктурыФайлов,СписокКартинок,Тэги,ПрочиеТэги,СписокВыведенных,ТаблицаСтруктурыФайловПоГруппам)
	УстановитьПривилегированныйРежим(Истина);
	//СохранитьНастройки();
	Запрос = Новый Запрос;
	Запрос.Текст =" 
	|ВЫБРАТЬ
	|	ПрикрепленныеФотоКОбъектам.Номенклатура,
	|	ПрикрепленныеФотоКОбъектам.Характеристика,
	|	ПрикрепленныеФотоКОбъектам.Объект,
	|	ПрикрепленныеФотоКОбъектам.ТипЗаписи,
	|	ПрикрепленныеФотоКОбъектам.УинЗаписи,
	|	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла,
	|	ПрикрепленныеФотоКОбъектам.ДатаДобавления КАК ДатаДобавления,
	|	ПрикрепленныеФотоКОбъектам.Расширение,
	|	ПрикрепленныеФотоКОбъектам.ТипОперацииМагазина,
	|	ПрикрепленныеФотоКОбъектам.ВАрхиве,
	|	ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(ПрикрепленныеФотоКОбъектам.Текст КАК СТРОКА(300)) КАК Текст
	//|	,ЕСТЬNULL(РолиПользователей.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.Пустаяссылка)) КАК Роль
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//|		ПО ПрикрепленныеФотоКОбъектам.УинЗаписи = вт.УинЗаписи
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
	//|		ПО (&Роль = РолиПользователей.Ссылка)
	|ГДЕ
	|	ПрикрепленныеФотоКОбъектам.ВАрхиве = ЛОЖЬ
	|	
	|	И ПрикрепленныеФотоКОбъектам.ДатаДобавления МЕЖДУ &Дата1 И &Дата2	
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДобавления УБЫВ";
	Запрос.УстановитьПараметр("Роль",Справочники.РолиПользователей.ПустаяСсылка());
	Запрос.УстановитьПараметр("Дата1",ДатаНачала);
	Запрос.УстановитьПараметр("Дата2",КонецДня(ДатаНачала));
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРезультатЗапроса = РезультатЗапроса.Выгрузить();
	
	МасТиповОпераций=ТЗРезультатЗапроса.ВыгрузитьКолонку("ТипОперацииМагазина");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыОпераций.ссылка,
	|	ТипыОпераций.code_operation КАК КодОперации
	|ИЗ
	|	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	|ГДЕ
	|	ТипыОпераций.table_operation = ""td_move""
	|	И ТипыОпераций.field_operation = ""operation_type_orig""
	|	И ТипыОпераций.code_operation В(&МасТиповОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыОпераций.code_operation";
	Запрос.УстановитьПараметр("МасТиповОпераций",МасТиповОпераций);                   
	ТЗТО = Запрос.Выполнить().Выгрузить(); 
	
	МасКодПрич=новый Массив;
	Для каждого стр Из ТЗРезультатЗапроса Цикл
		Поз1=Найти(стр.Текст,"Код причины списания:");
		Поз2=Найти(стр.Текст,"Комментарий");
		Если Поз1>0 и Поз2>0 Тогда
			Длина=Поз2-Поз1;
			Причина=СтрЗаменить(Сред(стр.Текст,Поз1-1,длина),"Код причины списания: ","");
			КодПричины=Число(Причина);
			Если КодПричины>0 Тогда
				МасКодПрич.Добавить(КодПричины);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыОпераций.Ссылка,
	|	ТипыОпераций.code_operation КАК КодОперации
	|ИЗ
	|	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	|ГДЕ
	|	ТипыОпераций.table_operation = ""td_move""
	|	И ТипыОпераций.field_operation = ""id_reason""
	|	И ТипыОпераций.code_operation В(&МасТиповОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыОпераций.code_operation";
	Запрос.УстановитьПараметр("МасТиповОпераций",МасКодПрич);
	ТЗПрич = Запрос.Выполнить().Выгрузить(); 
	
	ТЗРезультатЗапроса.Колонки.Добавить("ТипОперации",Новый ОписаниеТипов("СправочникСсылка.ТипыОперацийМагазина"));
	ТЗРезультатЗапроса.Колонки.Добавить("ПричинаСписания",Новый ОписаниеТипов("СправочникСсылка.ТипыОперацийМагазина"));
	
	ТЗРезультатЗапросаИтог=ТЗРезультатЗапроса.СкопироватьКолонки();
	
	
	Для каждого стр Из ТЗРезультатЗапроса Цикл
		ТО=ТЗТО.Найти(Стр.ТипОперацииМагазина);
		Если ТО<>Неопределено Тогда
			стр.ТипОперации=ТО.Ссылка;
		КонецЕсли;
		Поз1=Найти(стр.Текст,"Код причины списания:");
		Поз2=Найти(стр.Текст,"Комментарий");
		Если Поз1>0 и Поз2>0 Тогда
			Длина=Поз2-Поз1;
			Причина=СтрЗаменить(Сред(стр.Текст,Поз1-1,длина),"Код причины списания: ","");
			КодПричины=Число(Причина);
			Если КодПричины>0 Тогда
				ТО=ТЗПрич.Найти(КодПричины);
				Если ТО<>Неопределено Тогда
					стр.ПричинаСписания=ТО.Ссылка;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	
	Струк=Новый Структура("ТЗ",ТЗРезультатЗапроса);
	КМ=Новый КомпоновщикМакетаКомпоновкиДанных;
	Отчет=Отчеты.ОтчетПоЛентеКартинок.Создать();
	Настройки=Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	КолСтр=Настройки.Отбор.Элементы.Количество();
	Для Сч=0 По КолСтр-1 Цикл
		Настройки.Отбор.Элементы.Удалить(КолСтр-1-Сч);
	КонецЦикла;
	////
	//Табл=Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	//ГруппаОтборИ=Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаОтборИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//ГруппаОтборИ.Представление = "ГруппаОтборИ";
	//ГруппаОтборИ.Использование = Истина;
	//Для каждого отб Из  Табл Цикл
	//	ЗаполнитьЭлементыВОтборе(ГруппаОтборИ,отб);	
	//КонецЦикла;
	//
	////Если Отчет.Роли.Количество()>0 Тогда
	//	
	//	ГруппаИли = ГруппаОтборИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//	ГруппаИли.Представление = "ГруппаИли2Уровень";
	//	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//	ГруппаИли.Использование = Истина;
	
	//	
	//	Для каждого СтрРоль Из Отчет.Роли Цикл
	//		Если ЗначениеЗаполнено(Роль) Тогда
	//			Если Роль<>СтрРоль.Роль Тогда
	//				Продолжить;
	//			КонецЕсли; 
	//		КонецЕсли; 
	//		НастройкиРоли=СтрРоль.Роль.НастройкаЛентыКартинок.Получить();
	//		ГруппаИ = ГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//		ГруппаИ.Представление = "ГруппаИ";
	//		ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//		ГруппаИ.Использование = Истина;
	//		
	//		
	//		Если НЕ ЗначениеЗаполнено(Роль) Тогда
	//			СпОб=СоотСписков.Получить(СтрРоль.Роль);
	//			Если СпОб=Неопределено Тогда
	//				Продолжить;
	//			КонецЕсли; 
	//			ГруппаИЛИ1ур = ГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//			ГруппаИЛИ1ур.Представление = "ГруппаИЛИ1ур";
	//			ГруппаИЛИ1ур.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//			ГруппаИЛИ1ур.Использование = Истина;
	//			
	//			НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	//			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	//			НоваяСтрОтбора.ПравоеЗначение = СпОб;	
	//			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//			НоваяСтрОтбора.Использование = Истина;
	//	
	//			НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	//			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
	//			НоваяСтрОтбора.ПравоеЗначение = СпОб;	
	//			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//			НоваяСтрОтбора.Использование = Истина;
	//			
	//			НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	//			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
	//			НоваяСтрОтбора.ПравоеЗначение = СпОб;	
	//			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//			НоваяСтрОтбора.Использование = Истина;
	//		КонецЕсли; 
	//		
	//		Если НастройкиРоли<>Неопределено Тогда
	//			
	//			Для каждого отб Из  НастройкиРоли.Отбор.Элементы Цикл
	//				ЗаполнитьЭлементыВОтборе(ГруппаИ,отб);	
	//			КонецЦикла;
	//		КонецЕсли; 
	//		
	//		
	//		Если Не ЗначениеЗаполнено(Роль) Тогда
	//			Если НастройкиХран<>Неопределено Тогда
	//				Настройки3=НастройкиХран.Получить();
	
	//				Если ТипЗнч(Настройки3)=Тип("Соответствие") Тогда
	//					
	//					//
	//					
	//					Для каждого Эл  Из Настройки3 Цикл
	//						Если Эл.Ключ<>СтрРоль.Роль Тогда
	//							Продолжить;
	//						КонецЕсли; 
	//						НастройкиРоли1=Эл.Значение.КомпоновщикНастроек;
	//						Если НастройкиРоли1<>Неопределено Тогда
	//							ГруппаИ1 = ГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//							ГруппаИ1.Представление = "ГруппаИ13Уровень";
	//							ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//							ГруппаИ1.Использование = Истина;
	//							
	//							Для каждого отб Из  НастройкиРоли1.Отбор.Элементы Цикл
	//								ЗаполнитьЭлементыВОтборе(ГруппаИ1,отб);	
	//							КонецЦикла;
	//						КонецЕсли; 
	//						
	//						
	//						
	//					КонецЦикла; 	                				
	//					
	//				КонецЕсли; 
	//			КонецЕсли; 	
	//		КонецЕсли; 
	//	КонецЦикла; 	                        
	//КонецЕсли; 
	//
	//
	
	
	МакетКомп=КМ.Выполнить(Отчеты.ОтчетПоЛентеКартинок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"),Настройки, , ,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцКД=Новый ПроцессорКомпоновкиДанных;
	ПроцКД.Инициализировать(МакетКомп,Струк);
	ПроцВыв=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗРезультат=Новый ТаблицаЗначений;
	ПроцВыв.УстановитьОбъект(ТЗРезультат);
	
	ПроцВыв.НачатьВывод();
	Ит=0;
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = 
		ПроцКД.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ПроцВыв.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
		Ит=Ит+1;
		Если Ит=201 Тогда
			//Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	ПроцВыв.ЗакончитьВывод();	 
	
	//Кол=ТЗРезультат.Количество();
	//СоотФильтров=Новый Соответствие;
	//НастройкиХран=ХранилищеОбщихНастроек.Загрузить("АКНастройкиЛентыКартинок");
	//Если НастройкиХран<>Неопределено Тогда
	//	Настройки=НастройкиХран.Получить();
	//	Если ТипЗнч(Настройки)=Тип("Соответствие") Тогда
	//		Для каждого Эл Из Настройки Цикл
	//			Если ТипЗнч(Эл.Значение)=Тип("ТаблицаЗначений")
	//				И ?(ЗначениеЗаполнено(Роль),Роль=Эл.Ключ,Отчет.Роли.НайтиСтроки(Новый Структура("Роль",Эл.Ключ)).Количество()) Тогда
	//				СоотФильтров.Вставить(Эл.Ключ,Эл.Значение);
	//			КонецЕсли; 
	//		КонецЦикла; 
	//	Иначе
	//	КонецЕсли; 
	//КонецЕсли; 
	//Для Сч=0 По Кол-1 Цикл
	//	Если НеобходимоУдалениеПоФильтру(СоотФильтров,ТЗРезультат[Кол-1-Сч]) Тогда
	//		ТЗРезультат.Удалить(Кол-1-Сч);
	//	КонецЕсли; 
	//КонецЦикла; 
	
	ФлНачало=Истина;
	ПервыйПроход = Истина;
	БылоДобавлениеПустого = Ложь;
	
	//Для каждого СтрТзКарт Из ТаблицаСтруктурыФайлов Цикл
	//	СписокКартинок.Добавить(СтрТзКарт.УинКартинки);
	//КонецЦикла; 
	ФлКонец=Истина;
	
	К1=Константы.КаталогХраненияФайловКартинок.Получить();
	К2=Константы.МП_КаталогХраненияФайловЗадачМП.Получить();
	К3=Константы.КаталогХраненияФайлов.Получить();
	К4="\\10.0.0.51\1c$\Сертификаты";
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗРезультат Цикл
		ИмяВремФайла="";
		УинКартинки = Строка(ВыборкаДетальныеЗаписи.УИНЗаписи);
		
		
		ПолноеИмяФайла = "";
		ПолноеИмяФайла1 = "";
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла) Тогда
			Если Лев(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла,2)="\\" Тогда
				КаталогКЗаписи="";
				КаталогФотографий="";
				КаталогХраненияФайлов="";
				КаталогСертификатов="";
				//Если Найти(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла,"YandexDisk")>0 Тогда
				//	ФайлВрем=Новый Файл(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла);
				//	Попытка
				//		РасширениеФайла = Сред(ФайлВрем.Расширение, 2);
				//		ВремФайл = ПолучитьИмяВременногоФайла(РасширениеФайла);
				//		КопироватьФайл(ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла,ВремФайл);
				//		ИмяВремФайла=ВремФайл;
				//	Исключение
				//	КонецПопытки; 
				//КонецЕсли; 
			Иначе
				КаталогКЗаписи = К1;
				Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
					КаталогКЗаписи = КаталогКЗаписи + "\";
				КонецЕсли;
				КаталогФотографий = СокрЛП(К2);
				Если Прав(КаталогФотографий, 1) <> "\" Тогда
					КаталогФотографий = КаталогФотографий + "\";
				КонецЕсли;
				КаталогХраненияФайлов = К3;
				
				Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
					КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
				КонецЕсли;
				
				
				КаталогСертификатов = К4;
				
				Если Прав(КаталогСертификатов, 1) <> "\" Тогда
					КаталогСертификатов = КаталогСертификатов + "\";
				КонецЕсли;
			КонецЕсли; 	
			//Если ЗначениеЗаполнено(ИмяВремФайла) Тогда
			//	ПолноеИмяФайла = ИмяВремФайла;
			//	ПолноеИмяФайла1 = ИмяВремФайла;
			//	ПолноеИмяФайла2 = ИмяВремФайла;
			//	ПолноеИмяФайла3 = ИмяВремФайла;
			//Иначе	
			ПолноеИмяФайла = КаталогКЗаписи + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			ПолноеИмяФайла1 = КаталогФотографий + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			ПолноеИмяФайла2 = КаталогХраненияФайлов + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			ПолноеИмяФайла3 = КаталогСертификатов + ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
			//КонецЕсли; 
			//ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Не Файл.Существует() Тогда
				Файл = Новый Файл(ПолноеИмяФайла1);
				ПолноеИмяФайла=ПолноеИмяФайла1;
			КонецЕсли; 
			Если Не Файл.Существует() Тогда
				Файл = Новый Файл(ПолноеИмяФайла2);
				ПолноеИмяФайла=ПолноеИмяФайла2;
			КонецЕсли; 
			Если Не Файл.Существует() Тогда
				Файл = Новый Файл(ПолноеИмяФайла3);
				ПолноеИмяФайла=ПолноеИмяФайла3;
			КонецЕсли; 
			
			
			РасширениеФайла = Сред(Файл.Расширение, 2);
			Если НЕ ПервыйПроход Тогда
				//ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "thumb." + РасширениеФайла;
				//ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
				//Если НЕ ФайлМиниатюра.Существует() Тогда
				ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "." + РасширениеФайла;
				//КонецЕсли;	
			КонецЕсли;	
			
			Файл = Новый Файл(ПолноеИмяФайла);            
			
			Если (Файл.Существует()
				И Файл.Размер() > 0) Тогда // ИЛИ Найти(ПолноеИмяФайла,"YandexDisk")>0 Тогда
				СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
				СтруктураЗаписи.УинКартинки = УинКартинки;
				СписокКартинок.Добавить(УинКартинки);
				ФлКонец=Ложь;
				Если ЗначениеЗаполнено(РасширениеФайла) Тогда
					//Если ПервыйПроход Тогда
					СтруктураЗаписи.ТолькоМиниатюра = Ложь;
					//Иначе
					//	СтруктураЗаписи.ТолькоМиниатюра = Истина;
					//КонецЕсли;	
					
					//Попытка
					//Картинка = Новый Картинка(ПолноеИмяФайла);
					//СтруктураЗаписи.АдресВХранилище = ПоместитьВоВременноеХранилище(Картинка,ЭтаФорма.УникальныйИдентификатор);
					СтруктураЗаписи.АдресВХранилище = ПолноеИмяФайла;
					СтруктураЗаписи.Расширение = РасширениеФайла;
					ПервыйПроход = Ложь;
					//Исключение
					//КонецПопытки;
					СтруктураЗаписи.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
					СтруктураЗаписи.Характеристика=ВыборкаДетальныеЗаписи.Характеристика;
					СтруктураЗаписи.НоменклатураНаименование=Строка(ВыборкаДетальныеЗаписи.Номенклатура);
					СтруктураЗаписи.ХарактеристикаНаименование=Строка(ВыборкаДетальныеЗаписи.Характеристика);
					
					МассивТэгов=РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.Текст);
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.Объект))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.Объект)) И НЕ ТипЗнч(ВыборкаДетальныеЗаписи.Объект)=Тип("Строка") Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.Объект));
					КонецЕсли;
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.Характеристика))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.Характеристика)) Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.Характеристика));
					КонецЕсли;
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.Номенклатура))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.Номенклатура)) Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.Номенклатура));
					КонецЕсли;
					Если МассивТэгов.Найти(Строка(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница))=Неопределено и ЗначениеЗаполнено(Строка(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница)) Тогда
						МассивТэгов.Вставить(0,Строка(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница));
					КонецЕсли;
					Для каждого Эл Из МассивТэгов Цикл
						СтрНов=Тэги.Добавить();
						СтрНов.УинКартинки=УинКартинки;
						СтрНов.Тэг=Эл;
					КонецЦикла;
					
					СтрНов=ПрочиеТэги.Добавить();
					СтрНов.УинКартинки=УинКартинки;
					СтрНов.Тэг="Дата добавления "+Строка(ВыборкаДетальныеЗаписи.ДатаДобавления);
					
					СтрНов=ПрочиеТэги.Добавить();
					СтрНов.УинКартинки=УинКартинки;
					СтрНов.Тэг=Строка(ВыборкаДетальныеЗаписи.ТипЗаписи);
					
					
					Поз=Найти(ВыборкаДетальныеЗаписи.Текст,"Комментарий");
					СтрТэг="";
					Если Поз>0 Тогда
						СтрТэг=Сред(ВыборкаДетальныеЗаписи.Текст,Поз)		
					КонецЕсли;
					СтрНов=ПрочиеТэги.Добавить();
					СтрНов.УинКартинки=УинКартинки;
					СтрНов.Тэг=СтрТэг;
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПричинаСписания) Тогда
						СтрТэг="Причина списания "+Строка(ВыборкаДетальныеЗаписи.ПричинаСписания);
						СтрНов=ПрочиеТэги.Добавить();
						СтрНов.УинКартинки=УинКартинки;
						СтрНов.Тэг=СтрТэг;
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПричинаСписания) Тогда
						СтрТэг="Тип операции "+Строка(ВыборкаДетальныеЗаписи.ТипОперации);
						СтрНов=ПрочиеТэги.Добавить();
						СтрНов.УинКартинки=УинКартинки;
						СтрНов.Тэг=СтрТэг;
					КонецЕсли; 
					НовСтр=ТЗРезультатЗапросаИтог.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетальныеЗаписи);
					НовСтр.ОтносительноеИмяФайла=ПолноеИмяФайла;
					НовСтр.Расширение=РасширениеФайла;
				КонецЕсли;
			Иначе
				Если Найти(ПолноеИмяФайла,"YandexDisk")=0 Тогда
					
					Сообщить("Отсутствует файл "+ПолноеИмяФайла+" для "+ВыборкаДетальныеЗаписи.Номенклатура+" "+ВыборкаДетальныеЗаписи.Характеристика+" "+ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
					
					//Если НЕ БылоДобавлениеПустого Тогда
					//	СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
					//	БылоДобавлениеПустого = Истина;
					//Иначе
					//	Продолжить;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПоИнтересам.Ссылка,
	|	ГруппыПоИнтересам.Родитель,
	|	ГруппыПоИнтересамСотрудники.Сотрудник КАК Сотрудник,
	|	ГруппыПоИнтересамФильтры.ГруппаТоваров КАК ГруппаТоваров
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.ГруппыПоИнтересам КАК ГруппыПоИнтересам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПоИнтересам.Фильтры КАК ГруппыПоИнтересамФильтры
	|		ПО (ГруппыПоИнтересамФильтры.Ссылка = ГруппыПоИнтересам.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПоИнтересам.Сотрудники КАК ГруппыПоИнтересамСотрудники
	|		ПО (ГруппыПоИнтересамСотрудники.Ссылка = ГруппыПоИнтересам.Ссылка)
	|ГДЕ
	|	ГруппыПоИнтересам.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Ссылка,
	|	вт.Родитель,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.Сотрудник) КАК Сотрудник,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.ГруппаТоваров) КАК ГруппаТоваров
	|ПОМЕСТИТЬ вт1
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	НЕ вт.Сотрудник ЕСТЬ NULL 
	|	И НЕ вт.ГруппаТоваров ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Ссылка,
	|	вт.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Ссылка,
	|	вт.Родитель
	|ПОМЕСТИТЬ вт2
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Ссылка,
	|	вт.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПоИнтересамСотрудники.Ссылка,
	|	ГруппыПоИнтересамСотрудники.НомерСтроки,
	|	ГруппыПоИнтересамСотрудники.Сотрудник
	|ПОМЕСТИТЬ вт3
	|ИЗ
	|	Справочник.ГруппыПоИнтересам.Сотрудники КАК ГруппыПоИнтересамСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Родитель,
	|	вт.Ссылка,
	|	СУММА(ЕСТЬNULL(вт1.Сотрудник, 0)) КАК СотрудникКолво,
	|	СУММА(ЕСТЬNULL(вт1.ГруппаТоваров, 0)) КАК ГруппаТоваров
	|ИЗ
	|	вт2 КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт1 КАК вт1
	|		ПО вт.Ссылка = вт1.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Родитель,
	|	вт.Ссылка";
	
	Результат = Запрос.Выполнить();
	
	ТЗГруппы = Результат.Выгрузить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПоИнтересамФильтры.Ссылка КАК Ссылка,
	|	ГруппыПоИнтересамФильтры.НомерСтроки,
	|	ГруппыПоИнтересамФильтры.ГруппаТоваров,
	|	ГруппыПоИнтересамФильтры.СтруктурнаяЕдиница,
	|	ГруппыПоИнтересамФильтры.ТипЗаписи,
	|	ГруппыПоИнтересамФильтры.ТипОперации,
	|	ГруппыПоИнтересамФильтры.ПричинаСписания
	|ИЗ
	|	Справочник.ГруппыПоИнтересам.Фильтры КАК ГруппыПоИнтересамФильтры
	|ГДЕ
	|	ГруппыПоИнтересамФильтры.Ссылка.ПометкаУдаления = ЛОЖЬ
	|ИТОГИ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоотФильтров=Новый Соответствие;
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		ТЗФильтры=Новый ТаблицаЗначений;
		ТЗФильтры.Колонки.Добавить("ГруппаТоваров");
		ТЗФильтры.Колонки.Добавить("СтруктурнаяЕдиница");
		ТЗФильтры.Колонки.Добавить("ТипЗаписи");
		ТЗФильтры.Колонки.Добавить("ТипОперации");
		ТЗФильтры.Колонки.Добавить("ПричинаСписания");
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НовСтр=ТЗФильтры.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		СоотФильтров.Вставить(ВыборкаСсылка.Ссылка,ТЗФильтры);
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПоИнтересамСотрудники.Ссылка,
	|	ГруппыПоИнтересамСотрудники.НомерСтроки,
	|	ГруппыПоИнтересамСотрудники.Сотрудник
	|ИЗ
	|	Справочник.ГруппыПоИнтересам.Сотрудники КАК ГруппыПоИнтересамСотрудники";
	
	Результат = Запрос.Выполнить();
	
	ТЗСотрудники = Результат.Выгрузить();
	
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних1.Объект,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,РолиПользователейСоставРоли.Сотрудник
	|ПОМЕСТИТЬ втБрендМенеджеры
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних1
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя)
	|			И (ВЫБОР
	|				КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|	И НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	1 КАК Приоритет,
	|	&ТипРоли КАК ТипРоли,РолиПользователейСоставРоли.Сотрудник
	|ПОМЕСТИТЬ втБезХар
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБрендМенеджеры КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	2,
	|	РолиПользователейТипыРолей.ТипРоли, РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли <> &ТипРоли) КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	РолиПользователейТипыРолей.ТипРоли
	|ПОМЕСТИТЬ втЧужиеХар
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли <> &ТипРоли И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	//|	И РолиПользователейСоставРоли.Сотрудник <> &ТекФизЛицо
	|	И РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	РолиПользователейТипыРолей.ТипРоли
	|;
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект,
	|	&ТипРоли КАК ТипРоли
	|ПОМЕСТИТЬ втЧужиеХарБМ
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБрендМенеджеры КАК РолиПользователейТипыРолей
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель
	|				ИЛИ РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя.Родитель.Родитель.Родитель)
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	//|	И РолиПользователейСоставРоли.Сотрудник <> &ТекФизЛицо
	|	И РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейТипыРолей.РольПользователя,
	|	РолиПользователейТипыРолей.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБезХар.РольПользователя,
	|	ЗначенияСвойствОбъектов.Объект,
	|	втБезХар.ТипРоли,втБезХар.Сотрудник
	|ПОМЕСТИТЬ втХар
	|ИЗ
	|	втБезХар КАК втБезХар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО втБезХар.Объект = ЗначенияСвойствОбъектов.Значение
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.Производитель))
	|			И (втБезХар.Объект ССЫЛКА Справочник.Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБезХар.РольПользователя КАК РольПользователя,
	|	втБезХар.Объект КАК Объект,
	|	втБезХар.Объект.Владелец КАК Номенклатура,втБезХар.Сотрудник
	|ИЗ
	|	втБезХар КАК втБезХар
	|ГДЕ
	|	НЕ втБезХар.Объект ССЫЛКА Справочник.Контрагенты
	|
	|СГРУППИРОВАТЬ ПО
	|	втБезХар.РольПользователя,
	|	втБезХар.Объект,
	|	втБезХар.Объект.Владелец,втБезХар.Сотрудник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втХар.РольПользователя,
	|	втХар.Объект,
	|	втХар.Объект.Владелец,втХар.Сотрудник
	|ИЗ
	|	втХар КАК втХар
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЧужиеХар КАК втЧужиеХар
	|		ПО втХар.ТипРоли = втЧужиеХар.ТипРоли
	|			И втХар.Объект = втЧужиеХар.Объект 
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЧужиеХарБМ КАК втЧужиеХарБМ
	|		ПО втХар.ТипРоли = втЧужиеХарБМ.ТипРоли
	|			И втХар.Объект = втЧужиеХарБМ.Объект
	|ГДЕ
	|	втЧужиеХар.РольПользователя ЕСТЬ NULL И втЧужиеХарБМ.РольПользователя ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втХар.РольПользователя,
	|	втХар.Объект,
	|	втХар.Объект.Владелец,втХар.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РольПользователя,
	|	Объект";
	
	
	
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаНачала));
	
	ТЗРоли = Запрос.Выполнить().Выгрузить();
	
	
	
	Для Каждого Стр1 Из ТЗГруппы Цикл
		Если Стр1.СотрудникКолво=0 Или Стр1.ГруппаТоваров=0 Тогда
			Продолжить;
		КонецЕсли;  
		МасСтрСот=ТЗСотрудники.НайтиСтроки(Новый Структура("Ссылка",Стр1.Ссылка));
		Для каждого Стр Из МасСтрСот Цикл
			Струк=Новый Структура("ТЗ",ТЗРезультатЗапросаИтог);
			КМ=Новый КомпоновщикМакетаКомпоновкиДанных;
			Отчет=Отчеты.ОтчетПоЛентеКартинок.Создать();
			Настройки=Отчет.КомпоновщикНастроек.ПолучитьНастройки();
			КолСтр=Настройки.Отбор.Элементы.Количество();
			Для Сч=0 По КолСтр-1 Цикл
				Настройки.Отбор.Элементы.Удалить(КолСтр-1-Сч);
			КонецЦикла;
			ГруппаОтборИ=Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ГруппаОтборИ.Представление = "ГруппаОтборИ";
			ГруппаОтборИ.Использование = Истина;
			//
			ЗаполнитьФильтрыПоГруппе(ГруппаОтборИ,Стр.Ссылка,ТЗГруппы,СоотФильтров);
			
			МасСтр=ТЗРоли.НайтиСтроки(Новый Структура("Сотрудник",Стр.Сотрудник));
			
			Если МасСтр.Количество() Тогда
				СпОб=Новый СписокЗначений;
				Для каждого Эл Из МасСтр Цикл
					СпОб.Добавить(Эл.Объект);
				КонецЦикла; 
				ГруппаИЛИ1ур = ГруппаОтборИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИЛИ1ур.Представление = "ГруппаИЛИ1ур";
				ГруппаИЛИ1ур.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаИЛИ1ур.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
				НоваяСтрОтбора.ПравоеЗначение = СпОб;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
				НоваяСтрОтбора.ПравоеЗначение = СпОб;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИ1ур.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = СпОб;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НоваяСтрОтбора.Использование = Истина;
				
			КонецЕсли; 
			
			МакетКомп=КМ.Выполнить(Отчеты.ОтчетПоЛентеКартинок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"),Настройки, , ,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			ПроцКД=Новый ПроцессорКомпоновкиДанных;
			ПроцКД.Инициализировать(МакетКомп,Струк);
			ПроцВыв=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТЗРезультат=Новый ТаблицаЗначений;
			ПроцВыв.УстановитьОбъект(ТЗРезультат);
			
			ПроцВыв.НачатьВывод();
			Ит=0;
			Пока Истина Цикл
				ЭлементРезультатаКомпоновкиДанных = 
				ПроцКД.Следующий();
				Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
					Прервать;
				КонецЕсли;
				ПроцВыв.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
				Ит=Ит+1;
				Если Ит=201 Тогда
					//Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			ПроцВыв.ЗакончитьВывод();
			
			
			Для Каждого ВыборкаДетальныеЗаписи из ТЗРезультат Цикл
				ИмяВремФайла="";
				УинКартинки = Строка(ВыборкаДетальныеЗаписи.УИНЗаписи);
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Расширение) Тогда
					МасСтр=ТаблицаСтруктурыФайловПоГруппам.НайтиСтроки(Новый Структура("УинКартинки,Сотрудник",УинКартинки,Стр.Сотрудник));
					Если МасСтр.Количество()=0 Тогда
						СтруктураЗаписи = ТаблицаСтруктурыФайловПоГруппам.Добавить();
						СтруктураЗаписи.Группа = Стр.Ссылка;
						СтруктураЗаписи.Сотрудник = Стр.Сотрудник;
						СтруктураЗаписи.УинКартинки = УинКартинки;
						СтруктураЗаписи.ТолькоМиниатюра = Ложь;
						СтруктураЗаписи.АдресВХранилище = ВыборкаДетальныеЗаписи.ОтносительноеИмяФайла;
						СтруктураЗаписи.Расширение = ВыборкаДетальныеЗаписи.Расширение;
						СтруктураЗаписи.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
						СтруктураЗаписи.Характеристика=ВыборкаДетальныеЗаписи.Характеристика;
						СтруктураЗаписи.НоменклатураНаименование=Строка(ВыборкаДетальныеЗаписи.Номенклатура);
						СтруктураЗаписи.ХарактеристикаНаименование=Строка(ВыборкаДетальныеЗаписи.Характеристика);
					КонецЕсли; 
				КонецЕсли;	
			КонецЦикла;
			
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьФильтрыПоГруппе(ГруппаОтборИ,Ссылка,ТЗГруппы,СоотФильтров)
	Табл=СоотФильтров.Получить(Ссылка);
	Если Не Табл=Неопределено Тогда
		
		ГруппаИЛИКорневой = ГруппаОтборИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИКорневой.Представление = "ИЛИКорневой";
		ГруппаИЛИКорневой.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаИЛИКорневой.Использование = Истина;
		Для каждого Стр Из Табл Цикл
			ФильтрыПриОкончанииРедактирования(ГруппаИЛИКорневой,Стр);
		КонецЦикла; 
	КонецЕсли; 
	МасСтр=ТЗГруппы.НайтиСтроки(Новый Структура("Ссылка",Ссылка));
	Если МасСтр.Количество() Тогда
		Родитель=МасСтр[0].Родитель;
		Если ЗначениеЗаполнено(Родитель) Тогда
			ЗаполнитьФильтрыПоГруппе(ГруппаОтборИ,Родитель,ТЗГруппы,СоотФильтров);	
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ФильтрыПриОкончанииРедактирования(ГруппаИЛИКорневой,ТекущиеДанные)
	Если ЗначениеЗаполнено(ТекущиеДанные.ГруппаТоваров) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) ИЛИ
		ЗначениеЗаполнено(ТекущиеДанные.ТипЗаписи) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТипОперации) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ПричинаСписания)	Тогда
		
		ГруппаИПоСтроке = ГруппаИЛИКорневой.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИПоСтроке.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаИПоСтроке.Использование = Истина;
		
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ГруппаТоваров) ИЛИ
				ЗначениеЗаполнено(ТекущиеДанные.ТипЗаписи) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТипОперации) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ПричинаСписания) Тогда
				ГруппаИЛИТТ = ГруппаИПоСтроке.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИЛИТТ.Представление = "ГруппаИЛИТТ";
				ГруппаИЛИТТ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаИЛИТТ.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИТТ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.СтруктурнаяЕдиница;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НоваяСтрОтбора.Использование = Истина;
				
				НоваяСтрОтбора = ГруппаИЛИТТ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НоваяСтрОтбора.Использование = Истина;
			Иначе	
				НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
				НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.СтруктурнаяЕдиница;	
				НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НоваяСтрОтбора.Использование = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ГруппаТоваров) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ГруппаТоваров;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипЗаписи) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЗаписи");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ТипЗаписи;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипОперации) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОперации");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ТипОперации;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекущиеДанные.ПричинаСписания) Тогда
			НоваяСтрОтбора = ГруппаИПоСтроке.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПричинаСписания");
			НоваяСтрОтбора.ПравоеЗначение = ТекущиеДанные.ПричинаСписания;	
			НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрОтбора.Использование = Истина;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьЭлементыВОтборе(Элемент,ЭлементКопирования)
	Если ТипЗнч(ЭлементКопирования)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		отб1=Элемент.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(отб1,ЭлементКопирования);
	ИначеЕсли ТипЗнч(ЭлементКопирования)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда	
		отб1=Элемент.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(отб1,ЭлементКопирования);
		Для каждого Эл Из ЭлементКопирования.Элементы Цикл
			ЗаполнитьЭлементыВОтборе(отб1,Эл);
		КонецЦикла; 
	КонецЕсли; 
	
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр) Экспорт 
	
	МассивСтрок = Новый Массив(); 
	Пока Истина Цикл 
		Поз = Найти(Стр,"#"); 
		Если Поз=0 Тогда 
			//МассивСтрок.Добавить(Стр); 
			Возврат МассивСтрок; 
		КонецЕсли;
		Стр=Сред(Стр,Поз+1);
		Поз1 = Найти(Стр,"#");
		Поз2 = Найти(Стр," ");
		Если Поз1=0 Тогда
			Поз=Поз2;
		ИначеЕсли Поз2=0 Тогда
			Поз=Поз1;
		Иначе
			Поз=Мин(Поз1,Поз2);
		КонецЕсли;
		Если Поз<>0 Тогда
			Стр1=Лев(Стр,Поз-1);
		КонецЕсли;
		Если МассивСтрок.Найти(Стр1)=Неопределено И ЗначениеЗаполнено(Стр1) Тогда
			МассивСтрок.Добавить(Стр1); 
		КонецЕсли; 
		Стр = Сред(Стр,Поз); 
	КонецЦикла; 
КонецФункции // глРазложить


Процедура СделатьРассылкаВозвратыСВключениями() Экспорт
	
	ТабСписания=ПолучитьТаблицуПоСписанию(ТекущаяДата());
	ТабСписания.Сортировать("Дата");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ТабСписания.ВыгрузитьКолонку("Помощник"));
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	СоотЭлПочты=Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.Представление)) Тогда
			СоотЭлПочты.Вставить(ВыборкаДетальныеЗаписи.Объект,ВыборкаДетальныеЗаписи.Представление);
		КонецЕсли; 
	КонецЦикла;
	МасПомощников=Новый Массив;
	Для каждого Стр Из ТабСписания Цикл
		Если ЗначениеЗаполнено(Стр.Помощник) И МасПомощников.Найти(Стр.Помощник)=Неопределено Тогда
			МасПомощников.Добавить(Стр.Помощник);
		КонецЕсли; 
	КонецЦикла; 	
	Мак=ПолучитьОбщийМакет("МакетРассылкиВозвратыСВключениями");
	Для каждого Эл Из МасПомощников Цикл
		ЭлПочта=СоотЭлПочты.Получить(Эл);
		Если ЭлПочта=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		МасСтр=ТабСписания.НайтиСтроки(Новый Структура("Помощник",Эл));	
		Если МасСтр.Количество() Тогда
			ТабДок=Новый ТабличныйДокумент;
			Обл=Мак.ПолучитьОбласть("Шапка");
			ТабДок.Вывести(Обл);
			Для каждого Стр Из МасСтр Цикл
				Обл=Мак.ПолучитьОбласть("Строка");
				Обл.Параметры.Заполнить(Стр);
				ТабДок.Вывести(Обл);
			КонецЦикла; 
			ОтправитьПисьмоПоКатегориям(ЭлПочта,ТабДок,"Возвраты с включениями");
		КонецЕсли; 
	КонецЦикла; 
	МасСтр=ТабСписания.НайтиСтроки(Новый Структура("Помощник",Эл));	
	Если МасСтр.Количество() Тогда
		ТабДок=Новый ТабличныйДокумент;
		Обл=Мак.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(Обл);
		Для каждого Стр Из МасСтр Цикл
			Обл=Мак.ПолучитьОбласть("Строка");
			Обл.Параметры.Заполнить(Стр);
			ТабДок.Вывести(Обл);
		КонецЦикла; 
		ОтправитьПисьмоПоКатегориям(ЭлПочта,ТабДок,"Возвраты с включениями");
	КонецЕсли; 
	
	ТабДок=Новый ТабличныйДокумент;
	Обл=Мак.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Обл);
	Для каждого Стр Из ТабСписания Цикл
		Обл=Мак.ПолучитьОбласть("Строка");
		Обл.Параметры.Заполнить(Стр);
		ТабДок.Вывести(Обл);
	КонецЦикла; 
	ОтправитьПисьмоПоКатегориям("info@izbenka.msk.ru",ТабДок,"Возвраты с включениями");
	
КонецПроцедуры

Функция ПолучитьТаблицуПоСписанию(Дата)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.УстановитьПараметр("Дата", ДобавитьМесяц(Дата, -1));
	ЗапросКеш.УстановитьПараметр("ДатаНач", Дата - 86400*5);
	ЗапросКеш.УстановитьПараметр("ДатаКон", Дата + 86400*5);
	ЗапросКеш.УстановитьПараметр("ТекДата", Дата);
	ЗапросКеш.Текст = "	                 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Харки.Владелец,
	|	ВЗ_Харки.Ссылка,
	|	ВЗ_Харки.id_kontr,
	|	ВЗ_Харки.Значение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследних.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(СоответствиеОбъектРольСрезПоследних.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	|	КОНЕЦ КАК РольПользователя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|		ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|		ХарактеристикиНоменклатуры.id_kontr КАК id_kontr,
	|		ЗначенияСвойствОбъектов.Значение КАК Значение
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))) КАК ВЗ_Харки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО ВЗ_Харки.Ссылка = СоответствиеОбъектРольСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихКонтр
	|		ПО ВЗ_Харки.Значение = СоответствиеОбъектРольСрезПоследнихКонтр.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|";
	
	Результаты = ЗапросКеш.ВыполнитьПакет();
	
	ТабХарактеристики = Результаты[0].Выгрузить();
	ТабХарактеристики.Индексы.Добавить("Владелец, id_kontr");
	ТабРоли = Результаты[1].Выгрузить();
	ТабРоли.Индексы.Добавить("Ссылка");
	
	
	ТабСписания = Новый ТаблицаЗначений();
	ТабСписания.Колонки.Добавить("УинОперации");
	ТабСписания.Колонки.Добавить("Номенклатура");
	ТабСписания.Колонки.Добавить("Характеристика");
	ТабСписания.Колонки.Добавить("ДатаПроизводства");
	ТабСписания.Колонки.Добавить("Поставщик");
	ТабСписания.Колонки.Добавить("ПричинаСписания");
	ТабСписания.Колонки.Добавить("Магазин");
	ТабСписания.Колонки.Добавить("Адресат");
	ТабСписания.Колонки.Добавить("Колво", Новый ОписаниеТипов("Число"));
	ТабСписания.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТабСписания.Колонки.Добавить("УинКартинки");
	ТабСписания.Колонки.Добавить("Комментарии");
	ТабСписания.Колонки.Добавить("КомментарийПродавца");
	ТабСписания.Колонки.Добавить("ИмяФайла");
	ТабСписания.Колонки.Добавить("ДатаКартинки");
	ТабСписания.Колонки.Добавить("Дата");
	ТабСписания.Колонки.Добавить("Помощник");
	
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	Дата1=НачалоДня(Дата)-4*60*60;
	Дата2=НачалоДня(Дата)+20*60*60-1;
	
	
	ТекстЗапроса = "declare @date1 as datetime , @date2 as datetime
	|
	|
	|set @date1=" + ВнешниеДанные.ФорматПоля(Дата1) + "
	|set @date2 =" + ВнешниеДанные.ФорматПоля(Дата2) + "
	|
	| 
	|
	|SELECT TD.ShopNo_rep,  TD.closedate, TD.id_tov, TD.id_kontr, CAST(CASE WHEN ISNULL(TD.Date_proizv, '1900-01-01') < '2000-01-01' THEN '1900-01-01' ELSE TD.Date_proizv END as datetime) as Date_proizv, TD.Quantity as QtySpis
	|,TD.Descr,Tov2Uid.UIN as TovUin, CAST(TT2Uid.UID as nvarchar(50)) as TTUid
	|FROM  SMS_Repl.dbo.TD_move as TD with (nolock)
	|LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID (nolock) as Tov2Uid ON TD.id_tov = Tov2Uid.id
	|LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID (nolock) as TT2Uid ON TD.ShopNo_rep = TT2Uid.ShopNo
	| WHERE  TD.closedate >=@date1  and TD.closedate <= @date2	
	|and TD.operation_type * CASE WHEN TD.operation_type < 0 THEN -1 ELSE 1 END IN ( 201) and TD.id_reason=702";
	//|union all
	//|select TT.N,cl.date_ch,cl.id_tov_cl,  isnull(cl.ManufacturerID,0),cl.Date_proiizv, cl.Quantity qty,   ''
	//|from SMS_IZBENKA..Checkline as cl with(nolock)
	//|left outer join M2.dbo.tt TT ON cl.id_tt_cl = TT.id_TT
	//|where date_ch between @date1 and @date2 and cl.OperationType_cl in (201) and isnull(cl.ManufacturerID,0)<>0   and cl.id_reason=702	 		
	
	
	
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			//Сообщить((rs.Fields("id_tov").Value));
			
			СтрокаДоб = ТабСписания.Добавить();
			СтрокаДоб.Дата = НРег(rs.Fields("closedate").Value);
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TovUin").Value));
			СтрокаДоб.Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TTUid").Value));
			СтрокиХарки = ТабХарактеристики.НайтиСтроки(Новый Структура("Владелец, id_kontr", СтрокаДоб.Номенклатура, rs.Fields("id_kontr").Value));
			
			Если СтрокиХарки.Количество() > 0 Тогда
				СтрокаДоб.Характеристика = СтрокиХарки[0].Ссылка;
				СтрокаДоб.Поставщик = СтрокиХарки[0].Значение;
				//Если ЗначениеЗаполнено(СтрокиХарки[0].РольПользователя) Тогда
				//	СтрокаРоль = ТабРоли.Найти(СтрокиХарки[0].РольПользователя, "Ссылка");
				//	Если СтрокаРоль <> Неопределено Тогда
				//		СтрокаДоб.Технолог = СтрокаРоль.Сотрудник;
				//	КонецЕсли;	
				//КонецЕсли;	
			КонецЕсли;
			СтрокаДоб.ДатаПроизводства = ?(rs.Fields("Date_proizv").Value < '20000101', '00010101', rs.Fields("Date_proizv").Value);
			СтрокаДоб.КомментарийПродавца = СокрЛП(СтрЗаменить(rs.Fields("Descr").Value, "(из моб. приложения)", ""));
			СтрокаДоб.Колво = rs.Fields("QtySpis").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();   
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних.Объект
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&Дата,
	|			ТипРоли = &ТипРоли
	|				И Объект В (&Объекты)) КАК СоответствиеОбъектРольСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Объекты", ТабСписания.ВыгрузитьКолонку("Магазин"));
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	
	Результат = Запрос.Выполнить();
	
	ТЗПомощники = Результат.Выгрузить();
	Для каждого Стр Из ТабСписания Цикл
		СтрПоиск=ТЗПомощники.Найти(Стр.Магазин);	
		Если Не СтрПоиск=Неопределено Тогда
			Если ЗначениеЗаполнено(СтрПоиск.РольПользователя) Тогда
				СтрокаРоль = ТабРоли.Найти(СтрПоиск.РольПользователя, "Ссылка");
				Если СтрокаРоль <> Неопределено Тогда
					Стр.Помощник = СтрокаРоль.Сотрудник;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли; 
	КонецЦикла; 
	
	
	Возврат ТабСписания;
	
КонецФункции



//---AK БЕЛН

//+++АК VERN 2016.08.10 ИП-00013306.001.00000001
Процедура АК_РассылкаПоставщикамТехнологам() Экспорт
	
	Попытка
		АК_РассылкиПоставщикамТехнологам.ВыполнитьРассылку();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//---АК VERN 2016.08.10 ИП-00013306.001.00000001

//+++АК SHEP 20160825
Процедура УведомлениеПоЗадачамТехнологов() Экспорт
	
	ВнешниеОбработкиСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Уведомление по задачам технологов");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВнешниеОбработкиСсылка.ХранилищеВнешнейОбработки.Получить());
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешняяОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки);
	ВнешняяОбработкаОбъект.УведомитьПоЗадачамТехнологов();
	
КонецПроцедуры
//---АК SHEP 20160825

//+++АК SHEP 20170504
Процедура ОбработкаЗаданийНаДегустацию() Экспорт
	
	ВнешниеОбработкиСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Обработка заданий на дегустацию");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВнешниеОбработкиСсылка.ХранилищеВнешнейОбработки.Получить());
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешняяОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки);
	ВнешняяОбработкаОбъект.Обработать();
	
КонецПроцедуры
//---АК SHEP 20170504

Процедура АК_КонтрольДЗРассылкаУведомлений() Экспорт
	
	АК_КонтрольЗадолженности.СформироватьУведомленияПоЗаявкамКОплате(ТекущаяДата())
	
КонецПроцедуры

//Раков П.С ++
Процедура АК_ЕженедельнаяРассылкаПДЗМенеджерам() Экспорт
	
	АК_КонтрольЗадолженности.Сформировать_ЕженедельнаяРассылкаПДЗ("Менеджер")
	
КонецПроцедуры

Процедура АК_ЕженедельнаяРассылкаПДЗБухгалтерам() Экспорт
	
	АК_КонтрольЗадолженности.Сформировать_ЕженедельнаяРассылкаПДЗ("Бухгалтер")
	
КонецПроцедуры

Процедура АК_ЕженедельнаяРассылкаПДЗРуководителям() Экспорт
	
	АК_КонтрольЗадолженности.Сформировать_ЕженедельнаяРассылкаПДЗ("Руководитель")
	
КонецПроцедуры
//Раков П.С --

Процедура РассылкаОтчетовПоУпаковке() Экспорт
	
	//////////////////////////////////
	// Заказы без поступлений
	
	мДата = НачалоДня(ТекущаяДата()) -1;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"Declare @DateNach date
	|
	|Set @DateNach = '4" + Сред(Формат(Год(мДата), "ЧГ="), 2) + "-" + Формат(Месяц(мДата), "ЧЦ=2; ЧВН=") + "-" + Формат(День(мДата), "ЧЦ=2; ЧВН=") + "'
	|
	|If OBJECT_ID('tempdb..#VTTovaryZakazov') is not null			Drop Table #VTTovaryZakazov
	|If OBJECT_ID('tempdb..#VTIzmeneniyaZakazov') is not null		Drop Table #VTIzmeneniyaZakazov
	|If OBJECT_ID('tempdb..#VTTovaryZakazov_Dopust') is not null	Drop Table #VTTovaryZakazov_Dopust
	|If OBJECT_ID('tempdb..#VTMinDatePost') is not null				Drop Table #VTMinDatePost
	|If OBJECT_ID('tempdb..#VTMaxDatePost') is not null				Drop Table #VTMaxDatePost
	|
	|-----------------------------------------------------------------------------------------------
	|Select
	|	Zakazy._Fld3057RRef as StrEd,
	|	Convert(date, DateAdd(Day, -1, Zakazy._Fld3058)) as date_post,
	|	Convert(date, Zakazy._Date_Time) as Date_Zakaz,
	|	Reg_Izmeneniya._Fld8504RRef as _Fld8504RRef,
	|	Reg_Izmeneniya._Fld8505RRef as _Fld8505RRef,
	|	Reg_Izmeneniya._Fld8506RRef as _Fld8506RRef,
	|	Reg_Izmeneniya._Fld8507 as _Fld8507,
	|	Reg_Izmeneniya._Period as _Period
	|Into #VTIzmeneniyaZakazov
	|From IzbenkaFin.._InfoRg8502 as Reg_Izmeneniya (nolock)
	| Inner Join IzbenkaFin.._Document3032 as Zakazy (nolock)
	| On Zakazy._IDRRef = Reg_Izmeneniya._Fld8504RRef
	|	And Convert(date, DateAdd(Day, -1, Zakazy._Fld3058)) >= @DateNach-- and @DateKon
	|	And Zakazy._Fld3060 = 1 -- подготовлен
	|	And Zakazy._Posted = 1
	|
	|-----------------------------------------------------------------------------------------------
	|Select
	|	VTIzmeneniyaZakazov.date_post as date_post,
	|	VTIzmeneniyaZakazov.StrEd as StrEd,
	|	VTIzmeneniyaZakazov._Fld8504RRef as Zakaz,
	|	VTIzmeneniyaZakazov._Fld8505RRef as Tovar,
	|	VTIzmeneniyaZakazov._Fld8506RRef as Har,
	|	SUM(VTIzmeneniyaZakazov._Fld8507) as Kol
	|Into #VTTovaryZakazov_Dopust
	|From #VTIzmeneniyaZakazov as VTIzmeneniyaZakazov (nolock)
	| Inner Join
	|  (Select
	|	Reg_Izmeneniya._Fld8504RRef as _Fld8504RRef,
	|	Reg_Izmeneniya._Fld8505RRef as _Fld8505RRef,
	|	Reg_Izmeneniya._Fld8506RRef as _Fld8506RRef,
	|	MAX(Reg_Izmeneniya._Period) as _Period
	|  From #VTIzmeneniyaZakazov as Reg_Izmeneniya (nolock)
	|  Where
	|	DATEDIFF(Day, Reg_Izmeneniya.Date_Zakaz, Convert(Date, Reg_Izmeneniya._Period)) <= 1
	|  Group by
	|	Reg_Izmeneniya._Fld8504RRef,
	|	Reg_Izmeneniya._Fld8505RRef,
	|	Reg_Izmeneniya._Fld8506RRef) as Max_Periody
	| On Max_Periody._Fld8504RRef = VTIzmeneniyaZakazov._Fld8504RRef
	|	 And Max_Periody._Fld8505RRef = VTIzmeneniyaZakazov._Fld8505RRef
	|	 And Max_Periody._Fld8506RRef = VTIzmeneniyaZakazov._Fld8506RRef
	|	 And Max_Periody._Period = VTIzmeneniyaZakazov._Period
	|Group by
	|	VTIzmeneniyaZakazov.date_post,
	|	VTIzmeneniyaZakazov.StrEd,
	|	VTIzmeneniyaZakazov._Fld8504RRef,
	|	VTIzmeneniyaZakazov._Fld8505RRef,
	|	VTIzmeneniyaZakazov._Fld8506RRef
	|
	|-----------------------------------------------------------------------------------------------
	|Select
	|	Convert(date, Izmeneniya_Date_Post._Period) as Period,
	|	Izmeneniya_Date_Post._Fld8499RRef as Zakaz,
	|	Convert(date, Izmeneniya_Date_Post._Fld8500) as Date_post
	|Into #VTMinDatePost
	|From IzbenkaFin.._InfoRg8497 as Izmeneniya_Date_Post (nolock)
	| Inner Join
	|	(Select
	|		Izmeneniya_Date_Post._Fld8499RRef as Zakaz,
	|		MIN(Izmeneniya_Date_Post._Period) as Period
	|	From IzbenkaFin.._InfoRg8497 as Izmeneniya_Date_Post (nolock)
	|	Where
	|		Convert(date, Izmeneniya_Date_Post._Fld8500) = @DateNach
	|	Group by
	|		Izmeneniya_Date_Post._Fld8499RRef) as Min_Periody
	| On Min_Periody.Period = Izmeneniya_Date_Post._Period
	|	And Min_Periody.Zakaz = Izmeneniya_Date_Post._Fld8499RRef	
	|
	|-----------------------------------------------------------------------------------------------
	|Select
	|	Convert(date, Izmeneniya_Date_Post._Period) as Period,
	|	Izmeneniya_Date_Post._Fld8499RRef as Zakaz,
	|	Convert(date, Izmeneniya_Date_Post._Fld8500) as Date_post
	|Into #VTMaxDatePost
	|From IzbenkaFin.._InfoRg8497 as Izmeneniya_Date_Post (nolock)
	| Inner Join
	|	(Select
	|		Izmeneniya_Date_Post._Fld8499RRef as Zakaz,
	|		Max(Izmeneniya_Date_Post._Period) as Period
	|	From IzbenkaFin.._InfoRg8497 as Izmeneniya_Date_Post (nolock)
	|	Where
	|		Convert(date, Izmeneniya_Date_Post._Fld8500) >= @DateNach
	|	Group by
	|		Izmeneniya_Date_Post._Fld8499RRef) as Min_Periody
	| On Min_Periody.Period = Izmeneniya_Date_Post._Period
	|	And Min_Periody.Zakaz = Izmeneniya_Date_Post._Fld8499RRef	
	|
	|-----------------------------------------------------------------------------------------------
	|select
	|	VTTovaryZakazov_Dopust.date_post as date_post,
	|	VTTovaryZakazov_Dopust.StrEd as StrEd,
	|	VTTovaryZakazov_Dopust.Tovar as Tovar,
	|	VTTovaryZakazov_Dopust.Har as Har,
	|	SUM(VTTovaryZakazov_Dopust.Kol) as Kol
	|Into #VTTovaryZakazov
	|from #VTTovaryZakazov_Dopust as VTTovaryZakazov_Dopust
	|Where
	|	VTTovaryZakazov_Dopust.date_post <= @DateNach
	|Group by
	|	VTTovaryZakazov_Dopust.date_post,
	|	VTTovaryZakazov_Dopust.StrEd,
	|	VTTovaryZakazov_Dopust.Tovar,
	|	VTTovaryZakazov_Dopust.Har
	|
	|Union All
	|
	|select
	|	VTMinDatePost.date_post as date_post,
	|	VTTovaryZakazov_Dopust.StrEd as StrEd,
	|	VTTovaryZakazov_Dopust.Tovar as Tovar,
	|	VTTovaryZakazov_Dopust.Har as Har,
	|	SUM(VTTovaryZakazov_Dopust.Kol) as Kol
	|from #VTTovaryZakazov_Dopust as VTTovaryZakazov_Dopust
	| Inner Join #VTMinDatePost as VTMinDatePost
	| On VTMinDatePost.Zakaz = VTTovaryZakazov_Dopust.Zakaz
	| Left Outer Join #VTMaxDatePost as VTMaxDatePost
	| On VTMaxDatePost.Zakaz = VTTovaryZakazov_Dopust.Zakaz
	| Left outer Join IzbenkaFin.._Reference2539 as Spr_Har (nolock)
	| On Spr_Har._IDRRef = VTTovaryZakazov_Dopust.Har
	|Where
	|	DateDiff(Day, VTMaxDatePost.Period, VTMinDatePost.Period) > 1
	|	And DateDiff(Day, VTMaxDatePost.Date_post, VTMinDatePost.Date_post) >			-- 1/10 срока годности, но не > 10 дней
	|			Case When 10 < (ISNULL(Spr_Har._Fld6855, 0) * 0.1) Then 10 Else ISNULL(Spr_Har._Fld6855, 0) * 0.1 End 
	|Group by
	|	VTMinDatePost.date_post,
	|	VTTovaryZakazov_Dopust.StrEd,
	|	VTTovaryZakazov_Dopust.Tovar,
	|	VTTovaryZakazov_Dopust.Har
	|	
	|-----------------------------------------------------------------------------------------------
	|select
	|	DateAdd(Year, -2000, ISNULL(VTTovaryZakazov.date_post, tovary_Postupili.date_post)) as date_post,
	|	ISNULL(_tt.name_TT, '') as Naim_StrEd,
	|	ISNULL(Spr_Nom._Description, '') as Naim_Tovara,
	|	ISNULL(Spr_Har._Description, '') as Naim_Har,
	|	ISNULL(VTTovaryZakazov.Kol, 0) as Kol_Zakaz,
	|	CAST(IsNull(tovary_Postupili.Kol, 0) as Numeric(15, 3)) as Kol_Postupilo
	|from #VTTovaryZakazov as VTTovaryZakazov (nolock)
	| left outer Join
	| (
	| Select
	|	SprSklady._OwnerIDRRef as StrEd,
	|	Convert(date, DateAdd(Day, -1, Doc_ZakazPost._Fld3121)) as date_post,
	|	Tovary_Prihod._Fld3079RRef as Tovar,
	|	Tovary_Prihod._Fld3080RRef as Har,
	|	SUM(Tovary_Prihod._Fld3082 * SprEdIzm._Fld178) as Kol
	| from IzbenkaFin.._Document3033_VT3077 as Tovary_Prihod (nolock)
	|  Inner Join IzbenkaFin.._Document3033 as Prihody (nolock)
	|  On Prihody._IDRRef = Tovary_Prihod._Document3033_IDRRef
	|	 And Prihody._Posted = 1
	|  Inner Join IzbenkaFin.._Document3035 as Doc_ZakazPost (nolock)
	|  On Doc_ZakazPost._IDRRef = Tovary_Prihod._Fld5137RRef
	|	 And Convert(date, DateAdd(Day, -1, Doc_ZakazPost._Fld3121)) = @DateNach
	|  Inner Join IzbenkaFin.._Reference21 as SprEdIzm (nolock)
	|  On SprEdIzm._IDRRef = Tovary_Prihod._Fld3081RRef
	|  Inner Join IzbenkaFin.._Reference1321 as SprSklady (nolock)
	|  On SprSklady._IDRRef = Prihody._Fld3071RRef
	| group by
	|	SprSklady._OwnerIDRRef,
	|	Convert(date, DateAdd(Day, -1, Doc_ZakazPost._Fld3121)),
	|	Tovary_Prihod._Fld3079RRef,
	|	Tovary_Prihod._Fld3080RRef
	| ) as tovary_Postupili
	| On tovary_Postupili.StrEd = VTTovaryZakazov.StrEd
	|	And tovary_Postupili.date_post = VTTovaryZakazov.date_post
	|	And tovary_Postupili.Tovar = VTTovaryZakazov.Tovar
	|	And tovary_Postupili.Har = VTTovaryZakazov.Har
	| Left outer Join IzbenkaFin.._Reference29 as Spr_Nom (nolock)
	| On Spr_Nom._IDRRef = ISNULL(VTTovaryZakazov.Tovar, tovary_Postupili.Tovar)
	| Left outer Join IzbenkaFin.._Reference2539 as Spr_Har (nolock)
	| On Spr_Har._IDRRef = ISNULL(VTTovaryZakazov.Har, tovary_Postupili.Har)
	| Left outer Join M2..tt as _tt (nolock)
	| On _tt.Ref = ISNULL(VTTovaryZakazov.StrEd, tovary_Postupili.StrEd)
	|Where
	|	IsNull(tovary_Postupili.Kol, 0) = 0
	|
	|Order by
	|	date_post,
	|	Naim_StrEd,
	|	Naim_Tovara,
	|	Naim_Har
	|
	|-----------------------------------------------------------------------------------------------
	|Drop Table #VTTovaryZakazov
	|Drop Table #VTIzmeneniyaZakazov
	|Drop Table #VTTovaryZakazov_Dopust
	|Drop Table #VTMinDatePost
	|Drop Table #VTMaxDatePost";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	ТекстХТМЛ_2 = "<table border='2'><tr align='center'><td>Дата поступления</td><td>Склад</td><td>Номенклатура</td><td>Характ.</td><td>Кол-во заказано</td></tr>";
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			
			Пока НЕ Выборка.EOF Цикл
				
				ТекстХТМЛ_2 = ТекстХТМЛ_2 + "<tr>";
				ТекстХТМЛ_2 = ТекстХТМЛ_2 + "<td>" + Формат(Выборка.Fields("date_post").Value, "ДЛФ=Д") + "</td>";
				ТекстХТМЛ_2 = ТекстХТМЛ_2 + "<td>" + СокрЛП(СтрЗаменить(Выборка.Fields("Naim_StrEd").Value	, """", "&quot;")) + "</td>";
				ТекстХТМЛ_2 = ТекстХТМЛ_2 + "<td>" + СокрЛП(СтрЗаменить(Выборка.Fields("Naim_Tovara").Value	, """", "&quot;")) + "</td>";
				ТекстХТМЛ_2 = ТекстХТМЛ_2 + "<td>" + СокрЛП(СтрЗаменить(Выборка.Fields("Naim_Har").Value	, """", "&quot;")) + "</td>";
				ТекстХТМЛ_2 = ТекстХТМЛ_2 + "<td>" + Формат(Выборка.Fields("Kol_Zakaz").Value, "ЧГ=") + "</td>";
				ТекстХТМЛ_2 = ТекстХТМЛ_2 + "</tr>";
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;;
	ТекстХТМЛ_2 = ТекстХТМЛ_2 + "</table>";	
	
	ADOСоединение.Close();
	
	
	//////////////////////////////////
	// Упаковка без движения
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"			, ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоТекДата"	, НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Период,
	|	ТоварыНаСкладахОбороты.Регистратор,
	|	ТоварыНаСкладахОбороты.Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.ЕдиницаИзмерения,
	|	ТоварыНаСкладахОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ТоварыНаСкладахОстатки.Количество КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Регистраторы
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			,
	|			&ТекДата,
	|			Регистратор,
	|			Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)
	|				И Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)) КАК ТоварыНаСкладахОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыНаСкладахОстатки.Склад КАК Склад,
	|			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|			ТоварыНаСкладахОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	|					&ТекДата,
	|					Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)
	|						И Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)) КАК ТоварыНаСкладахОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыНаСкладахОстатки.Склад,
	|			ТоварыНаСкладахОстатки.Номенклатура,
	|			ТоварыНаСкладахОстатки.Характеристика,
	|			ТоварыНаСкладахОстатки.ЕдиницаИзмерения) КАК ТоварыНаСкладахОстатки
	|		ПО (ТоварыНаСкладахОстатки.Склад = ТоварыНаСкладахОбороты.Склад)
	|			И (ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаСкладахОбороты.Номенклатура)
	|			И (ТоварыНаСкладахОстатки.Характеристика = ТоварыНаСкладахОбороты.Характеристика)
	|			И (ТоварыНаСкладахОстатки.ЕдиницаИзмерения = ТоварыНаСкладахОбороты.ЕдиницаИзмерения)
	|			И (ТоварыНаСкладахОстатки.Количество > 0)
	|ГДЕ
	|	НЕ ТоварыНаСкладахОбороты.КоличествоПриход = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Регистраторы.Склад КАК Склад,
	|	ВТ_Регистраторы.Номенклатура КАК Номенклатура,
	|	ВТ_Регистраторы.Характеристика КАК Характеристика,
	|	ВТ_Регистраторы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Регистраторы.Период КАК Период,
	|	ВТ_Регистраторы.Регистратор КАК Регистратор,
	|	ВТ_Регистраторы.КоличествоПриход КАК КоличествоВДокументе,
	|	ВТ_Регистраторы.КоличествоОстаток КАК КоличествоОстаток,
	|	СУММА(ЕСТЬNULL(ВТ_Регистраторы_2.КоличествоПриход, 0)) КАК КоличествоПриход
	|ПОМЕСТИТЬ ВТ_КоличестваНарастающим
	|ИЗ
	|	ВТ_Регистраторы КАК ВТ_Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Регистраторы КАК ВТ_Регистраторы_2
	|		ПО (ВТ_Регистраторы_2.Склад = ВТ_Регистраторы.Склад)
	|			И (ВТ_Регистраторы_2.Номенклатура = ВТ_Регистраторы.Номенклатура)
	|			И (ВТ_Регистраторы_2.Характеристика = ВТ_Регистраторы.Характеристика)
	|			И (ВТ_Регистраторы_2.ЕдиницаИзмерения = ВТ_Регистраторы.ЕдиницаИзмерения)
	|			И (ВТ_Регистраторы_2.Период > ВТ_Регистраторы.Период
	|				ИЛИ ВТ_Регистраторы_2.Период = ВТ_Регистраторы.Период
	|					И ВТ_Регистраторы_2.Регистратор > ВТ_Регистраторы.Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Регистраторы.Склад,
	|	ВТ_Регистраторы.Номенклатура,
	|	ВТ_Регистраторы.Характеристика,
	|	ВТ_Регистраторы.ЕдиницаИзмерения,
	|	ВТ_Регистраторы.Период,
	|	ВТ_Регистраторы.Регистратор,
	|	ВТ_Регистраторы.КоличествоПриход,
	|	ВТ_Регистраторы.КоличествоОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КоличестваНарастающим.Склад КАК Склад,
	|	ВТ_КоличестваНарастающим.Номенклатура КАК Номенклатура,
	|	ВТ_КоличестваНарастающим.Характеристика КАК Характеристика,
	|	ВТ_КоличестваНарастающим.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РАЗНОСТЬДАТ(ВТ_КоличестваНарастающим.Период, &НачалоТекДата, ДЕНЬ) КАК КолДней,
	|	НАЧАЛОПЕРИОДА(ВТ_КоличестваНарастающим.Период, ДЕНЬ) КАК ДатаДокументов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_КоличестваНарастающим.КоличествоОстаток - ВТ_КоличестваНарастающим.КоличествоПриход > ВТ_КоличестваНарастающим.КоличествоВДокументе
	|				ТОГДА ВТ_КоличестваНарастающим.КоличествоВДокументе
	|			ИНАЧЕ ВТ_КоличестваНарастающим.КоличествоОстаток - ВТ_КоличестваНарастающим.КоличествоПриход
	|		КОНЕЦ) КАК КоличествоБезДвижения,
	|	СУММА(ВТ_КоличестваНарастающим.КоличествоВДокументе) КАК КоличествоВДокументах,
	|	ВТ_КоличестваНарастающим.КоличествоОстаток КАК ТекущийОстаток
	|ИЗ
	|	ВТ_КоличестваНарастающим КАК ВТ_КоличестваНарастающим
	|ГДЕ
	|	ВТ_КоличестваНарастающим.КоличествоПриход < ВТ_КоличестваНарастающим.КоличествоОстаток
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КоличестваНарастающим.Склад,
	|	ВТ_КоличестваНарастающим.Номенклатура,
	|	ВТ_КоличестваНарастающим.Характеристика,
	|	ВТ_КоличестваНарастающим.ЕдиницаИзмерения,
	|	ВТ_КоличестваНарастающим.КоличествоОстаток,
	|	РАЗНОСТЬДАТ(ВТ_КоличестваНарастающим.Период, &НачалоТекДата, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ВТ_КоличестваНарастающим.Период, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокументов,
	|	ВТ_КоличестваНарастающим.Номенклатура.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Регистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КоличестваНарастающим";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстХТМЛ_1 = "<table border='2'><tr align='center'><td>Склад</td><td>Номенклатура</td><td>Характ.</td><td>Кол. дней</td><td>Дата</td><td>Кол-во без движения</td><td>Кол-во в документах</td><td>Тек. остаток на складе</td><td>Ед.изм.</td></tr>";
	
	Пока Выборка.Следующий() Цикл
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<tr>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + СокрЛП(СтрЗаменить(Выборка.Склад			, """", "&quot;")) + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + СокрЛП(СтрЗаменить(Выборка.Номенклатура	, """", "&quot;")) + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + СокрЛП(СтрЗаменить(Выборка.Характеристика	, """", "&quot;")) + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + Формат(Выборка.КолДней						, "ЧГ=") + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + Формат(Выборка.ДатаДокументов				, "ДЛФ=Д") + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + Формат(Выборка.КоличествоБезДвижения		, "ЧГ=") + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + Формат(Выборка.КоличествоВДокументах		, "ЧГ=") + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + Формат(Выборка.ТекущийОстаток				, "ЧГ=") + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "<td>" + СокрЛП(Выборка.ЕдиницаИзмерения) + "</td>";
		ТекстХТМЛ_1 = ТекстХТМЛ_1 + "</tr>";
	КонецЦикла;
	ТекстХТМЛ_1 = ТекстХТМЛ_1 + "</table>";	
	
	
	//////////////////////////////////
	// Заявки на производство упаковки
	мДатаВыполненныхЗаявок = НачалоДня(ТекущаяДата()) - 20 * 86400;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", мДатаВыполненныхЗаявок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаПечатьЭтикетки.Ссылка,
	|	ЗаявкаНаПечатьЭтикетки.СтатусЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаПечатьЭтикетки КАК ЗаявкаНаПечатьЭтикетки
	|ГДЕ
	|	ЗаявкаНаПечатьЭтикетки.Проведен
	|	И ЗаявкаНаПечатьЭтикетки.Дата < &ДатаНач
	|	И НЕ ЗаявкаНаПечатьЭтикетки.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаПечатьЭтикетки.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЗаявкаНаПечатьЭтикетки.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Выполнено,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаявкаНаПечатьЭтикетки.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Произведено,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаявкаНаПечатьЭтикетки.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Обработано,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаявкаНаПечатьЭтикетки.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Отменена
	|ИЗ
	|	Документ.ЗаявкаНаПечатьЭтикетки КАК ЗаявкаНаПечатьЭтикетки
	|ГДЕ
	|	ЗаявкаНаПечатьЭтикетки.Проведен
	|	И ЗаявкаНаПечатьЭтикетки.Дата < &ДатаНач";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТекстХТМЛ = "<table border='2'><tr align='center'><td>Заявка</td><td>Статус</td></tr>";
	Выборка = РезультатыЗапроса[0]. Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Выборка.Ссылка + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Выборка.СтатусЗаявки + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";	
	
	
	//////////////////////////////////
	// Отправка письма
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Отчеты по упаковке на дату " + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = "derbyshev-sergey@yandex.ru";	
	
	//
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
	ТекстПисьма.Текст 		= "Заявки на производство упаковки:";
	
	Выборка = РезультатыЗапроса[1]. Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
		ТекстПисьма.Текст 		= "На дату " + Формат(мДатаВыполненныхЗаявок, "ДЛФ=Д") +
		" заявок  Выполнено " + Формат(Выборка.Выполнено, "ЧГ=") + "; Произведено " + Формат(Выборка.Произведено, "ЧГ=") +
		"; Обработано " + Формат(Выборка.Обработано, "ЧГ=") + "; Отменено " + Формат(Выборка.Отменена, "ЧГ=");
		
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
		ТекстПисьма.Текст 		= ТекстХТМЛ;
	КонецЕсли;
	
	//
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
	ТекстПисьма.Текст 		= "Заказы без поступлений:";
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
	ТекстПисьма.Текст 		= ТекстХТМЛ_2;
	
	//
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
	ТекстПисьма.Текст 		= Символы.ПС + Символы.ПС + "Упаковка без движения:";
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
	ТекстПисьма.Текст 		= ТекстХТМЛ_1;
	
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры

//АК++ tuga 20161130
Процедура ПроверкаОстатковДляПереходаНаНовуюУпаковку() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтролируемыеОстаткиРасходников.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.КонтролируемыеОстаткиРасходников КАК КонтролируемыеОстаткиРасходников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.Поставщик КАК Поставщик,
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|				ТоварыНаСкладахОстатки.Склад.Контрагент КАК Поставщик,
	|				СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.ТоварыНаСкладах.Остатки(
	|						&Период,
	|						Номенклатура В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								Т.Номенклатура
	|							ИЗ
	|								РегистрСведений.КонтролируемыеОстаткиРасходников КАК Т)) КАК ТоварыНаСкладахОстатки
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТоварыНаСкладахОстатки.Номенклатура,
	|				ТоварыНаСкладахОстатки.Склад.Контрагент
	|			
	|			ИМЕЮЩИЕ
	|				СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Номенклатура,
	|				АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Заявка.Поставщик,
	|				СУММА(АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.КоличествоКПроизводствуОстаток)
	|			ИЗ
	|				РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(
	|						&Период,
	|						Номенклатура В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								Т.Номенклатура
	|							ИЗ
	|								РегистрСведений.КонтролируемыеОстаткиРасходников КАК Т)) КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки
	|			
	|			СГРУППИРОВАТЬ ПО
	|				АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Номенклатура,
	|				АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Заявка.Поставщик
	|			
	|			ИМЕЮЩИЕ
	|				СУММА(АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.КоличествоЗаказаноОстаток) > 0) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура,
	|			ВложенныйЗапрос.Поставщик
	|		
	|		ИМЕЮЩИЕ
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) > 0) КАК Остатки
	|		ПО КонтролируемыеОстаткиРасходников.Номенклатура = Остатки.Номенклатура
	|			И (КонтролируемыеОстаткиРасходников.Документ.Поставщик.ГоловнойКонтрагент = Остатки.Поставщик.ГоловнойКонтрагент
	|				ИЛИ Остатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|ГДЕ
	|	Остатки.Номенклатура ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеОстаткиРасходников.Документ
	|ИТОГИ ПО
	|	Документ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	//
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий()Цикл
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.Отработан 	= Истина;
		ДокументОбъект.ДействуетС 	= ТекущаяДата();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение)
	КонецЦикла;
	
КонецПроцедуры
//AK--

//+++АК Pans 20161219 ИП-00014378
Процедура ЗаписатьОшибкуТестированияПочтовогоЯщика(АдресПочты, ТекстОшибки)
	
	МЗ1 = РегистрыСведений.ТестированиеПочтовыхЯщиков.СоздатьМенеджерЗаписи();
	МЗ1.Период 				= ТекущаяДатаСеанса();
	МЗ1.АдресПочты 			= АдресПочты;
	МЗ1.СообщениеОбОшибке 	= ТекстОшибки;
	МЗ1.Записать();
	
КонецПроцедуры

Процедура ПротестироватьПодключениеКЯщику(Адрес1) Экспорт
	
	Поз1 = Найти(Адрес1, "@");
	
	Если Поз1 = 0 Тогда
		ЗаписатьОшибкуТестированияПочтовогоЯщика(Адрес1, "Не найдена собачка в адресе");
		Возврат;
	КонецЕсли;
	
	УчеткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчеткуДляНастройкиОтправкиЭП(Адрес1);
	Если НЕ ЗначениеЗаполнено(УчеткаДляНастройки) Тогда
		ЗаписатьОшибкуТестированияПочтовогоЯщика(Адрес1, "Не найдена учетка для адреса");
		Возврат;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчеткаДляНастройки);
	Профиль.Пользователь = Адрес1;
	Профиль.ПользовательSMTP = Адрес1;
	
	Попытка
		Почта.Подключиться(Профиль);
		Почта.Отключиться();
	Исключение
		ЗаписатьОшибкуТестированияПочтовогоЯщика(Адрес1, "Неудачная попытка подключения");
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПротестироватьПочтовыеЯщики() Экспорт
	
	ТекДата = ТекущаяДатаСеанса();
	
	Запрос1 = Новый Запрос;
	Запрос1.УстановитьПараметр("ДатаОткрытия", НачалоДня(ТекДата) + 7*86400); 
	Запрос1.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.АдресЭлектроннойПочты,
	|	СтруктурныеЕдиницы.ДатаОткрытия
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
	|	И СтруктурныеЕдиницы.АдресЭлектроннойПочты <> """"
	|	И СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И СтруктурныеЕдиницы.ДатаОткрытия <= &ДатаОткрытия
	|	И СтруктурныеЕдиницы.Активное = ИСТИНА
	|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	И СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктурныеЕдиницы.НомерТочки";
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	Пока Выб1.Следующий() Цикл
		Адрес1 = СокрЛП(Выб1.АдресЭлектроннойПочты);
		ПротестироватьПодключениеКЯщику(Адрес1);
	КонецЦикла;
	
КонецПроцедуры
//---АК Pans 20161219 ИП-00014378

Процедура РассылкаФайловПоНовымМагазинам() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиНаОткрытиеМагазина.Магазин,
	|	ЗаявкиНаОткрытиеМагазина.СхемаРаботыЗазывалы КАК Файл,
	|	ЗаявкиНаОткрытиеМагазина.Этап КАК Этап,
	|	КонтактнаяИнформация.Представление КАК АдресПочты
	|ИЗ
	|	РегистрСведений.ЗаявкиНаОткрытиеМагазина КАК ЗаявкиНаОткрытиеМагазина
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРолиID = ""PomoshnikPoRaskrutke"") КАК СоответствиеОбъектРольСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|				ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
	|					И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
	|					И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|		ПО ЗаявкиНаОткрытиеМагазина.Магазин = СоответствиеОбъектРольСрезПоследних.Объект
	|ГДЕ
	|	ЗаявкиНаОткрытиеМагазина.Этап = 5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкиНаОткрытиеМагазина.Магазин,
	|	ДоговорыКонтрагентов.СканДоговора,
	|	ЗаявкиНаОткрытиеМагазина.Этап,
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.ЗаявкиНаОткрытиеМагазина КАК ЗаявкиНаОткрытиеМагазина
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ЗаявкиНаОткрытиеМагазина.Магазин = ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|		ПО (АК_ГруппыРассылки.Группа = ЗНАЧЕНИЕ(Справочник.АК_ГруппыРассылки.Список3))
	|ГДЕ
	|	ЗаявкиНаОткрытиеМагазина.Этап = 4
	|ИТОГИ
	|	МАКСИМУМ(Этап)
	|ПО
	|	Файл";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	//
	Файлы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	Пока Файлы.Следующий()Цикл
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		
		Письмо.Тексты.Добавить("", ТипТекстаПочтовогоСообщения.HTML);
		
		Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файлы.Файл));
		
		Адреса = Файлы.Выбрать();
		
		СтрокаТТ = "";
		Пока Адреса.Следующий()Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = Адреса.АдресПочты;
			СтрокаТТ = Адреса.Магазин.Наименование;
		КонецЦикла;	
		
		Тема = ?(Файлы.Этап = 4,"Договор по новой ТТ "+СтрокаТТ,"Схема зазывалы для ТТ "+СтрокаТТ);
		Письмо.Тема = Тема;
		
		Почта.Послать(Письмо);
		
	КонецЦикла;
	Почта.Отключиться();
	
КонецПроцедуры

//Раков П.С. ++
Процедура РассылкаФайловПоЗакрытымМагазинам() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	АК_МагазиныКЗакрытию.Магазин,
	|	АК_ПредварительнаяРассылка.ФизическоеЛицо,
	|	АК_ПредварительнаяРассылка.ЭлектронныйАдрес,
	|	ДОБАВИТЬКДАТЕ(АК_МагазиныКЗакрытию.ДатаПланируемогоЗакрытия, ДЕНЬ, -АК_ПредварительнаяРассылка.ПредварительнаяОтправка) КАК ДатаОтправки,
	|	АК_МагазиныКЗакрытию.ДатаПланируемогоЗакрытия
	|ПОМЕСТИТЬ ВТ1
	|ИЗ
	|	РегистрСведений.АК_МагазиныКЗакрытию КАК АК_МагазиныКЗакрытию,
	|	РегистрСведений.АК_ПредварительнаяРассылка КАК АК_ПредварительнаяРассылка
	|ГДЕ
	|	АК_МагазиныКЗакрытию.ДатаПланируемогоЗакрытия > &ТекДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ1.Магазин,
	|	ВТ1.ФизическоеЛицо,
	|	ВТ1.ЭлектронныйАдрес,
	|	ВТ1.ДатаОтправки,
	|	АК_ОтправкаПоМагазинам.Отправлено,
	|	ВТ1.ДатаПланируемогоЗакрытия
	|ПОМЕСТИТЬ ВТ2
	|ИЗ
	|	ВТ1 КАК ВТ1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ОтправкаПоМагазинам КАК АК_ОтправкаПоМагазинам
	|		ПО ВТ1.ФизическоеЛицо = АК_ОтправкаПоМагазинам.ФизическоеЛицо
	|			И ВТ1.Магазин = АК_ОтправкаПоМагазинам.Магазин
	|ГДЕ
	|	ВТ1.ДатаОтправки <= &ТекДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ2.Магазин,
	|	ВТ2.ФизическоеЛицо,
	|	ВТ2.ЭлектронныйАдрес КАК Адрес,
	|	ВТ2.ДатаОтправки,
	|	ВТ2.ДатаПланируемогоЗакрытия
	|ИЗ
	|	ВТ2 КАК ВТ2
	|ГДЕ
	|	(ЕСТЬNULL(ВТ2.Отправлено, 0) = 0
	|			ИЛИ ВТ2.Отправлено = ЛОЖЬ)";
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));			  
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	КонецЕсли;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию();
		НЗ = РегистрыСведений.АК_ОтправкаПоМагазинам.СоздатьНаборЗаписей();
		НЗ.Отбор.Магазин.Установить(ВыборкаДетальныеЗаписи.Магазин);
		НЗ.Отбор.ФизическоеЛицо.Установить(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
		НЗ.Прочитать();
		Если НЗ.Количество()=1 тогда
			НЗ[0].Отправлено = Истина;
			НЗ.Записать();
		ИначеЕсли НЗ.Количество() = 0 тогда
			Зап = НЗ.Добавить();
			Зап.Магазин = ВыборкаДетальныеЗаписи.Магазин;
			Зап.ФизическоеЛицо = ВыборкаДетальныеЗаписи.ФизическоеЛицо;
			Зап.Активность = Истина;
			Зап.Отправлено = Истина;
			НЗ.Записать();
		КонецЕсли;
		
		Попытка
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			
			Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
			Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
			Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
			Текст = "Уведомляем Вас о том, что " + Формат(ВыборкаДетальныеЗаписи.ДатаПланируемогоЗакрытия,"ДЛФ=DD") + " планируется закрыть магазин """ + 
			ВыборкаДетальныеЗаписи.Магазин + """.";
			Письмо.Тексты.Добавить(Текст, ТипТекстаПочтовогоСообщения.ПростойТекст);
			
			//Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файлы.Файл));
			Если  ТипЗнч(ВыборкаДетальныеЗаписи.ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") тогда
				Адрес = ВыборкаДетальныеЗаписи.Адрес;
				Письмо.Получатели.Добавить(Адрес);
			ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.ФизическоеЛицо) = Тип("ПланВидовХарактеристикСсылка.ТипыРолейПользователя") тогда
				МассивАдресов = ПолучитьМассивАдресовДляОтправки(ВыборкаДетальныеЗаписи.ФизическоеЛицо,ВыборкаДетальныеЗаписи.Магазин);	
				Для каждого Адреса из МассивАдресов цикл
					Письмо.Получатели.Добавить(Адреса);
				КонецЦикла
			ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.ФизическоеЛицо) = Тип("СправочникСсылка.Контрагенты") тогда
				Адрес = ВыборкаДетальныеЗаписи.Адрес;
				Письмо.Получатели.Добавить(Адрес);
			КонецЕсли;	
			Письмо.Получатели.Добавить("Pashaklgd@mail.ru");
			Тема = "Закрытие магазина.";
			Письмо.Тема = Тема;
			
			Почта.Послать(Письмо);
			ЗафиксироватьТранзакцию();
		Исключение;
			ааа = ОписаниеОшибки();
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Тема = "Ошибка";
			Письмо.Тексты.Добавить(ааа);
			Письмо.Отправитель 		= УчетнаяЗапись.Логин;
			Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
			НовыйПолучатель = Письмо.Получатели.Добавить();
			НовыйПолучатель.Адрес = "Pashaklgd@mail.ru";
			Почта.Послать(Письмо);
			
		КонецПопытки;	
	КонецЦикла;
	Если ВыборкаДетальныеЗаписи.Количество() = 0 тогда
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = "Нет выборки";
		Письмо.Отправитель 		= УчетнаяЗапись.Логин;
		Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
		НовыйПолучатель = Письмо.Получатели.Добавить();
		НовыйПолучатель.Адрес = "Pashaklgd@mail.ru";
		Почта.Послать(Письмо);
	КонецЕсли;	
	
	//+++АК SHEP 2018.02.07 ИП-00017771
	Попытка
		ТекДатаНачалоДня = НачалоДня(ТекущаяДата());
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	АК_МагазиныКЗакрытию.Магазин КАК Магазин,
			|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки,
			|	АК_МагазиныКЗакрытию.ДатаПланируемогоЗакрытия КАК ДатаПланируемогоЗакрытия,
			|	АК_МагазиныКЗакрытию.ДатаПланируемогоОткрытия КАК ДатаПланируемогоОткрытия,
			|	СтруктурныеЕдиницы.СтатусТорговойТочки,
			|	СтруктурныеЕдиницы.Активное
			|ИЗ
			|	РегистрСведений.АК_МагазиныКЗакрытию КАК АК_МагазиныКЗакрытию
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|		ПО АК_МагазиныКЗакрытию.Магазин = СтруктурныеЕдиницы.Ссылка
			|ГДЕ
			|	ДОБАВИТЬКДАТЕ(АК_МагазиныКЗакрытию.ДатаПланируемогоЗакрытия, ДЕНЬ, 1) <= &ТекДата
			|	И (СтруктурныеЕдиницы.Активное
			//+++АК ILIK 2018.08.03 ИП-00019413
			//|			ИЛИ НЕ СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт))
			|			ИЛИ НЕ СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен)))
			//---АК ILIK
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АК_ПредварительнаяРассылка.ФизическоеЛицо,
			|	АК_ПредварительнаяРассылка.ЭлектронныйАдрес
			|ИЗ
			|	РегистрСведений.АК_ПредварительнаяРассылка КАК АК_ПредварительнаяРассылка
			|ГДЕ
			|	НЕ АК_ПредварительнаяРассылка.ЭлектронныйАдрес = """"");
		Запрос.УстановитьПараметр("ТекДата", ТекДатаНачалоДня);			  
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Если НЕ РезультатЗапроса[0].Пустой() Тогда
			
			ДатаЗакрытияМагазина = ТекДатаНачалоДня - 60*24*24;
			
			ADOСоединение = Новый COMОбъект("ADODB.Connection");	
			ADOСоединение.ConnectionTimeOut = 0;
			ADOСоединение.CommandTimeOut    = 0;
			ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
			ADOСоединение.Open();
			
			ТекстЗапросаSQL =
				"SELECT DISTINCT
				|	Ch.ShopNo
				|	, 1 AS Izb
				|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
				|WHERE CAST(Ch.CloseDate as date) = " + ВнешниеДанные.ФорматПоля(ДатаЗакрытияМагазина, Истина) + "
				|	
				|UNION ALL
				|
				|SELECT DISTINCT
				|	Ch.ShopNo
				|	, 0 AS Izb
				|FROM [SMS_UNION].[dbo].[Checks] as Ch (nolock) 
				|WHERE CAST(Ch.CloseDate as date) = " + ВнешниеДанные.ФорматПоля(ДатаЗакрытияМагазина, Истина);
			rs = ADOСоединение.Execute(ТекстЗапросаSQL);
			
			ТЗнЕстьЧекиПоМагазинамЗаВчера = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
			
			МассивАдресов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ЭлектронныйАдрес");
			МассивАдресов.Добавить("shep@automacon.ru");
			
			ВыборкаМагазин = РезультатЗапроса[0].Выбрать();
			Пока ВыборкаМагазин.Следующий() Цикл
				
				ТекМагазин = ВыборкаМагазин.Магазин;
				Если ТЗнЕстьЧекиПоМагазинамЗаВчера.Найти(ВыборкаМагазин.НомерТочки, "ShopNo") = Неопределено Тогда
					СпрМагазинОбъект = ТекМагазин.ПолучитьОбъект();
					Если НЕ ЗначениеЗаполнено(СпрМагазинОбъект.ДатаЗакрытия) Тогда
						СпрМагазинОбъект.ДатаЗакрытия = ТекДатаНачалоДня; //Павел Скворцов: первый день неработы //ДатаЗакрытияМагазина;
					КонецЕсли;
					//+++AK GREK 01.07.2018 ИП-00018742
					СпрМагазинОбъект.ДатаОткрытия = ВыборкаМагазин.ДатаПланируемогоОткрытия;
					//+++АК ILIK 2018.08.03 ИП-00019413
					//СпрМагазинОбъект.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Закрыт;
					СпрМагазинОбъект.СтатусТорговойТочки = ?(ЗначениеЗаполнено(СпрМагазинОбъект.ДатаОткрытия), Перечисления.СтатусыТорговыхТочек.Приостановлен, Перечисления.СтатусыТорговыхТочек.Закрыт);
					//---АК ILIK
					СпрМагазинОбъект.ЕстьКасса = Ложь;
					//Если магазин вручную делали активным после закрытия, то оставляем его активным, т.к. это делалось для того чтобы можно было планировать завоз товаров по нему.
					//+++АК ILIK 2018.08.03 ИП-00019413
					//Если ВыборкаМагазин.ДатаПланируемогоЗакрытия < ТекДатаНачалоДня И ВыборкаМагазин.СтатусТорговойТочки = ПредопределенноеЗначение("Перечисление.СтатусыТорговыхТочек.Закрыт")
					Если ВыборкаМагазин.ДатаПланируемогоЗакрытия < ТекДатаНачалоДня И (ВыборкаМагазин.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Закрыт Или ВыборкаМагазин.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Приостановлен)
					//---АК ILIK
						И ВыборкаМагазин.Активное Тогда
						СпрМагазинОбъект.Активное = Истина;
					Иначе
						СпрМагазинОбъект.Активное = Ложь;
					КонецЕсли;
					СпрМагазинОбъект.Записать();
					//---AK
				Иначе
					
					ТекстПисьма = "Уведомляем Вас о том, что магазин " + ТекМагазин + " не удалось закрыть, т.к. за " + Формат(ДатаЗакрытияМагазина, "ДФ=dd.MM.yyyy") + " обнаружены чеки!";
					Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение("Закрытие магазина " + ТекМагазин + " не выполнено", ТекстПисьма, МассивАдресов, "Закрытие магазинов");
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("РегламентноеЗадание.РассылкаФайловПоЗакрытымМагазинам", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка закрытия магазина: " + ОписаниеОшибки());
	КонецПопытки;
	//---АК SHEP 2018.02.07
	
	//+++AK GREK 01.07.2018 ИП-00018742
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	АК_МагазиныКЗакрытию.Магазин,
					|	АК_МагазиныКЗакрытию.ДатаПланируемогоЗакрытия,
					|	АК_МагазиныКЗакрытию.ДатаПланируемогоОткрытия
					|ИЗ
					|	РегистрСведений.АК_МагазиныКЗакрытию КАК АК_МагазиныКЗакрытию
					|ГДЕ
					|ДОБАВИТЬКДАТЕ(АК_МагазиныКЗакрытию.ДатаПланируемогоОткрытия, ДЕНЬ, 1) > &ТекДата
					|	И АК_МагазиныКЗакрытию.ДатаПланируемогоОткрытия <= &ТекДата
					|	И (НЕ АК_МагазиныКЗакрытию.Магазин.Активное
					//+++АК ILIK 2018.08.03 ИП-00019413
					//|		ИЛИ АК_МагазиныКЗакрытию.Магазин.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт))";	
					|		ИЛИ АК_МагазиныКЗакрытию.Магазин.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен)))";
					//---АК ILIK
	Запрос.УстановитьПараметр("ТекДата", ТекДатаНачалоДня);			  
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаМагазин = РезультатЗапроса.Выбрать();
		Пока ВыборкаМагазин.Следующий() Цикл
			ТекМагазин = ВыборкаМагазин.Магазин;
			СпрМагазинОбъект = ТекМагазин.ПолучитьОбъект();
			СпрМагазинОбъект.ДатаОткрытия = ВыборкаМагазин.ДатаПланируемогоОткрытия;
			//+++АК ILIK 2018.08.03 ИП-00019413
			СпрМагазинОбъект.ДатаЗакрытия = Дата(1, 1, 1);
			//---АК ILIK
			СпрМагазинОбъект.СтатусТорговойТочки = ПредопределенноеЗначение("Перечисление.СтатусыТорговыхТочек.Открыт");
			СпрМагазинОбъект.ЕстьКасса = Истина;
			СпрМагазинОбъект.Активное = Истина;
			СпрМагазинОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	//---AK
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ПолучитьМассивАдресовДляОтправки(ПВХ, Магазин)
	
	
	//
	МассивДоступныхРолей 		= Новый Массив;
	МассивДоступныхТиповРолей 	= Новый Массив;
	
	//
	ТЗ =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.Ссылка ЕСТЬ NULL 
	|{ГДЕ
	|	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
	|	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли}
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|{ГДЕ
	|	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
	|	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.* КАК ТипСтруктурнойЕдиницы}";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ЭлементОтбора = ПЗ.Отбор.Добавить("ТипСтруктурнойЕдиницы");
	ЭлементОтбора.Установить(Магазин.ТипСтруктурнойединицы);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипРоли.ТипЗначения.СодержитТип(ТипЗнч(Магазин)) Тогда
			
			МассивДоступныхРолей.Добавить(Выборка.Ссылка);
			МассивДоступныхТиповРолей.Добавить(Выборка.ТипРоли);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	ТЗ =
	"ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РолиПользователейСоставРоли.Сотрудник) КАК КоличествоСотров
	|ПОМЕСТИТЬ СотровУРоли
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	РолиПользователей.Ссылка КАК Роль,
	|	РолиПользователей.ТипРоли КАК ТипРоли,
	|	РолиПользователей.Ссылка.Наименование КАК Наименование,
	|	РолиПользователей.Ссылка.ПометкаУдаления,
	|	РолиПользователейСоставРоли.Сотрудник КАК Сотрудники,
	|	ЕСТЬNULL(СотровУРоли.КоличествоСотров, 0) КАК КоличествоСотров
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = &Объект)
	|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО РолиПользователей.Ссылка = РолиПользователейСоставРоли.Ссылка
	|			И (РолиПользователейСоставРоли.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СотровУРоли КАК СотровУРоли
	|		ПО РолиПользователей.Ссылка = СотровУРоли.Ссылка
	|ГДЕ
	|	РолиПользователей.Ссылка В(&ДоступныеРоли)
	|	И РолиПользователей.ТипРоли В(&ДоступныеТипы)
	|	И НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Объект"			, Магазин);
	ПЗ.Параметры.Вставить("ДоступныеРоли"	, МассивДоступныхРолей);
	ПЗ.Параметры.Вставить("ДоступныеТипы"	, МассивДоступныхТиповРолей);
	
	
	МассивРолей = ПЗ.Результат.Выгрузить().ВыгрузитьКолонку("Роль");
	
	МассивСотрудников = новый Массив;
	
	Для каждого Роль из МассивРолей цикл
		Для Каждого Сотрудника из Роль.СоставРоли цикл
			Если МассивСотрудников.Найти(Сотрудника.Сотрудник) = Неопределено тогда
				МассивСотрудников.Добавить(Сотрудника.Сотрудник);
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	//Для каждого Получателя из МассивПолучателей цикл
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация1.Представление КАК Емейл
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|ГДЕ
	|	КонтактнаяИнформация1.Объект В(&Объект)
	|	И КонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ВТ.Емейл КАК СТРОКА(50)) КАК Поле1
	|ИЗ
	|	ВТ КАК ВТ";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Поле1");
	
	//КонецЦикла;	
	
КонецФункции // ПолучитьМассивАдресовДляОтправки()
//Раков П.С. --

Процедура ПроверкаВидеоПоЗапросам() Экспорт
	//+++AK GREK 25.10.2017 ИП-00015679 Обновим ссылки на видео из таблицы sql
	ДатаНачало = НачалоДня(ТекущаяДата()) - 3600*24*10; //Заявки старше этой даты отсекаем, чтобы не грузить систему
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидеоПоЗапросу.ID,
	|	ВидеоПоЗапросу.Период,
	|	ВидеоПоЗапросу.НомерЧека,
	|	ВидеоПоЗапросу.НомерКассы
	|ИЗ
	|	РегистрСведений.ВидеоПоЗапросу КАК ВидеоПоЗапросу
	|ГДЕ
	|	ВидеоПоЗапросу.ОтправленоНаПочту = ЛОЖЬ
	|	И ВидеоПоЗапросу.СсылкаДляСкачивания = """"
	|	И ВидеоПоЗапросу.СсылкаДляПросмотра = """"
	|	И ВидеоПоЗапросу.ID > 0
	|	И ВидеоПоЗапросу.Период > &Период";
	Запрос.УстановитьПараметр("Период", ДатаНачало);
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		ОтборЗаявокПоИД = "";
		Заявки = Рез.Выгрузить();
		Для каждого Стр из Заявки Цикл
			ОтборЗаявокПоИД = ОтборЗаявокПоИД + ", " +  Формат(Стр.ID, "ЧГ=0");	
		КонецЦикла;
		ОтборЗаявокПоИД = Прав(ОтборЗаявокПоИД,СТрДлина(ОтборЗаявокПоИД)-2);
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		ТекстЗапроса = 
		"select 
		|id, 
		|ShopNo,
		|CashID,
		|CashCheckNo,
		|Link_View,
		|Link_Download,
		|Email,
		|text_video
		|from sms_repl..times_for_video
		|Where not Link_Download is null and id IN (" + ОтборЗаявокПоИД + ")";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);
		
		Пока НЕ rs = Неопределено Цикл
			Если rs.Fields.Count > 0 Тогда
				Прервать;
			КонецЕсли;
			rs = rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();	
			Пока НЕ rs.EOF() Цикл
				ID = СокрЛП(rs.Fields("id").Value);	
				Отбор = Новый Структура;
				Отбор.Вставить("ID", Число(ID));
				Строки = Заявки.НайтиСтроки(Отбор);
				Для каждого Стр из Строки Цикл
					МенеджерЗаписи = РегистрыСведений.ВидеоПоЗапросу.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Стр.Период;
					МенеджерЗаписи.НомерКассы = Стр.НомерКассы;
					МенеджерЗаписи.НомерЧека = Стр.НомерЧека;
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.СсылкаДляПросмотра = СокрЛП(rs.Fields("Link_View").Value);
						МенеджерЗаписи.СсылкаДляСкачивания = СокрЛП(rs.Fields("Link_Download").Value);
						МенеджерЗаписи.Записать(Истина);
					КонецЕсли;
				КонецЦикла;	
				rs.MoveNext();
			КонецЦикла;
		Исключение
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		ADOСоединение.Close();
	КонецЕсли;
	//---AK
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ОбращенияПокупателей.Ответственный,
	|	ВложенныйЗапрос.НомерЧека,
	|	ВложенныйЗапрос.НомерКассы,
	|	ВложенныйЗапрос.СсылкаДляСкачивания,
	|	ВложенныйЗапрос.СсылкаДляПросмотра,
	|	ВложенныйЗапрос.ID,
	|	ВложенныйЗапрос.Email,
	|	ВложенныйЗапрос.Комментарий,
	|	ОбращенияПокупателей.ПолучателиУведомления,
	|	ВложенныйЗапрос.Просмотрено,
	|	ОбращенияПокупателей.id_OK,
	|	ВложенныйЗапрос.Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидеоПоЗапросу.Период КАК Период,
	|		ВидеоПоЗапросу.НомерЧека КАК НомерЧека,
	|		ВидеоПоЗапросу.НомерКассы КАК НомерКассы,
	|		ВидеоПоЗапросу.СсылкаДляСкачивания КАК СсылкаДляСкачивания,
	|		ВидеоПоЗапросу.СсылкаДляПросмотра КАК СсылкаДляПросмотра,
	|		ВидеоПоЗапросу.ID КАК ID,
	|		ВидеоПоЗапросу.Просмотрено КАК Просмотрено,
	|		ВидеоПоЗапросу.ОтправленоНаПочту КАК ОтправленоНаПочту,
	|		ВидеоПоЗапросу.Email КАК Email,
	|		ВидеоПоЗапросу.Комментарий КАК Комментарий
	|	ИЗ
	|		РегистрСведений.ВидеоПоЗапросу КАК ВидеоПоЗапросу
	|	ГДЕ
	|		(НЕ ВидеоПоЗапросу.ОтправленоНаПочту
	|				ИЛИ ВидеоПоЗапросу.Комментарий = ""---"")
	|		И ВидеоПоЗапросу.СсылкаДляСкачивания <> """"
	|		И НЕ ВидеоПоЗапросу.Просмотрено
	|		И ВидеоПоЗапросу.Период > &Период
	|		И ВидеоПоЗапросу.НомерЧека > 0
	|		И ВидеоПоЗапросу.НомерКассы > 0) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|		ПО ВложенныйЗапрос.НомерЧека = ОбращенияПокупателей.Номер_Бланка
	|			И ВложенныйЗапрос.НомерКассы = ОбращенияПокупателей.НомерКассы
	|			И (НЕ ОбращенияПокупателей.Закрыт)";
	Запрос.УстановитьПараметр("Период",ДатаНачало);
	Запись = Запрос.Выполнить().Выбрать();
	Пока Запись.Следующий()Цикл
		Если ЗначениеЗаполнено(Запись.Email)Тогда
			ПараметрыФЗ = Новый Массив;
			ПараметрыФЗ.Добавить(Запись.СсылкаДляСкачивания);
			ПараметрыФЗ.Добавить(Неопределено);
			ПараметрыФЗ.Добавить(Неопределено);
			ПараметрыФЗ.Добавить("Получено видео по запросу: № кассы: "+Запись.НомерКассы+"; № чека: "+Запись.НомерЧека+"; Комментарий: "+Запись.Комментарий);
			ДанныеЗаписи = Новый Структура("НомерЧека,НомерКассы,Период,Email,Комментарий,СсылкаДляПросмотра");
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи,Запись);
			ПараметрыФЗ.Добавить(ДанныеЗаписи);
			ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ОтправитьВидеоНаПочту",ПараметрыФЗ,Новый УникальныйИдентификатор, "Отправка видео на почту");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Запись.Ответственный) Тогда
			Продолжить
		КонецЕсли;
		НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		НоваяЗадача.Наименование = "Получено видео по запросу: № кассы: "+Запись.НомерКассы+"; № чека: "+Запись.НомерЧека+"; Id обращения: "+Запись.Id_Ok;
		НоваяЗадача.ВидЗадачи = Справочники.ВидыЗадачПользователей.ПолученоВидеоПоЗапросу;
		НоваяЗадача.Исполнитель = Запись.Ответственный;
		НоваяЗадача.Дата= ТекущаяДата();
		НоваяЗадача.ДатаОбъектаЗадачи = Запись.Период;
		НоваяЗадача.Оповещение = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата()+10;
		НоваяЗадача.СрокИсполнения = КонецДня(ТекущаяДата())+1;
		НоваяЗадача.Записать();
		
		//Если НЕ Запись.ОтправленоНаПочту Тогда
		
		ПараметрыФЗ = Новый Массив;
		ПараметрыФЗ.Добавить(Запись.СсылкаДляСкачивания);
		ПараметрыФЗ.Добавить(Запись.Ответственный);
		Если ЗначениеЗаполнено(Запись.ПолучателиУведомления) Тогда
			СписокПолучателей = Запись.ПолучателиУведомления.Получатели.ВыгрузитьКолонку("ЭлектроннаяПочта");
		Иначе
			СписокПолучателей = Новый Массив;
		КонецЕсли;
		ПараметрыФЗ.Добавить(СписокПолучателей);
		ПараметрыФЗ.Добавить(НоваяЗадача.Наименование);
		ДанныеЗаписи = Новый Структура("НомерЧека,НомерКассы,Период,Email,Комментарий");
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи,Запись);
		ПараметрыФЗ.Добавить(ДанныеЗаписи);
		ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ОтправитьВидеоНаПочту",ПараметрыФЗ,Новый УникальныйИдентификатор, "Отправка видео на почту");
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановкаОбщегоЛимитаДЗ() Экспорт
	
	ADO = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапроса =
	"SELECT TOP 1
	|	Period,
	| 	Sum
	|FROM Reports..DZ_Limits
	|Where
	|	Period < GETDATE()
	|Order by
	|	Period Desc";
	rs = ADO.Execute(ТекстЗапроса);
	Если Не rs.EOF Тогда
		Запись = РегистрыСведений.ДопустимоеПревышениеЛимитаДЗ.СоздатьМенеджерЗаписи();
		Запись.Период 	= ТекущаяДата();
		Запись.Лимит 	= rs.Fields("Sum").Value;
		Запись.Записать();
	КонецЕсли;
	ADO.Close();
	
КонецПроцедуры

Процедура ВыгрузкаДанныхПоСчету71ВSQL() Экспорт
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Возврат
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", КонецДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ФинансовыйОстатки.СуммаОстатокДт) КАК Сумма,
	|	ФинансовыйОстатки.Счет,
	|	ФинансовыйОстатки.Субконто2 КАК ФизЛицо
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&Период, Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПодотчетными), , ) КАК ФинансовыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОстатки.Счет,
	|	ФинансовыйОстатки.Субконто2
	|
	|ИМЕЮЩИЕ
	|	СУММА(ФинансовыйОстатки.СуммаОстатокДт) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.ФизЛицо КАК ФизЛицо,
	|	Остатки.Сумма КАК Остаток,
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ФинансовыйДвиженияССубконто.Период, &Период), &Период, ДЕНЬ) КАК Дней,
	|	ВЫБОР
	|		КОГДА Остатки.Счет = ФинансовыйДвиженияССубконто.СчетДт
	|			ТОГДА ФинансовыйДвиженияССубконто.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА Остатки.Счет = ФинансовыйДвиженияССубконто.СчетКт
	|			ТОГДА ФинансовыйДвиженияССубконто.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Оборот,
	|	ЕСТЬNULL(СпрФизЛицо.Наименование, """") КАК ФИО,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрФизЛицо.Активный, ЛОЖЬ) = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Активен,
	|	ЕСТЬNULL(СпрРуководитель.Наименование, """") КАК Руководитель
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|				,
	|				ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -1),
	|				Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПодотчетными)
	|					И Субконто2 В
	|						(ВЫБРАТЬ
	|							Т.ФизЛицо
	|						ИЗ
	|							Остатки КАК Т),
	|				,
	|				) КАК ФинансовыйДвиженияССубконто
	|		ПО (Остатки.Счет = ФинансовыйДвиженияССубконто.СчетДт
	|				ИЛИ Остатки.Счет = ФинансовыйДвиженияССубконто.СчетКт)
	|			И (Остатки.Счет = ФинансовыйДвиженияССубконто.СчетДт
	|					И Остатки.ФизЛицо = ФинансовыйДвиженияССубконто.СубконтоДт2
	|				ИЛИ Остатки.Счет = ФинансовыйДвиженияССубконто.СчетКт
	|					И Остатки.ФизЛицо = ФинансовыйДвиженияССубконто.СубконтоКт2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизЛицо
	|		ПО (СпрФизЛицо.Ссылка = Остатки.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрРуководитель
	|		ПО (СпрРуководитель.Ссылка = СпрФизЛицо.Руководитель)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	Счет,
	|	Дней
	|ИТОГИ
	|	МАКСИМУМ(Остаток),
	|	МАКСИМУМ(Дней),
	|	МАКСИМУМ(Оборот),
	|	МАКСИМУМ(ФИО),
	|	МАКСИМУМ(Активен),
	|	МАКСИМУМ(Руководитель)
	|ПО
	|	ФизЛицо,
	|	Счет";
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Счет");
	ТЗ.Колонки.Добавить("ФИО");
	ТЗ.Колонки.Добавить("Остаток");
	ТЗ.Колонки.Добавить("Дней"		, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Активен"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТЗ.Колонки.Добавить("Руководитель");
	
	Люди = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Люди.Следующий()Цикл
		Счета = Люди.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Счета.Следующий()Цикл
			СтрокаТЗ = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Счета);
			Если Счета.Дней = 0 Тогда
				Продолжить
			КонецЕсли;
			Выборка = Счета.Выбрать();
			Оборот = 0;
			Пока Выборка.Следующий()Цикл
				Оборот = Оборот + Выборка.Оборот;
				Если Счета.Остаток <= Оборот Тогда
					СтрокаТЗ.Дней = Выборка.Дней;
					Прервать
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ТекстЗапроса = "";
	Для Каждого СтрокаТЗ из ТЗ Цикл
		ТекстЗапроса = ТекстЗапроса +
		"Insert Into Reports..Ostatki71
		|	(dateadd,
		|	Person,
		|	Acc,
		|	Sum,
		|	Days,
		|	Aktiven,
		|	Rukovoditel)
		|VALUES
		|	(GetDate(),
		|	'" + СтрокаТЗ.ФИО + "',
		|	'" + Строка(СтрокаТЗ.Счет) + "',
		|	" + Формат(СтрокаТЗ.Остаток, "ЧРД=.; ЧН=; ЧГ=0") + "," +
		Формат(СтрокаТЗ.Дней, "ЧН=; ЧГ=0") + "," + Формат(СтрокаТЗ.Активен, "ЧН=; ЧГ=0") + ", '" + СтрокаТЗ.Руководитель + "')" + Символы.ПС;
	КонецЦикла;
	Если ТекстЗапроса <>"" Тогда
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		СтрокаСоединенияСБазойСКЛ = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(,,"Reports",,,"LANGUAGE=русский");
		ADOСоединение.Open(СтрокаСоединенияСБазойСКЛ);
		
		ADOКоманда = Новый COMОбъект("ADODB.Command");
		ADOКоманда.ActiveConnection = ADOСоединение;
		
		ADOКоманда.CommandText = ТекстЗапроса;
		//Попытка
		ADOКоманда.Execute();
		//Исключение
		//КонецПопытки;
		
		ADOСоединение.Close();
	КонецЕсли;
	
КонецПроцедуры

//++++ АК AZAP 16.02.2017 ИП-00013991
Процедура РассылкаУведомленийПоРекламе() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДатаНачалаУведомления", ДобавитьМесяц(ТекущаяДата(), 2));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_СогласованиеНаРазмещениеРекламы.Ссылка,
	|	АК_СогласованиеНаРазмещениеРекламы.Номер,
	|	АК_СогласованиеНаРазмещениеРекламы.ТорговаяТочка,
	|	АК_СогласованиеНаРазмещениеРекламы.СрокКонец,
	|	АК_СогласованиеНаРазмещениеРекламы.Подрядчик
	|ИЗ
	|	Документ.АК_СогласованиеНаРазмещениеРекламы КАК АК_СогласованиеНаРазмещениеРекламы
	|ГДЕ
	|	АК_СогласованиеНаРазмещениеРекламы.ПометкаУдаления = ЛОЖЬ
	|	И АК_СогласованиеНаРазмещениеРекламы.УведомлениеОтправлено = ЛОЖЬ
	|	И АК_СогласованиеНаРазмещениеРекламы.Бессрочное = ЛОЖЬ
	|	И АК_СогласованиеНаРазмещениеРекламы.СрокКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|	И АК_СогласованиеНаРазмещениеРекламы.СрокКонец < &МинимальнаяДатаНачалаУведомления";
	
	ВыборкаСогласования = Запрос.Выполнить().Выгрузить();
	Если ВыборкаСогласования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	//Пока Файлы.Следующий()Цикл
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	Письмо.Тексты.Добавить("Срок окончания действия подходит к концу", ТипТекстаПочтовогоСообщения.ПростойТекст);
	Для каждого Согласование Из ВыборкаСогласования Цикл
		//по согласованию №такой-то, структур. Единица такая-то, срок окончания действия такой-то. Подрядчик такой-то
		Письмо.Тексты.Добавить("по согласованию №" + Согласование.Номер + ", торговая точка: " + Согласование.ТорговаяТочка +
		", срок окончания действия: " + Формат(Согласование.СрокКонец, "ДФ=dd.MM.yyyy") + ", подрядчик: " + Согласование.Подрядчик, ТипТекстаПочтовогоСообщения.ПростойТекст);
	КонецЦикла;
	
	//Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файлы.Файл));
	
	Адреса = РегистрыСведений.АК_СогласованиеПоРекламеПолучателиУведомлений.Выбрать();
	Пока Адреса.Следующий()Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адреса.ЭлПочта;
	КонецЦикла;	
	
	Письмо.Тема = "Окончание срока действия размещения рекламы";
	
	Почта.Послать(Письмо);
	
	//КонецЦикла;
	Почта.Отключиться();
	
	Для каждого Согласование Из ВыборкаСогласования Цикл
		ДокОбъект = Согласование.Ссылка.ПолучитьОбъект();
		ДокОбъект.УведомлениеОтправлено = Истина;
		ДокОбъект.Записать();		
	КонецЦикла;
	
КонецПроцедуры
//---- АК AZAP

//+++ АК gusd ИП-00014820
Процедура СбросМинМаксОстатковТоварныхОграниченийТТПоХитам() Экспорт
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	// 0 - хит
	
	ТекстЗапроса =
	"SELECT
	|	Hit.id_tov
	|FROM M2..Tovari as Hit (nolock)
	|WHERE
	|	CatAss = 0";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	
	МассивТоваров = Новый Массив;
	
	Попытка
		
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", rs.Fields("id_tov").Value);
			Если ЗначениеЗаполнено(Номенклатура) И МассивТоваров.Найти(Номенклатура) = Неопределено Тогда
				МассивТоваров.Добавить(Номенклатура);
			КонецЕсли; 
			
			rs.MoveNext();
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ДатаОперации = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("Период"		 , ДатаОперации);
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|ПОМЕСТИТЬ АссортиментТТ
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&Период, Номенклатура В (&МассивТоваров)) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныеОграниченияНаТочках.ГруппаНоменклатуры,
	|	ТоварныеОграниченияНаТочках.ТорговаяТочка,
	|	ТоварныеОграниченияНаТочках.МинимальныйОстаток,
	|	ТоварныеОграниченияНаТочках.МаксимальныйОстаток,
	|	ТоварныеОграниченияНаТочках.ТорговаяТочка.id_TT КАК id_TT
	|ИЗ
	|	РегистрСведений.ТоварныеОграниченияНаТочках КАК ТоварныеОграниченияНаТочках
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АссортиментТТ КАК АссортиментТТ
	|		ПО ТоварныеОграниченияНаТочках.ТорговаяТочка = АссортиментТТ.ТорговаяТочка
	|			И ТоварныеОграниченияНаТочках.ГруппаНоменклатуры = АссортиментТТ.Номенклатура
	|ГДЕ
	|	(ТоварныеОграниченияНаТочках.МинимальныйОстаток <> 0
	|			ИЛИ ТоварныеОграниченияНаТочках.МаксимальныйОстаток <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АссортиментТТ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Попытка
		Автор = Строка(ПараметрыСеанса.ТекущийПродавец);
	Исключение
		Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецПопытки;	
	
	// По Хитам сбросим Мин и Макс остаток в 0
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ТоварныеОграниченияНаТочках.СоздатьМенеджерЗаписи();
		
		Запись.ГруппаНоменклатуры 	= Выборка.ГруппаНоменклатуры;
		Запись.ТорговаяТочка 		= Выборка.ТорговаяТочка;
		Запись.id_TT 				= Выборка.id_TT;
		Запись.МинимальныйОстаток 	= 0;
		Запись.МаксимальныйОстаток 	= 0;
		Запись.ДатаСозданияЗаписи 	= ДатаОперации;
		Запись.Автор 				= Автор;
		
		Попытка
			Запись.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//--- АК gusd ИП-00014820

//+++АК SHEP 20170330 ИП-00015297
Процедура РассылкаНаличиеДопСоглашений() Экспорт
	ОтчётОбъект = Отчеты.НаличиеДопсоглашенийПоТипам.Создать();
	ОтчётОбъект.ОтправитьОтчётПоЭлектронке();
	ОтчётОбъект = Неопределено;
КонецПроцедуры
//---АК SHEP 20170330

//+++АК SHEP 2017.11.20 ИП-00017172.01
Процедура РассылкаЗатратыНаДегустациюНовинок() Экспорт
	ОтчётОбъект = Отчеты.ЗатратыНаДегустациюНовинок.Создать();
	ОтчётОбъект.ОтправитьОтчётПоЭлектронке();
	ОтчётОбъект = Неопределено;
КонецПроцедуры

//+++ AK BARA ИП-00015153.000.00000001
Процедура ЗагрузкаКамерИзSQL()  Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	
	СтрСоединенияДанныеm2 = ОбменСAccess.ПолучитьСтрокуСоединения("m2");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеm2;
	ВнешниеИсточникиДанных.m2.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.m2.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_KameraData.id_kamera,
	|	dbo_KameraData.ShopCode,
	|	dbo_KameraData.id_kassa,
	|	dbo_KameraData.date_changes,
	|	dbo_KameraData.Kamera_on_off
	|ИЗ
	|	ВнешнийИсточникДанных.m2.Таблица.dbo_KameraData КАК dbo_KameraData";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ВнешниеИсточникиДанных.m2.РазорватьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_KameraData.id_kamera,
	|	dbo_KameraData.ShopCode,
	|	dbo_KameraData.id_kassa,
	|	dbo_KameraData.date_changes,
	|	dbo_KameraData.Kamera_on_off
	|ПОМЕСТИТЬ ВТ_Камеры
	|ИЗ
	|	&Результат КАК dbo_KameraData
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Камеры.id_kamera,
	|	ВТ_Камеры.ShopCode,
	|	ВТ_Камеры.date_changes,
	|	ВТ_Камеры.Kamera_on_off,
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	АК_ID_Камеры.Ссылка КАК Камера,
	|	ВТ_Камеры.id_kassa
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТ_Камеры КАК ВТ_Камеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ВТ_Камеры.ShopCode = СтруктурныеЕдиницы.НомерТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АК_ID_Камеры КАК АК_ID_Камеры
	|		ПО ВТ_Камеры.id_kamera = АК_ID_Камеры.IDКамеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.id_kamera,
	|	ВТ.ShopCode,
	|	ВТ.date_changes,
	|	ВТ.Kamera_on_off,
	|	ВТ.СтруктурнаяЕдиница,
	|	ВТ.Камера,
	|	ВТ.id_kassa
	|ИЗ
	|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("Результат",Результат);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	КолНеНайденныхРабочихМест = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если  ВыборкаДетальныеЗаписи.id_kassa = "0" Тогда 
			
			мЗапись = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьМенеджерЗаписи();		
			мЗапись.Магазин = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
			//мЗапись.ОбъектНаблюдения = ВыборкаДетальныеЗаписи.ОбъектНаблюдения ;
			Если ВыборкаДетальныеЗаписи.Камера = NUll Тогда
				НовЭл = Справочники.АК_ID_Камеры.СоздатьЭлемент();
				НовЭл.IDКамеры = ВыборкаДетальныеЗаписи.id_kamera ;
				НовЭл.Наименование = ВыборкаДетальныеЗаписи.id_kamera ;
				НовЭл.Записать();
				мЗапись.IDКамеры = НовЭл.Ссылка;
			Иначе	
				мЗапись.IDКамеры = ВыборкаДетальныеЗаписи.Камера;
			КонецЕсли;
			мЗапись.Период = ВыборкаДетальныеЗаписи.date_changes;
			мЗапись.АктивностьЗаписи = ?(ВыборкаДетальныеЗаписи.Kamera_on_off=1,Истина,Ложь);	
			мЗапись.Записать(Истина);
		Иначе
			id_kassa = СтрЗаменить(ВыборкаДетальныеЗаписи.id_kassa, ",", Символы.ПС);
			
			Для Н=1 По СтрЧислоСтрок(id_kassa) Цикл
				id_k =  СтрПолучитьСтроку(id_kassa, Н);
				Попытка
					id_int = Число(id_k);
				Исключение
					Продолжить;
				КонецПопытки;
				РабочиеМестаСсылка = Справочники.РабочиеМеста.НайтиПоРеквизиту("ИД",id_k);
				Если ЗначениеЗаполнено(РабочиеМестаСсылка) Тогда
					
					мЗапись = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьМенеджерЗаписи();		
					мЗапись.Магазин = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
					мЗапись.ОбъектНаблюдения = РабочиеМестаСсылка ;
					Если ВыборкаДетальныеЗаписи.Камера = NUll Тогда
						НовЭл = Справочники.АК_ID_Камеры.СоздатьЭлемент();
						НовЭл.IDКамеры = ВыборкаДетальныеЗаписи.id_kamera ;
						НовЭл.Наименование = ВыборкаДетальныеЗаписи.id_kamera ;
						НовЭл.Записать();
						мЗапись.IDКамеры = НовЭл.Ссылка;
					Иначе	
						мЗапись.IDКамеры = ВыборкаДетальныеЗаписи.Камера;
					КонецЕсли;
					мЗапись.Период = ВыборкаДетальныеЗаписи.date_changes;
					мЗапись.АктивностьЗаписи = ?(ВыборкаДетальныеЗаписи.Kamera_on_off=1,Истина,Ложь);	
					мЗапись.Записать(Истина);					
					
				Иначе
					КолНеНайденныхРабочихМест = КолНеНайденныхРабочихМест + 1;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	dbo_KameraData.id_kamera,
	//|	dbo_KameraData.ShopCode,
	//|	dbo_KameraData.id_kassa,
	//|	dbo_KameraData.date_changes,
	//|	dbo_KameraData.Kamera_on_off
	//|ПОМЕСТИТЬ ВТ_Камеры
	//|ИЗ
	//|	&Результат КАК dbo_KameraData
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Камеры.id_kamera,
	//|	ВТ_Камеры.ShopCode,
	//|	ВТ_Камеры.date_changes,
	//|	ВТ_Камеры.Kamera_on_off,
	//|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	//|	АК_ID_Камеры.Ссылка КАК Камера
	//|ПОМЕСТИТЬ ВТ
	//|ИЗ
	//|	ВТ_Камеры КАК ВТ_Камеры
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	//|		ПО ВТ_Камеры.ShopCode = СтруктурныеЕдиницы.НомерТочки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АК_ID_Камеры КАК АК_ID_Камеры
	//|		ПО ВТ_Камеры.id_kamera = АК_ID_Камеры.IDКамеры
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ.id_kamera,
	//|	ВТ.ShopCode,
	//|	ВТ.date_changes,
	//|	ВТ.Kamera_on_off,
	//|	ВТ.СтруктурнаяЕдиница,
	//|	ВТ.Камера,
	//|	ЕСТЬNULL(АК_ПривязкаКамерыКОбъектуНаблюдения.ОбъектНаблюдения, ЗНАЧЕНИЕ(Справочник.МП_Ракурсы.ПУстаяСсылка)) КАК ОбъектНаблюдения
	//|ИЗ
	//|	ВТ КАК ВТ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения КАК АК_ПривязкаКамерыКОбъектуНаблюдения
	//|		ПО ВТ.СтруктурнаяЕдиница = АК_ПривязкаКамерыКОбъектуНаблюдения.Магазин
	//|			И ВТ.Камера = АК_ПривязкаКамерыКОбъектуНаблюдения.IDКамеры";
	//
	//Запрос.УстановитьПараметр("Результат",Результат);
	//Результат = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//нЗаписей = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьНаборЗаписей() ;
	//нЗаписей.Очистить();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	мЗаписи = нЗаписей.Добавить();
	//	мЗаписи.Магазин = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
	//	мЗаписи.ОбъектНаблюдения = ВыборкаДетальныеЗаписи.ОбъектНаблюдения ;
	//	Если ВыборкаДетальныеЗаписи.Камера = NUll Тогда
	//		НовЭл = Справочники.АК_ID_Камеры.СоздатьЭлемент();
	//		НовЭл.IDКамеры = ВыборкаДетальныеЗаписи.id_kamera ;
	//		НовЭл.Наименование = ВыборкаДетальныеЗаписи.id_kamera ;
	//		НовЭл.Записать();
	//		мЗаписи.IDКамеры = НовЭл.Ссылка;
	//	Иначе	
	//		мЗаписи.IDКамеры = ВыборкаДетальныеЗаписи.Камера;
	//	КонецЕсли;
	//	мЗаписи.ДатаИзменения = ВыборкаДетальныеЗаписи.date_changes;
	//	мЗаписи.АктивностьЗаписи = ?(ВыборкаДетальныеЗаписи.Kamera_on_off=1,Истина,Ложь);		
	//КонецЦикла;
	//нЗаписей.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

//--- AK BARA

//+++ZEZA
Процедура АвтоматическоеПрикреплениеСканов() Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ТЗ = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка,
	|	Таблица.ХранилищеВнешнейОбработки
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК Таблица
	|ГДЕ
	|	Таблица.Наименование = ""АвтоматическоеПрикреплениеСканов""
	|	И НЕ Таблица.ПометкаУдаления";
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Если ПЗ.Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Выборка.Следующий();
	
	//
	ИмяВременногоФайла = КаталогВременныхФайлов() + "\" + "АвтоматическоеПрикреплениеСканов.erf";
	
	//
	Выборка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяВременногоФайла);
	
	//
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
	ВнешняяОбработка.ВыполнитьОбработку();
	
КонецПроцедуры

Функция ПолучитьТекстХТМЛРазницаМеждуВозвратамиВОбращенияхИПродажами(ТаблицаОтчета, ТаблицаНедель)
	
	// шапка
	ТекстХТМЛ = "<table border='2'><tr align='center'><td rowspan='2'>Товар</td><td rowspan='2'>Поставщик</td>";
	Для Каждого СтрокаНедели Из ТаблицаНедель Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<td colspan='3'>" + Формат(СтрокаНедели.ДатаНачала, "ДЛФ=Д") + "-" + Формат(СтрокаНедели.ДатаОкончания, "ДЛФ=Д") + "</td>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "<td colspan='3'>Весь период</td>";
	ТекстХТМЛ = ТекстХТМЛ + "</tr><tr align='center'>";
	Для н = 1 По ТаблицаНедель.Количество() + 1 Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<td>% жалоб</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>% продаж</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>разница</td>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	
	// тело отчета
	Для Каждого СтрокаТаблицы Из ТаблицаОтчета Цикл
		ТекстХТМЛ = ТекстХТМЛ + "</tr><tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СтрокаТаблицы.Товар 		+ "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СтрокаТаблицы.Контрагент 	+ "</td>";
		Для Каждого СтрокаНедель Из ТаблицаНедель Цикл
			ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + СтрокаТаблицы["ПроцентОбращ_" 		+ Формат(СтрокаНедель.НомерНедели, "ЧГ=")] + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + СтрокаТаблицы["ПроцентПродажи_" 	+ Формат(СтрокаНедель.НомерНедели, "ЧГ=")] + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + СтрокаТаблицы["Разница_" 			+ Формат(СтрокаНедель.НомерНедели, "ЧГ=")] + "</td>";
		КонецЦикла;
		ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + СтрокаТаблицы.ПроцентОбращ_Общий 	+ "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + СтрокаТаблицы.ПроцентПродажи_Общий + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td align='center'>" + СтрокаТаблицы.Разница_Общий 		+ "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Процедура ПолучитьТаблицуКДобавлению(ТекДата)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПотерянныеПродажиПоТочкам.Номенклатура,
	|	ПотерянныеПродажиПоТочкам.ТорговаяТочка
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	РегистрСведений.ПотерянныеПродажиПоТочкам КАК ПотерянныеПродажиПоТочкам
	|ГДЕ
	|	ПотерянныеПродажиПоТочкам.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, -1) И &КонецДня
	|	И ПотерянныеПродажиПоТочкам.Количество > 0
	|	И НЕ ПотерянныеПродажиПоТочкам.Номенклатура В (&НоменИскл)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотерянныеПродажиПоТочкам.Номенклатура,
	|	ПотерянныеПродажиПоТочкам.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Ссылка КАК ЭлементСАналогами,
	|	АналогиНоменклатурыТовары.Номенклатура
	|ПОМЕСТИТЬ втАналоги
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|		ПО втНоменклатура.Номенклатура = АналогиНоменклатурыТовары.Номенклатура
	|ГДЕ
	|	АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	АналогиНоменклатурыТовары.Ссылка,
	|	АналогиНоменклатурыТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Номенклатура КАК Аналог,
	|	втАналоги.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втВсеАналоги
	|ИЗ
	|	втАналоги КАК втАналоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|		ПО втАналоги.ЭлементСАналогами = АналогиНоменклатурыТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	втНоменклатура.ТорговаяТочка,
	|	втВсеАналоги.Аналог
	|ПОМЕСТИТЬ втНоменклатураСАналогами
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеАналоги КАК втВсеАналоги
	|		ПО втНоменклатура.Номенклатура = втВсеАналоги.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСАналогами.Номенклатура,
	|	втНоменклатураСАналогами.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Период
	|ПОМЕСТИТЬ втТоварыВнеАссортимента
	|ИЗ
	|	втНоменклатураСАналогами КАК втНоменклатураСАналогами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&КонецДня, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА втНоменклатураСАналогами.Аналог ЕСТЬ NULL 
	|					ТОГДА втНоменклатураСАналогами.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|				ИНАЧЕ втНоменклатураСАналогами.Аналог = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|			КОНЕЦ)
	|			И втНоменклатураСАналогами.ТорговаяТочка = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	|			И (ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатураСАналогами.Номенклатура,
	|	втНоменклатураСАналогами.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыВнеАссортимента.Номенклатура,
	|	втТоварыВнеАссортимента.ТорговаяТочка,
	|	МАКСИМУМ(втТоварыВнеАссортимента.Период) КАК Период
	|ПОМЕСТИТЬ втТоварыВнеАссортиментаГрупп
	|ИЗ
	|	втТоварыВнеАссортимента КАК втТоварыВнеАссортимента
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварыВнеАссортимента.Номенклатура,
	|	втТоварыВнеАссортимента.ТорговаяТочка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(втТоварыВнеАссортимента.Период) ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыВнеАссортимента.ТорговаяТочка,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0)) КАК КоличествоВУпаковке,
	|	МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках) КАК СрокГодности
	|ПОМЕСТИТЬ втНоменклатураДляДобавления
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТоварыВнеАссортиментаГрупп КАК втТоварыВнеАссортимента
	|		ПО ХарактеристикиНоменклатуры.Владелец = втТоварыВнеАссортимента.Номенклатура
	|ГДЕ
	|	ХарактеристикиНоменклатуры.СрокГодности > 0
	|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
	|	И ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец,
	|	втТоварыВнеАссортимента.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураДляДобавления.ТорговаяТочка,
	|	втНоменклатураДляДобавления.Номенклатура,
	|	втНоменклатураДляДобавления.КоличествоВУпаковке,
	|	СУММА(ЕСТЬNULL(ПотерянныеПродажиПоТочкам.Количество, 0)) КАК КоличествоПотерянных,
	|	втНоменклатураДляДобавления.СрокГодности
	|ПОМЕСТИТЬ ВтПотерянныеЗаПериод
	|ИЗ
	|	втНоменклатураДляДобавления КАК втНоменклатураДляДобавления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПотерянныеПродажиПоТочкам КАК ПотерянныеПродажиПоТочкам
	|		ПО втНоменклатураДляДобавления.Номенклатура = ПотерянныеПродажиПоТочкам.Номенклатура
	|			И втНоменклатураДляДобавления.ТорговаяТочка = ПотерянныеПродажиПоТочкам.ТорговаяТочка
	|			И (ПотерянныеПродажиПоТочкам.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -((ВЫРАЗИТЬ(втНоменклатураДляДобавления.СрокГодности / 2 КАК ЧИСЛО(10, 0))) - 1)))
	|			И (ПотерянныеПродажиПоТочкам.Дата <= &КонецДня)
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатураДляДобавления.ТорговаяТочка,
	|	втНоменклатураДляДобавления.Номенклатура,
	|	втНоменклатураДляДобавления.КоличествоВУпаковке,
	|	втНоменклатураДляДобавления.СрокГодности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПотерянныеЗаПериод.ТорговаяТочка,
	|	ВтПотерянныеЗаПериод.Номенклатура,
	|	ВтПотерянныеЗаПериод.КоличествоВУпаковке,
	|	ВтПотерянныеЗаПериод.КоличествоПотерянных,
	|	ВтПотерянныеЗаПериод.СрокГодности КАК СрокГодностиВДнях
	|ПОМЕСТИТЬ втКДобавлениюТовары
	|ИЗ
	|	ВтПотерянныеЗаПериод КАК ВтПотерянныеЗаПериод
	|ГДЕ
	|	ВтПотерянныеЗаПериод.КоличествоПотерянных > ВтПотерянныеЗаПериод.КоличествоВУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКДобавлениюТовары.ТорговаяТочка,
	|	втКДобавлениюТовары.Номенклатура,
	|	втКДобавлениюТовары.КоличествоВУпаковке,
	|	втКДобавлениюТовары.КоличествоПотерянных,
	|	втКДобавлениюТовары.СрокГодностиВДнях,
	|	ВЫБОР
	|		КОГДА втКДобавлениюТовары.СрокГодностиВДнях = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * втКДобавлениюТовары.КоличествоПотерянных / втКДобавлениюТовары.СрокГодностиВДнях
	|	КОНЕЦ КАК Выигрыш
	|ПОМЕСТИТЬ втВыигрыш
	|ИЗ
	|	втКДобавлениюТовары КАК втКДобавлениюТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&КонецДня,
	|				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							втКДобавлениюТовары.Номенклатура
	|						ИЗ
	|							втКДобавлениюТовары КАК втКДобавлениюТовары)
	|					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО втКДобавлениюТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втВыигрыш.Выигрыш) КАК Выигрыш,
	|	втВыигрыш.ТорговаяТочка
	|ПОМЕСТИТЬ втВыигрышМакс
	|ИЗ
	|	втВыигрыш КАК втВыигрыш
	|
	|СГРУППИРОВАТЬ ПО
	|	втВыигрыш.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыигрыш.ТорговаяТочка,
	|	втВыигрыш.Номенклатура,
	|	втВыигрыш.КоличествоВУпаковке,
	|	втВыигрыш.КоличествоПотерянных,
	|	втВыигрыш.СрокГодностиВДнях,
	|	втВыигрыш.Выигрыш
	|ПОМЕСТИТЬ втИтогБезХар
	|ИЗ
	|	втВыигрыш КАК втВыигрыш
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтогБезХар.ТорговаяТочка,
	|	втИтогБезХар.Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатуры.Ссылка) КАК КолХар,
	|	втИтогБезХар.КоличествоВУпаковке,
	|	втИтогБезХар.КоличествоПотерянных,
	|	втИтогБезХар.СрокГодностиВДнях,
	|	втИтогБезХар.Выигрыш
	|ПОМЕСТИТЬ втКолХар
	|ИЗ
	|	втИтогБезХар КАК втИтогБезХар
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО втИтогБезХар.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|			И (НЕ ХарактеристикиНоменклатуры.Неактивная)
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтогБезХар.ТорговаяТочка,
	|	втИтогБезХар.Номенклатура,
	|	втИтогБезХар.КоличествоВУпаковке,
	|	втИтогБезХар.КоличествоПотерянных,
	|	втИтогБезХар.СрокГодностиВДнях,
	|	втИтогБезХар.Выигрыш
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКолХар.ТорговаяТочка,
	|	втКолХар.Номенклатура,
	|	втКолХар.КоличествоВУпаковке,
	|	втКолХар.КоличествоПотерянных,
	|	втКолХар.СрокГодностиВДнях,
	|	втКолХар.Выигрыш КАК Выигрыш,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	втКолХар КАК втКолХар
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО втКолХар.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|			И (НЕ ХарактеристикиНоменклатуры.Неактивная)
	|			И (втКолХар.КолХар = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	|			ТОГДА ""В""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обязательный)
	|					ТОГДА ""Х""
	|				КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.НеОбязательный)
	|					ТОГДА ""Д""
	//+++ AK suvv 2018.10.15 ИП-00019795
	//|				КОГДА ВложенныйЗапрос.ТорговаяТочка.ДляДетей
	|               КОГДА ЕСТЬNULL(СвойстваСЕДляДетей.Значение, ЛОЖЬ)
	//--- AK suvv
	|						И НЕ ВЗ_ТоварыДляДетей.Ссылка ЕСТЬ NULL 
	|					ТОГДА ""Х""
	|				КОГДА &ТекущаяДата МЕЖДУ ВложенныйЗапрос.Номенклатура.ОбязателенВАссортиментеМагазиновС И ВложенныйЗапрос.Номенклатура.ОбязателенВАссортиментеМагазиновПо
	|						И ВЗ_СпецАссортиментМожноВывести.Ссылка ЕСТЬ NULL 
	|					ТОГДА ""Х""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВложенныйЗапрос.ТорговаяТочка.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Флагман)
	|							ТОГДА ВЫБОР
	|									КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Новинки)
	|										ТОГДА ""Х""
	|									КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.ОсобыеТовары)
	|										ТОГДА ""Д""
	|									КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обычный)
	|											И НЕ ВЗ_НеХватаетМеста.Номенклатура ЕСТЬ NULL 
	|										ТОГДА ""Д""
	|									ИНАЧЕ ""О""
	|								КОНЕЦ
	|						КОГДА ВложенныйЗапрос.ТорговаяТочка.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Обычный)
	|							ТОГДА ВЫБОР
	|									КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Новинки)
	|										ТОГДА ""Х""
	|									КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.ОсобыеТовары)
	|										ТОГДА ""Д""
	|									КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обычный)
	|											И НЕ ВЗ_НеХватаетМеста.Номенклатура ЕСТЬ NULL 
	|										ТОГДА ""Д""
	|									ИНАЧЕ ""О""
	|								КОНЕЦ
	|						КОГДА ВложенныйЗапрос.ТорговаяТочка.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Мини)
	|							ТОГДА ""В""
	|						КОГДА ВложенныйЗапрос.ТорговаяТочка.ФорматМагазинаВВ = ЗНАЧЕНИЕ(Перечисление.ФорматМагазинаВВ.Развитие)
	|							ТОГДА ВЫБОР
	|									КОГДА ВложенныйЗапрос.Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Обычный)
	|										ТОГДА ""Х""
	|									ИНАЧЕ ""О""
	|								КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ПризнакАссортимента,
	|	ТоварныйАссортиментТочекСрезПоследних.Период КАК ДатаВывода,
	|	ВложенныйЗапрос.ТорговаяТочка
	|ПОМЕСТИТЬ втАссортимент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ТорговаяТочка КАК ТорговаяТочка,
	|		ВложенныйЗапрос.Номенклатура КАК Номенклатура
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВложенныйЗапрос.ТорговаяТочка КАК ТорговаяТочка,
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТТ.ТорговаяТочка КАК ТорговаяТочка,
	|				Ном.Номенклатура КАК Номенклатура
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|				ИЗ
	|					РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекущаяДата, Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)) КАК ТоварныйАссортиментТочекСрезПоследних
	|				ГДЕ
	|					ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|					И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|					И ТоварныйАссортиментТочекСрезПоследних.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НЕ ТоварныйАссортиментТочекСрезПоследних.Номенклатура В (&НоменИскл)
	|					И НЕ ТоварныйАссортиментТочекСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена)
	|					И НЕ ТоварныйАссортиментТочекСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка) КАК ТТ
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|					ИЗ
	|						РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекущаяДата, Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)) КАК ТоварныйАссортиментТочекСрезПоследних
	|					ГДЕ
	|						ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|						И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|						И ТоварныйАссортиментТочекСрезПоследних.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						И НЕ ТоварныйАссортиментТочекСрезПоследних.Номенклатура В (&НоменИскл)
	|						И НЕ ТоварныйАссортиментТочекСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена)
	|						И НЕ ТоварныйАссортиментТочекСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод)
	|					
	|					СГРУППИРОВАТЬ ПО
	|						ТоварныйАссортиментТочекСрезПоследних.Номенклатура) КАК Ном
	|					ПО (ИСТИНА)) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ТоварныйАссортиментТочекСрезПоследних.Период КАК Период,
	|					ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|					ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|					ТоварныйАссортиментТочекСрезПоследних.Характеристика КАК Характеристика,
	|					ТоварныйАссортиментТочекСрезПоследних.Выведена КАК Выведена,
	|					ТоварныйАссортиментТочекСрезПоследних.Запрещена КАК Запрещена,
	|					ТоварныйАссортиментТочекСрезПоследних.id_TT КАК id_TT,
	|					ТоварныйАссортиментТочекСрезПоследних.ДатаСозданияЗаписи КАК ДатаСозданияЗаписи,
	|					ТоварныйАссортиментТочекСрезПоследних.Автор КАК Автор,
	|					ТоварныйАссортиментТочекСрезПоследних.Комментарий КАК Комментарий,
	|					ТоварныйАссортиментТочекСрезПоследних.ИзПотерянных КАК ИзПотерянных
	|				ИЗ
	|					РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекущаяДата, Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)) КАК ТоварныйАссортиментТочекСрезПоследних
	|				ГДЕ
	|					ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|					И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|					И ТоварныйАссортиментТочекСрезПоследних.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НЕ ТоварныйАссортиментТочекСрезПоследних.Номенклатура В (&НоменИскл)
	|					И НЕ ТоварныйАссортиментТочекСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена)
	|					И НЕ ТоварныйАссортиментТочекСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод)) КАК Ассортимент
	|				ПО ВложенныйЗапрос.ТорговаяТочка = Ассортимент.ТорговаяТочка
	|					И ВложенныйЗапрос.Номенклатура = Ассортимент.Номенклатура
	|		ГДЕ
	|			Ассортимент.Номенклатура ЕСТЬ NULL ) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ТорговаяТочка,
	|		ВложенныйЗапрос.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВЗ_Запрос.Номенклатура КАК Номенклатура,
	|			МестаХраненияВМагазинах.Магазин КАК Магазин
	|		ИЗ
	|			Справочник.МестаВыкладки КАК МестаВыкладки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияВМагазинах КАК МестаХраненияВМагазинах
	|				ПО МестаВыкладки.Ссылка = МестаХраненияВМагазинах.МестоВыкладки
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	|					ВыкладкаПланограммы.МестоВыкладки.Родитель КАК МестоВыкладкиРодитель,
	|					СтруктурныеЕдиницы.Ссылка КАК Магазин
	|				ИЗ
	|					РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|						ПО ВыкладкаПланограммы.Планограмма = СтруктурныеЕдиницы.Планограмма
	|				ГДЕ
	|					СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Открыт)
	|					И СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВыкладкаПланограммы.Номенклатура,
	|					ВыкладкаПланограммы.МестоВыкладки.Родитель,
	|					СтруктурныеЕдиницы.Ссылка) КАК ВЗ_Запрос
	|				ПО МестаВыкладки.Ссылка = ВЗ_Запрос.МестоВыкладкиРодитель
	|					И (МестаХраненияВМагазинах.Магазин = ВЗ_Запрос.Магазин)
	|		ГДЕ
	|			ЕСТЬNULL(МестаХраненияВМагазинах.Хватает, ЛОЖЬ) = ЛОЖЬ
	|			И МестаВыкладки.ЭтоГруппа = ИСТИНА) КАК ВЗ_НеХватаетМеста
	|		ПО ВложенныйЗапрос.Номенклатура = ВЗ_НеХватаетМеста.Номенклатура
	|			И ВложенныйЗапрос.ТорговаяТочка = ВЗ_НеХватаетМеста.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураПризнакиУчетаНоменклатуры.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Номенклатура.ПризнакиУчетаНоменклатуры КАК НоменклатураПризнакиУчетаНоменклатуры
	|		ГДЕ
	|			НоменклатураПризнакиУчетаНоменклатуры.Признак = &ПризнакДляДетей) КАК ВЗ_ТоварыДляДетей
	|		ПО ВложенныйЗапрос.Номенклатура = ВЗ_ТоварыДляДетей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураСпецАссортиментМожноВывестиСМагазинов.Ссылка КАК Ссылка,
	|			НоменклатураСпецАссортиментМожноВывестиСМагазинов.Магазин КАК Магазин
	|		ИЗ
	|			Справочник.Номенклатура.СпецАссортиментМожноВывестиСМагазинов КАК НоменклатураСпецАссортиментМожноВывестиСМагазинов) КАК ВЗ_СпецАссортиментМожноВывести
	|		ПО ВложенныйЗапрос.Номенклатура = ВЗ_СпецАссортиментМожноВывести.Ссылка
	|			И ВложенныйЗапрос.ТорговаяТочка = ВЗ_СпецАссортиментМожноВывести.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекущаяДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ПО ВложенныйЗапрос.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|			И (ТоварныйАссортиментТочекСрезПоследних.Выведена
	|				ИЛИ ТоварныйАссортиментТочекСрезПоследних.Запрещена)
	|			И ВложенныйЗапрос.ТорговаяТочка = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	//+++ AK suvv 2018.10.15 ИП-00019795 
	|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК СвойстваСЕДляДетей
	|	    ПО ВложенныйЗапрос.ТорговаяТочка = СвойстваСЕДляДетей.СтруктурнаяЕдиница
	|		    И (СвойстваСЕДляДетей.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ДляДетей))
	//--- AK suvv
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАссортимент.Номенклатура,
	|	втАссортимент.ПризнакАссортимента,
	|	втАссортимент.ДатаВывода,
	|	ЕСТЬNULL(втКолХар.Выигрыш, 0) КАК Выигрыш,
	|	ВЗ_Выкладка.МестоВыкладки,
	|	втАссортимент.ТорговаяТочка,
	|	втАссортимент.Номенклатура.id_tov КАК id_tov,
	|	0 КАК Покупателей,
	|	втАссортимент.ТорговаяТочка.НомерТочки КАК НомерМагазина
	|ИЗ
	|	втАссортимент КАК втАссортимент
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКолХар КАК втКолХар
	|		ПО втАссортимент.Номенклатура = втКолХар.Номенклатура
	|			И втАссортимент.ТорговаяТочка = втКолХар.ТорговаяТочка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыкладкаПланограммы.Номенклатура КАК Номенклатура,
	|			ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки,
	|			СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка
	|		ИЗ
	|			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|				ПО ВыкладкаПланограммы.Планограмма = СтруктурныеЕдиницы.Планограмма
	|		ГДЕ
	|			СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Открыт)
	|			И СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыкладкаПланограммы.Номенклатура,
	|			ВыкладкаПланограммы.МестоВыкладки,
	|			СтруктурныеЕдиницы.Ссылка) КАК ВЗ_Выкладка
	|		ПО втАссортимент.Номенклатура = ВЗ_Выкладка.Номенклатура
	|			И втАссортимент.ТорговаяТочка = ВЗ_Выкладка.ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выигрыш УБЫВ";
	
	
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекДата));
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекДата));
	//Запрос.УстановитьПараметр("ТТ", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	//Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("ПризнакДляДетей", Справочники.ПризнакиУчетаНоменклатуры.НайтиПоНаименованию("Детские товары"));
	
	НоменИскл=Новый Массив;
	НоменИскл.Добавить(Справочники.Номенклатура.НайтиПоКоду("000624109"));
	НоменИскл.Добавить(Справочники.Номенклатура.НайтиПоКоду("000624110"));
	НоменИскл.Добавить(Справочники.Номенклатура.НайтиПоКоду("000624086"));
	Запрос.УстановитьПараметр("НоменИскл", (НоменИскл));
	Результат = Запрос.Выполнить();
	//
	//Запрос.Текст="выбрать* из втТоварыВнеАссортиментаГрупп";
	//Результат = Запрос.Выполнить();
	
	ТЗХарактеристики = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"		, ТекущаяДата());
	Запрос.УстановитьПараметр("Кавказский"	, Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад КАК ОсновнойСклад,
	|	СУММА(1) КАК Колво
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ОсновнойСклад,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ОсновнойСклад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &Кавказский
	|		ИНАЧЕ СтруктурныеЕдиницы.ОсновнойСклад
	|	КОНЕЦ КАК ОсновнойСклад
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабСамыеЧастыеХарки = Результаты[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов = Результаты[1].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	//ТоварыКДобавлениюВАсс.Очистить();
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	ТекстЗапроса = "create table #ls1 ( id_tov int, number int 
	|) 
	|
	|Insert into #ls1
	|exec ('SELECT l.id_tov,		
	|	l.number number	
	|FROM [vv03].[dbo].[lovepr_card_tov] l (nolock)	
	|
	|	inner join [Loyalty].[dbo].[Customer] s (nolock)	
	|		on l.number = s.Email
	|	inner join	[vv03].[dbo].[Tovari] (nolock) t
	|		on t.id_tov = l.id_tov
	|where l.date_from < GETDATE()	
	|	and l.date_to > GETDATE()  group by l.id_tov,		
	|	l.number') at [SRV-SQL03]
	|----------------------------
	|SELECT  c.Email карта,	
	|	k.ShopNo номермагазина,ls.id_tov	
	|FROM [loyalty].[dbo].[TransactionHistory] (nolock)	k
	|	inner join  [Loyalty].[dbo].[DiscountCard] (nolock) d	
	|		on d.DiscountCardUID = k.DiscountCardUID
	|	inner join [Loyalty].[dbo].[Customer] (nolock) c	
	|	inner join  #ls1 ls on ls.number=c.Email
	|		on c.CustomerUID = d.CustomerUID
	|where 	
	|	 k.Time > GETDATE() - 21
	|   group by  c.Email,	
	|	k.ShopNo,ls.id_tov";	
	ТЗНоменклатура=Новый ТаблицаЗначений;
	ТЗНоменклатура.Колонки.Добавить("id_tov",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	ТЗНоменклатура.Колонки.Добавить("номермагазина",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	ТЗНоменклатура.Колонки.Добавить("карта");
	
	ТЗНоменклатура.Индексы.Добавить("id_tov, номермагазина");
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	
	//Попытка
	rs.MoveFirst();
	//
	Сч=0;
	Пока НЕ rs.EOF() Цикл
		Сч=Сч+1;
		НовСтр=ТЗНоменклатура.Добавить();
		НовСтр.id_tov=Rs.Fields("id_tov").Value;
		НовСтр.номермагазина=Rs.Fields("номермагазина").Value;
		НовСтр.карта=Rs.Fields("карта").Value;
		
		rs.MoveNext();
	КонецЦикла;
	//Исключение
	//КонецПопытки;
	
	
	
	
	
	
	
	ТоварыКДобавлениюВАсс=Новый ТаблицаЗначений;
	ТоварыКДобавлениюВАсс.Колонки.Добавить("Номенклатура");
	ТоварыКДобавлениюВАсс.Колонки.Добавить("Характеристика");
	ТоварыКДобавлениюВАсс.Колонки.Добавить("Покупателей");
	ТоварыКДобавлениюВАсс.Колонки.Добавить("Выигрыш");
	ТоварыКДобавлениюВАсс.Колонки.Добавить("ПризнакАссортимента");
	ТоварыКДобавлениюВАсс.Колонки.Добавить("МестоВыкладки");
	
	
	Для каждого Стр Из ТЗХарактеристики Цикл
		Характеристика 	= ОпределитьПравильнуюХаркуДляТочкиТовАссортимент(Стр.ТорговаяТочка, Стр.Номенклатура, ТабСамыеЧастыеХарки, ТабСкладыМагазинов);
		//Если Не ЗначениеЗаполнено(Характеристика) Тогда
		//	Характеристика 	= Стр.Характеристика;	
		//КонецЕсли; 
		Если Не ЗначениеЗаполнено(Характеристика) Тогда
			Продолжить;	
		КонецЕсли; 
		
		//
		//НовСтр=ТоварыКДобавлениюВАсс.Добавить();
		//ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		//НовСтр.Номенклатура=Стр.Номенклатура;
		//НовСтр.Характеристика=Характеристика;
		//НовСтр.Покупателей=ТЗНоменклатура.НайтиСтроки(Новый Структура("id_tov, номермагазина",Стр.id_tov,Стр.НомерМагазина)).Количество();
		//Если НовСтр.Покупателей>0 Тогда
		//	Сообщить(Стр.id_tov,);
		//	
		//
		//КонецЕсли; 
		//НовСтр.Выигрыш=Стр.Выигрыш;
		Мен=РегистрыСведений.ТоварыКДобавлениюВАссортимент.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Мен,Стр);
		Мен.Период=НачалоДня(ТекДата);
		Мен.Характеристика=Характеристика;
		Мен.Покупателей=ТЗНоменклатура.НайтиСтроки(Новый Структура("id_tov, номермагазина",Стр.id_tov,Стр.НомерМагазина)).Количество();
		Мен.Записать();
	КонецЦикла; 
	
КонецПроцедуры
//---- АК AZAP

//++++ АК AZAP 16.05.2017 ИП-00015775
Процедура РассылкаУведомленийПоБДЗ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СписаниеБезнадежнойДЗ.Ссылка,
	|	КонтактнаяИнформация.Представление КАК ЭлПочта
	|ИЗ
	|	Документ.СписаниеБезнадежнойДЗ КАК СписаниеБезнадежнойДЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО СписаниеБезнадежнойДЗ.Подтверждающий.ФизЛицо = КонтактнаяИнформация.Объект
	|ГДЕ
	|	СписаниеБезнадежнойДЗ.Подтвержден = ЛОЖЬ
	|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	Для каждого СтрокаДляОтправки Из Результат Цикл
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		
		//необходимо ваше подтверждение на списание такой-то суммы долга по такому-то контрагенту
		Письмо.Тексты.Добавить("Необходимо ваше подтверждение на списание суммы долга " + СтрокаДляОтправки.Ссылка.СуммаДокумента +
		", по контрагенту: " + СтрокаДляОтправки.Ссылка.Контрагент + " (документ: " + СтрокаДляОтправки.Ссылка);
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СтрокаДляОтправки.ЭлПочта;
		
		Письмо.Тема = "Необходимо подтверждение о списании безнадежной ДЗ";
		
		Почта.Послать(Письмо);
		
	КонецЦикла;
	Почта.Отключиться();
	
КонецПроцедуры

Процедура РассылкаОтчетаПоПереданнымКоробкамВМагазин() Экспорт
	Макет=ПолучитьОбщийМакет("МакетОтчетаПоПереданнымКоробкамВМагазин");
	
	ОблШапкаНачало=Макет.ПолучитьОбласть("Шапка|Начало");
	ОблШапкаКонец=Макет.ПолучитьОбласть("Шапка|Конец");
	ОблШапкаСклад1=Макет.ПолучитьОбласть("Шапка|Склад1");
	ОблШапкаСклад2=Макет.ПолучитьОбласть("Шапка|Склад2");
	ОблШапкаСклад3=Макет.ПолучитьОбласть("Шапка|Склад3");
	ОблШапкаСклад4=Макет.ПолучитьОбласть("Шапка|Склад4");
	
	ОблСтрокаНачало=Макет.ПолучитьОбласть("Строка|Начало");
	ОблСтрокаКонец=Макет.ПолучитьОбласть("Строка|Конец");
	ОблСтрокаСклад1=Макет.ПолучитьОбласть("Строка|Склад1");
	ОблСтрокаСклад2=Макет.ПолучитьОбласть("Строка|Склад2");
	ОблСтрокаСклад3=Макет.ПолучитьОбласть("Строка|Склад3");
	ОблСтрокаСклад4=Макет.ПолучитьОбласть("Строка|Склад4");
	ТабДок=Новый ТабличныйДокумент;	
	Дата=ТекущаяДата();//'20170215';
	СоотСборщиков=Новый Соответствие;	
	ТЗ=Отчеты.ОтчетКладовщикаНаОтгрузке.СформироватьОтчет(НачалоДня(Дата),КонецДня(Дата),
	Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"),"",СоотСборщиков);
	
	МасСкладов=Новый Массив;
	МасСкладов.Добавить("Долгосрок");
	МасСкладов.Добавить("Заморозка");
	МасСкладов.Добавить("Овощи");
	МасСкладов.Добавить("Охлажден");
	МасСкладов.Добавить("Хлеб");
	МасСкладов.Добавить("Молочка");
	МасСкладов.Добавить("Штучный");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Ссылка,
	|	РасходныйОрдерСклад.Получатель.Наименование как Получатель
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Проведен
	|	И РасходныйОрдерСклад.Склад.Владелец = &Владелец
	|	И РасходныйОрдерСклад.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Запрос.УстановитьПараметр("Владелец", Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата));
	
	Результат = Запрос.Выполнить();
	
	ТЗДок = Результат.Выгрузить();
	
	ТЗДок.Колонки.Добавить("СкладНаименование");
	
	
	ТЗКат=Новый ТаблицаЗначений;
	ТЗКат.Колонки.Добавить("Группа");
	ТЗКат.Колонки.Добавить("Поиск");
	
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Долгосрок";
	НовСтр.Поиск="Долгосро";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Заморозка";
	НовСтр.Поиск="Замороз";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Овощи";
	НовСтр.Поиск="Овощи";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Охлажден";
	НовСтр.Поиск="Охл";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Хлеб";
	НовСтр.Поиск="Хлеб";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Молочка";
	НовСтр.Поиск=?(Найти(Строка(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231")),"Кавказский")>0,"Кавказский","Макарова");
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Штучный";
	НовСтр.Поиск="Штучн";
	
	Для каждого Стр Из ТЗДок Цикл
		Для каждого Стр1 Из ТЗКат Цикл
			Если Найти(Нрег(Строка(Стр.Склад)),Нрег(Стр1.Поиск))>0 Тогда
				Стр.СкладНаименование=Стр1.Группа;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	
	
	
	ТабДок.Вывести(ОблШапкаНачало);
	Для каждого Эл Из МасСкладов Цикл
		ОблШапкаСклад1.Параметры.Склад=Эл;	
		ТабДок.Присоединить(ОблШапкаСклад1);
		
	КонецЦикла; 
	ТабДок.Присоединить(ОблШапкаКонец);
	
	Кол=ТЗ.Количество();
	Для Сч=0 По Кол-1 Цикл
		Если Не ЗначениеЗаполнено(ТЗ[Кол-1-Сч].Магазин) Тогда
			ТЗ.Удалить(Кол-1-Сч);
		КонецЕсли; 
	КонецЦикла; 
	
	
	Для каждого Стр Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Стр.Магазин) Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ОблСтрокаНачало.параметры,Стр);
		ТабДок.Вывести(ОблСтрокаНачало);
		Для каждого Эл Из МасСкладов Цикл
			Если Стр[Эл+"Статус"]=1 Тогда
				ОблСтрокаСкладТек=ОблСтрокаСклад1;
			ИначеЕсли Стр[Эл+"Статус"]=2 Тогда
				ОблСтрокаСкладТек=ОблСтрокаСклад2;
			ИначеЕсли Стр[Эл+"Статус"]=3 Тогда
				ОблСтрокаСкладТек=ОблСтрокаСклад3;
			Иначе
				ОблСтрокаСкладТек=ОблСтрокаСклад4;
			КонецЕсли; 
			
			
			ОблСтрокаСкладТек.Параметры.СкладДанные=?(ЗначениеЗаполнено(Стр[Эл]),Стр[Эл],"-");	
			//ОблСтрокаСкладТек.Параметры.Комплектовщик=Стр["Комплектовщик"+Эл];	
			
			ТабДок.Присоединить(ОблСтрокаСкладТек);
			
		КонецЦикла; 
		ОблСтрокаКонец.Параметры.Сетки=Стр.Сетки;
		ТабДок.Присоединить(ОблСтрокаКонец);
		
	КонецЦикла; 
	//ТабДок.Показать();	
	ОтправитьПисьмоСОтчетомПоПереданнымКоробкам(ТабДок,ТЗ,ТЗДок);
	
КонецПроцедуры

Процедура ОтправитьПисьмоСОтчетомПоПереданнымКоробкам(ТабДок,ТЗ,ТЗДок)
	
	СтруктураНовогоПисьма 	= Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	
	СписокФайловВложений 	= Новый СписокЗначений;
	
	
	СтруктураНовогоПисьма.Вставить("Тема", "Отчет по переданным коробкам за "+Строка(Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")) ) ;
	
	СтруктураНовогоПисьма.Вставить("Тело", "Отчет по переданным коробкам за "+Строка(Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")) );
	
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	//СтруктураНовогоПисьма.Вставить("ТабДок", ТабДок);
	Кому 			= Новый СписокЗначений;
	МассивАдресов	= Новый Массив;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа = &Группа";
	
	Запрос.УстановитьПараметр("Группа", Справочники.АК_ГруппыРассылки.ОтчетПоПереданнымКоробкам);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Емейл) Тогда
			Кому.Добавить(ВыборкаДетальныеЗаписи.Емейл);
		КонецЕсли; 
	КонецЦикла;
	
	Если Кому.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	
	
	ВремФайл = ПолучитьИмяВременногоФайла("htm");
	ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
	
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль = Найти(Текст, "<STYLE");
	КонецБлокаСтиль = Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело = Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстПолный = "<HTML>" + Символы.ПС +ТекстСтиль +Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; CELLPADDING=5; border = 0");
	Длина=СтрДлина(ТекстПолный);
	СчСтрок=0;
	СчКол=0;
	
	МасСкладов=Новый Массив;
	МасСкладов.Добавить("Долгосрок");
	МасСкладов.Добавить("Заморозка");
	МасСкладов.Добавить("Овощи");
	МасСкладов.Добавить("Охлажден");
	МасСкладов.Добавить("Хлеб");
	МасСкладов.Добавить("Молочка");
	МасСкладов.Добавить("Штучный");
	
	
	Сч=0;
	Пока Сч<Длина Цикл
		Сч=Сч+1;
		Если Сред(ТекстПолный,Сч,5)="</TR>" Тогда
			СчСтрок=СчСтрок+1;
			СчКол=0;
		КонецЕсли; 
		Если Сред(ТекстПолный,Сч,7)="</SPAN>" Тогда
			СчКол=СчКол+1;
		КонецЕсли; 
		
		Если Сред(ТекстПолный,Сч,19)="""R1C3""><SPAN STYLE=" Тогда
			НомКол=Счкол-2;
			Магазин=ТЗ[СчСтрок-1].Магазин;  //[МасСкладов[НомКол-1]]
			Склад=МасСкладов[НомКол-1];
			МасСтр=ТЗДок.НайтиСтроки(Новый Структура("Получатель,СкладНаименование",Магазин,Склад));
			Статус=ТЗ[СчСтрок-1][МасСкладов[НомКол-1]+"Статус"];
			Если Статус=1 Тогда
				СтрЦвет="""background:#FFFFCC;" ;
			ИначеЕсли Статус=2 Тогда
				СтрЦвет="""background:#CCFFCC;" ;	
			ИначеЕсли Статус=3 Тогда
				СтрЦвет="""background:#FFCCCC;" ;	
			Иначе
				СтрЦвет="""background:#FFFFFF;" ;
			КонецЕсли; 
			
			СтрДоки="";
			Для каждого Эл Из МасСтр Цикл
				СтрДоки=СтрДоки+Строка(Эл.Ссылка)+Символы.ПС;
			КонецЦикла;
			Длина=Длина+29+СтрДлина(СтрДоки);
			ТекстПолный=Лев(ТекстПолный,Сч-1)+"""R1C3""><span title="""+СтрДоки+""" style="+СтрЦвет+Сред(ТекстПолный,Сч+20);
			//ТекстПолный=Лев(ТекстПолный,Сч-1)+
			
			
		КонецЕсли; 
		
		Если Сред(ТекстПолный,Сч,СтрДлина("""R0C0""><SPAN STYLE=""white-space:nowrap;"">-"))="""R0C0""><SPAN STYLE=""white-space:nowrap;"">-" Тогда
			НомКол=(Счкол-2)/1;
			Магазин=ТЗ[СчСтрок-1].Магазин;  //[МасСкладов[НомКол-1]]
			Склад=МасСкладов[НомКол-1];
			МасСтр=ТЗДок.НайтиСтроки(Новый Структура("Получатель,СкладНаименование",Магазин,Склад));
			Статус=ТЗ[СчСтрок-1][МасСкладов[НомКол-1]+"Статус"];
			Если Статус=1 Тогда
				СтрЦвет="""background:#FFFFCC;" ;
			ИначеЕсли Статус=2 Тогда
				СтрЦвет="""background:#CCFFCC;" ;	
			ИначеЕсли Статус=3 Тогда
				СтрЦвет="""background:#FFCCCC;" ;	
			Иначе
				СтрЦвет="""background:#FFFFFF;" ;
			КонецЕсли; 
			
			СтрДоки="";
			Для каждого Эл Из МасСтр Цикл
				СтрДоки=СтрДоки+Строка(Эл.Ссылка)+Символы.ПС;
			КонецЦикла;
			Длина=Длина+29+СтрДлина(СтрДоки);
			ТекстПолный=Лев(ТекстПолный,Сч-1)+"""R1C3""><span title="""+СтрДоки+""" style="+СтрЦвет+Сред(ТекстПолный,Сч+20);
			//ТекстПолный=Лев(ТекстПолный,Сч-1)+
			
			
		КонецЕсли; 
		
		
		Если Сред(ТекстПолный,Сч,20)="""R29C3""><SPAN STYLE=" Тогда
			НомКол=Счкол-2;
			Магазин=ТЗ[СчСтрок-1].Магазин;  //[МасСкладов[НомКол-1]]
			Склад=МасСкладов[НомКол-1];
			МасСтр=ТЗДок.НайтиСтроки(Новый Структура("Получатель,СкладНаименование",Магазин,Склад));
			Статус=ТЗ[СчСтрок-1][МасСкладов[НомКол-1]+"Статус"];
			Если Статус=1 Тогда
				СтрЦвет="""background:#FFFFCC;" ;
			ИначеЕсли Статус=2 Тогда
				СтрЦвет="""background:#CCFFCC;" ;	
			ИначеЕсли Статус=3 Тогда
				СтрЦвет="""background:#FFCCCC;" ;	
			Иначе
				СтрЦвет="""background:#FFFFFF;" ;
			КонецЕсли; 
			
			
			
			СтрДоки="";
			Для каждого Эл Из МасСтр Цикл
				СтрДоки=СтрДоки+Строка(Эл.Ссылка)+Символы.ПС;
			КонецЦикла;
			Длина=Длина+29+СтрДлина(СтрДоки);
			ТекстПолный=Лев(ТекстПолный,Сч-1)+"""R29C3""><span title="""+СтрДоки+""" style="+СтрЦвет+Сред(ТекстПолный,Сч+21);
			//ТекстПолный=Лев(ТекстПолный,Сч-1)+
			
			
		КонецЕсли; 
		Если Сред(ТекстПолный,Сч,20)="""R56C3""><SPAN STYLE=" Тогда
			НомКол=Счкол-2;
			Магазин=ТЗ[СчСтрок-1].Магазин;  //[МасСкладов[НомКол-1]]
			Склад=МасСкладов[НомКол-1];
			МасСтр=ТЗДок.НайтиСтроки(Новый Структура("Получатель,СкладНаименование",Магазин,Склад));
			Статус=ТЗ[СчСтрок-1][МасСкладов[НомКол-1]+"Статус"];
			Если Статус=1 Тогда
				СтрЦвет="""background:#FFFFCC;" ;
			ИначеЕсли Статус=2 Тогда
				СтрЦвет="""background:#CCFFCC;" ;	
			ИначеЕсли Статус=3 Тогда
				СтрЦвет="""background:#FFCCCC;" ;	
			Иначе
				СтрЦвет="""background:#FFFFFF;" ;
			КонецЕсли; 
			
			
			
			СтрДоки="";
			Для каждого Эл Из МасСтр Цикл
				СтрДоки=СтрДоки+Строка(Эл.Ссылка)+Символы.ПС;
			КонецЦикла;
			Длина=Длина+29+СтрДлина(СтрДоки);
			ТекстПолный=Лев(ТекстПолный,Сч-1)+"""R56C3""><span title="""+СтрДоки+""" style="+СтрЦвет+Сред(ТекстПолный,Сч+21);
			//ТекстПолный=Лев(ТекстПолный,Сч-1)+
			
			
		КонецЕсли; 
	КонецЦикла; 
	//ТекстПолный=СтрЗаменить(ТекстПолный,"nowrap","normal");
	//ТекстПолный=СтрЗаменить(ТекстПолный,"nowrap","normal");
	//ТД=Новый ТекстовыйДокумент;
	//ТД.УстановитьТекст(ТекстПолный);
	//ТД.Показать();
	
	СтруктураНовогоПисьма.Вставить("ТабДок", ТекстПолный);
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//СтруктураНовогоПисьма.Вставить("Тело", "Изменен статус характеристики "+Строка(Ссылка)+" номенклатуры - "+Строка(Владелец)+" на "+Строка(Статус)+".");
	
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	
КонецПроцедуры


//+++ АК BARA ИП-00015657.04.000.00001

&НаСервере
Процедура РассылкаБухгалтерамПлохаяДЗ()  Экспорт 
	
	//+++АК bara 15.11.17    16682.02
	ОбъектОтчет = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам_РасчетыСКонтрагентами_Минусы.Создать();			   
	//---АК
	
	ОбъектОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОбъектОтчет.СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ПлохаяДЗПоБух").Настройки);
	ОСКДНастройки  = ОбъектОтчет.КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Макет = КомпоновщикМакетаОСКД.Выполнить( ОбъектОтчет.СхемаКомпоновкиДанных, ОСКДНастройки);
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	
	ТаблДок = Новый ТабличныйДокумент;
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаОСКД.УстановитьДокумент(ТаблДок);
	
	ПроцессорВыводаОСКД.НачатьВывод();
	
	АдресОтправки = "no-reply@vkusvill.ru";
	Почта = Новый ИнтернетПочта;   	
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	НовТаб = Новый ТаблицаЗначений;
	НовТаб.Колонки.Добавить("Бухгалтер");
	НовТаб.Колонки.Добавить("Email");
	НовТаб.Колонки.Добавить("ТекстПисьма");
	
	НовСтрБухгалтер = ""; 
	ТекстПисьма = ""; 
	ЭлементРезультата = ПроцессорКомпоновкиОСКД.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		Если ЭлементРезультата.ЗначенияПараметров.Количество()>0 Тогда
			Если ТипЗнч(ЭлементРезультата.ЗначенияПараметров.П1.Значение) = ТипЗнч("Строка") Тогда 
				Если ЗначениеЗаполнено(НовСтрБухгалтер) и ЗначениеЗаполнено(ТекстПисьма) Тогда 					
					ОтправитьПисьмоБухгалтеру(Почта,НовСтрБухгалтер,ТекстПисьма,УчёткаДляНастройки,АдресОтправки);					
				КонецЕсли;
				ТекстПисьма = "";
				НовСтрБухгалтер = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
			ИначеЕсли ТипЗнч(ЭлементРезультата.ЗначенияПараметров.П1.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда 
				//+++АК bara 15.11.17    16682.02
				Если ЭлементРезультата.ЗначенияПараметров.П2.Значение > 0 Тогда 
					ТекстПисьма = ТекстПисьма+ЭлементРезультата.ЗначенияПараметров.П1.Значение + " "+ЭлементРезультата.ЗначенияПараметров.П2.Значение+";"+Символы.ПС ;				
				КонецЕсли;
				//---
				ЭлементРезультата = ПроцессорКомпоновкиОСКД.Следующий();
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		ЭлементРезультата = ПроцессорКомпоновкиОСКД.Следующий();
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НовСтрБухгалтер) и ЗначениеЗаполнено(ТекстПисьма) Тогда 					
		ОтправитьПисьмоБухгалтеру(Почта,НовСтрБухгалтер,ТекстПисьма,УчёткаДляНастройки,АдресОтправки);					
	КонецЕсли;
	
	ПроцессорВыводаОСКД.ЗакончитьВывод();
	
	Почта.Отключиться();	
КонецПроцедуры

Процедура ОтправитьПисьмоБухгалтеру(Почта,НовСтрБухгалтер,ТекстПисьма,УчёткаДляНастройки,АдресОтправки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление КАК EmailАдрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО КонтактнаяИнформация.Объект = Пользователи.ФизЛицо
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО ""%"" + &Наименование + ""%""
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Наименование", НовСтрБухгалтер);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = "Плохая ДЗ на "+Формат(ТекущаяДата(),"ДЛФ=DD");
		Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
		Письмо.Отправитель.Адрес = АдресОтправки;
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(ВыборкаДетальныеЗаписи.EmailАдрес);
		//Получатель.Адрес = "no-reply@vkusvill.ru";
		ТекстПисьма = "Добрый день. Плохая ДЗ по следующим позициям."+Символы.ПС+Символы.ПС + ТекстПисьма;
		ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
		Попытка
			Почта.Послать(Письмо);
			Сообщить("Письмо отправлено.");
		Исключение
			Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
		КонецПопытки;		
		
	КонецЕсли;
	
	
КонецПроцедуры


//--- АК BARA ИП-00015657.04.000.00001

//--- АК BARA ИП-00015657.09.000.00001

Процедура РассылкаБухРк()Экспорт 
	
	РассылкаБухгалтерамПлохаяДЗРуководители(Перечисления.АК_РассылкаПлохойДЗ.Бухгалтер);	
	
КонецПроцедуры

Процедура РассылкаМенРк()Экспорт 
	
	РассылкаБухгалтерамПлохаяДЗРуководители(Перечисления.АК_РассылкаПлохойДЗ.Менеджер);	
	
КонецПроцедуры

//+++АК BARA ИП-00017540  2018.01.17
Процедура РассылкаОбИзмененииДатОткрытияМагазинов()  Экспорт 
	 //Перенес в справочник ПереодическиеЗадания
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//
	//Запрос = "SELECT TOP 1000 [id_tt]
	//|  ,[date_of_change]
	//|  ,[old_date]
	//|  ,[new_date]
	//|  ,[_description]
	//| FROM [Reports].[dbo].[Changes_open_date_store]
	//|  where date_of_change >= '20180116'";
	//Запрос = СтрЗаменить(Запрос,"20180116",Формат(ТекущаяДата()-86400,"ДФ=yyyyMMdd"));
	//
	//rs = ADOСоединение.Execute(Запрос);	
	//ТабДанные = Новый ТаблицаЗначений;
	//
	//ТабДанные = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
	//ТабДанные.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//ADOСоединение.Close();

	//Емайл = "bancom@yandex.ru";
	//
	//АдресОтправки = "no-reply@vkusvill.ru";
	//Почта = Новый ИнтернетПочта;   	
	//УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
	//Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	//Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	//
	//Письмо = Новый ИнтернетПочтовоеСообщение;
	//
	//Письмо.Тема = "Изменена дата открытия магазина: на "+Формат(ТекущаяДата(),"ДЛФ=DD");
	//Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
	//Письмо.Отправитель.Адрес = АдресОтправки;
	//
	//Получатель = Письмо.Получатели.Добавить();
	//Получатель.Адрес = Емайл;
	//Получатель = Письмо.Получатели.Добавить();
	//Получатель.Адрес = "reklama01@vkusvill.ru";
	//Получатель = Письмо.Получатели.Добавить();
	//Получатель.Адрес = "marie.petrovskaya@yandex.ru";

	//
	//ТекстХТМЛ = "<h1>Добрый день. Изменены даты открытия магазинов."+Символы.ПС+Символы.ПС+"</h1>";
	//
	//ТекстХТМЛ = ТекстХТМЛ+"<table border><tr align='center'><td>ID торговой точки</td><td>Дата изменения</td><td>Старая дата</td><td>Новая дата</td><td>Магазин</td></tr>";
	//
	//Для Каждого СтрокаТаблицы Из ТабДанные Цикл
	//	ТекстХТМЛ = ТекстХТМЛ + "<tr>";
	//	ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.id_tt) + "</td>";
	//	ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.date_of_change) + "</td>";
	//	ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.old_date) + "</td>";		
	//	ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.new_date) + "</td>";
	//	ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы._description) + "</td>";
	//	ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	//КонецЦикла;
	//ТекстХТМЛ = ТекстХТМЛ + "</table>";	
	//
	//ТекстСообщения = Письмо.Тексты.Добавить(ТекстХТМЛ);
	//ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	//Попытка
	//	Почта.Послать(Письмо);
	//	Сообщить("Письмо отправлено.");
	//Исключение
	//	Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
	//КонецПопытки;	
	//
	

КонецПроцедуры

//---

//+++АК bara 15.11.17    16682.02
Процедура РассылкаБухгалтерамПлохаяДЗРуководители(ТипРассылки )  Экспорт 
	
	Если ТипРассылки = Перечисления.АК_РассылкаПлохойДЗ.Бухгалтер Тогда 
		ПолеСтрРуководителя =	"КонтрагентОсновнойБухгалтерПокупателяФизЛицоРуководитель";
		ПолеГруппировки = "КонтрагентОсновнойБухгалтерПокупателя";
		ВариантОтчета = "ПлДЗПоБухРук";
	Иначе
		ПолеСтрРуководителя =	"ОтветственныйМенеджерФизЛицоРуководитель";
		ПолеГруппировки = "ОтветственныйМенеджер";
		ВариантОтчета = "ПлДЗПоМенРук";
	КонецЕсли;
	
	ОбъектОтчет = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам_РасчетыСКонтрагентами_Минусы.Создать();
	
	ОбъектОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОбъектОтчет.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ВариантОтчета).Настройки);
	ОСКДНастройки  = ОбъектОтчет.КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Макет = КомпоновщикМакетаОСКД.Выполнить( ОбъектОтчет.СхемаКомпоновкиДанных, ОСКДНастройки, , ,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	
	Результат = Новый ТаблицаЗначений;
	
	ТаблДок = Новый ТабличныйДокумент;
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаОСКД.УстановитьОбъект(Результат);
	ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
	РукТЗ = Результат.Скопировать(,ПолеСтрРуководителя);
	РукТЗ.Свернуть(ПолеСтрРуководителя);
	РукТЗМассив = РукТЗ.ВыгрузитьКолонку(ПолеСтрРуководителя);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АК_СписокРассылкиПоДЗ.ФизическиеЛица КАК ФизическиеЛица,
	|	КонтактнаяИнформация.Представление Как Емайл
	|ИЗ
	|	РегистрСведений.АК_СписокРассылкиПоДЗ КАК АК_СписокРассылкиПоДЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО АК_СписокРассылкиПоДЗ.ФизическиеЛица = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = &Тип
	|				И КонтактнаяИнформация.Вид = &Вид)
	|ГДЕ
	|	АК_СписокРассылкиПоДЗ.ТипРассылки = &ТипРассылки
	|	И АК_СписокРассылкиПоДЗ.ФизическиеЛица В(&ФизическиеЛица)";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", РукТЗМассив);
	Запрос.УстановитьПараметр("ТипРассылки",ТипРассылки);  
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		АдресОтправки = "no-reply@vkusvill.ru";
		Почта = Новый ИнтернетПочта;   	
		УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
		Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
		Емайл = ВыборкаДетальныеЗаписи.Емайл;
		
		НовТаб = Новый ТаблицаЗначений;
		НовТаб.Колонки.Добавить("Бухгалтер");
		НовТаб.Колонки.Добавить("Email");
		НовТаб.Колонки.Добавить("ТекстПисьма");
		
		НовСтрБухгалтер = ""; 
		ТекстПисьма = ""; 
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(ПолеСтрРуководителя,ВыборкаДетальныеЗаписи.ФизическиеЛица);
		РезПоиска = Результат.НайтиСтроки(ПараметрыОтбора);
		Для каждого Стр Из РезПоиска Цикл
			Если Стр[ПолеГруппировки] <> Неопределено и Стр.Контрагент <> Неопределено Тогда 
				ТекстПисьма = ТекстПисьма+Стр[ПолеГруппировки]+" """+Стр.Контрагент + """ "+Стр.ПлохаяДЗ+";"+Символы.ПС ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Емайл) и ЗначениеЗаполнено(ТекстПисьма) Тогда 					
			ОтправитьПисьмоПоЕмайлРук(Почта,Емайл,ТекстПисьма,УчёткаДляНастройки,АдресОтправки);					
		КонецЕсли;
		
		ПроцессорВыводаОСКД.ЗакончитьВывод();		
		Почта.Отключиться();		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьПисьмоПоЕмайлРук(Почта,Емайл,ТекстПисьма,УчёткаДляНастройки,АдресОтправки);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Плохая ДЗ на "+Формат(ТекущаяДата(),"ДЛФ=DD");
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
	Письмо.Отправитель.Адрес = АдресОтправки;
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = Емайл;
	
	ТекстПисьма = "Добрый день. Плохая ДЗ по следующим позициям."+Символы.ПС+Символы.ПС + ТекстПисьма;
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Попытка
		Почта.Послать(Письмо);
		Сообщить("Письмо отправлено.");
	Исключение
		Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
	КонецПопытки;		
	
КонецПроцедуры

//--- АК BARA ИП-00015657.09.000.00001


//+++АК sils 24.07.2017 ИП-00015657
&НаСервере
Процедура РассылкаЮристуПлохаяДЗ()  Экспорт 
	
	//+++АК bara 15.11.17    16682.02
	ОбъектОтчет = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам_РасчетыСКонтрагентами_Минусы.Создать();
	//---
	
	ОбъектОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОбъектОтчет.СхемаКомпоновкиДанных.ВариантыНастроек.Найти("СудебнаяДЗ").Настройки);
	ОСКДНастройки  = ОбъектОтчет.КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Макет = КомпоновщикМакетаОСКД.Выполнить( ОбъектОтчет.СхемаКомпоновкиДанных, ОСКДНастройки);
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	
	ТаблДок = Новый ТабличныйДокумент;
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаОСКД.УстановитьДокумент(ТаблДок);
	
	ПроцессорВыводаОСКД.НачатьВывод();
	
	АдресОтправки = "no-reply@vkusvill.ru";
	Почта = Новый ИнтернетПочта;   	
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	НовТаб = Новый ТаблицаЗначений;
	НовТаб.Колонки.Добавить("Бухгалтер");
	НовТаб.Колонки.Добавить("Email");
	НовТаб.Колонки.Добавить("ТекстПисьма");
	
	НовСтрБухгалтер = Константы.АК_НачЮрОтдела.Получить(); 
	ТекстПисьма = ""; 
	ЭлементРезультата = ПроцессорКомпоновкиОСКД.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		Если ЭлементРезультата.ЗначенияПараметров.Количество()>0 Тогда
			Если ТипЗнч(ЭлементРезультата.ЗначенияПараметров.П1.Значение) = ТипЗнч("Строка") Тогда 
				ТекстПисьма = ТекстПисьма + "Организация: " + ЭлементРезультата.ЗначенияПараметров.П1.Значение + 
				" Контрагент: " + ЭлементРезультата.ЗначенияПараметров.П2.Значение + 
				" Документ: " + ЭлементРезультата.ЗначенияПараметров.П3.Значение + 
				" Сумма: " + ЭлементРезультата.ЗначенияПараметров.П4.Значение + 
				";" + Символы.ПС ;				
			КонецЕсли;
		КонецЕсли;		
		ЭлементРезультата = ПроцессорКомпоновкиОСКД.Следующий();
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НовСтрБухгалтер) и ЗначениеЗаполнено(ТекстПисьма) Тогда 					
		ОтправитьПисьмоЮристу(Почта, НовСтрБухгалтер, ТекстПисьма, УчёткаДляНастройки, АдресОтправки);					
	КонецЕсли;
	
	ПроцессорВыводаОСКД.ЗакончитьВывод();
	
	Почта.Отключиться();
КонецПроцедуры

Процедура ОтправитьПисьмоЮристу(Почта, НовСтрБухгалтер, ТекстПисьма, УчёткаДляНастройки, АдресОтправки);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление КАК EmailАдрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Объект", НовСтрБухгалтер.Ссылка);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = "Судебная ДЗ на " + Формат(ТекущаяДата(),"ДЛФ=DD");
		Письмо.ИмяОтправителя  = "" + СокрЛП(УчёткаДляНастройки)+"";
		Письмо.Отправитель.Адрес = АдресОтправки;
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(ВыборкаДетальныеЗаписи.EmailАдрес);
		//Получатель.Адрес = "@automacon.ru";
		ТекстПисьма = "Добрый день. Не проставлено подтверждение / отпровержение по следующим позициям судебной ДЗ." + Символы.ПС + Символы.ПС + ТекстПисьма;
		ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
		Попытка
			Почта.Послать(Письмо);
			Сообщить("Письмо отправлено.");
		Исключение
			Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
		КонецПопытки;		
	КонецЕсли;
КонецПроцедуры
//---АК


//+++ АК BARA ИП-00016057

&НаСервере
Процедура РассылкаОтвБухмПривязкаРасходБанка()  Экспорт
	
	ВидОперацииПост = Новый Массив;
	
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратОтПоставщика);
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя);
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя);
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеВБанк.Ссылка,
	|	ПоступлениеВБанк.Контрагент.ОсновнойБухгалтерПокупателя КАК КонтрагентОсновнойБухгалтерПокупателя,
	|	ПоступлениеВБанк.Контрагент,
	|	ПоступлениеВБанк.СуммаДокумента,
	|	ПоступлениеВБанк.Представление,
	|	ПоступлениеВБанк.Контрагент.ОсновнойБухгалтерПокупателя.ФизЛицо КАК ОснБухФизЛицо
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.Проведен
	|	И ПоступлениеВБанк.ВидОперации В(&ВидОперации)
	|	И ПоступлениеВБанк.ДокументыРасходИзБанкаУказаны = ЛОЖЬ
	|ИТОГИ ПО
	|	КонтрагентОсновнойБухгалтерПокупателя";
	
	Запрос.УстановитьПараметр("ВидОперации", ВидОперацииПост);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаКонтрагентОсновнойБухгалтерПокупателя = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	АдресОтправки = "no-reply@vkusvill.ru";
	Почта = Новый ИнтернетПочта;   	
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	
	Пока ВыборкаКонтрагентОсновнойБухгалтерПокупателя.Следующий() Цикл
		
		ТекстПисьма =  "Добрый день.
		|Необходимо в срочно порядке привязать  возврат к выплатам. Для формирования проводок по возврату.
		|" ;
		ВыборкаДетальныеЗаписи = ВыборкаКонтрагентОсновнойБухгалтерПокупателя.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстПисьма = ТекстПисьма + ВыборкаДетальныеЗаписи.Представление + " на сумму " + ВыборкаДетальныеЗаписи.СуммаДокумента + " по контрагенту " + ВыборкаДетальныеЗаписи.Контрагент + Символы.ПС;			
		КонецЦикла;
		
		ТекстПисьма = ТекстПисьма + Символы.ПС ;
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = "Необходимо привязать документы Поступление в банк с Расход банка.";
		Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
		Письмо.Отправитель.Адрес = АдресОтправки;
		
		Запрос1 = Новый Запрос;
		Запрос1.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК ЕМайл
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&СписокРассылки)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
		
		Запрос1.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
		Запрос1.УстановитьПараметр("СписокРассылки", ВыборкаКонтрагентОсновнойБухгалтерПокупателя.ОснБухФизЛицо);
		Запрос1.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Результат1 = Запрос1.Выполнить();
		
		ВыборкаПочта = Результат1.Выбрать();
		
		Пока ВыборкаПочта.Следующий() Цикл
			Получатель = Письмо.Получатели.Добавить();		
			Получатель.Адрес = ВыборкаПочта.ЕМайл;//"bancom@yandex.ru";//ВыборкаПочта.ЕМайл;
		КонецЦикла;
		ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
		
		Попытка
			Почта.Послать(Письмо);
			//Сообщить("Письмо отправлено.");
		Исключение
			//Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура РассылкаПривязкаРасходБанка()  Экспорт
	
	ВидОперацииПост = Новый Массив;
	
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратОтПоставщика);
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя);
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя);
	ВидОперацииПост.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеВБанк.Ссылка,
	|	ПоступлениеВБанк.Контрагент.ОсновнойБухгалтерПокупателя КАК КонтрагентОсновнойБухгалтерПокупателя,
	|	ПоступлениеВБанк.Контрагент,
	|	ПоступлениеВБанк.СуммаДокумента,
	|	ПоступлениеВБанк.Представление
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.Проведен
	|	И ПоступлениеВБанк.ВидОперации В(&ВидОперации)
	|	И ПоступлениеВБанк.ДокументыРасходИзБанкаУказаны = ЛОЖЬ
	|ИТОГИ ПО
	|	КонтрагентОсновнойБухгалтерПокупателя";
	
	Запрос.УстановитьПараметр("ВидОперации", ВидОперацииПост);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаКонтрагентОсновнойБухгалтерПокупателя = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТекстПисьма =  "Добрый день.
	|Необходимо в срочно порядке привязать  возврат к выплатам. Для формирования проводок по возврату.
	|";
	
	Пока ВыборкаКонтрагентОсновнойБухгалтерПокупателя.Следующий() Цикл
		
		ТекстПисьма = ТекстПисьма + "По бухгатеру "+ВыборкаКонтрагентОсновнойБухгалтерПокупателя.КонтрагентОсновнойБухгалтерПокупателя+" есть документы поступления в банк не привязанные к расход банку."+Символы.ПС;
		ВыборкаДетальныеЗаписи = ВыборкаКонтрагентОсновнойБухгалтерПокупателя.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстПисьма = ТекстПисьма + ВыборкаДетальныеЗаписи.Представление + " на сумму " + ВыборкаДетальныеЗаписи.СуммаДокумента + " по контрагенту " + ВыборкаДетальныеЗаписи.Контрагент + Символы.ПС;			
		КонецЦикла;
		
		ТекстПисьма = ТекстПисьма + Символы.ПС ;
		
	КонецЦикла;
	
	АдресОтправки = "no-reply@vkusvill.ru";
	Почта = Новый ИнтернетПочта;   	
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Необходимо привязать документы Поступление в банк с Расход банка.";
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
	Письмо.Отправитель.Адрес = АдресОтправки;
	
	Попытка
		СпРассылки = Константы.ДопСписокРассылкиСвязокПостБанка.Получить().Получить().ВыгрузитьКолонку("физЛицо");
	Исключение
		СпРассылки = Новый Массив;
	КонецПопытки;
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК ЕМайл
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&СписокРассылки)
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос1.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос1.УстановитьПараметр("СписокРассылки", СпРассылки);
	Запрос1.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат1 = Запрос1.Выполнить();
	
	ВыборкаПочта = Результат1.Выбрать();
	
	Пока ВыборкаПочта.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();		
		Получатель.Адрес = ВыборкаПочта.ЕМайл;//"bancom@yandex.ru";//ВыборкаПочта.ЕМайл;
	КонецЦикла;
	
	
	//Получатель.Адрес = "no-reply@vkusvill.ru";
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Попытка
		Почта.Послать(Письмо);
		//Сообщить("Письмо отправлено.");
	Исключение
		//Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
	КонецПопытки;	
	
	
КонецПроцедуры

//--- АК BARA ИП-00016057

//+++ АК BARA ИП-00016430
Процедура ВыгрузкаВЗУПСогласованияОтпусков() Экспорт 
	
	ПланОбменаЗУП = ПланыОбмена.ОбменСЗУП.НайтиПоНаименованию("ЗУП");	
	Рез =	ПланыОбмена.ВыбратьИзменения(ПланОбменаЗУП,1,Метаданные.Документы.СогласованиеОтпуска);
	
	МассивДокументов = Новый Массив;
	Пока Рез.Следующий() Цикл
		МассивДокументов.Добавить(Рез.Получить().Ссылка);
	КонецЦикла;
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Зуп();
	//СтрокаПодключения = "Srvr=""srv-sql02:1641""; Ref=""hrm_test""; Usr=""Обмен""; Pwd=""123321"" ";
	v8COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Зуп() + ".COMConnector");
	
	Попытка
		v8 = v8COMОбъект.Connect(СтрокаПодключения);
	Исключение
		Сообщить("Не удалось подключиться к базе Зарплаты");
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласованиеОтпуска.Ссылка,
	|	СогласованиеОтпуска.ДатаС,
	|	СогласованиеОтпуска.ДатаПо,
	|	СогласованиеОтпуска.ВидОтпуска,
	|	СогласованиеОтпуска.Сотрудник,
	|	СогласованиеОтпуска.Согласован,
	|	СогласованиеОтпуска.Организация,
	|	СогласованиеОтпуска.ФизЛицо,
	|	СогласованиеОтпуска.УинВЗуп,
	|	СогласованиеОтпуска.ФизЛицо.УинВЗуп,
	|	СогласованиеОтпуска.Сотрудник.УинВЗупе,
	|	СогласованиеОтпуска.Организация.ИНН,
	|	СогласованиеОтпуска.Дата,
	|	СогласованиеОтпуска.Комментарий
	|ИЗ
	|	Документ.СогласованиеОтпуска КАК СогласованиеОтпуска
	|ГДЕ
	|	СогласованиеОтпуска.Согласован
	|	И СогласованиеОтпуска.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УИНСогласованияОтпуска = Выборка.Ссылка.УникальныйИдентификатор();
		
		Запросv8 = v8.NewObject("Запрос");
		Запросv8.Текст = 
		"ВЫБРАТЬ
		|	ОтпускаОрганизаций.Ссылка
		|ИЗ
		|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
		|ГДЕ
		|	ОтпускаОрганизаций.УИН_СогласованияОтпуска = &УИН_СогласованияОтпуска";
		
		Запросv8.УстановитьПараметр("УИН_СогласованияОтпуска", Строка(УИНСогласованияОтпуска));
		РезЗапросаv8 = Запросv8.Выполнить();
		Выборкаv8 = РезЗапросаv8.Выбрать();
		Если Выборкаv8.Следующий() Тогда 
			ДокV8 = Выборкаv8.Ссылка.ПолучитьДокумент();
		Иначе 
			ДокV8 =V8.Документы.ОтпускаОрганизаций.СоздатьДокумент();
		КонецЕсли;	
		
		ДокV8.Организация=V8.Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ОрганизацияИНН);
		ДокV8.Дата = V8.ЗначениеИзСтрокиВнутр("{""D"","+Формат(Выборка.Дата,"ДФ=yyyyMMddhhmmss")+"}");
		ДокV8.КраткийСоставДокумента="";  
		ДокV8.Комментарий=Выборка.Комментарий; 
		ДокV8.РаботникиОрганизации.Очистить();	
		
		МД=V8.XMLTypeOf(V8.Справочники.СотрудникиОрганизаций.ПустаяСсылка());
		Сотрудникv8= ?(ЗначениеЗаполнено(Выборка.Сотрудник.УинВЗупе),V8.XMLValue(V8.FromXMLType(МД),Выборка.СотрудникУинВЗупе),МД);
		
		МД=V8.XMLTypeOf(V8.Справочники.ФизическиеЛица.ПустаяСсылка());
		СФизЛицоv8= ?(ЗначениеЗаполнено(Выборка.ФизЛицо.УинВЗуп),V8.XMLValue(V8.FromXMLType(МД),Выборка.ФизЛицоУинВЗуп),МД);
		
		
		НовСтр=ДокV8.РаботникиОрганизации.Добавить();                         
		НовСтр.Сотрудник = Сотрудникv8;
		НовСтр.ФизЛицо = СФизЛицоv8;
		НовСтр.ОсвобождатьСтавку=Ложь;   // Тип:Булево
		НовСтр.ДатаНачала=Выборка.ДатаС;   // Тип:Дата
		НовСтр.ДатаОкончания=Выборка.ДатаПо;   // Тип:Дата
		НовСтр.ПричинаОтсутствия=?(Выборка.ВидОтпуска = Перечисления.ВидОтпуска.Отпуск,V8.Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный,V8.Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);   // Тип:Причины отсутствия на работе
		РезГодОтпуска = V8.ОстаткиОтпусков.РабочийГодПериодаОтпуска(НовСтр.Сотрудник,НовСтр.ДатаНачала,НовСтр.ДатаОкончания,ДокV8.Ссылка,V8.Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Ложь,V8.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
		НовСтр.РабочийГодС= РезГодОтпуска.РабочийГодС;   // Тип:Дата
		НовСтр.РабочийГодПо=РезГодОтпуска.РабочийГодПо;   // Тип:Дата
		//
		НовСтр.КоличествоДней=Цел(1+(Выборка.ДатаПо - Выборка.ДатаС)/86400);   // Тип:Число
		
		Попытка
			ДокV8.Записать(V8.РежимЗаписиДокумента.Запись);
			Сообщить("Выгрузили " +Выборка.Ссылка);
		Исключение
			Сообщить(""+ОписаниеОшибки());
		КонецПопытки;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаЗУП,Выборка.Ссылка);		
	КонецЦикла;
	
	
	
КонецПроцедуры
//--- АК BARA ИП-00016430


Процедура ЗакрытиеЗаймовПоЗаявкам() Экспорт
	ТекстЗапроса="ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Ссылка КАК Заявка,
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Дата,
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Сумма,
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Ссылка.Организация КАК Организация,
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Ссылка.Контрагент КАК Контрагент,
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.НомерСтроки,
	|	ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка,
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Ссылка.СчетУчетаРасчетов,
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Ссылка.ЦФО
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.ПогашениеЗайма КАК ЗаявкаНаУслугиМатериалыПогашениеЗайма
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	|		ПО ЗаявкаНаУслугиМатериалыПогашениеЗайма.Ссылка = ЗаявкаНаУслугиМатериалыОплата.Ссылка
	|			И (ЗаявкаНаУслугиМатериалыОплата.НомерСтроки = 1)
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыПогашениеЗайма.Операция = ЗНАЧЕНИЕ(Документ.КорректировкаВзаиморасчетов.ПустаяСсылка)
	|	И ЗаявкаНаУслугиМатериалыПогашениеЗайма.Дата <= &ТекущаяДата
	|	И ЗаявкаНаУслугиМатериалыПогашениеЗайма.Ссылка.Проведен
	|	И ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка.Проведен
	|	И ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка.Оплачено
	|ИТОГИ ПО
	|	Организация,
	|	Контрагент";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
	ВыборкаПоОрганизациям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		ВыборкаПоКонтрагентам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагентам.Следующий() Цикл
			Док = Документы.КорректировкаВзаиморасчетов.СоздатьДокумент();
			Док.Дата=ТекущаяДата();
			Док.Организация = ВыборкаПоОрганизациям.Организация;
			Док.Контрагент = ВыборкаПоКонтрагентам.Контрагент;
			Док.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.ЗакрытиеЗайма;
			Выборка = ВыборкаПоКонтрагентам.Выбрать();
			Пока Выборка.Следующий() Цикл
				НС = Док.Документы.Добавить();
				НС.Документ = Выборка.РасходИзБанка;
				НС.Сумма = Выборка.Сумма;
				НС.СчетНаСписание = Выборка.СчетУчетаРасчетов;
				НС.ТорговаяТочка = Выборка.ЦФО;
				Док.Записать(РежимЗаписиДокумента.Запись);
				Заявка = Выборка.Заявка.ПолучитьОбъект();
				Заявка.ПогашениеЗайма[Выборка.НомерСтроки-1].Операция = Док.Ссылка;
				Заявка.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;	
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПараметрыЗапроса(СтрокаЗапроса)
	Результат = Новый Структура("СтрокаСоединения,Запрос");
	Путь = Сред(СтрокаЗапроса,Найти(СтрокаЗапроса,"//")+2);
	ПозРазделителя = Найти(Путь,"/");
	Результат.СтрокаСоединения = Лев(Путь,ПозРазделителя-1);
	Результат.Запрос = Сред(Путь,ПозРАзделителя+1);
	Возврат Результат;
КонецФункции

Процедура ОтправитьВидеоНаПочту(СсылкаДляСкачивания,Ответственный=Неопределено,Получатели=Неопределено,Содержание,ДанныеЗаписи) Экспорт
	ДанныеЗапроса = ПараметрыЗапроса(СсылкаДляСкачивания);
	Соединение = Новый HTTPСоединение(ДанныеЗапроса.СтрокаСоединения);
	
	ЗапросHTTP = Новый HTTPЗапрос(ДанныеЗапроса.Запрос);
	
	УдалитьФайлы(КаталогВременныхФайлов(),"*.mp4");
	ПолученныйФайл= ПолучитьИмяВременногоФайла("mp4");
	Соединение.ОтправитьДляОбработки(ЗапросHTTP,ПолученныйФайл);
	ЗапросHTTP = Неопределено;
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Получено видео по запросу";
	//+++AK GREK 05.09.2017 ИП-00015679
	Если ЗначениеЗаполнено(ДанныеЗаписи.Комментарий) Тогда
		Если Лев(ДанныеЗаписи.Комментарий,13) = "Тема письма: "	Тогда
			Письмо.Тема = СтрЗаменить(ДанныеЗаписи.Комментарий, "Тема письма: ", "");	
		КонецЕсли;
	КонецЕсли;
	//---AK
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	Если Не ЗначениеЗаполнено(ДанныеЗаписи.Email)Тогда
		Запрос = Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Адрес
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В (&СписокПолучателей)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя)";
		СписокПолучателей = Новый Массив;
		СписокПолучателей.Добавить(Ответственный);
		Запрос.УстановитьПараметр("СписокПолучателей",СписокПолучателей);
		РезультатЗапроса =Запрос.Выполнить();
		//Если РезультатЗапроса.Пустой() Тогда
		//	Возврат
		//КонецЕсли;
		АдресаПолучателей = РезультатЗапроса.Выбрать();
		Пока АдресаПолучателей.Следующий() Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = СокрЛП(АдресаПолучателей.Адрес);
		КонецЦикла;
		Для Каждого Адрес из Получатели Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = СокрЛП(Адрес);
		КонецЦикла;
	Иначе
		Адреса = ДанныеЗаписи.Email;
		Адреса = СтрЗаменить(Адреса,";",Символы.ПС);
		Адреса = СтрЗаменить(Адреса,",",Символы.ПС);
		Для К = 1 по СтрЧислоСтрок(Адреса)Цикл
			Адрес = СтрПолучитьСтроку(Адреса,К);
			Если Не ПустаяСтрока(Адрес) Тогда
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес = СокрЛП(Адрес);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	//Получатель.Адрес = "no-reply@vkusvill.ru";
	//+++AK GREK 05.09.2017 ИП-00015679
	//Видео файл может быть размером больше 50 мб и не влезть в письмо, в этом случае отправим ссылку
	ПревышенРазмерФайла = Ложь;
	ФайлВидео = Новый Файл(ПолученныйФайл);
	Если ФайлВидео.Существует() Тогда
		Если ФайлВидео.Размер() > 49*1024*1024 Тогда
			ПревышенРазмерФайла = Истина;	
		КонецЕсли;
	КонецЕсли;
	Если ПревышенРазмерФайла Тогда
		ТекстПисьма = "Добрый день."+Содержание+Символы.ПС+Символы.ПС+"Файл видео не может быть прикреплен к письму, т.к. его размер превышает установленное ограничение."+Символы.ПС
		+ "Для просмотра видео, воспользуйтесь внутренней ссылкой (доступна только в подсети компании): " + ДанныеЗаписи.СсылкаДляПросмотра + Символы.ПС + ТекстПисьма;
	Иначе
		ТекстПисьма = "Добрый день."+Содержание+Символы.ПС+"Файл видео в приложении."+Символы.ПС+Символы.ПС + ТекстПисьма;
		Письмо.Вложения.Добавить(ПолученныйФайл);
	КонецЕсли;
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	//AK
	Соединение=Неопределено;
	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;
	Письмо=Неопределено;
	Почта = Неопределено;
	//Попытка
	УдалитьФайлы(ПолученныйФайл);
	//Исключение
	//КонецПопытки;
	Запись = РегистрыСведений.ВидеоПоЗапросу.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись,ДанныеЗаписи);
	Запись.Прочитать();
	Запись.ОтправленоНАПочту=Истина;
	ЗАпись.Записать();
КонецПроцедуры

Процедура ОбновитьДанныеСписковРассылки(Получатель)Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_ГруппыРассылки.Группа,
	|	АК_ГруппыРассылки.ФизЛицо
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.ФизЛицо = &Получатель";
	Запрос.УстановитьПараметр("Получатель",Получатель);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.АК_ГруппыРассылки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,Выборка);
		//Запись.Прочитать();
		Запись.Записать()
	КонецЦикла;
	
КонецПроцедуры

//+++АК SHEP 20170725 ИП-00016158
Процедура РассылкаУведомленийПоИзменениям() Экспорт
	
	ДатаНач = НачалоДня(ТекущаяДата()) - 24*60*60; // начало пред. дня
	ДатаКон = НачалоДня(ТекущаяДата()) - 1; // конец пред. дня
	
	Попытка
		РассылкаУведомленийПоИзменениямПомощникиТУ(ДатаНач, ДатаКон);
	Исключение
		ЗаписьЖурналаРегистрации("РассылкаУведомленийПоИзменениям", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка РассылкаУведомленийПоИзменениямПомощникиТУ(): " + ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		РассылкаУведомленийПоИзменениямПеревозчиковМаршрутов(ДатаНач, ДатаКон);
	Исключение
		ЗаписьЖурналаРегистрации("РассылкаУведомленийПоИзменениям", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка РассылкаУведомленийПоИзменениямПеревозчиковМаршрутов(): " + ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		РассылкаУведомленийПоИзменениямТТвМаршрутах(ДатаНач, ДатаКон);
	Исключение
		ЗаписьЖурналаРегистрации("РассылкаУведомленийПоИзменениям", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка РассылкаУведомленийПоИзменениямТТвМаршрутах(): " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура РассылкаУведомленийПоИзменениямПомощникиТУ(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоответствиеОбъектРоль.Объект,
	|	СоответствиеОбъектРоль.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователяБыло
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРоль
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаНач1, ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО СоответствиеОбъектРоль.Объект = СоответствиеОбъектРольСрезПоследних.Объект
	|ГДЕ
	|	СоответствиеОбъектРоль.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СоответствиеОбъектРоль.ТипРоли = &ТипРоли
	|	И (НЕ СоответствиеОбъектРоль.РольПользователя = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|		ИЛИ СоответствиеОбъектРольСрезПоследних.РольПользователя ЕСТЬ NULL)");
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаНач1", ДатаНач - 1);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ТекстСообщения = "";
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ТекстСообщения = ТекстСообщения + "
		|Структ. ед.: " + ВыборкаЗапроса.Объект + ", изменился помощник ТУ: " + ВыборкаЗапроса.РольПользователя + ", было:" + ВыборкаЗапроса.РольПользователяБыло;
	КонецЦикла;
	
	МассивАдресовДляОтправки = РегистрыСведений.АК_ГруппыРассылки.ПолучитьМассивЭлАдресовПоГруппеРассылки(Справочники.АК_ГруппыРассылки.ИзменениеПомощникаТУвСтруктурнойЕдинице);
	Если МассивАдресовДляОтправки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение("Изменились помощники территориальных управляющих", ТекстСообщения, МассивАдресовДляОтправки, "Изменились помощники ТУ");
	
КонецПроцедуры

Процедура РассылкаУведомленийПоИзменениямПеревозчиковМаршрутов(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияИзмененияРеквизитов.Период КАК Период,
	|	ИсторияИзмененияРеквизитов.Ссылка,
	|	ИсторияИзмененияРеквизитов.ЗначениеБыло,
	|	ИсторияИзмененияРеквизитов.ЗначениеСтало
	|ИЗ
	|	РегистрСведений.ИсторияИзмененияРеквизитов КАК ИсторияИзмененияРеквизитов
	|ГДЕ
	|	ИсторияИзмененияРеквизитов.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИсторияИзмененияРеквизитов.ИмяРеквизита = &ИмяРеквизита
	|	И ИсторияИзмененияРеквизитов.Ссылка ССЫЛКА Справочник.Маршруты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ИмяРеквизита", "Перевозчик");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ТекстСообщения = "";
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ТекстСообщения = ТекстСообщения + "
		|Маршрут: " + ВыборкаЗапроса.Ссылка + ", изменился перевозчик: " + ВыборкаЗапроса.ЗначениеСтало + ", было:" + ВыборкаЗапроса.ЗначениеБыло;
	КонецЦикла;
	
	МассивАдресовДляОтправки = РегистрыСведений.АК_ГруппыРассылки.ПолучитьМассивЭлАдресовПоГруппеРассылки(Справочники.АК_ГруппыРассылки.ИзменениеПеревозчикаМаршрута);
	Если МассивАдресовДляОтправки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ТемаПисьма = "Изменение перевозчиков маршрутов";
	Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение(ТемаПисьма, ТекстСообщения, МассивАдресовДляОтправки, ТемаПисьма);
	
КонецПроцедуры

Процедура РассылкаУведомленийПоИзменениямТТвМаршрутах(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияМаршрутов.ТорговаяТочка,
	|	ИсторияМаршрутов.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ИсторияМаршрутов.Маршрут.Наименование КАК МаршрутНаименование,
	|	ИсторияМаршрутов.Маршрут.ПолноеНаименование КАК МаршрутПолноеНаименование,
	|	ИсторияМаршрутов.Маршрут.Код КАК МаршрутКод,
	|	ИсторияМаршрутов.Маршрут.Перевозчик КАК Перевозчик,
	|	ИсторияМаршрутовСрезПоследних.Маршрут.Наименование КАК МаршрутБылоНаименование,
	|	ИсторияМаршрутовСрезПоследних.Маршрут.ПолноеНаименование КАК МаршрутБылоПолноеНаименование,
	|	ИсторияМаршрутовСрезПоследних.Маршрут.Код КАК МаршрутБылоКод,
	|	ИсторияМаршрутовСрезПоследних.Маршрут.Перевозчик КАК ПеревозчикБыло
	|ИЗ
	|	РегистрСведений.ИсторияМаршрутов КАК ИсторияМаршрутов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМаршрутов.СрезПоследних(&ДатаНач1, ) КАК ИсторияМаршрутовСрезПоследних
	|		ПО ИсторияМаршрутов.ТорговаяТочка = ИсторияМаршрутовСрезПоследних.ТорговаяТочка
	|ГДЕ
	|	ИсторияМаршрутов.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И (НЕ ИсторияМаршрутов.Маршрут.Перевозчик = ИсторияМаршрутовСрезПоследних.Маршрут.Перевозчик
	|			ИЛИ ИсторияМаршрутовСрезПоследних.ТорговаяТочка ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТочки");
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаНач1", ДатаНач - 1);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ТЗнРезультат = РезультатЗапроса.Выгрузить();
	ТЗнРезультат.Колонки.Добавить("Маршрут");
	ТЗнРезультат.Колонки.Добавить("МаршрутБыло");
	Для Каждого СтрокаТЗн Из ТЗнРезультат Цикл
		СтрокаТЗн.Маршрут = "" + СтрокаТЗн.МаршрутКод + " / " + СтрокаТЗн.МаршрутНаименование + " / " + СтрокаТЗн.МаршрутПолноеНаименование;
		СтрокаТЗн.МаршрутБыло = "" + СтрокаТЗн.МаршрутБылоКод + " / " + СтрокаТЗн.МаршрутБылоНаименование + " / " + СтрокаТЗн.МаршрутБылоПолноеНаименование;
	КонецЦикла;
	
	СтруктураПолей = Новый Структура("ТорговаяТочка,Перевозчик,ПеревозчикБыло,Маршрут,МаршрутБыло",
	"Торговая точка", "Перевозчик", "Перевозчик было", "Маршрут (код/наим/полн.наим)", "Маршрут было (код/наим/полн.наим)");
	
	ТекстХТМЛ = "<HTML>
	|<HEAD>
	|<META HTTP-EQUIV='Content-Type' CONTENT='text/html; CHARSET=utf-8'>
	|<TITLE></TITLE></HEAD><BODY>
	|";
	
	// данные
	ТекстХТМЛ = ТекстХТМЛ + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаЗаголовок(СтруктураПолей);
	ТекстХТМЛ = ТекстХТМЛ + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаТело(СтруктураПолей, ТЗнРезультат);
	ТелоПисьма = ТекстХТМЛ + "</BODY></HTML>";
	
	МассивАдресовДляОтправки = РегистрыСведений.АК_ГруппыРассылки.ПолучитьМассивЭлАдресовПоГруппеРассылки(Справочники.АК_ГруппыРассылки.ИзменениеПеревозчикаМаршрута);
	Если МассивАдресовДляОтправки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ТемаПисьма = "Изменение ТТ в маршрутах";
	Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение(ТемаПисьма, ТелоПисьма, МассивАдресовДляОтправки, ТемаПисьма);
	
КонецПроцедуры
//---АК SHEP 20170725


//++ АК LUZA 20170731 ИП-00016332
Процедура АК_РаспознованиеФайлов() Экспорт
	Справочники.АК_АлгоритмыРаспознаванияФайлов.АК_РаспознованиеФайлов();	
КонецПроцедуры

Процедура АК_СравнениеФайловСЗаявками() Экспорт	
	Справочники.АК_АлгоритмыРаспознаванияФайлов.АК_СравнениеФайловСЗаявками();	
КонецПроцедуры

Процедура АК_ПоискДублейСчетовВЗАявках() Экспорт
	Справочники.АК_АлгоритмыРаспознаванияФайлов.АК_ПоискДублейСчетовВЗаявках();	
КонецПроцедуры

Процедура АК_РаспознаваниеФайловЧерезGoogleVision() Экспорт
	Справочники.АК_АлгоритмыРаспознаванияФайлов.АК_РаспознованиеФайловGoogleVision();
КонецПроцедуры

//-- АК LUZA 20170731 ИП-00016332

//+++AK susk

//ИП-00016511
Процедура ПроверкаРегистрацияНаОБменДокументовПоРасхождениямОС() Экспорт
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
	
	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
	
	Попытка
		v82 = v82COMОбъект.Connect(СтрокаПодключения);
		ПодключениеУстановлено=Истина;
	Исключение
		ПодключениеУстановлено=Ложь;
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось подключиться к базе бухгалтерии!");
		Возврат;
	КонецПопытки;
	
	ВЭ_ТН = Истина;
	ПТУ = Истина;
	ДР = Истина;
	ВЭ_ПУ = Истина;
	Авансовые = Истина;
	Прочее = Истина;	
	
	//
	ДанныеБух = Новый ТаблицаЗначений;
	ДанныеБух.Колонки.Добавить("Счет", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеБух.Колонки.Добавить("НомерПоиска");	
	ДанныеБух.Колонки.Добавить("Документ");
	ДанныеБух.Колонки.Добавить("ДатаПоиска");
	ДанныеБух.Колонки.Добавить("Номенклатура");
	ДанныеБух.Колонки.Добавить("id_tov");
	ДанныеБух.Колонки.Добавить("Комментарий");
	ДанныеБух.Колонки.Добавить("Организация");
	ДанныеБух.Колонки.Добавить("ОрганизацияИНН");
	ДанныеБух.Колонки.Добавить("Сумма");
	ДанныеБух.Колонки.Добавить("ГУИД");
	ДанныеБух.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	ДанныеБух.Колонки.Добавить("ИнвентарныйНомер");
	ДанныеБух.Колонки.Добавить("ЗаводскойНомер");
	ДанныеБух.Колонки.Добавить("Раздел");
	ДанныеБух.Колонки.Добавить("СчетДТ");
	ДанныеБух.Колонки.Добавить("СчетКТ");
	ДанныеБух.Колонки.Добавить("ГуидОС");  	
	
	//
	ТаблицаФинансы = Новый ТаблицаЗначений;
	ТаблицаФинансы.Колонки.Добавить("Док");
	ТаблицаФинансы.Колонки.Добавить("Сумма");
	ТаблицаФинансы.Колонки.Добавить("СуммаБух");
	ТаблицаФинансы.Колонки.Добавить("Счет");
	ТаблицаФинансы.Колонки.Добавить("ГУИД");
	ТаблицаФинансы.Колонки.Добавить("Номенклатура");
	ТаблицаФинансы.Колонки.Добавить("id_tov");
	ТаблицаФинансы.Колонки.Добавить("ОС");
	ТаблицаФинансы.Колонки.Добавить("ДатаПоиска");
	ТаблицаФинансы.Колонки.Добавить("НомерПоиска");
	ТаблицаФинансы.Колонки.Добавить("НоменклатураСтрокой");
	ТаблицаФинансы.Колонки.Добавить("Раздел");
	ТаблицаФинансы.Колонки.Добавить("СчетДТ");
	ТаблицаФинансы.Колонки.Добавить("СчетКТ");
	ТаблицаФинансы.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	
	//
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить("Раздел");
	СводнаяТаблица.Колонки.Добавить("ДокументБух");
	СводнаяТаблица.Колонки.Добавить("ДокументФин");
	СводнаяТаблица.Колонки.Добавить("СуммаБух");
	СводнаяТаблица.Колонки.Добавить("СуммаФин");	
	СводнаяТаблица.Колонки.Добавить("НоменклатураБух");
	СводнаяТаблица.Колонки.Добавить("НоменклатураФин");
	СводнаяТаблица.Колонки.Добавить("СчетДТФин");
	СводнаяТаблица.Колонки.Добавить("СчетКТФин");
	СводнаяТаблица.Колонки.Добавить("СчетДТБух");
	СводнаяТаблица.Колонки.Добавить("СчетКТБух");
	
	ДатыЗапрета = ПолучитьДатыЗапретаБухгалтерииДляПользователяНеопределено(v82);
	
	Запрос=v82.NewObject("Запрос");	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1)));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДата()));
	
	ЗапросДанныеФинансов = Новый Запрос;	
	ЗапросДанныеФинансов.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1)));
	ЗапросДанныеФинансов.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДата()));
	
	Если ВЭ_ТН Тогда
		
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор) КАК Документ,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументСсылка,
		|	ХозрасчетныйОбороты.Регистратор.Дата КАК ДатаПоиска,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоДт1) КАК Номенклатура,
		|	ХозрасчетныйОбороты.СубконтоДт1.ИД КАК id_tov,
		|	ХозрасчетныйОбороты.Регистратор.Комментарий КАК Комментарий,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		|	ХозрасчетныйОбороты.Организация.ИНН,
		|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
		|	ХозрасчетныйОбороты.СчетДт.Код КАК СчетДт,
		|	ХозрасчетныйОбороты.СчетКт.Код КАК СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&СписокСчетов), , , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
		
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор),
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоКт1),
		|	ХозрасчетныйОбороты.СубконтоКт1.ИД,
		|	ХозрасчетныйОбороты.Регистратор.Комментарий,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация),
		|	ХозрасчетныйОбороты.Организация.ИНН,
		|	ХозрасчетныйОбороты.СуммаОборот,
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.СчетКт.Код
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&СписокСчетов), , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная";
		
		Запрос.Текст=ТекстЗапроса;	
		
		МассивСчетов=v82.NewObject("Массив");		
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
		
		Запрос.УстановитьПараметр("СписокСчетов", МассивСчетов);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НС=ДанныеБух.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);			
			НС.ДатаПоиска =НачалоДня(НС.ДатаПоиска);
			НС.Раздел = "ВЭ_ТН";
			НС.ГУИД = v82.XMLСтрока(Выборка.ДокументСсылка);
		КонецЦикла;		
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.Инвентарь);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);	
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);	
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000);	
		
		ЗапросДанныеФинансов.УстановитьПараметр("Счета", МассивСчетов);	
		
		ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФинансовыйОбороты.Регистратор КАК Док,
		|	СУММА(ФинансовыйОбороты.СуммаОборот) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ КАК id_tov,
		|	""ВЭ_ТН"" КАК Раздел,
		|	ФинансовыйОбороты.СчетДт КАК СчетДт,
		|	ФинансовыйОбороты.СчетКт КАК СчетКт,
		|	ФинансовыйОбороты.Регистратор.Дата,
		|	ФинансовыйОбороты.Регистратор.Номер,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.Регистратор.Дата < ДАТАВРЕМЯ(2017, 4, 1)
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	КОНЕЦ КАК Ос
		|ПОМЕСТИТЬ Сводная
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&Счета), , , , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	(ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ВводВЭксплуатацию
		|			ИЛИ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная)
		|	И ВЫБОР
		|			КОГДА ФинансовыйОбороты.СчетДт.Код = ""08.4"" ИЛИ ФинансовыйОбороты.СчетДт.Код = ""08.10""
		|				ТОГДА ФинансовыйОбороты.СчетКт.Код = ""01.10""
		|						ИЛИ ФинансовыйОбороты.СчетКт.Код = ""10.09""
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт,
		|	ФинансовыйОбороты.Регистратор.Дата,
		|	ФинансовыйОбороты.Регистратор.Номер,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.Регистратор.Дата < ДАТАВРЕМЯ(2017, 4, 1)
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФинансовыйОбороты.Регистратор,
		|	СУММА(ФинансовыйОбороты.СуммаОборот),
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	""ВЭ_ТН"",
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт,
		|	ФинансовыйОбороты.Регистратор.Дата,
		|	ФинансовыйОбороты.Регистратор.Номер,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.Регистратор.Дата < ДАТАВРЕМЯ(2017, 4, 1)
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	КОНЕЦ
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&Счета), , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	(ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ВводВЭксплуатацию
		|			ИЛИ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная)
		|	И ВЫБОР
		|			КОГДА ФинансовыйОбороты.СчетДт.Код = ""01.1""
		|				ТОГДА ФинансовыйОбороты.СчетКт.Код = ""10.9""
		|						ИЛИ ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетКт,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.Регистратор.Дата,
		|	ФинансовыйОбороты.Регистратор.Номер,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.Регистратор.Дата < ДАТАВРЕМЯ(2017, 4, 1)
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сводная.Док КАК Док,
		|	Сводная.Сумма,
		|	Сводная.Номенклатура,
		|	Сводная.id_tov КАК id_tov,
		|	Сводная.Раздел,
		|	Сводная.СчетДт,
		|	Сводная.СчетКт,
		|	Сводная.РегистраторДата КАК РегистраторДата,
		|	Сводная.РегистраторНомер КАК РегистраторНомер,
		|	Сводная.Ос
		|ИЗ
		|	Сводная КАК Сводная
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистраторДата,
		|	РегистраторНомер,
		|	Док,
		|	id_tov
		|АВТОУПОРЯДОЧИВАНИЕ"; 	
		
		Табл = ЗапросДанныеФинансов.Выполнить().Выгрузить();
		
		Для Каждого Стр Из Табл Цикл
			НовСтр = ТаблицаФинансы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		
		Для Каждого Стр Из ТаблицаФинансы Цикл
			Стр.ГУИД = Стр.Док.УникальныйИдентификатор();
		КонецЦикла;
		
		// сопоставляем
		Для Каждого Стр Из ТаблицаФинансы Цикл
			
			Попытка
				Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Стр.Док) Тогда
					Продолжить;
				КонецЕсли;				
			Исключение
			КонецПопытки;
			
			Если ТипЗнч(Стр.Док) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
				
				НСтрокиТОвары = Неопределено;
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Раздел", "ВЭ_ТН");
				СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);					
				
				НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() <> 0 Тогда
					
					// теперь ищем в разрезе товаров				
					СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
					СтруктураПоиска.Вставить("Обработан", Ложь);
					
					НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура.Наименование));
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;						
					
				КонецЕсли;
				
				Если НайдСтроки.Количество() = 0 Тогда
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Требование накладная";
					НОвСтр.ДокументФин = Стр.Док;
					НовСтр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН";
					НовСтр.СуммаФин = Стр.Сумма;
					НовСтр.СуммаБух = 0;
					НовСтр.НоменклатураФин = Стр.Номенклатура;
					НовСтр.НоменклатураБух = "<---->";
					//
					НовСтр.СчетДТФин = Стр.СчетДТ;
					НовСтр.СчетКТФин = Стр.СчетКТ;
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					Продолжить;
					
				Иначе
					
					Если НСтрокиТОвары = Неопределено ИЛИ НСтрокиТовары.Количество() = 0 Тогда
						НовСтр = СводнаяТаблица.Добавить();
						НовСтр.Раздел = "Требование накладная";
						НОвСтр.ДокументФин = Стр.Док;
						НовСтр.ДокументБух = НайдСтроки[0].Документ;
						НовСтр.СуммаФин = Стр.Сумма;
						НовСтр.СуммаБух = 0;
						НовСтр.НоменклатураФин = Стр.Номенклатура;
						НовСтр.НоменклатураБух = "<---->";
						//
						НовСтр.СчетДТФин = Стр.СчетДТ;
						НовСтр.СчетКТФин = Стр.СчетКТ;
						НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
						НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
						Продолжить;
					КонецЕсли;
					
					Для Каждого НСтр Из НСтрокиТовары Цикл
						
						НовСтр = СводнаяТаблица.Добавить();
						НовСтр.Раздел = "Требование накладная";
						НОвСтр.ДокументФин = Стр.Док;
						НовСтр.ДокументБух = НСтр.Документ;
						НовСтр.СуммаФин = Стр.Сумма;
						НовСтр.СуммаБух = НСтр.Сумма;
						НовСтр.НоменклатураФин = Стр.Номенклатура;
						НовСтр.НоменклатураБух = НСтр.Номенклатура;
						//
						НовСтр.СчетДТФин = Стр.СчетДТ;
						НовСтр.СчетКТФин = Стр.СчетКТ;
						НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетДт);
						НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетКт);
						
						НСтр.Обработан = Истина;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе				
				
				ДатаПоиска = НачалоДня(Стр.Док.Дата);
				ОрганизацияПоискаИНН = Стр.Док.Организация.ИНН;
				
				Если Стр.Док.Дата < Дата(2017, 4, 1) Тогда
					
					НоменклатураИД = Стр.id_tov;
					Номенклатура = Стр.Номенклатура.Наименование;
					КомментарийПоиска = "Загружен из Финансов: " + Стр.ОС + " с инв. номером " + Стр.ОС.ИнвентарныйНомер;
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ДатаПоиска", ДатаПоиска);
					СтруктураПоиска.Вставить("ОрганизацияИНН", ОрганизацияПоискаИНН);
					СтруктураПоиска.Вставить("id_tov", НоменклатураИД);					
					СтруктураПоиска.Вставить("Комментарий", КомментарийПоиска);
					СтруктураПоиска.Вставить("Раздел", "ВЭ_ТН");
					СтруктураПоиска.Вставить("Обработан", Ложь);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Если НайдСтроки.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("Номенклатура", Номенклатура);						
						НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					КонецЕсли;
					
					Если НайдСтроки.Количество() <> 0 Тогда						
						
						Для Каждого НСтр Из НайдСтроки Цикл
							НовСтр = СводнаяТаблица.Добавить();
							НовСтр.Раздел = "Требование накладная";
							НОвСтр.ДокументФин = Стр.Док;
							НовСтр.ДокументБух = НСтр.Документ;
							НовСтр.СуммаФин = Стр.Сумма;
							НовСтр.СуммаБух = НСтр.Сумма;
							НовСтр.НоменклатураФин = Стр.Номенклатура;
							НовСтр.НоменклатураБух = НСтр.Номенклатура;
							//
							НовСтр.СчетДТФин = Стр.СчетДТ;
							НовСтр.СчетКТФин = Стр.СчетКТ;
							НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетДт);
							НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетКт);
							НСтр.Обработан = Истина;							
							
						КонецЦикла;
						
					Иначе
						
						НовСтр = СводнаяТаблица.Добавить();
						НовСтр.Раздел = "Требование накладная";
						НОвСтр.ДокументФин = Стр.Док;
						НовСтр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН";
						НовСтр.СуммаФин = Стр.Сумма;
						НовСтр.СуммаБух = 0;
						НовСтр.НоменклатураФин = Стр.Номенклатура;
						НовСтр.НоменклатураБух = "<---->";
						//
						НовСтр.СчетДТФин = Стр.СчетДТ;
						НовСтр.СчетКТФин = Стр.СчетКТ;
						НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
						НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
						
					КонецЕсли;		
					
				Иначе
					
					НоменклатураИД = Стр.id_tov;
					Номенклатура = Стр.Номенклатура.Наименование;
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ДатаПоиска", ДатаПоиска);
					СтруктураПоиска.Вставить("ОрганизацияИНН", ОрганизацияПоискаИНН);
					СтруктураПоиска.Вставить("Комментарий", "Загружен из Финансов: Ввод в эксплуатацию №" + Стр.Док.Номер);
					СтруктураПоиска.Вставить("Раздел", "ВЭ_ТН");					
					СтруктураПоиска.Вставить("id_tov", НоменклатураИД);
					СтруктураПоиска.Вставить("Обработан", Ложь);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Если НайдСтроки.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("Номенклатура", Номенклатура);						
						НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					КонецЕсли;
					
					ПолученоИзОбработанных = Ложь;
					
					Если НайдСтроки.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("Обработан");
						СтруктураПоиска.Вставить("id_tov", НоменклатураИД);
						СтруктураПоиска.Удалить("Номенклатура");
						
						НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
						Если НайдСтроки.Количество() = 0 Тогда
							СтруктураПоиска.Удалить("id_tov");
							СтруктураПоиска.Вставить("Номенклатура", Номенклатура);						
							НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						КонецЕсли;
						
						ПолученоИзОбработанных = Истина;
					КонецЕсли;
					
					Если НайдСтроки.Количество() <> 0 Тогда
						
						Для Каждого НСтр Из НайдСтроки Цикл
							НовСтр = СводнаяТаблица.Добавить();
							НовСтр.Раздел = "Требование накладная";
							НОвСтр.ДокументФин = Стр.Док;
							НовСтр.ДокументБух = НСтр.Документ;
							НовСтр.СуммаФин = Стр.Сумма;
							НовСтр.СуммаБух = ?(ПолученоИзОбработанных, 0, Нстр.Сумма);
							НовСтр.НоменклатураФин = Стр.Номенклатура;
							НовСтр.НоменклатураБух = НСтр.Номенклатура;
							//
							НовСтр.СчетДТФин = Стр.СчетДТ;
							НовСтр.СчетКТФин = Стр.СчетКТ;
							НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетДт);
							НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетКт);
							
							НСтр.Обработан = Истина;							
						КонецЦикла;
						
					Иначе
						
						НовСтр = СводнаяТаблица.Добавить();
						НовСтр.Раздел = "Требование накладная";
						НОвСтр.ДокументФин = Стр.Док;
						НовСтр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН";
						НовСтр.СуммаФин = Стр.Сумма;
						НовСтр.СуммаБух = 0;
						НовСтр.НоменклатураФин = Стр.Номенклатура;
						НовСтр.НоменклатураБух = "<---->";
						//
						НовСтр.СчетДТФин = Стр.СчетДТ;
						НовСтр.СчетКТФин = Стр.СчетКТ;
						НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
						НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Стр.Обработан = Истина;
			
		КонецЦикла;		
		
		Для Каждого Стр Из ДанныеБух Цикл
			
			Если Стр.Обработан Тогда
				Продолжить;
			КонецЕсли;
			
			НСтрокиТОвары = Неопределено;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Раздел", "ВЭ_ТН");					
			СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);					
			
			НайдСтроки = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда
				
				// теперь ищем в разрезе товаров				
				СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
				СтруктураПоиска.Вставить("Обработан", Ложь);
				
				НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
				
				Если НСтрокиТовары.Количество() = 0 Тогда
					СтруктураПоиска.Удалить("id_tov");
					СтруктураПоиска.Вставить("НоменклатураСтрокой", СокрЛП(Стр.Номенклатура));
					
					НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;				
				
			КонецЕсли;
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Требование накладная";
				НОвСтр.ДокументФин = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.ДокументБух = Стр.Документ;
				НовСтр.СуммаФин = 0;
				НовСтр.СуммаБух = Стр.Сумма;
				НовСтр.НоменклатураФин = "<---->";
				НовСтр.НоменклатураБух = Стр.Номенклатура;
				//
				НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДТ);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКТ);
				
				Продолжить;
				
			Иначе			
				
				Если НСтрокиТОвары = Неопределено ИЛИ НСтрокиТовары.Количество() = 0 Тогда
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Требование накладная";
					НОвСтр.ДокументФин = НайдСтроки[0].Док;
					НовСтр.ДокументБух = Стр.Документ;
					НовСтр.СуммаФин = 0;
					НовСтр.СуммаБух = Стр.Сумма;
					НовСтр.НоменклатураФин = "<---->";
					НовСтр.НоменклатураБух = Стр.Номенклатура;
					//
					НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
					НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДТ);
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКТ);
					
					Продолжить;
				КонецЕсли;
				
				Для Каждого НСтр Из НСтрокиТовары Цикл
					
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Требование накладная";
					НОвСтр.ДокументФин = НСтр.Док;
					НовСтр.ДокументБух = Стр.Документ;
					НовСтр.СуммаФин = НСтр.Сумма;
					НовСтр.СуммаБух = Стр.Сумма;
					НовСтр.НоменклатураФин = НСтр.Номенклатура;
					НовСтр.НоменклатураБух = Стр.Номенклатура;	
					//
					НовСтр.СчетДТФин = НСтр.СчетДт;
					НовСтр.СчетКТФин = НСтр.СчетКт;
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДТ);
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКДТ);
					
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВЭ_ПУ Тогда
		
		ДанныеБух.Очистить();
		ТаблицаФинансы.Очистить();
		
		ТекстЗапроса="ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет.Код КАК СчетДт,
		|	ХозрасчетныйОбороты.КорСчет.Код КАК СчетКт,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор) КАК Документ,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументСсылка,
		|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Регистратор.Дата, ДЕНЬ) КАК ДатаПоиска,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1) КАК Номенклатура,
		|	ПринятиеКУчетуОСОсновныеСредства.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатураСсылка,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		|	ХозрасчетныйОбороты.Организация.ИНН,
		|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
		|	ХозрасчетныйОбороты.Субконто1.ЗаводскойНомер КАК ЗаводскойНомер
		|ИЗ					
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, , , , КорСчет = &Счет0804, ) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
		|		ПО ХозрасчетныйОбороты.Регистратор = ПринятиеКУчетуОСОсновныеСредства.Ссылка
		|			И ХозрасчетныйОбороты.Субконто1 = ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС";
		
		Запрос.Текст=ТекстЗапроса;	
		Запрос.УстановитьПараметр("Счет0101", v82.ПланыСчетов.Хозрасчетный.ОСвОрганизации);
		Запрос.УстановитьПараметр("Счет0804", v82.ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НС=ДанныеБух.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			НС.Номенклатура = СокрЛП(НС.Номенклатура);
			НС.Гуид = v82.XMLСтрока(Выборка.НоменклатураСсылка);
			НС.Раздел = "ВЭ_ПУ";			
		КонецЦикла;		
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);	
		
		ЗапросДанныеФинансов.УстановитьПараметр("Счета", МассивСчетов);	
		
		ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ
		|	ФинансовыйОбороты.СчетДт КАК СчетДт,
		|	ФинансовыйОбороты.СчетКт КАК СчетКт,
		|	ФинансовыйОбороты.Регистратор КАК Док,
		|	СУММА(ФинансовыйОбороты.СуммаОборот) КАК Сумма,
		|	ФинансовыйОбороты.СубконтоДт1 КАК ОС,
		|	""ВЭ_ПУ"" КАК Раздел
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&Счета), , , , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ВводВЭксплуатацию
		|	И ВЫБОР
		|			КОГДА ФинансовыйОбороты.СчетДт.Код = ""08.4""
		|				ТОГДА ФинансовыйОбороты.СчетКт.Код <> ""01.10""
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ФинансовыйОбороты.СубконтоДт1,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт,
		|	ФинансовыйОбороты.Регистратор,
		|	СУММА(ФинансовыйОбороты.СуммаОборот),
		|	ФинансовыйОбороты.СубконтоКт1,
		|	""ВЭ_ПУ""
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&Счета), , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ВводВЭксплуатацию
		|	И ВЫБОР
		|			КОГДА ФинансовыйОбороты.СчетКт.Код = ""08.4""
		|				ТОГДА ФинансовыйОбороты.СчетДт.Код <> ""01.10"" И  ФинансовыйОбороты.СчетДт.Код <> ""44.3""
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ФинансовыйОбороты.СубконтоКт1,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт"; 	
		
		Табл = ЗапросДанныеФинансов.Выполнить().Выгрузить();
		
		Для Каждого Стр Из Табл Цикл
			НовСтр = ТаблицаФинансы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		
		// муторно сопоставляем
		Для Каждого Стр Из ТаблицаФинансы Цикл
			
			Попытка
				Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Стр.Док) Тогда
					Продолжить;
				КонецЕсли;				
			Исключение
			КонецПопытки;
			
			ДатаПоиска = НачалоДня(Стр.Док.Дата);
			ОрганизацияПоискаИНН = Стр.Док.Организация.ИНН;
			
			ГуидПоиска1 = Стр.ОС.АК_ID_Buh;
			ГуидПоиска2 = Стр.ОС.УникальныйИдентификатор();
			
			ЗаводскойНомер = Стр.ОС.ЗаводскойНомер;
			НаименованиеОС = СокрЛП(Стр.ОС.Наименование);
			ИНвНомер = СокрЛП(Стр.ОС.ИнвентарныйНомер);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Раздел", "ВЭ_ПУ");
			СтруктураПоиска.Вставить("ДатаПоиска", ДатаПоиска);
			СтруктураПоиска.Вставить("ОрганизацияИНН", ОрганизацияПоискаИНН);
			СтруктураПоиска.Вставить("ИнвентарныйНомер", ИНвНомер);
			
			//1
			СтруктураПоиска.Вставить("ГУИД", ГуидПоиска1);
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
			
			//2
			Если НайдСтроки.Количество() = 0 Тогда
				СтруктураПоиска.Вставить("ГУИД", ГуидПоиска2);
				
				НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
			КонецЕсли;
			
			//3
			Если НайдСтроки.Количество() = 0 Тогда
				СтруктураПоиска.Удалить("ГУИД");
				СтруктураПоиска.Вставить("ЗаводскойНомер", ЗаводскойНомер);
				СтруктураПоиска.Вставить("Номенклатура", НаименованиеОС);
				
				НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
			КонецЕсли;
			
			//4 последний самый стремный вариант, т.к. инвентарные номера обрезаны
			Если НайдСтроки.Количество() = 0 Тогда
				
				СтруктураПоиска = Новый Структура;				
				СтруктураПоиска.Вставить("Раздел", "ВЭ_ПУ");
				СтруктураПоиска.Вставить("ДатаПоиска", ДатаПоиска);
				СтруктураПоиска.Вставить("ОрганизацияИНН", ОрганизацияПоискаИНН);
				СтруктураПоиска.Вставить("ИнвентарныйНомер", Лев(ИНвНомер, СтрДлина(ИНвНомер) - 1));
				
				//1.1
				СтруктураПоиска.Вставить("ГУИД", ГуидПоиска1);
				
				НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
				//2.1
				Если НайдСтроки.Количество() = 0 Тогда
					СтруктураПоиска.Вставить("ГУИД", ГуидПоиска2);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;
				
				//3.1
				Если НайдСтроки.Количество() = 0 Тогда
					СтруктураПоиска.Удалить("ГУИД");
					СтруктураПоиска.Вставить("ЗаводскойНомер", ЗаводскойНомер);
					СтруктураПоиска.Вставить("Номенклатура", НаименованиеОС);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;
				
				//+++
				//3+ просто по наименованию, че делать
				Если НайдСтроки.Количество() = 0 Тогда
					СтруктураПоиска = Новый Структура;				
					СтруктураПоиска.Вставить("Раздел", "ВЭ_ПУ");
					СтруктураПоиска.Вставить("ДатаПоиска", ДатаПоиска);
					СтруктураПоиска.Вставить("ОрганизацияИНН", ОрганизацияПоискаИНН);
					СтруктураПоиска.Вставить("ИнвентарныйНомер", ИНвНомер);
					СтруктураПоиска.Вставить("Номенклатура", НаименованиеОС);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;
				
				Если НайдСтроки.Количество() = 0 Тогда
					
					СтруктураПоиска = Новый Структура;				
					СтруктураПоиска.Вставить("Раздел", "ВЭ_ПУ");
					СтруктураПоиска.Вставить("ДатаПоиска", ДатаПоиска);
					СтруктураПоиска.Вставить("ОрганизацияИНН", ОрганизацияПоискаИНН);
					СтруктураПоиска.Вставить("ИнвентарныйНомер", Лев(ИНвНомер, СтрДлина(ИНвНомер) - 1));
					СтруктураПоиска.Вставить("Номенклатура", НаименованиеОС);
					
					НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;
				//+++
				
			КонецЕсли;
			
			Если НайдСтроки.Количество() <> 0 Тогда						
				
				Для Каждого НСтр Из НайдСтроки Цикл
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Ввод в эксплуатацию -> Принятие к учету";
					НОвСтр.ДокументФин = Стр.Док;
					НовСтр.ДокументБух = НСтр.Документ;
					НовСтр.СуммаФин = Стр.Сумма;
					НовСтр.СуммаБух = НСтр.Сумма;
					НовСтр.НоменклатураФин = Стр.ОС;
					НовСтр.НоменклатураБух = НСтр.Номенклатура;
					//
					НовСтр.СчетДТФин = Стр.СчетДТ;
					НовСтр.СчетКТФин = Стр.СчетКТ;
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетДт);
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетКт);				
					
					НСтр.Обработан = Истина;							
					
				КонецЦикла;
				
			Иначе
				
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Ввод в эксплуатацию -> Принятие к учету";
				НОвСтр.ДокументФин = Стр.Док;
				НовСтр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = 0;
				НовСтр.НоменклатураФин = Стр.ОС;
				НовСтр.НоменклатураБух = "<---->";
				//
				НовСтр.СчетДТФин = Стр.СчетДТ;
				НовСтр.СчетКТФин = Стр.СчетКТ;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Для Каждого Стр Из ДанныеБух Цикл
			
			Если НЕ Стр.Обработан Тогда
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Ввод в эксплуатацию -> Принятие к учету";
				НОвСтр.ДокументФин = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.ДокументБух = Стр.Документ;
				НовСтр.СуммаФин = 0;
				НовСтр.СуммаБух = Стр.Сумма;
				НовСтр.НоменклатураФин = "<---->";
				НовСтр.НоменклатураБух = Стр.Номенклатура;
				//
				НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ПТУ Тогда		
		
		ДанныеБух.Очистить();
		ТаблицаФинансы.Очистить();
		
		ТекстЗапроса="ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор) КАК Документ,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументСсылка,
		|	ХозрасчетныйОбороты.Регистратор.Дата КАК ДатаПоиска,
		|	ХозрасчетныйОбороты.Регистратор.Номер КАК НомерПоиска,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК Сумма,
		|	ХозрасчетныйОбороты.СубконтоДт1 КАК НоменклатураСсылка,
		|	ХозрасчетныйОбороты.СубконтоДт1.ИД КАК id_tov,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоДт1) КАК Номенклатура,
		|	ХозрасчетныйОбороты.СчетДт.Код КАК СчетДт,
		|	ХозрасчетныйОбороты.СчетКт.Код КАК СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&СписокСчетов), , , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.СубконтоДт1,
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.СчетКт.Код,
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	ХозрасчетныйОбороты.СубконтоДт1.ИД,
		|	ХозрасчетныйОбороты.СчетДт,
		|	ХозрасчетныйОбороты.СчетКт
		
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор),
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборот),
		|	ХозрасчетныйОбороты.СубконтоКт1,
		|	ХозрасчетныйОбороты.СубконтоКт1.ИД,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоКт1),
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.СчетКт.Код
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&СписокСчетов), , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.СубконтоКт1,
		|	ХозрасчетныйОбороты.СчетКт.Код,
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.СубконтоКт1.ИД,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	ХозрасчетныйОбороты.СчетДт,
		|	ХозрасчетныйОбороты.СчетКт
		
		|УПОРЯДОЧИТЬ ПО
		|	СчетДт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст=ТекстЗапроса;
		
		МассивСчетов=v82.NewObject("Массив");
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);		
		//
		Запрос.УстановитьПараметр("СписокСчетов", МассивСчетов);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НС=ДанныеБух.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			НС.НомерПоиска = СокрЛП(НС.НомерПоиска);					
			НС.ГУИД = v82.XMLСтрока(Выборка.ДокументСсылка); 
			НС.Раздел = "ПТУ";
		КонецЦикла;			
		
		МассивСчетов = Новый Массив;	
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);		
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.Инвентарь);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);	
		
		ЗапросДанныеФинансов.УстановитьПараметр("Счета", МассивСчетов);
		
		ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт,
		|	ФинансовыйОбороты.Регистратор КАК Док,
		|	СУММА(ФинансовыйОбороты.СуммаОборот) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ КАК id_tov
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&Счета), , , , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт,
		|	ФинансовыйОбороты.Регистратор,
		|	СУММА(ФинансовыйОбороты.СуммаОборот),
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&Счета), , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФинансовыйОбороты.СчетДт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Табл = ЗапросДанныеФинансов.Выполнить().Выгрузить();
		
		Для Каждого Стр Из Табл Цикл
			НовСтр = ТаблицаФинансы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		
		Для Каждого Стр Из ТаблицаФинансы Цикл
			Стр.ГУИД = Стр.Док.УникальныйИдентификатор();		
			Стр.ДатаПоиска = Стр.Док.Дата;
			Стр.НомерПоиска = СокрЛП(Стр.Док.Номер);
			Стр.НоменклатураСтрокой = СокрЛП(Стр.Номенклатура.Наименование);
			Стр.Раздел = "ПТУ";
		КонецЦикла;
		
		// сопоставляем
		Для Каждого Стр Из ТаблицаФинансы Цикл
			
			Попытка
				Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Стр.Док) Тогда
					Продолжить;
				КонецЕсли;				
			Исключение
			КонецПопытки;
			
			НСтрокиТОвары = Неопределено;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Раздел", "ПТУ");
			СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);		
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда
				
				// теперь ищем в разрезе товаров				
				СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
				СтруктураПоиска.Вставить("Обработан", Ложь);
				
				НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
				Если НСтрокиТовары.Количество() = 0 Тогда
					СтруктураПоиска.Удалить("id_tov");
					СтруктураПоиска.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура.Наименование));
					
					НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;		
				
			Иначе		
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Раздел", "ПТУ");
				СтруктураПоиска.Вставить("ДатаПоиска", Стр.Док.Дата);
				СтруктураПоиска.Вставить("НомерПоиска", СокрЛП(Стр.Док.Номер));
				
				НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() <> 0 Тогда
					
					// теперь ищем в разрезе товаров				
					СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
					СтруктураПоиска.Вставить("Обработан", Ложь);
					
					НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура.Наименование));
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Поступление товаров и услуг";
				НОвСтр.ДокументФин = Стр.Док;
				НовСтр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = 0;
				НовСтр.НоменклатураФин = Стр.Номенклатура;
				НовСтр.НоменклатураБух = "<---->";
				//
				НовСтр.СчетДТФин = Стр.СчетДТ;
				НовСтр.СчетКТФин = Стр.СчетКТ;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				Продолжить;
			Иначе
				
				Если НСтрокиТОвары = Неопределено ИЛИ НСтрокиТовары.Количество() = 0 Тогда
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Поступление товаров и услуг";
					НОвСтр.ДокументФин = Стр.Док;
					НовСтр.ДокументБух = НайдСтроки[0].Документ;
					НовСтр.СуммаФин = Стр.Сумма;
					НовСтр.СуммаБух = 0;
					НовСтр.НоменклатураФин = Стр.Номенклатура;
					НовСтр.НоменклатураБух = "<---->";
					//
					НовСтр.СчетДТФин = Стр.СчетДТ;
					НовСтр.СчетКТФин = Стр.СчетКТ;
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					Продолжить;
				КонецЕсли;
				
				//Для Каждого НСтр Из НСтрокиТовары Цикл
				НСтр = НСтрокиТовары[0];
				
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Поступление товаров и услуг";
				НОвСтр.ДокументФин = Стр.Док;
				НовСтр.ДокументБух = НСтр.Документ;
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = НСтр.Сумма;
				НовСтр.НоменклатураФин = Стр.Номенклатура;
				НовСтр.НоменклатураБух = НСтр.Номенклатура;
				//
				НовСтр.СчетДТФин = Стр.СчетДТ;
				НовСтр.СчетКТФин = Стр.СчетКТ;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетКт);
				
				НСтр.Обработан = Истина;
				
				//КонецЦикла;
				
			КонецЕсли;
			
			Стр.Обработан = Истина;
			
		КонецЦикла;	
		
		// сопоставляем
		Для Каждого Стр Из ДанныеБух Цикл
			
			Если Стр.Обработан Тогда
				Продолжить;
			КонецЕсли;
			
			НСтрокиТОвары = Неопределено;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Раздел", "ПТУ");					
			СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);					
			
			НайдСтроки = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда
				
				// теперь ищем в разрезе товаров				
				СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
				СтруктураПоиска.Вставить("Обработан", Ложь);
				
				НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
				
				Если НСтрокиТовары.Количество() = 0 Тогда
					СтруктураПоиска.Удалить("id_tov");
					СтруктураПоиска.Вставить("НоменклатураСтрокой", СокрЛП(Стр.Номенклатура));
					
					НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;		
				
			Иначе		
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Раздел", "ПТУ");
				СтруктураПоиска.Вставить("ДатаПоиска", Стр.ДатаПоиска);
				СтруктураПоиска.Вставить("НомерПоиска", СокрЛП(Стр.НомерПоиска));
				
				НайдСтроки = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() <> 0 Тогда
					
					// теперь ищем в разрезе товаров				
					СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
					СтруктураПоиска.Вставить("Обработан", Ложь);
					
					НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
					
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("НоменклатураСтрокой", СокрЛП(Стр.Номенклатура));
						
						НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Поступление товаров и услуг";
				НОвСтр.ДокументФин = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.ДокументБух = Стр.Документ;
				НовСтр.СуммаФин = 0;
				НовСтр.СуммаБух = Стр.Сумма;
				НовСтр.НоменклатураФин = "<---->";
				НовСтр.НоменклатураБух = Стр.Номенклатура;
				//
				НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
				
				Продолжить;
				
			Иначе			
				
				Если НСтрокиТОвары = Неопределено ИЛИ НСтрокиТовары.Количество() = 0 Тогда
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Поступление товаров и услуг";
					НОвСтр.ДокументФин = НайдСтроки[0].Док;
					НовСтр.ДокументБух = Стр.Документ;
					НовСтр.СуммаФин = 0;
					НовСтр.СуммаБух = Стр.Сумма;
					НовСтр.НоменклатураФин = "<---->";
					НовСтр.НоменклатураБух = Стр.Номенклатура;
					//
					НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
					НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
					Продолжить;
				КонецЕсли;
				
				// 	Для Каждого НСтр Из НСтрокиТОвары Цикл
				НСтр = НСтрокиТОвары[0];
				
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Поступление товаров и услуг";
				НОвСтр.ДокументФин = Стр.Документ;
				НовСтр.ДокументБух = НСтр.Док;
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = НСтр.Сумма;
				НовСтр.НоменклатураФин = Стр.Номенклатура;
				НовСтр.НоменклатураБух = НСтр.Номенклатура;	
				//
				НовСтр.СчетДТФин = НСтр.СчетДт;
				НовСтр.СчетКТФин = НСтр.СчетКт;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);					
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ДР Тогда
		
		ДанныеБух.Очистить();
		ТаблицаФинансы.Очистить();
		
		ТекстЗапроса="ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор) КАК Документ,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументСсылка,
		|	ХозрасчетныйОбороты.Регистратор.Дата КАК ДатаПоиска,
		|	ХозрасчетныйОбороты.Регистратор.Номер КАК НомерПоиска,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК Сумма,
		|	ХозрасчетныйОбороты.СубконтоДт1 КАК НоменклатураСсылка,
		|	ХозрасчетныйОбороты.СубконтоДт1.ИД КАК id_tov,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоДт1) КАК Номенклатура,
		|	ХозрасчетныйОбороты.СчетДт.Код КАК СчетДт,
		|	ХозрасчетныйОбороты.СчетКт.Код КАК СчетКт
		|ПОМЕСТИТЬ СводнаяТаблица
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&СписокСчетов), , , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.СубконтоДт1,
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.СчетКт.Код,
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	ХозрасчетныйОбороты.СубконтоДт1.ИД,
		|	ХозрасчетныйОбороты.СчетДт,
		|	ХозрасчетныйОбороты.СчетКт
		
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор),
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборот),
		|	ХозрасчетныйОбороты.СубконтоКт1,
		|	ХозрасчетныйОбороты.СубконтоКт1.ИД,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоКт1),
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.СчетКт.Код
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&СписокСчетов), , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.СубконтоКт1,
		|	ХозрасчетныйОбороты.СчетКт.Код,
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.СубконтоКт1.ИД,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	ХозрасчетныйОбороты.СчетДт,
		|	ХозрасчетныйОбороты.СчетКт
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СводнаяТаблица.Документ,
		|	СводнаяТаблица.ДокументСсылка,
		|	СводнаяТаблица.ДатаПоиска,
		|	СводнаяТаблица.НомерПоиска,
		|	СводнаяТаблица.Сумма,
		|	СводнаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		|	СводнаяТаблица.id_tov,
		|	СводнаяТаблица.Номенклатура,
		|	СводнаяТаблица.СчетДт,
		|	СводнаяТаблица.СчетКт,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
		|	ВЫБОР
		|		КОГДА СводнаяТаблица.СчетДт = ""01.01""
		|			ТОГДА СводнаяТаблица.НоменклатураСсылка.ЗаводскойНомер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ЗаводскойНомер
		|ИЗ
		|	СводнаяТаблица КАК СводнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО СводнаяТаблица.НоменклатураСсылка = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
		
		Запрос.Текст=ТекстЗапроса;
		
		МассивСчетов=v82.NewObject("Массив");
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ОСвОрганизации);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);	
		//
		Запрос.УстановитьПараметр("СписокСчетов", МассивСчетов);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НС=ДанныеБух.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			НС.НомерПоиска = СокрЛП(НС.НомерПоиска);		
			НС.ГУИД = v82.XMLСтрока(Выборка.ДокументСсылка);
			НС.Раздел = "ДР";		
			
			Если Выборка.СчетДТ = "01.01" И ЗначениеЗаполнено(выборка.Номенклатура) Тогда
				НС.ГуидОС = v82.XMLСтрока(Выборка.НоменклатураСсылка); 
			КонецЕсли;
			
		КонецЦикла;	
		
		МассивСчетов = Новый Массив;	
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.Инвентарь);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
		
		ЗапросДанныеФинансов.УстановитьПараметр("Счета", МассивСчетов);
		
		ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ
		|	ФинансовыйОбороты.Регистратор КАК Док,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ФинансовыйОбороты.СубконтоДт1 КАК ОС,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""01.1""
		|			ТОГДА """"
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ КАК id_tov,
		|	СУММА(ФинансовыйОбороты.СуммаОборот) КАК Сумма,
		|	ФинансовыйОбороты.СчетДт КАК СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|ПОМЕСТИТЬ Сводная
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&Счета), , , , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СубконтоДт1,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""01.1""
		|			ТОГДА """"
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФинансовыйОбороты.Регистратор,
		|	ФинансовыйОбороты.СубконтоДт1.Номенклатура,
		|	ФинансовыйОбороты.СубконтоДт1,
		|	0,
		|	СУММА(ФинансовыйОбороты.СуммаОборот),
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт.Код = ""01.1"", , , , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт,
		|	ФинансовыйОбороты.СубконтоДт1,
		|	ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СводнаяНекорректные.Док,
		|	СводнаяНекорректные.ОС
		|ПОМЕСТИТЬ СводнаяНекорректные
		|ИЗ
		|	Сводная КАК СводнаяНекорректные
		|ГДЕ
		|	СводнаяНекорректные.СчетДт.Код = ""01.1""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сводная.Док,
		|	Сводная.Номенклатура,
		|	ВЫБОР
		|		КОГДА Сводная.СчетДт.Код = ""01.1""
		|			ТОГДА Сводная.ОС
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	КОНЕЦ КАК ОС,
		|	Сводная.id_tov,
		|	СУММА(Сводная.Сумма) КАК Сумма,
		|	Сводная.СчетДт,
		|	Сводная.СчетКт
		|ИЗ
		|	Сводная КАК Сводная
		|		ЛЕВОЕ СОЕДИНЕНИЕ СводнаяНекорректные КАК СводнаяНекорректные
		|		ПО Сводная.ОС = СводнаяНекорректные.ОС
		|			И Сводная.Док = СводнаяНекорректные.Док
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Сводная.СчетДт.Код = ""08.4""
		|					И НЕ СводнаяНекорректные.ОС ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	Сводная.Док,
		|	Сводная.Номенклатура,
		|	ВЫБОР
		|		КОГДА Сводная.СчетДт.Код = ""01.1""
		|			ТОГДА Сводная.ОС
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	КОНЕЦ,
		|	Сводная.id_tov,
		|	Сводная.СчетДт,
		|	Сводная.СчетКт";
		
		Табл = ЗапросДанныеФинансов.Выполнить().Выгрузить();
		
		Для Каждого Стр Из Табл Цикл
			НовСтр = ТаблицаФинансы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		
		Для Каждого Стр Из ТаблицаФинансы Цикл		
			Стр.ГУИД = Строка(Стр.Док.УникальныйИдентификатор());
			Стр.Раздел = "ДР";
		КонецЦикла; 
		
		// сопоставляем
		Для Каждого Стр Из ТаблицаФинансы Цикл
			
			Попытка
				Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Стр.Док) Тогда
					Продолжить;
				КонецЕсли;				
			Исключение
			КонецПопытки;	
			
			НСтрокиТОвары = Неопределено;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Раздел", "ДР");
			СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);
			СтруктураПоиска.Вставить("Обработан", Ложь);
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда
				
				// теперь ищем в разрезе товаров		
				
				Если Стр.СчетДТ.Код = "01.1" Тогда
					
					ГуидПоиска1 = Стр.ОС.АК_ID_Buh;
					ГуидПоиска2 = Стр.ОС.УникальныйИдентификатор();
					
					ЗаводскойНомер = Стр.ОС.ЗаводскойНомер;
					НаименованиеОС = СокрЛП(Стр.ОС.Наименование);
					ИНвНомер = СокрЛП(Стр.ОС.ИнвентарныйНомер);
					
					НСтрокиТовары = Новый Массив;
					
					//1
					Если ЗначениеЗаполнено(ГуидПоиска1) Тогда
						СтруктураПоиска.Вставить("ГуидОС", ГуидПоиска1);
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					КонецЕсли;
					
					//2
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Вставить("ГуидОС", ГуидПоиска2);
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;
					
					//3
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("ГуидОС");
						СтруктураПоиска.Вставить("ИнвентарныйНомер", ИнвНомер);
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;
					
					//4
					Если НСтрокиТовары.Количество() = 0 Тогда				
						СтруктураПоиска.Удалить("ИнвентарныйНомер");
						СтруктураПоиска.Вставить("ЗаводскойНомер", ЗаводскойНомер);
						СтруктураПоиска.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура.Наименование));
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;
					
				Иначе	
					
					СтруктураПоиска.Вставить("id_tov", Стр.id_tov);				
					
					НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура.Наименование));
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;		
					
				КонецЕсли;
				
			Иначе			
				
			КонецЕсли;
			
			Если НайдСтроки.Количество() <> 0 Тогда
				
				Если НСтрокиТОвары = Неопределено ИЛИ НСтрокиТовары.Количество() = 0 Тогда
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Поступление доп. расходов";
					НОвСтр.ДокументФин = Стр.Док;
					НовСтр.ДокументБух = НайдСтроки[0].Документ;
					НовСтр.СуммаФин = Стр.Сумма;
					НовСтр.СуммаБух = 0;
					НовСтр.НоменклатураФин = Стр.Номенклатура;
					НовСтр.НоменклатураБух = "<---->";
					//
					НовСтр.СчетДТФин = Стр.СчетДТ;
					НовСтр.СчетКТФин = Стр.СчетКТ;
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					Продолжить;
				КонецЕсли;	
				
				НСтр = НСтрокиТовары[0];
				
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Поступление доп. расходов";
				НОвСтр.ДокументФин = Стр.Док;
				НовСтр.ДокументБух = НСтр.Документ;
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = НСтр.Сумма;
				НовСтр.НоменклатураФин = Стр.Номенклатура;
				НовСтр.НоменклатураБух = НСтр.Номенклатура;
				//
				НовСтр.СчетДТФин = Стр.СчетДТ;
				НовСтр.СчетКТФин = Стр.СчетКТ;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетКт);
				
				НСтр.Обработан = Истина;	
				
			Иначе
				
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Поступление доп. расходов";
				НОвСтр.ДокументФин = Стр.Док;
				НовСтр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = 0;
				НовСтр.НоменклатураФин = Стр.Номенклатура;
				НовСтр.НоменклатураБух = "<---->";
				//
				НовСтр.СчетДТФин = Стр.СчетДТ;
				НовСтр.СчетКТФин = Стр.СчетКТ;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				
				Продолжить;
				
			КонецЕсли;
			
			Стр.Обработан = Истина;
			
		КонецЦикла;	
		
		Для Каждого Стр Из ДанныеБух Цикл
			
			Если НЕ Стр.Обработан Тогда
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Поступление доп. расходов";
				НОвСтр.ДокументФин = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.ДокументБух = Стр.Документ;
				НовСтр.СуммаФин = 0;
				НовСтр.СуммаБух = Стр.Сумма;
				НовСтр.НоменклатураФин = "<---->";
				НовСтр.НоменклатураБух = Стр.Номенклатура;
				//
				НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	//Авансовые
	Если Авансовые Тогда		
		
		ДанныеБух.Очистить();
		ТаблицаФинансы.Очистить();
		
		ТекстЗапроса="ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор) КАК Документ,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументСсылка,
		|	ХозрасчетныйОбороты.Регистратор.Дата КАК ДатаПоиска,
		|	ХозрасчетныйОбороты.Регистратор.Номер КАК НомерПоиска,
		|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
		|	ХозрасчетныйОбороты.СубконтоДт1 КАК НоменклатураСсылка,
		|	ХозрасчетныйОбороты.СубконтоДт1.ИД КАК id_tov,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоДт1) КАК Номенклатура,
		|	ХозрасчетныйОбороты.СчетДт.Код КАК СчетДт,
		|	ХозрасчетныйОбороты.СчетКт.Код КАК СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&СписокСчетов), , , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор),
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	ХозрасчетныйОбороты.СуммаОборот,
		|	ХозрасчетныйОбороты.СубконтоКт1,
		|	ХозрасчетныйОбороты.СубконтоКт1.ИД,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоКт1),
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.СчетКт.Код
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&СписокСчетов), , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		
		|УПОРЯДОЧИТЬ ПО
		|	СчетДт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст=ТекстЗапроса;
		
		МассивСчетов=v82.NewObject("Массив");
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
		//
		Запрос.УстановитьПараметр("СписокСчетов", МассивСчетов);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НС=ДанныеБух.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			НС.Номенклатура = СокрЛП(Нс.Номенклатура);
			НС.НомерПоиска = СокрЛП(НС.НомерПоиска);					
			НС.ГУИД = v82.XMLСтрока(Выборка.ДокументСсылка); 
			НС.Раздел = "Авансовые";
		КонецЦикла;			
		
		МассивСчетов = Новый Массив;	
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);		
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.Инвентарь);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);	
		
		ЗапросДанныеФинансов.УстановитьПараметр("Счета", МассивСчетов);
		
		ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ
		|	ФинансовыйОбороты.Регистратор КАК Док,
		|	СУММА(ФинансовыйОбороты.СуммаОборот) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ КАК id_tov,
		|	ФинансовыйОбороты.СчетДт КАК СчетДт,
		|	ФинансовыйОбороты.СчетКт КАК СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&Счета), , , , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФинансовыйОбороты.Регистратор,
		|	СУММА(ФинансовыйОбороты.СуммаОборот),
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&Счета), , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетДт,
		|	СчетКт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Табл = ЗапросДанныеФинансов.Выполнить().Выгрузить();
		
		Для Каждого Стр Из Табл Цикл
			НовСтр = ТаблицаФинансы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		
		Для Каждого Стр Из ТаблицаФинансы Цикл
			Стр.ГУИД = Стр.Док.УникальныйИдентификатор();		
			Стр.ДатаПоиска = Стр.Док.Дата;
			Стр.НомерПоиска = СокрЛП(Стр.Док.Номер);
			Стр.НоменклатураСтрокой = СокрЛП(Стр.Номенклатура.Наименование);
			Стр.Раздел = "Авансовые";
		КонецЦикла;
		
		// сопоставляем
		Для Каждого Стр Из ТаблицаФинансы Цикл
			
			Попытка
				Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Стр.Док) Тогда
					Продолжить;
				КонецЕсли;				
			Исключение
			КонецПопытки;
			
			НСтрокиТОвары = Неопределено;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Раздел", "Авансовые");
			СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);					
			
			НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда
				
				// теперь ищем в разрезе товаров				
				СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
				СтруктураПоиска.Вставить("Обработан", Ложь);
				
				НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
				Если НСтрокиТовары.Количество() = 0 Тогда
					СтруктураПоиска.Удалить("id_tov");
					СтруктураПоиска.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура.Наименование));
					
					НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);			
					
				КонецЕсли;		
				
			Иначе		
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Раздел", "Авансовые");
				СтруктураПоиска.Вставить("ДатаПоиска", Стр.Док.Дата);
				СтруктураПоиска.Вставить("НомерПоиска", СокрЛП(Стр.Док.Номер));
				
				НайдСтроки = ДанныеБух.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() <> 0 Тогда
					
					// теперь ищем в разрезе товаров				
					СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
					СтруктураПоиска.Вставить("Обработан", Ложь);
					
					НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
					
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура.Наименование));
						
						НСтрокиТовары = ДанныеБух.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Авансовый отчет";
				НОвСтр.ДокументФин = Стр.Док;
				НовСтр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = 0;
				НовСтр.НоменклатураФин = Стр.Номенклатура;
				НовСтр.НоменклатураБух = "<---->";
				//
				НовСтр.СчетДТФин = Стр.СчетДТ;
				НовСтр.СчетКТФин = Стр.СчетКТ;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				Продолжить;
			Иначе
				
				Если НСтрокиТОвары = Неопределено ИЛИ НСтрокиТовары.Количество() = 0 Тогда
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Авансовый отчет";
					НОвСтр.ДокументФин = Стр.Док;
					НовСтр.ДокументБух = НайдСтроки[0].Документ;
					НовСтр.СуммаФин = Стр.Сумма;
					НовСтр.СуммаБух = 0;
					НовСтр.НоменклатураФин = Стр.Номенклатура;
					НовСтр.НоменклатураБух = "<---->";
					//
					НовСтр.СчетДТФин = Стр.СчетДТ;
					НовСтр.СчетКТФин = Стр.СчетКТ;
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					Продолжить;
				КонецЕсли;
				
				НСтр = НстрокиТовары[0];
				
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Авансовый отчет";
				НОвСтр.ДокументФин = Стр.Док;
				НовСтр.ДокументБух = НСтр.Документ;
				НовСтр.СуммаФин = Стр.Сумма;
				НовСтр.СуммаБух = НСтр.Сумма;
				НовСтр.НоменклатураФин = Стр.Номенклатура;
				НовСтр.НоменклатураБух = НСтр.Номенклатура;
				//
				НовСтр.СчетДТФин = Стр.СчетДТ;
				НовСтр.СчетКТФин = Стр.СчетКТ;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НСтр.СчетКт);
				
				НСтр.Обработан = Истина;
				
			КонецЕсли;
			
			Стр.Обработан = Истина;
			
		КонецЦикла;	
		
		// сопоставляем
		Для Каждого Стр Из ДанныеБух Цикл
			
			Если Стр.Обработан Тогда
				Продолжить;
			КонецЕсли;
			
			НСтрокиТОвары = Неопределено;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Раздел", "Авансовые");					
			СтруктураПоиска.Вставить("ГУИД", Стр.ГУИД);					
			
			НайдСтроки = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
			
			Если НайдСтроки.Количество() <> 0 Тогда
				
				// теперь ищем в разрезе товаров				
				СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
				СтруктураПоиска.Вставить("Обработан", Ложь);
				
				НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
				
				Если НСтрокиТовары.Количество() = 0 Тогда
					СтруктураПоиска.Удалить("id_tov");
					СтруктураПоиска.Вставить("НоменклатураСтрокой", СокрЛП(Стр.Номенклатура));
					
					НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
					
				КонецЕсли;		
				
			Иначе		
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Раздел", "Авансовые");
				СтруктураПоиска.Вставить("ДатаПоиска", Стр.ДатаПоиска);
				СтруктураПоиска.Вставить("НомерПоиска", СокрЛП(Стр.НомерПоиска));
				
				НайдСтроки = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() <> 0 Тогда
					
					// теперь ищем в разрезе товаров				
					СтруктураПоиска.Вставить("id_tov", Стр.id_tov);
					СтруктураПоиска.Вставить("Обработан", Ложь);
					
					НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
					
					Если НСтрокиТовары.Количество() = 0 Тогда
						СтруктураПоиска.Удалить("id_tov");
						СтруктураПоиска.Вставить("НоменклатураСтрокой", СокрЛП(Стр.Номенклатура));
						
						НСтрокиТовары = ТаблицаФинансы.НайтиСтроки(СтруктураПоиска);
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Авансовый отчет";
				НОвСтр.ДокументФин = "ДОКУМЕНТ НЕ НАЙДЕН";
				НовСтр.ДокументБух = Стр.Документ;
				НовСтр.СуммаФин = 0;
				НовСтр.СуммаБух = Стр.Сумма;
				НовСтр.НоменклатураФин = "<---->";
				НовСтр.НоменклатураБух = Стр.Номенклатура;
				//
				НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
				
				Продолжить;
				
			Иначе			
				
				Если НСтрокиТОвары = Неопределено ИЛИ НСтрокиТовары.Количество() = 0 Тогда
					НовСтр = СводнаяТаблица.Добавить();
					НовСтр.Раздел = "Авансовый отчет";
					НОвСтр.ДокументФин = НайдСтроки[0].Док;
					НовСтр.ДокументБух = Стр.Документ;
					НовСтр.СуммаФин = 0;
					НовСтр.СуммаБух = Стр.Сумма;
					НовСтр.НоменклатураФин = "<---->";
					НовСтр.НоменклатураБух = Стр.Номенклатура;
					//
					НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
					НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
					НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
					НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
					Продолжить;
				КонецЕсли;
				
				НСтр = НСтрокиТовары[0];
				
				НовСтр = СводнаяТаблица.Добавить();
				НовСтр.Раздел = "Авансовый отчет";
				НОвСтр.ДокументФин = НСтр.Док;
				НовСтр.ДокументБух = Стр.Документ;
				НовСтр.СуммаФин = НСтр.Сумма;
				НовСтр.СуммаБух = Стр.Сумма;
				НовСтр.НоменклатураФин = НСтр.Номенклатура;
				НовСтр.НоменклатураБух = Стр.Номенклатура;	
				//
				НовСтр.СчетДТФин = НСтр.СчетДт;
				НовСтр.СчетКТФин = НСтр.СчетКт;
				НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
				НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//прочее
	Если Прочее Тогда		
		
		ДанныеБух.Очистить();
		ТаблицаФинансы.Очистить();
		
		ТекстЗапроса="ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор) КАК Документ,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументСсылка,
		|	ХозрасчетныйОбороты.Регистратор.Дата КАК ДатаПоиска,
		|	ХозрасчетныйОбороты.Регистратор.Номер КАК НомерПоиска,
		|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
		|	ХозрасчетныйОбороты.СубконтоДт1 КАК НоменклатураСсылка,
		|	ХозрасчетныйОбороты.СубконтоДт1.ИД КАК id_tov,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоДт1) КАК Номенклатура,
		|	ХозрасчетныйОбороты.СчетДт.Код КАК СчетДт,
		|	ХозрасчетныйОбороты.СчетКт.Код КАК СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&СписокСчетов), , , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Регистратор),
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Регистратор.Дата,
		|	ХозрасчетныйОбороты.Регистратор.Номер,
		|	ХозрасчетныйОбороты.СуммаОборот,
		|	ХозрасчетныйОбороты.СубконтоКт1,
		|	ХозрасчетныйОбороты.СубконтоКт1.ИД,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.СубконтоКт1),
		|	ХозрасчетныйОбороты.СчетДт.Код,
		|	ХозрасчетныйОбороты.СчетКт.Код
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&СписокСчетов), , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
		|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		
		|УПОРЯДОЧИТЬ ПО
		|	СчетДт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст=ТекстЗапроса;
		
		МассивСчетов=v82.NewObject("Массив");
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
		МассивСчетов.Добавить(v82.ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
		//
		Запрос.УстановитьПараметр("СписокСчетов", МассивСчетов);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НС=ДанныеБух.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			НС.НомерПоиска = СокрЛП(НС.НомерПоиска);					
			НС.ГУИД = v82.XMLСтрока(Выборка.ДокументСсылка); 
			НС.Раздел = "Прочее";
		КонецЦикла;			
		
		МассивСчетов = Новый Массив;	
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств);		
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.Инвентарь);
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);	
		
		ЗапросДанныеФинансов.УстановитьПараметр("Счета", МассивСчетов);
		
		ЗапросДанныеФинансов.Текст = "ВЫБРАТЬ
		|	ФинансовыйОбороты.Регистратор КАК Док,
		|	СУММА(ФинансовыйОбороты.СуммаОборот) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ КАК id_tov,
		|	ФинансовыйОбороты.СчетДт КАК СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, СчетДт В (&Счета), , , , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ВводВЭксплуатацию
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетДт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоДт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоДт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФинансовыйОбороты.Регистратор,
		|	СУММА(ФинансовыйОбороты.СуммаОборот),
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор, , , СчетКт В (&Счета), , ) КАК ФинансовыйОбороты
		|ГДЕ
		|	НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ВводВЭксплуатацию
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
		|	И НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФинансовыйОбороты.СчетКт.Код = ""10.6""
		|			ТОГДА ФинансовыйОбороты.СубконтоКт1.id_tov
		|		ИНАЧЕ ФинансовыйОбороты.СубконтоКт1.Номенклатура.id_tov
		|	КОНЕЦ,
		|	ФинансовыйОбороты.СчетДт,
		|	ФинансовыйОбороты.СчетКт
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетДт
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Табл = ЗапросДанныеФинансов.Выполнить().Выгрузить();
		
		Для Каждого Стр Из Табл Цикл
			НовСтр = ТаблицаФинансы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		
		// без сопоставления
		Для Каждого Стр Из ТаблицаФинансы Цикл
			
			Попытка
				Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Стр.Док) Тогда
					Продолжить;
				КонецЕсли;				
			Исключение
			КонецПопытки;	
			
			НовСтр = СводнаяТаблица.Добавить();
			НовСтр.Раздел = "Прочее";
			НовСтр.ДокументФин = Стр.Док;
			НовСтр.ДокументБух = "<>";
			НовСтр.СуммаФин = Стр.Сумма;
			НовСтр.СуммаБух = 0;
			НовСтр.НоменклатураФин = Стр.Номенклатура;
			НовСтр.НоменклатураБух = "<---->";		
			//
			НовСтр.СчетДТФин = Стр.СчетДТ;
			НовСтр.СчетКТФин = Стр.СчетКТ;
			НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЦикла;	
		
		Для Каждого Стр Из ДанныеБух Цикл
			
			НовСтр = СводнаяТаблица.Добавить();
			НовСтр.Раздел = "Прочее";
			НовСтр.ДокументФин = "<>";
			НовСтр.ДокументБух = Стр.Документ;
			НовСтр.СуммаФин = 0;
			НовСтр.СуммаБух = Стр.Сумма;
			НовСтр.НоменклатураФин = "<---->";
			НовСтр.НоменклатураБух = Стр.Номенклатура;
			//
			НовСтр.СчетДТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
			НовСтр.СчетКТФин = ПланыСчетов.Финансовый.ПустаяСсылка();
			НовСтр.СчетДтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетДт);
			НовСтр.СчетКтБух = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.СчетКт);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	//
	СписокДокументовВУзел = Новый Массив;
	
	СоответствиеСчетов = Новый Соответствие;
	СоответствиеСчетов.Вставить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000, ПЛаныСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);	
	СоответствиеСчетов.Вставить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств, ПЛаныСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);	
	СоответствиеСчетов.Вставить(ПланыСчетов.Финансовый.ОсновныеСредстваВОрганизации, ПЛаныСчетов.Хозрасчетный.ОСвОрганизации);
	СоответствиеСчетов.Вставить(ПланыСчетов.Финансовый.Инвентарь, ПЛаныСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
	СоответствиеСчетов.Вставить(ПланыСчетов.Финансовый.ПрочиеМатериалы, ПЛаныСчетов.Хозрасчетный.ПрочиеМатериалы);
	
	// выводим
	Для Каждого Стр Из СводнаяТаблица Цикл
		
		// Итоговая проверка
		
		Попытка
			Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Стр.ДокументФин) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;	
		
		Если Стр.ДокументБух = "<>" ИЛИ Стр.ДокументБух = "ДОКУМЕНТ НЕ НАЙДЕН" Тогда
			СписокДокументовВУзел.Добавить(Стр.ДокументФин);
		КонецЕсли;
		
		НайдСоотДт = СоответствиеСчетов.Получить(Стр.СчетДТФин);
		//НайдСоотКт = СоответствиеСчетов.Получить(Стр.СчетКТФин);
		
		Если НайдСоотДт <> Стр.СчетДтБух Тогда
			//ИЛИ НайдСоотКт <> Стр.СчетКтБух Тогда
			СписокДокументовВУзел.Добавить(Стр.ДокументФин);
		КонецЕсли;
		
		Если Стр.СуммаФин <> Стр.СуммаБух Тогда
			СписокДокументовВУзел.Добавить(Стр.ДокументФин);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовВУзел);
	
	Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");
	
	Для Каждого Эл Из СписокДокументовВУзел Цикл
		Если НЕ Эл = "ДОКУМЕНТ НЕ НАЙДЕН" Тогда
			Попытка
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Эл);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.12.29 без номера, оптимизирую 
Функция ПолучитьДатыЗапретаБухгалтерииДляПользователяНеопределено(v82)
	
	ЗапросДатыЗапрета = v82.NewObject("Запрос");  
	
	ЗапросДатыЗапрета.Текст =
	"ВЫБРАТЬ
	|	ГраницыЗапретаИзмененияДанных.Организация.ИНН КАК ИНН,
	|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
	|ИЗ
	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	|ГДЕ
	|	ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
	
	Возврат ЗапросДатыЗапрета.Выполнить().Выгрузить();
	
КонецФункции

//ИП-00016361
Процедура ПроверкаРегистрацияДокументовВУзел() Экспорт	
	
	//СтрокаПодключения="Srvr=""srv-sql02""; Ref=""BP_CORP""; Usr=""Обмен""; Pwd=""123321""";
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
	
	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
	
	Попытка
		v82 = v82COMОбъект.Connect(СтрокаПодключения);
		ПодключениеУстановлено=Истина;
	Исключение
		ПодключениеУстановлено=Ложь;		
		Возврат;
	КонецПопытки;	
	
	Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");	
		
	ДатыЗапрета = ПолучитьДатыЗапретаБухгалтерииДляПользователяНеопределено(v82);
	
	Запрос=v82.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	|	АвансовыйОтчет.Номер,
	|	АвансовыйОтчет.Организация.ИНН КАК ИНН,
	|	АвансовыйОтчет.Проведен,
	|	АвансовыйОтчет.Ссылка,
	|	""АО"" КАК ВидОперации
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.Организация.ИНН КАК ИНН,
	|	ПриходныйКассовыйОрдер.Проведен,
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	""ПКО""
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Организация.ИНН КАК ИНН,
	|	РасходныйКассовыйОрдер.Проведен,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	""РКО""
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Организация.ИНН КАК ИНН,
	|	ВозвратТоваровПоставщику.Проведен,
	|	ВозвратТоваровПоставщику.Ссылка,
	|	""Возврат""
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Номер,
	|	ПоступлениеДопРасходов.Организация.ИНН,
	|	ПоступлениеДопРасходов.Проведен,
	|	ПоступлениеДопРасходов.Ссылка,
	|	""ДР""
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -1));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДата()));
	
	ВыборкаБух = Запрос.Выполнить().Выбрать();
	
	ТаблицаБух = Новый ТаблицаЗначений;
	ТаблицаБух.Колонки.Добавить("Номер");
	ТаблицаБух.Колонки.Добавить("Гуид");
	ТаблицаБух.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТаблицаБух.Колонки.Добавить("ИНН");
	ТаблицаБух.Колонки.Добавить("ВидОперации");
	
	ТаблицаБух.Индексы.Добавить("Гуид");
	ТаблицаБух.Индексы.Добавить("Номер");
	
	Пока ВыборкаБух.Следующий() Цикл
		НовСтр = ТаблицаБух.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаБух);
		НовСтр.Номер = СокрЛП(ВыборкаБух.Номер);
		НовСтр.Проведен = ВыборкаБух.Проведен;
		НовСтр.ГУИД = v82.XMLСтрока(ВыборкаБух.Ссылка);
	КонецЦикла;	
	
	ЗапросФин = Новый Запрос;
	ЗапросФин.Текст = "ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Организация.ИНН КАК ИНН,
	|	АвансовыйОтчет.Номер,
	|	АвансовыйОтчет.Проведен,
	|	""АО"" КАК ВидОперации
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (АвансовыйОтчет.Проведен
	|			ИЛИ АвансовыйОтчет.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка,
	|	ПоступлениеВКассу.Организация.ИНН,
	|	ПоступлениеВКассу.Номер,
	|	ПоступлениеВКассу.Проведен,
	|	""ПКО""
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.Инкассация)
	|	И (ПоступлениеВКассу.Проведен
	|			ИЛИ ПоступлениеВКассу.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.Ссылка,
	|	РасходИзКассы.Организация.ИНН,
	|	РасходИзКассы.Номер,
	|	РасходИзКассы.Проведен,
	|	""РКО""
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (РасходИзКассы.Проведен
	|			ИЛИ РасходИзКассы.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Организация.ИНН,
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Проведен,
	|	""Возврат""
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (ВозвратТоваровПоставщику.Проведен
	|			ИЛИ ВозвратТоваровПоставщику.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.Организация.ИНН,
	|	ПоступлениеДопРасходов.Номер,
	|	ПоступлениеДопРасходов.Проведен,
	|	""ДР""
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (ПоступлениеДопРасходов.Проведен
	|			ИЛИ ПоступлениеДопРасходов.ПометкаУдаления)";
	
	ЗапросФин.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -1));
	ЗапросФин.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДата()));
	
	Выборка = ЗапросФин.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		НайдСтр = Неопределено;
		
		Попытка
			Если ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;				
		Исключение
		КонецПопытки;
		
		Если Выборка.ВидОперации = "АО" Тогда		
			
			НайдСтроки = ТаблицаБух.НайтиСтроки(Новый Структура("Номер,ВидОперации", СокрЛП(Выборка.Номер), Выборка.ВидОперации));
			
			Если НайдСтроки.Количество() Тогда
				НайдСтр = НайдСтроки[0];
			КонецЕсли;
			
			Если НайдСтр = Неопределено Тогда			
				Если НЕ Выборка.Ссылка.ПометкаУдаления Тогда
					//Сообщить(Выборка.Ссылка);
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
				КонецЕсли;
			Иначе
				Если НайдСтр.Проведен <> Выборка.Проведен Тогда				
					//Сообщить(Выборка.Ссылка);
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Выборка.ВидОперации = "ПКО" ИЛИ Выборка.ВидОперации = "РКО" Тогда
			
			Если Выборка.ВидОперации = "РКО" И Выборка.Ссылка.СтатьяДвиженияДенежныхСредств.Код = "110102"
					И НЕ Выборка.Ссылка.ДокументыПолучены Тогда //Возврат покупателю
				Продолжить;
			КонецЕсли;
			
			НайдСтроки = ТаблицаБух.НайтиСтроки(Новый Структура("Гуид, ВидОперации", Строка(Выборка.Ссылка.УникальныйИдентификатор()), Выборка.ВидОперации));
			
			Если НайдСтроки.Количество() Тогда
				НайдСтр = НайдСтроки[0];
			Иначе		
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ИНН", Выборка.ИНН);
				СтруктураПоиска.Вставить("Номер", СокрЛП(Выборка.Номер));
				СтруктураПоиска.Вставить("ВидОперации", Выборка.ВидОперации);
				
				НайдСтроки = ТаблицаБух.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() = 0 Тогда
					НайдСтр = Неопределено;
				Иначе
					НайдСтр = НайдСтроки[0];
				КонецЕсли;
			КонецЕсли;		
			
			Если НайдСтр = Неопределено Тогда			
				Если НЕ Выборка.Ссылка.ПометкаУдаления Тогда
					//Сообщить(Выборка.Ссылка);
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
				КонецЕсли;
			Иначе
				Если НайдСтр.Проведен <> Выборка.Проведен Тогда				
					//Сообщить(Выборка.Ссылка);
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;			
					
		ИначеЕсли Выборка.ВидОперации = "ДР" ИЛИ Выборка.ВидОперации = "Возврат" Тогда
			
			НайдСтроки = ТаблицаБух.НайтиСтроки(Новый Структура("Гуид, ВидОперации", Строка(Выборка.Ссылка.УникальныйИдентификатор()), Выборка.ВидОперации));
			
			Если НайдСтроки.Количество() Тогда
				НайдСтр = НайдСтроки[0];
			Иначе
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номер", СокрЛП(Выборка.Номер));
				СтруктураПоиска.Вставить("ВидОперации", Выборка.ВидОперации);
				
				НайдСтроки = ТаблицаБух.НайтиСтроки(СтруктураПоиска);
				
				Если НайдСтроки.Количество() = 0 Тогда
					НайдСтр = Неопределено;
				Иначе
					НайдСтр = НайдСтроки[0];
				КонецЕсли;
				
			КонецЕсли;		
			
			Если НайдСтр = Неопределено Тогда			
				Если НЕ Выборка.Ссылка.ПометкаУдаления Тогда
					//Сообщить(Выборка.Ссылка);
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
				КонецЕсли;
			Иначе
				Если НайдСтр.Проведен <> Выборка.Проведен Тогда				
					//Сообщить("ПР " + Строка(Выборка.Ссылка) + СТрока(НайдСтр.Проведен) + " " + Строка(Выборка.Проведен));
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ДокПопадаетВДатуЗапретаБухгалтерии(ДатыЗапрета, Источник)
	
	Если ДатыЗапрета.Количество() > 0 Тогда
		НашлиДата = ДатыЗапрета.Найти(Источник.Организация.ИНН, "ИНН");
		
		Если НЕ НашлиДата = Неопределено Тогда
			ДатаЗапрета = НашлиДата.ГраницаЗапретаИзменений;
			
			Если НашлиДата.ГраницаЗапретаИзменений >= Источник.Дата Тогда				
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//---AK susk

//+++АК ZHAS 18-08-17 ИП-00016341
Процедура ЗагрузитьБанковскиеСчетаСБазыЗП() Экспорт
	Обработка = Обработки.АК_ОбменСБазойЗУП.Создать();
	Обработка.ПодключитьЗУПНажатиеМодуль();
	Обработка = Неопределено;
КонецПроцедуры
//---АК ZHAS 18-08-17 ИП-00016341 

//+++АК ZHAS 18-08-17 ИП-00015200.01.000.00001
Процедура ОбменПоПочтеЗагрузкаПодтвержденияЗаявок() Экспорт
	Обработка = Обработки.АК_ОбменПоПочтеЗагрузкаПодтвержденияЗаявок.Создать();
	Обработка.ПолучитьПочтуПоЗаявкам();
	Обработка = Неопределено;
КонецПроцедуры
//---АК ZHAS 18-08-17 ИП-00015200.01.000.00001

////+++АК_Кибарев, 11.09.17, ИП-00016684
Процедура АК_РассылкаТехПаспортаПросроченные() Экспорт
	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(Справочники.УчетныеЗаписиЭлектроннойПочты.ОтветсвенныйЗаЗаявки);
	Профиль.ИспользоватьSSLSMTP = Истина;
	Профиль.ИспользоватьSSLPOP3 = Истина;
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(Профиль, ПротоколИнтернетПочты.POP3);
	Исключение 
		ЗаписьЖурналаРегистрации("РеглЗадание_РассылкаТехПаспорта",,,,ОписаниеОшибки());
	КонецПопытки;
	
	//ЭТот запрос временно не используется
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	АК_ТехническиеПаспорта.Владелец КАК СтрукЕд,
	|	МАКСИМУМ(РАЗНОСТЬДАТ(&ТекДата, АК_ТехническиеПаспорта.ОкончанияДействия, ДЕНЬ)) КАК ОсталосьДней
	|ПОМЕСТИТЬ ВТ_СтрукЕд
	|ИЗ
	|	Справочник.АК_ТехническиеПаспорта КАК АК_ТехническиеПаспорта
	|ГДЕ
	|	НЕ АК_ТехническиеПаспорта.ПометкаУдаления
	|	И НЕ АК_ТехническиеПаспорта.Владелец.ПометкаУдаления
	|	И АК_ТехническиеПаспорта.Владелец.СтатусТорговойТочки = ЗНАЧЕНИЕ(перечисление.СтатусыТорговыхТочек.Открыт)
	|
	|СГРУППИРОВАТЬ ПО
	|	АК_ТехническиеПаспорта.Владелец
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(РАЗНОСТЬДАТ(&ТекДата, АК_ТехническиеПаспорта.ОкончанияДействия, ДЕНЬ)) < 15
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АК_ТехническиеПаспортаПолучателиУведомлений.Получатель,
	|	РАЗНОСТЬДАТ(&ТекДата, АК_ТехническиеПаспортаПолучателиУведомлений.Ссылка.ОкончанияДействия, ДЕНЬ) КАК ОсталосьДней,
	|	АК_ТехническиеПаспортаПолучателиУведомлений.Ссылка.Владелец КАК СтрукЕд
	|ПОМЕСТИТЬ ВТ_Получатели
	|ИЗ
	|	Справочник.АК_ТехническиеПаспорта.ПолучателиУведомлений КАК АК_ТехническиеПаспортаПолучателиУведомлений
	|ГДЕ
	|	АК_ТехническиеПаспортаПолучателиУведомлений.Ссылка.Владелец В
	|			(ВЫБРАТЬ
	|				т.СтрукЕд
	|			ИЗ
	|				ВТ_струкЕд КАК т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(250)) КАК ЭлАдрес
	|ПОМЕСТИТЬ ВТ_ЭлАдреса
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				т.Получатель
	|			ИЗ
	|				ВТ_Получатели КАК т)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭлАдреса.Объект КАК ФизЛицо,
	|	ВТ_Получатели.СтрукЕд,
	|	ВТ_ЭлАдреса.ЭлАдрес КАК ЭлАдрес
	|ИЗ
	|	ВТ_СтрукЕд КАК ВТ_СтрукЕд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Получатели КАК ВТ_Получатели
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭлАдреса КАК ВТ_ЭлАдреса
	|			ПО ВТ_Получатели.Получатель = ВТ_ЭлАдреса.Объект
	|		ПО ВТ_СтрукЕд.СтрукЕд = ВТ_Получатели.СтрукЕд
	|			И ВТ_СтрукЕд.ОсталосьДней = ВТ_Получатели.ОсталосьДней
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЭлАдреса.ЭлАдрес,
	|	ВТ_ЭлАдреса.Объект,
	|	ВТ_Получатели.СтрукЕд
	|ИТОГИ ПО
	|	ЭлАдрес");
	Запрос.УстановитьПараметр("текДата", ТекущаяДата());
	////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВложенныйЗапрос.СтрукЕд,
	|	ВложенныйЗапрос.ОкончанияДействия,
	|	МАКСИМУМ(АК_ТехническиеПаспорта.Ссылка) КАК ТехПаспорт,
	|	РАЗНОСТЬДАТ(&ТекДата, ВложенныйЗапрос.ОкончанияДействия, ДЕНЬ) КАК ОсталосьДней
	|ИЗ
	|	(ВЫБРАТЬ
	|		АК_ТехническиеПаспорта.Владелец КАК СтрукЕд,
	|		МАКСИМУМ(АК_ТехническиеПаспорта.ОкончанияДействия) КАК ОкончанияДействия
	|	ИЗ
	|		Справочник.АК_ТехническиеПаспорта КАК АК_ТехническиеПаспорта
	|	ГДЕ
	|		НЕ АК_ТехническиеПаспорта.ПометкаУдаления
	|		И НЕ АК_ТехническиеПаспорта.Владелец.ПометкаУдаления
	|		И АК_ТехническиеПаспорта.Владелец.СтатусТорговойТочки = ЗНАЧЕНИЕ(перечисление.СтатусыТорговыхТочек.Открыт)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АК_ТехническиеПаспорта.Владелец) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АК_ТехническиеПаспорта КАК АК_ТехническиеПаспорта
	|		ПО ВложенныйЗапрос.СтрукЕд = АК_ТехническиеПаспорта.Владелец
	|			И ВложенныйЗапрос.ОкончанияДействия = АК_ТехническиеПаспорта.ОкончанияДействия
	|ГДЕ
	|	НЕ АК_ТехническиеПаспорта.ПометкаУдаления
	|	И НЕ АК_ТехническиеПаспорта.Владелец.ПометкаУдаления
	|	И АК_ТехническиеПаспорта.Владелец.СтатусТорговойТочки = ЗНАЧЕНИЕ(перечисление.СтатусыТорговыхТочек.Открыт)
	|	И РАЗНОСТЬДАТ(&ТекДата, ВложенныйЗапрос.ОкончанияДействия, ДЕНЬ) < 15
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СтрукЕд,
	|	ВложенныйЗапрос.ОкончанияДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(250)) КАК ЭлАдрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				т.Ответственный
	|			ИЗ
	|				РегистрСведений.АК_ОтветственныеЗаТехПаспорта КАК т)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)");
	
	Запрос.УстановитьПараметр("текДата", ТекущаяДата());
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	Получатели = Пакеты[1].Выгрузить();
	ВыборкаОбъектов = Пакеты[0].Выбрать();
	
	ПочтСообщение = Новый  ИнтернетПочтовоеСообщение;
	ПочтСообщение.Тема = НСтр("ru = 'Кончается срок действия Тех. паспортов'");
	ТекстПисьма = НСтр("ru = 'Необходимо оформить Технические паспорта в следующих магазинах:'") + Символы.ПС;   
	ПочтСообщение.Отправитель = Профиль.Пользователь;
	
	Для Каждого стр Из Получатели Цикл
		ПочтСообщение.Получатели.Добавить(стр.ЭлАдрес);	
	КонецЦикла;
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		ТекстПисьма = ТекстПисьма + НСтр("ru = '%СтрукЕд% (тех. паспорт: %ТП%)'") + Символы.ПС;	
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СтрукЕд%", Строка(ВыборкаОбъектов.СтрукЕд));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТП%", Строка(ВыборкаОбъектов.ТехПаспорт));
		
	КонецЦикла; 
	
	ПочтСообщение.Тексты.Добавить(ТекстПисьма);
	
	Попытка
		Почта.Послать(ПочтСообщение,, ПротоколИнтернетПочты.SMTP);
	Исключение 
		ЗаписьЖурналаРегистрации("РеглЗадание_ОтправкаПочты_ТехПаспорта",,,,ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Почта.Отключиться();
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//---АК_Кибарев, 11.09.17, ИП-00016684

//+++АК Лебедев 18-09-17 ИП-00016688
Процедура АК_ЗапросФотоСКамер() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АК_ПривязкаКамерыКОбъектуНаблюденияСрезПоследних.IDКамеры.IDКамеры КАК IDКамеры,
	|	ЕСТЬNULL(АК_ПривязкаКамерыКОбъектуНаблюденияСрезПоследних.Магазин.НомерТочки, 0) КАК НомерТочки
	|ИЗ
	|	РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних КАК АК_ПривязкаКамерыКОбъектуНаблюденияСрезПоследних";
	
	КамерыСписок = Запрос.Выполнить().Выбрать();
	
	//////
	//Время_16_00  = НачалоДня(ТекущаяДата())+16*60*60;
	ТабВремяРаботы = АК_ВернутьТаблицуВремениРаботы(ТекущаяДата());
	//
	//////
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	Пока КамерыСписок.Следующий() Цикл
		Если Не ЗначениеЗаполнено(КамерыСписок.IDКамеры) Тогда
			продолжить;
		КонецЕсли;
		
		///
		НайденнаяСтрока = ТабВремяРаботы.Найти(КамерыСписок.НомерТочки, "ShopNo");
		Если НайденнаяСтрока <> Неопределено Тогда
			Время_Утро =  НайденнаяСтрока.H_Start;
			Время_Вечер =  НайденнаяСтрока.H_End;
		Иначе
			Время_Утро =  НачалоДня(ТекущаяДата())+10*60*60 + 600;
			Время_Вечер = НачалоДня(ТекущаяДата())+21*60*60 - 600;
		КонецЕсли; 
		
		/// Запрос фото утро
		ТекстЗапроса = 
		"Insert into sms_repl..times_for_video 
		|	(ShopNo,
		|   ip_camera,
		|   text_video,		
		|   is_photo,					
		|	CashID,
		|	CashCheckNo,
		|	time_st,
		|	Time_fin,
		|	is_urgent,
		|	user_add,
		|	Email,
		|	type_video)
		|Values
		|	(&ShopNo,
		|   '&ip_camera',
		|   '&text_video',  
		|   &is_photo, 				
		|	&CashID,
		|	&CashCheckNo,
		|	&TimeSt,
		|	&TimeFin,
		|	&IU,
		|	'1С',
		|	&Email,
		|	21)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&is_photo",1);	 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&TimeSt",ВремяВСтроку(Время_Утро));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&TimeFin",ВремяВСтроку(Время_Утро));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ShopNo",Формат(КамерыСписок.НомерТочки, "ЧГ=0;ЧН="));  
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ip_camera",СокрЛП(КамерыСписок.IDКамеры));	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&text_video",СокрЛП(""));				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&CashID",Формат(0, "ЧГ=0;ЧН="));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&CashCheckNo",Формат(0, "ЧГ=0;ЧН="));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&IU",Формат(Число(0), "ЧГ=0;ЧН="));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Email",ВнешниеДанные.ФорматПоля(""));
		ADOСоединение.Execute(ТекстЗапроса);
		
		
		ТекстЗапросаФото =  " SELECT  [id]
		|
		|  FROM [SMS_REPL].[dbo].[times_for_video]
		|  Where ip_camera='&ip_camera' and type_video=21 and is_photo =1 and ShopNo =&ShopNo and time_st=&TimeSt  
		|  and time_st=&TimeSt and Time_fin=&TimeFin and text_video='&text_video' and is_urgent=&IU  order by id desc";
		//ADOСоединение.Execute(ТекстЗапросаФото);
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&TimeSt",ВремяВСтроку(Время_Утро));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&TimeFin",ВремяВСтроку(Время_Утро));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&ShopNo",Формат(КамерыСписок.НомерТочки, "ЧГ=0;ЧН="));    
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&ip_camera",СокрЛП(КамерыСписок.IDКамеры));	
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&text_video",СокрЛП(""));				
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&IU",Формат(Число(0), "ЧГ=0;ЧН="));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&CashID",Формат(0, "ЧГ=0;ЧН="));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&CashCheckNo",Формат(0, "ЧГ=0;ЧН="));
		
		rs = ADOСоединение.Execute(ТекстЗапросаФото);
		
		rs.MoveFirst();					
		Если НЕ rs.EOF() Тогда  						
			ИДЗаписи = rs.Fields("id").Value;		   
		КонецЕсли;	   
		
		ЗапросВставкаФото = "Insert into sms_repl..times_for_photo
		|    (id
		|    ,time_photo)
		|Values
		|	(&id, 				
		|	&time_photo)";
		
		ЗапросВставкаФото = СтрЗаменить(ЗапросВставкаФото,"&id",Формат(Число(ИДЗаписи), "ЧГ=0;ЧН="));
		ЗапросВставкаФото = СтрЗаменить(ЗапросВставкаФото,"&time_photo",ВремяВСтроку(Время_Утро));
		ADOСоединение.Execute(ЗапросВставкаФото);
		
		
		////////////////
		////////////////
		
		/// Запрос фото Вечер
		ТекстЗапроса = 
		"Insert into sms_repl..times_for_video 
		|	(ShopNo,
		|   ip_camera,
		|   text_video,		
		|   is_photo,					
		|	CashID,
		|	CashCheckNo,
		|	time_st,
		|	Time_fin,
		|	is_urgent,
		|	user_add,
		|	Email,
		|	type_video)
		|Values
		|	(&ShopNo,
		|   '&ip_camera',
		|   '&text_video',  
		|   &is_photo, 				
		|	&CashID,
		|	&CashCheckNo,
		|	&TimeSt,
		|	&TimeFin,
		|	&IU,
		|	'1С',
		|	&Email,
		|	22)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&is_photo",1);	 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&TimeSt",ВремяВСтроку(Время_Вечер));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&TimeFin",ВремяВСтроку(Время_Вечер));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ShopNo",Формат(КамерыСписок.НомерТочки, "ЧГ=0;ЧН="));  
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ip_camera",СокрЛП(КамерыСписок.IDКамеры));	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&text_video",СокрЛП(""));				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&CashID",Формат(0, "ЧГ=0;ЧН="));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&CashCheckNo",Формат(0, "ЧГ=0;ЧН="));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&IU",Формат(Число(0), "ЧГ=0;ЧН="));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Email",ВнешниеДанные.ФорматПоля(""));
		ADOСоединение.Execute(ТекстЗапроса);
		
		
		ТекстЗапросаФото =  " SELECT  [id]
		|
		|  FROM [SMS_REPL].[dbo].[times_for_video]
		|  Where ip_camera='&ip_camera' and type_video=22 and is_photo =1 and ShopNo =&ShopNo and time_st=&TimeSt  
		|  and time_st=&TimeSt and Time_fin=&TimeFin and text_video='&text_video' and is_urgent=&IU  order by id desc";
		//ADOСоединение.Execute(ТекстЗапросаФото);
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&TimeSt",ВремяВСтроку(Время_Вечер));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&TimeFin",ВремяВСтроку(Время_Вечер));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&ShopNo",Формат(КамерыСписок.НомерТочки, "ЧГ=0;ЧН="));    
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&ip_camera",СокрЛП(КамерыСписок.IDКамеры));	
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&text_video",СокрЛП(""));				
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&IU",Формат(Число(0), "ЧГ=0;ЧН="));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&CashID",Формат(0, "ЧГ=0;ЧН="));
		ТекстЗапросаФото = СтрЗаменить(ТекстЗапросаФото,"&CashCheckNo",Формат(0, "ЧГ=0;ЧН="));
		
		rs = ADOСоединение.Execute(ТекстЗапросаФото);
		
		rs.MoveFirst();					
		Если НЕ rs.EOF() Тогда  						
			ИДЗаписи = rs.Fields("id").Value;		   
		КонецЕсли;	   
		
		ЗапросВставкаФото = "Insert into sms_repl..times_for_photo
		|    (id
		|    ,time_photo)
		|Values
		|	(&id, 				
		|	&time_photo)";
		
		ЗапросВставкаФото = СтрЗаменить(ЗапросВставкаФото,"&id",Формат(Число(ИДЗаписи), "ЧГ=0;ЧН="));
		ЗапросВставкаФото = СтрЗаменить(ЗапросВставкаФото,"&time_photo",ВремяВСтроку(Время_Вечер));
		ADOСоединение.Execute(ЗапросВставкаФото);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АК_СохранитьЗапрошенныеФото() Экспорт
	
	////
	//Вчера_Время_16_00  = НачалоДня(ТекущаяДата())-8*60*60;
	ИмяКаталогаНовых1 = "\\10.0.0.51\1c$\MagazinBudush\New1"; 
	ИмяКаталогаНовых2 = "\\10.0.0.51\1c$\MagazinBudush\New2";
	
	ИмяКаталогаРабочих = "\\10.0.0.51\1c$\MagazinBudush\Work";
	
	
	Попытка
		УдалитьФайлы(ИмяКаталогаНовых1, "*.jpg"); 
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяКаталогаНовых2, "*.jpg"); 
	Исключение
	КонецПопытки;
	
	////
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	
	///////////// Сохранение фото утро
	ТекстЗапроса =
	"SELECT V.[id]
	|	,V.[ShopNo]
	|	,V.[ip_camera]	  
	|	,V.[time_st]
	|	,V.[Time_fin]
	|	,Cast(V.[periods_text] as nvarchar(100)) as periods_text
	|	,Cast(V.text_video as nvarchar(100))as text_video
	|	,V.Type_video
	|	,T.name_type_video as Type_str
	|	,Cast(V.[Link_Download] as nvarchar(100)) as Link_Download
	|	,Cast(F.[Link_Download]  as nvarchar(100)) as  flinkdownload          
	|	,F.[time_photo]
	|	,V.[is_photo]	  
	|FROM [SMS_REPL].[dbo].[times_for_video] V (nolock)
	|left outer join [SMS_REPL].[dbo].[tfv_type_video] T 
	|on V.type_video=T.id_type_video 
	|left outer join [SMS_REPL].[dbo].[times_for_photo] F (nolock)
	|on V.ID=F.ID
	|WHERE 
	|&When  &Type 
	|order by V.id";
	
	УсловиеКогда = " ((TIME_ST between &TimeStart and &TimeFinish) or (Time_Fin between &TimeStart and &TimeFinish))";
	УсловиеКогда = СтрЗаменить(УсловиеКогда,"&TimeStart",ВремяВСтроку(НачалоДня(НачалоДня(ТекущаяДата())-1)));
	УсловиеКогда = СтрЗаменить(УсловиеКогда,"&TimeFinish",ВремяВСтроку(НачалоДня(ТекущаяДата())-1));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&When",УсловиеКогда);
	
	УсловиеТип ="And (V.Type_video="+Формат(21,"ЧН=; ЧГ=0")+")";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Type",УсловиеТип);
	
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			//
			ИДКамера =  СокрЛП(rs.Fields("ip_camera").Value);		
			ИмяФайла = СтрЗаменить(ИДКамера,".","-");
			Попытка
				СтрокаЗапроса = rs.Fields("flinkdownload").Value;
				
				ДанныеЗапроса = Новый Структура("СтрокаСоединения,Запрос");
				Путь = Сред(СтрокаЗапроса,Найти(СтрокаЗапроса,"//")+2);
				ПозРазделителя = Найти(Путь,"/");
				ДанныеЗапроса.СтрокаСоединения = Лев(Путь,ПозРазделителя-1);
				ДанныеЗапроса.Запрос = Сред(Путь,ПозРАзделителя+1);
				
				
				Соединение = Новый HTTPСоединение(ДанныеЗапроса.СтрокаСоединения);
				
				Запрос = Новый HTTPЗапрос(ДанныеЗапроса.Запрос);
				
				ПолученныйФайл= ИмяКаталогаНовых1+"\"+ИмяФайла+".jpg";
				
				Соединение.ОтправитьДляОбработки(Запрос,ПолученныйФайл);
				
				////Скачиваем в свою папку с 10.0.0.190  только новые
				//10.0.0.190/photos/&IDКамеры
				ФайлПроверка = Новый Файл (ИмяКаталогаРабочих+"\"+ИмяФайла+".jpg");
				Если НЕ ФайлПроверка.Существует() Тогда
					Соединение = Новый HTTPСоединение("10.0.0.190");
					
					Запрос = Новый HTTPЗапрос("photos/"+ИДКамера);
					
					ПолученныйФайл= ИмяКаталогаРабочих+"\"+ИмяФайла+".jpg";
					
					//Соединение.ОтправитьДляОбработки(Запрос,ПолученныйФайл);
					Результат = Соединение.Получить(Запрос);
					Результат.ПолучитьТелоКакДвоичныеДанные().Записать(ПолученныйФайл);
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			///////
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	
	
	////////////////
	////////////////
	///////////// Сохранение фото вечер
	ТекстЗапроса =
	"SELECT V.[id]
	|	,V.[ShopNo]
	|	,V.[ip_camera]	  
	|	,V.[time_st]
	|	,V.[Time_fin]
	|	,Cast(V.[periods_text] as nvarchar(100)) as periods_text
	|	,Cast(V.text_video as nvarchar(100))as text_video
	|	,V.Type_video
	|	,T.name_type_video as Type_str
	|	,Cast(V.[Link_Download] as nvarchar(100)) as Link_Download
	|	,Cast(F.[Link_Download]  as nvarchar(100)) as  flinkdownload          
	|	,F.[time_photo]
	|	,V.[is_photo]	  
	|FROM [SMS_REPL].[dbo].[times_for_video] V (nolock)
	|left outer join [SMS_REPL].[dbo].[tfv_type_video] T 
	|on V.type_video=T.id_type_video 
	|left outer join [SMS_REPL].[dbo].[times_for_photo] F (nolock)
	|on V.ID=F.ID
	|WHERE 
	|&When  &Type 
	|order by V.id";
	
	УсловиеКогда = " ((TIME_ST between &TimeStart and &TimeFinish) or (Time_Fin between &TimeStart and &TimeFinish))";
	УсловиеКогда = СтрЗаменить(УсловиеКогда,"&TimeStart",ВремяВСтроку(НачалоДня(НачалоДня(ТекущаяДата())-1)));
	УсловиеКогда = СтрЗаменить(УсловиеКогда,"&TimeFinish",ВремяВСтроку(НачалоДня(ТекущаяДата())-1));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&When",УсловиеКогда);
	
	УсловиеТип ="And (V.Type_video="+Формат(22,"ЧН=; ЧГ=0")+")";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Type",УсловиеТип);
	
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			//
			ИДКамера =  СокрЛП(rs.Fields("ip_camera").Value);		
			ИмяФайла = СтрЗаменить(ИДКамера,".","-");
			Попытка
				СтрокаЗапроса = rs.Fields("flinkdownload").Value;
				
				ДанныеЗапроса = Новый Структура("СтрокаСоединения,Запрос");
				Путь = Сред(СтрокаЗапроса,Найти(СтрокаЗапроса,"//")+2);
				ПозРазделителя = Найти(Путь,"/");
				ДанныеЗапроса.СтрокаСоединения = Лев(Путь,ПозРазделителя-1);
				ДанныеЗапроса.Запрос = Сред(Путь,ПозРАзделителя+1);
				
				
				Соединение = Новый HTTPСоединение(ДанныеЗапроса.СтрокаСоединения);
				
				Запрос = Новый HTTPЗапрос(ДанныеЗапроса.Запрос);
				
				ПолученныйФайл= ИмяКаталогаНовых2+"\"+ИмяФайла+".jpg";
				
				Соединение.ОтправитьДляОбработки(Запрос,ПолученныйФайл);
				
				////Скачиваем в свою папку с 10.0.0.190  только новые
				//10.0.0.190/photos/&IDКамеры
				ФайлПроверка = Новый Файл (ИмяКаталогаРабочих+"\"+ИмяФайла+".jpg");
				Если НЕ ФайлПроверка.Существует() Тогда
					Соединение = Новый HTTPСоединение("10.0.0.190");
					
					Запрос = Новый HTTPЗапрос("photos/"+ИДКамера);
					
					ПолученныйФайл= ИмяКаталогаРабочих+"\"+ИмяФайла+".jpg";
					
					//Соединение.ОтправитьДляОбработки(Запрос,ПолученныйФайл);
					Результат = Соединение.Получить(Запрос);
					Результат.ПолучитьТелоКакДвоичныеДанные().Записать(ПолученныйФайл);
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			///////
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	//Запустим механизм сверки фото
	АК_ПроизвестиСверкуФотоСКамер();
	
КонецПроцедуры

Процедура АК_ПроизвестиСверкуФотоСКамер() 
	//входные папка	
	К1_1 = "/mnt/MagazinBudush/New1";
	К1_2 = "/mnt/MagazinBudush/New2";
	
	К2 =  "/mnt/MagazinBudush/Work";
	//выходная папка
	К3_1 =  "/mnt/MagazinBudush/OUT1";
	К3_2 =  "/mnt/MagazinBudush/OUT2";
	
	//http://10.0.0.70:8080/detect_camera_shift?input_dir1=/root/tmp/1&input_dir2=/root/tmp/2&output_dir=/root/tmp/out&shift_magnitude_threshold=12.0&shift_count_threshold=0.40
	//где 
	//input_dir1, input_dir2m output_dir - это 2 входных и одна выходная папки. 
	//shift_magnitude_threshold - это порог, при превышении которого смещение считается большим
	//shift_count_threshold - это порог (доля от общего числа пискселей) больших смещений, при превышении которого мы считаем, что камера сдвинулась
	//12 и 0.40 (40%) - разумные значения, дающие хорошие результаты
	
	АдресСервера = "http://10.0.0.70:8080/detect_camera_shift?input_dir1="+К1_1+"&input_dir2="+К2+"&output_dir="+К3_1+"&shift_magnitude_threshold=12.0&shift_count_threshold=0.75";
	
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Open("GET", АдресСервера,0);
	WinHttp.Option(2,"utf-8");
	WinHttp.SetRequestHeader("Accept-Language", "ru");
	WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	WinHttp.setRequestHeader("Content-Language", "ru");
	WinHttp.setRequestHeader("Content-Charset", "utf-8");
	WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
	попытка
		WinHttp.Send();
	исключение
	конецпопытки;
	АдресСервера = "http://10.0.0.70:8080/detect_camera_shift?input_dir1="+К1_2+"&input_dir2="+К2+"&output_dir="+К3_2+"&shift_magnitude_threshold=12.0&shift_count_threshold=0.75";
	
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Open("GET", АдресСервера,0);
	WinHttp.Option(2,"utf-8");
	WinHttp.SetRequestHeader("Accept-Language", "ru");
	WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	WinHttp.setRequestHeader("Content-Language", "ru");
	WinHttp.setRequestHeader("Content-Charset", "utf-8");
	WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
	попытка
		WinHttp.Send();
	исключение
	конецпопытки;
	
КонецПроцедуры

Процедура АК_ОбновитьЭталонныеФото() Экспорт
	
	К_Рабочий = "\\10.0.0.51\1c$\MagazinBudush\Work";
	К_Архив =  "\\10.0.0.51\1c$\MagazinBudush\Old";
	
	К_НеНастроеныРакурсы1 =  "\\10.0.0.51\1c$\MagazinBudush\OUT1\Failed";
	К_НеНастроеныРакурсы2 =  "\\10.0.0.51\1c$\MagazinBudush\OUT2\Failed";
	
	Таблица1 = новый ТаблицаЗначений;
	Таблица1.Колонки.Добавить("ИмяБезРасширения",,"ИмяБезРасширения");
	
	Таблица2 = новый ТаблицаЗначений;
	Таблица2.Колонки.Добавить("ИмяБезРасширения",,"ИмяБезРасширения");
	
	НайденныеФайлы1 = НайтиФайлы(К_НеНастроеныРакурсы1, "*-1.jpg"); 
	Для Каждого файл из НайденныеФайлы1 Цикл
		Если файл.размер() > 50000 Тогда   //Игнорируем файлы меньше 50кб
			
			Стр=Таблица1.Добавить();
			Стр.ИмяБезРасширения=файл.ИмяБезРасширения;
			
		КонецЕсли;
	КонецЦикла;
	
	НайденныеФайлы2 = НайтиФайлы(К_НеНастроеныРакурсы2, "*-1.jpg"); 
	Для Каждого файл из НайденныеФайлы2 Цикл
		Если файл.размер() > 50000 Тогда   //Игнорируем файлы меньше 50кб
			
			Стр=Таблица2.Добавить();
			Стр.ИмяБезРасширения=файл.ИмяБезРасширения;
			
		КонецЕсли;
	КонецЦикла;
	
	
	ТаблицаРезультат = АК_РазницаТаблицЗначений(Таблица1, Таблица2);
	
	Для Каждого файл из ТаблицаРезультат Цикл
		
		//Переместим из рабочего каталога в архив
		ИмяФайла = Лев(файл.ИмяБезРасширения,СтрДлина(файл.ИмяБезРасширения)-2);
		НовоеИмяФайла = файл.ИмяБезРасширения + "__" + Формат(ТекущаяДата(), "ггггММддЧЧммсс") + ".jpg";
		
		ПереместитьФайл(К_Рабочий + "\" + ИмяФайла + ".jpg" , К_Архив + "\" + НовоеИмяФайла);
		
		//Переместим новое фото в рабочий каталог
		ПереместитьФайл(К_НеНастроеныРакурсы1 + "\" + файл.ИмяБезРасширения+ ".jpg" , К_Рабочий + "\" +  ИмяФайла + ".jpg");	
		
		КамераСсылка = Справочники.АК_ID_Камеры.НайтиПоРеквизиту("IDКамеры",стрЗаменить(ИмяФайла,"-","."));
		КамераОбъект = КамераСсылка.ПолучитьОбъект();
		КамераОбъект.НеНастроеныРакурсы = Истина;
		КамераОбъект.Записать();
	КонецЦикла;
	
	
	попытка
		УдалитьФайлы(К_НеНастроеныРакурсы1); 
		УдалитьФайлы("\\10.0.0.51\1c$\MagazinBudush\OUT1\ok"); 
	исключение
	КонецПопытки;
	
	попытка
		УдалитьФайлы(К_НеНастроеныРакурсы2); 
		УдалитьФайлы("\\10.0.0.51\1c$\MagazinBudush\OUT2\ok");
	исключение
	КонецПопытки;
	
	
КонецПроцедуры

Функция ДатаВремяВСтроку(Дата,Время)
	Результат = Формат(Дата,"ДФ=yyyy-MM-dd")+" "+?(Час(Время)<10,"0","")+Формат(Время,"ДЛФ=T; ДП=0:00:00");
	Возврат "{ts'"+Результат+"'}"
КонецФункции

Функция ВремяВСтроку(Время)
	Результат = Формат(Время,"ДФ=yyyy-MM-dd")+" "+?(Час(Время)<10,"0","")+Формат(Время,"ДЛФ=T; ДП=0:00:00");
	Возврат "{ts'"+Результат+"'}"
КонецФункции

Функция АК_РазницаТаблицЗначений(Таблица1, Таблица2) 
	
	ТаблицаОбщая = Таблица1.Скопировать();
	ТаблицаОбщая.Колонки.Добавить("sys_ИндексСтроки");
	ТаблицаОбщая.Колонки.Добавить("sys_ПоказательТаблицы");
	
	ИндексСтроки = 0;
	Для каждого СтрокаОбщейТаблицы Из ТаблицаОбщая Цикл
		СтрокаОбщейТаблицы.sys_ИндексСтроки = ИндексСтроки;
		СтрокаОбщейТаблицы.sys_ПоказательТаблицы = 1;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	ИндексСтроки = 0;
	Для каждого СтрокаТаблицы2 Из Таблица2 Цикл
		СтрокаОбщейТаблицы = ТаблицаОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбщейТаблицы, СтрокаТаблицы2);
		СтрокаОбщейТаблицы.sys_ИндексСтроки = ИндексСтроки;
		СтрокаОбщейТаблицы.sys_ПоказательТаблицы = 2;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	
	// Сворачивание совпадающих строк
	
	ТаблицаОбщая.Свернуть("sys_ИндексСтроки", "sys_ПоказательТаблицы");
	
	// Получение результатов
	
	МассивСовпадающиеСтроки = Новый Массив;
	СтрокиСПоказателем3 = ТаблицаОбщая.НайтиСтроки(Новый Структура("sys_ПоказательТаблицы", 3));
	Для каждого СтрокаОбщейТаблицы Из СтрокиСПоказателем3 Цикл
		МассивСовпадающиеСтроки.Добавить(Таблица1[СтрокаОбщейТаблицы.sys_ИндексСтроки]);
	КонецЦикла;
	
	Возврат МассивСовпадающиеСтроки;
	
КонецФункции

Функция АК_ВернутьТаблицуВремениРаботы(ДатаЗапроса)
	////
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	
	ТабВремяРаботы = новый ТаблицаЗначений;
	ТабВремяРаботы.Колонки.Добавить("id_tt",,"id_tt");
	ТабВремяРаботы.Колонки.Добавить("ShopNo",,"ShopNo");
	ТабВремяРаботы.Колонки.Добавить("dw",,"dw");
	ТабВремяРаботы.Колонки.Добавить("H_Start",,"H_Start");
	ТабВремяРаботы.Колонки.Добавить("H_End",,"H_End");
	
	
	ТекстЗапроса = 
	"SELECT TOP 1000 [id_tt]
	|    ,[ShopNo]
	|    ,[dw]
	|    ,[H_Start]
	|    ,[H_End]
	|FROM [Reports].[dbo].[Schedule_Shop_Work]
	|WHERE dw = &DayWeek";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&DayWeek",ДеньНедели(ДатаЗапроса));
	rs = ADOСоединение.Execute(ТекстЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			Стр=ТабВремяРаботы.Добавить();
			Стр.id_tt= rs.Fields("id_tt").Value;
			Стр.ShopNo= rs.Fields("ShopNo").Value;
			Стр.dw= rs.Fields("dw").Value;
			Стр.H_Start= Дата(Лев(Строка(ТекущаяДата()),11)+Лев(rs.Fields("H_Start").Value,8)) + 600;
			Стр.H_End= Дата(Лев(Строка(ТекущаяДата()),11)+Лев(rs.Fields("H_End").Value,8)) - 600;
			
			///////
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	Возврат ТабВремяРаботы;
	
КонецФункции

Процедура АК_ОбновитьРабочииФотоВПапке() Экспорт
	
	ИмяКаталогаРабочих = "\\10.0.0.51\1c$\MagazinBudush\Work";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АК_ПривязкаКамерыКОбъектуНаблюденияСрезПоследних.IDКамеры.IDКамеры КАК IDКамеры,
	|	ЕСТЬNULL(АК_ПривязкаКамерыКОбъектуНаблюденияСрезПоследних.Магазин.НомерТочки, 0) КАК НомерТочки
	|ИЗ
	|	РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних КАК АК_ПривязкаКамерыКОбъектуНаблюденияСрезПоследних";
	
	КамерыСписок = Запрос.Выполнить().Выбрать();
	
	Пока КамерыСписок.Следующий() Цикл
		Если Не ЗначениеЗаполнено(КамерыСписок.IDКамеры) Тогда
			продолжить;
		КонецЕсли;
		ИДКамера =  КамерыСписок.IDКамеры;
		ИмяФайла = СтрЗаменить(ИДКамера,".","-");
		
		
		// 		ФайлПроверка = Новый Файл (ИмяКаталогаРабочих+"\"+ИмяФайла+".jpg");
		// 		Если НЕ ФайлПроверка.Существует() Тогда
		Соединение = Новый HTTPСоединение("10.0.0.190");
		
		Запрос = Новый HTTPЗапрос("photos/"+ИДКамера);
		
		ПолученныйФайл= ИмяКаталогаРабочих+"\"+ИмяФайла+".jpg";
		
		//Соединение.ОтправитьДляОбработки(Запрос,ПолученныйФайл);
		Результат = Соединение.Получить(Запрос);
		Результат.ПолучитьТелоКакДвоичныеДанные().Записать(ПолученныйФайл);
		// 		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


//---АК Лебедев 18-09-17 ИП-00016688

// +++ АК mirv 28.09.2017 [ИП-00015553]
// 
Процедура АК_РассылкаОтчетаПоНеподписаннымДокументам() Экспорт
	Рассылка = Обработки.АК_ФормированиеИОтправкаОтчетаПоНеподписаннымДокументам.Создать();
	Рассылка.СформироватьИОтправить();
КонецПроцедуры

// --- АК mirv  

//+++AK GREK 01.10.2017 ИП-00016653
//
Процедура  ОбработкаОшибокОтправкиПочтовыхСообщений() Экспорт
	Обработка = Обработки.АК_ОбработкаОшибокОтправкиПочтовыхСообщений.Создать();
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000052");
	ДатаНачало = ТекущаяДата() - 24*3600;
	ДатаКонец = ТекущаяДата();
	ТаблицаОшибок = Обработка.ПолучитьТаблицуОшибокОтправкиПочтовыхСообщений(УчетнаяЗаписьЭлектроннойПочты, ДатаНачало, ДатаКонец);
	Обработка.ОбработатьТаблицуОшибокОтправкиПочтовыхСообщений(ТаблицаОшибок);
КонецПроцедуры
//---AK

//+++АК ZHAS 13-10-17 ИП-00016978.000.00000001
Процедура ПолучениеПочтыСФильтрами() Экспорт
	УправлениеЭлектроннойПочтойРегламент.ПолучитьСообщенияСПочтовогоЯщика(Неопределено);
КонецПроцедуры
//+++АК ZHAS 13-10-17 ИП-00016978.000.00000001

//mika Дата: 2017.10.14 ИП-00016603

// Процедура выполяет фоновую отправку писем
//
// Параметры:
//  <ДокументСсылка>             - Ссылка на документ для формирования отложенной отправки письма
//  <СтруктураПараметровСтрока>  - <Тип.Массив> - Массив с произвольными параметрами 
//                 	       Первая запись в массиве - ссылка на документ.
Процедура ОтправитьПисьмоФоновоеЗадание(ДокументСсылка, СтруктураПараметровСтрока = Неопределено) Экспорт
	
	Если СтруктураПараметровСтрока <> Неопределено Тогда
		
		СтруктураПараметров = ЗначениеИзСтрокиВнутр(СтруктураПараметровСтрока);
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ИзменениеЗакупочныхЦен") Тогда
		
		СтруктураПараметров.Вставить("ДокументСсылка", ДокументСсылка);
		
		Если СтруктураПараметров <> Неопределено Тогда
			РегистрыСведений.ОчередьДокументовДляОтправки.ВыполнитьОтправкуПисьма(СтруктураПараметров);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ОтправитьПисьмоФоновоеЗадание()

Процедура АК_АкцептированиеТехПаспортов() Экспорт
	
	////+++АК_Кибарев, 22.10.17, ИП-00016684
	Обработка = Обработки.АК_ЗагрузкаАкцептаТехПаспортов.Создать();
	Обработка.Загрузить();
	//---АК_Кибарев, 22.10.17, ИП-00016684
	
КонецПроцедуры
//mika

//mika Дата: 2017.11.10 ИП-00017105

// Процедура формирует список магазинов по которым необходимо запустить "обнуление" 
// позиций в таблице SMS_REPL.TD_OstDetail, если фактический остаток (SMS_REPL.TD_Ost) равен "0".
//
Процедура ОбнулениеПозицийБезОстаткаВсеМагазиныРегламент() Экспорт
	
	Обработки.РабочийСтолПродавца.ОбнулениеПозицийБезОстаткаВсеМагазины();
	
КонецПроцедуры // ОбнулениеПозицийБезОстаткаВсеМагазины()
//mika

// +++ АК mirv 12.11.2017 [ИП-00015834]
Процедура ОбработатьСведенияСтопОплата() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОСтопОплатеСрезПоследних.Период,
	|	СведенияОСтопОплатеСрезПоследних.Контрагент,
	//+++АК sils 04.09.2018 ИП-00019634
	|	СведенияОСтопОплатеСрезПоследних.Организация,
	//---АК
	|	СведенияОСтопОплатеСрезПоследних.СтопОплата,
	|	СведенияОСтопОплатеСрезПоследних.Подтверждено,
	|	СведенияОСтопОплатеСрезПоследних.Руководитель,
	|	СведенияОСтопОплатеСрезПоследних.ЭлАдрес,
	|	СведенияОСтопОплатеСрезПоследних.Комментарий,
	|	СведенияОСтопОплатеСрезПоследних.УстановилВСтопОплату,
	|	СведенияОСтопОплатеСрезПоследних.GUID,
	|	СведенияОСтопОплатеСрезПоследних.БлокироватьДо
	|ИЗ
	|	РегистрСведений.СведенияОСтопОплате.СрезПоследних(
	|			&ДатаСреза,
	|			НАЧАЛОПЕРИОДА(БлокироватьДо, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаСреза, ДЕНЬ)
	|				И Подтверждено
	|				И СтопОплата) КАК СведенияОСтопОплатеСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		//+++АК sils 04.09.2018 ИП-00019634
		ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
		//---АК
		НаборЗаписей = РегистрыСведений.СведенияОСтопОплате.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		//+++АК sils 04.09.2018 ИП-00019634
		НаборЗаписей.Отбор.Организация.Установить(ТекОрганизация);
		//---АК
		НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НовЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, ВыборкаДетальныеЗаписи);
		НовЗапись.СтопОплата = Ложь;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
		
		// Отправка почты
		Тема = "Снятие стоп оплаты по " + СокрЛП(Контрагент);
		ТекстПисьма = "По контрагенту " + СокрЛП(Контрагент) + " подана заявка на снятие стоп оплаты. Ождидается подтверждение." + Символы.ПС + 
		"Автоматически сформирована заявка на снятие стоп оплаты " + ТекущаяДата() + Символы.ПС + 
		"Причина стоп-оплаты: " + СокрЛП(ВыборкаДетальныеЗаписи.Комментарий) + Символы.ПС + 
		"Руководитель: " + ВыборкаДетальныеЗаписи.Руководитель + Символы.ПС + 
		"Основной бухгалтер: " + Контрагент.ОсновнойБухгалтерПокупателя + Символы.ПС + 
		"Основной менеджер: " + Контрагент.ОсновнойМенеджерПокупателя;
		//+++АК sils 04.09.2018 ИП-00019634
		Если ЗначениеЗаполнено(ТекОрганизация) Тогда
			Тема = Тема + " (Организация " + СокрЛП(ТекОрганизация) + ")";
			ТекстПисьма = СтрЗаменить(ТекстПисьма, " подана заявка", " (Организация " + СокрЛП(ТекОрганизация) + ") подана заявка");
		КонецЕсли;
		//---АК
		
		СЗ = Новый СписокЗначений;
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Сотрудник");
		ТЗ.Колонки.Добавить("ЭлАдрес");
		
		ТЗ.Колонки.Добавить("ПодтверждениеЧерезПочту");
		
		// Отправка письма руководителю, если не текущий пользователь
		НовСтр = ТЗ.Добавить();
		НовСтр.Сотрудник = ВыборкаДетальныеЗаписи.Руководитель;
		НовСтр.ЭлАдрес = СокрЛП(ВыборкаДетальныеЗаписи.ЭлАдрес);
		
		// Отправка письма ответственным менеджеру и буху, если не текущий пользователь
		СЗ.Добавить(Контрагент.ОсновнойБухгалтерПокупателя.ФизЛицо);
		СЗ.Добавить(Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо);
		
		// Находим их адреса и в таблицу ТЗ
		ТЗ1 = НайтиЭлАдрес(СЗ);
		Для каждого стр из ТЗ1 Цикл
			НовСтр = ТЗ.Добавить();
			НовСтр.Сотрудник = стр.Сотрудник;
			НовСтр.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
		КонецЦикла;
		
		//Добавляем туда из регистра всех, у кого стоит флаг рассылки и фин.менеджеру (кроме текущего пользователя)
		Набор = РегистрыСведений.РуководителиСтопОплаты.СоздатьНаборЗаписей();
		Набор.Прочитать();
		
		Для каждого стр из Набор Цикл
			стр1 = ТЗ.Найти(стр.Сотрудник);
			Если стр1 <> Неопределено Тогда
				стр1.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
				Продолжить;
			КонецЕсли;
			
			Если стр.РассылкаСтопОплата Тогда
				НовСтр = ТЗ.Добавить();
				НовСтр.Сотрудник = стр.Сотрудник;
				НовСтр.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
				Если стр.Руководитель Тогда
					НовСтр.ПодтверждениеЧерезПочту = Стр.ПодтверждениеЧерезПочту;
				КонецЕсли;
			ИначеЕсли стр.ФинМенеджер Тогда
				НовСтр = ТЗ.Добавить();
				НовСтр.Сотрудник = стр.Сотрудник;
				НовСтр.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
			КонецЕсли; 		
			
		КонецЦикла;
		
		ТЗ.Свернуть("Сотрудник, ЭлАдрес, ПодтверждениеЧерезПочту", "");
		
		// Отправляем письма и сообщаем у кого адрес не найден
		
		АдресОтправки = "no-reply@vkusvill.ru";
		Почта = Новый ИнтернетПочта;   	
		УчёткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу(АдресОтправки);	
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
		Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);  
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = Тема;
		Письмо.ИмяОтправителя = СокрЛП(УчёткаДляНастройки);
		Письмо.Отправитель.Адрес = АдресОтправки;
		
		Для каждого СтрокаТаб Из ТЗ Цикл
			Получатель = Письмо.Получатели.Добавить();   
			Получатель.Адрес = СокрЛП(СтрокаТаб.ЭлАдрес);   
		КонецЦикла; 
		
		ID_MESSAGE 									= Строка(Новый УникальныйИдентификатор);
		TYPE_MESSAGE                                = 5;   
		
		GUID_Заявки									= ВыборкаДетальныеЗаписи.GUID;
		Объект_Ссылка								= Неопределено;
		Таблица 									= СтрЗаменить(ТекстПисьма, Символы.ПС, "<br>") + "<br><br>";
		ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
		ТекстСообщения.ТипТекста 					= ТипТекстаПочтовогоСообщения.HTML;
		
		СписокКому = Новый СписокЗначений;
		СписокКому.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("ЭлАдрес"));
		
		Попытка
			УправлениеЭлектроннойПочтой.ОтправитьЗаявкуНаПодтверждение(Тема, Таблица, , СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, АдресОтправки, Неопределено, Неопределено, Объект_Ссылка);
		Исключение
			//ОписаниеОшибки()
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры
// --- АК mirv  

// +++ АК mirv 12.11.2017 [ИП-00015834]
Функция НайтиЭлАдрес(СЗ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Сотрудник,
	|	КонтактнаяИнформация.Представление КАК ЭлАдрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Объект В(&Объект)";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Объект", СЗ);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
// --- АК mirv  

//+++AK GREK 05.12.2017 ИП-00017234
Процедура  АвтоматическоеПрисвоениеПомощникаПоРасскруткеМагазина() Экспорт
	ТекстЛога = "";
	//Подберем магазины нуждающиеся в менеджере по раскрутке
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.ДатаОткрытия,
	|	СтруктурныеЕдиницы.Адрес
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(СтруктурныеЕдиницы.ДатаОткрытия, ДЕНЬ) = ДОБАВИТЬКДАТЕ(&ПериодСегодня, ДЕНЬ, 5)
	|	И СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ПериодСегодня", НачалоДня(ТекущаяДата()));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ТекстЛога = "Нет магазинов нуждающихся в менеджере по раскрутке";
		ОтправитьЛогАвтоматическогоПрисвоенияПомощникаПоРасскруткеМагазина(ТекстЛога);
		Возврат;
	КонецЕсли;
	МагазиныНуждающиесяВПомощникеПоРаскрутке = Рез.Выгрузить();
	
	//Далее действуем в соответствии с алгоритмом предоставленым заказчиком
	//Найдем продавцов управления развития, для которых не запланированы на ближайшую неделю пропуски работы  
	//и таких кто за последние 40 дней не работал в магазинах с количеством продавцов меньше четырех
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница,
	|	ЦФОСтруктурныхЕдиниц.ЦФО,
	|	ЦФОСтруктурныхЕдиниц.Организация,
	|	ТабельРаботыПродавцов.Сотрудник КАК Продавец
	|ПОМЕСТИТЬ ВТ_ПродавцыРазвития
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц КАК ЦФОСтруктурныхЕдиниц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|		ПО ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница = ТабельРаботыПродавцов.ТорговаяТочка
	|ГДЕ
	|	ЦФОСтруктурныхЕдиниц.Период > ДОБАВИТЬКДАТЕ(&ПериодСегодня, ДЕНЬ, -40)
	|	И ЦФОСтруктурныхЕдиниц.ЦФО = &ЦФО
	|	И ТабельРаботыПродавцов.Период > ДОБАВИТЬКДАТЕ(&ПериодСегодня, ДЕНЬ, -40)
	|	И ТабельРаботыПродавцов.Период <= &ПериодСегодня
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПродавцыРазвития.Продавец,
	|	ТабельРаботыПродавцов.ТорговаяТочка,
	|	ТабельРаботыПродавцов.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ГрафикРаботыПродавцов
	|ИЗ
	|	ВТ_ПродавцыРазвития КАК ВТ_ПродавцыРазвития
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|		ПО ВТ_ПродавцыРазвития.Продавец = ТабельРаботыПродавцов.Сотрудник
	|ГДЕ
	|	ТабельРаботыПродавцов.Период МЕЖДУ &ПериодСегодня И ДОБАВИТЬКДАТЕ(&ПериодСегодня, ДЕНЬ, 7)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГрафикРаботыПродавцов.Период,
	|	ВТ_ГрафикРаботыПродавцов.ТорговаяТочка,
	|	ВТ_ГрафикРаботыПродавцов.Продавец,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабельРаботыПродавцов.Сотрудник) КАК КоличествоПродавцовВТочках
	|ПОМЕСТИТЬ ВТ_ГрафикРаботыПродавцовКоличествоПродавцовВТочках
	|ИЗ
	|	ВТ_ГрафикРаботыПродавцов КАК ВТ_ГрафикРаботыПродавцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|		ПО ВТ_ГрафикРаботыПродавцов.ТорговаяТочка = ТабельРаботыПродавцов.ТорговаяТочка
	|			И ВТ_ГрафикРаботыПродавцов.Период = ТабельРаботыПродавцов.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ГрафикРаботыПродавцов.Период,
	|	ВТ_ГрафикРаботыПродавцов.ТорговаяТочка,
	|	ВТ_ГрафикРаботыПродавцов.Продавец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГрафикРаботыПродавцовКоличествоПродавцовВТочках.Продавец,
	|	МИНИМУМ(ВТ_ГрафикРаботыПродавцовКоличествоПродавцовВТочках.КоличествоПродавцовВТочках) КАК КоличествоПродавцовВТочках
	|ПОМЕСТИТЬ ВТ_КоличествоПродавцов
	|ИЗ
	|	ВТ_ГрафикРаботыПродавцовКоличествоПродавцовВТочках КАК ВТ_ГрафикРаботыПродавцовКоличествоПродавцовВТочках
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ГрафикРаботыПродавцовКоличествоПродавцовВТочках.Продавец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПродавцыРазвития.Продавец,
	|	ТабельРаботыПродавцов.Отсутствие
	|ПОМЕСТИТЬ ВТ_ЗапланированоОтсутствие
	|ИЗ
	|	ВТ_ПродавцыРазвития КАК ВТ_ПродавцыРазвития
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|		ПО ВТ_ПродавцыРазвития.Продавец = ТабельРаботыПродавцов.Сотрудник
	|ГДЕ
	|	ТабельРаботыПродавцов.Период МЕЖДУ &ПериодСегодня И ДОБАВИТЬКДАТЕ(&ПериодСегодня, ДЕНЬ, 7)
	|	И НЕ ТабельРаботыПродавцов.Отсутствие = ЗНАЧЕНИЕ(Перечисление.ВидыОтсутствия.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПродавцыРазвития.Продавец,
	|	ВТ_КоличествоПродавцов.КоличествоПродавцовВТочках,
	|	ВТ_ЗапланированоОтсутствие.Отсутствие,
	|	ВТ_ПродавцыРазвития.Продавец.ПомощникТУ КАК СотрудникПомощникТУ
	|ИЗ
	|	ВТ_ПродавцыРазвития КАК ВТ_ПродавцыРазвития
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоПродавцов КАК ВТ_КоличествоПродавцов
	|		ПО ВТ_ПродавцыРазвития.Продавец = ВТ_КоличествоПродавцов.Продавец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗапланированоОтсутствие КАК ВТ_ЗапланированоОтсутствие
	|		ПО ВТ_ПродавцыРазвития.Продавец = ВТ_ЗапланированоОтсутствие.Продавец
	|ГДЕ
	|	ВТ_КоличествоПродавцов.КоличествоПродавцовВТочках > 3
	|	И ВТ_ЗапланированоОтсутствие.Отсутствие ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КоличествоПродавцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПродавцыРазвития
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ГрафикРаботыПродавцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ГрафикРаботыПродавцовКоличествоПродавцовВТочках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗапланированоОтсутствие";
	Запрос.УстановитьПараметр("ПериодСегодня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ЦФО", Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление розницей. Группа Развитие"));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		//Отправить письмо "кончились продавцы"
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Почта.Подключиться(Профиль);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = "Нехватка продавцов консультанотов";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		ТекстПисьма = "Для магазинов:" + Символы.ПС + Символы.ПС;
		Для каждого Стр Из МагазиныНуждающиесяВПомощникеПоРаскрутке Цикл
			ТекстПисьма = ТекстПисьма + Стр.Адрес + " дата открытия: " + Стр.ДатаОткрытия + Символы.ПС; 	
		КонецЦикла;
		ТекстПисьма = ТекстПисьма + Символы.ПС + "Автоматически не может быть назначен управляющий по расскрутке, т.к. не хватает продавцов";
		ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = "r@vkusvill.ru";  // "grek@automacon.ru";
		Попытка
			Почта.Послать(Письмо);
		Исключение
		КонецПопытки;
		ТекстЛога = ТекстЛога + Символы.ПС + Символы.ПС + ТекстПисьма;
		ОтправитьЛогАвтоматическогоПрисвоенияПомощникаПоРасскруткеМагазина(ТекстЛога);
		Возврат;
	КонецЕсли;
	ПродавцыРазвития = Рез.Выгрузить();
	//Найдем помощника по раскрутке по методике описаной в тз
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗ_ПродавцыРазвития.Продавец,
	|	ТЗ_ПродавцыРазвития.СотрудникПомощникТУ
	|ПОМЕСТИТЬ ВТ_ПродавцыРазвития
	|ИЗ
	|	&ПродавцыРазвития КАК ТЗ_ПродавцыРазвития
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПродавцыРазвития.Продавец,
	|	ТабельРаботыПродавцов.ТорговаяТочка,
	|	ТабельРаботыПродавцов.Период,
	|	ВТ_ПродавцыРазвития.СотрудникПомощникТУ
	|ПОМЕСТИТЬ ВТ_ГрафикПродавцов
	|ИЗ
	|	ВТ_ПродавцыРазвития КАК ВТ_ПродавцыРазвития
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|		ПО ВТ_ПродавцыРазвития.Продавец = ТабельРаботыПродавцов.Сотрудник
	|ГДЕ
	|	ТабельРаботыПродавцов.Период > ДОБАВИТЬКДАТЕ(&ПериодСегодня, МЕСЯЦ, -6)
	|	И ТабельРаботыПродавцов.Период <= &ПериодСегодня
	|	И ТабельРаботыПродавцов.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГрафикПродавцов.Продавец,
	|	ВТ_ГрафикПродавцов.ТорговаяТочка,
	|	ВТ_ГрафикПродавцов.Период,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабельРаботыПродавцов.Сотрудник) КАК КоличествоПродавцовВТочке,
	|	ВТ_ГрафикПродавцов.СотрудникПомощникТУ
	|ПОМЕСТИТЬ ВТ_ГрафикПродавцовСКоличествомВТочке
	|ИЗ
	|	ВТ_ГрафикПродавцов КАК ВТ_ГрафикПродавцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|		ПО ВТ_ГрафикПродавцов.ТорговаяТочка = ТабельРаботыПродавцов.ТорговаяТочка
	|			И ВТ_ГрафикПродавцов.Период = ТабельРаботыПродавцов.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ГрафикПродавцов.Продавец,
	|	ВТ_ГрафикПродавцов.ТорговаяТочка,
	|	ВТ_ГрафикПродавцов.Период,
	|	ВТ_ГрафикПродавцов.СотрудникПомощникТУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГрафикПродавцовСКоличествомВТочке.Продавец,
	|	МАКСИМУМ(ВТ_ГрафикПродавцовСКоличествомВТочке.Период) КАК Период,
	|	ВТ_ГрафикПродавцовСКоличествомВТочке.СотрудникПомощникТУ КАК ПомощникТУ,
	|	МИНИМУМ(РАЗНОСТЬДАТ(ВТ_ГрафикПродавцовСКоличествомВТочке.Период, &ПериодСегодня, ДЕНЬ)) КАК КоличествоПрошедшихДней
	|ИЗ
	|	ВТ_ГрафикПродавцовСКоличествомВТочке КАК ВТ_ГрафикПродавцовСКоличествомВТочке
	|ГДЕ
	|	ВТ_ГрафикПродавцовСКоличествомВТочке.КоличествоПродавцовВТочке < 4
	|	И ВТ_ГрафикПродавцовСКоличествомВТочке.СотрудникПомощникТУ <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ГрафикПродавцовСКоличествомВТочке.Продавец,
	|	ВТ_ГрафикПродавцовСКоличествомВТочке.СотрудникПомощникТУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПомощникТУ,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПродавцыРазвития
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ГрафикПродавцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ГрафикПродавцовСКоличествомВТочке";
	Запрос.УстановитьПараметр("ПериодСегодня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПродавцыРазвития", ПродавцыРазвития);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТЗ = Рез.Выгрузить();
	Для Каждого Стр из ТЗ Цикл
		//Сообщить("" + Стр.ПомощникТУ + "  " + Стр.Продавец + "  " + Стр.КоличествоПрошедшихДней);
		ТекстЛога = ТекстЛога + Символы.ПС + "" + Стр.ПомощникТУ + "  " + Стр.Продавец + "  " + Стр.КоличествоПрошедшихДней;
	КонецЦикла;	
	ИскомыйПомощникТУ = Неопределено;
	ТекущийПомощникТУ = Неопределено;
	ТекущееКоличествоПродовцов = 1;
	ТекущаяСумма = 0;
	МаксКоличествоПрошедшихДней = 0;
	//Сообщить("" + ИскомыйПомощникТУ + "   " + ТекущийПомощникТУ + "   " + ТекущееКоличествоПродовцов + "   " + ТекущаяСумма + "   " + МаксКоличествоПрошедшихДней );
	ТекстЛога = ТекстЛога + Символы.ПС + "" + ИскомыйПомощникТУ + "   " + ТекущийПомощникТУ + "   " + ТекущееКоличествоПродовцов + "   " + ТекущаяСумма + "   " + МаксКоличествоПрошедшихДней; 
	
	//+++AK GREK 18.12.2017 ИП-00017234.01     
	СправкаПоРасчету = Новый ТаблицаЗначений;
	СправкаПоРасчету.Колонки.Добавить("Помощник");
	СправкаПоРасчету.Колонки.Добавить("СредКоличествоПрошедшихДней");
	СправкаПоРасчету.Колонки.Добавить("КолПродавцов");
	СправкаПоРасчету.Колонки.Добавить("Продавцы");
	СправкаПоРасчету.Колонки.Добавить("НазначеныйМагазин");
	ИнформацияПоПродавцам = "";
	//---AK
	
	Для Каждого Стр из ТЗ Цикл
		Если Стр.ПомощникТУ = ТекущийПомощникТУ и ТекущееКоличествоПродовцов < 5 Тогда
			ТекущаяСумма = ТекущаяСумма + Стр.КоличествоПрошедшихДней;
			ТекущееКоличествоПродовцов = ТекущееКоличествоПродовцов + 1;
			//+++AK GREK 18.12.2017 ИП-00017234.01     
			ИнформацияПоПродавцам = ИнформацияПоПродавцам + ", " + Стр.Продавец + " " + Формат(Стр.Период,"ДФ=dd.MM.yyyy");
			//---AK
			//Сообщить("" + ИскомыйПомощникТУ + "   " + ТекущийПомощникТУ + "   " + ТекущееКоличествоПродовцов + "   " + ТекущаяСумма + "   " + МаксКоличествоПрошедшихДней );
			ТекстЛога = ТекстЛога + Символы.ПС + "" + ИскомыйПомощникТУ + "   " + ТекущийПомощникТУ + "   " + ТекущееКоличествоПродовцов + "   " + ТекущаяСумма + "   " + МаксКоличествоПрошедшихДней ; 	
		Иначе
			Если Стр.ПомощникТУ <> ТекущийПомощникТУ Тогда
				СредКоличествоПрошедшихДней = ТекущаяСумма/ТекущееКоличествоПродовцов;
				Если СредКоличествоПрошедшихДней>МаксКоличествоПрошедшихДней Тогда
					МаксКоличествоПрошедшихДней = СредКоличествоПрошедшихДней;
					ИскомыйПомощникТУ = ТекущийПомощникТУ;	
				КонецЕсли;
				
				//+++AK GREK 18.12.2017 ИП-00017234.01     
				Если ТекущийПомощникТУ <> Неопределено Тогда
					СтрСправки = СправкаПоРасчету.Добавить();
					СтрСправки.Помощник = ТекущийПомощникТУ;
					СтрСправки.СредКоличествоПрошедшихДней = СредКоличествоПрошедшихДней;
					СтрСправки.КолПродавцов = ТекущееКоличествоПродовцов;
					СтрСправки.Продавцы = ИнформацияПоПродавцам;
					СтрСправки.НазначеныйМагазин = Неопределено;
				КонецЕсли;
				ИнформацияПоПродавцам = "" + Стр.Продавец + " " + Формат(Стр.Период,"ДФ=dd.MM.yyyy");
				//---AK
				
				ТекущаяСумма = Стр.КоличествоПрошедшихДней;
				ТекущееКоличествоПродовцов = 1;
				ТекущийПомощникТУ = Стр.ПомощникТУ;
				//Сообщить("" + ИскомыйПомощникТУ + "   " + ТекущийПомощникТУ + "   " + ТекущееКоличествоПродовцов + "   " + ТекущаяСумма + "   " + МаксКоличествоПрошедшихДней );
				ТекстЛога = ТекстЛога + Символы.ПС + "" + ИскомыйПомощникТУ + "   " + ТекущийПомощникТУ + "   " + ТекущееКоличествоПродовцов + "   " + ТекущаяСумма + "   " + МаксКоличествоПрошедшихДней;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СредКоличествоПрошедшихДней = ТекущаяСумма/ТекущееКоличествоПродовцов;
	Если СредКоличествоПрошедшихДней>МаксКоличествоПрошедшихДней Тогда
		МаксКоличествоПрошедшихДней = СредКоличествоПрошедшихДней;
		ИскомыйПомощникТУ = ТекущийПомощникТУ;	
	КонецЕсли;
	
	//+++AK GREK 18.12.2017 ИП-00017234.01     
	Если ТекущийПомощникТУ <> Неопределено Тогда
		СтрСправки = СправкаПоРасчету.Добавить();
		СтрСправки.Помощник = ТекущийПомощникТУ;
		СтрСправки.СредКоличествоПрошедшихДней = СредКоличествоПрошедшихДней;
		СтрСправки.КолПродавцов = ТекущееКоличествоПродовцов;
		СтрСправки.Продавцы = ИнформацияПоПродавцам;
		ИнформацияПоПродавцам = "" + Стр.Продавец + " " + Формат(Стр.Период,"ДФ=dd.MM.yyyy");
		СтрСправки.НазначеныйМагазин = Неопределено;
	КонецЕсли;
	//---AK
	
	//Сообщить(ИскомыйПомощникТУ);
	Если ИскомыйПомощникТУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СправкаПоРасчету.Сортировать("СредКоличествоПрошедшихДней Убыв");	

	ТекстЛога = ТекстЛога + Символы.ПС + "----------------------------";
	Для каждого СтрСправки из СправкаПоРасчету цикл
			ТекстЛога = ТекстЛога + Символы.ПС + "" + СтрСправки.Помощник + "   "+ СтрСправки.СредКоличествоПрошедшихДней + "   "+	СтрСправки.КолПродавцов  + "   "+ СтрСправки.Продавцы;	
	КонецЦикла;
	//Возврат;
		
	
	//Получим помощника управляющего для магазина 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ВТ_Магазины
	|ИЗ
	|	&МагазиныНуждающиесяВПомощникеПоРаскрутке КАК Магазины
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	СоответствиеОбъектРольСрезПоследних.Период,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.Объект,
	|	СоответствиеОбъектРольСрезПоследних.Автор,
	|	ВТ_Магазины.Магазин
	|ИЗ
	|	ВТ_Магазины КАК ВТ_Магазины
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ) КАК СоответствиеОбъектРольСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|		ПО ВТ_Магазины.Магазин = СоответствиеОбъектРольСрезПоследних.Объект
	|ГДЕ
	|	РолиПользователейСоставРоли.НомерСтроки = 1";
	Запрос.УстановитьПараметр("МагазиныНуждающиесяВПомощникеПоРаскрутке",МагазиныНуждающиесяВПомощникеПоРаскрутке);
	ТекРоли = Запрос.Выполнить().Выгрузить();
	//ТекРоли = РегистрыСведений.СоответствиеОбъектРоль.Выбрать(,,Новый Структура("Объект",Объект.Ссылка));
	НеобходимоУведомитьОНазначении = Ложь;
	Для каждого Стр из МагазиныНуждающиесяВПомощникеПоРаскрутке Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Магазин",Стр.Ссылка);
		Отбор.Вставить("ТипРолиID","PomoshnikPoRaskrutke");
		Строки = ТекРоли.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			ДействующийПомощникПораскрутке = Строки[0].Сотрудник;
		Иначе
			ДействующийПомощникПораскрутке = Неопределено
		КонецЕсли;
		
		Если ДействующийПомощникПораскрутке = Неопределено Тогда
			//+++AK GREK 18.12.2017 ИП-00017234.01     
			//Подбираем помощника из списка, в соответствии с новыми критериями
			ИскомыйПомощникТУ = Неопределено;
			СредКоличествоПрошедшихДней = 0;
			Для каждого СтрСправки из СправкаПоРасчету цикл
				Если СтрСправки.НазначеныйМагазин = Неопределено И СтрСправки.КолПродавцов >= 5 И СтрСправки.СредКоличествоПрошедшихДней > СредКоличествоПрошедшихДней Тогда
					ИскомыйПомощникТУ =  СтрСправки.Помощник;
					СредКоличествоПрошедшихДней = СтрСправки.СредКоличествоПрошедшихДней;
					ИскомаяСтрСправки = СтрСправки; 
				КонецЕсли;
			КонецЦикла;
			Если ИскомыйПомощникТУ = Неопределено Тогда
				//Письмо о нехватке	помощников
				ТекстЛога = ТекстЛога + Символы.ПС + "Письмо о нехватке	помощников";
			Иначе
				ИскомаяСтрСправки.НазначеныйМагазин = Стр.Ссылка; 
			КонецЕсли;
			//---AK
			
			//Запишем нового помощника по расскрутке
			ЗаписьРоль = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			ЗаписьРоль.Период=ТекущаяДата();
			ЗаписьРоль.Объект = Стр.Ссылка;
			ЗаписьРоль.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоНаименованию("Помощник по раскрутке");
			РольПользователя = Справочники.РолиПользователей.НайтиПоНаименованию("Помощник по раскрутке " + ИскомыйПомощникТУ.Наименование);
			Если НЕ ЗначениеЗаполнено(РольПользователя) Тогда
				РольПользователя = Справочники.РолиПользователей.СоздатьЭлемент();
				РольПользователя.Наименование = "Помощник по раскрутке " + ИскомыйПомощникТУ.Наименование;
				НСтрока = РольПользователя.ТипыРолей.Добавить();
				НСтрока.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоНаименованию("Помощник по раскрутке");
				НСтрока = РольПользователя.СоставРоли.Добавить();
				НСтрока.Сотрудник = ИскомыйПомощникТУ;
				РольПользователя.Записать();
				ЗаписьРоль.РольПользователя = РольПользователя.Ссылка;
			Иначе
				ЗаписьРоль.РольПользователя = РольПользователя;
			КонецЕсли;
			ЗаписьРоль.ТипРолиID = "PomoshnikPoRaskrutke";
			Попытка
				ЗаписьРоль.Записать();
			Исключение
			КонецПопытки;
			
			//+++AK GREK 18.12.2017 ИП-00017234.01 Теперь уведомлять будем всех участников розыгрыша
			НеобходимоУведомитьОНазначении = Истина;
			//Уведомим Искомого помощника ТУ о случившемся
			//УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
			//Почта = Новый ИнтернетПочта;
			//Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
			//Почта.Подключиться(Профиль);
			//Письмо = Новый ИнтернетПочтовоеСообщение;
			//Письмо.Тема = "Назначение на роль помощника по раскрутке торговой точки";
			//Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
			//Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
			//ТекстПисьма = "
			//|Вы были назначены на роль помощника по раскрутке торговой точки по адресу: &АдресМагазина";
			//ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина" , Стр.Адрес);
			//ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ
			//|	КонтактнаяИнформация.Представление
			//|ИЗ
			//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			//|ГДЕ
			//|	КонтактнаяИнформация.Тип = &Тип
			//|	И КонтактнаяИнформация.Вид = &Вид
			//|	И КонтактнаяИнформация.Объект = &Объект";
			//
			//Запрос.УстановитьПараметр("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			//Запрос.УстановитьПараметр("Вид",  ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));	
			//Запрос.УстановитьПараметр("Объект", ИскомыйПомощникТУ);
			//Рез = Запрос.Выполнить();
			//Если Рез.Пустой() Тогда
			//	//Сообщить("Не найден адрес отправки письма подтверждения передачи новой торговой точки. Письмо не отправлено.");
			//	Возврат;
			//КонецЕсли;
			//АдресаПолучателя = Рез.Выгрузить();
			//Получатель = Письмо.Получатели.Добавить();
			//Получатель.Адрес = СокрЛП(АдресаПолучателя[0].Представление);
			//Получатель = Письмо.Получатели.Добавить();
			//Получатель.Адрес = "grek@automacon.ru"; //"r@vkusvill.ru";
			//
			//Попытка
			//	Почта.Послать(Письмо);
			//Исключение
			//КонецПопытки;
			//---AK
		Иначе
			Если ДействующийПомощникПораскрутке <> ИскомыйПомощникТУ Тогда
				//Отправим письмо с вопросом чей магазин
				УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
				Почта = Новый ИнтернетПочта;
				Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
				Почта.Подключиться(Профиль);
				Письмо = Новый ИнтернетПочтовоеСообщение;
				Письмо.Тема = "ЧЕЙ МАГАЗИН?";
				Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
				Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
				ТекстПисьма = "
				|При определении помощника по раскрутке торговой точки по адресу: &АдресМагазина
				|Обнаружено несоответсвие уже назначеного помощника по раскрутке, и помощника по раскрутке выбраного автоматически
				|Назначеный ранее помощник &ДействующийПомощникПораскрутке
				|Выбраный автоматически &ИскомыйПомощникТУ";
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина" , Стр.Адрес);
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ДействующийПомощникПораскрутке" , ДействующийПомощникПораскрутке.Наименование);
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИскомыйПомощникТУ" , ИскомыйПомощникТУ.Наименование);
				ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	КонтактнаяИнформация.Представление
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|	И КонтактнаяИнформация.Вид = &Вид
				|	И (КонтактнаяИнформация.Объект = &ДействующийПомощникПораскрутке ИЛИ КонтактнаяИнформация.Объект = &ИскомыйПомощникТУ)";
				
				Запрос.УстановитьПараметр("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
				Запрос.УстановитьПараметр("Вид",  ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));	
				Запрос.УстановитьПараметр("ИскомыйПомощникТУ", ИскомыйПомощникТУ);
				Запрос.УстановитьПараметр("ДействующийПомощникПораскрутке", ДействующийПомощникПораскрутке);
				Рез = Запрос.Выполнить();
				Если Рез.Пустой() Тогда
					ТекстЛога = ТекстЛога + Символы.ПС + "Не найден адрес отправки письма подтверждения передачи новой торговой точки. Письмо не отправлено.";
					ОтправитьЛогАвтоматическогоПрисвоенияПомощникаПоРасскруткеМагазина(ТекстЛога);
					Возврат;
				КонецЕсли;
				АдресаПолучателей = Рез.Выгрузить();
				Для каждого АдресПолучателя из АдресаПолучателей Цикл
					Получатель = Письмо.Получатели.Добавить();
					Получатель.Адрес = СокрЛП(АдресПолучателя.Представление);
				КонецЦикла;
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес = "r@vkusvill.ru"; //"grek@automacon.ru"
				
				Попытка
					Почта.Послать(Письмо);
				Исключение
				КонецПопытки;
				ТекстЛога = ТекстЛога + Символы.ПС + ТекстПисьма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//+++AK GREK 18.12.2017 ИП-00017234.01 Теперь уведомлять будем всех участников розыгрыша    
	Если НеобходимоУведомитьОНазначении Тогда
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Почта.Подключиться(Профиль);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема = "Назначение на роль помощника по раскрутке торговой точки";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		ТекстПисьма = "
		|В качестве помощников по раскрутке торговых точек, были назначены:
		|&НазначенныеПомощники
		|
		|В распределении, так же учавствовали:
		|&УчавствовашиеПомощники
		|
		|Следующие помощники, были исключены из распределения, т.к. количество доступных продавцов оказалось меньше пяти:
		|&ИсключенныеПомощники
		|
		|*Дата после ФИО продавца, это последняя дата работы продавца в торговой точке, с количеством продавцов менее четырех";
		
		НазначенныеПомощники = "";
		УчавствовашиеПомощники = "";
		ИсключенныеПомощники = "";
		Для каждого СтрСправки из СправкаПоРасчету цикл
			Если СтрСправки.НазначеныйМагазин <> Неопределено  Тогда
				НазначенныеПомощники = НазначенныеПомощники + "    В магазин по адресу " + СтрСправки.НазначеныйМагазин.Адрес +" назначен помощник " + СтрСправки.Помощник + Символы.ПС + "         " + СтрЗаменить(СтрСправки.Продавцы,",",Символы.ПС + "        ") + Символы.ПС;
			ИначеЕсли СтрСправки.КолПродавцов < 5 Тогда	 
				ИсключенныеПомощники = ИсключенныеПомощники + "    " + СтрСправки.Помощник + Символы.ПС + "         " + СтрЗаменить(СтрСправки.Продавцы,",",Символы.ПС + "        ") + Символы.ПС;
			Иначе
				УчавствовашиеПомощники = УчавствовашиеПомощники + "    " + СтрСправки.Помощник + Символы.ПС + "         " + СтрЗаменить(СтрСправки.Продавцы,",",Символы.ПС + "        ") + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
			
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НазначенныеПомощники" , НазначенныеПомощники);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&УчавствовашиеПомощники" , УчавствовашиеПомощники);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИсключенныеПомощники" , ИсключенныеПомощники);
		Сообщить(ТекстПисьма);
		ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Тип = &Тип
		               |	И КонтактнаяИнформация.Вид = &Вид
		               |	И КонтактнаяИнформация.Объект В(&Объекты)";
		Запрос.УстановитьПараметр("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		Запрос.УстановитьПараметр("Вид",  ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизЛица"));	
		Запрос.УстановитьПараметр("Объекты", СправкаПоРасчету.ВыгрузитьКолонку("Помощник"));
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			ТекстЛога = ТекстЛога + Символы.ПС + "Не найден адрес отправки письма подтверждения передачи новой торговой точки. Письмо не отправлено.";
			ОтправитьЛогАвтоматическогоПрисвоенияПомощникаПоРасскруткеМагазина(ТекстЛога);
			Возврат;
		КонецЕсли;
		АдресаПолучателя = Рез.Выгрузить();
		Для Каждого СтрПолучатель из АдресаПолучателя цикл 
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = СокрЛП(СтрПолучатель.Представление);
			ТекстЛога = ТекстЛога + Символы.ПС + СтрПолучатель.Представление;
		КонецЦикла;
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = "r@vkusvill.ru"; //"grek@automacon.ru";
		//
		Попытка
			Почта.Послать(Письмо);
		Исключение
		КонецПопытки;
		ТекстЛога = ТекстЛога + Символы.ПС + ТекстПисьма;
	КонецЕсли;
	//---AK

	ОтправитьЛогАвтоматическогоПрисвоенияПомощникаПоРасскруткеМагазина(ТекстЛога);	
КонецПроцедуры

//+++AK GREK 05.12.2017 ИП-00017234
Процедура ОтправитьЛогАвтоматическогоПрисвоенияПомощникаПоРасскруткеМагазина(ТекстЛога = "")
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Назначение на роль помощника по раскрутке торговой точки";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстЛога);
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = "grek@automacon.ru";
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = "miha@automacon.ru";
	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;	
КонецПроцедуры

// +++ АК mirv 14.12.2017 [ИП-00017362]
Процедура ЗагрузитьДанныеВРегистрСведенийДвижениеАвтомобиляПоМаршруту() Экспорт
	Обработка = Обработки.ЗагрузкаДанныхВРегистрСведенийДвижениеАвтомобиляПоМаршруту.Создать();
	Обработка.Загрузить();
КонецПроцедуры    
// --- АК mirv  

//+++АК Susk (Суслин К.В.) 2017.12.20 ИП-00016868
Процедура ЗагрузитьПравилаОБменаДаннымиРеглОбмен(пОбработка, ИмяМакетаПравил) 
	
	флВременныеПравила = Истина;
	ТекстПравил = "";
	
	Если ИмяМакетаПравил = "ПравилаОбменаДанными_Контрагенты" Тогда
		Разрез = "Контрагенты";
	ИначеЕсли ИмяМакетаПравил = "ПравилаЛУ" Тогда
		Разрез = "ПравилаЛУ";
	Иначе
		Разрез = "";
	КонецЕсли;
	
	Попытка
		ТекстПравил = пОбработка.ПолучитьТекстВременныхПравилОбмена(Разрез);
	Исключение
		флВременныеПравила = Ложь;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ТекстПравил) Тогда
		флВременныеПравила = Ложь;
	КонецЕсли;
	
	Если флВременныеПравила Тогда
		пОбработка.ЗагрузитьПравилаОбмена(ТекстПравил, "Строка");
	Иначе	
		пМакет = пОбработка.ПолучитьМакет(ИмяМакетаПравил);
		пОбработка.ЗагрузитьПравилаОбмена(пМакет.ПолучитьТекст(), "Строка");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет вызов процедуры импорта данных из Фронтол
// Регламентное задание: ЗагрузкаДанныхПоПриходахУходахВнештатныхСотрудников
// Импортируются данные за "вчерашний" день (Запуск регламентного задания в 00:15:00) 
//
Процедура ИмпортДанныхПоОтметкамприходУходВнештатныхСотрудников() Экспорт //+++АК mika 2018.01.22 ИП-00017263.02
	
	Обработки.ЖурналУчетаВнештатныхСотрудниковАутсорсинг.ЗагрузитьДанныеПоОтметкамВнештатныхСотрудниковФронтол(НачалоДня(ТекущаяДата()) - 86400, КонецДня(НачалоДня(ТекущаяДата())-1));

КонецПроцедуры // ИмпортДанныхПоОтметкамприходУходВнештатныхСотрудников()

// Отправляет письма помощникам и управляющим по состоянию выполнения магазинами требований к правилам 
// На текущий момент доступен контроль "печати" и "прочтения" правил
//
Процедура ПравилаРаботыСотрудниковРассылкаУведомленийОВыполнении() Экспорт //+++АК mika 2018.01.24 ИП-00017045.01.000.00002
																   
	Отчеты.ПравилаРаботыСотрудниковКонтрольВыполнения.ЗапуститьРассылкуОтчетаПравилРаботыСотрудниковКонтроль();
	
КонецПроцедуры // ПравилаРаботыСотрудниковРассылкаУведомленийОВыполнении()

//+++АК LAGP 2017.12.25 ИП-00017453 Рассылка по заявкам на роуминг, каждый день в 15:50
Процедура РассылкаОператорамСвязиПоЗаявкамНаРоуминг() Экспорт
	
	Обработка = Обработки.РассылкаОператорамСвязиПоЗаявкамНаРоуминг.Создать();
	Обработка.ВыполнитьРассылку();	
	
КонецПроцедуры

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Процедура РаботаСОповещениямиОПроверкеКачестваПродуктов() Экспорт
	
	Попытка
		Обработки.АК_ИнтерфейсРаботыСОповещениямиОПроверкеКачестваПродуктов.РаботаСОповещениямиОПроверкеКачестваПродуктов(); 
	Исключение
	КонецПопытки;	
	
	//+++АК LAGP 2018.03.16 ИП-00017097.04 
	Попытка
		Обработки.АК_ИнтерфейсРаботыСОповещениямиОПроверкеКачестваПродуктов.РаботаСОбращениямиПокупателей_ОповещенияОПроверкеКачестваПродуктов(); 
	Исключение
	КонецПопытки;
	//---АК LAGP 2018.03.16 ИП-00017097.04
		
КонецПроцедуры	

//+++АК LAGP 2018.03.07 ИП-00017097.03 Загрузка заданий лаборатории.
Процедура ЗагрузитьНовыеЗаданияЛаборатории() Экспорт
	
	Документы.ЗаданиеЛаборатории.ЗагрузитьНовыеЗаданияЛаборатории();
	
КонецПроцедуры	

//+++АК LAGP 2018.04.05 ИП-00018262 Рассылка писем отв.бухгалтерам по отсутствующим ПТУ в линейке "Заявка - ПТУ - РасходИзБанка".
Процедура РассылкаПлатежкиБезПТУ() Экспорт
	
	ДатаНачала = ДобавитьМесяц(ТекущаяДата(), -6);
	ДатаНачалаЗаявок = Дата('20180501');  //+++АК LAGP 2018.05.24 ИП-00018642 Небольшие корректировки рассылки
	ВидОперацииРасходИзБанка = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
	СтатьиДвиженияДенежныхСредств = Новый Массив;
	СтатьиДвиженияДенежныхСредств.Добавить(ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("139399")); //Оплата госпошлины и прочих расходов для юридического сопровождения
	СтатьиДвиженияДенежныхСредств.Добавить(ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("139317")); //Оплата штрафы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходИзБанка.ДокументОснование,
		|	РасходИзБанка.Контрагент,
		|	РасходИзБанка.Ссылка КАК Платёжка,
		|	РасходИзБанка.Дата
		|ПОМЕСТИТЬ ВТПлатёжки
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	РасходИзБанка.Дата > &ДатаНачала
		|	И РасходИзБанка.УИН_СтрокиОснования <> """"
		|	И РасходИзБанка.ВидОперации = &ВидОперацииРасходИзБанка
		|	И РасходИзБанка.Проведен = ИСТИНА
		|	И РасходИзБанка.СтатьяДвиженияДенежныхСредств В(&СтатьиДвиженияДенежныхСредств)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПлатёжки.Платёжка,
		|	ВТПлатёжки.Контрагент,
		|	Контрагенты.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	ВТПлатёжки.ДокументОснование,
		|	ВТПлатёжки.Дата
		|ПОМЕСТИТЬ ВТОснования
		|ИЗ
		|	ВТПлатёжки КАК ВТПлатёжки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ПО ВТПлатёжки.ДокументОснование = ПоступлениеТоваровУслуг.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТПлатёжки.Контрагент = Контрагенты.Ссылка
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL
		|	И ВТПлатёжки.ДокументОснование.Дата > &ДатаНачалаЗаявок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОснования.Платёжка,
		|	ВТОснования.Контрагент,
		|	ВТОснования.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	ВТОснования.ДокументОснование,
		|	КонтактнаяИнформация.Представление КАК ПочтовыйЯщик
		|ИЗ
		|	ВТОснования КАК ВТОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ВТОснования.ОсновнойБухгалтерПокупателя.ФизЛицо = КонтактнаяИнформация.Объект
		|ГДЕ
		|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ВТОснования.Дата
		|ИТОГИ ПО
		|	ОсновнойБухгалтерПокупателя";
	
	Запрос.УстановитьПараметр("ВидОперацииРасходИзБанка", ВидОперацииРасходИзБанка);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаНачалаЗаявок", ДатаНачалаЗаявок);
	Запрос.УстановитьПараметр("СтатьиДвиженияДенежныхСредств", СтатьиДвиженияДенежныхСредств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОсновнойБухгалтерПокупателя = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОсновнойБухгалтерПокупателя.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаОсновнойБухгалтерПокупателя.Выбрать();
		
		СтруктураНовогоПисьма = Новый Структура;
		СписокКому = Новый СписокЗначений;
		ВыборкаДетальныеЗаписи.Следующий();
		СписокКому.Добавить(ВыборкаДетальныеЗаписи.ПочтовыйЯщик);
		//СписокКому.Добавить("lagp@automacon.ru");
		ВыборкаДетальныеЗаписи.Сбросить();
		
		Таблица 									= ""; 	
		ЦветШапки 									= "E5D4F2";
		ЦветШапки 									= "F0FFFF";
		TR 											= "<th style = ""background: #";
		TA											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
		TA1											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";			
		Таблица 							 		= Таблица + "<b>Расходы из банка без поступления товаров и услуг:</b>";
		Таблица 							 		= Таблица + "<br><br>";
		Таблица 							 		= Таблица + "<Table border style = ""border-collapse: collapse;""><TR>";
		Таблица 							 		= Таблица + "<td>Заявка";
		Таблица 							 		= Таблица + "<td>Расход из банка";
		Таблица 							 		= Таблица + "<td>Контрагент";
		Таблица 							 		= Таблица + "<td>Ответственный бухгалтер";
		Таблица 							 		= Таблица + "</TR>";			
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
			Если ВыборкаДетальныеЗаписи.ДокументОснование.Дата > Дата("20180101") Тогда
				Таблица 							 		= Таблица + "<TR>";
				Таблица 							 		= Таблица + "<td>" + ВыборкаДетальныеЗаписи.ДокументОснование;
				Таблица 							 		= Таблица + "<td>" + ВыборкаДетальныеЗаписи.Платёжка;
				Таблица 							 		= Таблица + "<td>" + ВыборкаДетальныеЗаписи.Контрагент;
				Таблица 							 		= Таблица + "<td>" + ВыборкаДетальныеЗаписи.ОсновнойБухгалтерПокупателя;
				Таблица 							 		= Таблица + "</TR>";
			КонецЕсли;	
		КонецЦикла;		
		Таблица 							 		= Таблица + "</Table>";	
		Таблица 							 		= Таблица + "</Table>";
		Таблица 							 		= Таблица + "<br>";
		
		СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
		СтруктураНовогоПисьма.Вставить("Тема", "Рассылка платёжных документов без ПТУ");
		СтруктураНовогоПисьма.Вставить("Тело", Таблица);
		СтруктураНовогоПисьма.Вставить("СписокФайловВложений", Новый Массив);
		СтруктураНовогоПисьма.Вставить("ТипТекста", ТипТекстаПочтовогоСообщения.HTML);
		
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		
	КонецЦикла;
		
КонецПроцедуры	

//+++АК LAGP 2018.03.25 ИП-00017097.05 Общая регламентная процедура которая выполняется в начале каждого месяца
Процедура ЕжемесячноеЗадание() Экспорт
	
	Попытка
		Обработки.АК_ИнтерфейсРаботыСОповещениямиОПроверкеКачестваПродуктов.ОтчётПоОповещениямПроверкиТовара();	
	Исключение
	КонецПопытки;	
	
КонецПроцедуры	

//+++АК LAGP 2018.04.04 ИП-00018262 Общая регламентная процедура которая выполняется в начале каждой недели
Процедура ЕженедельноеЗадание() Экспорт
	
	Попытка
		РассылкаПлатежкиБезПТУ();	
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

// Используется для очистки временных файлов в общих каталогах (разного рода "кэши")
// (Запуск один раз в неделю (Воскресенье, 01:30))
//
Процедура ОчисткаВременныхФайлов() Экспорт //+++АК mika 2018.02.26 Без задачи (оптимизация)
	
	Справочники.ПравилаРаботыСотрудников.ОчисткаВременныхФайловWordToHTML();
    Аттестация.ОчисткаВременныхФайловWordToHTML(); //+++АК mika 2018.06.04 Без задачи (оптимизация)
	
КонецПроцедуры // ОчисткаВременныхФайлов()

//+++АК SaMi 2018.04.04 ИП-00018178 
Процедура КонтурEDI_ВыполнитьОбменССервером() Экспорт
	
	ОбработкаКонтурEDI = Обработки.КонтурEDI.Создать();
	
	ОбработкаКонтурEDI.ФоновоеЗадание_ВыполнитьОбмен();
	
	ОбработкаКонтурEDI.ИнициализироватьПодключаемыеМодули();
	ОбработкаКонтурEDI.Отчетность_НеотраженнаяСтатистика_Рассчитать();
	ОбработкаКонтурEDI.ФинализироватьПодключаемыеМодули();
	
КонецПроцедуры 
//---АК SaMi  2018.04.04 

//++ АК luza ИП-00018473 20.04.2018
Функция ЕстьОповещениеОПроблемахСОбменомКонтурEDIДляСклада() Экспорт
	//Оповещение. В с 3 до 8 часов ночи всем сотрудникам склада высплывающее окно должно сигнализировать о проблемах. (не проставлена галка или не получен заказ) 	
	ТекЧас = Час(ТекущаяДата());
	Если ТекЧас >= 3 И ТекЧас < 8 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДокументРасходныйОрдерСклад.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК ДокументРасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(РеализацияТоваровУслугРасходныеОрдера.Ссылка) КАК Ссылка,
		|			МАКСИМУМ(РеализацияТоваровУслугРасходныеОрдера.Ссылка.EDI_ГотовКОбмену) КАК EDI_ГотовКОбмену,
		|			РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер КАК РасходныйОрдер
		|		ИЗ
		|			Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
		|		ГДЕ
		|			РеализацияТоваровУслугРасходныеОрдера.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер) КАК ДокументыРеализации
		|		ПО ДокументРасходныйОрдерСклад.Ссылка = ДокументыРеализации.РасходныйОрдер
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_Сообщения.Документ КАК Документ,
		|			МАКСИМУМ(КонтурEDI_Сообщения.Ссылка) КАК Сообщение
		|		ИЗ
		|			Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|		ГДЕ
		|			КонтурEDI_Сообщения.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
		|			И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КонтурEDI_Сообщения.Документ) КАК СообщенияEDI
		|		ПО (ДокументыРеализации.Ссылка = СообщенияEDI.Документ)
		|ГДЕ
		|	ДокументРасходныйОрдерСклад.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
		|	И ДокументРасходныйОрдерСклад.Получатель.ТипРозничнойТочки В (ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток),ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Пятерочка))
		|	И ДокументРасходныйОрдерСклад.Проведен
		|	И ДокументРасходныйОрдерСклад.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И (СообщенияEDI.Сообщение ЕСТЬ NULL
		|			ИЛИ ДокументыРеализации.EDI_ГотовКОбмену = ЛОЖЬ)";
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
		
		Результат = Запрос.Выполнить();
			
		Возврат Не Результат.Пустой();
	Иначе
		Возврат Ложь;
		//Возврат Истина; //Тест
	КонецЕсли;	
КонецФункции
//-- АК luza ИП-00018473 20.04.2018

//+++АК Susk (Суслин К.В.) 2018.05.30 ИП-00017910
Процедура ВыгрузитьЛистыУчетаВБухгалтерию() Экспорт
	
	пОбработка = ВернутьПроинициализированнуюОбработкуОбмена("ПравилаЛУ");
	
	ДополнитьОбработкуОбменаЛогированием(пОбработка, "ЛистыУчета");
	
	Узел = ОбщегоНазначенияПовтИсп.ПолучитьУзелОбменаПоКоду("ЛУП"); //Листы Учета Полный
	
	СтрокиДереваПравилВыгрузки = пОбработка.ТаблицаПравилВыгрузки.Строки;
	
	Для каждого Правило из СтрокиДереваПравилВыгрузки Цикл
		Если Правило.Имя = "ВыгрузкаЛистовУчета" Тогда
			Правило.Включить 			= 1;			
		Иначе	
			Правило.Включить 			= 0;
		КонецЕсли;	
	КонецЦикла;		
	
	пОбработка.Параметры.УзелОбмена = Узел;
	
	пОбработка.ВыполнитьВыгрузку();
	
КонецПроцедуры 
 
//+++АК Susk (Суслин К.В.) 2018.06.01 ИП-00018643
Процедура ОтправитьПисьмоСИсключением(Адресат, ТекстОшибки, ИмяПроцедуры) 
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Ошибка регламентной процедуры: " + ИмяПроцедуры;
	Письмо.Тексты.Добавить("Подключение к базе: " + СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "Ошибка регламентной процедуры: " + ИмяПроцедуры + Символы.ПС + "Текст ошибки: " + ТекстОшибки);
	Письмо.Отправитель     = УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя   = УчетнаяЗапись.Логин;
	НовыйПолучатель = Письмо.Получатели.Добавить();
	НовыйПолучатель.Адрес = Адресат;
	Почта.Послать(Письмо);

КонецПроцедуры

Процедура ПровестиДокументСОбработкойИсключения(ДокОбъектЗакрытие, РежимЗаписиДокумента, ИмяПроцедуры)
	
	Попытка
		ДокОбъектЗакрытие.Записать(РежимЗаписиДокумента);
	Исключение
		ОтправитьПисьмоСИсключением("susk@automacon.ru", ОписаниеОшибки(), ИмяПроцедуры)
	КонецПопытки;
	
КонецПроцедуры
 

//+++ golv 2018.06.26 ИП-00018018.02
Процедура ОтправкаОбращенийНаРаспознавание() Экспорт
	РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.ОтправитьНаРаспозначание_Период();
КонецПроцедуры
//--- golv

//+++ AK suvv 28.06.2018 ИП-00018779
Процедура ВыполнитьРассылку(ОткрытыеМагазиныДляРассылки, МассивАдресовДляОтправки, ОбщийСписок = Истина)
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта   = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
		
	МассивАдресовЭП = Новый Массив;
	// на случай, если эл. адрес составной
	Для Каждого СоставнойАдресЭП Из МассивАдресовДляОтправки Цикл
		МассАдресовЭП = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СоставнойАдресЭП, ";");
		Для Каждого АдресЭП Из МассАдресовЭП Цикл
			Если ЗначениеЗаполнено(АдресЭП) Тогда
				МассивАдресовЭП.Добавить(АдресЭП);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого АдресЭП из МассивАдресовЭП Цикл
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема 			= "Уведомление об открытии магазина";
		Письмо.Отправитель 		= УчетнаяЗапись.Логин;
		Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
		
		ТекстПисьма = "<h3>Уведомление об открытии магазина</h3>";
		//+++ AK suvv 2018.08.28 ИП-00019377 - добавлены поля "Руководитель по строительству", "Ответственный по стройке", "Специалист по открытию"
		Если ОбщийСписок Тогда 
			ТекстПисьма = ТекстПисьма + "<table border='1px'><th>Описание</th><th>Адрес</th><th>Тип розничной точки</th><th>Управляющий по рознице</th><th>Руководитель по строительству</th><th>Ответственный по стройке</th><th>Специалист по открытию</th><th>Номер по порядку за месяц</th><th>Общий номер</th>";
		Иначе
			ТекстПисьма = ТекстПисьма + "<table border='1px'><th>Описание</th><th>Адрес</th><th>Тип розничной точки</th><th>Руководитель по строительству</th><th>Ответственный по стройке</th><th>Специалист по открытию</th><th>Номер по порядку за месяц</th><th>Общий номер</th>";	
		КонецЕсли;
		
		Для каждого СтрТЗ Из ОткрытыеМагазиныДляРассылки Цикл
			ТекстПисьма = ТекстПисьма + "<tr>";
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.Description + "</td>";
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.Adress + "</td>";
			//+++ AK suvv 2018.10.05 ИП-00020068
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.TipRoznTochki + "</td>";
			//--- AK suvv
			Если ОбщийСписок Тогда
				ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.UpravlyayushchiiPoRoznice + "</td>";
			КонецЕсли;
			//+++ AK suvv 2018.08.28 ИП-00019377
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.RukovoditelPoStroitelstvu + "</td>";
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.OtvetstvennijPoStrojke + "</td>";
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.SpecialistPoOtkrytiyu + "</td>";
			//--- AK suvv
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.NumberPP + "</td>";
			ТекстПисьма = ТекстПисьма + "<td>" + СтрТЗ.NumberPublic + "</td>";
			ТекстПисьма = ТекстПисьма + "</tr>";    
		КонецЦикла;
		
		Письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.HTML);
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресЭП);
		
		Почта.Послать(Письмо);
	КонецЦикла;
	
	Почта.Отключиться();	
	
КонецПроцедуры

//+++ AK suvv 28.06.2018 ИП-00018779
Функция ПолучитьОткрытыеМагазины()
	
	ОткрытыеМагазины = Новый ТаблицаЗначений;
	ОткрытыеМагазины.Колонки.Добавить("Description");
	ОткрытыеМагазины.Колонки.Добавить("Adress");
	ОткрытыеМагазины.Колонки.Добавить("UpravlyayushchiiPoRoznice");
	ОткрытыеМагазины.Колонки.Добавить("CodUpravlyayushchiiPoRoznice");
	//+++ AK suvv 2018.08.28 ИП-00019377
	ОткрытыеМагазины.Колонки.Добавить("RukovoditelPoStroitelstvu");
	ОткрытыеМагазины.Колонки.Добавить("OtvetstvennijPoStrojke");
	ОткрытыеМагазины.Колонки.Добавить("SpecialistPoOtkrytiyu");
	//--- AK suvv
	ОткрытыеМагазины.Колонки.Добавить("NumberPP");
	ОткрытыеМагазины.Колонки.Добавить("NumberPublic");
	//+++ AK suvv 2018.10.05 ИП-00020068
	ОткрытыеМагазины.Колонки.Добавить("TipRoznTochki");
	//--- AK suvv
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = ADOСоединение;
	Command.CommandTimeout = 300;	
	Command.CommandType = 4;
	Command.CommandText = "Reports.dbo.Notification_opening_store_new";
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");	
	RecordSet = Command.Execute();
	
	Если НЕ RecordSet.EOF() Тогда
		
		Пока RecordSet.EOF() = 0 Цикл
			
			НоваяСтрока = ОткрытыеМагазины.Добавить();
			
			НоваяСтрока.Description                  = RecordSet.Fields(RecordSet.Fields.Item(0).Name).Value;
			НоваяСтрока.Adress                       = RecordSet.Fields(RecordSet.Fields.Item(1).Name).Value;
			НоваяСтрока.UpravlyayushchiiPoRoznice    = RecordSet.Fields(RecordSet.Fields.Item(2).Name).Value;
			НоваяСтрока.CodUpravlyayushchiiPoRoznice = RecordSet.Fields(RecordSet.Fields.Item(3).Name).Value;
			//+++ AK suvv 2018.08.28 ИП-00019377
			НоваяСтрока.RukovoditelPoStroitelstvu    = RecordSet.Fields(RecordSet.Fields.Item(4).Name).Value;
			НоваяСтрока.OtvetstvennijPoStrojke       = RecordSet.Fields(RecordSet.Fields.Item(5).Name).Value;
			НоваяСтрока.SpecialistPoOtkrytiyu        = RecordSet.Fields(RecordSet.Fields.Item(6).Name).Value;
			//--- AK suvv
			НоваяСтрока.NumberPP                     = RecordSet.Fields(RecordSet.Fields.Item(7).Name).Value;
			НоваяСтрока.NumberPublic                 = RecordSet.Fields(RecordSet.Fields.Item(8).Name).Value;
			//+++ AK suvv 2018.10.05 ИП-00020068
			NumberTipaRoznTochki                     = RecordSet.Fields(RecordSet.Fields.Item(9).Name).Value;
			НоваяСтрока.TipRoznTochki                = ?(NumberTipaRoznTochki = null, "", Перечисления.ТипыРозничныхТочек.Получить(NumberTipaRoznTochki));
			//--- AK suvv
			RecordSet.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	ADOСоединение.Close();
	
	Возврат ОткрытыеМагазины;
	
Конецфункции //--- AK suvv

//+++ AK suvv 28.06.2018 ИП-00018779
Функция ПолучитьАдресаДляРассылкиОбщегоСпискаОткрытыхМагазинов()
	
	АдресаДляРассылкиОбщегоСпискаОткрытыхМагазинов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник
	|ПОМЕСТИТЬ ВТ_Управляющие
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID = ""UpravlyayushchiiPoRoznice""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Управляющие КАК ВТ_Управляющие
	|		ПО АК_ГруппыРассылки.ФизЛицо = ВТ_Управляющие.Сотрудник
	|ГДЕ
	|	ВТ_Управляющие.Сотрудник ЕСТЬ NULL
	|	И АК_ГруппыРассылки.Группа.Код = ""000000003""
	|	И АК_ГруппыРассылки.Емейл <> """"";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр из ТЗ Цикл
		АдресаДляРассылкиОбщегоСпискаОткрытыхМагазинов.Добавить(СокрЛП(Стр.Емейл));
	КонецЦикла;
	
	Возврат АдресаДляРассылкиОбщегоСпискаОткрытыхМагазинов;
	
КонецФункции  //--- AK suvv

//+++ AK suvv 28.06.2018 ИП-00018779
Процедура РассылкаУведомленийОбОткрытииМагазинов() Экспорт
	
	//получим список магазинов, открывшихся за текущий день (продажа на первую тысячу рублей) по данным sql
	ОткрытыеМагазины = ПолучитьОткрытыеМагазины();
	
	Если ОткрытыеМагазины.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//выполним рассылку списка открытых магазинов всем физ.лицам по группе рассылки "Открытие магазина" кроме тех, кто является управляющими
	АдресаДляОтправкиОбщегоСписка = ПолучитьАдресаДляРассылкиОбщегоСпискаОткрытыхМагазинов();	
	Если АдресаДляОтправкиОбщегоСписка.Количество() <> 0 Тогда  
		ВыполнитьРассылку(ОткрытыеМагазины, АдресаДляОтправкиОбщегоСписка, Истина);
	КонецЕсли;
	
	//выполним расслыку списка открытых магазинов по управляющим
	СписокПолучателей = ОткрытыеМагазины.Скопировать();
	СписокПолучателей.Свернуть("CodUpravlyayushchiiPoRoznice");
	Для Каждого СтрПолучателя из СписокПолучателей Цикл
		
		КодПолучателя = СтрПолучателя.CodUpravlyayushchiiPoRoznice;
		Отбор = Новый Структура("CodUpravlyayushchiiPoRoznice", КодПолучателя);
		ОткрытыеМагазиныПоУправляющему = ОткрытыеМагазины.НайтиСтроки(Отбор);
		
		Получатель = Справочники.ФизическиеЛица.НайтиПоКоду(КодПолучателя);
		КИПолучателя = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Получатель, Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
		АдресаДляОтправкиСпискаПоУправляющему = Новый Массив;
		АдресаДляОтправкиСпискаПоУправляющему.Добавить(СокрЛП(КИПолучателя.Представление));
		Если АдресаДляОтправкиСпискаПоУправляющему.Количество() <> 0 Тогда
			ВыполнитьРассылку(ОткрытыеМагазиныПоУправляющему, АдресаДляОтправкиСпискаПоУправляющему, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 15.08.2018 ИП-00018495
Процедура УстановкаПериодаВыводаТоваровНаСинийЦенник() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.id_tov <> 0
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.КатегорияАссортимента = ЗНАЧЕНИЕ(Перечисление.КатегорииАссортимента.Новинки)
	|	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	|	И НЕ Номенклатура.Родитель.АвтоматическиНеСтавитьНовинкуВСиниеЦенники";
	
	КешТовары = Запрос.Выполнить().Выгрузить();
	Если КешТовары.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ОтборПоНоменклатуре = "";
	Для Каждого Стр из КешТовары Цикл
		ОтборПоНоменклатуре = ОтборПоНоменклатуре + "SMS.id_tov_cl = " + Формат(Стр.id_tov,"ЧГ=0") + " or ";
	КонецЦикла;
	ОтборПоНоменклатуре = Лев(ОтборПоНоменклатуре, СтрДлина(ОтборпоНоменклатуре) - 3); 
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT DISTINCT Sale.id_tov_cl  
	|into #SaleTekDate
	|from 
	|(SELECT DISTINCT SMS.id_tov_cl
	|FROM SMS_UNION.dbo.CheckLine as SMS
	|where SMS.date_ch >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата()), Ложь) + " and SMS.date_ch <= " + ВнешниеДанные.ФорматПоля(КонецДня(ТекущаяДата()), Ложь) + "
	|and " + ОтборПоНоменклатуре + "
	|union all
	|SELECT DISTINCT SMS.id_tov_cl 
	|FROM SMS_IZBENKA.dbo.CheckLine as SMS
	|where SMS.date_ch >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата()), Ложь) + " and SMS.date_ch <= " + ВнешниеДанные.ФорматПоля(КонецДня(ТекущаяДата()), Ложь) + "
	|and " + ОтборПоНоменклатуре + ") as Sale
	|
	|SELECT DISTINCT Sale.id_tov_cl
	|into #OldSale
	|from (
	|SELECT SaleTekDate.id_tov_cl
	|from #SaleTekDate as SaleTekDate
	|left join SMS_UNION.dbo.CheckLine as SMS_UNION on SaleTekDate.id_tov_cl = SMS_UNION.id_tov_cl
	|where SMS_UNION.date_ch < " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата()), Ложь) + " and SMS_UNION.BaseSum > 0 
	|union all
	|SELECT SaleTekDate.id_tov_cl
	|from #SaleTekDate as SaleTekDate
	|left join SMS_IZBENKA.dbo.CheckLine as SMS_IZBENKA on SaleTekDate.id_tov_cl = SMS_IZBENKA.id_tov_cl
	|where SMS_IZBENKA.date_ch < " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата()), Ложь) + " and SMS_IZBENKA.BaseSum > 0 and SMS_IZBENKA.BaseSum = 0) as Sale
	|
	|select SaleTekDate.id_tov_cl as id_tov
	|from #SaleTekDate as SaleTekDate left join #OldSale as OldSale on SaleTekDate.id_tov_cl = OldSale.id_tov_cl
	|where OldSale.id_tov_cl is null";

	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
		
	Попытка
		rs.MoveFirst();
		
		//+++ AK suvv - для тестирования, потом удалить
		НоменклатураДляРассылки = Новый ТаблицаЗначений;
		НоменклатураДляРассылки.Колонки.Добавить("Номенклатура");
		НоменклатураДляРассылки.Колонки.Добавить("СтараяДатаНачала");
		НоменклатураДляРассылки.Колонки.Добавить("СтараяДатаОкончания");
		НоменклатураДляРассылки.Колонки.Добавить("НоваяДатаНачала");
		НоменклатураДляРассылки.Колонки.Добавить("НоваяДатаОкончания");
		//--- AK suvv
		
		Пока НЕ rs.EOF() Цикл
			
			id_tov = Rs.Fields("id_tov").Value;
			СтрокаСНоменклатурой = КешТовары.Найти(id_tov, "id_tov");
			
			Если СтрокаСНоменклатурой <> Неопределено Тогда
				
				Номенклатура = СтрокаСНоменклатурой.Ссылка;
				РеквизитыТекНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ДатаНачалаВыводаНаСинийЦенник, ДатаОкончанияВыводаНаСинийЦенник");
				НоваяДатаНачала     = НачалоДня(ТекущаяДата());
				НоваяДатаОкончания  = НачалоДня(ДобавитьМесяц(ТекущаяДата(), 2));
				СтараяДатаНачала    = РеквизитыТекНоменклатуры.ДатаНачалаВыводаНаСинийЦенник;
				СтараяДатаОкончания = РеквизитыТекНоменклатуры.ДатаОкончанияВыводаНаСинийЦенник;
				
				Если СтараяДатаНачала = НоваяДатаНачала и СтараяДатаОкончания = НоваяДатаОкончания Тогда
					rs.MoveNext();
					Продолжить;
				КонецЕсли;
				
				//+++ AK suvv - для тестирования, потом удалить
				НовСтрока = НоменклатураДляРассылки.Добавить();
				НовСтрока.Номенклатура        = Номенклатура;
				НовСтрока.СтараяДатаНачала    = СтараяДатаНачала;
				НовСтрока.СтараяДатаОкончания = СтараяДатаОкончания; 
				НовСтрока.НоваяДатаНачала     = НоваяДатаНачала;
				НовСтрока.НоваяДатаОкончания  = НоваяДатаОкончания; 
				//--- AK suvv
				
				НоменклатураДляУстановкиДатОбъект = Номенклатура.Получитьобъект();
				НоменклатураДляУстановкиДатОбъект.ДатаНачалаВыводаНаСинийЦенник    = НоваяДатаНачала;
				НоменклатураДляУстановкиДатОбъект.ДатаОкончанияВыводаНаСинийЦенник = НоваяДатаОкончания;
				НоменклатураДляУстановкиДатОбъект.ТекстВместоФишки                 = "НОВИНКА!";
				НоменклатураДляУстановкиДатОбъект.ОбменДанными.Загрузка            = Истина;
				НоменклатураДляУстановкиДатОбъект.Записать();
				
			КонецЕсли;
			
			rs.MoveNext();
			
		КонецЦикла;
		
	Исключение
		
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	//+++ AK suvv 2018.10.22 ИП-00018495 (рассылка пока не нужна)	
	//Если НоменклатураДляРассылки.Количество() <> 0 Тогда
	//	
	//	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	//	
	//	Почта   = Новый ИнтернетПочта;
	//	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	//	Почта.Подключиться(Профиль);
	//	
	//	Письмо  = Новый ИнтернетПочтовоеСообщение;
	//	Письмо.Тема             = "Список НОВИНОК (номенклатуры) на " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + ", по которым произошло изменение периода вывода на синий ценник (ИП-00018495).";
	//	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	//	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	//	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	//	
	//	Получатель = Письмо.Получатели.Добавить();
	//	Получатель.Адрес = "suvv@automacon.ru";
	//	Получатель = Письмо.Получатели.Добавить();
	//	Получатель.Адрес = "abdr@automacon.ru";
	//	
	//	ТекстПисьма = "<table border='1px'><th>Номенклатура</th><th>Старая дата начала</th><th>Старая дата окончания</th><th>Новая дата начала</th><th>Новая дата окончания</th>";
	//	
	//	Для каждого Стр Из НоменклатураДляРассылки Цикл
	//		ТекстПисьма = ТекстПисьма + "<tr>";
	//		ТекстПисьма = ТекстПисьма + "<td>" + Стр.Номенклатура                                 + "</td>";
	//		ТекстПисьма = ТекстПисьма + "<td>" + Формат(Стр.СтараяДатаНачала, "ДФ=dd.MM.yyyy")    + "</td>";
	//		ТекстПисьма = ТекстПисьма + "<td>" + Формат(Стр.СтараяДатаОкончания, "ДФ=dd.MM.yyyy") + "</td>";
	//		ТекстПисьма = ТекстПисьма + "<td>" + Формат(Стр.НоваяДатаНачала, "ДФ=dd.MM.yyyy")     + "</td>";
	//		ТекстПисьма = ТекстПисьма + "<td>" + Формат(Стр.НоваяДатаОкончания, "ДФ=dd.MM.yyyy")  + "</td>";
	//		ТекстПисьма = ТекстПисьма + "</tr>";    
	//	КонецЦикла;
	//	
	//	Письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.HTML);
	//	
	//	Почта.Послать(Письмо);
	//	Почта.Отключиться();
	//	
	//КонецЕсли;
	//--- AK suvv
	
КонецПроцедуры //--- AK suvv

//+++АК KIRN 2018.08.28 ИП-00019611
Процедура ЗаполнитьРасходникиПоЗаданиямНаРазборку() Экспорт
	СпрСкады = Справочники.Склады.Выбрать(,,);
	Пока СпрСкады.Следующий() Цикл
		Если СпрСкады.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении Тогда
			Обработки.ЗаполнитьРасходникиПоЗаданиямНаРазборку.ЗаполнитьРасходники(Новый Структура("ДатаРаспределения, Склад",НачалоДня(ТекущаяДата())+24*60*60,СпрСкады.Ссылка));
		КонецЕСли;
	КонецЦикла;
КонецПроцедуры

//+++АК KIRN 2018.09.12 ИП-00017846.01
Процедура ЗаменитьНеактивныеХарактеристикиАналогами() Экспорт
Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА Хар.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	               |					ИЛИ Хар.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК признак,
	               |	Хар.Владелец КАК Номенклатура
	               |ПОМЕСТИТЬ втНом1
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК Хар
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Хар.Владелец
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВЫБОР
	               |			КОГДА Хар.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	               |					ИЛИ Хар.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) = 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Хар.Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналогиНоменклатурыТовары.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(АналогиНоменклатурыТовары1.Номенклатура) КАК Номенклатура1,
	               |	АналогиНоменклатурыТовары.Ссылка КАК СсылкаАналог
	               |ПОМЕСТИТЬ ВТ_Аналоги
	               |ИЗ
	               |	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары1
	               |		ПО АналогиНоменклатурыТовары.Ссылка = АналогиНоменклатурыТовары1.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНом1 КАК втНом1
	               |		ПО АналогиНоменклатурыТовары.Номенклатура = втНом1.Номенклатура
	               |ГДЕ
	               |	АналогиНоменклатурыТовары.Ссылка.ПолностьюЗаменяемыйТовар = ИСТИНА
	               |	И АналогиНоменклатурыТовары.Номенклатура <> АналогиНоменклатурыТовары1.Номенклатура
	               |	И АналогиНоменклатурыТовары.Номенклатура.Выведена = ЛОЖЬ
	               |	И АналогиНоменклатурыТовары1.Номенклатура.Выведена = ЛОЖЬ
				   |	
				   |СГРУППИРОВАТЬ ПО
				   |	АналогиНоменклатурыТовары.Номенклатура,
	               |	АналогиНоменклатурыТовары.Ссылка
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СпрХар.Ссылка) КАК Характеристика,
	               |	СпрХар.Владелец КАК Номенклатура1,
	               |	вт_аналоги.Номенклатура,
	               |	вт_аналоги.СсылкаАналог
	               |ПОМЕСТИТЬ вт_аналоги_хар
	               |ИЗ
	               |	ВТ_Аналоги КАК вт_аналоги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХар
	               |		ПО (СпрХар.Владелец = вт_аналоги.Номенклатура1)
	               |ГДЕ
	               |	СпрХар.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СпрХар.Владелец,
	               |	вт_аналоги.Номенклатура,
	               |	вт_аналоги.СсылкаАналог
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	вт_аналоги.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	               |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	               |	ТоварныйАссортиментТочекСрезПоследних.Выведена,
	               |	вт_аналоги_хар.Номенклатура1 КАК Номенклатура1,
	               |	вт_аналоги_хар.Характеристика КАК Характеристика1,
	               |	вт_аналоги_хар.СсылкаАналог КАК СсылкаАналог
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |			&ТекДата,
	               |			Номенклатура В
	               |				(ВЫБРАТЬ
	               |					вт_аналоги_хар.Номенклатура
	               |				ИЗ
	               |					вт_аналоги_хар)) КАК ТоварныйАссортиментТочекСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_аналоги_хар КАК вт_аналоги_хар
	               |		ПО ТоварныйАссортиментТочекСрезПоследних.Номенклатура = вт_аналоги_хар.Номенклатура
	               |ГДЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.Активное = ИСТИНА
				   |	И ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		Запись.Период 			= ТекущаяДата();
		Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		Запись.Номенклатура 	= Выборка.Номенклатура;
		Запись.Характеристика 	= Выборка.Характеристика;
		Запись.Выведена			= Истина;
		Запись.Комментарий		= "#ОбработкаСтатусовХарактеристик: Замена неактивной характеристики на активную полного аналога";
		
		//+++АК mika 2018.11.21 ИП-00020481
		Если РегистрыСведений.ТоварныйАссортиментТочек.ПроверкаПрограмногоВыводаПозицииИзАссортиментаАвто(Выборка.ТорговаяТочка, Выборка.Номенклатура, Ложь, "БезУведомлений") Тогда
			Запись.Комментарий = РегистрыСведений.ТоварныйАссортиментТочек.ПолучитьКомментарийОбходаКонтроляАвтовывода(Запись.Комментарий, "ЗаменаНеактивнойХарактеристикиНаАктивную"); //+++АК mika 2018.12.14 ИП-00020392.02 
		КонецЕсли;
		//---АК mika
		
		Запись.Записать();

		Запись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		Запись.Период 			= ТекущаяДата();
		Запись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		Запись.Номенклатура 	= Выборка.Номенклатура1;
		Запись.Характеристика 	= Выборка.Характеристика1;
		Запись.Комментарий		= "#ОбработкаСтатусовХарактеристик: Замена неактивной характеристики на активную полного аналога";
		Запись.Записать();
	КонецЦикла;	

КонецПроцедуры

//+++АК BELN 2018.10.12 ИП-00018718
Процедура ПриостановитьТоварыСНизкимРейтингом() Экспорт
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.Текст = "ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК Ид,
	|	ХарактеристикиНоменклатуры.Владелец КАК Товар
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена)
	|	И ХарактеристикиНоменклатуры.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод)";
	
	ТабКеш = ЗапросКеш.Выполнить().Выгрузить();
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	//+++АК BELN 2018.11.30 ИП-00018718.02   
	
	//ТекстЗапроса = "if OBJECT_ID ('tempdb..#tovlowreit') is not null drop table #tovlowreit
	//|create table #tovlowreit (TovarUID varchar(100), id_tov int, id_kontr int, reiting decimal(15,3), kol decimal(15,3))
	//|
	//|insert into #tovlowreit (TovarUID, id_tov, id_kontr, reiting, kol)
	//|SELECT UINTov._Fld4946 as TovarUID, RT.id_tov
	//|      ,RT.id_kontr
	//|      ,MAX(RT.reiting) reiting, Sum(RT.колво) kol
	//|FROM [Reports].[dbo].[reiting_tov] as RT (nolock)
	//|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON RT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	//|GROUP BY
	//|	UINTov._Fld4946, RT.id_tov
	//|      ,RT.id_kontr
	//|Having Sum(RT.колво)>=20 and MAX(RT.reiting)<4
	//|--------------------------------------------------
	//
	//|select a.TovarUID, a.id_tov, a.id_kontr, a.reiting, a.kol, Min(a.date_ch)
	//|from (
	//|select tovlowreit.TovarUID, tovlowreit.id_tov, tovlowreit.id_kontr, tovlowreit.reiting, tovlowreit.kol
	//|, cast(cl.date_ch  as date)  date_ch
	//|from SMS_UNION..Checkline as cl with(nolock)
	//|inner join #tovlowreit tovlowreit on tovlowreit.id_tov=cl.id_tov_cl and tovlowreit.id_kontr=cl.id_kontr
	//|where OperationType_cl=1  	
	//|union all
	//|select tovlowreit.TovarUID, tovlowreit.id_tov, tovlowreit.id_kontr, tovlowreit.reiting, tovlowreit.kol
	//|, cast(cl.date_ch  as date)  date_ch
	//
	//|from SMS_izbenka..Checkline as cl with(nolock)
	//|inner join #tovlowreit tovlowreit on tovlowreit.id_tov=cl.id_tov_cl and tovlowreit.id_kontr=cl.manufacturerid
	//|where OperationType_cl=1  	
	//|) a	group by a.TovarUID, a.id_tov, a.id_kontr, a.reiting, a.kol
	//|Having Min(a.date_ch)<=dateadd(day,-21,cast(getDate() as date))";
	ТекстЗапроса="EXEC SMS_REPL..FOR1C_GetProdLowRaiting";
	//---АК BELN 2018.11.30 
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Номенклатура");
	ТабДанные.Колонки.Добавить("Характеристика");
	ТабДанные.Колонки.Добавить("Рейтинг");
	ТабДанные.Колонки.Добавить("ДатаОбновления");
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Ид = Rs.Fields("id_kontr").Value;
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			Характеристика = Неопределено;
			Если ЗначениеЗаполнено(Ид) Тогда
				СтрокиКеш = ТабКеш.НайтиСтроки(Новый Структура("Товар, Ид", Номенклатура, Ид));
				Если СтрокиКеш.Количество() = 0 Тогда
					rs.MoveNext();
					Продолжить;
				Иначе
					Характеристика = СтрокиКеш[0].Ссылка;
				КонецЕсли;	
			Иначе
				rs.MoveNext();
				Продолжить;
			КонецЕсли;	
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.Номенклатура = Номенклатура;
			СтрокаДоб.Характеристика = Характеристика;
			СтрокаДоб.Рейтинг = Rs.Fields("reiting").Value;
			ТоварыСтатусПриИзмененииСервер(Номенклатура, Характеристика, Перечисления.СтатусыХарактеристик.Приостановлена,
			"Автовывод по низкому рейтингу "+Строка(Rs.Fields("reiting").Value), "низкий рейтинг", ТекущаяДата(), ДобавитьМесяц(ТекущаяДата(),1));
			
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры

//+++АК BELN 2018.10.12 ИП-00018718
Процедура ТоварыСтатусПриИзмененииСервер(Знач Номенклатура, Знач Характеристика, Знач Статус, Знач Причина, Знач ПричинаПриостановки, Знач ДатаВывода, Знач ДатаОжидаемогоВозврата)
	//---АК SHEP 2018.05.28
	
	ФлСброс = Ложь;
	
	мСтатусАктивностиНовая 		= Перечисления.СтатусыАктивностиХарактеристик.Новая;
	мСтатусАктивностиВыведена 	= Перечисления.СтатусыАктивностиХарактеристик.Выведена;
	мСтатусАктивностиНеактивная = Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
	
	//Если (Статус = Перечисления.СтатусыХарактеристик.НаВывод
	//	ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) 
	//	И НЕ ЗначениеЗаполнено(ДатаВывода) Тогда
	//	ДатаВывода = ТекущаяДата() + 7*24*60*60;
	//КонецЕсли; 
	
	ОбХар = Характеристика.ПолучитьОбъект();
	//Если (Статус = Перечисления.СтатусыХарактеристик.НаВывод
	//		ИЛИ	Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
	
	//+++АК SHEP 2018.05.28 ИП-00018185
	//Если НЕ ЗначениеЗаполнено(Причина)
	//		И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
	Если НЕ ЗначениеЗаполнено(ПричинаПриостановки)
		И (Ложь
		//---АК SHEP 2018.05.28
		ИЛИ	Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда 
		Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
		Сообщить("Необходимо указать причину");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаВывода)
		И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
		ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата"		, ДатаВывода);
		Запрос.УстановитьПараметр("Составляющая", Характеристика);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.Период,
		|	СоставКомплектаСрезПоследних.Характеристика,
		|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
		|	СоставКомплектаСрезПоследних.Составляющая,
		|	СоставКомплектаСрезПоследних.Количество,
		|	СоставКомплектаСрезПоследних.Комплект,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
		|ГДЕ
		|	СоставКомплектаСрезПоследних.Количество > 0
		|	И СоставКомплектаСрезПоследних.Составляющая = &Составляющая";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Сообщить("Данная позиция входит в состав комплекта на дату вывода - " + Выборка.ХарактеристикаВладелец + " " + Выборка.Характеристика);
			Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		Запрос = Новый Запрос;
		МасНомДляПроверки = Новый Массив;
		МасНомДляПроверки.Добавить(Номенклатура);
		Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель
		|ПОМЕСТИТЬ ВТОсновная
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
		|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТОсновная.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТОсновная КАК ВТОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
		|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
		|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
		|ГДЕ
		|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
		
		Выб = Запрос.Выполнить().Выбрать();
		МасНомИскл = Новый Массив;
		Пока Выб.Следующий() Цикл
			Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
			Сообщить(Выб.Номенклатура);
			Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
		КонецЦикла; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаВывода)
		И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
		ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
		
		Запрос.УстановитьПараметр("Дата"			, ДатаВывода);
		Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.Период,
		|	СоставКомплектаСрезПоследних.Характеристика,
		|	СоставКомплектаСрезПоследних.Составляющая,
		|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
		|	СоставКомплектаСрезПоследних.Количество,
		|	СоставКомплектаСрезПоследних.Комплект,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
		|ГДЕ
		|	СоставКомплектаСрезПоследних.Количество > 0
		|	И СоставКомплектаСрезПоследних.Характеристика = &Характеристика";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.СоставКомплекта.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период			= ДатаВывода;
			МенеджерЗаписи.Характеристика	= Характеристика;
			МенеджерЗаписи.Составляющая		= Выборка.Составляющая;
			МенеджерЗаписи.Количество		= 0;
			МенеджерЗаписи.Комплект			= Характеристика.Владелец;
			МенеджерЗаписи.ТоварКомплекта	= Выборка.СоставляющаяВладелец;
			
			МенеджерЗаписи.Записать();
			Сообщить("Создана запись по очистке состава комплекта " + Номенклатура + " " + Характеристика);
		КонецЦикла;
	КонецЕсли; 
	//КонецЕсли;
	
	ОбХар.Статус 	= Статус;
	ОбХар.ПоТовару 	= Ложь;
	
	Если Статус = Перечисления.СтатусыХарактеристик.НаВывод
		ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена  Тогда
		
		ОбХар.ДатаВывода = ДатаВывода;
		//+++АК SHEP 2018.02.01 ИП-00017757
	ИначеЕсли НЕ ЗначениеЗаполнено(Статус) И НЕ ЗначениеЗаполнено(ДатаВывода) Тогда
		ОбХар.ДатаВывода = ДатаВывода;
		//---АК SHEP 2018.02.01
	КонецЕсли;	
	ТекСтатус = ?(ОбХар.СтатусАктивностиХарактеристики = мСтатусАктивностиНовая, мСтатусАктивностиНеактивная, мСтатусАктивностиВыведена);
	ОбХар.СтатусАктивностиХарактеристики = ТекСтатус;
	
	ОбХар.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
	ОбХар.ДатаПоследнегоИзменения	= ТекущаяДата();
	ОбХар.ДатаПовторнойРассылки 	= ТекущаяДата() + 24*60*60;
	ОбХар.ДатаВывода=ДатаВывода;
	ОбХар.ДатаОжидаемогоВозврата=ДатаОжидаемогоВозврата;
	ОбХар.Причина					= Причина;
	ОбХар.ПричинаПриостановки		= Справочники.ПричиныПриостановкиНоменклатуры.НизкийРейтинг; 
	ОбХар.Записать();
	
	Если Статус = Перечисления.СтатусыХарактеристик.НаВывод
		ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		ОтправитьПисьмоОбИзмененииСтатуса(ОбХар.Ссылка, Статус, ДатаВывода, Номенклатура, Причина, Справочники.ПричиныПриостановкиНоменклатуры.НизкийРейтинг);
	КонецЕсли; 
	
	
	
	Если (Статус = Перечисления.СтатусыХарактеристик.Приостановлена
		ИЛИ Статус = Перечисления.СтатусыХарактеристик.НаВывод)
		И НЕ ФлСброс Тогда
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
		|	И ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Наименование <> ""Нехватка товара""";
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Мас = ТЗ.НайтиСтроки(Новый Структура("СтатусАктивностиХарактеристики", Перечисления.СтатусыАктивностиХарактеристик.Выведена));
		Если Мас.Количество() = ТЗ.Количество() Тогда
			
			ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Нехватка товара",,, Номенклатура);
			
			Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
				ХарактеристикаОбъект = ХарактеристикаСсылка.ПолучитьОбъект();
				ХарактеристикаОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна;
				ХарактеристикаОбъект.Неактивная			= Ложь;
			Иначе	
				ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаОбъект.Владелец 			= Номенклатура;
				ХарактеристикаОбъект.Наименование 		= "Нехватка товара";
				ХарактеристикаОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна;
				ХарактеристикаОбъект.ДополнительныеСвойства.Вставить("НадоЗаписать");
				ХарактеристикаОбъект.СрокГодности		= 1;
				ХарактеристикаОбъект.ТипСрокаГодности	= Справочники.ТипыСроковГодности.НайтиПоНаименованию("Месяц");
				ХарактеристикаОбъект.Неактивная			= Ложь;
			КонецЕсли; 
			Попытка
				ХарактеристикаОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

//+++АК BELN 2018.10.12 ИП-00018718
Процедура ОтправитьПисьмоОбИзмененииСтатуса(Ссылка, Статус, ДатаВывода, Номенклатура, Причина, ПричинаПриостановки = "", ПоТовару = Ложь)
	//---АК SHEP 2018.05.28
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Сообщить("Не указан статус! Письмо с информацией об измененном статусе не отправлено.");
		Возврат;
	КонецЕсли;
	
	//
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	
	СписокФайловВложений 	= Новый СписокЗначений;
	//
	//СтруктураНовогоПисьма.Вставить("Тема", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	Если ПоТовару Тогда
		СтрХар = "";
		Для каждого Эл Из Ссылка Цикл
			СтрХар = СтрХар + Строка(Эл) + ", ";
		КонецЦикла; 
		СтрХар = Лев(СтрХар, СтрДлина(СтрХар) - 2);
	КонецЕсли; 
	
	
	Если Статус = Перечисления.СтатусыХарактеристик.НаВывод Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Выводим " 			+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Приостанавливаем " 	+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Оживляем " 			+ ?(ПоТовару, "продукт", "поставщика") +" " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	КонецЕсли; 	
	СтруктураНовогоПисьма.Вставить("Тело", ?(ЗначениеЗаполнено(СтруктураНовогоПисьма.Тема), СтруктураНовогоПисьма.Тема, "") +
	//+++АК SHEP 2018.05.28 ИП-00018185
	//?(Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", Символы.ПС + "Причина - " + Причина));
	?(Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", "
	|Причина приостановки - " + ПричинаПриостановки + ?(ПустаяСтрока(Причина), "", "
	|Комментарий к причине: " + Причина)));
	//---АК SHEP 2018.05.28
	
	//СтруктураНовогоПисьма.Вставить("Тело", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка)+Символы.ПС+"Причина - "+Ссылка.Причина);
	//
	//Если Ссылка.Статус= Перечисления.СтатусыХарактеристик.Рабочая Тогда
	//	СтруктураНовогоПисьма.Вставить("Тело","Оживляем"+" "+
	//	Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	//КонецЕсли; 	
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	Кому 			= Новый СписокЗначений;
	МассивАдресов	= Новый Массив;
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	// помощники технолога
	МасФЛ = ДопМодульСервер.ПолучитьПомощниковТехнологаПоХарактеристике(Ссылка);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	//+++АК SHEP 2017.12.26 ИП-00017537: перенёс сюда (ниже) и добавил условие
	Если МассивАдресов.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Сезонный вывод"));
		Запрос.Текст =     
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НастройкиПользователей.Пользователь КАК Справочник.Пользователи).ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Право = &Настройка
		|	И НастройкиПользователей.Значение = ИСТИНА";
		ВыборкаПользователей = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПользователей.Следующий() Цикл
			МассивАдресов.Добавить(ВыборкаПользователей.ФизЛицо);
		КонецЦикла; 
	КонецЕсли;
	//---АК SHEP 2017.12.26
	
	//+++АК SHEP 2018.06.04 ИП-00017814: передали задачу мне
	//+++АК BARA 2018.03.19  ИП-00017814      
	//ЗапросР = Новый Запрос;
	//ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Ссылка.Владелец);
	//ЗапросР.Текст = 
	//"ВЫБРАТЬ
	//|	РасчетчикиГруппыНоменклатуры.Ссылка
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	//|ГДЕ
	//|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	//|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РасчетчикиГруппыНоменклатуры.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	//|ИЗ
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка";
	//Выборка = ЗапросР.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Для каждого Стр Из Выборка.РольПользователя.СоставРоли Цикл
	//		МассивАдресов.Добавить(Стр.Сотрудник);
	//	КонецЦикла; 
	//КонецЦикла;
	//---АК BARA 2018.03.19  ИП-00017814   
	
	ЗапросР = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетчикиГруппыНоменклатуры.Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	|ГДЕ
	|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетчикиГруппыНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка");
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Номенклатура);
	
	РезультатЗапросаР = ЗапросР.Выполнить();
	Если НЕ РезультатЗапросаР.Пустой() Тогда
		
		Выборка = РезультатЗапросаР.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивАдресов.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		
	КонецЕсли;
	//---АК SHEP 2018.06.04
	
	//+++АК SHEP 2018.09.18 ИП-00017814.01: разкомментировал, подправил, переместил выше (сюда)
	ЗапросР = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(Расчетчики.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты, """") КАК АдресЭлектроннойПочты,
	|	ЕСТЬNULL(Расчетчики.ОсновнойПользователь.ФизЛицо, """") КАК ОсновнойПользовательФизЛицо
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расчетчики КАК Расчетчики
	|		ПО РасчетчикиГруппыНоменклатуры.Ссылка = Расчетчики.Ссылка
	|ГДЕ
	|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	|	И Расчетчики.ПометкаУдаления = ЛОЖЬ");
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Номенклатура);
	
	РезультатЗапросаР = ЗапросР.Выполнить();
	Если НЕ РезультатЗапросаР.Пустой() Тогда
		
		Выборка = РезультатЗапросаР.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ОсновнойПользовательФизЛицо) Тогда
				МассивАдресов.Добавить(Выборка.ОсновнойПользовательФизЛицо);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочты) Тогда
				МассивКомуВрем = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.АдресЭлектроннойПочты, ";", Истина, Истина);
				Для Каждого ЭлтМассива Из МассивКомуВрем Цикл
					Если Кому.НайтиПоЗначению(ЭлтМассива) = Неопределено Тогда
						Кому.Добавить(ЭлтМассива);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 2018.09.18
	
	//Если ПоТовару Тогда
	//	Мерч = Справочники.РолиПользователей.НайтиПоНаименованию("Мерчендайзинг");
	//	Если ЗначениеЗаполнено(Мерч) Тогда
	//		Для каждого Стр Из Мерч.СоставРоли Цикл
	//			МассивАдресов.Добавить(Стр.Сотрудник);
	//		КонецЦикла; 
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
				Кому.Добавить(Выборка.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Кому.Добавить("sp@vkusvill.ru");
	КонецЕсли;
	
	//+++АК SHEP 2018.06.04 ИП-00017814: расчётчикам отправляем с привязкой по номенклатуре (см. выше)
	//Кому.Добавить("izbenka.msv@gmail.com");
	//Кому.Добавить("izbenkaet@gmail.com");
	//Кому.Добавить("izbenka.d.t.v@gmail.com");
	//Кому.Добавить("zakaz01@vkusvill.ru"); 
	//Кому.Добавить("zakaz02@vkusvill.ru");
	//Кому.Добавить("zakaz03@vkusvill.ru");
	//---АК SHEP 2018.06.04
	Кому.Добавить("zakaz04@vkusvill.ru");
	Кому.Добавить("zakaz05@vkusvill.ru");
	Кому.Добавить("zakaz06@vkusvill.ru");
	
	//Если ПоТовару Тогда
	//	Кому.Добавить("masher_33@mail.ru");
	//	Кому.Добавить("gnytovadg@rambler.ru"); 
	//	Кому.Добавить("dotsenko_89@list.ru");
	//	Кому.Добавить("poly.stepanyuk@yandex.ru");
	//	Кому.Добавить("e-tutmina@mail.ru");
	//	Кому.Добавить("yulya.parfenova.00@bk.ru");
	//	Кому.Добавить("yuliashev04@mail.ru");
	//	Кому.Добавить("marie.petrovskaya@yandex.ru");
	//	Кому.Добавить("irissokolova@yandex.ru"); 
	//	Кому.Добавить("annyllat@gmail.com");
	//КонецЕсли; 
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//СтруктураНовогоПисьма.Вставить("Тело", "Изменен статус характеристики "+Строка(Ссылка)+" номенклатуры - "+Строка(Владелец)+" на "+Строка(Статус)+".");
	
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией об измененном статусе на " + СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Характеристика", Ссылка);                                                
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	//|ИЗ
	//|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	//|ГДЕ
	//|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика";
	//Выборка = Запрос.Выполнить().Выбрать();
	
	//Кому = Новый СписокЗначений;
	//Пока Выборка.Следующий() Цикл
	//	Если ЗначениеЗаполнено(СокрЛП(Выборка.АдресЭлектроннойПочты)) Тогда
	//		Кому.Добавить(СокрЛП(Выборка.АдресЭлектроннойПочты));
	//	КонецЕсли; 
	//КонецЦикла;
	//Кому.Добавить(СокрЛП("reklama@izbenka.msk.ru"));
	//
	////
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Характеристика", Ссылка); 
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	//|ГДЕ
	//|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РолиПользователейСоставРоли.Сотрудник
	//|ИЗ
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	//|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	//|				ИЛИ СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель = РолиПользователейСоставРоли.Ссылка)
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.ТорговаяТочка";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//МассивАдресов = Новый Массив;
	//Пока Выборка.Следующий() Цикл
	//	МассивАдресов.Добавить(Выборка.Сотрудник);
	//КонецЦикла;
	//	
	////
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Объект", МассивАдресов);
	//Запрос.Текст =                                                                                   
	//"ВЫБРАТЬ
	//|	КонтактнаяИнформация.Представление
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Объект В(&Объект)
	//|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если Выборка.Количество() > 0 Тогда
	//	Пока Выборка.Следующий() Цикл
	//		Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
	//			Кому.Добавить(Выборка.Представление);
	//		КонецЕсли; 
	//	КонецЦикла;
	//Иначе
	//	Кому.Добавить("sp@vkusvill.ru");
	//КонецЕсли; 
	//СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//
	//СтрКому = "";
	//Для каждого Эл Из Кому Цикл
	//	СтрКому = СтрКому + Эл.Значение + "; ";
	//КонецЦикла; 
	//Попытка
	//	ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
	//	Сообщить("Отправлено письмо с информацией об измененном статусе на " + СтрКому);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.11.13 ИП-00020387
Процедура СинхронизацияНомеровСчетФактур() Экспорт
	
	ОбменСБП2_0.ПроставитьНомераСчетФактур_Из_Базы_БП();	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.11.27 закрытие месяца 
Процедура ВыгрузитьПроводкиПо10_6_В_Бухгалтерию() Экспорт
	
	пОбработка = ОбменСБП2_0.ИнициализироватьОбработкуОбмена(, "ПравилаОбменаДанными");
	
	СтрокиДереваПравилВыгрузки = пОбработка.ТаблицаПравилВыгрузки.Строки;
	
	Для Каждого СтрокаДерева из СтрокиДереваПравилВыгрузки Цикл
		Если СтрокаДерева.Имя = "Документы"	Тогда
			СтрокаДерева.Включить = 1;
			ПравилаВсе = СтрокаДерева.Строки;
		Иначе
			СтрокаДерева.Включить = 0;
		КонецЕсли;
	КонецЦикла;
	
	// документы	
	Для каждого Правило Из ПравилаВсе Цикл
		ИмяПравила = Правило.Имя;
		Если ИмяПравила = "ВыгрузкаМатериалов10_6" Тогда
			Правило.Включить = 1;		
		Иначе
			Правило.Включить = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	пОбработка.ВыполнитьВыгрузку();
	
КонецПроцедуры

//+++АК vasa 2018.12.03 ИП-00020672
Функция ВыгрузкаНаСайтТелефоны(Дом, ЭлементУзелДом, Выборка) 
	
	ВыгрузитьУзлы = Новый Соответствие;
	ВыгрузитьУзлы.Вставить("phone1", "ТелефонныйНомер1");
	ВыгрузитьУзлы.Вставить("phone2", "ТелефонныйНомер2");
	
	Для каждого Узел Из ВыгрузитьУзлы Цикл
		НомерТелефона = Выборка[Узел.Значение];
		ДобавитьТекстовыйУзел(Дом, ЭлементУзелДом, Узел.Ключ, НомерТелефона);
	КонецЦикла;
	
КонецФункции

//+++АК vasa 2018.12.03 ИП-00020672
Функция ДобавитьТекстовыйУзел(Дом, ЭлементУзелДом, Имя, Значение) 
	
	ЭлементДом = Дом.СоздатьЭлемент(Имя);
	ТекУзелДом = ЭлементУзелДом.ДобавитьДочерний(ЭлементДом);
	ТекстДом = Дом.СоздатьТекстовыйУзел(Значение);
	ТекУзелДом.ДобавитьДочерний(ТекстДом);
	
КонецФункции

//+++ AK suvv 2018.12.11 ИП-00019917.03 
Процедура ВыгрузкаДокументовРТУЧерезЭДО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияСвойствОбъектов.Объект
	|ПОМЕСТИТЬ ВТ_КонтрагентыОтправлятьАвтоматически
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.ЭДО_ОтправлятьАвтоматически)
	|	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Контрагенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДО_СопоставлениеДокументов.Документ
	|ПОМЕСТИТЬ ВТ_РТУУжеОтправлены
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|ГДЕ
	|	ЭДО_СопоставлениеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ЭДО_СопоставлениеДокументов.ДокументЭДО <> ЗНАЧЕНИЕ(Документ.ЭДО_ИсходящийДокумент.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(ЭДО_СопоставлениеДокументов.Документ КАК Документ.РеализацияТоваровУслуг).Дата >= &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	ВТ_КонтрагентыОтправлятьАвтоматически КАК ВТ_КонтрагентыОтправлятьАвтоматически
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РТУУжеОтправлены КАК ВТ_РТУУжеОтправлены
	|			ПО РеализацияТоваровУслуг.Ссылка = ВТ_РТУУжеОтправлены.Документ
	|		ПО ВТ_КонтрагентыОтправлятьАвтоматически.Объект = РеализацияТоваровУслуг.Контрагент
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Дата >= &Дата
	|	И ЕСТЬNULL(ВТ_РТУУжеОтправлены.Документ, """") = """"
	|	И РеализацияТоваровУслуг.ДатаИсходящегоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И РеализацияТоваровУслуг.НомерИсходящегоСчетаФактуры <> """"";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(НачалоДня(ТекущаяДата())-5));
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			Результат = ЭДО_ОбщегоНазначения.ОтправитьДокументЭДО(ВыборкаДетальныеЗаписи.Ссылка, "УПД");
		Исключение
			//ЗаписьЖурналаРегистрации("Ошибка отправки документа",УровеньЖурналаРегистрации.Ошибка,,,"Не удалось отправить документ: "+ВыборкаДетальныеЗаписи.Ссылка);
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры //--- AK suvv

// Выполняет рассылку на основании данных по проведению документа "Установка типов цен номенклатуры" (Ассортимент Вкусоматов)
//
// Параметры:
//  Документ  - <Тип.ДокуменСсылка> - Установка типов цен номенклатуры
//
Процедура ВыполнитьРассылкуПоИзменениюРозничныхЦенВкусоматы(Документ) Экспорт //+++АК mika 2018.12.14 ИП-00020382

	ОтчетОбъект = Отчеты.ИзменениеРозничныхЦенВендинги.Создать();
	ОтчетОбъект.СформироватьОправитьОтчетПоИзменениюРозничныхЦенВкусоматы(Новый Структура("Документ", Документ));

КонецПроцедуры // ВыполнитьРассылкуПоИзменениюРозничныхЦенВкусоматы()
