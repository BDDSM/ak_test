
////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ВНЕШНЕЙ КОМПОНЕНТОЙ
////////////////////////////////////////////////////////////////////////////////

Процедура ПодключитьсяAsterisk() Экспорт
	
	АК_ТелефонияСервер.УстановитьЗагруженаКомпонентаROMAsterisk(Ложь);
	
	ВнутреннийНомер = АК_ТелефонияСервер.ПолучитьВнутренийНомер();
	Если НЕ ЗначениеЗаполнено(ВнутреннийНомер) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ АК_ТелефонияСервер.ЕстьРольТелефония() Тогда
		Сообщить("У пользователя нет прав на использования телефонии.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗагрузитьКомпонентуТелефонии() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ИнициализироватьТелефонию() Тогда
		Возврат;
	КонецЕсли;
	
	//
	ПодключитьсяПовторно();	
	
КонецПроцедуры

Процедура ПодключитьсяПовторно() Экспорт
	
	Адрес	= "10.0.0.10";
	Порт	= 5038;
	Логин	= "admin2";
	Пароль	= "sho9fahN";
	ВнутреннийНомер = АК_ТелефонияСервер.ПолучитьВнутренийНомер();
	Если НЕ ЗначениеЗаполнено(ВнутреннийНомер) Тогда
		Возврат;
	КонецЕсли;
	
	// подключение и авторизация
	Если НЕ Подключиться(Адрес, Порт, Логин, Пароль) Тогда
		Возврат;
	КонецЕсли;
	ИндикаторПодключения = глТелефония.Подключено;
	
	// подписка на получение событий
	возврат1 = ПодписатьсяНаВнешниеСобытия(1);
	
	// указываем класс событий Asterisk, который необходимо получать 
	возврат2 = УстановитьФильтрСобытий("dialplan,call,agent,command");
	
	// устанавливаем фильтр по внутреннему номеру
	возврат3 = УстановитьФильтр(ВнутреннийНомер);
	АК_ТелефонияСервер.УстановитьЗагруженаКомпонентаROMAsterisk(Истина);
	
КонецПроцедуры

Функция ЗагрузитьКомпонентуТелефонии()

	// кроме веб-клиента
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	// константы определим отдельно, чтобы легко было менять на свои
	ИмяВК = "ROM-Asterisk";
	
	Попытка
		
		//#Если ТолстыйКлиентОбычноеПриложение или ТолстыйКлиентУправляемоеПриложение Тогда
		//	Каталог="C:\Windows\SysWOW64";
		//	ФайлВК = Новый Файл(Каталог+"\"+ИмяВК+".dll");
		//	Если ФайлВК.Существует()=Ложь Тогда
		//		Сообщить("Не найден файл внешней компоненты для связи с Asterisk");
		//		Возврат Ложь;
		//	КонецЕсли; 
		//	Попытка
		//		ЗагрузитьВнешнююКомпоненту(ФайлВК.ПолноеИмя);
		//	Исключение
		//		Сообщить("Не удалось подключить загрузить компоненту для связи с Asterisk");
		//		Возврат Ложь;
		//	КонецПопытки; 
		//#Иначе
			Если ПодключитьВнешнююКомпоненту("AddIn." + ИмяВК) = Ложь Тогда
				Сообщить("Не удалось подключить внешнюю компоненту для связи с Asterisk в режиме тонкого клиента");
				Сообщить("Если это первый запуск, то нужно войти в режиме толстого клиента");
				Возврат Ложь;
			КонецЕсли; 
		//#КонецЕсли
		
		Возврат Истина;
		
	Исключение
		Сообщить("Не удалось загрузить внешнюю компоненту для связи с Asterisk");
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Функция ИнициализироватьТелефонию()
	
	// кроме веб-клиента
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	Причина = "";
    Попытка
		глТелефония = Новый ("AddIn.ROM-Asterisk");
		//глЗначениеПеременнойУстановить("глАК_Телефония", глТелефония);
	Исключение
		Сообщить("Не создать объект внешней компоненты для связи с Asterisk." + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

Функция Подключиться(Адрес, Порт, Логин, Пароль)
	
	глТелефония.Подключиться(Адрес, Порт);
	
	Возврат Login(Логин, Пароль);
	
КонецФункции

Функция ПроверкаДоступности()
	
	Если АК_ТелефонияСервер.ПолучитьЗагруженаКомпонентаROMAsterisk() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Сообщить("Компонента Asterisk не подключена");
	
	Возврат Ложь;
	
КонецФункции

Процедура Отключиться() Экспорт 
	
	Если НЕ ЗначениеЗаполнено(АК_ТелефонияСервер.ПолучитьВнутренийНомер()) Тогда
		Возврат;
	КонецЕсли;
	
	Если глТелефония <> Неопределено
			И глТелефония.Подключено = 1 Тогда
		Logoff();
		глТелефония.Отключиться();
	КонецЕсли;
	
КонецПроцедуры

// Управление фильтром событий AMI Asterisk
//
// Параметры:
//	СтрФильтра:	Строка - фильтры, согласно спецификации AMI
//
// Возвращаемое значение:
//	Число	: 1-команда успешно отправлена, 0-нет
//
Функция УстановитьФильтрСобытий(СтрокаФильтра="")
	
	Возврат Event(СтрокаФильтра);
	
КонецФункции

// Установить фильтр - регулярное выражение
//
// Параметры
//  СтрокаФильтра	- Строка - регулярное выражение
//
// Возвращаемое значение:
//   Число   - 1-фильтр установлен, 0 -нет
//
Функция УстановитьФильтр(СтрокаФильтра)

	Возврат глТелефония.УстановитьРегулярноеВыражение(СтрокаФильтра);

КонецФункции

// Включение/Отключение режима подписки на внешние события
//
// Параметры:
//	Режим	: - Число - 1-включить, 0-выключить
//
// Возвращаемое значение:
//	Число	: режим подписки после выполнения метода
//
Функция ПодписатьсяНаВнешниеСобытия(Режим)
	
	ТекущийРежим = глТелефония.РежимПрослушивания;
	
	// корректируем принимаемый параметр
	Режим = ?(Режим < 0, 0, Режим);
	Режим = ?(Режим > 1, 1, Режим);
	Если Режим - ТекущийРежим > 0 Тогда
		глТелефония.РежимПрослушивания(Режим);
	КонецЕсли;
	
	Возврат глТелефония.РежимПрослушивания;
	
КонецФункции

// Выполнить команду AMI
//
// Параметры
//  СтрокаКоманды	- Строка - в формате AMI
//
// Возвращаемое значение:
//   Число   - 1-команда успешно отправлена, 0 -нет
//
Функция ВыполнитьКоманду(СтрокаКоманды)
	
	Если Найти(СтрокаКоманды, "Action: Login") = 0 
			И Найти(СтрокаКоманды, "Action: Events") = 0 
			И НЕ ПроверкаДоступности() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// кроме веб-клиента
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	CRLF = Chars.CR + Chars.LF;
	
	// проверка завершения пакета
	Если Найти(СтрокаКоманды, CRLF + CRLF) = 0 Тогда
		Сообщить("ВыполнитьКоманду: Неверный формат команды: " + CRLF + СтрокаКоманды);
		Возврат Ложь;
	КонецЕсли;
	
	//
	Попытка
		Результат = глТелефония.ВыполнитьКоманду(СтрокаКоманды);
	Исключение
	КонецПопытки;
	
	Если Результат = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ASTERISK
////////////////////////////////////////////////////////////////////////////////

// Авторизация в Asterisk Manager API
//
// Возвращаемое значение: 1-команда отправлена, 0-нет
//
Функция Login(Логин, Пароль)

	Если ПустаяСтрока(Логин) Тогда
		Сообщить("Login(). Не указан параметр <Логин>");
		Возврат Ложь;
	КонецЕсли; 
	
	Если ПустаяСтрока(Пароль) Тогда
		Сообщить("Login(). Не указан параметр <Пароль>");
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если глТелефония.Подключено = 1 Тогда
		
		CRLF = Chars.CR + Chars.LF;
		СтрокаКоманды = "Action: Login"	+ CRLF +
						"Username: "	+ Логин		+ CRLF +
						"Secret: "		+ Пароль 	+ CRLF + CRLF;
		
		Возврат ВыполнитьКоманду(СтрокаКоманды);
		
	КонецЕсли; 

КонецФункции
 
// Завершения сеанса Asterisk Manager API и закрытие соединения
//
// Возвращаемое значение: 1-команда отправлена, 0-нет
//
Функция Logoff()

	CRLF = Chars.CR + Chars.LF;
	ТекстКоманды = "Action: Logoff" + CRLF + CRLF;
	
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции
 
// Команда оригинации (по сути, совершение исходящего звонка)
//
// Параметры:
//		Приемник	-	Строка - Кому звоним. Экстен для используемый для соединения (используется только совместно с параметрами Context и Priority)
//		Источник	-	Строка - Название канала, с которого совершается исходящий вызов (В том же формате, как если бы Вы совершали вызов этому абоненту командой Dial)
//		Контекст	-	Строка - Название контекста для совершения исходящего вызова (используется только совместно с параметрами Exten и Priority)
//		Таймаут		-	Строка - Таймаут (в миллисекундах) для соединения с инициатором исходящего вызова (значение по умолчанию: 30000 миллисекунд)
//		Приоритет	-	Строка - Приоритет (используется только совместно с параметрами Context и Exten)
//		ИДНомера	-	Строка - Значение CallerID-источника, используемое для совершения исходящего вызова.
//		СтрокаПерем	-	Строка - Установка переменных канала (максимум 32). Переменные будут установлены для обоих каналов, участвующих в соединении (локального, для абонента от которого совершается вызов и для вызываемого канала)
//		Account		-	Строка - Значение для "Account code" исходящего вызова
//		Application	-	Строка - Команда плана набора, используемая для совершения исходящего вызова (используется параметр "Data", для указания ее параметров)
//		Данные		-	Строка - Параметры команды плана набора, используемой для совершения исходящего вызова
//		ФлагАсинхр	-	Если указано "true" исходящий вызов будет производиться асинхронно. Результат ее выполнения будет возвращен позже, в пакете типа "Event" (позволяет осуществлять несколько вызовов без ожидания результата предыдущей команды, совершающей исходящий вызов)
//		ИД			-	Строка - Необязательный ID команды, который будет возвращен в ответе. Позволяет сопоставить результат выполнения конкретному запросу. 
//								В качестве значения можно использовать или номер или строку. 
//								Очень полезно использовать, когда выполняется несколько асинхронных запросов одновременно
//
// Возвращаемое значение: 1-команда отправлена, 0-нет
//
Функция Originate(Приемник, Источник, Контекст, Таймаут = "30000", Приоритет = "1", ИДНомера = "", СтрокаПерем = "", КодУчетной = "", КомандаНабора = "", ДанныеНабора = "",
					ФлагАсинхр = "false", ИД = "")

	CRLF = Символы.ВК + Символы.ПС;
	
	Если ПустаяСтрока(Приемник) Тогда
		Сообщить("Originate(). Ошибка. Не указан номер, на который выполняется звонок");
		Возврат 0;
	КонецЕсли; 
	
	Если ПустаяСтрока(Источник) Тогда
		Сообщить("Originate(). Ошибка. Не указан номер-источник, с которого выполняется звонок");
		Возврат 0;
	КонецЕсли; 
	
	Если ПустаяСтрока(Контекст) Тогда
		Сообщить("Originate(). Ошибка. Не указан контекст");
		Возврат 0;
	КонецЕсли; 
	
	Если ПустаяСтрока(ИДНомера) Тогда
		ИДНомера = Источник;
	КонецЕсли; 
	
	Если ПустаяСтрока(СтрокаПерем) Тогда
		СтрокаПерем = "";
	КонецЕсли; 
	
	ТекстКоманды = "Action: Originate" + CRLF +
					"Channel: " 	+ Источник	+ CRLF +
					"Context: " 	+ Контекст	+ CRLF +
					"Exten: "		+ Приемник	+ CRLF +
					"Priority: "	+ Приоритет	+ CRLF +
					"Callerid: "	+ ИДНомера	+ CRLF +
					"Timeout: "		+ Таймаут	+ CRLF;
	
	Если ПустаяСтрока(СтрокаПерем) = Ложь Тогда
		ТекстКоманды = ТекстКоманды + "Variable: " 		+ СтрокаПерем + CRLF;
	КонецЕсли; 
	
	Если ПустаяСтрока(КодУчетной) = Ложь Тогда
		ТекстКоманды = ТекстКоманды + "Account: " 		+ КодУчетной + CRLF;
	КонецЕсли; 
	
	Если ПустаяСтрока(КомандаНабора) = Ложь Тогда
		ТекстКоманды = ТекстКоманды + "Application: "	+ КомандаНабора + CRLF;
	КонецЕсли; 
	
	Если ПустаяСтрока(ДанныеНабора) = Ложь Тогда
		ТекстКоманды = ТекстКоманды + "Data: "			+ ДанныеНабора + CRLF;
	КонецЕсли; 
	
	ТекстКоманды = ТекстКоманды 	+ "Async: " 		+ ФлагАсинхр + CRLF;
	
	Если ПустаяСтрока(ИД) = Ложь Тогда
		ТекстКоманды = ТекстКоманды + "ActionID: "		+ ИД + CRLF;
	КонецЕсли; 
	ТекстКоманды = ТекстКоманды + CRLF;
	
	//
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции
 
// Авторизация в Asterisk Manager API
//
// Возвращаемое значение: 1-команда отправлена, 0-нет
//
Функция Event(СтрокаФильтр = "on", ИД = "")

	CRLF = Chars.CR + Chars.LF;
	ТекстКоманды = "Action: Events" + CRLF +
					"EventMask: "	+ СтрокаФильтр + CRLF;
	
	Если ПустаяСтрока(ИД) = Ложь Тогда
		ТекстКоманды = ТекстКоманды + "ActionID: " + ИД + CRLF;
	КонецЕсли; 
	ТекстКоманды = ТекстКоманды + CRLF;
	
	Возврат ВыполнитьКоманду(ТекстКоманды);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьКонтактПоНомеруТелефона(НомерТелефона)
	
	Структура = Новый Структура;
	Структура.Вставить("Объект"	, АК_ТелефонияСервер.ПолучитьОбъектЗвонка(НомерТелефона));
	Структура.Вставить("Телефон", НомерТелефона);
	
	Возврат Структура;
	
КонецФункции

// Возвращает коллекцию типа соответствие
// Вход	:
//			СтрДанные - строка с разделителями
// Выход:
//			ДанныеСобытия - Соответствие
Функция ДанныеВСоответствие(Знач Данные) Экспорт
	
	Массив = Новый Соответствие;
	СтрБуфер = Данные;
	// Пакет может быть завершен CR-ом, без LF-а. Дополним...
	Если Прав(СтрБуфер, 1) = Chars.CR Тогда
		СтрБуфер = СтрБуфер + Chars.LF;
	КонецЕсли; 
	
	// переменные для разбора строк
	CRLF = Chars.CR + Chars.LF;
	КолвоСтрок = СтрЧислоВхождений(СтрБуфер, CRLF);
	ДлинаCRLF = СтрДлина(CRLF);
	
	// переменные для разбора ключ-значение, внутри строки
	Разделитель = ": ";
	ДлинаРазделителя = СтрДлина(Разделитель);

	Для Индекс = 1 По КолвоСтрок Цикл
		
		// выборка строк, разделенных CRLF
		ПозицияCRLF = Найти(СтрБуфер, CRLF);
		ТекСтрока = Лев(СтрБуфер, ПозицияCRLF - 1);
		
		// в строке, ключ и значение разделены ": "
		ПозицияРазделителя=Найти(СтрБуфер, Разделитель);
		Ключ		= Лев(ТекСтрока, ПозицияРазделителя - 1);
		Значение	= Сред(ТекСтрока, ПозицияРазделителя + ДлинаРазделителя);
		Если (Найти(Ключ,"CallerID") > 0
				ИЛИ Ключ = "ConnectedLineNum") 
			И Ключ <> "CallerIDName" Тогда
			//Значение = ПолучитьКонтактПоНомеруТелефона(Значение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Ключ) Тогда
			Массив.Вставить(Ключ, Значение);
		КонецЕсли; 
		
		// отрезаем прочитанную часть
		СтрБуфер = Сред(СтрБуфер, ПозицияCRLF + ДлинаCRLF);
		
	КонецЦикла; 
	
	Возврат Массив;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Обработка входящих событий
////////////////////////////////////////////////////////////////////////////////

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	Если глТелефония = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = "ROM-Asterisk" Тогда
	
		Если Событие = "Disconnect" Тогда
			// возможно потеряли связь, перепоключение через 30 секунд
			Сообщить("Соединение с сервером телефонии разорвано");
			ПодключитьОбработчикОжидания("ПодключитьсяКAsterisk", 30, Истина);
			Сообщить("Попытка переподключения будет выполняться через 30 секунд");
			АК_ТелефонияСервер.УстановитьЗагруженаКомпонентаROMAsterisk(Ложь);
			Возврат;
		Иначе
			ОтключитьОбработчикОжидания("ПодключитьсяКAsterisk");
		КонецЕсли;
		
		//// классификация входящих событий и перенаправление в обработчики
		ДанныеСобытия=ДанныеВСоответствие(Данные);
		ВидСобытия=ВРег(СокрЛП(ДанныеСобытия.Получить("Event")));
		Если ВидСобытия = ВРег("Bridge") Тогда
			// событие поднятия трубки
			CallerID1	= ДанныеСобытия.Получить("CallerID1");
			CallerID2	= ДанныеСобытия.Получить("CallerID2");
			Bridgestate	= ДанныеСобытия.Получить("Bridgestate");
			Если ЗначениеЗаполнено(CallerID1) 
					И СтрДлина(CallerID1) > 9
					И ЗначениеЗаполнено(CallerID2)
					И Bridgestate = "Link" Тогда
				CallerID = ПолучитьКонтактПоНомеруТелефона(?(СтрДлина(CallerID1) > 9, CallerID1, CallerID2));
				
				АК_РегистрироватьОбращенияВТехподдержку = АК_ТелефонияСервер.АК_РегистрироватьОбращенияВТехподдержку(CallerID2);
				
				СтруктураОтбора = Новый Структура;
				Если ТипЗнч(CallerID.Объект) = Тип("Строка") Тогда
					НомерТелефона = CallerID.Телефон;
					НомерТелефона = ?(СтрДлина(НомерТелефона) = 11, Прав(НомерТелефона, 10), НомерТелефона);
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Фамилия"		, "");
					СтруктураОтбора.Вставить("Телефон"		, НомерТелефона);
					СтруктураОтбора.Вставить("ДатаРождения"	, "");
					СтруктураОтбора.Вставить("email"		, "");
					
					//+++АК SHEP 20160428: добавил обращение в техподдержку
					Если АК_РегистрироватьОбращенияВТехподдержку Тогда
						СтруктураОтбора.Очистить();
					Иначе
						ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаСпискаКлиентов", СтруктураОтбора);
					КонецЕсли;
					//---АК SHEP
				ИначеЕсли ЗначениеЗаполнено(CallerID.Объект) Тогда
					//+++АК SHEP 20160428: добавил обращение в техподдержку
					Если АК_РегистрироватьОбращенияВТехподдержку Тогда
						СтруктураОтбора.Очистить();
						Если ТипЗнч(CallerID.Объект) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
							СтруктураОтбора.Вставить("ТорговаяТочка", CallerID.Объект);
						Иначе
							СтруктураОтбора.Вставить("Звонящий_Объект", CallerID.Объект);
						КонецЕсли;
					ИначеЕсли ТипЗнч(CallerID.Объект) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
						ОткрытьЗначение(CallerID.Объект);
					КонецЕсли;
					//---АК SHEP
				КонецЕсли;
				
				//+++АК SHEP 20160428: добавил обращение в техподдержку
				Если АК_РегистрироватьОбращенияВТехподдержку Тогда
					UniqueID = ДанныеСобытия.Получить("Uniqueid1");
					СтруктураОтбора.Вставить("UniqueID"		, UniqueID);
					СтруктураОтбора.Вставить("Дата"			, ТекущаяДата());
					СтруктураОтбора.Вставить("НомерТелефона", CallerID.Телефон);
					ОткрытьФорму("Документ.АК_ОбращениеВТехподдержку.ФормаОбъекта", Новый Структура("Основание", СтруктураОтбора), , UniqueID);
				КонецЕсли;
				//---АК SHEP
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОЛЬЗОВАТЕЛЬСКИЕ КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

// Отправка команды на исходящий звонок
//
// Параметры:
//	Куда	-	Строка - Номер куда звонить
//
// Возвращаемое значение:
//	Число	: 1-команда успешно отправлена, 0-нет
//
// Описание:
// Сначала, звонок отправляется 1-му каналу, т.е. оператору на внутренний номер. 
// Только после того, как оператор поднял трубку, т.е. 1-й канал создан, 
// будет выполнен вызов 2-го канала, т.е. внешнего абонента 
//
Функция Звонить(Знач Куда) Экспорт
	
	Если НЕ АК_ТелефонияСервер.ПолучитьЗагруженаКомпонентаROMAsterisk() Тогда
		ПодключитьсяПовторно();
	КонецЕсли;
	
	//
	Куда = АК_ТелефонияСервер.ОчиститьНомерТелефонаКлиент(Куда);
	CRLF = Chars.CR + Chars.LF;
	Если ПустаяСтрока(Куда) Тогда
		Сообщить("Звонить(). Ошибка. Не указан номер, куда выполняется звонок");
		Возврат Ложь;
	КонецЕсли;
	
	//
	Если НЕ Лев(Куда, 1) = "+" Тогда
		Куда = "+" + Куда;
	КонецЕсли;
	
	Откуда 		= АК_ТелефонияСервер.ПолучитьTrunkName() + "/" + АК_ТелефонияСервер.ПолучитьВнутренийНомер();
	Контекст 	= "from-internal"; 
	Таймаут		= "30000";
	
	Originate(Куда, Откуда, Контекст, Таймаут, 1, "");
	
	Возврат Истина;
	
КонецФункции

Функция ЗвонитьОтКлиента(Знач Куда) Экспорт
	
	Куда = АК_ТелефонияСервер.ОчиститьНомерТелефонаКлиент(Куда);
	//Куда = Сред(Куда,2);
	
	CRLF = Chars.CR + Chars.LF;
	Если ПустаяСтрока(Куда) Тогда
		Сообщить("Звонить(). Ошибка. Не указан номер куда выполняется звонок");
		Возврат 0;
	КонецЕсли;
	
	ОписаниеЗвонка = Куда;
	Откуда 		= АК_ТелефонияСервер.ПолучитьTrunkName() + "/" + Куда;
	//Откуда = Куда;
	Контекст 	= "ext-group"; 
	Таймаут		= "30000";     
	Куда 		= АК_ТелефонияСервер.ПолучитьВнутренийНомер();                       
	//Куда = АК_ТелефонияСервер.ПолучитьTrunkName() + "/"+АК_ТелефонияСервер.ПолучитьВнутренийНомер();
	
	//
	Originate(Куда, Откуда, Контекст, Таймаут, 1, ОписаниеЗвонка);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьИмяФайлаЗаписиРазговора(Каталог = "", ИмяФайлаВБазе) Экспорт
	
	//Возврат "D:\Temp\Windows Feed Discovered.wav";
	#Если ВебКлиент Тогда
		Возврат Неопределено;
	#КонецЕсли
	
	АдресСайта 	= "10.0.0.10";
	Логин 		= "asterisk_monitor";
	Пароль 		= "eeNgohw8";
	FTPСоединение = Новый FTPСоединение(АдресСайта,, Логин, Пароль);
	FTPСоединение.УстановитьТекущийКаталог(Каталог);
	
	Если FTPСоединение.НайтиФайлы(Каталог, ИмяФайлаВБазе, НЕ ЗначениеЗаполнено(Каталог)).Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ВременныйФайл = "";
	#Иначе
	ВременныйФайл = ПолучитьИмяВременногоФайла("wav");
	FTPСоединение.Получить(Каталог + ИмяФайлаВБазе, ВременныйФайл);
	#КонецЕсли
	
	Если ВременныйФайл = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВременныйФайл;
	
КонецФункции

