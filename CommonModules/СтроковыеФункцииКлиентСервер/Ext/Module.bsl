////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРОКАМИ

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  – Строка – номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  – Строка – второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   – больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
		                    НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
	                         НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СравнитьВерсии2(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	ВерсияПустая = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок("0.0", ".");
	
	Версия1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаВерсии1, ".");
	Если Версия1.Количество() <> 2 Тогда
		Версия1= ВерсияПустая;
	КонецЕсли;
	
	Версия2 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаВерсии2, ".");
	Если Версия2.Количество() <> 2 Тогда
		Версия2 = ВерсияПустая;
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 10.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
                                   Знач Параметр1,
                                   Знач Параметр2 = Неопределено,
                                   Знач Параметр3 = Неопределено,
                                   Знач Параметр4 = Неопределено,
                                   Знач Параметр5 = Неопределено,
                                   Знач Параметр6 = Неопределено,
                                   Знач Параметр7 = Неопределено,
                                   Знач Параметр8 = Неопределено,
                                   Знач Параметр9 = Неопределено,
                                   Знач Параметр10 = Неопределено) Экспорт
	
	СтрокаРезультата = СтрокаПодстановки;
	
	СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%1", Параметр1);
	
	Если Параметр2 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%2", Параметр2);
	КонецЕсли;
	
	Если Параметр3 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%3", Параметр3);
	КонецЕсли;
	
	Если Параметр4 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%4", Параметр4);
	КонецЕсли;
	
	Если Параметр5 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%5", Параметр5);
	КонецЕсли;
	
	Если Параметр6 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%6", Параметр6);
	КонецЕсли;
	
	Если Параметр7 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%7", Параметр7);
	КонецЕсли;
	
	Если Параметр8 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%8", Параметр8);
	КонецЕсли;
	
	Если Параметр9 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%9", Параметр9);
	КонецЕсли;
	
	Если Параметр10 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%10", Параметр10);
	КонецЕсли;
	
	Возврат СтрокаРезультата;
	
КонецФункции

// Подставляет параметры в строку. Неограниченное число параметров в строке.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%1").
//  МассивПараметров   - Массив - массив строк, которые соответствуют параметрам в строке подстановки
//
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// МассивПараметров = Новый Массив;
// МассивПараметров = МассивПараметров.Добавить("Вася");
// МассивПараметров = МассивПараметров.Добавить("Зоопарк");
//
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), МассивПараметров);
//
Функция ПодставитьПараметрыВСтрокуИзМассива(Знач СтрокаПодстановки, знач МассивПараметров) Экспорт
	
	СтрокаРезультата = СтрокаПодстановки;
	
	Для Индекс = 1 По МассивПараметров.Количество() Цикл
		Если Не ПустаяСтрока(МассивПараметров[Индекс-1]) Тогда
			СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%"+Строка(Индекс), МассивПараметров[Индекс-1]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультата;
	
КонецФункции

// Заменяет в шаблоне строки имена параметров на их значения. Параметры в строке выделяются с двух сторон квадратными скобками.
//
// Параметры:
//
//  ШаблонСтроки        - Строка    - строка, в которую необходимо вставить значения.
//  ВставляемыеЗначения - Структура - структура значений, где ключ - имя параметра без спецсимволов,
//                                    значение - вставляемое значение.
//
// Возвращаемое значение:
//  Строка - строка со вставленными значениями.
//
// Пример использования:
//  ВставитьПараметрыВСтроку("Здравствуй, [Имя] [Фамилия].", Новый Структура("Фамилия,Имя", "Пупкин", "Вася"));
//  Возвращает: "Здравствуй, Вася Пупкин".
Функция ВставитьПараметрыВСтроку(Знач ШаблонСтроки, ВставляемыеЗначения) Экспорт
	Результат = ШаблонСтроки;
	Для Каждого Параметр Из ВставляемыеЗначения Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Параметр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Удаляет двойные кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Строка       - входная строка;
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
// 
Функция СократитьДвойныеКавычки(Знач Строка) Экспорт
	
	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2); 
	КонецЦикла; 
	Пока Найти(Результат, """") = СтрДлина(Результат) Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1); 
	КонецЦикла; 
	Возврат Результат;
	
КонецФункции 

// Процедура удаляет из строки указанное количество символов справа
//
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов) Экспорт
	
	Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);
	
КонецПроцедуры 

// Находит символ в строке с конца
//
Функция НайтиСимволСКонца(Знач СтрокаВся, Знач ОдинСимвол) Экспорт
	
	Перем ТекущаяПозиция;
	
	НачальнаяПозиция = 1; 
	ДлинаСтроки = СтрДлина(СтрокаВся);
	
	Для ТекущаяПозиция = 1 По СтрДлина(СтрокаВся) Цикл
		РеальнаяПозиция = ДлинаСтроки - ТекущаяПозиция + 1;
		ТекущийСимвол = Сред(СтрокаВся, РеальнаяПозиция, 1);
		Если ТекущийСимвол = ОдинСимвол Тогда
			Возврат РеальнаяПозиция;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Функция проверяет является ли переданная в неё строка уникальным идентификатором
//
Функция ЭтоУникальныйИдентификатор(ИдентификаторСтрока) Экспорт
	
	УИСтрока = ИдентификаторСтрока;
	
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) = СтрДлина(УИСтрока) тогда
		Для Сч = 1 по СтрДлина(УИСтрока) Цикл
			Если КодСимвола(Шаблон, сч) = 88 И 
				((КодСимвола(УИСтрока, сч) < 48 или КодСимвола(УИСтрока, сч) > 57) и (КодСимвола(УИСтрока, сч) < 97 или КодСимвола(УИСтрока, сч) > 102)) 
				тогда
				Возврат ложь; 
		 	ИначеЕсли КодСимвола(Шаблон, сч) = 45 и КодСимвола(УИСтрока, сч) <> 45 тогда
				Возврат ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей.
//
// Возвращаемое значение:
//  Булево - истина, если символ является разделителем.
//
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки
//  УчитыватьЛидирующиеНули - Булево - Флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются
//  УчитыватьПробелы        - Булево - Флаг учета пробелов, если Истина, то пробелы при проверке игнорируются
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
		
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")
	) = 0;
	
КонецФункции

// Проверяет, содержит ли строка только символы кириллического алфавита.
//
// Параметры:
//  УчитыватьРазделителиСлов - Булево - учитывать ли разделители слов или они являются исключением.
//  ДопустимыеСимволы - строка для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если строка содержит только кириллические (или допустимые) символы или пустая;
//           Ложь, если строка содержит иные символы.
//
Функция ТолькоКириллицаВСтроке(Знач СтрокаПроверки, Знач УчитыватьРазделителиСлов = Истина, ДопустимыеСимволы = "") Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КодыДопустимыхСимволов = Новый Массив;
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	КодыДопустимыхСимволов.Добавить(1025); // "Ё"
	
	Для а = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		КодыДопустимыхСимволов.Добавить(КодСимвола(Сред(ДопустимыеСимволы, а, 1)));
	КонецЦикла;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если ((КодСимвола < 1040) Или (КодСимвола > 1103)) 
			И (КодыДопустимыхСимволов.Найти(КодСимвола) = Неопределено) 
			И Не (Не УчитыватьРазделителиСлов И ЭтоРазделительСлов(КодСимвола)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


//+++АК SHEP 2018.04.02 общая функция
Функция ТекстХТМЛ_НачалоХТМЛ() Экспорт
	
	Возврат "<HTML>
			|<HEAD>
			|<META HTTP-EQUIV='Content-Type' CONTENT='text/html; CHARSET=utf-8'>
			|<TITLE></TITLE></HEAD><BODY>
			|";
	
КонецФункции

//+++АК SHEP 20170714
//+++АК SHEP 2018.04.02: добавил транспонирование таблицы (чтобы шло имя поля — значение в отдельной строке)
Функция ТекстХТМЛ_ТаблицаЗаголовок(Знач СтруктураПолей, ТранспонироватьТаблицу = Ложь) Экспорт
Перем ТекстХТМЛ;
	
	ТекстХТМЛ = " 
		|<TABLE width='100%' border='1' cellspacing='0'>
		|<THEAD align='center'>
		|<TR>";
	
	Если ТранспонироватьТаблицу Тогда
		СтруктураПолей = Новый Структура("Ключ,Значение", "Имя поля", "Значение");
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		ТекстХТМЛ = ТекстХТМЛ + "
		|	<TD><B>" + КлючИЗначение.Значение + "</B></TD>";
	КонецЦикла;
	
	ТекстХТМЛ = ТекстХТМЛ + "
		|</TR>
		|</THEAD>
		|<TBODY>
		|";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

//+++АК SHEP 20170714
//+++АК SHEP 2018.04.02: добавил транспонирование таблицы (чтобы шло имя поля — значение в отдельной строке)
Функция ТекстХТМЛ_ТаблицаТело(Знач СтруктураПолей, ТаблицаРезультатов = Неопределено, ЗакрыватьТаблицу = Истина, ТранспонироватьТаблицу = Ложь) Экспорт
	
	Если ТранспонироватьТаблицу И ТаблицаРезультатов = Неопределено Тогда
		ТаблицаРезультатов = СтруктураПолей;
		СтруктураПолей = Новый Структура("Ключ,Значение", "Имя поля", "Значение");
		
	ИначеЕсли ТаблицаРезультатов = Неопределено Тогда
		ТаблицаРезультатов = Новый Массив;
		ТаблицаРезультатов.Добавить(СтруктураПолей);
	КонецЕсли;
	
	ТекстХТМЛ = "";
	Для Каждого СтрокаТЧ Из ТаблицаРезультатов Цикл
		
		ТекстХТМЛ = ТекстХТМЛ + "<TR>";
		Для Каждого КлючИЗначение Из СтруктураПолей Цикл
			ТекстХТМЛ = ТекстХТМЛ + Символы.ПС + Символы.Таб + "<TD>" + ПредставлениеСтрокиДляHTML(СтрокаТЧ[КлючИЗначение.Ключ]) + "</TD>";
		КонецЦикла;
		ТекстХТМЛ = ТекстХТМЛ + Символы.ПС + "</TR>" + Символы.ПС;
		
	КонецЦикла;
	
	Возврат ТекстХТМЛ + ?(ЗакрыватьТаблицу, "</TBODY></TABLE>" + Символы.ПС, "");
	
КонецФункции

//+++АК SHEP 2018.04.02 общая функция
Функция ТекстХТМЛ_КонецХТМЛ() Экспорт
	Возврат "</BODY></HTML>";
КонецФункции

//+++АК SHEP 2018.01.16 ИП-00017663
// Возвращает строку для html с заменёнными зарезервированными символами
//
// Параметры
//  <ИсходнаяСтрока>  – <Строка> – исходная строка
//
// Возвращаемое значение:
//   <Строка>   – преобразованная строка для html
//
Функция ПредставлениеСтрокиДляHTML(ИсходнаяСтрока) Экспорт

	СтрокаВозврата = ИсходнаяСтрока;
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "&", "&amp;");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата, """", "&quot;");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "<", "&lt;");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата, ">", "&gt;");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "'", "&apos;");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "«", "&laquo;");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "»", "&raquo;");
	
	Возврат СтрокаВозврата;
	
КонецФункции // ПредставлениеСтрокиДляHTML()

//+++АК SHEP 2018.07.20 
// Возвращает для управляемых форм полный путь к форме отчёта, внешней обработки или любого объекта метаданных в виде:
// "Отчет.<ИмяОтчёта>.Форма.ИмяФормы"
// "ВнешняяОбработка.<ИмяВнешнейОбработки>.Форма.ИмяФормы"
// "Документ.<ИмяОбъекта>.Форма.ИмяФормы"
//
// Может быть полезна при встраивании внешней обработки/отчёта в конфигурацию или переименовании объекта, т.к. не требуется изменять вызовы форм. 
//
Функция ПолучитьПолноеИмяФормы(ИмяВызвавшейФормы, ИмяФормы = "") Экспорт
	
    ПозицияТочки = СтрДлина(ИмяВызвавшейФормы);
    Пока Сред(ИмяВызвавшейФормы, ПозицияТочки, 1) <> "." Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла;
    Возврат Лев(ИмяВызвавшейФормы, ПозицияТочки - 1) + ?(ПустаяСтрока(ИмяФормы), "", "." + ИмяФормы);
	
КонецФункции
