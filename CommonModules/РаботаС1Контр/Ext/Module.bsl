Функция ПолучитьСписокНаПроверку(Колво = 100) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(СведенияОПроверкеКонтрагентовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПоследняяПроверка,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА Контрагенты.ОГРН
	|		ИНАЧЕ Контрагенты.ОГРНИП
	|	КОНЕЦ КАК ОГРН,
	|	СведенияОПроверкеКонтрагентовСрезПоследних.Пояснения,
	|	СведенияОПроверкеКонтрагентовСрезПоследних.Рекомендация,
	|	СведенияОПроверкеКонтрагентовСрезПоследних.РекомендацияСтрока
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(, ТипСведений = ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.Сведения1Cont)) КАК СведенияОПроверкеКонтрагентовСрезПоследних
	|		ПО (СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент = Контрагенты.Ссылка)
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				НастройкиОбновления1Контр.Контрагенты
	|			ИЗ
	|				РегистрСведений.НастройкиОбновления1Контр КАК НастройкиОбновления1Контр
	|			ГДЕ
	|				НастройкиОбновления1Контр.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек1конрт.Включать))
	|	И НЕ Контрагенты.Ссылка В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					НастройкиОбновления1Контр.Контрагенты
	|				ИЗ
	|					РегистрСведений.НастройкиОбновления1Контр КАК НастройкиОбновления1Контр
	|				ГДЕ
	|					НастройкиОбновления1Контр.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек1конрт.Исключать))
	|	И (Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				И Контрагенты.ОГРН > 999999999999
	|			ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|				И Контрагенты.ОГРНИП > 99999999999999)
	|	И РАЗНОСТЬДАТ(ЕСТЬNULL(СведенияОПроверкеКонтрагентовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ЧАС) > 20
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоследняяПроверка"); 
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 100", "ПЕРВЫЕ " + Формат(Колво, "ЧГ="));
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПолучитьСписокБезОГРН(Колво=100) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.ЮрФизЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				НастройкиОбновления1Контр.Контрагенты
	|			ИЗ
	|				РегистрСведений.НастройкиОбновления1Контр КАК НастройкиОбновления1Контр
	|			ГДЕ
	|				НастройкиОбновления1Контр.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек1конрт.Включать))
	|	И НЕ Контрагенты.Ссылка В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					НастройкиОбновления1Контр.Контрагенты
	|				ИЗ
	|					РегистрСведений.НастройкиОбновления1Контр КАК НастройкиОбновления1Контр
	|				ГДЕ
	|					НастройкиОбновления1Контр.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек1конрт.Исключать))
	|	И (Контрагенты.ОГРН = 0
	|				И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ИЛИ Контрагенты.ОГРНИП = 0
	|				И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо))
	|	И НЕ Контрагенты.ИНН = """"");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 100", "ПЕРВЫЕ " + Формат(Колво, "ЧГ="));
	
	Возврат Запрос.Выполнить().Выбрать(); 
	
	
КонецФункции

Функция ПолучитьСписокОтчетов(Колво = 30) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗапросыОтчетовПоКонтрагентам1конт.Контрагент,
	|	ВЫБОР
	|		КОГДА ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ОГРН
	|		ИНАЧЕ ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ОГРНИП
	|	КОНЕЦ КАК ОГРН
	|ИЗ
	|	РегистрСведений.ЗапросыОтчетовПоКонтрагентам1конт КАК ЗапросыОтчетовПоКонтрагентам1конт
	|ГДЕ
	|	ЗапросыОтчетовПоКонтрагентам1конт.Получено = ДАТАВРЕМЯ(1, 1, 1)
	|	И (ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				И ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ОГРН > 999999999999
	|			ИЛИ ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|				И ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ОГРНИП > 99999999999999)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросыОтчетовПоКонтрагентам1конт.Контрагент,
	|	ВЫБОР
	|		КОГДА ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ОГРН
	|		ИНАЧЕ ЗапросыОтчетовПоКонтрагентам1конт.Контрагент.ОГРНИП
	|	КОНЕЦ");
	Возврат Запрос.Выполнить().Выбрать();	
	
КонецФункции

Функция ПолучитьДанныеИз1СКонт(ОГРН, Токен) Экспорт
	
	ОГРНСтрокой = СокрЛП(Формат(ОГРН, "ЧГ="));
	Если НЕ СтрДлина(ОГРНСтрокой) = 13 И НЕ СтрДлина(ОГРНСтрокой) = 15 Тогда
		Возврат Новый Структура("Ошибка", "Неправильный ОГРН");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат Новый Структура("Ошибка", "Токен не заполнет");
	КонецЕсли;	
	
	//
	Если СтрДлина(ОГРНСтрокой) = 15 Тогда
		HTTPЗапрос = Новый HTTPЗапрос("/api/semaphore/ogrn/" + ОГРНСтрокой + "?__AT=" + Токен);
	Иначе
		HTTPЗапрос = Новый HTTPЗапрос("/api/v2/semaphore/" + ОГРНСтрокой + "?__AT=" + Токен);
	КонецЕсли;
	HTTPСоединение = Новый HTTPСоединение("service.1cont.ru"); 
	//
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	ЗаписатьВремяЗапроса("Семафор");
	ТекстJSON = Ответ.ПолучитьТелоКакСтроку();  
	//
	Результат = ТелеграмТехБот.ПрочитатьJSONИзСтроки(ТекстJSON);
	
	Пер = Неопределено;
	Если Результат.Свойство("message", Пер) Тогда
		Возврат Новый Структура("Ошибка", Пер);
	КонецЕсли;		
		
	title = "";
	Результат.Свойство("title", title);	
	
	color = 0;
	messages = "";	
	Если СтрДлина(ОГРНСтрокой) = 15 Тогда
		Результат.Свойство("text", messages);
	Иначе
		Результат.Свойство("color", color);		
		mess = Неопределено;
		Результат.Свойство("messages", mess);		
		Если ТипЗнч(mess) = Тип("Массив") Тогда
			Для каждого Стр Из mess Цикл
				messages = messages + ?(ЗначениеЗаполнено(messages), Символы.ПС, "") + Стр;			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(title) Тогда
		Возврат Новый Структура("Ошибка", "Ответ не получен");
	КонецЕсли;
	
	Возврат новый Структура("color, title, messages, Ошибка", color, title, messages, "");	
	
КонецФункции

Функция ПолучитьОГРНИз1СКонт(ИНН, КПП, Токен)
	
	Если НЕ СтрДлина(ИНН) = 10 И НЕ СтрДлина(ИНН) = 12 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат 0;
	КонецЕсли;	
	
	//
	HTTPЗапрос = Новый HTTPЗапрос("/api/v2/egr/getOgrn/" + ИНН + "?__AT=" + Токен);
	HTTPСоединение = Новый HTTPСоединение("service.1cont.ru"); 
	//
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	ЗаписатьВремяЗапроса("ОГРН");
	ТекстJSON = Ответ.ПолучитьТелоКакСтроку();
	
	Если ТекстJSON = "null" Тогда
		Возврат 0;
	КонецЕсли;
	
	//
	Результат = ТелеграмТехБот.ПрочитатьJSONИзСтроки(ТекстJSON);
	
	Попытка	
		Возврат Число(Результат);	
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции
	
Процедура СделатьПаузу(ЗадержкаСекунд = 1)
	
    Если ЗадержкаСекунд = 0 Тогда
        Возврат
    КонецЕсли;
	
	СтрокаЗапроса = "ping -n 1 -w "+Формат(1000 * ЗадержкаСекунд, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
	WshShell = Новый COMОбъект("WScript.Shell"); 
	WshShell.Run(СтрокаЗапроса, 0, -1); 
	
КонецПроцедуры

Функция ПолучитьВремяПоследнегоЗапроса(Команда)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Обновления1Контр.ВремяПоследнегоЗапроса
	|ИЗ
	|	РегистрСведений.Обновления1Контр КАК Обновления1Контр
	|ГДЕ
	|	Обновления1Контр.Команда = &Команда");
	Запрос.УстановитьПараметр("Команда", Команда);
	РЗ = Запрос.Выполнить().Выбрать();
	если РЗ.Следующий() тогда
		Возврат РЗ.ВремяПоследнегоЗапроса;
	Иначе
		Возврат ТекущаяДата()-1000;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЭлементСправочникаРекомендации(Ответ1СКонт)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Рекомендации.Ссылка
	|ИЗ
	|	Справочник.Рекомендации КАК Рекомендации
	|ГДЕ
	|	НЕ Рекомендации.ПометкаУдаления
	|	И Рекомендации.Наименование = &Наименование");
	Запрос.УстановитьПараметр("Наименование", Ответ1СКонт);
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда	
		Возврат РЗ.Ссылка;	
	Иначе
		// создать??
		НовыйЭлемент = Справочники.Рекомендации.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Ответ1СКонт;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;	
	КонецЕсли; 
	
КонецФункции

Процедура ЗаписатьВремяЗапроса(Команда, ВремяЗапроса = Неопределено)
	
	ВремяЗапроса = ?(ЗначениеЗаполнено(ВремяЗапроса), ВремяЗапроса, ТекущаяДата());
	
	МЗ = РегистрыСведений.Обновления1Контр.СоздатьМенеджерЗаписи();
	МЗ.Команда = Команда;
	МЗ.ВремяПоследнегоЗапроса = ВремяЗапроса;
	МЗ.Записать(Истина);
	
КонецПроцедуры

Функция ОткрытоОкно()
	
	ТекущаяДата = ТекущаяДата();
	ТекущееВремя = ТекущаяДата - НачалоДня(ТекущаяДата);
	Возврат ТекущееВремя >= 70200 И ТекущееВремя < 77400; 
	
КонецФункции

Процедура ОбновитьДанные1Конт(Колво=100) Экспорт
	
	Токен = Константы.Токен1СКонт.Получить();
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат;
	КонецЕсли;
	
	СписокНаПроверку = ПолучитьСписокНаПроверку(Колво);
	Пока СписокНаПроверку.Следующий() Цикл
		
		ПоследнееВремя = ПолучитьВремяПоследнегоЗапроса("Семафор"); 
		Пока ТекущаяДата()-	ПоследнееВремя<3 Цикл
			СделатьПаузу();
		КонецЦикла;
		
		Если ОткрытоОкно() Тогда
			ДанныеИз1СКонт = ПолучитьДанныеИз1СКонт(СписокНаПроверку.ОГРН, Токен);
		Иначе
			Возврат;
		КонецЕсли;
		
		Ошибка = Неопределено;
		ДанныеИз1СКонт.Свойство("Ошибка", Ошибка);
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокНаПроверку.РекомендацияСтрока = ДанныеИз1СКонт.title И СписокНаПроверку.Пояснения = ДанныеИз1СКонт.messages Тогда
			МЗ = РегистрыСведений.СведенияОПроверкеКонтрагентов.СоздатьМенеджерЗаписи();
			МЗ.Период = СписокНаПроверку.ПоследняяПроверка;
			МЗ.Контрагент = СписокНаПроверку.Контрагент;
			МЗ.ТипСведений = Перечисления.СведенияОПроверке.Сведения1Cont;
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				МЗ.Период = ТекущаяДата();
				МЗ.Записать(Истина);
			КонецЕсли;			
		Иначе		
			МЗ = РегистрыСведений.СведенияОПроверкеКонтрагентов.СоздатьМенеджерЗаписи();
			МЗ.Период = ТекущаяДата();
			МЗ.Контрагент = СписокНаПроверку.Контрагент;
			МЗ.ТипСведений = Перечисления.СведенияОПроверке.Сведения1Cont;
			МЗ.Рекомендация = ПолучитьЭлементСправочникаРекомендации(ДанныеИз1СКонт.title);
			МЗ.РекомендацияСтрока = ДанныеИз1СКонт.title;
			МЗ.Пояснения = ДанныеИз1СКонт.messages;
			МЗ.ОтветПолучен = Истина;
			МЗ.ДатаОтправки = ТекущаяДата();
			МЗ.Записать(Истина);
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьОГРН(Колво=100) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Токен = Константы.Токен1СКонт.Получить();
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат;
	КонецЕсли;
	
	СписокНаПроверку = ПолучитьСписокБезОГРН(Колво);
	
	Пока СписокНаПроверку.Следующий() Цикл
		
		ПоследнееВремя = ПолучитьВремяПоследнегоЗапроса("ОГРН"); 
		Пока ТекущаяДата()-	ПоследнееВремя<3 Цикл
			СделатьПаузу();
		КонецЦикла;
		
		Если ОткрытоОкно() Тогда
			ОГРН = ПолучитьОГРНИз1СКонт(СписокНаПроверку.ИНН, СписокНаПроверку.КПП, Токен);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОГРН) ТОгда
			КонтрагентОбъект = СписокНаПроверку.Контрагент.ПолучитьОбъект();
			Если СписокНаПроверку.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				КонтрагентОбъект.ОГРН = ОГРН;
			Иначе
				КонтрагентОбъект.ОГРНИП = ОГРН;
			КонецЕсли;
			КонтрагентОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьФайлОтвета(ОГРН)
	
	ОГРНСтрокой = СокрЛП(Формат(ОГРН, "ЧГ="));
	Если НЕ СтрДлина(ОГРНСтрокой) = 13 И НЕ СтрДлина(ОГРНСтрокой) = 15 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Токен = Константы.Токен1СКонт.Получить();
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	//
	HTTPЗапрос = Новый HTTPЗапрос("/api/v2/reports/" + ОГРНСтрокой + "/detailed/pdf/?__AT=" + Токен);
	HTTPСоединение = Новый HTTPСоединение("service.1cont.ru"); 
	//
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	ИмяФайла = КаталогСохранения + Строка(Новый УникальныйИдентификатор) + ".pdf";
	Ответ = HTTPСоединение.Получить(HTTPЗапрос, ИмяФайла);
	Если Ответ.КодСостояния = 200 Тогда
		Возврат ИмяФайла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура СохранитьФайлОтчета(Контрагент, ФайлОтвета)
	
	ФайлОтчета = Новый Файл(ФайлОтвета);
	Если ФайлОтчета.Существует() Тогда	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект
		|	И ХранилищеДополнительнойИнформации.Наименование = ""Очет 1конт""
		|	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления");
		Запрос.УстановитьПараметр("Объект", Контрагент);
		РЗ = Запрос.Выполнить().Выбрать();
		Если РЗ.Следующий() Тогда
			НовыйФайл = РЗ.Ссылка.ПолучитьОбъект();
		Иначе
			НовыйФайл = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			НовыйФайл.Наименование = "Очет 1конт";
		КонецЕсли;
		Попытка
			ВнешнийФайл = Новый ДвоичныеДанные(ФайлОтвета);
			НовыйФайл.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			НовыйФайл.Объект = Контрагент;
			НовыйФайл.ИмяФайла = ФайлОтчета.Имя;	
			НовыйФайл.Хранилище = Новый ХранилищеЗначения(ВнешнийФайл);
			НовыйФайл.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура Отчеты1конт() Экспорт

	Токен = Константы.Токен1СКонт.Получить();
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтчетов = ПолучитьСписокОтчетов();
	Пока СписокОтчетов.Следующий() Цикл
		
		ПоследнееВремя = ПолучитьВремяПоследнегоЗапроса("Отчет"); 
		Пока ТекущаяДата()-	ПоследнееВремя<3 Цикл
			СделатьПаузу();
		КонецЦикла;
		
		Если НЕ ОткрытоОкно() Тогда
			Возврат;
		КонецЕсли;		
		
		ФайлОтвета  = ПолучитьФайлОтвета(СписокОтчетов.ОГРН);
		Если ЗначениеЗаполнено(ФайлОтвета) Тогда
			СохранитьФайлОтчета(СписокОтчетов.Контрагент, ФайлОтвета);
			НАбор = РегистрыСведений.ЗапросыОтчетовПоКонтрагентам1конт.СоздатьНаборЗаписей();
			Набор.Отбор.Контрагент.Установить(СписокОтчетов.Контрагент);
			Набор.Прочитать();
			Для каждого Запись Из Набор Цикл
				Запись.Получено = ТекущаяДата();
			КонецЦикла; 
			набор.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
