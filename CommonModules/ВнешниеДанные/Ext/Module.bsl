
Функция ПолучитьСтрокуСоединенияSQL(Driver = "{SQL Server Native Client 10.0}", Server = "srv-sql01", Database = "", UID = "", Pwd = "", ДопДанные = "") Экспорт
		
	Если UID = "" И Pwd = "" Тогда
		UID = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ЛогинSQL");
		Pwd = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПарольSQL");
	КонецЕсли;
	
	СтрСоединения = "Driver=" + Driver + ";Server=" + Server + ";" + ?(ЗначениеЗаполнено(Database), "Database=" + Database + ";", "") + "Uid=" + UID + ";Pwd=" + Pwd + ";" + ДопДанные;
	
	Возврат СтрСоединения;

КонецФункции

Функция ПолучитьДвиженияТоваровПолная(ДатаНачала, ДатаКонца, ТорговаяТочка = Неопределено, Номенклатура = Неопределено, РазбиватьПоДатам = Истина) Экспорт
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("TTUID"	, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("TovarUID"	, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	Если РазбиватьПоДатам Тогда
		ТабДанные.Колонки.Добавить("День"			, Новый ОписаниеТипов("Дата"));
	КонецЕсли;	
	ТабДанные.Колонки.Добавить("Поступило"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПоступилоБезВозврата"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Дегустация"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Списание"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СписаниеПоКачеству"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Бой"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Акция"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Разница"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВозвратПокупателя"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Продано"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПродажиККМ"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("РазницаДляРасчета"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПолученоСДругихТТ"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ОтправленоНаДругиеТТ", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Комплектация"		, Новый ОписаниеТипов("Число"));
	
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТекстОтборТТ = "999999999";
		Если ТипЗнч(ТорговаяТочка) = Тип("Массив") Тогда
			МассивТТ = ТорговаяТочка;
		Иначе
			МассивТТ = Новый Массив;
			Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
				МассивТТ.Добавить(ТорговаяТочка);
			КонецЕсли;
		КонецЕсли;
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктурныеЕдиницы.Ссылка,
		               |	СтруктурныеЕдиницы.id_TT,
		               |	СтруктурныеЕдиницы.НомерТочки
		               |ИЗ
		               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		               |ГДЕ
		               |	СтруктурныеЕдиницы.Ссылка В(&Точки)";
					   
		Запрос.УстановитьПараметр("Точки", МассивТТ);
		КешТТ = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаКеш Из КешТТ Цикл
			ТекстОтборТТ = ТекстОтборТТ + ", " + ФорматПоля(СтрокаКеш.id_TT);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТекстОтборНоменклатура = "999999999";
		Если ТипЗнч(Номенклатура) = Тип("Массив") Тогда
			МассивНоменклатуры = Номенклатура;
		Иначе
			МассивНоменклатуры = Новый Массив;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				МассивНоменклатуры.Добавить(Номенклатура);
			КонецЕсли;
		КонецЕсли;
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	Номенклатура.Ссылка,
		               |	Номенклатура.id_tov
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Ссылка В(&Товары)";
					   
		Запрос.УстановитьПараметр("Товары", МассивНоменклатуры);
		КешНоменклатура = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаКеш Из КешНоменклатура Цикл
			ТекстОтборНоменклатура = ТекстОтборНоменклатура + ", " + ФорматПоля(СтрокаКеш.id_tov);
		КонецЦикла;	
	КонецЕсли;
	
	ADOСоединение = ПолучитьADOСоединение();
	
	//+++АК MIND 2018.01.16 включаем обеды в столбец Расход (продажа)
	
	ТекстЗапроса = "create table #ls (" + ?(РазбиватьПоДатам, "Period datetime,", "") + " id_tt int, id_tov int, post numeric(15, 3), digust numeric(15, 3)
					|	, spisanie numeric(15, 3), spisanie_kach numeric(15, 3), boi numeric(15, 3)
					|	, akcia numeric(15, 3), razniza numeric(15, 3), raznizaRaschet numeric(15, 3)
					|	, summa numeric(15, 3), rashod numeric(15, 3), rashodKKM numeric(15, 3)
					|	, vozvrat_pok numeric(15, 3), polucheno numeric(15, 3), peremesheno numeric(15, 3), complect numeric(15, 3)) 
                    |
					|Insert into #ls
					|exec ('SELECT " + ?(РазбиватьПоДатам, "Cast([date_tt] as datetime) as Period,", "") + "
					|	DTT.id_tt
					|	,DTT.id_tov
					|	,SUM([post]) post
					|	,SUM([digust]) digust
					|	,SUM([spisanie] + [spisanie_dost]) spisanie
					|	,SUM([spisanie_kach]) spisanie_kach
					|	,SUM([boi]) boi
					|	,SUM([akcia]) akcia
					|	,SUM([razniza]) razniza
					|	,SUM([razniza]) raznizaRaschet
					|	,SUM([summa]) summa
					//+++АК KIRN 2018.06.27 ИП-00017678.01 обеды уже включены в количество c 25/06
					|"+ ?(РазбиватьПоДатам,"
					|	,SUM([quantity] + case when date_tt < '" + ФорматПоля(Дата(2018,6,25,0,0,0), Истина) + "' then ISNULL([obed], 0) else 0 end) rashod","
					|	,SUM([quantity] + case when '"+ФорматПоля(ДатаНачала, Истина)+"' < '" + ФорматПоля(Дата(2018,6,25,0,0,0), Истина) + "' then ISNULL([obed], 0) else 0 end) rashod")+"
					//---АК KIRN 
					| 	,SUM([quantity]) rashodKKM
					|	,SUM([vozvrat_pok]) vozvrat_pok
					|	,SUM([peremPlus]) polucheno
					|	,SUM([peremMinus]) peremesheno
					|	,SUM([complect]) complect
					|FROM [vv03].[dbo].[DTT] DTT (nolock) 
                    |
					|where date_tt >= '" + ФорматПоля(ДатаНачала, Истина) + "' and date_tt <= '" + ФорматПоля(ДатаКонца, Истина) + "'
					|";
		Если ТипЗнч(МассивТТ) = Тип("Массив") Тогда
			Если МассивТТ.Количество() > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "
							|	and DTT.id_tt IN (" + ТекстОтборТТ + ")";		  
			КонецЕсли;
		КонецЕсли;				
		
		Если ТипЗнч(МассивНоменклатуры) = Тип("Массив") Тогда
			Если МассивНоменклатуры.Количество() > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "
							|	and DTT.id_tov IN (" + ТекстОтборНоменклатура + ")";		  
			КонецЕсли;
		КонецЕсли;			
					
		ТекстЗапроса = ТекстЗапроса + "			
					|GROUP BY 
					|	DTT.id_tt, DTT.id_tov " + ?(РазбиватьПоДатам, ", Cast([date_tt] as datetime)", "") + "') at [SRV-SQL03]
					|	
					|CREATE INDEX index_idtt
					|ON #ls(id_tt)
					|
					|CREATE INDEX index_id_tov
					|ON #ls(id_tov)
					|
					|SELECT " + ?(РазбиватьПоДатам, "Cast(DTT.Period as datetime) as Period,", "") + "
					|	UINTT._Fld4946 as TTUID
					|	,UINTov._Fld4946 as TovarUID
					|	,[post] post
					|	,[digust] digust
					|	,[spisanie] spisanie
					|	,[spisanie_kach] spisanie_kach
					|	,[boi] boi
					|	,[akcia] akcia
					|	,[razniza] razniza
					|	,[razniza] raznizaRaschet
					|	,[summa] summa
					|	,[rashod] rashod
					| ,[rashodKKM] rashodKKM
					|	,[vozvrat_pok] vozvrat_pok
					|	,[polucheno] polucheno
					|	,[peremesheno] peremesheno
					|	,[complect] complect
					|FROM #ls DTT (nolock) 
					|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON DTT.id_tt = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
					|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON DTT.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
					|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 TovSpr (nolock) ON DTT.id_tov = TovSpr._Fld760
					|WHERE TovSpr._Fld3860 = 0
                    |
					|";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			Если Rs.Fields("TovarUID").Value <> NULL Тогда
				СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			КонецЕсли;
			Если Rs.Fields("TTUID").Value <> NULL Тогда
				СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
			КонецЕсли;
			Если РазбиватьПоДатам Тогда
				СтрокаДоб.День = Rs.Fields("Period").Value;
			КонецЕсли;
			СтрокаДоб.Поступило = Rs.Fields("post").Value;
			СтрокаДоб.ПоступилоБезВозврата = СтрокаДоб.Поступило;
			СтрокаДоб.Продано = Rs.Fields("rashod").Value;   
			СтрокаДоб.Дегустация = Rs.Fields("digust").Value;
			СтрокаДоб.Списание = Rs.Fields("spisanie").Value;
			СтрокаДоб.СписаниеПоКачеству = Rs.Fields("spisanie_kach").Value;
			СтрокаДоб.Бой = Rs.Fields("boi").Value;
			СтрокаДоб.Акция = Rs.Fields("akcia").Value;
			СтрокаДоб.Разница = Rs.Fields("razniza").Value;
			СтрокаДоб.ПродажиККМ = Rs.Fields("rashodKKM").Value;
			СтрокаДоб.РазницаДляРасчета = Rs.Fields("raznizaRaschet").Value;
			СтрокаДоб.ВозвратПокупателя = Rs.Fields("vozvrat_pok").Value;
			СтрокаДоб.Сумма = Rs.Fields("Summa").Value;
			СтрокаДоб.ПолученоСДругихТТ = Rs.Fields("polucheno").Value;
			СтрокаДоб.ОтправленоНаДругиеТТ = Rs.Fields("peremesheno").Value;
			СтрокаДоб.Комплектация = Rs.Fields("complect").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Возврат ТабДанные;
	
КонецФункции	

Функция ПолучитьТаблицуПеремещенийМеждуТТПолная(ДатаНачала, ДатаКонца, ТорговаяТочка = Неопределено, Номенклатура = Неопределено
					, РазбиватьПоДатам = Истина) Экспорт
					
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.НомерТочки,
	               |	СтруктурныеЕдиницы.id_TT
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НомерТочки > 0";
				   
	ТабТочки = Запрос.Выполнить().Выгрузить();
	ТабТочки.Индексы.Добавить("НомерТочки");
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("ТТКорреспондент", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	Если РазбиватьПоДатам Тогда
		ТабДанные.Колонки.Добавить("День"			, Новый ОписаниеТипов("Дата"));
	КонецЕсли;	
	ТабДанные.Колонки.Добавить("ПолученоСДругихТТ"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ОтправленоНаДругиеТТ"		, Новый ОписаниеТипов("Число"));
	
	Если Константы.ВключеноЧтениеПеремещенийМеждуТТ.Получить() = Ложь Тогда
		Возврат ТабДанные;
	КонецЕсли;	
	
	ТекстОтборТТ = "";
	ТекстОтборНомерМагазина = "";
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТекстОтборТТ = "999999999";
		ТекстОтборНомерМагазина = "999999999";
		Если ТипЗнч(ТорговаяТочка) = Тип("Массив") Тогда
			МассивТТ = ТорговаяТочка;
		Иначе
			МассивТТ = Новый Массив;
			Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
				МассивТТ.Добавить(ТорговаяТочка);
			КонецЕсли;
		КонецЕсли;
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктурныеЕдиницы.Ссылка,
		               |	СтруктурныеЕдиницы.id_TT,
		               |	СтруктурныеЕдиницы.НомерТочки
		               |ИЗ
		               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		               |ГДЕ
		               |	СтруктурныеЕдиницы.Ссылка В(&Точки)";
					   
		Запрос.УстановитьПараметр("Точки", МассивТТ);
		КешТТ = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаКеш Из КешТТ Цикл
			ТекстОтборТТ = ТекстОтборТТ + ", " + ФорматПоля(СтрокаКеш.id_TT);
			ТекстОтборНомерМагазина = ТекстОтборНомерМагазина + ", " + ФорматПоля(СтрокаКеш.НомерТочки);
		КонецЦикла;
	КонецЕсли;
	
	ТекстОтборНоменклатура = "";
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТекстОтборНоменклатура = "999999999";
		Если ТипЗнч(Номенклатура) = Тип("Массив") Тогда
			МассивНоменклатуры = Номенклатура;
		Иначе
			МассивНоменклатуры = Новый Массив;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				МассивНоменклатуры.Добавить(Номенклатура);
			КонецЕсли;
		КонецЕсли;
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	Номенклатура.Ссылка,
		               |	Номенклатура.id_tov
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Ссылка В(&Товары)";
					   
		Запрос.УстановитьПараметр("Товары", МассивНоменклатуры);
		КешНоменклатура = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаКеш Из КешНоменклатура Цикл
			ТекстОтборНоменклатура = ТекстОтборНоменклатура + ", " + ФорматПоля(СтрокаКеш.id_tov);
		КонецЦикла;	
	КонецЕсли;
	
	ADOСоединение = ПолучитьADOСоединение();
	
	ДатаУсеченияБазы = '00010101';
	СтрЗапрос = "SELECT CAST([SMS_REPL].[dbo].[date_arc] () as datetime) as date";
	rs = ADOСоединение.Execute(СтрЗапрос);
	Попытка
		rs.MoveFirst();
		Если НЕ rs.EOF() Тогда
			ДатаУсеченияБазы = Rs.Fields("date").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СтрЗапрос = "SELECT " + ?(РазбиватьПоДатам, "CAST(Chl.date_ch as datetime) as Period,", "") + " 
				|		 ShopNo.ShopNo as ShopNo
				|		, UINTov._Fld4946 AS TovarUID
				|		, UINTT._Fld4946 AS TTUID
				|		, SUM(CASE WHEN Chl.OperationType_cl = 410 THEN Chl.Quantity ELSE 0 END) as Polucheno
				|		, SUM(CASE WHEN Chl.OperationType_cl = 411 THEN Chl.Quantity ELSE 0 END) as Peredano
				|FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
				|INNER JOIN (SELECT DISTINCT chl.CheckUID
				|	  , CASE WHEN chl.Quantity <= 1 THEN chl.Quantity * 1000 ELSE chl.Quantity END as ShopNo
				|  FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
				|  WHERE
				|	Chl.date_ch >= " + ФорматПоля(ДатаНачала, Истина) + " and Chl.date_ch <= " + ФорматПоля(ДатаКонца, Истина) + "
				|  and abs(Chl.OperationType_cl) in (410, 411) and Chl.id_tov_cl = 1562
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборТТ), "", "and Chl.ID_TT_cl IN (" + ТекстОтборТТ + ")") + "
				|) as ShopNo
				|  ON Chl.CheckUID = ShopNo.CheckUID
				|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON Chl.id_tt_cl = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
			  	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON Chl.id_tov_cl = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
				|  
				|WHERE Chl.date_ch >= " + ФорматПоля(ДатаНачала, Истина) + " and Chl.date_ch <= " + ФорматПоля(ДатаКонца, Истина) + "
				|  and Chl.OperationType_cl in (410, 411) and Chl.id_tov_cl <> 1562
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборНоменклатура), "", "and Chl.id_tov_cl IN (" + ТекстОтборНоменклатура + ")") + "
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборТТ), "", "and Chl.ID_TT_cl IN (" + ТекстОтборТТ + ")") + "
				|  
				|  GROUP BY " + ?(РазбиватьПоДатам, "CAST(Chl.date_ch as datetime),", "") + " ShopNo.ShopNo, UINTov._Fld4946, UINTT._Fld4946";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			Если Rs.Fields("TovarUID").Value <> NULL Тогда
				СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			КонецЕсли;
			Если Rs.Fields("TTUID").Value <> NULL Тогда
				СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
			КонецЕсли;
			СтрокаТочка = ТабТочки.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
			Если СтрокаТочка <> Неопределено Тогда
				СтрокаДоб.ТТКорреспондент = СтрокаТочка.Ссылка;
			КонецЕсли;	
			Если РазбиватьПоДатам Тогда
				СтрокаДоб.День = Rs.Fields("Period").Value;
			КонецЕсли;
			СтрокаДоб.ПолученоСДругихТТ = Rs.Fields("Polucheno").Value;
			СтрокаДоб.ОтправленоНаДругиеТТ = Rs.Fields("Peredano").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если ДатаУсеченияБазы >= ДатаНачала Тогда
		СтрЗапрос = "SELECT " + ?(РазбиватьПоДатам, "CAST(Chl.date_ch as datetime) as Period,", "") + " 
				|		 ShopNo.ShopNo as ShopNo
				|		, UINTov._Fld4946 AS TovarUID
				|		, UINTT._Fld4946 AS TTUID
				|		, SUM(CASE WHEN Chl.OperationType_cl = 410 THEN Chl.Quantity ELSE 0 END) as Polucheno
				|		, SUM(CASE WHEN Chl.OperationType_cl = 411 THEN Chl.Quantity ELSE 0 END) as Peredano
				|FROM [SMS_IZBENKA_ARC].[dbo].[CheckLine] as Chl (nolock)
				|INNER JOIN (SELECT DISTINCT chl.CheckUID
				|	  , CASE WHEN chl.Quantity <= 1 THEN chl.Quantity * 1000 ELSE chl.Quantity END as ShopNo
				|  FROM [SMS_IZBENKA_ARC].[dbo].[CheckLine] as Chl (nolock)
				|  WHERE
				|	Chl.date_ch >= " + ФорматПоля(ДатаНачала, Истина) + " and Chl.date_ch <= " + ФорматПоля(ДатаКонца, Истина) + "
				|  and abs(Chl.OperationType_cl) in (410, 411) and Chl.id_tov_cl = 1562
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборТТ), "", "and Chl.ID_TT_cl IN (" + ТекстОтборТТ + ")") + "
				|) as ShopNo
				|  ON Chl.CheckUID = ShopNo.CheckUID
				|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTT (nolock) ON Chl.id_tt_cl = UINTT._Fld4953 and UINTT._Fld4944_TYPE = 0x08 and UINTT._Fld4944_RTRef = 0x0000002A and UINTT._Fld4947 = 1
			  	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON Chl.id_tov_cl = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
				|  
				|WHERE Chl.date_ch >= " + ФорматПоля(ДатаНачала, Истина) + " and Chl.date_ch <= " + ФорматПоля(ДатаКонца, Истина) + "
				|  and Chl.OperationType_cl in (410, 411) and Chl.id_tov_cl <> 1562
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборНоменклатура), "", "and Chl.id_tov_cl IN (" + ТекстОтборНоменклатура + ")") + "
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборТТ), "", "and Chl.ID_TT_cl IN (" + ТекстОтборТТ + ")") + "
				|  
				|  GROUP BY " + ?(РазбиватьПоДатам, "CAST(Chl.date_ch as datetime),", "") + " ShopNo.ShopNo, UINTov._Fld4946, UINTT._Fld4946";
				   
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабДанные.Добавить();
				Если Rs.Fields("TovarUID").Value <> NULL Тогда
					СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
				КонецЕсли;
				Если Rs.Fields("TTUID").Value <> NULL Тогда
					СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
				КонецЕсли;
				СтрокаТочка = ТабТочки.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
				Если СтрокаТочка <> Неопределено Тогда
					СтрокаДоб.ТТКорреспондент = СтрокаТочка.Ссылка;
				КонецЕсли;	
				Если РазбиватьПоДатам Тогда
					СтрокаДоб.День = Rs.Fields("Period").Value;
				КонецЕсли;
				СтрокаДоб.ПолученоСДругихТТ = Rs.Fields("Polucheno").Value;
				СтрокаДоб.ОтправленоНаДругиеТТ = Rs.Fields("Peredano").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	СтрЗапрос = "SELECT " + ?(РазбиватьПоДатам, "CAST(CONVERT(date, TD.closedate) as datetime) as Period,", "") + " 
				|		 TD.Corr_id_tt as ShopNo
				|		, UINTov._Fld4946 AS TovarUID
				|		, CAST(TTBin2UID.UID as nvarchar(50)) AS TTUID
				|		, SUM(CASE WHEN TD.Operation_type = 410 THEN TD.Quantity ELSE 0 END) as Polucheno
				|		, SUM(CASE WHEN TD.Operation_type = 411 THEN TD.Quantity ELSE 0 END) as Peredano
				|FROM [SMS_REPL].[dbo].[TD_move] as TD (nolock)
				
				|LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID AS TTBin2UID (nolock) ON TD.ShopNo_rep = TTBin2UID.ShopNo
			  	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON TD.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
				|  
				|WHERE " + ?(НЕ ЗначениеЗаполнено(ТекстОтборНомерМагазина), "1=1", "TD.ShopNo_rep IN (" + ТекстОтборНомерМагазина + ")") + "
				|	and TD.closedate >= " + ФорматПоля(НачалоДня(ДатаНачала)) + " and TD.closedate <= " + ФорматПоля(КонецДня(ДатаКонца)) + "
				|  and TD.Operation_type in (410, 411) and TD.Confirm_type = 1
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборНоменклатура), "", "and TD.id_tov IN (" + ТекстОтборНоменклатура + ")") + "
				|  
				|  GROUP BY " + ?(РазбиватьПоДатам, "CAST(CONVERT(date, TD.closedate) as datetime),", "") + " TD.Corr_id_tt, UINTov._Fld4946, CAST(TTBin2UID.UID as nvarchar(50))";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			Если Rs.Fields("TovarUID").Value <> NULL Тогда
				СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			КонецЕсли;
			Если Rs.Fields("TTUID").Value <> NULL Тогда
				СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
			КонецЕсли;
			Если Rs.Fields("ShopNo").Value = 10 Тогда
				СтрокаДоб.ТТКорреспондент = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("abbf68f4-e839-11e0-b470-001517297ae2"));
			ИначеЕсли Rs.Fields("ShopNo").Value = 11 Тогда	
				СтрокаДоб.ТТКорреспондент = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("abbf6903-e839-11e0-b470-001517297ae2"));
			Иначе	
				СтрокаТочка = ТабТочки.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
				Если СтрокаТочка <> Неопределено Тогда
					СтрокаДоб.ТТКорреспондент = СтрокаТочка.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			Если РазбиватьПоДатам Тогда
				СтрокаДоб.День = Rs.Fields("Period").Value;
			КонецЕсли;
			СтрокаДоб.ПолученоСДругихТТ = Rs.Fields("Polucheno").Value;
			СтрокаДоб.ОтправленоНаДругиеТТ = Rs.Fields("Peredano").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если ДатаУсеченияБазы >= ДатаНачала Тогда
		СтрЗапрос = "SELECT " + ?(РазбиватьПоДатам, "CAST(CONVERT(date, TD.closedate) as datetime) as Period,", "") + " 
				|		 TD.Corr_id_tt as ShopNo
				|		, UINTov._Fld4946 AS TovarUID
				|		, CAST(TTBin2UID.UID as nvarchar(50)) AS TTUID
				|		, SUM(CASE WHEN TD.Operation_type = 410 THEN TD.Quantity ELSE 0 END) as Polucheno
				|		, SUM(CASE WHEN TD.Operation_type = 411 THEN TD.Quantity ELSE 0 END) as Peredano
				|FROM [SMS_IZBENKA_ARC].[dbo].[smsreplTD_move] as TD (nolock)
				
				|LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID AS TTBin2UID (nolock) ON TD.ShopNo_rep = TTBin2UID.ShopNo
			  	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON TD.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
				|  
				|WHERE " + ?(НЕ ЗначениеЗаполнено(ТекстОтборНомерМагазина), "1=1", "TD.ShopNo_rep IN (" + ТекстОтборНомерМагазина + ")") + "
				|	and TD.closedate >= " + ФорматПоля(НачалоДня(ДатаНачала)) + " and TD.closedate <= " + ФорматПоля(КонецДня(ДатаКонца)) + "
				|  and TD.Operation_type in (410, 411) and TD.Confirm_type = 1
				|	" + ?(НЕ ЗначениеЗаполнено(ТекстОтборНоменклатура), "", "and TD.id_tov IN (" + ТекстОтборНоменклатура + ")") + "
				|  
				|  GROUP BY " + ?(РазбиватьПоДатам, "CAST(CONVERT(date, TD.closedate) as datetime),", "") + " TD.Corr_id_tt, UINTov._Fld4946, CAST(TTBin2UID.UID as nvarchar(50))";
				   
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабДанные.Добавить();
				Если Rs.Fields("TovarUID").Value <> NULL Тогда
					СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
				КонецЕсли;
				Если Rs.Fields("TTUID").Value <> NULL Тогда
					СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
				КонецЕсли;
				Если Rs.Fields("ShopNo").Value = 10 Тогда
					СтрокаДоб.ТТКорреспондент = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("abbf68f4-e839-11e0-b470-001517297ae2"));
				ИначеЕсли Rs.Fields("ShopNo").Value = 11 Тогда	
					СтрокаДоб.ТТКорреспондент = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("abbf6903-e839-11e0-b470-001517297ae2"));
				Иначе	
					СтрокаТочка = ТабТочки.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
					Если СтрокаТочка <> Неопределено Тогда
						СтрокаДоб.ТТКорреспондент = СтрокаТочка.Ссылка;
					КонецЕсли;	
				КонецЕсли;
				Если РазбиватьПоДатам Тогда
					СтрокаДоб.День = Rs.Fields("Period").Value;
				КонецЕсли;
				СтрокаДоб.ПолученоСДругихТТ = Rs.Fields("Polucheno").Value;
				СтрокаДоб.ОтправленоНаДругиеТТ = Rs.Fields("Peredano").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Если РазбиватьПоДатам Тогда
		ТабДанные.Свернуть("Номенклатура, ТТ, ТТКорреспондент, День", "ПолученоСДругихТТ, ОтправленоНаДругиеТТ");
	Иначе
		ТабДанные.Свернуть("Номенклатура, ТТ, ТТКорреспондент", "ПолученоСДругихТТ, ОтправленоНаДругиеТТ");
	КонецЕсли;	
	
	Возврат ТабДанные;
	
КонецФункции	



//Функция ПолучитьТаблицуОстатков(ДатаНачальныхОстатков, ДатаКонечныхОстатков, ТорговаяТочка) Экспорт
//	
//	СтрСоединенияЛистыУчета = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
//	
//	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
//	пСоед.СтрокаСоединения = СтрСоединенияЛистыУчета;
//	ВнешниеИсточникиДанных.SMS_Union.УстановитьОбщиеПараметрыСоединения(пСоед);
//	ВнешниеИсточникиДанных.SMS_Union.УстановитьСоединение();
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	dbo_AccArticle.ID_TT,
//				   |	dbo_AccArticle.ID_tov,
//				   |	dbo_AccArticle.Amount
//				   |ИЗ
//				   |	ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_AccArticle КАК dbo_AccArticle
//				   |ГДЕ
//				   |	dbo_AccArticle.Period В
//				   |			(ВЫБРАТЬ
//				   |				МАКСИМУМ(dbo_AccArticle.Period) КАК Дата
//				   |			ИЗ
//				   |				ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_AccArticle КАК dbo_AccArticle
//				   |			ГДЕ
//				   |				(dbo_AccArticle.ID_TT = &ID_TT
//				   |					ИЛИ &ID_TT = 0)
//				   |				И dbo_AccArticle.Period >= НАЧАЛОПЕРИОДА(&ДатаНачДиапозон, ДЕНЬ)
//				   |				И dbo_AccArticle.Period <= КОНЕЦПЕРИОДА(&ДатаНач, ДЕНЬ))
//				   |	И (dbo_AccArticle.ID_TT = &ID_TT
//				   |			ИЛИ &ID_TT = 0)
//				   |;
//				   |
//				   |////////////////////////////////////////////////////////////////////////////////
//				   |ВЫБРАТЬ
//				   |	dbo_AccArticle.ID_TT,
//				   |	dbo_AccArticle.ID_tov,
//				   |	dbo_AccArticle.Amount
//				   |ИЗ
//				   |	ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_AccArticle КАК dbo_AccArticle
//				   |ГДЕ
//				   |	dbo_AccArticle.Period В
//				   |			(ВЫБРАТЬ
//				   |				МАКСИМУМ(dbo_AccArticle.Period) КАК Дата
//				   |			ИЗ
//				   |				ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_AccArticle КАК dbo_AccArticle
//				   |			ГДЕ
//				   |				(dbo_AccArticle.ID_TT = &ID_TT
//				   |					ИЛИ &ID_TT = 0)
//				   |				И dbo_AccArticle.Period >= НАЧАЛОПЕРИОДА(&ДатаКонДиапозон, ДЕНЬ)
//				   |				И dbo_AccArticle.Period <= КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ))
//				   |	И (dbo_AccArticle.ID_TT = &ID_TT
//				   |			ИЛИ &ID_TT = 0)";
//				   
//	Запрос.УстановитьПараметр("ДатаНач", ДатаНачальныхОстатков - 86400);
//	Запрос.УстановитьПараметр("ДатаНачДиапозон", ДатаНачальныхОстатков - 86400 * 3);
//	Запрос.УстановитьПараметр("ДатаКон", ДатаКонечныхОстатков);
//	Запрос.УстановитьПараметр("ДатаКонДиапозон", ДатаКонечныхОстатков - 86400 * 3);
//	Запрос.УстановитьПараметр("id_tt", ?(ЗначениеЗаполнено(ТорговаяТочка), ТорговаяТочка.id_tt, 0));
//	
//	Результаты = Запрос.ВыполнитьПакет();
//	
//	ТабНачОстатки = Результаты[0].Выгрузить();
//	ТабКонОстатки = Результаты[1].Выгрузить();
//	
//	ВнешниеИсточникиДанных.SMS_Union.РазорватьСоединение();
//	
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	Таб.ID_TT,
//				   |	Таб.ID_tov,
//				   |	Таб.Amount
//				   |ПОМЕСТИТЬ ВТ_ОстаткиНаНачало
//				   |ИЗ
//				   |	&ТабНач КАК Таб
//				   |;
//				   |
//				   |////////////////////////////////////////////////////////////////////////////////
//				   |ВЫБРАТЬ
//				   |	Таб.ID_TT,
//				   |	Таб.ID_tov,
//				   |	Таб.Amount
//				   |ПОМЕСТИТЬ ВТ_ОстаткиНаКонец
//				   |ИЗ
//				   |	&ТабКон КАК Таб
//				   |;
//				   |
//				   |////////////////////////////////////////////////////////////////////////////////
//				   |ВЫБРАТЬ
//				   |	ВЗ_ТТ.Ссылка КАК ТорговаяТочка,
//				   |	ВЗ_Номенклатура.Ссылка КАК Номенклатура,
//				   |	ВЗ_Остатки.НачОстаток,
//				   |	ВЗ_Остатки.КонОстаток
//				   |ИЗ
//				   |	(ВЫБРАТЬ
//				   |		ЕСТЬNULL(ВТ_ОстаткиНаНачало.ID_TT, ВТ_ОстаткиНаКонец.ID_TT) КАК ID_TT,
//				   |		ЕСТЬNULL(ВТ_ОстаткиНаНачало.ID_tov, ВТ_ОстаткиНаКонец.ID_tov) КАК ID_tov,
//				   |		ЕСТЬNULL(ВТ_ОстаткиНаНачало.Amount, 0) КАК НачОстаток,
//				   |		ЕСТЬNULL(ВТ_ОстаткиНаКонец.Amount, 0) КАК КонОстаток
//				   |	ИЗ
//				   |		ВТ_ОстаткиНаНачало КАК ВТ_ОстаткиНаНачало
//				   |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаКонец КАК ВТ_ОстаткиНаКонец
//				   |			ПО ВТ_ОстаткиНаНачало.ID_TT = ВТ_ОстаткиНаКонец.ID_TT
//				   |				И ВТ_ОстаткиНаНачало.ID_tov = ВТ_ОстаткиНаКонец.ID_tov) КАК ВЗ_Остатки
//				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//				   |			МАКСИМУМ(СтруктурныеЕдиницы.Ссылка) КАК Ссылка,
//				   |			СтруктурныеЕдиницы.id_TT КАК id_TT
//				   |		ИЗ
//				   |			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
//				   |		ГДЕ
//				   |			СтруктурныеЕдиницы.id_TT <> 0
//				   |		
//				   |		СГРУППИРОВАТЬ ПО
//				   |			СтруктурныеЕдиницы.id_TT) КАК ВЗ_ТТ
//				   |		ПО ВЗ_Остатки.ID_TT = ВЗ_ТТ.id_TT
//				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//				   |			МАКСИМУМ(Номенклатура.Ссылка) КАК Ссылка,
//				   |			Номенклатура.id_tov КАК id_tov
//				   |		ИЗ
//				   |			Справочник.Номенклатура КАК Номенклатура
//				   |		ГДЕ
//				   |			Номенклатура.id_tov <> 0
//				   |			И Номенклатура.ЭтоГруппа = ЛОЖЬ
//				   |		
//				   |		СГРУППИРОВАТЬ ПО
//				   |			Номенклатура.id_tov) КАК ВЗ_Номенклатура
//				   |		ПО ВЗ_Остатки.ID_tov = ВЗ_Номенклатура.id_tov";
//				   
//	Запрос.УстановитьПараметр("ТабНач", ТабНачОстатки);
//	Запрос.УстановитьПараметр("ТабКон", ТабКонОстатки);
//	
//	Возврат Запрос.Выполнить().Выгрузить();
//	
//КонецФункции	

Функция ПолучитьОстатокПослеИнвентаризацииВкусвилл(ДатаОстатков, ТорговаяТочка) Экспорт
	
	СтрСоединенияЛистыУчета = ОбменСAccess.ПолучитьСтрокуСоединения("vv");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения = СтрСоединенияЛистыУчета;
	ВнешниеИсточникиДанных.VV.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.VV.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	dbo_List_ucheta_ostatki.Дата,
	               |	dbo_List_ucheta_ostatki.id_tov,
	               |	dbo_List_ucheta_ostatki.id_tt,
	               |	ЕСТЬNULL(dbo_List_ucheta_ostatki.Колво, 0) КАК Остаток
	               |ИЗ
	               |	ВнешнийИсточникДанных.VV.Таблица.dbo_List_ucheta_ostatki КАК dbo_List_ucheta_ostatki
	               |ГДЕ
	               |	dbo_List_ucheta_ostatki.Дата >= &ДатаНач
	               |	И dbo_List_ucheta_ostatki.Дата <= &ДатаКон
	               |	И (dbo_List_ucheta_ostatki.id_tt = &id_tt
	               |			ИЛИ &id_tt = 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокПоУчету
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаНачОстатки, Склад = &Склад) КАК ТоварыНаСкладахОстатки";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаНачОстатки", Новый Граница(НачалоДня(ДатаОстатков) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("id_tt", ТорговаяТочка.id_tt);
	Запрос.УстановитьПараметр("Склад", ТорговаяТочка.СкладТорговогоЗала);
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабОстатки = Результаты[0].Выгрузить();
	ТабТовары = Результаты[1].Выгрузить();
	ТабТовары.Индексы.Добавить("id_tov");
	ТабОстаткиПоУчету = Результаты[2].Выгрузить();
	ТабОстаткиПоУчету.Индексы.Добавить("Номенклатура");

	ТабОстатки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабОстатки.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабОстатки.Колонки.Добавить("ОстатокПоУчету", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаОстаток Из ТабОстатки Цикл
		СтрокаОстаток.ТТ = ТорговаяТочка;
		
		СтрокаТовар = ТабТовары.Найти(СтрокаОстаток.id_tov, "id_tov");
		Если СтрокаТовар <> Неопределено Тогда
			СтрокаОстаток.Номенклатура = СтрокаТовар.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если ТабОстатки.Количество() > 0 Тогда
		Для Каждого СтрокаОстатокУчет Из ТабОстаткиПоУчету Цикл
			СтрокаОстаток = ТабОстатки.Найти(СтрокаОстатокУчет.Номенклатура, "Номенклатура");
			Если СтрокаОстаток = Неопределено Тогда
				СтрокаОстаток = ТабОстатки.Добавить();
				СтрокаОстаток.ТТ = ТорговаяТочка;
				СтрокаОстаток.Номенклатура = СтрокаОстатокУчет.Номенклатура;
				СтрокаОстаток.Остаток = 0;
			КонецЕсли;
			СтрокаОстаток.ОстатокПоУчету = СтрокаОстатокУчет.ОстатокПоУчету;
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат ТабОстатки;
	
КонецФункции	

Функция	ПолучитьADOСоединение(парСервер = "10.0.0.40", парLogin = "", парПароль = "", ДопСтрока = "") Экспорт
	
	Если парСервер = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//+++АК Susk (Суслин К.В.) 2018.08.09 
	парLogin = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ЛогинSQL");
	парПароль = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПарольSQL");
	//---АК Susk (Суслин К.В.) 	 

	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = "SERVER=" + парСервер + "; DRIVER=SQL Server; UID=" + парLogin + "; PWD=" + парПароль + ";" + ДопСтрока + "OLE DB Services=-2;";
	
	Попытка
		ADOСоединение.Open();
		
		Если ADOСоединение.State() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось создать ADO-Соединение!");
			Возврат Неопределено;
		Иначе
			Возврат ADOСоединение;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;           
	
КонецФункции

Функция ПолучитьОрганизацияДляКассы(КассаКакОсновноеСредство, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОрганизацияКассы = Неопределено;
	
	//+++АК MIND 2018.02.05 
	Если ЗначениеЗаполнено(КассаКакОсновноеСредство.КодКассыВУНФ) Тогда
		ИдентификаторКассы = СокрЛП(КассаКакОсновноеСредство.КодКассыВУНФ);
	Иначе	
		ИдентификаторКассы = СокрЛП(КассаКакОсновноеСредство.ЗаводскойНомер);
	КонецЕсли;	
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT [SMS_IZBENKA].[dbo].[fnGetUlKkm] (CONVERT(DATE,'" + Формат(Дата, "ДФ=yyyy-MM-dd") + "'),'" + ИдентификаторКассы + "') as INN";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			ИННОрганизации = Rs.Fields("INN").Value;
			Если ТипЗнч(ИННОрганизации) = Тип("Строка")
				И ЗначениеЗаполнено(ИННОрганизации) Тогда
				ОрганизацияКассы = Справочники.Организации.НайтиПоРеквизиту("ИНН", ИННОрганизации);
			КонецЕсли;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	ADOСоединение = Неопределено;
	
	Возврат ОрганизацияКассы;
	
КонецФункции	

Функция ФорматПоля(Поле, ФорматДатыБезВремени = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Если ФорматДатыБезВремени Тогда
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-dd") + "'";
		Иначе	
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + Поле + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	КонецЕсли;
	
КонецФункции

Функция Уин1сВСкл(УИН) Экспорт
	
	СтрокаУин = Строка(УИН);
	Часть1 = ВРег(Лев(СтрокаУин, 8));
	Часть2 = ВРег(Сред(СтрокаУин, 10, 2));
	Часть3 = ВРег(Сред(СтрокаУин, 12, 2));
	Часть4 = ВРег(Сред(СтрокаУин, 15, 4));
	Часть5 = ВРег(Сред(СтрокаУин, 20, 2));
	Часть6 = ВРег(Сред(СтрокаУин, 22, 2));
	Часть7 = ВРег(Сред(СтрокаУин, 25, 2));
	Часть8 = ВРег(Сред(СтрокаУин, 27, 2));
	Часть9 = ВРег(Сред(СтрокаУин, 29, 2));
	Часть10 = ВРег(Сред(СтрокаУин, 31, 2));
	Часть11 = ВРег(Сред(СтрокаУин, 33, 2));
	Часть12 = ВРег(Сред(СтрокаУин, 35, 2));
	
	Возврат "" + Часть8 + Часть7 + Часть6 + Часть5 + "-" + Часть10 + Часть9 + "-" + Часть12 + Часть11 + "-" + "" + Часть4 + "-" + Часть2 + Часть3 + Часть1;
	
КонецФункции

Функция ПолучитьОстатокВКассе(НомерКассы = 0) Экспорт
	
	Остаток = 0;
	ADOСоединение = ПолучитьADOСоединение();
	
	//проверим карты с видами оплат
	СтрокаЗапроса = "SELECT TOP 1 CO.Ost_kon
			|FROM SMS_Repl.dbo.Cash_ost as CO (nolock)
			|WHERE CO.cash_id = " + ФорматПоля(НомерКассы) + " and CO.ShopNo_rep = " + ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "
			|";
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Остаток = rs.Fields("Ost_kon").Value;
			Прервать;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат Остаток;
	
КонецФункции

Функция ЕстьНеПроведеннаяОперация(НомерКассы = 0, Знач id_doc = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(id_doc) Тогда
		id_doc = "00000000-0000-0000-0000-000000000000";
	КонецЕсли;	
	
	Есть = Ложь;
	ADOСоединение = ПолучитьADOСоединение();
	
	СтрокаЗапроса = "SELECT TOP 1 CM.id_doc
					|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
					|WHERE CM.operation_type < 0 and CM.id_doc <> " + ФорматПоля(id_doc) + " and CM.cash_id = " + ФорматПоля(НомерКассы) + " and CM.ShopNo_rep = " + ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи);
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Есть = Истина;
			Прервать;
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	Возврат Есть;
	
КонецФункции	


Функция ПреобразоватьРезультатВТаблицуЗначений(rsTABLE) Экспорт
	КоличествоПолейТаблица=rsTABLE.fields.Count-1;
    ТаблицаПоискаТаблица = Новый массив;
    Если (НЕ rsTABLE.EOF) Тогда
        ТаблицаПоискаТаблица = rsTABLE.GetRows().Выгрузить();
	КонецЕсли;
	
	тзРезультат = Новый ТаблицаЗначений;
	
	Если ТаблицаПоискаТаблица.Количество() = 0 Тогда
		Возврат ТзРезультат;
	КонецЕсли;
	
	Для сч = 0 По КоличествоПолейТаблица Цикл
		массив = Новый Массив;
		//массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[1][сч]));
		массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[0][сч]));
        тзРезультат.Колонки.Добавить(rsTABLE.fields.item(сч).name,Новый ОписаниеТипов(массив));
    КонецЦикла;

    Для Каждого стрТаблица Из ТаблицаПоискаТаблица Цикл
        стр=тзРезультат.Добавить();
        Для сч = 0 По КоличествоПолейТаблица Цикл
			попытка
               	стр[сч] = СокрЛП(стрТаблица[сч]);
            исключение
               	сообщить(ОписаниеОшибки());
			конецпопытки;			
        КонецЦикла;
	КонецЦикла;
	Возврат тзРезультат;
КонецФункции

Функция СоставитьЗапросНаДобавление() Экспорт
	
	Возврат "INSERT INTO [SMS_Repl].[dbo].[ИмяТаблицы]
		|	(Поля)
		|VALUES (Значения)";			
		
КонецФункции
	
Функция СоставитьЗапросНаИзменение() Экспорт
	
	Возврат "UPDATE [SMS_Repl].[dbo].[ИмяТаблицы]
   				|SET СписокПолейSET
				|WHERE СписокПолейWhere";	
	
КонецФункции

Функция СоставитьЗапросНаУдаление() Экспорт
	
	Возврат "DELETE FROM [SMS_Repl].[dbo].[ИмяТаблицы] WHERE СписокПолейWhere";
	
КонецФункции

Функция ВернутьТекущуюДатуИIDSQL() Экспорт
	
	ADOСоединение = ПолучитьADOСоединение();
	
	//	
	ТекстЗапросаSQL = "
	| SELECT GetDate() as CurrentDate, CAST(NEWID() as nvarchar(50)) AS Id_doc";
		
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	rs.MoveFirst();
	
	Массив = rs.GetRows().Выгрузить();
	
	СтруктураВозврата = Новый Структура;
		
	Если Массив.Количество() > 0 ТОгда
		СтруктураВозврата.Вставить("Дата", Массив[0][0]); 
		СтруктураВозврата.Вставить("ИД", Массив[0][1]);		
	КонецЕсли;
	
	ADOСоединение.Close();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ВернутьТекущуюДатуSQL() Экспорт
	
	ADOСоединение = ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "
	| SELECT GetDate() as CurrentDate";
		
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	rs.MoveFirst();
	
	Массив = rs.GetRows().Выгрузить();
	
	СтруктураВозврата = Новый Структура;
	
	ADOСоединение.Close();
	
	Если Массив.Количество() > 0 ТОгда
		Возврат Массив[0][0];			
	КонецЕсли;
	
	Возврат Дата("00010101");

КонецФункции

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт
 
	Четн   = 0;
	Нечетн = 0;
	
	КоличествоИтераций = ?(Тип = 13, 6, 4);
	
	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
 
КонецФункции // КонтрольныйСимволEAN()

Функция ПроверитьПриходныйДокументУжеБылЗагружен(ИдДок) Экспорт
	
	ADOСоединение = ПолучитьADOСоединение();
	
	ТекстSQL = "SELECT [Id_doc]
       |FROM [SMS_Repl].[dbo].[TD_move]
       |WHERE Id_doc = " + ВнешниеДанные.ФорматПоля(ИдДок) + " and ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи);
	   
	rs = ADOСоединение.Execute(ТекстSQL);
	Результат = ПреобразоватьРезультатВТаблицуЗначений(rs);
	ADOСоединение.Close();
	
	Возврат Результат.Количество() <> 0;	
	
КонецФункции

Функция ВернутьТаблицуОстатковНоменклатурыДляИнвентаризации(МассивИД) Экспорт
	
	ИмяБД = "SMS_Repl";
	ТекстЗапроса = "SELECT 
					|(Ost.id_tov) id
					|, isnull(Ost.Ost_kon, 0) Ost
					|FROM [" + ИмяБД + "].[dbo].[TD_ost] Ost 
					|WHERE 
					| ShopNo_rep = " + ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи);

	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "643", Константы.ИДТТ.Получить());
	
	ЕстьИДТовара =  МассивИД.Количество() <> 0;
	
	Если ЕстьИДТовара Тогда
		ТекстЗапроса = ТекстЗапроса + " AND (";
	КонецЕсли;
	
	Сч = 0;
	
	Для Каждого ЭлИД Из МассивИД Цикл
		Сч = Сч + 1;
		ТекстЗапроса = ТекстЗапроса + "ost.id_tov = '" + Формат(ЭлИД, "ЧЦ=10; ЧДЦ=; ЧРД=; ЧГ=0") + "'" + ?(Сч = МассивИд.Количество(), "", " OR ");		
	КонецЦикла;	
	
	Если ЕстьИДТовара Тогда
		ТекстЗапроса = ТекстЗапроса + ")";
	КонецЕсли;
	
	ADOСоединение = ПолучитьADOСоединение();

	ТаблицаВозврат = Новый ТаблицаЗначений;
	ТаблицаВозврат.Колонки.Добавить("ИД");
	ТаблицаВозврат.Колонки.Добавить("Остаток");
	
	Попытка
		rs = ADOСоединение.Execute(ТекстЗапроса);
		rs.MoveFirst();
		Результат = ПреобразоватьРезультатВТаблицуЗначений(rs);

		Для Каждого Выборка ИЗ Результат Цикл
			
			НовСтр = ТаблицаВозврат.Добавить();
			НовСтр.ИД = Выборка.id;
			НовСтр.Остаток = Выборка.ost;
			
		КонецЦикла;
	Исключение
	КонецПопытки;	
	
	Возврат ТаблицаВозврат;	
	
КонецФункции

Функция ПолучитьТаблицуОстатковПоМассивуНоменклатуры(МассивНоменклатура, ДатаОстатков, ИдДок = "") Экспорт
	
	ИмяБД = "SMS_Repl";
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	Номенклатура.id_tov,
	               |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК Остаток
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&МассивТоваров)";
				   
	Запрос.УстановитьПараметр("МассивТоваров", МассивНоменклатура);
	ТабТовары = Запрос.Выполнить().Выгрузить();
	
	ТекстЗапроса = "select * from [" + ИмяБД + "].[dbo].Get_balance_ost_by_ShopNo_DT (" + ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "," + ФорматПоля(ДатаОстатков) + ")";
	
	//ТекстЗапроса = "create table #ost (id_tov int, ost real)
	//|insert into #ost (id_tov, ost)
	//|exec sms_repl..Get_balance_ost_by_ShopNo_DT_pr " + ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "," + ФорматПоля(ДатаОстатков) + "
	//|select * from #ost";
						
	
	ADOСоединение = ПолучитьADOСоединение();

	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТовар = ТабТовары.Найти(rs.Fields("id_tov").Value, "id_tov");
			Если СтрокаТовар <> Неопределено Тогда
				СтрокаТовар.Остаток = rs.Fields("balance_ost").Value;
				//СтрокаТовар.Остаток = rs.Fields("ost").Value;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	Возврат ТабТовары;
	
КонецФункции

Функция ПолучитьТаблицуОстатковПоМассивуНоменклатурыПоТДОст(МассивНоменклатура) Экспорт
	
	ИмяБД = "SMS_Repl";
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	Номенклатура.id_tov,
	               |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК Остаток
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&МассивТоваров)";
				   
	Запрос.УстановитьПараметр("МассивТоваров", МассивНоменклатура);
	ТабТовары = Запрос.Выполнить().Выгрузить();
	
	ТекстЗапроса = "SELECT TD_ost.id_tov, TD_ost.Ost_kon as balance_ost
					|FROM [" + ИмяБД + "].[dbo].[TD_ost] as TD_ost (nolock)
					| WHERE TD_ost.ShopNo_rep = " + ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи);
	
	ADOСоединение = ПолучитьADOСоединение();

	rs = ADOСоединение.Execute(ТекстЗапроса);
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТовар = ТабТовары.Найти(rs.Fields("id_tov").Value, "id_tov");
			Если СтрокаТовар <> Неопределено Тогда
				СтрокаТовар.Остаток = rs.Fields("balance_ost").Value;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	Возврат ТабТовары;
	
КонецФункции

Функция СчитатьДанныеПоШтрихКоду(Знач ШтрихКод) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврат = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, Количество, Объект", Справочники.Номенклатура.ПустаяСсылка(), Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), '00010101', 0, Неопределено);
	
	//сначала посмотри в регистр цпаковок поставщиков
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтрихКодыУпаковокПоставщиков.Характеристика,
	               |	ШтрихКодыУпаковокПоставщиков.КоличествоВУпаковке,
	               |	ШтрихКодыУпаковокПоставщиков.Характеристика.Владелец КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.ШтрихКодыУпаковокПоставщиков КАК ШтрихКодыУпаковокПоставщиков
	               |ГДЕ
	               |	ШтрихКодыУпаковокПоставщиков.ШК = &ШК";
				   
	Запрос.УстановитьПараметр("ШК", ШтрихКод);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврат.Номенклатура = Выборка.Номенклатура;
		СтруктураВозврат.Характеристика = Выборка.Характеристика;
		СтруктураВозврат.Количество = Выборка.КоличествоВУпаковке;
	Иначе	
		ДваПервых = Лев(ШтрихКод, 2);
		Если СтрДлина(ШтрихКод) = 15 Тогда //это штрих-код какого-то объекта в базе
			Если ДваПервых = "81" Тогда //это штрих-код зоны
				ИДСклада = Прав(ШтрихКод, 12);
				
				Пока Лев(ИДСклада, 1) = "0" Цикл
					ИДСклада = Сред(ИДСклада, 2);
				КонецЦикла;
				Если СтрДлина(ИДСклада) > 0 Тогда
					Попытка
						Запрос = Новый Запрос();
						Запрос.Текст = "ВЫБРАТЬ
						               |	Склады.Ссылка
						               |ИЗ
						               |	Справочник.Склады КАК Склады
						               |ГДЕ
						               |	Склады.ИД = &ИД";
									   
						Запрос.УстановитьПараметр("ИД", Число(ИДСклада));
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СтруктураВозврат.Объект = Выборка.Ссылка;
						КонецЕсли;	
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЕсли;
			Если ДваПервых = "82" Тогда //это штрих-код торговой точки
				ИД = Прав(ШтрихКод, 12);
				
				Пока Лев(ИД, 1) = "0" Цикл
					ИД = Сред(ИД, 2);
				КонецЦикла;
				Если СтрДлина(ИД) > 0 Тогда
					Попытка
						Запрос = Новый Запрос();
						Запрос.Текст = "ВЫБРАТЬ
						               |	СтруктурныеЕдиницы.Ссылка
						               |ИЗ
						               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
						               |ГДЕ
						               |	СтруктурныеЕдиницы.id_TT = &ИД";
									   
						Запрос.УстановитьПараметр("ИД", Число(ИД));
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СтруктураВозврат.Объект = Выборка.Ссылка;
						КонецЕсли;	
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЕсли;
			Если ДваПервых = "85" Тогда //это паллета
				ИДПаллеты = Прав(ШтрихКод, 12);
				
				Пока Лев(ИДПаллеты, 1) = "0" Цикл
					ИДПаллеты = Сред(ИДПаллеты, 2);
				КонецЦикла;
				Если СтрДлина(ИДПаллеты) > 0 Тогда
					Попытка
						Запрос = Новый Запрос();
						Запрос.Текст = "ВЫБРАТЬ
						               |	СоставПаллеты.Ссылка
						               |ИЗ
						               |	Справочник.СоставПаллеты КАК СоставПаллеты
						               |ГДЕ
						               |	СоставПаллеты.ИД = &ИД";
									   
						Запрос.УстановитьПараметр("ИД", Число(ИДПаллеты));
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СтруктураВозврат.Объект = Выборка.Ссылка;
						КонецЕсли;	
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли СтрДлина(ШтрихКод) = 14 Тогда //это штрих-код коробки
			Идентификатор = Сред(ШтрихКод, 1, 4);
			КолвоВКоробке = Сред(ШтрихКод, 5, 6);
			ДатаПроизв = Сред(ШтрихКод, 11, 4);
			
			Пока Лев(Идентификатор, 1) = "0" Цикл
				Идентификатор = Сред(Идентификатор, 2);
			КонецЦикла;
			
			Пока Лев(КолвоВКоробке, 1) = "0" Цикл
				КолвоВКоробке = Сред(КолвоВКоробке, 2);
			КонецЦикла;
			
			Попытка
				Идентификатор = Число(Идентификатор);
				
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				               |	НумераторШтрихКодовКоробок.Номенклатура,
				               |	НумераторШтрихКодовКоробок.Характеристика
				               |ИЗ
				               |	РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
				               |ГДЕ
				               |	НумераторШтрихКодовКоробок.Нумератор = &Нумератор";
							   
				Запрос.УстановитьПараметр("Нумератор", Идентификатор);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтруктураВозврат.Вставить("Номенклатура", Выборка.Номенклатура);
					СтруктураВозврат.Вставить("Характеристика", Выборка.Характеристика);
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Попытка
				СтруктураВозврат.Вставить("Количество", ?(НРег(СтруктураВозврат.Номенклатура.БазоваяЕдиницаИзмерения.Наименование) = "шт", Число(КолвоВКоробке), Число(КолвоВКоробке) / 1000));
			Исключение
			КонецПопытки;
			
			Если ДатаПроизв <> "0000" Тогда
				Дата = Сред(ДатаПроизв, 3, 2);
				Месяц = Сред(ДатаПроизв, 1, 2);
				
				Пока Лев(Дата, 1) = "0" Цикл
					Дата = Сред(Дата, 2);
				КонецЦикла;
				
				Пока Лев(Месяц, 1) = "0" Цикл
					Месяц = Сред(Месяц, 2);
				КонецЦикла;
				
				Попытка
					ДатаПрзв = Дата(Год(ТекущаяДата()), Число(Месяц), Число(Дата));
					Если ДатаПрзв > ТекущаяДата() + 2*86400 Тогда
						ДатаПрзв = ДобавитьМесяц(ДатаПрзв, -12);
					КонецЕсли;	
					СтруктураВозврат.Вставить("ДатаПроизводства", ДатаПрзв);
				Исключение
				КонецПопытки;	
			КонецЕсли;	
			
		ИначеЕсли ДваПервых = "98"
			ИЛИ ДваПервых = "96" Тогда
			ЗначимаяЧасть = Прав(ШтрихКод, СтрДлина(ШтрихКод) - 2);
			ЗначимаяЧасть = Лев(ЗначимаяЧасть, СтрДлина(ЗначимаяЧасть) - 6);
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ШтрихКод", "%" + ЗначимаяЧасть + "%");
			Запрос.Текст = "ВЫБРАТЬ
			               |	ШтриховыеКоды.Номенклатура,
			               |	ШтриховыеКоды.Характеристика
			               |ИЗ
			               |	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
			               |ГДЕ
			               |	ШтриховыеКоды.ШтрихКод ПОДОБНО &ШтрихКод
						   |	И ШтриховыеКоды.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование = ""кг""";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураВозврат.Вставить("Номенклатура", Выборка.Номенклатура);
				СтруктураВозврат.Вставить("Характеристика", Выборка.Характеристика);
				Если СтрДлина(ШтрихКод) = 13 Тогда
					Попытка
						Колво = Сред(ШтрихКод, 8, 5);
						Пока Лев(Колво, 1) = "0" Цикл
							Колво = Сред(Колво, 2);
						КонецЦикла;	
						СтруктураВозврат.Вставить("Количество", Число(Колво) / 1000);
					Исключение
						СтруктураВозврат.Вставить("Количество", 1);
					КонецПопытки;	
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДваПервых = "99"
			ИЛИ ДваПервых = "97" Тогда
			ЗначимаяЧасть = Прав(ШтрихКод, СтрДлина(ШтрихКод) - 2);
			ЗначимаяЧасть = Лев(ЗначимаяЧасть, СтрДлина(ЗначимаяЧасть) - 1);
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ШтрихКод", "%" + ЗначимаяЧасть + "%");
			Запрос.Текст = "ВЫБРАТЬ
			               |	ШтриховыеКоды.Номенклатура,
			               |	ШтриховыеКоды.Характеристика
			               |ИЗ
			               |	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
			               |ГДЕ
			               |	ШтриховыеКоды.ШтрихКод ПОДОБНО &ШтрихКод";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураВозврат.Вставить("Номенклатура", Выборка.Номенклатура);
				СтруктураВозврат.Вставить("Характеристика", Выборка.Характеристика);
				Если СтрДлина(ШтрихКод) = 13 Тогда
					Попытка
						Если СтруктураВозврат.Номенклатура.Весовой = Ложь Тогда
							СтруктураВозврат.Вставить("Количество", 1);
						Иначе	
							Колво = Сред(ШтрихКод, 8, 5);
							Пока Лев(Колво, 1) = "0" Цикл
								Колво = Сред(Колво, 2);
							КонецЦикла;	
							СтруктураВозврат.Вставить("Количество", Число(Колво) / 1000);
						КонецЕсли;	
					Исключение
						СтруктураВозврат.Вставить("Количество", 1);
					КонецПопытки;	
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ДваПервых = "88" Тогда
			//появились штрих-коды стандартные с длиной 13 символов
			Если СтрДлина(ШтрихКод) = 13 Тогда
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
				Запрос.Текст = "ВЫБРАТЬ
				               |	ШтриховыеКоды.Номенклатура,
				               |	ШтриховыеКоды.Характеристика
				               |ИЗ
				               |	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
				               |ГДЕ
				               |	ШтриховыеКоды.ШтрихКод = &ШтрихКод";
							   
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтруктураВозврат.Вставить("Номенклатура", Выборка.Номенклатура);
					СтруктураВозврат.Вставить("Характеристика", Выборка.Характеристика);
					СтруктураВозврат.Вставить("Количество", 1);
				КонецЕсли;	
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(СтруктураВозврат.Номенклатура) Тогда
				ЗначимаяЧасть = Прав(ШтрихКод, СтрДлина(ШтрихКод) - 2);
				ЗначимаяЧасть = Лев(ЗначимаяЧасть, СтрДлина(ЗначимаяЧасть) - 5);
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("ШтрихКод", "%" + ЗначимаяЧасть + "%");
				Запрос.Текст = "ВЫБРАТЬ
				               |	ШтриховыеКоды.Номенклатура,
				               |	ШтриховыеКоды.Характеристика,
				               |	МАКСИМУМ(ШтриховыеКоды.ШтрихКод) КАК ШтрихКод,
				               |	МАКСИМУМ(ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Квант, 0)) КАК Количество
				               |ИЗ
				               |	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйКвантУпаковки.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
				               |		ПО ШтриховыеКоды.Номенклатура = КоличествоВКоробкеСрезПоследних.Характеристика.Владелец
				               |			И ШтриховыеКоды.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
				               |ГДЕ
				               |	ШтриховыеКоды.ШтрихКод ПОДОБНО &ШтрихКод
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ШтриховыеКоды.Номенклатура,
				               |	ШтриховыеКоды.Характеристика";
							   
		 
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтруктураВозврат.Вставить("Номенклатура", Выборка.Номенклатура);
					СтруктураВозврат.Вставить("Характеристика", Выборка.Характеристика);
					СтруктураВозврат.Вставить("ШтрихКодНоменклатуры", Выборка.ШтрихКод);
					//Если СтрДлина(ШтрихКод) = 17 Тогда
						//Попытка
							//Если СтруктураВозврат.Номенклатура.Весовой = Ложь Тогда
							//	СтруктураВозврат.Вставить("Количество", 1);
							//Иначе	
								Колво = Сред(ШтрихКод, СтрДлина(ЗначимаяЧасть)+2+1, 5);
								Пока Лев(Колво, 1) = "0" Цикл
									Колво = Сред(Колво, 2);
								КонецЦикла;	
								СтруктураВозврат.Вставить("КоличествоКоробок", Число(Колво) );
								СтруктураВозврат.Вставить("Количество", Выборка.Количество*Колво );
							//КонецЕсли;	
						//Исключение
						//	СтруктураВозврат.Вставить("Количество", 1);
						//КонецПопытки;	
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;	                                                                     
		ИначеЕсли ДваПервых = "86" Тогда                                                        
			ИдНом=Число(Сред(ШтрихКод,3,6));
			Номенклатура=Справочники.Номенклатура.НайтиПоРеквизиту("id_tov",ИдНом);
			
			ИдТТ=Число(Сред(ШтрихКод,9,5));
			ТТ=Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",ИдТТ);
			
			День=Число(Сред(ШтрихКод,14,2));
			Месяц=Число(Сред(ШтрихКод,16,2));
			Год=Число(Сред(ШтрихКод,18,14));
			
			ДатаШК=Дата(Год,месяц,День);
			
			СтруктураВозврат=Новый Структура;
			СтруктураВозврат.Вставить("Номенклатура", Номенклатура);
			СтруктураВозврат.Вставить("ТТ", ТТ);
			СтруктураВозврат.Вставить("Дата", ДатаШК);
		Иначе	
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ШтриховыеКоды.Номенклатура,
			               |	ШтриховыеКоды.Характеристика
			               |ИЗ
			               |	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
			               |ГДЕ
			               |	ШтриховыеКоды.ШтрихКод = &ШтрихКод";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураВозврат.Вставить("Номенклатура", Выборка.Номенклатура);
				СтруктураВозврат.Вставить("Характеристика", Выборка.Характеристика);
				СтруктураВозврат.Вставить("Количество", 1);
			Иначе
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("ШтрихКод", Лев(ШтрихКод, 7));
				Запрос.Текст = "ВЫБРАТЬ
				               |	ШтриховыеКоды.Номенклатура,
				               |	ШтриховыеКоды.Характеристика
				               |ИЗ
				               |	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
				               |ГДЕ
				               |	ШтриховыеКоды.ШтрихКод = &ШтрихКод";
							   
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтруктураВозврат.Вставить("Номенклатура", Выборка.Номенклатура);
					СтруктураВозврат.Вставить("Характеристика", Выборка.Характеристика);
					Если СтрДлина(ШтрихКод) = 13 Тогда
						Попытка
							Колво = Сред(ШтрихКод, 8, 5);
							Пока Лев(Колво, 1) = "0" Цикл
								Колво = Сред(Колво, 2);
							КонецЦикла;	
							СтруктураВозврат.Вставить("Количество", Число(Колво) / 1000);
						Исключение
							СтруктураВозврат.Вставить("Количество", 1);
						КонецПопытки;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// +++ АК mirv 22.08.2017 [ИП-00015805]
	// 
	// +++ mirv
	// Для номенклатуры - добавим два доп параметра ЕстьРозничнаяЦена и ПочтаБрендМенеджера
	// Бренд менеджер определяется - аналогично как в элементе Номенклатура -вкладка "БрендМенеджер"
	Если ЗначениеЗаполнено(СтруктураВозврат.Номенклатура) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ) КАК ЦеныНоменклатурыСрезПоследних
			|ГДЕ
			|	ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
			|	И ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";

		Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
		Запрос.УстановитьПараметр("Номенклатура", СтруктураВозврат.Номенклатура);
		Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦен.ОсновнойТипЦенПродаж);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтруктураВозврат.Вставить("АК_ЕстьРозничнаяЦена", Истина);
		Иначе
			СтруктураВозврат.Вставить("АК_ЕстьРозничнаяЦена", Ложь);
		КонецЕсли;

		МассивДоступныхРолей 		= Новый Массив;
		МассивДоступныхТиповРолей 	= Новый Массив;
		
		//Взято из основной формы Номенклатуры
		//
		ТЗ =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейТипыРолей.Ссылка,
		|	РолиПользователейТипыРолей.ТипРоли,
		|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
		|ИЗ
		|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|{ГДЕ
		|	РолиПользователейТипыРолей.Ссылка.* КАК Роль,
		|	РолиПользователейТипыРолей.ТипРоли.* КАК ТипРоли,
		|	РолиПользователейТипыРолей.ТипРоли.ТипСтруктурнойЕдиницы.* КАК ТипСтруктурнойЕдиницы}";
		
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//
			Если Выборка.ТипРоли.ТипЗначения.СодержитТип(ТипЗнч(СтруктураВозврат.Номенклатура)) Тогда
				
				//
				МассивДоступныхРолей.Добавить(Выборка.Ссылка);
				МассивДоступныхТиповРолей.Добавить(Выборка.ТипРоли);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		//
		ТЗ =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.Период,
		|	РолиПользователей.Ссылка КАК Роль,
		|	РолиПользователей.ТипРоли КАК ТипРоли,
		|	РолиПользователей.Ссылка.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Пометка,
		|	РолиПользователей.Ссылка.ПометкаУдаления
		|ИЗ
		|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
		|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
		|			И (СоответствиеОбъектРольСрезПоследних.Объект = &Объект)
		|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
		|ГДЕ
		|	РолиПользователей.Ссылка В(&ДоступныеРоли)
		|	И РолиПользователей.ТипРоли В(&ДоступныеТипы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Объект"			, СтруктураВозврат.Номенклатура);
		ПЗ.Параметры.Вставить("ДоступныеРоли"	, МассивДоступныхРолей);
		ПЗ.Параметры.Вставить("ДоступныеТипы"	, МассивДоступныхТиповРолей);
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		РольБрендМенеджер = Неопределено;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Пометка Тогда
			    РольБрендМенеджер = Выборка.Ссылка;
				Прервать;			
			КонецЕсли;;
			
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(РольБрендМенеджер) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РолиПользователейСоставРоли.Сотрудник
				|ПОМЕСТИТЬ Сотрудники
				|ИЗ
				|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
				|ГДЕ
				|	РолиПользователейСоставРоли.Ссылка = &РольБрендМенеджер
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	КонтактнаяИнформация.Представление,
				|	Сотрудники.Сотрудник
				|ИЗ
				|	Сотрудники КАК Сотрудники
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|		ПО (КонтактнаяИнформация.Объект = Сотрудники.Сотрудник)
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип";

			Запрос.УстановитьПараметр("РольБрендМенеджер", РольБрендМенеджер);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				СтруктураВозврат.Вставить("АК_ПочтаБрендМенеджера", ВыборкаДетальныеЗаписи.Представление);
			КонецЕсли;
		
		КонецЕсли;    	
	
	КонецЕсли;
	// --- mirv
	// --- АК mirv  
	Возврат СтруктураВозврат;
	
КонецФункции

Функция ПолучитьХарактеристикуДляНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТТ", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Расходники
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -1) И &ТекДата
	               |	И (ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы)) = &ТТ
	               |	И РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Запрос.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Характеристика
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	               |			МАКСИМУМ(РасходныйОрдерСкладТовары.Ссылка.Дата) КАК Дата
	               |		ИЗ
	               |			Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |		ГДЕ
	               |			РасходныйОрдерСкладТовары.Ссылка В
	               |					(ВЫБРАТЬ
	               |						ВТ.Ссылка
	               |					ИЗ
	               |						ВТ_Расходники КАК ВТ)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			РасходныйОрдерСкладТовары.Номенклатура) КАК ВЗ_Запрос
	               |		ПО РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = ВЗ_Запрос.Дата
	               |			И РасходныйОрдерСкладТовары.Номенклатура = ВЗ_Запрос.Номенклатура
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТ_Расходники.Ссылка
	               |			ИЗ
	               |				ВТ_Расходники КАК ВТ_Расходники)
	               |	И РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Расходники";
				   
	Харка = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Харка = Выборка.Характеристика;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Харка) Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХарактеристикиНоменклатуры.Ссылка
		               |ИЗ
		               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |ГДЕ
		               |	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		               |	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
		               |	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
		               |	И ХарактеристикиНоменклатуры.Ссылка В
		               |			(ВЫБРАТЬ
		               |				ТоварныйАссортиментТочекСрезПоследних.Характеристика
		               |			ИЗ
		               |				РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ТорговаяТочка = &ТТ
		               |					ИЛИ &ТТ = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		               |						И Номенклатура = &Номенклатура
		               |						И Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних)";
					   
		Таб = Запрос.Выполнить().Выгрузить();
		Если Таб.Количество() = 1 Тогда
			Харка = Таб[0].Ссылка;
		Иначе
			Харка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Харка;
	
КонецФункции	

Функция ПолучитьХарактеристикуДляМассиваНоменклатуры(МассивНоменклатура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНоменклатура", МассивНоменклатура);
	Запрос.УстановитьПараметр("ТТ", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Если МассивНоменклатура.Количество() > 50 Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_Расходники
		               |ИЗ
		               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		               |ГДЕ
		               |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -3) И &ТекДата
		               |	И (ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы)) = &ТТ
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЗ_Запрос.Номенклатура,
		               |	РасходныйОрдерСкладТовары.Характеристика
		               |ИЗ
		               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		               |			МАКСИМУМ(РасходныйОрдерСкладТовары.Ссылка.Дата) КАК Дата
		               |		ИЗ
		               |			Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		               |		ГДЕ
		               |			РасходныйОрдерСкладТовары.Ссылка В
		               |					(ВЫБРАТЬ
		               |						ВТ.Ссылка
		               |					ИЗ
		               |						ВТ_Расходники КАК ВТ)
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			РасходныйОрдерСкладТовары.Номенклатура) КАК ВЗ_Запрос
		               |		ПО РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = ВЗ_Запрос.Дата
		               |			И РасходныйОрдерСкладТовары.Номенклатура = ВЗ_Запрос.Номенклатура
		               |ГДЕ
		               |	РасходныйОрдерСкладТовары.Ссылка В
		               |			(ВЫБРАТЬ
		               |				ВТ_Расходники.Ссылка
		               |			ИЗ
		               |				ВТ_Расходники КАК ВТ_Расходники)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ХарактеристикиНоменклатуры.Ссылка,
		               |	ХарактеристикиНоменклатуры.Владелец
		               |ИЗ
		               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |ГДЕ
		               |	ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
		               |	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
		               |	И ХарактеристикиНоменклатуры.Ссылка В
		               |			(ВЫБРАТЬ
		               |				ТоварныйАссортиментТочекСрезПоследних.Характеристика
		               |			ИЗ
		               |				РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ТорговаяТочка = &ТТ
		               |					ИЛИ &ТТ = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		               |						И Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Расходники";
					   
		Результаты = Запрос.ВыполнитьПакет();
		ТабКешПоРасходникам = Результаты[1].Выгрузить();
		ТабКешПоАссортименту = Результаты[2].Выгрузить();			   
	Иначе				   
		Запрос.Текст = "ВЫБРАТЬ
					   |	Номенклатура.Ссылка КАК Ссылка
					   |ПОМЕСТИТЬ ВТ_Товары
					   |ИЗ
					   |	Справочник.Номенклатура КАК Номенклатура
					   |ГДЕ
					   |	Номенклатура.Ссылка В(&МассивНоменклатура)
					   |
					   |ИНДЕКСИРОВАТЬ ПО
					   |	Ссылка
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка
					   |ПОМЕСТИТЬ ВТ_Расходники
					   |ИЗ
					   |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
					   |ГДЕ
					   |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -3) И &ТекДата
					   |	И (ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы)) = &ТТ
					   |	И РасходныйОрдерСкладТовары.Номенклатура В
					   |			(ВЫБРАТЬ
					   |				ВТ.Ссылка
					   |			ИЗ
					   |				ВТ_Товары КАК ВТ)
					   |
					   |ИНДЕКСИРОВАТЬ ПО
					   |	Ссылка
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ
					   |	ВЗ_Запрос.Номенклатура,
					   |	РасходныйОрдерСкладТовары.Характеристика
					   |ИЗ
					   |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					   |			РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
					   |			МАКСИМУМ(РасходныйОрдерСкладТовары.Ссылка.Дата) КАК Дата
					   |		ИЗ
					   |			Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
					   |		ГДЕ
					   |			РасходныйОрдерСкладТовары.Ссылка В
					   |					(ВЫБРАТЬ
					   |						ВТ.Ссылка
					   |					ИЗ
					   |						ВТ_Расходники КАК ВТ)
					   |		
					   |		СГРУППИРОВАТЬ ПО
					   |			РасходныйОрдерСкладТовары.Номенклатура) КАК ВЗ_Запрос
					   |		ПО РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = ВЗ_Запрос.Дата
					   |			И РасходныйОрдерСкладТовары.Номенклатура = ВЗ_Запрос.Номенклатура
					   |ГДЕ
					   |	РасходныйОрдерСкладТовары.Ссылка В
					   |			(ВЫБРАТЬ
					   |				ВТ_Расходники.Ссылка
					   |			ИЗ
					   |				ВТ_Расходники КАК ВТ_Расходники)
					   |	И РасходныйОрдерСкладТовары.Номенклатура В
					   |			(ВЫБРАТЬ
					   |				ВТ.Ссылка
					   |			ИЗ
					   |				ВТ_Товары КАК ВТ)
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ
					   |	ХарактеристикиНоменклатуры.Ссылка,
					   |	ХарактеристикиНоменклатуры.Владелец
					   |ИЗ
					   |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					   |ГДЕ
					   |	ХарактеристикиНоменклатуры.Владелец В
					   |			(ВЫБРАТЬ
					   |				ВТ.Ссылка
					   |			ИЗ
					   |				ВТ_Товары КАК ВТ)
					   |	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
					   |	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
					   |	И ХарактеристикиНоменклатуры.Ссылка В
					   |			(ВЫБРАТЬ
					   |				ТоварныйАссортиментТочекСрезПоследних.Характеристика
					   |			ИЗ
					   |				РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекДата, ТорговаяТочка = &ТТ
					   |					ИЛИ &ТТ = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
					   |						И Номенклатура В
					   |							(ВЫБРАТЬ
					   |								ВТ.Ссылка
					   |							ИЗ
					   |								ВТ_Товары КАК ВТ)
					   |						И Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних)
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |УНИЧТОЖИТЬ ВТ_Расходники
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |УНИЧТОЖИТЬ ВТ_Товары";
					   
		Результаты = Запрос.ВыполнитьПакет();
		ТабКешПоРасходникам = Результаты[2].Выгрузить();
		ТабКешПоАссортименту = Результаты[3].Выгрузить();
	КонецЕсли;				   
				   
	СоответствиеРезультат = Новый Соответствие();
	Для Каждого ЭлементНоменклатура Из МассивНоменклатура Цикл
		СтрокаКеш = ТабКешПоРасходникам.Найти(ЭлементНоменклатура, "Номенклатура");
		Если СтрокаКеш <> Неопределено Тогда
			СоответствиеРезультат.Вставить(ЭлементНоменклатура, СтрокаКеш.Характеристика);
		Иначе
			СтрокаКеш = ТабКешПоАссортименту.Найти(ЭлементНоменклатура, "Владелец");
			Если СтрокаКеш <> Неопределено Тогда
				СоответствиеРезультат.Вставить(ЭлементНоменклатура, СтрокаКеш.Ссылка);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СоответствиеРезультат;	
	
КонецФункции	

Функция ЕстьНеПроведенныеДокументыПоТоварам() Экспорт
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();	
	
	Запрос = "
		|SELECT TOP 1 [id_doc] Iddoc     	
 		|FROM [SMS_Repl].[dbo].[TD_move]
		|WHERE closedate = '1900-01-01' and ShopNo_rep = " + ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "
		//|	and (not operation_type IN (700, -700, 701, -701, 900, -900, 901, -901, 300, -300, 400, -400) or id_vikl = 99999)
		|	and (not operation_type IN (700, -700, 701, -701, 900, -900, 901, -901, 300, -300, 400, -400))
		|	and opendate >= " + ФорматПоля(НачалоДня(ТекущаяДата() - 2*86400)) + "
		|	and Confirm_reason <> 16";
		
	rs = ADOСоединение.Execute(Запрос);

	Попытка
		//rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Возврат Истина;
		КонецЦикла;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	

Функция ПолучитьДокументПоШтрихКоду(Знач ШтрихКод) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДваПервых = Лев(ШтрихКод, 2);
	Если ДваПервых = "91"
		ИЛИ ДваПервых = "92"
		ИЛИ ДваПервых = "93" 
		ИЛИ ДваПервых = "94" 
		ИЛИ ДваПервых = "90" 
		ИЛИ ДваПервых = "89"
		ИЛИ ДваПервых = "87"
		ИЛИ ДваПервых = "95"
		Тогда
			ЗначимаяЧасть = Прав(ШтрихКод, СтрДлина(ШтрихКод) - 2);
			ШтрихкодВШестнаднадцатиричномВиде = ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Число(ЗначимаяЧасть));
			Пока СтрДлина(ШтрихкодВШестнаднадцатиричномВиде) < 32 Цикл
				ШтрихкодВШестнаднадцатиричномВиде = "0" + ШтрихкодВШестнаднадцатиричномВиде;
			КонецЦикла;
			
			УИН =
			        Сред(ШтрихкодВШестнаднадцатиричномВиде, 1,  8)
			+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 9,  4)
			+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 13, 4)
			+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 17, 4)
			+ "-" + Сред(ШтрихкодВШестнаднадцатиричномВиде, 21, 12);
			Если ДваПервых = "91" Тогда
				ДокСсылка = Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			ИначеЕсли ДваПервых = "92" Тогда
				ДокСсылка = Документы.ПриходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			ИначеЕсли ДваПервых = "93" Тогда
				ДокСсылка = Документы.РасходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			ИначеЕсли ДваПервых = "94" Тогда
				ДокСсылка = Документы.ПеремещениеСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			ИначеЕсли ДваПервых = "90" Тогда
				ДокСсылка = Документы.ЗаданиеНаИнвентаризацию.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			ИначеЕсли ДваПервых = "89" Тогда
				ДокСсылка = Документы.МаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			ИначеЕсли ДваПервых = "87" Тогда
				ДокСсылка = Документы.ЗаданиеНаПеремещение.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			ИначеЕсли ДваПервых = "95" Тогда
				ДокСсылка = Документы.ЗаданиеНаРазборку.ПолучитьСсылку(Новый УникальныйИдентификатор(УИН));
				Возврат ?(Найти(ДокСсылка, "<Объект не найден") > 0, Неопределено, ДокСсылка);
			КонецЕсли;	
	КонецЕсли;		
	Возврат неопределено;	
КонецФункции	

Функция ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = "";
	
	Пока ДесятичноеЧисло > 0 цикл
		ОстатокОтДеления = ДесятичноеЧисло % 16;
		ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
		Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


///////////////////////////////////////////////////////////////
//Для веб-сервиса мобильного приложения

//возвращает таблицу с двумя колонками
//	КодОперации(число)
//	Наименование(строка) - можно в таком виде выводить пользователю
//	НужнаПричинаСписания(булево) - для данного вида списания нужно обязательно указывать причину списания
//	НужноПрикреплятьФото(булево) - для данного вида списания нужно обязательно прикреплять фото
Функция ПолучитьТипыОперацийСписания() Экспорт
	
	ТабВозврат = Новый ТаблицаЗначений();
	ТабВозврат.Колонки.Добавить("КодОперации", Новый ОписаниеТипов("Число"));
	ТабВозврат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТабВозврат.Колонки.Добавить("НужнаПричинаСписания", Новый ОписаниеТипов("Булево"));
	ТабВозврат.Колонки.Добавить("НужноПрикреплятьФото", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыОпераций.Наименование,
	               |	ТипыОпераций.code_operation КАК КодОперации,
	               |	ВЫБОР
	               |		КОГДА ТипыОпераций.code_operation В (102, 103, 104, 201)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НужнаПричинаСписания,
				   |	ВЫБОР
	               |		КОГДА ТипыОпераций.is_photo = 1
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НужноПрикреплятьФото
	               |ИЗ
	               |	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	               |ГДЕ
	               |	ТипыОпераций.table_operation = ""td_move""
	               |	И ТипыОпераций.for_user_vv В (1, 2)
	               |	И ТипыОпераций.field_operation = ""operation_type_orig""
	               |	И ТипыОпераций.code_operation В (101, 102, 103, 104, 105, 201)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТипыОпераций.code_operation";
				   
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТабВозврат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ТабВозврат;
	
КонецФункции

//возвращает таблицу с двумя колонками
//	КодПричины(число)
//	Наименование(строка) - можно в таком виде выводить пользователю
Функция ПолучитьКодыПричинСписания() Экспорт
	
	ТабВозврат = Новый ТаблицаЗначений();
	ТабВозврат.Колонки.Добавить("КодПричины", Новый ОписаниеТипов("Число"));
	ТабВозврат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПричиныСписания.Наименование,
	               |	ПричиныСписания.ИД КАК КодПричины
	               |ИЗ
	               |	Справочник.ПричиныСписания КАК ПричиныСписания
	               |ГДЕ
	               |	ПричиныСписания.Неактивное = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодПричины";
				   
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТабВозврат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ТабВозврат;
	
КонецФункции

Функция ЕстьИнвентаризация()
	
	ADOСоединение = ПолучитьADOСоединение();
	
	СтрокаЗапроса = "SELECT TOP 1 CM.id_doc
					|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
					|WHERE CM.cash_id = 0 and CM.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "
					|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата()) - 7 * 3600) + " and CM.operation_type = 9";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Возврат Истина;
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	Возврат Ложь;
	
КонецФункции

//в параметр СтрокаОтказа записывается причина отказа
Функция МожноВводитьНовуюОперациюСписания(Магазин, СтрокаОтказа = "") Экспорт
	
	//Кривенко сказал сделать как на кассе, а на кассе эти проверки не выполняются
	
	//ПараметрыСеанса.НомерТочкиПоАйпи = Магазин.НомерТочки;
	//
	//Если ЕстьНеПроведенныеДокументыПоТоварам() Тогда
	//	СтрокаОтказа = "Есть не проведенные документы в базе. Новый документ создавать нельзя!";
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если НЕ ЕстьИнвентаризация() Тогда
	//	СтрокаОтказа = "Нельзя вводить операции пока не введена инвентаризация денег по центральной кассе!";
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//функция предусматривает два режима, если передает конкретный уин, то даты не учитываются, и наоборот
//Колонки таблицы возврата
//УинОперации - строка
//КодОперации - число
//КодПричиныСписания - число 
//Дата - дата и время
//Проведен - булево
//Комментарий - строка
//Товар - ссылка
//Характеристика - ссылка
//Дата производства - дата
//Количество - число
Функция ПрочитатьОперацииСписания(Магазин, ДатаНачала = '00010101', ДатаКонца = '00010101',  УинОперации = "", ТолькоСТребованиемФото = Истина) Экспорт
	
	ТабВозврата = Новый ТаблицаЗначений();
	ТабВозврата.Колонки.Добавить("УинОперации", Новый ОписаниеТипов("Строка"));
	ТабВозврата.Колонки.Добавить("КодОперации", Новый ОписаниеТипов("Число"));
	ТабВозврата.Колонки.Добавить("КодПричиныСписания", Новый ОписаниеТипов("Число"));
	ТабВозврата.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабВозврата.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТабВозврата.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТабВозврата.Колонки.Добавить("Товар", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТабВозврата.Колонки.Добавить("Характеристика", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТабВозврата.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата"));
	ТабВозврата.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабВозврата.Колонки.Добавить("КолвоФото", Новый ОписаниеТипов("Число"));
	
	ТабВозврата.Колонки.Добавить("id_tov");
	ТабВозврата.Колонки.Добавить("id_kontr");
	
	// +++ АК mirv 08.12.2017 [ИП-00017151]
	ТабВозврата.Колонки.Добавить("СотрудникТабельныйНомер", Новый ОписаниеТипов("Строка"));
	ТабВозврата.Колонки.Добавить("ДокументИД", Новый ОписаниеТипов("Строка"));
	ТабИД = Новый ТаблицаЗначений;
	ТабИД.Колонки.Добавить("ДокументИД");
	// --- АК mirv  
	
	ADOСоединение = ПолучитьADOСоединение();
	
	// +++ АК mirv 08.12.2017 [ИП-00017151]
	// Добавим ИД документа
	//ТекстЗапросаSQL = "SELECT TD.opendate, TD.closedate, TD.id_tov, TD.id_kontr, CAST(CASE WHEN ISNULL(TD.Date_proizv, '1900-01-01') < '2000-01-01' THEN '1900-01-01' ELSE TD.Date_proizv END as datetime) as Date_proizv, TD.Quantity as Quantity, TD.operation_type
	//			|, TD.id_reason, CAST(TD.tduid as nvarchar(36)) as tduid, TD.Descr";
	ТекстЗапросаSQL = "SELECT CAST(TD.Id_doc as  nvarchar(36)) Id_doc, TD.opendate, TD.closedate, TD.id_tov, TD.id_kontr, CAST(CASE WHEN ISNULL(TD.Date_proizv, '1900-01-01') < '2000-01-01' THEN '1900-01-01' ELSE TD.Date_proizv END as datetime) as Date_proizv, TD.Quantity as Quantity, TD.operation_type
				|, TD.id_reason, CAST(TD.tduid as nvarchar(36)) as tduid, TD.Descr";
	// --- АК mirv  
	Если ЗначениеЗаполнено(УинОперации) Тогда			
		ТекстЗапросаSQL = ТекстЗапросаSQL + "			
				|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move))
				| WHERE TD.tduid = " + ФорматПоля(УинОперации);
	Иначе
		ТекстЗапросаSQL = ТекстЗапросаSQL + "			
				|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind2))
				| WHERE TD.ShopNo_rep = " + ФорматПоля(Магазин.НомерТочки) + " and TD.opendate >= " + ФорматПоля(НачалоДня(ДатаНачала)) + " and TD.opendate <= " + ФорматПоля(КонецДня(ДатаКонца));
	КонецЕсли;
	
	Если ТолькоСТребованиемФото Тогда
		ТекстЗапросаSQL = ТекстЗапросаSQL + " and TD.operation_type * CASE WHEN TD.operation_type < 0 THEN -1 ELSE 1 END IN (SELECT [code_operation]
											  |	
											  |FROM [SMS_REPL].[dbo].[Types_Operation] (nolock) WHERE [is_photo] = 1
											  |and table_operation = 'td_move'
											  |				 and for_user_vv IN (1, 2)
											  |				 and field_operation = 'operation_type_orig')";		
	Иначе	
		ТекстЗапросаSQL = ТекстЗапросаSQL + " and TD.operation_type * CASE WHEN TD.operation_type < 0 THEN -1 ELSE 1 END IN (101, 102, 103, 104, 105, 201)";		
	КонецЕсли;	
								
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НовСтр = ТабВозврата.Добавить();
			НовСтр.УинОперации = НРег(rs.Fields("tduid").Value);
			НовСтр.КодОперации = rs.Fields("operation_type").Value * ?(rs.Fields("operation_type").Value < 0, -1, 1);
			НовСтр.КодПричиныСписания = rs.Fields("id_reason").Value;
			НовСтр.Дата = rs.Fields("opendate").Value;
			НовСтр.Проведен = rs.Fields("operation_type").Value > 0;
			НовСтр.Комментарий = СтрЗаменить(СокрЛП(rs.Fields("Descr").Value), "(из моб. приложения)", "");
			НовСтр.id_tov = rs.Fields("id_tov").Value;
			НовСтр.id_kontr = rs.Fields("id_kontr").Value;
			НовСтр.ДатаПроизводства = ?(rs.Fields("Date_proizv").Value < '2000-01-01', '00010101', rs.Fields("Date_proizv").Value);
			НовСтр.Количество = rs.Fields("Quantity").Value;
			
			// +++ АК mirv 08.12.2017 [ИП-00017151]
			НовСтр.ДокументИД = rs.Fields("Id_doc").Value;
			Если НовСтр.КодОперации = 101 Тогда
				СтрокаИД = ТабИД.Добавить();
				СтрокаИД.ДокументИД = НовСтр.ДокументИД;
			КонецЕсли; 
			// --- АК mirv  
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Id_tov", ТабВозврата.ВыгрузитьКолонку("id_tov"));
	Запрос.УстановитьПараметр("УиныСтроки", ТабВозврата.ВыгрузитьКолонку("УинОперации"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.id_tov В(&id_tov)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Владелец КАК Товар,
	               |	ХарактеристикиНоменклатуры.Ссылка,
	               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИдКонтр
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Владелец.id_tov В(&id_tov)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриложенныеКартинкиКСписаниямМагазины.УинСтроки,
	               |	КОЛИЧЕСТВО(ПриложенныеКартинкиКСписаниямМагазины.УинКартинки) КАК КолвоКартинок
	               |ИЗ
	               |	РегистрСведений.ПриложенныеКартинкиКСписаниямМагазины КАК ПриложенныеКартинкиКСписаниямМагазины
	               |ГДЕ
	               |	ПриложенныеКартинкиКСписаниямМагазины.УинСтроки В(&УиныСтроки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПриложенныеКартинкиКСписаниямМагазины.УинСтроки";
								  
	Результаты = Запрос.ВыполнитьПакет();
	ТабКешТовары = Результаты[0].Выгрузить();
	ТабКешХар = Результаты[1].Выгрузить();
	ТабКолвоФото = Результаты[2].Выгрузить();
	
	Для Каждого СтрокаВозв Из ТабВозврата Цикл
		СтрокаКешТов = ТабКешТовары.Найти(СтрокаВозв.id_tov, "id_tov");
		Если СтрокаКешТов <> Неопределено Тогда
			СтрокаВозв.Товар = Строка(СтрокаКешТов.Ссылка.УникальныйИдентификатор());
			СтрокиКешХар = ТабКешХар.НайтиСтроки(Новый Структура("Товар, ИдКонтр", СтрокаКешТов.Ссылка, СтрокаВозв.id_kontr));
			Если СтрокиКешХар.Количество() > 0 Тогда
				СтрокаВозв.Характеристика = Строка(СтрокиКешХар[0].Ссылка.УникальныйИдентификатор());
			КонецЕсли;	
		КонецЕсли;
		
		СтрокаКешКолвоФото = ТабКолвоФото.Найти(СтрокаВозв.УинОперации, "УинСтроки");
		Если СтрокаКешКолвоФото <> Неопределено Тогда
			СтрокаВозв.КолвоФото = СтрокаКешКолвоФото.КолвоКартинок;
		КонецЕсли;	
		
	КонецЦикла;	
	
	// +++ АК mirv 08.12.2017 [ИП-00017151]
	ТабИД.Свернуть("ДокументИД", "");
	Если ТабИД.Количество() > 0 Тогда
		
		СписокИД = Новый СписокЗначений;
		СписокИД.ЗагрузитьЗначения(ТабИД.ВыгрузитьКолонку("ДокументИД"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиДегустация.Сотрудник,
			|	СотрудникиДегустация.ИД,
			|	СотрудникиДегустация.Сотрудник.Код КАК СотрудникТабельныйНомер
			|ИЗ
			|	РегистрСведений.СотрудникиДегустация КАК СотрудникиДегустация
			|ГДЕ
			|	СотрудникиДегустация.ИД В(&ИД)";
		
	//	Запрос.УстановитьПараметр("ИД", ТабИД.ВыгрузитьКолонку("ДокументИД"));
		Запрос.УстановитьПараметр("ИД", СписокИД);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			СотрудникТабельныйНомер = ВыборкаДетальныеЗаписи.СотрудникТабельныйНомер;
			ОтборИД = Новый Структура("ДокументИД", ВыборкаДетальныеЗаписи.ИД);
			МассивОтбораИД = ТабВозврата.НайтиСтроки(ОтборИД);
			Для каждого СтрокаМассива Из МассивОтбораИД Цикл
				СтрокаМассива.СотрудникТабельныйНомер = СотрудникТабельныйНомер;
			КонецЦикла; 

		КонецЦикла;
		
	КонецЕсли; 
	// --- АК mirv  
	
	Возврат ТабВозврата;
	
КонецФункции	

//если УИНОперации передан пустой, значит записывается новая операция
//в Картинку можно передать неопределено

Функция ЗаписатьОперациюСписания(СтруктураЗаписи, УзелОбмена, ОписаниеОшибки = "", КартинкаСписания = Неопределено) Экспорт

	Магазин = УзелОбмена.Магазин;
	//
	
	УинОперации = СтруктураЗаписи.УинОперации;
	Проведен = СтруктураЗаписи.Проведен;
	КодОперации = СтруктураЗаписи.КодОперации;
	КодПричиныСписания = ?(НЕ ЗначениеЗаполнено(СтруктураЗаписи.КодПричиныСписания),0,СтруктураЗаписи.КодПричиныСписания);
	Комментарий = СтруктураЗаписи.Комментарий;
	Товар = СтруктураЗаписи.Номенклатура;
	Характеристика = СтруктураЗаписи.Характеристика;
	ДатаПроизводства = СтруктураЗаписи.ДатаПроизводства;
	Количество = СтруктураЗаписи.Количество;
	
	// +++ АК mirv 28.11.2017 [ИП-00016694]
	// Пока в попытке - после обновления МП - надо убрать
	Попытка
		СотрудникКод = СтруктураЗаписи.СотрудникТабельныйНомер;
	Исключение
	    СотрудникКод = "";
	КонецПопытки; 
	// --- АК mirv  
	
	Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
		ОписаниеОшибки = "Запись невозможна. Код операции не заполнен";
		Возврат Неопределено;
	КонецЕсли;	
	//+++АК BELN 2018.10.30 ИП-00020179
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапросаSQL = "select code_operation,name_operation,znak,is_photo
	|from SMS_REPL..Types_Operation as tpo with(nolock)
	|where table_operation='TD_move' and field_operation='operation_type_orig'";
	МасОп=Новый Массив;								
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof()  Цикл
			МасОп.Добавить(rs.Fields("code_operation").Value);
			rs.Movenext();
		КонецЦикла;  
		
	Исключение
	КонецПопытки;
	Если МасОп.Найти(КодОперации)=Неопределено Тогда
		ОписаниеОшибки = "Операция "+Строка(КодОперации)+" недопустима";
		Возврат Неопределено;
	
	КонецЕсли; 
	//---АК BELN 2018.10.30 
	
	//
	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Начало записи списания: " +  УинОперации + ". Проведено : " + Проведен);	
	//
	
	ПолныйТекстЗапроса = "";
	НомерМагазина = Магазин.НомерТочки;
	
	ДокументБылПроведен = Ложь;
	Если ПустаяСтрока(УинОперации) Тогда
		//+++АК BELN 2018.08.30 ИП-00019683
		Если КодОперации=201 Тогда
			ОписаниеОшибки = "Возврат покупателей запрещен для создания в моб. приложении";
			Возврат Неопределено;
		КонецЕсли; 
		//---АК BELN 2018.08.30 
		УинОперации = Строка(Новый УникальныйИдентификатор());
		УинДокумента = Строка(Новый УникальныйИдентификатор());
		ПолныйТекстЗапроса = "INSERT INTO [SMS_Repl].[dbo].[TD_move]
		|	(Id_doc, opendate, closedate, line_no, id_tov, operation_type, operation_type_orig, Quantity, CashierID, Confirm_type, tduid, ShopNo_rep)
		|VALUES (" + ВнешниеДанные.ФорматПоля(УинДокумента) + ", GETDATE(), '1900-01-01T00:00:00', 1, 0, " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", 0, 0, 0, " + ВнешниеДанные.ФорматПоля(УинОперации) + ", " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
		|)";
	Иначе
		//+++АК BELN 2018.09.11 ИП-00019765
		ТекстЗапросаSQL = "SELECT TD.id_doc
				|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
				| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
				|	and operation_type > 0";
		
		//ТекстЗапросаSQL = "SELECT TD.id_doc, max(operation_type) operation_type
		//		|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
		//		| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
		//		|	 group by TD.id_doc Having max(operation_type)>0";


		//---АК BELN 2018.09.11 
								
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		КолвоСтрокВДокументе = 0;
		Попытка
			rs.MoveFirst();
			Если НЕ rs.Eof() Тогда
				ОписаниеОшибки = "Документ уже проведен!";
				ДокументБылПроведен = Истина;
				Возврат Неопределено;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТекстЗапросаSQL = "SELECT TD.id_doc, COUNT(TD.line_no) as KolvoStrok, max(TD.closedate) closedate
				|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
				| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
				|GROUP BY TD.id_doc";
								
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	КолвоСтрокВДокументе = 0;
	//+++АК BELN 2018.09.19 
	ДатаЗакр=Дата(1,1,1);
	//---АК BELN 2018.09.19 
	Попытка
		rs.MoveFirst();
		Если НЕ rs.Eof() Тогда
			КолвоСтрокВДокументе = rs.Fields("KolvoStrok").Value;
			УинДокумента = rs.Fields("id_doc").Value;
			//+++АК BELN 2018.09.19 
			Если ЗначениеЗаполнено(rs.Fields("closedate").Value) Тогда
			
				ДатаЗакр=rs.Fields("closedate").Value;
			
			КонецЕсли; 
			//---АК BELN 2018.09.19 
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Если КолвоСтрокВДокументе > 1 Тогда
		УинДокумента = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	НоменклатураСпр.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ТекДата,
	               |				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НоменклатураСпр.Ссылка = &Товар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Владелец КАК Товар,
	               |	ХарактеристикиНоменклатуры.Ссылка,
	               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИдКонтр
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Ссылка = &Характеристика";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабТовары = Результаты[0].Выгрузить();
	ТабХарки = Результаты[1].Выгрузить();
	
	id_tov = 0;
	id_kontr = 0;
	Цена = 0;
	Если ТабТовары.Количество() > 0 Тогда
		id_tov = ТабТовары[0].id_tov;
		Цена = ТабТовары[0].Цена;
	КонецЕсли;	
	
	Если ТабХарки.Количество() > 0 Тогда
		id_kontr = ТабХарки[0].ИдКонтр;
	КонецЕсли;	
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + Символы.ПС + "
		|UPDATE [SMS_Repl].[dbo].[TD_move]
		|SET Id_doc = " + ВнешниеДанные.ФорматПоля(УинДокумента) + "
		|	, closedate = " + ?(Проведен, ?(ЗначениеЗаполнено(ДатаЗакр) И НЕ ДатаЗакр=Дата(1900,01,01),ВнешниеДанные.ФорматПоля(ДатаЗакр),"GETDATE()"), "'1900-01-01T00:00:00'") + "
		|	, line_no = 1
		|	, id_kontr = " + ВнешниеДанные.ФорматПоля(id_kontr) + "
		|	, id_tov = " + ВнешниеДанные.ФорматПоля(id_tov) + "
		|	, operation_type = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
		|	, operation_type_orig = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
		|	, Quantity = " + ВнешниеДанные.ФорматПоля(Количество) + "
		|	, CashierID = 0
		|	, Confirm_type = 0
		|	, id_reason = " + ВнешниеДанные.ФорматПоля(КодПричиныСписания) + "
		|	, Date_proizv = " + ВнешниеДанные.ФорматПоля(ДатаПроизводства, Истина) + "
		|	, Descr = " + ВнешниеДанные.ФорматПоля(СокрЛП(Комментарий) + "(из моб. приложения)") + "
		|	, ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
		|WHERE tduid = " + ВнешниеДанные.ФорматПоля(УинОперации);
		
	Если Проведен И КодОперации = 201 И Цена > 0
			И НЕ ДокументБылПроведен Тогда
		ЗапросКеш = ВнешниеДанные.СоставитьЗапросНаДобавление();
		ЗапросКеш = СтрЗаменить(ЗапросКеш, "[ИмяТаблицы]", "[Cash_Move]");
		ЗапросКеш = СтрЗаменить(ЗапросКеш, "(Поля)", "([id_doc]
			   |,[opendate]
			   |,[closedate]
			   |,[cash_id]
			   |,[operation_type]
			   |,[Cash_sum]
			   |,[CashierID]
			   |,[Confirm_type]
			   |,[Confirm_date]
			   |,[Confirm_reason]
			   |,[Descr]
			   |,[ShopNo_rep])");
		ЗапросКеш = СтрЗаменить(ЗапросКеш, "(Значения)", "(" + ВнешниеДанные.ФорматПоля(УинДокумента) + "
				|,GETDATE()
				|,GETDATE()
				|,0
				|,201
				|," + ВнешниеДанные.ФорматПоля(Цена*Количество) + "
				|,0
				|,0
				|,'1900-01-01T00:00:00'
				|,0
				|," + ВнешниеДанные.ФорматПоля("Создан по возврату покупателя (моб. приложение)") + "
				|," + ВнешниеДанные.ФорматПоля(НомерМагазина) + ")");
				
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + Символы.ПС + ЗапросКеш;		
	КонецЕсли;			
		
	ЗапросПолный = "declare @err int =1
					|while @err=1
					|begin
					| begin try
					|" + ПолныйТекстЗапроса + "
					|select @err=0
					| 
					| END TRY
					|  BEGIN CATCH
					| 
					|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
					|begin
					|-- запись в лог факта блокировки
					|	set @err=1
					|end
					|else
					|begin
					| 
					|-- прочая ошибка - выход  
					| return
					| end
					| 
					|  END CATCH 
					|end -- while";
	
	Попытка	
		ADOСоединение.Execute(ЗапросПолный);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	ТекстЗапросаSQL = "SELECT TD.opendate
				|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move))
				| WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + "
				|";
								
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	ДатаДок = '00010101';
	Попытка
		rs.MoveFirst();
		Если НЕ rs.Eof() Тогда
			ДатаДок = rs.Fields("opendate").Value;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Если ТипЗнч(КартинкаСписания) = Тип("Картинка") Тогда
		Расширение = "jpg";
		
		КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(КонстантаКаталог, 1) <> "\" Тогда
			КонстантаКаталог = КонстантаКаталог + "\";
		КонецЕсли;	
		
		ПодКаталог = "СписанияНаМагазинах\" + Формат(ТекущаяДата(), "ДФ=yyyyMM");
		
		СоздатьКаталог(КонстантаКаталог + ПодКаталог);
		
		УинКартинки = Строка(Новый УникальныйИдентификатор());
		
		КартинкаСписания.Записать(КонстантаКаталог + ПодКаталог + "\" + УинКартинки + "." + Расширение);
		
		Запись = РегистрыСведений.ПриложенныеКартинкиКСписаниямМагазины.СоздатьМенеджерЗаписи();
		Запись.УинСтроки = НРег(УинОперации);
		Запись.УинКартинки = НРег(УинКартинки);
		Запись.СтатусКартинки = 1;
		Запись.Магазин = Магазин;
		//Запись.ДатаОперации = ДатаСоздания;
		//Запись.ДобавилПользователь = ПараметрыСеанса.ТекущийПользователь;
		Запись.Расширение = Расширение;
		Запись.ДатаДобавленияЗаписи = ТекущаяДата();
		Запись.Записать();
		
		ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("ТипЗаписи, ОтносительноеИмяФайла, Расширение, Объект, УинЗаписи, Номенклатура, Характеристика, ТипОперацииМагазина, Магазин, Текст"
							, Перечисления.ТипыЗаписейПриложенныхКартинок.СписаниеНаМагазине, ПодКаталог + "\" + УинКартинки + "." + Расширение, Расширение, УинОперации, УинКартинки, Товар, Характеристика
							, КодОперации, Магазин, "Тип операции: " + КодОперации * ?(Проведен, 1, -1) + " Код причины списания: " + КодПричиныСписания + " Комментарий: " + Комментарий));
	КонецЕсли;	

	
	// +++ АК mirv 28.11.2017 [ИП-00016694]
	Попытка
		Если ЗначениеЗаполнено(СотрудникКод) Тогда
			Сотрудник = Справочники.ФизическиеЛица.НайтиПоКоду(СотрудникКод);
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				НоваяЗапись = РегистрыСведений.СотрудникиДегустация.СоздатьМенеджерЗаписи();
				НоваяЗапись.ИД = УинОперации;
				НоваяЗапись.Сотрудник = Сотрудник;
				НоваяЗапись.Период = НачалоДня(ТекущаяДата());
				НоваяЗапись.Записать(Истина);	
			КонецЕсли; 
		КонецЕсли; 
	Исключение
	    //ОписаниеОшибки()
	КонецПопытки; 	
	// --- АК mirv  
	
	//
	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Записано списание: " +  УинОперации + ". Проведено : " + Проведен);	
	//
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("УинОперации, Дата", НРег(УинОперации), ДатаДок);
	КонецЕсли;	
								
КонецФункции								

Процедура ДобавитьКартинкуКОперацииСписания(УинОперации, Магазин, КартинкаСписания) Экспорт
	
	Если ТипЗнч(КартинкаСписания) = Тип("Картинка") Тогда
		Расширение = "jpg";
		
		КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(КонстантаКаталог, 1) <> "\" Тогда
			КонстантаКаталог = КонстантаКаталог + "\";
		КонецЕсли;	
		
		ПодКаталог = "СписанияНаМагазинах\" + Формат(ТекущаяДата(), "ДФ=yyyyMM");
		
		СоздатьКаталог(КонстантаКаталог + ПодКаталог);
		
		УинКартинки = Строка(Новый УникальныйИдентификатор());
		
		КартинкаСписания.Записать(КонстантаКаталог + ПодКаталог + "\" + УинКартинки + "." + Расширение);
		
		Запись = РегистрыСведений.ПриложенныеКартинкиКСписаниямМагазины.СоздатьМенеджерЗаписи();
		Запись.УинСтроки = НРег(УинОперации);
		Запись.УинКартинки = НРег(УинКартинки);
		Запись.СтатусКартинки = 1;
		Запись.Магазин = Магазин;
		//Запись.ДатаОперации = ДатаСоздания;
		//Запись.ДобавилПользователь = ПараметрыСеанса.ТекущийПользователь;
		Запись.Расширение = Расширение;
		Запись.ДатаДобавленияЗаписи = ТекущаяДата();
		Запись.Записать();
		
		Попытка
			ADOСоединение = ПолучитьADOСоединение();
			ТекстЗапросаSQL = "SELECT TD.id_tov, TD.id_kontr, TD.operation_type, TD.id_reason, TD.Descr
					|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move))
					| WHERE TD.tduid = " + ФорматПоля(УинОперации) + "
					|";
									
			rs = ADOСоединение.Execute(ТекстЗапросаSQL);
			id_tov = 0;
			id_kontr = 0;
			operation_type = 0;
			id_reason = 0;
			Descr = "";
			Попытка
				rs.MoveFirst();
				Если НЕ rs.Eof() Тогда
					id_tov = rs.Fields("id_tov").Value;
					id_kontr = rs.Fields("id_kontr").Value;
					operation_type = rs.Fields("operation_type").Value;
					id_reason = rs.Fields("id_reason").Value;
					Descr = rs.Fields("Descr").Value;
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			ADOСоединение.Close();
			
			Если operation_type < 0 Тогда
				operation_type = operation_type * (-1);
			КонецЕсли;
			
			Номенк = Неопределено;
			Харка = Неопределено;
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("id_tov", id_tov);
			Запрос.УстановитьПараметр("ИД", id_kontr);
			Запрос.Текст = "ВЫБРАТЬ
			               |	Номенклатура.Ссылка КАК Номенклатура,
			               |	ВложенныйЗапрос.Ссылка КАК Характеристика
			               |ИЗ
			               |	Справочник.Номенклатура КАК Номенклатура
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |			ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
			               |		ИЗ
			               |			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			               |				ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
			               |					И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
			               |		ГДЕ
			               |			ХарактеристикиНоменклатуры.Владелец.id_tov = &id_tov
			               |			И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД = &ИД) КАК ВложенныйЗапрос
			               |		ПО (ИСТИНА)
			               |ГДЕ
			               |	Номенклатура.id_tov = &id_tov";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Номенк = Выборка.Номенклатура;
				Харка = Выборка.Характеристика;
			КонецЕсли;	
			
			ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("ТипЗаписи, ОтносительноеИмяФайла, Расширение, Объект, УинЗаписи, Номенклатура, Характеристика, ТипОперацииМагазина, Магазин, Текст"
								, Перечисления.ТипыЗаписейПриложенныхКартинок.СписаниеНаМагазине, ПодКаталог + "\" + УинКартинки + "." + Расширение, Расширение, УинОперации, УинКартинки, Номенк, Харка
								, operation_type, Магазин, "Тип операции: " + operation_type + " Код причины списания: " + id_reason + " Комментарий: " + СтрЗаменить(Descr, "(из моб. приложения)", "")));
		Исключение
		КонецПопытки;						
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдалитьОперациюСписания(УинОперации, ОписаниеОшибки = "") Экспорт
	
	ADOСоединение = ПолучитьADOСоединение();
	//+++АК BELN 2018.09.04 по просьбе Диговцевой
	//ТекстЗапросаSQL = "DELETE FROM [SMS_REPL].[dbo].[TD_move] WHERE tduid = " + ФорматПоля(УинОперации) + " and operation_type <= 0";
	ТекстЗапросаSQL = "DECLARE  @res int,
	|    @Msg varchar(1000)

	|EXEC  [SMS_REPL].[dbo].[FOR_1C_Delete_Td_move]
	|    @id_doc = null, —id_doc - идентификатор документа, для удаления всего документа.
	|    @tduid = " + ФорматПоля(УинОперации) + ", —tduid - идентификатор строки для удаления 1 записи.
	|    @User_1C = N'Пользователь 1С',
	|    @res = @res OUTPUT, —<0 -ошибка, >0 - успешно(количество удаленных строк)
	|    @Msg = @Msg OUTPUT  —сообщение, если успешно, то количество удаленных строк, если ошибка, то вывод ошибки.

	|SELECT  @res as N'@res',
	|    @Msg as N'@Msg'";
	//---АК BELN 2018.09.04 
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапросаSQL);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
		
	ADOСоединение.Close();
	
КонецПроцедуры

//конец Для веб-сервиса мобильного приложения
///////////////////////////////////////////////////////////////

//+++АК ZICD 11.01.2017 ИП-00014365
// Период - любая дата месяца, в котором требуется получить эффективность торговых точек по датам
Функция ПолучитьЭффективностьТорговыхТочек(Период) Экспорт
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	Результат.Колонки.Добавить("Дата",          Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("Эффективность", Новый ОписаниеТипов("Число"));
	
	ADOСоединение = ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "SELECT CAST(TTBin2UID.UID as nvarchar(50)) TTUid, olap.date date
					|	  ,SUM(olap.Эффективность) Эффективность
					|  FROM [OLAP].[dbo].[olap_v] (nolock) as olap
					|  LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID as TTBin2UID
					|	ON olap.id_tt = TTBin2UID.id_tt
					|WHERE olap.date >= " + ФорматПоля(НачалоМесяца(Период)) + " and olap.date <= " + ФорматПоля(КонецМесяца(Период)) + "
					|GROUP BY
					|CAST(TTBin2UID.UID as nvarchar(50)), olap.date";
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НовСтр = Результат.Добавить();
			НовСтр.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TTUid").Value));
			НовСтр.Дата          = rs.Fields("date").Value;
			НовСтр.Эффективность = rs.Fields("Эффективность").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	Возврат Результат;
	
КонецФункции
//---АК

// +++ АК mirv 14.12.2017 [ИП-00017362]
Функция ПроверитьСписаниеНаОбеды(СотрудникКод, НоменклатураУин) Экспорт
	
	// Сначала проверим номенклатуру
	Если Не ЗначениеЗаполнено(НоменклатураУин) Тогда
		Возврат "";
	КонецЕсли; 
	
	Номенклатура = Неопределено;
	Попытка
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураУин));	
	Исключение
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если Не ЗначениеЗаполнено(Номенклатура.Обед) Тогда
			Возврат Номенклатура.Наименование + " не принадлежит группе Обеды";
		КонецЕсли; 
	Иначе
		Возврат "";
	КонецЕсли;
	
	// Найдем сотрудника и документ (из МП может быть несколько значений ИД, т.к. оттуда приходит ИД операции)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиДегустация.ИД КАК УинОперации,
		|	СотрудникиДегустация.Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиДегустация КАК СотрудникиДегустация
		|ГДЕ
		|	СотрудникиДегустация.Сотрудник = &Сотрудник
		|	И СотрудникиДегустация.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	ТекСотрудник = Справочники.ФизическиеЛица.НайтиПоКоду(СотрудникКод);
	Запрос.УстановитьПараметр("Сотрудник", ТекСотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли; 
	
	ТабВидыОбеда = Новый ТаблицаЗначений;
	ТабВидыОбеда.Колонки.Добавить("ВидОбеда");
	ТабВидыОбеда.Колонки.Добавить("Количество");
	
	ТекстЗапросаSQL = "SELECT TD.opendate, TD.closedate, TD.id_tov, TD.id_kontr, CAST(CASE WHEN ISNULL(TD.Date_proizv, '1900-01-01') < '2000-01-01' THEN '1900-01-01' ELSE TD.Date_proizv END as datetime) as Date_proizv, TD.Quantity as Quantity, TD.operation_type
				|, TD.id_reason, CAST(TD.tduid as nvarchar(36)) as tduid, TD.Descr";
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекстЗапросаSQL = ТекстЗапросаSQL + "			
			|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE";
	Условие = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Условие = ?(ЗначениеЗаполнено(Условие), Условие + "	OR ", Условие) + 
					" TD.tduid = " + ФорматПоля(ВыборкаДетальныеЗаписи.УинОперации) + 
					" OR TD.Id_doc = " + ФорматПоля(ВыборкаДетальныеЗаписи.УинОперации);
	КонецЦикла;
	ТекстЗапросаSQL = ТекстЗапросаSQL + Условие;			
	
	ADOСоединение = ПолучитьADOСоединение();
								
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			
			ТекНоменклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", rs.Fields("id_tov").Value);	
			Количество 	 = rs.Fields("Quantity").Value;
			
			Если Количество = 0 Тогда
				Продолжить;
			КонецЕсли; 

			Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
				Если ЗначениеЗаполнено(ТекНоменклатура.Обед) Тогда
					НовСтр = ТабВидыОбеда.Добавить();
					НовСтр.ВидОбеда = ТекНоменклатура.Обед;
					НовСтр.Количество = 1;
				КонецЕсли; 
			КонецЕсли; 
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	НовСтр = ТабВидыОбеда.Добавить();
	НовСтр.ВидОбеда = Номенклатура.Обед;
	НовСтр.Количество = 1;
	
	
	ТабВидыОбеда.Свернуть("ВидОбеда", "Количество");
	
	Для каждого Строка Из ТабВидыОбеда Цикл
		Если Строка.Количество > 1 Тогда
			Возврат "Для сотрудника " + ТекСотрудник + " указано несколько одинаковых видов обеда " + Строка.ВидОбеда; 
		КонецЕсли; 
	КонецЦикла;        	
	
	Возврат "";    
	
КонецФункции
// --- АК mirv  
 
//+++АК Susk (Суслин К.В.) 2018.08.09 
Функция ПолучитьСтрокуПодключенияMSSQL(DataSource, InitialCatalog = "") Экспорт
	
	Логин = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ЛогинSQL");
	Пароль = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПарольSQL");
	
	Возврат "Provider=SQLOLEDB.1;Persist Security Info=True;" + ?(ЗначениеЗаполнено(InitialCatalog), "Initial Catalog=" + InitialCatalog + ";", "") + "Data Source=" + DataSource + ";Password=" + Пароль + ";User ID=" + Логин;
	
КонецФункции
 

