
Процедура ВыгрузкаЗаявок2_НДФЛ_В_ЗУП() Экспорт
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Зуп();	
	V82COMConnector= Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Зуп() + ".COMConnector");
	Попытка
		Base1С_ZUP = V82COMConnector.Connect(СтрокаПодключения);
	Исключение
		
		Возврат;
		//Предупреждение("Ошибка подключения!");
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаСправку2НДФЛ.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаСправку2НДФЛ КАК ЗаявкаНаСправку2НДФЛ
		|ГДЕ
		|	ЗаявкаНаСправку2НДФЛ.ВыгруженоВЗУП = ЛОЖЬ
		|	И ЗаявкаНаСправку2НДФЛ.ПометкаУдаления = ЛОЖЬ";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		лкТекДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Док_Com = Base1С_ZUP.Документы.ЗаявкаНаСправку2НДФЛ.СоздатьДокумент();
		Док_Com.Номер = лкТекДок.Номер;
		Док_Com.Дата = лкТекДок.Дата;
		Док_Com.Комментарий = лкТекДок.Комментарий;
		Док_Com.ОтветственныйЗаявитель = Строка(лкТекДок.Ответственный);
		
		Для каждого ТекСтр Из лкТекДок.ДанныеПоСотрудникам Цикл
		
			НоваяСтр = Док_Com.ДанныеПоСотрудникам.Добавить();
			ComОрганизация = Base1С_ZUP.Справочники.Организации.НайтиПоНаименованию(ТекСтр.Организация.Наименование);
			НоваяСтр.Организация = ComОрганизация;
			НоваяСтр.КоличествоЭкземпляров = ТекСтр.КоличествоЭкземпляров;
			

			Запрос = Base1С_ZUP.NewObject("Запрос");
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Организация = &Организация
			|	И ФизическиеЛица.Код = &Код";
			
			Запрос.УстановитьПараметр("Код", ТекСтр.Сотрудник.Код);
			Запрос.УстановитьПараметр("Организация", ComОрганизация);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				COM_ТекСотрудник = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;

			Если НЕ Base1С_ZUP.ЗначениеЗаполнено(COM_ТекСотрудник) Тогда
				Продолжить;
			КонецЕсли;	

			НоваяСтр.Сотрудник = COM_ТекСотрудник;
		    НоваяСтр.НалоговыйПериод = ТекСтр.НалоговыйПериод;
			НоваяСтр.ПлановаяДатаВыдачиСправки = ТекСтр.ПлановаяДатаВыдачиСправки;			
			
		КонецЦикла; 		
		
		Попытка 
			Док_Com.Записать();
			лкТекДок.ВыгруженоВЗУП = Истина;
			лкТекДок.ОбменДанными.Загрузка = Истина;
			лкТекДок.Записать();
		Исключение	
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассылкаОповещенийОбОтпусках() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПоОтпускамСотрудниковИзЗУП.Сотрудник,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.НомерПриказа,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.КонтактыЗаместителя,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.Заместитель,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.ДатаС,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.ДатаПо
		|ИЗ
		|	РегистрСведений.ДанныеПоОтпускамСотрудниковИзЗУП КАК ДанныеПоОтпускамСотрудниковИзЗУП
		|ГДЕ
		|	ДанныеПоОтпускамСотрудниковИзЗУП.ДатаС = &ДатаЗаНеделюДо
		|	И ДанныеПоОтпускамСотрудниковИзЗУП.````` = ЛОЖЬ";

	Запрос.УстановитьПараметр("ДатаЗаНеделюДо", НачалоДня(ТекущаяДата() + 604800));

	текЧас = Час(ТекущаяДата());
	Если текЧас > 10 И текЧас < 18 Тогда // утреннее письмо
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст,"`````", "ПисьмоОтправлено");
	ИначеЕсли текЧас > 18 И текЧас < 23 Тогда // вечернее письмо
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст,"`````", "ПисьмоОтправленоВечером");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоздатьПисьмо(ВыборкаДетальныеЗаписи);
	КонецЦикла;
		
КонецПроцедуры

Процедура СоздатьПисьмо(лкВыб)
	
	Заголовок = "Отпуск сотрудника: "+лкВыб.Сотрудник;
	ТекстПисьма = "Уважаемые коллеги!"+Символы.ПС+Символы.ПС
	+"В период с "+Формат(лкВыб.ДатаС,"ДЛФ=DD")+" по "+Формат(лкВыб.ДатаС,"ДЛФ=DD")+"  сотрудник "+лкВыб.Сотрудник+Символы.ПС	
	+" будет находиться в ежегодном отпуске. В период отсутствия работника просьба обращаться"+Символы.ПС
	+"к "+лкВыб.Заместитель+"("+СокрЛП(лкВыб.КонтактыЗаместителя)+")."+Символы.ПС	
	+"С уважением, отдел кадров компании Избенка.";
	
	// создаём письмо  ///////////////////////////////////////////////////////////	
	Адрес = "";
	
	//Для каждого ТекСтрСписка Из СписокАдресатов Цикл
	//	
	//	Если Адрес = "" Тогда
	//		Адрес = ТекСтрСписка.Значение;	
	//	Иначе
	//		Адрес = Адрес + ", " + ТекСтрСписка.Значение;
	//	КонецЕсли;
	//	
	//КонецЦикла;
		
	Отправитель = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Адрес = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000021");
	Адрес = Адрес.АдресЭлектроннойПочты;
	
	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	Письмо.НеВыдаватьСообщенияПриЗаписиОбъекта = Истина;
	Письмо.Кому = Адрес;
	Письмо.ЗаголовокПисьма = Заголовок;
	Письмо.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Письмо.УчетнаяЗапись = Отправитель;
	Письмо.ОтправительАдресЭлектроннойПочты = Отправитель.АдресЭлектроннойПочты;
	Письмо.Дата = ТекущаяДата();
	Письмо.ТекстПисьма = ТекстПисьма;
	Письмо.Тема = Заголовок;
	Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	Письмо.КодировкаПисьма = "utf-8";
		
	НоваяСтр = Письмо.КомуТЧ.Добавить();
	НоваяСтр.АдресЭлектроннойПочты = Адрес;
	Письмо.АК_ОбратныйАдрес = Адрес; 
	
	ОтправитьПисьмо(Письмо, лкВыб);	
	
КонецПроцедуры

// Процедура инициирует отправку письма.
//
Процедура ОтправитьПисьмо(ТекПисьмо, лкВыб)
	
	ШапкаСообщения = "Не отправлено: " + Строка(ТекПисьмо);
	
	Если ТекПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ ТекПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекПисьмо.Кому) Тогда
		//ОбщегоНазначения.СообщитьОбОшибке("Не указан ни один получатель.",, ШапкаСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТекПисьмо.ПометкаУдаления Тогда
		//ОбщегоНазначения.СообщитьОбОшибке("Нельзя отправлять помеченное на удаление письмо.",, ШапкаСообщения);
		Возврат;
	КонецЕсли;
	
	ТекПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
	Если НЕ ЗначениеЗаполнено(ТекПисьмо.Ответственный) Тогда
		ТекПисьмо.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли; 
	
	Попытка
		ТекПисьмо.Записать();
		//Сообщить("Записан новый документ: "+ТекПисьмо.Ссылка);
	Исключение
		//ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаСообщения);
		Возврат;
	КонецПопытки;
	
	//Для каждого СтрокаТаблицы Из Объект.ВложенныеФайлы Цикл
	//	
	//	НовыйОбъект = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	//	НовыйОбъект.Объект                 = ТекПисьмо.Ссылка;
	//	НовыйОбъект.ИмяФайла               = СтрокаТаблицы.ИмяФайла;
	//	НовыйОбъект.Наименование = ТекПисьмо.Ссылка;
	//	
	//	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.СсылкаНаФайл);
	//	НовыйОбъект.Хранилище              = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
	//	
	//	Попытка
	//		НовыйОбъект.Записать();
	//	Исключение
	//		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, Строка(Объект));
	//		Отказ = Истина;
	//		Прервать;
	//	КонецПопытки;
	//	
	//КонецЦикла;
	
	УчетныеЗаписи = Новый Массив;
	УчетныеЗаписи.Добавить(ТекПисьмо.УчетнаяЗапись);
	Письма = Новый Соответствие;
	Письма.Вставить(ТекПисьмо.Ссылка, ТекПисьмо);
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
	//Сообщить("Список получателей: "+ТекПисьмо.Кому);
	//Сообщить("Отправка завершена.");
			
	Набор = РегистрыСведений.ДанныеПоОтпускамСотрудниковИзЗУП.СоздатьНаборЗаписей();
	Набор.Отбор.Сотрудник.Установить(лкВыб.Сотрудник);
	Набор.Отбор.НомерПриказа.Установить(лкВыб.НомерПриказа);
	Набор.Прочитать();
	текЧас = Час(ТекущаяДата());
	Для каждого ТекСтрНабора Из Набор Цикл
						
		Если текЧас > 10 И текЧас < 18 Тогда 
			ТекСтрНабора.ПисьмоОтправлено = Истина;
		ИначеЕсли текЧас > 18 И текЧас < 23 Тогда 
			ТекСтрНабора.ПисьмоОтправленоВечером = Истина;
		КонецЕсли;	
 
 	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры



//Pans 2017.08.17 ИП-00015757
// Описание:
// Функция устанавливает Внешнее соединение с рабочей ИБ ЗУП
//
// Параметры:
// Без параметров
//
// Возвращаемое значение:
// Внешнее соединение
//
// В случае успешного соединения возвращается установленное внешнее соединение,
// если же соединение установить не удалось, то возвращается Неопределено
// 
//
Функция ПолучитьСоединениеСЗУПом() Экспорт

	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Зуп();	
	КОМКоннектор = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Зуп() + ".COMConnector");
	Попытка
		Соединение = КОМКоннектор.Connect(СтрокаПодключения);
		Возврат Соединение;
	Исключение
		Возврат Неопределено; 
	КонецПопытки;

КонецФункции // ()

//Pans 2017.08.17 ИП-00015757
// Описание:
// Функция получает данные о лицевых счетах действующих сотрудников из ЗУПа 
//
// Параметры:
// Без параметров
//
// Возвращаемое значение:
// Таблица значений, содержащая данные о лиц. счетах физ. лиц в ЗУПе.
// Если в процессе подключения произошла ошибка, то функция возвращает Неопределено
//
Функция ПолучитьТЗЛицевыхСчетовСотрудниковИзЗУПа()

	КОМ_ЗУП = ПолучитьСоединениеСЗУПом();
	Если КОМ_ЗУП = Неопределено Тогда
		Сообщить(НСтр("ru = 'Не удалось установить соединение с ЗУП-ом. Заполнение данных невозможно!'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗЛицСчетов = Новый ТаблицаЗначений;
	ТЗЛицСчетов.Колонки.Добавить("КодФизЛица", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)));
	//ТЗЛицСчетов.Колонки.Добавить("ИННОрганизации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	ТЗЛицСчетов.Колонки.Добавить("НомерЛицевогоСчета", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТЗЛицСчетов.Колонки.Добавить("НаименованиеБанка", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТЗЛицСчетов.Колонки.Добавить("КодБанка", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9)));
	ТЗЛицСчетов.Колонки.Добавить("БИК", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)));
	
	КодыБанковЛС = КОМ_ЗУП.NewObject("Массив");
	КодыБанковЛС.Добавить("З55000018"); // первая буква "З", а не цифра 3
	КодыБанковЛС.Добавить("З55000019"); // первая буква "З", а не цифра 3
	
	ТекстЗапросаВЗУПе = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Физлицо
	|ПОМЕСТИТЬ ФизЛица
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.ПометкаУдаления = ЛОЖЬ
	|	И СотрудникиОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизЛица.Физлицо.Код КАК КодФизЛица,
	|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	МАКСИМУМ(ЛицевыеСчетаРаботниковОрганизации.Банк.Код) КАК КодБанка,
	|	ЛицевыеСчетаРаботниковОрганизации.Банк.ОсновнойБанковскийСчет.Банк.Код КАК БИК
	|ПОМЕСТИТЬ ВТ2
	|ИЗ
	|	ФизЛица КАК ФизЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
	|		ПО ФизЛица.Физлицо = ЛицевыеСчетаРаботниковОрганизации.ФизЛицо
	|ГДЕ
	|	ЛицевыеСчетаРаботниковОрганизации.Банк.Код В(&КодыБанковЛС)
	|	И ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизЛица.Физлицо.Код,
	|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета,
	|	ЛицевыеСчетаРаботниковОрганизации.Банк.ОсновнойБанковскийСчет.Банк.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ2.КодФизЛица,
	|	ВТ2.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	ВТ2.КодБанка,
	|	Контрагенты.Наименование КАК НаименованиеБанка,
	|	ВТ2.БИК
	|ИЗ
	|	ВТ2 КАК ВТ2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ2.КодБанка = Контрагенты.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЛицевогоСчета,
	|	НаименованиеБанка";
	
	Запрос1 = КОМ_ЗУП.NewObject("Запрос");
	Запрос1.Текст = ТекстЗапросаВЗУПе;
	Запрос1.УстановитьПараметр("КодыБанковЛС", КодыБанковЛС);
	Рез1 = Запрос1.Выполнить();
		
	Выб1 = Рез1.Выбрать();
	Пока Выб1.Следующий() Цикл
		СтрокаТЗЛС = ТЗЛицСчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗЛС, Выб1);
	КонецЦикла;
	
	Возврат ТЗЛицСчетов;

КонецФункции

//Pans 2017.08.18 ИП-00015757
// Описание:
// Функция формирует структуру с ключами из колонок результата запроса и значениями
// из элемента выборки. Необходимо для передачи немутабельного значения на сервер
//
// Параметры:
// РезультатЗапроса
// Тип - РезультатЗапроса
// Результат запроса, необходим для формирования ключей структуры
// 
// ВыборкаИзЗапроса
// Тип - ВыборкаИзЗапроса
// Элемент выборки, необходим для заполнения значений структуры
//
// Возвращаемое значение:
// Тип - Структура
// Структура, содержащая все поля и значения элементы выборки. Имена ключей структуры соответствуют 
// именам полей в выборке
Функция ПолучитьСтруктуруИзВыборки(РезультатЗапроса, ВыборкаИзЗапроса)

	СтрРез = Новый Структура;
	Для каждого Кол1 Из РезультатЗапроса.Колонки Цикл
		СтрРез.Вставить(Кол1.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтрРез, ВыборкаИзЗапроса);
	
	Возврат СтрРез;

КонецФункции // ()


//Pans 2017.08.17 ИП-00015757
// Описание:
// Функция заполняет счета физ. лиц. данными о лицевых счетах действующих сотрудников из ЗУПа
//
// Параметры:
// Количество
// Число
// Ограничение на количество добавляемых счетов. Если 0, то без ограничений
//
// Возвращаемое значение:
// Неопределено, Массив
// Неопределено, если функция отработала нормально
// Массив со значениями типа Строка - ошибки в процессе выполнения функции
Функция ЗаполнитьЛицевыеСчетаФизЛицДаннымиИзЗУПа(Количество = 0) Экспорт
	
	Ошибки = Новый Массив;
	//Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеЛицевыхСчетовФизЛиц, Ложь) Тогда
	//	Ошибки.Добавить("У вас нет права редактирования лицевых счетов физ лиц");
	//	#Если Клиент Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У вас нет права редактирования лицевых счетов физ лиц");
	//	#КонецЕсли
	//	Возврат Ошибки;
	//КонецЕсли;
		
	//Если ПравоДоступа("Изменение", Метаданные.Справочники.БанковскиеСчета) Тогда
	//
	//	
	//
	//КонецЕсли;
	//	Сообщить(НСтр("ru = 'Создание лицевых счетов успешно завершено'"));
	
	
	
	Ограничение = "";
	ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
	
	#Если Клиент Тогда
	Состояние("Получение данных из ЗУПа");
	#КонецЕсли
	
	ТЗЛицСчетов = ПолучитьТЗЛицевыхСчетовСотрудниковИзЗУПа();
	
	#Если Клиент Тогда
	Состояние("Подготовка к заполнению данных");
	#КонецЕсли
	
	Если ТЗЛицСчетов <> Неопределено Тогда
		Запрос1 = Новый Запрос;
		Запрос1.Текст = 
		"ВЫБРАТЬ
		|	ТЗЛицСчетов.КодФизЛица,
		|	ТЗЛицСчетов.НомерЛицевогоСчета,
		|	ТЗЛицСчетов.НаименованиеБанка,
		|	ТЗЛицСчетов.БИК
		|ПОМЕСТИТЬ ЛицСчетаИзЗУПа
		|ИЗ
		|	&ТЗЛицСчетов КАК ТЗЛицСчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100500
		|	ФизическиеЛица.Ссылка КАК ФизЛицо,
		|	ЛицСчетаИзЗУПа.НомерЛицевогоСчета,
		|	ЛицСчетаИзЗУПа.КодФизЛица,
		|	ЛицСчетаИзЗУПа.БИК,
		|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
		|	Банки.Ссылка КАК Банк,
		|	ЛицСчетаИзЗУПа.НаименованиеБанка
		|ИЗ
		|	ЛицСчетаИзЗУПа КАК ЛицСчетаИзЗУПа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ПО ЛицСчетаИзЗУПа.НомерЛицевогоСчета = БанковскиеСчета.НомерСчета
		|			И (БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица)
		|			И (БанковскиеСчета.Владелец.Код = ЛицСчетаИзЗУПа.КодФизЛица)
		|			И ЛицСчетаИзЗУПа.БИК = БанковскиеСчета.Банк.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ЛицСчетаИзЗУПа.КодФизЛица = ФизическиеЛица.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|		ПО ЛицСчетаИзЗУПа.БИК = Банки.Код
		|ГДЕ
		|	БанковскиеСчета.Ссылка ЕСТЬ NULL
		|	И НЕ ФизическиеЛица.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	БанковскийСчет УБЫВ"; // сначала все ВВ счета, потом ЛУГ
		
		Если Количество > 0 Тогда
			Запрос1.Текст = СтрЗаменить(Запрос1.Текст, "ПЕРВЫЕ 100500", "ПЕРВЫЕ " + Формат(Количество, "ЧГ=0"));
		Иначе
			Запрос1.Текст = СтрЗаменить(Запрос1.Текст, "ПЕРВЫЕ 100500", "");
		КонецЕсли;
		
		Запрос1.УстановитьПараметр("ТЗЛицСчетов", ТЗЛицСчетов);
		
		Рез1 = Запрос1.Выполнить();
		
		Если Рез1.Пустой() Тогда
			#Если Клиент Тогда
			Сообщить(НСтр("ru = 'Новых лицевых счетов к загрузке не найдено'"));
			#КонецЕсли
			Возврат Неопределено;
		КонецЕсли;
		
		////+++ БЛОК ДЛЯ ТЕСТИРОВАНИЯ. УДАЛИТЬ!!!
		//ТЗ1 = Рез1.Выгрузить();
		//Сообщить("Получено - " + ТЗ1.Количество());
		//ОткрытьЗначение(ТЗ1);
		//ВОЗВРАТ Неопределено;
		////--- БЛОК ДЛЯ ТЕСТИРОВАНИЯ. УДАЛИТЬ!!!
		
		
		Выб1 = Рез1.Выбрать();
		ВсегоВыбрано = Выб1.Количество();
		Сч1 = 0;
		
		Пока Выб1.Следующий() Цикл
			Сч1 = Сч1 + 1;
			#Если Клиент Тогда
			Состояние("Запись данных. Выполнено " + Сч1 + " из " + ВсегоВыбрано);
			#КонецЕсли
						
			СП1 = ПолучитьСтруктуруИзВыборки(Рез1, Выб1);
			СП1.Вставить("Валюта", ВалютаРуб);
			СпрСсылка = ОбменС_ЗУП_Сервер.ЗаполнитьБанкСчетНаСервере(СП1);
			
			#Если Клиент Тогда
			СтрокаСообщения = "Записан счет " + СпрСсылка.НомерСчета + " для " + СпрСсылка.Владелец;
			Сообщить(НСтр("ru = '" + СтрокаСообщения + "'"));
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
		КонецЦикла;
		
	Иначе
		Ошибки.Добавить("Не удалось подключиться к базе ЗУП!");
	КонецЕсли;
	
	Если Ошибки.Количество() = 0 Тогда
		#Если Клиент Тогда
		Сообщить(НСтр("ru = 'Создание лицевых счетов успешно завершено'"));
		#КонецЕсли
		Возврат Неопределено;
	Иначе
		#Если Клиент Тогда
		Сообщить(НСтр("ru = 'Создание лицевых счетов завершилось с ошибками:'"), СтатусСообщения.Важное);
		Для каждого Эл1 Из Ошибки Цикл
			Сообщить(НСтр("ru = '" + Эл1 + "'"));
		КонецЦикла;
		#КонецЕсли
		Возврат Ошибки;
	КонецЕсли;

КонецФункции

//+++АК POZM 2018.05.23 ИП-00018026.01 
Процедура ОбменСЗупПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Истина);	
	Узел = ПланыОбмена.ОбменСЗУП.НайтиПоКоду("ЗУП"); 
		
	Если Узел.Пустая()Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.АК_АктПриемаПередачиТМЦСотруднику") Тогда
		
		Источник.ОбменДанными.Получатели.Добавить(Узел);			
		
	КонецЕсли;	
КонецПроцедуры
//---АК POZM 	

