
////////////////////////////////////////////////////////////////             
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьСтрокуПараметровЗапроса(Параметры, access_token) Экспорт
	
	СтрокаПараметров = "";
	Для каждого Параметр Из Параметры Цикл
		Если ЗначениеЗаполнено(Параметр.Значение) Тогда
			//СтрокаПараметров = СтрокаПараметров + Параметр.Ключ + "=" + РаботаСВнешнимВебСервером.URLEncode(Параметр.Значение) + "&";
			СтрокаПараметров = СтрокаПараметров + Параметр.Ключ + "=" +
				?(ТипЗнч(Параметр.Значение)=Тип("Число"), Формат(Параметр.Значение, "ЧГ=0"), Параметр.Значение) + "&"
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПараметров = СтрокаПараметров + "access_token=" + access_token;
	
	Возврат СтрокаПараметров;
	
КонецФункции

Функция СформироватьТекстОшибкиAPI(ОписаниеОшибки, ОтветСервера) Экспорт
	
	ТекстОшибки = ОписаниеОшибки;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки + ": ";
	КонецЕсли;
	
	//error_msg = "";
	//Если ОтветСервера.Свойство("message", error_msg) Тогда
	//	Если ЗначениеЗаполнено(error_msg) Тогда
	//		ТекстОшибки = ТекстОшибки + error_msg + " (Код: " + ОтветСервера.code + ")";
	//	Иначе
	//		ТекстОшибки = ТекстОшибки + "Код = " + ОтветСервера.code;
	//	КонецЕсли;
	//КонецЕсли;
	ТекстОшибки = ТекстОшибки + СформироватьСтрокуПараметровЗапроса(ОтветСервера, "");
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПрочитатьОтветAPI(ИмяФайла, УдалитьФайл=Истина)
	
	Ответ = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ЛокальноеИмя = "response" Тогда
		// нормальный ответ - заполним все поля
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Ответ.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ЛокальноеИмя = "error" Тогда
		// ошибка - считаем только данные об ошибке
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "error_code" ИЛИ
				ЧтениеXML.ЛокальноеИмя = "error_msg"
			Тогда
				Ответ.Вставить(ЧтениеXML.ЛокальноеИмя, РаботаСВнешнимВебСервером.ПолучитьЗначениеУзлаXML(ЧтениеXML));
			Иначе
				РаботаСВнешнимВебСервером.ПропуститьЭлементXML(ЧтениеXML);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Если УдалитьФайл Тогда
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ ОБРАЩЕНИЯ К FACEBOOK GRAPH API

Функция ВызватьМетодAPI(ИмяМетода, Параметры, access_token, Метод = "GET", ИспользоватьWinHTTP=Истина) Экспорт
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	
	Если Не ИспользоватьWinHTTP Тогда
		
		// Не на всех системах корректно работает HTTPСоединение по защищенному протоколу SSL
		// (ошибка SSL connection error). Поэтому рекомендуется использовать COM объект WinHTTP
		
		Соединение = Новый HTTPСоединение("graph.facebook.com",,,,, Истина);
		
		Соединение.Получить("" + ИмяМетода + "?" +
					?(ТипЗнч(Параметры) = Тип("Строка"), Параметры + ?(ЗначениеЗаполнено(Параметры), "&", "") + "access_token="+access_token,
					СформироватьСтрокуПараметровЗапроса(Параметры, access_token)),
					ИмяВыходногоФайла);
					
	Иначе
					
		АдресСервера = "https://graph.facebook.com/" + ИмяМетода + "?" +
					?(ТипЗнч(Параметры) = Тип("Строка"), Параметры + ?(ЗначениеЗаполнено(Параметры), "&", "") + "access_token="+access_token,
					СформироватьСтрокуПараметровЗапроса(Параметры, access_token));
					
		Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		Соединение.Open(Метод, АдресСервера);
		Соединение.Send();
		
		//ЗаписьТекста = Новый ЗаписьТекста(ИмяВыходногоФайла);
		//ЗаписьТекста.Записать(Соединение.ResponseText());
		//ЗаписьТекста.Закрыть();
		Возврат Соединение.ResponseText();
		
	КонецЕсли;
	
	//Если ОтветВВидеФайла Тогда
	//	Возврат ИмяВыходногоФайла;
	//КонецЕсли;
	
	Возврат ПрочитатьОтветAPI(ИмяВыходногоФайла);
	
КонецФункции

////////////////////////////////////////////////////////////////
// МЕТОДЫ РАБОТЫ С ПАРАМЕТРАМИ (в т.ч. access_token)
#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Функция ПолучитьЗначениеПараметра(ИмяПараметра) Экспорт
	Возврат РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(Справочники.ИсточникиОбращений.Facebook, ИмяПараметра);
КонецФункции

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Функция access_tokenПолучить() Экспорт
	
	Возврат ПолучитьЗначениеПараметра("access_token");
	
КонецФункции

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра) Экспорт
	РегистрыСведений.ПараметрыРаботыССоцСетями.УстановитьЗначениеПараметра(Справочники.ИсточникиОбращений.Facebook, ИмяПараметра, ЗначениеПараметра);
КонецПроцедуры

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура access_tokenУстановить(access_token) Экспорт
	УстановитьЗначениеПараметра("access_token", access_token);
КонецПроцедуры

////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ РАБОТЫ СО СТЕНОЙ

Функция РазместитьЗаписьНаСтене(access_token, page_id, message, ПараметрыЗапроса="") Экспорт
	
	Если ПараметрыЗапроса = "" Тогда
		ПараметрыЗапроса = Новый Структура();
	КонецЕсли;
	ПараметрыЗапроса.Вставить("message", message);
	
	ОтветСервера = ВызватьМетодAPI("" + page_id + "/feed", ПараметрыЗапроса, access_token, "POST");
	
	СтруктураОтвет = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ОтветСервера);
	Если СтруктураОтвет.Свойство("error") Тогда
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при размещении публикации", СтруктураОтвет.error);
	КонецЕсли;
	
	Возврат СтруктураОтвет;
	
КонецФункции

////////////////////////////////////////////////////////////////             
// ПРОЦЕДУРЫ РАБОТЫ С КОММЕНТАРИЯМИ

Функция ПрочитатьПубликацииПосетителей(access_token, page_id, ПараметрыЗапроса="") Экспорт
	
	Если ПараметрыЗапроса = "" Тогда
		ПараметрыЗапроса = Новый Структура();
	КонецЕсли;
	
	ОтветСервера = ВызватьМетодAPI("" + page_id + "/tagged", ПараметрыЗапроса, access_token);
	
	СтруктураОтвет = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ОтветСервера);
	Если СтруктураОтвет.Свойство("error") Тогда
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при получении публикаций", СтруктураОтвет.error);
	КонецЕсли;
	
	Возврат СтруктураОтвет;
	
КонецФункции

Функция ДобавитьКомментарийКЗаписиНаСтене(Знач access_token, post_id, message, ПараметрыЗапроса="") Экспорт
	
	Если ПараметрыЗапроса = "" Тогда
		ПараметрыЗапроса = Новый Структура();
	КонецЕсли;
	ПараметрыЗапроса.Вставить("message", message);
	
	РазмещатьЗаписиОтСообщества = ПолучитьЗначениеПараметра("РазмещатьЗаписиОтСообщества");
	РазмещатьЗаписиОтСообщества = (ТипЗнч(РазмещатьЗаписиОтСообщества) = Тип("Булево") И РазмещатьЗаписиОтСообщества = Истина);
	
	community_id = ПолучитьЗначениеПараметра("community_id");
	РазмещатьЗаписиОтСообщества = (РазмещатьЗаписиОтСообщества И ЗначениеЗаполнено(community_id));
	
	Если РазмещатьЗаписиОтСообщества Тогда
		ОтветСервера = ВызватьМетодAPI("me/accounts", Новый Структура, access_token);
		СтруктураОтвет = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ОтветСервера);
		
		Если СтруктураОтвет.Свойство("data") Тогда
			
			МассивУчёток = СтруктураОтвет.data;
			Для Каждого Учётка Из МассивУчёток Цикл
				
				Если Учётка.id = community_id Тогда
					access_token = Учётка.access_token;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли СтруктураОтвет.Свойство("error") Тогда
		КонецЕсли;

	КонецЕсли;
	
	ОтветСервера = ВызватьМетодAPI("" + post_id + "/comments", ПараметрыЗапроса, access_token, "POST");
	
	СтруктураОтвет = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ОтветСервера);
	Если СтруктураОтвет.Свойство("error") Тогда
		ВызватьИсключение СформироватьТекстОшибкиAPI("Произошла ошибка при размещении публикации", СтруктураОтвет.error);
	КонецЕсли;
	
	Возврат СтруктураОтвет;
	
КонецФункции

////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ПРОЦЕДУРЫ
#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура ЗагрузкаОбращенийПокупателейИзПубликацийПосетителей() Экспорт
	
	ИсточникОбращения = Справочники.ИсточникиОбращений.Facebook;
	
	access_token = ПолучитьЗначениеПараметра("access_token");
	Если access_token = Неопределено Тогда Возврат; КонецЕсли;
	
	page_id = ПолучитьЗначениеПараметра("page_id");
	Если page_id = Неопределено Тогда Возврат; КонецЕсли;
	
	СсылкаНаСайт = "https://www.facebook.com/";
	СмещениеВЧасах = ПолучитьЗначениеПараметра("СмещениеВЧасах");
	СмещениеВСекундах = ?(СмещениеВЧасах = Неопределено, Неопределено, СмещениеВЧасах * 3600);
	
	ДатаПоследнейПубликации = ПолучитьЗначениеПараметра("ДатаПоследнейПубликации");
	ДатаПоследнейПубликации = ?(ТипЗнч(ДатаПоследнейПубликации) = Тип("Дата"), ДатаПоследнейПубликации, Дата(1, 1, 1));
	
	Параметры = Новый Структура("locale,fields", "ru_RU", "id,message,created_time,from");
	
	//Попытка
		СтруктураВозврата = ПрочитатьПубликацииПосетителей(access_token, page_id, Параметры);
		МассивКомментариев = СтруктураВозврата.data;
		
		// считываем записи с конца
		КвоЗаписей = МассивКомментариев.ВГраница();
		Если КвоЗаписей = -1 Тогда Возврат; КонецЕсли;
		
		Для Сч = 0 По КвоЗаписей Цикл
			
			СтруктураКомментарий = МассивКомментариев[КвоЗаписей - Сч];
			
			// пропускаем комментарии без текста
			Если НЕ СтруктураКомментарий.Свойство("message") Тогда Продолжить; КонецЕсли;
			
			// "2016-07-12T14:35:46+0000"
			ДатаПубликации = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтруктураКомментарий.created_time, "-", ""), ":", ""), "T", "");
			ДатаПубликации = Дата(Лев(ДатаПубликации, 14));
			ДатаПубликации = ?(СмещениеВСекундах = Неопределено, МестноеВремя(ДатаПубликации), ДатаПубликации + СмещениеВСекундах);
			Если ДатаПубликации <= ДатаПоследнейПубликации Тогда Продолжить; КонецЕсли;
			
			Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
			Запись.GUID_Загрузки = Новый УникальныйИдентификатор();
			Запись.ДатаДок = ДатаПубликации;
			Запись.ИсточникОбращения = ИсточникОбращения;
			
			Запись.Примечание = СокрЛП(СтруктураКомментарий.message);
			id_post = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтруктураКомментарий.id, "_");
			Запись.СсылкаНаСайт = СсылкаНаСайт + id_post[0] + "/posts/" + id_post[1];
			
			Профиль = СтруктураКомментарий.from;
			ФИО_Покупателя = ?(Профиль.Свойство("name"), Профиль["name"], Неопределено);
			Если ФИО_Покупателя <> Неопределено Тогда
				Запись.ФИО_Покупателя = ФИО_Покупателя;
			КонецЕсли;
			
			Запись.id_OK = РегистрыСведений.ОбращенияПокупателей.ПолучитьСледующийid_OK();
			Запись.Записать();
			
			УстановитьЗначениеПараметра("ДатаПоследнейПубликации", ДатаПубликации);
			
		КонецЦикла;
		
	//Исключение
	//	Сообщить("Ошибка чтения записей со стены: " + ОписаниеОшибки());
	//КонецПопытки;
	
КонецПроцедуры

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура Обновить_access_token() Экспорт
	
КонецПроцедуры
