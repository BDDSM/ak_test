Функция ВыполнитьЗапрос(Запрос,Текст)
	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить()
КонецФункции
Функция ЭтоСчетРасчетовСКонтрагентами(Счет)
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь
	КонецЕсли;
	
	Возврат (Счет.Родитель = ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками
				ИЛИ Счет.Родитель = ПланыСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами);
			
КонецФункции

Функция РасчетыПоАренде(Документ) Экспорт
	
	Если Документ.Метаданные().Реквизиты.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		Если ЗначениеЗаполнено(Документ.СтатьяДвиженияДенежныхСредств)Тогда
			Возврат Лев(Документ.СтатьяДвиженияДенежныхСредств.Код, 4) = "1310"  //Расчеты по аренде
		Иначе
			Возврат Ложь
		КонецЕсли;
	Иначе
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

Функция РасчетыПоАрендеПоСтатье(Статья) Экспорт
	
	Если ЗначениеЗаполнено(Статья) Тогда
		Возврат Лев(Статья.Код, 4) = "1310"  //Расчеты по аренде
	Иначе
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

Функция НеКонтролироватьДебЗадолженность(Документ)Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")Тогда
		
		Для Каждого СтрокаТТ Из Документ.ТорговыеТочки Цикл
			Если ЗначениеЗаполнено(СтрокаТТ.Сделка) Тогда
				Возврат Истина;
			КонецЕсли
		КонецЦикла;
		
	КонецЕсли;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходИзБанка")Тогда
		Если ТипЗнч(Документ.ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.СделкаСПоставщиком")Тогда
			Возврат Истина
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//+++АК SUVV 2018.02.28 ИП-00017941
//Функция СчетРасчетовПоСтатьеДДС(СтатьяДДС) Экспорт
//	
//	Выборка = РегистрыСведений.СоответствияСтатейСчетов.Выбрать(Новый Структура("СтатьяДДС", СтатьяДДС));
//	Если Выборка.Следующий()Тогда
//		Возврат Выборка.Счет
//	Иначе
//		Возврат ПланыСчетов.Финансовый.ПустаяСсылка()
//	КонецЕсли;
//	
//КонецФункции
Функция СчетРасчетовПоСтатьеДДС(ВыбДата, СтатьяДДС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбДата", НачалоДня(ВыбДата));
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСтатейСчетов.Счет
	|ИЗ
	|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
	|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий()Тогда
		Возврат Выборка.Счет;
	Иначе
		Возврат ПланыСчетов.Финансовый.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 
//---АК SUVV


Функция СчетРасчетов(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		Результат  = ДокументСсылка.АК_СчетУчетаРасчетов;
		Если ЗначениеЗаполнено(Результат)Тогда
			Возврат Результат
		КонецЕсли;
		//+++АК SUVV 2018.02.28 ИП-00017941
		//Результат = СчетРасчетовПоСтатьеДДС(ДокументСсылка.СтатьяДвиженияДенежныхСредств);
		Результат = СчетРасчетовПоСтатьеДДС(ДокументСсылка.Дата, ДокументСсылка.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнен регистр Соответствите статей и счетов для статьи ДДС "+ДокументСсылка.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		Возврат Результат
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы")Тогда
		
		Возврат ДокументСсылка.СчетУчетаРасчетов;
		
	Иначе
		
		Возврат ДокументСсылка.СчетУчетаРасчетовСКонтрагентом
		
	КонецЕсли
КонецФункции

Функция ВыборкаНезакрытыеЗаявки() Экспорт

	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредств.Ссылка КАК Заявка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	НЕ ЗаявкаНаРасходованиеСредств.Ссылка В
	|				(ВЫБРАТЬ
	|					РасходИзБанка.ЗаявкаНаРасходованиеСредств КАК Заявка
	|				ИЗ
	|					Документ.РасходИзБанка КАК РасходИзБанка
	|				ГДЕ
	|					РасходИзБанка.Оплачено
	|					И РасходИзБанка.Проведен)
	|	И НЕ ЗаявкаНаРасходованиеСредств.Ссылка В
	|				(ВЫБРАТЬ
	|					РасходИзКассы.ЗаявкаНаРасходованиеСредств КАК Заявка
	|				ИЗ
	|					Документ.РасходИзКассы КАК РасходИзКассы
	|				ГДЕ
	|					РасходИзКассы.Проведен)";

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция СоздатьСтруктуруЛДЗ (Выборка)
	
	Результат = Новый Структура("Ссылка, СуммаКОплате, ДоступныйЛимит, Ответственный, ПревышениеЛимита");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Результат.Ссылка 		= Выборка.Документ;
	Результат.СуммаКОплате 	= Выборка.СуммаДокумента;
	
	Возврат Результат
	
КонецФункции

Функция ДоступныеЛимитыДЗ(МассивДокументов, НаДату = Неопределено,ДанныеДокумента=Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",НаДату);
	Запрос.УстановитьПараметр("ПериодЛимита",КонецДня(НаДату));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок",МассивДокументов);
	
	Если ДанныеДокумента = Неопределено Тогда
	
		Запрос.Текст=
		//+++АК SUVV 2018.02.20 ИП-00017941
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредств.Контрагент,
		|	ЗаявкаНаРасходованиеСредств.СуммаДокумента,
		|	ЗаявкаНаРасходованиеСредств.Ссылка,
		|	ЗаявкаНаРасходованиеСредств.Организация,
		|	ЗаявкаНаРасходованиеСредств.Дата
		|ПОМЕСТИТЬ ВТ_ЗаявкиНаРасходованиеДС
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаявкиНаРасходованиеДС.Контрагент,
		|	ВТ_ЗаявкиНаРасходованиеДС.СуммаДокумента,
		|	ВТ_ЗаявкиНаРасходованиеДС.Ссылка,
		|	ВТ_ЗаявкиНаРасходованиеДС.Организация,
		|	ВТ_ЗаявкиНаРасходованиеДС.Дата,
		|	МАКСИМУМ(СоответствияСтатейСчетов.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_ЗаявкиНаРасходованиеДССМаксПериодом
		|ИЗ
		|	ВТ_ЗаявкиНаРасходованиеДС КАК ВТ_ЗаявкиНаРасходованиеДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		|		ПО ВТ_ЗаявкиНаРасходованиеДС.Дата >= СоответствияСтатейСчетов.Период
		|			И ВТ_ЗаявкиНаРасходованиеДС.Ссылка.СтатьяДвиженияДенежныхСредств = СоответствияСтатейСчетов.СтатьяДДС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЗаявкиНаРасходованиеДС.Контрагент,
		|	ВТ_ЗаявкиНаРасходованиеДС.Ссылка,
		|	ВТ_ЗаявкиНаРасходованиеДС.Организация,
		|	ВТ_ЗаявкиНаРасходованиеДС.Дата,
		|	ВТ_ЗаявкиНаРасходованиеДС.СуммаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодом.Контрагент,
		|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодом.СуммаДокумента,
		|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодом.Ссылка,
		|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодом.Организация,
		|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодом.Дата,
		|	СоответствияСтатейСчетов.Счет
		|ПОМЕСТИТЬ ВТ_ЗаявкиНаРасходованиеДССоСчетом
		|ИЗ
		|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодом КАК ВТ_ЗаявкиНаРасходованиеДССМаксПериодом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		|		ПО ВТ_ЗаявкиНаРасходованиеДССМаксПериодом.МаксПериод = СоответствияСтатейСчетов.Период
		|			И ВТ_ЗаявкиНаРасходованиеДССМаксПериодом.Ссылка.СтатьяДвиженияДенежныхСредств = СоответствияСтатейСчетов.СтатьяДДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Контрагент,
		|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.СуммаДокумента,
		|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Счет КАК СчетРасчетов,
		|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Ссылка КАК Ссылка,
		|	NULL КАК Заявка,
		|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Организация,
		|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Дата
		|ПОМЕСТИТЬ ВТДокументы
		|ИЗ
		|	ВТ_ЗаявкиНаРасходованиеДССоСчетом КАК ВТ_ЗаявкиНаРасходованиеДССоСчетом
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходИзБанка.Контрагент,
		|	РасходИзБанка.СуммаДокумента,
		|	РасходИзБанка.СчетУчетаРасчетовСКонтрагентом,
		|	РасходИзБанка.Ссылка,
		|	РасходИзБанка.ЗаявкаНаРасходованиеСредств,
		|	РасходИзБанка.Организация,
		|	РасходИзБанка.Дата
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	РасходИзБанка.Ссылка В(&МассивСсылок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходИзКассы.Контрагент,
		|	РасходИзКассы.СуммаДокумента,
		|	РасходИзКассы.СчетУчетаРасчетовСКонтрагентом,
		|	РасходИзКассы.Ссылка,
		|	РасходИзКассы.ЗаявкаНаРасходованиеСредств,
		|	РасходИзКассы.Организация,
		|	РасходИзКассы.Дата
		|ИЗ
		|	Документ.РасходИзКассы КАК РасходИзКассы
		|ГДЕ
		|	РасходИзКассы.Ссылка В(&МассивСсылок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Контрагент,
		|	СУММА(ВложенныйЗапрос.СуммаОплаты - ЕСТЬNULL(РасчетыПоЗаявкамНаУслугиМатериалыОбороты.СуммаРасход, 0)),
		|	ВложенныйЗапрос.СчетУчетаРасчетов,
		|	ВложенныйЗапрос.Ссылка,
		|	NULL,
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.Дата
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка КАК Ссылка,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент КАК Контрагент,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		|		СУММА(ЗаявкаНаУслугиМатериалыОплата.СуммаОплаты) КАК СуммаОплаты,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация КАК Организация,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата КАК Дата
		|	ИЗ
		|		Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
		|	ГДЕ
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка В(&МассивСсылок)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация,
		|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Обороты(, &Период, Регистратор, Заявка В (&МассивСсылок)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОбороты
		|		ПО ВложенныйЗапрос.Ссылка = РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Заявка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.СчетУчетаРасчетов,
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.Дата";
		//"ВЫБРАТЬ
		//|	ЗаявкаНаРасходованиеСредств.Контрагент,
		//|	ЗаявкаНаРасходованиеСредств.СуммаДокумента,
		//|	ВЫБОР
		//|		КОГДА ЗаявкаНаРасходованиеСредств.АК_СчетУчетаРасчетов = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
		//|			ТОГДА ЕСТЬNULL(СоответствияСтатейСчетов.Счет, ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка))
		//|		ИНАЧЕ ЗаявкаНаРасходованиеСредств.АК_СчетУчетаРасчетов
		//|	КОНЕЦ КАК СчетРасчетов,
		//|	ЗаявкаНаРасходованиеСредств.Ссылка КАК Ссылка,
		//|	NULL КАК Заявка,
		//|	ЗаявкаНаРасходованиеСредств.Организация,
		//|	ЗаявкаНаРасходованиеСредств.Дата
		//|ПОМЕСТИТЬ ВТДокументы
		//|ИЗ
		//|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
		//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			СоответствияСтатейСчетов.СтатьяДДС КАК СтатьяДДС,
		//|			МАКСИМУМ(СоответствияСтатейСчетов.Счет) КАК Счет
		//|		ИЗ
		//|			РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		//|		
		//|		СГРУППИРОВАТЬ ПО
		//|			СоответствияСтатейСчетов.СтатьяДДС) КАК СоответствияСтатейСчетов
		//|		ПО ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств = СоответствияСтатейСчетов.СтатьяДДС
		//|ГДЕ
		//|	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивСсылок)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	РасходИзБанка.Контрагент,
		//|	РасходИзБанка.СуммаДокумента,
		//|	РасходИзБанка.СчетУчетаРасчетовСКонтрагентом,
		//|	РасходИзБанка.Ссылка,
		//|	РасходИзБанка.ЗаявкаНаРасходованиеСредств,
		//|	РасходИзБанка.Организация,
		//|	РасходИзБанка.Дата
		//|ИЗ
		//|	Документ.РасходИзБанка КАК РасходИзБанка
		//|ГДЕ
		//|	РасходИзБанка.Ссылка В(&МассивСсылок)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	РасходИзКассы.Контрагент,
		//|	РасходИзКассы.СуммаДокумента,
		//|	РасходИзКассы.СчетУчетаРасчетовСКонтрагентом,
		//|	РасходИзКассы.Ссылка,
		//|	РасходИзКассы.ЗаявкаНаРасходованиеСредств,
		//|	РасходИзКассы.Организация,
		//|	РасходИзКассы.Дата
		//|ИЗ
		//|	Документ.РасходИзКассы КАК РасходИзКассы
		//|ГДЕ
		//|	РасходИзКассы.Ссылка В(&МассивСсылок)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ВложенныйЗапрос.Контрагент,
		//|	СУММА(ВложенныйЗапрос.СуммаОплаты - ЕСТЬNULL(РасчетыПоЗаявкамНаУслугиМатериалыОбороты.СуммаРасход, 0)),
		//|	ВложенныйЗапрос.СчетУчетаРасчетов,
		//|	ВложенныйЗапрос.Ссылка,
		//|	NULL,
		//|	ВложенныйЗапрос.Организация,
		//|	ВложенныйЗапрос.Дата
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка КАК Ссылка,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент КАК Контрагент,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		//|		СУММА(ЗаявкаНаУслугиМатериалыОплата.СуммаОплаты) КАК СуммаОплаты,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация КАК Организация,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата КАК Дата
		//|	ИЗ
		//|		Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
		//|	ГДЕ
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка В(&МассивСсылок)
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация,
		//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата) КАК ВложенныйЗапрос
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Обороты(, &Период, Регистратор, Заявка В (&МассивСсылок)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОбороты
		//|		ПО ВложенныйЗапрос.Ссылка = РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Заявка
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ВложенныйЗапрос.Ссылка,
		//|	ВложенныйЗапрос.Контрагент,
		//|	ВложенныйЗапрос.СчетУчетаРасчетов,
		//|	ВложенныйЗапрос.Организация,
		//|	ВложенныйЗапрос.Дата
		//|;";
		//---АК SUVV
		
		Запрос.Выполнить();
	//";
	Иначе
		Для Каждого Поле из ДанныеДокумента Цикл
			Запрос.УстановитьПараметр(Поле.Ключ,Поле.Значение)
		КонецЦикла;
		Запрос.Текст =
			"ВЫБРАТЬ
	       |	&Контрагент,
	       |	&СчетРасчетов,
	       |	&Организация,
	       |	&Ссылка,
	       |	&СуммаДокумента,
	       |	&Заявка,
	       |	&Дата
	       |ПОМЕСТИТЬ ВТДокументы";
		Запрос.Выполнить();
		
	КонецЕсли;

	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ЕстьNULL(ВТДокументы.Дата,ДатаВремя(1,1,1))) КАК ПерваяДата
		|ИЗ
		|	ВТДокументы КАК ВТДокументы";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДаты = РезультатЗапроса.Выбрать();
	Если ВыборкаДаты.Следующий() Тогда
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(ВыборкаДаты.ПерваяДата))
	Иначе
		Возврат Результат
	КонецЕсли;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.РазделУчета,
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Контрагент,
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Сумма КАК Лимит,
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Организация
	|ПОМЕСТИТЬ ВТЛимиты
	|ИЗ
	|	РегистрСведений.АК_ЛимитыДебиторскойЗадолженности.СрезПервых(
	|			&ПериодЛимита,
	|			(Контрагент, РазделУчета) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Контрагент,
	|					Т.СчетРасчетов
	|				ИЗ
	|					ВТДокументы КАК Т)) КАК АК_ЛимитыДебиторскойЗадолженностиСрезПервых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Контрагент,
	|	ВТДокументы.СчетРасчетов,
	|	ВТДокументы.Организация
	|ПОМЕСТИТЬ ВТТребуемыеРазделы
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДокументы.Контрагент,
	|	ВТДокументы.СчетРасчетов,
	|	ВТДокументы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Ссылка КАК Документ,
	|	МАКСИМУМ(ВТДокументы.СуммаДокумента) КАК СуммаДокумента,
	|	МАКСИМУМ(ЕСТЬNULL(ВТЛимиты.Лимит, 0)) КАК Лимит,
	|	ВТДокументы.Контрагент КАК Контрагент,
	|	ВТДокументы.СчетРасчетов КАК СчетРасчетов,
	|	ВТДокументы.Ссылка.Ответственный КАК Ответственный,
	|	ВТДокументы.Организация КАК Организация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаДолга, 0) > 0
	|				ТОГДА ВложенныйЗапрос.СуммаДолга
	|			ИНАЧЕ ВложенныйЗапрос.СуммаДолга
	|		КОНЕЦ) КАК СуммаДолга
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛимиты КАК ВТЛимиты
	|		ПО ВТДокументы.Контрагент = ВТЛимиты.Контрагент
	|			И ВТДокументы.СчетРасчетов = ВТЛимиты.РазделУчета
	|			И ВТДокументы.Организация = ВТЛимиты.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Контрагент КАК Контрагент,
	|			ВложенныйЗапрос.СчетРасчетов КАК СчетРасчетов,
	|			СУММА(ВложенныйЗапрос.СуммаДолга) КАК СуммаДолга,
	|			ВложенныйЗапрос.Организация КАК Организация
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВТТребуемыеРазделы.Контрагент КАК Контрагент,
	|				ВТТребуемыеРазделы.СчетРасчетов КАК СчетРасчетов,
	|				СУММА(ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0)) КАК СуммаДолга,
	|				ВТТребуемыеРазделы.Организация КАК Организация
	|			ИЗ
	|				ВТТребуемыеРазделы КАК ВТТребуемыеРазделы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Остатки(
	|							&Период,
	|							Счет В
	|								(ВЫБРАТЬ
	|									Т.СчетРасчетов
	|								ИЗ
	|									ВТТребуемыеРазделы КАК Т),
	|							,
	|							(Субконто1, Субконто2) В
	|								(ВЫБРАТЬ
	|									Т.Организация,
	|									Т.Контрагент
	|								ИЗ
	|									ВТТребуемыеРазделы КАК Т)) КАК ФинансовыйОстатки
	|					ПО ВТТребуемыеРазделы.Организация = ФинансовыйОстатки.Субконто1
	|						И ВТТребуемыеРазделы.СчетРасчетов = ФинансовыйОстатки.Счет
	|						И ВТТребуемыеРазделы.Контрагент = ФинансовыйОстатки.Субконто2
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТТребуемыеРазделы.Контрагент,
	|				ВТТребуемыеРазделы.СчетРасчетов,
	|				ВТТребуемыеРазделы.Организация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				АК_СуммыКОплатеОстатки.Контрагент,
	|				АК_СуммыКОплатеОстатки.РазделУчета,
	|				СУММА(АК_СуммыКОплатеОстатки.СуммаКОплатеОстаток),
	|				ВТТребуемыеРазделы.Организация
	|			ИЗ
	|				ВТТребуемыеРазделы КАК ВТТребуемыеРазделы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АК_СуммыКОплате.Остатки(
	|							&Период,
	|							(Контрагент, разделучета, Заявка.Организация) В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									Т.Контрагент,
	|									Т.СчетРасчетов,
	|									Т.Организация
	|								ИЗ
	|									ВТТребуемыеРазделы КАК Т)) КАК АК_СуммыКОплатеОстатки
	|					ПО ВТТребуемыеРазделы.Контрагент = АК_СуммыКОплатеОстатки.Контрагент
	|						И ВТТребуемыеРазделы.СчетРасчетов = АК_СуммыКОплатеОстатки.РазделУчета
	|						И ВТТребуемыеРазделы.Организация = АК_СуммыКОплатеОстатки.Заявка.Организация
	|			
	|			СГРУППИРОВАТЬ ПО
	|				АК_СуммыКОплатеОстатки.Контрагент,
	|				АК_СуммыКОплатеОстатки.РазделУчета,
	|				ВТТребуемыеРазделы.Организация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Контрагент,
	|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.СчетУчетаРасчетов,
	|				СУММА(РасчетыПоЗаявкамНаУслугиМатериалыОстатки.СуммаОстаток),
	|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Организация
	|			ИЗ
	|				РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Остатки(
	|						&Период,
	|						(Заявка.Контрагент, Заявка.СчетУчетаРасчетов, Заявка.Организация) В
	|							(ВЫБРАТЬ
	|								Т.Контрагент,
	|								Т.СчетРасчетов,
	|								Т.Организация
	|							ИЗ
	|								ВТТребуемыеРазделы КАК Т)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОстатки
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Контрагент,
	|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.СчетУчетаРасчетов,
	|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Организация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				-ФинансовыйДвиженияССубконто.Сумма,
	|				ВТДокументы.Организация
	|			ИЗ
	|				ВТДокументы КАК ВТДокументы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|							&НачалоПериода,
	|							&Период,
	|							(СчетДт, Субконто1, Субконто2) В
	|									(ВЫБРАТЬ
	|										Т.СчетРасчетов,
	|										Т.Организация,
	|										Т.Контрагент
	|									ИЗ
	|										ВТТребуемыеРазделы КАК Т)
	|								И Регистратор В (&МассивСсылок),
	|							,
	|							) КАК ФинансовыйДвиженияССубконто
	|					ПО ВТДокументы.Ссылка = ФинансовыйДвиженияССубконто.Регистратор
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				ВТДокументы.Организация,
	|				-ФинансовыйДвиженияССубконто.Сумма
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				СУММА(-АК_СуммыКОплатеОбороты.СуммаКОплатеОборот),
	|				ВТДокументы.Организация
	|			ИЗ
	|				ВТДокументы КАК ВТДокументы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АК_СуммыКОплате.Обороты(
	|							&НачалоПериода,
	|							&Период,
	|							Регистратор,
	|							(Заявка.Организация, Контрагент, РазделУчета) В
	|								(ВЫБРАТЬ
	|									Т.Организация,
	|									Т.Контрагент,
	|									Т.СчетРасчетов
	|								ИЗ
	|									ВТТребуемыеРазделы КАК Т)) КАК АК_СуммыКОплатеОбороты
	|					ПО ВТДокументы.Ссылка = АК_СуммыКОплатеОбороты.Регистратор
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				ВТДокументы.Организация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				СУММА(-РасчетыПоЗаявкамНаУслугиМатериалыОбороты.СуммаОборот),
	|				ВТДокументы.Организация
	|			ИЗ
	|				ВТДокументы КАК ВТДокументы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Обороты(
	|							&НачалоПериода,
	|							&Период,
	|							Регистратор,
	|							Заявка В (&МассивСсылок)
	|								ИЛИ Заявка В
	|									(ВЫБРАТЬ
	|										Т.Заявка
	|									ИЗ
	|										ВТДокументы КАК Т)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОбороты
	|					ПО ВТДокументы.Ссылка = РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Регистратор
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				ВТДокументы.Организация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				СУММА(ВЫБОР
	|						КОГДА (ВТДокументы.Ссылка ССЫЛКА Документ.РасходИзБанка)
	|								ИЛИ (ТипЗначения(ВТДокументы.Ссылка)= Тип(Документ.РасходИзКассы))
	|							ТОГДА ВЫБОР ВТДокументы.Заявка
	|									КОГДА  NULL Тогда 0 Когда Неопределено Тогда 0 
	|									Когда Значение(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка) Тогда 0
	|									Когда Значение(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка) Тогда 0
	|									Иначе -ВТДокументы.СуммаДокумента
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ),
	|				ВТДокументы.Организация
	|			ИЗ
	|				ВТДокументы КАК ВТДокументы
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				ВТДокументы.Организация) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Контрагент,
	|			ВложенныйЗапрос.СчетРасчетов,
	|			ВложенныйЗапрос.Организация) КАК ВложенныйЗапрос
	|		ПО ВТДокументы.Контрагент = ВложенныйЗапрос.Контрагент
	|			И ВТДокументы.Организация = ВложенныйЗапрос.Организация
	|			И ВТДокументы.СчетРасчетов = ВложенныйЗапрос.СчетРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДокументы.Ссылка,
	|	ВТДокументы.Контрагент,
	|	ВТДокументы.СчетРасчетов,
	|	ВТДокументы.Ссылка.Ответственный,
	|	ВТДокументы.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТДокументы.Ссылка.Дата
	|ИТОГИ
	|	СУММА(СуммаДокумента),
	|	МАКСИМУМ(Лимит),
	|	МАКСИМУМ(СуммаДолга)
	|ПО
	|	Контрагент,
	|	Организация,
	|	СчетРасчетов";
	
	РезультатЗапроса = Запрос.Выполнить();
	

	Если НЕ РезультатЗапроса.Пустой()Тогда
		ВыборкаКонтрагенты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагенты.Следующий()Цикл
			ВыборкаОрганизации = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОрганизации.Следующий() Цикл
				ВыборкаСчета = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСчета.Следующий() Цикл
					ВыборкаДокументы = ВыборкаСчета.Выбрать();
					Если ВыборкаСчета.СуммаДолга+ВыборкаСчета.СуммаДокумента<=ВыборкаСчета.Лимит Тогда
						Пока ВыборкаДокументы.Следующий()Цикл
							Данные = СоздатьСтруктуруЛДЗ(ВыборкаДокументы);
							Данные.ДоступныйЛимит = ВыборкаДокументы.СуммаДокумента;
							Данные.ПревышениеЛимита = 0;
							Результат.Добавить(Данные)
						КонецЦикла;
					ИначеЕсли ВыборкаСчета.СуммаДолга>=ВыборкаСчета.Лимит Тогда
						ТекущееПревышение=ВыборкаСчета.СуммаДолга-ВыборкаСчета.Лимит;
						Пока ВыборкаДокументы.Следующий()Цикл
							Данные = СоздатьСтруктуруЛДЗ(ВыборкаДокументы);
							Данные.ДоступныйЛимит = 0;
							ТекущееПревышение=ТекущееПревышение+ВыборкаДокументы.СуммаДокумента;
							Данные.ПревышениеЛимита = ТекущееПревышение;
							Результат.Добавить(Данные)
						КонецЦикла;
					Иначе
						ТекущийЛимит = ВыборкаСчета.Лимит-ВыборкаСчета.СуммаДолга;
						Пока ВыборкаДокументы.Следующий() Цикл
							Данные = СоздатьСтруктуруЛДЗ(ВыборкаДокументы);
							Данные.ДоступныйЛимит = Макс(0,Мин(ТекущийЛимит,ВыборкаДокументы.СуммаДокумента));
							Результат.Добавить(Данные);
							ТекущийЛимит = ТекущийЛимит - ВыборкаДокументы.СуммаДокумента;
							Данные.ПревышениеЛимита = Макс(0,-ТекущийЛимит);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Процедура СформироватьДвиженияСуммыКОплате(ДокументСсылка, Движения, Отказ = Ложь) Экспорт
	
	//Движения = ДокументСсылка.Движения;
	Движения.АК_СуммыКОплате.Записывать = Истина;
	Движения.АК_СуммыКОплате.Очистить();
	СчетРасчетов = СчетРасчетов(ДокументСсылка);
	Если НЕ ЭтоСчетРасчетовСКонтрагентами(СчетРасчетов) Тогда
		Возврат
	КонецЕсли;
	Если НеКонтролироватьДебЗадолженность(ДокументСсылка) Тогда
		Возврат
	КонецЕсли;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходИзБанка")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		
		Если ЗначениеЗаполнено(ДокументСсылка.ЗаявкаНаРасходованиеСредств)
			И ТипЗнч(ДокументСсылка.ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")Тогда
			//Проверяем движения Заявки, если проведено по другому счету, то сторнируем
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	АК_СуммыКОплатеОстатки.РазделУчета КАК Счет,
			|	АК_СуммыКОплатеОстатки.СуммаКОплатеОстаток КАК Сумма
			|ИЗ
			|	РегистрНакопления.АК_СуммыКОплате.Остатки(&Период, Заявка = &Заявка) КАК АК_СуммыКОплатеОстатки";
			Запрос.УстановитьПараметр("Период",КонецДня(ДокументСсылка.Дата));
			Запрос.УстановитьПараметр("Заявка",ДокументСсылка.ЗаявкаНаРасходованиеСредств);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой()Тогда
		        Возврат
			КонецЕсли;
			Выборка = РезультатЗапроса.Выбрать();
			Если Не Выборка.НайтиСледующий(Новый Структура("Счет",ДокументСсылка.СчетУчетаРасчетовСКонтрагентом)) Тогда
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл
					Движение = Движения.АК_СуммыКОплате.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.РазделУчета = Выборка.Счет;
					Движение.Период = ДокументСсылка.Дата;
					Движение.Контрагент = ДокументСсылка.Контрагент;
					Движение.Заявка = ДокументСсылка.ЗаявкаНаРасходованиеСредств;
					Движение.СуммаКОплате = -Выборка.Сумма;
				КонецЦикла;
				Движение = Движения.АК_СуммыКОплате.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.РазделУчета = ДокументСсылка.СчетУчетаРасчетовСКонтрагентом;
				Движение.Период = ДокументСсылка.Дата;
				Движение.Контрагент = ДокументСсылка.Контрагент;
				Движение.Заявка = ДокументСсылка.ЗаявкаНаРасходованиеСредств;
				Движение.СуммаКОплате = ДокументСсылка.СуммаДокумента;
			КонецЕсли;
			
			Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.РасходИзБанка")Тогда
				Если НЕ ДокументСсылка.Оплачено Тогда
					Возврат
				КонецЕсли;
			КонецЕсли;
			
			ДокументЗаявка = ДокументСсылка.ЗаявкаНаРасходованиеСредств;
			ВидДвижения = ВидДвиженияНакопления.Расход;
			
		Иначе
			Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.РасходИзБанка")Тогда
				Если ДокументСсылка.Оплачено Тогда
					Возврат
				Иначе
					ДокументЗаявка = ДокументСсылка;
					ВидДвижения = ВидДвиженияНакопления.Приход
				КонецЕсли;
			Иначе
			    Возврат
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументЗаявка = ДокументСсылка;
		ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	//
	Движение = Движения.АК_СуммыКОплате.Добавить();
	Движение.ВидДвижения 	= ВидДвижения;
	Движение.РазделУчета 	= СчетРасчетов;
	Движение.Период 		= ДокументСсылка.Дата;
	Движение.Контрагент 	= ДокументСсылка.Контрагент;
	Движение.Заявка 		= ДокументЗаявка;
	Движение.СуммаКОплате 	= ДокументСсылка.СуммаДокумента;
	Движения.АК_СуммыКОплате.Записать();
	
КонецПроцедуры

Функция КонтролироватьДЗ(Документ) Экспорт
	
	Возврат (ЭтоСчетРасчетовСКонтрагентами(СчетРасчетов(Документ))
				И НЕ РасчетыПоАренде(Документ)
				И НЕ НеКонтролироватьДебЗадолженность(Документ));
	
КонецФункции

Функция ПроводитьПоРегиструСО(Документ)
	
КонецФункции

Процедура ОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если НЕ Отказ Тогда
		Движения = Источник.ПолучитьОбъект().Движения;
		Если Движения.Найти("АК_СуммыКОплате") <> Неопределено Тогда
			СформироватьДвиженияСуммыКОплате(Источник, Движения, Отказ)
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Функция ТекстХТМЛТаблицаДокументов(ТаблицаДанных)
	
	ТекстХТМЛ = "<table border><tr align='center'><td>Документ</td><td>Контрагент</td><td>Сумма к оплате</td><td>Превышение лимита</td></tr>";

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		ТекстХТМЛ = ТекстХТМЛ + "<tr>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Документ) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Документ.Контрагент) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.СуммаКОплате) + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.СуммаПревышения, "ЧГ=") + "</td>";
		ТекстХТМЛ = ТекстХТМЛ + "</tr>";
	КонецЦикла;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Функция СтруктураТаблицыУведомлений()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("СуммаКОплате"		, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ДоступныйЛимит"	, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СуммаПревышения"	, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Ответственный");
	
	Возврат ТЗ
	
КонецФункции

Процедура СформироватьУведомленияПоЗаявкамКОплате(НаДату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка КАК Заявка,
	|	РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Остатки(&НаДату, ) КАК РасчетыПоЗаявкамНаУслугиМатериалыОстатки
	|ГДЕ
	|	РасчетыПоЗаявкамНаУслугиМатериалыОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	МассивСсылок = ТЗ.ВыгрузитьКолонку("Заявка");
	ДанныеДляУведомлений = ДоступныеЛимитыДЗ(МассивСсылок, НаДату);
	ТабЗаявок = СтруктураТаблицыУведомлений();
	Для Каждого Строка Из ДанныеДляУведомлений Цикл
		Если Строка.СуммаКОплате > Строка.ДоступныйЛимит Тогда
			СтрТаб = ТабЗаявок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТаб, Строка);
			СтрТаб.Документ = Строка.Ссылка;
			СтрТаб.СуммаПревышения = Строка.СуммаКОплате - Строка.ДоступныйЛимит;
		КонецЕсли;
	КонецЦикла;
	ТЗ.Свернуть("Ответственный");
	Менеджеры = ТЗ.ВыгрузитьКолонку("Ответственный");
	Для Каждого Менеджер Из Менеджеры Цикл
		Заявки = ТабЗаявок.НайтиСтроки(Новый Структура("Ответственный", Менеджер));
		Если Заявки<>Неопределено Тогда
			Получатели = Новый Массив;
			Получатели.Добавить(Менеджер);
			ОтправитьУведомление(Получатели, Заявки, НаДату, Ложь);
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

//Раков П.С ++
Процедура Сформировать_ЕженедельнаяРассылкаПДЗ(Должность) Экспорт
	
	Результат = новый ТаблицаЗначений;

	//Отчет = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам_РасчетыСКонтрагентами.Создать();
	//+++АК bara 15.11.17    16682.02
	Отчет = Отчеты.АК_ОтчетПоДебиторскойЗадолженности_ПоДокументам_РасчетыСКонтрагентами_Минусы.Создать();
	//---
	
	СхемаКомпоновкиДанных = Отчет.СхемаКомпоновкиДанных;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;

	Настройки =Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	Пар = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("Период"));
	Пар.Использование = истина;
	Пар.Значение = ТекущаяДата();
	
	Пар = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("ПоследняяОперация_НП"));
	Пар.Использование = истина;
	Пар.Значение = '20000101000000';
	
	Пар = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("ПоследняяОперация_КП"));
	Пар.Использование = истина;
	Пар.Значение = ТекущаяДата();
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
        КомпоновщикНастроек.Настройки, , ,
    Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

    ПроцессорВывода.УстановитьОбъект(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    МассивПолучателей = новый массив;
    ТЗНаОтправку = новый ТаблицаЗначений;
	ТЗНаОтправку.Колонки.Добавить("Контрагент");
	ТЗНаОтправку.Колонки.Добавить(Должность);
	ТЗНаОтправку.Колонки.Добавить("Задолженность");	
	ТЗНаОтправку.Колонки.Добавить("Документ");
	ПлохаяДЗИтоги = Результат.Скопировать(,"Контрагент,ПлохаяДЗ,ОтветственныйМенеджер");
	ПлохаяДЗИтоги.Свернуть("Контрагент,ОтветственныйМенеджер","ПлохаяДЗ");
	ПлохаяДЗИтогиБухОтв = Результат.Скопировать(,"Контрагент,ПлохаяДЗ,КонтрагентОсновнойБухгалтерПокупателя");
	ПлохаяДЗИтогиБухОтв.Свернуть("Контрагент,КонтрагентОсновнойБухгалтерПокупателя","ПлохаяДЗ");
	//+++АК bara 15.11.17    16682.02  внесены правки по изменению КонтрагентОсновнойМенеджерПокупателя на ОтветственныйМенеджер
	Если Должность = "Менеджер" тогда                           
		Для каждого строка из Результат цикл     
			Если НЕ Строка.СуммаДокумента = 0 и НЕ Строка.Регистратор = Неопределено 
				и НЕ Строка.ПлохаяДЗ = 0 и НЕ Строка.ОтветственныйМенеджер = Неопределено и НЕ ЗначениеЗаполнено(Строка.Комментарий) тогда
				Если МассивПолучателей.Найти(строка.ОтветственныйМенеджер) = Неопределено тогда
					МассивПолучателей.Добавить(строка.ОтветственныйМенеджер);
				КонецЕсли;
				
				пОтбора = Новый Структура;
				пОтбора.Вставить("Контрагент", строка.Контрагент); 
				пОтбора.Вставить("ОтветственныйМенеджер", Строка.ОтветственныйМенеджер); 
				РезПоиска = ПлохаяДЗИтоги.НайтиСтроки(пОтбора);
				Если Не (РезПоиска.Количество() = 1 и РезПоиска[0].ПлохаяДЗ>=0) Тогда
					Продолжить;
				КонецЕсли;

				//СтрокаИтоги = ПлохаяДЗИтоги.Найти(строка.Контрагент,"Контрагент");
				//Если СтрокаИтоги <> Неопределено и СтрокаИтоги.ПлохаяДЗ<0 Тогда
				//      Продолжить;
				//КонецЕсли;
				
				НСтр = ТЗНаОтправку.Добавить();
				НСтр.Контрагент = строка.КОнтрагент;
				НСтр.Менеджер = строка.ОтветственныйМенеджер;
				НСтр.Задолженность = строка.ПлохаяДЗ;
				НСтр.Документ = строка.Регистратор;
			КонецЕсли;	
		КонецЦикла;	
	ИначеЕсли Должность = "Бухгалтер" тогда
		Для каждого строка из Результат цикл
			Если НЕ Строка.СуммаДокумента = 0 и НЕ Строка.Регистратор = Неопределено 
				и НЕ Строка.КонтрагентОсновнойБухгалтерПокупателя = Неопределено и Строка.ПодтвержденБухгалтером = Перечисления.АК_ВидыПодтверждения.НеПодтвержден
				и Строка.Комментарий = Справочники.АК_ВидыКомментариев.Сверка тогда
				Если МассивПолучателей.Найти(строка.КонтрагентОсновнойБухгалтерПокупателя) = Неопределено тогда
					МассивПолучателей.Добавить(строка.КонтрагентОсновнойБухгалтерПокупателя);
				КонецЕсли;
				
				пОтбора = Новый Структура;
				пОтбора.Вставить("Контрагент", строка.Контрагент); 
				пОтбора.Вставить("КонтрагентОсновнойБухгалтерПокупателя", Строка.КонтрагентОсновнойБухгалтерПокупателя); 
				РезПоиска = ПлохаяДЗИтогиБухОтв.НайтиСтроки(пОтбора);
				Если Не (РезПоиска.Количество() = 1 и РезПоиска[0].ПлохаяДЗ>=0) Тогда
					Продолжить;
				КонецЕсли;

				//СтрокаИтоги = ПлохаяДЗИтоги.Найти(строка.КОнтрагент,"Контрагент");
				//Если СтрокаИтоги <> Неопределено и СтрокаИтоги.ПлохаяДЗ<0 Тогда
				//      Продолжить;
				//КонецЕсли;
				НСтр = ТЗНаОтправку.Добавить();
				НСтр.Контрагент = строка.КОнтрагент;
				НСтр.Бухгалтер = строка.КонтрагентОсновнойБухгалтерПокупателя;
				НСтр.Задолженность = строка.ПлохаяДЗ;
				НСтр.Документ = строка.Регистратор;
			КонецЕсли;	
		КонецЦикла;	
	ИначеЕсли Должность = "Руководитель" тогда 
		ТЗНаОтправку.Колонки.Добавить("Менеджер");
		Для каждого строка из Результат цикл
			Если НЕ Строка.СуммаДокумента = 0 и НЕ Строка.Регистратор = Неопределено 
				и НЕ Строка.ПлохаяДЗ = 0 и НЕ Строка.ОтветственныйМенеджер = Неопределено и НЕ ЗначениеЗаполнено(Строка.Комментарий)
				и ЗначениеЗаполнено(строка.ОтветственныйМенеджер.ФизЛицо)
				и (ЗначениеЗаполнено(строка.ОтветственныйМенеджер.ФизЛицо.Руководитель)) тогда
				Если МассивПолучателей.Найти(строка.ОтветственныйМенеджер.ФизЛицо.Руководитель) = Неопределено тогда
					МассивПолучателей.Добавить(строка.ОтветственныйМенеджер.ФизЛицо.Руководитель);
				КонецЕсли;
				
				пОтбора = Новый Структура;
				пОтбора.Вставить("Контрагент", строка.Контрагент); 
				пОтбора.Вставить("ОтветственныйМенеджер", Строка.ОтветственныйМенеджер); 
				РезПоиска = ПлохаяДЗИтоги.НайтиСтроки(пОтбора);
				Если Не (РезПоиска.Количество() = 1 и РезПоиска[0].ПлохаяДЗ>=0) Тогда
					Продолжить;
				КонецЕсли;
				
				//СтрокаИтоги = ПлохаяДЗИтоги.Найти(строка.КОнтрагент,"Контрагент");
				//Если СтрокаИтоги <> Неопределено и СтрокаИтоги.ПлохаяДЗ<0 Тогда
				//      Продолжить;
				//КонецЕсли;
				НСтр = ТЗНаОтправку.Добавить();
				НСтр.Контрагент = строка.КОнтрагент;
				НСтр.Менеджер = строка.ОтветственныйМенеджер;
				НСтр.Задолженность = строка.ПлохаяДЗ;
				НСтр.Документ = строка.Регистратор;
				НСтр.Руководитель = строка.ОтветственныйМенеджер.ФизЛицо.Руководитель;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	//---
	Если  МассивПолучателей.Количество() > 0 тогда
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		Если УчетнаяЗапись = Неопределено Тогда
			УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
		КонецЕсли;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Почта = Новый ИнтернетПочта;
		Почта.Подключиться(Профиль);	
		
		Для каждого Получателя из МассивПолучателей цикл
			ПараметрыОтбора = новый Структура;
			ПараметрыОтбора.Вставить(Должность, Получателя);
			МассивСтрок = ТЗНаОтправку.НайтиСтроки(ПараметрыОтбора);
			ОтправитьУведомлениеПДЗ(Получателя, МассивСтрок, ТекущаяДата(), Почта, УчетнаяЗапись, Должность);
		КонецЦикла;
		
		Почта.Отключиться();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтправитьУведомлениеПДЗ(Получатель, ТаблицаДанных, ДатаОтчета = Неопределено, Почта, УчетнаяЗапись, Должность) Экспорт
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Если ДатаОтчета = Неопределено Тогда
		ДатаОтчета = ТекущаяДата()
	КонецЕсли;
	Если Должность = "Менеджер" тогда
		Письмо.Тема 			= "Контрагенты с ПДЗ на " + Формат(ДатаОтчета, "ДФ=dd.MM.yyyy");
		ТекстХТМЛ = "<h1>Необходимо оставить комментарии по ПДЗ в отчете ""Отчет по Дебиторской задолженности (по Документам) (Новый)"" до конца текущего дня! </h1>""";
	ИначеЕсли Должность = "Бухгалтер" тогда
		Письмо.Тема 			= "Комментарии менеджеров по ПДЗ на " + Формат(ДатаОтчета, "ДФ=dd.MM.yyyy");
		ТекстХТМЛ = "<h1>Необходимо обработать комментарии менеджеров по ПДЗ в отчете ""Отчет по Дебиторской задолженности (по Документам) (Новый)"" до конца текущего дня! </h1>""";
	ИначеЕсли Должность = "Руководитель" тогда
		Письмо.Тема 			= "Информация по плохой ДЗ ваших сотрудников на " + Формат(ДатаОтчета, "ДФ=dd.MM.yyyy");
		ТекстХТМЛ = "<h1>Информация по плохой ДЗ ваших сотрудников в отчете ""Отчет по Дебиторской задолженности (по Документам) (Новый)"". </h1>""";
	КонецЕсли;	
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	СтрПолучатели = "";
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") тогда	
		Адрес = ПолучитьЭлПочтуОтветственного(Получатель.ФизЛицо);
	КонецЕсли;	
	Если СокрЛП(Адрес)="" Тогда
		Адрес = ПолучитьЭлПочтуОтветственного(Получатель);
	КонецЕсли;	
	
	//НовыйПолучатель = Письмо.Получатели.Добавить();
	
	
	Если СокрЛП(Адрес)="" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен адрес для "+Строка(Получатель)+". Уведомление не отправлено";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	//НовыйПолучатель.Адрес=Адрес;
	
	Письмо.Получатели.Добавить(Адрес); 
	//Письмо.Получатели.Добавить("Pashaklgd@mail.ru"); 
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
	ТекстХТМЛ = ТекстХТМЛ +  ТекстХТМЛТаблицаДокументовПДЗ(ТаблицаДанных, Должность);
	ТекстПисьма.Текст = ТекстХТМЛ;
	
	Попытка	
		Почта.Послать(Письмо);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция ТекстХТМЛТаблицаДокументовПДЗ(ТаблицаДанных, Должность)
	
	Если Должность = "Менеджер" тогда
		
		ТекстХТМЛ = "<table border><tr align='center'><td>Документ</td><td>Контрагент</td><td>Сумма ПДЗ</td><td>Менеджер</td></tr>";

		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			ТекстХТМЛ = ТекстХТМЛ + "<tr>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Документ) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Контрагент) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Задолженность) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Менеджер, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "</tr>";
		КонецЦикла;
		
	ИначеЕсли Должность = "Бухгалтер" тогда
		
		ТекстХТМЛ = "<table border><tr align='center'><td>Документ</td><td>Контрагент</td><td>Сумма ПДЗ</td><td>Бухгалтер</td></tr>";

		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			ТекстХТМЛ = ТекстХТМЛ + "<tr>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Документ) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Контрагент) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Задолженность) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Бухгалтер, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "</tr>";
		КонецЦикла;
		
	ИначеЕсли Должность = "Руководитель" тогда
		
		ТекстХТМЛ = "<table border><tr align='center'><td>Документ</td><td>Контрагент</td><td>Сумма ПДЗ</td><td>Менеджер</td><td>Руководитель</td></tr>";

		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			ТекстХТМЛ = ТекстХТМЛ + "<tr>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Документ) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Контрагент) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Задолженность) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Менеджер, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.Руководитель, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "</tr>";
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Функция ПолучитьЭлПочтуОтветственного(Ответственный)
	//Отбор=Новый Структура;
	//Отбор.Вставить("Объект",Ответственный);
	//Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	//Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	//ЭлПочта=РегистрыСведений.КонтактнаяИнформация.Получить(Отбор).Представление;
	//Возврат ЭлПочта;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Ответственный);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация1.Представление КАК Емейл
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
		|ГДЕ
		|	КонтактнаяИнформация1.Объект  = &Объект
		|	И КонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КонтактнаяИнформация1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ВТ.Емейл КАК СТРОКА(50)) КАК Поле1
		|ИЗ
		|	ВТ КАК ВТ";
		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() цикл
			 Возврат Рез.Поле1;
		КонецЦикла;	
КонецФункции

Процедура ОтправитьОповещениеОДобавленииСканов() Экспорт

	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	КонецЕсли;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Добавлен скан договора аренды";
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	//Письмо.Получатели.Добавить(Адрес); 
	//Письмо.Получатели.Добавить("Pashaklgd@mail.ru"); 
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.Текст = "афыафы";
	
	Почта.Послать(Письмо);

КонецПроцедуры

//Раков П.С. --

Процедура ОтправитьУведомление(Получатели, ТаблицаДанных, ДатаОтчета = Неопределено, РежимТестирования = Ложь) Экспорт
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	КонецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Если ДатаОтчета = Неопределено Тогда
		ДатаОтчета = ТекущаяДата()
	КонецЕсли;
	Письмо.Тема 			= "Документы с превышением лимитов деб.задолженности на " + Формат(ДатаОтчета, "ДФ=dd.MM.yyyy");
	Если РежимТестирования Тогда
		Письмо.Тема = "Тестирование: "+Письмо.Тема
	КонецЕсли;
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	//Получатель = Письмо.Получатели.Добавить();
	//Получатель.Адрес = "ay-tana@mail.ru";	
	//
	СтрПолучатели = "";
	Для Каждого П из Получатели Цикл
		Получатель = Письмо.Получатели.Добавить();
		Адрес = ПолучитьЭлПочтуОтветственного(П);
		Получатель.Адрес=Адрес;
		Если СокрЛП(Адрес)="" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнен адрес для "+Строка(П)+". Уведомление не отправлено";
			Сообщение.Сообщить();
		КонецЕсли;
		СтрПолучатели = СтрПолучатели+Адрес+"; "
	КонецЦикла;
	
	Если СтрПолучатели = "" Тогда
		Возврат
	КонецЕсли;
	
	Если РежимТестирования Тогда
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
		ТекстХТМЛ = "<h1>Тестирование рассылки, данные неактуальны</h1>";
		ТекстПисьма.Текст = ТекстХТМЛ;
	КонецЕсли;
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
	ТекстХТМЛ = ТекстХТМЛТаблицаДокументов(ТаблицаДанных);
	ТекстПисьма.Текст = ТекстХТМЛ;
	
	//ТекстПисьма = Письмо.Тексты.Добавить();
	//ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
	//ТекстХТМЛ = ТекстХТМЛТаблицаДокументов(ТаблицаДанных);
	//ТекстПисьма.Текст = СтрПолучатели;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры

Процедура АК_КонтрольДЗРассылкаУведомлений() Экспорт
	
	СформироватьУведомленияПоЗаявкамКОплате(ТекущаяДата())
	
КонецПроцедуры

Функция ДопустимоеПревышениеПриПроведении(Дата) Экспорт
	
	Результат = РегистрыСведений.ДопустимоеПревышениеЛимитаДЗ.СрезПоследних(Дата);
	Если Результат.Количество() = 0 Тогда
		//+++АК Познахарёв 02.07.17
		//Возврат Неопределено;
		Возврат 0;
		//---АК Познахарёв 02.07.17
	Иначе
		Возврат Результат[0].Лимит;
	КонецЕсли
	
КонецФункции

// +++АК Познахарёв 26.04.17
// устарела
Функция ОстаткиПоРазделамУчетаСЛимитами(МассивСсылок,Контрагенты, НаДату = Неопределено) Экспорт 
	НачалоПериода = ТекущаяДата();
	Для Каждого Док Из МассивСсылок Цикл
		НачалоПериода = Мин(НачалоПериода,Док.Дата);
	КонецЦикла;	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"		, НаДату);
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("ПериодЛимита", КонецДня(НаДату));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Контрагенты"	, Контрагенты);
	Запрос.УстановитьПараметр("МассивСсылок",МассивСсылок);
		
	Запрос.Текст =
	//+++АК SUVV 2018.02.28 ИП-00017941
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредств.Контрагент,
	|	ЗаявкаНаРасходованиеСредств.СуммаДокумента,
	|	ЗаявкаНаРасходованиеСредств.Ссылка,
	|	ЗаявкаНаРасходованиеСредств.Организация,
	|	ЗаявкаНаРасходованиеСредств.Дата
	|ПОМЕСТИТЬ ВТ_ЗаявкиНаРасходованиеДС
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаявкиНаРасходованиеДС.Контрагент,
	|	ВТ_ЗаявкиНаРасходованиеДС.СуммаДокумента,
	|	ВТ_ЗаявкиНаРасходованиеДС.Ссылка,
	|	ВТ_ЗаявкиНаРасходованиеДС.Организация,
	|	ВТ_ЗаявкиНаРасходованиеДС.Дата,
	|	МАКСИМУМ(СоответствияСтатейСчетов.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета
	|ИЗ
	|	ВТ_ЗаявкиНаРасходованиеДС КАК ВТ_ЗаявкиНаРасходованиеДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО ВТ_ЗаявкиНаРасходованиеДС.Дата >= СоответствияСтатейСчетов.Период
	|			И ВТ_ЗаявкиНаРасходованиеДС.Ссылка.СтатьяДвиженияДенежныхСредств = СоответствияСтатейСчетов.СтатьяДДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаявкиНаРасходованиеДС.Контрагент,
	|	ВТ_ЗаявкиНаРасходованиеДС.Ссылка,
	|	ВТ_ЗаявкиНаРасходованиеДС.Организация,
	|	ВТ_ЗаявкиНаРасходованиеДС.Дата,
	|	ВТ_ЗаявкиНаРасходованиеДС.СуммаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Контрагент,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.СуммаДокумента,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Ссылка,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Организация,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Дата,
	|	МАКСИМУМ(СоответствияСтатейСчетов.Счет) КАК Счет
	|ПОМЕСТИТЬ ВТ_ЗаявкиНаРасходованиеДССоСчетом
	|ИЗ
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета КАК ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.МаксПериод = СоответствияСтатейСчетов.Период
	|			И ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Ссылка.СтатьяДвиженияДенежныхСредств = СоответствияСтатейСчетов.СтатьяДДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Ссылка,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Организация,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Контрагент,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.Дата,
	|	ВТ_ЗаявкиНаРасходованиеДССМаксПериодомСчета.СуммаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Контрагент,
	|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.СуммаДокумента,
	|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Счет КАК СчетРасчетов,
	|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Ссылка КАК Ссылка,
	|	NULL КАК Заявка,
	|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Организация,
	|	ВТ_ЗаявкиНаРасходованиеДССоСчетом.Дата
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	ВТ_ЗаявкиНаРасходованиеДССоСчетом КАК ВТ_ЗаявкиНаРасходованиеДССоСчетом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзБанка.Контрагент,
	|	РасходИзБанка.СуммаДокумента,
	|	РасходИзБанка.СчетУчетаРасчетовСКонтрагентом,
	|	РасходИзБанка.Ссылка,
	|	РасходИзБанка.ЗаявкаНаРасходованиеСредств,
	|	РасходИзБанка.Организация,
	|	РасходИзБанка.Дата
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.Контрагент,
	|	РасходИзКассы.СуммаДокумента,
	|	РасходИзКассы.СчетУчетаРасчетовСКонтрагентом,
	|	РасходИзКассы.Ссылка,
	|	РасходИзКассы.ЗаявкаНаРасходованиеСредств,
	|	РасходИзКассы.Организация,
	|	РасходИзКассы.Дата
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Контрагент,
	|	СУММА(ВложенныйЗапрос.СуммаОплаты - ЕСТЬNULL(РасчетыПоЗаявкамНаУслугиМатериалыОбороты.СуммаРасход, 0)),
	|	ВложенныйЗапрос.СчетУчетаРасчетов,
	|	ВложенныйЗапрос.Ссылка,
	|	NULL,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка КАК Ссылка,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент КАК Контрагент,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
	|		СУММА(ЗаявкаНаУслугиМатериалыОплата.СуммаОплаты) КАК СуммаОплаты,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация КАК Организация,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата КАК Дата
	|	ИЗ
	|		Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	|	ГДЕ
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка В(&МассивСсылок)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация,
	|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Обороты(, &Период, Регистратор, Заявка В (&МассивСсылок)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОбороты
	|		ПО ВложенныйЗапрос.Ссылка = РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.СчетУчетаРасчетов,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.РазделУчета,
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Контрагент,
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Сумма КАК Лимит,
	|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Организация
	|ПОМЕСТИТЬ ВТВсеЛимитыКонтрагентов
	|ИЗ
	|	РегистрСведений.АК_ЛимитыДебиторскойЗадолженности.СрезПервых(&ПериодЛимита, Контрагент В (&Контрагенты)) КАК АК_ЛимитыДебиторскойЗадолженностиСрезПервых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРазделыУчета.Ссылка КАК Контрагент,
	|	ВТРазделыУчета.РазделУчета КАК СчетРасчетов,
	|	ВТРазделыУчета.Организация
	|ПОМЕСТИТЬ ВТВсеРазделы
	|ИЗ
	|	Справочник.Контрагенты.РазделыУчетаДляДЗ КАК ВТРазделыУчета
	|ГДЕ
	|	ВТРазделыУчета.Ссылка В(&Контрагенты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРазделыУчета.Ссылка,
	|	ВТРазделыУчета.РазделУчета,
	|	ВТРазделыУчета.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ОстаткиПоВсемРазделам.СуммаДолга, 0) - ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0)) КАК Превышение,
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Контрагент, ОстаткиПоВсемРазделам.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0) КАК Лимит,
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.РазделУчета, ОстаткиПоВсемРазделам.СчетРасчетов) КАК РазделУчета,
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Организация, ОстаткиПоВсемРазделам.Организация) КАК Организация,
	|	СУММА(ЕСТЬNULL(ОстаткиПоВсемРазделам.СуммаДолга, 0)) КАК СуммаПоРазделу,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ОстаткиПоВсемРазделам.СуммаДолга, 0)) - СУММА(ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0)) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПревышение,
	|	ОстаткиПоВсемРазделам.Заявка
	|ИЗ
	|	ВТВсеЛимитыКонтрагентов КАК ВТВсеЛимитыКонтрагентов
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Контрагент КАК Контрагент,
	|			СУММА(ВложенныйЗапрос.СуммаДолга) КАК СуммаДолга,
	|			ВложенныйЗапрос.СчетРасчетов КАК СчетРасчетов,
	|			ВложенныйЗапрос.Организация КАК Организация,
	|			ВложенныйЗапрос.Заявка КАК Заявка
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВТВсеРазделы.Контрагент КАК Контрагент,
	|				ВТВсеРазделы.СчетРасчетов КАК СчетРасчетов,
	|				СУММА(ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0)) КАК СуммаДолга,
	|				ВТВсеРазделы.Организация КАК Организация,
	|				NULL КАК Заявка
	|			ИЗ
	|				ВТВсеРазделы КАК ВТВсеРазделы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Остатки(
	|							&Период,
	|							Счет В
	|								(ВЫБРАТЬ
	|									Т.СчетРасчетов
	|								ИЗ
	|									ВТВсеРазделы КАК Т),
	|							,
	|							(Субконто1, Субконто2) В
	|								(ВЫБРАТЬ
	|									Т.Организация,
	|									Т.Контрагент
	|								ИЗ
	|									ВТВсеРазделы КАК Т)) КАК ФинансовыйОстатки
	|					ПО ВТВсеРазделы.Организация = ФинансовыйОстатки.Субконто1
	|						И ВТВсеРазделы.СчетРасчетов = ФинансовыйОстатки.Счет
	|						И ВТВсеРазделы.Контрагент = ФинансовыйОстатки.Субконто2
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТВсеРазделы.Контрагент,
	|				ВТВсеРазделы.СчетРасчетов,
	|				ВТВсеРазделы.Организация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				-ФинансовыйДвиженияССубконто.Сумма,
	|				ВТДокументы.Организация,
	|				NULL
	|			ИЗ
	|				ВТДокументы КАК ВТДокументы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|							&НачалоПериода,
	|							&Период,
	|							(СчетДт, Субконто1, Субконто2) В
	|									(ВЫБРАТЬ
	|										Т.СчетРасчетов,
	|										Т.Организация,
	|										Т.Контрагент
	|									ИЗ
	|										ВТВсеРазделы КАК Т)
	|								И Регистратор В (&МассивСсылок),
	|							,
	|							) КАК ФинансовыйДвиженияССубконто
	|					ПО ВТДокументы.Ссылка = ФинансовыйДвиженияССубконто.Регистратор
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТДокументы.Контрагент,
	|				ВТДокументы.СчетРасчетов,
	|				ВТДокументы.Организация,
	|				-ФинансовыйДвиженияССубконто.Сумма) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Контрагент,
	|			ВложенныйЗапрос.СчетРасчетов,
	|			ВложенныйЗапрос.Организация,
	|			ВложенныйЗапрос.Заявка) КАК ОстаткиПоВсемРазделам
	|		ПО ВТВсеЛимитыКонтрагентов.РазделУчета = ОстаткиПоВсемРазделам.СчетРасчетов
	|			И ВТВсеЛимитыКонтрагентов.Контрагент = ОстаткиПоВсемРазделам.Контрагент
	|			И ВТВсеЛимитыКонтрагентов.Организация = ОстаткиПоВсемРазделам.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0),
	|	ОстаткиПоВсемРазделам.Заявка,
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Контрагент, ОстаткиПоВсемРазделам.Контрагент),
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.РазделУчета, ОстаткиПоВсемРазделам.СчетРасчетов),
	|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Организация, ОстаткиПоВсемРазделам.Организация)
	|ИТОГИ ПО
	|	Контрагент,
	|	РазделУчета";
	
	
	//"ВЫБРАТЬ
	//|	ЗаявкаНаРасходованиеСредств.Контрагент,
	//|	ЗаявкаНаРасходованиеСредств.СуммаДокумента,
	//|	ВЫБОР
	//|		КОГДА ЗаявкаНаРасходованиеСредств.АК_СчетУчетаРасчетов = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
	//|			ТОГДА ЕСТЬNULL(СоответствияСтатейСчетов.Счет, ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка))
	//|		ИНАЧЕ ЗаявкаНаРасходованиеСредств.АК_СчетУчетаРасчетов
	//|	КОНЕЦ КАК СчетРасчетов,
	//|	ЗаявкаНаРасходованиеСредств.Ссылка КАК Ссылка,
	//|	NULL КАК Заявка,
	//|	ЗаявкаНаРасходованиеСредств.Организация,
	//|	ЗаявкаНаРасходованиеСредств.Дата
	//|ПОМЕСТИТЬ ВТДокументы
	//|ИЗ
	//|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			СоответствияСтатейСчетов.СтатьяДДС КАК СтатьяДДС,
	//|			МАКСИМУМ(СоответствияСтатейСчетов.Счет) КАК Счет
	//|		ИЗ
	//|			РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			СоответствияСтатейСчетов.СтатьяДДС) КАК СоответствияСтатейСчетов
	//|		ПО ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств = СоответствияСтатейСчетов.СтатьяДДС
	//|ГДЕ
	//|	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивСсылок)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	РасходИзБанка.Контрагент,
	//|	РасходИзБанка.СуммаДокумента,
	//|	РасходИзБанка.СчетУчетаРасчетовСКонтрагентом,
	//|	РасходИзБанка.Ссылка,
	//|	РасходИзБанка.ЗаявкаНаРасходованиеСредств,
	//|	РасходИзБанка.Организация,
	//|	РасходИзБанка.Дата
	//|ИЗ
	//|	Документ.РасходИзБанка КАК РасходИзБанка
	//|ГДЕ
	//|	РасходИзБанка.Ссылка В(&МассивСсылок)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	РасходИзКассы.Контрагент,
	//|	РасходИзКассы.СуммаДокумента,
	//|	РасходИзКассы.СчетУчетаРасчетовСКонтрагентом,
	//|	РасходИзКассы.Ссылка,
	//|	РасходИзКассы.ЗаявкаНаРасходованиеСредств,
	//|	РасходИзКассы.Организация,
	//|	РасходИзКассы.Дата
	//|ИЗ
	//|	Документ.РасходИзКассы КАК РасходИзКассы
	//|ГДЕ
	//|	РасходИзКассы.Ссылка В(&МассивСсылок)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ВложенныйЗапрос.Контрагент,
	//|	СУММА(ВложенныйЗапрос.СуммаОплаты - ЕСТЬNULL(РасчетыПоЗаявкамНаУслугиМатериалыОбороты.СуммаРасход, 0)),
	//|	ВложенныйЗапрос.СчетУчетаРасчетов,
	//|	ВложенныйЗапрос.Ссылка,
	//|	NULL,
	//|	ВложенныйЗапрос.Организация,
	//|	ВложенныйЗапрос.Дата
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка КАК Ссылка,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент КАК Контрагент,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
	//|		СУММА(ЗаявкаНаУслугиМатериалыОплата.СуммаОплаты) КАК СуммаОплаты,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация КАК Организация,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата КАК Дата
	//|	ИЗ
	//|		Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	//|	ГДЕ
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка В(&МассивСсылок)
	//|	
	//|	СГРУППИРОВАТЬ ПО
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Контрагент,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.СчетУчетаРасчетов,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Организация,
	//|		ЗаявкаНаУслугиМатериалыОплата.Ссылка.Дата) КАК ВложенныйЗапрос
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Обороты(, &Период, Регистратор, Заявка В (&МассивСсылок)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОбороты
	//|		ПО ВложенныйЗапрос.Ссылка = РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Заявка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВложенныйЗапрос.Ссылка,
	//|	ВложенныйЗапрос.Контрагент,
	//|	ВложенныйЗапрос.СчетУчетаРасчетов,
	//|	ВложенныйЗапрос.Организация,
	//|	ВложенныйЗапрос.Дата
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.РазделУчета,
	//|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Контрагент,
	//|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Сумма КАК Лимит,
	//|	АК_ЛимитыДебиторскойЗадолженностиСрезПервых.Организация
	//|ПОМЕСТИТЬ ВТВсеЛимитыКонтрагентов
	//|ИЗ
	//|	РегистрСведений.АК_ЛимитыДебиторскойЗадолженности.СрезПервых(&ПериодЛимита, Контрагент В (&Контрагенты)) КАК АК_ЛимитыДебиторскойЗадолженностиСрезПервых
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТРазделыУчета.Ссылка КАК Контрагент,
	//|	ВТРазделыУчета.РазделУчета КАК СчетРасчетов,
	//|	ВТРазделыУчета.Организация
	//|ПОМЕСТИТЬ ВТВсеРазделы
	//|ИЗ
	//|	Справочник.Контрагенты.РазделыУчетаДляДЗ КАК ВТРазделыУчета
	//|ГДЕ
	//|	ВТРазделыУчета.Ссылка В(&Контрагенты)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТРазделыУчета.Ссылка,
	//|	ВТРазделыУчета.РазделУчета,
	//|	ВТРазделыУчета.Организация
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СУММА(ЕСТЬNULL(ОстаткиПоВсемРазделам.СуммаДолга, 0) - ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0)) КАК Превышение,
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Контрагент, ОстаткиПоВсемРазделам.Контрагент) КАК Контрагент,
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0) КАК Лимит,
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.РазделУчета, ОстаткиПоВсемРазделам.СчетРасчетов) КАК РазделУчета,
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Организация, ОстаткиПоВсемРазделам.Организация) КАК Организация,
	//|	СУММА(ЕСТЬNULL(ОстаткиПоВсемРазделам.СуммаДолга, 0)) КАК СуммаПоРазделу,
	//|	ВЫБОР
	//|		КОГДА СУММА(ЕСТЬNULL(ОстаткиПоВсемРазделам.СуммаДолга, 0)) - СУММА(ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0)) > 0
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ЕстьПревышение,
	//|	ОстаткиПоВсемРазделам.Заявка
	//|ИЗ
	//|	ВТВсеЛимитыКонтрагентов КАК ВТВсеЛимитыКонтрагентов
	//|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ВложенныйЗапрос.Контрагент КАК Контрагент,
	//|			СУММА(ВложенныйЗапрос.СуммаДолга) КАК СуммаДолга,
	//|			ВложенныйЗапрос.СчетРасчетов КАК СчетРасчетов,
	//|			ВложенныйЗапрос.Организация КАК Организация,
	//|			ВложенныйЗапрос.Заявка КАК Заявка
	//|		ИЗ
	//|			(ВЫБРАТЬ
	//|				ВТВсеРазделы.Контрагент КАК Контрагент,
	//|				ВТВсеРазделы.СчетРасчетов КАК СчетРасчетов,
	//|				СУММА(ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0)) КАК СуммаДолга,
	//|				ВТВсеРазделы.Организация КАК Организация,
	//|				NULL КАК Заявка
	//|			ИЗ
	//|				ВТВсеРазделы КАК ВТВсеРазделы
	//|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Остатки(
	//|							&Период,
	//|							Счет В
	//|								(ВЫБРАТЬ
	//|									Т.СчетРасчетов
	//|								ИЗ
	//|									ВТВсеРазделы КАК Т),
	//|							,
	//|							(Субконто1, Субконто2) В
	//|								(ВЫБРАТЬ
	//|									Т.Организация,
	//|									Т.Контрагент
	//|								ИЗ
	//|									ВТВсеРазделы КАК Т)) КАК ФинансовыйОстатки
	//|					ПО ВТВсеРазделы.Организация = ФинансовыйОстатки.Субконто1
	//|						И ВТВсеРазделы.СчетРасчетов = ФинансовыйОстатки.Счет
	//|						И ВТВсеРазделы.Контрагент = ФинансовыйОстатки.Субконто2
	//|			
	//|			СГРУППИРОВАТЬ ПО
	//|				ВТВсеРазделы.Контрагент,
	//|				ВТВсеРазделы.СчетРасчетов,
	//|				ВТВсеРазделы.Организация
	//|			
	////|			ОБЪЕДИНИТЬ ВСЕ
	////|			
	////|			ВЫБРАТЬ
	////|				АК_СуммыКОплатеОстатки.Контрагент,
	////|				АК_СуммыКОплатеОстатки.РазделУчета,
	////|				СУММА(АК_СуммыКОплатеОстатки.СуммаКОплатеОстаток),
	////|				ВТВсеРазделы.Организация,
	////|				АК_СуммыКОплатеОстатки.Заявка
	////|			ИЗ
	////|				ВТВсеРазделы КАК ВТВсеРазделы
	////|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АК_СуммыКОплате.Остатки(
	////|							&Период,
	////|							(Контрагент, разделучета, Заявка.Организация) В
	////|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	////|									Т.Контрагент,
	////|									Т.СчетРасчетов,
	////|									Т.Организация
	////|								ИЗ
	////|									ВТВсеРазделы КАК Т)) КАК АК_СуммыКОплатеОстатки
	////|					ПО ВТВсеРазделы.Контрагент = АК_СуммыКОплатеОстатки.Контрагент
	////|						И ВТВсеРазделы.СчетРасчетов = АК_СуммыКОплатеОстатки.РазделУчета
	////|						И ВТВсеРазделы.Организация = АК_СуммыКОплатеОстатки.Заявка.Организация
	////|			
	////|			СГРУППИРОВАТЬ ПО
	////|				АК_СуммыКОплатеОстатки.Контрагент,
	////|				АК_СуммыКОплатеОстатки.РазделУчета,
	////|				ВТВсеРазделы.Организация,
	////|				АК_СуммыКОплатеОстатки.Заявка
	////|			
	////|			ОБЪЕДИНИТЬ ВСЕ
	////|			
	////|			ВЫБРАТЬ
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Контрагент,
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.СчетУчетаРасчетов,
	////|				СУММА(РасчетыПоЗаявкамНаУслугиМатериалыОстатки.СуммаОстаток),
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Организация,
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка
	////|			ИЗ
	////|				РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Остатки(
	////|						&Период,
	////|						(Заявка.Контрагент, Заявка.СчетУчетаРасчетов, Заявка.Организация) В
	////|							(ВЫБРАТЬ
	////|								Т.Контрагент,
	////|								Т.СчетРасчетов,
	////|								Т.Организация
	////|							ИЗ
	////|								ВТВсеРазделы КАК Т)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОстатки
	////|			
	////|			СГРУППИРОВАТЬ ПО
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Контрагент,
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.СчетУчетаРасчетов,
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка.Организация,
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОстатки.Заявка
	//|			
	//|			ОБЪЕДИНИТЬ ВСЕ
	//|			
	//|			ВЫБРАТЬ
	//|				ВТДокументы.Контрагент,
	//|				ВТДокументы.СчетРасчетов,
	//|				-ФинансовыйДвиженияССубконто.Сумма,
	//|				ВТДокументы.Организация,
	//|				NULL
	//|			ИЗ
	//|				ВТДокументы КАК ВТДокументы
	//|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	//|							&НачалоПериода,
	//|							&Период,
	//|							(СчетДт, Субконто1, Субконто2) В
	//|									(ВЫБРАТЬ
	//|										Т.СчетРасчетов,
	//|										Т.Организация,
	//|										Т.Контрагент
	//|									ИЗ
	//|										ВТВсеРазделы КАК Т)
	//|								И Регистратор В (&МассивСсылок),
	//|							,
	//|							) КАК ФинансовыйДвиженияССубконто
	//|					ПО ВТДокументы.Ссылка = ФинансовыйДвиженияССубконто.Регистратор
	//|			
	//|			СГРУППИРОВАТЬ ПО
	//|				ВТДокументы.Контрагент,
	//|				ВТДокументы.СчетРасчетов,
	//|				ВТДокументы.Организация,
	//|				-ФинансовыйДвиженияССубконто.Сумма
	//|			
	////|			ОБЪЕДИНИТЬ ВСЕ
	////|			
	////|			ВЫБРАТЬ
	////|				ВТДокументы.Контрагент,
	////|				ВТДокументы.СчетРасчетов,
	////|				СУММА(-АК_СуммыКОплатеОбороты.СуммаКОплатеОборот),
	////|				ВТДокументы.Организация,
	////|				АК_СуммыКОплатеОбороты.Заявка
	////|			ИЗ
	////|				ВТДокументы КАК ВТДокументы
	////|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АК_СуммыКОплате.Обороты(
	////|							&НачалоПериода,
	////|							&Период,
	////|							Регистратор,
	////|							(Заявка.Организация, Контрагент, РазделУчета) В
	////|								(ВЫБРАТЬ
	////|									Т.Организация,
	////|									Т.Контрагент,
	////|									Т.СчетРасчетов
	////|								ИЗ
	////|									ВТВсеРазделы КАК Т)) КАК АК_СуммыКОплатеОбороты
	////|					ПО ВТДокументы.Ссылка = АК_СуммыКОплатеОбороты.Регистратор
	////|			
	////|			СГРУППИРОВАТЬ ПО
	////|				ВТДокументы.Контрагент,
	////|				ВТДокументы.СчетРасчетов,
	////|				ВТДокументы.Организация,
	////|				АК_СуммыКОплатеОбороты.Заявка
	////|			
	////|			ОБЪЕДИНИТЬ ВСЕ
	////|			
	////|			ВЫБРАТЬ
	////|				ВТДокументы.Контрагент,
	////|				ВТДокументы.СчетРасчетов,
	////|				СУММА(-РасчетыПоЗаявкамНаУслугиМатериалыОбороты.СуммаОборот),
	////|				ВТДокументы.Организация,
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Заявка
	////|			ИЗ
	////|				ВТДокументы КАК ВТДокументы
	////|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Обороты(
	////|							&НачалоПериода,
	////|							&Период,
	////|							Регистратор,
	////|							Заявка В (&МассивСсылок)
	////|								ИЛИ Заявка В
	////|									(ВЫБРАТЬ
	////|										Т.Заявка
	////|									ИЗ
	////|										ВТДокументы КАК Т)) КАК РасчетыПоЗаявкамНаУслугиМатериалыОбороты
	////|					ПО ВТДокументы.Ссылка = РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Регистратор
	////|			
	////|			СГРУППИРОВАТЬ ПО
	////|				ВТДокументы.Контрагент,
	////|				ВТДокументы.СчетРасчетов,
	////|				ВТДокументы.Организация,
	////|				РасчетыПоЗаявкамНаУслугиМатериалыОбороты.Заявка
	////|			
	////|			ОБЪЕДИНИТЬ ВСЕ
	////|			
	////|			ВЫБРАТЬ
	////|				ВТДокументы.Контрагент,
	////|				ВТДокументы.СчетРасчетов,
	////|				СУММА(ВЫБОР
	////|						КОГДА ВТДокументы.Ссылка ССЫЛКА Документ.РасходИзБанка
	////|								ИЛИ ТИПЗНАЧЕНИЯ(ВТДокументы.Ссылка) = ТИП(Документ.РасходИзКассы)
	////|							ТОГДА ВЫБОР ВТДокументы.Заявка
	////|									КОГДА NULL
	////|										ТОГДА 0
	////|									КОГДА НЕОПРЕДЕЛЕНО
	////|										ТОГДА 0
	////|									КОГДА ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	////|										ТОГДА 0
	////|									КОГДА ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	////|										ТОГДА 0
	////|									ИНАЧЕ -ВТДокументы.СуммаДокумента
	////|								КОНЕЦ
	////|						ИНАЧЕ 0
	////|					КОНЕЦ),
	////|				ВТДокументы.Организация,
	////|				NULL
	////|			ИЗ
	////|				ВТДокументы КАК ВТДокументы
	////|			
	////|			СГРУППИРОВАТЬ ПО
	////|				ВТДокументы.Контрагент,
	////|				ВТДокументы.СчетРасчетов,
	////|				ВТДокументы.Организация
	//|) КАК ВложенныйЗапрос
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			ВложенныйЗапрос.Контрагент,
	//|			ВложенныйЗапрос.СчетРасчетов,
	//|			ВложенныйЗапрос.Организация,
	//|			ВложенныйЗапрос.Заявка) КАК ОстаткиПоВсемРазделам
	//|		ПО ВТВсеЛимитыКонтрагентов.РазделУчета = ОстаткиПоВсемРазделам.СчетРасчетов
	//|			И ВТВсеЛимитыКонтрагентов.Контрагент = ОстаткиПоВсемРазделам.Контрагент
	//|			И ВТВсеЛимитыКонтрагентов.Организация = ОстаткиПоВсемРазделам.Организация
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Лимит, 0),
	//|	ОстаткиПоВсемРазделам.Заявка,
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Контрагент, ОстаткиПоВсемРазделам.Контрагент),
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.РазделУчета, ОстаткиПоВсемРазделам.СчетРасчетов),
	//|	ЕСТЬNULL(ВТВсеЛимитыКонтрагентов.Организация, ОстаткиПоВсемРазделам.Организация)
	//|ИТОГИ ПО
	//|	Контрагент,
	//|	РазделУчета";
	//---АК SUVV
	РезультатЗапроса = Запрос.Выполнить();
	    	
	Возврат РезультатЗапроса
	
КонецФункции

Процедура ЗаполнитьРазделыУчетаКонтрагентаПоДокументу(СсылкаНаДокумент) Экспорт
	СтруктураУчета = Новый Структура("Организация,РазделУчета");
	Контрагент = СсылкаНаДокумент.Контрагент;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		СтруктураУчета.Организация = СсылкаНаДокумент.Организация;
		СтруктураУчета.РазделУчета = СсылкаНаДокумент.СчетУчетаРасчетов;
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходИзБанка") ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		СтруктураУчета.Организация = СсылкаНаДокумент.Организация;
		СтруктураУчета.РазделУчета = СсылкаНаДокумент.СчетУчетаРасчетовСКонтрагентом;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураУчета.Организация) И ЗначениеЗаполнено(СтруктураУчета.РазделУчета) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Контрагент = Контрагент.ПолучитьОбъект();
		УжеЕсть = Контрагент.РазделыУчетаДляДЗ.НайтиСтроки(СтруктураУчета);
		Если УжеЕсть.Количество() = 0 Тогда
			НовыйРазделУчета = Контрагент.РазделыУчетаДляДЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйРазделУчета,СтруктураУчета);
		КонецЕсли;	
		Контрагент.ОбменДанными.Загрузка = Истина;
		Контрагент.Записать();
	КонецЕсли;	
		
КонецПроцедуры	
// --- АК
Процедура СоздатьЗадачуНеЗаписанДокументПлатежа(Заявка,СуммаДокумента,Ответственный,Контрагент)Экспорт
	
	обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	обЗадача.ВидЗадачи = Справочники.ВидыЗадачПользователей.НеЗаписанПлатеж;
	обЗадача.Дата = ТекущаяДата();
	//обЗадача.ОбъектЗадачи = ЗаявкаНаРасходованиеСредств;
	обЗадача.Ответственный = ПараметрыСеанса.ТекущийПользователь;	
	обЗадача.Исполнитель = Ответственный;	
	//обЗадача.Организация = пДокумент.Организация;
	обЗадача.Оповещение = Истина;
	обЗадача.СрокИсполнения = КонецДня(ТекущаяДата());
	обЗадача.СрокОповещения = ТекущаяДата()+10;
	обЗадача.Контрагент = Контрагент;
	ТекстОшибки = "Не записан платеж"+?(ЗначениеЗаполнено(Заявка)," на основании "+Строка(Заявка),"")+" на сумму "+Строка(СуммаДокумента);
	обЗадача.Наименование = ТекстОшибки;
	обЗадача.Записать();
	//Задача = обЗадача.Ссылка;
	//Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

// +++АК Познахарёв 26.04.17
Процедура ОтправитьУведомлениеПоОтчетуДляМенеджера(Менеджер,Контрагенты = Неопределено) Экспорт
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД=Отчеты.КонтрольДЗ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ТабДок = Новый ТабличныйДокумент;
		
	НастройкиСКД = СКД.ВариантыНастроек.ПоОтветственным.Настройки;
	Для каждого Эл Из НастройкиСКД.Отбор.Элементы Цикл
		Если СокрЛП(Эл.ЛевоеЗначение) = "Ответственный" Тогда
			Эл.Использование = Истина;
			Эл.ПравоеЗначение = Менеджер;
		КонецЕсли;
		Если СокрЛП(Эл.ЛевоеЗначение) = "Контрагент" И ЗначениеЗаполнено(Контрагенты) Тогда
			Эл.Использование = Истина;
			Эл.ПравоеЗначение = Контрагенты;
			Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
	КонецЦикла;	
			
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
		
	ТабДок=Новый ТабличныйДокумент;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	ИмяФайла=Новый УникальныйИдентификатор;
	ИмяФайла=КаталогВременныхФайлов()+ИмяФайла+".pdf";
		
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
		
	ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
	
	//Отправка письма
	Адрес = ПолучитьЭлПочтуОтветственного(Менеджер);
	СписокКому = Новый СписокЗначений;
	Если Адрес<>"" Тогда
		СписокКому.Добавить(Адрес);
		//СпАдресов=Новый СписокЗначений;
		//МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
		//Для каждого Эл Из МассивАдресов Цикл
		//	Если ЗначениеЗаполнено(Эл) Тогда
		//		СписокКому.Добавить(СокрЛП(Эл));
		//	КонецЕсли; 
		//КонецЦикла; 
	Иначе
		Сообщить("Письмо не отправлено! Не заполнен адрес электронной почты "+Менеджер);
		Возврат;
	КонецЕсли;
		
			
	
	//СписокКому.Добавить("pozm@automacon.ru");
	//СписокКому.Добавить("abdr@automacon.ru");
			
		
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
		
	Почта.Подключиться(Профиль);
	Письмо.Тема = "Информация о превышении лимитов дебиторской задолженности на: "+Формат(ТекущаяДата(),"ДЛФ=DDT");
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	Для Каждого ПолучательЭлемент Из СписокКому Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = ПолучательЭлемент.Значение;
	КонецЦикла;	
		
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = "Во вложении находится информация о превышении лимитов дебиторской задолженности";
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		
	Письмо.Вложения.Добавить(ИмяФайла);
		
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();
		
	Сообщить("Отправлено письмо "+Менеджер);
		
	
		
	
		
	
КонецПроцедуры	

Функция ПревышениеЛимитаПоДокументу(СсылкаНаДокумент,СсылкаНаКонтрагента,ДатаДокумента) Экспорт
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(СсылкаНаДокумент);
	
	МассивКонтрагентов = Новый Массив;
	МассивКонтрагентов.Добавить(СсылкаНаКонтрагента);

		
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = Отчеты.КонтрольДЗ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
	СхемаКомпоновкиДанных.Параметры.МассивДокументовДляКонтроля.Значение = МассивДокументов;
	СхемаКомпоновкиДанных.Параметры.ВсеКонтрагенты.Значение = Ложь;
	СхемаКомпоновкиДанных.Параметры.Контрагенты.Значение = МассивКонтрагентов;
	СхемаКомпоновкиДанных.Параметры.ДатаСрезаЛимитов.Значение = ТекущаяДата();
	СхемаКомпоновкиДанных.Параметры.НачалоПериодаДокументов.Значение = ДатаДокумента;
	СхемаКомпоновкиДанных.Параметры.КонецПериодаДокументов.Значение = КонецДня(ДатаДокумента);		
	СхемаКомпоновкиДанных.Параметры.УчитыватьОчередь.Значение = ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.ТаблицаКонтроляДЗ.Настройки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Если ТЗ.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Возврат ТЗ[0].ПревышениеСУчетомКонтролируемогоДокумента-ТЗ[0].ОстатокЛимитаСУчетомКонтролируемогоДокумента;
	КонецЕсли;	
КонецФункции	

Функция ПолучитьТаблицуОстатковЛимитовАкцептантов() Экспорт
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = Отчеты.ЛимитыАвансовАкцептантов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
		
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат ТЗ;	
КонецФункции	