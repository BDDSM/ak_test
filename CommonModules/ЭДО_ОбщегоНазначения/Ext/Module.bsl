/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьКаталогЗагрузкиФайлов() Экспорт
	
	ИмяКаталогаЗагрузкиФайлов = КаталогВременныхФайлов() + "ЭДО_Загрузка";
	
	КаталогЗагрузкиФайлов = Новый Файл(ИмяКаталогаЗагрузкиФайлов);
	
	Если НЕ КаталогЗагрузкиФайлов.Существует() Тогда
		СоздатьКаталог(ИмяКаталогаЗагрузкиФайлов);	
	КонецЕсли;
	
	Возврат ИмяКаталогаЗагрузкиФайлов;
	
КонецФункции

Процедура СообщитьОбОшибке(ТекстОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации("ЭДО", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);				
	Сообщить(ТекстОшибки);
	
КонецПроцедуры 


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДОКУМЕНТОВ

Функция ПолучитьНастройкиОбменаПоОрганизациям(КаналОбмена) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭДО_КаналыОбменаОрганизации.Организация,
	                      |	ЭДО_КаналыОбменаОрганизации.ДатаНачалаЗагрузки,
	                      |	ЭДО_КаналыОбменаОрганизации.ИдентификаторПоследнегоСобытия,
	                      |	ЭДО_КаналыОбменаОрганизации.ДатаПоследнегоСобытия
	                      |ИЗ
	                      |	Справочник.ЭДО_КаналыОбмена.Организации КАК ЭДО_КаналыОбменаОрганизации
	                      |ГДЕ
	                      |	ЭДО_КаналыОбменаОрганизации.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", КаналОбмена);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Процедура ОбновитьНастройкиОбменаПоОрганизации(КаналОбмена, Кэш, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОрганизации = Кэш.Организации[Организация];
	
	СправочникОбъект = КаналОбмена.ПолучитьОбъект();
	
	СтрокаОрганизации = СправочникОбъект.Организации.Найти(Организация);
	
	Если СтрокаОрганизации.ИдентификаторПоследнегоСобытия = НастройкиОрганизации.ИдентификаторПоследнегоСобытия И 
			 СтрокаОрганизации.ДатаПоследнегоСобытия = НастройкиОрганизации.ДатаПоследнегоСобытия Тогда 
		Возврат;
		
	КонецЕсли; 
	
	СтрокаОрганизации.ИдентификаторПоследнегоСобытия = НастройкиОрганизации.ИдентификаторПоследнегоСобытия;
	СтрокаОрганизации.ДатаПоследнегоСобытия = НастройкиОрганизации.ДатаПоследнегоСобытия;
	
	Попытка 
		СправочникОбъект.Записать();	
	Исключение
		ЗаписьЖурналаРегистрации("ЭДО", УровеньЖурналаРегистрации.Ошибка, , , Строка(КаналОбмена) + ". " + "Не удалось обновить идентификатор последнего события для <" + Организация + "> по причине: " + ОписаниеОшибки());									
	КонецПопытки; 
	
КонецПроцедуры 


Функция НайтиСоздатьСтатусДокумента(КаналОбмена, КодОператора, НаименованиеОператора) Экспорт
	
	Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		Родитель = Справочники.ЭДО_СтатусыДокументовОператоров.Диадок;
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		Родитель = Справочники.ЭДО_СтатусыДокументовОператоров.СБИС;
		
	КонецЕсли; 
	
	Статус = Справочники.ЭДО_СтатусыДокументовОператоров.НайтиПоКоду(КодОператора, , Родитель);
	
	Если ЗначениеЗаполнено(Статус) Тогда
		Возврат Статус;
	КонецЕсли; 
	
	НовыйОбъект = Справочники.ЭДО_СтатусыДокументовОператоров.СоздатьЭлемент();
	
	НовыйОбъект.Код = КодОператора;
	НовыйОбъект.Наименование = НаименованиеОператора;
	
	НовыйОбъект.Родитель = Родитель ;
	НовыйОбъект.КаналОбмена = КаналОбмена;
	НовыйОбъект.Статус = Перечисления.ЭДО_СтатусыДокументов.Прочее;
	
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции	

Функция НайтиСоздатьТипДокумента(КаналОбмена, НаименованиеОператора) Экспорт
	
	Если ПустаяСтрока(НаименованиеОператора) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		Родитель = Справочники.ЭДО_ТипыДокументовОператоров.Диадок;
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		Родитель = Справочники.ЭДО_ТипыДокументовОператоров.СБИС;
		
	КонецЕсли; 
	
	ТипДокумента = Справочники.ЭДО_ТипыДокументовОператоров.НайтиПоКоду(НаименованиеОператора);
	
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		Возврат ТипДокумента;
	КонецЕсли; 
	
	НовыйОбъект = Справочники.ЭДО_ТипыДокументовОператоров.СоздатьЭлемент();
	
	НовыйОбъект.Код = НаименованиеОператора;
	НовыйОбъект.Наименование = НаименованиеОператора;	
	
	НовыйОбъект.Родитель = Родитель;	
	НовыйОбъект.КаналОбмена = КаналОбмена;
	НовыйОбъект.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.Прочее;
	
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции	

Функция НайтиСоздатьКонтрагента(КаналОбмена, ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		ИмяПоляНаименование = "Диадок_Наименование";
		ИмяПоляАдрес = "Диадок_Адрес";
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		ИмяПоляНаименование = "СБИС_Наименование";
		ИмяПоляАдрес = "СБИС_Адрес";
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭДО_Контрагенты.Ссылка,
	                      |	ЭДО_Контрагенты.Диадок_Наименование,
	                      |	ЭДО_Контрагенты.СБИС_Наименование
	                      |ИЗ
	                      |	Справочник.ЭДО_Контрагенты КАК ЭДО_Контрагенты
	                      |ГДЕ
	                      |	ЭДО_Контрагенты.ИНН = &ИНН
	                      |	И ЭДО_Контрагенты.КПП = &КПП");
	
	Запрос.УстановитьПараметр("ИНН", ДанныеКонтрагента.ИНН);
	Запрос.УстановитьПараметр("КПП", ДанныеКонтрагента.КПП);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка[ИмяПоляНаименование]) Тогда
			Возврат Выборка.Ссылка;			
		КонецЕсли; 

		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		КонтрагентОбъект = Справочники.ЭДО_Контрагенты.СоздатьЭлемент();		
		
		КонтрагентОбъект.Наименование = "<" + ДанныеКонтрагента.Наименование + ">";			
		КонтрагентОбъект.ИНН = ДанныеКонтрагента.ИНН;	
		КонтрагентОбъект.КПП = ДанныеКонтрагента.КПП;	
	КонецЕсли; 
	
	КонтрагентОбъект[ИмяПоляНаименование] = ДанныеКонтрагента.Наименование;	
	КонтрагентОбъект[ИмяПоляАдрес] = ДанныеКонтрагента.Адрес;			
	
	КонтрагентОбъект.Записать();
	
	Возврат КонтрагентОбъект.Ссылка;
	
КонецФункции 


Функция СоздатьОбновитьФайлДокумента(КаталогЗагрузкиФайлов, Знач ИмяФайла, ТипФайла, ФайлСсылка, ИдентификаторДокумента, ДатаДокумента) Экспорт
	
	РаботаСФайлами.УстановитьРасширениеФайла(ИмяФайла, ТипФайла);
	
	ПолноеИмяФайла = КаталогЗагрузкиФайлов + "\" + ИмяФайла;

	Файл = Новый Файл(ПолноеИмяФайла);
	
	Если НЕ Файл.Существует() Тогда
		Возврат ФайлСсылка;
	КонецЕсли; 
		
	ФайлОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		
	Иначе
		// Поищем по идентификатору документа и названию
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ЗначенияСвойствОбъектов.Объект КАК Файл
		                      |ИЗ
		                      |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		                      |ГДЕ
		                      |	ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Файлы
		                      |	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.ЭДО_ИдентификаторДокумента)
		                      |	И ЗначенияСвойствОбъектов.Значение = &ИдентификаторДокумента
		                      |	И ЗначенияСвойствОбъектов.Объект.Наименование = &ИмяФайла");
		                                                                                           
		Запрос.УстановитьПараметр("ИдентификаторДокумента", ИдентификаторДокумента);
		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ФайлОбъект = Выборка.Файл.ПолучитьОбъект();
		КонецЕсли; 
	КонецЕсли; 
	
	Если ФайлОбъект = Неопределено Тогда
		ФайлОбъект = Справочники.Файлы.СоздатьЭлемент();
		ФайлОбъект.ИмяПодкаталога = "Документы ЭДО\" + Формат(ДатаДокумента, "ДФ=yyyyMM");		
	КонецЕсли; 
	
	ФайлОбъект.Расширение = ТипФайла;
	ФайлОбъект.Наименование = ИмяФайла;
	ФайлОбъект.Записать();
	
	КопироватьФайл(ПолноеИмяФайла, Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлОбъект.Ссылка));
	
	// Запишем привязку к идентификатору документа
	МЗ_ЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	
	МЗ_ЗначенияСвойств.Объект = ФайлОбъект.Ссылка;
	МЗ_ЗначенияСвойств.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ЭДО_ИдентификаторДокумента;;
	МЗ_ЗначенияСвойств.Значение = ИдентификаторДокумента;
	
	МЗ_ЗначенияСвойств.Записать();
	
	Возврат ФайлОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьПредставлениеДокументовПакета(ИдентификаторПакета) Экспорт
	
	ПредставлениеДокументов = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.ПредставлениеДокумента КАК ПредставлениеДокумента
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.ПредставлениеДокумента
	|ИЗ
	|	Документ.ЭДО_ИсходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеДокумента");
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПредставлениеДокументов = ПредставлениеДокументов + Выборка.ПредставлениеДокумента + Символы.ПС;	
	КонецЦикла;   	
	
	Возврат ПредставлениеДокументов;
	
КонецФункции


Функция ПолучитьПараметрыАвторизации(КаналОбмена, Организация, Пользователь) Экспорт
	
		// Если это загрузка документов, то авторизуемся по логину/паролю из ТЧ Организации, иначе - по параметрам пользователя
		Если Пользователь = Неопределено Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	ЭДО_КаналыОбменаОрганизации.Логин,
			                      |	ЭДО_КаналыОбменаОрганизации.Пароль,
			                      |	ЛОЖЬ КАК АвторизацияПоСертификату
			                      |ИЗ
			                      |	Справочник.ЭДО_КаналыОбмена.Организации КАК ЭДО_КаналыОбменаОрганизации
			                      |ГДЕ
			                      |	ЭДО_КаналыОбменаОрганизации.Ссылка = &КаналОбмена
			                      |	И ЭДО_КаналыОбменаОрганизации.Организация = &Организация");
			
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	ЭДО_КаналыОбменаПользователи.Логин,
			                      |	ЭДО_КаналыОбменаПользователи.Пароль,
			                      |	ЭДО_КаналыОбменаПользователи.АвторизацияПоСертификату,
			                      |	ЭДО_КаналыОбменаПользователи.ОтпечатокСертификата
								  |ИЗ
			                      |	Справочник.ЭДО_КаналыОбмена.Пользователи КАК ЭДО_КаналыОбменаПользователи
			                      |ГДЕ
			                      |	ЭДО_КаналыОбменаПользователи.Ссылка = &КаналОбмена
			                      |	И ЭДО_КаналыОбменаПользователи.Организация = &Организация
			                      |	И ЭДО_КаналыОбменаПользователи.Пользователь В (ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &Пользователь)
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	ВЫБОР
			                      |		КОГДА ЭДО_КаналыОбменаПользователи.Пользователь = &Пользователь
			                      |			ТОГДА 0
			                      |		ИНАЧЕ 1
			                      |	КОНЕЦ");
			
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("КаналОбмена", КаналОбмена);					
		Запрос.УстановитьПараметр("Организация", Организация);			
					
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			ЭДО_ОбщегоНазначения.СообщитьОбОшибке("" + КаналОбмена + ". Не найден пользователь для авторизации.");
			Возврат Неопределено;
		КонецЕсли;     
		
		Возврат Выборка;
		
КонецФункции 

Функция ПолучитьКэшПоКаналуОбмена(КаналОбмена, Пользователь = Неопределено) Экспорт
	
	Если  КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		Возврат  ЭДО_Диадок.ПолучитьКэш(Пользователь);
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		Возврат ЭДО_СБИС.ПолучитьКэш();
		
	КонецЕсли; 
	
КонецФункции 

Функция ПолучитьСписокСобытий(КаналОбмена, Кэш, Организация)
	
	Если  КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		Возврат  ЭДО_Диадок.ПолучитьСписокСобытий(Кэш, Организация);
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		Возврат ЭДО_СБИС.ПолучитьСписокСобытий(Кэш, Организация);
		
	КонецЕсли; 
	
КонецФункции

Функция ЭтоПолучениеДокумента(КаналОбмена, Событие)
	
	Если  КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		Возврат  ЭДО_Диадок.ЭтоПолучениеДокумента(Событие);
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		Возврат ЭДО_СБИС.ЭтоПолучениеДокумента(Событие);
		
	КонецЕсли; 
	
КонецФункции 

Функция ДокументБылЗагружен(КаналОбмена, СтрокаСобытия)
	
	Если  КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		Возврат  ЭДО_Диадок.ДокументБылЗагружен(СтрокаСобытия.Событие);
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		Возврат ЭДО_СБИС.ДокументБылЗагружен(СтрокаСобытия.Документ);
		
	КонецЕсли; 
	
КонецФункции 

Процедура ЗагрузитьСобытие(КаналОбмена, Кэш, Организация, СтрокаСобытия, Автоприкрепление = Истина)
	
	Если  КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		 ИдентификаторПакета = ЭДО_Диадок.ЗагрузитьСобытие(Организация, СтрокаСобытия.Событие, Кэш.КаталогЗагрузкиФайлов);
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		ИдентификаторПакета = ЭДО_СБИС.ЗагрузитьСобытие(Кэш, Организация, СтрокаСобытия.Документ, СтрокаСобытия.Событие);
		
	КонецЕсли; 
	
	Если ИдентификаторПакета <> Неопределено И ЭтоПолучениеДокумента(КаналОбмена, СтрокаСобытия.Событие) И Автоприкрепление Тогда
		Обработки.ЭДО_Интерфейс.ПоискИПрикрепленияЗаявокИПрикрепленныхДокументовПоИДПакета(ИдентификаторПакета);
	КонецЕсли; 
	
КонецПроцедуры 


Процедура ЗагрузитьДокументыПоОрганизации(КаналОбмена, Кэш, Организация, КоличествоСобытийОграничение = Неопределено, Автоприкрепление = Истина)
	
	НастройкиОрганизации = Кэш.Организации[Организация];
	
	СчетчикЗагруженныхСобытий = 0;
	
	Пока Истина  Цикл
		
		СписокСобытий = ПолучитьСписокСобытий(КаналОбмена, Кэш, Организация);
		
		КоличествоСобытий = СписокСобытий.Количество();
		
		Если КоличествоСобытий = 0 Тогда
			Прервать;
		КонецЕсли; 
		
		Если СписокСобытий[КоличествоСобытий-1].ДатаСобытия < НастройкиОрганизации.ДатаНачалаЗагрузки Тогда
			НастройкиОрганизации.ИдентификаторПоследнегоСобытия = СписокСобытий[КоличествоСобытий-1].ИдентификаторСобытия;
			НастройкиОрганизации.ДатаПоследнегоСобытия = СписокСобытий[КоличествоСобытий-1].ДатаСобытия ;
			
			Продолжить;
		КонецЕсли; 
		
		Для Каждого СтрокаСобытия Из СписокСобытий Цикл
			
			Если СтрокаСобытия.ДатаСобытия < НастройкиОрганизации.ДатаНачалаЗагрузки Тогда
				НастройкиОрганизации.ИдентификаторПоследнегоСобытия = СтрокаСобытия.ИдентификаторСобытия;
				НастройкиОрганизации.ДатаПоследнегоСобытия = СтрокаСобытия.ДатаСобытия;			
				
				Продолжить;
			КонецЕсли; 
			
			// События, отличные от получения новых документов обрабатываем только для уже загруженных 
			Если НЕ ЭтоПолучениеДокумента(КаналОбмена, СтрокаСобытия.Событие) И НЕ ДокументБылЗагружен(КаналОбмена, СтрокаСобытия) Тогда
				НастройкиОрганизации.ИдентификаторПоследнегоСобытия = СтрокаСобытия.ИдентификаторСобытия;
				НастройкиОрганизации.ДатаПоследнегоСобытия = СтрокаСобытия.ДатаСобытия;			
				
				Продолжить;
			КонецЕсли; 
			
			ЗагрузитьСобытие(КаналОбмена, Кэш, Организация, СтрокаСобытия, Автоприкрепление);
			
			НастройкиОрганизации.ИдентификаторПоследнегоСобытия = СтрокаСобытия.ИдентификаторСобытия;
			НастройкиОрганизации.ДатаПоследнегоСобытия = СтрокаСобытия.ДатаСобытия;			
		
			СчетчикЗагруженныхСобытий = СчетчикЗагруженныхСобытий + 1;			
			
			Если КоличествоСобытийОграничение <> Неопределено И СчетчикЗагруженныхСобытий = КоличествоСобытийОграничение Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если КоличествоСобытийОграничение <> Неопределено И СчетчикЗагруженныхСобытий = КоличествоСобытийОграничение Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;		
	
КонецПроцедуры 

Процедура ЗагрузитьДокументы(КаналОбмена, КоличествоСобытийОграничение = Неопределено, Автоприкрепление = Истина) Экспорт 
	
	Кэш = ПолучитьКэшПоКаналуОбмена(КаналОбмена);
	
	Если Кэш = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого КлючЗначение Из Кэш.Организации Цикл
		Организация = КлючЗначение.Ключ;
		НастройкиОрганизации = КлючЗначение.Значение;
		
		Попытка 
			ЗагрузитьДокументыПоОрганизации(КаналОбмена, Кэш, Организация, КоличествоСобытийОграничение, Автоприкрепление);
		Исключение
			ЭДО_ОбщегоНазначения.СообщитьОбОшибке(Строка(КаналОбмена) + ". " + ОписаниеОшибки());							
		КонецПопытки; 
		
		// Если при загрузке сработало исключение - в настройках будет идентификатор последнего успешно загруженного события
		ОбновитьНастройкиОбменаПоОрганизации(КаналОбмена, Кэш, Организация);		
	КонецЦикла;  
	
КонецПроцедуры 

Функция ЗагрузитьДокументыФоновымЗаданием(КоличествоСобытийОграничение = Неопределено, Автоприкрепление = Истина) Экспорт
	
	ТекущееЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание(); 
	
	Фильтр = Новый Структура("ИмяМетода, Состояние", "ЭДО_ОбщегоНазначения.ЗагрузитьДокументыФоновымЗаданием", СостояниеФоновогоЗадания.Активно);
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Фильтр);
	
	Для Каждого Задание Из МассивЗаданий Цикл
		Если ТекущееЗадание = Неопределено ИЛИ Задание.УникальныйИдентификатор <> ТекущееЗадание.УникальныйИдентификатор Тогда
			Возврат Задание;
		КонецЕсли; 
	КонецЦикла;  
		
	Если ТекущееЗадание = Неопределено Тогда		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(КоличествоСобытийОграничение);
		
		Возврат ФоновыеЗадания.Выполнить("ЭДО_ОбщегоНазначения.ЗагрузитьДокументыФоновымЗаданием", ПараметрыЗадания);
	КонецЕсли; 
	
	ЗагрузитьДокументы(Справочники.ЭДО_КаналыОбмена.Диадок, КоличествоСобытийОграничение, Автоприкрепление);
	ЗагрузитьДокументы(Справочники.ЭДО_КаналыОбмена.СБИС, КоличествоСобытийОграничение, Автоприкрепление); 
	
	ОбновитьСоответствияКонтрагентовЭДОПоИНН();
	
КонецФункции

Процедура ОбновитьСоответствияКонтрагентовЭДОПоИНН() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭДО_Контрагенты.Ссылка КАК Ссылка,
	                      |	Контрагенты.Ссылка КАК Контрагент
	                      |ИЗ
	                      |	Справочник.ЭДО_Контрагенты КАК ЭДО_Контрагенты
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	                      |		ПО ЭДО_Контрагенты.ИНН = Контрагенты.ИНН
	                      |ГДЕ
	                      |	ЭДО_Контрагенты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Контрагенты.ПометкаУдаления
	                      |ИТОГИ ПО
	                      |	Ссылка");
	
		
	ВыборкаКонтрагентыЭДО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКонтрагентыЭДО.Следующий() Цикл
		Выборка = ВыборкаКонтрагентыЭДО.Выбрать();
		
		Выборка.Следующий();
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.Контрагент = Выборка.Контрагент;
		СправочникОбъект.Наименование = Выборка.Контрагент;
		
		СправочникОбъект.Записать();
	КонецЦикла;   	

КонецПроцедуры 

Процедура ПерезагрузитьПакет(Кэш, ИдентификаторПакета, КаналОбмена) Экспорт
	
	Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		
		ЭДО_Диадок.ПерезагрузитьПакет(Кэш.Диадок, ИдентификаторПакета);
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		
		ЭДО_СБИС.ПерезагрузитьПакет(Кэш.СБИС, ИдентификаторПакета);
		
	КонецЕсли; 
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДПИСАНИЯ ДОКУМЕНТОВ

Функция ПолучитьКэш() Экспорт
	
	Кэш = Новый Структура;
	
	КэшДиадок = ЭДО_Диадок.ПолучитьКэш(ПараметрыСеанса.ТекущийПользователь);
	
	Если КэшДиадок = Неопределено Тогда
		Сообщить("Функции утверждения/отклонения для документов системы Диадок будут недоступны!")
	Иначе
		Кэш.Вставить("Диадок", КэшДиадок);
	КонецЕсли; 
	
	КэшСБИС = ЭДО_СБИС.ПолучитьКэш(ПараметрыСеанса.ТекущийПользователь);
		
	Если КэшСБИС = Неопределено Тогда
		Сообщить("Функции утверждения/отклонения для документов системы СБИС будут недоступны!")
	Иначе
		Кэш.Вставить("СБИС", КэшСБИС); 
	КонецЕсли; 

	
	Возврат Кэш;
	
КонецФункции

Функция УтвердитьОтклонитьДокумент(Кэш, ИдентификаторДокумента, КаналОбмена, Утвердить, Комментарий = "") Экспорт
	
	Если Не Утвердить И ПустаяСтрока(Комментарий)  Тогда
		Сообщить("Для отклонения документа необходимо указать комментарий!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли; 
	
	Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		
		Результат = ЭДО_Диадок.УтвердитьОтклонитьДокумент(Кэш.Диадок, ИдентификаторДокумента, Утвердить, Комментарий);
		
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		
		Результат = ЭДО_СБИС.УтвердитьОтклонитьДокумент(Кэш.СБИС, ИдентификаторДокумента, Утвердить, Комментарий);
		
		Если Результат.Свойство("ОбновитьСессию") Тогда
			//+++АК sole 2018.09.21 ИП-00018241
			//Кэш.СБИС = ЭДО_СБИС.ПолучитьКэш();
			Кэш.СБИС = ЭДО_СБИС.ПолучитьКэш(ПараметрыСеанса.ТекущийПользователь);
			//---АК sole 2018.09.21 ИП-00018241 
			
			Результат = ЭДО_СБИС.УтвердитьОтклонитьДокумент(Кэш.СБИС, ИдентификаторДокумента, Утвердить, Комментарий);
		КонецЕсли;		
		
	КонецЕсли; 
	
	Если НЕ Результат.ОперацияВыполнена Тогда
		Сообщить("Не удалось выполнить операцию утверждения / отклонения!", СтатусСообщения.Важное);
		Возврат Результат.ОперацияВыполнена;
	Иначе
		Если Утвердить = Ложь Тогда
			ОткрепитьДокументыЭДО(ИдентификаторДокумента, ИдентификаторДокумента, КаналОбмена);	
		КонецЕсли;	
	КонецЕсли; 
	
КонецФункции 

Процедура ОткрепитьДокументыЭДО(ИдентификаторДокумента, ИдентификаторПакета, КаналОбмена) Экспорт	
	
	Если ИдентификаторПакета = Неопределено Тогда
		ИдентификаторПакета = "";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Ссылка,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента
	|ПОМЕСТИТЬ ВТ_ДокЭДО
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИдентификаторПакета = """"
	|				ТОГДА ЭДО_ВходящийДокумент.ИдентификаторДокумента = &ИдентификаторДокумента
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &КаналОбмена = ЗНАЧЕНИЕ(Справочник.ЭДО_КаналыОбмена.Диадок)
	|						ТОГДА ЭДО_ВходящийДокумент.ИдентификаторДокумента = &ИдентификаторДокумента
	|					ИНАЧЕ ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|				КОНЕЦ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.Документ,
	|	ЭДО_СопоставлениеДокументов.ВидДокумента,
	|	ЭДО_СопоставлениеДокументов.ДокументЭДО,
	|	ЭДО_СопоставлениеДокументов.УдалитьДокументЭДО,
	|	ЭДО_СопоставлениеДокументов.ПодтверженоОператором,
	|	ЭДО_СопоставлениеДокументов.ПодтвержденоОтветственным
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокЭДО КАК ВТ_ДокЭДО
	|		ПО ЭДО_СопоставлениеДокументов.ДокументЭДО = ВТ_ДокЭДО.Ссылка
	|			И ЭДО_СопоставлениеДокументов.ВидДокумента = ВТ_ДокЭДО.ТипДокументаТипДокумента";
	
	Запрос.УстановитьПараметр("КаналОбмена", КаналОбмена);
	Запрос.УстановитьПараметр("ИдентификаторДокумента", ИдентификаторДокумента);
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого Стр Из ТЗ Цикл
		Запись = РегистрыСведений.ЭДО_СопоставлениеДокументов.СоздатьМенеджерЗаписи();
		Запись.Документ = Стр.Документ;
		Запись.ВидДокумента = Стр.ВидДокумента;
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
		
		Если ТипЗнч(Стр.Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			ИЛИ ТипЗнч(Стр.Документ) = Тип("ДокументСсылка.ПоступлениеДопРасходов")  Тогда
			
			ДокОбъект = Стр.Документ.ПолучитьОбъект();
			
			Если Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
				ДокОбъект.Акт = Справочники.Файлы.ПустаяСсылка();
			ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда	
				ДокОбъект.СчетФактура = Справочники.Файлы.ПустаяСсылка();
			ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
				ДокОбъект.УПД = Справочники.Файлы.ПустаяСсылка();					
			ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная Тогда	
				ДокОбъект.Акт = Справочники.Файлы.ПустаяСсылка();						
			КонецЕсли;
			
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ДокОбъект.Записать();		
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	



/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ИСХОДЯЩИХ ДОКУМЕНТОВ

Функция ОтправитьДокументЭДО(СсылкаНаОбъект, ТипДокумента) Экспорт
	Результат = Новый Структура("ДокументОтправлен, ТекстОшибки", Истина, "");	
	
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	ЭДО_КаналыОбмена.Ссылка КАК КаналОбмена,
		|	ЭДО_КаналыОбмена.Контрагент КАК Партнер,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоФизЛицо
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДО_КаналыОбмена КАК ЭДО_КаналыОбмена
		|		ПО РеализацияТоваровУслуг.Контрагент.ПоставщикЭДОКонтрагента = ЭДО_КаналыОбмена.Контрагент
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка,
		|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
		|	ВозвратТоваровПоставщику.Организация КАК Организация,
		|	ЭДО_КаналыОбмена.Ссылка КАК КаналОбмена,
		|	ЭДО_КаналыОбмена.Контрагент КАК Партнер,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровПоставщику.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоФизЛицо
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДО_КаналыОбмена КАК ЭДО_КаналыОбмена
		|		ПО ВозвратТоваровПоставщику.Контрагент.ПоставщикЭДОКонтрагента = ЭДО_КаналыОбмена.Контрагент
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		
	Иначе
		Результат = Новый Структура("ДокументОтправлен, ТекстОшибки", Ложь, "Не известный тип документа");	
		Возврат Результат;			
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыЭД ,Выборка);
	КонецЦикла;	
	
	//Всегда отправляем через диадок
	ПараметрыЭД.КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок;
	//Если ЗначениеЗаполнено(ПараметрыЭД.КаналОбмена) = Ложь Тогда
	//	Ошибка = "У контрагента не указан поставщик ЭДО";
	//	
	//	Результат.ТекстОшибки = Ошибка;
	//	Результат.ДокументОтправлен = Ложь;
	//	
	//	Возврат Результат;
	//КонецЕсли;
	
	ПараметрыЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПараметрыЭД.НаправлениеЭД = Перечисления.ЭДО_НаправленияДокументов.Исходящий;		
	
	КэшЭДО = ПолучитьКэшПоКаналуОбмена(ПараметрыЭД.КаналОбмена, ПараметрыСеанса.ТекущийПользователь);
	
	НастройкиОрганизации = КэшЭДО.Организации[ПараметрыЭД.Организация];
	
	Если НастройкиОрганизации = Неопределено Тогда
		Ошибка = "Не найдены настройки ЭДО для организиации " + Строка(ПараметрыЭД.Организация) + 
		" по каналу обмена " + Строка(ПараметрыЭД.КаналОбмена);
		
		Результат.ТекстОшибки = Ошибка;
		Результат.ДокументОтправлен = Ложь;
		
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЭД.КэшЭДО = НастройкиОрганизации; 
	
	ПараметрыЭД.ТипДокумента = ТипДокумента;
	
	//Формирование и заполнение струкутры ЭД
	СтруктруаЭД = ПолучитьСтуктуруЭД();	
	ЗаполнитьСтрукуруЭД(СтруктруаЭД, ПараметрыЭД);	
	
	
	
	
	
	СтруктураПараметров = ЭСФСтруктураПараметров(ПараметрыЭД.ЭтоФизЛицо);
	СтруктураСлужебныхПолейФНС(СтруктураПараметров);	
	ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктруаЭД, СтруктураПараметров);
	
	ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктруаЭД, СтруктураПараметров); 
	Если СформироватьСчетФактуру(СтруктураПараметров) = Истина Тогда
		ОтправитьФайлПоКаналуОбмена(СтруктураПараметров, ПараметрыЭД, СтруктруаЭД);			
		
		Результат.ТекстОшибки = ПараметрыЭД.ТекстОшибки;
		Результат.ДокументОтправлен = ПараметрыЭД.РезультатОтправки;
	КонецЕсли;	
	
	
	Возврат Результат;
КонецФункции	


//Формирование XML
//xml формируем по xsd схемам как для СБИС так и для Диадок 

///////////////////////////////////////////////////////////////////////////
///////////////Служебные функции для работы фабрики

Функция ПолучитьОбъектТипа(Тип, Схема = "http://www.diadoc.ru/docs/forms/sf_upd") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъекта(Тип, Схема);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъекта(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Объект = ПолучитьОбъектТипа(ИмяОбъекта, ПространствоИменСхемы);
	
	Если Объект <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO") Тогда
		СвойстваОбъекта = Объект.Свойства();
		ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);
		Если ИскомоеСвойство <> Неопределено Тогда
			Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);
			ВозвращаемоеЗначение = Фасет.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтрРазделить(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка установки значения свойства ""%1""!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		
	КонецПопытки
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция ДатаДД_ММ_ГГГГ(ДатаВремя)
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции

Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
	+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПредставлениеСтавкиНДС(Ставка)
	СтрокаБезПроцента = СтрЗаменить(Строка(Ставка),"%","");
	Возврат СтрЗаменить(СтрЗаменить(СтрокаБезПроцента,"Б","б")," / ","/");
КонецФункции


Процедура ОтправитьФайлПоКаналуОбмена(СтруктураПараметров, ПараметрыЭД, СтрукутраЭД)
	Если ПараметрыЭД.КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		ОтправитьФайлЭДО(ПараметрыЭД, СтрукутраЭД, СтруктураПараметров);
	КонецЕсли;	
КонецПроцедуры	

Функция ОтправитьФайлЭДО(ПараметрыЭД, СтрукутраЭД, СтруктураПараметров) Экспорт
	Результат = Истина;
	
	ПараметрыЭД.Вставить("РезультатОтправки", Ложь);		   				
	ПараметрыЭД.Вставить("ТекстОшибки", "");
	
	Попытка
		Task = ПараметрыЭД.КэшЭДО.Organization.CreateSendTaskFromFile(СтруктураПараметров.ПолноеИмяФайла, СтрукутраЭД.ТипДокументаЭДО);
		Task.CounterAgentId = Task.Content.Buyer.boxId;
		Task.FileName = СтруктураПараметров.ПолноеИмяФайла;
		Task.CustomDocumentId = СтруктураПараметров.УникальныйИдентификатор;
		
		Если Task.CounterAgentId = Неопределено Или Task.CounterAgentId = "" Тогда 
			Результат = Ложь;	
			ПараметрыЭД.ТекстОшибки = "Не удалось определить boxId Контрагента";
		Иначе
			Document = Task.Send();	
			ЭДО_Диадок.ЗагрузитьДокумент(Document, ПараметрыЭД.Организация,,,, ПараметрыЭД.СсылкаНаОбъект);
		КонецЕсли;		
		
	Исключение		
		ПараметрыЭД.ТекстОшибки = "Не удалось отправить файл по причине: " + ОписаниеОшибки();		
		Результат = Ложь;
	КонецПопытки;
	
		
	ПараметрыЭД.РезультатОтправки = Результат;
	      	       	
	Возврат Результат;
	
КонецФункции	

///////////////////////////////////////////////////////////////////////////
///////Определение параметров ЭД

Функция ПолучитьВидЭД(КаналОбмена)
	//Пока только для УПД диадок потом изменю
	Возврат "UniversalTransferDocument";
КонецФункции	

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("Партнер",              Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	ПараметрыЭД.Вставить("КаналОбмена",			 Неопределено);
	ПараметрыЭД.Вставить("ЭтоФизЛицо",			 Ложь);
	ПараметрыЭД.Вставить("КэшЭДО",				 Неопределено);
	
	ПараметрыЭД.Вставить("ТипДокумента",		 Неопределено);
	
	Возврат ПараметрыЭД;
	
КонецФункции

Функция ПолучитьСтуктуруЭД()
	
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Неопределено);
	СтруктураЭД.Вставить("НаправлениеЭД", Неопределено);
	СтруктураЭД.Вставить("Отправитель",   Неопределено);
	СтруктураЭД.Вставить("Получатель",    Неопределено);
	СтруктураЭД.Вставить("НомерВерсииЭД", Неопределено);
	СтруктураЭД.Вставить("НомерЭД",       Неопределено);
	СтруктураЭД.Вставить("ДатаЭД",        ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД",    Неопределено);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", Неопределено);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",  Неопределено);
	СтруктураЭД.Вставить("Организация",   Неопределено);
	СтруктураЭД.Вставить("Контрагент",    Неопределено);
	СтруктураЭД.Вставить("СоглашениеЭД",  Неопределено);
	СтруктураЭД.Вставить("УникальныйИдентификатор",   Новый УникальныйИдентификатор);
	
	СтруктураЭД.Вставить("ПрефиксИдФайла", "");
	СтруктураЭД.Вставить("КНД", "");
	
	СтруктураЭД.Вставить("ТипДокументаЭДО", "");
	
	СтруктураЭД.Вставить("ПространствоИмен", "");
	СтруктураЭД.Вставить("Функция", "");
	
	СтруктураСлужебныхПолейФНС(СтруктураЭД);
	
	Возврат СтруктураЭД;
КонецФункции

//Формирование начальной структуры для выгрузки
Функция ЭСФСтруктураПараметров(ЭтоФизЛицо = Ложь)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерСчФ"); // Порядковый номер счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("ДатаСчФ"); // Дата составления счета-фактуры счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("КодВалюты"); // Валюта: Код (Строка 4) 
	СтруктураПараметров.Вставить("НомерИсправленияИсходногоСчФ"); // (optional) Исправление: № (Строка 1а)
	СтруктураПараметров.Вставить("ДатаИсправленияИсходногоСчФ"); // (optional) Исправление: Дата  (Строка 1а)
	
	СтруктураПараметров.Вставить("Организация", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Организация.Вставить("ОбязательныеПоля", "НаименованиеОрганизации, Адрес, ЭтоФизЛицо" + ?(ЭтоФизЛицо,", Фамилия, Имя",""));
	
	СтруктураПараметров.Вставить("Контрагент", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Контрагент.Вставить("ОбязательныеПоля", "НаименованиеОрганизации, Адрес, ЭтоФизЛицо");
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(Истина)); // в параметрах подписанта для СФ, должность - не обязательный реквизит.
	
	СтруктураПараметров.Вставить("ДокументыОснования");
	
	// Если счет-фактура составляется на выполнение работы (оказание услуги), грузо(отправитель/получатель) - ставится прочерк.
	СтруктураПараметров.Вставить("ТолькоУслуги", Ложь);
	
	// При формировании ЭСФ, для грузо(отправителя/получателя) используются только следующие поля структуры:
	// ЭтоФизЛицо, НаименованиеОрганизации, Фамилия, Имя, Отчество, Адрес.
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураРеквизитовУчастникаОбменаФНС());
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("Грузоотправитель", СтруктураРеквизитовУчастникаОбменаФНС());
	СведенияОГрузоотправителе.Вставить("ОнЖе", Истина); // может указываться только для грузоотправителя
	СтруктураПараметров.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	// Сведения о платежно-расчетном документе (строка 5)
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД"); // Номер платежно-расчетного документа
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД"); // Дата составления платежно-расчетного документа
	СтруктураПараметров.Вставить("ПлатежныеДокументы", ПлатежныеДокументы);
	
	СтруктураПараметров.Вставить("ТаблицаТоваров", ЭСФТаблицаСведенийОТоваре());
	СтруктураПараметров.Вставить("СуммаБезНДСВсего"); // Стоимость товаров (работ, услуг), имущественных прав без налога - всего
	СтруктураПараметров.Вставить("СуммаСНДСВсего"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего
	СтруктураПараметров.Вставить("СуммаНДСВсего"); // Сумма НДС, предъявляемая покупателю
	//МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("http://www.diadoc.ru/docs/forms/sf_upd", "Файл.Документ.СвСчФакт.ИнфПолФХЖ1", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	//МаксДлинаСтр = ПолучитьСвойствоПоляXDTOсхемы("http://www.diadoc.ru/docs/forms/sf_upd", "Файл.Документ.ТаблСчФакт.СведТов", "ИнфПолФХЖ2", ВидФасетаXDTO.МаксДлина);
	
	МаксДлина = 20;
	МаксДлинаСтр = 20;
	
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлинаСтр - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "НомерСчФ, ДатаСчФ, КодВалюты, Организация, Контрагент, Подписант,
	|ТаблицаТоваров, СуммаСНДСВсего");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
	"НомерСтроки, НаименованиеНоменклатуры, Акциза, СтавкаНДС, СтавкаНДСТип, Сумма");
	
	
	СтруктураПараметров.Вставить("Функция", "");

	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЭСФТаблицаСведенийОТоваре()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	// Сведения о товаре (работе, услуге)
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки"); // Номер строки таблицы
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры"); // Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод"); // (optional) Код единицы измерения (Графа 2)
	ТаблицаТоваров.Колонки.Добавить("Количество"); // (optional) Количество (объем) (Графа 3)
	ТаблицаТоваров.Колонки.Добавить("Цена"); // (optional) Цена (тариф) за единицу измерения (Графа 4)
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС"); // (optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
	ТаблицаТоваров.Колонки.Добавить("Сумма"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
	ТаблицаТоваров.Колонки.Добавить("Акциза"); // В том числе сумма акциза (Графа 6)
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС"); // Налоговая ставка - величина
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип"); // Тип налоговой ставки
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС"); // Сумма НДС, предъявляемая покупателю (Графа 8)
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения"); // (optional) Цифровой код страны происхождения товара (Графа 10)
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации"); // (optional) Номер таможенной декларации (Графа11)
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Процедура СтруктураСлужебныхПолейФНС(СтруктураСлужебныеПоля = Неопределено)
	
	Если ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура") Тогда
		СтруктураСлужебныеПоля = Новый Структура;
	КонецЕсли;
	
	СтруктураСлужебныеПоля.Вставить("ВерсПрог");
	СтруктураСлужебныеПоля.Вставить("ВерсФорм");
	СтруктураСлужебныеПоля.Вставить("ИдФайл");
	СтруктураСлужебныеПоля.Вставить("ИдОтпр");
	СтруктураСлужебныеПоля.Вставить("ИдПол");
	СтруктураСлужебныеПоля.Вставить("НаимОрг");
	СтруктураСлужебныеПоля.Вставить("ИННЮЛ");
	СтруктураСлужебныеПоля.Вставить("ИдЭДО");
	СтруктураСлужебныеПоля.Вставить("КНД");
	СтруктураСлужебныеПоля.Вставить("ВидЭД");
	
	СтруктураСлужебныеПоля.Вставить("ДатаДок");
	СтруктураСлужебныеПоля.Вставить("ВремДок");
	СтруктураСлужебныеПоля.Вставить("НаимПервДок");
	СтруктураСлужебныеПоля.Вставить("ОКУДПервДок"); // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("НомФорм");     // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("УникальныйИдентификатор");
	
	
КонецПроцедуры

Функция СтруктураРеквизитовУчастникаОбменаФНС()
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("КодОКПО");
	СтруктураУчастника.Вставить("НаименованиеОрганизации");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("КПП");
	СтруктураУчастника.Вставить("КодОКОПФ");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Адрес", СтруктураАдресаФНС());
	СтруктураУчастника.Вставить("Телефон");
	СтруктураУчастника.Вставить("Факс");
	СтруктураУчастника.Вставить("БанковскийСчет", Новый Структура("НомерСчета, НаимБанк, БИК"));
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция СтруктураАдресаФНС()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

Функция СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо = Ложь)
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Должность");
	СтруктураУчастника.Вставить("СвидетельствоОРегистрацииИП");
	СтруктураУчастника.Вставить("ОбязательныеПоля", "ИНН, Фамилия, Имя, ЭтоФизЛицо" + ?(ЭтоФизЛицо,"",", Должность"));
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

//Заполнение и проверка структуры для выгрузки

Процедура ЗаполнитьСтрукуруЭД(СтруктруаЭД, ПараметрыЭД)
	
	Если ПараметрыЭД.КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		СтруктруаЭД.Получатель = Диадок_ПолучитьДанныеКонтрагента(ПараметрыЭД.КэшЭДО, ПараметрыЭД.Контрагент);
		СтруктруаЭД.Отправитель = Диадок_ПолучитьДанныеКонтрагента(ПараметрыЭД.КэшЭДО, ПараметрыЭД.Организация);
		
		СтруктруаЭД.ВерсПрог = "Diadoc 1.0";
		
	ИначеЕсли ПараметрыЭД.КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда	
		
		СтруктруаЭД.Отправитель = "";
		СтруктруаЭД.Получатель = "";
		
		СтруктруаЭД.ВерсПрог = "SBIS";		
	КонецЕсли;	
	
	Если ПараметрыЭД.ТипДокумента = "УПД" Тогда
		СтруктруаЭД.ПрефиксИдФайла = "ON_SCHFDOPPR";
		СтруктруаЭД.КНД = "1115125";
		
		СтруктруаЭД.ТипДокументаЭДО = "UniversalTransferDocument";		
		СтруктруаЭД.ПространствоИмен = "http://www.diadoc.ru/docs/forms/sf_upd";
		
		СтруктруаЭД.Функция = "СЧФДОП";
	ИначеЕсли ПараметрыЭД.ТипДокумента = "СФ" Тогда
		СтруктруаЭД.ПрефиксИдФайла = "ON_SCHFDOPPR";
		СтруктруаЭД.КНД = "1115125";
		
		СтруктруаЭД.ТипДокументаЭДО = "UniversalTransferDocument";		
		СтруктруаЭД.ПространствоИмен = "http://www.diadoc.ru/docs/forms/sf_upd";	
		
		СтруктруаЭД.Функция = "СЧФ";
	ИначеЕсли ПараметрыЭД.ТипДокумента = "ТОРГ-12" Тогда
		СтруктруаЭД.ПрефиксИдФайла = "ON_SCHFDOPPR";
		СтруктруаЭД.КНД = "1115125";
		
		СтруктруаЭД.ТипДокументаЭДО = "UniversalTransferDocument";		
		СтруктруаЭД.ПространствоИмен = "http://www.diadoc.ru/docs/forms/sf_upd";
		
		СтруктруаЭД.Функция = "ДОП";
	ИначеЕсли ПараметрыЭД.ТипДокумента = "АКТ" Тогда
		СтруктруаЭД.ПрефиксИдФайла = "ON_SCHFDOPPR";
		СтруктруаЭД.КНД = "1115125";
		
		СтруктруаЭД.ТипДокументаЭДО = "UniversalTransferDocument";		
		СтруктруаЭД.ПространствоИмен = "http://www.diadoc.ru/docs/forms/sf_upd";	
		
		СтруктруаЭД.Функция = "ДОП";
	КонецЕсли;	
	
	
	СтруктруаЭД.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	СтруктруаЭД.Вставить("ТипДокумента", ПараметрыЭД.ТипДокумента);
	
	СтруктруаЭД.Вставить("КаналОбмена", ПараметрыЭД.КаналОбмена);
	
КонецПроцедуры	

Процедура ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров)
	
	СтруктураПараметров.ВерсПрог = СтруктураЭД.ВерсПрог;
	СтруктураПараметров.ВерсФорм = "5.01";
	СтруктураПараметров.ИдОтпр = СтруктураЭД.Отправитель;
	СтруктураПараметров.ИдПол = СтруктураЭД.Получатель;
	
	ЗаполнитьРеквизитыОператораЭДО(СтруктураЭД, СтруктураПараметров);
	
	ТекДатаВремя = ТекущаяДатаСеанса();
	СтруктураПараметров.ДатаДок = Формат(ТекДатаВремя, "ДФ=dd.MM.yyyy");
	СтруктураПараметров.ВремДок = Прав(СтрЗаменить("0" + Формат(ТекДатаВремя, "ДЛФ=T"), ":", "."), 8);
	СтруктураПараметров.ВидЭД = СтруктураЭД.ВидЭД;
	СтруктураПараметров.КНД = СтруктураЭД.КНД;
	СтруктураПараметров.УникальныйИдентификатор = СтруктураЭД.УникальныйИдентификатор;
	
	
	ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");
	СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
	СтруктураЭД.ПрефиксИдФайла,
	СтруктураЭД.Получатель,
	СтруктураЭД.Отправитель,
	ГГГГММДД,
	СтруктураЭД.УникальныйИдентификатор);
	СтруктураПараметров.ИдФайл = ФНСИмяФайла(СтруктураФайла);
	
	АдресКаталога = КаталогВременныхФайлов();
	СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
	
КонецПроцедуры


Процедура ЗаполнитьРеквизитыОператораЭДО(СтруктруаЭД, СтруктураПараметров)
	Если СтруктруаЭД.ВерсПрог = "Diadoc 1.0" Тогда  	
		Наименование = "АО ""ПФ ""СКБ Контур""";
		ИНН = "6663003127";
		ИдентификаторОператора = "2BM";
	ИначеЕсли СтруктруаЭД.ВерсПрог = "SBIS" Тогда  
		Наименование = "ООО ""Компания ""Тензор""";
		ИНН = "7605016030";
		ИдентификаторОператора = "2BE";
	Иначе
		Наименование = "";
		ИНН = "";
		ИдентификаторОператора = "";
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("НаимОрг", Наименование);
	СтруктураПараметров.Вставить("ИННЮЛ", ИНН);
	СтруктураПараметров.Вставить("ИдЭДО", ИдентификаторОператора);
	
	
КонецПроцедуры

Функция ЗаполнитьДанныеПодписанта(ПодписантXDTO, СтруктураДанныхПодписанта, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(СтруктураДанныхПодписанта) = Тип("Структура") Тогда
		Если ТипЗнч(СтруктураДанныхПодписанта.ЭтоФизЛицо) = Тип("Булево") И СтруктураДанныхПодписанта.ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипа("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипа("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураДанныхПодписанта.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураДанныхПодписанта.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураДанныхПодписанта.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтруктураДанныхПодписанта.ИНН, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.СвидетельствоОРегистрацииИП) Тогда
				ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтруктураДанныхПодписанта.СвидетельствоОРегистрацииИП, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПодписантXDTO, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипа("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипа("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураДанныхПодписанта.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураДанныхПодписанта.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураДанныхПодписанта.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", СтруктураДанныхПодписанта.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", СтруктураДанныхПодписанта.Должность, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", СтруктураДанныхПодписанта.НаимОрг, Истина, ТекстОшибки);			
			
			ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", СтруктураДанныхПодписанта.НаимОрг, Истина, ТекстОшибки);			
			
			ЗаполнитьСвойствоXDTO(ПодписантXDTO,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
			
			//ОблПолн="5" ОснПолн="Должностные обязанности" Статус="1"
			ЗаполнитьСвойствоXDTO(ПодписантXDTO,"ОблПолн", "5", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПодписантXDTO,"ОснПолн", "Должностные обязанности", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПодписантXDTO,"Статус", "1", Истина, ТекстОшибки);
		КонецЕсли;
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеГрузоОтправителяПолучателяЭСФ(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	Перем ЭтоФизЛицо, Адрес, НаименованиеОрганизации, Фамилия, Имя, Отчество;
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника) = Тип("Структура")
		И СтруктураПараметровУчастника.Свойство("ЭтоФизЛицо", ЭтоФизЛицо) И ТипЗнч(ЭтоФизЛицо) = Тип("Булево") Тогда
		НаимГОП = ПолучитьОбъектТипа("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);
		Если ЭтоФизЛицо Тогда
			ФИОИП = ПолучитьОбъектТипа("СвГрузОтпрПолТип.НаимГОП.ФИОИП",  ПространствоИменСхемы);
			СтруктураПараметровУчастника.Свойство("Фамилия", Фамилия);
			СтруктураПараметровУчастника.Свойство("Имя", Имя);
			СтруктураПараметровУчастника.Свойство("Отчество", Отчество);
			ЗаполнитьСвойствоXDTO(ФИОИП, "Фамилия", Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИОИП, "Имя", Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИОИП, "Отчество", Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(НаимГОП, "ФИОИП", ФИОИП, Истина, ТекстОшибки);
		Иначе
			СтруктураПараметровУчастника.Свойство("НаименованиеОрганизации", НаименованиеОрганизации);
			ЗаполнитьСвойствоXDTO(НаимГОП, "НаимОрг", НаименованиеОрганизации, Истина ,ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "НаимГОП", НаимГОП, Истина, ТекстОшибки);
		
		Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
			ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
		КонецЕсли;
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Функция ЗаполнитьДанныеУчастникаФНСДляЭСФ(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника.ЭтоФизЛицо) = Тип("Булево") Тогда
		ИдСв = ПолучитьОбъектТипа("УчастникТип.ИдСв", ПространствоИменСхемы);
		
		Если СтруктураПараметровУчастника.ЭтоФизЛицо Тогда
			СвФЛ = ПолучитьОбъектТипа("УчастникТип.ИдСв.СвИП", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", СтруктураПараметровУчастника.ИНН, ,ТекстОшибки);
			
			ФИО = ПолучитьОбъектТипа("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураПараметровУчастника.Фамилия,Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураПараметровУчастника.Имя, Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураПараметровУчастника.Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИО", ФИО, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвФЛ, , ТекстОшибки);
		Иначе
			СвЮЛ = ПолучитьОбъектТипа("УчастникТип.ИдСв.СвЮЛУч", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СтруктураПараметровУчастника.НаименованиеОрганизации,  ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СтруктураПараметровУчастника.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СтруктураПараметровУчастника.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛУч", СвЮЛ, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Адрес = "";
	Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
		ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура ЗаполнитьАдресФНС(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы)
	
	Если ТипЗнч(АдресМестонахождения) = Тип("СписокЗначений") Тогда
		ЗаполненныйТип = Неопределено;
		Для Каждого Элемент Из АдресМестонахождения Цикл
			Если Элемент.Пометка Тогда
				ЗаполненныйТип = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
			АдресТип = ПолучитьОбъектТипа("АдресТип", ПространствоИменСхемы);
			
			Адрес = ЗаполненныйТип.Значение;
			Если ЗаполненныйТип.Представление = "Структурированный" Тогда
				АдрРФ = ПолучитьОбъектТипа("АдрРФТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", Адрес.КодРегион, ПространствоИменСхемы, ТекстОшибки);
				РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
				Для Каждого Элемент Из Адрес Цикл
					Если Найти(РеквизитыАдреса, Элемент.Ключ) > 0 И ЗначениеЗаполнено(Элемент.Значение) Тогда
						ЗаполнитьСвойствоXDTO(АдрРФ, Элемент.Ключ, Элемент.Значение, , ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, , ТекстОшибки);
			ИначеЕсли ЗаполненныйТип.Представление = "Произвольный" Тогда
				АдресXDTO = ПолучитьОбъектТипа("АдрИнфТип", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(АдресXDTO, "КодСтр", СокрЛП(Адрес.КодСтраны), ,ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрТекст", СокрЛП(Адрес.АдресСтрокой), ,ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдресXDTO, , ТекстОшибки);
			Иначе
				
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Кварт", "");
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ВидКонтрагента]) Тогда
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров[ВидКонтрагента], "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Объект = СтруктураПараметров[ВидКонтрагента];
			ВидАдресаОрганизации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		Иначе
			Объект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров[ВидКонтрагента], "ИндивидуальныйПредприниматель");
			ВидАдресаОрганизации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
		КонецЕсли;
	Иначе
		Объект = СтруктураПараметров[ВидКонтрагента];
		ВидАдресаОрганизации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	Данные = Новый Структура("Объект, Тип, Вид", Объект, Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдресаОрганизации);
	Адрес = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
	
	ПроизвольныйАдрес = (ВРЕГ(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Адрес)) <> ВРЕГ(Адрес.Представление));
	Если ПроизвольныйАдрес Тогда
		СтруктураАдреса.Вставить("АдресРФ", Ложь);
		//Попытаемся найти код страны
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", Адрес.Поле1);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлассификаторСтранМира.Код КАК КодСтраны
		|ИЗ
		|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|
		|ГДЕ
		|	КлассификаторСтранМира.Наименование = &Наименование
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураАдреса.Вставить("КодСтраны", Выборка.КодСтраны);
		Иначе
			СтруктураАдреса.Вставить("КодСтраны", Справочники.КлассификаторСтранМира.Россия.Код);			
		КонецЕсли;
		
		СтруктураАдреса.Вставить("АдресСтрокой", Адрес.Представление);			
	Иначе
		СтруктураАдреса.Вставить("АдресРФ", Истина);
		СтруктураАдреса.Вставить("Индекс", СокрЛП(Адрес.Поле1));
		СтруктураАдреса.Вставить("КодСтраны", Справочники.КлассификаторСтранМира.Россия.Код);
		СтруктураАдреса.Вставить("КодРегион", СокрЛП(РегламентированнаяОтчетность.КодРегионаПоНазванию(Адрес.Поле2)));
		СтруктураАдреса.Вставить("Район", СокрЛП(Адрес.Поле3));
		СтруктураАдреса.Вставить("Город", СокрЛП(Адрес.Поле4));
		СтруктураАдреса.Вставить("НаселПункт", СокрЛП(Адрес.Поле5));
		СтруктураАдреса.Вставить("Улица", СокрЛП(Адрес.Поле6));
		СтруктураАдреса.Вставить("Дом", СокрЛП(Адрес.Поле7));
		СтруктураАдреса.Вставить("Корпус", СокрЛП(Адрес.Поле8));
		СтруктураАдреса.Вставить("Кварт", СокрЛП(Адрес.Поле9));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресВСпискеТиповАдресов(СписокТиповАдресов, АдресУчастника, ТипАдреса = "Структурированный")
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СписокТиповАдресов.ЗаполнитьПометки(Ложь);
	ВыбранныйТипАдреса = Неопределено;
	Для Каждого Элемент Из СписокТиповАдресов Цикл
		Если Элемент.Представление = ТипАдреса Тогда
			ВыбранныйТипАдреса = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранныйТипАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВыбранныйТипАдреса.Значение, АдресУчастника);
		ВыбранныйТипАдреса.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУчастникаОбмена(СтруктураУчастника, Участник, СведенияОбУчастнике)
	
	СтруктураУчастника.Вставить("КодОКПО", СведенияОбУчастнике.КодПоОКПО);
	СтруктураУчастника.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	СтруктураУчастника.Вставить("ИНН", СведенияОбУчастнике.ИНН);
	СтруктураУчастника.Вставить("КПП", СведенияОбУчастнике.КПП);
	СтруктураУчастника.Вставить("КодОКОПФ");
	СтруктураУчастника.Вставить("ЭтоФизЛицо", Участник.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	Если СтруктураУчастника.ЭтоФизЛицо Тогда
		
		ФИО = СведенияОбУчастнике.ПолноеНаименование;
		Если ВРЕГ(Лев(ФИО,2))="ИП" Тогда
			ФИО = Прав(ФИО, СтрДлина(ФИО)-2);
		ИначеЕсли ВРЕГ(Лев(ФИО, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
			ФИО = Прав(ФИО, СтрДлина(ФИО)-СтрДлина("Индивидуальный предприниматель"));
		КонецЕсли;
		ФИО = СтрЗаменить(ФИО, """","");
		ФИО = СтрЗаменить(ФИО, "'","");
		ФИО = СтрЗаменить(ФИО, "  "," ");
		ФИО = СокрЛП(ФИО);
		
		ФИОМассив = СтрЗаменить(ФИО, " ", Символы.ПС);
		
		Если СтрЧислоСтрок(ФИОМассив) = 3 Тогда		
			СтруктураУчастника.Имя      = СтрПолучитьСтроку(ФИОМассив, 2);
			СтруктураУчастника.Отчество = СтрПолучитьСтроку(ФИОМассив, 3);
			СтруктураУчастника.Фамилия  = СтрПолучитьСтроку(ФИОМассив, 1);
		Иначе
			СтруктураУчастника.Имя      = "-";
			СтруктураУчастника.Отчество = "-";
			СтруктураУчастника.Фамилия  = СокрЛП(Лев(ФИО, 59));
		КонецЕсли;
	КонецЕсли;
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, Участник, "Ссылка", "Юр", "");
	
	Если АдресУчастника.АдресРФ = Истина Тогда	
		ЗаполнитьАдресВСпискеТиповАдресов(СтруктураУчастника.Адрес, АдресУчастника, "Структурированный");
	Иначе
		ЗаполнитьАдресВСпискеТиповАдресов(СтруктураУчастника.Адрес, АдресУчастника, "Произвольный");		
	КонецЕсли;	
	
	СтруктураУчастника.Вставить("Телефон", СведенияОбУчастнике.Телефоны);
	СтруктураУчастника.Вставить("Факс");
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) Тогда
		БИК = "";
		СтруктураУчастника.БанковскийСчет.НомерСчета = НомерСчета;
		Если СведенияОбУчастнике.Свойство("Банк")
			И ЗначениеЗаполнено(СведенияОбУчастнике.Банк) Тогда
			СтруктураУчастника.БанковскийСчет.НаимБанк = СведенияОбУчастнике.Банк.Наименование;
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) Тогда
			СтруктураУчастника.БанковскийСчет.БИК = БИК;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.Контрагент,
		|	РеализацияТоваровУслуг.НомерИсходящегоДокумента,
		|	РеализацияТоваровУслуг.НомерИсходящегоСчетаФактуры,
		|	РеализацияТоваровУслуг.ДатаИсходящегоДокумента,
		|	РеализацияТоваровУслуг.ДатаИсходящегоСчетаФактуры,
		|	"""" КАК Сделка,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.Грузоотправитель,
		|	РеализацияТоваровУслуг.Грузополучатель
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	NULL КАК СтранаПроисхождения,
		|	"""" КАК ПредставлениеСтраны,
		|	"""" КАК СтранаПроисхожденияКод,
		|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	"""" КАК НомерГТД,
		|	"""" КАК ПредставлениеГТД,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена,
		|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	""Товары"" КАК ВидПоступления
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000)),
		|	NULL,
		|	"""",
		|	"""",
		|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление,
		|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	""Услуги""
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Наименование,
		|	ДоговорыКонтрагентов.Номер,
		|	ДоговорыКонтрагентов.Дата КАК Дата
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ДоговорыКонтрагентов.Владелец = РеализацияТоваровУслуг.Контрагент
		|			И ДоговорыКонтрагентов.Организация = РеализацияТоваровУслуг.Организация
		|ГДЕ
		|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|	И РеализацияТоваровУслуг.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Номер,
		|	ВозвратТоваровПоставщику.Дата,
		|	ВозвратТоваровПоставщику.Организация,
		|	ВозвратТоваровПоставщику.Контрагент,
		|	ВозвратТоваровПоставщику.НомерИсходящегоДокумента,
		|	ВозвратТоваровПоставщику.НомерИсходящегоСчетаФактуры КАК НомерИсходящегоСчетаФактуры,
		|	ВозвратТоваровПоставщику.ДатаИсходящегоДокумента,
		|	ВозвратТоваровПоставщику.ДатаИсходящегоСчетаФактуры КАК ДатаИсходящегоСчетаФактуры,
		|	"""" КАК Сделка,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровПоставщику.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаВключаетНДС,
		|	ВозвратТоваровПоставщику.Грузоотправитель,
		|	ВозвратТоваровПоставщику.Грузополучатель
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	NULL КАК СтранаПроисхождения,
		|	"""" КАК ПредставлениеСтраны,
		|	"""" КАК СтранаПроисхожденияКод,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	"""" КАК НомерГТД,
		|	"""" КАК ПредставлениеГТД,
		|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
		|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
		|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
		|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
		|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
		|	""Товары"" КАК ВидПоступления
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Наименование,
		|	ДоговорыКонтрагентов.Номер,
		|	ДоговорыКонтрагентов.Дата КАК Дата
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ПО ДоговорыКонтрагентов.Владелец = ВозвратТоваровПоставщику.Контрагент
		|			И ДоговорыКонтрагентов.Организация = ВозвратТоваровПоставщику.Организация
		|ГДЕ
		|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|	И ВозвратТоваровПоставщику.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
	
	МассивЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = МассивЗапросов.Получить(0).Выгрузить().Получить(0);
	ТабличнаяЧасть = МассивЗапросов.Получить(1).Выгрузить();
	
	ТЗДоговоры = МассивЗапросов.Получить(2).Выгрузить();
	
	Если ЗначениеЗаполнено(ДанныеШапки.НомерИсходящегоСчетаФактуры) Тогда			
		СтруктураПараметров.НомерСчФ 			= ДанныеШапки.НомерИсходящегоСчетаФактуры;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.НомерИсходящегоСчетаФактуры) Тогда			
		СтруктураПараметров.НомерСчФ 			= ДанныеШапки.НомерИсходящегоДокумента;		
	Иначе	
		СтруктураПараметров.НомерСчФ 			= ДанныеШапки.Номер;
	КонецЕсли;
	
	//+++ AK suvv 2018.12.04 ИП-00019743.02 
	СтруктураНомерСФ = Новый Структура("Номер, Организация", СтруктураПараметров.НомерСчФ, ДанныеШапки.Организация);	
	СтруктураПараметров.НомерСчФ = ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураНомерСФ);
	//--- AK suvv
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДатаИсходящегоСчетаФактуры) Тогда			
		СтруктураПараметров.ДатаСчФ 			= ДанныеШапки.ДатаИсходящегоСчетаФактуры;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ДатаИсходящегоДокумента) Тогда			
		СтруктураПараметров.ДатаСчФ 			= ДанныеШапки.ДатаИсходящегоДокумента;		
	Иначе	
		СтруктураПараметров.ДатаСчФ 			= ДанныеШапки.Дата;
	КонецЕсли;
	
	СтруктураПараметров.КодВалюты 				= "643";
	
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеШапки.Контрагент, СтруктураПараметров.ДатаСчФ );
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеШапки.Организация, СтруктураПараметров.ДатаСчФ );
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Организация, ДанныеШапки.Организация, СведенияОПоставщике);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Контрагент, ДанныеШапки.Контрагент, СведенияОПокупателе);
	
	
	//
	Грузоотправитель 	= ДанныеШапки.Грузоотправитель;
	Если ЗначениеЗаполнено(Грузоотправитель) = Истина Тогда
		СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеШапки.Грузоотправитель, СтруктураПараметров.ДатаСчФ );	
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, ДанныеШапки.Грузоотправитель, СведенияОГрузоотправителе);
		СтруктураПараметров.СведенияОГрузоотправителе.ОнЖе = Ложь;
	Иначе	
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, ДанныеШапки.Организация, СведенияОПоставщике);
		СтруктураПараметров.СведенияОГрузоотправителе.ОнЖе = Истина;
	КонецЕсли;	
	
	Грузополучатель 	= ДанныеШапки.Грузополучатель;
	Если ЗначениеЗаполнено(Грузополучатель) = Истина И Грузополучатель <> ДанныеШапки.Контрагент 
	//+++ AK suvv 2018.11.11 ИП-00019743.01	
		или (СтруктураЭД.ТипДокумента = "УПД" и ЗначениеЗаполнено(Грузополучатель) и СсылкаНаОбъект.Товары.Количество() <> 0 и 
		(ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику"))) Тогда
	//--- AK suvv
		СведенияОГрузополучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеШапки.Грузополучатель, СтруктураПараметров.ДатаСчФ );	
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Грузополучатель, ДанныеШапки.Грузополучатель, СведенияОГрузополучателе);
	Иначе	
		СтруктураПараметров.Грузополучатель = "";		
	КонецЕсли;
	

	//
	
	

	
	
	НомерСтроки = 1;
	
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			И Строка.ВидПоступления = "Товары" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод      = Строка.ЕдиницаИзмеренияКод;
		НоваяСтрока.Количество               = Строка.Количество;
		СуммаБезНДС = ?(ДанныеШапки.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеШапки.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.СуммаБезНДС  = СуммаБезНДС;
		НоваяСтрока.Сумма        = СуммаБезНДС + Строка.СуммаНДС;
		НоваяСтрока.СтавкаНДС    = ПредставлениеСтавкиНДС(Строка.СтавкаНДС);
		
		НоваяСтрока.СтавкаНДС 	 =?(НоваяСтрока.СтавкаНДС = "без НДС", НоваяСтрока.СтавкаНДС, НоваяСтрока.СтавкаНДС + "%");
		
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СтавкаНДСТип = "процент";
		НоваяСтрока.КодСтраныПроисхождения    = ?(Строка.СтранаПроисхожденияКод=NULL,"",Строка.СтранаПроисхожденияКод);
		НоваяСтрока.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		НоваяСтрока.Акциза      = "без акциза";
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("ЕдиницаИзмеренияНаименование", Строка.ЕдиницаИзмерения);
		//ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Товары", Истина, НомерСтроки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	
	// Данных по платежным документам в РТУ пока нет 
	
	//Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДатОплат Цикл
	//	
	//	НоваяСтрока = СтруктураПараметров.ПлатежныеДокументы.Добавить();
	//	НоваяСтрока.ДатаПРД 	= Строка.ДатаПлатежноРасчетногоДокумента;
	//	НоваяСтрока.НомерПРД 	= Строка.НомерПлатежноРасчетногоДокумента;
	//	
	//КонецЦикла;
	//
	
	
	// Заполним данные по подписанту
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(ДанныеШапки.Организация, СтруктураПараметров.ДатаСчФ );
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЛОЖЬ;
	СтруктураПараметров.Подписант.ИНН = СведенияОПоставщике.ИНН;
	СтруктураПараметров.Подписант.Должность = СТрока(Руководители.РуководительДолжность);
	СтруктураПараметров.Подписант.Фамилия = Руководители.РуководительФИО.Фамилия;
	СтруктураПараметров.Подписант.Имя = Руководители.РуководительФИО.Имя;
	СтруктураПараметров.Подписант.Отчество = Руководители.РуководительФИО.Отчество;
	
	
		
	//
	СтруктураПараметров.ТолькоУслуги        = ТолькоУслуги;
	СтруктураПараметров.СуммаБезНДСВсего	= СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДС");
	СтруктураПараметров.СуммаСНДСВсего		= СтруктураПараметров.ТаблицаТоваров.Итог("Сумма");
	СтруктураПараметров.СуммаНДСВсего		= СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДС");
	
	Если ТЗДоговоры.Количество() = 0 Тогда
		СтруктураПараметров.Вставить("ОснованиеПередачи", "Отсутствует");
		СтруктураПараметров.Вставить("НомОсн", "");
		СтруктураПараметров.Вставить("ДатаОсн", Дата(1,1,1));
	Иначе
		СтрДоговор = ТЗДоговоры.Получить(0);
		Наименование = НРег(СтрДоговор.Наименование);
		Наименование = СтрЗаменить(Наименование, "договор", "");		
		СтруктураПараметров.Вставить("ОснованиеПередачи", "Договор " + Наименование);
		СтруктураПараметров.Вставить("НомОсн", СтрДоговор.Номер);
		СтруктураПараметров.Вставить("ДатаОсн", СтрДоговор.Дата);
	КонецЕсли;	
	
	
	СтруктураПараметров.Функция = СтруктураЭД.Функция;
	
	
	НаимДокОпр = "";
	ПоФактХЖ = "";
	
	Если СтруктураЭД.ТипДокумента = "УПД" Тогда 	
		НаимДокОпр = "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
		ПоФактХЖ = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг).";		
	ИначеЕсли СтруктураЭД.ТипДокумента = "АКТ" Тогда 
		НаимДокОпр = "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
		ПоФактХЖ = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг).";		
	ИначеЕсли СтруктураЭД.ТипДокумента = "СФ" Тогда 
	ИначеЕсли СтруктураЭД.ТипДокумента = "ТОРГ-12" Тогда 	
		НаимДокОпр = "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
		ПоФактХЖ = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг).";		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НаимДокОпр", НаимДокОпр);
	СтруктураПараметров.Вставить("ПоФактХЖ", ПоФактХЖ);
			
	Возврат Истина;
	
КонецФункции

Функция Диадок_ПолучитьДанныеКонтрагента(Кэш, Контрагент)
	
	СписокКонтрагентов = Кэш.Organization.GetCounteragentListByInnKpp(Контрагент.ИНН, Контрагент.КПП);
	
	ЧислоКонтрагентов = СписокКонтрагентов.Count();
	
	НашлиКонтрагента = Ложь;		
	Если ЧислоКонтрагентов > 0 Тогда
		Сч  = 0;
		Пока Сч < ЧислоКонтрагентов Цикл		
			
			Если НашлиКонтрагента = Истина Тогда
				Прервать;
			КонецЕсли;
			
			ТекКонтрагент = СписокКонтрагентов.GetItem(Сч);			
			Сч = Сч + 1;
			
			Если ТекКонтрагент.IsActive	= Истина И ТекКонтрагент.IsRoaming = Ложь Тогда			
				НашлиКонтрагента = Истина;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	Если ТекКонтрагент = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ТекКонтрагент.FnsParticipantId;
	КонецЕсли;	
	
	Возврат ТекКонтрагент;
	
	
	
КонецФункции


//Выгрузка заполненной струкутры
Функция СформироватьСчетФактуру(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "http://www.diadoc.ru/docs/forms/sf_upd";
	
	Попытка
		Файл = ПолучитьОбъектТипа("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   СтруктураПараметров.ИдФайл,  Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипа("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПол),  Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипа("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипа("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		
		СвСчФакт = ПолучитьОбъектТипа("Файл.Документ.СвСчФакт", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ),Истина,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "КодОКВ", СтруктураПараметров.КодВалюты, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.НомерИсправленияИсходногоСчФ)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаИсправленияИсходногоСчФ) Тогда
			ИспрСчФ = ПолучитьОбъектТипа("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", СтруктураПараметров.НомерИсправленияИсходногоСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаИсправленияИсходногоСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвСчФакт,"ИспрСчФ", ИспрСчФ,,ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипа("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФ(СвПрод, СтруктураПараметров.Организация, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПрод", СвПрод, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвПокуп = ПолучитьОбъектТипа("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФ(СвПокуп, СтруктураПараметров.Контрагент, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвГрузоотправителя = "";
		Если НЕ СтруктураПараметров.ТолькоУслуги И СтруктураПараметров.Свойство("СведенияОГрузоотправителе", СвГрузоотправителя)
			И ТипЗнч(СвГрузоотправителя) = Тип("Структура") Тогда
			ГрузОт = ПолучитьОбъектТипа("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);
			ОнЖе = "";
			Если СвГрузоотправителя.Свойство("ОнЖе", ОнЖе) И ОнЖе = Истина Тогда // "=" - т.к. тип ОнЖе может быть не булево
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", "он же", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
			Иначе         				
				СвГрузОтпр = ПолучитьОбъектТипа("УчастникТип", ПространствоИменСхемы);
				Если ЗаполнитьДанныеУчастникаФНСДляЭСФ(СвГрузОтпр, СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", СвГрузОтпр, Истина, ТекстОшибки);				
					ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
				КонецЕсли;									
			КонецЕсли;
		КонецЕсли;
		
		СвГрузоополучателя = "";
		Если НЕ СтруктураПараметров.ТолькоУслуги
			И СтруктураПараметров.Свойство("Грузополучатель", СвГрузоополучателя)
			И ТипЗнч(СвГрузоополучателя) = Тип("Структура") Тогда
			СвГрузПолуч = ПолучитьОбъектТипа("УчастникТип", ПространствоИменСхемы);
			Если ЗаполнитьДанныеУчастникаФНСДляЭСФ(СвГрузПолуч, СтруктураПараметров.Грузополучатель, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузПолуч", СвГрузПолуч, Истина, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ПлатежныеДокументы = Неопределено;
		Если СтруктураПараметров.Свойство("ПлатежныеДокументы", ПлатежныеДокументы) И ТипЗнч(ПлатежныеДокументы) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаПлатежки Из ПлатежныеДокументы Цикл
				СвПРД = ПолучитьОбъектТипа("Файл.Документ.СвСчФакт.СвПРД", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвПРД, "НомерПРД", СтрокаПлатежки.НомерПРД, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвПРД, "ДатаПРД", ДатаДД_ММ_ГГГГ(СтрокаПлатежки.ДатаПРД), Истина, ТекстОшибки);
				СвСчФакт.СвПРД.Добавить(СвПРД);
			КонецЦикла
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипа("Файл.Документ.СвСчФакт.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвСчФакт, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", СвСчФакт, Истина, ТекстОшибки);
		ТаблСчФакт = ПолучитьОбъектТипа("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);
		
		Для Каждого Товар из СтруктураПараметров.ТаблицаТоваров Цикл
			КолонкиТЗ = СтруктураПараметров.ТаблицаТоваров.Колонки;
			СведТов = ПолучитьОбъектТипа("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", Товар.Сумма, Истина, ТекстОшибки);
			
			Акциз = ПолучитьОбъектТипа("Файл.Документ.ТаблСчФакт.СведТов.Акциз", ПространствоИменСхемы);
			Если НЕ ЗначениеЗаполнено(Товар.Акциза) Тогда
				ЗначениеАкциза = "без акциза";
			Иначе
				Если ТипЗнч(Товар.Акциза) = Тип("Число") Тогда
					ЗначениеАкциза = Формат(Товар.Акциза, "ЧДЦ=2; ЧРД=.; ЧГ=");
				Иначе
					ЗначениеАкциза = СокрЛП(Товар.Акциза);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Акциз, "БезАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Акциз", Акциз, Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НалСт", Товар.СтавкаНДС, Истина, ТекстОшибки);
			
			Если КолонкиТЗ.Найти("ЕдиницаИзмеренияКод") <> Неопределено И ЗначениеЗаполнено(Товар.ЕдиницаИзмеренияКод) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ЕдиницаИзмеренияКод, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("Количество") <> Неопределено И ЗначениеЗаполнено(Товар.Количество) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КолТов", Товар.Количество, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("Цена") <> Неопределено И ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТов", Товар.Цена, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("СуммаБезНДС") <> Неопределено И ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", Товар.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			
			Если КолонкиТЗ.Найти("КодСтраныПроисхождения") <> Неопределено Тогда
				Если ТипЗнч(Товар.КодСтраныПроисхождения) = Тип("Массив") Тогда
					Для Каждого КодСтраны Из Товар.КодСтраныПроисхождения Цикл
						СведТов.КодПроисх.Добавить(КодСтраны);
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(Товар.КодСтраныПроисхождения) Тогда
					СведТов.КодПроисх.Добавить(Товар.КодСтраныПроисхождения);
				КонецЕсли;
			КонецЕсли;
			
			СумНДСТип = ПолучитьОбъектТипа("СумНДСТип", ПространствоИменСхемы);
			Если ВРег(СокрЛП(Товар.СтавкаНДС)) = ВРег("без НДС") Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, ТекстОшибки);
			Иначе
				Если Товар.СуммаНДС = 0 Тогда
					ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, ТекстОшибки);
				Иначе
					ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНал", Формат(Товар.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			
			Если КолонкиТЗ.Найти("НомерТаможеннойДекларации") <> Неопределено Тогда
				Если ТипЗнч(Товар.НомерТаможеннойДекларации) = Тип("Массив") Тогда
					Для Каждого ТД ИЗ Товар.НомерТаможеннойДекларации Цикл
						СведТов.НомерТД.Добавить(ТД);
					КонецЦикла;
				ИначеЕсли ТипЗнч(Товар.НомерТаможеннойДекларации) = Тип("Строка") И ЗначениеЗаполнено(Товар.НомерТаможеннойДекларации) Тогда
					СведТов.НомерТД.Добавить(Товар.НомерТаможеннойДекларации);
				КонецЕсли;
			КонецЕсли;
			
			//Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
			//	//Если СформироватьУниверсальныйДопФайл(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
			//		СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			//		ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
			//	//КонецЕсли;
			//КонецЕсли;
			
			ТаблСчФакт.СведТов.Добавить(СведТов);
		КонецЦикла;
		
		ВсегоОпл = ПолучитьОбъектТипа("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);
		СуммаБезНДСВсего = Неопределено;
		Если СтруктураПараметров.Свойство("СуммаБезНДСВсего", СуммаБезНДСВсего) Тогда
			ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", СуммаБезНДСВсего, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", СтруктураПараметров.СуммаСНДСВсего, Истина, ТекстОшибки);
		
		СумНалВсего = ПолучитьОбъектТипа("Файл.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего", ПространствоИменСхемы);
		
		Если СтруктураПараметров.СуммаНДСВсего = 0 Тогда
			ЗаполнитьСвойствоXDTO(СумНалВсего,"БезНДС", "без НДС", Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНал", Формат(СтруктураПараметров.СуммаНДСВсего, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
			ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНалВсего, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТаблСчФакт, "ВсегоОпл", ВсегоОпл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТаблСчФакт, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипа("Файл.Документ.Подписант", ПространствоИменСхемы);
		СтПодписант = СтруктураПараметров.Подписант;
		СтПодписант.Вставить("НаимОрг",  СтруктураПараметров.Организация.НаименованиеОрганизации);
		Если ЗаполнитьДанныеПодписанта(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			//ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
			Документ.Подписант.Добавить(Подписант);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТаблСчФакт, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Функция", СтруктураПараметров.Функция , Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", СтруктураПараметров.ДатаДок , Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", СтруктураПараметров.ВремДок , Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", СтруктураПараметров.Организация.НаименованиеОрганизации , Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.НаимДокОпр) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "НаимДокОпр", СтруктураПараметров.НаимДокОпр, Истина, ТекстОшибки);
		КонецЕсли;    
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПоФактХЖ) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "ПоФактХЖ", СтруктураПараметров.ПоФактХЖ, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвПер = ПолучитьОбъектТипа("Файл.Документ.СвПродПер.СвПер", ПространствоИменСхемы);
		
		СодОпер = "Товары переданы, работы сданы, услуги оказаны";
		
		ЗаполнитьСвойствоXDTO(СвПер, "СодОпер", СодОпер, Истина, ТекстОшибки);
		
		ОснПер = ПолучитьОбъектТипа("Файл.Документ.СвПродПер.СвПер.ОснПер", ПространствоИменСхемы); 
		
		ОснованиеПередачи = СтруктураПараметров.ОснованиеПередачи;
		
		ЗаполнитьСвойствоXDTO(ОснПер, "НаимОсн", ОснованиеПередачи, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.НомОсн) Тогда
			ЗаполнитьСвойствоXDTO(ОснПер, "НомОсн", СтруктураПараметров.НомОсн, Истина, ТекстОшибки);			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаОсн) Тогда
			ЗаполнитьСвойствоXDTO(ОснПер, "ДатаОсн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаОсн), Истина, ТекстОшибки);			
		КонецЕсли;	
		
		СвПер.ОснПер.Добавить(ОснПер);      		
		
		СвПродПер = ПолучитьОбъектТипа("Файл.Документ.СвПродПер", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвПродПер, "СвПер", СвПер, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "СвПродПер", СвПродПер, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Истина, "windows-1251");
		
		Возврат Истина;
	Исключение
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ВыгрузитьЭДвФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "windows-1251") Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры


