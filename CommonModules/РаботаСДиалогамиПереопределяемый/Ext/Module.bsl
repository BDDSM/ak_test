// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ


// Процедура предназначена для управления видимостью элементов формы,
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  ЭлементыФормы  - массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  УчетнаяПолитикаПоПерсоналу - структура, содержит данные учетной политики    
//    предприятия или конкретной организации
//
Процедура УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы,УчетнаяПолитикаПоПерсоналу,Организация = Неопределено) Экспорт
	
	ИспользуютсяНачисленияВВалюте			= Ложь;
	ПоказыватьТабельныеНомераВДокументах	= Ложь;
	ПоддерживатьНесколькоСхемМотивации		= Ложь;
	
	Если Организация = Неопределено Тогда
		Если УчетнаяПолитикаПоПерсоналу <> Неопределено Тогда
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ИспользуютсяНачисленияВВалюте",ИспользуютсяНачисленияВВалюте) Тогда
				ИспользуютсяНачисленияВВалюте = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоказыватьТабельныеНомераВДокументах",ПоказыватьТабельныеНомераВДокументах) Тогда
				ПоказыватьТабельныеНомераВДокументах = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоддерживатьНесколькоСхемМотивации",ПоддерживатьНесколькоСхемМотивации) Тогда
				ПоддерживатьНесколькоСхемМотивации = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИспользуютсяНачисленияВВалюте			= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ИспользуютсяНачисленияВВалюте");
		ПоказыватьТабельныеНомераВДокументах	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ПоказыватьТабельныеНомераВДокументах");
	КонецЕсли;
	
	ТипКолонкаТабличногоПоля = Тип("КолонкаТабличногоПоля");
	ТипПолеВвода = Тип("ПолеВвода");
	ТипНадпись = Тип("Надпись");
	ТипПанель  = Тип("Панель");
	
	Для каждого Элемент из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ТабельныйНомерСтрока" Тогда
			Элемент.Видимость			= ПоказыватьТабельныеНомераВДокументах;
			Элемент.ИзменятьВидимость	= Ложь;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта" Или Элемент.Имя = "ТекущаяВалюта") Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта1" Или Элемент.Имя = "ТекущаяВалюта1") Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта2" Или Элемент.Имя = "ТекущаяВалюта2")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта3" Или Элемент.Имя = "ТекущаяВалюта3")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта4" Или Элемент.Имя = "ТекущаяВалюта4")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта5" Или Элемент.Имя = "ТекущаяВалюта5")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и (Элемент.Имя = "Валюта6" Или Элемент.Имя = "ТекущаяВалюта6")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ВалютаЗавершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта1Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта2Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта3Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта4Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта5Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта6Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ПоВременнойСхемеМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаДоговораГПХ" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаДоговораГПХ" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "ПоВременнойСхемеМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипПанель и Элемент.Имя = "ПанельСхемыМотивации" Тогда
			СверткаПанелиМотивации = ?(ПоддерживатьНесколькоСхемМотивации, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);	
			Элемент.Свертка = СверткаПанелиМотивации;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу()

//Процедура предназначена для управления видимостью элементов формы, относящихся к Бухучету
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  СтруктураЭУ  - ключ: имя группы ЭУ, значение: массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  ВидимостьНУСчета - переменная, в которой возвращается    
//  Организация - организация, 
//
Процедура УстановитьВидимостьЭУБухучета(СтруктураЭУ, ВидимостьНУСчета = Ложь , Организация, Дата) Экспорт

	ДатаПериода = КонецМесяца(Дата); // на эту дату получаем значение учетной политики
	
	СтруктураПараметровПеременныхВеденияУчета = ОтражениеЗарплатыВРеглУчетеДополнительный.ПолучитьСтруктураПараметровПеременныхВеденияУчета(Организация, ДатаПериода);
	
	УСН = СтруктураПараметровПеременныхВеденияУчета.УСН;
	ОбъектНалогообложенияУСНДДоходыМинусРасходы = СтруктураПараметровПеременныхВеденияУчета.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	ВидимостьУСН = УСН и ОбъектНалогообложенияУСНДДоходыМинусРасходы;
	
	ВидимостьИП = СтруктураПараметровПеременныхВеденияУчета.ПредпринимательНаОСН;
	ВидимостьНУСчета = НЕ УСН и СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьСчетаНУ;
	ВидимостьНУ = НЕ ВидимостьНУСчета и СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьДанныеНУ;
	ВидимостьУчетПоПодразделениям = СтруктураПараметровПеременныхВеденияУчета.УчетПоПодразделениямНаСчетах;
	
	ТипКолонкаТабличногоПоля = Тип("КолонкаТабличногоПоля");
	
	Для каждого ЭлементСтруктуры Из СтруктураЭУ Цикл
		
		Ключ = ЭлементСтруктуры.Ключ;
		Если Ключ = "ВидимостьУСН" Тогда
			ПоказыватьЭУ = ВидимостьУСН;	
		ИначеЕсли Ключ = "ВидимостьИП" Тогда   
			ПоказыватьЭУ = ВидимостьИП;
		ИначеЕсли Ключ = "ВидимостьНУ" Тогда
			ПоказыватьЭУ = ВидимостьНУ;
		ИначеЕсли Ключ = "ВидимостьНУСчета" Тогда
			ПоказыватьЭУ = ВидимостьНУСчета;
		ИначеЕсли Ключ = "ВидимостьУчетПоПодразделениям" Тогда
			ПоказыватьЭУ = ВидимостьУчетПоПодразделениям;	
		КонецЕсли;	
		
		МассивЭУ = ЭлементСтруктуры.Значение;
		Для каждого Элемент Из МассивЭУ Цикл
			Элемент.Видимость = ПоказыватьЭУ;
			Если ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля Тогда
				Элемент.ИзменятьВидимость	= ПоказыватьЭУ;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры


// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
Процедура ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина, ВидРасчета = Неопределено, ТекущийВидРасчета = Ложь) Экспорт
		
	Если ВидРасчета = Неопределено Тогда
		Если ОформлениеСтроки.Ячейки.Найти("Надбавка") = Неопределено Тогда
			СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
		Иначе
			СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.Надбавка);
		КонецЕсли;
	Иначе
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
	КонецЕсли;
	
	Если ТекущийВидРасчета Тогда
		Показатель						= "ТекущийПоказатель";
		Валюта							= "ТекущаяВалюта";
		ТарифныйРазряд					= "ТекущийТарифныйРазряд";
		НаименованиеПоказательТР		= "НаименованиеТекущийПоказательТР";
		ОформлениеСтроки.Ячейки.До.Видимость	= Ложь;
		ОформлениеСтроки.Ячейки.После.Видимость	= Ложь;
	Иначе
		Показатель						= "Показатель";
		Валюта							= "Валюта";
		ТарифныйРазряд					= "ТарифныйРазряд";
		НаименованиеПоказательТР		= "НаименованиеПоказательТР";
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	КонецЕсли;
	
	ТолькоПросмотрЯчеек = Ложь;
	
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		УстановитьТолькоПросмотр = ТолькоПросмотрЯчеек;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки[ТарифныйРазряд + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ИспользуютсяТарифныеРазряды Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки[ТарифныйРазряд +СчПоказателей].Видимость = Истина;
			Иначе
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки[ТарифныйРазряд + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].ТолькоПросмотр = (НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"]) ИЛИ (УстановитьТолькоПросмотр);
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].ТолькоПросмотр = УстановитьТолькоПросмотр;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[Показатель + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[Валюта + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки[ТарифныйРазряд +СчПоказателей].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если не ЕстьПоказатели Тогда
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].УстановитьТекст("<вводится ежемесячно>");
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Истина;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Ложь;
		КонецЕсли;
		ОформлениеСтроки.Ячейки[Показатель+"1"].ТолькоПросмотр = Истина;
		Если ИспользуютсяТарифныеРазряды Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
			ОформлениеСтроки.Ячейки[ТарифныйРазряд + "1"].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриВыводеСтрокиПлановыхНачислений


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ


// Формирует представление переданного код дохода с "предметной" точки зрения
//
// Параметры
//  , КодДоходаЕСН - СправочникСсылка.ДоходыЕСН - описываемый код дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеКодаДоходаПоЕСН(КодДоходаЕСН) Экспорт
	
	Если КодДоходаЕСН = Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли Тогда
		РасшифровкаКодДоходаЕСН = "Не является объектом налогообложения по ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.3 ст. 236 НК РФ (выплаты за счет прибыли)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ДоговораАвторские Тогда
		РасшифровкаКодДоходаЕСН = "При исчислении ЕСН (в части Федерального бюджета и ФОМС) и взносов на обязательное пенсионное страхование учитываются произведенные расходы согласно п.5 ст.237 НК РФ, не облагаются целиком ЕСН в части ФСС согласно п.3 ст.238 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ДоговораГПХ Тогда
		РасшифровкаКодДоходаЕСН = "Облагаются целиком ЕСН (в части Федерального бюджета и ФОМС) и взносами на обязательное пенсионное страхование, не облагаются целиком ЕСН в части ФСС согласно п.3 ст.238 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.Матпомощь Тогда
		РасшифровкаКодДоходаЕСН = "Облагается ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование частично согласно пп. 15 п.1 ст. 238 НК РФ (материальная помощь)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.МатпомощьПриРожденииРебенка Тогда
		РасшифровкаКодДоходаЕСН = "Облагается ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование частично согласно пп. 3 п.1 ст. 238 НК РФ (материальная помощь при рождении ребенка)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом Тогда
		РасшифровкаКодДоходаЕСН = "Является объектом налогообложения, но не облагается целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно пп. 1–12 ст. 238 НК РФ (кроме пособий за счет ФСС)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.НеЯвляетсяОбъектом Тогда
		РасшифровкаКодДоходаЕСН = "Не является объектом налогообложения по ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.1 ст. 236 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяЦеликом Тогда
		РасшифровкаКодДоходаЕСН = "Облагается целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС Тогда
		РасшифровкаКодДоходаЕСН = "Не облагаются целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.1 ст. 238 НК РФ "
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаКодДоходаЕСН = "Порядок учета начисления определяется по расчетной базе"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ПустаяСсылка() Тогда
		РасшифровкаКодДоходаЕСН = "Не указан порядок учета начисления для целей исчисления ЕСН и взносов на обязательное пенсионное страхование"
	Иначе
		РасшифровкаКодДоходаЕСН = "Не отражается в учете для целей исчисления ЕСН и взносов на обязательное пенсионное страхование"
	КонецЕсли;
	
	Возврат РасшифровкаКодДоходаЕСН	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ




////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет видимостью показателей в табличном поле
// Парметры:
//		ТабличноеПоле - Табличное поле, в котором необходимо установить видимость показателей
//		ОформленияСтрокТабличногоПоля - оформления строк табличного поля
//		СведенияОВидахРасчета - соответствие, в котором хранятся сведения о виде расчета
Процедура ОбработатьОтображениеПоказателейДляРасчета(ТабличноеПоле, ОформленияСтрокТабличногоПоля, СведенияОВидахРасчета, Режим = "ПриРасчете", ВидРасчета = Неопределено) Экспорт

	// показатели будут видны, если в табличном поле включена видимость колонки Показатели
	Колонки = ТабличноеПоле.Колонки;
	ПоказыватьПоказатели = Колонки.Показатели.Видимость;
	
	ЕстьПоказатели = Ложь;
	
	Если ВидРасчета <> Неопределено Тогда
		РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим);
	Иначе
		РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(СведенияОВидахРасчета, ОформленияСтрокТабличногоПоля, , Режим);
	КонецЕсли;
	
	Для каждого ОформлениеСтроки Из ОформленияСтрокТабличногоПоля Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ВидРасчета = Неопределено Тогда
			Если ДанныеСтроки.ВидРасчета = Неопределено Тогда
				ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
			Иначе
				ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
			КонецЕсли;
		Иначе
			ДанныеСтрокиВидРасчета = ВидРасчета;
		КонецЕсли;
		СведенияОВидеРасчета = СведенияОВидахРасчета[ДанныеСтрокиВидРасчета];
		
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] и ПоказыватьПоказатели И
										(Не ЗначениеЗаполнено(ВидРасчета) Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) 
										Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно) И ЗначениеЗаполнено(ВидРасчета));
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели И 
											(Не ЗначениеЗаполнено(ВидРасчета) Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно) И ЗначениеЗаполнено(ВидРасчета));
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя и ПоказыватьПоказатели Тогда
					
					Если Режим = "ПриРасчете" Тогда
					
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
						Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
						
					ИначеЕсли Режим = "РазовыеНачисленияИУдержания" Тогда
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					КонецЕсли;
						
				КонецЕсли;
				
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда
					ЕстьПоказатели = Истина;
					Если ПоказыватьПоказатели Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] и ПоказыватьПоказатели Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда
			Если ЗначениеЗаполнено(ВидРасчета) Тогда
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
			Иначе
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Ложь;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	КонецЦикла;

КонецПроцедуры //ОбработатьОтображениеПоказателейДляРасчета()

// Вызывает процедуру показа Веб страницы и передает в нее адрес страницы с отзывом о конфигурации  
//
Процедура ПерейтиНаСтраницуОтзывОПрограмме() Экспорт

	РаботаСДиалогамиЗК.ПоказатьВебСтраницу("www.1c.ru/usability/inquirer/upp.jsp", "Отзыв о программе", "ОтзывОПрограмме");	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ




////////////////////////////////////////////////////////////////////////////////
// процедуры поддержки команд в журналах документов




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ДЕЙСТВИЙ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ







///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
// в.р., являющегося надбавкой 
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//  ВидДоговора  - ВидДоговора
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьСтруктуруОтборовНадбавокСотрудника(ВидДоговора) Экспорт
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	СсылкаПредопределенный = Новый Массив;
	СсылкаПредопределенный.Добавить(Ложь);
	
	СтруктураПараметров.Вставить("Предопределенный", СсылкаПредопределенный);
	
	СпоcобыРасчета = Новый Массив;
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
	
	СтруктураПараметров.Вставить("СпособРасчета", СпоcобыРасчета);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
// основного начисления сотрудника, регистрирующего отработанное время
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//  ВидДоговора  - ВидДоговора
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника(ВидДоговора) Экспорт
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	
	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ НАЧИСЛЕНИЙ И ПОКАЗАТЕЛЕЙ

Процедура ДобавитьОбъединенияВЗапросПоказатели(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисленияПоказатели.Ссылка,
	|	УправленческиеНачисленияПоказатели.Показатель,
	|	УправленческиеНачисленияПоказатели.НомерСтроки,
	|	УправленческиеНачисленияПоказатели.ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК УправленческиеНачисленияПоказатели
	|ГДЕ
	|	УправленческиеНачисленияПоказатели.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержанияПоказатели.Ссылка,
	|	УправленческиеУдержанияПоказатели.Показатель,
	|	УправленческиеУдержанияПоказатели.НомерСтроки,
	|	УправленческиеУдержанияПоказатели.ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК УправленческиеУдержанияПоказатели
	|ГДЕ
	|	УправленческиеУдержанияПоказатели.Ссылка В(&Ссылка)";

КонецПроцедуры // ДобавитьОбъединенияВЗапросПоказатели

Процедура ДобавитьОбъединенияВЗапросВидыРасчета(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	УправленческиеНачисления.СпособРасчета,
	|	ЛОЖЬ,
	|	УправленческиеНачисления.ЗачетОтработанногоВремени
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержания.Ссылка,
	|	УправленческиеУдержания.СпособРасчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|ГДЕ
	|	УправленческиеУдержания.Ссылка В(&Ссылка)";

КонецПроцедуры // ДобавитьОбъединенияВЗапросВидыРасчета
	
Процедура ДополнитьСведенияПВРПоТипуВР(СведенияПВРПоТипуВР) Экспорт
	
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления"), 				Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УправленческиеНачисления", Истина, Ложь, Ложь));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания"), 				Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УправленческиеУдержания", Ложь, Ложь, Ложь));
	
КонецПроцедуры // СведенияПВРПоТипуВР

Процедура ДополнитьСведенияОВидеРасчета(СведенияОВидеРасчета, ВидРасчета = Неопределено) Экспорт
	
	Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
		СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
		СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
		СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
		СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
		СведенияОВидеРасчета.Вставить("КоличествоПоказателей",0);
		СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
	КонецЕсли;
	
	Если ВидРасчета = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии Тогда
		СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Удержано по бухгалтерии");
		СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
		СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
		СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
		СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСведенияОВидеРасчета

Функция ПолеЗапросаВводВалютныхЗначений() Экспорт
	
	Возврат "
	|	ВЫБОР
	|		КОГДА Показатели.Валюта В (ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка), Константы.ВалютаУправленческогоУчета)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВводВалютныхЗначений,
	|";
	
КонецФункции // ПолеЗапросаВводВалютныхЗначений

Функция СкрыватьПредопределенныйПоказатель(Показатель, Режим) Экспорт
	
	Возврат Истина;
	
КонецФункции // СкрыватьПредопределенныйПоказатель

Функция ПолеЗапросаТочностьПредставленияПоказателя() Экспорт
	
	Возврат УправлениеПоказателямиСхемМотивации.ПолеЗапросаТочностьПредставленияПоказателя();
	
КонецФункции // ПолеЗапросаТочностьПредставленияПоказателя

