
// Функция формирует пакет обмена, который будет отправлен узлу УзелОбмена
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//
// Возвращаемое значение:
//  сформированный пакет, помещенный в хранилище значения
Функция СформироватьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого, НужнаИнициализацияУзла = Ложь) Экспорт
	
	Если НужнаИнициализацияУзла Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
		ОбменМобильноеПриложениеПереопределяемый.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена);
		ОбменМобильноеПриложениеПереопределяемый.ЗарегистрироватьИзмененияДанных(УзелОбмена);
	Иначе
		ОбменМобильноеПриложениеПереопределяемый.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена, НомерПринятого);
		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Очередь очищена по № " + НомерПринятого, УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	
	КонецЕсли;
	
	НомерСообщенияОчереди = УзелОбмена.НомерОтправленного;
	
	// Запись справочников и документов.
	ОбменМобильноеПриложениеПереопределяемый.ЗаписатьЗарегистрированныеДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди);
	
	// Запись остатков.
	//ОбменМобильноеПриложениеПереопределяемый.ЗаписатьОстаткиВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди);
	
	// Проверка порядка следования сообщений обмена.
	ОбменМобильноеПриложениеПереопределяемый.ПроверитьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого);
	
	// Удаляем регистрацию изменений для сообщений обмена, помещенных в очередь.
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
	
КонецФункции // СформироватьОчередьСообщенийОбмена()

// Процедура вносит в информационную базу данные, которые присланы из узла УзелОбмена 
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//  ДанныеОбмена - пакет обмена полученный из узла УзелОбмена, помещенный в ХранилищеЗначения
//  ОчиститьИзменения - параметр определяет, нужно ли очищать ранее отправленные изменения
//
Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена, ОчиститьИзменения = Ложь) Экспорт
	
	Если ОбменЗаблокирован(УзелОбмена) Тогда
		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Пакет не принят по причине блокиовки обмена");	
		
		Возврат;
	КонецЕсли; 
	
	//
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ДанныеОбмена) = Тип("ХранилищеЗначения") Тогда
		ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	Иначе
		ЧтениеXML.УстановитьСтроку(ДанныеОбмена);
	КонецЕсли; 
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Если ОчиститьИзменения Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	КонецЕсли;
	
	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Сообщение принято. № "+ ЧтениеСообщения.НомерСообщения + ". Номер принятого от МП " + ЧтениеСообщения.НомерПринятого, УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	

	ТипОбъектаXDTO = ФабрикаXDTO.Тип("MobileExchange", "Objects");
	
	Попытка
		Объекты = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	Исключение
		ЗаписьЖурналаРегистрации("ОшибкаОбмена", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
	
	ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьОбъекты(УзелОбмена, Объекты);

	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();

	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Сообщение загружено. № "+ УзелОбмена.НомерПринятого, УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	

КонецПроцедуры // ПринятьПакетОбмена()

Процедура ЗапуститьФормированиеОчередиСообщенийОбмена(УзелОбмена, КодМобильногоКомпьютера, НомерПринятого, НужнаИнициализацияУзла, ИдентификаторЗадания) Экспорт
	
	Попытка
		
		//
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	МП_ЗадачаМагазина.Ссылка
		               |ИЗ
		               |	Документ.МП_ЗадачаМагазина КАК МП_ЗадачаМагазина
		               |ГДЕ
		               |	МП_ЗадачаМагазина.Дата >= &Дата
		               |	И МП_ЗадачаМагазина.Магазин = &Магазин
		               |	И МП_ЗадачаМагазина.ДатаДоставки = ДАТАВРЕМЯ(1, 1, 1)";
		
		//
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Магазин", УзелОбмена.Магазин);
		
		//
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка.ПолучитьОбъект());
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	//ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоФайловаяБаза = Истина;

	Если ЭтоФайловаяБаза Тогда
		
		// В файловом варианте сообщение готовится в момент вызова с клиента
		ОбменМобильноеПриложениеОбщее.СформироватьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого, НужнаИнициализацияУзла);
		
	Иначе
		// В клиент-серверном варианте сообщения готовятся в фоновом задании.
		// Это позволяет избежать тайм-аутов на стороне мобильного клиента, т.к. сообщения могут готовиться долго.
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(УзелОбмена);
		МассивПараметров.Добавить(НомерПринятого);
		МассивПараметров.Добавить(НужнаИнициализацияУзла);
		
		ИмяФункции = "ОбменМобильноеПриложениеОбщее.СформироватьОчередьСообщенийОбмена";
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			ИмяФункции, 
			МассивПараметров, 
			,
			КодМобильногоКомпьютера);
			
		ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает сообщение обмена по номеру сообщения.
//
Функция ПолучитьСообщениеОбмена(УзелОбмена, НомерСообщенияОбмена, ИдентификаторЗадания) Экспорт

	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Сообщение запрошено из МП. № " + НомерСообщенияОбмена, УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	

	СтруктураОтвета = Новый Структура("Подождать, ПродолжитьЗагрузку, ПрерватьЗагрузку, СообщениеОбмена", Ложь, Истина, Ложь, Неопределено);
	
	СообщениеОбмена = ОбменМобильноеПриложениеПереопределяемый.ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена);
	Если СообщениеОбмена <> Неопределено Тогда
		СтруктураОтвета.СообщениеОбмена = СообщениеОбмена;

		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Сообщение отправлено в МП. № " + НомерСообщенияОбмена, УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	

		Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));
	КонецЕсли;
	
	// Если сообщения нет в очереди, проверим состояние выполнения фонового задания.
	ЕстьОшибки = Ложь;
	//ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоФайловаяБаза = Истина;

	Если ЭтоФайловаяБаза Тогда
		ОчередьСообщенийСформирована = Истина;
	Иначе
		ОчередьСообщенийСформирована = ОбменМобильноеПриложениеПереопределяемый.ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки);
	КонецЕсли;
	
	// Если есть ошибки, сбрасываем счетчики сообщений для переотправки данных при следующем сеансе обмена.
	Если ЕстьОшибки Тогда
		ОбменМобильноеПриложениеПереопределяемый.ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
	КонецЕсли;
	
	//Если нет сообщений и очередь была сформирована, считаем что все пакеты успешно получены, иначе ожидаем пакеты.
	Если ОчередьСообщенийСформирована = Истина Тогда
		СтруктураОтвета.Подождать = Ложь;
		СтруктураОтвета.ПродолжитьЗагрузку = Ложь;
	Иначе
		СтруктураОтвета.Подождать = Истина;
		СтруктураОтвета.ПродолжитьЗагрузку = Не ЕстьОшибки;
	КонецЕсли;
	
	СтруктураОтвета.ПрерватьЗагрузку = ЕстьОшибки;
	
	ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Сообщение не найдено в очереди. № " + НомерСообщенияОбмена, УзелОбмена.НомерОтправленного, УзелОбмена.НомерПринятого);	

	Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));

КонецФункции

// Функция формирует пакет обмена, который будет отправлен узлу УзелОбмена
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//
// Возвращаемое значение:
//  сформированный пакет, помещенный в хранилище значения
Функция СформироватьПакетОбмена(УзелОбмена) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ТипДанныхУдаления = Тип("УдалениеОбъекта");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	ВозвращаемыйСписок = ОбменМобильноеПриложениеПереопределяемый.СоздатьОбъектXDTO("Objects");
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если НЕ ОбменМобильноеПриложениеПереопределяемый.НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных.
			ОбменМобильноеПриложениеПереопределяемый.УдалениеДанных(Данные);
			
		КонецЕсли;
		
		ОбменМобильноеПриложениеПереопределяемый.ЗаписатьДанные(ВозвращаемыйСписок, Данные);
		
	КонецЦикла;
	
	ОбменМобильноеПриложениеПереопределяемый.ЗаписатьОстатки(ВозвращаемыйСписок, Данные);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	
КонецФункции // СформироватьПакетОбмена()

Функция ОбменЗаблокирован(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена.Магазин) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МП_БлокировкаОбмена.ДатаАктуализацииБлокировки
	                      |ИЗ
	                      |	РегистрСведений.МП_БлокировкаОбмена КАК МП_БлокировкаОбмена
	                      |ГДЕ
	                      |	МП_БлокировкаОбмена.СтруктурнаяЕдиница = &Магазин");
	
	Запрос.УстановитьПараметр("Магазин", УзелОбмена.Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат (ТекущаяДата() - Выборка.ДатаАктуализацииБлокировки < 15)	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
	
