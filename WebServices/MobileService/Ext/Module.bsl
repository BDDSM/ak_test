
// Операция получения данных
// получает пакет изменений предназначенных для данного узла
//
// Параметры:
//  КодМобильногоКомпьютера	– код узла, с которым идет обмен
//
// Возвращаемое значение:
//  ХранилищеЗначения, в которое помещен пакет обмена
//
Функция ПолучитьПакетОбмена(КодМобильногоКомпьютера, НомерСообщенияОбмена, ИдентификаторЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		Возврат Новый ХранилищеЗначения("НеизвестноеУстройство");
		//ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеОбщее.ПолучитьСообщениеОбмена(УзелОбмена, НомерСообщенияОбмена, ИдентификаторЗадания);
	
КонецФункции

// Операция записи данных
// записывает пакет изменений принятых от данного узла
//
// Параметры:
//  КодМобильногоКомпьютера	– код узла, с которым идет обмен
//  ДанныеМобильногоПриложения - ХранилищеЗначения, в которое помещен пакет обмена
//
// Возвращаемое значение:
//  нет
//
Функция ПринятьПакетОбмена(ДанныеМобильногоПриложения, КодМобильногоКомпьютера, НаименованиеМобильногоКомпьютера, НомерОтправленного, НомерПринятого, ПериодВыгрузки)
	
	Попытка
		
		СтруктураОтвета = Новый Структура("ИдентификаторЗадания, НовыйОбмен", Неопределено, Ложь);
		
		//Пользователь = Пользователи.АвторизованныйПользователь();
		
		//ПроверитьПраваПользователя(Пользователь);
		
		УстановитьПривилегированныйРежим(Истина);
		
		//ПериодВыгрузкиВМобильноеПриложениеУстановленный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		//	Пользователь,
		//	"ПериодВыгрузкиВМобильноеПриложение"
		//);
		
		//Если ПериодВыгрузки = "За последний месяц" Тогда
		//	ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц;
		//ИначеЕсли ПериодВыгрузки = "За последнюю неделю" Тогда
		//	ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю;
		//Иначе
		//	ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень;
		//КонецЕсли;
		//
		//Если ПериодВыгрузкиВМобильноеПриложениеУстановленный <> ПериодВыгрузкиВМобильноеПриложение Тогда
		//	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ПериодВыгрузкиВМобильноеПриложение, "ПериодВыгрузкиВМобильноеПриложение")
		//КонецЕсли;
		
		Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			
			СтруктураОтбора = Новый Структура("Наименование", КодМобильногоКомпьютера);
			МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			ЕстьАктивноеЗадание = Ложь;
			Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл
				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					ФоновоеЗадание.Отменить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		УзелОбмена = ПланыОбмена.МобильноеПриложение.ЭтотУзел().ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(УзелОбмена.Код) Тогда
			
			УзелОбмена.ОбменДанными.Загрузка = Истина;
			УзелОбмена.Код = "001";
			УзелОбмена.Наименование = "Центральный";
			УзелОбмена.Записать();
			
		КонецЕсли;
		
		НужнаИнициализацияУзла = Ложь;
		
		УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
		Если УзелОбмена.Пустая() Тогда
			ВызватьИсключение("Не найден узел обмена с кодом " + КодМобильногоКомпьютера);
			//НовыйУзел = ПланыОбмена.МобильноеПриложение.СоздатьУзел();
			//НовыйУзел.Код = КодМобильногоКомпьютера;
			//НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
			//НовыйУзел.НомерОтправленного = НомерОтправленного;
			//НовыйУзел.НомерПринятого = НомерПринятого;
			//НовыйУзел.Записать();
			//
			//УзелОбмена = НовыйУзел.Ссылка;
			//НужнаИнициализацияУзла = Истина;
		Иначе
			
			Если УзелОбмена.ПометкаУдаления Тогда //ИЛИ
				//УзелОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
				
				Узел = УзелОбмена.ПолучитьОбъект();
				Узел.ПометкаУдаления = Ложь;
				//Узел.Наименование = НаименованиеМобильногоКомпьютера;
				Узел.Записать();
				
			КонецЕсли;
			
			Если УзелОбмена.НомерОтправленного = 0
				ИЛИ УзелОбмена.НомерПринятого = 0
				ИЛИ УзелОбмена.НомерОтправленного < НомерПринятого
				ИЛИ УзелОбмена.НомерПринятого <> НомерОтправленного Тогда
				
				Узел = УзелОбмена.ПолучитьОбъект();
				Узел.НомерОтправленного = НомерПринятого;
				Узел.НомерПринятого = НомерОтправленного;
				Узел.Записать();
				
				НужнаИнициализацияУзла = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НужнаИнициализацияУзла = Ложь;
		
		ОбменМобильноеПриложениеОбщее.ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
		
		ОбменМобильноеПриложениеОбщее.ЗапуститьФормированиеОчередиСообщенийОбмена(УзелОбмена, КодМобильногоКомпьютера, НомерПринятого, НужнаИнициализацияУзла, СтруктураОтвета.ИдентификаторЗадания);
		СтруктураОтвета.НовыйОбмен = НужнаИнициализацияУзла;
		
		Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));
		
	Исключение
		ЗаписьЖурналаРегистрации(ОписаниеОшибки(),УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		ВызватьИсключение(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Операция начала обмена
// проверяет, что нужный узел добавлен в план и правильно инициализирован
//
// Параметры:
//  КодМобильногоКомпьютера	– не изменяемый уникальный идентификатор данного узла, используется как код узла плана обмена
//  НаименованиеМобильногоКомпьютера - читаемое представление данного узла, не обязательно, изменяемое, используется как наименование узла плана обмена
//  НомерОтправленного - номер последнего отправленного пакета, предназначен для восстановления обмена, если узел был удален
//  НомерПринятого - номер последнего принятого пакета, предназначен для восстановления обмена, если узел был удален
//
// Возвращаемое значение:
//  нет
//
Функция НачатьОбмен(КодМобильногоКомпьютера, НаименованиеМобильногоКомпьютера, НомерОтправленного, НомерПринятого, ПериодВыгрузки)
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	
	//ПроверитьПраваПользователя(Пользователь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ПериодВыгрузкиВМобильноеПриложениеУстановленный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	//	Пользователь,
	//	"ПериодВыгрузкиВМобильноеПриложение"
	//);
	
	//Если ПериодВыгрузки = "За последний месяц" Тогда
	//	ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц;
	//ИначеЕсли ПериодВыгрузки = "За последнюю неделю" Тогда
	//	ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю;
	//Иначе
	//	ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень;
	//КонецЕсли;
	//
	//Если ПериодВыгрузкиВМобильноеПриложениеУстановленный <> ПериодВыгрузкиВМобильноеПриложение Тогда
	//	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ПериодВыгрузкиВМобильноеПриложение, "ПериодВыгрузкиВМобильноеПриложение")
	//КонецЕсли;
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.ЭтотУзел().ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(УзелОбмена.Код) Тогда
		
		УзелОбмена.ОбменДанными.Загрузка = Истина;
		УзелОбмена.Код = "001";
		УзелОбмена.Наименование = "Центральный";
		УзелОбмена.Записать();
		
	КонецЕсли;
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение("Не найден узел обмена с кодом " + КодМобильногоКомпьютера);
		НовыйУзел = ПланыОбмена.МобильноеПриложение.СоздатьУзел();
		НовыйУзел.Код = КодМобильногоКомпьютера;
		НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
		НовыйУзел.НомерОтправленного = НомерОтправленного;
		НовыйУзел.НомерПринятого = НомерПринятого;
		НовыйУзел.ВестиЛогОбмена = истина;
		НовыйУзел.Записать();
		ОбменМобильноеПриложениеПереопределяемый.ЗарегистрироватьИзмененияДанных(НовыйУзел.Ссылка);
		УзелОбмена = НовыйУзел.Ссылка;
		
	Иначе
		
		Если УзелОбмена.ПометкаУдаления ИЛИ
			УзелОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
			
			Узел = УзелОбмена.ПолучитьОбъект();
			Узел.ПометкаУдаления = Ложь;
			Узел.Наименование = НаименованиеМобильногоКомпьютера;
			Узел.Записать();
			
		КонецЕсли;
		
		Если УзелОбмена.НомерОтправленного <> НомерОтправленного ИЛИ
			УзелОбмена.НомерПринятого <> НомерПринятого Тогда
			
			Узел = УзелОбмена.ПолучитьОбъект();
			Узел.НомерОтправленного = НомерОтправленного;
			Узел.НомерПринятого = НомерПринятого;
			Узел.Записать();
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
			ОбменМобильноеПриложениеПереопределяемый.ЗарегистрироватьИзмененияДанных(УзелОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Операция получения данных
// получает пакет изменений предназначенных для данного узла
//
// Параметры:
//  КодМобильногоКомпьютера	– код узла, с которым идет обмен
//
// Возвращаемое значение:
//  ХранилищеЗначения, в которое помещен пакет обмена
//
Функция ПолучитьДанные(КодМобильногоКомпьютера)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеОбщее.СформироватьПакетОбмена(УзелОбмена);
	
КонецФункции

// Операция записи данных
// записывает пакет изменений принятых от данного узла
//
// Параметры:
//  КодМобильногоКомпьютера	– код узла, с которым идет обмен
//  ДанныеМобильногоПриложения - ХранилищеЗначения, в которое помещен пакет обмена
//
// Возвращаемое значение:
//  нет
//
Функция ЗаписатьДанные(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	ОбменМобильноеПриложениеОбщее.ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения, Истина);
	
КонецФункции

Функция ПолучитьПарольУстройства(КодУстройства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильноеПриложение.ПарольНаУстройстве
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Код = &Код";
	Запрос.УстановитьПараметр("Код", КодУстройства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПарольНаУстройстве;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьКонстанты()
	
	Структура = Новый Структура("ПериодичностьАвтообмена");
	//Структура.ПериодичностьСчитыванияКоординатМенеджера = Константы.ПериодичностьСчитыванияКоординатМенеджера.Получить();
	Структура.ПериодичностьАвтообмена = 1800;// Константы.ПериодичностьАвтообмена.Получить();
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьКонстантуКоординаты()
	
	Возврат Константы.ПериодичностьСчитыванияКоординатМенеджера.Получить();
	
КонецФункции

Функция ПолучитьКонстантуАвтообмен()
	
	Возврат Константы.ПериодичностьАвтообмена.Получить();
	
КонецФункции


Функция ПринятьЖурналОбмена(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьЖурналОбмена(УзелОбмена, ДанныеМобильногоПриложения.Получить());
	
КонецФункции

Функция ПроверитьВерсиюМобильногоПриложения(КодМобильногоКомпьютера, Версия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПроверитьВерсиюМобильногоПриложения(УзелОбмена, Версия);
	
КонецФункции

Функция ОбновитьДистрибутивы(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ОбновитьДистрибутивы(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО РОЗНИЦЕ

Функция ЗаписатьОбъект(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	//Возврат Новый ХранилищеЗначения(Истина, Новый СжатиеДанных(9));	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ЗаписатьОбъект(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции

Функция ПолучитьДанныеШтрихкода(ШтрихКод)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьДанныеШтрихкода(ШтрихКод);
	
КонецФункции
//+++АК BELN 2018.04.18 
Функция ПолучитьДанныеШтрихкодаОптимиз(ШтрихКод)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьДанныеШтрихкодаПорциями(ШтрихКод);
	
КонецФункции
//---АК BELN 2018.04.18 

//+++АК BELN 2018.04.18 
Функция ПолучитьДанныеШтрихкодаЧастями(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьДанныеШтрихкодаОптимиз(ДанныеМобильногоПриложения.Получить());
	
КонецФункции
//---АК BELN 2018.04.18 

Функция ПолучитьТелефонныйСправочник()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(Обработки.ТелефонныйСправочник.ПолучитьЗапросПоТелефонам());
	
	ТаблицаТелефонов = Запрос.Выполнить().Выгрузить().Скопировать(, "НомерТелефона, Абонент, Должность, Подразделение, EMail");
	
	ТаблицаТелефонов.Колонки.Добавить("Управление");
	
	Для Каждого Строка Из ТаблицаТелефонов Цикл
		Строка.Управление = Строка(Строка.Подразделение);
	КонецЦикла;  
	
	ТаблицаТелефонов.Колонки.Удалить("Подразделение");
	
	Возврат Новый ХранилищеЗначения(ТаблицаТелефонов, Новый СжатиеДанных(9));	
	
КонецФункции

Функция ПолучитьНастройкиУзла(КодУстройства)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МобильноеПриложение.ПарольНаУстройстве КАК Пароль,
	|	МобильноеПриложение.Профиль,
	|	МобильноеПриложение.ПодключатьсяКВнешнемуIP,
	|	ВЫБОР
	//+++АК ILIK 2018.08.08 ИП-00019413
	//|		КОГДА МобильноеПриложение.Магазин.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|		КОГДА МобильноеПриложение.Магазин.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
	//---АК ILIK
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МагазинЗакрыт
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Код = &Код");
	
	Запрос.УстановитьПараметр("Код", КодУстройства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураРезультат = Новый Структура("ИмяПрофиля, ПодключатьсяКВнешнемуIP, Пароль, МагазинЗакрыт");	
		
		СтруктураРезультат.ИмяПрофиля = Справочники.МП_ПрофилиИспользования.ПолучитьИмяПредопределенного(Выборка.Профиль);
		СтруктураРезультат.ПодключатьсяКВнешнемуIP = Выборка.ПодключатьсяКВнешнемуIP;
		СтруктураРезультат.Пароль = Выборка.Пароль;
		СтруктураРезультат.МагазинЗакрыт = Выборка.МагазинЗакрыт;		
		
	Иначе
		СтруктураРезультат = Неопределено;
		
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураРезультат);
	
КонецФункции

Функция ПолучитьДанныеПоТовару(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьДанныеПоТовару(ДанныеМобильногоПриложения);
	
	
КонецФункции

Функция ПолучитьОперациюТехнолога(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьОперациюТехнолога(ДанныеМобильногоПриложения);
	
	
КонецФункции

Функция ЗаписатьФотографиюЦенника(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ЗаписатьФотографиюЦенника(УзелОбмена, ДанныеМобильногоПриложения);
	
	
КонецФункции

Функция ОтправитьПочтовоеСообщение(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ОтправитьПочтовоеСообщение(УзелОбмена, ДанныеМобильногоПриложения);
	
	
КонецФункции

Функция ПолучитьЗаданияПоЦенникам(КодМобильногоКомпьютера)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьЗаданияПоЦенникам(УзелОбмена);
	
КонецФункции

Функция ПолучитьИнвентаризации(КодМобильногоКомпьютера, ДатаНачала, ДатаОкончания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьИнвентаризации(УзелОбмена, ДатаНачала, ДатаОкончания);
	
КонецФункции

Функция ЗаписатьОперациюИнвентаризации(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ЗаписатьОперациюИнвентаризации(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции

//+++АК BELN 2018.10.16 ИП-00018623.01   
Функция ЗаписатьСовокупностьОперацийИнвентаризации(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	
	
	СтруктураДанных = ДанныеМобильногоПриложения.Получить();
	
	ОписаниеОшибки = "";
	
	Магазин = УзелОбмена.Магазин;
	НомерМагазина = Магазин.НомерТочки;
	МасНом=Новый Массив;
	МасХар=Новый Массив;
	Для каждого СтруктураЗаписи Из СтруктураДанных.ТЗРез Цикл
		Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура));
		Характеристика =  Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Характеристика));
		МасНом.Добавить(Товар);
		МасХар.Добавить(Характеристика);
		
	КонецЦикла;	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Товар", МасНом);
	Запрос.УстановитьПараметр("Характеристика", МасХар);
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	НоменклатураСпр.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	НоменклатураСпр.Ссылка в (&Товар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Товар,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИдКонтр
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка в (&Характеристика)";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабТовары1 = Результаты[0].Выгрузить();
	ТабХарки1 = Результаты[1].Выгрузить();
	
	Магазин = УзелОбмена.Магазин;
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	
	Для каждого СтруктураЗаписи Из СтруктураДанных.ТЗРез Цикл
		
		
		
		
		Если  Не ЗначениеЗаполнено(СтруктураЗаписи.ИдентификаторОперации) Тогда
			//
			
			УинОперации = СтруктураЗаписи.ИдентификаторОперации;
			Проведен =  Истина;
			КодОперации = 300;
			КодПричиныСписания = null;
			Комментарий = "";
			Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура));
			Характеристика =  Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Характеристика));
			Количество = СтруктураЗаписи.Количество;
			
			
			//
			//
			
			ПолныйТекстЗапроса = "";
			НомерМагазина = Магазин.НомерТочки;
			
			ДокументБылПроведен = Ложь;
			Если ПустаяСтрока(УинОперации) Тогда
				УинОперации = Строка(Новый УникальныйИдентификатор());
				УинДокумента = Строка(Новый УникальныйИдентификатор());
				ПолныйТекстЗапроса = "INSERT INTO [SMS_Repl].[dbo].[TD_move]
				|	(Id_doc, opendate, closedate, line_no, id_tov, operation_type, operation_type_orig, Quantity, CashierID, Confirm_type, tduid, ShopNo_rep)
				|VALUES (" + ВнешниеДанные.ФорматПоля(УинДокумента) + ", GETDATE(), '1900-01-01T00:00:00', 1, 0, " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", 0, 0, 0, " + ВнешниеДанные.ФорматПоля(УинОперации) + ", " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
				|)";
			Иначе
				ТекстЗапросаSQL = "SELECT TD.id_doc
				|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
				| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
				|	and operation_type > 0";
				
				rs = ADOСоединение.Execute(ТекстЗапросаSQL);
				КолвоСтрокВДокументе = 0;
				//Попытка
				//	rs.MoveFirst();
				//	Если НЕ rs.Eof() Тогда
				//		ОписаниеОшибки = "Документ уже проведен!";
				//		ДокументБылПроведен = Истина;
				//		Возврат Неопределено;
				//	КонецЕсли;
				//Исключение
				//КонецПопытки;
			КонецЕсли;
			
			ТекстЗапросаSQL = "SELECT TD.id_doc, COUNT(TD.line_no) as KolvoStrok
			|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
			| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
			|GROUP BY TD.id_doc";
			
			rs = ADOСоединение.Execute(ТекстЗапросаSQL);
			КолвоСтрокВДокументе = 0;
			Попытка
				rs.MoveFirst();
				Если НЕ rs.Eof() Тогда
					КолвоСтрокВДокументе = rs.Fields("KolvoStrok").Value;
					УинДокумента = rs.Fields("id_doc").Value;
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			Если КолвоСтрокВДокументе > 1 Тогда
				УинДокумента = Строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			
			ТабТовары=ТабТовары1.НайтиСтроки(Новый Структура("Ссылка",Товар));
			ТабХарки=ТабХарки1.НайтиСтроки(Новый Структура("Ссылка",Характеристика));
			id_tov = 0;
			id_kontr = 0;
			Цена = 0;
			Если ТабТовары.Количество() > 0 Тогда
				id_tov = ТабТовары[0].id_tov;
				Цена = ТабТовары[0].Цена;
			КонецЕсли;	
			
			Если ТабХарки.Количество() > 0 Тогда
				id_kontr = ТабХарки[0].ИдКонтр;
			КонецЕсли;	
			
			ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + Символы.ПС + "
			|UPDATE [SMS_Repl].[dbo].[TD_move]
			|SET Id_doc = " + ВнешниеДанные.ФорматПоля(УинДокумента) + "
			|	, closedate = " + ?(Проведен, "GETDATE()", "'1900-01-01T00:00:00'") + "
			|	, line_no = 1
			|	, id_kontr = " + ВнешниеДанные.ФорматПоля(id_kontr) + "
			|	, id_tov = " + ВнешниеДанные.ФорматПоля(id_tov) + "
			|	, operation_type = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
			|	, operation_type_orig = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
			|	, Quantity = " + ВнешниеДанные.ФорматПоля(Количество) + 
			
			//+++АК BELN 2018.05.16 ИП-00018623
			 ", Quantity_inv1 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВПодсобке)+
			 ", Quantity_inv2 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВЗале)+
			//---АК BELN 2018.05.16 
			
			", type_zamech=1		
			|	, CashierID = 0
			|	, Confirm_type = 0
			|	, Date_proizv = " + ВнешниеДанные.ФорматПоля(Дата(1,1,1), Истина) + "
			|	, Descr = " + ВнешниеДанные.ФорматПоля(СокрЛП(Комментарий) + "(из моб. приложения)") + "
			|	, ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
			|WHERE tduid = " + ВнешниеДанные.ФорматПоля(УинОперации);
			
			ЗапросПолный = "declare @err int =1
			|while @err=1
			|begin
			| begin try
			|" + ПолныйТекстЗапроса + "
			|select @err=0
			| 
			| END TRY
			|  BEGIN CATCH
			| 
			|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
			|begin
			|-- запись в лог факта блокировки
			|	set @err=1
			|end
			|else
			|begin
			| 
			|-- прочая ошибка - выход  
			| return
			| end
			| 
			|  END CATCH 
			|end -- while";
			
			Попытка	
				ADOСоединение.Execute(ЗапросПолный);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Результат = Ложь;
				прервать;
			КонецПопытки;
			
			//---АК BELN 2018.06.22 	
			
			
			
			
			
			
			
			
			
		Иначе	
			Проведен=Истина;
			ТекстЗапроса = "  
			|declare @Id_doc uniqueidentifier
			|declare @Id_doc_General uniqueidentifier
			|SELECT  @Id_doc = Id_doc, @Id_doc_General  = Id_doc_General 
			|FROM [SMS_Repl].[dbo].[TD_move] (nolock)
			|WHERE tduid = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторОперации) + " 		
			|
			|if @Id_doc_General is null		
			|begin		
			|UPDATE [SMS_Repl].[dbo].[TD_move]
			|SET Id_doc_General = @Id_doc
			|WHERE Id_doc = @Id_doc
			|end				
			|		
			//|UPDATE [SMS_Repl].[dbo].[TD_move]
			//|SET  Id_doc =  newid() 
			//|WHERE tduid = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторОперации) + " AND
			//|Id_doc_General = Id_doc
			|		
			|UPDATE [SMS_Repl].[dbo].[TD_move]
			|SET closedate = " + ?(Проведен, "GETDATE()", "'1900-01-01T00:00:00'") + "
			|	, operation_type = " + ВнешниеДанные.ФорматПоля(300 * ?(Проведен, 1, -1)) + "
			|	, operation_type_orig = " + ВнешниеДанные.ФорматПоля(300* ?(Проведен, 1, -1)) + "
			|	, Quantity = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.Количество) +
			//+++АК BELN 2018.05.16 ИП-00018623
			 ", Quantity_inv1 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВПодсобке)+
			 ", Quantity_inv2 = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.КоличествоВЗале)+
			//---АК BELN 2018.05.16 
			
			", type_zamech=1
			|WHERE tduid = " + ВнешниеДанные.ФорматПоля(СтруктураЗаписи.ИдентификаторОперации);
			
			Попытка	
				ADOСоединение.Execute(ТекстЗапроса);
				Результат = Истина;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Результат = Ложь;
				прервать;
			КонецПопытки;
			
			Если Результат И Проведен И ЗначениеЗаполнено(СтруктураЗаписи.ИдентификаторЗаданияПоЦенникам) Тогда
				НЗ = РегистрыСведений.МП_ЗаданияПоЦенникам.СоздатьНаборЗаписей();
				НЗ.Отбор.ИдентификаторЗадания.Установить(СтруктураЗаписи.ИдентификаторЗаданияПоЦенникам);
				НЗ.Записать();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	
КонецФункции
//---АК BELN 2018.10.16 
//+++АК BELN 2018.10.16 ИП-00018623.01   
Функция ЗаписатьСовокупностьОперацийСписания(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	
	
	СтруктураДанных = ДанныеМобильногоПриложения.Получить();
	
	ОписаниеОшибки = "";
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	Магазин = УзелОбмена.Магазин;
	НомерМагазина = Магазин.НомерТочки;
	
	ТекстЗапросаSQL = "select code_operation,name_operation,znak,is_photo
	|from SMS_REPL..Types_Operation as tpo with(nolock)
	|where table_operation='TD_move' and field_operation='operation_type_orig'";
	МасОп=Новый Массив;								
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof()  Цикл
			МасОп.Добавить(rs.Fields("code_operation").Value);
			rs.Movenext();
		КонецЦикла;  
		
	Исключение
	КонецПопытки;
	
	
	МасНом=Новый Массив;
	МасХар=Новый Массив;
	МасФЛ=Новый Массив;
	Для каждого СтруктураЗаписи Из СтруктураДанных.ТЗРез Цикл
		Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура));
		Характеристика =  Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Характеристика));
		МасНом.Добавить(Товар);
		МасХар.Добавить(Характеристика);
		Если ЗначениеЗаполнено(СтруктураЗаписи.СотрудникТабельныйНомер) Тогда
			МасФЛ.Добавить(СтруктураЗаписи.СотрудникТабельныйНомер);
		КонецЕсли; 
		Если МасОп.Найти(СтруктураЗаписи.КодОперации)=Неопределено Тогда
			СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, "Операция "+Строка(СтруктураЗаписи.КодОперации)+" недопустима");
			
			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
			
		
		КонецЕсли; 
	КонецЦикла;	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Товар", МасНом);
	Запрос.УстановитьПараметр("Характеристика", МасХар);
	Запрос.УстановитьПараметр("Код", МасФЛ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСпр.Ссылка,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	НоменклатураСпр.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК НоменклатураСпр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ТекДата,
	               |				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НоменклатураСпр.Ссылка В(&Товар)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Владелец КАК Товар,
	               |	ХарактеристикиНоменклатуры.Ссылка,
	               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИдКонтр
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Ссылка В(&Характеристика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка,
	               |	ФизическиеЛица.Код
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Код В(&Код)";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабТовары1 = Результаты[0].Выгрузить();
	ТабХарки1 = Результаты[1].Выгрузить();
	ТабФЛ = Результаты[2].Выгрузить();
	
	Магазин = УзелОбмена.Магазин;
	НомерМагазина = Магазин.НомерТочки;
	
	Для каждого СтруктураЗаписи Из СтруктураДанных.ТЗРез Цикл
		
		УинОперации = СтруктураЗаписи.УинОперации;
		Проведен = Истина;
		КодОперации = СтруктураЗаписи.КодОперации;
		КодПричиныСписания = ?(НЕ ЗначениеЗаполнено(СтруктураЗаписи.КодПричиныСписания),0,СтруктураЗаписи.КодПричиныСписания);
		Комментарий = СтруктураЗаписи.Комментарий;
		Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Номенклатура));
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗаписи.Характеристика));
		Если Не ЗначениеЗаполнено(Товар) ИЛИ Не ЗначениеЗаполнено(Характеристика) Тогда
			ОписаниеОшибки="Некорректный товар "+Строка(Товар)+" "+Строка(Характеристика);
			Прервать;
		
		КонецЕсли; 
		
		ДатаПроизводства = СтруктураЗаписи.ДатаПроизводства;
		Количество = СтруктураЗаписи.Количество;
		
		// +++ АК mirv 28.11.2017 [ИП-00016694]
		// Пока в попытке - после обновления МП - надо убрать
		Попытка
			СотрудникКод = СтруктураЗаписи.СотрудникТабельныйНомер;
		Исключение
		    СотрудникКод = "";
		КонецПопытки; 
		// --- АК mirv  
		
		Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
			ОписаниеОшибки = "Запись невозможна. Код операции не заполнен - "+Строка(Товар)+" "+Строка(Характеристика);
			Прервать;
		КонецЕсли;	
		
		//
		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Начало записи списания: " +  УинОперации + ". Проведено : " + Проведен);	
		//
		
		ПолныйТекстЗапроса = "";
		
		ДокументБылПроведен = Ложь;
		Если ПустаяСтрока(УинОперации) Тогда
			//+++АК BELN 2018.08.30 ИП-00019683
			//Если КодОперации=201 Тогда
			//	Продолжить;
			//КонецЕсли; 
			//---АК BELN 2018.08.30 
			УинОперации = Строка(Новый УникальныйИдентификатор());
			УинДокумента = Строка(Новый УникальныйИдентификатор());
			ПолныйТекстЗапроса = "INSERT INTO [SMS_Repl].[dbo].[TD_move]
			|	(Id_doc, opendate, closedate, line_no, id_tov, operation_type, operation_type_orig, Quantity, CashierID, Confirm_type, tduid, ShopNo_rep)
			|VALUES (" + ВнешниеДанные.ФорматПоля(УинДокумента) + ", GETDATE(), '1900-01-01T00:00:00', 1, 0, " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + ", 0, 0, 0, " + ВнешниеДанные.ФорматПоля(УинОперации) + ", " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
			|)";
		Иначе
			//+++АК BELN 2018.09.11 ИП-00019765
			ТекстЗапросаSQL = "SELECT TD.id_doc
					|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
					| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
					|	and operation_type > 0";
			
			//ТекстЗапросаSQL = "SELECT TD.id_doc, max(operation_type) operation_type
			//		|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
			//		| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
			//		|	 group by TD.id_doc Having max(operation_type)>0";


			//---АК BELN 2018.09.11 
									
			rs = ADOСоединение.Execute(ТекстЗапросаSQL);
			КолвоСтрокВДокументе = 0;
			Попытка
				rs.MoveFirst();
				Если НЕ rs.Eof() Тогда
					Продолжить;
					
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ТекстЗапросаSQL = "SELECT TD.id_doc, COUNT(TD.line_no) as KolvoStrok, max(TD.closedate) closedate
					|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
					| WHERE TD.Id_doc IN (SELECT TD.Id_doc FROM SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move)) WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + ")
					|GROUP BY TD.id_doc";
									
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		КолвоСтрокВДокументе = 0;
		//+++АК BELN 2018.09.19 
		ДатаЗакр=Дата(1,1,1);
		//---АК BELN 2018.09.19 
		Попытка
			rs.MoveFirst();
			Если НЕ rs.Eof() Тогда
				КолвоСтрокВДокументе = rs.Fields("KolvoStrok").Value;
				УинДокумента = rs.Fields("id_doc").Value;
				//+++АК BELN 2018.09.19 
				Если ЗначениеЗаполнено(rs.Fields("closedate").Value) Тогда
				
					ДатаЗакр=rs.Fields("closedate").Value;
				
				КонецЕсли; 
				//---АК BELN 2018.09.19 
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
		Если КолвоСтрокВДокументе > 1 Тогда
			УинДокумента = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		ТабТовары=ТабТовары1.НайтиСтроки(Новый Структура("Ссылка",Товар));
		ТабХарки=ТабХарки1.НайтиСтроки(Новый Структура("Ссылка",Характеристика));
		id_tov = 0;
		id_kontr = 0;
		Цена = 0;
		Если ТабТовары.Количество() > 0 Тогда
			id_tov = ТабТовары[0].id_tov;
			Цена = ТабТовары[0].Цена;
		КонецЕсли;	
		
		Если ТабХарки.Количество() > 0 Тогда
			id_kontr = ТабХарки[0].ИдКонтр;
		КонецЕсли;	

		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + Символы.ПС + "
			|UPDATE [SMS_Repl].[dbo].[TD_move]
			|SET Id_doc = " + ВнешниеДанные.ФорматПоля(УинДокумента) + "
			|	, closedate = " + ?(Проведен, ?(ЗначениеЗаполнено(ДатаЗакр) И НЕ ДатаЗакр=Дата(1900,01,01),ВнешниеДанные.ФорматПоля(ДатаЗакр),"GETDATE()"), "'1900-01-01T00:00:00'") + "
			|	, line_no = 1
			|	, id_kontr = " + ВнешниеДанные.ФорматПоля(id_kontr) + "
			|	, id_tov = " + ВнешниеДанные.ФорматПоля(id_tov) + "
			|	, operation_type = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
			|	, operation_type_orig = " + ВнешниеДанные.ФорматПоля(КодОперации * ?(Проведен, 1, -1)) + "
			|	, Quantity = " + ВнешниеДанные.ФорматПоля(Количество) + "
			|	, CashierID = 0
			|	, Confirm_type = 0
			|	, id_reason = " + ВнешниеДанные.ФорматПоля(КодПричиныСписания) + "
			|	, Date_proizv = " + ВнешниеДанные.ФорматПоля(ДатаПроизводства, Истина) + "
			|	, Descr = " + ВнешниеДанные.ФорматПоля(СокрЛП(Комментарий) + "(из моб. приложения)") + "
			|	, ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерМагазина) + "
			|WHERE tduid = " + ВнешниеДанные.ФорматПоля(УинОперации);
			
		Если Проведен И КодОперации = 201 И Цена > 0
				И НЕ ДокументБылПроведен Тогда
			ЗапросКеш = ВнешниеДанные.СоставитьЗапросНаДобавление();
			ЗапросКеш = СтрЗаменить(ЗапросКеш, "[ИмяТаблицы]", "[Cash_Move]");
			ЗапросКеш = СтрЗаменить(ЗапросКеш, "(Поля)", "([id_doc]
				   |,[opendate]
				   |,[closedate]
				   |,[cash_id]
				   |,[operation_type]
				   |,[Cash_sum]
				   |,[CashierID]
				   |,[Confirm_type]
				   |,[Confirm_date]
				   |,[Confirm_reason]
				   |,[Descr]
				   |,[ShopNo_rep])");
			ЗапросКеш = СтрЗаменить(ЗапросКеш, "(Значения)", "(" + ВнешниеДанные.ФорматПоля(УинДокумента) + "
					|,GETDATE()
					|,GETDATE()
					|,0
					|,201
					|," + ВнешниеДанные.ФорматПоля(Цена*Количество) + "
					|,0
					|,0
					|,'1900-01-01T00:00:00'
					|,0
					|," + ВнешниеДанные.ФорматПоля("Создан по возврату покупателя (моб. приложение)") + "
					|," + ВнешниеДанные.ФорматПоля(НомерМагазина) + ")");
					
			ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + Символы.ПС + ЗапросКеш;		
		КонецЕсли;			
			
		ЗапросПолный = "declare @err int =1
						|while @err=1
						|begin
						| begin try
						|" + ПолныйТекстЗапроса + "
						|select @err=0
						| 
						| END TRY
						|  BEGIN CATCH
						| 
						|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
						|begin
						|-- запись в лог факта блокировки
						|	set @err=1
						|end
						|else
						|begin
						| 
						|-- прочая ошибка - выход  
						| return
						| end
						| 
						|  END CATCH 
						|end -- while";
		
		Попытка	
			ADOСоединение.Execute(ЗапросПолный);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки()+символы.ПС+ПолныйТекстЗапроса;
			Прервать;
		КонецПопытки;
		
		//ТекстЗапросаSQL = "SELECT TD.opendate
		//			|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (PK_TD_move))
		//			| WHERE TD.tduid = " + ВнешниеДанные.ФорматПоля(УинОперации) + "
		//			|";
		//							
		//rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		//ДатаДок = '00010101';
		//Попытка
		//	rs.MoveFirst();
		//	Если НЕ rs.Eof() Тогда
		//		ДатаДок = rs.Fields("opendate").Value;
		//	КонецЕсли;
		//	
		//Исключение
		//КонецПопытки;
		//
		
		
		// +++ АК mirv 28.11.2017 [ИП-00016694]
		Попытка
			Если ЗначениеЗаполнено(СотрудникКод) Тогда
				СтрСотрудник = ТабФЛ.Найти(СотрудникКод);
				Если НЕ (СтрСотрудник=Неопределено) Тогда
					Сотрудник=СтрСотрудник.Ссылка;
					НоваяЗапись = РегистрыСведений.СотрудникиДегустация.СоздатьМенеджерЗаписи();
					НоваяЗапись.ИД = УинОперации;
					НоваяЗапись.Сотрудник = Сотрудник;
					НоваяЗапись.Период = НачалоДня(ТекущаяДата());
					НоваяЗапись.Записать(Истина);	
				КонецЕсли; 
			КонецЕсли; 
		Исключение
		    //ОписаниеОшибки()
		КонецПопытки; 	
		// --- АК mirv  
		
		//
		ОбменМобильноеПриложениеПереопределяемый.ДобавитьЗаписьВЖурналОбмена(УзелОбмена,  "Записано списание: " +  УинОперации + ". Проведено : " + Проведен);	
		//
		

	КонецЦикла; 
	ADOСоединение.Close();
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Результат=Ложь;
	КонецЕсли;	
	СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	
КонецФункции
//---АК BELN 2018.10.16 

Функция СоздатьОперациюИнвентаризации(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.СоздатьОперациюИнвентаризации(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО СПИСАНИЮ ТОВАРОВ

Функция ПолучитьСписания(КодМобильногоКомпьютера, ДатаНачала, ДатаОкончания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьСписания(УзелОбмена, ДатаНачала, ДатаОкончания);
	
КонецФункции

Функция ПолучитьТипыОперацийСписания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьТипыОперацийСписания();
	
КонецФункции

Функция ПолучитьПричиныСписания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьПричиныСписания();
	
	
КонецФункции

Функция ЗаписатьОперациюСписания(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ЗаписатьОперациюСписания(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции

Функция ДобавитьКартинкуКОперацииСписания(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ДобавитьКартинкуКОперацииСписания(УзелОбмена, ДанныеМобильногоПриложения);
	
	
КонецФункции

Функция УдалитьОперациюСписания(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.УдалитьОперациюСписания(ДанныеМобильногоПриложения);
	
КонецФункции

Функция ПроверитьВозможностьСписания(КодМобильногоКомпьютера)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПроверитьВозможностьСписания(УзелОбмена);
	
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА СООБЩЕНИЯМИ

Функция ЗаписатьСообщение(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ЗаписатьСообщение(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции

Функция ПолучитьСообщения(КодМобильногоКомпьютера, ДатаНачала, ДатаОкончания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьСообщения(УзелОбмена, ДатаНачала, ДатаОкончания);
	
КонецФункции

Функция ПолучитьКартинкиДляСообщения(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьКартинкиДляСообщения(ДанныеМобильногоПриложения);
	
КонецФункции

Функция УстановитьПризнакПрочитаноДляСообщения(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.УстановитьПризнакПрочитаноДляСообщения(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО РЕГЛАМЕНТНЫМ РАБОТАМ

Функция ЗаписатьРегламентнуюРаботу(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ЗаписатьРегламентнуюРаботу(УзелОбмена, ДанныеМобильногоПриложения);
	
КонецФункции

Функция ПолучитьРегламентныеРаботы(КодМобильногоКомпьютера, ДатаНачала, ДатаОкончания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьРегламентныеРаботы(УзелОбмена, ДатаНачала, ДатаОкончания);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ПО ПРИЕМКЕ ТОВАРОВ

Функция ПолучитьТоварыКПриемке(ШтрихКодДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьТоварыКПриемке(ШтрихКодДокумента);
	
КонецФункции

Функция ПолучитьТоварыКПриемкеЗаДень(КодСклада, НачалоСмены)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьТоварыКПриемкеЗаДень(КодСклада, НачалоСмены);
	
КонецФункции


Функция ЗаписатьПринятыеТовары(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	СтруктураДанныхМП = ДанныеМобильногоПриложения.Получить();
	
	Попытка 
		Если СтруктураДанныхМП.Свойство("ЖурналОбмена") Тогда
			УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураДанныхМП.КодУстройства); 
			ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьЖурналОбмена(УзелОбмена, СтруктураДанныхМП.ЖурналОбмена);
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	
	ДокументСсылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураДанныхМП.ШтрихкодДокумента);
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка)  Тогда
		ОписаниеОшибки = "Не найден документ в центральной базе!";
		
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	//
	Объект = ДокументСсылка.ПолучитьОбъект();
	
	ТоварыВДокументе = Объект.Товары.Выгрузить();
	Объект.Товары.Очистить();
	МасНомЕдИзм=Новый Массив;
	Для Каждого Строка Из СтруктураДанныхМП.Товары Цикл
		
		//
		Идентификатор = Новый УникальныйИдентификатор(Строка.Номенклатура);
		Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		МасНомЕдИзм.Добавить(Номенклатура);
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.БазоваяЕдиницаИзмерения
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Владелец КАК Номенклатура
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО вт.Ссылка = ЕдиницыИзмерения.Владелец
	|			И вт.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Номенклатура", МасНомЕдИзм);
	//Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, Номенклатура.БазоваяЕдиницаИзмерения);
	
	ВыборкаЕдИзм = Запрос.Выполнить().Выгрузить();
	
	
	
	Для Каждого Строка Из СтруктураДанныхМП.Товары Цикл
		
		//
		Идентификатор = Новый УникальныйИдентификатор(Строка.Номенклатура);
		Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		Если НЕ ЗначениеЗаполнено(Номенклатура)  Тогда
			ОписаниеОшибки = "Не найдена номенклатура в центральной базе!";
			СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
		КонецЕсли; 
		
		//
		Идентификатор = Новый УникальныйИдентификатор(Строка.Характеристика );
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
		Если НЕ ЗначениеЗаполнено(Характеристика)  Тогда
			ОписаниеОшибки = "Не найдена характеристика номенклатуры в центральной базе!";
			СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
		КонецЕсли; 
		
		//
		ТекДанные = Объект.Товары.Добавить();
		
		СтрокиНашли = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, Строка.ДатаПроизводства));
		Если СтрокиНашли.Количество() = 0 Тогда
			СтрокиНашли = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
		КонецЕсли;
		
		Если СтрокиНашли.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекДанные, СтрокиНашли[0]);
			
		Иначе
			ТекДанные.Номенклатура = Номенклатура;
			ТекДанные.Характеристика = Характеристика;
			
			//		Запрос = Новый Запрос("ВЫБРАТЬ
			//							  			|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
			//							  			|ИЗ
			//							  			|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			//							  			|ГДЕ
			//							  			|	ЕдиницыИзмерения.Владелец = &Номенклатура
			//							  			|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
			//							  			|	И НЕ ЕдиницыИзмерения.ПометкаУдаления");
			
			//		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			//		Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, Номенклатура.БазоваяЕдиницаИзмерения);
			//
			//		Выборка = Запрос.Выполнить().Выбрать();
			//		Если Выборка.Следующий() Тогда
			//			ТекДанные.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
			//		КонецЕсли;
			СтрЕдИзм=ВыборкаЕдИзм.Найти(Номенклатура);
			Если СтрЕдИзм<>Неопределено Тогда
				ТекДанные.ЕдиницаИзмерения 	= СтрЕдИзм.ЕдиницаИзмерения;
			КонецЕсли; 
			
		КонецЕсли;	
		ТекДанные.ДатаПроизводства = Строка.ДатаПроизводства;
		ТекДанные.Количество = Строка.КоличествоПринятое;
		ТекДанные.КоличествоКоробок = Строка.КоличествоКоробокПринятое;
		
	КонецЦикла; 
	
	//СтруктураОтвет = Новый Структура("Результат, ДокументЗаписан, ОписаниеОшибки",Истина,Ложь,"");
	//Попытка
	//	ДокОбъект = ДокументСсылка.ПолучитьОбъект();
	//	ДокОбъект.ПриемкаТерминаломЗакончена = Истина;
	//	Если СтруктураДанныхМП.Свойство("Кладовщик") Тогда
	//		Идентификатор = Новый УникальныйИдентификатор(СтруктураДанныхМП.Кладовщик);
	//		Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
	//		Если ЗначениеЗаполнено(Кладовщик)  Тогда
	//			ДокОбъект.Кладовщик = Кладовщик;
	//		КонецЕсли;
	//	КонецЕсли; 
	//	//ДокОбъект.СборкаТерминаломЗакончена = Истина;
	//	//ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
	//	//ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
	//	//ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	//	Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
	//		СтрокаТаб.Количество = 0;
	//		СтрокаТаб.КоличествоКоробок = 0;
	//	КонецЦикла;	
	//	Для Каждого СтрокаТаб Из СтруктураДанныхМП.Товары Цикл
	//		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
	//		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
	//		СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
	//		Если СтрокиВДоке.Количество() > 0 Тогда
	//			СтрокаВДоке = СтрокиВДоке[0];
	//		Иначе
	//			СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
	//			Если СтрокиВДоке.Количество() > 0 Тогда
	//				СтрокаВДоке = СтрокиВДоке[0];
	//			Иначе	
	//				СтрокаВДоке = ДокОбъект.Товары.Добавить();
	//				СтрокаВДоке.Номенклатура = Номенклатура;
	//				СтрокаВДоке.Характеристика = Характеристика;
	//				СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
	//				СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	//			КонецЕсли;	
	//		КонецЕсли;	
	//		СтрокаВДоке.Количество = СтрокаВДоке.Количество + СтрокаТаб.КоличествоПринятое;
	//		СтрокаВДоке.КоличествоКоробок = СтрокаВДоке.КоличествоКоробок+СтрокаТаб.КоличествоКоробокПринятое;
	//	КонецЦикла;	
	//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//Исключение
	//	СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
	//				+ ОписаниеОшибки();
	//	СтруктураОтвет.Результат = Ложь;
	//КонецПопытки;
	
	
	
	Объект.ПриемкаТерминаломЗакончена = Истина;
	Если СтруктураДанныхМП.Свойство("Темп") Тогда
		Объект.Температура = СтруктураДанныхМП.Темп;
	КонецЕсли; 	//
	Если СтруктураДанныхМП.Свойство("Кладовщик") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтруктураДанныхМП.Кладовщик);
		Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
		Если ЗначениеЗаполнено(Кладовщик)  Тогда
			Объект.Кладовщик = Кладовщик;
		КонецЕсли;
	КонецЕсли; 	//
	//
	Провели = Ложь;
	ТолькоЗаписали = Ложь;
	
	ОписаниеОшибки = "";
	
	Если СтруктураДанныхМП.Свойство("ТЗКоробки") Тогда
		ТЗКоробки=СтруктураДанныхМП.ТЗКоробки.Получить();
		Если СтруктураДанныхМП.Свойство("КонтрольнаяСумма") Тогда
			Разн=СтруктураДанныхМП.КонтрольнаяСумма-ТЗКоробки.Итог("Вес");
			Если Разн<0 Тогда
				Разн=-Разн;
			КонецЕсли; 
			Если Разн>0.5 Тогда
				ОписаниеОшибки = "Повторите попытку";
				СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
				Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
			КонецЕсли; 
		КонецЕсли; 
		Для каждого Стр Из ТЗКоробки Цикл
			Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Мен,Стр);
			Идентификатор = Новый УникальныйИдентификатор(Стр.НоменклатураИД);
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
			Мен.Номенклатура=Номенклатура;
			Мен.Документ=ДокументСсылка;
			Мен.ДатаНачалаРаботыПоДокументу=СтруктураДанныхМП.ДатаНачалаРаботыПоДокументу;
			Если ТЗКоробки.Колонки.Найти("НомерПопытки")<>Неопределено Тогда
				Мен.НомерПопытки=Стр.НомерПопытки;
			КонецЕсли; 
			Если ТЗКоробки.Колонки.Найти("ДатаНачалаРаботыПоДокументу")<>Неопределено Тогда
				Мен.ДатаНачалаРаботыПоДокументу=Стр.ДатаНачалаРаботыПоДокументу;
			КонецЕсли; 
			
			Мен.Записать();
		КонецЦикла; 
	КонецЕсли; 	//
	Если НЕ Объект.ПроверитьЗаполнение() Тогда
		Мас=ПолучитьСообщенияПользователю();
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, "Не удалось провести по причине -");
		Для каждого Эл Из Мас Цикл
			СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
			+ Эл.Текст;
		КонецЦикла; 			
		
		//
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	
	Попытка 
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		Провели = Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) И НЕ Объект.Проведен Тогда
		Попытка 
			Объект.Записать(РежимЗаписиДокумента.Запись);
			ТолькоЗаписали = Истина;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		КонецПопытки; 
	КонецЕсли; 
	
	СтруктураОтвет = Новый Структура("Результат, ДокументЗаписан, ОписаниеОшибки", Провели, ТолькоЗаписали, ОписаниеОшибки);
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	
	
КонецФункции

Функция ЗаписатьРезультатыПриемкиПаллеты(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	СтруктураДанныхМП = ДанныеМобильногоПриложения.Получить();
	
	Если СтруктураДанныхМП.Свойство("ШтрихкодДокумента") Тогда
		ДокументСсылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураДанныхМП.ШтрихкодДокумента);
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
		
		Если НЕ ЗначениеЗаполнено(ДокументСсылка)  Тогда
			СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
			+ "Не найден документ в центральной базе!";
			
			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
		КонецЕсли; 
	Иначе
		
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	КонецЕсли; 
	
	
	//
	Если СтруктураДанныхМП.Свойство("ШтрихКодПаллеты") Тогда
		ШтрихКодПаллеты = СтруктураДанныхМП.ШтрихКодПаллеты;
		СтрДанные = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКодПаллеты);
		Если НЕ ЗначениеЗаполнено(СтрДанные.Объект)
			ИЛИ ТипЗнч(СтрДанные.Объект) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
			СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
			+ "По штрих-коду не найдена паллета";
			Возврат Новый ХранилищеЗначения(СтруктураОтвет);
		КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(СтрДанные.Объект.РасходныйОрдер)
		//	ИЛИ (СтрДанные.Объект.РасходныйОрдер) <> ДокументСсылка Тогда
		//	СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
		//	+ "Паллета не соответствует текущему приходнику";
		//	Возврат Новый ХранилищеЗначения(СтруктураОтвет);
		//КонецЕсли;
		
		Если СтруктураДанныхМП.Свойство("ШтрихкодДокумента") Тогда
			
			Объект=СтрДанные.Объект.ПолучитьОбъект();
			Объект.Состав.Очистить();
		Иначе
			ДокументСсылка=СтрДанные.Объект.РасходныйОрдер;
			
			ЭлСпр=Справочники.СоставПаллеты.НайтиПоРеквизиту("СтарыйИД",СтрДанные.Объект.ИД);
			Если НЕ ЗначениеЗаполнено(ЭлСпр)
				ИЛИ ТипЗнч(ЭлСпр) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
				СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
				+ "Не найдена паллета";
				Возврат Новый ХранилищеЗначения(СтруктураОтвет);
			КонецЕсли;
			Объект=ЭлСпр.ПолучитьОбъект();
		КонецЕсли;
	ИначеЕсли СтруктураДанныхМП.Свойство("ИДПаллеты") Тогда
		ЭлСпр=Справочники.СоставПаллеты.НайтиПоРеквизиту("ИД",СтруктураДанныхМП.ИДПаллеты);
		Если НЕ ЗначениеЗаполнено(ЭлСпр)
			ИЛИ ТипЗнч(ЭлСпр) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
			СтруктураОтвет.ОписаниеОшибки = СтруктураОтвет.ОписаниеОшибки + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибки), Символы.ПС, "")
			+ "Не найдена паллета";
			Возврат Новый ХранилищеЗначения(СтруктураОтвет);
		КонецЕсли;
		Объект=ЭлСпр.ПолучитьОбъект();
		Объект.Состав.Очистить();
		
		
	Иначе	
		Объект = Справочники.СоставПаллеты.СоздатьЭлемент();
		Объект.РасходныйОрдер=ДокументСсылка;
		Объект.Актуален=Истина;
	КонецЕсли; 
	ТоварыВДокументе = Объект.Состав.Выгрузить();
	Если СтруктураДанныхМП.Свойство("ШтрихкодДокумента") ИЛИ СтруктураДанныхМП.Свойство("СоздатьПаллету") Тогда
		Для Каждого Строка Из СтруктураДанныхМП.Товары Цикл
			
			//
			Идентификатор = Новый УникальныйИдентификатор(Строка.Номенклатура);
			Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
			Если НЕ ЗначениеЗаполнено(Номенклатура)  Тогда
				ОписаниеОшибки = "Не найдена номенклатура в центральной базе!";
				СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
				Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
			КонецЕсли; 
			
			//
			Идентификатор = Новый УникальныйИдентификатор(Строка.Характеристика );
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
			Если НЕ ЗначениеЗаполнено(Характеристика)  Тогда
				ОписаниеОшибки = "Не найдена характеристика номенклатуры в центральной базе!";
				СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
				Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
			КонецЕсли; 
			
			//
			ТекДанные = Объект.Состав.Добавить();
			
			ТекДанные.Номенклатура = Номенклатура;
			ТекДанные.Характеристика = Характеристика;
			
			ТекДанные.ДатаПроизводства = Строка.ДатаПроизводства;
			ТекДанные.Количество = Строка.КоличествоПринятое;
			
		КонецЦикла; 
	КонецЕсли; 	//
	
	Кладовщик="";
	Если СтруктураДанныхМП.Свойство("Кладовщик") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтруктураДанныхМП.Кладовщик);
		Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
	КонецЕсли; 	//
	//
	ТолькоЗаписали = Ложь;
	
	ОписаниеОшибки = "";
	ИД=0;
	ШтрихКод="";
	//+++АК BELN 2018.08.23 ИП-00019147 
	Если СтруктураДанныхМП.Свойство("Интервал") Тогда
		Если СтруктураДанныхМП.Интервал<>Неопределено Тогда
			Объект.ДатаПроизводстваНачало=СтруктураДанныхМП.Интервал.ДатаПроизводстваНачало;	
			Объект.ДатаПроизводстваОкончание=СтруктураДанныхМП.Интервал.ДатаПроизводстваОкончание;	
		КонецЕсли; 
		
	КонецЕсли; 
	//---АК BELN 2018.08.23 		
	Попытка 
		Если  СтруктураДанныхМП.Свойство("ШтрихкодДокумента") ИЛИ СтруктураДанныхМП.Свойство("СоздатьПаллету") Тогда
			Объект.Записать();
		КонецЕсли;
		ТолькоЗаписали=Истина;
		ИД=Объект.Ссылка.ИД;
		ШтрихКод = "850" + Прав("000000000000" + Формат(ИД, "ЧГ=0"), 12);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТолькоЗаписали=Ложь;
		СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецПопытки; 
	
	СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки,ИД,ФИОКладовщика,Док,ШтрихКод,Склад",
	ТолькоЗаписали, ОписаниеОшибки,ИД,Строка(Кладовщик),Строка(ДокументСсылка),ШтрихКод,Строка(?(ЗначениеЗаполнено(ДокументСсылка),ДокументСсылка.Склад,"")));
	//+++АК BELN 2018.11.14 ИП-00020340
	ТЗДат=Объект.Состав.Выгрузить();
	ТЗДат.Свернуть("ДатаПроизводства");
	ТЗДат.Сортировать("ДатаПроизводства");
	СтруктураОтвет.Вставить("СпДатыПроизводства",ТЗДат.ВыгрузитьКолонку("ДатаПроизводства"));
	//---АК BELN 2018.11.14 
	
	Если НЕ СтруктураДанныхМП.Свойство("ШтрихкодДокумента") Тогда
		
		Если Объект.Состав.Количество() Тогда
			СтруктураОтвет.Вставить("Номенклатура",Строка(Объект.Состав[0].Номенклатура));
			СтруктураОтвет.Вставить("ЕдиницаИзмерения",Строка(Объект.Состав[0].Номенклатура.ЕдиницаХраненияОстатков));
			СтруктураОтвет.Вставить("Характеристика",Строка(Объект.Состав[0].Характеристика));
			
			СтруктураОтвет.Вставить("НоменклатураИД",Строка(Объект.Состав[0].Номенклатура.УникальныйИдентификатор()));
			СтруктураОтвет.Вставить("ХарактеристикаИД",Строка(Объект.Состав[0].Характеристика.УникальныйИдентификатор()));
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(СоставПаллетыЗаданияНаРазборку.Количество) КАК Количество,
			|	СУММА((ВЫБОР
			|				КОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) = 0
			|					ТОГДА 0
			|				ИНАЧЕ СоставПаллетыЗаданияНаРазборку.Количество / (ВЫРАЗИТЬ(ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК ЧИСЛО(15, 3)))
			|			КОНЕЦ )) КАК КоличествоКоробок,
			|	СоставПаллетыЗаданияНаРазборку.Номенклатура,
			|	СоставПаллетыЗаданияНаРазборку.Характеристика
			|ИЗ
			|	Справочник.СоставПаллеты.Состав КАК СоставПаллетыЗаданияНаРазборку
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО СоставПаллетыЗаданияНаРазборку.Характеристика = ЗначенияСвойствОбъектов.Объект
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
			|ГДЕ
			|	СоставПаллетыЗаданияНаРазборку.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставПаллетыЗаданияНаРазборку.Номенклатура,
			|	СоставПаллетыЗаданияНаРазборку.Характеристика";
			
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Кол=0;
			КолКороб=0;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Кол=Кол+ВыборкаДетальныеЗаписи.Количество;
				КолКороб=КолКороб+?(ВыборкаДетальныеЗаписи.КоличествоКоробок=Цел(ВыборкаДетальныеЗаписи.КоличествоКоробок),ВыборкаДетальныеЗаписи.КоличествоКоробок,Цел(ВыборкаДетальныеЗаписи.КоличествоКоробок)+1);
			КонецЦикла;
			СтруктураОтвет.Вставить("КоличествоКоробокПринятое",КолКороб);
			СтруктураОтвет.Вставить("КоличествоПринятое",Кол);
		Иначе
			ОписаниеОшибки = "Не заполнены данные в паллете!";
			СтруктураОтвет = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));	
	
КонецФункции

Функция ВыполнитьАутентификациюКладовщика(КодДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ВыполнитьАутентификациюКладовщика(КодДоступа);
	
КонецФункции

Функция ВыполнитьАутентификациюКладовщикаПоШК(КодДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	Если Лев(КодДоступа,7)="3010372" Тогда
		КодФизлицаЧисло = Число(СтрЗаменить(КодДоступа,"3010372",""));
		
		КодФизлица = Формат(КодФизлицаЧисло, "ЧЦ=10; ЧВН=; ЧГ=");
		
		
		//ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФизлица );
		//Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		КодФизлица="0"+Лев(КодФизлица,СтрДлина(КодФизлица)-1);
	Иначе
		КодФизлицаЧисло = Число(Сред(КодДоступа,3));
		
		КодФизлица = Формат(КодФизлицаЧисло, "ЧЦ=10; ЧВН=; ЧГ=");
		
		
		//ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФизлица );
		//Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		КодФизлица="0"+Лев(КодФизлица,СтрДлина(КодФизлица)-1);
	КонецЕсли; 
	ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФизлица );
	//КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		СтруктураОтвет = Новый Структура("Идентификатор", Неопределено);
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	//КонтрольнаяСумма = 0;
	
	//Для Сч = 1 По СтрДлина(КодФизлица) Цикл
	//	КонтрольнаяСумма = КонтрольнаяСумма  + Сред(КодФизлица, Сч, 1);
	//КонецЦикла;
	
	//Если Прав(Формат(КонтрольнаяСумма, "ЧЦ=3; ЧВН=; ЧГ="), 2) <> Прав(КодДоступа, 2) Тогда
	//	СтруктураОтвет = Новый Структура("Идентификатор", Неопределено);
	//	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	//КонецЕсли; 
	
	
	
	СтруктураОтвет = Новый Структура("Идентификатор, Наименование, ЭтоКладовщик,КодСклада,КладовщикНаОтгрузке,КладовщикНаДебаркадере,КладовщикРекламы,Ревизор", 
	Строка(Физлицо.УникальныйИдентификатор()), ФизЛицо.Наименование,Ложь,"",Ложь,Ложь,Ложь,Ложь);
	СтруктураОтвет.Вставить("Грузчик", Ложь);//+++АК KOPA 2018.01.09 ИП-00017470
	
	ЭтоКладовщик=Ложь;
	КладовщикНаОтгрузке=Ложь;
	КладовщикНаДебаркадере=Ложь;
	КладовщикРекламы=Ложь;
	Ревизор=Ложь;
	Грузчик = Ложь;//+++АК KOPA 2018.01.09 ИП-00017470
	
	КодСклада="";
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборщикиНаСкладах.ЭтоКладовщик,
		|	СборщикиНаСкладах.Склад,
		|	СборщикиНаСкладах.Склад.Код,
		|	СборщикиНаСкладах.КладовщикНаОтгрузке,
		|	СборщикиНаСкладах.КладовщикНаДебаркадере,
		|	СборщикиНаСкладах.КладовщикРекламы,
		|	СборщикиНаСкладах.Ревизор,
		|	СборщикиНаСкладах.ЭтоГрузчик
		|ИЗ
		|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
		|ГДЕ
		|	СборщикиНаСкладах.Сборщик = &Сборщик";
		
		Запрос.УстановитьПараметр("Сборщик", ФизЛицо);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭтоКладовщик=?(ЭтоКладовщик=Истина,Истина,ВыборкаДетальныеЗаписи.ЭтоКладовщик);
			КладовщикНаОтгрузке=?(КладовщикНаОтгрузке=Истина,Истина,ВыборкаДетальныеЗаписи.КладовщикНаОтгрузке);
			КладовщикНаДебаркадере=?(КладовщикНаДебаркадере=Истина,Истина,ВыборкаДетальныеЗаписи.КладовщикНаДебаркадере);
			КладовщикРекламы=?(КладовщикРекламы=Истина,Истина,ВыборкаДетальныеЗаписи.КладовщикРекламы);
			Ревизор=?(Ревизор=Истина,Истина,ВыборкаДетальныеЗаписи.Ревизор);
			
			//+++АК KOPA 2018.01.09 ИП-00017470
			Грузчик = ВыборкаДетальныеЗаписи.ЭтоГрузчик;
			//--- KOPA
			
			КодСклада=?(ЭтоКладовщик или КладовщикНаОтгрузке или КладовщикНаДебаркадере,ВыборкаДетальныеЗаписи.СкладКод,КодСклада);
		КонецЦикла;
	КонецЕсли; 
	
	СтруктураОтвет.ЭтоКладовщик=ЭтоКладовщик;
	СтруктураОтвет.КодСклада=КодСклада;
	
	СтруктураОтвет.КладовщикНаОтгрузке=КладовщикНаОтгрузке;
	СтруктураОтвет.КладовщикНаДебаркадере=КладовщикНаДебаркадере;
	СтруктураОтвет.КладовщикРекламы=КладовщикРекламы;
	СтруктураОтвет.Ревизор=Ревизор;
	//+++АК KOPA 2018.01.09 ИП-00017470
	СтруктураОтвет.Грузчик = Грузчик;
	//--- KOPA	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	
КонецФункции

Функция ВыполнитьАутентификациюКладовщикаПриПроверкеПоШК(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	КодДоступа=СтруктураПараметры.КодДоступа;
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураОтвет = Новый Структура("Идентификатор, Наименование, ЭтоКладовщик, ОписаниеОшибок", Неопределено,"",Ложь,"");
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ (ТипЗнч(Док) <> Тип("ДокументСсылка.РасходныйОрдерСклад") И ТипЗнч(Док) <> Тип("ДокументСсылка.ЗаданиеНаРазборку")) Тогда
		СтруктураОтвет.ОписаниеОшибок = СтруктураОтвет.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураОтвет.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ";
		Возврат Новый ХранилищеЗначения(СтруктураОтвет);
	КонецЕсли;
	
	Если Лев(КодДоступа,7)="3010372" Тогда
		КодФизлицаЧисло = Число(СтрЗаменить(КодДоступа,"3010372",""));
		
		КодФизлица = Формат(КодФизлицаЧисло, "ЧЦ=10; ЧВН=; ЧГ=");
		
		
		//ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФизлица );
		//Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		КодФизлица="0"+Лев(КодФизлица,СтрДлина(КодФизлица)-1);
	Иначе
		КодФизлицаЧисло = Число(Сред(КодДоступа,3));
		
		КодФизлица = Формат(КодФизлицаЧисло, "ЧЦ=10; ЧВН=; ЧГ=");
		
		
		//ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФизлица );
		//Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		КодФизлица="0"+Лев(КодФизлица,СтрДлина(КодФизлица)-1);
	КонецЕсли; 
	ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФизлица );
	//КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		СтруктураОтвет.Идентификатор= Неопределено;
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	//КонтрольнаяСумма = 0;
	
	//Для Сч = 1 По СтрДлина(КодФизлица) Цикл
	//	КонтрольнаяСумма = КонтрольнаяСумма  + Сред(КодФизлица, Сч, 1);
	//КонецЦикла;
	
	//Если Прав(Формат(КонтрольнаяСумма, "ЧЦ=3; ЧВН=; ЧГ="), 2) <> Прав(КодДоступа, 2) Тогда
	//	СтруктураОтвет = Новый Структура("Идентификатор", Неопределено);
	//	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	//КонецЕсли; 
	
	
	ЭтоКладовщик=Ложь;
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборщикиНаСкладах.ЭтоКладовщик
		|ИЗ
		|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
		|ГДЕ
		|	СборщикиНаСкладах.Сборщик = &Сборщик
		|	И СборщикиНаСкладах.Склад = &Склад
		|	И СборщикиНаСкладах.ЭтоКладовщик";
		
		Запрос.УстановитьПараметр("Сборщик", ФизЛицо);
		Запрос.УстановитьПараметр("Склад", Док.Склад.Владелец);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭтоКладовщик=Истина;
		КонецЦикла;
	КонецЕсли; 
	
	
	СтруктураОтвет.Идентификатор=Строка(Физлицо.УникальныйИдентификатор());
	СтруктураОтвет.Наименование=ФизЛицо.Наименование;
	СтруктураОтвет.ЭтоКладовщик=ЭтоКладовщик;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	
КонецФункции

Функция РаспознатьШтрихКод(ШК)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПоШтрихКоду = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШК);
	Если ЗначениеЗаполнено(СтруктураПоШтрихКоду.Объект) Тогда
		СтруктураПоШтрихКоду.Вставить("ОбъектУин", Строка(СтруктураПоШтрихКоду.Объект.УникальныйИдентификатор()));
		СтруктураПоШтрихКоду.Вставить("ОбъектНаименование", Строка(СтруктураПоШтрихКоду.Объект));
		Если ТипЗнч(СтруктураПоШтрихКоду.Объект) = Тип("СправочникСсылка.Склады") Тогда
			СтруктураПоШтрихКоду.Вставить("ЭтоСклад", Истина);
			СтруктураПоШтрихКоду.Вставить("СтрЕдиницаИД", СтруктураПоШтрихКоду.Объект.Владелец.id_tt);
		КонецЕсли;
		//+++АК KOPA 2017.12.28 ИП-00017595		
		Если ТипЗнч(СтруктураПоШтрихКоду.Объект) = Тип("СправочникСсылка.СоставПаллеты") Тогда
			СтруктураПоШтрихКоду.Вставить("ЭтоПаллета", Истина);
			СтруктураПоШтрихКоду.Вставить("Актуален", СтруктураПоШтрихКоду.Объект.Актуален);
		КонецЕсли;
		//---АК KOPA
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПоШтрихКоду.Номенклатура) Тогда
		СтруктураПоШтрихКоду.Вставить("НоменклатураУин", Строка(СтруктураПоШтрихКоду.Номенклатура.УникальныйИдентификатор()));
		СтруктураПоШтрихКоду.Вставить("НоменклатураНаименование", Строка(СтруктураПоШтрихКоду.Номенклатура));
	Иначе
		СтруктураПоШтрихКоду.Вставить("НоменклатураУин", "");
		СтруктураПоШтрихКоду.Вставить("НоменклатураНаименование", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПоШтрихКоду.Характеристика) Тогда
		СтруктураПоШтрихКоду.Вставить("ХарактеристикаУин", Строка(СтруктураПоШтрихКоду.Характеристика.УникальныйИдентификатор()));
		СтруктураПоШтрихКоду.Вставить("ХарактеристикаНаименование", Строка(СтруктураПоШтрихКоду.Характеристика));
	Иначе
		СтруктураПоШтрихКоду.Вставить("ХарактеристикаУин", "");
		СтруктураПоШтрихКоду.Вставить("ХарактеристикаНаименование", "");
	КонецЕсли;
	
	СтруктураПоШтрихКоду.Удалить("Объект");
	СтруктураПоШтрихКоду.Удалить("Номенклатура");
	СтруктураПоШтрихКоду.Удалить("Характеристика");
	
	Возврат Новый ХранилищеЗначения(СтруктураПоШтрихКоду);
	
КонецФункции

Функция ЗаписатьДегустацию(ДанныеМобильногоПриложения, ОписаниеОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураВозврат = Новый Структура("Успешно, УинДокумента", Ложь, "");
	СтруктураДляЗаписи = ДанныеМобильногоПриложения.Получить();
	Попытка
		// +++ АК mirv 29.08.2017 [ИП-00015993]
		// Обновим записи РС
		Для Каждого СтрокаТаб Из СтруктураДляЗаписи.ТабТовары Цикл
			НаборЗаписей = РегистрыСведений.АК_ЗаданияНаДегустациюНочные.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.НоменклатураУин)));
			Если ЗначениеЗаполнено(СтрокаТаб.ХарактеристикаУин) Тогда
				НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.ХарактеристикаУин)));
			КонецЕсли;
			НаборЗаписей.Прочитать();
			Для каждого Запись Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(Запись.ДатаДегустации) Тогда
					Продолжить;
				КонецЕсли; 
				Запись.ДатаДегустации = ТекущаяДата();
			КонецЦикла; 
			НаборЗаписей.Записать(Истина);
		КонецЦикла;    
		// --- АК mirv 	
		
		Если ЗначениеЗаполнено(СтруктураДляЗаписи.УинДокумента) Тогда
			ДокРасход = Документы.РасходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДляЗаписи.УинДокумента)).ПолучитьОбъект();
		Иначе	
			ДокРасход = Документы.РасходныйОрдерСклад.СоздатьДокумент();
		КонецЕсли;	
		ДокРасход.Дата = ТекущаяДата();
		
		ДокРасход.ОбменДанными.Загрузка = Истина;
		Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДляЗаписи.ЗонаСкладаУин));
		ДокРасход.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаТехнологу;
		ДокРасход.Склад = Склад;
		
		//+++АК KIRN 2018.05.17 ИП-00018728
		ДокРасход.Организация = Склад.Организация;
		//---АК KIRN 
		
		Если СтруктураДляЗаписи.Свойство("Обработан") Тогда
			Если СтруктураДляЗаписи.Обработан Тогда
				ДокРасход.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
			Иначе
				ДокРасход.Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
			КонецЕсли;	
		Иначе	
			ДокРасход.Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
		КонецЕсли;	
		ДокРасход.Сборщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДляЗаписи.ФизЛицоУин));
		ДокРасход.Получатель = ДокРасход.Сборщик;
		Если ЗначениеЗаполнено(ДокРасход.Сборщик) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ФизЛицо = &ФизЛицо";
			
			Запрос.УстановитьПараметр("ФизЛицо", ДокРасход.Сборщик);
			ВыборкаПольз = Запрос.Выполнить().Выбрать();
			Если ВыборкаПольз.Следующий() Тогда
				ДокРасход.Автор = ВыборкаПольз.Ссылка;
			КонецЕсли;	
		КонецЕсли;	
		ДокРасход.Товары.Очистить();
		Для Каждого СтрокаТаб Из СтруктураДляЗаписи.ТабТовары Цикл
			СтрокаДоб = ДокРасход.Товары.Добавить();
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.НоменклатураУин));
			Если ЗначениеЗаполнено(СтрокаТаб.ХарактеристикаУин) Тогда
				СтрокаДоб.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.ХарактеристикаУин));
			КонецЕсли;
			СтрокаДоб.ЕдиницаИзмерения = СтрокаДоб.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаДоб.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
			СтрокаДоб.Количество = СтрокаТаб.Количество;
		КонецЦикла;
		Если ДокРасход.Проведен Тогда
			ДокРасход.ОбменДанными.Загрузка = Ложь; //Mind если документ проводят, то нужно убрать режим загрузки
			ДокРасход.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			ДокРасход.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
		СтруктураВозврат.УинДокумента = Строка(ДокРасход.Ссылка.УникальныйИдентификатор());
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	СтруктураВозврат.Успешно = Истина;
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции

Функция СформироватьЭтикеткуВPDF(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураЭтикетки = ДанныеМобильногоПриложения.Получить();
	ТабДок = Новый ТабличныйДокумент();
	ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	Макет = Обработки.ФормированиеШтрихКодаУпаковок.ПолучитьМакет("ЭтикеткаВТерминал");
	
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЭтикетки.НоменклатураУин));
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЭтикетки.ХарактеристикаУин));
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	|	&Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	НумераторШтрихКодовКоробок.Нумератор,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
	|		ПО ВТ_Товары.Номенклатура = НумераторШтрихКодовКоробок.Номенклатура
	|			И ВТ_Товары.Характеристика = НумераторШтрихКодовКоробок.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВТ_Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))";
	
	ТабКеш = Запрос.Выполнить().Выгрузить();
	
	
	СтрокиКеш = ТабКеш.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
	Если СтрокиКеш.Количество() = 0 Тогда
	Иначе
		УмножатьНаТысячу = ?(НРег(Номенклатура.БазоваяЕдиницаИзмерения.Наименование) = "шт", Ложь, Истина);
		
		ТекстНадШтрихКодом = Строка(СтрокиКеш[0].Значение)
		+ Символы.ПС + ?(ЗначениеЗаполнено(СтруктураЭтикетки.ДатаПроизводства), " Дата произв. " + Формат(СтруктураЭтикетки.ДатаПроизводства, "ДФ=dd.MM.yy"), "00.00.00")
		+ Символы.ПС + ?(ЗначениеЗаполнено(СтруктураЭтикетки.КоличествоВУпаковке), " Кол-во в кор. " + Формат(СтруктураЭтикетки.КоличествоВУпаковке, ?(УмножатьНаТысячу, "ЧДЦ=2; ЧГ=0", "ЧДЦ=0; ЧГ=0")), "");
		ШтрихКод = Прав("0000" + Формат(СтрокиКеш[0].Нумератор, "ЧГ=0"), 4) + Прав("000000" + Формат(СтруктураЭтикетки.КоличествоВУпаковке * ?(УмножатьНаТысячу, 1000, 1), "ЧГ=0"), 6) + Формат(СтруктураЭтикетки.ДатаПроизводства, "ДФ=MMdd; ДП=0000");
		Область = Макет.ПолучитьОбласть("Этикетка");
		Область.Параметры.Товар = Номенклатура.НаименованиеПолное;
		Область.Параметры.Заголовок = ТекстНадШтрихКодом;
		
		Рисунок 					= Область.Рисунки["ШтрихКод"];
		
		ПараметрыШК = Новый Структура();
		ПараметрыШК.Вставить("Ширина", Рисунок.Ширина);
		ПараметрыШК.Вставить("Высота", Рисунок.Высота);
		ПараметрыШК.Вставить("ТипКода", 4);
		ПараметрыШК.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШК.Вставить("РазмерШрифта", 10);
		ПараметрыШК.Вставить("Штрихкод", Штрихкод);
		Рисунок.Картинка = ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШК);
		Область.Параметры.ШК = ШтрихКод;
		ТабДок.Вывести(Область);   
	КонецЕсли;	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	ТабДок.ВысотаСтраницы = 51;
	ТабДок.ШиринаСтраницы = 50;
	//ТабДок.ВысотаСтраницы = 70;
	//ТабДок.ШиринаСтраницы = 100;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ПолеСправа = 0;
	ТабДок.ПолеСлева = 0;
	ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.PDF);
	ФайлДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат Новый ХранилищеЗначения(ФайлДвоичныеДанные, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьСебестоимостьНоменклатуры(ДанныеМобильногоПриложения)
	
	//здесь возвращает цену в магазине, а не себестоимость
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Товар", Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.НоменклатураГуид)));
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|				И Номенклатура = &Товар) КАК ЦеныНоменклатурыСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьДанныеДляПеремещения(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ (ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ПеремещениеСклад") и ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ЗаданиеНаПеремещение") ) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ перемещения";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Если ДокПеремещение.СборкаТерминаломЗакончена Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Данный документ уже был собран терминалом";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Если ДокПеремещение.СтатусДокумента=Перечисления.СтатусыПеремещенияСклад.Отменен Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Данный документ был отменен";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;                                                            
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДокПеремещение);
	Если ТипЗнч(ДокПеремещение) = Тип("ДокументСсылка.ПеремещениеСклад") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ПеремещениеСклад.Номер,
		|	ПеремещениеСклад.Дата,
		|	ПеремещениеСклад.СкладОтправитель,
		|	ПеремещениеСклад.СкладПолучатель,
		|	ПеремещениеСклад.СкладОтправитель.ИД,
		|	ПеремещениеСклад.СкладПолучатель.ИД,
		|	ПеремещениеСклад.СкладОтправитель.Наименование,
		|	ПеремещениеСклад.СкладПолучатель.Наименование,
		|	ПеремещениеСклад.ДанныеСборкиНаМобильномУстройстве
		|ИЗ
		|	Документ.ПеремещениеСклад КАК ПеремещениеСклад
		|ГДЕ
		|	ПеремещениеСклад.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеСкладТовары.Номенклатура КАК НоменклатураСсылка,
		|	ПеремещениеСкладТовары.Характеристика КАК ХарактеристикаСсылка,
		|	ПеремещениеСкладТовары.ДатаПроизводства,
		|	СУММА(ПеремещениеСкладТовары.КоличествоОтправитель) КАК Количество
		|ИЗ
		|	Документ.ПеремещениеСклад.Товары КАК ПеремещениеСкладТовары
		|ГДЕ
		|	ПеремещениеСкладТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеСкладТовары.Номенклатура,
		|	ПеремещениеСкладТовары.Характеристика,
		|	ПеремещениеСкладТовары.ДатаПроизводства";
	Иначе	
		Запрос.Текст = "ВЫБРАТЬ
		|	ПеремещениеСклад.Номер,
		|	ПеремещениеСклад.Дата,
		|	ПеремещениеСклад.СкладОтправитель,
		|	ПеремещениеСклад.СкладПолучатель,
		|	ПеремещениеСклад.СкладОтправитель.ИД,
		|	ПеремещениеСклад.СкладПолучатель.ИД,
		|	ПеремещениеСклад.СкладОтправитель.Наименование,
		|	ПеремещениеСклад.СкладПолучатель.Наименование,
		|	ПеремещениеСклад.ДанныеСборкиНаМобильномУстройстве
		|ИЗ
		|	Документ.ЗаданиеНаПеремещение КАК ПеремещениеСклад
		|ГДЕ
		|	ПеремещениеСклад.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеСкладТовары.Номенклатура КАК НоменклатураСсылка,
		|	ПеремещениеСкладТовары.Характеристика КАК ХарактеристикаСсылка,
		|	ПеремещениеСкладТовары.ДатаПроизводства,
		|	СУММА(ПеремещениеСкладТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ЗаданиеНаПеремещение.Товары КАК ПеремещениеСкладТовары
		|ГДЕ
		|	ПеремещениеСкладТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеСкладТовары.Номенклатура,
		|	ПеремещениеСкладТовары.Характеристика,
		|	ПеремещениеСкладТовары.ДатаПроизводства";
	КонецЕсли; 
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаШапки = Результаты[0].Выбрать();
	ТабТовары = Результаты[1].Выгрузить();
	ТабТовары.Колонки.Добавить("Номенклатура");
	ТабТовары.Колонки.Добавить("Характеристика");
	ТабТовары.Колонки.Добавить("КоличествоСобрано", Новый ОписаниеТипов("Число"));
	
	ВыборкаШапки.Следующий();
	
	СтруктураВозврат.Вставить("ДокументГуид", Строка(ДокПеремещение.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("Номер", ВыборкаШапки.Номер);
	СтруктураВозврат.Вставить("Дата", ВыборкаШапки.Дата);
	СтруктураВозврат.Вставить("СкладОтправитель", Строка(ВыборкаШапки.СкладОтправитель.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("СкладОтправительНаименование", ВыборкаШапки.СкладОтправительНаименование);
	СтруктураВозврат.Вставить("СкладОтправительШК", "810" + Прав("000000000000" + Формат(ВыборкаШапки.СкладОтправительИД, "ЧГ=0"), 12));
	СтруктураВозврат.Вставить("СкладПолучатель", Строка(ВыборкаШапки.СкладПолучатель.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("СкладПолучательНаименование", ВыборкаШапки.СкладПолучательНаименование);
	СтруктураВозврат.Вставить("СкладПолучательШК", "810" + Прав("000000000000" + Формат(ВыборкаШапки.СкладПолучательИД, "ЧГ=0"), 12));
	
	ДанныеСборкиДоПрерывания = ВыборкаШапки.ДанныеСборкиНаМобильномУстройстве.Получить();
	
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		СтрокаТаб.Номенклатура = Строка(СтрокаТаб.НоменклатураСсылка.УникальныйИдентификатор());
		СтрокаТаб.Характеристика = Строка(СтрокаТаб.ХарактеристикаСсылка.УникальныйИдентификатор());
	КонецЦикла;
	
	Если ТипЗнч(ДанныеСборкиДоПрерывания) = Тип("Структура") Тогда
		Для Каждого СтрокаТовар Из ДанныеСборкиДоПрерывания.Товары Цикл
			СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика), СтрокаТовар.ДатаПроизводства));
			Если СтрокиВТаблице.Количество() > 0 Тогда
				СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
			Иначе	
				СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика)));
				Если СтрокиВТаблице.Количество() > 0 Тогда
					СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	ТабТовары.Колонки.Удалить("НоменклатураСсылка");
	ТабТовары.Колонки.Удалить("ХарактеристикаСсылка");
	СтруктураВозврат.Вставить("Товары", ТабТовары);
	
	Попытка
		
		//НЗ=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьНаборЗаписей();
		//НЗ.Отбор.Документ.Установить(ДокПеремещение);
		//НЗ.Записать();
		ДокОбъект = ДокПеремещение.ПолучитьОбъект();
		ДокОбъект.СтатусДокумента = Перечисления.СтатусыПеремещенияСклад.ВРаботе;
		//Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) И Не ЗначениеЗаполнено(ДокОбъект.Сборщик) Тогда
		//	ДокОбъект.Сборщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
		//КонецЕсли;	
		ДокОбъект.Записать(?(ДокОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ПолучитьДанныеДляРазборки(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ (ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ЗаданиеНаРазборку")) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ разборки";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Если ДокПеремещение.Подготовлен Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Данный документ уже был собран терминалом";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	Если СтруктураПараметры.Свойство("Сборщик") Тогда
		Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) Тогда
			ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
			Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Склады.Ссылка КАК Склад,
				|	СборщикиНаСкладах.Ревизор
				|ИЗ
				|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
				|		ПО СборщикиНаСкладах.Склад = Склады.Владелец
				|ГДЕ
				|	СборщикиНаСкладах.Сборщик = &ФизЛицо
				|
				|СГРУППИРОВАТЬ ПО
				|	Склады.Ссылка,
				|	СборщикиНаСкладах.Ревизор";
				
				Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоМП);
				
				Результат = Запрос.Выполнить();
				Склад=ДокПеремещение.Склад;
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				СкладДоступен=Ложь;
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Склад=Склад Тогда
						СкладДоступен=Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если  СкладДоступен=Ложь Тогда
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ "Сотрудник не привязан к складу документа";
					Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДокПеремещение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаданиеНаРазборку.Ссылка,
	               |	ЗаданиеНаРазборку.ВерсияДанных,
	               |	ЗаданиеНаРазборку.ПометкаУдаления,
	               |	ЗаданиеНаРазборку.Номер,
	               |	ЗаданиеНаРазборку.Дата,
	               |	ЗаданиеНаРазборку.Проведен,
	               |	ЗаданиеНаРазборку.Склад,
	               |	ЗаданиеНаРазборку.Подготовлен,
	               |	ЗаданиеНаРазборку.Закрыто,
	               |	ЗаданиеНаРазборку.Автор,
	               |	ЗаданиеНаРазборку.Комментарий,
	               |	ЗаданиеНаРазборку.Ответственный,
	               |	ЗаданиеНаРазборку.Номенклатура,
	               |	ЗаданиеНаРазборку.Характеристика,
	               |	ЗаданиеНаРазборку.Представление,
	               |	ЗаданиеНаРазборку.МоментВремени,
	               |	ЗаданиеНаРазборку.ДанныеСборкиНаМобильномУстройстве,
	               |	ЗаданиеНаРазборку.Сборщик,
	               |	ЗаданиеНаРазборку.Склад.Организация.ИНН КАК ИНН
	               |ИЗ
	               |	Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
	               |ГДЕ
	               |	ЗаданиеНаРазборку.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница.Наименование КАК ТТ,
	               |	ЗаданиеНаРазборкуТовары.Количество,
	               |	ЗаданиеНаРазборкуТовары.Собран,
	               |	ЗаданиеНаРазборкуТовары.Ссылка.Номенклатура КАК НоменклатураСсылка,
	               |	ЗаданиеНаРазборкуТовары.Ссылка.Характеристика КАК ХарактеристикаСсылка,
	               |	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
	               |	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница.id_TT КАК id_TT
	               |ИЗ
	               |	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
	               |ГДЕ
	               |	ЗаданиеНаРазборкуТовары.Ссылка = &Ссылка";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаШапки = Результаты[0].Выбрать();
	ТабТовары = Результаты[1].Выгрузить();
	ТабТовары.Колонки.Добавить("Номенклатура");
	ТабТовары.Колонки.Добавить("Характеристика");
	ТабТовары.Колонки.Добавить("КоличествоСобрано", Новый ОписаниеТипов("Число"));
	ТабТовары.Колонки.Добавить("ШКТТ");
	
	ВыборкаШапки.Следующий();
	
	СтруктураВозврат.Вставить("ДокументГуид", Строка(ДокПеремещение.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("Номер", ВыборкаШапки.Номер);
	СтруктураВозврат.Вставить("Дата", ВыборкаШапки.Дата);
	//+++АК BELN 2018.11.21 ЗА-00018922      
	СтруктураВозврат.Вставить("ИНН", (ВыборкаШапки.ИНН));
	//---АК BELN 2018.11.21 
	
	ДанныеСборкиДоПрерывания = ВыборкаШапки.ДанныеСборкиНаМобильномУстройстве.Получить();
	
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		СтрокаТаб.Номенклатура = Строка(СтрокаТаб.НоменклатураСсылка.УникальныйИдентификатор());
		СтрокаТаб.Характеристика = Строка(СтрокаТаб.ХарактеристикаСсылка.УникальныйИдентификатор());
		ШтрихКод = "820" + Прав("000000000000" + Формат(СтрокаТаб.id_TT, "ЧГ=0"), 12);
		СтрокаТаб.ШКТТ = ШтрихКод;
	КонецЦикла;
	
	Если ТипЗнч(ДанныеСборкиДоПрерывания) = Тип("Структура") Тогда
		Для Каждого СтрокаТовар Из ДанныеСборкиДоПрерывания.Товары Цикл
			СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ТТ", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика), СтрокаТовар.ТТ));
			Если СтрокиВТаблице.Количество() > 0 Тогда
				СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
				//Иначе	
				//	СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика)));
				//	Если СтрокиВТаблице.Количество() > 0 Тогда
				//		СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
				//	КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	ТабТовары.Колонки.Удалить("НоменклатураСсылка");
	ТабТовары.Колонки.Удалить("ХарактеристикаСсылка");
	ТабТовары.Колонки.Удалить("СтруктурнаяЕдиница");
	СтруктураВозврат.Вставить("Товары", ТабТовары);
	Если СтруктураПараметры.Свойство("Сборщик") Тогда
		Если ЗначениеЗаполнено(ВыборкаШапки.Сборщик) Тогда
			СтруктураВозврат.Вставить("Сборщик", Строка(ВыборкаШапки.Сборщик.УникальныйИдентификатор()));
		Иначе
			СтруктураВозврат.Вставить("Сборщик", СтруктураПараметры.Сборщик);
		КонецЕсли;	
	КонецЕсли;
	
	Попытка
		
		ДокОбъект = ДокПеремещение.ПолучитьОбъект();
		ДокОбъект.ОбменДанными.Загрузка=Истина;
		Если СтруктураПараметры.Свойство("Сборщик") Тогда
			Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) И Не ЗначениеЗаполнено(ДокОбъект.Сборщик) Тогда
				ДокОбъект.Сборщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьПеремещениеПриПрерывании(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ (ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ПеремещениеСклад") и ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ЗаданиеНаПеремещение")) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ перемещения";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Попытка
		ДокОбъект = ДокПеремещение.ПолучитьОбъект();
		ДокОбъект.СборкаБылаПрерванаНаМобУстройстве = Истина;
		//ДокОбъект.СтатусДокумента=Перечисления.СтатусыПеремещенияСклад.НеОбработан;                                          
		ДокОбъект.ДанныеСборкиНаМобильномУстройстве = ДанныеМобильногоПриложения;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьПеремещение(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ (ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ПеремещениеСклад") и ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ЗаданиеНаПеремещение") ) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ перемещения";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Попытка
		ДокОбъект = ДокПеремещение.ПолучитьОбъект();
		ДокОбъект.СборкаТерминаломЗакончена = Истина;
		ДокОбъект.СтатусДокумента=Перечисления.СтатусыПеремещенияСклад.Выполнен;
		ДокОбъект.ДанныеСборкиНаМобильномУстройстве = ДанныеМобильногоПриложения;
		Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
			Если ТипЗнч(ДокПеремещение) = Тип("ДокументСсылка.ПеремещениеСклад") Тогда
				СтрокаТаб.КоличествоОтправитель = 0;
				СтрокаТаб.КоличествоПолучатель = 0;
			Иначе
				СтрокаТаб.Количество = 0;
			КонецЕсли; 
		КонецЦикла;	
		Для Каждого СтрокаТаб Из СтруктураПараметры.Товары Цикл
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
			СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
			Если СтрокиВДоке.Количество() > 0 Тогда
				СтрокаВДоке = СтрокиВДоке[0];
			Иначе
				СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
				Если СтрокиВДоке.Количество() > 0 Тогда
					СтрокаВДоке = СтрокиВДоке[0];
				Иначе	
					СтрокаВДоке = ДокОбъект.Товары.Добавить();
					СтрокаВДоке.Номенклатура = Номенклатура;
					СтрокаВДоке.Характеристика = Характеристика;
					СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
					СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
				КонецЕсли;	
			КонецЕсли;
			Если ТипЗнч(ДокПеремещение) = Тип("ДокументСсылка.ПеремещениеСклад") Тогда
				СтрокаВДоке.КоличествоОтправитель = СтрокаВДоке.КоличествоОтправитель + СтрокаТаб.Количество;
				СтрокаВДоке.КоличествоПолучатель = СтрокаВДоке.КоличествоОтправитель;
			Иначе
				СтрокаВДоке.Количество = СтрокаВДоке.Количество + СтрокаТаб.Количество;
			КонецЕсли; 
		КонецЦикла;	
		
		Если СтруктураПараметры.Свойство("ТЗКоробки") Тогда
			ТЗКоробки=СтруктураПараметры.ТЗКоробки.Получить();
			Если СтруктураПараметры.Свойство("КонтрольнаяСумма") Тогда
				Разн=СтруктураПараметры.КонтрольнаяСумма-ТЗКоробки.Итог("Вес");
				Если Разн<0 Тогда
					Разн=-Разн;
				КонецЕсли; 
				Если Разн>0.5 Тогда
					ОписаниеОшибки = "Повторите попытку";
					СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, ОписаниеОшибки);
					Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
				КонецЕсли; 
			КонецЕсли; 
			
			
			Для каждого Стр Из ТЗКоробки Цикл
				Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Мен,Стр);
				Идентификатор = Новый УникальныйИдентификатор(Стр.НоменклатураИД);
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				Мен.Номенклатура=Номенклатура;
				Мен.Документ=ДокПеремещение;
				Мен.ДатаНачалаРаботыПоДокументу=СтруктураПараметры.ДатаНачалаРаботыПоДокументу;
				Если ТЗКоробки.Колонки.Найти("НомерПопытки")<>Неопределено Тогда
					Мен.НомерПопытки=Стр.НомерПопытки;
				КонецЕсли; 
				Если ТЗКоробки.Колонки.Найти("ДатаНачалаРаботыПоДокументу")<>Неопределено Тогда
					Мен.ДатаНачалаРаботыПоДокументу=Стр.ДатаНачалаРаботыПоДокументу;
				КонецЕсли; 
				Мен.Записать();
			КонецЦикла; 
		КонецЕсли; 	//
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьРазборку(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	Попытка 
		Если СтруктураПараметры.Свойство("ЖурналОбмена") Тогда
			УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства); 
			ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьЖурналОбмена(УзелОбмена, СтруктураПараметры.ЖурналОбмена);
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ (ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ЗаданиеНаРазборку")) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ разборки";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	МасНом=Новый Массив;
	Для Каждого СтрокаТаб Из СтруктураПараметры.Магазины Цикл
		
		ИД = Прав(СтрокаТаб.ТТ, 12);
		
		Пока Лев(ИД, 1) = "0" Цикл
			ИД = Сред(ИД, 2);
		КонецЦикла;
		Если СтрДлина(ИД) > 0 Тогда
			МасНом.Добавить(Число(ИД));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.id_TT
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.id_TT В(&Номера)";
	
	Запрос.УстановитьПараметр("Номера", МасНом);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗТТ = РезультатЗапроса.Выгрузить();
	
	Попытка
		Если СтруктураПараметры.Магазины.Итог("Количество")=0 ИЛИ СтруктураПараметры.Магазины.Итог("Количество")=Неопределено Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Пустая таблица товаров";
			СтруктураВозврат.Результат = Ложь;
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли; 
	Исключение
	
	КонецПопытки; 
	
	
	
	Попытка
		Если СтруктураПараметры.Свойство("ТЗКоробки") Тогда
			ТЗКоробки=СтруктураПараметры.ТЗКоробки.Получить();
			
			
			Для каждого Стр Из ТЗКоробки Цикл
				Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Мен,Стр);
				Идентификатор = Новый УникальныйИдентификатор(Стр.НоменклатураИД);
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				Мен.Номенклатура=Номенклатура;
				Мен.Документ=ДокПеремещение;
				Мен.ДатаНачалаРаботыПоДокументу=СтруктураПараметры.ДатаНачалаРаботыПоДокументу;
				Если ТЗКоробки.Колонки.Найти("НомерПопытки")<>Неопределено Тогда
					Мен.НомерПопытки=Стр.НомерПопытки;
				КонецЕсли; 
				Если ТЗКоробки.Колонки.Найти("ДатаНачалаРаботыПоДокументу")<>Неопределено Тогда
					Мен.ДатаНачалаРаботыПоДокументу=Стр.ДатаНачалаРаботыПоДокументу;
				КонецЕсли; 
				Мен.Записать();
			КонецЦикла; 
		КонецЕсли; 	//
		
		
		ДокОбъект = ДокПеремещение.ПолучитьОбъект();
		ТоварыВДокументеИсх=ДокОбъект.Товары.Выгрузить();		
		ДокОбъект.Подготовлен=Истина;
		//ДокОбъект.ДанныеСборкиНаМобильномУстройстве = ДанныеМобильногоПриложения;
		Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
			СтрокаТаб.Количество = 0;
			СтрокаТаб.КоличествоКоробок = 0;
		КонецЦикла;	
		
		
		Для Каждого СтрокаТаб Из СтруктураПараметры.Магазины Цикл
			//ТТ=	ВнешниеДанные.СчитатьДанныеПоШтрихКоду(СтрокаТаб.ТТ).Объект;
			
			
			ИД = Прав(СтрокаТаб.ТТ, 12);
			
			Пока Лев(ИД, 1) = "0" Цикл
				ИД = Сред(ИД, 2);
			КонецЦикла;
			Если СтрДлина(ИД) > 0 Тогда
				СтрТТ=ТЗТТ.Найти(Число(ИД));
				Если СтрТТ<>Неопределено Тогда
					ТТ=СтрТТ.Ссылка;
					Если СтруктураПараметры.Магазины.Колонки.Найти("ДатаПроизводства")=Неопределено Тогда
						СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", ТТ));
						Если СтрокиВДоке.Количество() > 0 Тогда
							СтрокаВДоке = СтрокиВДоке[0];
							СтрокаВДоке.Количество =  СтрокаТаб.Количество;
							СтрокаВДоке.КоличествоКоробок =  СтрокаТаб.КоличествоКоробокПринятое;
							СтрокаВДоке.Собран =  Истина;
						КонецЕсли;
						ЗаписьЖурналаРегистрации("ВНИМАНИЕ!!! Устройство "+СтруктураПараметры.КодУстройства+" не обновлено", УровеньЖурналаРегистрации.Ошибка, ,, "ВНИМАНИЕ!!! Устройство "+СтруктураПараметры.КодУстройства+" не обновлено");		
					Иначе
						//+++АК BELN 2018.09.20 ИП-00019882
						Если ЗначениеЗаполнено(СтрокаТаб.ДатаПроизводства) Тогда
							МасСтрДП=ДокОбъект.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", ТТ));
							ТЗДП=Новый ТаблицаЗначений;
							ТЗДП.Колонки.Добавить("РазностьДат");
							ТЗДП.Колонки.Добавить("Дата");
							Для каждого Эл Из МасСтрДП Цикл
								Если НЕ ЗначениеЗаполнено(Эл.ДатаПроизводства) Тогда
									Продолжить;
								КонецЕсли; 
								ТекГодДП=Год(Эл.ДатаПроизводства);
								ТекМесяцДП=Месяц(Эл.ДатаПроизводства);
								ТекДеньДП=День(Эл.ДатаПроизводства);
								
								ТекДата=Дата(ТекГодДП-1,Месяц(СтрокаТаб.ДатаПроизводства),День(СтрокаТаб.ДатаПроизводства));
								Разн=ТекДата-Эл.ДатаПроизводства;
								Разн=?(Разн>0,Разн,-Разн);
								
								НовСтрДП=ТЗДП.Добавить();
								НовСтрДП.Дата=ТекДата;
								НовСтрДП.РазностьДат=Разн;
								
								ТекДата=Дата(ТекГодДП,Месяц(СтрокаТаб.ДатаПроизводства),День(СтрокаТаб.ДатаПроизводства));
								Разн=ТекДата-Эл.ДатаПроизводства;
								Разн=?(Разн>0,Разн,-Разн);
								
								НовСтрДП=ТЗДП.Добавить();
								НовСтрДП.Дата=ТекДата;
								НовСтрДП.РазностьДат=Разн;
								
								ТекДата=Дата(ТекГодДП+1,Месяц(СтрокаТаб.ДатаПроизводства),День(СтрокаТаб.ДатаПроизводства));
								Разн=ТекДата-Эл.ДатаПроизводства;
								Разн=?(Разн>0,Разн,-Разн);
								
								НовСтрДП=ТЗДП.Добавить();
								НовСтрДП.Дата=ТекДата;
								НовСтрДП.РазностьДат=Разн;
								
							КонецЦикла; 
							
							ТЗДП.Сортировать("РазностьДат");
							Если ТЗДП.Количество() И Год(СтрокаТаб.ДатаПроизводства)<Год(ТЗДП[0].Дата) Тогда
								ДатаПроизводства=ТЗДП[0].Дата;
							Иначе	
								ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
							КонецЕсли; 
						Иначе	
							ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
						КонецЕсли; 
						
						//---АК BELN 2018.09.20 
						
						Фл=Ложь;
						СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница,ДатаПроизводства", ТТ,ДатаПроизводства));
						Если СтрокиВДоке.Количество()=0 Тогда
							Если ЗначениеЗаполнено(ДатаПроизводства) И НЕ ДокОбъект.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", ТТ)).Количество()=1 Тогда
								СтрокаВДоке = ДокОбъект.Товары.Добавить();
								СтрокаВДоке.СтруктурнаяЕдиница =  ТТ;
								СтрокаВДоке.Количество =  СтрокаТаб.Количество;
								СтрокаВДоке.КоличествоКоробок =  СтрокаТаб.КоличествоКоробокПринятое;
								СтрокаВДоке.ДатаПроизводства=  ДатаПроизводства;
								
								СтрокаВДоке.Собран =  Истина;
								Фл=Истина;
							Иначе
								СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", ТТ));
							КонецЕсли; 
						КонецЕсли; 
						Если Фл=Ложь Тогда
							Если СтрокиВДоке.Количество() > 0 Тогда
								СтрокаВДоке = СтрокиВДоке[0];
								СтрокаВДоке.Количество =  СтрокаВДоке.Количество+СтрокаТаб.Количество;
								СтрокаВДоке.КоличествоКоробок =  СтрокаВДоке.КоличествоКоробок+СтрокаТаб.КоличествоКоробокПринятое;
								Если ЗначениеЗаполнено(ДатаПроизводства) Тогда
									СтрокаВДоке.ДатаПроизводства=  ДатаПроизводства;
								КонецЕсли; 
								
								СтрокаВДоке.Собран =  Истина;
							Иначе
								СтрокаВДоке = ДокОбъект.Товары.Добавить();
								СтрокаВДоке.СтруктурнаяЕдиница =  ТТ;
								СтрокаВДоке.Количество =  СтрокаТаб.Количество;
								СтрокаВДоке.КоличествоКоробок =  СтрокаТаб.КоличествоКоробокПринятое;
								СтрокаВДоке.ДатаПроизводства=  ДатаПроизводства;
								
								СтрокаВДоке.Собран =  Истина;
							КонецЕсли;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;	
		//+++АК BELN 2018.10.03 ИП-00019979
		Если НЕ СтруктураПараметры.Свойство("РазобранныеПаллеты") Тогда
			Паллета=Справочники.СоставПаллеты.НайтиПоРеквизиту("ИД",СтруктураПараметры.ИДПаллеты);
			Если НЕ ЗначениеЗаполнено(Паллета) Тогда
				ОписаниеОшибки = "Не найдена паллета";
				СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, ОписаниеОшибки);
				Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
			КонецЕсли;
			ОбПаллета=Паллета.ПолучитьОбъект();
			НужнаНоваяПаллета=Ложь;
			Состав=ОбПаллета.Состав.Выгрузить();
			
			КолТоваров=ОбПаллета.ЗаданияНаРазборку.Количество();
			Для Сч=0 по КолТоваров-1 Цикл
				Если ОбПаллета.ЗаданияНаРазборку[КолТоваров-1-Сч].Задание=ДокПеремещение Тогда
					ОбПаллета.ЗаданияНаРазборку.Удалить(КолТоваров-1-Сч);
				КонецЕсли; 
			КонецЦикла; 
			
			Для Каждого СтрокаТаб Из СтруктураПараметры.Товары Цикл
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
				СтрокиВДоке = Состав.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
				Если СтрокиВДоке.Количество() = 0 Тогда
					СтрокиВДоке = Состав.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
				КонецЕсли;
				
				Если СтрокиВДоке.Количество() > 0 Тогда
					СтрокаВДоке = СтрокиВДоке[0];
					СтрокаВДоке.Количество = ?(СтрокаВДоке.Количество - СтрокаТаб.Количество<=0,0,СтрокаВДоке.Количество - СтрокаТаб.Количество);
				КонецЕсли;
				ИД = Прав(СтрокаТаб.ШКТТ, 12);
				
				Пока Лев(ИД, 1) = "0" Цикл
					ИД = Сред(ИД, 2);
				КонецЦикла;
				Если СтрДлина(ИД) > 0 Тогда
					СтрТТ=ТЗТТ.Найти(Число(ИД));
					Если СтрТТ<>Неопределено Тогда
						
						НовСтр=ОбПаллета.ЗаданияНаРазборку.Добавить();
						НовСтр.Задание=ДокПеремещение;
						НовСтр.Номенклатура=Номенклатура;
						НовСтр.Характеристика=Характеристика;
						НовСтр.ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
						НовСтр.Количество=СтрокаТаб.Количество;
						НовСтр.СтруктурнаяЕдиница=СтрТТ.Ссылка;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;	
			Для каждого СтрПал Из Состав Цикл
				Если СтрПал.Количество>0.5 Тогда
					НужнаНоваяПаллета=Истина;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НужнаНоваяПаллета Тогда
				НоваяПаллета=Справочники.СоставПаллеты.СоздатьЭлемент();
				НоваяПаллета.РасходныйОрдер=Паллета.РасходныйОрдер;
				НоваяПаллета.СтарыйИД=Паллета.ИД;
				НоваяПаллета.Актуален=Истина;
				Для каждого СтрПал Из Состав Цикл
					Если СтрПал.Количество>0.5 Тогда
						ЗаполнитьЗначенияСвойств(НоваяПаллета.Состав.Добавить(),СтрПал);
					КонецЕсли; 
				КонецЦикла; 
				НоваяПаллета.Записать();
				СтруктураВозврат.ОписаниеОшибок="Остался товар на паллете, для нее будет создан новый ИД и нужно кладовщику распечатать на эту паллету новую этикетку";
			КонецЕсли; 
			ОбПаллета.Актуален=Ложь;
			ОбПаллета.Записать();
		Иначе	
			РазобранныеПаллеты=СтруктураПараметры.РазобранныеПаллеты;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставПаллетыСостав.Ссылка.ИД КАК ИД,
			|	СоставПаллетыСостав.Номенклатура,
			|	СоставПаллетыСостав.Характеристика,
			|	СоставПаллетыСостав.ДатаПроизводства,
			|	СУММА(СоставПаллетыСостав.Количество) КАК Количество,
			|	СоставПаллетыСостав.Ссылка КАК Ссылка,
			|	СоставПаллетыСостав.Ссылка.РасходныйОрдер КАК РасходныйОрдер
			|ИЗ
			|	Справочник.СоставПаллеты.Состав КАК СоставПаллетыСостав
			|ГДЕ
			|	СоставПаллетыСостав.Ссылка.ИД В(&ИД)
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставПаллетыСостав.Ссылка.ИД,
			|	СоставПаллетыСостав.Номенклатура,
			|	СоставПаллетыСостав.Характеристика,
			|	СоставПаллетыСостав.ДатаПроизводства,
			|	СоставПаллетыСостав.Ссылка,
			|	СоставПаллетыСостав.Ссылка.РасходныйОрдер
			|ИТОГИ ПО
			|	Ссылка,
			|	РасходныйОрдер,
			|	ИД";
			
			Запрос.УстановитьПараметр("ИД", РазобранныеПаллеты.ВыгрузитьКолонку("ИДПаллеты"));
			
			РезультатЗапроса = Запрос.Выполнить();
			Выб = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Выб.Следующий() Цикл
				ВыборкаРО = Выб.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаРО.Следующий() Цикл
					ВыборкаИД = ВыборкаРО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаИД.Следующий() Цикл
						Паллета=Выб.Ссылка;
						Если НЕ ЗначениеЗаполнено(Паллета) Тогда
							ОписаниеОшибки = "Не найдена паллета";
							СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, ОписаниеОшибки);
							Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
						КонецЕсли;
						ОбПаллета=Паллета.ПолучитьОбъект();
						НужнаНоваяПаллета=Ложь;
						
						КолТоваров=ОбПаллета.ЗаданияНаРазборку.Количество();
						Для Сч=0 по КолТоваров-1 Цикл
							Если ОбПаллета.ЗаданияНаРазборку[КолТоваров-1-Сч].Задание=ДокПеремещение Тогда
								ОбПаллета.ЗаданияНаРазборку.Удалить(КолТоваров-1-Сч);
							КонецЕсли; 
						КонецЦикла; 
						
						
						ВыборкаДетальныеЗаписи = ВыборкаИД.Выбрать();
						Состав=Новый ТаблицаЗначений;
						Состав.Колонки.Добавить("Номенклатура");
						Состав.Колонки.Добавить("Характеристика");
						Состав.Колонки.Добавить("ДатаПроизводства");
						Состав.Колонки.Добавить("Количество");
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							ЗаполнитьЗначенияСвойств(Состав.Добавить(),ВыборкаДетальныеЗаписи);	
						КонецЦикла;
						
						МасСтрПал=РазобранныеПаллеты.НайтиСтроки(Новый Структура("ИДПаллеты",ВыборкаИД.ИД));
						
						Для Каждого СтрокаТаб Из МасСтрПал Цикл
							Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
							Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
							СтрокиВДоке = Состав.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
							Если СтрокиВДоке.Количество() = 0 Тогда
								СтрокиВДоке = Состав.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
							КонецЕсли;
							
							Если СтрокиВДоке.Количество() > 0 Тогда
								СтрокаВДоке = СтрокиВДоке[0];
								СтрокаВДоке.Количество = ?(СтрокаВДоке.Количество - СтрокаТаб.Количество<=0,0,СтрокаВДоке.Количество - СтрокаТаб.Количество);
							КонецЕсли;
							ИД = Прав(СтрокаТаб.ШКТТ, 12);
							
							Пока Лев(ИД, 1) = "0" Цикл
								ИД = Сред(ИД, 2);
							КонецЦикла;
							Если СтрДлина(ИД) > 0 Тогда
								СтрТТ=ТЗТТ.Найти(Число(ИД));
								Если СтрТТ<>Неопределено Тогда
									
									НовСтр=ОбПаллета.ЗаданияНаРазборку.Добавить();
									НовСтр.Задание=ДокПеремещение;
									НовСтр.Номенклатура=Номенклатура;
									НовСтр.Характеристика=Характеристика;
									НовСтр.ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
									НовСтр.Количество=СтрокаТаб.Количество;
									НовСтр.СтруктурнаяЕдиница=СтрТТ.Ссылка;
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла;	
						Для каждого СтрПал Из Состав Цикл
							Если СтрПал.Количество>0.5 Тогда
								НужнаНоваяПаллета=Истина;
							КонецЕсли; 
						КонецЦикла; 
						
						Если НужнаНоваяПаллета Тогда
							НоваяПаллета=Справочники.СоставПаллеты.СоздатьЭлемент();
							НоваяПаллета.РасходныйОрдер=ВыборкаРО.РасходныйОрдер;
							НоваяПаллета.СтарыйИД=ВыборкаИД.ИД;
							НоваяПаллета.Актуален=Истина;
							Для каждого СтрПал Из Состав Цикл
								Если СтрПал.Количество>0.5 Тогда
									ЗаполнитьЗначенияСвойств(НоваяПаллета.Состав.Добавить(),СтрПал);
								КонецЕсли; 
							КонецЦикла; 
							НоваяПаллета.Записать();
							СтруктураВозврат.ОписаниеОшибок=СтруктураВозврат.ОписаниеОшибок+Символы.ПС+"Остался товар на паллете "+Строка(ВыборкаИД.ИД)+", для нее будет создан новый ИД и нужно кладовщику распечатать на эту паллету новую этикетку";
						КонецЕсли; 
						ОбПаллета.Актуален=Ложь;
						ОбПаллета.Записать();
						
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			
		КонецЕсли; 
		
		//---АК BELN 2018.10.03 
		
		
		
		ТоварыВДокументе=ДокОбъект.Товары.Выгрузить();		
		
		ФлНужноПроведение=Ложь;
		Для каждого СтрокаТаб Из ТоварыВДокументеИсх Цикл
			
			СтрокиВДоке = ТоварыВДокументе.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, ДатаПроизводства,Количество", 
			СтрокаТаб.СтруктурнаяЕдиница, СтрокаТаб.ДатаПроизводства, СтрокаТаб.Количество));
			Если СтрокиВДоке.Количество()=0 Тогда
				ФлНужноПроведение=Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если ФлНужноПроведение=Ложь Тогда
			Для каждого СтрокаТаб Из ТоварыВДокументе Цикл
				
				СтрокиВДоке = ТоварыВДокументеИсх.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, ДатаПроизводства,Количество", 
				(СтрокаТаб.СтруктурнаяЕдиница), СтрокаТаб.ДатаПроизводства, СтрокаТаб.Количество));
				Если СтрокиВДоке.Количество()=0 Тогда
					ФлНужноПроведение=Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		
		Если ФлНужноПроведение Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			ДокОбъект.ОбменДанными.Загрузка=Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

//+++АК BELN 2018.07.18 

Функция ВыбратьМикромаркет(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Попытка
		Узел=ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства).ПолучитьОбъект();
		Узел.Магазин=Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки",СтруктураПараметры.КодТТ);
		Узел.Записать();
		
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//---АК BELN 2018.07.18 


//+++АК BELN 2018.06.19 ИП-00019004      
Функция ПолучитьПоступленияМикромаркета(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства);
	ТТ=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Магазин");
	НомерТочкиПоАйпи=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТ, "НомерТочки");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыОпераций.code_operation,
	|	ТипыОпераций.name_operation,
	|	ТипыОпераций.Ссылка,
	|	ТипыОпераций.Наименование,
	|	ТипыОпераций.field_operation
	|ИЗ
	|	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	|ГДЕ
	|	ТипыОпераций.table_operation = &table_operation";
	
	Запрос.УстановитьПараметр("table_operation", "td_move");
	
	ТабКеш = Запрос.Выполнить().Выгрузить();
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("id_doc", Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("doc_date", Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("operation_type", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ArticleGroups", Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Koment", Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Await_err", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Confirm_type", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Confirm_reason", Новый ОписаниеТипов("Число"));
	
	ТекстЗапросаSQL = "Exec sms_repl.dbo.sp_td_move_general " + ВнешниеДанные.ФорматПоля(НомерТочкиПоАйпи);
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НовСтр = ТабДанные.Добавить();
			НовСтр.id_doc = СокрЛП(rs.Fields("id_doc").Value);
			НовСтр.doc_date = СокрЛП(rs.Fields("doc_date").Value);
			НовСтр.operation_type = rs.Fields("operation_type").Value;
			НовСтр.ArticleGroups = СокрЛП(rs.Fields("ArticleGroups").Value);
			НовСтр.Koment = СокрЛП(rs.Fields("Koment").Value);
			НовСтр.Await_err = rs.Fields("Await_err").Value;
			НовСтр.Confirm_reason = rs.Fields("Confirm_reason").Value;
			НовСтр.Confirm_type = rs.Fields("Confirm_type").Value;
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабДанные);
	ТекстЗапроса = "ВЫБРАТЬ
	|	Таб.Id_doc,
	|	Таб.operation_type,
	|	Таб.ArticleGroups,
	|	Таб.doc_date,
	|	Таб.Koment,
	|	Таб.Await_err,
	|	Таб.Confirm_type,
	|	Таб.Confirm_reason
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ.Id_doc КАК СТРОКА(50)) КАК Ссылка,
	|	МАКСИМУМ(ВТ.operation_type) КАК operation_type,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВТ.ArticleGroups КАК СТРОКА(500))) КАК ArticleGroups,
	|	МАКСИМУМ(ВТ.doc_date) КАК ДатаДок,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ.operation_type > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Проведен,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВТ.Koment КАК СТРОКА(500))) КАК Koment,
	|	МАКСИМУМ(ВТ.Await_err) КАК Await_err,
	|	МАКСИМУМ(ВТ.Confirm_type) КАК Confirm_type,
	|	МАКСИМУМ(ВТ.Confirm_reason) КАК Confirm_reason
	|ИЗ
	|	ВТ_Данные КАК ВТ
	|ГДЕ 1 = 1";
	//Если ВыводитьОперации = "Ожидающие исправления" Тогда
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|	И ВТ.Await_err = 1";
	//ИначеЕсли ВыводитьОперации = "Не обработанные сервером" Тогда
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|	И ВТ.Confirm_type = 0";
	//КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	И ВТ.operation_type В (" + ВнешниеДанные.ФорматПоля(400) + ", " + ВнешниеДанные.ФорматПоля(400 * -1) + ")";
	ТекстЗапроса = ТекстЗапроса + "
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ВТ.Id_doc КАК СТРОКА(50))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДок УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	ТоварныеОперации=Новый ТаблицаЗначений;
	ТоварныеОперации.Колонки.Добавить("ArticleGroups");
	ТоварныеОперации.Колонки.Добавить("Await_err");
	ТоварныеОперации.Колонки.Добавить("Confirm_reason");
	ТоварныеОперации.Колонки.Добавить("Confirm_type");
	ТоварныеОперации.Колонки.Добавить("Koment");
	ТоварныеОперации.Колонки.Добавить("operation_type");
	ТоварныеОперации.Колонки.Добавить("ДатаДок");
	ТоварныеОперации.Колонки.Добавить("Проведен");
	ТоварныеОперации.Колонки.Добавить("Ссылка");
	
	
	
	
	
	Пока Выборка.Следующий() Цикл
		НовСтр = ТоварныеОперации.Добавить();
		НовСтр.ArticleGroups = Выборка.ArticleGroups;
		НовСтр.Await_err = Выборка.Await_err;
		НовСтр.Confirm_reason = Выборка.Confirm_reason;
		НовСтр.Confirm_type = Выборка.Confirm_type;
		НовСтр.Koment = Выборка.Koment;
		КодОперации = Выборка.operation_type;
		Если КодОперации < 0 Тогда
			КодОперации = КодОперации * -1;
		КонецЕсли;	
		СтрокиИзКеша = ТабКеш.НайтиСтроки(Новый Структура("field_operation, code_operation", "operation_type_orig", КодОперации));
		Если СтрокиИзКеша.Количество() > 0 Тогда
			НовСтр.operation_type = "(" + ВнешниеДанные.ФорматПоля(СтрокиИзКеша[0].code_operation) + ") " + СтрокиИзКеша[0].name_operation;
		Иначе
			НовСтр.operation_type = КодОперации;
		КонецЕсли;
		КодПричины = Выборка.Confirm_reason;
		СтрокиИзКеша = ТабКеш.НайтиСтроки(Новый Структура("field_operation, code_operation", "Confirm_reason", КодПричины));
		Если СтрокиИзКеша.Количество() > 0 Тогда
			НовСтр.Confirm_reason = СтрокиИзКеша[0].Наименование;
		Иначе
			НовСтр.Confirm_reason = ?(ЗначениеЗаполнено(КодПричины), КодПричины, "");
		КонецЕсли;
		НовСтр.ДатаДок = Выборка.ДатаДок;
		НовСтр.Проведен = Выборка.Проведен;
		НовСтр.Ссылка = Выборка.Ссылка;
	КонецЦикла;	
	
	
	ADOСоединение.Close();
	
	
	
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", ТоварныеОперации);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//---АК BELN 2018.06.19 

//+++АК BELN 2018.06.19 ИП-00019004      
Функция ЗагрузитьПриходМикромаркета(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	РегламентныеЗаданияСервер.СоздатьПриходыМикромаркетов(СтруктураПараметры.КодУстройства);
	
	
	
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//---АК BELN 2018.06.19 

//+++АК BELN 2018.06.19 ИП-00019004      
Функция УдалитьОперациюМикромаркета(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "Удаление невозможно", Ложь);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	Идент = (СтруктураПараметры.Идент);
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "DELETE FROM [SMS_REPL].[dbo].[TD_move]
	|WHERE Id_doc = " + ВнешниеДанные.ФорматПоля(Идент);
	//|	and not Id_doc IN (SELECT [Id_doc]
	//|						FROM [SMS_REPL].[dbo].[TD_move] (nolock)
	//|						Where Id_doc = " + ВнешниеДанные.ФорматПоля(Идент) + " and Confirm_type = 1)";
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);	
	
	ОбъектОбработка = Документы.МП_ЗадачаТехнолога.ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОбъектОбработка.УдалитьСвязанныеРегистры(Идент);
	
	
	
	
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//---АК BELN 2018.06.19 

Функция ВернутьТаблицуКодовПодтверждений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыОпераций.field_operation,
	|	ТипыОпераций.code_operation,
	|	ТипыОпераций.name_operation,
	|	ТипыОпераций.Наименование
	|ИЗ
	|	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	|ГДЕ
	|	ТипыОпераций.field_operation ПОДОБНО ""Confirm_reason""
	|	И ТипыОпераций.table_operation ПОДОБНО ""td_move""";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 


//+++АК BELN 2018.06.19 ИП-00019004      
Функция ПрочитатьОперациюМикромаркета(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ИдДок = (СтруктураПараметры.Идент);
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства);
	сообщить(УзелОбмена);
	ТТ=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Магазин");
	НомерТочкиПоАйпи=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТ, "НомерТочки");
	АйдиТочкиПоАйпи=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТ, "id_TT");
	
	ОбъектОбработка = Документы.МП_ЗадачаТехнолога.ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	Товары=ОбъектОбработка.Товары.Выгрузить();
	Товары.Колонки.Добавить("РасхождениеСоСкладом");
	Товары.Колонки.Добавить("Распределено");
	Товары.Колонки.Добавить("Нужно");
	Товары.Колонки.Добавить("ПланПродаж");
	Товары.Колонки.Добавить("Избыток");                                              
	Товары.Колонки.Добавить("ФактОстатокНаВечер");
	Товары.Колонки.Добавить("ОтправилСклад");
	Товары.Колонки.Добавить("РазницаПоставки");
	Товары.Колонки.Добавить("ШтукВУпаковке");
	Товары.Колонки.Добавить("Продажи5МинутПослеПечати");
	Товары.Колонки.Добавить("ОстатокНаСкладе");
	Товары.Колонки.Номенклатура.Имя="НоменклатураСсылка";
	Товары.Колонки.Характеристика.Имя="ХарактеристикаСсылка";
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("Характеристика");
	//Товары.Колонки.Добавить("ОтправилСклад");   Продажи5МинутПослеПечати ОстатокНаСкладе
	
	
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//АК БЕЛН 05.09.2016++
	//ТекстЗапросаSQL = "SELECT TD.Id_doc, TD.opendate, TD.closedate, TD.id_tov, TD.id_kontr, CAST(CASE WHEN ISNULL(TD.Date_proizv, '1900-01-01') < '2000-01-01' THEN '1900-01-01' ELSE TD.Date_proizv END as datetime) as Date_proizv, TD.Quantity as Quantity, TD.Quantity_inv as Quantity_inv, TD.operation_type, TD.Corr_id_tt
	//			|, TD.Confirm_type, TD.Confirm_date, CAST(TD.Confirm_reason as integer) as Confirm_reason, TD.id_reason, TD.balance_ost, CAST(TD.tduid as nvarchar(36)) as tduid, TD.Descr, TD.Quantity_inv, TD.Basesum, TD.id_vikl, TD.CashierID, CONVERT(datetime, TD.time_delivery) as time_delivery, ISNULL(TD.Komment_raspr, '') as Komment_raspr
	//			|, ISNULL(TD.Priemka_BezPerescheta, 0) Priemka_BezPerescheta
	//			|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
	//			| WHERE (TD.Id_doc = " + ВнешниеДанные.ФорматПоля(ИдДок) + " or (TD.Id_doc_General = " + ВнешниеДанные.ФорматПоля(ИдДок) + " and TD.Operation_type > 0)) and TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "
	//			|	and CAST(ISNULL(TD.Confirm_reason, 0) as integer) <> 8";	
	ТекстЗапросаSQL = "SELECT CAST(TD.Id_doc as  nvarchar(36)) Id_doc, TD.opendate, TD.closedate, TD.id_tov, TD.id_kontr, CAST(CASE WHEN ISNULL(TD.Date_proizv, '1900-01-01') < '2000-01-01' THEN '1900-01-01' ELSE TD.Date_proizv END as datetime) as Date_proizv, TD.Quantity as Quantity, TD.Quantity_inv as Quantity_inv, TD.operation_type, TD.Corr_id_tt
	|, TD.Confirm_type, TD.Confirm_date, CAST(TD.Confirm_reason as integer) as Confirm_reason, TD.id_reason, TD.balance_ost, CAST(TD.tduid as nvarchar(36)) as tduid, TD.Descr, TD.Quantity_inv, TD.Basesum, TD.id_vikl, TD.CashierID, CONVERT(datetime, TD.time_delivery) as time_delivery, ISNULL(TD.Komment_raspr, '') as Komment_raspr
	|, ISNULL(TD.Priemka_BezPerescheta, 0) Priemka_BezPerescheta, TD.Upakovka_Opened, ISNULL(TD.KolvoTTN, 0) KolvoTTN, ISNULL(TD.KolvoVetDoc, 0) KolvoVetDoc, ISNULL(TD.TemperaturePriPostavke, -99) TemperaturePriPostavke, ISNULL(TD.OtsutstvuetVetSpravkaNaTovar, 0) OtsutstvuetVetSpravkaNaTovar, ISNULL(TD.KolvoRazvakuum, 0) KolvoRazvakuum
	| , TD.Quantity_inv1 as Quantity_inv1, TD.Quantity_inv2 as Quantity_inv2
	|FROM  SMS_Repl.dbo.TD_move as TD with (nolock, index (ind1))
	| WHERE (TD.Id_doc = " + ВнешниеДанные.ФорматПоля(ИдДок) + " or (TD.Id_doc_General = " + ВнешниеДанные.ФорматПоля(ИдДок) + " and TD.Operation_type > 0)) and TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерТочкиПоАйпи) + "
	|	and CAST(ISNULL(TD.Confirm_reason, 0) as integer) <> 8";	
	
	//АК БЕЛН 05.09.2016--
	
	//rs.MoveFirst();
	//Результат = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
	
	ДокЗакрыт = Ложь;
	
	КодыПодтверждений = ВернутьТаблицуКодовПодтверждений();
	
	ЗапросПричинаСписания = Новый Запрос();
	ЗапросПричинаСписания.Текст = "ВЫБРАТЬ
	|	ПричиныСписания.Ссылка,
	|	ПричиныСписания.ИД
	|ИЗ
	|	Справочник.ПричиныСписания КАК ПричиныСписания";
	
	ТабПричиныСписания = ЗапросПричинаСписания.Выполнить().Выгрузить();
	
	
	//+++АК BELN 2018.03.27 
	УстановитьПривилегированныйРежим(Истина);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МагазиныКПересчетуНаДату.Магазин,
	|	МагазиныКПересчетуНаДату.Дата
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.МагазиныКПересчетуНаДату КАК МагазиныКПересчетуНаДату
	|ГДЕ
	|	МагазиныКПересчетуНаДату.Дата = &Дата
	|	И МагазиныКПересчетуНаДату.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МагазиныКПересчетуНаДату.Магазин
	|ИЗ
	|	вт КАК МагазиныКПересчетуНаДату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МагазиныКПересчетуНаДатуИскл КАК МагазиныКПересчетуНаДатуИскл
	|		ПО МагазиныКПересчетуНаДату.Дата = МагазиныКПересчетуНаДатуИскл.Дата
	|			И МагазиныКПересчетуНаДату.Магазин = МагазиныКПересчетуНаДатуИскл.Магазин
	|ГДЕ
	|	МагазиныКПересчетуНаДатуИскл.Магазин ЕСТЬ NULL";
	
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Магазин", ТТ);
	
	РезультатЗапроса = Запрос.Выполнить();
	ФлПересч=НЕ РезультатЗапроса.Пустой();	
	
	//---АК BELN 2018.03.27 
	
	ИнвентаризацияРаспечатана = Ложь;
	
	//МассивМагазиныТест = Новый Массив();
	//МассивМагазиныТест.Добавить(434);
	//МассивМагазиныТест.Добавить(951);
	//МассивМагазиныТест.Добавить(295);
	//МассивМагазиныТест.Добавить(945);
	//МассивМагазиныТест.Добавить(678);
	//МассивМагазиныТест.Добавить(872);
	//МассивМагазиныТест.Добавить(710);
	//МассивМагазиныТест.Добавить(580);
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НовСтр = Товары.Добавить();
			НовСтр.ИдТовара = rs.Fields("id_tov").Value;
			НовСтр.ИдПроизводитель = rs.Fields("id_kontr").Value;
			НовСтр.ДатаПроизводства = ?(rs.Fields("Date_proizv").Value < '2000-01-01', '00010101', rs.Fields("Date_proizv").Value);
			НовСтр.Количество = rs.Fields("Quantity").Value;
			НовСтр.Сумма = rs.Fields("Basesum").Value;
			НовСтр.Цена = ?(НовСтр.Количество = 0, 0, НовСтр.Сумма / НовСтр.Количество);
			//АК БЕЛН 05.09.2016++
			Если rs.Fields("Upakovka_Opened").Value=1 Тогда
				НовСтр.ВскрытаУпаковка = "Да";
			ИначеЕсли rs.Fields("Upakovka_Opened").Value=2 Тогда
				НовСтр.ВскрытаУпаковка = "Нет";
			КонецЕсли; 
			//АК БЕЛН 05.09.2016--
			//Если rs.Fields("Priemka_BezPerescheta").Value > 0 Тогда
			ПриемкаБезПересчета = ?(rs.Fields("Priemka_BezPerescheta").Value = 1, Истина, Ложь);
			//+++АК BELN 2018.03.23 
			ПлановыйПересчет = ?(rs.Fields("Priemka_BezPerescheta").Value = 2 ИЛИ rs.Fields("Priemka_BezPerescheta").Value = -2, Истина, Ложь) ИЛИ 
			(НачалоДня(rs.Fields("opendate").Value)=НачалоДня(ТекущаяДата()) И ФлПересч);
			//сообщить(rs.Fields("Priemka_BezPerescheta").Value);
			//---АК BELN 2018.03.23 
			//если это склад рекламных материалов, тогда не нужно запрещать редактирвоание
			//Если ПриемкаБезПересчета Тогда
			//	Расходник = Документы.РасходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("Id_doc").Value));
			//	Если Найти(Расходник, "Объект не найден") = 0 Тогда
			//		Если Расходник.Склад.ЭтоСкладРеклМатериалов Тогда
			//			ПриемкаБезПересчета = Ложь;
			//			//+++АК BELN 2018.03.23 
			//			ПлановыйПересчет = Ложь;
			//			//---АК BELN 2018.03.23 
			//		КонецЕсли;	
			//	КонецЕсли;	
			//КонецЕсли;	
			//КонецЕсли;	
			Продавец = Справочники.ПерсоналККМ.НайтиПоКоду(Прав("0000000000" + Формат(rs.Fields("CashierID").Value, "ЧН=; ЧГ=0"), 10));
			
			//Если Выборка.closedate <> Дата("19000101") Тогда
			//	ДокЗакрыт = Истина;
			//КонецЕсли;
			//Если НЕ ЗначениеЗаполнено(ГруппаНоменклатурыДляИнвентаризации)
			//	И ЗначениеЗаполнено(rs.Fields("id_vikl").Value) Тогда
			//	ГруппаНоменклатурыДляИнвентаризации = Справочники.МестаВыкладки.НайтиПоРеквизиту("ИД", rs.Fields("id_vikl").Value);
			//КонецЕсли;
			//ЭтоОбязательнаяИнвентаризация = Истина;
			ЭтоОбязательнаяИнвентаризация = (rs.Fields("id_vikl").Value = 99999);
			ДокЗакрыт = rs.Fields("operation_type").Value > 0 ИЛИ ДокЗакрыт;
			ВремяДоставки = rs.Fields("time_delivery").Value;
			КоличествоДокументовТТН = rs.Fields("KolvoTTN").Value;
			КоличествоВетСправок = rs.Fields("KolvoVetDoc").Value;
			ТемператураТовараПриПоставке = rs.Fields("TemperaturePriPostavke").Value;
			
			//НовСтр.ОтсутствуетВетСправка = rs.Fields("OtsutstvuetVetSpravkaNaTovar").Value;
			
			ИнвентаризацияРаспечатана = Макс(ИнвентаризацияРаспечатана, rs.Fields("Quantity_inv").Value <> null);
			КодОперации = rs.Fields("operation_type").Value * ?(ДокЗакрыт, 1, -1);
			Комментарий = rs.Fields("Descr").Value;
			ПричинаСписанияКод = rs.Fields("id_reason").Value;
			НовСтр.КолвоРазвакуум = rs.Fields("KolvoRazvakuum").Value;
			
			ТочкаПолучатель = rs.Fields("Corr_id_tt").Value;
			
			НайдСтр = КодыПодтверждений.Найти(rs.Fields("Confirm_reason").Value, "code_operation");
			
			Если НЕ НайдСтр = Неопределено Тогда
				НовСтр.ПричинаПодтверждения = НайдСтр.Наименование;
			КонецЕсли;
			
			НовСтр.Подтвержден = rs.Fields("Confirm_type").Value;
			НовСтр.ДатаПодтверждения = rs.Fields("Confirm_date").Value;
			НовСтр.ДатаСоздания = rs.Fields("opendate").Value;
			Если ЗначениеЗаполнено(rs.Fields("id_reason").Value) Тогда
				СтрПричинаСписания = ТабПричиныСписания.Найти(rs.Fields("id_reason").Value, "ИД");
				Если СтрПричинаСписания <> Неопределено Тогда
					НовСтр.ПричинаСписания = СтрПричинаСписания.Ссылка;
					ПричинаСписания = НовСтр.ПричинаСписания;
				КонецЕсли;	
			КонецЕсли;	
			НовСтр.Остаток = rs.Fields("balance_ost").Value;
			НовСтр.УидСтроки = rs.Fields("tduid").Value;
			НовСтр.КомментарийКРаспределению = СокрЛП(rs.Fields("Komment_raspr").Value);
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	
	СписокИд = Товары.ВыгрузитьКолонку("ИдТовара");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov КАК ИД,
	|	Номенклатура.Наименование,
	|	Номенклатура.Обед
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.id_tov В(&СписокИд)";
	
	Запрос.УстановитьПараметр("СписокИд", СписокИд);
	
	ТзНом = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Товары Цикл
		
		НайдСтр = ТзНом.Найти(Стр.ИдТовара, "Ид");
		
		Если Не НайдСтр = Неопределено Тогда
			Стр.Номенклатура = НайдСтр.Ссылка;
			Стр.Наименование = НайдСтр.Наименование;
			// +++ АК mirv 14.11.2017 [ИП-00017151]
			Стр.Обед 		 = НайдСтр.Обед;
			// --- АК mirv  
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Номенклатура", ТзНом.ВыгрузитьКолонку("Ссылка"));
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Характеристика,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Номенклатура,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИДПроизв
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец В (&Номенклатура)";
	
	ТзХар = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Товары Цикл
		
		НайдСтр = ТзХар.НайтиСтроки(Новый Структура("Номенклатура, ИДПроизв", Стр.Номенклатура, Стр.ИдПроизводитель));
		
		Если НайдСтр.Количество() > 0 Тогда
			Стр.Характеристика = НайдСтр[0].Характеристика;
		КонецЕсли;
		
	КонецЦикла;
	
	Товары.Сортировать("Наименование");
	
	
	
	
	Если Товары.Количество() > 0 Тогда
		
		ЗапросСкуль = "select *
		|from SMS_Izbenka.dbo.sklad_tt_raznica (" + ВнешниеДанные.ФорматПоля(АйдиТочкиПоАйпи) + ")";
		
		Попытка	
			Выборка = ADOСоединение.Execute(ЗапросСкуль);
			
			Выборка.MoveFirst();
			Пока НЕ Выборка.EOF() Цикл
				СтрокиВТоварах = Товары.НайтиСтроки(Новый Структура("ИдТовара", Выборка.Fields("id_tov").Value));
				Для Каждого СтрокаВТоварах Из СтрокиВТоварах Цикл
					СтрокаВТоварах.РасхождениеСоСкладом = Выборка.Fields("колво_склад").Value - Выборка.Fields("колво_тт").Value;
				КонецЦикла;	
				Выборка.MoveNext();
			КонецЦикла;	
		Исключение
		КонецПопытки;
		
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Дата", НачалоДня(Товары[0].ДатаСоздания));
		Запрос.УстановитьПараметр("Получатель", ТТ);
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
		|	РасходныйОрдерСкладТовары.Характеристика,
		|	РасходныйОрдерСкладТовары.ДатаПроизводства
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|		ПО РасходныйОрдерСклад.Ссылка = РасходныйОрдерСкладТовары.Ссылка
		|ГДЕ
		|	РасходныйОрдерСклад.ДатаРаспределения = &Дата
		|	И РасходныйОрдерСклад.Проведен = ИСТИНА
		|	И РасходныйОрдерСклад.Получатель = &Получатель
		|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	РасходныйОрдерСкладТовары.Характеристика,
		|	РасходныйОрдерСкладТовары.ДатаПроизводства";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокиВТоварах = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводства));
			Для Каждого СтрокаВТоварах Из СтрокиВТоварах Цикл
				СтрокаВТоварах.ОтправилСклад = Выборка.Количество;
				СтрокаВТоварах.РазницаПоставки = СтрокаВТоварах.Количество - Выборка.Количество;
			КонецЦикла;
		КонецЦикла;	
		
	КонецЕсли;	
	
	
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Товары", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Номенклатура,
	|	МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке)
	|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец В (&Товары)
	|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|				И Номенклатура В (&Товары)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиВТоварах = Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаВТоварах Из СтрокиВТоварах Цикл
			СтрокаВТоварах.ШтукВУпаковке = Выборка.Значение;
			//СтрокаВТоварах.ШтукВУпаковкеСтрокой = "по " + Формат(СтрокаВТоварах.ШтукВУпаковке, "ЧГ=0") + " шт. в упак.";
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнятьЦену = Истина;
	Если ЗаполнятьЦену Тогда
		Выборка = Результаты[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокиВТоварах = Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Для Каждого СтрокаВТоварах Из СтрокиВТоварах Цикл
				СтрокаВТоварах.Цена = Выборка.Цена;
				СтрокаВТоварах.Сумма = Выборка.Цена * СтрокаВТоварах.Количество;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	
	Если Товары.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕстьNULL(ВЗ_Распределение.Номенклатура, ВЗ_ФактОстатки.Номенклатура) КАК Номенклатура,
		|	ВЗ_Распределение.Характеристика,
		|	ЕСТЬNULL(ВЗ_Распределение.Количество, 0) КАК Распределено,
		|	ЕСТЬNULL(ВЗ_Распределение.Нужно, 0) КАК Нужно,
		|	ЕСТЬNULL(ВЗ_Распределение.План, 0) КАК ПланПродаж,
		|	ЕСТЬNULL(ВЗ_Распределение.Избыток, 0) КАК Избыток,
		|	ЕСТЬNULL(ВЗ_ФактОстатки.Количество, 0) КАК ФактОстатокНаВечер
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиРаспределенныеПоТТ.Номенклатура КАК Номенклатура,
		|		ОстаткиРаспределенныеПоТТ.Характеристика КАК Характеристика,
		|		ОстаткиРаспределенныеПоТТ.Количество КАК Количество,
		|		ОстаткиРаспределенныеПоТТ.Нужно КАК Нужно,
		|		ОстаткиРаспределенныеПоТТ.План КАК План,
		|		ОстаткиРаспределенныеПоТТ.Избыток КАК Избыток
		|	ИЗ
		|		РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
		|	ГДЕ
		|		ОстаткиРаспределенныеПоТТ.Дата = &Дата
		|		И ОстаткиРаспределенныеПоТТ.ТорговаяТочка = &ТорговаяТочка
		|		И ОстаткиРаспределенныеПоТТ.Номенклатура В(&Товары)) КАК ВЗ_Распределение
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФактическиеОстаткиТоваров.Номенклатура КАК Номенклатура,
		|			ФактическиеОстаткиТоваров.Количество КАК Количество
		|		ИЗ
		|			РегистрСведений.ФактическиеОстаткиТоваров КАК ФактическиеОстаткиТоваров
		|		ГДЕ
		|			ФактическиеОстаткиТоваров.Дата = ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -1)
		|			И ФактическиеОстаткиТоваров.ТорговаяТочка = &ТорговаяТочка
		|			И ФактическиеОстаткиТоваров.Номенклатура В(&Товары)) КАК ВЗ_ФактОстатки
		|		ПО ВЗ_Распределение.Номенклатура = ВЗ_ФактОстатки.Номенклатура";
		
		Запрос.УстановитьПараметр("Дата", НачалоДня(Товары[0].ДатаСоздания));
		Запрос.УстановитьПараметр("ТорговаяТочка", ТТ);
		Запрос.УстановитьПараметр("Товары", Товары.ВыгрузитьКолонку("Номенклатура"));
		
		ТабКеш = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаб Из Товары Цикл
			СтрокиВКеше = ТабКеш.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
			Если СтрокиВКеше.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаб, СтрокиВКеше[0], "Распределено, Нужно, ПланПродаж, Избыток, ФактОстатокНаВечер");
			КонецЕсли;	
		КонецЦикла;
		
		
	КонецЕсли;
	Для каждого Стр Из Товары Цикл
		Стр.Номенклатура=Стр.Номенклатура.УникальныйИдентификатор();
		Стр.Характеристика=Стр.Характеристика.УникальныйИдентификатор();
	КонецЦикла; 
	Товары.Колонки.Удалить("НоменклатураСсылка");
	Товары.Колонки.Удалить("ХарактеристикаСсылка");
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Товары);
	СтруктураВозврат.Вставить("ДокЗакрыт",ДокЗакрыт);
	СтруктураВозврат.Вставить("Комментарий",Комментарий);
	СтруктураВозврат.Вставить("ТочкаПолучатель",(ТочкаПолучатель));
	СтруктураВозврат.Вставить("ВремяДоставки",ВремяДоставки);
	СтруктураВозврат.Вставить("КоличествоДокументовТТН",КоличествоДокументовТТН);
	СтруктураВозврат.Вставить("ТемператураТовараПриПоставке",Строка(ТемператураТовараПриПоставке));
	
	СтруктураВозврат.Вставить("Продавец",Строка(Продавец));
	//СтруктураВозврат.Вставить("ТемператураТовараПриПоставке",ТемператураТовараПриПоставке);
	//СтруктураВозврат.Вставить("ТемператураТовараПриПоставке",ТемператураТовараПриПоставке);
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//---АК BELN 2018.06.19 

//+++АК BELN 2018.06.19 ИП-00019004      
Функция ЗаписатьОперациюМикромаркета(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ИдДок = (СтруктураПараметры.Идент);
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства);
	ТТ=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Магазин");
	НомерТочкиПоАйпи=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТ, "НомерТочки");
	АйдиТочкиПоАйпи=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТ, "id_TT");
	ОбъектОбработка = Документы.МП_ЗадачаТехнолога.ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	Товары=СтруктураПараметры.Товары;
	
	Для каждого Стр Из Товары Цикл
		Фл=ОбъектОбработка.ОтредактироватьСтрокуТовародвижения(Стр.ИдТовара, Стр.Количество, Стр.УидСтроки, ИДДок, -400, АйдиТочкиПоАйпи, Стр.Сумма, 
		0, Стр.ИдПроизводитель, Стр.ДатаПроизводства
		, Стр.КомментарийКРаспределению,Стр.ВскрытаУпаковка, Стр.ОтсутствуетВетСправка, Стр.КолвоРазвакуум,Стр.КоличествоВПодсобке,Стр.КоличествоВЗале);
		Если Не Фл Тогда
			
			ОписаниеОшибки = "Не удалось записать";
			СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
			
		КонецЕсли; 
		
	КонецЦикла;
	флУспешно=Истина;	
	Если СтруктураПараметры.Провести И Товары.Количество() Тогда
		
		ТабТовары = Новый ТаблицаЗначений;
		ТабТовары.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабТовары.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		СтрокаЗапроса = "SELECT CAST(Tov.UIN as nvarchar(36)) TovUid, SUM(TD.Quantity * CASE WHEN TD.operation_type IN (401, -401) THEN -1 ELSE 1 END) as Qnt
		|FROM SMS_Repl.dbo.TD_move as TD (nolock)
		|LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID as Tov ON TD.id_tov = Tov.id
		|WHERE TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерТочкиПоАйпи) + "
		|	and CONVERT(date, TD.opendate)= " + ВнешниеДанные.ФорматПоля(Товары[0].ДатаСоздания, Истина) + " and TD.operation_type IN (400, 401, -400, -401)
		|GROUP BY CAST(Tov.UIN as nvarchar(36))";
		
		Попытка
			rs = ADOСоединение.Execute(СтрокаЗапроса);
		Исключение
			Сообщить(ОписаниеОшибки());
			ОписаниеОшибки = ОписаниеОшибки();
			СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
		КонецПопытки;	
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				ТоварСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TovUid").Value));
				//Если ТабТовары.Найти(ТоварСсылка, "Номенклатура") <> Неопределено Тогда
				СтрокаТаб = ТабТовары.Добавить();
				СтрокаТаб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TovUid").Value));
				СтрокаТаб.Количество = rs.Fields("Qnt").Value;
				//КонецЕсли;	
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		ADOСоединение.Close();
		
		ТабТовары.Свернуть("Номенклатура", "Количество");
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	Таб.Номенклатура,
		|	Таб.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_Форма
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_Склад
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ)
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения, ДЕНЬ)
		|		КОНЕЦ = &ДатаРаспределения
		|	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &Получатель
		|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		|	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСкладТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Форма.Номенклатура, ВТ_Склад.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ВТ_Форма.Количество, 0) КАК КоличествоФорма,
		|	ЕСТЬNULL(ВТ_Склад.Количество, 0) КАК КоличествоСклад,
		|	ЕСТЬNULL(ЦеныТоваровСрезПоследних.Цена, 0) КАК Себестоимость
		|ИЗ
		|	ВТ_Форма КАК ВТ_Форма
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Склад КАК ВТ_Склад
		|		ПО ВТ_Форма.Номенклатура = ВТ_Склад.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаРаспределения, ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныТоваровСрезПоследних
		|		ПО (ЕСТЬNULL(ВТ_Форма.Номенклатура, ВТ_Склад.Номенклатура) = ЦеныТоваровСрезПоследних.Номенклатура)";
		
		Запрос.УстановитьПараметр("Таб", ТабТовары);
		Запрос.УстановитьПараметр("ДатаРаспределения", НачалоДня(Товары[0].ДатаСоздания));
		Запрос.УстановитьПараметр("Получатель", ТТ);
		
		ТекстВозврат = "";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РазницаВРублях = Выборка.КоличествоСклад * Выборка.Себестоимость - Выборка.КоличествоФорма * Выборка.Себестоимость;
			//РазницаВРублях = РазницаВРублях * ?(РазницаВРублях < 0, -1, 1);
			Если РазницаВРублях >= 300 Тогда
				ТекстВозврат = ТекстВозврат + ?(ЗначениеЗаполнено(ТекстВозврат), Символы.ПС, "")
				+ "По номенклатуре: " + Выборка.Номенклатура + " отправлено со склада " + Формат(Выборка.КоличествоСклад, "ЧГ=0") + ". Вы пытаетесь оприходовать " + Формат(Выборка.КоличествоФорма, "ЧН=; ЧГ=0") + ". Расхождение более, чем на 300 рублей. Сверяйте ваши данные со складом.";
			КонецЕсли;	
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстВозврат) Тогда
			ОписаниеОшибки = ТекстВозврат;
			СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, ОписаниеОшибки);
			Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
		КонецЕсли; 	
		
		
		
		флУспешно = ОбъектОбработка.ПровестиДок(ИдДок, 400, Неопределено,НомерТочкиПоАйпи, Ложь);
		
		
	КонецЕсли; 
	
	
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", флУспешно);
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//---АК BELN 2018.06.19 

Функция ПолучитьДанныеДляРасходника(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ расходника";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	//+++АК KIRN 2018.05.07  ИП-00018373
	Попытка
		об = Док.ПолучитьОбъект();
		об.Заблокировать();
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Документ заблокирован, повторите позже."+Символы.ПС+КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;
	//---АК KIRN			
	
	
	//АК БЕЛН 05.10.2017 ИП-00016830+
	ЭтоРевизор=Ложь;
	Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) Тогда
		ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
		Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Склады.Ссылка КАК Склад,
			|	СборщикиНаСкладах.Ревизор
			|ИЗ
			|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СборщикиНаСкладах.Склад = Склады.Владелец
			|ГДЕ
			|	СборщикиНаСкладах.Сборщик = &ФизЛицо
			|
			|СГРУППИРОВАТЬ ПО
			|	Склады.Ссылка,
			|	СборщикиНаСкладах.Ревизор";
			
			Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоМП);
			
			Результат = Запрос.Выполнить();
			Склад=Док.Склад;
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			СкладДоступен=Ложь;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Склад=Склад Тогда
					СкладДоступен=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ВыборкаДетальныеЗаписи.Сбросить();
			ЭтоРевизор=Ложь;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Склад=Склад И ВыборкаДетальныеЗаписи.Ревизор Тогда
					ЭтоРевизор=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если  СкладДоступен=Ложь Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Сотрудник не привязан к складу документа";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	//АК БЕЛН 05.10.2017 ИП-00016830-
	
	Если Док.СборкаТерминаломЗакончена И НЕ ЭтоРевизор Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Данный документ уже был собран терминалом";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;	
	//АК БЕЛН 05.10.2017 ИП-00016830+
	Если Не Док.СборкаТерминаломЗакончена И ЭтоРевизор Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Данный документ еще не собран терминалом";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;	
	//АК БЕЛН 05.10.2017 ИП-00016830-
	
	//+++АК BELN 2018.07.20 ИП-00019327
	Если Не ЗначениеЗаполнено(Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик))) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Перезапустите мобильное приложение";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;	
	//---АК BELN 2018.07.20 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Док);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСклад.Номер,
	               |	РасходныйОрдерСклад.Дата,
	               |	РасходныйОрдерСклад.Склад,
	               |	РасходныйОрдерСклад.Склад.ИД,
	               |	РасходныйОрдерСклад.Склад.Наименование,
	               |	РасходныйОрдерСклад.ДанныеСборкиНаМобильномУстройстве,
	               |	РасходныйОрдерСклад.Сборщик,
	               |	РасходныйОрдерСклад.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком,
	               |	РасходныйОрдерСклад.Склад.Организация.ИНН КАК ИНН
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Номенклатура КАК НоменклатураСсылка,
	               |	РасходныйОрдерСкладТовары.Характеристика КАК ХарактеристикаСсылка,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	               |	МИНИМУМ(РасходныйОрдерСкладТовары.НомерСтроки) КАК НомерСтроки,
	               |	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ,
	               |	РасходныйОрдерСкладТовары.Номенклатура.Наименование,
	               |	РасходныйОрдерСкладТовары.Характеристика.Наименование,
	               |	РасходныйОрдерСкладТовары.Номенклатура.Весовой,
	               |	РасходныйОрдерСкладТовары.Номенклатура.Складируемая,
	               |	РасходныйОрдерСкладТовары.Номенклатура.БезУпаковки,
	               |	РасходныйОрдерСкладТовары.Характеристика.СрокГодности КАК ХарактеристикаСрокГодности,
	               |	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСкладТовары.Характеристика.ТипСрокаГодности) КАК ХарактеристикаТипСрокаГодности,
	               |	РасходныйОрдерСкладТовары.Характеристика.Неактивная,
	               |	РасходныйОрдерСкладТовары.Характеристика.ПредельноеКоличествоДнейСрокаГодности,
	               |	РасходныйОрдерСкладТовары.Номенклатура.Родитель КАК НоменклатураРодительСсылка,
	               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК ХарактеристикаВес,
	               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК КоличествоИзХарактеристики
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО (ЗначенияСвойствОбъектов.Объект = РасходныйОрдерСкладТовары.Характеристика)
	               |			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства,
	               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0),
	               |	РасходныйОрдерСкладТовары.Номенклатура.Наименование,
	               |	РасходныйОрдерСкладТовары.Характеристика.Наименование,
	               |	РасходныйОрдерСкладТовары.Номенклатура.Весовой,
	               |	РасходныйОрдерСкладТовары.Номенклатура.Складируемая,
	               |	РасходныйОрдерСкладТовары.Номенклатура.БезУпаковки,
	               |	РасходныйОрдерСкладТовары.Характеристика.СрокГодности,
	               |	РасходныйОрдерСкладТовары.Характеристика.Неактивная,
	               |	РасходныйОрдерСкладТовары.Характеристика.ПредельноеКоличествоДнейСрокаГодности,
	               |	РасходныйОрдерСкладТовары.Номенклатура.Родитель,
	               |	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСкладТовары.Характеристика.ТипСрокаГодности),
	               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаШапки = Результаты[0].Выбрать();
	ТабТовары = Результаты[1].Выгрузить();
	ТабТовары.Колонки.Добавить("Номенклатура");
	ТабТовары.Колонки.Добавить("Характеристика");
	ТабТовары.Колонки.Добавить("КоличествоСобрано", Новый ОписаниеТипов("Число"));
	ТабТовары.Колонки.Добавить("КоличествоКоробокПринятое", Новый ОписаниеТипов("Число"));
	ТабТовары.Колонки.Добавить("Собрано", Новый ОписаниеТипов("Булево"));
	
	//ТабТовары.Колонки.Добавить("НоменклатураНаименование");
	//ТабТовары.Колонки.Добавить("ХарактеристикаНаименование");
	//ТабТовары.Колонки.Добавить("НоменклатураВесовой");
	//ТабТовары.Колонки.Добавить("НоменклатураСкладируемая");
	//ТабТовары.Колонки.Добавить("НоменклатураБезУпаковки");
	//ТабТовары.Колонки.Добавить("ХарактеристикаВес");
	//ТабТовары.Колонки.Добавить("ХарактеристикаСрокГодности");
	//ТабТовары.Колонки.Добавить("ХарактеристикаТипСрокаГодности");
	//ТабТовары.Колонки.Добавить("ХарактеристикаНеактивная");
	ТабТовары.Колонки.Добавить("НоменклатураРодитель");
	
	
	ВыборкаШапки.Следующий();
	
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Сборщик) Тогда
		СтруктураВозврат.Вставить("Сборщик", Строка(ВыборкаШапки.Сборщик.УникальныйИдентификатор()));
	Иначе
		СтруктураВозврат.Вставить("Сборщик", СтруктураПараметры.Сборщик);
	КонецЕсли;	
	СтруктураВозврат.Вставить("ДокументГуид", Строка(Док.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("Номер", ВыборкаШапки.Номер);
	СтруктураВозврат.Вставить("Дата", ВыборкаШапки.Дата);
	СтруктураВозврат.Вставить("СкладОтправитель", Строка(ВыборкаШапки.Склад.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("СкладОтправительНаименование", ВыборкаШапки.СкладНаименование);
	СтруктураВозврат.Вставить("СкладОтправительШК", "810" + Прав("000000000000" + Формат(ВыборкаШапки.СкладИД, "ЧГ=0"), 12));
	//+++АК BELN 2018.11.21 ЗА-00018922      
	СтруктураВозврат.Вставить("ИНН", (ВыборкаШапки.ИНН));
	//---АК BELN 2018.11.21 
	
	ДанныеСборкиДоПрерывания = ВыборкаШапки.ДанныеСборкиНаМобильномУстройстве.Получить();
	ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком= ВыборкаШапки.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком.Получить();
	
	
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		СтрокаТаб.Номенклатура = Строка(СтрокаТаб.НоменклатураСсылка.УникальныйИдентификатор());
		СтрокаТаб.Характеристика = Строка(СтрокаТаб.ХарактеристикаСсылка.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(СтрокаТаб.НоменклатураРодительСсылка) Тогда
			СтрокаТаб.НоменклатураРодитель  = Строка(СтрокаТаб.НоменклатураРодительСсылка.УникальныйИдентификатор());
		КонецЕсли; 
	КонецЦикла;
	
	Если ТипЗнч(ДанныеСборкиДоПрерывания) = Тип("Структура") Тогда
		Для Каждого СтрокаТовар Из ДанныеСборкиДоПрерывания.Товары Цикл
			СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика), СтрокаТовар.ДатаПроизводства));
			Если СтрокиВТаблице.Количество() > 0 Тогда
				СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
			Иначе	
				СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика)));
				Если СтрокиВТаблице.Количество() > 0 Тогда
					СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	Если ТипЗнч(ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком) = Тип("Структура") Тогда
		Для Каждого СтрокаТовар Из ТабТовары Цикл
			СтрокаТовар.Количество=0;
		КонецЦикла;
		
		Для Каждого СтрокаТовар Из ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком.Товары Цикл
			//СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика), СтрокаТовар.ДатаПроизводства));
			//Если СтрокиВТаблице.Количество() > 0 Тогда
			//	СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
			//	СтрокиВТаблице[0].Количество = СтрокаТовар.КоличествоПоОрдеру;
			//	СтрокиВТаблице[0].Собрано = СтрокаТовар.Собрано;
			//Иначе	
			//	СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика)));
			//	Если СтрокиВТаблице.Количество() > 0 Тогда
			//		СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
			//		СтрокиВТаблице[0].Количество = СтрокаТовар.КоличествоПоОрдеру;
			//		СтрокиВТаблице[0].Собрано = СтрокаТовар.Собрано;
			//	КонецЕсли;
			//КонецЕсли;
			
			СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика), СтрокаТовар.ДатаПроизводства));
			Если СтрокиВТаблице.Количество() > 0 Тогда
				СтрокаВТаблице = СтрокиВТаблице[0];
			Иначе
				СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика)));
				Если СтрокиВТаблице.Количество() > 0 Тогда
					СтрокаВТаблице = СтрокиВТаблице[0];
				Иначе	
					СтрокаВТаблице = ТабТовары.Добавить();
					СтрокаВТаблице.Номенклатура = Строка(СтрокаТовар.Номенклатура);
					СтрокаВТаблице.Характеристика = Строка(СтрокаТовар.Характеристика);
					СтрокаВТаблице.ДатаПроизводства = СтрокаТовар.ДатаПроизводства;
					СтрокаВТаблице.Количество=0;
				КонецЕсли;	
			КонецЕсли;	
			СтрокаВТаблице.КоличествоСобрано = СтрокаВТаблице.КоличествоСобрано + СтрокаТовар.Количество;
			СтрокаВТаблице.Количество = СтрокаВТаблице.Количество+СтрокаТовар.КоличествоПоОрдеру;
			СтрокаВТаблице.КоличествоКоробокПринятое = СтрокаВТаблице.КоличествоКоробокПринятое+СтрокаТовар.КоличествоКоробокПринятое;
			СтрокаВТаблице.Собрано = СтрокаТовар.Собрано;
		КонецЦикла;
	КонецЕсли;	
	
	
	ТабТовары.Колонки.Удалить("НоменклатураСсылка");
	ТабТовары.Колонки.Удалить("ХарактеристикаСсылка");
	ТабТовары.Колонки.Удалить("НоменклатураРодительСсылка");
	СтруктураВозврат.Вставить("Товары", ТабТовары);
	ЭтоКладовщик=Ложь;
	Если ЗначениеЗаполнено(ФизЛицоМП) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборщикиНаСкладах.ЭтоКладовщик
		|ИЗ
		|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
		|ГДЕ
		|	СборщикиНаСкладах.Сборщик = &Сборщик
		|	И СборщикиНаСкладах.Склад = &Склад
		|	И СборщикиНаСкладах.ЭтоКладовщик";
		
		Запрос.УстановитьПараметр("Сборщик", ФизЛицоМП);
		Запрос.УстановитьПараметр("Склад", Док.Склад.Владелец);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭтоКладовщик=Истина;
		КонецЦикла;
	КонецЕсли; 
	
	СтруктураВозврат.Вставить("ЭтоКладовщик", ЭтоКладовщик);
	СтруктураВозврат.Вставить("ПереданаКладовщику", Док.ПереданаКладовщику);
	СтруктураВозврат.Вставить("ДляШтучногоТовара", Док.Склад.ДляШтучногоТовара);
	СтруктураВозврат.Вставить("ЗапретНаСборАналогов", Константы.ЗапретНаСборАналогов.Получить());
	Если Не Док.ПереданаКладовщику И НЕ ЭтоРевизор  Тогда
		Попытка
			//НЗ=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьНаборЗаписей();
			//НЗ.Отбор.Документ.Установить(Док);
			//НЗ.Записать();
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
			Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) И Не ЗначениеЗаполнено(ДокОбъект.Сборщик) Тогда
				ДокОбъект.Сборщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокОбъект.ВремяПрибытияМашины) Тогда
				ДокОбъект.ВремяПрибытияМашины=ТекущаяДата();
			КонецЕсли; 
			Если НЕ Док.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе	
				ДокОбъект.ОбменДанными.Загрузка=Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли; 
			
			Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
			Мен.Период=ТекущаяДата();
			Мен.Ордер=Док;
			Мен.Статус=Перечисления.СтатусПаллета.ВСборке;
			Мен.Записать();
			
			
		Исключение
			СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ ОписаниеОшибки();
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецПопытки;	
	КонецЕсли; 
	//АК БЕЛН 05.10.2017 ИП-00016830+
	Если ЭтоРевизор  Тогда
		Попытка
			//НЗ=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьНаборЗаписей();
			//НЗ.Отбор.Документ.Установить(Док);
			//НЗ.Записать();
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.ОбменДанными.Загрузка=Истина;
			ДокОбъект.Ревизор = ФизЛицоМП;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			
		Исключение
			СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ ОписаниеОшибки();
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецПопытки;	
	КонецЕсли; 
	//АК БЕЛН 05.10.2017 ИП-00016830-
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьКоличествоПаллетВРасходник(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ расходника";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	//
	//Если Док.СборкаТерминаломЗакончена Тогда
	//	СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
	//				+ "Данный документ уже был собран терминалом";
	//	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	//КонецЕсли;	
	
	
	
	
	//Если Док.КоличествоПаллет>0 Тогда
	//	СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
	//	+ "В данном документе было уже введено количество паллет - "+Строка(Док.КоличествоПаллет);
	//	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	//КонецЕсли;
	
	Попытка 
		Если СтруктураПараметры.Свойство("ЖурналОбмена") Тогда
			УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства); 
			ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьЖурналОбмена(УзелОбмена, СтруктураПараметры.ЖурналОбмена);
		КонецЕсли; 
	Исключение
	КонецПопытки; 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Подготовлен
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Подготовлен";
	
	Запрос.УстановитьПараметр("Ссылка", Док);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	СбЗавершенаЗаполнить=Ложь;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СбЗавершенаЗаполнить=Истина;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ЗаданиеНаРазборкуПодготовлен=Ложь Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Нельзя ввести кол-во паллет, потому что "+Строка(ВыборкаДетальныеЗаписи.ЗаданиеНаРазборку)+" не был собран терминалом";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				
				
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	
	
	
	
	
	Попытка                                                                     
		ДокОбъект = Док.ПолучитьОбъект();
		ДокОбъект.ОбменДанными.Загрузка=Истина;
		ДокОбъект.КоличествоПаллет=СтруктураПараметры.КолПал;
		
		СтруктураВозврат.Вставить("НаименованиеТТ",Док.Получатель.Наименование);
		Если СтруктураПараметры.Свойство("СборкаЗакончена") ИЛИ СбЗавершенаЗаполнить Тогда
			
			Если СтруктураПараметры.СборкаЗакончена ИЛИ СбЗавершенаЗаполнить Тогда
				ДокОбъект.Сборщик=Справочники.ФизическиеЛица.НайтиПоКоду(?(ДокОбъект.Склад.Владелец=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"),"0001002104","0001002084"));
				ДокОбъект.СборкаТерминаломЗакончена = Истина;
				ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
				ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
				ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
				Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
				Мен.Период=ТекущаяДата();
				Мен.Ордер=ДокОбъект.Ссылка;
				Мен.Статус=Перечисления.СтатусПаллета.Собран;
				Мен.Записать();
			КонецЕсли; 
		КонецЕсли;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

//+++АК BELN 2018.10.31 ИП-00020008      
Функция ЗаписатьКоличествоПаллетВРасходникПоШКТТ(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	id_TT=Число(Сред(ШтрихКодДокумента,3));
	Склад=Справочники.Склады.НайтиПоКоду(СтруктураПараметры.КодСклада);
	Сборщик=Справочники.ФизическиеЛица.НайтиПоКоду(?(Склад.Владелец=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"),"0001002104","0001002084"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Дата МЕЖДУ &Дата1 И &Дата2
		|	И РасходныйОрдерСклад.Проведен
		|	И РасходныйОрдерСклад.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
		|	И ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).id_TT = &id_TT
		|	И РасходныйОрдерСклад.Склад.Код = &Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка КАК РО,
		|	МАКСИМУМ(СоставПаллеты.Ссылка) КАК Паллета,
		|	МАКСИМУМ(ЗаданиеНаРазборкуТовары.Ссылка) КАК Задание,
		|	МИНИМУМ(ЗаданиеНаРазборкуТовары.Ссылка.Подготовлен) КАК Подготовлен
		|ПОМЕСТИТЬ втИтог
		|ИЗ
		|	вт КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|		ПО (СоставПаллеты.РасходныйОрдер = РасходныйОрдерСклад.Ссылка)
		|			И (СоставПаллеты.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
		|		ПО (ЗаданиеНаРазборкуТовары.РасходныйОрдер = РасходныйОрдерСклад.Ссылка)
		|			И (ЗаданиеНаРазборкуТовары.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСклад.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтог.РО,
		|	втИтог.Паллета КАК Паллета,
		|	ВЫБОР
		|		КОГДА втИтог.Паллета ЕСТЬ NULL
		|			ТОГДА 999999999999
		|		ИНАЧЕ втИтог.Паллета.ИД
		|	КОНЕЦ КАК ПорядокПал,
		|	втИтог.Задание,
		|	втИтог.Подготовлен,
		|	втИтог.РО.Получатель КАК ТТ,
		|	втИтог.Паллета.ИД КАК ПаллетаИД
		|ИЗ
		|	втИтог КАК втИтог
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокПал";
	
	Запрос.УстановитьПараметр("id_TT", id_TT);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(СтруктураПараметры.ДатаОтч));
	Запрос.УстановитьПараметр("Дата2", КонецДня(СтруктураПараметры.ДатаОтч));
	Запрос.УстановитьПараметр("Код", СтруктураПараметры.КодСклада);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ расходника";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	Попытка 
		Если СтруктураПараметры.Свойство("ЖурналОбмена") Тогда
			УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства); 
			ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьЖурналОбмена(УзелОбмена, СтруктураПараметры.ЖурналОбмена);
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	МасПал=Новый Массив;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Попытка 
				
			ДокОбъект = ВыборкаДетальныеЗаписи.РО.ПолучитьОбъект();
			ДокОбъект.ОбменДанными.Загрузка=Истина;
			//Если ДокОбъект.ЭтикеткиНапечатаны=2 Тогда
			//	СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			//	+ "Напечатан шк паллеты (последняя этикетка в центральной базе)";
			//	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			//КонецЕсли; 
			
			Если СтруктураПараметры.Свойство("Отмена")  Тогда
				Если ДокОбъект.КоличествоПаллет=0 Тогда
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ "Нельзя отменить паллету, их нет";
					Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				КонецЕсли; 
				ДокОбъект.КоличествоПаллет=ДокОбъект.КоличествоПаллет-1;
			Иначе	
				Если СтруктураПараметры.Свойство("КоличествоПаллет") Тогда
					ДокОбъект.КоличествоПаллет=СтруктураПараметры.КоличествоПаллет;
				Иначе	
					ДокОбъект.КоличествоПаллет=ДокОбъект.КоличествоПаллет+1;
				КонецЕсли; 
				ДокОбъект.ЭтикеткиНапечатаны=1;
			КонецЕсли; 		
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Паллета) Тогда
				ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
				ОбъектПаллеты.РасходныйОрдер=ВыборкаДетальныеЗаписи.РО;
				ОбъектПаллеты.Записать();
			    ИДПал=ОбъектПаллеты.ИД;
			Иначе	
			    ИДПал=ВыборкаДетальныеЗаписи.ПаллетаИД;
			КонецЕсли; 
		
			
			
			СтруктураВозврат.Вставить("НаименованиеТТ",Строка(ВыборкаДетальныеЗаписи.ТТ));
			Если (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Задание) И ВыборкаДетальныеЗаписи.Подготовлен=Истина 
				) И НЕ ДокОбъект.СборкаТерминаломЗакончена И НЕ СтруктураПараметры.Свойство("Отмена") Тогда
				
				ДокОбъект.Сборщик=Сборщик;
				ДокОбъект.СборкаТерминаломЗакончена = Истина;
				ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
				ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
				ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
				Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
				Мен.Период=ТекущаяДата();
				Мен.Ордер=ДокОбъект.Ссылка;
				Мен.Статус=Перечисления.СтатусПаллета.Собран;
				Мен.Записать();
			КонецЕсли;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			ШтрихКод = "850" + Прав("000000000000" + Формат(ИДПал, "ЧГ=0"), 12);
			МасПал.Добавить(ШтрихКод);
			Возврат ПолучитьДанныеПоПаллете(Новый ХранилищеЗначения(Новый Структура("Штрихкод, Кладовщик",ШтрихКод,СтруктураПараметры.Кладовщик)));
		Исключение
			СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ ОписаниеОшибки();
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецПопытки;	
	
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//---АК BELN 2018.10.31 

Функция НачатьПогрузку(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.МаршрутныйЛист") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ маршрутного листа";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;                                                             
	//
	//Если Док.СборкаТерминаломЗакончена Тогда
	//	СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
	//				+ "Данный документ уже был собран терминалом";
	//	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	//КонецЕсли;	
	
	Попытка 
		Если СтруктураПараметры.Свойство("ЖурналОбмена") Тогда
			УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства); 
			МасРасх=Новый Массив;
			Для Каждого Стр из Док.РасходныеОрдера Цикл
				Штрихкод=ОбщегоНазначенияКлиентСервер.ПолучитьШтрихкодПоУИНу(Стр.Документ);
				ТЗЖО=СтруктураПараметры.ЖурналОбмена.Скопировать();
				Для каждого СтрЖО Из ТЗЖО Цикл
					СобытиеДо=СтрЖО.Событие;
					Событие=СтрЗаменить(СобытиеДо,ШтрихКодДокумента,Штрихкод);
					СтрЖО.Событие=Событие;
				КонецЦикла; 
				ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьЖурналОбмена(УзелОбмена, ТЗЖО);
				МасРасх.Добавить(Штрихкод);
			КонецЦикла; 
			СтруктураВозврат.Вставить("Расходники",МасРасх);
		КонецЕсли; 
	Исключение
	КонецПопытки; 	
	Если СтруктураПараметры.Свойство("Кладовщик") Тогда
		ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
		//+++АК BELN 2018.11.15 ИП-00020451      
		Если СтруктураПараметры.Свойство("МасВорот") Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СборщикиНаСкладах.Склад
				|ПОМЕСТИТЬ втСтрЕд
				|ИЗ
				|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
				|ГДЕ
				|	СборщикиНаСкладах.Сборщик = &Сборщик
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	AK_Ворота.Владелец,
				|	AK_Ворота.Ссылка,
				|	АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута,
				|	Маршруты.Ссылка КАК Маршрут
				|ПОМЕСТИТЬ втВорота
				|ИЗ
				|	РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних КАК АК_СоответствиеВоротМаршрутамСрезПоследних
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.AK_Ворота КАК AK_Ворота
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтрЕд КАК втСтрЕд
				|			ПО AK_Ворота.Владелец = втСтрЕд.Склад и AK_Ворота.ИД В(&Наименование)

				|		ПО АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота = AK_Ворота.Ссылка
				|			И АК_СоответствиеВоротМаршрутамСрезПоследних.СтруктурноеПодразделение = AK_Ворота.Владелец
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты КАК Маршруты
				|		ПО АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута = Маршруты.Наименование
				|
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МаршрутныйЛист.Маршрут
				|ПОМЕСТИТЬ втМЛ
				|ИЗ
				|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
				|ГДЕ
				|	МаршрутныйЛист.Ссылка = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втМЛ.Маршрут
				|ИЗ
				|	втМЛ КАК втМЛ
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВорота КАК втВорота
				|		ПО втМЛ.Маршрут = втВорота.Маршрут";
			
			Запрос.УстановитьПараметр("Наименование", СтруктураПараметры.МасВорот);
			Запрос.УстановитьПараметр("Сборщик", ФизЛицоМП);
			Запрос.УстановитьПараметр("Ссылка", Док);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Данный маршрутный лист не относится к указанным воротам";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли; 

			
		
		КонецЕсли; 
	КонецЕсли;    	
	//---АК BELN 2018.11.15 
	
	Если Док.ПогрузкаНачата Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.Документ.КоличествоПаллет КАК КоличествоПаллет,
		|	ЕСТЬNULL(СканированныеПаллетыСрезПоследних.Количество, 0) КАК Количество,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.КладовщикНаДебаркадере
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СканированныеПаллеты.СрезПоследних(, ) КАК СканированныеПаллетыСрезПоследних
		|		ПО (СканированныеПаллетыСрезПоследних.Ордер = МаршрутныйЛистРасходныеОрдера.Документ)
		|			И (СканированныеПаллетыСрезПоследних.Статус = &Статус)
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Док);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусПаллета.ВодительПринял);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтруктураПараметры.Свойство("Кладовщик") Тогда
				Если ВыборкаДетальныеЗаписи.КладовщикНаДебаркадере<>ФизЛицоМП И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КладовщикНаДебаркадере) Тогда
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ "По маршрутному листу погрузку ведет другой кладовщик";
					Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				КонецЕсли; 	
			КонецЕсли; 
			
			Если ВыборкаДетальныеЗаписи.КоличествоПаллет<>ВыборкаДетальныеЗаписи.Количество Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Не все паллеты приняты водителем. Погрузка не может быть завершена.";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				Прервать;
			КонецЕсли; 	
		КонецЦикла;
		
		
		
		ДокОбъект = Док.ПолучитьОбъект();
		ДокОбъект.ДатаЗавершенияПогрузки=ТекущаяДата();
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		//+++АК KIRN 2018.04.11 ИП-00018209
		Если ОбщиеПроцедуры.ЭтоВнешняяОрганизация(ДокОбъект.Организация) ТОгда
			ОбщиеПроцедуры.ОбновитьРТУПоМаршрутномуЛисту(ДокОбъект.Ссылка);
		КонецЕСли;
		//---АК KIRN 
		
		Мен=РегистрыСведений.ВремяВыездаПоМаршруту.СоздатьМенеджерЗаписи();
		Мен.Дата=ТекущаяДата();
		Мен.Маршрут=Док.Маршрут;
		Мен.ВремяВыезда=ТекущаяДата();
		Мен.Записать();
		
		СтруктураВозврат.Вставить("НаименованиеМаршрут",Док.Маршрут.Наименование);
	Иначе	
		ДокОбъект = Док.ПолучитьОбъект();                                                                    
		ДокОбъект.ПогрузкаНачата=Истина;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.ДатаПодачиМашины) Тогда
			ДокОбъект.ДатаПодачиМашины=ТекущаяДата();	
		КонецЕсли; 
		Если СтруктураПараметры.Свойство("Кладовщик") Тогда
			ДокОбъект.КладовщикНаДебаркадере=ФизЛицоМП;
		КонецЕсли;                                     
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		СтруктураВозврат.Вставить("НаименованиеМаршрут",Док.Маршрут.Наименование);
	КонецЕсли; 
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ПаллетаНаДебаркадере(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодПаллеты = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	СтрДанные = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКодПаллеты);
	Если НЕ ЗначениеЗаполнено(СтрДанные.Объект)
		ИЛИ ТипЗнч(СтрДанные.Объект) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден паллета";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	РасходныйОрдер= СтрДанные.Объект.РасходныйОрдер;	
	Если Не ЗначениеЗаполнено(РасходныйОрдер.СборкаТерминаломЗакончена) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Не завершена сборка расходного ордера";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		
	КонецЕсли; 
	
	//+++АК KOPA 2018.01.15 ИП-00017470
	Если СтруктураПараметры.Свойство("ПлюсПаллета") Тогда
		обр = Обработки.АК_ПрофильГрузчика.Создать();
		Попытка		
			обр.ВыполнитьДействие(СтруктураПараметры);		
		Исключение
			СтруктураВозврат.ОписаниеОшибок = ОписаниеОшибки();
			
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецПопытки;			
	КонецЕсли;
	//---АК KOPA
	
	Если СтруктураПараметры.Свойство("Кладовщик") Тогда
		ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
		//+++АК BELN 2018.11.15 ИП-00020451      
		Если СтруктураПараметры.Свойство("МасВорот") Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СборщикиНаСкладах.Склад
				|ПОМЕСТИТЬ втСтрЕд
				|ИЗ
				|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
				|ГДЕ
				|	СборщикиНаСкладах.Сборщик = &Сборщик
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	AK_Ворота.Владелец,
				|	AK_Ворота.Ссылка,
				|	АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута,
				|	Маршруты.Ссылка КАК Маршрут
				|ПОМЕСТИТЬ втВорота
				|ИЗ
				|	РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних КАК АК_СоответствиеВоротМаршрутамСрезПоследних
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.AK_Ворота КАК AK_Ворота
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтрЕд КАК втСтрЕд
				|			ПО AK_Ворота.Владелец = втСтрЕд.Склад
				|				И (AK_Ворота.ИД В (&Наименование))
				|		ПО АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота = AK_Ворота.Ссылка
				|			И АК_СоответствиеВоротМаршрутамСрезПоследних.СтруктурноеПодразделение = AK_Ворота.Владелец
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты КАК Маршруты
				|		ПО АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута = Маршруты.Наименование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут как Маршрут
				|ПОМЕСТИТЬ втМЛ
				|ИЗ
				|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
				|ГДЕ
				|	МаршрутныйЛистРасходныеОрдера.Документ = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втМЛ.Маршрут
				|ИЗ
				|	втМЛ КАК втМЛ
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВорота КАК втВорота
				|		ПО втМЛ.Маршрут = втВорота.Маршрут";
			
			Запрос.УстановитьПараметр("Наименование", СтруктураПараметры.МасВорот);
			Запрос.УстановитьПараметр("Сборщик", ФизЛицоМП);
			Запрос.УстановитьПараметр("Ссылка", РасходныйОрдер);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Данная паллета связана с маршрутным листом, который не относится к указанным воротам";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли; 

			
		
		КонецЕсли; 
	КонецЕсли;    	
	//---АК BELN 2018.11.15 
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПогрузкаНачата,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.КладовщикНаДебаркадере
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ = &Документ
	|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Документ", РасходныйОрдер);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Статус=Перечисления.СтатусПаллета.НаДебаркадере;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.ПогрузкаНачата И НЕ СтруктураПараметры.Свойство("ДобавлениеЗабПаллеты") И НЕ СтруктураПараметры.Свойство("ВозвращениеЗабПаллеты") Тогда
			Статус=Перечисления.СтатусПаллета.ВодительПринял;
			Если СтруктураПараметры.Свойство("Кладовщик") Тогда
				Если ВыборкаДетальныеЗаписи.КладовщикНаДебаркадере<>ФизЛицоМП И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КладовщикНаДебаркадере) Тогда
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ "Паллета относится к маршрутному листу, погрузку по которому ведет другой кладовщик";
					Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				КонецЕсли; 	
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СканированныеПаллетыСрезПоследних.Паллет.РасходныйОрдер,
	|	СканированныеПаллетыСрезПоследних.Паллет КАК Паллет,
	|	СканированныеПаллетыСрезПоследних.Количество,
	|	СканированныеПаллетыСрезПоследних.КоличествоЗабыто,
	|	СканированныеПаллетыСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.СканированныеПаллеты КАК СканированныеПаллетыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СканированныеПаллетыСрезПоследних.Паллет.РасходныйОрдер КАК ПаллетРасходныйОрдер,
	|			СканированныеПаллетыСрезПоследних.Паллет КАК Паллет,
	|			МАКСИМУМ(СканированныеПаллетыСрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.СканированныеПаллеты КАК СканированныеПаллетыСрезПоследних
	|		ГДЕ
	|			СканированныеПаллетыСрезПоследних.Ордер = &РасходныйОрдер
	|			И СканированныеПаллетыСрезПоследних.Статус = &НаДебаркадере
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СканированныеПаллетыСрезПоследних.Паллет.РасходныйОрдер,
	|			СканированныеПаллетыСрезПоследних.Паллет) КАК СканированныеПаллетыСрезПоследнихПосл
	|		ПО СканированныеПаллетыСрезПоследних.Паллет = СканированныеПаллетыСрезПоследнихПосл.Паллет
	|			И СканированныеПаллетыСрезПоследних.Период = СканированныеПаллетыСрезПоследнихПосл.Период
	|ГДЕ
	|	СканированныеПаллетыСрезПоследних.Ордер = &РасходныйОрдер
	|	И СканированныеПаллетыСрезПоследних.Статус = &НаДебаркадере";
	
	
	Запрос.УстановитьПараметр("НаДебаркадере", Статус);
	Запрос.УстановитьПараметр("РасходныйОрдер", РасходныйОрдер);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Кол=0;
	КолВсего=0;
	ДатаОп=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кол=ВыборкаДетальныеЗаписи.Количество;
		ДатаОп=ВыборкаДетальныеЗаписи.Период+1;
		КолВсего=ВыборкаДетальныеЗаписи.Количество+ВыборкаДетальныеЗаписи.КоличествоЗабыто;
	КонецЦикла;
	
	
	//+++АК BELN 2018.05.25 ИП-00018389
	Если СтруктураПараметры.Свойство("ДобавлениеЗабПаллеты") Тогда
		Если Кол=0 Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Вначале эту паллету нужно принять на дебаркадере";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли; 
	ИначеЕсли СтруктураПараметры.Свойство("ВозвращениеЗабПаллеты") Тогда
		Если КолВсего-Кол=0 Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Паллета отсутствует в забытых";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли; 
	КонецЕсли;
	//---АК BELN 2018.05.25 
	
	Если РасходныйОрдер.КоличествоПаллет=0 Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "На этапе сборки не указано количество паллет";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	
	Если КолВсего>=РасходныйОрдер.КоличествоПаллет И НЕ СтруктураПараметры.Свойство("ДобавлениеЗабПаллеты") И НЕ СтруктураПараметры.Свойство("ВозвращениеЗабПаллеты") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Все паллеты уже отсканированы";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	//+++АК BELN 2018.05.25 ИП-00018389
	Если Статус=Перечисления.СтатусПаллета.ВодительПринял Тогда
		Запрос.УстановитьПараметр("НаДебаркадере", Перечисления.СтатусПаллета.НаДебаркадере);
		Запрос.УстановитьПараметр("РасходныйОрдер", РасходныйОрдер);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		КолДеб=0;
		КолВсегоДеб=0;
		ДатаОпДеб=Неопределено;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КолДеб=ВыборкаДетальныеЗаписи.Количество;
			ДатаОпДеб=ВыборкаДетальныеЗаписи.Период+1;
			КолВсегоДеб=ВыборкаДетальныеЗаписи.Количество+ВыборкаДетальныеЗаписи.КоличествоЗабыто;
		КонецЦикла;
		Если КолВсегоДеб-КолДеб>0 Тогда
			Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
			Мен.Период=?(ЗначениеЗаполнено(ДатаОпДеб),ДатаОпДеб,ТекущаяДата());
			Мен.Паллет=СтрДанные.Объект;
			Мен.Ордер=РасходныйОрдер;
			Мен.Статус=Перечисления.СтатусПаллета.НаДебаркадере;
			Мен.Количество=КолДеб+1;
			Мен.КоличествоЗабыто=КолВсегоДеб-КолДеб-1;
			Если СтруктураПараметры.Свойство("Кладовщик") Тогда
				Мен.ФизЛицо=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));			
			КонецЕсли; 
			Мен.Записать();
			КолДеб=КолДеб+1;
		КонецЕсли; 
		Если Кол>=КолВсегоДеб Тогда
			КолДеб=КолДеб+Кол-КолВсегоДеб+1;
			КолВсегоДеб=КолВсегоДеб+Кол-КолВсегоДеб+1;
			
			Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
			Мен.Период=?(ЗначениеЗаполнено(ДатаОпДеб),ДатаОпДеб,ТекущаяДата());
			Мен.Паллет=СтрДанные.Объект;
			Мен.Ордер=РасходныйОрдер;
			Мен.Статус=Перечисления.СтатусПаллета.НаДебаркадере;
			Мен.Количество=КолДеб;
			Мен.КоличествоЗабыто=КолВсегоДеб-КолДеб;
			Если СтруктураПараметры.Свойство("Кладовщик") Тогда
				Мен.ФизЛицо=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));			
			КонецЕсли; 
			Мен.Записать();
			
			
		КонецЕсли; 
		
	КонецЕсли; 
	//---АК BELN 2018.05.25 
	
	
	Попытка
		
		
		Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
		
		Мен.Период=ТекущаяДата();
		
		Мен.Паллет=СтрДанные.Объект;
		Мен.Ордер=РасходныйОрдер;
		Мен.Статус=Статус;
		Если СтруктураПараметры.Свойство("ДобавлениеЗабПаллеты") Тогда
			Мен.Период=?(ЗначениеЗаполнено(ДатаОп),ДатаОп,ТекущаяДата());
			Мен.Количество=Кол-1;
			Мен.КоличествоЗабыто=КолВсего-Кол+1;
		ИначеЕсли СтруктураПараметры.Свойство("ВозвращениеЗабПаллеты") Тогда
			Мен.Период=?(ЗначениеЗаполнено(ДатаОп),ДатаОп,ТекущаяДата());
			Мен.Количество=Кол+1;
			Мен.КоличествоЗабыто=КолВсего-Кол-1;
		Иначе
			Мен.Количество=Кол+1;
			Мен.КоличествоЗабыто=?(Статус=Перечисления.СтатусПаллета.НаДебаркадере,КолВсего-Кол,0);
		КонецЕсли; 
		Если СтруктураПараметры.Свойство("Кладовщик") Тогда
			Мен.ФизЛицо=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));			
		КонецЕсли; 
		Мен.Записать();
		СтруктураВозврат.Вставить("НаименованиеТТ",РасходныйОрдер.Получатель.Наименование);
		//+++АК BELN 2018.12.07 ИП-00020627
		СтруктураВозврат.Вставить("Склад",Строка(РасходныйОрдер.Склад.Владелец)+Символы.ПС+Строка(РасходныйОрдер.Склад));
		//---АК BELN 2018.12.07 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеКонвертовРеклама.Ордер,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ЗаявкаНаНовыйМагазин КАК ЗаявкаНаНовыйМагазин,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ТипЗаявки КАК ТипЗаявки,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы) КАК Основание,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ТорговаяТочка КАК ТорговаяТочка,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки
		|ИЗ
		|	РегистрСведений.ДвижениеКонвертовРеклама КАК ДвижениеКонвертовРеклама
		|ГДЕ
		|	ДвижениеКонвертовРеклама.Паллет = &Паллет
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвижениеКонвертовРеклама.Ордер,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ЗаявкаНаНовыйМагазин,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ТипЗаявки,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы),
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ТорговаяТочка,
		|	ВЫРАЗИТЬ(ДвижениеКонвертовРеклама.Ордер.Основание КАК Документ.ЗаявкаНаРекламныеМатериалы).ТорговаяТочка.ТипРозничнойТочки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвижениеКонвертовРеклама.Ордер,
		|	РасходныйОрдерСкладТорговыеТочки.Магазин,
		|	РасходныйОрдерСкладТорговыеТочки.Магазин.ТипРозничнойТочки КАК ТипРозничнойТочки
		|ИЗ
		|	РегистрСведений.ДвижениеКонвертовРеклама КАК ДвижениеКонвертовРеклама
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.ТорговыеТочки КАК РасходныйОрдерСкладТорговыеТочки
		|		ПО ДвижениеКонвертовРеклама.Ордер = РасходныйОрдерСкладТорговыеТочки.Ссылка
		|ГДЕ
		|	ДвижениеКонвертовРеклама.Паллет = &Паллет
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвижениеКонвертовРеклама.Ордер,
		|	РасходныйОрдерСкладТорговыеТочки.Магазин,
		|	РасходныйОрдерСкладТорговыеТочки.Магазин.ТипРозничнойТочки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МАКСИМУМ(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут) КАК Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И МаршрутныйЛистРасходныеОрдера.Документ = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка";
		
		Запрос.УстановитьПараметр("Паллет", СтрДанные.Объект);
		Запрос.УстановитьПараметр("Документ", РасходныйОрдер);
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаДетальныеЗаписи = Результат[0].Выбрать();
		ТабМаг= Результат[1].Выгрузить();
		
		Выборка = Результат[2].Выбрать();
		Ссылка=Неопределено;
		Если Выборка.Следующий() Тогда
			Ссылка=(Выборка.Ссылка);
			
			//ВыборкаДетальныеЗаписи = Результат.Выбрать();
			МасМаг=Новый Массив;
			ТЗТорговыеТочки=Ссылка.ТорговыеТочки.Выгрузить();//ТТ Маршрутного листа паллеты
			Для каждого Стр Из ТЗТорговыеТочки Цикл
				МасМаг.Добавить(Стр.СтруктурнаяЕдиница);
			КонецЦикла; 
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Расходник=ВыборкаДетальныеЗаписи.Ордер;
				
				Если ВыборкаДетальныеЗаписи.ТипЗаявки=ПредопределенноеЗначение("Перечисление.ТипЗаявкиНаРекламныеМатериалы.МассоваяРассылка") Тогда
					
					//ЗаявкаНаНовыйМагазин=Расходник.Основание.ЗаявкаНаНовыйМагазин;
					//ТипЗаявки=Расходник.Основание.ТипЗаявки;
					ТЗТорговыеТочки=ТабМаг.НайтиСтроки(Новый Структура("Ордер",Расходник));
					Для каждого Стр Из ТЗТорговыеТочки Цикл
						Если МасМаг.Найти(Стр.Магазин)=Неопределено Тогда
							Продолжить;
						КонецЕсли; 
						НайденМагазин=Истина;
						Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
						Мен.Период=ТекущаяДата();
						Мен.Заявка=ВыборкаДетальныеЗаписи.Основание;
						Мен.Ордер=Расходник;
						Мен.ТТ=Стр.Магазин;
						Мен.ЗаявкаНаНовыйМагазин=ВыборкаДетальныеЗаписи.ЗаявкаНаНовыйМагазин;
						Мен.ТипЗаявки=ВыборкаДетальныеЗаписи.ТипЗаявки;
						Мен.ТипРозничнойТочки=Стр.ТипРозничнойТочки;
						Мен.ПереданоВСборку=Истина;
						Мен.ПогруженоНаПаллет=Истина;
						Мен.ВПути=Истина;
						//Если СтруктураПараметры.Свойство("ШКПаллета") Тогда
						//	Мен.Паллет=Паллета;
						//КонецЕсли; 
						Мен.Записать();
					КонецЦикла; 
					//Если Не НайденМагазин Тогда
					//	СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					//	+ "Паллета пойдет по маршруту, в котором отсутствуют магазины, указанные в заявке на рекламу";
					//	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
					
					//КонецЕсли; 
				Иначе
					//Если МасМаг.Найти(Расходник.Основание.ТорговаяТочка)=Неопределено Тогда
					//	СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					//	+ "Паллета пойдет по маршруту, в котором отсутствуют магазины, указанные в заявке на рекламу";
					//	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
					
					//КонецЕсли; 
					
					Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
					Мен.Период=ТекущаяДата();
					Мен.Заявка=ВыборкаДетальныеЗаписи.Основание;
					Мен.Ордер=Расходник;
					Мен.ТТ=ВыборкаДетальныеЗаписи.ТорговаяТочка;
					Мен.ЗаявкаНаНовыйМагазин=ВыборкаДетальныеЗаписи.ЗаявкаНаНовыйМагазин;
					Мен.ТипЗаявки=ВыборкаДетальныеЗаписи.ТипЗаявки;
					Мен.ТипРозничнойТочки=ВыборкаДетальныеЗаписи.ТипРозничнойТочки;
					Мен.ПереданоВСборку=Истина;
					Мен.ПогруженоНаПаллет=Истина;
					Мен.ВПути=Истина;
					//Если СтруктураПараметры.Свойство("ШКПаллета") Тогда
					//	Мен.Паллет=Паллета;
					//КонецЕсли; 
					Мен.Записать();
				КонецЕсли; 
				
			КонецЦикла;
		КонецЕсли;	
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ОбнулитьКоробки(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если Не ЗначениеЗаполнено(Док) Тогда
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Не найден документ";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Номенклатура));
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Характеристика));
	
	
	
	Попытка
		//НЗ=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьНаборЗаписей();
		//НЗ.Отбор.Документ.Установить(Док);
		//НЗ.Отбор.Номенклатура.Установить(Номенклатура);
		//НЗ.Отбор.Характеристика.Установить(Характеристика);
		//НЗ.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтриховыеКоды.ШтрихКод
		|ИЗ
		|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
		|ГДЕ
		|	ШтриховыеКоды.Номенклатура = &Номенклатура
		|	И ШтриховыеКоды.Характеристика = &Характеристика";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		МасШК=Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МасШК.Добавить(ВыборкаДетальныеЗаписи.ШтрихКод);	
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НумераторШтрихКодовКоробок.Нумератор
		|ИЗ
		|	РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
		|ГДЕ
		|	НумераторШтрихКодовКоробок.Номенклатура = &Номенклатура
		|	И НумераторШтрихКодовКоробок.Характеристика = &Характеристика";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МасШК.Добавить(СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.Нумератор)," ",""));
		КонецЦикла;
		
		Если МасШК.Количество()=0 Тогда
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли; 
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МП_ЖурналОбмена.Период КАК Период,
		|	МП_ЖурналОбмена.МобильныйКлиент,
		|	МП_ЖурналОбмена.НомерЗаписи,
		|	МП_ЖурналОбмена.НаСервере,
		|	МП_ЖурналОбмена.НомерОтправленного,
		|	МП_ЖурналОбмена.НомерПринятого,
		|	МП_ЖурналОбмена.Событие,
		|	МП_ЖурналОбмена.ВремяВыполнения,
		|	МП_ЖурналОбмена.Пользователь,
		|	МП_ЖурналОбмена.Номенклатура,
		|	МП_ЖурналОбмена.Документ,
		|	МП_ЖурналОбмена.ИДНоменклатура
		|ИЗ
		|	РегистрСведений.МП_ЖурналОбмена КАК МП_ЖурналОбмена
		|ГДЕ
		|	МП_ЖурналОбмена.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("Документ", Док);
		
		Результат = Запрос.Выполнить();
		
		ТЗ = Результат.Выгрузить();
		Фл=Ложь;
		Для Сч=0 по ТЗ.Количество()-1 Цикл
			ВыборкаДетальныеЗаписи=ТЗ[Сч];
			Для каждого Эл Из МасШК Цикл
				Поз=Найти(ВыборкаДетальныеЗаписи.Событие,Эл);
				Если Поз>0 и Сред(ВыборкаДетальныеЗаписи.Событие,Поз-1,1)=" " Тогда
					Фл=истина;
				КонецЕсли;
			КонецЦикла; 
			Если Фл=Ложь Тогда
				Продолжить;
			КонецЕсли; 
			
			
			Если Фл Тогда
				Мен=РегистрыСведений.МП_ЖурналОбмена.СоздатьМенеджерЗаписи();
				Мен.Период=ВыборкаДетальныеЗаписи.Период;
				Мен.МобильныйКлиент=ВыборкаДетальныеЗаписи.МобильныйКлиент;
				Мен.НомерЗаписи=ВыборкаДетальныеЗаписи.НомерЗаписи;
				Мен.НаСервере=ВыборкаДетальныеЗаписи.НаСервере;
				Мен.Прочитать();
				Если Мен.Выбран() Тогда
					Мен.Удалить();
				КонецЕсли; 
			КонецЕсли; 
			
			ФлЕстьЕще=Ложь;
			Если Сч<>ТЗ.Количество()-1 Тогда
				Для Ит=Сч+1 По ТЗ.Количество()-1 Цикл
					ВыборкаДетальныеЗаписи1=ТЗ[Ит];
					Для каждого Эл Из МасШК Цикл
						Поз=Найти(ВыборкаДетальныеЗаписи1.Событие,Эл);
						Если Поз>0 и Сред(ВыборкаДетальныеЗаписи1.Событие,Поз-1,1)=" " Тогда
							ФлЕстьЕще=истина;
						КонецЕсли;
					КонецЦикла; 
				КонецЦикла; 
			КонецЕсли; 
			Если ФлЕстьЕще=Ложь Тогда
				Фл=Ложь;
			КонецЕсли; 
			
		КонецЦикла;
		
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции

Функция ПаллетаПринятаВодителем(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодПаллеты = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	СтрДанные = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКодПаллеты);
	Если НЕ ЗначениеЗаполнено(СтрДанные.Объект)
		ИЛИ ТипЗнч(СтрДанные.Объект) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден паллета";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	
	ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.ФизЛицо));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", СтрДанные.Объект.РасходныйОрдер);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ФЛВодитель="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФЛВодитель=ВыборкаДетальныеЗаписи.Водитель;	
	КонецЦикла;
	Если Строка(ФЛВодитель)<>Строка(ФизЛицоМП) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "В маршрутном листе указан другой водитель";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПогрузкаНачата
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ = &Документ
	|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПогрузкаНачата";
	
	Запрос.УстановитьПараметр("Документ", СтрДанные.Объект.РасходныйОрдер);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Погрузка не начата. Кладовщик должен отсканировать маршрутный лист для начала";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СканированныеПаллетыСрезПоследних.Паллет
	|ИЗ
	|	РегистрСведений.СканированныеПаллеты.СрезПоследних(&Дата, Паллет = &Паллет) КАК СканированныеПаллетыСрезПоследних
	|ГДЕ
	|	СканированныеПаллетыСрезПоследних.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Паллет", СтрДанные.Объект);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусПаллета.НаДебаркадере);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Данный паллет не принят дебаркадером, передача водителю невозможна";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	
	
	
	Если Не ЗначениеЗаполнено(СтрДанные.Объект.РасходныйОрдер.СборкаТерминаломЗакончена) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Не завершена сборка расходного ордера";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		
	КонецЕсли; 
	
	
	Попытка
		Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
		Мен.Период=ТекущаяДата();
		Мен.Паллет=СтрДанные.Объект;
		Мен.Ордер=СтрДанные.Объект.РасходныйОрдер;
		Мен.Статус=Перечисления.СтатусПаллета.ВодительПринял;
		Мен.Записать();
		
		
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ПолучитьДанныеДляПриходника(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	Ссылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Ссылка)
		ИЛИ ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ приходника";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Если Ссылка.Отменен Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Приходник отменен";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("Характеристика", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Номенклатура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("НоменклатураНаименование");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаНаименование");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураВесовой");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураСкладируемая");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураБезУпаковки");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаВес");
	ТаблицаРезультат.Колонки.Добавить("КоличествоИзХарактеристики");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаПредельноеКоличествоДнейСрокаГодности");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаСрокГодности");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаТипСрокаГодности");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаНеактивная");
	ТаблицаРезультат.Колонки.Добавить("НоменклатураРодитель");
	
	
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Наименование,
	|	ПриходныйОрдерСкладТовары.Характеристика.Наименование,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Весовой,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Складируемая,
	|	ПриходныйОрдерСкладТовары.Номенклатура.БезУпаковки,
	|	ПриходныйОрдерСкладТовары.Характеристика.СрокГодности КАК ХарактеристикаСрокГодности,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерСкладТовары.Характеристика.ТипСрокаГодности) КАК ХарактеристикаТипСрокаГодности,
	|	ПриходныйОрдерСкладТовары.Характеристика.Неактивная,
	|	ПриходныйОрдерСкладТовары.Характеристика.ПредельноеКоличествоДнейСрокаГодности,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Родитель КАК НоменклатураРодительСсылка,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК ХарактеристикаВес,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК КоличествоИзХарактеристики
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ПриходныйОрдерСкладТовары.Характеристика)
	|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Наименование,
	|	ПриходныйОрдерСкладТовары.Характеристика.Наименование,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Весовой,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Складируемая,
	|	ПриходныйОрдерСкладТовары.Номенклатура.БезУпаковки,
	|	ПриходныйОрдерСкладТовары.Характеристика.СрокГодности,
	|	ПриходныйОрдерСкладТовары.Характеристика.Неактивная,
	|	ПриходныйОрдерСкладТовары.Характеристика.ПредельноеКоличествоДнейСрокаГодности,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Родитель,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0),
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерСкладТовары.Характеристика.ТипСрокаГодности),
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0)
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) > 0");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);                                                                                 
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Номенклатура  = Строка(Выборка.Номенклатура.УникальныйИдентификатор());
		НоваяСтрока.Характеристика = Строка(Выборка.Характеристика.УникальныйИдентификатор());
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.НоменклатураРодитель  = Строка(Выборка.НоменклатураРодительСсылка.УникальныйИдентификатор());
	КонецЦикла;  
	
	
	Попытка
		ТаблицаЗаблокированные = Новый ТаблицаЗначений;
		
		ТаблицаЗаблокированные.Колонки.Добавить("Характеристика", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
		ТаблицаЗаблокированные.Колонки.Добавить("Номенклатура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
		ТаблицаЗаблокированные.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.Характеристика,
		|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
		|	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|ГДЕ
		|	ПриходныйОрдерСкладТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.Характеристика,
		|	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
		|
		|ИМЕЮЩИЕ
		|	СУММА(ПриходныйОрдерСкладТовары.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	вт.Номенклатура,
		|	БлокированныеТоварыДляПриемкиСрезПоследних.ДатаПроизводства
		|ИЗ
		|	РегистрСведений.БлокированныеТоварыДляПриемки.СрезПоследних(&Дата, ) КАК БлокированныеТоварыДляПриемкиСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|			ПО ХарактеристикиНоменклатуры.Ссылка = вт.Характеристика
		|		ПО БлокированныеТоварыДляПриемкиСрезПоследних.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|			И БлокированныеТоварыДляПриемкиСрезПоследних.Характеристика = ХарактеристикиНоменклатуры.Ссылка
		|			И (БлокированныеТоварыДляПриемкиСрезПоследних.ДатаПроизводства МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -ХарактеристикиНоменклатуры.Ссылка.СрокГодности * ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка.ТипСрокаГодности.КоэффициентВСутках, 0)) И &Дата)
		|			И (БлокированныеТоварыДляПриемкиСрезПоследних.Заблокирован)
		|			И (вт.СкладВладелец = БлокированныеТоварыДляПриемкиСрезПоследних.Склад
		|				ИЛИ БлокированныеТоварыДляПриемкиСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ТаблицаЗаблокированные.Добавить();
			
			НоваяСтрока.Номенклатура  = Строка(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
			НоваяСтрока.Характеристика = Строка(ВыборкаДетальныеЗаписи.Характеристика.УникальныйИдентификатор());
			НоваяСтрока.ДатаПроизводства = ВыборкаДетальныеЗаписи.ДатаПроизводства;
		КонецЦикла;
	Исключение	
	КонецПопытки;
	
	
	СтруктураВозврат = Новый Структура("Результат,Дата,ОписаниеОшибок,ТаблицаЗаблокированные", ТаблицаРезультат,Ссылка.Дата,"",ТаблицаЗаблокированные);
	Склад=Ссылка.Склад;
	Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) Тогда
		ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
		Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СборщикиНаСкладах.Склад = Склады.Владелец
			|ГДЕ
			|	СборщикиНаСкладах.Сборщик = &ФизЛицо
			|
			|СГРУППИРОВАТЬ ПО
			|	Склады.Ссылка";
			
			Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоМП);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			СкладДоступен=Ложь;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Склад=Склад Тогда
					СкладДоступен=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если  СкладДоступен=Ложь Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Кладовщик не привязан к складу документа";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	
	
	Если ЗначениеЗаполнено(Ссылка.Кладовщик) Тогда
		СтруктураВозврат.Вставить("Сборщик", Строка(Ссылка.Кладовщик.УникальныйИдентификатор()));
	Иначе
		СтруктураВозврат.Вставить("Сборщик", СтруктураПараметры.Сборщик);
	КонецЕсли;	
	//+++АК BELN 2018.08.23 ИП-00019147      
	СтруктураВозврат.Вставить("СкладОтправитель", Строка(Склад.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("СкладОтправительНаименование", Строка(Склад));
	//---АК BELN 2018.08.23 
	//+++АК BELN 2018.11.21 ЗА-00018922      
	СтруктураВозврат.Вставить("ИНН", (Склад.Организация.ИНН));
	//---АК BELN 2018.11.21 
	Попытка
		ДокОбъект = Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) И Не ЗначениеЗаполнено(ДокОбъект.Кладовщик) Тогда
			ДокОбъект.Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокОбъект.ДатаВремяЗаездаМашины) Тогда
			ДокОбъект.ДатаВремяЗаездаМашины = ТекущаяДата();
		КонецЕсли;		
		//+++АК BELN 2018.08.12 ИП-00019529      
		Если СтруктураПараметры.Свойство("Темп") Тогда
			ДокОбъект.Температура = СтруктураПараметры.Темп;
		КонецЕсли; 
		
		ДокОбъект.Записать(?(ДокОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));  
	
	
КонецФункции

Функция ПолучитьДанныеДляИнвентаризации(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.ЗаданиеНаИнвентаризацию") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ задания на инвентаризацию";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Если Док.Закрыто Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Данный документ уже был закрыт";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Док);
	Запрос.УстановитьПараметр("Дата", Док.Дата-1);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданиеНаИнвентаризацию.Номер,
	|	ЗаданиеНаИнвентаризацию.Дата,
	|	ЗаданиеНаИнвентаризацию.Склад,
	|	ЗаданиеНаИнвентаризацию.Склад.ИД,
	|	ЗаданиеНаИнвентаризацию.Склад.Наименование,
	|	ЗаданиеНаИнвентаризацию.Ответственный
	|ИЗ
	|	Документ.ЗаданиеНаИнвентаризацию КАК ЗаданиеНаИнвентаризацию
	|ГДЕ
	|	ЗаданиеНаИнвентаризацию.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаИнвентаризациюТовары.Номенклатура КАК НоменклатураСсылка,
	|	ЗаданиеНаИнвентаризациюТовары.Характеристика КАК ХарактеристикаСсылка,
	|	ЗаданиеНаИнвентаризациюТовары.ДатаПроизводства,
	|	СУММА(ЗаданиеНаИнвентаризациюТовары.Количество) КАК Количество,
	|	МИНИМУМ(ЗаданиеНаИнвентаризациюТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)) КАК УчетноеКоличество
	|ИЗ
	|	Документ.ЗаданиеНаИнвентаризацию.Товары КАК ЗаданиеНаИнвентаризациюТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, ) КАК ТоварыНаСкладахОстатки
	|		ПО ЗаданиеНаИнвентаризациюТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ЗаданиеНаИнвентаризациюТовары.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|			И ЗаданиеНаИнвентаризациюТовары.ЕдиницаИзмерения = ТоварыНаСкладахОстатки.ЕдиницаИзмерения
	|			И ЗаданиеНаИнвентаризациюТовары.ДатаПроизводства = ТоварыНаСкладахОстатки.ДатаПроизводства
	|			И ЗаданиеНаИнвентаризациюТовары.Ссылка.Склад = ТоварыНаСкладахОстатки.Склад
	|ГДЕ
	|	ЗаданиеНаИнвентаризациюТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаИнвентаризациюТовары.Номенклатура,
	|	ЗаданиеНаИнвентаризациюТовары.Характеристика,
	|	ЗаданиеНаИнвентаризациюТовары.ДатаПроизводства
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаШапки = Результаты[0].Выбрать();
	ТабТовары = Результаты[1].Выгрузить();
	ТабТовары.Колонки.Добавить("Номенклатура");
	ТабТовары.Колонки.Добавить("Характеристика");
	//ТабТовары.Колонки.Добавить("КоличествоСобрано", Новый ОписаниеТипов("Число"));
	
	ВыборкаШапки.Следующий();
	
	//Если ЗначениеЗаполнено(СтруктураПараметры.Сборщик) Тогда
	//	ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Сборщик));
	//	Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//			"ВЫБРАТЬ
	//			|	Склады.Ссылка КАК Склад
	//			|ИЗ
	//			|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
	//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	//			|		ПО СборщикиНаСкладах.Склад = Склады.Владелец
	//			|ГДЕ
	//			|	СборщикиНаСкладах.Сборщик = &ФизЛицо
	//			|
	//			|СГРУППИРОВАТЬ ПО
	//			|	Склады.Ссылка";
	
	//		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоМП);
	
	//		Результат = Запрос.Выполнить();
	
	//		ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//		СкладДоступен=Ложь;
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//			Если ВыборкаДетальныеЗаписи.Склад=ВыборкаШапки.Склад Тогда
	//				СкладДоступен=Истина;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		Если  СкладДоступен=Ложь Тогда
	//			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
	//						+ "Сборщик не привязан к складу документа";
	//			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли; 
	
	СтруктураВозврат.Вставить("ДокументГуид", Строка(Док.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("Номер", ВыборкаШапки.Номер);
	СтруктураВозврат.Вставить("Дата", ВыборкаШапки.Дата);
	СтруктураВозврат.Вставить("Склад", Строка(ВыборкаШапки.Склад.УникальныйИдентификатор()));
	СтруктураВозврат.Вставить("СкладНаименование", ВыборкаШапки.СкладНаименование);
	СтруктураВозврат.Вставить("СкладШК", "810" + Прав("000000000000" + Формат(ВыборкаШапки.СкладИД, "ЧГ=0"), 12));
	
	//ДанныеСборкиДоПрерывания = ВыборкаШапки.ДанныеСборкиНаМобильномУстройстве.Получить();
	
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		СтрокаТаб.Номенклатура = Строка(СтрокаТаб.НоменклатураСсылка.УникальныйИдентификатор());
		СтрокаТаб.Характеристика = Строка(СтрокаТаб.ХарактеристикаСсылка.УникальныйИдентификатор());
	КонецЦикла;
	
	//Если ТипЗнч(ДанныеСборкиДоПрерывания) = Тип("Структура") Тогда
	//	Для Каждого СтрокаТовар Из ДанныеСборкиДоПрерывания.Товары Цикл
	//		СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика), СтрокаТовар.ДатаПроизводства));
	//		Если СтрокиВТаблице.Количество() > 0 Тогда
	//			СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
	//		Иначе	
	//			СтрокиВТаблице = ТабТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка(СтрокаТовар.Номенклатура), Строка(СтрокаТовар.Характеристика)));
	//			Если СтрокиВТаблице.Количество() > 0 Тогда
	//				СтрокиВТаблице[0].КоличествоСобрано = СтрокиВТаблице[0].КоличествоСобрано + СтрокаТовар.Количество;
	//			КонецЕсли;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЕсли;	
	
	ТабТовары.Колонки.Удалить("НоменклатураСсылка");
	ТабТовары.Колонки.Удалить("ХарактеристикаСсылка");
	СтруктураВозврат.Вставить("Товары", ТабТовары);
	
	
	Попытка
		//НЗ=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьНаборЗаписей();
		//НЗ.Отбор.Документ.Установить(Док);
		//НЗ.Записать();
		ДокОбъект = Док.ПолучитьОбъект();
		
		Если ДокОбъект.Кладовщики.Количество()  Тогда          
			Ответственный = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Ответственный));
			Если ДокОбъект.Кладовщики.Найти(Ответственный)=Неопределено  Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Этого сотрудника нет в списке кладовщиков этого документа";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли; 
		Иначе	
			Если ЗначениеЗаполнено(ВыборкаШапки.Ответственный) Тогда
				СтруктураВозврат.Вставить("Ответственный", Строка(ВыборкаШапки.Ответственный.УникальныйИдентификатор()));
			Иначе
				СтруктураВозврат.Вставить("Ответственный", СтруктураПараметры.Ответственный);
			КонецЕсли;	
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтруктураПараметры.Ответственный) и Не ЗначениеЗаполнено(ДокОбъект.Ответственный) Тогда
			ДокОбъект.Ответственный = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Ответственный));
		КонецЕсли;	
		ДокОбъект.Записать(?(ДокОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
	Исключение
		СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьРасходникПриПрерывании(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ сборки";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Попытка
		ДокОбъект = ДокПеремещение.ПолучитьОбъект();
		ДокОбъект.СборкаБылаПрерванаНаМобУстройстве = Истина;
		ДокОбъект.ДанныеСборкиНаМобильномУстройстве = ДанныеМобильногоПриложения;
		//ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
		ДокОбъект.Записать(?(ДокОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьРасходникДляПодтвержденияКладовщика(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ сборки";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	Если СтруктураПараметры.Свойство("ПроверкаКладовщиком") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Необходимо обновить мобильное приложение. Пользоваться проверкой кладовщика пока нельзя";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	ТабТовары=СтруктураПараметры.Товары;
	Если СтруктураПараметры.Свойство("Комплектовщик") Тогда
		НЗ=РегистрыСведений.ТоварыПодтвержденныеКладовщикомПриСборке.СоздатьНаборЗаписей();
		НЗ.Отбор.Расходник.Установить(Док);
		НЗ.Записать();	
		Попытка
			Если СтруктураПараметры.Свойство("КонтрольнаяСумма") Тогда
				Разн=ТабТовары.Итог("Количество") - СтруктураПараметры.КонтрольнаяСумма;
				Если Разн<0 Тогда
					Разн=-Разн;
				КонецЕсли; 
				
				
				
				Если Разн>0.5  Тогда
					//СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					//+ "Попробуйте еще раз";
					//СтруктураВозврат.Результат = Ложь;
					//Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				КонецЕсли;
			КонецЕсли; 
			ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
			Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
				Кладовщик=ФизЛицоМП;
			КонецЕсли; 
			ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Комплектовщик));
			Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
				Комплектовщик=ФизЛицоМП;
			КонецЕсли; 
			Для Сч=0 По ТабТовары.Количество()-1 Цикл
				СтрокаТаб=ТабТовары[Сч];	
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
				Если Не ЗначениеЗаполнено(Номенклатура) ИЛИ Не ЗначениеЗаполнено(Характеристика) Тогда
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ "При получении списка товаров были обнаружены несинхронизированные товары! Необходимо выполнить синхронизацию!";
					СтруктураВозврат.Результат = Ложь;
					Возврат Новый ХранилищеЗначения(СтруктураВозврат);
				КонецЕсли;
				Мен=РегистрыСведений.ТоварыПодтвержденныеКладовщикомПриСборке.СоздатьМенеджерЗаписи();
				Мен.Расходник=Док;
				Мен.Номенклатура=Номенклатура;
				Мен.Характеристика=Характеристика;
				Мен.ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
				Мен.Комплектовщик=Комплектовщик;
				Мен.Кладовщик=Кладовщик;
				Мен.КоличествоПоОрдеру=СтрокаТаб.Количество;
				Мен.КоличествоКорректировка=СтрокаТаб.КоличествоКорректировка;
				Мен.Записать();
			КонецЦикла;
			
			
			
		Исключение
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ ОписаниеОшибки();
			СтруктураВозврат.Результат = Ложь;
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецПопытки;
	КонецЕсли;
	ФизЛицоМП=Неопределено;
	
	
	Попытка
		ДокОбъект = Док.ПолучитьОбъект();
		Если ТабТовары.Колонки.Найти("КоличествоКорректировка")<>Неопределено Тогда
			НЗ=РегистрыСведений.КорректировкиРасходника.СоздатьНаборЗаписей();
			НЗ.Отбор.РасходныйОрдер.Установить(ДокОбъект.Ссылка);
			НЗ.Прочитать();
			Если ЗначениеЗаполнено(СтруктураПараметры.Кладовщик) Тогда
				ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
			Иначе
				ФизЛицоМП=Справочники.ФизическиеЛица.ПустаяСсылка();
			КонецЕсли;
			Для каждого Стр Из ТабТовары Цикл
				Если Стр.КоличествоКорректировка<>0 Тогда
					Зап=НЗ.Добавить();
					Зап.Период=ТекущаяДата();
					Зап.РасходныйОрдер=ДокОбъект.Ссылка;
					Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Номенклатура));
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Характеристика));
					Зап.Номенклатура=Номенклатура;
					Зап.Характеристика=Характеристика;
					Зап.ДатаПроизводства=Стр.ДатаПроизводства;
					Зап.КоличествоКорректировка=Стр.КоличествоКорректировка;
					Зап.ФизЛицо=ФизЛицоМП;
				КонецЕсли; 
			КонецЦикла;
			НЗ.Записать();
		КонецЕсли;
		Если ЗначениеЗаполнено(ФизЛицоМП) Тогда
			//ДокОбъект.ПереданаКладовщику = СтруктураПараметры.ПроверкаКладовщиком;
			//ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = ДанныеМобильногоПриложения;
			//ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
			
			ДокОбъект.КладовщикПроверки=ФизЛицоМП;                                                   
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 	
		
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьЗаданиеНаРазборкуДляПодтвержденияКладовщика(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.ЗаданиеНаРазборку") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ сборки";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).id_tt КАК id_tt,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку = &ЗаданиеНаРазборку
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)";
	Запрос.УстановитьПараметр("ЗаданиеНаРазборку", Док);
	ТЗРасходники=Запрос.Выполнить().Выгрузить();	
	
	Если СтруктураПараметры.Свойство("ПроверкаКладовщиком") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Необходимо обновить мобильное приложение. Пользоваться проверкой кладовщика пока нельзя";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 
	ТабТовары=СтруктураПараметры.Товары;
	ТЗДоки=ТЗРасходники.Скопировать();
	ТЗДоки.Свернуть("Ссылка,Номенклатура");
	Для каждого Стр Из ТЗДоки Цикл
		НЗ=РегистрыСведений.ТоварыПодтвержденныеКладовщикомПриСборке.СоздатьНаборЗаписей();
		НЗ.Отбор.Расходник.Установить(Стр.Ссылка);
		НЗ.Отбор.Номенклатура.Установить(Стр.Номенклатура);
		НЗ.Записать();
	КонецЦикла; 
	
	
	Попытка
		Если СтруктураПараметры.Свойство("КонтрольнаяСумма") Тогда
			Разн=ТабТовары.Итог("Количество") - СтруктураПараметры.КонтрольнаяСумма;
			Если Разн<0 Тогда
				Разн=-Разн;
			КонецЕсли; 
			
			
			
			Если Разн>0.5  Тогда
				//СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				//+ "Попробуйте еще раз";
				//СтруктураВозврат.Результат = Ложь;
				//Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли;
		КонецЕсли; 
		ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
		Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
			Кладовщик=ФизЛицоМП;
		КонецЕсли; 
		ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Комплектовщик));
		Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено Тогда
			Комплектовщик=ФизЛицоМП;
		КонецЕсли; 
		Для Сч=0 По ТабТовары.Количество()-1 Цикл
			СтрокаТаб=ТабТовары[Сч];	
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
			
			Если Не ЗначениеЗаполнено(Номенклатура) ИЛИ Не ЗначениеЗаполнено(Характеристика) Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "При получении списка товаров были обнаружены несинхронизированные товары! Необходимо выполнить синхронизацию!";
				СтруктураВозврат.Результат = Ложь;
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли;
			ИД = Прав(СтрокаТаб.ШКТТ, 12);
			
			Пока Лев(ИД, 1) = "0" Цикл
				ИД = Сред(ИД, 2);
			КонецЦикла;
			Если СтрДлина(ИД) > 0 Тогда
				МасСтр=ТЗРасходники.НайтиСтроки(Новый Структура("id_tt,ЗаданиеНаРазборку,Номенклатура",Число(ИД),Док,Номенклатура));
				Если МасСтр.Количество() Тогда
					СтрТТ=МасСтр[0];
					
					
					Мен=РегистрыСведений.ТоварыПодтвержденныеКладовщикомПриСборке.СоздатьМенеджерЗаписи();
					Мен.Расходник=СтрТТ.Ссылка;
					Мен.Номенклатура=Номенклатура;
					Мен.Характеристика=Характеристика;
					Мен.ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
					Мен.Комплектовщик=Комплектовщик;
					Мен.Кладовщик=Кладовщик;
					Мен.КоличествоПоОрдеру=СтрокаТаб.Количество;
					Мен.КоличествоКорректировка=СтрокаТаб.КоличествоКорректировка;
					Мен.Записать();
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
		
		
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;
	
	//
	//Попытка
	//	ДокОбъект = Док.ПолучитьОбъект();
	//	Если ТабТовары.Колонки.Найти("КоличествоКорректировка")<>Неопределено Тогда
	//		НЗ=РегистрыСведений.КорректировкиРасходника.СоздатьНаборЗаписей();
	//		НЗ.Отбор.РасходныйОрдер.Установить(ДокОбъект.Ссылка);
	//		НЗ.Прочитать();
	//		Если ЗначениеЗаполнено(СтруктураПараметры.Кладовщик) Тогда
	//			ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
	//		Иначе
	//			ФизЛицоМП=Справочники.ФизическиеЛица.ПустаяСсылка();
	//		КонецЕсли;
	//		Для каждого Стр Из ТабТовары Цикл
	//			Если Стр.КоличествоКорректировка<>0 Тогда
	//				Зап=НЗ.Добавить();
	//				Зап.Период=ТекущаяДата();
	//				Зап.РасходныйОрдер=ДокОбъект.Ссылка;
	//				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Номенклатура));
	//				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Характеристика));
	//				Зап.Номенклатура=Номенклатура;
	//				Зап.Характеристика=Характеристика;
	//				Зап.ДатаПроизводства=Стр.ДатаПроизводства;
	//				Зап.КоличествоКорректировка=Стр.КоличествоКорректировка;
	//				Зап.ФизЛицо=ФизЛицоМП;
	//			КонецЕсли; 
	//		КонецЦикла;
	//		НЗ.Записать();
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ФизЛицоМП) Тогда
	//		//ДокОбъект.ПереданаКладовщику = СтруктураПараметры.ПроверкаКладовщиком;
	//		//ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = ДанныеМобильногоПриложения;
	//		//ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
	//		
	//		ДокОбъект.КладовщикПроверки=ФизЛицоМП;                                                   
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	//	КонецЕсли; 	
	//	
	//Исключение
	//	СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
	//	+ ОписаниеОшибки();
	//	СтруктураВозврат.Результат = Ложь;
	//КонецПопытки;
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ОтменитьСборку(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ сборки";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Попытка
		ДокОбъект = ДокПеремещение.ПолучитьОбъект();
		ДокОбъект.ПереданаКладовщику = Ложь;
		//Если ДокОбъект.ПереданаКладовщику Тогда
		ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
		//ДокОбъект.Сборщик=Неопределено;
		//Иначе
		//	ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
		//КонецЕсли; 
		ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
		//ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции


Функция ОтменитьПриемку(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	ДокПеремещение = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(ДокПеремещение)
		ИЛИ ТипЗнч(ДокПеремещение) <> Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ приемки";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	ДокОбъект = ДокПеремещение.ПолучитьОбъект();
	Попытка
		ДокОбъект.Кладовщик=Неопределено;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьРасходник(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	
	Попытка 
		Если СтруктураПараметры.Свойство("ЖурналОбмена") Тогда
			УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.КодУстройства); 
			ОбменМобильноеПриложениеПереопределяемый.ЗагрузитьЖурналОбмена(УзелОбмена, СтруктураПараметры.ЖурналОбмена);
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ расходника";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	Если ТипЗнч(СтруктураПараметры.Товары)=Тип("ХранилищеЗначения") Тогда
		ТЗТовары=СтруктураПараметры.Товары.Получить();
	Иначе	
		ТЗТовары=СтруктураПараметры.Товары;
	КонецЕсли; 
	//АК БЕЛН 05.10.2017 ИП-00016830+
	Если СтруктураПараметры.Свойство("ЭтоРевизор") Тогда
		Попытка
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.ПровереноРевизором = Истина;
			ДокОбъект.Записать();
			
			НЗ=РегистрыСведений.РезультатыПроверкиРевизора.СоздатьНаборЗаписей();
			НЗ.Отбор.Документ.Установить(Док);
			НЗ.Записать(Истина);
			
			Для Сч=0 По ТЗТовары.Количество()-1 Цикл
				СтрокаТаб=ТЗТовары[Сч];	
				//Для Каждого СтрокаТаб Из ТЗТовары Цикл
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
				
				Мен=РегистрыСведений.РезультатыПроверкиРевизора.СоздатьМенеджерЗаписи();
				Мен.Документ=Док;
				Мен.Номенклатура=Номенклатура;
				Мен.Характеристика=Характеристика;
				Мен.ДатаПроизводства=СтрокаТаб.ДатаПроизводства;
				Мен.КоличествоУРЗ=СтрокаТаб.КоличествоУРЗ;
				Мен.Проверено=СтрокаТаб.Количество;
				Мен.Собрано=СтрокаТаб.КоличествоПоОрдеру;
				Мен.Разница=СтрокаТаб.Количество-СтрокаТаб.КоличествоПоОрдеру;
				Мен.Записать();
			КонецЦикла;
		Исключение
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ ОписаниеОшибки();
			СтруктураВозврат.Результат = Ложь;
		КонецПопытки;
		
		
		
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли; 	
	//АК БЕЛН 05.10.2017 ИП-00016830-
	
	
	
	Попытка
		ДокОбъект = Док.ПолучитьОбъект();
		ФлРеальныеДП=ДокОбъект.Склад=Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("4cb1cf10-e9e6-11e5-869f-005056a00106")) И СтруктураПараметры.Свойство("ПриходПоНовымДатамПроизводства");
		Если ФлРеальныеДП Тогда
			ДокОбъект.ДополнительныеСвойства.Вставить("ИзМП");
		КонецЕсли; 
		ДокОбъект.СборкаТерминаломЗакончена = Истина;
		ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
		ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
		ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
		Если СтруктураПараметры.Свойство("ВидПроверки") Тогда
			ДокОбъект.ПроверкаПриНедостачеВыполнена = СтруктураПараметры.ВидПроверки;
		КонецЕсли; 
		Если СтруктураПараметры.Свойство("Коробок") Тогда
			ДокОбъект.КоличествоПаллет = СтруктураПараметры.Коробок;
		КонецЕсли; 		
		//Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
		//	СтрокаТаб.Количество = 0;                                                
		//КонецЦикла;
		//
		//Для Каждого СтрокаТаб Из СтруктураПараметры.Товары Цикл
		//	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
		//	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
		//	СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
		//	Если СтрокиВДоке.Количество() > 0 Тогда
		//		СтрокаВДоке = СтрокиВДоке[0];
		//	Иначе
		//		СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
		//		Если СтрокиВДоке.Количество() > 0 Тогда
		//			СтрокаВДоке = СтрокиВДоке[0];
		//		Иначе
		//			Если ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество()<>0 Тогда
		//				СтрокаВДоке = ДокОбъект.Товары.Добавить();
		//				СтрокаВДоке.Номенклатура = Номенклатура;
		//				СтрокаВДоке.Характеристика = Характеристика;
		//				СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
		//				СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		//			Иначе
		//				Продолжить;	
		//			КонецЕсли; 
		//		КонецЕсли;	
		//	КонецЕсли;	
		//	СтрокаВДоке.Количество = СтрокаВДоке.Количество + СтрокаТаб.Количество;
		//КонецЦикла;
		
		МасНомСтр=Новый Массив;
		ТоварыВДокументе = ДокОбъект.Товары.Выгрузить();
		ТоварыВДокументеИсх=ТоварыВДокументе.Скопировать();
		ДокОбъект.Товары.Очистить();
		
		
		Для Сч=0 По ТЗТовары.Количество()-1 Цикл
			СтрокаТаб=ТЗТовары[Сч];	
			//Для Каждого СтрокаТаб Из ТЗТовары Цикл
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
			Если ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество()=0 Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "При получении списка товаров были обнаружены несинхронизированные товары! ("+Строка(Номенклатура)+"). Необходимо выполнить синхронизацию!";
				СтруктураВозврат.Результат = Ложь;
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли;	
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
			Если Не ЗначениеЗаполнено(Номенклатура) ИЛИ Не ЗначениеЗаполнено(Характеристика) Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "При получении списка товаров были обнаружены несинхронизированные товары! Необходимо выполнить синхронизацию!";
				СтруктураВозврат.Результат = Ложь;
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли;
			
			
			СтрокиВДоке = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
			
			Если ФлРеальныеДП Тогда
				Если СтрокиВДоке.Количество() > 0 Тогда
					СтрокаВДоке = СтрокиВДоке[0];
				Иначе
					Если ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество()<>0 Тогда
						СтрокаВДоке = ТоварыВДокументе.Добавить();
						СтрокаВДоке.Номенклатура = Номенклатура;
						СтрокаВДоке.Характеристика = Характеристика;
						СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
						СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
					Иначе
						Продолжить;	
					КонецЕсли; 
				КонецЕсли;	
			Иначе	
				Если СтрокиВДоке.Количество() > 0 Тогда
					СтрокаВДоке = СтрокиВДоке[0];
				Иначе
					СтрокиВДоке = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
					Если СтрокиВДоке.Количество() > 0 Тогда
						СтрокаВДоке = СтрокиВДоке[0];
					Иначе
						Если ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество()<>0 Тогда
							СтрокаВДоке = ТоварыВДокументе.Добавить();
							СтрокаВДоке.Номенклатура = Номенклатура;
							СтрокаВДоке.Характеристика = Характеристика;
							СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
							СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
						Иначе
							Продолжить;	
						КонецЕсли; 
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли; 
			//Если ЗначениеЗаполнено(СтрокаТаб.ДатаПроизводства) И НЕ ЗначениеЗаполнено(СтрокаВДоке.ДатаПроизводства) Тогда
			//	СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
			//КонецЕсли; 
			СтрокаВДоке.Количество = ?(МасНомСтр.Найти(СтрокаВДоке.НомерСтроки)=Неопределено,0,СтрокаВДоке.Количество) + СтрокаТаб.Количество;
			МасНомСтр.Добавить(СтрокаВДоке.НомерСтроки);
		КонецЦикла;
		Если МасНомСтр.Количество()>0 Тогда
			Для Каждого СтрокаТаб Из ТоварыВДокументе Цикл
				Если МасНомСтр.Найти(СтрокаТаб.НомерСтроки)=Неопределено Тогда
					СтрокаТаб.Количество = 0;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Нет товаров для записи в расходник";
			СтруктураВозврат.Результат = Ложь;
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли; 
		
		ФизЛицоМП=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
		Если ФизЛицоМП.ПолучитьОбъект()<>Неопределено И НЕ ЗначениеЗаполнено(ДокОбъект.Сборщик) Тогда
			ДокОбъект.Сборщик=ФизЛицоМП;
		КонецЕсли; 
		
		ФлНужноПроведение=Ложь;
		Для каждого СтрокаТаб Из ТоварыВДокументеИсх Цикл
			
			СтрокиВДоке = ТоварыВДокументе.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства,Количество", 
			СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика, СтрокаТаб.ДатаПроизводства, СтрокаТаб.Количество));
			Если СтрокиВДоке.Количество()=0 Тогда
				ФлНужноПроведение=Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если ФлНужноПроведение=Ложь Тогда
			Для каждого СтрокаТаб Из ТоварыВДокументе Цикл
				
				СтрокиВДоке = ТоварыВДокументеИсх.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства,Количество", 
				(СтрокаТаб.Номенклатура), (СтрокаТаб.Характеристика), СтрокаТаб.ДатаПроизводства, СтрокаТаб.Количество));
				Если СтрокиВДоке.Количество()=0 Тогда
					ФлНужноПроведение=Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			
		КонецЕсли; 
		
		ДокОбъект.Товары.Загрузить(ТоварыВДокументе);
		
		Если ФлНужноПроведение Тогда
			
			Если НЕ ДокОбъект.ПроверитьЗаполнение() Тогда
				Мас=ПолучитьСообщенияПользователю();
				СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, "Не удалось провести по причине -");
				Для каждого Эл Из Мас Цикл
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ Эл.Текст;
				КонецЦикла; 			
				
				//
				Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
			КонецЕсли; 
			
			
			
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			ДокОбъект.ОбменДанными.Загрузка=Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
		
		Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
		Мен.Период=ТекущаяДата();
		Мен.Ордер=Док;
		Мен.Статус=Перечисления.СтатусПаллета.Собран;
		Мен.Записать();
		
		Если СтруктураПараметры.Свойство("ТЗКоробки") Тогда
			ТЗКоробки=СтруктураПараметры.ТЗКоробки.Получить();
			Если СтруктураПараметры.Свойство("КонтрольнаяСуммаКоробки") Тогда
				Разн=СтруктураПараметры.КонтрольнаяСуммаКоробки-ТЗКоробки.Итог("Вес");
				Если Разн<0 Тогда
					Разн=-Разн;
				КонецЕсли; 
				//Если Разн>0.5 Тогда
				//	ОписаниеОшибки = "Повторите попытку";
				//	СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, ОписаниеОшибки);
				//	Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
				//КонецЕсли; 
			КонецЕсли; 
			
			Для каждого Стр Из ТЗКоробки Цикл
				Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Мен,Стр);
				Идентификатор = Новый УникальныйИдентификатор(Стр.НоменклатураИД);
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				Мен.Номенклатура=Номенклатура;
				Мен.Документ=Док;
				Мен.ДатаНачалаРаботыПоДокументу=СтруктураПараметры.ДатаНачалаРаботыПоДокументу;
				Если ТЗКоробки.Колонки.Найти("НомерПопытки")<>Неопределено Тогда
					Мен.НомерПопытки=Стр.НомерПопытки;
				КонецЕсли; 
				Если ТЗКоробки.Колонки.Найти("ДатаНачалаРаботыПоДокументу")<>Неопределено Тогда
					Мен.ДатаНачалаРаботыПоДокументу=Стр.ДатаНачалаРаботыПоДокументу;
				КонецЕсли; 
				
				Мен.Записать();
			КонецЦикла; 
		КонецЕсли; 	//
		
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	Если СтруктураПараметры.Свойство("КонтрольнаяСумма") Тогда
		СтруктураВозврат.Вставить("НомерЗаписиЖурналаОбмена",СтруктураПараметры.НомерЗаписиЖурналаОбмена+1);
	КонецЕсли; 
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ДобавитьРазрешенныеАналогиПриСборке(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	
	
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ расходника";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Номенклатура));
	Мен=РегистрыСведений.АналогиРазрешенныеПриСборке.СоздатьМенеджерЗаписи();
	Мен.Расходник=Док;
	Мен.Номенклатура=Номенклатура;
	Мен.Записать();
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

//АК БЕЛН 17.10.2017 ИП-00016265+
Функция ЗаписатьВремяЗапускаМобильныхУстройств(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	Попытка
		КодУстройства = СтруктураПараметры.КодУстройства;	
		ДатаНачалаЗапуска = СтруктураПараметры.ДатаНачалаЗапуска;	
		ДатаОкончанияЗапуска = СтруктураПараметры.ДатаОкончанияЗапуска;	
		УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодУстройства); 
		Магазин=УзелОбмена.Магазин;
		НомерМаг=УзелОбмена.Магазин.НомерТочки;
		
		Мен=РегистрыСведений.ЗапускМобильныхУстройств.СоздатьМенеджерЗаписи();
		Мен.ДатаНачалаЗапуска=ДатаНачалаЗапуска;
		Мен.ДатаОкончанияЗапуска=ДатаОкончанияЗапуска;
		Мен.Устройство=УзелОбмена;
		Мен.СтруктурнаяЕдиница=Магазин;
		Мен.Секунд=ДатаОкончанияЗапуска-ДатаНачалаЗапуска;
		Мен.КодУстройства=КодУстройства;
		Мен.ShopNo=НомерМаг;
		Если СтруктураПараметры.Свойство("Широта") Тогда
			Мен.Широта=СтруктураПараметры.Широта;
		КонецЕсли; 
		Если СтруктураПараметры.Свойство("Долгота") Тогда
			Мен.Долгота=СтруктураПараметры.Долгота;
		КонецЕсли; 
		
		Мен.Записать();
	Исключение
	КонецПопытки;
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции
//АК БЕЛН 17.10.2017 ИП-00016265-

Функция ЗаписатьКоробки(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	
	
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)  Тогда
		СтруктураВозврат.Результат = Истина;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	Попытка	
		Если СтруктураПараметры.Свойство("ТЗКоробки") Тогда
			ТЗКоробки=СтруктураПараметры.ТЗКоробки.Получить();
			Для каждого Стр Из ТЗКоробки Цикл
				Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Мен,Стр);
				Идентификатор = Новый УникальныйИдентификатор(Стр.НоменклатураИД);
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				Мен.Номенклатура=Номенклатура;
				Мен.Документ=Док;
				Мен.ДатаНачалаРаботыПоДокументу=СтруктураПараметры.ДатаНачалаРаботыПоДокументу;
				Если ТЗКоробки.Колонки.Найти("НомерПопытки")<>Неопределено Тогда
					Мен.НомерПопытки=Стр.НомерПопытки;
				КонецЕсли; 
				
				Мен.Записать();
			КонецЦикла; 
		КонецЕсли; 	//
		
	Исключение
		//СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		//+ ОписаниеОшибки();
		//СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ЗаписатьЗаданиеИнвентаризации(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок, Результат", "", Истина);
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)
		ИЛИ ТипЗнч(Док) <> Тип("ДокументСсылка.ЗаданиеНаИнвентаризацию") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден документ задания инвентаризации";
		СтруктураВозврат.Результат = Ложь;
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Попытка
		ДокОбъект = Док.ПолучитьОбъект();
		Если ДокОбъект.Кладовщики.Количество() Тогда
			Ответственный = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик));
			ФлЗакрыто=Истина;
			Для каждого Стр Из ДокОбъект.Кладовщики Цикл
				Если Не Стр.Кладовщик=Ответственный И Не Стр.Закрыто Тогда
					ФлЗакрыто=Ложь;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			ДокОбъект.Закрыто = ФлЗакрыто;
			ФлНачало=Истина;
			Для каждого Стр Из ДокОбъект.Кладовщики Цикл
				Если Не Стр.Кладовщик=Ответственный И Стр.Закрыто Тогда
					ФлНачало=Ложь;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			СтрКлад=ДокОбъект.Кладовщики.Найти(Ответственный);
			Если СтрКлад<>Неопределено Тогда
				СтрКлад.Закрыто=Истина;
			КонецЕсли; 
			НужнаПроверка=Ложь;
		Иначе	
			ДокОбъект.Закрыто = Истина;
			ФлНачало=Истина;
			НужнаПроверка=Истина;
		КонецЕсли; 
		
		//	Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
		//		СтрокаТаб.Количество = 0;
		//	КонецЦикла;	
		//	Для Каждого СтрокаТаб Из СтруктураПараметры.Товары Цикл
		//		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
		//		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
		//		СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
		//		Если СтрокиВДоке.Количество() > 0 Тогда
		//			СтрокаВДоке = СтрокиВДоке[0];
		//		Иначе
		//			//СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
		//			//Если СтрокиВДоке.Количество() > 0 Тогда
		//			//	СтрокаВДоке = СтрокиВДоке[0];
		//			//Иначе	
		//				СтрокаВДоке = ДокОбъект.Товары.Добавить();
		//				СтрокаВДоке.Номенклатура = Номенклатура;
		//				СтрокаВДоке.Характеристика = Характеристика;
		//				СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
		//				СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		//			//КонецЕсли;	
		//		КонецЕсли;	
		//		СтрокаВДоке.Количество = СтрокаВДоке.Количество + СтрокаТаб.Количество;
		//	КонецЦикла;	
		
		
		МасНомСтр=Новый Массив;
		ТоварыВДокументеИсх=ДокОбъект.Товары.Выгрузить();
		
		Для Каждого СтрокаТаб Из СтруктураПараметры.Товары Цикл
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Номенклатура));
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаб.Характеристика));
			СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
			Если СтрокиВДоке.Количество() > 0 Тогда
				СтрокаВДоке = СтрокиВДоке[0];
			Иначе
				//	СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
				//	Если СтрокиВДоке.Количество() > 0 Тогда
				//		СтрокаВДоке = СтрокиВДоке[0];
				//	Иначе
				//		Если ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество()<>0 Тогда
				СтрокаВДоке = ДокОбъект.Товары.Добавить();
				СтрокаВДоке.Номенклатура = Номенклатура;
				СтрокаВДоке.Характеристика = Характеристика;
				СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
				СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
				//Иначе
				//	Продолжить;	
				//КонецЕсли; 
				//КонецЕсли;	
			КонецЕсли;	
			СтрокаВДоке.Количество = ?(МасНомСтр.Найти(СтрокаВДоке.НомерСтроки)=Неопределено И ФлНачало,0,СтрокаВДоке.Количество) + СтрокаТаб.Количество;
			МасНомСтр.Добавить(СтрокаВДоке.НомерСтроки);
		КонецЦикла;
		Если МасНомСтр.Количество()>0  Тогда
			Для Каждого СтрокаТаб Из ДокОбъект.Товары Цикл
				Если МасНомСтр.Найти(СтрокаТаб.НомерСтроки)=Неопределено  И ФлНачало Тогда
					СтрокаТаб.Количество = 0;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Нет товаров для записи в задание инвентаризации";
			СтруктураВозврат.Результат = Ложь;
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
		
		
		
		Если СтруктураПараметры.Свойство("ТЗКоробки") Тогда
			ТЗКоробки=СтруктураПараметры.ТЗКоробки.Получить();
			
			Для каждого Стр Из ТЗКоробки Цикл
				Мен=РегистрыСведений.МП_ОтсканированнаяВесоваяНоменклатура.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Мен,Стр);
				Идентификатор = Новый УникальныйИдентификатор(Стр.НоменклатураИД);
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				Мен.Номенклатура=Номенклатура;
				Мен.Документ=Док;
				Мен.ДатаНачалаРаботыПоДокументу=СтруктураПараметры.ДатаНачалаРаботыПоДокументу;
				Если ТЗКоробки.Колонки.Найти("НомерПопытки")<>Неопределено Тогда
					Мен.НомерПопытки=Стр.НомерПопытки;
				КонецЕсли; 
				Если ТЗКоробки.Колонки.Найти("ДатаНачалаРаботыПоДокументу")<>Неопределено Тогда
					Мен.ДатаНачалаРаботыПоДокументу=Стр.ДатаНачалаРаботыПоДокументу;
				КонецЕсли;
				
				Мен.Записать();
			КонецЦикла; 
		КонецЕсли; 	//
		
		ФлНужноПроведение=Ложь;
		Для каждого СтрокаТаб Из ТоварыВДокументеИсх Цикл
			
			СтрокиВДоке = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства,Количество", 
			СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика, СтрокаТаб.ДатаПроизводства, СтрокаТаб.Количество));
			Если СтрокиВДоке.Количество()=0 Тогда
				ФлНужноПроведение=Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если ФлНужноПроведение=Ложь Тогда
			Для каждого СтрокаТаб Из ДокОбъект.Товары Цикл
				
				СтрокиВДоке = ТоварыВДокументеИсх.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства,Количество", 
				(СтрокаТаб.Номенклатура), (СтрокаТаб.Характеристика), СтрокаТаб.ДатаПроизводства, СтрокаТаб.Количество));
				Если СтрокиВДоке.Количество()=0 Тогда
					ФлНужноПроведение=Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			
		КонецЕсли; 
		
		
		Если ФлНужноПроведение Тогда
			
			Если НЕ ДокОбъект.ПроверитьЗаполнение() Тогда
				Мас=ПолучитьСообщенияПользователю();
				СтруктураВозврат = Новый Структура("Результат, ОписаниеОшибок", Ложь, "Не удалось провести по причине -");
				Для каждого Эл Из Мас Цикл
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ Эл.Текст;
				КонецЦикла; 			
				
				//
				Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
			КонецЕсли; 
			
			
			
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			ДокОбъект.ОбменДанными.Загрузка=Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
		
		
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		СтруктураВозврат.Результат = Ложь;
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ВведенМастерКод(МастерКод)
	
	Возврат Константы.МастерКодДляМП.Получить() <> МастерКод;
	
КонецФункции

Функция ПолучитьДанныеПоПаллете(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКодПаллеты = СтруктураПараметры.ШтрихКод;
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	СтрДанные = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКодПаллеты);
	Если Лев(ШтрихКодПаллеты,2)="85" Тогда
		Если НЕ ЗначениеЗаполнено(СтрДанные.Объект)
			ИЛИ ТипЗнч(СтрДанные.Объект) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "По штрих-коду не найден паллета";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
		
		
		
		//+++АК BELN 2018.08.07 ИП-00019223
		Если СтруктураПараметры.Свойство("СтарыйИД") Тогда
			ЭлСпр=Справочники.СоставПаллеты.НайтиПоРеквизиту("СтарыйИД",СтрДанные.Объект.ИД);
			Если НЕ ЗначениеЗаполнено(ЭлСпр)
				ИЛИ ТипЗнч(ЭлСпр) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "Не найдена паллета";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли;
			Объект=ЭлСпр;
			
		Иначе	
			Объект=СтрДанные.Объект;
		КонецЕсли; 
		
		//---АК BELN 2018.08.07 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставПаллеты.Ссылка,
		|	СоставПаллеты.ИД,
		|	СоставПаллеты.РасходныйОрдер,
		|	ВЫРАЗИТЬ(СоставПаллеты.РасходныйОрдер КАК Документ.РасходныйОрдерСклад).Получатель КАК РасходныйОрдерПолучатель,
		|	ВЫБОР
		|		КОГДА СоставПаллеты.РасходныйОрдер ССЫЛКА Документ.РасходныйОрдерСклад
		|			ТОГДА ВЫРАЗИТЬ(СоставПаллеты.РасходныйОрдер КАК Документ.РасходныйОрдерСклад).Склад.Владелец
		|		КОГДА СоставПаллеты.РасходныйОрдер ССЫЛКА Документ.ПриходныйОрдерСклад
		|			ТОГДА ВЫРАЗИТЬ(СоставПаллеты.РасходныйОрдер КАК Документ.ПриходныйОрдерСклад).Склад.Владелец
		|	КОНЕЦ КАК СкладВладелец,
		|	ВЫБОР
		|		КОГДА СоставПаллеты.РасходныйОрдер ССЫЛКА Документ.РасходныйОрдерСклад
		|			ТОГДА ВЫРАЗИТЬ(СоставПаллеты.РасходныйОрдер КАК Документ.РасходныйОрдерСклад).КоличествоПаллет
		|		КОГДА СоставПаллеты.РасходныйОрдер ССЫЛКА Документ.ПриходныйОрдерСклад
		|			ТОГДА 0
		|	КОНЕЦ КАК КоличествоПаллет
		|ИЗ
		|	Справочник.СоставПаллеты КАК СоставПаллеты
		|ГДЕ
		|	СоставПаллеты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		КоличествоПаллет=0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектРасходныйОрдер=ВыборкаДетальныеЗаписи.РасходныйОрдер;
			Получатель=ВыборкаДетальныеЗаписи.РасходныйОрдерПолучатель;
			ИД=ВыборкаДетальныеЗаписи.ИД;
			СкладВладелец=ВыборкаДетальныеЗаписи.СкладВладелец;
			КоличествоПаллет=ВыборкаДетальныеЗаписи.КоличествоПаллет;
		КонецЦикла;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставПаллеты.Ссылка
		|ИЗ
		|	Справочник.СоставПаллеты КАК СоставПаллеты
		|ГДЕ
		|	СоставПаллеты.ПометкаУдаления = ЛОЖЬ
		|	И СоставПаллеты.СтарыйИД = &СтарыйИД";
		
		Запрос.УстановитьПараметр("СтарыйИД", ИД);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Паллета неактуальна";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			
		КонецЕсли;
		Кладовщик="";
		Если СтруктураПараметры.Свойство("Кладовщик") Тогда
			Идентификатор = Новый УникальныйИдентификатор(СтруктураПараметры.Кладовщик);
			Кладовщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);
		КонецЕсли; 	//
		СтруктураВозврат.Вставить("ФИОКладовщика",Строка(Кладовщик));
		
		СтруктураВозврат.Вставить("ИД", (ИД));
		СтруктураВозврат.Вставить("Штрихкод", (ШтрихКодПаллеты));
		СтруктураВозврат.Вставить("КоличествоПаллет", (КоличествоПаллет));
		СтруктураВозврат.Вставить("Паллета", Строка(Объект.УникальныйИдентификатор()));
		СтруктураВозврат.Вставить("ПредставлениеДокумента", Строка(ОбъектРасходныйОрдер));
		
		Если (ТипЗнч(ОбъектРасходныйОрдер)=Тип("ДокументСсылка.РасходныйОрдерСклад") ИЛИ ТипЗнч(ОбъектРасходныйОрдер)=Тип("ДокументСсылка.ПриходныйОрдерСклад")) И ЗначениеЗаполнено(ОбъектРасходныйОрдер) Тогда
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Документ", ОбъектРасходныйОрдер);
			Запрос.Текст = "ВЫБРАТЬ
			               |	МаршрутныйЛистРасходныеОрдера.Документ,
			               |	МАКСИМУМ(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут) КАК Маршрут
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
			               |ГДЕ
			               |	МаршрутныйЛистРасходныеОрдера.Документ = &Документ
			               |	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	МаршрутныйЛистРасходныеОрдера.Документ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	вт.Документ,
			               |	вт.Маршрут,
			               |	АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних КАК АК_СоответствиеВоротМаршрутамСрезПоследних
			               |		ПО вт.Маршрут.Наименование = АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута
			               |			И вт.Маршрут.СтруктурноеПодразделение = АК_СоответствиеВоротМаршрутамСрезПоследних.СтруктурноеПодразделение";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураВозврат.Вставить("Маршрут", Строка(Выборка.Маршрут));
				СтруктураВозврат.Вставить("Ворота", ?(ЗначениеЗаполнено(Выборка.Ворота),Строка(Выборка.Ворота),""));
			Иначе
				СтруктураВозврат.Вставить("Маршрут", "");
				СтруктураВозврат.Вставить("Ворота", "");
			КонецЕсли;	
			СтруктураВозврат.Вставить("ПолучательНаименование", Строка(Получатель));
			СтруктураВозврат.Вставить("ШКДокумента", ОбщегоНазначенияКлиентСервер.ПолучитьШтрихкодПоУИНу(ОбъектРасходныйОрдер));
		Иначе	
			СтруктураВозврат.Вставить("Маршрут", "");
			СтруктураВозврат.Вставить("ПолучательНаименование", "");
			СтруктураВозврат.Вставить("ШКДокумента", "");
			СтруктураВозврат.Вставить("Ворота", "");
		КонецЕсли; 
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставПаллетыСостав.Номенклатура,
		|	СоставПаллетыСостав.Характеристика,
		|	СоставПаллетыСостав.ДатаПроизводства,
		|	СУММА(СоставПаллетыСостав.Количество) КАК Количество
		|ПОМЕСТИТЬ втНом
		|ИЗ
		|	Справочник.СоставПаллеты.Состав КАК СоставПаллетыСостав
		|ГДЕ
		|	СоставПаллетыСостав.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставПаллетыСостав.Номенклатура,
		|	СоставПаллетыСостав.Характеристика,
		|	СоставПаллетыСостав.ДатаПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНом.Номенклатура КАК НоменклатураСсылка,
		|	втНом.Характеристика КАК ХарактеристикаСсылка,
		|	втНом.ДатаПроизводства,
		|	втНом.Количество,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК ЧИСЛО(15, 1))) = 0
		|			ТОГДА 0
		|		ИНАЧЕ втНом.Количество / (ВЫРАЗИТЬ(ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК ЧИСЛО(15, 1)))
		|	КОНЕЦ КАК КолвоКоробок
		|ИЗ
		|	втНом КАК втНом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО втНом.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураСсылка,
		|	ХарактеристикаСсылка";
		
		Запрос.УстановитьПараметр("СтрукЕд",?(ЗначениеЗаполнено(ОбъектРасходныйОрдер),СкладВладелец,Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231")));
		Запрос.УстановитьПараметр("Ссылка",Объект);
		
		Результат = Запрос.Выполнить();
		
		ТЗРез = Результат.Выгрузить();
		ТЗРез.Колонки.Добавить("Номенклатура");
		ТЗРез.Колонки.Добавить("Характеристика");
		Для Каждого СтрокаТаб Из ТЗРез Цикл
			СтрокаТаб.Номенклатура = Строка(СтрокаТаб.НоменклатураСсылка.УникальныйИдентификатор());
			СтрокаТаб.Характеристика = Строка(СтрокаТаб.ХарактеристикаСсылка.УникальныйИдентификатор());
		КонецЦикла;
		ТЗРез.Колонки.Удалить("НоменклатураСсылка");
		ТЗРез.Колонки.Удалить("ХарактеристикаСсылка");
		
		СтруктураВозврат.Вставить("Состав", ТЗРез);
	ИначеЕсли Лев(ШтрихКодПаллеты,2)="81" Тогда
		Если НЕ ЗначениеЗаполнено(СтрДанные.Объект)
			ИЛИ ТипЗнч(СтрДанные.Объект) <> Тип("СправочникСсылка.Склады") Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "По штрих-коду не найден склад";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
		СтруктураВозврат.Вставить("Наименование", Строка(СтрДанные.Объект.Владелец.Наименование)+Символы.ПС+Строка(СтрДанные.Объект.Наименование));
		СтруктураВозврат.Вставить("Код", (СтрДанные.Объект.Код));
	ИначеЕсли Лев(ШтрихКодПаллеты,2)="82" Тогда
		Если НЕ ЗначениеЗаполнено(СтрДанные.Объект)
			ИЛИ ТипЗнч(СтрДанные.Объект) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "По штрих-коду не найден магазин";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
		СтруктураВозврат.Вставить("Наименование", Строка(СтрДанные.Объект.Наименование));
		СтруктураВозврат.Вставить("Код", (СтрДанные.Объект.Код));
	КонецЕсли; 
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ПолучитьДанныеПоКоробке(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	ШтрихКод = СтруктураПараметры.ШтрихКод;
	СтрДанные = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);
	
	Возврат Новый ХранилищеЗначения(СтрДанные);
	
КонецФункции

Функция СформироватьЭтикеткуКомандыПринтера(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	//СтрокаВозвратКоманды = "CODEPAGE 1251";
	СтрокаВозвратКоманды = "";
	СтруктураЭтикетки = ДанныеМобильногоПриложения.Получить();
	
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЭтикетки.НоменклатураУин));
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЭтикетки.ХарактеристикаУин));
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	|	&Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	НумераторШтрихКодовКоробок.Нумератор,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
	|		ПО ВТ_Товары.Номенклатура = НумераторШтрихКодовКоробок.Номенклатура
	|			И ВТ_Товары.Характеристика = НумераторШтрихКодовКоробок.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВТ_Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))";
	
	ТабКеш = Запрос.Выполнить().Выгрузить();
	
	
	СтрокиКеш = ТабКеш.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
	Если СтрокиКеш.Количество() = 0 Тогда
	Иначе
		УмножатьНаТысячу = ?(НРег(Номенклатура.БазоваяЕдиницаИзмерения.Наименование) = "шт", Ложь, Истина);
		
		Наимен = СтрЗаменить(Номенклатура.НаименованиеПолное, """", "");
		СтрокаВозвратКоманды = СтрокаВозвратКоманды
		+ "TEXT 400,330,""3"",180,1,1,""" + Сред(Наимен, 1, 22) + """";
		
		Если СтрДлина(Наимен) > 22 Тогда
			СтрокаВозвратКоманды = СтрокаВозвратКоманды + Символы.ПС
			+ "TEXT 400,305,""3"",180,1,1,""" + Сред(Наимен, 23) + """";
		КонецЕсли;
		
		СтрокаХар = СтрЗаменить(СтрокиКеш[0].Значение, """", "");
		
		СтрокаВозвратКоманды = СтрокаВозвратКоманды + Символы.ПС
		+ "TEXT 400,280,""2"",180,1,1,""" + Сред(СтрокаХар, 1, 40) + """";
		
		СтрокаВозвратКоманды = СтрокаВозвратКоманды + Символы.ПС
		+ "TEXT 400,255,""2"",180,1,1,""" + ?(ЗначениеЗаполнено(СтруктураЭтикетки.ДатаПроизводства), "Дата произв. " + Формат(СтруктураЭтикетки.ДатаПроизводства, "ДФ=dd.MM.yy"), "00.00.00") + """";
		
		СтрокаВозвратКоманды = СтрокаВозвратКоманды + Символы.ПС
		+ "TEXT 400,230,""2"",180,1,1,""" + ?(ЗначениеЗаполнено(СтруктураЭтикетки.КоличествоВУпаковке), "Кол-во в кор. " + Формат(СтруктураЭтикетки.КоличествоВУпаковке, ?(УмножатьНаТысячу, "ЧДЦ=2; ЧГ=0", "ЧДЦ=0; ЧГ=0")), "") + """";
		
		ШтрихКод = Прав("0000" + Формат(СтрокиКеш[0].Нумератор, "ЧГ=0"), 4) + Прав("000000" + Формат(СтруктураЭтикетки.КоличествоВУпаковке * ?(УмножатьНаТысячу, 1000, 1), "ЧГ=0"), 6) + Формат(СтруктураЭтикетки.ДатаПроизводства, "ДФ=MMdd; ДП=0000");
		
		СтрокаВозвратКоманды = СтрокаВозвратКоманды + Символы.ПС
		+ "BARCODE 407,179,""128"",102,0,180,3,6,""" + ШтрихКод + """";
		
		СтрокаВозвратКоманды = СтрокаВозвратКоманды + Символы.ПС
		+ "TEXT 344,72,""2"",180,1,1,""" + ШтрихКод + """";
	КонецЕсли;
	Возврат СтрокаВозвратКоманды;
	
КонецФункции

Функция ПолучитьПричиныСписанияДляТипаОперации(КодОперации)
	
	МассивВозврат = Новый Массив();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль = "SELECT [id_reason]
	|FROM [SMS_REPL].[dbo].[Reason_Operation]
	|Where code_operation = " + ВнешниеДанные.ФорматПоля(КодОперации);
	
	Попытка	
		Выборка = ADOСоединение.Execute(ЗапросСкуль);
		
		Выборка.MoveFirst();
		Пока НЕ Выборка.EOF() Цикл
			МассивВозврат.Добавить(Выборка.Fields("id_reason").Value);
			Выборка.MoveNext();
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(МассивВозврат);
	
КонецФункции

Функция ПолучитьФотографиюИзТЧ(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменМобильноеПриложениеПереопределяемый.ПолучитьФотографиюИзТЧ(ДанныеМобильногоПриложения);
	
КонецФункции

Функция ТоварСоответствуетСкладу(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанные = ДанныеМобильногоПриложения.Получить();
	Если ЗначениеЗаполнено(СтруктураДанные.СкладУин) Тогда
		Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.СкладУин));
	Иначе
		Склад = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанные.НоменклатураУин) Тогда
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.НоменклатураУин));
	Иначе
		Номенклатура = Неопределено;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Склад)
		ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.Номенклатура = &Номенклатура
	|	И ДоступностьТоваровНаСкладах.Склад = &Склад";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьОтчетКладовщикаНаОтгрузке(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанные = ДанныеМобильногоПриложения.Получить();
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	СоотСборщиков=Новый Соответствие;	
	//Результат.Очистить();
	ТД=Отчеты.ОтчетКладовщикаНаОтгрузке.СформироватьОтчет(СтруктураДанные.ДатаНачала,СтруктураДанные.ДатаОкончания,
	Справочники.СтруктурныеЕдиницы.НайтиПоКоду(СтруктураДанные.КодСклада),СтруктураДанные.ОтборСтатус,СоотСборщиков,СтруктураДанные.НаименованиеСклада);
	СтруктураВозврат.Вставить("ТД",ТД);
	СтруктураВозврат.Вставить("СоотСборщиков",СоотСборщиков);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).id_TT КАК id_TT,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСкладТовары.Ссылка.Склад) КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСкладТовары.Ссылка) КАК Расходник,
	|	РасходныйОрдерСкладТовары.Ссылка.СборкаТерминаломЗакончена КАК СборкаТерминаломЗакончена,
	|	РасходныйОрдерСкладТовары.Номенклатура КАК НоменклатураСсылка,
	|	РасходныйОрдерСкладТовары.Характеристика КАК ХарактеристикаСсылка,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСкладТовары.ЗаданиеНаРазборку) КАК ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.КоличествоПаллет КоличествоПаллет
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	|	И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &Владелец
	|	И РасходныйОрдерСкладТовары.Ссылка.Склад.Наименование = &Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы),
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто,
	|	РасходныйОрдерСкладТовары.Ссылка.СборкаТерминаломЗакончена,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).id_TT,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСкладТовары.Ссылка.Склад),
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСкладТовары.ЗаданиеНаРазборку)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктурнаяЕдиница,
	|	Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика";
	Запрос.УстановитьПараметр("Дата1", НачалоДня(СтруктураДанные.ДатаНачала));
	Запрос.УстановитьПараметр("Дата2", КонецДня(СтруктураДанные.ДатаОкончания));
	Запрос.УстановитьПараметр("Владелец", Справочники.СтруктурныеЕдиницы.НайтиПоКоду(СтруктураДанные.КодСклада));
	Запрос.УстановитьПараметр("Наименование", СтруктураДанные.НаименованиеСклада);
	
	
	ТабТовары=Запрос.Выполнить().Выгрузить();
	ТабТовары.Колонки.Добавить("Номенклатура");
	ТабТовары.Колонки.Добавить("Характеристика");
	ТабТовары.Колонки.Добавить("ШКТТ");
	ТабТовары.Колонки.Добавить("Магазин");
	ТабТовары.Колонки.Добавить("ШКРасходника");
	
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		СтрокаТаб.Номенклатура = Строка(СтрокаТаб.НоменклатураСсылка.УникальныйИдентификатор());
		СтрокаТаб.Характеристика = Строка(СтрокаТаб.ХарактеристикаСсылка.УникальныйИдентификатор());
		ШтрихКод = "820" + Прав("000000000000" + Формат(СтрокаТаб.id_TT, "ЧГ=0"), 12);
		СтрокаТаб.ШКТТ = ШтрихКод;
		СтрокаТаб.Магазин = Строка(СтрокаТаб.СтруктурнаяЕдиница);
		СтрокаТаб.ШКРасходника=ОбщегоНазначенияКлиентСервер.ПолучитьШтрихкодПоУИНу(СтрокаТаб.Ссылка);
		
	КонецЦикла;
	ТабТовары.Колонки.Удалить("НоменклатураСсылка");
	ТабТовары.Колонки.Удалить("ХарактеристикаСсылка");
	ТабТовары.Колонки.Удалить("СтруктурнаяЕдиница");
	ТабТовары.Колонки.Удалить("Ссылка");
	СтруктураВозврат.Вставить("Задания",ТабТовары);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции

Функция ПолучитьОтчетКладовщикаНаДебаркадере(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанные = ДанныеМобильногоПриложения.Получить();
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	КодОрг="";
	Если СтруктураДанные.Свойство("Организация") Тогда
		КодОрг=СтруктураДанные.Организация;
	КонецЕсли;
	//++ХЖК 15.08.2018 ИП-00019563
	СписокВорот = "";
	Если СтруктураДанные.Свойство("СписокВорот") Тогда 
		СписокВорот = СтруктураДанные.СписокВорот;
	КонецЕсли;
	//++ХЖК 15.08.2018 ИП-00019563
	ТД=Отчеты.ОтчетКладовщикаНаДебаркадере.СформироватьОтчет(
	СтруктураДанные.ДатаНачала,СтруктураДанные.Датаокончания,Справочники.СтруктурныеЕдиницы.НайтиПоКоду(СтруктураДанные.КодСклада),СтруктураДанные.ОтборСтатус,КодОрг, СписокВорот);
	СтруктураВозврат.Вставить("ТД",ТД);
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции

Функция СформироватьОтчетПоПаллетамПоМагазину(ДанныеМобильногоПриложения)
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанные = ДанныеМобильногоПриложения.Получить();
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	ДатаНачала=СтруктураДанные.ДатаНачала;
	КонецПериода=СтруктураДанные.КонецПериода;
	СкладКод=СтруктураДанные.СкладКод;
	Магазин=СтруктураДанные.Магазин;
	Если СтруктураДанные.Свойство("Отгрузка") Тогда
		Отчет=Отчеты.ОтчетПоПаллетамОтгрузка.Создать();
	Иначе
		Если СтруктураДанные.Свойство("Забытые")  Тогда
			Отчет=Отчеты.ОтчетПоЗабытымПаллетам.Создать();
		Иначе	
			Отчет=Отчеты.ОтчетПоПаллетам.Создать();
		КонецЕсли; 
	КонецЕсли; 
	
	ДатаНач=Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	ДатаНач.Значение=(ДатаНачала);
	ДатаНач.Использование=истина;
	
	ДатаКон=Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	ДатаКон.Значение=(КонецДня(КонецПериода));
	ДатаКон.Использование=истина;
	
	ПарамСклад=Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Склад");
	ПарамСклад.Значение=(Справочники.СтруктурныеЕдиницы.НайтиПоКоду(СкладКод));
	ПарамСклад.Использование=истина;
	
	ПарамМаг=Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТТ");
	ПарамМаг.Значение=(Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Магазин));
	ПарамМаг.Использование=истина;	
	
	СхемаКомпоновкиДанных=Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//Из схемы возьмем настройки по умолчанию
	
	//А как здесь передать мои только что установленные настройки?
	Настройки=Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки=Новый ДанныеРасшифровкиКомпоновкиДанных;
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);
	
	Результат=Новый ТабличныйДокумент;
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	СтруктураВозврат.Вставить("ТД",Результат);
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции

Функция ОтметитьАутсорсера(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанные = ДанныеМобильногоПриложения.Получить();
	КодДоступа=СтруктураДанные.КодДоступа;
	Если СтруктураДанные.Свойство("Магазин") Тогда
		Магазин=СтруктураДанные.Магазин;
	КонецЕсли; 
	Ссылка=Неопределено;
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	Эл=Справочники.ПерсоналККМ.НайтиПоРеквизиту("Пароль",КодДоступа);
	
	Если НЕ ЗначениеЗаполнено(Эл) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден сотрудник";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	КодЭл=Эл.Код;
	Сотрудник=Справочники.СотрудникиАутсорсинг.НайтиПоРеквизиту("ИД",Число(КодЭл));
	//Сообщить(Сотрудник);
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден сотрудник";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Магазин") Тогда
		Узел=ПланыОбмена.МобильноеПриложение.НайтиПоКоду(Магазин);
		Ссылка=Узел.Магазин;
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Ссылка = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Магазин));
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Ссылка)  Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "По штрих-коду не найден магазин";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураДанные.Свойство("Магазин") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ТабельРаботыСотрудниковАутсорсингСрезПоследних.Период) КАК Период,
		|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.ТорговаяТочка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ТабельРаботыСотрудниковАутсорсингСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.ТорговаяТочка,
		|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.Контрагент,
		|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ТабельРаботыСотрудниковАутсорсингСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО ТабельРаботыСотрудниковАутсорсингСрезПоследних.Период = вт.Период
		|			И ТабельРаботыСотрудниковАутсорсингСрезПоследних.ТорговаяТочка = вт.ТорговаяТочка";
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Этот сотрудник отсутствует в табеле";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли; 
	КонецЕсли;
	РегСв 				= РегистрыСведений.ЖурналУчетаСотрудниковАутсорсинг;
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыСотрудников.ГруппаСотрудников,
	|	КонтрагентыСотрудников.Контрагент
	|ИЗ
	|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(, ) КАК КонтрагентыСотрудников";
	ТабКонтрагентовСотрудников = ЗапросКонтрагенты.Выполнить().Выгрузить();
	ТабКонтрагентовСотрудников.Индексы.Добавить("ГруппаСотрудников");
	
	Попытка
		Если Не СтруктураДанные.Свойство("Магазин") Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаКонтр = ТабКонтрагентовСотрудников.Найти(Сотрудник.ГруппаСотрудников, "ГруппаСотрудников");
				МенеджерЗаписи = РегСв.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ДатаОтметки 	= ТекущаяДата();
				МенеджерЗаписи.Сотрудник 	= Сотрудник;
				МенеджерЗаписи.ЛистУчета 	= 	Документы.ЛистУчета.ПустаяСсылка();
				МенеджерЗаписи.Прочитать();
				Если НЕ МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.ДатаОтметки 		= ТекущаяДата();             
					МенеджерЗаписи.Сотрудник 		= Сотрудник;
					МенеджерЗаписи.ЛистУчета 		= Документы.ЛистУчета.ПустаяСсылка();
					МенеджерЗаписи.ТорговаяТочка 	= ВыборкаДетальныеЗаписи.ТорговаяТочка;
					Если НЕ СтрокаКонтр = Неопределено Тогда
						МенеджерЗаписи.Контрагент 	= СтрокаКонтр.Контрагент;
					КонецЕсли;
					МенеджерЗаписи.Должность 		= Сотрудник.Должность;
					//Сообщить(МенеджерЗаписи.ТорговаяТочка);
					//Сообщить(МенеджерЗаписи.Должность);
					//Сообщить(МенеджерЗаписи.Контрагент);
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаКонтр = ТабКонтрагентовСотрудников.Найти(Сотрудник.ГруппаСотрудников, "ГруппаСотрудников");
			МенеджерЗаписи = РегСв.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДатаОтметки 	= ТекущаяДата();
			МенеджерЗаписи.Сотрудник 	= Сотрудник;
			МенеджерЗаписи.ЛистУчета 	= 	Документы.ЛистУчета.ПустаяСсылка();
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ДатаОтметки 		= ТекущаяДата();             
				МенеджерЗаписи.Сотрудник 		= Сотрудник;
				МенеджерЗаписи.ЛистУчета 		= Документы.ЛистУчета.ПустаяСсылка();
				МенеджерЗаписи.ТорговаяТочка 	= Ссылка;
				Если НЕ СтрокаКонтр = Неопределено Тогда
					МенеджерЗаписи.Контрагент 	= СтрокаКонтр.Контрагент;
				КонецЕсли;
				МенеджерЗаписи.Должность 		= Сотрудник.Должность;
				//Сообщить(МенеджерЗаписи.ТорговаяТочка);
				//Сообщить(МенеджерЗаписи.Должность);
				//Сообщить(МенеджерЗаписи.Контрагент);
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	Исключение
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ ОписаниеОшибки();
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецПопытки;	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции

Функция ПринятКОтгрузкеКонвертРеклама(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	
	Если СтруктураПараметры.Свойство("ШКМаршЛист") Тогда
		Ссылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураПараметры.ШКМаршЛист);
		Если НЕ ЗначениеЗаполнено(Ссылка)  Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "По штрих-коду не найден маршрутный лист";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
		
	КонецЕсли; 
	Если СтруктураПараметры.Свойство("ШКПаллета") Тогда
		ШтрихКодПаллеты = СтруктураПараметры.ШКПаллета;
		СтрДанные = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКодПаллеты);
		
		Если НЕ ЗначениеЗаполнено(СтрДанные.Объект)
			ИЛИ ТипЗнч(СтрДанные.Объект) <> Тип("СправочникСсылка.СоставПаллеты") Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "По штрих-коду не найден паллета";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Документ", СтрДанные.Объект.РасходныйОрдер);
		Запрос.Текст = "ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МАКСИМУМ(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут) КАК Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И МаршрутныйЛистРасходныеОрдера.Документ = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Ссылка=Неопределено;
		Если Выборка.Следующий() Тогда
			Ссылка=(Выборка.Ссылка);//Маршрутный лист
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Ссылка)  Тогда
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "По штрих-коду не найден маршрутный лист";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
		Паллета=СтрДанные.Объект;
	КонецЕсли; 
	
	Если СтруктураПараметры.Свойство("Штрихкод")  Тогда
		Расходник= ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураПараметры.Штрихкод);
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеКонвертовРеклама.Ордер
		|ИЗ
		|	РегистрСведений.ДвижениеКонвертовРеклама КАК ДвижениеКонвертовРеклама
		|ГДЕ
		|	ДвижениеКонвертовРеклама.Паллет = &Паллет";
		
		Запрос.УстановитьПараметр("Паллет", Паллета);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Расходник=ВыборкаДетальныеЗаписи.Ордер;
		Иначе
			СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
			+ "Расходный ордер не привязан к паллете кладовщиком";
			Возврат Новый ХранилищеЗначения(СтруктураВозврат);
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Расходник)  Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "По штрих-коду не найден расходник";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	Если Не ТипЗнч(Расходник.Основание) = Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы") Тогда
		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
		+ "Этот расходник не связан с отгрузкой рекламных материалов";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	Если СтруктураПараметры.Свойство("ШКМагазин") Тогда //водитель
		Струк=ВнешниеДанные.СчитатьДанныеПоШтрихКоду(СтруктураПараметры.ШКМагазин);
		
		ЭтоКладовщик=Ложь;
		ЭтоТТ=Ложь;
		ЭтоВодитель=Истина;
		Лицо=Справочники.Водители_ТранспортнаяСистема.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Лицо));
		
		
		Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
		Мен.Период=ТекущаяДата();
		Мен.Заявка=Расходник.Основание;
		Мен.Ордер=Расходник;
		Мен.ТТ=Струк.Объект;
		Мен.ЗаявкаНаНовыйМагазин=Расходник.Основание.ЗаявкаНаНовыйМагазин;
		Мен.ТипЗаявки=Расходник.Основание.ТипЗаявки;
		Мен.ТипРозничнойТочки=Струк.Объект.ТипРозничнойТочки;
		Мен.ПогруженоНаПаллет=Истина;
		Мен.ПереданоВСборку=Истина;
		Мен.ОтгруженоВТТ=Истина;
		Мен.ОтгруженоВодителю=Лицо;
		Мен.Записать();
		
		
	Иначе
		Если СтруктураПараметры.Свойство("Розница") Тогда
			ЭтоКладовщик=Истина;
			ЭтоТТ=Истина;
			ЭтоВодитель=Ложь;
			Лицо=Неопределено;
			Узел=ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.Магазин);
			Магазин=Узел.Магазин;
			
			Если НЕ ЗначениеЗаполнено(Магазин)  Тогда
				СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
				+ "По штрих-коду не найден магазин";
				Возврат Новый ХранилищеЗначения(СтруктураВозврат);
			КонецЕсли;
			
			Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
			Мен.Период=ТекущаяДата();
			Мен.Заявка=Расходник.Основание;
			Мен.Ордер=Расходник;
			Мен.ТТ=Магазин;
			Мен.ЗаявкаНаНовыйМагазин=Расходник.Основание.ЗаявкаНаНовыйМагазин;
			Мен.ТипЗаявки=Расходник.Основание.ТипЗаявки;
			Мен.ТипРозничнойТочки=Магазин.ТипРозничнойТочки;
			Мен.ПереданоВСборку=Истина;
			Мен.ПогруженоНаПаллет=Истина;
			Мен.ОтгруженоВТТ=Истина;
			Мен.ПринятТТ=Истина;
			Мен.ОтгруженоВодителю=Лицо;
			Мен.Записать();
			
		КонецЕсли;
		Если (СтруктураПараметры.Свойство("ШКМаршЛист") ИЛИ СтруктураПараметры.Свойство("ШКПаллета")) И СтруктураПараметры.Свойство("Штрихкод") Тогда
			ЭтоКладовщик=Истина;
			ЭтоТТ=Ложь;
			ЭтоВодитель=Ложь;
			//Лицо=Справочники.Водители_ТранспортнаяСистема.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметры.Лицо));
			Лицо=Ссылка.Водитель;
			МасМаг=Новый Массив;
			ТЗТорговыеТочки=Ссылка.ТорговыеТочки.Выгрузить();//ТТ Маршрутного листа паллеты
			Для каждого Стр Из ТЗТорговыеТочки Цикл
				МасМаг.Добавить(Стр.СтруктурнаяЕдиница);
			КонецЦикла; 
			Если Расходник.Основание.ТипЗаявки=ПредопределенноеЗначение("Перечисление.ТипЗаявкиНаРекламныеМатериалы.МассоваяРассылка") Тогда
				
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СтруктурныеЕдиницы.Ссылка,
				|	СтруктурныеЕдиницы.ТипРозничнойТочки
				|ИЗ
				|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
				
				Результат = Запрос.Выполнить();
				НайденМагазин=Ложь;
				ТЗТТ = Результат.Выгрузить();
				ЗаявкаНаНовыйМагазин=Расходник.Основание.ЗаявкаНаНовыйМагазин;
				ТипЗаявки=Расходник.Основание.ТипЗаявки;
				ТЗТорговыеТочки=Расходник.ТорговыеТочки.Выгрузить();
				РасходникОснование=Расходник.Основание;
				Для каждого Стр Из ТЗТорговыеТочки Цикл
					Если МасМаг.Найти(Стр.Магазин)=Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					НайденМагазин=Истина;
					Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
					Мен.Период=ТекущаяДата();
					Мен.Заявка=РасходникОснование;
					Мен.Ордер=Расходник;
					Мен.ТТ=Стр.Магазин;
					Мен.ЗаявкаНаНовыйМагазин=ЗаявкаНаНовыйМагазин;
					Мен.ТипЗаявки=ТипЗаявки;
					Мен.ТипРозничнойТочки=ТЗТТ.НайтиСтроки(Новый Структура("Ссылка",Стр.Магазин))[0].ТипРозничнойТочки;
					Мен.ПереданоВСборку=Истина;
					Мен.ПогруженоНаПаллет=Истина;
					
					Мен.ОтгруженоВодителю=Лицо;
					Если СтруктураПараметры.Свойство("ШКПаллета") Тогда
						Мен.Паллет=Паллета;
					КонецЕсли; 
					Мен.Записать();
				КонецЦикла; 
				Если Не НайденМагазин Тогда
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ "Паллета пойдет по маршруту, в котором отсутствуют магазины, указанные в заявке на рекламу";
					Возврат Новый ХранилищеЗначения(СтруктураВозврат);
					
				КонецЕсли; 
			Иначе
				Если МасМаг.Найти(Расходник.Получатель)=Неопределено Тогда
					СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
					+ "Паллета пойдет по маршруту маршрутного листа, в котором отсутствуют магазины, указанные в заявке на рекламу";
					Возврат Новый ХранилищеЗначения(СтруктураВозврат);
					
				КонецЕсли; 
				
				Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
				Мен.Период=ТекущаяДата();
				Мен.Заявка=Расходник.Основание;
				Мен.Ордер=Расходник;
				Мен.ТТ=Расходник.Основание.ТорговаяТочка;
				Мен.ЗаявкаНаНовыйМагазин=Расходник.Основание.ЗаявкаНаНовыйМагазин;
				Мен.ТипЗаявки=Расходник.Основание.ТипЗаявки;
				Мен.ТипРозничнойТочки=Расходник.Основание.ТорговаяТочка.ТипРозничнойТочки;
				Мен.ПереданоВСборку=Истина;
				Мен.ПогруженоНаПаллет=Истина;
				Мен.ОтгруженоВодителю=Лицо;
				Если СтруктураПараметры.Свойство("ШКПаллета") Тогда
					Мен.Паллет=Паллета;
				КонецЕсли; 
				Мен.Записать();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ПолучитьДанныеДляЗаявкиНаРемонт(ДанныеМобильногоПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "");
	
	//Если СтруктураПараметры.Свойство("ШКМаршЛист") Тогда
	//	Ссылка = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураПараметры.ШКМаршЛист);
	//	Если НЕ ЗначениеЗаполнено(Ссылка)  Тогда
	//		СтруктураВозврат.ОписаниеОшибок = СтруктураВозврат.ОписаниеОшибок + ?(ЗначениеЗаполнено(СтруктураВозврат.ОписаниеОшибок), Символы.ПС, "")
	//		+ "По штрих-коду не найден маршрутный лист";
	//		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	//	КонецЕсли;
	
	//КонецЕсли; 
	Узел=ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтруктураПараметры.Магазин);
	Магазин=Узел.Магазин;
	
	
	МасФЛ=ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоНаименованию("Управляющий по рознице"),
	Null,Null,Магазин,Null,ТекущаяДата(),Null,Истина);
	Запрос=Новый Запрос;	
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И (КонтактнаяИнформация.Тип = &Тип
	|			ИЛИ КонтактнаяИнформация.Тип = &ТипДоп)";
	Запрос.УстановитьПараметр("Объект", МасФЛ);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Результат = Запрос.Выполнить();
	
	Контакты=Новый ТаблицаЗначений;
	Контакты.Колонки.Добавить("ВидКонтакта", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	Контакты.Колонки.Добавить("Данные", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(999));
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	СтрКонтакт="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрКонтакт=СтрКонтакт+ВыборкаДетальныеЗаписи.Представление+",";
	КонецЦикла;
	СтрКонтакт=Лев(СтрКонтакт,СтрДлина(СтрКонтакт)-1);
	НовСтр=Контакты.Добавить();
	НовСтр.ВидКонтакта="Управляющий "+?(МасФЛ.Количество()=0,"",Строка(МасФЛ[0]));
	НовСтр.Данные=СтрКонтакт;
	
	
	
	
	
	
	
	МасФЛ=ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего,
	Null,Null,Магазин,Null,ТекущаяДата(),Null,Истина);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	МасФЛСторонняяРозница =ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы,
	Null,Null,Магазин,Null,ТекущаяДата(),Null,Истина);
	Для Каждого ФЛ из МасФЛСторонняяРозница Цикл
		Если МасФЛ.Найти(ФЛ) = неопределено Тогда
			МасФЛ.Добавить(ФЛ);
		КонецЕсли;
	КонецЦикла;
	//--- AK suvv
	
	Запрос.УстановитьПараметр("Объект", МасФЛ);
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	СтрКонтакт="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрКонтакт=СтрКонтакт+ВыборкаДетальныеЗаписи.Представление+",";
	КонецЦикла;
	СтрКонтакт=Лев(СтрКонтакт,СтрДлина(СтрКонтакт)-1);
	НовСтр=Контакты.Добавить();
	НовСтр.ВидКонтакта="Помощник "+?(МасФЛ.Количество()=0,"",Строка(МасФЛ[0]));
	НовСтр.Данные=СтрКонтакт;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Различные
	|	ТабельРаботыПродавцов.Сотрудник
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.ТорговаяТочка = &ТорговаяТочка
	|	И ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2
	|	И ТабельРаботыПродавцов.СвойствоПродавца = 2";
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТорговаяТочка", Магазин);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	АвторНаименование="";
	АвторИД="";
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		АвторНаименование=Строка(ВыборкаДетальныеЗаписи.Сотрудник);
		АвторИД=Строка(ВыборкаДетальныеЗаписи.Сотрудник.УникальныйИдентификатор());
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Регистратор,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Услуга,
	|	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Стоимость,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ФормаОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаНачала,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ПериодОплаты,
	|	АК_УсловияРегламентныхРаботСрезПоследних.ДоговорКонтрагента,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Статус,
	|	АК_УсловияРегламентныхРаботСрезПоследних.Периодичность
	|ИЗ
	|	РегистрСведений.АК_УсловияРегламентныхРабот.СрезПоследних(
	|			&Дата,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Услуга = &Услуга) КАК АК_УсловияРегламентныхРаботСрезПоследних
	|ГДЕ
	|	АК_УсловияРегламентныхРаботСрезПоследних.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Магазин);
	Запрос.УстановитьПараметр("Услуга", Справочники.Номенклатура.НайтиПоКоду("000615698"));
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ИсполнительКонтрагентНаименование="";
	ИсполнительКонтрагентИД="";
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ИсполнительКонтрагентНаименование=Строка(ВыборкаДетальныеЗаписи.Контрагент);
		ИсполнительКонтрагентИД=Строка(ВыборкаДетальныеЗаписи.Контрагент.УникальныйИдентификатор());
		
		МасФЛ=Новый Массив;
		МасФЛ.Добавить(ВыборкаДетальныеЗаписи.Контрагент);
		Запрос=Новый Запрос;	
		Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И (КонтактнаяИнформация.Тип = &Тип
		|			ИЛИ КонтактнаяИнформация.Тип = &ТипДоп)";
		Запрос.УстановитьПараметр("Объект", МасФЛ);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("ТипДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		СтрКонтакт="";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрКонтакт=СтрКонтакт+ВыборкаДетальныеЗаписи.Представление+",";
		КонецЦикла;
		СтрКонтакт=Лев(СтрКонтакт,СтрДлина(СтрКонтакт)-1);
		НовСтр=Контакты.Добавить();
		НовСтр.ВидКонтакта="Подрядчик "+?(МасФЛ.Количество()=0,"",Строка(МасФЛ[0]));
		НовСтр.Данные=СтрКонтакт;
	КонецЕсли;
	
	
	СтруктураВозврат.Вставить("Контакты",Контакты);	
	СтруктураВозврат.Вставить("АвторИД",АвторИД);	
	СтруктураВозврат.Вставить("АвторНаименование",АвторНаименование);	
	СтруктураВозврат.Вставить("ИсполнительКонтрагентИД",ИсполнительКонтрагентИД);	
	СтруктураВозврат.Вставить("ИсполнительКонтрагентНаименование",ИсполнительКонтрагентНаименование);	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	
КонецФункции

Функция ПолучитьТорговыеТочки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Наименование,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВкусвилл,
	|	СтруктурныеЕдиницы.КоординатыШирота КАК Широта,
	|	СтруктурныеЕдиницы.КоординатыДолгота КАК Долгота
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	//+++АК ILIK 2018.08.08 ИП-00019413
	//|	НЕ СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.ПустаяСсылка))";
	|	НЕ СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))";
	//---АК ILIK
	
	ТаблицаТТ= Запрос.Выполнить().Выгрузить();
	
	Возврат Новый ХранилищеЗначения(ТаблицаТТ, Новый СжатиеДанных(9));	
	
КонецФункции

// +++ АК mirv 29.08.2017 [ИП-00015993]
Функция ОтправитьНаДегустацию(НоменклатураУин, ХарактеристикаУин, ДатаПроизводства, Комментарий) 
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(НоменклатураУин) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураУин));
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ХарактеристикаУин));
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Попытка
			НоваяЗапись = РегистрыСведений.АК_ЗаданияНаДегустациюНочные.СоздатьМенеджерЗаписи();
			НоваяЗапись.Номенклатура = Номенклатура;
			НоваяЗапись.Характеристика = Характеристика;
			НоваяЗапись.ДатаРегистрации = ТекущаяДата();
			НоваяЗапись.ДатаПроизводства = ДатаПроизводства;
			НоваяЗапись.Комментарий = Комментарий;
			
			НоваяЗапись.Записать(Истина);
			Возврат 1;
		Исключение
			Возврат -1;
		КонецПопытки; 
	Иначе
		Возврат -2;
	КонецЕсли; 
	
КонецФункции
// --- АК mirv    

// +++ АК mirv 29.08.2017 [ИП-00015993]
Функция ПолучитьТоварыНаДегустацию()
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("Характеристика", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("Номенклатура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаРезультат.Колонки.Добавить("ДатаРегистрации");
	ТаблицаРезультат.Колонки.Добавить("ДатаПроизводства");
	ТаблицаРезультат.Колонки.Добавить("Комментарий");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	АК_ЗаданияНаДегустациюНочные.Номенклатура,
	|	АК_ЗаданияНаДегустациюНочные.Характеристика,
	|	АК_ЗаданияНаДегустациюНочные.ДатаРегистрации,
	|	АК_ЗаданияНаДегустациюНочные.ДатаПроизводства,
	|	АК_ЗаданияНаДегустациюНочные.Комментарий
	|ИЗ
	|	РегистрСведений.АК_ЗаданияНаДегустациюНочные КАК АК_ЗаданияНаДегустациюНочные
	|ГДЕ
	|	АК_ЗаданияНаДегустациюНочные.ДатаДегустации = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.Номенклатура  = Строка(Выборка.Номенклатура.УникальныйИдентификатор());
		НоваяСтрока.Характеристика = Строка(Выборка.Характеристика.УникальныйИдентификатор());
		
	КонецЦикла;  
	
	СтруктураОтвет = Новый Структура("Результат", ТаблицаРезультат);
	
	//	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
КонецФункции
// --- АК mirv    

// +++ АК mirv 27.10.2017 [ИП-00015993]
Функция ОбработатьДегустацию(НоменклатураУин, ХарактеристикаУин, ДатаПроизводства, ДатаРегистрации, ДатаДегустации, Результат) 
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(НоменклатураУин) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Номенклатура = Неопределено;
	Характеристика = Неопределено;
	Попытка
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураУин));	
	Исключение
		//ОписаниеОшибки()
	КонецПопытки; 
	
	Попытка
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ХарактеристикаУин));	
	Исключение
		//ОписаниеОшибки()
	КонецПопытки; 
	
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АК_ЗаданияНаДегустациюНочные.Номенклатура,
		|	АК_ЗаданияНаДегустациюНочные.Характеристика,
		|	АК_ЗаданияНаДегустациюНочные.ДатаРегистрации,
		|	АК_ЗаданияНаДегустациюНочные.ДатаПроизводства,
		|	АК_ЗаданияНаДегустациюНочные.ДатаДегустации,
		|	АК_ЗаданияНаДегустациюНочные.Комментарий,
		|	АК_ЗаданияНаДегустациюНочные.Результат
		|ИЗ
		|	РегистрСведений.АК_ЗаданияНаДегустациюНочные КАК АК_ЗаданияНаДегустациюНочные
		|ГДЕ
		|	АК_ЗаданияНаДегустациюНочные.Номенклатура = &Номенклатура
		|	И АК_ЗаданияНаДегустациюНочные.ДатаРегистрации = &ДатаРегистрации
		|	И АК_ЗаданияНаДегустациюНочные.ДатаПроизводства = &ДатаПроизводства";
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			Запрос.Текст = Запрос.Текст + "	И АК_ЗаданияНаДегустациюНочные.Характеристика = &Характеристика";
			Запрос.УстановитьПараметр("Характеристика", Характеристика);
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
		Запрос.УстановитьПараметр("ДатаРегистрации", ДатаРегистрации);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Комментарий = "";
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
		КонецЕсли;
		
		
		Попытка
			НоваяЗапись = РегистрыСведений.АК_ЗаданияНаДегустациюНочные.СоздатьМенеджерЗаписи();
			НоваяЗапись.Номенклатура 	= Номенклатура;
			НоваяЗапись.Характеристика 	= Характеристика;
			НоваяЗапись.ДатаРегистрации = ДатаРегистрации;
			НоваяЗапись.ДатаПроизводства= ДатаПроизводства;
			НоваяЗапись.Комментарий 	= Комментарий;
			НоваяЗапись.ДатаДегустации 	= ДатаДегустации;
			НоваяЗапись.Результат 		= Результат;
			
			НоваяЗапись.Записать(Истина);
			Возврат 1;
		Исключение
			Возврат -1;
		КонецПопытки; 
	Иначе
		Возврат -2;
	КонецЕсли; 
	
КонецФункции// --- АК mirv

//+++АК KOPA 23.11.2017 [ИП-00017264]
Функция ОбработатьВозвратТовара(ДанныеМобильногоПриложения)
	УстановитьПривилегированныйРежим(Истина);
	
	Ошибка = "Не вошли...";
	
	Попытка	
		обр = Обработки.АК_ОбработатьВозвратТовара.Создать();
		
		СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
		
		Возврат обр.ВыполнитьДействие(СтруктураПараметры);			
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "Невыполнено! Ошибка: " + Ошибка);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции//--- KOPA

// +++ АК mirv 28.11.2017 [ИП-00016694]
Функция ПолучитьСписокСотрудниковМагазина(КодМобильногоКомпьютера) 
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоКомпьютера); 
	
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельРаботыВнештатныхСотрудниковСрезПоследних.Сотрудник.Код КАК Код,
	|	ТабельРаботыВнештатныхСотрудниковСрезПоследних.Сотрудник.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ТабельРаботыВнештатныхСотрудников.СрезПоследних(&ДатаСреза, Период = &ДатаСреза) КАК ТабельРаботыВнештатныхСотрудниковСрезПоследних
	|ГДЕ
	|	ТабельРаботыВнештатныхСотрудниковСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботыВнештатныхСотрудниковСрезПоследних.Сотрудник.Наименование,
	|	ТабельРаботыВнештатныхСотрудниковСрезПоследних.Сотрудник.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельРаботыГрузчиковСрезПоследних.Сотрудник.Код,
	|	ТабельРаботыГрузчиковСрезПоследних.Сотрудник.Наименование
	|ИЗ
	|	РегистрСведений.ТабельРаботыГрузчиков.СрезПоследних(&ДатаСреза, Период = &ДатаСреза) КАК ТабельРаботыГрузчиковСрезПоследних
	|ГДЕ
	|	ТабельРаботыГрузчиковСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельРаботыКассировСрезПоследних.Сотрудник.Код,
	|	ТабельРаботыКассировСрезПоследних.Сотрудник.Наименование
	|ИЗ
	|	РегистрСведений.ТабельРаботыКассиров.СрезПоследних(&ДатаСреза, Период = &ДатаСреза) КАК ТабельРаботыКассировСрезПоследних
	|ГДЕ
	|	ТабельРаботыКассировСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельРаботыПродавцовСрезПоследних.Сотрудник.Код,
	|	ТабельРаботыПродавцовСрезПоследних.Сотрудник.Наименование
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов.СрезПоследних(&ДатаСреза, Период = &ДатаСреза) КАК ТабельРаботыПродавцовСрезПоследних
	|ГДЕ
	|	ТабельРаботыПродавцовСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельРаботыПромоутеровСрезПоследних.Сотрудник.Код,
	|	ТабельРаботыПромоутеровСрезПоследних.Сотрудник.Наименование
	|ИЗ
	|	РегистрСведений.ТабельРаботыПромоутеров.СрезПоследних(&ДатаСреза, Период = &ДатаСреза) КАК ТабельРаботыПромоутеровСрезПоследних
	|ГДЕ
	|	ТабельРаботыПромоутеровСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.Сотрудник.Код,
	|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.Сотрудник.Наименование
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг.СрезПоследних(&ДатаСреза, Период = &ДатаСреза) КАК ТабельРаботыСотрудниковАутсорсингСрезПоследних
	|ГДЕ
	|	ТабельРаботыСотрудниковАутсорсингСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельРаботыУборщицСрезПоследних.Сотрудник.Код,
	|	ТабельРаботыУборщицСрезПоследних.Сотрудник.Наименование
	|ИЗ
	|	РегистрСведений.ТабельРаботыУборщиц.СрезПоследних(&ДатаСреза, Период = &ДатаСреза) КАК ТабельРаботыУборщицСрезПоследних
	|ГДЕ
	|	ТабельРаботыУборщицСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТорговаяТочка", УзелОбмена.Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Список = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.Код, ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат Новый ХранилищеЗначения(Список, Новый СжатиеДанных(9));
	
КонецФункции
// --- АК mirv  


// +++ АК mirv 28.11.2017 [ИП-00015805]
Функция ОтправитьПисьмоБрендМенеджеру(ШК)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтриховыеКоды.Номенклатура
	|ИЗ
	|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|ГДЕ
	|	ШтриховыеКоды.ШтрихКод = &ШтрихКод";
	
	Запрос.УстановитьПараметр("ШтрихКод", ШК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Номенклатура 		= "Не найдена Номенклатура с ШК=" + ШК;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Номенклатура 		= ВыборкаДетальныеЗаписи.Номенклатура;
	Иначе
		Номенклатура 		= "Не найдена Номенклатура с ШК=" + ШК;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтриховыеКоды.Характеристика
	|ПОМЕСТИТЬ ХарактеристикаПоШК
	|ИЗ
	|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|ГДЕ
	|	ШтриховыеКоды.ШтрихКод = &ШтрихКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Ссылка
	|ПОМЕСТИТЬ Технолог
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя)
	|			И (СоответствиеОбъектРольСрезПоследних.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикаПоШК КАК ХарактеристикаПоШК
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = ХарактеристикаПоШК.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Технолог.Ссылка,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	РолиПользователейСоставРоли.Сотрудник
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Технолог КАК Технолог
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = Технолог.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя)
	|			И (СоответствиеОбъектРольСрезПоследних.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Представление)
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
	|		ПО КонтактнаяИнформация.Объект = Сотрудники.Сотрудник
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Запрос.УстановитьПараметр("ШтрихКод", ШК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокКому 		= Новый СписокЗначений;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Отправить письмо бренд менеджеру
		СписокКому.Добавить(ВыборкаДетальныеЗаписи.Представление);
	Иначе
		// Отправить письмо reklama@izbenka.msk.ru
		СписокКому.Добавить("reklama@izbenka.msk.ru");
	КонецЕсли;
	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	СтруктураНовогоПисьма.Вставить("Тема", "Нет розничной цены, товар уже на складе");
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
	СтруктураНовогоПисьма.Вставить("Тело", Номенклатура);
	
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции
// --- АК mirv

//+++АК KOPA 23.11.2017 [ИП-00017470]
Функция ПрофильГрузчика(ДанныеМобильногоПриложения)
	УстановитьПривилегированныйРежим(Истина);
	
	Ошибка = "Не вошли...";
	
	Попытка	
		обр = Обработки.АК_ПрофильГрузчика.Создать();
		
		СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
		
		Возврат обр.ВыполнитьДействие(СтруктураПараметры);			
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", "Невыполнено! Ошибка: " + Ошибка);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции//--- KOPA

// +++ АК mirv 14.12.2017 [ИП-00017151]
Функция ПроверитьСписаниеНаОбеды(СотрудникКод, НоменклатураУин)
	Возврат ВнешниеДанные.ПроверитьСписаниеНаОбеды(СотрудникКод, НоменклатураУин);
КонецФункции
// --- АК mirv

//+++АК KOPA 23.11.2017 [ИП-00017470]
Функция СписаниеНаБой(ДанныеМобильногоПриложения)
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка	
		обр = Обработки.СписаниеНаБой.Создать();
		
		СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
		
		Возврат обр.ВыполнитьДействие(СтруктураПараметры);			
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	СтруктураВозврат = Новый Структура("ОписаниеОшибок", Ошибка);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции//--- KOPA  

//+++АК KOPA 2017.12.29 ИП-00017595
Функция ОбработатьПаллету(ДанныеМобильногоПриложения)
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка	
		обр = Обработки.ОбработатьПаллету.Создать();
		
		СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
		
		Возврат обр.ВыполнитьДействие(СтруктураПараметры);			
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	СтруктураВозврат = Новый Структура("Ошибка", Ошибка);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат);
КонецФункции//---АК KOPA
//+++АК BELN 2018.07.18 
Функция ПолучитьСписокМикромаркетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.НомерТочки КАК Код
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		внутреннее СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО МобильноеПриложение.Магазин = СтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипРозничнойТочки = &ТипРозничнойТочки
	|	И СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.НомерТочки";
	
	Запрос.УстановитьПараметр("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Микромаркет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СписокТТ=Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокТТ.Добавить(СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.Код)," ",""),ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	Возврат Новый ХранилищеЗначения(СписокТТ);	
КонецФункции
//---АК BELN 2018.07.18 


//++ХЖК 15.08.2018 ИП-00019564
Функция ОтменитьРазборку(ДанныеМобильногоПриложения)
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ДанныеМобильногоПриложения.Получить();
	СтруктураВозврат = Новый Структура("Ошибка", "");
	ШтрихКодДокумента = СтруктураПараметры.ШтрихКод;
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКодДокумента);
	Если НЕ ЗначениеЗаполнено(Док)  Тогда
		СтруктураВозврат.Ошибка = "Документ со штрихкодом " + ШтрихКодДокумента + " не найден!";
		Возврат Новый ХранилищеЗначения(СтруктураВозврат);
	КонецЕсли;
	
	ДокОбъект = Док.ПолучитьОбъект();
	ДокОбъект.Сборщик = Справочники.ФизическиеЛица.ПустаяСсылка();
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	Возврат Новый ХранилищеЗначения(СтруктураВозврат,Новый СжатиеДанных(9));
КонецФункции

Функция ПолучитьСкладПоПаллете(ШК)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПоШтрихКоду = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШК);
	Если ЗначениеЗаполнено(СтруктураПоШтрихКоду.Объект) Тогда
		Если ТипЗнч(СтруктураПоШтрихКоду.Объект) = Тип("СправочникСсылка.СоставПаллеты") Тогда
			Склад = СтруктураПоШтрихКоду.Объект.РасходныйОрдер.Склад;
			Если ЗначениеЗаполнено(Склад) Тогда 
				СтруктураПоШтрихКоду.Вставить("ОбъектУин", Строка(Склад.УникальныйИдентификатор()));
				СтруктураПоШтрихКоду.Вставить("ОбъектНаименование", Строка(Склад));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураПоШтрихКоду);
	
КонецФункции

//++ АК hamz 2018.09.25 ИП-00019563
Функция ПолучитьВоторуПоШК(ШК)
	Ссылка = Справочники.AK_Ворота.НайтиПоРеквизиту("ИД", Число(ШК));
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат Ссылка.Наименование;
	КонецЕсли;
	Возврат "";
КонецФункции
//-- АК hamz 2018.09.25 ИП-00019563

//++ АК hamz 2018.09.25 ИП-00019876
Функция ПолучитьДанныеВодителяПоШК(ШК)
	Ошибка = "";
	ШесЧисло = ОбщегоНазначенияКлиентСервер.ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Число(ШК));
	УИнСтрока = ПреобразоватьПоШаблону(ШесЧисло);
	Попытка
		УИн = Новый УникальныйИдентификатор(УИнСтрока);
		Водитель = Справочники.КонтактныеЛицаКонтрагентов.ПолучитьСсылку(УИн);
		Если Водитель.ПолучитьОбъект() = Неопределено Тогда
			Состояние = "Не Работает";
			Ошибка = "Водителя с таким штрихкодом не существует!";
		Иначе			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ИсторияКонтактныхЛицКонтрагентовСрезПоследних.ДатаУвольнения) КАК ДатаУвольнения
			|ИЗ
			|	РегистрСведений.ИсторияКонтактныхЛицКонтрагентов.СрезПоследних КАК ИсторияКонтактныхЛицКонтрагентовСрезПоследних
			|ГДЕ
			|	ИсторияКонтактныхЛицКонтрагентовСрезПоследних.КонтактноеЛицоКонтрагента = &КонтактноеЛицоКонтрагента";
			
			Запрос.УстановитьПараметр("КонтактноеЛицоКонтрагента", Водитель);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если  Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Выборка.Следующий();
				
				ДатаУвольнения = СтрЗаменить("ДатаУвольнения", "ДатаУвольнения", ?(ЗначениеЗаполнено(Выборка.ДатаУвольнения), Формат(Выборка.ДатаУвольнения,"ДФ=dd.MM.yyyy"),""));
				
				Состояние = СокрЛП(СтрЗаменить(СтрЗаменить("Состояние ДатаУвольнения", "Состояние", 
				?(ЗначениеЗаполнено(ДатаУвольнения), "Уволен", "Работает")), "ДатаУвольнения", ДатаУвольнения));
				
			Иначе 
				Состояние = "Работает";
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ошибка = "Водитель с таким штрихкодом не существует!";
		Состояние = "Не существует"; 
	КонецПопытки;
	
	Картинка = "";
	Если Состояние = "Работает" Тогда 
		Попытка
			Картинка = Новый ДвоичныеДанные(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Водитель.ВодительскоеСсылка));
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("Состояние, Картинка, Ошибка");
	СтруктураОтвета.Состояние = Состояние;
	СтруктураОтвета.Картинка = Картинка;
	СтруктураОтвета.Ошибка = Ошибка;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПреобразоватьПоШаблону(ШесЧисло)
	
	Строка = "";
	Строка = Строка + Лев(ШесЧисло, 8) + "-" +
	Сред(ШесЧисло, 9, 4) + "-" + Сред(ШесЧисло, 13, 4) + "-" + Сред(ШесЧисло, 17, 4) + "-" +
	Сред(ШесЧисло, 21);
	Возврат Строка;
КонецФункции 
//-- АК hamz 2018.09.25 ИП-00019876

#Область АктуальныеХарактеристики

//+++АК LATV 2018.11.09 ИП-00020128
Функция ПолучитьАктуальныеХарактеристики(КодМобильногоУстройства, ДанныеМобильногоПриложения)

	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодМобильногоУстройства);
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоУстройства);
	КонецЕсли;
	ДанныеМобильногоУстройства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена, "Магазин");
	
	Параметры = ДанныеМобильногоПриложения.Получить();
	
	ДатаПолучения = ТекущаяДата();
	
	ХарактеристикиНоменклатуры = ПолучитьПоследнююХарактеристикуВРазрезеНоменклатуры(ДатаПолучения, ДанныеМобильногоУстройства, Параметры);
	ДанныеXDTO = СформироватьДанныеОбъектовПоХарактеристикамНоменклатуры(ХарактеристикиНоменклатуры);
	ХарактеристикиНоменклатурыПреобразованые = ПреобразоватьСсылкиВУникальныеИдентификаторы(ХарактеристикиНоменклатуры);
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаПолучения",					ДатаПолучения);
	Результат.Вставить("ХарактеристикиНоменклатуры",	ХарактеристикиНоменклатурыПреобразованые);
	Результат.Вставить("ДанныеXDTO",					ДанныеXDTO);
	
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));

КонецФункции

//+++АК LATV 2018.11.12 ИП-00020128
Функция ПолучитьПоследнююХарактеристикуВРазрезеНоменклатуры(ДатаПолучения, ДанныеМобильногоУстройства, Параметры)

	НачалоПериода	= НачалоДня(Параметры.ДатаПоследнегоОбновления);
	КонецПериода	= КонецДня(ДатаПолучения);
	Получатель		= ДанныеМобильногоУстройства.Магазин;
	
	Разница3Дня = НачалоДня(КонецПериода) - 3 * 24*60*60;
	Если НачалоПериода < Разница3Дня Тогда
		НачалоПериода = Разница3Дня;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерСкладТовары.Ссылка.Дата КАК Дата,
		|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерСкладТовары.Характеристика
		|ПОМЕСТИТЬ втДанныеРасходныхОрдеров
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	РасходныйОрдерСкладТовары.Ссылка.Проведен
		|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &Получатель
		|	И РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеРасходныхОрдеров.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(втДанныеРасходныхОрдеров.Дата) КАК Дата
		|ПОМЕСТИТЬ втДатыПоследнейОтгрузкиНоменклатуры
		|ИЗ
		|	втДанныеРасходныхОрдеров КАК втДанныеРасходныхОрдеров
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеРасходныхОрдеров.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеРасходныхОрдеров.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(втДанныеРасходныхОрдеров.Характеристика) КАК Характеристика
		|ИЗ
		|	втДанныеРасходныхОрдеров КАК втДанныеРасходныхОрдеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДатыПоследнейОтгрузкиНоменклатуры КАК втДатыПоследнейОтгрузкиНоменклатуры
		|		ПО втДанныеРасходныхОрдеров.Номенклатура = втДатыПоследнейОтгрузкиНоменклатуры.Номенклатура
		|			И втДанныеРасходныхОрдеров.Дата = втДатыПоследнейОтгрузкиНоменклатуры.Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеРасходныхОрдеров.Номенклатура");
	
	Запрос.УстановитьПараметр("Получатель",		Получатель);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	ХарактеристикиНоменклатуры = РезультатЗапроса.Выгрузить();
	
	Возврат ХарактеристикиНоменклатуры;

КонецФункции

//+++АК LATV 2018.11.12 ИП-00020128
Функция СформироватьДанныеОбъектовПоХарактеристикамНоменклатуры(ХарактеристикиНоменклатуры)

	ВозвращаемыйСписок = ОбменМобильноеПриложениеПереопределяемый.СоздатьОбъектXDTO("Objects");
	
	Для Каждого ТекСтрокаХарактеристик Из ХарактеристикиНоменклатуры Цикл
		ОбменМобильноеПриложениеПереопределяемый.ЗаписатьДанные(ВозвращаемыйСписок, ТекСтрокаХарактеристик.Номенклатура);
		ОбменМобильноеПриложениеПереопределяемый.ЗаписатьДанные(ВозвращаемыйСписок, ТекСтрокаХарактеристик.Характеристика);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	ТекстXML = ЗаписьXML.Закрыть();
	
	Возврат ТекстXML;

КонецФункции

//+++АК LATV 2018.11.12 ИП-00020128
Функция ПреобразоватьСсылкиВУникальныеИдентификаторы(ХарактеристикиНоменклатуры)

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("НоменклатураУИН",	ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	Результат.Колонки.Добавить("ХарактеристикаУИН",	ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	
	Для Каждого ТекСтрокаХарактеристик Из ХарактеристикиНоменклатуры Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.НоменклатураУИН		= Строка(ТекСтрокаХарактеристик.Номенклатура.УникальныйИдентификатор());
		НоваяСтрока.ХарактеристикаУИН	= Строка(ТекСтрокаХарактеристик.Характеристика.УникальныйИдентификатор());
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти
