
Функция АвторизацияВСистему(ДанныеСистемы)
	
	СтруктураДанные = ДанныеСистемы.Получить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Водители_ТранспортнаяСистема.Ссылка,
	               |	Водители_ТранспортнаяСистема.Наименование
	               |ИЗ
	               |	Справочник.Водители_ТранспортнаяСистема КАК Водители_ТранспортнаяСистема
	               |ГДЕ
	               |	Водители_ТранспортнаяСистема.КодДоступа = &КодДоступа";
				   
	Запрос.УстановитьПараметр("КодДоступа", СтруктураДанные.КодДоступа);
	
	СтруктураОтвет = Новый Структура("УинВодителя, Наименование, РазницаВСекундах, ТаблицаКлючевыхОбъектов", Неопределено, "", 0, Новый ТаблицаЗначений());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураОтвет.УинВодителя = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		СтруктураОтвет.Наименование = Строка(Выборка.Наименование);
		СтруктураОтвет.РазницаВСекундах = ТекущаяДата() - СтруктураДанные.ТекущееВремя;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.id_TT,
	               |	СтруктурныеЕдиницы.Наименование,
	               |	СтруктурныеЕдиницы.КоординатыДолгота КАК Долгота,
	               |	СтруктурныеЕдиницы.КоординатыШирота КАК Широта,
	               |	ВЫБОР
	               |		КОГДА СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	               |			ТОГДА 1
	               |		КОГДА СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	               |			ТОГДА 2
	               |	КОНЕЦ КАК Тип,
	               |	СтруктурныеЕдиницы.ПометкаУдаления
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы В (ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад), ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвет.ТаблицаКлючевыхОбъектов.Колонки.Добавить("Уин");
	СтруктураОтвет.ТаблицаКлючевыхОбъектов.Колонки.Добавить("id_TT");
	СтруктураОтвет.ТаблицаКлючевыхОбъектов.Колонки.Добавить("Наименование");
	СтруктураОтвет.ТаблицаКлючевыхОбъектов.Колонки.Добавить("Долгота");
	СтруктураОтвет.ТаблицаКлючевыхОбъектов.Колонки.Добавить("Широта");
	СтруктураОтвет.ТаблицаКлючевыхОбъектов.Колонки.Добавить("ПометкаУдаления");
	СтруктураОтвет.ТаблицаКлючевыхОбъектов.Колонки.Добавить("Тип");
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = СтруктураОтвет.ТаблицаКлючевыхОбъектов.Добавить();
		СтрокаДоб.Уин = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		СтрокаДоб.id_TT = Выборка.id_TT;
		СтрокаДоб.Наименование = Выборка.Наименование;
		СтрокаДоб.Долгота = Окр(Выборка.Долгота, 12);
		СтрокаДоб.Широта = Окр(Выборка.Широта, 12);
		СтрокаДоб.Тип = Выборка.Тип;
		СтрокаДоб.ПометкаУдаления = Выборка.ПометкаУдаления;
	КонецЦикла;	
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	
КонецФункции

Функция ЗаписатьДанные(ДанныеСистемы)
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		СтруктураДанные = ДанныеСистемы.Получить();
		СтруктураОтвет = Новый Структура("ДанныеЗаписаны", Ложь);
		
		Для Каждого СтрокаДанные Из СтруктураДанные.ТабДанные Цикл
			СтруктураДанные = СтрокаДанные.Данные.Получить();
			Если СтруктураДанные.ТипДанных = "ВремяНачалаРазгрузкиНаТТ" Тогда
				МаршЛист = Документы.МаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.МаршрутныйЛист));
				Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.Магазин));
				ДокОбъект = МаршЛист.ПолучитьОбъект();
				Для Каждого СтрокаТаб Из ДокОбъект.ТорговыеТочки Цикл
					Если СтрокаТаб.СтруктурнаяЕдиница = Магазин Тогда
						СтрокаТаб.ДатаНачалаРазгрузки = СтруктураДанные.Время;
					КонецЕсли;	
				КонецЦикла;	
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			ИначеЕсли СтруктураДанные.ТипДанных = "ВремяОкончанияРазгрузкиНаТТ" Тогда
				МаршЛист = Документы.МаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.МаршрутныйЛист));
				Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.Магазин));
				ДокОбъект = МаршЛист.ПолучитьОбъект();
				Для Каждого СтрокаТаб Из ДокОбъект.ТорговыеТочки Цикл
					Если СтрокаТаб.СтруктурнаяЕдиница = Магазин Тогда
						СтрокаТаб.ДатаОкончанияРазгрузки = СтруктураДанные.Время;
					КонецЕсли;	
				КонецЦикла;	
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			ИначеЕсли СтруктураДанные.ТипДанных = "ДанныеПоКоробкам" Тогда
				МаршЛист = Документы.МаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.МаршрутныйЛист));
				Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.Магазин));
				ТабКоробки = СтруктураДанные.Коробки;
				ТабКоробки.Колонки.Добавить("Склад");
				Для Каждого СтрокаКоробки Из ТабКоробки Цикл
					СтрокаКоробки.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаКоробки.СкладУин));
				КонецЦикла;	
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Доки", МаршЛист.РасходныеОрдера.ВыгрузитьКолонку("Документ"));
				Запрос.УстановитьПараметр("Получатель", Магазин);
				Запрос.Текст = "ВЫБРАТЬ
				               |	РасходныйОрдерСклад.Ссылка,
				               |	РасходныйОрдерСклад.Склад
				               |ИЗ
				               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
				               |ГДЕ
				               |	РасходныйОрдерСклад.Ссылка В(&Доки)
				               |	И РасходныйОрдерСклад.Получатель = &Получатель";
							   
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаКоробка = ТабКоробки.Найти(Выборка.Склад, "Склад");
					Если СтрокаКоробка <> Неопределено
						И СтрокаКоробка.Количество > 0 Тогда
						ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ДокОбъект.КоличествоКоробокПоДаннымВодителя = СтрокаКоробка.Количество;
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;	
				КонецЦикла;
			ИначеЕсли СтруктураДанные.ТипДанных = "ДанныеПоСеткам" Тогда
				МаршЛист = Документы.МаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.МаршрутныйЛист));
				Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.Магазин));
				КолвоСеток = СтруктураДанные.КолвоСеток;
				МаршОбъект = МаршЛист.ПолучитьОбъект();
				Для Каждого СтрокаТТ Из МаршОбъект.ТорговыеТочки Цикл
					Если СтрокаТТ.СтруктурнаяЕдиница = Магазин Тогда
						СтрокаТТ.КолвоСетокВПоставке = КолвоСеток;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				МаршОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	
		КонецЦикла;
		
		СтруктураОтвет.ДанныеЗаписаны = Истина;
		
		Возврат Новый ХранилищеЗначения(СтруктураОтвет, Новый СжатиеДанных(9));
	Исключение
		ЗаписьЖурналаРегистрации("Транспорт",,, ОписаниеОшибки());
	КонецПопытки;	
	
КонецФункции

Функция ПолучитьМаршрутныйЛистПоШК(ДанныеСистемы)
	
	СтруктураДанные = ДанныеСистемы.Получить();
	Док = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(СтруктураДанные.ШК);
	Если ТипЗнч(Док) <> Тип("ДокументСсылка.МаршрутныйЛист") Тогда
		СтруктураВозврата = Новый Структура("Документ, Представление, ТабТТ", Неопределено, "", Новый ТаблицаЗначений());
	Иначе	
		ТабТТ = Новый ТаблицаЗначений();
		ТабТТ.Колонки.Добавить("СтруктурнаяЕдиницаУин");
		Для Каждого СтрокаТаб Из Док.ТорговыеТочки Цикл
			СтрокаДоб = ТабТТ.Добавить();
			СтрокаДоб.СтруктурнаяЕдиницаУин = Строка(СтрокаТаб.СтруктурнаяЕдиница.УникальныйИдентификатор());
		КонецЦикла;	
		СтруктураВозврата = Новый Структура("Документ, Представление, ТабТТ", Строка(Док.Ссылка.УникальныйИдентификатор()), Строка(Док), ТабТТ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	СоставПаллеты.Ссылка,
		|	ДвижениеКонвертовРеклама.Ордер КАК Расходник,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ТипЗаявки КАК РасходникОснованиеТипЗаявки,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ЗаявкаНаНовыйМагазин КАК РасходникОснованиеЗаявкаНаНовыйМагазин,
		|	ДвижениеКонвертовРеклама.Ордер.Основание КАК РасходникОснование,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ТорговаяТочка КАК РасходникОснованиеТорговаяТочка,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ТорговаяТочка.ТипРозничнойТочки КАК РасходникОснованиеТорговаяТочкаТипРозничнойТочки
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДвижениеКонвертовРеклама КАК ДвижениеКонвертовРеклама
		|			ПО СоставПаллеты.Ссылка = ДвижениеКонвертовРеклама.Паллет
		|		ПО МаршрутныйЛистРасходныеОрдера.Документ = СоставПаллеты.РасходныйОрдер
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка = &МаршЛист
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	СоставПаллеты.Ссылка,
		|	ДвижениеКонвертовРеклама.Ордер,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ТипЗаявки,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ЗаявкаНаНовыйМагазин,
		|	ДвижениеКонвертовРеклама.Ордер.Основание,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ТорговаяТочка,
		|	ДвижениеКонвертовРеклама.Ордер.Основание.ТорговаяТочка.ТипРозничнойТочки";


	Запрос.УстановитьПараметр("МаршЛист", Док.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СтруктурныеЕдиницы.Ссылка,
	//	|	СтруктурныеЕдиницы.ТипРозничнойТочки
	//	|ИЗ
	//	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	//НайденМагазин=Ложь;
	//Результат = Запрос.Выполнить();

	//ТЗТТ = Результат.Выгрузить();
	
 	МасМаг=Новый Массив;
	ТЗТорговыеТочки=Док.Ссылка.ТорговыеТочки.Выгрузить();
	Для каждого Стр Из ТЗТорговыеТочки Цикл
		МасМаг.Добавить(Стр.СтруктурнаяЕдиница);
	КонецЦикла; 
  	Лицо=Док.Ссылка.Водитель;
	
	МасРО=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасРО.Добавить(ВыборкаДетальныеЗаписи.Расходник);
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСкладТорговыеТочки.Ссылка,
		|	РасходныйОрдерСкладТорговыеТочки.Магазин,
		|	РасходныйОрдерСкладТорговыеТочки.Магазин.ТипРозничнойТочки КАК ТипРозничнойТочки
		|ИЗ
		|	Документ.РасходныйОрдерСклад.ТорговыеТочки КАК РасходныйОрдерСкладТорговыеТочки
		|ГДЕ
		|	РасходныйОрдерСкладТорговыеТочки.Ссылка В(&Ссылка)";

	Запрос.УстановитьПараметр("Ссылка", МасРО);

	Результат = Запрос.Выполнить();

	ТЗТТ = Результат.Выгрузить();

	
	
	
    ВыборкаДетальныеЗаписи.Сбросить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//Если (СтруктураПараметры.Свойство("ШКПаллета")) Тогда
			//КонецЕсли;
			Если ВыборкаДетальныеЗаписи.РасходникОснованиеТипЗаявки=ПредопределенноеЗначение("Перечисление.ТипЗаявкиНаРекламныеМатериалы.МассоваяРассылка") Тогда

				ЗаявкаНаНовыйМагазин=ВыборкаДетальныеЗаписи.РасходникОснованиеЗаявкаНаНовыйМагазин;
				ТипЗаявки=ВыборкаДетальныеЗаписи.РасходникОснованиеТипЗаявки;
				ТЗТорговыеТочки=ТЗТТ.НайтиСтроки(Новый Структура("Ссылка",ВыборкаДетальныеЗаписи.Расходник));
				Для каждого Стр Из ТЗТорговыеТочки Цикл
					Если МасМаг.Найти(Стр.Магазин)=Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					НайденМагазин=Истина;

					Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
					Мен.Период=ТекущаяДата();
					Мен.Заявка=ВыборкаДетальныеЗаписи.РасходникОснование;
					Мен.Ордер=ВыборкаДетальныеЗаписи.Расходник;
					Мен.ТТ=Стр.Магазин;
					Мен.ЗаявкаНаНовыйМагазин=ЗаявкаНаНовыйМагазин;
					Мен.ТипЗаявки=ТипЗаявки;
					Мен.ТипРозничнойТочки=Стр.ТипРозничнойТочки;
					Мен.ПереданоВСборку=Истина;
					Мен.ОтгруженоВодителю=Лицо;
					Мен.ВПути=Истина;
					//Мен.Записать();
				КонецЦикла; 
			Иначе
				Если Не МасМаг.Найти(ВыборкаДетальныеЗаписи.РасходникОснованиеТорговаяТочка)=Неопределено Тогда
	  				Мен=РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
					Мен.Период=ТекущаяДата();
					Мен.Заявка=ВыборкаДетальныеЗаписи.РасходникОснование;
					Мен.Ордер=ВыборкаДетальныеЗаписи.Расходник;
					Мен.ТТ=ВыборкаДетальныеЗаписи.РасходникОснованиеТорговаяТочка;
					Мен.ЗаявкаНаНовыйМагазин=ЗаявкаНаНовыйМагазин;
					Мен.ТипЗаявки=ТипЗаявки;
					Мен.ТипРозничнойТочки=ВыборкаДетальныеЗаписи.РасходникОснованиеТорговаяТочкаТипРозничнойТочки;
					Мен.ПереданоВСборку=Истина;
					Мен.ОтгруженоВодителю=Лицо;
					Мен.ВПути=Истина;
					//Мен.Записать();
              	
				КонецЕсли; 
			КонецЕсли; 
	КонецЦикла;


	
	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврата, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьДанныеПаллетыПоШК(ДанныеСистемы)
	
	СтруктураДанные = ДанныеСистемы.Получить();
	Паллета = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(СтруктураДанные.ШК).Объект;
	СтруктураВозврата = Новый Структура("ПаллетаСсылка, МаршрутныйЛист, МаршрутныйЛистПредставление, ТТПолучатель", Неопределено, "", "", "");
	Если ТипЗнч(Паллета) = Тип("СправочникСсылка.СоставПаллеты") Тогда
		СтруктураВозврата.ПаллетаСсылка = Строка(Паллета.Ссылка.УникальныйИдентификатор());
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СоставПаллеты.Ссылка,
		               |	СоставПаллеты.РасходныйОрдер.Получатель КАК Получатель,
		               |	МаршрутныйЛистРасходныеОрдера.Ссылка КАК МаршрутныйЛист
		               |ИЗ
		               |	Справочник.СоставПаллеты КАК СоставПаллеты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		               |		ПО СоставПаллеты.РасходныйОрдер = МаршрутныйЛистРасходныеОрдера.Документ
		               |			И (МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ)
		               |ГДЕ
		               |	СоставПаллеты.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	МаршрутныйЛистРасходныеОрдера.Ссылка.Дата УБЫВ";
					   
		Запрос.УстановитьПараметр("Ссылка", Паллета);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.МаршрутныйЛист) Тогда
				СтруктураВозврата.МаршрутныйЛист = Строка(Выборка.МаршрутныйЛист.УникальныйИдентификатор());
				СтруктураВозврата.МаршрутныйЛистПредставление = Строка(Выборка.МаршрутныйЛист);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Получатель) Тогда
				СтруктураВозврата.ТТПолучатель = Строка(Выборка.Получатель.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврата, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьДанныеПоШКМагазина(ДанныеСистемы)
	
	СтруктураДанные = ДанныеСистемы.Получить();
	Магазин = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(СтруктураДанные.ШК).Объект;
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		СтруктураВозврата = Новый Структура("Магазин, МагазинПредставление");
	Иначе	
		СтруктураВозврата = Новый Структура("Магазин, МагазинПредставление", Строка(Магазин.УникальныйИдентификатор()), Магазин.Наименование);
	КонецЕсли;	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврата, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьСкладыПоМаршЛисту(ДанныеСистемы)
	
	СтруктураДанные = ДанныеСистемы.Получить();
	МаршЛист = Документы.МаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.МаршрутныйЛистУин));
	Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.МагазинУин));
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МаршЛист);
	Запрос.УстановитьПараметр("Получатель", Магазин);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСклад.Склад,
	               |	РасходныйОрдерСклад.Склад.Наименование
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.Ссылка В
	               |			(ВЫБРАТЬ
	               |				МаршрутныйЛистРасходныеОрдера.Документ
	               |			ИЗ
	               |				Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	               |			ГДЕ
	               |				МаршрутныйЛистРасходныеОрдера.Ссылка = &Ссылка)
	               |	И РасходныйОрдерСклад.Получатель = &Получатель";
				   
	СтруктураВозврат = Новый Структура("ТабСклады", Новый ТаблицаЗначений());
	СтруктураВозврат.ТабСклады.Колонки.Добавить("СкладУин");
	СтруктураВозврат.ТабСклады.Колонки.Добавить("СкладНаименование");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = СтруктураВозврат.ТабСклады.Добавить();
		СтрокаДоб.СкладУин = Строка(Выборка.Склад.УникальныйИдентификатор());
		СтрокаДоб.СкладНаименование = Выборка.СкладНаименование;
	КонецЦикла;
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврат, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьМаршрутныйЛистПоТТ(ДанныеСистемы)
	
	СтруктураДанные = ДанныеСистемы.Получить();
	СтруктураВозврата = Новый Структура("Документ, Представление, ВыгрузкаВСетках", Неопределено, "", Ложь);
	Если ЗначениеЗаполнено(СтруктураДанные.МагазинУин) Тогда
		Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанные.МагазинУин));
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата() - 86400));
		Запрос.УстановитьПараметр("Магазин", Магазин);
		Запрос.Текст = "ВЫБРАТЬ
		               |	МаршрутныйЛистТорговыеТочки.Ссылка
		               |ИЗ
		               |	Документ.МаршрутныйЛист.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
		               |ГДЕ
		               |	НАЧАЛОПЕРИОДА(МаршрутныйЛистТорговыеТочки.Ссылка.Дата, ДЕНЬ) >= &Дата
		               |	И МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница = &Магазин
		               |	И МаршрутныйЛистТорговыеТочки.Ссылка.Маршрут.НеУчаствуетВТранспортнойСистеме = ЛОЖЬ
		               |	И МаршрутныйЛистТорговыеТочки.Ссылка.ПометкаУдаления = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	МаршрутныйЛистТорговыеТочки.Ссылка.Дата УБЫВ,
		               |	МаршрутныйЛистТорговыеТочки.Ссылка.Номер УБЫВ";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Документ = Строка(Выборка.Ссылка.УникальныйИдентификатор());
			СтруктураВозврата.Представление = Строка(Выборка.Ссылка);
			Для Каждого СтрокаТТ Из Выборка.Ссылка.Маршрут.ТорговыеТочки Цикл
				Если СтрокаТТ.СтруктурнаяЕдиница = Магазин Тогда
					СтруктураВозврата.ВыгрузкаВСетках = СтрокаТТ.ПоставкаВСетках;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврата, Новый СжатиеДанных(9));
	
КонецФункции
