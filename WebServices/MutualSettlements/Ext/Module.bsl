
Функция ВведенПароль(СтруктураАвторизации)
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = СтруктураАвторизации.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПаролиКонтрагентов.Пароль,
		|	ПаролиКонтрагентов.ПервыйЗапуск
		|ИЗ
		|	РегистрСведений.АК_ПаролиКонтрагентов КАК ПаролиКонтрагентов
		|ГДЕ
		|	ПаролиКонтрагентов.Контрагент.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", СтруктураПараметры.ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураРезультат=Новый Структура("Результат,ПервыйЗапуск,ОписаниеОшибок", ВыборкаДетальныеЗаписи.Пароль=СтруктураПараметры.Пароль,ВыборкаДетальныеЗаписи.ПервыйЗапуск,"");
		ДД=Справочники.Контрагенты.ВнешнийОтчет("Акт сверки и заказы");
		Если ДД=Неопределено Тогда
			СтруктураРезультат.Вставить("ОписаниеОшибок","Не подключена обработка поставщика в центральной базе");
			СтруктураРезультат.Вставить("Результат",Ложь);
			СтруктураРезультат.Вставить("ПервыйЗапуск",Ложь);
			Возврат Новый ХранилищеЗначения(СтруктураРезультат);
		КонецЕсли; 
		ДД.Записать(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
		ОбработкаОб=ВнешниеОбработки.Создать(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
		Если СтруктураПараметры.Версия<>ОбработкаОб.Метаданные().Комментарий Тогда
			СтруктураНовогоПисьма = Новый Структура;
			СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
			СписокФайловВложений = Новый СписокЗначений;
			
			СтруктураНовогоПисьма.Вставить("Тело", "	Группа компаний ""Избенка"" предлагает воспользоваться обработкой для просмотра актов сверок, заявок в нашей базе данных.
			|	Вам отправлена новая версия обработки поставщика.
			|	Воспользоваться обработкой можно на базе платформы 1С:Предприятие 8, не ниже редакции 8.2.
			|	Для этого необходимо скачать обработку на свой компьютер и открыть файл через программу 1С.
			|	В случае возникновения каких-либо ошибок обратитесь к вашему специалисту по обслуживанию ПО 1С.");
			СтруктураНовогоПисьма.Вставить("Тема", "Новая версия обработки поставщика");
			
			СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", Справочники.Контрагенты.ПолучитьДвоичныеДанные(КаталогВременныхФайлов()+"Акт сверки и заказы.epf"), КаталогВременныхФайлов()+"Акт сверки и заказы.epf","Акт сверки и заказы.epf"));
			СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
			Кому = Новый СписокЗначений;

			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Вид.Наименование = ""E-mail для интерфейса поставщика""";


			Запрос.УстановитьПараметр("Объект", Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураПараметры.ИНН));
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				
			Иначе
				СтруктураРезультат.Вставить("ОписаниеОшибок","Не заполнен адрес электронной почты вашей компании в базе, откуда необходимо получить информацию");
				СтруктураРезультат.Вставить("Результат",Ложь);
				СтруктураРезультат.Вставить("ПервыйЗапуск",Ложь);
				УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
				Возврат Новый ХранилищеЗначения(СтруктураРезультат);
			КонецЕсли;

			
			Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
			СтруктураНовогоПисьма.Вставить("Кому", Кому);
			Попытка
				Справочники.Контрагенты.ОтправитьРЛПоПочте(СтруктураНовогоПисьма);
			Исключение
				СтруктураРезультат.Вставить("ОписаниеОшибок","Не удалось отправить письмо по причине "+ОписаниеОшибки());
				СтруктураРезультат.Вставить("Результат",Ложь);
				СтруктураРезультат.Вставить("ПервыйЗапуск",Ложь);
				УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
				Возврат Новый ХранилищеЗначения(СтруктураРезультат);
			КонецПопытки;
			
			СтруктураРезультат.Вставить("ОписаниеОшибок","Неактуальная версия обработки. На вашу электронную почту "+ВыборкаДетальныеЗаписи.Представление+" выслана новая версия обработки");
			СтруктураРезультат.Вставить("Результат",Ложь);
			СтруктураРезультат.Вставить("ПервыйЗапуск",Ложь);
			УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
			Возврат Новый ХранилищеЗначения(СтруктураРезультат);
		
		КонецЕсли; 
		
		Возврат Новый ХранилищеЗначения(СтруктураРезультат);
	Иначе
		СтруктураРезультат=Новый Структура("Результат,ПервыйЗапуск,ОписаниеОшибок", Ложь,Ложь,"");
		Возврат Новый ХранилищеЗначения(СтруктураРезультат);
	КонецЕсли;
КонецФункции

Функция ВведенНовыйПароль(СтруктураАвторизации)
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = СтруктураАвторизации.Получить();
	НЗ=РегистрыСведений.АК_ПаролиКонтрагентов.СоздатьНаборЗаписей();
	НЗ.Отбор.Контрагент.Установить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураПараметры.ИНН));
	НЗ.Прочитать();
	Для каждого Зап Из НЗ Цикл
	    Зап.Пароль=СтруктураПараметры.Пароль;
	    Зап.ПервыйЗапуск=Ложь;
	КонецЦикла; 
	Попытка
	    НЗ.Записать();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ПолучитьОрганизации()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СписокОрг=Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокОрг.Добавить(ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	Возврат Новый ХранилищеЗначения(СписокОрг);
КонецФункции // ()

Функция ПолучитьДанныеСверки(ВходящиеДанные)
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметры = ВходящиеДанные.Получить();
	СтруктураРезультат=ПолучитьПечФормуСверки(СтруктураПараметры);
	Возврат Новый ХранилищеЗначения(СтруктураРезультат);
КонецФункции






Функция ПолучитьПечФормуСверки(СтруктураПараметры)
	СписокСчетов=Новый ТаблицаЗначений;
	ЗаполнитьСписокСчетовЗначениямиПоУмолчанию(СписокСчетов);
	ФильтрСписокСчетов = Новый Массив();
	
	Для каждого СтрокаСчета Из СписокСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
			Продолжить;
		Иначе
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	ДокОб=Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	СтрукРекв=Новый Структура;
	Для каждого Рекв Из ДокОб.Метаданные().Реквизиты Цикл
		  СтрукРекв.Вставить(Рекв.Имя,"");
	КонецЦикла; 
	СтрукРекв.Вставить("ПоДаннымОрганизации",ДокОб.ПоДаннымОрганизации.Выгрузить());
	СтрукРекв.Вставить("ОстатокНаКонец");
	ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов,СтруктураПараметры,СтрукРекв);
	
	ПересчитатьОстатки(СтрукРекв);
	ИндексыДокументовОбщ = Новый Соответствие();
	СписокСсылокОбщ=Новый СписокЗначений;
	СчСтрок=0;
	ТДОбщ=ПечатьАктаСверкиОбщ(СтрукРекв, СтруктураПараметры, ИндексыДокументовОбщ,СписокСсылокОбщ,СчСтрок);
	
	ДокументыКВыгрузкеОбщ= Новый Соответствие();
	
	Для каждого Элемент Из СписокСсылокОбщ Цикл
	    ДокументыКВыгрузкеОбщ.Вставить(Строка(Элемент.Значение.УникальныйИдентификатор()),СформироватьСтруктуруДокумента(Элемент.Значение));
	КонецЦикла;
	
	
	
	
	ИндексыДокументов = Новый Соответствие();
	СписокСсылок=Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктСверкиВзаиморасчетов.Ссылка,
		|	АктСверкиВзаиморасчетов.Дата
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|ГДЕ
		|	АктСверкиВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|	И АктСверкиВзаиморасчетов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И АктСверкиВзаиморасчетов.Организация = &Организация
		|	И АктСверкиВзаиморасчетов.Контрагент = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	АктСверкиВзаиморасчетов.Дата";

	Запрос.УстановитьПараметр("ДатаНачала", СтруктураПараметры.ДатаНачала);
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураПараметры.ИНН));
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоНаименованию(СтруктураПараметры.НаименованиеКонтрагента));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураПараметры.ДатаОкончания));

	РезультатЗап = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗап.Выбрать();
    СписокАктов=Новый СписокЗначений;
	//Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
	//	 Возврат Новый Структура("ОписаниеОшибок","В указанном периоде отсутсвуют сформированные акты сверки");
	//КонецЕсли; 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокАктов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
    СоотПечФорм=Новый Соответствие;
	СчСтрок=0;
	Для каждого Эл Из СписокАктов Цикл
		ТД=ПечатьАктаСверки(Эл.Значение, СтруктураПараметры, ИндексыДокументов,СписокСсылок,СчСтрок);
		СоотПечФорм.Вставить(Строка(Эл.Значение.УникальныйИдентификатор()),ТД);
		СчСтрок=СчСтрок+22;
	КонецЦикла; 
	
	ДокументыКВыгрузке= Новый Соответствие();
	
	Для каждого Элемент Из СписокСсылок Цикл
	    ДокументыКВыгрузке.Вставить(Строка(Элемент.Значение.УникальныйИдентификатор()),СформироватьСтруктуруДокумента(Элемент.Значение));
	КонецЦикла;
	
	СтрукЗаказы=ПолучитьТаблицуЗаказов(СтруктураПараметры);
	
	ТЗЭтикеток=ПолучитьТаблицуЭтикеток(СтруктураПараметры);
	СоотКартинок=ПолучитьСоответствиеКартинок(ТЗЭтикеток);
	СтруктураРезультат=Новый Структура("ТД, ИндексыДокументов, ДанныеДокументов, ТаблицаЗаказы, ТДОбщ, ИндексыДокументовОбщ, ДанныеДокументовОбщ,ТаблицаЭтикеток,СоотКартинок",СоотПечФорм,ИндексыДокументов,ДокументыКВыгрузке,СтрукЗаказы,ТДОбщ,ИндексыДокументовОбщ,ДокументыКВыгрузкеОбщ,ТЗЭтикеток,СоотКартинок);
	Возврат СтруктураРезультат;
КонецФункции // ()

Процедура ЗаполнитьСписокСчетовЗначениямиПоУмолчанию(СписокСчетов)
	ДокОб=Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	СписокСчетов=ДокОб.СписокСчетов.Выгрузить();
	
	СчетаПоУмолчанию = Новый Массив();
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками);
	
	Для Счетчик = 1  По СчетаПоУмолчанию.Количество() Цикл
		СтрокаСчета = СписокСчетов.Добавить();
		СтрокаСчета.УчаствуетВРасчетах = Истина;
	КонецЦикла; 
	
	СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию,"Счет");
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов,СтруктураПараметры,СтрукРекв) Экспорт
	
	
	//КоличествоСчетов = СписокСчетов.Количество();
	//Если ФильтрСписокСчетов = неопределено Тогда
	//	ФильтрСписокСчетов = Новый массив();
	//	Для каждого СтрокаСчета Из СписокСчетов Цикл
	//		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
	//			Продолжить;
	//		Иначе
	//			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
	//		КонецЕсли; 
	//	КонецЦикла; 
	//	
	//	Если ФильтрСписокСчетов.Количество() = 0 Тогда
	//	    ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
	//		Возврат;
	//	КонецЕсли;
	//
	//КонецЕсли;
	
	ДатаНачала=СтруктураПараметры.ДатаНачала;
	ДатаОкончания=СтруктураПараметры.ДатаОкончания;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И Организации.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование",СтруктураПараметры.НаименованиеКонтрагента);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивОрг=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивОрг.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",  КонецДня(ДатаОкончания));
	
	Запрос.УстановитьПараметр("Организация",   МассивОрг);
	//Запрос.УстановитьПараметр("Организация",   Организация);
	
	ТорговаяТочка = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	Контрагент=Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураПараметры.ИНН);
	СтрукРекв.Контрагент=Контрагент.Наименование;
	
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	//Запрос.УстановитьПараметр("ТорговаяТочка",    ТорговаяТочка);
	//Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("Валюта",        неопределено);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Организации);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	Если ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки);
	КонецЕсли;
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента",Неопределено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОбороты.Регистратор.Дата КАК Дата,
	|	ФинансовыйОбороты.Регистратор КАК ДокументРегистратор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ФинансовыйОбороты.СуммаОборотДт
	|		ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ФинансовыйОбороты.СуммаОборотКт
	|		ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ФинансовыйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ФинансовыйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ФинансовыйОбороты.КорСчет,
	|	ФинансовыйОбороты.КорСубконто1,
	|	ФинансовыйОбороты.КорСубконто2,
	|	ФинансовыйОбороты.КорСубконто3,
	|	&Валюта КАК Валюта,
	|	ФинансовыйОбороты.ВалютнаяСуммаОборот,
	|	НЕОПРЕДЕЛЕНО КАК ВидПрочихДоходовИРасходов,
	|	ФинансовыйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(
	|		&ДатаНачала,
	|		&ДатаОкончания,
	|		Регистратор,
	|		Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		Субконто1 в (&Организация)  И 
	|		   Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ФинансовыйОбороты.КорСчет В ИЕРАРХИИ (&ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА (НЕ ФинансовыйОбороты.КорСубконто1 = &Контрагент)
	|						ИНАЧЕ (НЕ(ФинансовыйОбороты.КорСубконто1 = &Контрагент))
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (НЕ (ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ФинансовыйОбороты.СуммаОборотДт
	|					ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|			И ВЫБОР
	|				КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|					ТОГДА ФинансовыйОбороты.СуммаОборотКт
	|				ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотКт
	|			КОНЕЦ = 0))
	|
	|УПОРЯДОЧИТЬ ПО Счет,
	|	Дата,
	|	ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	НаборДвижений=СтрукРекв.ПоДаннымОрганизации.Скопировать();
	//НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	НаборДвижений.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Финансовый"));
	
	//МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		
		НоваяСтрока.ДокументРегистратор= Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		НоваяСтрока.Счет      = Выборка.Счет;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		
		// Сформируем строку представления
		Представление = "";
		
		//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) Тогда
		//	
		//	Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
		//		
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
		//		Представление = "Курсовые разницы";
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
		//		Представление = "Санкции";
		//	ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
		//		Представление = "Суммовые разницы";
		//	Иначе
		//		Представление = Строка(Выборка.КорСубконто1);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		Если не ПустаяСтрока(Представление) Тогда
			// Строка уже отработана
			
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоКраткосрочнымКредитамИЗаймам) 
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
		//	Если (Выборка.Дебет >0) Тогда
		//		Представление = "Возврат займа";
		//	ИначеЕсли (Выборка.Кредит >0)Тогда
		//		Представление = "Займ";
		//	Иначе
		//		Представление = "Операции по займам";
		//	КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиям) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиям
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиямВал) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиямВал
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиямУЕ) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиямУЕ
		//	тогда
		//	Представление = "Претензия";
			
		ИначеЕсли Выборка.КорСчет = ПланыСчетов.Финансовый.Касса 
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Банк) тогда
			
			Если (Выборка.Кредит >0) Тогда
				
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками) Тогда
					Представление = "Возврат средств";
					
				//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
				//	Представление = "Оплата";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
				
			ИначеЕсли (Выборка.Дебет >0) Тогда
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками)	Тогда
					
					Представление = "Оплата";
					
				//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
				//	Представление = "Возврат средств";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками) тогда
			//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) 
			//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Продажи) Тогда
			//	Если Выборка.Дебет <> 0 Тогда
			//		Представление = "Оплата";
			//	Иначе
			//		Представление = "Приход";
			//	КонецЕсли;
			//ИначеЕсли (Выборка.Кредит <>0) Тогда
				Представление = "Приход";
			//КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
		//	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) 
		//		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Продажи) Тогда
		//		Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
		//			Представление = "Суммовая разница";
		//		ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
		//			Представление = "Продажа";
		//		Иначе
		//			Если Выборка.Дебет > 0 Тогда
		//				Представление = "Продажа";
		//			ИначеЕсли Выборка.Дебет < 0 Тогда
		//				Представление = "Возврат";
		//			Иначе
		//				Представление = "Оплата";
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Представление)Тогда
			Если Выборка.Дебет > 0 тогда
				Представление = "Принято";
			ИначеЕсли Выборка.Дебет < 0 тогда
				Представление = "Сторно: принято";
			ИначеЕсли Выборка.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.Операция") Тогда
				//Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			Иначе
				Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			КонецЕсли;
		Иначе
			Если Представление = "Оплата" И ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РасходИзБанка") Тогда
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
				?(НЕ ЗначениеЗаполнено(Выборка.ДокументРегистратор.ДатаОплаты), "'  .  .    '", Формат(Выборка.ДокументРегистратор.ДатаОплаты, "ДФ=dd.MM.yyyy"))+")";
			Иначе
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
				?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли
		КонецЕсли;					  
		// Определение вида движения по корр. счету и корр аналитике.
		//
		//НоваяСтрока.Представление      = МетаданныеДокумента.Синоним + " № " + НомерДокумента
		//					  + " от " + Формат(ДатаДокумента, "ДФ='дд ММ гггг'");
		
		НоваяСтрока.Представление = Представление;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ФинансовыйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ФинансовыйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Остатки(
		|			&ДатаНачала,
		|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Субконто1 В (&Организация)
		|				И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОстаткиНаНачало";
		
		//ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		СтрукРекв.ОстатокНаНачало= Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");

	Иначе
		
		//ОстатокНаНачало = 0;
		СтрукРекв.ОстатокНаНачало= 0;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), 
		Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), 
		Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ФинансовыйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ФинансовыйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&ДатаОкончания,
	|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|		Субконто1 в (&Организация)
	|				И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОстаткиНаКонец";
	
	//ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	СтрукРекв.ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	
	//Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
	//	
	//	НаборДвижений.Свернуть("Дата,ДокументРегистратор,Представление,Валюта","Дебет, Кредит, ВалютнаяСумма");
	//	
	//	Для каждого СтрокаДвижений Из НаборДвижений Цикл
	//		
	//		Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
	//			СтрокаДвижений.Представление = СтрокаДвижений.Представление 
	//				+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
	//		ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
	//			Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
	//			СтрокаДвижений.Представление = СтрокаДвижений.Представление
	//			+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
	//		КонецЕсли;
	//		
	//	КонецЦикла; 
	//	
	//Иначе
		
		НаборДвижений.Свернуть("Счет,Дата,ДокументРегистратор,Представление","Дебет, Кредит");	
		
	//КонецЕсли; 
	
	НаборДвижений.Сортировать("Счет, Дата,ДокументРегистратор,Представление");	
						  
	//ПоДаннымОрганизации.Загрузить(НаборДвижений);
	СтрукРекв.Вставить("ПоДаннымОрганизации",НаборДвижений);
КонецПроцедуры

Процедура ПересчитатьОстатки(СтрукРекв)

	СтрукРекв.ОстатокНаКонец = СтрукРекв.ОстатокНаНачало + СтрукРекв.ПоДаннымОрганизации.Итог("Дебет") -  СтрукРекв.ПоДаннымОрганизации.Итог("Кредит");
	//ЭлементыФормы.ОстатокНаНачалоКонтрагент.Значение = - ОстатокНаНачало;
	//ЭлементыФормы.ОстатокНаКонец.Значение = ОстатокНаКонец;
	
	//ОстатокНаКонецКонтрагент = - ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	//ЭлементыФормы.ОстатокНаКонецКонтрагент.Значение = ОстатокНаКонецКонтрагент;
	//
	//Если Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
	//	Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	//КонецЕсли; 
	//ЭлементыФормы.Расхождение.Значение = Расхождение;
	//
	//ЭлементыФормы.РасхождениеКонтрагент.Значение = Расхождение*(-1);

КонецПроцедуры

Функция ПечатьАктаСверки(СтрукРекв,СтруктураПараметры,ИндексыДокументов,СписокСсылок,СчСтрок)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = Документы.АктСверкиВзаиморасчетов.ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	//НазваниеОрганизации = Организация.НаименованиеПолное;
	НазваниеОрганизации = СтруктураПараметры.НаименованиеПолное;
	//Если ПустаяСтрока(НазваниеОрганизации) Тогда
	//	НазваниеОрганизации = Организация;
	//КонецЕсли;
	НаименованиеКонтрагента = Справочники.Организации.НайтиПоНаименованию(СтруктураПараметры.НаименованиеКонтрагента).НаименованиеПолное;
	//НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	//Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
	//	НаименованиеКонтрагента = Контрагент;
	//КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	
	
	//ИмяПредставителяОрганизации = ПредставительОрганизации;
	//ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
	
	ИмяПредставителяОрганизации = "";
	ИмяПредсатвителяКонтрагента = "";
	
	//Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
	//	|ИЗ
	//	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	//	|		&КонДата,
	//	|		СтруктурнаяЕдиница = &Организация
	//	|			И ФизическоеЛицо = &ФизическоеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	//	
	//	Запрос.УстановитьПараметр("Организация",Организация);
	//	Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
	//	Запрос.УстановитьПараметр("КонДата",Дата);
	//	
	//	Рез = Запрос.Выполнить();
	//	Если Рез.Пустой() тогда
	//		ДолжностьПредставителяОрганизации = "";
	//	Иначе
	//		Выборка = Рез.Выбрать();
	//		Выборка.Следующий();
	//		ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
	//	КонецЕсли;
	//Иначе
		ДолжностьПредставителяОрганизации = "";
	//КонецЕсли;
	
	ПредставительКонтрагента="";
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"",СокрЛП(представительКонтрагента.Должность));
	
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметры.ДатаНачала) Тогда
		Если  СтрукРекв.ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = СтрукРекв.ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = СтрукРекв.ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = СтрукРекв.ДатаНачала;
	КонецЕсли;		
	ДатаОкончания=СтрукРекв.ДатаОкончания;
	
	
	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	//Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента.Наименование);
	//КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	//ДанныеПредставителяОрганизации = ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
	//ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
	ПредставительОрганизации="";
	ФИОПредставителя = "" + ПредставительОрганизации;	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + ", с одной стороны, "
				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_____________________________________________",ПредставительКонтрагента) + ", с другой стороны, "
				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	
	
	ОбластьЗаголовок.Параметры.ВалютаДокумента = СтрукРекв.ВалютаДокумента;
	//ОбластьЗаголовок.Параметры.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	//СтрукРекв.ВалютаДокумента= Справочники.Валюты.НайтиПоКоду("643");
	
	ДокОб=Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	ПоДаннымОрганизации=ДокОб.ПоДаннымКонтрагента.Выгрузить();
	ПоДаннымКонтрагента=СтрукРекв.ПоДаннымОрганизации;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	//НачОстДебет  = ?(СтрукРекв.ОстатокНаНачало > 0, СтрукРекв.ОстатокНаНачало, 0);
	//НачОстКредит = ?(СтрукРекв.ОстатокНаНачало < 0, -СтрукРекв.ОстатокНаНачало, 0);
	
	НачОстКредит  = ?(СтрукРекв.ОстатокНаНачало > 0, СтрукРекв.ОстатокНаНачало, 0);
	НачОстДебет = ?(СтрукРекв.ОстатокНаНачало < 0, -СтрукРекв.ОстатокНаНачало, 0);
	
	
	//
	//ОстатокНаКонец = СтрукРекв.ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаКонец = 0;
	//
	//КонОстДебет  = ?(СтрукРекв.ОстатокНаКонец > 0, СтрукРекв.ОстатокНаКонец, 0);
	//КонОстКредит = ?(СтрукРекв.ОстатокНаКонец < 0, -СтрукРекв.ОстатокНаКонец, 0);
	
	
	
	КонОстДебет  = 0;
	КонОстКредит = 0;
	
	
	
	
	ОстатокНаКонецК = СтрукРекв.ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
			Если ТипЗнч(СтрокаОрганизации.ДокументРегистратор)=Тип("ДокументСсылка.ПоступлениеВБанк") или ТипЗнч(СтрокаОрганизации.ДокументРегистратор)=Тип("ДокументСсылка.РасходИзБанка") или ТипЗнч(СтрокаОрганизации.ДокументРегистратор)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда
				СписокСсылок.Добавить(СтрокаОрганизации.ДокументРегистратор);
				ИндексыДокументов.Вставить(СчСтрок, Строка(СтрокаОрганизации.ДокументРегистратор.УникальныйИдентификатор()));
			КонецЕсли; 
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		СчСтрок=СчСтрок+1;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	СверкаСогласована=Истина;
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если СверкаСогласована тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
	//   Если ПоДаннымОрганизации.Количество() = 0 и ОстатокНаНачало = 0 Тогда
	//       РезультатыСверки = "<сверка не проведена>";
	//  ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	//       РезультатыСверки = "<не указана дата сверки>";
	//   ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//       РезультатыСверки = "<не указан контрагент>";
	//   Иначе
	//	РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
	//		
	//   	Если ОстатокНаКонец > 0 Тогда
	//		РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//
	//   	ИначеЕсли ОстатокНаКонец < 0 Тогда
	//		РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//
	//   	Иначе
	//   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	//   	КонецЕсли;
	//КонецЕсли;
	//ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	//
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
	   	Если ПоДаннымКонтрагента.Количество() = 0 и СтрукРекв.ОстатокНаНачало = 0 Тогда
	   	    РезультатыСверки = "<сверка не проведена>";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(СтрукРекв.Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(СтрукРекв.ВалютаДокумента);
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(СтрукРекв.ВалютаДокумента);
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		//Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
		//	 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(СтрукРекв.ВалютаДокумента);
		//	 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
		//КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность = "________________";
	ОбластьПодвал.Параметры.ДолжностьК ="________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьАктаСверкиОбщ(СтрукРекв,СтруктураПараметры,ИндексыДокументов,СписокСсылок,СчСтрок)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = Документы.АктСверкиВзаиморасчетов.ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	//НазваниеОрганизации = Организация.НаименованиеПолное;
	НазваниеОрганизации = СтруктураПараметры.НаименованиеПолное;
	//Если ПустаяСтрока(НазваниеОрганизации) Тогда
	//	НазваниеОрганизации = Организация;
	//КонецЕсли;
	НаименованиеКонтрагента = Справочники.Организации.НайтиПоНаименованию(СтруктураПараметры.НаименованиеКонтрагента).НаименованиеПолное;
	//НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	//Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
	//	НаименованиеКонтрагента = Контрагент;
	//КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	
	
	//ИмяПредставителяОрганизации = ПредставительОрганизации;
	//ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
	
	ИмяПредставителяОрганизации = "";
	ИмяПредсатвителяКонтрагента = "";
	
	//Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
	//	|ИЗ
	//	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	//	|		&КонДата,
	//	|		СтруктурнаяЕдиница = &Организация
	//	|			И ФизическоеЛицо = &ФизическоеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	//	
	//	Запрос.УстановитьПараметр("Организация",Организация);
	//	Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
	//	Запрос.УстановитьПараметр("КонДата",Дата);
	//	
	//	Рез = Запрос.Выполнить();
	//	Если Рез.Пустой() тогда
	//		ДолжностьПредставителяОрганизации = "";
	//	Иначе
	//		Выборка = Рез.Выбрать();
	//		Выборка.Следующий();
	//		ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
	//	КонецЕсли;
	//Иначе
		ДолжностьПредставителяОрганизации = "";
	//КонецЕсли;
	
	ПредставительКонтрагента="";
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"",СокрЛП(представительКонтрагента.Должность));
	
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметры.ДатаНачала) Тогда
		Если  СтрукРекв.ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = СтрукРекв.ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = СтрукРекв.ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = СтрукРекв.ДатаНачала;
	КонецЕсли;
	СтрукРекв.ДатаОкончания= СтруктураПараметры.ДатаОкончания;
	ДатаОкончания=СтрукРекв.ДатаОкончания;
	
	
	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	//Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента.Наименование);
	//КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	//ДанныеПредставителяОрганизации = ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
	//ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
	ПредставительОрганизации="";
	ФИОПредставителя = "" + ПредставительОрганизации;	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + ", с одной стороны, "
				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_____________________________________________",ПредставительКонтрагента) + ", с другой стороны, "
				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	
	
	ОбластьЗаголовок.Параметры.ВалютаДокумента = СтрукРекв.ВалютаДокумента;
	//ОбластьЗаголовок.Параметры.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	//СтрукРекв.ВалютаДокумента= Справочники.Валюты.НайтиПоКоду("643");
	
	ДокОб=Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	ПоДаннымОрганизации=ДокОб.ПоДаннымКонтрагента.Выгрузить();
	ПоДаннымКонтрагента=СтрукРекв.ПоДаннымОрганизации;
	
	ТабДок.Очистить();
	//ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	//НачОстДебет  = ?(СтрукРекв.ОстатокНаНачало > 0, СтрукРекв.ОстатокНаНачало, 0);
	//НачОстКредит = ?(СтрукРекв.ОстатокНаНачало < 0, -СтрукРекв.ОстатокНаНачало, 0);
	
	НачОстКредит  = ?(СтрукРекв.ОстатокНаНачало > 0, СтрукРекв.ОстатокНаНачало, 0);
	НачОстДебет = ?(СтрукРекв.ОстатокНаНачало < 0, -СтрукРекв.ОстатокНаНачало, 0);
	
	
	//
	//ОстатокНаКонец = СтрукРекв.ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаКонец = 0;
	//
	//КонОстДебет  = ?(СтрукРекв.ОстатокНаКонец > 0, СтрукРекв.ОстатокНаКонец, 0);
	//КонОстКредит = ?(СтрукРекв.ОстатокНаКонец < 0, -СтрукРекв.ОстатокНаКонец, 0);
	
	
	
	КонОстДебет  = 0;
	КонОстКредит = 0;
	
	
	
	
	ОстатокНаКонецК = СтрукРекв.ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	ТекСчет=Неопределено;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
			Если СтрокаОрганизации.Счет<>ТекСчет Тогда
				ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Счет;
				ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
				МассСтр=ПоДаннымКонтрагента.НайтиСтроки(Новый Структура("Счет",СтрокаОрганизации.Счет));
				ИтДебет=0;
				ИтКредит=0;
				Для каждого СтрСчет Из МассСтр Цикл
					ИтДебет=ИтДебет+СтрСчет.Дебет;
					ИтКредит=ИтКредит+СтрСчет.Кредит;
				КонецЦикла;
				ОбластьОбороты.Параметры.СуммаОборотДтКонтр = ИтДебет;
				ОбластьОбороты.Параметры.СуммаОборотКтКонтр = ИтКредит;
				ТабДок.Вывести(ОбластьОбороты);
				ТабДок.Область(ТабДок.ВысотаТаблицы,,ТабДок.ВысотаТаблицы,).Шрифт=Новый Шрифт(,, Истина);
				СчСтрок=СчСтрок+1;
				ТекСчет=СтрокаОрганизации.Счет;
			КонецЕсли; 
			
			
			
			
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
			Если ТипЗнч(СтрокаОрганизации.ДокументРегистратор)=Тип("ДокументСсылка.ПоступлениеВБанк") или ТипЗнч(СтрокаОрганизации.ДокументРегистратор)=Тип("ДокументСсылка.РасходИзБанка") или ТипЗнч(СтрокаОрганизации.ДокументРегистратор)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда
				СписокСсылок.Добавить(СтрокаОрганизации.ДокументРегистратор);
				ИндексыДокументов.Вставить(СчСтрок, Строка(СтрокаОрганизации.ДокументРегистратор.УникальныйИдентификатор()));
			КонецЕсли; 
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		СчСтрок=СчСтрок+1;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	СверкаСогласована=Истина;
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если СверкаСогласована тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
	//   Если ПоДаннымОрганизации.Количество() = 0 и ОстатокНаНачало = 0 Тогда
	//       РезультатыСверки = "<сверка не проведена>";
	//  ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	//       РезультатыСверки = "<не указана дата сверки>";
	//   ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//       РезультатыСверки = "<не указан контрагент>";
	//   Иначе
	//	РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
	//		
	//   	Если ОстатокНаКонец > 0 Тогда
	//		РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//
	//   	ИначеЕсли ОстатокНаКонец < 0 Тогда
	//		РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//
	//   	Иначе
	//   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	//   	КонецЕсли;
	//КонецЕсли;
	//ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	//
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
	   	Если ПоДаннымКонтрагента.Количество() = 0 и СтрукРекв.ОстатокНаНачало = 0 Тогда
	   	    РезультатыСверки = "<сверка не проведена>";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(СтрукРекв.Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(СтрукРекв.ВалютаДокумента);
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(СтрукРекв.ВалютаДокумента);
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		//Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
		//	 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(СтрукРекв.ВалютаДокумента);
		//	 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
		//КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность = "________________";
	ОбластьПодвал.Параметры.ДолжностьК ="________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	
	//ТабДок.Вывести(ОбластьПодвал);
	ТабДок.УдалитьОбласть(ТабДок.Область(,1,,5),ТипСмещенияТабличногоДокумента.ПоГоризонтали);	
	Возврат ТабДок;
	
КонецФункции

// Получение метаданных по документам
// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	МетаданныеПоДокументам = Новый Соответствие();
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если МетаданныеПоДокументам[ТипДокумента] = Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
			МетаданныеПоДокументам.Вставить(ТипДокумента, ДокументСсылка.Метаданные());
		Иначе
			МетаданныеПоДокументам.Вставить(ТипДокумента, Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
    Возврат МетаданныеПоДокументам[ТипДокумента];
	
КонецФункции // ПолучитьМетаданныеДокумента()

Функция СформироватьСтруктуруДокумента(Док)
	СтруктураДок=Новый Структура("Реквизиты");
	СтруктураРекв=Новый Структура();
	СтруктураРекв.Вставить("ВидДок",Док.Метаданные().Имя);
	СтруктураРекв.Вставить("Дата",Строка(Док.Дата));
	СтруктураРекв.Вставить("Номер",Док.Номер);
	СтруктураРекв.Вставить("ВидДок",Док.Метаданные().Имя);
	Для каждого Рекв Из Док.Метаданные().Реквизиты Цикл
		СтруктураРекв.Вставить(Рекв.Имя,Строка(?(ТипЗнч(Док[Рекв.Имя])=Тип("Дата"),Формат(Док[Рекв.Имя],"ДФ=dd.MM.yyyy"),Док[Рекв.Имя])));
	КонецЦикла;
	СтруктураДок.Вставить("Реквизиты",СтруктураРекв);
	//
	СтруктураТЧ=Новый Структура();
	
	Для каждого ТЧ Из Док.Метаданные().ТабличныеЧасти Цикл
		Если Не ТЧ.Имя="Товары" Тогда
			 Продолжить;
		КонецЕсли;	
		//ТЗТабЧасти=Новый ТаблицаЗначений;
		//Для каждого Рекв Из ТЧ.Реквизиты Цикл
		//	ТЗТабЧасти.Колонки.Добавить(Рекв.Имя);
		//КонецЦикла;
		Сч=0;
		СоотСтрок=Новый Соответствие;
		Для каждого Стр Из Док[ТЧ.Имя] Цикл
			СтруктОднойСтроки=Новый Структура;
			//НовСтр=ТЗТабЧасти.Добавить();
			Для каждого Рекв Из ТЧ.Реквизиты Цикл
				//НовСтр[Рекв.Имя]= Строка(?(ТипЗнч(Док[ТЧ.Имя][Сч][Рекв.Имя])=Тип("Дата"),Формат(Док[ТЧ.Имя][Сч][Рекв.Имя],"ДФ=dd.MM.yyyy"),Док[ТЧ.Имя][Сч][Рекв.Имя]));
				СтруктОднойСтроки.Вставить(Рекв.Имя,Строка(?(ТипЗнч(Док[ТЧ.Имя][Сч][Рекв.Имя])=Тип("Дата"),Формат(Док[ТЧ.Имя][Сч][Рекв.Имя],"ДФ=dd.MM.yyyy"),Док[ТЧ.Имя][Сч][Рекв.Имя])));
			КонецЦикла;
			СоотСтрок.Вставить(Стр.НомерСтроки,СтруктОднойСтроки);
			Сч=Сч+1;
		КонецЦикла; 
		СтруктураТЧ.Вставить(ТЧ.Имя, СоотСтрок);
	КонецЦикла;
	СтруктураДок.Вставить("ТабличныеЧасти",СтруктураТЧ);
	Возврат СтруктураДок;
КонецФункции // ()


Функция СформироватьСтруктуруТоваровЗаказа(Товары)
	Сч=0;
	СоотСтрок=Новый Соответствие;
	Для каждого Стр Из Товары Цикл
		СтруктОднойСтроки=Новый Структура;
		Для каждого Рекв Из Товары.Колонки Цикл
			СтруктОднойСтроки.Вставить(Рекв.Имя,Строка(?(ТипЗнч(Товары[Сч][Рекв.Имя])=Тип("Дата"),Формат(Товары[Сч][Рекв.Имя],"ДФ=dd.MM.yyyy"),Товары[Сч][Рекв.Имя])));
		КонецЦикла;
		СоотСтрок.Вставить(Стр.НомерСтр,СтруктОднойСтроки);
		Сч=Сч+1;
	КонецЦикла; 
	Возврат СоотСтрок;
КонецФункции // ()

 
Функция ПолучитьТаблицуЗаказов(СтруктураПараметры)
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЗаказыПоставщикамОбороты.Номенклатура.Наименование КАК Номенклатура,
	//	|	СУММА(ЗаказыПоставщикамОбороты.КоличествоПриход) КАК Заказано,
	//	|	СУММА(ЗаказыПоставщикамОбороты.КоличествоРасход) КАК Поступило,
	//	|	СУММА(ВЫБОР
	//	|			КОГДА ЗаказыПоставщикамОбороты.КоличествоПриход - ЗаказыПоставщикамОбороты.КоличествоРасход > 0
	//	|				ТОГДА ЗаказыПоставщикамОбороты.КоличествоПриход - ЗаказыПоставщикамОбороты.КоличествоРасход
	//	|			ИНАЧЕ 0
	//	|		КОНЕЦ) КАК Ожидается,
	//	|	ВЫБОР
	//	|		КОГДА ЗаказыПоставщикамОбороты.КоличествоПриход <= ЗаказыПоставщикамОбороты.КоличествоРасход
	//	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	//	|		ИНАЧЕ ЗаказыПоставщикамОбороты.ЗаказПоставщику.ДатаПоступления
	//	|	КОНЕЦ КАК ДатаОжидаемогоПоступления,
	//	|	ЗаказыПоставщикамОбороты.ЗаказПоставщику.Номер КАК НомерЗаказа,
	//	|	ЗаказыПоставщикамОбороты.ЗаказПоставщику.Дата КАК ДатаЗаказа
	//	|ИЗ
	//	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(&ДатаНачала, &ДатаОкончания, Период, ЗаказПоставщику.Поставщик = &Поставщик) КАК ЗаказыПоставщикамОбороты
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВЫБОР
	//	|		КОГДА ЗаказыПоставщикамОбороты.КоличествоПриход <= ЗаказыПоставщикамОбороты.КоличествоРасход
	//	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	//	|		ИНАЧЕ ЗаказыПоставщикамОбороты.ЗаказПоставщику.ДатаПоступления
	//	|	КОНЕЦ,
	//	|	ЗаказыПоставщикамОбороты.Номенклатура.Наименование,
	//	|	ЗаказыПоставщикамОбороты.ЗаказПоставщику.Дата,
	//	|	ЗаказыПоставщикамОбороты.ЗаказПоставщику.Номер";
		
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Дата КАК Дата,
		|	ЗаказПоставщику.Номер,
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Проведен
		|	И НЕ ЗаказПоставщику.ПометкаУдаления
		|	И ЗаказПоставщику.Поставщик = &Поставщик
		|	И ЗаказПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	ЗаказПоставщику.Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНачала", СтруктураПараметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураПараметры.ДатаОкончания));
	Запрос.УстановитьПараметр("Поставщик", Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураПараметры.ИНН));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	ДокументыКВыгрузке= Новый Соответствие();
	ТоварыКВыгрузке= Новый Соответствие();

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого Стр Из РезультатЗапроса Цикл
	
	    ДокументыКВыгрузке.Вставить(Строка(Стр.Ссылка.УникальныйИдентификатор()),СформироватьСтруктуруДокумента(Стр.Ссылка));
		
		Запрос = Новый Запрос;
		Запрос.Текст = Документы.ЗаказПоставщику.ПолучитьТекстЗапросаПоТоварамПредзаказов();
		ОбЗаказ=Стр.Ссылка.ПолучитьОбъект();
		Запрос.УстановитьПараметр("ПредЗаказы"	, Стр.Ссылка.Предзаказы.Выгрузить().ВыгрузитьКолонку("Документ"));
		Запрос.УстановитьПараметр("Заказ"		, Стр.Ссылка);
		ТЗТовары=Запрос.Выполнить().Выгрузить();
		ТЗТовары.Колонки.Добавить("НомерСтр",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10)));
		Сч=0;
		Для каждого СтрТов Из ТЗТовары Цикл
			Сч=Сч+1;
			СтрТов.НомерСтр=Сч;
		КонецЦикла; 
		
	    ТоварыКВыгрузке.Вставить(Строка(Стр.Ссылка.УникальныйИдентификатор()),СформироватьСтруктуруТоваровЗаказа(ТЗТовары));
		
	КонецЦикла; 
	РезультатЗапроса.Колонки.Добавить("ГУИДЗаказ",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	Для каждого Стр Из РезультатЗапроса Цикл
		Стр.ГУИДЗаказ=Строка(Стр.Ссылка.УникальныйИдентификатор());
	КонецЦикла;
	РезультатЗапроса.Колонки.Удалить("Ссылка");
	СтруктураРезультат=Новый Структура("ТаблицаЗаказов, СтруктураДокументов, Товары",РезультатЗапроса, ДокументыКВыгрузке, ТоварыКВыгрузке);
		
	Возврат СтруктураРезультат;

КонецФункции // ()

Функция ПолучитьТаблицуЭтикеток(СтруктураПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект.Владелец КАК Номенклатура,
		|	ЗначенияСвойствОбъектов.Объект КАК Характеристика
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланвидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Значение = &Контрагент
		|	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураЭтикетки.Ссылка.Наименование КАК Наименование,
		|	НоменклатураЭтикетки.ИмяФайла
		|ИЗ
		|	Справочник.Номенклатура.Этикетки КАК НоменклатураЭтикетки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО НоменклатураЭтикетки.Ссылка = вт.Номенклатура
		|			И НоменклатураЭтикетки.Характеристика = вт.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураПараметры.ИНН));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Возврат  ВыборкаДетальныеЗаписи;

КонецФункции // ()

Функция ПолучитьСоответствиеКартинок(ТЗЭтикеток)
	СоотКартинок=Новый Соответствие;
	Для каждого стр Из ТЗЭтикеток Цикл
		Если ЗначениеЗаполнено(СокрЛП(стр.ИмяФайла)) Тогда
		    СоотКартинок.Вставить(СокрЛП(стр.ИмяФайла),Справочники.Контрагенты.ПолучитьДвоичныеДанные(стр.ИмяФайла));
		КонецЕсли; 
	КонецЦикла; 
	Возврат СоотКартинок;
КонецФункции // ()
 
 