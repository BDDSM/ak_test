
//+++АК SHEP 2017.10.26 ИП-00017032 Добавлен Web-Сервис PrivateOfficeSupplier
//Синхронизация данных с личным кабинетом поставщика на web


//+++АК SHEP 2018.07.04 ИП-00018753.03
Функция ПолучитьИПодключитьВнешнююОбработку(ИмяОбработки = "ВебСервис_PrivateOfficeSupplier")
	
	//Возврат Неопределено; // для внешней обработки!
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешниеОбработкиСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию(ИмяОбработки);
	Если НЕ ЗначениеЗаполнено(ВнешниеОбработкиСсылка) Тогда Возврат Неопределено; КонецЕсли;
	
	ДвоичныеДанные = ВнешниеОбработкиСсылка.ХранилищеВнешнейОбработки.Получить();
	
	#Если Сервер Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	#Иначе
		ИмяОбработки = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные.Записать(ИмяОбработки); 
	#КонецЕсли
	
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Обработка;
	
КонецФункции

//+++АК SHEP 2018.06.09 ИП-00018753.03
// Авторизация: получаем пользователя, тип пользователя, поставщика / аудитора или физ. лицо по ИНН и паролю
Функция Autorization(ИНН, Пароль) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.Autorization(ИНН, Пароль);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ИНН,Наименование,НаименованиеПолное,СтавкаНДС,ЗаказыКонтактноеЛицо,ЗаказыКонтактныйТелефон,ЗаказыЭлАдрес", ИНН, "", "", "", "", "", "");
	СтруктураВозврата.Вставить("ТипПользователя", "");
	СтруктураВозврата.Вставить("Пользователь", "");
	СтруктураВозврата.Вставить("ЭлПочтаДляИнтерфейса", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТипыРолейПользователя.Ссылка КАК ТипРоли,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ТипыРолей
		|ИЗ
		|	ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
		|ГДЕ
		|	ТипыРолейПользователя.Код = ""HotLineIT""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер),
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству),
		|	3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	МИНИМУМ(ТипыРолей.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ТипыРолейСотрудников
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО РолиПользователейСоставРоли.Сотрудник = ФизическиеЛица.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыРолей КАК ТипыРолей
		|		ПО (РолиПользователейТипыРолей.ТипРоли = ТипыРолей.ТипРоли)
		|ГДЕ
		|	ФизическиеЛица.ИНН = &ИНН
		|
		|СГРУППИРОВАТЬ ПО
		|	РолиПользователейСоставРоли.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА СоответствиеВебПользователейЛабораториям.Лаборатория ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПользователейКабинетаПоставщика.Поставщик)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПользователейКабинетаПоставщика.Аудитор)
		|	КОНЕЦ КАК ТипПользователя,
		|	ЕСТЬNULL(СоответствиеВебПользователейЛабораториям.Пользователь, Пользователи.Ссылка) КАК Пользователь,
		|	Контрагенты.Наименование,
		|	Контрагенты.НаименованиеПолное,
		|	Контрагенты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА НЕ СоответствиеВебПользователейЛабораториям.Лаборатория ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА Контрагенты.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПоставщикРаботаетСНДС,
		|	ВЫБОР
		|		КОГДА СоответствиеВебПользователейЛабораториям.Лаборатория ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(КонтактнаяИнформацияКонтрагента.Представление, """")
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ЭлПочтаДляИнтерфейса,
		|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК Телефон,
		|	Контрагенты.Код,
		|	Контрагенты.Ссылка
		|ИЗ
		|	РегистрСведений.АК_ПаролиКонтрагентов КАК АК_ПаролиКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО АК_ПаролиКонтрагентов.Контрагент = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВебПользователейЛабораториям КАК СоответствиеВебПользователейЛабораториям
		|		ПО (Контрагенты.Ссылка = СоответствиеВебПользователейЛабораториям.Лаборатория)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.Наименование = ""Поставщик"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
		|		ПО (Контрагенты.Ссылка = КонтактнаяИнформацияКонтрагента.Объект)
		|			И (ВЫРАЗИТЬ(КонтактнаяИнформацияКонтрагента.Вид КАК Справочник.ВидыКонтактнойИнформации).Код = ""00021"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
		|		ПО (Контрагенты.Ссылка = КонтактнаяИнформацияТелефон.Объект)
		|			И (КонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И АК_ПаролиКонтрагентов.Пароль = &Пароль
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Пользователи.СпециалистПоУпаковке, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПользователейКабинетаПоставщика.СотрудникОтделаУпаковки)
		|		КОГДА ТипыРолей.ТипРоли ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПользователейКабинетаПоставщика.ПустаяСсылка)
		|		КОГДА ТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПользователейКабинетаПоставщика.ПродактМенеджер)
		|		КОГДА ТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПользователейКабинетаПоставщика.Технолог)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПользователейКабинетаПоставщика.МастерДанных)
		|	КОНЕЦ,
		|	ЕСТЬNULL(Пользователи.Ссылка, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
		|	ФизическиеЛица.Наименование,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ФизическиеЛица.НаименованиеПолное, 1, 1) = """"
		|			ТОГДА ФизическиеЛица.Наименование
		|		ИНАЧЕ ФизическиеЛица.НаименованиеПолное
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка),
		|	ЛОЖЬ,
		|	"""",
		|	"""",
		|	ФизическиеЛица.Код,
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.ФизЛицо = ФизическиеЛица.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТипыРолейСотрудников КАК ТипыРолейСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТипыРолей КАК ТипыРолей
		|			ПО ТипыРолейСотрудников.Приоритет = ТипыРолей.Приоритет
		|		ПО (ТипыРолейСотрудников.Сотрудник = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	ФизическиеЛица.ИНН = &ИНН
		|	И НЕ ФизическиеЛица.ПометкаУдаления");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("Пароль", Пароль);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СправочникСсылка = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		
		флПарольПравильный = Истина;
		Если ТипЗнч(СправочникСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			флПарольПравильный = (Пароль = ФизическиеЛицаДополнительный.КодДоступаФизлицаПоКоду(ВыборкаЗапроса.Код));
		КонецЕсли;
		
		Если флПарольПравильный Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаЗапроса);
			СправочникСсылка = ВыборкаЗапроса.Ссылка;
			ТипПользователя = ?(РольДоступна("ПолныеПрава"), ПредопределенноеЗначение("Перечисление.ТипыПользователейКабинетаПоставщика.МастерДанных"), ВыборкаЗапроса.ТипПользователя);
			СтруктураВозврата.Вставить("ТипПользователя", XMLСтрока(ТипПользователя));
			СтруктураВозврата.Вставить("Пользователь", XMLСтрока(ВыборкаЗапроса.Пользователь));
		Иначе
			СправочникСсылка = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
		
		СтруктураВозврата.Вставить("СтавкаНДС", XMLСтрока(ВыборкаЗапроса.СтавкаНДС));
		
		Если ТипЗнч(СправочникСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			Справочники.ХарактеристикиНоменклатурыПоставщиков.ЗаполнитьКонтактыДляЗаказаПоставщика(СправочникСсылка, СтруктураВозврата);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Ссылка", Строка(СправочникСсылка.УникальныйИдентификатор()));
	
	СтрокаВозврата = РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураВозврата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтрокаВозврата;
	
КонецФункции

//+++АК SHEP 2017.11.08  ИП-00017032
// Авторизация: получаем поставщика по ИНН и паролю
Функция AutorizationБыло(ИНН, Пароль)
	
	СтруктураВозврата = Новый Структура("ИНН,Наименование,НаименованиеПолное,СтавкаНДС,ЗаказыКонтактноеЛицо,ЗаказыКонтактныйТелефон,ЗаказыЭлАдрес", ИНН, "", "", "", "", "", "");
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Наименование,
		|	Контрагенты.НаименованиеПолное,
		|	Контрагенты.СтавкаНДС,
		|	Контрагенты.Ссылка
		|ИЗ
		|	РегистрСведений.АК_ПаролиКонтрагентов КАК АК_ПаролиКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО АК_ПаролиКонтрагентов.Контрагент = Контрагенты.Ссылка
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И АК_ПаролиКонтрагентов.Пароль = &Пароль");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("Пароль", Пароль);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		КонтрагентСсылка = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаЗапроса);
		СтруктураВозврата.Вставить("СтавкаНДС", XMLСтрока(ВыборкаЗапроса.СтавкаНДС));
		КонтрагентСсылка = ВыборкаЗапроса.Ссылка;
		Справочники.ХарактеристикиНоменклатурыПоставщиков.ЗаполнитьКонтактыДляЗаказаПоставщика(КонтрагентСсылка, СтруктураВозврата);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Ссылка", Строка(КонтрагентСсылка.УникальныйИдентификатор()));
	
	СтрокаВозврата = РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураВозврата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтрокаВозврата;
	
КонецФункции

//+++АК SHEP 2017.10.30 ИП-00017032
Функция ПолучитьПоставщика(ПоставщикСтрокой)
Перем ПустойПоставщик;
	
	ПустойПоставщик = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ПоставщикСтрокой) Тогда
		Возврат ПустойПоставщик;
	ИначеЕсли ТипЗнч(ПоставщикСтрокой) <> Тип("Строка") Тогда
		Возврат ПустойПоставщик;
	ИначеЕсли СтрДлина(ПоставщикСтрокой) = 36 Тогда
		Возврат Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ПоставщикСтрокой));
	КонецЕсли;
	
	// считаем, что ИНН
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка,
		|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления");
	Запрос.УстановитьПараметр("ИНН", ПоставщикСтрокой);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ПустойПоставщик; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Возврат ВыборкаЗапроса.Ссылка;
	
КонецФункции

//+++АК SHEP 2017.10.31 ИП-00017032
Функция ПолучитьТипОбъекта(ВидОбъекта)
Перем ТипОбъекта;
	
	ТипОбъекта = "";
	Если Метаданные.Справочники.Найти(ВидОбъекта) <> Неопределено Тогда
		ТипОбъекта = "Справочник";
	ИначеЕсли Метаданные.РегистрыСведений.Найти(ВидОбъекта) <> Неопределено Тогда
		ТипОбъекта = "РегистрСведений";
	ИначеЕсли Метаданные.Документы.Найти(ВидОбъекта) <> Неопределено Тогда
		ТипОбъекта = "Документ";
	ИначеЕсли Метаданные.Перечисления.Найти(ВидОбъекта) <> Неопределено Тогда
		ТипОбъекта = "Перечисление";
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

//+++АК SHEP 2017.10.31 ИП-00017032
Функция ПолучитьСсылкуНаОбъект(ВидОбъекта, УИД, ТипОбъекта = "", СтруктураОтбора = Неопределено)
	
	Если ПустаяСтрока(ТипОбъекта) Тогда
		ТипОбъекта = ПолучитьТипОбъекта(ВидОбъекта);
	КонецЕсли;
	
	Если ТипОбъекта = "Справочник" Тогда
		Возврат Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
		
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		Возврат Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
		
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		НаборЗаписей = РегистрыСведений[ВидОбъекта].СоздатьНаборЗаписей();
		СтруктураОтбора = ?(ТипЗнч(УИД) = Тип("Структура"), УИД, РаботаСВнешнимВебСервером.СтруктураДанныхИзJSON(УИД));
		ПреобразоватьСтруктуруОтбораИзXDTO(СтруктураОтбора, ТипОбъекта, ВидОбъекта);
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		НаборЗаписей.Прочитать();
		Возврат НаборЗаписей;
		
	ИначеЕсли ТипОбъекта = "Перечисление" Тогда
		Возврат Перечисления[ВидОбъекта].Получить(УИД); // по индексу
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//+++АК SHEP 2017.11.07 ИП-00017032
Функция ПолучитьТипОбъектаДляXDTO(ТипОбъекта)
	
	Если ТипОбъекта = "Справочник" Тогда
		Возврат "CatalogObject";
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		Возврат "DocumentObject";
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		Возврат "InformationRegisterRecord";
	ИначеЕсли ТипОбъекта = "Перечисление" Тогда
		Возврат "EnumRef";
	КонецЕсли;
	
КонецФункции

//+++АК SHEP 2017.11.16 ИП-00017032
// получаем текст запроса по структуре полей
Функция ТекстЗапросаДляПредставления(ТипОбъекта, ВидОбъекта, СтруктураПолей, КакПредставление = Истина, ТекстУсловия = "", ИмяТЧ = "", УпорядочитьПо = "", ТаблицаДанных = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	Если ТаблицаДанных <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СтруктураПолей Цикл
			ИмяРекъ = КлючИЗначение.Ключ;
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаДанных." + СокрЛП(ИмяРекъ) + " КАК " + СокрЛП(ИмяРекъ) + ?(Ложь, "Представление", "") + ",";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаДанных.НомерСтроки КАК НомерСтроки";
		КонецЕсли;
		
		// убираем последнюю запятую
		ТекстЗапроса = ?(Прав(ТекстЗапроса, 1) = ",", Сред(ТекстЗапроса, 1, СтрДлина(ТекстЗапроса) - 1), ТекстЗапроса) + "
			|ПОМЕСТИТЬ ТаблицаДанных" + ИмяТЧ + "
			|ИЗ
			|	&ТаблицаДанных" + ИмяТЧ + " КАК ТаблицаДанных" + ?(ПустаяСтрока(ТекстУсловия), "", "
			|
			|ГДЕ
			|	" + ТекстУсловия) + ";
			|ВЫБРАТЬ";
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		ИмяРекъ = КлючИЗначение.Ключ;
		ТекстЗапроса = ТекстЗапроса + "
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанных." + СокрЛП(ИмяРекъ) + ") КАК " + СокрЛП(ИмяРекъ) + ?(КакПредставление, "Представление", "") + ",";
	КонецЦикла;
	
	ЗаписыватьУИД = (ТипОбъекта = "Справочник" ИЛИ ТипОбъекта = "Документ" ИЛИ ТипОбъекта = "Перечисление") И ТаблицаДанных = Неопределено;
	Если ЗаписыватьУИД Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаДанных.Ссылка КАК Ссылка";
	КонецЕсли;
	
	// убираем последнюю запятую
	ТекстЗапроса = ?(Прав(ТекстЗапроса, 1) = ",", Сред(ТекстЗапроса, 1, СтрДлина(ТекстЗапроса) - 1), ТекстЗапроса) + "
		|ИЗ
		|	" + ?(ТаблицаДанных = Неопределено, ТипОбъекта + "." + ВидОбъекта + ?(ИмяТЧ = "", "", "." + ИмяТЧ), "ТаблицаДанных" + ИмяТЧ) + " КАК ТаблицаДанных" + ?(ПустаяСтрока(ТекстУсловия), "", "
		|
		|ГДЕ
		|	" + ТекстУсловия);
	
	//Если ТаблицаДанных <> Неопределено Тогда
	//	ТекстЗапроса = ТекстЗапроса + ";
	//	|ВЫБРАТЬ * ИЗ ТаблицаДанных" + ИмяТЧ + " КАК ТаблицаДанных";
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТЧ) И ПустаяСтрока(УпорядочитьПо) Тогда
		УпорядочитьПо = "НомерСтроки";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(УпорядочитьПо) Тогда
		СтрокаУпорядочивания = "";
		МассивПолейДляУпорядочивания = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УпорядочитьПо, ",");
		Для Каждого ЗначениеУпорядочивания Из МассивПолейДляУпорядочивания Цикл
			СтрокаУпорядочивания = СтрокаУпорядочивания + ?(ПустаяСтрока(СтрокаУпорядочивания), "", ",") + "
			|	ТаблицаДанных." + ЗначениеУпорядочивания;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|" + СтрокаУпорядочивания;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//+++АК SHEP 2018.02.21 ИП-00017032: сделал отдельной процедурой
Процедура ПреобразоватьСтруктуруОтбораИзXDTO(СтруктураОтбора, ТипОбъекта, ВидОбъекта) Экспорт
	
	// отбор структурой в формате json
	//{"Поставщик":"315da1db-6223-11e6-adb2-005056a00106","Статус":"Создана"}
	
	ТипОбъектаДляXDTO = ПолучитьТипОбъектаДляXDTO(ТипОбъекта);
	ТипЭлементаСпискаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/enterprise/current-config", ТипОбъектаДляXDTO + "." + ВидОбъекта);
	
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		ИмяСвойстваОбъекта = КлючИЗначение.Ключ;
		СвойствоОбъекта = ТипЭлементаСпискаXDTO.Свойства.Получить(ИмяСвойстваОбъекта);
		Если ТипЗнч(СвойствоОбъекта) = Тип("СвойствоXDTO") Тогда
			ЗначРекъ = КлючИЗначение.Значение;
			ЗначРекъ = ?(ТипЗнч(ЗначРекъ) = Тип("Число"), Формат(ЗначРекъ, "ЧГ="), ЗначРекъ);
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(
				"<string xmlns=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""string"">" + ЗначРекъ + "</string>");
			Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
			Тип1С = НРег(СвойствоОбъекта.Тип.Имя);
			Если Тип1С = "decimal" Тогда
				Тип1С = "Число";
			ИначеЕсли Тип1С = "datetime" Тогда
				Тип1С = "Дата";
			КонецЕсли;
			Объект1С = Сериализатор.ПрочитатьXML(ЧтениеXML, ?(Тип1С = "anytype", Неопределено, Тип(Тип1С)));
			СтруктураОтбора.Вставить(ИмяСвойстваОбъекта, Объект1С);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//+++АК SHEP 2018.08.06 ИП-00018753.03
Функция ПолучитьАктивнуюНоменклатуруПроизводителя(Производитель)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ХарактеристикиНоменклатуры.Владелец = СпрНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
		|	И НЕ СпрНоменклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
		|	И НЕ СпрНоменклатура.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
		|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Значение В(&Производители)");
	Производители = Справочники.ХарактеристикиНоменклатурыПоставщиков.ПолучитьМассивКонтрагентовПоставщика(Производитель);
	Запрос.УстановитьПараметр("Производители", Производители);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

//+++АК SHEP 2017.10.30 ИП-00017032
// Получить список объектов
// Возвращает массив json-строк, состоящий из массива значений.
// Порядок следования значений совпадает с параметром "СписокПолей".
// Для таблиц справочников и документов самым первым значением будет Уникальный идентификатор.
Функция GetObjectsList(ВидОбъекта, СписокПолей = "Наименование", Знач ФильтрСтрокой = Неопределено, НомерСтраницы = 0, НаСтраницу = 0, ДопУсловие = "", Сортировка = "") Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetObjectsList(ВидОбъекта, СписокПолей, ФильтрСтрокой, НомерСтраницы, НаСтраницу, ДопУсловие, Сортировка);
	КонецЕсли;
	
	ТипОбъекта = ПолучитьТипОбъекта(ВидОбъекта);
	
	Запрос = Новый Запрос;
	
	ТекстУсловия = ДопУсловие;
	//+++АК SHEP 2018.02.26
	Если ВидОбъекта = "ОбращенияПокупателей" Тогда
		ТекстУсловия = ТекстУсловия + "
		|	" + ?(ПустаяСтрока(ТекстУсловия), "", "И ") + "
		|НЕ ИсточникОбращения = &ИсточникОбращенияСписаниеПоКачеству";
		Запрос.УстановитьПараметр("ИсточникОбращенияСписаниеПоКачеству", Справочники.ИсточникиОбращений.НайтиПоКоду("14"));
	КонецЕсли;
	//---АК SHEP 2018.02.26
	
	Если ЗначениеЗаполнено(ФильтрСтрокой) Тогда
		
		СтруктураОтбора = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ФильтрСтрокой);
		
		Если СтруктураОтбора.Количество() = 0 Тогда
			// если просто строка -- считаем, что поставщик
			Поставщик = ПолучитьПоставщика(ФильтрСтрокой);
			СтруктураОтбора.Вставить("Поставщик", Поставщик);
		Иначе
			
			ПреобразоватьСтруктуруОтбораИзXDTO(СтруктураОтбора, ТипОбъекта, ВидОбъекта);
			
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			ИмяСвойстваОбъекта = КлючИЗначение.Ключ;
			Запрос.УстановитьПараметр(ИмяСвойстваОбъекта, КлючИЗначение.Значение);
			
			ТекстУсловия = ТекстУсловия + "
			|	" + ?(ПустаяСтрока(ТекстУсловия), "", "И ") + "ТаблицаДанных." + ИмяСвойстваОбъекта + " = &" + ИмяСвойстваОбъекта;
		КонецЦикла;
		
	Иначе
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	//+++АК SHEP 2018.08.06 ИП-00018753.03
	Если СтруктураОтбора.Свойство("Производитель") И (ВидОбъекта = "ОбращенияПокупателей" ИЛИ ВидОбъекта = "ПроверкаКачестваТоваров") Тогда
		ТекстУсловия = ТекстУсловия + "
		|	" + ?(ПустаяСтрока(ТекстУсловия), "", "И ") + "ТаблицаДанных.Номенклатура В (&СписокНоменклатурыПроизводителя)";
		Запрос.УстановитьПараметр("СписокНоменклатурыПроизводителя", ПолучитьАктивнуюНоменклатуруПроизводителя(СтруктураОтбора["Производитель"]));
	КонецЕсли;
	//---АК SHEP 2018.08.06
	
	ЗаписыватьУИД = (ТипОбъекта = "Справочник" ИЛИ ТипОбъекта = "Документ" ИЛИ ТипОбъекта = "Перечисление");
	
	СписокОбъектовXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("PrivateOfficeSupplierXDTO", "ObjectsList"));
	
	//+++АК SHEP 2018.02.26: возвращаем кол-во записей
	КоличествоЗаписей = 0;
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СУММА(1) КАК Total
		|ИЗ
		|	" + ТипОбъекта + "." + ВидОбъекта + " КАК ТаблицаДанных" + ?(ПустаяСтрока(ТекстУсловия), "", "
		|
		|ГДЕ
		|	" + ТекстУсловия);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		КоличествоЗаписей = ВыборкаЗапроса.Total;
		//---АК SHEP 2018.02.26
		
		СтруктураПолей = Новый Структура(СписокПолей);
		ТекстЗапроса = ТекстЗапросаДляПредставления(ТипОбъекта, ВидОбъекта, СтруктураПолей, ТипОбъекта = "Перечисление", ТекстУсловия,, Сортировка);
		
		//+++АК SHEP 2018.02.26
		//Если ВидОбъекта = "ОбращенияПокупателей" Тогда
		//	ТекстЗапроса =
		//	"ВЫБРАТЬ
		//	|	ДатаДок КАК ДатаДок_Упорядочивание,
		//	|" + Сред(ТекстЗапроса, 8) + "
		//	|УПОРЯДОЧИТЬ ПО
		//	|	ДатаДок_Упорядочивание УБЫВ";
		//КонецЕсли;
		
		Если НомерСтраницы * НаСтраницу <> 0 Тогда
			ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(НомерСтраницы * НаСтраницу, "ЧГ=") + Сред(ТекстЗапроса, 8);
		КонецЕсли;
		//---АК SHEP 2018.02.26

		Запрос.Текст = ТекстЗапроса;
		
		Если ТипОбъекта = "Перечисление" Тогда СтруктураПолей = Новый Структура("СсылкаПредставление"); КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Счётчик = 0;
			НачальнаяЗапись = (НомерСтраницы - 1) * НаСтраницу;
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			Пока ВыборкаЗапроса.Следующий() Цикл
				
				Счётчик = Счётчик + 1;
				Если НачальнаяЗапись <> 0 И Счётчик <= НачальнаяЗапись Тогда Продолжить; КонецЕсли; // пропускаем ненужные записи
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписьJSON.ЗаписатьНачалоМассива();
				
				Если ЗаписыватьУИД Тогда
					//ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаЗапроса.Ссылка.УникальныйИдентификатор()));
					ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаЗапроса.Ссылка)); // то же самое
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктураПолей, ВыборкаЗапроса);
				Для Каждого КлючИЗначение Из СтруктураПолей Цикл
					ТекЗнач = КлючИЗначение.Значение;
					ЗаписьJSON.ЗаписатьЗначение(?(ТекЗнач = Null, "", ТекЗнач)); // обработка значения Null (например, реквизит используется только для элементов)
				КонецЦикла;
				
				ЗаписьJSON.ЗаписатьКонецМассива();
				
				СписокОбъектовXDTO.Element.Добавить(ЗаписьJSON.Закрыть());
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОбъектовXDTO.Total = ?(ЗначениеЗаполнено(КоличествоЗаписей), КоличествоЗаписей, 0); // обработка Null
	
	Возврат СписокОбъектовXDTO;
	
КонецФункции

//+++АК SHEP 2017.10.30 ИП-00017032
// Получить данные объекта
Функция GetObjectData(ВидОбъекта, Ссылка, Знач ФорматДанных = "JSON") Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetObjectData(ВидОбъекта, Ссылка, ФорматДанных);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	ТипОбъекта = ПолучитьТипОбъекта(ВидОбъекта);
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		ЭтоОбъект = Ложь;
		СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, Ссылка, ТипОбъекта, СтруктураОтбора);
		ЗначениеОбъекта = ?(ТипОбъекта = "РегистрСведений", СсылкаНаОбъект, СсылкаНаОбъект.ПолучитьОбъект());
	Иначе
		//+++АК SHEP 2018.04.16: если в Ссылку передаём объект
		ЭтоОбъект = Истина;
		ЗначениеОбъекта = Ссылка;
		СсылкаНаОбъект = ЗначениеОбъекта.Ссылка
	КонецЕсли;
	
	ВозвращаемоеЗначение = Неопределено;
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ФорматДанных = ВРег(ФорматДанных);
	Если ФорматДанных = "XML" Тогда
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		
		Сериализатор.ЗаписатьXML(ЗаписьXML, ЗначениеОбъекта, НазначениеТипаXML.Явное);
		ВозвращаемоеЗначение = ЗаписьXML.Закрыть();
		
	ИначеЕсли ФорматДанных = "JSON" Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Сериализатор.ЗаписатьJSON(ЗаписьJSON, ЗначениеОбъекта, НазначениеТипаXML.Явное);
		
		ТипОбъектаДляXDTO = ПолучитьТипОбъектаДляXDTO(ТипОбъекта);
		ТипЭлементаСпискаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/enterprise/current-config", ТипОбъектаДляXDTO + "." + ВидОбъекта);
		
		// для реквизитов-ссылок добавляем ещё и представление (включая табличные части)
		РеквизитыДляПредставления = Новый Структура("Ссылка", Новый Структура);
		Для Каждого СвойствоТипа Из ТипЭлементаСпискаXDTO.Свойства Цикл
			
			ИмяТипаСвойства = СвойствоТипа.Тип.Имя;
			Если Найти(ИмяТипаСвойства, "CatalogRef.") = 1 ИЛИ Найти(ИмяТипаСвойства, "EnumRef.") = 1 ИЛИ Найти(ИмяТипаСвойства, "DocumentRef.") = 1
			ИЛИ Найти(ИмяТипаСвойства, "anyType") = 1 ИЛИ Найти(ИмяТипаСвойства, "AnyRef") = 1 Тогда
				РеквизитыДляПредставления.Ссылка.Вставить(СвойствоТипа.Имя);
				
			ИначеЕсли Найти(ИмяТипаСвойства, "CatalogTabularSectionRow.") = 1 ИЛИ Найти(ИмяТипаСвойства, "DocumentTabularSectionRow.") = 1 Тогда
				ИмяТЧ = СвойствоТипа.Имя;
				РеквизитыДляПредставления.Вставить(ИмяТЧ, Новый Структура);
				СвойстваТЧ = СвойствоТипа.Тип.Свойства;
				Для Каждого СвойствоТипаТЧ Из СвойстваТЧ Цикл
					ИмяТипаСвойстваТЧ = СвойствоТипаТЧ.Тип.Имя;
					Если Найти(ИмяТипаСвойстваТЧ, "CatalogRef.") = 1 ИЛИ Найти(ИмяТипаСвойстваТЧ, "EnumRef.") = 1 ИЛИ Найти(ИмяТипаСвойстваТЧ, "DocumentRef.") = 1
					ИЛИ Найти(ИмяТипаСвойстваТЧ, "anyType") = 1 ИЛИ Найти(ИмяТипаСвойстваТЧ, "AnyRef") = 1 Тогда
						РеквизитыДляПредставления[ИмяТЧ].Вставить(СвойствоТипаТЧ.Имя);
					КонецЕсли;
				КонецЦикла;
				
				// удаляем табл. части без представлений
				Если РеквизитыДляПредставления[ИмяТЧ].Количество() = 0 Тогда РеквизитыДляПредставления.Удалить(ИмяТЧ); КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВозвращаемоеЗначение = ЗаписьJSON.Закрыть();
		
		// дописываем представление полей
		Если РеквизитыДляПредставления.Количество() > 0 Тогда
			
			МассивТЧ = Новый Массив;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = "";
			ТекстУсловия = "";
			Если СтруктураОтбора.Количество() = 0 И НЕ ЭтоОбъект Тогда
				СтруктураОтбора.Вставить("Ссылка", СсылкаНаОбъект);
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
				ИмяПоля = КлючИЗначение.Ключ;
				ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), " ", "
					|	И ") + ИмяПоля + " = &" + ИмяПоля;
				Запрос.УстановитьПараметр(ИмяПоля, КлючИЗначение.Значение);
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из РеквизитыДляПредставления Цикл
				СтруктураПолей = КлючИЗначение.Значение;
				ИмяТЧ = ?(КлючИЗначение.Ключ = "Ссылка", "", КлючИЗначение.Ключ);
				МассивТЧ.Добавить(ИмяТЧ);
				
				ТаблицаДанных = ?(ЭтоОбъект = Ложь, Неопределено, ?(ИмяТЧ = "", Новый ТаблицаЗначений, ЗначениеОбъекта[ИмяТЧ].Выгрузить()));
				// заполняем строку таблицы значений из объекта
				Если ЭтоОбъект И ИмяТЧ = "" Тогда
					СтруктураПолей.Удалить("Ref");
					// добавляем в таблицу поля согласно именам переданных свойств
					Для Каждого ИмяСвойстваКЗ ИЗ СтруктураПолей Цикл
						ИмяРекъ = ИмяСвойстваКЗ.Ключ;
						МассивТипов = Новый Массив;
						МассивТипов.Добавить(ТипЗнч(ЗначениеОбъекта[ИмяРекъ]));
						ТаблицаДанных.Колонки.Добавить(ИмяРекъ, Новый ОписаниеТипов(МассивТипов));
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), ЗначениеОбъекта);
				КонецЕсли;
				
				ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляПредставления(ТипОбъекта, ВидОбъекта, СтруктураПолей, Ложь, ТекстУсловия, ИмяТЧ,, ТаблицаДанных) + ";" + Символы.ПС + Символы.ПС;
				Запрос.УстановитьПараметр("ТаблицаДанных" + ИмяТЧ, ТаблицаДанных);
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапроса;
			
			МассивРезультатов = Запрос.ВыполнитьПакет();
			
			ИмяТЧ = "";
			ИмяСвойства = "";
			УровеньОбъекта = 0;
			ТипПредыдущегоЗначения = "";
			
			ЗаписьJSON = Новый ЗаписьJSON;
			//ЗаписьJSON.ПроверятьСтруктуру = Ложь;
			ЗаписьJSON.УстановитьСтроку();
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ВозвращаемоеЗначение);
			
			Пока ЧтениеJSON.Прочитать() Цикл
				
				ТипТекущегоЗначения = ЧтениеJSON.ТипТекущегоЗначения;
				
				Если ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
					УровеньОбъекта = УровеньОбъекта + 1;
					ЗаписьJSON.ЗаписатьНачалоОбъекта();
					
					// записываем представления для реквизитов объекта
					Если УровеньОбъекта = 2 Тогда
						РезультатЗапроса = МассивРезультатов[?(ЭтоОбъект, 1, 0)];
						Если НЕ РезультатЗапроса.Пустой() Тогда
							ВыборкаЗапроса = РезультатЗапроса.Выбрать();
							ВыборкаЗапроса.Следующий();
							СтруктураРеквизитов = РеквизитыДляПредставления["Ссылка"];
							ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаЗапроса);
							Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
								ЗаписьJSON.ЗаписатьИмяСвойства(КлючИЗначение.Ключ + "Представление");
								ЗаписьJSON.ЗаписатьЗначение(КлючИЗначение.Значение);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
					УровеньОбъекта = УровеньОбъекта - 1;
					
					// в конец строки ТЧ добавляем представление реквизитов
					Если ЗначениеЗаполнено(ИмяТЧ) И НЕ РезультатЗапроса.Пустой() Тогда
						ВыборкаЗапроса.Следующий();
						ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаЗапроса);
						Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
							ЗаписьJSON.ЗаписатьИмяСвойства(КлючИЗначение.Ключ + "Представление");
							ЗаписьJSON.ЗаписатьЗначение(КлючИЗначение.Значение);
						КонецЦикла;
					КонецЕсли;
					
					ЗаписьJSON.ЗаписатьКонецОбъекта();
					
				ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
					ЗаписьJSON.ЗаписатьНачалоМассива();
					ПозТЧ = МассивТЧ.Найти(ИмяСвойства);
					Если ПозТЧ <> Неопределено Тогда
						ИмяТЧ = ИмяСвойства;
						РезультатЗапроса = МассивРезультатов[ПозТЧ + ?(ЭтоОбъект, ПозТЧ + 1, 0)]; // т.к. для объекта ещё создаются временные таблицы
						Если НЕ РезультатЗапроса.Пустой() Тогда
							ВыборкаЗапроса = РезультатЗапроса.Выбрать();
							СтруктураРеквизитов = РеквизитыДляПредставления[ИмяТЧ];
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
					ЗаписьJSON.ЗаписатьКонецМассива();
					ИмяТЧ = "";
					
				ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
					ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
					
				Иначе
					ЗаписьJSON.ЗаписатьЗначение(ЧтениеJSON.ТекущееЗначение);
					
				КонецЕсли;
				
				ТипПредыдущегоЗначения = ТипТекущегоЗначения;
				
			КонецЦикла;
			
			ВозвращаемоеЗначение = ЗаписьJSON.Закрыть();
			
		КонецЕсли;
		
	ИначеЕсли ФорматДанных = "XDTO" Тогда
		
		ВозвращаемоеЗначение = Сериализатор.ЗаписатьXDTO(ЗначениеОбъекта);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//+++АК SHEP 2017.10.30 ИП-00017032
// Записать данные объекта
Функция SaveObjectData(ВидОбъекта, Данные) Экспорт
Перем ФорматДанных;
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.SaveObjectData(ВидОбъекта, Данные);
	КонецЕсли;
	
	ФорматДанных = "JSON";
	
	ЭтоРегистрСведений = Ложь;
	
	Если ФорматДанных = "XML" Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Данные);
		Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
	ИначеЕсли ФорматДанных = "JSON" Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Данные);
		Объект = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
		
	Иначе
		Возврат "";
	КонецЕсли;
	
	//+++АК SHEP 2018.03.01 ИП-00017032: если фильтр пустой или не полносью заполнен, запрещаем запись!
	Если Метаданные.РегистрыСведений.Содержит(Объект.Метаданные()) Тогда
		ЭтоРегистрСведений = Истина;
		
		Для Каждого ЭлтОтбора Из Объект.Отбор Цикл
			Если НЕ ЗначениеЗаполнено(ЭлтОтбора.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 2018.03.01
	
	Попытка
		Объект.Записать();
		Если ЭтоРегистрСведений Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат Строка(Объект.Ссылка.УникальныйИдентификатор());
	
КонецФункции

//+++АК SHEP 2017.10.31 ИП-00017032
// Получить данные файла
//+++АК SHEP 2018.03.12: добавил для док. "ПроверкаКачестваТоваров"
Функция GetFileData(ВидОбъекта, УИД, Знач ИмяФайла) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetFileData(ВидОбъекта, УИД, ИмяФайла);
	КонецЕсли;
	
	ТипОбъекта = "";
	СтруктураОтбора = Новый Структура;
	СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, УИД, ТипОбъекта, СтруктураОтбора);
	
	Если ТипОбъекта = "РегистрСведений" Тогда
		Если СсылкаНаОбъект.Количество() <> 1 Тогда Возврат Неопределено; КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) ИЛИ СсылкаНаОбъект.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	КонецЕсли;
	
	Если ВидОбъекта = "ПроверкаКачестваТоваров" Тогда
		// в реквизите "ИмяФайла" содержится полный путь к файлу
		КаталогХраненияФайлов = ""; //Документы[ВидОбъекта].ПолучитьКаталогХраненияФайлов(СсылкаНаОбъект);
		
	ИначеЕсли ВидОбъекта = "КартыДизайнПроектов" ИЛИ ВидОбъекта = "ХарактеристикиНоменклатурыПоставщиков" Тогда
		ПараметрДляКаталогаФайлов = ?(ВидОбъекта = "ХарактеристикиНоменклатурыПоставщиков", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "Поставщик"), СсылкаНаОбъект);
		КаталогХраненияФайлов = Справочники[ВидОбъекта].ПолучитьКаталогХраненияФайлов(ПараметрДляКаталогаФайлов);
		
	ИначеЕсли ВидОбъекта = "ОбращенияПокупателей" Тогда

		ТабФайлов = СсылкаНаОбъект[0].ПрикрепленныеФайлы;
		Если НЕ ЗначениеЗаполнено(ТабФайлов) Тогда Возврат Неопределено; КонецЕсли;
		
		ТЗнФайлов = ЗначениеИзСтрокиВнутр(ТабФайлов);
		Если ТипЗнч(ТЗнФайлов) <> Тип("ТаблицаЗначений") Тогда Возврат Неопределено; КонецЕсли;
		
		СтрокаТЗн = ТЗнФайлов.Найти(ИмяФайла, "ИмяФайла");
		Если СтрокаТЗн = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		ПараметрДляКаталогаФайлов = СтрокаТЗн.ДатаДобавления;
		КаталогХраненияФайлов = РегистрыСведений[ВидОбъекта].ПолучитьКаталогХраненияФайлов(ПараметрДляКаталогаФайлов);
		ИмяФайла = СтрокаТЗн.Идентификатор + СтрокаТЗн.Расширение;
		
	//+++АК SHEP 2018.07.02 ИП-00018753.04
	ИначеЕсли ВидОбъекта = "ОбращенияПокупателейОтветыПроизводителейНаВключения" Тогда

		ТабФайлов = СсылкаНаОбъект[0].ПрикреплённыеФайлы;
		Если НЕ ЗначениеЗаполнено(ТабФайлов) Тогда Возврат Неопределено; КонецЕсли;
		
		ТЗнФайлов = ЗначениеИзСтрокиВнутр(ТабФайлов);
		Если ТипЗнч(ТЗнФайлов) <> Тип("ТаблицаЗначений") Тогда Возврат Неопределено; КонецЕсли;
		
		СтрокаТЗн = ТЗнФайлов.Найти(ИмяФайла, "ИмяФайла");
		Если СтрокаТЗн = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		ПараметрДляКаталогаФайлов = СтрокаТЗн.ДатаДобавления;
		КаталогХраненияФайлов = РегистрыСведений[ВидОбъекта].ПолучитьКаталогХраненияФайлов(ПараметрДляКаталогаФайлов);
		ИмяФайла = СтрокаТЗн.Идентификатор + СтрокаТЗн.Расширение;
	//---АК SHEP 2018.07.02
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПолноеИмяФайла = КаталогХраненияФайлов + ИмяФайла;
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	//Возврат Base64Строка(ДвоичныеДанные);
	Возврат ДвоичныеДанные;
	
КонецФункции

//+++АК SHEP 2018.10.18 ИП-00018753.05
// Получить данные файла (предпросмотр)
Функция GetFilePreview(ВидОбъекта, Ссылка, ИмяФайла, Размер = 100) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetFilePreview(ВидОбъекта, Ссылка, ИмяФайла, Размер);
	КонецЕсли;
	
КонецФункции

//+++АК SHEP 2018.08.06 ИП-00018753.03
Функция СоздатьТЗнПрикреплённыхФайлов()
	
	Возврат РегистрыСведений.ОбращенияПокупателейОтветыПроизводителейНаВключения.СоздатьТЗнПрикреплённыхФайлов();
	
КонецФункции

//+++АК SHEP 2018.08.06 ИП-00018753.03
Функция ВернутьТЗнПрикреплённыхФайлов(ТабФайлов)
	
	Возврат РегистрыСведений.ОбращенияПокупателейОтветыПроизводителейНаВключения.ВернутьТЗнПрикреплённыхФайлов(ТабФайлов);
	
КонецФункции

//+++АК SHEP 2017.10.31 ИП-00017032
// Сохранить данные файла
Функция SaveFileData(ВидОбъекта, УИД, ИмяФайла, ДанныеФайла) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.SaveFileData(ВидОбъекта, УИД, ИмяФайла, ДанныеФайла);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = "";
	СтруктураОтбора = Новый Структура;
	СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, УИД, ТипОбъекта, СтруктураОтбора);
	
	Если ТипОбъекта = "РегистрСведений" Тогда
		Если СсылкаНаОбъект.Количество() <> 1 Тогда Возврат Неопределено; КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) ИЛИ СсылкаНаОбъект.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаДляЗаписи = ИмяФайла;
	Если ВидОбъекта = "ПроверкаКачестваТоваров" Тогда
		КаталогХраненияФайлов = Документы[ВидОбъекта].ПолучитьКаталогХраненияФайлов(СсылкаНаОбъект);
		//+++АК SHEP 2018.08.14: добавил ТЧ "ФайлыПроизводителя"
		//ОбъектФайл = Новый Файл(ИмяФайла);
		//ИмяФайлаДляЗаписи = Строка(Новый УникальныйИдентификатор()) + ОбъектФайл.Расширение;
		//---АК SHEP 2018.08.14
		
	ИначеЕсли ВидОбъекта = "КартыДизайнПроектов" ИЛИ ВидОбъекта = "ХарактеристикиНоменклатурыПоставщиков" Тогда
		ПараметрДляКаталога = ?(ВидОбъекта = "ХарактеристикиНоменклатурыПоставщиков", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "Поставщик"), СсылкаНаОбъект);
		КаталогХраненияФайлов = Справочники[ВидОбъекта].ПолучитьКаталогХраненияФайлов(ПараметрДляКаталога);
		
	//+++АК SHEP 2018.07.10 ИП-00018753.03
	//+++АК SHEP 2018.08.06 ИП-00018753.03: добавил "ОбращенияПокупателей"
	//ИначеЕсли ВидОбъекта = "ОбращенияПокупателейОтветыПроизводителейНаВключения" Тогда
	ИначеЕсли ВидОбъекта = "ОбращенияПокупателей" ИЛИ ВидОбъекта = "ОбращенияПокупателейОтветыПроизводителейНаВключения" Тогда
	//---АК SHEP 2018.08.06
		ПараметрДляКаталога = ТекущаяДата();
		КаталогХраненияФайлов = РегистрыСведений[ВидОбъекта].ПолучитьКаталогХраненияФайлов(ПараметрДляКаталога);
		ОбъектФайл = Новый Файл(ИмяФайла);
		ИмяФайлаДляЗаписи = Строка(Новый УникальныйИдентификатор()) + ОбъектФайл.Расширение;
	//---АК SHEP 2018.07.10
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ?(ТипЗнч(ДанныеФайла) = Тип("ДвоичныеДанные"), ДанныеФайла, Base64Значение(ДанныеФайла));
	
	// если нет данных, ничего не сохраняем
	Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") ИЛИ ДвоичныеДанныеФайла.Размер() = 0 Тогда Возврат Ложь; КонецЕсли;
	
	ПолноеИмяФайла = КаталогХраненияФайлов + ИмяФайлаДляЗаписи;
	ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
	
	Если ВидОбъекта = "ПроверкаКачестваТоваров" Тогда
		
		//+++АК SHEP 2018.08.14: добавил ТЧ "ФайлыПроизводителя"
		// в реквизите "ИмяФайлаОтвета" содержится полный путь к файлу, в "ИмяФайлаОтветаСРасширением" — имя файла для отображения
		//ОбъектДляЗаписи = СсылкаНаОбъект.ПолучитьОбъект();
		//
		//Если ОбъектДляЗаписи.ФайлыПроизводителя.Найти(ИмяФайла, "НаименованиеФайла") = Неопределено Тогда
		//	ОбъектДляЗаписи.ИмяФайлаОтвета = ПолноеИмяФайла;
		//	ОбъектДляЗаписи.ИмяФайлаОтветаСРасширением = ИмяФайла;
		//	ОбъектДляЗаписи.Записать();
		//КонецЕсли;
		
	//+++АК SHEP 2018.07.10 ИП-00018753.03
	//+++АК SHEP 2018.08.06 ИП-00018753.03: добавил "ОбращенияПокупателей" 
	//ИначеЕсли ВидОбъекта = "ОбращенияПокупателейОтветыПроизводителейНаВключения" Тогда
	ИначеЕсли ВидОбъекта = "ОбращенияПокупателей" ИЛИ ВидОбъекта = "ОбращенияПокупателейОтветыПроизводителейНаВключения" Тогда
	//---АК SHEP 2018.08.06
		
		ОбъектДляЗаписи = РегистрыСведений[ВидОбъекта].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ОбъектДляЗаписи, СтруктураОтбора);
		
		ОбъектДляЗаписи.Прочитать();
		Если НЕ ОбъектДляЗаписи.Выбран() Тогда Возврат Ложь; КонецЕсли;
		
		ИмяРеквизитаПрикреплённыеФайлы =?(ВидОбъекта = "ОбращенияПокупателейОтветыПроизводителейНаВключения", "ПрикреплённыеФайлы", "ПрикрепленныеФайлы");
		ТабФайлов = ОбъектДляЗаписи[ИмяРеквизитаПрикреплённыеФайлы];
		ТЗнФайлов = ВернутьТЗнПрикреплённыхФайлов(ТабФайлов);
		Если ТЗнФайлов = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		СтрокаТЗн = ТЗнФайлов.Добавить();
		СтрокаТЗн.ИмяФайла = ИмяФайла;
		ОбъектФайл = Новый Файл(ИмяФайлаДляЗаписи);
		СтрокаТЗн.Идентификатор = ОбъектФайл.ИмяБезРасширения;
		СтрокаТЗн.ДатаДобавления = ПараметрДляКаталога;
		СтрокаТЗн.Расширение = ОбъектФайл.Расширение;
		СтрокаТЗн.ЭтоОтветПроизводителя = Истина;
		
		ОбъектДляЗаписи[ИмяРеквизитаПрикреплённыеФайлы] = ЗначениеВСтрокуВнутр(ТЗнФайлов);
		ОбъектДляЗаписи.Записать();
	//---АК SHEP 2018.07.10
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//+++АК SHEP 2017.10.31 ИП-00017032
// Получить пояснение к карте дизайн-проекта
Функция GetExplanation(ИмяПоля, ТипПродукции)
	
	//+++АК SHEP 2018.05.30 ИП-00018753.01: добавил возможность отправки всех пояснений, если ИмяПоля не заполнено
	Если НЕ ЗначениеЗаполнено(ИмяПоля) Тогда
		Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(РегистрыСведений.ПоясненияКартДизайнПроектов.ПолучитьВсеПояснения(ТипПродукции));
	КонецЕсли;
	//---АК SHEP 2018.05.30
	
	Возврат РегистрыСведений.ПоясненияКартДизайнПроектов.ПолучитьПояснение(ИмяПоля, ТипПродукции);
	
КонецФункции

//+++АК SHEP 2017.11.15 ИП-00017032
// Получить технологов
Функция GetTechnologists()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник КАК Технолог,
		|	РолиПользователейСоставРоли.Сотрудник.Наименование КАК ТехнологПредставление
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Ссылка.ТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТехнологПредставление");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтруктураДанных = Новый Структура("Технолог,ТехнологПредставление");
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаЗапроса);
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			Для Каждого КлючИЗначение Из СтруктураДанных Цикл
				ИмяРекъ = КлючИЗначение.Ключ;
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяРекъ);
				ЗаписьJSON.ЗаписатьЗначение(?(ИмяРекъ = "Технолог", Строка(КлючИЗначение.Значение.УникальныйИдентификатор()), КлючИЗначение.Значение));
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	Возврат ЗаписьJSON.Закрыть();
		
КонецФункции

//+++АК SHEP 2017.12.05 ИП-00017032
// Удалить объект
Функция DeleteObject(ВидОбъекта, УИД, УдалитьСКонтролемСсылок)
	
	СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, УИД);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) ИЛИ СсылкаНаОбъект.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); // включаем для контроля всех ссылок
	
	Если УдалитьСКонтролемСсылок Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СсылкаНаОбъект);
		ТЗнСсылок = НайтиПоСсылкам(МассивСсылок);
		Если ТЗнСсылок.Количество() > 0 Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	// должно быть доступно хотя бы "Чтение" на объект
	Параметры = ПараметрыДоступа("Чтение", СсылкаНаОбъект.Метаданные(), "");
	Если НЕ Параметры.Доступность Тогда Возврат Ложь; КонецЕсли;
	
	ЗначениеОбъекта = СсылкаНаОбъект.ПолучитьОбъект();
	ЗначениеОбъекта.Удалить();
	
	Возврат Истина;
	
КонецФункции

//+++АК SHEP 2017.12.06 ИП-00017032
// Получить Уникальный идентификатор
Функция GetUID()
	Возврат Строка(Новый УникальныйИдентификатор());
КонецФункции

//+++АК SHEP 2017.12.08 ИП-00017032
// Получить контакты поставщика
Функция GetSupplierContacts(ПоставщикСсылка) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetSupplierContacts(ПоставщикСсылка);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ЗаказыКонтактноеЛицо,ЗаказыКонтактныйТелефон,ЗаказыЭлАдрес", "", "", "");
	
	Поставщик = ПолучитьСсылкуНаОбъект("Контрагенты", ПоставщикСсылка);
	Если ЗначениеЗаполнено(Поставщик) Тогда
		Справочники.ХарактеристикиНоменклатурыПоставщиков.ЗаполнитьКонтактыДляЗаказаПоставщика(Поставщик, СтруктураВозврата);
	КонецЕсли;
	
	Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураВозврата);
	
КонецФункции

//+++АК SHEP 2017.12.08 ИП-00017032
// Получить информацию по номенклатуре
//8. После заполнения "Характеристика номенклатуры" можно автоматом заполнять следующие графы:
//Планограмма, Подгруппа номенклатуры, Группа аналогов, Место выкладки
Функция GetNomenclaturaInfo(НоменклатураУИД, ХарактеристикаУИД) Экспорт
Перем СпрНоменклатураСсылка;
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetNomenclaturaInfo(НоменклатураУИД, ХарактеристикаУИД);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(НоменклатураУИД) Тогда
		СпрНоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураУИД));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХарактеристикаУИД) И НЕ ЗначениеЗаполнено(СпрНоменклатураСсылка) Тогда
		СпрНоменклатураСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ХарактеристикаУИД)).Владелец;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ПодгруппаНоменклатуры,Планограмма,МестоВыкладки,ГруппаАналогов", "Номенклатура", "Планограммы", "МестаВыкладки", "АналогиНоменклатуры");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Родитель КАК ПодгруппаНоменклатуры,
		|	ЕСТЬNULL(Планограммы.Ссылка, ЗНАЧЕНИЕ(Справочник.Планограммы.ПустаяСсылка)) КАК Планограмма,
		|	ЕСТЬNULL(ВыкладкаПланограммы.МестоВыкладки, ЗНАЧЕНИЕ(Справочник.МестаВыкладки.ПустаяСсылка)) КАК МестоВыкладки,
		|	ЕСТЬNULL(АналогиНоменклатурыТовары.Ссылка, ЗНАЧЕНИЕ(Справочник.АналогиНоменклатуры.ПустаяСсылка)) КАК ГруппаАналогов
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
		|		ПО СпрНоменклатура.Ссылка = АналогиНоменклатурыТовары.Номенклатура
		|			И (НЕ АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Планограммы КАК Планограммы
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВыкладкаПланограммы.Планограмма КАК Планограмма,
		|				ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки,
		|				ВыкладкаПланограммы.ТоварВыведен КАК ТоварВыведен
		|			ИЗ
		|				РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
		|			ГДЕ
		|				ВыкладкаПланограммы.Номенклатура = &Номенклатура) КАК ВыкладкаПланограммы
		|			ПО Планограммы.Ссылка = ВыкладкаПланограммы.Планограмма
		|				И (Планограммы.НеАктуальная = ЛОЖЬ)
		|		ПО СпрНоменклатура.ТорговаяМарка = Планограммы.ТорговаяМарка
		|ГДЕ
		|	СпрНоменклатура.Ссылка = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", СпрНоменклатураСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Для Каждого КлючИЗначение Из СтруктураВозврата Цикл
			СтруктураВозврата.Вставить(КлючИЗначение.Ключ, ПредопределенноеЗначение("Справочник." + КлючИЗначение.Значение + ".ПустаяСсылка"));
		КонецЦикла;
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаЗапроса);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураВозврата Цикл
		СтруктураВозврата.Вставить(КлючИЗначение.Ключ, XMLСтрока(КлючИЗначение.Значение));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураВозврата);
	
КонецФункции

//+++АК SHEP 2018.03.06 ИП-00017032
// Жалобы покупателей по продуктам
Функция СustomersСomplaintsByProducts(ФильтрСтрокой, НомерСтраницы = 0, НаСтраницу = 0, ДопУсловие = "") Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.СustomersСomplaintsByProducts(ФильтрСтрокой, НомерСтраницы, НаСтраницу, ДопУсловие);
	КонецЕсли;
	
	ВидОбъекта = "ОбращенияПокупателей";
	Возврат ВыбратьРазличнуюНоменклатуру(ВидОбъекта, ФильтрСтрокой, НомерСтраницы, НаСтраницу, ДопУсловие);
	
КонецФункции

//+++АК SHEP 2018.03.12 ИП-00017032
// Список номенклатуры по Контролю качества
Функция QualityControlByProducts(ФильтрСтрокой, НомерСтраницы = 0, НаСтраницу = 0, ДопУсловие = "") Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.QualityControlByProducts(ФильтрСтрокой, НомерСтраницы, НаСтраницу, ДопУсловие);
	КонецЕсли;
	
	ВидОбъекта = "ПроверкаКачестваТоваров";
	Возврат ВыбратьРазличнуюНоменклатуру(ВидОбъекта, ФильтрСтрокой, НомерСтраницы, НаСтраницу, ДопУсловие);
	
КонецФункции

//+++АК SHEP 2018.03.27 ИП-00017032: сделал отдельную функцию
Функция ВыбратьРазличнуюНоменклатуру(ВидОбъекта, ФильтрСтрокой, НомерСтраницы = 0, НаСтраницу = 0, Знач ТекстУсловия = "")
	
	ТипОбъекта = ПолучитьТипОбъекта(ВидОбъекта);
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ФильтрСтрокой) Тогда
		
		СтруктураОтбора = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ФильтрСтрокой);
		
		Если СтруктураОтбора.Количество() = 0 Тогда
			// если просто строка -- считаем, что поставщик
			Поставщик = ПолучитьПоставщика(ФильтрСтрокой);
			СтруктураОтбора.Вставить("Производитель", Поставщик);
		Иначе
			ПреобразоватьСтруктуруОтбораИзXDTO(СтруктураОтбора, ТипОбъекта, ВидОбъекта);
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			ИмяСвойстваОбъекта = КлючИЗначение.Ключ;
			Запрос.УстановитьПараметр(ИмяСвойстваОбъекта, КлючИЗначение.Значение);
			
			ТекстУсловия = ТекстУсловия + "
			|	" + ?(ПустаяСтрока(ТекстУсловия), "", "И ") + "ТаблицаДанных." + ИмяСвойстваОбъекта + " = &" + ИмяСвойстваОбъекта;
		КонецЦикла;
		
	КонецЕсли;
	
	СписокОбъектовXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("PrivateOfficeSupplierXDTO", "ObjectsList"));
	
	//возвращаем кол-во записей
	КоличествоЗаписей = 0;
	
	//+++АК SHEP 2018.06.07 ИП-00018753.04: возвращаем всю номенклатуру производителя
	//ТекстЗапроса = "
	//	|ВЫБРАТЬ
	//	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ Номенклатура) КАК Total
	//	|ИЗ
	//	|	" + ТипОбъекта + "." + ВидОбъекта + " КАК ТаблицаДанных" + ?(ПустаяСтрока(ТекстУсловия), "", "
	//	|
	//	|ГДЕ
	//	|	" + ТекстУсловия);
	//Запрос.Текст = ТекстЗапроса;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование КАК НоменклатураПредставление
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В (&СписокНоменклатурыПроизводителя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокНоменклатуры.Номенклатура) КАК Total
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры";
	Запрос.УстановитьПараметр("СписокНоменклатурыПроизводителя", ПолучитьАктивнуюНоменклатуруПроизводителя(СтруктураОтбора["Производитель"]));
	//---АК SHEP 2018.06.07
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		КоличествоЗаписей = ВыборкаЗапроса.Total;
		
		СтруктураПолей = Новый Структура("НоменклатураПредставление,КоличествоНовых,Количество,Рейтинг,ТребующиеОбязательногоОтвета,ТребующиеОбязательногоОтветаНеОтвеченные");
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СписокНоменклатуры.Номенклатура КАК Ссылка,
			|	СписокНоменклатуры.Номенклатура.Наименование КАК НоменклатураПредставление,
			|	СУММА(ВЫБОР
			|			КОГДА ЕСТЬNULL(ПросмотреноПоставщиком, ИСТИНА)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК КоличествоНовых,
			|	КОЛИЧЕСТВО(ПросмотреноПоставщиком) КАК Количество
			//+++АК SHEP 2018.07.19 ИП-00018753.03
			|	,
			|	СУММА(ВЫБОР
			|			КОГДА ЕСТЬNULL(ТребуетОбязательногоОтветаПроизводителя, Ложь)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ТребующиеОбязательногоОтвета,
			|	СУММА(ВЫБОР
			|			КОГДА ЕСТЬNULL(ТребуетОбязательногоОтветаПроизводителя, Ложь) И ЕСТЬNULL(ВЫРАЗИТЬ(&ОтветПроизводителя КАК СТРОКА(100)), """") = """"
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ТребующиеОбязательногоОтветаНеОтвеченные
			//---АК SHEP 2018.07.19
			|ИЗ
			//+++АК SHEP 2018.06.07 ИП-00018753.04: возвращаем всю номенклатуру производителя
			|	СписокНоменклатуры КАК СписокНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъекта + "." + ВидОбъекта + " КАК ТаблицаДанных
			|		ПО СписокНоменклатуры.Номенклатура = ТаблицаДанных.Номенклатура" + ?(ПустаяСтрока(ТекстУсловия), "", "
			//|	" + ТипОбъекта + "." + ВидОбъекта + " КАК ТаблицаДанных" + ?(ПустаяСтрока(ТекстУсловия), "", "
			//|
			//|ГДЕ
			|		И
			//---АК SHEP 2018.06.07
			|	" + ТекстУсловия) + "
			|
			|СГРУППИРОВАТЬ ПО
			|	СписокНоменклатуры.Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	КоличествоНовых УБЫВ, НоменклатураПредставление";
		
		Если НомерСтраницы * НаСтраницу <> 0 Тогда
			ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(НомерСтраницы * НаСтраницу, "ЧГ=") + Сред(ТекстЗапроса, 8);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтветПроизводителя", ?(ВидОбъекта = "ПроверкаКачестваТоваров", "Ответ", "ОтветПроизводителя"));
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			МассивНоменклатуры = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
			СоответствиеТоварРейтинг = ПолучитьРейтингТоваров(МассивНоменклатуры, СтруктураОтбора["Производитель"]);
			
			Счётчик = 0;
			НачальнаяЗапись = (НомерСтраницы - 1) * НаСтраницу;
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			Пока ВыборкаЗапроса.Следующий() Цикл
				
				Счётчик = Счётчик + 1;
				Если НачальнаяЗапись <> 0 И Счётчик <= НачальнаяЗапись Тогда Продолжить; КонецЕсли; // пропускаем ненужные записи
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписьJSON.ЗаписатьНачалоМассива();
				
				ТекНоменклатура = ВыборкаЗапроса.Ссылка;
				ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ТекНоменклатура));
				
				ЗаполнитьЗначенияСвойств(СтруктураПолей, ВыборкаЗапроса);
				ТекРейтинг = СоответствиеТоварРейтинг[ТекНоменклатура];
				СтруктураПолей["Рейтинг"] = ?(ТекРейтинг = Неопределено, 0, ТекРейтинг);
				
				Для Каждого КлючИЗначение Из СтруктураПолей Цикл
					ЗаписьJSON.ЗаписатьЗначение(КлючИЗначение.Значение);
				КонецЦикла;
				
				ЗаписьJSON.ЗаписатьКонецМассива();
				
				СписокОбъектовXDTO.Element.Добавить(ЗаписьJSON.Закрыть());
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОбъектовXDTO.Total = ?(ЗначениеЗаполнено(КоличествоЗаписей), КоличествоЗаписей, 0); // обработка Null
	
	Возврат СписокОбъектовXDTO;
	
КонецФункции

//+++АК SHEP 2018.03.15 ИП-00017032
// Получить рейтинг продукта
Функция GetProductRaiting(Номенклатура, Поставщик)
	
	НоменклатураСсылка = ПолучитьСсылкуНаОбъект("Номенклатура", Номенклатура);
	ПоставщикСсылка = ПолучитьСсылкуНаОбъект("Контрагенты", Поставщик);
	
	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(НоменклатураСсылка);
	СоответствиеТоварРейтинг = ПолучитьРейтингТоваров(МассивНоменклатуры, ПоставщикСсылка);
	Рейтинг = СоответствиеТоварРейтинг[НоменклатураСсылка];
	Возврат ?(Рейтинг = Неопределено, 0, Рейтинг);
	
КонецФункции

//+++АК SHEP 2018.03.27 ИП-00017032
// Возвращает рейтинг товаров
//
// Параметры:
//  МассивНоменклатуры - Массив, массив номенклатуры
//  Поставщик - поставщик
// 
// Возвращаемое значение:
//  Число - если в массиве задано одно значение
//  Соответствие - если задан массив
//
Функция ПолучитьРейтингТоваров(МассивНоменклатуры, Поставщик)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УсловиеSQLПоНоменклатуре = "";
	СоответствиеИД = Новый Соответствие; // обратное соответствие ИД — Номенклатура
	СоответствиеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНоменклатуры, "id_tov");
	Для Каждого КлючИЗначение Из СоответствиеНоменклатуры Цикл
		ТекЗнач = КлючИЗначение.Значение;
		СоответствиеИД.Вставить(ТекЗнач, КлючИЗначение.Ключ);
		СоответствиеНоменклатуры.Вставить(КлючИЗначение.Ключ, 0); // обнуляем рейтинг
		Если НЕ ЗначениеЗаполнено(ТекЗнач) Тогда Продолжить; КонецЕсли;
		УсловиеSQLПоНоменклатуре = УсловиеSQLПоНоменклатуре + ?(ПустаяСтрока(УсловиеSQLПоНоменклатуре), "", ",") + ВнешниеДанные.ФорматПоля(ТекЗнач);
	КонецЦикла;
	
	//+++АК SHEP 2018.05.24 ИП-00018753.01: получаем всех контрагентов по холдингу
	УсловиеSQLПоПоставщику = "";
	МассивКонтрагентов = Справочники.ХарактеристикиНоменклатурыПоставщиков.ПолучитьМассивКонтрагентовПоставщика(Поставщик);
	СоответствиеКонтрагентовИД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивКонтрагентов, "ИД");
	Для Каждого КлючИЗначение Из СоответствиеКонтрагентовИД Цикл
		ТекЗнач = КлючИЗначение.Значение;
		Если НЕ ЗначениеЗаполнено(ТекЗнач) Тогда Продолжить; КонецЕсли;
		УсловиеSQLПоПоставщику = УсловиеSQLПоПоставщику + ?(ПустаяСтрока(УсловиеSQLПоПоставщику), "", ",") + ВнешниеДанные.ФорматПоля(ТекЗнач);
	КонецЦикла;
	
	Если ПустаяСтрока(УсловиеSQLПоНоменклатуре) ИЛИ ПустаяСтрока(УсловиеSQLПоПоставщику) Тогда Возврат СоответствиеНоменклатуры; КонецЕсли;
	//---АК SHEP 2018.05.24
	
	ТекстЗапросаSQL =
		"SELECT
		|	RT.id_tov AS id_tov,
		|	RT.reiting_avg AS reiting_avg
		|FROM [Reports].[dbo].[reiting_tov] as RT (nolock)
		|
		|WHERE
		|	RT.id_tov IN (" + УсловиеSQLПоНоменклатуре + ")
		//+++АК SHEP 2018.05.24 ИП-00018753.01
		//|	AND RT.id_kontr = " + ВнешниеДанные.ФорматПоля(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Поставщик, "ИД"));
		|	AND RT.id_kontr IN (" + УсловиеSQLПоПоставщику + ")";
		//---АК SHEP 2018.05.24
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			//Рейтинг = Rs.Fields("reiting_avg").Value;
			// присваиваем рейтинг номенклатуре
			СоответствиеНоменклатуры[СоответствиеИД[Rs.Fields("id_tov").Value]] = Rs.Fields("reiting_avg").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат СоответствиеНоменклатуры;
	
КонецФункции

//+++АК SHEP 2018.03.15 ИП-00017032
// Данные бота Telegram
Функция TelegramBotData(BOT_Purchase_Tovar_Reiting_ID)
	
	СтруктураОтвета = РегистрыСведений.ОбращенияПокупателей.ДанныеБотаТелеграм(BOT_Purchase_Tovar_Reiting_ID);
	
	Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(СтруктураОтвета);
	
КонецФункции

//+++АК SHEP 2018.04.03 ИП-00017032
//+++АК SHEP 2018.07.02 ИП-00018753.04: добавил "ВидОбъекта", поддержку "ОбращенияПокупателейОтветыПроизводителейНаВключения"
//Возвращает список файлов
Функция GetFileList(ВидОбъекта, Ссылка)
	
	ВидОбъекта = ?(ЗначениеЗаполнено(ВидОбъекта), ВидОбъекта, "ОбращенияПокупателей");
	ТипОбъекта = "";
	СтруктураОтбора = Новый Структура;
	СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, Ссылка, ТипОбъекта, СтруктураОтбора);
	
	// у нас должна быть одна запись
	Если СсылкаНаОбъект.Количество() <> 1 Тогда Возврат ""; КонецЕсли;
	Запись = СсылкаНаОбъект[0];
	
	ТабФайлов = Запись[?(ВидОбъекта = "ОбращенияПокупателейОтветыПроизводителейНаВключения", "ПрикреплённыеФайлы", "ПрикрепленныеФайлы")];
	Если НЕ ЗначениеЗаполнено(ТабФайлов) Тогда Возврат ""; КонецЕсли;
	
	ТЗнФайлов = ЗначениеИзСтрокиВнутр(ТабФайлов);
	МассивИзТЗн = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗнФайлов);
	Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(МассивИзТЗн);
	
КонецФункции

//+++АК SHEP 2018.04.11 ИП-00017032
// Установить значение реквизита массиву ссылок
Функция SetFieldValueForArray(ВидОбъекта, МассивСсылок, ИмяПоля, Значение)
	
	МассивУИД = РаботаСВнешнимВебСервером.СтруктураДанныхИзJSON(МассивСсылок);
	Если ТипЗнч(МассивУИД) <> Тип("Массив") Тогда Возврат Ложь; КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	ТипОбъекта = ПолучитьТипОбъекта(ВидОбъекта);
	
	// сначала преобразовываем Значение по типу XDTO, потом записываем
	СтруктураДанных = Новый Структура(ИмяПоля, Значение);
	ПреобразоватьСтруктуруОтбораИзXDTO(СтруктураДанных, ТипОбъекта, ВидОбъекта);
	
	флУспешно = Истина;
	
	Для Каждого Ссылка Из МассивУИД Цикл
		
		СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, Ссылка, ТипОбъекта, СтруктураОтбора);
		Если ТипОбъекта = "РегистрСведений" Тогда
			
			Если СсылкаНаОбъект.Количество() <> 1 Тогда
				флУспешно = Неопределено;
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи = РегистрыСведений[ВидОбъекта].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ОбъектДляЗаписи, СтруктураОтбора);
			
			ОбъектДляЗаписи.Прочитать();
			Если НЕ ОбъектДляЗаписи.Выбран() Тогда
				флУспешно = Неопределено;
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) ИЛИ СсылкаНаОбъект.Пустая() Тогда
				флУспешно = Неопределено;
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи = СсылкаНаОбъект.ПолучитьОбъект();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектДляЗаписи, СтруктураДанных);
		ОбъектДляЗаписи.Записать();
		
	КонецЦикла;
	
	Возврат флУспешно;
	
КонецФункции

//+++АК SHEP 2018.04.16 ИП-00017032 
// Заполнить на основании
Функция FillBy(ВидОбъекта, ВидОбъектаНаОснованииЧего, СсылкаНаОснованииЧего)
	
	ОбъектДляЗаписи = Неопределено;
	
	ТипОбъекта = ПолучитьТипОбъекта(ВидОбъекта);
	Если ТипОбъекта = "Справочник" Тогда
		ОбъектДляЗаписи = Справочники[ВидОбъекта].СоздатьЭлемент();
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		ОбъектДляЗаписи = Документы[ВидОбъекта].СоздатьДокумент();
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ОбъектДляЗаписи = Неопределено Тогда Возврат ""; КонецЕсли;
	
	СсылкаНаОбъектНаОснованииЧего = ПолучитьСсылкуНаОбъект(ВидОбъектаНаОснованииЧего, СсылкаНаОснованииЧего);
	ОбъектДляЗаписи.Заполнить(СсылкаНаОбъектНаОснованииЧего);
	
	Возврат GetObjectData(ВидОбъекта, ОбъектДляЗаписи, "JSON");
	
КонецФункции

//+++АК SHEP 2018.04.20 ИП-00017032
// Получить списки выбора к карте дизайн-проекта
Функция ChoiceLists(ВидОбъекта, ТипПродукции)
	
	Если ВидОбъекта <> "КартыДизайнПроектов" Тогда Возврат ""; КонецЕсли;
	
	Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(Справочники.КартыДизайнПроектов.СтруктураСписковВыбора(ТипПродукции));
	
КонецФункции

//+++АК SHEP 2018.07.03 ИП-00018753.04: переписал GetProductInfo, старая версия в GetProductInfo_Было
Функция GetProductInfo(НаименованиеПродукта) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetProductInfo(НаименованиеПродукта);
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ТекстЗапросаSQL =
		"EXEC reports.[dbo].[get_marge_chast_total_71] '" + НаименованиеПродукта + "'";
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	МассивЗначений = Новый Массив;
	
	Попытка
		
		rs.MoveFirst();		
		Пока НЕ rs.EOF() Цикл
			
			Структура = Новый Структура;
			Структура.Вставить("Поставщик", 				Rs.Fields("Поставщик").Value);
			Структура.Вставить("ПовторныеПродажиНеделя", 	Rs.Fields("ПовторНеделя").Value);
			Структура.Вставить("ПовторныеПродажиМесяц", 	Rs.Fields("ПовторМесяц").Value);
			Структура.Вставить("Оценка", 					Строка(Rs.Fields("Оценка").Value));
			Структура.Вставить("ЧастотаВВ", 				Строка(Rs.Fields("ЧастотаВВ").Value));
			Структура.Вставить("НеВыполнЗаказПроцент",	 	Строка(Rs.Fields("НеВыполнЗаказ").Value));
			Структура.Вставить("СписКачПроцент", 			Строка(Rs.Fields("СписКачПроц").Value));
			Структура.Вставить("ИндПоСписанию50", 			Строка(Rs.Fields("ИндПоСписанию").Value));
			Структура.Вставить("ЖелаемыйКвант", 			Строка(Rs.Fields("ЖелаемыйКвант").Value));
			Структура.Вставить("ПродажаЕдиницВНеделю", 		Строка(Rs.Fields("ПродажаЕдиницВНеделю").Value));
			МассивЗначений.Добавить(Структура);
			
			rs.MoveNext();
			
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(МассивЗначений);
	
КонецФункции

//+++АК SHEP 2018.07.03 ИП-00018753.04
Функция СписокЗначенийВJSON(СписокЗначений)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	Для Каждого ЭлементСпискаЗначений Из СписокЗначений Цикл
		ЗаписьJSON.ЗаписатьИмяСвойства(ЭлементСпискаЗначений.Представление);
		ЗаписьJSON.ЗаписатьЗначение(ЭлементСпискаЗначений.Значение);
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

//+++АК SHEP 2018.07.17 ИП-00018753.03
// Сохранить контактную информацию
Функция SaveContactInfo(ВидОбъекта, Ссылка, Представление) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.SaveContactInfo(ВидОбъекта, Ссылка, Представление);
	КонецЕсли;
	
	Если ВидОбъекта <> "Контрагенты" Тогда Возврат Ложь; КонецЕсли;
	
	ТипОбъекта = "";
	СтруктураОтбора = Новый Структура;
	СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, Ссылка, ТипОбъекта, СтруктураОтбора);
	
	Если ТипОбъекта = "РегистрСведений" Тогда
		Если СсылкаНаОбъект.Количество() <> 1 Тогда Возврат Ложь; КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) ИЛИ СсылкаНаОбъект.Пустая() Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДанных = Новый Структура("Объект", СсылкаНаОбъект);
	СтруктураДанных.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	СтруктураДанных.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021"));
	
	Если СтруктураДанных.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		
		ЭлектронныеАдреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Представление, ";", Ложь, Истина);
		Для Каждого ЭлАдрес Из ЭлектронныеАдреса Цикл
			Если НЕ УправлениеЭлектроннойПочтой.EmailValid(ЭлАдрес) Тогда
				//ОбщегоНазначения.СообщитьОбОшибке("Электронный адрес: " + ЭлАдрес + " содержит неправильный формат.");
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураДанных);
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураДанных);
	МенеджерЗаписи.Представление = Представление;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

//+++АК SHEP 2018.07.17 ИП-00018753.03
// Получить печатную форму
Функция GetPrintForm(ВидОбъекта, Ссылка, ИмяПечатнойФормы, ФорматФайла = "PDF") Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetPrintForm(ВидОбъекта, Ссылка, ИмяПечатнойФормы, ФорматФайла);
	КонецЕсли;
	
	Если ВидОбъекта <> "ПроверкаКачестваТоваров" Тогда Возврат Неопределено; КонецЕсли;
	
	ТипОбъекта = "";
	СтруктураОтбора = Новый Структура;
	СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, Ссылка, ТипОбъекта, СтруктураОтбора);
	
	Если ТипОбъекта = "РегистрСведений" Тогда
		Если СсылкаНаОбъект.Количество() <> 1 Тогда Возврат Неопределено; КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) ИЛИ СсылкаНаОбъект.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	Если ВидОбъекта = "ПроверкаКачестваТоваров" Тогда
		Если ИмяПечатнойФормы = "ПротоколПроверки" Тогда
			Документы.ПроверкаКачестваТоваров.ПечатьПротоколаПроверки(ТабДок, СсылкаНаОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ТабДок.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента[ФорматФайла]);
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

//+++АК SHEP 2018.09.19 ИП-00018753.03
//Получить количества по секциям
Функция GetQuantitiesBySections(ФильтрСтрокой) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetQuantitiesBySections(ФильтрСтрокой);
	КонецЕсли;
	
	ВидОбъекта = "ОбращенияПокупателей";
	ТипОбъекта = ПолучитьТипОбъекта(ВидОбъекта);
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ФильтрСтрокой) Тогда
		
		СтруктураОтбора = РаботаСВнешнимВебСервером.ЗаполнитьСтруктуруИзОтветаJSON(ФильтрСтрокой);
		
		Если СтруктураОтбора.Количество() = 0 Тогда
			// если просто строка -- считаем, что поставщик
			Поставщик = ПолучитьПоставщика(ФильтрСтрокой);
			СтруктураОтбора.Вставить("Производитель", Поставщик);
		Иначе
			ПреобразоватьСтруктуруОтбораИзXDTO(СтруктураОтбора, ТипОбъекта, ВидОбъекта);
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			ИмяСвойстваОбъекта = КлючИЗначение.Ключ;
			Запрос.УстановитьПараметр(ИмяСвойстваОбъекта, КлючИЗначение.Значение);
			
			//ТекстУсловия = ТекстУсловия + "
			//|	" + ?(ПустаяСтрока(ТекстУсловия), "", "И ") + "ТаблицаДанных." + ИмяСвойстваОбъекта + " = &" + ИмяСвойстваОбъекта;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура("Раздел,Количество");
	Запрос.УстановитьПараметр("СписокНоменклатурыПроизводителя", ПолучитьАктивнуюНоменклатуруПроизводителя(СтруктураОтбора["Производитель"]));
	Запрос.УстановитьПараметр("ДатаНачала", Дата("20180301"));
	
	//Обращения: ИсточникОбращения В (ВЫБРАТЬ Ссылка ИЗ РегистрСведений.КабинетПоставщикаОтбор) И ТипОбращения В (ВЫБРАТЬ Ссылка ИЗ РегистрСведений.КабинетПоставщикаОтбор)  И ДатаДок >= ДатаВремя(2018,3,1)
	//Включения: ИсточникОбращения В (ВЫБРАТЬ Ссылка ИЗ РегистрСведений.КабинетПоставщикаОтбор) И ЕСТЬNULL(ТипОбращения.Код,0) = "201"  И ДатаДок >= ДатаВремя(2018,3,1)
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование КАК НоменклатураПредставление
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&СписокНоменклатурыПроизводителя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.ТипОбращения,
		|	ТаблицаДанных.ПросмотреноПоставщиком,
		|	ТаблицаДанных.ТребуетОбязательногоОтветаПроизводителя,
		|	ТаблицаДанных.ОтветПроизводителя
		|ПОМЕСТИТЬ ОбращенияПокупателей
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.Производитель = &Производитель
		|	И ТаблицаДанных.ДатаДок >= &ДатаНачала
		|	И ТаблицаДанных.Номенклатура В
		|			(ВЫБРАТЬ
		|				СписокНоменклатуры.Номенклатура
		|			ИЗ
		|				СписокНоменклатуры КАК СписокНоменклатуры)
		|	И ТаблицаДанных.ИсточникОбращения В
		|			(ВЫБРАТЬ
		|				РегистрСведений.КабинетПоставщикаОтбор.Ссылка
		|			ИЗ
		|				РегистрСведений.КабинетПоставщикаОтбор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ОбращенияПокупателей"" КАК Раздел,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаДанных.ПросмотреноПоставщиком, ИСТИНА)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ), 0) КАК КоличествоНовых,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ТаблицаДанных.ПросмотреноПоставщиком), 0) КАК Количество,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаДанных.ТребуетОбязательногоОтветаПроизводителя, ЛОЖЬ)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ), 0) КАК ТребующиеОбязательногоОтвета,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаДанных.ТребуетОбязательногоОтветаПроизводителя, ЛОЖЬ)
		|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаДанных.ОтветПроизводителя КАК СТРОКА(100)), """") = """"
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ), 0) КАК ТребующиеОбязательногоОтветаНеОтвеченные
		|ИЗ
		|	ОбращенияПокупателей КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.ТипОбращения В
		|			(ВЫБРАТЬ
		|				РегистрСведений.КабинетПоставщикаОтбор.Ссылка
		|			ИЗ
		|				РегистрСведений.КабинетПоставщикаОтбор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Включения"",
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаДанных.ПросмотреноПоставщиком, ИСТИНА)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ), 0),
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ТаблицаДанных.ПросмотреноПоставщиком), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаДанных.ТребуетОбязательногоОтветаПроизводителя, ЛОЖЬ)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаДанных.ТребуетОбязательногоОтветаПроизводителя, ЛОЖЬ)
		|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаДанных.ОтветПроизводителя КАК СТРОКА(100)), """") = """"
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ), 0)
		|ИЗ
		|	ОбращенияПокупателей КАК ТаблицаДанных
		|ГДЕ
		|	ЕСТЬNULL(ТаблицаДанных.ТипОбращения.Код, 0) = ""201""";
		
	ТЗнРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат РаботаСВнешнимВебСервером.СтруктураДанныхВJSON(ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗнРезультат));
	
КонецФункции

//+++АК SHEP 2018.09.19 ИП-00018753.03
// Сохранить сообщение для чата (Лента сообщений)
Функция SaveChatMessage(Знач ВидОбъекта, ФильтрСтрокой, Период, ЧейОтвет, ТекстСообщения) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.SaveChatMessage(ВидОбъекта, ФильтрСтрокой, Период, ЧейОтвет, ТекстСообщения);
	КонецЕсли;
	
	Если ВидОбъекта <> "ОбращенияПокупателей" Тогда Возврат Ложь; КонецЕсли;
	
	ТипОбъекта = "РегистрСведений";
	ВидОбъекта = ВидОбъекта + "ЛентаСообщений";
	
	СтруктураОтбора = Новый Структура;
	//СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ВидОбъекта, ФильтрСтрокой, ТипОбъекта, СтруктураОтбора);
	//
	//СтруктураОтбора.Вставить("Период", Период);
	//ОбъектДляЗаписи = РегистрыСведений[ВидОбъекта].СоздатьМенеджерЗаписи();
	//ЗаполнитьЗначенияСвойств(ОбъектДляЗаписи, СтруктураОтбора);
	
	СтруктураОтбора = РаботаСВнешнимВебСервером.СтруктураДанныхИзJSON(ФильтрСтрокой);
	СтруктураОтбора.Вставить("Период", Период);
	ПреобразоватьСтруктуруОтбораИзXDTO(СтруктураОтбора, ТипОбъекта, ВидОбъекта);
	
	ОбъектДляЗаписи = РегистрыСведений[ВидОбъекта].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ОбъектДляЗаписи, СтруктураОтбора);
	
	//ОбъектДляЗаписи.Прочитать();
	//Если ОбъектДляЗаписи.Выбран() Тогда Возврат Ложь; КонецЕсли;
	
	ОбъектДляЗаписи["ЧейОтвет"] = ЧейОтвет;
	ОбъектДляЗаписи["ТекстСообщения"] = ТекстСообщения;
	ОбъектДляЗаписи.Записать();
	
	Возврат Истина;
	
КонецФункции

//+++АК SHEP 2018.09.19 ИП-00018753.03
// Получить сообщения для чата (Лента сообщений)
Функция GetChatMessages(Знач ВидОбъекта, ФильтрСтрокой, ДопУсловие) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetChatMessages(ВидОбъекта, ФильтрСтрокой, ДопУсловие);
	КонецЕсли;
	
	Если ВидОбъекта <> "ОбращенияПокупателей" Тогда Возврат Ложь; КонецЕсли;
	
	ВидОбъекта = ВидОбъекта + "ЛентаСообщений";
	Возврат GetObjectsList(ВидОбъекта, "Период,ЧейОтвет,ТекстСообщения", ФильтрСтрокой,,, ДопУсловие, "Период");
	
КонецФункции

//+++АК SHEP 2018.10.16 ИП-00018753.05
// Очень важное
Функция VeryImportant(ФильтрСтрокой) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.VeryImportant(ФильтрСтрокой);
	КонецЕсли;
	
КонецФункции

//+++АК SHEP 2018.10.17 ИП-00018753.05
// Центр управления
Функция DashBoard(ФильтрСтрокой) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.DashBoard(ФильтрСтрокой);
	КонецЕсли;
	
КонецФункции

//+++АК SHEP 2018.10.18 ИП-00018753.05
// Получить историю реквизита объекта
Функция GetFieldHistory(ВидОбъекта, Ссылка, ИмяРеквизита) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetFieldHistory(ВидОбъекта, Ссылка, ИмяРеквизита);
	КонецЕсли;
	
КонецФункции

//+++АК SHEP 2018.10.18 ИП-00018753.05
// Получить текущего пользователя
Функция GetCurrentUser() Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetCurrentUser();
	КонецЕсли;
	
КонецФункции

//+++АК SHEP 2018.11.13 ИП-00018753.05
// Мои поставщики
Функция MySuppliers(СписокПолей, ФильтрСтрокой, НомерСтраницы, КвоНаСтраницу, ДопУсловие, Сортировка) Экспорт
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку();
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.MySuppliers(СписокПолей, ФильтрСтрокой, НомерСтраницы, КвоНаСтраницу, ДопУсловие, Сортировка);
	КонецЕсли;
	
КонецФункции

#Область ВременныйКодУдалить

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ВРЕМЕННО РАЗМЕЩЕННЫЕ ФУНКЦИИ 
//(Админы не смогли разместить WS.StaffOutFree, а для Кривенко необходимо оперативно предоставить достум "Студентам")
//После публикации StaffOutFree будет удалено↓
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция AutorizationFree(Login, Pass) //+++АК mika 2018.09.10 ИП-00019791
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку("ВебСервис_StaffOutFree");
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.AutorizationFree(Login, Pass);
	КонецЕсли;
	
КонецФункции

Функция GetTableTT(Login, СтрокаПараметров) //+++АК mika 2018.09.10 ИП-00019791
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку("ВебСервис_StaffOutFree");
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.GetTableTT(Login, СтрокаПараметров);
	КонецЕсли;
	
КонецФункции

Функция AddTimeSheet(Период, Login, НомерТочки, Должность) //+++АК mika 2018.09.10 ИП-00019791

	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку("ВебСервис_StaffOutFree");
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.AddTimeSheet(Период, Login, НомерТочки, Должность);
	КонецЕсли;
	
КонецФункции


//+++АК PISH 2018.10.04 ИП-00019935
Функция AddCheckUp(FIO, TelNumber, birthday)
	
	ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработку("ВебСервис_StaffOutFree");
	Если ОбработкаОбъект <> Неопределено Тогда
		Возврат ОбработкаОбъект.AddCheckUp(FIO, TelNumber, birthday);
	КонецЕсли;
	
КонецФункции

//---АК PISH
//---АК PISH
#КонецОбласти
