
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ID_Строки = СокрЛП(ID_Строки);
	ВсегоСимволов = СтрДлина(ID_Строки);
	
	ID_Строки = Прав(ID_Строки, ВсегоСимволов-1);
	ID_Строки = Лев(ID_Строки, ВсегоСимволов-2);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура лкЗаполнитьТаблицуСМС()
	
	
	
	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанные()
		
	Объект.ТЗ_СМС_ВсеПоКлиенту.Очистить();
	
	ТекстЗапроса = "Select *
	|from (select convert(datetime,i.Date  + ' ' + i.Time) Дата, i.text сообщение , 'Входящее' тип
	|from SMSGate..Incoming (nolock) i
	|inner join
	|(select i.nomer
	| from SMSGate..Incoming (nolock) i 
	|where i.rowguid=/**BPar1**/'~~~~~'/**FPar**/) a
	|on a.nomer=i.nomer
	|
	|union all 
	|select ou.SendDate, ou.Message ,  'Наш ответ' тип
	|from IES..Outgoing (nolock) ou 
	|inner join
	|(select i.nomer
	| from SMSGate..Incoming (nolock) i 
	|where i.rowguid=/**BPar1**/'~~~~~'/**FPar**/) a
	|on '7'+a.nomer=ou.Number ) b;";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",ID_Строки);
	
	База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(ТекстЗапроса);

КонецПроцедуры


// Выполянет запрос и резульатат запроса возвращает в таблицу значений
//
&НаСервере
Процедура База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(ТекстЗапроса, допПараметры = Неопределено)  
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "SMS_UNION");
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	Для каждого ТекСтрока Из тзРезультат Цикл
 
 		ТекСтрока.Дата = Дата(ТекСтрока.Дата);
 
	КонецЦикла;	
	тзРезультат.Сортировать("Дата Убыв");
	
	Объект.ТЗ_СМС_ВсеПоКлиенту.Загрузить(тзРезультат);
	
КонецПроцедуры

&НаСервере
Процедура База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	//тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	Попытка
		RecordSet.Close();
	Исключение
	КонецПопытки;	
		
КонецПроцедуры


&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		
		Если ТипЗнч(допПараметры) = Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(Command, допПараметры);
		КонецЕсли;			
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		Command.CommandText = ТекстЗапроса;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
КонецФункции

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		Catalog = Новый COMОбъект("ADOX.Catalog");			
		
		Catalog.ActiveConnection = СтрокаПодключения;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
&НаСервере
Функция База_РезульататЗапросВТаблицуЗначений(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
		NameFiled = RecordSet.Fields.Item(НомерКолонки).Name;
		NameFiled = СтрЗаменить(NameFiled,"$","_");
		тз.Колонки.Добавить(NameFiled,,RecordSet.Fields.Item(НомерКолонки).Name, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Закрываем датасет возвращаемй База_ВыполнитьЗапрос();
//
&НаСервере
Процедура База_ЗакрытьЗапрос(RecordSet) 
	Если ТипЗнч(RecordSet) = Тип("COMОбъект") тогда
		RecordSet.Close();
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЗановоОбработать(Команда)
	
	ЗановоОбработатьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗановоОбработатьНаСервере()
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "SMS_UNION");
	
	ТекстЗапроса = "insert into SMSGate..Incoming_hystory
	|(rowguid , text , date_add )
	|select i.rowguid , i.text , GETDATE() date_add 
	| from SMSGate..Incoming (nolock) i 
	|where i.rowguid=/**BPar1**/'~~~~~'/**FPar**/;";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",ID_Строки);
	
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
	
	
	ТекстЗапроса = "update SMSGate..sms_date_change
	|set date_last=dateadd(second,-1,CONVERT(datetime,i.date + ' ' + i.time))
	|--select dateadd(second,-1,CONVERT(datetime,i.date + ' ' + i.time))
	|from SMSGate..sms_date_change
	|inner join SMSGate..Incoming (nolock) i on 1=1
	|where i.rowguid=/**BPar1**/'~~~~~'/**FPar**/
	|
	|delete  FROM [SMSGate].[dbo].[incoming_used]
	|where rowguid=/**BPar1**/'~~~~~'/**FPar**/;";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",ID_Строки);
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтвет(Команда)
	
	ОтправитьОтветНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОтправитьОтветНаСервере()
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "SMS_UNION");
	
	ТекстЗапроса = "insert into IES..Outgoing
	|(Number , [Message] , AddDate , type_BV , DiscountCardUID , rowguid)
	|select '7' + i.nomer, /**BPar2**/'%%%%%'/**FPar**/ , GETDATE() , 210 , null , i.rowguid
	|from  SMSGate..Incoming (nolock) i 
	|where i.rowguid=/**BPar1**/'~~~~~'/**FPar**/
	|
	|insert into SMSGate..incoming_used
	|select /**BPar1**/'~~~~~'/**FPar**/ , 1
	|from SMSGate..incoming (nolock) inc 
	|left join SMSGate..incoming_used (nolock) inc2 on inc2.rowguid=/**BPar1**/'~~~~~'/**FPar**/
	|where inc2.rowguid is null and inc.rowguid=/**BPar1**/'~~~~~'/**FPar**/;";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",ID_Строки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%%%%%",ПолеОтвет);
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);

КонецПроцедуры


&НаКлиенте
Процедура УбратьИзНераспознаныхБезОтвета(Команда)
	
	УбратьИзНераспознаныхБезОтветаНаСервере();
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УбратьИзНераспознаныхБезОтветаНаСервере()
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "SMS_UNION");
	
	ТекстЗапроса = "if exists(select *
	|from [SMSGate].[dbo].[incoming_used]
	|where rowguid=/**BPar1**/'~~~~~'/**FPar**/)
	|begin
	|update [SMSGate].[dbo].[incoming_used]
	|set type=1
	|where rowguid=/**BPar1**/'~~~~~'/**FPar**/
	|end
	
	|else
	|insert into [SMSGate].[dbo].[incoming_used]
	|select /**BPar1**/'~~~~~'/**FPar**/ , 0;";
	                    
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",ID_Строки);
	
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);

КонецПроцедуры	

&НаКлиенте
Процедура ПолеSMSПриИзменении(Элемент)
	ПолеSMSПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолеSMSПриИзмененииНаСервере()
	
  	ТекстЗапроса = " UPDATE [SMSGate].[dbo].[Incoming] SET [text] = '"+СокрЛП(ПолеSMS)+"' WHERE [rowguid] = '"+ID_Строки+"' ;";	
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("10.0.0.40", "SMSGate");
	
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
	
КонецПроцедуры
