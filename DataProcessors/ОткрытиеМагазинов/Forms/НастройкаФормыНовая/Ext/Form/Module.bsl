
#Область ДополнительныеПроцедурыИФункции

&НаКлиенте
// получение элементов формы, находящихся в группах
Процедура ПолучитьПодчиненныеЭлементы(ГрФормы, ТаблицаПолейФормы, НомерЗакладки)
	
	Для Каждого ЭлГрФормы из ГрФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлГрФормы) = Тип("ПолеФормы") Тогда
			Если ЭлГрФормы.Видимость = Истина Тогда
				НовСтрокаТаблицыПолейФормы = ТаблицаПолейФормы.Добавить();
				НовСтрокаТаблицыПолейФормы.НомерЗакладки = НомерЗакладки;
				НовСтрокаТаблицыПолейФормы.Поле = ЭлГрФормы.Имя;
				НовСтрокаТаблицыПолейФормы.ЗаголовокПоля = ?(ЭлГрФормы.Заголовок = "", ЭлГрФормы.Имя, ЭлГрФормы.Заголовок);
				НовСтрокаТаблицыПолейФормы.ВидНастройки = ВидНастройки;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлГрФормы) = Тип("ГруппаФормы") Тогда 
			ПолучитьПодчиненныеЭлементы(ЭлГрФормы, ТаблицаПолейФормы, НомерЗакладки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПолейДляПроверки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПолейФормы", ТаблицаПолейФормы.Выгрузить());
	Запрос.УстановитьПараметр("ВидНастройки", ВидНастройки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПОДСТРОКА(ТаблицаПолейФормы.Поле, 0, 200) КАК Поле,
	|	ПОДСТРОКА(ТаблицаПолейФормы.ЗаголовокПоля, 0, 200) КАК ЗаголовокПоля,
	|	ТаблицаПолейФормы.НомерЗакладки,
	|	ТаблицаПолейФормы.Пользователи,
	//+++ AK suvv 2018.09.05 ИП-00019673
	|	ТаблицаПолейФормы.ТипыРолейПользователей,
	//--- AK suvv
	|	ТаблицаПолейФормы.ВидНастройки,
	|	ТаблицаПолейФормы.Значение
	|ПОМЕСТИТЬ ВТ_ТаблицаПолейФормы
	|ИЗ
	|	&ТаблицаПолейФормы КАК ТаблицаПолейФормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПолейФормы.Поле КАК Поле,
	|	ВТ_ТаблицаПолейФормы.ЗаголовокПоля КАК ЗаголовокПоля,
	|	ВТ_ТаблицаПолейФормы.НомерЗакладки КАК НомерЗакладки,
	|	ВТ_ТаблицаПолейФормы.Пользователи КАК Пользователи,
	//+++ AK suvv 2018.09.05 ИП-00019673
	|	ВТ_ТаблицаПолейФормы.ТипыРолейПользователей КАК ТипыРолейПользователей,
	//--- AK suvv
	|	ВТ_ТаблицаПолейФормы.ВидНастройки КАК ВидНастройки,
	|	ВТ_ТаблицаПолейФормы.Значение КАК Значение,
	|	ВТ_ТаблицаПолейФормы.Пользователи КАК РазличныеПользователи,
	//+++ AK suvv 2018.09.05 ИП-00019673
	|	ВТ_ТаблицаПолейФормы.ТипыРолейПользователей КАК РазличныеТипыРолейПользователей,
	//--- AK suvv
	|	ВТ_ТаблицаПолейФормы.Значение КАК РазличныеЗначения
	|ИЗ
	|	ВТ_ТаблицаПолейФормы КАК ВТ_ТаблицаПолейФормы
	|ГДЕ
	|	ВТ_ТаблицаПолейФормы.ВидНастройки = &ВидНастройки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗакладки
	|ИТОГИ
	|	МАКСИМУМ(Поле),
	|	МАКСИМУМ(ЗаголовокПоля),
	|	МАКСИМУМ(Пользователи),
	//+++ AK suvv 2018.09.05 ИП-00019673
	|	МАКСИМУМ(ТипыРолейПользователей),
	//--- AK suvv
	|	МАКСИМУМ(ВидНастройки),
	|	МАКСИМУМ(Значение),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РазличныеПользователи),
	//+++ AK suvv 2018.09.05 ИП-00019673
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РазличныеТипыРолейПользователей),
	//--- AK suvv
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РазличныеЗначения)
	|ПО
	|	НомерЗакладки";	
	ВыборкаПоЗакладкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Поле");
	Дерево.Колонки.Добавить("ЗаголовокПоля");
	Дерево.Колонки.Добавить("Значение");
	Дерево.Колонки.Добавить("Пользователи");
	//+++ AK suvv 2018.09.05 ИП-00019673
	Дерево.Колонки.Добавить("ТипыРолейПользователей");
	//--- AK suvv
	Дерево.Колонки.Добавить("ВидНастройки");
	
	Пока ВыборкаПоЗакладкам.Следующий() Цикл
		НомерЗакладки = ВыборкаПоЗакладкам.НомерЗакладки;
		СтрокиУровень1 = Дерево.Строки.Добавить();
		СтрокиУровень1.ЗаголовокПоля = "Закладка №" + НомерЗакладки;
		Если ВыборкаПоЗакладкам.РазличныеПользователи = 1 и ВыборкаПоЗакладкам.РазличныеЗначения = 1 Тогда 
			СтрокиУровень1.Значение = ВыборкаПоЗакладкам.Значение;
			СтрокиУровень1.Пользователи = ВыборкаПоЗакладкам.Пользователи;
		КонецЕсли;
		//+++ AK suvv 2018.09.05 ИП-00019673
		Если ВыборкаПоЗакладкам.РазличныеТипыРолейПользователей = 1 и ВыборкаПоЗакладкам.РазличныеЗначения = 1 Тогда 
			СтрокиУровень1.Значение = ВыборкаПоЗакладкам.Значение;
			СтрокиУровень1.ТипыРолейПользователей = ВыборкаПоЗакладкам.ТипыРолейПользователей;
		КонецЕсли;
		//--- AK suvv
		
		ВыборкаПоЭлементам = ВыборкаПоЗакладкам.Выбрать(); 
		Пока ВыборкаПоЭлементам.Следующий() Цикл
			СтрокиУровень2 = СтрокиУровень1.Строки.Добавить();
			СтрокиУровень2.Поле = ВыборкаПоЭлементам.Поле;
			СтрокиУровень2.ЗаголовокПоля = ВыборкаПоЭлементам.ЗаголовокПоля;
			СтрокиУровень2.Значение = ВыборкаПоЭлементам.Значение;
			СтрокиУровень2.Пользователи = ВыборкаПоЭлементам.Пользователи;
			//+++ AK suvv 2018.09.05 ИП-00019673
			СтрокиУровень2.ТипыРолейПользователей = ВыборкаПоЭлементам.ТипыРолейПользователей;
			//--- AK suvv
			СтрокиУровень2.ВидНастройки = ВыборкаПоЭлементам.ВидНастройки;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПолейФормы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписок()
	
	Форма = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.Форма.НовыйМагазин");
	ПоляДляПроверки = Форма.Элементы.Этапы.ПодчиненныеЭлементы;	
	НомерЗакладки = 1;
	
	Для Каждого ПолеДляПроверки Из ПоляДляПроверки Цикл
		Если ТипЗнч(ПолеДляПроверки) = Тип("ГруппаФормы") Тогда 
			ПолучитьПодчиненныеЭлементы(ПолеДляПроверки, ТаблицаПолейФормы, НомерЗакладки);
		ИначеЕсли ТипЗнч(ПолеДляПроверки) = Тип("ПолеВводаФормы") Тогда 
			НовСтрокаТаблицыПолейФормы = ТаблицаПолейФормы.Добавить();
			НовСтрокаТаблицыПолейФормы.НомерЗакладки = НомерЗакладки;
			НовСтрокаТаблицыПолейФормы.Поле = ПолеДляПроверки.Имя;
			НовСтрокаТаблицыПолейФормы.ЗаголовокПоля = ?(ПолеДляПроверки.Заголовок = "", ПолеДляПроверки.Имя, ПолеДляПроверки.Заголовок);
			НовСтрокаТаблицыПолейФормы.ВидНастройки = ВидНастройки;
		КонецЕсли;
		НомерЗакладки = НомерЗакладки + 1;	
	КонецЦикла;
	
	УстановитьПользователей();
	
	ЗаполнитьДеревоПолейДляПроверки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиОткрытияМагазинов.НастраеваемыйОбъект КАК Поле,
	|	НастройкиОткрытияМагазинов.Значение КАК Пользователи,
	//+++ AK suvv 2018.09.05 ИП-00019673
	|	НастройкиОткрытияМагазинов.ЗначениеТипРолиПользователя КАК ТипыРолейПользователей
	//--- AK suvv
	|ИЗ
	|	РегистрСведений.НастройкиОткрытияМагазинов КАК НастройкиОткрытияМагазинов
	|ГДЕ
	|	НастройкиОткрытияМагазинов.ВидНастройки = &ВидНастройки";
	Запрос.УстановитьПараметр("ВидНастройки", ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина." + ВидНастройки));
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поле", ВыборкаНастроек.Поле);
		НайденныеСтроки = ТаблицаПолейФормы.НайтиСтроки(ПараметрыОтбора);
		Для каждого Стр из НайденныеСтроки Цикл
			Стр.Пользователи = ВыборкаНастроек.Пользователи;
			//+++ AK suvv 2018.09.05 ИП-00019673
			Стр.ТипыРолейПользователей = ВыборкаНастроек.ТипыРолейПользователей;
			//--- AK suvv
		КонецЦикла;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидНастройки", ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина." + ВидНастройки + "ДляВсехЗаИсключением"));
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поле", ВыборкаНастроек.Поле);
		НайденныеСтроки = ТаблицаПолейФормы.НайтиСтроки(ПараметрыОтбора);
		Для каждого Стр из НайденныеСтроки Цикл
			Стр.Пользователи = ВыборкаНастроек.Пользователи;
			//+++ AK suvv 2018.09.05 ИП-00019673
			Стр.ТипыРолейПользователей = ВыборкаНастроек.ТипыРолейПользователей;
			//--- AK suvv
			Стр.Значение = Истина;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры  //---АК SUVV

&НаКлиенте
Процедура ПриИзмененииРодителяВДереве(НазваниеРеквизитаДерева, Очистка = Ложь)
	
	ИДТекущейСтроки = Элементы["ДеревоПолейФормы"].ТекущаяСтрока;
	
	Если ИДТекущейСтроки <> Неопределено Тогда
		
		ЭлементКоллекции = ЭтаФорма["ДеревоПолейФормы"].НайтиПоИдентификатору(ИДТекущейСтроки);
		Если Очистка Тогда 
			ЭлементКоллекции[НазваниеРеквизитаДерева] = "";
		КонецЕсли;
		
		УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции[НазваниеРеквизитаДерева], НазваниеРеквизитаДерева);
		
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель[НазваниеРеквизитаДерева] = ?(УстановленноДляВсех(ЭлементКоллекции, НазваниеРеквизитаДерева),
			ЭлементКоллекции[НазваниеРеквизитаДерева], ?(НазваниеРеквизитаДерева = "Значение", Ложь, ""));
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки, НазваниеРеквизитаДерева)

    ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
    Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
        ТекЭлемент[НазваниеРеквизитаДерева] = ЗначениеПометки;
        УстановкаФлажков(ТекЭлемент, ТекЭлемент[НазваниеРеквизитаДерева], НазваниеРеквизитаДерева);
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция УстановленноДляВсех(ЭлементКоллекции, НазваниеРеквизитаДерева)

    СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
    Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
        Если ТекЭлемент[НазваниеРеквизитаДерева] <> ЭлементКоллекции[НазваниеРеквизитаДерева] Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла;
    Возврат Истина;

КонецФункции  

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВидНастройки = "КонтрольЗаполнения";
	ЗаполнитьСписок();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	НачатьТранзакцию();
	Дерево = РеквизитФормыВЗначение("ДеревоПолейФормы");
	
	//Удалим текущие настройки
	НаборЗаписей = РегистрыСведений.НастройкиОткрытияМагазинов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНастройки.Установить(ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина." + ВидНастройки));
	НаборЗаписей.Записать();
	
	//Запишем новые  
	ТЗ = новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ВидНастройки");
	ТЗ.Колонки.Добавить("НастраеваемыйОбъект");
	ТЗ.Колонки.Добавить("Значение");
	//+++ AK suvv 2018.09.05 ИП-00019673
	ТЗ.Колонки.Добавить("ЗначениеТипРолиПользователя");
	//--- AK suvv
	Для каждого СтрПервыйУровень из Дерево.Строки цикл	
		Для Каждого СтрВторойУровень из СтрПервыйУровень.Строки Цикл
		//+++ AK suvv 2018.09.05 ИП-00019673
		Если (ЗначениеЗаполнено(СтрВторойУровень.Пользователи) или ЗначениеЗаполнено(СтрВторойУровень.ТипыРолейПользователей)) И НЕ СтрВторойУровень.Значение Тогда
		//--- AK suvv
			НовСтрока = ТЗ.Добавить();
			НовСтрока.ВидНастройки = ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина." + ВидНастройки);
			НовСтрока.НастраеваемыйОбъект = СтрВторойУровень.Поле;
			НовСтрока.Значение = СтрВторойУровень.Пользователи;
			//+++ AK suvv 2018.30.08 ИП-00019673
			НовСтрока.ЗначениеТипРолиПользователя = СтрВторойУровень.ТипыРолейПользователей;
			//--- AK suvv
		КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	НаборЗаписей.Загрузить(ТЗ);
	НаборЗаписей.Записать();
	
	//Удалим текущие настройки
	НаборЗаписей = РегистрыСведений.НастройкиОткрытияМагазинов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНастройки.Установить(ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина." + ВидНастройки + "ДляВсехЗаИсключением"));
	НаборЗаписей.Записать();
	
	//Запишем новые  
	ТЗ = новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ВидНастройки");
	ТЗ.Колонки.Добавить("НастраеваемыйОбъект");
	ТЗ.Колонки.Добавить("Значение");
	//+++ AK suvv 2018.09.05 ИП-00019673
	ТЗ.Колонки.Добавить("ЗначениеТипРолиПользователя");
	//--- AK suvv
	Для каждого СтрПервыйУровень из Дерево.Строки цикл	
		Для Каждого СтрВторойУровень из СтрПервыйУровень.Строки Цикл
		//+++ AK suvv 2018.09.05 ИП-00019673
		Если (ЗначениеЗаполнено(СтрВторойУровень.Пользователи) или ЗначениеЗаполнено(СтрВторойУровень.ТипыРолейПользователей)) И СтрВторойУровень.Значение Тогда
		//--- AK suvv
			НовСтрока = ТЗ.Добавить();
			НовСтрока.ВидНастройки = ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина." + ВидНастройки + "ДляВсехЗаИсключением");
			НовСтрока.НастраеваемыйОбъект = СтрВторойУровень.Поле;
			НовСтрока.Значение = СтрВторойУровень.Пользователи;
			//+++ AK suvv 2018.09.05 ИП-00019673
			НовСтрока.ЗначениеТипРолиПользователя = СтрВторойУровень.ТипыРолейПользователей;
			//--- AK suvv
		КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	НаборЗаписей.Загрузить(ТЗ);
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

&НаКлиенте
Процедура Сохранить(Команда)	
	
	СохранитьНастройкиНаСервере();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НастройкиПолейФормыПользователиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиПолейФормы.ТекущиеДанные;	
	СтандартнаяОбработка = Ложь;
	П = Новый Структура;
	П.Вставить("Пользователи", Элемент.ТекстРедактирования);
	ТекущиеДанные.Пользователи = ОткрытьФормуМодально("Обработка.ОткрытиеМагазинов.Форма.ФормаВыбораПользователей",П, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНастройкиПриИзменении(Элемент)
	
	ЗаполнитьСписок();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоПолейФормыЗначениеПриИзменении(Элемент)
	
	ПриИзмененииРодителяВДереве("Значение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолейФормыПользователиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы["ДеревоПолейФормы"].ТекущиеДанные;;	
	СтандартнаяОбработка = Ложь;
	П = Новый Структура;
	П.Вставить("Пользователи", Элемент.ТекстРедактирования);
	//+++ AK suvv 2018.09.05 ИП-00019673
	П.Вставить("ТипОбъекта", "СправочникСсылка.Пользователи");
	//--- AK suvv
	ТекущиеДанные.Пользователи = ОткрытьФормуМодально("Обработка.ОткрытиеМагазинов.Форма.ФормаВыбораПользователей",П, Элемент);	

	ПриИзмененииРодителяВДереве("Пользователи");
	
КонецПроцедуры

//+++ AK suvv 2018.09.05 ИП-00019673
&НаКлиенте
Процедура ДеревоПолейФормыТипыРолейПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы["ДеревоПолейФормы"].ТекущиеДанные;	
	СтандартнаяОбработка = Ложь;
	П = Новый Структура;
	П.Вставить("ТипыРолейПользователей", Элемент.ТекстРедактирования);
	П.Вставить("ТипОбъекта", "ПланВидовХарактеристикСсылка.ТипыРолейПользователя");
	ТекущиеДанные.ТипыРолейПользователей = ОткрытьФормуМодально("Обработка.ОткрытиеМагазинов.Форма.ФормаВыбораПользователей",П, Элемент);	

	ПриИзмененииРодителяВДереве("ТипыРолейПользователей");

КонецПроцедуры //--- AK suvv

&НаКлиенте
Процедура ДеревоПолейФормыПользователиОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииРодителяВДереве("Пользователи", Истина);

КонецПроцедуры

//+++ AK suvv 2018.09.05 ИП-00019673
&НаКлиенте
Процедура ДеревоПолейФормыТипыРолейПользователейОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииРодителяВДереве("ТипыРолейПользователей", Истина);
	
КонецПроцедуры //--- AK suvv

&НаКлиенте
Процедура ДеревоПолейФормыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолейФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти
