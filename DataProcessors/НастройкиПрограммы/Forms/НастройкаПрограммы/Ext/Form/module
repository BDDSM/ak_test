////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСтрокаКонстант Экспорт; 

Перем мИсходноеЗначениеИспользоватьРегистрСвободныеОстатки;
Перем мИсходноеЗначениеПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте;
Перем мИсходноеЗначениеЗаголовокСистемы;

Перем мИсходноеЗначениеИспользоватьВерсионированиеОбъектов;

Перем МодифицированностьПередЗаписью; // Устанавливается в событии ПередЗаписью

Перем мСоответствиеРолей Экспорт;
Перем мСоответствиеПользователейИРолей Экспорт;

Перем ТаблицаРолиИИсполнителиДоРедактирования;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ВызватьФормуИзмененияНастроекПрограммы(ИмяФормы)
	
	ФормаИзмененияНастройки = Обработки.НастройкиПрограммы.ПолучитьФорму(ИмяФормы);
	ФормаИзмененияНастройки.Открыть();
	
КонецФункции

Функция ПроверитьЗаполнениеПараметров()

	Ошибки = "";
	
	//Проверка заполнения настройки отложенного проведения
	Если НастройкаОтложенногоПроведения.Количество() > 0 Тогда
		ЕстьОшибкиНеЗаполненаОрганизация = Ложь;
		ЕстьОшибкиНеЗаполненаДата = Ложь;
		ЕстьОшибкиНеЗаполненаНастройка = Ложь;
		Для Каждого СтрокаНастройка из НастройкаОтложенногоПроведения Цикл
			Если НЕ ЕстьОшибкиНеЗаполненаОрганизация И НЕ ЗначениеЗаполнено(СтрокаНастройка.Организация)  Тогда
				ЕстьОшибкиНеЗаполненаОрганизация = Истина;
				Ошибки = Ошибки + Символы.ПС
						+ " - Не заполнена организация, для которой применяется отложенное проведение (раздел ""Отложенное проведение"")";
			КонецЕсли;
			Если НЕ ЕстьОшибкиНеЗаполненаДата И НЕ ЗначениеЗаполнено(СтрокаНастройка.ДатаНачалаДействия) Тогда
				ЕстьОшибкиНеЗаполненаДата = Истина;
				Ошибки = Ошибки + Символы.ПС
						+ " - Не заполнена дата начала действия отложенного проведения (раздел ""Отложенное проведение"")";
			КонецЕсли;
			Если НЕ ЕстьОшибкиНеЗаполненаНастройка И НЕ ЗначениеЗаполнено(СтрокаНастройка.НастройкаДопроведенияДокументов) Тогда
				ЕстьОшибкиНеЗаполненаНастройка = Истина;
				Ошибки = Ошибки + Символы.ПС
						+ " - Не заполнена настройка допроведения документов (раздел ""Отложенное проведение"")";
			КонецЕсли;
		КонецЦикла;
		//Проверка дублирующихся организаций в настройке отложенного проведения
		НастройкаОтложенногоПроведения_Копия = НастройкаОтложенногоПроведения.Скопировать();
		НастройкаОтложенногоПроведения_Копия.Свернуть("Организация");
		Если НастройкаОтложенногоПроведения_Копия.Количество() <> НастройкаОтложенногоПроведения.Количество() Тогда
			Ошибки = Ошибки + Символы.ПС
				+ " - Введено несколько строк с одинаковой организацией (раздел ""Отложенное проведение"")";
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОшибки = (Ошибки <> "");
	Если ЕстьОшибки Тогда
		ОбщегоНазначения.Сообщение("Обнаружены ошибки:" + Ошибки); 
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;

КонецФункции // ПроверитьЗаполнениеПараметров()

Функция ПроверитьСогласованностьПараметров()
	
	Ошибки = "";
	
	
	ЕстьОшибки = (Ошибки <> "");
	Если ЕстьОшибки Тогда
		ОбщегоНазначения.Сообщение("Обнаружено рассогласование параметров:" + Ошибки); 
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;

КонецФункции // ПроверитьСогласованностьДанных

Процедура СообщитьОбИзмененииПараметровУчета()
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы() ;
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8") 
		   И (НЕ ТекСоединение.НомерСоединения = НомерСоединенияИнформационнойБазы())
		   И (НЕ ТекСоединение.Пользователь = неопределено) Тогда
			  
				ОбщегоНазначения.Сообщение("Внимание! Вы изменили настройки параметров учета!
						 |В настоящий момент в базе работают пользователи. 
						 |Некоторые настройки могут не начать действовать для них.
						 |Им необходимо перезапустить программу. 
						 |Для Вас новые настройки уже вступили в силу, перезапускать программу не требуется.", СтатусСообщения.Важное);
				Прервать;		 
		КонецЕсли;
	КонецЦикла;			
	
КонецПроцедуры

Процедура ПроверитьИЗаписатьСписокВидовЗадач(СписокВидовЗадач) 

	ТекущийСписокЗадач 	 = Новый СписокЗначений;
	
	//получим список задач из ИБ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЗадачПользователей.Ссылка,
	|	ВидыЗадачПользователей.Использование,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЗадачПользователей.Ссылка) КАК СсылкаПредставление
	|ИЗ
	|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЗадачПользователей.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийСписокЗадач.Добавить(Выборка.Ссылка, , Выборка.Использование);	
	КонецЦикла;
	
	Для каждого ЭлементСписка Из СписокВидовЗадач Цикл
		НайденнаяЗадача = ТекущийСписокЗадач.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденнаяЗадача <> Неопределено и НайденнаяЗадача.Пометка <> ЭлементСписка.Пометка Тогда
			СправочникОбъект = НайденнаяЗадача.Значение.ПолучитьОбъект();
			СправочникОбъект.Использование = ЭлементСписка.Пометка;
			СправочникОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

Функция ЗаписатьНастройкиРегламентныхЗаданийЗУП(ФормаОбработки)

	НастройкиЗаписаны = Истина;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельРазделов.Страницы.РегламентныеЗадания.Видимость Тогда
		
		// Остатки отпусков регламентированного учета
		//НастройкиЗаписаны = ЗаписатьНастройкиРегламентногоЗадания(ФормаОбработки, "РасчетОстатковОтпусковОрганизаций");
		
		// Остатки отпусков управленческого учета
		//НастройкиЗаписаны = ЗаписатьНастройкиРегламентногоЗадания(ФормаОбработки, "РасчетОстатковОтпусков");
		
		//Если НастройкиЗаписаны Тогда
		//	НастройкиЗаписаны = ЗаписатьНастройкиРегламентногоЗадания(ФормаОбработки, "УничтожениеПерсональныхДанных"); 
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиЗаписаны;

КонецФункции // ЗаписатьНастройкиРегламентныхЗаданий()

Функция ЗаписатьНастройкиРегламентногоЗадания(ФормаОбработки, ИмяЗадания) Экспорт

	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);	
	Если ФормаОбработки[ИмяЗадания] <> РегламентноеЗадание.Использование Тогда
		РегламентноеЗадание.Использование = ФормаОбработки[ИмяЗадания];
		Попытка
			РегламентноеЗадание.Записать();
		Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;	
	
	Возврат Истина;

КонецФункции // ЗаписатьНастройкиРегламентногоЗадания()

// Функция записывает настройки в регистр сведений РолиИИсполнители
//
// Возвращаемое значение:
//   Булево   - Ложь, когда необходимо записать настройки и набор не удалось записать
//
Функция ЗаписатьНастройкиРолейИИсполнителей(ФормаОбработки) Экспорт
	
	// проверим необходимость записи настроек по задачам
	Если ФормаОбработки.ЭлементыФормы.ПанельРазделов.Страницы.СтраницаРаботаСЗадачами.Видимость Тогда
		
		ПроверитьИЗаписатьСписокВидовЗадач(ФормаОбработки.СписокВидовЗадач);
		
		Если Не ФормаОбработки.РазделятьЗадачиПоОрганизациям и НЕ ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
			// не используется разделение задач, не изменяем записи в регистре РолиИИсполнители
			Возврат Истина;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ТаблицаРолиИИсполнители = НаборЗаписей.Выгрузить();
		
		МассивОрганизаций = Новый Массив;
		Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации";
			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Отбор.Исполнитель.Использование = Истина;
		НаборЗаписей.Отбор.Роль.Использование = Истина;
		
		СтруктураПоиска = Новый Структура("Исполнитель, Организация");
		Для каждого СтрокаТаблицы Из ОбработкаОбъект.РолиИИсполнители Цикл
			
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Отбор.Организация.Значение = СтрокаТаблицы.Организация;
			НаборЗаписей.Отбор.Исполнитель.Значение = СтрокаТаблицы.Исполнитель;
			НаборЗаписей.Отбор.Роль.Значение = СтрокаТаблицы.Роль;
			
			СтруктураПоиска.Вставить("Исполнитель", СтрокаТаблицы.Исполнитель);
			СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
			СтруктураПоиска.Вставить("Роль", СтрокаТаблицы.Роль);
			
			НадоЗаписать = Ложь;
			
			Если СтрокаТаблицы.Использование И ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
				НадоЗаписать = Истина;
			ИначеЕсли Не СтрокаТаблицы.Использование И ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				// запишем пустой набор
				НадоЗаписать = Истина;
			КонецЕсли;	
			
			Если НадоЗаписать Тогда
				Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
					Возврат Ложь
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьНастройкиРолейИИсполнителей()
	
Процедура СохранитьДанныеУчетаЗарплатыИПерсонала()

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	НачатьТранзакцию();
	
	Если НЕ ЗаписатьНастройкиРегламентныхЗаданийЗУП(ЭтаФорма) Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаписатьНастройкиРолейИИсполнителей(ЭтаФорма) Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();

	
КонецПроцедуры

Процедура ИзменитьВидимостьКомандыПерейтиКНастройкеЗадач(ФормаОбработки)

	ФормаОбработки.ЭлементыФормы.НадписьПерейтиКНастройкеЗадач.Видимость = ФормаОбработки.ЭлементыФормы.РазделятьЗадачиПоРолямИсполнителей.Доступность
		И (ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей или ФормаОбработки.РазделятьЗадачиПоОрганизациям);	

КонецПроцедуры

Процедура ЗаполнитьСоответствия()
	
	// заполним соответствие ролей для редактирования ролей исполнителей
	МассивРолейИсполнителей = Новый Массив;
	МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Расчетчик);
	МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Кадровик);
	мСоответствиеРолей.Вставить(Метаданные.Роли.ПолныеПрава, МассивРолейИсполнителей);
	
//	МассивРолейИсполнителей = Новый Массив;
//	МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Расчетчик);
//	мСоответствиеРолей.Вставить(Метаданные.Роли.РасчетчикРегламентированнойЗарплаты, МассивРолейИсполнителей);
	
//	МассивРолейИсполнителей = Новый Массив;
//	МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Кадровик);
//	мСоответствиеРолей.Вставить(Метаданные.Роли.КадровикРегламентированныхДанных, МассивРолейИсполнителей);
	
КонецПроцедуры

Процедура ПолучитьДанныеИЗаполнитьРеквизитыФормы()
	
	ОбработкаОбъект.ПолучитьОбщиеДанныеИЗаполнитьФорму(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСКА РАЗДЕЛОВ

Процедура СписокРазделовПриАктивизацииСтроки(Элемент)
	
	ТекущйийРаздел = ЭлементыФормы.СписокРазделов.ТекущаяСтрока;
	ЭлементыФормы.ПанельРазделов.ТекущаяСтраница = ЭлементыФормы.ПанельРазделов.Страницы[ТекущйийРаздел.ИмяРаздела];
	
КонецПроцедуры

Процедура ЗаполнитьСписокРазделов()
	
	СписокРазделов.Очистить();
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Основные",					"Основные", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "ОтложенноеПроведение",		"Отложенное проведение", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "РегламентныеЗадания",		"Регламентные задания", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "CRM",						"CRM", 1);
	//ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "ЭлектроннаяПочта",			"Электронная почта", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "ВыводСообщений",			"Вывод сообщений", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Версионирование",			"Версионирование", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "СтраницаРаботаСЗадачами",	"Работа с задачами", 1);
	
КонецПроцедуры // 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗДЕЛА CRM

// Функция преобразовывает таблицу значений в хранилище значения
//
// Параметры
//  Шаблоны – таблица значений
//
// Возвращаемое значение:
//   Хранилище значений
//
Функция ПолучитьШаблоныНомеров(Шаблоны)

	ТаблицаСоответствий = Новый Соответствие;

	Для каждого СтрокаШаблонов Из Шаблоны Цикл

		Если ПустаяСтрока(СтрокаШаблонов.ШаблоныТелефонныхНомеров) Тогда
			Продолжить;
		КонецЕсли;

		ТаблицаСоответствий.Вставить(СтрЧислоВхождений(СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров),"9"),СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров));

	КонецЦикла;

	Возврат Новый ХранилищеЗначения(ТаблицаСоответствий);

КонецФункции // ПолучитьШаблоныНомеров()

// Процедура преобразовывает хранилище значений в таблицу значений 
//
// Параметры
//  Шаблоны – хранилище значений
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПолучитьТаблицуШаблоновТелефонов(Шаблоны)

	Если ТипЗнч(Шаблоны) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;

	СтруктураШаблонов = Шаблоны.Получить();

	ШаблоныТелефонов.Очистить();

	Если ТипЗнч(СтруктураШаблонов) = Тип("Соответствие") Тогда

		Для Индекс = 1 По 50 Цикл //думаю, больше 50-ти значных номеров не может быть

			НайденныйШаблон = СтруктураШаблонов.Получить(Индекс);

			Если НайденныйШаблон <> Неопределено Тогда

				СтрокаШаблонов = ШаблоныТелефонов.Добавить();
				СтрокаШаблонов.ШаблоныТелефонныхНомеров = НайденныйШаблон;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "НастройкаШаблоновБыстрогоВводаКонтрагентаИзСобытия".
// 
Процедура НастройкаШаблоновБыстрогоВводаКонтрагентаИзСобытияНажатие(Элемент)

	СписокИменКонстант = Новый СписокЗначений;
	СписокИменКонстант.Добавить("ВидАдресаКонтрагента");
	СписокИменКонстант.Добавить("ВидТелефонаКонтактногоЛица");
	СписокИменКонстант.Добавить("ВидТелефонаКонтрагента");
	СписокИменКонстант.Добавить("ВидЭлектроннойПочтыКонтактногоЛица");
	СписокИменКонстант.Добавить("ВидЭлектроннойПочтыКонтрагента");
	СписокИменКонстант.Добавить("ЮрФизЛицо");
	СписокИменКонстант.Добавить("ОсновнойВидДеятельностиКонтрагента");
	
	Запись = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьМенеджерЗаписи();
	
	Обработка = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
	Обработка.Запись = Запись;
	ФормаНастройки = Обработка.ПолучитьФорму();
	ФормаНастройки.ЗаполнитьНачальныеДанные(КонстантыНабор);
	
	ФормаНастройки.ВозможностьРегистрации = Ложь;
	
	Шаблон = ФормаНастройки.ОткрытьМодально();
	
	Если Шаблон = Неопределено Тогда
		СтруктураПрочихЗначений = Новый Структура;
		Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Ресурсы Цикл
			Если СписокИменКонстант.НайтиПоЗначению(Реквизит.Имя) <> Неопределено Тогда
				КонстантыНабор[Реквизит.Имя] = Запись[Реквизит.Имя];
			Иначе
				СтруктураПрочихЗначений.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
			КонецЕсли;
		КонецЦикла;

		ХранилищеПрочихЗначений = Новый ХранилищеЗначения(СтруктураПрочихЗначений);
		КонстантыНабор.ЗначенияПоУмолчаниюДляНовогоКонтрагента = ХранилищеПрочихЗначений;
	КонецЕсли;

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

Процедура ЗаполнитьИсходныеЗначенияКонстант()

	мИсходноеЗначениеПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте = ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте;
	мИсходноеЗначениеЗаголовокСистемы = ЗаголовокСистемы;
	мИсходноеЗначениеИспользоватьВерсионированиеОбъектов = ИспользоватьВерсионированиеОбъектов;
	
КонецПроцедуры //


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗДЕЛА Версионирование

Процедура УстановитьДоступностьНастройкиВерсионирования()

	ЭлементыФормы.НастройкаВерсионирования.Доступность = ИспользоватьВерсионированиеОбъектов;
	
КонецПроцедуры //

Процедура НастройкаВерсионированияНажатие(Элемент)
	
	Если мИсходноеЗначениеИспользоватьВерсионированиеОбъектов <> ИспользоватьВерсионированиеОбъектов Тогда
		ТекстВопроса = "Для продолжения необходимо записать настройки";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,, "Настройка версионирования объектов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			 Возврат;
		КонецЕсли; 
		
		Если НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.НастройкаВерсионированияОбъектов.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ИспользоватьВерсионированиеОбъектовПриИзменении(Элемент)
	
	УстановитьДоступностьНастройкиВерсионирования();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗДЕЛА ОтложенноеПроведение

Процедура ПолучитьТаблицуНастройкиОтложенногоПроведения()
	НастройкаОтложенногоПроведения.Очистить();
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организация,
	|	ДатаНачалаДействия,
	|	НастройкаДопроведенияДокументов
	|ИЗ РегистрСведений.НастройкаОтложенногоПроведения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаНастройка = НастройкаОтложенногоПроведения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНастройка, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНастройкуОтложенногоПроведения()
	
	НаборЗаписей = РегистрыСведений.НастройкаОтложенногоПроведения.СоздатьНаборЗаписей();
	Для каждого СтрокаНастройка Из НастройкаОтложенногоПроведения Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаНастройка);
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗДЕЛА СтраницаРаботаСЗадачами

Процедура КоманднаяПанельИспользуемыеЗадачиУстановитьФлажки(Кнопка)
	
	СписокВидовЗадач.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельИспользуемыеЗадачиСнятьФлажки(Кнопка)
	
	СписокВидовЗадач.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка "РазделятьЗадачиПоРолямИсполнителей"
//
Процедура РазделятьЗадачиПоРолямИсполнителейПриИзменении(Элемент)
	
	ИзменитьВидимостьКомандыПерейтиКНастройкеЗадач(ЭтаФорма);
	ОбработкаОбъект.ЗаполнитьТЧРолиИИсполнители(ЭтаФорма);
	
КонецПроцедуры // РазделятьЗадачиПоРолямИсполнителейПриИзменении

// Процедура - обработчик события ПриИзменении флажка "РазделятьЗадачиПоОрганизациям"
//
Процедура РазделятьЗадачиПоОрганизациямПриИзменении(Элемент)
	
	ИзменитьВидимостьКомандыПерейтиКНастройкеЗадач(ЭтаФорма);
	ОбработкаОбъект.ЗаполнитьТЧРолиИИсполнители(ЭтаФорма);
	
КонецПроцедуры // РазделятьЗадачиПоОрганизациямПриИзменении

Процедура СписокВидовЗадачПриИзмененииФлажка(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

Процедура НадписьПерейтиКНастройкеЗадачНажатие(Элемент)
	
	// запомним табличную часть
	ТаблицаРолиИИсполнителиДоРедактирования = ОбработкаОбъект.РолиИИсполнители.Выгрузить();
	ОбработкаОбъект.ОткрытьФормуНастройкиРолей(ЭтаФорма, Элемент);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ

Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	Результат = Истина;

	Если ЭтаФорма.Модифицированность Тогда

		Ответ = Вопрос("Настройки изменены. Для печати необходимо записать настройки.
		               |Записать?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Печать");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Попытка
				
				Результат = ЗаписатьВФорме();				
				
			Исключение
				Результат = Ложь;
			КонецПопытки;	

		КонецЕсли;

	КонецЕсли;

	Если Результат Тогда
		
		СписокРазделовДляПечати = СписокРазделов.Скопировать();
		
		Если НЕ глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") Тогда
			СписокРазделовДляПечати.Удалить(СписокРазделовДляПечати.Найти("РасчетСебестоимости","ИмяРаздела"));
		КонецЕсли;
		
		ОбработкаОбъект.Печать(СписокРазделовДляПечати, "Настройка программы");
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСоответствия();
	ОбработкаОбъект.ФормаОбработкиПередОткрытием(ЭтаФорма, Отказ);
	
	НомерВерсииКонфигурации = глЗначениеПеременной("НомерВерсииКонфигурации");
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЗаполнитьСписокРазделов();
	
	ЗаполнитьИсходныеЗначенияКонстант();
	
	// CRM
	ПолучитьТаблицуШаблоновТелефонов(ШаблоныТелефонныхНомеров);
	Если НЕ ПравоДоступа("Изменение", Константы.ШаблоныТелефонныхНомеров.СоздатьМенеджерЗначения().Метаданные()) Тогда
		ЭлементыФормы.ШаблоныТелефонов.ТолькоПросмотр = Истина;
	КонецЕсли;	
	Если НЕ (ПравоДоступа("Изменение", Константы.ЗначенияПоУмолчаниюДляНовогоКонтрагента.СоздатьМенеджерЗначения().Метаданные()) 
		И ПравоДоступа("Изменение", Константы.ЗначенияПоУмолчаниюДляНовогоКонтрагента.СоздатьМенеджерЗначения().Метаданные())) Тогда
		
		ЭлементыФормы.НастройкаШаблоновБыстрогоВводаКонтрагентаИзСобытия.Доступность = Ложь;
	КонецЕсли;
	

	
	//Отложенное проведение
	ПолучитьТаблицуНастройкиОтложенногоПроведения();
	Если НЕ ПравоДоступа("Изменение", РегистрыСведений.НастройкаОтложенногоПроведения.СоздатьНаборЗаписей().Метаданные()) Тогда
		ЭлементыФормы.НастройкаОтложенногоПроведения.ТолькоПросмотр = Истина;
	КонецЕсли;	

	Если НЕ ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
		ЭлементыФормы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Доступность = Ложь;
		ЭлементыФормы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Доступность = Ложь;
	КонецЕсли;	
	
	УстановитьДоступностьНастройкиВерсионирования();
	
	ПроверитьСогласованностьПараметров();
	
	ИзменитьВидимостьКомандыПерейтиКНастройкеЗадач(ЭтаФорма);
	
	ПолучитьДанныеИЗаполнитьРеквизитыФормы();
	

КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Если изменился пользователь для выполнения регл. заданий
	// то необходимо сообщить, что изменения вступят в силу не сразу.
	Если ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте <> мИсходноеЗначениеПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте Тогда
		Если ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Пустая() Тогда
			Если мИсходноеЗначениеПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте = глЗначениеПеременной("глТекущийПользователь") Тогда
				ТекстСообщения = "Для завершения выполнения регламентных заданий необходимо закрыть (перезапустить) текущий сеанс работы.";
			Иначе
				ТекстСообщения = "Для завершения выполнения регламентных заданий необходимо закрыть сеанс пользователя: " + мИсходноеЗначениеПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте + ".";
			КонецЕсли; 
		Иначе
			ТекстСообщения = "Изменение пользователя для выполнения регламентных заданий вступит в силу при следующем запуске программы.";
		КонецЕсли;
		ОбщегоНазначения.Сообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация);
	КонецЕсли; 
	
	// При изменении значения константы ЗаголовокСистемы - изменение заголовка системы
	Если ЗаголовокСистемы <> мИсходноеЗначениеЗаголовокСистемы Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли;
	
	Если МодифицированностьПередЗаписью Тогда
		СообщитьОбИзмененииПараметровУчета();
		МодифицированностьПередЗаписью = Ложь;
	КонецЕсли;

	ЗаполнитьИсходныеЗначенияКонстант();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ПроверитьЗаполнениеПараметров()
		ИЛИ НЕ ПроверитьСогласованностьПараметров() Тогда
		
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	МодифицированностьПередЗаписью = Модифицированность;
	
	ШаблоныТелефонныхНомеров = ПолучитьШаблоныНомеров(ШаблоныТелефонов);
	
	ЗаписатьНастройкуОтложенногоПроведения();
	
	СохранитьДанныеУчетаЗарплатыИПерсонала();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//обновление данных формы при изменении значений настроек в других формах
	Если ИмяСобытия = "ИспользованиеРегистраСвободныеОстатки" Тогда
		мИсходноеЗначениеИспользоватьРегистрСвободныеОстатки = Константы.ИспользоватьРегистрСвободныеОстатки.Получить(); 
		
		ЭлементФормыДатаНачалаИспользованияРегистраСвободныеОстатки = Константы.ДатаНачалаИспользованияРегистраСвободныеОстатки.Получить();
		ЭлементФормыИспользоватьРегистрСвободныеОстатки = мИсходноеЗначениеИспользоватьРегистрСвободныеОстатки;
		
	ИначеЕсли ИмяСобытия = "НеОбновлятьТаблицуРолиИИсполнители" и Источник = ЭтаФорма Тогда
		ОбработкаОбъект.РолиИИсполнители.Загрузить(ТаблицаРолиИИсполнителиДоРедактирования);
	ИначеЕсли ИмяСобытия = "ОбновитьТаблицуРолиИИсполнители" и Источник = ЭтаФорма Тогда
		Модифицированность = Истина;	
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСтрокаКонстант 				 = "";
мСоответствиеРолей 				 = Новый Соответствие;
мСоответствиеПользователейИРолей = Новый Соответствие;
