#Если Клиент Тогда
	
// Функция для проверки возможности изменения настроек учета - открытия соответствующих форм для редактирования
//
Функция ПолучитьРазрешениеНаИзменениеНастроекУчета() Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Предупреждение("Изменение настроек может выполнять только пользователь с ролью ""Полные права""");
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПодтверждениеПользователя(ЗаголовокВопроса="") Экспорт
	ТекстВопроса = 
	"Выполнение данной операции может занять продолжительное время. 
	|Настоятельно рекомендуется предварительно ознакомиться cо справочной информацией. Продолжить?";
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,ЗаголовокВопроса) = КодВозвратаДиалога.Нет Тогда
		Возврат ложь;
	КонецЕсли;
    Возврат истина;
КонецФункции

Процедура ДобавитьРаздел(СписокРазделов, ИмяРаздела, Представление, УровеньРаздела) Экспорт

	Отступ = "";
	Для Сч2 = 1 По УровеньРаздела - 1 Цикл
		Отступ = Отступ + "    ";
	КонецЦикла; 
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.ИмяРаздела = ИмяРаздела;
	СтрокаРаздела.Представление = " " + Отступ + Представление;
	
КонецПроцедуры // ДобавитьРаздел

Функция ПолучитьСтруктуруЗначенийПараметров()

	СтруктураЗначенийПараметров = Новый Структура;
	
	// Получим константы
	
	ТекстЗапроса = "";
	Для каждого ЭлКонстанта Из Метаданные.Константы Цикл
		
		ПолучитьПредставлениеЗначения = Ложь;
		Для каждого ЭлКоллекции Из ЭлКонстанта.Тип.Типы() Цикл
			// Если не примитивный тип, то необходимо получить представление
			Если ЭлКоллекции <> Тип("Строка")
				И ЭлКоллекции <> Тип("Число")
				И ЭлКоллекции <> Тип("Дата")
				И ЭлКоллекции <> Тип("Булево")
				И ЭлКоллекции <> Тип("ХранилищеЗначения") Тогда
				
				ПолучитьПредставлениеЗначения = Истина;	
			КонецЕсли;				
		КонецЦикла;
		
		Если ПравоДоступа("Чтение", ЭлКонстанта) Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", Константы." + ЭлКонстанта.Имя + " КАК " + ЭлКонстанта.Имя + Символы.ПС;
			Если ПолучитьПредставлениеЗначения Тогда
				ТекстЗапроса = ТекстЗапроса + ", ПРЕДСТАВЛЕНИЕ(Константы." + ЭлКонстанта.Имя + ") КАК " + ЭлКонстанта.Имя + "Представление" + Символы.ПС;
			КонецЕсли;
			
			Если ЭлКонстанта.Имя = "ВестиРеглУчетРасчетовСПерсоналомСводно" Тогда
				ТекстЗапроса = ТекстЗапроса + ",ВЫБОР КОГДА Константы.ВестиРеглУчетРасчетовСПерсоналомСводно Тогда
				|""Сводно по всем работникам""
				|Иначе ""По каждому работнику""
				|КОНЕЦ КАК ВестиРеглУчетРасчетовСПерсоналомСводноПредставление";
			КонецЕсли;
			
			Если ЭлКонстанта.Имя = "ПрименятьВ2008ГодуПравилаПБУ142000" Тогда
				ТекстЗапроса = ТекстЗапроса + ",ВЫБОР КОГДА Константы.ПрименятьВ2008ГодуПравилаПБУ142000 Тогда
				|""Отчетного года""
				|Иначе ""Каждого месяца""
				|КОНЕЦ КАК ПрименятьВ2008ГодуПравилаПБУ142000Представление";
			КонецЕсли;
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + ", ""<Недостаточно прав>"" КАК " + ЭлКонстанта.Имя + Символы.ПС;
			Если ПолучитьПредставлениеЗначения Тогда
				ТекстЗапроса = ТекстЗапроса + ", ""<Недостаточно прав>"" КАК " + ЭлКонстанта.Имя + "Представление" + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли; 
		
		СтруктураЗначенийПараметров.Вставить(ЭлКонстанта.Имя);
		Если ПолучитьПредставлениеЗначения Тогда
			СтруктураЗначенийПараметров.Вставить(ЭлКонстанта.Имя + "Представление");
		КонецЕсли;
		
	КонецЦикла; 
	
	ТекстЗапроса = Сред(ТекстЗапроса, 3);
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|" + ТекстЗапроса + "
		|ИЗ Константы КАК Константы";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураЗначенийПараметров, Выборка);
	
	// Получим параметр "РасчетОстатковОтпусковОрганизаций"
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("РасчетОстатковОтпусковОрганизаций");	
	СтруктураЗначенийПараметров.Вставить("РасчетОстатковОтпусковОрганизаций", РегламентноеЗадание.Использование);
		
 	// Получим параметр "РасчетОстатковОтпусков"
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("РасчетОстатковОтпусков");	
	СтруктураЗначенийПараметров.Вставить("РасчетОстатковОтпусков", РегламентноеЗадание.Использование);
		
 	// Получим параметр "УничтожениеПерсональныхДанных"
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное("УничтожениеПерсональныхДанных");	
	СтруктураЗначенийПараметров.Вставить("УничтожениеПерсональныхДанных", РегламентноеЗадание.Использование);
	
 	// Получим параметр "НомерВерсииКонфигурации"
	СтруктураЗначенийПараметров.Вставить("НомерВерсииКонфигурации", глЗначениеПеременной("НомерВерсииКонфигурации"));
	
	// Защита персональных данных
	НастройкиМенеджерЗаписи = РегистрыСведений.НастройкаЗащитыПерсональныхДанных.СоздатьМенеджерЗаписи();
	НастройкиМенеджерЗаписи.Прочитать();
	
	СтруктураЗначенийПараметров.Вставить("РегистрацияСобытийВключена", ?(ПолучитьИспользованиеЖурналаРегистрации().Количество()>0,Истина,Ложь));
	СтруктураЗначенийПараметров.Вставить("КонтролироватьЛичныеДанные", НастройкиМенеджерЗаписи.КонтролироватьЛичныеДанные);
	СтруктураЗначенийПараметров.Вставить("КонтролироватьДанныеОПрофессииИКомпетенциях", НастройкиМенеджерЗаписи.КонтролироватьДанныеОПрофессииИКомпетенциях);
	СтруктураЗначенийПараметров.Вставить("КонтролироватьДанныеОбИмуществе", НастройкиМенеджерЗаписи.КонтролироватьДанныеОбИмуществе);
	СтруктураЗначенийПараметров.Вставить("КонтролироватьДанныеОДоходах", НастройкиМенеджерЗаписи.КонтролироватьДанныеОДоходах);
	СтруктураЗначенийПараметров.Вставить("НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе", НастройкиМенеджерЗаписи.НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе);
	СтруктураЗначенийПараметров.Вставить("ОграничитьКоличествоСотрудниковПриПечатиВедомости", НастройкиМенеджерЗаписи.ОграничитьКоличествоСотрудниковПриПечатиВедомости);
	
	Возврат СтруктураЗначенийПараметров;
	
КонецФункции //

Процедура Печать(СписокРазделов, Заголовок) Экспорт
	
	Макет = ПолучитьМакет("ПараметрыПечать");
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	ТабДокумент = Новый ТабличныйДокумент;
	
	СтруктураЗначенийПараметров = ПолучитьСтруктуруЗначенийПараметров();
	
	Для каждого РазделПараметров Из СписокРазделов Цикл
		Если Макет.Области.Найти(РазделПараметров.ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьРаздела = Макет.ПолучитьОбласть(РазделПараметров.ИмяРаздела);
		ОбластьРаздела.Параметры.Заполнить(СтруктураЗначенийПараметров);
		
		ТабДокумент.Вывести(ОбластьРаздела);
		ТабДокумент.Вывести(ОбластьРазделитель);
	КонецЦикла;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , Ложь, Заголовок);	
	
КонецПроцедуры // Печать

////////////////////////////////////////////////////////////////////////////////

Процедура ПолучитьОбщиеДанныеИЗаполнитьФорму(ФормаОбработки) Экспорт
	
	Если ФормаОбработки.ЭлементыФормы.ПанельРазделов.Страницы.СтраницаРаботаСЗадачами.Видимость Тогда
		
		//получим список задач
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗадачПользователей.Ссылка,
		|	ВидыЗадачПользователей.Использование,
		|	ПРЕДСТАВЛЕНИЕ(ВидыЗадачПользователей.Ссылка) КАК СсылкаПредставление
		|ИЗ
		|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗадачПользователей.Наименование";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФормаОбработки.СписокВидовЗадач.Добавить(Выборка.Ссылка, Выборка.СсылкаПредставление, Выборка.Использование);	
		КонецЦикла;	
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ТаблицаРолиИИсполнители = НаборЗаписей.Выгрузить();
		
		// заполним массив мМассивПользователей - пользователи для которых производится настройка работы
		// с задачами, и соответствие пользователей и пользователей ИБ
		ТаблицаПользователейИБ = Новый ТаблицаЗначений;
		ТаблицаПользователейИБ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
		ТаблицаПользователейИБ.Колонки.Добавить("РольИсполнителя", Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"));
		
		МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
			Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеРолей Цикл
				ДоступнаяРоль = ЭлементСоответствия.Ключ;
				МассивРольИсполнителя = ЭлементСоответствия.Значение;
				Если ПользовательИБ.Роли.Содержит(ДоступнаяРоль) Тогда
					Для Каждого ЭлементМассива Из МассивРольИсполнителя Цикл
						Строка = ТаблицаПользователейИБ.Добавить();
						Строка.Имя				= ПользовательИБ.Имя;
						Строка.РольИсполнителя	= ЭлементМассива;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаПользователейИБ", ТаблицаПользователейИБ);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПользователиИБ.Имя КАК Имя,
		|	ПользователиИБ.РольИсполнителя
		|ПОМЕСТИТЬ ПользователиИБ
		|ИЗ
		|	&ТаблицаПользователейИБ КАК ПользователиИБ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Имя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Код КАК Код,
		|	ПользователиИБ.РольИсполнителя
		|ИЗ
		|	ПользователиИБ КАК ПользователиИБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиИБ.Имя = Пользователи.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Код") Цикл
			// заполним соответствие пользователями, для которых доступна настройка задач
			МассивРолейИсполнителя = Новый Массив;
			Пока Выборка.Следующий() Цикл
				МассивРолейИсполнителя.Добавить(Выборка.РольИсполнителя);
			КонецЦикла;
			
			Если МассивРолейИсполнителя.Количество()>0 Тогда
				ФормаОбработки.мСоответствиеПользователейИРолей.Вставить(Выборка.Ссылка, МассивРолейИсполнителя);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьТЧРолиИИсполнители(ФормаОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть РолиИИсполнители
Процедура ЗаполнитьТЧРолиИИсполнители(ФормаОбработки) Экспорт

	МассивОрганизаций = Новый Массив;
	Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Если Не ФормаОбработки.РазделятьЗадачиПоОрганизациям и Не ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
		// нет разделения задач по ролям и организациям
		// не заполняем табличную часть РолиИИсполнители
	ИначеЕсли ФормаОбработки.РазделятьЗадачиПоОрганизациям и Не ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
		// задачи разделяются только по организациям
		СтруктураПоиска = Новый Структура("Исполнитель, Организация");
		Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеПользователейИРолей Цикл
			Пользователь = ЭлементСоответствия.Ключ;
			СтруктураПоиска.Вставить("Исполнитель", Пользователь);
			Для Каждого Организация Из МассивОрганизаций Цикл
				СтруктураПоиска.Вставить("Организация", Организация);
				Если РолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					НоваяСтрока = РолиИИсполнители.Добавить();
					НоваяСтрока.Исполнитель = Пользователь;
					НоваяСтрока.Организация = Организация;
					НоваяСтрока.Роль = Справочники.РолиИсполнителей.ПустаяСсылка();
					НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе // задачи разделяются по ролям
		
		Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
			СтруктураПоиска = Новый Структура("Исполнитель, Организация, Роль");
		Иначе
			СтруктураПоиска = Новый Структура("Исполнитель, Роль");
		КонецЕсли;	
		
		Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеПользователейИРолей Цикл
			
			Пользователь = ЭлементСоответствия.Ключ;
			МассивРолиИсполнителя = ЭлементСоответствия.Значение;
			СтруктураПоиска.Вставить("Исполнитель", Пользователь);
			
			Для каждого РольИсполнителя Из МассивРолиИсполнителя Цикл
				СтруктураПоиска.Вставить("Роль", РольИсполнителя);
				Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
					Для Каждого Организация Из МассивОрганизаций Цикл
						СтруктураПоиска.Вставить("Организация", Организация);
						Если РолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							НоваяСтрока = РолиИИсполнители.Добавить();
							НоваяСтрока.Исполнитель = Пользователь;
							НоваяСтрока.Роль = РольИсполнителя;
							НоваяСтрока.Организация = Организация;
							НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если РолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
						НоваяСтрока = РолиИИсполнители.Добавить();
						НоваяСтрока.Исполнитель = Пользователь;
						НоваяСтрока.Роль = РольИсполнителя;
						НоваяСтрока.Организация = Справочники.Организации.ПустаяСсылка();
						НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьФормуНастройкиРолей(ФормаОбработки, КлючУникальности) Экспорт

	Форма = ПолучитьФорму("НастройкаРолейИсполнителей", ФормаОбработки, КлючУникальности);
	Форма.РазделятьЗадачиПоОрганизациям = ФормаОбработки.РазделятьЗадачиПоОрганизациям;    
	Форма.РазделятьЗадачиПоРолямИсполнителей = ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей;
	Форма.Заголовок = "Настройка списка задач пользователей" ;
	Форма.ОткрытьМодально();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка защиты персональных данных

Процедура УстановитьЗначенияИДоступностьЗависимыхЭлементов(ФормаОбработки) Экспорт
	
	// не выполнять когда страница не видима
	Если Не ФормаОбработки.ЭлементыФормы.ПанельРазделов.Страницы.СтраницаЗащитаПерсональныхДанных.Видимость Тогда
		Возврат;
	КонецЕсли;

	ЗависимыеЭлементыУправления = Новый Массив;
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьЛичныеДанные");
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьДанныеОПрофессииИКомпетенциях");
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьДанныеОбИмуществе");
	ЗависимыеЭлементыУправления.Добавить("КонтролироватьДанныеОДоходах");
	ЗависимыеЭлементыУправления.Добавить("НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе");
	ЗависимыеЭлементыУправления.Добавить("ОграничитьКоличествоСотрудниковПриПечатиВедомости");
	
	РегистрацияСобытийВключена = ФормаОбработки.РегистрацияСобытийВключена;
	
	Для Каждого ЭлементУправления Из ЗависимыеЭлементыУправления Цикл
		Если НЕ РегистрацияСобытийВключена Тогда
			ФормаОбработки[ЭлементУправления] = Ложь;
		КонецЕсли;
		ФормаОбработки.ЭлементыФормы[ЭлементУправления].Доступность = РегистрацияСобытийВключена;
	КонецЦикла;
	
	Если НЕ ФормаОбработки.КонтролироватьДанныеОбИмуществе И НЕ ФормаОбработки.КонтролироватьДанныеОДоходах Тогда
		ФормаОбработки.НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе = Ложь;
	КонецЕсли;
	
	ФормаОбработки.ЭлементыФормы.НеРегистрироватьСведенияОСубъектеДляДанныхОДоходахИИмуществе.Доступность = ФормаОбработки.КонтролироватьДанныеОбИмуществе ИЛИ ФормаОбработки.КонтролироватьДанныеОДоходах;
	
КонецПроцедуры

Процедура ФормаОбработкиПередОткрытием(ФормаОбработки, Отказ) Экспорт
	
	
КонецПроцедуры

Функция ЗаписатьНастройкиЖурналаРегистрации(ФормаОбработки)
	
	ТекущиеУровни = ПолучитьИспользованиеЖурналаРегистрации();
	
	Записывать = (ТекущиеУровни.Количество() = 0) = ФормаОбработки.РегистрацияСобытийВключена;
	
	Возврат "";
	
КонецФункции

Процедура ПрочитатьНастройкиРегламентногоЗадания(ФормаОбработки, ИмяЗадания)

	ФормаОбработки[ИмяЗадания] = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания).Использование;
	
КонецПроцедуры

Процедура ПрочитатьИспользованиеЖурналаРегистрации(ФормаОбработки)

	ФормаОбработки.РегистрацияСобытийВключена 	= ПолучитьИспользованиеЖурналаРегистрации().Количество();
	
КонецПроцедуры

Процедура ПрочитатьНастройкиЗащитыПерсональныхДанных(ФормаОбработки) Экспорт
	
	// заполним реквизиты страницы "Защита персональных данных", если режим доступен
	ПанельЗащитаПерсДанных = ФормаОбработки.ЭлементыФормы.ЗащитаПерсональныхДанных;
	Если ПравоДоступа("Администрирование", Метаданные) И ПанельЗащитаПерсДанных.ТекущаяСтраница = ПанельЗащитаПерсДанных.Страницы.РежимДоступен Тогда
		ПрочитатьИспользованиеЖурналаРегистрации(ФормаОбработки);
		НастройкиЗащитыПерсональныхДанных = РегистрыСведений.НастройкаЗащитыПерсональныхДанных.Получить();
		Для Каждого ПараметрНастройки Из НастройкиЗащитыПерсональныхДанных Цикл
			ФормаОбработки[ПараметрНастройки.Ключ] = ПараметрНастройки.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
