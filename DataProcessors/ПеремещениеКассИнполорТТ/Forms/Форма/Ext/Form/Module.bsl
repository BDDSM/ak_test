
Функция ПолучитьДанныеОС(Дата, мОсновноеСредство, мСклад = Неопределено) Экспорт
	
	СтруктураВозврат = Новый Структура("Сумма, Количество", 0, 0);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"			, КонецДня(Дата));
	Запрос.УстановитьПараметр("Склад"			, мСклад);
	Запрос.УстановитьПараметр("ОсновноеСредство", мОсновноеСредство);
	
	Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	УчетОсновныхСредствОстатки.СуммаОстаток КАК Себестоимость,
	//|	УчетОсновныхСредствОстатки.КоличествоОстаток КАК Количество
	//|ИЗ
	//|	РегистрНакопления.УчетОсновныхСредств.Остатки(
	//|			&Дата,
	//|			ОсновноеСредство = &ОсновноеСредство
	//|				И (Склад = &Склад
	//|					ИЛИ &Склад = НЕОПРЕДЕЛЕНО)) КАК УчетОсновныхСредствОстатки
	//|ГДЕ
	//|	УчетОсновныхСредствОстатки.КоличествоОстаток > 0";
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.СуммаОстаток КАК Себестоимость,
	|	ФинансовыйОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&Дата,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)),
	|			,
	|			(Субконто2 = &Склад
	|				ИЛИ &Склад = НЕОПРЕДЕЛЕНО)
	|				И Субконто3 = &ОсновноеСредство) КАК ФинансовыйОстатки
	|ГДЕ
	|	ФинансовыйОстатки.КоличествоОстаток > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврат.Вставить("Сумма"		, Выборка.Себестоимость);
		СтруктураВозврат.Вставить("Количество"	, Выборка.Количество);
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанные_Сервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Кассы"				, ТаблицаКасс.Выгрузить().ВыгрузитьКолонку("Касса"));
	Запрос.УстановитьПараметр("ЕстьОтборПоКассам"	, ТаблицаКасс.Количество() > 0);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеОСНоменклатура.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПеремещениеОС.Номенклатура КАК ПеремещениеОСНоменклатура
	|	ГДЕ
	|		ПеремещениеОСНоменклатура.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПеремещениеОСНоменклатура.Ссылка.Проведен = ИСТИНА
	|		И (&ЕстьОтборПоКассам = ЛОЖЬ
	|				ИЛИ ПеремещениеОСНоменклатура.ОсновноеСредство В (&Кассы))) КАК ВЗ_Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВЗ_Документы.Ссылка = ЗначенияСвойствОбъектов.Объект
	|ГДЕ
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) = ИСТИНА";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Объект.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	ТаблицаДействийСКассами = Новый ТаблицаЗначений();
	ТаблицаДействийСКассами.Колонки.Добавить("Касса");
	ТаблицаДействийСКассами.Колонки.Добавить("Дата");
	ТаблицаДействийСКассами.Колонки.Добавить("СортировкаПоВиду");
	ТаблицаДействийСКассами.Колонки.Добавить("Действие");
	ТаблицаДействийСКассами.Колонки.Добавить("ТорговаяТочка");
	
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНачала) - Объект.КолвоДнейСчитатьКассуПеремещенной * 86400);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛистУчетаZОтчеты.Касса КАК Касса,
	|	ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка,
	|	НАЧАЛОПЕРИОДА(ЛистУчетаZОтчеты.Ссылка.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	Документ.ЛистУчета.ZОтчеты КАК ЛистУчетаZОтчеты
	|ГДЕ
	|	ЛистУчетаZОтчеты.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЛистУчетаZОтчеты.Ссылка.Проведен = ИСТИНА
	|	И (&ЕстьОтборПоКассам = ЛОЖЬ
	|			ИЛИ ЛистУчетаZОтчеты.Касса В (&Кассы))
	|	И ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Касса,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.ДатаЗакрытия
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабТТ 	= Результаты[1].Выгрузить();
	Пока Выборка.СледующийПоЗначениюПоля("Касса") Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Касса) Тогда
			Продолжить;
		КонецЕсли;	
		ПредТочка = Неопределено;
		ПредДата = НачалоДня(Объект.ДатаНачала) - Объект.КолвоДнейСчитатьКассуПеремещенной * 86400;
		Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
			Если Выборка.Дата >= Объект.ДатаНачала Тогда
				Если ПредТочка <> Выборка.ТорговаяТочка Тогда
					Если ЗначениеЗаполнено(ПредТочка) Тогда
						СтрокаДоб = ТаблицаДействийСКассами.Добавить();
						СтрокаДоб.Касса 			= Выборка.Касса;
						СтрокаДоб.Дата 				= ПредДата + 86400;
						СтрокаДоб.Действие 			= "НаСклад";
						СтрокаДоб.СортировкаПоВиду 	= 0;
						СтрокаДоб.ТорговаяТочка 	= ПредТочка;
					КонецЕсли;	
					
					СтрокаДоб = ТаблицаДействийСКассами.Добавить();
					СтрокаДоб.Касса = Выборка.Касса;
					СтрокаДоб.Дата = Выборка.Дата;
					СтрокаДоб.Действие = "СоСклада";
					СтрокаДоб.СортировкаПоВиду = 1;
					СтрокаДоб.ТорговаяТочка = Выборка.ТорговаяТочка;
				ИначеЕсли ПредДата + Объект.КолвоДнейСчитатьКассуПеремещенной * 86400 <= Выборка.Дата Тогда
					СтрокаДоб = ТаблицаДействийСКассами.Добавить();
					СтрокаДоб.Касса = Выборка.Касса;
					СтрокаДоб.Дата = ПредДата + 86400;
					СтрокаДоб.Действие = "НаСклад";
					СтрокаДоб.СортировкаПоВиду = 0;
					СтрокаДоб.ТорговаяТочка = Выборка.ТорговаяТочка;
					
					СтрокаДоб = ТаблицаДействийСКассами.Добавить();
					СтрокаДоб.Касса = Выборка.Касса;
					СтрокаДоб.Дата = Выборка.Дата;
					СтрокаДоб.Действие = "СоСклада";
					СтрокаДоб.СортировкаПоВиду = 1;
					СтрокаДоб.ТорговаяТочка = Выборка.ТорговаяТочка;
				КонецЕсли;	
			КонецЕсли;
			ПредТочка = Выборка.ТорговаяТочка;
			ПредДата = Выборка.Дата;
		КонецЦикла;	
		
		Если ПредДата <> Объект.ДатаОкончания Тогда
			СтрокаТТ = ТабТТ.Найти(ПредТочка, "Ссылка");
			Если СтрокаТТ <> Неопределено
				И ЗначениеЗаполнено(СтрокаТТ.ДатаЗакрытия)
				И СтрокаТТ.ДатаЗакрытия <= Объект.ДатаОкончания
				И ПредДата >= Объект.ДатаНачала Тогда
				СтрокаДоб = ТаблицаДействийСКассами.Добавить();
				СтрокаДоб.Касса = Выборка.Касса;
				СтрокаДоб.Дата = СтрокаТТ.ДатаЗакрытия + 86400;
				СтрокаДоб.Действие = "НаСклад";
				СтрокаДоб.СортировкаПоВиду = 0;
				СтрокаДоб.ТорговаяТочка = ПредТочка;
			ИначеЕсли ПредДата + Объект.КолвоДнейСчитатьКассуПеремещенной * 86400 >= Объект.ДатаНачала
				И (Объект.ДатаОкончания - ПредДата) / 86400 >= Объект.КолвоДнейСчитатьКассуПеремещенной Тогда
				СтрокаДоб = ТаблицаДействийСКассами.Добавить();
				СтрокаДоб.Касса = Выборка.Касса;
				СтрокаДоб.Дата = ПредДата + 86400;
				СтрокаДоб.Действие = "НаСклад";
				СтрокаДоб.СортировкаПоВиду = 0;
				СтрокаДоб.ТорговаяТочка = ПредТочка;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаДействийСКассами.Сортировать("Дата, СортировкаПоВиду");
	
	СубконтоОплатаОборудования = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("200304");
	СчетКапВложения = ПланыСчетов.Финансовый.КапитальныеВложения;
	СчетИнвестиции 	= ПланыСчетов.Финансовый.Инвестиции;
	СвойствоСозданОбработкой = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Автоматически создан обработкой перемещения касс");
	
	Для Каждого СтрокаДействие Из ТаблицаДействийСКассами Цикл
		ЭтоНоваяКасса = Ложь;
		Стоимость = 0;
		Если СтрокаДействие.Действие = "НаСклад" Тогда
			СтруктураДанные = ПолучитьДанныеОС(СтрокаДействие.Дата + 86400, СтрокаДействие.Касса, СтрокаДействие.ТорговаяТочка);
			Если СтруктураДанные.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли СтрокаДействие.Действие = "СоСклада" Тогда	
			СтруктураДанные = ПолучитьДанныеОС(СтрокаДействие.Дата + 86400, СтрокаДействие.Касса, Объект.СкладНовых);
			Если СтруктураДанные.Сумма > 0 Тогда
				Стоимость = СтруктураДанные.Сумма;
				ЭтоНоваяКасса = Истина;
			КонецЕсли;
			Если НЕ ЭтоНоваяКасса Тогда
				СтруктураДанные = ПолучитьДанныеОС(СтрокаДействие.Дата + 86400, СтрокаДействие.Касса, Объект.Склад);
				Если СтруктураДанные.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		ДокПеремещениеОС = Документы.ПеремещениеОС.СоздатьДокумент();
		ДокПеремещениеОС.Дата = СтрокаДействие.Дата;
		Если СтрокаДействие.Действие = "НаСклад" Тогда
			ДокПеремещениеОС.СкладОтправитель = СтрокаДействие.ТорговаяТочка;
			ДокПеремещениеОС.СкладПолучатель = Объект.Склад;
			ДокПеремещениеОС.ЦФООтправитель = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтрокаДействие.ТорговаяТочка, СтрокаДействие.Дата);
		ИначеЕсли СтрокаДействие.Действие = "СоСклада" Тогда
			ДокПеремещениеОС.СкладОтправитель = ?(ЭтоНоваяКасса, Объект.СкладНовых, Объект.Склад);
			ДокПеремещениеОС.СкладПолучатель = СтрокаДействие.ТорговаяТочка;
			ДокПеремещениеОС.ЦФОПолучатель = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтрокаДействие.ТорговаяТочка, СтрокаДействие.Дата);
			Если ЭтоНоваяКасса Тогда
				ДокПеремещениеОС.СчетОтправитель = СчетКапВложения;
				ДокПеремещениеОС.СчетПолучатель = СчетИнвестиции;
				ДокПеремещениеОС.СубконтоКт1 = СубконтоОплатаОборудования;
				ДокПеремещениеОС.СубконтоДт1 = СтрокаДействие.ТорговаяТочка;
			КонецЕсли;	
		КонецЕсли;	
		ДокПеремещениеОС.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокПеремещениеОС.Комментарий = "Создан обработкой по кассе: " + СтрокаДействие.Касса;
		Если НЕ ЭтоНоваяКасса Тогда
			ДокПеремещениеОС.НеФормироватьПроводкиПоБалансовымСчетам = Истина;
		КонецЕсли;
		
		СтрокаДоб = ДокПеремещениеОС.Номенклатура.Добавить();
		СтрокаДоб.ОсновноеСредство = СтрокаДействие.Касса;
		СтрокаДоб.Сумма = Стоимость;
		СтрокаДоб.СчетУчетаЗабалансовый = УчетОсновныхСредств.ПолучитьСчетУчетаОС(СтрокаДействие.Касса, СтрокаДействие.Дата);
		Попытка
			ДокПеремещениеОС.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Проведен документ " + ДокПеремещениеОС);
		Исключение
			Сообщить(ОписаниеОшибки());
			ДокПеремещениеОС.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Записан документ " + ДокПеремещениеОС);
		КонецПопытки;
		
		Если НЕ ДокПеремещениеОС.ЭтоНовый() Тогда
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = ДокПеремещениеОС.Ссылка;
			Запись.Свойство = СвойствоСозданОбработкой;
			Запись.Значение = Истина;
			Запись.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанные(Команда)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена дата начала", Объект, "ДатаНачала",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена дата окончания", Объект, "ДатаНачала",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата начала не можеть быть больше даты окончания", Объект, "ДатаНачала",, Отказ);
	КонецЕсли;	
	
	ОбработатьДанные_Сервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КолвоДнейСчитатьКассуПеремещенной) Тогда
		Объект.КолвоДнейСчитатьКассуПеремещенной = 7;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = Справочники.Склады.НайтиПоНаименованию("Склад Инполор", Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладНовых) Тогда
		Объект.СкладНовых = Справочники.Склады.НайтиПоНаименованию("Склад Инполор (новые)", Истина);
	КонецЕсли;
	
КонецПроцедуры
