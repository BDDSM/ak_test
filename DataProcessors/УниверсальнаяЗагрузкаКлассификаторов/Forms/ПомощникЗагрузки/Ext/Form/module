
Перем Страницы; // = ЭлементыФормы.ПанельСтраниц.Страницы
Перем ЕстьСоединениеСИнтернетом;

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ УСТАНОВКИ ПОМЕТОК ДЕРЕВА ЗНАЧЕНИЙ

// Определяет значение флага по составу пометок коллекции строк.
//
// Параметры:
//  Строки         - коллекция строк дерева значений
//
// Возвращаемое значение:
//  Число, значение флага
// 
Функция ОпределитьЗначениеФлага(Строки)

	НайденыИстина = Ложь;
	НайденыЛожь   = Ложь;

	Для каждого Строка из Строки.Строки Цикл
		Если Строка.Пометка = 2 Тогда
			Возврат 2;
		КонецЕсли;
		
		Если (НЕ НайденыИстина) И (Строка.Пометка) Тогда
			НайденыИстина = Истина;
		КонецЕсли;
		Если (НЕ НайденыЛожь) И (НЕ Строка.Пометка) Тогда
			НайденыЛожь = Истина;
		КонецЕсли;
	КонецЦикла;

	Если      (НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 2;
	ИначеЕсли (НайденыИстина) И (НЕ НайденыЛожь) Тогда
		Возврат 1;
	ИначеЕсли (НЕ НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 0;
	КонецЕсли;

КонецФункции // ОпределитьЗначениеФлага()

// Устанавливает пометку в вышестоящих элементах дерева
//
Процедура ОбходВерхнихУровней(ТекСтрока)

	ТекСтрока.Пометка = ОпределитьЗначениеФлага(ТекСтрока);
	
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // ОбходВерхнихУровней()

// Устанавливает пометку в подчиненных элементах дерева
//
Процедура ОбходНижнихУровней(ТекСтрока)
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		Строка.Пометка = ТекСтрока.Пометка;
		ОбходНижнихУровней(Строка);
	КонецЦикла;
	
КонецПроцедуры // ОбходНижнихУровней()

// Устанавливает пометки в подчиненных строках и устанавливает пометку
// в текущей строке в зависимости от состава пометок в подчиненных строках.
// При значении параметра ИнтерактивнаяУстановкаПометок равным Истина
// возможна установка флага для строки с незаполненным источником.
//
// Параметры:
//  ТекСтрока                     - строка дерева значений
//  ИнтерактивнаяУстановкаПометок - флаг интерактивной установки пометки
// 
Процедура УстановитьПометкиВДереве(ТекСтрока) Экспорт

	ОбходНижнихУровней (ТекСтрока);
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиВДереве()

// Процедура установки пометок в дереве
//
Процедура УстановитьПометки(Дерево, Пометка) Экспорт
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Строка.Пометка = Пометка;
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПометки(Строка, Пометка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ СЕРВИСНЫЕ ПРОЦЕДУРЫ
//

Процедура ИзвлечьДиск(БукваДиска)
	Попытка
		ОболочкаПриложения = Новый COMObject("Shell.Application");
		ПИПриводы = 17;
		ОбъектПривода = ОболочкаПриложения.Namespace(ПИПриводы).ParseName(БукваДиска + ":\");
		// Сработает только одна команда.
		ОбъектПривода.InvokeVerb("&Извлечь");
		ОбъектПривода.InvokeVerb("E&ject");
	Исключение
		// Не вышло? Ну и ладно.
	КонецПопытки
КонецПроцедуры // ИзвлечьДиск() 

Функция ОпределитьГотовностьУстройствЧтенияКД(Неготовы)
	
	Перем Готовы;
	
	ОпределитьУстройстваЧтенияКД(Готовы, Неготовы);
	Возврат Готовы <> "";
	
КонецФункции // ОпределитьГотовностьУстройствЧтенияКД()

Процедура ДоступностьПараметровПрокси()
	ЭФ = ЭлементыФормы;
	ЭФ.НадписьЛогинНаПроксиСервере .Доступность = ПроксиСерверТребуетАутентификации;
	ЭФ.НадписьПарольНаПроксиСервере.Доступность = ПроксиСерверТребуетАутентификации;
	ЭФ.ПользовательПроксиСервера   .Доступность = ПроксиСерверТребуетАутентификации;
	ЭФ.ПарольПроксиСервера         .Доступность = ПроксиСерверТребуетАутентификации;
	ЭФ.ЗапомнитьПарольПроксиСервера.Доступность = ПроксиСерверТребуетАутентификации;
КонецПроцедуры // ДоступностьПараметровПрокси() 

Функция ВопросПропуститьПоискПриОшибочныхПараметрах(ОписаниеОшибки, ОписаниеПоиска,
	РекомендацииПередПовторнойПопыткой, ФлагИсточника, ЕстьИсточникиСМеньшимПриоритетом)
	
	ТекстВопроса = ОписаниеОшибки + ". ";
	
	Если ЕстьИсточникиСМеньшимПриоритетом Тогда
		ТекстВопроса = ТекстВопроса + "Пропустить " + ОписаниеПоиска + "?";
		ТекстДа = "продолжить поиск в других источниках";
	Иначе
		ТекстВопроса = ТекстВопроса + "Выбрать другие источники загрузки?";
		ТекстДа = "выбрать другие источники";
	КонецЕсли;
	
	ТекстВопроса = ТекстВопроса + "
		|
		|	• Нажмите «Да», чтобы " + ТекстДа + ".
		|	• Нажмите «Нет», чтобы " + РекомендацииПередПовторнойПопыткой + ".
		|";
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФлагИсточника = Ложь;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВопросПропуститьПоискПриОшибочныхПараметрах()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНИЦИАЦИИ ПОИСКА КЛАССИФИКАТОРОВ ПО ИСТОЧНИКАМ
//

Функция ПоискНаСайте()
	
	УстановитьСтраницу(Страницы.Обработка);
	
	Пока Истина Цикл
		Результат = ВыполнитьПоискВИсточнике(1);
		Если Результат = 401 Тогда // ошибка авторизации
			
			Если ВопросПропуститьПоискПриОшибочныхПараметрах("Были указаны неверные параметры доступа",
				"поиск на сайте", "изменить параметры доступа", ИсточникСайт,
				ИсточникИТС Или ИсточникФС) Тогда
				
				Если Не ИсточникИТС И Не ИсточникФС Тогда
					УстановитьСтраницу(Страницы.ВыборИсточника);
					Возврат Ложь;
				КонецЕсли;
				
			Иначе
				
				УстановитьСтраницу(Страницы.ПараметрыДоступаКСайту);
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Результат <> 0 Тогда
			
			Если ВопросПропуститьПоискПриОшибочныхПараметрах("Отсутствует соединение с Интернетом",
				"поиск на сайте", "повторить попытку соединения", ИсточникСайт,
				ИсточникИТС Или ИсточникФС) Тогда
				
				Если Не ИсточникИТС И Не ИсточникФС Тогда
					УстановитьСтраницу(Страницы.ВыборИсточника);
					Возврат Ложь;
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ИнициироватьПоискНаСайте()

Функция ПоискНаИТС(ВызовИзМожноПоказывать = Ложь)
	
	Перем ДоступныеПриводы;
	
	Пока Не ОпределитьГотовностьУстройствЧтенияКД(ДоступныеПриводы) Цикл
		
		Если Не ПустаяСтрока(ДоступныеПриводы) Тогда
			ИзвлечьДиск(Лев(ДоступныеПриводы, 1));
		КонецЕсли;
		
		Если ВызовИзМожноПоказывать Тогда
			Возврат Истина;
		КонецЕсли; 
		
		Если ВопросПропуститьПоискПриОшибочныхПараметрах("Не вставлен компакт-диск.",
			"поиск на диске «ИТС»", "повторить попытку", ИсточникИТС,
			ИсточникФС) Тогда
			
			Если Не ИсточникФС Тогда
				УстановитьСтраницу(Страницы.ВыборИсточника);
				Возврат Ложь;
			КонецЕсли;
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСтраницу(Страницы.Обработка);
	ВыполнитьПоискВИсточнике(2);
	Возврат Не ВызовИзМожноПоказывать; // Успех: можно показывать – нет, можно уйти – да.
	
КонецФункции // ПоискНаИТС()

Функция ПоискВФС()
	УстановитьСтраницу(Страницы.Обработка);
	ВыполнитьПоискВИсточнике(3);
	Возврат Истина;
КонецФункции // ПоискВФС()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЛОГИКИ МАСТЕРА
//

Процедура УстановитьСвойстваКнопок(ТекСтраница)
	КнНазад       = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад;
	КнДалее       = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее;
	ЗагНазад      = "< &Назад";
	ЗагДалее      = "&Далее >";
	ПодскДалее    = "Продолжить";
	ЗагЗаписать   = "Загрузить";
	ПодскЗаписать = "Загрузить в информационную базу";
	ЗагГотово     = " Готово ";
	
	Если      ТекСтраница = Страницы.ВыборИсточника Тогда
		КнНазад.Текст       = ЗагНазад;
		КнНазад.Доступность = Ложь;
		КнДалее.Текст       = ЗагДалее;
		КнДалее.Подсказка   = ПодскДалее;
		КнДалее.Доступность = Истина;
		
	ИначеЕсли ТекСтраница = Страницы.ПараметрыДоступаКСайту Тогда
		КнНазад.Текст       = ЗагНазад;
		КнНазад.Доступность = Истина;
		КнДалее.Текст       = ЗагДалее;
		КнДалее.Подсказка   = ПодскДалее;
		КнДалее.Доступность = Истина;
		
	ИначеЕсли ТекСтраница = Страницы.ДискИТС Тогда
		КнНазад.Текст       = ЗагНазад;
		КнНазад.Доступность = Истина;
		КнДалее.Текст       = ЗагДалее;
		КнДалее.Подсказка   = ПодскДалее;
		КнДалее.Доступность = Истина;
		
	ИначеЕсли ТекСтраница = Страницы.ВыборКаталогов Тогда
		КнНазад.Текст       = ЗагНазад;
		КнНазад.Доступность = Не ЗапретитьВыборИсточника;
		КнДалее.Текст       = ЗагДалее;
		КнДалее.Подсказка   = ПодскДалее;
		КнДалее.Доступность = Истина;
		
	ИначеЕсли ТекСтраница = Страницы.СписокКлассификаторов Тогда
		КнНазад.Текст       = ЗагНазад;
		КнНазад.Доступность = Не (ЗапретитьВыборИсточника И ЗапретитьВыборКаталогов) ;
		КнДалее.Текст       = ЗагЗаписать;
		КнДалее.Подсказка   = ПодскЗаписать;
		КнДалее.Доступность = Истина;
		
	ИначеЕсли ТекСтраница = Страницы.Настройка Тогда
		КнНазад.Текст       = ?(Классификаторы.Количество() = 1,
		                        	ЗагНазад,
		                        	"Список классификаторов");
		КнНазад.Доступность = Классификаторы.Количество() <> 1 Или Не (ЗапретитьВыборИсточника И ЗапретитьВыборКаталогов) ;
		КнДалее.Текст       = ЗагЗаписать;
		КнДалее.Подсказка   = ПодскЗаписать;
		КнДалее.Доступность = Классификаторы.Количество() = 1;
		
	ИначеЕсли ТекСтраница = Страницы.ЗаписьКлассификаторов Тогда
		КнНазад.Текст       = ЗагНазад;
		КнНазад.Доступность = Истина;//Классификаторы.Количество() = 0;
		КнДалее.Текст       = ЗагГотово;
		КнДалее.Подсказка   = ЗагГотово;
		КнДалее.Доступность = Истина;
		
	ИначеЕсли ТекСтраница = Страницы.Обработка Тогда
		КнНазад.Текст       = ЗагНазад;
		КнНазад.Доступность = Ложь;
		КнДалее.Текст       = ЗагДалее;
		КнДалее.Подсказка   = ПодскДалее;
		КнДалее.Доступность = Ложь;
		
	КонецЕсли;
	
	// На последней странице уже поздно отменять что-либо.
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.Доступность =
		ТекСтраница <> Страницы.ЗаписьКлассификаторов;
	
КонецПроцедуры // УстановитьСвойстваКнопок()

Процедура УстановитьСтраницу(НоваяСтраница)
	
	ЭлементыФормы.ПанельСтраниц.ТекущаяСтраница = НоваяСтраница;
	ИнфоСтраницы = НоваяСтраница.Заголовок;
	П = Найти(ИнфоСтраницы, "|");
	ЗаголовокСтраницы = Лев(ИнфоСтраницы, П - 1);
	ПодзаголовокСтраницы = Сред(ИнфоСтраницы, П + 1);
	Если Лев(ЗаголовокСтраницы, 1) = "#" Тогда
		ЭлементыФормы.НадписьЗаголовокСтраницы.Данные = Сред(ЗаголовокСтраницы, 2)
	Иначе
		ЭлементыФормы.НадписьЗаголовокСтраницы.Данные = "";
		ЭлементыФормы.НадписьЗаголовокСтраницы.Заголовок = ЗаголовокСтраницы;
	КонецЕсли; 
	Если Лев(ПодзаголовокСтраницы, 1) = "#" Тогда
		ЭлементыФормы.НадписьПодзаголовокСтраницы.Данные = Сред(ПодзаголовокСтраницы, 2)
	Иначе
		ЭлементыФормы.НадписьПодзаголовокСтраницы.Данные = "";
		ЭлементыФормы.НадписьПодзаголовокСтраницы.Заголовок = ПодзаголовокСтраницы;
	КонецЕсли;
	УстановитьСвойстваКнопок(НоваяСтраница);
	
КонецПроцедуры // УстановитьСтраницу()

Процедура ПодготовитьСтраницуНастройки()
	
	УстановитьСвойстваКнопок(Страницы.Настройка);
	
	ТекСтрока = ЭлементыФормы.Классификаторы.ТекущаяСтрока;
	ЭлементыФормы.ПрогрессЧтенияВДерево.МаксимальноеЗначение = ДопДанные[ТекСтрока].КоличествоЭлементов;
	ЭлементыФормы.НадписьДерево.Видимость = Ложь;
	ЭлементыФормы.ПрогрессЧтенияВДерево.Видимость = Истина;
	Дерево = ПолучитьДеревоКлассификатора(ТекСтрока, ПрогрессЧтенияВДерево);
	ЭлементыФормы.ПрогрессЧтенияВДерево.Видимость = Ложь;
	ЭлементыФормы.НадписьДерево.Видимость = Истина;
	
КонецПроцедуры // ПодготовитьСтраницуНастройки() 

Функция МожноПоказыватьСтраницу(СтраницаКПоказу, Направление)
	
	Если СтраницаКПоказу = Страницы.ВыборИсточника Тогда
		Возврат Не ЗапретитьВыборИсточника
		
	ИначеЕсли СтраницаКПоказу = Страницы.ПараметрыДоступаКСайту Тогда
		Возврат ИсточникСайт И Направление = 1
		
	ИначеЕсли СтраницаКПоказу = Страницы.ДискИТС Тогда
		
		// ДискИТС – страница-ошибка, т. е. её желательно пропустить и показывать
		// только если диска нет. Логика такая: здесь проверяем, есть ли диск;
		// если есть – пропускаем, если нет – показываем, после чего в
		// ПриУходеСоСтраницы будем отказываться уходить до тех пор, пока не всунут.
		
		
		Если Направление = 1 Тогда
			Возврат ИсточникИТС
				И (Не ИсточникСайт Или Классификаторы.Количество() = 0)
				И ПоискНаИТС(Истина);
		Иначе
			Возврат Ложь
		КонецЕсли;
		
		Возврат
			ИсточникИТС
			И Не ИсточникСайт
			И (Направление = 0
				Или Классификаторы.Количество() = 0);
		
	ИначеЕсли СтраницаКПоказу = Страницы.ВыборКаталогов Тогда
		
		Если Направление = 1 Тогда
			Возврат
				ИсточникФС
				И (Не ИсточникСайт И Не ИсточникИТС Или Классификаторы.Количество() = 0);
		Иначе
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли СтраницаКПоказу = Страницы.СписокКлассификаторов Тогда
		Возврат Классификаторы.Количество() > 1
		
	ИначеЕсли СтраницаКПоказу = Страницы.Настройка Тогда
		Возврат Классификаторы.Количество() = 1
		      И Не Классификаторы[0].ЗагружатьПолностью;
		
	КонецЕсли;
	Возврат Истина;
	
КонецФункции // МожноПоказыватьСтраницу()

Процедура ПриПереходеНаСтраницу(НоваяСтраница, Направление, ПереходДалее)
	
	Если НоваяСтраница = Страницы.ВыборКаталогов Тогда
		Если ЛокальныеКаталоги.Количество() = 0 Тогда
			ЗаполнитьЛокальныеКаталогиПоУмолчанию();
		КонецЕсли;
		
	//ИначеЕсли НоваяСтраница = Страницы.ПоискКлассификаторов Тогда
	//	ВыполнитьПоискКлассификаторов();
	//	ПереходДалее = 1;
		
	ИначеЕсли НоваяСтраница = Страницы.Настройка Тогда
		ЭлементыФормы.Классификаторы.ТекущаяСтрока = Классификаторы[0];
		ПодготовитьСтраницуНастройки();
		
	ИначеЕсли НоваяСтраница = Страницы.ЗаписьКлассификаторов Тогда
		ЗаписатьКлассификаторыВФорме()
		
	КонецЕсли;
	
КонецПроцедуры // ПриПереходеНаСтраницу()

Функция ПриУходеСоСтраницы(ТекСтраница, Направление)
	Если Направление = 1 Тогда
		Если ТекСтраница = Страницы.ВыборИсточника Тогда
			Если Не (ИсточникСайт Или ИсточникИТС Или ИсточникФС) Тогда
				Предупреждение("Необходимо отметить хотя бы один источник загрузки классификаторов.");
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ТекСтраница = Страницы.ПараметрыДоступаКСайту Тогда
			НетИмени  = ПустаяСтрока(КодПользователяСервераОбновлений);
			НетПароля = ПустаяСтрока(ПарольСервераОбновлений);
			Если НетИмени Или НетПароля Тогда
				Если ВопросПропуститьПоискПриОшибочныхПараметрах("Не указаны имя и (или) пароль доступа к серверу обновлений фирмы «1С»",
					"поиск на сайте", "заново указать параметры доступа",
					ИсточникСайт, ИсточникИТС Или ИсточникФС) Тогда
					Если Не ИсточникИТС И Не ИсточникФС Тогда
						СменитьСтраницу(-1);
					Иначе
						Возврат Истина;
					КонецЕсли;
				Иначе
					Если НетИмени Тогда
						ТекущийЭлемент = ЭлементыФормы.КодПользователяСервераОбновлений;
					Иначе
						ТекущийЭлемент = ЭлементыФормы.ПарольСервераОбновлений;
					КонецЕсли;
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
			Возврат ПоискНаСайте();
			
		ИначеЕсли ТекСтраница = Страницы.ДискИТС Тогда
			Возврат ПоискНаИТС();
			
		ИначеЕсли ТекСтраница = Страницы.ВыборКаталогов Тогда
			Если ЛокальныеКаталоги.Количество() = 0 Тогда
				Если Не (ИсточникСайт Или ИсточникИТС) Тогда
					Если ВопросПропуститьПоискПриОшибочныхПараметрах("Не указано ни одной папки для поиска классификаторов",
						"", "указать папки для поиска", ИсточникФС, Ложь) Тогда
						СменитьСтраницу(-3);
					КонецЕсли;
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			Возврат ПоискВФС();
			
		КонецЕсли;
	Иначе
		Если ТекСтраница = Страницы.СписокКлассификаторов Тогда
			Классификаторы.Очистить();
			ДопДанные.Очистить();
			УдалитьВременныеФайлы();
		ИначеЕсли ТекСтраница = Страницы.Настройка Тогда
			Дерево = Неопределено;
			Если Классификаторы.Количество() = 1 Тогда
				Классификаторы.Очистить();
				ДопДанные.Очистить();
				УдалитьВременныеФайлы();
				//Иначе очищены будут при уходе со страницы списка
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПриУходеСоСтраницы()

Функция ПолучитьИндексСледующейСтраницы(ТекИндекс, Направление)
	Если Направление = 0 Тогда
		Возврат ТекИндекс;
	КонецЕсли; 
	Результат = ТекИндекс + Направление;
	Колво = ЭлементыФормы.ПанельСтраниц.Страницы.Количество();
	Пока Результат >= 0
	   И Результат < Колво
	   И Не МожноПоказыватьСтраницу(Страницы[Результат], Направление) Цикл
		Результат = Результат + Направление;
	КонецЦикла;
	Возврат ?(Результат = Колво, -1, Результат);
КонецФункции // ПолучитьИндексСледующейСтраницы()

Функция СменитьСтраницу(Направление, ТекСтраница = Неопределено)
	
	Если Направление = 0 Тогда
		ТекСтраница = Неопределено;
		ТекИндекс = -1;
		Направление = 1;
	Иначе
		Если ТекСтраница = Неопределено Тогда
			ТекСтраница = ЭлементыФормы.ПанельСтраниц.ТекущаяСтраница;
		КонецЕсли;
		ТекИндекс = Страницы.Индекс(ТекСтраница);
	КонецЕсли;
	
	Если ТекСтраница <> Неопределено
	   И Не ПриУходеСоСтраницы(ТекСтраница, Направление) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НовыйИндекс = ПолучитьИндексСледующейСтраницы(ТекИндекс, Направление);
	Если НовыйИндекс = -1 Тогда // не удалось сменить страницу
		Возврат Ложь;
	КонецЕсли;
	НоваяСтраница = Страницы[НовыйИндекс];
	
	УстановитьСтраницу(НоваяСтраница);
	
	ПереходДалее = 0;
	ПриПереходеНаСтраницу(НоваяСтраница, Направление, ПереходДалее);
	Если ПереходДалее <> 0 Тогда
		Возврат СменитьСтраницу(Направление);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СменитьСтраницу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
//

Процедура ЗаписатьКлассификаторыВФорме()
	
	Если ЭлементыФормы.ПанельСтраниц.ТекущаяСтраница <> Страницы.ЗаписьКлассификаторов Тогда
		УстановитьСтраницу(Страницы.ЗаписьКлассификаторов);
	КонецЕсли;
	Если Классификаторы.Количество() = 0 Тогда
		ЭлементыФормы.ПанельЗапись.ТекущаяСтраница = ЭлементыФормы.ПанельЗапись.Страницы.Сообщение;
		Возврат
	КонецЕсли;
	Если Классификаторы.Итог("Загружать") = 0 Тогда
		ТекущееСостояние = "Не отмечено ни одного классификатора.";
		Возврат;
	КонецЕсли; 
	ЭлементыФормы.ПанельЗапись.ТекущаяСтраница = ЭлементыФормы.ПанельЗапись.Страницы.Прогрессоры;
	
	ПрогрессБарыИКартинки = Новый Соответствие;
	
	К = 1;
	Эл = ЭлементыФормы.Найти("КартинкаЗаписиКлассификатора" + К);
	Пока Эл <> Неопределено Цикл
		ЭлементыФормы.Удалить(ЭлементыФормы.Индекс(Эл));
		Эл = ЭлементыФормы.Найти("НадписьЗаписиКлассификатора" + К);
		ЭлементыФормы.Удалить(ЭлементыФормы.Индекс(Эл));
		Эл = ЭлементыФормы.Найти("ИндикаторЗаписиКлассификатора" + К);
		ЭлементыФормы.Удалить(ЭлементыФормы.Индекс(Эл));
		К = К + 1;
		Эл = ЭлементыФормы.Найти("КартинкаЗаписиКлассификатора" + К);
	КонецЦикла;
	
	// Подготовим список индикаторов.
	ПервыйИндикатор = Неопределено;
	К = 1;
	Для Каждого Классификатор Из Классификаторы Цикл
		
		Если Не Классификатор.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		Иконка    = ЭтаФорма.ЭлементыФормы.Добавить(Тип("ПолеКартинки"),
			"КартинкаЗаписиКлассификатора" + К,
			Истина, ЭлементыФормы.ПанельЗапись);
		Надпись   = ЭтаФорма.ЭлементыФормы.Добавить(Тип("Надпись"),
			"НадписьЗаписиКлассификатора" + К,
			Истина, ЭлементыФормы.ПанельЗапись);
		Индикатор = ЭтаФорма.ЭлементыФормы.Добавить(Тип("Индикатор"),
			"ИндикаторЗаписиКлассификатора" + К,
			Истина, ЭлементыФормы.ПанельЗапись);
		
		Иконка.Лево   = 10;
		Иконка.Верх   = 10 + 20 * (К - 1);
		Иконка.Высота = 15;
		Иконка.Ширина = 15;
		Надпись.Лево      = Иконка.Лево + Иконка.Ширина + 10;
		Надпись.Верх      = Иконка.Верх;
		Надпись.Высота    = 15;
		Надпись.Ширина    = ЭлементыФормы.ПанельЗапись.Ширина - 205;
		Надпись.Заголовок = Классификатор.Наименование;
		Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗапись, ГраницаЭлементаУправления.Право);
		Индикатор.Верх   = Надпись.Верх;
		Индикатор.Лево   = Надпись.Лево + Надпись.Ширина + 10;
		Индикатор.Ширина = 150;
		Индикатор.Высота = 15;
		Индикатор.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭлементыФормы.ПанельЗапись, ГраницаЭлементаУправления.Право);
		Индикатор.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗапись, ГраницаЭлементаУправления.Право);
		
		// По мере добавления элементов управления, может появиться полоса прокрутки,
		// в этом случае уже добавленные элементы сдвинутся, откликнувшись на
		// привязки. Сдвинем и вызвавший появление полосы элемент, чтобы, во-первых,
		// все было одинаково, во-вторых, чтобы избежать появление горизонтальной полосы.
		Если ПервыйИндикатор = Неопределено Тогда
			ПервыйИндикатор = Индикатор;
		ИначеЕсли ПервыйИндикатор.Лево <> Индикатор.Лево Тогда
			Индикатор.Лево = ПервыйИндикатор.Лево;
			Надпись.Ширина = Индикатор.Лево - 10;
		КонецЕсли;
		
		
		Индикатор.ОтображатьПроценты = Истина;
		Индикатор.Данные = "ЗаглушкаПрогрессора0"; // источник данных — значение 0
		ДанныеЭУ = Новый Структура("Иконка,Надпись,Индикатор",
			Иконка, Надпись, Индикатор);
		ПрогрессБарыИКартинки.Вставить(Классификатор, ДанныеЭУ);
		К = К + 1;
		
	КонецЦикла;
	
	// Начинаем загрузку.
	Для Каждого Классификатор Из Классификаторы Цикл
		
		Если Не Классификатор.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЭУ = ПрогрессБарыИКартинки[Классификатор];
		
		// Инидикатор нужно вывести в поле видимости, т. к. он мог «спрятаться»
		// за границей панели. Двигаем полосу прокрутки «хитрым» способом.
		ТекущийТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
		ТекущаяНадпись = ДанныеЭУ.Надпись;
		ТекущаяНадпись.Гиперссылка = Истина; // теперь надпись может иметь фокус ввода
		ЭтаФорма.ТекущийЭлемент = ТекущаяНадпись;
		ЭтаФорма.ТекущийЭлемент = ТекущийТекущийЭлемент;
		ТекущаяНадпись.Гиперссылка = Ложь;
		
		ДанныеЭУ.Иконка.Картинка = БиблиотекаКартинок.СтартБизнесПроцесса;
		ДанныеЭУ.Индикатор.Данные = "ТекущийПрогресс";
		// Чтобы минимизировать «мигание», заставим форму чуть-чуть перерисоваться
		// перед возможным чтением классификатора.
		ТекущийПрогресс = 100;
		ТекущийПрогресс = 0;
		
		xdtoТипКлассификатора = xdtoТипКлассификатора(Классификатор.Идентификатор);
		
		ОбъектЗагрузки = ПолучитьСодержаниеКлассификатора(Классификатор, Истина);
		Если ТипЗнч(ОбъектЗагрузки) = Тип("ДеревоЗначений") Тогда
			ДанныеЭУ.Индикатор.МаксимальноеЗначение =
				КоличествоПометок(ОбъектЗагрузки);
		Иначе
			ДанныеЭУ.Индикатор.МаксимальноеЗначение =
				ДопДанные[Классификатор].КоличествоЭлементов;
		КонецЕсли;
		
		СохранитьКлассификатор(ОбъектЗагрузки,
			xdtoТипКлассификатора.ИмяСправочника,
			Классификатор.УдалятьНеактуальные,
			Неопределено,
			xdtoТипКлассификатора.ИмяРеквизитаПолнНаименование,
			5000,
			ТекущийПрогресс);
		
		ДанныеЭУ.Индикатор.МаксимальноеЗначение = 0;
		ДанныеЭУ.Индикатор.МинимальноеЗначение = -1;
		ДанныеЭУ.Индикатор.Данные = "ЗаглушкаПрогрессора0";
		ДанныеЭУ.Иконка.Картинка = БиблиотекаКартинок.Записать;
		ДанныеЭУ.Иконка.Подсказка = "Классификатор записан"
		
	КонецЦикла;
	
	ТекущееСостояние = "Классификаторы сохранены.";
	Оповестить("ЗагрузкаКлассификаторов", Истина, ЭтаФорма);
	
КонецПроцедуры // ЗаписатьКлассификаторыВФорме()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗапомнитьПарольСервераОбновлений = Истина;
	ЗапомнитьПарольПроксиСервера     = Истина;
	
	// Имена пользоваетелей и пароли берем из настроек обновления конфигурации.
	НастройкиОбновления = ВосстановитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления");
	Если НЕ (НастройкиОбновления = Неопределено) Тогда
		
		НастройкиОбновления.Свойство("КодПользователяСервераОбновлений", КодПользователяСервераОбновлений);
		НастройкиОбновления.Свойство("ПарольСервераОбновлений", ПарольСервераОбновлений);
		НастройкиОбновления.Свойство("ЗапомнитьПарольСервераОбновлений", ЗапомнитьПарольСервераОбновлений);
		
	КонецЕсли;
	
	ЗапомнитьПарольПроксиСервера = ВосстановитьЗначение("ЗапомнитьИмяИПарольПрокси");
	ЗапомнитьПарольПроксиСервера = ?(ТипЗнч(ЗапомнитьПарольПроксиСервера) <> Тип("Булево"), Истина, ЗапомнитьПарольПроксиСервера);
	ПользовательПроксиСервера = ВосстановитьЗначение("ИмяПользователяПрокси");
	ПользовательПроксиСервера = ?(ТипЗнч(ПользовательПроксиСервера) <> Тип("Строка"), "", ПользовательПроксиСервера);
	ПарольПроксиСервера = ВосстановитьЗначение("ПарольПользователяПрокси");
	ПарольПроксиСервера = ?(ТипЗнч(ПарольПроксиСервера) <> Тип("Строка"), "", ПарольПроксиСервера);
	
	ПроксиСерверТребуетАутентификации = Не ПустаяСтрока(ПользовательПроксиСервера);
	
	ДоступностьПараметровПрокси();
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()
	// Если ни один источник не установлен, считаем, что их просто забыли указать,
	// и проставляем по умолчанию все.
	Если Не (ИсточникИТС Или ИсточникСайт Или ИсточникФС) Тогда
		ИсточникИТС = Истина;
		ИсточникСайт = Истина;
		ИсточникФС = Истина;
	КонецЕсли; 
	СменитьСтраницу(0);
	ЭлементыФормы.ЛокальныеКаталоги.Колонки.Представление.ЭлементУправления.СписокВыбора.Добавить(1, "<Папка шаблона последнего релиза конфигурации>");
	Если Найти(НРег(СтрокаСоединенияИнформационнойБазы()), "file=") <> 0 Тогда
		ЭлементыФормы.ЛокальныеКаталоги.Колонки.Представление.ЭлементУправления.СписокВыбора.Добавить(2, "<Папка информационной базы>");
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	
	УдалитьВременныеФайлы();
	
	// Сохранение настроек обновления.
	НастройкиОбновления = ВосстановитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления");
	Если НастройкиОбновления = Неопределено Тогда
		НастройкиОбновления = Новый Структура("КодПользователяСервераОбновлений,
		                                      |ПарольСервераОбновлений, 
		                                      |ЗапомнитьПарольСервераОбновлений");
	КонецЕсли;
	НастройкиОбновления.Вставить("КодПользователяСервераОбновлений"  , КодПользователяСервераОбновлений);
	НастройкиОбновления.Вставить("ПарольСервераОбновлений"           , ?(ЗапомнитьПарольСервераОбновлений, ПарольСервераОбновлений, ""));
	НастройкиОбновления.Вставить("ЗапомнитьПарольСервераОбновлений"  , ЗапомнитьПарольСервераОбновлений);
	
	СохранитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления", НастройкиОбновления);
	
	СохранитьЗначение("ЗапомнитьИмяИПарольПрокси", ЗапомнитьПарольПроксиСервера);
	СохранитьЗначение("ИмяПользователяПрокси", ПользовательПроксиСервера);
	СохранитьЗначение("ПарольПользователяПрокси", ?(ЗапомнитьПарольПроксиСервера, ПарольПроксиСервера, ""));
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ
//

Процедура ГиперссылкиНажатие(Элемент)
	Если ПустаяСтрока(Элемент.Подсказка) Тогда
		Предупреждение("Web-страница недоступна.");
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение(Элемент.Подсказка);
КонецПроцедуры

Процедура КлассификаторыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Не ВыбраннаяСтрока.ЗагружатьПолностью Тогда
		УстановитьСтраницу(Страницы.Настройка);
		ПодготовитьСтраницуНастройки();
	КонецЕсли;
КонецПроцедуры

Процедура КлассификаторыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ЯчейкаНастройка = ОформлениеСтроки.Ячейки.Настройка;
	Если ДанныеСтроки.ЗагружатьПолностью Тогда
		ЯчейкаНастройка.УстановитьТекст("полностью");
		ЯчейкаНастройка.ЦветТекста = WindowsЦвета.ТекстНедоступный;
		ОформлениеСтроки.Ячейки.ПерезаписыватьОбъекты  .ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ПерезаписыватьЭтоГруппа.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ПерезаписыватьОбъекты  .УстановитьФлажок(Истина);
		ОформлениеСтроки.Ячейки.ПерезаписыватьЭтоГруппа.УстановитьФлажок(Истина);
	Иначе
		ЯчейкаНастройка.Гиперссылка = Истина;
		ЯчейкаНастройка.УстановитьТекст(
			?(ДопДанные[ДанныеСтроки].Содержание = Неопределено,
				"полностью",
				"выбранные"));
	КонецЕсли;
	ЯчейкаНастройка = ОформлениеСтроки.Ячейки.Источник;
	ЯчейкаНастройка.ОтображатьКартинку = Истина;
	ЯчейкаНастройка.ОтображатьТекст = Ложь;
	Если Сред(ДанныеСтроки.Источник, 2, 1) = ":" Тогда
		ЯчейкаНастройка.ИндексКартинки = 0
	Иначе
		ЯчейкаНастройка.ИндексКартинки = 1
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛокальныеКаталогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ЭУ = Элемент.Колонки.Представление.ЭлементУправления;
	ЭУ.КнопкаОткрытия = Истина;
	ЭУ.КнопкаВыбора = Истина;
	ЭУ.КнопкаСпискаВыбора = Истина;
	Если НоваяСтрока Тогда
		ЭлементыФормы.ЛокальныеКаталоги.ТекущаяСтрока.Пометка = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЛокальныеКаталогиПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = ЭлементыФормы.ЛокальныеКаталоги.ТекущаяСтрока.Значение;
	Если ДиалогВыбора.Выбрать() Тогда
		ЭлементыФормы.ЛокальныеКаталоги.ТекущаяСтрока.Значение = ДиалогВыбора.Каталог;
		ЭлементыФормы.ЛокальныеКаталоги.ТекущаяСтрока.Пометка = Истина;
		ЭлементыФормы.ЛокальныеКаталоги.ЗакончитьРедактированиеСтроки(Ложь)
	КонецЕсли;
КонецПроцедуры

Процедура ЛокальныеКаталогиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = 1 Тогда
		Каталог = ПолучитьКаталогШаблонов();
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		Каталог = ПолучитьКаталогИБ()
	Иначе
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	Если Не ПустаяСтрока(Каталог) Тогда
		Элемент.Значение = Каталог;
		ЭлементыФормы.ЛокальныеКаталоги.ЗакончитьРедактированиеСтроки(Ложь)
	Иначе
		Предупреждение("Папка на этом компьютере не определена.");
	КонецЕсли;
КонецПроцедуры

Процедура ЛокальныеКаталогиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение, Элемент.Значение);
КонецПроцедуры

Процедура ПроксиСерверТребуетАутентификацииПриИзменении(Элемент)
	ДоступностьПараметровПрокси();
КонецПроцедуры

Процедура СодержаниеПриИзмененииФлажка(Элемент, Колонка)
	УстановитьПометкиВДереве(Элемент.ТекущаяСтрока);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОММАНДНЫХ ПАНЕЛЕЙ
//

Процедура КоманднаяПанельНастройкаОтметитьВсе(Кнопка)
	УстановитьПометки(Дерево, Истина);
КонецПроцедуры

Процедура КоманднаяПанельНастройкаСнятьВсе(Кнопка)
	УстановитьПометки(Дерево, Ложь);
КонецПроцедуры

Процедура ОсновныеДействияФормыДалее(Кнопка)
	Если ЭлементыФормы.ПанельСтраниц.ТекущаяСтраница =
		Страницы.ЗаписьКлассификаторов Тогда
		Закрыть()
	КонецЕсли;
	СменитьСтраницу(1)
КонецПроцедуры

Процедура ОсновныеДействияФормыНазад(Кнопка)
	СменитьСтраницу(-1)
КонецПроцедуры

Страницы = ЭлементыФормы.ПанельСтраниц.Страницы;

