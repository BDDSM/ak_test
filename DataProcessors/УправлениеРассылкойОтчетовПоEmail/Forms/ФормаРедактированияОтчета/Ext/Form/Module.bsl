
&НаКлиенте
Процедура Перечитать(Команда)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Все изменения в форме будут утеряны, а данные будут перечитаны из базы. Продолжить действие?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПеречитатьСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьСервер()
	
	// новый отчет
	Если НомерОтчета = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗИсключений = Неопределено;
	ТЗНастроек = Обработки.УправлениеРассылкойОтчетовПоEmail.ВернутьНастройкиОтчета(НомерОтчета, ТЗИсключений);	
	
	Если ТзНастроек.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Колонка Из ТзНастроек.Колонки Цикл
		Попытка
			ЭтаФорма[Колонка.Имя] = ТзНастроек[0][Колонка.Имя];
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ЭлектронныеАдреса.Очистить();
	
	МассивАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(email_add, ";");
	
	Для Каждого Эл Из МассивАдресов Цикл
		
		Если НЕ ЗначениеЗаполнено(Эл) Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = ЭлектронныеАдреса.Добавить();
		НовСтр.ЭлектронныйАдрес = Эл;
	КонецЦикла;
		
	АдресаИсключения.Очистить();
	
	//МассивАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(not_send_email, ";");
	//
	//Для Каждого Эл Из МассивАдресов Цикл
	//	
	//	Если НЕ ЗначениеЗаполнено(Эл) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НовСтр = АдресаИсключения.Добавить();
	//	НовСтр.ЭлектронныйАдрес = Эл;
	//КонецЦикла; 
	
	Если ЗначениеЗаполнено(ТЗИсключений) Тогда
		Для Каждого Стр Из ТЗИсключений Цикл		
			Если НЕ ЗначениеЗаполнено(Стр.email) Тогда
				Продолжить;
			КонецЕсли;	
			НовСтр = АдресаИсключения.Добавить();
			НовСтр.ЭлектронныйАдрес = Стр.email;
			НовСтр.Причина = Стр.descr;
		КонецЦикла; 
	КонецЕсли;	
	
	Если add_group_distribution<>"" Тогда
		Попытка
			ГруппаРассылки = Справочники.АК_ГруппыРассылки.ПолучитьСсылку(Новый УникальныйИдентификатор(add_group_distribution))
		Исключение
			Сообщить("Некорректное значение поля Группа рассылки!")
		КонецПопытки
	КонецЕсли;
	
	//+++АК CISA 2018.10.02 ИП-00019966
	Если Ref_SotrOtvetstv <> "" Тогда
		Попытка
			Ответственный = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref_SotrOtvetstv))
		Исключение
			Сообщить("Некорректное значение поля ""Ответственный""!");
		КонецПопытки
	КонецЕсли;
	//---CISA
	
	Модифицированность = Ложь;
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьНеобходимыеПроверки()
	
	ВсеНормально = Истина;
	
	//1. Дни месяца	
	СтрокаДниМесяца = СокрЛП(monthdays);
	
	Если ЗначениеЗаполнено(СтрокаДниМесяца) Тогда
		
		МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаДниМесяца);
		
		Для Каждого Эл Из МассивСтрок Цикл
			Попытка
				СимволЧислом = Число(Эл);
			Исключение
				ВсеНормально = Ложь;
			КонецПопытки;
			
			Если ВсеНормально И СимволЧислом > 31 Тогда
				ОБщегоНазначения.СообщитьОбОшибке("В строке ""Дни месяца для отправки"" указано число, превышающее 31.");
				ВсеНормально = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВсеНормально Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке ""Дни месяца для отправки"" неверно указаны дни. Пример правильно строки: 01, 03, 15, 30.");
		КонецЕсли;
		
	КонецЕсли;
	
	// КонецДниМесяца
	
	//2. Электронные адреса
	
	Для Каждого Стр Из ЭлектронныеАдреса Цикл
	
		Если НЕ УправлениеЭлектроннойПочтой.EmailValid(СокрЛП(Стр.ЭлектронныйАдрес)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Электронный адрес: " + Стр.ЭлектронныйАдрес + " содержит неправильный формат.");
			ВсеНормально = Ложь;
		КонецЕсли;	
		
	КонецЦикла;
	
	//КонецЭлектронныеАдреса
	
	Если НЕ ВсеНормально Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Обнаружены ошибки заполнения формы. Операция сохранения прервана до устранения ошибок.");
	КонецЕсли;	
	
	Возврат ВсеНормально;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАдресаДляОтправкиВПеременную()

	email_add = "";
	
	Для Каждого Стр Из ЭлектронныеАдреса Цикл
		Если ЗначениеЗаполнено(Стр.ЭлектронныйАдрес) Тогда
			email_add = email_add + Стр.ЭлектронныйАдрес + ";";
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(email_add) Тогда
		email_add = Лев(email_add, СтрДлина(email_add) - 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсключаемыеАдресаВПеременную()

	not_send_email = "";
	
	Для Каждого Стр Из АдресаИсключения Цикл
		Если ЗначениеЗаполнено(Стр.ЭлектронныйАдрес) Тогда
			not_send_email = not_send_email + Стр.ЭлектронныйАдрес + ";";
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(not_send_email) Тогда
		not_send_email = Лев(not_send_email, СтрДлина(not_send_email) - 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьИзменения()
	
	МассивИзм = СписокИзмененных.ВыгрузитьЗначения();
	
	МассивИзм = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивИзм);
	
	ВсеНормально = СохранитьИзмененияСервер(МассивИзм);
	
	Если ВсеНормально Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Возврат ВсеНормально;
	
КонецФункции
	
&НаСервере
Функция СохранитьИзмененияСервер(МассивИзм)
	
	//!!! [N_r_z]
	//!!! email_add
	
	ВсеНормально = ВыполнитьНеобходимыеПроверки();
	
	Если НЕ ВсеНормально Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокСохранения = Новый Структура;
	
	Если НомерОтчета <> 0 Тогда
	
		Если МассивИзм.Найти("email_add") <> Неопределено Тогда
			ЗаполнитьАдресаДляОтправкиВПеременную();
		КонецЕсли;
		
		Если МассивИзм.Найти("not_send_email") <> Неопределено Тогда
			ЗаполнитьИсключаемыеАдресаВПеременную();
		КонецЕсли;	
	
		Для Каждого Эл Из МассивИзм Цикл
			СписокСохранения.Вставить(Эл, ЭтаФорма[Эл]);
		КонецЦикла;
		
	Иначе
		
		СписокСохранения.Вставить("is_active", is_active);
		СписокСохранения.Вставить("Name_r_z", Name_r_z);
		СписокСохранения.Вставить("transform", transform);
		СписокСохранения.Вставить("Add_time", Add_time);
		СписокСохранения.Вставить("Views_r_z", Views_r_z);
		СписокСохранения.Вставить("time_r_z", time_r_z);
		
		ЗаполнитьАдресаДляОтправкиВПеременную();
		ЗаполнитьИсключаемыеАдресаВПеременную();
		
		СписокСохранения.Вставить("email_add", email_add);
		СписокСохранения.Вставить("add_gr", add_gr);
		СписокСохранения.Вставить("add_email", add_email);
		СписокСохранения.Вставить("r_period_minute", r_period_minute);
		СписокСохранения.Вставить("time_r_z_finish", time_r_z_finish);
		СписокСохранения.Вставить("weekdays", ?(ЗначениеЗаполнено(weekdays), Формат(weekdays, "ЧГ=0"), ""));
		СписокСохранения.Вставить("monthdays", monthdays);
		СписокСохранения.Вставить("where_sql", where_sql);
		СписокСохранения.Вставить("send_all_email", send_all_email);
		СписокСохранения.Вставить("add_all_email_vv", add_all_email_vv);
		СписокСохранения.Вставить("add_all_email_Pom", add_all_email_Pom);
		СписокСохранения.Вставить("add_all_email_TU", add_all_email_TU);
		СписокСохранения.Вставить("Descr", СокрЛП(Descr));
		//+++ AK suvv 19.04.2018 ИП-00018360
		СписокСохранения.Вставить("Comment", СокрЛП(Comment));
		СписокСохранения.Вставить("Long_exec", Long_exec);
		СписокСохранения.Вставить("Save_in_Universal_Report_tbl", Save_in_Universal_Report_tbl);
		//--- AK suvv
		
		//+++АК CISA 2018.10.02 ИП-00019966
		СписокСохранения.Вставить("Ref_SotrOtvetstv", Ref_SotrOtvetstv);
		//---АК CISA
	КонецЕсли;
	
	// +++ АК mirv 30.11.2017 [ИП-00017198]
	// Возврат Обработки.УправлениеРассылкойОтчетовПоEmail.СохранитьДанные(НомерОтчета, СписокСохранения, АдресаИсключения);	
	Возврат Обработки.УправлениеРассылкойОтчетовПоEmail.СохранитьДанные(НомерОтчета, СписокСохранения, АдресаИсключения, ГруппаРассылки);	
	// --- АК mirv                                                                                                          	
	
КонецФункции

///////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ
///////////////////////////////////////////////////////////

&НаКлиенте
Процедура РеквизитПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
	СписокИзмененных.Добавить(Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = НЕ СохранитьИзменения();
			
			Если НЕ Отказ Тогда
				ЭтаФорма.Закрыть();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАдреса(Команда)
	
	Форма = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", , Элементы.ЭлектронныеАдреса, Ложь);
		
	Форма.Заголовок						= "Подбор";
	Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
	Форма.ЗакрыватьПриВыборе			= Ложь;
		
	Форма.Открыть();
	
КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
//	
//	Если Найти(ИсточникВыбора.ИмяФормы, "Справочник.Пользователи.Форма.ФормаВыбора") <> 0 Тогда
//		
//		ЭлАдрес = Обработки.УправлениеРассылкойОтчетовПоEmail.ПолучитьЭлектронныйАдресПользователя(ВыбранноеЗначение);
//		
//		Если НЕ ЗначениеЗаполнено(ЭлАдрес) Тогда
//			
//			ОбщегоНазначения.СообщитьОбОшибке("У выбранного пользователя отсутствует электронный адрес. В таблицу он добавлен не будет.");
//			Возврат;
//			
//		КонецЕсли;
//		
//		НовСтр = ЭлектронныеАдреса.Добавить();
//		НовСтр.ЭлектронныйАдрес = ЭлАдрес;
//		
//		СписокИзмененных.Добавить("email_add");
//		
//		Модифицированность = Истина;
//		
//	КонецЕсли;	
//	
//КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеАдресаЭлектронныйАдресПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	СписокИзмененных.Добавить("email_add");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаИсключенияЭлектронныйАдресПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	СписокИзмененных.Добавить("not_send_email");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные(Команда)
	
	Если СохранитьИзменения() Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПеречитатьСервер();
	
	//+++АК CISA 2018.10.02 ИП-00019966
	ПолучитьКонтактныеДанныеОтветственного();
	//---АК CISA
	
КонецПроцедуры


&НаКлиенте
Процедура ЭлектронныеАдресаПередУдалением(Элемент, Отказ)
	
	Модифицированность = Истина;
	
	СписокИзмененных.Добавить("email_add");
	
КонецПроцедуры


&НаКлиенте
Процедура ЭлектронныеАдресаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
	СписокИзмененных.Добавить("email_add");
	
КонецПроцедуры


&НаКлиенте
Процедура ПодборАдресаДляИсключения(Команда)
	
	Форма = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", , Элементы.АдресаИсключения, Ложь);
		
	Форма.Заголовок						= "Подбор";
	Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
	Форма.ЗакрыватьПриВыборе			= Ложь;
		
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеАдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьАдресНаСервере(ВыбранноеЗначение);
	
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
	//	ЭлАдрес = Обработки.УправлениеРассылкойОтчетовПоEmail.ПолучитьЭлектронныйАдресПользователя(ВыбранноеЗначение);
	//	
	//	Если НЕ ЗначениеЗаполнено(ЭлАдрес) Тогда
	//		
	//		ОбщегоНазначения.СообщитьОбОшибке("У выбранного пользователя отсутствует электронный адрес. В таблицу он добавлен не будет.");
	//		Возврат;
	//		
	//	КонецЕсли;
	//	
	//	НовСтр = ЭлектронныеАдреса.Добавить();
	//	НовСтр.ЭлектронныйАдрес = ЭлАдрес;
	//	
	//	СписокИзмененных.Добавить("email_add");
	//	
	//	Модифицированность = Истина;
	//	
	//КонецЕсли;	
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьАдресНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		ЭлАдрес = Обработки.УправлениеРассылкойОтчетовПоEmail.ПолучитьЭлектронныйАдресПользователя(ВыбранноеЗначение);
		
		Если НЕ ЗначениеЗаполнено(ЭлАдрес) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("У выбранного пользователя отсутствует электронный адрес. В таблицу он добавлен не будет.");
			Возврат;
			
		КонецЕсли;
		
		НовСтр = ЭлектронныеАдреса.Добавить();
		НовСтр.ЭлектронныйАдрес = ЭлАдрес;
		
		СписокИзмененных.Добавить("email_add");
		
		Модифицированность = Истина;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура АдресаИсключенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьАдресИсключенияНаСервере(ВыбранноеЗначение);
	
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
	//	
	//	ЭлАдрес = Обработки.УправлениеРассылкойОтчетовПоEmail.ПолучитьЭлектронныйАдресПользователя(ВыбранноеЗначение);
	//	
	//	Если НЕ ЗначениеЗаполнено(ЭлАдрес) Тогда
	//		
	//		ОбщегоНазначения.СообщитьОбОшибке("У выбранного пользователя отсутствует электронный адрес. В таблицу он добавлен не будет.");
	//		Возврат;
	//		
	//	КонецЕсли;
	//	
	//	НовСтр = АдресаИсключения.Добавить();
	//	НовСтр.ЭлектронныйАдрес = ЭлАдрес;
	//	
	//	СписокИзмененных.Добавить("not_send_email");
	//	
	//	Модифицированность = Истина;
	//	
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресИсключенияНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		ЭлАдрес = Обработки.УправлениеРассылкойОтчетовПоEmail.ПолучитьЭлектронныйАдресПользователя(ВыбранноеЗначение);
		
		Если НЕ ЗначениеЗаполнено(ЭлАдрес) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("У выбранного пользователя отсутствует электронный адрес. В таблицу он добавлен не будет.");
			Возврат;
			
		КонецЕсли;
		
		НовСтр = АдресаИсключения.Добавить();
		НовСтр.ЭлектронныйАдрес = ЭлАдрес;
		
		СписокИзмененных.Добавить("not_send_email");
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура АдресаИсключенияПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
	СписокИзмененных.Добавить("not_send_email");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИд(Ссылка)
	Если Ссылка.Пустая()Тогда
		Возврат "$$0x0"
	Иначе
		УИД = Ссылка.УникальныйИдентификатор();
		Возврат "$$master.dbo.UID2Binary('"+УИД+"')"
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ГруппаРассылкиПриИзменении(Элемент)
	add_group_distribution = ПолучитьИд(ГруппаРассылки);
	ЭтаФорма.Модифицированность = Истина;
	СписокИзмененных.Добавить("add_group_distribution");	
КонецПроцедуры

&НаКлиенте
Процедура DescrПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
	СписокИзмененных.Добавить(Элемент.Имя);
	
КонецПроцедуры

//+++АК CISA 2018.10.02 ИП-00019966
&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Ref_SotrOtvetstv = ПолучитьИд(Ответственный);
	ЭтаФорма.Модифицированность = Истина;
	СписокИзмененных.Добавить("Ref_SotrOtvetstv");
	ПолучитьКонтактныеДанныеОтветственного();
	
КонецПроцедуры

//+++АК CISA 2018.10.02 ИП-00019966
&НаСервере
Процедура УстановитьОтборКонтактныхДанныхПоОтветственному(мЗначение, ТекстВидаСравнения = "Равно")
	ОтборНаФорме = ЭтаФорма.КонтактныеДанныеОтветственного.Отбор;
	ДоступноеПолеОтбора = ОтборНаФорме.ДоступныеПоляОтбора.Элементы.Найти("Объект");
	Если ДоступноеПолеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мПолеКомпоновки = ДоступноеПолеОтбора.Поле;
	
	ЕстьОтбор = Ложь;
	Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = мПолеКомпоновки Тогда
			ЭлементОтбора.ПравоеЗначение	= мЗначение;
			ЭлементОтбора.Использование 	= ЗначениеЗаполнено(мЗначение);
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных[ТекстВидаСравнения];
			ЕстьОтбор = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьОтбор Тогда
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= мПолеКомпоновки;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных[ТекстВидаСравнения];
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(мЗначение);
		ЭлементОтбора.ПравоеЗначение 	= мЗначение;
	КонецЕсли;

КонецПроцедуры

//+++АК CISA 2018.10.02 ИП-00019966
&НаСервере
Процедура ПолучитьКонтактныеДанныеОтветственного() 
	КонтактныеДанныеОтветственного.Параметры.УстановитьЗначениеПараметра("ВыбФизЛицо", Ответственный);
	УстановитьОтборКонтактныхДанныхПоОтветственному(Ответственный, "Равно");
	Элементы.КонтактныеДанныеОтветственного.Обновить();
КонецПроцедуры
