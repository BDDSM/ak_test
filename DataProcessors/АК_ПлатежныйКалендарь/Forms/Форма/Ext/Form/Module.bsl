
&НаКлиенте
Процедура СформироватьКалендарь(Команда)
	ПоказатьОповещениеПользователя("Получение данных",,"Остатки по счетам");
	ПолучитьОстаткиПоСчетамНаСервере();
	
	ПоказатьОповещениеПользователя("Получение данных",,"Поступления прошлой недели");
	ПоступленияПрошлойНеделиНаСервере();
	
	//ПоказатьОповещениеПользователя("Формирование календаря",,"Календарь сформирован"); 
	
	ПоказатьОповещениеПользователя("Получение данных",,"Расчет платежей поставщикам"); 
	СформироватьТаблицуПлатежей();
	
	ПоказатьОповещениеПользователя("Получение данных",,"Расчет платежей по аренде"); 
	СформироватьКалендарьНаСервере();
	
	ПоказатьОповещениеПользователя("Формирование календаря",,"Вывод таблицы"); 
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПоступленияПрошлойНеделиНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОборотыДтКт.Период КАК День,
		|	ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоДт1 КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоДт2 КАК Справочник.БанковскиеСчета) КАК РасчетныйСчет,
		|	ФинансовыйОборотыДтКт.СуммаОборот КАК СуммаИнкассация,
		|	0 КАК СуммаЭквайринг
		|ПОМЕСТИТЬ СводныеДанные
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&Дата1, &Дата2, День, СчетДт = &Счет51, , , , ) КАК ФинансовыйОборотыДтКт
		|ГДЕ
		|	ФинансовыйОборотыДтКт.СчетКт = &СчетИнкассация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФинансовыйОборотыДтКт.Период,
		|	ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоДт1 КАК Справочник.Организации),
		|	ВЫРАЗИТЬ(ФинансовыйОборотыДтКт.СубконтоДт2 КАК Справочник.БанковскиеСчета),
		|	0,
		|	ФинансовыйОборотыДтКт.СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(&Дата1, &Дата2, День, СчетДт = &Счет51, , , , ) КАК ФинансовыйОборотыДтКт
		|ГДЕ
		|	ФинансовыйОборотыДтКт.СчетКт = &СчетЭквайринг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СводныеДанные.День КАК ДеньНеделюНазад,
		|	СводныеДанные.Организация КАК Организация,
		|	СводныеДанные.РасчетныйСчет КАК РасчетныйСчет,
		|	СУММА(СводныеДанные.СуммаИнкассация) КАК СуммаИнкассация,
		|	СУММА(СводныеДанные.СуммаЭквайринг) КАК СуммаЭквайринг,
		|	СУММА(СводныеДанные.СуммаИнкассация + СводныеДанные.СуммаЭквайринг) КАК СуммаПоступлений,
		|	ДОБАВИТЬКДАТЕ(СводныеДанные.День, ДЕНЬ, 7) КАК День
		|ИЗ
		|	СводныеДанные КАК СводныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	СводныеДанные.День,
		|	СводныеДанные.Организация,
		|	СводныеДанные.РасчетныйСчет,
		|	ДОБАВИТЬКДАТЕ(СводныеДанные.День, ДЕНЬ, 7)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДеньНеделюНазад,
		|	Организация,
		|	РасчетныйСчет
		|АВТОУПОРЯДОЧИВАНИЕ";

		
	Неделя=7*24*60*60;
		
	Запрос.УстановитьПараметр("Счет51", ПланыСчетов.Финансовый.НайтиПоКоду("51.1"));
	Запрос.УстановитьПараметр("СчетИнкассация", ПланыСчетов.Финансовый.НайтиПоКоду("57.1"));
	Запрос.УстановитьПараметр("СчетЭквайринг", ПланыСчетов.Финансовый.НайтиПоКоду("57.2"));
	ДатаНеделюНазад=КонецДня(ТекущаяДата-Неделя);
	Запрос.УстановитьПараметр("Дата2", КонецДня(НачалоДня(ТекущаяДата())-1));
	Запрос.УстановитьПараметр("Дата1", НачалоДня(НачалоДня(ТекущаяДата())-1-Неделя));

	Объект.ПоступленияЗаНеделю.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ПолучитьОстаткиПоСчетамНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.БанковскиеСчета) КАК РасчетныйСчет,
		|	ФинансовыйОстатки.СуммаОстаток КАК ОстатокПоСчету
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Остатки(&ТекущаяДата, Счет = &Счет, , ) КАК ФинансовыйОстатки
		|ГДЕ
		|	ФинансовыйОстатки.СуммаОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	РасчетныйСчет
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("51.1"));
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата));

	Объект.ОстаткиПоСчетам.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервере
Процедура СравнитьТаблицыПлатежейНаСервере(Дата2,Организации,Контрагенты)
	//Объект.ПлатежиПоставщикам1.Загрузить(Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(Дата2,Организации,Контрагенты));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежиПоставщикам1.Организация,
		|	ПлатежиПоставщикам1.Контрагент,
		|	ПлатежиПоставщикам1.СуммаКОплате
		|ПОМЕСТИТЬ ПП1
		|ИЗ
		|	&ПлатежиПоставщикам1 КАК ПлатежиПоставщикам1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлатежиПоставщикам2.Организация,
		|	ПлатежиПоставщикам2.Контрагент,
		|	ПлатежиПоставщикам2.СуммаКОплате
		|ПОМЕСТИТЬ ПП2
		|ИЗ
		|	&ПлатежиПоставщикам2 КАК ПлатежиПоставщикам2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(ПП1.СуммаКОплате, 0)) КАК СуммаКОплате1,
		|	ЕСТЬNULL(ПП2.Организация, ПП1.Организация) КАК Организация,
		|	ЕСТЬNULL(ПП2.Контрагент, ПП1.Контрагент) КАК Контрагент,
		|	СУММА(ЕСТЬNULL(ПП2.СуммаКОплате, 0)) КАК СуммаКОплате2
		|ПОМЕСТИТЬ ПП
		|ИЗ
		|	ПП2 КАК ПП2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПП1 КАК ПП1
		|		ПО (ПП1.Организация = ПП2.Организация)
		|			И (ПП1.Контрагент = ПП2.Контрагент)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ПП2.Организация, ПП1.Организация),
		|	ЕСТЬNULL(ПП2.Контрагент, ПП1.Контрагент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПП.СуммаКОплате2 - ПП.СуммаКОплате1 КАК СуммаКОплате,
		|	ПП.Организация,
		|	ПП.Контрагент
		|ПОМЕСТИТЬ Дельта
		|ИЗ
		|	ПП КАК ПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Дельта.СуммаКОплате,
		|	Дельта.Организация КАК Организация,
		|	Дельта.Контрагент КАК Контрагент
		|ИЗ
		|	Дельта КАК Дельта
		|ГДЕ
		|	Дельта.СуммаКОплате > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.Параметры.Вставить("ПлатежиПоставщикам1",Объект.ПлатежиПоставщикам1.Выгрузить());
	Запрос.Параметры.Вставить("ПлатежиПоставщикам2",Объект.ПлатежиПоставщикам2.Выгрузить());
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаПлатежа=Объект.ПлатежиПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатежа,ВыборкаДетальныеЗаписи,"Организация,Контрагент,СуммаКОплате");
		СтрокаПлатежа.Дата=КонецДня(Дата2)+1;
		//СтрокаПлатежа.Организация=ВыборкаДетальныеЗаписи.Организация;
		//СтрокаПлатежа.Контрагент=ВыборкаДетальныеЗаписи.Контрагент;
		//СтрокаПлатежа.СуммаКОплате=ВыборкаДетальныеЗаписи.СуммаКОплате;
	КонецЦикла;

	Объект.ПлатежиПоставщикам2.Загрузить(Объект.ПлатежиПоставщикам1.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуПлатежецНаСервере(Дата2,Организации="",Контрагенты="")
	Если Организации="" тогда
		Контрагенты=Справочники.Контрагенты.ПустаяСсылка();
		Организации=Справочники.Организации.ПустаяСсылка();
		Объект.ПлатежиПоставщикам2.Загрузить(Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(Дата2,Организации,Контрагенты));
	иначе
		Для Каждого СтрокаПлатежа из Объект.ПлатежиПоставщикам2 цикл
			Если СтрокаПлатежа.СуммаКОплате>0 тогда
				Контрагенты.Добавить(СтрокаПлатежа.Контрагент);
				Организации.Добавить(СтрокаПлатежа.Организация);
			КонецЕсли;
		КонецЦикла;
		Объект.ПлатежиПоставщикам1.Загрузить(Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(Дата2,Организации,Контрагенты));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуПлатежей()
	
	Объект.ПлатежиПоставщикам.Очистить();
	Объект.ПлатежиПоставщикам1.Очистить();
	Объект.ПлатежиПоставщикам2.Очистить();
	
	Дата1=КонецДня(ТекущаяДата);
	Дата2=КонецДня(КонецКалендаря);
	
	НайденыПлатежи=Ложь;
	
	ПоказатьОповещениеПользователя("Платежи поставщикам",,"Расчет на "+Формат(Дата2,"ДФ=dd.MM.yy")); 
	
	ПолучитьТаблицуПлатежецНаСервере(Дата2);
	
	Если Дата2>Дата1 тогда
		
		ВсегоДней=(НачалоДня(Дата2)-НачалоДня(Дата1))/(60*60*24)+1;
		День=1;
		
		Пока Дата2>Дата1 цикл
			
			День=День+1;
			
			Дата2=НачалоДня(Дата2)-1;
			
			Контрагенты=Новый Массив;
			Организации=Новый Массив;
			
			ПоказатьОповещениеПользователя("Платежи поставщикам",,"Расчет на "+Формат(Дата2,"ДФ=dd.MM.yy")+", день "+День+" из "+ВсегоДней);
			
			ПолучитьТаблицуПлатежецНаСервере(Дата2,Организации,Контрагенты);
			
			СравнитьТаблицыПлатежейНаСервере(Дата2,Организации,Контрагенты);
			
		КонецЦикла;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя("Получение данных",,"Расчет платежей поставщикам"); 
	
	Для Каждого СтрокаПлатежа2 из Объект.ПлатежиПоставщикам2 цикл
		Если СтрокаПлатежа2.СуммаКОплате>0 тогда
			СтрокаПлатежа=Объект.ПлатежиПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлатежа,СтрокаПлатежа2);
			СтрокаПлатежа.Дата=Дата1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура СформироватьКалендарьНаСервере()
	
    
	
//	возврат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОстатки.Субконто1 КАК Организация,
		|	ФинансовыйОстатки.Субконто2 КАК РасчетныйСчет,
		|	ФинансовыйОстатки.СуммаОстаток КАК НачальныйОстаток
		|ПОМЕСТИТЬ НачальныеОстатки
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Остатки(&ТекущаяДата, Счет = &Счет, , ) КАК ФинансовыйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредств.Организация КАК Организация,
		|	ВЫРАЗИТЬ(ЗаявкаНаРасходованиеСредств.БанковскийСчетКасса КАК Справочник.БанковскиеСчета) КАК БанковскийСчет,
		|	НАЧАЛОПЕРИОДА(ЗаявкаНаРасходованиеСредств.ДатаРасхода, ДЕНЬ) КАК Дата,
		|	ЗаявкаНаРасходованиеСредств.Ссылка КАК Заявка,
		|	ЗаявкаНаРасходованиеСредств.Контрагент,
		|	ЗаявкаНаРасходованиеСредств.СуммаДокумента КАК СуммаЗаявки,
		|	ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств
		|ПОМЕСТИТЬ Заявки
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредств.Проведен
		|	И ЗаявкаНаРасходованиеСредств.ДатаРасхода МЕЖДУ &ТекущаяДата И &КонецКалендаря
		|	И ЗаявкаНаРасходованиеСредств.ФормаОплаты = &ФормаОплатыБезнал
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БанковскийСчет,
		|	Организация,
		|	Дата,
		|	Заявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходИзБанка.ЗаявкаНаРасходованиеСредств КАК Заявка,
		|	РасходИзБанка.СуммаДокумента,
		|	РасходИзБанка.Контрагент КАК Контрагент,
		|	РасходИзБанка.Организация КАК Организация
		|ПОМЕСТИТЬ ОплатыПоЗаявкам
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	РасходИзБанка.Проведен
		|	И РасходИзБанка.Оплачено
		|	И РасходИзБанка.ЗаявкаНаРасходованиеСредств В
		|			(ВЫБРАТЬ
		|				Заявки.Заявка
		|			ИЗ
		|				Заявки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заявка,
		|	Контрагент,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заявки.СтатьяДвиженияДенежныхСредств КАК Статья
		|ПОМЕСТИТЬ СтатьиАренды
		|ИЗ
		|	Заявки КАК Заявки
		|ГДЕ
		|	Заявки.СтатьяДвиженияДенежныхСредств.Код = ""131010""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Заявки.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Заявки КАК Заявки
		|ГДЕ
		|	Заявки.СтатьяДвиженияДенежныхСредств.Код = ""131011""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Статья
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заявки.Организация КАК Организация,
		|	Заявки.БанковскийСчет КАК БанковскийСчет,
		|	Заявки.Дата,
		|	Заявки.Заявка,
		|	Заявки.Контрагент,
		|	Заявки.СуммаЗаявки,
		|	ЕСТЬNULL(ОплатыПоЗаявкам.СуммаДокумента, 0) КАК СуммаОплаты,
		|	Заявки.СуммаЗаявки - ЕСТЬNULL(ОплатыПоЗаявкам.СуммаДокумента, 0) КАК СуммаКОплате,
		|	ВЫБОР
		|		КОГДА Заявки.СтатьяДвиженияДенежныхСредств В
		|				(ВЫБРАТЬ
		|					СтатьиАренды.Статья
		|				ИЗ
		|					СтатьиАренды)
		|			ТОГДА Заявки.СуммаЗаявки - ЕСТЬNULL(ОплатыПоЗаявкам.СуммаДокумента, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Аренда,
		|	ВЫБОР
		|		КОГДА НЕ Заявки.СтатьяДвиженияДенежныхСредств В
		|					(ВЫБРАТЬ
		|						СтатьиАренды.Статья
		|					ИЗ
		|						СтатьиАренды)
		|			ТОГДА Заявки.СуммаЗаявки - ЕСТЬNULL(ОплатыПоЗаявкам.СуммаДокумента, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Прочее
		|ПОМЕСТИТЬ ЗаявкиСОплатой
		|ИЗ
		|	Заявки КАК Заявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоЗаявкам КАК ОплатыПоЗаявкам
		|		ПО Заявки.Заявка = ОплатыПоЗаявкам.Заявка
		|			И Заявки.Организация = ОплатыПоЗаявкам.Организация
		|			И Заявки.Контрагент = ОплатыПоЗаявкам.Контрагент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	БанковскийСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АК_ДанныеПлатежногоКалендаря.БанковскийСчет,
		|	АК_ДанныеПлатежногоКалендаря.Дата,
		|	АК_ДанныеПлатежногоКалендаря.Приход,
		|	АК_ДанныеПлатежногоКалендаря.Налоги,
		|	АК_ДанныеПлатежногоКалендаря.Зарплата,
		|	ВЫРАЗИТЬ(АК_ДанныеПлатежногоКалендаря.БанковскийСчет.Владелец КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ ДанныеПК
		|ИЗ
		|	РегистрСведений.АК_ДанныеПлатежногоКалендаря КАК АК_ДанныеПлатежногоКалендаря
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлатежиПоставщикам.Дата,
		|	ПлатежиПоставщикам.Организация,
		|	ПлатежиПоставщикам.Контрагент,
		|	ПлатежиПоставщикам.СуммаКОплате
		|ПОМЕСТИТЬ ПП
		|ИЗ
		|	&ПлатежиПоставщикам КАК ПлатежиПоставщикам";

	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("51.1"));
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецКалендаря", КонецДня(КонецКалендаря));
	Запрос.УстановитьПараметр("ФормаОплатыБезнал", Перечисления.ФормыОплаты.Безналичные);
	Запрос.УстановитьПараметр("ПлатежиПоставщикам", Объект.ПлатежиПоставщикам.Выгрузить());

	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//ЭтаФорма.зак
	
//	ЗначениеВРеквизитФормы(Результат,"Данные");

КонецПроцедуры



&НаКлиенте
Процедура Сформировать(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
перем Данные,ТекстОписаниеОшибки;
	ТекущаяДата=ТекущаяДата();
	
	КонецКалендаря=КонецДня(ТекущаяДата())+6*24*60*60;
	
	УстановитьПривилегированныйРежим(Истина);

	Отказ=НЕ АК_РассылкиПоставщикамТехнологам.ПолучитьПараметрыНастройкиРассылокПоставщикамТехнологам(Данные,ТекстОписаниеОшибки);
	Если Отказ тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении данных настройки: "+ТекстОписаниеОшибки);
	иначе
		Попытка
			Если ТипЗнч(Данные)=Тип("Структура") тогда
				Для Каждого Элемент из Данные цикл
					попытка
						Если Элемент.Ключ="о2" тогда
							о2=Элемент.Значение;
						КонецЕсли;
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения данных """+Элемент.Ключ+""": "+ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные повреждены");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные повреждены");
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КонецКалендаряПриИзменении(Элемент)
	ПоказатьДеньНедели();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеньНедели()
	Дни=Новый Массив;
	Дни.Добавить("");
	Дни.Добавить("Пн");
	Дни.Добавить("Вт");
	Дни.Добавить("Ср");
	Дни.Добавить("Чт");
	Дни.Добавить("Пт");
	Дни.Добавить("Сб");
	Дни.Добавить("Вс");
	Элементы.НадписьДеньНедели.Заголовок=""+Дни[ДеньНедели(КонецКалендаря)];
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если не ПустаяСтрока(о2) тогда
	//	Файл = Новый Файл(о2); 
	//	Если Файл.Существует() тогда
	//		//ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
	//		Отказ=Истина;
	//		
	//		АдресХранилища = "";
	//		Результат = ПоместитьФайл(АдресХранилища, сокрлп(о2), , Ложь);
	//		ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
	//		// Откроем форму подключенной внешней обработки
	//		ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма");
	//		
	//	КонецЕсли;
	//КонецЕсли;
	ПоказатьОповещениеПользователя("Ведутся работы по исправлению ошибки");
	ПоказатьДеньНедели();
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)
	УстановитьПривилегированныйРежим(Истина);
    Возврат ВнешниеОбработки.Подключить(АдресХранилища);
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции 

