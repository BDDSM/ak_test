
Процедура ПрочитатьДанныеНаСервере()
	
	ДокументыЗаявки.Очистить();
	ДокументыОтгрузки.Очистить();
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("РеклПродукция", ТТРекламнаяПродукция);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ДатаНачПолный", ДобавитьМесяц(НачалоПериода, -1));
	Запрос.УстановитьПараметр("ДатаКонПолный", ДобавитьМесяц(НачалоПериода, 2));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходныйОрдерСклад.Ссылка КАК Ссылка,
	               |	РасходныйОрдерСклад.Основание
	               |ПОМЕСТИТЬ ВТ_Расходники
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНачПолный И &ДатаКонПолный
	               |	И РасходныйОрдерСклад.Проведен = ИСТИНА
	               |	И РасходныйОрдерСклад.Склад.Владелец = &РеклПродукция
	               |	И РасходныйОрдерСклад.Основание ССЫЛКА Документ.ЗаявкаНаРекламныеМатериалы
	               |	И РасходныйОрдерСклад.Основание <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРекламныеМатериалы.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявкаНаРекламныеМатериалы.Ссылка,
	               |	ЗаявкаНаРекламныеМатериалы.Автор,
	               |	ЗаявкаНаРекламныеМатериалы.Комментарий,
	               |	ЗаявкаНаРекламныеМатериалы.ТорговаяТочка,
	               |	ЗаявкаНаРекламныеМатериалы.Утверждена
	               |ПОМЕСТИТЬ ВТ_Заявки
	               |ИЗ
	               |	Документ.ЗаявкаНаРекламныеМатериалы КАК ЗаявкаНаРекламныеМатериалы
	               |ГДЕ
	               |	ЗаявкаНаРекламныеМатериалы.Проведен = ИСТИНА
	               |	И ЗаявкаНаРекламныеМатериалы.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Заявки.Ссылка КАК Заявка,
	               |	ВТ_Заявки.Автор,
	               |	ВТ_Заявки.Комментарий,
	               |	ВТ_Заявки.ТорговаяТочка КАК Магазин,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВЗ_Остатки.КоличествоОстаток, 0) = 0
	               |				И НЕ ВЗ_Расходники.Основание ЕСТЬ NULL
	               |			ТОГДА ""Отгружено""
	               |		КОГДА ЕСТЬNULL(ВЗ_Отгрузки.Количество, 0) <> 0
	               |			ТОГДА ""Частично отгружено""
	               |		ИНАЧЕ ""Новая""
	               |	КОНЕЦ КАК Статус,
	               |	ВТ_Заявки.Утверждена
	               |ИЗ
	               |	ВТ_Заявки КАК ВТ_Заявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ЗаявкиНаРекламныеМатериалыОстатки.Заявка КАК Заявка,
	               |			СУММА(ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	               |		ИЗ
	               |			РегистрНакопления.ЗаявкиНаРекламныеМатериалы.Остатки(
	               |					,
	               |					Заявка В
	               |						(ВЫБРАТЬ
	               |							ВТ_Заявки.Ссылка
	               |						ИЗ
	               |							ВТ_Заявки КАК ВТ_Заявки)) КАК ЗаявкиНаРекламныеМатериалыОстатки
	               |		ГДЕ
	               |			ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЗаявкиНаРекламныеМатериалыОстатки.Заявка) КАК ВЗ_Остатки
	               |		ПО ВТ_Заявки.Ссылка = ВЗ_Остатки.Заявка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ЗаявкиНаРекламныеМатериалы.Заявка КАК Заявка,
	               |			СУММА(ЗаявкиНаРекламныеМатериалы.Количество) КАК Количество
	               |		ИЗ
	               |			РегистрНакопления.ЗаявкиНаРекламныеМатериалы КАК ЗаявкиНаРекламныеМатериалы
	               |		ГДЕ
	               |			ЗаявкиНаРекламныеМатериалы.Заявка В
	               |					(ВЫБРАТЬ
	               |						ВТ_Заявки.Ссылка
	               |					ИЗ
	               |						ВТ_Заявки КАК ВТ_Заявки)
	               |			И ЗаявкиНаРекламныеМатериалы.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЗаявкиНаРекламныеМатериалы.Заявка) КАК ВЗ_Отгрузки
	               |		ПО ВТ_Заявки.Ссылка = ВЗ_Отгрузки.Заявка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_Расходники.Основание КАК Основание
	               |		ИЗ
	               |			ВТ_Расходники КАК ВТ_Расходники) КАК ВЗ_Расходники
	               |		ПО ВТ_Заявки.Ссылка = ВЗ_Расходники.Основание
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_Заявки.Ссылка.Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходныйОрдерСклад.Ссылка КАК Ордер,
	               |	РасходныйОрдерСклад.Получатель,
	               |	РасходныйОрдерСклад.Основание КАК Заявка,
	               |	РасходныйОрдерСклад.Комментарий
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МАКСИМУМ(РасходныйОрдерСклад.Ссылка) КАК Ссылка,
	               |		РасходныйОрдерСклад.Основание КАК Заявка
	               |	ИЗ
	               |		Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |	ГДЕ
	               |		РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И РасходныйОрдерСклад.Проведен = ИСТИНА
	               |		И РасходныйОрдерСклад.Склад.Владелец = &РеклПродукция
	               |		И РасходныйОрдерСклад.Основание ССЫЛКА Документ.ЗаявкаНаРекламныеМатериалы
	               |		И РасходныйОрдерСклад.Основание <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРекламныеМатериалы.ПустаяСсылка)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		РасходныйОрдерСклад.Основание) КАК ВЗ_Выборка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |		ПО ВЗ_Выборка.Ссылка = РасходныйОрдерСклад.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РасходныйОрдерСклад.Дата УБЫВ";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ДокументыЗаявки.Загрузить(Результаты[2].Выгрузить());
	ДокументыОтгрузки.Загрузить(Результаты[3].Выгрузить());
	//+++АК sils 05.10.2018 ИП-00020045
	ДокументыОтгрузки_КолСтр = ДокументыОтгрузки.Количество();
	//---АК
	
	//ЗаказаноМагазинами.Очистить();
	//Объект.Товары.Очистить();
	//
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//
	//ЗапросСкуль = "SELECT 
	//			  |	
	//			  |	SUM(TD.Quantity * CASE WHEN TD.operation_type = 801 THEN -1 ELSE 1 END) as Kolvo
	//			  |	
	//			  |	,CAST(TT.UID as nvarchar(50)) as ShopUid
	//			  |	,CAST(TovUid.UID as nvarchar(50)) as TovUid
	//			  |	
	//			  |FROM [SMS_REPL].[dbo].[TD_move] TD (nolock) 
	//			  |LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 Tovari (nolock) ON TD.id_tov = Tovari._Fld760
	//			  |LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID TT (nolock) ON TD.ShopNo_rep = TT.ShopNo
	//			  |LEFT OUTER JOIN IzbenkaFin.dbo.ArticleBin2UID TovUid (nolock) ON TD.id_tov = TovUid.id_tov
	//			  |where closedate between " + ВнешниеДанные.ФорматПоля(НачалоПериода) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(КонецПериода)) + " and operation_type IN (800, 801) and Confirm_type = 1
	//			  |  and Tovari._Fld6851 = 1
	//			  |GROUP BY CAST(TovUid.UID as nvarchar(50)), CAST(TT.UID as nvarchar(50))";
	//			  
	//			  
	//rs = ADOСоединение.Execute(ЗапросСкуль);
	//Попытка
	//	rs.MoveFirst();
	//	Пока НЕ rs.Eof() Цикл
	//		НовСтр = ЗаказаноМагазинами.Добавить();
	//		НовСтр.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TovUid").Value));
	//		НовСтр.Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("ShopUid").Value));
	//		НовСтр.Заказано = rs.Fields("Kolvo").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//	
	//Исключение
	//КонецПопытки;
	//
	//ADOСоединение.Close();
	//
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("РеклПродукция", ТТРекламнаяПродукция);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаНачГраница", Новый Граница(НачалоДня(НачалоПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ДатаКонГраница", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкиНаРекламныеМатериалыОстатки.Заявка.ТорговаяТочка КАК Магазин,
	               |	ЗаявкиНаРекламныеМатериалыОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(ЗаявкиНаРекламныеМатериалыОстатки.КоличествоПриход) КАК Заказано,
	               |	ЗаявкиНаРекламныеМатериалыОстатки.Номенклатура.ВидРекламногоМатериала КАК Вид
	               |ИЗ
	               |	РегистрНакопления.ЗаявкиНаРекламныеМатериалы.Обороты(&ДатаНачГраница, &ДатаКонГраница, , ) КАК ЗаявкиНаРекламныеМатериалыОстатки
	               |ГДЕ
	               |	ЗаявкиНаРекламныеМатериалыОстатки.КоличествоПриход > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаявкиНаРекламныеМатериалыОстатки.Заявка.ТорговаяТочка,
	               |	ЗаявкиНаРекламныеМатериалыОстатки.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
				   //+++АК sils 17.05.2018 ИП-00018407
	               |	ТоварыНаСкладахОстатки.Склад,
				   //---АК
	               |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК ОстатокНаСкладе,
	               |	ТоварыНаСкладахОстатки.Номенклатура.ВидРекламногоМатериала КАК Вид
				   //+++АК sils 17.05.2018 ИП-00018407
				   |ПОМЕСТИТЬ ВР_ТоварыНаСкладах
				   //---АК
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&ТекДата,
	               |			Склад.Владелец = &РеклПродукция
				   //+++АК kats 31.08.2018 ИП-00019661
	               |				И НЕ Номенклатура.ПометкаУдаления
				   //---АК kats 31.08.2018 ИП-00019661
	               |				И Номенклатура.РекламныйМатериал = ИСТИНА) КАК ТоварыНаСкладахОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
				   //+++АК sils 17.05.2018 ИП-00018407
				   //|	ТоварыНаСкладахОстатки.Номенклатура
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.Номенклатура.ВидРекламногоМатериала,
	               |	ТоварыНаСкладахОстатки.Склад
				   //---АК
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	СУММА(ВЫБОР
	               |			КОГДА РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |				ТОГДА РасходныйОрдерСкладТовары.Количество
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Отгружено,
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Магазин,
				   //+++АК sils 17.05.2018 ИП-00018407
				   //|	РасходныйОрдерСкладТовары.Номенклатура.ВидРекламногоМатериала КАК Вид
				   |	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад
				   |ПОМЕСТИТЬ ВР_Отгружено
				   //---АК
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	               |	И РасходныйОрдерСкладТовары.Номенклатура.РекламныйМатериал = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &РеклПродукция
				   //+++АК kats 31.08.2018 ИП-00019661
	               |	И НЕ РасходныйОрдерСкладТовары.Номенклатура.ПометкаУдаления
				   //---АК kats 31.08.2018 ИП-00019661
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура,
				   //+++АК sils 17.05.2018 ИП-00018407
				   //|	РасходныйОрдерСкладТовары.Ссылка.Получатель";
	               |	РасходныйОрдерСкладТовары.Ссылка.Получатель,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ВР_Отгружено.Номенклатура,
				   |	СУММА(ВР_Отгружено.Отгружено) КАК Отгружено,
				   |	ВР_Отгружено.Магазин,
				   |	ВР_Отгружено.Номенклатура.ВидРекламногоМатериала КАК Вид
				   |ИЗ
				   |	ВР_Отгружено КАК ВР_Отгружено
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВР_Отгружено.Номенклатура,
	               |	ВР_Отгружено.Магазин
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ВР_Отгружено.Номенклатура,
				   |	СУММА(ВР_Отгружено.Отгружено) КАК Отгружено,
	               |	ВР_Отгружено.Склад,
				   |	ВР_Отгружено.Номенклатура.ВидРекламногоМатериала КАК Вид
				   |ИЗ
				   |	ВР_Отгружено КАК ВР_Отгружено
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВР_Отгружено.Номенклатура,
	               |	ВР_Отгружено.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ВР_ТоварыНаСкладах.Номенклатура,
				   |	СУММА(ВР_ТоварыНаСкладах.ОстатокНаСкладе),
				   |	ВР_ТоварыНаСкладах.Номенклатура.ВидРекламногоМатериала КАК Вид
				   |ИЗ
				   |	ВР_ТоварыНаСкладах КАК ВР_ТоварыНаСкладах
				   |
				   |СГРУППИРОВАТЬ ПО
	               |	ВР_ТоварыНаСкладах.Номенклатура,
	               |	ВР_ТоварыНаСкладах.Номенклатура.ВидРекламногоМатериала
	               |УПОРЯДОЧИТЬ ПО
	               |	ВР_ТоварыНаСкладах.Номенклатура.Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ВР_ТоварыНаСкладах.Номенклатура,
				   |	ВР_ТоварыНаСкладах.Склад,
				   |	СУММА(ВР_ТоварыНаСкладах.ОстатокНаСкладе),
				   |	ВР_ТоварыНаСкладах.Номенклатура.ВидРекламногоМатериала КАК Вид
				   |ИЗ
				   |	ВР_ТоварыНаСкладах КАК ВР_ТоварыНаСкладах
				   |
				   |СГРУППИРОВАТЬ ПО
	               |	ВР_ТоварыНаСкладах.Номенклатура,
	               |	ВР_ТоварыНаСкладах.Номенклатура.ВидРекламногоМатериала,
	               |	ВР_ТоварыНаСкладах.Склад
	               |УПОРЯДОЧИТЬ ПО
	               |	ВР_ТоварыНаСкладах.Номенклатура.Наименование,
	               |	ВР_ТоварыНаСкладах.Склад.Наименование";
				   //---АК
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ЗаказаноМагазинами.Загрузить(Результаты[0].Выгрузить());
	
	//+++АК sils 18.05.2018 ИП-00018407
	//Выборка = Результаты[1].Выбрать();
	Выборка = Результаты[5].Выбрать();
	//---АК
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб, Выборка);
	КонецЦикла;
	
	//+++АК sils 17.05.2018 ИП-00018407
	//Выборка = Результаты[2].Выбрать();
	Объект.ТоварыПоСкладам.Очистить();
	
	Выборка = Результаты[6].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = Объект.ТоварыПоСкладам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб, Выборка);
	КонецЦикла;
	
	СтрокаКеш = Результаты[4].Выбрать();
	Пока СтрокаКеш.Следующий() Цикл
		СтрокиВТоварах = Объект.ТоварыПоСкладам.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтрокаКеш.Номенклатура, СтрокаКеш.Склад));
		Если СтрокиВТоварах.Количество() = 0 Тогда
			СтрокаТов = Объект.ТоварыПоСкладам.Добавить();
			СтрокаТов.Номенклатура = СтрокаКеш.Номенклатура;
			СтрокаТов.Вид = СтрокаКеш.Вид;
			СтрокаТов.Склад = СтрокаКеш.Склад;
		Иначе
			СтрокаТов = СтрокиВТоварах[0];
		КонецЕсли;
		СтрокаТов.ОтгруженоСоСклада = СтрокаТов.ОтгруженоСоСклада + СтрокаКеш.Отгружено;
	КонецЦикла;
	
	Выборка = Результаты[3].Выбрать();
	//---АК
	Пока Выборка.Следующий() Цикл
		СтрокиПоМагазинам = ЗаказаноМагазинами.НайтиСтроки(Новый Структура("Номенклатура, Магазин", Выборка.Номенклатура, Выборка.Магазин));
		Если СтрокиПоМагазинам.Количество() > 0 Тогда
			НовСтр = СтрокиПоМагазинам[0];
		Иначе
			НовСтр = ЗаказаноМагазинами.Добавить();
			НовСтр.Номенклатура = Выборка.Номенклатура;
			НовСтр.Магазин = Выборка.Магазин;
			НовСтр.Вид = Выборка.Вид;
		КонецЕсли;
		НовСтр.Отгружено = НовСтр.Отгружено + Выборка.Отгружено;
	КонецЦикла;
	
	ТабКеш = ЗаказаноМагазинами.Выгрузить();
	ТабКеш.Свернуть("Номенклатура, Вид", "Заказано, Отгружено");
	
	Для Каждого СтрокаКеш Из ТабКеш Цикл
		СтрокиВТоварах = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаКеш.Номенклатура));
		Если СтрокиВТоварах.Количество() = 0 Тогда
			СтрокаТов = Объект.Товары.Добавить();
			СтрокаТов.Номенклатура = СтрокаКеш.Номенклатура;
			СтрокаТов.Вид = СтрокаКеш.Вид;
		Иначе
			СтрокаТов = СтрокиВТоварах[0];
		КонецЕсли;
		СтрокаТов.ЗаказалиМагазины = СтрокаТов.ЗаказалиМагазины + СтрокаКеш.Заказано;
		СтрокаТов.ОтгруженоСоСклада = СтрокаТов.ОтгруженоСоСклада + СтрокаКеш.Отгружено;
	КонецЦикла;
	
	Объект.Товары.Сортировать("Номенклатура");
	//+++АК sils 17.05.2018 ИП-00018407
	Объект.ТоварыПоСкладам.Сортировать("Номенклатура, Склад");
	//---АК
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		Нехватка = СтрокаТовар.ОстатокНаСкладе + СтрокаТовар.ОтгруженоСоСклада - СтрокаТовар.ЗаказалиМагазины;
		Если Нехватка < 0 Тогда
			СтрокаТовар.НехваткаОстатка = Нехватка * (-1);
		КонецЕсли;	
	КонецЦикла;	
	
	//+++АК sils 17.05.2018 ИП-00018407
	ВывестиДерево();
	//---АК
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	ПрочитатьДанныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачалоПериода = НачалоНедели(ТекущаяДата());
	КонецПериода = КонецНедели(ТекущаяДата());
	ТТРекламнаяПродукция = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Рекламная продукция");
	
	ПрочитатьДанныеНаСервере();
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуСтроки(ТекИдентификатор)
	
	РасшифровкаСтроки.Очистить();
	
	Если ТекИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Объект.Товары.НайтиПоИдентификатору(ТекИдентификатор);
	СтрокиПоТовару = ЗаказаноМагазинами.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));
	Для Каждого СтрокаПоТовару Из СтрокиПоТовару Цикл
		СтрокаДоб = РасшифровкаСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб, СтрокаПоТовару);
		СтрокаДоб.Недогружено = СтрокаДоб.Заказано - СтрокаДоб.Отгружено;
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьРасшифровкуСтроки(Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

Функция ПолучитьДанныеНоменклатура(СтруктураДанные, Склад)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, СтруктураДанные.Номенклатура);
	
	Если НЕ СтруктураДанные.Номенклатура.НеВедетсяУчетПоХарактеристикам Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		Если ТабРезультат.Количество() = 1 Тогда
			СтруктураДанные.Характеристика = ТабРезультат[0].Характеристика;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.ДатаПроизводства)
		И СтруктураДанные.Номенклатура.Складируемая Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
		Если СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтруктураДанные.ЕдиницаИзмерения);
		Иначе
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", Неопределено);
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
		               |	ТоварыНаСкладахОстатки.КоличествоОстаток
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |			,
		               |			Склад = &Склад
		               |				И Номенклатура = &Номенклатура
		               |				И Характеристика = &Характеристика
		               |				И (ЕдиницаИзмерения = &ЕдиницаИзмерения
		               |					ИЛИ &ЕдиницаИзмерения = НЕОПРЕДЕЛЕНО)) КАК ТоварыНаСкладахОстатки
		               |ГДЕ
		               |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаПроизводства";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанные.ДатаПроизводства = Выборка.ДатаПроизводства;
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураДанные.Вставить("ЭтоСырье", СтруктураДанные.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

Процедура СоздатьДокументы(ДатаРаспределения)
	
	//+++ mind 2017-10-23
	МассивДоковСМассовойРассылкой = Новый Массив();
	Для Каждого СтрокаВыделенная Из Элементы.ДокументыЗаявки.ВыделенныеСтроки Цикл
		ТекДанные = ДокументыЗаявки.НайтиПоИдентификатору(СтрокаВыделенная);
		Если ТекДанные.Заявка.ТорговыеТочки.Количество() > 0
			И ТекДанные.Заявка.Товары.Количество() > 0 Тогда
			МассивДоковСМассовойРассылкой.Добавить(ТекДанные.Заявка);
		КонецЕсли;
	КонецЦикла;
	Если МассивДоковСМассовойРассылкой.Количество() > 0 Тогда
		ЗапросКеш = Новый Запрос();
		ЗапросКеш.Текст = "ВЫБРАТЬ
		                  |	РасходныйОрдерСклад.Ссылка,
		                  |	РасходныйОрдерСклад.Основание,
		                  |	РасходныйОрдерСклад.Получатель
		                  |ИЗ
		                  |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		                  |ГДЕ
		                  |	РасходныйОрдерСклад.Дата >= &Дата
		                  |	И РасходныйОрдерСклад.Основание В(&Основание)
		                  |	И РасходныйОрдерСклад.Проведен = ИСТИНА";
		ЗапросКеш.УстановитьПараметр("Дата", ТекущаяДата() - 86400*2);
		ЗапросКеш.УстановитьПараметр("Основание", МассивДоковСМассовойРассылкой);
		ТабКешРасходники = ЗапросКеш.Выполнить().Выгрузить();
	КонецЕсли;	
	//--- mind 2017-10-23
	
	СтатусВСборке = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	СкладПодставлять = ТТРекламнаяПродукция.СкладТорговогоЗала;
	Сборщик = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
	ВидОперации		= Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
	Для Каждого СтрокаВыделенная Из Элементы.ДокументыЗаявки.ВыделенныеСтроки Цикл
		ТекДанные = ДокументыЗаявки.НайтиПоИдентификатору(СтрокаВыделенная);
		//+++ mind 2017-10-23
		
		Если МассивДоковСМассовойРассылкой.Найти(ТекДанные.Заявка) <> Неопределено Тогда
			ТабТоварыДокумента = ТекДанные.Заявка.Товары.Выгрузить();
			Коммент = ТекДанные.Заявка.Комментарий;
			Для Каждого СтрокаПолучатель Из ТекДанные.Заявка.ТорговыеТочки Цикл
				СтрокиКеш = ТабКешРасходники.НайтиСтроки(Новый Структура("Основание, Получатель", ТекДанные.Заявка, СтрокаПолучатель.Магазин));
				Если СтрокиКеш.Количество() = 0 Тогда
					ДокОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
					ДокОбъект.Дата = ТекущаяДата();
					ДокОбъект.ДатаРаспределения = ДатаРаспределения;
					ДокОбъект.Статус = СтатусВСборке;
					ДокОбъект.СборкаТерминаломЗакончена = Истина;
					ДокОбъект.Склад = СкладПодставлять;
					
					ДокОбъект.Основание = ТекДанные.Заявка;
					ДокОбъект.Получатель = СтрокаПолучатель.Магазин;
					ДокОбъект.Комментарий = Коммент;
					
					ДокОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
					ДокОбъект.ВидОперации		= ВидОперации;
					ДокОбъект.ПровереноОператором = Истина;
					ДокОбъект.Сборщик = Сборщик;
					
					ДокОбъект.Товары.Загрузить(ТабТоварыДокумента);
					
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;	
			КонецЦикла;	
		Иначе
			//+++АК sils 19.06.2018 ИП-00018969
			Если ТипЗнч(ТекДанные.Заявка) = Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы") Тогда
				Док_РОС = ОбщегоНазначенияСервер.ПроверкаВводаРОСПоЗаявке(ТекДанные.Заявка);
				Если Док_РОС <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На основании заявки " + 
					СокрЛП(ТекДанные.Заявка) + " уже введен """ + СокрЛП(Док_РОС) + """. Ввод на основании не выполнен!",,,,);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//---АК
			ДокОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
			ДокОбъект.Заполнить(ТекДанные.Заявка);
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.ДатаРаспределения = ДатаРаспределения;
			ДокОбъект.Статус = СтатусВСборке;
			ДокОбъект.СборкаТерминаломЗакончена = Истина;
			ДокОбъект.Склад = СкладПодставлять;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		//--- mind 2017-10-23
	КонецЦикла;
	
	//ТаблицаВДокументы.Свернуть("Магазин, Номенклатура", "Количество");
	//ТаблицаВДокументы.Сортировать("Магазин, Номенклатура");
	//
	//ТабМагазины = ТаблицаВДокументы.Скопировать();
	//ТабМагазины.Свернуть("Магазин");
	//Для Каждого СтрокаМагазин Из ТабМагазины Цикл
	//	СтрокиНоменклатура = ТаблицаВДокументы.НайтиСтроки(Новый Структура("Магазин", СтрокаМагазин.Магазин));
	//	Если СтрокиНоменклатура.Количество() > 0 Тогда
	//		РасхОрдерОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
	//		РасхОрдерОбъект.НеМенятьДатуПриПроведении = Истина;
	//		РасхОрдерОбъект.Дата			= ТекущаяДата();
	//		РасхОрдерОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
	//		РасхОрдерОбъект.ВидОперации		= Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
	//		РасхОрдерОбъект.Получатель 		= СтрокаМагазин.Магазин;
	//		РасхОрдерОбъект.Склад 			= ТТРекламнаяПродукция.СкладТорговогоЗала;
	//		РасхОрдерОбъект.Статус 			= Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
	//		РасхОрдерОбъект.ДатаРаспределения 			= ТекущаяДата();
	//		
	//		
	//		Для Каждого СтрокаНоменклатура Из СтрокиНоменклатура Цикл
	//			
	//			СтрокаТабличнойЧасти = РасхОрдерОбъект.Товары.Добавить();
	//			СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Номенклатура;
	//			СтруктураДанные = Новый Структура;
	//			СтруктураДанные.Вставить("Получатель"		, РасхОрдерОбъект.Получатель);
	//			СтруктураДанные.Вставить("ЭтоСырье",	 	Ложь);
	//			СтруктураДанные.Вставить("Номенклатура"		, СтрокаТабличнойЧасти.Номенклатура);
	//			СтруктураДанные.Вставить("ДатаПроизводства"	, СтрокаТабличнойЧасти.ДатаПроизводства);
	//			СтруктураДанные.Вставить("Характеристика"	, ?(СтрокаТабличнойЧасти.Номенклатура.НеВедетсяУчетПоХарактеристикам, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), СтрокаТабличнойЧасти.Характеристика));
	//			
	//			СтруктураДанные = ПолучитьДанныеНоменклатура(СтруктураДанные, РасхОрдерОбъект.Склад);
	//			
	//			СтрокаТабличнойЧасти.Характеристика 	= СтруктураДанные.Характеристика;
	//			СтрокаТабличнойЧасти.ДатаПроизводства 	= СтруктураДанные.ДатаПроизводства;
	//			СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков;
	//			СтрокаТабличнойЧасти.Количество 		= СтрокаНоменклатура.Количество;
	//		КонецЦикла;
	//		
	//		
	//		РасхОрдерОбъект.Товары.Сортировать("Номенклатура");
	//		РасхОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		
	//	КонецЕсли;
	//		
	//КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьРасходникиПоВыделеннымСтрокам(Команда)
	
	ДатаРаспределения = ТекущаяДата() + 86400;
	Если НЕ ВвестиДату(ДатаРаспределения, "Укажите дату отгрузки складом", ЧастиДаты.Дата) Тогда
		Возврат;
	КонецЕсли;	
	СоздатьДокументы(ДатаРаспределения);
	ПрочитатьДанныеНаСервере();
	Элементы.Группа2.ТекущаяСтраница = Элементы.ГруппаОтгрузки;
	//ОткрытьФорму("Документ.РасходныйОрдерСклад.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(ДокументыЗаявки.НайтиПоИдентификатору(ВыбраннаяСтрока).Заявка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОтгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(ДокументыОтгрузки.НайтиПоИдентификатору(ВыбраннаяСтрока).Ордер);
	
КонецПроцедуры

&НаСервере
Функция РаспечататьРасходныеНаСервере()
	
	ТабДокумент = Новый ТабличныйДокумент();
	//АК БЕЛН 26.04.17+
	ТабДокумент.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабДокумент.РазмерКолонтитулаСверху 	= 0;
	ТабДокумент.ПолеСверху 	= 5;
	ТабДокумент.ПолеСнизу 	= 5;
	ТабДокумент.ПолеСлева 	= 5;
	ТабДокумент.ПолеСправа 	= 5;
	ТабДокумент.АвтоМасштаб	= Истина;
	//АК БЕЛН 26.04.17-
	
	Для Каждого СтрокаВыделенная Из Элементы.ДокументыОтгрузки.ВыделенныеСтроки Цикл
		ТекДанные = ДокументыОтгрузки.НайтиПоИдентификатору(СтрокаВыделенная);
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдерРеклМатериалы_Товары(ТекДанные.Ордер);
		ТабДокумент.Вывести(ТабДок);
	КонецЦикла;	
	
	Возврат ТабДокумент;
	
КонецФункции	

&НаКлиенте
Процедура РаспечататьОрдера(Команда)
	
	ТабДок = РаспечататьРасходныеНаСервере();
	//ТабДок.Показать();
	ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	
КонецПроцедуры


//+++АК MIND 2017.10.24 
&НаКлиенте
Процедура ПечатьСтикеровДляМассовойОтгрузки(Команда)
	
	ТекДанные = Элементы.ДокументыЗаявки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабДок = ПолучитьТабДокЭтикеток(ТекДанные.Заявка);
	Если ТабДок.ВысотаТаблицы > 0 Тогда
		//ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры
//---АК MIND

//+++АК MIND 2017.10.24
Функция ПолучитьТабДокЭтикеток(ДокЗаявка)
	
	Возврат Обработки.РекламнаяПродукцияДляМагазинов.СформироватьНаклейкиДляМассовойОтгрузки(ДокЗаявка);
	
КонецФункции	
//---АК MIND 

//+++АК sils 18.05.2018 ИП-00018407
&НаСервере
Процедура ВывестиДерево(ТекСклад = Неопределено)
	Если ТекСклад = Неопределено Тогда
		ТекСклад = Склад;
	КонецЕсли;
	ТекДерево = ДеревоТоваров.ПолучитьЭлементы();
	ТекДерево.Очистить();
	
	Для каждого стр из Объект.Товары Цикл
		флВывести = Истина;
		Если ТекСклад <> Справочники.Склады.ПустаяСсылка() Тогда
			СтрокиВТоварах = Объект.ТоварыПоСкладам.НайтиСтроки(Новый Структура("Номенклатура, Склад", стр.Номенклатура, ТекСклад));
			Если СтрокиВТоварах.Количество() = 0 Тогда
				флВывести = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если не флВывести Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДоб = ТекДерево.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб, стр);
		
		СтрокиВТоварах = Объект.ТоварыПоСкладам.НайтиСтроки(Новый Структура("Номенклатура", стр.Номенклатура));
		Если СтрокиВТоварах.Количество() = 1 Тогда
			СтрокаДоб.Склад = СтрокиВТоварах[0].Склад;
		Иначе
			Для каждого стр1 из СтрокиВТоварах Цикл
				Если стр1.Склад = Справочники.Склады.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДоб1 = СтрокаДоб.ПолучитьЭлементы().Добавить();
				СтрокаДоб1.Склад = стр1.Склад;
				СтрокаДоб1.ОтгруженоСоСклада = стр1.ОтгруженоСоСклада;
				СтрокаДоб1.ОстатокНаСкладе = стр1.ОстатокНаСкладе;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//+++АК sils 18.05.2018 ИП-00018407
&НаКлиенте
Процедура ДеревоТоваровПриАктивизацииСтроки(Элемент)
	ТекСтр = Элементы.ДеревоТоваров.ТекущиеДанные;
	Попытка
		ТекРодитель = ТекСтр.ПолучитьРодителя();
	Исключение
		ТекРодитель = Неопределено;
	КонецПопытки;
	Если ТекРодитель <> Неопределено Тогда
		ДеревоТоваровПриАктивизацииСтрокиНаСервере(ТекРодитель.Номенклатура);
	Иначе
		ДеревоТоваровПриАктивизацииСтрокиНаСервере(ТекСтр.Номенклатура);
	КонецЕсли;
КонецПроцедуры

//+++АК sils 18.05.2018 ИП-00018407
&НаСервере
Процедура ДеревоТоваровПриАктивизацииСтрокиНаСервере(ТекНоменклатура)
	РасшифровкаСтроки.Очистить();
	СтрокиПоТовару = ЗаказаноМагазинами.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
	Для Каждого СтрокаПоТовару Из СтрокиПоТовару Цикл
		СтрокаДоб = РасшифровкаСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб, СтрокаПоТовару);
		СтрокаДоб.Недогружено = СтрокаДоб.Заказано - СтрокаДоб.Отгружено;
	КонецЦикла;	
КонецПроцедуры

//+++АК sils 18.05.2018 ИП-00018407
&НаКлиенте
Процедура СкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВывестиДерево(ВыбранноеЗначение);
КонецПроцедуры

//+++АК sils 18.05.2018 ИП-00018407
&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	ВывестиДерево(Справочники.Склады.ПустаяСсылка());
КонецПроцедуры





