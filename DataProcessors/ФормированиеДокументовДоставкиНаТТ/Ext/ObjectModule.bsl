
//+++АК sole 2018.06.15 ИП-00018944
Функция ПолучитьРезультатЗапроса()
// Основная выборка.

	Перем Запрос;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
"ВЫБРАТЬ
|	МаршрутыТорговыеТочки.Ссылка КАК Маршрут,
|	МаршрутыТорговыеТочки.Ссылка.Организация КАК Организация,
|	МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
|	МаршрутыТорговыеТочки.Ссылка.Перевозчик КАК Перевозчик,
|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница,
|	ЕСТЬNULL(СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.Ставка, 0) КАК Стоимость,
//+++АК PISH 2018.11.12 ИП-00020043
|	ВЫБОР
|		КОГДА МаршрутыТорговыеТочки.Ссылка.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
|			ТОГДА ЕСТЬNULL(МаршрутыТорговыеТочки.Ссылка.ДоговорКонтрагента.ВариантРасчетаНДС, ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.ПустаяСсылка))
|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.ПустаяСсылка)
|	КОНЕЦ КАК ВариантРасчетаНДС,
//---АК PISH
|	ЕСТЬNULL(СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
|	ЕСТЬNULL(ВодителиПоМаршруту.Водитель, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.ПустаяСсылка)) КАК Водитель,
|	ЕСТЬNULL(ВодителиПоМаршруту.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль
|ИЗ
|	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(&ДатаНачала, ) КАК СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних
|		ПО (СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.Маршрут = МаршрутыТорговыеТочки.Ссылка)
|			И (СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.ТТ = МаршрутыТорговыеТочки.СтруктурнаяЕдиница)
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаНачала, ) КАК ВодителиПоМаршруту
|		ПО (ВодителиПоМаршруту.Маршрут = МаршрутыТорговыеТочки.Ссылка)
|ГДЕ
|	НЕ МаршрутыТорговыеТочки.Ссылка.ПометкаУдаления
|	И (&Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
|			ИЛИ МаршрутыТорговыеТочки.Ссылка.Перевозчик = &Перевозчик)
|	И (&НеФильтроватьПоСпискуМаршрутов
|			ИЛИ МаршрутыТорговыеТочки.Ссылка В (&СписокМаршрутов))
|
|УПОРЯДОЧИТЬ ПО
|	МаршрутыТорговыеТочки.Ссылка";	
	
	Запрос.УстановитьПараметр("Перевозчик"	, ЭтотОбъект.Перевозчик);
	Запрос.УстановитьПараметр("ДатаНачала"	, ЭтотОбъект.ДатаСоздания);
	
	//+++АК sole 2018.08.02 ИП-00019378
	Если ЭтотОбъект.СтруктурнаяЕдиница.Пустая() Тогда
		НеФильтроватьПоСпискуМаршрутов = Истина;
		СписокМаршрутов = Новый СписокЗначений();
	Иначе
		НеФильтроватьПоСпискуМаршрутов = Ложь;
		СписокМаршрутов = ПолучитьСписокМаршрутовДляСтруктурнойЕдиницы();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НеФильтроватьПоСпискуМаршрутов", НеФильтроватьПоСпискуМаршрутов);
	Запрос.УстановитьПараметр("СписокМаршрутов", СписокМаршрутов);
	//---АК sole 2018.08.02 ИП-00019378
	
	Возврат Запрос.Выполнить();
	
КонецФункции


// Проверяет на наличие уже созданных в заданный день документов "Маршрутный лист" (доставка на ТТ).
//
// Возврат:
//   Массив ссылок на документы.
//
Функция ПолучитьСозданныеДокументы() Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	//+++АК sole 2018.06.27 ИП-00018321.05
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, ЭтотОбъект.ДатаСоздания);
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(ЭтотОбъект.ДатаСоздания));
	Запрос.УстановитьПараметр("Перевозчик"			, ЭтотОбъект.Перевозчик);
	Запрос.УстановитьПараметр("ПричинаПеревозки"	, ЭтотОбъект.ПричинаПеревозки);
	
	//+++АК sole 2018.08.02 ИП-00019378
	Если ЭтотОбъект.СтруктурнаяЕдиница.Пустая() Тогда
		НеФильтроватьПоСпискуМаршрутов = Истина;
		СписокМаршрутов = Новый СписокЗначений();
	Иначе
		НеФильтроватьПоСпискуМаршрутов = Ложь;
		СписокМаршрутов = ПолучитьСписокМаршрутовДляСтруктурнойЕдиницы();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НеФильтроватьПоСпискуМаршрутов", НеФильтроватьПоСпискуМаршрутов);
	Запрос.УстановитьПараметр("СписокМаршрутов", СписокМаршрутов);
	//---АК sole 2018.08.02 ИП-00019378
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутныйЛист.Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаТТ)
	|	И НЕ МаршрутныйЛист.ПометкаУдаления
	|	И (
	|      		&НеФильтроватьПоСпискуМаршрутов		
	|       ИЛИ МаршрутныйЛист.Маршрут В (&СписокМаршрутов)
	|	  )
	|	И (
	|			МаршрутныйЛист.Перевозчик = &Перевозчик
	|		ИЛИ &Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	  )
	|	И (
	|		(
	|				&ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	|	      	И	МаршрутныйЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
	|		)
	|       ИЛИ МаршрутныйЛист.ПричинаПеревозки = &ПричинаПеревозки
	|	  )";
	//---АК sole 2018.06.27 ИП-00018321.05
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Удаляет документы, полученные в результате запроса.
//
// Параметры:
// 	 МассивСсылок - Массив ссылок на документы.
//
Процедура УдалитьСуществующиеДокументы(МассивСсылок, ВыводитьСообщения = Истина) Экспорт
	
	Перем ОбъектДокумента;
	
	Для Каждого ЭлементМассива Из МассивСсылок Цикл
		ОбъектДокумента = ЭлементМассива.ПолучитьОбъект();
		Попытка
			ОбъектДокумента.УстановитьПометкуУдаления(Истина);
			Если ВыводитьСообщения = Истина Тогда
				Сообщить("Помечен на удаление документ """ + ОбъектДокумента + """");
			КонецЕсли;
		Исключение
			Если ВыводитьСообщения = Истина Тогда
				Сообщить("Не удалось пометить на удаление документ """ + ОбъектДокумента + """" + ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.06.27 ИП-00018321.05
Процедура СоздатьДокументы(ВыводитьСообщения = Истина) Экспорт
	
	Если ЭтотОбъект.ПричинаПеревозки = Перечисления.ПричиныПеревозки.ОсновнаяПоставка Тогда
		СоздатьДокументы_ОсновнаяПоставка(ВыводитьСообщения);
	Иначе
		СоздатьДокументы_ДополнительнаяПоставка(ВыводитьСообщения);
	КонецЕсли;	
	
КонецПроцедуры
	
//+++АК sole 2018.06.15 ИП-00018944
Процедура СоздатьДокументы_ОсновнаяПоставка(ВыводитьСообщения) 
	
	мДокументы = Документы.МаршрутныйЛист;
	мВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
	мГруппаДоставки = Перечисления.ГруппыДоставкиНоменклатуры.Прочее;
	
	// основная выборка данных
	РезультатЗапроса = ПолучитьРезультатЗапроса();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПревМаршрут = Неопределено;
	ОбъектДокумента = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Маршрут <> ПревМаршрут Тогда
			
			ПревМаршрут = Выборка.Маршрут;			
			
			ЗаписатьМаршрут(ОбъектДокумента, ВыводитьСообщения, РежимЗаписиДокумента.Запись);
			
			ОбъектДокумента = мДокументы.СоздатьДокумент();
	        ЗаполнитьЗначенияСвойств(ОбъектДокумента, Выборка);
			ОбъектДокумента.Автор = ПараметрыСеанса.ТекущийПользователь;
			ОбъектДокумента.Дата = ЭтотОбъект.ДатаСоздания;
			ОбъектДокумента.ВидПеревозки = мВидПеревозки;
			//+++АК sole 2018.06.27 ИП-00018321.05
			ОбъектДокумента.ПричинаПеревозки = ЭтотОбъект.ПричинаПеревозки;
			//---АК sole 2018.06.27 ИП-00018321.05
		КонецЕсли;
		
		НоваяСтрока = ОбъектДокумента.ТорговыеТочки.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 			= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.ГруппаДоставкиНоменклатуры 	= мГруппаДоставки;
		НоваяСтрока.Стоимость 					= Выборка.Стоимость;
	КонецЦикла;
	
	ЗаписатьМаршрут(ОбъектДокумента, ВыводитьСообщения, РежимЗаписиДокумента.Запись);
	
	#Область АК_ОтключенныйКод
	//РезультатыЗапроса = ПолучитьРезультатыЗапроса();
	//
	//
	//// поставщики, для которых не найдены маршруты
	//РезультатЗапроса = РезультатыЗапроса[7];
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если ВыводитьСообщения = Истина Тогда
	//		Сообщить("Для поставщика """ + Строка(Выборка.Поставщик) + """ не найден маршрут!");
	//	КонецЕсли;
	//КонецЦикла;	
	//
	//// маршруты, все поставщики которых поставляли в этот день, упорядоченные по количеству
	//РезультатЗапроса1 = РезультатыЗапроса[8];

	//
	////// данные из маршрутов для заполнения документов
	////РезультатЗапроса2 = РезультатыЗапроса[9];
	////ТаблицаКЗаполнению = РезультатЗапроса2.Выгрузить();
	//
	//
	//// склады, куда поставили товар поставщики в приходных ордерах
	//РезультатЗапроса3 = РезультатыЗапроса[9];
	//ТаблицаСкладовИПоставщиков = РезультатЗапроса3.Выгрузить();
	//МассивСтрокТаблицыСкладовИПоставщиков = Новый Массив;
	//
	//
	//// приходники от поставщиков, указанных в маршрутах
	//ТаблицаПриходников = РезультатыЗапроса[10].Выгрузить();
	//СтруктураОтбораПриходников 	= Новый Структура("Поставщик, СтруктурнаяЕдиница");
	//ТаблицаДатРасходаИПриходников = ТаблицаПриходников.СкопироватьКолонки("ДатаРасхода, Ссылка");
	//СтруктураОтбораДатыРасхода 	= Новый Структура("ДатаРасхода");
	//
	//
	//// тарифы на доставку
	//ТаблицаТарифовНаДоставку = РезультатыЗапроса[12].Выгрузить();
	//
	//
	//н = 0;
	//Выборка = РезультатЗапроса1.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	н = н + 1;
	//	ТекМаршрут = Выборка.Маршрут;
	//	ТекТЧПоставщики = ТекМаршрут.Поставщики;
	//	ТекТЧСклады 	= ТекМаршрут.ДоставкаНаСклад;
	//	ТекТЧТовары		= ТекМаршрут.Товары;
	//	ТекПеревозчик 	= ТекМаршрут.Перевозчик;
	//	
	//	// проверка на склады поставщиков
	//	ПодходящийМаршрут 	= Истина;
	//	мДвигатьсяДальше	= Ложь;
	//	
	//	МассивПриходников	= Новый Массив;
	//	Для Каждого СтрокаСкладовИПоставщиков Из ТаблицаСкладовИПоставщиков Цикл
	//		СтрокаСклада 		= ТекТЧСклады.Найти(СтрокаСкладовИПоставщиков.СтруктурнаяЕдиница, "Склад");
	//		СтрокаПоставщика 	= ТекТЧПоставщики.Найти(СтрокаСкладовИПоставщиков.Поставщик, "Поставщик");
	//		Если (НЕ СтрокаСклада = Неопределено)
	//				И НЕ СтрокаПоставщика = Неопределено Тогда
	//			мДвигатьсяДальше = Истина;
	//			МассивСтрокТаблицыСкладовИПоставщиков.Добавить(СтрокаСкладовИПоставщиков);
	//			МассивПоставщиков.Добавить(СтрокаСкладовИПоставщиков.Поставщик);
	//			МассивСкладов.Добавить(СтрокаСкладовИПоставщиков.СтруктурнаяЕдиница);
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если мДвигатьсяДальше Тогда
	//		Для Каждого СтрокаТЧ Из ТекТЧПоставщики Цикл
	//			Если МассивПоставщиков.Найти(СтрокаТЧ.Поставщик) = Неопределено Тогда
	//				ПодходящийМаршрут = Ложь;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		Если НЕ ТекМаршрут.ЛюбойИзСкладов Тогда
	//			Для Каждого СтрокаТЧ Из ТекТЧСклады Цикл
	//				Если МассивСкладов.Найти(СтрокаТЧ.Склад) = Неопределено Тогда
	//					ПодходящийМаршрут = Ложь;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//		Если ПодходящийМаршрут Тогда
	//			Для Каждого СтрокаСкладовИПоставщиков Из МассивСтрокТаблицыСкладовИПоставщиков Цикл
	//				СтруктураОтбораПриходников.Поставщик 			= СтрокаСкладовИПоставщиков.Поставщик;
	//				СтруктураОтбораПриходников.СтруктурнаяЕдиница 	= СтрокаСкладовИПоставщиков.СтруктурнаяЕдиница;
	//				СтрокиПриходников = ТаблицаПриходников.НайтиСтроки(СтруктураОтбораПриходников);
	//				Для Каждого СтрокаПриходников Из СтрокиПриходников Цикл
	//					//МассивПриходников.Добавить(СтрокаПриходников.Ссылка);
	//					НоваяСтрока = ТаблицаДатРасходаИПриходников.Добавить();
	//					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриходников);
	//				КонецЦикла;
	//				
	//				ТаблицаСкладовИПоставщиков.Удалить(СтрокаСкладовИПоставщиков);
	//			КонецЦикла;
	//		КонецЕсли;
	//		МассивСтрокТаблицыСкладовИПоставщиков.Очистить();
	//		МассивПоставщиков.Очистить();
	//		МассивСкладов.Очистить();
	//	Иначе
	//		ПодходящийМаршрут = Ложь;
	//	КонецЕсли;
	//	Если НЕ ПодходящийМаршрут Тогда
	//		Продолжить;
	//	КонецЕсли;
	//
	//	
	//	СтруктураОтбора.Маршрут = ТекМаршрут;
	//	
	//	СтрокиТарифов = ТаблицаТарифовНаДоставку.НайтиСтроки(СтруктураОтбора);
	//	
	//	ВремТаблица = ТаблицаДатРасходаИПриходников.Скопировать(, "ДатаРасхода");
	//	ВремТаблица.Свернуть("ДатаРасхода");
	//	ВремТаблица.Сортировать("ДатаРасхода");
	//	
	//	Для Каждого СтрокаДаты Из ВремТаблица Цикл
	//		
	//		ОбъектДокумента = мДокументы.СоздатьДокумент();
	//		
	//		ОбъектДокумента.Автор 		= ПараметрыСеанса.ТекущийПользователь;
	//		ОбъектДокумента.Дата 		= КонецДня(СтрокаДаты.ДатаРасхода);//КонецДня(ЭтотОбъект.ДатаСоздания);
	//		ОбъектДокумента.Организация = Выборка.Организация;
	//		
	//		ОбъектДокумента.Маршрут		= ТекМаршрут;
	//		
	//		ВесВПриходниках = 0;
	//			
	//		ТЧПоставщикиДокумента 	= ОбъектДокумента.Поставщики;
	//		Для Каждого СтрокаТЧ Из ТекТЧПоставщики Цикл
	//			НоваяСтрока = ТЧПоставщикиДокумента.Добавить();
	//			НоваяСтрока.Поставщик = СтрокаТЧ.Поставщик;
	//		КонецЦикла;	
	//		
	//		ТЧПриходники = ОбъектДокумента.ПриходныеОрдера;
	//		СтруктураОтбораДатыРасхода.ДатаРасхода = СтрокаДаты.ДатаРасхода;
	//		СтрокиПриходныхОрдеров = ТаблицаДатРасходаИПриходников.НайтиСтроки(СтруктураОтбораДатыРасхода);
	//		Для Каждого СтрокаПриходныхОрдеров Из СтрокиПриходныхОрдеров Цикл
	//			ТекПриходник = СтрокаПриходныхОрдеров.Ссылка;
	//			ТекТоварыПриходника = ТекПриходник.Товары;
	//			Если ТекТоварыПриходника.Количество() = 0 Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			//
	//			Если ТекТЧТовары.Количество() > 0 Тогда
	//				мДобавлять = Ложь;
	//				Для Каждого СтрокаТЧ Из ТекТоварыПриходника Цикл
	//					Если НЕ ТекТЧТовары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура") = Неопределено Тогда
	//						мДобавлять = Истина;
	//						Продолжить;
	//					КонецЕсли;
	//				КонецЦикла;
	//				Если НЕ мДобавлять Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				//мНеДобавлять = Ложь;
	//				//Для Каждого СтрокаТЧ Из ТекТоварыПриходника Цикл
	//				//	Если ТекТЧТовары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура") = Неопределено Тогда
	//				//		мНеДобавлять = Истина;
	//				//		Продолжить;
	//				//	КонецЕсли;
	//				//КонецЦикла;
	//				//Если мНеДобавлять Тогда
	//				//	Продолжить;
	//				//КонецЕсли;
	//			КонецЕсли;
	//			//
	//			НоваяСтрока = ТЧПриходники.Добавить();
	//			НоваяСтрока.ПриходныйОрдер = ТекПриходник;
	//			Для Каждого СтрокаТЧ Из ТекТоварыПриходника Цикл
	//				ВесВПриходниках = ВесВПриходниках + СтрокаТЧ.ЕдиницаИзмерения.Вес * СтрокаТЧ.Количество;
	//			КонецЦикла;
	//		КонецЦикла;
	//		
	//		Если ТЧПриходники.Количество() = 0 Тогда // скорее всего, это приходники на другой товар
	//			ОбъектДокумента = Неопределено; // забота о памяти приложения 1с
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Для Каждого СтрокаТарифа Из СтрокиТарифов Цикл
	//			Если НЕ ВесВПриходниках < СтрокаТарифа.ВесОт Тогда
	//				//ЗаполнитьЗначенияСвойств(ОбъектДокумента, СтрокаТарифа,, "Маршрут");
	//				ОбъектДокумента.Сумма 				= СтрокаТарифа.Сумма 	* ?(СтрокаТарифа.ЦенаЗаКг, ВесВПриходниках, 1);
	//				ОбъектДокумента.СуммаНДС 			= СтрокаТарифа.СуммаНДС * ?(СтрокаТарифа.ЦенаЗаКг, ВесВПриходниках, 1);
	//				ОбъектДокумента.ВариантРасчетаНДС 	= СтрокаТарифа.ВариантРасчетаНДС;
	//				ОбъектДокумента.СтавкаНДС 			= СтрокаТарифа.СтавкаНДС;
	//				ОбъектДокумента.Перевозчик 			= СтрокаТарифа.Перевозчик;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//			
	//		Попытка
	//			//ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	//			ОбъектДокумента.Записать();
	//			Если ВыводитьСообщения = Истина Тогда
	//				//Сообщить("Записан и проведен документ """ + ОбъектДокумента + """");
	//				Сообщить("Создан документ """ + ОбъектДокумента + """");
	//			КонецЕсли;
	//		Исключение
	//			Если ВыводитьСообщения = Истина Тогда
	//				//Сообщить("Не удалось записать и провести документ " + ОбъектДокумента);
	//				Сообщить("Не удалось записать документ " + ОбъектДокумента);
	//			КонецЕсли;
	//		КонецПопытки;
	//	КонецЦикла;
	//	
	//	ТаблицаДатРасходаИПриходников.Очистить();
	//	
	//КонецЦикла;
	#КонецОбласти
	
КонецПроцедуры

//+++АК sole 2018.06.15 ИП-00018944
Процедура ЗаписатьМаршрут(ОбъектДокумента, ВыводитьСообщения, РежимЗаписи)
	
	Если ОбъектДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		ОбъектДокумента.Записать(РежимЗаписи);
		Если ВыводитьСообщения = Истина Тогда
			Сообщить("Создан документ """ + ОбъектДокумента + """");
		КонецЕсли;
	Исключение
		Если ВыводитьСообщения = Истина Тогда
			Сообщить("Не удалось записать документ " + ОбъектДокумента);
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры 

//+++АК sole 2018.06.27 ИП-00018321.05
Процедура СоздатьДокументы_ДополнительнаяПоставка(ВыводитьСообщения)
	
	РезультатЗапроса = ПолучитьРезультатЗапроса_ДополнительнаяПоставка();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мДокументы = Документы.МаршрутныйЛист;
	мВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
	мГруппаДоставки = Перечисления.ГруппыДоставкиНоменклатуры.Прочее;
	
	ПревМаршрут = Неопределено;
	ПревОрганизация = Неопределено;
	ПревПричинаПеревозки = Неопределено; 
	ПревСтруктурнаяЕдиница = Неопределено;
	ОбъектДокумента = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если 
				Выборка.Маршрут <> ПревМаршрут
			ИЛИ	Выборка.Организация <> ПревОрганизация
			ИЛИ Выборка.ПричинаПеревозки <> ПревПричинаПеревозки
		Тогда
			
			ПревМаршрут = Выборка.Маршрут;			
			ПревОрганизация = Выборка.Организация;
			ПревПричинаПеревозки = Выборка.ПричинаПеревозки ; 
			ПревСтруктурнаяЕдиница = Неопределено;
			
			ЗаписатьМаршрут(ОбъектДокумента, ВыводитьСообщения, РежимЗаписиДокумента.Проведение);
			
			ОбъектДокумента = мДокументы.СоздатьДокумент();
	        ЗаполнитьЗначенияСвойств(ОбъектДокумента, Выборка);
			ОбъектДокумента.Автор = ПараметрыСеанса.ТекущийПользователь;
			ОбъектДокумента.Дата = ЭтотОбъект.ДатаСоздания;
			ОбъектДокумента.ВидПеревозки = мВидПеревозки;
		КонецЕсли;
		
		Если Выборка.СтруктурнаяЕдиница <> ПревСтруктурнаяЕдиница Тогда
			
			ПревСтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			
			НоваяСтрока = ОбъектДокумента.ТорговыеТочки.Добавить();
			НоваяСтрока.СтруктурнаяЕдиница 			= Выборка.СтруктурнаяЕдиница;
			НоваяСтрока.ГруппаДоставкиНоменклатуры 	= мГруппаДоставки;
			НоваяСтрока.Стоимость 					= 0;
		КонецЕсли;
		
		НСтр = ОбъектДокумента.РасходныеОрдера.Добавить();
		НСтр.Документ = Выборка.РасходныйОрдерСклад;
		
	КонецЦикла;
	
	ЗаписатьМаршрут(ОбъектДокумента, ВыводитьСообщения, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

//+++АК sole 2018.06.27 ИП-00018321.05
Функция ПолучитьРезультатЗапроса_ДополнительнаяПоставка()
	
	Перем Запрос;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ
|	РасходныйОрдерСклад.Ссылка,
|	ВЫБОР
|		КОГДА РасходныйОрдерСклад.Склад.ГоловнойСкладРодитель = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
|			ТОГДА РасходныйОрдерСклад.Склад.Владелец
|		ИНАЧЕ РасходныйОрдерСклад.Склад.ГоловнойСкладРодитель
|	КОНЕЦ КАК СтруктурноеПодразделение,
|	РасходныйОрдерСклад.Получатель КАК СтруктурнаяЕдиница,
|	РасходныйОрдерСклад.Организация,
|	РасходныйОрдерСклад.ПричинаПеревозки
|ПОМЕСТИТЬ втСписокРасходныхОрдеров
|ИЗ
|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
|		ПО (РасходныйОрдерСкладТовары.Ссылка = РасходныйОрдерСклад.Ссылка)
|ГДЕ
|	РасходныйОрдерСклад.Дата >= &ДатаНачала
|	И РасходныйОрдерСклад.Дата < &ДатаОкончания
|	И НЕ РасходныйОрдерСклад.ПометкаУдаления
|	И РасходныйОрдерСклад.Проведен
|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
|	И РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
|	И РасходныйОрдерСклад.ПричинаПеревозки <> ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
|	И РасходныйОрдерСклад.ПричинаПеревозки <> ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
|	И (&ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
|			ИЛИ РасходныйОрдерСклад.ПричинаПеревозки = &ПричинаПеревозки)
|
|СГРУППИРОВАТЬ ПО
|	РасходныйОрдерСклад.Ссылка,
|	РасходныйОрдерСклад.Получатель,
|	РасходныйОрдерСклад.Организация,
|	РасходныйОрдерСклад.ПричинаПеревозки,
|	ВЫБОР
|		КОГДА РасходныйОрдерСклад.Склад.ГоловнойСкладРодитель = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
|			ТОГДА РасходныйОрдерСклад.Склад.Владелец
|		ИНАЧЕ РасходныйОрдерСклад.Склад.ГоловнойСкладРодитель
|	КОНЕЦ
|
|ИМЕЮЩИЕ
|	СУММА(РасходныйОрдерСкладТовары.Количество) <> 0
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	втСписокРасходныхОрдеров.Организация,
|	втСписокРасходныхОрдеров.ПричинаПеревозки,
|	МаршрутыТорговыеТочки.Ссылка КАК Маршрут,
|	втСписокРасходныхОрдеров.СтруктурнаяЕдиница,
|	втСписокРасходныхОрдеров.СтруктурноеПодразделение,
|	МаршрутыТорговыеТочки.Ссылка.Перевозчик КАК Перевозчик,
//+++АК PISH 2018.11.12 ИП-00020043
|	ВЫБОР
|		КОГДА МаршрутыТорговыеТочки.Ссылка.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
|			ТОГДА ЕСТЬNULL(МаршрутыТорговыеТочки.Ссылка.ДоговорКонтрагента.ВариантРасчетаНДС, ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.ПустаяСсылка))
|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.ПустаяСсылка)
|	КОНЕЦ КАК ВариантРасчетаНДС,
//---АК PISH
|	ЕСТЬNULL(СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
|	ЕСТЬNULL(ВодителиПоМаршруту.Водитель, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.ПустаяСсылка)) КАК Водитель,
|	ЕСТЬNULL(ВодителиПоМаршруту.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль,
|	втСписокРасходныхОрдеров.Ссылка КАК РасходныйОрдерСклад
|ИЗ
|	втСписокРасходныхОрдеров КАК втСписокРасходныхОрдеров
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
|		ПО (МаршрутыТорговыеТочки.СтруктурнаяЕдиница = втСписокРасходныхОрдеров.СтруктурнаяЕдиница)
|			И (МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение = втСписокРасходныхОрдеров.СтруктурноеПодразделение)
|			И (МаршрутыТорговыеТочки.Ссылка.Организация = втСписокРасходныхОрдеров.Организация)
|			И (НЕ МаршрутыТорговыеТочки.Ссылка.ПометкаУдаления)
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(&ДатаНачала, ) КАК СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних
|		ПО (СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.Маршрут = МаршрутыТорговыеТочки.Ссылка)
|			И (СтоимостьУслугПоДоставкеТовараНаТТСрезПоследних.ТТ = втСписокРасходныхОрдеров.СтруктурнаяЕдиница)
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаНачала, ) КАК ВодителиПоМаршруту
|		ПО (ВодителиПоМаршруту.Маршрут = МаршрутыТорговыеТочки.Ссылка)
|ГДЕ
|	(&Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
|			ИЛИ МаршрутыТорговыеТочки.Ссылка.Перевозчик = &Перевозчик)
|	И (&НеФильтроватьПоСпискуМаршрутов
|			ИЛИ МаршрутыТорговыеТочки.Ссылка В (&СписокМаршрутов))
|
|УПОРЯДОЧИТЬ ПО
|	втСписокРасходныхОрдеров.Организация,
|	втСписокРасходныхОрдеров.ПричинаПеревозки,
|	МаршрутыТорговыеТочки.Ссылка,
|	втСписокРасходныхОрдеров.СтруктурнаяЕдиница";
	Запрос.Параметры.Вставить("ДатаНачала", ЭтотОбъект.ДатаСоздания);
	Запрос.Параметры.Вставить("ДатаОкончания", КонецДня(ЭтотОбъект.ДатаСоздания) + 1);
	Запрос.Параметры.Вставить("ПричинаПеревозки", ЭтотОбъект.ПричинаПеревозки);
	Запрос.Параметры.Вставить("Перевозчик", ЭтотОбъект.Перевозчик);
	
	//+++АК sole 2018.08.02 ИП-00019378
	Если ЭтотОбъект.СтруктурнаяЕдиница.Пустая() Тогда
		НеФильтроватьПоСпискуМаршрутов = Истина;
		СписокМаршрутов = Новый СписокЗначений();
	Иначе
		НеФильтроватьПоСпискуМаршрутов = Ложь;
		СписокМаршрутов = ПолучитьСписокМаршрутовДляСтруктурнойЕдиницы();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НеФильтроватьПоСпискуМаршрутов", НеФильтроватьПоСпискуМаршрутов);
	Запрос.УстановитьПараметр("СписокМаршрутов", СписокМаршрутов);
	//---АК sole 2018.08.02 ИП-00019378
	
	Возврат Запрос.Выполнить();
	
КонецФункции

//+++АК sole 2018.08.02 ИП-00019378
Функция ПолучитьСписокМаршрутовДляСтруктурнойЕдиницы()
	
	Перем Запрос;
	
	Запрос = Новый Запрос();

	Запрос.Текст =
"ВЫБРАТЬ
|	МаршрутыТорговыеТочки.Ссылка КАК Маршрут
|
|ИЗ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
|ГДЕ 
|		НЕ МаршрутыТорговыеТочки.Ссылка.ПометкаУдаления
|	И	МаршрутыТорговыеТочки.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
|
|СГРУППИРОВАТЬ ПО МаршрутыТорговыеТочки.Ссылка
|";

	Запрос.УстановитьПараметр("СтруктурнаяЕдиница" , ЭтотОбъект.СтруктурнаяЕдиница);
	
	СписокМаршрутов = Новый СписокЗначений();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокМаршрутов.Добавить(Выборка.Маршрут);
	КонецЦикла;
	
	Возврат СписокМаршрутов;
КонецФункции

//
	