
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата = НачалоДня(ТекущаяДата()+60*60*24);
	УстановитьУсловноеОформление();
	ТекущийПользователь =  ПараметрыСеанса.ТекущийПользователь;
	
	ПрименениеФильтра = "УФК или 1Cont";
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление()
		
	ДоступнаСтопОплата = ЕстьПравоСтопОплаты();	
	Если ДоступнаСтопОплата Тогда
		Элементы.НадписьСтопОплата.Заголовок = "Доступна установка стоп-оплаты";		
	Иначе	
		Элементы.НадписьСтопОплата.Заголовок = "Не доступна установка стоп-оплаты";
	КонецЕсли;	
	Элементы.ВыполнитьРассылку.Доступность = ДоступнаСтопОплата;	
	Элементы.УстановитьЗаявкуНаСтопОплату.Доступность = ДоступнаСтопОплата;	
	//СформироватьСтрокуОтбор();	
	
	ЕстьПравоФинМенеджера = ДоступнаСтопОплата; //+++АК SHEP 2018.01.29 ИП-00017714
	
КонецПроцедуры	


Функция ЕстьПравоСтопОплаты()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Выборка = РегистрыСведений.РуководителиСтопОплаты.Выбрать(Отбор);
	Если Выборка.Следующий() Тогда
		Если Выборка.ФинМенеджер Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//+++АК SHEP 2018.01.24 ИП-00017714
//Процедура ОбновитьТаблицу()
Процедура ОбновитьТаблицу(ОбновлятьФлаг = Истина)
//---АК SHEP 2018.01.24

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ОсновнойБухгалтерПокупателя,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ОсновнойМенеджерПокупателя,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Рекомендация КАК Рекомендация,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОПроверкеКонтрагентовСрезПоследних.Пояснения, """") КАК СТРОКА(100)) КАК Пояснение,
		|	NULL КАК РекомендацияУФК,
		|	NULL КАК ПоясненияУФК,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ОтветПолучен,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ДатаОтправки,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ЗавершениеСотрудничества,
		|	NULL КАК Файл,
		|	"""" КАК Ответственный,
		|	ЛОЖЬ КАК АвтоУстановка
		|ПОМЕСТИТЬ втРезультат
		|ИЗ
		|	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(
		|			&Дата,
		|			(Контрагент.ОсновнойБухгалтерПокупателя = &ОтборОтветственный
		|				ИЛИ Контрагент.ОсновнойМенеджерПокупателя = &ОтборОтветственный
		|				ИЛИ &ОтборОтветственныйНеУствновлен)
		|				И ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.Сведения1Cont))) КАК СведенияОПроверкеКонтрагентовСрезПоследних
		|ГДЕ
		|	(СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ИЛИ СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ОКОПФ = &ЭтоИП)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ОсновнойБухгалтерПокупателя,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ОсновнойМенеджерПокупателя,
		|	NULL,
		|	NULL,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.РекомендацияВВ,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОПроверкеКонтрагентовСрезПоследних.ПоясненияВВ, """") КАК СТРОКА(100)),
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ОтветПолучен,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ДатаОтправки,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ЗавершениеСотрудничества,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СведенияОПроверкеКонтрагентовСрезПоследних.ИмяФайла, 1, 1) <> """"
		|				ИЛИ ПОДСТРОКА(СведенияОПроверкеКонтрагентовСрезПоследних.ИмяФайла, 1, 1) <> "" ""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Ответственный,
		|	ВЫБОР
		|		КОГДА СведенияОПроверкеКонтрагентовСрезПоследних.Ответственный = ""Авто-Установка""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(
		|			&Дата,
		|			(Контрагент.ОсновнойБухгалтерПокупателя = &ОтборОтветственный
		|				ИЛИ Контрагент.ОсновнойМенеджерПокупателя = &ОтборОтветственный
		|				ИЛИ &ОтборОтветственныйНеУствновлен)
		|				И ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияУФК), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних
		|ГДЕ
		|	(СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ИЛИ СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент.ОКОПФ = &ЭтоИП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезультат.Контрагент,
		|	втРезультат.КонтрагентОсновнойБухгалтерПокупателя,
		|	втРезультат.КонтрагентОсновнойМенеджерПокупателя,
		|	МАКСИМУМ(втРезультат.Рекомендация) КАК Рекомендация,
		|	МАКСИМУМ(втРезультат.Пояснение) КАК Пояснение,
		|	МАКСИМУМ(втРезультат.РекомендацияУФК) КАК РекомендацияУФК,
		|	МАКСИМУМ(втРезультат.ПоясненияУФК) КАК ПоясненияУФК,
		|	МАКСИМУМ(втРезультат.ОтветПолучен) КАК ОтветПолучен,
		|	МАКСИМУМ(втРезультат.ДатаОтправки) КАК ДатаОтправки,
		|	МАКСИМУМ(втРезультат.ЗавершениеСотрудничества) КАК ЗавершениеСотрудничества,
		|	МАКСИМУМ(втРезультат.Файл) КАК Файл,
		|	МАКСИМУМ(втРезультат.Ответственный) КАК Ответственный,
		|	МАКСИМУМ(втРезультат.АвтоУстановка) КАК АвтоУстановка
		|ПОМЕСТИТЬ втРезультатСГруппировкой
		|ИЗ
		|	втРезультат КАК втРезультат
		|
		|СГРУППИРОВАТЬ ПО
		|	втРезультат.Контрагент,
		|	втРезультат.КонтрагентОсновнойБухгалтерПокупателя,
		|	втРезультат.КонтрагентОсновнойМенеджерПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезультатСГруппировкой.Контрагент КАК Контрагент,
		|	втРезультатСГруппировкой.КонтрагентОсновнойБухгалтерПокупателя КАК Бухгалтер,
		|	втРезультатСГруппировкой.КонтрагентОсновнойМенеджерПокупателя КАК Менеджер,
		|	втРезультатСГруппировкой.Рекомендация,
		|	втРезультатСГруппировкой.Пояснение,
		|	ВЫБОР
		|		КОГДА СведенияОСтопОплатеСрезПоследних.СтопОплата
		|				И НЕ СведенияОСтопОплатеСрезПоследних.Подтверждено
		|			ТОГДА ""Заявка на стоп-оплату""
		|		КОГДА СведенияОСтопОплатеСрезПоследних.СтопОплата
		|				И СведенияОСтопОплатеСрезПоследних.Подтверждено
		|			ТОГДА ""Подтверждена стоп-оплата""
		|		КОГДА НЕ СведенияОСтопОплатеСрезПоследних.СтопОплата
		|				И СведенияОСтопОплатеСрезПоследних.Подтверждено
		|			ТОГДА ""Заявка на отмену""
		|		ИНАЧЕ ""Не в стоп оплате""
		|	КОНЕЦ КАК СтопОплата,
		|	НЕ ЕСТЬNULL(СведенияОСтопОплатеСрезПоследних.СтопОплата, ЛОЖЬ) КАК Флаг,
		|	втРезультатСГруппировкой.ПоясненияУФК,
		|	втРезультатСГруппировкой.РекомендацияУФК,
		|	втРезультатСГруппировкой.Контрагент.ИНН КАК ИНН,
		|	втРезультатСГруппировкой.ОтветПолучен,
		|	втРезультатСГруппировкой.ДатаОтправки,
		|	втРезультатСГруппировкой.Контрагент.ВАрхиве КАК ВАрхиве,
		|	втРезультатСГруппировкой.Контрагент.ПометкаУдаления КАК ПометкаУдаления,
		|	втРезультатСГруппировкой.Файл,
		|	втРезультатСГруппировкой.Ответственный,
		|	втРезультатСГруппировкой.АвтоУстановка
		|ПОМЕСТИТЬ втИтоговыйРезультат
		|ИЗ
		|	втРезультатСГруппировкой КАК втРезультатСГруппировкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтопОплате.СрезПоследних(&Дата, ) КАК СведенияОСтопОплатеСрезПоследних
		|		ПО втРезультатСГруппировкой.Контрагент = СведенияОСтопОплатеСрезПоследних.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ПОМЕСТИТЬ ГруппыАренды
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа
		|	И Контрагенты.Ссылка В ИЕРАРХИИ(&ГруппаАренда)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ОсновнойМенеджерПокупателя,
		|	Контрагенты.ОсновнойБухгалтерПокупателя,
		|	ВЫБОР
		|		КОГДА ГруппыАренды.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоАренда,
		|	Контрагенты.ИНН
		|ПОМЕСТИТЬ втКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыАренды КАК ГруппыАренды
		|		ПО Контрагенты.Родитель = ГруппыАренды.Ссылка
		|ГДЕ
		|	(Контрагенты.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ИЛИ Контрагенты.ОКОПФ = &ЭтоИП)
		|	И (Контрагенты.ОсновнойБухгалтерПокупателя = &ОтборОтветственный
		|			ИЛИ Контрагенты.ОсновнойМенеджерПокупателя = &ОтборОтветственный
		|			ИЛИ &ОтборОтветственныйНеУствновлен)
		|	И НЕ Контрагенты.Ссылка В ИЕРАРХИИ (&ГруппаДеятельностьПрекращена)
		|	И НЕ Контрагенты.Ссылка В ИЕРАРХИИ (&Группа9999999999)
		|	И НЕ Контрагенты.Ссылка В ИЕРАРХИИ (&ГруппаАлименты)
		|	И НЕ Контрагенты.Ссылка В ИЕРАРХИИ (&ГруппаНалоги)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыРекомендаций.Контрагент,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФайлыРекомендаций.ОтносительноеИмяФайла) КАК КоличествоФайлов
		|ПОМЕСТИТЬ втКоличествоФайлов
		|ИЗ
		|	РегистрСведений.ФайлыРекомендаций КАК ФайлыРекомендаций
		|
		|СГРУППИРОВАТЬ ПО
		|	ФайлыРекомендаций.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагенты.Ссылка КАК Контрагент,
		|	втКонтрагенты.ОсновнойБухгалтерПокупателя КАК Бухгалтер,
		|	втКонтрагенты.ОсновнойМенеджерПокупателя КАК Менеджер,
		|	втКонтрагенты.ЭтоАренда КАК ЭтоАренда,
		|	ВЫБОР
		|		КОГДА втИтоговыйРезультат.Рекомендация ЕСТЬ NULL
		|				ИЛИ втИтоговыйРезультат.Рекомендация = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка)
		|			ТОГДА ""Не заполнено""
		|		ИНАЧЕ втИтоговыйРезультат.Рекомендация
		|	КОНЕЦ КАК Рекомендация,
		|	втИтоговыйРезультат.Пояснение,
		|	втИтоговыйРезультат.СтопОплата,
		|	втИтоговыйРезультат.Флаг,
		|	втИтоговыйРезультат.ПоясненияУФК КАК ПояснениеУФК,
		|	ВЫБОР
		|		КОГДА втИтоговыйРезультат.РекомендацияУФК ЕСТЬ NULL
		|				ИЛИ втИтоговыйРезультат.РекомендацияУФК = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка)
		|			ТОГДА ""Не заполнено""
		|		ИНАЧЕ втИтоговыйРезультат.РекомендацияУФК
		|	КОНЕЦ КАК РекомендацияУФК,
		|	втКонтрагенты.ИНН КАК ИНН,
		|	втИтоговыйРезультат.ОтветПолучен,
		|	втИтоговыйРезультат.ДатаОтправки,
		|	втИтоговыйРезультат.ВАрхиве,
		|	втИтоговыйРезультат.ПометкаУдаления,
		|	втИтоговыйРезультат.Файл КАК ФайлПриложен,
		|	втИтоговыйРезультат.Рекомендация.Отрицательная КАК Отрицательная,
		|	втИтоговыйРезультат.РекомендацияУФК.Отрицательная КАК ОтрицательнаяУФК,
		|	втИтоговыйРезультат.РекомендацияУФК.ЗавершениеСотрудничества КАК ДеятельностьПрекращенаУФК,
		|	втИтоговыйРезультат.Рекомендация.ЗавершениеСотрудничества КАК ДеятельностьПрекращена,
		|	ВЫБОР
		|		КОГДА втИтоговыйРезультат.АвтоУстановка
		|			ТОГДА ""Авто-Установка""
		|		ИНАЧЕ втИтоговыйРезультат.Ответственный
		|	КОНЕЦ КАК Изменение,
		|	ВЫБОР
		|		КОГДА втИтоговыйРезультат.Рекомендация ЕСТЬ NULL
		|				ИЛИ втИтоговыйРезультат.Рекомендация = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Заполнено1Cont,
		|	ВЫБОР
		|		КОГДА втИтоговыйРезультат.РекомендацияУФК ЕСТЬ NULL
		|				ИЛИ втИтоговыйРезультат.РекомендацияУФК = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЗаполненоУФК,
		|	ЕСТЬNULL(втКоличествоФайлов.КоличествоФайлов, 0) КАК КоличествоФайлов
		|ИЗ
		|	втКонтрагенты КАК втКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыйРезультат КАК втИтоговыйРезультат
		|		ПО втКонтрагенты.Ссылка = втИтоговыйРезультат.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоФайлов КАК втКоличествоФайлов
		|		ПО втКонтрагенты.Ссылка = втКоличествоФайлов.Контрагент";
	
		
	ДобавитьУсловиеВЗапрос(Запрос);	
	Запрос.Текст = Запрос.Текст + " Упорядочить по Контрагент";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ЭтоИП", Справочники.КлассификаторОКОПФ.НайтиПоНаименованию("ИП"));
	Запрос.УстановитьПараметр("ОтборОтветственный", ОтборОтветственный);
	Запрос.УстановитьПараметр("ОтборОтветственныйНеУствновлен",Не ЗначениеЗаполнено(ОтборОтветственный));
	Запрос.УстановитьПараметр("ГруппаДеятельностьПрекращена",Справочники.Контрагенты.НайтиПоКоду("Т00001488"));
	//+++АК SHEP 2018.01.22 ИП-00017714
	Запрос.УстановитьПараметр("Группа9999999999",Справочники.Контрагенты.НайтиПоКоду("Т00000461"));
	Запрос.УстановитьПараметр("ГруппаАлименты", Справочники.Контрагенты.НайтиПоКоду("Т00002073"));
	Запрос.УстановитьПараметр("ГруппаАренда", Справочники.Контрагенты.НайтиПоКоду("000000466"));
	Запрос.УстановитьПараметр("ГруппаНалоги", Справочники.Контрагенты.НайтиПоКоду("000000523"));
	Запрос.УстановитьПараметр("ОтборИсключитьАренду", ОтборИсключитьАренду);
	
	Если НЕ ОбновлятьФлаг Тогда
		ТаблицаКонтрагентовКопия = ТаблицаКонтрагентов.Выгрузить(, "Флаг,Контрагент");
	КонецЕсли;
	//---АК SHEP 2018.01.24
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКонтрагентов.Загрузить(РезультатЗапроса);	
	
	
	КоличествоВАрхиве = 0;
	КоличествоДеятельностьПрекращена = 0;
	КоличествоКонтрагентов = 0;
	КоличествоПометкаУдаления = 0;
	КоличествоСтопОплата = 0;
	КоличествоДеятельностьПрекращенаУФК = 0;
	КоличествоОтрицательная = 0;
	КоличествоОтрицательнаяУФК = 0;
	КоличествоФайлПриложен = РезультатЗапроса.Итог("КоличествоФайлов");
	ЗаполненоРекомендацийУФК = РезультатЗапроса.Итог("ЗаполненоУФК");
	ЗаполненоРекомендаций1Cont = РезультатЗапроса.Итог("Заполнено1Cont");
	Для каждого Строка из ТаблицаКонтрагентов Цикл		
		КоличествоДеятельностьПрекращенаУФК = КоличествоДеятельностьПрекращенаУФК + Строка.ДеятельностьПрекращенаУФК;
		КоличествоКонтрагентов = КоличествоКонтрагентов + 1;
		Строка.Номер = КоличествоКонтрагентов;
		КоличествоСтопОплата = КоличествоСтопОплата + Строка.ЭтоСтопОплата;
		КоличествоДеятельностьПрекращена = КоличествоДеятельностьПрекращена + Строка.ДеятельностьПрекращена;	
		КоличествоПометкаУдаления = КоличествоПометкаУдаления + Строка.ПометкаУдаления;	
		КоличествоВАрхиве = КоличествоВАрхиве + Строка.ВАрхиве;
		КоличествоОтрицательная   = КоличествоОтрицательная + Строка.Отрицательная;
		КоличествоОтрицательнаяУФК = КоличествоОтрицательнаяУФК + Строка.ОтрицательнаяУФК;
		
		//+++АК SHEP 2018.01.24 ИП-00017714
		Если НЕ ОбновлятьФлаг Тогда
			МассивСтрокФлаг = ТаблицаКонтрагентовКопия.НайтиСтроки(Новый Структура("Контрагент", Строка.Контрагент));
			Если МассивСтрокФлаг.Количество() > 0 Тогда
				Строка.Флаг = МассивСтрокФлаг[0].Флаг;
			КонецЕсли;
		КонецЕсли;
		//---АК SHEP 2018.01.24
	КонецЦикла;	
	
	//+++АК SHEP 2018.01.29 ИП-00017714: разрешаем бухгалтерам делать стоп-оплату по своим контрагентам
	Если НЕ ЕстьПравоФинМенеджера Тогда
		Элементы.УстановитьЗаявкуНаСтопОплату.Доступность = (ТаблицаКонтрагентов.НайтиСтроки(Новый Структура("Бухгалтер", ТекущийПользователь)).Количество() > 0);
	КонецЕсли;
	//---АК SHEP 2018.01.29
	
	ОбновитьКоличествоВыделено();
	
КонецПроцедуры	

Процедура ДобавитьУсловиеВЗапрос(Запрос)
	
	
	Если ПрименениеФильтра = "Без фильтра" Тогда
		Возврат;
	КонецЕсли;	
	
	Условие = " ИСТИНА ";
	
	
	Если ОтборБезАрхив = Истина Тогда
		Условие = Условие + "И (втИтоговыйРезультат.ВАрхиве = Ложь)";				
	КонецЕсли;	
	
	Если ОтборЕстьФайлы Тогда
		Условие = Условие + "И (ЕстьNULL(втКоличествоФайлов.КоличествоФайлов,0)>0)";	
	КонецЕсли;

	//+++АК SHEP 2018.01.25 ИП-00017714
	Если ОтборИсключитьАренду Тогда
		Условие = Условие + "И (НЕ втКонтрагенты.ЭтоАренда)";
	КонецЕсли;
	//---АК SHEP 2018.01.25
	
	Если ПрименениеФильтра = "Только УФК" Тогда
		Если ЗначениеЗаполнено(ОтборРекомендация) Тогда	
			Условие = Условие + "И (втИтоговыйРезультат.РекомендацияУФК = &ОтборРекомендация)";
			Запрос.УстановитьПараметр("ОтборРекомендация",ОтборРекомендация);			
		КонецЕсли;	
		
		Если ОтборНаПроверке = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.РекомендацияУФК.Проверка = Истина)";				
		КонецЕсли;	
		Если ОтборОтрицательные = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.РекомендацияУФК.Отрицательная = Истина)";				
		КонецЕсли;	
		Если  ОтборБезДеятельностьПрекращена  = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.РекомендацияУФК.ЗавершениеСотрудничества <> Истина)";	
		КонецЕсли;	
		Если ОтборНезаполненные Тогда
			Условие = Условие + "И (втИтоговыйРезультат.РекомендацияУФК ЕСТЬ NULL ИЛИ втИтоговыйРезультат.РекомендацияУФК = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка))";					
		КонецЕсли;	
	КонецЕсли;
	
	Если ПрименениеФильтра = "Только 1Cont" Тогда
		Если ЗначениеЗаполнено(ОтборРекомендация) Тогда	
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация = &ОтборРекомендация)";
			Запрос.УстановитьПараметр("ОтборРекомендация",ОтборРекомендация);			
		КонецЕсли;	
		Если ОтборНаПроверке = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.Проверка = Истина)";				
		КонецЕсли;	
		Если ОтборОтрицательные = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.Отрицательная = Истина)";				
		КонецЕсли;
		Если  ОтборБезДеятельностьПрекращена  = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.ЗавершениеСотрудничества <> Истина)";	
		КонецЕсли;	
		Если ОтборНезаполненные Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация ЕСТЬ NULL ИЛИ втИтоговыйРезультат.Рекомендация = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка))";					
		КонецЕсли;	
	КонецЕсли;
	
	Если ПрименениеФильтра = "УФК или 1Cont" Тогда
		Если ЗначениеЗаполнено(ОтборРекомендация) Тогда	
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация = &ОтборРекомендация ИЛИ втИтоговыйРезультат.РекомендацияУФК = &ОтборРекомендация)";
			Запрос.УстановитьПараметр("ОтборРекомендация",ОтборРекомендация);			
		КонецЕсли;
		Если ОтборНаПроверке = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.Проверка = Истина ИЛИ втИтоговыйРезультат.РекомендацияУФК.Проверка = Истина)";				
		КонецЕсли;	
		Если ОтборОтрицательные = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.Отрицательная = Истина ИЛИ втИтоговыйРезультат.РекомендацияУФК.Отрицательная = Истина)";				
		КонецЕсли;	
		Если  ОтборБезДеятельностьПрекращена  = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.ЗавершениеСотрудничества <> Истина ИЛИ втИтоговыйРезультат.РекомендацияУФК.ЗавершениеСотрудничества)";	
		КонецЕсли;	
		Если ОтборНезаполненные Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация ЕСТЬ NULL ИЛИ втИтоговыйРезультат.Рекомендация = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка) ИЛИ втИтоговыйРезультат.РекомендацияУФК ЕСТЬ NULL ИЛИ втИтоговыйРезультат.РекомендацияУФК = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка))";					
		КонецЕсли;	
	КонецЕсли;
	
	Если ПрименениеФильтра = "УФК и 1Cont" Тогда
		Если ЗначениеЗаполнено(ОтборРекомендация) Тогда	
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация = &ОтборРекомендация И втИтоговыйРезультат.РекомендацияУФК = &ОтборРекомендация)";
			Запрос.УстановитьПараметр("ОтборРекомендация",ОтборРекомендация);			
		КонецЕсли;
		Если ОтборНаПроверке = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.Проверка = Истина И втИтоговыйРезультат.РекомендацияУФК.Проверка = Истина)";				
		КонецЕсли;
		Если ОтборОтрицательные = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.Отрицательная = Истина И втИтоговыйРезультат.РекомендацияУФК.Отрицательная = Истина)";				
		КонецЕсли;
		Если  ОтборБезДеятельностьПрекращена  = Истина Тогда
			Условие = Условие + "И (втИтоговыйРезультат.Рекомендация.ЗавершениеСотрудничества <> Истина И втИтоговыйРезультат.РекомендацияУФК.ЗавершениеСотрудничества)";	
		КонецЕсли;	
		Если ОтборНезаполненные Тогда
			Условие = Условие + "И ((втИтоговыйРезультат.Рекомендация ЕСТЬ NULL ИЛИ втИтоговыйРезультат.Рекомендация = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка)) И (втИтоговыйРезультат.РекомендацияУФК ЕСТЬ NULL ИЛИ втИтоговыйРезультат.РекомендацияУФК = ЗНАЧЕНИЕ(Справочник.Рекомендации.ПустаяСсылка)))";					
		КонецЕсли;	
		
	КонецЕсли;	
		
	
	Если Условие <> "" Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ " + Условие;	
	КонецЕсли;	
		
		
КонецПроцедуры	


&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	 ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	 ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	УстановитьФлажки(Истина);
	ОбновитьКоличествоВыделено();
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	УстановитьФлажки(Ложь);
	ОбновитьКоличествоВыделено();
КонецПроцедуры

Процедура УстановитьФлажки(Значение)
	
	Для каждого Строка из ТаблицаКонтрагентов Цикл	
		Строка.Флаг = Значение;
	КонецЦикла;
	
КонецПроцедуры	


&НаСервере
Процедура ВыполнитьРассылкуНаСервере()
		
	Отбор = Новый Структура("Флаг",Истина);
	ТаблицаРассылки = ТаблицаКонтрагентов.Выгрузить().Скопировать(Отбор);	
		
	Тема = "Оповещение системы контроля контрагентов";
	
	Бухгалтеры = ТаблицаРассылки.Скопировать(,"Бухгалтер"); 	
	Бухгалтеры.Свернуть("Бухгалтер");	
	Для каждого Бухгалтер из Бухгалтеры Цикл
		
		СтруктураОтбор = Новый Структура("Бухгалтер",Бухгалтер.Бухгалтер);
		Контрагенты = ТаблицаРассылки.НайтиСтроки(СтруктураОтбор);
		
		Адрес = НайтиЭлАдрес(Бухгалтер.Бухгалтер.ФизЛицо);
		
		Если Не  ЗначениеЗаполнено(Адрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		ТелоПисьма = "<HTML><HEAD></HEAD><BODY>"+ Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; charset=windows-1251"">"+ Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<h3>Поступила негативная информация по следующим контрагентам: </h3>"+ Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<table border='1px'><th>Контрагент</th><th>ИНН</th><th>Бухгалтер</th><th>Мененджер</th><th>Статус стоп оплаты</th><th>Рекомендация 1Cont</th><th>Пояснение 1Cont</th><th>Рекомендация УФК</th><th>Пояснение УФК</th>"+Символы.ПС; 

		Рассылка = ТаблицаРассылки.НайтиСтроки(СтруктураОтбор);
		Контрагентов = 0;
		Для каждого строка Из рассылка Цикл
			
			ТелоПисьма = ТелоПисьма + "<tr>"; 
			
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент.ИНН + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент.ОсновнойБухгалтерПокупателя + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент.ОсновнойМенеджерПокупателя + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.СтопОплата + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Рекомендация + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Пояснение + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.РекомендацияУФК + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.ПояснениеУФК + "</td>";
			
			
			ТелоПисьма = ТелоПисьма + "</tr>"+Символы.ПС;
			Контрагентов = Контрагентов + 1;
						
			
		КонецЦикла;	
		
		ТелоПисьма = ТелоПисьма + Символы.ПС+ "</table>"+Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<h3>Просим в течении 5 рабочих дней от даты получения настоящего письма направить ответ Иваньковой Ольге e-mail: buh51@vkusvill.ru, Сазановой Анастасии e-mail: buh21@vkusvill.ru о проделанной работе с контрагентом, а так же внести пояснение и рекомендацию в карточку контрагента.</h3>";

		ТелоПисьма = ТелоПисьма + "</BODY></HTML>"; 
		
		Попытка
			ОтправитьПисьмо(Адрес,ТелоПисьма,Тема);
			для Каждого СтрокаРассылка из рассылка Цикл
				УстановитьДатаОтправки(СтрокаРассылка);	
			КонецЦикла;	
			Сообщить("Отправлено письмо для бухгалтера: " + Бухгалтер.Бухгалтер.ФизЛицо + ", контрагентов: "+  Контрагентов);
		Исключение
			Сообщить("Не удалось отправить письмо для бухгалтера: " + Бухгалтер.Бухгалтер.ФизЛицо + ", контрагентов: "+  Контрагентов);
		КонецПопытки;	
	КонецЦикла;	
	
	Менеджеры = ТаблицаРассылки.Скопировать(,"Менеджер"); 	
	Менеджеры.Свернуть("Менеджер");	
	Для каждого Менеджер из Менеджеры Цикл
		
		СтруктураОтбор = Новый Структура("Менеджер",Менеджер.Менеджер);
		Контрагенты = ТаблицаРассылки.НайтиСтроки(СтруктураОтбор);
		
		Адрес = НайтиЭлАдрес(Менеджер.Менеджер.ФизЛицо);
		
		Если Не  ЗначениеЗаполнено(Адрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		ТелоПисьма = "<HTML><HEAD></HEAD><BODY>"+ Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; charset=windows-1251"">"+ Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<h3>Поступила негативная информация по следующим контрагентам: </h3>"+ Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<table border='1px'><th>Контрагент</th><th>ИНН</th><th>Бухгалтер</th><th>Мененджер</th><th>Статус стоп-оплаты</th><th>Рекомендация 1Cont</th><th>Пояснение 1Cont</th><th>Рекомендация УФК</th><th>Пояснение УФК</th>"+Символы.ПС; 

		Рассылка = ТаблицаРассылки.НайтиСтроки(СтруктураОтбор);
		Контрагентов = 0;
		Для каждого строка Из рассылка Цикл
			
			ТелоПисьма = ТелоПисьма + "<tr>"; 
			
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент.ИНН + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент.ОсновнойБухгалтерПокупателя + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Контрагент.ОсновнойМенеджерПокупателя + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.СтопОплата + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Рекомендация + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.Пояснение + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.РекомендацияУФК + "</td>";
			ТелоПисьма = ТелоПисьма +  "<td>" + строка.ПояснениеУФК + "</td>";
						
			ТелоПисьма = ТелоПисьма + "</tr>"+Символы.ПС;
			Контрагентов = Контрагентов + 1;					
			
		КонецЦикла;	
		
		ТелоПисьма = ТелоПисьма + Символы.ПС+ "</table>"+Символы.ПС; 
		ТелоПисьма = ТелоПисьма + "<h3>Просим в течении 5 рабочих дней от даты получения настоящего письма направить ответ Иваньковой Ольге e-mail: buh51@vkusvill.ru, Сазановой Анастасии e-mail: buh21@vkusvill.ru о проделанной работе с контрагентом, а так же внести пояснение и рекомендацию в карточку контрагента.</h3>";

		ТелоПисьма = ТелоПисьма + "</BODY></HTML>"; 

		
		Попытка
			ОтправитьПисьмо(Адрес,ТелоПисьма,Тема);
			для Каждого СтрокаРассылка из рассылка Цикл
				УстановитьДатаОтправки(СтрокаРассылка);	
			КонецЦикла;	
			Сообщить("Отправлено письмо для менеджера: " + Менеджер.Менеджер.ФизЛицо +  ", контрагентов: "+  Контрагентов);
		Исключение
			Сообщить("Не удалось отправить письмо для менеджера: " + Менеджер.Менеджер.ФизЛицо +  ", контрагентов: "+  Контрагентов);
		КонецПопытки;	
				
	КонецЦикла;		
	ОбновитьТаблицу();
	
КонецПроцедуры

//+++АК SHEP 2018.01.22 ИП-00017714
&НаСервере
Процедура ВыполнитьРассылкуНаСервере17714(Знач ОтправлятьБухгалтерам = Истина, Знач ОтправлятьМенеджерам = Истина, Знач ОтправлятьКонтрагентам = Истина, Знач ТестовыйРежим = Ложь)
	
	СтруктураОтбор = Новый Структура("Флаг", Истина);
	ТаблицаРассылки = ТаблицаКонтрагентов.Выгрузить(СтруктураОтбор);
		
	Тема = "Оповещение системы контроля контрагентов";
	
	СтруктураПолейДляВывода = Новый Структура("Контрагент,Менеджер,СтопОплата,Рекомендация,Пояснение", "Контрагент", "Менеджер", "Статус стоп-оплаты", "Рекомендация 1Cont", "Пояснение 1Cont");
	
	МассивОтборовОтправки = Новый Массив;
	Если ОтправлятьБухгалтерам Тогда
		МассивОтборовОтправки.Добавить("Бухгалтер");
	КонецЕсли;
	Если ОтправлятьМенеджерам Тогда
		МассивОтборовОтправки.Добавить("Бухгалтер,Менеджер");
	КонецЕсли;
	ОтправлятьАренду = Истина;
	Если ОтправлятьАренду Тогда
		МассивОтборовОтправки.Добавить("Бухгалтер,ЭтоАренда");
	КонецЕсли;
	
	//СтрокаОтбора = ?(ОтправлятьБухгалтерам И НЕ ОтправлятьМенеджерам, "Бухгалтер", "Бухгалтер,Менеджер");
	
	Для Каждого СтрокаОтбора Из МассивОтборовОтправки Цикл
		
		ОтправлятьБухгалтерам = (СтрокаОтбора = "Бухгалтер");
		ОтправлятьМенеджерам = (СтрокаОтбора = "Бухгалтер,Менеджер");
		ОтправлятьАренду = (СтрокаОтбора = "Бухгалтер,ЭтоАренда");
		
		Если ОтправлятьАренду Тогда
			ТЗнОтветственные = ТаблицаРассылки.Скопировать(Новый Структура("ЭтоАренда", Истина) , СтрокаОтбора);
		Иначе
			ТЗнОтветственные = ТаблицаРассылки.Скопировать(, СтрокаОтбора); 
		КонецЕсли;
		ТЗнОтветственные.Свернуть(СтрокаОтбора);	
		
		СтруктураОтбор = Новый Структура(СтрокаОтбора);
		
		Для Каждого СтрокаОтветственные Из ТЗнОтветственные Цикл
			
			ТелоПисьма = "<HTML><HEAD></HEAD><BODY>"+ Символы.ПС;
			ТелоПисьма = ТелоПисьма + "<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; charset=windows-1251"">" + Символы.ПС;
			ТелоПисьма = ТелоПисьма + "<h3>Поступила негативная информация по следующим контрагентам: </h3>" + Символы.ПС;
			
			ТекБухгалтер = СтрокаОтветственные.Бухгалтер;
			ТекБухгалтерСтр = Строка(ТекБухгалтер);
			
			EmailОтветственногоБуха = ЭлПочтаБухгалтераПоУмолчанию;
			ЭлементСпЗн = СписокПользователейИАдресовФизЛиц.НайтиПоЗначению(ТекБухгалтер);
			Если ЭлементСпЗн = Неопределено Тогда
				ТекБухгалтерСтр = БухгалтерПоУмолчаниюСтр;
			Иначе
				EmailОтветственногоБуха = ЭлементСпЗн.Представление;
			КонецЕсли;
			
			Адреса = "";
			Если ОтправлятьБухгалтерам Тогда
				Адреса = EmailОтветственногоБуха;
			КонецЕсли;
			Если ОтправлятьМенеджерам Тогда
				ТекМенеджер = СтрокаОтветственные.Менеджер;
				ЭлементСпЗн = СписокПользователейИАдресовФизЛиц.НайтиПоЗначению(ТекМенеджер);
				Если ЭлементСпЗн <> Неопределено Тогда
					Адреса = Адреса + ?(ПустаяСтрока(Адреса), "", ";") + ЭлементСпЗн.Представление;
					
					Если ЭлементСпЗн.Пометка Тогда
						ТелоПисьма = ТелоПисьма + "<h3><B>(для следующих контрагентов, эл. адрес ответственного менеджера не указан)</B>";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ОтправлятьАренду Тогда
				Адреса = "arenda2@izbenka.msk.ru";
			КонецЕсли;
			
			ТелоПисьма = ТелоПисьма + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаЗаголовок(СтруктураПолейДляВывода);
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбор, СтрокаОтветственные);
			Рассылка = ТаблицаРассылки.НайтиСтроки(СтруктураОтбор);
			Контрагентов = Рассылка.Количество();
			
			ТелоПисьма = ТелоПисьма + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаТело(СтруктураПолейДляВывода, Рассылка);
			
			ТелоПисьма = ТелоПисьма + "<h3>Просим в течении 5 рабочих дней от даты получения настоящего письма направить ответ бухгалтерам: 
			|" + БухгалтерПоУмолчаниюСтр + " e-mail: " + ЭлПочтаБухгалтераПоУмолчанию
			+ ?(EmailОтветственногоБуха = ЭлПочтаБухгалтераПоУмолчанию, "", ", " + ТекБухгалтерСтр + " e-mail: " + EmailОтветственногоБуха) + "
			|о проделанной работе с контрагентом, а также внести пояснение и рекомендацию в карточку контрагента.</h3>";
			ТелоПисьма = ТелоПисьма + "</BODY></HTML>";
			
			ТекстСообщ = "";
			Если ОтправлятьБухгалтерам Тогда
				ТекстСообщ = "для бухгалтера: " + ТекБухгалтер;
			КонецЕсли;
			Если ОтправлятьМенеджерам Тогда
				ТекстСообщ = ТекстСообщ + " " + ?(ПустаяСтрока(ТекстСообщ), "для", "и") + " менеджера: " + ТекМенеджер;
			КонецЕсли;
			Если ОтправлятьАренду Тогда
				ТекстСообщ = "ответственному по аренде ";
			КонецЕсли;
			ТекстСообщ = "письмо " + ТекстСообщ + ", контрагентов: " + Контрагентов;
			
			Попытка
				ОбратныеАдреса = EmailОтветственногоБуха + ?(EmailОтветственногоБуха = ЭлПочтаБухгалтераПоУмолчанию, "", ";" + ЭлПочтаБухгалтераПоУмолчанию);
				ОтправитьПисьмо17714(Адреса, ТелоПисьма, Тема, EmailОтветственногоБуха, ТекБухгалтерСтр, ОбратныеАдреса, ТестовыйРежим);
				Сообщить("Отправлено " + ТекстСообщ);
			Исключение
				Сообщить("Не удалось отправить " + ТекстСообщ + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОтправлятьКонтрагентам Тогда
		ШаблонТелаПисьма = "
		|На основании ПИСЬМА от 24 июня 2016 г. N ЕД-19-15/104; ПИСЬМА от 24 июля 2015 г. N ЕД-4-2/13005; ПИСЬМА от 11 февраля 2010 г. N 3-7-07/84 Федеральной Налоговой Службы о применении осмотрительности взаимодействия с контрагентом, в текущей работе ООО ""Вкусвилл"" - внедрена онлайн проверка контрагентов на сайте ИФНС - https://www.1cont.ru/.
		|<BR> 
		|<BR>Уважаемый партнёр! С сайта www.1cont.ru поступила негативная информация по контрагенту '[НазваниеКонтрагента]'.
		|<BR>Рекомендация: [Рекомендация], пояснение: [Пояснение].
		|<BR>
		|<BR>Просьба в течение 5 рабочих дней от даты получения настоящего письма направить ответ бухгалтеру: ";
		
		Для Каждого СтрокаРассылка Из ТаблицаРассылки Цикл
			УстановитьДатаОтправки(СтрокаРассылка);
			
			Если НЕ ОтправлятьКонтрагентам Тогда Продолжить; КонецЕсли;
			
			ТекБухгалтер = СтрокаРассылка.Бухгалтер;
			ТекБухгалтерСтр = Строка(ТекБухгалтер);
			
			EmailОтветственногоБуха = ЭлПочтаБухгалтераПоУмолчанию;
			ЭлементСпЗн = СписокПользователейИАдресовФизЛиц.НайтиПоЗначению(ТекБухгалтер);
			Если ЭлементСпЗн = Неопределено Тогда
				ТекБухгалтерСтр = БухгалтерПоУмолчаниюСтр;
			Иначе
				EmailОтветственногоБуха = ЭлементСпЗн.Представление;
			КонецЕсли;
			
			ТекКонтрагент = СтрокаРассылка.Контрагент;
			ЭлементСпЗн = СписокКонтрагентовИЭлАдресов.НайтиПоЗначению(ТекКонтрагент);
			Если ЭлементСпЗн = Неопределено Тогда Продолжить; КонецЕсли;
			
			Адреса = ЭлементСпЗн.Представление;
			Если ПустаяСтрока(Адреса) Тогда
				Сообщить("Не указан адрес рассылки для контрагента " + ТекКонтрагент);
				Продолжить;
			КонецЕсли;
			
			Попытка
				ТелоПисьма = СтрЗаменить(ШаблонТелаПисьма, "[НазваниеКонтрагента]", СтроковыеФункцииКлиентСервер.ПредставлениеСтрокиДляHTML(СокрЛП(ТекКонтрагент)));
				ТелоПисьма = СтрЗаменить(ТелоПисьма, "[Рекомендация]", СтрокаРассылка.Рекомендация);
				ТелоПисьма = СтрЗаменить(ТелоПисьма, "[Пояснение]", СтрокаРассылка.Пояснение);
				//ТелоПисьма = ТелоПисьма + ?(EmailОтветственногоБуха = ЭлПочтаБухгалтераПоУмолчанию, "", " и " + ТекБухгалтерСтр + " e-mail: " + EmailОтветственногоБуха);
				ТелоПисьма = ТелоПисьма + ТекБухгалтерСтр + " e-mail: " + EmailОтветственногоБуха;
				ОтправитьПисьмо17714(Адреса, ТелоПисьма, Тема, EmailОтветственногоБуха, ТекБухгалтерСтр, EmailОтветственногоБуха, ТестовыйРежим);
			Исключение
				Сообщить("Не удалось отправить письмо для контрагента: " + ТекКонтрагент + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;

	ОбновитьТаблицу(Ложь); // не обновляем выбранных контрагентов ("Флаг")
	
КонецПроцедуры


Функция НайтиЭлАдрес(ФизЛицо)
	
	Если не ЗначениеЗаполнено(ФизЛицо) тогда
		Возврат "";
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Сотрудник,
	|	КонтактнаяИнформация.Представление КАК ЭлАдрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Объект В(&Объект)";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ЭлАдрес;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Процедура УстановитьДатаОтправки(СтрокаРассылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Период,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ТипСведений
		|ИЗ
		|	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(
		|			&Дата,
		|			Контрагент = &Контрагент
		|				И ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияУФК), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагент", СтрокаРассылка.Контрагент);
	Запрос.УстановитьПараметр("Дата",КонецДня(Дата));
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать(); 
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Контрагент",СтрокаРассылка.Контрагент);
		СтруктураКлюча.Вставить("Период",ВыборкаДетальныеЗаписи.Период);
		СтруктураКлюча.Вставить("ТипСведений",ВыборкаДетальныеЗаписи.ТипСведений);
	КонецЦикла;	
		
	МенеджерЗаписи = РегистрыСведений.СведенияОПроверкеКонтрагентов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтруктураКлюча);
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ДатаОтправки = ТекущаяДата();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

&НаСервере
Процедура ОтправитьПисьмо(АдресПолучателя, ТекстПисьма, Тема)
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	//
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	Письмо.Получатели.Добавить(АдресПолучателя);
		
	Письмо.Тема				= Тема;
	
	Письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.HTML);
	
	Почта = Новый ИнтернетПочта;
	
	Почта.Подключиться(Профиль);
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();
	
КонецПроцедуры

//+++АК SHEP 2018.01.22 ИП-00017714
&НаСервереБезКонтекста
Процедура ОтправитьПисьмо17714(АдресаПолучателей, ТекстПисьма, Тема, АдресОтправителя, ИмяОтправителя, ОбратныеАдреса = "", ТестовыйРежим = Ложь)
	
	Если ТестовыйРежим Тогда
		ЭлПочтаБухгалтераПоУмолчанию = "buh51@vkusvill.ru";
		АдресаПолучателей = ЭлПочтаБухгалтераПоУмолчанию;
		//Сообщить("Письмо будет отправлено с адреса " + АдресОтправителя + " на адреса: " + АдресаПолучателей);
		//Возврат;
	КонецЕсли;
	
	// чтобы письма уходили от адреса отправителя без проверки логина/пароля
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP	= "10.0.0.30";
	ИПП.ПортSMTP			= 25;
	ИПП.АутентификацияSMTP	= СпособSMTPАутентификации.БезАутентификации;
	ИПП.Пользователь		= ИмяОтправителя;
	ИПП.ПарольSMTP			= "";
	ИПП.ПользовательSMTP	= "";
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.ИмяОтправителя	= ИмяОтправителя;
	Письмо.Отправитель		= АдресОтправителя;
	Письмо.Тема				= Тема;
	Письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.HTML);
	
	МассивЭлАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресаПолучателей, ";");
	Для Каждого АдресЭлПочты Из МассивЭлАдресов Цикл
		Если ПустаяСтрока(АдресЭлПочты) Тогда Продолжить; КонецЕсли;
		Письмо.Получатели.Добавить(СокрЛП(АдресЭлПочты));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбратныеАдреса) Тогда
		МассивЭлАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбратныеАдреса, ";");
		Для Каждого АдресЭлПочты Из МассивЭлАдресов Цикл
			Если ПустаяСтрока(АдресЭлПочты) Тогда Продолжить; КонецЕсли;
			Письмо.ОбратныйАдрес.Добавить(СокрЛП(АдресЭлПочты));
		КонецЦикла;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(ИПП);
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры

//+++АК SHEP 2018.01.22 ИП-00017714
&НаСервере
Функция ЗаполнитьСписокПользователейИАдресовФизЛиц()
	
	СписокПользователейИАдресовФизЛиц.Очистить();
	СтрокаМенеджеровБухгалтеровБезЭлАдреса = "";
	
	Отбор = Новый Структура("Флаг", Истина);
	ТаблицаМенеджеровБухгалтеров = ТаблицаКонтрагентов.Выгрузить(Отбор, "Бухгалтер,Менеджер");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаМенеджеровБухгалтеров.Бухгалтер КАК Бухгалтер,
		|	ТаблицаМенеджеровБухгалтеров.Менеджер КАК Менеджер
		|ПОМЕСТИТЬ ТаблицаМенеджеровБухгалтеровПредв
		|ИЗ
		|	&ТаблицаМенеджеровБухгалтеров КАК ТаблицаМенеджеровБухгалтеров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаМенеджеровБухгалтеров.Бухгалтер КАК Пользователь,
		|	ИСТИНА КАК ЭтоБухгалтер,
		|	ЛОЖЬ КАК ЭтоМенеджер
		|ПОМЕСТИТЬ ТаблицаМенеджеровБухгалтеров
		|ИЗ
		|	ТаблицаМенеджеровБухгалтеровПредв КАК ТаблицаМенеджеровБухгалтеров
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаМенеджеровБухгалтеров.Менеджер,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ТаблицаМенеджеровБухгалтеровПредв КАК ТаблицаМенеджеровБухгалтеров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаМенеджеровБухгалтеров.Пользователь,
		|	Пользователи.Представление КАК ПользовательПредставление,
		|	ФизическиеЛица.Ссылка КАК ФизЛицо,
		|	ТаблицаМенеджеровБухгалтеров.ЭтоБухгалтер КАК ЭтоБухгалтер,
		|	ТаблицаМенеджеровБухгалтеров.ЭтоМенеджер,
		|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК ЭлАдрес
		|ИЗ
		|	ТаблицаМенеджеровБухгалтеров КАК ТаблицаМенеджеровБухгалтеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ТаблицаМенеджеровБухгалтеров.Пользователь = Пользователи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО (Пользователи.ФизЛицо = ФизическиеЛица.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект)
		|			И (КонтактнаяИнформация.Тип = &Тип)
		|			И (КонтактнаяИнформация.Вид = &Вид)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоБухгалтер УБЫВ");
	Запрос.УстановитьПараметр("ТаблицаМенеджеровБухгалтеров", ТаблицаМенеджеровБухгалтеров);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат СтрокаМенеджеровБухгалтеровБезЭлАдреса; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ТекЭлАдрес = СокрЛП(ВыборкаЗапроса.ЭлАдрес);
		Если ЗначениеЗаполнено(ТекЭлАдрес) Тогда
			СписокПользователейИАдресовФизЛиц.Добавить(ВыборкаЗапроса.Пользователь, ТекЭлАдрес);
		Иначе
			ТекЭлАдрес = ЭлПочтаБухгалтераПоУмолчанию;
			СписокПользователейИАдресовФизЛиц.Добавить(ВыборкаЗапроса.Пользователь, ТекЭлАдрес, Истина);
			СтрокаМенеджеровБухгалтеровБезЭлАдреса = СтрокаМенеджеровБухгалтеровБезЭлАдреса +
			?(ВыборкаЗапроса.ЭтоБухгалтер, "Бухгалтер", "Менеджер") + " " + ВыборкаЗапроса.ПользовательПредставление + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаМенеджеровБухгалтеровБезЭлАдреса;
	
КонецФункции

//+++АК SHEP 2018.01.23 ИП-00017714
&НаСервере
Функция ЗаполнитьСписокКонтрагентовИЭлАдресов()
	
	СтрокаКонтрагентовБезЭлАдреса = "";
	СписокКонтрагентовИЭлАдресов.Очистить();
	
	Отбор = Новый Структура("Флаг", Истина);
	МассивКонтрагентов = ТаблицаКонтрагентов.Выгрузить(Отбор, "Контрагент").ВыгрузитьКолонку("Контрагент");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ПОМЕСТИТЬ ГруппыАренды
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа
		|	И Контрагенты.Ссылка В ИЕРАРХИИ(&ГруппаАренда)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Представление КАК КонтрагентПредставление,
		|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК ЭлАдрес,
		|	ВЫБОР
		|		КОГДА ГруппыАренды.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоАренда
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО Контрагенты.Ссылка = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = &Тип)
		|			И (КонтактнаяИнформация.Вид = ВЫБОР
		|				КОГДА Контрагенты.ВидКИ_ДляИнформирования = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)
		|				ИНАЧЕ Контрагенты.ВидКИ_ДляИнформирования
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыАренды КАК ГруппыАренды
		|		ПО Контрагенты.Родитель = ГруппыАренды.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивКонтрагентов)");
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ГруппаАренда", Справочники.Контрагенты.НайтиПоКоду("000000466"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат СтрокаКонтрагентовБезЭлАдреса; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ТекЭлАдрес = ВыборкаЗапроса.ЭлАдрес;
		СписокКонтрагентовИЭлАдресов.Добавить(ВыборкаЗапроса.Контрагент, ТекЭлАдрес, ВыборкаЗапроса.ЭтоАренда);
	КонецЦикла;
	
	Возврат СтрокаКонтрагентовБезЭлАдреса;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьРассылку(Команда)
	
	//+++АК SHEP 2018.01.22 ИП-00017714
	//ОбработкаРезультата = Новый ОписаниеОповещения("ВыполнитьРассылкуЗавершение",ЭтаФорма);
	//ТекстВопроса = "Выделено контрагентов: " +  КоличествоВыделено + ".Выполнить рассылку?";	
	//ПоказатьВопрос(ОбработкаРезультата,ТекстВопроса,РежимДиалогаВопрос.ДаНет);	
	
	ЗаполнитьСписокКонтрагентовИЭлАдресов();
	
	СтрокаМенеджеровБухгалтеровБезЭлАдреса = ЗаполнитьСписокПользователейИАдресовФизЛиц();
	Если ЗначениеЗаполнено(СтрокаМенеджеровБухгалтеровБезЭлАдреса) Тогда
		ТекстВопроса = "Обнаружены бухгалтера / менеджеры без эл. адреса:
		|" + СтрокаМенеджеровБухгалтеровБезЭлАдреса + "
		|Продолжить отправку?";
		
		ОбработкаРезультата = Новый ОписаниеОповещения("ВыполнитьРассылкуПродолжение", ЭтаФорма);
		ПоказатьВопрос(ОбработкаРезультата, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	//---АК SHEP 2018.01.22
	
	ВыполнитьРассылкуПродолжение(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

//+++АК SHEP 2018.01.22 ИП-00017714
&НаКлиенте
Процедура ВыполнитьРассылкуПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	ОбработкаРезультата = Новый ОписаниеОповещения("ВыполнитьРассылкуЗавершение", ЭтаФорма);
	ТекстВопроса = "Выделено контрагентов: " + Формат(КоличествоВыделено, "ЧГ=") + ". Выполнить рассылку?";
	//ПоказатьВопрос(ОбработкаРезультата,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("ОтправлятьБухгатерам", "Отправлять бухгалтерам");
	СписокВыбора.Добавить("ОтправлятьМенеджерам", "Отправлять менеджерам");
	СписокВыбора.Добавить("ОтправлятьКонтрагентам", "Отправлять контрагентам", Истина);
	//СписокВыбора.Добавить("ТестовыйРежим", "Тестовый режим", Истина);
	СписокВыбора.ПоказатьОтметкуЭлементов(ОбработкаРезультата, ТекстВопроса);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРассылкуЗавершение(Результат,Параметры) Экспорт
	
	//+++АК SHEP 2018.01.24 ИП-00017714
	//Если Результат = КодВозвратаДиалога.Да Тогда	
	//	ВыполнитьРассылкуНаСервере();
	//КонецЕсли;
	
	Если Результат = Неопределено Тогда Возврат; КонецЕсли; // нажали кнопку "Отмена"
	
	//Результат — это список
	ОтправлятьБухгатерам = Результат.НайтиПоЗначению("ОтправлятьБухгатерам").Пометка;
	ОтправлятьМенеджерам = Результат.НайтиПоЗначению("ОтправлятьМенеджерам").Пометка;
	ОтправлятьКонтрагентам = Результат.НайтиПоЗначению("ОтправлятьКонтрагентам").Пометка;
	ТестовыйРежим = Ложь; //Результат.НайтиПоЗначению("ТестовыйРежим").Пометка;
	
	ВыполнитьРассылкуНаСервере17714(ОтправлятьБухгатерам, ОтправлятьМенеджерам, ОтправлятьКонтрагентам, ТестовыйРежим);
	//---АК SHEP 2018.01.24
	
КонецПроцедуры	


&НаСервере
Процедура УстановитьЗаявкуНаСтопОплатуНаСервере()
	
	Для каждого Строка из ТаблицаКонтрагентов Цикл
		
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.СтопОплата = "Заявка на стоп-оплату" ИЛИ 
			Строка.СтопОплата = "Подтверждена стоп-оплата" Тогда
			Продолжить;
		КонецЕсли;	
		
		//+++АК SHEP 2018.01.29 ИП-00017714
		Если НЕ ЕстьПравоФинМенеджера И Строка.Бухгалтер <> ТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		//---АК SHEP 2018.01.29
		
		МенеджерЗаписи = РегистрыСведений.СведенияОСтопОплате.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Контрагент = Строка.Контрагент;
		МенеджерЗаписи.Период = Дата;
		
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Контрагент = Строка.Контрагент;
		МенеджерЗаписи.Период = НачалоДня(ТекущаяДата());
		МенеджерЗаписи.Комментарий = Справочники.ПричиныСтопОплаты.ОтрицательнаяРекомендация;
		МенеджерЗаписи.Руководитель = ТекущийПользователь;
		МенеджерЗаписи.СтопОплата = Истина;
		МенеджерЗаписи.УстановилВСтопОплату = ТекущийПользователь;
		
		МенеджерЗаписи.Записать();
		
		//+++АК SHEP 2018.01.29 ИП-00017714
		Если НЕ ЕстьПравоФинМенеджера Тогда
			Сообщить("Записана стоп-оплата по контрагенту " + Строка.Контрагент);
		КонецЕсли;
		//---АК SHEP 2018.01.29
		
	КонецЦикла;
	
	//+++АК SHEP 2018.01.29 ИП-00017714
	//ОбновитьТаблицу();
	ОбновитьТаблицу(Ложь);
	//---АК SHEP 2018.01.29
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаявкуНаСтопОплату(Команда)
	
	ОбработкаРезультата = Новый ОписаниеОповещения("УстановитьЗаявкуНаСтопОплатуЗавершение",ЭтаФорма);
	ТекстВопроса = "Выделено контрагентов: " +  КоличествоВыделено + ". Установить заявку на стоп-оплату?";
	
	ПоказатьВопрос(ОбработкаРезультата,ТекстВопроса,РежимДиалогаВопрос.ДаНет);	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаявкуНаСтопОплатуЗавершение(Результат,Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьЗаявкуНаСтопОплатуНаСервере();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьКонтрагента(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаКонтрагентов.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда		
		ОткрытьЗначение(ТекущаяСтрока.Контрагент);			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ТаблицаКонтрагентов.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда		
		ОткрытьЗначение(ТекущаяСтрока.Контрагент);			
	КонецЕсли;				

КонецПроцедуры

&НаКлиенте
Процедура ОтборАрхивПриИзменении(Элемент)
	//СформироватьСтрокуОтбор();
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДеятельностьПрекращенаПриИзменении(Элемент)
	//СформироватьСтрокуОтбор();
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПометкаУдаленияПриИзменении(Элемент)
	//СформироватьСтрокуОтбор();
	ОбновитьТаблицу();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	//СформироватьСтрокуОтбор();
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДеятельностьПрекращенаУФКПриИзменении(Элемент)
	//СформироватьСтрокуОтбор();
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//СформироватьСтрокуОтбор();
	ОбновитьТаблицу();
	
	//+++АК SHEP 2018.01.24 ИП-00017714
	БухгалтерПоУмолчаниюСтр = "Иванькова Ольга";
	ЭлПочтаБухгалтераПоУмолчанию = "buh51@vkusvill.ru";
	//---АК SHEP 2018.01.24

КонецПроцедуры

&НаКлиенте
Процедура ПрименениеФильтраПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

//+++АК SHEP 2018.01.22 ИП-00017714
&НаКлиенте
Процедура ПрименениеФильтраОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПрименениеФильтра = "Без фильтра";
	ПрименениеФильтраПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборРекомендацияПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаПроверкеПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтрицательныеПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборБезАрхивПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборБезДеятельностьПрекращенаПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ТекущиеДанные = Элементы.ТаблицаКонтрагентов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьПрикрепленныйФайл(ТекущиеДанные.Контрагент);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныйФайл(Контрагент)

	
	ПараметрыОткрытия = Новый Структура("Контрагент",Контрагент);
	ОткрытьФорму("РегистрСведений.ФайлыРекомендаций.Форма.СписокФайловКонтрагента",ПараметрыОткрытия);
   
 //   Результат = ПолучитьФайлНаСервере(Контрагент);
 //
 //   Если Результат.Адрес = Неопределено Тогда
 //   	Сообщить("Файл не найден");
 //   	Возврат;
 //   КонецЕсли;	
 //   ПрикрепленныйФайл = ПолучитьИзВременногоХранилища(Результат.адрес);
 //   Расширение = ПолучитьРасширениеФайла(Результат.ИмяФайла);
 //   ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
 //   ПрикрепленныйФайл.Записать(ИмяФайла);
 //   ЗапуститьПриложение(ИмяФайла);
	
КонецПроцедуры

Функция ПолучитьРасширениеФайла(ИмяФайла) Экспорт

	ПозицияПоследнейТочки = 0;
	РасширениеФайла = ИмяФайла;

	Пока 1 = 1 Цикл	
		ПозицияПоследнейТочки = Найти(РасширениеФайла, ".");
		Если ПозицияПоследнейТочки = 0 Тогда
			Прервать;
		Иначе
			РасширениеФайла = Сред(РасширениеФайла, ПозицияПоследнейТочки + 1)
		КонецЕсли;
	КонецЦикла;
	Возврат ?(РасширениеФайла = ИмяФайла, "", РасширениеФайла);

КонецФункции 

&НаСервере
Функция ПолучитьФайлНаСервере(Контрагент)
	
	Структура = Новый Структура;
	Структура.Вставить("Адрес",Неопределено);
	Структура.Вставить("ИмяФайла","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Период,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ТипСведений,
		|	СведенияОПроверкеКонтрагентовСрезПоследних.ИмяФайла
		|ИЗ
		|	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(
		|			&Дата,
		|			Контрагент = &Контрагент
		|				И ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияУФК), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИмяФайла) Тогда
			Продолжить;
		КонецЕсли;	
		МенеджерЗаписи = РегистрыСведений.СведенияОПроверкеКонтрагентов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ВыборкаДетальныеЗаписи,"Период,Контрагент,ТипСведений");
		МенеджерЗаписи.Прочитать();
		Файл = МенеджерЗаписи.ПрикрепленныйФайл.Получить();
		
		Структура.ИмяФайла = ВыборкаДетальныеЗаписи.ИмяФайла;
		Если Файл <> Неопределено Тогда
			Структура.Адрес = ПоместитьВоВременноеХранилище(Файл);
		КонецЕсли;	

	КонецЦикла;
	
	Возврат Структура;

КонецФункции	


&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьТаблицу()
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеРекомендаций(Команда)
	ОткрытьФорму("Обработка.КонтрольРекомендацийКонтрагентов.Форма.УстановкаРекомендаций");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовФлагПриИзменении(Элемент)
	ОбновитьКоличествоВыделено();
КонецПроцедуры

Процедура ОбновитьКоличествоВыделено()
	
	КоличествоВыделено = 0;
	Для каждого строка из ТаблицаКонтрагентов Цикл
		КоличествоВыделено = КоличествоВыделено + строка.Флаг;		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтборЕстьФайлыПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтборНезаполненныеПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

//+++АК SHEP 2018.01.25 ИП-00017714
&НаКлиенте
Процедура ОтборИсключитьАрендуПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаСервере
Функция ПолучитьОтчетыНаСервере()
	
	Отбор = Новый Структура("Флаг",Истина);
	ТаблицаРассылки = ТаблицаКонтрагентов.Выгрузить().Скопировать(Отбор);	
		
	Контрагенты = ТаблицаРассылки.Скопировать(,"Контрагент"); 	
	Контрагенты.Свернуть("Контрагент");	
	ЗаказаноОтчетов = 0;
	Для каждого Контрагент из Контрагенты Цикл
		Если ЗначениеЗаполнено(Контрагент.Контрагент.ОГРН) и Контрагент.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		ИЛИ ЗначениеЗаполнено(Контрагент.Контрагент.ОГРНИП) и Контрагент.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			МЗ = РегистрыСведений.ЗапросыОтчетовПоКонтрагентам1конт.СоздатьМенеджерЗаписи();
			МЗ.Контрагент = Контрагент.Контрагент;
			МЗ.Период = НачалоДня(ТекущаяДата());
			МЗ.Записать(Истина);
			ЗаказаноОтчетов = ЗаказаноОтчетов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказаноОтчетов;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОтчеты(Команда)
	Сообщить("Заказано отчетов: " + Строка(ПолучитьОтчетыНаСервере()));
	ОткрытьФорму("Обработка.КонтрольРекомендацийКонтрагентов.Форма.ЗаказанныеОтчеты1конт");
КонецПроцедуры

&НаСервере
Функция ПечатьОтчетовНаСервере()
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";	
	
	Отбор = Новый Структура("Флаг",Истина);
	ТаблицаРассылки = ТаблицаКонтрагентов.Выгрузить().Скопировать(Отбор);	
		
	Контрагенты = ТаблицаРассылки.Скопировать(,"Контрагент"); 	
	Контрагенты.Свернуть("Контрагент");
	СписокКонтрагентов = Контрагенты.ВыгрузитьКолонку("Контрагент");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.Объект,
	|	ХранилищеДополнительнойИнформации.ИмяФайла
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект В(&СписокКонтрагентов)
	|	И ХранилищеДополнительнойИнформации.Наименование = ""Очет 1конт""
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)");
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	
	МассивФайлов = Новый Массив;
		
	РЗ = Запрос.Выполнить().Выбрать();
	Пока РЗ.Следующий() Цикл	
		ПолноеИмяФайла = КаталогСохранения + РЗ.ИмяФайла;
		Файл = Новый Файл(ПолноеИмяФайла);
		Если Файл.Существует() Тогда
			МассивФайлов.Добавить(ПолноеИмяФайла);
		КонецЕсли;		
	КонецЦикла;
	
	ФайлРезультат = Справочники.АК_АлгоритмыРаспознаванияФайлов.РазбитьPDFФайл(МассивФайлов);
	
	ФайлНаДиске = Новый Файл(ФайлРезультат);
	Если ФайлНаДиске.Существует() Тогда
		Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя));
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПечатьОтчетов(Команда)
	
	ОбъедФайл = ПечатьОтчетовНаСервере(); 	
	Если ЗначениеЗАполнено(ОбъедФайл) = Истина Тогда
		ФайлРез = ПолучитьИмяВременногоФайла("pdf");
		ПолучитьФайл(ОбъедФайл, ФайлРез, Ложь);
		ЗапуститьПриложение(ФайлРез);
	Иначе
		Сообщить("Не удалось сформировать объединенный документ. Возможно выбрано слишком большое количество пакетов");
	КонецЕсли;	
	
КонецПроцедуры
