перем КэшДокументовЭквайринга;
перем календарь;
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Отказ=Ложь;
	Для каждого стр из ДанныеДля1С Цикл
		Если Не ЗначениеЗаполнено(Стр.Терминал) Тогда
			Сообщить("Не определен терминал в строке "+Стр.НомерСтроки+ ". Загрузка не возможна");
			Отказ=Истина;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Стр.ТорговаяТочка) Тогда
			Сообщить("Не определена торговая точка в строке "+Стр.НомерСтроки+ ". Загрузка не возможна");
			Отказ=Истина;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Стр.ДокументЭквайринга) Тогда
			Сообщить("Не определен документ эквайринга в строке "+Стр.НомерСтроки+ ". Загрузка не возможна");
			Отказ=Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	ТекДок="";
	ЕстьНесовпадения=Ложь;
	Для каждого Стр из ДанныеДля1С Цикл
		Если ТекДок="" Тогда
			ТекДок=Стр.ДокументЭквайринга.ПолучитьОбъект();
			ТекДок.ЭквайрингРасшифровка.Очистить();
		ИначеЕсли ТекДок.ссылка<>Стр.ДокументЭквайринга Тогда
			Если ТекДок.СуммаДокумента=ТекДок.ЭквайрингРасшифровка.Итог("СуммаДокумента") или РазрешитьИзменениеСуммыДокумента Тогда
				//ТекДок.записать(режимзаписидокумента.Проведение);
				//Сообщить("Проведен "+ТекДок);
			Иначе
				Сообщить("Не совпадает сумма документа и расшифровка эквайринга в "+ТекДок+". Документ не записан");
				ЕстьНесовпадения=Истина;
				Если Вопрос("Открыть документ?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
					ТекДок.ПолучитьФорму().ОткрытьМодально();
				КонецЕсли;	
			КонецЕсли;	
			ТекДок=Стр.ДокументЭквайринга.ПолучитьОбъект();
			ТекДок.ЭквайрингРасшифровка.Очистить();
		КонецЕсли;
		НС=ТекДок.ЭквайрингРасшифровка.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Стр,,"НомерСтроки");
	КонецЦикла;
	Если ТекДок<>"" Тогда
		Если ТекДок.СуммаДокумента=ТекДок.ЭквайрингРасшифровка.Итог("СуммаДокумента") или РазрешитьИзменениеСуммыДокумента Тогда
			//ТекДок.записать(режимзаписидокумента.Проведение);
			//Сообщить("Проведен "+ТекДок);
		Иначе
			Сообщить("Не совпадает сумма документа и расшифровка эквайринга в "+ТекДок+". Документ не записан");
			ЕстьНесовпадения=Истина;
			Если Вопрос("Открыть документ?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				ТекДок.ПолучитьФорму().ОткрытьМодально();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Если не ЕстьНесовпадения Тогда
		ОсновныеДействияФормыЗаписать_в_SQL(неопределено);
	Иначе
		Сообщить("Есть несовпадения суммы документов эквайринга с расшифровкой. Расшифровка не записана");
	КонецЕсли;	
	
КонецПроцедуры



Процедура КаталогИмпортаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораКаталогаИмпорта = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталогаИмпорта.Заголовок = "Открытие каталога с файлами ответов из банка";
	ДиалогВыбораКаталогаИмпорта.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталогаИмпорта.Каталог = КаталогИмпорта;
	
	Если Не ДиалогВыбораКаталогаИмпорта.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогИмпорта = ДиалогВыбораКаталогаИмпорта.Каталог;
	
	ПрочитатьСоставФайлов();

КонецПроцедуры

Процедура КаталогИмпортаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(КаталогИмпорта);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыДляИмпортаОбновить(Кнопка)
	
	ПрочитатьСоставФайлов();
	
КонецПроцедуры
Процедура КоманднаяПанельФайлыДляИмпортаУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаФайлыДляИмпорта из ФайлыДляИмпорта ЦИкл
		СтрокаФайлыДляИмпорта.Загрузить = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыДляИмпортаСнятьФлажки(Кнопка)
	
	Для каждого СтрокаФайлыДляИмпорта из ФайлыДляИмпорта ЦИкл
		СтрокаФайлыДляИмпорта.Загрузить = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ФайлыДляИмпортаПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ФайлыДляИмпортаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// ОПЕРАЦИИ ПО СЧЕТАМ

Процедура КоманднаяПанельФайлыДляИмпортаЗагрузить(Кнопка)
	
	СчетЛуга=Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета","40702810738000005727",,Справочники.Организации.НайтиПоКоду("000000004"));
	СчетВкусвилла=Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета","40702810338000005729",,Справочники.Организации.НайтиПоКоду("000000006"));
	
	Данные.Очистить();
	
	//Excel = Новый COMОбъект("Excel.Application");
	
	Для каждого СтрокаСФайлом из ФайлыДляИмпорта Цикл
		
		Если НЕ СтрокаСФайлом.Загрузить Тогда
			Продолжить;
		КонецЕсли;
		
		КаталогИмпортаДанных = КаталогИмпорта;
		ИмяФайла=КаталогИмпортаДанных + "\" + СтрокаСФайлом.Файл;
		
		ВыбФайл = Новый Файл(ИмяФайла);
		Если НЕ ВыбФайл.Существует() Тогда
			Сообщить("Файл не существует! "+ИмяФайла);
			Продолжить;
		КонецЕсли;
		
		//Попытка
		Если ВыбФайл.Расширение=".txt" Тогда
			ТЗ=ПрочитатьТекст(ИмяФайла);
		Иначе	
			ТЗ=ПрочитатьЛистExcel(ИмяФайла);
		КонецЕсли;	
		//Исключение
		//				
		//КонецПопытки;
		
		Если СокрЛП(ТЗ[0][0])="TRAN_ID" Тогда
			й=0;
		Иначе
		    й=-1;
		КонецЕсли;	
		
		
		
		Пока й<=ТЗ.Количество()-2 Цикл	
			й = й + 1;
			Если НЕ ЗначениеЗаполнено(СокрЛП(ТЗ[й][5])) Тогда
				Продолжить;
			КонецЕсли;
			НС=Данные.Добавить();
			НС.TRAN_ID= СокрЛП(ТЗ[й][0]);
			НС.Банк = СокрЛП(ТЗ[й][1]);
			НС.Отделение = СокрЛП(ТЗ[й][2]);
			НС.Точка = СокрЛП(ТЗ[й][3]);
			НС.Название = СокрЛП(ТЗ[й][4]);
			НС.Терминал = СокрЛП(Формат(ТЗ[й][5],"ЧГ=0"));
			Если СтрДлина(НС.Терминал)>8 Тогда
				НС.Терминал=СтрЗаменить(ТЗ[й][5],Сред(ТЗ[й][5],3,1),"")
			КонецЕсли;	
			НС.Дата_Тран = СокрЛП(ТЗ[й][6]);
			Дата_Расч = СокрЛП(ТЗ[й][7]);
			попытка
				НС.Дата_Расч = Дата(Сред(Дата_Расч,7,4),Сред(Дата_Расч,4,2),Лев(Дата_Расч,2));
			исключение
				НС.Дата_Расч=НС.Дата_Тран;
			конецпопытки;	
			НС.Сумма_Тран = СокрЛП(ТЗ[й][8]);
			НС.Сумма_Расч = СокрЛП(ТЗ[й][9]);
			НС.Карта = СокрЛП(ТЗ[й][10]);
			НС.Код_Авт = СокрЛП(ТЗ[й][11]);
			НС.Тип = СокрЛП(ТЗ[й][12]);
			НС.ИмяФайла=ИмяФайла;
			Если найти(НС.Название,"VKUSVILL")>0 ИЛИ найти(НС.Название,"IZBENKA")>0  Тогда
				НС.Счет=СчетВкусвилла;
			ИначеЕсли найти(НС.Название,"LUG DA POLE")>0 Тогда	
				НС.Счет=СчетЛуга;
			Иначе	
				Сообщить("Не определен счет по названию точки "+НС.Название);
			КонецЕсли;	
			//ДатаОткрытия=Дата(Сред(ДатаОткрытия,7,4),Сред(ДатаОткрытия,4,2),Лев(ДатаОткрытия,2));
		КонецЦикла;

	КонецЦикла;
	ЭлементыФормы.Панель1.ТекущаяСтраница=ЭлементыФормы.Панель1.Страницы["Страница3"];
	ТЗ=Данные.Выгрузить();
	ТЗ.Свернуть("Терминал,Название");
	Для каждого стр из ТЗ Цикл
		нашли = Справочники.Терминалы.НайтиПоРеквизиту("ИД",Стр.Терминал);
		Если нашли.Пустая() Тогда
			Сообщить("Не найден терминал с ИД "+Стр.Терминал+" ("+Стр.название+")");
		КонецЕсли;	
	КонецЦикла;
	
	ОбновитьДанныеДля1С(неопределено);
	
КонецПроцедуры

Процедура ФайлыДляИмпортаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ЗапуститьПриложение(КаталогИмпорта + "\" + ВыбраннаяСтрока.Файл);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыДляИмпортаЛицевыеСчетаСотрудников(Кнопка)
	
	РегистрыСведений.ЛицевыеСчетаРаботниковОрганизации.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры


Процедура ПрочитатьСоставФайлов()
	
	ФайлыДляИмпорта.Очистить();
	
	ФайлДанных = Новый Файл(КаталогИмпорта);
	
	Если ФайлДанных.Существует() Тогда
		КаталогИмпортаДанных = КаталогИмпорта;
		МассивФайловИмпорта = НайтиФайлы(КаталогИмпорта, "*.*");
		Для Каждого ФайлИмпорта из МассивФайловИмпорта Цикл
			
			Если ФайлИмпорта.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
		
			//ДатаИзменения = ФайлИмпорта.ПолучитьВремяИзменения();
			//
			//Если ДатаИзменения < ДатаНач_Импорт Тогда
			//	Продолжить;
			//КонецЕсли;
			//
			//Если ДатаИзменения > ДатаКон_Импорт Тогда
			//	Продолжить;
			//КонецЕсли;
			//
			//Если ФайлИмпорта.Размер() > 10000000 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			СтрокаСФайлом = ФайлыДляИмпорта.Добавить();
			СтрокаСФайлом.Файл = ФайлИмпорта.Имя;
			//СтрокаСФайлом.Дата = ДатаИзменения;
			ФайлИмпорта = Неопределено;
			
			Попытка
				//ТочкаВхода = ПолучитьДеревоИзФайла(СтрокаСФайлом.Файл, Ложь);
				//
				//Если ТочкаВхода <> Неопределено Тогда
				//	СчетаПК = ПолучитьСчетаПК(ТочкаВхода, СтрокаСФайлом.Файл, Ложь);
				//	СтрокаСФайлом.ДатаОперации = Дата(СчетаПК.ДатаФормирования);
				//КонецЕсли;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//ЭлементыФормы.РамкаГруппыФайлыДляИмпорта.Заголовок = "Файлы для импорта  (" + Формат(ДатаНач_Импорт, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаКон_Импорт, "ДФ=dd.MM.yyyy") + ")";
	
	ИмпортУжеОбновляли = Истина;
	//ОсновныеДействияФормыСопоставитьСУжеЗагруженным(неопределено);
КонецПроцедуры

Процедура ОсновныеДействияФормыСводныйОтчет(Кнопка)
	ТЗ=Данные.Выгрузить();
	ТЗ.Свернуть("Точка,Терминал,Дата_Расч","Сумма_Тран,Сумма_Расч");
	ОткрытьЗначение(ТЗ);
КонецПроцедуры

Процедура ОсновныеДействияФормыСопоставитьСУжеЗагруженным(Кнопка)
	ТЗ=Данные.Выгрузить();
	ТЗ.Свернуть("Точка,Терминал,Дата_Расч","Сумма_Тран,Сумма_Расч");
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	ПоступлениеВБанкЭквайрингРасшифровка.Терминал,
	             |	СУММА(ПоступлениеВБанкЭквайрингРасшифровка.СуммаДокумента) КАК СуммаДокумента,
	             |	ПоступлениеВБанкЭквайрингРасшифровка.ТорговаяТочка,
	             |	СУММА(ПоступлениеВБанкЭквайрингРасшифровка.СуммаКомиссииБанка) КАК СуммаКомиссииБанка
	             |ИЗ
	             |	Документ.ПоступлениеВБанк.ЭквайрингРасшифровка КАК ПоступлениеВБанкЭквайрингРасшифровка
	             |ГДЕ
	             |	ПоступлениеВБанкЭквайрингРасшифровка.Ссылка.Проведен
	             |	И ПоступлениеВБанкЭквайрингРасшифровка.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	             |	И ПоступлениеВБанкЭквайрингРасшифровка.Терминал.ИД = &ИД
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПоступлениеВБанкЭквайрингРасшифровка.ТорговаяТочка,
	             |	ПоступлениеВБанкЭквайрингРасшифровка.Терминал";
				 
	Запрос=Новый Запрос(ТекстЗапроса);
	Для каждого стр из ТЗ Цикл
		Запрос.УстановитьПараметр("ДатаС",Стр.Дата_Расч);
		Запрос.УстановитьПараметр("ДатаПо",КонецДня(Стр.Дата_Расч));
		Запрос.УстановитьПараметр("ИД",Стр.Терминал);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Стр.Сумма_Расч<>Выборка.СуммаДокумента Тогда
				Сообщить("Не соответствуют суммы за "+Стр.Дата_Расч+" по терминалу "+Стр.Терминал+" в отчете "+Стр.Сумма_Расч+" в программе "+Выборка.СуммаДокумента);
			Иначе
				//Сообщить("Совпадают суммы за "+Стр.Дата_Расч+" по терминалу "+Стр.Терминал+" в отчете "+Стр.Сумма_Расч+" в программе "+Выборка.СуммаДокумента);
			КонецЕсли;	
		Иначе
			Сообщить("Не найдено данных за "+Стр.Дата_Расч+" по терминалу "+Стр.Терминал);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписать_в_SQL(Кнопка)
	
	СтрСоединения = НРег(СтрокаСоединенияИнформационнойБазы());
	СтрСоединения = СтрЗаменить(СтрСоединения, "10.0.0.40", "srv-sql01");
	СтрСоединения = СтрЗаменить(СтрСоединения, "srv-sql02", "srv-sql01");
	ЭтоКопияБазы = НРег(Константы.СтрокаПодключенияКБазе.Получить()) <> СтрСоединения;
	ЭтоКопияБазы = Ложь;
	
	Дни=Данные.Выгрузить();
	Дни.Свернуть("Дата_Расч,Счет");
	СтруктураОтбора=Новый Структура;
	Для каждого день из дни цикл
		//Если СокрЛП(День.Счет)="40702810738000005727" Тогда
		//	Продолжить;
		//КонецЕсли;	
		Сообщить(СокрЛП(День.Счет)+" - "+День.Дата_Расч);
		СтруктураОтбора.Вставить("Дата_Расч",День.Дата_Расч);
		СтруктураОтбора.Вставить("Счет",День.Счет);
		СтрокиДня=Данные.НайтиСтроки(СтруктураОтбора);
		СчетчикЦиклов = 0;
		ТекстДобавления = "DELETE FROM [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[terminal_prihod] WHERE date= '"+Формат(НачалоДня(День.Дата_Расч))+"'"+" AND id_org='" + День.Счет.Владелец.ИД + "'"+" AND schet='" + День.Счет.НомерСчета + "'";
		
		Успешно=ЗаписатьВSQL(ТекстДобавления);
		Если Не Успешно Тогда
			Сообщить("Ошибка удаления из SQL");
			Возврат;
		КонецЕсли;	
		ТекстДобавления="";
		
		Для каждого стр из СтрокиДня Цикл
			Если СчетчикЦиклов % 500 = 0 Тогда
				Если ТекстДобавления<>"" Тогда
					Успешно=ЗаписатьВSQL(ТекстДобавления);
					Если Не Успешно Тогда
						Сообщить("Ошибка записи в SQL");
						Возврат;
					КонецЕсли;	
					ТекстДобавления="";
				КонецЕсли;	
				
				ТекстДобавления = ТекстДобавления+ Символы.ПС + "INSERT INTO [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[terminal_prihod]
											|		   ([date]
											|		   ,[id_org]
											|		   ,[id_terminal]
											|		   ,[summa]
											|		   ,[Summa_tran]
											|		   ,[schet]
											|		   ,[nom_vh]
											|		   ,[date_vh]
											|		   ,[date_tran]
											|			,[Name_TT]
											|		   ,[karta])
											|VALUES ";
				
			КонецЕсли;
			ТекстДобавления = ТекстДобавления + Символы.ПС + ?(Прав(ТекстДобавления, 1) = ")", ",", "")
			+ "( '" + Формат(НачалоДня(Стр.Дата_Расч), "ДФ=yyyy-MM-dd") +  "', '" + Стр.Счет.Владелец.ИД + "', '" + Стр.терминал + "','" +Формат(Стр.Сумма_Расч, "ЧРД=.; ЧН=; ЧГ=0")+ "'"+ ",'" +Формат(Стр.Сумма_Тран, "ЧРД=.; ЧН=; ЧГ=0")+ "'"
			+",'"+Стр.Счет.НомерСчета+"',"+"'"+Стр.TRAN_ID+"',"+"'" + Формат(НачалоДня(Стр.Дата_Расч), "ДФ=yyyy-MM-dd") +"'," + "'" + Формат(Стр.Дата_Тран,"ДФ=yyyy-MM-ddTHH:mm:ss") 	+ "',"+"'"+СокрЛП(Стр.Название) 	+ "',"+"'"+СокрЛП(Стр.Карта) + "'"+")";							
			//+ "( '" + Формат(НачалоДня(СводныйПриходЭквайринг.Дата), "ДФ=yyyy-MM-dd")+  "')";							
			СчетчикЦиклов=СчетчикЦиклов+1;
		КонецЦикла;	
		
		Если ТекстДобавления<>"" Тогда
			Успешно=ЗаписатьВSQL(ТекстДобавления);
			Если Не Успешно Тогда
				Сообщить("Ошибка записи в SQL");
				Возврат;
			КонецЕсли;	
			ТекстДобавления="";
		КонецЕсли;	
		
		Если Успешно Тогда
			Сообщить("Записаны данные за "+День.Дата_Расч);
			
			ТекстЗапроса="ВЫБРАТЬ ПЕРВЫЕ 1
						 |	ПоступлениеВБанк.Ссылка
						 |ИЗ
						 |	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
						 |ГДЕ
						 |	ПоступлениеВБанк.Проведен
						 |	И НАЧАЛОПЕРИОДА(ПоступлениеВБанк.Дата, ДЕНЬ) = &Дата
						 |	И ПоступлениеВБанк.СчетОрганизации = &СчетОрганизации
						 |	И ПоступлениеВБанк.ВидОперации = &ВидОперации
						 |
						 |УПОРЯДОЧИТЬ ПО
						 |	ПоступлениеВБанк.Дата УБЫВ";
			Запрос=Новый Запрос(ТекстЗапроса);			 
			Запрос.УстановитьПараметр("Дата",НачалоДня(День.Дата_Расч));
			Запрос.УстановитьПараметр("СчетОрганизации",День.Счет);
			Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно);
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				попытка
					Выписка=Выборка.Ссылка.ПолучитьОбъект();
					Выписка.Записать(РежимЗаписиДокумента.Запись); // заполняем в выписке признак соответствия данных с SQL
				Исключение
					Сообщить(описаниеОшибки());
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;		
			
	КонецЦикла;	
	
	
	

КонецПроцедуры

Функция ЗаписатьВSQL(ТекстДобавления)
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	Успешно=Ложь;
	Для й=1 По 10 Цикл
		попытка 
	
			Connection  = Новый COMОбъект("ADODB.Connection");
			Command  = Новый COMОбъект("ADODB.Command");
			RecordSet  = Новый COMОбъект("ADODB.RecordSet");
						
			Connection.Open(СокрЛП(СтрСоединенияДанныеТовародвижение));
			Command.ActiveConnection   = Connection;
			Command.CommandText = "Begin Transaction" + Символы.ПС + ТекстДобавления + Символы.ПС + "Commit";
			RecordSet = Command.Execute();
			Успешно=Истина;
		Исключение
			
		КонецПопытки;	
		Если Успешно Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Успешно;
КонецФункции	

Процедура ОбновитьДанныеДля1С(Элемент)
	ДанныеДля1С.Очистить();
	ТЗ=Данные.Выгрузить();
	ТЗ.Свернуть("Название,Терминал,Дата_Расч,Счет","Сумма_Тран,Сумма_Расч");
	ТекстЗапроса="ВЫБРАТЬ
	             |	ПоступлениеВБанк.Ссылка,
	             |	НАЧАЛОПЕРИОДА(ПоступлениеВБанк.Дата, ДЕНЬ) КАК День,
	             |	ПоступлениеВБанк.СчетОрганизации
	             |ИЗ
	             |	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	             |ГДЕ
	             |	ПоступлениеВБанк.Дата >= &ДатаС
	             |	И ПоступлениеВБанк.Проведен
	             |	И ПоступлениеВБанк.ВидОперации = &ВидОперации";
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаС",Дата(2014,12,1));
	Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно);
	КэшДокументовЭквайринга=запрос.Выполнить().Выгрузить();;

	ТекстЗапроса="ВЫБРАТЬ
	             |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	             |	РегламентированныйПроизводственныйКалендарь.Год,
	             |	РегламентированныйПроизводственныйКалендарь.ВидДня
	             |ИЗ
	             |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	             |ГДЕ
	             |	РегламентированныйПроизводственныйКалендарь.Год >= &Год";
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Год",2014);			 
	Календарь=Запрос.Выполнить().Выгрузить();
	
	//ТаблицаКешПривязокТТ = Новый ТаблицаЗначений();
	//ТаблицаКешПривязокТТ.Колонки.Добавить("Дата");
	//ТаблицаКешПривязокТТ.Колонки.Добавить("Терминал");
	//ТаблицаКешПривязокТТ.Колонки.Добавить("ТТ");
	ТаблицаКешПривязокТТ = неопределено;
	
	Для каждого стр из ТЗ Цикл
		НС=ДанныеДля1С.Добавить();
		НС.ИД_Терминала=Стр.Терминал;
		НС.НазваниеТерминала=Стр.Название;
		НС.Терминал=Справочники.Терминалы.НайтиПоРеквизиту("ИД",Стр.Терминал);
		НС.Дата_Расч=Стр.Дата_Расч;
		НС.Счет=Стр.Счет;
		НС.ДокументЭквайринга=ПодобратьДокументЭквайринга(Стр.Дата_Расч,Стр.Счет);
		НС.СуммаДокумента=Стр.Сумма_Расч;
		НС.СуммаКомиссииБанка=Стр.Сумма_Тран-Стр.Сумма_Расч;
		НС.ТорговаяТочка=Эквайринг.Получить_ТТ_Терминала(Стр.Дата_Расч,НС.Терминал,ТаблицаКешПривязокТТ);
	КонецЦикла;	
	ДанныеДля1С.Сортировать("ДокументЭквайринга, Терминал");
КонецПроцедуры



Функция ПодобратьДокументЭквайринга(Дата, счет)
	День=НачалоДня(Дата);
	НайденнаяСтрока=Календарь.Найти(Дата,"ДатаКалендаря");
	Если найденнаяСтрока<>неопределено Тогда
		День=НайденнаяСтрока.ДатаКалендаря;
	КонецЕсли;	
	Пока  НайденнаяСтрока<>неопределено И НайденнаяСтрока.ВидДня<>Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Цикл
		День=КонецДня(День)+1;
		НайденнаяСтрока=Календарь.Найти(День,"ДатаКалендаря");
	КонецЦикла;	
		
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("День",НачалоДня(День));
	СтруктураОтбора.Вставить("СчетОрганизации",Счет);
	НайденныеДокументы=КэшДокументовЭквайринга.найтиСтроки(СтруктураОтбора);
	Если НайденныеДокументы.Количество()>0 Тогда
		Возврат НайденныеДокументы[0].ссылка;
	КонецЕсли;	
	
	Возврат неопределено;
	
КонецФункции

Процедура ДанныеДля1СВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОткрытьЗначение(ВыбраннаяСтрока[Колонка.Данные]);
КонецПроцедуры

Функция ПрочитатьЛистExcel( ИмяФайла, НомерПервойСтроки = 1, НомерПервойКолонки = 1, ВсегоСтрок = 0, ВсегоКолонок = 0) Экспорт

ТЗ = Неопределено;	
	
Excel = Новый COMОбъект("Excel.Application");
Excel.WorkBooks.Open(ИмяФайла);
Состояние("Обработка файла Microsoft Excel..."+ИмяФайла);
ЛистЭксель = Excel.Sheets(1);
Если ВсегоСтрок = 0 Тогда
    ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row;
КонецЕсли;
Если ВсегоКолонок = 0 Тогда
    ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
КонецЕсли;
Если ТЗ = Неопределено Тогда
    ТЗ =  Новый ТаблицаЗначений;
    Для Счетчик = 1 По ВсегоКолонок Цикл
        ТЗ.Колонки.Добавить("Колонка"+Счетчик, Новый ОписаниеТипов("Строка"));
    КонецЦикла;
КонецЕсли;

Для Счетчик = НомерПервойСтроки По ВсегоСтрок Цикл
    НоваяСтрока = ТЗ.Добавить();
КонецЦикла;

Область = ЛистЭксель.Range(ЛистЭксель.Cells(НомерПервойСтроки,НомерПервойКолонки), ЛистЭксель.Cells(ВсегоСтрок,ВсегоКолонок));
ДанныеТЗ = Область.Value.Выгрузить();

Для Счетчик = 0 По ВсегоКолонок-1 Цикл
    ТЗ.ЗагрузитьКолонку(ДанныеТЗ[Счетчик], Счетчик);
КонецЦикла;
ЛистЭксель = Неопределено;
Excel.WorkBooks.Close();
Excel = 0;
Возврат ТЗ;
КонецФункции

Функция ПрочитатьТекст( ИмяФайла) Экспорт

ТЗ = Неопределено;	
	
текст=Новый ТекстовыйДокумент;
Текст.Прочитать(ИмяФайла);
Состояние("Обработка файла ..."+ИмяФайла);
ВсегоСтрок = Текст.КоличествоСтрок();
ВсегоКолонок = 13;
Если ТЗ = Неопределено Тогда
    ТЗ =  Новый ТаблицаЗначений;
    Для Счетчик = 1 По ВсегоКолонок Цикл
        ТЗ.Колонки.Добавить("Колонка"+Счетчик, Новый ОписаниеТипов("Строка"));
    КонецЦикла;
КонецЕсли;
НомерПервойСтроки=1;
Для Счетчик = НомерПервойСтроки По ВсегоСтрок Цикл
    НоваяСтрока = ТЗ.Добавить();
	Строка=Текст.ПолучитьСтроку(Счетчик);
	СтрМасс=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка, Символы.Таб);
	Для й=0 По СтрМасс.Количество()-1 Цикл
		Попытка
			НоваяСтрока[й]=СтрМасс[й];
		Исключение
			
		КонецПопытки;	
		
	КонецЦикла;	
КонецЦикла;

Возврат ТЗ;
КонецФункции


Процедура Кнопка3Нажатие(Элемент)
	ТЗ=Данные.Выгрузить();
	ТЗ.Свернуть("Точка,Терминал");
	Для каждого стр из ТЗ Цикл
		Нашли=Справочники.Терминалы.НайтиПоРеквизиту("ИД",Стр.Терминал);
		Если НЕ Нашли.Пустая() и нашли<>Стр.Терминал Тогда
			Если Не ЗначениеЗаполнено(Нашли.Мерчант) Тогда
				Терминал=нашли.ПолучитьОбъект();
				Терминал.Мерчант=Стр.Точка;
				Терминал.Записать();
			Иначе
				Сообщить("Внимание! Для терминала "+Нашли+" уже задан мерчант! ");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

//+++АК LATV 2018.07.13 ИП-00018778
Процедура КоманднаяПанельДанныеДля1ССоздатьТерминалы(Кнопка)

	ФормаСозданияТерминалов = ПолучитьФорму("ФормаСозданияТерминалов", ЭтаФорма);
	
	// Заполнение формы
	Отбор = Новый Структура("Терминал", Справочники.Терминалы.ПустаяСсылка());
	НеЗаполненныеТерминалы = ДанныеДля1С.Выгрузить(Отбор, "ИД_Терминала, НазваниеТерминала");
	НеЗаполненныеТерминалы.Индексы.Добавить("ИД_Терминала, НазваниеТерминала");
	
	Для Каждого ТекСтрокаТерминала Из НеЗаполненныеТерминалы Цикл
		
		НоваяСтрока = ФормаСозданияТерминалов.Терминалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТерминала);
		
		// Мерчант
		
		НайденнаяСтрока = Данные.Найти(ТекСтрокаТерминала.ИД_Терминала, "Терминал");
		Если НайденнаяСтрока <> Неопределено Тогда
			НоваяСтрока.Мерчант = НайденнаяСтрока.Точка;
		КонецЕсли;
		
		Отбор = Новый Структура("ИД_Терминала", ТекСтрокаТерминала.ИД_Терминала);
		
		// Расположение терминала
		НазваниеТерминала = ТекСтрокаТерминала.НазваниеТерминала; // VKUSVILL 1321_1
		КодТерминала = СтрЗаменить(НазваниеТерминала, "VKUSVILL ", ""); // 1321_1
		ПозицияРазделителя = Найти(КодТерминала, "_");
		Если ПозицияРазделителя = 0 Тогда
			НомерТТ				= КодТерминала;
			НомерРабочегоМеста	= "";
		Иначе
			НомерТТ				= Лев(КодТерминала, ПозицияРазделителя - 1);
			НомерРабочегоМеста	= Сред(КодТерминала, ПозицияРазделителя + 1);
		КонецЕсли;
		
		НоваяСтрока.НомерТТ	= НомерТТ;
		НоваяСтрока.ID_SQL	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ККМ %1.%2", НомерТТ, НомерРабочегоМеста);
		
	КонецЦикла;
	
	ФормаСозданияТерминалов.ОткрытьМодально();
	
	ТаблицаКешПривязокТТ = Неопределено;
	Для Каждого ТекСтрока Из ФормаСозданияТерминалов.Терминалы Цикл
		
		Если ТекСтрока.Терминал.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ИД_Терминала, Терминал", ТекСтрока.ИД_Терминала, Справочники.Терминалы.ПустаяСсылка());
		НайденныеСтроки = ДанныеДля1С.НайтиСтроки(Отбор);
		Для Каждого ТекСтрокаДанных Из НайденныеСтроки Цикл
			ТекСтрокаДанных.Терминал		= ТекСтрока.Терминал;
			ТекСтрокаДанных.ТорговаяТочка	= Эквайринг.Получить_ТТ_Терминала(ТекСтрокаДанных.Дата_Расч
				, ТекСтрокаДанных.Терминал, ТаблицаКешПривязокТТ);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры



