&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
перем Данные,ТекстОписаниеОшибки,ТестовыйАдрес;

	УстановитьПривилегированныйРежим(Истина);

	Пользователь=Пользователи.АвторизованныйПользователь();
	Элементы.ВыборкаПоРегистру.Видимость=
		найти(врег(Пользователь.Наименование),"ТЕСТ")>0 
		или 
		найти(врег(Пользователь.Наименование),"ВЕРЕЩАГИН")>0;
	Элементы.ВыборкаПроверок.Видимость=Элементы.ВыборкаПоРегистру.Видимость;
	//Элементы.ПроверкиКачестваКоличество.Видимость=Элементы.ВыборкаПоРегистру.Видимость;
	//Элементы.ОбращенияПокупателейКоличество.Видимость=Элементы.ВыборкаПоРегистру.Видимость;

	ТестовыйАдрес="";

	Отказ=НЕ АК_РассылкиПоставщикамТехнологам.ПолучитьПараметрыНастройкиРассылокПоставщикамТехнологам(Данные,ТекстОписаниеОшибки);
	Если Отказ тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении данных настройки: "+ТекстОписаниеОшибки);
	иначе
		Попытка
			Если ТипЗнч(Данные)=Тип("Структура") тогда
				Для Каждого Элемент из Данные цикл
					попытка
						Если Элемент.Ключ="ВидыКонтактнойИнформацииПроизводитель" тогда
							ВидыКонтактнойИнформацииПроизводитель.Загрузить(Элемент.Значение);
						ИначеЕсли Элемент.Ключ="ВидыКонтактнойИнформацииТехнолог" тогда
							ВидыКонтактнойИнформацииТехнолог.Загрузить(Элемент.Значение);
						ИначеЕсли 
							(Элемент.Ключ="ИнтервалНеделя1"	ИЛИ	Элемент.Ключ="ИнтервалНеделя2" ИЛИ Элемент.Ключ="ИнтервалМесяц" ИЛИ	Элемент.Ключ="ИнтервалПроизвольный")
							И Элемент.Значение 
						тогда
							ЭтаФорма[Элемент.Ключ]	= Элемент.Значение;
						ИначеЕсли Элемент.Ключ="ИнтервалДни" тогда
							ИнтервалДни=Элемент.Значение;
						ИначеЕсли Элемент.Ключ="ТестовыйАдрес" тогда
							ТестовыйАдрес=Элемент.Значение;
						ИначеЕсли Элемент.Ключ="АдресПоУмолчанию" тогда
							АдресПоУмолчанию=Элемент.Значение;
						ИначеЕсли Элемент.Ключ="ИспользоватьТестовыйАдрес" тогда
							ИспользоватьТестовыйАдрес=Элемент.Значение;
						ИначеЕсли Элемент.Ключ="о1" тогда
							о1=Элемент.Значение;
						ИначеЕсли Элемент.Ключ="о2" тогда
							о2=Элемент.Значение;
						КонецЕсли;
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения данных """+Элемент.Ключ+""": "+ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные повреждены");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные повреждены");
		КонецПопытки;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТестовыйАдрес) и ПустаяСтрока(АдресПоУмолчанию) тогда
		АдресПоУмолчанию=ТестовыйАдрес;
	КонецЕсли;
	Элементы.ИнтервалДни.Доступность=ИнтервалПроизвольный;
	//Элементы.НадписьНетОтчета.Видимость=
	//	(ИнтервалПроизвольный и ИнтервалДни=0)
	//	ИЛИ НЕ (ИнтервалНеделя1 или ИнтервалНеделя2 или ИнтервалМесяц или ИнтервалПроизвольный) ;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)
	УстановитьПривилегированныйРежим(Истина);
    Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь);
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции 


&НаКлиенте
Процедура ОбновитьЗначениеКонстанты()
	Элементы.ТекстРазмерФайлов.Видимость=Ложь;
	ПолучитьДанныеДляОтчета();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеКонстантыНаСервере()
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыКонтактнойИнформацииПроизводителяПриИзменении(Элемент)
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура ВидыКонтактнойИнформацииТехнологаПриИзменении(Элемент)
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалНеделя1ПриИзменении(Элемент)
	ВыборИнтервала(Элемент.Имя);
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалНеделя2ПриИзменении(Элемент)
	ВыборИнтервала(Элемент.Имя);
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалМесяцПриИзменении(Элемент)
	ВыборИнтервала(Элемент.Имя);
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПроизвольныйПриИзменении(Элемент)
	ВыборИнтервала(Элемент.Имя);
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаСервере
Процедура ВыборИнтервала(ЭлементИмя)
	ИнтервалНеделя1			= Ложь;
	ИнтервалНеделя2			= Ложь;
	ИнтервалМесяц			= Ложь;
	ИнтервалПроизвольный	= Ложь;
	ЭтаФорма[ЭлементИмя]	= Истина;
	Элементы.ИнтервалДни.Доступность=ИнтервалПроизвольный;
	//Элементы.НадписьНетОтчета.Видимость=
	//	(ИнтервалПроизвольный и ИнтервалДни=0)
	//	ИЛИ НЕ (ИнтервалНеделя1 или ИнтервалНеделя2 или ИнтервалМесяц или ИнтервалПроизвольный) ;
	РасставитьДаты();
КонецПроцедуры

Процедура РасставитьДаты()
	Если ИнтервалПроизвольный тогда
		КонецПериода=	КонецДня(НачалоДня(ТекущаяДата())-1);
		НачалоПериода=	НачалоДня(КонецПериода)-(ИнтервалДни-1)*24*60*60;
	ИначеЕсли ИнтервалМесяц тогда
		КонецПериода=	НачалоМесяца(ТекущаяДата())-1;
		НачалоПериода=	НачалоМесяца(КонецПериода);
	ИначеЕсли ИнтервалНеделя2 тогда
		КонецПериода=	НачалоНедели(ТекущаяДата())-1;
		НачалоПериода=	НачалоНедели(НачалоНедели(КонецПериода)-1);
	ИначеЕсли ИнтервалНеделя1 тогда
		КонецПериода=	НачалоНедели(ТекущаяДата())-1;
		НачалоПериода=	НачалоНедели(КонецПериода);
	Иначе 
		КонецПериода=	КонецДня(ТекущаяДата());
		НачалоПериода=	НачалоДня(КонецПериода);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИнтервалДниПриИзменении(Элемент)
	ИнтервалДни=макс(1,ИнтервалДни);
	ВыборИнтервала("ИнтервалПроизвольный");
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура ТестПроизводители(Команда)
	ТестПроизводителиНаСервере();
	Элементы.ТестКонтакты.Видимость=Истина;
	Элементы.ТестКонтакты2.Видимость=Истина;
КонецПроцедуры

&НаСервере
Процедура ТестПроизводителиНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АК_НастройкиРассылокПоставщикамТехнологам.Поставщик КАК Поставщик
		|ПОМЕСТИТЬ НеУведомлять
		|ИЗ
		|	РегистрСведений.АК_НастройкиРассылокПоставщикамТехнологам КАК АК_НастройкиРассылокПоставщикамТехнологам
		|ГДЕ
		|	НЕ АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьПоставщикаПриРассылке
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеТоваровУслуг.Контрагент КАК Производитель
		|ПОМЕСТИТЬ ПоНакладным
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
		|	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
		|	И ПоступлениеТоваровУслуг.Контрагент <> &ПроизводительПустаяСсылка
		|	И ПоступлениеТоваровУслуг.Контрагент.ЯвляетсяПоставщиком
		|	И НЕ ПоступлениеТоваровУслуг.Контрагент.ОказываетРегламентныеУслуги
		|	И НЕ ПоступлениеТоваровУслуг.Контрагент.ЯвляетсяАрендодателем
		|	И ПоступлениеТоваровУслуг.Контрагент.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств
		|	И НЕ ПоступлениеТоваровУслуг.Контрагент В
		|				(ВЫБРАТЬ
		|					НеУведомлять.Поставщик
		|				ИЗ
		|					НеУведомлять)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныйОрдерСклад.Поставщик
		|ИЗ
		|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
		|ГДЕ
		|	НЕ ПриходныйОрдерСклад.ПометкаУдаления
		|	И ПриходныйОрдерСклад.Дата МЕЖДУ &Дата1 И &Дата2
		|	И (ВЫРАЗИТЬ(ПриходныйОрдерСклад.Поставщик КАК Справочник.Контрагенты)) <> &ПроизводительПустаяСсылка
		|	И НЕ ВЫРАЗИТЬ(ПриходныйОрдерСклад.Поставщик КАК Справочник.Контрагенты).ЯвляетсяАрендодателем
		|	И НЕ ВЫРАЗИТЬ(ПриходныйОрдерСклад.Поставщик КАК Справочник.Контрагенты).ОказываетРегламентныеУслуги
		|	И ВЫРАЗИТЬ(ПриходныйОрдерСклад.Поставщик КАК Справочник.Контрагенты).ЯвляетсяПоставщиком
		|	И ПриходныйОрдерСклад.Поставщик.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств
		|	И НЕ ВЫРАЗИТЬ(ПриходныйОрдерСклад.Поставщик КАК Справочник.Контрагенты) В
		|				(ВЫБРАТЬ
		|					НеУведомлять.Поставщик
		|				ИЗ
		|					НеУведомлять)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоНакладным.Производитель КАК Производитель
		|ПОМЕСТИТЬ Производители
		|ИЗ
		|	ПоНакладным КАК ПоНакладным
		|ГДЕ
		|	ПоНакладным.Производитель <> &ПроизводительПустаяСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаКонтрагентов.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛицаКонтрагентов.Владелец КАК Производитель
		|ПОМЕСТИТЬ КонтактныеЛица
		|ИЗ
		|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.Владелец В
		|			(ВЫБРАТЬ
		|				Производители.Производитель
		|			ИЗ
		|				Производители)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтактноеЛицо,
		|	Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Контакт,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.Контрагенты) КАК Контрагент
		|ПОМЕСТИТЬ КонтрагентыСКонтактами
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.Контрагенты) В
		|			(ВЫБРАТЬ
		|				Производители.Производитель
		|			ИЗ
		|				Производители)
		|	И КонтактнаяИнформация.Тип = &ТипЭП
		|	И КонтактнаяИнформация.Вид В(&ВидыКонтактнойИнформацииПоставщиков)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)),
		|	КонтактныеЛица.КонтактноеЛицо.Владелец
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтактныеЛица КАК КонтактныеЛица
		|		ПО ((ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.КонтактныеЛицаКонтрагентов)) = КонтактныеЛица.КонтактноеЛицо)
		|ГДЕ
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.КонтактныеЛицаКонтрагентов) В
		|			(ВЫБРАТЬ
		|				КонтактныеЛица.КонтактноеЛицо
		|			ИЗ
		|				КонтактныеЛица)
		|	И КонтактнаяИнформация.Тип = &ТипЭП
		|	И КонтактнаяИнформация.Вид В(&ВидыКонтактнойИнформацииПоставщиков)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АК_РассылкиПоставщикамТехнологамОбороты.Производитель КАК Производитель
		|ПОМЕСТИТЬ Претензии
		|ИЗ
		|	РегистрНакопления.АК_РассылкиПоставщикамТехнологам.Обороты(&Дата1, &Дата2, , ) КАК АК_РассылкиПоставщикамТехнологамОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрагентыСКонтактами.Контакт,
		|	ПоНакладным.Производитель КАК Объект,
		|	ВЫБОР
		|		КОГДА КонтрагентыСКонтактами.Контакт ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Найден,
		|	ВЫБОР
		|		КОГДА Претензии.Производитель ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьЖалобы
		|ИЗ
		|	ПоНакладным КАК ПоНакладным
		|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрагентыСКонтактами КАК КонтрагентыСКонтактами
		|		ПО ПоНакладным.Производитель = КонтрагентыСКонтактами.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Претензии КАК Претензии
		|		ПО ПоНакладным.Производитель = Претензии.Производитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Объект
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Дата1", ТекущаяДата()-365*24*60*60);
	Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипЭП", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110"));
	Запрос.УстановитьПараметр("ПроизводительПустаяСсылка", Справочники.Контрагенты.ПустаяСсылка());

	ВидыКИ=Новый СписокЗначений;
	Для Каждого СтрокаВида из ВидыКонтактнойИнформацииПроизводитель цикл
		ВидыКИ.Добавить(СтрокаВида.ВидКонтактнойИнформации);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформацииПоставщиков", ВидыКИ);
	
	ТестКонтакты.Загрузить(Запрос.Выполнить().Выгрузить());

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ТестТехнологи(Команда)
	ТестТехнологиНаСервере();
	Элементы.ТестКонтакты.Видимость=Истина;
	Элементы.ТестКонтакты2.Видимость=Истина;
КонецПроцедуры

&НаСервере
Процедура ТестТехнологиНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка КАК Технолог
		|ПОМЕСТИТЬ ВсеТехнологи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ЭтоГруппа
		|	И НЕ Пользователи.ПометкаУдаления
		|	И Пользователи.Технолог
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеТехнологи.Технолог КАК Технолог
		|ПОМЕСТИТЬ Технологи
		|ИЗ
		|	ВсеТехнологи КАК ВсеТехнологи
		|ГДЕ
		|	ВсеТехнологи.Технолог <> &ТехнологПустаяСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Контакт,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.Пользователи) КАК Технолог
		|ПОМЕСТИТЬ ТехнологиСКонтактами
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.Пользователи) В
		|			(ВЫБРАТЬ
		|				Технологи.Технолог
		|			ИЗ
		|				Технологи)
		|	И КонтактнаяИнформация.Тип = &ТипЭП
		|	И КонтактнаяИнформация.Вид В(&ВидыКонтактнойИнформацииТехнологов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АК_РассылкиПоставщикамТехнологамОбороты.Технолог КАК Технолог
		|ПОМЕСТИТЬ Претензии
		|ИЗ
		|	РегистрНакопления.АК_РассылкиПоставщикамТехнологам.Обороты(&Дата1, &Дата2, , ) КАК АК_РассылкиПоставщикамТехнологамОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТехнологи.Технолог КАК Объект,
		|	ТехнологиСКонтактами.Контакт,
		|	ВЫБОР
		|		КОГДА ТехнологиСКонтактами.Контакт ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Найден,
		|	ВЫБОР
		|		КОГДА Претензии.Технолог ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьЖалобы
		|ИЗ
		|	ВсеТехнологи КАК ВсеТехнологи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТехнологиСКонтактами КАК ТехнологиСКонтактами
		|		ПО ВсеТехнологи.Технолог = ТехнологиСКонтактами.Технолог
		|		ЛЕВОЕ СОЕДИНЕНИЕ Претензии КАК Претензии
		|		ПО ВсеТехнологи.Технолог = Претензии.Технолог
		|
		|УПОРЯДОЧИТЬ ПО
		|	Объект
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Дата1", ТекущаяДата()-365*24*60*60);
	Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипЭП", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТехнологПустаяСсылка", Справочники.Пользователи.ПустаяСсылка());

	ВидыКИ=Новый СписокЗначений;
	Для Каждого СтрокаВида из ВидыКонтактнойИнформацииТехнолог цикл
		ВидыКИ.Добавить(СтрокаВида.ВидКонтактнойИнформации);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформацииТехнологов", ВидыКИ);
	
	ТестКонтакты.Загрузить(Запрос.Выполнить().Выгрузить());

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Найти(этаформа.ИмяФормы,"ВнешняяОбработка.")=0 тогда
		Если не ПустаяСтрока(о1) тогда
			Файл = Новый Файл(о1); 
			Если Файл.Существует() тогда
				//ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
				Отказ=Истина;
				
				АдресХранилища = "";
			    Результат = ПоместитьФайл(АдресХранилища, сокрлп(о1), , Ложь);
			    ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
			    // Откроем форму подключенной внешней обработки
			    ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	РасставитьДаты();
	ТемаПисьмаПоУмолчанию();
	ОбработкаОжидания(0.1);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРассылку(Команда)
	
	ДанныеОтчета=Новый СписокЗначений;
	СписокФайлов=Новый СписокЗначений;
	
	ПоказатьОповещениеПользователя("Формирование отчета",,"Получение данных");
	СформироватьОтчетНаСервере(ДанныеОтчета,СписокФайлов);
	
	ПоказатьОповещениеПользователя("Формирование отчета",,"Создание документа HTML");
	ТекстПисьма=СформироватьПисьмоHTML(ДанныеОтчета);

	//ВсегоФайлов=СписокФайловВХранилище.Количество();
	//Если ВсегоФайлов>0 тогда
	//	ПоказатьОповещениеПользователя("Извлечение файлов",,"Всего: "+ВсегоФайлов);
	//	СписокФайлов=Новый СписокЗначений;
	//	МассивОписаний=Новый Массив;
	//	ВремКат=КаталогВременныхФайлов();
	//	Для Каждого ЭлементСписка из СписокФайловВХранилище цикл
	//		ИмяФайла=ВремКат+ЭлементСписка.Представление;
	//		Описание=Новый ОписаниеПередаваемогоФайла(ИмяФайла,ЭлементСписка.Значение);
	//		СписокФайлов.Добавить(ИмяФайла);
	//		МассивОписаний.Добавить(Описание);
	//	КонецЦикла;
	//	ПолучитьФайлы(МассивОписаний,,,Ложь);
	//КонецЕсли;
	
	Адрес=сокрлп(АдресПоУмолчанию);
	ПоказатьОповещениеПользователя("Отправка сообщения",,""+Адрес);
	
	Если ПустаяСтрока(ТемаПисьма) тогда
		ТемаПисьмаПоУмолчанию();
	КонецЕсли;
	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("Тема", сокрлп(ТемаПисьма));
	СтруктураНовогоПисьма.Вставить("ВидТекста", ПредопределенноеЗначение("Перечисление.ВидыТекстовЭлектронныхПисем.HTML"));
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений",СписокФайлов);
	СтруктураНовогоПисьма.Вставить("Тело", ТекстПисьма);	
	
	Кому = Новый СписокЗначений;
	Кому.Добавить(Адрес);		
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	Попытка
		ОтправитьПоПочтеHTML(СтруктураНовогоПисьма);
		ПоказатьОповещениеПользователя("Сообщение отправлено",,""+Адрес);
	Исключение
	    Сообщить("Ошибка: "+ОписаниеОшибки());
	КонецПопытки; 
			
	ПоказатьОповещениеПользователя("Удаление временных файлов",,"Всего: "+СписокФайлов.Количество());
	УдалитьФайлыНаСервере(СписокФайлов);
	
	ПоказатьОповещениеПользователя("Отправка завершена",,"");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлыНаСервере(СписокФайлов)
	Для Каждого ЭлементСписка из СписокФайлов цикл
		попытка
			УдалитьФайлы(ЭлементСписка.Значение);
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ОтправитьПоПочтеHTML(СтруктураНовогоПисьма)  Экспорт
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	СпАдресов=Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов=РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение,";");	
		Для каждого Эл Из МассивАдресов Цикл
			СпАдресов.Добавить(Сокрлп(Эл));
		КонецЦикла; 
	КонецЦикла;
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = СтруктураНовогоПисьма.Тело;
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	ОбщийРазмерФайлов=0;
	
	Для каждого Эл1 Из СтруктураНовогоПисьма.СписокФайловВложений Цикл
		Файл = Новый Файл(Эл1.Значение); 

		Если Файл.Существует() тогда
			ОбщийРазмерФайлов=ОбщийРазмерФайлов+Файл.Размер();
			Письмо.Вложения.Добавить(Эл1.Значение);
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	Элементы.ТекстРазмерФайлов.Заголовок="Всего файлов: "+СтруктураНовогоПисьма.СписокФайловВложений.Количество()+", объем "+Окр(ОбщийРазмерФайлов/1024/1024,1)+" Мб";
	Элементы.ТекстРазмерФайлов.Видимость=Истина;
	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = Адрес.Значение;
	КонецЦикла; 
	Попытка
		Почта.Послать(Письмо);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось отправить сообщение из=за ошибки почтового сервера: "+ОписаниеОшибки());
	КонецПопытки;
	Почта.Отключиться();
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт 
	
	МассивСтрок = Новый Массив(); 
	Если Разделитель = " " Тогда 
		Стр = СокрЛП(Стр); 
		Пока Истина Цикл 
			Поз = Найти(Стр,Разделитель); 
			Если Поз=0 Тогда 
				МассивСтрок.Добавить(Стр); 
				Возврат МассивСтрок; 
			КонецЕсли; 
			МассивСтрок.Добавить(Лев(Стр,Поз-1)); 
			Стр = СокрЛ(Сред(Стр,Поз)); 
		КонецЦикла; 
	Иначе 
		ДлинаРазделителя = СтрДлина(Разделитель); 
		Пока Истина Цикл 
			Поз = Найти(Стр,Разделитель); 
			Если Поз=0 Тогда 
				МассивСтрок.Добавить(Стр); 
				Возврат МассивСтрок; 
			КонецЕсли; 
			МассивСтрок.Добавить(Лев(Стр,Поз-1)); 
			Стр = Сред(Стр,Поз+ДлинаРазделителя); 
		КонецЦикла; 
	КонецЕсли; 
КонецФункции // глРазложить

&НаСервере
Функция СуществуетФайлОбращенияНаСервере(ИмяФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	КаталогФайлов = Константы.КаталогХраненияФайловКартинок.Получить();
	
	Если Прав(КаталогФайлов, 1) <> "\" Тогда
		КаталогФайлов = КаталогФайлов + "\";
	КонецЕсли;	
	
	КаталогФайлов = КаталогФайлов + "ОбращенияПокупателей\";
	
	Файл = Новый Файл(КаталогФайлов + ИмяФайла); 

	Возврат Файл.Существует();
	
КонецФункции	

&НаСервере
Функция ПолучитьАдресФайлаССервера(ИмяФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	КаталогФайлов = Константы.КаталогХраненияФайловКартинок.Получить();
	
	Если Прав(КаталогФайлов, 1) <> "\" Тогда
		КаталогФайлов = КаталогФайлов + "\";
	КонецЕсли;	
	
	КаталогФайлов = КаталогФайлов + "ОбращенияПокупателей\";
	
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(КаталогФайлов + ИмяФайла));
	
КонецФункции	

&НаКлиенте
Процедура АдресПоУмолчаниюПриИзменении(Элемент)
	Элементы.ВыполнитьРассылку.Доступность=(ПроверкиКачестваКоличество>0 или ОбращенияПокупателейКоличество>0) и Найти(АдресПоУмолчанию,"@")>0;
	Элементы.СоздатьДокументWord.Доступность=Элементы.ВыполнитьРассылку.Доступность;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТестовыйАдресПриИзменении(Элемент)
	ОбновитьЗначениеКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	КонтрольДат();
	ТемаПисьмаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	КонтрольДат();
	д1=НачалоПериода;
	д2=КонецПериода;
	
	ВыборИнтервала("ИнтервалПроизвольный");
	ИнтервалДни=(НачалоДня(д2)-НачалоДня(д1))/(24*60*60)+1;
	
	НачалоПериода=д1;
	КонецПериода=д2;

	ТемаПисьмаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДат()
	Если НЕ ЗначениеЗаполнено(КонецПериода) тогда
		КонецПериода=КонецДня(ТекущаяДата());
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НачалоПериода) или НачалоПериода>=КонецПериода тогда
		НачалоПериода=НачалоДня(КонецПериода);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппаВидыКонтактнойИнформацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ТестКонтакты.Очистить();
	Элементы.ТестКонтакты.Видимость=Ложь;
	Элементы.ТестКонтакты2.Видимость=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ПоставитьМаркер(Команда)
	а=1;
	//ТЧ=Элементы
	//МассивИдентификаторовСтрок = Элементы.ТЧ.ВыделенныеСтроки;
	//Для каждого ИдентификаторСтроки из МассивИдентификаторовСтрок Цикл
	// МассивСтрокДляПечати.Добавить(Объект.ТЧ.НайтиПоИдентификатору(ИдентификаторСтроки));
	//КонецЦикла;
	//ИсточникСтрок = МассивСтрокДляПечати;
КонецПроцедуры


&НаКлиенте
Процедура СнятьМаркер(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьДанные(Команда)
	ПолучитьДанныеДляОтчета();
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьДанныеДляОтчета()
	ПоказатьОповещениеПользователя("Получение данных",,""+Формат(НачалоПериода,"ДФ=dd.MM.yy")+" - "+Формат(НачалоПериода,"ДФ=dd.MM.yy"));
	ПолучитьДанныеДляОтчетаНаСервере();
	ПоказатьОповещениеПользователя("Получение данных",,"Данные получены");
	Элементы.ВыполнитьРассылку.Доступность=(ПроверкиКачестваКоличество>0 или ОбращенияПокупателейКоличество>0) и Найти(АдресПоУмолчанию,"@")>0;
	Элементы.СоздатьДокументWord.Доступность=Элементы.ВыполнитьРассылку.Доступность;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаИсходныеДанные()
	Возврат 
		"ВЫБРАТЬ
		|	ТаблицаПоставщики.Поставщик КАК Поставщик,
		|	ТаблицаПоставщики.Отмечен КАК Отмечен
		|ПОМЕСТИТЬ ОтметкиПоставщиков
		|ИЗ
		|	&ТаблицаПоставщики КАК ТаблицаПоставщики
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Отмечен,
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТехнологи.Технолог КАК Технолог,
		|	ТаблицаТехнологи.Отмечен КАК Отмечен
		|ПОМЕСТИТЬ ОтметкиТехнологов
		|ИЗ
		|	&ТаблицаТехнологи КАК ТаблицаТехнологи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Технолог,
		|	Отмечен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТипыОбращений.ТипОбращения КАК ТипОбращения,
		|	ТипыОбращений.Отмечен КАК Отмечен
		|ПОМЕСТИТЬ ОтметкиОбращений
		|ИЗ
		|	&ТаблицаТипыОбращений КАК ТипыОбращений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипОбращения,
		|	Отмечен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТипыЖалоб.ТипЖалобы КАК ТипЖалобы,
		|	ТаблицаТипыЖалоб.Отмечен КАК Отмечен
		|ПОМЕСТИТЬ ОтметкиЖалоб
		|ИЗ
		|	&ТаблицаТипыЖалоб КАК ТаблицаТипыЖалоб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипЖалобы,
		|	Отмечен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТипыЖалоб.Ссылка КАК Ссылка,
		|	ТипыЖалоб.УведомлятьТехнологаПриРассылке,
		|	ТипыЖалоб.УведомлятьПоставщикаПриРассылке
		|ПОМЕСТИТЬ ПодходящиеТипыЖалоб
		|ИЗ
		|	Справочник.ТипыЖалоб КАК ТипыЖалоб
		|ГДЕ
		|	(ТипыЖалоб.УведомлятьТехнологаПриРассылке
		|			ИЛИ ТипыЖалоб.УведомлятьПоставщикаПриРассылке)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ТипЖалобыПустаяСсылка,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТипыОбращенийПокупателей.Ссылка КАК Ссылка,
		|	ТипыОбращенийПокупателей.УведомлятьПоставщикаПриРассылке,
		|	ТипыОбращенийПокупателей.УведомлятьТехнологаПриРассылке
		|ПОМЕСТИТЬ ПодходящиеТипыОбращений
		|ИЗ
		|	Справочник.ТипыОбращенийПокупателей КАК ТипыОбращенийПокупателей
		|ГДЕ
		|	(ТипыОбращенийПокупателей.УведомлятьПоставщикаПриРассылке
		|			ИЛИ ТипыОбращенийПокупателей.УведомлятьТехнологаПриРассылке)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбращенияПокупателей.id_OK,
		|	ОбращенияПокупателей.GUID_Загрузки,
		|	ОбращенияПокупателей.ДатаДок,
		|	ОбращенияПокупателей.Производитель КАК Производитель,
		|	ОбращенияПокупателей.Технолог КАК Технолог,
		|	ОбращенияПокупателей.ТипОбращения,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.Номенклатура,
		|	ОбращенияПокупателей.Номенклатура.Родитель КАК Группа
		|ПОМЕСТИТЬ ПодходящиеОбращения
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ОбращенияПокупателей.ТипОбращения В
		|			(ВЫБРАТЬ
		|				ПодходящиеТипыОбращений.Ссылка
		|			ИЗ
		|				ПодходящиеТипыОбращений)
		|	И ОбращенияПокупателей.ТипЖалобы В
		|			(ВЫБРАТЬ
		|				ПодходящиеТипыЖалоб.Ссылка
		|			ИЗ
		|				ПодходящиеТипыЖалоб)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Производитель,
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка,
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Производитель КАК Производитель,
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Технолог КАК Технолог,
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Номенклатура,
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Номенклатура.Родитель КАК Группа,
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Дата
		|ПОМЕСТИТЬ ПодходящиеПроверкиКачества
		|ИЗ
		|	Документ.ПроверкаКачестваТоваров.СоставПоказателей КАК ПроверкаКачестваТоваровСоставПоказателей
		|ГДЕ
		|	НЕ ПроверкаКачестваТоваровСоставПоказателей.Маркер = &МаркерЗеленый
		|	И НЕ ПроверкаКачестваТоваровСоставПоказателей.Маркер = &МаркерПусто
		|	И ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПроверкаКачестваТоваровСоставПоказателей.Ссылка.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Производитель,
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеОбращения.Производитель КАК Производитель
		|ПОМЕСТИТЬ ВыборкаПроизводителей
		|ИЗ
		|	ПодходящиеОбращения КАК ПодходящиеОбращения
		|ГДЕ
		|	НЕ ПодходящиеОбращения.Производитель = &ПроизводительПустаяСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеПроверкиКачества.Производитель
		|ИЗ
		|	ПодходящиеПроверкиКачества КАК ПодходящиеПроверкиКачества
		|ГДЕ
		|	НЕ ПодходящиеПроверкиКачества.Производитель = &ПроизводительПустаяСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеОбращения.Технолог КАК Технолог
		|ПОМЕСТИТЬ ВыборкаТехнологов
		|ИЗ
		|	ПодходящиеОбращения КАК ПодходящиеОбращения
		|ГДЕ
		|	НЕ ПодходящиеОбращения.Технолог = &ТехнологПустаяСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеПроверкиКачества.Технолог
		|ИЗ
		|	ПодходящиеПроверкиКачества КАК ПодходящиеПроверкиКачества
		|ГДЕ
		|	ПодходящиеПроверкиКачества.Технолог = &ТехнологПустаяСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыборкаПроизводителей.Производитель КАК Производитель,
		|	ЕСТЬNULL(ОтметкиПоставщиков.Отмечен, Ложь) КАК Отмечен
		|ПОМЕСТИТЬ ПроизводителиСОтметками
		|ИЗ
		|	ВыборкаПроизводителей КАК ВыборкаПроизводителей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтметкиПоставщиков КАК ОтметкиПоставщиков
		|		ПО ВыборкаПроизводителей.Производитель = ОтметкиПоставщиков.Поставщик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыборкаТехнологов.Технолог КАК Технолог,
		|	ЕСТЬNULL(ОтметкиТехнологов.Отмечен, ИСТИНА) КАК Отмечен
		|ПОМЕСТИТЬ ТехнологиСОтметками
		|ИЗ
		|	ВыборкаТехнологов КАК ВыборкаТехнологов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтметкиТехнологов КАК ОтметкиТехнологов
		|		ПО ВыборкаТехнологов.Технолог = ОтметкиТехнологов.Технолог
		|ГДЕ
		|	НЕ ВыборкаТехнологов.Технолог = &ТехнологПустаяСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Технолог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеОбращения.ТипОбращения КАК ТипОбращения,
		|	ЕСТЬNULL(ОтметкиОбращений.Отмечен, ИСТИНА) КАК Отмечен
		|ПОМЕСТИТЬ ТипыОбращенийСОтметками
		|ИЗ
		|	ПодходящиеОбращения КАК ПодходящиеОбращения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтметкиОбращений КАК ОтметкиОбращений
		|		ПО ПодходящиеОбращения.ТипОбращения = ОтметкиОбращений.ТипОбращения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипОбращения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеОбращения.ТипЖалобы КАК ТипЖалобы,
		|	ЕСТЬNULL(ОтметкиЖалоб.Отмечен, ИСТИНА) КАК Отмечен
		|ПОМЕСТИТЬ ТипыЖалобСОтметками
		|ИЗ
		|	ПодходящиеОбращения КАК ПодходящиеОбращения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтметкиЖалоб КАК ОтметкиЖалоб
		|		ПО ПодходящиеОбращения.ТипЖалобы = ОтметкиЖалоб.ТипЖалобы
		|ГДЕ
		|	НЕ ПодходящиеОбращения.ТипЖалобы = &ТипЖалобыПустаяСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипЖалобы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроизводителиСОтметками.Производитель КАК Поставщик,
		|	ПроизводителиСОтметками.Отмечен
		|ИЗ
		|	ПроизводителиСОтметками КАК ПроизводителиСОтметками
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТехнологиСОтметками.Технолог КАК Технолог,
		|	ТехнологиСОтметками.Отмечен
		|ИЗ
		|	ТехнологиСОтметками КАК ТехнологиСОтметками
		|ГДЕ
		|	НЕ ТехнологиСОтметками.Технолог = &ТехнологПустаяСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Технолог
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТипыОбращенийСОтметками.ТипОбращения КАК ТипОбращения,
		|	ТипыОбращенийСОтметками.Отмечен
		|ИЗ
		|	ТипыОбращенийСОтметками КАК ТипыОбращенийСОтметками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипОбращения
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТипыЖалобСОтметками.ТипЖалобы КАК ТипЖалобы,
		|	ТипыЖалобСОтметками.Отмечен
		|ИЗ
		|	ТипыЖалобСОтметками КАК ТипыЖалобСОтметками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипЖалобы
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеОбращения.id_OK КАК id_OK,
		|	ПодходящиеОбращения.GUID_Загрузки,
		|	ПодходящиеОбращения.ДатаДок КАК ДатаДок,
		|	ПодходящиеОбращения.Производитель,
		|	ПодходящиеОбращения.Технолог,
		|	ПодходящиеОбращения.Номенклатура,
		|	ПодходящиеОбращения.Группа
		|ИЗ
		|	ПодходящиеОбращения КАК ПодходящиеОбращения
		|ГДЕ
		|	ПодходящиеОбращения.Производитель В
		|			(ВЫБРАТЬ
		|				ПроизводителиСОтметками.Производитель
		|			ИЗ
		|				ПроизводителиСОтметками
		|			ГДЕ
		|				ПроизводителиСОтметками.Отмечен)
		|	И ПодходящиеОбращения.Технолог В
		|			(ВЫБРАТЬ
		|				ТехнологиСОтметками.Технолог
		|			ИЗ
		|				ТехнологиСОтметками
		|			ГДЕ
		|				ТехнологиСОтметками.Отмечен)
		|	И ПодходящиеОбращения.ТипОбращения В
		|			(ВЫБРАТЬ
		|				ТипыОбращенийСОтметками.ТипОбращения
		|			ИЗ
		|				ТипыОбращенийСОтметками
		|			ГДЕ
		|				ТипыОбращенийСОтметками.Отмечен)
		|	И (ПодходящиеОбращения.ТипЖалобы В
		|				(ВЫБРАТЬ
		|					ТипыЖалобСОтметками.ТипЖалобы
		|				ИЗ
		|					ТипыЖалобСОтметками
		|				ГДЕ
		|					ТипыЖалобСОтметками.Отмечен)
		|			ИЛИ ПодходящиеОбращения.ТипЖалобы = &ТипЖалобыПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок,
		|	id_OK
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеПроверкиКачества.Ссылка КАК Ссылка,
		|	ПодходящиеПроверкиКачества.Производитель,
		|	ПодходящиеПроверкиКачества.Технолог,
		|	ПодходящиеПроверкиКачества.Номенклатура,
		|	ПодходящиеПроверкиКачества.Группа,
		|	ПодходящиеПроверкиКачества.Дата
		|ИЗ
		|	ПодходящиеПроверкиКачества КАК ПодходящиеПроверкиКачества
		|ГДЕ
		|	(ПодходящиеПроверкиКачества.Производитель В
		|				(ВЫБРАТЬ
		|					ПроизводителиСОтметками.Производитель
		|				ИЗ
		|					ПроизводителиСОтметками
		|				ГДЕ
		|					ПроизводителиСОтметками.Отмечен)
		|			ИЛИ ПодходящиеПроверкиКачества.Технолог В
		|				(ВЫБРАТЬ
		|					ТехнологиСОтметками.Технолог
		|				ИЗ
		|					ТехнологиСОтметками
		|				ГДЕ
		|					ТехнологиСОтметками.Отмечен))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";

КонецФункции
	
&НаСервере
Процедура ПолучитьДанныеДляОтчетаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаИсходныеДанные();
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ТаблицаПоставщики", Поставщики.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаТехнологи", Технологи.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаТипыОбращений", ТипыОбращений.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаТипыЖалоб", ТипыЖалоб.Выгрузить());
	Запрос.УстановитьПараметр("ПроизводительПустаяСсылка", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТехнологПустаяСсылка", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипЖалобыПустаяСсылка", Справочники.ТипыЖалоб.ПустаяСсылка());
	Запрос.УстановитьПараметр("МаркерЗеленый", Перечисления.МаркерыДляАудита.Зеленый);
	Запрос.УстановитьПараметр("МаркерПусто", Перечисления.МаркерыДляАудита.ПустаяСсылка());

	Запрос.Выполнить();
	
	Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроизводителиСОтметками.Производитель КАК Поставщик,
		|	ПроизводителиСОтметками.Отмечен
		|ИЗ
		|	ПроизводителиСОтметками КАК ПроизводителиСОтметками
		|
		|УПОРЯДОЧИТЬ ПО
		|	Поставщик
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТехнологиСОтметками.Технолог КАК Технолог,
		|	ТехнологиСОтметками.Отмечен
		|ИЗ
		|	ТехнологиСОтметками КАК ТехнологиСОтметками
		|ГДЕ
		|	НЕ ТехнологиСОтметками.Технолог = &ТехнологПустаяСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Технолог
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТипыОбращенийСОтметками.ТипОбращения КАК ТипОбращения,
		|	ТипыОбращенийСОтметками.Отмечен
		|ИЗ
		|	ТипыОбращенийСОтметками КАК ТипыОбращенийСОтметками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипОбращения
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТипыЖалобСОтметками.ТипЖалобы КАК ТипЖалобы,
		|	ТипыЖалобСОтметками.Отмечен
		|ИЗ
		|	ТипыЖалобСОтметками КАК ТипыЖалобСОтметками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипЖалобы
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеОбращения.id_OK КАК id_OK,
		|	ПодходящиеОбращения.GUID_Загрузки,
		|	ПодходящиеОбращения.ДатаДок КАК ДатаДок,
		|	ПодходящиеОбращения.Производитель,
		|	ПодходящиеОбращения.Технолог,
		|	ПодходящиеОбращения.Номенклатура,
		|	ПодходящиеОбращения.Группа
		|ИЗ
		|	ПодходящиеОбращения КАК ПодходящиеОбращения
		|ГДЕ
		|	ПодходящиеОбращения.Производитель В
		|			(ВЫБРАТЬ
		|				ПроизводителиСОтметками.Производитель
		|			ИЗ
		|				ПроизводителиСОтметками
		|			ГДЕ
		|				ПроизводителиСОтметками.Отмечен)
		|	И ПодходящиеОбращения.Технолог В
		|			(ВЫБРАТЬ
		|				ТехнологиСОтметками.Технолог
		|			ИЗ
		|				ТехнологиСОтметками
		|			ГДЕ
		|				ТехнологиСОтметками.Отмечен)
		|	И ПодходящиеОбращения.ТипОбращения В
		|			(ВЫБРАТЬ
		|				ТипыОбращенийСОтметками.ТипОбращения
		|			ИЗ
		|				ТипыОбращенийСОтметками
		|			ГДЕ
		|				ТипыОбращенийСОтметками.Отмечен)
		|	И (ПодходящиеОбращения.ТипЖалобы В
		|				(ВЫБРАТЬ
		|					ТипыЖалобСОтметками.ТипЖалобы
		|				ИЗ
		|					ТипыЖалобСОтметками
		|				ГДЕ
		|					ТипыЖалобСОтметками.Отмечен)
		|			ИЛИ ПодходящиеОбращения.ТипЖалобы = &ТипЖалобыПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок,
		|	id_OK
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеПроверкиКачества.Ссылка КАК Ссылка,
		|	ПодходящиеПроверкиКачества.Производитель,
		|	ПодходящиеПроверкиКачества.Технолог,
		|	ПодходящиеПроверкиКачества.Номенклатура,
		|	ПодходящиеПроверкиКачества.Группа
		|ИЗ
		|	ПодходящиеПроверкиКачества КАК ПодходящиеПроверкиКачества
		|ГДЕ
		|	(ПодходящиеПроверкиКачества.Производитель В
		|				(ВЫБРАТЬ
		|					ПроизводителиСОтметками.Производитель
		|				ИЗ
		|					ПроизводителиСОтметками
		|				ГДЕ
		|					ПроизводителиСОтметками.Отмечен)
		|			ИЛИ ПодходящиеПроверкиКачества.Технолог В
		|				(ВЫБРАТЬ
		|					ТехнологиСОтметками.Технолог
		|				ИЗ
		|					ТехнологиСОтметками
		|				ГДЕ
		|					ТехнологиСОтметками.Отмечен))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";

	Результаты = Запрос.ВыполнитьПакет();
	
	РазмерПакета=Результаты.Количество();

	
	//две последние таблицы - выборка ключей регистра сведений и выборка ссылок документов проверки качества
	ПакетВыборкаПроверок=РазмерПакета-1;
	ПакетВыборкаПоРегистру=ПакетВыборкаПроверок-1;
	
	ПакетТипыЖалоб=ПакетВыборкаПоРегистру-1;
	ПакетТипыОбращений=ПакетТипыЖалоб-1;
	ПакетТехнологи=ПакетТипыОбращений-1;
	ПакетПоставщики=ПакетТехнологи-1;
	
	Поставщики.Загрузить(Результаты[ПакетПоставщики].Выгрузить());
	Технологи.Загрузить(Результаты[ПакетТехнологи].Выгрузить());
	ТипыОбращений.Загрузить(Результаты[ПакетТипыОбращений].Выгрузить());
	ТипыЖалоб.Загрузить(Результаты[ПакетТипыЖалоб].Выгрузить());
	
	ВыборкаПроверок.Загрузить(Результаты[ПакетВыборкаПроверок].Выгрузить());
	ПроверкиКачестваКоличество=ВыборкаПроверок.Количество();
	
	ВыборкаПоРегистру.Загрузить(Результаты[ПакетВыборкаПоРегистру].Выгрузить());
	ОбращенияПокупателейКоличество=ВыборкаПоРегистру.Количество();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры


&НаКлиенте
Процедура ПоставщикиОтмеченПриИзменении(Элемент)
	
	ОбработкаОжидания();

КонецПроцедуры


&НаКлиенте
Процедура ТехнологиОтмеченПриИзменении(Элемент)
	
	ОбработкаОжидания();

КонецПроцедуры


&НаКлиенте
Процедура ТипыОбращенийОтмеченПриИзменении(Элемент)
	
	ОбработкаОжидания();

КонецПроцедуры


&НаКлиенте
Процедура ТипыЖалобОтмеченПриИзменении(Элемент)
	
	ОбработкаОжидания();

КонецПроцедуры


&НаКлиенте
Процедура ПоставщикиДа(Команда)
	Отметка("Поставщики",Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПоставщикиНет(Команда)
	Отметка("Поставщики",Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ТехнологиДа(Команда)
	Отметка("Технологи",Истина);
КонецПроцедуры


&НаКлиенте
Процедура ТехнологиНет(Команда)
	Отметка("Технологи",Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ОбращенияДа(Команда)
	Отметка("ТипыОбращений",Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОбращенияНет(Команда)
	Отметка("ТипыОбращений",Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ЖалобыДа(Команда)
	Отметка("ТипыЖалоб",Истина);   
КонецПроцедуры


&НаКлиенте
Процедура ЖалобыНет(Команда)
	Отметка("ТипыЖалоб",Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Отметка(ИмяТаблицы,Отмечен)
	Если ИмяТаблицы="Поставщики" тогда
		Таблица=Поставщики;
	ИначеЕсли ИмяТаблицы="Технологи" тогда
		Таблица=Технологи;
	ИначеЕсли ИмяТаблицы="ТипыОбращений" тогда
		Таблица=ТипыОбращений;
	ИначеЕсли ИмяТаблицы="ТипыЖалоб" тогда
		Таблица=ТипыЖалоб;
	иначе
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТаблицы из Таблица цикл
		СтрокаТаблицы.Отмечен=Отмечен;
	КонецЦикла;
	
	ОбработкаОжидания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания(Время=1)
	Элементы.ВыполнитьРассылку.Доступность=Ложь;
	Элементы.СоздатьДокументWord.Доступность=Элементы.ВыполнитьРассылку.Доступность;
	ПодключитьОбработчикОжидания("ПолучитьДанныеДляОтчета",Время,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументWord(Команда)
	ДанныеОтчета=Новый СписокЗначений;
	СписокФайлов=Новый СписокЗначений;
	
	ПоказатьОповещениеПользователя("Создание документа Word",,"Получение данных");
	СформироватьОтчетНаСервере(ДанныеОтчета,СписокФайлов);
	
	СформироватьДокумент(ДанныеОтчета,СписокФайлов);
	
	ПоказатьОповещениеПользователя("Создание документа Word",,"Завершено");

КонецПроцедуры

&НаКлиенте
Функция СформироватьПисьмоHTML(Данныеотчета)
	ТелоПисьма=
	"<html>
	|<head>
	|</head>
	|<body>Текст
	|</body>
	|</html>";
	
	СтрокаПисьма="
	|<p>Текст</p>";
	
	Заголовок1="
	|<H1>Текст</H1>";
	
	Заголовок2="
	|<H2>Текст</H2>";
	
	Заголовок3="
	|<H3>Текст</H3>";
	
	
	Письмо="";
	
	ВыделитьАбзац="";
	ЗавершитьАбзац="";
	
	Для Каждого ЭлементСписка из ДанныеОтчета цикл
		Представление=ЭлементСписка.Представление;
		Значение=ЭлементСписка.Значение;
		Если Представление="Заголовок1" тогда
			Письмо=Письмо+СтрЗаменить(Заголовок1,"Текст",Значение);
		ИначеЕсли Представление="Заголовок2" тогда
			Письмо=Письмо+СтрЗаменить(Заголовок2,"Текст",Значение);
		ИначеЕсли Представление="Заголовок3" тогда
			Письмо=Письмо+СтрЗаменить(Заголовок3,"Текст",Значение);
		ИначеЕсли Представление="ВыделитьАбзац" тогда
			ВыделитьАбзац="<B>"+Значение+" "+"</B>";
		ИначеЕсли Представление="ЗавершитьАбзац" тогда
			ЗавершитьАбзац="<I>"+" "+Значение+"</I>";
		ИначеЕсли Представление="Текст" или Представление="Текст2" тогда
			Значение=СтрЗаменить(Значение,Символы.ПС,"<BR>");
			Письмо=Письмо+СтрЗаменить(СтрокаПисьма,"Текст",ВыделитьАбзац+Значение+ЗавершитьАбзац);
			ВыделитьАбзац="";
			ЗавершитьАбзац="";
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ТелоПисьма,"Текст",Письмо);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКороткоеИмяФайла(Знач КороткоеИмяФайла)
	Поз=Найти(КороткоеИмяФайла,"\");
	пока Поз>0 цикл
		КороткоеИмяФайла=сокрлп(сред(КороткоеИмяФайла,Поз+1));
		Поз=Найти(КороткоеИмяФайла,"\");
	КонецЦикла;
	возврат КороткоеИмяФайла;
КонецФункции

&НаСервере
Процедура ПодготовитьПереносФайловНаСервере(СписокФайлов,СписокФайловЛокальный,ВремКат,МассивОписаний)
	Для Каждого ЭлементСписка из СписокФайлов цикл
		ИмяФайла=ЭлементСписка.Значение;
		
		Файл = Новый Файл(ИмяФайла); 
		Если Файл.Существует() тогда
			
			
			Двоичное=Новый ДвоичныеДанные(ИмяФайла);
			Адрес=ПоместитьВоВременноеХранилище(Двоичное);									
			
			КороткоеИмяФайла=ПолучитьКороткоеИмяФайла(ИмяФайла);
			
			ЛокальноеИмяФайла=ВремКат+КороткоеИмяФайла;
			Описание=Новый ОписаниеПередаваемогоФайла(ЛокальноеИмяФайла,Адрес);
			МассивОписаний.Добавить(Описание);
			
			СписокФайловЛокальный.Добавить(ИмяФайла,ЛокальноеИмяФайла);
		иначе
			сообщить("Не найден "+ИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипыГрафФайлов()
возврат ".JPG .JPEG .PNG .TIF .TIFF .BMP";
КонецФункции

&НаКлиенте
Функция СформироватьДокумент(Данныеотчета,СписокФайлов)
	
	ТипыГрафФайлов=ТипыГрафФайлов();
	
	СписокФайловЛокальный=новый СписокЗначений;
	
	ВсегоФайлов=СписокФайлов.Количество();
	Если ВсегоФайлов>0 тогда
		ПоказатьОповещениеПользователя("Перенос файлов",,"Всего: "+ВсегоФайлов);
		
		ВремКат=КаталогВременныхФайлов();
		//ВремКат="\\10.0.0.51\1c$\tmp\";
		МассивОписаний=Новый Массив;
		ПодготовитьПереносФайловНаСервере(СписокФайлов,СписокФайловЛокальный,ВремКат,МассивОписаний);
		
		ПолучитьФайлы(МассивОписаний,,,Ложь);
	КонецЕсли;
	
	Ворд = Новый COMОбъект("Word.Application");
	Ворд.Visible = Ложь;



	// Получить имя временного файла для хранения документа
	ИмяФайла = ПолучитьИмяВременногоФайла(".doc");

	Док = Ворд.Documents.Add();
	Док.SaveAs(ИмяФайла);
	Док = Ворд.Documents.Open(ИмяФайла);
	
	Ворд.Visible = Ложь;


	Selection=Ворд.Selection;
	Selection.ParagraphFormat.SpaceAfter = 6;
	
	ВыделитьАбзац="";
	ЗавершитьАбзац="";
	НомерВставки=1;
	Для Каждого ЭлементСписка из ДанныеОтчета цикл
		Представление=ЭлементСписка.Представление;
		Значение=ЭлементСписка.Значение;
		Если Представление="Заголовок1" тогда
		    Selection.Style = Ворд.ActiveDocument.Styles("Заголовок 1");
		    Selection.TypeText(Значение);
		    Selection.TypeParagraph();
		ИначеЕсли Представление="Заголовок2" тогда
		    Selection.Style = Ворд.ActiveDocument.Styles("Заголовок 2");
		    Selection.TypeText(Значение);
		    Selection.TypeParagraph();
		ИначеЕсли Представление="Заголовок3" тогда
		    Selection.Style = Ворд.ActiveDocument.Styles("Заголовок 3");
		    Selection.TypeText(Значение);
		    Selection.TypeParagraph();
		ИначеЕсли Представление="ВыделитьАбзац" тогда
			ВыделитьАбзац=Значение;
		ИначеЕсли Представление="ЗавершитьАбзац" тогда
			ЗавершитьАбзац=Значение;
		ИначеЕсли Представление="Файл" тогда
			ИмяФайлаНаСервере=Значение;
			ЭлементФайлы=СписокФайловЛокальный.НайтиПоЗначению(ИмяФайлаНаСервере);
			Если НЕ ЭлементФайлы=Неопределено тогда
				ИмяФайлаЛокальное=ЭлементФайлы.Представление;
			КонецЕсли;
			Расширение=РасширениеФайла(ИмяФайлаЛокальное);
			НазваниеФайла=ПолучитьКороткоеИмяФайла(ИмяФайлаЛокальное);
			
			Если найти(ТипыГрафФайлов,Расширение)>0 тогда
				Selection.InlineShapes.AddPicture(
				ИмяФайлаЛокальное,
				Ложь,
				Истина
				);
				
				К=Док.InlineShapes(НомерВставки).Width/Док.InlineShapes(НомерВставки).height;
				
				Док.InlineShapes(НомерВставки).Width = 283.45;
				Док.InlineShapes(НомерВставки).height = окр(283.45/К,2);

			//ИначеЕсли найти("PDF",Расширение)>0 тогда
			//	//PDF 
			//	Selection.InlineShapes.AddOLEObject(
			//	"AcroExch.Document.DC",
			//	ИмяФайлаЛокальное,
			//	Ложь,
			//	Истина,
			//	);
			//	
			//	Док.InlineShapes(НомерВставки).Width = 283.45;
			//	
			иначе
			    Selection.Style = Ворд.ActiveDocument.Styles("Заголовок 3");
			    Selection.TypeText("Прилагаемый файл:");
				Selection.TypeParagraph();
				//Selection.TypeText(НазваниеФайла+" ");
			
				//другое
			    Selection.InlineShapes.AddOLEObject(
				"Package", 
				ИмяФайлаЛокальное,
				Ложь,
				Истина,
				НазваниеФайла
				);
				Док.InlineShapes(НомерВставки).Width = 58;

			КонецЕсли;
			НомерВставки=НомерВставки+1;
			Selection.TypeParagraph();
		ИначеЕсли Представление="Текст" тогда
			Если НЕ ПустаяСтрока(ВыделитьАбзац) тогда
				Selection.Font.Bold=Истина;
				Selection.TypeText(ВыделитьАбзац);
				Selection.Font.Bold=Ложь;
			КонецЕсли;
			
			Selection.TypeText(Значение);

			Если НЕ ПустаяСтрока(ЗавершитьАбзац) тогда
				Selection.TypeParagraph();
				Selection.Font.Italic=Истина;
				Selection.TypeText(ЗавершитьАбзац);
				Selection.Font.Italic=Ложь;
			КонецЕсли;
			
			Selection.TypeParagraph();
			
			ВыделитьАбзац="";
			ЗавершитьАбзац="";
		ИначеЕсли Представление="Текст2" тогда
			//пропускаем названия файлов
			ВыделитьАбзац="";
			ЗавершитьАбзац="";
		КонецЕсли;
	КонецЦикла;
	
	Ворд.Visible = Истина;
	Док.Activate();
	Док.Application.Activate();   	
	
	ПоказатьОповещениеПользователя("Удаление временных файлов",,"Всего: "+ВсегоФайлов);
	Для Каждого ЭлементСписка из СписокФайловЛокальный цикл
		попытка
			УдалитьФайлы(ЭлементСписка.Представление);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя("Удаление временных файлов на сервере",,""+СписокФайлов.количество());
	УдалитьФайлыНаСервере(СписокФайлов);
	
	
	возврат "";
	
КонецФункции

&НаКлиенте
Функция РасширениеФайла(Знач с)
	Поз=Найти(С,".");
	пока Поз>0 цикл
		с=сокрлп(сред(с,Поз+1));
		Поз=Найти(С,".");
	КонецЦикла;
	Возврат врег(с);
КонецФункции

&НаСервере
Процедура СформироватьОтчетНаСервере(ДанныеОтчета,СписокФайлов)
	
	
	
	УстановитьПривилегированныйРежим(Истина);
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПодходящиеПроверкиКачества", ВыборкаПроверок.Выгрузить());
	Запрос.УстановитьПараметр("ПодходящиеОбращения", ВыборкаПоРегистру.Выгрузить());
	Запрос.УстановитьПараметр("МаркерЗеленый", Перечисления.МаркерыДляАудита.Зеленый);
	Запрос.УстановитьПараметр("МаркерПусто", Перечисления.МаркерыДляАудита.ПустаяСсылка());

	
	Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеОбращения.id_OK КАК id_OK,
		|	ПодходящиеОбращения.GUID_Загрузки КАК GUID_Загрузки,
		|	ПодходящиеОбращения.ДатаДок КАК ДатаДок,
		|	ПодходящиеОбращения.Производитель,
		|	ПодходящиеОбращения.Технолог,
		|	ПодходящиеОбращения.Номенклатура,
		|	ПодходящиеОбращения.Группа
		|ПОМЕСТИТЬ Обращения
		|ИЗ
		|	&ПодходящиеОбращения КАК ПодходящиеОбращения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	id_OK,
		|	ДатаДок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодходящиеПроверкиКачества.Ссылка КАК Ссылка,
		|	ПодходящиеПроверкиКачества.Производитель,
		|	ПодходящиеПроверкиКачества.Технолог,
		|	ПодходящиеПроверкиКачества.Номенклатура,
		|	ПодходящиеПроверкиКачества.Группа,
		|	ПодходящиеПроверкиКачества.Дата
		|ПОМЕСТИТЬ Проверки
		|ИЗ
		|	&ПодходящиеПроверкиКачества КАК ПодходящиеПроверкиКачества
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка КАК Ссылка,
		|	ПроверкаКачестваТоваровСоставПоказателей.НомерСтроки,
		|	ПроверкаКачестваТоваровСоставПоказателей.Показатель,
		|	ПроверкаКачестваТоваровСоставПоказателей.НормаОт,
		|	ПроверкаКачестваТоваровСоставПоказателей.НормаДо,
		|	ПроверкаКачестваТоваровСоставПоказателей.Результат,
		|	ПроверкаКачестваТоваровСоставПоказателей.Нарушение,
		|	ПроверкаКачестваТоваровСоставПоказателей.Маркер
		|ПОМЕСТИТЬ ПроверкиТабличнаяЧасть
		|ИЗ
		|	Документ.ПроверкаКачестваТоваров.СоставПоказателей КАК ПроверкаКачестваТоваровСоставПоказателей
		|ГДЕ
		|	ПроверкаКачестваТоваровСоставПоказателей.Ссылка В
		|			(ВЫБРАТЬ
		|				проверки.Ссылка
		|			ИЗ
		|				проверки)
		|	И ПроверкаКачестваТоваровСоставПоказателей.Маркер <> &МаркерЗеленый
		|	И ПроверкаКачестваТоваровСоставПоказателей.Маркер <> &МаркерПусто
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(ОбращенияПокупателей.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
		|	Обращения.Производитель КАК Производитель,
		|	Обращения.Технолог КАК Технолог,
		|	Обращения.Номенклатура КАК Номенклатура,
		|	Обращения.Группа КАК Группа,
		//+++АК SHEP 2018.10.04 ИП-00019989
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОбращенияПокупателей.ТипОбращения.Код, """") = ""201""
		|			ТОГДА ОбращенияПокупателей.ОтветПроизводителя
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОтветПроизводителя,
		//---АК SHEP 2018.10.04
		|	ЛОЖЬ КАК ЭтоПроверкаКачества,
		|	Обращения.id_OK,
		|	Обращения.GUID_Загрузки,
		|	Обращения.ДатаДок,
		|	NULL КАК Ссылка,
		|	ОбращенияПокупателей.ТипОбращения,
		|	ОбращенияПокупателей.ТипЖалобы,
		|	ОбращенияПокупателей.Примечание КАК СутьОбращения,
		|	ОбращенияПокупателей.РезультатОбращения,
		|	ВЫБОР
		|		КОГДА ОбращенияПокупателей.КоличествоПрикрепленныхФайлов = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПрикрепленныеФайлы,
		|	ОбращенияПокупателей.ПрикрепленныеФайлы,
		|	ОбращенияПокупателей.КоличествоПрикрепленныхФайлов КАК КоличествоПрикрепленныхФайлов,
		|	NULL КАК ИмяФайла,
		|	NULL КАК ИмяФайлаСРасширением,
		|	NULL КАК Нарушения,
		|	NULL КАК Комментарий,
		|	NULL КАК ИмяФайлаОтвета,
		|	NULL КАК ИмяФайлаОтветаСРасширением
		|ИЗ
		|	Обращения КАК Обращения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|		ПО Обращения.id_OK = ОбращенияПокупателей.id_OK
		|			И Обращения.GUID_Загрузки = ОбращенияПокупателей.GUID_Загрузки
		|			И Обращения.ДатаДок = ОбращенияПокупателей.ДатаДок
		|ГДЕ
		|	ОбращенияПокупателей.GUID_Загрузки В
		|			(ВЫБРАТЬ
		|				Обращения.GUID_Загрузки
		|			ИЗ
		|				Обращения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроверкаКачестваТоваров.Дата,
		|	Проверки.Производитель,
		|	Проверки.Технолог,
		|	Проверки.Номенклатура,
		|	Проверки.Группа,
		//+++АК SHEP 2018.10.04 ИП-00019989
		|	"""" КАК ОтветПроизводителя,
		//---АК SHEP 2018.10.04
		|	ИСТИНА,
		|	NULL,
		|	NULL,
		|	NULL,
		|	Проверки.Ссылка,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ПроверкаКачестваТоваров.ИмяФайла,
		|	ПроверкаКачестваТоваров.ИмяФайлаСРасширением,
		|	ПроверкаКачестваТоваров.Нарушения,
		|	ПроверкаКачестваТоваров.Комментарий,
		|	ПроверкаКачестваТоваров.ИмяФайлаОтвета,
		|	ПроверкаКачестваТоваров.ИмяФайлаОтветаСРасширением
		|ИЗ
		|	Проверки КАК Проверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроверкаКачестваТоваров КАК ПроверкаКачестваТоваров
		|		ПО Проверки.Ссылка = ПроверкаКачестваТоваров.Ссылка
		|ГДЕ
		|	Проверки.Ссылка В
		|			(ВЫБРАТЬ
		|				Проверки.Ссылка
		|			ИЗ
		|				Проверки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Производитель,
		|	ЭтоПроверкаКачества,
		|	Группа,
		|	Номенклатура,
		|	ДатаСобытия
		|ИТОГИ ПО
		|	Производитель,
		//+++АК SHEP 2018.08.23 ИП-00019455
		|	Технолог,
		//---АК SHEP 2018.08.23
		|	ЭтоПроверкаКачества,
		|	Группа
		|АВТОУПОРЯДОЧИВАНИЕ";

	Результаты=Запрос.ВыполнитьПакет();
	КоличествоПакетов=Результаты.Количество();
	Результат=Результаты[КоличествоПакетов-1];
		
	КэшИменФайлов=Новый СписокЗначений;
	СписокФайловДляСжатия=Новый СписокЗначений;
	ВремКат=КаталогВременныхФайлов();
	//ВремКат="\\10.0.0.51\1c$\tmp\";
	
	ФайлУпаковщик=ВремКат+"PhotoResize400.exe";
	КлючУпаковки="-w600";
	//ПрефиксДляУпаковки="Приложение_";
	ПрефиксДляУпаковки="";
	
	Файл = Новый Файл(ФайлУпаковщик); 
	Если НЕ Файл.Существует() тогда
	//Если Найти(этаформа.ИмяФормы,"ВнешняяОбработка.")>0 тогда
	//	Обработка =  РеквизитФормыВЗначение("Объект");
	//	МакетУпаковщик=Обработка.ПолучитьМакет("resize");
	//иначе
		МакетУпаковщик=Обработки.АК_РассылкаПоставщикамИТехнологам.ПолучитьМакет("resize");
//	КонецЕсли;
		МакетУпаковщик.Записать(ФайлУпаковщик);
		//КопироватьФайл("\\10.0.0.51\1c$\tmp\PhotoResize400.exe",ФайлУпаковщик);
	КонецЕсли;

	ТипыГрафФайлов=ТипыГрафФайлов();
	
	ВыборкаПроизводитель = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПроизводитель.следующий() цикл
		ДанныеОтчета.Добавить("Производитель: "+ВыборкаПроизводитель.Производитель,"Заголовок1");
		
		//+++АК SHEP 2018.08.23 ИП-00019455
		ВыборкаТехнолог = ВыборкаПроизводитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТехнолог.Следующий() Цикл
			ДанныеОтчета.Добавить("Технолог: "+ВыборкаТехнолог.Технолог, "Заголовок1");
			
			ВыборкаПроверкаКачества = ВыборкаТехнолог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//ВыборкаПроверкаКачества = ВыборкаПроизводитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//---АК SHEP 2018.08.23
		
		Пока ВыборкаПроверкаКачества.следующий() цикл
			ЭтоПроверкаКачества=ВыборкаПроверкаКачества.ЭтоПроверкаКачества;
			Если ЭтоПроверкаКачества тогда
				ДанныеОтчета.Добавить("Проверки качества:","Заголовок2");
			иначе
				ДанныеОтчета.Добавить("Обращения покупателей:","Заголовок2");
			КонецЕсли;
			НомерГруппы=0;
			ВыборкаГруппа = ВыборкаПроверкаКачества.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаГруппа.следующий() цикл
				НомерГруппы=НомерГруппы+1;
				Группа=""+ВыборкаГруппа.Группа;
				ДанныеОтчета.Добавить(""+Формат(НомерГруппы,"ЧГ=0")+": "+Группа,"Заголовок3");
				ВыборкаДетальныеЗаписи = ВыборкаГруппа.Выбрать();
				Если ЭтоПроверкаКачества тогда
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Номенклатура=""+ВыборкаДетальныеЗаписи.Номенклатура;
						ДатаСобытия=формат(ВыборкаДетальныеЗаписи.ДатаСобытия,"ДФ=dd.MM.yy");
						ИмяФайлаСРасширением=ВыборкаДетальныеЗаписи.ИмяФайлаСРасширением;
						ИмяФайла=ВыборкаДетальныеЗаписи.ИмяФайла;
						
						ДанныеОтчета.Добавить(""+Номенклатура,"ВыделитьАбзац");
						ДанныеОтчета.Добавить(""+Символы.ПС+ВыборкаДетальныеЗаписи.СутьОбращения,"ЗавершитьАбзац");
						ДанныеОтчета.Добавить(
							""+ДатаСобытия+" - "+ВыборкаДетальныеЗаписи.Нарушения,"Текст");
							
						//табличная часть
						Запрос.Текст="ВЫБРАТЬ
						             |	ПроверкиТабличнаяЧасть.Ссылка,
						             |	ПроверкиТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
						             |	ПроверкиТабличнаяЧасть.Показатель,
						             |	ПроверкиТабличнаяЧасть.НормаОт,
						             |	ПроверкиТабличнаяЧасть.НормаДо,
						             |	ПроверкиТабличнаяЧасть.Результат,
						             |	ПроверкиТабличнаяЧасть.Нарушение,
						             |	ПроверкиТабличнаяЧасть.Маркер
						             |ИЗ
						             |	ПроверкиТабличнаяЧасть КАК ПроверкиТабличнаяЧасть
						             |ГДЕ
						             |	ПроверкиТабличнаяЧасть.Ссылка = &Ссылка
						             |
						             |УПОРЯДОЧИТЬ ПО
						             |	НомерСтроки";
									 
						Запрос.Параметры.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);									 
									 
						Результат2=Запрос.Выполнить();
						ВыборкаТЧ=Результат2.Выбрать();
						ДанныеОтчета.Добавить("Показатели","ВыделитьАбзац");
						Показатели="";
						Пока ВыборкаТЧ.Следующий() цикл
							Показатели=Показатели+Символы.ПС+"• "+ВыборкаТЧ.Показатель+" "+ВыборкаТЧ.Маркер;
						КонецЦикла;
						ДанныеОтчета.Добавить(""+Показатели,"Текст");
							
						//добавим прилагаемый файл
						
						Файл = Новый Файл(ИмяФайла); 
						Если ДобавлятьФайлыПроверки и Файл.Существует() тогда
							
							ПрефиксИмениФайла=ПрефиксДляУпаковки+БезопасноеИмяФайла("Проверка "+Группа+" - "+Номенклатура+" "+ДатаСобытия)+" ";
							ИсходноеИмяФайла=ИмяФайлаСРасширением;
							ИмяФайлаФложения=ПрефиксИмениФайла+ИсходноеИмяФайла;
							
							Если врег(прав(ИмяФайлаФложения,4))="JPEG" тогда
								ИмяФайлаФложения=лев(ИмяФайлаФложения,СтрДлина(ИмяФайлаФложения)-4)+".JPG";
							КонецЕсли;
							
							Повтор=1;
							Пока НЕ КэшИменФайлов.НайтиПоЗначению(ИмяФайлаФложения)=Неопределено цикл
								Повтор=Повтор+1;
								ИмяФайлаФложения=ПрефиксИмениФайла+"("+Повтор+") "+ИсходноеИмяФайла;
							КонецЦикла;
							КэшИменФайлов.Добавить(ИмяФайлаФложения);
							
							//файлы проверок не пакуем
							
							ИмяВрФайла=ВремКат+ИмяФайлаФложения;
							
							КопироватьФайл(ИмяФайла,ИмяВрФайла);
							//ИмяФайлаПослеУпаковки=ИмяФайлаПослеУпаковки(ИмяВрФайла,КлючУпаковки);
							
							
							//СписокФайлов.Добавить(ИмяФайлаПослеУпаковки);
							СписокФайлов.Добавить(ИмяВрФайла);
							//СписокФайловДляСжатия.Добавить(ИмяВрФайла);
							//Двоичное=Новый ДвоичныеДанные(ИмяФайла);
							//Адрес=ПоместитьВоВременноеХранилище(Двоичное);							
							//СписокФайловВХранилище.Добавить(Адрес,ИмяФайлаФложения);
							ДанныеОтчета.Добавить("Файл:","ВыделитьАбзац");
							ДанныеОтчета.Добавить(""+ИмяФайлаФложения,"Текст2");
							
							ДанныеОтчета.Добавить(ИмяВрФайла,"Файл");
							
						КонецЕсли;
						
						ДанныеОтчета.Добавить(""+ВыборкаДетальныеЗаписи.Ссылка,"Текст");
						
					КонецЦикла;
				иначе
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Номенклатура=""+ВыборкаДетальныеЗаписи.Номенклатура;
						ДатаСобытия=формат(ВыборкаДетальныеЗаписи.ДатаСобытия,"ДФ=dd.MM.yy");
						
						ДатаСобытия=формат(ВыборкаДетальныеЗаписи.ДатаСобытия,"ДФ=dd.MM.yy");
						ДанныеОтчета.Добавить(""+Номенклатура,"ВыделитьАбзац");
						ДанныеОтчета.Добавить(ВыборкаДетальныеЗаписи.СутьОбращения,"ЗавершитьАбзац");
						ДанныеОтчета.Добавить(
							""+формат(ВыборкаДетальныеЗаписи.ДатаСобытия,"ДФ=dd.MM.yy")+" - "+
							ТекстБезНомера(ВыборкаДетальныеЗаписи.ТипОбращения)+". "+
							ТекстБезНомера(ВыборкаДетальныеЗаписи.ТипЖалобы)+". "
							,"Текст");
							
						РезультатОбращения=ВыборкаДетальныеЗаписи.РезультатОбращения;
						Если НЕ ПустаяСтрока(РезультатОбращения) тогда
							ДанныеОтчета.Добавить("Результат обращения: ","ВыделитьАбзац");
							ДанныеОтчета.Добавить(""+РезультатОбращения,"Текст");
						КонецЕсли;
							
						Если ВыборкаДетальныеЗаписи.ЕстьПрикрепленныеФайлы и ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПрикрепленныеФайлы) Тогда
							ТаблицаФайлов = ЗначениеИзСтрокиВнутр(ВыборкаДетальныеЗаписи.ПрикрепленныеФайлы);
							
							Файлы="";
							Для Каждого СтрокаФайла из ТаблицаФайлов цикл
								
								ИсходноеИмяФайла=СтрокаФайла.ИмяФайла;
								ПрефиксИмениФайла=БезопасноеИмяФайла("Обращение "+Группа+" - "+Номенклатура+" "+ДатаСобытия)+" ";
								ИмяФайлаФложения=ПрефиксДляУпаковки+ПрефиксИмениФайла+ИсходноеИмяФайла;
								
								Если врег(прав(ИмяФайлаФложения,4))="JPEG" тогда
									ИмяФайлаФложения=лев(ИмяФайлаФложения,СтрДлина(ИмяФайлаФложения)-4)+".JPG";
								КонецЕсли;
								
								Повтор=1;
								Пока НЕ КэшИменФайлов.НайтиПоЗначению(ИмяФайлаФложения)=Неопределено цикл
									Повтор=Повтор+1;
									ИмяФайлаФложения=ПрефиксИмениФайла+"("+Повтор+") "+ИсходноеИмяФайла;
								КонецЦикла;
								
								Если Файлы="" Тогда 
									ДанныеОтчета.Добавить("Файлы:","ВыделитьАбзац");
								КонецЕсли;
								
								КэшИменФайлов.Добавить(ИмяФайлаФложения);
								
								ИмяФайлаВКаталогеКартинок=Формат(СтрокаФайла.ДатаДобавления, "ДФ=yyyyMM") + "\" + СтрокаФайла.Идентификатор+ СтрокаФайла.Расширение;
								
								Если СуществуетФайлОбращенияНаСервере(ИмяФайлаВКаталогеКартинок) тогда
								
									ДвДанные = ПолучитьИзВременногоХранилища(ПолучитьАдресФайлаССервера(ИмяФайлаВКаталогеКартинок));
									ИмяВрФайла = ВремКат+ИмяФайлаФложения;
									
									ДвДанные.Записать(ИмяВрФайла);
									
									Файл = Новый Файл(ИмяВрФайла); 
									Если Файл.Существует() тогда
										
										Файлы=Файлы+Символы.ПС+ИмяФайлаФложения;
										
										Если (найти(ТипыГрафФайлов,врег(Файл.Расширение))>0) и (врег(Файл.Расширение)<>".PNG") тогда
											//будем сжимать
											ИмяФайлаПослеУпаковки=ИмяФайлаПослеУпаковки(ИмяВрФайла,КлючУпаковки);
											//+++АК SHEP 2018.09.26 ИП-00019939
											//СписокФайловДляСжатия.Добавить(ИмяВрФайла, );
											СписокФайловДляСжатия.Добавить(ИмяВрФайла, ИмяФайлаПослеУпаковки);
											//---АК SHEP 2018.09.26
											СписокФайлов.Добавить(ИмяФайлаПослеУпаковки);									
											ДанныеОтчета.Добавить(ИмяФайлаПослеУпаковки,"Файл");
										иначе
											//прицепим, как есть
											СписокФайлов.Добавить(ИмяВрФайла);									
											ДанныеОтчета.Добавить(ИмяВрФайла,"Файл");
										КонецЕсли;
										
									КонецЕсли;
								
								КонецЕсли;
								
							КонецЦикла;
							ДанныеОтчета.Добавить(""+Файлы,"Текст2");
							
						КонецЕсли;	
						
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОтветПроизводителя) Тогда
							ДанныеОтчета.Добавить("Ответ производителя: ", "ВыделитьАбзац");
							ДанныеОтчета.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.ОтветПроизводителя), "Текст");
						КонецЕсли;
						
						ДанныеОтчета.Добавить("Обращение: "+ВыборкаДетальныеЗаписи.ДатаДок+" "+формат(ВыборкаДетальныеЗаписи.id_OK,"ЧГ=0")+"/"+ВыборкаДетальныеЗаписи.GUID_Загрузки,"Текст");
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		КонецЦикла; //+++АК SHEP 2018.08.23 ИП-00019455
	КонецЦикла;
	
	Для Каждого ЭлементСписка из СписокФайловДляСжатия цикл
		ИмяФайла=ЭлементСписка.Значение;
		КодВозврата=0;
		ЗапуститьПриложение(""""+ФайлУпаковщик+""" -o "+КлючУпаковки+" """+ИмяФайла+"""",ВремКат,Истина,КодВозврата);
		
		//+++АК SHEP 2018.09.26 ИП-00019939
		ИмяФайлаПослеУпаковки = ЭлементСписка.Представление;
		Файл = Новый Файл(ИмяФайлаПослеУпаковки);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(ИмяФайла);
			Исключение
			КонецПопытки;
		Иначе
			// не удалось переконвертировать -- указываем имя файла до конвертации
			Поз = СписокФайлов.НайтиПоЗначению(ИмяФайлаПослеУпаковки);
			Если Поз <> Неопределено Тогда
				Поз.Значение = ИмяФайла;
			КонецЕсли;
			Поз = ДанныеОтчета.НайтиПоЗначению(ИмяФайлаПослеУпаковки);
			Если Поз <> Неопределено Тогда
				Поз.Значение = ИмяФайла;
			КонецЕсли;
		КонецЕсли;
		//---АК SHEP 2018.09.26
	КонецЦикла;
	
	
	
	//+++АК SHEP 2018.09.26 ИП-00019939: перенёс выше
	//Для Каждого ЭлементСписка из СписокФайловДляСжатия цикл
	//	Попытка
	//		УдалитьФайлы(ЭлементСписка.Значение);
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
	//---АК SHEP 2018.09.26
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФайлаПослеУпаковки(Знач ИмяФайла,КлючУпаковки)
	Новоеимя="";
	//Поз=Найти(С,"\");
	//Пока Поз>0 цикл
	//	НовоеИмя=НовоеИмя+лев(ИмяФайла,Поз);
	//	ИмяФайла=сред(ИмяФайла,Поз+1);
	//	Поз=Найти(С,"\");
	//КонецЦикла;
	//Новоеимя=Новоеимя+ПрефиксИмени;
	Поз=Найти(ИмяФайла,".");
	пока Поз>0 цикл
		НовоеИмя=НовоеИмя+лев(ИмяФайла,Поз);
		ИмяФайла=сред(ИмяФайла,Поз+1);
		Поз=Найти(ИмяФайла,".");
	КонецЦикла;
	если прав(Новоеимя,1)="." тогда
		Новоеимя=лев(Новоеимя,СтрДлина(Новоеимя)-1);
	КонецЕсли;
	Новоеимя=сокрлп(Новоеимя);
	Новоеимя=Новоеимя+КлючУпаковки+"."+ИмяФайла;
	Возврат Новоеимя;
КонецФункции

&НаСервереБезКонтекста
Функция БезопасноеИмяФайла(Знач с)
	С=сокрлп(С);
	Запрещено="\/:*?""<>|"+Символы.ВК+Символы.ПС+Символы.Таб+Символы.ВТаб+Символы.ПФ;
	Для сч=1 по СтрДлина(Запрещено) цикл
		С=СтрЗаменить(С,Сред(Запрещено,сч,1),"_");
	КонецЦикла;
	Возврат С;
КонецФункции

&НаСервереБезКонтекста
Функция ТекстБезНомера(Знач с)
	С=сокрлп(С);
	
	Запрещено="01234567890_";
	Если Найти(Запрещено,лев(С,1))>0 тогда
		Поз=Найти(С," ");
		Если Поз>0 тогда
			С=сокрлп(Сред(С,Поз+1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат С;
КонецФункции

&НаКлиенте
Процедура АдресПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    ПараметрыВыбора = Новый Структура();
    ОткрытьФорму("Обработка.АК_РассылкаПоставщикамИТехнологам.Форма.ВыборКонтакта", ПараметрыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ТемаПисьмаПриИзменении(Элемент)
	Если ПустаяСтрока(ТемаПисьма) тогда
		ТемаПисьмаПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПисьмаПоУмолчанию()
	ТемаПисьма="Выборка обращений покупателей и исследований качества "+Формат(НачалоПериода,"ДФ=dd.MM.yyyy")+" - "+Формат(КонецПериода,"ДФ=dd.MM.yyyy");
КонецПроцедуры


