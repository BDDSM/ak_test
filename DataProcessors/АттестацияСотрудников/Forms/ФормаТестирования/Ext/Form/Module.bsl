#Область Переменных

&НаКлиенте
Перем ИмяФормыПолное;

&НаКлиенте
Перем ТестированиеЗавершено;

&НаКлиенте
Перем ЗавершеноПользователем;

&НаКлиенте
Перем МассивКэшаВремменыеХранилища;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнениеПараметровформы();
	
	ОбновитьВидимостьЭлементовФормыСервер();
	
	ОбновитьЗаголовокФормыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МассивКэшаВремменыеХранилища = Новый Массив;
	
	ЗаполнитьПолноеИмяФормыКлиент();
	
	ПодключитьОбработчикОжидания("ЗапуститьФормуАутентификации",0.5, Истина);

	ТестированиеЗавершено = Ложь;
		 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ТестированиеЗавершено Тогда 
		
		Отказ = Истина;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершитьТестированияВопросЗавершение", ЭтаФорма, Новый Структура("Завершить")), 
				НСтр("ru = 'Вы уверены, что хотите прервать тестирование (результаты не будут сохранены)?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	УдалитьВременныеФайлыКлиент(Строка(КаталогВременныхФайлов) + "\" + Этаформа.УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбновлениеПризнакаОтвета

&НаКлиенте
Процедура ПризнакОтвета1ПриИзменении(Элемент)
	
	ПризнакОтвета1 = ЗначениеЗаполнено(ТестОтвет1);
	Если ПризнакОтвета1 = Истина Тогда
		ОбновитьПризнакОтметкиОтвета(1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПризнакОтвета2ПриИзменении(Элемент)

	ПризнакОтвета2 = ЗначениеЗаполнено(ТестОтвет2);
	Если ПризнакОтвета2 = Истина Тогда
		ОбновитьПризнакОтметкиОтвета(2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОтвета3ПриИзменении(Элемент)

	ПризнакОтвета3 = ЗначениеЗаполнено(ТестОтвет3);
	Если ПризнакОтвета3 = Истина Тогда
		ОбновитьПризнакОтметкиОтвета(3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОтвета4ПриИзменении(Элемент)

	ПризнакОтвета4 = ЗначениеЗаполнено(ТестОтвет4);
	Если ПризнакОтвета4 = Истина Тогда
		ОбновитьПризнакОтметкиОтвета(4);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОтвета5ПриИзменении(Элемент)

	ПризнакОтвета5 = ЗначениеЗаполнено(ТестОтвет5);
	Если ПризнакОтвета5 = Истина Тогда
		ОбновитьПризнакОтметкиОтвета(5);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОтвета6ПриИзменении(Элемент)

	ПризнакОтвета6 = ЗначениеЗаполнено(ТестОтвет6);
	Если ПризнакОтвета6 = Истина Тогда
		ОбновитьПризнакОтметкиОтвета(6);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСледующийВопрос(Команда)
	
	ОбновитьЗначенияПолейВопросовОтветовКлиент(1);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПредыдущийВопрос(Команда)
	
	ОбновитьЗначенияПолейВопросовОтветовКлиент(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьТестирование(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершитьТестированияВопросЗавершение", ЭтаФорма, Новый Структура("Сохранить")), 
			НСтр("ru = 'Завершить тестирование?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ОбработатьПроверкуАутентификации(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат)  = Тип("Структура") Тогда 
		
		Результат.Свойство("Сотрудник", Сотрудник);
		Результат.Свойство("Организация", Организация);
		Результат.Свойство("ВидАттестации", ВидАттестации);
		
		Если НЕ ЗначениеЗаполнено(ВидАттестации) Тогда
			ПоказатьПредупреждение(,"Не указан вид аттестации. Начать тестирование невозможно!",15);
			Закрыть();
		КонецЕсли;
		
		НачатьТестированиеСотрудникаКлиент();
		
	Иначе
		
		ТестированиеЗавершено = Истина;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТестированияВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да ИЛИ Результат = КодВозвратаДиалога.ОК Тогда
		ОчиститьКэшВременныеХранилища();
		Если ДополнительныеПараметры.Свойство("Завершить") Тогда
			ТестированиеЗавершено = Истина;
			Закрыть();
		ИначеЕсли ДополнительныеПараметры.Свойство("Сохранить") Тогда
		    ОткрытьФормуРезультатаКлиент();
		КонецЕсли;
		ЗавершеноПользователем = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормуАутентификации ()Экспорт 
	
	ОткрытьФорму(ИмяФормыПолное + "ФормаАутентификации",,,ЭтаФорма,ВариантОткрытияОкна.ОтдельноеОкно,,
		Новый ОписаниеОповещения("ОбработатьПроверкуАутентификации", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнениеПараметровформы()
	
	Параметры.Свойство("Сотрудник", Сотрудник);
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("ВидАттестации", ВидАттестации);
	
	КаталогВременныхФайлов = Аттестация.ПолучитьКаталогВременныхФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовФормыСервер()
	
	Элементы.ГруппаОсновная.Видимость = ЗначениеЗаполнено(ВидАттестации);
	Элементы.ГруппаАутентификации.Видимость = НЕ ЗначениеЗаполнено(ВидАттестации); 	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормыСервер()
	
	ЭтаФорма.Заголовок = ?(ЗначениеЗаполнено(ВидАттестации), "Аттестация: " + ВидАттестации, "");
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормыКлиент()Экспорт
	
	ОстатокВремени = ПолучитьОстатокВремениКлиент();
	
	ЭтаФорма.Заголовок = ?(ЗначениеЗаполнено(ВидАттестации), СтрЗаменить(СтрЗаменить("Аттестация: ВидАттестации Осталось", "ВидАттестации", ВидАттестации), 
			"Осталось", СтрЗаменить(" (до завершения: ОстатокВремени мин.)", "ОстатокВремени", ОстатокВремени)), "");
	
	Если ОстатокВремени = 0 Тогда
		ОтключитьОбработчикОжидания("ОбновитьЗаголовокФормыКлиент");
		Если ЗавершеноПользователем <> Истина Тогда
			ОткрытьФормуРезультатаКлиент(Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОстатокВремениКлиент()
	
	ОстатокВремени = Окр((ВремяОкончанияТестирования - ТекущаяДата()) / 60,0);
	
	Возврат Макс(ОстатокВремени, 0);	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПолноеИмяФормыКлиент()
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ИмяФормыПолное = ИмяФормыПолное;
	Иначе
		ИмяФормыПолное = "Обработка.АттестацияСотрудников.Форма.";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы) 
	
    СимволТочка = ".";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции

&НаКлиенте
Процедура НачатьТестированиеСотрудникаКлиент()

	НачатьТестированиеСотрудникаСервер();
	
	ВремяНачалаТестирования = ТекущаяДата();
	ВремяОкончанияТестирования = ВремяНачалаТестирования + КвоМинут * 60 ;
	
	ОбновитьЗаголовокФормыКлиент();
	
	ОбновитьЗначенияПолейВопросовОтветовКлиент(0);
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокФормыКлиент", 5, Ложь);

КонецПроцедуры

&НаСервере
Процедура НачатьТестированиеСотрудникаСервер()

	ЗаполнитьПараметрыВопросовСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВопросовСервер()

	ОбновитьВидимостьЭлементовФормыСервер();
	
	ОбновитьЗаголовокФормыСервер();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВопросыДляАттестацииСотрудников.НомерВопроса КАК НомерВопроса,
	|	ВопросыДляАттестацииСотрудников.Вопрос,
	|	ВопросыДляАттестацииСотрудников.ВопросКартинка,
	|	ВопросыДляАттестацииСотрудников.Ответ1,
	|	ВопросыДляАттестацииСотрудников.Ответ2,
	|	ВопросыДляАттестацииСотрудников.Ответ3,
	|	ВопросыДляАттестацииСотрудников.Ответ4,
	|	ВопросыДляАттестацииСотрудников.Ответ5,
	|	ВопросыДляАттестацииСотрудников.Ответ6,
	|	ВопросыДляАттестацииСотрудников.ПравильныйОтвет
	|ИЗ
	|	РегистрСведений.ВопросыДляАттестацииСотрудников КАК ВопросыДляАттестацииСотрудников
	|ГДЕ
	|	ВопросыДляАттестацииСотрудников.ВидАттестации = &ВидАттестации
	|	И ВопросыДляАттестацииСотрудников.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВопроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиАттестацииСрезПоследних.КвоМинут,
	|	НастройкиАттестацииСрезПоследних.КвоДопустимыхОшибок
	|ИЗ
	|	РегистрСведений.НастройкиАттестации.СрезПоследних(&Период, ВидАттестации = &ВидАттестации) КАК НастройкиАттестацииСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидАттестации", ВидАттестации);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	//Заполнение вопросов для прохождения тестирования
	Вопросы.Загрузить(РезультатЗапроса[0].Выгрузить());

	Для каждого Строка Из Вопросы Цикл
		Если ЗначениеЗаполнено(Строка.ВопросКартинка) Тогда
			//Строка.ВопросКартинкаПуть = ПоместитьВоВременноеХранилище(Строка.ВопросКартинка.Файл.Получить());
			
			ПолноеИмяФайла = "";
			
			СохранитьКартинкуНаДискеСервер(КаталогВременныхФайлов, ПолноеИмяФайла, Строка.ВопросКартинка); 
			
			Строка.ВопросКартинкаПуть = ПолноеИмяФайла;

		КонецЕсли;
	КонецЦикла;
	
	ВопросыВсего   = Вопросы.Количество();
	
	ВопросыТекущий = Мин(ВопросыВсего, 1); 
	
	//Заполнение настроек
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Выборка.Следующий();
	
	КвоМинут = Выборка.КвоМинут;
	КвоДопустимыхОшибок = Выборка.КвоДопустимыхОшибок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияПолейВопросовОтветовКлиент(Направление)
	
	//Обновление индекса текущего вопроса
	ВопросыТекущий = ВопросыТекущий + Направление;
	
	//Получение строки таблицы Вопросы по индексу
	ТекущийВопрос = Вопросы[ВопросыТекущий-1];
	
	//Создание нового двоичного файла на каждое обновление картинки, т.к. повное открытие из временного хранилища 
	//не гарантирует отображение изображения (в хранилище есть, на форме нет).
	//Удаление кэша временных хранилищ перенесено на этам завершения тестирования.
	Если ЗначениеЗаполнено(ТекущийВопрос.ВопросКартинка) Тогда
		ВременноеХранение = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ТекущийВопрос.ВопросКартинкаПуть)); 
		ВопросКартинка    = ВременноеХранение;
		МассивКэшаВремменыеХранилища.Добавить(ВременноеХранение);
	Иначе
		ВопросКартинка = "";
	КонецЕсли;
	
	//Заполнение вопроса
	ТестВопрос = ТекущийВопрос.Вопрос;     
	
	//Обновления отметки флагом выбранного пользователем варианта ответа
	ОбновитьПризнакОтметкиОтвета(Макс(ТекущийВопрос.ОтветСотрудника, 1), ?(ТекущийВопрос.ОтветСотрудника = 0, Истина, Ложь));
	
	//Заполнение вариантов ответов и обновление видимости полей ответов
	Индекс = 1;
	Пока Индекс < 7 Цикл
		Этаформа["ТестОтвет" + Индекс] = ТекущийВопрос["Ответ" + Индекс];  
		//1С:Предприятие 8.3 (8.3.10.2561) Любое огранчение элемента (даже ТолькоПросмотр) вызывает перестроение формы:
		//Элементы["ГруппаТестированиеОтветыПризнак"+Индекс].Доступность = ЗначениеЗаполнено(ТекущийВопрос["Ответ" + Индекс]);
		//Элементы["ГруппаТестированиеОтветыПризнак"+Индекс].Видимость = ЗначениеЗаполнено(ТекущийВопрос["Ответ" + Индекс]);
		//Реализовано чисто визуальное "Скрытие" элементов 
		АктивныйЭлемент = ЗначениеЗаполнено(ТекущийВопрос["Ответ" + Индекс]);
		Если АктивныйЭлемент Тогда
			Элементы["ПризнакОтвета"+Индекс].ЦветРамки = Элементы.ТестВопрос.ЦветРамки;
			Элементы["ТестОтвет"+Индекс].ЦветРамки = Элементы.ТестВопрос.ЦветРамки;
		Иначе
			Элементы["ПризнакОтвета"+Индекс].ЦветРамки = Элементы.ТестВопрос.ЦветФона;
			Элементы["ТестОтвет"+Индекс].ЦветРамки = Элементы.ТестВопрос.ЦветФона;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	//Доступность кнопок управления
	Элементы.КомандаПредыдущийВопрос.Доступность      = ВопросыТекущий > 1;
	Элементы.КомандаСледующийВопрос.Доступность       = ВопросыТекущий < ВопросыВсего;
	Элементы.КомандаЗавершитьТестирование.Доступность = ВопросыТекущий = ВопросыВсего;

    ОбновитьНадписьТекущийВопрос();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакОтметкиОтвета(ТекущийИндекс, ОбновлятьОтвет = Истина)
	
	Индекс = 1;
	Пока Индекс < 7 Цикл
		Этаформа["ПризнакОтвета" + Индекс] = Индекс = ТекущийИндекс;
		Если ОбновлятьОтвет И Индекс = ТекущийИндекс Тогда
			Вопросы[ВопросыТекущий-1].ОтветСотрудника = Индекс;
			Вопросы[ВопросыТекущий-1].Правильный = Вопросы[ВопросыТекущий-1].ОтветСотрудника = Вопросы[ВопросыТекущий-1].ПравильныйОтвет
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьТекущийВопрос()

	ВопросыТекущийТекст = СтрЗаменить(СтрЗаменить("Вопрос ТекущийВопрос из ВсегоВопросов", 
			"ТекущийВопрос", ВопросыТекущий), "ВсегоВопросов", ВопросыВсего);

КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьФормуРезультатаКлиент(ВремяИстекло = Ложь)
	
	ВремяОкончанияТестирования = ТекущаяДата();
	
	ОткрытьФорму(ИмяФормыПолное + "ФормаРезультата", Новый Структура("СтруктураПараметров, ВремяИстекло", ПолучитьСтруктуруПараметровРезультатаСервер(), ВремяИстекло),ЭтаФорма,ВариантОткрытияОкна.ОтдельноеОкно,,,
		 Новый ОписаниеОповещения("ЗавершитьТестированияВопросЗавершение", ЭтаФорма, Новый Структура("Завершить")), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровРезультатаСервер()
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Сотрудник",Сотрудник);
	СтруктураПараметров.Вставить("ВидАттестации",ВидАттестации);
	СтруктураПараметров.Вставить("ВопросыВсего",ВопросыВсего);
	СтруктураПараметров.Вставить("ВопросыСтрока",ЗначениеВСтрокуВнутр(Вопросы.Выгрузить()));
	СтруктураПараметров.Вставить("КвоДопустимыхОшибок",КвоДопустимыхОшибок);
	СтруктураПараметров.Вставить("ВремяНачалаТестирования",ВремяНачалаТестирования);
	СтруктураПараметров.Вставить("ВремяОкончанияТестирования",ВремяОкончанияТестирования);
	СтруктураПараметров.Вставить("КвоМинут", КвоМинут); 
	
	Возврат ЗначениеВСтрокуВнутр(СтруктураПараметров);

КонецФункции // ПолучитьСтруктуруПараметровРезультатаСервер()()

&НаКлиенте
Процедура ОчиститьКэшВременныеХранилища()
	
	пМассивКэшаВремменыеХранилища = Новый Массив();

	Для Каждого ЭлементМассива Из МассивКэшаВремменыеХранилища Цикл

		Попытка
			УдалитьИзВременногоХранилища(ЭлементМассива);
		Исключение
			пМассивКэшаВремменыеХранилища.Добавить(ЭлементМассива);
		КонецПопытки;
		
	КонецЦикла;
	
	МассивКэшаВремменыеХранилища = пМассивКэшаВремменыеХранилища;
	
КонецПроцедуры // УдалитьВременныеФайлыHTMLКлиент()

&НаКлиенте
Процедура УдалитьВременныеФайлыКлиент(ВременныйКаталог)
	
	Попытка
		УдалитьФайлы(ВременныйКаталог);
	Исключение
	КонецПопытки;
	
	// Очистка кэша на случай прерывания тестирования
	Если МассивКэшаВремменыеХранилища.Количество() > 0 Тогда
		ОчиститьКэшВременныеХранилища();
	КонецЕсли;
	
КонецПроцедуры // УдалитьВременныеФайлыHTMLКлиент()

&НаСервере
Процедура СохранитьКартинкуНаДискеСервер(КаталогВременныхФайлов, ПолноеИмяФайла, СсылкаНаФайл);

	ПолноеИмяФайла = Строка(КаталогВременныхФайлов) + "\" + Этаформа.УникальныйИдентификатор + "\" +
			Строка(Новый УникальныйИдентификатор) + ".png";

    Аттестация.СохранитьФайлНаДискеИзХранилищаСервер(СсылкаНаФайл.Файл, ПолноеИмяФайла, СсылкаНаФайл);	
	
КонецПроцедуры

#КонецОбласти

