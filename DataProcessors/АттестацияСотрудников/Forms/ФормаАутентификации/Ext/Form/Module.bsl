#Область Переменных

&НаКлиенте
Перем ИмяФормыПолное;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПолноеИмяФормыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;                                                       

	ОткрытьФорму(ИмяФормыПолное + "ФормаВыбораФизЛица",Новый Структура("Организация", Организация),,ЭтаФорма,ВариантОткрытияОкна.ОтдельноеОкно,,
			Новый ОписаниеОповещения("ОбработатьВыборФизЛица", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ЗаполнитьФизЛицоПоВведенномуПаролюКлиент();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = ПроверитьЗаполнениеОбязательныхПолейКлиент();
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(,"Заполните обязательные поля!");
		
	Иначе
		
		Если ПроверитьКорректностьВводаДанных(Сотрудник, Пароль) Тогда
			ПоказатьПредупреждение(,"Введенный пароль не соответствует указанному сотруднику!");
		Иначе
			ОткрытьФорму(ИмяФормыПолное + "ФормаВыбораВидаАттестации",Новый Структура("Организация, Сотрудник", Организация, Сотрудник),,ЭтаФорма,ВариантОткрытияОкна.ОтдельноеОкно,,
					Новый ОписаниеОповещения("ОбработатьВыборВидаАттестации", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ОбработатьВыборФизЛица(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Сотрудник = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВидаАттестации(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(,"Укажите вид аттестации для прохождения тестирования!");
	Иначе
		ВидАттестации = Результат;  
		
		//Только после заполнения сотрудника и и вида аттестации закрывать форму аутентификации 
		ЭтаФорма.Закрыть(Новый Структура("Сотрудник, ВидАттестации, Организация", Сотрудник, ВидАттестации, Организация));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияВыбораСотрудника(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеВыбора <> Неопределено Тогда
		Организация = ДополнительныеПараметры.МассивСотрудников[ЗначениеВыбора.Значение].Организация; 
		Сотрудник   = ДополнительныеПараметры.МассивСотрудников[ЗначениеВыбора.Значение].Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьПолноеИмяФормыКлиент()
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ИмяФормыПолное = ИмяФормыПолное;
	Иначе
		ИмяФормыПолное = "Обработка.АттестацияСотрудников.Форма.";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
//Возвращает полное имя текущей формы (для работы с внешней обработкой)
Функция ПолучитьПолноеИмяФормы(ИмяФормы) 
	
    СимволТочка = ".";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции

&НаКлиенте
// Проверка заполнения обязательных полей
//
// Возвращаемое значение:
//   <Тип.Булево>   - Признак заполнения
//
Функция ПроверитьЗаполнениеОбязательныхПолейКлиент()

	 Возврат НЕ ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(Сотрудник) ИЛИ НЕ ЗначениеЗаполнено(Пароль);

КонецФункции // ПроверитьЗаполнениеОбязательныхПолейКлиент()

&НаСервереБезКонтекста
// Проверяет соответствие введенного пароля (Штрихкод из бейджа) и указанного физ. лица
//
// Параметры:
//  Сотрудник  - <Тип.СправочникСсылка.ФизическиеЛица> - Физ. лицо сотрудника
//                 
//  Пароль     - <Тип.Строка> - Пароль (Штрихкод), который хранится в справочнике ПерсоналККМ (актуально только для сотрудников, 
//							 у которых есть в наличии бейджи: Продавцы, кассиры)  
//
// Возвращаемое значение:
//   <Тип.Булево>   - Признак успешного прохождения аутентификации 
//
Функция ПроверитьКорректностьВводаДанных(Сотрудник, Пароль, ВернутьФизЛицо = Ложь)
	
	Если ЗначениеЗаполнено(Сотрудник) И Пароль = "1111" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабФизЛица.Связь,
	|	ТабФизЛица.СотрудникККМ,
	|	ТабФизЛица.Код,
	|	ТабФизЛица.Пароль,
	|	ТабФизЛица.ФизЛицо,
	|	ТабФизЛица.ФизЛицоКод,
	|	ТабФизЛица.РольНаКассе,
	|	ЕСТЬNULL(СотрудникиОрганизаций.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		""По коду"" КАК Связь,
	|		ПерсоналККМ.Ссылка КАК СотрудникККМ,
	|		ПерсоналККМ.Код КАК Код,
	|		ПерсоналККМ.Пароль КАК Пароль,
	|		ФизическиеЛица.Ссылка КАК ФизЛицо,
	|		ФизическиеЛица.Код КАК ФизЛицоКод,
	|		ПерсоналККМ.РольНаКассе КАК РольНаКассе
	|	ИЗ
	|		Справочник.ПерсоналККМ КАК ПерсоналККМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ПерсоналККМ.Код = ФизическиеЛица.Код
	|	ГДЕ
	|		ПерсоналККМ.Пароль = &Пароль
	|		И (ФизическиеЛица.Ссылка = &Сотрудник
	|				ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|		И НЕ ПерсоналККМ.ПометкаУдаления
	|		И ФизическиеЛица.Активный
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		""По Наименованию"",
	|		ПерсоналККМ.Ссылка,
	|		ПерсоналККМ.Код,
	|		ПерсоналККМ.Пароль,
	|		ФизическиеЛица.Ссылка,
	|		ФизическиеЛица.Код,
	|		ПерсоналККМ.РольНаКассе
	|	ИЗ
	|		Справочник.ПерсоналККМ КАК ПерсоналККМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ПерсоналККМ.Наименование = ФизическиеЛица.Наименование
	|				И ПерсоналККМ.Код <> ФизическиеЛица.Код
	|	ГДЕ
	|		ПерсоналККМ.Пароль = &Пароль
	|		И (ФизическиеЛица.Ссылка = &Сотрудник
	|				ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|		И НЕ ПерсоналККМ.ПометкаУдаления
	|		И ФизическиеЛица.Активный) КАК ТабФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ТабФизЛица.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("Пароль", Пароль);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ВернутьФизЛицо Тогда
		
		МассивСотрудников = Новый Массив();
		
		Если РезультатЗапроса.Пустой() Тогда
			МассивСотрудников.Добавить(Новый Структура("Сотрудник, Организация", Справочники.ФизическиеЛица.ПустаяСсылка(), Справочники.Организации.ПустаяСсылка()));
			Возврат МассивСотрудников;        
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивСотрудников.Добавить(Новый Структура("Сотрудник, Организация",  Выборка.ФизЛицо, ?(ЗначениеЗаполнено(Выборка.Организация),Выборка.Организация, "Без организации")));
			КонецЦикла;
			Возврат МассивСотрудников;
		КонецЕсли;
	Иначе	
		Возврат Запрос.Выполнить().Пустой();
	КонецЕсли;

КонецФункции // ПроверитьКорректностьВводаДанных()

&НаКлиенте
// Заполняет физ. лицо по введенному паролю (через справочник Пользователи ККМ)
//
Процедура ЗаполнитьФизЛицоПоВведенномуПаролюКлиент()
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		
		Если ЗначениеЗаполнено(Сотрудник) И Пароль = "1111" Тогда
			Возврат;
		КонецЕсли;

		МассивСотрудников = ПроверитьКорректностьВводаДанных(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"), Пароль, Истина);
		
		Если МассивСотрудников.Количество() = 1 Тогда
			Организация = МассивСотрудников[0].Организация; 
			Сотрудник   = МассивСотрудников[0].Сотрудник;
		Иначе
			СписокВыбора = Новый СписокЗначений();
			
			Индекс = 0;
			Для Каждого ЭлементМассива Из МассивСотрудников Цикл
				СписокВыбора.Добавить(Индекс, СтрЗаменить("(Организация) ", "Организация", ЭлементМассива.Организация) + Строка(ЭлементМассива.Сотрудник));
				Индекс = Индекс + 1;
			КонецЦикла;
			
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработкаОповещенияВыбораСотрудника", ЭтаФорма, Новый Структура("МассивСотрудников", МассивСотрудников)), СписокВыбора, Элементы.Организация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьФизЛицоПоВведенномуПаролюКлиент()

&НаКлиенте
// Закрывает текущую форму аутентификации
//
Процедура ЗакрытьФормуАутентификации() Экспорт
	Закрыть();
КонецПроцедуры // ЗакрытьФормуАутентификации()

#КонецОбласти






