
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьТаблицуМагазинов();
	ОтборПоТипуМагазина = Неопределено;
	ОтборПоФормату = Неопределено;
	//Элементы.МагазиныКоманднаяПанель.ПодчиненныеЭлементы.ФорматыРозничныхТочек.
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуМагазинов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛОЖЬ КАК Выбран,
	               |	СтруктурныеЕдиницы.Ссылка КАК Магазин,
	               |	СтруктурныеЕдиницы.ТипРозничнойТочки КАК Тип,
	               |	СтруктурныеЕдиницы.СтатусТорговойТочки КАК Статус,
	               |	СтруктурныеЕдиницы.ФорматРозничнойТочки КАК Формат
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = &ТипСтруктурнойЕдиницы
	               |	И СтруктурныеЕдиницы.ТипРозничнойТочки <> &ТипРозничнойТочкиВкусомат
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Тип,
	               |	Магазин";
	Запрос.УстановитьПараметр("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница"));
	Запрос.УстановитьПараметр("ТипРозничнойТочкиВкусомат", ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Вкусомат"));
	ТЗ_Магазины = Запрос.Выполнить().Выгрузить();
	Объект.Магазины.Загрузить(ТЗ_Магазины);
КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиПерекресток(Команда)
	ОтборПоТипуМагазина = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Перекресток");
	СнятьВыделениеУВсехТиповМагазиновКромеУказаного(ОтборПоТипуМагазина);
	Элементы.Магазины.ОтборСтрок = Новый ФиксированнаяСтруктура("Тип", ОтборПоТипуМагазина);
	Элементы.МагазиныТипРозничнойТочкиВсе.Пометка = Ложь;
	Элементы.МагазиныТипРозничнойТочкиПерекресток.Пометка = Истина;
	Элементы.МагазиныТипРозничнойТочкиПятерочка.Пометка = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеУВсехТиповМагазиновКромеУказаного(ТипРозничнойТочки)
	Для Каждого Стр Из Объект.Магазины Цикл	
		Если Стр.Тип <> ТипРозничнойТочки Тогда
			Стр.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиВсе(Команда)
	ОтборПоТипуМагазина = Неопределено;
	Элементы.Магазины.ОтборСтрок = Неопределено;
	Элементы.МагазиныТипРозничнойТочкиВсе.Пометка = Истина;
	Элементы.МагазиныТипРозничнойТочкиПерекресток.Пометка = Ложь;
	Элементы.МагазиныТипРозничнойТочкиПятерочка.Пометка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиПятерочка(Команда)
	ОтборПоТипуМагазина = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Пятерочка");
	СнятьВыделениеУВсехТиповМагазиновКромеУказаного(ОтборПоТипуМагазина);
	Элементы.Магазины.ОтборСтрок = Новый ФиксированнаяСтруктура("Тип", ОтборПоТипуМагазина);
	Элементы.МагазиныТипРозничнойТочкиВсе.Пометка = Ложь;
	Элементы.МагазиныТипРозничнойТочкиПерекресток.Пометка = Ложь;
	Элементы.МагазиныТипРозничнойТочкиПятерочка.Пометка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВАссортимент(Команда)
	Для Каждого СтрМагазин из Объект.Магазины цикл
		Если СтрМагазин.Выбран Тогда
			Для Каждого СтрТовар из Объект.Товары цикл
				ДобавитьАссортиментСервер(СтрМагазин.Магазин, СтрТовар.Номенклатура, СтрТовар.Характеристика, СтрТовар.Период);	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьАссортиментСервер(Магазин, мНоменклатура, Характеристика, Период) 
	МенеджерЗаписи = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 			= Период;
	МенеджерЗаписи.ТорговаяТочка 	= Магазин;
	МенеджерЗаписи.Номенклатура 	= мНоменклатура;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Сообщить("На " + Формат(Период, "ДФ=dd.MM.yy") +
					" уже есть запись для " + СокрЛП(Магазин) + " с позицией " + СокрЛП(мНоменклатура) + "!");
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.Период 			= Период;
	МенеджерЗаписи.ТорговаяТочка 	= Магазин;
	МенеджерЗаписи.Номенклатура 	= мНоменклатура;
	МенеджерЗаписи.Характеристика 	= Характеристика; //ПолучитьХарактеристикуДляНовогоАссортимента(Магазин, мНоменклатура, Период);
	МенеджерЗаписи.ДатаСозданияЗаписи = ТекущаяДата();
	МенеджерЗаписи.Автор			= ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
	    МенеджерЗаписи.Записать();
		Сообщить("Товар " + СокрЛП(мНоменклатура) + " введен в ассортимент торговой точки " + СокрЛП(Магазин) + " начиная с " + Формат(Период, "ДФ=dd.MM.yy"));
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	// план продаж (если нету)
	ДопМодульСервер.ДобавитьПланыПродажНаНеделюВперед(Магазин, мНоменклатура);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХарактеристикуДляНовогоАссортимента(мТТ, мНоменклатура, мДата)
	
	РезультатыЗапроса = ДопМодульСервер.ПолучитьТаблицыДляНовыхХарактеристикАссортимента(мДата);
	
	//
	ТабСамыеЧастыеХарки = РезультатыЗапроса[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов = РезультатыЗапроса[1].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	
	//
	СтрокаКешСклад = ТабСкладыМагазинов.Найти(мТТ, "ТорговаяТочка");
	
	ТабПоТоварам = Новый ТаблицаЗначений();
	ТабПоТоварам.Колонки.Добавить("Харка");
	ТабПоТоварам.Колонки.Добавить("Колво");
	СтрокиПоХарке = ТабСамыеЧастыеХарки.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаКешСклад.ОсновнойСклад, мНоменклатура));
	
	Для Каждого СтрокаХар Из СтрокиПоХарке Цикл
		СтрокаДоб = ТабПоТоварам.Добавить();
		СтрокаДоб.Харка = СтрокаХар.Характеристика;
		СтрокаДоб.Колво = СтрокаХар.Колво;
	КонецЦикла;
	
	ТабПоТоварам.Сортировать("Колво убыв");
	
	Возврат ?(ТабПоТоварам.Количество() > 0, ТабПоТоварам[0].Харка, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
КонецФункции

&НаКлиенте
Процедура ВывестиИзАссортимента(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Вывести выбранные позиции?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	
	Для Каждого СтрМагазин из Объект.Магазины цикл
		Если СтрМагазин.Выбран Тогда
			ТЗ = Новый Массив;
			Для каждого СтрНоменклатура Из Объект.Товары Цикл	
		//ТекДанные = Элементы.Ассортимент.ДанныеСтроки(ВыделеннаяСтрока);
		//Если ТекДанные.Состояние > ЭтаФорма.ДатаУстановкиИзменений Тогда
		//	ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет выведена, так как она ещё не введена.",,,,,, Истина);
		//	Продолжить;
		//КонецЕсли;	
		
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("Номенклатура"		, СтрНоменклатура.Номенклатура);
				СтруктураЗаписи.Вставить("Период"			, СтрНоменклатура.Период);
				СтруктураЗаписи.Вставить("Характеристика"	, СтрНоменклатура.Характеристика);
				ТЗ.Добавить(СтруктураЗаписи);	
			КонецЦикла;
	
			Если ТЗ.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;	
	
		//
			ПроверитьНаБудущийВводПозиции(СтрМагазин.Магазин, ТЗ);
   			ВывестиПозицииСервер(СтрМагазин.Магазин, ТЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьНаБудущийВводПозиции(Магазин, МассивСтрокНоменклатуры)
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Период"			, ТекущаяДата());
	Запрос.УстановитьПараметр("ТорговаяТочка"	, Магазин);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Период КАК Период,
	|	ТоварныйАссортиментТочек.ТорговаяТочка,
	|	ТоварныйАссортиментТочек.Номенклатура
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка = &ТорговаяТочка
	|	И ТоварныйАссортиментТочек.Номенклатура = &Номенклатура
	|	И НЕ ТоварныйАссортиментТочек.Выведена
	|	И ТоварныйАссортиментТочек.Период > &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Для каждого Стр Из МассивСтрокНоменклатуры Цикл
		Запрос.УстановитьПараметр("Период"		, Стр.Период);
		Запрос.УстановитьПараметр("Номенклатура", Стр.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			 ОбщегоНазначения.Сообщение(СокрЛП(Стр.Номенклатура) +
			 							" будет снова введена в ассортимент этой точки с " + Стр.Период +
										". Из плана продаж она не будет удалена.", Перечисления.ВидыСообщений.ВажнаяИнформация,,,,, Истина);
			 Стр.Вставить("ОбрабатыватьПлан", Ложь);
		 Иначе
			 Стр.Вставить("ОбрабатыватьПлан", Истина);
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ВывестиПозицииСервер(Магазин, МассивСтрокНоменклатуры)
	
	мТЗНоменклатуры = Новый ТаблицаЗначений;
	мТЗНоменклатуры.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	мТЗНоменклатуры.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	мТЗНоменклатуры.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	Для каждого Стр Из МассивСтрокНоменклатуры Цикл
		НоваяСТрока = мТЗНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Номенклатура");
	
	// уже существующий ассортимент точки
	Запрос = Новый Запрос;			 
	Запрос.УстановитьПараметр("ТорговаяТочка"		, Магазин);
	Запрос.УстановитьПараметр("Таб"	, мТЗНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Номенклатура КАК Номенклатура,
	|	Таб.Период КАК Период
	|ПОМЕСТИТЬ ВТ_Таб
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	|	ВТ_Таб.Период
	|ИЗ
	|	ВТ_Таб КАК ВТ_Таб
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	|		ПО ВТ_Таб.Номенклатура = ТоварныйАссортиментТочек.Номенклатура
	|			И ВТ_Таб.Период = ТоварныйАссортиментТочек.Период
	|ГДЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка = &ТорговаяТочка";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Для каждого ВыделеннаяСтрока Из МассивСтрокНоменклатуры Цикл
		
		СтруктураОтбора.Номенклатура = ВыделеннаяСтрока.Номенклатура;
		НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбщегоНазначения.Сообщение("Для позиции " + СокрЛП(ВыделеннаяСтрока.Номенклатура) +
										" уже есть запись в ассортименте этой точки на " + ВыделеннаяСтрока.Период +
										". Позиция не может быть выведена этой датой.", Перечисления.ВидыСообщений.ВажнаяИнформация,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		// добавление в регистр сведений "ТоварныйАссортиментТочек" записи с (Выведена = Истина)
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность		= Истина;
		НоваяЗапись.Выведена		= Истина;
		НоваяЗапись.Номенклатура	= ВыделеннаяСтрока.Номенклатура;
		НоваяЗапись.Период			= ВыделеннаяСтрока.Период;
		НоваяЗапись.ТорговаяТочка	= Магазин;
		НоваяЗапись.Характеристика	= ВыделеннаяСтрока.Характеристика;
		
		//Если НЕ ВыделеннаяСтрока.ОбрабатыватьПлан Тогда
		//	Продолжить;
		//КонецЕсли;
		
		// удаление из регистра сведений "ПланыПродажПоДнямНедели"
		НаборЗаписейПлан = РегистрыСведений.ПланыПродажПоДнямНедели.СоздатьНаборЗаписей();
		НаборЗаписейПлан.Отбор.ТорговаяТочка.Установить(Магазин);
		НаборЗаписейПлан.Отбор.Номенклатура.Установить(ВыделеннаяСтрока.Номенклатура);
		НаборЗаписейПлан.Прочитать();
		Кол = НаборЗаписейПлан.Количество() - 1;
		Пока Кол >= 0 Цикл
			Если НаборЗаписейПлан[Кол].Дата >= ВыделеннаяСтрока.Период Тогда
				НаборЗаписейПлан.Удалить(Кол);
			КонецЕсли;	
			Кол = Кол - 1;
		КонецЦикла;	
		Попытка
			НаборЗаписейПлан.Записать();
			Сообщить("Товар " + СокрЛП(ВыделеннаяСтрока.Номенклатура) + " выведен из ассортимент торговой точки " + СокрЛП(Магазин) + " начиная с " + Формат(ВыделеннаяСтрока.Период, "ДФ=dd.MM.yy"));
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры	


&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Элементы.Товары.ТекущиеДанные.Характеристика = ЗаполнитьХарактеристику(Элементы.Товары.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьХарактеристику(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Ссылка
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Владелец = &Владелец
	               |	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() = 1 Тогда
		Возврат Тз[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВыбратьВсеМагазины(Команда)
	Для Каждого Стр Из Объект.Магазины Цикл	
		Если Стр.Тип = ОтборПоТипуМагазина ИЛИ НЕ ЗначениеЗаполнено(ОтборПоТипуМагазина) Тогда
			Стр.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыборМагазинов(Команда)
	Для Каждого Стр Из Объект.Магазины Цикл	
		Если Стр.Тип = ОтборПоТипуМагазина ИЛИ НЕ ЗначениеЗаполнено(ОтборПоТипуМагазина) Тогда
			Стр.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоФормату(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Команда)
 
    Оповещение = Новый ОписаниеОповещения("ПослеВводаДаты", ЭтаФорма);	
 
    ПоказатьВводДаты(
        Оповещение,
        , // пропускаем начальное значение даты
        "Укажите период", 
        ЧастиДаты.Дата
    );    
 
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеВводаДаты(Дата, Параметры) Экспорт
 
    Если Не Дата = Неопределено Тогда
		
		Для каждого Стр Из Объект.Товары Цикл
			Стр.Период = Дата;
		КонецЦикла;	
		
    КонецЕсли;
 
КонецПроцедуры


&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	СписокВидовНоменклатуры = Новый СписокЗначений;	
	СписокВидовНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар"));
	
	СписокТиповТовара = Новый СписокЗначений;	
	СписокТиповТовара.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТоваров.ПокупнойТовар"));
	СписокТиповТовара.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТоваров.Продукция"));
	СписокТиповТовара.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТоваров.ПустаяСсылка"));
	СписокТиповТовара.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТоваров.РеализуемаяУслуга"));
	СписокТиповТовара.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТоваров.Сырье"));
	
		
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидНоменклатуры, ТорговаяМарка, ПометкаУдаления, ТипТовара", СписокВидовНоменклатуры, ПредопределенноеЗначение("Справочник.ТорговыеМарки.ЗеленаяЛиния"), Ложь, СписокТиповТовара));
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ОповещениеОВыбореНоменклатуры = Новый ОписаниеОповещения("ТоварыНоменклатураВыборЗавершение", ЭтаФорма, неопределено);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент, , , , ОповещениеОВыбореНоменклатуры, );

	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Товары.ТекущиеДанные.Номенклатура = Результат;
	ТоварыНоменклатураПриИзменении(Элементы.Товары.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры


&НаСервере
Процедура КопироватьАссортиментНаСервере(СтруктурнаяЕдиница)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(, ТорговаяТочка = &ТорговаяТочка) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТорговаяТочка", СтруктурнаяЕдиница);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ТЗ);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФорматуНаСервере(Формат)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МатрицаМагазиновХ5СрезПоследних.Номенклатура,
	|	МатрицаМагазиновХ5СрезПоследних.Характеристика
	|ИЗ
	|	РегистрСведений.МатрицаМагазиновХ5.СрезПоследних(, Формат = &Формат) КАК МатрицаМагазиновХ5СрезПоследних
	|ГДЕ
	|	МатрицаМагазиновХ5СрезПоследних.Выведена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Формат", Формат);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ТЗ);
КонецПроцедуры



&НаКлиенте
Процедура КопироватьАссортимент(Команда)
	
	СписокТиповРозничныхТочек = Новый СписокЗначений;
	СписокТиповРозничныхТочек.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Пятерочка"));
	СписокТиповРозничныхТочек.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Перекресток"));

	Отбор = Новый Структура;
	Отбор.Вставить("ТипРозничнойТочки", СписокТиповРозничныхТочек);
	Отбор.Вставить("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	СписокПараметров = Новый Структура;                	
	ОП = Новый ОписаниеОповещения("ВыборПолучателяЗавершение", ЭтаФорма, СписокПараметров);
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбораУпр",ПараметрыФормы,,,,,ОП);

КонецПроцедуры


&НаКлиенте
Процедура ВыборПолучателяЗавершение(Результат, СписокПараметров) Экспорт
	ВыбПолучатель = Результат;
	Если ЗначениеЗаполнено(ВыбПолучатель) = Истина Тогда
		СписокПараметров.Вставить("ВыбПолучатель", ВыбПолучатель);
		ТекстВопроса = "Вы хотите скопировать ассортимент магазина " + СокрЛП(Строка(ВыбПолучатель)) + "? Текущая таблица товаров будет очищена."; 
		ОП = Новый ОписаниеОповещения("РезультатВопросаОКопировании", ЭтаФорма, СписокПараметров);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена); 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаОКопировании(Результат, СписокПараметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда		
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		КопироватьАссортиментНаСервере(СписокПараметров.ВыбПолучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФормату(Команда)
	СписокПараметров = Новый Структура;   
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);	
	ОП = Новый ОписаниеОповещения("ВыборФорматаЗавершение", ЭтаФорма, СписокПараметров);
	ОткрытьФорму("Справочник.ФорматыРозничныхТочек.Форма.ФормаВыбораУправляемая",ПараметрыФормы,,,,,ОП);
КонецПроцедуры


&НаКлиенте
Процедура ВыборФорматаЗавершение(Результат, СписокПараметров) Экспорт
	ВыбПолучатель = Результат;
	Если ЗначениеЗаполнено(ВыбПолучатель) = Истина Тогда
		СписокПараметров.Вставить("ВыбПолучатель", ВыбПолучатель);
		ТекстВопроса = "Вы хотите заполнить ассортимент по формату магазина: " + СокрЛП(Строка(ВыбПолучатель)) + "? Текущая таблица товаров будет очищена."; 
		ОП = Новый ОписаниеОповещения("РезультатВопросаОКопированииФормата", ЭтаФорма, СписокПараметров);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена); 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаОКопированииФормата(Результат, СписокПараметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда		
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьПоФорматуНаСервере(СписокПараметров.ВыбПолучатель);
	КонецЕсли;  	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоАссортименту(Команда)
	ОткрытьФорму("Обработка.УправлениеАссортиментомЗЛ.Форма.ФормаОтчета");
КонецПроцедуры

