

Процедура МесяцСтрокаПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодНачисления);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодНачисления);
	
	ОчиститьВсеТаблицы();
	
КонецПроцедуры

Процедура МесяцСтрокаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодНачисления, ЭтаФорма);
	
	ОчиститьВсеТаблицы();
	
КонецПроцедуры

Процедура МесяцСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодНачисления = ДобавитьМесяц(ПериодНачисления, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодНачисления);
	
	ОчиститьВсеТаблицы();
	
КонецПроцедуры

Процедура МесяцСтрокаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПериодНачисления = НачалоМесяца(ТекущаяДата());
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодНачисления);
	
	НеВыгружатьВБУ = Истина;
	ОбновлятьРанееСозданныеДокументы = Истина;
	
	ОбновитьОшибкиЗаполнения();
	
КонецПроцедуры


/////////////////////////////////////////////////////////
// СОЗДАНИЕ ПОСТУПЛЕНИЙ

Процедура НоваяПроцедураСозданияДокументов()
	
	Если ОшибкиЗаполнения Тогда
		Предупреждение("Перед созданием документов необходимо устранить ошибки!");
		Возврат;
	КонецЕсли;
	
	Если Услуги.Количество() = 0 Тогда
		Предупреждение("Нет данных для создания документов. Их необходимо заполнить по кнопке ""Заполнить данные"".");
		Возврат;
	КонецЕсли;
	
	Если Не НеВыгружатьВБУ Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеСтатейДРСтатьямБУ.Статья,
		|	СоответствиеСтатейДРСтатьямБУ.Счет,
		|	МАКСИМУМ(СоответствиеСтатейДРСтатьямБУ.СтатьяБУ) КАК СтатьяБУ
		|ИЗ
		|	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
		|ГДЕ
		|	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА Справочник.СтатьиЗатратБУ
		|	И СоответствиеСтатейДРСтатьямБУ.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеСтатейДРСтатьямБУ.Статья,
		|	СоответствиеСтатейДРСтатьямБУ.Счет");
		
		ТаблицаСоответствия = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// Снимем флаг со строк не входящих в отборы
	ЕстьПомеченныеНеВОтборе = Ложь;
	
	ТекОтборОрганизация = ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Организация;
	ТекОтборКонтрагент 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Контрагент;
	ТекОтборДоговор 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.ДоговорКонтрагента;
	ТекОтборУслуга 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Услуга;
	ТекОтборСтатьяДР 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.СтатьяДР;
	ТекОтборДокумент 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Документ;
	ТекОтборСДДС 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.СтатьяДвиженияДенежныхСредств;
	ТекОтборСумма 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Сумма;
	
	Для Каждого СтрокаОбъекта из УслугиПоДоговорам Цикл
		Если СтрокаОбъекта.Флаг Тогда
			Если Не вВходитВОтбор(СтрокаОбъекта.Организация, ТекОтборОрганизация) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Контрагент, ТекОтборКонтрагент) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.ДоговорКонтрагента, ТекОтборДоговор) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Услуга, ТекОтборУслуга) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДР, ТекОтборСтатьяДР) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Документ, ТекОтборДокумент) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДвиженияДенежныхСредств, ТекОтборСДДС) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Сумма, ТекОтборСумма) Тогда
				ЕстьПомеченныеНеВОтборе = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПомеченныеНеВОтборе Тогда
		Ответ = Вопрос("Существуют выбранные записи не попавшие в текущий отбор.
		|Снять флажки у непопавших в отбор?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Для Каждого СтрокаОбъекта из УслугиПоДоговорам Цикл
				Если СтрокаОбъекта.Флаг Тогда
					Если Не вВходитВОтбор(СтрокаОбъекта.Организация, ТекОтборОрганизация) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
					Если Не вВходитВОтбор(СтрокаОбъекта.Контрагент, ТекОтборКонтрагент) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
					Если Не вВходитВОтбор(СтрокаОбъекта.ДоговорКонтрагента, ТекОтборДоговор) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
					Если Не вВходитВОтбор(СтрокаОбъекта.Услуга, ТекОтборУслуга) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
					Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДР, ТекОтборСтатьяДР) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
					Если Не вВходитВОтбор(СтрокаОбъекта.Документ, ТекОтборДокумент) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
					Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДвиженияДенежныхСредств, ТекОтборСДДС) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
					Если Не вВходитВОтбор(СтрокаОбъекта.Сумма, ТекОтборСумма) Тогда
						СтрокаОбъекта.Флаг = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтрокиНачисления = УслугиПоДоговорам.НайтиСтроки(Новый Структура("Флаг", Истина));
	
	Для каждого СтрокаДоговор Из НайденныеСтрокиНачисления Цикл
		
		Если ЗначениеЗаполнено(СтрокаДоговор.Документ) И Не ОбновлятьРанееСозданныеДокументы Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДоговор.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДоговор.Документ)Тогда
			ПоступлениеОбъект = СтрокаДоговор.Документ.ПолучитьОбъект();
		Иначе
			ПоступлениеОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		//
		ПоступлениеОбъект.Организация 			= СтрокаДоговор.Организация;
		Если ПоступлениеОбъект.ЭтоНовый() Тогда
			//ПоступлениеОбъект.Дата					= Мин(ТекущаяДата(), КонецМесяца(ПериодНачисления));
			ПоступлениеОбъект.Дата					= КонецМесяца(ПериодНачисления);
			ПоступлениеОбъект.ДатаВходящегоДокумента					= КонецМесяца(ПериодНачисления);
			ПоступлениеОбъект.НомерВходящегоДокумента = "АВУ";
		КонецЕсли;	
		ПоступлениеОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ПоступлениеОбъект.Комментарий			= "Создан обработкой формирования начисления услуг поставщика за " + МесяцСтрока;
		ПоступлениеОбъект.СтруктурнаяЕдиница	= СтрокаДоговор.ДоговорКонтрагента.СтруктурнаяЕдиница;
		ПоступлениеОбъект.Контрагент 			= СтрокаДоговор.Контрагент;
		ПоступлениеОбъект.ДоговорКонтрагента 	= СтрокаДоговор.ДоговорКонтрагента;
		ПоступлениеОбъект.ВариантРасчетаНДС		= ?(СтрокаДоговор.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		ПоступлениеОбъект.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
		ПоступлениеОбъект.НеВыгружатьВБУ		= НеВыгружатьВБУ;
		
		Если ТипЗнч(СтрокаДоговор.ДоговорКонтрагента.Субконто2) = Тип("СправочникСсылка.СтатьиДоходовРасходов")Тогда
			ПоступлениеОбъект.СтатьяДДС	= СтрокаДоговор.ДоговорКонтрагента.Субконто2.ОсновнаяСтатьяДвиженияДенежныхСредств;//СтрокаДоговор.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(СтрокаДоговор.СтатьяДвиженияДенежныхСредств);
		//
		//Если МассивСчетов.Количество() = 1 Тогда
		//	ПоступлениеОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
		Если ЗначениеЗаполнено(ПоступлениеОбъект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
			ПоступлениеОбъект.СчетУчетаРасчетовСКонтрагентом = ПоступлениеОбъект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
		Иначе
			ПоступлениеОбъект.СчетУчетаРасчетовСКонтрагентом = Планысчетов.Финансовый.ПрочаяЗадолженность;
		КонецЕсли;
		
		//
		ПоступлениеОбъект.Услуги.Очистить();
		
		УслугиПоТочкам = Услуги.НайтиСтроки(Новый Структура("Организация, ДоговорКонтрагента", СтрокаДоговор.Организация, СтрокаДоговор.ДоговорКонтрагента));
		
		Для Каждого Стр Из УслугиПоТочкам Цикл
			
			//
			НоваяСтрока = ПоступлениеОбъект.Услуги.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			
			НоваяСтрока.Номенклатура = Стр.Услуга;
			НоваяСтрока.Содержание 	 = Строка(Стр.Услуга) + " за " + МесяцСтрока + " по " + Строка(Стр.СтруктурнаяЕдиница);
			НоваяСтрока.Количество 	 = 1;
			
			НоваяСтрока.Цена = Стр.Сумма;
			
			НоваяСтрока.СтавкаНДС = ПоступлениеОбъект.Контрагент.СтавкаНДС;
			ПоступлениеОбъект.ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
			
			// Если установлен флаг НеВыгружатьВБУ, то можно эти поля не заполнять
			Если Не НеВыгружатьВБУ Тогда
				
				НоваяСтрока.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
				НоваяСтрока.СчетЗатратНУ = НоваяСтрока.СчетЗатратБУ;
				
				НайденныеСтроки = ТаблицаСоответствия.НайтиСтроки(Новый Структура("Статья, Счет", Стр.СтатьяДР, Стр.СчетЗатрат));
				Если НайденныеСтроки.Количество()Тогда
					
					НоваяСтрока.СубконтоБУ1 = НайденныеСтроки[0].СтатьяБУ;
					НоваяСтрока.СубконтоНУ1 = НоваяСтрока.СубконтоБУ1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.ТорговаяТочка = Стр.СтруктурнаяЕдиница;
			
		КонецЦикла;
		
		Попытка
			ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(?(ЗначениеЗаполнено(СтрокаДоговор.Документ), "Обновлен документ поступления ", "Создан документ поступления ")+ПоступлениеОбъект);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	
	КонецЦикла; 
	
	// Обновим таблицы
	ОбновитьДанныеУслугПоДоговорам();
	
КонецПроцедуры


/////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОСНОВНЫХ ТАБЛИЦ

Процедура ОбновитьДанныеУслугПоДоговорам()
	
	Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АК_УсловияРегламентныхРаботСрезПоследних.Контрагент,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.Услуга,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.ДатаНачала,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.ДатаОкончания,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.Стоимость,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.ЧислоОплаты,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.Периодичность,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.ФормаОплаты,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.НеТребуетРегистрацииВыполнения КАК ВозможностьОплатыДоНачала,
	               |	АК_УсловияРегламентныхРаботСрезПоследних.ДоговорКонтрагента
	               |ПОМЕСТИТЬ ВТ_СводнаяТаблицаУсловий
	               |ИЗ
	               |	РегистрСведений.АК_УсловияРегламентныхРабот.СрезПоследних(&НачалоПериода, ) КАК АК_УсловияРегламентныхРаботСрезПоследних
	               |ГДЕ
	               |	АК_УсловияРегламентныхРаботСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЖурналРегламентныхРаботВМагазинах.ТорговаяТочка,
	               |	ЖурналРегламентныхРаботВМагазинах.Контрагент,
	               |	ЖурналРегламентныхРаботВМагазинах.Услуга,
	               |	НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода, МЕСЯЦ) КАК МесяцОплаты,
	               |	ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода,
	               |	ВЫБОР
	               |		КОГДА ЖурналРегламентныхРаботВМагазинах.Дата = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, ВТ_СводнаяТаблицаУсловий.ЧислоОплаты - 1)
	               |		ИНАЧЕ ЖурналРегламентныхРаботВМагазинах.Дата
	               |	КОНЕЦ КАК Дата,
	               |	ЖурналРегламентныхРаботВМагазинах.Сумма,
	               |	ВТ_СводнаяТаблицаУсловий.Стоимость,
	               |	ВТ_СводнаяТаблицаУсловий.ЧислоОплаты,
	               |	ВТ_СводнаяТаблицаУсловий.ВозможностьОплатыДоНачала,
	               |	ВТ_СводнаяТаблицаУсловий.ДатаНачала КАК ДатаНачалаДоговора,
	               |	ВТ_СводнаяТаблицаУсловий.ДатаОкончания КАК ДатаОкончанияДоговора,
	               |	ВТ_СводнаяТаблицаУсловий.ФормаОплаты,
	               |	ВТ_СводнаяТаблицаУсловий.ДоговорКонтрагента
	               |ПОМЕСТИТЬ ВТ_РаботыВПериоде
	               |ИЗ
	               |	РегистрСведений.ЖурналРегламентныхРаботВМагазинах КАК ЖурналРегламентныхРаботВМагазинах
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СводнаяТаблицаУсловий КАК ВТ_СводнаяТаблицаУсловий
	               |		ПО ЖурналРегламентныхРаботВМагазинах.ТорговаяТочка = ВТ_СводнаяТаблицаУсловий.ТорговаяТочка
	               |			И ЖурналРегламентныхРаботВМагазинах.Контрагент = ВТ_СводнаяТаблицаУсловий.Контрагент
	               |			И ЖурналРегламентныхРаботВМагазинах.Услуга = ВТ_СводнаяТаблицаУсловий.Услуга
	               |ГДЕ
	               |	ЖурналРегламентныхРаботВМагазинах.ДатаНачалаПериода >= &НачалоПериода
	               |	И ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода <= &КонецПериода
	               |	И ЖурналРегламентныхРаботВМагазинах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ЖурналРегламентныхРаботВМагазинах.НеВыполнено = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЖурналРегламентныхРаботВМагазинах.ТорговаяТочка,
	               |	ЖурналРегламентныхРаботВМагазинах.Контрагент,
	               |	ЖурналРегламентныхРаботВМагазинах.Услуга,
	               |	НАЧАЛОПЕРИОДА(ЖурналРегламентныхРаботВМагазинах.Дата, МЕСЯЦ),
	               |	ЖурналРегламентныхРаботВМагазинах.ДатаОкончанияПериода,
	               |	ЖурналРегламентныхРаботВМагазинах.Дата,
	               |	ЖурналРегламентныхРаботВМагазинах.Сумма,
	               |	ЖурналРегламентныхРаботВМагазинах.Сумма,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	РегистрСведений.ЖурналРегламентныхРаботВМагазинах КАК ЖурналРегламентныхРаботВМагазинах
	               |ГДЕ
	               |	ЖурналРегламентныхРаботВМагазинах.ВнеплановаяРабота
	               |	И ЖурналРегламентныхРаботВМагазинах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ЖурналРегламентныхРаботВМагазинах.НеВыполнено = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РаботыВПериоде.ТорговаяТочка,
	               |	ВТ_РаботыВПериоде.Контрагент,
	               |	ВТ_РаботыВПериоде.Услуга,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	               |ПОМЕСТИТЬ ВТ_ТТБезДоговоров
	               |ИЗ
	               |	ВТ_РаботыВПериоде КАК ВТ_РаботыВПериоде
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |		ПО ВТ_РаботыВПериоде.ТорговаяТочка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВТ_РаботыВПериоде.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТТБезДоговоров.ТорговаяТочка,
	               |	ВТ_ТТБезДоговоров.Контрагент,
	               |	ВТ_ТТБезДоговоров.Услуга,
	               |	ДоговорыКонтрагентов.Ссылка,
	               |	ДоговорыКонтрагентов.Дата
	               |ПОМЕСТИТЬ ВТ_Договоры
	               |ИЗ
	               |	ВТ_ТТБезДоговоров КАК ВТ_ТТБезДоговоров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ПО ВТ_ТТБезДоговоров.Контрагент = ДоговорыКонтрагентов.Владелец
	               |			И ВТ_ТТБезДоговоров.Услуга = ДоговорыКонтрагентов.Номенклатура
	               |			И ВТ_ТТБезДоговоров.Организация = ДоговорыКонтрагентов.Организация
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ДоговорыКонтрагентов.СрокДействия > &НачалоПериода
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.ТорговаяТочка КАК ТорговаяТочка,
	               |	ВложенныйЗапрос.Контрагент КАК Контрагент,
	               |	ВложенныйЗапрос.Услуга КАК Услуга,
	               |	МАКСИМУМ(ВТ_Договоры.Ссылка) КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ПоследниеДоговоры
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_Договоры.ТорговаяТочка КАК ТорговаяТочка,
	               |		ВТ_Договоры.Контрагент КАК Контрагент,
	               |		ВТ_Договоры.Услуга КАК Услуга,
	               |		МАКСИМУМ(ВТ_Договоры.Дата) КАК Дата
	               |	ИЗ
	               |		ВТ_Договоры КАК ВТ_Договоры
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_Договоры.ТорговаяТочка,
	               |		ВТ_Договоры.Контрагент,
	               |		ВТ_Договоры.Услуга) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
	               |		ПО ВложенныйЗапрос.ТорговаяТочка = ВТ_Договоры.ТорговаяТочка
	               |			И ВложенныйЗапрос.Контрагент = ВТ_Договоры.Контрагент
	               |			И ВложенныйЗапрос.Услуга = ВТ_Договоры.Услуга
	               |			И ВложенныйЗапрос.Дата = ВТ_Договоры.Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ТорговаяТочка,
	               |	ВложенныйЗапрос.Контрагент,
	               |	ВложенныйЗапрос.Услуга
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ПоступлениеТоваровУслугУслуги.Ссылка) КАК Ссылка,
	               |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	               |	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента
	               |ПОМЕСТИТЬ ВТ_Поступления
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |ГДЕ
	               |	ПоступлениеТоваровУслугУслуги.Ссылка.ДатаВходящегоДокумента МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	               |	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КонечнаяРаботы.ТорговаяТочка КАК СтруктурнаяЕдиница,
	               |	ВТ_КонечнаяРаботы.Контрагент КАК Контрагент,
	               |	ВТ_КонечнаяРаботы.Услуга КАК Услуга,
	               |	ВТ_КонечнаяРаботы.Сумма КАК СуммаПоФакту,
	               |	ВТ_КонечнаяРаботы.Стоимость КАК Цена,
	               |	ВТ_КонечнаяРаботы.ВозможностьОплатыДоНачала КАК ВозможностьОплатыДоНачала,
	               |	ВТ_КонечнаяРаботы.МесяцОплаты КАК МесяцОплаты,
	               |	ВТ_КонечнаяРаботы.ДатаНачалаДоговора КАК НачалоПериодаНачисления,
	               |	ВТ_КонечнаяРаботы.ДатаОкончанияДоговора КАК КонецПериодаНачисления,
	               |	ВТ_КонечнаяРаботы.ФормаОплаты,
	               |	ВТ_КонечнаяРаботы.Контрагент.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	               |	ВТ_КонечнаяРаботы.Контрагент.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов КАК СтатьяДР,
	               |	ВТ_КонечнаяРаботы.Дата,
	               |	ВЫБОР
	               |		КОГДА ВТ_КонечнаяРаботы.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |			ТОГДА ВТ_ПоследниеДоговоры.Ссылка
	               |		ИНАЧЕ ВТ_КонечнаяРаботы.ДоговорКонтрагента
	               |	КОНЕЦ КАК ДоговорКонтрагента
	               |ПОМЕСТИТЬ ВТ_РаботыСДоговорами
	               |ИЗ
	               |	ВТ_РаботыВПериоде КАК ВТ_КонечнаяРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеДоговоры КАК ВТ_ПоследниеДоговоры
	               |		ПО ВТ_КонечнаяРаботы.ТорговаяТочка = ВТ_ПоследниеДоговоры.ТорговаяТочка
	               |			И ВТ_КонечнаяРаботы.Услуга = ВТ_ПоследниеДоговоры.Услуга
	               |			И ВТ_КонечнаяРаботы.Контрагент = ВТ_ПоследниеДоговоры.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РаботыСДоговорами.СтруктурнаяЕдиница,
	               |	ВТ_РаботыСДоговорами.Контрагент,
	               |	ВТ_РаботыСДоговорами.Услуга,
	               |	ВТ_РаботыСДоговорами.СуммаПоФакту,
	               |	ВТ_РаботыСДоговорами.Цена,
	               |	ВТ_РаботыСДоговорами.ВозможностьОплатыДоНачала,
	               |	ВТ_РаботыСДоговорами.МесяцОплаты,
	               |	ВТ_РаботыСДоговорами.НачалоПериодаНачисления,
	               |	ВТ_РаботыСДоговорами.КонецПериодаНачисления,
	               |	ВТ_РаботыСДоговорами.ФормаОплаты,
	               |	ВТ_РаботыСДоговорами.СтатьяДвиженияДенежныхСредств,
	               |	ВТ_РаботыСДоговорами.СтатьяДР,
	               |	ВТ_РаботыСДоговорами.Дата,
	               |	ВТ_Поступления.Ссылка КАК Документ,
	               |	ВТ_РаботыСДоговорами.ДоговорКонтрагента,
	               |	ВТ_РаботыСДоговорами.ДоговорКонтрагента.Организация КАК Организация,
	               |	ВТ_РаботыСДоговорами.ДоговорКонтрагента.СчетЗатрат КАК СчетЗатрат,
	               |	ВТ_РаботыСДоговорами.ДоговорКонтрагента.Субконто1 КАК Субконто1,
	               |	ВТ_РаботыСДоговорами.ДоговорКонтрагента.Субконто2 КАК Субконто2,
	               |	ВТ_РаботыСДоговорами.ДоговорКонтрагента.Субконто3 КАК Субконто3
	               |ИЗ
	               |	ВТ_РаботыСДоговорами КАК ВТ_РаботыСДоговорами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Поступления КАК ВТ_Поступления
	               |		ПО ВТ_РаботыСДоговорами.Услуга = ВТ_Поступления.Номенклатура
	               |			И ВТ_РаботыСДоговорами.ДоговорКонтрагента = ВТ_Поступления.ДоговорКонтрагента";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодНачисления));
    Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодНачисления));

	ОсновнаяТаблица = Запрос.Выполнить().Выгрузить();
	//ТаблицаЦен 		= Результат[1].Выгрузить();
	// Собираем цены	
	КонецМесяцаПериодаНачисления = КонецМесяца(ПериодНачисления);
	
		
	// ЦФО Структурных единиц
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ТекДата, СтруктурнаяЕдиница В (&МассивТТ)) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
				   
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("МассивТТ", ОсновнаяТаблица.ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЦФО = Запрос.Выполнить().Выгрузить();
	
	ОсновнаяТаблица.Колонки.Добавить("Сумма");
	
	// Создание документов поступлений
	Для Каждого СтрокаТЗ Из ОсновнаяТаблица Цикл
		
		Обновить = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДоговорКонтрагента", СтрокаТЗ.ДоговорКонтрагента);
		Отбор.Вставить("Услуга", 			 СтрокаТЗ.Услуга);
		
		// Максимум может быть 1 документ
		//НайденныеСтроки = ТаблицаПоступлений.НайтиСтроки(Отбор);
		//Если НайденныеСтроки.Количество()Тогда
		//	
		//	СтрокаТЗ.Документ = НайденныеСтроки[0].ДокументПоступления;
		//	
		//КонецЕсли;
		
		// Проверим типы субконто, если структурные единицы то будем устанавливать торговые точки
		Если ЗначениеЗаполнено(СтрокаТЗ.ДоговорКонтрагента) Тогда
			КоличествоАктивныхСубконто = СтрокаТЗ.СчетЗатрат.ВидыСубконто.Количество();
			Для Сч = 1 По КоличествоАктивныхСубконто Цикл
				
				Если СтрокаТЗ.СчетЗатрат.ВидыСубконто[Сч-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
					СтрокаТЗ["Субконто"+Сч] = СтрокаТЗ.СтруктурнаяЕдиница;	
				ИначеЕсли СтрокаТЗ.СчетЗатрат.ВидыСубконто[Сч-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ЦФО Тогда
					
					СтрокиЦФО = ТаблицаЦФО.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", СтрокаТЗ.СтруктурнаяЕдиница));
					Если СтрокиЦФО.Количество()Тогда
						СтрокаТЗ["Субконто"+Сч] = СтрокиЦФО[0].ЦФО;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// Если цена установлена в месяце начисления и точка в этом месяце закрылась, тогда берется полностью,
		//// иначе вычисляется пропорционально календарным дням (Цена/ДнейВМесяце)*ДнейНачисления
		//Если ЗначениеЗаполнено(СтрокаТЗ.КонецПериодаНачисления) И СтрокаТЗ.ПериодУстановкиЦены < НачалоМесяца(ПериодНачисления) И СтрокаТЗ.КонецПериодаНачисления < НачалоДня(КонецМесяца(ПериодНачисления)) Тогда
		//	
		//	НачалоНачисления 	= Макс(СтрокаТЗ.НачалоПериодаНачисления, НачалоМесяца(ПериодНачисления));
		//	ОкончаниеНачисления = Мин(СтрокаТЗ.КонецПериодаНачисления, НачалоДня(КонецМесяца(ПериодНачисления)));
		//	КоличествоДней 		= (ОкончаниеНачисления - НачалоНачисления)/86400 + 1;  
		//	КоличествоДнейВМесяце = Число(Сред(КонецМесяца(ПериодНачисления), 1, 2));
		//	
		//	СтрокаТЗ.Цена = (СтрокаТЗ.Цена/КоличествоДнейВМесяце)*КоличествоДней;
		//	
		//КонецЕсли;
		
		СтрокаТЗ.Сумма = СтрокаТЗ.Цена;
		
	КонецЦикла;	
	
	Услуги.Загрузить(ОсновнаяТаблица);
	
	УслугиПоДоговорам.Очистить();
	
	ТЗ_УслугиПоДоговорам = Услуги.Выгрузить();
	ТЗ_УслугиПоДоговорам.Свернуть("Организация, Контрагент, ДоговорКонтрагента, Услуга, СтатьяДР, Документ, СтатьяДвиженияДенежныхСредств", "Сумма");
	
	Для Каждого Стр Из ТЗ_УслугиПоДоговорам Цикл
		Если Стр.Сумма > 0 Тогда
			ЗаполнитьЗначенияСвойств(УслугиПоДоговорам.Добавить(), Стр);
		КонецЕсли;
	КонецЦикла;
	
	//УслугиПоДоговорам.ЗаполнитьЗначения(Истина, "Флаг");
	
	Если УслугиПоДоговорам.Количество()Тогда
		ЭлементыФормы.УслугиПоДоговорам.ТекущаяСтрока = УслугиПоДоговорам[0];
	КонецЕсли;
	
	// Найдем договоры в которых не проставлен счет затрат
	НайтиДоговораСПустымиСчетамиЗатрат();
	
	// Найдем точки, по которым в договоре не заполнена дата окончания начисления, но в периоде начисления уже не создаются ЛУ
	НайтиСтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления();
	
	// Найдем ошибки заполнения статей затрат БУ
	НайтиОшибкиЗаполненияСтатейЗатратБУ();
	
КонецПроцедуры

Процедура НайтиДоговораСПустымиСчетамиЗатрат()
	
	ДоговораСПустымиСчетамиЗатрат.Очистить();
	
	// Найдем договоры в которых не проставлен счет затрат
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивДоговоров)
	|	И ДоговорыКонтрагентов.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("МассивДоговоров", Услуги.ВыгрузитьКолонку("ДоговорКонтрагента"));
	
	ДоговораСПустымиСчетамиЗатрат.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ОбновитьОшибкиЗаполнения();
	
КонецПроцедуры

Процедура НайтиСтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления()
	
	СтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.СтруктурнаяЕдиница
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.СоставСтруктурныхЕдиниц КАК ДоговорыКонтрагентовСоставСтруктурныхЕдиниц
	|ГДЕ
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка В(&Договора)
	|	И ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.КонецПериодаНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.СтруктурнаяЕдиница.НомерТочки > 0";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Договора", Услуги.ВыгрузитьКолонку("ДоговорКонтрагента"));
	
	МассивТочекСПустымПериодомОкончанияНачисления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница"); 
	
	КонецМесяцаПериодаНачисления = КонецМесяца(ПериодНачисления);
	
	ТекстЗапроса =
    "ВЫБРАТЬ
    |	ЛистУчета.ТорговаяТочка
    |ИЗ
    |	Документ.ЛистУчета КАК ЛистУчета
    |ГДЕ
    |	НЕ ЛистУчета.ПометкаУдаления
    |	И ЛистУчета.ТорговаяТочка В(&МассивТочек)
    |	И ЛистУчета.Дата МЕЖДУ &ДатаНачалаПроверкиНаличияЛУ И &ДатаОкончанияПроверкиНаличияЛУ
    |
    |СГРУППИРОВАТЬ ПО
    |	ЛистУчета.ТорговаяТочка";
	
	Запрос.Текст = ТекстЗапроса;
    
    Запрос.УстановитьПараметр("МассивТочек", 					МассивТочекСПустымПериодомОкончанияНачисления);
    Запрос.УстановитьПараметр("ДатаНачалаПроверкиНаличияЛУ", 	Мин(НачалоДня(ТекущаяДата()), НачалоДня(КонецМесяцаПериодаНачисления)) - 5*86400);  //Мин(Текдата, Дата конца месяца обработки)- 5 дней
    Запрос.УстановитьПараметр("ДатаОкончанияПроверкиНаличияЛУ", Мин(КонецДня(ТекущаяДата()), КонецМесяцаПериодаНачисления)); //Мин(Текдата, Дата конца месяца обработки)
 
	ТаблицаВыборкиТочек = Запрос.Выполнить().Выгрузить();
    
    Для Каждого СтрЕдиница Из МассивТочекСПустымПериодомОкончанияНачисления Цикл
    	
    	// Попытаемся найти точку в выборке
    	НайденнаяСтрока = ТаблицаВыборкиТочек.Найти(СтрЕдиница, "ТорговаяТочка");
    	Если НайденнаяСтрока = Неопределено Тогда
    		
    		НайденныеСтроки = Услуги.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", СтрЕдиница));
    		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
    			
    			// Дополнительная проверка, т.к. по точке может быть несколько договоров
    			Если Не ЗначениеЗаполнено(НайденнаяСтрока.КонецПериодаНачисления) Тогда
    				
    				ЗаполнитьЗначенияСвойств(СтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления.Добавить(), НайденнаяСтрока);
    				
    			КонецЕсли;
    			
    		КонецЦикла;
    		
    	КонецЕсли;
    	
    КонецЦикла;
	
	ОбновитьОшибкиЗаполнения();
	
КонецПроцедуры

Процедура НайтиОшибкиЗаполненияСтатейЗатратБУ()
	
	ОшибкиЗаполненияСтатейЗатратБУ.Очистить();
	
	Если НеВыгружатьВБУ Тогда
		ОбновитьОшибкиЗаполнения();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеСтатейДРСтатьямБУ.Статья,
	|	СоответствиеСтатейДРСтатьямБУ.Счет,
	|	МАКСИМУМ(СоответствиеСтатейДРСтатьямБУ.СтатьяБУ) КАК СтатьяБУ
	|ИЗ
	|	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	|ГДЕ
	|	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА Справочник.СтатьиЗатратБУ
	|	И СоответствиеСтатейДРСтатьямБУ.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеСтатейДРСтатьямБУ.Статья,
	|	СоответствиеСтатейДРСтатьямБУ.Счет");
	
	ТаблицаСоответствия = Запрос.Выполнить().Выгрузить();
	
	ТЗСчетСтатья = Услуги.Выгрузить(,"СчетЗатрат, СтатьяДР");
	ТЗСчетСтатья.Свернуть("СчетЗатрат, СтатьяДР");
	
	Для Каждого Стр Из ТЗСчетСтатья Цикл
		
		НайденныеСтроки = ТаблицаСоответствия.НайтиСтроки(Новый Структура("Статья, Счет", Стр.СтатьяДР, Стр.СчетЗатрат));
		Если НайденныеСтроки.Количество()Тогда
			
			Если Не ЗначениеЗаполнено(НайденныеСтроки[0].СтатьяБУ)Тогда
				ЗаполнитьЗначенияСвойств(ОшибкиЗаполненияСтатейЗатратБУ.Добавить(), Стр);	
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ОшибкиЗаполненияСтатейЗатратБУ.Добавить(), Стр);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьОшибкиЗаполнения();
	
КонецПроцедуры


/////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ НАЖАТИЯ НА ГИПЕРССЫЛКИ

Процедура НадписьНеЗаполненныеСчетаЗатратНажатие(Элемент)
	
	Если ДоговораСПустымиСчетамиЗатрат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОшибок = ПолучитьФорму("ФормаОшибокЗаполненияСчетовЗатрат");
	ФормаОшибок.Ошибки = ДоговораСПустымиСчетамиЗатрат.Выгрузить();
	ФормаОшибок.ОткрытьМодально();
	
	НайтиДоговораСПустымиСчетамиЗатрат();
	
КонецПроцедуры

Процедура НадписьТочкиБезОкончанияСрокаНачисленияНажатие(Элемент)
	
	Если СтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ФормаОшибок = ПолучитьФорму("ФормаОшибок");
	ФормаОшибок.Ошибки = СтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления.Выгрузить();
	ФормаОшибок.ОткрытьМодально();
	
	НайтиСтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления();
	
КонецПроцедуры

Процедура НадписьНеЗаполненныеСоответствияСтатейДРСтатьямБУНажатие(Элемент)
	
	Если ОшибкиЗаполненияСтатейЗатратБУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОшибок = ПолучитьФорму("ФормаОшибокЗаполненияСтатейЗатратБУ");
	ФормаОшибок.Ошибки = ОшибкиЗаполненияСтатейЗатратБУ.Выгрузить();
	ФормаОшибок.ОткрытьМодально();
	
	НайтиОшибкиЗаполненияСтатейЗатратБУ();	
	
КонецПроцедуры


/////////////////////////////////////////////////////////
// ПРОЧЕЕ

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	НоваяПроцедураСозданияДокументов();
	
КонецПроцедуры

Процедура КоманднаяПанель1ОбновитьДанные(Кнопка)
	
	ОбновитьДанныеУслугПоДоговорам();	
	
КонецПроцедуры

Процедура УслугиПоДоговорамПриАктивизацииСтроки(Элемент)
	
	ТекДанные = ЭлементыФормы.УслугиПоДоговорам.ТекущиеДанные;
	
	пОрганизация = Неопределено;
	пДоговор = Неопределено;
	
	Если ТекДанные <> Неопределено Тогда
		пОрганизация = ТекДанные.Организация;
		пДоговор = ТекДанные.ДоговорКонтрагента;
	КонецЕсли;
	
	ЭлементыФормы.ДокументыТорговыеТочки.ОтборСтрок.Организация.Установить(пОрганизация);
	ЭлементыФормы.ДокументыТорговыеТочки.ОтборСтрок.ДоговорКонтрагента.Установить(пДоговор);
	
КонецПроцедуры

Процедура УслугиПоДоговорамПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Документ)Тогда
			ОформлениеСтроки.Ячейки.Документ.УстановитьТекст("<< не создан >>");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументыТорговыеТочкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Документ" ИЛИ Колонка.Имя = "СтруктурнаяЕдиница" Тогда
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока[Колонка.Имя])Тогда
			ОткрытьЗначение(ВыбраннаяСтрока[Колонка.Имя]);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиПоДоговорамВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Организация" ИЛИ Колонка.Имя = "Контрагент"
		ИЛИ Колонка.Имя = "ДоговорКонтрагента" ИЛИ Колонка.Имя = "Услуга"
		ИЛИ Колонка.Имя = "СтатьяДР" ИЛИ Колонка.Имя = "Документ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока[Колонка.Имя])Тогда
			ОткрытьЗначение(ВыбраннаяСтрока[Колонка.Имя]);	
		КонецЕсли;
		
	ИначеЕсли Колонка.Имя = "Сумма" Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОшибкиЗаполнения()
	
	ОшибкиЗаполнения = ДоговораСПустымиСчетамиЗатрат.Количество()>0 ИЛИ ОшибкиЗаполненияСтатейЗатратБУ.Количество()>0;
	
	ЭлементыФормы.НадписьОшибкиЗаполнения.Заголовок = "Ошибки заполнения (" + Строка(ДоговораСПустымиСчетамиЗатрат.Количество()+ОшибкиЗаполненияСтатейЗатратБУ.Количество()) + ")";
	ЭлементыФормы.НадписьЗамечания.Заголовок = "Замечания по заполнению (" + Строка(СтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления.Количество()) + ")";
	
	ЭлементыФормы.НадписьНеЗаполненныеСчетаЗатрат.Заголовок = "Не заполненные счета затрат в договорах (" + Строка(ДоговораСПустымиСчетамиЗатрат.Количество()) + ")";
	ЭлементыФормы.НадписьТочкиБезОкончанияСрокаНачисления.Заголовок = "Точки без окончания срока начисления (" + Строка(СтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления.Количество()) + ")"; // не является ошибкой, предупреждение
	ЭлементыФормы.НадписьНеЗаполненныеСоответствияСтатейДРСтатьямБУ.Заголовок = "Не заполненные соответствия статей ДР статьям БУ (" + Строка(ОшибкиЗаполненияСтатейЗатратБУ.Количество()) + ")";
	
КонецПроцедуры

Процедура НеВыгружатьВБУПриИзменении(Элемент)
	
	НайтиОшибкиЗаполненияСтатейЗатратБУ();
	
КонецПроцедуры

Процедура ОчиститьВсеТаблицы()
	
	Услуги.Очистить();
	ДоговораСПустымиСчетамиЗатрат.Очистить();
	СтруктурныеЕдиницыБезОкончанияСрокаДействияНачисления.Очистить();
	ОшибкиЗаполненияСтатейЗатратБУ.Очистить();
	
	УслугиПоДоговорам.Очистить();
	
	ОбновитьОшибкиЗаполнения();
	
КонецПроцедуры

Процедура КоманднаяПанель1УстановитьФлажки(Кнопка)
	
	ТекОтборОрганизация = ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Организация;
	ТекОтборКонтрагент 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Контрагент;
	ТекОтборДоговор 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.ДоговорКонтрагента;
	ТекОтборУслуга 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Услуга;
	ТекОтборСтатьяДР 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.СтатьяДР;
	ТекОтборДокумент 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Документ;
	ТекОтборСДДС 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.СтатьяДвиженияДенежныхСредств;
	ТекОтборСумма 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Сумма;
	
	Для Каждого СтрокаОбъекта из УслугиПоДоговорам Цикл
		Если Не СтрокаОбъекта.Флаг Тогда
			УстановитьФлаг = Истина;
			Если Не вВходитВОтбор(СтрокаОбъекта.Организация, ТекОтборОрганизация) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Контрагент, ТекОтборКонтрагент) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.ДоговорКонтрагента, ТекОтборДоговор) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Услуга, ТекОтборУслуга) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДР, ТекОтборСтатьяДР) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Документ, ТекОтборДокумент) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДвиженияДенежныхСредств, ТекОтборСДДС) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Сумма, ТекОтборСумма) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			
			Если УстановитьФлаг Тогда
				СтрокаОбъекта.Флаг = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	//Для каждого Стр Из УслугиПоДоговорам Цикл
	//	Стр.Флаг = Истина;	
	//КонецЦикла; 
	
КонецПроцедуры

Процедура КоманднаяПанель1СнятьФлажки(Кнопка)
	
	ТекОтборОрганизация = ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Организация;
	ТекОтборКонтрагент 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Контрагент;
	ТекОтборДоговор 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.ДоговорКонтрагента;
	ТекОтборУслуга 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Услуга;
	ТекОтборСтатьяДР 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.СтатьяДР;
	ТекОтборДокумент 	= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Документ;
	ТекОтборСДДС 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.СтатьяДвиженияДенежныхСредств;
	ТекОтборСумма 		= ЭлементыФормы.УслугиПоДоговорам.ОтборСтрок.Сумма;
	
	Для Каждого СтрокаОбъекта из УслугиПоДоговорам Цикл
		Если СтрокаОбъекта.Флаг Тогда
			УстановитьФлаг = Истина;
			Если Не вВходитВОтбор(СтрокаОбъекта.Организация, ТекОтборОрганизация) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Контрагент, ТекОтборКонтрагент) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.ДоговорКонтрагента, ТекОтборДоговор) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Услуга, ТекОтборУслуга) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДР, ТекОтборСтатьяДР) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Документ, ТекОтборДокумент) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.СтатьяДвиженияДенежныхСредств, ТекОтборСДДС) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			Если Не вВходитВОтбор(СтрокаОбъекта.Сумма, ТекОтборСумма) Тогда
				УстановитьФлаг = Ложь;
			КонецЕсли;
			
			Если УстановитьФлаг Тогда
				СтрокаОбъекта.Флаг = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	//Для каждого Стр Из УслугиПоДоговорам Цикл
	//	Стр.Флаг = Ложь;	
	//КонецЦикла; 
	
КонецПроцедуры


// Функция проверяет попадает ли значение в отбор
// Параметры:
//  ТекЗначение   - Значение любого типа, которое нужно проверить
//	ТекОтбор      - Отбор, в котором происходит проверка
// Возвращаемое значение:
//	Булево        - Истина, если попадает
//
Функция вВходитВОтбор(ТекЗначение, ТекОтбор) Экспорт
	ЗначениеОтбора = ТекОтбор.Значение;
	ВходитВОтбор = Ложь;
	Если ТекОтбор.Использование = Ложь Тогда
		ВходитВОтбор = Истина;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.Равно Тогда
		Если ЗначениеОтбора = ТекЗначение Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.НеРавно Тогда
		Если ЗначениеОтбора <> ТекЗначение Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.Содержит Тогда
		Если Найти(ТекЗначение,ЗначениеОтбора) <> 0 Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.ВСписке Тогда
		Если ЗначениеОтбора.НайтиПоЗначению(ТекЗначение) <> Неопределено Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Если ЗначениеОтбора.НайтиПоЗначению(ТекЗначение) = Неопределено Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат ВходитВОтбор;
КонецФункции // ВходитВРтбор()

/////////////////////////////////////////////////////////
// НЕ ИСПОЛЬЗУЕТСЯ

Процедура СтараяПроцедураСозданияДокументов()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПериодНачисления", НачалоМесяца(ПериодНачисления));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.ЕдинаяСтоимостьУслугиПоставщика КАК ЕдинаяСтоимость,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.СтруктурнаяЕдиница,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.НачалоПериодаНачисления,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.КонецПериодаНачисления,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.Номенклатура КАК Услуга,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.СчетЗатрат КАК СчетЗатрат,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.Субконто1 КАК Субконто1,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.Субконто2 КАК Субконто2,
	|	ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.Субконто3 КАК Субконто3
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.СоставСтруктурныхЕдиниц КАК ДоговорыКонтрагентовСоставСтруктурныхЕдиниц
	|ГДЕ
	|	НЕ ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.ПометкаУдаления
	|	И ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.АвтоматическиНачислятьУслугуПоставщика
	|	И (ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.СрокДействия >= &ПериодНачисления
	|			ИЛИ ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
	|	И (ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.НачалоПериодаНачисления <= КОНЕЦПЕРИОДА(&ПериодНачисления, МЕСЯЦ)
	|			ИЛИ ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.НачалоПериодаНачисления = ДАТАВРЕМЯ(1, 1, 1))
	|	И (ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.КонецПериодаНачисления >= &ПериодНачисления
	|			ИЛИ ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.КонецПериодаНачисления = ДАТАВРЕМЯ(1, 1, 1))
	|	И ДоговорыКонтрагентовСоставСтруктурныхЕдиниц.Ссылка.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.ДоговорКонтрагента,
	|	ТаблицаДанных.ЕдинаяСтоимость,
	|	ТаблицаДанных.СтруктурнаяЕдиница,
	|	ТаблицаДанных.НачалоПериодаНачисления,
	|	ТаблицаДанных.КонецПериодаНачисления,
	|	ТаблицаДанных.Услуга,
	|	ТаблицаДанных.ДоговорКонтрагента.Организация КАК Организация,
	|	ТаблицаДанных.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ТаблицаДанных.СчетЗатрат,
	|	ТаблицаДанных.Субконто1,
	|	ТаблицаДанных.Субконто2,
	|	ТаблицаДанных.Субконто3,
	|	ТаблицаДанных.ДоговорКонтрагента.Владелец.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЕСТЬNULL(СоответствиеСтатейДРСтатьямБУ.СтатьяБУ, ЗНАЧЕНИЕ(Справочник.СтатьиЗатратБУ.ПустаяСсылка)) КАК СтатьяЗатратБУ
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	|		ПО ТаблицаДанных.СчетЗатрат = СоответствиеСтатейДРСтатьямБУ.Счет
	|		И СоответствиеСтатейДРСтатьямБУ.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
	|			И ТаблицаДанных.ДоговорКонтрагента.Владелец.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов = СоответствиеСтатейДРСтатьямБУ.Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Ссылка КАК ДоговорКонтрагента,
	|	ВременнаяТаблица.Период КАК Период,
	|	ВременнаяТаблица.Цена,
	|	ВременнаяТаблица.СтруктурнаяЕдиница,
	|	ВременнаяТаблица.ЕдинаяСтоимость
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыКонтрагентовЕдинаяСтоимостьУслугиПоставщикаИстория.Ссылка КАК Ссылка,
	|		ДоговорыКонтрагентовЕдинаяСтоимостьУслугиПоставщикаИстория.Период КАК Период,
	|		ДоговорыКонтрагентовЕдинаяСтоимостьУслугиПоставщикаИстория.Цена КАК Цена,
	|		НЕОПРЕДЕЛЕНО КАК СтруктурнаяЕдиница,
	|		ИСТИНА КАК ЕдинаяСтоимость
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов.ЕдинаяСтоимостьУслугиПоставщикаИстория КАК ДоговорыКонтрагентовЕдинаяСтоимостьУслугиПоставщикаИстория
	|	ГДЕ
	|		ДоговорыКонтрагентовЕдинаяСтоимостьУслугиПоставщикаИстория.Ссылка.ЕдинаяСтоимостьУслугиПоставщика
	|		И ДоговорыКонтрагентовЕдинаяСтоимостьУслугиПоставщикаИстория.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаДанных.ДоговорКонтрагента
	|				ИЗ
	|					ТаблицаДанных)
	|		И ДоговорыКонтрагентовЕдинаяСтоимостьУслугиПоставщикаИстория.Период <= &ПериодНачисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Ссылка,
	|		ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Период,
	|		ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Цена,
	|		ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.СтруктурнаяЕдиница,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов.СтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория КАК ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория
	|	ГДЕ
	|		НЕ ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Ссылка.ЕдинаяСтоимостьУслугиПоставщика
	|		И ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаДанных.ДоговорКонтрагента
	|				ИЗ
	|					ТаблицаДанных)
	|		И ДоговорыКонтрагентовСтоимостьУслугиПоставщикаВРазрезеСтруктурныхЕдиницИстория.Период <= &ПериодНачисления) КАК ВременнаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ОсновнаяТаблица = Результат[0].Выгрузить();
	ТаблицаЦен 		= Результат[1].Выгрузить();
	
	ОсновнаяТаблица.Колонки.Добавить("Цена",				Новый ОписаниеТипов("Число"));
	ОсновнаяТаблица.Колонки.Добавить("ПериодУстановкиЦены", Новый ОписаниеТипов("Дата"));
	
	МассивТочекСПустымПериодомОкончанияНачисления = Новый Массив;
	
	// Собираем цены
	Для Каждого СтрокаТЗ Из ОсновнаяТаблица Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДоговорКонтрагента", СтрокаТЗ.ДоговорКонтрагента);
		Отбор.Вставить("ЕдинаяСтоимость",    СтрокаТЗ.ЕдинаяСтоимость);
		Если Не СтрокаТЗ.ЕдинаяСтоимость Тогда
			Отбор.Вставить("СтруктурнаяЕдиница", СтрокаТЗ.СтруктурнаяЕдиница);	
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаЦен.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()Тогда
			
			// Таблица упорядочена по убыванию периода, берем 1ю строку
			ДанныеЦены = НайденныеСтроки[0];
			
			СтрокаТЗ.Цена = ДанныеЦены.Цена;
			СтрокаТЗ.ПериодУстановкиЦены = ДанныеЦены.Период;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.КонецПериодаНачисления) 
			И МассивТочекСПустымПериодомОкончанияНачисления.Найти(СтрокаТЗ.СтруктурнаяЕдиница) = Неопределено Тогда
			
			МассивТочекСПустымПериодомОкончанияНачисления.Добавить(СтрокаТЗ.СтруктурнаяЕдиница);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Найдем договоры в которых не проставлен счет затрат
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивДоговоров)
	|	И ДоговорыКонтрагентов.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДоговоров", ОсновнаяТаблица.ВыгрузитьКолонку("ДоговорКонтрагента"));
	
	ТаблицаОшибокУстановкиСчетовЗатрат = Запрос.Выполнить().Выгрузить();
	Если ТаблицаОшибокУстановкиСчетовЗатрат.Количество()Тогда
		
		ФормаОшибок = ПолучитьФорму("ФормаОшибокЗаполненияСчетовЗатрат");
		ФормаОшибок.Ошибки = ТаблицаОшибокУстановкиСчетовЗатрат;
		ФормаОшибок.Открыть();
		
		Возврат;
	КонецЕсли;
	
	КонецМесяцаПериодаНачисления = КонецМесяца(ПериодНачисления);
	
	// Если установлен флаг НеВыгружатьВБУ, то эта проверка не нужна
	Если Не НеВыгружатьВБУ Тогда
		
		// Найдем ошибки по незаполненным соответствиям статей ДР статьям БУ
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.СчетЗатрат,
		|	ТаблицаДанных.ДоговорКонтрагента.Владелец.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов КАК СтатьяДР
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
		|		ПО ТаблицаДанных.СчетЗатрат = СоответствиеСтатейДРСтатьямБУ.Счет
		|		И СоответствиеСтатейДРСтатьямБУ.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
		|			И ТаблицаДанных.ДоговорКонтрагента.Владелец.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов = СоответствиеСтатейДРСтатьямБУ.Статья
		|ГДЕ
		|	(СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ЕСТЬ NULL 
		|			ИЛИ СоответствиеСтатейДРСтатьямБУ.СтатьяБУ = ЗНАЧЕНИЕ(Справочник.СтатьиЗатратБУ.ПустаяСсылка)
		|			ИЛИ СоответствиеСтатейДРСтатьямБУ.СтатьяБУ = НЕОПРЕДЕЛЕНО)";
		
		Запрос.Текст = ТекстЗапроса;
		
		ОшибкиЗаполненияСтатьиБУ = Ложь;
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой()Тогда
			Сообщить("Заполните регистр сведений ""Соответствие статей ДР статьям БУ"" по указанным ниже настройким и повторите создание документов.");	
			ОшибкиЗаполненияСтатьиБУ = Истина;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий()Цикл
			Сообщить(" - счет: " + Выборка.СчетЗатрат + ", статья: " + Выборка.СтатьяДР);		
		КонецЦикла;
		
		Если ОшибкиЗаполненияСтатьиБУ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Найдем точки, по которым в договоре не заполнена дата окончания начисления, но в периоде начисления уже не создаются ЛУ
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЛистУчета.Дата) КАК ДатаПоследнегоДокумента,
	|	ЛистУчета.ТорговаяТочка
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|ГДЕ
	|	НЕ ЛистУчета.ПометкаУдаления
	|	И ЛистУчета.ТорговаяТочка В(&МассивТочек)
	|	И ЛистУчета.Дата МЕЖДУ &ДатаНачалаПроверкиНаличияЛУ И &ДатаОкончанияПроверкиНаличияЛУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчета.ТорговаяТочка";
	
	Запрос.УстановитьПараметр("МассивТочек", МассивТочекСПустымПериодомОкончанияНачисления);
	Запрос.УстановитьПараметр("ДатаНачалаПроверкиНаличияЛУ", 	Мин(НачалоДня(ТекущаяДата()), НачалоДня(КонецМесяцаПериодаНачисления)) - 5*86400);  //Мин(Текдата, Дата конца месяца обработки)- 5 дней
	Запрос.УстановитьПараметр("ДатаОкончанияПроверкиНаличияЛУ", Мин(КонецДня(ТекущаяДата()), КонецМесяцаПериодаНачисления)); //Мин(Текдата, Дата конца месяца обработки)
 
	ТаблицаОшибокВводаДат = Новый ТаблицаЗначений;
	ТаблицаОшибокВводаДат.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаОшибокВводаДат.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаВыборкиТочек = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрЕдиница Из МассивТочекСПустымПериодомОкончанияНачисления Цикл
		
		// Попытаемся найти точку в выборке
		НайденнаяСтрока = ТаблицаВыборкиТочек.Найти(СтрЕдиница, "ТорговаяТочка");
		Если НайденнаяСтрока = Неопределено Тогда
			
			НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", СтрЕдиница));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				// Дополнительная проверка, т.к. по точке может быть несколько договоров
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.КонецПериодаНачисления) Тогда
					
					ЗаполнитьЗначенияСвойств(ТаблицаОшибокВводаДат.Добавить(), НайденнаяСтрока);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаОшибокВводаДат.Количество()Тогда
		
		ФормаОшибок = ПолучитьФорму("ФормаОшибок");
		ФормаОшибок.Ошибки = ТаблицаОшибокВводаДат;
		ФормаОшибок.ОткрытьМодально();
		
	КонецЕсли;
	
	// Проверка на созданные ранее документы в месяце начисления
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Услуга,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслугУслуги.Ссылка.ПометкаУдаления
	|	И (ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента, ПоступлениеТоваровУслугУслуги.Номенклатура, ПоступлениеТоваровУслугУслуги.Ссылка.СтруктурнаяЕдиница) В
	|			(ВЫБРАТЬ
	|				ТаблицаДанных.ДоговорКонтрагента,
	|				ТаблицаДанных.Услуга,
	|				ТаблицаДанных.СтруктурнаяЕдиница
	|			ИЗ
	|				ТаблицаДанных КАК ТаблицаДанных)
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &НачалоМесяцаНачисления И &КонецМесяцаНачисления";
	
	Запрос.УстановитьПараметр("НачалоМесяцаНачисления", НачалоМесяца(ПериодНачисления));  
	Запрос.УстановитьПараметр("КонецМесяцаНачисления",  КонецМесяцаПериодаНачисления); 
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаПоступлений = Запрос.Выполнить().Выгрузить();
	
	ПерезаполнитьДокументы = Ложь;
	Если ТаблицаПоступлений.Количество()Тогда
		
		Ответ = Вопрос("В периоде начисления уже были созданы документы поступления. Перезаполнить такие документы?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПерезаполнитьДокументы = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// ЦФО Структурных единиц
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ТекДата, СтруктурнаяЕдиница В (&МассивТТ)) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
				   
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("МассивТТ", ОсновнаяТаблица.ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЦФО = Запрос.Выполнить().Выгрузить();
	
	// Создание документов поступлений
	Для Каждого СтрокаТЗ Из ОсновнаяТаблица Цикл
		
		Обновить = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДоговорКонтрагента", СтрокаТЗ.ДоговорКонтрагента);
		Отбор.Вставить("Услуга", 			 СтрокаТЗ.Услуга);
		Отбор.Вставить("СтруктурнаяЕдиница", СтрокаТЗ.СтруктурнаяЕдиница);
		
		// Максимум может быть 1 документ
		НайденныеСтроки = ТаблицаПоступлений.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()Тогда
			
			Если Не ПерезаполнитьДокументы Тогда
				Продолжить;
			КонецЕсли;
			
			ПоступлениеОбъект = НайденныеСтроки[0].ДокументПоступления.ПолучитьОбъект();
			Обновить = Истина;
			
		Иначе
			
			ПоступлениеОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			
		КонецЕсли;
		
		СтруктурнаяЕдиница = СтрокаТЗ.СтруктурнаяЕдиница;
		
		//
		ПоступлениеОбъект.Организация 			= СтрокаТЗ.Организация;
		ПоступлениеОбъект.Дата					= Мин(ТекущаяДата(), КонецМесяцаПериодаНачисления);
		ПоступлениеОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ПоступлениеОбъект.Комментарий			= "Создан обработкой формирования начисления услуг поставщика";
		ПоступлениеОбъект.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
		ПоступлениеОбъект.Контрагент 			= СтрокаТЗ.Контрагент;
		ПоступлениеОбъект.ДоговорКонтрагента 	= СтрокаТЗ.ДоговорКонтрагента;
		ПоступлениеОбъект.ВариантРасчетаНДС		= ?(СтрокаТЗ.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		ПоступлениеОбъект.СтатьяДДС				= СтрокаТЗ.СтатьяДвиженияДенежныхСредств;
		ПоступлениеОбъект.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
		ПоступлениеОбъект.НеВыгружатьВБУ		= НеВыгружатьВБУ;
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(СтрокаТЗ.СтатьяДвиженияДенежныхСредств);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ПоступлениеОбъект.Дата, СтрокаТЗ.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		
		Если МассивСчетов.Количество() = 1 Тогда
			ПоступлениеОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
		Иначе
			ПоступлениеОбъект.СчетУчетаРасчетовСКонтрагентом	= Планысчетов.Финансовый.РасчетыСПоставщиками;
		КонецЕсли;
		
		//
		ПоступлениеОбъект.Услуги.Очистить();
		
		//
		НоваяСтрока = ПоступлениеОбъект.Услуги.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
		// Проверим типы субконто, если структурные единицы то будем устанавливать торговые точки
		КоличествоАктивныхСубконто = НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество();
		Для Сч = 1 По КоличествоАктивныхСубконто Цикл
			Если НоваяСтрока.СчетЗатрат.ВидыСубконто[Сч-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
				НоваяСтрока["Субконто"+Сч] = СтруктурнаяЕдиница;	
			ИначеЕсли НоваяСтрока.СчетЗатрат.ВидыСубконто[Сч-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ЦФО Тогда
				
				СтрокиЦФО = ТаблицаЦФО.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", СтруктурнаяЕдиница));
				Если СтрокиЦФО.Количество()Тогда
					НоваяСтрока["Субконто"+Сч] = СтрокиЦФО[0].ЦФО;	
				КонецЕсли;	
					
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока.Номенклатура = СтрокаТЗ.Услуга;
		НоваяСтрока.Содержание 	 = Строка(СтрокаТЗ.Услуга);
		НоваяСтрока.Количество 	 = 1;
		
		// Если цена установлена в месяце начисления и точка в этом месяце закрылась, тогда берется полностью,
		// иначе вычисляется пропорционально календарным дням (Цена/ДнейВМесяце)*ДнейНачисления
		Если Не ЗначениеЗаполнено(СтрокаТЗ.КонецПериодаНачисления)Тогда
			НоваяСтрока.Цена = СтрокаТЗ.Цена;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.КонецПериодаНачисления) И СтрокаТЗ.ПериодУстановкиЦены = НачалоМесяца(ПериодНачисления) Тогда
			НоваяСтрока.Цена = СтрокаТЗ.Цена;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.КонецПериодаНачисления) И СтрокаТЗ.ПериодУстановкиЦены < НачалоМесяца(ПериодНачисления) И СтрокаТЗ.КонецПериодаНачисления < НачалоДня(КонецМесяца(ПериодНачисления)) Тогда
			НачалоНачисления 	= Макс(СтрокаТЗ.НачалоПериодаНачисления, НачалоМесяца(ПериодНачисления));
			ОкончаниеНачисления = Мин(СтрокаТЗ.КонецПериодаНачисления, НачалоДня(КонецМесяца(ПериодНачисления)));
			КоличествоДней 		= (ОкончаниеНачисления - НачалоНачисления)/86400 + 1;  
			КоличествоДнейВМесяце = Число(Сред(КонецМесяца(ПериодНачисления), 1, 2));
			
			НоваяСтрока.Цена = (СтрокаТЗ.Цена/КоличествоДнейВМесяце)*КоличествоДней;
			
		Иначе
			НоваяСтрока.Цена = СтрокаТЗ.Цена;
			
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДС = ПоступлениеОбъект.Контрагент.СтавкаНДС;
		ПоступлениеОбъект.ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
		
		// Если установлен флаг НеВыгружатьВБУ, то можно эти поля не заполнять
		Если Не НеВыгружатьВБУ Тогда
			
			НоваяСтрока.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
			НоваяСтрока.СчетЗатратНУ = НоваяСтрока.СчетЗатратБУ;
			
			НоваяСтрока.СубконтоБУ1 = СтрокаТЗ.СтатьяЗатратБУ;
			НоваяСтрока.СубконтоНУ1 = СтрокаТЗ.СтатьяЗатратБУ;
			
		КонецЕсли;
		
		НоваяСтрока.ТорговаяТочка = СтруктурнаяЕдиница;
		
		Попытка
			ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(?(Обновить, "Обновлен документ поступления ", "Создан документ поступления ")+ПоступлениеОбъект);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Ссылка = ПолучитьИПодключитьВнешнююОбработкуПлатежныйКалендарь();
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные = Ссылка.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	ТекущаяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
	Форма = ТекущаяОбработка.ПолучитьФорму("ФормаОбработки");                                 
	Форма.Открыть();
    отказ=истина;
КонецПроцедуры

Функция ПолучитьИПодключитьВнешнююОбработкуПлатежныйКалендарь()	
	Возврат  Справочники.ВнешниеОбработки.НайтиПоНаименованию("Создание документов поступления по регламентным услугам и их оплата");
КонецФункции








