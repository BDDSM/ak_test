
//////////////////////////////////////////////////////////////
//ADO

//
//
Функция ADO_Execute(ADOСоединение, ТекстЗапроса) Экспорт
	
	//
	Попытка
		ADORecordSet = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ADORecordSet = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADORecordSet;
	
КонецФункции	

//
//
Функция ADO_Connection(СтрокаПоключения) Экспорт
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = СтрокаПоключения;
	
	//
	Попытка
		ADOСоединение.Open();
	Исключение
		ADOСоединение = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADOСоединение;
	
КонецФункции

//////////////////////////////////////////////////////////////
//ADO->1C

//
//
Функция RecordSet_в_ТаблицуЗначений(RecordSet) Экспорт 
	
	//
	РезультатТЗ = Новый ТаблицаЗначений;
	
	//
	Для Каждого Field Из RecordSet.Fields Цикл
		
		//
		РезультатТЗ.Колонки.Добавить(Field.Name);
		
	КонецЦикла;	
	
	//
	Если НЕ RecordSet.EOF Тогда
		
		//
		RecordSet.MoveFirst();
		
		//
		Пока НЕ RecordSet.EOF Цикл
			
			//
			НоваяСтрока = РезультатТЗ.Добавить();
			Для Каждого Колонка Из РезультатТЗ.Колонки Цикл
				
				//
				Индекс = РезультатТЗ.Колонки.Индекс(Колонка);
				
				//
				НоваяСтрока[Индекс] = RecordSet.Fields.Item(Индекс).Value;
					
			КонецЦикла;	
			
			//
			Если НЕ RecordSet.EOF Тогда 
				RecordSet.MoveNext();
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	//
	Возврат РезультатТЗ;
	
КонецФункции	

//////////////////////////////////////////////////////////////

//
//
Функция ПроверитьДиапазон(ЗначениеОт, ЗначениеДо)

	//
	ВсеОК = Истина;
	
	//
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL("{SQL Server}", , "Loyalty", , , "LANGUAGE=русский");
	
	//
	ADOСоединение = ADO_Connection(СтрокаПодключения);	
	Если ADOСоединение <> Неопределено Тогда
		
		//
		ТекстЗапроса = "SELECT DISTINCT
						|	CardsDiapazons.id_pc_d,
						|	CardsDiapazons.id_pc,
						|	CardsDiapazons.number_from,
						|	CardsDiapazons.number_to,
						|	Cards.name_program_cards,
						|	Cards.descr_pc
						|FROM [Loyalty].[dbo].[Program_cards_diapazon] (nolock) AS CardsDiapazons
						|LEFT OUTER JOIN
						|	[Loyalty].[dbo].[Program_cards] (nolock) AS Cards
						|ON	
						|	CardsDiapazons.id_pc = Cards.id_pc
						|
						|WHERE CardsDiapazons.id_pc <> &Код
						|
						|";
		//				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Код", Формат(Код, "ЧН=0; ЧГ="));						
		
		//
		RecordSet = ADO_Execute(ADOСоединение, ТекстЗапроса ); 
		
		//
		РезультатТЗ = RecordSet_в_ТаблицуЗначений(RecordSet); 
		Для каждого СтрокаТЗ Из РезультатТЗ Цикл
			
			//
			НачалоПериода = МАКС(СтрокаТЗ.number_from, ЗначениеОт);
			КонецПериода = мин(СтрокаТЗ.number_to, ЗначениеДо);
			
			//
			Если НачалоПериода <= КонецПериода Тогда
				
				//
				Сообщить("Диапазон " + Формат(ЗначениеОт, "ЧГ=") + " - " +  Формат(ЗначениеДо, "ЧГ=") + " не может быть использован,
						|т.к. перескается с диапазоном " + Формат(СтрокаТЗ.number_from, "ЧГ=") + " - " +  Формат(СтрокаТЗ.number_to, "ЧГ=") + ", 
						|указанным в программе '" + СтрокаТЗ.name_program_cards + "'");				
						
				//
				ВсеОК = Ложь;
			
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе	
		
		//
		ВсеОК = Ложь;
		
	КонецЕсли;	

	//
	Возврат ВсеОК;
	
КонецФункции // ()

//
//
Функция Записать()

	//
	ВсеОК = Истина;
	
	//
	ТекстДиапазоны = "";
	
	//
	ОтборТекущиеДиапазоны = "0, "; 
	
	//
	Сч = 1;
	Для каждого СтрокаТЗ Из ТЗ_Диапазоны Цикл
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ЗначениеОт) Тогда
			Сообщить("В строке №" + Сч + " не заполнено 'Значение ОТ'");
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ЗначениеДо) Тогда
			Сообщить("В строке №" + Сч + " не заполнено 'Значение ДО'");
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если НЕ ВсеОК Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		ВсеОК = ВсеОК И ПроверитьДиапазон(СтрокаТЗ.ЗначениеОт, СтрокаТЗ.ЗначениеДо);
		
		//
		ОтборТекущиеДиапазоны = ОтборТекущиеДиапазоны +  Формат(СтрокаТЗ.id_pc_d, "ЧН=0; ЧГ=") + ", ";
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ДатаРегистрации) Тогда
			
			//
			ТекстДиапазоны = ТекстДиапазоны + Символы.ПС + 
							"
							|INSERT INTO [Loyalty].[dbo].[Program_cards_diapazon]
							|       (id_pc,
							|        number_from,
							|        number_to,
							|        date_add)
							|  VALUES
							|        (@id,
							|        &ЗначениеОт,
							|        &ЗначениеДо,
							|        GetDate())";
			
			//												   
			Если ЗначениеЗаполнено(Код) Тогда
				ТекстДиапазоны = СтрЗаменить(ТекстДиапазоны, "@id", Формат(Код, "ЧН=0; ЧГ="));	
			КонецЕсли; 
			
			//			
			ТекстДиапазоны = СтрЗаменить(ТекстДиапазоны, "&ЗначениеОт", Формат(СтрокаТЗ.ЗначениеОт, "ЧГ="));
			ТекстДиапазоны = СтрЗаменить(ТекстДиапазоны, "&ЗначениеДо", Формат(СтрокаТЗ.ЗначениеДо, "ЧГ="));	
			
		Иначе
			
			//
			ТекстДиапазоны = ТекстДиапазоны + Символы.ПС + 
							"
							|UPDATE [Loyalty].[dbo].[Program_cards_diapazon]
							| SET id_pc = &Код,
							|	  id_pc_d = &Кдд,
							|     number_from = &ЗначениеОт,
							|     number_to = &ЗначениеДо,
							|     date_add = GetDate()
							| WHERE id_pc = &Код AND id_pc_d = &Кдд";
			
			//												   
			ТекстДиапазоны = СтрЗаменить(ТекстДиапазоны, "&Код", Формат(Код, "ЧН=0; ЧГ="));
			ТекстДиапазоны = СтрЗаменить(ТекстДиапазоны, "&Кдд", Формат(СтрокаТЗ.id_pc_d, "ЧН=0; ЧГ="));
			ТекстДиапазоны = СтрЗаменить(ТекстДиапазоны, "&ЗначениеОт", Формат(СтрокаТЗ.ЗначениеОт, "ЧН=0; ЧГ="));
			ТекстДиапазоны = СтрЗаменить(ТекстДиапазоны, "&ЗначениеДо", Формат(СтрокаТЗ.ЗначениеДо, "ЧН=0; ЧГ="));	
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	ОтборТекущиеДиапазоны = Лев(ОтборТекущиеДиапазоны, СтрДлина(ОтборТекущиеДиапазоны) - 2);
	
	//
	Если НЕ ВсеОК Тогда
		Возврат ВсеОК;
	КонецЕсли; 
	
	//
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL("{SQL Server}", , "Loyalty", , , "LANGUAGE=русский");
	
	//
	ADOСоединение = ADO_Connection(СтрокаПодключения);	
	Если ADOСоединение <> Неопределено Тогда
		
		//
		Если Код = 0 Тогда
			
			//
			ТекстЗапроса = "BEGIN TRANSACTION
						|
						|DECLARE @id AS int
						|
						|INSERT INTO [Loyalty].[dbo].[Program_cards]
						|	(name_program_cards,
						|	 descr_pc,
						|	 sum_pc,
						|	 date_add)
				     	|VALUES
				        |   (&Наименование,
						|    &Описание,
						|    &Сумма,
						|    GetDate())
						|
						|SELECT TOP 1 
						|	@id = id_pc
						|FROM [Loyalty].[dbo].[Program_cards]
						|ORDER BY id_pc DESC
						|
						|%ИзменитьТекстДиапазоны%
						|
						|
						|IF @@ERROR = 0
						|COMMIT
						|ELSE
						|ROLLBACK";
						
			//
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Наименование", "'" + СокрЛП(Наименование) + "'");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Описание", "'" + СокрЛП(Описание) + "'");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Сумма", Формат(Сумма, "ЧН=0; ЧГ="));
			
			//
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИзменитьТекстДиапазоны%", ТекстДиапазоны);
		
		Иначе
			
			//
			ТекстЗапроса = "BEGIN TRANSACTION
						|
						|DELETE FROM [Loyalty].[dbo].[Program_cards_diapazon]
      					|WHERE id_pc = &Код AND NOT id_pc_d IN (&ТекущиеДиапазоны)
						|
						|UPDATE [Loyalty].[dbo].[Program_cards]
						|	SET name_program_cards = &Наименование,
						|	 	descr_pc = &Описание,
						|	 	sum_pc = &Сумма
						|	WHERE id_pc = &Код
						|
						|%ИзменитьТекстДиапазоны%
						|
						|IF @@ERROR = 0
						|COMMIT
						|ELSE
						|ROLLBACK";
						
			//
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Код", Формат(Код, "ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущиеДиапазоны", ОтборТекущиеДиапазоны);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Наименование", "'" + СокрЛП(Наименование) + "'");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Описание",  "'" + СокрЛП(Описание) + "'");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Сумма", Формат(Сумма, "ЧН=0; ЧГ="));
			
			//
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИзменитьТекстДиапазоны%", ТекстДиапазоны);
		
		КонецЕсли; 
		
	КонецЕсли;		
	
	//
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		//
		RecordSet = ADO_Execute(ADOСоединение, ТекстЗапроса);
		Если RecordSet = Неопределено Тогда
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если ВсеОК И НЕ ЗначениеЗаполнено(Код) Тогда
			
			//
			ТекстЗапроса = "
							|SELECT TOP 1 
							|	id_pc
							|FROM [Loyalty].[dbo].[Program_cards] (nolock)
							|ORDER BY id_pc DESC";
			
			
			//
			RecordSet = ADO_Execute(ADOСоединение, ТекстЗапроса);
				
			//
			РезультатТЗ = RecordSet_в_ТаблицуЗначений(RecordSet); 
			Если РезультатТЗ.Количество() > 0  Тогда
				
				//
				ТекущиеДанные = РезультатТЗ[0];
				
				//
				Попытка
					Код = ТекущиеДанные.id_pc;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	//
	Возврат ВсеОК;

КонецФункции // ()

//////////////////////////////////////////////////////////////

&НаСервере
Процедура ОбновитьНаСервере()
	
	//
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL("{SQL Server}", , "Loyalty", , , "LANGUAGE=русский");
	
	//
	ADOСоединение = ADO_Connection(СтрокаПодключения);	
	Если ADOСоединение <> Неопределено Тогда
		
		
		//////////////////////////////////////////////////
		//Наименование, Код
		
		//
		ТекстЗапроса = " SELECT DISTINCT 
						|	Cards.id_pc, 
						|	Cards.name_program_cards, 
						|	Cards.descr_pc, 
						|	Cards.sum_pc
						|FROM [Loyalty].[dbo].[Program_cards] (nolock) AS Cards
						|WHERE Cards.id_pc = &Код
						|ORDER BY 
						|	Cards.id_pc";
						
		//						
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Код", Код); 
						
		
		//
		RecordSet = ADO_Execute(ADOСоединение, ТекстЗапроса ); 
		
		//
		РезультатТЗ = RecordSet_в_ТаблицуЗначений(RecordSet); 
		Если РезультатТЗ.Количество() > 0  Тогда
		
			//
			ТекущиеДанные = РезультатТЗ[0];
			
			//
			Код = ТекущиеДанные.id_pc;
			Наименование = ТекущиеДанные.name_program_cards;
			Описание = ТекущиеДанные.descr_pc;
			Сумма = ТекущиеДанные.sum_pc;
		
		КонецЕсли; 
		
		
		//////////////////////////////////////////////////
		//Диапазоны
		
		//
		ТЗ_Диапазоны.Очистить();
		
		//
		ТекстЗапроса = "SELECT
					   |  Diapazons.id_pc,
					   |  Diapazons.number_from,
					   |  Diapazons.number_to,
					   |  Diapazons.date_add,
					   |  Diapazons.id_pc_d
					   |FROM [Loyalty].[dbo].[Program_cards_diapazon] AS Diapazons (nolock)
					   |WHERE Diapazons.id_pc = &Код
					   |ORDER BY 
					   |	Diapazons.number_from";
						
		//						
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Код", Код); 
						
		
		//
		RecordSet = ADO_Execute(ADOСоединение, ТекстЗапроса ); 
		
		//
		РезультатТЗ = RecordSet_в_ТаблицуЗначений(RecordSet); 
		Для каждого СтрокаТЗ Из РезультатТЗ Цикл
		
			//
			НоваяСтрока = ТЗ_Диапазоны.Добавить();
			НоваяСтрока.ЗначениеОт = СтрокаТЗ.number_from;
			НоваяСтрока.ЗначениеДо = СтрокаТЗ.number_to;
			НоваяСтрока.ДатаРегистрации = СтрокаТЗ.date_add;
			НоваяСтрока.id_pc_d = СтрокаТЗ.id_pc_d;
		
		КонецЦикла; 
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	Параметры.Свойство("Код", Код);
	Параметры.Свойство("ПризнакТолькоПросмотр", ПризнакТолькоПросмотр);
	
	//
	ЭтаФорма.ТолькоПросмотр = ПризнакТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	ОбновитьНаСервере();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	//
	Если НЕ ЭтаФорма.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Если Записать() Тогда
		ОбновитьНаСервере();
		Модифицированность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	//
	Если НЕ ЭтаФорма.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если Записать() Тогда
		Закрыть(Истина);
	КонецЕсли; 
	
КонецПроцедуры
