&НаСервере
Процедура СтрокаРеестраОбратныхЗвонков_УстановитьФлагБлокировкиИУвеличитьСчетчикПопытокЗвонка(ЗаказОбратногоЗвонка_id)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль = "UPDATE [Loyalty].[dbo].[CashRequest_CallBack]
   				|SET  is_blocked = GetDate(), Qty_attempt = Qty_attempt + 1
				|FROM [Loyalty].[dbo].[CashRequest_CallBack]
				|WHERE id = " + ВнешниеДанные.ФорматПоля(ЗаказОбратногоЗвонка_id);	
								
	ЗапросПолный = "declare @err int =1
					|while @err=1
					|begin
					| begin try
					|" + ЗапросСкуль + "
					|select @err=0
					| 
					| END TRY
					|  BEGIN CATCH
					| 
					|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
					|begin
					|-- запись в лог факта блокировки
					|	set @err=1
					|end
					|else
					|begin
					| 
					|-- прочая ошибка - выход  
					| return
					| end
					| 
					|  END CATCH 
					|end -- while";
	
	Попытка			
		ADOСоединение.Execute(ЗапросПолный);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при сняти флаг блокировки со строки РеестраОбратныхЗвонков", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ЗапросСкуль);
		флУспешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбратныйЗвонок(id, ОбратныйЗвонок, Сообщение)
	
	Результат = Ложь;
	
	ЗапросТТ = Новый Запрос();
	ЗапросТТ.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Наименование,
	               |	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	               |	СтруктурныеЕдиницы.НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НомерТочки = &НомерТочки";
				   
	//См.ниже
	//ЗапросТТ.Параметры.Вставить("НомерТочки", rs.Fields("ShopNo").Value);
	//ТабКешТТ = ЗапросТТ.Выполнить().Выгрузить();	
	
	ЗапросФЛ = Новый Запрос();
	ЗапросФЛ.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	               |	ФизическиеЛица.Код
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Код = &Код";
				   
	//См.ниже
	//ЗапросФЛ.Параметры.Вставить("Код", rs.Fields("CashierId").Value);
	//ТабКешФЛ = ЗапросФЛ.Выполнить().Выгрузить();	

	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "
		|SELECT [id]
		|, cash.ShopNo
		|,cb.[CashID]
		|,[CashierID]
		|,[Date_time]
		|,[Phone_number]
		|,[BonusCard]
		|,[Date_Time_CallBack]
		|,[Request_Status]
		|, case when (DATEDIFF(minute, cb.[is_blocked], GetDate()) <= 30) then cb.[is_blocked] else NULL end		as 		is_blocked
		|,[Qty_attempt]
		|, cashier.FIO продавец
		|, c.FullName покупатель
        |
		|FROM [Loyalty].[dbo].[CashRequest_CallBack] as cb with(nolock) 
		|left join SMS_REPL..Cashier_view_tbl as cashier with(nolock) on cb.cashierID=cashier.CodeFL
		|left join Loyalty..Customer as c with(nolock) on c.Email=cb.BonusCard
		|left join SMS_REPL..caship as cash with(nolock) on cash.CashID=cb.cashid
		|WHERE [id] = " + ВнешниеДанные.ФорматПоля(id) + "
		|";
		
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Попытка
		
		rs.MoveFirst();
		Если Не rs.Eof() Тогда
			
			ОбратныйЗвонок = Новый Структура();
			ОбратныйЗвонок.Вставить("id"            , rs.Fields("id").Value);
			ОбратныйЗвонок.Вставить("is_blocked"    , rs.Fields("is_blocked").Value);
			ОбратныйЗвонок.Вставить("Request_Status", rs.Fields("Request_Status").Value);
			
			ОбратныйЗвонок.Вставить("Date_time", rs.Fields("Date_time").Value);
			ОбратныйЗвонок.Вставить("ShopNo",    rs.Fields("ShopNo").Value);
			
			//ТТ
			ЗапросТТ.Параметры.Вставить("НомерТочки", rs.Fields("ShopNo").Value);
			ТабКешТТ = ЗапросТТ.Выполнить().Выгрузить();	
			Если ТабКешТТ.Количество() > 0 Тогда
				ОбратныйЗвонок.Вставить("СтруктурнаяЕдиница", ТабКешТТ[0].СтруктурнаяЕдиница);
			Иначе
				ОбратныйЗвонок.Вставить("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
			КонецЕсли;
			
			//Физ лица
			//ЗапросФЛ.Параметры.Вставить("Код", Формат( rs.Fields("CashierId").Value, "ЧЦ=" + МетаДанные.Справочники.ФизическиеЛица.ДлинаКода + "; ЧВН=; ЧГ=0") );
			ЗапросФЛ.Параметры.Вставить("Код", Формат( 1517, "ЧЦ=" + МетаДанные.Справочники.ФизическиеЛица.ДлинаКода + "; ЧВН=; ЧГ=0") );
			ТабКешФЛ = ЗапросФЛ.Выполнить().Выгрузить();	
			Если ТабКешФЛ.Количество() > 0 Тогда
				ОбратныйЗвонок.Вставить("Продавец", ТабКешФЛ[0].ФизическоеЛицо);
			Иначе
				ОбратныйЗвонок.Вставить("Продавец", Справочники.ФизическиеЛица.ПустаяСсылка());
			КонецЕсли;
			
			ОбратныйЗвонок.Вставить("Покупатель",         rs.Fields("покупатель").Value);
			ОбратныйЗвонок.Вставить("Phone_number",       rs.Fields("Phone_number").Value);
			ОбратныйЗвонок.Вставить("BonusCard",          rs.Fields("BonusCard").Value);
			ОбратныйЗвонок.Вставить("Date_Time_CallBack", rs.Fields("Date_Time_CallBack").Value);
			ОбратныйЗвонок.Вставить("Qty_attempt",        rs.Fields("Qty_attempt").Value);
			
			Результат = Истина;
			
		Иначе
			
			Сообщение = "Запись о таком заказе отсутствует";
			
		КонецЕсли;
		
	Исключение
		
		Сообщение = ИнформацияОбОшибке().Описание;
		
	КонецПопытки;
	
	ADOСоединение.Close();	
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьПараметрыДляЗамера(ИмяСобытия)
	
	ПараметрыСеанса.ЗамерПроизводительности_ИмяСобытия = ИмяСобытия;
	ПараметрыСеанса.ЗамерПроизводительности_ДопКлюч = ПолучитьДопКлючДляЗамера();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопКлючДляЗамера()
	
	Возврат Число(Формат(ТекущаяДата(), "ДФ=Hmmss") + Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0"));
	
КонецФункции

&НаСервере
Процедура ОбновитьРеестОбратныхЗвонков()

	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Обновление реестра обратных звонков");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ТекИд = Неопределено;
	Если Элементы.РеестрОбратныхЗвонков.ТекущаяСтрока <> Неопределено Тогда
		ТекИд = РеестрОбратныхЗвонков.НайтиПоИдентификатору(Элементы.РеестрОбратныхЗвонков.ТекущаяСтрока).id;
	КонецЕсли;
	РеестрОбратныхЗвонков.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Наименование,
	               |	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	               |	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерТочки";
				   
	ТабКеш = Запрос.Выполнить().Выгрузить();	
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "
		|SELECT [id]
		|, cash.ShopNo
		|,cb.[CashID]
		|,[CashierID]
		|,[Date_time]
		|,[Phone_number]
		|,[BonusCard]
		|,[Date_Time_CallBack]
		|,[Request_Status]
		|,[is_blocked]
		|,[Qty_attempt]
		|, cashier.FIO продавец
		|, c.FullName покупатель
		|, isNULL(cb.telegram_id, 0) as tel
        |
		|FROM [Loyalty].[dbo].[CashRequest_CallBack] as cb with(nolock) 
		|left join SMS_REPL..Cashier_view_tbl as cashier with(nolock) on cb.cashierID=cashier.CodeFL
		|left join Loyalty..Customer as c with(nolock) on c.Email=cb.BonusCard
		|left join SMS_REPL..caship as cash with(nolock) on cash.CashID=cb.cashid
		|WHERE ([Request_Status] <> 2)";
		Если  ВыводитьОбратныеЗвонки = ВыводитьОбратныеЗвонкиНеОтвеченные Тогда
			ТекстЗапросаSQL = ТекстЗапросаSQL + "
			|and ([Request_Status] <> 1)
			|";
		Иначе
		КонецЕсли;
		
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			//Сообщить(Выборка.Confirm_type);
			НовСтр = РеестрОбратныхЗвонков.Добавить();
			НовСтр.id                 = rs.Fields("id").Value;			
			НовСтр.is_blocked         = rs.Fields("is_blocked").Value;
			НовСтр.Request_Status     = rs.Fields("Request_Status").Value;
			НовСтр.Телеграм			  = (rs.Fields("tel").Value>0);	
			НовСтр.Date_time          = rs.Fields("Date_time").Value;
			НовСтр.ShopNo             = rs.Fields("ShopNo").Value;
			СтрокиИзКеша = ТабКеш.НайтиСтроки(Новый Структура("НомерТочки", НовСтр.ShopNo));
			Если СтрокиИзКеша.Количество() > 0 Тогда
				НовСтр.СтруктурнаяЕдиница = СтрокиИзКеша[0].СтруктурнаяЕдиница;
			Иначе
				//НовСтр.СтруктурнаяЕдиница = rs.Fields("ShopNo").Value;
				НовСтр.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли;
			НовСтр.Покупатель         = rs.Fields("покупатель").Value;
			НовСтр.Phone_number       = rs.Fields("Phone_number").Value;
			НовСтр.BonusCard          = rs.Fields("BonusCard").Value;
			НовСтр.Date_Time_CallBack = rs.Fields("Date_Time_CallBack").Value;
			НовСтр.Qty_attempt        = rs.Fields("Qty_attempt").Value;
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Если ТекИд <> Неопределено Тогда
		ТекИденты = РеестрОбратныхЗвонков.НайтиСтроки(Новый Структура("id", ТекИд));
		Если ТекИденты.Количество() > 0 Тогда
			Элементы.РеестрОбратныхЗвонков.ТекущаяСтрока = ТекИденты[0].ПолучитьИдентификатор();
		КонецЕсли;	
	КонецЕсли;	
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборКРеестОбратныхЗвонков()
	
	//УстановитьПараметрыДляЗамера("Обновление реестра обратных звонков с отбором");
	ОбновитьРеестОбратныхЗвонков();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыводитьНеОтвеченные(Команда)
	
	ВыводитьОбратныеЗвонки = ВыводитьОбратныеЗвонкиНеОтвеченные;
	Элементы.ВыводитьВсе.Картинка          = Новый Картинка();
	Элементы.ВыводитьНеОтвеченные.Картинка = БиблиотекаКартинок.ВыполненоУспешно32;
	Элементы.ОтменитьЗаказЗвонка.Доступность = Истина;
	ПрименитьОтборКРеестОбратныхЗвонков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВсе(Команда)
	
	ВыводитьОбратныеЗвонки = ВыводитьОбратныеЗвонкиВсе;
	Элементы.ВыводитьВсе.Картинка          = БиблиотекаКартинок.ВыполненоУспешно32;
	Элементы.ВыводитьНеОтвеченные.Картинка = Новый Картинка();
	Элементы.ОтменитьЗаказЗвонка.Доступность = Ложь;
	ПрименитьОтборКРеестОбратныхЗвонков();
	
КонецПроцедуры

//&НаСервере
//Функция ПолучитьТипОбращенияПокупателейОбратныйЗвонок()
//	
//	Возврат Справочники.ТипыОбращенийПокупателей.ОбратныйЗвонок;
//	
//КонецФункции


&НаСервере
Функция ПолучитьИсточникОбращенияОбратныйЗвонок()
	
	Возврат Справочники.ИсточникиОбращений.ОбратныйЗвонок;
	
КонецФункции

&НаКлиенте
Процедура РеестрОбратныхЗвонковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем ОбратныйЗвонок, Сообщение;

	Если ВыбраннаяСтрока <> Неопределено Тогда
		ТекИд = РеестрОбратныхЗвонков.НайтиПоИдентификатору(ВыбраннаяСтрока).id;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если Не ПолучитьОбратныйЗвонок(ТекИд, ОбратныйЗвонок, Сообщение) Тогда
		
		Предупреждение( Сообщение );				
		Возврат;		
		
	ИначеЕсли ОбратныйЗвонок.Request_Status = 1 Тогда
	
		Предупреждение("Заказ уже обработан.");
		Возврат;
		
	ИначеЕсли ОбратныйЗвонок.Request_Status = 2 Тогда
	
		Предупреждение("Заказ отменен.");
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ОбратныйЗвонок.is_blocked) Тогда
		
		Предупреждение("Заказ находится в работе.");		
		Возврат;		
		
	КонецЕсли;

	
	СтрокаРеестраОбратныхЗвонков_УстановитьФлагБлокировкиИУвеличитьСчетчикПопытокЗвонка(ОбратныйЗвонок.id);	
	
	//Структура=Новый Структура("", );
	Ф = ПолучитьФорму("РегистрСведений.ОбращенияПокупателей.ФормаЗаписи", ОбратныйЗвонок);
	
	//Ф.Запись.ТипОбращения   = ПолучитьТипОбращенияПокупателейОбратныйЗвонок();
	Ф.Запись.ИсточникОбращения= ПолучитьИсточникОбращенияОбратныйЗвонок();
	Ф.ЗаказОбратногоЗвонка_id = ОбратныйЗвонок.id;
	Ф.Запись.ДатаДок        = ОбратныйЗвонок.Date_time;	
	Ф.Запись.Номер_Карты_ОК = ОбратныйЗвонок.BonusCard;
	Ф.Запись.ФИО_Покупателя = ОбратныйЗвонок.покупатель;	
	Ф.Запись.Телефон        = ОбратныйЗвонок.Phone_number;	
	Ф.Запись.СтруктурнаяЕдиница = ОбратныйЗвонок.СтруктурнаяЕдиница;
	Ф.Запись.Продавец1          = ОбратныйЗвонок.Продавец;
	//Ф.Запись.Примечание - не нужно
	
	Ф.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыводитьОбратныеЗвонкиВсе          = 1;
	ВыводитьОбратныеЗвонкиНеОтвеченные = 0;
    ВыводитьНеОтвеченные(ЭтаФорма.Команды.ВыводитьНеОтвеченные);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ПрименитьОтборКРеестОбратныхЗвонков();	
	
КонецПроцедуры

&НаСервере
Процедура СтрокаРеестраОбратныхЗвонков_УстановитьСтатусОтменыЗаказаОбратногоЗвонка(ЗаказОбратногоЗвонка_id)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль = "UPDATE [Loyalty].[dbo].[CashRequest_CallBack]
   				|SET  Request_Status = 2
				|FROM [Loyalty].[dbo].[CashRequest_CallBack]
				|WHERE id = " + ВнешниеДанные.ФорматПоля(ЗаказОбратногоЗвонка_id);	
								
	ЗапросПолный = "declare @err int =1
					|while @err=1
					|begin
					| begin try
					|" + ЗапросСкуль + "
					|select @err=0
					| 
					| END TRY
					|  BEGIN CATCH
					| 
					|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
					|begin
					|-- запись в лог факта блокировки
					|	set @err=1
					|end
					|else
					|begin
					| 
					|-- прочая ошибка - выход  
					| return
					| end
					| 
					|  END CATCH 
					|end -- while";
	
	Попытка			
		ADOСоединение.Execute(ЗапросПолный);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при установке статуса отмены заказа обратного звонка у строки РеестраОбратныхЗвонков", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ЗапросСкуль);
		флУспешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказЗвонка(Команда)
	
	Перем ОбратныйЗвонок, Сообщение;

	Если Элементы.РеестрОбратныхЗвонков.ТекущаяСтрока <> Неопределено Тогда
		ТекИд = РеестрОбратныхЗвонков.НайтиПоИдентификатору(Элементы.РеестрОбратныхЗвонков.ТекущаяСтрока).id;
	
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если Не ПолучитьОбратныйЗвонок(ТекИд, ОбратныйЗвонок, Сообщение) Тогда
		
		Предупреждение( Сообщение );				
		Возврат;		
		
	ИначеЕсли ОбратныйЗвонок.Request_Status = 1 Тогда
	
		Предупреждение("Заказ уже обработан.");
		Возврат;
		
	ИначеЕсли ОбратныйЗвонок.Request_Status = 2 Тогда
	
		Предупреждение("Заказ отменен.");
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ОбратныйЗвонок.is_blocked) Тогда
		
		Предупреждение("Заказ находится в работе.");		
		Возврат;		
		
	КонецЕсли;
	
	Если КодВозвратаДиалога.Да = Вопрос("Вы уверены, что хотите отменить заказ обратного звонка" + Символы.ПС + """" + ОбратныйЗвонок.Date_time + ", Покупатель - " + ОбратныйЗвонок.Покупатель + ", Телефон - " + ОбратныйЗвонок.Phone_number + """?", РежимДиалогаВопрос.ДаНет, 0) Тогда
	
		СтрокаРеестраОбратныхЗвонков_УстановитьСтатусОтменыЗаказаОбратногоЗвонка(ОбратныйЗвонок.id);
		Инд = РеестрОбратныхЗвонков.Индекс(Элементы.РеестрОбратныхЗвонков.ТекущиеДанные);
		РеестрОбратныхЗвонков.Удалить(Инд);
		
	КонецЕсли;
	
КонецПроцедуры