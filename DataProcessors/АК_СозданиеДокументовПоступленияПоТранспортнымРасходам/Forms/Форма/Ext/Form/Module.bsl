
Процедура ОчиститьТЧ()
	
	Объект.Услуги.Очистить();
	Объект.Рейсы.Очистить();
	Объект.Товары.Очистить();
	Объект.ТорговыеТочки.Очистить();
	
КонецПроцедуры

Процедура УстановитьНастройкиПроводок()
	
	НастройкиДоставкаНаСклад =
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ДоставкаТовараНаСклад, Объект.ДатаНачала);
	Объект.СчетДтДоставкаНаСклад 	= НастройкиДоставкаНаСклад.Счет;
	Объект.СтатьяТД 				= НастройкиДоставкаНаСклад.СтатьяДвиженияТоваров41;
	
	НастройкиДоставкаНаСклад =
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ДоставкаУпаковкиНаСклад, Объект.ДатаНачала);
	Объект.СчетДтДоставкаНаСкладУпаковка = НастройкиДоставкаНаСклад.Счет;
		
	НастройкиОтражениеНДС =
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыПоступлениеТоваровИУслуг, Объект.ДатаНачала);
	Объект.СчетДтНДС 	= НастройкиОтражениеНДС.Счет;
	Объект.ВидНалогов 	= НастройкиОтражениеНДС.ДопРеквизит;
		
	НастройкиДоставкаНаТТ =
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ТранспортныеРасходыПоДоставкеНаТочку, Объект.ДатаНачала);
	Объект.СчетДтДоставкаНаТТ 	= НастройкиДоставкаНаТТ.Счет;
	Объект.СтатьяДР 			= НастройкиДоставкаНаТТ.СтатьяДоходовРасходов;
	Объект.СтатьяДДС			= Объект.СтатьяДР.ОсновнаяСтатьяДвиженияДенежныхСредств;
	Объект.ЦФО 					= НастройкиДоставкаНаТТ.ЦФО;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборРейсов()
	
    ТекДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		Элементы.Рейсы.ОтборСтрок =
			Новый ФиксированнаяСтруктура("Организация, Перевозчик, ДатаРейса", ТекДанные.Организация, ТекДанные.Перевозчик, ТекДанные.ДатаРейса);
	Иначе
		Элементы.Рейсы.ОтборСтрок = Новый ФиксированнаяСтруктура("Организация, Перевозчик, ДатаРейса", Неопределено, Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДоставкаНаСклад()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик,
	|	ЕСТЬNULL(ОсновныеДоговора.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	СУММА(МаршрутныйЛист.Сумма) КАК Сумма
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговораКонтрагентов.СрезПоследних(
	|				&ДатаНачала,
	|				ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|					И &УсловиеПоОрганизации1
	|					И &УсловиеПоПеревозчику1) КАК ОсновныеДоговора
	|		ПО (ОсновныеДоговора.Организация = МаршрутныйЛист.Организация)
	|			И (ОсновныеДоговора.Контрагент = МаршрутныйЛист.Перевозчик)
	|ГДЕ
	|	МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
	|	И МаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И &УсловиеПоОрганизации2
	|	И &УсловиеПоПеревозчику2
	|	И МаршрутныйЛист.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик,
	|	ЕСТЬNULL(ОсновныеДоговора.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛист.Дата, ДЕНЬ) КАК ДатаРейса,
	|	МаршрутныйЛист.Ссылка КАК ДокументРейса,
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик,
	|	СУММА(МаршрутныйЛист.Сумма) КАК Сумма
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
	|	И МаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И &УсловиеПоОрганизации2
	|	И &УсловиеПоПеревозчику2
	|	И МаршрутныйЛист.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛист.Дата, ДЕНЬ),
	|	МаршрутныйЛист.Ссылка,
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДоставкаНаТТ()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	//|	НАЧАЛОПЕРИОДА(МаршрутныйЛист.Дата, ДЕНЬ) КАК ДатаРейса,
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик,
	|	ЕСТЬNULL(ОсновныеДоговора.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	СУММА(МаршрутныйЛист.Сумма) КАК Сумма
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговораКонтрагентов.СрезПоследних(
	|				&ДатаНачала,
	|				ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|					И &УсловиеПоОрганизации1
	|					И &УсловиеПоПеревозчику1) КАК ОсновныеДоговора
	|		ПО (ОсновныеДоговора.Организация = МаршрутныйЛист.Организация)
	|			И (ОсновныеДоговора.Контрагент = МаршрутныйЛист.Перевозчик)
	|ГДЕ
	|	МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаТТ)
	|	И МаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И &УсловиеПоОрганизации2
	|	И &УсловиеПоПеревозчику2
	|	И МаршрутныйЛист.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	//|	НАЧАЛОПЕРИОДА(МаршрутныйЛист.Дата, ДЕНЬ),
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик,
	|	ЕСТЬNULL(ОсновныеДоговора.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛист.Дата, ДЕНЬ) КАК ДатаРейса,
	|	МаршрутныйЛист.Ссылка КАК ДокументРейса,
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик,
	|	СУММА(МаршрутныйЛист.Сумма) КАК Сумма
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаТТ)
	|	И МаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И &УсловиеПоОрганизации2
	|	И &УсловиеПоПеревозчику2
	|	И МаршрутныйЛист.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛист.Дата, ДЕНЬ),
	|	МаршрутныйЛист.Ссылка,
	|	МаршрутныйЛист.Организация,
	|	МаршрутныйЛист.Перевозчик";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСуммыРасходовПоДоставкеНаСклад()
	
	Перем Запрос, СуммаВсего;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРейсов", Объект.Рейсы.Выгрузить().ВыгрузитьКолонку("ДокументРейса"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныеОрдераМЛ.Ссылка КАК ДокументРейса,
	|	ТЧТовары.Ссылка.Склад КАК Склад,
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.Номенклатура.ТипТовара КАК ТипТовара,
	|	СУММА(ТЧТовары.Количество * ТЧТовары.ЕдиницаИзмерения.Вес) КАК Вес
	|ПОМЕСТИТЬ ВТВеса
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.ПриходныеОрдера КАК ПриходныеОрдераМЛ
	|		ПО (ПриходныеОрдераМЛ.Ссылка В (&МассивРейсов))
	|			И (ПриходныеОрдераМЛ.ПриходныйОрдер = ТЧТовары.Ссылка)
	|ГДЕ
	|	НЕ ПриходныеОрдераМЛ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныеОрдераМЛ.Ссылка,
	|	ТЧТовары.Ссылка.Склад,
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.Номенклатура.ТипТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВеса.ДокументРейса КАК ДокументРейса,
	|	НАЧАЛОПЕРИОДА(ВТВеса.ДокументРейса.Дата, ДЕНЬ) КАК ДатаРейса,
	|	ВТВеса.ДокументРейса.Организация КАК Организация,
	|	ВТВеса.ДокументРейса.Перевозчик КАК Перевозчик,
	|	ВТВеса.Склад,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК СтруктурнаяЕдиница,
	|	ВТВеса.ТипТовара,
	|	ВТВеса.Номенклатура,
	|	ВТВеса.ДокументРейса.Сумма * ВТВеса.Вес / ВЫБОР
	|		КОГДА ВТОбщийВес.Вес = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТОбщийВес.Вес, 1)
	|	КОНЕЦ КАК Сумма,
	|	ВТВеса.ДокументРейса.СуммаНДС * ВТВеса.Вес / ВЫБОР
	|		КОГДА ВТОбщийВес.Вес = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТОбщийВес.Вес, 1)
	|	КОНЕЦ КАК СуммаНДС
	|ИЗ
	|	ВТВеса КАК ВТВеса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТВеса.ДокументРейса КАК ДокументРейса,
	|			СУММА(ВТВеса.Вес) КАК Вес
	|		ИЗ
	|			ВТВеса КАК ВТВеса
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТВеса.ДокументРейса) КАК ВТОбщийВес
	|		ПО (ВТОбщийВес.ДокументРейса = ВТВеса.ДокументРейса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТВеса.ДокументРейса";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьТоварыПоДоставкеНаСклад()
	
	Если Объект.Товары.Количество() > 0 Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	// таблица сумм, распределенных по поставщикам пропорционально массам
	ТаблицаКПроведению = ПолучитьСуммыРасходовПоДоставкеНаСклад();
	Если ТаблицаКПроведению.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет данных для распределения транспортных расходов по доставке на склад!");
		Возврат;
	КонецЕсли;
	
	мОкругленнаяСумма 		= 0;
	мСуммаВсего 			= 0;
	мОкругленнаяСуммаНДС 	= 0;
	мСуммаВсегоНДС 			= 0;
	н = 0;
	мДокументРейса = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаКПроведению Цикл
		Если НЕ СтрокаТаблицы.ДокументРейса = мДокументРейса Тогда
			Если НЕ мОкругленнаяСумма = мСуммаВсего Тогда  // разница при округлении - в последнюю строку
				ТаблицаКПроведению[н - 1].Сумма = ТаблицаКПроведению[н - 1].Сумма + (мСуммаВсего - мОкругленнаяСумма);
			КонецЕсли;
			Если НЕ мОкругленнаяСуммаНДС = мСуммаВсегоНДС Тогда
				ТаблицаКПроведению[н - 1].СуммаНДС = ТаблицаКПроведению[н - 1].СуммаНДС + (мСуммаВсегоНДС - мОкругленнаяСуммаНДС);
			КонецЕсли;
			мОкругленнаяСумма 		= 0;
			мСуммаВсего 			= 0;
			мОкругленнаяСуммаНДС 	= 0;
			мСуммаВсегоНДС 			= 0;
		КонецЕсли;
		мСуммаВсего 			= мСуммаВсего 			+ СтрокаТаблицы.Сумма;
		мОкругленнаяСумма 		= мОкругленнаяСумма 	+ Окр(СтрокаТаблицы.Сумма, 2);
		мСуммаВсегоНДС 			= мСуммаВсегоНДС 		+ СтрокаТаблицы.СуммаНДС;
		мОкругленнаяСуммаНДС 	= мОкругленнаяСуммаНДС 	+ Окр(СтрокаТаблицы.СуммаНДС, 2);
		мДокументРейса = СтрокаТаблицы.ДокументРейса;
		н = н + 1;
	КонецЦикла;
	Если НЕ мОкругленнаяСумма = мСуммаВсего Тогда  // разница при округлении - в последнюю строку
		ТаблицаКПроведению[н - 1].Сумма = ТаблицаКПроведению[н - 1].Сумма + (мСуммаВсего - мОкругленнаяСумма);
	КонецЕсли;
	Если НЕ мОкругленнаяСуммаНДС = мСуммаВсегоНДС Тогда
		ТаблицаКПроведению[н - 1].СуммаНДС = ТаблицаКПроведению[н - 1].СуммаНДС + (мСуммаВсегоНДС - мОкругленнаяСуммаНДС);
	КонецЕсли;
	
	ТаблицаТоваровКПроведению 	= ТаблицаКПроведению.СкопироватьКолонки();
	ТаблицаУпаковкиКПроведению 	= ТаблицаКПроведению.СкопироватьКолонки();
	Для Каждого СтрокаТаблицы Из ТаблицаКПроведению Цикл
		Если НЕ СтрокаТаблицы.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
			НоваяСтрока = ТаблицаТоваровКПроведению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СтруктурнаяЕдиница = НоваяСтрока.Склад.Владелец;
		Иначе
			НоваяСтрока = ТаблицаУпаковкиКПроведению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТаблицаТоваровКПроведению.Свернуть("ДатаРейса, Организация, Перевозчик, СтруктурнаяЕдиница, Номенклатура", "Сумма, СуммаНДС");
	
	//ТабВыделенияНДС = Новый ТаблицаЗначений();
	//ТабВыделенияНДС.Колонки.Добавить("СтрокаТаблицы");
	//ТабВыделенияНДС.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//ТабВыделенияНДС.Колонки.Добавить("Сумма");
	//Для Каждого СтрокаТаблицы Из ТаблицаТоваровКПроведению Цикл
	//	Если СтрокаТаблицы.Сумма = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	СтрокаДоб = ТабВыделенияНДС.Добавить();
	//	СтрокаДоб.СтрокаТаблицы = СтрокаТаблицы;
	//	СтрокаДоб.Сумма 		= СтрокаТаблицы.Сумма;
	//КонецЦикла;
	//Для Каждого СтрокаТаблицы Из ТаблицаУпаковкиКПроведению Цикл
	//	Если СтрокаТаблицы.Сумма = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	СтрокаДоб = ТабВыделенияНДС.Добавить();
	//	СтрокаДоб.СтрокаТаблицы = СтрокаТаблицы;
	//	СтрокаДоб.Сумма 		= СтрокаТаблицы.Сумма;
	//КонецЦикла;
	
	//МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС, ТабВыделенияНДС.ВыгрузитьКолонку("Сумма"));
	//Если НЕ МассивРаспределения = Неопределено Тогда
	//	ТабВыделенияНДС.ЗагрузитьКолонку(МассивРаспределения, "СуммаНДС");
	//КонецЕсли;
	//
	//Для Каждого СтрокаНДС Из ТабВыделенияНДС Цикл
	//	СтрокаНДС.СтрокаТаблицы.Сумма = СтрокаНДС.СтрокаТаблицы.Сумма - СтрокаНДС.СуммаНДС;
	//КонецЦикла;	
	
	// заполнение ТЧ Товары
	Для Каждого СтрокаТаблицы Из ТаблицаТоваровКПроведению Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.СчетУчета 	= Объект.СчетДтДоставкаНаСклад;
		//НоваяСтрока.Содержание	= "";
	КонецЦикла;	
	Для Каждого СтрокаТаблицы Из ТаблицаУпаковкиКПроведению Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.СчетУчета 	= Объект.СчетДтДоставкаНаСкладУпаковка;
		//НоваяСтрока.СтатьяДР	= Объект.СтатьяДР;		
		//НоваяСтрока.Содержание	= "";
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьТорговыеТочкиПоДоставкеНаТТ()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", Объект.Рейсы.Выгрузить().ВыгрузитьКолонку("ДокументРейса"));
	
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛистТорговыеТочки.Ссылка.Дата, ДЕНЬ) КАК ДатаРейса,
	|	МаршрутныйЛистТорговыеТочки.Ссылка.Организация КАК Организация,
	|	МаршрутныйЛистТорговыеТочки.Ссылка.Перевозчик КАК Перевозчик,
	|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	МаршрутныйЛистТорговыеТочки.ГруппаДоставкиНоменклатуры,
	|	МаршрутныйЛистТорговыеТочки.Стоимость КАК Сумма
	|ИЗ
	|	Документ.МаршрутныйЛист.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
	|ГДЕ
	|	МаршрутныйЛистТорговыеТочки.Ссылка В (&МассивДокументов)";				   
	
	//
	Объект.ТорговыеТочки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.УслугаДоставка 	= Справочники.Номенклатура.НайтиПоКоду("000620784"); // Доставка транспортировка
	
	Объект.СчетКт 			= ПланыСчетов.Финансовый.ПрочаяЗадолженность;
	Объект.ВидПеревозки     = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
	УстановитьНастройкиПроводок();
	
КонецПроцедуры


&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала 		= ЭтаФорма.Период.ДатаНачала;
	Объект.ДатаОкончания 	= ЭтаФорма.Период.ДатаОкончания;
	
	ОчиститьТЧ();
	УстановитьНастройкиПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	
	ОчиститьТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОчиститьТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	ОчиститьТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриАктивизацииСтроки(Элемент)

	УстановитьОтборРейсов();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСервер()
	
	ЕстьОрганизация = НЕ Объект.Организация.Пустая();
	ЕстьПеревозчик 	= НЕ Объект.Перевозчик.Пустая();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(Объект.ДатаОкончания));
	Если ЕстьОрганизация Тогда
		Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	КонецЕсли;
	Если ЕстьПеревозчик Тогда
		Запрос.УстановитьПараметр("Перевозчик"	, Объект.Перевозчик);
	КонецЕсли;
	//Запрос.УстановитьПараметр("Услуга"			, Объект.УслугаДоставка);
	//Запрос.УстановитьПараметр("СтатьяДР"		, Объект.СтатьяДР);
	
	ТекстЗапроса = ?(Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад,
						ПолучитьТекстЗапросаДоставкаНаСклад(),
						ПолучитьТекстЗапросаДоставкаНаТТ());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации1", ?(ЕстьОрганизация, "Организация = &Организация"	, "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПеревозчику1", ?(ЕстьПеревозчик	, "Контрагент = &Перевозчик"	, "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации2",
								?(ЕстьОрганизация	, "МаршрутныйЛист.Организация = &Организация"	, "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПеревозчику2",
								?(ЕстьПеревозчик	, "МаршрутныйЛист.Перевозчик = &Перевозчик"		, "ИСТИНА"));
						
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	//
	Объект.Услуги.Загрузить(РезультатыЗапроса[0].Выгрузить());
	Объект.Рейсы.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
	//
	Если Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад Тогда
		ЗаполнитьТоварыПоДоставкеНаСклад();
	ИначеЕсли Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ Тогда
		ЗаполнитьТорговыеТочкиПоДоставкеНаТТ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)

	Если Объект.ВидПеревозки.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид перевозки!");
		Возврат;
	КонецЕсли;
	
	//
	ЗаполнитьДанныеСервер();
	УстановитьОтборРейсов();
	
КонецПроцедуры

Процедура СоздатьДокументыСервер()

	Если Объект.Услуги.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет данных для создания документов. Их необходимо заполнить по кнопке ""Заполнить данные"".");
		Возврат;
	КонецЕсли;
	
	//
	ДокиПоступления 	= Документы.ПоступлениеТоваровУслуг;
	ВидОперацииПокупка 	= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
	ТекПользователь		= ПараметрыСеанса.ТекущийПользователь;
	
	СтруктураОтбора = Новый Структура("ДатаРейса, Организация, Перевозчик");
	СтруктураОтбора2 = Новый Структура("Организация, Перевозчик");
	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		Если СтрокаТЧ.ДокументПоступления.Пустая() Тогда
			ПоступлениеОбъект = ДокиПоступления.СоздатьДокумент();
		Иначе
			ПоступлениеОбъект = СтрокаТЧ.ДокументПоступления.ПолучитьОбъект();
		КонецЕсли;
		
		//
		ПоступлениеОбъект.Организация 			= СтрокаТЧ.Организация;
		Если ПоступлениеОбъект.ЭтоНовый() Тогда
			ПоступлениеОбъект.Дата						= КонецДня(Объект.ДатаОкончания);
			ПоступлениеОбъект.ДатаВходящегоДокумента	= Объект.ДатаОкончания;
			ПоступлениеОбъект.НомерВходящегоДокумента 	= "АВУ";
		КонецЕсли;	
		ПоступлениеОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ПоступлениеОбъект.Комментарий			= "Создан обработкой формирования начисления транспортных услуг за период с " +
													Формат(Объект.ДатаНачала, "ДЛФ=Д") + " по " + Формат(Объект.ДатаОкончания, "ДЛФ=Д");
		ПоступлениеОбъект.СтруктурнаяЕдиница	= СтрокаТЧ.Договор.СтруктурнаяЕдиница;
		ПоступлениеОбъект.Контрагент 			= СтрокаТЧ.Перевозчик;
		ПоступлениеОбъект.ДоговорКонтрагента 	= СтрокаТЧ.Договор;
		ПоступлениеОбъект.ВариантРасчетаНДС		= ?(СтрокаТЧ.Перевозчик.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		ПоступлениеОбъект.Ответственный			= ТекПользователь;
		ПоступлениеОбъект.НеВыгружатьВБУ		= Истина;
		
		ПоступлениеОбъект.СтатьяДДС				= Объект.СтатьяДДС;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Договор.СчетУчетаРасчетовСКонтрагентом) Тогда
			ПоступлениеОбъект.СчетУчетаРасчетовСКонтрагентом = СтрокаТЧ.Договор.СчетУчетаРасчетовСКонтрагентом;
		Иначе
			ПоступлениеОбъект.СчетУчетаРасчетовСКонтрагентом = Объект.СчетКт;
		КонецЕсли;
		
		//
		Если ПоступлениеОбъект.Услуги.Количество() > 0 Тогда
			ПоступлениеОбъект.Услуги.Очистить();			
		КонецЕсли;
		
		Если Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад Тогда
			
			//СтруктураОтбора.ДатаРейса 	= СтрокаТЧ.ДатаРейса;
			СтруктураОтбора2.Организация 	= СтрокаТЧ.Организация;
			СтруктураОтбора2.Перевозчик 	= СтрокаТЧ.Перевозчик;
			СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора2);
			
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
				
				НоваяСтрока = ПоступлениеОбъект.Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
				НоваяСтрока.Номенклатура 	= Объект.УслугаДоставка;
				НоваяСтрока.Количество 	 	= 1;
				
				НоваяСтрока.Цена 			= СтрокаТоваров.Сумма;
				НоваяСтрока.СтавкаНДС 		= СтрокаТЧ.Перевозчик.СтавкаНДС;
				ПоступлениеОбъект.ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
				
				НоваяСтрока.СчетЗатрат 		= СтрокаТоваров.СчетУчета;
				Если СтрокаТоваров.СчетУчета = Объект.СчетДтДоставкаНаСклад Тогда
					НоваяСтрока.Субконто1 	= СтрокаТоваров.СтруктурнаяЕдиница;
					НоваяСтрока.Субконто2 	= СтрокаТоваров.Номенклатура;
					НоваяСтрока.Субконто3 	= Объект.СтатьяТД;
				ИначеЕсли СтрокаТоваров.СчетУчета = Объект.СчетДтДоставкаНаСкладУпаковка Тогда
					НоваяСтрока.Субконто1 	= СтрокаТоваров.Номенклатура;
					НоваяСтрока.Субконто2 	= СтрокаТоваров.Склад;
					НоваяСтрока.Субконто3 	= Объект.СтатьяТД;
				КонецЕсли;
				
				НоваяСтрока.Содержание = СокрЛП(Объект.УслугаДоставка.Наименование) + " на склад от поставщика """ +
										СокрЛП(СтрокаТЧ.Перевозчик.Наименование) + """. Дата " + Формат(СтрокаТЧ.ДатаРейса, "ДЛФ=Д");
				
				//СчетаЗатратБух = ПолучитьСчетаУчетаНоменклатурыБух(СтрокаТоваров.Номенклатура, "УСЛУГИ", НоваяСтрока.СчетЗатрат);
				//НоваяСтрока.СчетЗатратБУ = СчетаЗатратБух.СчетУчетаБУ;
				//НоваяСтрока.СчетЗатратНУ = СчетаЗатратБух.СчетУчетаНУ;
				
			КонецЦикла;
			
		ИначеЕсли Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ Тогда
			
			//СтруктураОтбора.ДатаРейса 	= СтрокаТЧ.ДатаРейса;
			СтруктураОтбора.Организация = СтрокаТЧ.Организация;
			СтруктураОтбора.Перевозчик 	= СтрокаТЧ.Перевозчик;
			СтрокиТТ = Объект.ТорговыеТочки.НайтиСтроки(СтруктураОтбора);
			
			мСтавкаНДС = СтрокаТЧ.Перевозчик.СтавкаНДС;
			
			Для Каждого СтрокаТТ Из СтрокиТТ Цикл
				
				НоваяСтрока = ПоступлениеОбъект.Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТТ);
				НоваяСтрока.Номенклатура 	= Объект.УслугаДоставка;
				НоваяСтрока.ТорговаяТочка	= СтрокаТТ.ТорговаяТочка;
				НоваяСтрока.Количество 	 	= 1;
				
				НоваяСтрока.Цена 			= СтрокаТТ.Сумма;
				НоваяСтрока.СтавкаНДС 		= мСтавкаНДС;
				ПоступлениеОбъект.ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
				
				НоваяСтрока.СчетЗатрат 	= Объект.СчетДтДоставкаНаТТ;
				НоваяСтрока.Субконто1 	= СтрокаТТ.ТорговаяТочка;
				НоваяСтрока.Субконто2 	= Объект.СтатьяДР;
				мЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтрокаТТ.ТорговаяТочка, СтрокаТЧ.ДатаРейса);
				НоваяСтрока.Субконто3 	= ?(ЗначениеЗаполнено(Объект.ЦФО), Объект.ЦФО, мЦФО);
				
				НоваяСтрока.Содержание = СокрЛП(Объект.УслугаДоставка.Наименование) + " на точку """ + СокрЛП(СтрокаТТ.ТорговаяТочка.Наименование) +
											""". Дата " + Формат(СтрокаТЧ.ДатаРейса, "ДЛФ=Д");
				
			КонецЦикла;
			
		КонецЕсли;
		
		Попытка
			ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.СообщитьОбОшибке(?(ЗначениеЗаполнено(СтрокаТЧ.ДокументПоступления), "Обновлен документ поступления ", "Создан документ поступления ") + ПоступлениеОбъект);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)

	Если Объект.Услуги.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнены услуги!");
		Возврат;
	КонецЕсли;
	
	//
	СоздатьДокументыСервер();	
	
КонецПроцедуры

Процедура СформироватьОтчетРейсыБезТарифовСервер()
	
	ПараметрКомпоновкиДатаНачала 	= Новый ПараметрКомпоновкиДанных("ДатаНачала");
	ПараметрКомпоновкиДатаОкончания	= Новый ПараметрКомпоновкиДанных("ДатаОкончания");
	ПолеКомпоновкиПеревозчик 		= Новый ПолеКомпоновкиДанных("Перевозчик");
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	мСхемаКомпоновкиДанных = ОбъектОбработки.ПолучитьМакет(
		?(Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад, "ДоставкаНаСкладБезТарифов", "ДоставкаНаТТБезТарифов"));
	
	мНастройкиОтчета = мСхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Настройки;
	
	мПараметрыОтчета = мНастройкиОтчета.ПараметрыДанных;
	Для Каждого ЭлементПараметров Из мПараметрыОтчета.Элементы Цикл
		Если ЭлементПараметров.Параметр = ПараметрКомпоновкиДатаНачала Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= Объект.ДатаНачала;
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиДатаОкончания Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= КонецДня(Объект.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	мОтборОтчета = мНастройкиОтчета.Отбор;
	Для Каждого ЭлементОтбора Из мОтборОтчета.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПеревозчик Тогда
			ЭлементОтбора.Использование 	= НЕ Объект.Перевозчик.Пустая();
			ЭлементОтбора.ПравоеЗначение 	= Объект.Перевозчик;
		КонецЕсли;
	КонецЦикла;
	
	// Макет компоновки
	мКомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	мМакетКомпоновки = мКомпоновщикМакета.Выполнить(мСхемаКомпоновкиДанных, мНастройкиОтчета);	
	
	// Компоновка данных
	мПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	мПроцессорКомпоновки.Инициализировать(мМакетКомпоновки);	
	
	// Вывод на форму
	мПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	мПроцессорВывода.УстановитьДокумент(ЭтаФорма.ТабДокументРейсыБезТарифов);
	мПроцессорВывода.Вывести(мПроцессорКомпоновки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетРейсыБезТарифов(Команда)
	
	ЭтаФорма.ТабДокументРейсыБезТарифов.Очистить();
	
	Если Объект.ВидПеревозки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьОтчетРейсыБезТарифовСервер();
	
КонецПроцедуры
