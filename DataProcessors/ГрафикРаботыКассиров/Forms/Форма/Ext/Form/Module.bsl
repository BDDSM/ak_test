
//////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	
	Если НЕ ПроверитьЗаполнение()Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьГрафикНаСервере();
	
	ТабличныйДокумент.ФиксацияСлева 	= 3;
	ТабличныйДокумент.ФиксацияСверху 	= 5;
	
КонецПроцедуры

Процедура ОбновитьГрафикНаСервере()
	
	//+++АК mika 2018.08.21 ИП-00019541 (Построние графиков через СКД) 
	ОбновитьГрафикНаСервереСКД();
	
	Возврат;
	//---АК mika
	
	ТабличныйДокумент.Очистить();
	ОсновнаяТаблица.Очистить();
	ТаблицаЦветовТТ.Очистить();
	ВходящиеДанные.Очистить();
	ПорядокФормированияТабеля.Очистить();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификаФормированияТабеля.ФизическоеЛицо,
	|	СпецификаФормированияТабеля.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.СпецификаФормированияТабеляКассиров КАК СпецификаФормированияТабеля
	|ГДЕ
	|	СпецификаФормированияТабеля.Группа = &Группа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
		
	//+++АК mika 2018.07.17 ИП-00019209
	Если ВариантПостроения = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СпецификаФормированияТабеляКассиров", "СпецификаФормированияТабеляКассировПомощники");
	КонецЕсли;
	//---АК mika
	
	ПорядокФормированияТабеля.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода"	, НачалоДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Группа"			, ГруппаТорговыхТочек);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабельРаботы.Период,
	|	ТабельРаботы.Сотрудник,
	|	ТабельРаботы.ТорговаяТочка,
	|	ТабельРаботы.Отсутствие,
	|	СУММА(ТабельРаботы.КоличествоЧасов) КАК КоличествоЧасов,
	|	МАКСИМУМ(ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0)) КАК Порядок,
	|	ТабельРаботы.Сотрудник.Код КАК КодСотрудника,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """""""") КАК СТРОКА(50)) КАК Телефон,
	|	ТабельРаботы.ТорговаяТочка.Наименование,
	|	ТабельРаботы.ТорговаяТочка.ТипРозничнойТочки,
	|	ТабельРаботы.СвойствоСотрудника,
	|	ТабельРаботы.Тренинг,
	|	ТабельРаботы.ЭкстренныйВызов
	|ИЗ
	|	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляКассиров КАК СпецификаФормированияТабеля
	|		ПО ТабельРаботы.Группа = СпецификаФормированияТабеля.Группа
	|			И ТабельРаботы.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботы.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|ГДЕ
	|	ТабельРаботы.Группа = &Группа
	|	И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	//|	И НЕ ТабельРаботы.Сотрудник.ВнештатныйСотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботы.Период,
	|	ТабельРаботы.Сотрудник,
	|	ТабельРаботы.ТорговаяТочка,
	|	ТабельРаботы.Отсутствие,
	|	ТабельРаботы.Сотрудник.Код,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """""""") КАК СТРОКА(50)),
	|	ТабельРаботы.ТорговаяТочка.Наименование,
	|	ТабельРаботы.ТорговаяТочка.ТипРозничнойТочки,
	|	ТабельРаботы.СвойствоСотрудника,
	|	ТабельРаботы.Тренинг,
	|	ТабельРаботы.ЭкстренныйВызов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	//+++АК mika 2018.02.09.30 ИП-00016863.02
	//Возможность "Помощнику" формировать график по "своим" подчиненным сотрудникам,
	//независимо от группы на которую было распределение 
	Если ВариантПостроения = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабельРаботы.Группа", "ТабельРаботы.ГруппаСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабельРаботы.Период,","ТабельРаботы.Период, ТабельРаботы.Группа,");
		//Отбор сотрудников по помощнику
		Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
			//Для управляющего использовать отбор по помощнику если он установлен, иначе отображать данные по группе сотрудника "в целом".
			Если ЗначениеЗаполнено(ТекущийПомощник) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода","И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода И ТабельРаботы.Сотрудник.ПомощникТУ = &ТекущийПомощник");
				Запрос.УстановитьПараметр("ТекущийПомощник", ТекущийПомощник);
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода","И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода И ТабельРаботы.Сотрудник.ПомощникТУ = &ТекущийПомощник");
			Запрос.УстановитьПараметр("ТекущийПомощник", ТекущийПомощник);
		КонецЕсли;
		
	КонецЕсли;
	//+++АК mika

	//+++АК mika 2018.07.17 ИП-00019209
	Если ВариантПостроения = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпецификаФормированияТабеляКассиров", "СпецификаФормированияТабеляКассировПомощники");
	КонецЕсли;
	//---АК mika
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		ЗаполнитьЗначенияСвойств(ВходящиеДанные.Добавить(), Выборка);
		
		НоваяСтр = ОсновнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТорговаяТочка"			, Выборка.ТорговаяТочка);
		СтруктураДанных.Вставить("ТорговаяТочкаНаименование", Выборка.ТорговаяТочкаНаименование);
		СтруктураДанных.Вставить("КоличествоЧасов"			, Выборка.КоличествоЧасов);
		СтруктураДанных.Вставить("СвойствоСотрудника"		, Выборка.СвойствоСотрудника);
		СтруктураДанных.Вставить("Отсутствие"				, Выборка.Отсутствие);
		СтруктураДанных.Вставить("Тренинг"					, Выборка.Тренинг);
		СтруктураДанных.Вставить("ЭкстренныйВызов"			, Выборка.ЭкстренныйВызов);
		
		Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
		
		НоваяСтр.Представление = Представление;
		
	КонецЦикла;
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбъектОбработка.ПолучитьМакет("График");
	ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
	ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	ТЗОсновная = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	ТЗСотрудники = ТЗОсновная.Скопировать();
	ТЗСотрудники.Свернуть("Сотрудник, Порядок, КодСотрудника, Телефон");
	ТЗСотрудники.Сортировать("Порядок");
	КоличествоСотрудников = ТЗСотрудники.Количество();
	
	// Вывод шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	Для Каждого СтрТЗ Из ТЗСотрудники Цикл
		
		ОбластьШапкаСотрудник.Параметры.Сотрудник 		= Строка(СтрТЗ.Сотрудник);
		ОбластьШапкаСотрудник.Параметры.Расшифровка 	= Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", СтрТЗ.Сотрудник, СтрТЗ.КодСотрудника, СтрТЗ.Телефон);
		ОбластьШапкаСотрудник.Параметры.КодСотрудника 	= СтрТЗ.КодСотрудника;
		ОбластьШапкаСотрудник.Параметры.Телефон		  	= СтрТЗ.Телефон;
		ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
		
	КонецЦикла;
	
	ЗаполнитьТаблицуЦветовТТ();
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	
	ТаблицаВыходных = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (ТаблицаВыходных.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период 			= Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью 	= Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		Для Каждого СтрТЗ Из ТЗСотрудники Цикл
			
			ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
			
			НайденныеСтроки = ТЗОсновная.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
			
			Если НайденныеСтроки.Количество() Тогда
				
				СтрокаСДанными = НайденныеСтроки[0];
				
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("ТорговаяТочка"			, СтрокаСДанными.ТорговаяТочка);
				СтруктураДанных.Вставить("ТорговаяТочкаНаименование", СтрокаСДанными.ТорговаяТочкаНаименование);
				СтруктураДанных.Вставить("КоличествоЧасов"			, СтрокаСДанными.КоличествоЧасов);
				СтруктураДанных.Вставить("СвойствоСотрудника"		, СтрокаСДанными.СвойствоСотрудника);
				СтруктураДанных.Вставить("Отсутствие"				, СтрокаСДанными.Отсутствие);
				СтруктураДанных.Вставить("Тренинг"					, СтрокаСДанными.Тренинг);
				СтруктураДанных.Вставить("ЭкстренныйВызов"			, СтрокаСДанными.ЭкстренныйВызов);
				
				Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
				
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = Представление;
				
				НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТорговаяТочка, "ТорговаяТочка");
				Если НайденнаяСтрокаЦвет <> Неопределено Тогда
					ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
				КонецЕсли;
				
			Иначе
				
				// Добавим пустую строку с периодом
				НоваяСтрока = ОсновнаяТаблица.Добавить();
				НоваяСтрока.Сотрудник 	= СтрТЗ.Сотрудник;
				НоваяСтрока.Период 		= НачалоПериода;
				
				СтрВход = ВходящиеДанные.Добавить();
				СтрВход.Сотрудник 	= СтрТЗ.Сотрудник;
				СтрВход.Период 		= НачалоПериода;
				
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
			
			ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = "";
			
		КонецЦикла;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ОсновнаяТаблица.Сортировать("Сотрудник, Период");
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикНаСервереСКД() //+++АК mika 2018.08.20 ИП-00019541
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Очистка табличных частей
	ТабличныйДокумент.Очистить();
	ОсновнаяТаблица.Очистить();
	ТаблицаЦветовТТ.Очистить();
	ВходящиеДанные.Очистить();
	
	//Формирование текста запроса для построения графика
	ТекстЗапроса =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабельРаботы.Период,
	|	ТабельРаботы.Сотрудник,
	|	ТабельРаботы.Сотрудник.ПомощникТУ КАК Помощник,
	|	ТабельРаботы.ТорговаяТочка,
	|	ТабельРаботы.Отсутствие,
	|	СУММА(ТабельРаботы.КоличествоЧасов) КАК КоличествоЧасов,
	|	МАКСИМУМ(ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0)) КАК Порядок,
	|	ТабельРаботы.Сотрудник.Код КАК КодСотрудника,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """""""") КАК СТРОКА(50)) КАК Телефон,
	|	ТабельРаботы.ТорговаяТочка.Наименование,
	|	ТабельРаботы.ТорговаяТочка.ТипРозничнойТочки,
	|	ТабельРаботы.СвойствоСотрудника,
	|	ТабельРаботы.Тренинг,
	|	ТабельРаботы.ЭкстренныйВызов
	|ИЗ
	|	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляКассиров КАК СпецификаФормированияТабеля
	|		ПО ТабельРаботы.Группа = СпецификаФормированияТабеля.Группа
	|			И ТабельРаботы.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботы.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|ГДЕ
	|	ТабельРаботы.Группа = &Группа
	|	И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботы.Период,
	|	ТабельРаботы.Сотрудник,
	|	ТабельРаботы.Сотрудник.ПомощникТУ,
	|	ТабельРаботы.ТорговаяТочка,
	|	ТабельРаботы.Отсутствие,
	|	ТабельРаботы.Сотрудник.Код,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """""""") КАК СТРОКА(50)),
	|	ТабельРаботы.ТорговаяТочка.Наименование,
	|	ТабельРаботы.ТорговаяТочка.ТипРозничнойТочки,
	|	ТабельРаботы.СвойствоСотрудника,
	|	ТабельРаботы.Тренинг,
	|	ТабельРаботы.ЭкстренныйВызов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Если ВариантПостроения = 1  Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабельРаботы.Группа", "ТабельРаботы.ГруппаСотрудника");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабельРаботы.Период,","ТабельРаботы.Период, ТабельРаботы.Группа,");
		
		Если НЕ ИспользоватьОтборы Тогда
			
			//Отбор сотрудников по помощнику
			Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
				//Для управляющего использовать отбор по помощнику если он установлен, иначе отображать данные по группе сотрудника "в целом".
				Если ЗначениеЗаполнено(ТекущийПомощник) Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода","И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода И ТабельРаботы.Сотрудник.ПомощникТУ = &ТекущийПомощник");
				КонецЕсли;
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода","И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода И ТабельРаботы.Сотрудник.ПомощникТУ = &ТекущийПомощник");
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	//Если ВариантПостроения = 1 Тогда  //+++АК mika 2018.08.22 ИП-00019541 Формирования порядка всегда в разрезе групп помощников
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.СпецификаФормированияТабеляКассиров", "РегистрСведений.СпецификаФормированияТабеляКассировПомощники");
	//КонецЕсли;

	//Выполненение запроса построения графика
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	
	СхемаКомпоновкиДанных = ОбъектОбработка.ПолучитьМакет("ГрафикСКД");
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
	
	//Заполнение параметров
    СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Группа").Значение        = ГруппаТорговыхТочек;
	СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение = НачалоДня(Период.ДатаНачала);
	СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение  = НачалоДня(Период.ДатаОкончания);
	
	ПараметрТекущийПомощник =  СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("ТекущийПомощник");
	Если ПараметрТекущийПомощник <> Неопределено Тогда
		ПараметрТекущийПомощник.Значение = ТекущийПомощник;
	КонецЕсли;
	
	ОтборПоТорговойТочке = Ложь;
	Если ИспользоватьОтборы Тогда
		Для каждого ТекущийОтбор Из СписокОтбора.Отбор.Элементы Цикл
			Если ТекущийОтбор.Использование И СокрЛП(ТекущийОтбор.ЛевоеЗначение) = "ТорговаяТочка" Тогда
				ОтборПоТорговойТочке = Истина;
				СписокОтборТТ        = ТекущийОтбор.ПравоеЗначение;
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ТекущийОтбор); 
		КонецЦикла;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	Если ОтборПоТорговойТочке Тогда
		ТаблицаЗначений = ПрименитьОтборПоТорговымТочкам(ТаблицаЗначений, СписокОтборТТ);
	КонецЕсли;
	
	//Заполнение основных таблиц
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		ЗаполнитьЗначенияСвойств(ВходящиеДанные.Добавить(), Строка);
		
		НоваяСтр = ОсновнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр, Строка);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТорговаяТочка"			, Строка.ТорговаяТочка);
		СтруктураДанных.Вставить("ТорговаяТочкаНаименование", Строка.ТорговаяТочкаНаименование);
		СтруктураДанных.Вставить("КоличествоЧасов"			, Строка.КоличествоЧасов);
		СтруктураДанных.Вставить("СвойствоСотрудника"		, Строка.СвойствоСотрудника);
		СтруктураДанных.Вставить("Отсутствие"				, Строка.Отсутствие);
		СтруктураДанных.Вставить("Тренинг"					, Строка.Тренинг);
		СтруктураДанных.Вставить("ЭкстренныйВызов"			, Строка.ЭкстренныйВызов);
		
		Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
		
		НоваяСтр.Представление = Представление;
		
	КонецЦикла;
	
    //Построение графика
	Макет = ОбъектОбработка.ПолучитьМакет("График");
	ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
	ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	ТЗОсновная = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	ТЗСотрудники = ТЗОсновная.Скопировать();
	ТЗСотрудники.Свернуть("Помощник, Сотрудник, Порядок, КодСотрудника, Телефон");
	ТЗСотрудники.Сортировать("Помощник, Порядок");
	КоличествоСотрудников = ТЗСотрудники.Количество();
	
	// Вывод шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	Для Каждого СтрТЗ Из ТЗСотрудники Цикл
		
		ОбластьШапкаСотрудник.Параметры.Сотрудник 		= Строка(СтрТЗ.Сотрудник);
		ОбластьШапкаСотрудник.Параметры.Расшифровка 	= Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", СтрТЗ.Сотрудник, СтрТЗ.КодСотрудника, СтрТЗ.Телефон);
		ОбластьШапкаСотрудник.Параметры.КодСотрудника 	= СтрТЗ.КодСотрудника;
		ОбластьШапкаСотрудник.Параметры.Телефон		  	= СтрТЗ.Телефон;
		ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
		
	КонецЦикла;
		
	ЗаполнитьТаблицуЦветовТТ();
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	
	ТаблицаВыходных = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (ТаблицаВыходных.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период 			= Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью 	= Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		Для Каждого СтрТЗ Из ТЗСотрудники Цикл
			
			ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
			
			НайденныеСтроки = ТЗОсновная.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
			
			Если НайденныеСтроки.Количество()Тогда
				
				СтрокаСДанными = НайденныеСтроки[0];
				
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("ТорговаяТочка"			, СтрокаСДанными.ТорговаяТочка);
				СтруктураДанных.Вставить("ТорговаяТочкаНаименование", СтрокаСДанными.ТорговаяТочкаНаименование);
				СтруктураДанных.Вставить("КоличествоЧасов"			, СтрокаСДанными.КоличествоЧасов);
				СтруктураДанных.Вставить("СвойствоСотрудника"		, СтрокаСДанными.СвойствоСотрудника);
				СтруктураДанных.Вставить("Отсутствие"				, СтрокаСДанными.Отсутствие);
				СтруктураДанных.Вставить("Тренинг"					, СтрокаСДанными.Тренинг);
				СтруктураДанных.Вставить("ЭкстренныйВызов"			, СтрокаСДанными.ЭкстренныйВызов);
				
				Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
				
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = Представление;
				
				НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТорговаяТочка, "ТорговаяТочка");
				Если НайденнаяСтрокаЦвет <> Неопределено Тогда
					ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
				КонецЕсли;
				
			Иначе
				
				// Добавим пустую строку с периодом
				НоваяСтрока = ОсновнаяТаблица.Добавить();
				НоваяСтрока.Сотрудник 	= СтрТЗ.Сотрудник;
				НоваяСтрока.Период 		= НачалоПериода;
				
				СтрВход = ВходящиеДанные.Добавить();
				СтрВход.Сотрудник 	= СтрТЗ.Сотрудник;
				СтрВход.Период 		= НачалоПериода;
				
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
			
			ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = "";
			
		КонецЦикла;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ОсновнаяТаблица.Сортировать("Сотрудник, Период");
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПродавца(Команда)
	
	ПараметрыОтбора = Новый Структура("ЦФО, ТекущийПомощник", ГруппаТорговыхТочек, ТекущийПомощник);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		ДобавитьПервогоПродавцаВГрафик(Результат);
		ИзменитьПорядокПродавцовВТабеле(Результат, ТекущийПродавец);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПервогоПродавцаВГрафик(Результат)
	
	ТабличныйДокумент.Очистить();
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбъектОбработка.ПолучитьМакет("График");
	ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
	ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьШапкаСотрудник.Параметры.Сотрудник 	= Строка(Результат);
	ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Результат, Результат.Код, "");
	ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
	
	ТаблицаВыходных = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (ТаблицаВыходных.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период 			= Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью 	= Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
		
		
		// Добавим пустую строку с периодом
		НоваяСтрока = ОсновнаяТаблица.Добавить();
		НоваяСтрока.Сотрудник 	= Результат;
		НоваяСтрока.Период 		= НачалоПериода;
		
		СтрВход = ВходящиеДанные.Добавить();
		СтрВход.Сотрудник 	= Результат;
		СтрВход.Период 		= НачалоПериода;
		
		ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
		
		ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = "";
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ОсновнаяТаблица.Сортировать("Сотрудник, Период");
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры



&НаКлиенте
Процедура ДобавитьПродавцаСлева(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с кассиром относительно котрой необходимо выполнить действие. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЦФО, ТекущийПомощник", ГруппаТорговыхТочек, ТекущийПомощник);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафике(Результат);
		Если НаличиеСотрудника Тогда
			Предупреждение("В табеле уже присутствует сотрудник " + Результат);
			Возврат;	
		КонецЕсли;
		
		РаздвинутьОбластьНаСервере(НомерВыделеннойКолонки, Результат);
		
		// Порядок
		ИзменитьПорядокПродавцовВТабеле(Результат, ТекущийПродавец);		
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура РаздвинутьОбластьНаСервере(КолонкаИсточник, Сотрудник)
	
	// Заполним пустые строки в Основной таблице
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		НовСтр = ОсновнаяТаблица.Добавить();
		НовСтр.Сотрудник 	= Сотрудник;
		НовСтр.Период 		= НачалоПериода;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	КолонкаПриемник = КолонкаИсточник; 
	
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + КолонкаИсточник), ТабличныйДокумент.Область("C" + КолонкаПриемник), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	//Очистим новую область
	ТекОбласть = ТабличныйДокумент.Область("C"+КолонкаПриемник);
	ТекОбласть.Очистить();
	ТекОбласть.ЦветФона 	= WebЦвета.Белый;
	ТекОбласть.ЦветТекста 	= WebЦвета.Черный;
	
	ТабличныйДокумент.Область("R3"+"C"+КолонкаПриемник).Параметр = Строка(Сотрудник);
	ТабличныйДокумент.Область("R3"+"C"+КолонкаПриемник).Значение = Строка(Сотрудник);
	ТабличныйДокумент.Область("R3"+"C"+КолонкаПриемник).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Сотрудник, Сотрудник.Код, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФизЛица(Команда)
	
	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
		ОткрытьЗначение(ТекущийПродавец);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОтчетПоОтклонениюГрафиковРаботыОтРеальныхВыходов(Команда)
	
	ОткрытьФорму("Отчет.ОтклонениеГрафиковРаботыКассировОтРеальныхВыходов.Форма.ФормаОтчета",, ЭтаФорма);	
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуСпискаГрафика(Команда)
	
	Форма = ПолучитьФорму("РегистрСведений.ТабельРаботыКассиров.Форма.ФормаСписка");
	
	Форма.Список.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = ГруппаТорговыхТочек;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = Период.ДатаНачала;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = КонецДня(Период.ДатаОкончания);
	
	Форма.ТолькоПросмотр = Истина;
	Форма.Открыть();
	форма.ПодчиненныеЭлементы.Список.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьБейджев(Команда)
	
	АдресВоВременномХранилище = ПолучитьАдресВоВременномХранилище();
	
	ПараметрыОткрытия = Новый Структура("Адрес", АдресВоВременномХранилище);
	
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаПодбораПродавцов", ПараметрыОткрытия);
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ТабДокумент = ПолучитьТабличныйДокумент(Результат);
		
		ТабДокумент.ОтображатьСетку 	= Ложь;
		ТабДокумент.Защита 				= Истина;
		ТабДокумент.ТолькоПросмотр 		= Истина;
		ТабДокумент.ОтображатьЗаголовки = Ложь;
		ТабДокумент.Показать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВоВременномХранилище()
	
	МассивФизЛиц = ПолучитьМассивПродавцов();
	
	Адрес = ПоместитьВоВременноеХранилище(МассивФизЛиц);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокумент(МассивФизическихЛиц)
	
	Возврат Обработки.ГрафикРаботыКассиров.СформироватьТабличныйДокумент(МассивФизическихЛиц);
	
КонецФункции


&НаКлиенте
Процедура ПоставитьСотрудникаПеред(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с кассиром относительно котрой необходимо выполнить действие. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	
	ЗначениеОтбора  = Новый Структура("Ссылка", СписокСотрудников);
	ПараметрыВыбора = Новый Структура("Отбор" , ЗначениеОтбора);
	
	//+++АК mika 2018.07.17 ИП-00019209 Исправление ошибки ограничения
	//Результат = ОткрытьФормуМодально("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыВыбора);
	ПараметрыВыбора.Вставить("Список", Истина);
	Результат = ОткрытьФормуМодально("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыВыбора);
	//---АК mika
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		//+++АК mika 2018.07.25 ИП-00019350 Некорректный порядок
		//ПеренестиПродавцаНаСервере(НомерВыделеннойКолонки, Результат);
		Попытка
			ПеренестиПродавцаНаСервере(НомерВыделеннойКолонки, Результат);
		Исключение
			ПоказатьПредупреждение(, СтрЗаменить(" У сотрудника «ФизЛицо» неактуален индекс порядка сортировки!
			                                      |Для актуализации индекса переместите сотрудника к любому другому (предпочтительно выбирать сотрудников справа от вышеуказанного).
												  |(После актуализации индекса появится возможность ставить перед «ФизЛицо» других сотрудников)", "ФизЛицо", Результат));
			Возврат;
		КонецПопытки;
		//---АК mika 
		
		ИзменитьПорядокПродавцовВТабеле(ТекущийПродавец, Результат);
		
	
		ОбновитьГрафикНаСервере();
		ТабличныйДокумент.ФиксацияСлева = 3;
		ТабличныйДокумент.ФиксацияСверху = 5;
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСотрудников()
	
	МассивСотрудников = ПолучитьМассивПродавцов();
	
	СписокСотрудников = Новый СписокЗначений;
	СписокСотрудников.ЗагрузитьЗначения(МассивСотрудников);
	
	Возврат СписокСотрудников;
	
КонецФункции

//////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ГруппаТорговыхТочекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//открыть форму выбора структурных единиц
	ПараметрыОтбора = Новый Структура("НаименованиеГруппы", "Управление розницей.");
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаВыбораСтруктурнойЕдиницы", ПараметрыОтбора);
	
	Если Результат <> Неопределено Тогда
		ГруппаТорговыхТочек = Результат;
		ОчиститьДанныеДаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Сотрудник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ПредставлениеТекущийПродавец = "";
		ТелефонТекущегоПродавца = "";
	Иначе
		Сотрудник = Расшифровка.Сотрудник;
		ПредставлениеТекущийПродавец = Строка(Сотрудник) + ", " + Расшифровка.КодСотрудника;
		ТелефонТекущегоПродавца = Расшифровка.Телефон;
	КонецЕсли;
	
	ТекущийПродавец = Сотрудник;
	
	Элементы.ОсновнаяТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Сотрудник);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ГруппаТорговыхТочек")Тогда
		ГруппаТорговыхТочек = Параметры.ГруппаТорговыхТочек;	
	КонецЕсли;

	Если Параметры.Свойство("ВП")Тогда
		Период.Вариант 			= Параметры.ВП.Вариант;	
		Период.ДатаНачала 		= Макс(Константы.ГраницаЗапретаРедактированияГрафикаПродавцов.Получить() + 86400, НачалоДня(Параметры.ВП.ДатаНачала));		
		Период.ДатаОкончания	= Параметры.ВП.ДатаОкончания;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1) КАК ДатаНачала,
		|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, 2) КАК ДатаОкончания");
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		ГраницаЗапретаРедактирования = Константы.ГраницаЗапретаРедактированияГрафикаПродавцов.Получить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()Тогда
			Период.ДатаНачала = Макс(ГраницаЗапретаРедактирования+86400, НачалоДня(Выборка.ДатаНачала));
			Период.ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьДоступностьЭлементовФормы();
	
	// Скроем кнопки при открытии
	Элементы.ДобавитьПродавца.Видимость 		= Ложь;
	Элементы.ДобавитьПродавцаСлева.Видимость 	= Ложь;
	Элементы.ПоставитьСотрудникаПеред.Видимость = Ложь;
	Элементы.СкопироватьГрафикСДругогоПродавца.Видимость = Ложь;
	
	ЗаполнениеОтветственныхПользователейСервер(); //+++АК mika 2018.02.27 ИП-00016863.04
	
	ОбновитьВидимостьЭлементовФормы();//+++АК mika 2018.02.27 ИП-00016863.04

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЦветовТТ()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.ЦветТорговойТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	Пока Выборка.Следующий()Цикл
		
		ЦветТТ = Выборка.ЦветТорговойТочки.Получить();
		Если ЦветТТ <> Неопределено Тогда
			Если ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка = Выборка.ТорговаяТочка;
				НоваяСтр.Цвет = ЦветТТ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуВыходных(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))");
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	
	ТаблицаВыходных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВыходных;
	
КонецФункции

&НаКлиенте
Процедура ОсновнаяТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеТорговойТочки(СтруктураДанных)
	
	Представление 	   = "";
	СвойствоСотрудника = СтруктураДанных.СвойствоСотрудника;
	
	Если СвойствоСотрудника = 1 Тогда
		Представление = "ст, ";	
	КонецЕсли;
	
	//Если СтруктураДанных.ЭкстренныйВызов Тогда
	//	Представление = "экстр. вызов, ";	
	//КонецЕсли;
	
	ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
	КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
	Отсутствие 		= СтруктураДанных.Отсутствие;
	
	Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
		Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
		//Если СвойствоСотрудника = 0 Тогда 
			Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
		//КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
		Представление = Строка(Отсутствие);
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг)Тогда
		Представление ="Тренинг";
	КонецЕсли;	
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция ПолучитьСвободныеДатыВПериодеРедактирования(Сотрудник)
	
	СвободныеДаты = Новый Массив;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	ТЗ = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Период", Сотрудник, НачалоПериода));
		
		Если Не НайденныеСтроки.Количество() Тогда
			СвободныеДаты.Добавить(НачалоПериода);
		КонецЕсли;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	Возврат СвободныеДаты;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ФормаОбновитьГрафик.Доступность = Не ДанныеИзменены;
	Элементы.ГруппаТорговыхТочек.Доступность = Не ДанныеИзменены;
	
	Элементы.Период.Доступность = Не ДанныеИзменены;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	ЕстьПродавцы = (ОсновнаяТаблица.Количество() > 0);
	
	Элементы.ДобавитьПродавца.Видимость 		= Не ЕстьПродавцы;
	Элементы.ДобавитьПродавцаСлева.Видимость 	= ЕстьПродавцы;
	Элементы.ПоставитьСотрудникаПеред.Видимость = ЕстьПродавцы И ВариантПостроения = 1; //+++АК mika 2018.08.22 ИП-00019541 Оставить возможность перемещения только для Варианта по помощнику
	Элементы.СкопироватьГрафикСДругогоПродавца.Видимость = ЕстьПродавцы;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВТабличномДокументе(ДеньВыхода, Представление = "", ТорговаяТочка = Неопределено)
	
	ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	НомерКолонки = ТекОбл.Лево;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	НомерСтроки 	= 0;
	
	Пока НачалоПериода <= ДеньВыхода Цикл 
		
		НомерСтроки 	= НомерСтроки + 1;
		НачалоПериода 	= НачалоПериода + 86400;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 5;
	
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ТекОбласть.Значение = Представление;
		ТекОбласть.ЦветФона = WebЦвета.Белый;
		
	Иначе                     
		
		ТаблицаЦветов = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
		НайденнаяСтрока = ТаблицаЦветов.Найти(ТорговаяТочка, "ТорговаяТочка");
		Если НайденнаяСтрока = Неопределено Тогда
			ЧерныйЦвет = Новый Цвет(0,0,0);
			ЦветТТ = ТорговаяТочка.ЦветТорговойТочки.Получить();
			Если ЦветТТ <> Неопределено И ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка = ТорговаяТочка;
				НоваяСтр.Цвет = ЦветТТ;
			Иначе
				ЦветТТ = WebЦвета.Белый;
			КонецЕсли;
		Иначе
			ЦветТТ = НайденнаяСтрока.Цвет;
		КонецЕсли;
		
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ТекОбласть.Значение = Представление;
		ТекОбласть.ЦветФона = ЦветТТ;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьМассивПродавцов()
	
	Таб = ОсновнаяТаблица.Выгрузить();
	Таб.Свернуть("Сотрудник");
	Возврат Таб.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции	

&НаСервере
Функция ПроверитьНаличиеСотрудникаВГрафике(Сотрудник)
	
	НаличиеСотрудника = Ложь;
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 1;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = Сотрудник Тогда
			НаличиеСотрудника = Истина;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 1;
		
	КонецЦикла;
	
	Возврат НаличиеСотрудника;
	
КонецФункции

&НаКлиенте
Процедура ТелефонТекущегоПродавцаПриИзменении(Элемент)
	
	ЗаписатьТелефонВКИНаСервере();
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТелефоны(Сотрудник)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТабельРаботы.Телефон) КАК Телефон
	|ИЗ
	|	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботы
	|ГДЕ
	|	ТабельРаботы.Сотрудник = &Сотрудник
	|	И ТабельРаботы.Группа = &Группа
	|	И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода");
	
	Запрос.УстановитьПараметр("Сотрудник"	 , Сотрудник);
	Запрос.УстановитьПараметр("Группа"		 , ГруппаТорговыхТочек);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня(Период.ДатаОкончания));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.Телефон;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьРаботуСотрудниковВДругихГруппах(ТЗ, ГруппаТорговыхТочек, Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗ.Сотрудник КАК ФизическоеЛицо,
	|	ТЗ.Период
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ.ФизическоеЛицо,
	|	ВТ.Период,
	|	ТабельРаботы.Группа
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботы
	|		ПО ВТ.ФизическоеЛицо = ТабельРаботы.Сотрудник
	|			И ВТ.Период = ТабельРаботы.Период
	|			И (ТабельРаботы.Группа <> &Группа)
	|			И (ТабельРаботы.Группа <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|			И (ТабельРаботы.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ТабельРаботы.Группа ЕСТЬ НЕ NULL "
	);
	
	Запрос.УстановитьПараметр("ТЗ"	  , ТЗ);
	Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		Отказ = Истина;
		Сообщить(" - сотрудник " + Выборка.ФизическоеЛицо + " " + Формат(Выборка.Период, "ДЛФ=DD") + " уже работает в группе " + Выборка.Группа + ".");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПродавцаНаСервере(ТекущаяКолонка, ФизЛицо)
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	ИскомаяКолонкаФЛ = 4;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 1;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = ФизЛицо Тогда
			ИскомаяКолонкаФЛ = НачальнаяКолонка;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 1;
		
	КонецЦикла;	
	
	//+++АК mika 2018.07.26 ИП-00019193 Исправление алгоритма переноса сотрудников, если к-во колонок превышает 1000
	
	//ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка), ТабличныйДокумент.Область("C" + ИскомаяКолонкаФЛ), ТипСмещенияТабличногоДокумента.ПоВертикали);
	//
	////Удалим область
	//Если ТекущаяКолонка > ИскомаяКолонкаФЛ Тогда
	//	ТекущаяКолонка = ТекущаяКолонка+1;
	//	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C"+ТекущаяКолонка), ТипСмещенияТабличногоДокумента.ПоВертикали);
	//Иначе
	//	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C"+ТекущаяКолонка), ТипСмещенияТабличногоДокумента.ПоВертикали);
	//КонецЕсли;
	
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + Формат(ТекущаяКолонка, "ЧГ=0")), ТабличныйДокумент.Область("C" + Формат(ИскомаяКолонкаФЛ, "ЧГ=0")), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	//Удалим область
	Если ТекущаяКолонка > ИскомаяКолонкаФЛ Тогда
		ТекущаяКолонка = ТекущаяКолонка+1;
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C"+Формат(ТекущаяКолонка,"ЧГ=0")), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C"+Формат(ТекущаяКолонка,"ЧГ=0")), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	//---АК mika 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольПереработки()
	
	ТЗ = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	ТЗ_ТорговыеТочки = ТЗ.Скопировать();
	ТЗ_ТорговыеТочки.Свернуть("Период, Сотрудник, ТорговаяТочка");
	ТЗ_ТорговыеТочки.Сортировать("Сотрудник, Период");
	
	Сотрудник = Неопределено;
	СчНепрерывногоЦикла = 0;
	МассивСотрудников = Новый Массив;
	
	Для Каждого СтрТЗ Из ТЗ_ТорговыеТочки Цикл
		
		Если Сотрудник <> СтрТЗ.Сотрудник Тогда
			Сотрудник = СтрТЗ.Сотрудник;
			СчНепрерывногоЦикла = 0;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрТЗ.ТорговаяТочка)Тогда
			СчНепрерывногоЦикла = 0;
			Продолжить;
		КонецЕсли;
		
		СчНепрерывногоЦикла = СчНепрерывногоЦикла + 1;
		
		Если СчНепрерывногоЦикла > 5 Тогда
			Если МассивСотрудников.Найти(Сотрудник)=Неопределено Тогда
				МассивСотрудников.Добавить(Сотрудник);	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрМассива Из МассивСотрудников Цикл
		Сообщить("У физического лица " + СтрМассива + " имеется непрерывный цикл работы более 5 дней", СтатусСообщения.Внимание);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеОПорядкеВывода()
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	НомерПП = 1;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 1;
			Продолжить;
		КонецЕсли;
		
		//+++АК mika 2018.07.17 ИП-00019209
		//Запись = РегистрыСведений.СпецификаФормированияТабеляКассиров.СоздатьМенеджерЗаписи();
		Если ВариантПостроения = 1 Тогда
			Запись = РегистрыСведений.СпецификаФормированияТабеляКассировПомощники.СоздатьМенеджерЗаписи();
		Иначе
			Запись = РегистрыСведений.СпецификаФормированияТабеляКассиров.СоздатьМенеджерЗаписи();
		КонецЕсли;
		//---АК mika 

		Запись.Группа 		  = ГруппаТорговыхТочек;
		Запись.ФизическоеЛицо = Расшифровка.Сотрудник;
		Запись.Порядок 		  = НомерПП;
		
		Попытка
			Запись.Записать();
		Исключение
		КонецПопытки;
		
		НачальнаяКолонка = НачальнаяКолонка + 1;
		НомерПП = НомерПП + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеДаСервере()
	
	ТабличныйДокумент.Очистить();
	ОсновнаяТаблица.Очистить();
	ТаблицаЦветовТТ.Очистить();
	ВходящиеДанные.Очистить();
	ПорядокФормированияТабеля.Очистить();
	
	ПредставлениеТекущийПродавец = "";
	ТекущийПродавец = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТелефонТекущегоПродавца = "";
	
	Элементы.ДобавитьПродавца.Видимость 		= Ложь;
	Элементы.ДобавитьПродавцаСлева.Видимость 	= Ложь;
	Элементы.ПоставитьСотрудникаПеред.Видимость = Ложь;
	Элементы.СкопироватьГрафикСДругогоПродавца.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОчиститьДанныеДаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТелефонВКИНаСервере()
	
	Если ЗначениеЗаполнено(ТелефонТекущегоПродавца)
			И ЗначениеЗаполнено(ТекущийПродавец) Тогда
		
		ЗаписьКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		
		ЗаписьКИ.Объект 	= ТекущийПродавец;
		ЗаписьКИ.Вид 		= Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный;
		ЗаписьКИ.Тип    	= Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		ЗаписьКИ.Поле3 	= ТелефонТекущегоПродавца;
		ЗаписьКИ.Представление = ТелефонТекущегоПродавца;
		
		Попытка
			ЗаписьКИ.Записать();
		Исключение
		КонецПопытки;
		
		ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		НомерКолонки = ТекОбл.Лево;
		
		ТекОбласть = ТабличныйДокумент.Область(5, НомерКолонки,5, НомерКолонки);
		ТекОбласть.Значение = ТелефонТекущегоПродавца;
		
		Расшифровка = ТабличныйДокумент.Область(3, НомерКолонки, 3, НомерКолонки).Расшифровка;
		
		Если ТипЗнч(Расшифровка) = Тип("ФиксированнаяСтруктура") тогда
			ТабличныйДокумент.Область(3, НомерКолонки, 3, НомерКолонки).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Расшифровка.Сотрудник, Расшифровка.КодСотрудника, ТелефонТекущегоПродавца);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	ТекДанныеПредставление = ТекДанные.Представление;
	
	Если Текст <> "" Тогда
		
		ТекстКОбработке = НРег(Текст);
		ТекстКОбработке = СтрЗаменить(ТекстКОбработке, ".", ",");
		
		Если Найти(ТекстКОбработке, "ст,") Тогда
			ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "ст,", ""));
			СвойствоСотрудника = 1;
		Иначе
			СвойствоСотрудника = 0;
		КонецЕсли;
		
		СписокТТ = Новый СписокЗначений;
		СписокТТ.ЗагрузитьЗначения(ПолучитьМассивВариантов(ТекстКОбработке));
		
		Если СписокТТ.Количество() = 1 Тогда
			ВыбранноеЗначение = СписокТТ[0];
		Иначе	
			ВыбранноеЗначение = ВыбратьИзСписка(СписокТТ);
		КонецЕсли;	
		
		Если ВыбранноеЗначение <> Неопределено Тогда
		
			ДанныеВыбораПользователя = ВыбранноеЗначение.Значение;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Сотрудник"		 , ТекущийПродавец);
			СтруктураДанных.Вставить("ТорговаяТочка"	 , ДанныеВыбораПользователя);
			СтруктураДанных.Вставить("СвойствоСотрудника", СвойствоСотрудника);
			
			УдалитьТренинг = Неопределено;
			Если ЗначениеЗаполнено(ТекДанные.Тренинг) Тогда
				УдалитьТренинг = ТекДанные.Тренинг;
			КонецЕсли; 
			СтруктураДанных.Вставить("Удаление"			, УдалитьТренинг);
			
			Представление	 	= "";
			ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
			СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
			
			Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
				
				Если СвойствоСотрудника = 1 Тогда
					Представление = "ст, ";
				КонецЕсли;
				
				ТекДанныеПредставление = Представление + Строка(ТорговаяТочка);
			КонецЕсли;
			
			СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
			ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
			
		КонецЕсли;
	Иначе
		ТекДанныеПредставление = "";
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Сотрудник"	, ТекущийПродавец);
		СтруктураДанных.Вставить("ТорговаяТочка", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
		СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
		ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
	КонецЕсли;
	
	ТекДанные.Представление = ТекДанныеПредставление;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВариантов(Текст)
	
	Если Найти("1234567890", Лев(Текст, 1)) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Наименование ПОДОБНО &ТекстПоиска + ""%""");
		
		Запрос.УстановитьПараметр("ТекстПоиска", Текст);
		МассивВариантов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	
		
	Иначе
		
		МассивВариантов = Новый Массив;
		
		СтруктураПеречислений = Новый Структура();
		Для Каждого Стр Из Метаданные.Перечисления.ВидыОтсутствия.ЗначенияПеречисления Цикл
			
			СтруктураПеречислений.Вставить(Стр.Имя, Перечисления.ВидыОтсутствия[Стр.Имя]);	
			
		КонецЦикла;
		
		Для Каждого СтрокаСтр Из СтруктураПеречислений Цикл
			
			Если Найти(ВРег(СтрокаСтр.Ключ), ВРег(Текст)) Тогда
				МассивВариантов.Добавить(СтрокаСтр.Значение);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВариантов;
	
КонецФункции

&НаКлиенте
Процедура ОсновнаяТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных)
	
	МассивСтрок = Элементы.ОсновнаяТаблица.ВыделенныеСтроки;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекСтр = ОсновнаяТаблица.НайтиПоИдентификатору(СтрокаМассива);
		
		СтруктураДанных.Вставить("Период", ТекСтр.Период);
		
		Если Не ЗаписатьИзмененияВРегистр(СтруктураДанных) Тогда
			Если  СтруктураДанных.Свойство("Удаление") Тогда
				Если ЗначениеЗаполнено(СтруктураДанных.Удаление) Тогда
					СпрОб=СтруктураДанных.Сотрудник.ПолучитьОбъект();
					
					НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения",СтруктураДанных.Удаление,СтруктураДанных.Период));
					Если НайденнаяСтрока.Количество() Тогда
						
						СпрОб.ПройденныеТренинги.Удалить(НайденнаяСтрока[0]);
					КонецЕсли;
					СпрОб.Записать();
				КонецЕсли; 
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураДанных);
			ТекСтр.Представление = СтруктураДанных.Представление;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, СтруктураДанных.Представление, СтруктураДанных.ТорговаяТочка);
		Иначе	
			Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьИзмененияВРегистр(ПараметрыСотрудника)

	ОшибкиПриЗаписи = Ложь;
	
	// РАБОТА В ДРУГОЙ ГРУППЕ
	Если ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТабельРаботы.Группа
		|ИЗ
		|	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботы
		|ГДЕ
		|	ТабельРаботы.Сотрудник = &Сотрудник
		|	И ТабельРаботы.Период = &Период
		|	И ТабельРаботы.Группа <> &Группа
		|	И ТабельРаботы.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)");
		
		Запрос.УстановитьПараметр("Сотрудник", 	ТекущийПродавец);
		Запрос.УстановитьПараметр("Группа", 	ГруппаТорговыхТочек);
		Запрос.УстановитьПараметр("Период", 	ПараметрыСотрудника.Период);
		
		//+++АК mika 2018.02.09 ИП-00016863.02
		Если ВариантПостроения = 1 Тогда
			Запрос.УстановитьПараметр("Группа", ПараметрыСотрудника.ГруппаНовая);
		КонецЕсли;
		//---АК mika

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий()Цикл
			ОшибкиПриЗаписи = Истина;
			Сообщить(" - сотрудник " + ТекущийПродавец + " " + Формат(ПараметрыСотрудника.Период, "ДЛФ=DD") + " уже работает в группе " + Выборка.Группа + ".");
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОшибкиПриЗаписи Тогда
		Возврат ОшибкиПриЗаписи;
	КонецЕсли;
	
	// Очистим запись по полям Период, Группа, Сотрудник
	Если ЗначениеЗаполнено(ПараметрыСотрудника.Период) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ПараметрыСотрудника.Сотрудник)Тогда
		
		НЗ = РегистрыСведений.ТабельРаботыКассиров.СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(ПараметрыСотрудника.Период);
		НЗ.Отбор.Сотрудник.Установить(ПараметрыСотрудника.Сотрудник);
		НЗ.Отбор.Группа.Установить(ГруппаТорговыхТочек);
		НЗ.Записать();
		
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) ИЛИ ЗначениеЗаполнено(ПараметрыСотрудника.Отсутствие)   ИЛИ ЗначениеЗаполнено(ПараметрыСотрудника.Тренинг) Тогда	
		
		Запись = РегистрыСведений.ТабельРаботыКассиров.СоздатьМенеджерЗаписи();
		Запись.Группа 	 = ГруппаТорговыхТочек;
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыСотрудника);
		
		//+++АК mika 2018.05.24 ИП-00018578 Добавлена проверка для Помощников Развития
		//////+++АК mika 2017.12.27 ИП-00016863.01 
		////Если ВариантПостроения = 1 Тогда
		////	Запись.Группа = ПараметрыСотрудника.ГруппаНовая;
		////КонецЕсли;
		////
		//////Добавление группы ЦФО по помощнику управляющего
		////Запись.ГруппаСотрудника = РегистрыСведений.ПользователиПоЦФО.ПолучитьЦФОПомощникаУправляющего(Запись.Сотрудник);
		//////---АК mika ИП-00016863.01
		Если ВариантПостроения = 1 Тогда
			Запись.Группа = ПараметрыСотрудника.ГруппаНовая;
			Запись.ГруппаСотрудника = ГруппаТорговыхТочек;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Запись.ГруппаСотрудника) Тогда
			Запись.ГруппаСотрудника = РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(Запись.Сотрудник, Истина, Истина); 
		КонецЕсли;
		//---АК mika 
		
		Попытка
			Запись.Записать();
		Исключение
			ОшибкиПриЗаписи = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	//mind 2017-09-12 журнал переделан на универсальный и запись производит из модуля
	//// Добавим запись в журнал
	//ЗаписьЖурнала = РегистрыСведений.ЖурналИзмененийТабеляРаботыКассиров.СоздатьМенеджерЗаписи();
	//ЗаписьЖурнала.ДатаИзменения 	= ТекущаяДата();
	//ЗаписьЖурнала.Пользователь  	= ПараметрыСеанса.ТекущийПользователь;
	//ЗаписьЖурнала.Группа 			= ГруппаТорговыхТочек;
	//ЗаписьЖурнала.Дата				= ПараметрыСотрудника.Период;
	//ЗаписьЖурнала.СвойствоПродавца 	= ПараметрыСотрудника.СвойствоСотрудника;
	//ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, ПараметрыСотрудника);
	//
	//Попытка
	//	ЗаписьЖурнала.Записать();
	//Исключение
	//КонецПопытки;
	
	ПараметрыСотрудника.Вставить("ОшибкиПриЗаписи", ОшибкиПриЗаписи);  //+++АК mika 2018.03.26 ИП-00018195

	Возврат ОшибкиПриЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ОсновнаяТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиНаСервере();
	
	ОшибкиПриУдалении = Ложь;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Сотрудник"	, ТекущийПродавец);
	СтруктураДанных.Вставить("Группа"		, ГруппаТорговыхТочек);
	СтруктураДанных.Вставить("ТорговаяТочка", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	МассивВыделенныхСтрок = Элементы.ОсновнаяТаблица.ВыделенныеСтроки;
	
	Для Каждого СтрокаМассива Из МассивВыделенныхСтрок Цикл
		
		ТекСтр = ОсновнаяТаблица.НайтиПоИдентификатору(СтрокаМассива);
		
		СтруктураДанных.Вставить("Период", 	ТекСтр.Период);
		
		//+++АК mika 2018.02.09 ИП-00016863.02
		Если ВариантПостроения = 1 Тогда
			
			СтруктураДанных.Вставить("ГруппаСтарая", ТекСтр.Группа);
			
			ТекСтр.Группа = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			
			ОчиститьЗаписиПоСтаройГруппеТорговыхТочек(СтруктураДанных);
			
		КонецЕсли;
		//---АК mika

		// Очистим запись по полям Период, Группа, Сотрудник
		Если ЗначениеЗаполнено(СтруктураДанных.Период) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(СтруктураДанных.Сотрудник) И ВариантПостроения = 0 Тогда //+++АК mika 2018.02.09 ИП-00016863.02 Добавлено "И ВариантПостроения = 0", данная очистка актуальна только для "стандартного алгоритма".
			
			НЗ = РегистрыСведений.ТабельРаботыКассиров.СоздатьНаборЗаписей();
			НЗ.Отбор.Период.Установить(СтруктураДанных.Период);
			НЗ.Отбор.Сотрудник.Установить(СтруктураДанных.Сотрудник);
			НЗ.Отбор.Группа.Установить(ГруппаТорговыхТочек);
			
			Попытка
				НЗ.Записать();
			Исключение
				ОшибкиПриУдалении = Истина;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтр.Тренинг) Тогда
			СпрОб=ТекущийПродавец.ПолучитьОбъект();
		
			НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения",ТекСтр.Тренинг,ТекСтр.Период));
			Если НайденнаяСтрока.Количество() Тогда
				
				СпрОб.ПройденныеТренинги.Удалить(НайденнаяСтрока[0]);
			КонецЕсли;
			СпрОб.Записать();
		
		КонецЕсли; 
		
		//mind 2017-09-12 журнал переделан на универсальный и запись производит из модуля
		//// Добавим запись в журнал
		//ЗаписьЖурнала = РегистрыСведений.ЖурналИзмененийТабеляРаботыКассиров.СоздатьМенеджерЗаписи();
		//ЗаписьЖурнала.ДатаИзменения = ТекущаяДата();
		//ЗаписьЖурнала.Пользователь  = ПараметрыСеанса.ТекущийПользователь;
		//ЗаписьЖурнала.Группа 		= ГруппаТорговыхТочек;
		//ЗаписьЖурнала.Дата			= СтруктураДанных.Период;
		//ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураДанных);
		//
		//Попытка
		//	ЗаписьЖурнала.Записать();
		//Исключение
		//КонецПопытки;
		
		//
		Если Не ОшибкиПриУдалении Тогда
			
			ТекСтр.ТорговаяТочка = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
			ТекСтр.Представление = "";
			ТекСтр.Отсутствие	 = ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка");
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПродавцовВТабеле_Отключена(НовоеФизЛицо, ТекущееФизЛицо) //+++АК mika 2018.08.22 ИП-00019541 процедура отключена
	
	ТЗПорядок = РеквизитФормыВЗначение("ПорядокФормированияТабеля");
	ТЗПорядок.Сортировать("Порядок");
	
	НайденнаяСтрока = ТЗПорядок.Найти(ТекущееФизЛицо, "ФизическоеЛицо");
	Если НайденнаяСтрока = Неопределено Тогда
		ПорядокТекПродавца = 1;
	Иначе	
		ПорядокТекПродавца = НайденнаяСтрока.Порядок;
	КонецЕсли;
	
	ВсегоСтрок = ТЗПорядок.Количество()-1;
	
	Для Каждого Стр Из ТЗПорядок Цикл
		
		Если ПорядокТекПродавца <= Стр.Порядок Тогда
			
			Стр.Порядок = Стр.Порядок + 1;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	// Если продавец был в ТЗ то присвоим ему порядок текущего продавца
	СтрНовогоФЛ =  ТЗПорядок.Найти(НовоеФизЛицо, "ФизическоеЛицо");
	Если СтрНовогоФЛ = Неопределено Тогда
		НовСтр = ТЗПорядок.Добавить();
		НовСтр.ФизическоеЛицо = НовоеФизЛицо;
		НовСтр.Порядок = ПорядокТекПродавца;
	Иначе
		СтрНовогоФЛ.Порядок = ПорядокТекПродавца;
	КонецЕсли;
	
	ТЗПорядок.Сортировать("Порядок");
	Порядок = 1;
	Для Каждого Стр Из ТЗПорядок Цикл
		Стр.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	// Запишем в регистр
	
	//+++АК mika 2018.07.17 ИП-00019209
	//НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляКассиров.СоздатьНаборЗаписей();
	Если ВариантПостроения = 1 Тогда
		НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляКассировПомощники.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляКассиров.СоздатьНаборЗаписей();
	КонецЕсли;
	//---АК mika 
	
	НаборЗаписей.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	
	Для Каждого Стр Из ТЗПорядок Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Группа = ГруппаТорговыхТочек;
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ЗначениеВРеквизитФормы(ТЗПорядок, "ПорядокФормированияТабеля");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПродавцовВТабеле(НовоеФизЛицо, ТекущееФизЛицо) //+++АК mika 2018.08.22 Формирование порядка всегда в разрезе помощника 
	
	//Заполнять порядок в момент изменения состава перечня сотрудников 
	//(т.к. за время отображения другие момощники могут перестроить порядок) 
	ОбновитьТаблицуСпецификиФормирования(); 
	
	ТЗПорядок = РеквизитФормыВЗначение("ПорядокФормированияТабеля");
	
	НайденнаяСтрока = ТЗПорядок.Найти(ТекущееФизЛицо, "ФизическоеЛицо");
	Если НайденнаяСтрока = Неопределено Тогда
		ПорядокТекПродавца = 1;
	Иначе	
		ПорядокТекПродавца = НайденнаяСтрока.Порядок;
	КонецЕсли;
	
	ВсегоСтрок = ТЗПорядок.Количество()-1;
	
	Для Каждого Стр Из ТЗПорядок Цикл
		
		Если ПорядокТекПродавца <= Стр.Порядок Тогда
			
			Стр.Порядок = Стр.Порядок + 1;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	// Если продавец был в ТЗ то присвоим ему порядок текущего продавца
	СтрНовогоФЛ =  ТЗПорядок.Найти(НовоеФизЛицо, "ФизическоеЛицо");
	Если СтрНовогоФЛ = Неопределено Тогда
		НовСтр = ТЗПорядок.Добавить();
		НовСтр.ФизическоеЛицо = НовоеФизЛицо;
		НовСтр.Порядок = ПорядокТекПродавца;
	Иначе
		СтрНовогоФЛ.Порядок = ПорядокТекПродавца;
	КонецЕсли;
	
	ТЗПорядок.Сортировать("Порядок");
	Порядок = 1;
	Для Каждого Стр Из ТЗПорядок Цикл
		Стр.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// Обновление регистра
	
	//+++АК mika 2018.08.22 ИП-00019541 Формирования порядка всегда в разрезе групп помощников  
	НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляКассировПомощники.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	
	Для Каждого Стр Из ТЗПорядок Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Группа = ГруппаТорговыхТочек;
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ЗначениеВРеквизитФормы(ТЗПорядок, "ПорядокФормированияТабеля");
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГрафикСДругогоПродавца(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с продавцом для которго необходимо скопировать график. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	
	ЗначениеОтбора = Новый Структура("Ссылка", СписокСотрудников);
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	
	//+++АК mika 2018.07.17 ИП-00019209 Исправление ошибки ограничения
	//Результат = ОткрытьФормуМодально("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыВыбора);
	ПараметрыВыбора.Вставить("Список", Истина);
	Результат = ОткрытьФормуМодально("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыВыбора);
	//---АК mika
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		ПараметрыОткрытия = Новый Структура("ФизическоеЛицо, НачалоПериода, КонецПериода", Результат, Период.ДатаНачала, Период.ДатаОкончания);
		
		ДанныеКопирования = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаКопированияГрафика", ПараметрыОткрытия, ЭтаФорма);
		
		Если ТипЗнч(ДанныеКопирования) = Тип("Структура")Тогда
			
			СкопироватьГрафикСДругогоПродавцаНаСервере(ДанныеКопирования);
			
			ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьГрафикСДругогоПродавцаНаСервере(ДанныеКопирования)
	
	ТЗ = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	ТаблицаДанных = ТЗ.СкопироватьКолонки("Период,ТорговаяТочка,Представление,Тренинг");
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Сотрудник", ТекущийПродавец);
	СтруктураДанных.Вставить("ТорговаяТочка");
	СтруктураДанных.Вставить("Представление");
	СтруктураДанных.Вставить("Отсутствие");
	СтруктураДанных.Вставить("Тренинг");
	СтруктураДанных.Вставить("СвойствоСотрудника");
	
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник", ДанныеКопирования.ФизическоеЛицо));
	Если НайденныеСтроки.Количество()Тогда
		
		НП = НачалоДня(ДанныеКопирования.НачалоПериода);
		КП = КонецДня(ДанныеКопирования.КонецПериода);
		
		Для Каждого СтрокаМассива Из НайденныеСтроки Цикл
			
			Если СтрокаМассива.Период >= НП И СтрокаМассива.Период <= КП Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Кассир с которого производится копирование не найден в графике");
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДанных.Количество()Тогда
		
		Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
			
			Строки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Период", ТекущийПродавец, СтрокаТЗ.Период));
			Если Строки.Количество()Тогда
				
				СтруктураДанных.Вставить("Период", СтрокаТЗ.Период);
				
				ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаТЗ);
				
				Если Не ЗаписатьИзмененияВРегистр(СтруктураДанных) Тогда
					
					ИскомаяСтрока = Строки[0];
					Если ЗначениеЗаполнено(ИскомаяСтрока.Тренинг) Тогда
						СпрОб = ТекущийПродавец.ПолучитьОбъект();
						
						НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения",ИскомаяСтрока.Тренинг,ИскомаяСтрока.Период));
						Если НайденнаяСтрока.Количество() Тогда
							
							СпрОб.ПройденныеТренинги.Удалить(НайденнаяСтрока[0]);
						КонецЕсли;
						СпрОб.Записать();
					КонецЕсли;	
					
					ЗаполнитьЗначенияСвойств(ИскомаяСтрока, СтрокаТЗ);
					
					Если ЗначениеЗаполнено(ИскомаяСтрока.Тренинг) Тогда
						СпрОб = ТекущийПродавец.ПолучитьОбъект();
						
						НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения",ИскомаяСтрока.Тренинг,ИскомаяСтрока.Период));
						Если Не НайденнаяСтрока.Количество() Тогда
							
							НоваяСтрока = СпрОб.ПройденныеТренинги.Добавить();
							
							НоваяСтрока.Тренинг 		= ИскомаяСтрока.Тренинг;
							НоваяСтрока.ДатаПрохождения = ИскомаяСтрока.Период;
							НоваяСтрока.ТренингПройден 	= Истина;

						КонецЕсли;
						СпрОб.Записать();
					
					КонецЕсли; 
					
					
					ОбновитьДанныеВТабличномДокументе(СтрокаТЗ.Период, СтруктураДанных.Представление, СтруктураДанных.ТорговаяТочка);
				Иначе	
					Сообщить("Данные за период " + Формат(СтрокаТЗ.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТЗ, "ОсновнаяТаблица");
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
		
		ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;  
		
		ТТ = ТекДанные.ТорговаяТочка;
		Отсутствие 		 = ТекДанные.Отсутствие;
		КоличествоЧасов  = ТекДанные.КоличествоЧасов;
		СвойствоСотрудника = ТекДанные.СвойствоСотрудника;
		
		ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов,ТекДата,Тренинг, ЭкстренныйВызов",
										ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов,Элементы.ОсновнаяТаблица.ТекущиеДанные.Период
										,ТекДанные.Тренинг, ТекДанные.ЭкстренныйВызов);
		
		Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
		
		Если ТипЗнч(Результат) = Тип("Структура")Тогда
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
			СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
			СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
			СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
			СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
			СтруктураДанных.Вставить("Тренинг", 	Результат.Тренинг);
			СтруктураДанных.Вставить("ЭкстренныйВызов", 	Результат.ЭкстренныйВызов);
			
			
			Представление	 	= "";
			ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
			Отсутствие 		 	= СтруктураДанных.Отсутствие;
			КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
			СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
			
			Если ЗначениеЗаполнено(Отсутствие)Тогда
			
				Представление = Строка(Отсутствие);	
			
			ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
				
				Если СвойствоСотрудника = 1 Тогда
					Представление = "ст, ";
				КонецЕсли;
				
				//Если СтруктураДанных.ЭкстренныйВызов Тогда
				//	Представление = "экстр. вызов, ";	
				//КонецЕсли;
				
				Представление = Представление + Строка(ТорговаяТочка);
			ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
				Представление="Тренинг";
			КонецЕсли;
			          
			Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) Тогда
				Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
			КонецЕсли;
			
			СтруктураДанных.Вставить("Представление", Представление);
			
			//ТекДанные.Представление = Представление; +++АК mika 2018.03.26 ИП-00018195 (Менять представление только в случае успешной записи)
			
			ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
			
			//+++АК mika 2018.03.26 ИП-00018195 (Менять представление только в случае успешной записи)
			Если НЕ СтруктураДанных.Свойство("ОшибкиПриЗаписи") ИЛИ НЕ СтруктураДанных.ОшибкиПриЗаписи Тогда
				ТекДанные.Представление = Представление; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//+++АК mika 2018.02.09 ИП-00016863.02
	Если ТекущийПомощник <> ТекущийПомощникАвто И НЕ ЗначениеЗаполнено(ТекущийУправляющий) Тогда
		Сообщить(НСтр("ru = 'Запрещено редактировать данные по сотрудникам других помощников!';"));
		Возврат;
	КонецЕсли;
	//---АК mika ИП-00016863.02

	//
	ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ТТ = ТекДанные.ТорговаяТочка;
	Отсутствие = ТекДанные.Отсутствие;
	КоличествоЧасов  = ТекДанные.КоличествоЧасов;
	СвойствоСотрудника = ТекДанные.СвойствоСотрудника;
	
	ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов,Тренинг,ТекДата, ЭкстренныйВызов",
										ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов,ТекДанные.Тренинг,ТекДанные.Период, ТекДанные.ЭкстренныйВызов);
	
	//+++АК mika 2018.02.09 ИП-00016863.02
	Если ВариантПостроения = 1 Тогда
		
		ПараметрыОткрытия = Новый Структура("Сотрудник, ТорговаяТочка, Отсутствие, СвойствоСотрудника, КоличествоЧасов,ТекДата,Тренинг, ЭкстренныйВызов, Группа, ГруппаПомощника, ВариантПостроения",
		ТекущийПродавец, ТТ, Отсутствие, СвойствоСотрудника, КоличествоЧасов,Элементы.ОсновнаяТаблица.ТекущиеДанные.Период,ТекДанные.Тренинг, ТекДанные.ЭкстренныйВызов, ТекДанные.Группа, ГруппаТорговыхТочек, 1);
		
	КонецЕсли;
	//---АК mika
	
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
	
	Если ТипЗнч(Результат) = Тип("Структура")Тогда
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
		СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
		СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
		СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
		СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
		СтруктураДанных.Вставить("Тренинг", Результат.Тренинг);
		СтруктураДанных.Вставить("ЭкстренныйВызов", Результат.ЭкстренныйВызов);
		
		//+++АК mika 2018.02.09 ИП-00016863.02
		Если ВариантПостроения = 1 Тогда
			СтруктураДанных.Вставить("ГруппаНовая", 	Результат.ГруппаНовая)
		КонецЕсли;

		Представление	 	= "";
		ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
		Отсутствие 		 	= СтруктураДанных.Отсутствие;
		КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
		СвойствоСотрудника  = СтруктураДанных.СвойствоСотрудника;
		
		Если ЗначениеЗаполнено(Отсутствие)Тогда
			
			Представление = Строка(Отсутствие);	
			
		ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
			
			Если СвойствоСотрудника = 1 Тогда
				Представление = Представление + "ст, ";	
			КонецЕсли;
			
			//Если СтруктураДанных.ЭкстренныйВызов Тогда
			//	Представление = Представление + "экстр. вызов, ";	
			//КонецЕсли;
			
			Представление = Представление + Строка(ТорговаяТочка);
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
			Представление="Тренинг";	
			
		КонецЕсли;
		
		Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
		КонецЕсли;
		
		СтруктураДанных.Вставить("Представление", Представление);
		
		//ТекДанные.Представление = Представление; +++АК mika 2018.03.26 ИП-00018195 (Менять представление только в случае успешной записи)
		
		ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
		
		//+++АК mika 2018.03.26 ИП-00018195 (Менять представление только в случае успешной записи)
		Если НЕ СтруктураДанных.Свойство("ОшибкиПриЗаписи") ИЛИ НЕ СтруктураДанных.ОшибкиПриЗаписи Тогда
			ТекДанные.Представление = Представление; 
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписиГрафика(Команда)
	
	УдалитьЗаписиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ТекущийПродавец)
			И ТабличныйДокумент.ТекущаяОбласть.верх = 3 Тогда
	    СтандартнаяОбработка = Ложь;
		СтруктураЗаполнения = Новый Структура("Продавец", ТекущийПродавец);
		//Период1=ПолучитьПоследнююДату(ТекущийПродавец);
		//Если Период1=Неопределено Тогда
		//	Период1=НачалоДня(ТекущаяДата());
		//Иначе	
		//	Ответ = Вопрос("Внести новую запись по статусу?", РежимДиалогаВопрос.ДаНет);

		//	Если (Ответ = КодВозвратаДиалога.Да) Тогда
		//		Период1=НачалоДня(ТекущаяДата());
		//	КонецЕсли; 
		//КонецЕсли; 
		//СтруктураЗаполнения.Вставить("Период",Период1);
		ОткрытьФормуЗаписи(СтруктураЗаполнения);	                              
	
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Процедура ОткрытьФормуЗаписи(СтруктураЗаполнения)
	
	Если НЕ ЕстьЗапись(СтруктураЗаполнения) Тогда
		СтруктураДанных = Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения);		
	Иначе
		ЭтотМассив = Новый Массив;
		ЭтотМассив.Добавить(СтруктураЗаполнения);
		КлючЗаписи = Новый("РегистрСведенийКлючЗаписи.СтатусыПродавцов", ЭтотМассив);
		СтруктураДанных = Новый Структура("Ключ,ОграничитьДоступность", КлючЗаписи, Истина)		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.СтатусыПродавцов.ФормаЗаписи", СтруктураДанных, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнююДату(ТекущийПродавец)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	, ТекущаяДата());
	Запрос.УстановитьПараметр("Продавец", ТекущийПродавец);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыПродавцовСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.СтатусыПродавцов.СрезПоследних(&Дата, Продавец = &Продавец) КАК СтатусыПродавцовСрезПоследних";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Период;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьЗапись(СтруктураЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Продавец", СтруктураЗаполнения.Продавец);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыПродавцов.Продавец
	|ИЗ
	|	РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцов
	|ГДЕ
	|	 СтатусыПродавцов.Продавец = &Продавец";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВариантПостроенияПриИзменении(Элемент) //+++АК mika 2018.02.09 ИП-00016863.02 
												   
	Если ОсновнаяТаблица.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросСменитьВариантПостроленияЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные будут очищены! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
		
	Иначе
		
		ОбновитьГруппуТорговыхТочекКлиент();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросСменитьВариантПостроленияЗавершение(Результат, ДопПараметры) Экспорт //+++АК mika 2018.02.09 ИП-00016863.02
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОбновитьГруппуТорговыхТочекКлиент();
		
		ОчиститьДанныеДаСервере();
		
	Иначе
		
		ВариантПостроения = ВариантПостроения <> 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обновление видимость и доступность элементов формы для помощников ТУ
// Помощники ТУ должны иметь возможность формировать график с отбором по стандартному алгоритму (ЦФО торговых точек),
// а такжепо ЦФО, к котрому привязаны его подчиенные сотрудники (физ. лицо "продавец", реквизит ПомощникТУ)
//
Процедура ОбновитьВозможностьИзмененияВариантаПостроения(ОбновитьГруппу) //+++АК mika 2017.02.09 ИП-00016863.02

	РасширенныйВариант = ЗначениеЗаполнено(ТекущийПомощник) ИЛИ ЗначениеЗаполнено(ТекущийУправляющий) ИЛИ РольДоступна("ПолныеПрава");
	
	Элементы.ВариантПостроения.Видимость = РасширенныйВариант;
	
	Если НЕ РасширенныйВариант Тогда
		ВариантПостроения = 0;
	Иначе
		ВариантПостроения = 1;
		Если ОбновитьГруппу Тогда
			ГруппаТорговыхТочек = ПолучитьГруппуТорговыхТочекСерверБезКонтекста(ТекущийПомощник);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьВозможностьИзмененияВариантаПостроения()

&НаКлиенте
// Перезаполняет группу торговых точек для разных вариантов построения
//
Процедура ОбновитьГруппуТорговыхТочекКлиент()
	
	ОбновитьПризнакИспользованияОтборовКлиент(Ложь); //+++АК mika 2018.08.21 ИП-00019541
	
	ОбновитьВозможностьИзмененияГруппыТорговыйТочек();
	
	ГруппаТорговыхТочек = ПолучитьГруппуТорговыхТочекСерверБезКонтекста(ТекущийПомощник); 

КонецПроцедуры // ОбновитьГруппуТорговыхТочекКлиент()

&НаСервереБезКонтекста
// Вызывает функцию получения ЦФО по помощнику управляющего
//
// Параметры:
//  ТекущийПомощник  - <Тип.СправочникСсылка.ФизическиеЛица> - Помощник управляющего
//
// Возвращаемое значение:
//   <Тип.СтруктурныеЕдиницы>   - ЦФО помощника управляющего
//
Функция ПолучитьГруппуТорговыхТочекСерверБезКонтекста(ТекущийПомощник) //+++АК mika 2017.02.09 ИП-00016863.02

	//+++АК mika 2018.05.24 ИП-00018578 Добавлена проверка для Помощников Развития
	//Возврат РегистрыСведений.ПользователиПоЦФО.ПолучитьЦФОПомощникаУправляющего(ТекущийПомощник, Ложь);
	Возврат РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(ТекущийПомощник, Ложь, Истина); 

КонецФункции // ПолучитьГруппуТорговыхТочекСерверБезКонтекста()

&НаКлиенте
// Обновление возможности изменения группы торговых точек Помощниками
//
Процедура ОбновитьВозможностьИзмененияГруппыТорговыйТочек() //+++АК mika 2017.02.09 ИП-00016863.02

	Элементы.ГруппаТорговыхТочек.ТолькоПросмотр = ЗначениеЗаполнено(ТекущийПомощник) И ВариантПостроения = 1;
	
	Элементы.ГруппаТорговыхТочек.КнопкаВыбора = НЕ Элементы.ГруппаТорговыхТочек.ТолькоПросмотр; //+++АК mika 2018.05.24 Без задачи. Перестала автоматически отображаться кнопка выбора.

	Элементы.ТекущийПомощник.Видимость = ВариантПостроения = 1;
	
	ВозможностьРедактирвания = (ВариантПостроения <> 1) ИЛИ (ВариантПостроения = 1 И ТекущийПомощник = ТекущийПомощникАвто) ИЛИ ЗначениеЗаполнено(ТекущийУправляющий);
	
	Элементы.ОсновнаяТаблица.ПодчиненныеЭлементы.ОсновнаяТаблицаПредставление.ТолькоПросмотр = Не ВозможностьРедактирвания;
	
	Элементы.Группа3.Доступность = ВозможностьРедактирвания;
	
КонецПроцедуры // ОбновитьВозможностьИзмененияГруппыТорговыйТочек()

&НаСервере
// Очищает записи в регистре по ранее распределенной группе торговых точек
//
// Параметры:
//  ПараметрыСотрудника  - <Тип.Структура> - Структура параметров сотрудника
//
Процедура ОчиститьЗаписиПоСтаройГруппеТорговыхТочек(ПараметрыСотрудника) //+++АК mika 2017.02.09 ИП-00016863.02
	
	Если ЗначениеЗаполнено(ПараметрыСотрудника.Период) И ЗначениеЗаполнено(ПараметрыСотрудника.ГруппаСтарая) И ЗначениеЗаполнено(ПараметрыСотрудника.Сотрудник)Тогда
		
		НаборЗаписей = РегистрыСведений.ТабельРаботыКассиров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПараметрыСотрудника.Период);
		НаборЗаписей.Отбор.Сотрудник.Установить(ПараметрыСотрудника.Сотрудник);
		НаборЗаписей.Отбор.Группа.Установить(ПараметрыСотрудника.ГруппаСтарая);
		
		НаборЗаписей.Записать();
		
	КонецЕсли;

КонецПроцедуры // ОчиститьЗаписиПоСтаройГруппеТорговыхТочек()

&НаКлиенте
Процедура ТекущийПомощникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //+++АК mika 2018.02.09 ИП-00016863.02
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборПомощника", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", Новый Структура("ТекущийПомощник, ВсеПомощники", ТекущийПомощник, Истина),
				ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПомощника(Результат, ДополнительныеПараметры) Экспорт //+++АК mika 2018.02.09 ИП-00016863.02
	
	Если Результат <> Неопределено Тогда
		
		ТекущийПомощник = Результат;
		
		ОбновитьГруппуТорговыхТочекКлиент();
		
		ОчиститьДанныеДаСервере();
		
		ОбновитьГрафик(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&Насервере
Процедура ЗаполнениеОтветственныхПользователейСервер() //+++АК mika 2018.02.27 ИП-00016863.04
	
	СтрукрураПараметров = РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(ПараметрыСеанса.ТекущийПользователь, Ложь);
	
	Если СтрукрураПараметров <> Неопределено Тогда
		
		СтрукрураПараметров.Свойство("ЦФО", ГруппаТорговыхТочек);
		
		Если СтрукрураПараметров.ЭтоУправляющий Тогда
			ТекущийУправляющий = СтрукрураПараметров.Сотрудник;
			//+++АК mika 2018.08.29 ИП-00019541
			ИспользоватьОтборы              = Истина;
			Элементы.ГруппаОтборы.Видимость = Истина;    
			ОбновитьПризнакИспользованияОтборовСервер();
			//---АК
		ИначеЕсли СтрукрураПараметров.ЭтоПомощник Тогда
			ТекущийПомощник = СтрукрураПараметров.Сотрудник;
			ТекущийПомощникАвто = ТекущийПомощник; 
		КонецЕсли;
		
		ОбновитьВозможностьИзмененияВариантаПостроения(Ложь);
		
		ОбновитьЗаголовокФормы();
		
	КонецЕсли;		
	
КонецПроцедуры

&Насервере
Функция ПолучитьСтруктуруТекущегоУправляющегоПользователиПоЦФО() //+++АК mika 2018.02.27 ИП-00016863.04
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо КАК ТекущийУправляющий,
	|	ПользователиПоЦФОСрезПоследних.ЦФО КАК ГруппаТорговыхТочек
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&ТекущаяДата, РуководительОтдела) КАК ПользователиПоЦФОСрезПоследних
	|ГДЕ
	|	ПользователиПоЦФОСрезПоследних.Сотрудник = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураПараметров = Новый Структура();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Для Каждого Колонка Из  РезультатЗапроса.Колонки Цикл
			СтруктураПараметров.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);     
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьЭлементовФормы()//+++АК mika 2018.02.27 ИП-00016863.04
	
	Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
		Элементы.ГруппаТорговыхТочек.КнопкаВыбора = НЕ ЗначениеЗаполнено(ТекущийПомощник);
		Элементы.ТекущийПомощник.КнопкаОчистки = Истина;
		Элементы.ТекущийПомощник.АвтоОтметкаНезаполненного = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ТекущийПомощник) Тогда
		Элементы.ГруппаТорговыхТочек.КнопкаВыбора = Ложь;
		Элементы.ТекущийПомощник.АвтоОтметкаНезаполненного = Истина;
		Элементы.ТекущийПомощник.КнопкаОчистки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПомощникОчистка(Элемент, СтандартнаяОбработка) //+++АК mika 2018.02.27 ИП-00016863.04
	
	//Принудительная очистка, поскольку переменная формы очищается не всегда в режиме упр. приложения
	ТекущийПомощник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	
	ОбновитьВозможностьИзмененияГруппыТорговыйТочек();
	
	ОбновитьВидимостьЭлементовФормы();
	
	ОчиститьДанныеДаСервере();
	
	ОбновитьГрафик(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы() //+++АК mika 2018.02.27 ИП-00016863.04 
	
	Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
		ТекущийЗаголовок = СтрЗаменить("(Управляющий: ТекущийУправляющий)","ТекущийУправляющий",ТекущийУправляющий);
	ИначеЕсли ЗначениеЗаполнено(ТекущийПомощник) Тогда
		ТекущийЗаголовок = СтрЗаменить("(Помощник: ТекущийПомощник)","ТекущийПомощник",ТекущийПомощник) ;
	Иначе
		ТекущийЗаголовок = "";
	КонецЕсли;
	
	Этаформа.Заголовок = Этаформа.Заголовок + ТекущийЗаголовок; 
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокОтбораОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) //+++АК mika 2018.08.21 ИП-00019541
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если СокрЛП(ТекущиеДанные.ЛевоеЗначение) = "Помощник" Тогда
		//Ограничение по помощнику
	ИначеЕсли СокрЛП(ТекущиеДанные.ЛевоеЗначение) = "Сотрудник" Тогда
		//Ограничение по сотруднику
	ИначеЕсли СокрЛП(ТекущиеДанные.ЛевоеЗначение) = "Торговая точка" Тогда
		//Ограничение по торговой точке/группе
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакИспользованияОтборовКлиент(ОбновитьВидимость = Истина) //+++АК mika 2018.08.21 ИП-00019541
	
	Если ОбновитьВидимость Тогда
		Элементы.ГруппаОтборы.Видимость = НЕ Элементы.ГруппаОтборы.Видимость;
	КонецЕсли;
	
	ИспользоватьОтборы = Элементы.ГруппаОтборы.Видимость;
	
	Если ВариантПостроения = 1 И ИспользоватьОтборы Тогда
		
		Для каждого Отбор Из СписокОтбора.Отбор.Элементы Цикл
			Если СокрЛП(Отбор.ЛевоеЗначение) = "Помощник" Тогда
				
				Отбор.Использование  = Истина;
				
				Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
					Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
					Отбор.ПравоеЗначение = ПолучитьПодчиненныхПомощниковСервер();
				Иначе
					Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					Отбор.ПравоеЗначение = ТекущийПомощник;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ТекущийПомощник.Доступность = Ложь;
	Иначе
		Элементы.ТекущийПомощник.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакИспользованияОтборовСервер() //+++АК mika 2018.08.21 ИП-00019541
	
	Для каждого Отбор Из СписокОтбора.Отбор.Элементы Цикл
		Если СокрЛП(Отбор.ЛевоеЗначение) = "Помощник" Тогда
			
			Отбор.Использование  = Истина;
			
			Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
				Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
				Отбор.ПравоеЗначение = ПолучитьПодчиненныхПомощниковСервер();
			Иначе
				Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.ПравоеЗначение = ТекущийПомощник;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ТекущийПомощник.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборыНажатие(Элемент)  //+++АК mika 2018.08.21 ИП-00019541

	ОбновитьПризнакИспользованияОтборовКлиент(); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуСпецификиФормирования() //+++АК mika 2018.08.22 ИП-00019541
	
	ПорядокФормированияТабеля.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификаФормированияТабеля.ФизическоеЛицо,
	|	СпецификаФормированияТабеля.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.СпецификаФормированияТабеляКассировПомощники КАК СпецификаФормированияТабеля
	|ГДЕ
	|	СпецификаФормированияТабеля.Группа = &Группа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
		
	ПорядокФормированияТабеля.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодчиненныхПомощниковСервер() //+++АК mika 2018.08.22 ИП-00019541

	СтруктураПараметров = РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(ПараметрыСеанса.ТекущийПользователь, Ложь,,Истина);
	
	Возврат СтруктураПараметров.ПодчиненныеПомощники;
	
КонецФункции // ПолучитьПодчиненныхПомощниковСервер()

&НаСервере
Функция ПрименитьОтборПоТорговымТочкам(ТаблицаЗначений, СписокОтборТТ) //+++АК mika 2018.08.29 ИП-00019541
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаЗначений);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ.Сотрудник
	|ПОМЕСТИТЬ ВТ_ОтборСотрудниковТТ
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.ТорговаяТочка В(&СписокОтборТТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_ОтборСотрудниковТТ.Сотрудник
	|			ИЗ
	|				ВТ_ОтборСотрудниковТТ КАК ВТ_ОтборСотрудниковТТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОтборСотрудниковТТ";
	
	Запрос.УстановитьПараметр("СписокОтборТТ", СписокОтборТТ);
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции

&НаКлиенте
Процедура СписокОтбораОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ) //+++АК mika 2018.08.29 ИП-00019541
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Элемент.ТекущиеДанные.ЛевоеЗначение) = "ТорговаяТочка"  
			И (Элемент.ТекущиеДанные.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
		        И Элемент.ТекущиеДанные.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке)Тогда
		
		ПоказатьПредупреждение(,"Для торговый точек предусмотрены только варианты сравнения ""Равно"" и ""В списке""");
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
