
&НаСервереБезКонтекста
Функция ПолучитьПоставщикаПоЦенам(мДата, мНоменклатура, мХарактеристика)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"			, мДата);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	Запрос.УстановитьПараметр("Характеристика"	, мХарактеристика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныПоставщиковСрезПоследних.Поставщик
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&Дата, Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Поставщик;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция НайтиУпаковку()
	
	МасУпак = Новый Массив;
	
	мТекстПоиска = СокрЛП(СтрЗаменить(Объект.НаименованиеУпаковки, Объект.ПризнакУпаковки.Наименование, ""));
	Если ЗначениеЗаполнено(мТекстПоиска) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", "%" + мТекстПоиска + "%");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО &Наименование
		|	И Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
		|	И НЕ Номенклатура.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			МасУпак.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
    Возврат МасУпак;	

КонецФункции // ()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Объект.НормаРасхода 					= 1;
	Объект.ДатаНачалаИспользованияУпаковки 	= ТекущаяДата() + 7*86400;
	
КонецПроцедуры


Процедура СформироватьНаименование()
	
	Если ЗначениеЗаполнено(Объект.ШК)
			И ЗначениеЗаполнено(Объект.ПризнакУпаковки) Тогда
			
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(Объект.ШК);
		
		Объект.НаименованиеУпаковки	= "";
		НоменклатураШК 		= СтруктураДанных.Номенклатура;
		ХарактеристикаШК 	= СтруктураДанных.Характеристика;
		Если НЕ ЗначениеЗаполнено(НоменклатураШК) Тогда
			Сообщить("По штрих-коду не найдена номенклатура");
			Возврат;
		КонецЕсли; 
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура"	, НоменклатураШК);
		Запрос.УстановитьПараметр("Характеристика"	, ХарактеристикаШК);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныПоставщиковСрезПоследних.Поставщик
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.НаименованиеУпаковки = Объект.ПризнакУпаковки.Наименование + " " + НоменклатураШК + " " + Выборка.Поставщик;
		Иначе
			Сообщить("Не найден поставщик");
		КонецЕсли;

		Объект.Номенклатура 	= НоменклатураШК;
		Объект.Характеристика 	= ХарактеристикаШК;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШКПриИзменении(Элемент)
	
	Объект.Номенклатура 	= Неопределено;
	Объект.Характеристика 	= Неопределено;
	
	//
	СформироватьНаименование();
	
КонецПроцедуры


&НаКлиенте
Процедура ПризнакУпаковкиПриИзменении(Элемент)
	
	СформироватьНаименование();
	
КонецПроцедуры


Процедура СоздатьЭлементСправочникаСервер()
	
	//
	Эл = Справочники.Номенклатура.НайтиПоНаименованию(Объект.НаименованиеУпаковки);
	Если ЗначениеЗаполнено(Эл) Тогда
		Сообщить("Уже есть такой элемент номенклатуры");
		Возврат;
	КонецЕсли;

	//
	НовыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НовыйОбъект.Наименование			= Объект.НаименованиеУпаковки;
	НовыйОбъект.НаименованиеПолное		= Объект.НаименованиеУпаковки;
	НовыйОбъект.Родитель				= Объект.ПризнакУпаковки.ТоварнаяГруппа;
	//НовыйОбъект.Родитель				= Справочники.Номенклатура.НайтиПоКоду("000000398");
	НовыйОбъект.ТипТовара				= Перечисления.ТипыТоваров.Упаковка;
	НовыйОбъект.НеВедетсяУчетПоХарактеристикам = Истина;
	НовыйОбъект.ВидНоменклатуры			= Перечисления.ВидыНоменклатуры.Товар;
	НовыйОбъект.СтавкаНДС				= Перечисления.СтавкиНДС.НДС18;
	НовыйОбъект.БазоваяЕдиницаИзмерения	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	НовыйОбъект.ГруппаНоменклатурыУРЗ	= Справочники.ГруппыНоменклатурыУРЗ.НайтиПоНаименованию("Этикетка");
	НовыйОбъект.Складируемая			= Истина;
	НовыйОбъект.ВидСкладируемости		= Перечисления.ВидыСкладируемостиТовара.Складируемый;
	
	//+++АК KIRN 2018.03.22 ИП-00018215
	НовыйОбъект.ТорговаяМарка 			= Объект.Номенклатура.ТорговаяМарка;
	//---АК KIRN 
	
	НовыйОбъект.Записать();
	
	НовЕд = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	НовЕд.Владелец		= НовыйОбъект.Ссылка;
	НовЕд.Наименование	= Объект.ЕдиницаХраненияОстатков;
	Если Объект.ЕдиницаХраненияОстатков = "Шт" Тогда
		НовЕд.Вес						= 0.001;
		НовЕд.ЕдиницаПоКлассификатору	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
		НовЕд.Коэффициент				= 1;
	Иначе	
		НовЕд.Вес						= 1;
		НовЕд.ЕдиницаПоКлассификатору	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг");
		НовЕд.Коэффициент				= 1;
	КонецЕсли; 
	НовЕд.Записать();
	
	НовыйОбъект.ЕдиницаХраненияОстатков = НовЕд.Ссылка;
	НовыйОбъект.Записать();
	
	//
	МенеджерЗаписи = РегистрыСведений.ДоступностьТоваровНаСкладах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтруктурнаяЕдиница	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231");
	МенеджерЗаписи.Склад				= Справочники.Склады.НайтиПоКоду("000000302");
	МенеджерЗаписи.Номенклатура			= НовыйОбъект.Ссылка;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений.ДоступностьТоваровНаСкладах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтруктурнаяЕдиница	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243");
	МенеджерЗаписи.Склад				= Справочники.Склады.НайтиПоКоду("000000292");
	МенеджерЗаписи.Номенклатура			= НовыйОбъект.Ссылка;
	
	//
	МенеджерЗаписи = РегистрыСведений.СпецификацииПоставщиков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период				= Объект.ДатаНачалаИспользованияУпаковки;
	МенеджерЗаписи.Поставщик			= ПолучитьПоставщикаПоЦенам(Объект.ДатаНачалаИспользованияУпаковки, Объект.Номенклатура, Объект.Характеристика);
	МенеджерЗаписи.Номенклатура			= Объект.Номенклатура;
	МенеджерЗаписи.Характеристика		= Объект.Характеристика;
	МенеджерЗаписи.НоменклатураСырье	= НовыйОбъект.Ссылка;
	МенеджерЗаписи.Количество			= Объект.НормаРасхода;
	МенеджерЗаписи.ЕдиницаИзмерения		= НовЕд.Ссылка;
	МенеджерЗаписи.Записать();
	
	//
	Сообщить("Создан " + Объект.НаименованиеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлементСправочника(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПризнакУпаковки) Тогда
		Сообщить("Выберите признак упаковки");
		Возврат;
	КонецЕсли; 
	
	//
	МасУпак = НайтиУпаковку();	
	Если МасУпак.Количество() > 0 Тогда
		Сообщение = "Обнаружена упаковка у данной позиции";
		Для каждого ЭлементМассива Из МасУпак Цикл
			Сообщение = Сообщение + "
			|" + Строка(ЭлементМассива);
		КонецЦикла; 
		Сообщение = Сообщение + "
		|Продолжить?";
		Если Вопрос(Сообщение,РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;	
		КонецЕсли; 	
	КонецЕсли; 	
	Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаХраненияОстатков) Тогда
		Сообщить("Выберите единицу хранения");
		Возврат;
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(СокрЛП(Объект.НаименованиеУпаковки)) Тогда
		СоздатьЭлементСправочникаСервер();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаНачалаИспользованияУпаковкиПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаИспользованияУпаковки < НачалоДня(ТекущаяДата()) Тогда
		Объект.ДатаНачалаИспользованияУпаковки = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры
 