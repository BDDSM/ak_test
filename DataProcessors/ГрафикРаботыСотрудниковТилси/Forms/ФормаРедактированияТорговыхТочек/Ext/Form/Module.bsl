
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Сотрудник", Сотрудник);	
	Параметры.Свойство("Период", Период);	
	Параметры.Свойство("ГруппаТорговыхТочек", ГруппаТорговыхТочек);
	
	Если Параметры.Свойство("ТаблицаДанных")Тогда
		Для Каждого Строка из Параметры.ТаблицаДанных Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Строка);
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанных

&НаКлиенте
Процедура ТаблицаДанныхПриАктивизацииСтроки(Элемент)
	
	 ОбновитьТолькоПросмотрЯчеек();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПередНачаломИзменения(Элемент, Отказ)
	
	ОбновитьТолькоПросмотрЯчеек();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ОчиститьЗначенияСтруктурыПолей(Элемент.ТекущиеДанные, Новый Структура("КоличествоЧасов, Значение", 0, Неопределено));
		
		ВводНовойСтроки = Истина;
		
		ОбновитьТолькоПросмотрЯчеек();
		
		ОчиститьПоказателиТекущейСтроки(Элемент.ТекущиеДанные.Вид);

		Возврат;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.Вид = "Выход";
		Элемент.ТекущиеДанные.Тип = "Полный";
		
		ВводНовойСтроки = Истина;
		
		ОбновитьТолькоПросмотрЯчеек();

		ОчиститьПоказателиТекущейСтроки(Элемент.ТекущиеДанные.Вид);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхВидОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПоказателиТекущейСтроки(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхТипОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ТаблицаДанных.ТекущиеДанные.Тип = ВыбранноеЗначение;
	
	ЗакончитьРедактированиеСтроки();
	
	УстановитьТекущийЭлемент("ТаблицаДанныхТорговаяТочка");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхТорговаяТочкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("НачалоВыбораТорговойТочкиЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораСтруктурнойЕдиницы", Новый Структура("ГоловноеПодразделение", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаДанных.ТекущиеДанные.Вид = "Выход" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("НачалоВыбораТорговойТочкиЗавершение", ЭтаФорма);

		ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораСтруктурнойЕдиницы", Новый Структура("ГоловноеПодразделение", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,,,Оповещение);
		
	ИначеЕсли  Элементы.ТаблицаДанных.ТекущиеДанные.Вид = "Отсутствие" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = Элемент.СписокВыбора; // Можно интерактивно  заменить существующий список выбора.
		
		СписокВыбора.Очистить();
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.Прогул"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.Болезнь"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.БольничныйЛист")); 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.Уволен"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.Отпуск"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ЗаСвойСчет"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ДекретныйОтпуск"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ОтказСтажера"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбора", ЭтаФорма, Новый Структура);
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	
	Если ЗначениеВыбора <> Неопределено Тогда
		Элементы.ТаблицаДанных.ТекущиеДанные.Значение = ЗначениеВыбора.Значение ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхКоличествоЧасовПриИзменении(Элемент)
	
	ПроверитьКорректностьВведенияКоличестваЧасов();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораТорговойТочкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		Элементы.ТаблицаДанных.ТекущиеДанные.ТорговаяТочка = Результат;
		
		ЗакончитьРедактированиеСтроки();
		
		УстановитьТекущийЭлемент("ТаблицаДанныхКоличествоЧасов");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если ПроверитьЗаполнениеТабличнойЧасти() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Сотрудник"	, Сотрудник);
	СтруктураВозврата.Вставить("Период"		, Период);
	
	МассивСтрок = Новый Массив;
	
	Представление = "";
	КоличествоЧасов = 0;
	
	ТорговаяТочкаПустаяСсылка = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	
	ТорговаяТочка = ТорговаяТочкаПустаяСсылка;

	Для Каждого Стр Из ТаблицаДанных Цикл
		
		МассивСтрок.Добавить(Новый Структура("ТорговаяТочка, КоличествоЧасов, Тип, Вид, Значение", Стр.ТорговаяТочка, Стр.КоличествоЧасов, Стр.Тип, Стр.Вид, Стр.Значение));
		
		Если Стр.Вид = "Выход" Тогда
			
			Представление = Представление + ПолучитьПрефиксВыхода(Стр.Тип) + Стр.ТорговаяТочка + " (" + Стр.КоличествоЧасов + " ч.),";
			КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
			
			ТорговаяТочка = Стр.ТорговаяТочка;
			
		Иначе
			
			Представление = Представление + Стр.Вид + ","; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ТорговаяТочка", ?(ТаблицаДанных.Количество() = 1, ТорговаяТочка, ТорговаяТочкаПустаяСсылка));
	СтруктураВозврата.Вставить("КоличествоЧасов", КоличествоЧасов);
	СтруктураВозврата.Вставить("ТаблицаДанных", МассивСтрок);
	
	Если ЗначениеЗаполнено(Представление) Тогда
		СтруктураВозврата.Вставить("Представление", Лев(Представление, СтрДлина(Представление)-1));
	Иначе
		СтруктураВозврата.Вставить("Представление", "");
	КонецЕсли;
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьПоказателиТекущейСтроки(ВыбранноеЗначение)
	
	ТекущиеДанные  = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	СтруктураПолей = Новый Структура();
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение)Тогда
		
		ТекущиеДанные.Вид = ВыбранноеЗначение;
		
		Если ВыбранноеЗначение = "Выход" Тогда
			
			ДоступныйТип = Тип("СправочникСсылка.СтруктурныеЕдиницы");
			
			Если ТипЗнч(ТекущиеДанные.Значение) <> ДоступныйТип Тогда
				СтруктураПолей.Вставить("Значение", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
			КонецЕсли;
			
			ОбновитьДоступныеТипыВыбораЗначения(ДоступныйТип);
			
			СтруктураПолей.Вставить("КоличествоЧасов", 0);

			ЗакончитьРедактированиеСтроки();
			
			УстановитьТекущийЭлемент("ТаблицаДанныхТип");
			
		ИначеЕсли  ВыбранноеЗначение = "Отсутствие" Тогда
			
			ДоступныйТип = Тип("ПеречислениеСсылка.ВидыОтсутствия");
			
			Если ТипЗнч(ТекущиеДанные.Значение) <> ДоступныйТип Тогда
				СтруктураПолей.Вставить("Значение", ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка"));
			КонецЕсли;
			
			ОбновитьДоступныеТипыВыбораЗначения(ДоступныйТип);
			
			СтруктураПолей.Вставить("Тип", "");
			СтруктураПолей.Вставить("ТорговаяТочка", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
			СтруктураПолей.Вставить("КоличествоЧасов", 0);
			
			ЗакончитьРедактированиеСтроки();
			
			УстановитьТекущийЭлемент("ТаблицаДанныхЗначение");

		ИначеЕсли  ВыбранноеЗначение = "Тренинг" Тогда
			
			ДоступныйТип = Тип("СправочникСсылка.Тренинги");
			
			Если ТипЗнч(ТекущиеДанные.Значение) <> ДоступныйТип Тогда
				СтруктураПолей.Вставить("Значение", ПредопределенноеЗначение("Справочник.Тренинги.ПустаяСсылка"));
			КонецЕсли;
			
			ОбновитьДоступныеТипыВыбораЗначения(ДоступныйТип);
			
			СтруктураПолей.Вставить("Тип", "");
			СтруктураПолей.Вставить("ТорговаяТочка", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
			СтруктураПолей.Вставить("КоличествоЧасов", 0);
			
			ЗакончитьРедактированиеСтроки();
			
			УстановитьТекущийЭлемент("ТаблицаДанныхЗначение");

		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьЗначенияСтруктурыПолей(ТекущиеДанные, СтруктураПолей);
	
	ОбновитьТолькоПросмотрЯчеек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗначенияСтруктурыПолей(ТекущиеДанные, СтруктураПолей)
	
	Если СтруктураПолей.Количество() > 0 Тогда
		Для каждого ПолеДляОчистки Из СтруктураПолей Цикл
			ТекущиеДанные[ПолеДляОчистки.Ключ] = ПолеДляОчистки.Значение;     
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеСтроки()
	
	Если Не ВводНовойСтроки Тогда
		Элементы.ТаблицаДанных.ЗакончитьРедактированиеСтроки(Истина);
		ВводНовойСтроки = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеТипыВыбораЗначения(ДоступныйТип)
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(ДоступныйТип);
	
	Элементы.ТаблицаДанных.ПодчиненныеЭлементы.ТаблицаДанныхЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлемент(ТекущийЭлементИмя)
	Элементы.ТаблицаДанных.ТекущийЭлемент = Элементы.ТаблицаДанных.ПодчиненныеЭлементы[ТекущийЭлементИмя];
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТолькоПросмотрЯчеек()
	
	Если Элементы.ТаблицаДанных.ТекущиеДанные <> Неопределено Тогда
		
		Отсутствие = Элементы.ТаблицаДанных.ТекущиеДанные.Вид <> "Выход";
		
		Элементы.ТаблицаДанных.ПодчиненныеЭлементы.ТаблицаДанныхКоличествоЧасов.ТолькоПросмотр = Отсутствие;
		Элементы.ТаблицаДанных.ПодчиненныеЭлементы.ТаблицаДанныхТип.ТолькоПросмотр = Отсутствие;
		Элементы.ТаблицаДанных.ПодчиненныеЭлементы.ТаблицаДанныхТорговаяТочка.ТолькоПросмотр = Отсутствие;

		Выход = Элементы.ТаблицаДанных.ТекущиеДанные.Вид = "Выход";
		Элементы.ТаблицаДанных.ПодчиненныеЭлементы.ТаблицаДанныхЗначение.ТолькоПросмотр = Выход;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьВведенияКоличестваЧасов()
	
	ИтогЧасов = ТаблицаДанных.Итог("КоличествоЧасов");
	
	Если ИтогЧасов > 24 Тогда
		Элементы.ТаблицаДанных.ТекущиеДанные.КоличествоЧасов = Элементы.ТаблицаДанных.ТекущиеДанные.КоличествоЧасов - (ИтогЧасов - 24);
		Сообщить(НСтр("ru = 'Невозможно распределить более 24-х ч. в сутки!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеТабличнойЧасти()
	
	Отказ = Ложь;
	
	СтруктураОбязательныхПолей = Новый Структура();
	
	СтруктураОбязательныхПолей.Вставить("Вид");
	СтруктураОбязательныхПолей.Вставить("Тип");
	СтруктураОбязательныхПолей.Вставить("ТорговаяТочка");
	СтруктураОбязательныхПолей.Вставить("КоличествоЧасов");

	Для каждого Строка Из ТаблицаДанных Цикл

		Если Строка.Вид = "Выход" Тогда
			СтруктураОбязательныхПолей.Удалить("Значение");
		Иначе
			СтруктураОбязательныхПолей.Вставить("Значение");
		КонецЕсли;
		
		ПроверитьЗаполнениеЗначений(Строка, СтруктураОбязательныхПолей, Отказ);
		
	КонецЦикла; 
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеЗначений(Строка, СтруктураОбязательныхПолей, Отказ)
	
	Для каждого ОбязательноеПоле Из СтруктураОбязательныхПолей Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка[ОбязательноеПоле.Ключ]) Тогда
			
			Если ЭтоИсключениеПроверкиЗаполнения(Строка, ОбязательноеПоле.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Сообщить(НСтр("ru = 'Некорректно заполнена табличная часть! Заполните все обязательные поля!'"));
			
			Элементы.ТаблицаДанных.ТекущаяСтрока = Этаформа.ТаблицаДанных.Индекс(Строка);
			
			Элементы.ТаблицаДанных.ТекущийЭлемент = Элементы.ТаблицаДанных.ПодчиненныеЭлементы["ТаблицаДанных" + ОбязательноеПоле.Ключ];
			
			Элементы.ТаблицаДанных.ТекущийЭлемент.АвтоОтметкаНезаполненного = Истина;
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоИсключениеПроверкиЗаполнения(Строка, ИмяКолонки)
	
	ЭтоИсключение = Ложь;
	
	Если Строка.Вид = "Отсутствие" Или Строка.Вид = "Тренинг"  Тогда
		Если ИмяКолонки = "Тип" 
			ИЛИ ИмяКолонки = "ТорговаяТочка" 
				ИЛИ ИмяКолонки = "КоличествоЧасов" Тогда
			ЭтоИсключение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоИсключение;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПрефиксВыхода(Тип)
	
	Если Тип = "Ночной" Тогда
		Возврат "н, ";
	ИначеЕсли Тип = "Стажер" Тогда
		Возврат "ст, ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

