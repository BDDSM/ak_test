&НаКлиенте
Перем МассивИдентификаторов; 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Отктытие из обработки График работы сотрудников Тилси
	
	Если Параметры.Свойство("ГруппаТорговыхТочек")Тогда
		ГруппаТорговыхТочек = Параметры.ГруппаТорговыхТочек;	
	КонецЕсли;
	
	Если Параметры.Свойство("ВП")Тогда
		Период.Вариант 			= Параметры.ВП.Вариант;	
		Период.ДатаНачала 		= Параметры.ВП.ДатаНачала;	
		Период.ДатаОкончания	= Параметры.ВП.ДатаОкончания;
	Иначе
		УстановитьПериодПоУмолчанию();
	КонецЕсли;
	
	ЗаполнитьПараметрыФормы();  

	ОбновитьВидимостьЭлементовСервер(); 

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		 
		Если НЕ ОткрыватьФорму Тогда
			
			ИмяФормыПолное = ПолучитьПолноеИмяФормы("Форма");
			Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
				ОткрытьФорму(ИмяФормыПолное, Новый Структура("ОткрыватьФорму",Истина),,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Иначе
				ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.Форма", Новый Структура("ОткрыватьФорму",Истина),,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
			
			Отказ = Истина;
			
			ЭтаФорма.Закрыть();
			
		КонецЕсли;
		
	#КонецЕсли

	УстановитьВидимость(Истина);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаТорговыхТочекПриИзменении(Элемент)
	
	ОчиститьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТорговыхТочекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.ФормаВыбораСтруктурнойЕдиницы", Новый Структура("НаименованиеГруппы", "Управление розницей."), ЭтаФорма,,
			ВариантОткрытияОкна.ОтдельноеОкно,,Новый ОписаниеОповещения("ГруппаТорговыхТочекНачалоВыбораЗавершение", ЭтаФорма, Параметры),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОчиститьДанныеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоДокумента

&НаКлиенте
Процедура ТаблицаСотрудникПериодВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТаблицаСотрудникПериодИзменитьДанные();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоДокумента

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Расшифровка по четным колонкам
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") Тогда
		Сотрудник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ПредставлениеТекущийПродавец = "";
		ТелефонТекущегоПродавца = "";
	Иначе
		Сотрудник = Расшифровка.Сотрудник;
		ПредставлениеТекущийПродавец = Строка(Сотрудник) + ", " + Расшифровка.КодСотрудника;
		ТелефонТекущегоПродавца = Расшифровка.Телефон;
	КонецЕсли;
	
	ТекущийПродавец = Сотрудник;
	
	Элементы.ТаблицаСотрудникПериод.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Сотрудник);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВТабличномДокументе(ДеньВыхода, Представление = "", КоличествоЧасов = 0, ТорговаяТочка = Неопределено)
	
	ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	НомерКолонки = ТекОбл.Лево;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	НомерСтроки 	= 0;
	
	Пока НачалоПериода <= ДеньВыхода Цикл 
		
		НомерСтроки 	= НомерСтроки + 1;
		НачалоПериода 	= НачалоПериода + 86400;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 6;
	
	// Четные колонки Представление, нечетные КоличествоЧасов
	КолонкаПредставления = Цел(НомерКолонки/2)*2;
	КолонкаКоличество = НомерКолонки;
	Если КолонкаПредставления = КолонкаКоличество Тогда
		КолонкаКоличество = КолонкаКоличество + 1;
	КонецЕсли;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаПредставления);
	ТекОбласть.Значение = Представление;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаКоличество, НомерСтроки, КолонкаКоличество);

	// Цвет
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	НайденнаяСтрокаЦвет = ЦветаТТ.Найти(ТорговаяТочка, "ТорговаяТочка");
	
	Если НайденнаяСтрокаЦвет <> Неопределено Тогда
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаКоличество);
		ТекОбласть.ЦветФона = НайденнаяСтрокаЦвет.Цвет;
	иначе
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаКоличество);
		ТекОбласть.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
		
	Если Не РедактированиеТабДокумента Тогда
		Возврат;
	КонецЕсли;

	Если Расшифровка = Неопределено ИЛИ ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Сотрудник") Тогда
		ПоказатьЗначение(,Расшифровка.Сотрудник);
		Возврат;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Период") Тогда
		Если ОбновитьМассивИдентификаторовПериодовРасшифровки() Тогда	
			НайденнаяСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период, Сотрудник", Расшифровка.Период, ТекущийПродавец));
			Если НайденнаяСтроки.Количество() =  1 Тогда
				ТаблицаСотрудникПериодИзменитьДанные(НайденнаяСтроки[0]);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка) 
	
	//Отлючить. В Web используют только кнопки.
	#Если НЕ ВебКлиент Тогда
		
		НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
		
		НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
		Если НомерКолонкиРасшифровки > 1 Тогда
			НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
		КонецЕсли;
		
		Расшифровка = ТабличныйДокумент.Область(Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки, Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки).Расшифровка;
		
		ТабличныйДокументОбработкаРасшифровки(,Расшифровка,);
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	
    Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьГрафикНаСервере();
	
	УстановитьВидимость();
	
	// Фиксация областей
	ТабличныйДокумент.ФиксацияСлева  = 3;
	ТабличныйДокумент.ФиксацияСверху = 7;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизЛицо(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФизлица", ЭтаФорма);
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаВыбораФизическогоЛица");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное, Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.ФормаВыбораФизическогоЛица", 
		Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизЛицоСлева(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Расшифровка по четным колонкам
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
        Сообщить(НСтр("ru = 'Встаньте в колонку с сотрудником, относительно котрой необходимо выполнить действие. Операция не выполнена.';"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьСотрудника", ЭтаФорма);
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаВыбораФизическогоЛица");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное, Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,,,Оповещение);
	Иначе
		ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.ФормаВыбораФизическогоЛица", Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,,,Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтроку(Команда)
	
	ТаблицаСотрудникПериодИзменитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтроку(Команда)
	
	ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
		
		Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
		
		//Очистка записей регистра (Период, Сотрудник, Группа)
		Если ЗначениеЗаполнено(ТекущийПродавец)
				И ЗначениеЗаполнено(ТекСтр.Период) Тогда
			ОчиститьЗаписиВРегистре(Данные);
		КонецЕсли;
		
		ТекСтр.Представление 					= "";
		ТекСтр.КоличествоЧасов 					= 0;
		ТекСтр.ПредставлениеТабличныйДокумент 	= "";
		ТекСтр.ТаблицаДанных.Очистить();
		
		ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, "", 0);
		
	КонецЦикла;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьКарточкуФизЛица(Команда)
	
	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
		ПоказатьЗначение(,ТекущийПродавец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТекущееФизЛицо(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Расшифровка по четным колонкам
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Сообщить(НСтр("ru = 'Встаньте в колонку с сотрудником, относительно котрой необходимо выполнить действие. Операция не выполнена.';"));
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	Результат = СписокСотрудников.ВыбратьЭлемент("Выбор сотрудника");
	Если Результат <> Неопределено Тогда
		
		ПеренестиФизЛицоВТабеле(НомерКолонкиРасшифровки, Результат.Значение);
		
		ИзменитьПорядокФизЛицВТабеле(ТекущийПродавец, Результат.Значение);
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГрафик(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Расшифровка по четным колонкам
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Сообщить(НСтр("ru = 'Встаньте в колонку с сотрудником, для которго необходимо скопировать график. Операция не выполнена.';"));
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	Результат = СписокСотрудников.ВыбратьЭлемент("Выбор сотрудника, с которого копируется график");
	Если Результат <> Неопределено Тогда
	
	ПараметрыОткрытия = Новый Структура("ФизическоеЛицо, НачалоПериода, КонецПериода", Результат.Значение, Период.ДатаНачала, Период.ДатаОкончания);
	Оповещение=Новый ОписаниеОповещения("СкопироватьГрафикОповещение",ЭтаФорма);
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.ФормаКопированияГрафика",ПараметрыОткрытия,ЭтаФорма,УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаГрафика(Команда)
	
	Форма = ПолучитьФорму("РегистрСведений.ТабельРаботыТилси.Форма.ФормаСписка");
	
	Форма.Список.Отбор.Элементы.Очистить();	
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение 	= Период.ДатаНачала;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение 	= КонецДня(Период.ДатаОкончания);
	
	Форма.ТолькоПросмотр = Истина;
	Форма.Открыть();
	форма.ПодчиненныеЭлементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОтклонениеГрафиковРаботыОтРеальныхВыходов(Команда)
	
	ОткрытьФорму("Отчет.ОтклоненияГрафиковСотрудниковТилсиОтРеальныхВыходов.Форма.ФормаОтчета",, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоВыработке(Команда)
	
	ОткрытьФорму("Отчет.ВыработкаВнештатныхСотрудников.Форма.ФормаОтчета",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда) 
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.Использовать);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбласть(Команда) 
		
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки, Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки).Расшифровка;

	ТабличныйДокументОбработкаРасшифровки(, Расшифровка, );

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбласть(Команда) 
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьОбластьВопросЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Выделенная область будет очищена! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ИзменитьФизлица(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДобавитьПервоеФизЛицоВГрафик(Результат);
		ИзменитьПорядокФизЛицВТабеле(Результат, ТекущийПродавец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСотрудника(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат)Тогда
		НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
		
		// Расшифровка по четным колонкам
		НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
		Если НомерКолонкиРасшифровки > 1 Тогда
			НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафикеСервер(Результат);
		#Иначе	
			НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафике(Результат);
		#КонецЕсли

		Если НаличиеСотрудника Тогда
			Сообщить(НСтр("ru = '"+СтрЗаменить("В табеле уже присутствует сотрудник Результат", "Результат", Результат)+"';"));
			Возврат;	
		КонецЕсли;
		
		РаздвинутьОбластьНаСервере(НомерКолонкиРасшифровки, Результат);
		
		// Порядок
		ИзменитьПорядокФизЛицВТабеле(Результат, ТекущийПродавец);		
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТорговыхТочекНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ГруппаТорговыхТочек = Результат;
		ОчиститьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГрафикОповещение(ДанныеКопирования, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДанныеКопирования) = Тип("Структура")Тогда
		
		СкопироватьГрафикНаСервере(ДанныеКопирования);
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСотрудникИзменитьПериод(Результат, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Результат) = Тип("Структура")Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Сотрудник"	  	 	, ТекущийПродавец);
		СтруктураДанных.Вставить("ТорговаяТочка"  	 	, Результат.ТорговаяТочка);
		СтруктураДанных.Вставить("Отсутствие"			, Результат.Отсутствие);
		СтруктураДанных.Вставить("КоличествоЧасов"	 	, Результат.КоличествоЧасов);
		СтруктураДанных.Вставить("СвойствоСотрудника"	, Результат.СвойствоСотрудника);
		СтруктураДанных.Вставить("Тренинг"				, Результат.Тренинг);
		СтруктураДанных.Вставить("ЭкстренныйВызов"		, Результат.ЭкстренныйВызов);
		
		Представление	 	= "";
		ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
		Отсутствие 		 	= СтруктураДанных.Отсутствие;
		КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
		СвойствоСотрудника  = СтруктураДанных.СвойствоСотрудника;
		
		Если ЗначениеЗаполнено(Отсутствие)Тогда
			
			Представление = Строка(Отсутствие);	
			
		ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
			
			Если СвойствоСотрудника = 1 Тогда
				Представление = Представление + "н, ";
			ИначеЕсли СвойствоСотрудника = 2 Тогда
				Представление = Представление + "ст, ";	
			КонецЕсли;
			
			Представление = Представление + Строка(ТорговаяТочка);
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
			Представление="Тренинг";	
		КонецЕсли;
		
		Если СвойствоСотрудника <> 2
				И НЕ ЗначениеЗаполнено(Отсутствие)
				И НЕ ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
			Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
		КонецЕсли;
		
		СтруктураДанных.Вставить("Представление", Представление);
		ТекДанные.Представление = Представление;
		
		ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбластьВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
		
		НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
		Если НомерКолонкиРасшифровки > 1 Тогда
			НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
		КонецЕсли;
		
		Расшифровка = ТабличныйДокумент.Область(Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки, Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки).Расшифровка;
		
		Если ОбновитьМассивИдентификаторовПериодовРасшифровки() Тогда	
			НайденнаяСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период, Сотрудник", Расшифровка.Период, ТекущийПродавец));
			Если НайденнаяСтроки.Количество() =  1 Тогда
				ТаблицаСотрудникПериодИзменитьДанные(НайденнаяСтроки[0], Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьГрафикНаСервере()
	
	ОчиститьДанныеНаСервере();
	
	ЗаполнитьТаблицуСотрудникПериодНаСервере();
	
	Макет = ПолучитьМакетНаСервере();
	ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьСтрокаПериод = Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ИнформацияПоСотрудникам.Сортировать("Порядок, Сотрудник");
	
	// Вывод сотрудников
	Для Каждого Сотр Из ИнформацияПоСотрудникам Цикл
		
		ФИО = СокрЛП(Сотр.Сотрудник); 
		
		ОбластьШапкаСотрудник = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
		ОбластьШапкаСотрудник.Параметры.Заполнить(Сотр);
		ОбластьШапкаСотрудник.Параметры.ФИО 		= ФИО;
		ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Сотр.Сотрудник, Сотр.КодСотрудника, Сотр.Телефон);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
		
	КонецЦикла;
	
	ЗаполнитьТаблицуЦветовТТ();
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	
	// Вывод Периодов
	Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		Для Каждого СтрТЗ Из ИнформацияПоСотрудникам Цикл
			
			ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
			
			НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
			
			Если НайденныеСтроки.Количество()Тогда
				
				СтрокаСДанными = НайденныеСтроки[0];
				ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаСДанными);
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Период", СтрокаСДанными.Период); //+++АК mika 2017.01.12 ИП-00017263.01
				
				Если СтрокаСДанными.ТаблицаДанных.Количество() Тогда
					
					Если СтрокаСДанными.ТаблицаДанных.Количество() = 1 Тогда
						НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
					Иначе
						НайденнаяСтрокаЦвет = Неопределено;
					КонецЕсли;
					
					Если НайденнаяСтрокаЦвет <> Неопределено Тогда
						ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// Добавим пустую строку с периодом
				СтрВход = ТаблицаСотрудникПериод.Добавить();
				СтрВход.Сотрудник = СтрТЗ.Сотрудник;
				СтрВход.Период = НачалоПериода;
				
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Период", НачалоПериода); //+++АК mika 2017.01.12 ИП-00017263.01

			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
			
		КонецЦикла;

		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСотрудникПериодНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ЦФО"	, ГруппаТорговыхТочек);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|ГДЕ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = &ЦФО";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	МасТТ = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасТТ.Добавить(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"		, НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода"		, НачалоДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ТорговаяТочка"		, МасТТ);
	Запрос.УстановитьПараметр("ГруппаТорговыхТочек"	, ГруппаТорговыхТочек);
	
	Запрос.Текст = ПолучитьТекстЗапросаДляЗаполненияМакета();
	
	ОбработатьРезультатЗапроса(Запрос);
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуВыходных(ДатаНачала, ДатаОкончания)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, ДатаОкончания);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))";
	
	ТаблицаВыходных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВыходных;
	
КонецФункции

&НаСервере
Процедура ОчиститьДанныеНаСервере()
	
	ТабличныйДокумент.Очистить();
	ТаблицаСотрудникПериод.Очистить();
	ИнформацияПоСотрудникам.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСотрудникПериодИзменитьДанные(ТекДанные = Неопределено, ОчиститьЗаписи = Ложь)
	
	Если ТекДанные = Неопределено Тогда 
		ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные; 
	КонецЕсли;

	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	Если Не ТекДанные.ТаблицаДанных.Количество() = 0 Тогда
		Для каждого Строка из ТекДанные.ТаблицаДанных Цикл
			МассивДанных.Добавить(Новый Структура("ТорговаяТочка, КоличествоЧасов, Тип, Вид, Значение",
			          Строка.ТорговаяТочка, Строка.КоличествоЧасов, Строка.Тип, Строка.Вид, Строка.Значение)); 						
		КонецЦикла;
	КонецЕсли;

	Если ОчиститьЗаписи Тогда
		
		ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение(Новый Структура("Сотрудник, Период, ГруппаТорговыхТочек, ТаблицаДанных, Представление, КоличествоЧасов, ТорговаяТочка", 
				ТекущийПродавец, ТекДанные.Период, ГруппаТорговыхТочек, Новый Массив(),"",0, ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка")), Новый Структура("ТекДанные", ТекДанные));
		
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение", ЭтаФорма, Новый Структура("ТекДанные", ТекДанные));
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаРедактированияТорговыхТочек");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное, Новый Структура("Сотрудник, Период, ГруппаТорговыхТочек, ТаблицаДанных", 
				ТекущийПродавец, ТекДанные.Период, ГруппаТорговыхТочек, МассивДанных),ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковТилси.Форма.ФормаРедактированияТорговыхТочек", Новый Структура("Сотрудник, Период, ТаблицаДанных", 
				ТекущийПродавец, ТекДанные.Период, МассивДанных),ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных)
	
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
		Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
		
		// Очистка записей регистра (Период, Сотрудник)
		Если ЗначениеЗаполнено(ТекущийПродавец)
			И ЗначениеЗаполнено(ТекСтр.Период) Тогда
			ОчиститьЗаписиВРегистре(Данные);
		КонецЕсли;
		ТабДанных = ТекСтр.ТаблицаДанных;
		ТабДанных.Очистить();
		
		Данные.Вставить("ТорговаяТочка"	 , СтруктураДанных.ТорговаяТочка);
		Данные.Вставить("КоличествоЧасов", СтруктураДанных.КоличествоЧасов);
		
		СтруктураДанных.Вставить("Период", ТекСтр.Период);
		ОшибкаПриЗаписи = Ложь;
		
		ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
		
		Если Не ОшибкаПриЗаписи Тогда
			
			ТабДанныхстр = ТабДанных.Добавить();
			
			ТабДанныхСтр.ТорговаяТочка   = СтруктураДанных.ТорговаяТочка;
			ТабДанныхСтр.КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
			
			Если  СтруктураДанных.Свойство("Удаление") Тогда
				Если ЗначениеЗаполнено(СтруктураДанных.Удаление) Тогда
					СпрОб = СтруктураДанных.Сотрудник.ПолучитьОбъект();
					
					НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения", СтруктураДанных.Удаление, СтруктураДанных.Период));
					Если НайденнаяСтрока.Количество() Тогда
						СпрОб.ПройденныеТренинги.Удалить(НайденнаяСтрока[0]);
					КонецЕсли;
					СпрОб.Записать();
				КонецЕсли; 
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураДанных);
			ТекСтр.Представление = СтруктураДанных.Представление;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, СтруктураДанных.Представление,СтруктураДанных.КоличествоЧасов, СтруктураДанных.ТорговаяТочка);
		Иначе	
			Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗаписиВРегистре(Данные)
	
	НЗ = РегистрыСведений.ТабельРаботыТилси.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(Данные.Период);
	НЗ.Отбор.Сотрудник.Установить(Данные.Сотрудник);
	НЗ.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыТилси.СоздатьМенеджерЗаписи();
	Запись.Группа 	 = ГруппаТорговыхТочек;
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость(Открытие = Ложь)
	
	ЕстьДанные = (ТаблицаСотрудникПериод.Количество() > 0);
	
	Элементы.ДобавитьФизЛицо.Видимость 				= НЕ ЕстьДанные
													И НЕ Открытие;
	Элементы.ДобавитьФизЛицоСлева.Видимость 		= ЕстьДанные;
	Элементы.ПереместитьТекущееФизЛицо.Видимость	= ЕстьДанные;
	
	#Если ВебКлиент Тогда
		Элементы.ПереместитьТекущееФизЛицо.Видимость = Ложь;
	#КонецЕсли
	
	Элементы.ИзменитьОбласть.Видимость	            = ЕстьДанные ИЛИ НЕ Открытие;
	Элементы.ОчиститьОбласть.Видимость	            = ЕстьДанные ИЛИ НЕ Открытие;
	
	Элементы.ТабличныйДокументКонтекстноеМенюОчиститьОбласть.Видимость = ЕстьДанные ИЛИ НЕ Открытие;
	Элементы.ТабличныйДокументКонтекстноеМенюИзменитьОбласть.Видимость = ЕстьДанные ИЛИ НЕ Открытие;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметраСеанса) Экспорт
	
	Возврат ПараметрыСеанса[ИмяПараметраСеанса];
	
КонецФункции

&НаСервере
Процедура ДобавитьПервоеФизЛицоВГрафик(Знач ФизЛицо)
	
	ТабличныйДокумент.Очистить();
	                                
	Макет = ПолучитьМакетНаСервере();
	ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
	ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьШапкаСотрудник.Параметры.ФИО = СокрЛП(ФизЛицо);
	
	СтруктураСотрудника = ПолучитьСтруктуруТекущегоСотрудника(ФизЛицо);

	ЗаполнитьЗначенияСвойств(ОбластьШапкаСотрудник.Параметры, СтруктураСотрудника);
	
	ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", ФизЛицо, СтруктураСотрудника.КодСотрудника, СтруктураСотрудника.Телефон);
	
	ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
	
	Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период 			= Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью 	= Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
		
		// Добаление пустой строки с периодом
		СтрВход = ТаблицаСотрудникПериод.Добавить();
		СтрВход.Сотрудник 	= ФизЛицо;
		СтрВход.Период 		= НачалоПериода;
		
		ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Период", НачалоПериода);
		
		ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");
		
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ПолучитьМакет("График");
	
КонецФункции

&НаКлиенте
Функция ПроверитьНаличиеСотрудникаВГрафике(Сотрудник)

	НаличиеСотрудника = Ложь;
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 		= ТабличныйДокумент.ШиринаСтраницы;
	
	// Расшифровка всегда в четной колонке
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = Сотрудник Тогда
			НаличиеСотрудника = Истина;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;
	
	Возврат НаличиеСотрудника;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеСотрудникаВГрафикеСервер(Сотрудник)

	НаличиеСотрудника = Ложь;
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 		= ТабличныйДокумент.ШиринаСтраницы;
	
	// Расшифровка всегда в четной колонке
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = Сотрудник Тогда
			НаличиеСотрудника = Истина;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;
	
	Возврат НаличиеСотрудника;
	
КонецФункции

&НаСервере
Процедура РаздвинутьОбластьНаСервере(КолонкаИсточник, Сотрудник)
	
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		НовСтр = ТаблицаСотрудникПериод.Добавить();
		НовСтр.Сотрудник 	= Сотрудник;
		НовСтр.Период 		= НачалоПериода;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	КолонкаПриемник = КолонкаИсточник; 
	
	// Колонка источник всегда четная, в области 2 колонки
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + КолонкаИсточник + ":C" + (КолонкаИсточник+1)), ТабличныйДокумент.Область("C" + КолонкаПриемник + ":C" + (КолонкаПриемник+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	//Очистим новую область
	ТекОбласть = ТабличныйДокумент.Область("C" + КолонкаПриемник + ":C" + (КолонкаПриемник+1));
	ТекОбласть.Очистить();
	
	// Цвет
	ТекОбласть.ЦветФона = WebЦвета.Белый;
	
	СтруктураСотрудника = ПолучитьСтруктуруТекущегоСотрудника(Сотрудник);

	ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Параметр = СокрЛП(Сотрудник); 
	ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Значение = СокрЛП(Сотрудник);
	
	ТабличныйДокумент.Область("R4C" + КолонкаПриемник).Параметр = (СтруктураСотрудника.КодСотрудника);
	ТабличныйДокумент.Область("R5C" + КолонкаПриемник).Параметр = (СтруктураСотрудника.Телефон);
	ТабличныйДокумент.Область("R6C" + КолонкаПриемник).Параметр = (СтруктураСотрудника.Должность);
	
	ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", Сотрудник, СтруктураСотрудника.КодСотрудника, СтруктураСотрудника.Телефон);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокФизЛицВТабеле(НовоеФизЛицо, ТекущееФизЛицо)
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	ТЗ.Сортировать("Порядок, Сотрудник");
	
	НайденнаяСтрока = ТЗ.Найти(ТекущееФизЛицо, "Сотрудник");
	Если НайденнаяСтрока = Неопределено Тогда
		ПорядокТекПродавца = 1;
	Иначе	
		ПорядокТекПродавца = НайденнаяСтрока.Порядок;
	КонецЕсли;
	
	Для Каждого Стр Из ТЗ Цикл
		Если ПорядокТекПродавца <= Стр.Порядок Тогда
			Стр.Порядок = Стр.Порядок + 1;
		КонецЕсли;
	КонецЦикла;	
		
	// Если продавец был в ТЗ, тогда присвоение порядка текущего продавца
	СтрНовогоФЛ =  ТЗ.Найти(НовоеФизЛицо, "Сотрудник");
	Если СтрНовогоФЛ = Неопределено Тогда
		НовСтр = ТЗ.Добавить();
		НовСтр.Сотрудник 	 	= НовоеФизЛицо;
		НовСтр.КодСотрудника 	= НовоеФизЛицо.Код;
		НовСтр.Порядок   	 	= ПорядокТекПродавца;
	Иначе
		СтрНовогоФЛ.Порядок = ПорядокТекПродавца;
	КонецЕсли;
	
	ТЗ.Сортировать("Порядок, Сотрудник");
	
	// Обновление порядка
	Порядок = 1;
	Для Каждого Стр Из ТЗ Цикл
		Стр.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// Обновление спеифики
	НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляТилси.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	НаборЗаписей.Записать();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		
		Запись.Группа 			= ГруппаТорговыхТочек;
		Запись.ФизическоеЛицо 	= Стр.Сотрудник;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
 
	ЗначениеВРеквизитФормы(ТЗ, "ИнформацияПоСотрудникам");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСотрудников()
	
	СписокСотрудников = Новый СписокЗначений;
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	СписокСотрудников.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Сотрудник"));
	
	Возврат СписокСотрудников;
	
КонецФункции

&НаСервере
Процедура ПеренестиФизЛицоВТабеле(ТекущаяКолонка, ФизЛицо)
	
	НачальнаяКолонка = 4;
	КонечнаяКолонка  = ТабличныйДокумент.ШиринаСтраницы;
	ИскомаяКолонкаФЛ = 4;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = ФизЛицо Тогда
			ИскомаяКолонкаФЛ = НачальнаяКолонка;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;	
	
	Если ТекущаяКолонка <> ИскомаяКолонкаФЛ Тогда
		
		// Колонка Искомая всегда четная, в области 2 колонки
		ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТабличныйДокумент.Область("C" + ИскомаяКолонкаФЛ + ":C" + (ИскомаяКолонкаФЛ+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		//Удаление области
		Если ТекущаяКолонка > ИскомаяКолонкаФЛ Тогда
			ТекущаяКолонка = ТекущаяКолонка+2;
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьГрафикНаСервере(ДанныеКопирования)
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаСотрудникПериод");
	
	ТаблицаДанных = ТЗ.Скопировать();
	ТаблицаДанных.Очистить();
	
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник", ДанныеКопирования.ФизическоеЛицо));
	Если НайденныеСтроки.Количество() Тогда
		
		НП = НачалоДня(ДанныеКопирования.НачалоПериода);
		КП = КонецДня(ДанныеКопирования.КонецПериода);
		
		Для Каждого СтрокаМассива Из НайденныеСтроки Цикл
						
			Если СтрокаМассива.Период >= НП
					И СтрокаМассива.Период <= КП
					И СтрокаМассива.Период < НачалоДня(ТекущаяДата()) Тогда
				Сообщить("Вам не разрешено редактировать график прошедшего времени");
				Возврат;
			КонецЕсли;

			Если СтрокаМассива.Период >= НП
					И СтрокаМассива.Период <= КП Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Сотрудник, с которого производится копирование не найден в графике");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Данные = Новый Структура;
		Данные.Вставить("Сотрудник", ТекущийПродавец);
		
		// Очистка записей регистра (Период, Сотрудник, Группа)
		Если ЗначениеЗаполнено(ТекущийПродавец)
				И ЗначениеЗаполнено(ГруппаТорговыхТочек)
				И ЗначениеЗаполнено(СтрокаТЗ.Период) Тогда
			ДанныеОчистки = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, СтрокаТЗ.Период);
			ОчиститьЗаписиВРегистре(ДанныеОчистки);
		КонецЕсли;
		
		Строки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Период", ТекущийПродавец, СтрокаТЗ.Период));
		Если Строки.Количество()Тогда
			
			Данные.Вставить("Период", СтрокаТЗ.Период);
			
			ТекСтр = Строки[0];
			ТабДанных = ТекСтр.ТаблицаДанных;
			ТабДанных.Очистить();
			
			Представление   = "";
			КоличествоЧасов = 0;
			ТорговаяТочка = Неопределено;
			
			Для Каждого Стр Из СтрокаТЗ.ТаблицаДанных Цикл
				
				// Первая ТТ для раскраски макета
				Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
					ТорговаяТочка = Стр.ТорговаяТочка;	
				КонецЕсли;
				
				Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
				Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
				ОшибкаПриЗаписи = Ложь;
				ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
				
				Если Не ОшибкаПриЗаписи Тогда
					
					ЗаполнитьЗначенияСвойств(ТабДанных.Добавить(), Стр);
					
					Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
					КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
					
				Иначе
					Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
				КонецЕсли;
				
			КонецЦикла;
			
			ПредставлениеТабличныйДокумент = Представление;
			
			ТекСтр.ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент;
			ТекСтр.Представление   					= Представление;
			ТекСтр.КоличествоЧасов 					= КоличествоЧасов;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаСотрудникПериод");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВоВременномХранилище()
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	МассивФизЛиц = ТЗ.ВыгрузитьКолонку("Сотрудник");
	
	Адрес = ПоместитьВоВременноеХранилище(МассивФизЛиц);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура УстановитьПериодПоУмолчанию()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1) КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, 2) КАК ДатаОкончания");
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ГраницаЗапретаРедактирования = Константы.ГраницаЗапретаРедактированияГрафикаПродавцов.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Период.ДатаНачала 		= Макс(ГраницаЗапретаРедактирования + 86400, НачалоДня(Выборка.ДатаНачала));
		Период.ДатаОкончания 	= КонецДня(Выборка.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЦветовТТ()
	
	ТаблицаЦветовТТ.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.ЦветТорговойТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧерныйЦвет = Новый Цвет(0, 0, 0);
	
	Пока Выборка.Следующий()Цикл
		
		ЦветТТ = Выборка.ЦветТорговойТочки.Получить();
		Если ЦветТТ <> Неопределено Тогда
			Если ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка 	= Выборка.ТорговаяТочка;
				НоваяСтр.Цвет 			= ЦветТТ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппуТорговойТочкиСервер(СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО КАК ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.ЦФО;
	Иначе
		
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	РедактированиеОбластей = ДополнительныеПараметры.Свойство("ТекДанные") И Ложь;
	
	РедактированиеОбластей = Мин(РедактированиеОбластей, РедактированиеТабДокумента);
	
	Если РедактированиеОбластей Тогда 
		ТекДанные = ДополнительныеПараметры.ТекДанные;
	Иначе
		ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные; 
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура")Тогда
		
		Если РедактированиеОбластей Тогда
			
			Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки.Очистить();
			
			Для каждого Идентификатор из МассивИдентификаторов Цикл
				Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки.Добавить(Идентификатор);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки Цикл
			
			ТекущаяСтрока = ТаблицаСотрудникПериод.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			ТекущаяСтрока.Сотрудник       = ТекущийПродавец;
			ТекущаяСтрока.Представление   = Результат.Представление;
			ТекущаяСтрока.КоличествоЧасов = Результат.КоличествоЧасов;
			
			ТекущаяСтрока.ТаблицаДанных.Очистить();
			
			Для каждого ЭлементМассива Из Результат.ТаблицаДанных Цикл
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока.ТаблицаДанных.Добавить(), ЭлементМассива); 
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаполнитьТаблицуДанныхСтроки(Результат);
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение()

&НаСервере
// Предназначена для заполнения параметров формы данными по текущему пользователю
//
Процедура ЗаполнитьПараметрыФормы()
	
	ЗаполнениеОтветственныхПользователейСервер();
	
	//Группа торговых точек, без возможности изменения
	СтруктураПараметров = Новый ФиксированнаяСтруктура(РегистрыСведений.ПараметрыРасчетаЗпТилси.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Использовать", Истина)));
	ГруппаТорговыхТочек = СтруктураПараметров.ГруппаТорговыхТочек;

	Параметры.Свойство("ОткрыватьФорму", ОткрыватьФорму);
	
КонецПроцедуры // ЗаполнитьПараметрыФормы()

&НаСервере
//Процедура обновляет видимость основных элементов формы сервер
//
Процедура ОбновитьВидимостьЭлементовСервер() 
	
	//Ограничение возможности редактирования графика Продавцам
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	РольПомощникСторонняяРозница = РольДоступна("ПомощникСторонняяРозница");
	
	РольПродавец = РольДоступна("Продавец");
	
	ЭтоПродавец = РольПродавец И НЕ РольПолныеПрава И НЕ ЗначениеЗаполнено(ТекущийПомощник) И НЕ РольПомощникСторонняяРозница;
	
	Если ЭтоПродавец Тогда
		
		Попытка
			Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
		Исключение
		КонецПопытки;
		
		Элементы.Магазин.Видимость = НЕ ЭтоПродавец;
		Элементы.Декорация1.Видимость = НЕ ЭтоПродавец;
		
	КонецЕсли;
	
	Элементы.ГруппаРедактированиеОбластейОсновная.Видимость = Не ЭтоПродавец;
	
	РедактированиеТабДокумента = Ложь ; //Попросили вернуть табличную часть торговых точек
	
	Элементы.ГруппаРедактированиеОбластей.Видимость = РедактированиеТабДокумента;
	Элементы.ГруппаРедактированиеОбластейКонтекст.Видимость = РедактированиеТабДокумента;
		
КонецПроцедуры // ОбновитьВидимостьЭлементов()

&НаСервере
//Функция возвращает текст запроса для заполнения макета обработки
//
// Возвращаемое значение:
//   <Тип.Строка>   - Текст запроса
//
Функция ПолучитьТекстЗапросаДляЗаполненияМакета()
	
	Возврат 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабельРаботыТилси.Период КАК Период,
	|	ТабельРаботыТилси.Сотрудник КАК Сотрудник,
	|	ТабельРаботыТилси.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыТилси.ТорговаяТочка,
	|	ТабельРаботыТилси.КоличествоЧасов КАК КоличествоЧасов,
	|	ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0) КАК Порядок,
	|	ТабельРаботыТилси.Сотрудник.Должность КАК Должность,
	|	ТабельРаботыТилси.Вид КАК Вид,
	|	ТабельРаботыТилси.Тип КАК Тип,
	|	ТабельРаботыТилси.Значение КАК Значение,
	|	Таб_КонтактнаяИнформация.Телефон КАК Телефон
	|ИЗ
	|	РегистрСведений.ТабельРаботыТилси КАК ТабельРаботыТилси
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляТилси КАК СпецификаФормированияТабеля
	|		ПО (&ГруппаТорговыхТочек = СпецификаФормированияТабеля.Группа)
	|			И ТабельРаботыТилси.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КонтактнаяИнформация.Объект КАК Объект,
	|			МАКСИМУМ(ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 50)) КАК Телефон
	|		ИЗ
	|			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ГДЕ
	|			ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.ФизическиеЛица).СотрудникТилси
	|			И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КонтактнаяИнформация.Объект) КАК Таб_КонтактнаяИнформация
	|		ПО ТабельРаботыТилси.Сотрудник = Таб_КонтактнаяИнформация.Объект
	|ГДЕ
	|	ТабельРаботыТилси.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (ТабельРаботыТилси.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|				И ТабельРаботыТилси.ТорговаяТочка В (&ТорговаяТочка)
	|			ИЛИ ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Сотрудник,
	|	Период
	|ИТОГИ
	|	МАКСИМУМ(КодСотрудника),
	|	СУММА(КоличествоЧасов),
	|	МАКСИМУМ(Порядок),
	|	МАКСИМУМ(Должность),
	|	МАКСИМУМ(Телефон)
	|ПО
	|	Сотрудник,
	|	Период
	|АВТОУПОРЯДОЧИВАНИЕ";
	
КонецФункции

&НаСервере
//Процедура заполняет данные выполняет запрос и обрабатывает выборки 
//
// Параметры:
//   <Тип.Запрос>   - Запрос для выполнения
// 
Процедура ОбработатьРезультатЗапроса(Запрос) 
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ВыборкаСотрудник = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудник.Следующий()Цикл
			
			ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникам.Добавить(), ВыборкаСотрудник);
			
			ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПериод.Следующий()Цикл
				
				НоваяСтрока = ТаблицаСотрудникПериод.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
				
				Представление   = "";
				
				ДетальнаяВыборка = ВыборкаПериод.Выбрать();
				
				Пока ДетальнаяВыборка.Следующий()Цикл
					
					НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
					
					Если НЕ ЗначениеЗаполнено(ДетальнаяВыборка.Вид) Тогда
						Представление = Представление + ДетальнаяВыборка.ТорговаяТочка + " (" + ДетальнаяВыборка.КоличествоЧасов + " ч.),";
					ИначеЕсли ДетальнаяВыборка.Вид = "Выход" Тогда
						Представление = Представление + ПолучитьПрефиксВыхода(ДетальнаяВыборка.Тип) + ДетальнаяВыборка.ТорговаяТочка + " (" + ДетальнаяВыборка.КоличествоЧасов + " ч.),";
					Иначе
						Представление = Представление + ДетальнаяВыборка.Вид + ","; 
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Представление) Тогда
					Представление = Лев(Представление, СтрДлина(Представление)-1);
				КонецЕсли;
				
				НоваяСтрока.Представление = Представление;
				НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Процедура заполняет данные выледеленных строк и инициирует обновление записей в регистре 
//
// Параметры:
//   <Тип.Структура>   - Структура параметров
// 
Процедура ЗаполнитьТаблицуДанныхСтроки(СтруктураДанных)
	
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекущаяСтрока = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
		
		Данные = Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекущаяСтрока.Период);
		
		Если ЗначениеЗаполнено(ТекущийПродавец)	И ЗначениеЗаполнено(ТекущаяСтрока.Период) Тогда
			ОчиститьЗаписиВРегистре(Данные);
		КонецЕсли;
		
		Для Каждого Строка Из ТекущаяСтрока.ТаблицаДанных Цикл
			
			ОшибкаПриЗаписи = Ложь;
			
			ОбновитьЗаписиРегистраСведений(ТекущаяСтрока, Строка, ОшибкаПриЗаписи);
			
			Если Не ОшибкаПриЗаписи Тогда
				ОбновитьДанныеВТабличномДокументе(ТекущаяСтрока.Период, СтруктураДанных.Представление, СтруктураДанных.КоличествоЧасов, СтруктураДанных.ТорговаяТочка);
			КонецЕсли;
			
		КонецЦикла;
		
		//Очистка ячейки
		Если ТекущаяСтрока.ТаблицаДанных.Количество() = 0 Тогда
			ОбновитьДанныеВТабличномДокументе(ТекущаяСтрока.Период, СтруктураДанных.Представление, СтруктураДанных.КоличествоЧасов, СтруктураДанных.ТорговаяТочка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
//Обновление записей регистра сведений "Табель работы сотрудников (Тилси)"
//
Процедура ОбновитьЗаписиРегистраСведений(ТекущаяСтрока, СтрокаДанных, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыТилси.СоздатьМенеджерЗаписи();
	
	Запись.Период    = ТекущаяСтрока.Период;
	Запись.Группа    = ГруппаТорговыхТочек;
	Запись.Сотрудник = ТекущаяСтрока.Сотрудник;
	Запись.Вид       = СтрокаДанных.Вид;
	Запись.Тип       = СтрокаДанных.Тип;
	
	Запись.ТорговаяТочка = СтрокаДанных.ТорговаяТочка;
	
    Запись.Значение = СтрокаДанных.Значение;

	Запись.КоличествоЧасов = СтрокаДанных.КоличествоЧасов;
	
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(СтрЗаменить("Данные за Период не записаны! ", "Период", Формат(Запись.Период, "ДФ=dd.MM.yyyy")) + ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
//Функция формирует и возвращает префикс для представления торговых точек
//
// Параметры
// Тип  - <Тип.Строка> - Тип сотрудника (Полный, Стажер)
//
// Возвращаемое значение:
//   <Тип.Строка>   - префикс
//
Функция ПолучитьПрефиксВыхода(Тип)
	
	Если Тип = "Ночной" Тогда
		Возврат "н, ";
	ИначеЕсли Тип = "Стажер" Тогда
		Возврат "ст, ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции //ПолучитьПрефиксВыхода()

&НаКлиенте
// Возвращает полный путь к форме внешней обработки, отчета или любого объекта метаданных в виде
// ВнешняяОбработка.ИмяВнешнейОбработки.Форма.ИмяФормы
// ВнешнийОтчет.ИмяВнешнегоОтчета.Форма.ИмяФормы
// Документ.ИмяОбъекта.Форма.ИмяФормы
//
// Параметры
//  ИмяФормы  - - имя формы объекта
//
// Возвращаемое значение:
//      - полный путь к форме
//
Функция ПолучитьПолноеИмяФормы(ИмяФормы) 

    СимволТочка = ".";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции

&НаКлиенте
// Формирует массив идентификаторов для заполнения выбранных ячеек данными
//
// Возвращаемое значение:
//   <Тип.Булево>   - Признак сформирован массив или нет
//
Функция ОбновитьМассивИдентификаторовПериодовРасшифровки() 
	
	МассивИдентификаторов = Новый Массив();
	МассивПериодов = Новый Массив();
	
	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево <> Элементы.ТабличныйДокумент.ТекущаяОбласть.Право-1 Тогда
		Сообщить(НСтр("ru = 'Запрещено указывать торговые точки нескольким сотрудникам одновременно!';"));
		Возврат Ложь;
	КонецЕсли;
		
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;

	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;

	НачалоВыделеннойОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	КонецВыделеннойОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ;
	
	Пока НачалоВыделеннойОбласти <= КонецВыделеннойОбласти Цикл
		
		Расшифровка = ТабличныйДокумент.Область(НачалоВыделеннойОбласти, НомерКолонкиРасшифровки, НачалоВыделеннойОбласти, НомерКолонкиРасшифровки).Расшифровка;
		
		Если Расшифровка  <> Неопределено И Расшифровка.Свойство("Период") Тогда
			МассивПериодов.Добавить(Расшифровка.Период);
		КонецЕсли;
		
		НачалоВыделеннойОбласти = НачалоВыделеннойОбласти + 1;
		
	КонецЦикла;
	
	Для каждого ТекущийПериод из МассивПериодов Цикл
		НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекущийПериод));
		Если НайденныеСтроки.Количество() = 1 Тогда
			МассивИдентификаторов.Добавить(НайденныеСтроки[0].ПолучитьИдентификатор());     
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&Насервере
//Функция возвращает структуру дополнительных реквизитов по сотруднику
//
Функция ПолучитьСтруктуруТекущегоСотрудника(ТекущийПродавец) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Должность,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ТекущийПродавец <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА ВЫРАЗИТЬ(&ТекущийПродавец КАК Справочник.ФизическиеЛица).Код
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК КодСотрудника,
	|	МАКСИМУМ(ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 50)) КАК Телефон
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = ФизическиеЛица.Ссылка)
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ТекущийПродавец
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Должность";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущийПродавец", ТекущийПродавец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтруктураСотрудника = Новый Структура();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураСотрудника.Вставить("Должность", Выборка.Должность);
			СтруктураСотрудника.Вставить("Телефон", Выборка.Телефон);
			СтруктураСотрудника.Вставить("КодСотрудника", Выборка.КодСотрудника);
			
		КонецЦикла;
		
		Возврат СтруктураСотрудника;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&Насервере
Процедура ЗаполнениеОтветственныхПользователейСервер() 
	
	СтрукрураПараметров = РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(ПараметрыСеанса.ТекущийПользователь, Ложь);
	
	Если СтрукрураПараметров <> Неопределено Тогда
		
		СтрукрураПараметров.Свойство("ЦФО", ГруппаТорговыхТочек);
		
		Если СтрукрураПараметров.ЭтоУправляющий Тогда
			ТекущийУправляющий = СтрукрураПараметров.Сотрудник;
		ИначеЕсли СтрукрураПараметров.ЭтоПомощник Тогда
			ТекущийПомощник = СтрукрураПараметров.Сотрудник;
			ТекущийПомощникАвто = ТекущийПомощник; 
		КонецЕсли;
		
		//ОбновитьВозможностьИзмененияВариантаПостроения(Ложь);
		//
		//ОбновитьЗаголовокФормы();
		
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти



