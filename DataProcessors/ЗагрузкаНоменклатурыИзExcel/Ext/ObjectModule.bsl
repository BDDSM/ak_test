
Перем ИДВиртуальногоКонтрагента;
Перем ГруппаВиртуальныхКонтрагентов;
Перем ГруппаПоставщикиТовара;

#Область ПрограммныйИнтерфейс

//+++АК LATV 2018.09.06 ИП-00019632
Процедура ВыполнитьОбработкуВФоне(Параметры, АдресХранилища) Экспорт

	Если Параметры.Действие = "Заполнение" Тогда
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("xls");
		Параметры.ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ЭтотОбъект.ИмяФайла = ВременныйФайл;
		
		ЗагрузитьИзФайла();
		
		УдалитьФайлы(ВременныйФайл);
		
		Результат = Новый Структура;
		Результат.Вставить("ДанныеНоменклатуры",	ДанныеНоменклатуры.Выгрузить());
		Результат.Вставить("Склады",				Склады.Выгрузить());
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
	ИначеЕсли Параметры.Действие = "ОбработкаРезультата" Тогда
		
		ЭтотОбъект.ДанныеНоменклатуры.Загрузить(Параметры.ДанныеНоменклатуры);
		ЭтотОбъект.Склады.Загрузить(Параметры.Склады);
		
		СоздатьОбъекты();
		
		Результат = Новый Структура;
		Результат.Вставить("ДанныеНоменклатуры",	ДанныеНоменклатуры.Выгрузить());
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.09.06 ИП-00019632
Процедура ЗагрузитьИзФайла() Экспорт

	ДанныеНоменклатуры.Очистить();
	Склады.Очистить();
	
	ДанныеФайла = ПрочитатьДанныеИзФайла();
	ПолучитьИПроверитьДанныеИз1С(ДанныеФайла);

КонецПроцедуры

//+++АК LATV 2018.09.11 ИП-00019632
Процедура СоздатьОбъекты() Экспорт

	ВыбранныеСтроки = ДанныеНоменклатуры.НайтиСтроки(Новый Структура("ЕстьОшибки", Ложь));
	Для Каждого ТекСтрокаНоменклатуры Из ВыбранныеСтроки Цикл
		
		Если Не ТекСтрокаНоменклатуры.ХарактеристикаНоменклатуры.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаНоменклатуры.Контрагент.Пустая() Тогда
			НовыйКонтрагент = СоздатьКонтрагента(ТекСтрокаНоменклатуры);
			Если НовыйКонтрагент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСтрокиТаблицыНовымЗначением(НовыйКонтрагент, "Контрагент");
			
		//+++АК CISA 2018.11.16 ИП-00019632.02
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаНоменклатуры.Контрагент, "ВАрхиве") Тогда
			Справочники.Контрагенты.ВосстановитьИзАрхива(ТекСтрокаНоменклатуры.Контрагент);
		//---АК CISA
		
		КонецЕсли;
		
		//+++АК CISA 2018.11.16 ИП-00019632.02
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаНоменклатуры.Поставщик, "ВАрхиве") Тогда
			Справочники.Контрагенты.ВосстановитьИзАрхива(ТекСтрокаНоменклатуры.Поставщик);
		КонецЕсли;
		//---АК CISA
		
		Если ТекСтрокаНоменклатуры.Номенклатура.Пустая() Тогда
			НоваяНоменклатура = СоздатьНоменклатуру(ТекСтрокаНоменклатуры);
			Если НоваяНоменклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСтрокиТаблицыНовымЗначением(НоваяНоменклатура, "Номенклатура");
			
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаНоменклатуры.Номенклатура, "ПометкаУдаления") Тогда
			НоваяНоменклатура = ОживитьНоменклатуру(ТекСтрокаНоменклатуры);
			Если НоваяНоменклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяХарактеристика = СоздатьХарактеристику(ТекСтрокаНоменклатуры);
		Если НоваяХарактеристика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьСтрокиТаблицыНовымЗначением(НоваяХарактеристика, "ХарактеристикаНоменклатуры");
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Заполнение

//+++АК LATV 2018.09.10 ИП-00019632
Функция ПрочитатьДанныеИзФайла()

	Колонки1С = Новый Массив;
	Колонки1С.Добавить("НомерСтроки");
	
	Колонки1С.Добавить("Номенклатура");
	Колонки1С.Добавить("ГруппаНоменклатуры");
	Колонки1С.Добавить("БазоваяЕдиницаИзмерения");
	Колонки1С.Добавить("Весовой");
	Колонки1С.Добавить("СтавкаНДС");
	Колонки1С.Добавить("КатегорияАссортимента");
	Колонки1С.Добавить("ГруппаНоменклатурыУРЗ");
	Колонки1С.Добавить("КодТНВЭД");
	Колонки1С.Добавить("Контрагент");
	Колонки1С.Добавить("ТипСрокаГодности");
	Колонки1С.Добавить("СтранаПроисхождения");
	Колонки1С.Добавить("РольТехнолога");
	Колонки1С.Добавить("Поставщик");
	Колонки1С.Добавить("МестоВыкладки");
	Колонки1С.Добавить("ТорговаяМарка");
	Колонки1С.Добавить("ХарактеристикаНоменклатуры");
	Колонки1С.Добавить("УсловноеЗадвоение_Номенклатура");
	Колонки1С.Добавить("УсловноеЗадвоение_Аналог");
	Колонки1С.Добавить("ПродукцияВетис");
	
	Колонки1С.Добавить("Ошибки");
	Колонки1С.Добавить("ЕстьОшибки");
	
	
	ДанныеФайла = ДанныеНоменклатуры.ВыгрузитьКолонки();
	Для Каждого Колонка Из Колонки1С Цикл
		ДанныеФайла.Колонки.Удалить(Колонка);
	КонецЦикла;
	
	Колонки = ДанныеФайла.Колонки;
	
	// Чтение
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	Для НомерСтроки = 3 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		// В первых 2х колонках наименование и id номенклатуры. Если они не заполнены, считаем, что таблица закончилась
		Если ПустаяСтрока(ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, 1).Текст)
		   И ПустаяСтрока(ТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, 2).Текст) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ДанныеФайла.Добавить();
		НоваяСтрока.НомерСтрокиФайла = НомерСтроки;
		
		НомерКолонки = 0;
		Для Каждого Колонка Из Колонки Цикл
			
			Если Колонка.Имя = "НомерСтрокиФайла" Тогда
				Продолжить;
			КонецЕсли;
			
			НомерКолонки = НомерКолонки + 1;
			Значение = СокрЛП(ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				Попытка
					Значение = Число(Значение);
				Исключение
				КонецПопытки;
				
				Попытка
					Значение = Булево(Значение);
				Исключение
					Значение = ЗначениеЗаполнено(Значение);
				КонецПопытки;
			КонецЕсли;
			
			НоваяСтрока[Колонка.Имя] = Значение;
			
			// Пост обработка
			Если Колонка.Имя = "КодТехнолога" Тогда
				Если ПустаяСтрока(НоваяСтрока[Колонка.Имя]) Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					Число = Число(НоваяСтрока[Колонка.Имя]);
					НоваяСтрока[Колонка.Имя] = Формат(Число, "ЧЦ=5; ЧВН=0; ЧГ=0");
				Исключение
				КонецПопытки;
				
			//+++АК CISA 2018.11.16 ИП-00019632.02
			ИначеЕсли Колонка.Имя = "СтавкаНДСЗначение" Тогда
				Если ПустаяСтрока(НоваяСтрока[Колонка.Имя]) Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					НоваяСтрока[Колонка.Имя] = ""+Число(НоваяСтрока[Колонка.Имя])*100+"%";
				Исключение
				КонецПопытки;
			ИначеЕсли Колонка.Имя = "КодКлассификатораТНВЭД" Тогда
				НоваяСтрока[Колонка.Имя] = СтрЗаменить(Значение," ","");
			ИначеЕсли Колонка.Имя = "НаименованиеТипаСрокаГодности" Тогда
				Если ВРег(Лев(СокрЛП(СтрЗаменить(Значение," ","")),11)) = "НЕОГРАНИЧЕН" Тогда
					НоваяСтрока["СрокГодности"] = "999";
					НоваяСтрока["НаименованиеТипаСрокаГодности"] = "Год";	
				КонецЕсли;	
			ИначеЕсли Колонка.Имя = "ТемператураХраненияДо" Тогда
				Если НоваяСтрока["ТемператураХраненияДо"] - НоваяСтрока["ТемператураХраненияОт"] < 0 Тогда
					ТемператураХраненияОт = НоваяСтрока["ТемператураХраненияОт"];
					НоваяСтрока["ТемператураХраненияОт"] = НоваяСтрока["ТемператураХраненияДо"];
					НоваяСтрока["ТемператураХраненияДо"] = ТемператураХраненияОт;
				КонецЕсли;
			КонецЕсли;
			//---АК CISA
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеФайла;

КонецФункции

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ЗаполнитьСклады(ДанныеФайла)

	Для Каждого ТекСтрокаФайла Из ДанныеФайла Цикл
		СкладыХранения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтрокаФайла.СкладХранения, ";", Истина);
		Для Каждого Склад Из СкладыХранения Цикл
			НоваяСтрока = Склады.Добавить();
			НоваяСтрока.НомерСтрокиФайла	= ТекСтрокаФайла.НомерСтрокиФайла;
			НоваяСтрока.НаименованиеСклада	= СокрЛП(Склад);
		КонецЦикла;
	КонецЦикла;
	
	// Поиск складов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Склады.НомерСтрокиФайла,
		|	Склады.НаименованиеСклада КАК НаименованиеСклада
		|ПОМЕСТИТЬ втСклады
		|ИЗ
		|	&Склады КАК Склады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НаименованиеСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСклады.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	втСклады.НаименованиеСклада,
		|	ЕСТЬNULL(Склады.Ссылка, НЕОПРЕДЕЛЕНО) КАК Склад,
		|	ЕСТЬNULL(Склады.Владелец, НЕОПРЕДЕЛЕНО) КАК СтруктурнаяЕдиница
		|ИЗ
		|	втСклады КАК втСклады
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО втСклады.НаименованиеСклада = Склады.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиФайла");
	
	Запрос.УстановитьПараметр("Склады", Склады.Выгрузить());
	
	Склады.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПолучитьИПроверитьДанныеИз1С(ДанныеФайла)

	// Ставки НДС
	СтавкиНДС				= ЗначенияПеречисления("СтавкиНДС");
	КатегорииАссортимента	= ЗначенияПеречисления("КатегорииАссортимента");
	
	// Склады
	ЗаполнитьСклады(ДанныеФайла);
	
	Выборка = СопоставитьДанныеФайлаИ1С(ДанныеФайла);
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.Номенклатура				= ?(Выборка.НоменклатураПоID = Неопределено, Выборка.НоменклатураПоНаименованию, Выборка.НоменклатураПоID);
		НоваяСтрока.ГруппаНоменклатуры			= ?(Выборка.ГруппаНоменклатурыПоID = Неопределено, Выборка.ГруппаНоменклатурыПоНаименованию, Выборка.ГруппаНоменклатурыПоID);
		НоваяСтрока.Контрагент					= ?(Выборка.КонтрагентПоID = Неопределено, Выборка.КонтрагентПоНаименованию, Выборка.КонтрагентПоID);
		НоваяСтрока.ХарактеристикаНоменклатуры	= Выборка.ХарактеристикаПоНаименованию;
		
		Если Не НоваяСтрока.Номенклатура.Пустая() Тогда
			НоваяСтрока.Весовой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "Весовой");
		Иначе
			НоваяСтрока.Весовой = ВРег(НоваяСтрока.ЕдиницаИзмерения) = "КГ";
			
			Если НоваяСтрока.Весовой Тогда
				
				НоваяСтрока.Вес = 1;
				
				Если ПустаяСтрока(НоваяСтрока.УпаковкаДляЦенника) Тогда
					НоваяСтрока.УпаковкаДляЦенника = "1кг";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДС				= СтавкиНДС.Получить(НоваяСтрока.СтавкаНДСЗначение);
		НоваяСтрока.КатегорияАссортимента	= КатегорииАссортимента.Получить(НоваяСтрока.КатегорияАссортиментаЗначение);
		
		НоваяСтрока.ЕстьОшибки = Не ПроверитьДанныеСтроки(НоваяСтрока, Выборка, НоваяСтрока.Ошибки);
		
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Функция СопоставитьДанныеФайлаИ1С(ДанныеФайла)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеФайла.НомерСтрокиФайла,
		|	ДанныеФайла.НаименованиеТовара,
		|	ДанныеФайла.id_tov,
		|	ДанныеФайла.ТоварнаяГруппа,
		|	ДанныеФайла.id_group,
		|	ДанныеФайла.ЕдиницаИзмерения,
		|	ДанныеФайла.Вес,
		|	ДанныеФайла.КороткийСрокГодности,
		|	ДанныеФайла.ТребуетсяВетеринарныйСертификат,
		|	ДанныеФайла.Складируемая,
		|	ДанныеФайла.БезУпаковки,
		|	ДанныеФайла.СтавкаНДСЗначение,
		|	ДанныеФайла.КатегорияАссортиментаЗначение,
		|	ДанныеФайла.НаименованиеГруппыНоменклатурыУРЗ,
		|	ДанныеФайла.КодКлассификатораТНВЭД,
		|	ДанныеФайла.НаименованиеКонтрагента,
		|	ДанныеФайла.id_kontr,
		|	ДанныеФайла.НаименованиеТовараУПоставщика,
		|	ДанныеФайла.СрокГодности,
		|	ДанныеФайла.НаименованиеТипаСрокаГодности,
		|	ДанныеФайла.КоличествоВУпаковке,
		|	ДанныеФайла.НаименованиеСтраны,
		|	ДанныеФайла.КодСтраныПроисхождения,
		|	ДанныеФайла.УпаковкаДляЦенника,
		|	ДанныеФайла.КодТехнолога,
		|	ДанныеФайла.Технолог,
		|	ДанныеФайла.ТемператураХраненияОт,
		|	ДанныеФайла.ТемператураХраненияДо,
		|	ДанныеФайла.Белки,
		|	ДанныеФайла.Жиры,
		|	ДанныеФайла.Углеводы,
		|	ДанныеФайла.Штрихкод,
		|	ДанныеФайла.СкладХранения,
		|	ДанныеФайла.ЗакупочнаяЦена,
		|	ДанныеФайла.ИННПоставщика,
		|	ДанныеФайла.НаименованиеПоставщика,
		|	ДанныеФайла.НаименованиеМестаВыкладки,
		|	ДанныеФайла.НаименованиеТорговойМарки,
		|	ДанныеФайла.Ширина,
		|	ДанныеФайла.Глубина,
		|	ДанныеФайла.Высота,
		|	ДанныеФайла.УсловноеЗадвоение_Наименование,
		|	ДанныеФайла.УсловноеЗадвоение_id_tov,
		|	ДанныеФайла.КодПродукцииВетис,
		|	ДанныеФайла.НаименованиеПродукцииВетис,
		|	ДанныеФайла.ВидПродукцииВетис,
		|	ДанныеФайла.ТипПродукцииВетис
		|ПОМЕСТИТЬ втДанныеФайла
		|ИЗ
		|	&ДанныеФайла КАК ДанныеФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.id_tov,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Наименование
		|ПОМЕСТИТЬ втПоискНоменклатурыПоID
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО втДанныеФайла.id_tov = Номенклатура.id_tov
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И (НЕ Номенклатура.ПометкаУдаления
		|				ИЛИ Номенклатура.Выведена)
		|ГДЕ
		|	втДанныеФайла.id_tov <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.НаименованиеТовара,
		|	МАКСИМУМ(Номенклатура.Ссылка) КАК Номенклатура,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК Количество
		|ПОМЕСТИТЬ втПоискНоменклатурыПоНаименованию
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО втДанныеФайла.НаименованиеТовара = Номенклатура.Наименование
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И (НЕ Номенклатура.ПометкаУдаления
		|				ИЛИ Номенклатура.Выведена)
		|ГДЕ
		|	втДанныеФайла.id_tov = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеФайла.НаименованиеТовара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.id_group,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Наименование
		|ПОМЕСТИТЬ втПоискГруппыНоменклатурыПоID
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО втДанныеФайла.id_group = Номенклатура.id_group
		|			И (Номенклатура.ЭтоГруппа)
		|			И (НЕ Номенклатура.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.id_group <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.ТоварнаяГруппа,
		|	МАКСИМУМ(Номенклатура.Ссылка) КАК Номенклатура,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК Количество
		|ПОМЕСТИТЬ втПоискГруппыНоменклатурыПоНаименованию
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО втДанныеФайла.ТоварнаяГруппа = Номенклатура.Наименование
		|			И (Номенклатура.ЭтоГруппа)
		|			И (НЕ Номенклатура.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.id_group = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеФайла.ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.ЕдиницаИзмерения,
		|	КлассификаторЕдиницИзмерения.Ссылка КАК БазоваяЕдиницаИзмерения
		|ПОМЕСТИТЬ втПоискБазовойЕдиницыИзмерения
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|		ПО втДанныеФайла.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Наименование
		|			И (НЕ КлассификаторЕдиницИзмерения.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.ЕдиницаИзмерения <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.НаименованиеГруппыНоменклатурыУРЗ,
		|	ГруппыНоменклатурыУРЗ.Ссылка КАК ГруппаНоменклатурыУРЗ
		|ПОМЕСТИТЬ втПоискГруппыНоменклатурыУРЗ
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыНоменклатурыУРЗ КАК ГруппыНоменклатурыУРЗ
		|		ПО втДанныеФайла.НаименованиеГруппыНоменклатурыУРЗ = ГруппыНоменклатурыУРЗ.Наименование
		|			И (НЕ ГруппыНоменклатурыУРЗ.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.НаименованиеГруппыНоменклатурыУРЗ <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.КодКлассификатораТНВЭД,
		|	КлассификаторТНВЭД.Ссылка КАК КодТНВЭД
		|ПОМЕСТИТЬ втПоискТНВЭД
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
		|		ПО втДанныеФайла.КодКлассификатораТНВЭД = КлассификаторТНВЭД.Код
		|			И (НЕ КлассификаторТНВЭД.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.КодКлассификатораТНВЭД <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.id_kontr,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Наименование
		|ПОМЕСТИТЬ втПоискКонтрагентаПоID
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО втДанныеФайла.id_kontr = Контрагенты.ИД
		|			И (НЕ Контрагенты.ЭтоГруппа)
		|			И (НЕ Контрагенты.ПометкаУдаления)
		|			И (Контрагенты.Ссылка В ИЕРАРХИИ (&ГруппаВиртуальныхКонтрагентов, &ГруппаПоставщикиТовара))
		|ГДЕ
		|	втДанныеФайла.id_kontr <> 0
		|	И втДанныеФайла.id_kontr <> &ИДВиртуальногоКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.НаименованиеКонтрагента,
		|	Контрагенты.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ втПоискКонтрагентаПоНаименованиюБезГруппировки
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО втДанныеФайла.НаименованиеКонтрагента = Контрагенты.Наименование
		|			И (НЕ Контрагенты.ЭтоГруппа)
		|			И (НЕ Контрагенты.ПометкаУдаления)
		|			И (Контрагенты.Ссылка В ИЕРАРХИИ (&ГруппаВиртуальныхКонтрагентов, &ГруппаПоставщикиТовара))
		|ГДЕ
		|	втДанныеФайла.id_kontr = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.НаименованиеКонтрагента,
		|	Контрагенты.Ссылка
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО втДанныеФайла.НаименованиеКонтрагента = Контрагенты.Наименование
		|			И (Контрагенты.ИНН = &ИННВиртуальногоКонтрагента)
		|			И (НЕ Контрагенты.ЭтоГруппа)
		|			И (НЕ Контрагенты.ПометкаУдаления)
		|			И (Контрагенты.Ссылка В ИЕРАРХИИ (&ГруппаВиртуальныхКонтрагентов, &ГруппаПоставщикиТовара))
		|ГДЕ
		|	втДанныеФайла.id_kontr = &ИДВиртуальногоКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.НаименованиеКонтрагента,
		|	МАКСИМУМ(Контрагенты.Ссылка) КАК Контрагент,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК Количество
		|ПОМЕСТИТЬ втПоискКонтрагентаПоНаименованию
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО втДанныеФайла.НаименованиеКонтрагента = Контрагенты.Наименование
		|			И (НЕ Контрагенты.ЭтоГруппа)
		//+++АК CISA 2018.11.16 ИП-00019632.02
		//|			И (НЕ Контрагенты.ПометкаУдаления)
		//---АК CISA
		|			И (Контрагенты.Ссылка В ИЕРАРХИИ (&ГруппаВиртуальныхКонтрагентов, &ГруппаПоставщикиТовара))
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеФайла.НаименованиеКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.НаименованиеТипаСрокаГодности,
		|	ТипыСроковГодности.Ссылка КАК ТипСрокаГодности
		|ПОМЕСТИТЬ втПоискТипаСрокаГодности
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСроковГодности КАК ТипыСроковГодности
		|		ПО втДанныеФайла.НаименованиеТипаСрокаГодности = ТипыСроковГодности.Наименование
		|			И (НЕ ТипыСроковГодности.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.НаименованиеТипаСрокаГодности <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.КодСтраныПроисхождения,
		|	КлассификаторСтранМира.Ссылка КАК СтранаПроисхождения
		|ПОМЕСТИТЬ втПоискСтраны
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|		ПО втДанныеФайла.КодСтраныПроисхождения = КлассификаторСтранМира.Код
		|			И (НЕ КлассификаторСтранМира.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.КодСтраныПроисхождения <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.КодТехнолога,
		|	РолиПользователей.Ссылка КАК РольТехнолога
		|ПОМЕСТИТЬ втПоискТехнолога
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
		|		ПО втДанныеФайла.КодТехнолога = РолиПользователей.Код
		|			И (НЕ РолиПользователей.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.ИННПоставщика,
		|	Контрагенты.Ссылка КАК Поставщик,
		|	Контрагенты.Наименование КАК Наименование
		|ПОМЕСТИТЬ втПоискПоставщика
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО втДанныеФайла.ИННПоставщика = Контрагенты.ИНН
		|			И (НЕ Контрагенты.ЭтоГруппа)
		//+++АК CISA 2018.11.16 ИП-00019632.02
		//|			И (НЕ Контрагенты.ПометкаУдаления)
		//---АК CISA
		|ГДЕ
		|	втДанныеФайла.ИННПоставщика <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.НаименованиеМестаВыкладки,
		|	МестаВыкладки.Ссылка КАК МестоВыкладки,
		|	МестаВыкладки.ТорговаяМарка КАК ТорговаяМарка
		|ПОМЕСТИТЬ втПоискМестаВыкладки
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МестаВыкладки КАК МестаВыкладки
		|		ПО втДанныеФайла.НаименованиеМестаВыкладки = МестаВыкладки.Наименование
		|			И (НЕ МестаВыкладки.ЭтоГруппа)
		|			И (НЕ МестаВыкладки.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.НаименованиеМестаВыкладки <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеФайла.НомерСтрокиФайла,
		|	втДанныеФайла.НаименованиеТовараУПоставщика,
		|	ЕСТЬNULL(втПоискНоменклатурыПоID.Номенклатура, ЕСТЬNULL(втПоискНоменклатурыПоНаименованию.Номенклатура, НЕОПРЕДЕЛЕНО)) КАК Номенклатура,
		|	ЕСТЬNULL(втПоискКонтрагентаПоID.Контрагент, ЕСТЬNULL(втПоискКонтрагентаПоНаименованию.Контрагент, НЕОПРЕДЕЛЕНО)) КАК Контрагент
		|ПОМЕСТИТЬ втПоискХарактеристики
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискНоменклатурыПоID КАК втПоискНоменклатурыПоID
		|		ПО втДанныеФайла.id_tov = втПоискНоменклатурыПоID.id_tov
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискНоменклатурыПоНаименованию КАК втПоискНоменклатурыПоНаименованию
		|		ПО втДанныеФайла.НаименованиеТовара = втПоискНоменклатурыПоНаименованию.НаименованиеТовара
		|			И (втПоискНоменклатурыПоНаименованию.Количество = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискКонтрагентаПоID КАК втПоискКонтрагентаПоID
		|		ПО втДанныеФайла.id_kontr = втПоискКонтрагентаПоID.id_kontr
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискКонтрагентаПоНаименованию КАК втПоискКонтрагентаПоНаименованию
		|		ПО втДанныеФайла.НаименованиеКонтрагента = втПоискКонтрагентаПоНаименованию.НаименованиеКонтрагента
		|			И (втПоискКонтрагентаПоНаименованию.Количество = 1)
		|ГДЕ
		|	втДанныеФайла.НаименованиеТовараУПоставщика <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоискХарактеристики.НомерСтрокиФайла,
		|	МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Характеристика
		|ПОМЕСТИТЬ втПоискХарактеристикиПоНаименованию
		|ИЗ
		|	втПоискХарактеристики КАК втПоискХарактеристики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО втПоискХарактеристики.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|			И втПоискХарактеристики.Контрагент.ИД = ХарактеристикиНоменклатуры.id_kontr
		|			И (втПоискХарактеристики.НаименованиеТовараУПоставщика = (ВЫРАЗИТЬ(ХарактеристикиНоменклатуры.НаименованиеТовараУПоставщика КАК СТРОКА(1000))))
		|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
		|ГДЕ
		|	втПоискХарактеристики.Номенклатура <> НЕОПРЕДЕЛЕНО
		|	И втПоискХарактеристики.Контрагент <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	втПоискХарактеристики.НомерСтрокиФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.УсловноеЗадвоение_id_tov,
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	МАКСИМУМ(АналогиНоменклатурыТовары.Ссылка) КАК Аналог
		|ПОМЕСТИТЬ втПоискАналоговНоменклатурыПоКоду
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
		|			ПО СпрНоменклатура.Ссылка = АналогиНоменклатурыТовары.Номенклатура
		|				И (НЕ АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления)
		|		ПО втДанныеФайла.УсловноеЗадвоение_id_tov = СпрНоменклатура.id_tov
		|			И (НЕ СпрНоменклатура.ЭтоГруппа)
		|			И (НЕ СпрНоменклатура.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.УсловноеЗадвоение_id_tov <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеФайла.УсловноеЗадвоение_id_tov,
		|	СпрНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеФайла.КодПродукцииВетис,
		|	МЙ_ПродукцияВетис.Ссылка КАК ПродукцияВетис
		|ПОМЕСТИТЬ втПоискПродукцииВетисПоКоду
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЙ_ПродукцияВетис КАК МЙ_ПродукцияВетис
		|		ПО втДанныеФайла.КодПродукцииВетис = МЙ_ПродукцияВетис.Код
		|			И (НЕ МЙ_ПродукцияВетис.ЭтоГруппа)
		|			И (НЕ МЙ_ПродукцияВетис.ПометкаУдаления)
		|ГДЕ
		|	втДанныеФайла.КодПродукцииВетис <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеФайла.НомерСтрокиФайла КАК НомерСтрокиФайла,
		|	втДанныеФайла.НаименованиеТовара,
		|	втДанныеФайла.id_tov,
		|	втДанныеФайла.ТоварнаяГруппа,
		|	втДанныеФайла.id_group,
		|	втДанныеФайла.ЕдиницаИзмерения,
		|	втДанныеФайла.Вес,
		|	втДанныеФайла.КороткийСрокГодности,
		|	втДанныеФайла.ТребуетсяВетеринарныйСертификат,
		|	втДанныеФайла.Складируемая,
		|	втДанныеФайла.БезУпаковки,
		|	втДанныеФайла.СтавкаНДСЗначение,
		|	втДанныеФайла.КатегорияАссортиментаЗначение,
		|	втДанныеФайла.НаименованиеГруппыНоменклатурыУРЗ,
		|	втДанныеФайла.КодКлассификатораТНВЭД,
		|	втДанныеФайла.НаименованиеКонтрагента,
		|	втДанныеФайла.id_kontr,
		|	втДанныеФайла.НаименованиеТовараУПоставщика,
		|	втДанныеФайла.СрокГодности,
		|	втДанныеФайла.НаименованиеТипаСрокаГодности,
		|	втДанныеФайла.КоличествоВУпаковке,
		|	втДанныеФайла.НаименованиеСтраны,
		|	втДанныеФайла.КодСтраныПроисхождения,
		|	втДанныеФайла.УпаковкаДляЦенника,
		|	втДанныеФайла.КодТехнолога,
		|	втДанныеФайла.Технолог,
		|	втДанныеФайла.ТемператураХраненияОт,
		|	втДанныеФайла.ТемператураХраненияДо,
		|	втДанныеФайла.Белки,
		|	втДанныеФайла.Жиры,
		|	втДанныеФайла.Углеводы,
		|	втДанныеФайла.Штрихкод,
		|	втДанныеФайла.СкладХранения,
		|	втДанныеФайла.ЗакупочнаяЦена,
		|	втДанныеФайла.ИННПоставщика,
		|	втДанныеФайла.НаименованиеПоставщика,
		|	втДанныеФайла.НаименованиеМестаВыкладки,
		|	втДанныеФайла.НаименованиеТорговойМарки,
		|	втДанныеФайла.Ширина,
		|	втДанныеФайла.Глубина,
		|	втДанныеФайла.Высота,
		|	втДанныеФайла.УсловноеЗадвоение_Наименование,
		|	втДанныеФайла.УсловноеЗадвоение_id_tov,
		|	втДанныеФайла.КодПродукцииВетис,
		|	втДанныеФайла.НаименованиеПродукцииВетис,
		|	втДанныеФайла.ВидПродукцииВетис,
		|	втДанныеФайла.ТипПродукцииВетис,
		|	ЕСТЬNULL(втПоискНоменклатурыПоID.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоID,
		|	ЕСТЬNULL(втПоискНоменклатурыПоID.Наименование, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоIDНаименование,
		|	ЕСТЬNULL(втПоискНоменклатурыПоНаименованию.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоНаименованию,
		|	ЕСТЬNULL(втПоискНоменклатурыПоНаименованию.Количество, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоНаименованиюКоличество,
		|	ЕСТЬNULL(втПоискГруппыНоменклатурыПоID.Номенклатура, НЕОПРЕДЕЛЕНО) КАК ГруппаНоменклатурыПоID,
		|	ЕСТЬNULL(втПоискГруппыНоменклатурыПоID.Наименование, НЕОПРЕДЕЛЕНО) КАК ГруппаНоменклатурыПоIDНаименование,
		|	ЕСТЬNULL(втПоискГруппыНоменклатурыПоНаименованию.Номенклатура, НЕОПРЕДЕЛЕНО) КАК ГруппаНоменклатурыПоНаименованию,
		|	ЕСТЬNULL(втПоискГруппыНоменклатурыПоНаименованию.Количество, НЕОПРЕДЕЛЕНО) КАК ГруппаНоменклатурыПоНаименованиюКоличество,
		|	ЕСТЬNULL(втПоискБазовойЕдиницыИзмерения.БазоваяЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК БазоваяЕдиницаИзмерения,
		|	ЕСТЬNULL(втПоискГруппыНоменклатурыУРЗ.ГруппаНоменклатурыУРЗ, НЕОПРЕДЕЛЕНО) КАК ГруппаНоменклатурыУРЗ,
		|	ЕСТЬNULL(втПоискТНВЭД.КодТНВЭД, НЕОПРЕДЕЛЕНО) КАК КодТНВЭД,
		|	ЕСТЬNULL(втПоискКонтрагентаПоID.Контрагент, НЕОПРЕДЕЛЕНО) КАК КонтрагентПоID,
		|	ЕСТЬNULL(втПоискКонтрагентаПоID.Наименование, НЕОПРЕДЕЛЕНО) КАК КонтрагентПоIDНаименование,
		|	ЕСТЬNULL(втПоискКонтрагентаПоНаименованию.Контрагент, НЕОПРЕДЕЛЕНО) КАК КонтрагентПоНаименованию,
		|	ЕСТЬNULL(втПоискКонтрагентаПоНаименованию.Количество, НЕОПРЕДЕЛЕНО) КАК КонтрагентПоНаименованиюКоличество,
		|	ЕСТЬNULL(втПоискТипаСрокаГодности.ТипСрокаГодности, НЕОПРЕДЕЛЕНО) КАК ТипСрокаГодности,
		|	ЕСТЬNULL(втПоискСтраны.СтранаПроисхождения, НЕОПРЕДЕЛЕНО) КАК СтранаПроисхождения,
		|	ЕСТЬNULL(втПоискТехнолога.РольТехнолога, НЕОПРЕДЕЛЕНО) КАК РольТехнолога,
		|	ЕСТЬNULL(втПоискПоставщика.Поставщик, НЕОПРЕДЕЛЕНО) КАК Поставщик,
		|	ЕСТЬNULL(втПоискПоставщика.Наименование, НЕОПРЕДЕЛЕНО) КАК ПоставщикНаименование,
		|	ЕСТЬNULL(втПоискМестаВыкладки.МестоВыкладки, НЕОПРЕДЕЛЕНО) КАК МестоВыкладки,
		|	ЕСТЬNULL(втПоискМестаВыкладки.ТорговаяМарка, НЕОПРЕДЕЛЕНО) КАК ТорговаяМарка,
		|	ЕСТЬNULL(втПоискХарактеристикиПоНаименованию.Характеристика, НЕОПРЕДЕЛЕНО) КАК ХарактеристикаПоНаименованию,
		|	ЕСТЬNULL(втПоискАналоговНоменклатурыПоКоду.Номенклатура, НЕОПРЕДЕЛЕНО) КАК УсловноеЗадвоение_Номенклатура,
		|	ЕСТЬNULL(втПоискАналоговНоменклатурыПоКоду.Аналог, НЕОПРЕДЕЛЕНО) КАК УсловноеЗадвоение_Аналог,
		|	ЕСТЬNULL(втПоискПродукцииВетисПоКоду.ПродукцияВетис, НЕОПРЕДЕЛЕНО) КАК ПродукцияВетис,
		|	ЕСТЬNULL(втПоискПродукцииВетисПоКоду.ПродукцияВетис.Наименование, НЕОПРЕДЕЛЕНО) КАК ПродукцияВетисНаименование,
		|	ЕСТЬNULL(втПоискПродукцииВетисПоКоду.ПродукцияВетис.ВидПродукции.Наименование, НЕОПРЕДЕЛЕНО) КАК ПродукцияВетисВидПродукции,
		|	ЕСТЬNULL(втПоискПродукцииВетисПоКоду.ПродукцияВетис.ТипПродукции.Наименование, НЕОПРЕДЕЛЕНО) КАК ПродукцияВетисТипПродукции
		|ИЗ
		|	втДанныеФайла КАК втДанныеФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискНоменклатурыПоID КАК втПоискНоменклатурыПоID
		|		ПО втДанныеФайла.id_tov = втПоискНоменклатурыПоID.id_tov
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискНоменклатурыПоНаименованию КАК втПоискНоменклатурыПоНаименованию
		|		ПО втДанныеФайла.НаименованиеТовара = втПоискНоменклатурыПоНаименованию.НаименованиеТовара
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискГруппыНоменклатурыПоID КАК втПоискГруппыНоменклатурыПоID
		|		ПО втДанныеФайла.id_group = втПоискГруппыНоменклатурыПоID.id_group
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискГруппыНоменклатурыПоНаименованию КАК втПоискГруппыНоменклатурыПоНаименованию
		|		ПО втДанныеФайла.ТоварнаяГруппа = втПоискГруппыНоменклатурыПоНаименованию.ТоварнаяГруппа
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискБазовойЕдиницыИзмерения КАК втПоискБазовойЕдиницыИзмерения
		|		ПО втДанныеФайла.ЕдиницаИзмерения = втПоискБазовойЕдиницыИзмерения.ЕдиницаИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискГруппыНоменклатурыУРЗ КАК втПоискГруппыНоменклатурыУРЗ
		|		ПО втДанныеФайла.НаименованиеГруппыНоменклатурыУРЗ = втПоискГруппыНоменклатурыУРЗ.НаименованиеГруппыНоменклатурыУРЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискТНВЭД КАК втПоискТНВЭД
		|		ПО втДанныеФайла.КодКлассификатораТНВЭД = втПоискТНВЭД.КодКлассификатораТНВЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискКонтрагентаПоID КАК втПоискКонтрагентаПоID
		|		ПО втДанныеФайла.id_kontr = втПоискКонтрагентаПоID.id_kontr
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискКонтрагентаПоНаименованию КАК втПоискКонтрагентаПоНаименованию
		|		ПО втДанныеФайла.НаименованиеКонтрагента = втПоискКонтрагентаПоНаименованию.НаименованиеКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискТипаСрокаГодности КАК втПоискТипаСрокаГодности
		|		ПО втДанныеФайла.НаименованиеТипаСрокаГодности = втПоискТипаСрокаГодности.НаименованиеТипаСрокаГодности
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискСтраны КАК втПоискСтраны
		|		ПО втДанныеФайла.КодСтраныПроисхождения = втПоискСтраны.КодСтраныПроисхождения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискТехнолога КАК втПоискТехнолога
		|		ПО втДанныеФайла.КодТехнолога = втПоискТехнолога.КодТехнолога
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискПоставщика КАК втПоискПоставщика
		|		ПО втДанныеФайла.ИННПоставщика = втПоискПоставщика.ИННПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискМестаВыкладки КАК втПоискМестаВыкладки
		|		ПО втДанныеФайла.НаименованиеМестаВыкладки = втПоискМестаВыкладки.НаименованиеМестаВыкладки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискХарактеристикиПоНаименованию КАК втПоискХарактеристикиПоНаименованию
		|		ПО втДанныеФайла.НомерСтрокиФайла = втПоискХарактеристикиПоНаименованию.НомерСтрокиФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискАналоговНоменклатурыПоКоду КАК втПоискАналоговНоменклатурыПоКоду
		|		ПО втДанныеФайла.УсловноеЗадвоение_id_tov = втПоискАналоговНоменклатурыПоКоду.УсловноеЗадвоение_id_tov
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоискПродукцииВетисПоКоду КАК втПоискПродукцииВетисПоКоду
		|		ПО втДанныеФайла.КодПродукцииВетис = втПоискПродукцииВетисПоКоду.КодПродукцииВетис
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиФайла");
	
	Запрос.УстановитьПараметр("ДанныеФайла",					ДанныеФайла);
	Запрос.УстановитьПараметр("ИДВиртуальногоКонтрагента",		ИДВиртуальногоКонтрагента);
	Запрос.УстановитьПараметр("ИННВиртуальногоКонтрагента",		Формат(ИДВиртуальногоКонтрагента, "ЧГ=0"));
	Запрос.УстановитьПараметр("ГруппаВиртуальныхКонтрагентов",	ГруппаВиртуальныхКонтрагентов);
	Запрос.УстановитьПараметр("ГруппаПоставщикиТовара",			ГруппаПоставщикиТовара);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;

КонецФункции

//+++АК LATV 2018.09.11 ИП-00019632
Функция ЗначенияПеречисления(ИмяПеречисления)

	Перечисление = Новый Соответствие;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Перечисление.Вставить(ЗначениеПеречисления.Синоним, Перечисления[ИмяПеречисления][ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	Возврат Перечисление;

КонецФункции

#КонецОбласти

#Область ПроверкаЗаполнения

//+++АК LATV 2018.09.10 ИП-00019632
Функция ПроверитьДанныеСтроки(ДанныеСтроки, ДанныеЗаполнения, ТекстОшибки)

	Отказ = Ложь;
	
	Ошибки = Новый Массив;
	
	Если Не Отказ Тогда
		ПроверитьДанныеПоставщика(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПроверитьДанныеКонтрагента(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПроверитьДанныеНоменклатуры(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПроверитьДанныеХарактеристикиНоменклатуры(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Ошибки, ";" + Символы.ПС);
	
	Возврат Не Отказ;

КонецФункции

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПроверитьДанныеПоставщика(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ)

	//Проверка на заполненность
	Если Не ДанныеСтроки.Поставщик.Пустая() Тогда
		Если Не ПустаяСтрока(ДанныеСтроки.НаименованиеПоставщика)
		   И ВРег(ДанныеСтроки.НаименованиеПоставщика) <> ВРег(ДанныеЗаполнения.ПоставщикНаименование) Тогда
			ТекстСообщения = НСтр("ru = 'Наименование поставщика, найденного по ИНН, отличается от наименования в файле'");
			ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Проверка данных для создания
	Если Ложь Тогда // Не создаем
		Возврат;
	КонецЕсли;
	
	// Сообщение об ошибке
	ДобавитьОшибку(НСтр("ru = 'Не найден Поставщик'"), Ошибки, Отказ);

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПроверитьДанныеКонтрагента(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ)

	//Проверка на заполненность
	Если Не ДанныеСтроки.Контрагент.Пустая() Тогда
		Если ДанныеЗаполнения.КонтрагентПоID <> Неопределено Тогда
			Если Не ПустаяСтрока(ДанныеСтроки.НаименованиеКонтрагента)
			   И ВРег(ДанныеСтроки.НаименованиеКонтрагента) <> ВРег(ДанныеЗаполнения.КонтрагентПоIDНаименование) Тогда
				ТекстСообщения = НСтр("ru = 'Наименование контрагента, найденного по идентификатору, отличается от наименования в файле'");
				ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.КонтрагентПоНаименованию <> Неопределено Тогда
			Если ДанныеЗаполнения.КонтрагентПоНаименованиюКоличество > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Найдено несколько контрагентов по наименованию'");
				ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Проверка данных для создания
	Если ДанныеСтроки.id_kontr = ИДВиртуальногоКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	// Сообщение об ошибке
	ДобавитьОшибку(НСтр("ru = 'Не найден Контрагент'"), Ошибки, Отказ);

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПроверитьДанныеНоменклатуры(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ)

	//Проверка на заполненность
	Если Не ДанныеСтроки.Номенклатура.Пустая() Тогда
		Если ДанныеЗаполнения.НоменклатураПоID <> Неопределено Тогда
			Если Не ПустаяСтрока(ДанныеСтроки.НаименованиеТовара)
			   И ВРег(ДанныеСтроки.НаименованиеТовара) <> ВРег(ДанныеЗаполнения.НоменклатураПоIDНаименование) Тогда
				ТекстСообщения = НСтр("ru = 'Наименование товара, найденного по идентификатору, отличается от наименования в файле'");
				ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.НоменклатураПоНаименованию <> Неопределено Тогда
			Если ДанныеЗаполнения.НоменклатураПоНаименованиюКоличество > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Найдено несколько товаров по наименованию'");
				ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеНоменклатурыВСтроке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Номенклатура, "ПометкаУдаления, ГруппаДоПомещенияВАрхив");
		Если ДанныеНоменклатурыВСтроке.ПометкаУдаления
		   И ДанныеНоменклатурыВСтроке.ГруппаДоПомещенияВАрхив.Пустая() Тогда
			ПроверитьДанныеГруппыНоменклатуры(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Проверка данных для создания
	Если ДанныеСтроки.id_tov = 0
	   И Не ПустаяСтрока(ДанныеСтроки.НаименованиеТовара) Тогда
		
		ПроверитьДанныеГруппыНоменклатуры(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
		
		Если ДанныеСтроки.БазоваяЕдиницаИзмерения.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдена единица измерения'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.Вес = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не указан вес'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.СтавкаНДС.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдена ставка НДС'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.КатегорияАссортимента.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдена категория ассортимента. Будет использована категория по-умолчанию'"), Ошибки);
		КонецЕсли;
		
		Если ДанныеСтроки.ГруппаНоменклатурыУРЗ.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдена группа номенклатуры УРЗ'"), Ошибки, Отказ);
		КонецЕсли;
		
		//+++АК CISA 2018.11.20 ИП-00020432
		Если ДанныеСтроки.ГруппаНоменклатурыУРЗ.Уровень() > 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдена указанная группа номенклатуры УРЗ среди элементов первого уровня!'"), Ошибки, Отказ);
		КонецЕсли;
		//---АК CISA

		Если СтрДлина(ДанныеСтроки.КодКлассификатораТНВЭД) <> 10 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не верный код ТН ВЭД'"), Ошибки);
			
		ИначеЕсли ДанныеСтроки.КодТНВЭД.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдена ТН ВЭД'"), Ошибки);
			
		КонецЕсли;
		
		Если ДанныеСтроки.МестоВыкладки.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдено место выкладки'"), Ошибки, Отказ);
			
		ИначеЕсли ДанныеСтроки.ТорговаяМарка.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдена торговая марка'"), Ошибки, Отказ);
			
		КонецЕсли;
		
		Если ДанныеСтроки.УсловноеЗадвоение_id_tov <> 0
		   И ДанныеСтроки.УсловноеЗадвоение_Номенклатура.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найдено условное задвоение'"), Ошибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Сообщение об ошибке
	ДобавитьОшибку(НСтр("ru = 'Не найдена Номенклатура'"), Ошибки, Отказ);

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПроверитьДанныеГруппыНоменклатуры(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ)

	//Проверка на заполненность
	Если Не ДанныеСтроки.ГруппаНоменклатуры.Пустая() Тогда
		Если ДанныеЗаполнения.ГруппаНоменклатурыПоID <> Неопределено Тогда
			Если Не ПустаяСтрока(ДанныеСтроки.ТоварнаяГруппа)
			   И ВРег(ДанныеСтроки.ТоварнаяГруппа) <> ВРег(ДанныеЗаполнения.ГруппаНоменклатурыПоIDНаименование) Тогда
				ТекстСообщения = НСтр("ru = 'Наименование группы товара, найденного по идентификатору, отличается от наименования в файле'");
				ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.ГруппаНоменклатурыПоНаименованию <> Неопределено Тогда
			Если ДанныеЗаполнения.ГруппаНоменклатурыПоНаименованиюКоличество > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Найдено несколько групп товаров по наименованию'");
				ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Проверка данных для создания
	Если Ложь Тогда // Не создаем
		Возврат;
	КонецЕсли;
	
	// Сообщение об ошибке
	ДобавитьОшибку(НСтр("ru = 'Не найдена группа номенклатуры'"), Ошибки, Отказ);

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПроверитьДанныеХарактеристикиНоменклатуры(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ)

	//Проверка на заполненность
	Если Не ДанныеСтроки.ХарактеристикаНоменклатуры.Пустая() Тогда
		ДобавитьОшибку(НСтр("ru = 'Характеристика уже заведена в базе'"), Ошибки, Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверка данных для создания
	Если Истина Тогда // Всегда создается
		
		Если ПустаяСтрока(ДанныеСтроки.НаименованиеТовараУПоставщика) Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнено наименование товара у поставщика'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.СрокГодности = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнен срок годности'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.ТипСрокаГодности.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найден тип срока годности'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.КоличествоВУпаковке = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнено количество в упаковке'"), Ошибки, Отказ);
			
		ИначеЕсли Не ДанныеСтроки.Весовой
		   И ДанныеСтроки.КоличествоВУпаковке <> Цел(ДанныеСтроки.КоличествоВУпаковке) Тогда
			ДобавитьОшибку(НСтр("ru = 'У штучного товара не должно быть дробной части в поле количество в упаковке'"), Ошибки, Отказ);
			
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеСтроки.УпаковкаДляЦенника) Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнена упаковка для ценника'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.РольТехнолога.Пустая() Тогда
			ДобавитьОшибку(НСтр("ru = 'Не найден технолог'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.Белки = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнены белки'"), Ошибки);
		КонецЕсли;
		
		Если ДанныеСтроки.Жиры = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнены жиры'"), Ошибки);
		КонецЕсли;
		
		Если ДанныеСтроки.Углеводы = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнены углеводы'"), Ошибки);
		КонецЕсли;
		
		СкладыХранения = Склады.НайтиСтроки(Новый Структура("НомерСтрокиФайла", ДанныеСтроки.НомерСтрокиФайла));
		Если СкладыХранения.Количество() = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнены склады хранения'"), Ошибки, Отказ);
			
		Иначе
			Для Каждого ТекСтрокаСклада Из СкладыХранения Цикл
				Если ТекСтрокаСклада.Склад.Пустая() Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найден склад хранения %1'"), ТекСтрокаСклада.НаименованиеСклада);
					ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ПроверитьШтрихкод(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
		
		Если ДанныеСтроки.ЗакупочнаяЦена = 0 Тогда
			ДобавитьОшибку(НСтр("ru = 'Не заполнена закупочная цена'"), Ошибки, Отказ);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ДанныеСтроки.КодПродукцииВетис) Тогда
			Если ДанныеСтроки.ПродукцияВетис.Пустая() Тогда
				ДобавитьОшибку(НСтр("ru = 'Не найдена продукция Ветис'"), Ошибки);
			Иначе
				Если ДанныеСтроки.НаименованиеПродукцииВетис <> ДанныеЗаполнения.ПродукцияВетисНаименование Тогда
					ДобавитьОшибку(НСтр("ru = 'Отличается наименование продукции Ветис'"), Ошибки);
				КонецЕсли;
				
				Если ДанныеСтроки.ВидПродукцииВетис <> ДанныеЗаполнения.ПродукцияВетисВидПродукции Тогда
					ДобавитьОшибку(НСтр("ru = 'Отличается вид продукции Ветис'"), Ошибки);
				КонецЕсли;
				
				Если ДанныеСтроки.ТипПродукцииВетис <> ДанныеЗаполнения.ПродукцияВетисТипПродукции Тогда
					ДобавитьОшибку(НСтр("ru = 'Отличается тип продукции Ветис'"), Ошибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Сообщение об ошибке
	ДобавитьОшибку(НСтр("ru = 'Не найдена характеристика номенклатуры'"), Ошибки, Отказ);

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПроверитьШтрихкод(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ)

	Штрихкод = ДанныеСтроки.Штрихкод;
	
	Если ПустаяСтрока(Штрихкод) Тогда
		// Генерируем новый
		Возврат;
	КонецЕсли;
	
	ПроверитьШтрихкодПоНастройкам(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ);
	
	Если Не ДанныеСтроки.Весовой Тогда
		КонтрольныйСимвол = ВнешниеДанные.КонтрольныйСимволEAN(Лев(Штрихкод, 12), 13);
		Если Прав(Штрихкод, 1) <> КонтрольныйСимвол Тогда
			ДобавитьОшибку(НСтр("ru = 'Контрольный символ штрихкода не верный'"), Ошибки, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не РегистрыСведений.ШтриховыеКоды.ПроверкаШтрихКода(Штрихкод, Неопределено, Неопределено, Ложь) Тогда
		ДобавитьОшибку(НСтр("ru = 'Штрихкод не прошел проверку'"), Ошибки, Отказ);
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.09.10 ИП-00019632
Процедура ПроверитьШтрихкодПоНастройкам(ДанныеСтроки, ДанныеЗаполнения, Ошибки, Отказ)

	Штрихкод = ДанныеСтроки.Штрихкод;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШтриховыеКоды_НастройкиФормирования.ТорговаяМарка,
		|	ШтриховыеКоды_НастройкиФормирования.ГенерироватьВесовойШкДляШтучногоТовара,
		|	СРЕДНЕЕ(ШтриховыеКоды_НастройкиФормирования.ПрефиксШтучногоТовара) КАК ПрефиксШтучногоТовара,
		|	СРЕДНЕЕ(ШтриховыеКоды_НастройкиФормирования.ДопПрефикс) КАК ДопПрефикс,
		|	СРЕДНЕЕ(ШтриховыеКоды_НастройкиФормирования.ПрефиксВесового) КАК ПрефиксВесового,
		|	СРЕДНЕЕ(ШтриховыеКоды_НастройкиФормирования.ДлинаКодаНоменклатура) КАК ДлинаШтрихкода
		|ИЗ
		|	РегистрСведений.ШтриховыеКоды_НастройкиФормирования КАК ШтриховыеКоды_НастройкиФормирования
		|ГДЕ
		|	ШтриховыеКоды_НастройкиФормирования.ТорговаяМарка = &ТорговаяМарка
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтриховыеКоды_НастройкиФормирования.ТорговаяМарка,
		|	ШтриховыеКоды_НастройкиФормирования.ГенерироватьВесовойШкДляШтучногоТовара");
	
	Запрос.УстановитьПараметр("ТорговаяМарка", ДанныеСтроки.ТорговаяМарка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДобавитьОшибку(НСтр("ru = 'Не определены настройки формирования штрихкода'"), Ошибки, Отказ);
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = РезультатЗапроса.Выбрать();
	СтруктураНастроек.Следующий();
	
	ДлинаШтрихкода = ?(ДанныеСтроки.Весовой, СтруктураНастроек.ДлинаШтрихкода, 13);
	Если СтрДлина(Штрихкод) <> ДлинаШтрихкода Тогда
		ДобавитьОшибку(НСтр("ru = 'Не верная длина штрихкода'"), Ошибки, Отказ);
	КонецЕсли;
	
	//Если Не ДанныеСтроки.Весовой Тогда
	//	Префикс = Формат(СтруктураНастроек.ПрефиксШтучногоТовара, "ЧГ=0");
	//	Префикс = Префикс + Формат(СтруктураНастроек.ДопПрефикс, "ЧЦ=3; ЧВН=");
	//Иначе
	//	Префикс = Строка(СтруктураНастроек.ПрефиксВесового);
	//КонецЕсли;
	
	Префикс = Строка(СтруктураНастроек.ПрефиксВесового);
	Если ДанныеСтроки.Весовой И Лев(Штрихкод, СтрДлина(Префикс)) <> Префикс
	 Или Не ДанныеСтроки.Весовой И Лев(Штрихкод, СтрДлина(Префикс)) = Префикс Тогда
		ДобавитьОшибку(НСтр("ru = 'Не верный префикс штрихкода'"), Ошибки, Отказ);
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.09.11 ИП-00019632
Процедура ДобавитьОшибку(ТекстСообщения, Ошибки, Отказ = Ложь)

	Ошибки.Добавить(ТекстСообщения);
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектов

//+++АК LATV 2018.09.11 ИП-00019632
Функция СоздатьКонтрагента(ДанныеСтроки)

	НачатьТранзакцию();
	
	Попытка
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Заполнить(Неопределено);
		
		НовыйКонтрагент.Родитель			= ГруппаВиртуальныхКонтрагентов;
		НовыйКонтрагент.Наименование		= ДанныеСтроки.НаименованиеКонтрагента;
		НовыйКонтрагент.НаименованиеПолное	= ДанныеСтроки.НаименованиеКонтрагента;
		НовыйКонтрагент.ИНН					= Формат(ИДВиртуальногоКонтрагента, "ЧГ=0");
		
		НовыйКонтрагент.ЯвляетсяПоставщиком	= Истина;
		НовыйКонтрагент.ГоловнойКонтрагент	= ДанныеСтроки.Поставщик;
		
		ДанныеПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Поставщик
			, "СтавкаНДС, ОсновнойБухгалтерПокупателя");
		ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеПоставщика);
		
		НовыйКонтрагент.ОсновнойМенеджерПокупателя = ПолучитьПользователяДляРоли(ДанныеСтроки.РольТехнолога);
		
		Если Не НовыйКонтрагент.ПроверитьЗаполнение() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать контрагента в строке %1'"), ДанныеСтроки.НомерСтрокиФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		
		НовыйКонтрагент.Записать();
		
		//Удалить_СкопироватьДанныеПоставщика(НовыйКонтрагент.Ссылка, ДанныеСтроки.Поставщик);
		ЗаполнитьСоответствиеОбъектРоль(НовыйКонтрагент.Ссылка, ДанныеСтроки);
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать контрагента в строке %1 по причине: %2'"), ДанныеСтроки.НомерСтрокиФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	Возврат НовыйКонтрагент;

КонецФункции

//+++АК LATV 2018.09.18 ИП-00019632
Функция ПолучитьПользователяДляРоли(РольПользователя)

	Пользователь = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
		|			И (РолиПользователейСоставРоли.Ссылка = &РольПользователя)
		|			И (РолиПользователейСоставРоли.НомерСтроки = 1)
		|			И (НЕ Пользователи.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("РольПользователя", РольПользователя);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Пользователь = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Пользователь;

КонецФункции

//+++АК LATV 2018.09.18 ИП-00019632
Процедура Удалить_СкопироватьДанныеПоставщика(Контрагент, Поставщик)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	СоответствиеОбъектРольСрезПоследних.ТипРолиID
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Поставщик) КАК СоответствиеОбъектРольСрезПоследних");
	
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СоответствиеОбъектРоль.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Контрагент);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Период				= ТекущаяДата();
		НоваяСтрока.ТипРоли				= Выборка.ТипРоли;
		НоваяСтрока.Объект				= Контрагент;
		
		НоваяСтрока.РольПользователя	= Выборка.РольПользователя;
		
		НоваяСтрока.ТипРолиID			= Выборка.ТипРолиID;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.11 ИП-00019632
Функция СоздатьНоменклатуру(ДанныеСтроки)

	НачатьТранзакцию();
	
	Попытка
		
		Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор);
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.Заполнить(Неопределено);
		НоваяНоменклатура.УстановитьСсылкуНового(Ссылка);
		
		НоваяНоменклатура.Наименование	= ДанныеСтроки.НаименованиеТовара;
		НоваяНоменклатура.Родитель		= ДанныеСтроки.ГруппаНоменклатуры;
		
		НоваяНоменклатура.БазоваяЕдиницаИзмерения	= ДанныеСтроки.БазоваяЕдиницаИзмерения;
		НоваяНоменклатура.ЕдиницаХраненияОстатков	= СоздатьЕдиницуИзмерения(Ссылка, ДанныеСтроки);
		
		НоваяНоменклатура.КороткийСрокГодности				= ДанныеСтроки.КороткийСрокГодности;
		НоваяНоменклатура.ТребуетсяВетеринарныйСертификат	= ДанныеСтроки.ТребуетсяВетеринарныйСертификат;
		НоваяНоменклатура.БезУпаковки						= ДанныеСтроки.БезУпаковки;
		НоваяНоменклатура.Складируемая						= ДанныеСтроки.Складируемая;
		НоваяНоменклатура.Весовой							= ДанныеСтроки.Весовой;
		
		НоваяНоменклатура.СтавкаНДС	= ДанныеСтроки.СтавкаНДС;
		
		Если Не ДанныеСтроки.КатегорияАссортимента.Пустая() Тогда
			НоваяНоменклатура.КатегорияАссортимента	= ДанныеСтроки.КатегорияАссортимента;
		КонецЕсли;
		
		НоваяНоменклатура.ГруппаНоменклатурыУРЗ	= ДанныеСтроки.ГруппаНоменклатурыУРЗ;
		НоваяНоменклатура.КодТНВЭД				= ДанныеСтроки.КодТНВЭД;
		НоваяНоменклатура.ТорговаяМарка			= ДанныеСтроки.ТорговаяМарка;
		
		НоваяНоменклатура.ВидНоменклатуры	= Перечисления.ВидыНоменклатуры.Товар;
		НоваяНоменклатура.ТипТовара			= Перечисления.ТипыТоваров.ПокупнойТовар;
		НоваяНоменклатура.ВидСкладируемости	= ?(ДанныеСтроки.Складируемая
			, Перечисления.ВидыСкладируемостиТовара.Складируемый, Перечисления.ВидыСкладируемостиТовара.Нескладируемый);
		
		Если Не НоваяНоменклатура.ПроверитьЗаполнение() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать номенклатуру в строке %1'"), ДанныеСтроки.НомерСтрокиФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		
		НоваяНоменклатура.Записать();
		
		ЗаполнитьВыкладкаПланограммы(НоваяНоменклатура.Ссылка, ДанныеСтроки);
		ЗаполнитьДоступностьТоваровНаСкладах(НоваяНоменклатура.Ссылка, ДанныеСтроки);
		
		Если Не ДанныеСтроки.УсловноеЗадвоение_Номенклатура.Пустая() Тогда
			НовыйАналог = СоздатьАналогИДобавитьНоменклатуру(НоваяНоменклатура.Ссылка, ДанныеСтроки);
			Если ДанныеСтроки.УсловноеЗадвоение_Аналог.Пустая()
			   И НовыйАналог <> Неопределено Тогда
				ЗаполнитьСтрокиТаблицыНовымЗначением(НовыйАналог, "УсловноеЗадвоение_Аналог");
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать номенклатуру в строке %1 по причине: %2'"), ДанныеСтроки.НомерСтрокиФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	Возврат НоваяНоменклатура;

КонецФункции

//+++АК LATV 2018.09.17 ИП-00019632
Функция СоздатьЕдиницуИзмерения(Номенклатура, ДанныеСтроки)

	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЕдиницаИзмерения.Наименование				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.БазоваяЕдиницаИзмерения, "Наименование");
	ЕдиницаИзмерения.ЕдиницаПоКлассификатору	= ДанныеСтроки.БазоваяЕдиницаИзмерения;
	ЕдиницаИзмерения.Вес						= ДанныеСтроки.Вес;
	ЕдиницаИзмерения.Коэффициент				= 1;
	ЕдиницаИзмерения.Владелец					= Номенклатура;
	
	Если Не ЕдиницаИзмерения.ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕдиницаИзмерения.ОбменДанными.Загрузка = Истина; // Чтобы записать без корректной ссылки на владельца
	ЕдиницаИзмерения.Записать();
	
	Возврат ЕдиницаИзмерения.Ссылка;

КонецФункции

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьВыкладкаПланограммы(Номенклатура, ДанныеСтроки)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Планограммы.Ссылка КАК Планограмма
		|ИЗ
		|	Справочник.Планограммы КАК Планограммы
		|ГДЕ
		|	НЕ Планограммы.НеАктуальная
		|	И Планограммы.ТорговаяМарка = &ТорговаяМарка";
	
	Запрос.УстановитьПараметр("ТорговаяМарка",	ДанныеСтроки.ТорговаяМарка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВыкладкаПланограммы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Планограмма		= Выборка.Планограмма;
		НоваяСтрока.Номенклатура	= Номенклатура;
		
		НоваяСтрока.МестоВыкладки	= ДанныеСтроки.МестоВыкладки;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьДоступностьТоваровНаСкладах(Номенклатура, ДанныеСтроки)

	НаборЗаписей = РегистрыСведений.ДоступностьТоваровНаСкладах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	
	СкладыХранения = Склады.НайтиСтроки(Новый Структура("НомерСтрокиФайла", ДанныеСтроки.НомерСтрокиФайла));
	Для Каждого ТекСтрокаСклада Из СкладыХранения Цикл
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница	= ТекСтрокаСклада.СтруктурнаяЕдиница;
		НоваяСтрока.Номенклатура		= Номенклатура;
		
		НоваяСтрока.Склад				= ТекСтрокаСклада.Склад;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.17 ИП-00019632
Функция СоздатьАналогИДобавитьНоменклатуру(Номенклатура, ДанныеСтроки)

	Если ДанныеСтроки.УсловноеЗадвоение_Аналог.Пустая() Тогда
		
		НовыйАналог = Справочники.АналогиНоменклатуры.СоздатьЭлемент();
		НовыйАналог.Наименование = ?(ПустаяСтрока(ДанныеСтроки.УсловноеЗадвоение_Наименование)
			, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.УсловноеЗадвоение_Номенклатура, "Наименование")
			, ДанныеСтроки.УсловноеЗадвоение_Наименование);
		
		НоваяСтрока = НовыйАналог.Товары.Добавить();
		НоваяСтрока.Номенклатура = ДанныеСтроки.УсловноеЗадвоение_Номенклатура;
		
	Иначе
		
		НовыйАналог = ДанныеСтроки.УсловноеЗадвоение_Аналог.ПолучитьОбъект();
		
	КонецЕсли;
	
	НоваяСтрока = НовыйАналог.Товары.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	
	Если Не НовыйАналог.ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйАналог.Записать();
	Возврат НовыйАналог;

КонецФункции

//+++АК LATV 2018.09.11 ИП-00019632
Функция ОживитьНоменклатуру(ДанныеСтроки)

	НачатьТранзакцию();
	
	Попытка
		
		Номенклатура = ДанныеСтроки.Номенклатура.ПолучитьОбъект();
		
		Номенклатура.Выведена	= Ложь;
		Номенклатура.Родитель	= Номенклатура.ГруппаДоПомещенияВАрхив;
		Если Номенклатура.Родитель.Пустая() Тогда
			Номенклатура.Родитель = ДанныеСтроки.ГруппаНоменклатуры;
		КонецЕсли;
		
		Номенклатура.Записать();
		
		Номенклатура.УстановитьПометкуУдаления(Ложь);
		
		ОживитьВыкладкаПланограммы(Номенклатура.Ссылка, ДанныеСтроки);
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось вернуть из архива номенклатуру в строке %1 по причине: %2'"), ДанныеСтроки.НомерСтрокиФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	Возврат Номенклатура;

КонецФункции

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ОживитьВыкладкаПланограммы(Номенклатура, ДанныеСтроки)

	НаборЗаписей = РегистрыСведений.ВыкладкаПланограммы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.ТоварВыведен = Ложь;
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.11 ИП-00019632
Функция СоздатьХарактеристику(ДанныеСтроки)

	НачатьТранзакцию();
	
	Попытка
		
		ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Контрагент, "Наименование, ИД");
		
		НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		НоваяХарактеристика.Заполнить(Неопределено);
		
		НоваяХарактеристика.Владелец = ДанныеСтроки.Номенклатура;
		
		НоваяХарактеристика.id_kontr								= ДанныеКонтрагента.ИД;
		НоваяХарактеристика.Наименование							= ДанныеКонтрагента.Наименование;
		НоваяХарактеристика.НаименованиеТовараУПоставщика			= ДанныеСтроки.НаименованиеТовараУПоставщика;
		
		НоваяХарактеристика.СрокГодности		= ДанныеСтроки.СрокГодности;
		НоваяХарактеристика.ТипСрокаГодности	= ДанныеСтроки.ТипСрокаГодности;
		
		Если Не ДанныеСтроки.СтавкаНДС.Пустая() Тогда
			ДанныеНоменклатурыВСтроке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Номенклатура, "СтавкаНДС");
			НоваяХарактеристика.ВыборСтавкиНДСВручную = ДанныеСтроки.СтавкаНДС <> ДанныеНоменклатурыВСтроке.СтавкаНДС;
		КонецЕсли;
		
		НоваяХарактеристика.ТемператураХраненияОт = ДанныеСтроки.ТемператураХраненияОт;
		НоваяХарактеристика.ТемператураХраненияДо = ДанныеСтроки.ТемператураХраненияДо;
		
		НоваяХарактеристика.Ширина	= ДанныеСтроки.Ширина;
		НоваяХарактеристика.Глубина	= ДанныеСтроки.Глубина;
		НоваяХарактеристика.Высота	= ДанныеСтроки.Высота;
		
		Справочники.КартыДизайнПроектов.ЗаполнитьТЧ_ПищеваяЦенность(НоваяХарактеристика);
		Для Каждого ТекСтрокаПищевойЦенности Из НоваяХарактеристика.ПищеваяЦенность Цикл
			Если Найти(ТекСтрокаПищевойЦенности.Показатель, "Белки") > 0 Тогда
				ТекСтрокаПищевойЦенности.Значение = ДанныеСтроки.Белки;
			ИначеЕсли Найти(ТекСтрокаПищевойЦенности.Показатель, "Жиры") > 0 Тогда
				ТекСтрокаПищевойЦенности.Значение = ДанныеСтроки.Жиры;
			ИначеЕсли Найти(ТекСтрокаПищевойЦенности.Показатель, "Углеводы") > 0 Тогда
				ТекСтрокаПищевойЦенности.Значение = ДанныеСтроки.Углеводы;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НоваяХарактеристика.ПроверитьЗаполнение() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать хараткеристику номенклатуры в строке %1'"), ДанныеСтроки.НомерСтрокиФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		
		//+++АК CISA 2018.11.16 ИП-00019632.02
		НоваяХарактеристика.СрокГодностиНеограничен = (ДанныеСтроки.СрокГодности = 999 И СокрЛП(ДанныеСтроки.ТипСрокаГодности.Наименование) = "Год");
		НоваяХарактеристика.БратьКоличествоВКоробкеПоСкладуДляРаспределения = Истина;
		//---АК CISA
		
		НоваяХарактеристика.Записать();
		
		ЗаполнитьСвойстваХарактеристики(НоваяХарактеристика.Ссылка, ДанныеСтроки);
		ЗаполнитьСоответствиеОбъектРоль(НоваяХарактеристика.Ссылка, ДанныеСтроки);
		ЗаполнитьНормативныйКвантУпаковки(НоваяХарактеристика.Ссылка, ДанныеСтроки);
		ЗаполнитьШтриховыеКоды(НоваяХарактеристика.Ссылка, ДанныеСтроки);
		Справочники.Номенклатура.УстановитьНомерПоНумератору(ДанныеСтроки.Номенклатура, НоваяХарактеристика.Ссылка);
		ЗаполнитьЦеныПоставщиков(НоваяХарактеристика.Ссылка, ДанныеСтроки);
		
		Если Не ДанныеСтроки.ПродукцияВетис.Пустая() Тогда
			ЗаполнитьМЙ_СоответствиеНоменклатуры(ДанныеСтроки.Номенклатура, НоваяХарактеристика.Ссылка, ДанныеСтроки);
		КонецЕсли;
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать хараткеристику номенклатуры в строке %1 по причине: %2'"), ДанныеСтроки.НомерСтрокиФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат НоваяХарактеристика;

КонецФункции

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьСвойстваХарактеристики(Характеристика, ДанныеСтроки)

	НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Характеристика);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Объект		= Характеристика;
	НоваяСтрока.Свойство	= ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке;
	НоваяСтрока.Значение	= ДанныеСтроки.КоличествоВУпаковке;
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Объект		= Характеристика;
	НоваяСтрока.Свойство	= ПланыВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения;
	НоваяСтрока.Значение	= ДанныеСтроки.СтранаПроисхождения;
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Объект		= Характеристика;
	НоваяСтрока.Свойство	= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00000000105"); //УпаковкаДляЦенника
	НоваяСтрока.Значение	= ДанныеСтроки.УпаковкаДляЦенника;
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Объект		= Характеристика;
	НоваяСтрока.Свойство	= ПланыВидовХарактеристик.СвойстваОбъектов.Производитель;
	НоваяСтрока.Значение	= ДанныеСтроки.Контрагент;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьСоответствиеОбъектРоль(Объект, ДанныеСтроки)

	НаборЗаписей = РегистрыСведений.СоответствиеОбъектРоль.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период				= ТекущаяДата();
	НоваяСтрока.ТипРоли				= ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству;
	НоваяСтрока.Объект				= Объект;
	
	НоваяСтрока.РольПользователя	= ДанныеСтроки.РольТехнолога;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьНормативныйКвантУпаковки(Характеристика, ДанныеСтроки)

	НаборЗаписей = РегистрыСведений.НормативныйКвантУпаковки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	
	СкладыХранения = Склады.НайтиСтроки(Новый Структура("НомерСтрокиФайла", ДанныеСтроки.НомерСтрокиФайла));
	Для Каждого ТекСтрокаСклада Из СкладыХранения Цикл
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Период			= ТекущаяДата();
		НоваяСтрока.Склад			= ТекСтрокаСклада.СтруктурнаяЕдиница;
		НоваяСтрока.Характеристика	= Характеристика;
		
		НоваяСтрока.Квант			= ДанныеСтроки.КоличествоВУпаковке;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьШтриховыеКоды(Характеристика, ДанныеСтроки)

	Если ПустаяСтрока(ДанныеСтроки.Штрихкод) Тогда
		ДанныеСтроки.Штрихкод = РегистрыСведений.ШтриховыеКоды.ГенерироватьНовыйШтрихКод(ДанныеСтроки.Номенклатура);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Номенклатура		= ДанныеСтроки.Номенклатура;
	НоваяСтрока.ЕдиницаИзмерения	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Номенклатура, "ЕдиницаХраненияОстатков");
	НоваяСтрока.Характеристика		= Характеристика;
	
	НоваяСтрока.ШтрихКод			= ДанныеСтроки.Штрихкод;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьЦеныПоставщиков(Характеристика, ДанныеСтроки)

	НаборЗаписей = РегистрыСведений.ЦеныПоставщиков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период			= ТекущаяДата();
	НоваяСтрока.Номенклатура	= ДанныеСтроки.Номенклатура;
	НоваяСтрока.Характеристика	= Характеристика;
	
	НоваяСтрока.Цена			= ДанныеСтроки.ЗакупочнаяЦена;
	
	НоваяСтрока.Поставщик		= ДанныеСтроки.Поставщик;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.17 ИП-00019632
Процедура ЗаполнитьМЙ_СоответствиеНоменклатуры(Номенклатура, Характеристика, ДанныеСтроки)

	НаборЗаписей = РегистрыСведений.МЙ_СоответствиеНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Номенклатура	= Номенклатура;
	НоваяСтрока.Характеристика	= Характеристика;
	
	ДанныеПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ПродукцияВетис, "ТипПродукции, ВидПродукции");
	НоваяСтрока.ПродукцияВетис	= ДанныеСтроки.ПродукцияВетис;
	НоваяСтрока.ТипПродукции	= ДанныеПродукции.ТипПродукции;
	НоваяСтрока.ВидПродукции	= ДанныеПродукции.ВидПродукции;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//+++АК LATV 2018.09.16 ИП-00019632
Процедура ЗаполнитьСтрокиТаблицыНовымЗначением(НовоеЗначение, ИмяКолонки)

	Отбор = Новый Структура;
	Отбор.Вставить("ЕстьОшибки", Ложь);
	
	Если ИмяКолонки = "Контрагент" Тогда
		Отбор.Вставить("Контрагент",				Справочники.Контрагенты.ПустаяСсылка());
		Отбор.Вставить("id_kontr",					ИДВиртуальногоКонтрагента);
		Отбор.Вставить("НаименованиеКонтрагента",	НовоеЗначение.Наименование);
		
	ИначеЕсли ИмяКолонки = "Номенклатура" Тогда
		Отбор.Вставить("Номенклатура",			Справочники.Номенклатура.ПустаяСсылка());
		Отбор.Вставить("id_tov",				0);
		Отбор.Вставить("НаименованиеТовара",	НовоеЗначение.Наименование);
		
	ИначеЕсли ИмяКолонки = "ХарактеристикаНоменклатуры" Тогда
		Отбор.Вставить("ХарактеристикаНоменклатуры",	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		Отбор.Вставить("Номенклатура",					НовоеЗначение.Владелец);
		Отбор.Вставить("НаименованиеТовараУПоставщика",	НовоеЗначение.НаименованиеТовараУПоставщика);
		//+++АК CISA 2018.11.27 ИП-00019632.02
		Отбор.Вставить("НаименованиеКонтрагента", НовоеЗначение.Наименование);
		//---АК CISA
		
	ИначеЕсли ИмяКолонки = "УсловноеЗадвоение_Аналог" Тогда
		Отбор.Вставить("УсловноеЗадвоение_Аналог",			Справочники.АналогиНоменклатуры.ПустаяСсылка());
		Отбор.Вставить("УсловноеЗадвоение_Наименование",	НовоеЗначение.Наименование);
		
	КонецЕсли;
	
	ВыбранныеСтроки = ДанныеНоменклатуры.НайтиСтроки(Отбор);
	Для Каждого ТекСтрокаНоменклатуры Из ВыбранныеСтроки Цикл
		ТекСтрокаНоменклатуры[ИмяКолонки] = НовоеЗначение.Ссылка;
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

ИДВиртуальногоКонтрагента		= 9999999999;
ГруппаВиртуальныхКонтрагентов	= Справочники.Контрагенты.НайтиПоНаименованию("9999999999", Истина, Справочники.Контрагенты.ПустаяСсылка());
ГруппаПоставщикиТовара			= Справочники.Контрагенты.НайтиПоКоду("000000452", Истина); // Поставщики ТОВАРА
