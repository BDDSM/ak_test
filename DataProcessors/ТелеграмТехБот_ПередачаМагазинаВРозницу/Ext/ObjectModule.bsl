//+++АК KOPA +Модуль 2018.03.07 ИП-00018092

#Область ___Тесты

Функция ___Переходы()
	Массив = Новый Массив;
	Массив.Добавить(Справочники.ФизическиеЛица);
	Массив.Добавить(Справочники.СтруктурныеЕдиницы);	
	Массив.Добавить(Справочники.БонусыПоРаскруткеТТ);
	Массив.Добавить(Справочники.РолиПользователей);
	Массив.Добавить(РегистрыСведений.ЦФОСтруктурныхЕдиниц);
	Массив.Добавить(РегистрыСведений.СоответствиеОбъектРоль);
	Массив.Добавить(РегистрыСведений.ПользователиПоЦФО);
	Массив.Добавить(Справочники.РолиПользователей);

	Возврат Массив;
КонецФункции

Функция ___ДобавитьТестВТаблицу(Таблица, Ключ, Значение)
	Строка = Таблица.Добавить();
	Строка.Ключ = Ключ;
	Строка.Значение = ЗначениеВСтрокуВнутр(Значение);
КонецФункции

Функция ___ПолучитьТесты()
	ФИО = "Абляева Гольфия Идрисовна";
	УИДАбляева = ПолучитьУИДАктивноеФизЛицо(ФИО);
	
	Таблица = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	Таблица.Колонки.Добавить("Ключ", ТипСтрока);
	Таблица.Колонки.Добавить("Значение", ТипСтрока);
//Бонусы по раскрутке	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "Бонусы");
	ТелоЗапроса.Вставить("ТипТочки", 1);
	
	___ДобавитьТестВТаблицу(Таблица, "Список бонусов ТипТочки = Магазин", ТелоЗапроса);
//Группы помощников по рознице	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ГруппыПомощникиПоРознице");
	
	___ДобавитьТестВТаблицу(Таблица, "Группы помощников по рознице", ТелоЗапроса);	

//Помощники по рознице	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ПомощникиПоРознице");
	ТелоЗапроса.Вставить("Родитель", "" + Справочники.РолиПользователей.НайтиПоКоду("00039").УникальныйИдентификатор());
	
	___ДобавитьТестВТаблицу(Таблица, "Список помощников по рознице для ТУ Группа1", ТелоЗапроса);
//Передать магазин в розницу

	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ПередатьМагазинВРозницу");
	ТелоЗапроса.Вставить("ФизЛицо", УИДАбляева);
	ТелоЗапроса.Вставить("Дата", '22220101');
	ТелоЗапроса.Вставить("НомерМагазина", 1234);
	ТелоЗапроса.Вставить("БонусКод", "000000015");
	
	___ДобавитьТестВТаблицу(Таблица, "Передать магазин в розницу", ТелоЗапроса);
//Отправка письма
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ОтправитьПисьмоФизЛицу");
	ТелоЗапроса.Вставить("ФизЛицо", УИДАбляева);
	ТелоЗапроса.Вставить("ЕМаил", "kopa@automacon.ru");
	ТелоЗапроса.Вставить("Тема", "Привет");
	ТелоЗапроса.Вставить("Текст", "Это тест");

	___ДобавитьТестВТаблицу(Таблица, "Отправить письмо kopa@automacon.ru", ТелоЗапроса);
	
	___ДобавитьТестВТаблицу(Таблица, "Передать магазин в розницу", ТелоЗапроса);
	
//Отправка письма
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "УправляющийПоРознице");
	ТелоЗапроса.Вставить("ФизЛицо", УИДАбляева);

	___ДобавитьТестВТаблицу(Таблица, "Получить данные управляющего по рознице. Родителя роли физлица", ТелоЗапроса);
	
	Возврат Таблица;
КонецФункции

Функция ___ПолучитьОписание() Экспорт 
	Структура = Новый Структура;
	Структура.Вставить("ИдЗадача", "ИП-00018092");
	Структура.Вставить("НаименованиеВнешнейОбработки", "___ПередачаМагазинаВРозницу");
	Структура.Вставить("Переходы", ___Переходы());
	Структура.Вставить("ТаблицаТесты", ___ПолучитьТесты());
	
	Возврат Структура;
КонецФункции

Функция ПолучитьУИДАктивноеФизЛицо(ФИО)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления
		|	И ФизическиеЛица.Активный
		|	И ФизическиеЛица.Наименование = &ФИО";
	Запрос.УстановитьПараметр("ФИО", ФИО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат "" + Выборка.Ссылка.УникальныйИдентификатор();
КонецФункции

#КонецОбласти

Функция ВыполнитьДействие(Данные) Экспорт
	Если Данные.ИмяКоманды = "Тест" Тогда
		Возврат Новый Структура("Ответ", "Тест пройден");
	ИначеЕсли Данные.ИмяКоманды = "Бонусы" Тогда 
		Возврат БонусыПоРаскрутке(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ГруппыПомощникиПоРознице" Тогда 
		Возврат ГруппыПомощникиПоРознице(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "ПомощникиПоРознице" Тогда 
		Возврат ПомощникиПоРознице(Данные);				
	ИначеЕсли Данные.ИмяКоманды = "ПередатьМагазинВРозницу" Тогда 
		Возврат ПередатьМагазинВРозницу(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ОтправитьПисьмоФизЛицу" Тогда 
		Возврат ОтправитьПисьмоФизЛицу(Данные);
	ИначеЕсли Данные.ИмяКоманды = "УправляющийПоРознице" Тогда 
		Возврат УправляющийПоРознице(Данные);		
	Иначе
		Возврат Новый Структура("Ошибка", "Не зашли");	
	КонецЕсли;	
КонецФункции

#Область Бонусы

Функция БонусыПоРаскрутке(Данные)
	Результат = Новый Структура;
	
	Попытка	
		Список = ПолучитьСпиокБонусовПоРаскрутке(Данные);
	    Результат.Вставить("Список", Список);
	Исключение
	    Результат.Вставить("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции 

Функция ПолучитьСпиокБонусовПоРаскрутке(Данные)
	ТипТочки = Перечисления.ТипыРозничныхТочек.пустаяссылка();
	
	Если Не Данные.ТипТочки = -1 Тогда
		ТипТочки = Перечисления.ТипыРозничныхТочек.Получить(Данные.ТипТочки);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БонусыПоРаскруткеТТ.Код,
		|	БонусыПоРаскруткеТТ.Наименование
		|ИЗ
		|	Справочник.БонусыПоРаскруткеТТ КАК БонусыПоРаскруткеТТ
		|ГДЕ
		|	НЕ БонусыПоРаскруткеТТ.ПометкаУдаления
		|	И БонусыПоРаскруткеТТ.ТипТочки = &ТипТочки
		|	И БонусыПоРаскруткеТТ.Действует";
	
	Запрос.УстановитьПараметр("ТипТочки", ТипТочки);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	е = 0;
	
	Пока Выборка.Следующий() Цикл
		Подразделение = Новый Структура;
		Подразделение.Вставить("Представление", Выборка.Наименование);
		
		Подразделение.Вставить("Код", "" + Выборка.Код);
		Подразделение.Вставить("ИД", е);
		
		е = е + 1;
		
		Результат.Добавить(Подразделение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ГруппыПомощникиПоРознице

Функция ГруппыПомощникиПоРознице(Данные)
	Результат = Новый Структура;
	
	Попытка	
		Список = ПолучитьСпиокГруппыПомощникиПоРознице(Данные);
	    Результат.Вставить("Список", Список);
	Исключение
	    Результат.Вставить("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСпиокГруппыПомощникиПоРознице(Данные)
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	РолиПользователейТипыРолей.Ссылка,
	//	|	РолиПользователейТипыРолей.Ссылка.Наименование
	//	|ПОМЕСТИТЬ втВерхнийУровень
	//	|ИЗ
	//	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	//	|ГДЕ
	//	|	РолиПользователейТипыРолей.ТипРоли.Код = &ТипРоли
	//	|	И РолиПользователейТипыРолей.Ссылка.Родитель = ЗНАЧЕНИЕ(справочник.РолиПользователей.ПустаяСсылка)
	//	|	И НЕ РолиПользователейТипыРолей.Ссылка.ПометкаУдаления
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	втВерхнийУровень.Ссылка,
	//	|	втВерхнийУровень.Наименование
	//	|ИЗ
	//	|	втВерхнийУровень КАК втВерхнийУровень
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	//	|		ПО втВерхнийУровень.Ссылка = РолиПользователейСоставРоли.Ссылка";
	//Запрос.УстановитьПараметр("ТипРоли", "UpravlyayushchiiPoRoznice");
//Поскольку не смогли определиться с фильтром по группам, пропишим их вручную

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиПользователей.Ссылка,
		|	РолиПользователей.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.РолиПользователей КАК РолиПользователей
		|ГДЕ
		|	НЕ РолиПользователей.ПометкаУдаления
		|	И РолиПользователей.Код В(&МассивКоды)";
	
	МассивКоды = Новый Массив;
	МассивКоды.Добавить("00039");
	МассивКоды.Добавить("00048");
	МассивКоды.Добавить("00057");
	МассивКоды.Добавить("00341");
	
	Запрос.УстановитьПараметр("МассивКоды", МассивКоды);
	Запрос.УстановитьПараметр("ТипРоли", "UpravlyayushchiiPoRoznice");
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	е = 0;
	
	Пока Выборка.Следующий() Цикл
		Элемент = Новый Структура;
		Элемент.Вставить("Представление", Выборка.Наименование);
		
		Элемент.Вставить("Ссылка", "" + Выборка.Ссылка.УникальныйИдентификатор());
		Элемент.Вставить("ИД", е);
		
		е = е + 1;
		
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПомощникиПоРознице

Функция ПомощникиПоРознице(Данные)
	Результат = Новый Структура;
	
	Попытка	
		Данные.Родитель = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.Родитель, Справочники.РолиПользователей);
		
		Список = ПолучитьСпиокПомощниковПоРознице(Данные);
	    Результат.Вставить("Список", Список);
	Исключение
	    Результат.Вставить("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСпиокПомощниковПоРознице(Данные)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник.Наименование КАК Наименование,
		|	РолиПользователейСоставРоли.Сотрудник.Код КАК Код,
		|	РолиПользователейСоставРоли.Сотрудник КАК Ссылка
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли)
		|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли или РолиПользователейТипыРолей.ТипРоли = &ТипРолиСторонняяРозница)
		//--- AK suvv
		|ГДЕ
		|	РолиПользователейСоставРоли.Ссылка.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиСторонняяРозница", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("Родитель", Данные.Родитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	е = 0;
	
	Пока Выборка.Следующий() Цикл
		Элемент = Новый Структура;
		Элемент.Вставить("Представление", Выборка.Наименование);
		
		Элемент.Вставить("Код", Выборка.Код);
		Элемент.Вставить("Ссылка", "" + Выборка.Ссылка.УникальныйИдентификатор());
		Элемент.Вставить("ИД", е);
		
		е = е + 1;
		
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПередатьМагазинВРозницу

Функция ПередатьМагазинВРозницу(Данные)
	Результат = Новый Структура;
	
	НачатьТранзакцию();
	
	Попытка	
		Список = ПередатьМагазинВРозницуВыполнить(Данные);
		
		ЗафиксироватьТранзакцию();
		Результат.Вставить("ОК", Истина);
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		//Ошибка = ИнформацияОбОшибке();
		
		Результат.Вставить("ОК", Ложь);
		//Результат.Вставить("Ошибка", Ошибка.Описание);
		Результат.Вставить("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции 

Функция ПолучитьЦФОФизЛица(ФизЛицо)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка
		|ПОМЕСТИТЬ тПользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизЛицо = &ФизЛицо
		|	И НЕ Пользователи.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиПоЦФОСрезПоследних.ЦФО
		|ИЗ
		|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(
		|			&Период,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					тПользователь.Ссылка
		|				ИЗ
		|					тПользователь КАК тПользователь)) КАК ПользователиПоЦФОСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЦФО;	
КонецФункции

Функция НайтиМагазинПоНомеруТочки(НомерТочки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.НомерТочки = &НомерТочки
	|	И СтруктурныеЕдиницы.Активное";
	
	Запрос.УстановитьПараметр("НомерТочки", НомерТочки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции 

Процедура ВнестиИзмененияВЦФОСтруктурныхЕдиниц(Магазин, ЦФО, Период)
	запись = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
	запись.Период = Период;
	запись.СтруктурнаяЕдиница = Магазин;
	запись.ЦФО = ЦФО;
	запись.Организация = Справочники.Организации.НайтиПоНаименованию("Вкусвилл");

	запись.Записать();
КонецПроцедуры

Процедура ПривязатьСотрудникаКМагазинуПоТипуРоли(Данные)	
	запись = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
	
	запись.Период = Данные.Период;
	запись.Объект = Данные.Магазин;	
	запись.ТипРоли = Данные.ТипРоли;
	запись.РольПользователя = Данные.РольПользователя;
	запись.ТипРолиID = Данные.ТипРоли.Код;
	запись.Записать();
КонецПроцедуры

Функция ФизЛицоПривязаноКМагазину(Магазин, ТипРоли, РольПользователя, Период)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Период,
		|			Объект = &Магазин
		|				И РольПользователя = &РольПользователя
		|				И ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("РольПользователя", РольПользователя);
	Запрос.УстановитьПараметр("ТипРоли", ТипРоли);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

Процедура ОбработатьСоответствиеОбъектРоль(ФизЛицоПомощник, Магазин, ДатаПередачиМагазина)
	ДанныеПривязкиКМагазину = Новый Структура;
	ДанныеПривязкиКМагазину.Вставить("Период", ДатаПередачиМагазина);
	ДанныеПривязкиКМагазину.Вставить("Магазин", Магазин);	
//Отвязываем помощника по раскрутке от магазина
	ТипРолиPomoshnikPoRaskrutke = ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("PomoshnikPoRaskrutke");
	ДанныеПривязкиКМагазину.Вставить("ТипРоли", ТипРолиPomoshnikPoRaskrutke);
	ДанныеПривязкиКМагазину.Вставить("РольПользователя", Неопределено);
	ПривязатьСотрудникаКМагазинуПоТипуРоли(ДанныеПривязкиКМагазину);	
//Проверяем не был ли принимающий помощник управляющего уже привязан к магазину
	ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;
	РольПользователя = ТелеграмТехБот.НайтиФункциональнуюРольПользователя(ФизЛицоПомощник, ТипРоли);
	
	ФизЛицоПривязаноКМагазину = ФизЛицоПривязаноКМагазину(Магазин, ТипРоли, РольПользователя, ДатаПередачиМагазина);
	//Привяжем помощника управляющего	
	Если Не ФизЛицоПривязаноКМагазину Тогда	
		
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		ТипРолиСторонняРозница = ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы;
		РольПользователяСторонняРозница = ТелеграмТехБот.НайтиФункциональнуюРольПользователя(ФизЛицоПомощник, ТипРолиСторонняяРозница);
		ФизЛицоСторонняяРозницаПривязаноКМагазину = ФизЛицоПривязаноКМагазину(Магазин, ТипРолиСторонняРозница, РольПользователяСторонняРозница, ДатаПередачиМагазина);
		
		Если ФизЛицоСторонняяРозницаПривязаноКМагазину Тогда 
			Возврат;
		КонецЕсли;
		//--- AK suvv
		
		ДанныеПривязкиКМагазину.Вставить("ТипРоли", ТипРоли);	
		ДанныеПривязкиКМагазину.Вставить("РольПользователя", РольПользователя);	
		ПривязатьСотрудникаКМагазинуПоТипуРоли(ДанныеПривязкиКМагазину);		
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПомощникаПоРознице()
	Возврат ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего;
КонецФункции

Функция ПолучитьАкцептантЗаявок(ФизЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Ссылка,
		|	РолиПользователейСоставРоли.Ссылка.Родитель
		|ПОМЕСТИТЬ втРолиПользователей
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		|			И (НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления)
		|			И (РолиПользователейСоставРоли.Сотрудник = &ФизЛицо)
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРолиПомощникПоРознице)
		|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРолиПомощникПоРознице или РолиПользователейТипыРолей.ТипРоли = &ТипРолиПомощникПоСтороннейРознице)
		//--- AK suvv
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник
		|ПОМЕСТИТЬ втВерховныйСотрудник
		|ИЗ
		|	втРолиПользователей КАК втРолиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|			ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
		|				И (РолиПользователейТипыРолей.ТипРоли.Код = &УправляющийПоРознице)
		|		ПО втРолиПользователей.Родитель = РолиПользователейСоставРоли.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерховныйСотрудник КАК втВерховныйСотрудник
		|		ПО Пользователи.ФизЛицо = втВерховныйСотрудник.Сотрудник";
	
	Запрос.УстановитьПараметр("ТипРолиПомощникПоРознице", ПолучитьПомощникаПоРознице());
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиПомощникПоСтороннейРознице", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("УправляющийПоРознице", "UpravlyayushchiiPoRoznice");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции

Функция ПолучитьЦФОКорневогоСотрудника(ФизЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Ссылка,
		|	РолиПользователейСоставРоли.Ссылка.Родитель
		|ПОМЕСТИТЬ втРолиПользователей
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		|			И (НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления)
		|			И (РолиПользователейСоставРоли.Сотрудник = &ФизЛицо)
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРолиПомощникПоРознице)
		|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРолиПомощникПоРознице ИЛИ РолиПользователейТипыРолей.ТипРоли = &ТипРолиПомощникПоСтороннейРознице)
		//--- AK suvv
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Сотрудник
		|ПОМЕСТИТЬ втВерховныйСотрудник
		|ИЗ
		|	втРолиПользователей КАК втРолиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|			ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		|				И (РолиПользователейТипыРолей.ТипРоли.Код = &УправляющийПоРознице)
		|		ПО втРолиПользователей.Родитель = РолиПользователейСоставРоли.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ПОМЕСТИТЬ втКорневойПользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерховныйСотрудник КАК втВерховныйСотрудник
		|		ПО Пользователи.ФизЛицо = втВерховныйСотрудник.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПользователиПоЦФОСрезПоследних.ЦФО,
		|	ПользователиПоЦФОСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(
		|			&Период,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					втКорневойПользователь.Ссылка
		|				ИЗ
		|					втКорневойПользователь КАК втКорневойПользователь)) КАК ПользователиПоЦФОСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ТипРолиПомощникПоРознице", ПолучитьПомощникаПоРознице());
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиПомощникПоСтороннейРознице", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("УправляющийПоРознице", "UpravlyayushchiiPoRoznice");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ЦФО;
КонецФункции

Процедура ИзменитьДанныеМагазина(СтруктурнаяЕдиница, Бонус, АкцептантЗаявок)
	обк = СтруктурнаяЕдиница.ПолучитьОбъект();
	обк.СрокПередачи = Бонус;
	обк.АкцептантЗаявок = АкцептантЗаявок;
	
	обк.Записать();
КонецПроцедуры

Функция ПередатьМагазинВРозницуВыполнить(Данные)
//ФизЛицо(Строка): УИД Помощника по рознице
//ДатаПередачиМагазина(Дата): Дата которую выбрал помощник по раскрутке для передачи магазина
//НомерМагазина(Число): НОмер магазина
//

	ФизЛицо = ТелеграмТехБот.ПолучитьФизЛицоПоУИД(Данные.ФизЛицо);
	Бонус = Справочники.БонусыПоРаскруткеТТ.НайтиПоКоду(Данные.БонусКод);
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		ВызватьИсключение "Не найдено физлицо. УИД: " + Данные.ФизЛицо;	
	КонецЕсли;
	
	ЦФО = ПолучитьЦФОКорневогоСотрудника(ФизЛицо);//ПолучитьЦФОФизЛица(ФизЛицо);
		
	ДатаПередачиМагазина = Данные.Дата;
	
	Магазин = НайтиМагазинПоНомеруТочки(Данные.НомерМагазина);
	
	АкцептантЗаявок = ПолучитьАкцептантЗаявок(ФизЛицо);
	
	ИзменитьДанныеМагазина(Магазин, Бонус, АкцептантЗаявок);
	
	Если Не ЗначениеЗаполнено(Магазин) Тогда
		ВызватьИсключение "Не найден магазин. Номер магазина: " + Данные.НомерМагазина;	
	КонецЕсли;
//	
	ВнестиИзмененияВЦФОСтруктурныхЕдиниц(Магазин, ЦФО, ДатаПередачиМагазина);

	ОбработатьСоответствиеОбъектРоль(ФизЛицо, Магазин, ДатаПередачиМагазина);
КонецФункции

#КонецОбласти

#Область УправляющийПоРознице

Функция УправляющийПоРознице(Данные)	
	Попытка	
		Данные.ФизЛицо = ТелеграмТехБот.ПолучитьФизЛицоПоУИД(Данные.ФизЛицо);
		Результат = ПолучитьДанныеУправляющегоПоРознице(Данные);
	Исключение
		Результат = Новый Структура;
		Результат.Вставить("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции

Функция ПолучитьДанныеУправляющегоПоРознице(Данные)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РолиПользователейСоставРоли.Ссылка
		|ПОМЕСТИТЬ втСправочникРольПользователя
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли)
		|			И (РолиПользователейТипыРолей.ТипРоли = &ТипРоли или РолиПользователейТипыРолей.ТипРоли = &ТипРолиСторонняяРозница)
		//--- AK suvv
		|			И (РолиПользователейСоставРоли.Сотрудник = &ФизЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РолиПользователейСоставРоли.Сотрудник,
		|	РолиПользователейСоставРоли.Сотрудник.Наименование КАК Наименование,
		|	РолиПользователейСоставРоли.Ссылка.Наименование КАК РольПользователяНаименование
		|ИЗ
		|	втСправочникРольПользователя КАК втСправочникРольПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО втСправочникРольПользователя.Ссылка.Родитель = РолиПользователейСоставРоли.Ссылка";
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиСторонняяРозница", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("ФизЛицо", Данные.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("ОК", Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();		

	Выборка.Следующий();
	
	Результат.ОК = Истина;
	Результат.Вставить("Ссылка", "" + Выборка.Сотрудник.УникальныйИдентификатор());
	Результат.Вставить("Представление", Выборка.Наименование);
	Результат.Вставить("РольПользователяНаименование", Выборка.РольПользователяНаименование);
	
	Возврат Результат;
КонецФункции

#КонецОбласти






#Область ОтправкаПисем

Функция ОтправитьПисьмоФизЛицу(Данные)
	Результат = Новый Структура;
	
	Попытка	
		Ответ = ОтправитьПисьмо(Данные);
		
		Если Ответ = Истина Тогда
			Результат.Вставить("ОК", 1);
		Иначе 
		    Результат.Вставить("ОК", 0);
			Результат.Вставить("Ошибка", Ответ);	
		КонецЕсли;
		
	Исключение
		Результат.Вставить("ОК", 0);
		Результат.Вставить("Ошибка", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции 

Функция ПолучитьЕМаилФизЛица(ФизЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &ТипЕМаил
		|	И КонтактнаяИнформация.Вид = &ВидЕМаил
		|	И КонтактнаяИнформация.Объект = &ФизЛицо";
	
	ТипЕМаил = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;	
	ВидЕМаил = Справочники.ВидыКонтактнойИнформации.EmailФизЛица;
	
	Запрос.УстановитьПараметр("ТипЕМаил", ТипЕМаил);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ВидЕМаил", ВидЕМаил);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Представление;		
КонецФункции

Функция ОтправитьПисьмо(Данные)
	ФизЛицо = ТелеграмТехБот.ПолучитьФизЛицоПоУИД(Данные.ФизЛицо);
	Тема = Данные.Тема;
	Текст = Данные.Текст;
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = Тема;
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	Получатель = Письмо.Получатели.Добавить();
	
	Емаил = Неопределено;
	
	Данные.Свойство("ЕМаил", Емаил);
		
	Если Не ЗначениеЗаполнено(Емаил) Тогда
		Емаил = ПолучитьЕМаилФизЛица(ФизЛицо);	
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(Емаил) Тогда
		Ошибка = "Не заполнен EMail: " + ФизЛицо;
		
		ВызватьИсключение Ошибка;	
	КонецЕсли;
	
	Получатель.Адрес = Емаил;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст = Текст;	
	
	Результат = Почта.Послать(Письмо);
	
	Почта.Отключиться();
	
	Если Результат.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ошибка =  "";
	
	Для каждого элем Из Результат Цикл
		Ошибка = "" + элем.Ключ + ": " + элем.Значение;
	КонецЦикла;
	
	Возврат Ошибка;
КонецФункции


#КонецОбласти